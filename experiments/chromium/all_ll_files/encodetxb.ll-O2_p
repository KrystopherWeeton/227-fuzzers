; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/encodetxb.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/encodetxb.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SCAN_ORDER = type { i16*, i16* }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.aom_writer = type { i32, i8*, %struct.od_ec_enc, i8 }
%struct.od_ec_enc = type { i8*, i32, i16*, i32, i32, i32, i16, i16, i32 }
%struct.tokenize_b_args = type { %struct.AV1_COMP*, %struct.ThreadData*, i32, i8, i8 }

@.str = private unnamed_addr constant [42 x i8] c"Failed to allocate coeff_buf_pool->tcoeff\00", align 1
@eob_to_pos_small = internal unnamed_addr constant [33 x i8] c"\00\01\02\03\03\04\04\04\04\05\05\05\05\05\05\05\05\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06", align 16
@eob_to_pos_large = internal unnamed_addr constant [17 x i8] c"\06\07\08\08\09\09\09\09\0A\0A\0A\0A\0A\0A\0A\0A\0B", align 16
@av1_eob_group_start = external local_unnamed_addr constant [12 x i16], align 16
@txsize_log2_minus4 = internal unnamed_addr constant [19 x i8] c"\00\02\04\06\06\01\01\03\03\05\05\06\06\02\02\04\04\05\05", align 16
@av1_eob_offset_bits = external local_unnamed_addr constant [12 x i16], align 16
@tx_type_to_class = internal unnamed_addr constant [16 x i8] c"\00\00\00\00\00\00\00\00\00\00\02\01\02\01\02\01", align 16
@av1_txb_init_levels = external local_unnamed_addr global void (i32*, i32, i32, i8*)*, align 8
@tx_size_high_unit = internal unnamed_addr constant [19 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 2, i32 1, i32 4, i32 2, i32 8, i32 4, i32 16, i32 8, i32 4, i32 1, i32 8, i32 2, i32 16, i32 4], align 16
@tx_size_wide_unit = internal unnamed_addr constant [19 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 1, i32 2, i32 2, i32 4, i32 4, i32 8, i32 8, i32 16, i32 1, i32 4, i32 2, i32 8, i32 4, i32 16], align 16
@txsize_sqr_map = internal unnamed_addr constant [19 x i8] c"\00\01\02\03\04\00\00\01\01\02\02\03\03\00\00\01\01\02\02", align 16
@txsize_sqr_up_map = internal unnamed_addr constant [19 x i8] c"\00\01\02\03\04\01\01\02\02\03\03\04\04\02\02\03\03\04\04", align 16
@update_cdf.nsymbs2speed = internal unnamed_addr constant [17 x i32] [i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2], align 16
@tx_size_wide_log2 = internal unnamed_addr constant [19 x i32] [i32 2, i32 3, i32 4, i32 5, i32 6, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 2, i32 4, i32 3, i32 5, i32 4, i32 6], align 16
@tx_size_high = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 8, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64, i32 32, i32 16, i32 4, i32 32, i32 8, i32 64, i32 16], align 16
@clip_max3 = internal unnamed_addr constant [256 x i8] calign 16
@av1_nz_map_ctx_offset = external local_unnamed_addr global [19 x i8*], align 16
@nz_map_ctx_offset_1d = internal unnamed_addr constant [32 x i32] [i32 26, i32 31, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36], align 16
@intra_mode_to_tx_type._intra_mode_to_tx_type = internal unnamed_addr constant [13 x i8] c"\00\01\02\00\03\01\02\02\01\03\01\02\03", align 1
@get_uv_mode.uv2y = internal unnamed_addr constant [16 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\00\19\19", align 16
@av1_ext_tx_set_lookup = internal unnamed_addr constant [2 x [2 x i8]] [[2 x i8] c"\03\02", [2 x i8] c"\05\04"], align 1
@av1_ext_tx_used = internal unnamed_addr constant <{ <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32] }> <{ <{ i32, [15 x i32] }> <{ i32 1, [15 x i32] zeroinitializer }>, [16 x i32] [i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1] }>, align 16
@tx_size_wide = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 4, i32 8, i32 8, i32 16, i32 16, i32 32, i32 32, i32 64, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64], align 16
@av1_scan_orders = external local_unnamed_addr constant [19 x [16 x %struct.SCAN_ORDER]], align 16
@block_size_wide = internal unnamed_addr constant [22 x i8] c"\04\04\08\08\08\10\10\10   @@@\80\80\04\10\08 \10@", align 16
@block_size_high = internal unnamed_addr constant [22 x i8] c"\04\08\04\08\10\08\10 \10 @ @\80@\80\10\04 \08@\10", align 16
@max_txsize_rect_lookup = internal unnamed_addr constant [22 x i8] c"\00\05\06\01\07\08\02\09\0A\03\0B\0C\04\04\04\04\0D\0E\0F\10\11\12", align 16
@get_txb_ctx.signs = internal unnamed_addr constant [3 x i8] c"\00\FF\01", align 1
@get_txb_ctx.dc_sign_contexts = internal unnamed_addr constant [65 x i8] c"\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\00\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02", align 16
@txsize_to_bsize = internal unnamed_addr constant [19 x i8] c"\00\03\06\09\0C\01\02\04\05\07\08\0A\0B\10\11\12\13\14\15", align 16
@get_txb_ctx.skip_contexts = internal unnamed_addr constant [5 x [5 x i8]] [[5 x i8] c"\01\02\02\02\03", [5 x i8] c"\02\04\04\04\05", [5 x i8] c"\02\04\04\04\05", [5 x i8] c"\02\04\04\04\05", [5 x i8] c"\03\05\05\05\06"], align 16
@num_pels_log2_lookup = internal unnamed_addr constant [22 x i8] c"\04\05\05\06\07\07\08\09\09\0A\0B\0B\0C\0D\0D\0E\06\06\08\08\0A\0A", align 16
@tx_size_2d = internal unnamed_addr constant [20 x i32] [i32 16, i32 64, i32 256, i32 1024, i32 4096, i32 32, i32 32, i32 128, i32 128, i32 512, i32 512, i32 2048, i32 2048, i32 64, i32 64, i32 256, i32 256, i32 1024, i32 1024, i32 0], align 16
@av1_num_ext_tx_set = internal unnamed_addr constant [6 x i32] [i32 1, i32 2, i32 5, i32 7, i32 12, i32 16], align 16
@fimode_to_intradir = internal unnamed_addr constant [5 x i8] c"\00\01\02\06\00", align 1
@ext_tx_set_index = internal unnamed_addr constant [2 x [6 x i32]] [[6 x i32] [i32 0, i32 -1, i32 2, i32 1, i32 -1, i32 -1], [6 x i32] [i32 0, i32 3, i32 -1, i32 -1, i32 2, i32 1]], align 16
@av1_ext_tx_ind = internal unnamed_addr constant <{ [16 x i32], <{ i32, [15 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, [16 x i32], [16 x i32], [16 x i32] }> <{ [16 x i32] zeroinitializer, <{ i32, [15 x i32] }> <{ i32 1, [15 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, [12 x i32] }> <{ i32 1, i32 3, i32 4, i32 2, [12 x i32] zeroinitializer }>, [16 x i32] [i32 1, i32 5, i32 6, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 3, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 3, i32 4, i32 5, i32 8, i32 6, i32 7, i32 9, i32 10, i32 11, i32 0, i32 1, i32 2, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 7, i32 8, i32 9, i32 12, i32 10, i32 11, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6] }>, align 16
@ss_size_lookup = internal unnamed_addr constant [22 x [2 x [2 x i8]]] [[2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] [[2 x i8] c"\01\00", [2 x i8] c"\FF\00"], [2 x [2 x i8]] [[2 x i8] c"\02\FF", [2 x i8] zeroinitializer], [2 x [2 x i8]] [[2 x i8] c"\03\02", [2 x i8] c"\01\00"], [2 x [2 x i8]] [[2 x i8] c"\04\03", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\05\FF", [2 x i8] c"\03\02"], [2 x [2 x i8]] [[2 x i8] c"\06\05", [2 x i8] c"\04\03"], [2 x [2 x i8]] [[2 x i8] c"\07\06", [2 x i8] c"\FF\04"], [2 x [2 x i8]] [[2 x i8] c"\08\FF", [2 x i8] c"\06\05"], [2 x [2 x i8]] [[2 x i8] c"\09\08", [2 x i8] c"\07\06"], [2 x [2 x i8]] [[2 x i8] c"\0A\09", [2 x i8] c"\FF\07"], [2 x [2 x i8]] [[2 x i8] c"\0B\FF", [2 x i8] c"\09\08"], [2 x [2 x i8]] [[2 x i8] c"\0C\0B", [2 x i8] c"\0A\09"], [2 x [2 x i8]] [[2 x i8] c"\0D\0C", [2 x i8] c"\FF\0A"], [2 x [2 x i8]] [[2 x i8] c"\0E\FF", [2 x i8] c"\0C\0B"], [2 x [2 x i8]] [[2 x i8] c"\0F\0E", [2 x i8] c"\0D\0C"], [2 x [2 x i8]] [[2 x i8] c"\10\01", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\11\FF", [2 x i8] c"\02\02"], [2 x [2 x i8]] [[2 x i8] c"\12\04", [2 x i8] c"\FF\10"], [2 x [2 x i8]] [[2 x i8] c"\13\FF", [2 x i8] c"\05\11"], [2 x [2 x i8]] [[2 x i8] c"\14\07", [2 x i8] c"\FF\12"], [2 x [2 x i8]] [[2 x i8] c"\15\FF", [2 x i8] c"\08\13"]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_alloc_txb_buf(%struct.AV1_COMP* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 7
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %6 = load %struct.SequenceHeader*, %struct.SequenceHeader** %5, align 16
  %7 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 9
  %8 = load i32, i32* %7, align 4
  %9 = ashr i32 %4, %8
  %10 = add i32 %9, 1
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %12 = load i32, i32* %11, align 16
  %13 = ashr i32 %12, %8
  %14 = add i32 %13, 1
  %15 = mul i32 %14, %10
  %16 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 27
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 0
  %19 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 32
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 33
  %22 = load i32, i32* %21, align 4
  %23 = add nsw i32 %22, %20
  %24 = lshr i32 16384, %23
  %25 = select i1 %18, i32 2, i32 0
  %26 = mul nsw i32 %24, %25
  %27 = add nuw nsw i32 %26, 16384
  %28 = mul nsw i32 %27, %15
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 6
  %30 = bitcast %struct.CB_COEFF_BUFFER** %29 to i8**
  %31 = load i8*, i8** %30, align 16
  tail call void @aom_free(i8* %31) #7
  %32 = bitcast %struct.CoeffBufferPool* %2 to i8**
  %33 = load i8*, i8** %32, align 8
  tail call void @aom_free(i8* %33) #7
  %34 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 7, i32 1
  %35 = bitcast i16** %34 to i8**
  %36 = load i8*, i8** %35, align 8
  tail call void @aom_free(i8* %36) #7
  %37 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 7, i32 2
  %38 = load i8*, i8** %37, align 8
  tail call void @aom_free(i8* %38) #7
  %39 = sext i32 %15 to i64
  %40 = mul nsw i64 %39, 72
  %41 = tail call i8* @aom_malloc(i64 %40) #7
  store i8* %41, i8** %30, align 16
  %42 = sext i32 %28 to i64
  %43 = shl nsw i64 %42, 2
  %44 = tail call i8* @aom_memalign(i64 32, i64 %43) #7
  %45 = getelementptr inbounds %struct.CoeffBufferPool, %struct.CoeffBufferPool* %2, i64 0, i32 0
  store i8* %44, i8** %32, align 8
  %46 = icmp eq i8* %44, null
  br i1 %46, label %47, label %50

47:                                               ; preds = %1
  %48 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %49 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %48, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %49, i32 2, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0)) #7
  br label %50

50:                                               ; preds = %1, %47
  %51 = lshr i64 %42, 3
  %52 = and i64 %51, 1152921504606846975
  %53 = tail call i8* @aom_malloc(i64 %52) #7
  store i8* %53, i8** %35, align 8
  %54 = lshr i64 %42, 4
  %55 = tail call i8* @aom_malloc(i64 %54) #7
  store i8* %55, i8** %37, align 8
  %56 = icmp sgt i32 %15, 0
  br i1 %56, label %57, label %81

57:                                               ; preds = %50
  %58 = load i16*, i16** %34, align 8
  %59 = load i32*, i32** %45, align 8
  %60 = zext i32 %15 to i64
  %61 = sext i32 %24 to i64
  %62 = sdiv i32 %24, 16
  %63 = sext i32 %62 to i64
  %64 = sext i32 %24 to i64
  %65 = sdiv i32 %24, 16
  %66 = sext i32 %65 to i64
  br label %67

67:                                               ; preds = %82, %57
  %68 = phi i64 [ 0, %57 ], [ %86, %82 ]
  %69 = phi i8* [ %55, %57 ], [ %85, %82 ]
  %70 = phi i16* [ %58, %57 ], [ %84, %82 ]
  %71 = phi i32* [ %59, %57 ], [ %83, %82 ]
  %72 = load %struct.CB_COEFF_BUFFER*, %struct.CB_COEFF_BUFFER** %29, align 16
  %73 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %72, i64 %68, i32 0, i64 0
  store i32* %71, i32** %73, align 8
  %74 = load %struct.CB_COEFF_BUFFER*, %struct.CB_COEFF_BUFFER** %29, align 16
  %75 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %74, i64 %68, i32 1, i64 0
  store i16* %70, i16** %75, align 8
  %76 = load %struct.CB_COEFF_BUFFER*, %struct.CB_COEFF_BUFFER** %29, align 16
  %77 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %76, i64 %68, i32 2, i64 0
  store i8* %69, i8** %77, align 8
  %78 = getelementptr inbounds i32, i32* %71, i64 16384
  %79 = getelementptr inbounds i16, i16* %70, i64 1024
  %80 = getelementptr inbounds i8, i8* %69, i64 1024
  br i1 %18, label %88, label %82

81:                                               ; preds = %82, %50
  ret void

82:                                               ; preds = %67, %88
  %83 = phi i32* [ %78, %67 ], [ %104, %88 ]
  %84 = phi i16* [ %79, %67 ], [ %105, %88 ]
  %85 = phi i8* [ %80, %67 ], [ %106, %88 ]
  %86 = add nuw nsw i64 %68, 1
  %87 = icmp eq i64 %86, %60
  br i1 %87, label %81, label %67

88:                                               ; preds = %67
  %89 = load %struct.CB_COEFF_BUFFER*, %struct.CB_COEFF_BUFFER** %29, align 16
  %90 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %89, i64 %68, i32 0, i64 1
  store i32* %78, i32** %90, align 8
  %91 = load %struct.CB_COEFF_BUFFER*, %struct.CB_COEFF_BUFFER** %29, align 16
  %92 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %91, i64 %68, i32 1, i64 1
  store i16* %79, i16** %92, align 8
  %93 = load %struct.CB_COEFF_BUFFER*, %struct.CB_COEFF_BUFFER** %29, align 16
  %94 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %93, i64 %68, i32 2, i64 1
  store i8* %80, i8** %94, align 8
  %95 = getelementptr inbounds i32, i32* %78, i64 %61
  %96 = getelementptr inbounds i16, i16* %79, i64 %63
  %97 = getelementptr inbounds i8, i8* %80, i64 %63
  %98 = load %struct.CB_COEFF_BUFFER*, %struct.CB_COEFF_BUFFER** %29, align 16
  %99 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %98, i64 %68, i32 0, i64 2
  store i32* %95, i32** %99, align 8
  %100 = load %struct.CB_COEFF_BUFFER*, %struct.CB_COEFF_BUFFER** %29, align 16
  %101 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %100, i64 %68, i32 1, i64 2
  store i16* %96, i16** %101, align 8
  %102 = load %struct.CB_COEFF_BUFFER*, %struct.CB_COEFF_BUFFER** %29, align 16
  %103 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %102, i64 %68, i32 2, i64 2
  store i8* %97, i8** %103, align 8
  %104 = getelementptr inbounds i32, i32* %95, i64 %64
  %105 = getelementptr inbounds i16, i16* %96, i64 %66
  %106 = getelementptr inbounds i8, i8* %97, i64 %66
  br label %82
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_free_txb_buf(%struct.AV1_COMP* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 7
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 6
  %4 = bitcast %struct.CB_COEFF_BUFFER** %3 to i8**
  %5 = load i8*, i8** %4, align 16
  tail call void @aom_free(i8* %5) #7
  %6 = bitcast %struct.CoeffBufferPool* %2 to i8**
  %7 = load i8*, i8** %6, align 8
  tail call void @aom_free(i8* %7) #7
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 7, i32 1
  %9 = bitcast i16** %8 to i8**
  %10 = load i8*, i8** %9, align 8
  tail call void @aom_free(i8* %10) #7
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 7, i32 2
  %12 = load i8*, i8** %11, align 8
  tail call void @aom_free(i8* %12) #7
  ret void
}

declare i8* @aom_malloc(i64) local_unnamed_addr #2

declare i8* @aom_memalign(i64, i64) local_unnamed_addr #2

declare void @aom_internal_error(%struct.aom_internal_error_info*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @aom_free(i8*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @av1_get_eob_pos_token(i32, i32* nocapture) local_unnamed_addr #3 {
  %3 = icmp slt i32 %0, 33
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds [33 x i8], [33 x i8]* @eob_to_pos_small, i64 0, i64 %5
  br label %16

7:                                                ; preds = %2
  %8 = icmp slt i32 %0, 513
  br i1 %8, label %9, label %13

9:                                                ; preds = %7
  %10 = add nsw i32 %0, -1
  %11 = ashr i32 %10, 5
  %12 = sext i32 %11 to i64
  br label %13

13:                                               ; preds = %7, %9
  %14 = phi i64 [ %12, %9 ], [ 16, %7 ]
  %15 = getelementptr inbounds [17 x i8], [17 x i8]* @eob_to_pos_large, i64 0, i64 %14
  br label %16

16:                                               ; preds = %13, %4
  %17 = phi i8* [ %6, %4 ], [ %15, %13 ]
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = sext i8 %18 to i64
  %21 = getelementptr inbounds [12 x i16], [12 x i16]* @av1_eob_group_start, i64 0, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = sext i16 %22 to i32
  %24 = sub nsw i32 %0, %23
  store i32 %24, i32* %1, align 4
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_update_eob_context(i32, i8 zeroext, i8 zeroext, i8 zeroext, %struct.frame_contexts* nocapture, i8 zeroext) local_unnamed_addr #0 {
  %7 = icmp slt i32 %0, 33
  br i1 %7, label %8, label %11

8:                                                ; preds = %6
  %9 = sext i32 %0 to i64
  %10 = getelementptr inbounds [33 x i8], [33 x i8]* @eob_to_pos_small, i64 0, i64 %9
  br label %20

11:                                               ; preds = %6
  %12 = icmp slt i32 %0, 513
  br i1 %12, label %13, label %17

13:                                               ; preds = %11
  %14 = add nsw i32 %0, -1
  %15 = ashr i32 %14, 5
  %16 = sext i32 %15 to i64
  br label %17

17:                                               ; preds = %13, %11
  %18 = phi i64 [ %16, %13 ], [ 16, %11 ]
  %19 = getelementptr inbounds [17 x i8], [17 x i8]* @eob_to_pos_large, i64 0, i64 %18
  br label %20

20:                                               ; preds = %8, %17
  %21 = phi i8* [ %10, %8 ], [ %19, %17 ]
  %22 = load i8, i8* %21, align 1
  %23 = sext i8 %22 to i64
  %24 = getelementptr inbounds [12 x i16], [12 x i16]* @av1_eob_group_start, i64 0, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = sub nsw i32 %0, %26
  %28 = zext i8 %1 to i64
  %29 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_map, i64 0, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %28
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = add nuw nsw i64 %31, 1
  %36 = add nuw nsw i64 %35, %34
  %37 = lshr i64 %36, 1
  %38 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_log2_minus4, i64 0, i64 %28
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp ne i8 %2, 0
  switch i32 %40, label %276 [
    i32 0, label %42
    i32 1, label %81
    i32 2, label %120
    i32 3, label %159
    i32 4, label %198
    i32 5, label %237
  ]

42:                                               ; preds = %20
  %43 = icmp eq i8 %5, 0
  br i1 %43, label %360, label %44

44:                                               ; preds = %42
  %45 = zext i8 %3 to i64
  %46 = zext i1 %41 to i64
  %47 = add i8 %22, -1
  %48 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 3, i64 %45, i64 %46, i64 5
  %49 = load i16, i16* %48, align 2
  %50 = icmp ugt i16 %49, 15
  %51 = select i1 %50, i32 4, i32 3
  %52 = icmp ugt i16 %49, 31
  %53 = select i1 %52, i32 3, i32 2
  %54 = add nuw nsw i32 %53, %51
  %55 = sext i8 %47 to i64
  %56 = and i64 %55, 4294967295
  %57 = icmp eq i64 %56, 0
  %58 = select i1 %57, i32 0, i32 32768
  %59 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 3, i64 %45, i64 %46, i64 0
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = icmp ult i32 %58, %61
  br i1 %62, label %63, label %68

63:                                               ; preds = %44
  %64 = sub nsw i32 %61, %58
  %65 = ashr i32 %64, %54
  %66 = trunc i32 %65 to i16
  %67 = sub i16 %60, %66
  br label %73

68:                                               ; preds = %44
  %69 = sub nsw i32 %58, %61
  %70 = ashr i32 %69, %54
  %71 = trunc i32 %70 to i16
  %72 = add i16 %60, %71
  br label %73

73:                                               ; preds = %68, %63
  %74 = phi i16 [ %72, %68 ], [ %67, %63 ]
  store i16 %74, i16* %59, align 2
  %75 = icmp eq i64 %56, 1
  %76 = select i1 %75, i32 0, i32 %58
  %77 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 3, i64 %45, i64 %46, i64 1
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = icmp ult i32 %76, %79
  br i1 %80, label %522, label %517

81:                                               ; preds = %20
  %82 = icmp eq i8 %5, 0
  br i1 %82, label %360, label %83

83:                                               ; preds = %81
  %84 = zext i8 %3 to i64
  %85 = zext i1 %41 to i64
  %86 = add i8 %22, -1
  %87 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 4, i64 %84, i64 %85, i64 6
  %88 = load i16, i16* %87, align 2
  %89 = icmp ugt i16 %88, 15
  %90 = select i1 %89, i32 4, i32 3
  %91 = icmp ugt i16 %88, 31
  %92 = select i1 %91, i32 3, i32 2
  %93 = add nuw nsw i32 %92, %90
  %94 = sext i8 %86 to i64
  %95 = and i64 %94, 4294967295
  %96 = icmp eq i64 %95, 0
  %97 = select i1 %96, i32 0, i32 32768
  %98 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 4, i64 %84, i64 %85, i64 0
  %99 = load i16, i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = icmp ult i32 %97, %100
  br i1 %101, label %102, label %107

102:                                              ; preds = %83
  %103 = sub nsw i32 %100, %97
  %104 = ashr i32 %103, %93
  %105 = trunc i32 %104 to i16
  %106 = sub i16 %99, %105
  br label %112

107:                                              ; preds = %83
  %108 = sub nsw i32 %97, %100
  %109 = ashr i32 %108, %93
  %110 = trunc i32 %109 to i16
  %111 = add i16 %99, %110
  br label %112

112:                                              ; preds = %107, %102
  %113 = phi i16 [ %111, %107 ], [ %106, %102 ]
  store i16 %113, i16* %98, align 2
  %114 = icmp eq i64 %95, 1
  %115 = select i1 %114, i32 0, i32 %97
  %116 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 4, i64 %84, i64 %85, i64 1
  %117 = load i16, i16* %116, align 2
  %118 = zext i16 %117 to i32
  %119 = icmp ult i32 %115, %118
  br i1 %119, label %570, label %565

120:                                              ; preds = %20
  %121 = icmp eq i8 %5, 0
  br i1 %121, label %360, label %122

122:                                              ; preds = %120
  %123 = zext i8 %3 to i64
  %124 = zext i1 %41 to i64
  %125 = add i8 %22, -1
  %126 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 5, i64 %123, i64 %124, i64 7
  %127 = load i16, i16* %126, align 2
  %128 = icmp ugt i16 %127, 15
  %129 = select i1 %128, i32 4, i32 3
  %130 = icmp ugt i16 %127, 31
  %131 = select i1 %130, i32 3, i32 2
  %132 = add nuw nsw i32 %131, %129
  %133 = sext i8 %125 to i64
  %134 = and i64 %133, 4294967295
  %135 = icmp eq i64 %134, 0
  %136 = select i1 %135, i32 0, i32 32768
  %137 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 5, i64 %123, i64 %124, i64 0
  %138 = load i16, i16* %137, align 2
  %139 = zext i16 %138 to i32
  %140 = icmp ult i32 %136, %139
  br i1 %140, label %141, label %146

141:                                              ; preds = %122
  %142 = sub nsw i32 %139, %136
  %143 = ashr i32 %142, %132
  %144 = trunc i32 %143 to i16
  %145 = sub i16 %138, %144
  br label %151

146:                                              ; preds = %122
  %147 = sub nsw i32 %136, %139
  %148 = ashr i32 %147, %132
  %149 = trunc i32 %148 to i16
  %150 = add i16 %138, %149
  br label %151

151:                                              ; preds = %146, %141
  %152 = phi i16 [ %150, %146 ], [ %145, %141 ]
  store i16 %152, i16* %137, align 2
  %153 = icmp eq i64 %134, 1
  %154 = select i1 %153, i32 0, i32 %136
  %155 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 5, i64 %123, i64 %124, i64 1
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = icmp ult i32 %154, %157
  br i1 %158, label %636, label %631

159:                                              ; preds = %20
  %160 = icmp eq i8 %5, 0
  br i1 %160, label %360, label %161

161:                                              ; preds = %159
  %162 = zext i8 %3 to i64
  %163 = zext i1 %41 to i64
  %164 = add i8 %22, -1
  %165 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 6, i64 %162, i64 %163, i64 8
  %166 = load i16, i16* %165, align 2
  %167 = icmp ugt i16 %166, 15
  %168 = select i1 %167, i32 4, i32 3
  %169 = icmp ugt i16 %166, 31
  %170 = select i1 %169, i32 3, i32 2
  %171 = add nuw nsw i32 %170, %168
  %172 = sext i8 %164 to i64
  %173 = and i64 %172, 4294967295
  %174 = icmp eq i64 %173, 0
  %175 = select i1 %174, i32 0, i32 32768
  %176 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 6, i64 %162, i64 %163, i64 0
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = icmp ult i32 %175, %178
  br i1 %179, label %180, label %185

180:                                              ; preds = %161
  %181 = sub nsw i32 %178, %175
  %182 = ashr i32 %181, %171
  %183 = trunc i32 %182 to i16
  %184 = sub i16 %177, %183
  br label %190

185:                                              ; preds = %161
  %186 = sub nsw i32 %175, %178
  %187 = ashr i32 %186, %171
  %188 = trunc i32 %187 to i16
  %189 = add i16 %177, %188
  br label %190

190:                                              ; preds = %185, %180
  %191 = phi i16 [ %189, %185 ], [ %184, %180 ]
  store i16 %191, i16* %176, align 2
  %192 = icmp eq i64 %173, 1
  %193 = select i1 %192, i32 0, i32 %175
  %194 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 6, i64 %162, i64 %163, i64 1
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = icmp ult i32 %193, %196
  br i1 %197, label %720, label %715

198:                                              ; preds = %20
  %199 = icmp eq i8 %5, 0
  br i1 %199, label %360, label %200

200:                                              ; preds = %198
  %201 = zext i8 %3 to i64
  %202 = zext i1 %41 to i64
  %203 = add i8 %22, -1
  %204 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 7, i64 %201, i64 %202, i64 9
  %205 = load i16, i16* %204, align 2
  %206 = icmp ugt i16 %205, 15
  %207 = select i1 %206, i32 4, i32 3
  %208 = icmp ugt i16 %205, 31
  %209 = select i1 %208, i32 3, i32 2
  %210 = add nuw nsw i32 %209, %207
  %211 = sext i8 %203 to i64
  %212 = and i64 %211, 4294967295
  %213 = icmp eq i64 %212, 0
  %214 = select i1 %213, i32 0, i32 32768
  %215 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 7, i64 %201, i64 %202, i64 0
  %216 = load i16, i16* %215, align 2
  %217 = zext i16 %216 to i32
  %218 = icmp ult i32 %214, %217
  br i1 %218, label %219, label %224

219:                                              ; preds = %200
  %220 = sub nsw i32 %217, %214
  %221 = ashr i32 %220, %210
  %222 = trunc i32 %221 to i16
  %223 = sub i16 %216, %222
  br label %229

224:                                              ; preds = %200
  %225 = sub nsw i32 %214, %217
  %226 = ashr i32 %225, %210
  %227 = trunc i32 %226 to i16
  %228 = add i16 %216, %227
  br label %229

229:                                              ; preds = %224, %219
  %230 = phi i16 [ %228, %224 ], [ %223, %219 ]
  store i16 %230, i16* %215, align 2
  %231 = icmp eq i64 %212, 1
  %232 = select i1 %231, i32 0, i32 %214
  %233 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 7, i64 %201, i64 %202, i64 1
  %234 = load i16, i16* %233, align 2
  %235 = zext i16 %234 to i32
  %236 = icmp ult i32 %232, %235
  br i1 %236, label %822, label %817

237:                                              ; preds = %20
  %238 = icmp eq i8 %5, 0
  br i1 %238, label %360, label %239

239:                                              ; preds = %237
  %240 = zext i8 %3 to i64
  %241 = zext i1 %41 to i64
  %242 = add i8 %22, -1
  %243 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 8, i64 %240, i64 %241, i64 10
  %244 = load i16, i16* %243, align 2
  %245 = icmp ugt i16 %244, 15
  %246 = select i1 %245, i32 4, i32 3
  %247 = icmp ugt i16 %244, 31
  %248 = select i1 %247, i32 3, i32 2
  %249 = add nuw nsw i32 %248, %246
  %250 = sext i8 %242 to i64
  %251 = and i64 %250, 4294967295
  %252 = icmp eq i64 %251, 0
  %253 = select i1 %252, i32 0, i32 32768
  %254 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 8, i64 %240, i64 %241, i64 0
  %255 = load i16, i16* %254, align 2
  %256 = zext i16 %255 to i32
  %257 = icmp ult i32 %253, %256
  br i1 %257, label %258, label %263

258:                                              ; preds = %239
  %259 = sub nsw i32 %256, %253
  %260 = ashr i32 %259, %249
  %261 = trunc i32 %260 to i16
  %262 = sub i16 %255, %261
  br label %268

263:                                              ; preds = %239
  %264 = sub nsw i32 %253, %256
  %265 = ashr i32 %264, %249
  %266 = trunc i32 %265 to i16
  %267 = add i16 %255, %266
  br label %268

268:                                              ; preds = %263, %258
  %269 = phi i16 [ %267, %263 ], [ %262, %258 ]
  store i16 %269, i16* %254, align 2
  %270 = icmp eq i64 %251, 1
  %271 = select i1 %270, i32 0, i32 %253
  %272 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 8, i64 %240, i64 %241, i64 1
  %273 = load i16, i16* %272, align 2
  %274 = zext i16 %273 to i32
  %275 = icmp ult i32 %271, %274
  br i1 %275, label %942, label %937

276:                                              ; preds = %20
  %277 = icmp eq i8 %5, 0
  br i1 %277, label %360, label %278

278:                                              ; preds = %276
  %279 = zext i8 %3 to i64
  %280 = zext i1 %41 to i64
  %281 = add i8 %22, -1
  %282 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 9, i64 %279, i64 %280, i64 11
  %283 = load i16, i16* %282, align 2
  %284 = icmp ugt i16 %283, 15
  %285 = select i1 %284, i32 4, i32 3
  %286 = icmp ugt i16 %283, 31
  %287 = select i1 %286, i32 3, i32 2
  %288 = add nuw nsw i32 %287, %285
  %289 = sext i8 %281 to i64
  %290 = and i64 %289, 4294967295
  %291 = icmp eq i64 %290, 0
  %292 = select i1 %291, i32 0, i32 32768
  %293 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 9, i64 %279, i64 %280, i64 0
  %294 = load i16, i16* %293, align 2
  %295 = zext i16 %294 to i32
  %296 = icmp ult i32 %292, %295
  br i1 %296, label %297, label %302

297:                                              ; preds = %278
  %298 = sub nsw i32 %295, %292
  %299 = ashr i32 %298, %288
  %300 = trunc i32 %299 to i16
  %301 = sub i16 %294, %300
  br label %307

302:                                              ; preds = %278
  %303 = sub nsw i32 %292, %295
  %304 = ashr i32 %303, %288
  %305 = trunc i32 %304 to i16
  %306 = add i16 %294, %305
  br label %307

307:                                              ; preds = %302, %297
  %308 = phi i16 [ %306, %302 ], [ %301, %297 ]
  store i16 %308, i16* %293, align 2
  %309 = icmp eq i64 %290, 1
  %310 = select i1 %309, i32 0, i32 %292
  %311 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 9, i64 %279, i64 %280, i64 1
  %312 = load i16, i16* %311, align 2
  %313 = zext i16 %312 to i32
  %314 = icmp ult i32 %310, %313
  br i1 %314, label %366, label %361

315:                                              ; preds = %515, %1073, %935, %815, %713, %629, %563
  %316 = phi i16 [ %283, %515 ], [ %244, %1073 ], [ %205, %935 ], [ %166, %815 ], [ %127, %713 ], [ %88, %629 ], [ %49, %563 ]
  %317 = phi i16* [ %282, %515 ], [ %243, %1073 ], [ %204, %935 ], [ %165, %815 ], [ %126, %713 ], [ %87, %629 ], [ %48, %563 ]
  %318 = icmp ult i16 %316, 32
  %319 = zext i1 %318 to i16
  %320 = add i16 %316, %319
  store i16 %320, i16* %317, align 2
  %321 = getelementptr inbounds [12 x i16], [12 x i16]* @av1_eob_offset_bits, i64 0, i64 %23
  %322 = load i16, i16* %321, align 2
  %323 = icmp slt i16 %322, 1
  br i1 %323, label %360, label %324

324:                                              ; preds = %315
  %325 = sext i16 %322 to i32
  %326 = add nsw i32 %325, -1
  %327 = shl i32 1, %326
  %328 = and i32 %327, %27
  %329 = icmp eq i32 %328, 0
  %330 = add nsw i64 %23, -3
  %331 = and i64 %37, 255
  %332 = zext i8 %3 to i64
  %333 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 1, i64 %331, i64 %332, i64 %330, i64 2
  %334 = load i16, i16* %333, align 2
  %335 = icmp ugt i16 %334, 15
  %336 = select i1 %335, i32 4, i32 3
  %337 = icmp ugt i16 %334, 31
  %338 = select i1 %337, i32 2, i32 1
  %339 = add nuw nsw i32 %338, %336
  %340 = select i1 %329, i32 0, i32 32768
  %341 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 1, i64 %331, i64 %332, i64 %330, i64 0
  %342 = load i16, i16* %341, align 2
  %343 = zext i16 %342 to i32
  %344 = icmp ult i32 %340, %343
  br i1 %344, label %345, label %350

345:                                              ; preds = %324
  %346 = sub nsw i32 %343, %340
  %347 = ashr i32 %346, %339
  %348 = trunc i32 %347 to i16
  %349 = sub i16 %342, %348
  br label %355

350:                                              ; preds = %324
  %351 = sub nsw i32 %340, %343
  %352 = ashr i32 %351, %339
  %353 = trunc i32 %352 to i16
  %354 = add i16 %342, %353
  br label %355

355:                                              ; preds = %350, %345
  %356 = phi i16 [ %354, %350 ], [ %349, %345 ]
  store i16 %356, i16* %341, align 2
  %357 = icmp ult i16 %334, 32
  %358 = zext i1 %357 to i16
  %359 = add i16 %334, %358
  store i16 %359, i16* %333, align 2
  br label %360

360:                                              ; preds = %237, %198, %159, %120, %81, %42, %276, %315, %355
  ret void

361:                                              ; preds = %307
  %362 = sub nsw i32 %310, %313
  %363 = ashr i32 %362, %288
  %364 = trunc i32 %363 to i16
  %365 = add i16 %312, %364
  br label %371

366:                                              ; preds = %307
  %367 = sub nsw i32 %313, %310
  %368 = ashr i32 %367, %288
  %369 = trunc i32 %368 to i16
  %370 = sub i16 %312, %369
  br label %371

371:                                              ; preds = %366, %361
  %372 = phi i16 [ %365, %361 ], [ %370, %366 ]
  store i16 %372, i16* %311, align 2
  %373 = icmp eq i64 %290, 2
  %374 = select i1 %373, i32 0, i32 %310
  %375 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 9, i64 %279, i64 %280, i64 2
  %376 = load i16, i16* %375, align 2
  %377 = zext i16 %376 to i32
  %378 = icmp ult i32 %374, %377
  br i1 %378, label %384, label %379

379:                                              ; preds = %371
  %380 = sub nsw i32 %374, %377
  %381 = ashr i32 %380, %288
  %382 = trunc i32 %381 to i16
  %383 = add i16 %376, %382
  br label %389

384:                                              ; preds = %371
  %385 = sub nsw i32 %377, %374
  %386 = ashr i32 %385, %288
  %387 = trunc i32 %386 to i16
  %388 = sub i16 %376, %387
  br label %389

389:                                              ; preds = %384, %379
  %390 = phi i16 [ %383, %379 ], [ %388, %384 ]
  store i16 %390, i16* %375, align 2
  %391 = icmp eq i64 %290, 3
  %392 = select i1 %391, i32 0, i32 %374
  %393 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 9, i64 %279, i64 %280, i64 3
  %394 = load i16, i16* %393, align 2
  %395 = zext i16 %394 to i32
  %396 = icmp ult i32 %392, %395
  br i1 %396, label %402, label %397

397:                                              ; preds = %389
  %398 = sub nsw i32 %392, %395
  %399 = ashr i32 %398, %288
  %400 = trunc i32 %399 to i16
  %401 = add i16 %394, %400
  br label %407

402:                                              ; preds = %389
  %403 = sub nsw i32 %395, %392
  %404 = ashr i32 %403, %288
  %405 = trunc i32 %404 to i16
  %406 = sub i16 %394, %405
  br label %407

407:                                              ; preds = %402, %397
  %408 = phi i16 [ %401, %397 ], [ %406, %402 ]
  store i16 %408, i16* %393, align 2
  %409 = icmp eq i64 %290, 4
  %410 = select i1 %409, i32 0, i32 %392
  %411 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 9, i64 %279, i64 %280, i64 4
  %412 = load i16, i16* %411, align 2
  %413 = zext i16 %412 to i32
  %414 = icmp ult i32 %410, %413
  br i1 %414, label %420, label %415

415:                                              ; preds = %407
  %416 = sub nsw i32 %410, %413
  %417 = ashr i32 %416, %288
  %418 = trunc i32 %417 to i16
  %419 = add i16 %412, %418
  br label %425

420:                                              ; preds = %407
  %421 = sub nsw i32 %413, %410
  %422 = ashr i32 %421, %288
  %423 = trunc i32 %422 to i16
  %424 = sub i16 %412, %423
  br label %425

425:                                              ; preds = %420, %415
  %426 = phi i16 [ %419, %415 ], [ %424, %420 ]
  store i16 %426, i16* %411, align 2
  %427 = icmp eq i64 %290, 5
  %428 = select i1 %427, i32 0, i32 %410
  %429 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 9, i64 %279, i64 %280, i64 5
  %430 = load i16, i16* %429, align 2
  %431 = zext i16 %430 to i32
  %432 = icmp ult i32 %428, %431
  br i1 %432, label %438, label %433

433:                                              ; preds = %425
  %434 = sub nsw i32 %428, %431
  %435 = ashr i32 %434, %288
  %436 = trunc i32 %435 to i16
  %437 = add i16 %430, %436
  br label %443

438:                                              ; preds = %425
  %439 = sub nsw i32 %431, %428
  %440 = ashr i32 %439, %288
  %441 = trunc i32 %440 to i16
  %442 = sub i16 %430, %441
  br label %443

443:                                              ; preds = %438, %433
  %444 = phi i16 [ %437, %433 ], [ %442, %438 ]
  store i16 %444, i16* %429, align 2
  %445 = icmp eq i64 %290, 6
  %446 = select i1 %445, i32 0, i32 %428
  %447 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 9, i64 %279, i64 %280, i64 6
  %448 = load i16, i16* %447, align 2
  %449 = zext i16 %448 to i32
  %450 = icmp slt i32 %446, %449
  br i1 %450, label %456, label %451

451:                                              ; preds = %443
  %452 = sub nsw i32 %446, %449
  %453 = ashr i32 %452, %288
  %454 = trunc i32 %453 to i16
  %455 = add i16 %448, %454
  br label %461

456:                                              ; preds = %443
  %457 = sub nsw i32 %449, %446
  %458 = ashr i32 %457, %288
  %459 = trunc i32 %458 to i16
  %460 = sub i16 %448, %459
  br label %461

461:                                              ; preds = %456, %451
  %462 = phi i16 [ %455, %451 ], [ %460, %456 ]
  store i16 %462, i16* %447, align 2
  %463 = icmp eq i64 %290, 7
  %464 = select i1 %463, i32 0, i32 %446
  %465 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 9, i64 %279, i64 %280, i64 7
  %466 = load i16, i16* %465, align 2
  %467 = zext i16 %466 to i32
  %468 = icmp slt i32 %464, %467
  br i1 %468, label %474, label %469

469:                                              ; preds = %461
  %470 = sub nsw i32 %464, %467
  %471 = ashr i32 %470, %288
  %472 = trunc i32 %471 to i16
  %473 = add i16 %466, %472
  br label %479

474:                                              ; preds = %461
  %475 = sub nsw i32 %467, %464
  %476 = ashr i32 %475, %288
  %477 = trunc i32 %476 to i16
  %478 = sub i16 %466, %477
  br label %479

479:                                              ; preds = %474, %469
  %480 = phi i16 [ %473, %469 ], [ %478, %474 ]
  store i16 %480, i16* %465, align 2
  %481 = icmp eq i64 %290, 8
  %482 = select i1 %481, i32 0, i32 %464
  %483 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 9, i64 %279, i64 %280, i64 8
  %484 = load i16, i16* %483, align 2
  %485 = zext i16 %484 to i32
  %486 = icmp slt i32 %482, %485
  br i1 %486, label %492, label %487

487:                                              ; preds = %479
  %488 = sub nsw i32 %482, %485
  %489 = ashr i32 %488, %288
  %490 = trunc i32 %489 to i16
  %491 = add i16 %484, %490
  br label %497

492:                                              ; preds = %479
  %493 = sub nsw i32 %485, %482
  %494 = ashr i32 %493, %288
  %495 = trunc i32 %494 to i16
  %496 = sub i16 %484, %495
  br label %497

497:                                              ; preds = %492, %487
  %498 = phi i16 [ %491, %487 ], [ %496, %492 ]
  store i16 %498, i16* %483, align 2
  %499 = icmp eq i64 %290, 9
  %500 = select i1 %499, i32 0, i32 %482
  %501 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 9, i64 %279, i64 %280, i64 9
  %502 = load i16, i16* %501, align 2
  %503 = zext i16 %502 to i32
  %504 = icmp slt i32 %500, %503
  br i1 %504, label %510, label %505

505:                                              ; preds = %497
  %506 = sub nsw i32 %500, %503
  %507 = ashr i32 %506, %288
  %508 = trunc i32 %507 to i16
  %509 = add i16 %502, %508
  br label %515

510:                                              ; preds = %497
  %511 = sub nsw i32 %503, %500
  %512 = ashr i32 %511, %288
  %513 = trunc i32 %512 to i16
  %514 = sub i16 %502, %513
  br label %515

515:                                              ; preds = %510, %505
  %516 = phi i16 [ %509, %505 ], [ %514, %510 ]
  store i16 %516, i16* %501, align 2
  br label %315

517:                                              ; preds = %73
  %518 = sub nsw i32 %76, %79
  %519 = ashr i32 %518, %54
  %520 = trunc i32 %519 to i16
  %521 = add i16 %78, %520
  br label %527

522:                                              ; preds = %73
  %523 = sub nsw i32 %79, %76
  %524 = ashr i32 %523, %54
  %525 = trunc i32 %524 to i16
  %526 = sub i16 %78, %525
  br label %527

527:                                              ; preds = %522, %517
  %528 = phi i16 [ %521, %517 ], [ %526, %522 ]
  store i16 %528, i16* %77, align 2
  %529 = icmp eq i64 %56, 2
  %530 = select i1 %529, i32 0, i32 %76
  %531 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 3, i64 %45, i64 %46, i64 2
  %532 = load i16, i16* %531, align 2
  %533 = zext i16 %532 to i32
  %534 = icmp ult i32 %530, %533
  br i1 %534, label %540, label %535

535:                                              ; preds = %527
  %536 = sub nsw i32 %530, %533
  %537 = ashr i32 %536, %54
  %538 = trunc i32 %537 to i16
  %539 = add i16 %532, %538
  br label %545

540:                                              ; preds = %527
  %541 = sub nsw i32 %533, %530
  %542 = ashr i32 %541, %54
  %543 = trunc i32 %542 to i16
  %544 = sub i16 %532, %543
  br label %545

545:                                              ; preds = %540, %535
  %546 = phi i16 [ %539, %535 ], [ %544, %540 ]
  store i16 %546, i16* %531, align 2
  %547 = icmp eq i64 %56, 3
  %548 = select i1 %547, i32 0, i32 %530
  %549 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 3, i64 %45, i64 %46, i64 3
  %550 = load i16, i16* %549, align 2
  %551 = zext i16 %550 to i32
  %552 = icmp ult i32 %548, %551
  br i1 %552, label %558, label %553

553:                                              ; preds = %545
  %554 = sub nsw i32 %548, %551
  %555 = ashr i32 %554, %54
  %556 = trunc i32 %555 to i16
  %557 = add i16 %550, %556
  br label %563

558:                                              ; preds = %545
  %559 = sub nsw i32 %551, %548
  %560 = ashr i32 %559, %54
  %561 = trunc i32 %560 to i16
  %562 = sub i16 %550, %561
  br label %563

563:                                              ; preds = %558, %553
  %564 = phi i16 [ %557, %553 ], [ %562, %558 ]
  store i16 %564, i16* %549, align 2
  br label %315

565:                                              ; preds = %112
  %566 = sub nsw i32 %115, %118
  %567 = ashr i32 %566, %93
  %568 = trunc i32 %567 to i16
  %569 = add i16 %117, %568
  br label %575

570:                                              ; preds = %112
  %571 = sub nsw i32 %118, %115
  %572 = ashr i32 %571, %93
  %573 = trunc i32 %572 to i16
  %574 = sub i16 %117, %573
  br label %575

575:                                              ; preds = %570, %565
  %576 = phi i16 [ %569, %565 ], [ %574, %570 ]
  store i16 %576, i16* %116, align 2
  %577 = icmp eq i64 %95, 2
  %578 = select i1 %577, i32 0, i32 %115
  %579 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 4, i64 %84, i64 %85, i64 2
  %580 = load i16, i16* %579, align 2
  %581 = zext i16 %580 to i32
  %582 = icmp ult i32 %578, %581
  br i1 %582, label %588, label %583

583:                                              ; preds = %575
  %584 = sub nsw i32 %578, %581
  %585 = ashr i32 %584, %93
  %586 = trunc i32 %585 to i16
  %587 = add i16 %580, %586
  br label %593

588:                                              ; preds = %575
  %589 = sub nsw i32 %581, %578
  %590 = ashr i32 %589, %93
  %591 = trunc i32 %590 to i16
  %592 = sub i16 %580, %591
  br label %593

593:                                              ; preds = %588, %583
  %594 = phi i16 [ %587, %583 ], [ %592, %588 ]
  store i16 %594, i16* %579, align 2
  %595 = icmp eq i64 %95, 3
  %596 = select i1 %595, i32 0, i32 %578
  %597 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 4, i64 %84, i64 %85, i64 3
  %598 = load i16, i16* %597, align 2
  %599 = zext i16 %598 to i32
  %600 = icmp ult i32 %596, %599
  br i1 %600, label %606, label %601

601:                                              ; preds = %593
  %602 = sub nsw i32 %596, %599
  %603 = ashr i32 %602, %93
  %604 = trunc i32 %603 to i16
  %605 = add i16 %598, %604
  br label %611

606:                                              ; preds = %593
  %607 = sub nsw i32 %599, %596
  %608 = ashr i32 %607, %93
  %609 = trunc i32 %608 to i16
  %610 = sub i16 %598, %609
  br label %611

611:                                              ; preds = %606, %601
  %612 = phi i16 [ %605, %601 ], [ %610, %606 ]
  store i16 %612, i16* %597, align 2
  %613 = icmp eq i64 %95, 4
  %614 = select i1 %613, i32 0, i32 %596
  %615 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 4, i64 %84, i64 %85, i64 4
  %616 = load i16, i16* %615, align 2
  %617 = zext i16 %616 to i32
  %618 = icmp ult i32 %614, %617
  br i1 %618, label %624, label %619

619:                                              ; preds = %611
  %620 = sub nsw i32 %614, %617
  %621 = ashr i32 %620, %93
  %622 = trunc i32 %621 to i16
  %623 = add i16 %616, %622
  br label %629

624:                                              ; preds = %611
  %625 = sub nsw i32 %617, %614
  %626 = ashr i32 %625, %93
  %627 = trunc i32 %626 to i16
  %628 = sub i16 %616, %627
  br label %629

629:                                              ; preds = %624, %619
  %630 = phi i16 [ %623, %619 ], [ %628, %624 ]
  store i16 %630, i16* %615, align 2
  br label %315

631:                                              ; preds = %151
  %632 = sub nsw i32 %154, %157
  %633 = ashr i32 %632, %132
  %634 = trunc i32 %633 to i16
  %635 = add i16 %156, %634
  br label %641

636:                                              ; preds = %151
  %637 = sub nsw i32 %157, %154
  %638 = ashr i32 %637, %132
  %639 = trunc i32 %638 to i16
  %640 = sub i16 %156, %639
  br label %641

641:                                              ; preds = %636, %631
  %642 = phi i16 [ %635, %631 ], [ %640, %636 ]
  store i16 %642, i16* %155, align 2
  %643 = icmp eq i64 %134, 2
  %644 = select i1 %643, i32 0, i32 %154
  %645 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 5, i64 %123, i64 %124, i64 2
  %646 = load i16, i16* %645, align 2
  %647 = zext i16 %646 to i32
  %648 = icmp ult i32 %644, %647
  br i1 %648, label %654, label %649

649:                                              ; preds = %641
  %650 = sub nsw i32 %644, %647
  %651 = ashr i32 %650, %132
  %652 = trunc i32 %651 to i16
  %653 = add i16 %646, %652
  br label %659

654:                                              ; preds = %641
  %655 = sub nsw i32 %647, %644
  %656 = ashr i32 %655, %132
  %657 = trunc i32 %656 to i16
  %658 = sub i16 %646, %657
  br label %659

659:                                              ; preds = %654, %649
  %660 = phi i16 [ %653, %649 ], [ %658, %654 ]
  store i16 %660, i16* %645, align 2
  %661 = icmp eq i64 %134, 3
  %662 = select i1 %661, i32 0, i32 %644
  %663 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 5, i64 %123, i64 %124, i64 3
  %664 = load i16, i16* %663, align 2
  %665 = zext i16 %664 to i32
  %666 = icmp ult i32 %662, %665
  br i1 %666, label %672, label %667

667:                                              ; preds = %659
  %668 = sub nsw i32 %662, %665
  %669 = ashr i32 %668, %132
  %670 = trunc i32 %669 to i16
  %671 = add i16 %664, %670
  br label %677

672:                                              ; preds = %659
  %673 = sub nsw i32 %665, %662
  %674 = ashr i32 %673, %132
  %675 = trunc i32 %674 to i16
  %676 = sub i16 %664, %675
  br label %677

677:                                              ; preds = %672, %667
  %678 = phi i16 [ %671, %667 ], [ %676, %672 ]
  store i16 %678, i16* %663, align 2
  %679 = icmp eq i64 %134, 4
  %680 = select i1 %679, i32 0, i32 %662
  %681 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 5, i64 %123, i64 %124, i64 4
  %682 = load i16, i16* %681, align 2
  %683 = zext i16 %682 to i32
  %684 = icmp ult i32 %680, %683
  br i1 %684, label %690, label %685

685:                                              ; preds = %677
  %686 = sub nsw i32 %680, %683
  %687 = ashr i32 %686, %132
  %688 = trunc i32 %687 to i16
  %689 = add i16 %682, %688
  br label %695

690:                                              ; preds = %677
  %691 = sub nsw i32 %683, %680
  %692 = ashr i32 %691, %132
  %693 = trunc i32 %692 to i16
  %694 = sub i16 %682, %693
  br label %695

695:                                              ; preds = %690, %685
  %696 = phi i16 [ %689, %685 ], [ %694, %690 ]
  store i16 %696, i16* %681, align 2
  %697 = icmp eq i64 %134, 5
  %698 = select i1 %697, i32 0, i32 %680
  %699 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 5, i64 %123, i64 %124, i64 5
  %700 = load i16, i16* %699, align 2
  %701 = zext i16 %700 to i32
  %702 = icmp ult i32 %698, %701
  br i1 %702, label %708, label %703

703:                                              ; preds = %695
  %704 = sub nsw i32 %698, %701
  %705 = ashr i32 %704, %132
  %706 = trunc i32 %705 to i16
  %707 = add i16 %700, %706
  br label %713

708:                                              ; preds = %695
  %709 = sub nsw i32 %701, %698
  %710 = ashr i32 %709, %132
  %711 = trunc i32 %710 to i16
  %712 = sub i16 %700, %711
  br label %713

713:                                              ; preds = %708, %703
  %714 = phi i16 [ %707, %703 ], [ %712, %708 ]
  store i16 %714, i16* %699, align 2
  br label %315

715:                                              ; preds = %190
  %716 = sub nsw i32 %193, %196
  %717 = ashr i32 %716, %171
  %718 = trunc i32 %717 to i16
  %719 = add i16 %195, %718
  br label %725

720:                                              ; preds = %190
  %721 = sub nsw i32 %196, %193
  %722 = ashr i32 %721, %171
  %723 = trunc i32 %722 to i16
  %724 = sub i16 %195, %723
  br label %725

725:                                              ; preds = %720, %715
  %726 = phi i16 [ %719, %715 ], [ %724, %720 ]
  store i16 %726, i16* %194, align 2
  %727 = icmp eq i64 %173, 2
  %728 = select i1 %727, i32 0, i32 %193
  %729 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 6, i64 %162, i64 %163, i64 2
  %730 = load i16, i16* %729, align 2
  %731 = zext i16 %730 to i32
  %732 = icmp ult i32 %728, %731
  br i1 %732, label %738, label %733

733:                                              ; preds = %725
  %734 = sub nsw i32 %728, %731
  %735 = ashr i32 %734, %171
  %736 = trunc i32 %735 to i16
  %737 = add i16 %730, %736
  br label %743

738:                                              ; preds = %725
  %739 = sub nsw i32 %731, %728
  %740 = ashr i32 %739, %171
  %741 = trunc i32 %740 to i16
  %742 = sub i16 %730, %741
  br label %743

743:                                              ; preds = %738, %733
  %744 = phi i16 [ %737, %733 ], [ %742, %738 ]
  store i16 %744, i16* %729, align 2
  %745 = icmp eq i64 %173, 3
  %746 = select i1 %745, i32 0, i32 %728
  %747 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 6, i64 %162, i64 %163, i64 3
  %748 = load i16, i16* %747, align 2
  %749 = zext i16 %748 to i32
  %750 = icmp ult i32 %746, %749
  br i1 %750, label %756, label %751

751:                                              ; preds = %743
  %752 = sub nsw i32 %746, %749
  %753 = ashr i32 %752, %171
  %754 = trunc i32 %753 to i16
  %755 = add i16 %748, %754
  br label %761

756:                                              ; preds = %743
  %757 = sub nsw i32 %749, %746
  %758 = ashr i32 %757, %171
  %759 = trunc i32 %758 to i16
  %760 = sub i16 %748, %759
  br label %761

761:                                              ; preds = %756, %751
  %762 = phi i16 [ %755, %751 ], [ %760, %756 ]
  store i16 %762, i16* %747, align 2
  %763 = icmp eq i64 %173, 4
  %764 = select i1 %763, i32 0, i32 %746
  %765 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 6, i64 %162, i64 %163, i64 4
  %766 = load i16, i16* %765, align 2
  %767 = zext i16 %766 to i32
  %768 = icmp ult i32 %764, %767
  br i1 %768, label %774, label %769

769:                                              ; preds = %761
  %770 = sub nsw i32 %764, %767
  %771 = ashr i32 %770, %171
  %772 = trunc i32 %771 to i16
  %773 = add i16 %766, %772
  br label %779

774:                                              ; preds = %761
  %775 = sub nsw i32 %767, %764
  %776 = ashr i32 %775, %171
  %777 = trunc i32 %776 to i16
  %778 = sub i16 %766, %777
  br label %779

779:                                              ; preds = %774, %769
  %780 = phi i16 [ %773, %769 ], [ %778, %774 ]
  store i16 %780, i16* %765, align 2
  %781 = icmp eq i64 %173, 5
  %782 = select i1 %781, i32 0, i32 %764
  %783 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 6, i64 %162, i64 %163, i64 5
  %784 = load i16, i16* %783, align 2
  %785 = zext i16 %784 to i32
  %786 = icmp ult i32 %782, %785
  br i1 %786, label %792, label %787

787:                                              ; preds = %779
  %788 = sub nsw i32 %782, %785
  %789 = ashr i32 %788, %171
  %790 = trunc i32 %789 to i16
  %791 = add i16 %784, %790
  br label %797

792:                                              ; preds = %779
  %793 = sub nsw i32 %785, %782
  %794 = ashr i32 %793, %171
  %795 = trunc i32 %794 to i16
  %796 = sub i16 %784, %795
  br label %797

797:                                              ; preds = %792, %787
  %798 = phi i16 [ %791, %787 ], [ %796, %792 ]
  store i16 %798, i16* %783, align 2
  %799 = icmp eq i64 %173, 6
  %800 = select i1 %799, i32 0, i32 %782
  %801 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 6, i64 %162, i64 %163, i64 6
  %802 = load i16, i16* %801, align 2
  %803 = zext i16 %802 to i32
  %804 = icmp slt i32 %800, %803
  br i1 %804, label %810, label %805

805:                                              ; preds = %797
  %806 = sub nsw i32 %800, %803
  %807 = ashr i32 %806, %171
  %808 = trunc i32 %807 to i16
  %809 = add i16 %802, %808
  br label %815

810:                                              ; preds = %797
  %811 = sub nsw i32 %803, %800
  %812 = ashr i32 %811, %171
  %813 = trunc i32 %812 to i16
  %814 = sub i16 %802, %813
  br label %815

815:                                              ; preds = %810, %805
  %816 = phi i16 [ %809, %805 ], [ %814, %810 ]
  store i16 %816, i16* %801, align 2
  br label %315

817:                                              ; preds = %229
  %818 = sub nsw i32 %232, %235
  %819 = ashr i32 %818, %210
  %820 = trunc i32 %819 to i16
  %821 = add i16 %234, %820
  br label %827

822:                                              ; preds = %229
  %823 = sub nsw i32 %235, %232
  %824 = ashr i32 %823, %210
  %825 = trunc i32 %824 to i16
  %826 = sub i16 %234, %825
  br label %827

827:                                              ; preds = %822, %817
  %828 = phi i16 [ %821, %817 ], [ %826, %822 ]
  store i16 %828, i16* %233, align 2
  %829 = icmp eq i64 %212, 2
  %830 = select i1 %829, i32 0, i32 %232
  %831 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 7, i64 %201, i64 %202, i64 2
  %832 = load i16, i16* %831, align 2
  %833 = zext i16 %832 to i32
  %834 = icmp ult i32 %830, %833
  br i1 %834, label %840, label %835

835:                                              ; preds = %827
  %836 = sub nsw i32 %830, %833
  %837 = ashr i32 %836, %210
  %838 = trunc i32 %837 to i16
  %839 = add i16 %832, %838
  br label %845

840:                                              ; preds = %827
  %841 = sub nsw i32 %833, %830
  %842 = ashr i32 %841, %210
  %843 = trunc i32 %842 to i16
  %844 = sub i16 %832, %843
  br label %845

845:                                              ; preds = %840, %835
  %846 = phi i16 [ %839, %835 ], [ %844, %840 ]
  store i16 %846, i16* %831, align 2
  %847 = icmp eq i64 %212, 3
  %848 = select i1 %847, i32 0, i32 %830
  %849 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 7, i64 %201, i64 %202, i64 3
  %850 = load i16, i16* %849, align 2
  %851 = zext i16 %850 to i32
  %852 = icmp ult i32 %848, %851
  br i1 %852, label %858, label %853

853:                                              ; preds = %845
  %854 = sub nsw i32 %848, %851
  %855 = ashr i32 %854, %210
  %856 = trunc i32 %855 to i16
  %857 = add i16 %850, %856
  br label %863

858:                                              ; preds = %845
  %859 = sub nsw i32 %851, %848
  %860 = ashr i32 %859, %210
  %861 = trunc i32 %860 to i16
  %862 = sub i16 %850, %861
  br label %863

863:                                              ; preds = %858, %853
  %864 = phi i16 [ %857, %853 ], [ %862, %858 ]
  store i16 %864, i16* %849, align 2
  %865 = icmp eq i64 %212, 4
  %866 = select i1 %865, i32 0, i32 %848
  %867 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 7, i64 %201, i64 %202, i64 4
  %868 = load i16, i16* %867, align 2
  %869 = zext i16 %868 to i32
  %870 = icmp ult i32 %866, %869
  br i1 %870, label %876, label %871

871:                                              ; preds = %863
  %872 = sub nsw i32 %866, %869
  %873 = ashr i32 %872, %210
  %874 = trunc i32 %873 to i16
  %875 = add i16 %868, %874
  br label %881

876:                                              ; preds = %863
  %877 = sub nsw i32 %869, %866
  %878 = ashr i32 %877, %210
  %879 = trunc i32 %878 to i16
  %880 = sub i16 %868, %879
  br label %881

881:                                              ; preds = %876, %871
  %882 = phi i16 [ %875, %871 ], [ %880, %876 ]
  store i16 %882, i16* %867, align 2
  %883 = icmp eq i64 %212, 5
  %884 = select i1 %883, i32 0, i32 %866
  %885 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 7, i64 %201, i64 %202, i64 5
  %886 = load i16, i16* %885, align 2
  %887 = zext i16 %886 to i32
  %888 = icmp ult i32 %884, %887
  br i1 %888, label %894, label %889

889:                                              ; preds = %881
  %890 = sub nsw i32 %884, %887
  %891 = ashr i32 %890, %210
  %892 = trunc i32 %891 to i16
  %893 = add i16 %886, %892
  br label %899

894:                                              ; preds = %881
  %895 = sub nsw i32 %887, %884
  %896 = ashr i32 %895, %210
  %897 = trunc i32 %896 to i16
  %898 = sub i16 %886, %897
  br label %899

899:                                              ; preds = %894, %889
  %900 = phi i16 [ %893, %889 ], [ %898, %894 ]
  store i16 %900, i16* %885, align 2
  %901 = icmp eq i64 %212, 6
  %902 = select i1 %901, i32 0, i32 %884
  %903 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 7, i64 %201, i64 %202, i64 6
  %904 = load i16, i16* %903, align 2
  %905 = zext i16 %904 to i32
  %906 = icmp slt i32 %902, %905
  br i1 %906, label %912, label %907

907:                                              ; preds = %899
  %908 = sub nsw i32 %902, %905
  %909 = ashr i32 %908, %210
  %910 = trunc i32 %909 to i16
  %911 = add i16 %904, %910
  br label %917

912:                                              ; preds = %899
  %913 = sub nsw i32 %905, %902
  %914 = ashr i32 %913, %210
  %915 = trunc i32 %914 to i16
  %916 = sub i16 %904, %915
  br label %917

917:                                              ; preds = %912, %907
  %918 = phi i16 [ %911, %907 ], [ %916, %912 ]
  store i16 %918, i16* %903, align 2
  %919 = icmp eq i64 %212, 7
  %920 = select i1 %919, i32 0, i32 %902
  %921 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 7, i64 %201, i64 %202, i64 7
  %922 = load i16, i16* %921, align 2
  %923 = zext i16 %922 to i32
  %924 = icmp slt i32 %920, %923
  br i1 %924, label %930, label %925

925:                                              ; preds = %917
  %926 = sub nsw i32 %920, %923
  %927 = ashr i32 %926, %210
  %928 = trunc i32 %927 to i16
  %929 = add i16 %922, %928
  br label %935

930:                                              ; preds = %917
  %931 = sub nsw i32 %923, %920
  %932 = ashr i32 %931, %210
  %933 = trunc i32 %932 to i16
  %934 = sub i16 %922, %933
  br label %935

935:                                              ; preds = %930, %925
  %936 = phi i16 [ %929, %925 ], [ %934, %930 ]
  store i16 %936, i16* %921, align 2
  br label %315

937:                                              ; preds = %268
  %938 = sub nsw i32 %271, %274
  %939 = ashr i32 %938, %249
  %940 = trunc i32 %939 to i16
  %941 = add i16 %273, %940
  br label %947

942:                                              ; preds = %268
  %943 = sub nsw i32 %274, %271
  %944 = ashr i32 %943, %249
  %945 = trunc i32 %944 to i16
  %946 = sub i16 %273, %945
  br label %947

947:                                              ; preds = %942, %937
  %948 = phi i16 [ %941, %937 ], [ %946, %942 ]
  store i16 %948, i16* %272, align 2
  %949 = icmp eq i64 %251, 2
  %950 = select i1 %949, i32 0, i32 %271
  %951 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 8, i64 %240, i64 %241, i64 2
  %952 = load i16, i16* %951, align 2
  %953 = zext i16 %952 to i32
  %954 = icmp ult i32 %950, %953
  br i1 %954, label %960, label %955

955:                                              ; preds = %947
  %956 = sub nsw i32 %950, %953
  %957 = ashr i32 %956, %249
  %958 = trunc i32 %957 to i16
  %959 = add i16 %952, %958
  br label %965

960:                                              ; preds = %947
  %961 = sub nsw i32 %953, %950
  %962 = ashr i32 %961, %249
  %963 = trunc i32 %962 to i16
  %964 = sub i16 %952, %963
  br label %965

965:                                              ; preds = %960, %955
  %966 = phi i16 [ %959, %955 ], [ %964, %960 ]
  store i16 %966, i16* %951, align 2
  %967 = icmp eq i64 %251, 3
  %968 = select i1 %967, i32 0, i32 %950
  %969 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 8, i64 %240, i64 %241, i64 3
  %970 = load i16, i16* %969, align 2
  %971 = zext i16 %970 to i32
  %972 = icmp ult i32 %968, %971
  br i1 %972, label %978, label %973

973:                                              ; preds = %965
  %974 = sub nsw i32 %968, %971
  %975 = ashr i32 %974, %249
  %976 = trunc i32 %975 to i16
  %977 = add i16 %970, %976
  br label %983

978:                                              ; preds = %965
  %979 = sub nsw i32 %971, %968
  %980 = ashr i32 %979, %249
  %981 = trunc i32 %980 to i16
  %982 = sub i16 %970, %981
  br label %983

983:                                              ; preds = %978, %973
  %984 = phi i16 [ %977, %973 ], [ %982, %978 ]
  store i16 %984, i16* %969, align 2
  %985 = icmp eq i64 %251, 4
  %986 = select i1 %985, i32 0, i32 %968
  %987 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 8, i64 %240, i64 %241, i64 4
  %988 = load i16, i16* %987, align 2
  %989 = zext i16 %988 to i32
  %990 = icmp ult i32 %986, %989
  br i1 %990, label %996, label %991

991:                                              ; preds = %983
  %992 = sub nsw i32 %986, %989
  %993 = ashr i32 %992, %249
  %994 = trunc i32 %993 to i16
  %995 = add i16 %988, %994
  br label %1001

996:                                              ; preds = %983
  %997 = sub nsw i32 %989, %986
  %998 = ashr i32 %997, %249
  %999 = trunc i32 %998 to i16
  %1000 = sub i16 %988, %999
  br label %1001

1001:                                             ; preds = %996, %991
  %1002 = phi i16 [ %995, %991 ], [ %1000, %996 ]
  store i16 %1002, i16* %987, align 2
  %1003 = icmp eq i64 %251, 5
  %1004 = select i1 %1003, i32 0, i32 %986
  %1005 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 8, i64 %240, i64 %241, i64 5
  %1006 = load i16, i16* %1005, align 2
  %1007 = zext i16 %1006 to i32
  %1008 = icmp ult i32 %1004, %1007
  br i1 %1008, label %1014, label %1009

1009:                                             ; preds = %1001
  %1010 = sub nsw i32 %1004, %1007
  %1011 = ashr i32 %1010, %249
  %1012 = trunc i32 %1011 to i16
  %1013 = add i16 %1006, %1012
  br label %1019

1014:                                             ; preds = %1001
  %1015 = sub nsw i32 %1007, %1004
  %1016 = ashr i32 %1015, %249
  %1017 = trunc i32 %1016 to i16
  %1018 = sub i16 %1006, %1017
  br label %1019

1019:                                             ; preds = %1014, %1009
  %1020 = phi i16 [ %1013, %1009 ], [ %1018, %1014 ]
  store i16 %1020, i16* %1005, align 2
  %1021 = icmp eq i64 %251, 6
  %1022 = select i1 %1021, i32 0, i32 %1004
  %1023 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 8, i64 %240, i64 %241, i64 6
  %1024 = load i16, i16* %1023, align 2
  %1025 = zext i16 %1024 to i32
  %1026 = icmp slt i32 %1022, %1025
  br i1 %1026, label %1032, label %1027

1027:                                             ; preds = %1019
  %1028 = sub nsw i32 %1022, %1025
  %1029 = ashr i32 %1028, %249
  %1030 = trunc i32 %1029 to i16
  %1031 = add i16 %1024, %1030
  br label %1037

1032:                                             ; preds = %1019
  %1033 = sub nsw i32 %1025, %1022
  %1034 = ashr i32 %1033, %249
  %1035 = trunc i32 %1034 to i16
  %1036 = sub i16 %1024, %1035
  br label %1037

1037:                                             ; preds = %1032, %1027
  %1038 = phi i16 [ %1031, %1027 ], [ %1036, %1032 ]
  store i16 %1038, i16* %1023, align 2
  %1039 = icmp eq i64 %251, 7
  %1040 = select i1 %1039, i32 0, i32 %1022
  %1041 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 8, i64 %240, i64 %241, i64 7
  %1042 = load i16, i16* %1041, align 2
  %1043 = zext i16 %1042 to i32
  %1044 = icmp slt i32 %1040, %1043
  br i1 %1044, label %1050, label %1045

1045:                                             ; preds = %1037
  %1046 = sub nsw i32 %1040, %1043
  %1047 = ashr i32 %1046, %249
  %1048 = trunc i32 %1047 to i16
  %1049 = add i16 %1042, %1048
  br label %1055

1050:                                             ; preds = %1037
  %1051 = sub nsw i32 %1043, %1040
  %1052 = ashr i32 %1051, %249
  %1053 = trunc i32 %1052 to i16
  %1054 = sub i16 %1042, %1053
  br label %1055

1055:                                             ; preds = %1050, %1045
  %1056 = phi i16 [ %1049, %1045 ], [ %1054, %1050 ]
  store i16 %1056, i16* %1041, align 2
  %1057 = icmp eq i64 %251, 8
  %1058 = select i1 %1057, i32 0, i32 %1040
  %1059 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 8, i64 %240, i64 %241, i64 8
  %1060 = load i16, i16* %1059, align 2
  %1061 = zext i16 %1060 to i32
  %1062 = icmp slt i32 %1058, %1061
  br i1 %1062, label %1068, label %1063

1063:                                             ; preds = %1055
  %1064 = sub nsw i32 %1058, %1061
  %1065 = ashr i32 %1064, %249
  %1066 = trunc i32 %1065 to i16
  %1067 = add i16 %1060, %1066
  br label %1073

1068:                                             ; preds = %1055
  %1069 = sub nsw i32 %1061, %1058
  %1070 = ashr i32 %1069, %249
  %1071 = trunc i32 %1070 to i16
  %1072 = sub i16 %1060, %1071
  br label %1073

1073:                                             ; preds = %1068, %1063
  %1074 = phi i16 [ %1067, %1063 ], [ %1072, %1068 ]
  store i16 %1074, i16* %1059, align 2
  br label %315
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_txb_init_levels_c(i32* nocapture readonly, i32, i32, i8* nocapture) local_unnamed_addr #0 {
  %5 = add nsw i32 %1, 4
  %6 = mul nsw i32 %5, %2
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds i8, i8* %3, i64 %7
  %9 = shl i32 %5, 2
  %10 = add nsw i32 %9, 16
  %11 = sext i32 %10 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 0, i64 %11, i1 false)
  %12 = icmp sgt i32 %2, 0
  br i1 %12, label %13, label %126

13:                                               ; preds = %4
  %14 = icmp sgt i32 %1, 0
  %15 = sext i32 %1 to i64
  %16 = zext i32 %2 to i64
  %17 = zext i32 %1 to i64
  %18 = and i64 %17, 4294967292
  %19 = add nsw i64 %18, -4
  %20 = lshr exact i64 %19, 2
  %21 = add nuw nsw i64 %20, 1
  %22 = icmp ult i32 %1, 4
  %23 = and i64 %17, 4294967292
  %24 = and i64 %21, 1
  %25 = icmp eq i64 %19, 0
  %26 = sub nuw nsw i64 %21, %24
  %27 = icmp eq i64 %24, 0
  %28 = icmp eq i64 %23, %17
  %29 = and i64 %17, 1
  %30 = icmp eq i64 %29, 0
  %31 = sub nsw i64 0, %17
  br label %32

32:                                               ; preds = %127, %13
  %33 = phi i64 [ 0, %13 ], [ %131, %127 ]
  %34 = phi i8* [ %3, %13 ], [ %130, %127 ]
  %35 = mul i64 %33, %15
  %36 = getelementptr i32, i32* %0, i64 %35
  %37 = bitcast i32* %36 to i8*
  %38 = add i64 %35, %17
  %39 = getelementptr i32, i32* %0, i64 %38
  %40 = bitcast i32* %39 to i8*
  br i1 %14, label %41, label %127

41:                                               ; preds = %32
  %42 = mul nsw i64 %33, %15
  br i1 %22, label %43, label %66

43:                                               ; preds = %125, %66, %41
  %44 = phi i64 [ 0, %66 ], [ 0, %41 ], [ %23, %125 ]
  %45 = phi i8* [ %34, %66 ], [ %34, %41 ], [ %72, %125 ]
  %46 = xor i64 %44, -1
  br i1 %30, label %61, label %47

47:                                               ; preds = %43
  %48 = add nsw i64 %44, %42
  %49 = getelementptr inbounds i32, i32* %0, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = icmp slt i32 %50, 0
  %52 = sub nsw i32 0, %50
  %53 = select i1 %51, i32 %52, i32 %50
  %54 = icmp slt i32 %53, 127
  %55 = select i1 %54, i32 %53, i32 127
  %56 = icmp sgt i32 %55, 0
  %57 = select i1 %56, i32 %55, i32 0
  %58 = trunc i32 %57 to i8
  %59 = getelementptr inbounds i8, i8* %45, i64 1
  store i8 %58, i8* %45, align 1
  %60 = or i64 %44, 1
  br label %61

61:                                               ; preds = %47, %43
  %62 = phi i8* [ %59, %47 ], [ undef, %43 ]
  %63 = phi i64 [ %60, %47 ], [ %44, %43 ]
  %64 = phi i8* [ %59, %47 ], [ %45, %43 ]
  %65 = icmp eq i64 %46, %31
  br i1 %65, label %127, label %133

66:                                               ; preds = %41
  %67 = getelementptr i8, i8* %34, i64 %17
  %68 = icmp ult i8* %34, %40
  %69 = icmp ugt i8* %67, %37
  %70 = and i1 %68, %69
  br i1 %70, label %43, label %71

71:                                               ; preds = %66
  %72 = getelementptr i8, i8* %34, i64 %23
  br i1 %25, label %108, label %73

73:                                               ; preds = %71, %73
  %74 = phi i64 [ %105, %73 ], [ 0, %71 ]
  %75 = phi i64 [ %106, %73 ], [ %26, %71 ]
  %76 = getelementptr i8, i8* %34, i64 %74
  %77 = add nsw i64 %74, %42
  %78 = getelementptr inbounds i32, i32* %0, i64 %77
  %79 = bitcast i32* %78 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 4, !alias.scope !2
  %81 = icmp slt <4 x i32> %80, zeroinitializer
  %82 = sub nsw <4 x i32> zeroinitializer, %80
  %83 = select <4 x i1> %81, <4 x i32> %82, <4 x i32> %80
  %84 = icmp slt <4 x i32> %83, <i32 127, i32 127, i32 127, i32 127>
  %85 = select <4 x i1> %84, <4 x i32> %83, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %86 = icmp sgt <4 x i32> %85, zeroinitializer
  %87 = select <4 x i1> %86, <4 x i32> %85, <4 x i32> zeroinitializer
  %88 = trunc <4 x i32> %87 to <4 x i8>
  %89 = bitcast i8* %76 to <4 x i8>*
  store <4 x i8> %88, <4 x i8>* %89, align 1, !alias.scope !5, !noalias !2
  %90 = or i64 %74, 4
  %91 = getelementptr i8, i8* %34, i64 %90
  %92 = add nsw i64 %90, %42
  %93 = getelementptr inbounds i32, i32* %0, i64 %92
  %94 = bitcast i32* %93 to <4 x i32>*
  %95 = load <4 x i32>, <4 x i32>* %94, align 4, !alias.scope !2
  %96 = icmp slt <4 x i32> %95, zeroinitializer
  %97 = sub nsw <4 x i32> zeroinitializer, %95
  %98 = select <4 x i1> %96, <4 x i32> %97, <4 x i32> %95
  %99 = icmp slt <4 x i32> %98, <i32 127, i32 127, i32 127, i32 127>
  %100 = select <4 x i1> %99, <4 x i32> %98, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %101 = icmp sgt <4 x i32> %100, zeroinitializer
  %102 = select <4 x i1> %101, <4 x i32> %100, <4 x i32> zeroinitializer
  %103 = trunc <4 x i32> %102 to <4 x i8>
  %104 = bitcast i8* %91 to <4 x i8>*
  store <4 x i8> %103, <4 x i8>* %104, align 1, !alias.scope !5, !noalias !2
  %105 = add i64 %74, 8
  %106 = add i64 %75, -2
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %73, !llvm.loop !7

108:                                              ; preds = %73, %71
  %109 = phi i64 [ 0, %71 ], [ %105, %73 ]
  br i1 %27, label %125, label %110

110:                                              ; preds = %108
  %111 = getelementptr i8, i8* %34, i64 %109
  %112 = add nsw i64 %109, %42
  %113 = getelementptr inbounds i32, i32* %0, i64 %112
  %114 = bitcast i32* %113 to <4 x i32>*
  %115 = load <4 x i32>, <4 x i32>* %114, align 4, !alias.scope !2
  %116 = icmp slt <4 x i32> %115, zeroinitializer
  %117 = sub nsw <4 x i32> zeroinitializer, %115
  %118 = select <4 x i1> %116, <4 x i32> %117, <4 x i32> %115
  %119 = icmp slt <4 x i32> %118, <i32 127, i32 127, i32 127, i32 127>
  %120 = select <4 x i1> %119, <4 x i32> %118, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %121 = icmp sgt <4 x i32> %120, zeroinitializer
  %122 = select <4 x i1> %121, <4 x i32> %120, <4 x i32> zeroinitializer
  %123 = trunc <4 x i32> %122 to <4 x i8>
  %124 = bitcast i8* %111 to <4 x i8>*
  store <4 x i8> %123, <4 x i8>* %124, align 1, !alias.scope !5, !noalias !2
  br label %125

125:                                              ; preds = %108, %110
  br i1 %28, label %127, label %43

126:                                              ; preds = %127, %4
  ret void

127:                                              ; preds = %61, %133, %125, %32
  %128 = phi i8* [ %34, %32 ], [ %72, %125 ], [ %62, %61 ], [ %160, %133 ]
  %129 = bitcast i8* %128 to i32*
  store i32 0, i32* %129, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 4
  %131 = add nuw nsw i64 %33, 1
  %132 = icmp eq i64 %131, %16
  br i1 %132, label %126, label %32

133:                                              ; preds = %61, %133
  %134 = phi i64 [ %161, %133 ], [ %63, %61 ]
  %135 = phi i8* [ %160, %133 ], [ %64, %61 ]
  %136 = add nsw i64 %134, %42
  %137 = getelementptr inbounds i32, i32* %0, i64 %136
  %138 = load i32, i32* %137, align 4
  %139 = icmp slt i32 %138, 0
  %140 = sub nsw i32 0, %138
  %141 = select i1 %139, i32 %140, i32 %138
  %142 = icmp slt i32 %141, 127
  %143 = select i1 %142, i32 %141, i32 127
  %144 = icmp sgt i32 %143, 0
  %145 = select i1 %144, i32 %143, i32 0
  %146 = trunc i32 %145 to i8
  %147 = getelementptr inbounds i8, i8* %135, i64 1
  store i8 %146, i8* %135, align 1
  %148 = add nuw nsw i64 %134, 1
  %149 = add nsw i64 %148, %42
  %150 = getelementptr inbounds i32, i32* %0, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = icmp slt i32 %151, 0
  %153 = sub nsw i32 0, %151
  %154 = select i1 %152, i32 %153, i32 %151
  %155 = icmp slt i32 %154, 127
  %156 = select i1 %155, i32 %154, i32 127
  %157 = icmp sgt i32 %156, 0
  %158 = select i1 %157, i32 %156, i32 0
  %159 = trunc i32 %158 to i8
  %160 = getelementptr inbounds i8, i8* %135, i64 2
  store i8 %159, i8* %147, align 1
  %161 = add nuw nsw i64 %134, 2
  %162 = icmp eq i64 %161, %17
  br i1 %162, label %127, label %133, !llvm.loop !9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_get_nz_map_contexts_c(i8* nocapture readonly, i16* nocapture readonly, i16 zeroext, i8 zeroext, i8 zeroext, i8* nocapture) local_unnamed_addr #4 {
  switch i8 %3, label %7 [
    i8 4, label %9
    i8 12, label %9
    i8 11, label %9
    i8 18, label %13
    i8 17, label %15
  ]

7:                                                ; preds = %6
  %8 = zext i8 %3 to i64
  br label %9

9:                                                ; preds = %6, %6, %6, %7
  %10 = phi i64 [ %8, %7 ], [ 3, %6 ], [ 3, %6 ], [ 3, %6 ]
  %11 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_log2, i64 0, i64 %10
  %12 = load i32, i32* %11, align 4
  switch i8 %3, label %17 [
    i8 4, label %19
    i8 12, label %19
    i8 11, label %19
    i8 18, label %13
    i8 17, label %15
  ]

13:                                               ; preds = %6, %9
  %14 = phi i32 [ %12, %9 ], [ 5, %6 ]
  br label %19

15:                                               ; preds = %6, %9
  %16 = phi i32 [ %12, %9 ], [ 4, %6 ]
  br label %19

17:                                               ; preds = %9
  %18 = zext i8 %3 to i64
  br label %19

19:                                               ; preds = %9, %9, %9, %13, %15, %17
  %20 = phi i32 [ %12, %17 ], [ %16, %15 ], [ %14, %13 ], [ %12, %9 ], [ %12, %9 ], [ %12, %9 ]
  %21 = phi i64 [ %18, %17 ], [ 9, %15 ], [ 10, %13 ], [ 3, %9 ], [ 3, %9 ], [ 3, %9 ]
  %22 = icmp eq i16 %2, 0
  br i1 %22, label %60, label %23

23:                                               ; preds = %19
  %24 = zext i16 %2 to i32
  %25 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %21
  %26 = load i32, i32* %25, align 4
  %27 = add nsw i32 %24, -1
  %28 = shl i32 1, %20
  %29 = add nsw i32 %28, 4
  %30 = sext i32 %29 to i64
  %31 = shl i32 2, %20
  %32 = add nsw i32 %31, 8
  %33 = sext i32 %32 to i64
  %34 = shl i32 3, %20
  %35 = add nsw i32 %34, 12
  %36 = sext i32 %35 to i64
  %37 = shl i32 4, %20
  %38 = add nsw i32 %37, 16
  %39 = sext i32 %38 to i64
  %40 = add nsw i32 %28, 5
  %41 = sext i32 %40 to i64
  %42 = zext i8 %4 to i32
  %43 = shl i32 -1, %20
  %44 = xor i32 %43, -1
  %45 = zext i8 %3 to i64
  %46 = getelementptr inbounds [19 x i8*], [19 x i8*]* @av1_nz_map_ctx_offset, i64 0, i64 %45
  %47 = shl i32 %26, %20
  %48 = sdiv i32 %47, 8
  %49 = sdiv i32 %47, 4
  %50 = sext i32 %49 to i64
  %51 = sext i32 %48 to i64
  %52 = zext i32 %27 to i64
  %53 = zext i16 %2 to i64
  %54 = icmp eq i32 %27, 0
  %55 = icmp slt i64 %51, %52
  %56 = icmp slt i64 %50, %52
  %57 = select i1 %56, i32 3, i32 2
  %58 = select i1 %55, i32 %57, i32 1
  %59 = select i1 %54, i32 0, i32 %58
  br label %61

60:                                               ; preds = %138, %19
  ret void

61:                                               ; preds = %138, %23
  %62 = phi i64 [ 0, %23 ], [ %143, %138 ]
  %63 = getelementptr inbounds i16, i16* %1, i64 %62
  %64 = load i16, i16* %63, align 2
  %65 = sext i16 %64 to i32
  %66 = icmp eq i64 %62, %52
  br i1 %66, label %138, label %67

67:                                               ; preds = %61
  %68 = ashr i32 %65, %20
  %69 = shl nsw i32 %68, 2
  %70 = add nsw i32 %69, %65
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %0, i64 %71
  %73 = getelementptr inbounds i8, i8* %72, i64 1
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i64
  %76 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = getelementptr inbounds i8, i8* %72, i64 %30
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i64
  %82 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = add nuw nsw i32 %84, %78
  switch i8 %4, label %87 [
    i8 0, label %88
    i8 2, label %86
  ]

86:                                               ; preds = %67
  br label %88

87:                                               ; preds = %67
  br label %88

88:                                               ; preds = %67, %87, %86
  %89 = phi i64 [ 2, %87 ], [ %33, %86 ], [ %41, %67 ]
  %90 = phi i64 [ 3, %87 ], [ %36, %86 ], [ 2, %67 ]
  %91 = phi i64 [ 4, %87 ], [ %39, %86 ], [ %33, %67 ]
  %92 = or i32 %65, %42
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %138, label %94

94:                                               ; preds = %88
  %95 = getelementptr inbounds i8, i8* %72, i64 %89
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i64
  %98 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = add nuw nsw i32 %85, %100
  %102 = getelementptr inbounds i8, i8* %72, i64 %90
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = add nuw nsw i32 %101, %107
  %109 = getelementptr inbounds i8, i8* %72, i64 %91
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i64
  %112 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = add nuw nsw i32 %108, %114
  %116 = add nuw nsw i32 %115, 1
  %117 = lshr i32 %116, 1
  %118 = icmp ult i32 %117, 4
  %119 = select i1 %118, i32 %117, i32 4
  switch i8 %4, label %138 [
    i8 0, label %120
    i8 1, label %127
    i8 2, label %133
  ]

120:                                              ; preds = %94
  %121 = load i8*, i8** %46, align 8
  %122 = sext i16 %64 to i64
  %123 = getelementptr inbounds i8, i8* %121, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = sext i8 %124 to i32
  %126 = add nsw i32 %119, %125
  br label %138

127:                                              ; preds = %94
  %128 = and i32 %65, %44
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds [32 x i32], [32 x i32]* @nz_map_ctx_offset_1d, i64 0, i64 %129
  %131 = load i32, i32* %130, align 4
  %132 = add nsw i32 %131, %119
  br label %138

133:                                              ; preds = %94
  %134 = sext i32 %68 to i64
  %135 = getelementptr inbounds [32 x i32], [32 x i32]* @nz_map_ctx_offset_1d, i64 0, i64 %134
  %136 = load i32, i32* %135, align 4
  %137 = add nsw i32 %136, %119
  br label %138

138:                                              ; preds = %61, %88, %94, %120, %127, %133
  %139 = phi i32 [ 0, %88 ], [ %137, %133 ], [ %132, %127 ], [ %126, %120 ], [ 0, %94 ], [ %59, %61 ]
  %140 = trunc i32 %139 to i8
  %141 = sext i16 %64 to i64
  %142 = getelementptr inbounds i8, i8* %5, i64 %141
  store i8 %140, i8* %142, align 1
  %143 = add nuw nsw i64 %62, 1
  %144 = icmp eq i64 %143, %53
  br i1 %144, label %60, label %61
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_write_coeffs_txb(%struct.AV1Common*, %struct.macroblock*, %struct.aom_writer*, i32, i32, i32, i32, i8 zeroext) local_unnamed_addr #0 {
  %9 = alloca [1312 x i8], align 16
  %10 = alloca [4096 x i8], align 16
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 7
  %13 = load %struct.CB_COEFF_BUFFER*, %struct.CB_COEFF_BUFFER** %12, align 16
  %14 = icmp ne i32 %5, 0
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4
  %16 = load %struct.MB_MODE_INFO_EXT_FRAME*, %struct.MB_MODE_INFO_EXT_FRAME** %15, align 8
  %17 = zext i1 %14 to i64
  %18 = getelementptr inbounds %struct.MB_MODE_INFO_EXT_FRAME, %struct.MB_MODE_INFO_EXT_FRAME* %16, i64 0, i32 5, i64 %17
  %19 = load i16, i16* %18, align 2
  %20 = lshr i16 %19, 4
  %21 = sext i32 %5 to i64
  %22 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %13, i64 0, i32 1, i64 %21
  %23 = load i16*, i16** %22, align 8
  %24 = zext i16 %20 to i64
  %25 = getelementptr inbounds i16, i16* %23, i64 %24
  %26 = sext i32 %6 to i64
  %27 = getelementptr inbounds i16, i16* %25, i64 %26
  %28 = load i16, i16* %27, align 2
  %29 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %13, i64 0, i32 2, i64 %21
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 %24
  %32 = getelementptr inbounds i8, i8* %31, i64 %26
  %33 = load i8, i8* %32, align 1
  %34 = and i8 %33, 15
  %35 = zext i8 %7 to i64
  %36 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_map, i64 0, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %35
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = add nuw nsw i32 %38, 1
  %43 = add nuw nsw i32 %42, %41
  %44 = lshr i32 %43, 1
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 39
  %46 = load %struct.frame_contexts*, %struct.frame_contexts** %45, align 8
  %47 = zext i16 %28 to i32
  %48 = icmp eq i16 %28, 0
  %49 = zext i1 %48 to i32
  %50 = and i32 %44, 255
  %51 = zext i32 %50 to i64
  %52 = zext i8 %34 to i64
  %53 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 0, i64 %51, i64 %52, i64 0
  %54 = getelementptr inbounds %struct.aom_writer, %struct.aom_writer* %2, i64 0, i32 2
  tail call void @od_ec_encode_cdf_q15(%struct.od_ec_enc* %54, i32 %49, i16* %53, i32 2) #7
  %55 = getelementptr inbounds %struct.aom_writer, %struct.aom_writer* %2, i64 0, i32 3
  %56 = load i8, i8* %55, align 8
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %85, label %58

58:                                               ; preds = %8
  %59 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 0, i64 %51, i64 %52, i64 2
  %60 = load i16, i16* %59, align 2
  %61 = icmp ugt i16 %60, 15
  %62 = select i1 %61, i32 4, i32 3
  %63 = icmp ugt i16 %60, 31
  %64 = select i1 %63, i32 2, i32 1
  %65 = add nuw nsw i32 %64, %62
  %66 = select i1 %48, i32 32768, i32 0
  %67 = load i16, i16* %53, align 2
  %68 = zext i16 %67 to i32
  %69 = icmp ult i32 %66, %68
  br i1 %69, label %70, label %75

70:                                               ; preds = %58
  %71 = sub nsw i32 %68, %66
  %72 = ashr i32 %71, %65
  %73 = trunc i32 %72 to i16
  %74 = sub i16 %67, %73
  br label %80

75:                                               ; preds = %58
  %76 = sub nsw i32 %66, %68
  %77 = ashr i32 %76, %65
  %78 = trunc i32 %77 to i16
  %79 = add i16 %67, %78
  br label %80

80:                                               ; preds = %75, %70
  %81 = phi i16 [ %79, %75 ], [ %74, %70 ]
  store i16 %81, i16* %53, align 2
  %82 = icmp ult i16 %60, 32
  %83 = zext i1 %82 to i16
  %84 = add i16 %60, %83
  store i16 %84, i16* %59, align 2
  br label %85

85:                                               ; preds = %8, %80
  br i1 %48, label %905, label %86

86:                                               ; preds = %85
  %87 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 20, i32 9
  %88 = load i8, i8* %87, align 1, !range !10
  %89 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %90 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %89, align 8
  %91 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %90, align 8
  %92 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %91, i64 0, i32 28
  %93 = load i16, i16* %92, align 1
  %94 = and i16 %93, 7
  %95 = zext i16 %94 to i64
  %96 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %181

99:                                               ; preds = %86
  %100 = lshr i64 399376, %35
  %101 = and i64 %100, 1
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %181

103:                                              ; preds = %99
  br i1 %14, label %114, label %104

104:                                              ; preds = %103
  %105 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %106 = load i8*, i8** %105, align 8
  %107 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %108 = load i32, i32* %107, align 16
  %109 = mul nsw i32 %108, %3
  %110 = add nsw i32 %109, %4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %106, i64 %111
  %113 = load i8, i8* %112, align 1
  br label %183

114:                                              ; preds = %103
  %115 = trunc i16 %93 to i8
  %116 = icmp sgt i8 %115, -1
  br i1 %116, label %117, label %130

117:                                              ; preds = %114
  %118 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %91, i64 0, i32 6, i64 0
  %119 = load i8, i8* %118, align 8
  %120 = icmp slt i8 %119, 1
  br i1 %120, label %121, label %130

121:                                              ; preds = %117
  %122 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %91, i64 0, i32 3
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = getelementptr inbounds [16 x i8], [16 x i8]* @get_uv_mode.uv2y, i64 0, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds [13 x i8], [13 x i8]* @intra_mode_to_tx_type._intra_mode_to_tx_type, i64 0, i64 %127
  %129 = load i8, i8* %128, align 1
  br label %149

130:                                              ; preds = %117, %114
  %131 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %17, i32 2
  %132 = load i32, i32* %131, align 8
  %133 = shl i32 %3, %132
  %134 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %17, i32 1
  %135 = load i32, i32* %134, align 4
  %136 = shl i32 %4, %135
  %137 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %138 = load i8*, i8** %137, align 8
  %139 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %140 = load i32, i32* %139, align 16
  %141 = mul nsw i32 %140, %133
  %142 = add nsw i32 %141, %136
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %138, i64 %143
  %145 = load i8, i8* %144, align 1
  br i1 %116, label %146, label %154

146:                                              ; preds = %130
  %147 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %91, i64 0, i32 6, i64 0
  %148 = load i8, i8* %147, align 8
  br label %149

149:                                              ; preds = %146, %121
  %150 = phi i8 [ %119, %121 ], [ %148, %146 ]
  %151 = phi i8 [ %129, %121 ], [ %145, %146 ]
  %152 = icmp sgt i8 %150, 0
  %153 = zext i1 %152 to i32
  br label %154

154:                                              ; preds = %149, %130
  %155 = phi i8 [ %145, %130 ], [ %151, %149 ]
  %156 = phi i32 [ 1, %130 ], [ %153, %149 ]
  %157 = lshr i64 99848, %35
  %158 = and i64 %157, 1
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %162, label %160

160:                                              ; preds = %154
  %161 = trunc i32 %156 to i8
  br label %173

162:                                              ; preds = %154
  %163 = icmp eq i8 %88, 0
  br i1 %163, label %167, label %164

164:                                              ; preds = %162
  %165 = icmp eq i32 %156, 0
  %166 = select i1 %165, i8 2, i8 1
  br label %173

167:                                              ; preds = %162
  %168 = zext i32 %156 to i64
  %169 = lshr i64 394756, %35
  %170 = and i64 %169, 1
  %171 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @av1_ext_tx_set_lookup, i64 0, i64 %168, i64 %170
  %172 = load i8, i8* %171, align 1
  br label %173

173:                                              ; preds = %160, %164, %167
  %174 = phi i8 [ %161, %160 ], [ %166, %164 ], [ %172, %167 ]
  %175 = zext i8 %174 to i64
  %176 = zext i8 %155 to i64
  %177 = getelementptr inbounds [6 x [16 x i32]], [6 x [16 x i32]]* bitcast (<{ <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32] }>* @av1_ext_tx_used to [6 x [16 x i32]]*), i64 0, i64 %175, i64 %176
  %178 = load i32, i32* %177, align 4
  %179 = icmp eq i32 %178, 0
  %180 = select i1 %179, i8 0, i8 %155
  br label %185

181:                                              ; preds = %86, %99
  %182 = icmp eq i32 %5, 0
  br i1 %182, label %183, label %185

183:                                              ; preds = %104, %181
  %184 = phi i8 [ %113, %104 ], [ 0, %181 ]
  tail call void @av1_write_tx_type(%struct.AV1Common* %0, %struct.macroblockd* %11, i8 zeroext %184, i8 zeroext %7, %struct.aom_writer* %2) #7
  br label %185

185:                                              ; preds = %173, %183, %181
  %186 = phi i8 [ %184, %183 ], [ 0, %181 ], [ %180, %173 ]
  %187 = icmp ult i16 %28, 33
  br i1 %187, label %188, label %191

188:                                              ; preds = %185
  %189 = zext i16 %28 to i64
  %190 = getelementptr inbounds [33 x i8], [33 x i8]* @eob_to_pos_small, i64 0, i64 %189
  br label %200

191:                                              ; preds = %185
  %192 = icmp ult i16 %28, 513
  br i1 %192, label %193, label %197

193:                                              ; preds = %191
  %194 = add nsw i32 %47, -1
  %195 = ashr i32 %194, 5
  %196 = sext i32 %195 to i64
  br label %197

197:                                              ; preds = %193, %191
  %198 = phi i64 [ %196, %193 ], [ 16, %191 ]
  %199 = getelementptr inbounds [17 x i8], [17 x i8]* @eob_to_pos_large, i64 0, i64 %198
  br label %200

200:                                              ; preds = %188, %197
  %201 = phi i8* [ %190, %188 ], [ %199, %197 ]
  %202 = load i8, i8* %201, align 1
  %203 = sext i8 %202 to i32
  %204 = sext i8 %202 to i64
  %205 = getelementptr inbounds [12 x i16], [12 x i16]* @av1_eob_group_start, i64 0, i64 %204
  %206 = load i16, i16* %205, align 2
  %207 = sext i16 %206 to i32
  %208 = sub nsw i32 %47, %207
  %209 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_log2_minus4, i64 0, i64 %35
  %210 = load i8, i8* %209, align 1
  %211 = sext i8 %210 to i32
  %212 = zext i8 %186 to i64
  %213 = getelementptr inbounds [16 x i8], [16 x i8]* @tx_type_to_class, i64 0, i64 %212
  %214 = load i8, i8* %213, align 1
  %215 = icmp ugt i8 %186, 9
  switch i32 %211, label %462 [
    i32 0, label %216
    i32 1, label %257
    i32 2, label %298
    i32 3, label %339
    i32 4, label %380
    i32 5, label %421
  ]

216:                                              ; preds = %200
  %217 = add nsw i32 %203, -1
  %218 = zext i1 %215 to i64
  %219 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 3, i64 %17, i64 %218, i64 0
  tail call void @od_ec_encode_cdf_q15(%struct.od_ec_enc* %54, i32 %217, i16* %219, i32 5) #7
  %220 = load i8, i8* %55, align 8
  %221 = icmp eq i8 %220, 0
  br i1 %221, label %503, label %222

222:                                              ; preds = %216
  %223 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 3, i64 %17, i64 %218, i64 5
  %224 = load i16, i16* %223, align 2
  %225 = icmp ugt i16 %224, 15
  %226 = select i1 %225, i32 4, i32 3
  %227 = icmp ugt i16 %224, 31
  %228 = select i1 %227, i32 3, i32 2
  %229 = add nuw nsw i32 %228, %226
  %230 = zext i32 %217 to i64
  %231 = shl i64 %230, 56
  %232 = ashr exact i64 %231, 56
  %233 = and i64 %232, 4294967295
  %234 = icmp eq i64 %233, 0
  %235 = select i1 %234, i32 0, i32 32768
  %236 = load i16, i16* %219, align 2
  %237 = zext i16 %236 to i32
  %238 = icmp ult i32 %235, %237
  br i1 %238, label %239, label %244

239:                                              ; preds = %222
  %240 = sub nsw i32 %237, %235
  %241 = ashr i32 %240, %229
  %242 = trunc i32 %241 to i16
  %243 = sub i16 %236, %242
  br label %249

244:                                              ; preds = %222
  %245 = sub nsw i32 %235, %237
  %246 = ashr i32 %245, %229
  %247 = trunc i32 %246 to i16
  %248 = add i16 %236, %247
  br label %249

249:                                              ; preds = %244, %239
  %250 = phi i16 [ %248, %244 ], [ %243, %239 ]
  store i16 %250, i16* %219, align 2
  %251 = icmp eq i64 %233, 1
  %252 = select i1 %251, i32 0, i32 %235
  %253 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 3, i64 %17, i64 %218, i64 1
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = icmp ult i32 %252, %255
  br i1 %256, label %1150, label %1145

257:                                              ; preds = %200
  %258 = add nsw i32 %203, -1
  %259 = zext i1 %215 to i64
  %260 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 4, i64 %17, i64 %259, i64 0
  tail call void @od_ec_encode_cdf_q15(%struct.od_ec_enc* %54, i32 %258, i16* %260, i32 6) #7
  %261 = load i8, i8* %55, align 8
  %262 = icmp eq i8 %261, 0
  br i1 %262, label %503, label %263

263:                                              ; preds = %257
  %264 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 4, i64 %17, i64 %259, i64 6
  %265 = load i16, i16* %264, align 2
  %266 = icmp ugt i16 %265, 15
  %267 = select i1 %266, i32 4, i32 3
  %268 = icmp ugt i16 %265, 31
  %269 = select i1 %268, i32 3, i32 2
  %270 = add nuw nsw i32 %269, %267
  %271 = zext i32 %258 to i64
  %272 = shl i64 %271, 56
  %273 = ashr exact i64 %272, 56
  %274 = and i64 %273, 4294967295
  %275 = icmp eq i64 %274, 0
  %276 = select i1 %275, i32 0, i32 32768
  %277 = load i16, i16* %260, align 2
  %278 = zext i16 %277 to i32
  %279 = icmp ult i32 %276, %278
  br i1 %279, label %280, label %285

280:                                              ; preds = %263
  %281 = sub nsw i32 %278, %276
  %282 = ashr i32 %281, %270
  %283 = trunc i32 %282 to i16
  %284 = sub i16 %277, %283
  br label %290

285:                                              ; preds = %263
  %286 = sub nsw i32 %276, %278
  %287 = ashr i32 %286, %270
  %288 = trunc i32 %287 to i16
  %289 = add i16 %277, %288
  br label %290

290:                                              ; preds = %285, %280
  %291 = phi i16 [ %289, %285 ], [ %284, %280 ]
  store i16 %291, i16* %260, align 2
  %292 = icmp eq i64 %274, 1
  %293 = select i1 %292, i32 0, i32 %276
  %294 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 4, i64 %17, i64 %259, i64 1
  %295 = load i16, i16* %294, align 2
  %296 = zext i16 %295 to i32
  %297 = icmp ult i32 %293, %296
  br i1 %297, label %1201, label %1196

298:                                              ; preds = %200
  %299 = add nsw i32 %203, -1
  %300 = zext i1 %215 to i64
  %301 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 5, i64 %17, i64 %300, i64 0
  tail call void @od_ec_encode_cdf_q15(%struct.od_ec_enc* %54, i32 %299, i16* %301, i32 7) #7
  %302 = load i8, i8* %55, align 8
  %303 = icmp eq i8 %302, 0
  br i1 %303, label %503, label %304

304:                                              ; preds = %298
  %305 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 5, i64 %17, i64 %300, i64 7
  %306 = load i16, i16* %305, align 2
  %307 = icmp ugt i16 %306, 15
  %308 = select i1 %307, i32 4, i32 3
  %309 = icmp ugt i16 %306, 31
  %310 = select i1 %309, i32 3, i32 2
  %311 = add nuw nsw i32 %310, %308
  %312 = zext i32 %299 to i64
  %313 = shl i64 %312, 56
  %314 = ashr exact i64 %313, 56
  %315 = and i64 %314, 4294967295
  %316 = icmp eq i64 %315, 0
  %317 = select i1 %316, i32 0, i32 32768
  %318 = load i16, i16* %301, align 2
  %319 = zext i16 %318 to i32
  %320 = icmp ult i32 %317, %319
  br i1 %320, label %321, label %326

321:                                              ; preds = %304
  %322 = sub nsw i32 %319, %317
  %323 = ashr i32 %322, %311
  %324 = trunc i32 %323 to i16
  %325 = sub i16 %318, %324
  br label %331

326:                                              ; preds = %304
  %327 = sub nsw i32 %317, %319
  %328 = ashr i32 %327, %311
  %329 = trunc i32 %328 to i16
  %330 = add i16 %318, %329
  br label %331

331:                                              ; preds = %326, %321
  %332 = phi i16 [ %330, %326 ], [ %325, %321 ]
  store i16 %332, i16* %301, align 2
  %333 = icmp eq i64 %315, 1
  %334 = select i1 %333, i32 0, i32 %317
  %335 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 5, i64 %17, i64 %300, i64 1
  %336 = load i16, i16* %335, align 2
  %337 = zext i16 %336 to i32
  %338 = icmp ult i32 %334, %337
  br i1 %338, label %1270, label %1265

339:                                              ; preds = %200
  %340 = add nsw i32 %203, -1
  %341 = zext i1 %215 to i64
  %342 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 6, i64 %17, i64 %341, i64 0
  tail call void @od_ec_encode_cdf_q15(%struct.od_ec_enc* %54, i32 %340, i16* %342, i32 8) #7
  %343 = load i8, i8* %55, align 8
  %344 = icmp eq i8 %343, 0
  br i1 %344, label %503, label %345

345:                                              ; preds = %339
  %346 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 6, i64 %17, i64 %341, i64 8
  %347 = load i16, i16* %346, align 2
  %348 = icmp ugt i16 %347, 15
  %349 = select i1 %348, i32 4, i32 3
  %350 = icmp ugt i16 %347, 31
  %351 = select i1 %350, i32 3, i32 2
  %352 = add nuw nsw i32 %351, %349
  %353 = zext i32 %340 to i64
  %354 = shl i64 %353, 56
  %355 = ashr exact i64 %354, 56
  %356 = and i64 %355, 4294967295
  %357 = icmp eq i64 %356, 0
  %358 = select i1 %357, i32 0, i32 32768
  %359 = load i16, i16* %342, align 2
  %360 = zext i16 %359 to i32
  %361 = icmp ult i32 %358, %360
  br i1 %361, label %362, label %367

362:                                              ; preds = %345
  %363 = sub nsw i32 %360, %358
  %364 = ashr i32 %363, %352
  %365 = trunc i32 %364 to i16
  %366 = sub i16 %359, %365
  br label %372

367:                                              ; preds = %345
  %368 = sub nsw i32 %358, %360
  %369 = ashr i32 %368, %352
  %370 = trunc i32 %369 to i16
  %371 = add i16 %359, %370
  br label %372

372:                                              ; preds = %367, %362
  %373 = phi i16 [ %371, %367 ], [ %366, %362 ]
  store i16 %373, i16* %342, align 2
  %374 = icmp eq i64 %356, 1
  %375 = select i1 %374, i32 0, i32 %358
  %376 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 6, i64 %17, i64 %341, i64 1
  %377 = load i16, i16* %376, align 2
  %378 = zext i16 %377 to i32
  %379 = icmp ult i32 %375, %378
  br i1 %379, label %1357, label %1352

380:                                              ; preds = %200
  %381 = add nsw i32 %203, -1
  %382 = zext i1 %215 to i64
  %383 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 7, i64 %17, i64 %382, i64 0
  tail call void @od_ec_encode_cdf_q15(%struct.od_ec_enc* %54, i32 %381, i16* %383, i32 9) #7
  %384 = load i8, i8* %55, align 8
  %385 = icmp eq i8 %384, 0
  br i1 %385, label %503, label %386

386:                                              ; preds = %380
  %387 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 7, i64 %17, i64 %382, i64 9
  %388 = load i16, i16* %387, align 2
  %389 = icmp ugt i16 %388, 15
  %390 = select i1 %389, i32 4, i32 3
  %391 = icmp ugt i16 %388, 31
  %392 = select i1 %391, i32 3, i32 2
  %393 = add nuw nsw i32 %392, %390
  %394 = zext i32 %381 to i64
  %395 = shl i64 %394, 56
  %396 = ashr exact i64 %395, 56
  %397 = and i64 %396, 4294967295
  %398 = icmp eq i64 %397, 0
  %399 = select i1 %398, i32 0, i32 32768
  %400 = load i16, i16* %383, align 2
  %401 = zext i16 %400 to i32
  %402 = icmp ult i32 %399, %401
  br i1 %402, label %403, label %408

403:                                              ; preds = %386
  %404 = sub nsw i32 %401, %399
  %405 = ashr i32 %404, %393
  %406 = trunc i32 %405 to i16
  %407 = sub i16 %400, %406
  br label %413

408:                                              ; preds = %386
  %409 = sub nsw i32 %399, %401
  %410 = ashr i32 %409, %393
  %411 = trunc i32 %410 to i16
  %412 = add i16 %400, %411
  br label %413

413:                                              ; preds = %408, %403
  %414 = phi i16 [ %412, %408 ], [ %407, %403 ]
  store i16 %414, i16* %383, align 2
  %415 = icmp eq i64 %397, 1
  %416 = select i1 %415, i32 0, i32 %399
  %417 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 7, i64 %17, i64 %382, i64 1
  %418 = load i16, i16* %417, align 2
  %419 = zext i16 %418 to i32
  %420 = icmp ult i32 %416, %419
  br i1 %420, label %1462, label %1457

421:                                              ; preds = %200
  %422 = add nsw i32 %203, -1
  %423 = zext i1 %215 to i64
  %424 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 8, i64 %17, i64 %423, i64 0
  tail call void @od_ec_encode_cdf_q15(%struct.od_ec_enc* %54, i32 %422, i16* %424, i32 10) #7
  %425 = load i8, i8* %55, align 8
  %426 = icmp eq i8 %425, 0
  br i1 %426, label %503, label %427

427:                                              ; preds = %421
  %428 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 8, i64 %17, i64 %423, i64 10
  %429 = load i16, i16* %428, align 2
  %430 = icmp ugt i16 %429, 15
  %431 = select i1 %430, i32 4, i32 3
  %432 = icmp ugt i16 %429, 31
  %433 = select i1 %432, i32 3, i32 2
  %434 = add nuw nsw i32 %433, %431
  %435 = zext i32 %422 to i64
  %436 = shl i64 %435, 56
  %437 = ashr exact i64 %436, 56
  %438 = and i64 %437, 4294967295
  %439 = icmp eq i64 %438, 0
  %440 = select i1 %439, i32 0, i32 32768
  %441 = load i16, i16* %424, align 2
  %442 = zext i16 %441 to i32
  %443 = icmp ult i32 %440, %442
  br i1 %443, label %444, label %449

444:                                              ; preds = %427
  %445 = sub nsw i32 %442, %440
  %446 = ashr i32 %445, %434
  %447 = trunc i32 %446 to i16
  %448 = sub i16 %441, %447
  br label %454

449:                                              ; preds = %427
  %450 = sub nsw i32 %440, %442
  %451 = ashr i32 %450, %434
  %452 = trunc i32 %451 to i16
  %453 = add i16 %441, %452
  br label %454

454:                                              ; preds = %449, %444
  %455 = phi i16 [ %453, %449 ], [ %448, %444 ]
  store i16 %455, i16* %424, align 2
  %456 = icmp eq i64 %438, 1
  %457 = select i1 %456, i32 0, i32 %440
  %458 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 8, i64 %17, i64 %423, i64 1
  %459 = load i16, i16* %458, align 2
  %460 = zext i16 %459 to i32
  %461 = icmp ult i32 %457, %460
  br i1 %461, label %1585, label %1580

462:                                              ; preds = %200
  %463 = add nsw i32 %203, -1
  %464 = zext i1 %215 to i64
  %465 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 9, i64 %17, i64 %464, i64 0
  tail call void @od_ec_encode_cdf_q15(%struct.od_ec_enc* %54, i32 %463, i16* %465, i32 11) #7
  %466 = load i8, i8* %55, align 8
  %467 = icmp eq i8 %466, 0
  br i1 %467, label %503, label %468

468:                                              ; preds = %462
  %469 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 9, i64 %17, i64 %464, i64 11
  %470 = load i16, i16* %469, align 2
  %471 = icmp ugt i16 %470, 15
  %472 = select i1 %471, i32 4, i32 3
  %473 = icmp ugt i16 %470, 31
  %474 = select i1 %473, i32 3, i32 2
  %475 = add nuw nsw i32 %474, %472
  %476 = zext i32 %463 to i64
  %477 = shl i64 %476, 56
  %478 = ashr exact i64 %477, 56
  %479 = and i64 %478, 4294967295
  %480 = icmp eq i64 %479, 0
  %481 = select i1 %480, i32 0, i32 32768
  %482 = load i16, i16* %465, align 2
  %483 = zext i16 %482 to i32
  %484 = icmp ult i32 %481, %483
  br i1 %484, label %485, label %490

485:                                              ; preds = %468
  %486 = sub nsw i32 %483, %481
  %487 = ashr i32 %486, %475
  %488 = trunc i32 %487 to i16
  %489 = sub i16 %482, %488
  br label %495

490:                                              ; preds = %468
  %491 = sub nsw i32 %481, %483
  %492 = ashr i32 %491, %475
  %493 = trunc i32 %492 to i16
  %494 = add i16 %482, %493
  br label %495

495:                                              ; preds = %490, %485
  %496 = phi i16 [ %494, %490 ], [ %489, %485 ]
  store i16 %496, i16* %465, align 2
  %497 = icmp eq i64 %479, 1
  %498 = select i1 %497, i32 0, i32 %481
  %499 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 9, i64 %17, i64 %464, i64 1
  %500 = load i16, i16* %499, align 2
  %501 = zext i16 %500 to i32
  %502 = icmp ult i32 %498, %501
  br i1 %502, label %991, label %986

503:                                              ; preds = %1140, %462, %1716, %421, %1575, %380, %1452, %339, %1347, %298, %1260, %257, %1191, %216
  %504 = getelementptr inbounds [12 x i16], [12 x i16]* @av1_eob_offset_bits, i64 0, i64 %204
  %505 = load i16, i16* %504, align 2
  %506 = sext i16 %505 to i32
  %507 = icmp sgt i16 %505, 0
  br i1 %507, label %508, label %557

508:                                              ; preds = %503
  %509 = add nsw i32 %203, -3
  %510 = add nsw i32 %506, -1
  %511 = shl i32 1, %510
  %512 = and i32 %511, %208
  %513 = icmp ne i32 %512, 0
  %514 = zext i1 %513 to i32
  %515 = sext i32 %509 to i64
  %516 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 1, i64 %51, i64 %17, i64 %515, i64 0
  tail call void @od_ec_encode_cdf_q15(%struct.od_ec_enc* %54, i32 %514, i16* %516, i32 2) #7
  %517 = load i8, i8* %55, align 8
  %518 = icmp eq i8 %517, 0
  br i1 %518, label %546, label %519

519:                                              ; preds = %508
  %520 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 1, i64 %51, i64 %17, i64 %515, i64 2
  %521 = load i16, i16* %520, align 2
  %522 = icmp ugt i16 %521, 15
  %523 = select i1 %522, i32 4, i32 3
  %524 = icmp ugt i16 %521, 31
  %525 = select i1 %524, i32 2, i32 1
  %526 = add nuw nsw i32 %525, %523
  %527 = select i1 %513, i32 32768, i32 0
  %528 = load i16, i16* %516, align 2
  %529 = zext i16 %528 to i32
  %530 = icmp ult i32 %527, %529
  br i1 %530, label %531, label %536

531:                                              ; preds = %519
  %532 = sub nsw i32 %529, %527
  %533 = ashr i32 %532, %526
  %534 = trunc i32 %533 to i16
  %535 = sub i16 %528, %534
  br label %541

536:                                              ; preds = %519
  %537 = sub nsw i32 %527, %529
  %538 = ashr i32 %537, %526
  %539 = trunc i32 %538 to i16
  %540 = add i16 %528, %539
  br label %541

541:                                              ; preds = %536, %531
  %542 = phi i16 [ %540, %536 ], [ %535, %531 ]
  store i16 %542, i16* %516, align 2
  %543 = icmp ult i16 %521, 32
  %544 = zext i1 %543 to i16
  %545 = add i16 %521, %544
  store i16 %545, i16* %520, align 2
  br label %546

546:                                              ; preds = %508, %541
  %547 = icmp sgt i16 %505, 1
  br i1 %547, label %548, label %557

548:                                              ; preds = %546, %548
  %549 = phi i32 [ %555, %548 ], [ 1, %546 ]
  %550 = sub nsw i32 %510, %549
  %551 = shl i32 1, %550
  %552 = and i32 %551, %208
  %553 = icmp ne i32 %552, 0
  %554 = zext i1 %553 to i32
  tail call void @od_ec_encode_bool_q15(%struct.od_ec_enc* %54, i32 %554, i32 16384) #7
  %555 = add nuw nsw i32 %549, 1
  %556 = icmp eq i32 %555, %506
  br i1 %556, label %557, label %548

557:                                              ; preds = %548, %546, %503
  switch i8 %7, label %558 [
    i8 4, label %559
    i8 12, label %559
    i8 11, label %559
    i8 18, label %563
    i8 17, label %565
  ]

558:                                              ; preds = %557
  br label %559

559:                                              ; preds = %557, %557, %557, %558
  %560 = phi i64 [ %35, %558 ], [ 3, %557 ], [ 3, %557 ], [ 3, %557 ]
  %561 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %560
  %562 = load i32, i32* %561, align 4
  switch i8 %7, label %567 [
    i8 4, label %568
    i8 12, label %568
    i8 11, label %568
    i8 18, label %563
    i8 17, label %565
  ]

563:                                              ; preds = %557, %559
  %564 = phi i32 [ %562, %559 ], [ 32, %557 ]
  br label %568

565:                                              ; preds = %557, %559
  %566 = phi i32 [ %562, %559 ], [ 16, %557 ]
  br label %568

567:                                              ; preds = %559
  br label %568

568:                                              ; preds = %559, %559, %559, %563, %565, %567
  %569 = phi i32 [ %562, %567 ], [ %566, %565 ], [ %564, %563 ], [ %562, %559 ], [ %562, %559 ], [ %562, %559 ]
  %570 = phi i64 [ %35, %567 ], [ 9, %565 ], [ 10, %563 ], [ 3, %559 ], [ 3, %559 ], [ 3, %559 ]
  %571 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %570
  %572 = load i32, i32* %571, align 4
  %573 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1312, i8* nonnull %573) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %573, i8 -86, i64 1312, i1 false)
  %574 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %13, i64 0, i32 0, i64 %21
  %575 = load i32*, i32** %574, align 8
  %576 = load %struct.MB_MODE_INFO_EXT_FRAME*, %struct.MB_MODE_INFO_EXT_FRAME** %15, align 8
  %577 = getelementptr inbounds %struct.MB_MODE_INFO_EXT_FRAME, %struct.MB_MODE_INFO_EXT_FRAME* %576, i64 0, i32 5, i64 %17
  %578 = load i16, i16* %577, align 2
  %579 = zext i16 %578 to i64
  %580 = getelementptr inbounds i32, i32* %575, i64 %579
  %581 = shl i32 %6, 4
  %582 = sext i32 %581 to i64
  %583 = getelementptr inbounds i32, i32* %580, i64 %582
  %584 = load void (i32*, i32, i32, i8*)*, void (i32*, i32, i32, i8*)** @av1_txb_init_levels, align 8
  call void %584(i32* %583, i32 %569, i32 %572, i8* nonnull %573) #7
  %585 = getelementptr inbounds [19 x [16 x %struct.SCAN_ORDER]], [19 x [16 x %struct.SCAN_ORDER]]* @av1_scan_orders, i64 0, i64 %35, i64 %212, i32 0
  %586 = load i16*, i16** %585, align 16
  %587 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %587) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %587, i8 -86, i64 4096, i1 false)
  call void @av1_get_nz_map_contexts_sse2(i8* nonnull %573, i16* %586, i16 zeroext %28, i8 zeroext %7, i8 zeroext %214, i8* nonnull %587) #7
  switch i8 %7, label %590 [
    i8 4, label %591
    i8 12, label %591
    i8 11, label %591
    i8 18, label %588
    i8 17, label %589
  ]

588:                                              ; preds = %568
  br label %591

589:                                              ; preds = %568
  br label %591

590:                                              ; preds = %568
  br label %591

591:                                              ; preds = %590, %589, %588, %568, %568, %568
  %592 = phi i64 [ %35, %590 ], [ 9, %589 ], [ 10, %588 ], [ 3, %568 ], [ 3, %568 ], [ 3, %568 ]
  %593 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_log2, i64 0, i64 %592
  %594 = load i32, i32* %593, align 4
  %595 = add nsw i32 %47, -1
  %596 = shl i32 1, %594
  %597 = add nsw i32 %596, 4
  %598 = shl i32 %597, 1
  %599 = icmp ult i32 %50, 3
  %600 = select i1 %599, i32 %50, i32 3
  %601 = zext i32 %600 to i64
  %602 = zext i16 %28 to i64
  %603 = zext i32 %595 to i64
  br label %606

604:                                              ; preds = %825
  %605 = zext i16 %28 to i64
  br label %828

606:                                              ; preds = %591, %825
  %607 = phi i64 [ %602, %591 ], [ %608, %825 ]
  %608 = add nsw i64 %607, -1
  %609 = getelementptr inbounds i16, i16* %586, i64 %608
  %610 = load i16, i16* %609, align 2
  %611 = sext i16 %610 to i32
  %612 = sext i16 %610 to i64
  %613 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 %612
  %614 = load i8, i8* %613, align 1
  %615 = getelementptr inbounds i32, i32* %583, i64 %612
  %616 = load i32, i32* %615, align 4
  %617 = icmp slt i32 %616, 0
  %618 = sub nsw i32 0, %616
  %619 = select i1 %617, i32 %618, i32 %616
  %620 = icmp eq i64 %608, %603
  %621 = icmp slt i32 %619, 3
  %622 = select i1 %621, i32 %619, i32 3
  br i1 %620, label %623, label %664

623:                                              ; preds = %606
  %624 = add nsw i32 %622, -1
  %625 = sext i8 %614 to i64
  %626 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 10, i64 %51, i64 %17, i64 %625, i64 0
  call void @od_ec_encode_cdf_q15(%struct.od_ec_enc* %54, i32 %624, i16* %626, i32 3) #7
  %627 = load i8, i8* %55, align 8
  %628 = icmp eq i8 %627, 0
  br i1 %628, label %700, label %629

629:                                              ; preds = %623
  %630 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 10, i64 %51, i64 %17, i64 %625, i64 3
  %631 = load i16, i16* %630, align 2
  %632 = icmp ugt i16 %631, 15
  %633 = select i1 %632, i32 4, i32 3
  %634 = icmp ugt i16 %631, 31
  %635 = select i1 %634, i32 2, i32 1
  %636 = add nuw nsw i32 %635, %633
  %637 = zext i32 %624 to i64
  %638 = shl i64 %637, 56
  %639 = ashr exact i64 %638, 56
  %640 = and i64 %639, 4294967295
  %641 = icmp eq i64 %640, 0
  %642 = select i1 %641, i32 0, i32 32768
  %643 = load i16, i16* %626, align 2
  %644 = zext i16 %643 to i32
  %645 = icmp ult i32 %642, %644
  br i1 %645, label %646, label %651

646:                                              ; preds = %629
  %647 = sub nsw i32 %644, %642
  %648 = ashr i32 %647, %636
  %649 = trunc i32 %648 to i16
  %650 = sub i16 %643, %649
  br label %656

651:                                              ; preds = %629
  %652 = sub nsw i32 %642, %644
  %653 = ashr i32 %652, %636
  %654 = trunc i32 %653 to i16
  %655 = add i16 %643, %654
  br label %656

656:                                              ; preds = %651, %646
  %657 = phi i16 [ %655, %651 ], [ %650, %646 ]
  store i16 %657, i16* %626, align 2
  %658 = icmp eq i64 %640, 1
  %659 = select i1 %658, i32 0, i32 %642
  %660 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 10, i64 %51, i64 %17, i64 %625, i64 1
  %661 = load i16, i16* %660, align 2
  %662 = zext i16 %661 to i32
  %663 = icmp ult i32 %659, %662
  br i1 %663, label %944, label %939

664:                                              ; preds = %606
  %665 = sext i8 %614 to i64
  %666 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 11, i64 %51, i64 %17, i64 %665, i64 0
  call void @od_ec_encode_cdf_q15(%struct.od_ec_enc* %54, i32 %622, i16* %666, i32 4) #7
  %667 = load i8, i8* %55, align 8
  %668 = icmp eq i8 %667, 0
  br i1 %668, label %700, label %669

669:                                              ; preds = %664
  %670 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 11, i64 %51, i64 %17, i64 %665, i64 4
  %671 = load i16, i16* %670, align 2
  %672 = icmp ugt i16 %671, 15
  %673 = select i1 %672, i32 4, i32 3
  %674 = icmp ugt i16 %671, 31
  %675 = select i1 %674, i32 3, i32 2
  %676 = add nuw nsw i32 %675, %673
  %677 = icmp eq i32 %622, 0
  %678 = select i1 %677, i32 0, i32 32768
  %679 = load i16, i16* %666, align 2
  %680 = zext i16 %679 to i32
  %681 = icmp ult i32 %678, %680
  br i1 %681, label %682, label %687

682:                                              ; preds = %669
  %683 = sub nsw i32 %680, %678
  %684 = ashr i32 %683, %676
  %685 = trunc i32 %684 to i16
  %686 = sub i16 %679, %685
  br label %692

687:                                              ; preds = %669
  %688 = sub nsw i32 %678, %680
  %689 = ashr i32 %688, %676
  %690 = trunc i32 %689 to i16
  %691 = add i16 %679, %690
  br label %692

692:                                              ; preds = %687, %682
  %693 = phi i16 [ %691, %687 ], [ %686, %682 ]
  store i16 %693, i16* %666, align 2
  %694 = icmp eq i32 %622, 1
  %695 = select i1 %694, i32 0, i32 %678
  %696 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 11, i64 %51, i64 %17, i64 %665, i64 1
  %697 = load i16, i16* %696, align 2
  %698 = zext i16 %697 to i32
  %699 = icmp ult i32 %695, %698
  br i1 %699, label %911, label %906

700:                                              ; preds = %934, %664, %949, %623
  %701 = icmp sgt i32 %619, 2
  br i1 %701, label %702, label %825

702:                                              ; preds = %700
  %703 = add nsw i32 %619, -3
  %704 = ashr i32 %611, %594
  %705 = shl i32 %704, %594
  %706 = sub nsw i32 %611, %705
  %707 = mul nsw i32 %704, %597
  %708 = add nsw i32 %706, %707
  %709 = add nsw i32 %708, 1
  %710 = sext i32 %709 to i64
  %711 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %710
  %712 = load i8, i8* %711, align 1
  %713 = zext i8 %712 to i32
  %714 = add nsw i32 %708, %597
  %715 = sext i32 %714 to i64
  %716 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %715
  %717 = load i8, i8* %716, align 1
  %718 = zext i8 %717 to i32
  %719 = add nuw nsw i32 %718, %713
  switch i8 %214, label %770 [
    i8 0, label %720
    i8 1, label %738
    i8 2, label %754
  ]

720:                                              ; preds = %702
  %721 = add nsw i32 %714, 1
  %722 = sext i32 %721 to i64
  %723 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %722
  %724 = load i8, i8* %723, align 1
  %725 = zext i8 %724 to i32
  %726 = add nuw nsw i32 %719, 1
  %727 = add nuw nsw i32 %726, %725
  %728 = icmp ult i32 %727, 12
  %729 = lshr i32 %727, 1
  %730 = select i1 %728, i32 %729, i32 6
  %731 = icmp eq i16 %610, 0
  br i1 %731, label %773, label %732

732:                                              ; preds = %720
  %733 = icmp slt i32 %704, 2
  %734 = icmp slt i32 %706, 2
  %735 = and i1 %733, %734
  br i1 %735, label %736, label %770

736:                                              ; preds = %732
  %737 = add nuw nsw i32 %730, 7
  br label %773

738:                                              ; preds = %702
  %739 = add nsw i32 %708, 2
  %740 = sext i32 %739 to i64
  %741 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %740
  %742 = load i8, i8* %741, align 1
  %743 = zext i8 %742 to i32
  %744 = add nuw nsw i32 %719, 1
  %745 = add nuw nsw i32 %744, %743
  %746 = icmp ult i32 %745, 12
  %747 = lshr i32 %745, 1
  %748 = select i1 %746, i32 %747, i32 6
  %749 = icmp eq i16 %610, 0
  br i1 %749, label %773, label %750

750:                                              ; preds = %738
  %751 = icmp eq i32 %706, 0
  br i1 %751, label %752, label %770

752:                                              ; preds = %750
  %753 = add nuw nsw i32 %748, 7
  br label %773

754:                                              ; preds = %702
  %755 = add nsw i32 %708, %598
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %756
  %758 = load i8, i8* %757, align 1
  %759 = zext i8 %758 to i32
  %760 = add nuw nsw i32 %719, 1
  %761 = add nuw nsw i32 %760, %759
  %762 = icmp ult i32 %761, 12
  %763 = lshr i32 %761, 1
  %764 = select i1 %762, i32 %763, i32 6
  %765 = icmp eq i16 %610, 0
  br i1 %765, label %773, label %766

766:                                              ; preds = %754
  %767 = icmp eq i32 %704, 0
  br i1 %767, label %768, label %770

768:                                              ; preds = %766
  %769 = add nuw nsw i32 %764, 7
  br label %773

770:                                              ; preds = %766, %750, %732, %702
  %771 = phi i32 [ %719, %702 ], [ %764, %766 ], [ %748, %750 ], [ %730, %732 ]
  %772 = add nuw nsw i32 %771, 14
  br label %773

773:                                              ; preds = %720, %736, %738, %752, %754, %768, %770
  %774 = phi i32 [ %772, %770 ], [ %769, %768 ], [ %753, %752 ], [ %737, %736 ], [ %730, %720 ], [ %748, %738 ], [ %764, %754 ]
  %775 = sext i32 %774 to i64
  %776 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 12, i64 %601, i64 %17, i64 %775, i64 0
  %777 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 12, i64 %601, i64 %17, i64 %775, i64 4
  %778 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 12, i64 %601, i64 %17, i64 %775, i64 1
  %779 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 12, i64 %601, i64 %17, i64 %775, i64 2
  br label %780

780:                                              ; preds = %820, %773
  %781 = phi i32 [ 0, %773 ], [ %821, %820 ]
  %782 = sub i32 %703, %781
  %783 = icmp slt i32 %782, 3
  %784 = select i1 %783, i32 %782, i32 3
  call void @od_ec_encode_cdf_q15(%struct.od_ec_enc* %54, i32 %784, i16* %776, i32 4) #7
  %785 = load i8, i8* %55, align 8
  %786 = icmp eq i8 %785, 0
  br i1 %786, label %820, label %787

787:                                              ; preds = %780
  %788 = load i16, i16* %777, align 2
  %789 = icmp ugt i16 %788, 15
  %790 = select i1 %789, i32 4, i32 3
  %791 = icmp ugt i16 %788, 31
  %792 = select i1 %791, i32 3, i32 2
  %793 = add nuw nsw i32 %792, %790
  %794 = zext i32 %784 to i64
  %795 = shl i64 %794, 56
  %796 = ashr exact i64 %795, 56
  %797 = and i64 %796, 4294967295
  %798 = icmp eq i64 %797, 0
  %799 = select i1 %798, i32 0, i32 32768
  %800 = load i16, i16* %776, align 2
  %801 = zext i16 %800 to i32
  %802 = icmp ult i32 %799, %801
  br i1 %802, label %803, label %808

803:                                              ; preds = %787
  %804 = sub nsw i32 %801, %799
  %805 = ashr i32 %804, %793
  %806 = trunc i32 %805 to i16
  %807 = sub i16 %800, %806
  br label %813

808:                                              ; preds = %787
  %809 = sub nsw i32 %799, %801
  %810 = ashr i32 %809, %793
  %811 = trunc i32 %810 to i16
  %812 = add i16 %800, %811
  br label %813

813:                                              ; preds = %808, %803
  %814 = phi i16 [ %812, %808 ], [ %807, %803 ]
  store i16 %814, i16* %776, align 2
  %815 = icmp eq i64 %797, 1
  %816 = select i1 %815, i32 0, i32 %799
  %817 = load i16, i16* %778, align 2
  %818 = zext i16 %817 to i32
  %819 = icmp ult i32 %816, %818
  br i1 %819, label %959, label %954

820:                                              ; preds = %780, %981
  %821 = add nuw nsw i32 %781, 3
  %822 = xor i1 %783, true
  %823 = icmp ult i32 %821, 12
  %824 = and i1 %823, %822
  br i1 %824, label %780, label %825

825:                                              ; preds = %820, %700
  %826 = icmp sgt i64 %608, 0
  br i1 %826, label %606, label %604

827:                                              ; preds = %902
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %587) #7
  call void @llvm.lifetime.end.p0i8(i64 1312, i8* nonnull %573) #7
  br label %905

828:                                              ; preds = %902, %604
  %829 = phi i64 [ 0, %604 ], [ %903, %902 ]
  %830 = getelementptr inbounds i16, i16* %586, i64 %829
  %831 = load i16, i16* %830, align 2
  %832 = sext i16 %831 to i64
  %833 = getelementptr inbounds i32, i32* %583, i64 %832
  %834 = load i32, i32* %833, align 4
  %835 = icmp slt i32 %834, 0
  %836 = sub nsw i32 0, %834
  %837 = select i1 %835, i32 %836, i32 %834
  %838 = lshr i32 %834, 31
  %839 = icmp eq i32 %834, 0
  br i1 %839, label %902, label %840

840:                                              ; preds = %828
  %841 = icmp eq i64 %829, 0
  br i1 %841, label %842, label %878

842:                                              ; preds = %840
  %843 = load i8, i8* %32, align 1
  %844 = lshr i8 %843, 4
  %845 = and i8 %844, 3
  %846 = zext i8 %845 to i64
  %847 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 2, i64 %17, i64 %846, i64 0
  call void @od_ec_encode_cdf_q15(%struct.od_ec_enc* %54, i32 %838, i16* %847, i32 2) #7
  %848 = load i8, i8* %55, align 8
  %849 = icmp eq i8 %848, 0
  br i1 %849, label %879, label %850

850:                                              ; preds = %842
  %851 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 2, i64 %17, i64 %846, i64 2
  %852 = load i16, i16* %851, align 2
  %853 = icmp ugt i16 %852, 15
  %854 = select i1 %853, i32 4, i32 3
  %855 = icmp ugt i16 %852, 31
  %856 = select i1 %855, i32 2, i32 1
  %857 = add nuw nsw i32 %856, %854
  %858 = icmp eq i32 %838, 0
  %859 = select i1 %858, i32 0, i32 32768
  %860 = load i16, i16* %847, align 2
  %861 = zext i16 %860 to i32
  %862 = icmp ult i32 %859, %861
  br i1 %862, label %863, label %868

863:                                              ; preds = %850
  %864 = sub nsw i32 %861, %859
  %865 = ashr i32 %864, %857
  %866 = trunc i32 %865 to i16
  %867 = sub i16 %860, %866
  br label %873

868:                                              ; preds = %850
  %869 = sub nsw i32 %859, %861
  %870 = ashr i32 %869, %857
  %871 = trunc i32 %870 to i16
  %872 = add i16 %860, %871
  br label %873

873:                                              ; preds = %868, %863
  %874 = phi i16 [ %872, %868 ], [ %867, %863 ]
  store i16 %874, i16* %847, align 2
  %875 = icmp ult i16 %852, 32
  %876 = zext i1 %875 to i16
  %877 = add i16 %852, %876
  store i16 %877, i16* %851, align 2
  br label %879

878:                                              ; preds = %840
  call void @od_ec_encode_bool_q15(%struct.od_ec_enc* %54, i32 %838, i32 16384) #7
  br label %879

879:                                              ; preds = %873, %842, %878
  %880 = icmp sgt i32 %837, 14
  br i1 %880, label %881, label %902

881:                                              ; preds = %879
  %882 = add nsw i32 %837, -14
  br label %885

883:                                              ; preds = %885
  %884 = icmp eq i32 %886, 0
  br i1 %884, label %895, label %891

885:                                              ; preds = %881, %885
  %886 = phi i32 [ %889, %885 ], [ 0, %881 ]
  %887 = phi i32 [ %888, %885 ], [ %882, %881 ]
  %888 = ashr i32 %887, 1
  %889 = add nuw nsw i32 %886, 1
  %890 = icmp eq i32 %888, 0
  br i1 %890, label %883, label %885

891:                                              ; preds = %883, %891
  %892 = phi i32 [ %893, %891 ], [ 0, %883 ]
  call void @od_ec_encode_bool_q15(%struct.od_ec_enc* %54, i32 0, i32 16384) #7
  %893 = add nuw nsw i32 %892, 1
  %894 = icmp eq i32 %893, %886
  br i1 %894, label %895, label %891

895:                                              ; preds = %891, %883
  br label %896

896:                                              ; preds = %895, %896
  %897 = phi i32 [ %900, %896 ], [ %886, %895 ]
  %898 = lshr i32 %882, %897
  %899 = and i32 %898, 1
  call void @od_ec_encode_bool_q15(%struct.od_ec_enc* %54, i32 %899, i32 16384) #7
  %900 = add nsw i32 %897, -1
  %901 = icmp sgt i32 %897, 0
  br i1 %901, label %896, label %902

902:                                              ; preds = %896, %828, %879
  %903 = add nuw nsw i64 %829, 1
  %904 = icmp eq i64 %903, %605
  br i1 %904, label %827, label %828

905:                                              ; preds = %85, %827
  ret void

906:                                              ; preds = %692
  %907 = sub nsw i32 %695, %698
  %908 = ashr i32 %907, %676
  %909 = trunc i32 %908 to i16
  %910 = add i16 %697, %909
  br label %916

911:                                              ; preds = %692
  %912 = sub nsw i32 %698, %695
  %913 = ashr i32 %912, %676
  %914 = trunc i32 %913 to i16
  %915 = sub i16 %697, %914
  br label %916

916:                                              ; preds = %911, %906
  %917 = phi i16 [ %910, %906 ], [ %915, %911 ]
  store i16 %917, i16* %696, align 2
  %918 = icmp eq i32 %622, 2
  %919 = select i1 %918, i32 0, i32 %695
  %920 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 11, i64 %51, i64 %17, i64 %665, i64 2
  %921 = load i16, i16* %920, align 2
  %922 = zext i16 %921 to i32
  %923 = icmp ult i32 %919, %922
  br i1 %923, label %929, label %924

924:                                              ; preds = %916
  %925 = sub nsw i32 %919, %922
  %926 = ashr i32 %925, %676
  %927 = trunc i32 %926 to i16
  %928 = add i16 %921, %927
  br label %934

929:                                              ; preds = %916
  %930 = sub nsw i32 %922, %919
  %931 = ashr i32 %930, %676
  %932 = trunc i32 %931 to i16
  %933 = sub i16 %921, %932
  br label %934

934:                                              ; preds = %929, %924
  %935 = phi i16 [ %928, %924 ], [ %933, %929 ]
  store i16 %935, i16* %920, align 2
  %936 = icmp ult i16 %671, 32
  %937 = zext i1 %936 to i16
  %938 = add i16 %671, %937
  store i16 %938, i16* %670, align 2
  br label %700

939:                                              ; preds = %656
  %940 = sub nsw i32 %659, %662
  %941 = ashr i32 %940, %636
  %942 = trunc i32 %941 to i16
  %943 = add i16 %661, %942
  br label %949

944:                                              ; preds = %656
  %945 = sub nsw i32 %662, %659
  %946 = ashr i32 %945, %636
  %947 = trunc i32 %946 to i16
  %948 = sub i16 %661, %947
  br label %949

949:                                              ; preds = %944, %939
  %950 = phi i16 [ %943, %939 ], [ %948, %944 ]
  store i16 %950, i16* %660, align 2
  %951 = icmp ult i16 %631, 32
  %952 = zext i1 %951 to i16
  %953 = add i16 %631, %952
  store i16 %953, i16* %630, align 2
  br label %700

954:                                              ; preds = %813
  %955 = sub nsw i32 %816, %818
  %956 = ashr i32 %955, %793
  %957 = trunc i32 %956 to i16
  %958 = add i16 %817, %957
  br label %964

959:                                              ; preds = %813
  %960 = sub nsw i32 %818, %816
  %961 = ashr i32 %960, %793
  %962 = trunc i32 %961 to i16
  %963 = sub i16 %817, %962
  br label %964

964:                                              ; preds = %959, %954
  %965 = phi i16 [ %958, %954 ], [ %963, %959 ]
  store i16 %965, i16* %778, align 2
  %966 = icmp eq i64 %797, 2
  %967 = select i1 %966, i32 0, i32 %816
  %968 = load i16, i16* %779, align 2
  %969 = zext i16 %968 to i32
  %970 = icmp ult i32 %967, %969
  br i1 %970, label %976, label %971

971:                                              ; preds = %964
  %972 = sub nsw i32 %967, %969
  %973 = ashr i32 %972, %793
  %974 = trunc i32 %973 to i16
  %975 = add i16 %968, %974
  br label %981

976:                                              ; preds = %964
  %977 = sub nsw i32 %969, %967
  %978 = ashr i32 %977, %793
  %979 = trunc i32 %978 to i16
  %980 = sub i16 %968, %979
  br label %981

981:                                              ; preds = %976, %971
  %982 = phi i16 [ %975, %971 ], [ %980, %976 ]
  store i16 %982, i16* %779, align 2
  %983 = icmp ult i16 %788, 32
  %984 = zext i1 %983 to i16
  %985 = add i16 %788, %984
  store i16 %985, i16* %777, align 2
  br label %820

986:                                              ; preds = %495
  %987 = sub nsw i32 %498, %501
  %988 = ashr i32 %987, %475
  %989 = trunc i32 %988 to i16
  %990 = add i16 %500, %989
  br label %996

991:                                              ; preds = %495
  %992 = sub nsw i32 %501, %498
  %993 = ashr i32 %992, %475
  %994 = trunc i32 %993 to i16
  %995 = sub i16 %500, %994
  br label %996

996:                                              ; preds = %991, %986
  %997 = phi i16 [ %990, %986 ], [ %995, %991 ]
  store i16 %997, i16* %499, align 2
  %998 = icmp eq i64 %479, 2
  %999 = select i1 %998, i32 0, i32 %498
  %1000 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 9, i64 %17, i64 %464, i64 2
  %1001 = load i16, i16* %1000, align 2
  %1002 = zext i16 %1001 to i32
  %1003 = icmp ult i32 %999, %1002
  br i1 %1003, label %1009, label %1004

1004:                                             ; preds = %996
  %1005 = sub nsw i32 %999, %1002
  %1006 = ashr i32 %1005, %475
  %1007 = trunc i32 %1006 to i16
  %1008 = add i16 %1001, %1007
  br label %1014

1009:                                             ; preds = %996
  %1010 = sub nsw i32 %1002, %999
  %1011 = ashr i32 %1010, %475
  %1012 = trunc i32 %1011 to i16
  %1013 = sub i16 %1001, %1012
  br label %1014

1014:                                             ; preds = %1009, %1004
  %1015 = phi i16 [ %1008, %1004 ], [ %1013, %1009 ]
  store i16 %1015, i16* %1000, align 2
  %1016 = icmp eq i64 %479, 3
  %1017 = select i1 %1016, i32 0, i32 %999
  %1018 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 9, i64 %17, i64 %464, i64 3
  %1019 = load i16, i16* %1018, align 2
  %1020 = zext i16 %1019 to i32
  %1021 = icmp ult i32 %1017, %1020
  br i1 %1021, label %1027, label %1022

1022:                                             ; preds = %1014
  %1023 = sub nsw i32 %1017, %1020
  %1024 = ashr i32 %1023, %475
  %1025 = trunc i32 %1024 to i16
  %1026 = add i16 %1019, %1025
  br label %1032

1027:                                             ; preds = %1014
  %1028 = sub nsw i32 %1020, %1017
  %1029 = ashr i32 %1028, %475
  %1030 = trunc i32 %1029 to i16
  %1031 = sub i16 %1019, %1030
  br label %1032

1032:                                             ; preds = %1027, %1022
  %1033 = phi i16 [ %1026, %1022 ], [ %1031, %1027 ]
  store i16 %1033, i16* %1018, align 2
  %1034 = icmp eq i64 %479, 4
  %1035 = select i1 %1034, i32 0, i32 %1017
  %1036 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 9, i64 %17, i64 %464, i64 4
  %1037 = load i16, i16* %1036, align 2
  %1038 = zext i16 %1037 to i32
  %1039 = icmp ult i32 %1035, %1038
  br i1 %1039, label %1045, label %1040

1040:                                             ; preds = %1032
  %1041 = sub nsw i32 %1035, %1038
  %1042 = ashr i32 %1041, %475
  %1043 = trunc i32 %1042 to i16
  %1044 = add i16 %1037, %1043
  br label %1050

1045:                                             ; preds = %1032
  %1046 = sub nsw i32 %1038, %1035
  %1047 = ashr i32 %1046, %475
  %1048 = trunc i32 %1047 to i16
  %1049 = sub i16 %1037, %1048
  br label %1050

1050:                                             ; preds = %1045, %1040
  %1051 = phi i16 [ %1044, %1040 ], [ %1049, %1045 ]
  store i16 %1051, i16* %1036, align 2
  %1052 = icmp eq i64 %479, 5
  %1053 = select i1 %1052, i32 0, i32 %1035
  %1054 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 9, i64 %17, i64 %464, i64 5
  %1055 = load i16, i16* %1054, align 2
  %1056 = zext i16 %1055 to i32
  %1057 = icmp ult i32 %1053, %1056
  br i1 %1057, label %1063, label %1058

1058:                                             ; preds = %1050
  %1059 = sub nsw i32 %1053, %1056
  %1060 = ashr i32 %1059, %475
  %1061 = trunc i32 %1060 to i16
  %1062 = add i16 %1055, %1061
  br label %1068

1063:                                             ; preds = %1050
  %1064 = sub nsw i32 %1056, %1053
  %1065 = ashr i32 %1064, %475
  %1066 = trunc i32 %1065 to i16
  %1067 = sub i16 %1055, %1066
  br label %1068

1068:                                             ; preds = %1063, %1058
  %1069 = phi i16 [ %1062, %1058 ], [ %1067, %1063 ]
  store i16 %1069, i16* %1054, align 2
  %1070 = icmp eq i64 %479, 6
  %1071 = select i1 %1070, i32 0, i32 %1053
  %1072 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 9, i64 %17, i64 %464, i64 6
  %1073 = load i16, i16* %1072, align 2
  %1074 = zext i16 %1073 to i32
  %1075 = icmp slt i32 %1071, %1074
  br i1 %1075, label %1081, label %1076

1076:                                             ; preds = %1068
  %1077 = sub nsw i32 %1071, %1074
  %1078 = ashr i32 %1077, %475
  %1079 = trunc i32 %1078 to i16
  %1080 = add i16 %1073, %1079
  br label %1086

1081:                                             ; preds = %1068
  %1082 = sub nsw i32 %1074, %1071
  %1083 = ashr i32 %1082, %475
  %1084 = trunc i32 %1083 to i16
  %1085 = sub i16 %1073, %1084
  br label %1086

1086:                                             ; preds = %1081, %1076
  %1087 = phi i16 [ %1080, %1076 ], [ %1085, %1081 ]
  store i16 %1087, i16* %1072, align 2
  %1088 = icmp eq i64 %479, 7
  %1089 = select i1 %1088, i32 0, i32 %1071
  %1090 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 9, i64 %17, i64 %464, i64 7
  %1091 = load i16, i16* %1090, align 2
  %1092 = zext i16 %1091 to i32
  %1093 = icmp slt i32 %1089, %1092
  br i1 %1093, label %1099, label %1094

1094:                                             ; preds = %1086
  %1095 = sub nsw i32 %1089, %1092
  %1096 = ashr i32 %1095, %475
  %1097 = trunc i32 %1096 to i16
  %1098 = add i16 %1091, %1097
  br label %1104

1099:                                             ; preds = %1086
  %1100 = sub nsw i32 %1092, %1089
  %1101 = ashr i32 %1100, %475
  %1102 = trunc i32 %1101 to i16
  %1103 = sub i16 %1091, %1102
  br label %1104

1104:                                             ; preds = %1099, %1094
  %1105 = phi i16 [ %1098, %1094 ], [ %1103, %1099 ]
  store i16 %1105, i16* %1090, align 2
  %1106 = icmp eq i64 %479, 8
  %1107 = select i1 %1106, i32 0, i32 %1089
  %1108 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 9, i64 %17, i64 %464, i64 8
  %1109 = load i16, i16* %1108, align 2
  %1110 = zext i16 %1109 to i32
  %1111 = icmp slt i32 %1107, %1110
  br i1 %1111, label %1117, label %1112

1112:                                             ; preds = %1104
  %1113 = sub nsw i32 %1107, %1110
  %1114 = ashr i32 %1113, %475
  %1115 = trunc i32 %1114 to i16
  %1116 = add i16 %1109, %1115
  br label %1122

1117:                                             ; preds = %1104
  %1118 = sub nsw i32 %1110, %1107
  %1119 = ashr i32 %1118, %475
  %1120 = trunc i32 %1119 to i16
  %1121 = sub i16 %1109, %1120
  br label %1122

1122:                                             ; preds = %1117, %1112
  %1123 = phi i16 [ %1116, %1112 ], [ %1121, %1117 ]
  store i16 %1123, i16* %1108, align 2
  %1124 = icmp eq i64 %479, 9
  %1125 = select i1 %1124, i32 0, i32 %1107
  %1126 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 9, i64 %17, i64 %464, i64 9
  %1127 = load i16, i16* %1126, align 2
  %1128 = zext i16 %1127 to i32
  %1129 = icmp slt i32 %1125, %1128
  br i1 %1129, label %1135, label %1130

1130:                                             ; preds = %1122
  %1131 = sub nsw i32 %1125, %1128
  %1132 = ashr i32 %1131, %475
  %1133 = trunc i32 %1132 to i16
  %1134 = add i16 %1127, %1133
  br label %1140

1135:                                             ; preds = %1122
  %1136 = sub nsw i32 %1128, %1125
  %1137 = ashr i32 %1136, %475
  %1138 = trunc i32 %1137 to i16
  %1139 = sub i16 %1127, %1138
  br label %1140

1140:                                             ; preds = %1135, %1130
  %1141 = phi i16 [ %1134, %1130 ], [ %1139, %1135 ]
  store i16 %1141, i16* %1126, align 2
  %1142 = icmp ult i16 %470, 32
  %1143 = zext i1 %1142 to i16
  %1144 = add i16 %470, %1143
  store i16 %1144, i16* %469, align 2
  br label %503

1145:                                             ; preds = %249
  %1146 = sub nsw i32 %252, %255
  %1147 = ashr i32 %1146, %229
  %1148 = trunc i32 %1147 to i16
  %1149 = add i16 %254, %1148
  br label %1155

1150:                                             ; preds = %249
  %1151 = sub nsw i32 %255, %252
  %1152 = ashr i32 %1151, %229
  %1153 = trunc i32 %1152 to i16
  %1154 = sub i16 %254, %1153
  br label %1155

1155:                                             ; preds = %1150, %1145
  %1156 = phi i16 [ %1149, %1145 ], [ %1154, %1150 ]
  store i16 %1156, i16* %253, align 2
  %1157 = icmp eq i64 %233, 2
  %1158 = select i1 %1157, i32 0, i32 %252
  %1159 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 3, i64 %17, i64 %218, i64 2
  %1160 = load i16, i16* %1159, align 2
  %1161 = zext i16 %1160 to i32
  %1162 = icmp ult i32 %1158, %1161
  br i1 %1162, label %1168, label %1163

1163:                                             ; preds = %1155
  %1164 = sub nsw i32 %1158, %1161
  %1165 = ashr i32 %1164, %229
  %1166 = trunc i32 %1165 to i16
  %1167 = add i16 %1160, %1166
  br label %1173

1168:                                             ; preds = %1155
  %1169 = sub nsw i32 %1161, %1158
  %1170 = ashr i32 %1169, %229
  %1171 = trunc i32 %1170 to i16
  %1172 = sub i16 %1160, %1171
  br label %1173

1173:                                             ; preds = %1168, %1163
  %1174 = phi i16 [ %1167, %1163 ], [ %1172, %1168 ]
  store i16 %1174, i16* %1159, align 2
  %1175 = icmp eq i64 %233, 3
  %1176 = select i1 %1175, i32 0, i32 %1158
  %1177 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 3, i64 %17, i64 %218, i64 3
  %1178 = load i16, i16* %1177, align 2
  %1179 = zext i16 %1178 to i32
  %1180 = icmp ult i32 %1176, %1179
  br i1 %1180, label %1186, label %1181

1181:                                             ; preds = %1173
  %1182 = sub nsw i32 %1176, %1179
  %1183 = ashr i32 %1182, %229
  %1184 = trunc i32 %1183 to i16
  %1185 = add i16 %1178, %1184
  br label %1191

1186:                                             ; preds = %1173
  %1187 = sub nsw i32 %1179, %1176
  %1188 = ashr i32 %1187, %229
  %1189 = trunc i32 %1188 to i16
  %1190 = sub i16 %1178, %1189
  br label %1191

1191:                                             ; preds = %1186, %1181
  %1192 = phi i16 [ %1185, %1181 ], [ %1190, %1186 ]
  store i16 %1192, i16* %1177, align 2
  %1193 = icmp ult i16 %224, 32
  %1194 = zext i1 %1193 to i16
  %1195 = add i16 %224, %1194
  store i16 %1195, i16* %223, align 2
  br label %503

1196:                                             ; preds = %290
  %1197 = sub nsw i32 %293, %296
  %1198 = ashr i32 %1197, %270
  %1199 = trunc i32 %1198 to i16
  %1200 = add i16 %295, %1199
  br label %1206

1201:                                             ; preds = %290
  %1202 = sub nsw i32 %296, %293
  %1203 = ashr i32 %1202, %270
  %1204 = trunc i32 %1203 to i16
  %1205 = sub i16 %295, %1204
  br label %1206

1206:                                             ; preds = %1201, %1196
  %1207 = phi i16 [ %1200, %1196 ], [ %1205, %1201 ]
  store i16 %1207, i16* %294, align 2
  %1208 = icmp eq i64 %274, 2
  %1209 = select i1 %1208, i32 0, i32 %293
  %1210 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 4, i64 %17, i64 %259, i64 2
  %1211 = load i16, i16* %1210, align 2
  %1212 = zext i16 %1211 to i32
  %1213 = icmp ult i32 %1209, %1212
  br i1 %1213, label %1219, label %1214

1214:                                             ; preds = %1206
  %1215 = sub nsw i32 %1209, %1212
  %1216 = ashr i32 %1215, %270
  %1217 = trunc i32 %1216 to i16
  %1218 = add i16 %1211, %1217
  br label %1224

1219:                                             ; preds = %1206
  %1220 = sub nsw i32 %1212, %1209
  %1221 = ashr i32 %1220, %270
  %1222 = trunc i32 %1221 to i16
  %1223 = sub i16 %1211, %1222
  br label %1224

1224:                                             ; preds = %1219, %1214
  %1225 = phi i16 [ %1218, %1214 ], [ %1223, %1219 ]
  store i16 %1225, i16* %1210, align 2
  %1226 = icmp eq i64 %274, 3
  %1227 = select i1 %1226, i32 0, i32 %1209
  %1228 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 4, i64 %17, i64 %259, i64 3
  %1229 = load i16, i16* %1228, align 2
  %1230 = zext i16 %1229 to i32
  %1231 = icmp ult i32 %1227, %1230
  br i1 %1231, label %1237, label %1232

1232:                                             ; preds = %1224
  %1233 = sub nsw i32 %1227, %1230
  %1234 = ashr i32 %1233, %270
  %1235 = trunc i32 %1234 to i16
  %1236 = add i16 %1229, %1235
  br label %1242

1237:                                             ; preds = %1224
  %1238 = sub nsw i32 %1230, %1227
  %1239 = ashr i32 %1238, %270
  %1240 = trunc i32 %1239 to i16
  %1241 = sub i16 %1229, %1240
  br label %1242

1242:                                             ; preds = %1237, %1232
  %1243 = phi i16 [ %1236, %1232 ], [ %1241, %1237 ]
  store i16 %1243, i16* %1228, align 2
  %1244 = icmp eq i64 %274, 4
  %1245 = select i1 %1244, i32 0, i32 %1227
  %1246 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 4, i64 %17, i64 %259, i64 4
  %1247 = load i16, i16* %1246, align 2
  %1248 = zext i16 %1247 to i32
  %1249 = icmp ult i32 %1245, %1248
  br i1 %1249, label %1255, label %1250

1250:                                             ; preds = %1242
  %1251 = sub nsw i32 %1245, %1248
  %1252 = ashr i32 %1251, %270
  %1253 = trunc i32 %1252 to i16
  %1254 = add i16 %1247, %1253
  br label %1260

1255:                                             ; preds = %1242
  %1256 = sub nsw i32 %1248, %1245
  %1257 = ashr i32 %1256, %270
  %1258 = trunc i32 %1257 to i16
  %1259 = sub i16 %1247, %1258
  br label %1260

1260:                                             ; preds = %1255, %1250
  %1261 = phi i16 [ %1254, %1250 ], [ %1259, %1255 ]
  store i16 %1261, i16* %1246, align 2
  %1262 = icmp ult i16 %265, 32
  %1263 = zext i1 %1262 to i16
  %1264 = add i16 %265, %1263
  store i16 %1264, i16* %264, align 2
  br label %503

1265:                                             ; preds = %331
  %1266 = sub nsw i32 %334, %337
  %1267 = ashr i32 %1266, %311
  %1268 = trunc i32 %1267 to i16
  %1269 = add i16 %336, %1268
  br label %1275

1270:                                             ; preds = %331
  %1271 = sub nsw i32 %337, %334
  %1272 = ashr i32 %1271, %311
  %1273 = trunc i32 %1272 to i16
  %1274 = sub i16 %336, %1273
  br label %1275

1275:                                             ; preds = %1270, %1265
  %1276 = phi i16 [ %1269, %1265 ], [ %1274, %1270 ]
  store i16 %1276, i16* %335, align 2
  %1277 = icmp eq i64 %315, 2
  %1278 = select i1 %1277, i32 0, i32 %334
  %1279 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 5, i64 %17, i64 %300, i64 2
  %1280 = load i16, i16* %1279, align 2
  %1281 = zext i16 %1280 to i32
  %1282 = icmp ult i32 %1278, %1281
  br i1 %1282, label %1288, label %1283

1283:                                             ; preds = %1275
  %1284 = sub nsw i32 %1278, %1281
  %1285 = ashr i32 %1284, %311
  %1286 = trunc i32 %1285 to i16
  %1287 = add i16 %1280, %1286
  br label %1293

1288:                                             ; preds = %1275
  %1289 = sub nsw i32 %1281, %1278
  %1290 = ashr i32 %1289, %311
  %1291 = trunc i32 %1290 to i16
  %1292 = sub i16 %1280, %1291
  br label %1293

1293:                                             ; preds = %1288, %1283
  %1294 = phi i16 [ %1287, %1283 ], [ %1292, %1288 ]
  store i16 %1294, i16* %1279, align 2
  %1295 = icmp eq i64 %315, 3
  %1296 = select i1 %1295, i32 0, i32 %1278
  %1297 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 5, i64 %17, i64 %300, i64 3
  %1298 = load i16, i16* %1297, align 2
  %1299 = zext i16 %1298 to i32
  %1300 = icmp ult i32 %1296, %1299
  br i1 %1300, label %1306, label %1301

1301:                                             ; preds = %1293
  %1302 = sub nsw i32 %1296, %1299
  %1303 = ashr i32 %1302, %311
  %1304 = trunc i32 %1303 to i16
  %1305 = add i16 %1298, %1304
  br label %1311

1306:                                             ; preds = %1293
  %1307 = sub nsw i32 %1299, %1296
  %1308 = ashr i32 %1307, %311
  %1309 = trunc i32 %1308 to i16
  %1310 = sub i16 %1298, %1309
  br label %1311

1311:                                             ; preds = %1306, %1301
  %1312 = phi i16 [ %1305, %1301 ], [ %1310, %1306 ]
  store i16 %1312, i16* %1297, align 2
  %1313 = icmp eq i64 %315, 4
  %1314 = select i1 %1313, i32 0, i32 %1296
  %1315 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 5, i64 %17, i64 %300, i64 4
  %1316 = load i16, i16* %1315, align 2
  %1317 = zext i16 %1316 to i32
  %1318 = icmp ult i32 %1314, %1317
  br i1 %1318, label %1324, label %1319

1319:                                             ; preds = %1311
  %1320 = sub nsw i32 %1314, %1317
  %1321 = ashr i32 %1320, %311
  %1322 = trunc i32 %1321 to i16
  %1323 = add i16 %1316, %1322
  br label %1329

1324:                                             ; preds = %1311
  %1325 = sub nsw i32 %1317, %1314
  %1326 = ashr i32 %1325, %311
  %1327 = trunc i32 %1326 to i16
  %1328 = sub i16 %1316, %1327
  br label %1329

1329:                                             ; preds = %1324, %1319
  %1330 = phi i16 [ %1323, %1319 ], [ %1328, %1324 ]
  store i16 %1330, i16* %1315, align 2
  %1331 = icmp eq i64 %315, 5
  %1332 = select i1 %1331, i32 0, i32 %1314
  %1333 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 5, i64 %17, i64 %300, i64 5
  %1334 = load i16, i16* %1333, align 2
  %1335 = zext i16 %1334 to i32
  %1336 = icmp ult i32 %1332, %1335
  br i1 %1336, label %1342, label %1337

1337:                                             ; preds = %1329
  %1338 = sub nsw i32 %1332, %1335
  %1339 = ashr i32 %1338, %311
  %1340 = trunc i32 %1339 to i16
  %1341 = add i16 %1334, %1340
  br label %1347

1342:                                             ; preds = %1329
  %1343 = sub nsw i32 %1335, %1332
  %1344 = ashr i32 %1343, %311
  %1345 = trunc i32 %1344 to i16
  %1346 = sub i16 %1334, %1345
  br label %1347

1347:                                             ; preds = %1342, %1337
  %1348 = phi i16 [ %1341, %1337 ], [ %1346, %1342 ]
  store i16 %1348, i16* %1333, align 2
  %1349 = icmp ult i16 %306, 32
  %1350 = zext i1 %1349 to i16
  %1351 = add i16 %306, %1350
  store i16 %1351, i16* %305, align 2
  br label %503

1352:                                             ; preds = %372
  %1353 = sub nsw i32 %375, %378
  %1354 = ashr i32 %1353, %352
  %1355 = trunc i32 %1354 to i16
  %1356 = add i16 %377, %1355
  br label %1362

1357:                                             ; preds = %372
  %1358 = sub nsw i32 %378, %375
  %1359 = ashr i32 %1358, %352
  %1360 = trunc i32 %1359 to i16
  %1361 = sub i16 %377, %1360
  br label %1362

1362:                                             ; preds = %1357, %1352
  %1363 = phi i16 [ %1356, %1352 ], [ %1361, %1357 ]
  store i16 %1363, i16* %376, align 2
  %1364 = icmp eq i64 %356, 2
  %1365 = select i1 %1364, i32 0, i32 %375
  %1366 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 6, i64 %17, i64 %341, i64 2
  %1367 = load i16, i16* %1366, align 2
  %1368 = zext i16 %1367 to i32
  %1369 = icmp ult i32 %1365, %1368
  br i1 %1369, label %1375, label %1370

1370:                                             ; preds = %1362
  %1371 = sub nsw i32 %1365, %1368
  %1372 = ashr i32 %1371, %352
  %1373 = trunc i32 %1372 to i16
  %1374 = add i16 %1367, %1373
  br label %1380

1375:                                             ; preds = %1362
  %1376 = sub nsw i32 %1368, %1365
  %1377 = ashr i32 %1376, %352
  %1378 = trunc i32 %1377 to i16
  %1379 = sub i16 %1367, %1378
  br label %1380

1380:                                             ; preds = %1375, %1370
  %1381 = phi i16 [ %1374, %1370 ], [ %1379, %1375 ]
  store i16 %1381, i16* %1366, align 2
  %1382 = icmp eq i64 %356, 3
  %1383 = select i1 %1382, i32 0, i32 %1365
  %1384 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 6, i64 %17, i64 %341, i64 3
  %1385 = load i16, i16* %1384, align 2
  %1386 = zext i16 %1385 to i32
  %1387 = icmp ult i32 %1383, %1386
  br i1 %1387, label %1393, label %1388

1388:                                             ; preds = %1380
  %1389 = sub nsw i32 %1383, %1386
  %1390 = ashr i32 %1389, %352
  %1391 = trunc i32 %1390 to i16
  %1392 = add i16 %1385, %1391
  br label %1398

1393:                                             ; preds = %1380
  %1394 = sub nsw i32 %1386, %1383
  %1395 = ashr i32 %1394, %352
  %1396 = trunc i32 %1395 to i16
  %1397 = sub i16 %1385, %1396
  br label %1398

1398:                                             ; preds = %1393, %1388
  %1399 = phi i16 [ %1392, %1388 ], [ %1397, %1393 ]
  store i16 %1399, i16* %1384, align 2
  %1400 = icmp eq i64 %356, 4
  %1401 = select i1 %1400, i32 0, i32 %1383
  %1402 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 6, i64 %17, i64 %341, i64 4
  %1403 = load i16, i16* %1402, align 2
  %1404 = zext i16 %1403 to i32
  %1405 = icmp ult i32 %1401, %1404
  br i1 %1405, label %1411, label %1406

1406:                                             ; preds = %1398
  %1407 = sub nsw i32 %1401, %1404
  %1408 = ashr i32 %1407, %352
  %1409 = trunc i32 %1408 to i16
  %1410 = add i16 %1403, %1409
  br label %1416

1411:                                             ; preds = %1398
  %1412 = sub nsw i32 %1404, %1401
  %1413 = ashr i32 %1412, %352
  %1414 = trunc i32 %1413 to i16
  %1415 = sub i16 %1403, %1414
  br label %1416

1416:                                             ; preds = %1411, %1406
  %1417 = phi i16 [ %1410, %1406 ], [ %1415, %1411 ]
  store i16 %1417, i16* %1402, align 2
  %1418 = icmp eq i64 %356, 5
  %1419 = select i1 %1418, i32 0, i32 %1401
  %1420 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 6, i64 %17, i64 %341, i64 5
  %1421 = load i16, i16* %1420, align 2
  %1422 = zext i16 %1421 to i32
  %1423 = icmp ult i32 %1419, %1422
  br i1 %1423, label %1429, label %1424

1424:                                             ; preds = %1416
  %1425 = sub nsw i32 %1419, %1422
  %1426 = ashr i32 %1425, %352
  %1427 = trunc i32 %1426 to i16
  %1428 = add i16 %1421, %1427
  br label %1434

1429:                                             ; preds = %1416
  %1430 = sub nsw i32 %1422, %1419
  %1431 = ashr i32 %1430, %352
  %1432 = trunc i32 %1431 to i16
  %1433 = sub i16 %1421, %1432
  br label %1434

1434:                                             ; preds = %1429, %1424
  %1435 = phi i16 [ %1428, %1424 ], [ %1433, %1429 ]
  store i16 %1435, i16* %1420, align 2
  %1436 = icmp eq i64 %356, 6
  %1437 = select i1 %1436, i32 0, i32 %1419
  %1438 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 6, i64 %17, i64 %341, i64 6
  %1439 = load i16, i16* %1438, align 2
  %1440 = zext i16 %1439 to i32
  %1441 = icmp slt i32 %1437, %1440
  br i1 %1441, label %1447, label %1442

1442:                                             ; preds = %1434
  %1443 = sub nsw i32 %1437, %1440
  %1444 = ashr i32 %1443, %352
  %1445 = trunc i32 %1444 to i16
  %1446 = add i16 %1439, %1445
  br label %1452

1447:                                             ; preds = %1434
  %1448 = sub nsw i32 %1440, %1437
  %1449 = ashr i32 %1448, %352
  %1450 = trunc i32 %1449 to i16
  %1451 = sub i16 %1439, %1450
  br label %1452

1452:                                             ; preds = %1447, %1442
  %1453 = phi i16 [ %1446, %1442 ], [ %1451, %1447 ]
  store i16 %1453, i16* %1438, align 2
  %1454 = icmp ult i16 %347, 32
  %1455 = zext i1 %1454 to i16
  %1456 = add i16 %347, %1455
  store i16 %1456, i16* %346, align 2
  br label %503

1457:                                             ; preds = %413
  %1458 = sub nsw i32 %416, %419
  %1459 = ashr i32 %1458, %393
  %1460 = trunc i32 %1459 to i16
  %1461 = add i16 %418, %1460
  br label %1467

1462:                                             ; preds = %413
  %1463 = sub nsw i32 %419, %416
  %1464 = ashr i32 %1463, %393
  %1465 = trunc i32 %1464 to i16
  %1466 = sub i16 %418, %1465
  br label %1467

1467:                                             ; preds = %1462, %1457
  %1468 = phi i16 [ %1461, %1457 ], [ %1466, %1462 ]
  store i16 %1468, i16* %417, align 2
  %1469 = icmp eq i64 %397, 2
  %1470 = select i1 %1469, i32 0, i32 %416
  %1471 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 7, i64 %17, i64 %382, i64 2
  %1472 = load i16, i16* %1471, align 2
  %1473 = zext i16 %1472 to i32
  %1474 = icmp ult i32 %1470, %1473
  br i1 %1474, label %1480, label %1475

1475:                                             ; preds = %1467
  %1476 = sub nsw i32 %1470, %1473
  %1477 = ashr i32 %1476, %393
  %1478 = trunc i32 %1477 to i16
  %1479 = add i16 %1472, %1478
  br label %1485

1480:                                             ; preds = %1467
  %1481 = sub nsw i32 %1473, %1470
  %1482 = ashr i32 %1481, %393
  %1483 = trunc i32 %1482 to i16
  %1484 = sub i16 %1472, %1483
  br label %1485

1485:                                             ; preds = %1480, %1475
  %1486 = phi i16 [ %1479, %1475 ], [ %1484, %1480 ]
  store i16 %1486, i16* %1471, align 2
  %1487 = icmp eq i64 %397, 3
  %1488 = select i1 %1487, i32 0, i32 %1470
  %1489 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 7, i64 %17, i64 %382, i64 3
  %1490 = load i16, i16* %1489, align 2
  %1491 = zext i16 %1490 to i32
  %1492 = icmp ult i32 %1488, %1491
  br i1 %1492, label %1498, label %1493

1493:                                             ; preds = %1485
  %1494 = sub nsw i32 %1488, %1491
  %1495 = ashr i32 %1494, %393
  %1496 = trunc i32 %1495 to i16
  %1497 = add i16 %1490, %1496
  br label %1503

1498:                                             ; preds = %1485
  %1499 = sub nsw i32 %1491, %1488
  %1500 = ashr i32 %1499, %393
  %1501 = trunc i32 %1500 to i16
  %1502 = sub i16 %1490, %1501
  br label %1503

1503:                                             ; preds = %1498, %1493
  %1504 = phi i16 [ %1497, %1493 ], [ %1502, %1498 ]
  store i16 %1504, i16* %1489, align 2
  %1505 = icmp eq i64 %397, 4
  %1506 = select i1 %1505, i32 0, i32 %1488
  %1507 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 7, i64 %17, i64 %382, i64 4
  %1508 = load i16, i16* %1507, align 2
  %1509 = zext i16 %1508 to i32
  %1510 = icmp ult i32 %1506, %1509
  br i1 %1510, label %1516, label %1511

1511:                                             ; preds = %1503
  %1512 = sub nsw i32 %1506, %1509
  %1513 = ashr i32 %1512, %393
  %1514 = trunc i32 %1513 to i16
  %1515 = add i16 %1508, %1514
  br label %1521

1516:                                             ; preds = %1503
  %1517 = sub nsw i32 %1509, %1506
  %1518 = ashr i32 %1517, %393
  %1519 = trunc i32 %1518 to i16
  %1520 = sub i16 %1508, %1519
  br label %1521

1521:                                             ; preds = %1516, %1511
  %1522 = phi i16 [ %1515, %1511 ], [ %1520, %1516 ]
  store i16 %1522, i16* %1507, align 2
  %1523 = icmp eq i64 %397, 5
  %1524 = select i1 %1523, i32 0, i32 %1506
  %1525 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 7, i64 %17, i64 %382, i64 5
  %1526 = load i16, i16* %1525, align 2
  %1527 = zext i16 %1526 to i32
  %1528 = icmp ult i32 %1524, %1527
  br i1 %1528, label %1534, label %1529

1529:                                             ; preds = %1521
  %1530 = sub nsw i32 %1524, %1527
  %1531 = ashr i32 %1530, %393
  %1532 = trunc i32 %1531 to i16
  %1533 = add i16 %1526, %1532
  br label %1539

1534:                                             ; preds = %1521
  %1535 = sub nsw i32 %1527, %1524
  %1536 = ashr i32 %1535, %393
  %1537 = trunc i32 %1536 to i16
  %1538 = sub i16 %1526, %1537
  br label %1539

1539:                                             ; preds = %1534, %1529
  %1540 = phi i16 [ %1533, %1529 ], [ %1538, %1534 ]
  store i16 %1540, i16* %1525, align 2
  %1541 = icmp eq i64 %397, 6
  %1542 = select i1 %1541, i32 0, i32 %1524
  %1543 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 7, i64 %17, i64 %382, i64 6
  %1544 = load i16, i16* %1543, align 2
  %1545 = zext i16 %1544 to i32
  %1546 = icmp slt i32 %1542, %1545
  br i1 %1546, label %1552, label %1547

1547:                                             ; preds = %1539
  %1548 = sub nsw i32 %1542, %1545
  %1549 = ashr i32 %1548, %393
  %1550 = trunc i32 %1549 to i16
  %1551 = add i16 %1544, %1550
  br label %1557

1552:                                             ; preds = %1539
  %1553 = sub nsw i32 %1545, %1542
  %1554 = ashr i32 %1553, %393
  %1555 = trunc i32 %1554 to i16
  %1556 = sub i16 %1544, %1555
  br label %1557

1557:                                             ; preds = %1552, %1547
  %1558 = phi i16 [ %1551, %1547 ], [ %1556, %1552 ]
  store i16 %1558, i16* %1543, align 2
  %1559 = icmp eq i64 %397, 7
  %1560 = select i1 %1559, i32 0, i32 %1542
  %1561 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 7, i64 %17, i64 %382, i64 7
  %1562 = load i16, i16* %1561, align 2
  %1563 = zext i16 %1562 to i32
  %1564 = icmp slt i32 %1560, %1563
  br i1 %1564, label %1570, label %1565

1565:                                             ; preds = %1557
  %1566 = sub nsw i32 %1560, %1563
  %1567 = ashr i32 %1566, %393
  %1568 = trunc i32 %1567 to i16
  %1569 = add i16 %1562, %1568
  br label %1575

1570:                                             ; preds = %1557
  %1571 = sub nsw i32 %1563, %1560
  %1572 = ashr i32 %1571, %393
  %1573 = trunc i32 %1572 to i16
  %1574 = sub i16 %1562, %1573
  br label %1575

1575:                                             ; preds = %1570, %1565
  %1576 = phi i16 [ %1569, %1565 ], [ %1574, %1570 ]
  store i16 %1576, i16* %1561, align 2
  %1577 = icmp ult i16 %388, 32
  %1578 = zext i1 %1577 to i16
  %1579 = add i16 %388, %1578
  store i16 %1579, i16* %387, align 2
  br label %503

1580:                                             ; preds = %454
  %1581 = sub nsw i32 %457, %460
  %1582 = ashr i32 %1581, %434
  %1583 = trunc i32 %1582 to i16
  %1584 = add i16 %459, %1583
  br label %1590

1585:                                             ; preds = %454
  %1586 = sub nsw i32 %460, %457
  %1587 = ashr i32 %1586, %434
  %1588 = trunc i32 %1587 to i16
  %1589 = sub i16 %459, %1588
  br label %1590

1590:                                             ; preds = %1585, %1580
  %1591 = phi i16 [ %1584, %1580 ], [ %1589, %1585 ]
  store i16 %1591, i16* %458, align 2
  %1592 = icmp eq i64 %438, 2
  %1593 = select i1 %1592, i32 0, i32 %457
  %1594 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 8, i64 %17, i64 %423, i64 2
  %1595 = load i16, i16* %1594, align 2
  %1596 = zext i16 %1595 to i32
  %1597 = icmp ult i32 %1593, %1596
  br i1 %1597, label %1603, label %1598

1598:                                             ; preds = %1590
  %1599 = sub nsw i32 %1593, %1596
  %1600 = ashr i32 %1599, %434
  %1601 = trunc i32 %1600 to i16
  %1602 = add i16 %1595, %1601
  br label %1608

1603:                                             ; preds = %1590
  %1604 = sub nsw i32 %1596, %1593
  %1605 = ashr i32 %1604, %434
  %1606 = trunc i32 %1605 to i16
  %1607 = sub i16 %1595, %1606
  br label %1608

1608:                                             ; preds = %1603, %1598
  %1609 = phi i16 [ %1602, %1598 ], [ %1607, %1603 ]
  store i16 %1609, i16* %1594, align 2
  %1610 = icmp eq i64 %438, 3
  %1611 = select i1 %1610, i32 0, i32 %1593
  %1612 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 8, i64 %17, i64 %423, i64 3
  %1613 = load i16, i16* %1612, align 2
  %1614 = zext i16 %1613 to i32
  %1615 = icmp ult i32 %1611, %1614
  br i1 %1615, label %1621, label %1616

1616:                                             ; preds = %1608
  %1617 = sub nsw i32 %1611, %1614
  %1618 = ashr i32 %1617, %434
  %1619 = trunc i32 %1618 to i16
  %1620 = add i16 %1613, %1619
  br label %1626

1621:                                             ; preds = %1608
  %1622 = sub nsw i32 %1614, %1611
  %1623 = ashr i32 %1622, %434
  %1624 = trunc i32 %1623 to i16
  %1625 = sub i16 %1613, %1624
  br label %1626

1626:                                             ; preds = %1621, %1616
  %1627 = phi i16 [ %1620, %1616 ], [ %1625, %1621 ]
  store i16 %1627, i16* %1612, align 2
  %1628 = icmp eq i64 %438, 4
  %1629 = select i1 %1628, i32 0, i32 %1611
  %1630 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 8, i64 %17, i64 %423, i64 4
  %1631 = load i16, i16* %1630, align 2
  %1632 = zext i16 %1631 to i32
  %1633 = icmp ult i32 %1629, %1632
  br i1 %1633, label %1639, label %1634

1634:                                             ; preds = %1626
  %1635 = sub nsw i32 %1629, %1632
  %1636 = ashr i32 %1635, %434
  %1637 = trunc i32 %1636 to i16
  %1638 = add i16 %1631, %1637
  br label %1644

1639:                                             ; preds = %1626
  %1640 = sub nsw i32 %1632, %1629
  %1641 = ashr i32 %1640, %434
  %1642 = trunc i32 %1641 to i16
  %1643 = sub i16 %1631, %1642
  br label %1644

1644:                                             ; preds = %1639, %1634
  %1645 = phi i16 [ %1638, %1634 ], [ %1643, %1639 ]
  store i16 %1645, i16* %1630, align 2
  %1646 = icmp eq i64 %438, 5
  %1647 = select i1 %1646, i32 0, i32 %1629
  %1648 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 8, i64 %17, i64 %423, i64 5
  %1649 = load i16, i16* %1648, align 2
  %1650 = zext i16 %1649 to i32
  %1651 = icmp ult i32 %1647, %1650
  br i1 %1651, label %1657, label %1652

1652:                                             ; preds = %1644
  %1653 = sub nsw i32 %1647, %1650
  %1654 = ashr i32 %1653, %434
  %1655 = trunc i32 %1654 to i16
  %1656 = add i16 %1649, %1655
  br label %1662

1657:                                             ; preds = %1644
  %1658 = sub nsw i32 %1650, %1647
  %1659 = ashr i32 %1658, %434
  %1660 = trunc i32 %1659 to i16
  %1661 = sub i16 %1649, %1660
  br label %1662

1662:                                             ; preds = %1657, %1652
  %1663 = phi i16 [ %1656, %1652 ], [ %1661, %1657 ]
  store i16 %1663, i16* %1648, align 2
  %1664 = icmp eq i64 %438, 6
  %1665 = select i1 %1664, i32 0, i32 %1647
  %1666 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 8, i64 %17, i64 %423, i64 6
  %1667 = load i16, i16* %1666, align 2
  %1668 = zext i16 %1667 to i32
  %1669 = icmp slt i32 %1665, %1668
  br i1 %1669, label %1675, label %1670

1670:                                             ; preds = %1662
  %1671 = sub nsw i32 %1665, %1668
  %1672 = ashr i32 %1671, %434
  %1673 = trunc i32 %1672 to i16
  %1674 = add i16 %1667, %1673
  br label %1680

1675:                                             ; preds = %1662
  %1676 = sub nsw i32 %1668, %1665
  %1677 = ashr i32 %1676, %434
  %1678 = trunc i32 %1677 to i16
  %1679 = sub i16 %1667, %1678
  br label %1680

1680:                                             ; preds = %1675, %1670
  %1681 = phi i16 [ %1674, %1670 ], [ %1679, %1675 ]
  store i16 %1681, i16* %1666, align 2
  %1682 = icmp eq i64 %438, 7
  %1683 = select i1 %1682, i32 0, i32 %1665
  %1684 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 8, i64 %17, i64 %423, i64 7
  %1685 = load i16, i16* %1684, align 2
  %1686 = zext i16 %1685 to i32
  %1687 = icmp slt i32 %1683, %1686
  br i1 %1687, label %1693, label %1688

1688:                                             ; preds = %1680
  %1689 = sub nsw i32 %1683, %1686
  %1690 = ashr i32 %1689, %434
  %1691 = trunc i32 %1690 to i16
  %1692 = add i16 %1685, %1691
  br label %1698

1693:                                             ; preds = %1680
  %1694 = sub nsw i32 %1686, %1683
  %1695 = ashr i32 %1694, %434
  %1696 = trunc i32 %1695 to i16
  %1697 = sub i16 %1685, %1696
  br label %1698

1698:                                             ; preds = %1693, %1688
  %1699 = phi i16 [ %1692, %1688 ], [ %1697, %1693 ]
  store i16 %1699, i16* %1684, align 2
  %1700 = icmp eq i64 %438, 8
  %1701 = select i1 %1700, i32 0, i32 %1683
  %1702 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 8, i64 %17, i64 %423, i64 8
  %1703 = load i16, i16* %1702, align 2
  %1704 = zext i16 %1703 to i32
  %1705 = icmp slt i32 %1701, %1704
  br i1 %1705, label %1711, label %1706

1706:                                             ; preds = %1698
  %1707 = sub nsw i32 %1701, %1704
  %1708 = ashr i32 %1707, %434
  %1709 = trunc i32 %1708 to i16
  %1710 = add i16 %1703, %1709
  br label %1716

1711:                                             ; preds = %1698
  %1712 = sub nsw i32 %1704, %1701
  %1713 = ashr i32 %1712, %434
  %1714 = trunc i32 %1713 to i16
  %1715 = sub i16 %1703, %1714
  br label %1716

1716:                                             ; preds = %1711, %1706
  %1717 = phi i16 [ %1710, %1706 ], [ %1715, %1711 ]
  store i16 %1717, i16* %1702, align 2
  %1718 = icmp ult i16 %429, 32
  %1719 = zext i1 %1718 to i16
  %1720 = add i16 %429, %1719
  store i16 %1720, i16* %428, align 2
  br label %503
}

declare void @av1_write_tx_type(%struct.AV1Common*, %struct.macroblockd*, i8 zeroext, i8 zeroext, %struct.aom_writer*) local_unnamed_addr #2

declare void @av1_get_nz_map_contexts_sse2(i8*, i16*, i16 zeroext, i8 zeroext, i8 zeroext, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_write_intra_coeffs_mb(%struct.AV1Common*, %struct.macroblock*, %struct.aom_writer*, i8 zeroext) local_unnamed_addr #0 {
  %5 = alloca [3 x i32], align 4
  %6 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %7 = load %struct.SequenceHeader*, %struct.SequenceHeader** %6, align 16
  %8 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %7, i64 0, i32 27
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  %11 = bitcast [3 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %11, i8 0, i64 12, i1 false)
  %12 = zext i8 %3 to i64
  %13 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 18
  %17 = load i32, i32* %16, align 8
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %19, label %25

19:                                               ; preds = %4
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, 3
  %23 = ashr i32 %17, %22
  %24 = add nsw i32 %23, %15
  br label %25

25:                                               ; preds = %4, %19
  %26 = phi i32 [ %24, %19 ], [ %15, %4 ]
  %27 = ashr i32 %26, 2
  %28 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %12
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 20
  %32 = load i32, i32* %31, align 16
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %34, label %40

34:                                               ; preds = %25
  %35 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 2
  %36 = load i32, i32* %35, align 8
  %37 = add nsw i32 %36, 3
  %38 = ashr i32 %32, %37
  %39 = add nsw i32 %38, %30
  br label %40

40:                                               ; preds = %25, %34
  %41 = phi i32 [ %39, %34 ], [ %30, %25 ]
  %42 = ashr i32 %41, 2
  %43 = icmp slt i32 %27, 16
  %44 = select i1 %43, i32 %27, i32 16
  %45 = icmp slt i32 %42, 16
  %46 = select i1 %45, i32 %42, i32 16
  %47 = icmp sgt i32 %41, 3
  br i1 %47, label %48, label %152

48:                                               ; preds = %40
  %49 = icmp sgt i32 %26, 3
  %50 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 3
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %52 = select i1 %10, i64 3, i64 1
  br label %53

53:                                               ; preds = %48, %150
  %54 = phi i32 [ 0, %48 ], [ %55, %150 ]
  %55 = add nsw i32 %54, %46
  br i1 %49, label %56, label %150

56:                                               ; preds = %53
  %57 = icmp slt i32 %55, %42
  %58 = select i1 %57, i32 %55, i32 %42
  br label %59

59:                                               ; preds = %56, %149
  %60 = phi i32 [ 0, %56 ], [ %61, %149 ]
  %61 = add nsw i32 %60, %44
  %62 = icmp slt i32 %61, %27
  %63 = select i1 %62, i32 %61, i32 %27
  br label %64

64:                                               ; preds = %127, %59
  %65 = phi i64 [ 0, %59 ], [ %128, %127 ]
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %70, label %67

67:                                               ; preds = %64
  %68 = load i8, i8* %50, align 4, !range !10
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %149, label %70

70:                                               ; preds = %67, %64
  %71 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %51, align 8
  %72 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %71, align 8
  %73 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %72, i64 0, i32 28
  %74 = load i16, i16* %73, align 1
  %75 = and i16 %74, 7
  %76 = zext i16 %75 to i64
  %77 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %102

80:                                               ; preds = %70
  br i1 %66, label %81, label %84

81:                                               ; preds = %80
  %82 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %72, i64 0, i32 24
  %83 = load i8, i8* %82, align 1
  br label %102

84:                                               ; preds = %80
  %85 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %72, i64 0, i32 0
  %86 = load i8, i8* %85, align 8
  %87 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %65, i32 1
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %65, i32 2
  %90 = load i32, i32* %89, align 8
  %91 = zext i8 %86 to i64
  %92 = sext i32 %88 to i64
  %93 = sext i32 %90 to i64
  %94 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %91, i64 %92, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i64
  %97 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %96
  %98 = load i8, i8* %97, align 1
  switch i8 %98, label %101 [
    i8 4, label %102
    i8 12, label %102
    i8 11, label %102
    i8 18, label %99
    i8 17, label %100
  ]

99:                                               ; preds = %84
  br label %102

100:                                              ; preds = %84
  br label %102

101:                                              ; preds = %84
  br label %102

102:                                              ; preds = %70, %81, %84, %84, %84, %99, %100, %101
  %103 = phi i8 [ %83, %81 ], [ 0, %70 ], [ %98, %101 ], [ 9, %100 ], [ 10, %99 ], [ 3, %84 ], [ 3, %84 ], [ 3, %84 ]
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %104
  %108 = load i32, i32* %107, align 4
  %109 = mul nsw i32 %108, %106
  %110 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %65, i32 2
  %111 = load i32, i32* %110, align 8
  %112 = shl i32 1, %111
  %113 = ashr i32 %112, 1
  %114 = add nsw i32 %113, %58
  %115 = ashr i32 %114, %111
  %116 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %65, i32 1
  %117 = load i32, i32* %116, align 4
  %118 = shl i32 1, %117
  %119 = ashr i32 %118, 1
  %120 = add nsw i32 %119, %63
  %121 = ashr i32 %120, %117
  %122 = ashr i32 %54, %111
  %123 = icmp slt i32 %122, %115
  br i1 %123, label %124, label %127

124:                                              ; preds = %102
  %125 = getelementptr inbounds [3 x i32], [3 x i32]* %5, i64 0, i64 %65
  %126 = trunc i64 %65 to i32
  br label %130

127:                                              ; preds = %138, %102
  %128 = add nuw nsw i64 %65, 1
  %129 = icmp eq i64 %128, %52
  br i1 %129, label %149, label %64

130:                                              ; preds = %141, %124
  %131 = phi i32 [ %117, %124 ], [ %142, %141 ]
  %132 = phi i32 [ %122, %124 ], [ %139, %141 ]
  %133 = ashr i32 %60, %131
  %134 = icmp slt i32 %133, %121
  br i1 %134, label %135, label %138

135:                                              ; preds = %130
  %136 = load i32, i32* %125, align 4
  br label %143

137:                                              ; preds = %143
  store i32 %146, i32* %125, align 4
  br label %138

138:                                              ; preds = %137, %130
  %139 = add nsw i32 %132, %106
  %140 = icmp slt i32 %139, %115
  br i1 %140, label %141, label %127

141:                                              ; preds = %138
  %142 = load i32, i32* %116, align 4
  br label %130

143:                                              ; preds = %135, %143
  %144 = phi i32 [ %136, %135 ], [ %146, %143 ]
  %145 = phi i32 [ %133, %135 ], [ %147, %143 ]
  tail call void @av1_write_coeffs_txb(%struct.AV1Common* %0, %struct.macroblock* %1, %struct.aom_writer* %2, i32 %132, i32 %145, i32 %126, i32 %144, i8 zeroext %103)
  %146 = add nsw i32 %144, %109
  %147 = add nsw i32 %145, %108
  %148 = icmp slt i32 %147, %121
  br i1 %148, label %143, label %137

149:                                              ; preds = %127, %67
  br i1 %62, label %59, label %150

150:                                              ; preds = %149, %53
  %151 = icmp slt i32 %55, %42
  br i1 %151, label %53, label %152

152:                                              ; preds = %150, %40
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %11) #7
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i8 @av1_get_txb_entropy_context(i32* nocapture readonly, %struct.SCAN_ORDER* nocapture readonly, i32) local_unnamed_addr #5 {
  %4 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %1, i64 0, i32 0
  %5 = load i16*, i16** %4, align 8
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %44, label %7

7:                                                ; preds = %3
  %8 = icmp sgt i32 %2, 0
  br i1 %8, label %9, label %29

9:                                                ; preds = %7
  %10 = sext i32 %2 to i64
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i64 [ %24, %11 ], [ 0, %9 ]
  %13 = phi i32 [ %22, %11 ], [ 0, %9 ]
  %14 = getelementptr inbounds i16, i16* %5, i64 %12
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i64
  %17 = getelementptr inbounds i32, i32* %0, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  %20 = sub nsw i32 0, %18
  %21 = select i1 %19, i32 %20, i32 %18
  %22 = add nuw nsw i32 %21, %13
  %23 = icmp slt i32 %22, 8
  %24 = add nuw nsw i64 %12, 1
  %25 = icmp slt i64 %24, %10
  %26 = and i1 %23, %25
  br i1 %26, label %11, label %27

27:                                               ; preds = %11
  %28 = icmp slt i32 %22, 7
  br i1 %28, label %29, label %31

29:                                               ; preds = %7, %27
  %30 = phi i32 [ %22, %27 ], [ 0, %7 ]
  br label %31

31:                                               ; preds = %27, %29
  %32 = phi i32 [ %30, %29 ], [ 7, %27 ]
  %33 = load i32, i32* %0, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %31
  %36 = or i32 %32, 8
  br label %41

37:                                               ; preds = %31
  %38 = icmp eq i32 %33, 0
  %39 = add nsw i32 %32, 16
  %40 = select i1 %38, i32 %32, i32 %39
  br label %41

41:                                               ; preds = %37, %35
  %42 = phi i32 [ %36, %35 ], [ %40, %37 ]
  %43 = trunc i32 %42 to i8
  br label %44

44:                                               ; preds = %3, %41
  %45 = phi i8 [ %43, %41 ], [ 0, %3 ]
  ret i8 %45
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_update_and_record_txb_context(i32, i32, i32, i32, i8 zeroext, i8 zeroext, i8* nocapture readonly) #0 {
  %8 = alloca [1312 x i8], align 16
  %9 = alloca [4096 x i8], align 16
  %10 = bitcast i8* %6 to %struct.AV1_COMP**
  %11 = load %struct.AV1_COMP*, %struct.AV1_COMP** %10, align 8
  %12 = getelementptr inbounds i8, i8* %6, i64 8
  %13 = bitcast i8* %12 to %struct.ThreadData**
  %14 = load %struct.ThreadData*, %struct.ThreadData** %13, align 8
  %15 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2
  %16 = sext i32 %0 to i64
  %17 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2, i32 4, i64 %16
  %18 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 0, i64 %16, i32 4
  %19 = load i16*, i16** %18, align 8
  %20 = sext i32 %1 to i64
  %21 = getelementptr inbounds i16, i16* %19, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = shl i32 %1, 4
  %25 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 0, i64 %16, i32 2
  %26 = load i32*, i32** %25, align 8
  %27 = sext i32 %24 to i64
  %28 = getelementptr inbounds i32, i32* %26, i64 %27
  %29 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %17, i64 0, i32 0
  %30 = load i8, i8* %29, align 8
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %11, i64 0, i32 8, i32 20, i32 9
  %32 = load i8, i8* %31, align 1, !range !10
  %33 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2, i32 6
  %34 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %33, align 8
  %35 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %34, align 8
  %36 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %35, i64 0, i32 28
  %37 = load i16, i16* %36, align 1
  %38 = and i16 %37, 7
  %39 = zext i16 %38 to i64
  %40 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2, i32 42, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  %43 = zext i8 %5 to i64
  br i1 %42, label %44, label %128

44:                                               ; preds = %7
  %45 = lshr i64 399376, %43
  %46 = and i64 %45, 1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %128

48:                                               ; preds = %44
  %49 = icmp eq i8 %30, 0
  br i1 %49, label %50, label %60

50:                                               ; preds = %48
  %51 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2, i32 15
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2, i32 16
  %54 = load i32, i32* %53, align 16
  %55 = mul nsw i32 %54, %2
  %56 = add nsw i32 %55, %3
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %52, i64 %57
  %59 = load i8, i8* %58, align 1
  br label %128

60:                                               ; preds = %48
  %61 = trunc i16 %37 to i8
  %62 = icmp sgt i8 %61, -1
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %35, i64 0, i32 6, i64 0
  %65 = load i8, i8* %64, align 8
  %66 = icmp slt i8 %65, 1
  br i1 %66, label %67, label %76

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %35, i64 0, i32 3
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [16 x i8], [16 x i8]* @get_uv_mode.uv2y, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i64
  %74 = getelementptr inbounds [13 x i8], [13 x i8]* @intra_mode_to_tx_type._intra_mode_to_tx_type, i64 0, i64 %73
  %75 = load i8, i8* %74, align 1
  br label %96

76:                                               ; preds = %63, %60
  %77 = zext i8 %30 to i64
  %78 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2, i32 4, i64 %77, i32 2
  %79 = load i32, i32* %78, align 8
  %80 = shl i32 %2, %79
  %81 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2, i32 4, i64 %77, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = shl i32 %3, %82
  %84 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2, i32 15
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2, i32 16
  %87 = load i32, i32* %86, align 16
  %88 = mul nsw i32 %87, %80
  %89 = add nsw i32 %88, %83
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %85, i64 %90
  %92 = load i8, i8* %91, align 1
  br i1 %62, label %93, label %101

93:                                               ; preds = %76
  %94 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %35, i64 0, i32 6, i64 0
  %95 = load i8, i8* %94, align 8
  br label %96

96:                                               ; preds = %93, %67
  %97 = phi i8 [ %65, %67 ], [ %95, %93 ]
  %98 = phi i8 [ %75, %67 ], [ %92, %93 ]
  %99 = icmp sgt i8 %97, 0
  %100 = zext i1 %99 to i32
  br label %101

101:                                              ; preds = %96, %76
  %102 = phi i8 [ %92, %76 ], [ %98, %96 ]
  %103 = phi i32 [ 1, %76 ], [ %100, %96 ]
  %104 = lshr i64 99848, %43
  %105 = and i64 %104, 1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %109, label %107

107:                                              ; preds = %101
  %108 = trunc i32 %103 to i8
  br label %120

109:                                              ; preds = %101
  %110 = icmp eq i8 %32, 0
  br i1 %110, label %114, label %111

111:                                              ; preds = %109
  %112 = icmp eq i32 %103, 0
  %113 = select i1 %112, i8 2, i8 1
  br label %120

114:                                              ; preds = %109
  %115 = zext i32 %103 to i64
  %116 = lshr i64 394756, %43
  %117 = and i64 %116, 1
  %118 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @av1_ext_tx_set_lookup, i64 0, i64 %115, i64 %117
  %119 = load i8, i8* %118, align 1
  br label %120

120:                                              ; preds = %114, %111, %107
  %121 = phi i8 [ %108, %107 ], [ %113, %111 ], [ %119, %114 ]
  %122 = zext i8 %121 to i64
  %123 = zext i8 %102 to i64
  %124 = getelementptr inbounds [6 x [16 x i32]], [6 x [16 x i32]]* bitcast (<{ <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32] }>* @av1_ext_tx_used to [6 x [16 x i32]]*), i64 0, i64 %122, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = icmp eq i32 %125, 0
  %127 = select i1 %126, i8 0, i8 %102
  br label %128

128:                                              ; preds = %7, %44, %50, %120
  %129 = phi i8 [ 0, %44 ], [ %59, %50 ], [ %127, %120 ], [ 0, %7 ]
  %130 = zext i8 %129 to i64
  %131 = getelementptr inbounds [19 x [16 x %struct.SCAN_ORDER]], [19 x [16 x %struct.SCAN_ORDER]]* @av1_scan_orders, i64 0, i64 %43, i64 %130
  %132 = getelementptr inbounds i8, i8* %6, i64 21
  %133 = load i8, i8* %132, align 1
  %134 = icmp eq i8 %133, 0
  br i1 %134, label %138, label %135

135:                                              ; preds = %128
  %136 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %131, i64 0, i32 0
  %137 = load i16*, i16** %136, align 16
  br label %1177

138:                                              ; preds = %128
  %139 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2, i32 4, i64 %16, i32 5
  %140 = load i8*, i8** %139, align 8
  %141 = sext i32 %3 to i64
  %142 = getelementptr inbounds i8, i8* %140, i64 %141
  %143 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2, i32 4, i64 %16, i32 6
  %144 = load i8*, i8** %143, align 8
  %145 = sext i32 %2 to i64
  %146 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %43
  %147 = load i32, i32* %146, align 4
  %148 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %43
  %149 = load i32, i32* %148, align 4
  %150 = sext i32 %147 to i64
  br label %151

151:                                              ; preds = %151, %138
  %152 = phi i64 [ %162, %151 ], [ 0, %138 ]
  %153 = phi i32 [ %161, %151 ], [ 0, %138 ]
  %154 = getelementptr inbounds i8, i8* %142, i64 %152
  %155 = load i8, i8* %154, align 1
  %156 = lshr i8 %155, 3
  %157 = zext i8 %156 to i64
  %158 = getelementptr inbounds [3 x i8], [3 x i8]* @get_txb_ctx.signs, i64 0, i64 %157
  %159 = load i8, i8* %158, align 1
  %160 = sext i8 %159 to i32
  %161 = add nsw i32 %153, %160
  %162 = add nuw nsw i64 %152, 1
  %163 = icmp slt i64 %162, %150
  br i1 %163, label %151, label %164

164:                                              ; preds = %151
  %165 = getelementptr inbounds i8, i8* %144, i64 %145
  %166 = sext i32 %149 to i64
  br label %167

167:                                              ; preds = %167, %164
  %168 = phi i64 [ 0, %164 ], [ %178, %167 ]
  %169 = phi i32 [ %161, %164 ], [ %177, %167 ]
  %170 = getelementptr inbounds i8, i8* %165, i64 %168
  %171 = load i8, i8* %170, align 1
  %172 = lshr i8 %171, 3
  %173 = zext i8 %172 to i64
  %174 = getelementptr inbounds [3 x i8], [3 x i8]* @get_txb_ctx.signs, i64 0, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = sext i8 %175 to i32
  %177 = add nsw i32 %169, %176
  %178 = add nuw nsw i64 %168, 1
  %179 = icmp slt i64 %178, %166
  br i1 %179, label %167, label %180

180:                                              ; preds = %167
  %181 = add nsw i32 %177, 32
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds [65 x i8], [65 x i8]* @get_txb_ctx.dc_sign_contexts, i64 0, i64 %182
  %184 = load i8, i8* %183, align 1
  %185 = icmp eq i32 %0, 0
  br i1 %185, label %186, label %368

186:                                              ; preds = %180
  %187 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_to_bsize, i64 0, i64 %43
  %188 = load i8, i8* %187, align 1
  %189 = icmp eq i8 %188, %4
  br i1 %189, label %537, label %190

190:                                              ; preds = %186
  %191 = icmp sgt i64 %150, 1
  %192 = select i1 %191, i64 %150, i64 1
  %193 = icmp ult i64 %192, 8
  br i1 %193, label %260, label %194

194:                                              ; preds = %190
  %195 = and i64 %192, 9223372036854775800
  %196 = add nsw i64 %195, -8
  %197 = lshr exact i64 %196, 3
  %198 = add nuw nsw i64 %197, 1
  %199 = and i64 %198, 1
  %200 = icmp eq i64 %196, 0
  br i1 %200, label %232, label %201

201:                                              ; preds = %194
  %202 = sub nuw nsw i64 %198, %199
  br label %203

203:                                              ; preds = %203, %201
  %204 = phi i64 [ 0, %201 ], [ %229, %203 ]
  %205 = phi <4 x i32> [ zeroinitializer, %201 ], [ %227, %203 ]
  %206 = phi <4 x i32> [ zeroinitializer, %201 ], [ %228, %203 ]
  %207 = phi i64 [ %202, %201 ], [ %230, %203 ]
  %208 = getelementptr inbounds i8, i8* %142, i64 %204
  %209 = bitcast i8* %208 to <4 x i8>*
  %210 = load <4 x i8>, <4 x i8>* %209, align 1
  %211 = getelementptr inbounds i8, i8* %208, i64 4
  %212 = bitcast i8* %211 to <4 x i8>*
  %213 = load <4 x i8>, <4 x i8>* %212, align 1
  %214 = sext <4 x i8> %210 to <4 x i32>
  %215 = sext <4 x i8> %213 to <4 x i32>
  %216 = or <4 x i32> %205, %214
  %217 = or <4 x i32> %206, %215
  %218 = or i64 %204, 8
  %219 = getelementptr inbounds i8, i8* %142, i64 %218
  %220 = bitcast i8* %219 to <4 x i8>*
  %221 = load <4 x i8>, <4 x i8>* %220, align 1
  %222 = getelementptr inbounds i8, i8* %219, i64 4
  %223 = bitcast i8* %222 to <4 x i8>*
  %224 = load <4 x i8>, <4 x i8>* %223, align 1
  %225 = sext <4 x i8> %221 to <4 x i32>
  %226 = sext <4 x i8> %224 to <4 x i32>
  %227 = or <4 x i32> %216, %225
  %228 = or <4 x i32> %217, %226
  %229 = add i64 %204, 16
  %230 = add i64 %207, -2
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %203, !llvm.loop !11

232:                                              ; preds = %203, %194
  %233 = phi <4 x i32> [ undef, %194 ], [ %227, %203 ]
  %234 = phi <4 x i32> [ undef, %194 ], [ %228, %203 ]
  %235 = phi i64 [ 0, %194 ], [ %229, %203 ]
  %236 = phi <4 x i32> [ zeroinitializer, %194 ], [ %227, %203 ]
  %237 = phi <4 x i32> [ zeroinitializer, %194 ], [ %228, %203 ]
  %238 = icmp eq i64 %199, 0
  br i1 %238, label %250, label %239

239:                                              ; preds = %232
  %240 = getelementptr inbounds i8, i8* %142, i64 %235
  %241 = getelementptr inbounds i8, i8* %240, i64 4
  %242 = bitcast i8* %241 to <4 x i8>*
  %243 = load <4 x i8>, <4 x i8>* %242, align 1
  %244 = sext <4 x i8> %243 to <4 x i32>
  %245 = or <4 x i32> %237, %244
  %246 = bitcast i8* %240 to <4 x i8>*
  %247 = load <4 x i8>, <4 x i8>* %246, align 1
  %248 = sext <4 x i8> %247 to <4 x i32>
  %249 = or <4 x i32> %236, %248
  br label %250

250:                                              ; preds = %232, %239
  %251 = phi <4 x i32> [ %233, %232 ], [ %249, %239 ]
  %252 = phi <4 x i32> [ %234, %232 ], [ %245, %239 ]
  %253 = or <4 x i32> %252, %251
  %254 = shufflevector <4 x i32> %253, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %255 = or <4 x i32> %253, %254
  %256 = shufflevector <4 x i32> %255, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %257 = or <4 x i32> %255, %256
  %258 = extractelement <4 x i32> %257, i32 0
  %259 = icmp eq i64 %192, %195
  br i1 %259, label %272, label %260

260:                                              ; preds = %250, %190
  %261 = phi i64 [ 0, %190 ], [ %195, %250 ]
  %262 = phi i32 [ 0, %190 ], [ %258, %250 ]
  br label %263

263:                                              ; preds = %260, %263
  %264 = phi i64 [ %270, %263 ], [ %261, %260 ]
  %265 = phi i32 [ %269, %263 ], [ %262, %260 ]
  %266 = getelementptr inbounds i8, i8* %142, i64 %264
  %267 = load i8, i8* %266, align 1
  %268 = sext i8 %267 to i32
  %269 = or i32 %265, %268
  %270 = add nuw nsw i64 %264, 1
  %271 = icmp slt i64 %270, %150
  br i1 %271, label %263, label %272, !llvm.loop !12

272:                                              ; preds = %263, %250
  %273 = phi i32 [ %258, %250 ], [ %269, %263 ]
  %274 = and i32 %273, 7
  %275 = icmp sgt i64 %166, 1
  %276 = select i1 %275, i64 %166, i64 1
  %277 = icmp ult i64 %276, 8
  br i1 %277, label %344, label %278

278:                                              ; preds = %272
  %279 = and i64 %276, 9223372036854775800
  %280 = add nsw i64 %279, -8
  %281 = lshr exact i64 %280, 3
  %282 = add nuw nsw i64 %281, 1
  %283 = and i64 %282, 1
  %284 = icmp eq i64 %280, 0
  br i1 %284, label %316, label %285

285:                                              ; preds = %278
  %286 = sub nuw nsw i64 %282, %283
  br label %287

287:                                              ; preds = %287, %285
  %288 = phi i64 [ 0, %285 ], [ %313, %287 ]
  %289 = phi <4 x i32> [ zeroinitializer, %285 ], [ %311, %287 ]
  %290 = phi <4 x i32> [ zeroinitializer, %285 ], [ %312, %287 ]
  %291 = phi i64 [ %286, %285 ], [ %314, %287 ]
  %292 = getelementptr inbounds i8, i8* %165, i64 %288
  %293 = bitcast i8* %292 to <4 x i8>*
  %294 = load <4 x i8>, <4 x i8>* %293, align 1
  %295 = getelementptr inbounds i8, i8* %292, i64 4
  %296 = bitcast i8* %295 to <4 x i8>*
  %297 = load <4 x i8>, <4 x i8>* %296, align 1
  %298 = sext <4 x i8> %294 to <4 x i32>
  %299 = sext <4 x i8> %297 to <4 x i32>
  %300 = or <4 x i32> %289, %298
  %301 = or <4 x i32> %290, %299
  %302 = or i64 %288, 8
  %303 = getelementptr inbounds i8, i8* %165, i64 %302
  %304 = bitcast i8* %303 to <4 x i8>*
  %305 = load <4 x i8>, <4 x i8>* %304, align 1
  %306 = getelementptr inbounds i8, i8* %303, i64 4
  %307 = bitcast i8* %306 to <4 x i8>*
  %308 = load <4 x i8>, <4 x i8>* %307, align 1
  %309 = sext <4 x i8> %305 to <4 x i32>
  %310 = sext <4 x i8> %308 to <4 x i32>
  %311 = or <4 x i32> %300, %309
  %312 = or <4 x i32> %301, %310
  %313 = add i64 %288, 16
  %314 = add i64 %291, -2
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %316, label %287, !llvm.loop !14

316:                                              ; preds = %287, %278
  %317 = phi <4 x i32> [ undef, %278 ], [ %311, %287 ]
  %318 = phi <4 x i32> [ undef, %278 ], [ %312, %287 ]
  %319 = phi i64 [ 0, %278 ], [ %313, %287 ]
  %320 = phi <4 x i32> [ zeroinitializer, %278 ], [ %311, %287 ]
  %321 = phi <4 x i32> [ zeroinitializer, %278 ], [ %312, %287 ]
  %322 = icmp eq i64 %283, 0
  br i1 %322, label %334, label %323

323:                                              ; preds = %316
  %324 = getelementptr inbounds i8, i8* %165, i64 %319
  %325 = getelementptr inbounds i8, i8* %324, i64 4
  %326 = bitcast i8* %325 to <4 x i8>*
  %327 = load <4 x i8>, <4 x i8>* %326, align 1
  %328 = sext <4 x i8> %327 to <4 x i32>
  %329 = or <4 x i32> %321, %328
  %330 = bitcast i8* %324 to <4 x i8>*
  %331 = load <4 x i8>, <4 x i8>* %330, align 1
  %332 = sext <4 x i8> %331 to <4 x i32>
  %333 = or <4 x i32> %320, %332
  br label %334

334:                                              ; preds = %316, %323
  %335 = phi <4 x i32> [ %317, %316 ], [ %333, %323 ]
  %336 = phi <4 x i32> [ %318, %316 ], [ %329, %323 ]
  %337 = or <4 x i32> %336, %335
  %338 = shufflevector <4 x i32> %337, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %339 = or <4 x i32> %337, %338
  %340 = shufflevector <4 x i32> %339, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %341 = or <4 x i32> %339, %340
  %342 = extractelement <4 x i32> %341, i32 0
  %343 = icmp eq i64 %276, %279
  br i1 %343, label %356, label %344

344:                                              ; preds = %334, %272
  %345 = phi i64 [ 0, %272 ], [ %279, %334 ]
  %346 = phi i32 [ 0, %272 ], [ %342, %334 ]
  br label %347

347:                                              ; preds = %344, %347
  %348 = phi i64 [ %354, %347 ], [ %345, %344 ]
  %349 = phi i32 [ %353, %347 ], [ %346, %344 ]
  %350 = getelementptr inbounds i8, i8* %165, i64 %348
  %351 = load i8, i8* %350, align 1
  %352 = sext i8 %351 to i32
  %353 = or i32 %349, %352
  %354 = add nuw nsw i64 %348, 1
  %355 = icmp slt i64 %354, %166
  br i1 %355, label %347, label %356, !llvm.loop !15

356:                                              ; preds = %347, %334
  %357 = phi i32 [ %342, %334 ], [ %353, %347 ]
  %358 = icmp ult i32 %274, 4
  %359 = select i1 %358, i32 %274, i32 4
  %360 = and i32 %357, 7
  %361 = icmp ult i32 %360, 4
  %362 = select i1 %361, i32 %360, i32 4
  %363 = zext i32 %359 to i64
  %364 = zext i32 %362 to i64
  %365 = getelementptr inbounds [5 x [5 x i8]], [5 x [5 x i8]]* @get_txb_ctx.skip_contexts, i64 0, i64 %363, i64 %364
  %366 = load i8, i8* %365, align 1
  %367 = zext i8 %366 to i32
  br label %537

368:                                              ; preds = %180
  switch i8 %5, label %520 [
    i8 0, label %369
    i8 5, label %374
    i8 6, label %380
    i8 7, label %386
    i8 8, label %393
    i8 9, label %400
    i8 10, label %407
    i8 1, label %414
    i8 2, label %421
    i8 3, label %428
    i8 4, label %435
    i8 11, label %450
    i8 12, label %461
    i8 13, label %472
    i8 14, label %478
    i8 15, label %484
    i8 16, label %491
    i8 17, label %498
    i8 18, label %509
  ]

369:                                              ; preds = %368
  %370 = load i8, i8* %142, align 1
  %371 = icmp ne i8 %370, 0
  %372 = load i8, i8* %165, align 1
  %373 = icmp ne i8 %372, 0
  br label %520

374:                                              ; preds = %368
  %375 = load i8, i8* %142, align 1
  %376 = icmp ne i8 %375, 0
  %377 = bitcast i8* %165 to i16*
  %378 = load i16, i16* %377, align 2
  %379 = icmp ne i16 %378, 0
  br label %520

380:                                              ; preds = %368
  %381 = bitcast i8* %142 to i16*
  %382 = load i16, i16* %381, align 2
  %383 = icmp ne i16 %382, 0
  %384 = load i8, i8* %165, align 1
  %385 = icmp ne i8 %384, 0
  br label %520

386:                                              ; preds = %368
  %387 = bitcast i8* %142 to i16*
  %388 = load i16, i16* %387, align 2
  %389 = icmp ne i16 %388, 0
  %390 = bitcast i8* %165 to i32*
  %391 = load i32, i32* %390, align 4
  %392 = icmp ne i32 %391, 0
  br label %520

393:                                              ; preds = %368
  %394 = bitcast i8* %142 to i32*
  %395 = load i32, i32* %394, align 4
  %396 = icmp ne i32 %395, 0
  %397 = bitcast i8* %165 to i16*
  %398 = load i16, i16* %397, align 2
  %399 = icmp ne i16 %398, 0
  br label %520

400:                                              ; preds = %368
  %401 = bitcast i8* %142 to i32*
  %402 = load i32, i32* %401, align 4
  %403 = icmp ne i32 %402, 0
  %404 = bitcast i8* %165 to i64*
  %405 = load i64, i64* %404, align 8
  %406 = icmp ne i64 %405, 0
  br label %520

407:                                              ; preds = %368
  %408 = bitcast i8* %142 to i64*
  %409 = load i64, i64* %408, align 8
  %410 = icmp ne i64 %409, 0
  %411 = bitcast i8* %165 to i32*
  %412 = load i32, i32* %411, align 4
  %413 = icmp ne i32 %412, 0
  br label %520

414:                                              ; preds = %368
  %415 = bitcast i8* %142 to i16*
  %416 = load i16, i16* %415, align 2
  %417 = icmp ne i16 %416, 0
  %418 = bitcast i8* %165 to i16*
  %419 = load i16, i16* %418, align 2
  %420 = icmp ne i16 %419, 0
  br label %520

421:                                              ; preds = %368
  %422 = bitcast i8* %142 to i32*
  %423 = load i32, i32* %422, align 4
  %424 = icmp ne i32 %423, 0
  %425 = bitcast i8* %165 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = icmp ne i32 %426, 0
  br label %520

428:                                              ; preds = %368
  %429 = bitcast i8* %142 to i64*
  %430 = load i64, i64* %429, align 8
  %431 = icmp ne i64 %430, 0
  %432 = bitcast i8* %165 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = icmp ne i64 %433, 0
  br label %520

435:                                              ; preds = %368
  %436 = bitcast i8* %142 to i64*
  %437 = load i64, i64* %436, align 8
  %438 = getelementptr inbounds i8, i8* %142, i64 8
  %439 = bitcast i8* %438 to i64*
  %440 = load i64, i64* %439, align 8
  %441 = or i64 %440, %437
  %442 = icmp ne i64 %441, 0
  %443 = bitcast i8* %165 to i64*
  %444 = load i64, i64* %443, align 8
  %445 = getelementptr inbounds i8, i8* %165, i64 8
  %446 = bitcast i8* %445 to i64*
  %447 = load i64, i64* %446, align 8
  %448 = or i64 %447, %444
  %449 = icmp ne i64 %448, 0
  br label %520

450:                                              ; preds = %368
  %451 = bitcast i8* %142 to i64*
  %452 = load i64, i64* %451, align 8
  %453 = icmp ne i64 %452, 0
  %454 = bitcast i8* %165 to i64*
  %455 = load i64, i64* %454, align 8
  %456 = getelementptr inbounds i8, i8* %165, i64 8
  %457 = bitcast i8* %456 to i64*
  %458 = load i64, i64* %457, align 8
  %459 = or i64 %458, %455
  %460 = icmp ne i64 %459, 0
  br label %520

461:                                              ; preds = %368
  %462 = bitcast i8* %142 to i64*
  %463 = load i64, i64* %462, align 8
  %464 = getelementptr inbounds i8, i8* %142, i64 8
  %465 = bitcast i8* %464 to i64*
  %466 = load i64, i64* %465, align 8
  %467 = or i64 %466, %463
  %468 = icmp ne i64 %467, 0
  %469 = bitcast i8* %165 to i64*
  %470 = load i64, i64* %469, align 8
  %471 = icmp ne i64 %470, 0
  br label %520

472:                                              ; preds = %368
  %473 = load i8, i8* %142, align 1
  %474 = icmp ne i8 %473, 0
  %475 = bitcast i8* %165 to i32*
  %476 = load i32, i32* %475, align 4
  %477 = icmp ne i32 %476, 0
  br label %520

478:                                              ; preds = %368
  %479 = bitcast i8* %142 to i32*
  %480 = load i32, i32* %479, align 4
  %481 = icmp ne i32 %480, 0
  %482 = load i8, i8* %165, align 1
  %483 = icmp ne i8 %482, 0
  br label %520

484:                                              ; preds = %368
  %485 = bitcast i8* %142 to i16*
  %486 = load i16, i16* %485, align 2
  %487 = icmp ne i16 %486, 0
  %488 = bitcast i8* %165 to i64*
  %489 = load i64, i64* %488, align 8
  %490 = icmp ne i64 %489, 0
  br label %520

491:                                              ; preds = %368
  %492 = bitcast i8* %142 to i64*
  %493 = load i64, i64* %492, align 8
  %494 = icmp ne i64 %493, 0
  %495 = bitcast i8* %165 to i16*
  %496 = load i16, i16* %495, align 2
  %497 = icmp ne i16 %496, 0
  br label %520

498:                                              ; preds = %368
  %499 = bitcast i8* %142 to i32*
  %500 = load i32, i32* %499, align 4
  %501 = icmp ne i32 %500, 0
  %502 = bitcast i8* %165 to i64*
  %503 = load i64, i64* %502, align 8
  %504 = getelementptr inbounds i8, i8* %165, i64 8
  %505 = bitcast i8* %504 to i64*
  %506 = load i64, i64* %505, align 8
  %507 = or i64 %506, %503
  %508 = icmp ne i64 %507, 0
  br label %520

509:                                              ; preds = %368
  %510 = bitcast i8* %142 to i64*
  %511 = load i64, i64* %510, align 8
  %512 = getelementptr inbounds i8, i8* %142, i64 8
  %513 = bitcast i8* %512 to i64*
  %514 = load i64, i64* %513, align 8
  %515 = or i64 %514, %511
  %516 = icmp ne i64 %515, 0
  %517 = bitcast i8* %165 to i32*
  %518 = load i32, i32* %517, align 4
  %519 = icmp ne i32 %518, 0
  br label %520

520:                                              ; preds = %509, %498, %491, %484, %478, %472, %461, %450, %435, %428, %421, %414, %407, %400, %393, %386, %380, %374, %369, %368
  %521 = phi i1 [ false, %368 ], [ %516, %509 ], [ %501, %498 ], [ %494, %491 ], [ %487, %484 ], [ %481, %478 ], [ %474, %472 ], [ %468, %461 ], [ %453, %450 ], [ %442, %435 ], [ %431, %428 ], [ %424, %421 ], [ %417, %414 ], [ %410, %407 ], [ %403, %400 ], [ %396, %393 ], [ %389, %386 ], [ %383, %380 ], [ %376, %374 ], [ %371, %369 ]
  %522 = phi i1 [ false, %368 ], [ %519, %509 ], [ %508, %498 ], [ %497, %491 ], [ %490, %484 ], [ %483, %478 ], [ %477, %472 ], [ %471, %461 ], [ %460, %450 ], [ %449, %435 ], [ %434, %428 ], [ %427, %421 ], [ %420, %414 ], [ %413, %407 ], [ %406, %400 ], [ %399, %393 ], [ %392, %386 ], [ %385, %380 ], [ %379, %374 ], [ %373, %369 ]
  %523 = zext i1 %521 to i32
  %524 = zext i1 %522 to i32
  %525 = add nuw nsw i32 %524, %523
  %526 = zext i8 %4 to i64
  %527 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %526
  %528 = load i8, i8* %527, align 1
  %529 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_to_bsize, i64 0, i64 %43
  %530 = load i8, i8* %529, align 1
  %531 = zext i8 %530 to i64
  %532 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %531
  %533 = load i8, i8* %532, align 1
  %534 = icmp ugt i8 %528, %533
  %535 = select i1 %534, i32 10, i32 7
  %536 = add nuw nsw i32 %525, %535
  br label %537

537:                                              ; preds = %186, %356, %520
  %538 = phi i32 [ %367, %356 ], [ %536, %520 ], [ 0, %186 ]
  switch i8 %5, label %539 [
    i8 4, label %540
    i8 12, label %540
    i8 11, label %540
    i8 18, label %549
    i8 17, label %552
  ]

539:                                              ; preds = %537
  br label %540

540:                                              ; preds = %537, %537, %537, %539
  %541 = phi i64 [ %43, %539 ], [ 3, %537 ], [ 3, %537 ], [ 3, %537 ]
  %542 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_log2, i64 0, i64 %541
  %543 = load i32, i32* %542, align 4
  switch i8 %5, label %544 [
    i8 4, label %545
    i8 12, label %545
    i8 11, label %545
    i8 18, label %549
    i8 17, label %552
  ]

544:                                              ; preds = %540
  br label %545

545:                                              ; preds = %540, %540, %540, %544
  %546 = phi i64 [ %43, %544 ], [ 3, %540 ], [ 3, %540 ], [ 3, %540 ]
  %547 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %546
  %548 = load i32, i32* %547, align 4
  switch i8 %5, label %555 [
    i8 4, label %556
    i8 12, label %556
    i8 11, label %556
    i8 18, label %549
    i8 17, label %552
  ]

549:                                              ; preds = %537, %540, %545
  %550 = phi i32 [ %548, %545 ], [ 32, %540 ], [ 32, %537 ]
  %551 = phi i32 [ %543, %545 ], [ %543, %540 ], [ 5, %537 ]
  br label %556

552:                                              ; preds = %537, %540, %545
  %553 = phi i32 [ %548, %545 ], [ 16, %540 ], [ 16, %537 ]
  %554 = phi i32 [ %543, %545 ], [ %543, %540 ], [ 4, %537 ]
  br label %556

555:                                              ; preds = %545
  br label %556

556:                                              ; preds = %545, %545, %545, %549, %552, %555
  %557 = phi i32 [ %548, %555 ], [ %553, %552 ], [ %550, %549 ], [ %548, %545 ], [ %548, %545 ], [ %548, %545 ]
  %558 = phi i32 [ %543, %555 ], [ %554, %552 ], [ %551, %549 ], [ %543, %545 ], [ %543, %545 ], [ %543, %545 ]
  %559 = phi i64 [ %43, %555 ], [ 9, %552 ], [ 10, %549 ], [ 3, %545 ], [ 3, %545 ], [ 3, %545 ]
  %560 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %559
  %561 = load i32, i32* %560, align 4
  %562 = getelementptr inbounds i8, i8* %6, i64 20
  %563 = load i8, i8* %562, align 4
  %564 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_map, i64 0, i64 %43
  %565 = load i8, i8* %564, align 1
  %566 = zext i8 %565 to i32
  %567 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %43
  %568 = load i8, i8* %567, align 1
  %569 = zext i8 %568 to i32
  %570 = add nuw nsw i32 %566, 1
  %571 = add nuw nsw i32 %570, %569
  %572 = lshr i32 %571, 1
  %573 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2, i32 39
  %574 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %575 = icmp ne i8 %563, 0
  br i1 %575, label %576, label %608

576:                                              ; preds = %556
  %577 = and i32 %572, 255
  %578 = zext i32 %577 to i64
  %579 = sext i32 %538 to i64
  %580 = icmp eq i16 %22, 0
  %581 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 0, i64 %578, i64 %579, i64 2
  %582 = load i16, i16* %581, align 2
  %583 = icmp ugt i16 %582, 15
  %584 = select i1 %583, i32 4, i32 3
  %585 = icmp ugt i16 %582, 31
  %586 = select i1 %585, i32 2, i32 1
  %587 = add nuw nsw i32 %586, %584
  %588 = select i1 %580, i32 32768, i32 0
  %589 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 0, i64 %578, i64 %579, i64 0
  %590 = load i16, i16* %589, align 2
  %591 = zext i16 %590 to i32
  %592 = icmp ult i32 %588, %591
  br i1 %592, label %593, label %598

593:                                              ; preds = %576
  %594 = sub nsw i32 %591, %588
  %595 = ashr i32 %594, %587
  %596 = trunc i32 %595 to i16
  %597 = sub i16 %590, %596
  br label %603

598:                                              ; preds = %576
  %599 = sub nsw i32 %588, %591
  %600 = ashr i32 %599, %587
  %601 = trunc i32 %600 to i16
  %602 = add i16 %590, %601
  br label %603

603:                                              ; preds = %598, %593
  %604 = phi i16 [ %602, %598 ], [ %597, %593 ]
  store i16 %604, i16* %589, align 2
  %605 = icmp ult i16 %582, 32
  %606 = zext i1 %605 to i16
  %607 = add i16 %582, %606
  store i16 %607, i16* %581, align 2
  br label %608

608:                                              ; preds = %603, %556
  %609 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 7
  %610 = load %struct.CB_COEFF_BUFFER*, %struct.CB_COEFF_BUFFER** %609, align 16
  %611 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 4
  %612 = load %struct.MB_MODE_INFO_EXT_FRAME*, %struct.MB_MODE_INFO_EXT_FRAME** %611, align 8
  %613 = zext i8 %30 to i64
  %614 = getelementptr inbounds %struct.MB_MODE_INFO_EXT_FRAME, %struct.MB_MODE_INFO_EXT_FRAME* %612, i64 0, i32 5, i64 %613
  %615 = load i16, i16* %614, align 2
  %616 = lshr i16 %615, 4
  %617 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %610, i64 0, i32 1, i64 %16
  %618 = load i16*, i16** %617, align 8
  %619 = zext i16 %616 to i64
  %620 = getelementptr inbounds i16, i16* %618, i64 %619
  %621 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %610, i64 0, i32 2, i64 %16
  %622 = load i8*, i8** %621, align 8
  %623 = getelementptr inbounds i8, i8* %622, i64 %619
  %624 = trunc i32 %538 to i8
  %625 = getelementptr inbounds i8, i8* %623, i64 %20
  store i8 %624, i8* %625, align 1
  %626 = getelementptr inbounds i16, i16* %620, i64 %20
  store i16 %22, i16* %626, align 2
  %627 = icmp eq i16 %22, 0
  br i1 %627, label %1176, label %628

628:                                              ; preds = %608
  %629 = load i16, i16* %36, align 1
  %630 = and i16 %629, 7
  switch i8 %5, label %632 [
    i8 4, label %635
    i8 12, label %635
    i8 11, label %635
    i8 17, label %631
    i8 18, label %631
  ]

631:                                              ; preds = %628, %628
  br label %635

632:                                              ; preds = %628
  %633 = getelementptr inbounds [20 x i32], [20 x i32]* @tx_size_2d, i64 0, i64 %43
  %634 = load i32, i32* %633, align 4
  br label %635

635:                                              ; preds = %632, %631, %628, %628, %628
  %636 = phi i32 [ 512, %631 ], [ %634, %632 ], [ 1024, %628 ], [ 1024, %628 ], [ 1024, %628 ]
  %637 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %11, i64 0, i32 8, i32 23, i32 0
  %638 = load i8, i8* %637, align 4
  %639 = icmp eq i8 %638, 0
  br i1 %639, label %646, label %640

640:                                              ; preds = %635
  %641 = zext i16 %630 to i64
  %642 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %11, i64 0, i32 8, i32 23, i32 5, i64 %641
  %643 = load i32, i32* %642, align 4
  %644 = and i32 %643, 64
  %645 = icmp eq i32 %644, 0
  br i1 %645, label %646, label %647

646:                                              ; preds = %640, %635
  br label %647

647:                                              ; preds = %640, %646
  %648 = phi i32 [ %636, %646 ], [ 0, %640 ]
  %649 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %610, i64 0, i32 0, i64 %16
  %650 = load i32*, i32** %649, align 8
  %651 = load %struct.MB_MODE_INFO_EXT_FRAME*, %struct.MB_MODE_INFO_EXT_FRAME** %611, align 8
  %652 = getelementptr inbounds %struct.MB_MODE_INFO_EXT_FRAME, %struct.MB_MODE_INFO_EXT_FRAME* %651, i64 0, i32 5, i64 %613
  %653 = load i16, i16* %652, align 2
  %654 = zext i16 %653 to i64
  %655 = getelementptr inbounds i32, i32* %650, i64 %654
  %656 = getelementptr inbounds i32, i32* %655, i64 %27
  %657 = bitcast i32* %656 to i8*
  %658 = bitcast i32* %28 to i8*
  %659 = sext i32 %648 to i64
  %660 = shl nsw i64 %659, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %657, i8* align 4 %658, i64 %660, i1 false)
  %661 = getelementptr inbounds [1312 x i8], [1312 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1312, i8* nonnull %661) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %661, i8 -86, i64 1312, i1 false)
  %662 = load void (i32*, i32, i32, i8*)*, void (i32*, i32, i32, i8*)** @av1_txb_init_levels, align 8
  call void %662(i32* %656, i32 %557, i32 %561, i8* nonnull %661) #7
  %663 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %33, align 8
  %664 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %663, align 8
  %665 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %664, i64 0, i32 28
  %666 = load i16, i16* %665, align 1
  %667 = trunc i16 %666 to i8
  %668 = icmp sgt i8 %667, -1
  br i1 %668, label %669, label %674

669:                                              ; preds = %647
  %670 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %664, i64 0, i32 6, i64 0
  %671 = load i8, i8* %670, align 8
  %672 = icmp sgt i8 %671, 0
  %673 = zext i1 %672 to i32
  br label %674

674:                                              ; preds = %669, %647
  %675 = phi i32 [ 1, %647 ], [ %673, %669 ]
  %676 = load i8, i8* %31, align 1, !range !10
  %677 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %678 = icmp sgt i32 %0, 0
  br i1 %678, label %902, label %679

679:                                              ; preds = %674
  %680 = and i16 %666, 7
  %681 = zext i16 %680 to i64
  %682 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2, i32 42, i64 %681
  %683 = load i32, i32* %682, align 4
  %684 = icmp eq i32 %683, 0
  %685 = lshr i64 399376, %43
  %686 = and i64 %685, 1
  %687 = icmp eq i64 %686, 0
  br i1 %684, label %688, label %700

688:                                              ; preds = %679
  br i1 %687, label %689, label %902

689:                                              ; preds = %688
  %690 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2, i32 15
  %691 = load i8*, i8** %690, align 8
  %692 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 0, i32 2, i32 16
  %693 = load i32, i32* %692, align 16
  %694 = mul nsw i32 %693, %2
  %695 = add nsw i32 %694, %3
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds i8, i8* %691, i64 %696
  %698 = load i8, i8* %697, align 1
  %699 = zext i8 %698 to i64
  br label %701

700:                                              ; preds = %679
  br i1 %687, label %701, label %902

701:                                              ; preds = %700, %689
  %702 = phi i64 [ %699, %689 ], [ 0, %700 ]
  %703 = icmp eq i32 %675, 0
  %704 = lshr i64 99848, %43
  %705 = and i64 %704, 1
  %706 = icmp eq i64 %705, 0
  br i1 %706, label %709, label %707

707:                                              ; preds = %701
  %708 = trunc i32 %675 to i8
  br label %717

709:                                              ; preds = %701
  %710 = icmp eq i8 %676, 0
  br i1 %710, label %711, label %720

711:                                              ; preds = %709
  %712 = zext i32 %675 to i64
  %713 = lshr i64 394756, %43
  %714 = and i64 %713, 1
  %715 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @av1_ext_tx_set_lookup, i64 0, i64 %712, i64 %714
  %716 = load i8, i8* %715, align 1
  br label %717

717:                                              ; preds = %711, %707
  %718 = phi i8 [ %708, %707 ], [ %716, %711 ]
  %719 = icmp eq i8 %718, 0
  br i1 %719, label %902, label %720

720:                                              ; preds = %717, %709
  %721 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %11, i64 0, i32 8, i32 22, i32 0
  %722 = load i32, i32* %721, align 16
  %723 = icmp sgt i32 %722, 0
  br i1 %723, label %724, label %902

724:                                              ; preds = %720
  %725 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %664, i64 0, i32 23
  %726 = load i8, i8* %725, align 8
  %727 = icmp eq i8 %726, 0
  br i1 %727, label %728, label %902

728:                                              ; preds = %724
  %729 = load i8, i8* %637, align 4
  %730 = icmp eq i8 %729, 0
  br i1 %730, label %736, label %731

731:                                              ; preds = %728
  %732 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %11, i64 0, i32 8, i32 23, i32 5, i64 %681
  %733 = load i32, i32* %732, align 4
  %734 = and i32 %733, 64
  %735 = icmp eq i32 %734, 0
  br i1 %735, label %736, label %902

736:                                              ; preds = %731, %728
  br i1 %706, label %739, label %737

737:                                              ; preds = %736
  %738 = trunc i32 %675 to i8
  br label %749

739:                                              ; preds = %736
  %740 = icmp eq i8 %676, 0
  br i1 %740, label %743, label %741

741:                                              ; preds = %739
  %742 = select i1 %703, i8 2, i8 1
  br label %749

743:                                              ; preds = %739
  %744 = zext i32 %675 to i64
  %745 = lshr i64 394756, %43
  %746 = and i64 %745, 1
  %747 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @av1_ext_tx_set_lookup, i64 0, i64 %744, i64 %746
  %748 = load i8, i8* %747, align 1
  br label %749

749:                                              ; preds = %743, %741, %737
  %750 = phi i8 [ %738, %737 ], [ %742, %741 ], [ %748, %743 ]
  %751 = zext i32 %675 to i64
  %752 = zext i8 %750 to i64
  %753 = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* @ext_tx_set_index, i64 0, i64 %751, i64 %752
  %754 = load i32, i32* %753, align 4
  %755 = icmp sgt i32 %754, 0
  br i1 %755, label %756, label %902

756:                                              ; preds = %749
  br i1 %706, label %759, label %757

757:                                              ; preds = %756
  %758 = trunc i32 %675 to i8
  br label %768

759:                                              ; preds = %756
  %760 = icmp eq i8 %676, 0
  br i1 %760, label %763, label %761

761:                                              ; preds = %759
  %762 = select i1 %703, i8 2, i8 1
  br label %768

763:                                              ; preds = %759
  %764 = lshr i64 394756, %43
  %765 = and i64 %764, 1
  %766 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @av1_ext_tx_set_lookup, i64 0, i64 %751, i64 %765
  %767 = load i8, i8* %766, align 1
  br label %768

768:                                              ; preds = %763, %761, %757
  %769 = phi i8 [ %758, %757 ], [ %762, %761 ], [ %767, %763 ]
  br i1 %703, label %829, label %770

770:                                              ; preds = %768
  %771 = icmp eq i8 %563, 0
  br i1 %771, label %902, label %772

772:                                              ; preds = %770
  %773 = sext i32 %754 to i64
  %774 = zext i8 %565 to i64
  %775 = zext i8 %769 to i64
  %776 = getelementptr inbounds [6 x i32], [6 x i32]* @av1_num_ext_tx_set, i64 0, i64 %775
  %777 = load i32, i32* %776, align 4
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %677, i64 0, i32 63, i64 %773, i64 %774, i64 %778
  %780 = load i16, i16* %779, align 2
  %781 = icmp ugt i16 %780, 15
  %782 = select i1 %781, i32 4, i32 3
  %783 = icmp ugt i16 %780, 31
  %784 = zext i1 %783 to i32
  %785 = getelementptr inbounds [17 x i32], [17 x i32]* @update_cdf.nsymbs2speed, i64 0, i64 %778
  %786 = load i32, i32* %785, align 4
  %787 = add i32 %786, %784
  %788 = add i32 %787, %782
  %789 = add i32 %777, -1
  %790 = icmp sgt i32 %789, 0
  br i1 %790, label %791, label %824

791:                                              ; preds = %772
  %792 = getelementptr inbounds [6 x [16 x i32]], [6 x [16 x i32]]* bitcast (<{ [16 x i32], <{ i32, [15 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, [16 x i32], [16 x i32], [16 x i32] }>* @av1_ext_tx_ind to [6 x [16 x i32]]*), i64 0, i64 %775, i64 %702
  %793 = load i32, i32* %792, align 4
  %794 = zext i32 %793 to i64
  %795 = shl i64 %794, 56
  %796 = ashr exact i64 %795, 56
  %797 = and i64 %796, 4294967295
  %798 = zext i32 %789 to i64
  br label %799

799:                                              ; preds = %818, %791
  %800 = phi i64 [ 0, %791 ], [ %820, %818 ]
  %801 = phi i32 [ 32768, %791 ], [ %803, %818 ]
  %802 = icmp eq i64 %800, %797
  %803 = select i1 %802, i32 0, i32 %801
  %804 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %677, i64 0, i32 63, i64 %773, i64 %774, i64 %800
  %805 = load i16, i16* %804, align 2
  %806 = zext i16 %805 to i32
  %807 = icmp slt i32 %803, %806
  br i1 %807, label %808, label %813

808:                                              ; preds = %799
  %809 = sub nsw i32 %806, %803
  %810 = ashr i32 %809, %788
  %811 = trunc i32 %810 to i16
  %812 = sub i16 %805, %811
  br label %818

813:                                              ; preds = %799
  %814 = sub nsw i32 %803, %806
  %815 = ashr i32 %814, %788
  %816 = trunc i32 %815 to i16
  %817 = add i16 %805, %816
  br label %818

818:                                              ; preds = %813, %808
  %819 = phi i16 [ %817, %813 ], [ %812, %808 ]
  store i16 %819, i16* %804, align 2
  %820 = add nuw nsw i64 %800, 1
  %821 = icmp eq i64 %820, %798
  br i1 %821, label %822, label %799

822:                                              ; preds = %818
  %823 = load i16, i16* %779, align 2
  br label %824

824:                                              ; preds = %822, %772
  %825 = phi i16 [ %823, %822 ], [ %780, %772 ]
  %826 = icmp ult i16 %825, 32
  %827 = zext i1 %826 to i16
  %828 = add i16 %825, %827
  store i16 %828, i16* %779, align 2
  br label %902

829:                                              ; preds = %768
  %830 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %664, i64 0, i32 19, i32 1
  %831 = load i8, i8* %830, align 1
  %832 = icmp eq i8 %831, 0
  br i1 %832, label %838, label %833

833:                                              ; preds = %829
  %834 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %664, i64 0, i32 19, i32 0
  %835 = load i8, i8* %834, align 2
  %836 = zext i8 %835 to i64
  %837 = getelementptr inbounds [5 x i8], [5 x i8]* @fimode_to_intradir, i64 0, i64 %836
  br label %840

838:                                              ; preds = %829
  %839 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %664, i64 0, i32 2
  br label %840

840:                                              ; preds = %838, %833
  %841 = phi i8* [ %837, %833 ], [ %839, %838 ]
  %842 = icmp eq i8 %563, 0
  br i1 %842, label %902, label %843

843:                                              ; preds = %840
  %844 = load i8, i8* %841, align 1
  %845 = sext i32 %754 to i64
  %846 = zext i8 %565 to i64
  %847 = zext i8 %844 to i64
  %848 = zext i8 %769 to i64
  %849 = getelementptr inbounds [6 x i32], [6 x i32]* @av1_num_ext_tx_set, i64 0, i64 %848
  %850 = load i32, i32* %849, align 4
  %851 = sext i32 %850 to i64
  %852 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %677, i64 0, i32 62, i64 %845, i64 %846, i64 %847, i64 %851
  %853 = load i16, i16* %852, align 2
  %854 = icmp ugt i16 %853, 15
  %855 = select i1 %854, i32 4, i32 3
  %856 = icmp ugt i16 %853, 31
  %857 = zext i1 %856 to i32
  %858 = getelementptr inbounds [17 x i32], [17 x i32]* @update_cdf.nsymbs2speed, i64 0, i64 %851
  %859 = load i32, i32* %858, align 4
  %860 = add i32 %859, %857
  %861 = add i32 %860, %855
  %862 = add i32 %850, -1
  %863 = icmp sgt i32 %862, 0
  br i1 %863, label %864, label %897

864:                                              ; preds = %843
  %865 = getelementptr inbounds [6 x [16 x i32]], [6 x [16 x i32]]* bitcast (<{ [16 x i32], <{ i32, [15 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, [16 x i32], [16 x i32], [16 x i32] }>* @av1_ext_tx_ind to [6 x [16 x i32]]*), i64 0, i64 %848, i64 %702
  %866 = load i32, i32* %865, align 4
  %867 = zext i32 %866 to i64
  %868 = shl i64 %867, 56
  %869 = ashr exact i64 %868, 56
  %870 = and i64 %869, 4294967295
  %871 = zext i32 %862 to i64
  br label %872

872:                                              ; preds = %891, %864
  %873 = phi i64 [ 0, %864 ], [ %893, %891 ]
  %874 = phi i32 [ 32768, %864 ], [ %876, %891 ]
  %875 = icmp eq i64 %873, %870
  %876 = select i1 %875, i32 0, i32 %874
  %877 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %677, i64 0, i32 62, i64 %845, i64 %846, i64 %847, i64 %873
  %878 = load i16, i16* %877, align 2
  %879 = zext i16 %878 to i32
  %880 = icmp slt i32 %876, %879
  br i1 %880, label %881, label %886

881:                                              ; preds = %872
  %882 = sub nsw i32 %879, %876
  %883 = ashr i32 %882, %861
  %884 = trunc i32 %883 to i16
  %885 = sub i16 %878, %884
  br label %891

886:                                              ; preds = %872
  %887 = sub nsw i32 %876, %879
  %888 = ashr i32 %887, %861
  %889 = trunc i32 %888 to i16
  %890 = add i16 %878, %889
  br label %891

891:                                              ; preds = %886, %881
  %892 = phi i16 [ %890, %886 ], [ %885, %881 ]
  store i16 %892, i16* %877, align 2
  %893 = add nuw nsw i64 %873, 1
  %894 = icmp eq i64 %893, %871
  br i1 %894, label %895, label %872

895:                                              ; preds = %891
  %896 = load i16, i16* %852, align 2
  br label %897

897:                                              ; preds = %895, %843
  %898 = phi i16 [ %896, %895 ], [ %853, %843 ]
  %899 = icmp ult i16 %898, 32
  %900 = zext i1 %899 to i16
  %901 = add i16 %898, %900
  store i16 %901, i16* %852, align 2
  br label %902

902:                                              ; preds = %897, %840, %824, %770, %749, %731, %724, %720, %717, %700, %688, %674
  %903 = getelementptr inbounds [16 x i8], [16 x i8]* @tx_type_to_class, i64 0, i64 %130
  %904 = load i8, i8* %903, align 1
  %905 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %131, i64 0, i32 0
  %906 = load i16*, i16** %905, align 16
  %907 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %14, i64 0, i32 1, i32 3, i64 %43, i64 %130
  %908 = load i32, i32* %907, align 4
  %909 = add nsw i32 %908, 1
  store i32 %909, i32* %907, align 4
  call void @av1_update_eob_context(i32 %23, i8 zeroext %5, i8 zeroext %904, i8 zeroext %30, %struct.frame_contexts* %574, i8 zeroext %563)
  %910 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %910) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %910, i8 -86, i64 4096, i1 false)
  call void @av1_get_nz_map_contexts_sse2(i8* nonnull %661, i16* %906, i16 zeroext %22, i8 zeroext %5, i8 zeroext %904, i8* nonnull %910) #7
  %911 = add nsw i32 %23, -1
  %912 = and i32 %572, 255
  %913 = zext i32 %912 to i64
  %914 = shl i32 1, %558
  %915 = add nsw i32 %914, 4
  %916 = shl i32 %915, 1
  %917 = icmp ult i32 %912, 3
  %918 = select i1 %917, i32 %912, i32 3
  %919 = zext i32 %918 to i64
  %920 = zext i16 %22 to i64
  %921 = zext i32 %911 to i64
  br label %925

922:                                              ; preds = %1138
  %923 = load i32, i32* %656, align 4
  %924 = icmp eq i32 %923, 0
  br i1 %924, label %1175, label %1140

925:                                              ; preds = %902, %1138
  %926 = phi i64 [ %920, %902 ], [ %927, %1138 ]
  %927 = add nsw i64 %926, -1
  %928 = getelementptr inbounds i16, i16* %906, i64 %927
  %929 = load i16, i16* %928, align 2
  %930 = sext i16 %929 to i32
  %931 = sext i16 %929 to i64
  %932 = getelementptr inbounds i32, i32* %28, i64 %931
  %933 = load i32, i32* %932, align 4
  %934 = icmp slt i32 %933, 0
  %935 = sub nsw i32 0, %933
  %936 = select i1 %934, i32 %935, i32 %933
  br i1 %575, label %937, label %1015

937:                                              ; preds = %925
  %938 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %931
  %939 = load i8, i8* %938, align 1
  %940 = icmp eq i64 %927, %921
  %941 = sext i8 %939 to i64
  %942 = icmp slt i32 %936, 3
  %943 = select i1 %942, i32 %936, i32 3
  br i1 %940, label %944, label %977

944:                                              ; preds = %937
  %945 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 10, i64 %913, i64 %613, i64 %941, i64 3
  %946 = load i16, i16* %945, align 2
  %947 = icmp ugt i16 %946, 15
  %948 = select i1 %947, i32 4, i32 3
  %949 = icmp ugt i16 %946, 31
  %950 = select i1 %949, i32 2, i32 1
  %951 = add nuw nsw i32 %950, %948
  %952 = add nsw i32 %943, -1
  %953 = icmp eq i32 %952, 0
  %954 = select i1 %953, i32 0, i32 32768
  %955 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 10, i64 %913, i64 %613, i64 %941, i64 0
  %956 = load i16, i16* %955, align 2
  %957 = zext i16 %956 to i32
  %958 = icmp ult i32 %954, %957
  br i1 %958, label %959, label %964

959:                                              ; preds = %944
  %960 = sub nsw i32 %957, %954
  %961 = ashr i32 %960, %951
  %962 = trunc i32 %961 to i16
  %963 = sub i16 %956, %962
  br label %969

964:                                              ; preds = %944
  %965 = sub nsw i32 %954, %957
  %966 = ashr i32 %965, %951
  %967 = trunc i32 %966 to i16
  %968 = add i16 %956, %967
  br label %969

969:                                              ; preds = %964, %959
  %970 = phi i16 [ %968, %964 ], [ %963, %959 ]
  store i16 %970, i16* %955, align 2
  %971 = icmp eq i32 %952, 1
  %972 = select i1 %971, i32 0, i32 %954
  %973 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 10, i64 %913, i64 %613, i64 %941, i64 1
  %974 = load i16, i16* %973, align 2
  %975 = zext i16 %974 to i32
  %976 = icmp ult i32 %972, %975
  br i1 %976, label %1251, label %1246

977:                                              ; preds = %937
  %978 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 11, i64 %913, i64 %613, i64 %941, i64 4
  %979 = load i16, i16* %978, align 2
  %980 = icmp ugt i16 %979, 15
  %981 = select i1 %980, i32 4, i32 3
  %982 = icmp ugt i16 %979, 31
  %983 = select i1 %982, i32 3, i32 2
  %984 = add nuw nsw i32 %983, %981
  %985 = icmp eq i32 %943, 0
  %986 = select i1 %985, i32 0, i32 32768
  %987 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 11, i64 %913, i64 %613, i64 %941, i64 0
  %988 = load i16, i16* %987, align 2
  %989 = zext i16 %988 to i32
  %990 = icmp ult i32 %986, %989
  br i1 %990, label %991, label %996

991:                                              ; preds = %977
  %992 = sub nsw i32 %989, %986
  %993 = ashr i32 %992, %984
  %994 = trunc i32 %993 to i16
  %995 = sub i16 %988, %994
  br label %1001

996:                                              ; preds = %977
  %997 = sub nsw i32 %986, %989
  %998 = ashr i32 %997, %984
  %999 = trunc i32 %998 to i16
  %1000 = add i16 %988, %999
  br label %1001

1001:                                             ; preds = %996, %991
  %1002 = phi i16 [ %1000, %996 ], [ %995, %991 ]
  store i16 %1002, i16* %987, align 2
  %1003 = icmp eq i32 %943, 1
  %1004 = select i1 %1003, i32 0, i32 %986
  %1005 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 11, i64 %913, i64 %613, i64 %941, i64 1
  %1006 = load i16, i16* %1005, align 2
  %1007 = zext i16 %1006 to i32
  %1008 = icmp ult i32 %1004, %1007
  br i1 %1008, label %1221, label %1216

1009:                                             ; preds = %1244, %1256
  %1010 = phi i16 [ %946, %1256 ], [ %979, %1244 ]
  %1011 = phi i16* [ %945, %1256 ], [ %978, %1244 ]
  %1012 = icmp ult i16 %1010, 32
  %1013 = zext i1 %1012 to i16
  %1014 = add i16 %1010, %1013
  store i16 %1014, i16* %1011, align 2
  br label %1015

1015:                                             ; preds = %1009, %925
  %1016 = icmp sgt i32 %936, 2
  br i1 %1016, label %1017, label %1138

1017:                                             ; preds = %1015
  %1018 = add nsw i32 %936, -3
  %1019 = ashr i32 %930, %558
  %1020 = shl i32 %1019, %558
  %1021 = sub nsw i32 %930, %1020
  %1022 = mul nsw i32 %1019, %915
  %1023 = add nsw i32 %1021, %1022
  %1024 = add nsw i32 %1023, 1
  %1025 = sext i32 %1024 to i64
  %1026 = getelementptr inbounds [1312 x i8], [1312 x i8]* %8, i64 0, i64 %1025
  %1027 = load i8, i8* %1026, align 1
  %1028 = zext i8 %1027 to i32
  %1029 = add nsw i32 %1023, %915
  %1030 = sext i32 %1029 to i64
  %1031 = getelementptr inbounds [1312 x i8], [1312 x i8]* %8, i64 0, i64 %1030
  %1032 = load i8, i8* %1031, align 1
  %1033 = zext i8 %1032 to i32
  %1034 = add nuw nsw i32 %1033, %1028
  switch i8 %904, label %1085 [
    i8 0, label %1035
    i8 1, label %1053
    i8 2, label %1069
  ]

1035:                                             ; preds = %1017
  %1036 = add nsw i32 %1029, 1
  %1037 = sext i32 %1036 to i64
  %1038 = getelementptr inbounds [1312 x i8], [1312 x i8]* %8, i64 0, i64 %1037
  %1039 = load i8, i8* %1038, align 1
  %1040 = zext i8 %1039 to i32
  %1041 = add nuw nsw i32 %1034, 1
  %1042 = add nuw nsw i32 %1041, %1040
  %1043 = icmp ult i32 %1042, 12
  %1044 = lshr i32 %1042, 1
  %1045 = select i1 %1043, i32 %1044, i32 6
  %1046 = icmp eq i16 %929, 0
  br i1 %1046, label %1088, label %1047

1047:                                             ; preds = %1035
  %1048 = icmp slt i32 %1019, 2
  %1049 = icmp slt i32 %1021, 2
  %1050 = and i1 %1048, %1049
  br i1 %1050, label %1051, label %1085

1051:                                             ; preds = %1047
  %1052 = add nuw nsw i32 %1045, 7
  br label %1088

1053:                                             ; preds = %1017
  %1054 = add nsw i32 %1023, 2
  %1055 = sext i32 %1054 to i64
  %1056 = getelementptr inbounds [1312 x i8], [1312 x i8]* %8, i64 0, i64 %1055
  %1057 = load i8, i8* %1056, align 1
  %1058 = zext i8 %1057 to i32
  %1059 = add nuw nsw i32 %1034, 1
  %1060 = add nuw nsw i32 %1059, %1058
  %1061 = icmp ult i32 %1060, 12
  %1062 = lshr i32 %1060, 1
  %1063 = select i1 %1061, i32 %1062, i32 6
  %1064 = icmp eq i16 %929, 0
  br i1 %1064, label %1088, label %1065

1065:                                             ; preds = %1053
  %1066 = icmp eq i32 %1021, 0
  br i1 %1066, label %1067, label %1085

1067:                                             ; preds = %1065
  %1068 = add nuw nsw i32 %1063, 7
  br label %1088

1069:                                             ; preds = %1017
  %1070 = add nsw i32 %1023, %916
  %1071 = sext i32 %1070 to i64
  %1072 = getelementptr inbounds [1312 x i8], [1312 x i8]* %8, i64 0, i64 %1071
  %1073 = load i8, i8* %1072, align 1
  %1074 = zext i8 %1073 to i32
  %1075 = add nuw nsw i32 %1034, 1
  %1076 = add nuw nsw i32 %1075, %1074
  %1077 = icmp ult i32 %1076, 12
  %1078 = lshr i32 %1076, 1
  %1079 = select i1 %1077, i32 %1078, i32 6
  %1080 = icmp eq i16 %929, 0
  br i1 %1080, label %1088, label %1081

1081:                                             ; preds = %1069
  %1082 = icmp eq i32 %1019, 0
  br i1 %1082, label %1083, label %1085

1083:                                             ; preds = %1081
  %1084 = add nuw nsw i32 %1079, 7
  br label %1088

1085:                                             ; preds = %1081, %1065, %1047, %1017
  %1086 = phi i32 [ %1034, %1017 ], [ %1079, %1081 ], [ %1063, %1065 ], [ %1045, %1047 ]
  %1087 = add nuw nsw i32 %1086, 14
  br label %1088

1088:                                             ; preds = %1035, %1051, %1053, %1067, %1069, %1083, %1085
  %1089 = phi i32 [ %1087, %1085 ], [ %1084, %1083 ], [ %1068, %1067 ], [ %1052, %1051 ], [ %1045, %1035 ], [ %1063, %1053 ], [ %1079, %1069 ]
  %1090 = sext i32 %1089 to i64
  %1091 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 12, i64 %919, i64 %613, i64 %1090, i64 4
  %1092 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 12, i64 %919, i64 %613, i64 %1090, i64 0
  %1093 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 12, i64 %919, i64 %613, i64 %1090, i64 1
  %1094 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 12, i64 %919, i64 %613, i64 %1090, i64 2
  br label %1095

1095:                                             ; preds = %1133, %1088
  %1096 = phi i32 [ 0, %1088 ], [ %1134, %1133 ]
  %1097 = sub i32 %1018, %1096
  %1098 = icmp slt i32 %1097, 3
  br i1 %575, label %1099, label %1133

1099:                                             ; preds = %1095
  %1100 = select i1 %1098, i32 %1097, i32 3
  %1101 = zext i32 %1100 to i64
  %1102 = load i16, i16* %1091, align 2
  %1103 = icmp ugt i16 %1102, 15
  %1104 = select i1 %1103, i32 4, i32 3
  %1105 = icmp ugt i16 %1102, 31
  %1106 = select i1 %1105, i32 3, i32 2
  %1107 = add nuw nsw i32 %1106, %1104
  %1108 = shl i64 %1101, 56
  %1109 = ashr exact i64 %1108, 56
  %1110 = and i64 %1109, 4294967295
  %1111 = icmp eq i64 %1110, 0
  %1112 = select i1 %1111, i32 0, i32 32768
  %1113 = load i16, i16* %1092, align 2
  %1114 = zext i16 %1113 to i32
  %1115 = icmp ult i32 %1112, %1114
  br i1 %1115, label %1116, label %1121

1116:                                             ; preds = %1099
  %1117 = sub nsw i32 %1114, %1112
  %1118 = ashr i32 %1117, %1107
  %1119 = trunc i32 %1118 to i16
  %1120 = sub i16 %1113, %1119
  br label %1126

1121:                                             ; preds = %1099
  %1122 = sub nsw i32 %1112, %1114
  %1123 = ashr i32 %1122, %1107
  %1124 = trunc i32 %1123 to i16
  %1125 = add i16 %1113, %1124
  br label %1126

1126:                                             ; preds = %1121, %1116
  %1127 = phi i16 [ %1125, %1121 ], [ %1120, %1116 ]
  store i16 %1127, i16* %1092, align 2
  %1128 = icmp eq i64 %1110, 1
  %1129 = select i1 %1128, i32 0, i32 %1112
  %1130 = load i16, i16* %1093, align 2
  %1131 = zext i16 %1130 to i32
  %1132 = icmp ult i32 %1129, %1131
  br i1 %1132, label %1263, label %1258

1133:                                             ; preds = %1285, %1095
  %1134 = add nuw nsw i32 %1096, 3
  %1135 = xor i1 %1098, true
  %1136 = icmp ult i32 %1134, 12
  %1137 = and i1 %1136, %1135
  br i1 %1137, label %1095, label %1138

1138:                                             ; preds = %1133, %1015
  %1139 = icmp sgt i64 %927, 0
  br i1 %1139, label %925, label %922

1140:                                             ; preds = %922
  br i1 %575, label %1141, label %1171

1141:                                             ; preds = %1140
  %1142 = sext i8 %184 to i64
  %1143 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 2, i64 %613, i64 %1142, i64 2
  %1144 = load i16, i16* %1143, align 2
  %1145 = icmp ugt i16 %1144, 15
  %1146 = select i1 %1145, i32 4, i32 3
  %1147 = icmp ugt i16 %1144, 31
  %1148 = select i1 %1147, i32 2, i32 1
  %1149 = add nuw nsw i32 %1148, %1146
  %1150 = lshr i32 %923, 16
  %1151 = and i32 %1150, 32768
  %1152 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 2, i64 %613, i64 %1142, i64 0
  %1153 = load i16, i16* %1152, align 2
  %1154 = zext i16 %1153 to i32
  %1155 = icmp ult i32 %1151, %1154
  br i1 %1155, label %1156, label %1161

1156:                                             ; preds = %1141
  %1157 = sub nsw i32 %1154, %1151
  %1158 = ashr i32 %1157, %1149
  %1159 = trunc i32 %1158 to i16
  %1160 = sub i16 %1153, %1159
  br label %1166

1161:                                             ; preds = %1141
  %1162 = sub nsw i32 %1151, %1154
  %1163 = ashr i32 %1162, %1149
  %1164 = trunc i32 %1163 to i16
  %1165 = add i16 %1153, %1164
  br label %1166

1166:                                             ; preds = %1161, %1156
  %1167 = phi i16 [ %1165, %1161 ], [ %1160, %1156 ]
  store i16 %1167, i16* %1152, align 2
  %1168 = icmp ult i16 %1144, 32
  %1169 = zext i1 %1168 to i16
  %1170 = add i16 %1144, %1169
  store i16 %1170, i16* %1143, align 2
  br label %1171

1171:                                             ; preds = %1166, %1140
  %1172 = load i8, i8* %625, align 1
  %1173 = shl i8 %184, 4
  %1174 = or i8 %1172, %1173
  store i8 %1174, i8* %625, align 1
  br label %1175

1175:                                             ; preds = %1171, %922
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %910) #7
  call void @llvm.lifetime.end.p0i8(i64 1312, i8* nonnull %661) #7
  br label %1177

1176:                                             ; preds = %608
  tail call void @av1_set_entropy_contexts(%struct.macroblockd* %15, %struct.macroblockd_plane* %17, i32 %0, i8 zeroext %4, i8 zeroext %5, i32 0, i32 %3, i32 %2) #7
  br label %1215

1177:                                             ; preds = %135, %1175
  %1178 = phi i16* [ %137, %135 ], [ %906, %1175 ]
  %1179 = phi i32* [ %28, %135 ], [ %656, %1175 ]
  %1180 = icmp eq i16 %22, 0
  br i1 %1180, label %1213, label %1181

1181:                                             ; preds = %1177
  %1182 = zext i16 %22 to i64
  br label %1183

1183:                                             ; preds = %1183, %1181
  %1184 = phi i64 [ %1196, %1183 ], [ 0, %1181 ]
  %1185 = phi i32 [ %1194, %1183 ], [ 0, %1181 ]
  %1186 = getelementptr inbounds i16, i16* %1178, i64 %1184
  %1187 = load i16, i16* %1186, align 2
  %1188 = sext i16 %1187 to i64
  %1189 = getelementptr inbounds i32, i32* %1179, i64 %1188
  %1190 = load i32, i32* %1189, align 4
  %1191 = icmp slt i32 %1190, 0
  %1192 = sub nsw i32 0, %1190
  %1193 = select i1 %1191, i32 %1192, i32 %1190
  %1194 = add nuw nsw i32 %1193, %1185
  %1195 = icmp slt i32 %1194, 8
  %1196 = add nuw nsw i64 %1184, 1
  %1197 = icmp ult i64 %1196, %1182
  %1198 = and i1 %1197, %1195
  br i1 %1198, label %1183, label %1199

1199:                                             ; preds = %1183
  %1200 = icmp slt i32 %1194, 7
  %1201 = select i1 %1200, i32 %1194, i32 7
  %1202 = load i32, i32* %1179, align 4
  %1203 = icmp slt i32 %1202, 0
  br i1 %1203, label %1204, label %1206

1204:                                             ; preds = %1199
  %1205 = or i32 %1201, 8
  br label %1210

1206:                                             ; preds = %1199
  %1207 = icmp eq i32 %1202, 0
  %1208 = or i32 %1201, 16
  %1209 = select i1 %1207, i32 %1201, i32 %1208
  br label %1210

1210:                                             ; preds = %1206, %1204
  %1211 = phi i32 [ %1205, %1204 ], [ %1209, %1206 ]
  %1212 = and i32 %1211, 255
  br label %1213

1213:                                             ; preds = %1177, %1210
  %1214 = phi i32 [ %1212, %1210 ], [ 0, %1177 ]
  call void @av1_set_entropy_contexts(%struct.macroblockd* %15, %struct.macroblockd_plane* %17, i32 %0, i8 zeroext %4, i8 zeroext %5, i32 %1214, i32 %3, i32 %2) #7
  br label %1215

1215:                                             ; preds = %1176, %1213
  ret void

1216:                                             ; preds = %1001
  %1217 = sub nsw i32 %1004, %1007
  %1218 = ashr i32 %1217, %984
  %1219 = trunc i32 %1218 to i16
  %1220 = add i16 %1006, %1219
  br label %1226

1221:                                             ; preds = %1001
  %1222 = sub nsw i32 %1007, %1004
  %1223 = ashr i32 %1222, %984
  %1224 = trunc i32 %1223 to i16
  %1225 = sub i16 %1006, %1224
  br label %1226

1226:                                             ; preds = %1221, %1216
  %1227 = phi i16 [ %1220, %1216 ], [ %1225, %1221 ]
  store i16 %1227, i16* %1005, align 2
  %1228 = icmp eq i32 %943, 2
  %1229 = select i1 %1228, i32 0, i32 %1004
  %1230 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 11, i64 %913, i64 %613, i64 %941, i64 2
  %1231 = load i16, i16* %1230, align 2
  %1232 = zext i16 %1231 to i32
  %1233 = icmp ult i32 %1229, %1232
  br i1 %1233, label %1239, label %1234

1234:                                             ; preds = %1226
  %1235 = sub nsw i32 %1229, %1232
  %1236 = ashr i32 %1235, %984
  %1237 = trunc i32 %1236 to i16
  %1238 = add i16 %1231, %1237
  br label %1244

1239:                                             ; preds = %1226
  %1240 = sub nsw i32 %1232, %1229
  %1241 = ashr i32 %1240, %984
  %1242 = trunc i32 %1241 to i16
  %1243 = sub i16 %1231, %1242
  br label %1244

1244:                                             ; preds = %1239, %1234
  %1245 = phi i16 [ %1238, %1234 ], [ %1243, %1239 ]
  store i16 %1245, i16* %1230, align 2
  br label %1009

1246:                                             ; preds = %969
  %1247 = sub nsw i32 %972, %975
  %1248 = ashr i32 %1247, %951
  %1249 = trunc i32 %1248 to i16
  %1250 = add i16 %974, %1249
  br label %1256

1251:                                             ; preds = %969
  %1252 = sub nsw i32 %975, %972
  %1253 = ashr i32 %1252, %951
  %1254 = trunc i32 %1253 to i16
  %1255 = sub i16 %974, %1254
  br label %1256

1256:                                             ; preds = %1251, %1246
  %1257 = phi i16 [ %1250, %1246 ], [ %1255, %1251 ]
  store i16 %1257, i16* %973, align 2
  br label %1009

1258:                                             ; preds = %1126
  %1259 = sub nsw i32 %1129, %1131
  %1260 = ashr i32 %1259, %1107
  %1261 = trunc i32 %1260 to i16
  %1262 = add i16 %1130, %1261
  br label %1268

1263:                                             ; preds = %1126
  %1264 = sub nsw i32 %1131, %1129
  %1265 = ashr i32 %1264, %1107
  %1266 = trunc i32 %1265 to i16
  %1267 = sub i16 %1130, %1266
  br label %1268

1268:                                             ; preds = %1263, %1258
  %1269 = phi i16 [ %1262, %1258 ], [ %1267, %1263 ]
  store i16 %1269, i16* %1093, align 2
  %1270 = icmp eq i64 %1110, 2
  %1271 = select i1 %1270, i32 0, i32 %1129
  %1272 = load i16, i16* %1094, align 2
  %1273 = zext i16 %1272 to i32
  %1274 = icmp ult i32 %1271, %1273
  br i1 %1274, label %1280, label %1275

1275:                                             ; preds = %1268
  %1276 = sub nsw i32 %1271, %1273
  %1277 = ashr i32 %1276, %1107
  %1278 = trunc i32 %1277 to i16
  %1279 = add i16 %1272, %1278
  br label %1285

1280:                                             ; preds = %1268
  %1281 = sub nsw i32 %1273, %1271
  %1282 = ashr i32 %1281, %1107
  %1283 = trunc i32 %1282 to i16
  %1284 = sub i16 %1272, %1283
  br label %1285

1285:                                             ; preds = %1280, %1275
  %1286 = phi i16 [ %1279, %1275 ], [ %1284, %1280 ]
  store i16 %1286, i16* %1094, align 2
  %1287 = icmp ult i16 %1102, 32
  %1288 = zext i1 %1287 to i16
  %1289 = add i16 %1102, %1288
  store i16 %1289, i16* %1091, align 2
  br label %1133
}

declare void @av1_set_entropy_contexts(%struct.macroblockd*, %struct.macroblockd_plane*, i32, i8 zeroext, i8 zeroext, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_update_intra_mb_txb_context(%struct.AV1_COMP*, %struct.ThreadData*, i8 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #0 {
  %6 = alloca %struct.tokenize_b_args, align 8
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %8 = load %struct.SequenceHeader*, %struct.SequenceHeader** %7, align 16
  %9 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %8, i64 0, i32 27
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i32 3, i32 1
  %13 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 2
  %14 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 2, i32 6
  %15 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %14, align 8
  %16 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %15, align 8
  %17 = bitcast %struct.tokenize_b_args* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 24, i1 false)
  %18 = getelementptr inbounds %struct.tokenize_b_args, %struct.tokenize_b_args* %6, i64 0, i32 0
  store %struct.AV1_COMP* %0, %struct.AV1_COMP** %18, align 8
  %19 = getelementptr inbounds %struct.tokenize_b_args, %struct.tokenize_b_args* %6, i64 0, i32 1
  store %struct.ThreadData* %1, %struct.ThreadData** %19, align 8
  %20 = getelementptr inbounds %struct.tokenize_b_args, %struct.tokenize_b_args* %6, i64 0, i32 2
  store i32 0, i32* %20, align 8
  %21 = getelementptr inbounds %struct.tokenize_b_args, %struct.tokenize_b_args* %6, i64 0, i32 3
  store i8 %4, i8* %21, align 4
  %22 = getelementptr inbounds %struct.tokenize_b_args, %struct.tokenize_b_args* %6, i64 0, i32 4
  store i8 %2, i8* %22, align 1
  %23 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %16, i64 0, i32 23
  %24 = load i8, i8* %23, align 8
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %30

26:                                               ; preds = %5
  %27 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 2, i32 3
  %28 = zext i8 %3 to i64
  %29 = zext i32 %12 to i64
  br label %31

30:                                               ; preds = %5
  tail call void @av1_reset_entropy_context(%struct.macroblockd* %13, i8 zeroext %3, i32 %12) #7
  br label %49

31:                                               ; preds = %37, %26
  %32 = phi i64 [ 0, %26 ], [ %47, %37 ]
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %37, label %34

34:                                               ; preds = %31
  %35 = load i8, i8* %27, align 4, !range !10
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %49, label %37

37:                                               ; preds = %34, %31
  %38 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 2, i32 4, i64 %32, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 2, i32 4, i64 %32, i32 2
  %41 = load i32, i32* %40, align 8
  %42 = sext i32 %39 to i64
  %43 = sext i32 %41 to i64
  %44 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %28, i64 %42, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = trunc i64 %32 to i32
  call void @av1_foreach_transformed_block_in_plane(%struct.macroblockd* %13, i8 zeroext %45, i32 %46, void (i32, i32, i32, i32, i8, i8, i8*)* nonnull @av1_update_and_record_txb_context, i8* nonnull %17) #7
  %47 = add nuw nsw i64 %32, 1
  %48 = icmp eq i64 %47, %29
  br i1 %48, label %49, label %31

49:                                               ; preds = %34, %37, %30
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #7
  ret void
}

declare void @av1_reset_entropy_context(%struct.macroblockd*, i8 zeroext, i32) local_unnamed_addr #2

declare void @av1_foreach_transformed_block_in_plane(%struct.macroblockd*, i8 zeroext, i32, void (i32, i32, i32, i32, i8, i8, i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.CB_COEFF_BUFFER* @av1_get_cb_coeff_buffer(%struct.AV1_COMP* nocapture readonly, i32, i32) local_unnamed_addr #6 {
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %5 = load %struct.SequenceHeader*, %struct.SequenceHeader** %4, align 16
  %6 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %5, i64 0, i32 9
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %9 = load i32, i32* %8, align 16
  %10 = ashr i32 %9, %7
  %11 = add nsw i32 %10, 1
  %12 = ashr i32 %1, %7
  %13 = mul nsw i32 %11, %12
  %14 = ashr i32 %2, %7
  %15 = add nsw i32 %13, %14
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 6
  %17 = load %struct.CB_COEFF_BUFFER*, %struct.CB_COEFF_BUFFER** %16, align 16
  %18 = sext i32 %15 to i64
  %19 = getelementptr inbounds %struct.CB_COEFF_BUFFER, %struct.CB_COEFF_BUFFER* %17, i64 %18
  ret %struct.CB_COEFF_BUFFER* %19
}

declare void @od_ec_encode_cdf_q15(%struct.od_ec_enc*, i32, i16*, i32) local_unnamed_addr #2

declare void @od_ec_encode_bool_q15(%struct.od_ec_enc*, i32, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{i8 0, i8 2}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !13, !8}
!13 = !{!"llvm.loop.unroll.runtime.disable"}
!14 = distinct !{!14, !8}
!15 = distinct !{!15, !13, !8}
