; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_color_management.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_color_management.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::ColorSpaceTransform" = type <{ %"class.std::__1::unique_ptr", %"class.jxl::Plane", %"class.jxl::Plane", float, [4 x i8], i64, i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.jxl::ColorSpaceTransform::SkcmsICC"* }
%"struct.jxl::ColorSpaceTransform::SkcmsICC" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %struct.skcms_ICCProfile, %struct.skcms_ICCProfile }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr.0" }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i8* }
%struct.skcms_ICCProfile = type { i8*, i32, i32, i32, i32, i8, [3 x %union.skcms_Curve], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }
%union.skcms_Curve = type { %struct.anon.4, [8 x i8] }
%struct.anon.4 = type { i32, i8*, i8* }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.skcms_A2B = type { i32, [4 x %union.skcms_Curve], [4 x i8], i8*, i8*, i32, [3 x %union.skcms_Curve], %struct.skcms_Matrix3x4, i32, [3 x %union.skcms_Curve] }
%struct.skcms_Matrix3x4 = type { [3 x [4 x float]] }
%struct.skcms_B2A = type { i32, [3 x %union.skcms_Curve], i32, %struct.skcms_Matrix3x4, [3 x %union.skcms_Curve], i32, [4 x i8], i8*, i8*, [4 x %union.skcms_Curve] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr.0" }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::PrimariesCIExy" = type { %"struct.jxl::CIExy", %"struct.jxl::CIExy", %"struct.jxl::CIExy" }
%"struct.jxl::CIExy" = type { double, double }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.9 }
%struct.anon.9 = type { i8 }

@.str = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [61 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_color_management.cc\00", align 1
@.str.2 = private unnamed_addr constant [214 x i8] c"skcms_Transform( xform_src, skcms_PixelFormat_RGB_fff, skcms_AlphaFormat_Opaque, &t->skcms_icc_->profile_src_, buf_dst, skcms_PixelFormat_RGB_fff, skcms_AlphaFormat_Opaque, &t->skcms_icc_->profile_dst_, t->xsize_)\00", align 1
@_ZN3jxlL41DoColorSpaceTransformHighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)*] [void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)* @_ZN3hwy13FunctionCacheIvJPN3jxl19ColorSpaceTransformEmPKfPfEE13ChooseAndCallIXadL_ZNS1_L41DoColorSpaceTransformHighwayDispatchTableEEEEEvS3_mS5_S6_, void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)* null, void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)* null, void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)* null, void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)* @_ZN3jxl6N_AVX321DoColorSpaceTransformEPNS_19ColorSpaceTransformEmPKfPf, void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)* @_ZN3jxl6N_AVX221DoColorSpaceTransformEPNS_19ColorSpaceTransformEmPKfPf, void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)* null, void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)* @_ZN3jxl6N_SSE421DoColorSpaceTransformEPNS_19ColorSpaceTransformEmPKfPf, void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)* null, void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)* null, void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)* null, void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)* @_ZN3jxl8N_SCALAR21DoColorSpaceTransformEPNS_19ColorSpaceTransformEmPKfPf], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@.str.11 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [11 x i8] c"equivalent\00", align 1
@.str.16 = private unnamed_addr constant [29 x i8] c"channels_src == channels_dst\00", align 1
@.str.17 = private unnamed_addr constant [62 x i8] c"../../third_party/libjxl/src/lib/jxl/transfer_functions-inl.h\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"s >= 0\00", align 1
@.str.19 = private unnamed_addr constant [8 x i8] c"e > 0.0\00", align 1
@_ZZL11skcms_ParsePKvmP16skcms_ICCProfileE8priority = internal constant [2 x i32] [i32 0, i32 1], align 4
@.str.20 = private unnamed_addr constant [57 x i8] c"../../third_party/libjxl/src/lib/jxl/base/padded_bytes.h\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"i <= size()\00", align 1
@_ZZN3jxl12_GLOBAL__N_117IdentifyPrimariesERK16skcms_ICCProfileRKNS_5CIExyEPNS_13ColorEncodingEE11kLMSFromXYZ = internal constant %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 0x3FECA4A8C0000000, float 0x3FD10CB2A0000000, float 0xBFC4A8C160000000], [3 x float] [float 0xBFE801A360000000, float 0x3FFB6A7F00000000, float 0x3FA2CA57A0000000], [3 x float] [float 0x3FA3EAB360000000, float 0xBFB1893740000000, float 0x3FF0793DE0000000]] }, align 4
@_ZZN3jxl12_GLOBAL__N_117IdentifyPrimariesERK16skcms_ICCProfileRKNS_5CIExyEPNS_13ColorEncodingEE11kXYZFromLMS = internal constant %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 0x3FEF957220000000, float 0xBFC2D2ACE0000000, float 0x3FC479A860000000], [3 x float] [float 0x3FDBAAE3E0000000, float 0x3FE0966860000000, float 0x3FA93CB240000000], [3 x float] [float 0xBF81777EC0000000, float 0x3FA4807D60000000, float 0x3FEEFDD7E0000000]] }, align 4
@__const._ZN3jxl12_GLOBAL__N_122ProfileEquivalentToICCERK16skcms_ICCProfileRKNS_11PaddedBytesE.profile2 = private unnamed_addr constant { i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } } { i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i8 -86, [3 x i8] c"\AA\AA\AA", %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], [4 x i8] c"\AA\AA\AA\AA", [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], %struct.skcms_Matrix3x4 { [3 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }] }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i32 -1431655766, %struct.skcms_Matrix3x4 { [3 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }] } }, align 8
@_ZZN3jxl12_GLOBAL__N_19LcmsMutexEvE1m = internal global %"class.std::__1::mutex" zeroinitializer, align 8
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl22CustomTransferFunctionE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl8CustomxyE = external unnamed_addr constant { [6 x i8*] }, align 8

@_ZN3jxl19ColorSpaceTransformD1Ev = hidden unnamed_addr alias void (%"class.jxl::ColorSpaceTransform"*), void (%"class.jxl::ColorSpaceTransform"*)* @_ZN3jxl19ColorSpaceTransformD2Ev
@_ZN3jxl19ColorSpaceTransformC1Ev = hidden unnamed_addr alias void (%"class.jxl::ColorSpaceTransform"*), void (%"class.jxl::ColorSpaceTransform"*)* @_ZN3jxl19ColorSpaceTransformC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE415BeforeTransformEPNS_19ColorSpaceTransformEPKfPf(%"class.jxl::ColorSpaceTransform"* nocapture readonly, float* nocapture readonly, float* nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 8
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %138 [
    i32 3, label %10
    i32 1, label %14
    i32 2, label %6
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %138, label %63

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %138, label %101

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 3
  %16 = load float, float* %15, align 8
  %17 = fcmp oeq float %16, 1.000000e+04
  %18 = fdiv float 1.000000e+04, %16
  %19 = select i1 %17, float 1.000000e+00, float %18
  %20 = insertelement <4 x float> undef, float %19, i32 0
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <4 x i32> zeroinitializer
  %22 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %138, label %25

25:                                               ; preds = %14, %25
  %26 = phi i64 [ %59, %25 ], [ 0, %14 ]
  %27 = getelementptr inbounds float, float* %1, i64 %26
  %28 = bitcast float* %27 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 16, !alias.scope !2
  %30 = and <4 x i32> %29, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %31 = and <4 x i32> %29, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = fmul <4 x float> %32, %32
  %34 = fadd <4 x float> %33, %32
  fence acq_rel
  %35 = fmul <4 x float> %34, <float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000>
  %36 = fadd <4 x float> %35, <float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000>
  %37 = fmul <4 x float> %34, <float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000>
  %38 = fadd <4 x float> %37, <float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000>
  fence acq_rel
  %39 = fmul <4 x float> %34, %36
  %40 = fadd <4 x float> %39, <float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000>
  %41 = fmul <4 x float> %34, %38
  %42 = fadd <4 x float> %41, <float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000>
  fence acq_rel
  %43 = fmul <4 x float> %34, %40
  %44 = fadd <4 x float> %43, <float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000>
  %45 = fmul <4 x float> %34, %42
  %46 = fadd <4 x float> %45, <float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000>
  fence acq_rel
  %47 = fmul <4 x float> %34, %44
  %48 = fadd <4 x float> %47, <float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000>
  %49 = fmul <4 x float> %34, %46
  %50 = fadd <4 x float> %49, <float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000>
  fence acq_rel
  %51 = fdiv <4 x float> %48, %50
  %52 = bitcast <4 x float> %51 to <4 x i32>
  %53 = and <4 x i32> %52, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %54 = or <4 x i32> %53, %30
  %55 = bitcast <4 x i32> %54 to <4 x float>
  %56 = fmul <4 x float> %21, %55
  %57 = getelementptr inbounds float, float* %2, i64 %26
  %58 = bitcast float* %57 to <4 x float>*
  store <4 x float> %56, <4 x float>* %58, align 16, !alias.scope !5
  %59 = add nuw nsw i64 %26, 4
  %60 = load i32, i32* %22, align 8
  %61 = zext i32 %60 to i64
  %62 = icmp ult i64 %59, %61
  br i1 %62, label %25, label %138

63:                                               ; preds = %6, %93
  %64 = phi i64 [ %97, %93 ], [ 0, %6 ]
  %65 = getelementptr inbounds float, float* %1, i64 %64
  %66 = load float, float* %65, align 4
  %67 = fpext float %66 to double
  %68 = fmul double %67, 0x3FEEB851EB851EB8
  %69 = fadd double %68, 4.000000e-02
  %70 = fcmp oeq double %69, 0.000000e+00
  br i1 %70, label %93, label %71

71:                                               ; preds = %63
  %72 = tail call double @llvm.fabs.f64(double %69) #15
  %73 = fcmp ugt double %72, 5.000000e-01
  br i1 %73, label %77, label %74

74:                                               ; preds = %71
  %75 = fmul double %69, %69
  %76 = fmul double %75, 0x3FD5555555555555
  br label %87

77:                                               ; preds = %71
  %78 = fadd double %72, 0xBFE1EAC9E7FC395D
  %79 = fmul double %78, 0x40165E05183E19B4
  %80 = tail call double @exp(double %79) #15
  %81 = fadd double %80, 0x3FD23803FD659BE6
  %82 = fmul double %81, 0x3FB5555555555555
  %83 = fcmp ult double %82, 0.000000e+00
  br i1 %83, label %84, label %87

84:                                               ; preds = %77
  %85 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.17, i64 0, i64 0), i32 105, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i64 0, i64 0)) #15
  %86 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

87:                                               ; preds = %77, %74
  %88 = phi double [ %76, %74 ], [ %82, %77 ]
  %89 = fptrunc double %88 to float
  %90 = fptrunc double %69 to float
  %91 = tail call float @llvm.copysign.f32(float %89, float %90) #15
  %92 = fpext float %91 to double
  br label %93

93:                                               ; preds = %63, %87
  %94 = phi double [ %92, %87 ], [ 0.000000e+00, %63 ]
  %95 = fptrunc double %94 to float
  %96 = getelementptr inbounds float, float* %2, i64 %64
  store float %95, float* %96, align 4
  %97 = add nuw nsw i64 %64, 1
  %98 = load i32, i32* %7, align 8
  %99 = zext i32 %98 to i64
  %100 = icmp ult i64 %97, %99
  br i1 %100, label %63, label %138

101:                                              ; preds = %10, %101
  %102 = phi i64 [ %134, %101 ], [ 0, %10 ]
  %103 = getelementptr inbounds float, float* %1, i64 %102
  %104 = bitcast float* %103 to <4 x i32>*
  %105 = load <4 x i32>, <4 x i32>* %104, align 16, !alias.scope !8
  %106 = and <4 x i32> %105, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %107 = and <4 x i32> %105, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %108 = bitcast <4 x i32> %107 to <4 x float>
  %109 = fmul <4 x float> %108, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %110 = fmul <4 x float> %108, <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>
  %111 = fadd <4 x float> %110, <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>
  %112 = fmul <4 x float> %108, <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>
  %113 = fadd <4 x float> %112, <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>
  fence acq_rel
  %114 = fmul <4 x float> %111, %108
  %115 = fadd <4 x float> %114, <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>
  %116 = fmul <4 x float> %113, %108
  %117 = fadd <4 x float> %116, <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>
  fence acq_rel
  %118 = fmul <4 x float> %115, %108
  %119 = fadd <4 x float> %118, <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>
  %120 = fmul <4 x float> %117, %108
  %121 = fadd <4 x float> %120, <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>
  fence acq_rel
  %122 = fmul <4 x float> %119, %108
  %123 = fadd <4 x float> %122, <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>
  %124 = fmul <4 x float> %121, %108
  %125 = fadd <4 x float> %124, <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>
  fence acq_rel
  %126 = fdiv <4 x float> %123, %125
  %127 = fcmp ogt <4 x float> %108, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %128 = select <4 x i1> %127, <4 x float> %126, <4 x float> %109
  %129 = bitcast <4 x float> %128 to <4 x i32>
  %130 = and <4 x i32> %129, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %131 = or <4 x i32> %130, %106
  %132 = getelementptr inbounds float, float* %2, i64 %102
  %133 = bitcast float* %132 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %133, align 16, !alias.scope !11
  %134 = add nuw nsw i64 %102, 4
  %135 = load i32, i32* %11, align 8
  %136 = zext i32 %135 to i64
  %137 = icmp ult i64 %134, %136
  br i1 %137, label %101, label %138

138:                                              ; preds = %93, %25, %101, %10, %14, %6, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE414AfterTransformEPNS_19ColorSpaceTransformEPf(%"class.jxl::ColorSpaceTransform"* nocapture readonly, float* noalias nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 9
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %154 [
    i32 3, label %9
    i32 1, label %13
    i32 2, label %5
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %154, label %80

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %154, label %118

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 3
  %15 = load float, float* %14, align 8
  %16 = fcmp oeq float %15, 1.000000e+04
  %17 = fmul float %15, 0x3F1A36E2E0000000
  %18 = select i1 %16, float 1.000000e+00, float %17
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %154, label %24

24:                                               ; preds = %13, %24
  %25 = phi i64 [ %76, %24 ], [ 0, %13 ]
  %26 = getelementptr inbounds float, float* %1, i64 %25
  %27 = bitcast float* %26 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 16, !alias.scope !14
  %29 = fmul <4 x float> %20, %28
  %30 = bitcast <4 x float> %29 to <4 x i32>
  %31 = and <4 x i32> %30, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %32 = and <4 x i32> %30, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %33) #15
  %35 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %34) #15
  %36 = fcmp olt <4 x float> %33, <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>
  fence acq_rel
  %37 = fmul <4 x float> %35, <float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000>
  %38 = fadd <4 x float> %37, <float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000>
  %39 = fmul <4 x float> %35, <float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000>
  %40 = fadd <4 x float> %39, <float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000>
  fence acq_rel
  %41 = fmul <4 x float> %35, %38
  %42 = fadd <4 x float> %41, <float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000>
  %43 = fmul <4 x float> %35, %40
  %44 = fadd <4 x float> %43, <float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000>
  fence acq_rel
  %45 = fmul <4 x float> %35, %42
  %46 = fadd <4 x float> %45, <float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000>
  %47 = fmul <4 x float> %35, %44
  %48 = fadd <4 x float> %47, <float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000>
  fence acq_rel
  %49 = fmul <4 x float> %35, %46
  %50 = fadd <4 x float> %49, <float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000>
  %51 = fmul <4 x float> %35, %48
  %52 = fadd <4 x float> %51, <float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000>
  fence acq_rel
  %53 = fdiv <4 x float> %50, %52
  fence acq_rel
  %54 = fmul <4 x float> %35, <float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000>
  %55 = fadd <4 x float> %54, <float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000>
  %56 = fmul <4 x float> %35, <float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000>
  %57 = fadd <4 x float> %56, <float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000>
  fence acq_rel
  %58 = fmul <4 x float> %35, %55
  %59 = fadd <4 x float> %58, <float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000>
  %60 = fmul <4 x float> %35, %57
  %61 = fadd <4 x float> %60, <float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000>
  fence acq_rel
  %62 = fmul <4 x float> %35, %59
  %63 = fadd <4 x float> %62, <float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000>
  %64 = fmul <4 x float> %35, %61
  %65 = fadd <4 x float> %64, <float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000>
  fence acq_rel
  %66 = fmul <4 x float> %35, %63
  %67 = fadd <4 x float> %66, <float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000>
  %68 = fmul <4 x float> %35, %65
  %69 = fadd <4 x float> %68, <float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000>
  fence acq_rel
  %70 = fdiv <4 x float> %67, %69
  %71 = select <4 x i1> %36, <4 x float> %53, <4 x float> %70
  %72 = bitcast <4 x float> %71 to <4 x i32>
  %73 = and <4 x i32> %72, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %74 = or <4 x i32> %73, %31
  %75 = bitcast float* %26 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %75, align 16, !alias.scope !17
  %76 = add nuw nsw i64 %25, 4
  %77 = load i32, i32* %21, align 8
  %78 = zext i32 %77 to i64
  %79 = icmp ult i64 %76, %78
  br i1 %79, label %24, label %154

80:                                               ; preds = %5, %111
  %81 = phi i32 [ %112, %111 ], [ %7, %5 ]
  %82 = phi i64 [ %115, %111 ], [ 0, %5 ]
  %83 = getelementptr inbounds float, float* %1, i64 %82
  %84 = load float, float* %83, align 4
  %85 = fcmp oeq float %84, 0.000000e+00
  br i1 %85, label %111, label %86

86:                                               ; preds = %80
  %87 = tail call float @llvm.fabs.f32(float %84)
  %88 = fpext float %87 to double
  %89 = fcmp ugt double %88, 0x3FB5555555555555
  br i1 %89, label %93, label %90

90:                                               ; preds = %86
  %91 = fmul double %88, 3.000000e+00
  %92 = tail call double @sqrt(double %91) #15
  br label %103

93:                                               ; preds = %86
  %94 = fmul double %88, 1.200000e+01
  %95 = fadd double %94, 0xBFD23803FD659BE6
  %96 = tail call double @log(double %95) #15
  %97 = fmul double %96, 0x3FC6E3FE014D320D
  %98 = fadd double %97, 0x3FE1EAC9E7FC395D
  %99 = fcmp ogt double %98, 0.000000e+00
  br i1 %99, label %103, label %100

100:                                              ; preds = %93
  %101 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.17, i64 0, i64 0), i32 92, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i64 0, i64 0)) #15
  %102 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

103:                                              ; preds = %93, %90
  %104 = phi double [ %92, %90 ], [ %98, %93 ]
  %105 = fptrunc double %104 to float
  %106 = tail call float @llvm.copysign.f32(float %105, float %84) #15
  %107 = fpext float %106 to double
  %108 = fadd double %107, -4.000000e-02
  %109 = fmul double %108, 0x3FF0AAAAAAAAAAAB
  %110 = load i32, i32* %6, align 8
  br label %111

111:                                              ; preds = %80, %103
  %112 = phi i32 [ %110, %103 ], [ %81, %80 ]
  %113 = phi double [ %109, %103 ], [ 0xBFA5555555555556, %80 ]
  %114 = fptrunc double %113 to float
  store float %114, float* %83, align 4
  %115 = add nuw nsw i64 %82, 1
  %116 = zext i32 %112 to i64
  %117 = icmp ult i64 %115, %116
  br i1 %117, label %80, label %154

118:                                              ; preds = %9, %118
  %119 = phi i64 [ %150, %118 ], [ 0, %9 ]
  %120 = getelementptr inbounds float, float* %1, i64 %119
  %121 = bitcast float* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 16, !alias.scope !20
  %123 = and <4 x i32> %122, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %124 = and <4 x i32> %122, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %125 = bitcast <4 x i32> %124 to <4 x float>
  %126 = fmul <4 x float> %125, <float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000>
  %127 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %125) #15
  fence acq_rel
  %128 = fmul <4 x float> %127, <float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000>
  %129 = fadd <4 x float> %128, <float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000>
  %130 = fmul <4 x float> %127, <float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000>
  %131 = fadd <4 x float> %130, <float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000>
  fence acq_rel
  %132 = fmul <4 x float> %127, %129
  %133 = fadd <4 x float> %132, <float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000>
  %134 = fmul <4 x float> %127, %131
  %135 = fadd <4 x float> %134, <float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000>
  fence acq_rel
  %136 = fmul <4 x float> %127, %133
  %137 = fadd <4 x float> %136, <float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000>
  %138 = fmul <4 x float> %127, %135
  %139 = fadd <4 x float> %138, <float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000>
  fence acq_rel
  %140 = fmul <4 x float> %127, %137
  %141 = fadd <4 x float> %140, <float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000>
  %142 = fmul <4 x float> %127, %139
  %143 = fadd <4 x float> %142, <float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000>
  fence acq_rel
  %144 = fdiv <4 x float> %141, %143
  %145 = fcmp ogt <4 x float> %125, <float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000>
  %146 = select <4 x i1> %145, <4 x float> %144, <4 x float> %126
  %147 = bitcast <4 x float> %146 to <4 x i32>
  %148 = and <4 x i32> %147, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %149 = or <4 x i32> %148, %123
  store <4 x i32> %149, <4 x i32>* %121, align 16, !alias.scope !23
  %150 = add nuw nsw i64 %119, 4
  %151 = load i32, i32* %10, align 8
  %152 = zext i32 %151 to i64
  %153 = icmp ult i64 %150, %152
  br i1 %153, label %118, label %154

154:                                              ; preds = %111, %24, %118, %9, %13, %5, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE421DoColorSpaceTransformEPNS_19ColorSpaceTransformEmPKfPf(%"class.jxl::ColorSpaceTransform"* nocapture readonly, i64, float*, float*) #2 {
  %5 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 8
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %19, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %1
  %14 = getelementptr inbounds i8, i8* %10, i64 %13
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #15
  %18 = bitcast i8* %14 to float*
  tail call void @_ZN3jxl6N_SSE415BeforeTransformEPNS_19ColorSpaceTransformEPKfPf(%"class.jxl::ColorSpaceTransform"* %0, float* %2, float* %18)
  br label %19

19:                                               ; preds = %4, %8
  %20 = phi float* [ %18, %8 ], [ %2, %4 ]
  %21 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 6
  %22 = load i8, i8* %21, align 8, !range !26
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %33, label %24

24:                                               ; preds = %19
  %25 = icmp eq float* %20, %3
  br i1 %25, label %46, label %26

26:                                               ; preds = %24
  %27 = bitcast float* %3 to i8*
  %28 = bitcast float* %20 to i8*
  %29 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = zext i32 %30 to i64
  %32 = shl nuw nsw i64 %31, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %27, i8* align 4 %28, i64 %32, i1 false)
  br label %46

33:                                               ; preds = %19
  %34 = bitcast float* %20 to i8*
  %35 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %36 = load %"struct.jxl::ColorSpaceTransform::SkcmsICC"*, %"struct.jxl::ColorSpaceTransform::SkcmsICC"** %35, align 8
  %37 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %36, i64 0, i32 2
  %38 = bitcast float* %3 to i8*
  %39 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %36, i64 0, i32 3
  %40 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 5
  %41 = load i64, i64* %40, align 8
  %42 = tail call zeroext i1 @skcms_Transform(i8* %34, i32 34, i32 0, %struct.skcms_ICCProfile* %37, i8* %38, i32 34, i32 0, %struct.skcms_ICCProfile* %39, i64 %41) #15
  br i1 %42, label %46, label %43

43:                                               ; preds = %33
  %44 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([214 x i8], [214 x i8]* @.str.2, i64 0, i64 0)) #15
  %45 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

46:                                               ; preds = %24, %33, %26
  %47 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 9
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %51, label %50

50:                                               ; preds = %46
  tail call void @_ZN3jxl6N_SSE414AfterTransformEPNS_19ColorSpaceTransformEPf(%"class.jxl::ColorSpaceTransform"* %0, float* %3)
  br label %51

51:                                               ; preds = %46, %50
  ret void
}

declare zeroext i1 @skcms_Transform(i8*, i32, i32, %struct.skcms_ICCProfile*, i8*, i32, i32, %struct.skcms_ICCProfile*, i64) local_unnamed_addr #3

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX215BeforeTransformEPNS_19ColorSpaceTransformEPKfPf(%"class.jxl::ColorSpaceTransform"* nocapture readonly, float* nocapture readonly, float* nocapture) local_unnamed_addr #5 {
  %4 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 8
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %121 [
    i32 3, label %10
    i32 1, label %14
    i32 2, label %6
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %121, label %54

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %121, label %92

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 3
  %16 = load float, float* %15, align 8
  %17 = fcmp oeq float %16, 1.000000e+04
  %18 = fdiv float 1.000000e+04, %16
  %19 = select i1 %17, float 1.000000e+00, float %18
  %20 = insertelement <8 x float> undef, float %19, i32 0
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <8 x i32> zeroinitializer
  %22 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %121, label %25

25:                                               ; preds = %14, %25
  %26 = phi i64 [ %50, %25 ], [ 0, %14 ]
  %27 = getelementptr inbounds float, float* %1, i64 %26
  %28 = bitcast float* %27 to <8 x i32>*
  %29 = load <8 x i32>, <8 x i32>* %28, align 32, !alias.scope !27, !noalias !30
  %30 = and <8 x i32> %29, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %31 = and <8 x i32> %29, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %32 = bitcast <8 x i32> %31 to <8 x float>
  %33 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %32, <8 x float> %32, <8 x float> %32) #15
  fence acq_rel
  %34 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %33, <8 x float> <float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000>, <8 x float> <float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000>) #15
  %35 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %33, <8 x float> <float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000>, <8 x float> <float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000>) #15
  fence acq_rel
  %36 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %34, <8 x float> %33, <8 x float> <float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000>) #15
  %37 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %35, <8 x float> %33, <8 x float> <float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000>) #15
  fence acq_rel
  %38 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %36, <8 x float> %33, <8 x float> <float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000>) #15
  %39 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %37, <8 x float> %33, <8 x float> <float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000>) #15
  fence acq_rel
  %40 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %38, <8 x float> %33, <8 x float> <float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000>) #15
  %41 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %39, <8 x float> %33, <8 x float> <float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000>) #15
  fence acq_rel
  %42 = fdiv <8 x float> %40, %41
  %43 = bitcast <8 x float> %42 to <8 x i32>
  %44 = and <8 x i32> %43, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %45 = or <8 x i32> %44, %30
  %46 = bitcast <8 x i32> %45 to <8 x float>
  %47 = fmul <8 x float> %21, %46
  %48 = getelementptr inbounds float, float* %2, i64 %26
  %49 = bitcast float* %48 to <8 x float>*
  store <8 x float> %47, <8 x float>* %49, align 32, !alias.scope !32
  %50 = add nuw nsw i64 %26, 8
  %51 = load i32, i32* %22, align 8
  %52 = zext i32 %51 to i64
  %53 = icmp ult i64 %50, %52
  br i1 %53, label %25, label %121

54:                                               ; preds = %6, %84
  %55 = phi i64 [ %88, %84 ], [ 0, %6 ]
  %56 = getelementptr inbounds float, float* %1, i64 %55
  %57 = load float, float* %56, align 4
  %58 = fpext float %57 to double
  %59 = fmul double %58, 0x3FEEB851EB851EB8
  %60 = fadd double %59, 4.000000e-02
  %61 = fcmp oeq double %60, 0.000000e+00
  br i1 %61, label %84, label %62

62:                                               ; preds = %54
  %63 = tail call double @llvm.fabs.f64(double %60) #15
  %64 = fcmp ugt double %63, 5.000000e-01
  br i1 %64, label %68, label %65

65:                                               ; preds = %62
  %66 = fmul double %60, %60
  %67 = fmul double %66, 0x3FD5555555555555
  br label %78

68:                                               ; preds = %62
  %69 = fadd double %63, 0xBFE1EAC9E7FC395D
  %70 = fmul double %69, 0x40165E05183E19B4
  %71 = tail call double @exp(double %70) #15
  %72 = fadd double %71, 0x3FD23803FD659BE6
  %73 = fmul double %72, 0x3FB5555555555555
  %74 = fcmp ult double %73, 0.000000e+00
  br i1 %74, label %75, label %78

75:                                               ; preds = %68
  %76 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.17, i64 0, i64 0), i32 105, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i64 0, i64 0)) #15
  %77 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

78:                                               ; preds = %68, %65
  %79 = phi double [ %67, %65 ], [ %73, %68 ]
  %80 = fptrunc double %79 to float
  %81 = fptrunc double %60 to float
  %82 = tail call float @llvm.copysign.f32(float %80, float %81) #15
  %83 = fpext float %82 to double
  br label %84

84:                                               ; preds = %54, %78
  %85 = phi double [ %83, %78 ], [ 0.000000e+00, %54 ]
  %86 = fptrunc double %85 to float
  %87 = getelementptr inbounds float, float* %2, i64 %55
  store float %86, float* %87, align 4
  %88 = add nuw nsw i64 %55, 1
  %89 = load i32, i32* %7, align 8
  %90 = zext i32 %89 to i64
  %91 = icmp ult i64 %88, %90
  br i1 %91, label %54, label %121

92:                                               ; preds = %10, %92
  %93 = phi i64 [ %117, %92 ], [ 0, %10 ]
  %94 = getelementptr inbounds float, float* %1, i64 %93
  %95 = bitcast float* %94 to <8 x i32>*
  %96 = load <8 x i32>, <8 x i32>* %95, align 32, !alias.scope !35, !noalias !38
  %97 = and <8 x i32> %96, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %98 = and <8 x i32> %96, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %99 = bitcast <8 x i32> %98 to <8 x float>
  %100 = fmul <8 x float> %99, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %101 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %99, <8 x float> <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>, <8 x float> <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>) #15
  %102 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %99, <8 x float> <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>, <8 x float> <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>) #15
  fence acq_rel
  %103 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %101, <8 x float> %99, <8 x float> <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>) #15
  %104 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %102, <8 x float> %99, <8 x float> <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>) #15
  fence acq_rel
  %105 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %103, <8 x float> %99, <8 x float> <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>) #15
  %106 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %104, <8 x float> %99, <8 x float> <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>) #15
  fence acq_rel
  %107 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %105, <8 x float> %99, <8 x float> <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>) #15
  %108 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %106, <8 x float> %99, <8 x float> <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>) #15
  fence acq_rel
  %109 = fdiv <8 x float> %107, %108
  %110 = fcmp ogt <8 x float> %99, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %111 = select <8 x i1> %110, <8 x float> %109, <8 x float> %100
  %112 = bitcast <8 x float> %111 to <8 x i32>
  %113 = and <8 x i32> %112, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %114 = or <8 x i32> %113, %97
  %115 = getelementptr inbounds float, float* %2, i64 %93
  %116 = bitcast float* %115 to <8 x i32>*
  store <8 x i32> %114, <8 x i32>* %116, align 32, !alias.scope !40
  %117 = add nuw nsw i64 %93, 8
  %118 = load i32, i32* %11, align 8
  %119 = zext i32 %118 to i64
  %120 = icmp ult i64 %117, %119
  br i1 %120, label %92, label %121

121:                                              ; preds = %84, %25, %92, %10, %14, %6, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX214AfterTransformEPNS_19ColorSpaceTransformEPf(%"class.jxl::ColorSpaceTransform"* nocapture readonly, float* noalias nocapture) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 9
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %130 [
    i32 3, label %9
    i32 1, label %13
    i32 2, label %5
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %130, label %64

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %130, label %102

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 3
  %15 = load float, float* %14, align 8
  %16 = fcmp oeq float %15, 1.000000e+04
  %17 = fmul float %15, 0x3F1A36E2E0000000
  %18 = select i1 %16, float 1.000000e+00, float %17
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %130, label %24

24:                                               ; preds = %13, %24
  %25 = phi i64 [ %60, %24 ], [ 0, %13 ]
  %26 = getelementptr inbounds float, float* %1, i64 %25
  %27 = bitcast float* %26 to <8 x float>*
  %28 = load <8 x float>, <8 x float>* %27, align 32, !alias.scope !43, !noalias !46
  %29 = fmul <8 x float> %20, %28
  %30 = bitcast <8 x float> %29 to <8 x i32>
  %31 = and <8 x i32> %30, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %32 = and <8 x i32> %30, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %33) #15
  %35 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %34) #15
  %36 = fcmp olt <8 x float> %33, <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>
  fence acq_rel
  %37 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %35, <8 x float> <float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000>, <8 x float> <float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000>) #15
  %38 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %35, <8 x float> <float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000>, <8 x float> <float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000>) #15
  fence acq_rel
  %39 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %37, <8 x float> %35, <8 x float> <float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000>) #15
  %40 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %38, <8 x float> %35, <8 x float> <float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000>) #15
  fence acq_rel
  %41 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %39, <8 x float> %35, <8 x float> <float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000>) #15
  %42 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %40, <8 x float> %35, <8 x float> <float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000>) #15
  fence acq_rel
  %43 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %41, <8 x float> %35, <8 x float> <float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000>) #15
  %44 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %42, <8 x float> %35, <8 x float> <float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000>) #15
  fence acq_rel
  %45 = fdiv <8 x float> %43, %44
  fence acq_rel
  %46 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %35, <8 x float> <float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000>, <8 x float> <float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000>) #15
  %47 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %35, <8 x float> <float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000>, <8 x float> <float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000>) #15
  fence acq_rel
  %48 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %46, <8 x float> %35, <8 x float> <float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000>) #15
  %49 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %47, <8 x float> %35, <8 x float> <float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000>) #15
  fence acq_rel
  %50 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %48, <8 x float> %35, <8 x float> <float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000>) #15
  %51 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %49, <8 x float> %35, <8 x float> <float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000>) #15
  fence acq_rel
  %52 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %50, <8 x float> %35, <8 x float> <float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000>) #15
  %53 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %51, <8 x float> %35, <8 x float> <float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000>) #15
  fence acq_rel
  %54 = fdiv <8 x float> %52, %53
  %55 = select <8 x i1> %36, <8 x float> %45, <8 x float> %54
  %56 = bitcast <8 x float> %55 to <8 x i32>
  %57 = and <8 x i32> %56, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %58 = or <8 x i32> %57, %31
  %59 = bitcast float* %26 to <8 x i32>*
  store <8 x i32> %58, <8 x i32>* %59, align 32, !alias.scope !48
  %60 = add nuw nsw i64 %25, 8
  %61 = load i32, i32* %21, align 8
  %62 = zext i32 %61 to i64
  %63 = icmp ult i64 %60, %62
  br i1 %63, label %24, label %130

64:                                               ; preds = %5, %95
  %65 = phi i32 [ %96, %95 ], [ %7, %5 ]
  %66 = phi i64 [ %99, %95 ], [ 0, %5 ]
  %67 = getelementptr inbounds float, float* %1, i64 %66
  %68 = load float, float* %67, align 4
  %69 = fcmp oeq float %68, 0.000000e+00
  br i1 %69, label %95, label %70

70:                                               ; preds = %64
  %71 = tail call float @llvm.fabs.f32(float %68)
  %72 = fpext float %71 to double
  %73 = fcmp ugt double %72, 0x3FB5555555555555
  br i1 %73, label %77, label %74

74:                                               ; preds = %70
  %75 = fmul double %72, 3.000000e+00
  %76 = tail call double @sqrt(double %75) #15
  br label %87

77:                                               ; preds = %70
  %78 = fmul double %72, 1.200000e+01
  %79 = fadd double %78, 0xBFD23803FD659BE6
  %80 = tail call double @log(double %79) #15
  %81 = fmul double %80, 0x3FC6E3FE014D320D
  %82 = fadd double %81, 0x3FE1EAC9E7FC395D
  %83 = fcmp ogt double %82, 0.000000e+00
  br i1 %83, label %87, label %84

84:                                               ; preds = %77
  %85 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.17, i64 0, i64 0), i32 92, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i64 0, i64 0)) #15
  %86 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

87:                                               ; preds = %77, %74
  %88 = phi double [ %76, %74 ], [ %82, %77 ]
  %89 = fptrunc double %88 to float
  %90 = tail call float @llvm.copysign.f32(float %89, float %68) #15
  %91 = fpext float %90 to double
  %92 = fadd double %91, -4.000000e-02
  %93 = fmul double %92, 0x3FF0AAAAAAAAAAAB
  %94 = load i32, i32* %6, align 8
  br label %95

95:                                               ; preds = %64, %87
  %96 = phi i32 [ %94, %87 ], [ %65, %64 ]
  %97 = phi double [ %93, %87 ], [ 0xBFA5555555555556, %64 ]
  %98 = fptrunc double %97 to float
  store float %98, float* %67, align 4
  %99 = add nuw nsw i64 %66, 1
  %100 = zext i32 %96 to i64
  %101 = icmp ult i64 %99, %100
  br i1 %101, label %64, label %130

102:                                              ; preds = %9, %102
  %103 = phi i64 [ %126, %102 ], [ 0, %9 ]
  %104 = getelementptr inbounds float, float* %1, i64 %103
  %105 = bitcast float* %104 to <8 x i32>*
  %106 = load <8 x i32>, <8 x i32>* %105, align 32, !alias.scope !51, !noalias !54
  %107 = and <8 x i32> %106, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %108 = and <8 x i32> %106, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %109 = bitcast <8 x i32> %108 to <8 x float>
  %110 = fmul <8 x float> %109, <float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000>
  %111 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %109) #15
  fence acq_rel
  %112 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %111, <8 x float> <float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000>, <8 x float> <float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000>) #15
  %113 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %111, <8 x float> <float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000>, <8 x float> <float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000>) #15
  fence acq_rel
  %114 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %112, <8 x float> %111, <8 x float> <float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000>) #15
  %115 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %113, <8 x float> %111, <8 x float> <float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000>) #15
  fence acq_rel
  %116 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %114, <8 x float> %111, <8 x float> <float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000>) #15
  %117 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %115, <8 x float> %111, <8 x float> <float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000>) #15
  fence acq_rel
  %118 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %116, <8 x float> %111, <8 x float> <float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000>) #15
  %119 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %117, <8 x float> %111, <8 x float> <float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000>) #15
  fence acq_rel
  %120 = fdiv <8 x float> %118, %119
  %121 = fcmp ogt <8 x float> %109, <float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000>
  %122 = select <8 x i1> %121, <8 x float> %120, <8 x float> %110
  %123 = bitcast <8 x float> %122 to <8 x i32>
  %124 = and <8 x i32> %123, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %125 = or <8 x i32> %124, %107
  store <8 x i32> %125, <8 x i32>* %105, align 32, !alias.scope !56
  %126 = add nuw nsw i64 %103, 8
  %127 = load i32, i32* %10, align 8
  %128 = zext i32 %127 to i64
  %129 = icmp ult i64 %126, %128
  br i1 %129, label %102, label %130

130:                                              ; preds = %95, %24, %102, %9, %13, %5, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX221DoColorSpaceTransformEPNS_19ColorSpaceTransformEmPKfPf(%"class.jxl::ColorSpaceTransform"* nocapture readonly, i64, float*, float*) #6 {
  %5 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 8
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %19, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %1
  %14 = getelementptr inbounds i8, i8* %10, i64 %13
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #15
  %18 = bitcast i8* %14 to float*
  tail call void @_ZN3jxl6N_AVX215BeforeTransformEPNS_19ColorSpaceTransformEPKfPf(%"class.jxl::ColorSpaceTransform"* %0, float* %2, float* %18)
  br label %19

19:                                               ; preds = %4, %8
  %20 = phi float* [ %18, %8 ], [ %2, %4 ]
  %21 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 6
  %22 = load i8, i8* %21, align 8, !range !26
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %33, label %24

24:                                               ; preds = %19
  %25 = icmp eq float* %20, %3
  br i1 %25, label %46, label %26

26:                                               ; preds = %24
  %27 = bitcast float* %3 to i8*
  %28 = bitcast float* %20 to i8*
  %29 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = zext i32 %30 to i64
  %32 = shl nuw nsw i64 %31, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %27, i8* align 4 %28, i64 %32, i1 false)
  br label %46

33:                                               ; preds = %19
  %34 = bitcast float* %20 to i8*
  %35 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %36 = load %"struct.jxl::ColorSpaceTransform::SkcmsICC"*, %"struct.jxl::ColorSpaceTransform::SkcmsICC"** %35, align 8
  %37 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %36, i64 0, i32 2
  %38 = bitcast float* %3 to i8*
  %39 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %36, i64 0, i32 3
  %40 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 5
  %41 = load i64, i64* %40, align 8
  %42 = tail call zeroext i1 @skcms_Transform(i8* %34, i32 34, i32 0, %struct.skcms_ICCProfile* %37, i8* %38, i32 34, i32 0, %struct.skcms_ICCProfile* %39, i64 %41) #15
  br i1 %42, label %46, label %43

43:                                               ; preds = %33
  %44 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([214 x i8], [214 x i8]* @.str.2, i64 0, i64 0)) #15
  %45 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

46:                                               ; preds = %24, %33, %26
  %47 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 9
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %51, label %50

50:                                               ; preds = %46
  tail call void @_ZN3jxl6N_AVX214AfterTransformEPNS_19ColorSpaceTransformEPf(%"class.jxl::ColorSpaceTransform"* %0, float* %3)
  br label %51

51:                                               ; preds = %46, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX315BeforeTransformEPNS_19ColorSpaceTransformEPKfPf(%"class.jxl::ColorSpaceTransform"* nocapture readonly, float* nocapture readonly, float* nocapture) local_unnamed_addr #7 {
  %4 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 8
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %121 [
    i32 3, label %10
    i32 1, label %14
    i32 2, label %6
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %121, label %54

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %121, label %92

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 3
  %16 = load float, float* %15, align 8
  %17 = fcmp oeq float %16, 1.000000e+04
  %18 = fdiv float 1.000000e+04, %16
  %19 = select i1 %17, float 1.000000e+00, float %18
  %20 = insertelement <16 x float> undef, float %19, i32 0
  %21 = shufflevector <16 x float> %20, <16 x float> undef, <16 x i32> zeroinitializer
  %22 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %121, label %25

25:                                               ; preds = %14, %25
  %26 = phi i64 [ %50, %25 ], [ 0, %14 ]
  %27 = getelementptr inbounds float, float* %1, i64 %26
  %28 = bitcast float* %27 to <16 x i32>*
  %29 = load <16 x i32>, <16 x i32>* %28, align 64, !alias.scope !59, !noalias !62
  %30 = and <16 x i32> %29, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %31 = and <16 x i32> %29, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %32 = bitcast <16 x i32> %31 to <16 x float>
  %33 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %32, <16 x float> %32, <16 x float> %32) #15
  fence acq_rel
  %34 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %33, <16 x float> <float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000, float 0x3FE199E2C0000000>, <16 x float> <float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000, float 0x40052A0C80000000>) #15
  %35 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %33, <16 x float> <float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000, float 0x40056AE160000000>, <16 x float> <float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000, float 0xC040F435A0000000>) #15
  fence acq_rel
  %36 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %34, <16 x float> %33, <16 x float> <float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000, float 0x3FE7A2A140000000>) #15
  %37 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %35, <16 x float> %33, <16 x float> <float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000, float 0x4065CBAB60000000>) #15
  fence acq_rel
  %38 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %36, <16 x float> %33, <16 x float> <float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000, float 0xBF798A6DA0000000>) #15
  %39 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %37, <16 x float> %33, <16 x float> <float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000, float 0xC07ACBCA00000000>) #15
  fence acq_rel
  %40 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %38, <16 x float> %33, <16 x float> <float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000, float 0x3F313BFFE0000000>) #15
  %41 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %39, <16 x float> %33, <16 x float> <float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000, float 0x407A559A00000000>) #15
  fence acq_rel
  %42 = fdiv <16 x float> %40, %41
  %43 = bitcast <16 x float> %42 to <16 x i32>
  %44 = and <16 x i32> %43, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %45 = or <16 x i32> %44, %30
  %46 = bitcast <16 x i32> %45 to <16 x float>
  %47 = fmul <16 x float> %21, %46
  %48 = getelementptr inbounds float, float* %2, i64 %26
  %49 = bitcast float* %48 to <16 x float>*
  store <16 x float> %47, <16 x float>* %49, align 64, !alias.scope !64
  %50 = add nuw nsw i64 %26, 16
  %51 = load i32, i32* %22, align 8
  %52 = zext i32 %51 to i64
  %53 = icmp ult i64 %50, %52
  br i1 %53, label %25, label %121

54:                                               ; preds = %6, %84
  %55 = phi i64 [ %88, %84 ], [ 0, %6 ]
  %56 = getelementptr inbounds float, float* %1, i64 %55
  %57 = load float, float* %56, align 4
  %58 = fpext float %57 to double
  %59 = fmul double %58, 0x3FEEB851EB851EB8
  %60 = fadd double %59, 4.000000e-02
  %61 = fcmp oeq double %60, 0.000000e+00
  br i1 %61, label %84, label %62

62:                                               ; preds = %54
  %63 = tail call double @llvm.fabs.f64(double %60) #15
  %64 = fcmp ugt double %63, 5.000000e-01
  br i1 %64, label %68, label %65

65:                                               ; preds = %62
  %66 = fmul double %60, %60
  %67 = fmul double %66, 0x3FD5555555555555
  br label %78

68:                                               ; preds = %62
  %69 = fadd double %63, 0xBFE1EAC9E7FC395D
  %70 = fmul double %69, 0x40165E05183E19B4
  %71 = tail call double @exp(double %70) #15
  %72 = fadd double %71, 0x3FD23803FD659BE6
  %73 = fmul double %72, 0x3FB5555555555555
  %74 = fcmp ult double %73, 0.000000e+00
  br i1 %74, label %75, label %78

75:                                               ; preds = %68
  %76 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.17, i64 0, i64 0), i32 105, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i64 0, i64 0)) #15
  %77 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

78:                                               ; preds = %68, %65
  %79 = phi double [ %67, %65 ], [ %73, %68 ]
  %80 = fptrunc double %79 to float
  %81 = fptrunc double %60 to float
  %82 = tail call float @llvm.copysign.f32(float %80, float %81) #15
  %83 = fpext float %82 to double
  br label %84

84:                                               ; preds = %54, %78
  %85 = phi double [ %83, %78 ], [ 0.000000e+00, %54 ]
  %86 = fptrunc double %85 to float
  %87 = getelementptr inbounds float, float* %2, i64 %55
  store float %86, float* %87, align 4
  %88 = add nuw nsw i64 %55, 1
  %89 = load i32, i32* %7, align 8
  %90 = zext i32 %89 to i64
  %91 = icmp ult i64 %88, %90
  br i1 %91, label %54, label %121

92:                                               ; preds = %10, %92
  %93 = phi i64 [ %117, %92 ], [ 0, %10 ]
  %94 = getelementptr inbounds float, float* %1, i64 %93
  %95 = bitcast float* %94 to <16 x i32>*
  %96 = load <16 x i32>, <16 x i32>* %95, align 64, !alias.scope !67, !noalias !70
  %97 = and <16 x i32> %96, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %98 = and <16 x i32> %96, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %99 = bitcast <16 x i32> %98 to <16 x float>
  %100 = fmul <16 x float> %99, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %101 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %99, <16 x float> <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>, <16 x float> <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>) #15
  %102 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %99, <16 x float> <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>, <16 x float> <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>) #15
  fence acq_rel
  %103 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %101, <16 x float> %99, <16 x float> <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>) #15
  %104 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %102, <16 x float> %99, <16 x float> <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>) #15
  fence acq_rel
  %105 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %103, <16 x float> %99, <16 x float> <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>) #15
  %106 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %104, <16 x float> %99, <16 x float> <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>) #15
  fence acq_rel
  %107 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %105, <16 x float> %99, <16 x float> <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>) #15
  %108 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %106, <16 x float> %99, <16 x float> <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>) #15
  fence acq_rel
  %109 = fdiv <16 x float> %107, %108
  %110 = fcmp ogt <16 x float> %99, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %111 = select <16 x i1> %110, <16 x float> %109, <16 x float> %100
  %112 = bitcast <16 x float> %111 to <16 x i32>
  %113 = and <16 x i32> %112, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %114 = or <16 x i32> %113, %97
  %115 = getelementptr inbounds float, float* %2, i64 %93
  %116 = bitcast float* %115 to <16 x i32>*
  store <16 x i32> %114, <16 x i32>* %116, align 64, !alias.scope !72
  %117 = add nuw nsw i64 %93, 16
  %118 = load i32, i32* %11, align 8
  %119 = zext i32 %118 to i64
  %120 = icmp ult i64 %117, %119
  br i1 %120, label %92, label %121

121:                                              ; preds = %84, %25, %92, %10, %14, %6, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX314AfterTransformEPNS_19ColorSpaceTransformEPf(%"class.jxl::ColorSpaceTransform"* nocapture readonly, float* noalias nocapture) local_unnamed_addr #7 {
  %3 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 9
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %130 [
    i32 3, label %9
    i32 1, label %13
    i32 2, label %5
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %130, label %64

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %130, label %102

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 3
  %15 = load float, float* %14, align 8
  %16 = fcmp oeq float %15, 1.000000e+04
  %17 = fmul float %15, 0x3F1A36E2E0000000
  %18 = select i1 %16, float 1.000000e+00, float %17
  %19 = insertelement <16 x float> undef, float %18, i32 0
  %20 = shufflevector <16 x float> %19, <16 x float> undef, <16 x i32> zeroinitializer
  %21 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %130, label %24

24:                                               ; preds = %13, %24
  %25 = phi i64 [ %60, %24 ], [ 0, %13 ]
  %26 = getelementptr inbounds float, float* %1, i64 %25
  %27 = bitcast float* %26 to <16 x float>*
  %28 = load <16 x float>, <16 x float>* %27, align 64, !alias.scope !75, !noalias !78
  %29 = fmul <16 x float> %20, %28
  %30 = bitcast <16 x float> %29 to <16 x i32>
  %31 = and <16 x i32> %30, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %32 = and <16 x i32> %30, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %33 = bitcast <16 x i32> %32 to <16 x float>
  %34 = tail call <16 x float> @llvm.sqrt.v16f32(<16 x float> %33) #15
  %35 = tail call <16 x float> @llvm.sqrt.v16f32(<16 x float> %34) #15
  %36 = fcmp olt <16 x float> %33, <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>
  fence acq_rel
  %37 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %35, <16 x float> <float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000>, <16 x float> <float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000>) #15
  %38 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %35, <16 x float> <float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000>, <16 x float> <float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000>) #15
  fence acq_rel
  %39 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %37, <16 x float> %35, <16 x float> <float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000>) #15
  %40 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %38, <16 x float> %35, <16 x float> <float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000>) #15
  fence acq_rel
  %41 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %39, <16 x float> %35, <16 x float> <float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000>) #15
  %42 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %40, <16 x float> %35, <16 x float> <float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000>) #15
  fence acq_rel
  %43 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %41, <16 x float> %35, <16 x float> <float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000>) #15
  %44 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %42, <16 x float> %35, <16 x float> <float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000>) #15
  fence acq_rel
  %45 = fdiv <16 x float> %43, %44
  fence acq_rel
  %46 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %35, <16 x float> <float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000>, <16 x float> <float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000>) #15
  %47 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %35, <16 x float> <float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000>, <16 x float> <float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000>) #15
  fence acq_rel
  %48 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %46, <16 x float> %35, <16 x float> <float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000>) #15
  %49 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %47, <16 x float> %35, <16 x float> <float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000>) #15
  fence acq_rel
  %50 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %48, <16 x float> %35, <16 x float> <float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000>) #15
  %51 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %49, <16 x float> %35, <16 x float> <float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000>) #15
  fence acq_rel
  %52 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %50, <16 x float> %35, <16 x float> <float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000>) #15
  %53 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %51, <16 x float> %35, <16 x float> <float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000>) #15
  fence acq_rel
  %54 = fdiv <16 x float> %52, %53
  %55 = select <16 x i1> %36, <16 x float> %45, <16 x float> %54
  %56 = bitcast <16 x float> %55 to <16 x i32>
  %57 = and <16 x i32> %56, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %58 = or <16 x i32> %57, %31
  %59 = bitcast float* %26 to <16 x i32>*
  store <16 x i32> %58, <16 x i32>* %59, align 64, !alias.scope !80
  %60 = add nuw nsw i64 %25, 16
  %61 = load i32, i32* %21, align 8
  %62 = zext i32 %61 to i64
  %63 = icmp ult i64 %60, %62
  br i1 %63, label %24, label %130

64:                                               ; preds = %5, %95
  %65 = phi i32 [ %96, %95 ], [ %7, %5 ]
  %66 = phi i64 [ %99, %95 ], [ 0, %5 ]
  %67 = getelementptr inbounds float, float* %1, i64 %66
  %68 = load float, float* %67, align 4
  %69 = fcmp oeq float %68, 0.000000e+00
  br i1 %69, label %95, label %70

70:                                               ; preds = %64
  %71 = tail call float @llvm.fabs.f32(float %68)
  %72 = fpext float %71 to double
  %73 = fcmp ugt double %72, 0x3FB5555555555555
  br i1 %73, label %77, label %74

74:                                               ; preds = %70
  %75 = fmul double %72, 3.000000e+00
  %76 = tail call double @sqrt(double %75) #15
  br label %87

77:                                               ; preds = %70
  %78 = fmul double %72, 1.200000e+01
  %79 = fadd double %78, 0xBFD23803FD659BE6
  %80 = tail call double @log(double %79) #15
  %81 = fmul double %80, 0x3FC6E3FE014D320D
  %82 = fadd double %81, 0x3FE1EAC9E7FC395D
  %83 = fcmp ogt double %82, 0.000000e+00
  br i1 %83, label %87, label %84

84:                                               ; preds = %77
  %85 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.17, i64 0, i64 0), i32 92, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i64 0, i64 0)) #15
  %86 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

87:                                               ; preds = %77, %74
  %88 = phi double [ %76, %74 ], [ %82, %77 ]
  %89 = fptrunc double %88 to float
  %90 = tail call float @llvm.copysign.f32(float %89, float %68) #15
  %91 = fpext float %90 to double
  %92 = fadd double %91, -4.000000e-02
  %93 = fmul double %92, 0x3FF0AAAAAAAAAAAB
  %94 = load i32, i32* %6, align 8
  br label %95

95:                                               ; preds = %64, %87
  %96 = phi i32 [ %94, %87 ], [ %65, %64 ]
  %97 = phi double [ %93, %87 ], [ 0xBFA5555555555556, %64 ]
  %98 = fptrunc double %97 to float
  store float %98, float* %67, align 4
  %99 = add nuw nsw i64 %66, 1
  %100 = zext i32 %96 to i64
  %101 = icmp ult i64 %99, %100
  br i1 %101, label %64, label %130

102:                                              ; preds = %9, %102
  %103 = phi i64 [ %126, %102 ], [ 0, %9 ]
  %104 = getelementptr inbounds float, float* %1, i64 %103
  %105 = bitcast float* %104 to <16 x i32>*
  %106 = load <16 x i32>, <16 x i32>* %105, align 64, !alias.scope !83, !noalias !86
  %107 = and <16 x i32> %106, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %108 = and <16 x i32> %106, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %109 = bitcast <16 x i32> %108 to <16 x float>
  %110 = fmul <16 x float> %109, <float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000>
  %111 = tail call <16 x float> @llvm.sqrt.v16f32(<16 x float> %109) #15
  fence acq_rel
  %112 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %111, <16 x float> <float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000>, <16 x float> <float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000>) #15
  %113 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %111, <16 x float> <float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000>, <16 x float> <float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000>) #15
  fence acq_rel
  %114 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %112, <16 x float> %111, <16 x float> <float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000>) #15
  %115 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %113, <16 x float> %111, <16 x float> <float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000>) #15
  fence acq_rel
  %116 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %114, <16 x float> %111, <16 x float> <float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000>) #15
  %117 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %115, <16 x float> %111, <16 x float> <float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000>) #15
  fence acq_rel
  %118 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %116, <16 x float> %111, <16 x float> <float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000>) #15
  %119 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %117, <16 x float> %111, <16 x float> <float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000>) #15
  fence acq_rel
  %120 = fdiv <16 x float> %118, %119
  %121 = fcmp ogt <16 x float> %109, <float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000>
  %122 = select <16 x i1> %121, <16 x float> %120, <16 x float> %110
  %123 = bitcast <16 x float> %122 to <16 x i32>
  %124 = and <16 x i32> %123, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %125 = or <16 x i32> %124, %107
  store <16 x i32> %125, <16 x i32>* %105, align 64, !alias.scope !88
  %126 = add nuw nsw i64 %103, 16
  %127 = load i32, i32* %10, align 8
  %128 = zext i32 %127 to i64
  %129 = icmp ult i64 %126, %128
  br i1 %129, label %102, label %130

130:                                              ; preds = %95, %24, %102, %9, %13, %5, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX321DoColorSpaceTransformEPNS_19ColorSpaceTransformEmPKfPf(%"class.jxl::ColorSpaceTransform"* nocapture readonly, i64, float*, float*) #8 {
  %5 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 8
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %19, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %1
  %14 = getelementptr inbounds i8, i8* %10, i64 %13
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #15
  %18 = bitcast i8* %14 to float*
  tail call void @_ZN3jxl6N_AVX315BeforeTransformEPNS_19ColorSpaceTransformEPKfPf(%"class.jxl::ColorSpaceTransform"* %0, float* %2, float* %18)
  br label %19

19:                                               ; preds = %4, %8
  %20 = phi float* [ %18, %8 ], [ %2, %4 ]
  %21 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 6
  %22 = load i8, i8* %21, align 8, !range !26
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %33, label %24

24:                                               ; preds = %19
  %25 = icmp eq float* %20, %3
  br i1 %25, label %46, label %26

26:                                               ; preds = %24
  %27 = bitcast float* %3 to i8*
  %28 = bitcast float* %20 to i8*
  %29 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = zext i32 %30 to i64
  %32 = shl nuw nsw i64 %31, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %27, i8* align 4 %28, i64 %32, i1 false)
  br label %46

33:                                               ; preds = %19
  %34 = bitcast float* %20 to i8*
  %35 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %36 = load %"struct.jxl::ColorSpaceTransform::SkcmsICC"*, %"struct.jxl::ColorSpaceTransform::SkcmsICC"** %35, align 8
  %37 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %36, i64 0, i32 2
  %38 = bitcast float* %3 to i8*
  %39 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %36, i64 0, i32 3
  %40 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 5
  %41 = load i64, i64* %40, align 8
  %42 = tail call zeroext i1 @skcms_Transform(i8* %34, i32 34, i32 0, %struct.skcms_ICCProfile* %37, i8* %38, i32 34, i32 0, %struct.skcms_ICCProfile* %39, i64 %41) #15
  br i1 %42, label %46, label %43

43:                                               ; preds = %33
  %44 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([214 x i8], [214 x i8]* @.str.2, i64 0, i64 0)) #15
  %45 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

46:                                               ; preds = %24, %33, %26
  %47 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 9
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %51, label %50

50:                                               ; preds = %46
  tail call void @_ZN3jxl6N_AVX314AfterTransformEPNS_19ColorSpaceTransformEPf(%"class.jxl::ColorSpaceTransform"* %0, float* %3)
  br label %51

51:                                               ; preds = %46, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR15BeforeTransformEPNS_19ColorSpaceTransformEPKfPf(%"class.jxl::ColorSpaceTransform"* nocapture readonly, float* nocapture readonly, float* nocapture) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 8
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %135 [
    i32 3, label %10
    i32 1, label %14
    i32 2, label %6
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %135, label %60

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %135, label %98

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 3
  %16 = load float, float* %15, align 8
  %17 = fcmp oeq float %16, 1.000000e+04
  %18 = fdiv float 1.000000e+04, %16
  %19 = select i1 %17, float 1.000000e+00, float %18
  %20 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %135, label %23

23:                                               ; preds = %14, %23
  %24 = phi i64 [ %56, %23 ], [ 0, %14 ]
  %25 = getelementptr inbounds float, float* %1, i64 %24
  %26 = bitcast float* %25 to i32*
  %27 = load i32, i32* %26, align 4, !alias.scope !91
  %28 = and i32 %27, -2147483648
  %29 = and i32 %27, 2147483647
  %30 = bitcast i32 %29 to float
  %31 = fmul float %30, %30
  %32 = fadd float %31, %30
  fence acq_rel
  %33 = fmul float %32, 0x3FE199E2C0000000
  %34 = fadd float %33, 0x40052A0C80000000
  %35 = fmul float %32, 0x40056AE160000000
  %36 = fadd float %35, 0xC040F435A0000000
  fence acq_rel
  %37 = fmul float %32, %34
  %38 = fadd float %37, 0x3FE7A2A140000000
  %39 = fmul float %32, %36
  %40 = fadd float %39, 0x4065CBAB60000000
  fence acq_rel
  %41 = fmul float %32, %38
  %42 = fadd float %41, 0xBF798A6DA0000000
  %43 = fmul float %32, %40
  %44 = fadd float %43, 0xC07ACBCA00000000
  fence acq_rel
  %45 = fmul float %32, %42
  %46 = fadd float %45, 0x3F313BFFE0000000
  %47 = fmul float %32, %44
  %48 = fadd float %47, 0x407A559A00000000
  fence acq_rel
  %49 = fdiv float %46, %48
  %50 = bitcast float %49 to i32
  %51 = and i32 %50, 2147483647
  %52 = or i32 %51, %28
  %53 = bitcast i32 %52 to float
  %54 = fmul float %19, %53
  %55 = getelementptr inbounds float, float* %2, i64 %24
  store float %54, float* %55, align 4, !alias.scope !94
  %56 = add nuw nsw i64 %24, 1
  %57 = load i32, i32* %20, align 8
  %58 = zext i32 %57 to i64
  %59 = icmp ult i64 %56, %58
  br i1 %59, label %23, label %135

60:                                               ; preds = %6, %90
  %61 = phi i64 [ %94, %90 ], [ 0, %6 ]
  %62 = getelementptr inbounds float, float* %1, i64 %61
  %63 = load float, float* %62, align 4
  %64 = fpext float %63 to double
  %65 = fmul double %64, 0x3FEEB851EB851EB8
  %66 = fadd double %65, 4.000000e-02
  %67 = fcmp oeq double %66, 0.000000e+00
  br i1 %67, label %90, label %68

68:                                               ; preds = %60
  %69 = tail call double @llvm.fabs.f64(double %66) #15
  %70 = fcmp ugt double %69, 5.000000e-01
  br i1 %70, label %74, label %71

71:                                               ; preds = %68
  %72 = fmul double %66, %66
  %73 = fmul double %72, 0x3FD5555555555555
  br label %84

74:                                               ; preds = %68
  %75 = fadd double %69, 0xBFE1EAC9E7FC395D
  %76 = fmul double %75, 0x40165E05183E19B4
  %77 = tail call double @exp(double %76) #15
  %78 = fadd double %77, 0x3FD23803FD659BE6
  %79 = fmul double %78, 0x3FB5555555555555
  %80 = fcmp ult double %79, 0.000000e+00
  br i1 %80, label %81, label %84

81:                                               ; preds = %74
  %82 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.17, i64 0, i64 0), i32 105, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i64 0, i64 0)) #15
  %83 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

84:                                               ; preds = %74, %71
  %85 = phi double [ %73, %71 ], [ %79, %74 ]
  %86 = fptrunc double %85 to float
  %87 = fptrunc double %66 to float
  %88 = tail call float @llvm.copysign.f32(float %86, float %87) #15
  %89 = fpext float %88 to double
  br label %90

90:                                               ; preds = %60, %84
  %91 = phi double [ %89, %84 ], [ 0.000000e+00, %60 ]
  %92 = fptrunc double %91 to float
  %93 = getelementptr inbounds float, float* %2, i64 %61
  store float %92, float* %93, align 4
  %94 = add nuw nsw i64 %61, 1
  %95 = load i32, i32* %7, align 8
  %96 = zext i32 %95 to i64
  %97 = icmp ult i64 %94, %96
  br i1 %97, label %60, label %135

98:                                               ; preds = %10, %98
  %99 = phi i64 [ %131, %98 ], [ 0, %10 ]
  %100 = getelementptr inbounds float, float* %1, i64 %99
  %101 = bitcast float* %100 to i32*
  %102 = load i32, i32* %101, align 4, !alias.scope !97
  %103 = and i32 %102, -2147483648
  %104 = and i32 %102, 2147483647
  %105 = bitcast i32 %104 to float
  %106 = fmul float %105, 0x3FB3D07220000000
  fence acq_rel
  %107 = fmul float %105, 0x3FEA45C1E0000000
  %108 = fadd float %107, 0x3FE97A1D40000000
  %109 = fmul float %105, 0x3F7AB5FBC0000000
  %110 = fadd float %109, 0xBFAC395780000000
  fence acq_rel
  %111 = fmul float %108, %105
  %112 = fadd float %111, 0x3FC4CC3620000000
  %113 = fmul float %110, %105
  %114 = fadd float %113, 0x3FDFEB9100000000
  fence acq_rel
  %115 = fmul float %112, %105
  %116 = fadd float %115, 0x3F855FAAA0000000
  %117 = fmul float %114, %105
  %118 = fadd float %117, 0x3FF13B4BC0000000
  fence acq_rel
  %119 = fmul float %116, %105
  %120 = fadd float %119, 0x3F2CD6CEE0000000
  %121 = fmul float %118, %105
  %122 = fadd float %121, 0x3FD0D804A0000000
  fence acq_rel
  %123 = fdiv float %120, %122
  %124 = fcmp ule float %105, 0x3FA4B5DCC0000000
  %125 = select i1 %124, float %106, float %123
  %126 = bitcast float %125 to i32
  %127 = and i32 %126, 2147483647
  %128 = or i32 %127, %103
  %129 = getelementptr inbounds float, float* %2, i64 %99
  %130 = bitcast float* %129 to i32*
  store i32 %128, i32* %130, align 4, !alias.scope !100
  %131 = add nuw nsw i64 %99, 1
  %132 = load i32, i32* %11, align 8
  %133 = zext i32 %132 to i64
  %134 = icmp ult i64 %131, %133
  br i1 %134, label %98, label %135

135:                                              ; preds = %90, %23, %98, %10, %14, %6, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR14AfterTransformEPNS_19ColorSpaceTransformEPf(%"class.jxl::ColorSpaceTransform"* nocapture readonly, float* noalias nocapture) local_unnamed_addr #9 {
  %3 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 9
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %151 [
    i32 3, label %9
    i32 1, label %13
    i32 2, label %5
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %151, label %77

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %151, label %115

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 3
  %15 = load float, float* %14, align 8
  %16 = fcmp oeq float %15, 1.000000e+04
  %17 = fmul float %15, 0x3F1A36E2E0000000
  %18 = select i1 %16, float 1.000000e+00, float %17
  %19 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %151, label %22

22:                                               ; preds = %13, %22
  %23 = phi i64 [ %73, %22 ], [ 0, %13 ]
  %24 = getelementptr inbounds float, float* %1, i64 %23
  %25 = load float, float* %24, align 4, !alias.scope !103
  %26 = fmul float %18, %25
  %27 = bitcast float %26 to i32
  %28 = and i32 %27, -2147483648
  %29 = and i32 %27, 2147483647
  %30 = bitcast i32 %29 to float
  %31 = tail call float @sqrtf(float %30) #15
  %32 = tail call float @sqrtf(float %31) #15
  %33 = fcmp uge float %30, 0x3F1A36E2E0000000
  fence acq_rel
  %34 = fmul float %32, 0x41117C49A0000000
  %35 = fsub float 0x40F0D229E0000000, %34
  %36 = fmul float %32, 0x41094CB4C0000000
  %37 = fsub float 0xC0E56F5AE0000000, %36
  fence acq_rel
  %38 = fmul float %32, %35
  %39 = fadd float %38, 0x4060E90700000000
  %40 = fmul float %32, %37
  %41 = fadd float %40, 0x40CF6A6280000000
  fence acq_rel
  %42 = fmul float %32, %39
  %43 = fadd float %42, 0x3FD8D70380000000
  %44 = fmul float %32, %41
  %45 = fadd float %44, 0x409716E040000000
  fence acq_rel
  %46 = fmul float %32, %43
  %47 = fadd float %46, 0x3EE4AF6040000000
  %48 = fmul float %32, %45
  %49 = fadd float %48, 0x4040DBFDC0000000
  fence acq_rel
  %50 = fdiv float %47, %49
  fence acq_rel
  %51 = fmul float %32, 0x4048313200000000
  %52 = fadd float %51, 0x4062A80D20000000
  %53 = fmul float %32, 0x4039E77860000000
  %54 = fadd float %53, 0x405C03E280000000
  fence acq_rel
  %55 = fmul float %32, %52
  %56 = fadd float %55, 0x404B9D2740000000
  %57 = fmul float %32, %54
  %58 = fadd float %57, 0x405728C640000000
  fence acq_rel
  %59 = fmul float %32, %56
  %60 = fadd float %59, 0xBFF1884E80000000
  %61 = fmul float %32, %58
  %62 = fadd float %61, 0x40342AC5C0000000
  fence acq_rel
  %63 = fmul float %32, %60
  %64 = fadd float %63, 0x3F8BAD2FA0000000
  %65 = fmul float %32, %62
  %66 = fadd float %65, 0x3FF032DB20000000
  fence acq_rel
  %67 = fdiv float %64, %66
  %68 = select i1 %33, float %67, float %50
  %69 = bitcast float %68 to i32
  %70 = and i32 %69, 2147483647
  %71 = or i32 %70, %28
  %72 = bitcast float* %24 to i32*
  store i32 %71, i32* %72, align 4, !alias.scope !106
  %73 = add nuw nsw i64 %23, 1
  %74 = load i32, i32* %19, align 8
  %75 = zext i32 %74 to i64
  %76 = icmp ult i64 %73, %75
  br i1 %76, label %22, label %151

77:                                               ; preds = %5, %108
  %78 = phi i32 [ %109, %108 ], [ %7, %5 ]
  %79 = phi i64 [ %112, %108 ], [ 0, %5 ]
  %80 = getelementptr inbounds float, float* %1, i64 %79
  %81 = load float, float* %80, align 4
  %82 = fcmp oeq float %81, 0.000000e+00
  br i1 %82, label %108, label %83

83:                                               ; preds = %77
  %84 = tail call float @llvm.fabs.f32(float %81)
  %85 = fpext float %84 to double
  %86 = fcmp ugt double %85, 0x3FB5555555555555
  br i1 %86, label %90, label %87

87:                                               ; preds = %83
  %88 = fmul double %85, 3.000000e+00
  %89 = tail call double @sqrt(double %88) #15
  br label %100

90:                                               ; preds = %83
  %91 = fmul double %85, 1.200000e+01
  %92 = fadd double %91, 0xBFD23803FD659BE6
  %93 = tail call double @log(double %92) #15
  %94 = fmul double %93, 0x3FC6E3FE014D320D
  %95 = fadd double %94, 0x3FE1EAC9E7FC395D
  %96 = fcmp ogt double %95, 0.000000e+00
  br i1 %96, label %100, label %97

97:                                               ; preds = %90
  %98 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.17, i64 0, i64 0), i32 92, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i64 0, i64 0)) #15
  %99 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

100:                                              ; preds = %90, %87
  %101 = phi double [ %89, %87 ], [ %95, %90 ]
  %102 = fptrunc double %101 to float
  %103 = tail call float @llvm.copysign.f32(float %102, float %81) #15
  %104 = fpext float %103 to double
  %105 = fadd double %104, -4.000000e-02
  %106 = fmul double %105, 0x3FF0AAAAAAAAAAAB
  %107 = load i32, i32* %6, align 8
  br label %108

108:                                              ; preds = %77, %100
  %109 = phi i32 [ %107, %100 ], [ %78, %77 ]
  %110 = phi double [ %106, %100 ], [ 0xBFA5555555555556, %77 ]
  %111 = fptrunc double %110 to float
  store float %111, float* %80, align 4
  %112 = add nuw nsw i64 %79, 1
  %113 = zext i32 %109 to i64
  %114 = icmp ult i64 %112, %113
  br i1 %114, label %77, label %151

115:                                              ; preds = %9, %115
  %116 = phi i64 [ %147, %115 ], [ 0, %9 ]
  %117 = getelementptr inbounds float, float* %1, i64 %116
  %118 = bitcast float* %117 to i32*
  %119 = load i32, i32* %118, align 4, !alias.scope !109
  %120 = and i32 %119, -2147483648
  %121 = and i32 %119, 2147483647
  %122 = bitcast i32 %121 to float
  %123 = fmul float %122, 0x4029D70A40000000
  %124 = tail call float @sqrtf(float %122) #15
  fence acq_rel
  %125 = fmul float %124, 0x3FE7874640000000
  %126 = fadd float %125, 0x3FF7965840000000
  %127 = fmul float %124, 0x3F98D4A540000000
  %128 = fadd float %127, 0x3FEDA08C60000000
  fence acq_rel
  %129 = fmul float %124, %126
  %130 = fadd float %129, 0x3FD8FC0E60000000
  %131 = fmul float %124, %128
  %132 = fadd float %131, 0x3FF573FC80000000
  fence acq_rel
  %133 = fmul float %124, %130
  %134 = fadd float %133, 0x3F75A816A0000000
  %135 = fmul float %124, %132
  %136 = fadd float %135, 0x3FD36F4A00000000
  fence acq_rel
  %137 = fmul float %124, %134
  %138 = fadd float %137, 0xBF40D3ADA0000000
  %139 = fmul float %124, %136
  %140 = fadd float %139, 0x3F84929360000000
  fence acq_rel
  %141 = fdiv float %138, %140
  %142 = fcmp ule float %122, 0x3F69A5C380000000
  %143 = select i1 %142, float %123, float %141
  %144 = bitcast float %143 to i32
  %145 = and i32 %144, 2147483647
  %146 = or i32 %145, %120
  store i32 %146, i32* %118, align 4, !alias.scope !112
  %147 = add nuw nsw i64 %116, 1
  %148 = load i32, i32* %10, align 8
  %149 = zext i32 %148 to i64
  %150 = icmp ult i64 %147, %149
  br i1 %150, label %115, label %151

151:                                              ; preds = %108, %22, %115, %9, %13, %5, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR21DoColorSpaceTransformEPNS_19ColorSpaceTransformEmPKfPf(%"class.jxl::ColorSpaceTransform"* nocapture readonly, i64, float*, float*) #9 {
  %5 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 8
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %19, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %1
  %14 = getelementptr inbounds i8, i8* %10, i64 %13
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #15
  %18 = bitcast i8* %14 to float*
  tail call void @_ZN3jxl8N_SCALAR15BeforeTransformEPNS_19ColorSpaceTransformEPKfPf(%"class.jxl::ColorSpaceTransform"* %0, float* %2, float* %18)
  br label %19

19:                                               ; preds = %4, %8
  %20 = phi float* [ %18, %8 ], [ %2, %4 ]
  %21 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 6
  %22 = load i8, i8* %21, align 8, !range !26
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %33, label %24

24:                                               ; preds = %19
  %25 = icmp eq float* %20, %3
  br i1 %25, label %46, label %26

26:                                               ; preds = %24
  %27 = bitcast float* %3 to i8*
  %28 = bitcast float* %20 to i8*
  %29 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = zext i32 %30 to i64
  %32 = shl nuw nsw i64 %31, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %27, i8* align 4 %28, i64 %32, i1 false)
  br label %46

33:                                               ; preds = %19
  %34 = bitcast float* %20 to i8*
  %35 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %36 = load %"struct.jxl::ColorSpaceTransform::SkcmsICC"*, %"struct.jxl::ColorSpaceTransform::SkcmsICC"** %35, align 8
  %37 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %36, i64 0, i32 2
  %38 = bitcast float* %3 to i8*
  %39 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %36, i64 0, i32 3
  %40 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 5
  %41 = load i64, i64* %40, align 8
  %42 = tail call zeroext i1 @skcms_Transform(i8* %34, i32 34, i32 0, %struct.skcms_ICCProfile* %37, i8* %38, i32 34, i32 0, %struct.skcms_ICCProfile* %39, i64 %41) #15
  br i1 %42, label %46, label %43

43:                                               ; preds = %33
  %44 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([214 x i8], [214 x i8]* @.str.2, i64 0, i64 0)) #15
  %45 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

46:                                               ; preds = %24, %33, %26
  %47 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 9
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %51, label %50

50:                                               ; preds = %46
  tail call void @_ZN3jxl8N_SCALAR14AfterTransformEPNS_19ColorSpaceTransformEPf(%"class.jxl::ColorSpaceTransform"* %0, float* %3)
  br label %51

51:                                               ; preds = %46, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl21DoColorSpaceTransformEPNS_19ColorSpaceTransformEmPKfPf(%"class.jxl::ColorSpaceTransform"*, i64, float*, float*) local_unnamed_addr #9 {
  %5 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %6 = and i32 %5, 2225
  %7 = tail call i32 @llvm.cttz.i32(i32 %6, i1 true) #15, !range !115
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [12 x void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)*], [12 x void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)*]* @_ZN3jxlL41DoColorSpaceTransformHighwayDispatchTableE, i64 0, i64 %8
  %10 = load void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)*, void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)** %9, align 8
  tail call void %10(%"class.jxl::ColorSpaceTransform"* %0, i64 %1, float* %2, float* %3) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl13ColorEncoding16SetFieldsFromICCEv(%"struct.jxl::ColorEncoding"*) local_unnamed_addr #9 align 2 {
  %2 = alloca %struct.skcms_Matrix3x3, align 4
  %3 = alloca %struct.skcms_Matrix3x3, align 4
  %4 = alloca %struct.skcms_Matrix3x3, align 4
  %5 = alloca %struct.skcms_Matrix3x3, align 4
  %6 = alloca [3 x float], align 4
  %7 = alloca %"struct.jxl::PrimariesCIExy", align 8
  %8 = alloca [3 x %"struct.jxl::CIExy"*], align 16
  %9 = alloca [3 x float], align 4
  %10 = alloca [3 x float], align 8
  %11 = alloca %struct.skcms_Matrix3x3, align 4
  %12 = alloca %struct.skcms_Matrix3x3, align 4
  %13 = alloca %"class.std::__1::vector", align 8
  %14 = alloca %struct.skcms_ICCProfile, align 8
  %15 = alloca %"class.jxl::PaddedBytes", align 8
  %16 = alloca %struct.skcms_ICCProfile, align 8
  %17 = alloca <2 x double>, align 16
  %18 = bitcast <2 x double>* %17 to %"struct.jxl::CIExy"*
  %19 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 9
  store i32 3, i32* %19, align 8
  %20 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 4, i32 1
  store i32 3, i32* %20, align 8
  %21 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 4
  %22 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 4, i32 2
  store i8 0, i8* %22, align 4
  %23 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 4, i32 4
  store i32 2, i32* %23, align 4
  %24 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 8, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = icmp ult i64 %25, 128
  br i1 %26, label %465, label %27

27:                                               ; preds = %1
  %28 = bitcast %struct.skcms_ICCProfile* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1008, i8* nonnull %28) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* align 8 bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } }* @__const._ZN3jxl12_GLOBAL__N_122ProfileEquivalentToICCERK16skcms_ICCProfileRKNS_11PaddedBytesE.profile2 to i8*), i64 1008, i1 false)
  %29 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = call zeroext i1 @skcms_ParseWithA2BPriority(i8* %30, i64 %25, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @_ZZL11skcms_ParsePKvmP16skcms_ICCProfileE8priority, i64 0, i64 0), i32 2, %struct.skcms_ICCProfile* nonnull %16) #15
  br i1 %31, label %32, label %463

32:                                               ; preds = %27
  %33 = load i64, i64* %24, align 8
  %34 = icmp ult i64 %33, 67
  br i1 %34, label %35, label %38

35:                                               ; preds = %32
  %36 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.20, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i64 0, i64 0)) #15
  %37 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

38:                                               ; preds = %32
  %39 = load i8*, i8** %29, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 67
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = icmp ugt i8 %41, 3
  br i1 %43, label %463, label %44

44:                                               ; preds = %38
  %45 = getelementptr inbounds i8, i8* %39, i64 64
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %463

48:                                               ; preds = %44
  %49 = getelementptr inbounds i8, i8* %39, i64 65
  %50 = load i8, i8* %49, align 1
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %463

52:                                               ; preds = %48
  %53 = getelementptr inbounds i8, i8* %39, i64 66
  %54 = load i8, i8* %53, align 1
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %463

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %16, i64 0, i32 2
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 1196573017
  %60 = select i1 %59, i32 1, i32 3
  %61 = icmp eq i32 %58, 1380401696
  %62 = select i1 %61, i32 0, i32 %60
  store i32 %62, i32* %19, align 8
  store i32 %62, i32* %20, align 8
  %63 = bitcast <2 x double>* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %63) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %63, i8 0, i64 16, i1 false) #15
  %64 = bitcast [3 x float]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %64) #15
  %65 = getelementptr inbounds [3 x float], [3 x float]* %10, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %65, align 8
  %66 = getelementptr inbounds [3 x float], [3 x float]* %10, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %66, align 4
  %67 = getelementptr inbounds [3 x float], [3 x float]* %10, i64 0, i64 2
  store float 0xFFFFFFFFE0000000, float* %67, align 8
  %68 = call zeroext i1 @skcms_GetWTPT(%struct.skcms_ICCProfile* nonnull %16, float* nonnull %65) #15
  br i1 %68, label %70, label %69

69:                                               ; preds = %56
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %64) #15
  br label %461

70:                                               ; preds = %56
  %71 = bitcast %struct.skcms_Matrix3x3* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %71) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %71, i8 -1, i64 36, i1 false) #15
  %72 = call zeroext i1 @skcms_GetCHAD(%struct.skcms_ICCProfile* nonnull %16, %struct.skcms_Matrix3x3* nonnull %11) #15
  br i1 %72, label %86, label %73

73:                                               ; preds = %70
  %74 = bitcast [3 x float]* %10 to <2 x float>*
  %75 = load <2 x float>, <2 x float>* %74, align 8
  %76 = extractelement <2 x float> %75, i32 0
  %77 = extractelement <2 x float> %75, i32 1
  %78 = fadd float %76, %77
  %79 = load float, float* %67, align 8
  %80 = fadd float %78, %79
  %81 = fdiv float 1.000000e+00, %80
  %82 = insertelement <2 x float> undef, float %81, i32 0
  %83 = shufflevector <2 x float> %82, <2 x float> undef, <2 x i32> zeroinitializer
  %84 = fmul <2 x float> %75, %83
  %85 = fpext <2 x float> %84 to <2 x double>
  store <2 x double> %85, <2 x double>* %17, align 16
  br label %145

86:                                               ; preds = %70
  %87 = bitcast %struct.skcms_Matrix3x3* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %87) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %87, i8 -1, i64 36, i1 false) #15
  %88 = call zeroext i1 @skcms_Matrix3x3_invert(%struct.skcms_Matrix3x3* nonnull %11, %struct.skcms_Matrix3x3* nonnull %12) #15
  br i1 %88, label %89, label %144

89:                                               ; preds = %86
  %90 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 0, i64 0
  %91 = load float, float* %90, align 4
  %92 = load float, float* %65, align 8
  %93 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 0, i64 1
  %94 = load float, float* %93, align 4
  %95 = load float, float* %66, align 4
  %96 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 0, i64 2
  %97 = load float, float* %96, align 4
  %98 = load float, float* %67, align 8
  %99 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 1, i64 0
  %100 = load float, float* %99, align 4
  %101 = insertelement <2 x float> undef, float %91, i32 0
  %102 = insertelement <2 x float> %101, float %92, i32 1
  %103 = insertelement <2 x float> undef, float %92, i32 0
  %104 = insertelement <2 x float> %103, float %100, i32 1
  %105 = fmul <2 x float> %102, %104
  %106 = fadd <2 x float> %105, zeroinitializer
  %107 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 1, i64 1
  %108 = load float, float* %107, align 4
  %109 = insertelement <2 x float> undef, float %94, i32 0
  %110 = insertelement <2 x float> %109, float %95, i32 1
  %111 = insertelement <2 x float> undef, float %95, i32 0
  %112 = insertelement <2 x float> %111, float %108, i32 1
  %113 = fmul <2 x float> %110, %112
  %114 = fadd <2 x float> %106, %113
  %115 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 1, i64 2
  %116 = load float, float* %115, align 4
  %117 = insertelement <2 x float> undef, float %97, i32 0
  %118 = insertelement <2 x float> %117, float %98, i32 1
  %119 = insertelement <2 x float> undef, float %98, i32 0
  %120 = insertelement <2 x float> %119, float %116, i32 1
  %121 = fmul <2 x float> %118, %120
  %122 = fadd <2 x float> %114, %121
  %123 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 2, i64 0
  %124 = load float, float* %123, align 4
  %125 = fmul float %92, %124
  %126 = fadd float %125, 0.000000e+00
  %127 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 2, i64 1
  %128 = load float, float* %127, align 4
  %129 = fmul float %95, %128
  %130 = fadd float %126, %129
  %131 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 2, i64 2
  %132 = load float, float* %131, align 4
  %133 = fmul float %98, %132
  %134 = fadd float %130, %133
  %135 = extractelement <2 x float> %122, i32 0
  %136 = extractelement <2 x float> %122, i32 1
  %137 = fadd float %135, %136
  %138 = fadd float %137, %134
  %139 = fdiv float 1.000000e+00, %138
  %140 = insertelement <2 x float> undef, float %139, i32 0
  %141 = shufflevector <2 x float> %140, <2 x float> undef, <2 x i32> zeroinitializer
  %142 = fmul <2 x float> %122, %141
  %143 = fpext <2 x float> %142 to <2 x double>
  store <2 x double> %143, <2 x double>* %17, align 16
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %87) #15
  br label %145

144:                                              ; preds = %86
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %87) #15
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %71) #15
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %64) #15
  br label %461

145:                                              ; preds = %89, %73
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %71) #15
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %64) #15
  %146 = call i32 @_ZN3jxl13ColorEncoding13SetWhitePointERKNS_5CIExyE(%"struct.jxl::ColorEncoding"* %0, %"struct.jxl::CIExy"* nonnull dereferenceable(16) %18) #15
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %461

148:                                              ; preds = %145
  %149 = load i32, i32* %19, align 8
  %150 = add i32 %149, -1
  %151 = icmp ugt i32 %150, 1
  br i1 %151, label %152, label %281

152:                                              ; preds = %148
  %153 = bitcast %struct.skcms_Matrix3x3* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %153) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %153, i8 -1, i64 36, i1 false) #15
  %154 = bitcast %struct.skcms_Matrix3x3* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %154) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %154, i8 -1, i64 36, i1 false) #15
  %155 = call zeroext i1 @skcms_GetCHAD(%struct.skcms_ICCProfile* nonnull %16, %struct.skcms_Matrix3x3* nonnull %2) #15
  br i1 %155, label %156, label %158

156:                                              ; preds = %152
  %157 = call zeroext i1 @skcms_Matrix3x3_invert(%struct.skcms_Matrix3x3* nonnull %2, %struct.skcms_Matrix3x3* nonnull %3) #15
  br i1 %157, label %198, label %276

158:                                              ; preds = %152
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %64) #15
  store float 0xFFFFFFFFE0000000, float* %65, align 8
  store float 0xFFFFFFFFE0000000, float* %66, align 4
  store float 0xFFFFFFFFE0000000, float* %67, align 8
  %159 = call i32 @_ZN3jxl20CIEXYZFromWhiteCIExyERKNS_5CIExyEPf(%"struct.jxl::CIExy"* nonnull dereferenceable(16) %18, float* nonnull %65) #15
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %162, label %161

161:                                              ; preds = %158
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %64) #15
  br label %276

162:                                              ; preds = %158
  %163 = load float, float* %65, align 8
  %164 = fmul float %163, 0x3FECA4A8C0000000
  %165 = fadd float %164, 0.000000e+00
  %166 = load float, float* %66, align 4
  %167 = fmul float %166, 0x3FD10CB2A0000000
  %168 = fadd float %165, %167
  %169 = load float, float* %67, align 8
  %170 = fmul float %169, 0x3FC4A8C160000000
  %171 = fsub float %168, %170
  %172 = fmul float %163, 0x3FE801A360000000
  %173 = fsub float 0.000000e+00, %172
  %174 = fmul float %166, 0x3FFB6A7F00000000
  %175 = fadd float %173, %174
  %176 = fmul float %169, 0x3FA2CA57A0000000
  %177 = fadd float %175, %176
  %178 = fmul float %163, 0x3FA3EAB360000000
  %179 = fadd float %178, 0.000000e+00
  %180 = fmul float %166, 0x3FB1893740000000
  %181 = fsub float %179, %180
  %182 = fmul float %169, 0x3FF0793DE0000000
  %183 = fadd float %181, %182
  %184 = fdiv float %171, 0x3FEFE1D6C0000000
  %185 = fdiv float %177, 0x3FF053AD60000000
  %186 = fdiv float %183, 0x3FEA2FC2A0000000
  %187 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 0, i64 0
  store float %184, float* %187, align 4
  %188 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 0, i64 1
  store float 0.000000e+00, float* %188, align 4
  %189 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 0, i64 2
  store float 0.000000e+00, float* %189, align 4
  %190 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 1, i64 0
  store float 0.000000e+00, float* %190, align 4
  %191 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 1, i64 1
  store float %185, float* %191, align 4
  %192 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 1, i64 2
  store float 0.000000e+00, float* %192, align 4
  %193 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 2, i64 0
  store float 0.000000e+00, float* %193, align 4
  %194 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 2, i64 1
  store float 0.000000e+00, float* %194, align 4
  %195 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 2, i64 2
  store float %186, float* %195, align 4
  %196 = bitcast %struct.skcms_Matrix3x3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %196) #15
  call void @skcms_Matrix3x3_concat(%struct.skcms_Matrix3x3* nonnull sret %4, %struct.skcms_Matrix3x3* nonnull @_ZZN3jxl12_GLOBAL__N_117IdentifyPrimariesERK16skcms_ICCProfileRKNS_5CIExyEPNS_13ColorEncodingEE11kXYZFromLMS, %struct.skcms_Matrix3x3* nonnull %3) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %154, i8* nonnull align 4 %196, i64 36, i1 false) #15
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %196) #15
  %197 = bitcast %struct.skcms_Matrix3x3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %197) #15
  call void @skcms_Matrix3x3_concat(%struct.skcms_Matrix3x3* nonnull sret %5, %struct.skcms_Matrix3x3* nonnull %3, %struct.skcms_Matrix3x3* nonnull @_ZZN3jxl12_GLOBAL__N_117IdentifyPrimariesERK16skcms_ICCProfileRKNS_5CIExyEPNS_13ColorEncodingEE11kLMSFromXYZ) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %154, i8* nonnull align 4 %197, i64 36, i1 false) #15
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %197) #15
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %64) #15
  br label %198

198:                                              ; preds = %162, %156
  %199 = bitcast [3 x float]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %199) #15
  %200 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %200, align 4
  %201 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %201, align 4
  %202 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 0, i64 2
  store float 0xFFFFFFFFE0000000, float* %202, align 4
  %203 = bitcast %"struct.jxl::PrimariesCIExy"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %203) #15
  %204 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %7, i64 0, i32 0
  %205 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %7, i64 0, i32 1
  %206 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %7, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %203, i8 0, i64 48, i1 false) #15
  %207 = bitcast [3 x %"struct.jxl::CIExy"*]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %207) #15
  %208 = getelementptr inbounds [3 x %"struct.jxl::CIExy"*], [3 x %"struct.jxl::CIExy"*]* %8, i64 0, i64 0
  %209 = getelementptr inbounds [3 x %"struct.jxl::CIExy"*], [3 x %"struct.jxl::CIExy"*]* %8, i64 0, i64 1
  %210 = getelementptr inbounds [3 x %"struct.jxl::CIExy"*], [3 x %"struct.jxl::CIExy"*]* %8, i64 0, i64 2
  store %"struct.jxl::CIExy"* %204, %"struct.jxl::CIExy"** %208, align 16
  store %"struct.jxl::CIExy"* %205, %"struct.jxl::CIExy"** %209, align 8
  store %"struct.jxl::CIExy"* %206, %"struct.jxl::CIExy"** %210, align 16
  %211 = bitcast [3 x float]* %9 to i8*
  %212 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 0, i64 0
  %213 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 0, i64 1
  %214 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 0, i64 2
  %215 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 1, i64 0
  %216 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 1, i64 1
  %217 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 1, i64 2
  %218 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 2, i64 0
  %219 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 2, i64 1
  %220 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %3, i64 0, i32 0, i64 2, i64 2
  br label %221

221:                                              ; preds = %221, %198
  %222 = phi i64 [ 0, %198 ], [ %274, %221 ]
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %211) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %211, i8 0, i64 12, i1 false) #15
  %223 = getelementptr inbounds [3 x float], [3 x float]* %9, i64 0, i64 %222
  store float 1.000000e+00, float* %223, align 4
  %224 = call %struct.skcms_ICCProfile* @skcms_XYZD50_profile() #15
  %225 = call zeroext i1 @skcms_Transform(i8* nonnull %211, i32 34, i32 0, %struct.skcms_ICCProfile* nonnull %16, i8* nonnull %199, i32 34, i32 0, %struct.skcms_ICCProfile* %224, i64 1) #15
  %226 = load float, float* %212, align 4
  %227 = load float, float* %200, align 4
  %228 = load float, float* %213, align 4
  %229 = load float, float* %201, align 4
  %230 = load float, float* %214, align 4
  %231 = load float, float* %202, align 4
  %232 = load float, float* %215, align 4
  %233 = insertelement <2 x float> undef, float %226, i32 0
  %234 = insertelement <2 x float> %233, float %227, i32 1
  %235 = insertelement <2 x float> undef, float %227, i32 0
  %236 = insertelement <2 x float> %235, float %232, i32 1
  %237 = fmul <2 x float> %234, %236
  %238 = fadd <2 x float> %237, zeroinitializer
  %239 = load float, float* %216, align 4
  %240 = insertelement <2 x float> undef, float %228, i32 0
  %241 = insertelement <2 x float> %240, float %229, i32 1
  %242 = insertelement <2 x float> undef, float %229, i32 0
  %243 = insertelement <2 x float> %242, float %239, i32 1
  %244 = fmul <2 x float> %241, %243
  %245 = fadd <2 x float> %238, %244
  %246 = load float, float* %217, align 4
  %247 = insertelement <2 x float> undef, float %230, i32 0
  %248 = insertelement <2 x float> %247, float %231, i32 1
  %249 = insertelement <2 x float> undef, float %231, i32 0
  %250 = insertelement <2 x float> %249, float %246, i32 1
  %251 = fmul <2 x float> %248, %250
  %252 = fadd <2 x float> %245, %251
  %253 = load float, float* %218, align 4
  %254 = fmul float %227, %253
  %255 = fadd float %254, 0.000000e+00
  %256 = load float, float* %219, align 4
  %257 = fmul float %229, %256
  %258 = fadd float %255, %257
  %259 = load float, float* %220, align 4
  %260 = fmul float %231, %259
  %261 = fadd float %258, %260
  %262 = extractelement <2 x float> %252, i32 0
  %263 = extractelement <2 x float> %252, i32 1
  %264 = fadd float %262, %263
  %265 = fadd float %264, %261
  %266 = fdiv float 1.000000e+00, %265
  %267 = insertelement <2 x float> undef, float %266, i32 0
  %268 = shufflevector <2 x float> %267, <2 x float> undef, <2 x i32> zeroinitializer
  %269 = fmul <2 x float> %252, %268
  %270 = fpext <2 x float> %269 to <2 x double>
  %271 = getelementptr inbounds [3 x %"struct.jxl::CIExy"*], [3 x %"struct.jxl::CIExy"*]* %8, i64 0, i64 %222
  %272 = bitcast %"struct.jxl::CIExy"** %271 to <2 x double>**
  %273 = load <2 x double>*, <2 x double>** %272, align 8
  store <2 x double> %270, <2 x double>* %273, align 8
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %211) #15
  %274 = add nuw nsw i64 %222, 1
  %275 = icmp eq i64 %274, 3
  br i1 %275, label %278, label %221

276:                                              ; preds = %161, %156
  %277 = phi i32 [ 1, %156 ], [ %159, %161 ]
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %154) #15
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %153) #15
  br label %461

278:                                              ; preds = %221
  %279 = call i32 @_ZN3jxl13ColorEncoding12SetPrimariesERKNS_14PrimariesCIExyE(%"struct.jxl::ColorEncoding"* %0, %"struct.jxl::PrimariesCIExy"* nonnull dereferenceable(48) %7) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %207) #15
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %203) #15
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %199) #15
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %154) #15
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %153) #15
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %281, label %461

281:                                              ; preds = %148, %278
  %282 = call zeroext i1 @_ZN3jxl22CustomTransferFunction11SetImplicitEv(%"struct.jxl::CustomTransferFunction"* %21) #15
  br i1 %282, label %459, label %283

283:                                              ; preds = %281
  %284 = bitcast %"class.std::__1::vector"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %284) #15, !noalias !116
  %285 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  %286 = bitcast i32** %285 to i64*
  %287 = bitcast %"class.std::__1::vector"* %13 to i64*
  %288 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 0, i32 0, i32 1
  %289 = bitcast i32** %288 to i64*
  %290 = call i8* @_Znwm(i64 28) #18, !noalias !119
  %291 = ptrtoint i8* %290 to i64
  %292 = getelementptr inbounds i8, i8* %290, i64 28
  %293 = ptrtoint i8* %292 to i64
  store i64 %291, i64* %287, align 8, !alias.scope !119, !noalias !116
  store i64 %293, i64* %286, align 8, !alias.scope !119, !noalias !116
  %294 = bitcast i8* %290 to <4 x i32>*
  store <4 x i32> <i32 1, i32 2, i32 8, i32 13>, <4 x i32>* %294, align 4, !noalias !116
  %295 = getelementptr inbounds i8, i8* %290, i64 16
  %296 = ptrtoint i8* %295 to i64
  store i64 %296, i64* %289, align 8, !noalias !116
  %297 = bitcast i8* %295 to i32*
  store i32 16, i32* %297, align 4, !noalias !116
  %298 = getelementptr inbounds i8, i8* %290, i64 20
  %299 = bitcast i8* %298 to i32*
  %300 = ptrtoint i8* %298 to i64
  store i64 %300, i64* %289, align 8, !noalias !116
  %301 = load i32*, i32** %285, align 8, !noalias !116
  %302 = ptrtoint i32* %301 to i64
  %303 = icmp ugt i32* %301, %299
  br i1 %303, label %304, label %310

304:                                              ; preds = %283
  store i32 17, i32* %299, align 4, !noalias !116
  %305 = getelementptr inbounds i8, i8* %290, i64 24
  %306 = bitcast i8* %305 to i32*
  %307 = ptrtoint i8* %305 to i64
  store i64 %307, i64* %289, align 8, !noalias !116
  %308 = load i32*, i32** %285, align 8, !noalias !116
  %309 = ptrtoint i32* %308 to i64
  br label %357

310:                                              ; preds = %283
  %311 = ptrtoint i8* %298 to i64
  %312 = load i64, i64* %287, align 8, !noalias !116
  %313 = sub i64 %311, %312
  %314 = ashr exact i64 %313, 2
  %315 = add nsw i64 %314, 1
  %316 = icmp ugt i64 %315, 4611686018427387903
  br i1 %316, label %317, label %319

317:                                              ; preds = %310
  %318 = bitcast %"class.std::__1::vector"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %318) #17
  unreachable

319:                                              ; preds = %310
  %320 = sub i64 %302, %312
  %321 = ashr exact i64 %320, 2
  %322 = icmp ult i64 %321, 2305843009213693951
  br i1 %322, label %323, label %331

323:                                              ; preds = %319
  %324 = ashr exact i64 %320, 1
  %325 = icmp ult i64 %324, %315
  %326 = select i1 %325, i64 %315, i64 %324
  %327 = icmp eq i64 %326, 0
  br i1 %327, label %336, label %328

328:                                              ; preds = %323
  %329 = icmp ugt i64 %326, 4611686018427387903
  br i1 %329, label %330, label %331

330:                                              ; preds = %328
  call void @abort() #17
  unreachable

331:                                              ; preds = %328, %319
  %332 = phi i64 [ %326, %328 ], [ 4611686018427387903, %319 ]
  %333 = shl i64 %332, 2
  %334 = call i8* @_Znwm(i64 %333) #18
  %335 = bitcast i8* %334 to i32*
  br label %336

336:                                              ; preds = %331, %323
  %337 = phi i64 [ %332, %331 ], [ 0, %323 ]
  %338 = phi i32* [ %335, %331 ], [ null, %323 ]
  %339 = getelementptr inbounds i32, i32* %338, i64 %314
  %340 = getelementptr inbounds i32, i32* %338, i64 %337
  %341 = ptrtoint i32* %340 to i64
  store i32 17, i32* %339, align 4, !noalias !116
  %342 = getelementptr inbounds i32, i32* %339, i64 1
  %343 = ptrtoint i32* %342 to i64
  %344 = sub i64 %300, %312
  %345 = ashr exact i64 %344, 2
  %346 = sub nsw i64 0, %345
  %347 = getelementptr inbounds i32, i32* %339, i64 %346
  %348 = ptrtoint i32* %347 to i64
  %349 = icmp sgt i64 %344, 0
  br i1 %349, label %350, label %353

350:                                              ; preds = %336
  %351 = bitcast i32* %347 to i8*
  %352 = inttoptr i64 %312 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %351, i8* align 4 %352, i64 %344, i1 false) #15
  br label %353

353:                                              ; preds = %350, %336
  store i64 %348, i64* %287, align 8, !noalias !116
  store i64 %343, i64* %289, align 8, !noalias !116
  store i64 %341, i64* %286, align 8, !noalias !116
  %354 = icmp eq i64 %312, 0
  br i1 %354, label %357, label %355

355:                                              ; preds = %353
  %356 = inttoptr i64 %312 to i8*
  call void @_ZdlPv(i8* %356) #18
  br label %357

357:                                              ; preds = %355, %353, %304
  %358 = phi i64 [ %309, %304 ], [ %341, %353 ], [ %341, %355 ]
  %359 = phi i64 [ %307, %304 ], [ %343, %353 ], [ %343, %355 ]
  %360 = phi i32* [ %308, %304 ], [ %340, %353 ], [ %340, %355 ]
  %361 = phi i32* [ %306, %304 ], [ %342, %353 ], [ %342, %355 ]
  %362 = icmp ult i32* %361, %360
  br i1 %362, label %363, label %368

363:                                              ; preds = %357
  store i32 18, i32* %361, align 4, !noalias !116
  %364 = getelementptr inbounds i32, i32* %361, i64 1
  %365 = ptrtoint i32* %364 to i64
  store i64 %365, i64* %289, align 8, !noalias !116
  %366 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 0, i32 0, i32 0
  %367 = load i32*, i32** %366, align 8, !noalias !116
  br label %415

368:                                              ; preds = %357
  %369 = ptrtoint i32* %361 to i64
  %370 = load i64, i64* %287, align 8, !noalias !116
  %371 = sub i64 %369, %370
  %372 = ashr exact i64 %371, 2
  %373 = add nsw i64 %372, 1
  %374 = icmp ugt i64 %373, 4611686018427387903
  br i1 %374, label %375, label %377

375:                                              ; preds = %368
  %376 = bitcast %"class.std::__1::vector"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %376) #17
  unreachable

377:                                              ; preds = %368
  %378 = sub i64 %358, %370
  %379 = ashr exact i64 %378, 2
  %380 = icmp ult i64 %379, 2305843009213693951
  br i1 %380, label %381, label %389

381:                                              ; preds = %377
  %382 = ashr exact i64 %378, 1
  %383 = icmp ult i64 %382, %373
  %384 = select i1 %383, i64 %373, i64 %382
  %385 = icmp eq i64 %384, 0
  br i1 %385, label %394, label %386

386:                                              ; preds = %381
  %387 = icmp ugt i64 %384, 4611686018427387903
  br i1 %387, label %388, label %389

388:                                              ; preds = %386
  call void @abort() #17
  unreachable

389:                                              ; preds = %386, %377
  %390 = phi i64 [ %384, %386 ], [ 4611686018427387903, %377 ]
  %391 = shl i64 %390, 2
  %392 = call i8* @_Znwm(i64 %391) #18
  %393 = bitcast i8* %392 to i32*
  br label %394

394:                                              ; preds = %389, %381
  %395 = phi i64 [ %390, %389 ], [ 0, %381 ]
  %396 = phi i32* [ %393, %389 ], [ null, %381 ]
  %397 = getelementptr inbounds i32, i32* %396, i64 %372
  %398 = getelementptr inbounds i32, i32* %396, i64 %395
  %399 = ptrtoint i32* %398 to i64
  store i32 18, i32* %397, align 4, !noalias !116
  %400 = getelementptr inbounds i32, i32* %397, i64 1
  %401 = ptrtoint i32* %400 to i64
  %402 = sub i64 %359, %370
  %403 = ashr exact i64 %402, 2
  %404 = sub nsw i64 0, %403
  %405 = getelementptr inbounds i32, i32* %397, i64 %404
  %406 = ptrtoint i32* %405 to i64
  %407 = icmp sgt i64 %402, 0
  br i1 %407, label %408, label %411

408:                                              ; preds = %394
  %409 = bitcast i32* %405 to i8*
  %410 = inttoptr i64 %370 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %409, i8* align 4 %410, i64 %402, i1 false) #15
  br label %411

411:                                              ; preds = %408, %394
  store i64 %406, i64* %287, align 8, !noalias !116
  store i64 %401, i64* %289, align 8, !noalias !116
  store i64 %399, i64* %286, align 8, !noalias !116
  %412 = icmp eq i64 %370, 0
  br i1 %412, label %415, label %413

413:                                              ; preds = %411
  %414 = inttoptr i64 %370 to i8*
  call void @_ZdlPv(i8* %414) #18
  br label %415

415:                                              ; preds = %413, %411, %363
  %416 = phi i32* [ %364, %363 ], [ %400, %411 ], [ %400, %413 ]
  %417 = phi i32* [ %367, %363 ], [ %405, %411 ], [ %405, %413 ]
  %418 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 0, i32 0, i32 0
  %419 = icmp eq i32* %417, %416
  br i1 %419, label %449, label %420

420:                                              ; preds = %415
  %421 = bitcast %struct.skcms_ICCProfile* %14 to i8*
  %422 = bitcast %"class.jxl::PaddedBytes"* %15 to i8*
  %423 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %15, i64 0, i32 0
  %424 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %15, i64 0, i32 2, i32 0, i32 0, i32 0
  br label %425

425:                                              ; preds = %446, %420
  %426 = phi i32* [ %417, %420 ], [ %447, %446 ]
  %427 = load i32, i32* %426, align 4
  %428 = icmp eq i32 %427, 2
  br i1 %428, label %446, label %429

429:                                              ; preds = %425
  store i8 0, i8* %22, align 4, !alias.scope !116
  store i32 %427, i32* %23, align 4, !alias.scope !116
  call void @llvm.lifetime.start.p0i8(i64 1008, i8* nonnull %421) #15, !noalias !116
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %421, i8* align 8 bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } }* @__const._ZN3jxl12_GLOBAL__N_122ProfileEquivalentToICCERK16skcms_ICCProfileRKNS_11PaddedBytesE.profile2 to i8*), i64 1008, i1 false) #15
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %422) #15, !noalias !116
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %422, i8 0, i64 24, i1 false) #15, !noalias !116
  %430 = call i32 @_ZN3jxl18MaybeCreateProfileERKNS_13ColorEncodingEPNS_11PaddedBytesE(%"struct.jxl::ColorEncoding"* dereferenceable(152) %0, %"class.jxl::PaddedBytes"* nonnull %15) #15
  %431 = icmp eq i32 %430, 0
  br i1 %431, label %432, label %438

432:                                              ; preds = %429
  %433 = load i8*, i8** %424, align 8, !noalias !116
  %434 = load i64, i64* %423, align 8, !noalias !116
  %435 = call zeroext i1 @skcms_ParseWithA2BPriority(i8* %433, i64 %434, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @_ZZL11skcms_ParsePKvmP16skcms_ICCProfileE8priority, i64 0, i64 0), i32 2, %struct.skcms_ICCProfile* nonnull %14) #15
  br i1 %435, label %436, label %438

436:                                              ; preds = %432
  %437 = call zeroext i1 @skcms_ApproximatelyEqualProfiles(%struct.skcms_ICCProfile* nonnull %16, %struct.skcms_ICCProfile* nonnull %14) #15
  br i1 %437, label %439, label %438

438:                                              ; preds = %436, %432, %429
  br label %439

439:                                              ; preds = %438, %436
  %440 = phi i32 [ 0, %438 ], [ 1, %436 ]
  %441 = load i8*, i8** %424, align 8, !noalias !116
  store i8* null, i8** %424, align 8, !noalias !116
  %442 = icmp eq i8* %441, null
  br i1 %442, label %444, label %443

443:                                              ; preds = %439
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %441) #15
  br label %444

444:                                              ; preds = %443, %439
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %422) #15, !noalias !116
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %421) #15, !noalias !116
  %445 = icmp eq i32 %440, 0
  br i1 %445, label %446, label %449

446:                                              ; preds = %444, %425
  %447 = getelementptr inbounds i32, i32* %426, i64 1
  %448 = icmp eq i32* %447, %416
  br i1 %448, label %449, label %425

449:                                              ; preds = %446, %444, %415
  %450 = phi i32 [ 2, %415 ], [ 1, %444 ], [ 2, %446 ]
  %451 = load i32*, i32** %418, align 8, !noalias !116
  %452 = icmp eq i32* %451, null
  br i1 %452, label %456, label %453

453:                                              ; preds = %449
  %454 = ptrtoint i32* %451 to i64
  store i64 %454, i64* %289, align 8, !noalias !116
  %455 = bitcast i32* %451 to i8*
  call void @_ZdlPv(i8* %455) #18
  br label %456

456:                                              ; preds = %453, %449
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %284) #15, !noalias !116
  %457 = icmp eq i32 %450, 2
  br i1 %457, label %458, label %459

458:                                              ; preds = %456
  store i8 0, i8* %22, align 4, !alias.scope !116
  store i32 2, i32* %23, align 4, !alias.scope !116
  br label %459

459:                                              ; preds = %281, %456, %458
  %460 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 5
  store i32 %42, i32* %460, align 8
  br label %461

461:                                              ; preds = %144, %278, %276, %145, %69, %459
  %462 = phi i32 [ 0, %459 ], [ 1, %69 ], [ 1, %144 ], [ %146, %145 ], [ %277, %276 ], [ %279, %278 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %63) #15
  br label %463

463:                                              ; preds = %38, %44, %48, %52, %27, %461
  %464 = phi i32 [ %462, %461 ], [ 1, %27 ], [ 1, %52 ], [ 1, %48 ], [ 1, %44 ], [ 1, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %28) #15
  br label %465

465:                                              ; preds = %1, %463
  %466 = phi i32 [ %464, %463 ], [ 1, %1 ]
  ret i32 %466
}

declare i32 @_ZN3jxl13ColorEncoding13SetWhitePointERKNS_5CIExyE(%"struct.jxl::ColorEncoding"*, %"struct.jxl::CIExy"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl13ColorEncoding15DecideIfWantICCEv(%"struct.jxl::ColorEncoding"*) local_unnamed_addr #9 align 2 {
  %2 = alloca %struct.skcms_ICCProfile, align 8
  %3 = alloca %"class.jxl::PaddedBytes", align 8
  %4 = alloca %struct.skcms_ICCProfile, align 8
  %5 = bitcast %"class.jxl::PaddedBytes"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #15
  %6 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %3, i64 0, i32 0
  %7 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %3, i64 0, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #15
  %8 = bitcast %struct.skcms_ICCProfile* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1008, i8* nonnull %8) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* align 8 bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } }* @__const._ZN3jxl12_GLOBAL__N_122ProfileEquivalentToICCERK16skcms_ICCProfileRKNS_11PaddedBytesE.profile2 to i8*), i64 1008, i1 false)
  %9 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 8, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = call zeroext i1 @skcms_ParseWithA2BPriority(i8* %10, i64 %12, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @_ZZL11skcms_ParsePKvmP16skcms_ICCProfileE8priority, i64 0, i64 0), i32 2, %struct.skcms_ICCProfile* nonnull %4) #15
  br i1 %13, label %14, label %30

14:                                               ; preds = %1
  %15 = call i32 @_ZN3jxl18MaybeCreateProfileERKNS_13ColorEncodingEPNS_11PaddedBytesE(%"struct.jxl::ColorEncoding"* dereferenceable(152) %0, %"class.jxl::PaddedBytes"* nonnull %3) #15
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %30

17:                                               ; preds = %14
  %18 = bitcast %struct.skcms_ICCProfile* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1008, i8* nonnull %18) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* align 8 bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } }* @__const._ZN3jxl12_GLOBAL__N_122ProfileEquivalentToICCERK16skcms_ICCProfileRKNS_11PaddedBytesE.profile2 to i8*), i64 1008, i1 false) #15
  %19 = load i8*, i8** %7, align 8
  %20 = load i64, i64* %6, align 8
  %21 = call zeroext i1 @skcms_ParseWithA2BPriority(i8* %19, i64 %20, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @_ZZL11skcms_ParsePKvmP16skcms_ICCProfileE8priority, i64 0, i64 0), i32 2, %struct.skcms_ICCProfile* nonnull %2) #15
  br i1 %21, label %23, label %22

22:                                               ; preds = %17
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %18) #15
  br label %25

23:                                               ; preds = %17
  %24 = call zeroext i1 @skcms_ApproximatelyEqualProfiles(%struct.skcms_ICCProfile* nonnull %4, %struct.skcms_ICCProfile* nonnull %2) #15
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %18) #15
  br i1 %24, label %28, label %25

25:                                               ; preds = %22, %23
  %26 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i64 0, i64 0), i32 740, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i64 0, i64 0)) #15
  %27 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 6
  store i8 0, i8* %29, align 4
  br label %30

30:                                               ; preds = %14, %1, %28
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %8) #15
  %31 = load i8*, i8** %7, align 8
  store i8* null, i8** %7, align 8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %30
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %31) #15
  br label %34

34:                                               ; preds = %30, %33
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #15
  ret void
}

declare i32 @_ZN3jxl18MaybeCreateProfileERKNS_13ColorEncodingEPNS_11PaddedBytesE(%"struct.jxl::ColorEncoding"* dereferenceable(152), %"class.jxl::PaddedBytes"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl19ColorSpaceTransformD2Ev(%"class.jxl::ColorSpaceTransform"* nocapture) unnamed_addr #9 align 2 {
  %2 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  store i8* null, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %3) #15
  br label %6

6:                                                ; preds = %1, %5
  %7 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  store i8* null, i8** %7, align 8
  %9 = icmp eq i8* %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %6
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %8) #15
  br label %11

11:                                               ; preds = %6, %10
  %12 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"struct.jxl::ColorSpaceTransform::SkcmsICC"*, %"struct.jxl::ColorSpaceTransform::SkcmsICC"** %12, align 8
  store %"struct.jxl::ColorSpaceTransform::SkcmsICC"* null, %"struct.jxl::ColorSpaceTransform::SkcmsICC"** %12, align 8
  %14 = icmp eq %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %13, null
  br i1 %14, label %27, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %13, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  store i8* null, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %20, label %19

19:                                               ; preds = %15
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %17) #15
  br label %20

20:                                               ; preds = %19, %15
  %21 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %13, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  store i8* null, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %25, label %24

24:                                               ; preds = %20
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %22) #15
  br label %25

25:                                               ; preds = %24, %20
  %26 = bitcast %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %13 to i8*
  tail call void @_ZdlPv(i8* %26) #18
  br label %27

27:                                               ; preds = %11, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl19ColorSpaceTransformC2Ev(%"class.jxl::ColorSpaceTransform"* nocapture) unnamed_addr #9 align 2 {
  %2 = tail call i8* @_Znwm(i64 2064) #18
  %3 = ptrtoint i8* %2 to i64
  %4 = bitcast %"class.jxl::ColorSpaceTransform"* %0 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 2064, i1 false)
  store i64 %3, i64* %4, align 8
  %5 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 6
  store i8 0, i8* %6, align 8
  %7 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 8
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 9
  store i32 0, i32* %8, align 8
  %9 = bitcast %"class.jxl::Plane"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 64, i1 false)
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl19ColorSpaceTransform4InitERKNS_13ColorEncodingES3_fmm(%"class.jxl::ColorSpaceTransform"* nocapture, %"struct.jxl::ColorEncoding"* readonly dereferenceable(152), %"struct.jxl::ColorEncoding"* dereferenceable(152), float, i64, i64) local_unnamed_addr #9 align 2 {
  %7 = alloca %"struct.jxl::ColorEncoding", align 8
  %8 = alloca %"struct.jxl::ColorEncoding", align 8
  %9 = alloca %"class.jxl::PaddedBytes", align 8
  %10 = alloca %"class.jxl::PaddedBytes", align 8
  %11 = alloca %struct.skcms_ICCProfile, align 8
  %12 = alloca %struct.skcms_ICCProfile, align 8
  %13 = alloca %"class.std::__1::basic_string", align 8
  %14 = alloca %"class.jxl::Plane", align 8
  %15 = alloca %"class.jxl::Plane", align 8
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* nonnull @_ZZN3jxl12_GLOBAL__N_19LcmsMutexEvE1m) #15
  %16 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = load %"struct.jxl::ColorSpaceTransform::SkcmsICC"*, %"struct.jxl::ColorSpaceTransform::SkcmsICC"** %16, align 8
  %18 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 8, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %17, i64 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = icmp ult i64 %21, %19
  br i1 %22, label %23, label %25

23:                                               ; preds = %6
  %24 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %17, i64 0, i32 0
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %24, i64 %19) #15
  br label %25

25:                                               ; preds = %23, %6
  %26 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %17, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = icmp eq i8* %27, null
  %29 = select i1 %28, i64 0, i64 %19
  %30 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %17, i64 0, i32 0, i32 0
  store i64 %29, i64* %30, align 8
  br i1 %28, label %34, label %31

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %27, i8* align 1 %33, i64 %29, i1 false) #15
  br label %34

34:                                               ; preds = %25, %31
  %35 = load %"struct.jxl::ColorSpaceTransform::SkcmsICC"*, %"struct.jxl::ColorSpaceTransform::SkcmsICC"** %16, align 8
  %36 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %35, i64 0, i32 1
  %37 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 8, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %35, i64 0, i32 1, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = icmp ult i64 %40, %38
  br i1 %41, label %42, label %43

42:                                               ; preds = %34
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %36, i64 %38) #15
  br label %43

43:                                               ; preds = %42, %34
  %44 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %35, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = icmp eq i8* %45, null
  %47 = select i1 %46, i64 0, i64 %38
  %48 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %36, i64 0, i32 0
  store i64 %47, i64* %48, align 8
  br i1 %46, label %52, label %49

49:                                               ; preds = %43
  %50 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %45, i8* align 1 %51, i64 %47, i1 false) #15
  br label %52

52:                                               ; preds = %43, %49
  %53 = load %"struct.jxl::ColorSpaceTransform::SkcmsICC"*, %"struct.jxl::ColorSpaceTransform::SkcmsICC"** %16, align 8
  %54 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %53, i64 0, i32 2
  %55 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %53, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %53, i64 0, i32 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = tail call zeroext i1 @skcms_ParseWithA2BPriority(i8* %56, i64 %58, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @_ZZL11skcms_ParsePKvmP16skcms_ICCProfileE8priority, i64 0, i64 0), i32 2, %struct.skcms_ICCProfile* %54) #15
  br i1 %59, label %60, label %552

60:                                               ; preds = %52
  %61 = load %"struct.jxl::ColorSpaceTransform::SkcmsICC"*, %"struct.jxl::ColorSpaceTransform::SkcmsICC"** %16, align 8
  %62 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %61, i64 0, i32 3
  %63 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %61, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %61, i64 0, i32 1, i32 0
  %66 = load i64, i64* %65, align 8
  %67 = tail call zeroext i1 @skcms_ParseWithA2BPriority(i8* %64, i64 %66, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @_ZZL11skcms_ParsePKvmP16skcms_ICCProfileE8priority, i64 0, i64 0), i32 2, %struct.skcms_ICCProfile* %62) #15
  br i1 %67, label %68, label %552

68:                                               ; preds = %60
  %69 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 6
  store i8 0, i8* %69, align 8
  %70 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 9
  %71 = load i32, i32* %70, align 8
  %72 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 9
  %73 = load i32, i32* %72, align 8
  %74 = icmp eq i32 %71, %73
  br i1 %74, label %75, label %163

75:                                               ; preds = %68
  %76 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 2
  %79 = load i32, i32* %78, align 4
  %80 = icmp eq i32 %77, %79
  br i1 %80, label %81, label %163

81:                                               ; preds = %75
  %82 = icmp eq i32 %77, 2
  br i1 %82, label %83, label %95

83:                                               ; preds = %81
  %84 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 10, i32 1
  %85 = load i32, i32* %84, align 8
  %86 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 10, i32 1
  %87 = load i32, i32* %86, align 8
  %88 = icmp eq i32 %85, %87
  br i1 %88, label %89, label %163

89:                                               ; preds = %83
  %90 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 10, i32 2
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 10, i32 2
  %93 = load i32, i32* %92, align 4
  %94 = icmp eq i32 %91, %93
  br i1 %94, label %95, label %163

95:                                               ; preds = %89, %81
  %96 = add i32 %71, -1
  %97 = icmp ugt i32 %96, 1
  br i1 %97, label %98, label %142

98:                                               ; preds = %95
  %99 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 3
  %100 = load i32, i32* %99, align 8
  %101 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 3
  %102 = load i32, i32* %101, align 8
  %103 = icmp eq i32 %100, %102
  br i1 %103, label %104, label %163

104:                                              ; preds = %98
  %105 = icmp eq i32 %100, 2
  br i1 %105, label %106, label %142

106:                                              ; preds = %104
  %107 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 11, i32 1
  %108 = load i32, i32* %107, align 8
  %109 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 11, i32 1
  %110 = load i32, i32* %109, align 8
  %111 = icmp eq i32 %108, %110
  br i1 %111, label %112, label %163

112:                                              ; preds = %106
  %113 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 11, i32 2
  %114 = load i32, i32* %113, align 4
  %115 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 11, i32 2
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %114, %116
  br i1 %117, label %118, label %163

118:                                              ; preds = %112
  %119 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 12, i32 1
  %120 = load i32, i32* %119, align 8
  %121 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 12, i32 1
  %122 = load i32, i32* %121, align 8
  %123 = icmp eq i32 %120, %122
  br i1 %123, label %124, label %163

124:                                              ; preds = %118
  %125 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 12, i32 2
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 12, i32 2
  %128 = load i32, i32* %127, align 4
  %129 = icmp eq i32 %126, %128
  br i1 %129, label %130, label %163

130:                                              ; preds = %124
  %131 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 13, i32 1
  %132 = load i32, i32* %131, align 8
  %133 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 13, i32 1
  %134 = load i32, i32* %133, align 8
  %135 = icmp eq i32 %132, %134
  br i1 %135, label %136, label %163

136:                                              ; preds = %130
  %137 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 13, i32 2
  %138 = load i32, i32* %137, align 4
  %139 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 13, i32 2
  %140 = load i32, i32* %139, align 4
  %141 = icmp eq i32 %138, %140
  br i1 %141, label %142, label %163

142:                                              ; preds = %136, %104, %95
  %143 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 4, i32 2
  %144 = load i8, i8* %143, align 4, !range !26
  %145 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 4, i32 2
  %146 = load i8, i8* %145, align 4, !range !26
  %147 = icmp eq i8 %144, %146
  br i1 %147, label %148, label %163

148:                                              ; preds = %142
  %149 = icmp eq i8 %144, 0
  br i1 %149, label %156, label %150

150:                                              ; preds = %148
  %151 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 4, i32 3
  %152 = load i32, i32* %151, align 8
  %153 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 4, i32 3
  %154 = load i32, i32* %153, align 8
  %155 = icmp eq i32 %152, %154
  br i1 %155, label %162, label %163

156:                                              ; preds = %148
  %157 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 4, i32 4
  %158 = load i32, i32* %157, align 4
  %159 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 4, i32 4
  %160 = load i32, i32* %159, align 4
  %161 = icmp eq i32 %158, %160
  br i1 %161, label %162, label %163

162:                                              ; preds = %156, %150
  store i8 1, i8* %69, align 8
  br label %163

163:                                              ; preds = %130, %136, %118, %124, %106, %112, %98, %83, %89, %75, %68, %156, %150, %142, %162
  %164 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 4, i32 2
  %165 = load i8, i8* %164, align 4, !range !26
  %166 = icmp eq i8 %165, 0
  %167 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 4, i32 4
  %168 = load i32, i32* %167, align 4
  %169 = icmp eq i32 %168, 8
  %170 = and i1 %166, %169
  %171 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 4, i32 2
  %172 = load i8, i8* %171, align 4, !range !26
  %173 = icmp eq i8 %172, 0
  %174 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 4, i32 4
  %175 = load i32, i32* %174, align 4
  %176 = icmp eq i32 %175, 8
  %177 = and i1 %173, %176
  br i1 %166, label %178, label %185

178:                                              ; preds = %163
  %179 = icmp eq i32 %168, 16
  br i1 %179, label %184, label %180

180:                                              ; preds = %178
  %181 = icmp ne i32 %168, 18
  %182 = xor i1 %177, true
  %183 = or i1 %181, %182
  br i1 %183, label %185, label %215

184:                                              ; preds = %178
  br i1 %177, label %215, label %185

185:                                              ; preds = %163, %180, %184
  br i1 %173, label %186, label %193

186:                                              ; preds = %185
  %187 = icmp eq i32 %175, 16
  br i1 %187, label %192, label %188

188:                                              ; preds = %186
  %189 = icmp ne i32 %175, 18
  %190 = xor i1 %170, true
  %191 = or i1 %189, %190
  br i1 %191, label %196, label %215

192:                                              ; preds = %186
  br i1 %170, label %215, label %196

193:                                              ; preds = %185
  %194 = icmp eq i32 %168, 16
  %195 = and i1 %166, %194
  br i1 %195, label %201, label %205

196:                                              ; preds = %188, %192
  %197 = icmp eq i32 %168, 16
  %198 = and i1 %166, %197
  %199 = icmp eq i32 %175, 16
  %200 = xor i1 %198, %199
  br i1 %200, label %201, label %205

201:                                              ; preds = %193, %196
  %202 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 3
  %203 = load float, float* %202, align 8
  %204 = fcmp une float %203, 1.000000e+04
  br i1 %204, label %215, label %205

205:                                              ; preds = %193, %201, %196
  br i1 %166, label %206, label %210

206:                                              ; preds = %205
  %207 = icmp ne i32 %168, 13
  %208 = xor i1 %177, true
  %209 = or i1 %207, %208
  br i1 %209, label %210, label %215

210:                                              ; preds = %205, %206
  br i1 %173, label %211, label %479

211:                                              ; preds = %210
  %212 = icmp ne i32 %175, 13
  %213 = xor i1 %170, true
  %214 = or i1 %212, %213
  br i1 %214, label %479, label %215

215:                                              ; preds = %211, %206, %188, %180, %201, %192, %184
  %216 = bitcast %"struct.jxl::ColorEncoding"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %216) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %216, i8 -86, i64 152, i1 false)
  %217 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %217, align 8
  %218 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 1
  %219 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 12, i1 false) #15
  %220 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 4, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22CustomTransferFunctionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %220, align 8
  %221 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 4, i32 1
  %222 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 4, i32 1
  %223 = bitcast i32* %221 to i8*
  %224 = bitcast i32* %222 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %223, i8* align 8 %224, i64 16, i1 false) #15
  %225 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 5
  %226 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 5
  %227 = bitcast i32* %225 to i8*
  %228 = bitcast i32* %226 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %227, i8* align 8 %228, i64 6, i1 false) #15
  %229 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 8
  %230 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %229, i64 0, i32 0
  %231 = load i64, i64* %18, align 8
  store i64 %231, i64* %230, align 8
  %232 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 8, i32 1
  %233 = icmp eq i64 %231, 0
  %234 = bitcast i64* %232 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %234, i8 0, i64 16, i1 false) #15
  br i1 %233, label %243, label %235

235:                                              ; preds = %215
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %229, i64 %231) #15
  %236 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %237 = load i8*, i8** %236, align 8
  %238 = icmp eq i8* %237, null
  br i1 %238, label %243, label %239

239:                                              ; preds = %235
  %240 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %241 = load i8*, i8** %240, align 8
  %242 = load i64, i64* %230, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %237, i8* align 1 %241, i64 %242, i1 false) #15
  br label %243

243:                                              ; preds = %215, %235, %239
  %244 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 9
  %245 = load i32, i32* %70, align 8
  store i32 %245, i32* %244, align 8
  %246 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 10, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %246, align 8
  %247 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 10, i32 1
  %248 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 10, i32 1
  %249 = bitcast i32* %248 to i64*
  %250 = bitcast i32* %247 to i64*
  %251 = load i64, i64* %249, align 8
  store i64 %251, i64* %250, align 8
  %252 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %252, align 8
  %253 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 11, i32 1
  %254 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 11, i32 1
  %255 = bitcast i32* %254 to i64*
  %256 = bitcast i32* %253 to i64*
  %257 = load i64, i64* %255, align 8
  store i64 %257, i64* %256, align 8
  %258 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 12, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %258, align 8
  %259 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 12, i32 1
  %260 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 12, i32 1
  %261 = bitcast i32* %260 to i64*
  %262 = bitcast i32* %259 to i64*
  %263 = load i64, i64* %261, align 8
  store i64 %263, i64* %262, align 8
  %264 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 13, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %264, align 8
  %265 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 13, i32 1
  %266 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 13, i32 1
  %267 = bitcast i32* %266 to i64*
  %268 = bitcast i32* %265 to i64*
  %269 = load i64, i64* %267, align 8
  store i64 %269, i64* %268, align 8
  %270 = bitcast %"struct.jxl::ColorEncoding"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %270) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %270, i8 -86, i64 152, i1 false)
  %271 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %271, align 8
  %272 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 1
  %273 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %272, i8* align 8 %273, i64 12, i1 false) #15
  %274 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 4, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22CustomTransferFunctionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %274, align 8
  %275 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 4, i32 1
  %276 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 4, i32 1
  %277 = bitcast i32* %275 to i8*
  %278 = bitcast i32* %276 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %277, i8* align 8 %278, i64 16, i1 false) #15
  %279 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 5
  %280 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 5
  %281 = bitcast i32* %279 to i8*
  %282 = bitcast i32* %280 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %281, i8* align 8 %282, i64 6, i1 false) #15
  %283 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 8
  %284 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %283, i64 0, i32 0
  %285 = load i64, i64* %37, align 8
  store i64 %285, i64* %284, align 8
  %286 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 8, i32 1
  %287 = icmp eq i64 %285, 0
  %288 = bitcast i64* %286 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %288, i8 0, i64 16, i1 false) #15
  br i1 %287, label %297, label %289

289:                                              ; preds = %243
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %283, i64 %285) #15
  %290 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %291 = load i8*, i8** %290, align 8
  %292 = icmp eq i8* %291, null
  br i1 %292, label %297, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %295 = load i8*, i8** %294, align 8
  %296 = load i64, i64* %284, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %291, i8* align 1 %295, i64 %296, i1 false) #15
  br label %297

297:                                              ; preds = %243, %289, %293
  %298 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 9
  %299 = load i32, i32* %72, align 8
  store i32 %299, i32* %298, align 8
  %300 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 10, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %300, align 8
  %301 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 10, i32 1
  %302 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 10, i32 1
  %303 = bitcast i32* %302 to i64*
  %304 = bitcast i32* %301 to i64*
  %305 = load i64, i64* %303, align 8
  store i64 %305, i64* %304, align 8
  %306 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %306, align 8
  %307 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 11, i32 1
  %308 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 11, i32 1
  %309 = bitcast i32* %308 to i64*
  %310 = bitcast i32* %307 to i64*
  %311 = load i64, i64* %309, align 8
  store i64 %311, i64* %310, align 8
  %312 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 12, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %312, align 8
  %313 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 12, i32 1
  %314 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 12, i32 1
  %315 = bitcast i32* %314 to i64*
  %316 = bitcast i32* %313 to i64*
  %317 = load i64, i64* %315, align 8
  store i64 %317, i64* %316, align 8
  %318 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 13, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %318, align 8
  %319 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 13, i32 1
  %320 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 13, i32 1
  %321 = bitcast i32* %320 to i64*
  %322 = bitcast i32* %319 to i64*
  %323 = load i64, i64* %321, align 8
  store i64 %323, i64* %322, align 8
  %324 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 4, i32 2
  store i8 0, i8* %324, align 4
  %325 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 4, i32 4
  store i32 8, i32* %325, align 4
  %326 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 4, i32 2
  store i8 0, i8* %326, align 4
  %327 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 4, i32 4
  store i32 8, i32* %327, align 4
  %328 = bitcast %"class.jxl::PaddedBytes"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %328) #15
  %329 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %9, i64 0, i32 0
  %330 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %9, i64 0, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %328, i8 0, i64 24, i1 false) #15
  %331 = bitcast %"class.jxl::PaddedBytes"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %331) #15
  %332 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %10, i64 0, i32 0
  %333 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %10, i64 0, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %331, i8 0, i64 24, i1 false) #15
  %334 = bitcast %struct.skcms_ICCProfile* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1008, i8* nonnull %334) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %334, i8* align 8 bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } }* @__const._ZN3jxl12_GLOBAL__N_122ProfileEquivalentToICCERK16skcms_ICCProfileRKNS_11PaddedBytesE.profile2 to i8*), i64 1008, i1 false)
  %335 = bitcast %struct.skcms_ICCProfile* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1008, i8* nonnull %335) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %335, i8* align 8 bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } }* @__const._ZN3jxl12_GLOBAL__N_122ProfileEquivalentToICCERK16skcms_ICCProfileRKNS_11PaddedBytesE.profile2 to i8*), i64 1008, i1 false)
  %336 = call i32 @_ZN3jxl18MaybeCreateProfileERKNS_13ColorEncodingEPNS_11PaddedBytesE(%"struct.jxl::ColorEncoding"* nonnull dereferenceable(152) %7, %"class.jxl::PaddedBytes"* nonnull %9) #15
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %338, label %460

338:                                              ; preds = %297
  %339 = call i32 @_ZN3jxl18MaybeCreateProfileERKNS_13ColorEncodingEPNS_11PaddedBytesE(%"struct.jxl::ColorEncoding"* nonnull dereferenceable(152) %8, %"class.jxl::PaddedBytes"* nonnull %10) #15
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %341, label %460

341:                                              ; preds = %338
  %342 = load i8*, i8** %330, align 8
  %343 = load i64, i64* %329, align 8
  %344 = call zeroext i1 @skcms_ParseWithA2BPriority(i8* %342, i64 %343, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @_ZZL11skcms_ParsePKvmP16skcms_ICCProfileE8priority, i64 0, i64 0), i32 2, %struct.skcms_ICCProfile* nonnull %11) #15
  br i1 %344, label %345, label %460

345:                                              ; preds = %341
  %346 = load i8*, i8** %333, align 8
  %347 = load i64, i64* %332, align 8
  %348 = call zeroext i1 @skcms_ParseWithA2BPriority(i8* %346, i64 %347, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @_ZZL11skcms_ParsePKvmP16skcms_ICCProfileE8priority, i64 0, i64 0), i32 2, %struct.skcms_ICCProfile* nonnull %12) #15
  br i1 %348, label %349, label %460

349:                                              ; preds = %345
  %350 = load i32, i32* %70, align 8
  %351 = load i32, i32* %72, align 8
  %352 = icmp eq i32 %350, %351
  br i1 %352, label %353, label %413

353:                                              ; preds = %349
  %354 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 2
  %355 = load i32, i32* %354, align 4
  %356 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 2
  %357 = load i32, i32* %356, align 4
  %358 = icmp eq i32 %355, %357
  br i1 %358, label %359, label %413

359:                                              ; preds = %353
  %360 = icmp eq i32 %355, 2
  br i1 %360, label %361, label %371

361:                                              ; preds = %359
  %362 = load i32, i32* %248, align 8
  %363 = load i32, i32* %302, align 8
  %364 = icmp eq i32 %362, %363
  br i1 %364, label %365, label %413

365:                                              ; preds = %361
  %366 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 10, i32 2
  %367 = load i32, i32* %366, align 4
  %368 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 10, i32 2
  %369 = load i32, i32* %368, align 4
  %370 = icmp eq i32 %367, %369
  br i1 %370, label %371, label %413

371:                                              ; preds = %365, %359
  %372 = add i32 %350, -1
  %373 = icmp ugt i32 %372, 1
  br i1 %373, label %374, label %412

374:                                              ; preds = %371
  %375 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 3
  %376 = load i32, i32* %375, align 8
  %377 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 3
  %378 = load i32, i32* %377, align 8
  %379 = icmp eq i32 %376, %378
  br i1 %379, label %380, label %413

380:                                              ; preds = %374
  %381 = icmp eq i32 %376, 2
  br i1 %381, label %382, label %412

382:                                              ; preds = %380
  %383 = load i32, i32* %254, align 8
  %384 = load i32, i32* %308, align 8
  %385 = icmp eq i32 %383, %384
  br i1 %385, label %386, label %413

386:                                              ; preds = %382
  %387 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 11, i32 2
  %388 = load i32, i32* %387, align 4
  %389 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 11, i32 2
  %390 = load i32, i32* %389, align 4
  %391 = icmp eq i32 %388, %390
  br i1 %391, label %392, label %413

392:                                              ; preds = %386
  %393 = load i32, i32* %260, align 8
  %394 = load i32, i32* %314, align 8
  %395 = icmp eq i32 %393, %394
  br i1 %395, label %396, label %413

396:                                              ; preds = %392
  %397 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 12, i32 2
  %398 = load i32, i32* %397, align 4
  %399 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 12, i32 2
  %400 = load i32, i32* %399, align 4
  %401 = icmp eq i32 %398, %400
  br i1 %401, label %402, label %413

402:                                              ; preds = %396
  %403 = load i32, i32* %266, align 8
  %404 = load i32, i32* %320, align 8
  %405 = icmp eq i32 %403, %404
  br i1 %405, label %406, label %413

406:                                              ; preds = %402
  %407 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 13, i32 2
  %408 = load i32, i32* %407, align 4
  %409 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 13, i32 2
  %410 = load i32, i32* %409, align 4
  %411 = icmp eq i32 %408, %410
  br i1 %411, label %412, label %413

412:                                              ; preds = %406, %380, %371
  store i8 1, i8* %69, align 8
  br label %413

413:                                              ; preds = %402, %406, %392, %396, %382, %386, %374, %361, %365, %353, %349, %412
  %414 = load %"struct.jxl::ColorSpaceTransform::SkcmsICC"*, %"struct.jxl::ColorSpaceTransform::SkcmsICC"** %16, align 8
  %415 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %414, i64 0, i32 0, i32 2
  %416 = bitcast %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %414 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %416, i8 0, i64 16, i1 false)
  %417 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %415, i64 0, i32 0, i32 0, i32 0
  %418 = load i8*, i8** %417, align 8
  %419 = bitcast %"class.std::__1::unique_ptr.0"* %415 to i64*
  store i64 0, i64* %419, align 8
  %420 = icmp eq i8* %418, null
  br i1 %420, label %422, label %421

421:                                              ; preds = %413
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %418) #15
  br label %422

422:                                              ; preds = %413, %421
  %423 = load %"struct.jxl::ColorSpaceTransform::SkcmsICC"*, %"struct.jxl::ColorSpaceTransform::SkcmsICC"** %16, align 8
  %424 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %423, i64 0, i32 2
  %425 = bitcast %struct.skcms_ICCProfile* %424 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %425, i8* nonnull align 8 %334, i64 1008, i1 false)
  %426 = load %"struct.jxl::ColorSpaceTransform::SkcmsICC"*, %"struct.jxl::ColorSpaceTransform::SkcmsICC"** %16, align 8
  %427 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %426, i64 0, i32 1, i32 0
  %428 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %426, i64 0, i32 1, i32 2
  %429 = bitcast i64* %427 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %429, i8 0, i64 16, i1 false)
  %430 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %428, i64 0, i32 0, i32 0, i32 0
  %431 = load i8*, i8** %430, align 8
  %432 = bitcast %"class.std::__1::unique_ptr.0"* %428 to i64*
  store i64 0, i64* %432, align 8
  %433 = icmp eq i8* %431, null
  br i1 %433, label %435, label %434

434:                                              ; preds = %422
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %431) #15
  br label %435

435:                                              ; preds = %422, %434
  %436 = load %"struct.jxl::ColorSpaceTransform::SkcmsICC"*, %"struct.jxl::ColorSpaceTransform::SkcmsICC"** %16, align 8
  %437 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %436, i64 0, i32 3
  %438 = bitcast %struct.skcms_ICCProfile* %437 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %438, i8* nonnull align 8 %335, i64 1008, i1 false)
  %439 = load i8, i8* %164, align 4, !range !26
  %440 = icmp eq i8 %439, 0
  br i1 %440, label %441, label %446

441:                                              ; preds = %435
  %442 = load i32, i32* %167, align 4
  switch i32 %442, label %443 [
    i32 8, label %449
    i32 13, label %446
  ]

443:                                              ; preds = %441
  %444 = icmp eq i32 %442, 16
  %445 = select i1 %444, i32 1, i32 2
  br label %446

446:                                              ; preds = %441, %443, %435
  %447 = phi i32 [ 2, %435 ], [ %445, %443 ], [ 3, %441 ]
  %448 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 8
  store i32 %447, i32* %448, align 4
  br label %449

449:                                              ; preds = %441, %446
  %450 = load i8, i8* %171, align 4, !range !26
  %451 = icmp eq i8 %450, 0
  br i1 %451, label %452, label %457

452:                                              ; preds = %449
  %453 = load i32, i32* %174, align 4
  switch i32 %453, label %454 [
    i32 8, label %460
    i32 13, label %457
  ]

454:                                              ; preds = %452
  %455 = icmp eq i32 %453, 16
  %456 = select i1 %455, i32 1, i32 2
  br label %457

457:                                              ; preds = %452, %454, %449
  %458 = phi i32 [ 2, %449 ], [ %456, %454 ], [ 3, %452 ]
  %459 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 9
  store i32 %458, i32* %459, align 8
  br label %460

460:                                              ; preds = %452, %297, %338, %341, %345, %457
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %335) #15
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %334) #15
  %461 = load i8*, i8** %333, align 8
  store i8* null, i8** %333, align 8
  %462 = icmp eq i8* %461, null
  br i1 %462, label %464, label %463

463:                                              ; preds = %460
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %461) #15
  br label %464

464:                                              ; preds = %460, %463
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %331) #15
  %465 = load i8*, i8** %330, align 8
  store i8* null, i8** %330, align 8
  %466 = icmp eq i8* %465, null
  br i1 %466, label %468, label %467

467:                                              ; preds = %464
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %465) #15
  br label %468

468:                                              ; preds = %464, %467
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %328) #15
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %271, align 8
  %469 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %8, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %470 = load i8*, i8** %469, align 8
  store i8* null, i8** %469, align 8
  %471 = icmp eq i8* %470, null
  br i1 %471, label %473, label %472

472:                                              ; preds = %468
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %470) #15
  br label %473

473:                                              ; preds = %468, %472
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %270) #15
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %217, align 8
  %474 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %7, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %475 = load i8*, i8** %474, align 8
  store i8* null, i8** %474, align 8
  %476 = icmp eq i8* %475, null
  br i1 %476, label %478, label %477

477:                                              ; preds = %473
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %475) #15
  br label %478

478:                                              ; preds = %473, %477
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %216) #15
  br label %479

479:                                              ; preds = %210, %211, %478
  %480 = load %"struct.jxl::ColorSpaceTransform::SkcmsICC"*, %"struct.jxl::ColorSpaceTransform::SkcmsICC"** %16, align 8
  %481 = getelementptr inbounds %"struct.jxl::ColorSpaceTransform::SkcmsICC", %"struct.jxl::ColorSpaceTransform::SkcmsICC"* %480, i64 0, i32 3
  %482 = call zeroext i1 @skcms_MakeUsableAsDestination(%struct.skcms_ICCProfile* %481) #15
  br i1 %482, label %493, label %483

483:                                              ; preds = %479
  %484 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %484) #15
  call void @_ZN3jxl11DescriptionERKNS_13ColorEncodingE(%"class.std::__1::basic_string"* nonnull sret %13, %"struct.jxl::ColorEncoding"* dereferenceable(152) %2) #15
  %485 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %486 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %485, i64 0, i32 1, i32 0
  %487 = load i8, i8* %486, align 1
  %488 = icmp slt i8 %487, 0
  br i1 %488, label %489, label %492

489:                                              ; preds = %483
  %490 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %491 = load i8*, i8** %490, align 8
  call void @_ZdlPv(i8* %491) #18
  br label %492

492:                                              ; preds = %483, %489
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %484) #15
  br label %552

493:                                              ; preds = %479
  %494 = load i32, i32* %70, align 8
  %495 = icmp eq i32 %494, 1
  %496 = select i1 %495, i64 1, i64 3
  %497 = load i32, i32* %72, align 8
  %498 = icmp eq i32 %497, 1
  %499 = select i1 %498, i64 1, i64 3
  %500 = icmp eq i64 %496, %499
  br i1 %500, label %504, label %501

501:                                              ; preds = %493
  %502 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i64 0, i64 0), i32 859, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.16, i64 0, i64 0)) #15
  %503 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

504:                                              ; preds = %493
  %505 = bitcast %"class.jxl::Plane"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %505) #15
  %506 = mul i64 %4, 3
  %507 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %507, i64 %506, i64 %5, i64 4) #15
  %508 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1
  %509 = bitcast %"class.jxl::Plane"* %508 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %509, i8* nonnull align 8 %505, i64 24, i1 false) #15
  %510 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 1, i32 0, i32 5
  %511 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0, i32 5
  %512 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %511, i64 0, i32 0, i32 0, i32 0
  %513 = bitcast %"class.std::__1::unique_ptr.0"* %511 to i64*
  %514 = load i64, i64* %513, align 8
  store i8* null, i8** %512, align 8
  %515 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %510, i64 0, i32 0, i32 0, i32 0
  %516 = load i8*, i8** %515, align 8
  %517 = bitcast %"class.std::__1::unique_ptr.0"* %510 to i64*
  store i64 %514, i64* %517, align 8
  %518 = icmp eq i8* %516, null
  br i1 %518, label %519, label %521

519:                                              ; preds = %504
  %520 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %520, align 8
  br label %527

521:                                              ; preds = %504
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %516) #15
  %522 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %523 = load i8*, i8** %522, align 8
  %524 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %524, align 8
  %525 = icmp eq i8* %523, null
  br i1 %525, label %527, label %526

526:                                              ; preds = %521
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %523) #15
  br label %527

527:                                              ; preds = %519, %521, %526
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %505) #15
  %528 = bitcast %"class.jxl::Plane"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %528) #15
  %529 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %15, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %529, i64 %506, i64 %5, i64 4) #15
  %530 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2
  %531 = bitcast %"class.jxl::Plane"* %530 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %531, i8* nonnull align 8 %528, i64 24, i1 false) #15
  %532 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 2, i32 0, i32 5
  %533 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %15, i64 0, i32 0, i32 5
  %534 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %533, i64 0, i32 0, i32 0, i32 0
  %535 = bitcast %"class.std::__1::unique_ptr.0"* %533 to i64*
  %536 = load i64, i64* %535, align 8
  store i8* null, i8** %534, align 8
  %537 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %532, i64 0, i32 0, i32 0, i32 0
  %538 = load i8*, i8** %537, align 8
  %539 = bitcast %"class.std::__1::unique_ptr.0"* %532 to i64*
  store i64 %536, i64* %539, align 8
  %540 = icmp eq i8* %538, null
  br i1 %540, label %541, label %543

541:                                              ; preds = %527
  %542 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %15, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %542, align 8
  br label %549

543:                                              ; preds = %527
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %538) #15
  %544 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %15, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %545 = load i8*, i8** %544, align 8
  %546 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %15, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %546, align 8
  %547 = icmp eq i8* %545, null
  br i1 %547, label %549, label %548

548:                                              ; preds = %543
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %545) #15
  br label %549

549:                                              ; preds = %541, %543, %548
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %528) #15
  %550 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 3
  store float %3, float* %550, align 8
  %551 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %0, i64 0, i32 5
  store i64 %4, i64* %551, align 8
  br label %552

552:                                              ; preds = %60, %52, %492, %549
  %553 = phi i32 [ 0, %549 ], [ 1, %492 ], [ 1, %52 ], [ 1, %60 ]
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* nonnull @_ZZN3jxl12_GLOBAL__N_19LcmsMutexEvE1m) #15
  ret i32 %553
}

declare zeroext i1 @skcms_MakeUsableAsDestination(%struct.skcms_ICCProfile*) local_unnamed_addr #3

declare void @_ZN3jxl11DescriptionERKNS_13ColorEncodingE(%"class.std::__1::basic_string"* sret, %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.copysign.f32(float, float) #11

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #12

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #11

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #12

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJPN3jxl19ColorSpaceTransformEmPKfPfEE13ChooseAndCallIXadL_ZNS1_L41DoColorSpaceTransformHighwayDispatchTableEEEEEvS3_mS5_S6_(%"class.jxl::ColorSpaceTransform"*, i64, float*, float*) #9 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #15
  %5 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %6 = and i32 %5, 2225
  %7 = tail call i32 @llvm.cttz.i32(i32 %6, i1 true) #15, !range !115
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [12 x void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)*], [12 x void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)*]* @_ZN3jxlL41DoColorSpaceTransformHighwayDispatchTableE, i64 0, i64 %8
  %10 = load void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)*, void (%"class.jxl::ColorSpaceTransform"*, i64, float*, float*)** %9, align 8
  tail call void %10(%"class.jxl::ColorSpaceTransform"* %0, i64 %1, float* %2, float* %3) #15
  ret void
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #11

declare zeroext i1 @skcms_ParseWithA2BPriority(i8*, i64, i32*, i32, %struct.skcms_ICCProfile*) local_unnamed_addr #3

declare zeroext i1 @skcms_GetWTPT(%struct.skcms_ICCProfile*, float*) local_unnamed_addr #3

declare zeroext i1 @skcms_GetCHAD(%struct.skcms_ICCProfile*, %struct.skcms_Matrix3x3*) local_unnamed_addr #3

declare zeroext i1 @skcms_Matrix3x3_invert(%struct.skcms_Matrix3x3*, %struct.skcms_Matrix3x3*) local_unnamed_addr #3

declare i32 @_ZN3jxl20CIEXYZFromWhiteCIExyERKNS_5CIExyEPf(%"struct.jxl::CIExy"* dereferenceable(16), float*) local_unnamed_addr #3

declare void @skcms_Matrix3x3_concat(%struct.skcms_Matrix3x3* sret, %struct.skcms_Matrix3x3*, %struct.skcms_Matrix3x3*) local_unnamed_addr #3

declare %struct.skcms_ICCProfile* @skcms_XYZD50_profile() local_unnamed_addr #3

declare i32 @_ZN3jxl13ColorEncoding12SetPrimariesERKNS_14PrimariesCIExyE(%"struct.jxl::ColorEncoding"*, %"struct.jxl::PrimariesCIExy"* dereferenceable(48)) local_unnamed_addr #3

declare zeroext i1 @_ZN3jxl22CustomTransferFunction11SetImplicitEv(%"struct.jxl::CustomTransferFunction"*) local_unnamed_addr #3

declare zeroext i1 @skcms_ApproximatelyEqualProfiles(%struct.skcms_ICCProfile*, %struct.skcms_ICCProfile*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #13

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #14

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @llvm.assume(i1) #15

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.sqrt.v4f32(<4 x float>) #11

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #11

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.sqrt.v8f32(<8 x float>) #11

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.fma.v16f32(<16 x float>, <16 x float>, <16 x float>) #11

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.sqrt.v16f32(<16 x float>) #11

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #12

declare void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"*) local_unnamed_addr #16

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #11

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone speculatable }
attributes #12 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nounwind }
attributes #16 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { noreturn nounwind }
attributes #18 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!4 = distinct !{!4, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!7 = distinct !{!7, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!10 = distinct !{!10, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!13 = distinct !{!13, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!16 = distinct !{!16, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!19 = distinct !{!19, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!22 = distinct !{!22, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!25 = distinct !{!25, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!26 = !{i8 0, i8 2}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!29 = distinct !{!29, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!30 = !{!31}
!31 = distinct !{!31, !29, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!34 = distinct !{!34, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!37 = distinct !{!37, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!38 = !{!39}
!39 = distinct !{!39, !37, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!40 = !{!41}
!41 = distinct !{!41, !42, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!42 = distinct !{!42, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!43 = !{!44}
!44 = distinct !{!44, !45, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!45 = distinct !{!45, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!46 = !{!47}
!47 = distinct !{!47, !45, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!50 = distinct !{!50, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!53 = distinct !{!53, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!54 = !{!55}
!55 = distinct !{!55, !53, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!58 = distinct !{!58, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!59 = !{!60}
!60 = distinct !{!60, !61, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!61 = distinct !{!61, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!62 = !{!63}
!63 = distinct !{!63, !61, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!66 = distinct !{!66, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!67 = !{!68}
!68 = distinct !{!68, !69, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!69 = distinct !{!69, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!70 = !{!71}
!71 = distinct !{!71, !69, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!72 = !{!73}
!73 = distinct !{!73, !74, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!74 = distinct !{!74, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!75 = !{!76}
!76 = distinct !{!76, !77, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!77 = distinct !{!77, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!78 = !{!79}
!79 = distinct !{!79, !77, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!80 = !{!81}
!81 = distinct !{!81, !82, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!82 = distinct !{!82, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!83 = !{!84}
!84 = distinct !{!84, !85, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!85 = distinct !{!85, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!86 = !{!87}
!87 = distinct !{!87, !85, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!88 = !{!89}
!89 = distinct !{!89, !90, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!90 = distinct !{!90, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!91 = !{!92}
!92 = distinct !{!92, !93, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!93 = distinct !{!93, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!94 = !{!95}
!95 = distinct !{!95, !96, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!96 = distinct !{!96, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!97 = !{!98}
!98 = distinct !{!98, !99, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!99 = distinct !{!99, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!100 = !{!101}
!101 = distinct !{!101, !102, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!102 = distinct !{!102, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!103 = !{!104}
!104 = distinct !{!104, !105, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!105 = distinct !{!105, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!106 = !{!107}
!107 = distinct !{!107, !108, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!108 = distinct !{!108, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!109 = !{!110}
!110 = distinct !{!110, !111, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!111 = distinct !{!111, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!112 = !{!113}
!113 = distinct !{!113, !114, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!114 = distinct !{!114, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!115 = !{i32 0, i32 33}
!116 = !{!117}
!117 = distinct !{!117, !118, !"_ZN3jxl12_GLOBAL__N_122DetectTransferFunctionERK16skcms_ICCProfilePNS_13ColorEncodingE: argument 0"}
!118 = distinct !{!118, !"_ZN3jxl12_GLOBAL__N_122DetectTransferFunctionERK16skcms_ICCProfilePNS_13ColorEncodingE"}
!119 = !{!120}
!120 = distinct !{!120, !121, !"_ZN3jxl6ValuesINS_16TransferFunctionEEENSt3__16vectorIT_NS2_9allocatorIS4_EEEEv: argument 0"}
!121 = distinct !{!121, !"_ZN3jxl6ValuesINS_16TransferFunctionEEENSt3__16vectorIT_NS2_9allocatorIS4_EEEEv"}
