; ModuleID = '../../third_party/dav1d/libdav1d/src/looprestoration_tmpl.c'
source_filename = "../../third_party/dav1d/libdav1d/src/looprestoration_tmpl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Dav1dLoopRestorationDSPContext = type { [2 x void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)*], [3 x void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)*] }
%union.LooprestorationParams = type { %struct.anon, [20 x i8] }
%struct.anon = type { i32, i32, i16, i16 }

@dav1d_sgr_x_by_x = external local_unnamed_addr constant [256 x i8], align 16

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @dav1d_loop_restoration_dsp_init_8bpc(%struct.Dav1dLoopRestorationDSPContext*, i32) local_unnamed_addr #0 {
  %3 = bitcast %struct.Dav1dLoopRestorationDSPContext* %0 to <2 x void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)*>*
  store <2 x void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)*> <void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)* @wiener_c, void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)* @wiener_c>, <2 x void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)*>* %3, align 8
  %4 = getelementptr inbounds %struct.Dav1dLoopRestorationDSPContext, %struct.Dav1dLoopRestorationDSPContext* %0, i64 0, i32 1, i64 0
  %5 = bitcast void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)** %4 to <2 x void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)*>*
  store <2 x void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)*> <void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)* @sgr_5x5_c, void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)* @sgr_3x3_c>, <2 x void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)*>* %5, align 8
  %6 = getelementptr inbounds %struct.Dav1dLoopRestorationDSPContext, %struct.Dav1dLoopRestorationDSPContext* %0, i64 0, i32 1, i64 2
  store void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)* @sgr_mix_c, void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)** %6, align 8
  tail call void @dav1d_loop_restoration_dsp_init_x86_8bpc(%struct.Dav1dLoopRestorationDSPContext* %0, i32 %1) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @wiener_c(i8* nocapture, i64, [4 x i8]* nocapture readonly, i8* nocapture readonly, i64, i32, i32, %union.LooprestorationParams* nocapture readonly, i32) #1 {
  %10 = alloca [27300 x i8], align 16
  %11 = alloca [27300 x i16], align 16
  %12 = getelementptr inbounds [27300 x i8], [27300 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 27300, i8* nonnull %12) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 27300, i1 false)
  call fastcc void @padding(i8* nonnull %12, i8* %0, i64 %1, [4 x i8]* %2, i8* %3, i64 %4, i32 %5, i32 %6, i32 %8)
  %13 = bitcast [27300 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 54600, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 54600, i1 false)
  %14 = bitcast %union.LooprestorationParams* %7 to [8 x i16]*
  %15 = add i32 %6, 6
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %36

17:                                               ; preds = %9
  %18 = getelementptr inbounds [27300 x i16], [27300 x i16]* %11, i64 0, i64 0
  %19 = icmp sgt i32 %5, 0
  %20 = zext i32 %5 to i64
  %21 = bitcast %union.LooprestorationParams* %7 to i16*
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %14, i64 0, i64 1
  %23 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 0, i32 1
  %24 = bitcast i32* %23 to i16*
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %14, i64 0, i64 3
  %26 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 0, i32 2
  %27 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 0, i32 3
  %28 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 1
  %29 = bitcast [20 x i8]* %28 to i16*
  br label %30

30:                                               ; preds = %61, %17
  %31 = phi i8* [ %12, %17 ], [ %62, %61 ]
  %32 = phi i16* [ %18, %17 ], [ %63, %61 ]
  %33 = phi i32 [ 0, %17 ], [ %64, %61 ]
  br i1 %19, label %34, label %61

34:                                               ; preds = %30
  %35 = load i8, i8* %31, align 1
  br label %66

36:                                               ; preds = %61, %9
  %37 = icmp sgt i32 %6, 0
  br i1 %37, label %38, label %261

38:                                               ; preds = %36
  %39 = icmp sgt i32 %5, 0
  %40 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 1, i64 4
  %41 = zext i32 %6 to i64
  %42 = zext i32 %5 to i64
  %43 = bitcast i8* %40 to i16*
  %44 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 1, i64 6
  %45 = bitcast i8* %44 to i16*
  %46 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 1, i64 8
  %47 = bitcast i8* %46 to i16*
  %48 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 1, i64 10
  %49 = bitcast i8* %48 to i16*
  %50 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 1, i64 12
  %51 = bitcast i8* %50 to i16*
  %52 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 1, i64 14
  %53 = bitcast i8* %52 to i16*
  %54 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 1, i64 16
  %55 = bitcast i8* %54 to i16*
  %56 = getelementptr i8, i8* %0, i64 %42
  %57 = getelementptr %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 1, i64 17
  %58 = icmp ult i32 %5, 8
  %59 = and i64 %42, 4294967288
  %60 = icmp eq i64 %59, %42
  br label %133

61:                                               ; preds = %66, %30
  %62 = getelementptr inbounds i8, i8* %31, i64 390
  %63 = getelementptr inbounds i16, i16* %32, i64 390
  %64 = add nuw nsw i32 %33, 1
  %65 = icmp eq i32 %64, %15
  br i1 %65, label %36, label %30

66:                                               ; preds = %66, %34
  %67 = phi i8 [ %35, %34 ], [ %82, %66 ]
  %68 = phi i64 [ 0, %34 ], [ %80, %66 ]
  %69 = add nuw nsw i64 %68, 3
  %70 = getelementptr inbounds i8, i8* %31, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = shl nuw nsw i32 %72, 7
  %74 = add nuw nsw i32 %73, 16384
  %75 = zext i8 %67 to i32
  %76 = load i16, i16* %21, align 2
  %77 = sext i16 %76 to i32
  %78 = mul nsw i32 %77, %75
  %79 = add nsw i32 %78, %74
  %80 = add nuw nsw i64 %68, 1
  %81 = getelementptr inbounds i8, i8* %31, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = load i16, i16* %22, align 2
  %85 = sext i16 %84 to i32
  %86 = mul nsw i32 %85, %83
  %87 = add nsw i32 %86, %79
  %88 = add nuw nsw i64 %68, 2
  %89 = getelementptr inbounds i8, i8* %31, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = load i16, i16* %24, align 2
  %93 = sext i16 %92 to i32
  %94 = mul nsw i32 %93, %91
  %95 = add nsw i32 %94, %87
  %96 = load i16, i16* %25, align 2
  %97 = sext i16 %96 to i32
  %98 = mul nsw i32 %97, %72
  %99 = add nsw i32 %98, %95
  %100 = add nuw nsw i64 %68, 4
  %101 = getelementptr inbounds i8, i8* %31, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = load i16, i16* %26, align 2
  %105 = sext i16 %104 to i32
  %106 = mul nsw i32 %105, %103
  %107 = add nsw i32 %106, %99
  %108 = add nuw nsw i64 %68, 5
  %109 = getelementptr inbounds i8, i8* %31, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = load i16, i16* %27, align 2
  %113 = sext i16 %112 to i32
  %114 = mul nsw i32 %113, %111
  %115 = add nsw i32 %114, %107
  %116 = add nuw nsw i64 %68, 6
  %117 = getelementptr inbounds i8, i8* %31, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = load i16, i16* %29, align 2
  %121 = sext i16 %120 to i32
  %122 = mul nsw i32 %121, %119
  %123 = add nsw i32 %122, %115
  %124 = add nsw i32 %123, 4
  %125 = ashr i32 %124, 3
  %126 = icmp slt i32 %125, 8191
  %127 = select i1 %126, i32 %125, i32 8191
  %128 = icmp sgt i32 %127, 0
  %129 = select i1 %128, i32 %127, i32 0
  %130 = trunc i32 %129 to i16
  %131 = getelementptr inbounds i16, i16* %32, i64 %68
  store i16 %130, i16* %131, align 2
  %132 = icmp eq i64 %80, %20
  br i1 %132, label %61, label %66

133:                                              ; preds = %331, %38
  %134 = phi i64 [ 0, %38 ], [ %332, %331 ]
  br i1 %39, label %137, label %135

135:                                              ; preds = %133
  %136 = add nuw nsw i64 %134, 1
  br label %331

137:                                              ; preds = %133
  %138 = mul nsw i64 %134, %1
  %139 = mul i64 %134, 390
  %140 = and i64 %139, 4294967294
  %141 = add nuw nsw i64 %134, 1
  %142 = mul i64 %141, 390
  %143 = and i64 %142, 4294967294
  %144 = mul i64 %134, 390
  %145 = add i64 %144, 780
  %146 = and i64 %145, 4294967294
  %147 = mul i64 %134, 390
  %148 = add i64 %147, 1170
  %149 = and i64 %148, 4294967294
  %150 = mul i64 %134, 390
  %151 = add i64 %150, 1560
  %152 = and i64 %151, 4294967294
  %153 = mul i64 %134, 390
  %154 = add i64 %153, 1950
  %155 = and i64 %154, 4294967294
  %156 = mul i64 %134, 390
  %157 = add i64 %156, 2340
  %158 = and i64 %157, 4294967294
  br i1 %58, label %159, label %161

159:                                              ; preds = %260, %161, %137
  %160 = phi i64 [ 0, %161 ], [ 0, %137 ], [ %59, %260 ]
  br label %262

161:                                              ; preds = %137
  %162 = mul i64 %134, %1
  %163 = getelementptr i8, i8* %0, i64 %162
  %164 = getelementptr i8, i8* %56, i64 %162
  %165 = icmp ult i8* %163, %57
  %166 = icmp ult i8* %54, %164
  %167 = and i1 %165, %166
  br i1 %167, label %159, label %168

168:                                              ; preds = %161
  %169 = load i16, i16* %43, align 2, !alias.scope !2
  %170 = insertelement <8 x i16> undef, i16 %169, i32 0
  %171 = shufflevector <8 x i16> %170, <8 x i16> undef, <8 x i32> zeroinitializer
  %172 = sext <8 x i16> %171 to <8 x i32>
  %173 = load i16, i16* %45, align 2, !alias.scope !2
  %174 = insertelement <8 x i16> undef, i16 %173, i32 0
  %175 = shufflevector <8 x i16> %174, <8 x i16> undef, <8 x i32> zeroinitializer
  %176 = sext <8 x i16> %175 to <8 x i32>
  %177 = load i16, i16* %47, align 2, !alias.scope !2
  %178 = insertelement <8 x i16> undef, i16 %177, i32 0
  %179 = shufflevector <8 x i16> %178, <8 x i16> undef, <8 x i32> zeroinitializer
  %180 = sext <8 x i16> %179 to <8 x i32>
  %181 = load i16, i16* %49, align 2, !alias.scope !2
  %182 = insertelement <8 x i16> undef, i16 %181, i32 0
  %183 = shufflevector <8 x i16> %182, <8 x i16> undef, <8 x i32> zeroinitializer
  %184 = sext <8 x i16> %183 to <8 x i32>
  %185 = load i16, i16* %51, align 2, !alias.scope !2
  %186 = insertelement <8 x i16> undef, i16 %185, i32 0
  %187 = shufflevector <8 x i16> %186, <8 x i16> undef, <8 x i32> zeroinitializer
  %188 = sext <8 x i16> %187 to <8 x i32>
  %189 = load i16, i16* %53, align 2, !alias.scope !2
  %190 = insertelement <8 x i16> undef, i16 %189, i32 0
  %191 = shufflevector <8 x i16> %190, <8 x i16> undef, <8 x i32> zeroinitializer
  %192 = sext <8 x i16> %191 to <8 x i32>
  %193 = load i16, i16* %55, align 2, !alias.scope !2
  %194 = insertelement <8 x i16> undef, i16 %193, i32 0
  %195 = shufflevector <8 x i16> %194, <8 x i16> undef, <8 x i32> zeroinitializer
  %196 = sext <8 x i16> %195 to <8 x i32>
  br label %197

197:                                              ; preds = %197, %168
  %198 = phi i64 [ 0, %168 ], [ %258, %197 ]
  %199 = add nuw nsw i64 %140, %198
  %200 = getelementptr inbounds [27300 x i16], [27300 x i16]* %11, i64 0, i64 %199
  %201 = bitcast i16* %200 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 4, !alias.scope !5
  %203 = zext <8 x i16> %202 to <8 x i32>
  %204 = mul nsw <8 x i32> %172, %203
  %205 = add nsw <8 x i32> %204, <i32 -262144, i32 -262144, i32 -262144, i32 -262144, i32 -262144, i32 -262144, i32 -262144, i32 -262144>
  %206 = add nuw nsw i64 %143, %198
  %207 = getelementptr inbounds [27300 x i16], [27300 x i16]* %11, i64 0, i64 %206
  %208 = bitcast i16* %207 to <8 x i16>*
  %209 = load <8 x i16>, <8 x i16>* %208, align 4, !alias.scope !7
  %210 = zext <8 x i16> %209 to <8 x i32>
  %211 = mul nsw <8 x i32> %176, %210
  %212 = add nsw <8 x i32> %211, %205
  %213 = add nuw nsw i64 %146, %198
  %214 = getelementptr inbounds [27300 x i16], [27300 x i16]* %11, i64 0, i64 %213
  %215 = bitcast i16* %214 to <8 x i16>*
  %216 = load <8 x i16>, <8 x i16>* %215, align 4, !alias.scope !9
  %217 = zext <8 x i16> %216 to <8 x i32>
  %218 = mul nsw <8 x i32> %180, %217
  %219 = add nsw <8 x i32> %218, %212
  %220 = add nuw nsw i64 %149, %198
  %221 = getelementptr inbounds [27300 x i16], [27300 x i16]* %11, i64 0, i64 %220
  %222 = bitcast i16* %221 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 4, !alias.scope !11
  %224 = zext <8 x i16> %223 to <8 x i32>
  %225 = mul nsw <8 x i32> %184, %224
  %226 = add nsw <8 x i32> %225, %219
  %227 = add nuw nsw i64 %152, %198
  %228 = getelementptr inbounds [27300 x i16], [27300 x i16]* %11, i64 0, i64 %227
  %229 = bitcast i16* %228 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 4, !alias.scope !13
  %231 = zext <8 x i16> %230 to <8 x i32>
  %232 = mul nsw <8 x i32> %188, %231
  %233 = add nsw <8 x i32> %232, %226
  %234 = add nuw nsw i64 %155, %198
  %235 = getelementptr inbounds [27300 x i16], [27300 x i16]* %11, i64 0, i64 %234
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 4, !alias.scope !15
  %238 = zext <8 x i16> %237 to <8 x i32>
  %239 = mul nsw <8 x i32> %192, %238
  %240 = add nsw <8 x i32> %239, %233
  %241 = add nuw nsw i64 %158, %198
  %242 = getelementptr inbounds [27300 x i16], [27300 x i16]* %11, i64 0, i64 %241
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 4, !alias.scope !17
  %245 = zext <8 x i16> %244 to <8 x i32>
  %246 = mul nsw <8 x i32> %196, %245
  %247 = add nsw <8 x i32> %246, %240
  %248 = add nsw <8 x i32> %247, <i32 1024, i32 1024, i32 1024, i32 1024, i32 1024, i32 1024, i32 1024, i32 1024>
  %249 = ashr <8 x i32> %248, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %250 = icmp slt <8 x i32> %249, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %251 = select <8 x i1> %250, <8 x i32> %249, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %252 = icmp sgt <8 x i32> %251, zeroinitializer
  %253 = select <8 x i1> %252, <8 x i32> %251, <8 x i32> zeroinitializer
  %254 = trunc <8 x i32> %253 to <8 x i8>
  %255 = add nsw i64 %138, %198
  %256 = getelementptr inbounds i8, i8* %0, i64 %255
  %257 = bitcast i8* %256 to <8 x i8>*
  store <8 x i8> %254, <8 x i8>* %257, align 1, !alias.scope !19, !noalias !2
  %258 = add i64 %198, 8
  %259 = icmp eq i64 %258, %59
  br i1 %259, label %260, label %197, !llvm.loop !21

260:                                              ; preds = %197
  br i1 %60, label %331, label %159

261:                                              ; preds = %331, %36
  call void @llvm.lifetime.end.p0i8(i64 54600, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 27300, i8* nonnull %12) #5
  ret void

262:                                              ; preds = %159, %262
  %263 = phi i64 [ %329, %262 ], [ %160, %159 ]
  %264 = add nuw nsw i64 %140, %263
  %265 = getelementptr inbounds [27300 x i16], [27300 x i16]* %11, i64 0, i64 %264
  %266 = load i16, i16* %265, align 2
  %267 = zext i16 %266 to i32
  %268 = load i16, i16* %43, align 2
  %269 = sext i16 %268 to i32
  %270 = mul nsw i32 %269, %267
  %271 = add nsw i32 %270, -262144
  %272 = add nuw nsw i64 %143, %263
  %273 = getelementptr inbounds [27300 x i16], [27300 x i16]* %11, i64 0, i64 %272
  %274 = load i16, i16* %273, align 2
  %275 = zext i16 %274 to i32
  %276 = load i16, i16* %45, align 2
  %277 = sext i16 %276 to i32
  %278 = mul nsw i32 %277, %275
  %279 = add nsw i32 %278, %271
  %280 = add nuw nsw i64 %146, %263
  %281 = getelementptr inbounds [27300 x i16], [27300 x i16]* %11, i64 0, i64 %280
  %282 = load i16, i16* %281, align 2
  %283 = zext i16 %282 to i32
  %284 = load i16, i16* %47, align 2
  %285 = sext i16 %284 to i32
  %286 = mul nsw i32 %285, %283
  %287 = add nsw i32 %286, %279
  %288 = add nuw nsw i64 %149, %263
  %289 = getelementptr inbounds [27300 x i16], [27300 x i16]* %11, i64 0, i64 %288
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  %292 = load i16, i16* %49, align 2
  %293 = sext i16 %292 to i32
  %294 = mul nsw i32 %293, %291
  %295 = add nsw i32 %294, %287
  %296 = add nuw nsw i64 %152, %263
  %297 = getelementptr inbounds [27300 x i16], [27300 x i16]* %11, i64 0, i64 %296
  %298 = load i16, i16* %297, align 2
  %299 = zext i16 %298 to i32
  %300 = load i16, i16* %51, align 2
  %301 = sext i16 %300 to i32
  %302 = mul nsw i32 %301, %299
  %303 = add nsw i32 %302, %295
  %304 = add nuw nsw i64 %155, %263
  %305 = getelementptr inbounds [27300 x i16], [27300 x i16]* %11, i64 0, i64 %304
  %306 = load i16, i16* %305, align 2
  %307 = zext i16 %306 to i32
  %308 = load i16, i16* %53, align 2
  %309 = sext i16 %308 to i32
  %310 = mul nsw i32 %309, %307
  %311 = add nsw i32 %310, %303
  %312 = add nuw nsw i64 %158, %263
  %313 = getelementptr inbounds [27300 x i16], [27300 x i16]* %11, i64 0, i64 %312
  %314 = load i16, i16* %313, align 2
  %315 = zext i16 %314 to i32
  %316 = load i16, i16* %55, align 2
  %317 = sext i16 %316 to i32
  %318 = mul nsw i32 %317, %315
  %319 = add nsw i32 %318, %311
  %320 = add nsw i32 %319, 1024
  %321 = ashr i32 %320, 11
  %322 = icmp slt i32 %321, 255
  %323 = select i1 %322, i32 %321, i32 255
  %324 = icmp sgt i32 %323, 0
  %325 = select i1 %324, i32 %323, i32 0
  %326 = trunc i32 %325 to i8
  %327 = add nsw i64 %138, %263
  %328 = getelementptr inbounds i8, i8* %0, i64 %327
  store i8 %326, i8* %328, align 1
  %329 = add nuw nsw i64 %263, 1
  %330 = icmp eq i64 %329, %42
  br i1 %330, label %331, label %262, !llvm.loop !23

331:                                              ; preds = %262, %260, %135
  %332 = phi i64 [ %136, %135 ], [ %141, %260 ], [ %141, %262 ]
  %333 = icmp eq i64 %332, %41
  br i1 %333, label %261, label %133
}

; Function Attrs: nounwind ssp uwtable
define internal void @sgr_5x5_c(i8* nocapture, i64, [4 x i8]* nocapture readonly, i8* nocapture readonly, i64, i32, i32, %union.LooprestorationParams* nocapture readonly, i32) #1 {
  %10 = alloca [27300 x i8], align 16
  %11 = alloca [24576 x i16], align 16
  %12 = getelementptr inbounds [27300 x i8], [27300 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 27300, i8* nonnull %12) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 27300, i1 false)
  %13 = bitcast [24576 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 49152, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 49152, i1 false)
  call fastcc void @padding(i8* nonnull %12, i8* %0, i64 %1, [4 x i8]* %2, i8* %3, i64 %4, i32 %5, i32 %6, i32 %8)
  %14 = getelementptr inbounds [24576 x i16], [24576 x i16]* %11, i64 0, i64 0
  %15 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 16
  call fastcc void @selfguided_filter(i16* nonnull %14, i8* nonnull %12, i32 %5, i32 %6, i32 25, i32 %16)
  %17 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 0, i32 2
  %18 = load i16, i16* %17, align 8
  %19 = sext i16 %18 to i32
  %20 = icmp sgt i32 %6, 0
  br i1 %20, label %21, label %80

21:                                               ; preds = %9
  %22 = icmp sgt i32 %5, 0
  %23 = zext i32 %6 to i64
  %24 = zext i32 %5 to i64
  %25 = getelementptr [24576 x i16], [24576 x i16]* %11, i64 0, i64 %24
  %26 = icmp ult i32 %5, 8
  %27 = and i64 %24, 4294967288
  %28 = insertelement <8 x i32> undef, i32 %19, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = icmp eq i64 %27, %24
  br label %31

31:                                               ; preds = %81, %21
  %32 = phi i64 [ 0, %21 ], [ %83, %81 ]
  %33 = phi i8* [ %0, %21 ], [ %82, %81 ]
  %34 = mul i64 %32, %1
  %35 = getelementptr i8, i8* %0, i64 %34
  %36 = add i64 %34, %24
  %37 = getelementptr i8, i8* %0, i64 %36
  %38 = mul i64 %32, 384
  %39 = and i64 %38, 4294967168
  %40 = getelementptr [24576 x i16], [24576 x i16]* %11, i64 0, i64 %39
  %41 = bitcast i16* %40 to i8*
  %42 = getelementptr i16, i16* %25, i64 %39
  %43 = bitcast i16* %42 to i8*
  br i1 %22, label %44, label %81

44:                                               ; preds = %31
  %45 = mul i64 %32, 384
  %46 = and i64 %45, 4294967168
  br i1 %26, label %47, label %49

47:                                               ; preds = %79, %49, %44
  %48 = phi i64 [ 0, %49 ], [ 0, %44 ], [ %27, %79 ]
  br label %85

49:                                               ; preds = %44
  %50 = icmp ult i8* %35, %43
  %51 = icmp ugt i8* %37, %41
  %52 = and i1 %50, %51
  br i1 %52, label %47, label %53

53:                                               ; preds = %49, %53
  %54 = phi i64 [ %77, %53 ], [ 0, %49 ]
  %55 = getelementptr inbounds i8, i8* %33, i64 %54
  %56 = bitcast i8* %55 to <8 x i8>*
  %57 = load <8 x i8>, <8 x i8>* %56, align 1, !alias.scope !24, !noalias !27
  %58 = zext <8 x i8> %57 to <8 x i32>
  %59 = shl nuw nsw <8 x i32> %58, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %60 = shl nuw nsw <8 x i32> %58, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %61 = add nuw nsw i64 %54, %46
  %62 = getelementptr inbounds [24576 x i16], [24576 x i16]* %11, i64 0, i64 %61
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 16, !alias.scope !27
  %65 = sext <8 x i16> %64 to <8 x i32>
  %66 = sub nsw <8 x i32> %65, %59
  %67 = mul nsw <8 x i32> %66, %29
  %68 = or <8 x i32> %60, <i32 1024, i32 1024, i32 1024, i32 1024, i32 1024, i32 1024, i32 1024, i32 1024>
  %69 = add <8 x i32> %68, %67
  %70 = ashr <8 x i32> %69, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %71 = icmp slt <8 x i32> %70, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %72 = select <8 x i1> %71, <8 x i32> %70, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %73 = icmp sgt <8 x i32> %72, zeroinitializer
  %74 = select <8 x i1> %73, <8 x i32> %72, <8 x i32> zeroinitializer
  %75 = trunc <8 x i32> %74 to <8 x i8>
  %76 = bitcast i8* %55 to <8 x i8>*
  store <8 x i8> %75, <8 x i8>* %76, align 1, !alias.scope !24, !noalias !27
  %77 = add i64 %54, 8
  %78 = icmp eq i64 %77, %27
  br i1 %78, label %79, label %53, !llvm.loop !29

79:                                               ; preds = %53
  br i1 %30, label %81, label %47

80:                                               ; preds = %81, %9
  call void @llvm.lifetime.end.p0i8(i64 49152, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 27300, i8* nonnull %12) #5
  ret void

81:                                               ; preds = %85, %79, %31
  %82 = getelementptr inbounds i8, i8* %33, i64 %1
  %83 = add nuw nsw i64 %32, 1
  %84 = icmp eq i64 %83, %23
  br i1 %84, label %80, label %31

85:                                               ; preds = %47, %85
  %86 = phi i64 [ %106, %85 ], [ %48, %47 ]
  %87 = getelementptr inbounds i8, i8* %33, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = shl nuw nsw i32 %89, 4
  %91 = shl nuw nsw i32 %89, 11
  %92 = add nuw nsw i64 %86, %46
  %93 = getelementptr inbounds [24576 x i16], [24576 x i16]* %11, i64 0, i64 %92
  %94 = load i16, i16* %93, align 2
  %95 = sext i16 %94 to i32
  %96 = sub nsw i32 %95, %90
  %97 = mul nsw i32 %96, %19
  %98 = or i32 %91, 1024
  %99 = add i32 %98, %97
  %100 = ashr i32 %99, 11
  %101 = icmp slt i32 %100, 255
  %102 = select i1 %101, i32 %100, i32 255
  %103 = icmp sgt i32 %102, 0
  %104 = select i1 %103, i32 %102, i32 0
  %105 = trunc i32 %104 to i8
  store i8 %105, i8* %87, align 1
  %106 = add nuw nsw i64 %86, 1
  %107 = icmp eq i64 %106, %24
  br i1 %107, label %81, label %85, !llvm.loop !30
}

; Function Attrs: nounwind ssp uwtable
define internal void @sgr_3x3_c(i8* nocapture, i64, [4 x i8]* nocapture readonly, i8* nocapture readonly, i64, i32, i32, %union.LooprestorationParams* nocapture readonly, i32) #1 {
  %10 = alloca [27300 x i8], align 16
  %11 = alloca [24576 x i16], align 16
  %12 = getelementptr inbounds [27300 x i8], [27300 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 27300, i8* nonnull %12) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 27300, i1 false)
  %13 = bitcast [24576 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 49152, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 49152, i1 false)
  call fastcc void @padding(i8* nonnull %12, i8* %0, i64 %1, [4 x i8]* %2, i8* %3, i64 %4, i32 %5, i32 %6, i32 %8)
  %14 = getelementptr inbounds [24576 x i16], [24576 x i16]* %11, i64 0, i64 0
  %15 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  call fastcc void @selfguided_filter(i16* nonnull %14, i8* nonnull %12, i32 %5, i32 %6, i32 9, i32 %16)
  %17 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 0, i32 3
  %18 = load i16, i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = icmp sgt i32 %6, 0
  br i1 %20, label %21, label %80

21:                                               ; preds = %9
  %22 = icmp sgt i32 %5, 0
  %23 = zext i32 %6 to i64
  %24 = zext i32 %5 to i64
  %25 = getelementptr [24576 x i16], [24576 x i16]* %11, i64 0, i64 %24
  %26 = icmp ult i32 %5, 8
  %27 = and i64 %24, 4294967288
  %28 = insertelement <8 x i32> undef, i32 %19, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = icmp eq i64 %27, %24
  br label %31

31:                                               ; preds = %81, %21
  %32 = phi i64 [ 0, %21 ], [ %83, %81 ]
  %33 = phi i8* [ %0, %21 ], [ %82, %81 ]
  %34 = mul i64 %32, %1
  %35 = getelementptr i8, i8* %0, i64 %34
  %36 = add i64 %34, %24
  %37 = getelementptr i8, i8* %0, i64 %36
  %38 = mul i64 %32, 384
  %39 = and i64 %38, 4294967168
  %40 = getelementptr [24576 x i16], [24576 x i16]* %11, i64 0, i64 %39
  %41 = bitcast i16* %40 to i8*
  %42 = getelementptr i16, i16* %25, i64 %39
  %43 = bitcast i16* %42 to i8*
  br i1 %22, label %44, label %81

44:                                               ; preds = %31
  %45 = mul i64 %32, 384
  %46 = and i64 %45, 4294967168
  br i1 %26, label %47, label %49

47:                                               ; preds = %79, %49, %44
  %48 = phi i64 [ 0, %49 ], [ 0, %44 ], [ %27, %79 ]
  br label %85

49:                                               ; preds = %44
  %50 = icmp ult i8* %35, %43
  %51 = icmp ugt i8* %37, %41
  %52 = and i1 %50, %51
  br i1 %52, label %47, label %53

53:                                               ; preds = %49, %53
  %54 = phi i64 [ %77, %53 ], [ 0, %49 ]
  %55 = getelementptr inbounds i8, i8* %33, i64 %54
  %56 = bitcast i8* %55 to <8 x i8>*
  %57 = load <8 x i8>, <8 x i8>* %56, align 1, !alias.scope !31, !noalias !34
  %58 = zext <8 x i8> %57 to <8 x i32>
  %59 = shl nuw nsw <8 x i32> %58, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %60 = shl nuw nsw <8 x i32> %58, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %61 = add nuw nsw i64 %54, %46
  %62 = getelementptr inbounds [24576 x i16], [24576 x i16]* %11, i64 0, i64 %61
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 16, !alias.scope !34
  %65 = sext <8 x i16> %64 to <8 x i32>
  %66 = sub nsw <8 x i32> %65, %59
  %67 = mul nsw <8 x i32> %66, %29
  %68 = or <8 x i32> %60, <i32 1024, i32 1024, i32 1024, i32 1024, i32 1024, i32 1024, i32 1024, i32 1024>
  %69 = add <8 x i32> %68, %67
  %70 = ashr <8 x i32> %69, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %71 = icmp slt <8 x i32> %70, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %72 = select <8 x i1> %71, <8 x i32> %70, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %73 = icmp sgt <8 x i32> %72, zeroinitializer
  %74 = select <8 x i1> %73, <8 x i32> %72, <8 x i32> zeroinitializer
  %75 = trunc <8 x i32> %74 to <8 x i8>
  %76 = bitcast i8* %55 to <8 x i8>*
  store <8 x i8> %75, <8 x i8>* %76, align 1, !alias.scope !31, !noalias !34
  %77 = add i64 %54, 8
  %78 = icmp eq i64 %77, %27
  br i1 %78, label %79, label %53, !llvm.loop !36

79:                                               ; preds = %53
  br i1 %30, label %81, label %47

80:                                               ; preds = %81, %9
  call void @llvm.lifetime.end.p0i8(i64 49152, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 27300, i8* nonnull %12) #5
  ret void

81:                                               ; preds = %85, %79, %31
  %82 = getelementptr inbounds i8, i8* %33, i64 %1
  %83 = add nuw nsw i64 %32, 1
  %84 = icmp eq i64 %83, %23
  br i1 %84, label %80, label %31

85:                                               ; preds = %47, %85
  %86 = phi i64 [ %106, %85 ], [ %48, %47 ]
  %87 = getelementptr inbounds i8, i8* %33, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = shl nuw nsw i32 %89, 4
  %91 = shl nuw nsw i32 %89, 11
  %92 = add nuw nsw i64 %86, %46
  %93 = getelementptr inbounds [24576 x i16], [24576 x i16]* %11, i64 0, i64 %92
  %94 = load i16, i16* %93, align 2
  %95 = sext i16 %94 to i32
  %96 = sub nsw i32 %95, %90
  %97 = mul nsw i32 %96, %19
  %98 = or i32 %91, 1024
  %99 = add i32 %98, %97
  %100 = ashr i32 %99, 11
  %101 = icmp slt i32 %100, 255
  %102 = select i1 %101, i32 %100, i32 255
  %103 = icmp sgt i32 %102, 0
  %104 = select i1 %103, i32 %102, i32 0
  %105 = trunc i32 %104 to i8
  store i8 %105, i8* %87, align 1
  %106 = add nuw nsw i64 %86, 1
  %107 = icmp eq i64 %106, %24
  br i1 %107, label %81, label %85, !llvm.loop !37
}

; Function Attrs: nounwind ssp uwtable
define internal void @sgr_mix_c(i8* nocapture, i64, [4 x i8]* nocapture readonly, i8* nocapture readonly, i64, i32, i32, %union.LooprestorationParams* nocapture readonly, i32) #1 {
  %10 = alloca [27300 x i8], align 16
  %11 = alloca [24576 x i16], align 16
  %12 = alloca [24576 x i16], align 16
  %13 = getelementptr inbounds [27300 x i8], [27300 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 27300, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 27300, i1 false)
  %14 = bitcast [24576 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 49152, i8* nonnull %14) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 49152, i1 false)
  %15 = bitcast [24576 x i16]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 49152, i8* nonnull %15) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 49152, i1 false)
  call fastcc void @padding(i8* nonnull %13, i8* %0, i64 %1, [4 x i8]* %2, i8* %3, i64 %4, i32 %5, i32 %6, i32 %8)
  %16 = getelementptr inbounds [24576 x i16], [24576 x i16]* %11, i64 0, i64 0
  %17 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 0, i32 0
  %18 = load i32, i32* %17, align 16
  call fastcc void @selfguided_filter(i16* nonnull %16, i8* nonnull %13, i32 %5, i32 %6, i32 25, i32 %18)
  %19 = getelementptr inbounds [24576 x i16], [24576 x i16]* %12, i64 0, i64 0
  %20 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 0, i32 1
  %21 = load i32, i32* %20, align 4
  call fastcc void @selfguided_filter(i16* nonnull %19, i8* nonnull %13, i32 %5, i32 %6, i32 9, i32 %21)
  %22 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 0, i32 2
  %23 = load i16, i16* %22, align 8
  %24 = sext i16 %23 to i32
  %25 = getelementptr inbounds %union.LooprestorationParams, %union.LooprestorationParams* %7, i64 0, i32 0, i32 3
  %26 = load i16, i16* %25, align 2
  %27 = sext i16 %26 to i32
  %28 = icmp sgt i32 %6, 0
  br i1 %28, label %29, label %106

29:                                               ; preds = %9
  %30 = icmp sgt i32 %5, 0
  %31 = zext i32 %6 to i64
  %32 = zext i32 %5 to i64
  %33 = getelementptr [24576 x i16], [24576 x i16]* %11, i64 0, i64 %32
  %34 = getelementptr [24576 x i16], [24576 x i16]* %12, i64 0, i64 %32
  %35 = icmp ult i32 %5, 8
  %36 = and i64 %32, 4294967288
  %37 = insertelement <8 x i32> undef, i32 %24, i32 0
  %38 = shufflevector <8 x i32> %37, <8 x i32> undef, <8 x i32> zeroinitializer
  %39 = insertelement <8 x i32> undef, i32 %27, i32 0
  %40 = shufflevector <8 x i32> %39, <8 x i32> undef, <8 x i32> zeroinitializer
  %41 = icmp eq i64 %36, %32
  br label %42

42:                                               ; preds = %107, %29
  %43 = phi i64 [ 0, %29 ], [ %109, %107 ]
  %44 = phi i8* [ %0, %29 ], [ %108, %107 ]
  %45 = mul i64 %43, %1
  %46 = getelementptr i8, i8* %0, i64 %45
  %47 = add i64 %45, %32
  %48 = getelementptr i8, i8* %0, i64 %47
  %49 = mul i64 %43, 384
  %50 = and i64 %49, 4294967168
  %51 = getelementptr [24576 x i16], [24576 x i16]* %11, i64 0, i64 %50
  %52 = bitcast i16* %51 to i8*
  %53 = getelementptr i16, i16* %33, i64 %50
  %54 = bitcast i16* %53 to i8*
  %55 = getelementptr [24576 x i16], [24576 x i16]* %12, i64 0, i64 %50
  %56 = bitcast i16* %55 to i8*
  %57 = getelementptr i16, i16* %34, i64 %50
  %58 = bitcast i16* %57 to i8*
  br i1 %30, label %59, label %107

59:                                               ; preds = %42
  %60 = mul i64 %43, 384
  %61 = and i64 %60, 4294967168
  br i1 %35, label %62, label %64

62:                                               ; preds = %105, %64, %59
  %63 = phi i64 [ 0, %64 ], [ 0, %59 ], [ %36, %105 ]
  br label %111

64:                                               ; preds = %59
  %65 = icmp ult i8* %46, %54
  %66 = icmp ugt i8* %48, %52
  %67 = and i1 %65, %66
  %68 = icmp ult i8* %46, %58
  %69 = icmp ugt i8* %48, %56
  %70 = and i1 %68, %69
  %71 = or i1 %67, %70
  br i1 %71, label %62, label %72

72:                                               ; preds = %64, %72
  %73 = phi i64 [ %103, %72 ], [ 0, %64 ]
  %74 = getelementptr inbounds i8, i8* %44, i64 %73
  %75 = bitcast i8* %74 to <8 x i8>*
  %76 = load <8 x i8>, <8 x i8>* %75, align 1, !alias.scope !38, !noalias !41
  %77 = zext <8 x i8> %76 to <8 x i32>
  %78 = shl nuw nsw <8 x i32> %77, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %79 = shl nuw nsw <8 x i32> %77, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %80 = add nuw nsw i64 %73, %61
  %81 = getelementptr inbounds [24576 x i16], [24576 x i16]* %11, i64 0, i64 %80
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 16, !alias.scope !44
  %84 = sext <8 x i16> %83 to <8 x i32>
  %85 = sub nsw <8 x i32> %84, %78
  %86 = mul nsw <8 x i32> %85, %38
  %87 = getelementptr inbounds [24576 x i16], [24576 x i16]* %12, i64 0, i64 %80
  %88 = bitcast i16* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 16, !alias.scope !45
  %90 = sext <8 x i16> %89 to <8 x i32>
  %91 = sub nsw <8 x i32> %90, %78
  %92 = mul nsw <8 x i32> %91, %40
  %93 = or <8 x i32> %79, <i32 1024, i32 1024, i32 1024, i32 1024, i32 1024, i32 1024, i32 1024, i32 1024>
  %94 = add <8 x i32> %93, %86
  %95 = add <8 x i32> %94, %92
  %96 = ashr <8 x i32> %95, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %97 = icmp slt <8 x i32> %96, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %98 = select <8 x i1> %97, <8 x i32> %96, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %99 = icmp sgt <8 x i32> %98, zeroinitializer
  %100 = select <8 x i1> %99, <8 x i32> %98, <8 x i32> zeroinitializer
  %101 = trunc <8 x i32> %100 to <8 x i8>
  %102 = bitcast i8* %74 to <8 x i8>*
  store <8 x i8> %101, <8 x i8>* %102, align 1, !alias.scope !38, !noalias !41
  %103 = add i64 %73, 8
  %104 = icmp eq i64 %103, %36
  br i1 %104, label %105, label %72, !llvm.loop !46

105:                                              ; preds = %72
  br i1 %41, label %107, label %62

106:                                              ; preds = %107, %9
  call void @llvm.lifetime.end.p0i8(i64 49152, i8* nonnull %15) #5
  call void @llvm.lifetime.end.p0i8(i64 49152, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 27300, i8* nonnull %13) #5
  ret void

107:                                              ; preds = %111, %105, %42
  %108 = getelementptr inbounds i8, i8* %44, i64 %1
  %109 = add nuw nsw i64 %43, 1
  %110 = icmp eq i64 %109, %31
  br i1 %110, label %106, label %42

111:                                              ; preds = %62, %111
  %112 = phi i64 [ %138, %111 ], [ %63, %62 ]
  %113 = getelementptr inbounds i8, i8* %44, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = shl nuw nsw i32 %115, 4
  %117 = shl nuw nsw i32 %115, 11
  %118 = add nuw nsw i64 %112, %61
  %119 = getelementptr inbounds [24576 x i16], [24576 x i16]* %11, i64 0, i64 %118
  %120 = load i16, i16* %119, align 2
  %121 = sext i16 %120 to i32
  %122 = sub nsw i32 %121, %116
  %123 = mul nsw i32 %122, %24
  %124 = getelementptr inbounds [24576 x i16], [24576 x i16]* %12, i64 0, i64 %118
  %125 = load i16, i16* %124, align 2
  %126 = sext i16 %125 to i32
  %127 = sub nsw i32 %126, %116
  %128 = mul nsw i32 %127, %27
  %129 = or i32 %117, 1024
  %130 = add i32 %129, %123
  %131 = add i32 %130, %128
  %132 = ashr i32 %131, 11
  %133 = icmp slt i32 %132, 255
  %134 = select i1 %133, i32 %132, i32 255
  %135 = icmp sgt i32 %134, 0
  %136 = select i1 %135, i32 %134, i32 0
  %137 = trunc i32 %136 to i8
  store i8 %137, i8* %113, align 1
  %138 = add nuw nsw i64 %112, 1
  %139 = icmp eq i64 %138, %32
  br i1 %139, label %107, label %111, !llvm.loop !47
}

declare void @dav1d_loop_restoration_dsp_init_x86_8bpc(%struct.Dav1dLoopRestorationDSPContext*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @padding(i8* nocapture, i8* nocapture readonly, i64, [4 x i8]* nocapture readonly, i8* nocapture readonly, i64, i32, i32, i32) unnamed_addr #4 {
  %10 = and i32 %8, 1
  %11 = icmp ne i32 %10, 0
  %12 = and i32 %8, 2
  %13 = icmp eq i32 %12, 0
  %14 = lshr exact i32 %12, 1
  %15 = mul nuw nsw i32 %10, 3
  %16 = mul nuw nsw i32 %14, 3
  %17 = add i32 %15, %6
  %18 = add i32 %17, %16
  %19 = select i1 %11, i64 0, i64 3
  %20 = getelementptr inbounds i8, i8* %0, i64 %19
  %21 = zext i32 %15 to i64
  %22 = sub nsw i64 0, %21
  %23 = getelementptr inbounds i8, i8* %1, i64 %22
  %24 = getelementptr inbounds i8, i8* %4, i64 %22
  %25 = and i32 %8, 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %9
  %28 = getelementptr inbounds i8, i8* %24, i64 %5
  %29 = sext i32 %18 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %24, i64 %29, i1 false)
  %30 = getelementptr inbounds i8, i8* %20, i64 390
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %24, i64 %29, i1 false)
  %31 = getelementptr inbounds i8, i8* %20, i64 780
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %31, i8* align 1 %28, i64 %29, i1 false)
  br label %38

32:                                               ; preds = %9
  %33 = sext i32 %18 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %23, i64 %33, i1 false)
  %34 = getelementptr inbounds i8, i8* %20, i64 390
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %23, i64 %33, i1 false)
  %35 = getelementptr inbounds i8, i8* %20, i64 780
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 %23, i64 %33, i1 false)
  br i1 %11, label %36, label %38

36:                                               ; preds = %32
  %37 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %37, i64 3, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %37, i64 3, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 %37, i64 3, i1 false)
  br label %38

38:                                               ; preds = %32, %36, %27
  %39 = getelementptr inbounds i8, i8* %20, i64 1170
  %40 = and i32 %8, 8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %56, label %42

42:                                               ; preds = %38
  %43 = mul nsw i64 %5, 6
  %44 = getelementptr inbounds i8, i8* %24, i64 %43
  %45 = getelementptr inbounds i8, i8* %44, i64 %5
  %46 = mul i32 %7, 390
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %39, i64 %47
  %49 = sext i32 %18 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %48, i8* align 1 %44, i64 %49, i1 false)
  %50 = add i32 %46, 390
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %39, i64 %51
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %45, i64 %49, i1 false)
  %53 = add i32 %46, 780
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %39, i64 %54
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %55, i8* align 1 %45, i64 %49, i1 false)
  br label %73

56:                                               ; preds = %38
  %57 = add nsw i32 %7, -1
  %58 = sext i32 %57 to i64
  %59 = mul nsw i64 %58, %2
  %60 = getelementptr inbounds i8, i8* %23, i64 %59
  %61 = mul i32 %7, 390
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %39, i64 %62
  %64 = sext i32 %18 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %60, i64 %64, i1 false)
  %65 = add i32 %61, 390
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %39, i64 %66
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %60, i64 %64, i1 false)
  %68 = add i32 %61, 780
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %39, i64 %69
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %60, i64 %64, i1 false)
  br i1 %11, label %71, label %73

71:                                               ; preds = %56
  %72 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 %58, i64 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %72, i64 3, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %72, i64 3, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %72, i64 3, i1 false)
  br label %73

73:                                               ; preds = %56, %71, %42
  %74 = icmp sgt i32 %7, 0
  br i1 %74, label %75, label %97

75:                                               ; preds = %73
  %76 = sub nsw i32 %18, %15
  %77 = sext i32 %76 to i64
  %78 = add i32 %7, -1
  %79 = and i32 %7, 3
  %80 = icmp ult i32 %78, 3
  br i1 %80, label %83, label %81

81:                                               ; preds = %75
  %82 = sub i32 %7, %79
  br label %98

83:                                               ; preds = %98, %75
  %84 = phi i8* [ %23, %75 ], [ %117, %98 ]
  %85 = phi i8* [ %39, %75 ], [ %116, %98 ]
  %86 = icmp eq i32 %79, 0
  br i1 %86, label %97, label %87

87:                                               ; preds = %83, %87
  %88 = phi i8* [ %94, %87 ], [ %84, %83 ]
  %89 = phi i8* [ %93, %87 ], [ %85, %83 ]
  %90 = phi i32 [ %95, %87 ], [ %79, %83 ]
  %91 = getelementptr inbounds i8, i8* %89, i64 %21
  %92 = getelementptr inbounds i8, i8* %88, i64 %21
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %91, i8* align 1 %92, i64 %77, i1 false)
  %93 = getelementptr inbounds i8, i8* %89, i64 390
  %94 = getelementptr inbounds i8, i8* %88, i64 %2
  %95 = add i32 %90, -1
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %87, !llvm.loop !48

97:                                               ; preds = %83, %87, %73
  br i1 %13, label %120, label %177

98:                                               ; preds = %98, %81
  %99 = phi i8* [ %23, %81 ], [ %117, %98 ]
  %100 = phi i8* [ %39, %81 ], [ %116, %98 ]
  %101 = phi i32 [ %82, %81 ], [ %118, %98 ]
  %102 = getelementptr inbounds i8, i8* %100, i64 %21
  %103 = getelementptr inbounds i8, i8* %99, i64 %21
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %102, i8* align 1 %103, i64 %77, i1 false)
  %104 = getelementptr inbounds i8, i8* %100, i64 390
  %105 = getelementptr inbounds i8, i8* %99, i64 %2
  %106 = getelementptr inbounds i8, i8* %104, i64 %21
  %107 = getelementptr inbounds i8, i8* %105, i64 %21
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %106, i8* align 1 %107, i64 %77, i1 false)
  %108 = getelementptr inbounds i8, i8* %100, i64 780
  %109 = getelementptr inbounds i8, i8* %105, i64 %2
  %110 = getelementptr inbounds i8, i8* %108, i64 %21
  %111 = getelementptr inbounds i8, i8* %109, i64 %21
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %110, i8* align 1 %111, i64 %77, i1 false)
  %112 = getelementptr inbounds i8, i8* %100, i64 1170
  %113 = getelementptr inbounds i8, i8* %109, i64 %2
  %114 = getelementptr inbounds i8, i8* %112, i64 %21
  %115 = getelementptr inbounds i8, i8* %113, i64 %21
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 %115, i64 %77, i1 false)
  %116 = getelementptr inbounds i8, i8* %100, i64 1560
  %117 = getelementptr inbounds i8, i8* %113, i64 %2
  %118 = add i32 %101, -4
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %83, label %98

120:                                              ; preds = %97
  %121 = add i32 %7, 6
  %122 = icmp sgt i32 %121, 0
  br i1 %122, label %123, label %177

123:                                              ; preds = %120
  %124 = add nsw i32 %18, -1
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i8, i8* %20, i64 %125
  %127 = sext i32 %18 to i64
  %128 = getelementptr inbounds i8, i8* %20, i64 %127
  %129 = add i32 %7, 5
  %130 = and i32 %121, 7
  %131 = icmp ult i32 %129, 7
  br i1 %131, label %164, label %132

132:                                              ; preds = %123
  %133 = sub i32 %121, %130
  br label %134

134:                                              ; preds = %134, %132
  %135 = phi i8* [ %126, %132 ], [ %161, %134 ]
  %136 = phi i8* [ %128, %132 ], [ %160, %134 ]
  %137 = phi i32 [ %133, %132 ], [ %162, %134 ]
  %138 = load i8, i8* %135, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %136, i8 %138, i64 3, i1 false)
  %139 = getelementptr inbounds i8, i8* %136, i64 390
  %140 = getelementptr inbounds i8, i8* %135, i64 390
  %141 = load i8, i8* %140, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %139, i8 %141, i64 3, i1 false)
  %142 = getelementptr inbounds i8, i8* %136, i64 780
  %143 = getelementptr inbounds i8, i8* %135, i64 780
  %144 = load i8, i8* %143, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %142, i8 %144, i64 3, i1 false)
  %145 = getelementptr inbounds i8, i8* %136, i64 1170
  %146 = getelementptr inbounds i8, i8* %135, i64 1170
  %147 = load i8, i8* %146, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %145, i8 %147, i64 3, i1 false)
  %148 = getelementptr inbounds i8, i8* %136, i64 1560
  %149 = getelementptr inbounds i8, i8* %135, i64 1560
  %150 = load i8, i8* %149, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %148, i8 %150, i64 3, i1 false)
  %151 = getelementptr inbounds i8, i8* %136, i64 1950
  %152 = getelementptr inbounds i8, i8* %135, i64 1950
  %153 = load i8, i8* %152, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %151, i8 %153, i64 3, i1 false)
  %154 = getelementptr inbounds i8, i8* %136, i64 2340
  %155 = getelementptr inbounds i8, i8* %135, i64 2340
  %156 = load i8, i8* %155, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %154, i8 %156, i64 3, i1 false)
  %157 = getelementptr inbounds i8, i8* %136, i64 2730
  %158 = getelementptr inbounds i8, i8* %135, i64 2730
  %159 = load i8, i8* %158, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %157, i8 %159, i64 3, i1 false)
  %160 = getelementptr inbounds i8, i8* %136, i64 3120
  %161 = getelementptr inbounds i8, i8* %135, i64 3120
  %162 = add i32 %137, -8
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %164, label %134

164:                                              ; preds = %134, %123
  %165 = phi i8* [ %126, %123 ], [ %161, %134 ]
  %166 = phi i8* [ %128, %123 ], [ %160, %134 ]
  %167 = icmp eq i32 %130, 0
  br i1 %167, label %177, label %168

168:                                              ; preds = %164, %168
  %169 = phi i8* [ %174, %168 ], [ %165, %164 ]
  %170 = phi i8* [ %173, %168 ], [ %166, %164 ]
  %171 = phi i32 [ %175, %168 ], [ %130, %164 ]
  %172 = load i8, i8* %169, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %170, i8 %172, i64 3, i1 false)
  %173 = getelementptr inbounds i8, i8* %170, i64 390
  %174 = getelementptr inbounds i8, i8* %169, i64 390
  %175 = add i32 %171, -1
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %168, !llvm.loop !50

177:                                              ; preds = %164, %168, %120, %97
  br i1 %11, label %217, label %178

178:                                              ; preds = %177
  %179 = add i32 %7, 6
  %180 = icmp sgt i32 %179, 0
  br i1 %180, label %181, label %270

181:                                              ; preds = %178
  %182 = add i32 %7, 5
  %183 = and i32 %179, 7
  %184 = icmp ult i32 %182, 7
  br i1 %184, label %257, label %185

185:                                              ; preds = %181
  %186 = sub i32 %179, %183
  br label %187

187:                                              ; preds = %187, %185
  %188 = phi i8* [ %0, %185 ], [ %213, %187 ]
  %189 = phi i8* [ %20, %185 ], [ %214, %187 ]
  %190 = phi i32 [ %186, %185 ], [ %215, %187 ]
  %191 = load i8, i8* %189, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %188, i8 %191, i64 3, i1 false)
  %192 = getelementptr inbounds i8, i8* %188, i64 390
  %193 = getelementptr inbounds i8, i8* %189, i64 390
  %194 = load i8, i8* %193, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %192, i8 %194, i64 3, i1 false)
  %195 = getelementptr inbounds i8, i8* %188, i64 780
  %196 = getelementptr inbounds i8, i8* %189, i64 780
  %197 = load i8, i8* %196, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %195, i8 %197, i64 3, i1 false)
  %198 = getelementptr inbounds i8, i8* %188, i64 1170
  %199 = getelementptr inbounds i8, i8* %189, i64 1170
  %200 = load i8, i8* %199, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %198, i8 %200, i64 3, i1 false)
  %201 = getelementptr inbounds i8, i8* %188, i64 1560
  %202 = getelementptr inbounds i8, i8* %189, i64 1560
  %203 = load i8, i8* %202, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %201, i8 %203, i64 3, i1 false)
  %204 = getelementptr inbounds i8, i8* %188, i64 1950
  %205 = getelementptr inbounds i8, i8* %189, i64 1950
  %206 = load i8, i8* %205, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %204, i8 %206, i64 3, i1 false)
  %207 = getelementptr inbounds i8, i8* %188, i64 2340
  %208 = getelementptr inbounds i8, i8* %189, i64 2340
  %209 = load i8, i8* %208, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %207, i8 %209, i64 3, i1 false)
  %210 = getelementptr inbounds i8, i8* %188, i64 2730
  %211 = getelementptr inbounds i8, i8* %189, i64 2730
  %212 = load i8, i8* %211, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %210, i8 %212, i64 3, i1 false)
  %213 = getelementptr inbounds i8, i8* %188, i64 3120
  %214 = getelementptr inbounds i8, i8* %189, i64 3120
  %215 = add i32 %190, -8
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %257, label %187

217:                                              ; preds = %177
  br i1 %74, label %218, label %270

218:                                              ; preds = %217
  %219 = getelementptr inbounds i8, i8* %0, i64 1170
  %220 = zext i32 %7 to i64
  %221 = add nsw i64 %220, -1
  %222 = and i64 %220, 3
  %223 = icmp ult i64 %221, 3
  br i1 %223, label %244, label %224

224:                                              ; preds = %218
  %225 = sub nsw i64 %220, %222
  br label %226

226:                                              ; preds = %226, %224
  %227 = phi i64 [ 0, %224 ], [ %241, %226 ]
  %228 = phi i8* [ %219, %224 ], [ %240, %226 ]
  %229 = phi i64 [ %225, %224 ], [ %242, %226 ]
  %230 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 %227, i64 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %228, i8* align 1 %230, i64 3, i1 false)
  %231 = getelementptr inbounds i8, i8* %228, i64 390
  %232 = or i64 %227, 1
  %233 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 %232, i64 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %231, i8* align 1 %233, i64 3, i1 false)
  %234 = getelementptr inbounds i8, i8* %228, i64 780
  %235 = or i64 %227, 2
  %236 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 %235, i64 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %234, i8* align 1 %236, i64 3, i1 false)
  %237 = getelementptr inbounds i8, i8* %228, i64 1170
  %238 = or i64 %227, 3
  %239 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 %238, i64 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %237, i8* align 1 %239, i64 3, i1 false)
  %240 = getelementptr inbounds i8, i8* %228, i64 1560
  %241 = add nuw nsw i64 %227, 4
  %242 = add i64 %229, -4
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %244, label %226

244:                                              ; preds = %226, %218
  %245 = phi i64 [ 0, %218 ], [ %241, %226 ]
  %246 = phi i8* [ %219, %218 ], [ %240, %226 ]
  %247 = icmp eq i64 %222, 0
  br i1 %247, label %270, label %248

248:                                              ; preds = %244, %248
  %249 = phi i64 [ %254, %248 ], [ %245, %244 ]
  %250 = phi i8* [ %253, %248 ], [ %246, %244 ]
  %251 = phi i64 [ %255, %248 ], [ %222, %244 ]
  %252 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 %249, i64 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %250, i8* align 1 %252, i64 3, i1 false)
  %253 = getelementptr inbounds i8, i8* %250, i64 390
  %254 = add nuw nsw i64 %249, 1
  %255 = add i64 %251, -1
  %256 = icmp eq i64 %255, 0
  br i1 %256, label %270, label %248, !llvm.loop !51

257:                                              ; preds = %187, %181
  %258 = phi i8* [ %0, %181 ], [ %213, %187 ]
  %259 = phi i8* [ %20, %181 ], [ %214, %187 ]
  %260 = icmp eq i32 %183, 0
  br i1 %260, label %270, label %261

261:                                              ; preds = %257, %261
  %262 = phi i8* [ %266, %261 ], [ %258, %257 ]
  %263 = phi i8* [ %267, %261 ], [ %259, %257 ]
  %264 = phi i32 [ %268, %261 ], [ %183, %257 ]
  %265 = load i8, i8* %263, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %262, i8 %265, i64 3, i1 false)
  %266 = getelementptr inbounds i8, i8* %262, i64 390
  %267 = getelementptr inbounds i8, i8* %263, i64 390
  %268 = add i32 %264, -1
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %270, label %261, !llvm.loop !52

270:                                              ; preds = %257, %261, %244, %248, %178, %217
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @selfguided_filter(i16* nocapture, i8* nocapture readonly, i32, i32, i32, i32) unnamed_addr #4 {
  %7 = alloca [26520 x i32], align 16
  %8 = alloca [26520 x i16], align 16
  %9 = icmp eq i32 %4, 25
  %10 = select i1 %9, i32 164, i32 455
  %11 = bitcast [26520 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 106080, i8* nonnull %11) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 106080, i1 false)
  %12 = getelementptr inbounds [26520 x i32], [26520 x i32]* %7, i64 0, i64 0
  %13 = getelementptr inbounds [26520 x i32], [26520 x i32]* %7, i64 0, i64 783
  %14 = bitcast [26520 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 53040, i8* nonnull %14) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 53040, i1 false)
  %15 = getelementptr inbounds [26520 x i16], [26520 x i16]* %8, i64 0, i64 0
  %16 = getelementptr inbounds [26520 x i16], [26520 x i16]* %8, i64 0, i64 783
  %17 = select i1 %9, i32 2, i32 1
  %18 = add nsw i32 %2, 6
  br i1 %9, label %19, label %191

19:                                               ; preds = %6
  %20 = icmp sgt i32 %18, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %19
  %22 = add i32 %3, 4
  br label %33

23:                                               ; preds = %19
  %24 = getelementptr inbounds i8, i8* %1, i64 1170
  %25 = add i32 %3, 4
  %26 = icmp sgt i32 %25, 2
  %27 = zext i32 %18 to i64
  %28 = add i32 %3, 2
  %29 = and i32 %28, 1
  %30 = icmp eq i32 %3, -1
  %31 = sub i32 %28, %29
  %32 = icmp eq i32 %29, 0
  br label %40

33:                                               ; preds = %92, %21
  %34 = phi i32 [ %22, %21 ], [ %25, %92 ]
  %35 = icmp sgt i32 %34, 2
  br i1 %35, label %36, label %355

36:                                               ; preds = %33
  %37 = add i32 %2, 4
  %38 = icmp sgt i32 %37, 2
  %39 = zext i32 %37 to i64
  br label %140

40:                                               ; preds = %92, %23
  %41 = phi i64 [ 0, %23 ], [ %93, %92 ]
  %42 = getelementptr inbounds i8, i8* %24, i64 %41
  %43 = getelementptr inbounds i8, i8* %42, i64 -1170
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = getelementptr inbounds i8, i8* %42, i64 -780
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = getelementptr inbounds i8, i8* %42, i64 -390
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = load i8, i8* %42, align 1
  %53 = zext i8 %52 to i32
  br i1 %26, label %54, label %92

54:                                               ; preds = %40
  %55 = mul nuw nsw i32 %53, %53
  %56 = mul nuw nsw i32 %51, %51
  %57 = mul nuw nsw i32 %48, %48
  %58 = mul nuw nsw i32 %45, %45
  %59 = getelementptr inbounds [26520 x i32], [26520 x i32]* %7, i64 0, i64 %41
  %60 = getelementptr inbounds [26520 x i16], [26520 x i16]* %8, i64 0, i64 %41
  br i1 %30, label %64, label %95

61:                                               ; preds = %95
  %62 = zext i8 %109 to i32
  %63 = zext i8 %124 to i32
  br label %64

64:                                               ; preds = %61, %54
  %65 = phi i32 [ %55, %54 ], [ %126, %61 ]
  %66 = phi i32 [ %53, %54 ], [ %63, %61 ]
  %67 = phi i32 [ %56, %54 ], [ %111, %61 ]
  %68 = phi i32 [ %51, %54 ], [ %62, %61 ]
  %69 = phi i32 [ %57, %54 ], [ %96, %61 ]
  %70 = phi i32 [ %48, %54 ], [ %97, %61 ]
  %71 = phi i32 [ %58, %54 ], [ %98, %61 ]
  %72 = phi i32 [ %45, %54 ], [ %99, %61 ]
  %73 = phi i8* [ %42, %54 ], [ %123, %61 ]
  %74 = phi i32* [ %59, %54 ], [ %128, %61 ]
  %75 = phi i16* [ %60, %54 ], [ %127, %61 ]
  br i1 %32, label %92, label %76

76:                                               ; preds = %64
  %77 = getelementptr inbounds i8, i8* %73, i64 390
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = mul nuw nsw i32 %79, %79
  %81 = getelementptr inbounds i16, i16* %75, i64 390
  %82 = getelementptr inbounds i32, i32* %74, i64 390
  %83 = add nuw nsw i32 %68, %66
  %84 = add nuw nsw i32 %83, %70
  %85 = add nuw nsw i32 %84, %72
  %86 = add nuw nsw i32 %85, %79
  %87 = trunc i32 %86 to i16
  store i16 %87, i16* %81, align 2
  %88 = add nuw nsw i32 %67, %65
  %89 = add nuw nsw i32 %88, %69
  %90 = add nuw nsw i32 %89, %71
  %91 = add nuw nsw i32 %90, %80
  store i32 %91, i32* %82, align 4
  br label %92

92:                                               ; preds = %76, %64, %40
  %93 = add nuw nsw i64 %41, 1
  %94 = icmp eq i64 %93, %27
  br i1 %94, label %33, label %40

95:                                               ; preds = %54, %95
  %96 = phi i32 [ %126, %95 ], [ %55, %54 ]
  %97 = phi i32 [ %125, %95 ], [ %53, %54 ]
  %98 = phi i32 [ %111, %95 ], [ %56, %54 ]
  %99 = phi i32 [ %110, %95 ], [ %51, %54 ]
  %100 = phi i32 [ %96, %95 ], [ %57, %54 ]
  %101 = phi i32 [ %97, %95 ], [ %48, %54 ]
  %102 = phi i32 [ %98, %95 ], [ %58, %54 ]
  %103 = phi i32 [ %99, %95 ], [ %45, %54 ]
  %104 = phi i8* [ %123, %95 ], [ %42, %54 ]
  %105 = phi i32* [ %128, %95 ], [ %59, %54 ]
  %106 = phi i16* [ %127, %95 ], [ %60, %54 ]
  %107 = phi i32 [ %138, %95 ], [ %31, %54 ]
  %108 = getelementptr inbounds i8, i8* %104, i64 390
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = mul nuw nsw i32 %110, %110
  %112 = getelementptr inbounds i16, i16* %106, i64 390
  %113 = getelementptr inbounds i32, i32* %105, i64 390
  %114 = add nuw nsw i32 %99, %97
  %115 = add nuw nsw i32 %114, %101
  %116 = add nuw nsw i32 %115, %103
  %117 = add nuw nsw i32 %116, %110
  %118 = trunc i32 %117 to i16
  store i16 %118, i16* %112, align 2
  %119 = add nuw nsw i32 %98, %96
  %120 = add nuw nsw i32 %119, %100
  %121 = add nuw nsw i32 %120, %102
  %122 = add nuw nsw i32 %121, %111
  store i32 %122, i32* %113, align 4
  %123 = getelementptr inbounds i8, i8* %104, i64 780
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = mul nuw nsw i32 %125, %125
  %127 = getelementptr inbounds i16, i16* %106, i64 780
  %128 = getelementptr inbounds i32, i32* %105, i64 780
  %129 = add nuw nsw i32 %97, %110
  %130 = add nuw nsw i32 %129, %99
  %131 = add nuw nsw i32 %130, %101
  %132 = add nuw nsw i32 %131, %125
  %133 = trunc i32 %132 to i16
  store i16 %133, i16* %127, align 2
  %134 = add nuw nsw i32 %96, %111
  %135 = add nuw nsw i32 %134, %98
  %136 = add nuw nsw i32 %135, %100
  %137 = add nuw nsw i32 %136, %126
  store i32 %137, i32* %128, align 4
  %138 = add i32 %107, -2
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %61, label %95

140:                                              ; preds = %161, %36
  %141 = phi i16* [ %15, %36 ], [ %145, %161 ]
  %142 = phi i32* [ %12, %36 ], [ %144, %161 ]
  %143 = phi i32 [ 2, %36 ], [ %162, %161 ]
  %144 = getelementptr inbounds i32, i32* %142, i64 390
  %145 = getelementptr inbounds i16, i16* %141, i64 390
  br i1 %38, label %146, label %161

146:                                              ; preds = %140
  %147 = getelementptr inbounds i32, i32* %142, i64 393
  %148 = load i32, i32* %147, align 4
  %149 = getelementptr inbounds i16, i16* %141, i64 393
  %150 = load i16, i16* %149, align 2
  %151 = getelementptr inbounds i32, i32* %142, i64 392
  %152 = load i32, i32* %151, align 4
  %153 = getelementptr inbounds i16, i16* %141, i64 392
  %154 = load i16, i16* %153, align 2
  %155 = getelementptr inbounds i32, i32* %142, i64 391
  %156 = load i32, i32* %155, align 4
  %157 = getelementptr inbounds i16, i16* %141, i64 391
  %158 = load i16, i16* %157, align 2
  %159 = load i32, i32* %144, align 4
  %160 = load i16, i16* %145, align 2
  br label %164

161:                                              ; preds = %164, %140
  %162 = add nuw nsw i32 %143, 1
  %163 = icmp eq i32 %162, %34
  br i1 %163, label %355, label %140

164:                                              ; preds = %164, %146
  %165 = phi i64 [ 2, %146 ], [ %189, %164 ]
  %166 = phi i32 [ %148, %146 ], [ %178, %164 ]
  %167 = phi i16 [ %150, %146 ], [ %176, %164 ]
  %168 = phi i32 [ %152, %146 ], [ %166, %164 ]
  %169 = phi i16 [ %154, %146 ], [ %167, %164 ]
  %170 = phi i32 [ %156, %146 ], [ %168, %164 ]
  %171 = phi i16 [ %158, %146 ], [ %169, %164 ]
  %172 = phi i32 [ %159, %146 ], [ %170, %164 ]
  %173 = phi i16 [ %160, %146 ], [ %171, %164 ]
  %174 = add nuw nsw i64 %165, 2
  %175 = getelementptr inbounds i16, i16* %145, i64 %174
  %176 = load i16, i16* %175, align 2
  %177 = getelementptr inbounds i32, i32* %144, i64 %174
  %178 = load i32, i32* %177, align 4
  %179 = add i16 %169, %167
  %180 = add i16 %179, %171
  %181 = add i16 %180, %173
  %182 = add i16 %181, %176
  %183 = getelementptr inbounds i16, i16* %145, i64 %165
  store i16 %182, i16* %183, align 2
  %184 = add i32 %168, %166
  %185 = add i32 %184, %170
  %186 = add i32 %185, %172
  %187 = add i32 %186, %178
  %188 = getelementptr inbounds i32, i32* %144, i64 %165
  store i32 %187, i32* %188, align 4
  %189 = add nuw nsw i64 %165, 1
  %190 = icmp eq i64 %189, %39
  br i1 %190, label %161, label %164

191:                                              ; preds = %6
  %192 = getelementptr inbounds i8, i8* %1, i64 390
  %193 = add i32 %2, 5
  %194 = icmp sgt i32 %193, 1
  %195 = add i32 %3, 4
  br i1 %194, label %196, label %204

196:                                              ; preds = %191
  %197 = icmp sgt i32 %195, 2
  %198 = zext i32 %193 to i64
  %199 = add i32 %3, 2
  %200 = and i32 %199, 1
  %201 = icmp eq i32 %3, -1
  %202 = sub i32 %199, %200
  %203 = icmp eq i32 %200, 0
  br label %215

204:                                              ; preds = %251, %191
  %205 = icmp sgt i32 %195, 2
  br i1 %205, label %206, label %355

206:                                              ; preds = %204
  %207 = add i32 %2, 4
  %208 = icmp sgt i32 %207, 2
  %209 = zext i32 %207 to i64
  %210 = add nsw i64 %209, -2
  %211 = and i64 %210, 1
  %212 = icmp eq i32 %207, 3
  %213 = sub nsw i64 %210, %211
  %214 = icmp eq i64 %211, 0
  br label %288

215:                                              ; preds = %251, %196
  %216 = phi i64 [ 1, %196 ], [ %252, %251 ]
  %217 = getelementptr inbounds i8, i8* %192, i64 %216
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i32
  %220 = getelementptr inbounds i8, i8* %217, i64 390
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i32
  br i1 %197, label %223, label %251

223:                                              ; preds = %215
  %224 = mul nuw nsw i32 %222, %222
  %225 = mul nuw nsw i32 %219, %219
  %226 = getelementptr inbounds [26520 x i32], [26520 x i32]* %7, i64 0, i64 %216
  %227 = getelementptr inbounds [26520 x i16], [26520 x i16]* %8, i64 0, i64 %216
  br i1 %201, label %231, label %254

228:                                              ; preds = %254
  %229 = zext i8 %264 to i32
  %230 = zext i8 %276 to i32
  br label %231

231:                                              ; preds = %228, %223
  %232 = phi i32 [ %224, %223 ], [ %278, %228 ]
  %233 = phi i32 [ %222, %223 ], [ %230, %228 ]
  %234 = phi i32 [ %225, %223 ], [ %266, %228 ]
  %235 = phi i32 [ %219, %223 ], [ %229, %228 ]
  %236 = phi i8* [ %217, %223 ], [ %274, %228 ]
  %237 = phi i32* [ %226, %223 ], [ %280, %228 ]
  %238 = phi i16* [ %227, %223 ], [ %279, %228 ]
  br i1 %203, label %251, label %239

239:                                              ; preds = %231
  %240 = getelementptr inbounds i8, i8* %236, i64 780
  %241 = load i8, i8* %240, align 1
  %242 = zext i8 %241 to i32
  %243 = mul nuw nsw i32 %242, %242
  %244 = getelementptr inbounds i16, i16* %238, i64 390
  %245 = getelementptr inbounds i32, i32* %237, i64 390
  %246 = add nuw nsw i32 %235, %233
  %247 = add nuw nsw i32 %246, %242
  %248 = trunc i32 %247 to i16
  store i16 %248, i16* %244, align 2
  %249 = add nuw nsw i32 %234, %232
  %250 = add nuw nsw i32 %249, %243
  store i32 %250, i32* %245, align 4
  br label %251

251:                                              ; preds = %239, %231, %215
  %252 = add nuw nsw i64 %216, 1
  %253 = icmp eq i64 %252, %198
  br i1 %253, label %204, label %215

254:                                              ; preds = %223, %254
  %255 = phi i32 [ %278, %254 ], [ %224, %223 ]
  %256 = phi i32 [ %277, %254 ], [ %222, %223 ]
  %257 = phi i32 [ %266, %254 ], [ %225, %223 ]
  %258 = phi i32 [ %265, %254 ], [ %219, %223 ]
  %259 = phi i8* [ %274, %254 ], [ %217, %223 ]
  %260 = phi i32* [ %280, %254 ], [ %226, %223 ]
  %261 = phi i16* [ %279, %254 ], [ %227, %223 ]
  %262 = phi i32 [ %286, %254 ], [ %202, %223 ]
  %263 = getelementptr inbounds i8, i8* %259, i64 780
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %264 to i32
  %266 = mul nuw nsw i32 %265, %265
  %267 = getelementptr inbounds i16, i16* %261, i64 390
  %268 = getelementptr inbounds i32, i32* %260, i64 390
  %269 = add nuw nsw i32 %258, %256
  %270 = add nuw nsw i32 %269, %265
  %271 = trunc i32 %270 to i16
  store i16 %271, i16* %267, align 2
  %272 = add nuw nsw i32 %257, %255
  %273 = add nuw nsw i32 %272, %266
  store i32 %273, i32* %268, align 4
  %274 = getelementptr inbounds i8, i8* %259, i64 780
  %275 = getelementptr inbounds i8, i8* %259, i64 1170
  %276 = load i8, i8* %275, align 1
  %277 = zext i8 %276 to i32
  %278 = mul nuw nsw i32 %277, %277
  %279 = getelementptr inbounds i16, i16* %261, i64 780
  %280 = getelementptr inbounds i32, i32* %260, i64 780
  %281 = add nuw nsw i32 %256, %265
  %282 = add nuw nsw i32 %281, %277
  %283 = trunc i32 %282 to i16
  store i16 %283, i16* %279, align 2
  %284 = add nuw nsw i32 %255, %266
  %285 = add nuw nsw i32 %284, %278
  store i32 %285, i32* %280, align 4
  %286 = add i32 %262, -2
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %228, label %254

288:                                              ; preds = %321, %206
  %289 = phi i16* [ %15, %206 ], [ %293, %321 ]
  %290 = phi i32* [ %12, %206 ], [ %292, %321 ]
  %291 = phi i32 [ 2, %206 ], [ %322, %321 ]
  %292 = getelementptr inbounds i32, i32* %290, i64 390
  %293 = getelementptr inbounds i16, i16* %289, i64 390
  br i1 %208, label %294, label %321

294:                                              ; preds = %288
  %295 = getelementptr inbounds i32, i32* %290, i64 392
  %296 = load i32, i32* %295, align 4
  %297 = getelementptr inbounds i16, i16* %289, i64 392
  %298 = load i16, i16* %297, align 2
  %299 = getelementptr inbounds i32, i32* %290, i64 391
  %300 = load i32, i32* %299, align 4
  %301 = getelementptr inbounds i16, i16* %289, i64 391
  %302 = load i16, i16* %301, align 2
  br i1 %212, label %303, label %324

303:                                              ; preds = %324, %294
  %304 = phi i64 [ 2, %294 ], [ %342, %324 ]
  %305 = phi i32 [ %296, %294 ], [ %346, %324 ]
  %306 = phi i16 [ %298, %294 ], [ %344, %324 ]
  %307 = phi i32 [ %300, %294 ], [ %335, %324 ]
  %308 = phi i16 [ %302, %294 ], [ %333, %324 ]
  br i1 %214, label %321, label %309

309:                                              ; preds = %303
  %310 = add nuw nsw i64 %304, 1
  %311 = getelementptr inbounds i16, i16* %293, i64 %310
  %312 = load i16, i16* %311, align 2
  %313 = getelementptr inbounds i32, i32* %292, i64 %310
  %314 = load i32, i32* %313, align 4
  %315 = add i16 %308, %306
  %316 = add i16 %315, %312
  %317 = getelementptr inbounds i16, i16* %293, i64 %304
  store i16 %316, i16* %317, align 2
  %318 = add nsw i32 %307, %305
  %319 = add nsw i32 %318, %314
  %320 = getelementptr inbounds i32, i32* %292, i64 %304
  store i32 %319, i32* %320, align 4
  br label %321

321:                                              ; preds = %309, %303, %288
  %322 = add nuw nsw i32 %291, 1
  %323 = icmp eq i32 %322, %195
  br i1 %323, label %355, label %288

324:                                              ; preds = %294, %324
  %325 = phi i64 [ %342, %324 ], [ 2, %294 ]
  %326 = phi i32 [ %346, %324 ], [ %296, %294 ]
  %327 = phi i16 [ %344, %324 ], [ %298, %294 ]
  %328 = phi i32 [ %335, %324 ], [ %300, %294 ]
  %329 = phi i16 [ %333, %324 ], [ %302, %294 ]
  %330 = phi i64 [ %353, %324 ], [ %213, %294 ]
  %331 = or i64 %325, 1
  %332 = getelementptr inbounds i16, i16* %293, i64 %331
  %333 = load i16, i16* %332, align 2
  %334 = getelementptr inbounds i32, i32* %292, i64 %331
  %335 = load i32, i32* %334, align 4
  %336 = add i16 %329, %327
  %337 = add i16 %336, %333
  %338 = getelementptr inbounds i16, i16* %293, i64 %325
  store i16 %337, i16* %338, align 2
  %339 = add nsw i32 %328, %326
  %340 = add nsw i32 %339, %335
  %341 = getelementptr inbounds i32, i32* %292, i64 %325
  store i32 %340, i32* %341, align 4
  %342 = add nuw nsw i64 %325, 2
  %343 = getelementptr inbounds i16, i16* %293, i64 %342
  %344 = load i16, i16* %343, align 2
  %345 = getelementptr inbounds i32, i32* %292, i64 %342
  %346 = load i32, i32* %345, align 4
  %347 = add i16 %327, %333
  %348 = add i16 %347, %344
  %349 = getelementptr inbounds i16, i16* %293, i64 %331
  store i16 %348, i16* %349, align 2
  %350 = add nsw i32 %326, %335
  %351 = add nsw i32 %350, %346
  %352 = getelementptr inbounds i32, i32* %292, i64 %331
  store i32 %351, i32* %352, align 4
  %353 = add i64 %330, -2
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %303, label %324

355:                                              ; preds = %321, %161, %204, %33
  %356 = icmp slt i32 %3, -1
  br i1 %356, label %369, label %357

357:                                              ; preds = %355
  %358 = getelementptr inbounds [26520 x i16], [26520 x i16]* %8, i64 0, i64 393
  %359 = getelementptr inbounds [26520 x i32], [26520 x i32]* %7, i64 0, i64 393
  %360 = icmp slt i32 %2, -1
  %361 = mul nuw nsw i32 %17, 390
  %362 = zext i32 %361 to i64
  %363 = add i32 %2, 1
  %364 = zext i32 %363 to i64
  br label %365

365:                                              ; preds = %357, %383
  %366 = phi i32* [ %359, %357 ], [ %384, %383 ]
  %367 = phi i16* [ %358, %357 ], [ %385, %383 ]
  %368 = phi i32 [ -1, %357 ], [ %386, %383 ]
  br i1 %360, label %383, label %388

369:                                              ; preds = %383, %355
  %370 = getelementptr inbounds i8, i8* %1, i64 1173
  br i1 %9, label %376, label %371

371:                                              ; preds = %369
  %372 = icmp sgt i32 %3, 0
  br i1 %372, label %373, label %823

373:                                              ; preds = %371
  %374 = icmp sgt i32 %2, 0
  %375 = zext i32 %2 to i64
  br label %722

376:                                              ; preds = %369
  %377 = add nsw i32 %3, -1
  %378 = icmp sgt i32 %377, 0
  br i1 %378, label %379, label %541

379:                                              ; preds = %376
  %380 = icmp sgt i32 %2, 0
  %381 = zext i32 %2 to i64
  %382 = zext i32 %2 to i64
  br label %417

383:                                              ; preds = %388, %365
  %384 = getelementptr inbounds i32, i32* %366, i64 %362
  %385 = getelementptr inbounds i16, i16* %367, i64 %362
  %386 = add nsw i32 %368, %17
  %387 = icmp sgt i32 %386, %3
  br i1 %387, label %369, label %365

388:                                              ; preds = %365, %388
  %389 = phi i64 [ %415, %388 ], [ -1, %365 ]
  %390 = getelementptr inbounds i32, i32* %366, i64 %389
  %391 = load i32, i32* %390, align 4
  %392 = getelementptr inbounds i16, i16* %367, i64 %389
  %393 = load i16, i16* %392, align 2
  %394 = sext i16 %393 to i32
  %395 = mul nsw i32 %391, %4
  %396 = mul nsw i32 %394, %394
  %397 = sub nsw i32 %395, %396
  %398 = icmp sgt i32 %397, 0
  %399 = select i1 %398, i32 %397, i32 0
  %400 = mul i32 %399, %5
  %401 = add i32 %400, 524288
  %402 = lshr i32 %401, 20
  %403 = icmp ult i32 %402, 255
  %404 = select i1 %403, i32 %402, i32 255
  %405 = zext i32 %404 to i64
  %406 = getelementptr inbounds [256 x i8], [256 x i8]* @dav1d_sgr_x_by_x, i64 0, i64 %405
  %407 = load i8, i8* %406, align 1
  %408 = zext i8 %407 to i32
  %409 = mul nsw i32 %10, %394
  %410 = mul i32 %409, %408
  %411 = add i32 %410, 2048
  %412 = lshr i32 %411, 12
  store i32 %412, i32* %390, align 4
  %413 = zext i8 %407 to i16
  %414 = sub nuw nsw i16 256, %413
  store i16 %414, i16* %392, align 2
  %415 = add nsw i64 %389, 1
  %416 = icmp eq i64 %415, %364
  br i1 %416, label %383, label %388

417:                                              ; preds = %379, %497
  %418 = phi i16* [ %0, %379 ], [ %498, %497 ]
  %419 = phi i8* [ %370, %379 ], [ %499, %497 ]
  %420 = phi i32* [ %13, %379 ], [ %501, %497 ]
  %421 = phi i16* [ %16, %379 ], [ %500, %497 ]
  %422 = phi i32 [ 0, %379 ], [ %502, %497 ]
  br i1 %380, label %423, label %497

423:                                              ; preds = %417
  %424 = getelementptr inbounds i16, i16* %421, i64 -390
  %425 = load i16, i16* %424, align 2
  %426 = getelementptr inbounds i16, i16* %421, i64 390
  %427 = load i16, i16* %426, align 2
  %428 = getelementptr inbounds i32, i32* %420, i64 -390
  %429 = load i32, i32* %428, align 4
  %430 = getelementptr inbounds i32, i32* %420, i64 390
  %431 = load i32, i32* %430, align 4
  br label %440

432:                                              ; preds = %440
  %433 = getelementptr inbounds i16, i16* %418, i64 384
  %434 = getelementptr inbounds i8, i8* %419, i64 390
  %435 = getelementptr inbounds i16, i16* %421, i64 390
  %436 = getelementptr inbounds i32, i32* %420, i64 390
  br i1 %380, label %437, label %497

437:                                              ; preds = %432
  %438 = load i16, i16* %435, align 2
  %439 = load i32, i32* %436, align 4
  br label %504

440:                                              ; preds = %440, %423
  %441 = phi i32 [ %431, %423 ], [ %483, %440 ]
  %442 = phi i32 [ %429, %423 ], [ %480, %440 ]
  %443 = phi i16 [ %427, %423 ], [ %467, %440 ]
  %444 = phi i16 [ %425, %423 ], [ %462, %440 ]
  %445 = phi i64 [ 0, %423 ], [ %459, %440 ]
  %446 = sext i16 %444 to i32
  %447 = sext i16 %443 to i32
  %448 = add nsw i32 %447, %446
  %449 = mul nsw i32 %448, 6
  %450 = add nsw i64 %445, -391
  %451 = getelementptr inbounds i16, i16* %421, i64 %450
  %452 = load i16, i16* %451, align 2
  %453 = sext i16 %452 to i32
  %454 = add nuw nsw i64 %445, 389
  %455 = getelementptr inbounds i16, i16* %421, i64 %454
  %456 = load i16, i16* %455, align 2
  %457 = sext i16 %456 to i32
  %458 = add nsw i32 %457, %453
  %459 = add nuw nsw i64 %445, 1
  %460 = add nsw i64 %445, -389
  %461 = getelementptr inbounds i16, i16* %421, i64 %460
  %462 = load i16, i16* %461, align 2
  %463 = sext i16 %462 to i32
  %464 = add nsw i32 %458, %463
  %465 = add nuw nsw i64 %445, 391
  %466 = getelementptr inbounds i16, i16* %421, i64 %465
  %467 = load i16, i16* %466, align 2
  %468 = sext i16 %467 to i32
  %469 = add nsw i32 %464, %468
  %470 = mul nsw i32 %469, 5
  %471 = add nsw i32 %470, %449
  %472 = add nsw i32 %441, %442
  %473 = mul nsw i32 %472, 6
  %474 = getelementptr inbounds i32, i32* %420, i64 %450
  %475 = load i32, i32* %474, align 4
  %476 = getelementptr inbounds i32, i32* %420, i64 %454
  %477 = load i32, i32* %476, align 4
  %478 = add nsw i32 %477, %475
  %479 = getelementptr inbounds i32, i32* %420, i64 %460
  %480 = load i32, i32* %479, align 4
  %481 = add nsw i32 %478, %480
  %482 = getelementptr inbounds i32, i32* %420, i64 %465
  %483 = load i32, i32* %482, align 4
  %484 = add nsw i32 %481, %483
  %485 = mul nsw i32 %484, 5
  %486 = getelementptr inbounds i8, i8* %419, i64 %445
  %487 = load i8, i8* %486, align 1
  %488 = zext i8 %487 to i32
  %489 = mul nsw i32 %471, %488
  %490 = add i32 %473, 256
  %491 = add i32 %490, %485
  %492 = add i32 %491, %489
  %493 = lshr i32 %492, 9
  %494 = trunc i32 %493 to i16
  %495 = getelementptr inbounds i16, i16* %418, i64 %445
  store i16 %494, i16* %495, align 2
  %496 = icmp eq i64 %459, %381
  br i1 %496, label %432, label %440

497:                                              ; preds = %504, %417, %432
  %498 = getelementptr inbounds i16, i16* %418, i64 768
  %499 = getelementptr inbounds i8, i8* %419, i64 780
  %500 = getelementptr inbounds i16, i16* %421, i64 780
  %501 = getelementptr inbounds i32, i32* %420, i64 780
  %502 = add nuw nsw i32 %422, 2
  %503 = icmp slt i32 %502, %377
  br i1 %503, label %417, label %539

504:                                              ; preds = %504, %437
  %505 = phi i32 [ %439, %437 ], [ %525, %504 ]
  %506 = phi i16 [ %438, %437 ], [ %516, %504 ]
  %507 = phi i64 [ 0, %437 ], [ %514, %504 ]
  %508 = sext i16 %506 to i32
  %509 = mul nsw i32 %508, 6
  %510 = add nsw i64 %507, -1
  %511 = getelementptr inbounds i16, i16* %435, i64 %510
  %512 = load i16, i16* %511, align 2
  %513 = sext i16 %512 to i32
  %514 = add nuw nsw i64 %507, 1
  %515 = getelementptr inbounds i16, i16* %435, i64 %514
  %516 = load i16, i16* %515, align 2
  %517 = sext i16 %516 to i32
  %518 = add nsw i32 %517, %513
  %519 = mul nsw i32 %518, 5
  %520 = add nsw i32 %519, %509
  %521 = mul nsw i32 %505, 6
  %522 = getelementptr inbounds i32, i32* %436, i64 %510
  %523 = load i32, i32* %522, align 4
  %524 = getelementptr inbounds i32, i32* %436, i64 %514
  %525 = load i32, i32* %524, align 4
  %526 = add nsw i32 %525, %523
  %527 = mul nsw i32 %526, 5
  %528 = getelementptr inbounds i8, i8* %434, i64 %507
  %529 = load i8, i8* %528, align 1
  %530 = zext i8 %529 to i32
  %531 = mul nsw i32 %520, %530
  %532 = add i32 %521, 128
  %533 = add i32 %532, %527
  %534 = add i32 %533, %531
  %535 = lshr i32 %534, 8
  %536 = trunc i32 %535 to i16
  %537 = getelementptr inbounds i16, i16* %433, i64 %507
  store i16 %536, i16* %537, align 2
  %538 = icmp eq i64 %514, %382
  br i1 %538, label %497, label %504

539:                                              ; preds = %497
  %540 = or i32 %3, 1
  br label %541

541:                                              ; preds = %539, %376
  %542 = phi i32 [ 1, %376 ], [ %540, %539 ]
  %543 = phi i16* [ %16, %376 ], [ %500, %539 ]
  %544 = phi i32* [ %13, %376 ], [ %501, %539 ]
  %545 = phi i8* [ %370, %376 ], [ %499, %539 ]
  %546 = phi i16* [ %0, %376 ], [ %498, %539 ]
  %547 = bitcast i16* %546 to i8*
  %548 = icmp eq i32 %542, %3
  %549 = icmp sgt i32 %2, 0
  %550 = and i1 %548, %549
  br i1 %550, label %551, label %823

551:                                              ; preds = %541
  %552 = zext i32 %2 to i64
  %553 = icmp ult i32 %2, 4
  br i1 %553, label %657, label %554

554:                                              ; preds = %551
  %555 = getelementptr i16, i16* %546, i64 %552
  %556 = bitcast i16* %555 to i8*
  %557 = getelementptr i16, i16* %543, i64 -391
  %558 = add nuw nsw i64 %552, 391
  %559 = getelementptr i16, i16* %543, i64 %558
  %560 = getelementptr i32, i32* %544, i64 -391
  %561 = getelementptr i32, i32* %544, i64 %558
  %562 = getelementptr i8, i8* %545, i64 %552
  %563 = icmp ult i16* %546, %559
  %564 = icmp ult i16* %557, %555
  %565 = and i1 %563, %564
  %566 = bitcast i32* %561 to i16*
  %567 = icmp ult i16* %546, %566
  %568 = bitcast i16* %555 to i32*
  %569 = icmp ult i32* %560, %568
  %570 = and i1 %567, %569
  %571 = or i1 %565, %570
  %572 = icmp ugt i8* %562, %547
  %573 = icmp ult i8* %545, %556
  %574 = and i1 %572, %573
  %575 = or i1 %571, %574
  br i1 %575, label %657, label %576

576:                                              ; preds = %554
  %577 = and i64 %552, 4294967292
  br label %578

578:                                              ; preds = %578, %576
  %579 = phi i64 [ 0, %576 ], [ %653, %578 ]
  %580 = add nsw i64 %579, -390
  %581 = getelementptr inbounds i16, i16* %543, i64 %580
  %582 = bitcast i16* %581 to <4 x i16>*
  %583 = load <4 x i16>, <4 x i16>* %582, align 2, !alias.scope !53
  %584 = sext <4 x i16> %583 to <4 x i32>
  %585 = add nuw nsw i64 %579, 390
  %586 = getelementptr inbounds i16, i16* %543, i64 %585
  %587 = bitcast i16* %586 to <4 x i16>*
  %588 = load <4 x i16>, <4 x i16>* %587, align 2, !alias.scope !53
  %589 = sext <4 x i16> %588 to <4 x i32>
  %590 = add nsw <4 x i32> %589, %584
  %591 = mul nsw <4 x i32> %590, <i32 6, i32 6, i32 6, i32 6>
  %592 = add nsw i64 %579, -391
  %593 = getelementptr inbounds i16, i16* %543, i64 %592
  %594 = bitcast i16* %593 to <4 x i16>*
  %595 = load <4 x i16>, <4 x i16>* %594, align 2, !alias.scope !53
  %596 = sext <4 x i16> %595 to <4 x i32>
  %597 = add nuw nsw i64 %579, 389
  %598 = getelementptr inbounds i16, i16* %543, i64 %597
  %599 = bitcast i16* %598 to <4 x i16>*
  %600 = load <4 x i16>, <4 x i16>* %599, align 2, !alias.scope !53
  %601 = sext <4 x i16> %600 to <4 x i32>
  %602 = add nsw <4 x i32> %601, %596
  %603 = add nsw i64 %579, -389
  %604 = getelementptr inbounds i16, i16* %543, i64 %603
  %605 = bitcast i16* %604 to <4 x i16>*
  %606 = load <4 x i16>, <4 x i16>* %605, align 2, !alias.scope !53
  %607 = sext <4 x i16> %606 to <4 x i32>
  %608 = add nsw <4 x i32> %602, %607
  %609 = add nuw nsw i64 %579, 391
  %610 = getelementptr inbounds i16, i16* %543, i64 %609
  %611 = bitcast i16* %610 to <4 x i16>*
  %612 = load <4 x i16>, <4 x i16>* %611, align 2, !alias.scope !53
  %613 = sext <4 x i16> %612 to <4 x i32>
  %614 = add nsw <4 x i32> %608, %613
  %615 = mul nsw <4 x i32> %614, <i32 5, i32 5, i32 5, i32 5>
  %616 = add nsw <4 x i32> %615, %591
  %617 = getelementptr inbounds i32, i32* %544, i64 %580
  %618 = bitcast i32* %617 to <4 x i32>*
  %619 = load <4 x i32>, <4 x i32>* %618, align 4, !alias.scope !56
  %620 = getelementptr inbounds i32, i32* %544, i64 %585
  %621 = bitcast i32* %620 to <4 x i32>*
  %622 = load <4 x i32>, <4 x i32>* %621, align 4, !alias.scope !56
  %623 = add nsw <4 x i32> %622, %619
  %624 = mul nsw <4 x i32> %623, <i32 6, i32 6, i32 6, i32 6>
  %625 = getelementptr inbounds i32, i32* %544, i64 %592
  %626 = bitcast i32* %625 to <4 x i32>*
  %627 = load <4 x i32>, <4 x i32>* %626, align 4, !alias.scope !56
  %628 = getelementptr inbounds i32, i32* %544, i64 %597
  %629 = bitcast i32* %628 to <4 x i32>*
  %630 = load <4 x i32>, <4 x i32>* %629, align 4, !alias.scope !56
  %631 = add nsw <4 x i32> %630, %627
  %632 = getelementptr inbounds i32, i32* %544, i64 %603
  %633 = bitcast i32* %632 to <4 x i32>*
  %634 = load <4 x i32>, <4 x i32>* %633, align 4, !alias.scope !56
  %635 = add nsw <4 x i32> %631, %634
  %636 = getelementptr inbounds i32, i32* %544, i64 %609
  %637 = bitcast i32* %636 to <4 x i32>*
  %638 = load <4 x i32>, <4 x i32>* %637, align 4, !alias.scope !56
  %639 = add nsw <4 x i32> %635, %638
  %640 = mul nsw <4 x i32> %639, <i32 5, i32 5, i32 5, i32 5>
  %641 = getelementptr inbounds i8, i8* %545, i64 %579
  %642 = bitcast i8* %641 to <4 x i8>*
  %643 = load <4 x i8>, <4 x i8>* %642, align 1, !alias.scope !58
  %644 = zext <4 x i8> %643 to <4 x i32>
  %645 = mul nsw <4 x i32> %616, %644
  %646 = add <4 x i32> %624, <i32 256, i32 256, i32 256, i32 256>
  %647 = add <4 x i32> %646, %640
  %648 = add <4 x i32> %647, %645
  %649 = lshr <4 x i32> %648, <i32 9, i32 9, i32 9, i32 9>
  %650 = trunc <4 x i32> %649 to <4 x i16>
  %651 = getelementptr inbounds i16, i16* %546, i64 %579
  %652 = bitcast i16* %651 to <4 x i16>*
  store <4 x i16> %650, <4 x i16>* %652, align 2, !alias.scope !60, !noalias !62
  %653 = add i64 %579, 4
  %654 = icmp eq i64 %653, %577
  br i1 %654, label %655, label %578, !llvm.loop !63

655:                                              ; preds = %578
  %656 = icmp eq i64 %577, %552
  br i1 %656, label %823, label %657

657:                                              ; preds = %655, %554, %551
  %658 = phi i64 [ 0, %554 ], [ 0, %551 ], [ %577, %655 ]
  br label %659

659:                                              ; preds = %657, %659
  %660 = phi i64 [ %680, %659 ], [ %658, %657 ]
  %661 = add nsw i64 %660, -390
  %662 = getelementptr inbounds i16, i16* %543, i64 %661
  %663 = load i16, i16* %662, align 2
  %664 = sext i16 %663 to i32
  %665 = add nuw nsw i64 %660, 390
  %666 = getelementptr inbounds i16, i16* %543, i64 %665
  %667 = load i16, i16* %666, align 2
  %668 = sext i16 %667 to i32
  %669 = add nsw i32 %668, %664
  %670 = mul nsw i32 %669, 6
  %671 = add nsw i64 %660, -391
  %672 = getelementptr inbounds i16, i16* %543, i64 %671
  %673 = load i16, i16* %672, align 2
  %674 = sext i16 %673 to i32
  %675 = add nuw nsw i64 %660, 389
  %676 = getelementptr inbounds i16, i16* %543, i64 %675
  %677 = load i16, i16* %676, align 2
  %678 = sext i16 %677 to i32
  %679 = add nsw i32 %678, %674
  %680 = add nuw nsw i64 %660, 1
  %681 = add nsw i64 %660, -389
  %682 = getelementptr inbounds i16, i16* %543, i64 %681
  %683 = load i16, i16* %682, align 2
  %684 = sext i16 %683 to i32
  %685 = add nsw i32 %679, %684
  %686 = add nuw nsw i64 %660, 391
  %687 = getelementptr inbounds i16, i16* %543, i64 %686
  %688 = load i16, i16* %687, align 2
  %689 = sext i16 %688 to i32
  %690 = add nsw i32 %685, %689
  %691 = mul nsw i32 %690, 5
  %692 = add nsw i32 %691, %670
  %693 = getelementptr inbounds i32, i32* %544, i64 %661
  %694 = load i32, i32* %693, align 4
  %695 = getelementptr inbounds i32, i32* %544, i64 %665
  %696 = load i32, i32* %695, align 4
  %697 = add nsw i32 %696, %694
  %698 = mul nsw i32 %697, 6
  %699 = getelementptr inbounds i32, i32* %544, i64 %671
  %700 = load i32, i32* %699, align 4
  %701 = getelementptr inbounds i32, i32* %544, i64 %675
  %702 = load i32, i32* %701, align 4
  %703 = add nsw i32 %702, %700
  %704 = getelementptr inbounds i32, i32* %544, i64 %681
  %705 = load i32, i32* %704, align 4
  %706 = add nsw i32 %703, %705
  %707 = getelementptr inbounds i32, i32* %544, i64 %686
  %708 = load i32, i32* %707, align 4
  %709 = add nsw i32 %706, %708
  %710 = mul nsw i32 %709, 5
  %711 = getelementptr inbounds i8, i8* %545, i64 %660
  %712 = load i8, i8* %711, align 1
  %713 = zext i8 %712 to i32
  %714 = mul nsw i32 %692, %713
  %715 = add i32 %698, 256
  %716 = add i32 %715, %710
  %717 = add i32 %716, %714
  %718 = lshr i32 %717, 9
  %719 = trunc i32 %718 to i16
  %720 = getelementptr inbounds i16, i16* %546, i64 %660
  store i16 %719, i16* %720, align 2
  %721 = icmp eq i64 %680, %552
  br i1 %721, label %823, label %659, !llvm.loop !64

722:                                              ; preds = %739, %373
  %723 = phi i16* [ %0, %373 ], [ %740, %739 ]
  %724 = phi i8* [ %370, %373 ], [ %741, %739 ]
  %725 = phi i32 [ 0, %373 ], [ %744, %739 ]
  %726 = phi i32* [ %13, %373 ], [ %743, %739 ]
  %727 = phi i16* [ %16, %373 ], [ %742, %739 ]
  br i1 %374, label %728, label %739

728:                                              ; preds = %722
  %729 = load i16, i16* %727, align 2
  %730 = getelementptr inbounds i16, i16* %727, i64 -390
  %731 = load i16, i16* %730, align 2
  %732 = getelementptr inbounds i16, i16* %727, i64 390
  %733 = load i16, i16* %732, align 2
  %734 = load i32, i32* %726, align 4
  %735 = getelementptr inbounds i32, i32* %726, i64 -390
  %736 = load i32, i32* %735, align 4
  %737 = getelementptr inbounds i32, i32* %726, i64 390
  %738 = load i32, i32* %737, align 4
  br label %746

739:                                              ; preds = %746, %722
  %740 = getelementptr inbounds i16, i16* %723, i64 384
  %741 = getelementptr inbounds i8, i8* %724, i64 390
  %742 = getelementptr inbounds i16, i16* %727, i64 390
  %743 = getelementptr inbounds i32, i32* %726, i64 390
  %744 = add nuw nsw i32 %725, 1
  %745 = icmp eq i32 %744, %3
  br i1 %745, label %823, label %722

746:                                              ; preds = %746, %728
  %747 = phi i32 [ %738, %728 ], [ %809, %746 ]
  %748 = phi i32 [ %736, %728 ], [ %806, %746 ]
  %749 = phi i32 [ %734, %728 ], [ %795, %746 ]
  %750 = phi i16 [ %733, %728 ], [ %786, %746 ]
  %751 = phi i16 [ %731, %728 ], [ %781, %746 ]
  %752 = phi i16 [ %729, %728 ], [ %762, %746 ]
  %753 = phi i64 [ 0, %728 ], [ %760, %746 ]
  %754 = sext i16 %752 to i32
  %755 = add nsw i64 %753, -1
  %756 = getelementptr inbounds i16, i16* %727, i64 %755
  %757 = load i16, i16* %756, align 2
  %758 = sext i16 %757 to i32
  %759 = add nsw i32 %758, %754
  %760 = add nuw nsw i64 %753, 1
  %761 = getelementptr inbounds i16, i16* %727, i64 %760
  %762 = load i16, i16* %761, align 2
  %763 = sext i16 %762 to i32
  %764 = add nsw i32 %759, %763
  %765 = sext i16 %751 to i32
  %766 = add nsw i32 %764, %765
  %767 = sext i16 %750 to i32
  %768 = add nsw i32 %766, %767
  %769 = shl nsw i32 %768, 2
  %770 = add nsw i64 %753, -391
  %771 = getelementptr inbounds i16, i16* %727, i64 %770
  %772 = load i16, i16* %771, align 2
  %773 = sext i16 %772 to i32
  %774 = add nuw nsw i64 %753, 389
  %775 = getelementptr inbounds i16, i16* %727, i64 %774
  %776 = load i16, i16* %775, align 2
  %777 = sext i16 %776 to i32
  %778 = add nsw i32 %777, %773
  %779 = add nsw i64 %753, -389
  %780 = getelementptr inbounds i16, i16* %727, i64 %779
  %781 = load i16, i16* %780, align 2
  %782 = sext i16 %781 to i32
  %783 = add nsw i32 %778, %782
  %784 = add nuw nsw i64 %753, 391
  %785 = getelementptr inbounds i16, i16* %727, i64 %784
  %786 = load i16, i16* %785, align 2
  %787 = sext i16 %786 to i32
  %788 = add nsw i32 %783, %787
  %789 = mul nsw i32 %788, 3
  %790 = add nsw i32 %789, %769
  %791 = getelementptr inbounds i32, i32* %726, i64 %755
  %792 = load i32, i32* %791, align 4
  %793 = add nsw i32 %792, %749
  %794 = getelementptr inbounds i32, i32* %726, i64 %760
  %795 = load i32, i32* %794, align 4
  %796 = add nsw i32 %793, %795
  %797 = add nsw i32 %796, %748
  %798 = add nsw i32 %797, %747
  %799 = shl i32 %798, 2
  %800 = getelementptr inbounds i32, i32* %726, i64 %770
  %801 = load i32, i32* %800, align 4
  %802 = getelementptr inbounds i32, i32* %726, i64 %774
  %803 = load i32, i32* %802, align 4
  %804 = add nsw i32 %803, %801
  %805 = getelementptr inbounds i32, i32* %726, i64 %779
  %806 = load i32, i32* %805, align 4
  %807 = add nsw i32 %804, %806
  %808 = getelementptr inbounds i32, i32* %726, i64 %784
  %809 = load i32, i32* %808, align 4
  %810 = add nsw i32 %807, %809
  %811 = mul nsw i32 %810, 3
  %812 = getelementptr inbounds i8, i8* %724, i64 %753
  %813 = load i8, i8* %812, align 1
  %814 = zext i8 %813 to i32
  %815 = mul nsw i32 %790, %814
  %816 = add i32 %799, 256
  %817 = add i32 %816, %811
  %818 = add i32 %817, %815
  %819 = lshr i32 %818, 9
  %820 = trunc i32 %819 to i16
  %821 = getelementptr inbounds i16, i16* %723, i64 %753
  store i16 %820, i16* %821, align 2
  %822 = icmp eq i64 %760, %375
  br i1 %822, label %739, label %746

823:                                              ; preds = %739, %659, %655, %371, %541
  call void @llvm.lifetime.end.p0i8(i64 53040, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 106080, i8* nonnull %11) #5
  ret void
}

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!10}
!10 = distinct !{!10, !4}
!11 = !{!12}
!12 = distinct !{!12, !4}
!13 = !{!14}
!14 = distinct !{!14, !4}
!15 = !{!16}
!16 = distinct !{!16, !4}
!17 = !{!18}
!18 = distinct !{!18, !4}
!19 = !{!20}
!20 = distinct !{!20, !4}
!21 = distinct !{!21, !22}
!22 = !{!"llvm.loop.isvectorized", i32 1}
!23 = distinct !{!23, !22}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !22}
!30 = distinct !{!30, !22}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !22}
!37 = distinct !{!37, !22}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42, !43}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !40}
!44 = !{!42}
!45 = !{!43}
!46 = distinct !{!46, !22}
!47 = distinct !{!47, !22}
!48 = distinct !{!48, !49}
!49 = !{!"llvm.loop.unroll.disable"}
!50 = distinct !{!50, !49}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !49}
!53 = !{!54}
!54 = distinct !{!54, !55}
!55 = distinct !{!55, !"LVerDomain"}
!56 = !{!57}
!57 = distinct !{!57, !55}
!58 = !{!59}
!59 = distinct !{!59, !55}
!60 = !{!61}
!61 = distinct !{!61, !55}
!62 = !{!54, !57, !59}
!63 = distinct !{!63, !22}
!64 = distinct !{!64, !22}
