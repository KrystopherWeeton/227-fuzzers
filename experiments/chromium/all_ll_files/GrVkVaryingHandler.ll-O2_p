; ModuleID = '../../third_party/skia/src/gpu/vk/GrVkVaryingHandler.cpp'
source_filename = "../../third_party/skia/src/gpu/vk/GrVkVaryingHandler.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrVkVaryingHandler = type { %class.GrGLSLVaryingHandler }
%class.GrGLSLVaryingHandler = type { i32 (...)**, [8 x i8], %class.GrTBlockList, %class.GrTBlockList.0, %class.GrTBlockList.0, %class.GrTBlockList.0, %class.GrTBlockList.0, %class.GrTBlockList.0, %class.GrTBlockList.0, %class.GrGLSLProgramBuilder*, i8* }
%class.GrTBlockList = type { %class.GrSBlockAllocator }
%class.GrSBlockAllocator = type { [80 x i8] }
%class.GrTBlockList.0 = type { %class.GrSBlockAllocator.1 }
%class.GrSBlockAllocator.1 = type { [88 x i8], [8 x i8] }
%class.GrGLSLProgramBuilder = type opaque
%class.SkString = type { %class.sk_sp }
%class.sk_sp = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.GrBlockAllocator::Block" = type { %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"*, i32, i32, i32, i32 }
%class.GrBlockAllocator = type { %"class.GrBlockAllocator::Block"*, i64, %"class.GrBlockAllocator::Block" }

$_ZN20GrGLSLVaryingHandlerD2Ev = comdat any

$_ZN18GrVkVaryingHandlerD0Ev = comdat any

$_ZN20GrGLSLVaryingHandlerD0Ev = comdat any

$_ZN12GrTBlockListI11GrShaderVarLi1EE5resetEv = comdat any

$_ZN12GrTBlockListIN20GrGLSLVaryingHandler11VaryingInfoELi1EE5resetEv = comdat any

$_ZTV20GrGLSLVaryingHandler = comdat any

@_ZTV18GrVkVaryingHandler = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrGLSLVaryingHandler*)* @_ZN20GrGLSLVaryingHandlerD2Ev to i8*), i8* bitcast (void (%class.GrVkVaryingHandler*)* @_ZN18GrVkVaryingHandlerD0Ev to i8*), i8* bitcast (void (%class.GrVkVaryingHandler*)* @_ZN18GrVkVaryingHandler10onFinalizeEv to i8*)] }, align 8
@.str = private unnamed_addr constant [14 x i8] c"location = %d\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c", %s\00", align 1
@.str.2 = private unnamed_addr constant [57 x i8] c"../../third_party/skia/src/gpu/vk/GrVkVaryingHandler.cpp\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"Unexpected type\00", align 1
@_ZTV20GrGLSLVaryingHandler = linkonce_odr hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrGLSLVaryingHandler*)* @_ZN20GrGLSLVaryingHandlerD2Ev to i8*), i8* bitcast (void (%class.GrGLSLVaryingHandler*)* @_ZN20GrGLSLVaryingHandlerD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@switch.table._ZL15finalize_helperR12GrTBlockListI11GrShaderVarLi1EE = private unnamed_addr constant [49 x i32] [i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 3, i32 4, i32 1, i32 1, i32 1, i32 1, i32 2, i32 3, i32 4, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18GrVkVaryingHandler10onFinalizeEv(%class.GrVkVaryingHandler*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.GrVkVaryingHandler, %class.GrVkVaryingHandler* %0, i64 0, i32 0, i32 3
  tail call fastcc void @_ZL15finalize_helperR12GrTBlockListI11GrShaderVarLi1EE(%class.GrTBlockList.0* dereferenceable(96) %2)
  %3 = getelementptr inbounds %class.GrVkVaryingHandler, %class.GrVkVaryingHandler* %0, i64 0, i32 0, i32 4
  tail call fastcc void @_ZL15finalize_helperR12GrTBlockListI11GrShaderVarLi1EE(%class.GrTBlockList.0* dereferenceable(96) %3)
  %4 = getelementptr inbounds %class.GrVkVaryingHandler, %class.GrVkVaryingHandler* %0, i64 0, i32 0, i32 5
  tail call fastcc void @_ZL15finalize_helperR12GrTBlockListI11GrShaderVarLi1EE(%class.GrTBlockList.0* dereferenceable(96) %4)
  %5 = getelementptr inbounds %class.GrVkVaryingHandler, %class.GrVkVaryingHandler* %0, i64 0, i32 0, i32 6
  tail call fastcc void @_ZL15finalize_helperR12GrTBlockListI11GrShaderVarLi1EE(%class.GrTBlockList.0* dereferenceable(96) %5)
  %6 = getelementptr inbounds %class.GrVkVaryingHandler, %class.GrVkVaryingHandler* %0, i64 0, i32 0, i32 7
  tail call fastcc void @_ZL15finalize_helperR12GrTBlockListI11GrShaderVarLi1EE(%class.GrTBlockList.0* dereferenceable(96) %6)
  %7 = getelementptr inbounds %class.GrVkVaryingHandler, %class.GrVkVaryingHandler* %0, i64 0, i32 0, i32 8
  tail call fastcc void @_ZL15finalize_helperR12GrTBlockListI11GrShaderVarLi1EE(%class.GrTBlockList.0* dereferenceable(96) %7)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL15finalize_helperR12GrTBlockListI11GrShaderVarLi1EE(%class.GrTBlockList.0* dereferenceable(96)) unnamed_addr #0 {
  %2 = alloca %class.SkString, align 8
  %3 = getelementptr inbounds %class.GrTBlockList.0, %class.GrTBlockList.0* %0, i64 0, i32 0, i32 0, i64 16
  %4 = bitcast i8* %3 to %"class.GrBlockAllocator::Block"**
  %5 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %4, align 8, !noalias !2
  %6 = getelementptr inbounds %class.GrTBlockList.0, %class.GrTBlockList.0* %0, i64 0, i32 0, i32 0, i64 40
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7, align 8, !noalias !2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %20

10:                                               ; preds = %1, %13
  %11 = phi %"class.GrBlockAllocator::Block"* [ %19, %13 ], [ %5, %1 ]
  %12 = icmp eq %"class.GrBlockAllocator::Block"* %11, null
  br i1 %12, label %30, label %13

13:                                               ; preds = %10
  %14 = bitcast %"class.GrBlockAllocator::Block"* %11 to i64*
  %15 = load i64, i64* %14, align 8, !noalias !2
  %16 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %11, i64 0, i32 4
  %17 = load i32, i32* %16, align 8, !noalias !2
  %18 = icmp eq i32 %17, 0
  %19 = inttoptr i64 %15 to %"class.GrBlockAllocator::Block"*
  br i1 %18, label %10, label %24

20:                                               ; preds = %1
  %21 = bitcast i8* %3 to %"class.GrBlockAllocator::Block"*
  %22 = ptrtoint %"class.GrBlockAllocator::Block"* %5 to i64
  %23 = icmp eq i8* %3, null
  br i1 %23, label %30, label %24

24:                                               ; preds = %13, %20
  %25 = phi i32 [ %8, %20 ], [ %17, %13 ]
  %26 = phi %"class.GrBlockAllocator::Block"* [ %21, %20 ], [ %11, %13 ]
  %27 = phi i64 [ %22, %20 ], [ %15, %13 ]
  %28 = bitcast %class.SkString* %2 to i8*
  %29 = getelementptr inbounds %class.SkString, %class.SkString* %2, i64 0, i32 0, i32 0
  br label %31

30:                                               ; preds = %10, %76, %96, %86, %20
  ret void

31:                                               ; preds = %24, %96
  %32 = phi i32 [ 0, %24 ], [ %73, %96 ]
  %33 = phi i32 [ %25, %24 ], [ %100, %96 ]
  %34 = phi i32 [ 32, %24 ], [ %99, %96 ]
  %35 = phi %"class.GrBlockAllocator::Block"* [ %26, %24 ], [ %98, %96 ]
  %36 = phi i64 [ %27, %24 ], [ %97, %96 ]
  %37 = bitcast %"class.GrBlockAllocator::Block"* %35 to i8*
  %38 = sext i32 %34 to i64
  %39 = getelementptr inbounds i8, i8* %37, i64 %38
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #8
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %29, align 8
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %2) #8
  call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* nonnull %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 %32) #8
  %40 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %29, align 8
  %41 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %40, i64 0, i32 2
  %42 = icmp eq i8* %41, null
  br i1 %42, label %57, label %43

43:                                               ; preds = %31
  %44 = load i8, i8* %41, align 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %57, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds i8, i8* %39, i64 24
  %48 = bitcast i8* %47 to %class.SkString*
  %49 = bitcast i8* %47 to %"struct.SkString::Rec"**
  %50 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %49, align 8
  %51 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %50, i64 0, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %46
  %55 = call dereferenceable(8) %class.SkString* @_ZN8SkStringaSEPKc(%class.SkString* %48, i8* nonnull %41) #8
  br label %57

56:                                               ; preds = %46
  call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %48, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i8* nonnull %41) #8
  br label %57

57:                                               ; preds = %31, %43, %54, %56
  %58 = bitcast i8* %39 to i32*
  %59 = load i32, i32* %58, align 8
  %60 = icmp ult i32 %59, 49
  br i1 %60, label %62, label %61

61:                                               ; preds = %57
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.2, i64 0, i64 0), i32 81, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0)) #9
  unreachable

62:                                               ; preds = %57
  %63 = sext i32 %59 to i64
  %64 = getelementptr inbounds [49 x i32], [49 x i32]* @switch.table._ZL15finalize_helperR12GrTBlockListI11GrShaderVarLi1EE, i64 0, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds i8, i8* %39, i64 8
  %67 = bitcast i8* %66 to i32*
  %68 = load i32, i32* %67, align 8
  switch i32 %68, label %69 [
    i32 0, label %70
    i32 -1, label %70
  ]

69:                                               ; preds = %62
  br label %70

70:                                               ; preds = %62, %62, %69
  %71 = phi i32 [ %68, %69 ], [ 1, %62 ], [ 1, %62 ]
  %72 = mul nsw i32 %71, %65
  %73 = add nsw i32 %72, %32
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %2) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #8
  %74 = add i32 %34, 40
  %75 = icmp sgt i32 %74, %33
  br i1 %75, label %76, label %96

76:                                               ; preds = %70
  %77 = inttoptr i64 %36 to %"class.GrBlockAllocator::Block"*
  %78 = icmp eq i64 %36, 0
  br i1 %78, label %30, label %79

79:                                               ; preds = %76
  %80 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %77, i64 0, i32 0
  %81 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %80, align 8
  %82 = ptrtoint %"class.GrBlockAllocator::Block"* %81 to i64
  %83 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %77, i64 0, i32 4
  %84 = load i32, i32* %83, align 8
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %96

86:                                               ; preds = %79, %89
  %87 = phi %"class.GrBlockAllocator::Block"* [ %95, %89 ], [ %81, %79 ]
  %88 = icmp eq %"class.GrBlockAllocator::Block"* %87, null
  br i1 %88, label %30, label %89

89:                                               ; preds = %86
  %90 = bitcast %"class.GrBlockAllocator::Block"* %87 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %87, i64 0, i32 4
  %93 = load i32, i32* %92, align 8
  %94 = icmp eq i32 %93, 0
  %95 = inttoptr i64 %91 to %"class.GrBlockAllocator::Block"*
  br i1 %94, label %86, label %96

96:                                               ; preds = %89, %79, %70
  %97 = phi i64 [ %36, %70 ], [ %82, %79 ], [ %91, %89 ]
  %98 = phi %"class.GrBlockAllocator::Block"* [ %35, %70 ], [ %77, %79 ], [ %87, %89 ]
  %99 = phi i32 [ %74, %70 ], [ 32, %79 ], [ 32, %89 ]
  %100 = phi i32 [ %33, %70 ], [ %84, %79 ], [ %93, %89 ]
  %101 = icmp eq %"class.GrBlockAllocator::Block"* %98, null
  br i1 %101, label %30, label %31
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN20GrGLSLVaryingHandlerD2Ev(%class.GrGLSLVaryingHandler*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.GrGLSLVaryingHandler, %class.GrGLSLVaryingHandler* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTV20GrGLSLVaryingHandler, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 16
  %3 = getelementptr inbounds %class.GrGLSLVaryingHandler, %class.GrGLSLVaryingHandler* %0, i64 0, i32 8
  tail call void @_ZN12GrTBlockListI11GrShaderVarLi1EE5resetEv(%class.GrTBlockList.0* %3) #8
  %4 = bitcast %class.GrTBlockList.0* %3 to %class.GrBlockAllocator*
  tail call void @_ZN16GrBlockAllocator5resetEv(%class.GrBlockAllocator* %4) #8
  %5 = getelementptr inbounds %class.GrGLSLVaryingHandler, %class.GrGLSLVaryingHandler* %0, i64 0, i32 8, i32 0, i32 0, i64 16
  %6 = bitcast i8* %5 to %"class.GrBlockAllocator::Block"*
  tail call void @_ZN16GrBlockAllocator5BlockD1Ev(%"class.GrBlockAllocator::Block"* %6) #8
  %7 = getelementptr inbounds %class.GrGLSLVaryingHandler, %class.GrGLSLVaryingHandler* %0, i64 0, i32 7
  tail call void @_ZN12GrTBlockListI11GrShaderVarLi1EE5resetEv(%class.GrTBlockList.0* %7) #8
  %8 = bitcast %class.GrTBlockList.0* %7 to %class.GrBlockAllocator*
  tail call void @_ZN16GrBlockAllocator5resetEv(%class.GrBlockAllocator* %8) #8
  %9 = getelementptr inbounds %class.GrGLSLVaryingHandler, %class.GrGLSLVaryingHandler* %0, i64 0, i32 7, i32 0, i32 0, i64 16
  %10 = bitcast i8* %9 to %"class.GrBlockAllocator::Block"*
  tail call void @_ZN16GrBlockAllocator5BlockD1Ev(%"class.GrBlockAllocator::Block"* %10) #8
  %11 = getelementptr inbounds %class.GrGLSLVaryingHandler, %class.GrGLSLVaryingHandler* %0, i64 0, i32 6
  tail call void @_ZN12GrTBlockListI11GrShaderVarLi1EE5resetEv(%class.GrTBlockList.0* %11) #8
  %12 = bitcast %class.GrTBlockList.0* %11 to %class.GrBlockAllocator*
  tail call void @_ZN16GrBlockAllocator5resetEv(%class.GrBlockAllocator* %12) #8
  %13 = getelementptr inbounds %class.GrGLSLVaryingHandler, %class.GrGLSLVaryingHandler* %0, i64 0, i32 6, i32 0, i32 0, i64 16
  %14 = bitcast i8* %13 to %"class.GrBlockAllocator::Block"*
  tail call void @_ZN16GrBlockAllocator5BlockD1Ev(%"class.GrBlockAllocator::Block"* %14) #8
  %15 = getelementptr inbounds %class.GrGLSLVaryingHandler, %class.GrGLSLVaryingHandler* %0, i64 0, i32 5
  tail call void @_ZN12GrTBlockListI11GrShaderVarLi1EE5resetEv(%class.GrTBlockList.0* %15) #8
  %16 = bitcast %class.GrTBlockList.0* %15 to %class.GrBlockAllocator*
  tail call void @_ZN16GrBlockAllocator5resetEv(%class.GrBlockAllocator* %16) #8
  %17 = getelementptr inbounds %class.GrGLSLVaryingHandler, %class.GrGLSLVaryingHandler* %0, i64 0, i32 5, i32 0, i32 0, i64 16
  %18 = bitcast i8* %17 to %"class.GrBlockAllocator::Block"*
  tail call void @_ZN16GrBlockAllocator5BlockD1Ev(%"class.GrBlockAllocator::Block"* %18) #8
  %19 = getelementptr inbounds %class.GrGLSLVaryingHandler, %class.GrGLSLVaryingHandler* %0, i64 0, i32 4
  tail call void @_ZN12GrTBlockListI11GrShaderVarLi1EE5resetEv(%class.GrTBlockList.0* %19) #8
  %20 = bitcast %class.GrTBlockList.0* %19 to %class.GrBlockAllocator*
  tail call void @_ZN16GrBlockAllocator5resetEv(%class.GrBlockAllocator* %20) #8
  %21 = getelementptr inbounds %class.GrGLSLVaryingHandler, %class.GrGLSLVaryingHandler* %0, i64 0, i32 4, i32 0, i32 0, i64 16
  %22 = bitcast i8* %21 to %"class.GrBlockAllocator::Block"*
  tail call void @_ZN16GrBlockAllocator5BlockD1Ev(%"class.GrBlockAllocator::Block"* %22) #8
  %23 = getelementptr inbounds %class.GrGLSLVaryingHandler, %class.GrGLSLVaryingHandler* %0, i64 0, i32 3
  tail call void @_ZN12GrTBlockListI11GrShaderVarLi1EE5resetEv(%class.GrTBlockList.0* %23) #8
  %24 = bitcast %class.GrTBlockList.0* %23 to %class.GrBlockAllocator*
  tail call void @_ZN16GrBlockAllocator5resetEv(%class.GrBlockAllocator* %24) #8
  %25 = getelementptr inbounds %class.GrGLSLVaryingHandler, %class.GrGLSLVaryingHandler* %0, i64 0, i32 3, i32 0, i32 0, i64 16
  %26 = bitcast i8* %25 to %"class.GrBlockAllocator::Block"*
  tail call void @_ZN16GrBlockAllocator5BlockD1Ev(%"class.GrBlockAllocator::Block"* %26) #8
  %27 = getelementptr inbounds %class.GrGLSLVaryingHandler, %class.GrGLSLVaryingHandler* %0, i64 0, i32 2
  tail call void @_ZN12GrTBlockListIN20GrGLSLVaryingHandler11VaryingInfoELi1EE5resetEv(%class.GrTBlockList* %27) #8
  %28 = bitcast %class.GrTBlockList* %27 to %class.GrBlockAllocator*
  tail call void @_ZN16GrBlockAllocator5resetEv(%class.GrBlockAllocator* %28) #8
  %29 = getelementptr inbounds %class.GrGLSLVaryingHandler, %class.GrGLSLVaryingHandler* %0, i64 0, i32 2, i32 0, i32 0, i64 16
  %30 = bitcast i8* %29 to %"class.GrBlockAllocator::Block"*
  tail call void @_ZN16GrBlockAllocator5BlockD1Ev(%"class.GrBlockAllocator::Block"* %30) #8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN18GrVkVaryingHandlerD0Ev(%class.GrVkVaryingHandler*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %class.GrVkVaryingHandler, %class.GrVkVaryingHandler* %0, i64 0, i32 0
  tail call void @_ZN20GrGLSLVaryingHandlerD2Ev(%class.GrGLSLVaryingHandler* %2) #8
  %3 = bitcast %class.GrVkVaryingHandler* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN8SkStringC1Ev(%class.SkString*) unnamed_addr #3

declare void @_ZN8SkString7appendfEPKcz(%class.SkString*, i8*, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #4

declare dereferenceable(8) %class.SkString* @_ZN8SkStringaSEPKc(%class.SkString*, i8*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN20GrGLSLVaryingHandlerD0Ev(%class.GrGLSLVaryingHandler*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #9
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12GrTBlockListI11GrShaderVarLi1EE5resetEv(%class.GrTBlockList.0*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.GrTBlockList.0* %0 to %"class.GrBlockAllocator::Block"**
  %3 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %2, align 16, !noalias !5
  %4 = icmp eq %"class.GrBlockAllocator::Block"* %3, null
  br i1 %4, label %40, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %3, i64 0, i32 1
  %7 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %6, align 8, !noalias !5
  %8 = icmp eq %"class.GrBlockAllocator::Block"* %7, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %7, i64 0, i32 3
  %11 = load i32, i32* %10, align 4, !noalias !5
  %12 = icmp slt i32 %11, 0
  %13 = select i1 %12, %"class.GrBlockAllocator::Block"* null, %"class.GrBlockAllocator::Block"* %7
  br label %14

14:                                               ; preds = %9, %5
  %15 = phi %"class.GrBlockAllocator::Block"* [ %13, %9 ], [ null, %5 ]
  %16 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %3, i64 0, i32 4
  %17 = load i32, i32* %16, align 8, !noalias !5
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %35, %14
  %20 = phi %"class.GrBlockAllocator::Block"* [ %3, %14 ], [ %24, %35 ]
  %21 = phi %"class.GrBlockAllocator::Block"* [ %15, %14 ], [ %36, %35 ]
  %22 = phi i32 [ %17, %14 ], [ %38, %35 ]
  br label %42

23:                                               ; preds = %14, %35
  %24 = phi %"class.GrBlockAllocator::Block"* [ %36, %35 ], [ %15, %14 ]
  %25 = icmp eq %"class.GrBlockAllocator::Block"* %24, null
  br i1 %25, label %40, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %24, i64 0, i32 1
  %28 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %27, align 8, !noalias !5
  %29 = icmp eq %"class.GrBlockAllocator::Block"* %28, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %28, i64 0, i32 3
  %32 = load i32, i32* %31, align 4, !noalias !5
  %33 = icmp slt i32 %32, 0
  %34 = select i1 %33, %"class.GrBlockAllocator::Block"* null, %"class.GrBlockAllocator::Block"* %28
  br label %35

35:                                               ; preds = %30, %26
  %36 = phi %"class.GrBlockAllocator::Block"* [ null, %26 ], [ %34, %30 ]
  %37 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %24, i64 0, i32 4
  %38 = load i32, i32* %37, align 8, !noalias !5
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %23, label %19

40:                                               ; preds = %23, %59, %79, %1
  %41 = bitcast %class.GrTBlockList.0* %0 to %class.GrBlockAllocator*
  tail call void @_ZN16GrBlockAllocator5resetEv(%class.GrBlockAllocator* %41) #8
  ret void

42:                                               ; preds = %75, %19
  %43 = phi %"class.GrBlockAllocator::Block"* [ %20, %19 ], [ %76, %75 ]
  %44 = phi %"class.GrBlockAllocator::Block"* [ %21, %19 ], [ %77, %75 ]
  %45 = phi i32 [ %22, %19 ], [ %78, %75 ]
  %46 = bitcast %"class.GrBlockAllocator::Block"* %43 to i8*
  br label %47

47:                                               ; preds = %42, %47
  %48 = phi i32 [ %57, %47 ], [ %45, %42 ]
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %46, i64 %49
  %51 = getelementptr inbounds i8, i8* %50, i64 32
  %52 = bitcast i8* %51 to %class.SkString*
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %52) #8
  %53 = getelementptr inbounds i8, i8* %50, i64 24
  %54 = bitcast i8* %53 to %class.SkString*
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %54) #8
  %55 = getelementptr inbounds i8, i8* %50, i64 16
  %56 = bitcast i8* %55 to %class.SkString*
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %56) #8
  %57 = add i32 %48, -40
  %58 = icmp slt i32 %57, 32
  br i1 %58, label %59, label %47

59:                                               ; preds = %47
  %60 = icmp eq %"class.GrBlockAllocator::Block"* %44, null
  br i1 %60, label %40, label %61

61:                                               ; preds = %59
  %62 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %44, i64 0, i32 1
  %63 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %62, align 8
  %64 = icmp eq %"class.GrBlockAllocator::Block"* %63, null
  br i1 %64, label %70, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %63, i64 0, i32 3
  %67 = load i32, i32* %66, align 4
  %68 = icmp slt i32 %67, 0
  %69 = select i1 %68, %"class.GrBlockAllocator::Block"* null, %"class.GrBlockAllocator::Block"* %63
  br label %70

70:                                               ; preds = %65, %61
  %71 = phi %"class.GrBlockAllocator::Block"* [ null, %61 ], [ %69, %65 ]
  %72 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %44, i64 0, i32 4
  %73 = load i32, i32* %72, align 8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %79, label %75

75:                                               ; preds = %91, %70
  %76 = phi %"class.GrBlockAllocator::Block"* [ %44, %70 ], [ %80, %91 ]
  %77 = phi %"class.GrBlockAllocator::Block"* [ %71, %70 ], [ %92, %91 ]
  %78 = phi i32 [ %73, %70 ], [ %94, %91 ]
  br label %42

79:                                               ; preds = %70, %91
  %80 = phi %"class.GrBlockAllocator::Block"* [ %92, %91 ], [ %71, %70 ]
  %81 = icmp eq %"class.GrBlockAllocator::Block"* %80, null
  br i1 %81, label %40, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %80, i64 0, i32 1
  %84 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %83, align 8
  %85 = icmp eq %"class.GrBlockAllocator::Block"* %84, null
  br i1 %85, label %91, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %84, i64 0, i32 3
  %88 = load i32, i32* %87, align 4
  %89 = icmp slt i32 %88, 0
  %90 = select i1 %89, %"class.GrBlockAllocator::Block"* null, %"class.GrBlockAllocator::Block"* %84
  br label %91

91:                                               ; preds = %86, %82
  %92 = phi %"class.GrBlockAllocator::Block"* [ null, %82 ], [ %90, %86 ]
  %93 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %80, i64 0, i32 4
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %79, label %75
}

declare void @_ZN16GrBlockAllocator5resetEv(%class.GrBlockAllocator*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN16GrBlockAllocator5BlockD1Ev(%"class.GrBlockAllocator::Block"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12GrTBlockListIN20GrGLSLVaryingHandler11VaryingInfoELi1EE5resetEv(%class.GrTBlockList*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.GrTBlockList* %0 to %"class.GrBlockAllocator::Block"**
  %3 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %2, align 16, !noalias !8
  %4 = icmp eq %"class.GrBlockAllocator::Block"* %3, null
  br i1 %4, label %40, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %3, i64 0, i32 1
  %7 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %6, align 8, !noalias !8
  %8 = icmp eq %"class.GrBlockAllocator::Block"* %7, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %7, i64 0, i32 3
  %11 = load i32, i32* %10, align 4, !noalias !8
  %12 = icmp slt i32 %11, 0
  %13 = select i1 %12, %"class.GrBlockAllocator::Block"* null, %"class.GrBlockAllocator::Block"* %7
  br label %14

14:                                               ; preds = %9, %5
  %15 = phi %"class.GrBlockAllocator::Block"* [ %13, %9 ], [ null, %5 ]
  %16 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %3, i64 0, i32 4
  %17 = load i32, i32* %16, align 8, !noalias !8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %35, %14
  %20 = phi %"class.GrBlockAllocator::Block"* [ %3, %14 ], [ %24, %35 ]
  %21 = phi %"class.GrBlockAllocator::Block"* [ %15, %14 ], [ %36, %35 ]
  %22 = phi i32 [ %17, %14 ], [ %38, %35 ]
  br label %42

23:                                               ; preds = %14, %35
  %24 = phi %"class.GrBlockAllocator::Block"* [ %36, %35 ], [ %15, %14 ]
  %25 = icmp eq %"class.GrBlockAllocator::Block"* %24, null
  br i1 %25, label %40, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %24, i64 0, i32 1
  %28 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %27, align 8, !noalias !8
  %29 = icmp eq %"class.GrBlockAllocator::Block"* %28, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %28, i64 0, i32 3
  %32 = load i32, i32* %31, align 4, !noalias !8
  %33 = icmp slt i32 %32, 0
  %34 = select i1 %33, %"class.GrBlockAllocator::Block"* null, %"class.GrBlockAllocator::Block"* %28
  br label %35

35:                                               ; preds = %30, %26
  %36 = phi %"class.GrBlockAllocator::Block"* [ null, %26 ], [ %34, %30 ]
  %37 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %24, i64 0, i32 4
  %38 = load i32, i32* %37, align 8, !noalias !8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %23, label %19

40:                                               ; preds = %23, %57, %77, %1
  %41 = bitcast %class.GrTBlockList* %0 to %class.GrBlockAllocator*
  tail call void @_ZN16GrBlockAllocator5resetEv(%class.GrBlockAllocator* %41) #8
  ret void

42:                                               ; preds = %73, %19
  %43 = phi %"class.GrBlockAllocator::Block"* [ %20, %19 ], [ %74, %73 ]
  %44 = phi %"class.GrBlockAllocator::Block"* [ %21, %19 ], [ %75, %73 ]
  %45 = phi i32 [ %22, %19 ], [ %76, %73 ]
  %46 = bitcast %"class.GrBlockAllocator::Block"* %43 to i8*
  br label %47

47:                                               ; preds = %42, %47
  %48 = phi i32 [ %55, %47 ], [ %45, %42 ]
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %46, i64 %49
  %51 = getelementptr inbounds i8, i8* %50, i64 16
  %52 = bitcast i8* %51 to %class.SkString*
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %52) #8
  %53 = getelementptr inbounds i8, i8* %50, i64 8
  %54 = bitcast i8* %53 to %class.SkString*
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %54) #8
  %55 = add i32 %48, -32
  %56 = icmp slt i32 %55, 32
  br i1 %56, label %57, label %47

57:                                               ; preds = %47
  %58 = icmp eq %"class.GrBlockAllocator::Block"* %44, null
  br i1 %58, label %40, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %44, i64 0, i32 1
  %61 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %60, align 8
  %62 = icmp eq %"class.GrBlockAllocator::Block"* %61, null
  br i1 %62, label %68, label %63

63:                                               ; preds = %59
  %64 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %61, i64 0, i32 3
  %65 = load i32, i32* %64, align 4
  %66 = icmp slt i32 %65, 0
  %67 = select i1 %66, %"class.GrBlockAllocator::Block"* null, %"class.GrBlockAllocator::Block"* %61
  br label %68

68:                                               ; preds = %63, %59
  %69 = phi %"class.GrBlockAllocator::Block"* [ null, %59 ], [ %67, %63 ]
  %70 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %44, i64 0, i32 4
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %77, label %73

73:                                               ; preds = %89, %68
  %74 = phi %"class.GrBlockAllocator::Block"* [ %44, %68 ], [ %78, %89 ]
  %75 = phi %"class.GrBlockAllocator::Block"* [ %69, %68 ], [ %90, %89 ]
  %76 = phi i32 [ %71, %68 ], [ %92, %89 ]
  br label %42

77:                                               ; preds = %68, %89
  %78 = phi %"class.GrBlockAllocator::Block"* [ %90, %89 ], [ %69, %68 ]
  %79 = icmp eq %"class.GrBlockAllocator::Block"* %78, null
  br i1 %79, label %40, label %80

80:                                               ; preds = %77
  %81 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %78, i64 0, i32 1
  %82 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %81, align 8
  %83 = icmp eq %"class.GrBlockAllocator::Block"* %82, null
  br i1 %83, label %89, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %82, i64 0, i32 3
  %86 = load i32, i32* %85, align 4
  %87 = icmp slt i32 %86, 0
  %88 = select i1 %87, %"class.GrBlockAllocator::Block"* null, %"class.GrBlockAllocator::Block"* %82
  br label %89

89:                                               ; preds = %84, %80
  %90 = phi %"class.GrBlockAllocator::Block"* [ null, %80 ], [ %88, %84 ]
  %91 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %78, i64 0, i32 4
  %92 = load i32, i32* %91, align 8
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %77, label %73
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK18BlockIndexIteratorIR11GrShaderVarLb1ELb0EXadL_ZN12GrTBlockListIS0_Li1EE5FirstEPKN16GrBlockAllocator5BlockEEEXadL_ZNS3_4LastES7_EEXadL_ZNS3_9IncrementES7_iEEXadL_ZNS3_7GetItemEPS5_iEEE5beginEv: argument 0"}
!4 = distinct !{!4, !"_ZNK18BlockIndexIteratorIR11GrShaderVarLb1ELb0EXadL_ZN12GrTBlockListIS0_Li1EE5FirstEPKN16GrBlockAllocator5BlockEEEXadL_ZNS3_4LastES7_EEXadL_ZNS3_9IncrementES7_iEEXadL_ZNS3_7GetItemEPS5_iEEE5beginEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK18BlockIndexIteratorIR11GrShaderVarLb0ELb0EXadL_ZN12GrTBlockListIS0_Li1EE4LastEPKN16GrBlockAllocator5BlockEEEXadL_ZNS3_5FirstES7_EEXadL_ZNS3_9DecrementES7_iEEXadL_ZNS3_7GetItemEPS5_iEEE5beginEv: argument 0"}
!7 = distinct !{!7, !"_ZNK18BlockIndexIteratorIR11GrShaderVarLb0ELb0EXadL_ZN12GrTBlockListIS0_Li1EE4LastEPKN16GrBlockAllocator5BlockEEEXadL_ZNS3_5FirstES7_EEXadL_ZNS3_9DecrementES7_iEEXadL_ZNS3_7GetItemEPS5_iEEE5beginEv"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNK18BlockIndexIteratorIRN20GrGLSLVaryingHandler11VaryingInfoELb0ELb0EXadL_ZN12GrTBlockListIS1_Li1EE4LastEPKN16GrBlockAllocator5BlockEEEXadL_ZNS4_5FirstES8_EEXadL_ZNS4_9DecrementES8_iEEXadL_ZNS4_7GetItemEPS6_iEEE5beginEv: argument 0"}
!10 = distinct !{!10, !"_ZNK18BlockIndexIteratorIRN20GrGLSLVaryingHandler11VaryingInfoELb0ELb0EXadL_ZN12GrTBlockListIS1_Li1EE4LastEPKN16GrBlockAllocator5BlockEEEXadL_ZNS4_5FirstES8_EEXadL_ZNS4_9DecrementES8_iEEXadL_ZNS4_7GetItemEPS6_iEEE5beginEv"}
