; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/corner_match_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/corner_match_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @av1_compute_cross_correlation_avx2(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %9 = add nsw i32 %3, -6
  %10 = mul nsw i32 %9, %1
  %11 = add nsw i32 %2, -6
  %12 = add nsw i32 %11, %10
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i8, i8* %0, i64 %13
  %15 = add nsw i32 %7, -6
  %16 = mul nsw i32 %15, %5
  %17 = add nsw i32 %6, -6
  %18 = add nsw i32 %17, %16
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %4, i64 %19
  %21 = sext i32 %1 to i64
  %22 = sext i32 %5 to i64
  br label %23

23:                                               ; preds = %23, %8
  %24 = phi i64 [ 0, %8 ], [ %56, %23 ]
  %25 = phi i64 [ 0, %8 ], [ %55, %23 ]
  %26 = phi i32 [ 0, %8 ], [ %57, %23 ]
  %27 = phi <16 x i16> [ zeroinitializer, %8 ], [ %52, %23 ]
  %28 = phi <8 x i32> [ zeroinitializer, %8 ], [ %48, %23 ]
  %29 = phi <8 x i32> [ zeroinitializer, %8 ], [ %54, %23 ]
  %30 = getelementptr inbounds i8, i8* %14, i64 %25
  %31 = bitcast i8* %30 to <2 x i64>*
  %32 = load <2 x i64>, <2 x i64>* %31, align 1
  %33 = and <2 x i64> %32, <i64 -1, i64 1099511627775>
  %34 = bitcast <2 x i64> %33 to <16 x i8>
  %35 = zext <16 x i8> %34 to <16 x i16>
  %36 = getelementptr inbounds i8, i8* %20, i64 %24
  %37 = bitcast i8* %36 to <2 x i64>*
  %38 = load <2 x i64>, <2 x i64>* %37, align 1
  %39 = and <2 x i64> %38, <i64 -1, i64 1099511627775>
  %40 = bitcast <2 x i64> %39 to <16 x i8>
  %41 = zext <16 x i8> %40 to <16 x i16>
  %42 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = bitcast <4 x i64> %42 to <8 x i32>
  %44 = bitcast <2 x i64> %39 to <4 x i32>
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = shufflevector <8 x i32> %43, <8 x i32> %45, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %47 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %41, <16 x i16> %41) #3
  %48 = add <8 x i32> %47, %28
  %49 = bitcast <8 x i32> %46 to <32 x i8>
  %50 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %49, <32 x i8> zeroinitializer) #3
  %51 = bitcast <4 x i64> %50 to <16 x i16>
  %52 = add <16 x i16> %27, %51
  %53 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %35, <16 x i16> %41) #3
  %54 = add <8 x i32> %53, %29
  %55 = add nsw i64 %25, %21
  %56 = add nsw i64 %24, %22
  %57 = add nuw nsw i32 %26, 1
  %58 = icmp eq i32 %57, 13
  br i1 %58, label %59, label %23

59:                                               ; preds = %23
  %60 = bitcast <8 x i32> %48 to <4 x i64>
  %61 = bitcast <8 x i32> %54 to <4 x i64>
  %62 = bitcast <16 x i16> %52 to <32 x i8>
  %63 = shufflevector <32 x i8> %62, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %64 = bitcast <16 x i16> %52 to <8 x i32>
  %65 = bitcast <32 x i8> %63 to <8 x i32>
  %66 = add <8 x i32> %65, %64
  %67 = bitcast <8 x i32> %66 to <4 x i64>
  %68 = shufflevector <4 x i64> %67, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %69 = bitcast <2 x i64> %68 to <4 x i32>
  %70 = extractelement <4 x i32> %69, i32 0
  %71 = extractelement <8 x i32> %66, i64 4
  %72 = shufflevector <4 x i64> %60, <4 x i64> %61, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %73 = shufflevector <4 x i64> %60, <4 x i64> %61, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %74 = bitcast <4 x i64> %72 to <8 x i32>
  %75 = bitcast <4 x i64> %73 to <8 x i32>
  %76 = add <8 x i32> %75, %74
  %77 = bitcast <8 x i32> %76 to <4 x i64>
  %78 = shufflevector <4 x i64> %77, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %79 = shufflevector <8 x i32> %76, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %80 = bitcast <2 x i64> %78 to <4 x i32>
  %81 = add <4 x i32> %79, %80
  %82 = bitcast <4 x i32> %81 to <2 x i64>
  %83 = lshr <2 x i64> %82, <i64 32, i64 32>
  %84 = bitcast <2 x i64> %83 to <4 x i32>
  %85 = add <4 x i32> %81, %84
  %86 = extractelement <4 x i32> %85, i32 0
  %87 = extractelement <4 x i32> %85, i64 2
  %88 = mul nsw i32 %86, 169
  %89 = mul nsw i32 %71, %71
  %90 = sub nsw i32 %88, %89
  %91 = mul nsw i32 %87, 169
  %92 = mul nsw i32 %70, %71
  %93 = sub nsw i32 %91, %92
  %94 = sitofp i32 %93 to double
  %95 = sitofp i32 %90 to double
  %96 = tail call double @sqrt(double %95) #3
  %97 = fdiv double %94, %96
  ret double %97
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8>, <32 x i8>) #2

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
