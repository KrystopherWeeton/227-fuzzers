; ModuleID = '../../third_party/libgav1/src/src/dsp/convolve.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/convolve.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }

@_ZN7libgav120kHalfSubPixelFiltersE = external local_unnamed_addr constant [6 x [16 x [8 x i8]]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp14ConvolveInit_CEv() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #4
  %2 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 5, i64 0, i64 0, i64 0, i64 0
  %3 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %2 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_114ConvolveCopy_CILi8EhEEvPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_120ConvolveHorizontal_CILi8EhEEvPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %3, align 8
  %4 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 5, i64 0, i64 0, i64 1, i64 0
  %5 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %4 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_118ConvolveVertical_CILi8EhEEvPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_112Convolve2D_CILi8EhEEvPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %5, align 8
  %6 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 5, i64 0, i64 1, i64 0, i64 0
  %7 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %6 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_122ConvolveCompoundCopy_CILi8EhEEvPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_128ConvolveCompoundHorizontal_CILi8EhEEvPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %7, align 8
  %8 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 5, i64 0, i64 1, i64 1, i64 0
  %9 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %8 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveCompoundVertical_CILi8EhEEvPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_120ConvolveCompound2D_CILi8EhEEvPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %9, align 8
  %10 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 5, i64 1, i64 0, i64 0, i64 0
  %11 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %10 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_114ConvolveCopy_CILi8EhEEvPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveIntraBlockCopy1D_CILi8EhLb1EEEvPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %11, align 8
  %12 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 5, i64 1, i64 0, i64 1, i64 0
  %13 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %12 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveIntraBlockCopy1D_CILi8EhLb0EEEvPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveIntraBlockCopy2D_CILi8EhEEvPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %13, align 8
  %14 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 5, i64 1, i64 1, i64 0, i64 0
  %15 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 6, i64 0
  %16 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 32, i1 false) #4
  %17 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)** %15 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_117ConvolveScale2D_CILi8EhEEvPKvliiiiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_125ConvolveCompoundScale2D_CILi8EhEEvPKvliiiiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %17, align 8
  %18 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 10) #4
  %19 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %18, i64 0, i32 5, i64 0, i64 0, i64 0, i64 0
  %20 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %19 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_114ConvolveCopy_CILi10EtEEvPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_120ConvolveHorizontal_CILi10EtEEvPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %20, align 8
  %21 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %18, i64 0, i32 5, i64 0, i64 0, i64 1, i64 0
  %22 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %21 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_118ConvolveVertical_CILi10EtEEvPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_112Convolve2D_CILi10EtEEvPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %22, align 8
  %23 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %18, i64 0, i32 5, i64 0, i64 1, i64 0, i64 0
  %24 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %23 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_122ConvolveCompoundCopy_CILi10EtEEvPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_128ConvolveCompoundHorizontal_CILi10EtEEvPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %24, align 8
  %25 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %18, i64 0, i32 5, i64 0, i64 1, i64 1, i64 0
  %26 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %25 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveCompoundVertical_CILi10EtEEvPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_120ConvolveCompound2D_CILi10EtEEvPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %26, align 8
  %27 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %18, i64 0, i32 5, i64 1, i64 0, i64 0, i64 0
  %28 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %27 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_114ConvolveCopy_CILi10EtEEvPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveIntraBlockCopy1D_CILi10EtLb1EEEvPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %28, align 8
  %29 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %18, i64 0, i32 5, i64 1, i64 0, i64 1, i64 0
  %30 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %29 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveIntraBlockCopy1D_CILi10EtLb0EEEvPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveIntraBlockCopy2D_CILi10EtEEvPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %30, align 8
  %31 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %18, i64 0, i32 5, i64 1, i64 1, i64 0, i64 0
  %32 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %18, i64 0, i32 6, i64 0
  %33 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 32, i1 false) #4
  %34 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)** %32 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_117ConvolveScale2D_CILi10EtEEvPKvliiiiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_125ConvolveCompoundScale2D_CILi10EtEEvPKvliiiiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %34, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_114ConvolveCopy_CILi8EhEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #0 {
  %11 = sext i32 %6 to i64
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i8* [ %0, %10 ], [ %16, %12 ]
  %14 = phi i8* [ %8, %10 ], [ %17, %12 ]
  %15 = phi i32 [ 0, %10 ], [ %18, %12 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %13, i64 %11, i1 false)
  %16 = getelementptr inbounds i8, i8* %13, i64 %1
  %17 = getelementptr inbounds i8, i8* %14, i64 %9
  %18 = add nuw nsw i32 %15, 1
  %19 = icmp slt i32 %18, %7
  br i1 %19, label %12, label %20

20:                                               ; preds = %12
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_120ConvolveHorizontal_CILi8EhEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = icmp slt i32 %6, 5
  br i1 %11, label %12, label %17

12:                                               ; preds = %10
  %13 = and i32 %2, -3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = icmp eq i32 %2, 1
  br i1 %16, label %19, label %17

17:                                               ; preds = %15, %10
  %18 = sext i32 %2 to i64
  br label %19

19:                                               ; preds = %12, %15, %17
  %20 = phi i64 [ %18, %17 ], [ 4, %12 ], [ 5, %15 ]
  %21 = getelementptr inbounds i8, i8* %0, i64 -3
  %22 = sext i32 %4 to i64
  %23 = sext i32 %6 to i64
  %24 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %22, i64 0
  %25 = load i8, i8* %24, align 8
  %26 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %22, i64 1
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %22, i64 2
  %29 = load i8, i8* %28, align 2
  %30 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %22, i64 3
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %22, i64 4
  %33 = load i8, i8* %32, align 4
  %34 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %22, i64 5
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %22, i64 6
  %37 = load i8, i8* %36, align 2
  %38 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %22, i64 7
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %25 to i32
  %41 = sext i8 %27 to i32
  %42 = sext i8 %29 to i32
  %43 = sext i8 %31 to i32
  %44 = sext i8 %33 to i32
  %45 = sext i8 %35 to i32
  %46 = sext i8 %37 to i32
  %47 = sext i8 %39 to i32
  %48 = icmp sgt i64 %23, 1
  %49 = select i1 %48, i64 %23, i64 1
  %50 = icmp sgt i64 %23, 1
  %51 = select i1 %50, i64 %23, i64 1
  %52 = add nuw nsw i64 %51, 4
  %53 = icmp ult i64 %49, 16
  %54 = and i64 %49, 9223372036854775792
  %55 = insertelement <16 x i32> undef, i32 %40, i32 0
  %56 = shufflevector <16 x i32> %55, <16 x i32> undef, <16 x i32> zeroinitializer
  %57 = insertelement <16 x i32> undef, i32 %41, i32 0
  %58 = shufflevector <16 x i32> %57, <16 x i32> undef, <16 x i32> zeroinitializer
  %59 = insertelement <16 x i32> undef, i32 %42, i32 0
  %60 = shufflevector <16 x i32> %59, <16 x i32> undef, <16 x i32> zeroinitializer
  %61 = insertelement <16 x i32> undef, i32 %43, i32 0
  %62 = shufflevector <16 x i32> %61, <16 x i32> undef, <16 x i32> zeroinitializer
  %63 = insertelement <16 x i32> undef, i32 %44, i32 0
  %64 = shufflevector <16 x i32> %63, <16 x i32> undef, <16 x i32> zeroinitializer
  %65 = insertelement <16 x i32> undef, i32 %45, i32 0
  %66 = shufflevector <16 x i32> %65, <16 x i32> undef, <16 x i32> zeroinitializer
  %67 = insertelement <16 x i32> undef, i32 %46, i32 0
  %68 = shufflevector <16 x i32> %67, <16 x i32> undef, <16 x i32> zeroinitializer
  %69 = insertelement <16 x i32> undef, i32 %47, i32 0
  %70 = shufflevector <16 x i32> %69, <16 x i32> undef, <16 x i32> zeroinitializer
  %71 = icmp eq i64 %49, %54
  br label %72

72:                                               ; preds = %221, %19
  %73 = phi i64 [ %226, %221 ], [ 0, %19 ]
  %74 = phi i8* [ %222, %221 ], [ %21, %19 ]
  %75 = phi i8* [ %223, %221 ], [ %8, %19 ]
  %76 = phi i32 [ %224, %221 ], [ 0, %19 ]
  %77 = mul i64 %73, %9
  %78 = mul i64 %73, %1
  br i1 %53, label %160, label %79

79:                                               ; preds = %72
  %80 = add i64 %52, %78
  %81 = getelementptr i8, i8* %0, i64 %80
  %82 = add i64 %78, -3
  %83 = getelementptr i8, i8* %0, i64 %82
  %84 = add i64 %51, %77
  %85 = getelementptr i8, i8* %8, i64 %84
  %86 = getelementptr i8, i8* %8, i64 %77
  %87 = icmp ult i8* %86, %81
  %88 = icmp ult i8* %83, %85
  %89 = and i1 %87, %88
  br i1 %89, label %160, label %90

90:                                               ; preds = %79, %90
  %91 = phi i64 [ %157, %90 ], [ 0, %79 ]
  %92 = getelementptr inbounds i8, i8* %74, i64 %91
  %93 = bitcast i8* %92 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 1, !alias.scope !2
  %95 = zext <16 x i8> %94 to <16 x i32>
  %96 = mul nsw <16 x i32> %56, %95
  %97 = or i64 %91, 1
  %98 = getelementptr inbounds i8, i8* %74, i64 %97
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1, !alias.scope !2
  %101 = zext <16 x i8> %100 to <16 x i32>
  %102 = mul nsw <16 x i32> %58, %101
  %103 = add nsw <16 x i32> %102, %96
  %104 = or i64 %91, 2
  %105 = getelementptr inbounds i8, i8* %74, i64 %104
  %106 = bitcast i8* %105 to <16 x i8>*
  %107 = load <16 x i8>, <16 x i8>* %106, align 1, !alias.scope !2
  %108 = zext <16 x i8> %107 to <16 x i32>
  %109 = mul nsw <16 x i32> %60, %108
  %110 = add nsw <16 x i32> %109, %103
  %111 = or i64 %91, 3
  %112 = getelementptr inbounds i8, i8* %74, i64 %111
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !2
  %115 = zext <16 x i8> %114 to <16 x i32>
  %116 = mul nsw <16 x i32> %62, %115
  %117 = add nsw <16 x i32> %116, %110
  %118 = or i64 %91, 4
  %119 = getelementptr inbounds i8, i8* %74, i64 %118
  %120 = bitcast i8* %119 to <16 x i8>*
  %121 = load <16 x i8>, <16 x i8>* %120, align 1, !alias.scope !2
  %122 = zext <16 x i8> %121 to <16 x i32>
  %123 = mul nsw <16 x i32> %64, %122
  %124 = add nsw <16 x i32> %123, %117
  %125 = or i64 %91, 5
  %126 = getelementptr inbounds i8, i8* %74, i64 %125
  %127 = bitcast i8* %126 to <16 x i8>*
  %128 = load <16 x i8>, <16 x i8>* %127, align 1, !alias.scope !2
  %129 = zext <16 x i8> %128 to <16 x i32>
  %130 = mul nsw <16 x i32> %66, %129
  %131 = add nsw <16 x i32> %130, %124
  %132 = or i64 %91, 6
  %133 = getelementptr inbounds i8, i8* %74, i64 %132
  %134 = bitcast i8* %133 to <16 x i8>*
  %135 = load <16 x i8>, <16 x i8>* %134, align 1, !alias.scope !2
  %136 = zext <16 x i8> %135 to <16 x i32>
  %137 = mul nsw <16 x i32> %68, %136
  %138 = add nsw <16 x i32> %137, %131
  %139 = or i64 %91, 7
  %140 = getelementptr inbounds i8, i8* %74, i64 %139
  %141 = bitcast i8* %140 to <16 x i8>*
  %142 = load <16 x i8>, <16 x i8>* %141, align 1, !alias.scope !2
  %143 = zext <16 x i8> %142 to <16 x i32>
  %144 = mul nsw <16 x i32> %70, %143
  %145 = add nsw <16 x i32> %144, %138
  %146 = add nsw <16 x i32> %145, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %147 = ashr <16 x i32> %146, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %148 = add nsw <16 x i32> %147, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %149 = ashr <16 x i32> %148, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %150 = icmp slt <16 x i32> %149, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %151 = select <16 x i1> %150, <16 x i32> %149, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %152 = icmp sgt <16 x i32> %151, zeroinitializer
  %153 = select <16 x i1> %152, <16 x i32> %151, <16 x i32> zeroinitializer
  %154 = trunc <16 x i32> %153 to <16 x i8>
  %155 = getelementptr inbounds i8, i8* %75, i64 %91
  %156 = bitcast i8* %155 to <16 x i8>*
  store <16 x i8> %154, <16 x i8>* %156, align 1, !alias.scope !5, !noalias !2
  %157 = add i64 %91, 16
  %158 = icmp eq i64 %157, %54
  br i1 %158, label %159, label %90, !llvm.loop !7

159:                                              ; preds = %90
  br i1 %71, label %221, label %160

160:                                              ; preds = %159, %79, %72
  %161 = phi i64 [ 0, %79 ], [ 0, %72 ], [ %54, %159 ]
  br label %162

162:                                              ; preds = %160, %162
  %163 = phi i64 [ %168, %162 ], [ %161, %160 ]
  %164 = getelementptr inbounds i8, i8* %74, i64 %163
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = mul nsw i32 %166, %40
  %168 = add nuw nsw i64 %163, 1
  %169 = getelementptr inbounds i8, i8* %74, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = mul nsw i32 %171, %41
  %173 = add nsw i32 %172, %167
  %174 = add nuw nsw i64 %163, 2
  %175 = getelementptr inbounds i8, i8* %74, i64 %174
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = mul nsw i32 %177, %42
  %179 = add nsw i32 %178, %173
  %180 = add nuw nsw i64 %163, 3
  %181 = getelementptr inbounds i8, i8* %74, i64 %180
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = mul nsw i32 %183, %43
  %185 = add nsw i32 %184, %179
  %186 = add nuw nsw i64 %163, 4
  %187 = getelementptr inbounds i8, i8* %74, i64 %186
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = mul nsw i32 %189, %44
  %191 = add nsw i32 %190, %185
  %192 = add nuw nsw i64 %163, 5
  %193 = getelementptr inbounds i8, i8* %74, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  %196 = mul nsw i32 %195, %45
  %197 = add nsw i32 %196, %191
  %198 = add nuw nsw i64 %163, 6
  %199 = getelementptr inbounds i8, i8* %74, i64 %198
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i32
  %202 = mul nsw i32 %201, %46
  %203 = add nsw i32 %202, %197
  %204 = add nuw nsw i64 %163, 7
  %205 = getelementptr inbounds i8, i8* %74, i64 %204
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = mul nsw i32 %207, %47
  %209 = add nsw i32 %208, %203
  %210 = add nsw i32 %209, 2
  %211 = ashr i32 %210, 2
  %212 = add nsw i32 %211, 8
  %213 = ashr i32 %212, 4
  %214 = icmp slt i32 %213, 255
  %215 = select i1 %214, i32 %213, i32 255
  %216 = icmp sgt i32 %215, 0
  %217 = select i1 %216, i32 %215, i32 0
  %218 = trunc i32 %217 to i8
  %219 = getelementptr inbounds i8, i8* %75, i64 %163
  store i8 %218, i8* %219, align 1
  %220 = icmp slt i64 %168, %23
  br i1 %220, label %162, label %221, !llvm.loop !9

221:                                              ; preds = %162, %159
  %222 = getelementptr inbounds i8, i8* %74, i64 %1
  %223 = getelementptr inbounds i8, i8* %75, i64 %9
  %224 = add nuw nsw i32 %76, 1
  %225 = icmp slt i32 %224, %7
  %226 = add i64 %73, 1
  br i1 %225, label %72, label %227

227:                                              ; preds = %221
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_118ConvolveVertical_CILi8EhEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = icmp slt i32 %7, 5
  br i1 %11, label %12, label %17

12:                                               ; preds = %10
  %13 = and i32 %3, -3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = icmp eq i32 %3, 1
  br i1 %16, label %19, label %17

17:                                               ; preds = %15, %10
  %18 = sext i32 %3 to i64
  br label %19

19:                                               ; preds = %12, %15, %17
  %20 = phi i64 [ %18, %17 ], [ 4, %12 ], [ 5, %15 ]
  %21 = mul i64 %1, -3
  %22 = getelementptr inbounds i8, i8* %0, i64 %21
  %23 = sext i32 %5 to i64
  %24 = sext i32 %6 to i64
  %25 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 0
  %26 = load i8, i8* %25, align 8
  %27 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 2
  %30 = load i8, i8* %29, align 2
  %31 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 3
  %32 = load i8, i8* %31, align 1
  %33 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 4
  %34 = load i8, i8* %33, align 4
  %35 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 6
  %38 = load i8, i8* %37, align 2
  %39 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 7
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %26 to i32
  %42 = sext i8 %28 to i32
  %43 = sext i8 %30 to i32
  %44 = shl nsw i64 %1, 1
  %45 = sext i8 %32 to i32
  %46 = mul nsw i64 %1, 3
  %47 = sext i8 %34 to i32
  %48 = shl nsw i64 %1, 2
  %49 = sext i8 %36 to i32
  %50 = mul nsw i64 %1, 5
  %51 = sext i8 %38 to i32
  %52 = mul nsw i64 %1, 6
  %53 = sext i8 %40 to i32
  %54 = mul nsw i64 %1, 7
  %55 = icmp sgt i64 %24, 1
  %56 = select i1 %55, i64 %24, i64 1
  %57 = icmp sgt i64 %24, 1
  %58 = select i1 %57, i64 %24, i64 1
  %59 = shl i64 %1, 2
  %60 = add i64 %58, %59
  %61 = mul i64 %1, 3
  %62 = add i64 %58, %61
  %63 = shl i64 %1, 1
  %64 = add i64 %58, %63
  %65 = add i64 %58, %1
  %66 = sub i64 %58, %1
  %67 = mul i64 %1, -2
  %68 = sub i64 %58, %63
  %69 = sub i64 %58, %61
  %70 = icmp ult i64 %56, 16
  %71 = and i64 %56, 9223372036854775792
  %72 = insertelement <16 x i32> undef, i32 %41, i32 0
  %73 = shufflevector <16 x i32> %72, <16 x i32> undef, <16 x i32> zeroinitializer
  %74 = insertelement <16 x i32> undef, i32 %42, i32 0
  %75 = shufflevector <16 x i32> %74, <16 x i32> undef, <16 x i32> zeroinitializer
  %76 = insertelement <16 x i32> undef, i32 %43, i32 0
  %77 = shufflevector <16 x i32> %76, <16 x i32> undef, <16 x i32> zeroinitializer
  %78 = insertelement <16 x i32> undef, i32 %45, i32 0
  %79 = shufflevector <16 x i32> %78, <16 x i32> undef, <16 x i32> zeroinitializer
  %80 = insertelement <16 x i32> undef, i32 %47, i32 0
  %81 = shufflevector <16 x i32> %80, <16 x i32> undef, <16 x i32> zeroinitializer
  %82 = insertelement <16 x i32> undef, i32 %49, i32 0
  %83 = shufflevector <16 x i32> %82, <16 x i32> undef, <16 x i32> zeroinitializer
  %84 = insertelement <16 x i32> undef, i32 %51, i32 0
  %85 = shufflevector <16 x i32> %84, <16 x i32> undef, <16 x i32> zeroinitializer
  %86 = insertelement <16 x i32> undef, i32 %53, i32 0
  %87 = shufflevector <16 x i32> %86, <16 x i32> undef, <16 x i32> zeroinitializer
  %88 = icmp eq i64 %56, %71
  br label %89

89:                                               ; preds = %290, %19
  %90 = phi i64 [ %295, %290 ], [ 0, %19 ]
  %91 = phi i8* [ %291, %290 ], [ %22, %19 ]
  %92 = phi i8* [ %292, %290 ], [ %8, %19 ]
  %93 = phi i32 [ %293, %290 ], [ 0, %19 ]
  %94 = mul i64 %90, %9
  %95 = getelementptr i8, i8* %8, i64 %94
  %96 = add i64 %58, %94
  %97 = getelementptr i8, i8* %8, i64 %96
  %98 = mul i64 %90, %1
  br i1 %70, label %230, label %99

99:                                               ; preds = %89
  %100 = add i64 %69, %98
  %101 = getelementptr i8, i8* %0, i64 %100
  %102 = add i64 %21, %98
  %103 = getelementptr i8, i8* %0, i64 %102
  %104 = add i64 %68, %98
  %105 = getelementptr i8, i8* %0, i64 %104
  %106 = add i64 %67, %98
  %107 = getelementptr i8, i8* %0, i64 %106
  %108 = add i64 %66, %98
  %109 = getelementptr i8, i8* %0, i64 %108
  %110 = sub i64 %98, %1
  %111 = getelementptr i8, i8* %0, i64 %110
  %112 = add i64 %58, %98
  %113 = getelementptr i8, i8* %0, i64 %112
  %114 = getelementptr i8, i8* %0, i64 %98
  %115 = add i64 %65, %98
  %116 = getelementptr i8, i8* %0, i64 %115
  %117 = add i64 %98, %1
  %118 = getelementptr i8, i8* %0, i64 %117
  %119 = add i64 %64, %98
  %120 = getelementptr i8, i8* %0, i64 %119
  %121 = add i64 %63, %98
  %122 = getelementptr i8, i8* %0, i64 %121
  %123 = add i64 %62, %98
  %124 = getelementptr i8, i8* %0, i64 %123
  %125 = add i64 %61, %98
  %126 = getelementptr i8, i8* %0, i64 %125
  %127 = add i64 %60, %98
  %128 = getelementptr i8, i8* %0, i64 %127
  %129 = add i64 %59, %98
  %130 = getelementptr i8, i8* %0, i64 %129
  %131 = icmp ult i8* %95, %128
  %132 = icmp ult i8* %130, %97
  %133 = and i1 %131, %132
  %134 = icmp ult i8* %95, %124
  %135 = icmp ult i8* %126, %97
  %136 = and i1 %134, %135
  %137 = or i1 %133, %136
  %138 = icmp ult i8* %95, %120
  %139 = icmp ult i8* %122, %97
  %140 = and i1 %138, %139
  %141 = or i1 %137, %140
  %142 = icmp ult i8* %95, %116
  %143 = icmp ult i8* %118, %97
  %144 = and i1 %142, %143
  %145 = or i1 %141, %144
  %146 = icmp ult i8* %95, %113
  %147 = icmp ult i8* %114, %97
  %148 = and i1 %146, %147
  %149 = or i1 %145, %148
  %150 = icmp ult i8* %95, %109
  %151 = icmp ult i8* %111, %97
  %152 = and i1 %150, %151
  %153 = or i1 %149, %152
  %154 = icmp ult i8* %95, %105
  %155 = icmp ult i8* %107, %97
  %156 = and i1 %154, %155
  %157 = or i1 %153, %156
  %158 = icmp ult i8* %95, %101
  %159 = icmp ult i8* %103, %97
  %160 = and i1 %158, %159
  %161 = or i1 %157, %160
  br i1 %161, label %230, label %162

162:                                              ; preds = %99, %162
  %163 = phi i64 [ %227, %162 ], [ 0, %99 ]
  %164 = getelementptr inbounds i8, i8* %91, i64 %163
  %165 = bitcast i8* %164 to <16 x i8>*
  %166 = load <16 x i8>, <16 x i8>* %165, align 1, !alias.scope !10
  %167 = zext <16 x i8> %166 to <16 x i32>
  %168 = mul nsw <16 x i32> %73, %167
  %169 = add nsw i64 %163, %1
  %170 = getelementptr inbounds i8, i8* %91, i64 %169
  %171 = bitcast i8* %170 to <16 x i8>*
  %172 = load <16 x i8>, <16 x i8>* %171, align 1, !alias.scope !13
  %173 = zext <16 x i8> %172 to <16 x i32>
  %174 = mul nsw <16 x i32> %75, %173
  %175 = add nsw <16 x i32> %174, %168
  %176 = add nsw i64 %44, %163
  %177 = getelementptr inbounds i8, i8* %91, i64 %176
  %178 = bitcast i8* %177 to <16 x i8>*
  %179 = load <16 x i8>, <16 x i8>* %178, align 1, !alias.scope !15
  %180 = zext <16 x i8> %179 to <16 x i32>
  %181 = mul nsw <16 x i32> %77, %180
  %182 = add nsw <16 x i32> %181, %175
  %183 = add nsw i64 %46, %163
  %184 = getelementptr inbounds i8, i8* %91, i64 %183
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !17
  %187 = zext <16 x i8> %186 to <16 x i32>
  %188 = mul nsw <16 x i32> %79, %187
  %189 = add nsw <16 x i32> %188, %182
  %190 = add nsw i64 %48, %163
  %191 = getelementptr inbounds i8, i8* %91, i64 %190
  %192 = bitcast i8* %191 to <16 x i8>*
  %193 = load <16 x i8>, <16 x i8>* %192, align 1, !alias.scope !19
  %194 = zext <16 x i8> %193 to <16 x i32>
  %195 = mul nsw <16 x i32> %81, %194
  %196 = add nsw <16 x i32> %195, %189
  %197 = add nsw i64 %50, %163
  %198 = getelementptr inbounds i8, i8* %91, i64 %197
  %199 = bitcast i8* %198 to <16 x i8>*
  %200 = load <16 x i8>, <16 x i8>* %199, align 1, !alias.scope !21
  %201 = zext <16 x i8> %200 to <16 x i32>
  %202 = mul nsw <16 x i32> %83, %201
  %203 = add nsw <16 x i32> %202, %196
  %204 = add nsw i64 %52, %163
  %205 = getelementptr inbounds i8, i8* %91, i64 %204
  %206 = bitcast i8* %205 to <16 x i8>*
  %207 = load <16 x i8>, <16 x i8>* %206, align 1, !alias.scope !23
  %208 = zext <16 x i8> %207 to <16 x i32>
  %209 = mul nsw <16 x i32> %85, %208
  %210 = add nsw <16 x i32> %209, %203
  %211 = add nsw i64 %54, %163
  %212 = getelementptr inbounds i8, i8* %91, i64 %211
  %213 = bitcast i8* %212 to <16 x i8>*
  %214 = load <16 x i8>, <16 x i8>* %213, align 1, !alias.scope !25
  %215 = zext <16 x i8> %214 to <16 x i32>
  %216 = mul nsw <16 x i32> %87, %215
  %217 = add nsw <16 x i32> %216, %210
  %218 = add nsw <16 x i32> %217, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %219 = ashr <16 x i32> %218, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %220 = icmp slt <16 x i32> %219, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %221 = select <16 x i1> %220, <16 x i32> %219, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %222 = icmp sgt <16 x i32> %221, zeroinitializer
  %223 = select <16 x i1> %222, <16 x i32> %221, <16 x i32> zeroinitializer
  %224 = trunc <16 x i32> %223 to <16 x i8>
  %225 = getelementptr inbounds i8, i8* %92, i64 %163
  %226 = bitcast i8* %225 to <16 x i8>*
  store <16 x i8> %224, <16 x i8>* %226, align 1, !alias.scope !27, !noalias !29
  %227 = add i64 %163, 16
  %228 = icmp eq i64 %227, %71
  br i1 %228, label %229, label %162, !llvm.loop !30

229:                                              ; preds = %162
  br i1 %88, label %290, label %230

230:                                              ; preds = %229, %99, %89
  %231 = phi i64 [ 0, %99 ], [ 0, %89 ], [ %71, %229 ]
  br label %232

232:                                              ; preds = %230, %232
  %233 = phi i64 [ %288, %232 ], [ %231, %230 ]
  %234 = getelementptr inbounds i8, i8* %91, i64 %233
  %235 = load i8, i8* %234, align 1
  %236 = zext i8 %235 to i32
  %237 = mul nsw i32 %236, %41
  %238 = add nsw i64 %233, %1
  %239 = getelementptr inbounds i8, i8* %91, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i32
  %242 = mul nsw i32 %241, %42
  %243 = add nsw i32 %242, %237
  %244 = add nsw i64 %44, %233
  %245 = getelementptr inbounds i8, i8* %91, i64 %244
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i32
  %248 = mul nsw i32 %247, %43
  %249 = add nsw i32 %248, %243
  %250 = add nsw i64 %46, %233
  %251 = getelementptr inbounds i8, i8* %91, i64 %250
  %252 = load i8, i8* %251, align 1
  %253 = zext i8 %252 to i32
  %254 = mul nsw i32 %253, %45
  %255 = add nsw i32 %254, %249
  %256 = add nsw i64 %48, %233
  %257 = getelementptr inbounds i8, i8* %91, i64 %256
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i32
  %260 = mul nsw i32 %259, %47
  %261 = add nsw i32 %260, %255
  %262 = add nsw i64 %50, %233
  %263 = getelementptr inbounds i8, i8* %91, i64 %262
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %264 to i32
  %266 = mul nsw i32 %265, %49
  %267 = add nsw i32 %266, %261
  %268 = add nsw i64 %52, %233
  %269 = getelementptr inbounds i8, i8* %91, i64 %268
  %270 = load i8, i8* %269, align 1
  %271 = zext i8 %270 to i32
  %272 = mul nsw i32 %271, %51
  %273 = add nsw i32 %272, %267
  %274 = add nsw i64 %54, %233
  %275 = getelementptr inbounds i8, i8* %91, i64 %274
  %276 = load i8, i8* %275, align 1
  %277 = zext i8 %276 to i32
  %278 = mul nsw i32 %277, %53
  %279 = add nsw i32 %278, %273
  %280 = add nsw i32 %279, 32
  %281 = ashr i32 %280, 6
  %282 = icmp slt i32 %281, 255
  %283 = select i1 %282, i32 %281, i32 255
  %284 = icmp sgt i32 %283, 0
  %285 = select i1 %284, i32 %283, i32 0
  %286 = trunc i32 %285 to i8
  %287 = getelementptr inbounds i8, i8* %92, i64 %233
  store i8 %286, i8* %287, align 1
  %288 = add nuw nsw i64 %233, 1
  %289 = icmp slt i64 %288, %24
  br i1 %289, label %232, label %290, !llvm.loop !31

290:                                              ; preds = %232, %229
  %291 = getelementptr inbounds i8, i8* %91, i64 %1
  %292 = getelementptr inbounds i8, i8* %92, i64 %9
  %293 = add nuw nsw i32 %93, 1
  %294 = icmp slt i32 %293, %7
  %295 = add i64 %90, 1
  br i1 %294, label %89, label %296

296:                                              ; preds = %290
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_112Convolve2D_CILi8EhEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #0 {
  %11 = alloca [17280 x i16], align 16
  %12 = bitcast [17280 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 34560, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 34560, i1 false)
  %13 = icmp slt i32 %6, 5
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = and i32 %2, -3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %14
  %18 = icmp eq i32 %2, 1
  br i1 %18, label %21, label %19

19:                                               ; preds = %17, %10
  %20 = sext i32 %2 to i64
  br label %21

21:                                               ; preds = %14, %17, %19
  %22 = phi i64 [ %20, %19 ], [ 4, %14 ], [ 5, %17 ]
  %23 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 0
  %24 = mul i64 %1, -3
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = getelementptr inbounds i8, i8* %25, i64 -3
  %27 = sext i32 %4 to i64
  %28 = add nsw i32 %7, 6
  %29 = sext i32 %6 to i64
  %30 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 0
  %31 = load i8, i8* %30, align 8
  %32 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 1
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 2
  %35 = load i8, i8* %34, align 2
  %36 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 3
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 4
  %39 = load i8, i8* %38, align 4
  %40 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 5
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 6
  %43 = load i8, i8* %42, align 2
  %44 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 7
  %45 = load i8, i8* %44, align 1
  %46 = sext i8 %31 to i32
  %47 = sext i8 %33 to i32
  %48 = sext i8 %35 to i32
  %49 = sext i8 %37 to i32
  %50 = sext i8 %39 to i32
  %51 = sext i8 %41 to i32
  %52 = sext i8 %43 to i32
  %53 = sext i8 %45 to i32
  br label %54

54:                                               ; preds = %111, %21
  %55 = phi i16* [ %23, %21 ], [ %113, %111 ]
  %56 = phi i8* [ %26, %21 ], [ %112, %111 ]
  %57 = phi i32 [ 0, %21 ], [ %114, %111 ]
  %58 = load i8, i8* %56, align 1
  br label %59

59:                                               ; preds = %59, %54
  %60 = phi i8 [ %66, %59 ], [ %58, %54 ]
  %61 = phi i64 [ %64, %59 ], [ 0, %54 ]
  %62 = zext i8 %60 to i32
  %63 = mul nsw i32 %62, %46
  %64 = add nuw nsw i64 %61, 1
  %65 = getelementptr inbounds i8, i8* %56, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = mul nsw i32 %67, %47
  %69 = add nsw i32 %68, %63
  %70 = add nuw nsw i64 %61, 2
  %71 = getelementptr inbounds i8, i8* %56, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = mul nsw i32 %73, %48
  %75 = add nsw i32 %74, %69
  %76 = add nuw nsw i64 %61, 3
  %77 = getelementptr inbounds i8, i8* %56, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = mul nsw i32 %79, %49
  %81 = add nsw i32 %80, %75
  %82 = add nuw nsw i64 %61, 4
  %83 = getelementptr inbounds i8, i8* %56, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = mul nsw i32 %85, %50
  %87 = add nsw i32 %86, %81
  %88 = add nuw nsw i64 %61, 5
  %89 = getelementptr inbounds i8, i8* %56, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = mul nsw i32 %91, %51
  %93 = add nsw i32 %92, %87
  %94 = add nuw nsw i64 %61, 6
  %95 = getelementptr inbounds i8, i8* %56, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = mul nsw i32 %97, %52
  %99 = add nsw i32 %98, %93
  %100 = add nuw nsw i64 %61, 7
  %101 = getelementptr inbounds i8, i8* %56, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = mul nsw i32 %103, %53
  %105 = add nsw i32 %104, %99
  %106 = add nsw i32 %105, 2
  %107 = lshr i32 %106, 2
  %108 = trunc i32 %107 to i16
  %109 = getelementptr inbounds i16, i16* %55, i64 %61
  store i16 %108, i16* %109, align 2
  %110 = icmp slt i64 %64, %29
  br i1 %110, label %59, label %111

111:                                              ; preds = %59
  %112 = getelementptr inbounds i8, i8* %56, i64 %1
  %113 = getelementptr inbounds i16, i16* %55, i64 128
  %114 = add nuw nsw i32 %57, 1
  %115 = icmp slt i32 %57, %28
  br i1 %115, label %54, label %116

116:                                              ; preds = %111
  %117 = icmp slt i32 %7, 5
  br i1 %117, label %118, label %123

118:                                              ; preds = %116
  %119 = and i32 %3, -3
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %125, label %121

121:                                              ; preds = %118
  %122 = icmp eq i32 %3, 1
  br i1 %122, label %125, label %123

123:                                              ; preds = %121, %116
  %124 = sext i32 %3 to i64
  br label %125

125:                                              ; preds = %118, %121, %123
  %126 = phi i64 [ %124, %123 ], [ 4, %118 ], [ 5, %121 ]
  %127 = sext i32 %5 to i64
  %128 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %126, i64 %127, i64 0
  %129 = load i8, i8* %128, align 8
  %130 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %126, i64 %127, i64 1
  %131 = load i8, i8* %130, align 1
  %132 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %126, i64 %127, i64 2
  %133 = load i8, i8* %132, align 2
  %134 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %126, i64 %127, i64 3
  %135 = load i8, i8* %134, align 1
  %136 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %126, i64 %127, i64 4
  %137 = load i8, i8* %136, align 4
  %138 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %126, i64 %127, i64 5
  %139 = load i8, i8* %138, align 1
  %140 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %126, i64 %127, i64 6
  %141 = load i8, i8* %140, align 2
  %142 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %126, i64 %127, i64 7
  %143 = load i8, i8* %142, align 1
  %144 = sext i8 %129 to i32
  %145 = sext i8 %131 to i32
  %146 = sext i8 %133 to i32
  %147 = sext i8 %135 to i32
  %148 = sext i8 %137 to i32
  %149 = sext i8 %139 to i32
  %150 = sext i8 %141 to i32
  %151 = sext i8 %143 to i32
  %152 = icmp sgt i64 %29, 1
  %153 = select i1 %152, i64 %29, i64 1
  %154 = icmp ult i64 %153, 8
  %155 = and i64 %153, 9223372036854775800
  %156 = insertelement <8 x i32> undef, i32 %144, i32 0
  %157 = shufflevector <8 x i32> %156, <8 x i32> undef, <8 x i32> zeroinitializer
  %158 = insertelement <8 x i32> undef, i32 %145, i32 0
  %159 = shufflevector <8 x i32> %158, <8 x i32> undef, <8 x i32> zeroinitializer
  %160 = insertelement <8 x i32> undef, i32 %146, i32 0
  %161 = shufflevector <8 x i32> %160, <8 x i32> undef, <8 x i32> zeroinitializer
  %162 = insertelement <8 x i32> undef, i32 %147, i32 0
  %163 = shufflevector <8 x i32> %162, <8 x i32> undef, <8 x i32> zeroinitializer
  %164 = insertelement <8 x i32> undef, i32 %148, i32 0
  %165 = shufflevector <8 x i32> %164, <8 x i32> undef, <8 x i32> zeroinitializer
  %166 = insertelement <8 x i32> undef, i32 %149, i32 0
  %167 = shufflevector <8 x i32> %166, <8 x i32> undef, <8 x i32> zeroinitializer
  %168 = insertelement <8 x i32> undef, i32 %150, i32 0
  %169 = shufflevector <8 x i32> %168, <8 x i32> undef, <8 x i32> zeroinitializer
  %170 = insertelement <8 x i32> undef, i32 %151, i32 0
  %171 = shufflevector <8 x i32> %170, <8 x i32> undef, <8 x i32> zeroinitializer
  %172 = icmp eq i64 %153, %155
  br label %173

173:                                              ; preds = %319, %125
  %174 = phi i16* [ %23, %125 ], [ %321, %319 ]
  %175 = phi i8* [ %8, %125 ], [ %320, %319 ]
  %176 = phi i32 [ 0, %125 ], [ %322, %319 ]
  br i1 %154, label %252, label %177

177:                                              ; preds = %173, %177
  %178 = phi i64 [ %249, %177 ], [ 0, %173 ]
  %179 = getelementptr inbounds i16, i16* %174, i64 %178
  %180 = bitcast i16* %179 to <8 x i16>*
  %181 = load <8 x i16>, <8 x i16>* %180, align 2
  %182 = sext <8 x i16> %181 to <8 x i32>
  %183 = mul nsw <8 x i32> %157, %182
  %184 = add nuw i64 %178, 128
  %185 = and i64 %184, 4294967288
  %186 = getelementptr inbounds i16, i16* %174, i64 %185
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 2
  %189 = sext <8 x i16> %188 to <8 x i32>
  %190 = mul nsw <8 x i32> %159, %189
  %191 = add nsw <8 x i32> %190, %183
  %192 = add nuw i64 %178, 256
  %193 = and i64 %192, 4294967288
  %194 = getelementptr inbounds i16, i16* %174, i64 %193
  %195 = bitcast i16* %194 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 2
  %197 = sext <8 x i16> %196 to <8 x i32>
  %198 = mul nsw <8 x i32> %161, %197
  %199 = add nsw <8 x i32> %198, %191
  %200 = add nuw i64 %178, 384
  %201 = and i64 %200, 4294967288
  %202 = getelementptr inbounds i16, i16* %174, i64 %201
  %203 = bitcast i16* %202 to <8 x i16>*
  %204 = load <8 x i16>, <8 x i16>* %203, align 2
  %205 = sext <8 x i16> %204 to <8 x i32>
  %206 = mul nsw <8 x i32> %163, %205
  %207 = add nsw <8 x i32> %206, %199
  %208 = add nuw i64 %178, 512
  %209 = and i64 %208, 4294967288
  %210 = getelementptr inbounds i16, i16* %174, i64 %209
  %211 = bitcast i16* %210 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = sext <8 x i16> %212 to <8 x i32>
  %214 = mul nsw <8 x i32> %165, %213
  %215 = add nsw <8 x i32> %214, %207
  %216 = add nuw i64 %178, 640
  %217 = and i64 %216, 4294967288
  %218 = getelementptr inbounds i16, i16* %174, i64 %217
  %219 = bitcast i16* %218 to <8 x i16>*
  %220 = load <8 x i16>, <8 x i16>* %219, align 2
  %221 = sext <8 x i16> %220 to <8 x i32>
  %222 = mul nsw <8 x i32> %167, %221
  %223 = add nsw <8 x i32> %222, %215
  %224 = add nuw i64 %178, 768
  %225 = and i64 %224, 4294967288
  %226 = getelementptr inbounds i16, i16* %174, i64 %225
  %227 = bitcast i16* %226 to <8 x i16>*
  %228 = load <8 x i16>, <8 x i16>* %227, align 2
  %229 = sext <8 x i16> %228 to <8 x i32>
  %230 = mul nsw <8 x i32> %169, %229
  %231 = add nsw <8 x i32> %230, %223
  %232 = add nuw i64 %178, 896
  %233 = and i64 %232, 4294967288
  %234 = getelementptr inbounds i16, i16* %174, i64 %233
  %235 = bitcast i16* %234 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 2
  %237 = sext <8 x i16> %236 to <8 x i32>
  %238 = mul nsw <8 x i32> %171, %237
  %239 = add nsw <8 x i32> %238, %231
  %240 = add nsw <8 x i32> %239, <i32 512, i32 512, i32 512, i32 512, i32 512, i32 512, i32 512, i32 512>
  %241 = ashr <8 x i32> %240, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %242 = icmp slt <8 x i32> %241, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %243 = select <8 x i1> %242, <8 x i32> %241, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %244 = icmp sgt <8 x i32> %243, zeroinitializer
  %245 = select <8 x i1> %244, <8 x i32> %243, <8 x i32> zeroinitializer
  %246 = trunc <8 x i32> %245 to <8 x i8>
  %247 = getelementptr inbounds i8, i8* %175, i64 %178
  %248 = bitcast i8* %247 to <8 x i8>*
  store <8 x i8> %246, <8 x i8>* %248, align 1
  %249 = add i64 %178, 8
  %250 = icmp eq i64 %249, %155
  br i1 %250, label %251, label %177, !llvm.loop !32

251:                                              ; preds = %177
  br i1 %172, label %319, label %252

252:                                              ; preds = %251, %173
  %253 = phi i64 [ 0, %173 ], [ %155, %251 ]
  br label %254

254:                                              ; preds = %252, %254
  %255 = phi i64 [ %317, %254 ], [ %253, %252 ]
  %256 = getelementptr inbounds i16, i16* %174, i64 %255
  %257 = load i16, i16* %256, align 2
  %258 = sext i16 %257 to i32
  %259 = mul nsw i32 %258, %144
  %260 = add nuw i64 %255, 128
  %261 = and i64 %260, 4294967295
  %262 = getelementptr inbounds i16, i16* %174, i64 %261
  %263 = load i16, i16* %262, align 2
  %264 = sext i16 %263 to i32
  %265 = mul nsw i32 %264, %145
  %266 = add nsw i32 %265, %259
  %267 = add nuw i64 %255, 256
  %268 = and i64 %267, 4294967295
  %269 = getelementptr inbounds i16, i16* %174, i64 %268
  %270 = load i16, i16* %269, align 2
  %271 = sext i16 %270 to i32
  %272 = mul nsw i32 %271, %146
  %273 = add nsw i32 %272, %266
  %274 = add nuw i64 %255, 384
  %275 = and i64 %274, 4294967295
  %276 = getelementptr inbounds i16, i16* %174, i64 %275
  %277 = load i16, i16* %276, align 2
  %278 = sext i16 %277 to i32
  %279 = mul nsw i32 %278, %147
  %280 = add nsw i32 %279, %273
  %281 = add nuw i64 %255, 512
  %282 = and i64 %281, 4294967295
  %283 = getelementptr inbounds i16, i16* %174, i64 %282
  %284 = load i16, i16* %283, align 2
  %285 = sext i16 %284 to i32
  %286 = mul nsw i32 %285, %148
  %287 = add nsw i32 %286, %280
  %288 = add nuw i64 %255, 640
  %289 = and i64 %288, 4294967295
  %290 = getelementptr inbounds i16, i16* %174, i64 %289
  %291 = load i16, i16* %290, align 2
  %292 = sext i16 %291 to i32
  %293 = mul nsw i32 %292, %149
  %294 = add nsw i32 %293, %287
  %295 = add nuw i64 %255, 768
  %296 = and i64 %295, 4294967295
  %297 = getelementptr inbounds i16, i16* %174, i64 %296
  %298 = load i16, i16* %297, align 2
  %299 = sext i16 %298 to i32
  %300 = mul nsw i32 %299, %150
  %301 = add nsw i32 %300, %294
  %302 = add nuw i64 %255, 896
  %303 = and i64 %302, 4294967295
  %304 = getelementptr inbounds i16, i16* %174, i64 %303
  %305 = load i16, i16* %304, align 2
  %306 = sext i16 %305 to i32
  %307 = mul nsw i32 %306, %151
  %308 = add nsw i32 %307, %301
  %309 = add nsw i32 %308, 512
  %310 = ashr i32 %309, 10
  %311 = icmp slt i32 %310, 255
  %312 = select i1 %311, i32 %310, i32 255
  %313 = icmp sgt i32 %312, 0
  %314 = select i1 %313, i32 %312, i32 0
  %315 = trunc i32 %314 to i8
  %316 = getelementptr inbounds i8, i8* %175, i64 %255
  store i8 %315, i8* %316, align 1
  %317 = add nuw nsw i64 %255, 1
  %318 = icmp slt i64 %317, %29
  br i1 %318, label %254, label %319, !llvm.loop !33

319:                                              ; preds = %254, %251
  %320 = getelementptr inbounds i8, i8* %175, i64 %9
  %321 = getelementptr inbounds i16, i16* %174, i64 128
  %322 = add nuw nsw i32 %176, 1
  %323 = icmp slt i32 %322, %7
  br i1 %323, label %173, label %324

324:                                              ; preds = %319
  call void @llvm.lifetime.end.p0i8(i64 34560, i8* nonnull %12) #4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_122ConvolveCompoundCopy_CILi8EhEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = bitcast i8* %8 to i16*
  %12 = sext i32 %6 to i64
  %13 = icmp sgt i64 %12, 1
  %14 = select i1 %13, i64 %12, i64 1
  %15 = shl i64 %9, 1
  %16 = icmp sgt i64 %12, 1
  %17 = select i1 %16, i64 %12, i64 1
  %18 = shl nuw nsw i64 %17, 1
  %19 = and i64 %14, 9223372036854775792
  %20 = add nsw i64 %19, -16
  %21 = lshr exact i64 %20, 4
  %22 = add nuw nsw i64 %21, 1
  %23 = icmp ult i64 %14, 16
  %24 = and i64 %14, 9223372036854775792
  %25 = and i64 %22, 1
  %26 = icmp eq i64 %20, 0
  %27 = sub nuw nsw i64 %22, %25
  %28 = icmp eq i64 %25, 0
  %29 = icmp eq i64 %14, %24
  br label %30

30:                                               ; preds = %112, %10
  %31 = phi i64 [ %117, %112 ], [ 0, %10 ]
  %32 = phi i16* [ %114, %112 ], [ %11, %10 ]
  %33 = phi i32 [ %115, %112 ], [ 0, %10 ]
  %34 = phi i8* [ %113, %112 ], [ %0, %10 ]
  %35 = mul i64 %15, %31
  %36 = mul i64 %31, %1
  br i1 %23, label %101, label %37

37:                                               ; preds = %30
  %38 = add i64 %17, %36
  %39 = getelementptr i8, i8* %0, i64 %38
  %40 = getelementptr i8, i8* %0, i64 %36
  %41 = add i64 %18, %35
  %42 = getelementptr i8, i8* %8, i64 %41
  %43 = getelementptr i8, i8* %8, i64 %35
  %44 = icmp ult i8* %43, %39
  %45 = icmp ult i8* %40, %42
  %46 = and i1 %44, %45
  br i1 %46, label %101, label %47

47:                                               ; preds = %37
  br i1 %26, label %83, label %48

48:                                               ; preds = %47, %48
  %49 = phi i64 [ %80, %48 ], [ 0, %47 ]
  %50 = phi i64 [ %81, %48 ], [ %27, %47 ]
  %51 = getelementptr inbounds i8, i8* %34, i64 %49
  %52 = bitcast i8* %51 to <8 x i8>*
  %53 = load <8 x i8>, <8 x i8>* %52, align 1, !alias.scope !35
  %54 = getelementptr inbounds i8, i8* %51, i64 8
  %55 = bitcast i8* %54 to <8 x i8>*
  %56 = load <8 x i8>, <8 x i8>* %55, align 1, !alias.scope !35
  %57 = zext <8 x i8> %53 to <8 x i16>
  %58 = zext <8 x i8> %56 to <8 x i16>
  %59 = shl nuw nsw <8 x i16> %57, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %60 = shl nuw nsw <8 x i16> %58, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %61 = getelementptr inbounds i16, i16* %32, i64 %49
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %62, align 2, !alias.scope !38, !noalias !35
  %63 = getelementptr inbounds i16, i16* %61, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %64, align 2, !alias.scope !38, !noalias !35
  %65 = or i64 %49, 16
  %66 = getelementptr inbounds i8, i8* %34, i64 %65
  %67 = bitcast i8* %66 to <8 x i8>*
  %68 = load <8 x i8>, <8 x i8>* %67, align 1, !alias.scope !35
  %69 = getelementptr inbounds i8, i8* %66, i64 8
  %70 = bitcast i8* %69 to <8 x i8>*
  %71 = load <8 x i8>, <8 x i8>* %70, align 1, !alias.scope !35
  %72 = zext <8 x i8> %68 to <8 x i16>
  %73 = zext <8 x i8> %71 to <8 x i16>
  %74 = shl nuw nsw <8 x i16> %72, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %75 = shl nuw nsw <8 x i16> %73, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %76 = getelementptr inbounds i16, i16* %32, i64 %65
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %77, align 2, !alias.scope !38, !noalias !35
  %78 = getelementptr inbounds i16, i16* %76, i64 8
  %79 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %79, align 2, !alias.scope !38, !noalias !35
  %80 = add i64 %49, 32
  %81 = add i64 %50, -2
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %48, !llvm.loop !40

83:                                               ; preds = %48, %47
  %84 = phi i64 [ 0, %47 ], [ %80, %48 ]
  br i1 %28, label %100, label %85

85:                                               ; preds = %83
  %86 = getelementptr inbounds i8, i8* %34, i64 %84
  %87 = bitcast i8* %86 to <8 x i8>*
  %88 = load <8 x i8>, <8 x i8>* %87, align 1, !alias.scope !35
  %89 = getelementptr inbounds i8, i8* %86, i64 8
  %90 = bitcast i8* %89 to <8 x i8>*
  %91 = load <8 x i8>, <8 x i8>* %90, align 1, !alias.scope !35
  %92 = zext <8 x i8> %88 to <8 x i16>
  %93 = zext <8 x i8> %91 to <8 x i16>
  %94 = shl nuw nsw <8 x i16> %92, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %95 = shl nuw nsw <8 x i16> %93, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %96 = getelementptr inbounds i16, i16* %32, i64 %84
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %97, align 2, !alias.scope !38, !noalias !35
  %98 = getelementptr inbounds i16, i16* %96, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %99, align 2, !alias.scope !38, !noalias !35
  br label %100

100:                                              ; preds = %83, %85
  br i1 %29, label %112, label %101

101:                                              ; preds = %100, %37, %30
  %102 = phi i64 [ 0, %37 ], [ 0, %30 ], [ %24, %100 ]
  br label %103

103:                                              ; preds = %101, %103
  %104 = phi i64 [ %110, %103 ], [ %102, %101 ]
  %105 = getelementptr inbounds i8, i8* %34, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i16
  %108 = shl nuw nsw i16 %107, 4
  %109 = getelementptr inbounds i16, i16* %32, i64 %104
  store i16 %108, i16* %109, align 2
  %110 = add nuw nsw i64 %104, 1
  %111 = icmp slt i64 %110, %12
  br i1 %111, label %103, label %112, !llvm.loop !41

112:                                              ; preds = %103, %100
  %113 = getelementptr inbounds i8, i8* %34, i64 %1
  %114 = getelementptr inbounds i16, i16* %32, i64 %9
  %115 = add nuw nsw i32 %33, 1
  %116 = icmp slt i32 %115, %7
  %117 = add i64 %31, 1
  br i1 %116, label %30, label %118

118:                                              ; preds = %112
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_128ConvolveCompoundHorizontal_CILi8EhEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = icmp slt i32 %6, 5
  br i1 %11, label %12, label %17

12:                                               ; preds = %10
  %13 = and i32 %2, -3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = icmp eq i32 %2, 1
  br i1 %16, label %19, label %17

17:                                               ; preds = %15, %10
  %18 = sext i32 %2 to i64
  br label %19

19:                                               ; preds = %12, %15, %17
  %20 = phi i64 [ %18, %17 ], [ 4, %12 ], [ 5, %15 ]
  %21 = getelementptr inbounds i8, i8* %0, i64 -3
  %22 = bitcast i8* %8 to i16*
  %23 = sext i32 %4 to i64
  %24 = sext i32 %6 to i64
  %25 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 0
  %26 = load i8, i8* %25, align 8
  %27 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 2
  %30 = load i8, i8* %29, align 2
  %31 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 3
  %32 = load i8, i8* %31, align 1
  %33 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 4
  %34 = load i8, i8* %33, align 4
  %35 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 6
  %38 = load i8, i8* %37, align 2
  %39 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %23, i64 7
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %26 to i32
  %42 = sext i8 %28 to i32
  %43 = sext i8 %30 to i32
  %44 = sext i8 %32 to i32
  %45 = sext i8 %34 to i32
  %46 = sext i8 %36 to i32
  %47 = sext i8 %38 to i32
  %48 = sext i8 %40 to i32
  %49 = icmp sgt i64 %24, 1
  %50 = select i1 %49, i64 %24, i64 1
  %51 = shl i64 %9, 1
  %52 = icmp sgt i64 %24, 1
  %53 = select i1 %52, i64 %24, i64 1
  %54 = shl nuw nsw i64 %53, 1
  %55 = add nuw nsw i64 %53, 4
  %56 = icmp ult i64 %50, 8
  %57 = and i64 %50, 9223372036854775800
  %58 = insertelement <8 x i32> undef, i32 %41, i32 0
  %59 = shufflevector <8 x i32> %58, <8 x i32> undef, <8 x i32> zeroinitializer
  %60 = insertelement <8 x i32> undef, i32 %42, i32 0
  %61 = shufflevector <8 x i32> %60, <8 x i32> undef, <8 x i32> zeroinitializer
  %62 = insertelement <8 x i32> undef, i32 %43, i32 0
  %63 = shufflevector <8 x i32> %62, <8 x i32> undef, <8 x i32> zeroinitializer
  %64 = insertelement <8 x i32> undef, i32 %44, i32 0
  %65 = shufflevector <8 x i32> %64, <8 x i32> undef, <8 x i32> zeroinitializer
  %66 = insertelement <8 x i32> undef, i32 %45, i32 0
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <8 x i32> zeroinitializer
  %68 = insertelement <8 x i32> undef, i32 %46, i32 0
  %69 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> zeroinitializer
  %70 = insertelement <8 x i32> undef, i32 %47, i32 0
  %71 = shufflevector <8 x i32> %70, <8 x i32> undef, <8 x i32> zeroinitializer
  %72 = insertelement <8 x i32> undef, i32 %48, i32 0
  %73 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> zeroinitializer
  %74 = icmp eq i64 %50, %57
  br label %75

75:                                               ; preds = %212, %19
  %76 = phi i64 [ %217, %212 ], [ 0, %19 ]
  %77 = phi i8* [ %213, %212 ], [ %21, %19 ]
  %78 = phi i16* [ %214, %212 ], [ %22, %19 ]
  %79 = phi i32 [ %215, %212 ], [ 0, %19 ]
  %80 = mul i64 %51, %76
  %81 = mul i64 %76, %1
  br i1 %56, label %157, label %82

82:                                               ; preds = %75
  %83 = add i64 %55, %81
  %84 = getelementptr i8, i8* %0, i64 %83
  %85 = add i64 %81, -3
  %86 = getelementptr i8, i8* %0, i64 %85
  %87 = add i64 %54, %80
  %88 = getelementptr i8, i8* %8, i64 %87
  %89 = getelementptr i8, i8* %8, i64 %80
  %90 = icmp ult i8* %89, %84
  %91 = icmp ult i8* %86, %88
  %92 = and i1 %90, %91
  br i1 %92, label %157, label %93

93:                                               ; preds = %82, %93
  %94 = phi i64 [ %154, %93 ], [ 0, %82 ]
  %95 = getelementptr inbounds i8, i8* %77, i64 %94
  %96 = bitcast i8* %95 to <8 x i8>*
  %97 = load <8 x i8>, <8 x i8>* %96, align 1, !alias.scope !42
  %98 = zext <8 x i8> %97 to <8 x i32>
  %99 = mul nsw <8 x i32> %59, %98
  %100 = or i64 %94, 1
  %101 = getelementptr inbounds i8, i8* %77, i64 %100
  %102 = bitcast i8* %101 to <8 x i8>*
  %103 = load <8 x i8>, <8 x i8>* %102, align 1, !alias.scope !42
  %104 = zext <8 x i8> %103 to <8 x i32>
  %105 = mul nsw <8 x i32> %61, %104
  %106 = add nsw <8 x i32> %105, %99
  %107 = or i64 %94, 2
  %108 = getelementptr inbounds i8, i8* %77, i64 %107
  %109 = bitcast i8* %108 to <8 x i8>*
  %110 = load <8 x i8>, <8 x i8>* %109, align 1, !alias.scope !42
  %111 = zext <8 x i8> %110 to <8 x i32>
  %112 = mul nsw <8 x i32> %63, %111
  %113 = add nsw <8 x i32> %112, %106
  %114 = or i64 %94, 3
  %115 = getelementptr inbounds i8, i8* %77, i64 %114
  %116 = bitcast i8* %115 to <8 x i8>*
  %117 = load <8 x i8>, <8 x i8>* %116, align 1, !alias.scope !42
  %118 = zext <8 x i8> %117 to <8 x i32>
  %119 = mul nsw <8 x i32> %65, %118
  %120 = add nsw <8 x i32> %119, %113
  %121 = or i64 %94, 4
  %122 = getelementptr inbounds i8, i8* %77, i64 %121
  %123 = bitcast i8* %122 to <8 x i8>*
  %124 = load <8 x i8>, <8 x i8>* %123, align 1, !alias.scope !42
  %125 = zext <8 x i8> %124 to <8 x i32>
  %126 = mul nsw <8 x i32> %67, %125
  %127 = add nsw <8 x i32> %126, %120
  %128 = or i64 %94, 5
  %129 = getelementptr inbounds i8, i8* %77, i64 %128
  %130 = bitcast i8* %129 to <8 x i8>*
  %131 = load <8 x i8>, <8 x i8>* %130, align 1, !alias.scope !42
  %132 = zext <8 x i8> %131 to <8 x i32>
  %133 = mul nsw <8 x i32> %69, %132
  %134 = add nsw <8 x i32> %133, %127
  %135 = or i64 %94, 6
  %136 = getelementptr inbounds i8, i8* %77, i64 %135
  %137 = bitcast i8* %136 to <8 x i8>*
  %138 = load <8 x i8>, <8 x i8>* %137, align 1, !alias.scope !42
  %139 = zext <8 x i8> %138 to <8 x i32>
  %140 = mul nsw <8 x i32> %71, %139
  %141 = add nsw <8 x i32> %140, %134
  %142 = or i64 %94, 7
  %143 = getelementptr inbounds i8, i8* %77, i64 %142
  %144 = bitcast i8* %143 to <8 x i8>*
  %145 = load <8 x i8>, <8 x i8>* %144, align 1, !alias.scope !42
  %146 = zext <8 x i8> %145 to <8 x i32>
  %147 = mul nsw <8 x i32> %73, %146
  %148 = add nsw <8 x i32> %147, %141
  %149 = add nsw <8 x i32> %148, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %150 = lshr <8 x i32> %149, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %151 = trunc <8 x i32> %150 to <8 x i16>
  %152 = getelementptr inbounds i16, i16* %78, i64 %94
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %153, align 2, !alias.scope !45, !noalias !42
  %154 = add i64 %94, 8
  %155 = icmp eq i64 %154, %57
  br i1 %155, label %156, label %93, !llvm.loop !47

156:                                              ; preds = %93
  br i1 %74, label %212, label %157

157:                                              ; preds = %156, %82, %75
  %158 = phi i64 [ 0, %82 ], [ 0, %75 ], [ %57, %156 ]
  br label %159

159:                                              ; preds = %157, %159
  %160 = phi i64 [ %165, %159 ], [ %158, %157 ]
  %161 = getelementptr inbounds i8, i8* %77, i64 %160
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = mul nsw i32 %163, %41
  %165 = add nuw nsw i64 %160, 1
  %166 = getelementptr inbounds i8, i8* %77, i64 %165
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = mul nsw i32 %168, %42
  %170 = add nsw i32 %169, %164
  %171 = add nuw nsw i64 %160, 2
  %172 = getelementptr inbounds i8, i8* %77, i64 %171
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = mul nsw i32 %174, %43
  %176 = add nsw i32 %175, %170
  %177 = add nuw nsw i64 %160, 3
  %178 = getelementptr inbounds i8, i8* %77, i64 %177
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = mul nsw i32 %180, %44
  %182 = add nsw i32 %181, %176
  %183 = add nuw nsw i64 %160, 4
  %184 = getelementptr inbounds i8, i8* %77, i64 %183
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = mul nsw i32 %186, %45
  %188 = add nsw i32 %187, %182
  %189 = add nuw nsw i64 %160, 5
  %190 = getelementptr inbounds i8, i8* %77, i64 %189
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = mul nsw i32 %192, %46
  %194 = add nsw i32 %193, %188
  %195 = add nuw nsw i64 %160, 6
  %196 = getelementptr inbounds i8, i8* %77, i64 %195
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i32
  %199 = mul nsw i32 %198, %47
  %200 = add nsw i32 %199, %194
  %201 = add nuw nsw i64 %160, 7
  %202 = getelementptr inbounds i8, i8* %77, i64 %201
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i32
  %205 = mul nsw i32 %204, %48
  %206 = add nsw i32 %205, %200
  %207 = add nsw i32 %206, 2
  %208 = lshr i32 %207, 2
  %209 = trunc i32 %208 to i16
  %210 = getelementptr inbounds i16, i16* %78, i64 %160
  store i16 %209, i16* %210, align 2
  %211 = icmp slt i64 %165, %24
  br i1 %211, label %159, label %212, !llvm.loop !48

212:                                              ; preds = %159, %156
  %213 = getelementptr inbounds i8, i8* %77, i64 %1
  %214 = getelementptr inbounds i16, i16* %78, i64 %9
  %215 = add nuw nsw i32 %79, 1
  %216 = icmp slt i32 %215, %7
  %217 = add i64 %76, 1
  br i1 %216, label %75, label %218

218:                                              ; preds = %212
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveCompoundVertical_CILi8EhEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = icmp slt i32 %7, 5
  br i1 %11, label %12, label %17

12:                                               ; preds = %10
  %13 = and i32 %3, -3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = icmp eq i32 %3, 1
  br i1 %16, label %19, label %17

17:                                               ; preds = %15, %10
  %18 = sext i32 %3 to i64
  br label %19

19:                                               ; preds = %12, %15, %17
  %20 = phi i64 [ %18, %17 ], [ 4, %12 ], [ 5, %15 ]
  %21 = mul i64 %1, -3
  %22 = getelementptr inbounds i8, i8* %0, i64 %21
  %23 = bitcast i8* %8 to i16*
  %24 = sext i32 %5 to i64
  %25 = sext i32 %6 to i64
  %26 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %24, i64 0
  %27 = load i8, i8* %26, align 8
  %28 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %24, i64 1
  %29 = load i8, i8* %28, align 1
  %30 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %24, i64 2
  %31 = load i8, i8* %30, align 2
  %32 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %24, i64 3
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %24, i64 4
  %35 = load i8, i8* %34, align 4
  %36 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %24, i64 5
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %24, i64 6
  %39 = load i8, i8* %38, align 2
  %40 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %24, i64 7
  %41 = load i8, i8* %40, align 1
  %42 = sext i8 %27 to i32
  %43 = sext i8 %29 to i32
  %44 = sext i8 %31 to i32
  %45 = shl nsw i64 %1, 1
  %46 = sext i8 %33 to i32
  %47 = mul nsw i64 %1, 3
  %48 = sext i8 %35 to i32
  %49 = shl nsw i64 %1, 2
  %50 = sext i8 %37 to i32
  %51 = mul nsw i64 %1, 5
  %52 = sext i8 %39 to i32
  %53 = mul nsw i64 %1, 6
  %54 = sext i8 %41 to i32
  %55 = mul nsw i64 %1, 7
  %56 = icmp sgt i64 %25, 1
  %57 = select i1 %56, i64 %25, i64 1
  %58 = shl i64 %9, 1
  %59 = icmp sgt i64 %25, 1
  %60 = select i1 %59, i64 %25, i64 1
  %61 = shl nuw nsw i64 %60, 1
  %62 = shl i64 %1, 2
  %63 = add i64 %60, %62
  %64 = mul i64 %1, 3
  %65 = add i64 %60, %64
  %66 = shl i64 %1, 1
  %67 = add i64 %60, %66
  %68 = add i64 %60, %1
  %69 = sub i64 %60, %1
  %70 = mul i64 %1, -2
  %71 = sub i64 %60, %66
  %72 = sub i64 %60, %64
  %73 = icmp ult i64 %57, 8
  %74 = and i64 %57, 9223372036854775800
  %75 = insertelement <8 x i32> undef, i32 %42, i32 0
  %76 = shufflevector <8 x i32> %75, <8 x i32> undef, <8 x i32> zeroinitializer
  %77 = insertelement <8 x i32> undef, i32 %43, i32 0
  %78 = shufflevector <8 x i32> %77, <8 x i32> undef, <8 x i32> zeroinitializer
  %79 = insertelement <8 x i32> undef, i32 %44, i32 0
  %80 = shufflevector <8 x i32> %79, <8 x i32> undef, <8 x i32> zeroinitializer
  %81 = insertelement <8 x i32> undef, i32 %46, i32 0
  %82 = shufflevector <8 x i32> %81, <8 x i32> undef, <8 x i32> zeroinitializer
  %83 = insertelement <8 x i32> undef, i32 %48, i32 0
  %84 = shufflevector <8 x i32> %83, <8 x i32> undef, <8 x i32> zeroinitializer
  %85 = insertelement <8 x i32> undef, i32 %50, i32 0
  %86 = shufflevector <8 x i32> %85, <8 x i32> undef, <8 x i32> zeroinitializer
  %87 = insertelement <8 x i32> undef, i32 %52, i32 0
  %88 = shufflevector <8 x i32> %87, <8 x i32> undef, <8 x i32> zeroinitializer
  %89 = insertelement <8 x i32> undef, i32 %54, i32 0
  %90 = shufflevector <8 x i32> %89, <8 x i32> undef, <8 x i32> zeroinitializer
  %91 = icmp eq i64 %57, %74
  br label %92

92:                                               ; preds = %285, %19
  %93 = phi i64 [ %290, %285 ], [ 0, %19 ]
  %94 = phi i8* [ %286, %285 ], [ %22, %19 ]
  %95 = phi i16* [ %287, %285 ], [ %23, %19 ]
  %96 = phi i32 [ %288, %285 ], [ 0, %19 ]
  %97 = mul i64 %58, %93
  %98 = getelementptr i8, i8* %8, i64 %97
  %99 = add i64 %61, %97
  %100 = getelementptr i8, i8* %8, i64 %99
  %101 = mul i64 %93, %1
  br i1 %73, label %229, label %102

102:                                              ; preds = %92
  %103 = add i64 %72, %101
  %104 = getelementptr i8, i8* %0, i64 %103
  %105 = add i64 %21, %101
  %106 = getelementptr i8, i8* %0, i64 %105
  %107 = add i64 %71, %101
  %108 = getelementptr i8, i8* %0, i64 %107
  %109 = add i64 %70, %101
  %110 = getelementptr i8, i8* %0, i64 %109
  %111 = add i64 %69, %101
  %112 = getelementptr i8, i8* %0, i64 %111
  %113 = sub i64 %101, %1
  %114 = getelementptr i8, i8* %0, i64 %113
  %115 = add i64 %60, %101
  %116 = getelementptr i8, i8* %0, i64 %115
  %117 = getelementptr i8, i8* %0, i64 %101
  %118 = add i64 %68, %101
  %119 = getelementptr i8, i8* %0, i64 %118
  %120 = add i64 %101, %1
  %121 = getelementptr i8, i8* %0, i64 %120
  %122 = add i64 %67, %101
  %123 = getelementptr i8, i8* %0, i64 %122
  %124 = add i64 %66, %101
  %125 = getelementptr i8, i8* %0, i64 %124
  %126 = add i64 %65, %101
  %127 = getelementptr i8, i8* %0, i64 %126
  %128 = add i64 %64, %101
  %129 = getelementptr i8, i8* %0, i64 %128
  %130 = add i64 %63, %101
  %131 = getelementptr i8, i8* %0, i64 %130
  %132 = add i64 %62, %101
  %133 = getelementptr i8, i8* %0, i64 %132
  %134 = icmp ult i8* %98, %131
  %135 = icmp ult i8* %133, %100
  %136 = and i1 %134, %135
  %137 = icmp ult i8* %98, %127
  %138 = icmp ult i8* %129, %100
  %139 = and i1 %137, %138
  %140 = or i1 %136, %139
  %141 = icmp ult i8* %98, %123
  %142 = icmp ult i8* %125, %100
  %143 = and i1 %141, %142
  %144 = or i1 %140, %143
  %145 = icmp ult i8* %98, %119
  %146 = icmp ult i8* %121, %100
  %147 = and i1 %145, %146
  %148 = or i1 %144, %147
  %149 = icmp ult i8* %98, %116
  %150 = icmp ult i8* %117, %100
  %151 = and i1 %149, %150
  %152 = or i1 %148, %151
  %153 = icmp ult i8* %98, %112
  %154 = icmp ult i8* %114, %100
  %155 = and i1 %153, %154
  %156 = or i1 %152, %155
  %157 = icmp ult i8* %98, %108
  %158 = icmp ult i8* %110, %100
  %159 = and i1 %157, %158
  %160 = or i1 %156, %159
  %161 = icmp ult i8* %98, %104
  %162 = icmp ult i8* %106, %100
  %163 = and i1 %161, %162
  %164 = or i1 %160, %163
  br i1 %164, label %229, label %165

165:                                              ; preds = %102, %165
  %166 = phi i64 [ %226, %165 ], [ 0, %102 ]
  %167 = getelementptr inbounds i8, i8* %94, i64 %166
  %168 = bitcast i8* %167 to <8 x i8>*
  %169 = load <8 x i8>, <8 x i8>* %168, align 1, !alias.scope !49
  %170 = zext <8 x i8> %169 to <8 x i32>
  %171 = mul nsw <8 x i32> %76, %170
  %172 = add nsw i64 %166, %1
  %173 = getelementptr inbounds i8, i8* %94, i64 %172
  %174 = bitcast i8* %173 to <8 x i8>*
  %175 = load <8 x i8>, <8 x i8>* %174, align 1, !alias.scope !52
  %176 = zext <8 x i8> %175 to <8 x i32>
  %177 = mul nsw <8 x i32> %78, %176
  %178 = add nsw <8 x i32> %177, %171
  %179 = add nsw i64 %45, %166
  %180 = getelementptr inbounds i8, i8* %94, i64 %179
  %181 = bitcast i8* %180 to <8 x i8>*
  %182 = load <8 x i8>, <8 x i8>* %181, align 1, !alias.scope !54
  %183 = zext <8 x i8> %182 to <8 x i32>
  %184 = mul nsw <8 x i32> %80, %183
  %185 = add nsw <8 x i32> %184, %178
  %186 = add nsw i64 %47, %166
  %187 = getelementptr inbounds i8, i8* %94, i64 %186
  %188 = bitcast i8* %187 to <8 x i8>*
  %189 = load <8 x i8>, <8 x i8>* %188, align 1, !alias.scope !56
  %190 = zext <8 x i8> %189 to <8 x i32>
  %191 = mul nsw <8 x i32> %82, %190
  %192 = add nsw <8 x i32> %191, %185
  %193 = add nsw i64 %49, %166
  %194 = getelementptr inbounds i8, i8* %94, i64 %193
  %195 = bitcast i8* %194 to <8 x i8>*
  %196 = load <8 x i8>, <8 x i8>* %195, align 1, !alias.scope !58
  %197 = zext <8 x i8> %196 to <8 x i32>
  %198 = mul nsw <8 x i32> %84, %197
  %199 = add nsw <8 x i32> %198, %192
  %200 = add nsw i64 %51, %166
  %201 = getelementptr inbounds i8, i8* %94, i64 %200
  %202 = bitcast i8* %201 to <8 x i8>*
  %203 = load <8 x i8>, <8 x i8>* %202, align 1, !alias.scope !60
  %204 = zext <8 x i8> %203 to <8 x i32>
  %205 = mul nsw <8 x i32> %86, %204
  %206 = add nsw <8 x i32> %205, %199
  %207 = add nsw i64 %53, %166
  %208 = getelementptr inbounds i8, i8* %94, i64 %207
  %209 = bitcast i8* %208 to <8 x i8>*
  %210 = load <8 x i8>, <8 x i8>* %209, align 1, !alias.scope !62
  %211 = zext <8 x i8> %210 to <8 x i32>
  %212 = mul nsw <8 x i32> %88, %211
  %213 = add nsw <8 x i32> %212, %206
  %214 = add nsw i64 %55, %166
  %215 = getelementptr inbounds i8, i8* %94, i64 %214
  %216 = bitcast i8* %215 to <8 x i8>*
  %217 = load <8 x i8>, <8 x i8>* %216, align 1, !alias.scope !64
  %218 = zext <8 x i8> %217 to <8 x i32>
  %219 = mul nsw <8 x i32> %90, %218
  %220 = add nsw <8 x i32> %219, %213
  %221 = add nsw <8 x i32> %220, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %222 = lshr <8 x i32> %221, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %223 = trunc <8 x i32> %222 to <8 x i16>
  %224 = getelementptr inbounds i16, i16* %95, i64 %166
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %225, align 2, !alias.scope !66, !noalias !68
  %226 = add i64 %166, 8
  %227 = icmp eq i64 %226, %74
  br i1 %227, label %228, label %165, !llvm.loop !69

228:                                              ; preds = %165
  br i1 %91, label %285, label %229

229:                                              ; preds = %228, %102, %92
  %230 = phi i64 [ 0, %102 ], [ 0, %92 ], [ %74, %228 ]
  br label %231

231:                                              ; preds = %229, %231
  %232 = phi i64 [ %283, %231 ], [ %230, %229 ]
  %233 = getelementptr inbounds i8, i8* %94, i64 %232
  %234 = load i8, i8* %233, align 1
  %235 = zext i8 %234 to i32
  %236 = mul nsw i32 %235, %42
  %237 = add nsw i64 %232, %1
  %238 = getelementptr inbounds i8, i8* %94, i64 %237
  %239 = load i8, i8* %238, align 1
  %240 = zext i8 %239 to i32
  %241 = mul nsw i32 %240, %43
  %242 = add nsw i32 %241, %236
  %243 = add nsw i64 %45, %232
  %244 = getelementptr inbounds i8, i8* %94, i64 %243
  %245 = load i8, i8* %244, align 1
  %246 = zext i8 %245 to i32
  %247 = mul nsw i32 %246, %44
  %248 = add nsw i32 %247, %242
  %249 = add nsw i64 %47, %232
  %250 = getelementptr inbounds i8, i8* %94, i64 %249
  %251 = load i8, i8* %250, align 1
  %252 = zext i8 %251 to i32
  %253 = mul nsw i32 %252, %46
  %254 = add nsw i32 %253, %248
  %255 = add nsw i64 %49, %232
  %256 = getelementptr inbounds i8, i8* %94, i64 %255
  %257 = load i8, i8* %256, align 1
  %258 = zext i8 %257 to i32
  %259 = mul nsw i32 %258, %48
  %260 = add nsw i32 %259, %254
  %261 = add nsw i64 %51, %232
  %262 = getelementptr inbounds i8, i8* %94, i64 %261
  %263 = load i8, i8* %262, align 1
  %264 = zext i8 %263 to i32
  %265 = mul nsw i32 %264, %50
  %266 = add nsw i32 %265, %260
  %267 = add nsw i64 %53, %232
  %268 = getelementptr inbounds i8, i8* %94, i64 %267
  %269 = load i8, i8* %268, align 1
  %270 = zext i8 %269 to i32
  %271 = mul nsw i32 %270, %52
  %272 = add nsw i32 %271, %266
  %273 = add nsw i64 %55, %232
  %274 = getelementptr inbounds i8, i8* %94, i64 %273
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i32
  %277 = mul nsw i32 %276, %54
  %278 = add nsw i32 %277, %272
  %279 = add nsw i32 %278, 2
  %280 = lshr i32 %279, 2
  %281 = trunc i32 %280 to i16
  %282 = getelementptr inbounds i16, i16* %95, i64 %232
  store i16 %281, i16* %282, align 2
  %283 = add nuw nsw i64 %232, 1
  %284 = icmp slt i64 %283, %25
  br i1 %284, label %231, label %285, !llvm.loop !70

285:                                              ; preds = %231, %228
  %286 = getelementptr inbounds i8, i8* %94, i64 %1
  %287 = getelementptr inbounds i16, i16* %95, i64 %9
  %288 = add nuw nsw i32 %96, 1
  %289 = icmp slt i32 %288, %7
  %290 = add i64 %93, 1
  br i1 %289, label %92, label %291

291:                                              ; preds = %285
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_120ConvolveCompound2D_CILi8EhEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #0 {
  %11 = alloca [17280 x i16], align 16
  %12 = bitcast [17280 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 34560, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 34560, i1 false)
  %13 = icmp slt i32 %6, 5
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = and i32 %2, -3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %14
  %18 = icmp eq i32 %2, 1
  br i1 %18, label %21, label %19

19:                                               ; preds = %17, %10
  %20 = sext i32 %2 to i64
  br label %21

21:                                               ; preds = %14, %17, %19
  %22 = phi i64 [ %20, %19 ], [ 4, %14 ], [ 5, %17 ]
  %23 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 0
  %24 = mul i64 %1, -3
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = getelementptr inbounds i8, i8* %25, i64 -3
  %27 = sext i32 %4 to i64
  %28 = add nsw i32 %7, 6
  %29 = sext i32 %6 to i64
  %30 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 0
  %31 = load i8, i8* %30, align 8
  %32 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 1
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 2
  %35 = load i8, i8* %34, align 2
  %36 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 3
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 4
  %39 = load i8, i8* %38, align 4
  %40 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 5
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 6
  %43 = load i8, i8* %42, align 2
  %44 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %27, i64 7
  %45 = load i8, i8* %44, align 1
  %46 = sext i8 %31 to i32
  %47 = sext i8 %33 to i32
  %48 = sext i8 %35 to i32
  %49 = sext i8 %37 to i32
  %50 = sext i8 %39 to i32
  %51 = sext i8 %41 to i32
  %52 = sext i8 %43 to i32
  %53 = sext i8 %45 to i32
  br label %54

54:                                               ; preds = %111, %21
  %55 = phi i16* [ %23, %21 ], [ %113, %111 ]
  %56 = phi i8* [ %26, %21 ], [ %112, %111 ]
  %57 = phi i32 [ 0, %21 ], [ %114, %111 ]
  %58 = load i8, i8* %56, align 1
  br label %59

59:                                               ; preds = %59, %54
  %60 = phi i8 [ %66, %59 ], [ %58, %54 ]
  %61 = phi i64 [ %64, %59 ], [ 0, %54 ]
  %62 = zext i8 %60 to i32
  %63 = mul nsw i32 %62, %46
  %64 = add nuw nsw i64 %61, 1
  %65 = getelementptr inbounds i8, i8* %56, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = mul nsw i32 %67, %47
  %69 = add nsw i32 %68, %63
  %70 = add nuw nsw i64 %61, 2
  %71 = getelementptr inbounds i8, i8* %56, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = mul nsw i32 %73, %48
  %75 = add nsw i32 %74, %69
  %76 = add nuw nsw i64 %61, 3
  %77 = getelementptr inbounds i8, i8* %56, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = mul nsw i32 %79, %49
  %81 = add nsw i32 %80, %75
  %82 = add nuw nsw i64 %61, 4
  %83 = getelementptr inbounds i8, i8* %56, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = mul nsw i32 %85, %50
  %87 = add nsw i32 %86, %81
  %88 = add nuw nsw i64 %61, 5
  %89 = getelementptr inbounds i8, i8* %56, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = mul nsw i32 %91, %51
  %93 = add nsw i32 %92, %87
  %94 = add nuw nsw i64 %61, 6
  %95 = getelementptr inbounds i8, i8* %56, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = mul nsw i32 %97, %52
  %99 = add nsw i32 %98, %93
  %100 = add nuw nsw i64 %61, 7
  %101 = getelementptr inbounds i8, i8* %56, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = mul nsw i32 %103, %53
  %105 = add nsw i32 %104, %99
  %106 = add nsw i32 %105, 2
  %107 = lshr i32 %106, 2
  %108 = trunc i32 %107 to i16
  %109 = getelementptr inbounds i16, i16* %55, i64 %61
  store i16 %108, i16* %109, align 2
  %110 = icmp slt i64 %64, %29
  br i1 %110, label %59, label %111

111:                                              ; preds = %59
  %112 = getelementptr inbounds i8, i8* %56, i64 %1
  %113 = getelementptr inbounds i16, i16* %55, i64 128
  %114 = add nuw nsw i32 %57, 1
  %115 = icmp slt i32 %57, %28
  br i1 %115, label %54, label %116

116:                                              ; preds = %111
  %117 = bitcast i8* %8 to i16*
  %118 = icmp slt i32 %7, 5
  br i1 %118, label %119, label %124

119:                                              ; preds = %116
  %120 = and i32 %3, -3
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %126, label %122

122:                                              ; preds = %119
  %123 = icmp eq i32 %3, 1
  br i1 %123, label %126, label %124

124:                                              ; preds = %122, %116
  %125 = sext i32 %3 to i64
  br label %126

126:                                              ; preds = %119, %122, %124
  %127 = phi i64 [ %125, %124 ], [ 4, %119 ], [ 5, %122 ]
  %128 = sext i32 %5 to i64
  %129 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %127, i64 %128, i64 0
  %130 = load i8, i8* %129, align 8
  %131 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %127, i64 %128, i64 1
  %132 = load i8, i8* %131, align 1
  %133 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %127, i64 %128, i64 2
  %134 = load i8, i8* %133, align 2
  %135 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %127, i64 %128, i64 3
  %136 = load i8, i8* %135, align 1
  %137 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %127, i64 %128, i64 4
  %138 = load i8, i8* %137, align 4
  %139 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %127, i64 %128, i64 5
  %140 = load i8, i8* %139, align 1
  %141 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %127, i64 %128, i64 6
  %142 = load i8, i8* %141, align 2
  %143 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %127, i64 %128, i64 7
  %144 = load i8, i8* %143, align 1
  %145 = sext i8 %130 to i32
  %146 = sext i8 %132 to i32
  %147 = sext i8 %134 to i32
  %148 = sext i8 %136 to i32
  %149 = sext i8 %138 to i32
  %150 = sext i8 %140 to i32
  %151 = sext i8 %142 to i32
  %152 = sext i8 %144 to i32
  %153 = icmp sgt i64 %29, 1
  %154 = select i1 %153, i64 %29, i64 1
  %155 = icmp ult i64 %154, 8
  %156 = and i64 %154, 9223372036854775800
  %157 = insertelement <8 x i32> undef, i32 %145, i32 0
  %158 = shufflevector <8 x i32> %157, <8 x i32> undef, <8 x i32> zeroinitializer
  %159 = insertelement <8 x i32> undef, i32 %146, i32 0
  %160 = shufflevector <8 x i32> %159, <8 x i32> undef, <8 x i32> zeroinitializer
  %161 = insertelement <8 x i32> undef, i32 %147, i32 0
  %162 = shufflevector <8 x i32> %161, <8 x i32> undef, <8 x i32> zeroinitializer
  %163 = insertelement <8 x i32> undef, i32 %148, i32 0
  %164 = shufflevector <8 x i32> %163, <8 x i32> undef, <8 x i32> zeroinitializer
  %165 = insertelement <8 x i32> undef, i32 %149, i32 0
  %166 = shufflevector <8 x i32> %165, <8 x i32> undef, <8 x i32> zeroinitializer
  %167 = insertelement <8 x i32> undef, i32 %150, i32 0
  %168 = shufflevector <8 x i32> %167, <8 x i32> undef, <8 x i32> zeroinitializer
  %169 = insertelement <8 x i32> undef, i32 %151, i32 0
  %170 = shufflevector <8 x i32> %169, <8 x i32> undef, <8 x i32> zeroinitializer
  %171 = insertelement <8 x i32> undef, i32 %152, i32 0
  %172 = shufflevector <8 x i32> %171, <8 x i32> undef, <8 x i32> zeroinitializer
  %173 = icmp eq i64 %154, %156
  br label %174

174:                                              ; preds = %312, %126
  %175 = phi i16* [ %23, %126 ], [ %314, %312 ]
  %176 = phi i16* [ %117, %126 ], [ %313, %312 ]
  %177 = phi i32 [ 0, %126 ], [ %315, %312 ]
  br i1 %155, label %249, label %178

178:                                              ; preds = %174, %178
  %179 = phi i64 [ %246, %178 ], [ 0, %174 ]
  %180 = getelementptr inbounds i16, i16* %175, i64 %179
  %181 = bitcast i16* %180 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 2
  %183 = sext <8 x i16> %182 to <8 x i32>
  %184 = mul nsw <8 x i32> %158, %183
  %185 = add nuw i64 %179, 128
  %186 = and i64 %185, 4294967288
  %187 = getelementptr inbounds i16, i16* %175, i64 %186
  %188 = bitcast i16* %187 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 2
  %190 = sext <8 x i16> %189 to <8 x i32>
  %191 = mul nsw <8 x i32> %160, %190
  %192 = add nsw <8 x i32> %191, %184
  %193 = add nuw i64 %179, 256
  %194 = and i64 %193, 4294967288
  %195 = getelementptr inbounds i16, i16* %175, i64 %194
  %196 = bitcast i16* %195 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 2
  %198 = sext <8 x i16> %197 to <8 x i32>
  %199 = mul nsw <8 x i32> %162, %198
  %200 = add nsw <8 x i32> %199, %192
  %201 = add nuw i64 %179, 384
  %202 = and i64 %201, 4294967288
  %203 = getelementptr inbounds i16, i16* %175, i64 %202
  %204 = bitcast i16* %203 to <8 x i16>*
  %205 = load <8 x i16>, <8 x i16>* %204, align 2
  %206 = sext <8 x i16> %205 to <8 x i32>
  %207 = mul nsw <8 x i32> %164, %206
  %208 = add nsw <8 x i32> %207, %200
  %209 = add nuw i64 %179, 512
  %210 = and i64 %209, 4294967288
  %211 = getelementptr inbounds i16, i16* %175, i64 %210
  %212 = bitcast i16* %211 to <8 x i16>*
  %213 = load <8 x i16>, <8 x i16>* %212, align 2
  %214 = sext <8 x i16> %213 to <8 x i32>
  %215 = mul nsw <8 x i32> %166, %214
  %216 = add nsw <8 x i32> %215, %208
  %217 = add nuw i64 %179, 640
  %218 = and i64 %217, 4294967288
  %219 = getelementptr inbounds i16, i16* %175, i64 %218
  %220 = bitcast i16* %219 to <8 x i16>*
  %221 = load <8 x i16>, <8 x i16>* %220, align 2
  %222 = sext <8 x i16> %221 to <8 x i32>
  %223 = mul nsw <8 x i32> %168, %222
  %224 = add nsw <8 x i32> %223, %216
  %225 = add nuw i64 %179, 768
  %226 = and i64 %225, 4294967288
  %227 = getelementptr inbounds i16, i16* %175, i64 %226
  %228 = bitcast i16* %227 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 2
  %230 = sext <8 x i16> %229 to <8 x i32>
  %231 = mul nsw <8 x i32> %170, %230
  %232 = add nsw <8 x i32> %231, %224
  %233 = add nuw i64 %179, 896
  %234 = and i64 %233, 4294967288
  %235 = getelementptr inbounds i16, i16* %175, i64 %234
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = sext <8 x i16> %237 to <8 x i32>
  %239 = mul nsw <8 x i32> %172, %238
  %240 = add nsw <8 x i32> %239, %232
  %241 = add nsw <8 x i32> %240, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %242 = lshr <8 x i32> %241, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %243 = trunc <8 x i32> %242 to <8 x i16>
  %244 = getelementptr inbounds i16, i16* %176, i64 %179
  %245 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %245, align 2
  %246 = add i64 %179, 8
  %247 = icmp eq i64 %246, %156
  br i1 %247, label %248, label %178, !llvm.loop !71

248:                                              ; preds = %178
  br i1 %173, label %312, label %249

249:                                              ; preds = %248, %174
  %250 = phi i64 [ 0, %174 ], [ %156, %248 ]
  br label %251

251:                                              ; preds = %249, %251
  %252 = phi i64 [ %310, %251 ], [ %250, %249 ]
  %253 = getelementptr inbounds i16, i16* %175, i64 %252
  %254 = load i16, i16* %253, align 2
  %255 = sext i16 %254 to i32
  %256 = mul nsw i32 %255, %145
  %257 = add nuw i64 %252, 128
  %258 = and i64 %257, 4294967295
  %259 = getelementptr inbounds i16, i16* %175, i64 %258
  %260 = load i16, i16* %259, align 2
  %261 = sext i16 %260 to i32
  %262 = mul nsw i32 %261, %146
  %263 = add nsw i32 %262, %256
  %264 = add nuw i64 %252, 256
  %265 = and i64 %264, 4294967295
  %266 = getelementptr inbounds i16, i16* %175, i64 %265
  %267 = load i16, i16* %266, align 2
  %268 = sext i16 %267 to i32
  %269 = mul nsw i32 %268, %147
  %270 = add nsw i32 %269, %263
  %271 = add nuw i64 %252, 384
  %272 = and i64 %271, 4294967295
  %273 = getelementptr inbounds i16, i16* %175, i64 %272
  %274 = load i16, i16* %273, align 2
  %275 = sext i16 %274 to i32
  %276 = mul nsw i32 %275, %148
  %277 = add nsw i32 %276, %270
  %278 = add nuw i64 %252, 512
  %279 = and i64 %278, 4294967295
  %280 = getelementptr inbounds i16, i16* %175, i64 %279
  %281 = load i16, i16* %280, align 2
  %282 = sext i16 %281 to i32
  %283 = mul nsw i32 %282, %149
  %284 = add nsw i32 %283, %277
  %285 = add nuw i64 %252, 640
  %286 = and i64 %285, 4294967295
  %287 = getelementptr inbounds i16, i16* %175, i64 %286
  %288 = load i16, i16* %287, align 2
  %289 = sext i16 %288 to i32
  %290 = mul nsw i32 %289, %150
  %291 = add nsw i32 %290, %284
  %292 = add nuw i64 %252, 768
  %293 = and i64 %292, 4294967295
  %294 = getelementptr inbounds i16, i16* %175, i64 %293
  %295 = load i16, i16* %294, align 2
  %296 = sext i16 %295 to i32
  %297 = mul nsw i32 %296, %151
  %298 = add nsw i32 %297, %291
  %299 = add nuw i64 %252, 896
  %300 = and i64 %299, 4294967295
  %301 = getelementptr inbounds i16, i16* %175, i64 %300
  %302 = load i16, i16* %301, align 2
  %303 = sext i16 %302 to i32
  %304 = mul nsw i32 %303, %152
  %305 = add nsw i32 %304, %298
  %306 = add nsw i32 %305, 32
  %307 = lshr i32 %306, 6
  %308 = trunc i32 %307 to i16
  %309 = getelementptr inbounds i16, i16* %176, i64 %252
  store i16 %308, i16* %309, align 2
  %310 = add nuw nsw i64 %252, 1
  %311 = icmp slt i64 %310, %29
  br i1 %311, label %251, label %312, !llvm.loop !72

312:                                              ; preds = %251, %248
  %313 = getelementptr inbounds i16, i16* %176, i64 %9
  %314 = getelementptr inbounds i16, i16* %175, i64 128
  %315 = add nuw nsw i32 %177, 1
  %316 = icmp slt i32 %315, %7
  br i1 %316, label %174, label %317

317:                                              ; preds = %312
  call void @llvm.lifetime.end.p0i8(i64 34560, i8* nonnull %12) #4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveIntraBlockCopy1D_CILi8EhLb1EEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = sext i32 %6 to i64
  %12 = icmp sgt i64 %11, 1
  %13 = select i1 %12, i64 %11, i64 1
  %14 = icmp sgt i64 %11, 1
  %15 = select i1 %14, i64 %11, i64 1
  %16 = add nuw nsw i64 %15, 1
  %17 = and i64 %13, 9223372036854775792
  %18 = add nsw i64 %17, -16
  %19 = lshr exact i64 %18, 4
  %20 = add nuw nsw i64 %19, 1
  %21 = icmp ult i64 %13, 16
  %22 = and i64 %13, 9223372036854775792
  %23 = and i64 %20, 1
  %24 = icmp eq i64 %18, 0
  %25 = sub nuw nsw i64 %20, %23
  %26 = icmp eq i64 %23, 0
  %27 = icmp eq i64 %13, %22
  br label %28

28:                                               ; preds = %119, %10
  %29 = phi i64 [ %124, %119 ], [ 0, %10 ]
  %30 = phi i8* [ %121, %119 ], [ %8, %10 ]
  %31 = phi i8* [ %120, %119 ], [ %0, %10 ]
  %32 = phi i32 [ %122, %119 ], [ 0, %10 ]
  %33 = mul i64 %29, %9
  %34 = mul i64 %29, %1
  br i1 %21, label %102, label %35

35:                                               ; preds = %28
  %36 = add i64 %16, %34
  %37 = getelementptr i8, i8* %0, i64 %36
  %38 = getelementptr i8, i8* %0, i64 %34
  %39 = add i64 %15, %33
  %40 = getelementptr i8, i8* %8, i64 %39
  %41 = getelementptr i8, i8* %8, i64 %33
  %42 = icmp ult i8* %41, %37
  %43 = icmp ult i8* %38, %40
  %44 = and i1 %42, %43
  br i1 %44, label %102, label %45

45:                                               ; preds = %35
  br i1 %24, label %83, label %46

46:                                               ; preds = %45, %46
  %47 = phi i64 [ %80, %46 ], [ 0, %45 ]
  %48 = phi i64 [ %81, %46 ], [ %25, %45 ]
  %49 = getelementptr inbounds i8, i8* %31, i64 %47
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1, !alias.scope !73
  %52 = zext <16 x i8> %51 to <16 x i32>
  %53 = or i64 %47, 1
  %54 = getelementptr inbounds i8, i8* %31, i64 %53
  %55 = bitcast i8* %54 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 1, !alias.scope !73
  %57 = zext <16 x i8> %56 to <16 x i32>
  %58 = add nuw nsw <16 x i32> %52, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %59 = add nuw nsw <16 x i32> %58, %57
  %60 = lshr <16 x i32> %59, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %61 = trunc <16 x i32> %60 to <16 x i8>
  %62 = getelementptr inbounds i8, i8* %30, i64 %47
  %63 = bitcast i8* %62 to <16 x i8>*
  store <16 x i8> %61, <16 x i8>* %63, align 1, !alias.scope !76, !noalias !73
  %64 = or i64 %47, 16
  %65 = getelementptr inbounds i8, i8* %31, i64 %64
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1, !alias.scope !73
  %68 = zext <16 x i8> %67 to <16 x i32>
  %69 = or i64 %47, 17
  %70 = getelementptr inbounds i8, i8* %31, i64 %69
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1, !alias.scope !73
  %73 = zext <16 x i8> %72 to <16 x i32>
  %74 = add nuw nsw <16 x i32> %68, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %75 = add nuw nsw <16 x i32> %74, %73
  %76 = lshr <16 x i32> %75, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %77 = trunc <16 x i32> %76 to <16 x i8>
  %78 = getelementptr inbounds i8, i8* %30, i64 %64
  %79 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %77, <16 x i8>* %79, align 1, !alias.scope !76, !noalias !73
  %80 = add i64 %47, 32
  %81 = add i64 %48, -2
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %46, !llvm.loop !78

83:                                               ; preds = %46, %45
  %84 = phi i64 [ 0, %45 ], [ %80, %46 ]
  br i1 %26, label %101, label %85

85:                                               ; preds = %83
  %86 = getelementptr inbounds i8, i8* %31, i64 %84
  %87 = bitcast i8* %86 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1, !alias.scope !73
  %89 = zext <16 x i8> %88 to <16 x i32>
  %90 = or i64 %84, 1
  %91 = getelementptr inbounds i8, i8* %31, i64 %90
  %92 = bitcast i8* %91 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1, !alias.scope !73
  %94 = zext <16 x i8> %93 to <16 x i32>
  %95 = add nuw nsw <16 x i32> %89, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %96 = add nuw nsw <16 x i32> %95, %94
  %97 = lshr <16 x i32> %96, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %98 = trunc <16 x i32> %97 to <16 x i8>
  %99 = getelementptr inbounds i8, i8* %30, i64 %84
  %100 = bitcast i8* %99 to <16 x i8>*
  store <16 x i8> %98, <16 x i8>* %100, align 1, !alias.scope !76, !noalias !73
  br label %101

101:                                              ; preds = %83, %85
  br i1 %27, label %119, label %102

102:                                              ; preds = %101, %35, %28
  %103 = phi i64 [ 0, %35 ], [ 0, %28 ], [ %22, %101 ]
  br label %104

104:                                              ; preds = %102, %104
  %105 = phi i64 [ %109, %104 ], [ %103, %102 ]
  %106 = getelementptr inbounds i8, i8* %31, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = add nuw nsw i64 %105, 1
  %110 = getelementptr inbounds i8, i8* %31, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = add nuw nsw i32 %108, 1
  %114 = add nuw nsw i32 %113, %112
  %115 = lshr i32 %114, 1
  %116 = trunc i32 %115 to i8
  %117 = getelementptr inbounds i8, i8* %30, i64 %105
  store i8 %116, i8* %117, align 1
  %118 = icmp slt i64 %109, %11
  br i1 %118, label %104, label %119, !llvm.loop !79

119:                                              ; preds = %104, %101
  %120 = getelementptr inbounds i8, i8* %31, i64 %1
  %121 = getelementptr inbounds i8, i8* %30, i64 %9
  %122 = add nuw nsw i32 %32, 1
  %123 = icmp slt i32 %122, %7
  %124 = add i64 %29, 1
  br i1 %123, label %28, label %125

125:                                              ; preds = %119
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveIntraBlockCopy1D_CILi8EhLb0EEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = sext i32 %6 to i64
  %12 = icmp sgt i64 %11, 1
  %13 = select i1 %12, i64 %11, i64 1
  %14 = icmp sgt i64 %11, 1
  %15 = select i1 %14, i64 %11, i64 1
  %16 = add i64 %15, %1
  %17 = and i64 %13, 9223372036854775792
  %18 = add nsw i64 %17, -16
  %19 = lshr exact i64 %18, 4
  %20 = add nuw nsw i64 %19, 1
  %21 = icmp ult i64 %13, 16
  %22 = and i64 %13, 9223372036854775792
  %23 = and i64 %20, 1
  %24 = icmp eq i64 %18, 0
  %25 = sub nuw nsw i64 %20, %23
  %26 = icmp eq i64 %23, 0
  %27 = icmp eq i64 %13, %22
  br label %28

28:                                               ; preds = %128, %10
  %29 = phi i64 [ %133, %128 ], [ 0, %10 ]
  %30 = phi i8* [ %129, %128 ], [ %0, %10 ]
  %31 = phi i8* [ %130, %128 ], [ %8, %10 ]
  %32 = phi i32 [ %131, %128 ], [ 0, %10 ]
  %33 = mul i64 %29, %9
  %34 = getelementptr i8, i8* %8, i64 %33
  %35 = add i64 %15, %33
  %36 = getelementptr i8, i8* %8, i64 %35
  %37 = mul i64 %29, %1
  br i1 %21, label %110, label %38

38:                                               ; preds = %28
  %39 = add i64 %15, %37
  %40 = getelementptr i8, i8* %0, i64 %39
  %41 = getelementptr i8, i8* %0, i64 %37
  %42 = add i64 %16, %37
  %43 = getelementptr i8, i8* %0, i64 %42
  %44 = add i64 %37, %1
  %45 = getelementptr i8, i8* %0, i64 %44
  %46 = icmp ult i8* %34, %43
  %47 = icmp ult i8* %45, %36
  %48 = and i1 %46, %47
  %49 = icmp ult i8* %34, %40
  %50 = icmp ult i8* %41, %36
  %51 = and i1 %49, %50
  %52 = or i1 %48, %51
  br i1 %52, label %110, label %53

53:                                               ; preds = %38
  br i1 %24, label %91, label %54

54:                                               ; preds = %53, %54
  %55 = phi i64 [ %88, %54 ], [ 0, %53 ]
  %56 = phi i64 [ %89, %54 ], [ %25, %53 ]
  %57 = getelementptr inbounds i8, i8* %30, i64 %55
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !80
  %60 = zext <16 x i8> %59 to <16 x i32>
  %61 = add nsw i64 %55, %1
  %62 = getelementptr inbounds i8, i8* %30, i64 %61
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1, !alias.scope !83
  %65 = zext <16 x i8> %64 to <16 x i32>
  %66 = add nuw nsw <16 x i32> %60, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %67 = add nuw nsw <16 x i32> %66, %65
  %68 = lshr <16 x i32> %67, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %69 = trunc <16 x i32> %68 to <16 x i8>
  %70 = getelementptr inbounds i8, i8* %31, i64 %55
  %71 = bitcast i8* %70 to <16 x i8>*
  store <16 x i8> %69, <16 x i8>* %71, align 1, !alias.scope !85, !noalias !87
  %72 = or i64 %55, 16
  %73 = getelementptr inbounds i8, i8* %30, i64 %72
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1, !alias.scope !80
  %76 = zext <16 x i8> %75 to <16 x i32>
  %77 = add nsw i64 %72, %1
  %78 = getelementptr inbounds i8, i8* %30, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1, !alias.scope !83
  %81 = zext <16 x i8> %80 to <16 x i32>
  %82 = add nuw nsw <16 x i32> %76, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %83 = add nuw nsw <16 x i32> %82, %81
  %84 = lshr <16 x i32> %83, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %85 = trunc <16 x i32> %84 to <16 x i8>
  %86 = getelementptr inbounds i8, i8* %31, i64 %72
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %85, <16 x i8>* %87, align 1, !alias.scope !85, !noalias !87
  %88 = add i64 %55, 32
  %89 = add i64 %56, -2
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %54, !llvm.loop !88

91:                                               ; preds = %54, %53
  %92 = phi i64 [ 0, %53 ], [ %88, %54 ]
  br i1 %26, label %109, label %93

93:                                               ; preds = %91
  %94 = getelementptr inbounds i8, i8* %30, i64 %92
  %95 = bitcast i8* %94 to <16 x i8>*
  %96 = load <16 x i8>, <16 x i8>* %95, align 1, !alias.scope !80
  %97 = zext <16 x i8> %96 to <16 x i32>
  %98 = add nsw i64 %92, %1
  %99 = getelementptr inbounds i8, i8* %30, i64 %98
  %100 = bitcast i8* %99 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1, !alias.scope !83
  %102 = zext <16 x i8> %101 to <16 x i32>
  %103 = add nuw nsw <16 x i32> %97, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %104 = add nuw nsw <16 x i32> %103, %102
  %105 = lshr <16 x i32> %104, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %106 = trunc <16 x i32> %105 to <16 x i8>
  %107 = getelementptr inbounds i8, i8* %31, i64 %92
  %108 = bitcast i8* %107 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %108, align 1, !alias.scope !85, !noalias !87
  br label %109

109:                                              ; preds = %91, %93
  br i1 %27, label %128, label %110

110:                                              ; preds = %109, %38, %28
  %111 = phi i64 [ 0, %38 ], [ 0, %28 ], [ %22, %109 ]
  br label %112

112:                                              ; preds = %110, %112
  %113 = phi i64 [ %126, %112 ], [ %111, %110 ]
  %114 = getelementptr inbounds i8, i8* %30, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = add nsw i64 %113, %1
  %118 = getelementptr inbounds i8, i8* %30, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = add nuw nsw i32 %116, 1
  %122 = add nuw nsw i32 %121, %120
  %123 = lshr i32 %122, 1
  %124 = trunc i32 %123 to i8
  %125 = getelementptr inbounds i8, i8* %31, i64 %113
  store i8 %124, i8* %125, align 1
  %126 = add nuw nsw i64 %113, 1
  %127 = icmp slt i64 %126, %11
  br i1 %127, label %112, label %128, !llvm.loop !89

128:                                              ; preds = %112, %109
  %129 = getelementptr inbounds i8, i8* %30, i64 %1
  %130 = getelementptr inbounds i8, i8* %31, i64 %9
  %131 = add nuw nsw i32 %32, 1
  %132 = icmp slt i32 %131, %7
  %133 = add i64 %29, 1
  br i1 %132, label %28, label %134

134:                                              ; preds = %128
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveIntraBlockCopy2D_CILi8EhEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #0 {
  %11 = alloca [16512 x i16], align 16
  %12 = bitcast [16512 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 33024, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 33024, i1 false)
  %13 = getelementptr inbounds [16512 x i16], [16512 x i16]* %11, i64 0, i64 0
  %14 = sext i32 %6 to i64
  %15 = icmp sgt i64 %14, 1
  %16 = select i1 %15, i64 %14, i64 1
  %17 = icmp ult i64 %16, 16
  %18 = and i64 %16, 9223372036854775792
  %19 = icmp eq i64 %16, %18
  br label %20

20:                                               ; preds = %67, %10
  %21 = phi i8* [ %0, %10 ], [ %68, %67 ]
  %22 = phi i16* [ %13, %10 ], [ %69, %67 ]
  %23 = phi i32 [ 0, %10 ], [ %70, %67 ]
  %24 = load i8, i8* %21, align 1
  br i1 %17, label %53, label %25

25:                                               ; preds = %20
  %26 = insertelement <8 x i8> undef, i8 %24, i32 7
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %49, %27 ]
  %29 = phi <8 x i8> [ %26, %25 ], [ %36, %27 ]
  %30 = or i64 %28, 1
  %31 = getelementptr inbounds i8, i8* %21, i64 %30
  %32 = bitcast i8* %31 to <8 x i8>*
  %33 = load <8 x i8>, <8 x i8>* %32, align 1
  %34 = getelementptr inbounds i8, i8* %31, i64 8
  %35 = bitcast i8* %34 to <8 x i8>*
  %36 = load <8 x i8>, <8 x i8>* %35, align 1
  %37 = shufflevector <8 x i8> %29, <8 x i8> %33, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %38 = shufflevector <8 x i8> %33, <8 x i8> %36, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %39 = zext <8 x i8> %37 to <8 x i16>
  %40 = zext <8 x i8> %38 to <8 x i16>
  %41 = zext <8 x i8> %33 to <8 x i16>
  %42 = zext <8 x i8> %36 to <8 x i16>
  %43 = add nuw nsw <8 x i16> %41, %39
  %44 = add nuw nsw <8 x i16> %42, %40
  %45 = getelementptr inbounds i16, i16* %22, i64 %28
  %46 = bitcast i16* %45 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %46, align 2
  %47 = getelementptr inbounds i16, i16* %45, i64 8
  %48 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %44, <8 x i16>* %48, align 2
  %49 = add i64 %28, 16
  %50 = icmp eq i64 %49, %18
  br i1 %50, label %51, label %27, !llvm.loop !90

51:                                               ; preds = %27
  %52 = extractelement <8 x i8> %36, i32 7
  br i1 %19, label %67, label %53

53:                                               ; preds = %51, %20
  %54 = phi i8 [ %24, %20 ], [ %52, %51 ]
  %55 = phi i64 [ 0, %20 ], [ %18, %51 ]
  br label %56

56:                                               ; preds = %53, %56
  %57 = phi i8 [ %62, %56 ], [ %54, %53 ]
  %58 = phi i64 [ %60, %56 ], [ %55, %53 ]
  %59 = zext i8 %57 to i16
  %60 = add nuw nsw i64 %58, 1
  %61 = getelementptr inbounds i8, i8* %21, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i16
  %64 = add nuw nsw i16 %63, %59
  %65 = getelementptr inbounds i16, i16* %22, i64 %58
  store i16 %64, i16* %65, align 2
  %66 = icmp slt i64 %60, %14
  br i1 %66, label %56, label %67, !llvm.loop !91

67:                                               ; preds = %56, %51
  %68 = getelementptr inbounds i8, i8* %21, i64 %1
  %69 = getelementptr inbounds i16, i16* %22, i64 %14
  %70 = add nuw nsw i32 %23, 1
  %71 = icmp slt i32 %23, %7
  br i1 %71, label %20, label %72

72:                                               ; preds = %67
  %73 = icmp sgt i64 %14, 1
  %74 = select i1 %73, i64 %14, i64 1
  %75 = and i64 %74, 9223372036854775800
  %76 = add nsw i64 %75, -8
  %77 = lshr exact i64 %76, 3
  %78 = add nuw nsw i64 %77, 1
  %79 = icmp ult i64 %74, 8
  %80 = and i64 %74, 9223372036854775800
  %81 = and i64 %78, 1
  %82 = icmp eq i64 %76, 0
  %83 = sub nuw nsw i64 %78, %81
  %84 = icmp eq i64 %81, 0
  %85 = icmp eq i64 %74, %80
  br label %86

86:                                               ; preds = %72, %165
  %87 = phi i8* [ %167, %165 ], [ %8, %72 ]
  %88 = phi i16* [ %166, %165 ], [ %13, %72 ]
  %89 = phi i32 [ %168, %165 ], [ 0, %72 ]
  br i1 %79, label %147, label %90

90:                                               ; preds = %86
  br i1 %82, label %128, label %91

91:                                               ; preds = %90, %91
  %92 = phi i64 [ %125, %91 ], [ 0, %90 ]
  %93 = phi i64 [ %126, %91 ], [ %83, %90 ]
  %94 = getelementptr inbounds i16, i16* %88, i64 %92
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2
  %97 = zext <8 x i16> %96 to <8 x i32>
  %98 = add nsw i64 %92, %14
  %99 = getelementptr inbounds i16, i16* %88, i64 %98
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2
  %102 = zext <8 x i16> %101 to <8 x i32>
  %103 = add nuw nsw <8 x i32> %97, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %106 = trunc <8 x i32> %105 to <8 x i8>
  %107 = getelementptr inbounds i8, i8* %87, i64 %92
  %108 = bitcast i8* %107 to <8 x i8>*
  store <8 x i8> %106, <8 x i8>* %108, align 1
  %109 = or i64 %92, 8
  %110 = getelementptr inbounds i16, i16* %88, i64 %109
  %111 = bitcast i16* %110 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2
  %113 = zext <8 x i16> %112 to <8 x i32>
  %114 = add nsw i64 %109, %14
  %115 = getelementptr inbounds i16, i16* %88, i64 %114
  %116 = bitcast i16* %115 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 2
  %118 = zext <8 x i16> %117 to <8 x i32>
  %119 = add nuw nsw <8 x i32> %113, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %120 = add nuw nsw <8 x i32> %119, %118
  %121 = lshr <8 x i32> %120, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %122 = trunc <8 x i32> %121 to <8 x i8>
  %123 = getelementptr inbounds i8, i8* %87, i64 %109
  %124 = bitcast i8* %123 to <8 x i8>*
  store <8 x i8> %122, <8 x i8>* %124, align 1
  %125 = add i64 %92, 16
  %126 = add i64 %93, -2
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %91, !llvm.loop !92

128:                                              ; preds = %91, %90
  %129 = phi i64 [ 0, %90 ], [ %125, %91 ]
  br i1 %84, label %146, label %130

130:                                              ; preds = %128
  %131 = getelementptr inbounds i16, i16* %88, i64 %129
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 2
  %134 = zext <8 x i16> %133 to <8 x i32>
  %135 = add nsw i64 %129, %14
  %136 = getelementptr inbounds i16, i16* %88, i64 %135
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2
  %139 = zext <8 x i16> %138 to <8 x i32>
  %140 = add nuw nsw <8 x i32> %134, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %141 = add nuw nsw <8 x i32> %140, %139
  %142 = lshr <8 x i32> %141, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %143 = trunc <8 x i32> %142 to <8 x i8>
  %144 = getelementptr inbounds i8, i8* %87, i64 %129
  %145 = bitcast i8* %144 to <8 x i8>*
  store <8 x i8> %143, <8 x i8>* %145, align 1
  br label %146

146:                                              ; preds = %128, %130
  br i1 %85, label %165, label %147

147:                                              ; preds = %146, %86
  %148 = phi i64 [ 0, %86 ], [ %80, %146 ]
  br label %149

149:                                              ; preds = %147, %149
  %150 = phi i64 [ %163, %149 ], [ %148, %147 ]
  %151 = getelementptr inbounds i16, i16* %88, i64 %150
  %152 = load i16, i16* %151, align 2
  %153 = zext i16 %152 to i32
  %154 = add nsw i64 %150, %14
  %155 = getelementptr inbounds i16, i16* %88, i64 %154
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = add nuw nsw i32 %153, 2
  %159 = add nuw nsw i32 %158, %157
  %160 = lshr i32 %159, 2
  %161 = trunc i32 %160 to i8
  %162 = getelementptr inbounds i8, i8* %87, i64 %150
  store i8 %161, i8* %162, align 1
  %163 = add nuw nsw i64 %150, 1
  %164 = icmp slt i64 %163, %14
  br i1 %164, label %149, label %165, !llvm.loop !93

165:                                              ; preds = %149, %146
  %166 = getelementptr inbounds i16, i16* %88, i64 %14
  %167 = getelementptr inbounds i8, i8* %87, i64 %9
  %168 = add nuw nsw i32 %89, 1
  %169 = icmp slt i32 %168, %7
  br i1 %169, label %86, label %170

170:                                              ; preds = %165
  call void @llvm.lifetime.end.p0i8(i64 33024, i8* nonnull %12) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_117ConvolveScale2D_CILi8EhEEvPKvliiiiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #0 {
  %13 = alloca [33792 x i16], align 16
  %14 = add nsw i32 %9, -1
  %15 = mul nsw i32 %14, %7
  %16 = add nsw i32 %15, 1023
  %17 = ashr i32 %16, 10
  %18 = bitcast [33792 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 67584, i8* nonnull %18) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 67584, i1 false)
  %19 = icmp slt i32 %8, 5
  br i1 %19, label %20, label %25

20:                                               ; preds = %12
  %21 = and i32 %2, -3
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %20
  %24 = icmp eq i32 %2, 1
  br i1 %24, label %27, label %25

25:                                               ; preds = %23, %12
  %26 = sext i32 %2 to i64
  br label %27

27:                                               ; preds = %20, %23, %25
  %28 = phi i64 [ %26, %25 ], [ 4, %20 ], [ 5, %23 ]
  %29 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 0
  %30 = ashr i32 %4, 10
  %31 = add nsw i32 %17, 7
  %32 = sext i32 %8 to i64
  br label %33

33:                                               ; preds = %116, %27
  %34 = phi i16* [ %29, %27 ], [ %118, %116 ]
  %35 = phi i8* [ %0, %27 ], [ %117, %116 ]
  %36 = phi i32 [ 0, %27 ], [ %119, %116 ]
  br label %37

37:                                               ; preds = %37, %33
  %38 = phi i64 [ %114, %37 ], [ 0, %33 ]
  %39 = phi i32 [ %113, %37 ], [ %4, %33 ]
  %40 = ashr i32 %39, 10
  %41 = sub nsw i32 %40, %30
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %35, i64 %42
  %44 = lshr i32 %39, 6
  %45 = and i32 %44, 15
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 0
  %48 = load i8, i8* %47, align 8
  %49 = sext i8 %48 to i32
  %50 = load i8, i8* %43, align 1
  %51 = zext i8 %50 to i32
  %52 = mul nsw i32 %51, %49
  %53 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 1
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = getelementptr inbounds i8, i8* %43, i64 1
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = mul nsw i32 %58, %55
  %60 = add nsw i32 %59, %52
  %61 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 2
  %62 = load i8, i8* %61, align 2
  %63 = sext i8 %62 to i32
  %64 = getelementptr inbounds i8, i8* %43, i64 2
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = mul nsw i32 %66, %63
  %68 = add nsw i32 %67, %60
  %69 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 3
  %70 = load i8, i8* %69, align 1
  %71 = sext i8 %70 to i32
  %72 = getelementptr inbounds i8, i8* %43, i64 3
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = mul nsw i32 %74, %71
  %76 = add nsw i32 %75, %68
  %77 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 4
  %78 = load i8, i8* %77, align 4
  %79 = sext i8 %78 to i32
  %80 = getelementptr inbounds i8, i8* %43, i64 4
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = mul nsw i32 %82, %79
  %84 = add nsw i32 %83, %76
  %85 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 5
  %86 = load i8, i8* %85, align 1
  %87 = sext i8 %86 to i32
  %88 = getelementptr inbounds i8, i8* %43, i64 5
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = mul nsw i32 %90, %87
  %92 = add nsw i32 %91, %84
  %93 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 6
  %94 = load i8, i8* %93, align 2
  %95 = sext i8 %94 to i32
  %96 = getelementptr inbounds i8, i8* %43, i64 6
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = mul nsw i32 %98, %95
  %100 = add nsw i32 %99, %92
  %101 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 7
  %102 = load i8, i8* %101, align 1
  %103 = sext i8 %102 to i32
  %104 = getelementptr inbounds i8, i8* %43, i64 7
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = mul nsw i32 %106, %103
  %108 = add nsw i32 %107, %100
  %109 = add nsw i32 %108, 2
  %110 = lshr i32 %109, 2
  %111 = trunc i32 %110 to i16
  %112 = getelementptr inbounds i16, i16* %34, i64 %38
  store i16 %111, i16* %112, align 2
  %113 = add nsw i32 %39, %6
  %114 = add nuw nsw i64 %38, 1
  %115 = icmp slt i64 %114, %32
  br i1 %115, label %37, label %116

116:                                              ; preds = %37
  %117 = getelementptr inbounds i8, i8* %35, i64 %1
  %118 = getelementptr inbounds i16, i16* %34, i64 128
  %119 = add nuw nsw i32 %36, 1
  %120 = icmp slt i32 %36, %31
  br i1 %120, label %33, label %121

121:                                              ; preds = %116
  %122 = icmp slt i32 %9, 5
  br i1 %122, label %123, label %128

123:                                              ; preds = %121
  %124 = and i32 %3, -3
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %130, label %126

126:                                              ; preds = %123
  %127 = icmp eq i32 %3, 1
  br i1 %127, label %130, label %128

128:                                              ; preds = %126, %121
  %129 = sext i32 %3 to i64
  br label %130

130:                                              ; preds = %123, %126, %128
  %131 = phi i64 [ %129, %128 ], [ 4, %123 ], [ 5, %126 ]
  %132 = and i32 %5, 1023
  %133 = icmp sgt i64 %32, 1
  %134 = select i1 %133, i64 %32, i64 1
  %135 = icmp sgt i64 %32, 1
  %136 = select i1 %135, i64 %32, i64 1
  %137 = add nsw i64 %136, -1
  %138 = icmp sgt i64 %32, 1
  %139 = select i1 %138, i64 %32, i64 1
  %140 = add nuw nsw i64 %139, 896
  %141 = getelementptr [33792 x i16], [33792 x i16]* %13, i64 0, i64 %140
  %142 = icmp ult i64 %134, 8
  %143 = trunc i64 %137 to i32
  %144 = icmp ugt i64 %137, 4294967295
  %145 = trunc i64 %137 to i32
  %146 = icmp ugt i64 %137, 4294967295
  %147 = trunc i64 %137 to i32
  %148 = icmp ugt i64 %137, 4294967295
  %149 = trunc i64 %137 to i32
  %150 = icmp ugt i64 %137, 4294967295
  %151 = trunc i64 %137 to i32
  %152 = icmp ugt i64 %137, 4294967295
  %153 = trunc i64 %137 to i32
  %154 = icmp ugt i64 %137, 4294967295
  %155 = trunc i64 %137 to i32
  %156 = icmp ugt i64 %137, 4294967295
  %157 = and i64 %134, 9223372036854775800
  %158 = icmp eq i64 %134, %157
  br label %159

159:                                              ; preds = %411, %130
  %160 = phi i64 [ %416, %411 ], [ 0, %130 ]
  %161 = phi i8* [ %412, %411 ], [ %10, %130 ]
  %162 = phi i32 [ %414, %411 ], [ 0, %130 ]
  %163 = phi i32 [ %413, %411 ], [ %132, %130 ]
  %164 = mul i64 %160, %11
  %165 = getelementptr i8, i8* %10, i64 %164
  %166 = add i64 %139, %164
  %167 = getelementptr i8, i8* %10, i64 %166
  %168 = lshr i32 %163, 6
  %169 = and i32 %168, 15
  %170 = zext i32 %169 to i64
  %171 = ashr i32 %163, 10
  %172 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %131, i64 %170, i64 0
  %173 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %131, i64 %170, i64 2
  %174 = load i8, i8* %173, align 2
  %175 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %131, i64 %170, i64 3
  %176 = load i8, i8* %175, align 1
  %177 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %131, i64 %170, i64 4
  %178 = load i8, i8* %177, align 4
  %179 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %131, i64 %170, i64 5
  %180 = load i8, i8* %179, align 1
  %181 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %131, i64 %170, i64 6
  %182 = load i8, i8* %181, align 2
  %183 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %131, i64 %170, i64 7
  %184 = load i8, i8* %183, align 1
  %185 = load i8, i8* %172, align 8
  %186 = sext i8 %185 to i32
  %187 = shl nsw i32 %171, 7
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %131, i64 %170, i64 1
  %190 = load i8, i8* %189, align 1
  %191 = sext i8 %190 to i32
  %192 = shl nsw i32 %171, 7
  %193 = add nsw i32 %192, 128
  %194 = sext i8 %174 to i32
  %195 = shl nsw i32 %171, 7
  %196 = add nsw i32 %195, 256
  %197 = sext i8 %176 to i32
  %198 = shl nsw i32 %171, 7
  %199 = add nsw i32 %198, 384
  %200 = sext i8 %178 to i32
  %201 = shl nsw i32 %171, 7
  %202 = add nsw i32 %201, 512
  %203 = sext i8 %180 to i32
  %204 = shl nsw i32 %171, 7
  %205 = add nsw i32 %204, 640
  %206 = sext i8 %182 to i32
  %207 = shl nsw i32 %171, 7
  %208 = add nsw i32 %207, 768
  %209 = sext i8 %184 to i32
  %210 = shl nsw i32 %171, 7
  %211 = add nsw i32 %210, 896
  br i1 %142, label %342, label %212

212:                                              ; preds = %159
  %213 = add i32 %193, %143
  %214 = icmp slt i32 %213, %193
  %215 = or i1 %214, %144
  %216 = add i32 %196, %145
  %217 = icmp slt i32 %216, %196
  %218 = or i1 %217, %146
  %219 = or i1 %215, %218
  %220 = add i32 %199, %147
  %221 = icmp slt i32 %220, %199
  %222 = or i1 %221, %148
  %223 = or i1 %219, %222
  %224 = add i32 %202, %149
  %225 = icmp slt i32 %224, %202
  %226 = or i1 %225, %150
  %227 = or i1 %223, %226
  %228 = add i32 %205, %151
  %229 = icmp slt i32 %228, %205
  %230 = or i1 %229, %152
  %231 = or i1 %227, %230
  %232 = add i32 %208, %153
  %233 = icmp slt i32 %232, %208
  %234 = or i1 %233, %154
  %235 = or i1 %231, %234
  %236 = add i32 %211, %155
  %237 = icmp slt i32 %236, %211
  %238 = or i1 %237, %156
  %239 = or i1 %235, %238
  br i1 %239, label %342, label %240

240:                                              ; preds = %212
  %241 = getelementptr [33792 x i16], [33792 x i16]* %13, i64 0, i64 %188
  %242 = bitcast i16* %241 to i8*
  %243 = getelementptr i16, i16* %141, i64 %188
  %244 = bitcast i16* %243 to i8*
  %245 = icmp ult i8* %165, %244
  %246 = icmp ugt i8* %167, %242
  %247 = and i1 %245, %246
  br i1 %247, label %342, label %248

248:                                              ; preds = %240
  %249 = insertelement <8 x i32> undef, i32 %186, i32 0
  %250 = shufflevector <8 x i32> %249, <8 x i32> undef, <8 x i32> zeroinitializer
  %251 = insertelement <8 x i32> undef, i32 %191, i32 0
  %252 = shufflevector <8 x i32> %251, <8 x i32> undef, <8 x i32> zeroinitializer
  %253 = insertelement <8 x i32> undef, i32 %194, i32 0
  %254 = shufflevector <8 x i32> %253, <8 x i32> undef, <8 x i32> zeroinitializer
  %255 = insertelement <8 x i32> undef, i32 %197, i32 0
  %256 = shufflevector <8 x i32> %255, <8 x i32> undef, <8 x i32> zeroinitializer
  %257 = insertelement <8 x i32> undef, i32 %200, i32 0
  %258 = shufflevector <8 x i32> %257, <8 x i32> undef, <8 x i32> zeroinitializer
  %259 = insertelement <8 x i32> undef, i32 %203, i32 0
  %260 = shufflevector <8 x i32> %259, <8 x i32> undef, <8 x i32> zeroinitializer
  %261 = insertelement <8 x i32> undef, i32 %206, i32 0
  %262 = shufflevector <8 x i32> %261, <8 x i32> undef, <8 x i32> zeroinitializer
  %263 = insertelement <8 x i32> undef, i32 %209, i32 0
  %264 = shufflevector <8 x i32> %263, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %265

265:                                              ; preds = %265, %248
  %266 = phi i64 [ 0, %248 ], [ %339, %265 ]
  %267 = add nsw i64 %266, %188
  %268 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %267
  %269 = bitcast i16* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 16, !alias.scope !94
  %271 = sext <8 x i16> %270 to <8 x i32>
  %272 = mul nsw <8 x i32> %250, %271
  %273 = trunc i64 %266 to i32
  %274 = add nsw i32 %193, %273
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %275
  %277 = bitcast i16* %276 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 16, !alias.scope !94
  %279 = sext <8 x i16> %278 to <8 x i32>
  %280 = mul nsw <8 x i32> %252, %279
  %281 = add nsw <8 x i32> %280, %272
  %282 = add nsw i32 %196, %273
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %283
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 16, !alias.scope !94
  %287 = sext <8 x i16> %286 to <8 x i32>
  %288 = mul nsw <8 x i32> %254, %287
  %289 = add nsw <8 x i32> %288, %281
  %290 = add nsw i32 %199, %273
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %291
  %293 = bitcast i16* %292 to <8 x i16>*
  %294 = load <8 x i16>, <8 x i16>* %293, align 16, !alias.scope !94
  %295 = sext <8 x i16> %294 to <8 x i32>
  %296 = mul nsw <8 x i32> %256, %295
  %297 = add nsw <8 x i32> %296, %289
  %298 = add nsw i32 %202, %273
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %299
  %301 = bitcast i16* %300 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 16, !alias.scope !94
  %303 = sext <8 x i16> %302 to <8 x i32>
  %304 = mul nsw <8 x i32> %258, %303
  %305 = add nsw <8 x i32> %304, %297
  %306 = add nsw i32 %205, %273
  %307 = sext i32 %306 to i64
  %308 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %307
  %309 = bitcast i16* %308 to <8 x i16>*
  %310 = load <8 x i16>, <8 x i16>* %309, align 16, !alias.scope !94
  %311 = sext <8 x i16> %310 to <8 x i32>
  %312 = mul nsw <8 x i32> %260, %311
  %313 = add nsw <8 x i32> %312, %305
  %314 = add nsw i32 %208, %273
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %315
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 16, !alias.scope !94
  %319 = sext <8 x i16> %318 to <8 x i32>
  %320 = mul nsw <8 x i32> %262, %319
  %321 = add nsw <8 x i32> %320, %313
  %322 = add nsw i32 %211, %273
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %323
  %325 = bitcast i16* %324 to <8 x i16>*
  %326 = load <8 x i16>, <8 x i16>* %325, align 16, !alias.scope !94
  %327 = sext <8 x i16> %326 to <8 x i32>
  %328 = mul nsw <8 x i32> %264, %327
  %329 = add nsw <8 x i32> %328, %321
  %330 = add nsw <8 x i32> %329, <i32 512, i32 512, i32 512, i32 512, i32 512, i32 512, i32 512, i32 512>
  %331 = ashr <8 x i32> %330, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %332 = icmp slt <8 x i32> %331, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %333 = select <8 x i1> %332, <8 x i32> %331, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %334 = icmp sgt <8 x i32> %333, zeroinitializer
  %335 = select <8 x i1> %334, <8 x i32> %333, <8 x i32> zeroinitializer
  %336 = trunc <8 x i32> %335 to <8 x i8>
  %337 = getelementptr inbounds i8, i8* %161, i64 %266
  %338 = bitcast i8* %337 to <8 x i8>*
  store <8 x i8> %336, <8 x i8>* %338, align 1, !alias.scope !97, !noalias !94
  %339 = add i64 %266, 8
  %340 = icmp eq i64 %339, %157
  br i1 %340, label %341, label %265, !llvm.loop !99

341:                                              ; preds = %265
  br i1 %158, label %411, label %342

342:                                              ; preds = %341, %240, %212, %159
  %343 = phi i64 [ 0, %240 ], [ 0, %212 ], [ 0, %159 ], [ %157, %341 ]
  br label %344

344:                                              ; preds = %342, %344
  %345 = phi i64 [ %409, %344 ], [ %343, %342 ]
  %346 = add nsw i64 %345, %188
  %347 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %346
  %348 = load i16, i16* %347, align 2
  %349 = sext i16 %348 to i32
  %350 = mul nsw i32 %349, %186
  %351 = trunc i64 %345 to i32
  %352 = add nsw i32 %193, %351
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %353
  %355 = load i16, i16* %354, align 2
  %356 = sext i16 %355 to i32
  %357 = mul nsw i32 %356, %191
  %358 = add nsw i32 %357, %350
  %359 = add nsw i32 %196, %351
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %360
  %362 = load i16, i16* %361, align 2
  %363 = sext i16 %362 to i32
  %364 = mul nsw i32 %363, %194
  %365 = add nsw i32 %364, %358
  %366 = add nsw i32 %199, %351
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %367
  %369 = load i16, i16* %368, align 2
  %370 = sext i16 %369 to i32
  %371 = mul nsw i32 %370, %197
  %372 = add nsw i32 %371, %365
  %373 = add nsw i32 %202, %351
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %374
  %376 = load i16, i16* %375, align 2
  %377 = sext i16 %376 to i32
  %378 = mul nsw i32 %377, %200
  %379 = add nsw i32 %378, %372
  %380 = add nsw i32 %205, %351
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %381
  %383 = load i16, i16* %382, align 2
  %384 = sext i16 %383 to i32
  %385 = mul nsw i32 %384, %203
  %386 = add nsw i32 %385, %379
  %387 = add nsw i32 %208, %351
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %388
  %390 = load i16, i16* %389, align 2
  %391 = sext i16 %390 to i32
  %392 = mul nsw i32 %391, %206
  %393 = add nsw i32 %392, %386
  %394 = add nsw i32 %211, %351
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %395
  %397 = load i16, i16* %396, align 2
  %398 = sext i16 %397 to i32
  %399 = mul nsw i32 %398, %209
  %400 = add nsw i32 %399, %393
  %401 = add nsw i32 %400, 512
  %402 = ashr i32 %401, 10
  %403 = icmp slt i32 %402, 255
  %404 = select i1 %403, i32 %402, i32 255
  %405 = icmp sgt i32 %404, 0
  %406 = select i1 %405, i32 %404, i32 0
  %407 = trunc i32 %406 to i8
  %408 = getelementptr inbounds i8, i8* %161, i64 %345
  store i8 %407, i8* %408, align 1
  %409 = add nuw nsw i64 %345, 1
  %410 = icmp slt i64 %409, %32
  br i1 %410, label %344, label %411, !llvm.loop !100

411:                                              ; preds = %344, %341
  %412 = getelementptr inbounds i8, i8* %161, i64 %11
  %413 = add nsw i32 %163, %7
  %414 = add nuw nsw i32 %162, 1
  %415 = icmp slt i32 %414, %9
  %416 = add i64 %160, 1
  br i1 %415, label %159, label %417

417:                                              ; preds = %411
  call void @llvm.lifetime.end.p0i8(i64 67584, i8* nonnull %18) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_125ConvolveCompoundScale2D_CILi8EhEEvPKvliiiiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #0 {
  %13 = alloca [33792 x i16], align 16
  %14 = add nsw i32 %9, -1
  %15 = mul nsw i32 %14, %7
  %16 = add nsw i32 %15, 1023
  %17 = ashr i32 %16, 10
  %18 = bitcast [33792 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 67584, i8* nonnull %18) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 67584, i1 false)
  %19 = icmp slt i32 %8, 5
  br i1 %19, label %20, label %25

20:                                               ; preds = %12
  %21 = and i32 %2, -3
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %20
  %24 = icmp eq i32 %2, 1
  br i1 %24, label %27, label %25

25:                                               ; preds = %23, %12
  %26 = sext i32 %2 to i64
  br label %27

27:                                               ; preds = %20, %23, %25
  %28 = phi i64 [ %26, %25 ], [ 4, %20 ], [ 5, %23 ]
  %29 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 0
  %30 = ashr i32 %4, 10
  %31 = add nsw i32 %17, 7
  %32 = sext i32 %8 to i64
  br label %33

33:                                               ; preds = %116, %27
  %34 = phi i16* [ %29, %27 ], [ %118, %116 ]
  %35 = phi i8* [ %0, %27 ], [ %117, %116 ]
  %36 = phi i32 [ 0, %27 ], [ %119, %116 ]
  br label %37

37:                                               ; preds = %37, %33
  %38 = phi i64 [ %114, %37 ], [ 0, %33 ]
  %39 = phi i32 [ %113, %37 ], [ %4, %33 ]
  %40 = ashr i32 %39, 10
  %41 = sub nsw i32 %40, %30
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %35, i64 %42
  %44 = lshr i32 %39, 6
  %45 = and i32 %44, 15
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 0
  %48 = load i8, i8* %47, align 8
  %49 = sext i8 %48 to i32
  %50 = load i8, i8* %43, align 1
  %51 = zext i8 %50 to i32
  %52 = mul nsw i32 %51, %49
  %53 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 1
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = getelementptr inbounds i8, i8* %43, i64 1
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = mul nsw i32 %58, %55
  %60 = add nsw i32 %59, %52
  %61 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 2
  %62 = load i8, i8* %61, align 2
  %63 = sext i8 %62 to i32
  %64 = getelementptr inbounds i8, i8* %43, i64 2
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = mul nsw i32 %66, %63
  %68 = add nsw i32 %67, %60
  %69 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 3
  %70 = load i8, i8* %69, align 1
  %71 = sext i8 %70 to i32
  %72 = getelementptr inbounds i8, i8* %43, i64 3
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = mul nsw i32 %74, %71
  %76 = add nsw i32 %75, %68
  %77 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 4
  %78 = load i8, i8* %77, align 4
  %79 = sext i8 %78 to i32
  %80 = getelementptr inbounds i8, i8* %43, i64 4
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = mul nsw i32 %82, %79
  %84 = add nsw i32 %83, %76
  %85 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 5
  %86 = load i8, i8* %85, align 1
  %87 = sext i8 %86 to i32
  %88 = getelementptr inbounds i8, i8* %43, i64 5
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = mul nsw i32 %90, %87
  %92 = add nsw i32 %91, %84
  %93 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 6
  %94 = load i8, i8* %93, align 2
  %95 = sext i8 %94 to i32
  %96 = getelementptr inbounds i8, i8* %43, i64 6
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = mul nsw i32 %98, %95
  %100 = add nsw i32 %99, %92
  %101 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %46, i64 7
  %102 = load i8, i8* %101, align 1
  %103 = sext i8 %102 to i32
  %104 = getelementptr inbounds i8, i8* %43, i64 7
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = mul nsw i32 %106, %103
  %108 = add nsw i32 %107, %100
  %109 = add nsw i32 %108, 2
  %110 = lshr i32 %109, 2
  %111 = trunc i32 %110 to i16
  %112 = getelementptr inbounds i16, i16* %34, i64 %38
  store i16 %111, i16* %112, align 2
  %113 = add nsw i32 %39, %6
  %114 = add nuw nsw i64 %38, 1
  %115 = icmp slt i64 %114, %32
  br i1 %115, label %37, label %116

116:                                              ; preds = %37
  %117 = getelementptr inbounds i8, i8* %35, i64 %1
  %118 = getelementptr inbounds i16, i16* %34, i64 128
  %119 = add nuw nsw i32 %36, 1
  %120 = icmp slt i32 %36, %31
  br i1 %120, label %33, label %121

121:                                              ; preds = %116
  %122 = bitcast i8* %10 to i16*
  %123 = icmp slt i32 %9, 5
  br i1 %123, label %124, label %129

124:                                              ; preds = %121
  %125 = and i32 %3, -3
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %131, label %127

127:                                              ; preds = %124
  %128 = icmp eq i32 %3, 1
  br i1 %128, label %131, label %129

129:                                              ; preds = %127, %121
  %130 = sext i32 %3 to i64
  br label %131

131:                                              ; preds = %124, %127, %129
  %132 = phi i64 [ %130, %129 ], [ 4, %124 ], [ 5, %127 ]
  %133 = and i32 %5, 1023
  %134 = icmp sgt i64 %32, 1
  %135 = select i1 %134, i64 %32, i64 1
  %136 = icmp sgt i64 %32, 1
  %137 = select i1 %136, i64 %32, i64 1
  %138 = add nsw i64 %137, -1
  %139 = shl i64 %11, 1
  %140 = icmp sgt i64 %32, 1
  %141 = select i1 %140, i64 %32, i64 1
  %142 = shl nuw nsw i64 %141, 1
  %143 = add nuw nsw i64 %141, 896
  %144 = getelementptr [33792 x i16], [33792 x i16]* %13, i64 0, i64 %143
  %145 = icmp ult i64 %135, 8
  %146 = trunc i64 %138 to i32
  %147 = icmp ugt i64 %138, 4294967295
  %148 = trunc i64 %138 to i32
  %149 = icmp ugt i64 %138, 4294967295
  %150 = trunc i64 %138 to i32
  %151 = icmp ugt i64 %138, 4294967295
  %152 = trunc i64 %138 to i32
  %153 = icmp ugt i64 %138, 4294967295
  %154 = trunc i64 %138 to i32
  %155 = icmp ugt i64 %138, 4294967295
  %156 = trunc i64 %138 to i32
  %157 = icmp ugt i64 %138, 4294967295
  %158 = trunc i64 %138 to i32
  %159 = icmp ugt i64 %138, 4294967295
  %160 = and i64 %135, 9223372036854775800
  %161 = icmp eq i64 %135, %160
  br label %162

162:                                              ; preds = %406, %131
  %163 = phi i64 [ %411, %406 ], [ 0, %131 ]
  %164 = phi i16* [ %407, %406 ], [ %122, %131 ]
  %165 = phi i32 [ %409, %406 ], [ 0, %131 ]
  %166 = phi i32 [ %408, %406 ], [ %133, %131 ]
  %167 = mul i64 %139, %163
  %168 = getelementptr i8, i8* %10, i64 %167
  %169 = add i64 %142, %167
  %170 = getelementptr i8, i8* %10, i64 %169
  %171 = lshr i32 %166, 6
  %172 = and i32 %171, 15
  %173 = zext i32 %172 to i64
  %174 = ashr i32 %166, 10
  %175 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %132, i64 %173, i64 0
  %176 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %132, i64 %173, i64 1
  %177 = load i8, i8* %176, align 1
  %178 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %132, i64 %173, i64 2
  %179 = load i8, i8* %178, align 2
  %180 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %132, i64 %173, i64 3
  %181 = load i8, i8* %180, align 1
  %182 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %132, i64 %173, i64 4
  %183 = load i8, i8* %182, align 4
  %184 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %132, i64 %173, i64 5
  %185 = load i8, i8* %184, align 1
  %186 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %132, i64 %173, i64 6
  %187 = load i8, i8* %186, align 2
  %188 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %132, i64 %173, i64 7
  %189 = load i8, i8* %188, align 1
  %190 = load i8, i8* %175, align 8
  %191 = sext i8 %190 to i32
  %192 = shl nsw i32 %174, 7
  %193 = sext i32 %192 to i64
  %194 = sext i8 %177 to i32
  %195 = shl nsw i32 %174, 7
  %196 = add nsw i32 %195, 128
  %197 = sext i8 %179 to i32
  %198 = shl nsw i32 %174, 7
  %199 = add nsw i32 %198, 256
  %200 = sext i8 %181 to i32
  %201 = shl nsw i32 %174, 7
  %202 = add nsw i32 %201, 384
  %203 = sext i8 %183 to i32
  %204 = shl nsw i32 %174, 7
  %205 = add nsw i32 %204, 512
  %206 = sext i8 %185 to i32
  %207 = shl nsw i32 %174, 7
  %208 = add nsw i32 %207, 640
  %209 = sext i8 %187 to i32
  %210 = shl nsw i32 %174, 7
  %211 = add nsw i32 %210, 768
  %212 = sext i8 %189 to i32
  %213 = shl nsw i32 %174, 7
  %214 = add nsw i32 %213, 896
  br i1 %145, label %341, label %215

215:                                              ; preds = %162
  %216 = add i32 %196, %146
  %217 = icmp slt i32 %216, %196
  %218 = or i1 %217, %147
  %219 = add i32 %199, %148
  %220 = icmp slt i32 %219, %199
  %221 = or i1 %220, %149
  %222 = or i1 %218, %221
  %223 = add i32 %202, %150
  %224 = icmp slt i32 %223, %202
  %225 = or i1 %224, %151
  %226 = or i1 %222, %225
  %227 = add i32 %205, %152
  %228 = icmp slt i32 %227, %205
  %229 = or i1 %228, %153
  %230 = or i1 %226, %229
  %231 = add i32 %208, %154
  %232 = icmp slt i32 %231, %208
  %233 = or i1 %232, %155
  %234 = or i1 %230, %233
  %235 = add i32 %211, %156
  %236 = icmp slt i32 %235, %211
  %237 = or i1 %236, %157
  %238 = or i1 %234, %237
  %239 = add i32 %214, %158
  %240 = icmp slt i32 %239, %214
  %241 = or i1 %240, %159
  %242 = or i1 %238, %241
  br i1 %242, label %341, label %243

243:                                              ; preds = %215
  %244 = getelementptr [33792 x i16], [33792 x i16]* %13, i64 0, i64 %193
  %245 = bitcast i16* %244 to i8*
  %246 = getelementptr i16, i16* %144, i64 %193
  %247 = bitcast i16* %246 to i8*
  %248 = icmp ult i8* %168, %247
  %249 = icmp ugt i8* %170, %245
  %250 = and i1 %248, %249
  br i1 %250, label %341, label %251

251:                                              ; preds = %243
  %252 = insertelement <8 x i32> undef, i32 %191, i32 0
  %253 = shufflevector <8 x i32> %252, <8 x i32> undef, <8 x i32> zeroinitializer
  %254 = insertelement <8 x i32> undef, i32 %194, i32 0
  %255 = shufflevector <8 x i32> %254, <8 x i32> undef, <8 x i32> zeroinitializer
  %256 = insertelement <8 x i32> undef, i32 %197, i32 0
  %257 = shufflevector <8 x i32> %256, <8 x i32> undef, <8 x i32> zeroinitializer
  %258 = insertelement <8 x i32> undef, i32 %200, i32 0
  %259 = shufflevector <8 x i32> %258, <8 x i32> undef, <8 x i32> zeroinitializer
  %260 = insertelement <8 x i32> undef, i32 %203, i32 0
  %261 = shufflevector <8 x i32> %260, <8 x i32> undef, <8 x i32> zeroinitializer
  %262 = insertelement <8 x i32> undef, i32 %206, i32 0
  %263 = shufflevector <8 x i32> %262, <8 x i32> undef, <8 x i32> zeroinitializer
  %264 = insertelement <8 x i32> undef, i32 %209, i32 0
  %265 = shufflevector <8 x i32> %264, <8 x i32> undef, <8 x i32> zeroinitializer
  %266 = insertelement <8 x i32> undef, i32 %212, i32 0
  %267 = shufflevector <8 x i32> %266, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %268

268:                                              ; preds = %268, %251
  %269 = phi i64 [ 0, %251 ], [ %338, %268 ]
  %270 = add nsw i64 %269, %193
  %271 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %270
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 16, !alias.scope !101
  %274 = sext <8 x i16> %273 to <8 x i32>
  %275 = mul nsw <8 x i32> %253, %274
  %276 = trunc i64 %269 to i32
  %277 = add nsw i32 %196, %276
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %278
  %280 = bitcast i16* %279 to <8 x i16>*
  %281 = load <8 x i16>, <8 x i16>* %280, align 16, !alias.scope !101
  %282 = sext <8 x i16> %281 to <8 x i32>
  %283 = mul nsw <8 x i32> %255, %282
  %284 = add nsw <8 x i32> %283, %275
  %285 = add nsw i32 %199, %276
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %286
  %288 = bitcast i16* %287 to <8 x i16>*
  %289 = load <8 x i16>, <8 x i16>* %288, align 16, !alias.scope !101
  %290 = sext <8 x i16> %289 to <8 x i32>
  %291 = mul nsw <8 x i32> %257, %290
  %292 = add nsw <8 x i32> %291, %284
  %293 = add nsw i32 %202, %276
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %294
  %296 = bitcast i16* %295 to <8 x i16>*
  %297 = load <8 x i16>, <8 x i16>* %296, align 16, !alias.scope !101
  %298 = sext <8 x i16> %297 to <8 x i32>
  %299 = mul nsw <8 x i32> %259, %298
  %300 = add nsw <8 x i32> %299, %292
  %301 = add nsw i32 %205, %276
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %302
  %304 = bitcast i16* %303 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 16, !alias.scope !101
  %306 = sext <8 x i16> %305 to <8 x i32>
  %307 = mul nsw <8 x i32> %261, %306
  %308 = add nsw <8 x i32> %307, %300
  %309 = add nsw i32 %208, %276
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %310
  %312 = bitcast i16* %311 to <8 x i16>*
  %313 = load <8 x i16>, <8 x i16>* %312, align 16, !alias.scope !101
  %314 = sext <8 x i16> %313 to <8 x i32>
  %315 = mul nsw <8 x i32> %263, %314
  %316 = add nsw <8 x i32> %315, %308
  %317 = add nsw i32 %211, %276
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %318
  %320 = bitcast i16* %319 to <8 x i16>*
  %321 = load <8 x i16>, <8 x i16>* %320, align 16, !alias.scope !101
  %322 = sext <8 x i16> %321 to <8 x i32>
  %323 = mul nsw <8 x i32> %265, %322
  %324 = add nsw <8 x i32> %323, %316
  %325 = add nsw i32 %214, %276
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %326
  %328 = bitcast i16* %327 to <8 x i16>*
  %329 = load <8 x i16>, <8 x i16>* %328, align 16, !alias.scope !101
  %330 = sext <8 x i16> %329 to <8 x i32>
  %331 = mul nsw <8 x i32> %267, %330
  %332 = add nsw <8 x i32> %331, %324
  %333 = add nsw <8 x i32> %332, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %334 = lshr <8 x i32> %333, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %335 = trunc <8 x i32> %334 to <8 x i16>
  %336 = getelementptr inbounds i16, i16* %164, i64 %269
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %335, <8 x i16>* %337, align 2, !alias.scope !104, !noalias !101
  %338 = add i64 %269, 8
  %339 = icmp eq i64 %338, %160
  br i1 %339, label %340, label %268, !llvm.loop !106

340:                                              ; preds = %268
  br i1 %161, label %406, label %341

341:                                              ; preds = %340, %243, %215, %162
  %342 = phi i64 [ 0, %243 ], [ 0, %215 ], [ 0, %162 ], [ %160, %340 ]
  br label %343

343:                                              ; preds = %341, %343
  %344 = phi i64 [ %404, %343 ], [ %342, %341 ]
  %345 = add nsw i64 %344, %193
  %346 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %345
  %347 = load i16, i16* %346, align 2
  %348 = sext i16 %347 to i32
  %349 = mul nsw i32 %348, %191
  %350 = trunc i64 %344 to i32
  %351 = add nsw i32 %196, %350
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %352
  %354 = load i16, i16* %353, align 2
  %355 = sext i16 %354 to i32
  %356 = mul nsw i32 %355, %194
  %357 = add nsw i32 %356, %349
  %358 = add nsw i32 %199, %350
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %359
  %361 = load i16, i16* %360, align 2
  %362 = sext i16 %361 to i32
  %363 = mul nsw i32 %362, %197
  %364 = add nsw i32 %363, %357
  %365 = add nsw i32 %202, %350
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %366
  %368 = load i16, i16* %367, align 2
  %369 = sext i16 %368 to i32
  %370 = mul nsw i32 %369, %200
  %371 = add nsw i32 %370, %364
  %372 = add nsw i32 %205, %350
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %373
  %375 = load i16, i16* %374, align 2
  %376 = sext i16 %375 to i32
  %377 = mul nsw i32 %376, %203
  %378 = add nsw i32 %377, %371
  %379 = add nsw i32 %208, %350
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %380
  %382 = load i16, i16* %381, align 2
  %383 = sext i16 %382 to i32
  %384 = mul nsw i32 %383, %206
  %385 = add nsw i32 %384, %378
  %386 = add nsw i32 %211, %350
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %387
  %389 = load i16, i16* %388, align 2
  %390 = sext i16 %389 to i32
  %391 = mul nsw i32 %390, %209
  %392 = add nsw i32 %391, %385
  %393 = add nsw i32 %214, %350
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %394
  %396 = load i16, i16* %395, align 2
  %397 = sext i16 %396 to i32
  %398 = mul nsw i32 %397, %212
  %399 = add nsw i32 %398, %392
  %400 = add nsw i32 %399, 32
  %401 = lshr i32 %400, 6
  %402 = trunc i32 %401 to i16
  %403 = getelementptr inbounds i16, i16* %164, i64 %344
  store i16 %402, i16* %403, align 2
  %404 = add nuw nsw i64 %344, 1
  %405 = icmp slt i64 %404, %32
  br i1 %405, label %343, label %406, !llvm.loop !107

406:                                              ; preds = %343, %340
  %407 = getelementptr inbounds i16, i16* %164, i64 %11
  %408 = add nsw i32 %166, %7
  %409 = add nuw nsw i32 %165, 1
  %410 = icmp slt i32 %409, %9
  %411 = add i64 %163, 1
  br i1 %410, label %162, label %412

412:                                              ; preds = %406
  call void @llvm.lifetime.end.p0i8(i64 67584, i8* nonnull %18) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_114ConvolveCopy_CILi10EtEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #0 {
  %11 = sext i32 %6 to i64
  %12 = shl nsw i64 %11, 1
  br label %13

13:                                               ; preds = %13, %10
  %14 = phi i8* [ %0, %10 ], [ %17, %13 ]
  %15 = phi i8* [ %8, %10 ], [ %18, %13 ]
  %16 = phi i32 [ 0, %10 ], [ %19, %13 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %14, i64 %12, i1 false)
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  %18 = getelementptr inbounds i8, i8* %15, i64 %9
  %19 = add nuw nsw i32 %16, 1
  %20 = icmp slt i32 %19, %7
  br i1 %20, label %13, label %21

21:                                               ; preds = %13
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_120ConvolveHorizontal_CILi10EtEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = icmp slt i32 %6, 5
  br i1 %11, label %12, label %17

12:                                               ; preds = %10
  %13 = and i32 %2, -3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = icmp eq i32 %2, 1
  br i1 %16, label %19, label %17

17:                                               ; preds = %15, %10
  %18 = sext i32 %2 to i64
  br label %19

19:                                               ; preds = %12, %15, %17
  %20 = phi i64 [ %18, %17 ], [ 4, %12 ], [ 5, %15 ]
  %21 = getelementptr inbounds i8, i8* %0, i64 -6
  %22 = bitcast i8* %21 to i16*
  %23 = lshr i64 %1, 1
  %24 = bitcast i8* %8 to i16*
  %25 = lshr i64 %9, 1
  %26 = sext i32 %4 to i64
  %27 = sext i32 %6 to i64
  %28 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 0
  %29 = load i8, i8* %28, align 8
  %30 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 1
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 2
  %33 = load i8, i8* %32, align 2
  %34 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 4
  %37 = load i8, i8* %36, align 4
  %38 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 5
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 6
  %41 = load i8, i8* %40, align 2
  %42 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 7
  %43 = load i8, i8* %42, align 1
  %44 = sext i8 %29 to i32
  %45 = sext i8 %31 to i32
  %46 = sext i8 %33 to i32
  %47 = sext i8 %35 to i32
  %48 = sext i8 %37 to i32
  %49 = sext i8 %39 to i32
  %50 = sext i8 %41 to i32
  %51 = sext i8 %43 to i32
  %52 = icmp sgt i64 %27, 1
  %53 = select i1 %52, i64 %27, i64 1
  %54 = and i64 %9, -2
  %55 = icmp sgt i64 %27, 1
  %56 = select i1 %55, i64 %27, i64 1
  %57 = shl nuw nsw i64 %56, 1
  %58 = and i64 %1, -2
  %59 = add nuw nsw i64 %57, 8
  %60 = icmp ult i64 %53, 8
  %61 = and i64 %53, 9223372036854775800
  %62 = insertelement <8 x i32> undef, i32 %44, i32 0
  %63 = shufflevector <8 x i32> %62, <8 x i32> undef, <8 x i32> zeroinitializer
  %64 = insertelement <8 x i32> undef, i32 %45, i32 0
  %65 = shufflevector <8 x i32> %64, <8 x i32> undef, <8 x i32> zeroinitializer
  %66 = insertelement <8 x i32> undef, i32 %46, i32 0
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <8 x i32> zeroinitializer
  %68 = insertelement <8 x i32> undef, i32 %47, i32 0
  %69 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> zeroinitializer
  %70 = insertelement <8 x i32> undef, i32 %48, i32 0
  %71 = shufflevector <8 x i32> %70, <8 x i32> undef, <8 x i32> zeroinitializer
  %72 = insertelement <8 x i32> undef, i32 %49, i32 0
  %73 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> zeroinitializer
  %74 = insertelement <8 x i32> undef, i32 %50, i32 0
  %75 = shufflevector <8 x i32> %74, <8 x i32> undef, <8 x i32> zeroinitializer
  %76 = insertelement <8 x i32> undef, i32 %51, i32 0
  %77 = shufflevector <8 x i32> %76, <8 x i32> undef, <8 x i32> zeroinitializer
  %78 = icmp eq i64 %53, %61
  br label %79

79:                                               ; preds = %228, %19
  %80 = phi i64 [ %233, %228 ], [ 0, %19 ]
  %81 = phi i16* [ %229, %228 ], [ %22, %19 ]
  %82 = phi i16* [ %230, %228 ], [ %24, %19 ]
  %83 = phi i32 [ %231, %228 ], [ 0, %19 ]
  %84 = mul i64 %54, %80
  %85 = mul i64 %58, %80
  br i1 %60, label %167, label %86

86:                                               ; preds = %79
  %87 = add i64 %59, %85
  %88 = getelementptr i8, i8* %0, i64 %87
  %89 = add i64 %85, -6
  %90 = getelementptr i8, i8* %0, i64 %89
  %91 = add i64 %57, %84
  %92 = getelementptr i8, i8* %8, i64 %91
  %93 = getelementptr i8, i8* %8, i64 %84
  %94 = icmp ult i8* %93, %88
  %95 = icmp ult i8* %90, %92
  %96 = and i1 %94, %95
  br i1 %96, label %167, label %97

97:                                               ; preds = %86, %97
  %98 = phi i64 [ %164, %97 ], [ 0, %86 ]
  %99 = getelementptr inbounds i16, i16* %81, i64 %98
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !108
  %102 = zext <8 x i16> %101 to <8 x i32>
  %103 = mul nsw <8 x i32> %63, %102
  %104 = or i64 %98, 1
  %105 = getelementptr inbounds i16, i16* %81, i64 %104
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !108
  %108 = zext <8 x i16> %107 to <8 x i32>
  %109 = mul nsw <8 x i32> %65, %108
  %110 = add nsw <8 x i32> %109, %103
  %111 = or i64 %98, 2
  %112 = getelementptr inbounds i16, i16* %81, i64 %111
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2, !alias.scope !108
  %115 = zext <8 x i16> %114 to <8 x i32>
  %116 = mul nsw <8 x i32> %67, %115
  %117 = add nsw <8 x i32> %116, %110
  %118 = or i64 %98, 3
  %119 = getelementptr inbounds i16, i16* %81, i64 %118
  %120 = bitcast i16* %119 to <8 x i16>*
  %121 = load <8 x i16>, <8 x i16>* %120, align 2, !alias.scope !108
  %122 = zext <8 x i16> %121 to <8 x i32>
  %123 = mul nsw <8 x i32> %69, %122
  %124 = add nsw <8 x i32> %123, %117
  %125 = or i64 %98, 4
  %126 = getelementptr inbounds i16, i16* %81, i64 %125
  %127 = bitcast i16* %126 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 2, !alias.scope !108
  %129 = zext <8 x i16> %128 to <8 x i32>
  %130 = mul nsw <8 x i32> %71, %129
  %131 = add nsw <8 x i32> %130, %124
  %132 = or i64 %98, 5
  %133 = getelementptr inbounds i16, i16* %81, i64 %132
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !108
  %136 = zext <8 x i16> %135 to <8 x i32>
  %137 = mul nsw <8 x i32> %73, %136
  %138 = add nsw <8 x i32> %137, %131
  %139 = or i64 %98, 6
  %140 = getelementptr inbounds i16, i16* %81, i64 %139
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 2, !alias.scope !108
  %143 = zext <8 x i16> %142 to <8 x i32>
  %144 = mul nsw <8 x i32> %75, %143
  %145 = add nsw <8 x i32> %144, %138
  %146 = or i64 %98, 7
  %147 = getelementptr inbounds i16, i16* %81, i64 %146
  %148 = bitcast i16* %147 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 2, !alias.scope !108
  %150 = zext <8 x i16> %149 to <8 x i32>
  %151 = mul nsw <8 x i32> %77, %150
  %152 = add nsw <8 x i32> %151, %145
  %153 = add nsw <8 x i32> %152, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %154 = ashr <8 x i32> %153, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %155 = add nsw <8 x i32> %154, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %156 = ashr <8 x i32> %155, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %157 = icmp slt <8 x i32> %156, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %158 = select <8 x i1> %157, <8 x i32> %156, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %159 = icmp sgt <8 x i32> %158, zeroinitializer
  %160 = select <8 x i1> %159, <8 x i32> %158, <8 x i32> zeroinitializer
  %161 = trunc <8 x i32> %160 to <8 x i16>
  %162 = getelementptr inbounds i16, i16* %82, i64 %98
  %163 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %163, align 2, !alias.scope !111, !noalias !108
  %164 = add i64 %98, 8
  %165 = icmp eq i64 %164, %61
  br i1 %165, label %166, label %97, !llvm.loop !113

166:                                              ; preds = %97
  br i1 %78, label %228, label %167

167:                                              ; preds = %166, %86, %79
  %168 = phi i64 [ 0, %86 ], [ 0, %79 ], [ %61, %166 ]
  br label %169

169:                                              ; preds = %167, %169
  %170 = phi i64 [ %175, %169 ], [ %168, %167 ]
  %171 = getelementptr inbounds i16, i16* %81, i64 %170
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = mul nsw i32 %173, %44
  %175 = add nuw nsw i64 %170, 1
  %176 = getelementptr inbounds i16, i16* %81, i64 %175
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nsw i32 %178, %45
  %180 = add nsw i32 %179, %174
  %181 = add nuw nsw i64 %170, 2
  %182 = getelementptr inbounds i16, i16* %81, i64 %181
  %183 = load i16, i16* %182, align 2
  %184 = zext i16 %183 to i32
  %185 = mul nsw i32 %184, %46
  %186 = add nsw i32 %185, %180
  %187 = add nuw nsw i64 %170, 3
  %188 = getelementptr inbounds i16, i16* %81, i64 %187
  %189 = load i16, i16* %188, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nsw i32 %190, %47
  %192 = add nsw i32 %191, %186
  %193 = add nuw nsw i64 %170, 4
  %194 = getelementptr inbounds i16, i16* %81, i64 %193
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = mul nsw i32 %196, %48
  %198 = add nsw i32 %197, %192
  %199 = add nuw nsw i64 %170, 5
  %200 = getelementptr inbounds i16, i16* %81, i64 %199
  %201 = load i16, i16* %200, align 2
  %202 = zext i16 %201 to i32
  %203 = mul nsw i32 %202, %49
  %204 = add nsw i32 %203, %198
  %205 = add nuw nsw i64 %170, 6
  %206 = getelementptr inbounds i16, i16* %81, i64 %205
  %207 = load i16, i16* %206, align 2
  %208 = zext i16 %207 to i32
  %209 = mul nsw i32 %208, %50
  %210 = add nsw i32 %209, %204
  %211 = add nuw nsw i64 %170, 7
  %212 = getelementptr inbounds i16, i16* %81, i64 %211
  %213 = load i16, i16* %212, align 2
  %214 = zext i16 %213 to i32
  %215 = mul nsw i32 %214, %51
  %216 = add nsw i32 %215, %210
  %217 = add nsw i32 %216, 2
  %218 = ashr i32 %217, 2
  %219 = add nsw i32 %218, 8
  %220 = ashr i32 %219, 4
  %221 = icmp slt i32 %220, 1023
  %222 = select i1 %221, i32 %220, i32 1023
  %223 = icmp sgt i32 %222, 0
  %224 = select i1 %223, i32 %222, i32 0
  %225 = trunc i32 %224 to i16
  %226 = getelementptr inbounds i16, i16* %82, i64 %170
  store i16 %225, i16* %226, align 2
  %227 = icmp slt i64 %175, %27
  br i1 %227, label %169, label %228, !llvm.loop !114

228:                                              ; preds = %169, %166
  %229 = getelementptr inbounds i16, i16* %81, i64 %23
  %230 = getelementptr inbounds i16, i16* %82, i64 %25
  %231 = add nuw nsw i32 %83, 1
  %232 = icmp slt i32 %231, %7
  %233 = add i64 %80, 1
  br i1 %232, label %79, label %234

234:                                              ; preds = %228
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_118ConvolveVertical_CILi10EtEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = icmp slt i32 %7, 5
  br i1 %11, label %12, label %17

12:                                               ; preds = %10
  %13 = and i32 %3, -3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = icmp eq i32 %3, 1
  br i1 %16, label %19, label %17

17:                                               ; preds = %15, %10
  %18 = sext i32 %3 to i64
  br label %19

19:                                               ; preds = %12, %15, %17
  %20 = phi i64 [ %18, %17 ], [ 4, %12 ], [ 5, %15 ]
  %21 = lshr i64 %1, 1
  %22 = bitcast i8* %0 to i16*
  %23 = mul i64 %21, -3
  %24 = getelementptr inbounds i16, i16* %22, i64 %23
  %25 = bitcast i8* %8 to i16*
  %26 = lshr i64 %9, 1
  %27 = sext i32 %5 to i64
  %28 = sext i32 %6 to i64
  %29 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %27, i64 0
  %30 = load i8, i8* %29, align 8
  %31 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %27, i64 1
  %32 = load i8, i8* %31, align 1
  %33 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %27, i64 2
  %34 = load i8, i8* %33, align 2
  %35 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %27, i64 3
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %27, i64 4
  %38 = load i8, i8* %37, align 4
  %39 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %27, i64 5
  %40 = load i8, i8* %39, align 1
  %41 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %27, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %27, i64 7
  %44 = load i8, i8* %43, align 1
  %45 = sext i8 %30 to i32
  %46 = sext i8 %32 to i32
  %47 = sext i8 %34 to i32
  %48 = and i64 %1, -2
  %49 = sext i8 %36 to i32
  %50 = mul nuw nsw i64 %21, 3
  %51 = sext i8 %38 to i32
  %52 = shl nuw nsw i64 %21, 2
  %53 = sext i8 %40 to i32
  %54 = mul nuw nsw i64 %21, 5
  %55 = sext i8 %42 to i32
  %56 = mul nuw nsw i64 %21, 6
  %57 = sext i8 %44 to i32
  %58 = mul nuw nsw i64 %21, 7
  %59 = icmp sgt i64 %28, 1
  %60 = select i1 %59, i64 %28, i64 1
  %61 = and i64 %9, -2
  %62 = icmp sgt i64 %28, 1
  %63 = select i1 %62, i64 %28, i64 1
  %64 = shl nuw nsw i64 %63, 1
  %65 = shl i64 %21, 3
  %66 = and i64 %1, -2
  %67 = add i64 %65, %64
  %68 = mul i64 %21, 6
  %69 = add i64 %68, %64
  %70 = shl i64 %21, 2
  %71 = add i64 %70, %64
  %72 = add i64 %64, %48
  %73 = mul i64 %21, -2
  %74 = sub i64 %64, %48
  %75 = mul i64 %21, -4
  %76 = sub i64 %64, %70
  %77 = mul i64 %21, -6
  %78 = sub i64 %64, %68
  %79 = icmp ult i64 %60, 8
  %80 = and i64 %60, 9223372036854775800
  %81 = insertelement <8 x i32> undef, i32 %45, i32 0
  %82 = shufflevector <8 x i32> %81, <8 x i32> undef, <8 x i32> zeroinitializer
  %83 = insertelement <8 x i32> undef, i32 %46, i32 0
  %84 = shufflevector <8 x i32> %83, <8 x i32> undef, <8 x i32> zeroinitializer
  %85 = insertelement <8 x i32> undef, i32 %47, i32 0
  %86 = shufflevector <8 x i32> %85, <8 x i32> undef, <8 x i32> zeroinitializer
  %87 = insertelement <8 x i32> undef, i32 %49, i32 0
  %88 = shufflevector <8 x i32> %87, <8 x i32> undef, <8 x i32> zeroinitializer
  %89 = insertelement <8 x i32> undef, i32 %51, i32 0
  %90 = shufflevector <8 x i32> %89, <8 x i32> undef, <8 x i32> zeroinitializer
  %91 = insertelement <8 x i32> undef, i32 %53, i32 0
  %92 = shufflevector <8 x i32> %91, <8 x i32> undef, <8 x i32> zeroinitializer
  %93 = insertelement <8 x i32> undef, i32 %55, i32 0
  %94 = shufflevector <8 x i32> %93, <8 x i32> undef, <8 x i32> zeroinitializer
  %95 = insertelement <8 x i32> undef, i32 %57, i32 0
  %96 = shufflevector <8 x i32> %95, <8 x i32> undef, <8 x i32> zeroinitializer
  %97 = icmp eq i64 %60, %80
  br label %98

98:                                               ; preds = %299, %19
  %99 = phi i64 [ %304, %299 ], [ 0, %19 ]
  %100 = phi i16* [ %300, %299 ], [ %24, %19 ]
  %101 = phi i16* [ %301, %299 ], [ %25, %19 ]
  %102 = phi i32 [ %302, %299 ], [ 0, %19 ]
  %103 = mul i64 %61, %99
  %104 = getelementptr i8, i8* %8, i64 %103
  %105 = add i64 %64, %103
  %106 = getelementptr i8, i8* %8, i64 %105
  %107 = mul i64 %66, %99
  br i1 %79, label %239, label %108

108:                                              ; preds = %98
  %109 = add i64 %78, %107
  %110 = getelementptr i8, i8* %0, i64 %109
  %111 = add i64 %77, %107
  %112 = getelementptr i8, i8* %0, i64 %111
  %113 = add i64 %76, %107
  %114 = getelementptr i8, i8* %0, i64 %113
  %115 = add i64 %75, %107
  %116 = getelementptr i8, i8* %0, i64 %115
  %117 = add i64 %74, %107
  %118 = getelementptr i8, i8* %0, i64 %117
  %119 = add i64 %73, %107
  %120 = getelementptr i8, i8* %0, i64 %119
  %121 = add i64 %64, %107
  %122 = getelementptr i8, i8* %0, i64 %121
  %123 = getelementptr i8, i8* %0, i64 %107
  %124 = add i64 %72, %107
  %125 = getelementptr i8, i8* %0, i64 %124
  %126 = add i64 %48, %107
  %127 = getelementptr i8, i8* %0, i64 %126
  %128 = add i64 %71, %107
  %129 = getelementptr i8, i8* %0, i64 %128
  %130 = add i64 %70, %107
  %131 = getelementptr i8, i8* %0, i64 %130
  %132 = add i64 %69, %107
  %133 = getelementptr i8, i8* %0, i64 %132
  %134 = add i64 %68, %107
  %135 = getelementptr i8, i8* %0, i64 %134
  %136 = add i64 %67, %107
  %137 = getelementptr i8, i8* %0, i64 %136
  %138 = add i64 %65, %107
  %139 = getelementptr i8, i8* %0, i64 %138
  %140 = icmp ult i8* %104, %137
  %141 = icmp ult i8* %139, %106
  %142 = and i1 %140, %141
  %143 = icmp ult i8* %104, %133
  %144 = icmp ult i8* %135, %106
  %145 = and i1 %143, %144
  %146 = or i1 %142, %145
  %147 = icmp ult i8* %104, %129
  %148 = icmp ult i8* %131, %106
  %149 = and i1 %147, %148
  %150 = or i1 %146, %149
  %151 = icmp ult i8* %104, %125
  %152 = icmp ult i8* %127, %106
  %153 = and i1 %151, %152
  %154 = or i1 %150, %153
  %155 = icmp ult i8* %104, %122
  %156 = icmp ult i8* %123, %106
  %157 = and i1 %155, %156
  %158 = or i1 %154, %157
  %159 = icmp ult i8* %104, %118
  %160 = icmp ult i8* %120, %106
  %161 = and i1 %159, %160
  %162 = or i1 %158, %161
  %163 = icmp ult i8* %104, %114
  %164 = icmp ult i8* %116, %106
  %165 = and i1 %163, %164
  %166 = or i1 %162, %165
  %167 = icmp ult i8* %104, %110
  %168 = icmp ult i8* %112, %106
  %169 = and i1 %167, %168
  %170 = or i1 %166, %169
  br i1 %170, label %239, label %171

171:                                              ; preds = %108, %171
  %172 = phi i64 [ %236, %171 ], [ 0, %108 ]
  %173 = getelementptr inbounds i16, i16* %100, i64 %172
  %174 = bitcast i16* %173 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2, !alias.scope !115
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = mul nsw <8 x i32> %82, %176
  %178 = add nuw nsw i64 %21, %172
  %179 = getelementptr inbounds i16, i16* %100, i64 %178
  %180 = bitcast i16* %179 to <8 x i16>*
  %181 = load <8 x i16>, <8 x i16>* %180, align 2, !alias.scope !118
  %182 = zext <8 x i16> %181 to <8 x i32>
  %183 = mul nsw <8 x i32> %84, %182
  %184 = add nsw <8 x i32> %183, %177
  %185 = add nuw nsw i64 %48, %172
  %186 = getelementptr inbounds i16, i16* %100, i64 %185
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 2, !alias.scope !120
  %189 = zext <8 x i16> %188 to <8 x i32>
  %190 = mul nsw <8 x i32> %86, %189
  %191 = add nsw <8 x i32> %190, %184
  %192 = add nuw nsw i64 %50, %172
  %193 = getelementptr inbounds i16, i16* %100, i64 %192
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !122
  %196 = zext <8 x i16> %195 to <8 x i32>
  %197 = mul nsw <8 x i32> %88, %196
  %198 = add nsw <8 x i32> %197, %191
  %199 = add nuw nsw i64 %52, %172
  %200 = getelementptr inbounds i16, i16* %100, i64 %199
  %201 = bitcast i16* %200 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 2, !alias.scope !124
  %203 = zext <8 x i16> %202 to <8 x i32>
  %204 = mul nsw <8 x i32> %90, %203
  %205 = add nsw <8 x i32> %204, %198
  %206 = add nuw nsw i64 %54, %172
  %207 = getelementptr inbounds i16, i16* %100, i64 %206
  %208 = bitcast i16* %207 to <8 x i16>*
  %209 = load <8 x i16>, <8 x i16>* %208, align 2, !alias.scope !126
  %210 = zext <8 x i16> %209 to <8 x i32>
  %211 = mul nsw <8 x i32> %92, %210
  %212 = add nsw <8 x i32> %211, %205
  %213 = add nuw nsw i64 %56, %172
  %214 = getelementptr inbounds i16, i16* %100, i64 %213
  %215 = bitcast i16* %214 to <8 x i16>*
  %216 = load <8 x i16>, <8 x i16>* %215, align 2, !alias.scope !128
  %217 = zext <8 x i16> %216 to <8 x i32>
  %218 = mul nsw <8 x i32> %94, %217
  %219 = add nsw <8 x i32> %218, %212
  %220 = add nuw nsw i64 %58, %172
  %221 = getelementptr inbounds i16, i16* %100, i64 %220
  %222 = bitcast i16* %221 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2, !alias.scope !130
  %224 = zext <8 x i16> %223 to <8 x i32>
  %225 = mul nsw <8 x i32> %96, %224
  %226 = add nsw <8 x i32> %225, %219
  %227 = add nsw <8 x i32> %226, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %228 = ashr <8 x i32> %227, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %229 = icmp slt <8 x i32> %228, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %230 = select <8 x i1> %229, <8 x i32> %228, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %231 = icmp sgt <8 x i32> %230, zeroinitializer
  %232 = select <8 x i1> %231, <8 x i32> %230, <8 x i32> zeroinitializer
  %233 = trunc <8 x i32> %232 to <8 x i16>
  %234 = getelementptr inbounds i16, i16* %101, i64 %172
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %235, align 2, !alias.scope !132, !noalias !134
  %236 = add i64 %172, 8
  %237 = icmp eq i64 %236, %80
  br i1 %237, label %238, label %171, !llvm.loop !135

238:                                              ; preds = %171
  br i1 %97, label %299, label %239

239:                                              ; preds = %238, %108, %98
  %240 = phi i64 [ 0, %108 ], [ 0, %98 ], [ %80, %238 ]
  br label %241

241:                                              ; preds = %239, %241
  %242 = phi i64 [ %297, %241 ], [ %240, %239 ]
  %243 = getelementptr inbounds i16, i16* %100, i64 %242
  %244 = load i16, i16* %243, align 2
  %245 = zext i16 %244 to i32
  %246 = mul nsw i32 %245, %45
  %247 = add nuw nsw i64 %21, %242
  %248 = getelementptr inbounds i16, i16* %100, i64 %247
  %249 = load i16, i16* %248, align 2
  %250 = zext i16 %249 to i32
  %251 = mul nsw i32 %250, %46
  %252 = add nsw i32 %251, %246
  %253 = add nuw nsw i64 %48, %242
  %254 = getelementptr inbounds i16, i16* %100, i64 %253
  %255 = load i16, i16* %254, align 2
  %256 = zext i16 %255 to i32
  %257 = mul nsw i32 %256, %47
  %258 = add nsw i32 %257, %252
  %259 = add nuw nsw i64 %50, %242
  %260 = getelementptr inbounds i16, i16* %100, i64 %259
  %261 = load i16, i16* %260, align 2
  %262 = zext i16 %261 to i32
  %263 = mul nsw i32 %262, %49
  %264 = add nsw i32 %263, %258
  %265 = add nuw nsw i64 %52, %242
  %266 = getelementptr inbounds i16, i16* %100, i64 %265
  %267 = load i16, i16* %266, align 2
  %268 = zext i16 %267 to i32
  %269 = mul nsw i32 %268, %51
  %270 = add nsw i32 %269, %264
  %271 = add nuw nsw i64 %54, %242
  %272 = getelementptr inbounds i16, i16* %100, i64 %271
  %273 = load i16, i16* %272, align 2
  %274 = zext i16 %273 to i32
  %275 = mul nsw i32 %274, %53
  %276 = add nsw i32 %275, %270
  %277 = add nuw nsw i64 %56, %242
  %278 = getelementptr inbounds i16, i16* %100, i64 %277
  %279 = load i16, i16* %278, align 2
  %280 = zext i16 %279 to i32
  %281 = mul nsw i32 %280, %55
  %282 = add nsw i32 %281, %276
  %283 = add nuw nsw i64 %58, %242
  %284 = getelementptr inbounds i16, i16* %100, i64 %283
  %285 = load i16, i16* %284, align 2
  %286 = zext i16 %285 to i32
  %287 = mul nsw i32 %286, %57
  %288 = add nsw i32 %287, %282
  %289 = add nsw i32 %288, 32
  %290 = ashr i32 %289, 6
  %291 = icmp slt i32 %290, 1023
  %292 = select i1 %291, i32 %290, i32 1023
  %293 = icmp sgt i32 %292, 0
  %294 = select i1 %293, i32 %292, i32 0
  %295 = trunc i32 %294 to i16
  %296 = getelementptr inbounds i16, i16* %101, i64 %242
  store i16 %295, i16* %296, align 2
  %297 = add nuw nsw i64 %242, 1
  %298 = icmp slt i64 %297, %28
  br i1 %298, label %241, label %299, !llvm.loop !136

299:                                              ; preds = %241, %238
  %300 = getelementptr inbounds i16, i16* %100, i64 %21
  %301 = getelementptr inbounds i16, i16* %101, i64 %26
  %302 = add nuw nsw i32 %102, 1
  %303 = icmp slt i32 %302, %7
  %304 = add i64 %99, 1
  br i1 %303, label %98, label %305

305:                                              ; preds = %299
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_112Convolve2D_CILi10EtEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #0 {
  %11 = alloca [17280 x i16], align 16
  %12 = bitcast [17280 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 34560, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 34560, i1 false)
  %13 = icmp slt i32 %6, 5
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = and i32 %2, -3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %14
  %18 = icmp eq i32 %2, 1
  br i1 %18, label %21, label %19

19:                                               ; preds = %17, %10
  %20 = sext i32 %2 to i64
  br label %21

21:                                               ; preds = %14, %17, %19
  %22 = phi i64 [ %20, %19 ], [ 4, %14 ], [ 5, %17 ]
  %23 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 0
  %24 = lshr i64 %1, 1
  %25 = bitcast i8* %0 to i16*
  %26 = mul i64 %24, -3
  %27 = getelementptr inbounds i16, i16* %25, i64 %26
  %28 = getelementptr inbounds i16, i16* %27, i64 -3
  %29 = bitcast i8* %8 to i16*
  %30 = sext i32 %4 to i64
  %31 = add nsw i32 %7, 6
  %32 = sext i32 %6 to i64
  %33 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %30, i64 0
  %34 = load i8, i8* %33, align 8
  %35 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %30, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %30, i64 2
  %38 = load i8, i8* %37, align 2
  %39 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %30, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %30, i64 4
  %42 = load i8, i8* %41, align 4
  %43 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %30, i64 5
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %30, i64 6
  %46 = load i8, i8* %45, align 2
  %47 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %30, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = sext i8 %34 to i32
  %50 = sext i8 %36 to i32
  %51 = sext i8 %38 to i32
  %52 = sext i8 %40 to i32
  %53 = sext i8 %42 to i32
  %54 = sext i8 %44 to i32
  %55 = sext i8 %46 to i32
  %56 = sext i8 %48 to i32
  br label %57

57:                                               ; preds = %114, %21
  %58 = phi i16* [ %23, %21 ], [ %116, %114 ]
  %59 = phi i16* [ %28, %21 ], [ %115, %114 ]
  %60 = phi i32 [ 0, %21 ], [ %117, %114 ]
  %61 = load i16, i16* %59, align 2
  br label %62

62:                                               ; preds = %62, %57
  %63 = phi i16 [ %69, %62 ], [ %61, %57 ]
  %64 = phi i64 [ %67, %62 ], [ 0, %57 ]
  %65 = zext i16 %63 to i32
  %66 = mul nsw i32 %65, %49
  %67 = add nuw nsw i64 %64, 1
  %68 = getelementptr inbounds i16, i16* %59, i64 %67
  %69 = load i16, i16* %68, align 2
  %70 = zext i16 %69 to i32
  %71 = mul nsw i32 %70, %50
  %72 = add nsw i32 %71, %66
  %73 = add nuw nsw i64 %64, 2
  %74 = getelementptr inbounds i16, i16* %59, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = mul nsw i32 %76, %51
  %78 = add nsw i32 %77, %72
  %79 = add nuw nsw i64 %64, 3
  %80 = getelementptr inbounds i16, i16* %59, i64 %79
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = mul nsw i32 %82, %52
  %84 = add nsw i32 %83, %78
  %85 = add nuw nsw i64 %64, 4
  %86 = getelementptr inbounds i16, i16* %59, i64 %85
  %87 = load i16, i16* %86, align 2
  %88 = zext i16 %87 to i32
  %89 = mul nsw i32 %88, %53
  %90 = add nsw i32 %89, %84
  %91 = add nuw nsw i64 %64, 5
  %92 = getelementptr inbounds i16, i16* %59, i64 %91
  %93 = load i16, i16* %92, align 2
  %94 = zext i16 %93 to i32
  %95 = mul nsw i32 %94, %54
  %96 = add nsw i32 %95, %90
  %97 = add nuw nsw i64 %64, 6
  %98 = getelementptr inbounds i16, i16* %59, i64 %97
  %99 = load i16, i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = mul nsw i32 %100, %55
  %102 = add nsw i32 %101, %96
  %103 = add nuw nsw i64 %64, 7
  %104 = getelementptr inbounds i16, i16* %59, i64 %103
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = mul nsw i32 %106, %56
  %108 = add nsw i32 %107, %102
  %109 = add nsw i32 %108, 2
  %110 = lshr i32 %109, 2
  %111 = trunc i32 %110 to i16
  %112 = getelementptr inbounds i16, i16* %58, i64 %64
  store i16 %111, i16* %112, align 2
  %113 = icmp slt i64 %67, %32
  br i1 %113, label %62, label %114

114:                                              ; preds = %62
  %115 = getelementptr inbounds i16, i16* %59, i64 %24
  %116 = getelementptr inbounds i16, i16* %58, i64 128
  %117 = add nuw nsw i32 %60, 1
  %118 = icmp slt i32 %60, %31
  br i1 %118, label %57, label %119

119:                                              ; preds = %114
  %120 = lshr i64 %9, 1
  %121 = icmp slt i32 %7, 5
  br i1 %121, label %122, label %127

122:                                              ; preds = %119
  %123 = and i32 %3, -3
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %129, label %125

125:                                              ; preds = %122
  %126 = icmp eq i32 %3, 1
  br i1 %126, label %129, label %127

127:                                              ; preds = %125, %119
  %128 = sext i32 %3 to i64
  br label %129

129:                                              ; preds = %122, %125, %127
  %130 = phi i64 [ %128, %127 ], [ 4, %122 ], [ 5, %125 ]
  %131 = sext i32 %5 to i64
  %132 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %130, i64 %131, i64 0
  %133 = load i8, i8* %132, align 8
  %134 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %130, i64 %131, i64 1
  %135 = load i8, i8* %134, align 1
  %136 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %130, i64 %131, i64 2
  %137 = load i8, i8* %136, align 2
  %138 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %130, i64 %131, i64 3
  %139 = load i8, i8* %138, align 1
  %140 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %130, i64 %131, i64 4
  %141 = load i8, i8* %140, align 4
  %142 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %130, i64 %131, i64 5
  %143 = load i8, i8* %142, align 1
  %144 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %130, i64 %131, i64 6
  %145 = load i8, i8* %144, align 2
  %146 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %130, i64 %131, i64 7
  %147 = load i8, i8* %146, align 1
  %148 = sext i8 %133 to i32
  %149 = sext i8 %135 to i32
  %150 = sext i8 %137 to i32
  %151 = sext i8 %139 to i32
  %152 = sext i8 %141 to i32
  %153 = sext i8 %143 to i32
  %154 = sext i8 %145 to i32
  %155 = sext i8 %147 to i32
  %156 = icmp sgt i64 %32, 1
  %157 = select i1 %156, i64 %32, i64 1
  %158 = icmp ult i64 %157, 8
  %159 = and i64 %157, 9223372036854775800
  %160 = insertelement <8 x i32> undef, i32 %148, i32 0
  %161 = shufflevector <8 x i32> %160, <8 x i32> undef, <8 x i32> zeroinitializer
  %162 = insertelement <8 x i32> undef, i32 %149, i32 0
  %163 = shufflevector <8 x i32> %162, <8 x i32> undef, <8 x i32> zeroinitializer
  %164 = insertelement <8 x i32> undef, i32 %150, i32 0
  %165 = shufflevector <8 x i32> %164, <8 x i32> undef, <8 x i32> zeroinitializer
  %166 = insertelement <8 x i32> undef, i32 %151, i32 0
  %167 = shufflevector <8 x i32> %166, <8 x i32> undef, <8 x i32> zeroinitializer
  %168 = insertelement <8 x i32> undef, i32 %152, i32 0
  %169 = shufflevector <8 x i32> %168, <8 x i32> undef, <8 x i32> zeroinitializer
  %170 = insertelement <8 x i32> undef, i32 %153, i32 0
  %171 = shufflevector <8 x i32> %170, <8 x i32> undef, <8 x i32> zeroinitializer
  %172 = insertelement <8 x i32> undef, i32 %154, i32 0
  %173 = shufflevector <8 x i32> %172, <8 x i32> undef, <8 x i32> zeroinitializer
  %174 = insertelement <8 x i32> undef, i32 %155, i32 0
  %175 = shufflevector <8 x i32> %174, <8 x i32> undef, <8 x i32> zeroinitializer
  %176 = icmp eq i64 %157, %159
  br label %177

177:                                              ; preds = %323, %129
  %178 = phi i16* [ %23, %129 ], [ %325, %323 ]
  %179 = phi i16* [ %29, %129 ], [ %324, %323 ]
  %180 = phi i32 [ 0, %129 ], [ %326, %323 ]
  br i1 %158, label %256, label %181

181:                                              ; preds = %177, %181
  %182 = phi i64 [ %253, %181 ], [ 0, %177 ]
  %183 = getelementptr inbounds i16, i16* %178, i64 %182
  %184 = bitcast i16* %183 to <8 x i16>*
  %185 = load <8 x i16>, <8 x i16>* %184, align 2
  %186 = sext <8 x i16> %185 to <8 x i32>
  %187 = mul nsw <8 x i32> %161, %186
  %188 = add nuw i64 %182, 128
  %189 = and i64 %188, 4294967288
  %190 = getelementptr inbounds i16, i16* %178, i64 %189
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2
  %193 = sext <8 x i16> %192 to <8 x i32>
  %194 = mul nsw <8 x i32> %163, %193
  %195 = add nsw <8 x i32> %194, %187
  %196 = add nuw i64 %182, 256
  %197 = and i64 %196, 4294967288
  %198 = getelementptr inbounds i16, i16* %178, i64 %197
  %199 = bitcast i16* %198 to <8 x i16>*
  %200 = load <8 x i16>, <8 x i16>* %199, align 2
  %201 = sext <8 x i16> %200 to <8 x i32>
  %202 = mul nsw <8 x i32> %165, %201
  %203 = add nsw <8 x i32> %202, %195
  %204 = add nuw i64 %182, 384
  %205 = and i64 %204, 4294967288
  %206 = getelementptr inbounds i16, i16* %178, i64 %205
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 2
  %209 = sext <8 x i16> %208 to <8 x i32>
  %210 = mul nsw <8 x i32> %167, %209
  %211 = add nsw <8 x i32> %210, %203
  %212 = add nuw i64 %182, 512
  %213 = and i64 %212, 4294967288
  %214 = getelementptr inbounds i16, i16* %178, i64 %213
  %215 = bitcast i16* %214 to <8 x i16>*
  %216 = load <8 x i16>, <8 x i16>* %215, align 2
  %217 = sext <8 x i16> %216 to <8 x i32>
  %218 = mul nsw <8 x i32> %169, %217
  %219 = add nsw <8 x i32> %218, %211
  %220 = add nuw i64 %182, 640
  %221 = and i64 %220, 4294967288
  %222 = getelementptr inbounds i16, i16* %178, i64 %221
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2
  %225 = sext <8 x i16> %224 to <8 x i32>
  %226 = mul nsw <8 x i32> %171, %225
  %227 = add nsw <8 x i32> %226, %219
  %228 = add nuw i64 %182, 768
  %229 = and i64 %228, 4294967288
  %230 = getelementptr inbounds i16, i16* %178, i64 %229
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2
  %233 = sext <8 x i16> %232 to <8 x i32>
  %234 = mul nsw <8 x i32> %173, %233
  %235 = add nsw <8 x i32> %234, %227
  %236 = add nuw i64 %182, 896
  %237 = and i64 %236, 4294967288
  %238 = getelementptr inbounds i16, i16* %178, i64 %237
  %239 = bitcast i16* %238 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 2
  %241 = sext <8 x i16> %240 to <8 x i32>
  %242 = mul nsw <8 x i32> %175, %241
  %243 = add nsw <8 x i32> %242, %235
  %244 = add nsw <8 x i32> %243, <i32 512, i32 512, i32 512, i32 512, i32 512, i32 512, i32 512, i32 512>
  %245 = ashr <8 x i32> %244, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %246 = icmp slt <8 x i32> %245, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %247 = select <8 x i1> %246, <8 x i32> %245, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %248 = icmp sgt <8 x i32> %247, zeroinitializer
  %249 = select <8 x i1> %248, <8 x i32> %247, <8 x i32> zeroinitializer
  %250 = trunc <8 x i32> %249 to <8 x i16>
  %251 = getelementptr inbounds i16, i16* %179, i64 %182
  %252 = bitcast i16* %251 to <8 x i16>*
  store <8 x i16> %250, <8 x i16>* %252, align 2
  %253 = add i64 %182, 8
  %254 = icmp eq i64 %253, %159
  br i1 %254, label %255, label %181, !llvm.loop !137

255:                                              ; preds = %181
  br i1 %176, label %323, label %256

256:                                              ; preds = %255, %177
  %257 = phi i64 [ 0, %177 ], [ %159, %255 ]
  br label %258

258:                                              ; preds = %256, %258
  %259 = phi i64 [ %321, %258 ], [ %257, %256 ]
  %260 = getelementptr inbounds i16, i16* %178, i64 %259
  %261 = load i16, i16* %260, align 2
  %262 = sext i16 %261 to i32
  %263 = mul nsw i32 %262, %148
  %264 = add nuw i64 %259, 128
  %265 = and i64 %264, 4294967295
  %266 = getelementptr inbounds i16, i16* %178, i64 %265
  %267 = load i16, i16* %266, align 2
  %268 = sext i16 %267 to i32
  %269 = mul nsw i32 %268, %149
  %270 = add nsw i32 %269, %263
  %271 = add nuw i64 %259, 256
  %272 = and i64 %271, 4294967295
  %273 = getelementptr inbounds i16, i16* %178, i64 %272
  %274 = load i16, i16* %273, align 2
  %275 = sext i16 %274 to i32
  %276 = mul nsw i32 %275, %150
  %277 = add nsw i32 %276, %270
  %278 = add nuw i64 %259, 384
  %279 = and i64 %278, 4294967295
  %280 = getelementptr inbounds i16, i16* %178, i64 %279
  %281 = load i16, i16* %280, align 2
  %282 = sext i16 %281 to i32
  %283 = mul nsw i32 %282, %151
  %284 = add nsw i32 %283, %277
  %285 = add nuw i64 %259, 512
  %286 = and i64 %285, 4294967295
  %287 = getelementptr inbounds i16, i16* %178, i64 %286
  %288 = load i16, i16* %287, align 2
  %289 = sext i16 %288 to i32
  %290 = mul nsw i32 %289, %152
  %291 = add nsw i32 %290, %284
  %292 = add nuw i64 %259, 640
  %293 = and i64 %292, 4294967295
  %294 = getelementptr inbounds i16, i16* %178, i64 %293
  %295 = load i16, i16* %294, align 2
  %296 = sext i16 %295 to i32
  %297 = mul nsw i32 %296, %153
  %298 = add nsw i32 %297, %291
  %299 = add nuw i64 %259, 768
  %300 = and i64 %299, 4294967295
  %301 = getelementptr inbounds i16, i16* %178, i64 %300
  %302 = load i16, i16* %301, align 2
  %303 = sext i16 %302 to i32
  %304 = mul nsw i32 %303, %154
  %305 = add nsw i32 %304, %298
  %306 = add nuw i64 %259, 896
  %307 = and i64 %306, 4294967295
  %308 = getelementptr inbounds i16, i16* %178, i64 %307
  %309 = load i16, i16* %308, align 2
  %310 = sext i16 %309 to i32
  %311 = mul nsw i32 %310, %155
  %312 = add nsw i32 %311, %305
  %313 = add nsw i32 %312, 512
  %314 = ashr i32 %313, 10
  %315 = icmp slt i32 %314, 1023
  %316 = select i1 %315, i32 %314, i32 1023
  %317 = icmp sgt i32 %316, 0
  %318 = select i1 %317, i32 %316, i32 0
  %319 = trunc i32 %318 to i16
  %320 = getelementptr inbounds i16, i16* %179, i64 %259
  store i16 %319, i16* %320, align 2
  %321 = add nuw nsw i64 %259, 1
  %322 = icmp slt i64 %321, %32
  br i1 %322, label %258, label %323, !llvm.loop !138

323:                                              ; preds = %258, %255
  %324 = getelementptr inbounds i16, i16* %179, i64 %120
  %325 = getelementptr inbounds i16, i16* %178, i64 128
  %326 = add nuw nsw i32 %180, 1
  %327 = icmp slt i32 %326, %7
  br i1 %327, label %177, label %328

328:                                              ; preds = %323
  call void @llvm.lifetime.end.p0i8(i64 34560, i8* nonnull %12) #4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_122ConvolveCompoundCopy_CILi10EtEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = bitcast i8* %0 to i16*
  %12 = lshr i64 %1, 1
  %13 = bitcast i8* %8 to i16*
  %14 = sext i32 %6 to i64
  %15 = icmp sgt i64 %14, 1
  %16 = select i1 %15, i64 %14, i64 1
  %17 = shl i64 %9, 1
  %18 = icmp sgt i64 %14, 1
  %19 = select i1 %18, i64 %14, i64 1
  %20 = shl nuw nsw i64 %19, 1
  %21 = and i64 %1, -2
  %22 = and i64 %16, 9223372036854775792
  %23 = add nsw i64 %22, -16
  %24 = lshr exact i64 %23, 4
  %25 = add nuw nsw i64 %24, 1
  %26 = icmp ult i64 %16, 16
  %27 = and i64 %16, 9223372036854775792
  %28 = and i64 %25, 1
  %29 = icmp eq i64 %23, 0
  %30 = sub nuw nsw i64 %25, %28
  %31 = icmp eq i64 %28, 0
  %32 = icmp eq i64 %16, %27
  br label %33

33:                                               ; preds = %115, %10
  %34 = phi i64 [ %120, %115 ], [ 0, %10 ]
  %35 = phi i16* [ %117, %115 ], [ %13, %10 ]
  %36 = phi i32 [ %118, %115 ], [ 0, %10 ]
  %37 = phi i16* [ %116, %115 ], [ %11, %10 ]
  %38 = mul i64 %17, %34
  %39 = mul i64 %21, %34
  br i1 %26, label %104, label %40

40:                                               ; preds = %33
  %41 = add i64 %20, %39
  %42 = getelementptr i8, i8* %0, i64 %41
  %43 = getelementptr i8, i8* %0, i64 %39
  %44 = add i64 %20, %38
  %45 = getelementptr i8, i8* %8, i64 %44
  %46 = getelementptr i8, i8* %8, i64 %38
  %47 = icmp ult i8* %46, %42
  %48 = icmp ult i8* %43, %45
  %49 = and i1 %47, %48
  br i1 %49, label %104, label %50

50:                                               ; preds = %40
  br i1 %29, label %86, label %51

51:                                               ; preds = %50, %51
  %52 = phi i64 [ %83, %51 ], [ 0, %50 ]
  %53 = phi i64 [ %84, %51 ], [ %30, %50 ]
  %54 = getelementptr inbounds i16, i16* %37, i64 %52
  %55 = bitcast i16* %54 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2, !alias.scope !139
  %57 = getelementptr inbounds i16, i16* %54, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !139
  %60 = shl <8 x i16> %56, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %61 = shl <8 x i16> %59, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %62 = add <8 x i16> %60, <i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576>
  %63 = add <8 x i16> %61, <i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576>
  %64 = getelementptr inbounds i16, i16* %35, i64 %52
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %65, align 2, !alias.scope !142, !noalias !139
  %66 = getelementptr inbounds i16, i16* %64, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %67, align 2, !alias.scope !142, !noalias !139
  %68 = or i64 %52, 16
  %69 = getelementptr inbounds i16, i16* %37, i64 %68
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !139
  %72 = getelementptr inbounds i16, i16* %69, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !139
  %75 = shl <8 x i16> %71, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %76 = shl <8 x i16> %74, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %77 = add <8 x i16> %75, <i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576>
  %78 = add <8 x i16> %76, <i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576>
  %79 = getelementptr inbounds i16, i16* %35, i64 %68
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %80, align 2, !alias.scope !142, !noalias !139
  %81 = getelementptr inbounds i16, i16* %79, i64 8
  %82 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %82, align 2, !alias.scope !142, !noalias !139
  %83 = add i64 %52, 32
  %84 = add i64 %53, -2
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %51, !llvm.loop !144

86:                                               ; preds = %51, %50
  %87 = phi i64 [ 0, %50 ], [ %83, %51 ]
  br i1 %31, label %103, label %88

88:                                               ; preds = %86
  %89 = getelementptr inbounds i16, i16* %37, i64 %87
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !139
  %92 = getelementptr inbounds i16, i16* %89, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !139
  %95 = shl <8 x i16> %91, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %96 = shl <8 x i16> %94, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %97 = add <8 x i16> %95, <i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576>
  %98 = add <8 x i16> %96, <i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576>
  %99 = getelementptr inbounds i16, i16* %35, i64 %87
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !142, !noalias !139
  %101 = getelementptr inbounds i16, i16* %99, i64 8
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %102, align 2, !alias.scope !142, !noalias !139
  br label %103

103:                                              ; preds = %86, %88
  br i1 %32, label %115, label %104

104:                                              ; preds = %103, %40, %33
  %105 = phi i64 [ 0, %40 ], [ 0, %33 ], [ %27, %103 ]
  br label %106

106:                                              ; preds = %104, %106
  %107 = phi i64 [ %113, %106 ], [ %105, %104 ]
  %108 = getelementptr inbounds i16, i16* %37, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = shl i16 %109, 4
  %111 = add i16 %110, 24576
  %112 = getelementptr inbounds i16, i16* %35, i64 %107
  store i16 %111, i16* %112, align 2
  %113 = add nuw nsw i64 %107, 1
  %114 = icmp slt i64 %113, %14
  br i1 %114, label %106, label %115, !llvm.loop !145

115:                                              ; preds = %106, %103
  %116 = getelementptr inbounds i16, i16* %37, i64 %12
  %117 = getelementptr inbounds i16, i16* %35, i64 %9
  %118 = add nuw nsw i32 %36, 1
  %119 = icmp slt i32 %118, %7
  %120 = add i64 %34, 1
  br i1 %119, label %33, label %121

121:                                              ; preds = %115
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_128ConvolveCompoundHorizontal_CILi10EtEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = icmp slt i32 %6, 5
  br i1 %11, label %12, label %17

12:                                               ; preds = %10
  %13 = and i32 %2, -3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = icmp eq i32 %2, 1
  br i1 %16, label %19, label %17

17:                                               ; preds = %15, %10
  %18 = sext i32 %2 to i64
  br label %19

19:                                               ; preds = %12, %15, %17
  %20 = phi i64 [ %18, %17 ], [ 4, %12 ], [ 5, %15 ]
  %21 = getelementptr inbounds i8, i8* %0, i64 -6
  %22 = bitcast i8* %21 to i16*
  %23 = lshr i64 %1, 1
  %24 = bitcast i8* %8 to i16*
  %25 = sext i32 %4 to i64
  %26 = sext i32 %6 to i64
  %27 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %25, i64 0
  %28 = load i8, i8* %27, align 8
  %29 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %25, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %25, i64 2
  %32 = load i8, i8* %31, align 2
  %33 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %25, i64 3
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %25, i64 4
  %36 = load i8, i8* %35, align 4
  %37 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %25, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %25, i64 6
  %40 = load i8, i8* %39, align 2
  %41 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %25, i64 7
  %42 = load i8, i8* %41, align 1
  %43 = sext i8 %28 to i32
  %44 = sext i8 %30 to i32
  %45 = sext i8 %32 to i32
  %46 = sext i8 %34 to i32
  %47 = sext i8 %36 to i32
  %48 = sext i8 %38 to i32
  %49 = sext i8 %40 to i32
  %50 = sext i8 %42 to i32
  %51 = icmp sgt i64 %26, 1
  %52 = select i1 %51, i64 %26, i64 1
  %53 = shl i64 %9, 1
  %54 = icmp sgt i64 %26, 1
  %55 = select i1 %54, i64 %26, i64 1
  %56 = shl nuw nsw i64 %55, 1
  %57 = and i64 %1, -2
  %58 = add nuw nsw i64 %56, 8
  %59 = icmp ult i64 %52, 8
  %60 = and i64 %52, 9223372036854775800
  %61 = insertelement <8 x i32> undef, i32 %43, i32 0
  %62 = shufflevector <8 x i32> %61, <8 x i32> undef, <8 x i32> zeroinitializer
  %63 = insertelement <8 x i32> undef, i32 %44, i32 0
  %64 = shufflevector <8 x i32> %63, <8 x i32> undef, <8 x i32> zeroinitializer
  %65 = insertelement <8 x i32> undef, i32 %45, i32 0
  %66 = shufflevector <8 x i32> %65, <8 x i32> undef, <8 x i32> zeroinitializer
  %67 = insertelement <8 x i32> undef, i32 %46, i32 0
  %68 = shufflevector <8 x i32> %67, <8 x i32> undef, <8 x i32> zeroinitializer
  %69 = insertelement <8 x i32> undef, i32 %47, i32 0
  %70 = shufflevector <8 x i32> %69, <8 x i32> undef, <8 x i32> zeroinitializer
  %71 = insertelement <8 x i32> undef, i32 %48, i32 0
  %72 = shufflevector <8 x i32> %71, <8 x i32> undef, <8 x i32> zeroinitializer
  %73 = insertelement <8 x i32> undef, i32 %49, i32 0
  %74 = shufflevector <8 x i32> %73, <8 x i32> undef, <8 x i32> zeroinitializer
  %75 = insertelement <8 x i32> undef, i32 %50, i32 0
  %76 = shufflevector <8 x i32> %75, <8 x i32> undef, <8 x i32> zeroinitializer
  %77 = icmp eq i64 %52, %60
  br label %78

78:                                               ; preds = %217, %19
  %79 = phi i64 [ %222, %217 ], [ 0, %19 ]
  %80 = phi i16* [ %218, %217 ], [ %22, %19 ]
  %81 = phi i16* [ %219, %217 ], [ %24, %19 ]
  %82 = phi i32 [ %220, %217 ], [ 0, %19 ]
  %83 = mul i64 %53, %79
  %84 = mul i64 %57, %79
  br i1 %59, label %161, label %85

85:                                               ; preds = %78
  %86 = add i64 %58, %84
  %87 = getelementptr i8, i8* %0, i64 %86
  %88 = add i64 %84, -6
  %89 = getelementptr i8, i8* %0, i64 %88
  %90 = add i64 %56, %83
  %91 = getelementptr i8, i8* %8, i64 %90
  %92 = getelementptr i8, i8* %8, i64 %83
  %93 = icmp ult i8* %92, %87
  %94 = icmp ult i8* %89, %91
  %95 = and i1 %93, %94
  br i1 %95, label %161, label %96

96:                                               ; preds = %85, %96
  %97 = phi i64 [ %158, %96 ], [ 0, %85 ]
  %98 = getelementptr inbounds i16, i16* %80, i64 %97
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !146
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nsw <8 x i32> %62, %101
  %103 = or i64 %97, 1
  %104 = getelementptr inbounds i16, i16* %80, i64 %103
  %105 = bitcast i16* %104 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 2, !alias.scope !146
  %107 = zext <8 x i16> %106 to <8 x i32>
  %108 = mul nsw <8 x i32> %64, %107
  %109 = add nsw <8 x i32> %108, %102
  %110 = or i64 %97, 2
  %111 = getelementptr inbounds i16, i16* %80, i64 %110
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !146
  %114 = zext <8 x i16> %113 to <8 x i32>
  %115 = mul nsw <8 x i32> %66, %114
  %116 = add nsw <8 x i32> %115, %109
  %117 = or i64 %97, 3
  %118 = getelementptr inbounds i16, i16* %80, i64 %117
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2, !alias.scope !146
  %121 = zext <8 x i16> %120 to <8 x i32>
  %122 = mul nsw <8 x i32> %68, %121
  %123 = add nsw <8 x i32> %122, %116
  %124 = or i64 %97, 4
  %125 = getelementptr inbounds i16, i16* %80, i64 %124
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !146
  %128 = zext <8 x i16> %127 to <8 x i32>
  %129 = mul nsw <8 x i32> %70, %128
  %130 = add nsw <8 x i32> %129, %123
  %131 = or i64 %97, 5
  %132 = getelementptr inbounds i16, i16* %80, i64 %131
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !146
  %135 = zext <8 x i16> %134 to <8 x i32>
  %136 = mul nsw <8 x i32> %72, %135
  %137 = add nsw <8 x i32> %136, %130
  %138 = or i64 %97, 6
  %139 = getelementptr inbounds i16, i16* %80, i64 %138
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2, !alias.scope !146
  %142 = zext <8 x i16> %141 to <8 x i32>
  %143 = mul nsw <8 x i32> %74, %142
  %144 = add nsw <8 x i32> %143, %137
  %145 = or i64 %97, 7
  %146 = getelementptr inbounds i16, i16* %80, i64 %145
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2, !alias.scope !146
  %149 = zext <8 x i16> %148 to <8 x i32>
  %150 = mul nsw <8 x i32> %76, %149
  %151 = add nsw <8 x i32> %150, %144
  %152 = add nsw <8 x i32> %151, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %153 = lshr <8 x i32> %152, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %154 = trunc <8 x i32> %153 to <8 x i16>
  %155 = add <8 x i16> %154, <i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576>
  %156 = getelementptr inbounds i16, i16* %81, i64 %97
  %157 = bitcast i16* %156 to <8 x i16>*
  store <8 x i16> %155, <8 x i16>* %157, align 2, !alias.scope !149, !noalias !146
  %158 = add i64 %97, 8
  %159 = icmp eq i64 %158, %60
  br i1 %159, label %160, label %96, !llvm.loop !151

160:                                              ; preds = %96
  br i1 %77, label %217, label %161

161:                                              ; preds = %160, %85, %78
  %162 = phi i64 [ 0, %85 ], [ 0, %78 ], [ %60, %160 ]
  br label %163

163:                                              ; preds = %161, %163
  %164 = phi i64 [ %169, %163 ], [ %162, %161 ]
  %165 = getelementptr inbounds i16, i16* %80, i64 %164
  %166 = load i16, i16* %165, align 2
  %167 = zext i16 %166 to i32
  %168 = mul nsw i32 %167, %43
  %169 = add nuw nsw i64 %164, 1
  %170 = getelementptr inbounds i16, i16* %80, i64 %169
  %171 = load i16, i16* %170, align 2
  %172 = zext i16 %171 to i32
  %173 = mul nsw i32 %172, %44
  %174 = add nsw i32 %173, %168
  %175 = add nuw nsw i64 %164, 2
  %176 = getelementptr inbounds i16, i16* %80, i64 %175
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nsw i32 %178, %45
  %180 = add nsw i32 %179, %174
  %181 = add nuw nsw i64 %164, 3
  %182 = getelementptr inbounds i16, i16* %80, i64 %181
  %183 = load i16, i16* %182, align 2
  %184 = zext i16 %183 to i32
  %185 = mul nsw i32 %184, %46
  %186 = add nsw i32 %185, %180
  %187 = add nuw nsw i64 %164, 4
  %188 = getelementptr inbounds i16, i16* %80, i64 %187
  %189 = load i16, i16* %188, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nsw i32 %190, %47
  %192 = add nsw i32 %191, %186
  %193 = add nuw nsw i64 %164, 5
  %194 = getelementptr inbounds i16, i16* %80, i64 %193
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = mul nsw i32 %196, %48
  %198 = add nsw i32 %197, %192
  %199 = add nuw nsw i64 %164, 6
  %200 = getelementptr inbounds i16, i16* %80, i64 %199
  %201 = load i16, i16* %200, align 2
  %202 = zext i16 %201 to i32
  %203 = mul nsw i32 %202, %49
  %204 = add nsw i32 %203, %198
  %205 = add nuw nsw i64 %164, 7
  %206 = getelementptr inbounds i16, i16* %80, i64 %205
  %207 = load i16, i16* %206, align 2
  %208 = zext i16 %207 to i32
  %209 = mul nsw i32 %208, %50
  %210 = add nsw i32 %209, %204
  %211 = add nsw i32 %210, 2
  %212 = lshr i32 %211, 2
  %213 = trunc i32 %212 to i16
  %214 = add i16 %213, 24576
  %215 = getelementptr inbounds i16, i16* %81, i64 %164
  store i16 %214, i16* %215, align 2
  %216 = icmp slt i64 %169, %26
  br i1 %216, label %163, label %217, !llvm.loop !152

217:                                              ; preds = %163, %160
  %218 = getelementptr inbounds i16, i16* %80, i64 %23
  %219 = getelementptr inbounds i16, i16* %81, i64 %9
  %220 = add nuw nsw i32 %82, 1
  %221 = icmp slt i32 %220, %7
  %222 = add i64 %79, 1
  br i1 %221, label %78, label %223

223:                                              ; preds = %217
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveCompoundVertical_CILi10EtEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = icmp slt i32 %7, 5
  br i1 %11, label %12, label %17

12:                                               ; preds = %10
  %13 = and i32 %3, -3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = icmp eq i32 %3, 1
  br i1 %16, label %19, label %17

17:                                               ; preds = %15, %10
  %18 = sext i32 %3 to i64
  br label %19

19:                                               ; preds = %12, %15, %17
  %20 = phi i64 [ %18, %17 ], [ 4, %12 ], [ 5, %15 ]
  %21 = lshr i64 %1, 1
  %22 = bitcast i8* %0 to i16*
  %23 = mul i64 %21, -3
  %24 = getelementptr inbounds i16, i16* %22, i64 %23
  %25 = bitcast i8* %8 to i16*
  %26 = sext i32 %5 to i64
  %27 = sext i32 %6 to i64
  %28 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 0
  %29 = load i8, i8* %28, align 8
  %30 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 1
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 2
  %33 = load i8, i8* %32, align 2
  %34 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 4
  %37 = load i8, i8* %36, align 4
  %38 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 5
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 6
  %41 = load i8, i8* %40, align 2
  %42 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %20, i64 %26, i64 7
  %43 = load i8, i8* %42, align 1
  %44 = sext i8 %29 to i32
  %45 = sext i8 %31 to i32
  %46 = sext i8 %33 to i32
  %47 = and i64 %1, -2
  %48 = sext i8 %35 to i32
  %49 = mul nuw nsw i64 %21, 3
  %50 = sext i8 %37 to i32
  %51 = shl nuw nsw i64 %21, 2
  %52 = sext i8 %39 to i32
  %53 = mul nuw nsw i64 %21, 5
  %54 = sext i8 %41 to i32
  %55 = mul nuw nsw i64 %21, 6
  %56 = sext i8 %43 to i32
  %57 = mul nuw nsw i64 %21, 7
  %58 = icmp sgt i64 %27, 1
  %59 = select i1 %58, i64 %27, i64 1
  %60 = shl i64 %9, 1
  %61 = icmp sgt i64 %27, 1
  %62 = select i1 %61, i64 %27, i64 1
  %63 = shl nuw nsw i64 %62, 1
  %64 = shl i64 %21, 3
  %65 = and i64 %1, -2
  %66 = add i64 %64, %63
  %67 = mul i64 %21, 6
  %68 = add i64 %67, %63
  %69 = shl i64 %21, 2
  %70 = add i64 %69, %63
  %71 = add i64 %63, %47
  %72 = mul i64 %21, -2
  %73 = sub i64 %63, %47
  %74 = mul i64 %21, -4
  %75 = sub i64 %63, %69
  %76 = mul i64 %21, -6
  %77 = sub i64 %63, %67
  %78 = icmp ult i64 %59, 8
  %79 = and i64 %59, 9223372036854775800
  %80 = insertelement <8 x i32> undef, i32 %44, i32 0
  %81 = shufflevector <8 x i32> %80, <8 x i32> undef, <8 x i32> zeroinitializer
  %82 = insertelement <8 x i32> undef, i32 %45, i32 0
  %83 = shufflevector <8 x i32> %82, <8 x i32> undef, <8 x i32> zeroinitializer
  %84 = insertelement <8 x i32> undef, i32 %46, i32 0
  %85 = shufflevector <8 x i32> %84, <8 x i32> undef, <8 x i32> zeroinitializer
  %86 = insertelement <8 x i32> undef, i32 %48, i32 0
  %87 = shufflevector <8 x i32> %86, <8 x i32> undef, <8 x i32> zeroinitializer
  %88 = insertelement <8 x i32> undef, i32 %50, i32 0
  %89 = shufflevector <8 x i32> %88, <8 x i32> undef, <8 x i32> zeroinitializer
  %90 = insertelement <8 x i32> undef, i32 %52, i32 0
  %91 = shufflevector <8 x i32> %90, <8 x i32> undef, <8 x i32> zeroinitializer
  %92 = insertelement <8 x i32> undef, i32 %54, i32 0
  %93 = shufflevector <8 x i32> %92, <8 x i32> undef, <8 x i32> zeroinitializer
  %94 = insertelement <8 x i32> undef, i32 %56, i32 0
  %95 = shufflevector <8 x i32> %94, <8 x i32> undef, <8 x i32> zeroinitializer
  %96 = icmp eq i64 %59, %79
  br label %97

97:                                               ; preds = %292, %19
  %98 = phi i64 [ %297, %292 ], [ 0, %19 ]
  %99 = phi i16* [ %293, %292 ], [ %24, %19 ]
  %100 = phi i16* [ %294, %292 ], [ %25, %19 ]
  %101 = phi i32 [ %295, %292 ], [ 0, %19 ]
  %102 = mul i64 %60, %98
  %103 = getelementptr i8, i8* %8, i64 %102
  %104 = add i64 %63, %102
  %105 = getelementptr i8, i8* %8, i64 %104
  %106 = mul i64 %65, %98
  br i1 %78, label %235, label %107

107:                                              ; preds = %97
  %108 = add i64 %77, %106
  %109 = getelementptr i8, i8* %0, i64 %108
  %110 = add i64 %76, %106
  %111 = getelementptr i8, i8* %0, i64 %110
  %112 = add i64 %75, %106
  %113 = getelementptr i8, i8* %0, i64 %112
  %114 = add i64 %74, %106
  %115 = getelementptr i8, i8* %0, i64 %114
  %116 = add i64 %73, %106
  %117 = getelementptr i8, i8* %0, i64 %116
  %118 = add i64 %72, %106
  %119 = getelementptr i8, i8* %0, i64 %118
  %120 = add i64 %63, %106
  %121 = getelementptr i8, i8* %0, i64 %120
  %122 = getelementptr i8, i8* %0, i64 %106
  %123 = add i64 %71, %106
  %124 = getelementptr i8, i8* %0, i64 %123
  %125 = add i64 %47, %106
  %126 = getelementptr i8, i8* %0, i64 %125
  %127 = add i64 %70, %106
  %128 = getelementptr i8, i8* %0, i64 %127
  %129 = add i64 %69, %106
  %130 = getelementptr i8, i8* %0, i64 %129
  %131 = add i64 %68, %106
  %132 = getelementptr i8, i8* %0, i64 %131
  %133 = add i64 %67, %106
  %134 = getelementptr i8, i8* %0, i64 %133
  %135 = add i64 %66, %106
  %136 = getelementptr i8, i8* %0, i64 %135
  %137 = add i64 %64, %106
  %138 = getelementptr i8, i8* %0, i64 %137
  %139 = icmp ult i8* %103, %136
  %140 = icmp ult i8* %138, %105
  %141 = and i1 %139, %140
  %142 = icmp ult i8* %103, %132
  %143 = icmp ult i8* %134, %105
  %144 = and i1 %142, %143
  %145 = or i1 %141, %144
  %146 = icmp ult i8* %103, %128
  %147 = icmp ult i8* %130, %105
  %148 = and i1 %146, %147
  %149 = or i1 %145, %148
  %150 = icmp ult i8* %103, %124
  %151 = icmp ult i8* %126, %105
  %152 = and i1 %150, %151
  %153 = or i1 %149, %152
  %154 = icmp ult i8* %103, %121
  %155 = icmp ult i8* %122, %105
  %156 = and i1 %154, %155
  %157 = or i1 %153, %156
  %158 = icmp ult i8* %103, %117
  %159 = icmp ult i8* %119, %105
  %160 = and i1 %158, %159
  %161 = or i1 %157, %160
  %162 = icmp ult i8* %103, %113
  %163 = icmp ult i8* %115, %105
  %164 = and i1 %162, %163
  %165 = or i1 %161, %164
  %166 = icmp ult i8* %103, %109
  %167 = icmp ult i8* %111, %105
  %168 = and i1 %166, %167
  %169 = or i1 %165, %168
  br i1 %169, label %235, label %170

170:                                              ; preds = %107, %170
  %171 = phi i64 [ %232, %170 ], [ 0, %107 ]
  %172 = getelementptr inbounds i16, i16* %99, i64 %171
  %173 = bitcast i16* %172 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 2, !alias.scope !153
  %175 = zext <8 x i16> %174 to <8 x i32>
  %176 = mul nsw <8 x i32> %81, %175
  %177 = add nuw nsw i64 %21, %171
  %178 = getelementptr inbounds i16, i16* %99, i64 %177
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2, !alias.scope !156
  %181 = zext <8 x i16> %180 to <8 x i32>
  %182 = mul nsw <8 x i32> %83, %181
  %183 = add nsw <8 x i32> %182, %176
  %184 = add nuw nsw i64 %47, %171
  %185 = getelementptr inbounds i16, i16* %99, i64 %184
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !158
  %188 = zext <8 x i16> %187 to <8 x i32>
  %189 = mul nsw <8 x i32> %85, %188
  %190 = add nsw <8 x i32> %189, %183
  %191 = add nuw nsw i64 %49, %171
  %192 = getelementptr inbounds i16, i16* %99, i64 %191
  %193 = bitcast i16* %192 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 2, !alias.scope !160
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nsw <8 x i32> %87, %195
  %197 = add nsw <8 x i32> %196, %190
  %198 = add nuw nsw i64 %51, %171
  %199 = getelementptr inbounds i16, i16* %99, i64 %198
  %200 = bitcast i16* %199 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 2, !alias.scope !162
  %202 = zext <8 x i16> %201 to <8 x i32>
  %203 = mul nsw <8 x i32> %89, %202
  %204 = add nsw <8 x i32> %203, %197
  %205 = add nuw nsw i64 %53, %171
  %206 = getelementptr inbounds i16, i16* %99, i64 %205
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 2, !alias.scope !164
  %209 = zext <8 x i16> %208 to <8 x i32>
  %210 = mul nsw <8 x i32> %91, %209
  %211 = add nsw <8 x i32> %210, %204
  %212 = add nuw nsw i64 %55, %171
  %213 = getelementptr inbounds i16, i16* %99, i64 %212
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2, !alias.scope !166
  %216 = zext <8 x i16> %215 to <8 x i32>
  %217 = mul nsw <8 x i32> %93, %216
  %218 = add nsw <8 x i32> %217, %211
  %219 = add nuw nsw i64 %57, %171
  %220 = getelementptr inbounds i16, i16* %99, i64 %219
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2, !alias.scope !168
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nsw <8 x i32> %95, %223
  %225 = add nsw <8 x i32> %224, %218
  %226 = add nsw <8 x i32> %225, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %227 = lshr <8 x i32> %226, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %228 = trunc <8 x i32> %227 to <8 x i16>
  %229 = add <8 x i16> %228, <i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576>
  %230 = getelementptr inbounds i16, i16* %100, i64 %171
  %231 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %231, align 2, !alias.scope !170, !noalias !172
  %232 = add i64 %171, 8
  %233 = icmp eq i64 %232, %79
  br i1 %233, label %234, label %170, !llvm.loop !173

234:                                              ; preds = %170
  br i1 %96, label %292, label %235

235:                                              ; preds = %234, %107, %97
  %236 = phi i64 [ 0, %107 ], [ 0, %97 ], [ %79, %234 ]
  br label %237

237:                                              ; preds = %235, %237
  %238 = phi i64 [ %290, %237 ], [ %236, %235 ]
  %239 = getelementptr inbounds i16, i16* %99, i64 %238
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nsw i32 %241, %44
  %243 = add nuw nsw i64 %21, %238
  %244 = getelementptr inbounds i16, i16* %99, i64 %243
  %245 = load i16, i16* %244, align 2
  %246 = zext i16 %245 to i32
  %247 = mul nsw i32 %246, %45
  %248 = add nsw i32 %247, %242
  %249 = add nuw nsw i64 %47, %238
  %250 = getelementptr inbounds i16, i16* %99, i64 %249
  %251 = load i16, i16* %250, align 2
  %252 = zext i16 %251 to i32
  %253 = mul nsw i32 %252, %46
  %254 = add nsw i32 %253, %248
  %255 = add nuw nsw i64 %49, %238
  %256 = getelementptr inbounds i16, i16* %99, i64 %255
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nsw i32 %258, %48
  %260 = add nsw i32 %259, %254
  %261 = add nuw nsw i64 %51, %238
  %262 = getelementptr inbounds i16, i16* %99, i64 %261
  %263 = load i16, i16* %262, align 2
  %264 = zext i16 %263 to i32
  %265 = mul nsw i32 %264, %50
  %266 = add nsw i32 %265, %260
  %267 = add nuw nsw i64 %53, %238
  %268 = getelementptr inbounds i16, i16* %99, i64 %267
  %269 = load i16, i16* %268, align 2
  %270 = zext i16 %269 to i32
  %271 = mul nsw i32 %270, %52
  %272 = add nsw i32 %271, %266
  %273 = add nuw nsw i64 %55, %238
  %274 = getelementptr inbounds i16, i16* %99, i64 %273
  %275 = load i16, i16* %274, align 2
  %276 = zext i16 %275 to i32
  %277 = mul nsw i32 %276, %54
  %278 = add nsw i32 %277, %272
  %279 = add nuw nsw i64 %57, %238
  %280 = getelementptr inbounds i16, i16* %99, i64 %279
  %281 = load i16, i16* %280, align 2
  %282 = zext i16 %281 to i32
  %283 = mul nsw i32 %282, %56
  %284 = add nsw i32 %283, %278
  %285 = add nsw i32 %284, 2
  %286 = lshr i32 %285, 2
  %287 = trunc i32 %286 to i16
  %288 = add i16 %287, 24576
  %289 = getelementptr inbounds i16, i16* %100, i64 %238
  store i16 %288, i16* %289, align 2
  %290 = add nuw nsw i64 %238, 1
  %291 = icmp slt i64 %290, %27
  br i1 %291, label %237, label %292, !llvm.loop !174

292:                                              ; preds = %237, %234
  %293 = getelementptr inbounds i16, i16* %99, i64 %21
  %294 = getelementptr inbounds i16, i16* %100, i64 %9
  %295 = add nuw nsw i32 %101, 1
  %296 = icmp slt i32 %295, %7
  %297 = add i64 %98, 1
  br i1 %296, label %97, label %298

298:                                              ; preds = %292
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_120ConvolveCompound2D_CILi10EtEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #0 {
  %11 = alloca [17280 x i16], align 16
  %12 = bitcast [17280 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 34560, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 34560, i1 false)
  %13 = icmp slt i32 %6, 5
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = and i32 %2, -3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %14
  %18 = icmp eq i32 %2, 1
  br i1 %18, label %21, label %19

19:                                               ; preds = %17, %10
  %20 = sext i32 %2 to i64
  br label %21

21:                                               ; preds = %14, %17, %19
  %22 = phi i64 [ %20, %19 ], [ 4, %14 ], [ 5, %17 ]
  %23 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 0
  %24 = lshr i64 %1, 1
  %25 = bitcast i8* %0 to i16*
  %26 = mul i64 %24, -3
  %27 = getelementptr inbounds i16, i16* %25, i64 %26
  %28 = getelementptr inbounds i16, i16* %27, i64 -3
  %29 = sext i32 %4 to i64
  %30 = add nsw i32 %7, 6
  %31 = sext i32 %6 to i64
  %32 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %29, i64 0
  %33 = load i8, i8* %32, align 8
  %34 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %29, i64 1
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %29, i64 2
  %37 = load i8, i8* %36, align 2
  %38 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %29, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %29, i64 4
  %41 = load i8, i8* %40, align 4
  %42 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %29, i64 5
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %29, i64 6
  %45 = load i8, i8* %44, align 2
  %46 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %22, i64 %29, i64 7
  %47 = load i8, i8* %46, align 1
  %48 = sext i8 %33 to i32
  %49 = sext i8 %35 to i32
  %50 = sext i8 %37 to i32
  %51 = sext i8 %39 to i32
  %52 = sext i8 %41 to i32
  %53 = sext i8 %43 to i32
  %54 = sext i8 %45 to i32
  %55 = sext i8 %47 to i32
  br label %56

56:                                               ; preds = %113, %21
  %57 = phi i16* [ %23, %21 ], [ %115, %113 ]
  %58 = phi i16* [ %28, %21 ], [ %114, %113 ]
  %59 = phi i32 [ 0, %21 ], [ %116, %113 ]
  %60 = load i16, i16* %58, align 2
  br label %61

61:                                               ; preds = %61, %56
  %62 = phi i16 [ %68, %61 ], [ %60, %56 ]
  %63 = phi i64 [ %66, %61 ], [ 0, %56 ]
  %64 = zext i16 %62 to i32
  %65 = mul nsw i32 %64, %48
  %66 = add nuw nsw i64 %63, 1
  %67 = getelementptr inbounds i16, i16* %58, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = mul nsw i32 %69, %49
  %71 = add nsw i32 %70, %65
  %72 = add nuw nsw i64 %63, 2
  %73 = getelementptr inbounds i16, i16* %58, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = mul nsw i32 %75, %50
  %77 = add nsw i32 %76, %71
  %78 = add nuw nsw i64 %63, 3
  %79 = getelementptr inbounds i16, i16* %58, i64 %78
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nsw i32 %81, %51
  %83 = add nsw i32 %82, %77
  %84 = add nuw nsw i64 %63, 4
  %85 = getelementptr inbounds i16, i16* %58, i64 %84
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = mul nsw i32 %87, %52
  %89 = add nsw i32 %88, %83
  %90 = add nuw nsw i64 %63, 5
  %91 = getelementptr inbounds i16, i16* %58, i64 %90
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nsw i32 %93, %53
  %95 = add nsw i32 %94, %89
  %96 = add nuw nsw i64 %63, 6
  %97 = getelementptr inbounds i16, i16* %58, i64 %96
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = mul nsw i32 %99, %54
  %101 = add nsw i32 %100, %95
  %102 = add nuw nsw i64 %63, 7
  %103 = getelementptr inbounds i16, i16* %58, i64 %102
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = mul nsw i32 %105, %55
  %107 = add nsw i32 %106, %101
  %108 = add nsw i32 %107, 2
  %109 = lshr i32 %108, 2
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %57, i64 %63
  store i16 %110, i16* %111, align 2
  %112 = icmp slt i64 %66, %31
  br i1 %112, label %61, label %113

113:                                              ; preds = %61
  %114 = getelementptr inbounds i16, i16* %58, i64 %24
  %115 = getelementptr inbounds i16, i16* %57, i64 128
  %116 = add nuw nsw i32 %59, 1
  %117 = icmp slt i32 %59, %30
  br i1 %117, label %56, label %118

118:                                              ; preds = %113
  %119 = bitcast i8* %8 to i16*
  %120 = icmp slt i32 %7, 5
  br i1 %120, label %121, label %126

121:                                              ; preds = %118
  %122 = and i32 %3, -3
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %128, label %124

124:                                              ; preds = %121
  %125 = icmp eq i32 %3, 1
  br i1 %125, label %128, label %126

126:                                              ; preds = %124, %118
  %127 = sext i32 %3 to i64
  br label %128

128:                                              ; preds = %121, %124, %126
  %129 = phi i64 [ %127, %126 ], [ 4, %121 ], [ 5, %124 ]
  %130 = sext i32 %5 to i64
  %131 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %129, i64 %130, i64 0
  %132 = load i8, i8* %131, align 8
  %133 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %129, i64 %130, i64 1
  %134 = load i8, i8* %133, align 1
  %135 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %129, i64 %130, i64 2
  %136 = load i8, i8* %135, align 2
  %137 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %129, i64 %130, i64 3
  %138 = load i8, i8* %137, align 1
  %139 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %129, i64 %130, i64 4
  %140 = load i8, i8* %139, align 4
  %141 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %129, i64 %130, i64 5
  %142 = load i8, i8* %141, align 1
  %143 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %129, i64 %130, i64 6
  %144 = load i8, i8* %143, align 2
  %145 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %129, i64 %130, i64 7
  %146 = load i8, i8* %145, align 1
  %147 = sext i8 %132 to i32
  %148 = sext i8 %134 to i32
  %149 = sext i8 %136 to i32
  %150 = sext i8 %138 to i32
  %151 = sext i8 %140 to i32
  %152 = sext i8 %142 to i32
  %153 = sext i8 %144 to i32
  %154 = sext i8 %146 to i32
  %155 = icmp sgt i64 %31, 1
  %156 = select i1 %155, i64 %31, i64 1
  %157 = icmp ult i64 %156, 8
  %158 = and i64 %156, 9223372036854775800
  %159 = insertelement <8 x i32> undef, i32 %147, i32 0
  %160 = shufflevector <8 x i32> %159, <8 x i32> undef, <8 x i32> zeroinitializer
  %161 = insertelement <8 x i32> undef, i32 %148, i32 0
  %162 = shufflevector <8 x i32> %161, <8 x i32> undef, <8 x i32> zeroinitializer
  %163 = insertelement <8 x i32> undef, i32 %149, i32 0
  %164 = shufflevector <8 x i32> %163, <8 x i32> undef, <8 x i32> zeroinitializer
  %165 = insertelement <8 x i32> undef, i32 %150, i32 0
  %166 = shufflevector <8 x i32> %165, <8 x i32> undef, <8 x i32> zeroinitializer
  %167 = insertelement <8 x i32> undef, i32 %151, i32 0
  %168 = shufflevector <8 x i32> %167, <8 x i32> undef, <8 x i32> zeroinitializer
  %169 = insertelement <8 x i32> undef, i32 %152, i32 0
  %170 = shufflevector <8 x i32> %169, <8 x i32> undef, <8 x i32> zeroinitializer
  %171 = insertelement <8 x i32> undef, i32 %153, i32 0
  %172 = shufflevector <8 x i32> %171, <8 x i32> undef, <8 x i32> zeroinitializer
  %173 = insertelement <8 x i32> undef, i32 %154, i32 0
  %174 = shufflevector <8 x i32> %173, <8 x i32> undef, <8 x i32> zeroinitializer
  %175 = icmp eq i64 %156, %158
  br label %176

176:                                              ; preds = %316, %128
  %177 = phi i16* [ %23, %128 ], [ %318, %316 ]
  %178 = phi i16* [ %119, %128 ], [ %317, %316 ]
  %179 = phi i32 [ 0, %128 ], [ %319, %316 ]
  br i1 %157, label %252, label %180

180:                                              ; preds = %176, %180
  %181 = phi i64 [ %249, %180 ], [ 0, %176 ]
  %182 = getelementptr inbounds i16, i16* %177, i64 %181
  %183 = bitcast i16* %182 to <8 x i16>*
  %184 = load <8 x i16>, <8 x i16>* %183, align 2
  %185 = sext <8 x i16> %184 to <8 x i32>
  %186 = mul nsw <8 x i32> %160, %185
  %187 = add nuw i64 %181, 128
  %188 = and i64 %187, 4294967288
  %189 = getelementptr inbounds i16, i16* %177, i64 %188
  %190 = bitcast i16* %189 to <8 x i16>*
  %191 = load <8 x i16>, <8 x i16>* %190, align 2
  %192 = sext <8 x i16> %191 to <8 x i32>
  %193 = mul nsw <8 x i32> %162, %192
  %194 = add nsw <8 x i32> %193, %186
  %195 = add nuw i64 %181, 256
  %196 = and i64 %195, 4294967288
  %197 = getelementptr inbounds i16, i16* %177, i64 %196
  %198 = bitcast i16* %197 to <8 x i16>*
  %199 = load <8 x i16>, <8 x i16>* %198, align 2
  %200 = sext <8 x i16> %199 to <8 x i32>
  %201 = mul nsw <8 x i32> %164, %200
  %202 = add nsw <8 x i32> %201, %194
  %203 = add nuw i64 %181, 384
  %204 = and i64 %203, 4294967288
  %205 = getelementptr inbounds i16, i16* %177, i64 %204
  %206 = bitcast i16* %205 to <8 x i16>*
  %207 = load <8 x i16>, <8 x i16>* %206, align 2
  %208 = sext <8 x i16> %207 to <8 x i32>
  %209 = mul nsw <8 x i32> %166, %208
  %210 = add nsw <8 x i32> %209, %202
  %211 = add nuw i64 %181, 512
  %212 = and i64 %211, 4294967288
  %213 = getelementptr inbounds i16, i16* %177, i64 %212
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = sext <8 x i16> %215 to <8 x i32>
  %217 = mul nsw <8 x i32> %168, %216
  %218 = add nsw <8 x i32> %217, %210
  %219 = add nuw i64 %181, 640
  %220 = and i64 %219, 4294967288
  %221 = getelementptr inbounds i16, i16* %177, i64 %220
  %222 = bitcast i16* %221 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = sext <8 x i16> %223 to <8 x i32>
  %225 = mul nsw <8 x i32> %170, %224
  %226 = add nsw <8 x i32> %225, %218
  %227 = add nuw i64 %181, 768
  %228 = and i64 %227, 4294967288
  %229 = getelementptr inbounds i16, i16* %177, i64 %228
  %230 = bitcast i16* %229 to <8 x i16>*
  %231 = load <8 x i16>, <8 x i16>* %230, align 2
  %232 = sext <8 x i16> %231 to <8 x i32>
  %233 = mul nsw <8 x i32> %172, %232
  %234 = add nsw <8 x i32> %233, %226
  %235 = add nuw i64 %181, 896
  %236 = and i64 %235, 4294967288
  %237 = getelementptr inbounds i16, i16* %177, i64 %236
  %238 = bitcast i16* %237 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 2
  %240 = sext <8 x i16> %239 to <8 x i32>
  %241 = mul nsw <8 x i32> %174, %240
  %242 = add nsw <8 x i32> %241, %234
  %243 = add nsw <8 x i32> %242, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %244 = lshr <8 x i32> %243, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %245 = trunc <8 x i32> %244 to <8 x i16>
  %246 = add <8 x i16> %245, <i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576>
  %247 = getelementptr inbounds i16, i16* %178, i64 %181
  %248 = bitcast i16* %247 to <8 x i16>*
  store <8 x i16> %246, <8 x i16>* %248, align 2
  %249 = add i64 %181, 8
  %250 = icmp eq i64 %249, %158
  br i1 %250, label %251, label %180, !llvm.loop !175

251:                                              ; preds = %180
  br i1 %175, label %316, label %252

252:                                              ; preds = %251, %176
  %253 = phi i64 [ 0, %176 ], [ %158, %251 ]
  br label %254

254:                                              ; preds = %252, %254
  %255 = phi i64 [ %314, %254 ], [ %253, %252 ]
  %256 = getelementptr inbounds i16, i16* %177, i64 %255
  %257 = load i16, i16* %256, align 2
  %258 = sext i16 %257 to i32
  %259 = mul nsw i32 %258, %147
  %260 = add nuw i64 %255, 128
  %261 = and i64 %260, 4294967295
  %262 = getelementptr inbounds i16, i16* %177, i64 %261
  %263 = load i16, i16* %262, align 2
  %264 = sext i16 %263 to i32
  %265 = mul nsw i32 %264, %148
  %266 = add nsw i32 %265, %259
  %267 = add nuw i64 %255, 256
  %268 = and i64 %267, 4294967295
  %269 = getelementptr inbounds i16, i16* %177, i64 %268
  %270 = load i16, i16* %269, align 2
  %271 = sext i16 %270 to i32
  %272 = mul nsw i32 %271, %149
  %273 = add nsw i32 %272, %266
  %274 = add nuw i64 %255, 384
  %275 = and i64 %274, 4294967295
  %276 = getelementptr inbounds i16, i16* %177, i64 %275
  %277 = load i16, i16* %276, align 2
  %278 = sext i16 %277 to i32
  %279 = mul nsw i32 %278, %150
  %280 = add nsw i32 %279, %273
  %281 = add nuw i64 %255, 512
  %282 = and i64 %281, 4294967295
  %283 = getelementptr inbounds i16, i16* %177, i64 %282
  %284 = load i16, i16* %283, align 2
  %285 = sext i16 %284 to i32
  %286 = mul nsw i32 %285, %151
  %287 = add nsw i32 %286, %280
  %288 = add nuw i64 %255, 640
  %289 = and i64 %288, 4294967295
  %290 = getelementptr inbounds i16, i16* %177, i64 %289
  %291 = load i16, i16* %290, align 2
  %292 = sext i16 %291 to i32
  %293 = mul nsw i32 %292, %152
  %294 = add nsw i32 %293, %287
  %295 = add nuw i64 %255, 768
  %296 = and i64 %295, 4294967295
  %297 = getelementptr inbounds i16, i16* %177, i64 %296
  %298 = load i16, i16* %297, align 2
  %299 = sext i16 %298 to i32
  %300 = mul nsw i32 %299, %153
  %301 = add nsw i32 %300, %294
  %302 = add nuw i64 %255, 896
  %303 = and i64 %302, 4294967295
  %304 = getelementptr inbounds i16, i16* %177, i64 %303
  %305 = load i16, i16* %304, align 2
  %306 = sext i16 %305 to i32
  %307 = mul nsw i32 %306, %154
  %308 = add nsw i32 %307, %301
  %309 = add nsw i32 %308, 32
  %310 = lshr i32 %309, 6
  %311 = trunc i32 %310 to i16
  %312 = add i16 %311, 24576
  %313 = getelementptr inbounds i16, i16* %178, i64 %255
  store i16 %312, i16* %313, align 2
  %314 = add nuw nsw i64 %255, 1
  %315 = icmp slt i64 %314, %31
  br i1 %315, label %254, label %316, !llvm.loop !176

316:                                              ; preds = %254, %251
  %317 = getelementptr inbounds i16, i16* %178, i64 %9
  %318 = getelementptr inbounds i16, i16* %177, i64 128
  %319 = add nuw nsw i32 %179, 1
  %320 = icmp slt i32 %319, %7
  br i1 %320, label %176, label %321

321:                                              ; preds = %316
  call void @llvm.lifetime.end.p0i8(i64 34560, i8* nonnull %12) #4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveIntraBlockCopy1D_CILi10EtLb1EEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = bitcast i8* %0 to i16*
  %12 = lshr i64 %1, 1
  %13 = bitcast i8* %8 to i16*
  %14 = lshr i64 %9, 1
  %15 = sext i32 %6 to i64
  %16 = icmp sgt i64 %15, 1
  %17 = select i1 %16, i64 %15, i64 1
  %18 = and i64 %9, -2
  %19 = icmp sgt i64 %15, 1
  %20 = select i1 %19, i64 %15, i64 1
  %21 = shl nuw nsw i64 %20, 1
  %22 = and i64 %1, -2
  %23 = add nuw nsw i64 %21, 2
  %24 = and i64 %17, 9223372036854775800
  %25 = add nsw i64 %24, -8
  %26 = lshr exact i64 %25, 3
  %27 = add nuw nsw i64 %26, 1
  %28 = icmp ult i64 %17, 8
  %29 = and i64 %17, 9223372036854775800
  %30 = and i64 %27, 1
  %31 = icmp eq i64 %25, 0
  %32 = sub nuw nsw i64 %27, %30
  %33 = icmp eq i64 %30, 0
  %34 = icmp eq i64 %17, %29
  br label %35

35:                                               ; preds = %126, %10
  %36 = phi i64 [ %131, %126 ], [ 0, %10 ]
  %37 = phi i16* [ %128, %126 ], [ %13, %10 ]
  %38 = phi i16* [ %127, %126 ], [ %11, %10 ]
  %39 = phi i32 [ %129, %126 ], [ 0, %10 ]
  %40 = mul i64 %18, %36
  %41 = mul i64 %22, %36
  br i1 %28, label %109, label %42

42:                                               ; preds = %35
  %43 = add i64 %23, %41
  %44 = getelementptr i8, i8* %0, i64 %43
  %45 = getelementptr i8, i8* %0, i64 %41
  %46 = add i64 %21, %40
  %47 = getelementptr i8, i8* %8, i64 %46
  %48 = getelementptr i8, i8* %8, i64 %40
  %49 = icmp ult i8* %48, %44
  %50 = icmp ult i8* %45, %47
  %51 = and i1 %49, %50
  br i1 %51, label %109, label %52

52:                                               ; preds = %42
  br i1 %31, label %90, label %53

53:                                               ; preds = %52, %53
  %54 = phi i64 [ %87, %53 ], [ 0, %52 ]
  %55 = phi i64 [ %88, %53 ], [ %32, %52 ]
  %56 = getelementptr inbounds i16, i16* %38, i64 %54
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2, !alias.scope !177
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = or i64 %54, 1
  %61 = getelementptr inbounds i16, i16* %38, i64 %60
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !177
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = add nuw nsw <8 x i32> %59, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %66 = add nuw nsw <8 x i32> %65, %64
  %67 = lshr <8 x i32> %66, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %68 = trunc <8 x i32> %67 to <8 x i16>
  %69 = getelementptr inbounds i16, i16* %37, i64 %54
  %70 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %70, align 2, !alias.scope !180, !noalias !177
  %71 = or i64 %54, 8
  %72 = getelementptr inbounds i16, i16* %38, i64 %71
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !177
  %75 = zext <8 x i16> %74 to <8 x i32>
  %76 = or i64 %54, 9
  %77 = getelementptr inbounds i16, i16* %38, i64 %76
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !177
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = add nuw nsw <8 x i32> %75, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %82 = add nuw nsw <8 x i32> %81, %80
  %83 = lshr <8 x i32> %82, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %84 = trunc <8 x i32> %83 to <8 x i16>
  %85 = getelementptr inbounds i16, i16* %37, i64 %71
  %86 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %86, align 2, !alias.scope !180, !noalias !177
  %87 = add i64 %54, 16
  %88 = add i64 %55, -2
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %53, !llvm.loop !182

90:                                               ; preds = %53, %52
  %91 = phi i64 [ 0, %52 ], [ %87, %53 ]
  br i1 %33, label %108, label %92

92:                                               ; preds = %90
  %93 = getelementptr inbounds i16, i16* %38, i64 %91
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !177
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = or i64 %91, 1
  %98 = getelementptr inbounds i16, i16* %38, i64 %97
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !177
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = add nuw nsw <8 x i32> %96, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %103 = add nuw nsw <8 x i32> %102, %101
  %104 = lshr <8 x i32> %103, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %105 = trunc <8 x i32> %104 to <8 x i16>
  %106 = getelementptr inbounds i16, i16* %37, i64 %91
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %107, align 2, !alias.scope !180, !noalias !177
  br label %108

108:                                              ; preds = %90, %92
  br i1 %34, label %126, label %109

109:                                              ; preds = %108, %42, %35
  %110 = phi i64 [ 0, %42 ], [ 0, %35 ], [ %29, %108 ]
  br label %111

111:                                              ; preds = %109, %111
  %112 = phi i64 [ %116, %111 ], [ %110, %109 ]
  %113 = getelementptr inbounds i16, i16* %38, i64 %112
  %114 = load i16, i16* %113, align 2
  %115 = zext i16 %114 to i32
  %116 = add nuw nsw i64 %112, 1
  %117 = getelementptr inbounds i16, i16* %38, i64 %116
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i32
  %120 = add nuw nsw i32 %115, 1
  %121 = add nuw nsw i32 %120, %119
  %122 = lshr i32 %121, 1
  %123 = trunc i32 %122 to i16
  %124 = getelementptr inbounds i16, i16* %37, i64 %112
  store i16 %123, i16* %124, align 2
  %125 = icmp slt i64 %116, %15
  br i1 %125, label %111, label %126, !llvm.loop !183

126:                                              ; preds = %111, %108
  %127 = getelementptr inbounds i16, i16* %38, i64 %12
  %128 = getelementptr inbounds i16, i16* %37, i64 %14
  %129 = add nuw nsw i32 %39, 1
  %130 = icmp slt i32 %129, %7
  %131 = add i64 %36, 1
  br i1 %130, label %35, label %132

132:                                              ; preds = %126
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveIntraBlockCopy1D_CILi10EtLb0EEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = bitcast i8* %0 to i16*
  %12 = lshr i64 %1, 1
  %13 = bitcast i8* %8 to i16*
  %14 = lshr i64 %9, 1
  %15 = sext i32 %6 to i64
  %16 = icmp sgt i64 %15, 1
  %17 = select i1 %16, i64 %15, i64 1
  %18 = and i64 %9, -2
  %19 = icmp sgt i64 %15, 1
  %20 = select i1 %19, i64 %15, i64 1
  %21 = shl nuw nsw i64 %20, 1
  %22 = and i64 %1, -2
  %23 = and i64 %1, -2
  %24 = add i64 %21, %22
  %25 = and i64 %17, 9223372036854775800
  %26 = add nsw i64 %25, -8
  %27 = lshr exact i64 %26, 3
  %28 = add nuw nsw i64 %27, 1
  %29 = icmp ult i64 %17, 8
  %30 = and i64 %17, 9223372036854775800
  %31 = and i64 %28, 1
  %32 = icmp eq i64 %26, 0
  %33 = sub nuw nsw i64 %28, %31
  %34 = icmp eq i64 %31, 0
  %35 = icmp eq i64 %17, %30
  br label %36

36:                                               ; preds = %136, %10
  %37 = phi i64 [ %141, %136 ], [ 0, %10 ]
  %38 = phi i16* [ %137, %136 ], [ %11, %10 ]
  %39 = phi i16* [ %138, %136 ], [ %13, %10 ]
  %40 = phi i32 [ %139, %136 ], [ 0, %10 ]
  %41 = mul i64 %18, %37
  %42 = getelementptr i8, i8* %8, i64 %41
  %43 = add i64 %21, %41
  %44 = getelementptr i8, i8* %8, i64 %43
  %45 = mul i64 %23, %37
  br i1 %29, label %118, label %46

46:                                               ; preds = %36
  %47 = add i64 %21, %45
  %48 = getelementptr i8, i8* %0, i64 %47
  %49 = getelementptr i8, i8* %0, i64 %45
  %50 = add i64 %24, %45
  %51 = getelementptr i8, i8* %0, i64 %50
  %52 = add i64 %22, %45
  %53 = getelementptr i8, i8* %0, i64 %52
  %54 = icmp ult i8* %42, %51
  %55 = icmp ult i8* %53, %44
  %56 = and i1 %54, %55
  %57 = icmp ult i8* %42, %48
  %58 = icmp ult i8* %49, %44
  %59 = and i1 %57, %58
  %60 = or i1 %56, %59
  br i1 %60, label %118, label %61

61:                                               ; preds = %46
  br i1 %32, label %99, label %62

62:                                               ; preds = %61, %62
  %63 = phi i64 [ %96, %62 ], [ 0, %61 ]
  %64 = phi i64 [ %97, %62 ], [ %33, %61 ]
  %65 = getelementptr inbounds i16, i16* %38, i64 %63
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2, !alias.scope !184
  %68 = zext <8 x i16> %67 to <8 x i32>
  %69 = add nuw nsw i64 %12, %63
  %70 = getelementptr inbounds i16, i16* %38, i64 %69
  %71 = bitcast i16* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !187
  %73 = zext <8 x i16> %72 to <8 x i32>
  %74 = add nuw nsw <8 x i32> %68, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %75 = add nuw nsw <8 x i32> %74, %73
  %76 = lshr <8 x i32> %75, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %77 = trunc <8 x i32> %76 to <8 x i16>
  %78 = getelementptr inbounds i16, i16* %39, i64 %63
  %79 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %79, align 2, !alias.scope !189, !noalias !191
  %80 = or i64 %63, 8
  %81 = getelementptr inbounds i16, i16* %38, i64 %80
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !184
  %84 = zext <8 x i16> %83 to <8 x i32>
  %85 = add nuw nsw i64 %12, %80
  %86 = getelementptr inbounds i16, i16* %38, i64 %85
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !187
  %89 = zext <8 x i16> %88 to <8 x i32>
  %90 = add nuw nsw <8 x i32> %84, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %91 = add nuw nsw <8 x i32> %90, %89
  %92 = lshr <8 x i32> %91, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %93 = trunc <8 x i32> %92 to <8 x i16>
  %94 = getelementptr inbounds i16, i16* %39, i64 %80
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %95, align 2, !alias.scope !189, !noalias !191
  %96 = add i64 %63, 16
  %97 = add i64 %64, -2
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %62, !llvm.loop !192

99:                                               ; preds = %62, %61
  %100 = phi i64 [ 0, %61 ], [ %96, %62 ]
  br i1 %34, label %117, label %101

101:                                              ; preds = %99
  %102 = getelementptr inbounds i16, i16* %38, i64 %100
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !184
  %105 = zext <8 x i16> %104 to <8 x i32>
  %106 = add nuw nsw i64 %12, %100
  %107 = getelementptr inbounds i16, i16* %38, i64 %106
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2, !alias.scope !187
  %110 = zext <8 x i16> %109 to <8 x i32>
  %111 = add nuw nsw <8 x i32> %105, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %112 = add nuw nsw <8 x i32> %111, %110
  %113 = lshr <8 x i32> %112, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %114 = trunc <8 x i32> %113 to <8 x i16>
  %115 = getelementptr inbounds i16, i16* %39, i64 %100
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %116, align 2, !alias.scope !189, !noalias !191
  br label %117

117:                                              ; preds = %99, %101
  br i1 %35, label %136, label %118

118:                                              ; preds = %117, %46, %36
  %119 = phi i64 [ 0, %46 ], [ 0, %36 ], [ %30, %117 ]
  br label %120

120:                                              ; preds = %118, %120
  %121 = phi i64 [ %134, %120 ], [ %119, %118 ]
  %122 = getelementptr inbounds i16, i16* %38, i64 %121
  %123 = load i16, i16* %122, align 2
  %124 = zext i16 %123 to i32
  %125 = add nuw nsw i64 %12, %121
  %126 = getelementptr inbounds i16, i16* %38, i64 %125
  %127 = load i16, i16* %126, align 2
  %128 = zext i16 %127 to i32
  %129 = add nuw nsw i32 %124, 1
  %130 = add nuw nsw i32 %129, %128
  %131 = lshr i32 %130, 1
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %39, i64 %121
  store i16 %132, i16* %133, align 2
  %134 = add nuw nsw i64 %121, 1
  %135 = icmp slt i64 %134, %15
  br i1 %135, label %120, label %136, !llvm.loop !193

136:                                              ; preds = %120, %117
  %137 = getelementptr inbounds i16, i16* %38, i64 %12
  %138 = getelementptr inbounds i16, i16* %39, i64 %14
  %139 = add nuw nsw i32 %40, 1
  %140 = icmp slt i32 %139, %7
  %141 = add i64 %37, 1
  br i1 %140, label %36, label %142

142:                                              ; preds = %136
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_126ConvolveIntraBlockCopy2D_CILi10EtEEvPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #0 {
  %11 = alloca [16512 x i16], align 16
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  %14 = bitcast i8* %8 to i16*
  %15 = bitcast [16512 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 33024, i8* nonnull %15) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 33024, i1 false)
  %16 = getelementptr inbounds [16512 x i16], [16512 x i16]* %11, i64 0, i64 0
  %17 = sext i32 %6 to i64
  %18 = icmp sgt i64 %17, 1
  %19 = select i1 %18, i64 %17, i64 1
  %20 = and i64 %19, 9223372036854775792
  %21 = add nsw i64 %20, -16
  %22 = lshr exact i64 %21, 4
  %23 = add nuw nsw i64 %22, 1
  %24 = icmp ult i64 %19, 16
  %25 = and i64 %19, 9223372036854775792
  %26 = and i64 %23, 1
  %27 = icmp eq i64 %21, 0
  %28 = sub nuw nsw i64 %23, %26
  %29 = icmp eq i64 %26, 0
  %30 = icmp eq i64 %19, %25
  br label %31

31:                                               ; preds = %111, %10
  %32 = phi i16* [ %12, %10 ], [ %112, %111 ]
  %33 = phi i16* [ %16, %10 ], [ %113, %111 ]
  %34 = phi i32 [ 0, %10 ], [ %114, %111 ]
  %35 = load i16, i16* %32, align 2
  br i1 %24, label %99, label %36

36:                                               ; preds = %31
  %37 = insertelement <8 x i16> undef, i16 %35, i32 7
  br i1 %27, label %76, label %38

38:                                               ; preds = %36, %38
  %39 = phi i64 [ %73, %38 ], [ 0, %36 ]
  %40 = phi <8 x i16> [ %64, %38 ], [ %37, %36 ]
  %41 = phi i64 [ %74, %38 ], [ %28, %36 ]
  %42 = or i64 %39, 1
  %43 = getelementptr inbounds i16, i16* %32, i64 %42
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2
  %46 = getelementptr inbounds i16, i16* %43, i64 8
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2
  %49 = shufflevector <8 x i16> %40, <8 x i16> %45, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %50 = shufflevector <8 x i16> %45, <8 x i16> %48, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %51 = add <8 x i16> %45, %49
  %52 = add <8 x i16> %48, %50
  %53 = getelementptr inbounds i16, i16* %33, i64 %39
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %54, align 2
  %55 = getelementptr inbounds i16, i16* %53, i64 8
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %56, align 2
  %57 = or i64 %39, 16
  %58 = or i64 %39, 17
  %59 = getelementptr inbounds i16, i16* %32, i64 %58
  %60 = bitcast i16* %59 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  %62 = getelementptr inbounds i16, i16* %59, i64 8
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 2
  %65 = shufflevector <8 x i16> %48, <8 x i16> %61, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %66 = shufflevector <8 x i16> %61, <8 x i16> %64, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %67 = add <8 x i16> %61, %65
  %68 = add <8 x i16> %64, %66
  %69 = getelementptr inbounds i16, i16* %33, i64 %57
  %70 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %70, align 2
  %71 = getelementptr inbounds i16, i16* %69, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %72, align 2
  %73 = add i64 %39, 32
  %74 = add i64 %41, -2
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %38, !llvm.loop !194

76:                                               ; preds = %38, %36
  %77 = phi <8 x i16> [ undef, %36 ], [ %64, %38 ]
  %78 = phi i64 [ 0, %36 ], [ %73, %38 ]
  %79 = phi <8 x i16> [ %37, %36 ], [ %64, %38 ]
  br i1 %29, label %96, label %80

80:                                               ; preds = %76
  %81 = or i64 %78, 1
  %82 = getelementptr inbounds i16, i16* %32, i64 %81
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2
  %85 = getelementptr inbounds i16, i16* %82, i64 8
  %86 = bitcast i16* %85 to <8 x i16>*
  %87 = load <8 x i16>, <8 x i16>* %86, align 2
  %88 = shufflevector <8 x i16> %79, <8 x i16> %84, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %89 = shufflevector <8 x i16> %84, <8 x i16> %87, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %90 = add <8 x i16> %84, %88
  %91 = add <8 x i16> %87, %89
  %92 = getelementptr inbounds i16, i16* %33, i64 %78
  %93 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %93, align 2
  %94 = getelementptr inbounds i16, i16* %92, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %95, align 2
  br label %96

96:                                               ; preds = %76, %80
  %97 = phi <8 x i16> [ %77, %76 ], [ %87, %80 ]
  %98 = extractelement <8 x i16> %97, i32 7
  br i1 %30, label %111, label %99

99:                                               ; preds = %96, %31
  %100 = phi i16 [ %35, %31 ], [ %98, %96 ]
  %101 = phi i64 [ 0, %31 ], [ %25, %96 ]
  br label %102

102:                                              ; preds = %99, %102
  %103 = phi i16 [ %107, %102 ], [ %100, %99 ]
  %104 = phi i64 [ %105, %102 ], [ %101, %99 ]
  %105 = add nuw nsw i64 %104, 1
  %106 = getelementptr inbounds i16, i16* %32, i64 %105
  %107 = load i16, i16* %106, align 2
  %108 = add i16 %107, %103
  %109 = getelementptr inbounds i16, i16* %33, i64 %104
  store i16 %108, i16* %109, align 2
  %110 = icmp slt i64 %105, %17
  br i1 %110, label %102, label %111, !llvm.loop !195

111:                                              ; preds = %102, %96
  %112 = getelementptr inbounds i16, i16* %32, i64 %13
  %113 = getelementptr inbounds i16, i16* %33, i64 %17
  %114 = add nuw nsw i32 %34, 1
  %115 = icmp slt i32 %34, %7
  br i1 %115, label %31, label %116

116:                                              ; preds = %111
  %117 = lshr i64 %9, 1
  %118 = icmp sgt i64 %17, 1
  %119 = select i1 %118, i64 %17, i64 1
  %120 = and i64 %119, 9223372036854775800
  %121 = add nsw i64 %120, -8
  %122 = lshr exact i64 %121, 3
  %123 = add nuw nsw i64 %122, 1
  %124 = icmp ult i64 %119, 8
  %125 = and i64 %119, 9223372036854775800
  %126 = and i64 %123, 1
  %127 = icmp eq i64 %121, 0
  %128 = sub nuw nsw i64 %123, %126
  %129 = icmp eq i64 %126, 0
  %130 = icmp eq i64 %119, %125
  br label %131

131:                                              ; preds = %116, %210
  %132 = phi i16* [ %212, %210 ], [ %14, %116 ]
  %133 = phi i16* [ %211, %210 ], [ %16, %116 ]
  %134 = phi i32 [ %213, %210 ], [ 0, %116 ]
  br i1 %124, label %192, label %135

135:                                              ; preds = %131
  br i1 %127, label %173, label %136

136:                                              ; preds = %135, %136
  %137 = phi i64 [ %170, %136 ], [ 0, %135 ]
  %138 = phi i64 [ %171, %136 ], [ %128, %135 ]
  %139 = getelementptr inbounds i16, i16* %133, i64 %137
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2
  %142 = zext <8 x i16> %141 to <8 x i32>
  %143 = add nsw i64 %137, %17
  %144 = getelementptr inbounds i16, i16* %133, i64 %143
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 2
  %147 = zext <8 x i16> %146 to <8 x i32>
  %148 = add nuw nsw <8 x i32> %142, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %149 = add nuw nsw <8 x i32> %148, %147
  %150 = lshr <8 x i32> %149, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %151 = trunc <8 x i32> %150 to <8 x i16>
  %152 = getelementptr inbounds i16, i16* %132, i64 %137
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %153, align 2
  %154 = or i64 %137, 8
  %155 = getelementptr inbounds i16, i16* %133, i64 %154
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 2
  %158 = zext <8 x i16> %157 to <8 x i32>
  %159 = add nsw i64 %154, %17
  %160 = getelementptr inbounds i16, i16* %133, i64 %159
  %161 = bitcast i16* %160 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 2
  %163 = zext <8 x i16> %162 to <8 x i32>
  %164 = add nuw nsw <8 x i32> %158, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %165 = add nuw nsw <8 x i32> %164, %163
  %166 = lshr <8 x i32> %165, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %167 = trunc <8 x i32> %166 to <8 x i16>
  %168 = getelementptr inbounds i16, i16* %132, i64 %154
  %169 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %169, align 2
  %170 = add i64 %137, 16
  %171 = add i64 %138, -2
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %173, label %136, !llvm.loop !196

173:                                              ; preds = %136, %135
  %174 = phi i64 [ 0, %135 ], [ %170, %136 ]
  br i1 %129, label %191, label %175

175:                                              ; preds = %173
  %176 = getelementptr inbounds i16, i16* %133, i64 %174
  %177 = bitcast i16* %176 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 2
  %179 = zext <8 x i16> %178 to <8 x i32>
  %180 = add nsw i64 %174, %17
  %181 = getelementptr inbounds i16, i16* %133, i64 %180
  %182 = bitcast i16* %181 to <8 x i16>*
  %183 = load <8 x i16>, <8 x i16>* %182, align 2
  %184 = zext <8 x i16> %183 to <8 x i32>
  %185 = add nuw nsw <8 x i32> %179, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %186 = add nuw nsw <8 x i32> %185, %184
  %187 = lshr <8 x i32> %186, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %188 = trunc <8 x i32> %187 to <8 x i16>
  %189 = getelementptr inbounds i16, i16* %132, i64 %174
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %188, <8 x i16>* %190, align 2
  br label %191

191:                                              ; preds = %173, %175
  br i1 %130, label %210, label %192

192:                                              ; preds = %191, %131
  %193 = phi i64 [ 0, %131 ], [ %125, %191 ]
  br label %194

194:                                              ; preds = %192, %194
  %195 = phi i64 [ %208, %194 ], [ %193, %192 ]
  %196 = getelementptr inbounds i16, i16* %133, i64 %195
  %197 = load i16, i16* %196, align 2
  %198 = zext i16 %197 to i32
  %199 = add nsw i64 %195, %17
  %200 = getelementptr inbounds i16, i16* %133, i64 %199
  %201 = load i16, i16* %200, align 2
  %202 = zext i16 %201 to i32
  %203 = add nuw nsw i32 %198, 2
  %204 = add nuw nsw i32 %203, %202
  %205 = lshr i32 %204, 2
  %206 = trunc i32 %205 to i16
  %207 = getelementptr inbounds i16, i16* %132, i64 %195
  store i16 %206, i16* %207, align 2
  %208 = add nuw nsw i64 %195, 1
  %209 = icmp slt i64 %208, %17
  br i1 %209, label %194, label %210, !llvm.loop !197

210:                                              ; preds = %194, %191
  %211 = getelementptr inbounds i16, i16* %133, i64 %17
  %212 = getelementptr inbounds i16, i16* %132, i64 %117
  %213 = add nuw nsw i32 %134, 1
  %214 = icmp slt i32 %213, %7
  br i1 %214, label %131, label %215

215:                                              ; preds = %210
  call void @llvm.lifetime.end.p0i8(i64 33024, i8* nonnull %15) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_117ConvolveScale2D_CILi10EtEEvPKvliiiiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #0 {
  %13 = alloca [33792 x i16], align 16
  %14 = add nsw i32 %9, -1
  %15 = mul nsw i32 %14, %7
  %16 = add nsw i32 %15, 1023
  %17 = ashr i32 %16, 10
  %18 = bitcast [33792 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 67584, i8* nonnull %18) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 67584, i1 false)
  %19 = icmp slt i32 %8, 5
  br i1 %19, label %20, label %25

20:                                               ; preds = %12
  %21 = and i32 %2, -3
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %20
  %24 = icmp eq i32 %2, 1
  br i1 %24, label %27, label %25

25:                                               ; preds = %23, %12
  %26 = sext i32 %2 to i64
  br label %27

27:                                               ; preds = %20, %23, %25
  %28 = phi i64 [ %26, %25 ], [ 4, %20 ], [ 5, %23 ]
  %29 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 0
  %30 = bitcast i8* %0 to i16*
  %31 = lshr i64 %1, 1
  %32 = bitcast i8* %10 to i16*
  %33 = ashr i32 %4, 10
  %34 = add nsw i32 %17, 7
  %35 = sext i32 %8 to i64
  br label %36

36:                                               ; preds = %119, %27
  %37 = phi i16* [ %29, %27 ], [ %121, %119 ]
  %38 = phi i16* [ %30, %27 ], [ %120, %119 ]
  %39 = phi i32 [ 0, %27 ], [ %122, %119 ]
  br label %40

40:                                               ; preds = %40, %36
  %41 = phi i64 [ %117, %40 ], [ 0, %36 ]
  %42 = phi i32 [ %116, %40 ], [ %4, %36 ]
  %43 = ashr i32 %42, 10
  %44 = sub nsw i32 %43, %33
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i16, i16* %38, i64 %45
  %47 = lshr i32 %42, 6
  %48 = and i32 %47, 15
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %49, i64 0
  %51 = load i8, i8* %50, align 8
  %52 = sext i8 %51 to i32
  %53 = load i16, i16* %46, align 2
  %54 = zext i16 %53 to i32
  %55 = mul nsw i32 %54, %52
  %56 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %49, i64 1
  %57 = load i8, i8* %56, align 1
  %58 = sext i8 %57 to i32
  %59 = getelementptr inbounds i16, i16* %46, i64 1
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = mul nsw i32 %61, %58
  %63 = add nsw i32 %62, %55
  %64 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %49, i64 2
  %65 = load i8, i8* %64, align 2
  %66 = sext i8 %65 to i32
  %67 = getelementptr inbounds i16, i16* %46, i64 2
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = mul nsw i32 %69, %66
  %71 = add nsw i32 %70, %63
  %72 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %49, i64 3
  %73 = load i8, i8* %72, align 1
  %74 = sext i8 %73 to i32
  %75 = getelementptr inbounds i16, i16* %46, i64 3
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nsw i32 %77, %74
  %79 = add nsw i32 %78, %71
  %80 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %49, i64 4
  %81 = load i8, i8* %80, align 4
  %82 = sext i8 %81 to i32
  %83 = getelementptr inbounds i16, i16* %46, i64 4
  %84 = load i16, i16* %83, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nsw i32 %85, %82
  %87 = add nsw i32 %86, %79
  %88 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %49, i64 5
  %89 = load i8, i8* %88, align 1
  %90 = sext i8 %89 to i32
  %91 = getelementptr inbounds i16, i16* %46, i64 5
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nsw i32 %93, %90
  %95 = add nsw i32 %94, %87
  %96 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %49, i64 6
  %97 = load i8, i8* %96, align 2
  %98 = sext i8 %97 to i32
  %99 = getelementptr inbounds i16, i16* %46, i64 6
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nsw i32 %101, %98
  %103 = add nsw i32 %102, %95
  %104 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %49, i64 7
  %105 = load i8, i8* %104, align 1
  %106 = sext i8 %105 to i32
  %107 = getelementptr inbounds i16, i16* %46, i64 7
  %108 = load i16, i16* %107, align 2
  %109 = zext i16 %108 to i32
  %110 = mul nsw i32 %109, %106
  %111 = add nsw i32 %110, %103
  %112 = add nsw i32 %111, 2
  %113 = lshr i32 %112, 2
  %114 = trunc i32 %113 to i16
  %115 = getelementptr inbounds i16, i16* %37, i64 %41
  store i16 %114, i16* %115, align 2
  %116 = add nsw i32 %42, %6
  %117 = add nuw nsw i64 %41, 1
  %118 = icmp slt i64 %117, %35
  br i1 %118, label %40, label %119

119:                                              ; preds = %40
  %120 = getelementptr inbounds i16, i16* %38, i64 %31
  %121 = getelementptr inbounds i16, i16* %37, i64 128
  %122 = add nuw nsw i32 %39, 1
  %123 = icmp slt i32 %39, %34
  br i1 %123, label %36, label %124

124:                                              ; preds = %119
  %125 = lshr i64 %11, 1
  %126 = icmp slt i32 %9, 5
  br i1 %126, label %127, label %132

127:                                              ; preds = %124
  %128 = and i32 %3, -3
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %134, label %130

130:                                              ; preds = %127
  %131 = icmp eq i32 %3, 1
  br i1 %131, label %134, label %132

132:                                              ; preds = %130, %124
  %133 = sext i32 %3 to i64
  br label %134

134:                                              ; preds = %127, %130, %132
  %135 = phi i64 [ %133, %132 ], [ 4, %127 ], [ 5, %130 ]
  %136 = and i32 %5, 1023
  %137 = icmp sgt i64 %35, 1
  %138 = select i1 %137, i64 %35, i64 1
  %139 = icmp sgt i64 %35, 1
  %140 = select i1 %139, i64 %35, i64 1
  %141 = add nsw i64 %140, -1
  %142 = and i64 %11, -2
  %143 = icmp sgt i64 %35, 1
  %144 = select i1 %143, i64 %35, i64 1
  %145 = shl nuw nsw i64 %144, 1
  %146 = add nuw nsw i64 %144, 896
  %147 = getelementptr [33792 x i16], [33792 x i16]* %13, i64 0, i64 %146
  %148 = icmp ult i64 %138, 8
  %149 = trunc i64 %141 to i32
  %150 = icmp ugt i64 %141, 4294967295
  %151 = trunc i64 %141 to i32
  %152 = icmp ugt i64 %141, 4294967295
  %153 = trunc i64 %141 to i32
  %154 = icmp ugt i64 %141, 4294967295
  %155 = trunc i64 %141 to i32
  %156 = icmp ugt i64 %141, 4294967295
  %157 = trunc i64 %141 to i32
  %158 = icmp ugt i64 %141, 4294967295
  %159 = trunc i64 %141 to i32
  %160 = icmp ugt i64 %141, 4294967295
  %161 = trunc i64 %141 to i32
  %162 = icmp ugt i64 %141, 4294967295
  %163 = and i64 %138, 9223372036854775800
  %164 = icmp eq i64 %138, %163
  br label %165

165:                                              ; preds = %417, %134
  %166 = phi i64 [ %422, %417 ], [ 0, %134 ]
  %167 = phi i16* [ %418, %417 ], [ %32, %134 ]
  %168 = phi i32 [ %420, %417 ], [ 0, %134 ]
  %169 = phi i32 [ %419, %417 ], [ %136, %134 ]
  %170 = mul i64 %142, %166
  %171 = getelementptr i8, i8* %10, i64 %170
  %172 = add i64 %145, %170
  %173 = getelementptr i8, i8* %10, i64 %172
  %174 = lshr i32 %169, 6
  %175 = and i32 %174, 15
  %176 = zext i32 %175 to i64
  %177 = ashr i32 %169, 10
  %178 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %135, i64 %176, i64 0
  %179 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %135, i64 %176, i64 2
  %180 = load i8, i8* %179, align 2
  %181 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %135, i64 %176, i64 3
  %182 = load i8, i8* %181, align 1
  %183 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %135, i64 %176, i64 4
  %184 = load i8, i8* %183, align 4
  %185 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %135, i64 %176, i64 5
  %186 = load i8, i8* %185, align 1
  %187 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %135, i64 %176, i64 6
  %188 = load i8, i8* %187, align 2
  %189 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %135, i64 %176, i64 7
  %190 = load i8, i8* %189, align 1
  %191 = load i8, i8* %178, align 8
  %192 = sext i8 %191 to i32
  %193 = shl nsw i32 %177, 7
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %135, i64 %176, i64 1
  %196 = load i8, i8* %195, align 1
  %197 = sext i8 %196 to i32
  %198 = shl nsw i32 %177, 7
  %199 = add nsw i32 %198, 128
  %200 = sext i8 %180 to i32
  %201 = shl nsw i32 %177, 7
  %202 = add nsw i32 %201, 256
  %203 = sext i8 %182 to i32
  %204 = shl nsw i32 %177, 7
  %205 = add nsw i32 %204, 384
  %206 = sext i8 %184 to i32
  %207 = shl nsw i32 %177, 7
  %208 = add nsw i32 %207, 512
  %209 = sext i8 %186 to i32
  %210 = shl nsw i32 %177, 7
  %211 = add nsw i32 %210, 640
  %212 = sext i8 %188 to i32
  %213 = shl nsw i32 %177, 7
  %214 = add nsw i32 %213, 768
  %215 = sext i8 %190 to i32
  %216 = shl nsw i32 %177, 7
  %217 = add nsw i32 %216, 896
  br i1 %148, label %348, label %218

218:                                              ; preds = %165
  %219 = add i32 %199, %149
  %220 = icmp slt i32 %219, %199
  %221 = or i1 %220, %150
  %222 = add i32 %202, %151
  %223 = icmp slt i32 %222, %202
  %224 = or i1 %223, %152
  %225 = or i1 %221, %224
  %226 = add i32 %205, %153
  %227 = icmp slt i32 %226, %205
  %228 = or i1 %227, %154
  %229 = or i1 %225, %228
  %230 = add i32 %208, %155
  %231 = icmp slt i32 %230, %208
  %232 = or i1 %231, %156
  %233 = or i1 %229, %232
  %234 = add i32 %211, %157
  %235 = icmp slt i32 %234, %211
  %236 = or i1 %235, %158
  %237 = or i1 %233, %236
  %238 = add i32 %214, %159
  %239 = icmp slt i32 %238, %214
  %240 = or i1 %239, %160
  %241 = or i1 %237, %240
  %242 = add i32 %217, %161
  %243 = icmp slt i32 %242, %217
  %244 = or i1 %243, %162
  %245 = or i1 %241, %244
  br i1 %245, label %348, label %246

246:                                              ; preds = %218
  %247 = getelementptr [33792 x i16], [33792 x i16]* %13, i64 0, i64 %194
  %248 = bitcast i16* %247 to i8*
  %249 = getelementptr i16, i16* %147, i64 %194
  %250 = bitcast i16* %249 to i8*
  %251 = icmp ult i8* %171, %250
  %252 = icmp ugt i8* %173, %248
  %253 = and i1 %251, %252
  br i1 %253, label %348, label %254

254:                                              ; preds = %246
  %255 = insertelement <8 x i32> undef, i32 %192, i32 0
  %256 = shufflevector <8 x i32> %255, <8 x i32> undef, <8 x i32> zeroinitializer
  %257 = insertelement <8 x i32> undef, i32 %197, i32 0
  %258 = shufflevector <8 x i32> %257, <8 x i32> undef, <8 x i32> zeroinitializer
  %259 = insertelement <8 x i32> undef, i32 %200, i32 0
  %260 = shufflevector <8 x i32> %259, <8 x i32> undef, <8 x i32> zeroinitializer
  %261 = insertelement <8 x i32> undef, i32 %203, i32 0
  %262 = shufflevector <8 x i32> %261, <8 x i32> undef, <8 x i32> zeroinitializer
  %263 = insertelement <8 x i32> undef, i32 %206, i32 0
  %264 = shufflevector <8 x i32> %263, <8 x i32> undef, <8 x i32> zeroinitializer
  %265 = insertelement <8 x i32> undef, i32 %209, i32 0
  %266 = shufflevector <8 x i32> %265, <8 x i32> undef, <8 x i32> zeroinitializer
  %267 = insertelement <8 x i32> undef, i32 %212, i32 0
  %268 = shufflevector <8 x i32> %267, <8 x i32> undef, <8 x i32> zeroinitializer
  %269 = insertelement <8 x i32> undef, i32 %215, i32 0
  %270 = shufflevector <8 x i32> %269, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %271

271:                                              ; preds = %271, %254
  %272 = phi i64 [ 0, %254 ], [ %345, %271 ]
  %273 = add nsw i64 %272, %194
  %274 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %273
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 16, !alias.scope !198
  %277 = sext <8 x i16> %276 to <8 x i32>
  %278 = mul nsw <8 x i32> %256, %277
  %279 = trunc i64 %272 to i32
  %280 = add nsw i32 %199, %279
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %281
  %283 = bitcast i16* %282 to <8 x i16>*
  %284 = load <8 x i16>, <8 x i16>* %283, align 16, !alias.scope !198
  %285 = sext <8 x i16> %284 to <8 x i32>
  %286 = mul nsw <8 x i32> %258, %285
  %287 = add nsw <8 x i32> %286, %278
  %288 = add nsw i32 %202, %279
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %289
  %291 = bitcast i16* %290 to <8 x i16>*
  %292 = load <8 x i16>, <8 x i16>* %291, align 16, !alias.scope !198
  %293 = sext <8 x i16> %292 to <8 x i32>
  %294 = mul nsw <8 x i32> %260, %293
  %295 = add nsw <8 x i32> %294, %287
  %296 = add nsw i32 %205, %279
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %297
  %299 = bitcast i16* %298 to <8 x i16>*
  %300 = load <8 x i16>, <8 x i16>* %299, align 16, !alias.scope !198
  %301 = sext <8 x i16> %300 to <8 x i32>
  %302 = mul nsw <8 x i32> %262, %301
  %303 = add nsw <8 x i32> %302, %295
  %304 = add nsw i32 %208, %279
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %305
  %307 = bitcast i16* %306 to <8 x i16>*
  %308 = load <8 x i16>, <8 x i16>* %307, align 16, !alias.scope !198
  %309 = sext <8 x i16> %308 to <8 x i32>
  %310 = mul nsw <8 x i32> %264, %309
  %311 = add nsw <8 x i32> %310, %303
  %312 = add nsw i32 %211, %279
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %313
  %315 = bitcast i16* %314 to <8 x i16>*
  %316 = load <8 x i16>, <8 x i16>* %315, align 16, !alias.scope !198
  %317 = sext <8 x i16> %316 to <8 x i32>
  %318 = mul nsw <8 x i32> %266, %317
  %319 = add nsw <8 x i32> %318, %311
  %320 = add nsw i32 %214, %279
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %321
  %323 = bitcast i16* %322 to <8 x i16>*
  %324 = load <8 x i16>, <8 x i16>* %323, align 16, !alias.scope !198
  %325 = sext <8 x i16> %324 to <8 x i32>
  %326 = mul nsw <8 x i32> %268, %325
  %327 = add nsw <8 x i32> %326, %319
  %328 = add nsw i32 %217, %279
  %329 = sext i32 %328 to i64
  %330 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %329
  %331 = bitcast i16* %330 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 16, !alias.scope !198
  %333 = sext <8 x i16> %332 to <8 x i32>
  %334 = mul nsw <8 x i32> %270, %333
  %335 = add nsw <8 x i32> %334, %327
  %336 = add nsw <8 x i32> %335, <i32 512, i32 512, i32 512, i32 512, i32 512, i32 512, i32 512, i32 512>
  %337 = ashr <8 x i32> %336, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %338 = icmp slt <8 x i32> %337, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %339 = select <8 x i1> %338, <8 x i32> %337, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %340 = icmp sgt <8 x i32> %339, zeroinitializer
  %341 = select <8 x i1> %340, <8 x i32> %339, <8 x i32> zeroinitializer
  %342 = trunc <8 x i32> %341 to <8 x i16>
  %343 = getelementptr inbounds i16, i16* %167, i64 %272
  %344 = bitcast i16* %343 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %344, align 2, !alias.scope !201, !noalias !198
  %345 = add i64 %272, 8
  %346 = icmp eq i64 %345, %163
  br i1 %346, label %347, label %271, !llvm.loop !203

347:                                              ; preds = %271
  br i1 %164, label %417, label %348

348:                                              ; preds = %347, %246, %218, %165
  %349 = phi i64 [ 0, %246 ], [ 0, %218 ], [ 0, %165 ], [ %163, %347 ]
  br label %350

350:                                              ; preds = %348, %350
  %351 = phi i64 [ %415, %350 ], [ %349, %348 ]
  %352 = add nsw i64 %351, %194
  %353 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %352
  %354 = load i16, i16* %353, align 2
  %355 = sext i16 %354 to i32
  %356 = mul nsw i32 %355, %192
  %357 = trunc i64 %351 to i32
  %358 = add nsw i32 %199, %357
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %359
  %361 = load i16, i16* %360, align 2
  %362 = sext i16 %361 to i32
  %363 = mul nsw i32 %362, %197
  %364 = add nsw i32 %363, %356
  %365 = add nsw i32 %202, %357
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %366
  %368 = load i16, i16* %367, align 2
  %369 = sext i16 %368 to i32
  %370 = mul nsw i32 %369, %200
  %371 = add nsw i32 %370, %364
  %372 = add nsw i32 %205, %357
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %373
  %375 = load i16, i16* %374, align 2
  %376 = sext i16 %375 to i32
  %377 = mul nsw i32 %376, %203
  %378 = add nsw i32 %377, %371
  %379 = add nsw i32 %208, %357
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %380
  %382 = load i16, i16* %381, align 2
  %383 = sext i16 %382 to i32
  %384 = mul nsw i32 %383, %206
  %385 = add nsw i32 %384, %378
  %386 = add nsw i32 %211, %357
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %387
  %389 = load i16, i16* %388, align 2
  %390 = sext i16 %389 to i32
  %391 = mul nsw i32 %390, %209
  %392 = add nsw i32 %391, %385
  %393 = add nsw i32 %214, %357
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %394
  %396 = load i16, i16* %395, align 2
  %397 = sext i16 %396 to i32
  %398 = mul nsw i32 %397, %212
  %399 = add nsw i32 %398, %392
  %400 = add nsw i32 %217, %357
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %401
  %403 = load i16, i16* %402, align 2
  %404 = sext i16 %403 to i32
  %405 = mul nsw i32 %404, %215
  %406 = add nsw i32 %405, %399
  %407 = add nsw i32 %406, 512
  %408 = ashr i32 %407, 10
  %409 = icmp slt i32 %408, 1023
  %410 = select i1 %409, i32 %408, i32 1023
  %411 = icmp sgt i32 %410, 0
  %412 = select i1 %411, i32 %410, i32 0
  %413 = trunc i32 %412 to i16
  %414 = getelementptr inbounds i16, i16* %167, i64 %351
  store i16 %413, i16* %414, align 2
  %415 = add nuw nsw i64 %351, 1
  %416 = icmp slt i64 %415, %35
  br i1 %416, label %350, label %417, !llvm.loop !204

417:                                              ; preds = %350, %347
  %418 = getelementptr inbounds i16, i16* %167, i64 %125
  %419 = add nsw i32 %169, %7
  %420 = add nuw nsw i32 %168, 1
  %421 = icmp slt i32 %420, %9
  %422 = add i64 %166, 1
  br i1 %421, label %165, label %423

423:                                              ; preds = %417
  call void @llvm.lifetime.end.p0i8(i64 67584, i8* nonnull %18) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_125ConvolveCompoundScale2D_CILi10EtEEvPKvliiiiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #0 {
  %13 = alloca [33792 x i16], align 16
  %14 = add nsw i32 %9, -1
  %15 = mul nsw i32 %14, %7
  %16 = add nsw i32 %15, 1023
  %17 = ashr i32 %16, 10
  %18 = bitcast [33792 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 67584, i8* nonnull %18) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 67584, i1 false)
  %19 = icmp slt i32 %8, 5
  br i1 %19, label %20, label %25

20:                                               ; preds = %12
  %21 = and i32 %2, -3
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %20
  %24 = icmp eq i32 %2, 1
  br i1 %24, label %27, label %25

25:                                               ; preds = %23, %12
  %26 = sext i32 %2 to i64
  br label %27

27:                                               ; preds = %20, %23, %25
  %28 = phi i64 [ %26, %25 ], [ 4, %20 ], [ 5, %23 ]
  %29 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 0
  %30 = bitcast i8* %0 to i16*
  %31 = lshr i64 %1, 1
  %32 = ashr i32 %4, 10
  %33 = add nsw i32 %17, 7
  %34 = sext i32 %8 to i64
  br label %35

35:                                               ; preds = %118, %27
  %36 = phi i16* [ %29, %27 ], [ %120, %118 ]
  %37 = phi i16* [ %30, %27 ], [ %119, %118 ]
  %38 = phi i32 [ 0, %27 ], [ %121, %118 ]
  br label %39

39:                                               ; preds = %39, %35
  %40 = phi i64 [ %116, %39 ], [ 0, %35 ]
  %41 = phi i32 [ %115, %39 ], [ %4, %35 ]
  %42 = ashr i32 %41, 10
  %43 = sub nsw i32 %42, %32
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i16, i16* %37, i64 %44
  %46 = lshr i32 %41, 6
  %47 = and i32 %46, 15
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %48, i64 0
  %50 = load i8, i8* %49, align 8
  %51 = sext i8 %50 to i32
  %52 = load i16, i16* %45, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nsw i32 %53, %51
  %55 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %48, i64 1
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = getelementptr inbounds i16, i16* %45, i64 1
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = mul nsw i32 %60, %57
  %62 = add nsw i32 %61, %54
  %63 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %48, i64 2
  %64 = load i8, i8* %63, align 2
  %65 = sext i8 %64 to i32
  %66 = getelementptr inbounds i16, i16* %45, i64 2
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nsw i32 %68, %65
  %70 = add nsw i32 %69, %62
  %71 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %48, i64 3
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = getelementptr inbounds i16, i16* %45, i64 3
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = mul nsw i32 %76, %73
  %78 = add nsw i32 %77, %70
  %79 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %48, i64 4
  %80 = load i8, i8* %79, align 4
  %81 = sext i8 %80 to i32
  %82 = getelementptr inbounds i16, i16* %45, i64 4
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = mul nsw i32 %84, %81
  %86 = add nsw i32 %85, %78
  %87 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %48, i64 5
  %88 = load i8, i8* %87, align 1
  %89 = sext i8 %88 to i32
  %90 = getelementptr inbounds i16, i16* %45, i64 5
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nsw i32 %92, %89
  %94 = add nsw i32 %93, %86
  %95 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %48, i64 6
  %96 = load i8, i8* %95, align 2
  %97 = sext i8 %96 to i32
  %98 = getelementptr inbounds i16, i16* %45, i64 6
  %99 = load i16, i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = mul nsw i32 %100, %97
  %102 = add nsw i32 %101, %94
  %103 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %28, i64 %48, i64 7
  %104 = load i8, i8* %103, align 1
  %105 = sext i8 %104 to i32
  %106 = getelementptr inbounds i16, i16* %45, i64 7
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nsw i32 %108, %105
  %110 = add nsw i32 %109, %102
  %111 = add nsw i32 %110, 2
  %112 = lshr i32 %111, 2
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds i16, i16* %36, i64 %40
  store i16 %113, i16* %114, align 2
  %115 = add nsw i32 %41, %6
  %116 = add nuw nsw i64 %40, 1
  %117 = icmp slt i64 %116, %34
  br i1 %117, label %39, label %118

118:                                              ; preds = %39
  %119 = getelementptr inbounds i16, i16* %37, i64 %31
  %120 = getelementptr inbounds i16, i16* %36, i64 128
  %121 = add nuw nsw i32 %38, 1
  %122 = icmp slt i32 %38, %33
  br i1 %122, label %35, label %123

123:                                              ; preds = %118
  %124 = bitcast i8* %10 to i16*
  %125 = icmp slt i32 %9, 5
  br i1 %125, label %126, label %131

126:                                              ; preds = %123
  %127 = and i32 %3, -3
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %133, label %129

129:                                              ; preds = %126
  %130 = icmp eq i32 %3, 1
  br i1 %130, label %133, label %131

131:                                              ; preds = %129, %123
  %132 = sext i32 %3 to i64
  br label %133

133:                                              ; preds = %126, %129, %131
  %134 = phi i64 [ %132, %131 ], [ 4, %126 ], [ 5, %129 ]
  %135 = and i32 %5, 1023
  %136 = icmp sgt i64 %34, 1
  %137 = select i1 %136, i64 %34, i64 1
  %138 = icmp sgt i64 %34, 1
  %139 = select i1 %138, i64 %34, i64 1
  %140 = add nsw i64 %139, -1
  %141 = shl i64 %11, 1
  %142 = icmp sgt i64 %34, 1
  %143 = select i1 %142, i64 %34, i64 1
  %144 = shl nuw nsw i64 %143, 1
  %145 = add nuw nsw i64 %143, 896
  %146 = getelementptr [33792 x i16], [33792 x i16]* %13, i64 0, i64 %145
  %147 = icmp ult i64 %137, 8
  %148 = trunc i64 %140 to i32
  %149 = icmp ugt i64 %140, 4294967295
  %150 = trunc i64 %140 to i32
  %151 = icmp ugt i64 %140, 4294967295
  %152 = trunc i64 %140 to i32
  %153 = icmp ugt i64 %140, 4294967295
  %154 = trunc i64 %140 to i32
  %155 = icmp ugt i64 %140, 4294967295
  %156 = trunc i64 %140 to i32
  %157 = icmp ugt i64 %140, 4294967295
  %158 = trunc i64 %140 to i32
  %159 = icmp ugt i64 %140, 4294967295
  %160 = trunc i64 %140 to i32
  %161 = icmp ugt i64 %140, 4294967295
  %162 = and i64 %137, 9223372036854775800
  %163 = icmp eq i64 %137, %162
  br label %164

164:                                              ; preds = %410, %133
  %165 = phi i64 [ %415, %410 ], [ 0, %133 ]
  %166 = phi i16* [ %411, %410 ], [ %124, %133 ]
  %167 = phi i32 [ %413, %410 ], [ 0, %133 ]
  %168 = phi i32 [ %412, %410 ], [ %135, %133 ]
  %169 = mul i64 %141, %165
  %170 = getelementptr i8, i8* %10, i64 %169
  %171 = add i64 %144, %169
  %172 = getelementptr i8, i8* %10, i64 %171
  %173 = lshr i32 %168, 6
  %174 = and i32 %173, 15
  %175 = zext i32 %174 to i64
  %176 = ashr i32 %168, 10
  %177 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %134, i64 %175, i64 0
  %178 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %134, i64 %175, i64 1
  %179 = load i8, i8* %178, align 1
  %180 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %134, i64 %175, i64 2
  %181 = load i8, i8* %180, align 2
  %182 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %134, i64 %175, i64 3
  %183 = load i8, i8* %182, align 1
  %184 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %134, i64 %175, i64 4
  %185 = load i8, i8* %184, align 4
  %186 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %134, i64 %175, i64 5
  %187 = load i8, i8* %186, align 1
  %188 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %134, i64 %175, i64 6
  %189 = load i8, i8* %188, align 2
  %190 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %134, i64 %175, i64 7
  %191 = load i8, i8* %190, align 1
  %192 = load i8, i8* %177, align 8
  %193 = sext i8 %192 to i32
  %194 = shl nsw i32 %176, 7
  %195 = sext i32 %194 to i64
  %196 = sext i8 %179 to i32
  %197 = shl nsw i32 %176, 7
  %198 = add nsw i32 %197, 128
  %199 = sext i8 %181 to i32
  %200 = shl nsw i32 %176, 7
  %201 = add nsw i32 %200, 256
  %202 = sext i8 %183 to i32
  %203 = shl nsw i32 %176, 7
  %204 = add nsw i32 %203, 384
  %205 = sext i8 %185 to i32
  %206 = shl nsw i32 %176, 7
  %207 = add nsw i32 %206, 512
  %208 = sext i8 %187 to i32
  %209 = shl nsw i32 %176, 7
  %210 = add nsw i32 %209, 640
  %211 = sext i8 %189 to i32
  %212 = shl nsw i32 %176, 7
  %213 = add nsw i32 %212, 768
  %214 = sext i8 %191 to i32
  %215 = shl nsw i32 %176, 7
  %216 = add nsw i32 %215, 896
  br i1 %147, label %344, label %217

217:                                              ; preds = %164
  %218 = add i32 %198, %148
  %219 = icmp slt i32 %218, %198
  %220 = or i1 %219, %149
  %221 = add i32 %201, %150
  %222 = icmp slt i32 %221, %201
  %223 = or i1 %222, %151
  %224 = or i1 %220, %223
  %225 = add i32 %204, %152
  %226 = icmp slt i32 %225, %204
  %227 = or i1 %226, %153
  %228 = or i1 %224, %227
  %229 = add i32 %207, %154
  %230 = icmp slt i32 %229, %207
  %231 = or i1 %230, %155
  %232 = or i1 %228, %231
  %233 = add i32 %210, %156
  %234 = icmp slt i32 %233, %210
  %235 = or i1 %234, %157
  %236 = or i1 %232, %235
  %237 = add i32 %213, %158
  %238 = icmp slt i32 %237, %213
  %239 = or i1 %238, %159
  %240 = or i1 %236, %239
  %241 = add i32 %216, %160
  %242 = icmp slt i32 %241, %216
  %243 = or i1 %242, %161
  %244 = or i1 %240, %243
  br i1 %244, label %344, label %245

245:                                              ; preds = %217
  %246 = getelementptr [33792 x i16], [33792 x i16]* %13, i64 0, i64 %195
  %247 = bitcast i16* %246 to i8*
  %248 = getelementptr i16, i16* %146, i64 %195
  %249 = bitcast i16* %248 to i8*
  %250 = icmp ult i8* %170, %249
  %251 = icmp ugt i8* %172, %247
  %252 = and i1 %250, %251
  br i1 %252, label %344, label %253

253:                                              ; preds = %245
  %254 = insertelement <8 x i32> undef, i32 %193, i32 0
  %255 = shufflevector <8 x i32> %254, <8 x i32> undef, <8 x i32> zeroinitializer
  %256 = insertelement <8 x i32> undef, i32 %196, i32 0
  %257 = shufflevector <8 x i32> %256, <8 x i32> undef, <8 x i32> zeroinitializer
  %258 = insertelement <8 x i32> undef, i32 %199, i32 0
  %259 = shufflevector <8 x i32> %258, <8 x i32> undef, <8 x i32> zeroinitializer
  %260 = insertelement <8 x i32> undef, i32 %202, i32 0
  %261 = shufflevector <8 x i32> %260, <8 x i32> undef, <8 x i32> zeroinitializer
  %262 = insertelement <8 x i32> undef, i32 %205, i32 0
  %263 = shufflevector <8 x i32> %262, <8 x i32> undef, <8 x i32> zeroinitializer
  %264 = insertelement <8 x i32> undef, i32 %208, i32 0
  %265 = shufflevector <8 x i32> %264, <8 x i32> undef, <8 x i32> zeroinitializer
  %266 = insertelement <8 x i32> undef, i32 %211, i32 0
  %267 = shufflevector <8 x i32> %266, <8 x i32> undef, <8 x i32> zeroinitializer
  %268 = insertelement <8 x i32> undef, i32 %214, i32 0
  %269 = shufflevector <8 x i32> %268, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %270

270:                                              ; preds = %270, %253
  %271 = phi i64 [ 0, %253 ], [ %341, %270 ]
  %272 = add nsw i64 %271, %195
  %273 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %272
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 16, !alias.scope !205
  %276 = sext <8 x i16> %275 to <8 x i32>
  %277 = mul nsw <8 x i32> %255, %276
  %278 = trunc i64 %271 to i32
  %279 = add nsw i32 %198, %278
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %280
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 16, !alias.scope !205
  %284 = sext <8 x i16> %283 to <8 x i32>
  %285 = mul nsw <8 x i32> %257, %284
  %286 = add nsw <8 x i32> %285, %277
  %287 = add nsw i32 %201, %278
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %288
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 16, !alias.scope !205
  %292 = sext <8 x i16> %291 to <8 x i32>
  %293 = mul nsw <8 x i32> %259, %292
  %294 = add nsw <8 x i32> %293, %286
  %295 = add nsw i32 %204, %278
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %296
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 16, !alias.scope !205
  %300 = sext <8 x i16> %299 to <8 x i32>
  %301 = mul nsw <8 x i32> %261, %300
  %302 = add nsw <8 x i32> %301, %294
  %303 = add nsw i32 %207, %278
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %304
  %306 = bitcast i16* %305 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 16, !alias.scope !205
  %308 = sext <8 x i16> %307 to <8 x i32>
  %309 = mul nsw <8 x i32> %263, %308
  %310 = add nsw <8 x i32> %309, %302
  %311 = add nsw i32 %210, %278
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %312
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 16, !alias.scope !205
  %316 = sext <8 x i16> %315 to <8 x i32>
  %317 = mul nsw <8 x i32> %265, %316
  %318 = add nsw <8 x i32> %317, %310
  %319 = add nsw i32 %213, %278
  %320 = sext i32 %319 to i64
  %321 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %320
  %322 = bitcast i16* %321 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 16, !alias.scope !205
  %324 = sext <8 x i16> %323 to <8 x i32>
  %325 = mul nsw <8 x i32> %267, %324
  %326 = add nsw <8 x i32> %325, %318
  %327 = add nsw i32 %216, %278
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %328
  %330 = bitcast i16* %329 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 16, !alias.scope !205
  %332 = sext <8 x i16> %331 to <8 x i32>
  %333 = mul nsw <8 x i32> %269, %332
  %334 = add nsw <8 x i32> %333, %326
  %335 = add nsw <8 x i32> %334, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %336 = lshr <8 x i32> %335, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %337 = trunc <8 x i32> %336 to <8 x i16>
  %338 = add <8 x i16> %337, <i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576>
  %339 = getelementptr inbounds i16, i16* %166, i64 %271
  %340 = bitcast i16* %339 to <8 x i16>*
  store <8 x i16> %338, <8 x i16>* %340, align 2, !alias.scope !208, !noalias !205
  %341 = add i64 %271, 8
  %342 = icmp eq i64 %341, %162
  br i1 %342, label %343, label %270, !llvm.loop !210

343:                                              ; preds = %270
  br i1 %163, label %410, label %344

344:                                              ; preds = %343, %245, %217, %164
  %345 = phi i64 [ 0, %245 ], [ 0, %217 ], [ 0, %164 ], [ %162, %343 ]
  br label %346

346:                                              ; preds = %344, %346
  %347 = phi i64 [ %408, %346 ], [ %345, %344 ]
  %348 = add nsw i64 %347, %195
  %349 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %348
  %350 = load i16, i16* %349, align 2
  %351 = sext i16 %350 to i32
  %352 = mul nsw i32 %351, %193
  %353 = trunc i64 %347 to i32
  %354 = add nsw i32 %198, %353
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %355
  %357 = load i16, i16* %356, align 2
  %358 = sext i16 %357 to i32
  %359 = mul nsw i32 %358, %196
  %360 = add nsw i32 %359, %352
  %361 = add nsw i32 %201, %353
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %362
  %364 = load i16, i16* %363, align 2
  %365 = sext i16 %364 to i32
  %366 = mul nsw i32 %365, %199
  %367 = add nsw i32 %366, %360
  %368 = add nsw i32 %204, %353
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %369
  %371 = load i16, i16* %370, align 2
  %372 = sext i16 %371 to i32
  %373 = mul nsw i32 %372, %202
  %374 = add nsw i32 %373, %367
  %375 = add nsw i32 %207, %353
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %376
  %378 = load i16, i16* %377, align 2
  %379 = sext i16 %378 to i32
  %380 = mul nsw i32 %379, %205
  %381 = add nsw i32 %380, %374
  %382 = add nsw i32 %210, %353
  %383 = sext i32 %382 to i64
  %384 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %383
  %385 = load i16, i16* %384, align 2
  %386 = sext i16 %385 to i32
  %387 = mul nsw i32 %386, %208
  %388 = add nsw i32 %387, %381
  %389 = add nsw i32 %213, %353
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %390
  %392 = load i16, i16* %391, align 2
  %393 = sext i16 %392 to i32
  %394 = mul nsw i32 %393, %211
  %395 = add nsw i32 %394, %388
  %396 = add nsw i32 %216, %353
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %397
  %399 = load i16, i16* %398, align 2
  %400 = sext i16 %399 to i32
  %401 = mul nsw i32 %400, %214
  %402 = add nsw i32 %401, %395
  %403 = add nsw i32 %402, 32
  %404 = lshr i32 %403, 6
  %405 = trunc i32 %404 to i16
  %406 = add i16 %405, 24576
  %407 = getelementptr inbounds i16, i16* %166, i64 %347
  store i16 %406, i16* %407, align 2
  %408 = add nuw nsw i64 %347, 1
  %409 = icmp slt i64 %408, %34
  br i1 %409, label %346, label %410, !llvm.loop !211

410:                                              ; preds = %346, %343
  %411 = getelementptr inbounds i16, i16* %166, i64 %11
  %412 = add nsw i32 %168, %7
  %413 = add nuw nsw i32 %167, 1
  %414 = icmp slt i32 %413, %9
  %415 = add i64 %165, 1
  br i1 %414, label %164, label %416

416:                                              ; preds = %410
  call void @llvm.lifetime.end.p0i8(i64 67584, i8* nonnull %18) #4
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = !{!16}
!16 = distinct !{!16, !12}
!17 = !{!18}
!18 = distinct !{!18, !12}
!19 = !{!20}
!20 = distinct !{!20, !12}
!21 = !{!22}
!22 = distinct !{!22, !12}
!23 = !{!24}
!24 = distinct !{!24, !12}
!25 = !{!26}
!26 = distinct !{!26, !12}
!27 = !{!28}
!28 = distinct !{!28, !12}
!29 = !{!26, !24, !22, !20, !18, !16, !14, !11}
!30 = distinct !{!30, !8}
!31 = distinct !{!31, !8}
!32 = distinct !{!32, !8}
!33 = distinct !{!33, !34, !8}
!34 = !{!"llvm.loop.unroll.runtime.disable"}
!35 = !{!36}
!36 = distinct !{!36, !37}
!37 = distinct !{!37, !"LVerDomain"}
!38 = !{!39}
!39 = distinct !{!39, !37}
!40 = distinct !{!40, !8}
!41 = distinct !{!41, !8}
!42 = !{!43}
!43 = distinct !{!43, !44}
!44 = distinct !{!44, !"LVerDomain"}
!45 = !{!46}
!46 = distinct !{!46, !44}
!47 = distinct !{!47, !8}
!48 = distinct !{!48, !8}
!49 = !{!50}
!50 = distinct !{!50, !51}
!51 = distinct !{!51, !"LVerDomain"}
!52 = !{!53}
!53 = distinct !{!53, !51}
!54 = !{!55}
!55 = distinct !{!55, !51}
!56 = !{!57}
!57 = distinct !{!57, !51}
!58 = !{!59}
!59 = distinct !{!59, !51}
!60 = !{!61}
!61 = distinct !{!61, !51}
!62 = !{!63}
!63 = distinct !{!63, !51}
!64 = !{!65}
!65 = distinct !{!65, !51}
!66 = !{!67}
!67 = distinct !{!67, !51}
!68 = !{!65, !63, !61, !59, !57, !55, !53, !50}
!69 = distinct !{!69, !8}
!70 = distinct !{!70, !8}
!71 = distinct !{!71, !8}
!72 = distinct !{!72, !34, !8}
!73 = !{!74}
!74 = distinct !{!74, !75}
!75 = distinct !{!75, !"LVerDomain"}
!76 = !{!77}
!77 = distinct !{!77, !75}
!78 = distinct !{!78, !8}
!79 = distinct !{!79, !8}
!80 = !{!81}
!81 = distinct !{!81, !82}
!82 = distinct !{!82, !"LVerDomain"}
!83 = !{!84}
!84 = distinct !{!84, !82}
!85 = !{!86}
!86 = distinct !{!86, !82}
!87 = !{!84, !81}
!88 = distinct !{!88, !8}
!89 = distinct !{!89, !8}
!90 = distinct !{!90, !8}
!91 = distinct !{!91, !34, !8}
!92 = distinct !{!92, !8}
!93 = distinct !{!93, !34, !8}
!94 = !{!95}
!95 = distinct !{!95, !96}
!96 = distinct !{!96, !"LVerDomain"}
!97 = !{!98}
!98 = distinct !{!98, !96}
!99 = distinct !{!99, !8}
!100 = distinct !{!100, !8}
!101 = !{!102}
!102 = distinct !{!102, !103}
!103 = distinct !{!103, !"LVerDomain"}
!104 = !{!105}
!105 = distinct !{!105, !103}
!106 = distinct !{!106, !8}
!107 = distinct !{!107, !8}
!108 = !{!109}
!109 = distinct !{!109, !110}
!110 = distinct !{!110, !"LVerDomain"}
!111 = !{!112}
!112 = distinct !{!112, !110}
!113 = distinct !{!113, !8}
!114 = distinct !{!114, !8}
!115 = !{!116}
!116 = distinct !{!116, !117}
!117 = distinct !{!117, !"LVerDomain"}
!118 = !{!119}
!119 = distinct !{!119, !117}
!120 = !{!121}
!121 = distinct !{!121, !117}
!122 = !{!123}
!123 = distinct !{!123, !117}
!124 = !{!125}
!125 = distinct !{!125, !117}
!126 = !{!127}
!127 = distinct !{!127, !117}
!128 = !{!129}
!129 = distinct !{!129, !117}
!130 = !{!131}
!131 = distinct !{!131, !117}
!132 = !{!133}
!133 = distinct !{!133, !117}
!134 = !{!131, !129, !127, !125, !123, !121, !119, !116}
!135 = distinct !{!135, !8}
!136 = distinct !{!136, !8}
!137 = distinct !{!137, !8}
!138 = distinct !{!138, !34, !8}
!139 = !{!140}
!140 = distinct !{!140, !141}
!141 = distinct !{!141, !"LVerDomain"}
!142 = !{!143}
!143 = distinct !{!143, !141}
!144 = distinct !{!144, !8}
!145 = distinct !{!145, !8}
!146 = !{!147}
!147 = distinct !{!147, !148}
!148 = distinct !{!148, !"LVerDomain"}
!149 = !{!150}
!150 = distinct !{!150, !148}
!151 = distinct !{!151, !8}
!152 = distinct !{!152, !8}
!153 = !{!154}
!154 = distinct !{!154, !155}
!155 = distinct !{!155, !"LVerDomain"}
!156 = !{!157}
!157 = distinct !{!157, !155}
!158 = !{!159}
!159 = distinct !{!159, !155}
!160 = !{!161}
!161 = distinct !{!161, !155}
!162 = !{!163}
!163 = distinct !{!163, !155}
!164 = !{!165}
!165 = distinct !{!165, !155}
!166 = !{!167}
!167 = distinct !{!167, !155}
!168 = !{!169}
!169 = distinct !{!169, !155}
!170 = !{!171}
!171 = distinct !{!171, !155}
!172 = !{!169, !167, !165, !163, !161, !159, !157, !154}
!173 = distinct !{!173, !8}
!174 = distinct !{!174, !8}
!175 = distinct !{!175, !8}
!176 = distinct !{!176, !34, !8}
!177 = !{!178}
!178 = distinct !{!178, !179}
!179 = distinct !{!179, !"LVerDomain"}
!180 = !{!181}
!181 = distinct !{!181, !179}
!182 = distinct !{!182, !8}
!183 = distinct !{!183, !8}
!184 = !{!185}
!185 = distinct !{!185, !186}
!186 = distinct !{!186, !"LVerDomain"}
!187 = !{!188}
!188 = distinct !{!188, !186}
!189 = !{!190}
!190 = distinct !{!190, !186}
!191 = !{!188, !185}
!192 = distinct !{!192, !8}
!193 = distinct !{!193, !8}
!194 = distinct !{!194, !8}
!195 = distinct !{!195, !34, !8}
!196 = distinct !{!196, !8}
!197 = distinct !{!197, !34, !8}
!198 = !{!199}
!199 = distinct !{!199, !200}
!200 = distinct !{!200, !"LVerDomain"}
!201 = !{!202}
!202 = distinct !{!202, !200}
!203 = distinct !{!203, !8}
!204 = distinct !{!204, !8}
!205 = !{!206}
!206 = distinct !{!206, !207}
!207 = distinct !{!207, !"LVerDomain"}
!208 = !{!209}
!209 = distinct !{!209, !207}
!210 = distinct !{!210, !8}
!211 = distinct !{!211, !8}
