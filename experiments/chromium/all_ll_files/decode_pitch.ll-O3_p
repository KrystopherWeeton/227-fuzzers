; ModuleID = '../../third_party/opus/src/silk/decode_pitch.c'
source_filename = "../../third_party/opus/src/silk/decode_pitch.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@silk_CB_lags_stage2 = external local_unnamed_addr constant [4 x [11 x i8]], align 16
@.str = private unnamed_addr constant [51 x i8] c"assertion failed: nb_subfr == PE_MAX_NB_SUBFR >> 1\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"../../third_party/opus/src/silk/decode_pitch.c\00", align 1
@silk_CB_lags_stage2_10_ms = external local_unnamed_addr constant [2 x [3 x i8]], align 1
@silk_CB_lags_stage3 = external local_unnamed_addr constant [4 x [34 x i8]], align 16
@silk_CB_lags_stage3_10_ms = external local_unnamed_addr constant [2 x [12 x i8]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_decode_pitch(i16 signext, i8 signext, i32* nocapture, i32, i32) local_unnamed_addr #0 {
  %6 = icmp eq i32 %3, 8
  %7 = icmp eq i32 %4, 4
  br i1 %6, label %8, label %12

8:                                                ; preds = %5
  br i1 %7, label %16, label %9

9:                                                ; preds = %8
  %10 = icmp eq i32 %4, 2
  br i1 %10, label %16, label %11

11:                                               ; preds = %9
  tail call void @celt_fatal(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 54) #2
  unreachable

12:                                               ; preds = %5
  br i1 %7, label %16, label %13

13:                                               ; preds = %12
  %14 = icmp eq i32 %4, 2
  br i1 %14, label %16, label %15

15:                                               ; preds = %13
  tail call void @celt_fatal(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 63) #2
  unreachable

16:                                               ; preds = %8, %9, %12, %13
  %17 = phi i64 [ 11, %8 ], [ 3, %9 ], [ 34, %12 ], [ 12, %13 ]
  %18 = phi i8* [ getelementptr inbounds ([4 x [11 x i8]], [4 x [11 x i8]]* @silk_CB_lags_stage2, i64 0, i64 0, i64 0), %8 ], [ getelementptr inbounds ([2 x [3 x i8]], [2 x [3 x i8]]* @silk_CB_lags_stage2_10_ms, i64 0, i64 0, i64 0), %9 ], [ getelementptr inbounds ([4 x [34 x i8]], [4 x [34 x i8]]* @silk_CB_lags_stage3, i64 0, i64 0, i64 0), %12 ], [ getelementptr inbounds ([2 x [12 x i8]], [2 x [12 x i8]]* @silk_CB_lags_stage3_10_ms, i64 0, i64 0, i64 0), %13 ]
  %19 = shl i32 %3, 16
  %20 = ashr exact i32 %19, 16
  %21 = ashr exact i32 %19, 15
  %22 = mul nsw i32 %20, 18
  %23 = sext i16 %0 to i32
  %24 = add nsw i32 %21, %23
  %25 = icmp sgt i32 %21, %22
  %26 = sext i8 %1 to i64
  %27 = zext i32 %4 to i64
  %28 = and i64 %27, 1
  %29 = icmp eq i32 %4, 1
  br i1 %25, label %33, label %30

30:                                               ; preds = %16
  br i1 %29, label %109, label %31

31:                                               ; preds = %30
  %32 = sub nsw i64 %27, %28
  br label %65

33:                                               ; preds = %16
  br i1 %29, label %94, label %34

34:                                               ; preds = %33
  %35 = sub nsw i64 %27, %28
  br label %36

36:                                               ; preds = %36, %34
  %37 = phi i64 [ 0, %34 ], [ %62, %36 ]
  %38 = phi i64 [ %35, %34 ], [ %63, %36 ]
  %39 = mul nuw nsw i64 %37, %17
  %40 = add nsw i64 %39, %26
  %41 = getelementptr inbounds i8, i8* %18, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = sext i8 %42 to i32
  %44 = add nsw i32 %24, %43
  %45 = getelementptr inbounds i32, i32* %2, i64 %37
  %46 = icmp sgt i32 %44, %21
  %47 = icmp slt i32 %44, %22
  %48 = select i1 %47, i32 %22, i32 %44
  %49 = select i1 %46, i32 %21, i32 %48
  store i32 %49, i32* %45, align 4
  %50 = or i64 %37, 1
  %51 = mul nuw nsw i64 %50, %17
  %52 = add nsw i64 %51, %26
  %53 = getelementptr inbounds i8, i8* %18, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = add nsw i32 %24, %55
  %57 = getelementptr inbounds i32, i32* %2, i64 %50
  %58 = icmp sgt i32 %56, %21
  %59 = icmp slt i32 %56, %22
  %60 = select i1 %59, i32 %22, i32 %56
  %61 = select i1 %58, i32 %21, i32 %60
  store i32 %61, i32* %57, align 4
  %62 = add nuw nsw i64 %37, 2
  %63 = add i64 %38, -2
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %94, label %36, !llvm.loop !2

65:                                               ; preds = %65, %31
  %66 = phi i64 [ 0, %31 ], [ %91, %65 ]
  %67 = phi i64 [ %32, %31 ], [ %92, %65 ]
  %68 = mul nuw nsw i64 %66, %17
  %69 = add nsw i64 %68, %26
  %70 = getelementptr inbounds i8, i8* %18, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = sext i8 %71 to i32
  %73 = add nsw i32 %24, %72
  %74 = getelementptr inbounds i32, i32* %2, i64 %66
  %75 = icmp sgt i32 %73, %22
  %76 = icmp slt i32 %73, %21
  %77 = select i1 %76, i32 %21, i32 %73
  %78 = select i1 %75, i32 %22, i32 %77
  store i32 %78, i32* %74, align 4
  %79 = or i64 %66, 1
  %80 = mul nuw nsw i64 %79, %17
  %81 = add nsw i64 %80, %26
  %82 = getelementptr inbounds i8, i8* %18, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = sext i8 %83 to i32
  %85 = add nsw i32 %24, %84
  %86 = getelementptr inbounds i32, i32* %2, i64 %79
  %87 = icmp sgt i32 %85, %22
  %88 = icmp slt i32 %85, %21
  %89 = select i1 %88, i32 %21, i32 %85
  %90 = select i1 %87, i32 %22, i32 %89
  store i32 %90, i32* %86, align 4
  %91 = add nuw nsw i64 %66, 2
  %92 = add i64 %67, -2
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %109, label %65, !llvm.loop !4

94:                                               ; preds = %36, %33
  %95 = phi i64 [ 0, %33 ], [ %62, %36 ]
  %96 = icmp eq i64 %28, 0
  br i1 %96, label %124, label %97

97:                                               ; preds = %94
  %98 = mul nuw nsw i64 %95, %17
  %99 = add nsw i64 %98, %26
  %100 = getelementptr inbounds i8, i8* %18, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = sext i8 %101 to i32
  %103 = add nsw i32 %24, %102
  %104 = getelementptr inbounds i32, i32* %2, i64 %95
  %105 = icmp sgt i32 %103, %21
  %106 = icmp slt i32 %103, %22
  %107 = select i1 %106, i32 %22, i32 %103
  %108 = select i1 %105, i32 %21, i32 %107
  store i32 %108, i32* %104, align 4
  br label %124

109:                                              ; preds = %65, %30
  %110 = phi i64 [ 0, %30 ], [ %91, %65 ]
  %111 = icmp eq i64 %28, 0
  br i1 %111, label %124, label %112

112:                                              ; preds = %109
  %113 = mul nuw nsw i64 %110, %17
  %114 = add nsw i64 %113, %26
  %115 = getelementptr inbounds i8, i8* %18, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = sext i8 %116 to i32
  %118 = add nsw i32 %24, %117
  %119 = getelementptr inbounds i32, i32* %2, i64 %110
  %120 = icmp sgt i32 %118, %22
  %121 = icmp slt i32 %118, %21
  %122 = select i1 %121, i32 %21, i32 %118
  %123 = select i1 %120, i32 %22, i32 %122
  store i32 %123, i32* %119, align 4
  br label %124

124:                                              ; preds = %112, %109, %97, %94
  ret void
}

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
