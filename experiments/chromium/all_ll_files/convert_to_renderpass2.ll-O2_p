; ModuleID = '../../third_party/vulkan-deps/vulkan-validation-layers/src/layers/convert_to_renderpass2.cpp'
source_filename = "../../third_party/vulkan-deps/vulkan-validation-layers/src/layers/convert_to_renderpass2.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VkRenderPassCreateInfo = type { i32, i8*, i32, i32, %struct.VkAttachmentDescription*, i32, %struct.VkSubpassDescription*, i32, %struct.VkSubpassDependency* }
%struct.VkAttachmentDescription = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription = type { i32, i32, i32, %struct.VkAttachmentReference*, i32, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, i32, i32* }
%struct.VkAttachmentReference = type { i32, i32 }
%struct.VkSubpassDependency = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.safe_VkRenderPassCreateInfo2 = type { i32, i8*, i32, i32, %struct.safe_VkAttachmentDescription2*, i32, %struct.safe_VkSubpassDescription2*, i32, %struct.safe_VkSubpassDependency2*, i32, i32* }
%struct.safe_VkAttachmentDescription2 = type <{ i32, [4 x i8], i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%struct.safe_VkSubpassDescription2 = type { i32, i8*, i32, i32, i32, i32, %struct.safe_VkAttachmentReference2*, i32, %struct.safe_VkAttachmentReference2*, %struct.safe_VkAttachmentReference2*, %struct.safe_VkAttachmentReference2*, i32, i32* }
%struct.safe_VkAttachmentReference2 = type <{ i32, [4 x i8], i8*, i32, i32, i32, [4 x i8] }>
%struct.safe_VkSubpassDependency2 = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkBaseOutStructure = type { i32, %struct.VkBaseOutStructure* }
%struct.VkRenderPassMultiviewCreateInfo = type { i32, i8*, i32, i32*, i32, i32*, i32, i32* }
%struct.VkRenderPassInputAttachmentAspectCreateInfo = type { i32, i8*, i32, %struct.VkInputAttachmentAspectReference* }
%struct.VkInputAttachmentAspectReference = type { i32, i32, i32 }
%struct.VkRenderPassFragmentDensityMapCreateInfoEXT = type { i32, i8*, %struct.VkAttachmentReference }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z36ConvertVkRenderPassCreateInfoToV2KHRRK22VkRenderPassCreateInfoP28safe_VkRenderPassCreateInfo2(%struct.VkRenderPassCreateInfo* nocapture readonly dereferenceable(64), %struct.safe_VkRenderPassCreateInfo2*) local_unnamed_addr #0 {
  %3 = alloca %struct.safe_VkAttachmentReference2, align 8
  %4 = alloca %struct.safe_VkAttachmentReference2, align 8
  %5 = alloca %struct.safe_VkAttachmentReference2, align 8
  %6 = alloca %struct.safe_VkAttachmentReference2, align 8
  %7 = alloca %struct.safe_VkAttachmentDescription2, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.safe_VkSubpassDescription2, align 8
  %10 = alloca %struct.safe_VkSubpassDependency2, align 8
  %11 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %0, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %53, label %14

14:                                               ; preds = %2
  %15 = bitcast i8* %12 to %struct.VkBaseOutStructure*
  br label %16

16:                                               ; preds = %23, %14
  %17 = phi %struct.VkBaseOutStructure* [ %25, %23 ], [ %15, %14 ]
  %18 = getelementptr inbounds %struct.VkBaseOutStructure, %struct.VkBaseOutStructure* %17, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 1000053000
  br i1 %20, label %21, label %23

21:                                               ; preds = %16
  %22 = bitcast %struct.VkBaseOutStructure* %17 to %struct.VkRenderPassMultiviewCreateInfo*
  br label %27

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.VkBaseOutStructure, %struct.VkBaseOutStructure* %17, i64 0, i32 1
  %25 = load %struct.VkBaseOutStructure*, %struct.VkBaseOutStructure** %24, align 8
  %26 = icmp eq %struct.VkBaseOutStructure* %25, null
  br i1 %26, label %27, label %16

27:                                               ; preds = %23, %21
  %28 = phi %struct.VkRenderPassMultiviewCreateInfo* [ %22, %21 ], [ null, %23 ]
  br label %29

29:                                               ; preds = %36, %27
  %30 = phi %struct.VkBaseOutStructure* [ %38, %36 ], [ %15, %27 ]
  %31 = getelementptr inbounds %struct.VkBaseOutStructure, %struct.VkBaseOutStructure* %30, i64 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 1000117001
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = bitcast %struct.VkBaseOutStructure* %30 to %struct.VkRenderPassInputAttachmentAspectCreateInfo*
  br label %40

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.VkBaseOutStructure, %struct.VkBaseOutStructure* %30, i64 0, i32 1
  %38 = load %struct.VkBaseOutStructure*, %struct.VkBaseOutStructure** %37, align 8
  %39 = icmp eq %struct.VkBaseOutStructure* %38, null
  br i1 %39, label %40, label %29

40:                                               ; preds = %36, %34
  %41 = phi %struct.VkRenderPassInputAttachmentAspectCreateInfo* [ %35, %34 ], [ null, %36 ]
  br label %42

42:                                               ; preds = %49, %40
  %43 = phi %struct.VkBaseOutStructure* [ %51, %49 ], [ %15, %40 ]
  %44 = getelementptr inbounds %struct.VkBaseOutStructure, %struct.VkBaseOutStructure* %43, i64 0, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %45, 1000218002
  br i1 %46, label %47, label %49

47:                                               ; preds = %42
  %48 = bitcast %struct.VkBaseOutStructure* %43 to %struct.VkRenderPassFragmentDensityMapCreateInfoEXT*
  br label %53

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.VkBaseOutStructure, %struct.VkBaseOutStructure* %43, i64 0, i32 1
  %51 = load %struct.VkBaseOutStructure*, %struct.VkBaseOutStructure** %50, align 8
  %52 = icmp eq %struct.VkBaseOutStructure* %51, null
  br i1 %52, label %53, label %42

53:                                               ; preds = %49, %2, %47
  %54 = phi %struct.VkRenderPassInputAttachmentAspectCreateInfo* [ %41, %47 ], [ null, %2 ], [ %41, %49 ]
  %55 = phi %struct.VkRenderPassMultiviewCreateInfo* [ %28, %47 ], [ null, %2 ], [ %28, %49 ]
  %56 = phi %struct.VkRenderPassFragmentDensityMapCreateInfoEXT* [ %48, %47 ], [ null, %2 ], [ null, %49 ]
  tail call void @_ZN28safe_VkRenderPassCreateInfo2D1Ev(%struct.safe_VkRenderPassCreateInfo2* %1) #8
  %57 = getelementptr inbounds %struct.safe_VkRenderPassCreateInfo2, %struct.safe_VkRenderPassCreateInfo2* %1, i64 0, i32 0
  store i32 1000109004, i32* %57, align 8
  %58 = icmp eq %struct.VkRenderPassFragmentDensityMapCreateInfoEXT* %56, null
  br i1 %58, label %65, label %59

59:                                               ; preds = %53
  %60 = bitcast %struct.VkRenderPassFragmentDensityMapCreateInfoEXT* %56 to i8*
  %61 = tail call i8* @_Z13SafePnextCopyPKv(i8* nonnull %60) #8
  %62 = getelementptr inbounds %struct.safe_VkRenderPassCreateInfo2, %struct.safe_VkRenderPassCreateInfo2* %1, i64 0, i32 1
  store i8* %61, i8** %62, align 8
  %63 = getelementptr inbounds i8, i8* %61, i64 8
  %64 = bitcast i8* %63 to %struct.VkBaseOutStructure**
  store %struct.VkBaseOutStructure* null, %struct.VkBaseOutStructure** %64, align 8
  br label %67

65:                                               ; preds = %53
  %66 = getelementptr inbounds %struct.safe_VkRenderPassCreateInfo2, %struct.safe_VkRenderPassCreateInfo2* %1, i64 0, i32 1
  store i8* null, i8** %66, align 8
  br label %67

67:                                               ; preds = %65, %59
  %68 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %0, i64 0, i32 2
  %69 = load i32, i32* %68, align 8
  %70 = getelementptr inbounds %struct.safe_VkRenderPassCreateInfo2, %struct.safe_VkRenderPassCreateInfo2* %1, i64 0, i32 2
  store i32 %69, i32* %70, align 8
  %71 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %0, i64 0, i32 3
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.safe_VkRenderPassCreateInfo2, %struct.safe_VkRenderPassCreateInfo2* %1, i64 0, i32 3
  store i32 %72, i32* %73, align 4
  %74 = getelementptr inbounds %struct.safe_VkRenderPassCreateInfo2, %struct.safe_VkRenderPassCreateInfo2* %1, i64 0, i32 4
  store %struct.safe_VkAttachmentDescription2* null, %struct.safe_VkAttachmentDescription2** %74, align 8
  %75 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %0, i64 0, i32 5
  %76 = load i32, i32* %75, align 8
  %77 = getelementptr inbounds %struct.safe_VkRenderPassCreateInfo2, %struct.safe_VkRenderPassCreateInfo2* %1, i64 0, i32 5
  store i32 %76, i32* %77, align 8
  %78 = getelementptr inbounds %struct.safe_VkRenderPassCreateInfo2, %struct.safe_VkRenderPassCreateInfo2* %1, i64 0, i32 6
  store %struct.safe_VkSubpassDescription2* null, %struct.safe_VkSubpassDescription2** %78, align 8
  %79 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %0, i64 0, i32 7
  %80 = load i32, i32* %79, align 8
  %81 = getelementptr inbounds %struct.safe_VkRenderPassCreateInfo2, %struct.safe_VkRenderPassCreateInfo2* %1, i64 0, i32 7
  store i32 %80, i32* %81, align 8
  %82 = getelementptr inbounds %struct.safe_VkRenderPassCreateInfo2, %struct.safe_VkRenderPassCreateInfo2* %1, i64 0, i32 8
  store %struct.safe_VkSubpassDependency2* null, %struct.safe_VkSubpassDependency2** %82, align 8
  %83 = icmp ne %struct.VkRenderPassMultiviewCreateInfo* %55, null
  br i1 %83, label %84, label %87

84:                                               ; preds = %67
  %85 = getelementptr inbounds %struct.VkRenderPassMultiviewCreateInfo, %struct.VkRenderPassMultiviewCreateInfo* %55, i64 0, i32 6
  %86 = load i32, i32* %85, align 8
  br label %87

87:                                               ; preds = %67, %84
  %88 = phi i32 [ %86, %84 ], [ 0, %67 ]
  %89 = getelementptr inbounds %struct.safe_VkRenderPassCreateInfo2, %struct.safe_VkRenderPassCreateInfo2* %1, i64 0, i32 9
  store i32 %88, i32* %89, align 8
  %90 = getelementptr inbounds %struct.safe_VkRenderPassCreateInfo2, %struct.safe_VkRenderPassCreateInfo2* %1, i64 0, i32 10
  store i32* null, i32** %90, align 8
  %91 = icmp eq i32 %72, 0
  br i1 %91, label %140, label %92

92:                                               ; preds = %87
  %93 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %0, i64 0, i32 4
  %94 = load %struct.VkAttachmentDescription*, %struct.VkAttachmentDescription** %93, align 8
  %95 = icmp eq %struct.VkAttachmentDescription* %94, null
  br i1 %95, label %140, label %96

96:                                               ; preds = %92
  %97 = zext i32 %72 to i64
  %98 = mul nuw nsw i64 %97, 56
  %99 = add nuw nsw i64 %98, 8
  %100 = tail call i8* @_Znam(i64 %99) #9
  %101 = bitcast i8* %100 to i64*
  store i64 %97, i64* %101, align 16
  %102 = getelementptr inbounds i8, i8* %100, i64 8
  %103 = bitcast i8* %102 to %struct.safe_VkAttachmentDescription2*
  %104 = getelementptr inbounds %struct.safe_VkAttachmentDescription2, %struct.safe_VkAttachmentDescription2* %103, i64 %97
  br label %105

105:                                              ; preds = %105, %96
  %106 = phi %struct.safe_VkAttachmentDescription2* [ %103, %96 ], [ %107, %105 ]
  tail call void @_ZN29safe_VkAttachmentDescription2C1Ev(%struct.safe_VkAttachmentDescription2* %106) #8
  %107 = getelementptr inbounds %struct.safe_VkAttachmentDescription2, %struct.safe_VkAttachmentDescription2* %106, i64 1
  %108 = icmp eq %struct.safe_VkAttachmentDescription2* %107, %104
  br i1 %108, label %109, label %105

109:                                              ; preds = %105
  %110 = bitcast %struct.safe_VkAttachmentDescription2** %74 to i8**
  store i8* %102, i8** %110, align 8
  %111 = load i32, i32* %73, align 4
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %140, label %113

113:                                              ; preds = %109
  %114 = bitcast %struct.safe_VkAttachmentDescription2* %7 to i8*
  %115 = getelementptr inbounds %struct.safe_VkAttachmentDescription2, %struct.safe_VkAttachmentDescription2* %7, i64 0, i32 0
  %116 = getelementptr inbounds %struct.safe_VkAttachmentDescription2, %struct.safe_VkAttachmentDescription2* %7, i64 0, i32 2
  %117 = getelementptr inbounds %struct.safe_VkAttachmentDescription2, %struct.safe_VkAttachmentDescription2* %7, i64 0, i32 3
  %118 = getelementptr inbounds %struct.safe_VkAttachmentDescription2, %struct.safe_VkAttachmentDescription2* %7, i64 0, i32 7
  %119 = getelementptr inbounds %struct.safe_VkAttachmentDescription2, %struct.safe_VkAttachmentDescription2* %7, i64 0, i32 11
  %120 = bitcast i32* %117 to <4 x i32>*
  %121 = bitcast i32* %118 to <4 x i32>*
  br label %122

122:                                              ; preds = %113, %122
  %123 = phi i64 [ 0, %113 ], [ %136, %122 ]
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %114) #8
  %124 = load %struct.VkAttachmentDescription*, %struct.VkAttachmentDescription** %93, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %114, i8 -86, i64 56, i1 false) #8, !alias.scope !2
  call void @_ZN29safe_VkAttachmentDescription2C1Ev(%struct.safe_VkAttachmentDescription2* nonnull %7) #8
  store i32 1000109000, i32* %115, align 8, !alias.scope !2
  store i8* null, i8** %116, align 8, !alias.scope !2
  %125 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %124, i64 %123, i32 0
  %126 = bitcast i32* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 4, !noalias !2
  store <4 x i32> %127, <4 x i32>* %120, align 8, !alias.scope !2
  %128 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %124, i64 %123, i32 4
  %129 = bitcast i32* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4, !noalias !2
  store <4 x i32> %130, <4 x i32>* %121, align 8, !alias.scope !2
  %131 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %124, i64 %123, i32 8
  %132 = load i32, i32* %131, align 4, !noalias !2
  store i32 %132, i32* %119, align 8, !alias.scope !2
  %133 = load %struct.safe_VkAttachmentDescription2*, %struct.safe_VkAttachmentDescription2** %74, align 8
  %134 = getelementptr inbounds %struct.safe_VkAttachmentDescription2, %struct.safe_VkAttachmentDescription2* %133, i64 %123
  %135 = call dereferenceable(56) %struct.safe_VkAttachmentDescription2* @_ZN29safe_VkAttachmentDescription2aSERKS_(%struct.safe_VkAttachmentDescription2* %134, %struct.safe_VkAttachmentDescription2* nonnull dereferenceable(56) %7) #8
  call void @_ZN29safe_VkAttachmentDescription2D1Ev(%struct.safe_VkAttachmentDescription2* nonnull %7) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %114) #8
  %136 = add nuw nsw i64 %123, 1
  %137 = load i32, i32* %73, align 4
  %138 = zext i32 %137 to i64
  %139 = icmp ult i64 %136, %138
  br i1 %139, label %122, label %140

140:                                              ; preds = %122, %109, %92, %87
  %141 = load i32, i32* %77, align 8
  %142 = zext i32 %141 to i64
  %143 = icmp eq i32 %141, 0
  br i1 %143, label %162, label %144

144:                                              ; preds = %140
  %145 = mul nuw nsw i64 %142, 24
  %146 = call i8* @_Znwm(i64 %145) #9
  %147 = bitcast i8* %146 to %"class.std::__1::vector.0"*
  %148 = ptrtoint i8* %146 to i64
  %149 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %147, i64 %142
  %150 = add nsw i64 %142, -1
  %151 = getelementptr %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %147, i64 %150, i32 0, i32 0
  %152 = ptrtoint i32** %151 to i64
  %153 = sub i64 %152, %148
  %154 = urem i64 %153, 24
  %155 = add i64 %153, 24
  %156 = sub i64 %155, %154
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %146, i8 0, i64 %156, i1 false) #8
  %157 = ptrtoint %"class.std::__1::vector.0"* %149 to i64
  %158 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %0, i64 0, i32 6
  %159 = bitcast i8* %146 to %"class.std::__1::vector.0"*
  %160 = bitcast i32* %8 to i8*
  %161 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %158, align 8
  br label %166

162:                                              ; preds = %270, %140
  %163 = phi i64 [ 0, %140 ], [ %157, %270 ]
  %164 = phi i64 [ 0, %140 ], [ %148, %270 ]
  %165 = icmp eq %struct.VkRenderPassInputAttachmentAspectCreateInfo* %54, null
  br i1 %165, label %322, label %276

166:                                              ; preds = %144, %270
  %167 = phi %struct.VkSubpassDescription* [ %161, %144 ], [ %271, %270 ]
  %168 = phi i64 [ 0, %144 ], [ %272, %270 ]
  %169 = icmp eq %struct.VkSubpassDescription* %167, null
  br i1 %169, label %270, label %170

170:                                              ; preds = %166
  %171 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %159, i64 %168
  %172 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %167, i64 %168, i32 2
  %173 = load i32, i32* %172, align 8
  %174 = zext i32 %173 to i64
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %160) #8
  store i32 0, i32* %8, align 4
  %175 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %159, i64 %168, i32 0, i32 1
  %176 = bitcast i32** %175 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = bitcast %"class.std::__1::vector.0"* %171 to i64*
  %179 = load i64, i64* %178, align 8
  %180 = sub i64 %177, %179
  %181 = ashr exact i64 %180, 2
  %182 = icmp ult i64 %181, %174
  %183 = inttoptr i64 %179 to i32*
  br i1 %182, label %184, label %186

184:                                              ; preds = %170
  %185 = sub nsw i64 %174, %181
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.0"* %171, i64 %185, i32* nonnull dereferenceable(4) %8) #8
  br label %190

186:                                              ; preds = %170
  %187 = icmp ugt i64 %181, %174
  br i1 %187, label %188, label %190

188:                                              ; preds = %186
  %189 = getelementptr inbounds i32, i32* %183, i64 %174
  store i32* %189, i32** %175, align 8
  br label %190

190:                                              ; preds = %184, %186, %188
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %160) #8
  %191 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %158, align 8
  %192 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %191, i64 %168, i32 2
  %193 = load i32, i32* %192, align 8
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %270, label %195

195:                                              ; preds = %190
  %196 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %171, i64 0, i32 0, i32 0
  br label %197

197:                                              ; preds = %195, %263
  %198 = phi i64 [ 0, %195 ], [ %264, %263 ]
  %199 = phi %struct.VkSubpassDescription* [ %191, %195 ], [ %265, %263 ]
  %200 = load %struct.safe_VkAttachmentDescription2*, %struct.safe_VkAttachmentDescription2** %74, align 8
  %201 = icmp eq %struct.safe_VkAttachmentDescription2* %200, null
  br i1 %201, label %263, label %202

202:                                              ; preds = %197
  %203 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %199, i64 %168, i32 3
  %204 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %203, align 8
  %205 = icmp eq %struct.VkAttachmentReference* %204, null
  br i1 %205, label %263, label %206

206:                                              ; preds = %202
  %207 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %204, i64 %198, i32 0
  %208 = load i32, i32* %207, align 4
  %209 = icmp eq i32 %208, -1
  br i1 %209, label %263, label %210

210:                                              ; preds = %206
  %211 = zext i32 %208 to i64
  %212 = getelementptr inbounds %struct.safe_VkAttachmentDescription2, %struct.safe_VkAttachmentDescription2* %200, i64 %211, i32 4
  %213 = load i32, i32* %212, align 4
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %225, label %215

215:                                              ; preds = %210
  %216 = call zeroext i1 @FormatIsDepthOrStencil(i32 %213) #8
  br i1 %216, label %225, label %217

217:                                              ; preds = %215
  %218 = call i32 @FormatPlaneCount(i32 %213) #8
  %219 = icmp ult i32 %218, 2
  br i1 %219, label %220, label %225

220:                                              ; preds = %217
  %221 = load i32*, i32** %196, align 8
  %222 = getelementptr inbounds i32, i32* %221, i64 %198
  %223 = load i32, i32* %222, align 4
  %224 = or i32 %223, 1
  store i32 %224, i32* %222, align 4
  br label %225

225:                                              ; preds = %210, %215, %220, %217
  %226 = call zeroext i1 @FormatIsDepthOnly(i32 %213) #8
  br i1 %226, label %229, label %227

227:                                              ; preds = %225
  %228 = call zeroext i1 @FormatIsDepthAndStencil(i32 %213) #8
  br i1 %228, label %229, label %234

229:                                              ; preds = %225, %227
  %230 = load i32*, i32** %196, align 8
  %231 = getelementptr inbounds i32, i32* %230, i64 %198
  %232 = load i32, i32* %231, align 4
  %233 = or i32 %232, 2
  store i32 %233, i32* %231, align 4
  br label %234

234:                                              ; preds = %229, %227
  %235 = call zeroext i1 @FormatIsStencilOnly(i32 %213) #8
  br i1 %235, label %238, label %236

236:                                              ; preds = %234
  %237 = call zeroext i1 @FormatIsDepthAndStencil(i32 %213) #8
  br i1 %237, label %238, label %243

238:                                              ; preds = %234, %236
  %239 = load i32*, i32** %196, align 8
  %240 = getelementptr inbounds i32, i32* %239, i64 %198
  %241 = load i32, i32* %240, align 4
  %242 = or i32 %241, 4
  store i32 %242, i32* %240, align 4
  br label %243

243:                                              ; preds = %238, %236
  %244 = call i32 @FormatPlaneCount(i32 %213) #8
  %245 = icmp ugt i32 %244, 1
  br i1 %245, label %246, label %255

246:                                              ; preds = %243
  %247 = load i32*, i32** %196, align 8
  %248 = getelementptr inbounds i32, i32* %247, i64 %198
  %249 = load i32, i32* %248, align 4
  %250 = or i32 %249, 16
  store i32 %250, i32* %248, align 4
  %251 = load i32*, i32** %196, align 8
  %252 = getelementptr inbounds i32, i32* %251, i64 %198
  %253 = load i32, i32* %252, align 4
  %254 = or i32 %253, 32
  store i32 %254, i32* %252, align 4
  br label %255

255:                                              ; preds = %246, %243
  %256 = call i32 @FormatPlaneCount(i32 %213) #8
  %257 = icmp ugt i32 %256, 2
  br i1 %257, label %258, label %263

258:                                              ; preds = %255
  %259 = load i32*, i32** %196, align 8
  %260 = getelementptr inbounds i32, i32* %259, i64 %198
  %261 = load i32, i32* %260, align 4
  %262 = or i32 %261, 64
  store i32 %262, i32* %260, align 4
  br label %263

263:                                              ; preds = %206, %258, %255, %202, %197
  %264 = add nuw nsw i64 %198, 1
  %265 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %158, align 8
  %266 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %265, i64 %168, i32 2
  %267 = load i32, i32* %266, align 8
  %268 = zext i32 %267 to i64
  %269 = icmp ult i64 %264, %268
  br i1 %269, label %197, label %270

270:                                              ; preds = %263, %190, %166
  %271 = phi %struct.VkSubpassDescription* [ %191, %190 ], [ null, %166 ], [ %265, %263 ]
  %272 = add nuw nsw i64 %168, 1
  %273 = load i32, i32* %77, align 8
  %274 = zext i32 %273 to i64
  %275 = icmp ult i64 %272, %274
  br i1 %275, label %166, label %162

276:                                              ; preds = %162
  %277 = getelementptr inbounds %struct.VkRenderPassInputAttachmentAspectCreateInfo, %struct.VkRenderPassInputAttachmentAspectCreateInfo* %54, i64 0, i32 3
  %278 = load %struct.VkInputAttachmentAspectReference*, %struct.VkInputAttachmentAspectReference** %277, align 8
  %279 = icmp eq %struct.VkInputAttachmentAspectReference* %278, null
  br i1 %279, label %322, label %280

280:                                              ; preds = %276
  %281 = getelementptr inbounds %struct.VkRenderPassInputAttachmentAspectCreateInfo, %struct.VkRenderPassInputAttachmentAspectCreateInfo* %54, i64 0, i32 2
  %282 = load i32, i32* %281, align 8
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %322, label %284

284:                                              ; preds = %280
  %285 = sub i64 %163, %164
  %286 = sdiv exact i64 %285, 24
  %287 = inttoptr i64 %164 to %"class.std::__1::vector.0"*
  br label %288

288:                                              ; preds = %320, %284
  %289 = phi i32 [ %282, %284 ], [ %316, %320 ]
  %290 = phi %struct.VkInputAttachmentAspectReference* [ %278, %284 ], [ %321, %320 ]
  %291 = phi i64 [ 0, %284 ], [ %317, %320 ]
  %292 = getelementptr inbounds %struct.VkInputAttachmentAspectReference, %struct.VkInputAttachmentAspectReference* %290, i64 %291, i32 0
  %293 = load i32, i32* %292, align 4
  %294 = getelementptr inbounds %struct.VkInputAttachmentAspectReference, %struct.VkInputAttachmentAspectReference* %290, i64 %291, i32 2
  %295 = load i32, i32* %294, align 4
  %296 = zext i32 %293 to i64
  %297 = icmp ugt i64 %286, %296
  br i1 %297, label %298, label %315

298:                                              ; preds = %288
  %299 = getelementptr inbounds %struct.VkInputAttachmentAspectReference, %struct.VkInputAttachmentAspectReference* %290, i64 %291, i32 1
  %300 = load i32, i32* %299, align 4
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %287, i64 %296
  %303 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %287, i64 %296, i32 0, i32 1
  %304 = bitcast i32** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast %"class.std::__1::vector.0"* %302 to i64*
  %307 = load i64, i64* %306, align 8
  %308 = sub i64 %305, %307
  %309 = ashr exact i64 %308, 2
  %310 = icmp ugt i64 %309, %301
  br i1 %310, label %311, label %315

311:                                              ; preds = %298
  %312 = inttoptr i64 %307 to i32*
  %313 = getelementptr inbounds i32, i32* %312, i64 %301
  store i32 %295, i32* %313, align 4
  %314 = load i32, i32* %281, align 8
  br label %315

315:                                              ; preds = %311, %298, %288
  %316 = phi i32 [ %314, %311 ], [ %289, %298 ], [ %289, %288 ]
  %317 = add nuw nsw i64 %291, 1
  %318 = zext i32 %316 to i64
  %319 = icmp ult i64 %317, %318
  br i1 %319, label %320, label %322

320:                                              ; preds = %315
  %321 = load %struct.VkInputAttachmentAspectReference*, %struct.VkInputAttachmentAspectReference** %277, align 8
  br label %288

322:                                              ; preds = %315, %280, %276, %162
  br i1 %83, label %323, label %331

323:                                              ; preds = %322
  %324 = getelementptr inbounds %struct.VkRenderPassMultiviewCreateInfo, %struct.VkRenderPassMultiviewCreateInfo* %55, i64 0, i32 2
  %325 = load i32, i32* %324, align 8
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %331, label %327

327:                                              ; preds = %323
  %328 = getelementptr inbounds %struct.VkRenderPassMultiviewCreateInfo, %struct.VkRenderPassMultiviewCreateInfo* %55, i64 0, i32 3
  %329 = load i32*, i32** %328, align 8
  %330 = icmp ne i32* %329, null
  br label %331

331:                                              ; preds = %323, %327, %322
  %332 = phi i1 [ false, %323 ], [ false, %322 ], [ %330, %327 ]
  %333 = load i32, i32* %77, align 8
  %334 = icmp eq i32 %333, 0
  br i1 %334, label %696, label %335

335:                                              ; preds = %331
  %336 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %0, i64 0, i32 6
  %337 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %336, align 8
  %338 = icmp eq %struct.VkSubpassDescription* %337, null
  br i1 %338, label %696, label %339

339:                                              ; preds = %335
  %340 = zext i32 %333 to i64
  %341 = mul nuw nsw i64 %340, 88
  %342 = add nuw nsw i64 %341, 8
  %343 = call i8* @_Znam(i64 %342) #9
  %344 = bitcast i8* %343 to i64*
  store i64 %340, i64* %344, align 16
  %345 = getelementptr inbounds i8, i8* %343, i64 8
  %346 = bitcast i8* %345 to %struct.safe_VkSubpassDescription2*
  %347 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %346, i64 %340
  br label %348

348:                                              ; preds = %348, %339
  %349 = phi %struct.safe_VkSubpassDescription2* [ %346, %339 ], [ %350, %348 ]
  call void @_ZN26safe_VkSubpassDescription2C1Ev(%struct.safe_VkSubpassDescription2* %349) #8
  %350 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %349, i64 1
  %351 = icmp eq %struct.safe_VkSubpassDescription2* %350, %347
  br i1 %351, label %352, label %348

352:                                              ; preds = %348
  %353 = bitcast %struct.safe_VkSubpassDescription2** %78 to i8**
  store i8* %345, i8** %353, align 8
  %354 = load i32, i32* %77, align 8
  %355 = icmp eq i32 %354, 0
  br i1 %355, label %696, label %356

356:                                              ; preds = %352
  %357 = getelementptr inbounds %struct.VkRenderPassMultiviewCreateInfo, %struct.VkRenderPassMultiviewCreateInfo* %55, i64 0, i32 3
  %358 = bitcast %struct.safe_VkSubpassDescription2* %9 to i8*
  %359 = inttoptr i64 %164 to %"class.std::__1::vector.0"*
  %360 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %9, i64 0, i32 0
  %361 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %9, i64 0, i32 1
  %362 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %9, i64 0, i32 2
  %363 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %9, i64 0, i32 3
  %364 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %9, i64 0, i32 4
  %365 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %9, i64 0, i32 5
  %366 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %9, i64 0, i32 6
  %367 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %9, i64 0, i32 7
  %368 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %9, i64 0, i32 8
  %369 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %9, i64 0, i32 9
  %370 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %9, i64 0, i32 10
  %371 = bitcast %struct.safe_VkAttachmentReference2** %368 to i8*
  %372 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %9, i64 0, i32 11
  %373 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %9, i64 0, i32 12
  %374 = bitcast %struct.safe_VkAttachmentReference2** %366 to i8**
  %375 = bitcast %struct.safe_VkAttachmentReference2* %3 to i8*
  %376 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %3, i64 0, i32 0
  %377 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %3, i64 0, i32 2
  %378 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %3, i64 0, i32 3
  %379 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %3, i64 0, i32 4
  %380 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %3, i64 0, i32 5
  %381 = bitcast %struct.safe_VkAttachmentReference2** %368 to i8**
  %382 = bitcast %struct.safe_VkAttachmentReference2* %4 to i8*
  %383 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %4, i64 0, i32 0
  %384 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %4, i64 0, i32 2
  %385 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %4, i64 0, i32 3
  %386 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %4, i64 0, i32 4
  %387 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %4, i64 0, i32 5
  %388 = bitcast %struct.safe_VkAttachmentReference2** %369 to i8**
  %389 = bitcast %struct.safe_VkAttachmentReference2* %5 to i8*
  %390 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %5, i64 0, i32 0
  %391 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %5, i64 0, i32 2
  %392 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %5, i64 0, i32 3
  %393 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %5, i64 0, i32 4
  %394 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %5, i64 0, i32 5
  %395 = bitcast %struct.safe_VkAttachmentReference2** %370 to i8**
  %396 = bitcast %struct.safe_VkAttachmentReference2* %6 to i8*
  %397 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %6, i64 0, i32 0
  %398 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %6, i64 0, i32 2
  %399 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %6, i64 0, i32 3
  %400 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %6, i64 0, i32 4
  %401 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %6, i64 0, i32 5
  %402 = bitcast i32** %373 to i8**
  br label %403

403:                                              ; preds = %356, %688
  %404 = phi i64 [ 0, %356 ], [ %692, %688 ]
  br i1 %332, label %405, label %409

405:                                              ; preds = %403
  %406 = load i32*, i32** %357, align 8
  %407 = getelementptr inbounds i32, i32* %406, i64 %404
  %408 = load i32, i32* %407, align 4
  br label %409

409:                                              ; preds = %403, %405
  %410 = phi i32 [ %408, %405 ], [ 0, %403 ]
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %358) #8
  %411 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %336, align 8
  %412 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %359, i64 %404, i32 0, i32 0
  %413 = load i32*, i32** %412, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %358, i8 -86, i64 88, i1 false) #8, !alias.scope !5
  call void @_ZN26safe_VkSubpassDescription2C1Ev(%struct.safe_VkSubpassDescription2* nonnull %9) #8
  store i32 1000109002, i32* %360, align 8, !alias.scope !5
  store i8* null, i8** %361, align 8, !alias.scope !5
  %414 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %411, i64 %404, i32 0
  %415 = load i32, i32* %414, align 8, !noalias !5
  store i32 %415, i32* %362, align 8, !alias.scope !5
  %416 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %411, i64 %404, i32 1
  %417 = load i32, i32* %416, align 4, !noalias !5
  store i32 %417, i32* %363, align 4, !alias.scope !5
  store i32 %410, i32* %364, align 8, !alias.scope !5
  %418 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %411, i64 %404, i32 2
  %419 = load i32, i32* %418, align 8, !noalias !5
  store i32 %419, i32* %365, align 4, !alias.scope !5
  store %struct.safe_VkAttachmentReference2* null, %struct.safe_VkAttachmentReference2** %366, align 8, !alias.scope !5
  %420 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %411, i64 %404, i32 4
  %421 = load i32, i32* %420, align 8, !noalias !5
  store i32 %421, i32* %367, align 8, !alias.scope !5
  %422 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %411, i64 %404, i32 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %371, i8 0, i64 24, i1 false) #8, !alias.scope !5
  %423 = load i32, i32* %422, align 8, !noalias !5
  store i32 %423, i32* %372, align 8, !alias.scope !5
  store i32* null, i32** %373, align 8, !alias.scope !5
  %424 = icmp eq i32 %419, 0
  br i1 %424, label %461, label %425

425:                                              ; preds = %409
  %426 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %411, i64 %404, i32 3
  %427 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %426, align 8, !noalias !5
  %428 = icmp eq %struct.VkAttachmentReference* %427, null
  br i1 %428, label %461, label %429

429:                                              ; preds = %425
  %430 = zext i32 %419 to i64
  %431 = shl nuw nsw i64 %430, 5
  %432 = or i64 %431, 8
  %433 = call i8* @_Znam(i64 %432) #9
  %434 = bitcast i8* %433 to i64*
  store i64 %430, i64* %434, align 16, !noalias !5
  %435 = getelementptr inbounds i8, i8* %433, i64 8
  %436 = bitcast i8* %435 to %struct.safe_VkAttachmentReference2*
  %437 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %436, i64 %430
  br label %438

438:                                              ; preds = %438, %429
  %439 = phi %struct.safe_VkAttachmentReference2* [ %436, %429 ], [ %440, %438 ]
  call void @_ZN27safe_VkAttachmentReference2C1Ev(%struct.safe_VkAttachmentReference2* %439) #8
  %440 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %439, i64 1
  %441 = icmp eq %struct.safe_VkAttachmentReference2* %440, %437
  br i1 %441, label %442, label %438

442:                                              ; preds = %438
  store i8* %435, i8** %374, align 8, !alias.scope !5
  %443 = load i32, i32* %365, align 4, !alias.scope !5
  %444 = icmp eq i32 %443, 0
  br i1 %444, label %461, label %445

445:                                              ; preds = %442, %445
  %446 = phi i64 [ %457, %445 ], [ 0, %442 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %375) #8, !noalias !5
  %447 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %426, align 8, !noalias !5
  %448 = getelementptr inbounds i32, i32* %413, i64 %446
  %449 = load i32, i32* %448, align 4, !noalias !5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %375, i8 -86, i64 32, i1 false) #8, !alias.scope !8, !noalias !5
  call void @_ZN27safe_VkAttachmentReference2C1Ev(%struct.safe_VkAttachmentReference2* nonnull %3) #8
  store i32 1000109001, i32* %376, align 8, !alias.scope !8, !noalias !5
  store i8* null, i8** %377, align 8, !alias.scope !8, !noalias !5
  %450 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %447, i64 %446, i32 0
  %451 = load i32, i32* %450, align 4, !noalias !8
  store i32 %451, i32* %378, align 8, !alias.scope !8, !noalias !5
  %452 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %447, i64 %446, i32 1
  %453 = load i32, i32* %452, align 4, !noalias !8
  store i32 %453, i32* %379, align 4, !alias.scope !8, !noalias !5
  store i32 %449, i32* %380, align 8, !alias.scope !8, !noalias !5
  %454 = load %struct.safe_VkAttachmentReference2*, %struct.safe_VkAttachmentReference2** %366, align 8, !alias.scope !5
  %455 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %454, i64 %446
  %456 = call dereferenceable(32) %struct.safe_VkAttachmentReference2* @_ZN27safe_VkAttachmentReference2aSERKS_(%struct.safe_VkAttachmentReference2* %455, %struct.safe_VkAttachmentReference2* nonnull dereferenceable(32) %3) #8
  call void @_ZN27safe_VkAttachmentReference2D1Ev(%struct.safe_VkAttachmentReference2* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %375) #8, !noalias !5
  %457 = add nuw nsw i64 %446, 1
  %458 = load i32, i32* %365, align 4, !alias.scope !5
  %459 = zext i32 %458 to i64
  %460 = icmp ult i64 %457, %459
  br i1 %460, label %445, label %461

461:                                              ; preds = %445, %442, %425, %409
  %462 = load i32, i32* %367, align 8, !alias.scope !5
  %463 = icmp eq i32 %462, 0
  br i1 %463, label %535, label %464

464:                                              ; preds = %461
  %465 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %411, i64 %404, i32 5
  %466 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %465, align 8, !noalias !5
  %467 = icmp eq %struct.VkAttachmentReference* %466, null
  br i1 %467, label %500, label %468

468:                                              ; preds = %464
  %469 = zext i32 %462 to i64
  %470 = shl nuw nsw i64 %469, 5
  %471 = or i64 %470, 8
  %472 = call i8* @_Znam(i64 %471) #9
  %473 = bitcast i8* %472 to i64*
  store i64 %469, i64* %473, align 16, !noalias !5
  %474 = getelementptr inbounds i8, i8* %472, i64 8
  %475 = bitcast i8* %474 to %struct.safe_VkAttachmentReference2*
  %476 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %475, i64 %469
  br label %477

477:                                              ; preds = %477, %468
  %478 = phi %struct.safe_VkAttachmentReference2* [ %475, %468 ], [ %479, %477 ]
  call void @_ZN27safe_VkAttachmentReference2C1Ev(%struct.safe_VkAttachmentReference2* %478) #8
  %479 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %478, i64 1
  %480 = icmp eq %struct.safe_VkAttachmentReference2* %479, %476
  br i1 %480, label %481, label %477

481:                                              ; preds = %477
  store i8* %474, i8** %381, align 8, !alias.scope !5
  %482 = load i32, i32* %367, align 8, !alias.scope !5
  %483 = icmp eq i32 %482, 0
  br i1 %483, label %535, label %484

484:                                              ; preds = %481, %484
  %485 = phi i64 [ %494, %484 ], [ 0, %481 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %382) #8, !noalias !5
  %486 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %465, align 8, !noalias !5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %382, i8 -86, i64 32, i1 false) #8, !alias.scope !11, !noalias !5
  call void @_ZN27safe_VkAttachmentReference2C1Ev(%struct.safe_VkAttachmentReference2* nonnull %4) #8
  store i32 1000109001, i32* %383, align 8, !alias.scope !11, !noalias !5
  store i8* null, i8** %384, align 8, !alias.scope !11, !noalias !5
  %487 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %486, i64 %485, i32 0
  %488 = load i32, i32* %487, align 4, !noalias !11
  store i32 %488, i32* %385, align 8, !alias.scope !11, !noalias !5
  %489 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %486, i64 %485, i32 1
  %490 = load i32, i32* %489, align 4, !noalias !11
  store i32 %490, i32* %386, align 4, !alias.scope !11, !noalias !5
  store i32 0, i32* %387, align 8, !alias.scope !11, !noalias !5
  %491 = load %struct.safe_VkAttachmentReference2*, %struct.safe_VkAttachmentReference2** %368, align 8, !alias.scope !5
  %492 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %491, i64 %485
  %493 = call dereferenceable(32) %struct.safe_VkAttachmentReference2* @_ZN27safe_VkAttachmentReference2aSERKS_(%struct.safe_VkAttachmentReference2* %492, %struct.safe_VkAttachmentReference2* nonnull dereferenceable(32) %4) #8
  call void @_ZN27safe_VkAttachmentReference2D1Ev(%struct.safe_VkAttachmentReference2* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %382) #8, !noalias !5
  %494 = add nuw nsw i64 %485, 1
  %495 = load i32, i32* %367, align 8, !alias.scope !5
  %496 = zext i32 %495 to i64
  %497 = icmp ult i64 %494, %496
  br i1 %497, label %484, label %498

498:                                              ; preds = %484
  %499 = icmp eq i32 %495, 0
  br i1 %499, label %535, label %500

500:                                              ; preds = %498, %464
  %501 = phi i32 [ %495, %498 ], [ %462, %464 ]
  %502 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %411, i64 %404, i32 6
  %503 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %502, align 8, !noalias !5
  %504 = icmp eq %struct.VkAttachmentReference* %503, null
  br i1 %504, label %535, label %505

505:                                              ; preds = %500
  %506 = zext i32 %501 to i64
  %507 = shl nuw nsw i64 %506, 5
  %508 = or i64 %507, 8
  %509 = call i8* @_Znam(i64 %508) #9
  %510 = bitcast i8* %509 to i64*
  store i64 %506, i64* %510, align 16, !noalias !5
  %511 = getelementptr inbounds i8, i8* %509, i64 8
  %512 = bitcast i8* %511 to %struct.safe_VkAttachmentReference2*
  %513 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %512, i64 %506
  br label %514

514:                                              ; preds = %514, %505
  %515 = phi %struct.safe_VkAttachmentReference2* [ %512, %505 ], [ %516, %514 ]
  call void @_ZN27safe_VkAttachmentReference2C1Ev(%struct.safe_VkAttachmentReference2* %515) #8
  %516 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %515, i64 1
  %517 = icmp eq %struct.safe_VkAttachmentReference2* %516, %513
  br i1 %517, label %518, label %514

518:                                              ; preds = %514
  store i8* %511, i8** %388, align 8, !alias.scope !5
  %519 = load i32, i32* %367, align 8, !alias.scope !5
  %520 = icmp eq i32 %519, 0
  br i1 %520, label %535, label %521

521:                                              ; preds = %518, %521
  %522 = phi i64 [ %531, %521 ], [ 0, %518 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %389) #8, !noalias !5
  %523 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %502, align 8, !noalias !5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %389, i8 -86, i64 32, i1 false) #8, !alias.scope !14, !noalias !5
  call void @_ZN27safe_VkAttachmentReference2C1Ev(%struct.safe_VkAttachmentReference2* nonnull %5) #8
  store i32 1000109001, i32* %390, align 8, !alias.scope !14, !noalias !5
  store i8* null, i8** %391, align 8, !alias.scope !14, !noalias !5
  %524 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %523, i64 %522, i32 0
  %525 = load i32, i32* %524, align 4, !noalias !14
  store i32 %525, i32* %392, align 8, !alias.scope !14, !noalias !5
  %526 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %523, i64 %522, i32 1
  %527 = load i32, i32* %526, align 4, !noalias !14
  store i32 %527, i32* %393, align 4, !alias.scope !14, !noalias !5
  store i32 0, i32* %394, align 8, !alias.scope !14, !noalias !5
  %528 = load %struct.safe_VkAttachmentReference2*, %struct.safe_VkAttachmentReference2** %369, align 8, !alias.scope !5
  %529 = getelementptr inbounds %struct.safe_VkAttachmentReference2, %struct.safe_VkAttachmentReference2* %528, i64 %522
  %530 = call dereferenceable(32) %struct.safe_VkAttachmentReference2* @_ZN27safe_VkAttachmentReference2aSERKS_(%struct.safe_VkAttachmentReference2* %529, %struct.safe_VkAttachmentReference2* nonnull dereferenceable(32) %5) #8
  call void @_ZN27safe_VkAttachmentReference2D1Ev(%struct.safe_VkAttachmentReference2* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %389) #8, !noalias !5
  %531 = add nuw nsw i64 %522, 1
  %532 = load i32, i32* %367, align 8, !alias.scope !5
  %533 = zext i32 %532 to i64
  %534 = icmp ult i64 %531, %533
  br i1 %534, label %521, label %535

535:                                              ; preds = %521, %518, %500, %498, %481, %461
  %536 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %411, i64 %404, i32 7
  %537 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %536, align 8, !noalias !5
  %538 = icmp eq %struct.VkAttachmentReference* %537, null
  br i1 %538, label %549, label %539

539:                                              ; preds = %535
  %540 = call i8* @_Znwm(i64 32) #9
  %541 = bitcast i8* %540 to %struct.safe_VkAttachmentReference2*
  call void @_ZN27safe_VkAttachmentReference2C1Ev(%struct.safe_VkAttachmentReference2* nonnull %541) #8
  store i8* %540, i8** %395, align 8, !alias.scope !5
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %396) #8, !noalias !5
  %542 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %536, align 8, !noalias !5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %396, i8 -86, i64 32, i1 false) #8, !alias.scope !17, !noalias !5
  call void @_ZN27safe_VkAttachmentReference2C1Ev(%struct.safe_VkAttachmentReference2* nonnull %6) #8
  store i32 1000109001, i32* %397, align 8, !alias.scope !17, !noalias !5
  store i8* null, i8** %398, align 8, !alias.scope !17, !noalias !5
  %543 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %542, i64 0, i32 0
  %544 = load i32, i32* %543, align 4, !noalias !17
  store i32 %544, i32* %399, align 8, !alias.scope !17, !noalias !5
  %545 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %542, i64 0, i32 1
  %546 = load i32, i32* %545, align 4, !noalias !17
  store i32 %546, i32* %400, align 4, !alias.scope !17, !noalias !5
  store i32 0, i32* %401, align 8, !alias.scope !17, !noalias !5
  %547 = load %struct.safe_VkAttachmentReference2*, %struct.safe_VkAttachmentReference2** %370, align 8, !alias.scope !5
  %548 = call dereferenceable(32) %struct.safe_VkAttachmentReference2* @_ZN27safe_VkAttachmentReference2aSERKS_(%struct.safe_VkAttachmentReference2* %547, %struct.safe_VkAttachmentReference2* nonnull dereferenceable(32) %6) #8
  call void @_ZN27safe_VkAttachmentReference2D1Ev(%struct.safe_VkAttachmentReference2* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %396) #8, !noalias !5
  br label %549

549:                                              ; preds = %539, %535
  %550 = load i32, i32* %372, align 8, !alias.scope !5
  %551 = icmp eq i32 %550, 0
  br i1 %551, label %688, label %552

552:                                              ; preds = %549
  %553 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %411, i64 %404, i32 9
  %554 = load i32*, i32** %553, align 8, !noalias !5
  %555 = bitcast i32* %554 to i8*
  %556 = icmp eq i32* %554, null
  br i1 %556, label %688, label %557

557:                                              ; preds = %552
  %558 = zext i32 %550 to i64
  %559 = shl nuw nsw i64 %558, 2
  %560 = call i8* @_Znam(i64 %559) #9
  %561 = bitcast i8* %560 to i32*
  %562 = icmp ult i32 %550, 8
  br i1 %562, label %563, label %581

563:                                              ; preds = %666, %581, %557
  %564 = phi i64 [ 0, %581 ], [ 0, %557 ], [ %590, %666 ]
  %565 = xor i64 %564, -1
  %566 = add nsw i64 %565, %558
  %567 = and i64 %558, 3
  %568 = icmp eq i64 %567, 0
  br i1 %568, label %578, label %569

569:                                              ; preds = %563, %569
  %570 = phi i64 [ %575, %569 ], [ %564, %563 ]
  %571 = phi i64 [ %576, %569 ], [ %567, %563 ]
  %572 = getelementptr inbounds i32, i32* %554, i64 %570
  %573 = load i32, i32* %572, align 4
  %574 = getelementptr inbounds i32, i32* %561, i64 %570
  store i32 %573, i32* %574, align 4, !noalias !5
  %575 = add nuw nsw i64 %570, 1
  %576 = add i64 %571, -1
  %577 = icmp eq i64 %576, 0
  br i1 %577, label %578, label %569, !llvm.loop !20

578:                                              ; preds = %569, %563
  %579 = phi i64 [ %564, %563 ], [ %575, %569 ]
  %580 = icmp ult i64 %566, 3
  br i1 %580, label %668, label %669

581:                                              ; preds = %557
  %582 = shl nuw nsw i64 %558, 2
  %583 = getelementptr i8, i8* %560, i64 %582
  %584 = getelementptr i32, i32* %554, i64 %558
  %585 = bitcast i32* %584 to i8*
  %586 = icmp ult i8* %560, %585
  %587 = icmp ugt i8* %583, %555
  %588 = and i1 %586, %587
  br i1 %588, label %563, label %589

589:                                              ; preds = %581
  %590 = and i64 %558, 4294967288
  %591 = add nsw i64 %590, -8
  %592 = lshr exact i64 %591, 3
  %593 = add nuw nsw i64 %592, 1
  %594 = and i64 %593, 3
  %595 = icmp ult i64 %591, 24
  br i1 %595, label %647, label %596

596:                                              ; preds = %589
  %597 = sub nsw i64 %593, %594
  br label %598

598:                                              ; preds = %598, %596
  %599 = phi i64 [ 0, %596 ], [ %644, %598 ]
  %600 = phi i64 [ %597, %596 ], [ %645, %598 ]
  %601 = getelementptr inbounds i32, i32* %554, i64 %599
  %602 = bitcast i32* %601 to <4 x i32>*
  %603 = load <4 x i32>, <4 x i32>* %602, align 4, !alias.scope !22
  %604 = getelementptr inbounds i32, i32* %601, i64 4
  %605 = bitcast i32* %604 to <4 x i32>*
  %606 = load <4 x i32>, <4 x i32>* %605, align 4, !alias.scope !22
  %607 = getelementptr inbounds i32, i32* %561, i64 %599
  %608 = bitcast i32* %607 to <4 x i32>*
  store <4 x i32> %603, <4 x i32>* %608, align 4, !alias.scope !25, !noalias !27
  %609 = getelementptr inbounds i32, i32* %607, i64 4
  %610 = bitcast i32* %609 to <4 x i32>*
  store <4 x i32> %606, <4 x i32>* %610, align 4, !alias.scope !25, !noalias !27
  %611 = or i64 %599, 8
  %612 = getelementptr inbounds i32, i32* %554, i64 %611
  %613 = bitcast i32* %612 to <4 x i32>*
  %614 = load <4 x i32>, <4 x i32>* %613, align 4, !alias.scope !22
  %615 = getelementptr inbounds i32, i32* %612, i64 4
  %616 = bitcast i32* %615 to <4 x i32>*
  %617 = load <4 x i32>, <4 x i32>* %616, align 4, !alias.scope !22
  %618 = getelementptr inbounds i32, i32* %561, i64 %611
  %619 = bitcast i32* %618 to <4 x i32>*
  store <4 x i32> %614, <4 x i32>* %619, align 4, !alias.scope !25, !noalias !27
  %620 = getelementptr inbounds i32, i32* %618, i64 4
  %621 = bitcast i32* %620 to <4 x i32>*
  store <4 x i32> %617, <4 x i32>* %621, align 4, !alias.scope !25, !noalias !27
  %622 = or i64 %599, 16
  %623 = getelementptr inbounds i32, i32* %554, i64 %622
  %624 = bitcast i32* %623 to <4 x i32>*
  %625 = load <4 x i32>, <4 x i32>* %624, align 4, !alias.scope !22
  %626 = getelementptr inbounds i32, i32* %623, i64 4
  %627 = bitcast i32* %626 to <4 x i32>*
  %628 = load <4 x i32>, <4 x i32>* %627, align 4, !alias.scope !22
  %629 = getelementptr inbounds i32, i32* %561, i64 %622
  %630 = bitcast i32* %629 to <4 x i32>*
  store <4 x i32> %625, <4 x i32>* %630, align 4, !alias.scope !25, !noalias !27
  %631 = getelementptr inbounds i32, i32* %629, i64 4
  %632 = bitcast i32* %631 to <4 x i32>*
  store <4 x i32> %628, <4 x i32>* %632, align 4, !alias.scope !25, !noalias !27
  %633 = or i64 %599, 24
  %634 = getelementptr inbounds i32, i32* %554, i64 %633
  %635 = bitcast i32* %634 to <4 x i32>*
  %636 = load <4 x i32>, <4 x i32>* %635, align 4, !alias.scope !22
  %637 = getelementptr inbounds i32, i32* %634, i64 4
  %638 = bitcast i32* %637 to <4 x i32>*
  %639 = load <4 x i32>, <4 x i32>* %638, align 4, !alias.scope !22
  %640 = getelementptr inbounds i32, i32* %561, i64 %633
  %641 = bitcast i32* %640 to <4 x i32>*
  store <4 x i32> %636, <4 x i32>* %641, align 4, !alias.scope !25, !noalias !27
  %642 = getelementptr inbounds i32, i32* %640, i64 4
  %643 = bitcast i32* %642 to <4 x i32>*
  store <4 x i32> %639, <4 x i32>* %643, align 4, !alias.scope !25, !noalias !27
  %644 = add i64 %599, 32
  %645 = add i64 %600, -4
  %646 = icmp eq i64 %645, 0
  br i1 %646, label %647, label %598, !llvm.loop !28

647:                                              ; preds = %598, %589
  %648 = phi i64 [ 0, %589 ], [ %644, %598 ]
  %649 = icmp eq i64 %594, 0
  br i1 %649, label %666, label %650

650:                                              ; preds = %647, %650
  %651 = phi i64 [ %663, %650 ], [ %648, %647 ]
  %652 = phi i64 [ %664, %650 ], [ %594, %647 ]
  %653 = getelementptr inbounds i32, i32* %554, i64 %651
  %654 = bitcast i32* %653 to <4 x i32>*
  %655 = load <4 x i32>, <4 x i32>* %654, align 4, !alias.scope !22
  %656 = getelementptr inbounds i32, i32* %653, i64 4
  %657 = bitcast i32* %656 to <4 x i32>*
  %658 = load <4 x i32>, <4 x i32>* %657, align 4, !alias.scope !22
  %659 = getelementptr inbounds i32, i32* %561, i64 %651
  %660 = bitcast i32* %659 to <4 x i32>*
  store <4 x i32> %655, <4 x i32>* %660, align 4, !alias.scope !25, !noalias !27
  %661 = getelementptr inbounds i32, i32* %659, i64 4
  %662 = bitcast i32* %661 to <4 x i32>*
  store <4 x i32> %658, <4 x i32>* %662, align 4, !alias.scope !25, !noalias !27
  %663 = add i64 %651, 8
  %664 = add i64 %652, -1
  %665 = icmp eq i64 %664, 0
  br i1 %665, label %666, label %650, !llvm.loop !30

666:                                              ; preds = %650, %647
  %667 = icmp eq i64 %590, %558
  br i1 %667, label %668, label %563

668:                                              ; preds = %578, %669, %666
  store i8* %560, i8** %402, align 8, !alias.scope !5
  br label %688

669:                                              ; preds = %578, %669
  %670 = phi i64 [ %686, %669 ], [ %579, %578 ]
  %671 = getelementptr inbounds i32, i32* %554, i64 %670
  %672 = load i32, i32* %671, align 4
  %673 = getelementptr inbounds i32, i32* %561, i64 %670
  store i32 %672, i32* %673, align 4, !noalias !5
  %674 = add nuw nsw i64 %670, 1
  %675 = getelementptr inbounds i32, i32* %554, i64 %674
  %676 = load i32, i32* %675, align 4
  %677 = getelementptr inbounds i32, i32* %561, i64 %674
  store i32 %676, i32* %677, align 4, !noalias !5
  %678 = add nuw nsw i64 %670, 2
  %679 = getelementptr inbounds i32, i32* %554, i64 %678
  %680 = load i32, i32* %679, align 4
  %681 = getelementptr inbounds i32, i32* %561, i64 %678
  store i32 %680, i32* %681, align 4, !noalias !5
  %682 = add nuw nsw i64 %670, 3
  %683 = getelementptr inbounds i32, i32* %554, i64 %682
  %684 = load i32, i32* %683, align 4
  %685 = getelementptr inbounds i32, i32* %561, i64 %682
  store i32 %684, i32* %685, align 4, !noalias !5
  %686 = add nuw nsw i64 %670, 4
  %687 = icmp eq i64 %686, %558
  br i1 %687, label %668, label %669, !llvm.loop !31

688:                                              ; preds = %549, %552, %668
  %689 = load %struct.safe_VkSubpassDescription2*, %struct.safe_VkSubpassDescription2** %78, align 8
  %690 = getelementptr inbounds %struct.safe_VkSubpassDescription2, %struct.safe_VkSubpassDescription2* %689, i64 %404
  %691 = call dereferenceable(88) %struct.safe_VkSubpassDescription2* @_ZN26safe_VkSubpassDescription2aSERKS_(%struct.safe_VkSubpassDescription2* %690, %struct.safe_VkSubpassDescription2* nonnull dereferenceable(88) %9) #8
  call void @_ZN26safe_VkSubpassDescription2D1Ev(%struct.safe_VkSubpassDescription2* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %358) #8
  %692 = add nuw nsw i64 %404, 1
  %693 = load i32, i32* %77, align 8
  %694 = zext i32 %693 to i64
  %695 = icmp ult i64 %692, %694
  br i1 %695, label %403, label %696

696:                                              ; preds = %688, %352, %335, %331
  br i1 %83, label %697, label %705

697:                                              ; preds = %696
  %698 = getelementptr inbounds %struct.VkRenderPassMultiviewCreateInfo, %struct.VkRenderPassMultiviewCreateInfo* %55, i64 0, i32 4
  %699 = load i32, i32* %698, align 8
  %700 = icmp eq i32 %699, 0
  br i1 %700, label %705, label %701

701:                                              ; preds = %697
  %702 = getelementptr inbounds %struct.VkRenderPassMultiviewCreateInfo, %struct.VkRenderPassMultiviewCreateInfo* %55, i64 0, i32 5
  %703 = load i32*, i32** %702, align 8
  %704 = icmp ne i32* %703, null
  br label %705

705:                                              ; preds = %697, %701, %696
  %706 = phi i1 [ false, %697 ], [ false, %696 ], [ %704, %701 ]
  %707 = load i32, i32* %81, align 8
  %708 = icmp eq i32 %707, 0
  br i1 %708, label %766, label %709

709:                                              ; preds = %705
  %710 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %0, i64 0, i32 8
  %711 = load %struct.VkSubpassDependency*, %struct.VkSubpassDependency** %710, align 8
  %712 = icmp eq %struct.VkSubpassDependency* %711, null
  br i1 %712, label %766, label %713

713:                                              ; preds = %709
  %714 = zext i32 %707 to i64
  %715 = mul nuw nsw i64 %714, 48
  %716 = or i64 %715, 8
  %717 = call i8* @_Znam(i64 %716) #9
  %718 = bitcast i8* %717 to i64*
  store i64 %714, i64* %718, align 16
  %719 = getelementptr inbounds i8, i8* %717, i64 8
  %720 = bitcast i8* %719 to %struct.safe_VkSubpassDependency2*
  %721 = getelementptr inbounds %struct.safe_VkSubpassDependency2, %struct.safe_VkSubpassDependency2* %720, i64 %714
  br label %722

722:                                              ; preds = %722, %713
  %723 = phi %struct.safe_VkSubpassDependency2* [ %720, %713 ], [ %724, %722 ]
  call void @_ZN25safe_VkSubpassDependency2C1Ev(%struct.safe_VkSubpassDependency2* %723) #8
  %724 = getelementptr inbounds %struct.safe_VkSubpassDependency2, %struct.safe_VkSubpassDependency2* %723, i64 1
  %725 = icmp eq %struct.safe_VkSubpassDependency2* %724, %721
  br i1 %725, label %726, label %722

726:                                              ; preds = %722
  %727 = bitcast %struct.safe_VkSubpassDependency2** %82 to i8**
  store i8* %719, i8** %727, align 8
  %728 = load i32, i32* %81, align 8
  %729 = icmp eq i32 %728, 0
  br i1 %729, label %766, label %730

730:                                              ; preds = %726
  %731 = getelementptr inbounds %struct.VkRenderPassMultiviewCreateInfo, %struct.VkRenderPassMultiviewCreateInfo* %55, i64 0, i32 5
  %732 = bitcast %struct.safe_VkSubpassDependency2* %10 to i8*
  %733 = getelementptr inbounds %struct.safe_VkSubpassDependency2, %struct.safe_VkSubpassDependency2* %10, i64 0, i32 0
  %734 = getelementptr inbounds %struct.safe_VkSubpassDependency2, %struct.safe_VkSubpassDependency2* %10, i64 0, i32 1
  %735 = getelementptr inbounds %struct.safe_VkSubpassDependency2, %struct.safe_VkSubpassDependency2* %10, i64 0, i32 2
  %736 = getelementptr inbounds %struct.safe_VkSubpassDependency2, %struct.safe_VkSubpassDependency2* %10, i64 0, i32 6
  %737 = getelementptr inbounds %struct.safe_VkSubpassDependency2, %struct.safe_VkSubpassDependency2* %10, i64 0, i32 7
  %738 = getelementptr inbounds %struct.safe_VkSubpassDependency2, %struct.safe_VkSubpassDependency2* %10, i64 0, i32 8
  %739 = getelementptr inbounds %struct.safe_VkSubpassDependency2, %struct.safe_VkSubpassDependency2* %10, i64 0, i32 9
  %740 = bitcast i32* %735 to <4 x i32>*
  br label %741

741:                                              ; preds = %730, %747
  %742 = phi i64 [ 0, %730 ], [ %762, %747 ]
  br i1 %706, label %743, label %747

743:                                              ; preds = %741
  %744 = load i32*, i32** %731, align 8
  %745 = getelementptr inbounds i32, i32* %744, i64 %742
  %746 = load i32, i32* %745, align 4
  br label %747

747:                                              ; preds = %741, %743
  %748 = phi i32 [ %746, %743 ], [ 0, %741 ]
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %732) #8
  %749 = load %struct.VkSubpassDependency*, %struct.VkSubpassDependency** %710, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %732, i8 -86, i64 48, i1 false) #8, !alias.scope !32
  call void @_ZN25safe_VkSubpassDependency2C1Ev(%struct.safe_VkSubpassDependency2* nonnull %10) #8
  store i32 1000109003, i32* %733, align 8, !alias.scope !32
  store i8* null, i8** %734, align 8, !alias.scope !32
  %750 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %749, i64 %742, i32 0
  %751 = bitcast i32* %750 to <4 x i32>*
  %752 = load <4 x i32>, <4 x i32>* %751, align 4, !noalias !32
  store <4 x i32> %752, <4 x i32>* %740, align 8, !alias.scope !32
  %753 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %749, i64 %742, i32 4
  %754 = load i32, i32* %753, align 4, !noalias !32
  store i32 %754, i32* %736, align 8, !alias.scope !32
  %755 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %749, i64 %742, i32 5
  %756 = load i32, i32* %755, align 4, !noalias !32
  store i32 %756, i32* %737, align 4, !alias.scope !32
  %757 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %749, i64 %742, i32 6
  %758 = load i32, i32* %757, align 4, !noalias !32
  store i32 %758, i32* %738, align 8, !alias.scope !32
  store i32 %748, i32* %739, align 4, !alias.scope !32
  %759 = load %struct.safe_VkSubpassDependency2*, %struct.safe_VkSubpassDependency2** %82, align 8
  %760 = getelementptr inbounds %struct.safe_VkSubpassDependency2, %struct.safe_VkSubpassDependency2* %759, i64 %742
  %761 = call dereferenceable(48) %struct.safe_VkSubpassDependency2* @_ZN25safe_VkSubpassDependency2aSERKS_(%struct.safe_VkSubpassDependency2* %760, %struct.safe_VkSubpassDependency2* nonnull dereferenceable(48) %10) #8
  call void @_ZN25safe_VkSubpassDependency2D1Ev(%struct.safe_VkSubpassDependency2* nonnull %10) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %732) #8
  %762 = add nuw nsw i64 %742, 1
  %763 = load i32, i32* %81, align 8
  %764 = zext i32 %763 to i64
  %765 = icmp ult i64 %762, %764
  br i1 %765, label %741, label %766

766:                                              ; preds = %747, %726, %709, %705
  %767 = load i32, i32* %89, align 8
  %768 = icmp eq i32 %767, 0
  br i1 %768, label %823, label %769

769:                                              ; preds = %766
  %770 = getelementptr inbounds %struct.VkRenderPassMultiviewCreateInfo, %struct.VkRenderPassMultiviewCreateInfo* %55, i64 0, i32 7
  %771 = load i32*, i32** %770, align 8
  %772 = icmp eq i32* %771, null
  br i1 %772, label %823, label %773

773:                                              ; preds = %769
  %774 = zext i32 %767 to i64
  %775 = shl nuw nsw i64 %774, 2
  %776 = call i8* @_Znam(i64 %775) #9
  %777 = bitcast i8* %776 to i32*
  %778 = add nsw i64 %774, -1
  %779 = and i64 %774, 3
  %780 = icmp ult i64 %778, 3
  br i1 %780, label %783, label %781

781:                                              ; preds = %773
  %782 = sub nsw i64 %774, %779
  br label %798

783:                                              ; preds = %798, %773
  %784 = phi i64 [ 0, %773 ], [ %820, %798 ]
  %785 = icmp eq i64 %779, 0
  br i1 %785, label %796, label %786

786:                                              ; preds = %783, %786
  %787 = phi i64 [ %793, %786 ], [ %784, %783 ]
  %788 = phi i64 [ %794, %786 ], [ %779, %783 ]
  %789 = load i32*, i32** %770, align 8
  %790 = getelementptr inbounds i32, i32* %789, i64 %787
  %791 = load i32, i32* %790, align 4
  %792 = getelementptr inbounds i32, i32* %777, i64 %787
  store i32 %791, i32* %792, align 4
  %793 = add nuw nsw i64 %787, 1
  %794 = add i64 %788, -1
  %795 = icmp eq i64 %794, 0
  br i1 %795, label %796, label %786, !llvm.loop !35

796:                                              ; preds = %786, %783
  %797 = bitcast i32** %90 to i8**
  store i8* %776, i8** %797, align 8
  br label %823

798:                                              ; preds = %798, %781
  %799 = phi i64 [ 0, %781 ], [ %820, %798 ]
  %800 = phi i64 [ %782, %781 ], [ %821, %798 ]
  %801 = load i32*, i32** %770, align 8
  %802 = getelementptr inbounds i32, i32* %801, i64 %799
  %803 = load i32, i32* %802, align 4
  %804 = getelementptr inbounds i32, i32* %777, i64 %799
  store i32 %803, i32* %804, align 4
  %805 = or i64 %799, 1
  %806 = load i32*, i32** %770, align 8
  %807 = getelementptr inbounds i32, i32* %806, i64 %805
  %808 = load i32, i32* %807, align 4
  %809 = getelementptr inbounds i32, i32* %777, i64 %805
  store i32 %808, i32* %809, align 4
  %810 = or i64 %799, 2
  %811 = load i32*, i32** %770, align 8
  %812 = getelementptr inbounds i32, i32* %811, i64 %810
  %813 = load i32, i32* %812, align 4
  %814 = getelementptr inbounds i32, i32* %777, i64 %810
  store i32 %813, i32* %814, align 4
  %815 = or i64 %799, 3
  %816 = load i32*, i32** %770, align 8
  %817 = getelementptr inbounds i32, i32* %816, i64 %815
  %818 = load i32, i32* %817, align 4
  %819 = getelementptr inbounds i32, i32* %777, i64 %815
  store i32 %818, i32* %819, align 4
  %820 = add nuw nsw i64 %799, 4
  %821 = add i64 %800, -4
  %822 = icmp eq i64 %821, 0
  br i1 %822, label %783, label %798

823:                                              ; preds = %769, %766, %796
  %824 = inttoptr i64 %164 to %"class.std::__1::vector.0"*
  %825 = icmp eq i64 %164, 0
  br i1 %825, label %844, label %826

826:                                              ; preds = %823
  %827 = inttoptr i64 %163 to %"class.std::__1::vector.0"*
  %828 = icmp eq %"class.std::__1::vector.0"* %827, %824
  br i1 %828, label %842, label %829

829:                                              ; preds = %826, %840
  %830 = phi %"class.std::__1::vector.0"* [ %831, %840 ], [ %827, %826 ]
  %831 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %830, i64 -1
  %832 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %831, i64 0, i32 0, i32 0
  %833 = load i32*, i32** %832, align 8
  %834 = icmp eq i32* %833, null
  br i1 %834, label %840, label %835

835:                                              ; preds = %829
  %836 = ptrtoint i32* %833 to i64
  %837 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %830, i64 -1, i32 0, i32 1
  %838 = bitcast i32** %837 to i64*
  store i64 %836, i64* %838, align 8
  %839 = bitcast i32* %833 to i8*
  call void @_ZdlPv(i8* %839) #9
  br label %840

840:                                              ; preds = %835, %829
  %841 = icmp eq %"class.std::__1::vector.0"* %831, %824
  br i1 %841, label %842, label %829

842:                                              ; preds = %840, %826
  %843 = inttoptr i64 %164 to i8*
  call void @_ZdlPv(i8* %843) #9
  br label %844

844:                                              ; preds = %823, %842
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @_ZN28safe_VkRenderPassCreateInfo2D1Ev(%struct.safe_VkRenderPassCreateInfo2*) unnamed_addr #2

declare i8* @_Z13SafePnextCopyPKv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #4

declare void @_ZN29safe_VkAttachmentDescription2C1Ev(%struct.safe_VkAttachmentDescription2*) unnamed_addr #3

declare dereferenceable(56) %struct.safe_VkAttachmentDescription2* @_ZN29safe_VkAttachmentDescription2aSERKS_(%struct.safe_VkAttachmentDescription2*, %struct.safe_VkAttachmentDescription2* dereferenceable(56)) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN29safe_VkAttachmentDescription2D1Ev(%struct.safe_VkAttachmentDescription2*) unnamed_addr #2

declare i32 @FormatPlaneCount(i32) local_unnamed_addr #3

declare void @_ZN26safe_VkSubpassDescription2C1Ev(%struct.safe_VkSubpassDescription2*) unnamed_addr #3

declare dereferenceable(88) %struct.safe_VkSubpassDescription2* @_ZN26safe_VkSubpassDescription2aSERKS_(%struct.safe_VkSubpassDescription2*, %struct.safe_VkSubpassDescription2* dereferenceable(88)) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN26safe_VkSubpassDescription2D1Ev(%struct.safe_VkSubpassDescription2*) unnamed_addr #2

declare void @_ZN25safe_VkSubpassDependency2C1Ev(%struct.safe_VkSubpassDependency2*) unnamed_addr #3

declare dereferenceable(48) %struct.safe_VkSubpassDependency2* @_ZN25safe_VkSubpassDependency2aSERKS_(%struct.safe_VkSubpassDependency2*, %struct.safe_VkSubpassDependency2* dereferenceable(48)) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN25safe_VkSubpassDependency2D1Ev(%struct.safe_VkSubpassDependency2*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @FormatIsDepthOrStencil(i32) local_unnamed_addr #3

declare zeroext i1 @FormatIsDepthOnly(i32) local_unnamed_addr #3

declare zeroext i1 @FormatIsDepthAndStencil(i32) local_unnamed_addr #3

declare zeroext i1 @FormatIsStencilOnly(i32) local_unnamed_addr #3

declare void @_ZN27safe_VkAttachmentReference2C1Ev(%struct.safe_VkAttachmentReference2*) unnamed_addr #3

declare dereferenceable(32) %struct.safe_VkAttachmentReference2* @_ZN27safe_VkAttachmentReference2aSERKS_(%struct.safe_VkAttachmentReference2*, %struct.safe_VkAttachmentReference2* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN27safe_VkAttachmentReference2D1Ev(%struct.safe_VkAttachmentReference2*) unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.0"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !36

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !37
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !37
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !40, !noalias !37
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !40, !noalias !37
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !40, !noalias !37
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !40, !noalias !37
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !42

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !37
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !40, !noalias !37
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !40, !noalias !37
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !43

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.0"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.0"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #10
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 4611686018427387903
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #10
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 4611686018427387903, %139 ]
  %153 = shl i64 %152, 2
  %154 = tail call i8* @_Znwm(i64 %153) #9
  %155 = bitcast i8* %154 to i32*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i32* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 %134
  %160 = getelementptr inbounds i32, i32* %158, i64 %157
  %161 = getelementptr inbounds i32, i32* %159, i64 %1
  %162 = shl nsw i64 %1, 2
  %163 = add i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i32* %159 to i8*
  %169 = shl nsw i64 %1, 2
  %170 = add i64 %169, -4
  %171 = lshr exact i64 %170, 2
  %172 = add nsw i64 %134, %171
  %173 = add i64 %172, 1
  %174 = getelementptr i32, i32* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i32* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 9223372036854775800
  %181 = getelementptr i32, i32* %159, i64 %180
  %182 = add nsw i64 %180, -8
  %183 = lshr exact i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i32, i32* %2, align 4, !alias.scope !44
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = load i32, i32* %2, align 4, !alias.scope !44
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x i32> undef, i32 %194, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i32, i32* %159, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !47, !noalias !44
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !47, !noalias !44
  %206 = or i64 %200, 8
  %207 = getelementptr i32, i32* %159, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !47, !noalias !44
  %209 = getelementptr i32, i32* %207, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %210, align 4, !alias.scope !47, !noalias !44
  %211 = add i64 %200, 16
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !49

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i32, i32* %159, i64 %215
  %219 = load i32, i32* %2, align 4, !alias.scope !44
  %220 = insertelement <4 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x i32> undef, i32 %219, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !47, !noalias !44
  %225 = getelementptr i32, i32* %218, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4, !alias.scope !47, !noalias !44
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i32* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i32* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i32, i32* %158, i64 %233
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i32* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i32, i32* %2, align 4
  store i32 %244, i32* %242, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !50

248:                                              ; preds = %241, %229
  %249 = phi i32* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 28
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i32* [ %268, %251 ], [ %249, %248 ]
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %252, i64 1
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %252, i64 2
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %252, i64 3
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 4
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %252, i64 5
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %252, i64 6
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 7
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %252, i64 8
  %269 = icmp eq i32* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !51

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i32* %160 to i64
  %272 = ptrtoint i32* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 0
  %274 = load i32*, i32** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i32* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 2
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = ptrtoint i32* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i32* %280 to i8*
  %285 = bitcast i32* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %277, i1 false) #8
  %286 = load i32*, i32** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i32* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #9
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZL7ToV2KHRRK23VkAttachmentDescription: argument 0"}
!4 = distinct !{!4, !"_ZL7ToV2KHRRK23VkAttachmentDescription"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZL7ToV2KHRRK20VkSubpassDescriptionjPKj: argument 0"}
!7 = distinct !{!7, !"_ZL7ToV2KHRRK20VkSubpassDescriptionjPKj"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZL7ToV2KHRRK21VkAttachmentReferencej: argument 0"}
!10 = distinct !{!10, !"_ZL7ToV2KHRRK21VkAttachmentReferencej"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZL7ToV2KHRRK21VkAttachmentReferencej: argument 0"}
!13 = distinct !{!13, !"_ZL7ToV2KHRRK21VkAttachmentReferencej"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZL7ToV2KHRRK21VkAttachmentReferencej: argument 0"}
!16 = distinct !{!16, !"_ZL7ToV2KHRRK21VkAttachmentReferencej"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZL7ToV2KHRRK21VkAttachmentReferencej: argument 0"}
!19 = distinct !{!19, !"_ZL7ToV2KHRRK21VkAttachmentReferencej"}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.unroll.disable"}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = !{!6, !23}
!28 = distinct !{!28, !29}
!29 = !{!"llvm.loop.isvectorized", i32 1}
!30 = distinct !{!30, !21}
!31 = distinct !{!31, !29}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZL7ToV2KHRRK19VkSubpassDependencyi: argument 0"}
!34 = distinct !{!34, !"_ZL7ToV2KHRRK19VkSubpassDependencyi"}
!35 = distinct !{!35, !21}
!36 = distinct !{!36, !21}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !29}
!43 = distinct !{!43, !29}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !29}
!50 = distinct !{!50, !21}
!51 = distinct !{!51, !29}
