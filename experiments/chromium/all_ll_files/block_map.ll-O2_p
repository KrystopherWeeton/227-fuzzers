; ModuleID = '../../third_party/ruy/src/ruy/block_map.cc'
source_filename = "../../third_party/ruy/src/ruy/block_map.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.ruy::BlockMap" = type { i32, i32, %"class.ruy::SidePair", i32, %"class.ruy::SidePair", %"class.ruy::SidePair", %"class.ruy::SidePair", %"class.ruy::SidePair" }
%"class.ruy::SidePair" = type { [2 x i32] }
%"struct.ruy::CpuCacheParams" = type { i32, i32 }

@switch.table._ZN3ruy12MakeBlockMapEiiiiiiiiRKNS_14CpuCacheParamsEPNS_8BlockMapE = private unnamed_addr constant [5 x i32] [i32 56, i32 48, i32 32, i32 16, i32 0], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3ruy15GetBlockByIndexERKNS_8BlockMapEiPNS_8SidePairIiEE(%"struct.ruy::BlockMap"* nocapture readonly dereferenceable(52), i32, %"class.ruy::SidePair"* nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = shl nsw i32 %5, 1
  %7 = shl nsw i32 -1, %6
  %8 = xor i32 %7, -1
  %9 = and i32 %8, %1
  %10 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  switch i32 %11, label %104 [
    i32 1, label %12
    i32 2, label %43
    i32 3, label %75
  ]

12:                                               ; preds = %3
  %13 = and i32 %9, -1717986919
  %14 = lshr i32 %9, 1
  %15 = and i32 %14, 572662306
  %16 = or i32 %15, %13
  %17 = shl i32 %9, 1
  %18 = and i32 %17, 1145324612
  %19 = or i32 %16, %18
  %20 = and i32 %19, -1010580541
  %21 = lshr i32 %16, 2
  %22 = and i32 %21, 202116108
  %23 = or i32 %20, %22
  %24 = shl i32 %19, 2
  %25 = and i32 %24, 808464432
  %26 = or i32 %23, %25
  %27 = and i32 %26, -267390961
  %28 = lshr i32 %23, 4
  %29 = and i32 %28, 15728880
  %30 = or i32 %27, %29
  %31 = shl i32 %26, 4
  %32 = and i32 %31, 251662080
  %33 = or i32 %30, %32
  %34 = and i32 %33, -16777216
  %35 = lshr i32 %30, 8
  %36 = and i32 %35, 65280
  %37 = shl i32 %33, 8
  %38 = and i32 %37, 16711680
  %39 = or i32 %38, %34
  %40 = and i32 %30, 255
  %41 = or i32 %36, %40
  %42 = lshr exact i32 %39, 16
  br label %109

43:                                               ; preds = %3
  %44 = and i32 %9, -1717986919
  %45 = lshr i32 %9, 1
  %46 = and i32 %45, 572662306
  %47 = or i32 %46, %44
  %48 = shl i32 %9, 1
  %49 = and i32 %48, 1145324612
  %50 = or i32 %47, %49
  %51 = and i32 %50, -1010580541
  %52 = lshr i32 %47, 2
  %53 = and i32 %52, 202116108
  %54 = or i32 %51, %53
  %55 = shl i32 %50, 2
  %56 = and i32 %55, 808464432
  %57 = or i32 %54, %56
  %58 = and i32 %57, -267390961
  %59 = lshr i32 %54, 4
  %60 = and i32 %59, 15728880
  %61 = or i32 %58, %60
  %62 = shl i32 %57, 4
  %63 = and i32 %62, 251662080
  %64 = or i32 %61, %63
  %65 = and i32 %64, -16777216
  %66 = lshr i32 %61, 8
  %67 = and i32 %66, 65280
  %68 = shl i32 %64, 8
  %69 = and i32 %68, 16711680
  %70 = or i32 %69, %65
  %71 = and i32 %61, 255
  %72 = or i32 %67, %71
  %73 = lshr exact i32 %70, 16
  %74 = xor i32 %73, %72
  br label %109

75:                                               ; preds = %3
  %76 = icmp sgt i32 %5, 0
  br i1 %76, label %77, label %109

77:                                               ; preds = %75, %77
  %78 = phi i32 [ %102, %77 ], [ 0, %75 ]
  %79 = phi i32 [ %98, %77 ], [ 0, %75 ]
  %80 = phi i32 [ %100, %77 ], [ 0, %75 ]
  %81 = phi i32 [ %101, %77 ], [ %9, %75 ]
  %82 = shl i32 1, %78
  %83 = and i32 %81, 2
  %84 = icmp ne i32 %83, 0
  %85 = and i32 %81, 1
  %86 = lshr exact i32 %83, 1
  %87 = icmp ne i32 %85, %86
  %88 = xor i32 %80, -1
  %89 = add i32 %82, %88
  %90 = select i1 %84, i32 %89, i32 %80
  %91 = xor i1 %84, true
  %92 = or i1 %87, %91
  %93 = select i1 %87, i32 %80, i32 %79
  %94 = xor i32 %79, -1
  %95 = add i32 %82, %94
  %96 = select i1 %92, i32 %93, i32 %95
  %97 = add i32 %82, %79
  %98 = select i1 %87, i32 %97, i32 %90
  %99 = select i1 %84, i32 %82, i32 0
  %100 = add i32 %96, %99
  %101 = lshr i32 %81, 2
  %102 = add nuw nsw i32 %78, 1
  %103 = icmp eq i32 %102, %5
  br i1 %103, label %109, label %77

104:                                              ; preds = %3
  %105 = shl nsw i32 -1, %5
  %106 = xor i32 %105, -1
  %107 = and i32 %9, %106
  %108 = lshr i32 %9, %5
  br label %109

109:                                              ; preds = %77, %75, %104, %43, %12
  %110 = phi i32 [ %108, %104 ], [ %73, %43 ], [ %42, %12 ], [ 0, %75 ], [ %100, %77 ]
  %111 = phi i32 [ %107, %104 ], [ %74, %43 ], [ %41, %12 ], [ 0, %75 ], [ %98, %77 ]
  %112 = lshr i32 %1, %6
  %113 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %0, i64 0, i32 4, i32 0, i64 0
  %114 = load i32, i32* %113, align 4
  %115 = shl nsw i32 -1, %114
  %116 = xor i32 %115, -1
  %117 = and i32 %112, %116
  %118 = shl i32 %117, %5
  %119 = add nsw i32 %118, %111
  %120 = getelementptr inbounds %"class.ruy::SidePair", %"class.ruy::SidePair"* %2, i64 0, i32 0, i64 0
  store i32 %119, i32* %120, align 4
  %121 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %0, i64 0, i32 4, i32 0, i64 1
  %122 = load i32, i32* %121, align 4
  %123 = shl nsw i32 -1, %122
  %124 = xor i32 %123, -1
  %125 = and i32 %112, %124
  %126 = load i32, i32* %4, align 4
  %127 = shl i32 %125, %126
  %128 = add nsw i32 %127, %110
  %129 = getelementptr inbounds %"class.ruy::SidePair", %"class.ruy::SidePair"* %2, i64 0, i32 0, i64 1
  store i32 %128, i32* %129, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN3ruy17GetTraversalOrderEiiiiiRKNS_14CpuCacheParamsE(i32, i32, i32, i32, i32, %"struct.ruy::CpuCacheParams"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 {
  %7 = mul nsw i32 %3, %0
  %8 = mul nsw i32 %4, %1
  %9 = add nsw i32 %8, %7
  %10 = mul nsw i32 %9, %2
  %11 = getelementptr inbounds %"struct.ruy::CpuCacheParams", %"struct.ruy::CpuCacheParams"* %5, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %10, %12
  br i1 %13, label %14, label %19

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"struct.ruy::CpuCacheParams", %"struct.ruy::CpuCacheParams"* %5, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp sgt i32 %10, %16
  %18 = select i1 %17, i32 3, i32 2
  br label %19

19:                                               ; preds = %6, %14
  %20 = phi i32 [ %18, %14 ], [ 0, %6 ]
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3ruy12MakeBlockMapEiiiiiiiiRKNS_14CpuCacheParamsEPNS_8BlockMapE(i32, i32, i32, i32, i32, i32, i32, i32, %"struct.ruy::CpuCacheParams"* nocapture readonly dereferenceable(8), %"struct.ruy::BlockMap"* nocapture) local_unnamed_addr #0 {
  %11 = mul nsw i32 %5, %0
  %12 = mul nsw i32 %6, %1
  %13 = add nsw i32 %12, %11
  %14 = mul nsw i32 %13, %2
  %15 = getelementptr inbounds %"struct.ruy::CpuCacheParams", %"struct.ruy::CpuCacheParams"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp sgt i32 %14, %16
  br i1 %17, label %18, label %23

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"struct.ruy::CpuCacheParams", %"struct.ruy::CpuCacheParams"* %8, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %14, %20
  %22 = select i1 %21, i32 3, i32 2
  br label %23

23:                                               ; preds = %10, %18
  %24 = phi i32 [ %22, %18 ], [ 0, %10 ]
  %25 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %9, i64 0, i32 1
  store i32 %24, i32* %25, align 4
  %26 = icmp sgt i32 %0, %1
  br i1 %26, label %27, label %62

27:                                               ; preds = %23
  %28 = icmp eq i32 %1, 1
  br i1 %28, label %33, label %29

29:                                               ; preds = %27
  %30 = add nsw i32 %1, -1
  %31 = tail call i32 @llvm.ctlz.i32(i32 %30, i1 true) #3, !range !2
  %32 = sub nuw nsw i32 32, %31
  br label %33

33:                                               ; preds = %29, %27
  %34 = phi i32 [ %32, %29 ], [ 0, %27 ]
  %35 = tail call i32 @llvm.ctlz.i32(i32 %4, i1 true) #3, !range !2
  %36 = xor i32 %35, 31
  %37 = sub nsw i32 %36, %34
  %38 = icmp sgt i32 %37, -3
  %39 = select i1 %38, i32 %37, i32 -3
  %40 = tail call i32 @llvm.ctlz.i32(i32 %0, i1 true) #3, !range !2
  %41 = xor i32 %40, 31
  br i1 %28, label %46, label %42

42:                                               ; preds = %33
  %43 = add nsw i32 %1, -1
  %44 = tail call i32 @llvm.ctlz.i32(i32 %43, i1 true) #3, !range !2
  %45 = sub nuw nsw i32 32, %44
  br label %46

46:                                               ; preds = %42, %33
  %47 = phi i32 [ %45, %42 ], [ 0, %33 ]
  %48 = sub nsw i32 %41, %47
  %49 = add nsw i32 %48, 1
  %50 = shl i32 %1, %49
  %51 = icmp sgt i32 %50, %0
  %52 = select i1 %51, i32 %48, i32 %49
  %53 = tail call i32 @llvm.ctlz.i32(i32 %3, i1 true) #3, !range !2
  %54 = xor i32 %53, 31
  %55 = add nsw i32 %41, -3
  %56 = sub nsw i32 %55, %54
  %57 = sub nsw i32 %56, %39
  %58 = icmp sgt i32 %57, 0
  %59 = select i1 %58, i32 %57, i32 0
  %60 = icmp slt i32 %59, %52
  %61 = select i1 %60, i32 %59, i32 %52
  br label %104

62:                                               ; preds = %23
  %63 = icmp sgt i32 %1, %0
  br i1 %63, label %69, label %64

64:                                               ; preds = %62
  %65 = tail call i32 @llvm.ctlz.i32(i32 %3, i1 true) #3, !range !2
  %66 = xor i32 %65, 31
  %67 = tail call i32 @llvm.ctlz.i32(i32 %4, i1 true) #3, !range !2
  %68 = xor i32 %67, 31
  br label %104

69:                                               ; preds = %62
  %70 = icmp eq i32 %0, 1
  br i1 %70, label %75, label %71

71:                                               ; preds = %69
  %72 = add nsw i32 %0, -1
  %73 = tail call i32 @llvm.ctlz.i32(i32 %72, i1 true) #3, !range !2
  %74 = sub nuw nsw i32 32, %73
  br label %75

75:                                               ; preds = %71, %69
  %76 = phi i32 [ %74, %71 ], [ 0, %69 ]
  %77 = tail call i32 @llvm.ctlz.i32(i32 %3, i1 true) #3, !range !2
  %78 = xor i32 %77, 31
  %79 = sub nsw i32 %78, %76
  %80 = icmp sgt i32 %79, -3
  %81 = select i1 %80, i32 %79, i32 -3
  %82 = tail call i32 @llvm.ctlz.i32(i32 %1, i1 true) #3, !range !2
  %83 = xor i32 %82, 31
  br i1 %70, label %88, label %84

84:                                               ; preds = %75
  %85 = add nsw i32 %0, -1
  %86 = tail call i32 @llvm.ctlz.i32(i32 %85, i1 true) #3, !range !2
  %87 = sub nuw nsw i32 32, %86
  br label %88

88:                                               ; preds = %84, %75
  %89 = phi i32 [ %87, %84 ], [ 0, %75 ]
  %90 = sub nsw i32 %83, %89
  %91 = add nsw i32 %90, 1
  %92 = shl i32 %0, %91
  %93 = icmp sgt i32 %92, %1
  %94 = select i1 %93, i32 %90, i32 %91
  %95 = tail call i32 @llvm.ctlz.i32(i32 %4, i1 true) #3, !range !2
  %96 = xor i32 %95, 31
  %97 = add nsw i32 %83, -3
  %98 = sub nsw i32 %97, %96
  %99 = sub nsw i32 %98, %81
  %100 = icmp sgt i32 %99, 0
  %101 = select i1 %100, i32 %99, i32 0
  %102 = icmp slt i32 %101, %94
  %103 = select i1 %102, i32 %101, i32 %94
  br label %104

104:                                              ; preds = %64, %46, %88
  %105 = phi i32 [ %68, %64 ], [ %36, %46 ], [ %96, %88 ]
  %106 = phi i32 [ %66, %64 ], [ %54, %46 ], [ %78, %88 ]
  %107 = phi i32 [ 0, %64 ], [ 0, %46 ], [ %103, %88 ]
  %108 = phi i32 [ 0, %64 ], [ %61, %46 ], [ 0, %88 ]
  %109 = icmp ult i32 %105, %106
  %110 = select i1 %109, i32 %106, i32 %105
  %111 = select i1 %26, i32 %1, i32 %0
  %112 = tail call i32 @llvm.ctlz.i32(i32 %111, i1 true) #3, !range !2
  %113 = xor i32 %112, 31
  %114 = icmp slt i32 %110, %113
  %115 = select i1 %114, i32 %113, i32 %110
  %116 = add nuw nsw i32 %110, 6
  %117 = icmp slt i32 %116, %115
  %118 = select i1 %117, i32 %116, i32 %115
  %119 = icmp sgt i32 %110, %118
  br i1 %119, label %134, label %120

120:                                              ; preds = %104
  %121 = icmp eq i32 %7, 1
  %122 = add nsw i32 %7, -1
  %123 = tail call i32 @llvm.ctlz.i32(i32 %122, i1 true) #3, !range !2
  %124 = or i32 %123, -32
  %125 = shl i32 1, %106
  %126 = icmp slt i32 %125, %0
  %127 = shl i32 1, %105
  %128 = icmp slt i32 %127, %1
  %129 = and i1 %126, %128
  %130 = load i32, i32* %15, align 4
  %131 = tail call i32 @llvm.ctlz.i32(i32 %130, i1 true) #3, !range !2
  %132 = xor i32 %131, 31
  %133 = add nuw nsw i32 %105, %106
  br label %175

134:                                              ; preds = %222, %104
  %135 = phi i32 [ -1, %104 ], [ %238, %222 ]
  %136 = sub nsw i32 %115, %135
  %137 = add nsw i32 %136, %108
  %138 = add nsw i32 %136, %107
  %139 = ashr i32 %0, %137
  %140 = sub i32 0, %3
  %141 = and i32 %139, %140
  %142 = ashr i32 %1, %138
  %143 = sub i32 0, %4
  %144 = and i32 %142, %143
  %145 = shl i32 %141, %137
  %146 = xor i32 %145, -1
  %147 = add i32 %3, %0
  %148 = add i32 %147, %146
  %149 = and i32 %148, %140
  %150 = ashr i32 %149, %106
  %151 = shl i32 %144, %138
  %152 = xor i32 %151, -1
  %153 = add i32 %4, %1
  %154 = add i32 %153, %152
  %155 = and i32 %154, %143
  %156 = ashr i32 %155, %105
  %157 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %9, i64 0, i32 2, i32 0, i64 0
  store i32 %0, i32* %157, align 4
  %158 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %9, i64 0, i32 2, i32 0, i64 1
  store i32 %1, i32* %158, align 4
  %159 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %9, i64 0, i32 5, i32 0, i64 0
  store i32 %3, i32* %159, align 4
  %160 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %9, i64 0, i32 5, i32 0, i64 1
  store i32 %4, i32* %160, align 4
  %161 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %9, i64 0, i32 3
  store i32 %136, i32* %161, align 4
  %162 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %9, i64 0, i32 4, i32 0, i64 0
  store i32 %108, i32* %162, align 4
  %163 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %9, i64 0, i32 4, i32 0, i64 1
  store i32 %107, i32* %163, align 4
  %164 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %9, i64 0, i32 6, i32 0, i64 0
  store i32 %141, i32* %164, align 4
  %165 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %9, i64 0, i32 6, i32 0, i64 1
  store i32 %144, i32* %165, align 4
  %166 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %9, i64 0, i32 7, i32 0, i64 0
  store i32 %150, i32* %166, align 4
  %167 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %9, i64 0, i32 7, i32 0, i64 1
  store i32 %156, i32* %167, align 4
  %168 = shl i32 %136, 1
  %169 = add nsw i32 %108, %168
  %170 = add nsw i32 %169, %107
  %171 = shl i32 1, %170
  %172 = icmp slt i32 %171, %7
  %173 = select i1 %172, i32 %171, i32 %7
  %174 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %9, i64 0, i32 0
  store i32 %173, i32* %174, align 4
  ret void

175:                                              ; preds = %222, %120
  %176 = phi i32 [ -2147483648, %120 ], [ %239, %222 ]
  %177 = phi i32 [ -1, %120 ], [ %238, %222 ]
  %178 = phi i32 [ %110, %120 ], [ %240, %222 ]
  %179 = ashr i32 %0, %178
  %180 = ashr i32 %1, %178
  %181 = mul nsw i32 %180, %179
  br i1 %121, label %194, label %182

182:                                              ; preds = %175
  %183 = icmp sgt i32 %181, 1
  %184 = select i1 %183, i32 %181, i32 1
  %185 = tail call i32 @llvm.ctlz.i32(i32 %184, i1 true) #3, !range !2
  %186 = xor i32 %185, 31
  %187 = add nsw i32 %186, %124
  %188 = icmp slt i32 %187, 0
  br i1 %188, label %194, label %189

189:                                              ; preds = %182
  %190 = icmp ult i32 %187, 4
  br i1 %190, label %191, label %194

191:                                              ; preds = %189
  %192 = shl nsw i32 %187, 3
  %193 = add nsw i32 %192, -16
  br label %194

194:                                              ; preds = %189, %191, %175, %182
  %195 = phi i32 [ 0, %175 ], [ -64, %182 ], [ %193, %191 ], [ 16, %189 ]
  %196 = shl i32 1, %178
  br i1 %129, label %197, label %222

197:                                              ; preds = %194
  %198 = icmp sgt i32 %196, %0
  %199 = select i1 %198, i32 %0, i32 %196
  %200 = icmp sgt i32 %196, %1
  %201 = select i1 %200, i32 %1, i32 %196
  %202 = mul nsw i32 %199, %5
  %203 = mul nsw i32 %201, %6
  %204 = add nsw i32 %203, %202
  %205 = mul nsw i32 %204, %2
  %206 = icmp eq i32 %205, 1
  br i1 %206, label %211, label %207

207:                                              ; preds = %197
  %208 = add nsw i32 %205, -1
  %209 = tail call i32 @llvm.ctlz.i32(i32 %208, i1 true) #3, !range !2
  %210 = sub nuw nsw i32 32, %209
  br label %211

211:                                              ; preds = %207, %197
  %212 = phi i32 [ %210, %207 ], [ 0, %197 ]
  %213 = sub nsw i32 %212, %132
  %214 = icmp slt i32 %213, -1
  br i1 %214, label %222, label %215

215:                                              ; preds = %211
  %216 = add nsw i32 %213, 1
  %217 = icmp ult i32 %216, 5
  br i1 %217, label %218, label %222

218:                                              ; preds = %215
  %219 = sext i32 %216 to i64
  %220 = getelementptr inbounds [5 x i32], [5 x i32]* @switch.table._ZN3ruy12MakeBlockMapEiiiiiiiiRKNS_14CpuCacheParamsEPNS_8BlockMapE, i64 0, i64 %219
  %221 = load i32, i32* %220, align 4
  br label %222

222:                                              ; preds = %215, %218, %194, %211
  %223 = phi i32 [ 64, %211 ], [ 0, %194 ], [ %221, %218 ], [ -64, %215 ]
  %224 = icmp sgt i32 %196, %0
  %225 = select i1 %224, i32 %0, i32 %196
  %226 = icmp sgt i32 %196, %1
  %227 = select i1 %226, i32 %1, i32 %196
  %228 = mul nsw i32 %227, %225
  %229 = tail call i32 @llvm.ctlz.i32(i32 %228, i1 true) #3, !range !2
  %230 = xor i32 %229, 31
  %231 = sub nsw i32 %230, %133
  %232 = icmp ult i32 %231, 8
  %233 = shl nsw i32 %231, 3
  %234 = select i1 %232, i32 %233, i32 64
  %235 = add nsw i32 %223, %195
  %236 = add nsw i32 %235, %234
  %237 = icmp slt i32 %236, %176
  %238 = select i1 %237, i32 %177, i32 %178
  %239 = select i1 %237, i32 %176, i32 %236
  %240 = add nuw nsw i32 %178, 1
  %241 = icmp slt i32 %178, %118
  br i1 %241, label %175, label %134
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3ruy20GetBlockMatrixCoordsENS_4SideERKNS_8BlockMapEiPiS4_(i32, %"struct.ruy::BlockMap"* nocapture readonly dereferenceable(52), i32, i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  %6 = sext i32 %0 to i64
  %7 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %1, i64 0, i32 6, i32 0, i64 %6
  %8 = load i32, i32* %7, align 4
  %9 = mul nsw i32 %8, %2
  %10 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %1, i64 0, i32 7, i32 0, i64 %6
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, %2
  %13 = select i1 %12, i32 %11, i32 %2
  %14 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %1, i64 0, i32 5, i32 0, i64 %6
  %15 = load i32, i32* %14, align 4
  %16 = mul nsw i32 %13, %15
  %17 = add nsw i32 %16, %9
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %7, align 4
  %19 = add nsw i32 %17, %18
  %20 = load i32, i32* %10, align 4
  %21 = icmp sgt i32 %20, %2
  br i1 %21, label %22, label %24

22:                                               ; preds = %5
  %23 = load i32, i32* %14, align 4
  br label %24

24:                                               ; preds = %5, %22
  %25 = phi i32 [ %23, %22 ], [ 0, %5 ]
  %26 = add nsw i32 %19, %25
  store i32 %26, i32* %4, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3ruy20GetBlockMatrixCoordsERKNS_8BlockMapERKNS_8SidePairIiEEPS4_S7_(%"struct.ruy::BlockMap"* nocapture readonly dereferenceable(52), %"class.ruy::SidePair"* nocapture readonly dereferenceable(8), %"class.ruy::SidePair"* nocapture, %"class.ruy::SidePair"* nocapture) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %"class.ruy::SidePair", %"class.ruy::SidePair"* %1, i64 0, i32 0, i64 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.ruy::SidePair", %"class.ruy::SidePair"* %2, i64 0, i32 0, i64 0
  %8 = getelementptr inbounds %"class.ruy::SidePair", %"class.ruy::SidePair"* %3, i64 0, i32 0, i64 0
  %9 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %0, i64 0, i32 6, i32 0, i64 0
  %10 = load i32, i32* %9, align 4
  %11 = mul nsw i32 %10, %6
  %12 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %0, i64 0, i32 7, i32 0, i64 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, %6
  %15 = select i1 %14, i32 %13, i32 %6
  %16 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %0, i64 0, i32 5, i32 0, i64 0
  %17 = load i32, i32* %16, align 4
  %18 = mul nsw i32 %15, %17
  %19 = add nsw i32 %18, %11
  store i32 %19, i32* %7, align 4
  %20 = load i32, i32* %9, align 4
  %21 = add nsw i32 %19, %20
  %22 = load i32, i32* %12, align 4
  %23 = icmp sgt i32 %22, %6
  %24 = load i32, i32* %16, align 4
  %25 = select i1 %23, i32 %24, i32 0
  %26 = add nsw i32 %21, %25
  store i32 %26, i32* %8, align 4
  %27 = getelementptr inbounds %"class.ruy::SidePair", %"class.ruy::SidePair"* %1, i64 0, i32 0, i64 1
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.ruy::SidePair", %"class.ruy::SidePair"* %2, i64 0, i32 0, i64 1
  %30 = getelementptr inbounds %"class.ruy::SidePair", %"class.ruy::SidePair"* %3, i64 0, i32 0, i64 1
  %31 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %0, i64 0, i32 6, i32 0, i64 1
  %32 = load i32, i32* %31, align 4
  %33 = mul nsw i32 %32, %28
  %34 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %0, i64 0, i32 7, i32 0, i64 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, %28
  %37 = select i1 %36, i32 %35, i32 %28
  %38 = getelementptr inbounds %"struct.ruy::BlockMap", %"struct.ruy::BlockMap"* %0, i64 0, i32 5, i32 0, i64 1
  %39 = load i32, i32* %38, align 4
  %40 = mul nsw i32 %37, %39
  %41 = add nsw i32 %40, %33
  store i32 %41, i32* %29, align 4
  %42 = load i32, i32* %31, align 4
  %43 = add nsw i32 %41, %42
  %44 = load i32, i32* %34, align 4
  %45 = icmp sgt i32 %44, %28
  %46 = load i32, i32* %38, align 4
  %47 = select i1 %45, i32 %46, i32 0
  %48 = add nsw i32 %43, %47
  store i32 %48, i32* %30, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
