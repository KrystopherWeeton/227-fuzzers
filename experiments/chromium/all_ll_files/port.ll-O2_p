; ModuleID = '../../mojo/core/ports/port.cc'
source_filename = "../../mojo/core/ports/port.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.mojo::core::ports::Port" = type { %"class.base::RefCountedThreadSafe", i32, %"struct.mojo::core::ports::NodeName", %"struct.mojo::core::ports::PortName", i64, i64, i64, i64, i64, %"class.mojo::core::ports::MessageQueue", %"class.std::__1::unique_ptr.2", %class.scoped_refptr, i8, i8, i8, %"class.base::Lock" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.mojo::core::ports::NodeName" = type { %"struct.mojo::core::ports::Name" }
%"struct.mojo::core::ports::Name" = type { i64, i64 }
%"struct.mojo::core::ports::PortName" = type { %"struct.mojo::core::ports::Name" }
%"class.mojo::core::ports::MessageQueue" = type { %"class.std::__1::vector", i64, i8, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.mojo::core::ports::UserMessageEvent"* }
%"class.mojo::core::ports::UserMessageEvent" = type { %"class.mojo::core::ports::Event", i64, %"class.std::__1::vector.9", %"class.std::__1::vector.16", %"class.std::__1::unique_ptr.23" }
%"class.mojo::core::ports::Event" = type { i32 (...)**, i32, %"struct.mojo::core::ports::PortName" }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { %"struct.mojo::core::ports::Event::PortDescriptor"*, %"struct.mojo::core::ports::Event::PortDescriptor"*, %"class.std::__1::__compressed_pair.11" }
%"struct.mojo::core::ports::Event::PortDescriptor" = type { %"struct.mojo::core::ports::NodeName", %"struct.mojo::core::ports::PortName", %"struct.mojo::core::ports::NodeName", %"struct.mojo::core::ports::PortName", i64, i64, i64, i8, [7 x i8] }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.mojo::core::ports::Event::PortDescriptor"* }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"struct.mojo::core::ports::PortName"*, %"struct.mojo::core::ports::PortName"*, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.mojo::core::ports::PortName"* }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.mojo::core::ports::UserMessage"* }
%"class.mojo::core::ports::UserMessage" = type { i32 (...)**, %"struct.mojo::core::ports::UserMessage::TypeInfo"* }
%"struct.mojo::core::ports::UserMessage::TypeInfo" = type { i8 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::pair"* }
%"struct.std::__1::pair" = type { %"struct.mojo::core::ports::NodeName", %"class.std::__1::unique_ptr.32" }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.mojo::core::ports::Event"* }
%class.scoped_refptr = type { %"class.mojo::core::ports::UserData"* }
%"class.mojo::core::ports::UserData" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.6", [4 x i8] }>
%"class.base::RefCountedThreadSafe.6" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }

@_ZN4mojo4core5ports4PortC1Emm = hidden unnamed_addr alias void (%"class.mojo::core::ports::Port"*, i64, i64), void (%"class.mojo::core::ports::Port"*, i64, i64)* @_ZN4mojo4core5ports4PortC2Emm
@_ZN4mojo4core5ports4PortD1Ev = hidden unnamed_addr alias void (%"class.mojo::core::ports::Port"*), void (%"class.mojo::core::ports::Port"*)* @_ZN4mojo4core5ports4PortD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4mojo4core5ports4PortC2Emm(%"class.mojo::core::ports::Port"*, i64, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.mojo::core::ports::Port", %"class.mojo::core::ports::Port"* %0, i64 0, i32 4
  %5 = bitcast %"class.mojo::core::ports::Port"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 40, i1 false)
  store i64 %1, i64* %4, align 8
  %6 = getelementptr inbounds %"class.mojo::core::ports::Port", %"class.mojo::core::ports::Port"* %0, i64 0, i32 5
  %7 = add i64 %1, -1
  store i64 %7, i64* %6, align 8
  %8 = getelementptr inbounds %"class.mojo::core::ports::Port", %"class.mojo::core::ports::Port"* %0, i64 0, i32 6
  %9 = getelementptr inbounds %"class.mojo::core::ports::Port", %"class.mojo::core::ports::Port"* %0, i64 0, i32 9
  %10 = bitcast i64* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false)
  tail call void @_ZN4mojo4core5ports12MessageQueueC1Em(%"class.mojo::core::ports::MessageQueue"* %9, i64 %2) #5
  %11 = getelementptr inbounds %"class.mojo::core::ports::Port", %"class.mojo::core::ports::Port"* %0, i64 0, i32 10
  %12 = getelementptr inbounds %"class.mojo::core::ports::Port", %"class.mojo::core::ports::Port"* %0, i64 0, i32 15, i32 0
  %13 = bitcast %"class.std::__1::unique_ptr.2"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 19, i1 false)
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %12) #5
  ret void
}

declare void @_ZN4mojo4core5ports12MessageQueueC1Em(%"class.mojo::core::ports::MessageQueue"*, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4mojo4core5ports4PortD2Ev(%"class.mojo::core::ports::Port"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.mojo::core::ports::Port", %"class.mojo::core::ports::Port"* %0, i64 0, i32 15, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %2) #5
  %3 = getelementptr inbounds %"class.mojo::core::ports::Port", %"class.mojo::core::ports::Port"* %0, i64 0, i32 11, i32 0
  %4 = load %"class.mojo::core::ports::UserData"*, %"class.mojo::core::ports::UserData"** %3, align 8
  %5 = icmp eq %"class.mojo::core::ports::UserData"* %4, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.mojo::core::ports::UserData", %"class.mojo::core::ports::UserData"* %4, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe.6", %"class.base::RefCountedThreadSafe.6"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %18

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe.6", %"class.base::RefCountedThreadSafe.6"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe.6"* %12 to %"class.mojo::core::ports::UserData"*
  %14 = bitcast %"class.base::RefCountedThreadSafe.6"* %12 to void (%"class.mojo::core::ports::UserData"*)***
  %15 = load void (%"class.mojo::core::ports::UserData"*)**, void (%"class.mojo::core::ports::UserData"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.mojo::core::ports::UserData"*)*, void (%"class.mojo::core::ports::UserData"*)** %15, i64 1
  %17 = load void (%"class.mojo::core::ports::UserData"*)*, void (%"class.mojo::core::ports::UserData"*)** %16, align 8
  tail call void %17(%"class.mojo::core::ports::UserData"* nonnull %13) #5
  br label %18

18:                                               ; preds = %1, %6, %11
  %19 = getelementptr inbounds %"class.mojo::core::ports::Port", %"class.mojo::core::ports::Port"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %20 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %19, align 8
  store %"struct.std::__1::pair"* null, %"struct.std::__1::pair"** %19, align 8
  %21 = icmp eq %"struct.std::__1::pair"* %20, null
  br i1 %21, label %33, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 1, i32 0, i32 0, i32 0
  %24 = load %"class.mojo::core::ports::Event"*, %"class.mojo::core::ports::Event"** %23, align 8
  store %"class.mojo::core::ports::Event"* null, %"class.mojo::core::ports::Event"** %23, align 8
  %25 = icmp eq %"class.mojo::core::ports::Event"* %24, null
  br i1 %25, label %31, label %26

26:                                               ; preds = %22
  %27 = bitcast %"class.mojo::core::ports::Event"* %24 to void (%"class.mojo::core::ports::Event"*)***
  %28 = load void (%"class.mojo::core::ports::Event"*)**, void (%"class.mojo::core::ports::Event"*)*** %27, align 8
  %29 = getelementptr inbounds void (%"class.mojo::core::ports::Event"*)*, void (%"class.mojo::core::ports::Event"*)** %28, i64 1
  %30 = load void (%"class.mojo::core::ports::Event"*)*, void (%"class.mojo::core::ports::Event"*)** %29, align 8
  tail call void %30(%"class.mojo::core::ports::Event"* nonnull %24) #5
  br label %31

31:                                               ; preds = %26, %22
  %32 = bitcast %"struct.std::__1::pair"* %20 to i8*
  tail call void @_ZdlPv(i8* %32) #6
  br label %33

33:                                               ; preds = %18, %31
  %34 = getelementptr inbounds %"class.mojo::core::ports::Port", %"class.mojo::core::ports::Port"* %0, i64 0, i32 9
  tail call void @_ZN4mojo4core5ports12MessageQueueD1Ev(%"class.mojo::core::ports::MessageQueue"* %34) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4mojo4core5ports12MessageQueueD1Ev(%"class.mojo::core::ports::MessageQueue"*) unnamed_addr #2

declare void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
