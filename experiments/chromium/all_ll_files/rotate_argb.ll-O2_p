; ModuleID = '../../third_party/libyuv/source/rotate_argb.cc'
source_filename = "../../third_party/libyuv/source/rotate_argb.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@cpu_info_ = external local_unnamed_addr global i32, align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBRotate(i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = icmp eq i8* %0, null
  %9 = icmp slt i32 %4, 1
  %10 = or i1 %8, %9
  %11 = icmp eq i32 %5, 0
  %12 = or i1 %10, %11
  %13 = xor i1 %12, true
  %14 = icmp ne i8* %2, null
  %15 = and i1 %14, %13
  br i1 %15, label %16, label %203

16:                                               ; preds = %7
  %17 = icmp slt i32 %5, 0
  br i1 %17, label %18, label %25

18:                                               ; preds = %16
  %19 = sub nsw i32 0, %5
  %20 = xor i32 %5, -1
  %21 = mul nsw i32 %20, %1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %0, i64 %22
  %24 = sub nsw i32 0, %1
  br label %25

25:                                               ; preds = %18, %16
  %26 = phi i32 [ %24, %18 ], [ %1, %16 ]
  %27 = phi i8* [ %23, %18 ], [ %0, %16 ]
  %28 = phi i32 [ %19, %18 ], [ %5, %16 ]
  switch i32 %6, label %203 [
    i32 0, label %29
    i32 90, label %31
    i32 270, label %66
    i32 180, label %101
  ]

29:                                               ; preds = %25
  %30 = tail call i32 @ARGBCopy(i8* %27, i32 %26, i8* nonnull %2, i32 %3, i32 %4, i32 %28) #4
  br label %203

31:                                               ; preds = %25
  %32 = add nsw i32 %28, -1
  %33 = mul nsw i32 %32, %26
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %27, i64 %34
  %36 = sub nsw i32 0, %26
  %37 = ashr i32 %36, 2
  %38 = and i32 %36, 3
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %203

40:                                               ; preds = %31
  %41 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %40
  %44 = tail call i32 @InitCpuFlags() #4
  br label %45

45:                                               ; preds = %43, %40
  %46 = phi i32 [ %44, %43 ], [ %41, %40 ]
  %47 = and i32 %46, 32
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %45
  %50 = and i32 %28, 3
  %51 = icmp eq i32 %50, 0
  %52 = select i1 %51, void (i8*, i64, i32, i8*, i32)* @ScaleARGBRowDownEven_SSE2, void (i8*, i64, i32, i8*, i32)* @ScaleARGBRowDownEven_Any_SSE2
  br label %53

53:                                               ; preds = %49, %45
  %54 = phi void (i8*, i64, i32, i8*, i32)* [ %52, %49 ], [ @ScaleARGBRowDownEven_C, %45 ]
  %55 = icmp sgt i32 %4, 0
  br i1 %55, label %56, label %203

56:                                               ; preds = %53
  %57 = sext i32 %3 to i64
  br label %58

58:                                               ; preds = %58, %56
  %59 = phi i32 [ 0, %56 ], [ %64, %58 ]
  %60 = phi i8* [ %35, %56 ], [ %63, %58 ]
  %61 = phi i8* [ %2, %56 ], [ %62, %58 ]
  tail call void %54(i8* %60, i64 0, i32 %37, i8* %61, i32 %28) #4, !callees !2
  %62 = getelementptr inbounds i8, i8* %61, i64 %57
  %63 = getelementptr inbounds i8, i8* %60, i64 4
  %64 = add nuw nsw i32 %59, 1
  %65 = icmp eq i32 %64, %4
  br i1 %65, label %203, label %58

66:                                               ; preds = %25
  %67 = add nsw i32 %4, -1
  %68 = mul nsw i32 %67, %3
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %2, i64 %69
  %71 = sub nsw i32 0, %3
  %72 = ashr i32 %26, 2
  %73 = and i32 %26, 3
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %203

75:                                               ; preds = %66
  %76 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %75
  %79 = tail call i32 @InitCpuFlags() #4
  br label %80

80:                                               ; preds = %78, %75
  %81 = phi i32 [ %79, %78 ], [ %76, %75 ]
  %82 = and i32 %81, 32
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %88, label %84

84:                                               ; preds = %80
  %85 = and i32 %28, 3
  %86 = icmp eq i32 %85, 0
  %87 = select i1 %86, void (i8*, i64, i32, i8*, i32)* @ScaleARGBRowDownEven_SSE2, void (i8*, i64, i32, i8*, i32)* @ScaleARGBRowDownEven_Any_SSE2
  br label %88

88:                                               ; preds = %84, %80
  %89 = phi void (i8*, i64, i32, i8*, i32)* [ %87, %84 ], [ @ScaleARGBRowDownEven_C, %80 ]
  %90 = icmp sgt i32 %4, 0
  br i1 %90, label %91, label %203

91:                                               ; preds = %88
  %92 = sext i32 %71 to i64
  br label %93

93:                                               ; preds = %93, %91
  %94 = phi i32 [ 0, %91 ], [ %99, %93 ]
  %95 = phi i8* [ %27, %91 ], [ %98, %93 ]
  %96 = phi i8* [ %70, %91 ], [ %97, %93 ]
  tail call void %89(i8* %95, i64 0, i32 %72, i8* %96, i32 %28) #4, !callees !2
  %97 = getelementptr inbounds i8, i8* %96, i64 %92
  %98 = getelementptr inbounds i8, i8* %95, i64 4
  %99 = add nuw nsw i32 %94, 1
  %100 = icmp eq i32 %99, %4
  br i1 %100, label %203, label %93

101:                                              ; preds = %25
  %102 = shl nsw i32 %4, 2
  %103 = add nsw i32 %102, 63
  %104 = sext i32 %103 to i64
  %105 = tail call noalias i8* @malloc(i64 %104) #4
  %106 = ptrtoint i8* %105 to i64
  %107 = add nsw i64 %106, 63
  %108 = and i64 %107, -64
  %109 = inttoptr i64 %108 to i8*
  %110 = add nsw i32 %28, -1
  %111 = mul nsw i32 %110, %26
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i8, i8* %27, i64 %112
  %114 = mul nsw i32 %110, %3
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %2, i64 %115
  %117 = add nuw nsw i32 %28, 1
  %118 = ashr i32 %117, 1
  %119 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %123

121:                                              ; preds = %101
  %122 = tail call i32 @InitCpuFlags() #4
  br label %123

123:                                              ; preds = %121, %101
  %124 = phi i32 [ %122, %121 ], [ %119, %101 ]
  %125 = and i32 %124, 32
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %131, label %127

127:                                              ; preds = %123
  %128 = and i32 %4, 3
  %129 = icmp eq i32 %128, 0
  %130 = select i1 %129, void (i8*, i8*, i32)* @ARGBMirrorRow_SSE2, void (i8*, i8*, i32)* @ARGBMirrorRow_Any_SSE2
  br label %131

131:                                              ; preds = %127, %123
  %132 = phi void (i8*, i8*, i32)* [ %130, %127 ], [ @ARGBMirrorRow_C, %123 ]
  %133 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %137

135:                                              ; preds = %131
  %136 = tail call i32 @InitCpuFlags() #4
  br label %137

137:                                              ; preds = %135, %131
  %138 = phi i32 [ %136, %135 ], [ %133, %131 ]
  %139 = and i32 %138, 1024
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %145, label %141

141:                                              ; preds = %137
  %142 = and i32 %4, 7
  %143 = icmp eq i32 %142, 0
  %144 = select i1 %143, void (i8*, i8*, i32)* @ARGBMirrorRow_AVX2, void (i8*, i8*, i32)* @ARGBMirrorRow_Any_AVX2
  br label %145

145:                                              ; preds = %141, %137
  %146 = phi void (i8*, i8*, i32)* [ %144, %141 ], [ %132, %137 ]
  %147 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %151

149:                                              ; preds = %145
  %150 = tail call i32 @InitCpuFlags() #4
  br label %151

151:                                              ; preds = %149, %145
  %152 = phi i32 [ %150, %149 ], [ %147, %145 ]
  %153 = and i32 %152, 32
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %159, label %155

155:                                              ; preds = %151
  %156 = and i32 %4, 7
  %157 = icmp eq i32 %156, 0
  %158 = select i1 %157, void (i8*, i8*, i32)* @CopyRow_SSE2, void (i8*, i8*, i32)* @CopyRow_Any_SSE2
  br label %159

159:                                              ; preds = %155, %151
  %160 = phi void (i8*, i8*, i32)* [ %158, %155 ], [ @CopyRow_C, %151 ]
  %161 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %165

163:                                              ; preds = %159
  %164 = tail call i32 @InitCpuFlags() #4
  br label %165

165:                                              ; preds = %163, %159
  %166 = phi i32 [ %164, %163 ], [ %161, %159 ]
  %167 = and i32 %166, 512
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %173, label %169

169:                                              ; preds = %165
  %170 = and i32 %4, 15
  %171 = icmp eq i32 %170, 0
  %172 = select i1 %171, void (i8*, i8*, i32)* @CopyRow_AVX, void (i8*, i8*, i32)* @CopyRow_Any_AVX
  br label %173

173:                                              ; preds = %169, %165
  %174 = phi void (i8*, i8*, i32)* [ %172, %169 ], [ %160, %165 ]
  %175 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %179

177:                                              ; preds = %173
  %178 = tail call i32 @InitCpuFlags() #4
  br label %179

179:                                              ; preds = %177, %173
  %180 = phi i32 [ %178, %177 ], [ %175, %173 ]
  %181 = and i32 %180, 2048
  %182 = icmp eq i32 %181, 0
  %183 = select i1 %182, void (i8*, i8*, i32)* %174, void (i8*, i8*, i32)* @CopyRow_ERMS
  %184 = icmp sgt i32 %28, 0
  br i1 %184, label %185, label %202

185:                                              ; preds = %179
  %186 = sext i32 %26 to i64
  %187 = sext i32 %3 to i64
  %188 = sub nsw i64 0, %186
  %189 = sub nsw i64 0, %187
  br label %190

190:                                              ; preds = %190, %185
  %191 = phi i32 [ 0, %185 ], [ %200, %190 ]
  %192 = phi i8* [ %116, %185 ], [ %199, %190 ]
  %193 = phi i8* [ %113, %185 ], [ %198, %190 ]
  %194 = phi i8* [ %27, %185 ], [ %196, %190 ]
  %195 = phi i8* [ %2, %185 ], [ %197, %190 ]
  tail call void %146(i8* %194, i8* %109, i32 %4) #4
  tail call void %146(i8* %193, i8* %195, i32 %4) #4
  tail call void %183(i8* %109, i8* %192, i32 %102) #4
  %196 = getelementptr inbounds i8, i8* %194, i64 %186
  %197 = getelementptr inbounds i8, i8* %195, i64 %187
  %198 = getelementptr inbounds i8, i8* %193, i64 %188
  %199 = getelementptr inbounds i8, i8* %192, i64 %189
  %200 = add nuw nsw i32 %191, 1
  %201 = icmp slt i32 %200, %118
  br i1 %201, label %190, label %202

202:                                              ; preds = %190, %179
  tail call void @free(i8* %105) #4
  br label %203

203:                                              ; preds = %93, %58, %88, %66, %53, %31, %25, %7, %202, %29
  %204 = phi i32 [ 0, %202 ], [ %30, %29 ], [ -1, %7 ], [ -1, %25 ], [ -1, %31 ], [ 0, %53 ], [ -1, %66 ], [ 0, %88 ], [ 0, %58 ], [ 0, %93 ]
  ret i32 %204
}

declare i32 @ARGBCopy(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #1

declare void @ScaleARGBRowDownEven_C(i8*, i64, i32, i8*, i32) local_unnamed_addr #1

declare void @ScaleARGBRowDownEven_Any_SSE2(i8*, i64, i32, i8*, i32) local_unnamed_addr #1

declare void @ScaleARGBRowDownEven_SSE2(i8*, i64, i32, i8*, i32) local_unnamed_addr #1

declare i32 @InitCpuFlags() local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

declare void @ARGBMirrorRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @CopyRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBMirrorRow_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBMirrorRow_SSE2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBMirrorRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBMirrorRow_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @CopyRow_SSE2(i8*, i8*, i32) local_unnamed_addr #1

declare void @CopyRow_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #1

declare void @CopyRow_AVX(i8*, i8*, i32) local_unnamed_addr #1

declare void @CopyRow_Any_AVX(i8*, i8*, i32) local_unnamed_addr #1

declare void @CopyRow_ERMS(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{void (i8*, i64, i32, i8*, i32)* @ScaleARGBRowDownEven_Any_SSE2, void (i8*, i64, i32, i8*, i32)* @ScaleARGBRowDownEven_C, void (i8*, i64, i32, i8*, i32)* @ScaleARGBRowDownEven_SSE2}
