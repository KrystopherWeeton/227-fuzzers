; ModuleID = '../../v8/src/inspector/remote-object-id.cc'
source_filename = "../../v8/src/inspector/remote-object-id.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8_inspector::RemoteObjectIdBase" = type { i64, i32, i32 }
%"class.v8_inspector::String16" = type { %"class.std::__1::basic_string", i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__rep" }
%"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__long" }
%"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__long" = type { i16*, i64, i64 }
%"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.v8_crdtp::DispatchResponse" = type { i32, %"class.std::__1::basic_string.4" }
%"class.std::__1::basic_string.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.7 }
%union.anon.7 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.v8_inspector::RemoteObjectId"* }
%"class.v8_inspector::RemoteObjectId" = type { %"class.v8_inspector::RemoteObjectIdBase" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.8 }
%struct.anon.8 = type { i8 }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.v8_inspector::RemoteCallFrameId"* }
%"class.v8_inspector::RemoteCallFrameId" = type { %"class.v8_inspector::RemoteObjectIdBase" }
%"class.v8_inspector::String16Builder" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i16*, i16*, %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i16* }

$_ZNK12v8_inspector8String169substringEmm = comdat any

$_ZN12v8_inspector8String166concatIJS0_PKcS0_S3_S0_EEES0_DpT_ = comdat any

$_ZN12v8_inspector15String16Builder9appendAllINS_8String16EJPKcS2_S4_S2_EEEvT_DpT0_ = comdat any

$_ZN12v8_inspector15String16Builder9appendAllIPKcJNS_8String16ES3_S4_EEEvT_DpT0_ = comdat any

$_ZN12v8_inspector15String16Builder9appendAllINS_8String16EJPKcS2_EEEvT_DpT0_ = comdat any

$_ZN12v8_inspector15String16Builder9appendAllIPKcJNS_8String16EEEEvT_DpT0_ = comdat any

@.str = private unnamed_addr constant [25 x i8] c"Invalid remote object id\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"Invalid call frame id\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c".\00", align 1

@_ZN12v8_inspector18RemoteObjectIdBaseC1Ev = hidden unnamed_addr alias void (%"class.v8_inspector::RemoteObjectIdBase"*), void (%"class.v8_inspector::RemoteObjectIdBase"*)* @_ZN12v8_inspector18RemoteObjectIdBaseC2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN12v8_inspector18RemoteObjectIdBaseC2Ev(%"class.v8_inspector::RemoteObjectIdBase"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.v8_inspector::RemoteObjectIdBase"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12v8_inspector18RemoteObjectIdBase7parseIdERKNS_8String16E(%"class.v8_inspector::RemoteObjectIdBase"* nocapture, %"class.v8_inspector::String16"* dereferenceable(32)) local_unnamed_addr #1 align 2 {
  %3 = alloca i8, align 1
  %4 = alloca %"class.v8_inspector::String16", align 8
  %5 = alloca %"class.v8_inspector::String16", align 8
  %6 = alloca %"class.v8_inspector::String16", align 8
  %7 = bitcast %"class.v8_inspector::String16"* %1 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %7, i64 0, i32 1, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  %11 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.v8_inspector::String16"* %1 to i16*
  %16 = zext i8 %9 to i64
  %17 = select i1 %10, i16* %12, i16* %15
  %18 = select i1 %10, i64 %14, i64 %16
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %116, label %20

20:                                               ; preds = %2, %25
  %21 = phi i64 [ %27, %25 ], [ %18, %2 ]
  %22 = phi i16* [ %26, %25 ], [ %17, %2 ]
  %23 = load i16, i16* %22, align 2
  %24 = icmp eq i16 %23, 46
  br i1 %24, label %29, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds i16, i16* %22, i64 1
  %27 = add i64 %21, -1
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %116, label %20

29:                                               ; preds = %20
  %30 = icmp eq i16* %22, null
  %31 = ptrtoint i16* %22 to i64
  %32 = ptrtoint i16* %17 to i64
  %33 = sub i64 %31, %32
  %34 = ashr exact i64 %33, 1
  %35 = icmp eq i64 %33, -2
  %36 = or i1 %30, %35
  br i1 %36, label %116, label %37

37:                                               ; preds = %29
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #8
  store i8 0, i8* %3, align 1
  %38 = bitcast %"class.v8_inspector::String16"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %38) #8
  call void @_ZNK12v8_inspector8String169substringEmm(%"class.v8_inspector::String16"* nonnull sret %4, %"class.v8_inspector::String16"* %1, i64 0, i64 %34)
  %39 = call i64 @_ZNK12v8_inspector8String1611toInteger64EPb(%"class.v8_inspector::String16"* nonnull %4, i8* nonnull %3) #8
  %40 = bitcast %"class.v8_inspector::String16"* %4 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %41 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %40, i64 0, i32 1, i32 1
  %42 = load i8, i8* %41, align 1
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %37
  %45 = bitcast %"class.v8_inspector::String16"* %4 to i8**
  %46 = load i8*, i8** %45, align 8
  call void @_ZdlPv(i8* %46) #9
  br label %47

47:                                               ; preds = %37, %44
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %38) #8
  %48 = load i8, i8* %3, align 1, !range !2
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %114, label %50

50:                                               ; preds = %47
  %51 = add nsw i64 %34, 1
  %52 = load i8, i8* %8, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i16*, i16** %11, align 8
  %55 = load i64, i64* %13, align 8
  %56 = zext i8 %52 to i64
  %57 = select i1 %53, i16* %54, i16* %15
  %58 = select i1 %53, i64 %55, i64 %56
  %59 = icmp ugt i64 %58, %51
  br i1 %59, label %60, label %114

60:                                               ; preds = %50
  %61 = sub i64 %58, %51
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %114, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds i16, i16* %57, i64 %51
  br label %65

65:                                               ; preds = %70, %63
  %66 = phi i64 [ %72, %70 ], [ %61, %63 ]
  %67 = phi i16* [ %71, %70 ], [ %64, %63 ]
  %68 = load i16, i16* %67, align 2
  %69 = icmp eq i16 %68, 46
  br i1 %69, label %74, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds i16, i16* %67, i64 1
  %72 = add i64 %66, -1
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %114, label %65

74:                                               ; preds = %65
  %75 = icmp eq i16* %67, null
  %76 = ptrtoint i16* %67 to i64
  %77 = ptrtoint i16* %57 to i64
  %78 = sub i64 %76, %77
  %79 = ashr exact i64 %78, 1
  %80 = icmp eq i64 %78, -2
  %81 = or i1 %75, %80
  br i1 %81, label %114, label %82

82:                                               ; preds = %74
  %83 = bitcast %"class.v8_inspector::String16"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %83) #8
  %84 = sub i64 %79, %51
  call void @_ZNK12v8_inspector8String169substringEmm(%"class.v8_inspector::String16"* nonnull sret %5, %"class.v8_inspector::String16"* %1, i64 %51, i64 %84)
  %85 = call i32 @_ZNK12v8_inspector8String169toIntegerEPb(%"class.v8_inspector::String16"* nonnull %5, i8* nonnull %3) #8
  %86 = bitcast %"class.v8_inspector::String16"* %5 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %87 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %86, i64 0, i32 1, i32 1
  %88 = load i8, i8* %87, align 1
  %89 = icmp slt i8 %88, 0
  br i1 %89, label %90, label %93

90:                                               ; preds = %82
  %91 = bitcast %"class.v8_inspector::String16"* %5 to i8**
  %92 = load i8*, i8** %91, align 8
  call void @_ZdlPv(i8* %92) #9
  br label %93

93:                                               ; preds = %82, %90
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %83) #8
  %94 = load i8, i8* %3, align 1, !range !2
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %114, label %96

96:                                               ; preds = %93
  %97 = add nsw i64 %79, 1
  %98 = bitcast %"class.v8_inspector::String16"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %98) #8
  call void @_ZNK12v8_inspector8String169substringEmm(%"class.v8_inspector::String16"* nonnull sret %6, %"class.v8_inspector::String16"* %1, i64 %97, i64 4294967295)
  %99 = call i32 @_ZNK12v8_inspector8String169toIntegerEPb(%"class.v8_inspector::String16"* nonnull %6, i8* nonnull %3) #8
  %100 = bitcast %"class.v8_inspector::String16"* %6 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %101 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %100, i64 0, i32 1, i32 1
  %102 = load i8, i8* %101, align 1
  %103 = icmp slt i8 %102, 0
  br i1 %103, label %104, label %107

104:                                              ; preds = %96
  %105 = bitcast %"class.v8_inspector::String16"* %6 to i8**
  %106 = load i8*, i8** %105, align 8
  call void @_ZdlPv(i8* %106) #9
  br label %107

107:                                              ; preds = %96, %104
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %98) #8
  %108 = load i8, i8* %3, align 1, !range !2
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %114, label %110

110:                                              ; preds = %107
  %111 = getelementptr inbounds %"class.v8_inspector::RemoteObjectIdBase", %"class.v8_inspector::RemoteObjectIdBase"* %0, i64 0, i32 0
  store i64 %39, i64* %111, align 8
  %112 = getelementptr inbounds %"class.v8_inspector::RemoteObjectIdBase", %"class.v8_inspector::RemoteObjectIdBase"* %0, i64 0, i32 1
  store i32 %85, i32* %112, align 8
  %113 = getelementptr inbounds %"class.v8_inspector::RemoteObjectIdBase", %"class.v8_inspector::RemoteObjectIdBase"* %0, i64 0, i32 2
  store i32 %99, i32* %113, align 4
  br label %114

114:                                              ; preds = %70, %60, %74, %50, %110, %107, %93, %47
  %115 = phi i1 [ false, %47 ], [ false, %93 ], [ true, %110 ], [ false, %107 ], [ false, %50 ], [ false, %74 ], [ false, %60 ], [ false, %70 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #8
  br label %116

116:                                              ; preds = %25, %2, %29, %114
  %117 = phi i1 [ %115, %114 ], [ false, %2 ], [ false, %29 ], [ false, %25 ]
  ret i1 %117
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12v8_inspector8String169substringEmm(%"class.v8_inspector::String16"* noalias sret, %"class.v8_inspector::String16"*, i64, i64) local_unnamed_addr #1 comdat align 2 {
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #8
  %7 = bitcast %"class.v8_inspector::String16"* %1 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %7, i64 0, i32 1, i32 1
  %9 = load i8, i8* %8, align 1, !noalias !3
  %10 = icmp slt i8 %9, 0
  %11 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8, !noalias !3
  %13 = zext i8 %9 to i64
  %14 = select i1 %10, i64 %12, i64 %13
  %15 = icmp ult i64 %14, %2
  br i1 %15, label %16, label %18

16:                                               ; preds = %4
  %17 = bitcast %"class.std::__1::basic_string"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* nonnull %17) #10
  unreachable

18:                                               ; preds = %4
  %19 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8, !noalias !3
  %21 = bitcast %"class.v8_inspector::String16"* %1 to i16*
  %22 = select i1 %10, i16* %20, i16* %21
  %23 = getelementptr inbounds i16, i16* %22, i64 %2
  %24 = sub i64 %14, %2
  %25 = icmp ult i64 %24, %3
  %26 = select i1 %25, i64 %24, i64 %3
  %27 = icmp ugt i64 %26, 9223372036854775791
  br i1 %27, label %28, label %30

28:                                               ; preds = %18
  %29 = bitcast %"class.std::__1::basic_string"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %29) #10
  unreachable

30:                                               ; preds = %18
  %31 = icmp ult i64 %26, 11
  br i1 %31, label %45, label %32

32:                                               ; preds = %30
  %33 = add nuw nsw i64 %26, 8
  %34 = and i64 %33, -8
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call void @abort() #10
  unreachable

37:                                               ; preds = %32
  %38 = shl i64 %34, 1
  %39 = tail call i8* @_Znwm(i64 %38) #9
  %40 = bitcast i8* %39 to i16*
  %41 = bitcast %"class.std::__1::basic_string"* %5 to i8**
  store i8* %39, i8** %41, align 8, !alias.scope !3
  %42 = or i64 %34, -9223372036854775808
  %43 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %42, i64* %43, align 8, !alias.scope !3
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %26, i64* %44, align 8, !alias.scope !3
  br label %51

45:                                               ; preds = %30
  %46 = trunc i64 %26 to i8
  %47 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %47, i64 0, i32 1, i32 1
  store i8 %46, i8* %48, align 1, !alias.scope !3
  %49 = bitcast %"class.std::__1::basic_string"* %5 to i16*
  %50 = icmp eq i64 %26, 0
  br i1 %50, label %198, label %51

51:                                               ; preds = %45, %37
  %52 = phi i16* [ %40, %37 ], [ %49, %45 ]
  %53 = icmp ult i64 %26, 16
  br i1 %53, label %143, label %54

54:                                               ; preds = %51
  %55 = getelementptr i16, i16* %52, i64 %26
  %56 = add i64 %26, %2
  %57 = getelementptr i16, i16* %22, i64 %56
  %58 = icmp ult i16* %52, %57
  %59 = icmp ult i16* %23, %55
  %60 = and i1 %58, %59
  br i1 %60, label %143, label %61

61:                                               ; preds = %54
  %62 = and i64 %26, -16
  %63 = getelementptr i16, i16* %52, i64 %62
  %64 = sub i64 %26, %62
  %65 = getelementptr i16, i16* %23, i64 %62
  %66 = add i64 %62, -16
  %67 = lshr exact i64 %66, 4
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 3
  %70 = icmp ult i64 %66, 48
  br i1 %70, label %122, label %71

71:                                               ; preds = %61
  %72 = sub nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %119, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %120, %73 ]
  %76 = getelementptr i16, i16* %52, i64 %74
  %77 = getelementptr i16, i16* %23, i64 %74
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !6
  %80 = getelementptr i16, i16* %77, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !6
  %83 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %83, align 2, !alias.scope !9, !noalias !6
  %84 = getelementptr i16, i16* %76, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %85, align 2, !alias.scope !9, !noalias !6
  %86 = or i64 %74, 16
  %87 = getelementptr i16, i16* %52, i64 %86
  %88 = getelementptr i16, i16* %23, i64 %86
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !6
  %91 = getelementptr i16, i16* %88, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !6
  %94 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %94, align 2, !alias.scope !9, !noalias !6
  %95 = getelementptr i16, i16* %87, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %96, align 2, !alias.scope !9, !noalias !6
  %97 = or i64 %74, 32
  %98 = getelementptr i16, i16* %52, i64 %97
  %99 = getelementptr i16, i16* %23, i64 %97
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !6
  %102 = getelementptr i16, i16* %99, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !6
  %105 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %105, align 2, !alias.scope !9, !noalias !6
  %106 = getelementptr i16, i16* %98, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %107, align 2, !alias.scope !9, !noalias !6
  %108 = or i64 %74, 48
  %109 = getelementptr i16, i16* %52, i64 %108
  %110 = getelementptr i16, i16* %23, i64 %108
  %111 = bitcast i16* %110 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2, !alias.scope !6
  %113 = getelementptr i16, i16* %110, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2, !alias.scope !6
  %116 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %116, align 2, !alias.scope !9, !noalias !6
  %117 = getelementptr i16, i16* %109, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %118, align 2, !alias.scope !9, !noalias !6
  %119 = add i64 %74, 64
  %120 = add i64 %75, -4
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %73, !llvm.loop !11

122:                                              ; preds = %73, %61
  %123 = phi i64 [ 0, %61 ], [ %119, %73 ]
  %124 = icmp eq i64 %69, 0
  br i1 %124, label %141, label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %138, %125 ], [ %123, %122 ]
  %127 = phi i64 [ %139, %125 ], [ %69, %122 ]
  %128 = getelementptr i16, i16* %52, i64 %126
  %129 = getelementptr i16, i16* %23, i64 %126
  %130 = bitcast i16* %129 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2, !alias.scope !6
  %132 = getelementptr i16, i16* %129, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !6
  %135 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %135, align 2, !alias.scope !9, !noalias !6
  %136 = getelementptr i16, i16* %128, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %137, align 2, !alias.scope !9, !noalias !6
  %138 = add i64 %126, 16
  %139 = add i64 %127, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %125, !llvm.loop !13

141:                                              ; preds = %125, %122
  %142 = icmp eq i64 %26, %62
  br i1 %142, label %196, label %143

143:                                              ; preds = %141, %54, %51
  %144 = phi i16* [ %52, %54 ], [ %52, %51 ], [ %63, %141 ]
  %145 = phi i64 [ %26, %54 ], [ %26, %51 ], [ %64, %141 ]
  %146 = phi i16* [ %23, %54 ], [ %23, %51 ], [ %65, %141 ]
  %147 = add i64 %145, -1
  %148 = and i64 %145, 7
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %161, label %150

150:                                              ; preds = %143, %150
  %151 = phi i16* [ %157, %150 ], [ %144, %143 ]
  %152 = phi i64 [ %156, %150 ], [ %145, %143 ]
  %153 = phi i16* [ %158, %150 ], [ %146, %143 ]
  %154 = phi i64 [ %159, %150 ], [ %148, %143 ]
  %155 = load i16, i16* %153, align 2
  store i16 %155, i16* %151, align 2
  %156 = add i64 %152, -1
  %157 = getelementptr inbounds i16, i16* %151, i64 1
  %158 = getelementptr inbounds i16, i16* %153, i64 1
  %159 = add i64 %154, -1
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %150, !llvm.loop !15

161:                                              ; preds = %150, %143
  %162 = phi i16* [ %144, %143 ], [ %157, %150 ]
  %163 = phi i64 [ %145, %143 ], [ %156, %150 ]
  %164 = phi i16* [ %146, %143 ], [ %158, %150 ]
  %165 = icmp ult i64 %147, 7
  br i1 %165, label %196, label %166

166:                                              ; preds = %161, %166
  %167 = phi i16* [ %193, %166 ], [ %162, %161 ]
  %168 = phi i64 [ %192, %166 ], [ %163, %161 ]
  %169 = phi i16* [ %194, %166 ], [ %164, %161 ]
  %170 = load i16, i16* %169, align 2
  store i16 %170, i16* %167, align 2
  %171 = getelementptr inbounds i16, i16* %167, i64 1
  %172 = getelementptr inbounds i16, i16* %169, i64 1
  %173 = load i16, i16* %172, align 2
  store i16 %173, i16* %171, align 2
  %174 = getelementptr inbounds i16, i16* %167, i64 2
  %175 = getelementptr inbounds i16, i16* %169, i64 2
  %176 = load i16, i16* %175, align 2
  store i16 %176, i16* %174, align 2
  %177 = getelementptr inbounds i16, i16* %167, i64 3
  %178 = getelementptr inbounds i16, i16* %169, i64 3
  %179 = load i16, i16* %178, align 2
  store i16 %179, i16* %177, align 2
  %180 = getelementptr inbounds i16, i16* %167, i64 4
  %181 = getelementptr inbounds i16, i16* %169, i64 4
  %182 = load i16, i16* %181, align 2
  store i16 %182, i16* %180, align 2
  %183 = getelementptr inbounds i16, i16* %167, i64 5
  %184 = getelementptr inbounds i16, i16* %169, i64 5
  %185 = load i16, i16* %184, align 2
  store i16 %185, i16* %183, align 2
  %186 = getelementptr inbounds i16, i16* %167, i64 6
  %187 = getelementptr inbounds i16, i16* %169, i64 6
  %188 = load i16, i16* %187, align 2
  store i16 %188, i16* %186, align 2
  %189 = getelementptr inbounds i16, i16* %167, i64 7
  %190 = getelementptr inbounds i16, i16* %169, i64 7
  %191 = load i16, i16* %190, align 2
  store i16 %191, i16* %189, align 2
  %192 = add i64 %168, -8
  %193 = getelementptr inbounds i16, i16* %167, i64 8
  %194 = getelementptr inbounds i16, i16* %169, i64 8
  %195 = icmp eq i64 %192, 0
  br i1 %195, label %196, label %166, !llvm.loop !16

196:                                              ; preds = %161, %166, %141
  %197 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  br label %198

198:                                              ; preds = %196, %45
  %199 = phi %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* [ %197, %196 ], [ %47, %45 ]
  %200 = phi i16* [ %52, %196 ], [ %49, %45 ]
  %201 = getelementptr inbounds i16, i16* %200, i64 %26
  store i16 0, i16* %201, align 2
  call void @_ZN12v8_inspector8String16C1EONSt3__112basic_stringItNS1_11char_traitsItEENS1_9allocatorItEEEE(%"class.v8_inspector::String16"* %0, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %5) #8
  %202 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %199, i64 0, i32 1, i32 1
  %203 = load i8, i8* %202, align 1
  %204 = icmp slt i8 %203, 0
  br i1 %204, label %205, label %208

205:                                              ; preds = %198
  %206 = bitcast %"class.std::__1::basic_string"* %5 to i8**
  %207 = load i8*, i8** %206, align 8
  call void @_ZdlPv(i8* %207) #9
  br label %208

208:                                              ; preds = %198, %205
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #8
  ret void
}

declare i64 @_ZNK12v8_inspector8String1611toInteger64EPb(%"class.v8_inspector::String16"*, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @_ZNK12v8_inspector8String169toIntegerEPb(%"class.v8_inspector::String16"*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector14RemoteObjectId5parseERKNS_8String16EPNSt3__110unique_ptrIS0_NS4_14default_deleteIS0_EEEE(%"class.v8_crdtp::DispatchResponse"* noalias sret, %"class.v8_inspector::String16"* dereferenceable(32), %"class.std::__1::unique_ptr"* nocapture) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.std::__1::basic_string.4", align 8
  %5 = tail call i8* @_Znwm(i64 16) #9
  %6 = bitcast i8* %5 to %"class.v8_inspector::RemoteObjectIdBase"*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false)
  %7 = tail call zeroext i1 @_ZN12v8_inspector18RemoteObjectIdBase7parseIdERKNS_8String16E(%"class.v8_inspector::RemoteObjectIdBase"* nonnull %6, %"class.v8_inspector::String16"* dereferenceable(32) %1)
  br i1 %7, label %20, label %8

8:                                                ; preds = %3
  %9 = tail call i8* @_Znwm(i64 32) #9
  %10 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %9, i8** %10, align 8
  %11 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = bitcast i64* %11 to <2 x i64>*
  store <2 x i64> <i64 24, i64 -9223372036854775776>, <2 x i64>* %12, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %9, i8* align 1 getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i64 24, i1 false) #8
  %13 = getelementptr inbounds i8, i8* %9, i64 24
  store i8 0, i8* %13, align 1
  call void @_ZN8v8_crdtp16DispatchResponse11ServerErrorENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.v8_crdtp::DispatchResponse"* sret %0, %"class.std::__1::basic_string.4"* nonnull %4) #8
  %14 = bitcast %"class.std::__1::basic_string.4"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %14, i64 0, i32 1, i32 0
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %29

18:                                               ; preds = %8
  %19 = load i8*, i8** %10, align 8
  call void @_ZdlPv(i8* %19) #9
  br label %29

20:                                               ; preds = %3
  %21 = ptrtoint i8* %5 to i64
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %2, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.v8_inspector::RemoteObjectId"*, %"class.v8_inspector::RemoteObjectId"** %22, align 8
  %24 = bitcast %"class.std::__1::unique_ptr"* %2 to i64*
  store i64 %21, i64* %24, align 8
  %25 = icmp eq %"class.v8_inspector::RemoteObjectId"* %23, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %20
  %27 = bitcast %"class.v8_inspector::RemoteObjectId"* %23 to i8*
  tail call void @_ZdlPv(i8* %27) #9
  br label %28

28:                                               ; preds = %26, %20
  tail call void @_ZN8v8_crdtp16DispatchResponse7SuccessEv(%"class.v8_crdtp::DispatchResponse"* sret %0) #8
  br label %30

29:                                               ; preds = %8, %18
  call void @_ZdlPv(i8* nonnull %5) #9
  br label %30

30:                                               ; preds = %28, %29
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN8v8_crdtp16DispatchResponse11ServerErrorENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.v8_crdtp::DispatchResponse"* sret, %"class.std::__1::basic_string.4"*) local_unnamed_addr #3

declare void @_ZN8v8_crdtp16DispatchResponse7SuccessEv(%"class.v8_crdtp::DispatchResponse"* sret) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector14RemoteObjectId9serializeEmii(%"class.v8_inspector::String16"* noalias sret, i64, i32, i32) local_unnamed_addr #1 align 2 {
  tail call fastcc void @_ZN12v8_inspector12_GLOBAL__N_111serializeIdEmii(%"class.v8_inspector::String16"* noalias %0, i64 %1, i32 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12v8_inspector12_GLOBAL__N_111serializeIdEmii(%"class.v8_inspector::String16"* noalias, i64, i32, i32) unnamed_addr #1 {
  %5 = alloca %"class.v8_inspector::String16", align 8
  %6 = alloca %"class.v8_inspector::String16", align 8
  %7 = alloca %"class.v8_inspector::String16", align 8
  call void @_ZN12v8_inspector8String1613fromInteger64El(%"class.v8_inspector::String16"* nonnull sret %5, i64 %1) #8
  call void @_ZN12v8_inspector8String1611fromIntegerEi(%"class.v8_inspector::String16"* nonnull sret %6, i32 %2) #8
  call void @_ZN12v8_inspector8String1611fromIntegerEi(%"class.v8_inspector::String16"* nonnull sret %7, i32 %3) #8
  call void @_ZN12v8_inspector8String166concatIJS0_PKcS0_S3_S0_EEES0_DpT_(%"class.v8_inspector::String16"* sret %0, %"class.v8_inspector::String16"* nonnull %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), %"class.v8_inspector::String16"* nonnull %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), %"class.v8_inspector::String16"* nonnull %7)
  %8 = bitcast %"class.v8_inspector::String16"* %7 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %8, i64 0, i32 1, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %4
  %13 = bitcast %"class.v8_inspector::String16"* %7 to i8**
  %14 = load i8*, i8** %13, align 8
  call void @_ZdlPv(i8* %14) #9
  br label %15

15:                                               ; preds = %4, %12
  %16 = bitcast %"class.v8_inspector::String16"* %6 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %16, i64 0, i32 1, i32 1
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %15
  %21 = bitcast %"class.v8_inspector::String16"* %6 to i8**
  %22 = load i8*, i8** %21, align 8
  call void @_ZdlPv(i8* %22) #9
  br label %23

23:                                               ; preds = %15, %20
  %24 = bitcast %"class.v8_inspector::String16"* %5 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %24, i64 0, i32 1, i32 1
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %23
  %29 = bitcast %"class.v8_inspector::String16"* %5 to i8**
  %30 = load i8*, i8** %29, align 8
  call void @_ZdlPv(i8* %30) #9
  br label %31

31:                                               ; preds = %23, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector17RemoteCallFrameId5parseERKNS_8String16EPNSt3__110unique_ptrIS0_NS4_14default_deleteIS0_EEEE(%"class.v8_crdtp::DispatchResponse"* noalias sret, %"class.v8_inspector::String16"* dereferenceable(32), %"class.std::__1::unique_ptr.13"* nocapture) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.std::__1::basic_string.4", align 8
  %5 = tail call i8* @_Znwm(i64 16) #9
  %6 = bitcast i8* %5 to %"class.v8_inspector::RemoteObjectIdBase"*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false)
  %7 = tail call zeroext i1 @_ZN12v8_inspector18RemoteObjectIdBase7parseIdERKNS_8String16E(%"class.v8_inspector::RemoteObjectIdBase"* nonnull %6, %"class.v8_inspector::String16"* dereferenceable(32) %1)
  br i1 %7, label %18, label %8

8:                                                ; preds = %3
  %9 = bitcast %"class.std::__1::basic_string.4"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  store i8 21, i8* %10, align 1
  %11 = bitcast %"class.std::__1::basic_string.4"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 1 getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i64 21, i1 false) #8
  %12 = getelementptr inbounds i8, i8* %11, i64 21
  store i8 0, i8* %12, align 1
  call void @_ZN8v8_crdtp16DispatchResponse11ServerErrorENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.v8_crdtp::DispatchResponse"* sret %0, %"class.std::__1::basic_string.4"* nonnull %4) #8
  %13 = load i8, i8* %10, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @_ZdlPv(i8* %17) #9
  br label %27

18:                                               ; preds = %3
  %19 = ptrtoint i8* %5 to i64
  %20 = getelementptr inbounds %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13"* %2, i64 0, i32 0, i32 0, i32 0
  %21 = load %"class.v8_inspector::RemoteCallFrameId"*, %"class.v8_inspector::RemoteCallFrameId"** %20, align 8
  %22 = bitcast %"class.std::__1::unique_ptr.13"* %2 to i64*
  store i64 %19, i64* %22, align 8
  %23 = icmp eq %"class.v8_inspector::RemoteCallFrameId"* %21, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %18
  %25 = bitcast %"class.v8_inspector::RemoteCallFrameId"* %21 to i8*
  tail call void @_ZdlPv(i8* %25) #9
  br label %26

26:                                               ; preds = %24, %18
  tail call void @_ZN8v8_crdtp16DispatchResponse7SuccessEv(%"class.v8_crdtp::DispatchResponse"* sret %0) #8
  br label %28

27:                                               ; preds = %8, %15
  call void @_ZdlPv(i8* nonnull %5) #9
  br label %28

28:                                               ; preds = %26, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector17RemoteCallFrameId9serializeEmii(%"class.v8_inspector::String16"* noalias sret, i64, i32, i32) local_unnamed_addr #1 align 2 {
  tail call fastcc void @_ZN12v8_inspector12_GLOBAL__N_111serializeIdEmii(%"class.v8_inspector::String16"* noalias %0, i64 %1, i32 %2, i32 %3)
  ret void
}

declare void @_ZN12v8_inspector8String16C1EONSt3__112basic_stringItNS1_11char_traitsItEENS1_9allocatorItEEEE(%"class.v8_inspector::String16"*, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12v8_inspector8String166concatIJS0_PKcS0_S3_S0_EEES0_DpT_(%"class.v8_inspector::String16"* noalias sret, %"class.v8_inspector::String16"*, i8*, %"class.v8_inspector::String16"*, i8*, %"class.v8_inspector::String16"*) local_unnamed_addr #1 comdat align 2 {
  %7 = alloca %"class.v8_inspector::String16Builder", align 8
  %8 = alloca %"class.v8_inspector::String16", align 8
  %9 = alloca %"class.v8_inspector::String16", align 8
  %10 = alloca %"class.v8_inspector::String16", align 8
  %11 = bitcast %"class.v8_inspector::String16Builder"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #8
  call void @_ZN12v8_inspector15String16BuilderC1Ev(%"class.v8_inspector::String16Builder"* nonnull %7) #8
  %12 = bitcast %"class.v8_inspector::String16"* %1 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %12, i64 0, i32 1, i32 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %6
  %17 = bitcast %"class.v8_inspector::String16"* %8 to i8*
  %18 = bitcast %"class.v8_inspector::String16"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %17, i8* align 8 %18, i64 24, i1 false) #8
  br label %194

19:                                               ; preds = %6
  %20 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load i16*, i16** %20, align 8
  %22 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp ult i64 %23, 11
  br i1 %24, label %25, label %30

25:                                               ; preds = %19
  %26 = bitcast %"class.v8_inspector::String16"* %8 to i16*
  %27 = trunc i64 %23 to i8
  %28 = bitcast %"class.v8_inspector::String16"* %8 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %28, i64 0, i32 1, i32 1
  store i8 %27, i8* %29, align 1
  br label %47

30:                                               ; preds = %19
  %31 = icmp ugt i64 %23, 9223372036854775791
  br i1 %31, label %32, label %34

32:                                               ; preds = %30
  %33 = bitcast %"class.v8_inspector::String16"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %33) #10
  unreachable

34:                                               ; preds = %30
  %35 = add nuw nsw i64 %23, 8
  %36 = and i64 %35, -8
  %37 = icmp slt i64 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %34
  call void @abort() #10
  unreachable

39:                                               ; preds = %34
  %40 = shl i64 %36, 1
  %41 = call i8* @_Znwm(i64 %40) #9
  %42 = bitcast i8* %41 to i16*
  %43 = bitcast %"class.v8_inspector::String16"* %8 to i8**
  store i8* %41, i8** %43, align 8
  %44 = or i64 %36, -9223372036854775808
  %45 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %44, i64* %45, align 8
  %46 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %23, i64* %46, align 8
  br label %47

47:                                               ; preds = %39, %25
  %48 = phi i16* [ %26, %25 ], [ %42, %39 ]
  %49 = add nuw nsw i64 %23, 1
  %50 = add i64 %23, 1
  %51 = icmp ult i64 %50, 16
  br i1 %51, label %141, label %52

52:                                               ; preds = %47
  %53 = add i64 %23, 1
  %54 = getelementptr i16, i16* %48, i64 %53
  %55 = getelementptr i16, i16* %21, i64 %53
  %56 = icmp ult i16* %48, %55
  %57 = icmp ult i16* %21, %54
  %58 = and i1 %56, %57
  br i1 %58, label %141, label %59

59:                                               ; preds = %52
  %60 = and i64 %50, -16
  %61 = getelementptr i16, i16* %48, i64 %60
  %62 = sub i64 %49, %60
  %63 = getelementptr i16, i16* %21, i64 %60
  %64 = add i64 %60, -16
  %65 = lshr exact i64 %64, 4
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 3
  %68 = icmp ult i64 %64, 48
  br i1 %68, label %120, label %69

69:                                               ; preds = %59
  %70 = sub nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %117, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %118, %71 ]
  %74 = getelementptr i16, i16* %48, i64 %72
  %75 = getelementptr i16, i16* %21, i64 %72
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2, !alias.scope !17
  %78 = getelementptr i16, i16* %75, i64 8
  %79 = bitcast i16* %78 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2, !alias.scope !17
  %81 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %81, align 2, !alias.scope !20, !noalias !17
  %82 = getelementptr i16, i16* %74, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %83, align 2, !alias.scope !20, !noalias !17
  %84 = or i64 %72, 16
  %85 = getelementptr i16, i16* %48, i64 %84
  %86 = getelementptr i16, i16* %21, i64 %84
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !17
  %89 = getelementptr i16, i16* %86, i64 8
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !17
  %92 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %92, align 2, !alias.scope !20, !noalias !17
  %93 = getelementptr i16, i16* %85, i64 8
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %94, align 2, !alias.scope !20, !noalias !17
  %95 = or i64 %72, 32
  %96 = getelementptr i16, i16* %48, i64 %95
  %97 = getelementptr i16, i16* %21, i64 %95
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2, !alias.scope !17
  %100 = getelementptr i16, i16* %97, i64 8
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !17
  %103 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %103, align 2, !alias.scope !20, !noalias !17
  %104 = getelementptr i16, i16* %96, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %105, align 2, !alias.scope !20, !noalias !17
  %106 = or i64 %72, 48
  %107 = getelementptr i16, i16* %48, i64 %106
  %108 = getelementptr i16, i16* %21, i64 %106
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !17
  %111 = getelementptr i16, i16* %108, i64 8
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !17
  %114 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %114, align 2, !alias.scope !20, !noalias !17
  %115 = getelementptr i16, i16* %107, i64 8
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %116, align 2, !alias.scope !20, !noalias !17
  %117 = add i64 %72, 64
  %118 = add i64 %73, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %71, !llvm.loop !22

120:                                              ; preds = %71, %59
  %121 = phi i64 [ 0, %59 ], [ %117, %71 ]
  %122 = icmp eq i64 %67, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %136, %123 ], [ %121, %120 ]
  %125 = phi i64 [ %137, %123 ], [ %67, %120 ]
  %126 = getelementptr i16, i16* %48, i64 %124
  %127 = getelementptr i16, i16* %21, i64 %124
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2, !alias.scope !17
  %130 = getelementptr i16, i16* %127, i64 8
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !17
  %133 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %129, <8 x i16>* %133, align 2, !alias.scope !20, !noalias !17
  %134 = getelementptr i16, i16* %126, i64 8
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %135, align 2, !alias.scope !20, !noalias !17
  %136 = add i64 %124, 16
  %137 = add i64 %125, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %123, !llvm.loop !23

139:                                              ; preds = %123, %120
  %140 = icmp eq i64 %50, %60
  br i1 %140, label %194, label %141

141:                                              ; preds = %139, %52, %47
  %142 = phi i16* [ %48, %52 ], [ %48, %47 ], [ %61, %139 ]
  %143 = phi i64 [ %49, %52 ], [ %49, %47 ], [ %62, %139 ]
  %144 = phi i16* [ %21, %52 ], [ %21, %47 ], [ %63, %139 ]
  %145 = add i64 %143, -1
  %146 = and i64 %143, 7
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %159, label %148

148:                                              ; preds = %141, %148
  %149 = phi i16* [ %155, %148 ], [ %142, %141 ]
  %150 = phi i64 [ %154, %148 ], [ %143, %141 ]
  %151 = phi i16* [ %156, %148 ], [ %144, %141 ]
  %152 = phi i64 [ %157, %148 ], [ %146, %141 ]
  %153 = load i16, i16* %151, align 2
  store i16 %153, i16* %149, align 2
  %154 = add i64 %150, -1
  %155 = getelementptr inbounds i16, i16* %149, i64 1
  %156 = getelementptr inbounds i16, i16* %151, i64 1
  %157 = add i64 %152, -1
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %159, label %148, !llvm.loop !24

159:                                              ; preds = %148, %141
  %160 = phi i16* [ %142, %141 ], [ %155, %148 ]
  %161 = phi i64 [ %143, %141 ], [ %154, %148 ]
  %162 = phi i16* [ %144, %141 ], [ %156, %148 ]
  %163 = icmp ult i64 %145, 7
  br i1 %163, label %194, label %164

164:                                              ; preds = %159, %164
  %165 = phi i16* [ %191, %164 ], [ %160, %159 ]
  %166 = phi i64 [ %190, %164 ], [ %161, %159 ]
  %167 = phi i16* [ %192, %164 ], [ %162, %159 ]
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %165, align 2
  %169 = getelementptr inbounds i16, i16* %165, i64 1
  %170 = getelementptr inbounds i16, i16* %167, i64 1
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %165, i64 2
  %173 = getelementptr inbounds i16, i16* %167, i64 2
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %165, i64 3
  %176 = getelementptr inbounds i16, i16* %167, i64 3
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %165, i64 4
  %179 = getelementptr inbounds i16, i16* %167, i64 4
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %165, i64 5
  %182 = getelementptr inbounds i16, i16* %167, i64 5
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds i16, i16* %165, i64 6
  %185 = getelementptr inbounds i16, i16* %167, i64 6
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = getelementptr inbounds i16, i16* %165, i64 7
  %188 = getelementptr inbounds i16, i16* %167, i64 7
  %189 = load i16, i16* %188, align 2
  store i16 %189, i16* %187, align 2
  %190 = add i64 %166, -8
  %191 = getelementptr inbounds i16, i16* %165, i64 8
  %192 = getelementptr inbounds i16, i16* %167, i64 8
  %193 = icmp eq i64 %190, 0
  br i1 %193, label %194, label %164, !llvm.loop !25

194:                                              ; preds = %159, %164, %139, %16
  %195 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %8, i64 0, i32 1
  %196 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 1
  %197 = load i64, i64* %196, align 8
  store i64 %197, i64* %195, align 8
  %198 = bitcast %"class.v8_inspector::String16"* %3 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %199 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %198, i64 0, i32 1, i32 1
  %200 = load i8, i8* %199, align 1
  %201 = icmp slt i8 %200, 0
  br i1 %201, label %205, label %202

202:                                              ; preds = %194
  %203 = bitcast %"class.v8_inspector::String16"* %9 to i8*
  %204 = bitcast %"class.v8_inspector::String16"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %203, i8* align 8 %204, i64 24, i1 false) #8
  br label %380

205:                                              ; preds = %194
  %206 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %207 = load i16*, i16** %206, align 8
  %208 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %209 = load i64, i64* %208, align 8
  %210 = icmp ult i64 %209, 11
  br i1 %210, label %211, label %216

211:                                              ; preds = %205
  %212 = bitcast %"class.v8_inspector::String16"* %9 to i16*
  %213 = trunc i64 %209 to i8
  %214 = bitcast %"class.v8_inspector::String16"* %9 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %215 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %214, i64 0, i32 1, i32 1
  store i8 %213, i8* %215, align 1
  br label %233

216:                                              ; preds = %205
  %217 = icmp ugt i64 %209, 9223372036854775791
  br i1 %217, label %218, label %220

218:                                              ; preds = %216
  %219 = bitcast %"class.v8_inspector::String16"* %9 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %219) #10
  unreachable

220:                                              ; preds = %216
  %221 = add nuw nsw i64 %209, 8
  %222 = and i64 %221, -8
  %223 = icmp slt i64 %222, 0
  br i1 %223, label %224, label %225

224:                                              ; preds = %220
  call void @abort() #10
  unreachable

225:                                              ; preds = %220
  %226 = shl i64 %222, 1
  %227 = call i8* @_Znwm(i64 %226) #9
  %228 = bitcast i8* %227 to i16*
  %229 = bitcast %"class.v8_inspector::String16"* %9 to i8**
  store i8* %227, i8** %229, align 8
  %230 = or i64 %222, -9223372036854775808
  %231 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %230, i64* %231, align 8
  %232 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %209, i64* %232, align 8
  br label %233

233:                                              ; preds = %225, %211
  %234 = phi i16* [ %212, %211 ], [ %228, %225 ]
  %235 = add nuw nsw i64 %209, 1
  %236 = add i64 %209, 1
  %237 = icmp ult i64 %236, 16
  br i1 %237, label %327, label %238

238:                                              ; preds = %233
  %239 = add i64 %209, 1
  %240 = getelementptr i16, i16* %234, i64 %239
  %241 = getelementptr i16, i16* %207, i64 %239
  %242 = icmp ult i16* %234, %241
  %243 = icmp ult i16* %207, %240
  %244 = and i1 %242, %243
  br i1 %244, label %327, label %245

245:                                              ; preds = %238
  %246 = and i64 %236, -16
  %247 = getelementptr i16, i16* %234, i64 %246
  %248 = sub i64 %235, %246
  %249 = getelementptr i16, i16* %207, i64 %246
  %250 = add i64 %246, -16
  %251 = lshr exact i64 %250, 4
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 3
  %254 = icmp ult i64 %250, 48
  br i1 %254, label %306, label %255

255:                                              ; preds = %245
  %256 = sub nsw i64 %252, %253
  br label %257

257:                                              ; preds = %257, %255
  %258 = phi i64 [ 0, %255 ], [ %303, %257 ]
  %259 = phi i64 [ %256, %255 ], [ %304, %257 ]
  %260 = getelementptr i16, i16* %234, i64 %258
  %261 = getelementptr i16, i16* %207, i64 %258
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 2, !alias.scope !26
  %264 = getelementptr i16, i16* %261, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 2, !alias.scope !26
  %267 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %267, align 2, !alias.scope !29, !noalias !26
  %268 = getelementptr i16, i16* %260, i64 8
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %266, <8 x i16>* %269, align 2, !alias.scope !29, !noalias !26
  %270 = or i64 %258, 16
  %271 = getelementptr i16, i16* %234, i64 %270
  %272 = getelementptr i16, i16* %207, i64 %270
  %273 = bitcast i16* %272 to <8 x i16>*
  %274 = load <8 x i16>, <8 x i16>* %273, align 2, !alias.scope !26
  %275 = getelementptr i16, i16* %272, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  %277 = load <8 x i16>, <8 x i16>* %276, align 2, !alias.scope !26
  %278 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %278, align 2, !alias.scope !29, !noalias !26
  %279 = getelementptr i16, i16* %271, i64 8
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %277, <8 x i16>* %280, align 2, !alias.scope !29, !noalias !26
  %281 = or i64 %258, 32
  %282 = getelementptr i16, i16* %234, i64 %281
  %283 = getelementptr i16, i16* %207, i64 %281
  %284 = bitcast i16* %283 to <8 x i16>*
  %285 = load <8 x i16>, <8 x i16>* %284, align 2, !alias.scope !26
  %286 = getelementptr i16, i16* %283, i64 8
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 2, !alias.scope !26
  %289 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %289, align 2, !alias.scope !29, !noalias !26
  %290 = getelementptr i16, i16* %282, i64 8
  %291 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %291, align 2, !alias.scope !29, !noalias !26
  %292 = or i64 %258, 48
  %293 = getelementptr i16, i16* %234, i64 %292
  %294 = getelementptr i16, i16* %207, i64 %292
  %295 = bitcast i16* %294 to <8 x i16>*
  %296 = load <8 x i16>, <8 x i16>* %295, align 2, !alias.scope !26
  %297 = getelementptr i16, i16* %294, i64 8
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 2, !alias.scope !26
  %300 = bitcast i16* %293 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %300, align 2, !alias.scope !29, !noalias !26
  %301 = getelementptr i16, i16* %293, i64 8
  %302 = bitcast i16* %301 to <8 x i16>*
  store <8 x i16> %299, <8 x i16>* %302, align 2, !alias.scope !29, !noalias !26
  %303 = add i64 %258, 64
  %304 = add i64 %259, -4
  %305 = icmp eq i64 %304, 0
  br i1 %305, label %306, label %257, !llvm.loop !31

306:                                              ; preds = %257, %245
  %307 = phi i64 [ 0, %245 ], [ %303, %257 ]
  %308 = icmp eq i64 %253, 0
  br i1 %308, label %325, label %309

309:                                              ; preds = %306, %309
  %310 = phi i64 [ %322, %309 ], [ %307, %306 ]
  %311 = phi i64 [ %323, %309 ], [ %253, %306 ]
  %312 = getelementptr i16, i16* %234, i64 %310
  %313 = getelementptr i16, i16* %207, i64 %310
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 2, !alias.scope !26
  %316 = getelementptr i16, i16* %313, i64 8
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !26
  %319 = bitcast i16* %312 to <8 x i16>*
  store <8 x i16> %315, <8 x i16>* %319, align 2, !alias.scope !29, !noalias !26
  %320 = getelementptr i16, i16* %312, i64 8
  %321 = bitcast i16* %320 to <8 x i16>*
  store <8 x i16> %318, <8 x i16>* %321, align 2, !alias.scope !29, !noalias !26
  %322 = add i64 %310, 16
  %323 = add i64 %311, -1
  %324 = icmp eq i64 %323, 0
  br i1 %324, label %325, label %309, !llvm.loop !32

325:                                              ; preds = %309, %306
  %326 = icmp eq i64 %236, %246
  br i1 %326, label %380, label %327

327:                                              ; preds = %325, %238, %233
  %328 = phi i16* [ %234, %238 ], [ %234, %233 ], [ %247, %325 ]
  %329 = phi i64 [ %235, %238 ], [ %235, %233 ], [ %248, %325 ]
  %330 = phi i16* [ %207, %238 ], [ %207, %233 ], [ %249, %325 ]
  %331 = add i64 %329, -1
  %332 = and i64 %329, 7
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %345, label %334

334:                                              ; preds = %327, %334
  %335 = phi i16* [ %341, %334 ], [ %328, %327 ]
  %336 = phi i64 [ %340, %334 ], [ %329, %327 ]
  %337 = phi i16* [ %342, %334 ], [ %330, %327 ]
  %338 = phi i64 [ %343, %334 ], [ %332, %327 ]
  %339 = load i16, i16* %337, align 2
  store i16 %339, i16* %335, align 2
  %340 = add i64 %336, -1
  %341 = getelementptr inbounds i16, i16* %335, i64 1
  %342 = getelementptr inbounds i16, i16* %337, i64 1
  %343 = add i64 %338, -1
  %344 = icmp eq i64 %343, 0
  br i1 %344, label %345, label %334, !llvm.loop !33

345:                                              ; preds = %334, %327
  %346 = phi i16* [ %328, %327 ], [ %341, %334 ]
  %347 = phi i64 [ %329, %327 ], [ %340, %334 ]
  %348 = phi i16* [ %330, %327 ], [ %342, %334 ]
  %349 = icmp ult i64 %331, 7
  br i1 %349, label %380, label %350

350:                                              ; preds = %345, %350
  %351 = phi i16* [ %377, %350 ], [ %346, %345 ]
  %352 = phi i64 [ %376, %350 ], [ %347, %345 ]
  %353 = phi i16* [ %378, %350 ], [ %348, %345 ]
  %354 = load i16, i16* %353, align 2
  store i16 %354, i16* %351, align 2
  %355 = getelementptr inbounds i16, i16* %351, i64 1
  %356 = getelementptr inbounds i16, i16* %353, i64 1
  %357 = load i16, i16* %356, align 2
  store i16 %357, i16* %355, align 2
  %358 = getelementptr inbounds i16, i16* %351, i64 2
  %359 = getelementptr inbounds i16, i16* %353, i64 2
  %360 = load i16, i16* %359, align 2
  store i16 %360, i16* %358, align 2
  %361 = getelementptr inbounds i16, i16* %351, i64 3
  %362 = getelementptr inbounds i16, i16* %353, i64 3
  %363 = load i16, i16* %362, align 2
  store i16 %363, i16* %361, align 2
  %364 = getelementptr inbounds i16, i16* %351, i64 4
  %365 = getelementptr inbounds i16, i16* %353, i64 4
  %366 = load i16, i16* %365, align 2
  store i16 %366, i16* %364, align 2
  %367 = getelementptr inbounds i16, i16* %351, i64 5
  %368 = getelementptr inbounds i16, i16* %353, i64 5
  %369 = load i16, i16* %368, align 2
  store i16 %369, i16* %367, align 2
  %370 = getelementptr inbounds i16, i16* %351, i64 6
  %371 = getelementptr inbounds i16, i16* %353, i64 6
  %372 = load i16, i16* %371, align 2
  store i16 %372, i16* %370, align 2
  %373 = getelementptr inbounds i16, i16* %351, i64 7
  %374 = getelementptr inbounds i16, i16* %353, i64 7
  %375 = load i16, i16* %374, align 2
  store i16 %375, i16* %373, align 2
  %376 = add i64 %352, -8
  %377 = getelementptr inbounds i16, i16* %351, i64 8
  %378 = getelementptr inbounds i16, i16* %353, i64 8
  %379 = icmp eq i64 %376, 0
  br i1 %379, label %380, label %350, !llvm.loop !34

380:                                              ; preds = %345, %350, %325, %202
  %381 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %9, i64 0, i32 1
  %382 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %3, i64 0, i32 1
  %383 = load i64, i64* %382, align 8
  store i64 %383, i64* %381, align 8
  %384 = bitcast %"class.v8_inspector::String16"* %5 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %385 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %384, i64 0, i32 1, i32 1
  %386 = load i8, i8* %385, align 1
  %387 = icmp slt i8 %386, 0
  br i1 %387, label %391, label %388

388:                                              ; preds = %380
  %389 = bitcast %"class.v8_inspector::String16"* %10 to i8*
  %390 = bitcast %"class.v8_inspector::String16"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %389, i8* align 8 %390, i64 24, i1 false) #8
  br label %566

391:                                              ; preds = %380
  %392 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %393 = load i16*, i16** %392, align 8
  %394 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %395 = load i64, i64* %394, align 8
  %396 = icmp ult i64 %395, 11
  br i1 %396, label %397, label %402

397:                                              ; preds = %391
  %398 = bitcast %"class.v8_inspector::String16"* %10 to i16*
  %399 = trunc i64 %395 to i8
  %400 = bitcast %"class.v8_inspector::String16"* %10 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %401 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %400, i64 0, i32 1, i32 1
  store i8 %399, i8* %401, align 1
  br label %419

402:                                              ; preds = %391
  %403 = icmp ugt i64 %395, 9223372036854775791
  br i1 %403, label %404, label %406

404:                                              ; preds = %402
  %405 = bitcast %"class.v8_inspector::String16"* %10 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %405) #10
  unreachable

406:                                              ; preds = %402
  %407 = add nuw nsw i64 %395, 8
  %408 = and i64 %407, -8
  %409 = icmp slt i64 %408, 0
  br i1 %409, label %410, label %411

410:                                              ; preds = %406
  call void @abort() #10
  unreachable

411:                                              ; preds = %406
  %412 = shl i64 %408, 1
  %413 = call i8* @_Znwm(i64 %412) #9
  %414 = bitcast i8* %413 to i16*
  %415 = bitcast %"class.v8_inspector::String16"* %10 to i8**
  store i8* %413, i8** %415, align 8
  %416 = or i64 %408, -9223372036854775808
  %417 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %416, i64* %417, align 8
  %418 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %395, i64* %418, align 8
  br label %419

419:                                              ; preds = %411, %397
  %420 = phi i16* [ %398, %397 ], [ %414, %411 ]
  %421 = add nuw nsw i64 %395, 1
  %422 = add i64 %395, 1
  %423 = icmp ult i64 %422, 16
  br i1 %423, label %513, label %424

424:                                              ; preds = %419
  %425 = add i64 %395, 1
  %426 = getelementptr i16, i16* %420, i64 %425
  %427 = getelementptr i16, i16* %393, i64 %425
  %428 = icmp ult i16* %420, %427
  %429 = icmp ult i16* %393, %426
  %430 = and i1 %428, %429
  br i1 %430, label %513, label %431

431:                                              ; preds = %424
  %432 = and i64 %422, -16
  %433 = getelementptr i16, i16* %420, i64 %432
  %434 = sub i64 %421, %432
  %435 = getelementptr i16, i16* %393, i64 %432
  %436 = add i64 %432, -16
  %437 = lshr exact i64 %436, 4
  %438 = add nuw nsw i64 %437, 1
  %439 = and i64 %438, 3
  %440 = icmp ult i64 %436, 48
  br i1 %440, label %492, label %441

441:                                              ; preds = %431
  %442 = sub nsw i64 %438, %439
  br label %443

443:                                              ; preds = %443, %441
  %444 = phi i64 [ 0, %441 ], [ %489, %443 ]
  %445 = phi i64 [ %442, %441 ], [ %490, %443 ]
  %446 = getelementptr i16, i16* %420, i64 %444
  %447 = getelementptr i16, i16* %393, i64 %444
  %448 = bitcast i16* %447 to <8 x i16>*
  %449 = load <8 x i16>, <8 x i16>* %448, align 2, !alias.scope !35
  %450 = getelementptr i16, i16* %447, i64 8
  %451 = bitcast i16* %450 to <8 x i16>*
  %452 = load <8 x i16>, <8 x i16>* %451, align 2, !alias.scope !35
  %453 = bitcast i16* %446 to <8 x i16>*
  store <8 x i16> %449, <8 x i16>* %453, align 2, !alias.scope !38, !noalias !35
  %454 = getelementptr i16, i16* %446, i64 8
  %455 = bitcast i16* %454 to <8 x i16>*
  store <8 x i16> %452, <8 x i16>* %455, align 2, !alias.scope !38, !noalias !35
  %456 = or i64 %444, 16
  %457 = getelementptr i16, i16* %420, i64 %456
  %458 = getelementptr i16, i16* %393, i64 %456
  %459 = bitcast i16* %458 to <8 x i16>*
  %460 = load <8 x i16>, <8 x i16>* %459, align 2, !alias.scope !35
  %461 = getelementptr i16, i16* %458, i64 8
  %462 = bitcast i16* %461 to <8 x i16>*
  %463 = load <8 x i16>, <8 x i16>* %462, align 2, !alias.scope !35
  %464 = bitcast i16* %457 to <8 x i16>*
  store <8 x i16> %460, <8 x i16>* %464, align 2, !alias.scope !38, !noalias !35
  %465 = getelementptr i16, i16* %457, i64 8
  %466 = bitcast i16* %465 to <8 x i16>*
  store <8 x i16> %463, <8 x i16>* %466, align 2, !alias.scope !38, !noalias !35
  %467 = or i64 %444, 32
  %468 = getelementptr i16, i16* %420, i64 %467
  %469 = getelementptr i16, i16* %393, i64 %467
  %470 = bitcast i16* %469 to <8 x i16>*
  %471 = load <8 x i16>, <8 x i16>* %470, align 2, !alias.scope !35
  %472 = getelementptr i16, i16* %469, i64 8
  %473 = bitcast i16* %472 to <8 x i16>*
  %474 = load <8 x i16>, <8 x i16>* %473, align 2, !alias.scope !35
  %475 = bitcast i16* %468 to <8 x i16>*
  store <8 x i16> %471, <8 x i16>* %475, align 2, !alias.scope !38, !noalias !35
  %476 = getelementptr i16, i16* %468, i64 8
  %477 = bitcast i16* %476 to <8 x i16>*
  store <8 x i16> %474, <8 x i16>* %477, align 2, !alias.scope !38, !noalias !35
  %478 = or i64 %444, 48
  %479 = getelementptr i16, i16* %420, i64 %478
  %480 = getelementptr i16, i16* %393, i64 %478
  %481 = bitcast i16* %480 to <8 x i16>*
  %482 = load <8 x i16>, <8 x i16>* %481, align 2, !alias.scope !35
  %483 = getelementptr i16, i16* %480, i64 8
  %484 = bitcast i16* %483 to <8 x i16>*
  %485 = load <8 x i16>, <8 x i16>* %484, align 2, !alias.scope !35
  %486 = bitcast i16* %479 to <8 x i16>*
  store <8 x i16> %482, <8 x i16>* %486, align 2, !alias.scope !38, !noalias !35
  %487 = getelementptr i16, i16* %479, i64 8
  %488 = bitcast i16* %487 to <8 x i16>*
  store <8 x i16> %485, <8 x i16>* %488, align 2, !alias.scope !38, !noalias !35
  %489 = add i64 %444, 64
  %490 = add i64 %445, -4
  %491 = icmp eq i64 %490, 0
  br i1 %491, label %492, label %443, !llvm.loop !40

492:                                              ; preds = %443, %431
  %493 = phi i64 [ 0, %431 ], [ %489, %443 ]
  %494 = icmp eq i64 %439, 0
  br i1 %494, label %511, label %495

495:                                              ; preds = %492, %495
  %496 = phi i64 [ %508, %495 ], [ %493, %492 ]
  %497 = phi i64 [ %509, %495 ], [ %439, %492 ]
  %498 = getelementptr i16, i16* %420, i64 %496
  %499 = getelementptr i16, i16* %393, i64 %496
  %500 = bitcast i16* %499 to <8 x i16>*
  %501 = load <8 x i16>, <8 x i16>* %500, align 2, !alias.scope !35
  %502 = getelementptr i16, i16* %499, i64 8
  %503 = bitcast i16* %502 to <8 x i16>*
  %504 = load <8 x i16>, <8 x i16>* %503, align 2, !alias.scope !35
  %505 = bitcast i16* %498 to <8 x i16>*
  store <8 x i16> %501, <8 x i16>* %505, align 2, !alias.scope !38, !noalias !35
  %506 = getelementptr i16, i16* %498, i64 8
  %507 = bitcast i16* %506 to <8 x i16>*
  store <8 x i16> %504, <8 x i16>* %507, align 2, !alias.scope !38, !noalias !35
  %508 = add i64 %496, 16
  %509 = add i64 %497, -1
  %510 = icmp eq i64 %509, 0
  br i1 %510, label %511, label %495, !llvm.loop !41

511:                                              ; preds = %495, %492
  %512 = icmp eq i64 %422, %432
  br i1 %512, label %566, label %513

513:                                              ; preds = %511, %424, %419
  %514 = phi i16* [ %420, %424 ], [ %420, %419 ], [ %433, %511 ]
  %515 = phi i64 [ %421, %424 ], [ %421, %419 ], [ %434, %511 ]
  %516 = phi i16* [ %393, %424 ], [ %393, %419 ], [ %435, %511 ]
  %517 = add i64 %515, -1
  %518 = and i64 %515, 7
  %519 = icmp eq i64 %518, 0
  br i1 %519, label %531, label %520

520:                                              ; preds = %513, %520
  %521 = phi i16* [ %527, %520 ], [ %514, %513 ]
  %522 = phi i64 [ %526, %520 ], [ %515, %513 ]
  %523 = phi i16* [ %528, %520 ], [ %516, %513 ]
  %524 = phi i64 [ %529, %520 ], [ %518, %513 ]
  %525 = load i16, i16* %523, align 2
  store i16 %525, i16* %521, align 2
  %526 = add i64 %522, -1
  %527 = getelementptr inbounds i16, i16* %521, i64 1
  %528 = getelementptr inbounds i16, i16* %523, i64 1
  %529 = add i64 %524, -1
  %530 = icmp eq i64 %529, 0
  br i1 %530, label %531, label %520, !llvm.loop !42

531:                                              ; preds = %520, %513
  %532 = phi i16* [ %514, %513 ], [ %527, %520 ]
  %533 = phi i64 [ %515, %513 ], [ %526, %520 ]
  %534 = phi i16* [ %516, %513 ], [ %528, %520 ]
  %535 = icmp ult i64 %517, 7
  br i1 %535, label %566, label %536

536:                                              ; preds = %531, %536
  %537 = phi i16* [ %563, %536 ], [ %532, %531 ]
  %538 = phi i64 [ %562, %536 ], [ %533, %531 ]
  %539 = phi i16* [ %564, %536 ], [ %534, %531 ]
  %540 = load i16, i16* %539, align 2
  store i16 %540, i16* %537, align 2
  %541 = getelementptr inbounds i16, i16* %537, i64 1
  %542 = getelementptr inbounds i16, i16* %539, i64 1
  %543 = load i16, i16* %542, align 2
  store i16 %543, i16* %541, align 2
  %544 = getelementptr inbounds i16, i16* %537, i64 2
  %545 = getelementptr inbounds i16, i16* %539, i64 2
  %546 = load i16, i16* %545, align 2
  store i16 %546, i16* %544, align 2
  %547 = getelementptr inbounds i16, i16* %537, i64 3
  %548 = getelementptr inbounds i16, i16* %539, i64 3
  %549 = load i16, i16* %548, align 2
  store i16 %549, i16* %547, align 2
  %550 = getelementptr inbounds i16, i16* %537, i64 4
  %551 = getelementptr inbounds i16, i16* %539, i64 4
  %552 = load i16, i16* %551, align 2
  store i16 %552, i16* %550, align 2
  %553 = getelementptr inbounds i16, i16* %537, i64 5
  %554 = getelementptr inbounds i16, i16* %539, i64 5
  %555 = load i16, i16* %554, align 2
  store i16 %555, i16* %553, align 2
  %556 = getelementptr inbounds i16, i16* %537, i64 6
  %557 = getelementptr inbounds i16, i16* %539, i64 6
  %558 = load i16, i16* %557, align 2
  store i16 %558, i16* %556, align 2
  %559 = getelementptr inbounds i16, i16* %537, i64 7
  %560 = getelementptr inbounds i16, i16* %539, i64 7
  %561 = load i16, i16* %560, align 2
  store i16 %561, i16* %559, align 2
  %562 = add i64 %538, -8
  %563 = getelementptr inbounds i16, i16* %537, i64 8
  %564 = getelementptr inbounds i16, i16* %539, i64 8
  %565 = icmp eq i64 %562, 0
  br i1 %565, label %566, label %536, !llvm.loop !43

566:                                              ; preds = %531, %536, %511, %388
  %567 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %10, i64 0, i32 1
  %568 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %5, i64 0, i32 1
  %569 = load i64, i64* %568, align 8
  store i64 %569, i64* %567, align 8
  call void @_ZN12v8_inspector15String16Builder9appendAllINS_8String16EJPKcS2_S4_S2_EEEvT_DpT0_(%"class.v8_inspector::String16Builder"* nonnull %7, %"class.v8_inspector::String16"* nonnull %8, i8* %2, %"class.v8_inspector::String16"* nonnull %9, i8* %4, %"class.v8_inspector::String16"* nonnull %10)
  %570 = bitcast %"class.v8_inspector::String16"* %10 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %571 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %570, i64 0, i32 1, i32 1
  %572 = load i8, i8* %571, align 1
  %573 = icmp slt i8 %572, 0
  br i1 %573, label %574, label %577

574:                                              ; preds = %566
  %575 = bitcast %"class.v8_inspector::String16"* %10 to i8**
  %576 = load i8*, i8** %575, align 8
  call void @_ZdlPv(i8* %576) #9
  br label %577

577:                                              ; preds = %566, %574
  %578 = bitcast %"class.v8_inspector::String16"* %9 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %579 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %578, i64 0, i32 1, i32 1
  %580 = load i8, i8* %579, align 1
  %581 = icmp slt i8 %580, 0
  br i1 %581, label %582, label %585

582:                                              ; preds = %577
  %583 = bitcast %"class.v8_inspector::String16"* %9 to i8**
  %584 = load i8*, i8** %583, align 8
  call void @_ZdlPv(i8* %584) #9
  br label %585

585:                                              ; preds = %577, %582
  %586 = bitcast %"class.v8_inspector::String16"* %8 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %587 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %586, i64 0, i32 1, i32 1
  %588 = load i8, i8* %587, align 1
  %589 = icmp slt i8 %588, 0
  br i1 %589, label %590, label %593

590:                                              ; preds = %585
  %591 = bitcast %"class.v8_inspector::String16"* %8 to i8**
  %592 = load i8*, i8** %591, align 8
  call void @_ZdlPv(i8* %592) #9
  br label %593

593:                                              ; preds = %585, %590
  call void @_ZN12v8_inspector15String16Builder8toStringEv(%"class.v8_inspector::String16"* sret %0, %"class.v8_inspector::String16Builder"* nonnull %7) #8
  %594 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %7, i64 0, i32 0, i32 0, i32 0
  %595 = load i16*, i16** %594, align 8
  %596 = icmp eq i16* %595, null
  br i1 %596, label %602, label %597

597:                                              ; preds = %593
  %598 = ptrtoint i16* %595 to i64
  %599 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %7, i64 0, i32 0, i32 0, i32 1
  %600 = bitcast i16** %599 to i64*
  store i64 %598, i64* %600, align 8
  %601 = bitcast i16* %595 to i8*
  call void @_ZdlPv(i8* %601) #9
  br label %602

602:                                              ; preds = %593, %597
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #8
  ret void
}

declare void @_ZN12v8_inspector8String1613fromInteger64El(%"class.v8_inspector::String16"* sret, i64) local_unnamed_addr #3

declare void @_ZN12v8_inspector8String1611fromIntegerEi(%"class.v8_inspector::String16"* sret, i32) local_unnamed_addr #3

declare void @_ZN12v8_inspector15String16BuilderC1Ev(%"class.v8_inspector::String16Builder"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12v8_inspector15String16Builder9appendAllINS_8String16EJPKcS2_S4_S2_EEEvT_DpT0_(%"class.v8_inspector::String16Builder"*, %"class.v8_inspector::String16"*, i8*, %"class.v8_inspector::String16"*, i8*, %"class.v8_inspector::String16"*) local_unnamed_addr #1 comdat align 2 {
  %7 = alloca %"class.v8_inspector::String16", align 8
  %8 = alloca %"class.v8_inspector::String16", align 8
  tail call void @_ZN12v8_inspector15String16Builder6appendERKNS_8String16E(%"class.v8_inspector::String16Builder"* %0, %"class.v8_inspector::String16"* dereferenceable(32) %1) #8
  %9 = bitcast %"class.v8_inspector::String16"* %3 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %9, i64 0, i32 1, i32 1
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %6
  %14 = bitcast %"class.v8_inspector::String16"* %7 to i8*
  %15 = bitcast %"class.v8_inspector::String16"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %14, i8* align 8 %15, i64 24, i1 false) #8
  br label %191

16:                                               ; preds = %6
  %17 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i16*, i16** %17, align 8
  %19 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp ult i64 %20, 11
  br i1 %21, label %22, label %27

22:                                               ; preds = %16
  %23 = bitcast %"class.v8_inspector::String16"* %7 to i16*
  %24 = trunc i64 %20 to i8
  %25 = bitcast %"class.v8_inspector::String16"* %7 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %25, i64 0, i32 1, i32 1
  store i8 %24, i8* %26, align 1
  br label %44

27:                                               ; preds = %16
  %28 = icmp ugt i64 %20, 9223372036854775791
  br i1 %28, label %29, label %31

29:                                               ; preds = %27
  %30 = bitcast %"class.v8_inspector::String16"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %30) #10
  unreachable

31:                                               ; preds = %27
  %32 = add nuw nsw i64 %20, 8
  %33 = and i64 %32, -8
  %34 = icmp slt i64 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %31
  tail call void @abort() #10
  unreachable

36:                                               ; preds = %31
  %37 = shl i64 %33, 1
  %38 = tail call i8* @_Znwm(i64 %37) #9
  %39 = bitcast i8* %38 to i16*
  %40 = bitcast %"class.v8_inspector::String16"* %7 to i8**
  store i8* %38, i8** %40, align 8
  %41 = or i64 %33, -9223372036854775808
  %42 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %41, i64* %42, align 8
  %43 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %20, i64* %43, align 8
  br label %44

44:                                               ; preds = %36, %22
  %45 = phi i16* [ %23, %22 ], [ %39, %36 ]
  %46 = add nuw nsw i64 %20, 1
  %47 = add i64 %20, 1
  %48 = icmp ult i64 %47, 16
  br i1 %48, label %138, label %49

49:                                               ; preds = %44
  %50 = add i64 %20, 1
  %51 = getelementptr i16, i16* %45, i64 %50
  %52 = getelementptr i16, i16* %18, i64 %50
  %53 = icmp ult i16* %45, %52
  %54 = icmp ult i16* %18, %51
  %55 = and i1 %53, %54
  br i1 %55, label %138, label %56

56:                                               ; preds = %49
  %57 = and i64 %47, -16
  %58 = getelementptr i16, i16* %45, i64 %57
  %59 = sub i64 %46, %57
  %60 = getelementptr i16, i16* %18, i64 %57
  %61 = add i64 %57, -16
  %62 = lshr exact i64 %61, 4
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 3
  %65 = icmp ult i64 %61, 48
  br i1 %65, label %117, label %66

66:                                               ; preds = %56
  %67 = sub nsw i64 %63, %64
  br label %68

68:                                               ; preds = %68, %66
  %69 = phi i64 [ 0, %66 ], [ %114, %68 ]
  %70 = phi i64 [ %67, %66 ], [ %115, %68 ]
  %71 = getelementptr i16, i16* %45, i64 %69
  %72 = getelementptr i16, i16* %18, i64 %69
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !44
  %75 = getelementptr i16, i16* %72, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2, !alias.scope !44
  %78 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %78, align 2, !alias.scope !47, !noalias !44
  %79 = getelementptr i16, i16* %71, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %80, align 2, !alias.scope !47, !noalias !44
  %81 = or i64 %69, 16
  %82 = getelementptr i16, i16* %45, i64 %81
  %83 = getelementptr i16, i16* %18, i64 %81
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !44
  %86 = getelementptr i16, i16* %83, i64 8
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !44
  %89 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %89, align 2, !alias.scope !47, !noalias !44
  %90 = getelementptr i16, i16* %82, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %91, align 2, !alias.scope !47, !noalias !44
  %92 = or i64 %69, 32
  %93 = getelementptr i16, i16* %45, i64 %92
  %94 = getelementptr i16, i16* %18, i64 %92
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !44
  %97 = getelementptr i16, i16* %94, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2, !alias.scope !44
  %100 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %100, align 2, !alias.scope !47, !noalias !44
  %101 = getelementptr i16, i16* %93, i64 8
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %102, align 2, !alias.scope !47, !noalias !44
  %103 = or i64 %69, 48
  %104 = getelementptr i16, i16* %45, i64 %103
  %105 = getelementptr i16, i16* %18, i64 %103
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !44
  %108 = getelementptr i16, i16* %105, i64 8
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !44
  %111 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %111, align 2, !alias.scope !47, !noalias !44
  %112 = getelementptr i16, i16* %104, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %113, align 2, !alias.scope !47, !noalias !44
  %114 = add i64 %69, 64
  %115 = add i64 %70, -4
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %68, !llvm.loop !49

117:                                              ; preds = %68, %56
  %118 = phi i64 [ 0, %56 ], [ %114, %68 ]
  %119 = icmp eq i64 %64, 0
  br i1 %119, label %136, label %120

120:                                              ; preds = %117, %120
  %121 = phi i64 [ %133, %120 ], [ %118, %117 ]
  %122 = phi i64 [ %134, %120 ], [ %64, %117 ]
  %123 = getelementptr i16, i16* %45, i64 %121
  %124 = getelementptr i16, i16* %18, i64 %121
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2, !alias.scope !44
  %127 = getelementptr i16, i16* %124, i64 8
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2, !alias.scope !44
  %130 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %130, align 2, !alias.scope !47, !noalias !44
  %131 = getelementptr i16, i16* %123, i64 8
  %132 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %129, <8 x i16>* %132, align 2, !alias.scope !47, !noalias !44
  %133 = add i64 %121, 16
  %134 = add i64 %122, -1
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %136, label %120, !llvm.loop !50

136:                                              ; preds = %120, %117
  %137 = icmp eq i64 %47, %57
  br i1 %137, label %191, label %138

138:                                              ; preds = %136, %49, %44
  %139 = phi i16* [ %45, %49 ], [ %45, %44 ], [ %58, %136 ]
  %140 = phi i64 [ %46, %49 ], [ %46, %44 ], [ %59, %136 ]
  %141 = phi i16* [ %18, %49 ], [ %18, %44 ], [ %60, %136 ]
  %142 = add i64 %140, -1
  %143 = and i64 %140, 7
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %156, label %145

145:                                              ; preds = %138, %145
  %146 = phi i16* [ %152, %145 ], [ %139, %138 ]
  %147 = phi i64 [ %151, %145 ], [ %140, %138 ]
  %148 = phi i16* [ %153, %145 ], [ %141, %138 ]
  %149 = phi i64 [ %154, %145 ], [ %143, %138 ]
  %150 = load i16, i16* %148, align 2
  store i16 %150, i16* %146, align 2
  %151 = add i64 %147, -1
  %152 = getelementptr inbounds i16, i16* %146, i64 1
  %153 = getelementptr inbounds i16, i16* %148, i64 1
  %154 = add i64 %149, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %145, !llvm.loop !51

156:                                              ; preds = %145, %138
  %157 = phi i16* [ %139, %138 ], [ %152, %145 ]
  %158 = phi i64 [ %140, %138 ], [ %151, %145 ]
  %159 = phi i16* [ %141, %138 ], [ %153, %145 ]
  %160 = icmp ult i64 %142, 7
  br i1 %160, label %191, label %161

161:                                              ; preds = %156, %161
  %162 = phi i16* [ %188, %161 ], [ %157, %156 ]
  %163 = phi i64 [ %187, %161 ], [ %158, %156 ]
  %164 = phi i16* [ %189, %161 ], [ %159, %156 ]
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %162, align 2
  %166 = getelementptr inbounds i16, i16* %162, i64 1
  %167 = getelementptr inbounds i16, i16* %164, i64 1
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %162, i64 2
  %170 = getelementptr inbounds i16, i16* %164, i64 2
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %162, i64 3
  %173 = getelementptr inbounds i16, i16* %164, i64 3
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %162, i64 4
  %176 = getelementptr inbounds i16, i16* %164, i64 4
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %162, i64 5
  %179 = getelementptr inbounds i16, i16* %164, i64 5
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %162, i64 6
  %182 = getelementptr inbounds i16, i16* %164, i64 6
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds i16, i16* %162, i64 7
  %185 = getelementptr inbounds i16, i16* %164, i64 7
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = add i64 %163, -8
  %188 = getelementptr inbounds i16, i16* %162, i64 8
  %189 = getelementptr inbounds i16, i16* %164, i64 8
  %190 = icmp eq i64 %187, 0
  br i1 %190, label %191, label %161, !llvm.loop !52

191:                                              ; preds = %156, %161, %136, %13
  %192 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %7, i64 0, i32 1
  %193 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %3, i64 0, i32 1
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %192, align 8
  %195 = bitcast %"class.v8_inspector::String16"* %5 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %196 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %195, i64 0, i32 1, i32 1
  %197 = load i8, i8* %196, align 1
  %198 = icmp slt i8 %197, 0
  br i1 %198, label %202, label %199

199:                                              ; preds = %191
  %200 = bitcast %"class.v8_inspector::String16"* %8 to i8*
  %201 = bitcast %"class.v8_inspector::String16"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %200, i8* align 8 %201, i64 24, i1 false) #8
  br label %377

202:                                              ; preds = %191
  %203 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %204 = load i16*, i16** %203, align 8
  %205 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %206 = load i64, i64* %205, align 8
  %207 = icmp ult i64 %206, 11
  br i1 %207, label %208, label %213

208:                                              ; preds = %202
  %209 = bitcast %"class.v8_inspector::String16"* %8 to i16*
  %210 = trunc i64 %206 to i8
  %211 = bitcast %"class.v8_inspector::String16"* %8 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %212 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %211, i64 0, i32 1, i32 1
  store i8 %210, i8* %212, align 1
  br label %230

213:                                              ; preds = %202
  %214 = icmp ugt i64 %206, 9223372036854775791
  br i1 %214, label %215, label %217

215:                                              ; preds = %213
  %216 = bitcast %"class.v8_inspector::String16"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %216) #10
  unreachable

217:                                              ; preds = %213
  %218 = add nuw nsw i64 %206, 8
  %219 = and i64 %218, -8
  %220 = icmp slt i64 %219, 0
  br i1 %220, label %221, label %222

221:                                              ; preds = %217
  tail call void @abort() #10
  unreachable

222:                                              ; preds = %217
  %223 = shl i64 %219, 1
  %224 = tail call i8* @_Znwm(i64 %223) #9
  %225 = bitcast i8* %224 to i16*
  %226 = bitcast %"class.v8_inspector::String16"* %8 to i8**
  store i8* %224, i8** %226, align 8
  %227 = or i64 %219, -9223372036854775808
  %228 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %227, i64* %228, align 8
  %229 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %206, i64* %229, align 8
  br label %230

230:                                              ; preds = %222, %208
  %231 = phi i16* [ %209, %208 ], [ %225, %222 ]
  %232 = add nuw nsw i64 %206, 1
  %233 = add i64 %206, 1
  %234 = icmp ult i64 %233, 16
  br i1 %234, label %324, label %235

235:                                              ; preds = %230
  %236 = add i64 %206, 1
  %237 = getelementptr i16, i16* %231, i64 %236
  %238 = getelementptr i16, i16* %204, i64 %236
  %239 = icmp ult i16* %231, %238
  %240 = icmp ult i16* %204, %237
  %241 = and i1 %239, %240
  br i1 %241, label %324, label %242

242:                                              ; preds = %235
  %243 = and i64 %233, -16
  %244 = getelementptr i16, i16* %231, i64 %243
  %245 = sub i64 %232, %243
  %246 = getelementptr i16, i16* %204, i64 %243
  %247 = add i64 %243, -16
  %248 = lshr exact i64 %247, 4
  %249 = add nuw nsw i64 %248, 1
  %250 = and i64 %249, 3
  %251 = icmp ult i64 %247, 48
  br i1 %251, label %303, label %252

252:                                              ; preds = %242
  %253 = sub nsw i64 %249, %250
  br label %254

254:                                              ; preds = %254, %252
  %255 = phi i64 [ 0, %252 ], [ %300, %254 ]
  %256 = phi i64 [ %253, %252 ], [ %301, %254 ]
  %257 = getelementptr i16, i16* %231, i64 %255
  %258 = getelementptr i16, i16* %204, i64 %255
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 2, !alias.scope !53
  %261 = getelementptr i16, i16* %258, i64 8
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 2, !alias.scope !53
  %264 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %260, <8 x i16>* %264, align 2, !alias.scope !56, !noalias !53
  %265 = getelementptr i16, i16* %257, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %266, align 2, !alias.scope !56, !noalias !53
  %267 = or i64 %255, 16
  %268 = getelementptr i16, i16* %231, i64 %267
  %269 = getelementptr i16, i16* %204, i64 %267
  %270 = bitcast i16* %269 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 2, !alias.scope !53
  %272 = getelementptr i16, i16* %269, i64 8
  %273 = bitcast i16* %272 to <8 x i16>*
  %274 = load <8 x i16>, <8 x i16>* %273, align 2, !alias.scope !53
  %275 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %271, <8 x i16>* %275, align 2, !alias.scope !56, !noalias !53
  %276 = getelementptr i16, i16* %268, i64 8
  %277 = bitcast i16* %276 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %277, align 2, !alias.scope !56, !noalias !53
  %278 = or i64 %255, 32
  %279 = getelementptr i16, i16* %231, i64 %278
  %280 = getelementptr i16, i16* %204, i64 %278
  %281 = bitcast i16* %280 to <8 x i16>*
  %282 = load <8 x i16>, <8 x i16>* %281, align 2, !alias.scope !53
  %283 = getelementptr i16, i16* %280, i64 8
  %284 = bitcast i16* %283 to <8 x i16>*
  %285 = load <8 x i16>, <8 x i16>* %284, align 2, !alias.scope !53
  %286 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %286, align 2, !alias.scope !56, !noalias !53
  %287 = getelementptr i16, i16* %279, i64 8
  %288 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %288, align 2, !alias.scope !56, !noalias !53
  %289 = or i64 %255, 48
  %290 = getelementptr i16, i16* %231, i64 %289
  %291 = getelementptr i16, i16* %204, i64 %289
  %292 = bitcast i16* %291 to <8 x i16>*
  %293 = load <8 x i16>, <8 x i16>* %292, align 2, !alias.scope !53
  %294 = getelementptr i16, i16* %291, i64 8
  %295 = bitcast i16* %294 to <8 x i16>*
  %296 = load <8 x i16>, <8 x i16>* %295, align 2, !alias.scope !53
  %297 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> %293, <8 x i16>* %297, align 2, !alias.scope !56, !noalias !53
  %298 = getelementptr i16, i16* %290, i64 8
  %299 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %299, align 2, !alias.scope !56, !noalias !53
  %300 = add i64 %255, 64
  %301 = add i64 %256, -4
  %302 = icmp eq i64 %301, 0
  br i1 %302, label %303, label %254, !llvm.loop !58

303:                                              ; preds = %254, %242
  %304 = phi i64 [ 0, %242 ], [ %300, %254 ]
  %305 = icmp eq i64 %250, 0
  br i1 %305, label %322, label %306

306:                                              ; preds = %303, %306
  %307 = phi i64 [ %319, %306 ], [ %304, %303 ]
  %308 = phi i64 [ %320, %306 ], [ %250, %303 ]
  %309 = getelementptr i16, i16* %231, i64 %307
  %310 = getelementptr i16, i16* %204, i64 %307
  %311 = bitcast i16* %310 to <8 x i16>*
  %312 = load <8 x i16>, <8 x i16>* %311, align 2, !alias.scope !53
  %313 = getelementptr i16, i16* %310, i64 8
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 2, !alias.scope !53
  %316 = bitcast i16* %309 to <8 x i16>*
  store <8 x i16> %312, <8 x i16>* %316, align 2, !alias.scope !56, !noalias !53
  %317 = getelementptr i16, i16* %309, i64 8
  %318 = bitcast i16* %317 to <8 x i16>*
  store <8 x i16> %315, <8 x i16>* %318, align 2, !alias.scope !56, !noalias !53
  %319 = add i64 %307, 16
  %320 = add i64 %308, -1
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %322, label %306, !llvm.loop !59

322:                                              ; preds = %306, %303
  %323 = icmp eq i64 %233, %243
  br i1 %323, label %377, label %324

324:                                              ; preds = %322, %235, %230
  %325 = phi i16* [ %231, %235 ], [ %231, %230 ], [ %244, %322 ]
  %326 = phi i64 [ %232, %235 ], [ %232, %230 ], [ %245, %322 ]
  %327 = phi i16* [ %204, %235 ], [ %204, %230 ], [ %246, %322 ]
  %328 = add i64 %326, -1
  %329 = and i64 %326, 7
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %342, label %331

331:                                              ; preds = %324, %331
  %332 = phi i16* [ %338, %331 ], [ %325, %324 ]
  %333 = phi i64 [ %337, %331 ], [ %326, %324 ]
  %334 = phi i16* [ %339, %331 ], [ %327, %324 ]
  %335 = phi i64 [ %340, %331 ], [ %329, %324 ]
  %336 = load i16, i16* %334, align 2
  store i16 %336, i16* %332, align 2
  %337 = add i64 %333, -1
  %338 = getelementptr inbounds i16, i16* %332, i64 1
  %339 = getelementptr inbounds i16, i16* %334, i64 1
  %340 = add i64 %335, -1
  %341 = icmp eq i64 %340, 0
  br i1 %341, label %342, label %331, !llvm.loop !60

342:                                              ; preds = %331, %324
  %343 = phi i16* [ %325, %324 ], [ %338, %331 ]
  %344 = phi i64 [ %326, %324 ], [ %337, %331 ]
  %345 = phi i16* [ %327, %324 ], [ %339, %331 ]
  %346 = icmp ult i64 %328, 7
  br i1 %346, label %377, label %347

347:                                              ; preds = %342, %347
  %348 = phi i16* [ %374, %347 ], [ %343, %342 ]
  %349 = phi i64 [ %373, %347 ], [ %344, %342 ]
  %350 = phi i16* [ %375, %347 ], [ %345, %342 ]
  %351 = load i16, i16* %350, align 2
  store i16 %351, i16* %348, align 2
  %352 = getelementptr inbounds i16, i16* %348, i64 1
  %353 = getelementptr inbounds i16, i16* %350, i64 1
  %354 = load i16, i16* %353, align 2
  store i16 %354, i16* %352, align 2
  %355 = getelementptr inbounds i16, i16* %348, i64 2
  %356 = getelementptr inbounds i16, i16* %350, i64 2
  %357 = load i16, i16* %356, align 2
  store i16 %357, i16* %355, align 2
  %358 = getelementptr inbounds i16, i16* %348, i64 3
  %359 = getelementptr inbounds i16, i16* %350, i64 3
  %360 = load i16, i16* %359, align 2
  store i16 %360, i16* %358, align 2
  %361 = getelementptr inbounds i16, i16* %348, i64 4
  %362 = getelementptr inbounds i16, i16* %350, i64 4
  %363 = load i16, i16* %362, align 2
  store i16 %363, i16* %361, align 2
  %364 = getelementptr inbounds i16, i16* %348, i64 5
  %365 = getelementptr inbounds i16, i16* %350, i64 5
  %366 = load i16, i16* %365, align 2
  store i16 %366, i16* %364, align 2
  %367 = getelementptr inbounds i16, i16* %348, i64 6
  %368 = getelementptr inbounds i16, i16* %350, i64 6
  %369 = load i16, i16* %368, align 2
  store i16 %369, i16* %367, align 2
  %370 = getelementptr inbounds i16, i16* %348, i64 7
  %371 = getelementptr inbounds i16, i16* %350, i64 7
  %372 = load i16, i16* %371, align 2
  store i16 %372, i16* %370, align 2
  %373 = add i64 %349, -8
  %374 = getelementptr inbounds i16, i16* %348, i64 8
  %375 = getelementptr inbounds i16, i16* %350, i64 8
  %376 = icmp eq i64 %373, 0
  br i1 %376, label %377, label %347, !llvm.loop !61

377:                                              ; preds = %342, %347, %322, %199
  %378 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %8, i64 0, i32 1
  %379 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %5, i64 0, i32 1
  %380 = load i64, i64* %379, align 8
  store i64 %380, i64* %378, align 8
  call void @_ZN12v8_inspector15String16Builder9appendAllIPKcJNS_8String16ES3_S4_EEEvT_DpT0_(%"class.v8_inspector::String16Builder"* %0, i8* %2, %"class.v8_inspector::String16"* nonnull %7, i8* %4, %"class.v8_inspector::String16"* nonnull %8)
  %381 = bitcast %"class.v8_inspector::String16"* %8 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %382 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %381, i64 0, i32 1, i32 1
  %383 = load i8, i8* %382, align 1
  %384 = icmp slt i8 %383, 0
  br i1 %384, label %385, label %388

385:                                              ; preds = %377
  %386 = bitcast %"class.v8_inspector::String16"* %8 to i8**
  %387 = load i8*, i8** %386, align 8
  call void @_ZdlPv(i8* %387) #9
  br label %388

388:                                              ; preds = %377, %385
  %389 = bitcast %"class.v8_inspector::String16"* %7 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %390 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %389, i64 0, i32 1, i32 1
  %391 = load i8, i8* %390, align 1
  %392 = icmp slt i8 %391, 0
  br i1 %392, label %393, label %396

393:                                              ; preds = %388
  %394 = bitcast %"class.v8_inspector::String16"* %7 to i8**
  %395 = load i8*, i8** %394, align 8
  call void @_ZdlPv(i8* %395) #9
  br label %396

396:                                              ; preds = %388, %393
  ret void
}

declare void @_ZN12v8_inspector15String16Builder8toStringEv(%"class.v8_inspector::String16"* sret, %"class.v8_inspector::String16Builder"*) local_unnamed_addr #3

declare void @_ZN12v8_inspector15String16Builder6appendERKNS_8String16E(%"class.v8_inspector::String16Builder"*, %"class.v8_inspector::String16"* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12v8_inspector15String16Builder9appendAllIPKcJNS_8String16ES3_S4_EEEvT_DpT0_(%"class.v8_inspector::String16Builder"*, i8*, %"class.v8_inspector::String16"*, i8*, %"class.v8_inspector::String16"*) local_unnamed_addr #1 comdat align 2 {
  %6 = alloca %"class.v8_inspector::String16", align 8
  %7 = alloca %"class.v8_inspector::String16", align 8
  %8 = alloca %"class.v8_inspector::String16", align 8
  %9 = bitcast %"class.v8_inspector::String16"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #8
  call void @_ZN12v8_inspector8String16C1EPKc(%"class.v8_inspector::String16"* nonnull %6, i8* %1) #8
  call void @_ZN12v8_inspector15String16Builder6appendERKNS_8String16E(%"class.v8_inspector::String16Builder"* %0, %"class.v8_inspector::String16"* nonnull dereferenceable(32) %6) #8
  %10 = bitcast %"class.v8_inspector::String16"* %6 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %10, i64 0, i32 1, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %5
  %15 = bitcast %"class.v8_inspector::String16"* %6 to i8**
  %16 = load i8*, i8** %15, align 8
  call void @_ZdlPv(i8* %16) #9
  br label %17

17:                                               ; preds = %5, %14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #8
  %18 = bitcast %"class.v8_inspector::String16"* %2 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %18, i64 0, i32 1, i32 1
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  br i1 %21, label %25, label %22

22:                                               ; preds = %17
  %23 = bitcast %"class.v8_inspector::String16"* %7 to i8*
  %24 = bitcast %"class.v8_inspector::String16"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %23, i8* align 8 %24, i64 24, i1 false) #8
  br label %200

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i16*, i16** %26, align 8
  %28 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = icmp ult i64 %29, 11
  br i1 %30, label %31, label %36

31:                                               ; preds = %25
  %32 = bitcast %"class.v8_inspector::String16"* %7 to i16*
  %33 = trunc i64 %29 to i8
  %34 = bitcast %"class.v8_inspector::String16"* %7 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %35 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %34, i64 0, i32 1, i32 1
  store i8 %33, i8* %35, align 1
  br label %53

36:                                               ; preds = %25
  %37 = icmp ugt i64 %29, 9223372036854775791
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = bitcast %"class.v8_inspector::String16"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %39) #10
  unreachable

40:                                               ; preds = %36
  %41 = add nuw nsw i64 %29, 8
  %42 = and i64 %41, -8
  %43 = icmp slt i64 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %40
  call void @abort() #10
  unreachable

45:                                               ; preds = %40
  %46 = shl i64 %42, 1
  %47 = call i8* @_Znwm(i64 %46) #9
  %48 = bitcast i8* %47 to i16*
  %49 = bitcast %"class.v8_inspector::String16"* %7 to i8**
  store i8* %47, i8** %49, align 8
  %50 = or i64 %42, -9223372036854775808
  %51 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %50, i64* %51, align 8
  %52 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %29, i64* %52, align 8
  br label %53

53:                                               ; preds = %45, %31
  %54 = phi i16* [ %32, %31 ], [ %48, %45 ]
  %55 = add nuw nsw i64 %29, 1
  %56 = add i64 %29, 1
  %57 = icmp ult i64 %56, 16
  br i1 %57, label %147, label %58

58:                                               ; preds = %53
  %59 = add i64 %29, 1
  %60 = getelementptr i16, i16* %54, i64 %59
  %61 = getelementptr i16, i16* %27, i64 %59
  %62 = icmp ult i16* %54, %61
  %63 = icmp ult i16* %27, %60
  %64 = and i1 %62, %63
  br i1 %64, label %147, label %65

65:                                               ; preds = %58
  %66 = and i64 %56, -16
  %67 = getelementptr i16, i16* %54, i64 %66
  %68 = sub i64 %55, %66
  %69 = getelementptr i16, i16* %27, i64 %66
  %70 = add i64 %66, -16
  %71 = lshr exact i64 %70, 4
  %72 = add nuw nsw i64 %71, 1
  %73 = and i64 %72, 3
  %74 = icmp ult i64 %70, 48
  br i1 %74, label %126, label %75

75:                                               ; preds = %65
  %76 = sub nsw i64 %72, %73
  br label %77

77:                                               ; preds = %77, %75
  %78 = phi i64 [ 0, %75 ], [ %123, %77 ]
  %79 = phi i64 [ %76, %75 ], [ %124, %77 ]
  %80 = getelementptr i16, i16* %54, i64 %78
  %81 = getelementptr i16, i16* %27, i64 %78
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !62
  %84 = getelementptr i16, i16* %81, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !62
  %87 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !65, !noalias !62
  %88 = getelementptr i16, i16* %80, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !65, !noalias !62
  %90 = or i64 %78, 16
  %91 = getelementptr i16, i16* %54, i64 %90
  %92 = getelementptr i16, i16* %27, i64 %90
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !62
  %95 = getelementptr i16, i16* %92, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !62
  %98 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !65, !noalias !62
  %99 = getelementptr i16, i16* %91, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !65, !noalias !62
  %101 = or i64 %78, 32
  %102 = getelementptr i16, i16* %54, i64 %101
  %103 = getelementptr i16, i16* %27, i64 %101
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !62
  %106 = getelementptr i16, i16* %103, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !62
  %109 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !65, !noalias !62
  %110 = getelementptr i16, i16* %102, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !65, !noalias !62
  %112 = or i64 %78, 48
  %113 = getelementptr i16, i16* %54, i64 %112
  %114 = getelementptr i16, i16* %27, i64 %112
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !62
  %117 = getelementptr i16, i16* %114, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2, !alias.scope !62
  %120 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %120, align 2, !alias.scope !65, !noalias !62
  %121 = getelementptr i16, i16* %113, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %122, align 2, !alias.scope !65, !noalias !62
  %123 = add i64 %78, 64
  %124 = add i64 %79, -4
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %77, !llvm.loop !67

126:                                              ; preds = %77, %65
  %127 = phi i64 [ 0, %65 ], [ %123, %77 ]
  %128 = icmp eq i64 %73, 0
  br i1 %128, label %145, label %129

129:                                              ; preds = %126, %129
  %130 = phi i64 [ %142, %129 ], [ %127, %126 ]
  %131 = phi i64 [ %143, %129 ], [ %73, %126 ]
  %132 = getelementptr i16, i16* %54, i64 %130
  %133 = getelementptr i16, i16* %27, i64 %130
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !62
  %136 = getelementptr i16, i16* %133, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2, !alias.scope !62
  %139 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %139, align 2, !alias.scope !65, !noalias !62
  %140 = getelementptr i16, i16* %132, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %141, align 2, !alias.scope !65, !noalias !62
  %142 = add i64 %130, 16
  %143 = add i64 %131, -1
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %129, !llvm.loop !68

145:                                              ; preds = %129, %126
  %146 = icmp eq i64 %56, %66
  br i1 %146, label %200, label %147

147:                                              ; preds = %145, %58, %53
  %148 = phi i16* [ %54, %58 ], [ %54, %53 ], [ %67, %145 ]
  %149 = phi i64 [ %55, %58 ], [ %55, %53 ], [ %68, %145 ]
  %150 = phi i16* [ %27, %58 ], [ %27, %53 ], [ %69, %145 ]
  %151 = add i64 %149, -1
  %152 = and i64 %149, 7
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %165, label %154

154:                                              ; preds = %147, %154
  %155 = phi i16* [ %161, %154 ], [ %148, %147 ]
  %156 = phi i64 [ %160, %154 ], [ %149, %147 ]
  %157 = phi i16* [ %162, %154 ], [ %150, %147 ]
  %158 = phi i64 [ %163, %154 ], [ %152, %147 ]
  %159 = load i16, i16* %157, align 2
  store i16 %159, i16* %155, align 2
  %160 = add i64 %156, -1
  %161 = getelementptr inbounds i16, i16* %155, i64 1
  %162 = getelementptr inbounds i16, i16* %157, i64 1
  %163 = add i64 %158, -1
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %154, !llvm.loop !69

165:                                              ; preds = %154, %147
  %166 = phi i16* [ %148, %147 ], [ %161, %154 ]
  %167 = phi i64 [ %149, %147 ], [ %160, %154 ]
  %168 = phi i16* [ %150, %147 ], [ %162, %154 ]
  %169 = icmp ult i64 %151, 7
  br i1 %169, label %200, label %170

170:                                              ; preds = %165, %170
  %171 = phi i16* [ %197, %170 ], [ %166, %165 ]
  %172 = phi i64 [ %196, %170 ], [ %167, %165 ]
  %173 = phi i16* [ %198, %170 ], [ %168, %165 ]
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %171, align 2
  %175 = getelementptr inbounds i16, i16* %171, i64 1
  %176 = getelementptr inbounds i16, i16* %173, i64 1
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %171, i64 2
  %179 = getelementptr inbounds i16, i16* %173, i64 2
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %171, i64 3
  %182 = getelementptr inbounds i16, i16* %173, i64 3
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds i16, i16* %171, i64 4
  %185 = getelementptr inbounds i16, i16* %173, i64 4
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = getelementptr inbounds i16, i16* %171, i64 5
  %188 = getelementptr inbounds i16, i16* %173, i64 5
  %189 = load i16, i16* %188, align 2
  store i16 %189, i16* %187, align 2
  %190 = getelementptr inbounds i16, i16* %171, i64 6
  %191 = getelementptr inbounds i16, i16* %173, i64 6
  %192 = load i16, i16* %191, align 2
  store i16 %192, i16* %190, align 2
  %193 = getelementptr inbounds i16, i16* %171, i64 7
  %194 = getelementptr inbounds i16, i16* %173, i64 7
  %195 = load i16, i16* %194, align 2
  store i16 %195, i16* %193, align 2
  %196 = add i64 %172, -8
  %197 = getelementptr inbounds i16, i16* %171, i64 8
  %198 = getelementptr inbounds i16, i16* %173, i64 8
  %199 = icmp eq i64 %196, 0
  br i1 %199, label %200, label %170, !llvm.loop !70

200:                                              ; preds = %165, %170, %145, %22
  %201 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %7, i64 0, i32 1
  %202 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %2, i64 0, i32 1
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %201, align 8
  %204 = bitcast %"class.v8_inspector::String16"* %4 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %205 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %204, i64 0, i32 1, i32 1
  %206 = load i8, i8* %205, align 1
  %207 = icmp slt i8 %206, 0
  br i1 %207, label %211, label %208

208:                                              ; preds = %200
  %209 = bitcast %"class.v8_inspector::String16"* %8 to i8*
  %210 = bitcast %"class.v8_inspector::String16"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %209, i8* align 8 %210, i64 24, i1 false) #8
  br label %386

211:                                              ; preds = %200
  %212 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %213 = load i16*, i16** %212, align 8
  %214 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %215 = load i64, i64* %214, align 8
  %216 = icmp ult i64 %215, 11
  br i1 %216, label %217, label %222

217:                                              ; preds = %211
  %218 = bitcast %"class.v8_inspector::String16"* %8 to i16*
  %219 = trunc i64 %215 to i8
  %220 = bitcast %"class.v8_inspector::String16"* %8 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %221 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %220, i64 0, i32 1, i32 1
  store i8 %219, i8* %221, align 1
  br label %239

222:                                              ; preds = %211
  %223 = icmp ugt i64 %215, 9223372036854775791
  br i1 %223, label %224, label %226

224:                                              ; preds = %222
  %225 = bitcast %"class.v8_inspector::String16"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %225) #10
  unreachable

226:                                              ; preds = %222
  %227 = add nuw nsw i64 %215, 8
  %228 = and i64 %227, -8
  %229 = icmp slt i64 %228, 0
  br i1 %229, label %230, label %231

230:                                              ; preds = %226
  call void @abort() #10
  unreachable

231:                                              ; preds = %226
  %232 = shl i64 %228, 1
  %233 = call i8* @_Znwm(i64 %232) #9
  %234 = bitcast i8* %233 to i16*
  %235 = bitcast %"class.v8_inspector::String16"* %8 to i8**
  store i8* %233, i8** %235, align 8
  %236 = or i64 %228, -9223372036854775808
  %237 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %236, i64* %237, align 8
  %238 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %215, i64* %238, align 8
  br label %239

239:                                              ; preds = %231, %217
  %240 = phi i16* [ %218, %217 ], [ %234, %231 ]
  %241 = add nuw nsw i64 %215, 1
  %242 = add i64 %215, 1
  %243 = icmp ult i64 %242, 16
  br i1 %243, label %333, label %244

244:                                              ; preds = %239
  %245 = add i64 %215, 1
  %246 = getelementptr i16, i16* %240, i64 %245
  %247 = getelementptr i16, i16* %213, i64 %245
  %248 = icmp ult i16* %240, %247
  %249 = icmp ult i16* %213, %246
  %250 = and i1 %248, %249
  br i1 %250, label %333, label %251

251:                                              ; preds = %244
  %252 = and i64 %242, -16
  %253 = getelementptr i16, i16* %240, i64 %252
  %254 = sub i64 %241, %252
  %255 = getelementptr i16, i16* %213, i64 %252
  %256 = add i64 %252, -16
  %257 = lshr exact i64 %256, 4
  %258 = add nuw nsw i64 %257, 1
  %259 = and i64 %258, 3
  %260 = icmp ult i64 %256, 48
  br i1 %260, label %312, label %261

261:                                              ; preds = %251
  %262 = sub nsw i64 %258, %259
  br label %263

263:                                              ; preds = %263, %261
  %264 = phi i64 [ 0, %261 ], [ %309, %263 ]
  %265 = phi i64 [ %262, %261 ], [ %310, %263 ]
  %266 = getelementptr i16, i16* %240, i64 %264
  %267 = getelementptr i16, i16* %213, i64 %264
  %268 = bitcast i16* %267 to <8 x i16>*
  %269 = load <8 x i16>, <8 x i16>* %268, align 2, !alias.scope !71
  %270 = getelementptr i16, i16* %267, i64 8
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !71
  %273 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %269, <8 x i16>* %273, align 2, !alias.scope !74, !noalias !71
  %274 = getelementptr i16, i16* %266, i64 8
  %275 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %272, <8 x i16>* %275, align 2, !alias.scope !74, !noalias !71
  %276 = or i64 %264, 16
  %277 = getelementptr i16, i16* %240, i64 %276
  %278 = getelementptr i16, i16* %213, i64 %276
  %279 = bitcast i16* %278 to <8 x i16>*
  %280 = load <8 x i16>, <8 x i16>* %279, align 2, !alias.scope !71
  %281 = getelementptr i16, i16* %278, i64 8
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 2, !alias.scope !71
  %284 = bitcast i16* %277 to <8 x i16>*
  store <8 x i16> %280, <8 x i16>* %284, align 2, !alias.scope !74, !noalias !71
  %285 = getelementptr i16, i16* %277, i64 8
  %286 = bitcast i16* %285 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %286, align 2, !alias.scope !74, !noalias !71
  %287 = or i64 %264, 32
  %288 = getelementptr i16, i16* %240, i64 %287
  %289 = getelementptr i16, i16* %213, i64 %287
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2, !alias.scope !71
  %292 = getelementptr i16, i16* %289, i64 8
  %293 = bitcast i16* %292 to <8 x i16>*
  %294 = load <8 x i16>, <8 x i16>* %293, align 2, !alias.scope !71
  %295 = bitcast i16* %288 to <8 x i16>*
  store <8 x i16> %291, <8 x i16>* %295, align 2, !alias.scope !74, !noalias !71
  %296 = getelementptr i16, i16* %288, i64 8
  %297 = bitcast i16* %296 to <8 x i16>*
  store <8 x i16> %294, <8 x i16>* %297, align 2, !alias.scope !74, !noalias !71
  %298 = or i64 %264, 48
  %299 = getelementptr i16, i16* %240, i64 %298
  %300 = getelementptr i16, i16* %213, i64 %298
  %301 = bitcast i16* %300 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !71
  %303 = getelementptr i16, i16* %300, i64 8
  %304 = bitcast i16* %303 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 2, !alias.scope !71
  %306 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %302, <8 x i16>* %306, align 2, !alias.scope !74, !noalias !71
  %307 = getelementptr i16, i16* %299, i64 8
  %308 = bitcast i16* %307 to <8 x i16>*
  store <8 x i16> %305, <8 x i16>* %308, align 2, !alias.scope !74, !noalias !71
  %309 = add i64 %264, 64
  %310 = add i64 %265, -4
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %263, !llvm.loop !76

312:                                              ; preds = %263, %251
  %313 = phi i64 [ 0, %251 ], [ %309, %263 ]
  %314 = icmp eq i64 %259, 0
  br i1 %314, label %331, label %315

315:                                              ; preds = %312, %315
  %316 = phi i64 [ %328, %315 ], [ %313, %312 ]
  %317 = phi i64 [ %329, %315 ], [ %259, %312 ]
  %318 = getelementptr i16, i16* %240, i64 %316
  %319 = getelementptr i16, i16* %213, i64 %316
  %320 = bitcast i16* %319 to <8 x i16>*
  %321 = load <8 x i16>, <8 x i16>* %320, align 2, !alias.scope !71
  %322 = getelementptr i16, i16* %319, i64 8
  %323 = bitcast i16* %322 to <8 x i16>*
  %324 = load <8 x i16>, <8 x i16>* %323, align 2, !alias.scope !71
  %325 = bitcast i16* %318 to <8 x i16>*
  store <8 x i16> %321, <8 x i16>* %325, align 2, !alias.scope !74, !noalias !71
  %326 = getelementptr i16, i16* %318, i64 8
  %327 = bitcast i16* %326 to <8 x i16>*
  store <8 x i16> %324, <8 x i16>* %327, align 2, !alias.scope !74, !noalias !71
  %328 = add i64 %316, 16
  %329 = add i64 %317, -1
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %331, label %315, !llvm.loop !77

331:                                              ; preds = %315, %312
  %332 = icmp eq i64 %242, %252
  br i1 %332, label %386, label %333

333:                                              ; preds = %331, %244, %239
  %334 = phi i16* [ %240, %244 ], [ %240, %239 ], [ %253, %331 ]
  %335 = phi i64 [ %241, %244 ], [ %241, %239 ], [ %254, %331 ]
  %336 = phi i16* [ %213, %244 ], [ %213, %239 ], [ %255, %331 ]
  %337 = add i64 %335, -1
  %338 = and i64 %335, 7
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %351, label %340

340:                                              ; preds = %333, %340
  %341 = phi i16* [ %347, %340 ], [ %334, %333 ]
  %342 = phi i64 [ %346, %340 ], [ %335, %333 ]
  %343 = phi i16* [ %348, %340 ], [ %336, %333 ]
  %344 = phi i64 [ %349, %340 ], [ %338, %333 ]
  %345 = load i16, i16* %343, align 2
  store i16 %345, i16* %341, align 2
  %346 = add i64 %342, -1
  %347 = getelementptr inbounds i16, i16* %341, i64 1
  %348 = getelementptr inbounds i16, i16* %343, i64 1
  %349 = add i64 %344, -1
  %350 = icmp eq i64 %349, 0
  br i1 %350, label %351, label %340, !llvm.loop !78

351:                                              ; preds = %340, %333
  %352 = phi i16* [ %334, %333 ], [ %347, %340 ]
  %353 = phi i64 [ %335, %333 ], [ %346, %340 ]
  %354 = phi i16* [ %336, %333 ], [ %348, %340 ]
  %355 = icmp ult i64 %337, 7
  br i1 %355, label %386, label %356

356:                                              ; preds = %351, %356
  %357 = phi i16* [ %383, %356 ], [ %352, %351 ]
  %358 = phi i64 [ %382, %356 ], [ %353, %351 ]
  %359 = phi i16* [ %384, %356 ], [ %354, %351 ]
  %360 = load i16, i16* %359, align 2
  store i16 %360, i16* %357, align 2
  %361 = getelementptr inbounds i16, i16* %357, i64 1
  %362 = getelementptr inbounds i16, i16* %359, i64 1
  %363 = load i16, i16* %362, align 2
  store i16 %363, i16* %361, align 2
  %364 = getelementptr inbounds i16, i16* %357, i64 2
  %365 = getelementptr inbounds i16, i16* %359, i64 2
  %366 = load i16, i16* %365, align 2
  store i16 %366, i16* %364, align 2
  %367 = getelementptr inbounds i16, i16* %357, i64 3
  %368 = getelementptr inbounds i16, i16* %359, i64 3
  %369 = load i16, i16* %368, align 2
  store i16 %369, i16* %367, align 2
  %370 = getelementptr inbounds i16, i16* %357, i64 4
  %371 = getelementptr inbounds i16, i16* %359, i64 4
  %372 = load i16, i16* %371, align 2
  store i16 %372, i16* %370, align 2
  %373 = getelementptr inbounds i16, i16* %357, i64 5
  %374 = getelementptr inbounds i16, i16* %359, i64 5
  %375 = load i16, i16* %374, align 2
  store i16 %375, i16* %373, align 2
  %376 = getelementptr inbounds i16, i16* %357, i64 6
  %377 = getelementptr inbounds i16, i16* %359, i64 6
  %378 = load i16, i16* %377, align 2
  store i16 %378, i16* %376, align 2
  %379 = getelementptr inbounds i16, i16* %357, i64 7
  %380 = getelementptr inbounds i16, i16* %359, i64 7
  %381 = load i16, i16* %380, align 2
  store i16 %381, i16* %379, align 2
  %382 = add i64 %358, -8
  %383 = getelementptr inbounds i16, i16* %357, i64 8
  %384 = getelementptr inbounds i16, i16* %359, i64 8
  %385 = icmp eq i64 %382, 0
  br i1 %385, label %386, label %356, !llvm.loop !79

386:                                              ; preds = %351, %356, %331, %208
  %387 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %8, i64 0, i32 1
  %388 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %4, i64 0, i32 1
  %389 = load i64, i64* %388, align 8
  store i64 %389, i64* %387, align 8
  call void @_ZN12v8_inspector15String16Builder9appendAllINS_8String16EJPKcS2_EEEvT_DpT0_(%"class.v8_inspector::String16Builder"* %0, %"class.v8_inspector::String16"* nonnull %7, i8* %3, %"class.v8_inspector::String16"* nonnull %8)
  %390 = bitcast %"class.v8_inspector::String16"* %8 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %391 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %390, i64 0, i32 1, i32 1
  %392 = load i8, i8* %391, align 1
  %393 = icmp slt i8 %392, 0
  br i1 %393, label %394, label %397

394:                                              ; preds = %386
  %395 = bitcast %"class.v8_inspector::String16"* %8 to i8**
  %396 = load i8*, i8** %395, align 8
  call void @_ZdlPv(i8* %396) #9
  br label %397

397:                                              ; preds = %386, %394
  %398 = bitcast %"class.v8_inspector::String16"* %7 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %399 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %398, i64 0, i32 1, i32 1
  %400 = load i8, i8* %399, align 1
  %401 = icmp slt i8 %400, 0
  br i1 %401, label %402, label %405

402:                                              ; preds = %397
  %403 = bitcast %"class.v8_inspector::String16"* %7 to i8**
  %404 = load i8*, i8** %403, align 8
  call void @_ZdlPv(i8* %404) #9
  br label %405

405:                                              ; preds = %397, %402
  ret void
}

declare void @_ZN12v8_inspector8String16C1EPKc(%"class.v8_inspector::String16"*, i8*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12v8_inspector15String16Builder9appendAllINS_8String16EJPKcS2_EEEvT_DpT0_(%"class.v8_inspector::String16Builder"*, %"class.v8_inspector::String16"*, i8*, %"class.v8_inspector::String16"*) local_unnamed_addr #1 comdat align 2 {
  %5 = alloca %"class.v8_inspector::String16", align 8
  tail call void @_ZN12v8_inspector15String16Builder6appendERKNS_8String16E(%"class.v8_inspector::String16Builder"* %0, %"class.v8_inspector::String16"* dereferenceable(32) %1) #8
  %6 = bitcast %"class.v8_inspector::String16"* %3 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %4
  %11 = bitcast %"class.v8_inspector::String16"* %5 to i8*
  %12 = bitcast %"class.v8_inspector::String16"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 %12, i64 24, i1 false) #8
  br label %188

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i16*, i16** %14, align 8
  %16 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp ult i64 %17, 11
  br i1 %18, label %19, label %24

19:                                               ; preds = %13
  %20 = bitcast %"class.v8_inspector::String16"* %5 to i16*
  %21 = trunc i64 %17 to i8
  %22 = bitcast %"class.v8_inspector::String16"* %5 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %22, i64 0, i32 1, i32 1
  store i8 %21, i8* %23, align 1
  br label %41

24:                                               ; preds = %13
  %25 = icmp ugt i64 %17, 9223372036854775791
  br i1 %25, label %26, label %28

26:                                               ; preds = %24
  %27 = bitcast %"class.v8_inspector::String16"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %27) #10
  unreachable

28:                                               ; preds = %24
  %29 = add nuw nsw i64 %17, 8
  %30 = and i64 %29, -8
  %31 = icmp slt i64 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %28
  tail call void @abort() #10
  unreachable

33:                                               ; preds = %28
  %34 = shl i64 %30, 1
  %35 = tail call i8* @_Znwm(i64 %34) #9
  %36 = bitcast i8* %35 to i16*
  %37 = bitcast %"class.v8_inspector::String16"* %5 to i8**
  store i8* %35, i8** %37, align 8
  %38 = or i64 %30, -9223372036854775808
  %39 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %17, i64* %40, align 8
  br label %41

41:                                               ; preds = %33, %19
  %42 = phi i16* [ %20, %19 ], [ %36, %33 ]
  %43 = add nuw nsw i64 %17, 1
  %44 = add i64 %17, 1
  %45 = icmp ult i64 %44, 16
  br i1 %45, label %135, label %46

46:                                               ; preds = %41
  %47 = add i64 %17, 1
  %48 = getelementptr i16, i16* %42, i64 %47
  %49 = getelementptr i16, i16* %15, i64 %47
  %50 = icmp ult i16* %42, %49
  %51 = icmp ult i16* %15, %48
  %52 = and i1 %50, %51
  br i1 %52, label %135, label %53

53:                                               ; preds = %46
  %54 = and i64 %44, -16
  %55 = getelementptr i16, i16* %42, i64 %54
  %56 = sub i64 %43, %54
  %57 = getelementptr i16, i16* %15, i64 %54
  %58 = add i64 %54, -16
  %59 = lshr exact i64 %58, 4
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 48
  br i1 %62, label %114, label %63

63:                                               ; preds = %53
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr i16, i16* %42, i64 %66
  %69 = getelementptr i16, i16* %15, i64 %66
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !80
  %72 = getelementptr i16, i16* %69, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !80
  %75 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %75, align 2, !alias.scope !83, !noalias !80
  %76 = getelementptr i16, i16* %68, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %77, align 2, !alias.scope !83, !noalias !80
  %78 = or i64 %66, 16
  %79 = getelementptr i16, i16* %42, i64 %78
  %80 = getelementptr i16, i16* %15, i64 %78
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !80
  %83 = getelementptr i16, i16* %80, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !80
  %86 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %86, align 2, !alias.scope !83, !noalias !80
  %87 = getelementptr i16, i16* %79, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %88, align 2, !alias.scope !83, !noalias !80
  %89 = or i64 %66, 32
  %90 = getelementptr i16, i16* %42, i64 %89
  %91 = getelementptr i16, i16* %15, i64 %89
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !80
  %94 = getelementptr i16, i16* %91, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !80
  %97 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %97, align 2, !alias.scope !83, !noalias !80
  %98 = getelementptr i16, i16* %90, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %99, align 2, !alias.scope !83, !noalias !80
  %100 = or i64 %66, 48
  %101 = getelementptr i16, i16* %42, i64 %100
  %102 = getelementptr i16, i16* %15, i64 %100
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !80
  %105 = getelementptr i16, i16* %102, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !80
  %108 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %108, align 2, !alias.scope !83, !noalias !80
  %109 = getelementptr i16, i16* %101, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %110, align 2, !alias.scope !83, !noalias !80
  %111 = add i64 %66, 64
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !85

114:                                              ; preds = %65, %53
  %115 = phi i64 [ 0, %53 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr i16, i16* %42, i64 %118
  %121 = getelementptr i16, i16* %15, i64 %118
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !80
  %124 = getelementptr i16, i16* %121, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2, !alias.scope !80
  %127 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %127, align 2, !alias.scope !83, !noalias !80
  %128 = getelementptr i16, i16* %120, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %129, align 2, !alias.scope !83, !noalias !80
  %130 = add i64 %118, 16
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !86

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %44, %54
  br i1 %134, label %188, label %135

135:                                              ; preds = %133, %46, %41
  %136 = phi i16* [ %42, %46 ], [ %42, %41 ], [ %55, %133 ]
  %137 = phi i64 [ %43, %46 ], [ %43, %41 ], [ %56, %133 ]
  %138 = phi i16* [ %15, %46 ], [ %15, %41 ], [ %57, %133 ]
  %139 = add i64 %137, -1
  %140 = and i64 %137, 7
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %153, label %142

142:                                              ; preds = %135, %142
  %143 = phi i16* [ %149, %142 ], [ %136, %135 ]
  %144 = phi i64 [ %148, %142 ], [ %137, %135 ]
  %145 = phi i16* [ %150, %142 ], [ %138, %135 ]
  %146 = phi i64 [ %151, %142 ], [ %140, %135 ]
  %147 = load i16, i16* %145, align 2
  store i16 %147, i16* %143, align 2
  %148 = add i64 %144, -1
  %149 = getelementptr inbounds i16, i16* %143, i64 1
  %150 = getelementptr inbounds i16, i16* %145, i64 1
  %151 = add i64 %146, -1
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %142, !llvm.loop !87

153:                                              ; preds = %142, %135
  %154 = phi i16* [ %136, %135 ], [ %149, %142 ]
  %155 = phi i64 [ %137, %135 ], [ %148, %142 ]
  %156 = phi i16* [ %138, %135 ], [ %150, %142 ]
  %157 = icmp ult i64 %139, 7
  br i1 %157, label %188, label %158

158:                                              ; preds = %153, %158
  %159 = phi i16* [ %185, %158 ], [ %154, %153 ]
  %160 = phi i64 [ %184, %158 ], [ %155, %153 ]
  %161 = phi i16* [ %186, %158 ], [ %156, %153 ]
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %159, align 2
  %163 = getelementptr inbounds i16, i16* %159, i64 1
  %164 = getelementptr inbounds i16, i16* %161, i64 1
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %159, i64 2
  %167 = getelementptr inbounds i16, i16* %161, i64 2
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %159, i64 3
  %170 = getelementptr inbounds i16, i16* %161, i64 3
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %159, i64 4
  %173 = getelementptr inbounds i16, i16* %161, i64 4
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %159, i64 5
  %176 = getelementptr inbounds i16, i16* %161, i64 5
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %159, i64 6
  %179 = getelementptr inbounds i16, i16* %161, i64 6
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %159, i64 7
  %182 = getelementptr inbounds i16, i16* %161, i64 7
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = add i64 %160, -8
  %185 = getelementptr inbounds i16, i16* %159, i64 8
  %186 = getelementptr inbounds i16, i16* %161, i64 8
  %187 = icmp eq i64 %184, 0
  br i1 %187, label %188, label %158, !llvm.loop !88

188:                                              ; preds = %153, %158, %133, %10
  %189 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %5, i64 0, i32 1
  %190 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %3, i64 0, i32 1
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %189, align 8
  call void @_ZN12v8_inspector15String16Builder9appendAllIPKcJNS_8String16EEEEvT_DpT0_(%"class.v8_inspector::String16Builder"* %0, i8* %2, %"class.v8_inspector::String16"* nonnull %5)
  %192 = bitcast %"class.v8_inspector::String16"* %5 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %193 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %192, i64 0, i32 1, i32 1
  %194 = load i8, i8* %193, align 1
  %195 = icmp slt i8 %194, 0
  br i1 %195, label %196, label %199

196:                                              ; preds = %188
  %197 = bitcast %"class.v8_inspector::String16"* %5 to i8**
  %198 = load i8*, i8** %197, align 8
  call void @_ZdlPv(i8* %198) #9
  br label %199

199:                                              ; preds = %188, %196
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12v8_inspector15String16Builder9appendAllIPKcJNS_8String16EEEEvT_DpT0_(%"class.v8_inspector::String16Builder"*, i8*, %"class.v8_inspector::String16"*) local_unnamed_addr #1 comdat align 2 {
  %4 = alloca %"class.v8_inspector::String16", align 8
  %5 = alloca %"class.v8_inspector::String16", align 8
  %6 = bitcast %"class.v8_inspector::String16"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #8
  call void @_ZN12v8_inspector8String16C1EPKc(%"class.v8_inspector::String16"* nonnull %4, i8* %1) #8
  call void @_ZN12v8_inspector15String16Builder6appendERKNS_8String16E(%"class.v8_inspector::String16Builder"* %0, %"class.v8_inspector::String16"* nonnull dereferenceable(32) %4) #8
  %7 = bitcast %"class.v8_inspector::String16"* %4 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %7, i64 0, i32 1, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %3
  %12 = bitcast %"class.v8_inspector::String16"* %4 to i8**
  %13 = load i8*, i8** %12, align 8
  call void @_ZdlPv(i8* %13) #9
  br label %14

14:                                               ; preds = %3, %11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #8
  %15 = bitcast %"class.v8_inspector::String16"* %2 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %15, i64 0, i32 1, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %14
  %20 = bitcast %"class.v8_inspector::String16"* %5 to i8*
  %21 = bitcast %"class.v8_inspector::String16"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* align 8 %21, i64 24, i1 false) #8
  br label %197

22:                                               ; preds = %14
  %23 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = icmp ult i64 %26, 11
  br i1 %27, label %28, label %33

28:                                               ; preds = %22
  %29 = bitcast %"class.v8_inspector::String16"* %5 to i16*
  %30 = trunc i64 %26 to i8
  %31 = bitcast %"class.v8_inspector::String16"* %5 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %31, i64 0, i32 1, i32 1
  store i8 %30, i8* %32, align 1
  br label %50

33:                                               ; preds = %22
  %34 = icmp ugt i64 %26, 9223372036854775791
  br i1 %34, label %35, label %37

35:                                               ; preds = %33
  %36 = bitcast %"class.v8_inspector::String16"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %36) #10
  unreachable

37:                                               ; preds = %33
  %38 = add nuw nsw i64 %26, 8
  %39 = and i64 %38, -8
  %40 = icmp slt i64 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %37
  call void @abort() #10
  unreachable

42:                                               ; preds = %37
  %43 = shl i64 %39, 1
  %44 = call i8* @_Znwm(i64 %43) #9
  %45 = bitcast i8* %44 to i16*
  %46 = bitcast %"class.v8_inspector::String16"* %5 to i8**
  store i8* %44, i8** %46, align 8
  %47 = or i64 %39, -9223372036854775808
  %48 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %47, i64* %48, align 8
  %49 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %26, i64* %49, align 8
  br label %50

50:                                               ; preds = %42, %28
  %51 = phi i16* [ %29, %28 ], [ %45, %42 ]
  %52 = add nuw nsw i64 %26, 1
  %53 = add i64 %26, 1
  %54 = icmp ult i64 %53, 16
  br i1 %54, label %144, label %55

55:                                               ; preds = %50
  %56 = add i64 %26, 1
  %57 = getelementptr i16, i16* %51, i64 %56
  %58 = getelementptr i16, i16* %24, i64 %56
  %59 = icmp ult i16* %51, %58
  %60 = icmp ult i16* %24, %57
  %61 = and i1 %59, %60
  br i1 %61, label %144, label %62

62:                                               ; preds = %55
  %63 = and i64 %53, -16
  %64 = getelementptr i16, i16* %51, i64 %63
  %65 = sub i64 %52, %63
  %66 = getelementptr i16, i16* %24, i64 %63
  %67 = add i64 %63, -16
  %68 = lshr exact i64 %67, 4
  %69 = add nuw nsw i64 %68, 1
  %70 = and i64 %69, 3
  %71 = icmp ult i64 %67, 48
  br i1 %71, label %123, label %72

72:                                               ; preds = %62
  %73 = sub nsw i64 %69, %70
  br label %74

74:                                               ; preds = %74, %72
  %75 = phi i64 [ 0, %72 ], [ %120, %74 ]
  %76 = phi i64 [ %73, %72 ], [ %121, %74 ]
  %77 = getelementptr i16, i16* %51, i64 %75
  %78 = getelementptr i16, i16* %24, i64 %75
  %79 = bitcast i16* %78 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2, !alias.scope !89
  %81 = getelementptr i16, i16* %78, i64 8
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !89
  %84 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %84, align 2, !alias.scope !92, !noalias !89
  %85 = getelementptr i16, i16* %77, i64 8
  %86 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %86, align 2, !alias.scope !92, !noalias !89
  %87 = or i64 %75, 16
  %88 = getelementptr i16, i16* %51, i64 %87
  %89 = getelementptr i16, i16* %24, i64 %87
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !89
  %92 = getelementptr i16, i16* %89, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !89
  %95 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %95, align 2, !alias.scope !92, !noalias !89
  %96 = getelementptr i16, i16* %88, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %97, align 2, !alias.scope !92, !noalias !89
  %98 = or i64 %75, 32
  %99 = getelementptr i16, i16* %51, i64 %98
  %100 = getelementptr i16, i16* %24, i64 %98
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !89
  %103 = getelementptr i16, i16* %100, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !89
  %106 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %106, align 2, !alias.scope !92, !noalias !89
  %107 = getelementptr i16, i16* %99, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %108, align 2, !alias.scope !92, !noalias !89
  %109 = or i64 %75, 48
  %110 = getelementptr i16, i16* %51, i64 %109
  %111 = getelementptr i16, i16* %24, i64 %109
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !89
  %114 = getelementptr i16, i16* %111, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !89
  %117 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %117, align 2, !alias.scope !92, !noalias !89
  %118 = getelementptr i16, i16* %110, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %119, align 2, !alias.scope !92, !noalias !89
  %120 = add i64 %75, 64
  %121 = add i64 %76, -4
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %74, !llvm.loop !94

123:                                              ; preds = %74, %62
  %124 = phi i64 [ 0, %62 ], [ %120, %74 ]
  %125 = icmp eq i64 %70, 0
  br i1 %125, label %142, label %126

126:                                              ; preds = %123, %126
  %127 = phi i64 [ %139, %126 ], [ %124, %123 ]
  %128 = phi i64 [ %140, %126 ], [ %70, %123 ]
  %129 = getelementptr i16, i16* %51, i64 %127
  %130 = getelementptr i16, i16* %24, i64 %127
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !89
  %133 = getelementptr i16, i16* %130, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !89
  %136 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %136, align 2, !alias.scope !92, !noalias !89
  %137 = getelementptr i16, i16* %129, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %138, align 2, !alias.scope !92, !noalias !89
  %139 = add i64 %127, 16
  %140 = add i64 %128, -1
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %126, !llvm.loop !95

142:                                              ; preds = %126, %123
  %143 = icmp eq i64 %53, %63
  br i1 %143, label %197, label %144

144:                                              ; preds = %142, %55, %50
  %145 = phi i16* [ %51, %55 ], [ %51, %50 ], [ %64, %142 ]
  %146 = phi i64 [ %52, %55 ], [ %52, %50 ], [ %65, %142 ]
  %147 = phi i16* [ %24, %55 ], [ %24, %50 ], [ %66, %142 ]
  %148 = add i64 %146, -1
  %149 = and i64 %146, 7
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %162, label %151

151:                                              ; preds = %144, %151
  %152 = phi i16* [ %158, %151 ], [ %145, %144 ]
  %153 = phi i64 [ %157, %151 ], [ %146, %144 ]
  %154 = phi i16* [ %159, %151 ], [ %147, %144 ]
  %155 = phi i64 [ %160, %151 ], [ %149, %144 ]
  %156 = load i16, i16* %154, align 2
  store i16 %156, i16* %152, align 2
  %157 = add i64 %153, -1
  %158 = getelementptr inbounds i16, i16* %152, i64 1
  %159 = getelementptr inbounds i16, i16* %154, i64 1
  %160 = add i64 %155, -1
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %162, label %151, !llvm.loop !96

162:                                              ; preds = %151, %144
  %163 = phi i16* [ %145, %144 ], [ %158, %151 ]
  %164 = phi i64 [ %146, %144 ], [ %157, %151 ]
  %165 = phi i16* [ %147, %144 ], [ %159, %151 ]
  %166 = icmp ult i64 %148, 7
  br i1 %166, label %197, label %167

167:                                              ; preds = %162, %167
  %168 = phi i16* [ %194, %167 ], [ %163, %162 ]
  %169 = phi i64 [ %193, %167 ], [ %164, %162 ]
  %170 = phi i16* [ %195, %167 ], [ %165, %162 ]
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %168, align 2
  %172 = getelementptr inbounds i16, i16* %168, i64 1
  %173 = getelementptr inbounds i16, i16* %170, i64 1
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %168, i64 2
  %176 = getelementptr inbounds i16, i16* %170, i64 2
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %168, i64 3
  %179 = getelementptr inbounds i16, i16* %170, i64 3
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %168, i64 4
  %182 = getelementptr inbounds i16, i16* %170, i64 4
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds i16, i16* %168, i64 5
  %185 = getelementptr inbounds i16, i16* %170, i64 5
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = getelementptr inbounds i16, i16* %168, i64 6
  %188 = getelementptr inbounds i16, i16* %170, i64 6
  %189 = load i16, i16* %188, align 2
  store i16 %189, i16* %187, align 2
  %190 = getelementptr inbounds i16, i16* %168, i64 7
  %191 = getelementptr inbounds i16, i16* %170, i64 7
  %192 = load i16, i16* %191, align 2
  store i16 %192, i16* %190, align 2
  %193 = add i64 %169, -8
  %194 = getelementptr inbounds i16, i16* %168, i64 8
  %195 = getelementptr inbounds i16, i16* %170, i64 8
  %196 = icmp eq i64 %193, 0
  br i1 %196, label %197, label %167, !llvm.loop !97

197:                                              ; preds = %162, %167, %142, %19
  %198 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %5, i64 0, i32 1
  %199 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %2, i64 0, i32 1
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %198, align 8
  call void @_ZN12v8_inspector15String16Builder6appendERKNS_8String16E(%"class.v8_inspector::String16Builder"* %0, %"class.v8_inspector::String16"* nonnull dereferenceable(32) %5) #8
  %201 = bitcast %"class.v8_inspector::String16"* %5 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %202 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %201, i64 0, i32 1, i32 1
  %203 = load i8, i8* %202, align 1
  %204 = icmp slt i8 %203, 0
  br i1 %204, label %205, label %208

205:                                              ; preds = %197
  %206 = bitcast %"class.v8_inspector::String16"* %5 to i8**
  %207 = load i8*, i8** %206, align 8
  call void @_ZdlPv(i8* %207) #9
  br label %208

208:                                              ; preds = %197, %205
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNKSt3__112basic_stringItNS_11char_traitsItEENS_9allocatorItEEE6substrEmm: argument 0"}
!5 = distinct !{!5, !"_ZNKSt3__112basic_stringItNS_11char_traitsItEENS_9allocatorItEEE6substrEmm"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !14}
!16 = distinct !{!16, !12}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !12}
!23 = distinct !{!23, !14}
!24 = distinct !{!24, !14}
!25 = distinct !{!25, !12}
!26 = !{!27}
!27 = distinct !{!27, !28}
!28 = distinct !{!28, !"LVerDomain"}
!29 = !{!30}
!30 = distinct !{!30, !28}
!31 = distinct !{!31, !12}
!32 = distinct !{!32, !14}
!33 = distinct !{!33, !14}
!34 = distinct !{!34, !12}
!35 = !{!36}
!36 = distinct !{!36, !37}
!37 = distinct !{!37, !"LVerDomain"}
!38 = !{!39}
!39 = distinct !{!39, !37}
!40 = distinct !{!40, !12}
!41 = distinct !{!41, !14}
!42 = distinct !{!42, !14}
!43 = distinct !{!43, !12}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !12}
!50 = distinct !{!50, !14}
!51 = distinct !{!51, !14}
!52 = distinct !{!52, !12}
!53 = !{!54}
!54 = distinct !{!54, !55}
!55 = distinct !{!55, !"LVerDomain"}
!56 = !{!57}
!57 = distinct !{!57, !55}
!58 = distinct !{!58, !12}
!59 = distinct !{!59, !14}
!60 = distinct !{!60, !14}
!61 = distinct !{!61, !12}
!62 = !{!63}
!63 = distinct !{!63, !64}
!64 = distinct !{!64, !"LVerDomain"}
!65 = !{!66}
!66 = distinct !{!66, !64}
!67 = distinct !{!67, !12}
!68 = distinct !{!68, !14}
!69 = distinct !{!69, !14}
!70 = distinct !{!70, !12}
!71 = !{!72}
!72 = distinct !{!72, !73}
!73 = distinct !{!73, !"LVerDomain"}
!74 = !{!75}
!75 = distinct !{!75, !73}
!76 = distinct !{!76, !12}
!77 = distinct !{!77, !14}
!78 = distinct !{!78, !14}
!79 = distinct !{!79, !12}
!80 = !{!81}
!81 = distinct !{!81, !82}
!82 = distinct !{!82, !"LVerDomain"}
!83 = !{!84}
!84 = distinct !{!84, !82}
!85 = distinct !{!85, !12}
!86 = distinct !{!86, !14}
!87 = distinct !{!87, !14}
!88 = distinct !{!88, !12}
!89 = !{!90}
!90 = distinct !{!90, !91}
!91 = distinct !{!91, !"LVerDomain"}
!92 = !{!93}
!93 = distinct !{!93, !91}
!94 = distinct !{!94, !12}
!95 = distinct !{!95, !14}
!96 = distinct !{!96, !14}
!97 = distinct !{!97, !12}
