; ModuleID = '../../content/browser/background_fetch/background_fetch_request_match_params.cc'
source_filename = "../../content/browser/background_fetch/background_fetch_request_match_params.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.content::BackgroundFetchRequestMatchParams" = type <{ %"class.mojo::StructPtr", %"class.mojo::InlinedStructPtr", i8, [7 x i8] }>
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::mojom::FetchAPIRequest"* }
%"class.blink::mojom::FetchAPIRequest" = type { i32, i8, i32, i32, %class.GURL, %"class.std::__1::basic_string", %"class.base::flat_map", %"class.mojo::StructPtr.12", %class.scoped_refptr, %"class.mojo::StructPtr.41", i32, i32, i32, %"class.absl::optional", i32, %"class.absl::optional.49", i8, i8, i8, %"class.absl::optional" }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.3" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %class.GURL* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.7" }
%"struct.std::__1::pair" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.std::__1::pair"* }
%"class.mojo::StructPtr.12" = type { %"class.std::__1::unique_ptr.13" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.blink::mojom::SerializedBlob"* }
%"class.blink::mojom::SerializedBlob" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", i64, %"class.mojo::PendingRemote" }
%"class.mojo::PendingRemote" = type { %"struct.mojo::internal::PendingRemoteState" }
%"struct.mojo::internal::PendingRemoteState" = type { %"class.mojo::ScopedHandleBase", i32 }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%class.scoped_refptr = type { %"class.network::ResourceRequestBody"* }
%"class.network::ResourceRequestBody" = type <{ %"class.base::RefCountedThreadSafe", [4 x i8], %"class.std::__1::vector.20", i64, i8, i8, [6 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.19" }
%"struct.std::__1::__atomic_base.19" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"class.network::DataElement"*, %"class.network::DataElement"*, %"class.std::__1::__compressed_pair.36" }
%"class.network::DataElement" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.22" }
%"union.absl::variant_internal::DestructibleUnionImpl.22" = type { %"union.absl::variant_internal::DestructibleUnionImpl.30" }
%"union.absl::variant_internal::DestructibleUnionImpl.30" = type { %"union.absl::variant_internal::DestructibleUnionImpl.32" }
%"union.absl::variant_internal::DestructibleUnionImpl.32" = type { %"union.absl::variant_internal::DestructibleUnionImpl.34" }
%"union.absl::variant_internal::DestructibleUnionImpl.34" = type { %"class.network::DataElementFile" }
%"class.network::DataElementFile" = type { %"class.base::FilePath", i64, i64, %"class.base::Time" }
%"class.base::FilePath" = type { %"class.std::__1::basic_string" }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.network::DataElement"* }
%"class.mojo::StructPtr.41" = type { %"class.std::__1::unique_ptr.42" }
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.blink::mojom::Referrer"* }
%"class.blink::mojom::Referrer" = type <{ %class.GURL, i32, [4 x i8] }>
%"class.absl::optional.49" = type { %"class.absl::optional_internal::optional_data.50" }
%"class.absl::optional_internal::optional_data.50" = type { %"class.absl::optional_internal::optional_data_base.51" }
%"class.absl::optional_internal::optional_data_base.51" = type { %"class.absl::optional_internal::optional_data_dtor_base.52" }
%"class.absl::optional_internal::optional_data_dtor_base.52" = type { i8, %union.anon.53 }
%union.anon.53 = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.48 }
%union.anon.48 = type { %"class.std::__1::basic_string" }
%"class.mojo::InlinedStructPtr" = type { %"class.blink::mojom::CacheQueryOptions", i32 }
%"class.blink::mojom::CacheQueryOptions" = type { i8, i8, i8 }

@_ZN7content33BackgroundFetchRequestMatchParamsC1EN4mojo9StructPtrIN5blink5mojom15FetchAPIRequestEEENS1_16InlinedStructPtrINS4_17CacheQueryOptionsEEEb = hidden unnamed_addr alias void (%"class.content::BackgroundFetchRequestMatchParams"*, %"class.mojo::StructPtr"*, %"class.mojo::InlinedStructPtr"*, i1), void (%"class.content::BackgroundFetchRequestMatchParams"*, %"class.mojo::StructPtr"*, %"class.mojo::InlinedStructPtr"*, i1)* @_ZN7content33BackgroundFetchRequestMatchParamsC2EN4mojo9StructPtrIN5blink5mojom15FetchAPIRequestEEENS1_16InlinedStructPtrINS4_17CacheQueryOptionsEEEb
@_ZN7content33BackgroundFetchRequestMatchParamsC1Ev = hidden unnamed_addr alias void (%"class.content::BackgroundFetchRequestMatchParams"*), void (%"class.content::BackgroundFetchRequestMatchParams"*)* @_ZN7content33BackgroundFetchRequestMatchParamsC2Ev
@_ZN7content33BackgroundFetchRequestMatchParamsD1Ev = hidden unnamed_addr alias void (%"class.content::BackgroundFetchRequestMatchParams"*), void (%"class.content::BackgroundFetchRequestMatchParams"*)* @_ZN7content33BackgroundFetchRequestMatchParamsD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content33BackgroundFetchRequestMatchParamsC2EN4mojo9StructPtrIN5blink5mojom15FetchAPIRequestEEENS1_16InlinedStructPtrINS4_17CacheQueryOptionsEEEb(%"class.content::BackgroundFetchRequestMatchParams"*, %"class.mojo::StructPtr"* nocapture, %"class.mojo::InlinedStructPtr"* nocapture, i1 zeroext) unnamed_addr #0 align 2 {
  %5 = alloca %"class.blink::mojom::CacheQueryOptions", align 1
  %6 = zext i1 %3 to i8
  %7 = bitcast %"class.content::BackgroundFetchRequestMatchParams"* %0 to i64*
  %8 = getelementptr inbounds %"class.content::BackgroundFetchRequestMatchParams", %"class.content::BackgroundFetchRequestMatchParams"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.blink::mojom::FetchAPIRequest"* null, %"class.blink::mojom::FetchAPIRequest"** %8, align 8
  %9 = bitcast %"class.mojo::StructPtr"* %1 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %7, align 8
  store i64 0, i64* %9, align 8
  %11 = getelementptr inbounds %"class.content::BackgroundFetchRequestMatchParams", %"class.content::BackgroundFetchRequestMatchParams"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %11, i64 0, i32 0
  tail call void @_ZN5blink5mojom17CacheQueryOptionsC1Ev(%"class.blink::mojom::CacheQueryOptions"* %12) #5
  %13 = getelementptr inbounds %"class.content::BackgroundFetchRequestMatchParams", %"class.content::BackgroundFetchRequestMatchParams"* %0, i64 0, i32 1, i32 1
  store i32 0, i32* %13, align 4
  tail call void @_ZN5blink5mojom17CacheQueryOptionsD1Ev(%"class.blink::mojom::CacheQueryOptions"* %12) #5
  tail call void @_ZN5blink5mojom17CacheQueryOptionsC1Ev(%"class.blink::mojom::CacheQueryOptions"* %12) #5
  %14 = getelementptr inbounds %"class.blink::mojom::CacheQueryOptions", %"class.blink::mojom::CacheQueryOptions"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %14) #5
  %15 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %11, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %14, i8* align 1 %15, i64 3, i1 false) #5
  %16 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %2, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %16, i64 3, i1 false) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* nonnull align 1 %14, i64 3, i1 false) #5
  call void @_ZN5blink5mojom17CacheQueryOptionsD1Ev(%"class.blink::mojom::CacheQueryOptions"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %14) #5
  %17 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %2, i64 0, i32 1
  %18 = load i32, i32* %13, align 4
  %19 = load i32, i32* %17, align 4
  store i32 %19, i32* %13, align 4
  store i32 %18, i32* %17, align 4
  %20 = getelementptr inbounds %"class.content::BackgroundFetchRequestMatchParams", %"class.content::BackgroundFetchRequestMatchParams"* %0, i64 0, i32 2
  store i8 %6, i8* %20, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content33BackgroundFetchRequestMatchParamsC2Ev(%"class.content::BackgroundFetchRequestMatchParams"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.content::BackgroundFetchRequestMatchParams"* %0 to i64*
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %"class.content::BackgroundFetchRequestMatchParams", %"class.content::BackgroundFetchRequestMatchParams"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN5blink5mojom17CacheQueryOptionsC1Ev(%"class.blink::mojom::CacheQueryOptions"* %3) #5
  %4 = getelementptr inbounds %"class.content::BackgroundFetchRequestMatchParams", %"class.content::BackgroundFetchRequestMatchParams"* %0, i64 0, i32 1, i32 1
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %"class.content::BackgroundFetchRequestMatchParams", %"class.content::BackgroundFetchRequestMatchParams"* %0, i64 0, i32 2
  store i8 0, i8* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content33BackgroundFetchRequestMatchParamsD2Ev(%"class.content::BackgroundFetchRequestMatchParams"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.content::BackgroundFetchRequestMatchParams", %"class.content::BackgroundFetchRequestMatchParams"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN5blink5mojom17CacheQueryOptionsD1Ev(%"class.blink::mojom::CacheQueryOptions"* %2) #5
  %3 = getelementptr inbounds %"class.content::BackgroundFetchRequestMatchParams", %"class.content::BackgroundFetchRequestMatchParams"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.blink::mojom::FetchAPIRequest"*, %"class.blink::mojom::FetchAPIRequest"** %3, align 8
  store %"class.blink::mojom::FetchAPIRequest"* null, %"class.blink::mojom::FetchAPIRequest"** %3, align 8
  %5 = icmp eq %"class.blink::mojom::FetchAPIRequest"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN5blink5mojom15FetchAPIRequestD1Ev(%"class.blink::mojom::FetchAPIRequest"* nonnull %4) #5
  %7 = bitcast %"class.blink::mojom::FetchAPIRequest"* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #6
  br label %8

8:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN5blink5mojom17CacheQueryOptionsC1Ev(%"class.blink::mojom::CacheQueryOptions"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink5mojom17CacheQueryOptionsD1Ev(%"class.blink::mojom::CacheQueryOptions"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN5blink5mojom15FetchAPIRequestD1Ev(%"class.blink::mojom::FetchAPIRequest"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
