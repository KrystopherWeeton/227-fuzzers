; ModuleID = '../../third_party/libjpeg_turbo/jdtrans.c'
source_filename = "../../third_party/libjpeg_turbo/jdtrans.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jvirt_barray_control = type opaque
%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32 }
%struct.jpeg_marker_reader = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { void (%struct.jpeg_decompress_struct*)*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)* }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.jvirt_barray_control** @jpeg_read_coefficients(%struct.jpeg_decompress_struct*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 4
  switch i32 %3, label %114 [
    i32 202, label %4
    i32 209, label %69
    i32 210, label %105
    i32 207, label %105
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 15
  store i32 1, i32* %5, align 8
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 46
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %17, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %11 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %10, align 8
  %12 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %11, i64 0, i32 5
  store i32 1, i32* %12, align 8
  %13 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %10, align 8
  %14 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %13, i64 0, i32 0
  %15 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %14, align 8
  %16 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %15(%struct.jpeg_common_struct* %16) #2
  br label %23

17:                                               ; preds = %4
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 45
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %22, label %21

21:                                               ; preds = %17
  tail call void @jinit_phuff_decoder(%struct.jpeg_decompress_struct* %0) #2
  br label %23

22:                                               ; preds = %17
  tail call void @jinit_huff_decoder(%struct.jpeg_decompress_struct* %0) #2
  br label %23

23:                                               ; preds = %22, %21, %9
  tail call void @jinit_d_coef_controller(%struct.jpeg_decompress_struct* %0, i32 1) #2
  %24 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %25 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %24, align 8
  %26 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %25, i64 0, i32 6
  %27 = bitcast {}** %26 to void (%struct.jpeg_common_struct*)**
  %28 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %27, align 8
  %29 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %28(%struct.jpeg_common_struct* %29) #2
  %30 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 81
  %31 = load %struct.jpeg_input_controller*, %struct.jpeg_input_controller** %30, align 8
  %32 = getelementptr inbounds %struct.jpeg_input_controller, %struct.jpeg_input_controller* %31, i64 0, i32 2
  %33 = load void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)** %32, align 8
  tail call void %33(%struct.jpeg_decompress_struct* %0) #2
  %34 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 2
  %35 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %34, align 8
  %36 = icmp eq %struct.jpeg_progress_mgr* %35, null
  br i1 %36, label %68, label %37

37:                                               ; preds = %23
  %38 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 45
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %46, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %43 = load i32, i32* %42, align 8
  %44 = mul nsw i32 %43, 3
  %45 = add nsw i32 %44, 2
  br label %54

46:                                               ; preds = %37
  %47 = load %struct.jpeg_input_controller*, %struct.jpeg_input_controller** %30, align 8
  %48 = getelementptr inbounds %struct.jpeg_input_controller, %struct.jpeg_input_controller* %47, i64 0, i32 4
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %53 = load i32, i32* %52, align 8
  br label %54

54:                                               ; preds = %51, %46, %41
  %55 = phi i32 [ %45, %41 ], [ %53, %51 ], [ 1, %46 ]
  %56 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %35, i64 0, i32 1
  store i64 0, i64* %56, align 8
  %57 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 64
  %58 = load i32, i32* %57, align 4
  %59 = zext i32 %58 to i64
  %60 = sext i32 %55 to i64
  %61 = mul nsw i64 %59, %60
  %62 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %34, align 8
  %63 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %62, i64 0, i32 2
  store i64 %61, i64* %63, align 8
  %64 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %34, align 8
  %65 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %64, i64 0, i32 3
  store i32 0, i32* %65, align 8
  %66 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %34, align 8
  %67 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %66, i64 0, i32 4
  store i32 1, i32* %67, align 4
  br label %68

68:                                               ; preds = %54, %23
  store i32 209, i32* %2, align 4
  br label %69

69:                                               ; preds = %1, %68
  %70 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 2
  %71 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %72 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 81
  %73 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 64
  br label %74

74:                                               ; preds = %103, %69
  %75 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %70, align 8
  %76 = icmp eq %struct.jpeg_progress_mgr* %75, null
  br i1 %76, label %80, label %77

77:                                               ; preds = %74
  %78 = bitcast %struct.jpeg_progress_mgr* %75 to void (%struct.jpeg_common_struct*)**
  %79 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %78, align 8
  tail call void %79(%struct.jpeg_common_struct* %71) #2
  br label %80

80:                                               ; preds = %74, %77
  %81 = load %struct.jpeg_input_controller*, %struct.jpeg_input_controller** %72, align 8
  %82 = getelementptr inbounds %struct.jpeg_input_controller, %struct.jpeg_input_controller* %81, i64 0, i32 0
  %83 = load i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)** %82, align 8
  %84 = tail call i32 %83(%struct.jpeg_decompress_struct* %0) #2
  switch i32 %84, label %85 [
    i32 0, label %125
    i32 2, label %104
  ]

85:                                               ; preds = %80
  %86 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %70, align 8
  %87 = icmp ne %struct.jpeg_progress_mgr* %86, null
  %88 = or i32 %84, 2
  %89 = icmp eq i32 %88, 3
  %90 = and i1 %89, %87
  br i1 %90, label %91, label %103

91:                                               ; preds = %85
  %92 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %86, i64 0, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = add nsw i64 %93, 1
  store i64 %94, i64* %92, align 8
  %95 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %70, align 8
  %96 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %95, i64 0, i32 2
  %97 = load i64, i64* %96, align 8
  %98 = icmp slt i64 %94, %97
  br i1 %98, label %103, label %99

99:                                               ; preds = %91
  %100 = load i32, i32* %73, align 4
  %101 = zext i32 %100 to i64
  %102 = add nsw i64 %97, %101
  store i64 %102, i64* %96, align 8
  br label %103

103:                                              ; preds = %99, %91, %85
  br label %74

104:                                              ; preds = %80
  store i32 210, i32* %2, align 4
  br label %105

105:                                              ; preds = %1, %1, %104
  %106 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 15
  %107 = load i32, i32* %106, align 8
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %114, label %109

109:                                              ; preds = %105
  %110 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 79
  %111 = load %struct.jpeg_d_coef_controller*, %struct.jpeg_d_coef_controller** %110, align 8
  %112 = getelementptr inbounds %struct.jpeg_d_coef_controller, %struct.jpeg_d_coef_controller* %111, i64 0, i32 4
  %113 = load %struct.jvirt_barray_control**, %struct.jvirt_barray_control*** %112, align 8
  br label %125

114:                                              ; preds = %1, %105
  %115 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %116 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %115, align 8
  %117 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %116, i64 0, i32 5
  store i32 20, i32* %117, align 8
  %118 = load i32, i32* %2, align 4
  %119 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %115, align 8
  %120 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %119, i64 0, i32 6, i32 0, i64 0
  store i32 %118, i32* %120, align 4
  %121 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %115, align 8
  %122 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %121, i64 0, i32 0
  %123 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %122, align 8
  %124 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %123(%struct.jpeg_common_struct* %124) #2
  br label %125

125:                                              ; preds = %80, %114, %109
  %126 = phi %struct.jvirt_barray_control** [ %113, %109 ], [ null, %114 ], [ null, %80 ]
  ret %struct.jvirt_barray_control** %126
}

declare void @jinit_phuff_decoder(%struct.jpeg_decompress_struct*) local_unnamed_addr #1

declare void @jinit_huff_decoder(%struct.jpeg_decompress_struct*) local_unnamed_addr #1

declare void @jinit_d_coef_controller(%struct.jpeg_decompress_struct*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
