; ModuleID = '../../third_party/pdfium/core/fxcodec/jbig2/JBig2_HuffmanTable.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/jbig2/JBig2_HuffmanTable.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.(anonymous namespace)::HuffmanTable" = type { i8, %"struct.(anonymous namespace)::JBig2TableLine"*, i64 }
%"struct.(anonymous namespace)::JBig2TableLine" = type { i8, i8, i32 }
%class.CJBig2_HuffmanTable = type { i8, i8, i32, %"class.std::__1::vector", %"class.std::__1::vector.1", %"class.std::__1::vector.1" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode*, %"class.std::__1::__compressed_pair" }
%struct.JBig2HuffmanCode = type { i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.JBig2HuffmanCode* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i32*, i32*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i32* }
%class.CJBig2_BitStream = type <{ %"class.pdfium::span", i32, i32, i32, [4 x i8] }>
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorI16JBig2HuffmanCodeNS_9allocatorIS1_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm = comdat any

@_ZN12_GLOBAL__N_114kHuffmanTablesE = internal unnamed_addr constant [16 x %"struct.(anonymous namespace)::HuffmanTable"] [%"struct.(anonymous namespace)::HuffmanTable" zeroinitializer, %"struct.(anonymous namespace)::HuffmanTable" { i8 0, %"struct.(anonymous namespace)::JBig2TableLine"* getelementptr inbounds ([5 x %"struct.(anonymous namespace)::JBig2TableLine"], [5 x %"struct.(anonymous namespace)::JBig2TableLine"]* @_ZN12_GLOBAL__N_111kTableLine1E, i32 0, i32 0), i64 5 }, %"struct.(anonymous namespace)::HuffmanTable" { i8 1, %"struct.(anonymous namespace)::JBig2TableLine"* getelementptr inbounds ([8 x %"struct.(anonymous namespace)::JBig2TableLine"], [8 x %"struct.(anonymous namespace)::JBig2TableLine"]* @_ZN12_GLOBAL__N_111kTableLine2E, i32 0, i32 0), i64 8 }, %"struct.(anonymous namespace)::HuffmanTable" { i8 1, %"struct.(anonymous namespace)::JBig2TableLine"* getelementptr inbounds ([9 x %"struct.(anonymous namespace)::JBig2TableLine"], [9 x %"struct.(anonymous namespace)::JBig2TableLine"]* @_ZN12_GLOBAL__N_111kTableLine3E, i32 0, i32 0), i64 9 }, %"struct.(anonymous namespace)::HuffmanTable" { i8 0, %"struct.(anonymous namespace)::JBig2TableLine"* getelementptr inbounds ([7 x %"struct.(anonymous namespace)::JBig2TableLine"], [7 x %"struct.(anonymous namespace)::JBig2TableLine"]* @_ZN12_GLOBAL__N_111kTableLine4E, i32 0, i32 0), i64 7 }, %"struct.(anonymous namespace)::HuffmanTable" { i8 0, %"struct.(anonymous namespace)::JBig2TableLine"* getelementptr inbounds ([8 x %"struct.(anonymous namespace)::JBig2TableLine"], [8 x %"struct.(anonymous namespace)::JBig2TableLine"]* @_ZN12_GLOBAL__N_111kTableLine5E, i32 0, i32 0), i64 8 }, %"struct.(anonymous namespace)::HuffmanTable" { i8 0, %"struct.(anonymous namespace)::JBig2TableLine"* getelementptr inbounds ([14 x %"struct.(anonymous namespace)::JBig2TableLine"], [14 x %"struct.(anonymous namespace)::JBig2TableLine"]* @_ZN12_GLOBAL__N_111kTableLine6E, i32 0, i32 0), i64 14 }, %"struct.(anonymous namespace)::HuffmanTable" { i8 0, %"struct.(anonymous namespace)::JBig2TableLine"* getelementptr inbounds ([15 x %"struct.(anonymous namespace)::JBig2TableLine"], [15 x %"struct.(anonymous namespace)::JBig2TableLine"]* @_ZN12_GLOBAL__N_111kTableLine7E, i32 0, i32 0), i64 15 }, %"struct.(anonymous namespace)::HuffmanTable" { i8 1, %"struct.(anonymous namespace)::JBig2TableLine"* getelementptr inbounds ([21 x %"struct.(anonymous namespace)::JBig2TableLine"], [21 x %"struct.(anonymous namespace)::JBig2TableLine"]* @_ZN12_GLOBAL__N_111kTableLine8E, i32 0, i32 0), i64 21 }, %"struct.(anonymous namespace)::HuffmanTable" { i8 1, %"struct.(anonymous namespace)::JBig2TableLine"* getelementptr inbounds ([22 x %"struct.(anonymous namespace)::JBig2TableLine"], [22 x %"struct.(anonymous namespace)::JBig2TableLine"]* @_ZN12_GLOBAL__N_111kTableLine9E, i32 0, i32 0), i64 22 }, %"struct.(anonymous namespace)::HuffmanTable" { i8 1, %"struct.(anonymous namespace)::JBig2TableLine"* getelementptr inbounds ([21 x %"struct.(anonymous namespace)::JBig2TableLine"], [21 x %"struct.(anonymous namespace)::JBig2TableLine"]* @_ZN12_GLOBAL__N_112kTableLine10E, i32 0, i32 0), i64 21 }, %"struct.(anonymous namespace)::HuffmanTable" { i8 0, %"struct.(anonymous namespace)::JBig2TableLine"* getelementptr inbounds ([14 x %"struct.(anonymous namespace)::JBig2TableLine"], [14 x %"struct.(anonymous namespace)::JBig2TableLine"]* @_ZN12_GLOBAL__N_112kTableLine11E, i32 0, i32 0), i64 14 }, %"struct.(anonymous namespace)::HuffmanTable" { i8 0, %"struct.(anonymous namespace)::JBig2TableLine"* getelementptr inbounds ([14 x %"struct.(anonymous namespace)::JBig2TableLine"], [14 x %"struct.(anonymous namespace)::JBig2TableLine"]* @_ZN12_GLOBAL__N_112kTableLine12E, i32 0, i32 0), i64 14 }, %"struct.(anonymous namespace)::HuffmanTable" { i8 0, %"struct.(anonymous namespace)::JBig2TableLine"* getelementptr inbounds ([14 x %"struct.(anonymous namespace)::JBig2TableLine"], [14 x %"struct.(anonymous namespace)::JBig2TableLine"]* @_ZN12_GLOBAL__N_112kTableLine13E, i32 0, i32 0), i64 14 }, %"struct.(anonymous namespace)::HuffmanTable" { i8 0, %"struct.(anonymous namespace)::JBig2TableLine"* getelementptr inbounds ([7 x %"struct.(anonymous namespace)::JBig2TableLine"], [7 x %"struct.(anonymous namespace)::JBig2TableLine"]* @_ZN12_GLOBAL__N_112kTableLine14E, i32 0, i32 0), i64 7 }, %"struct.(anonymous namespace)::HuffmanTable" { i8 0, %"struct.(anonymous namespace)::JBig2TableLine"* getelementptr inbounds ([13 x %"struct.(anonymous namespace)::JBig2TableLine"], [13 x %"struct.(anonymous namespace)::JBig2TableLine"]* @_ZN12_GLOBAL__N_112kTableLine15E, i32 0, i32 0), i64 13 }], align 16
@_ZN12_GLOBAL__N_111kTableLine1E = internal constant [5 x %"struct.(anonymous namespace)::JBig2TableLine"] [%"struct.(anonymous namespace)::JBig2TableLine" { i8 1, i8 4, i32 0 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 2, i8 8, i32 16 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 16, i32 272 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 0, i8 32, i32 -1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 32, i32 65808 }], align 16
@_ZN12_GLOBAL__N_111kTableLine2E = internal constant [8 x %"struct.(anonymous namespace)::JBig2TableLine"] [%"struct.(anonymous namespace)::JBig2TableLine" { i8 1, i8 0, i32 0 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 2, i8 0, i32 1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 0, i32 2 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 3, i32 3 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 6, i32 11 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 0, i8 32, i32 -1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 32, i32 75 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 0, i32 0 }], align 16
@_ZN12_GLOBAL__N_111kTableLine3E = internal constant [9 x %"struct.(anonymous namespace)::JBig2TableLine"] [%"struct.(anonymous namespace)::JBig2TableLine" { i8 8, i8 8, i32 -256 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 1, i8 0, i32 0 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 2, i8 0, i32 1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 0, i32 2 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 3, i32 3 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 6, i32 11 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 8, i8 32, i32 -257 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 32, i32 75 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 0, i32 0 }], align 16
@_ZN12_GLOBAL__N_111kTableLine4E = internal constant [7 x %"struct.(anonymous namespace)::JBig2TableLine"] [%"struct.(anonymous namespace)::JBig2TableLine" { i8 1, i8 0, i32 1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 2, i8 0, i32 2 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 0, i32 3 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 3, i32 4 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 6, i32 12 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 0, i8 32, i32 -1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 32, i32 76 }], align 16
@_ZN12_GLOBAL__N_111kTableLine5E = internal constant [8 x %"struct.(anonymous namespace)::JBig2TableLine"] [%"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 8, i32 -255 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 1, i8 0, i32 1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 2, i8 0, i32 2 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 0, i32 3 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 3, i32 4 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 6, i32 12 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 32, i32 -256 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 32, i32 76 }], align 16
@_ZN12_GLOBAL__N_111kTableLine6E = internal constant [14 x %"struct.(anonymous namespace)::JBig2TableLine"] [%"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 10, i32 -2048 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 9, i32 -1024 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 8, i32 -512 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 7, i32 -256 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 6, i32 -128 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 5, i32 -64 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 5, i32 -32 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 2, i8 7, i32 0 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 7, i32 128 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 8, i32 256 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 9, i32 512 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 10, i32 1024 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 32, i32 -2049 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 32, i32 2048 }], align 16
@_ZN12_GLOBAL__N_111kTableLine7E = internal constant [15 x %"struct.(anonymous namespace)::JBig2TableLine"] [%"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 9, i32 -1024 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 8, i32 -512 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 7, i32 -256 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 6, i32 -128 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 5, i32 -64 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 5, i32 -32 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 5, i32 0 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 5, i32 32 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 6, i32 64 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 7, i32 128 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 8, i32 256 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 9, i32 512 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 10, i32 1024 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 32, i32 -1025 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 32, i32 2048 }], align 16
@_ZN12_GLOBAL__N_111kTableLine8E = internal constant [21 x %"struct.(anonymous namespace)::JBig2TableLine"] [%"struct.(anonymous namespace)::JBig2TableLine" { i8 8, i8 3, i32 -15 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 9, i8 1, i32 -7 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 8, i8 1, i32 -5 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 9, i8 0, i32 -3 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 0, i32 -2 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 0, i32 -1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 2, i8 1, i32 0 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 0, i32 2 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 0, i32 3 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 4, i32 4 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 1, i32 20 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 4, i32 22 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 5, i32 38 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 6, i32 70 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 7, i32 134 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 7, i32 262 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 8, i32 390 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 10, i32 646 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 9, i8 32, i32 -16 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 9, i8 32, i32 1670 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 2, i8 0, i32 0 }], align 16
@_ZN12_GLOBAL__N_111kTableLine9E = internal constant [22 x %"struct.(anonymous namespace)::JBig2TableLine"] [%"struct.(anonymous namespace)::JBig2TableLine" { i8 8, i8 4, i32 -31 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 9, i8 2, i32 -15 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 8, i8 2, i32 -11 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 9, i8 1, i32 -7 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 1, i32 -5 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 1, i32 -3 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 1, i32 -1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 1, i32 1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 1, i32 3 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 1, i32 5 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 5, i32 7 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 2, i32 39 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 5, i32 43 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 6, i32 75 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 7, i32 139 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 8, i32 267 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 8, i32 523 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 9, i32 779 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 11, i32 1291 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 9, i8 32, i32 -32 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 9, i8 32, i32 3339 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 2, i8 0, i32 0 }], align 16
@_ZN12_GLOBAL__N_112kTableLine10E = internal constant [21 x %"struct.(anonymous namespace)::JBig2TableLine"] [%"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 4, i32 -21 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 8, i8 0, i32 -5 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 0, i32 -4 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 0, i32 -3 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 2, i8 2, i32 -2 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 0, i32 2 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 0, i32 3 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 0, i32 4 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 8, i8 0, i32 5 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 2, i8 6, i32 6 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 5, i32 70 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 5, i32 102 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 6, i32 134 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 7, i32 198 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 8, i32 326 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 9, i32 582 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 10, i32 1094 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 11, i32 2118 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 8, i8 32, i32 -22 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 8, i8 32, i32 4166 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 2, i8 0, i32 0 }], align 16
@_ZN12_GLOBAL__N_112kTableLine11E = internal constant [14 x %"struct.(anonymous namespace)::JBig2TableLine"] [%"struct.(anonymous namespace)::JBig2TableLine" { i8 1, i8 0, i32 1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 2, i8 1, i32 2 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 0, i32 4 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 1, i32 5 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 1, i32 7 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 2, i32 9 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 2, i32 13 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 2, i32 17 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 3, i32 21 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 4, i32 29 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 5, i32 45 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 6, i32 77 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 0, i8 32, i32 0 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 32, i32 141 }], align 16
@_ZN12_GLOBAL__N_112kTableLine12E = internal constant [14 x %"struct.(anonymous namespace)::JBig2TableLine"] [%"struct.(anonymous namespace)::JBig2TableLine" { i8 1, i8 0, i32 1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 2, i8 0, i32 2 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 1, i32 3 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 0, i32 5 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 1, i32 6 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 1, i32 8 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 0, i32 10 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 1, i32 11 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 2, i32 13 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 3, i32 17 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 4, i32 25 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 8, i8 5, i32 41 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 0, i8 32, i32 0 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 8, i8 32, i32 73 }], align 16
@_ZN12_GLOBAL__N_112kTableLine13E = internal constant [14 x %"struct.(anonymous namespace)::JBig2TableLine"] [%"struct.(anonymous namespace)::JBig2TableLine" { i8 1, i8 0, i32 1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 0, i32 2 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 0, i32 3 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 0, i32 4 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 1, i32 5 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 3, i32 7 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 1, i32 15 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 2, i32 17 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 3, i32 21 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 4, i32 29 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 5, i32 45 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 6, i32 77 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 0, i8 32, i32 0 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 32, i32 141 }], align 16
@_ZN12_GLOBAL__N_112kTableLine14E = internal constant [7 x %"struct.(anonymous namespace)::JBig2TableLine"] [%"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 0, i32 -2 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 0, i32 -1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 1, i8 0, i32 0 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 0, i32 1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 0, i32 2 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 0, i8 32, i32 -3 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 0, i8 32, i32 3 }], align 16
@_ZN12_GLOBAL__N_112kTableLine15E = internal constant [13 x %"struct.(anonymous namespace)::JBig2TableLine"] [%"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 4, i32 -24 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 2, i32 -8 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 1, i32 -4 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 0, i32 -2 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 0, i32 -1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 1, i8 0, i32 0 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 3, i8 0, i32 1 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 4, i8 0, i32 2 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 5, i8 1, i32 3 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 6, i8 2, i32 5 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 4, i32 9 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 32, i32 -25 }, %"struct.(anonymous namespace)::JBig2TableLine" { i8 7, i8 32, i32 25 }], align 16

@_ZN19CJBig2_HuffmanTableC1Em = hidden unnamed_addr alias void (%class.CJBig2_HuffmanTable*, i64), void (%class.CJBig2_HuffmanTable*, i64)* @_ZN19CJBig2_HuffmanTableC2Em
@_ZN19CJBig2_HuffmanTableC1EP16CJBig2_BitStream = hidden unnamed_addr alias void (%class.CJBig2_HuffmanTable*, %class.CJBig2_BitStream*), void (%class.CJBig2_HuffmanTable*, %class.CJBig2_BitStream*)* @_ZN19CJBig2_HuffmanTableC2EP16CJBig2_BitStream
@_ZN19CJBig2_HuffmanTableD1Ev = hidden unnamed_addr alias void (%class.CJBig2_HuffmanTable*), void (%class.CJBig2_HuffmanTable*)* @_ZN19CJBig2_HuffmanTableD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CJBig2_HuffmanTableC2Em(%class.CJBig2_HuffmanTable*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 3
  %4 = getelementptr inbounds [16 x %"struct.(anonymous namespace)::HuffmanTable"], [16 x %"struct.(anonymous namespace)::HuffmanTable"]* @_ZN12_GLOBAL__N_114kHuffmanTablesE, i64 0, i64 %1, i32 0
  %5 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 72, i1 false)
  %6 = load i8, i8* %4, align 8, !range !2
  %7 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 1
  store i8 %6, i8* %7, align 1
  %8 = getelementptr inbounds [16 x %"struct.(anonymous namespace)::HuffmanTable"], [16 x %"struct.(anonymous namespace)::HuffmanTable"]* @_ZN12_GLOBAL__N_114kHuffmanTablesE, i64 0, i64 %1, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = trunc i64 %9 to i32
  %11 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 2
  store i32 %10, i32* %11, align 4
  %12 = tail call zeroext i1 @_ZN19CJBig2_HuffmanTable22ParseFromStandardTableEm(%class.CJBig2_HuffmanTable* %0, i64 %1)
  %13 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 0
  %14 = zext i1 %12 to i8
  store i8 %14, i8* %13, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN19CJBig2_HuffmanTable22ParseFromStandardTableEm(%class.CJBig2_HuffmanTable*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds [16 x %"struct.(anonymous namespace)::HuffmanTable"], [16 x %"struct.(anonymous namespace)::HuffmanTable"]* @_ZN12_GLOBAL__N_114kHuffmanTablesE, i64 0, i64 %1, i32 1
  %4 = load %"struct.(anonymous namespace)::JBig2TableLine"*, %"struct.(anonymous namespace)::JBig2TableLine"** %3, align 8
  %5 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 3
  %6 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 3, i32 0, i32 1
  %10 = bitcast %struct.JBig2HuffmanCode** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector"* %5 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 3
  %16 = icmp ult i64 %15, %8
  %17 = inttoptr i64 %13 to %struct.JBig2HuffmanCode*
  br i1 %16, label %18, label %22

18:                                               ; preds = %2
  %19 = sub nsw i64 %8, %15
  tail call void @_ZNSt3__16vectorI16JBig2HuffmanCodeNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector"* %5, i64 %19) #8
  %20 = load i32, i32* %6, align 4
  %21 = zext i32 %20 to i64
  br label %26

22:                                               ; preds = %2
  %23 = icmp ugt i64 %15, %8
  br i1 %23, label %24, label %26

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %17, i64 %8
  store %struct.JBig2HuffmanCode* %25, %struct.JBig2HuffmanCode** %9, align 8
  br label %26

26:                                               ; preds = %18, %22, %24
  %27 = phi i64 [ %21, %18 ], [ %8, %22 ], [ %8, %24 ]
  %28 = phi i32 [ %20, %18 ], [ %7, %22 ], [ %7, %24 ]
  %29 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 4
  %30 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 4, i32 0, i32 1
  %31 = bitcast i32** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.std::__1::vector.1"* %29 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %32, %34
  %36 = ashr exact i64 %35, 2
  %37 = icmp ugt i64 %27, %36
  %38 = inttoptr i64 %34 to i32*
  br i1 %37, label %39, label %43

39:                                               ; preds = %26
  %40 = sub nsw i64 %27, %36
  tail call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.1"* %29, i64 %40) #8
  %41 = load i32, i32* %6, align 4
  %42 = zext i32 %41 to i64
  br label %47

43:                                               ; preds = %26
  %44 = icmp ult i64 %27, %36
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = getelementptr inbounds i32, i32* %38, i64 %27
  store i32* %46, i32** %30, align 8
  br label %47

47:                                               ; preds = %39, %43, %45
  %48 = phi i64 [ %42, %39 ], [ %27, %43 ], [ %27, %45 ]
  %49 = phi i32 [ %41, %39 ], [ %28, %43 ], [ %28, %45 ]
  %50 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 5
  %51 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 5, i32 0, i32 1
  %52 = bitcast i32** %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %"class.std::__1::vector.1"* %50 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = sub i64 %53, %55
  %57 = ashr exact i64 %56, 2
  %58 = icmp ugt i64 %48, %57
  %59 = inttoptr i64 %55 to i32*
  br i1 %58, label %60, label %63

60:                                               ; preds = %47
  %61 = sub nsw i64 %48, %57
  tail call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.1"* %50, i64 %61) #8
  %62 = load i32, i32* %6, align 4
  br label %67

63:                                               ; preds = %47
  %64 = icmp ult i64 %48, %57
  br i1 %64, label %65, label %67

65:                                               ; preds = %63
  %66 = getelementptr inbounds i32, i32* %59, i64 %48
  store i32* %66, i32** %51, align 8
  br label %67

67:                                               ; preds = %60, %63, %65
  %68 = phi i32 [ %62, %60 ], [ %49, %63 ], [ %49, %65 ]
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %74, label %70

70:                                               ; preds = %67
  %71 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %72 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %29, i64 0, i32 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %50, i64 0, i32 0, i32 0
  br label %79

74:                                               ; preds = %79, %67
  %75 = phi i32 [ 0, %67 ], [ %96, %79 ]
  %76 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %77 = load %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode** %76, align 8
  %78 = tail call zeroext i1 @_ZN14CJBig2_Context17HuffmanAssignCodeEP16JBig2HuffmanCodej(%struct.JBig2HuffmanCode* %77, i32 %75) #8
  ret i1 %78

79:                                               ; preds = %70, %79
  %80 = phi i64 [ 0, %70 ], [ %95, %79 ]
  %81 = getelementptr inbounds %"struct.(anonymous namespace)::JBig2TableLine", %"struct.(anonymous namespace)::JBig2TableLine"* %4, i64 %80, i32 0
  %82 = load i8, i8* %81, align 4
  %83 = zext i8 %82 to i32
  %84 = load %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode** %71, align 8
  %85 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %84, i64 %80, i32 0
  store i32 %83, i32* %85, align 4
  %86 = getelementptr inbounds %"struct.(anonymous namespace)::JBig2TableLine", %"struct.(anonymous namespace)::JBig2TableLine"* %4, i64 %80, i32 1
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = load i32*, i32** %72, align 8
  %90 = getelementptr inbounds i32, i32* %89, i64 %80
  store i32 %88, i32* %90, align 4
  %91 = getelementptr inbounds %"struct.(anonymous namespace)::JBig2TableLine", %"struct.(anonymous namespace)::JBig2TableLine"* %4, i64 %80, i32 2
  %92 = load i32, i32* %91, align 4
  %93 = load i32*, i32** %73, align 8
  %94 = getelementptr inbounds i32, i32* %93, i64 %80
  store i32 %92, i32* %94, align 4
  %95 = add nuw nsw i64 %80, 1
  %96 = load i32, i32* %6, align 4
  %97 = zext i32 %96 to i64
  %98 = icmp ult i64 %95, %97
  br i1 %98, label %79, label %74
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CJBig2_HuffmanTableC2EP16CJBig2_BitStream(%class.CJBig2_HuffmanTable*, %class.CJBig2_BitStream*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 1
  store i8 0, i8* %3, align 1
  %4 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 2
  %5 = bitcast i32* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 76, i1 false)
  %6 = tail call zeroext i1 @_ZN19CJBig2_HuffmanTable20ParseFromCodedBufferEP16CJBig2_BitStream(%class.CJBig2_HuffmanTable* %0, %class.CJBig2_BitStream* %1)
  %7 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 0
  %8 = zext i1 %6 to i8
  store i8 %8, i8* %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN19CJBig2_HuffmanTable20ParseFromCodedBufferEP16CJBig2_BitStream(%class.CJBig2_HuffmanTable*, %class.CJBig2_BitStream*) local_unnamed_addr #0 align 2 {
  %3 = alloca i8, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #8
  store i8 -86, i8* %3, align 1
  %6 = call i32 @_ZN16CJBig2_BitStream9read1ByteEPh(%class.CJBig2_BitStream* %1, i8* nonnull %3) #8
  %7 = icmp eq i32 %6, -1
  br i1 %7, label %126, label %8

8:                                                ; preds = %2
  %9 = load i8, i8* %3, align 1
  %10 = and i8 %9, 1
  %11 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 1
  store i8 %10, i8* %11, align 1
  %12 = lshr i8 %9, 1
  %13 = and i8 %12, 7
  %14 = add nuw nsw i8 %13, 1
  %15 = lshr i8 %9, 4
  %16 = and i8 %15, 7
  %17 = add nuw nsw i8 %16, 1
  %18 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #8
  store i32 -1431655766, i32* %4, align 4
  %19 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #8
  store i32 -1431655766, i32* %5, align 4
  %20 = call i32 @_ZN16CJBig2_BitStream11readIntegerEPj(%class.CJBig2_BitStream* %1, i32* nonnull %4) #8
  %21 = icmp eq i32 %20, -1
  br i1 %21, label %124, label %22

22:                                               ; preds = %8
  %23 = call i32 @_ZN16CJBig2_BitStream11readIntegerEPj(%class.CJBig2_BitStream* %1, i32* nonnull %5) #8
  %24 = icmp eq i32 %23, -1
  br i1 %24, label %124, label %25

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = icmp sgt i32 %26, %27
  br i1 %28, label %124, label %29

29:                                               ; preds = %25
  call void @_ZN19CJBig2_HuffmanTable13ExtendBuffersEb(%class.CJBig2_HuffmanTable* %0, i1 zeroext false)
  %30 = zext i8 %14 to i32
  %31 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 2
  %32 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 3, i32 0, i32 0
  %33 = zext i8 %17 to i32
  %34 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 4, i32 0, i32 0
  %35 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 5, i32 0, i32 0
  br label %36

36:                                               ; preds = %72, %29
  %37 = phi i32 [ %26, %29 ], [ %71, %72 ]
  %38 = load i32, i32* %31, align 4
  %39 = zext i32 %38 to i64
  %40 = load %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode** %32, align 8
  %41 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %40, i64 %39, i32 0
  %42 = call i32 @_ZN16CJBig2_BitStream9readNBitsEjPi(%class.CJBig2_BitStream* %1, i32 %30, i32* %41) #8
  %43 = icmp eq i32 %42, -1
  br i1 %43, label %124, label %44

44:                                               ; preds = %36
  %45 = load i32, i32* %31, align 4
  %46 = zext i32 %45 to i64
  %47 = load i32*, i32** %34, align 8
  %48 = getelementptr inbounds i32, i32* %47, i64 %46
  %49 = call i32 @_ZN16CJBig2_BitStream9readNBitsEjPi(%class.CJBig2_BitStream* %1, i32 %33, i32* %48) #8
  %50 = icmp eq i32 %49, -1
  br i1 %50, label %124, label %51

51:                                               ; preds = %44
  %52 = load i32, i32* %31, align 4
  %53 = zext i32 %52 to i64
  %54 = load i32*, i32** %34, align 8
  %55 = getelementptr inbounds i32, i32* %54, i64 %53
  %56 = load i32, i32* %55, align 4
  %57 = icmp ugt i32 %56, 63
  br i1 %57, label %124, label %58

58:                                               ; preds = %51
  %59 = load i32*, i32** %35, align 8
  %60 = getelementptr inbounds i32, i32* %59, i64 %53
  store i32 %37, i32* %60, align 4
  %61 = load i32, i32* %31, align 4
  %62 = zext i32 %61 to i64
  %63 = load i32*, i32** %34, align 8
  %64 = getelementptr inbounds i32, i32* %63, i64 %62
  %65 = load i32, i32* %64, align 4
  %66 = icmp sgt i32 %65, 31
  br i1 %66, label %124, label %67

67:                                               ; preds = %58
  %68 = shl i32 1, %65
  %69 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %37, i32 %68) #8
  %70 = extractvalue { i32, i1 } %69, 1
  %71 = extractvalue { i32, i1 } %69, 0
  br i1 %70, label %124, label %72

72:                                               ; preds = %67
  call void @_ZN19CJBig2_HuffmanTable13ExtendBuffersEb(%class.CJBig2_HuffmanTable* %0, i1 zeroext true)
  %73 = icmp slt i32 %71, %27
  br i1 %73, label %36, label %74

74:                                               ; preds = %72
  %75 = load i32, i32* %31, align 4
  %76 = zext i32 %75 to i64
  %77 = load %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode** %32, align 8
  %78 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %77, i64 %76, i32 0
  %79 = call i32 @_ZN16CJBig2_BitStream9readNBitsEjPi(%class.CJBig2_BitStream* %1, i32 %30, i32* %78) #8
  %80 = icmp eq i32 %79, -1
  br i1 %80, label %124, label %81

81:                                               ; preds = %74
  %82 = load i32, i32* %31, align 4
  %83 = zext i32 %82 to i64
  %84 = load i32*, i32** %34, align 8
  %85 = getelementptr inbounds i32, i32* %84, i64 %83
  store i32 32, i32* %85, align 4
  %86 = icmp eq i32 %26, -2147483648
  br i1 %86, label %124, label %87

87:                                               ; preds = %81
  %88 = add nsw i32 %26, -1
  %89 = load i32, i32* %31, align 4
  %90 = zext i32 %89 to i64
  %91 = load i32*, i32** %35, align 8
  %92 = getelementptr inbounds i32, i32* %91, i64 %90
  store i32 %88, i32* %92, align 4
  call void @_ZN19CJBig2_HuffmanTable13ExtendBuffersEb(%class.CJBig2_HuffmanTable* %0, i1 zeroext true)
  %93 = load i32, i32* %31, align 4
  %94 = zext i32 %93 to i64
  %95 = load %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode** %32, align 8
  %96 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %95, i64 %94, i32 0
  %97 = call i32 @_ZN16CJBig2_BitStream9readNBitsEjPi(%class.CJBig2_BitStream* %1, i32 %30, i32* %96) #8
  %98 = icmp eq i32 %97, -1
  br i1 %98, label %124, label %99

99:                                               ; preds = %87
  %100 = load i32, i32* %31, align 4
  %101 = zext i32 %100 to i64
  %102 = load i32*, i32** %34, align 8
  %103 = getelementptr inbounds i32, i32* %102, i64 %101
  store i32 32, i32* %103, align 4
  %104 = load i32, i32* %31, align 4
  %105 = zext i32 %104 to i64
  %106 = load i32*, i32** %35, align 8
  %107 = getelementptr inbounds i32, i32* %106, i64 %105
  store i32 %27, i32* %107, align 4
  call void @_ZN19CJBig2_HuffmanTable13ExtendBuffersEb(%class.CJBig2_HuffmanTable* %0, i1 zeroext true)
  %108 = load i8, i8* %11, align 1, !range !2
  %109 = icmp eq i8 %108, 0
  %110 = load i32, i32* %31, align 4
  br i1 %109, label %120, label %111

111:                                              ; preds = %99
  %112 = zext i32 %110 to i64
  %113 = load %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode** %32, align 8
  %114 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %113, i64 %112, i32 0
  %115 = call i32 @_ZN16CJBig2_BitStream9readNBitsEjPi(%class.CJBig2_BitStream* %1, i32 %30, i32* %114) #8
  %116 = icmp eq i32 %115, -1
  br i1 %116, label %124, label %117

117:                                              ; preds = %111
  %118 = load i32, i32* %31, align 4
  %119 = add i32 %118, 1
  store i32 %119, i32* %31, align 4
  br label %120

120:                                              ; preds = %99, %117
  %121 = phi i32 [ %119, %117 ], [ %110, %99 ]
  %122 = load %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode** %32, align 8
  %123 = call zeroext i1 @_ZN14CJBig2_Context17HuffmanAssignCodeEP16JBig2HuffmanCodej(%struct.JBig2HuffmanCode* %122, i32 %121) #8
  br label %124

124:                                              ; preds = %67, %51, %44, %36, %58, %120, %74, %81, %87, %111, %25, %8, %22
  %125 = phi i1 [ false, %22 ], [ false, %8 ], [ false, %25 ], [ %123, %120 ], [ false, %74 ], [ false, %81 ], [ false, %87 ], [ false, %111 ], [ false, %58 ], [ false, %36 ], [ false, %44 ], [ false, %51 ], [ false, %67 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #8
  br label %126

126:                                              ; preds = %2, %124
  %127 = phi i1 [ %125, %124 ], [ false, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #8
  ret i1 %127
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CJBig2_HuffmanTableD2Ev(%class.CJBig2_HuffmanTable* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 5, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i32* %3 to i64
  %7 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 5, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i32* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #9
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 4, i32 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = icmp eq i32* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = ptrtoint i32* %12 to i64
  %16 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 4, i32 0, i32 1
  %17 = bitcast i32** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = bitcast i32* %12 to i8*
  tail call void @_ZdlPv(i8* %18) #9
  br label %19

19:                                               ; preds = %10, %14
  %20 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 3, i32 0, i32 0
  %21 = load %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode** %20, align 8
  %22 = icmp eq %struct.JBig2HuffmanCode* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = ptrtoint %struct.JBig2HuffmanCode* %21 to i64
  %25 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 3, i32 0, i32 1
  %26 = bitcast %struct.JBig2HuffmanCode** %25 to i64*
  store i64 %24, i64* %26, align 8
  %27 = bitcast %struct.JBig2HuffmanCode* %21 to i8*
  tail call void @_ZdlPv(i8* %27) #9
  br label %28

28:                                               ; preds = %19, %23
  ret void
}

declare zeroext i1 @_ZN14CJBig2_Context17HuffmanAssignCodeEP16JBig2HuffmanCodej(%struct.JBig2HuffmanCode*, i32) local_unnamed_addr #2

declare i32 @_ZN16CJBig2_BitStream9read1ByteEPh(%class.CJBig2_BitStream*, i8*) local_unnamed_addr #2

declare i32 @_ZN16CJBig2_BitStream11readIntegerEPj(%class.CJBig2_BitStream*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CJBig2_HuffmanTable13ExtendBuffersEb(%class.CJBig2_HuffmanTable*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 4
  br i1 %1, label %5, label %7

5:                                                ; preds = %2
  %6 = add i32 %4, 1
  store i32 %6, i32* %3, align 4
  br label %7

7:                                                ; preds = %2, %5
  %8 = phi i32 [ %6, %5 ], [ %4, %2 ]
  %9 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 3
  %10 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 3, i32 0, i32 1
  %11 = bitcast %struct.JBig2HuffmanCode** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector"* %9 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = ashr exact i64 %15, 3
  %17 = zext i32 %8 to i64
  %18 = icmp ugt i64 %16, %17
  br i1 %18, label %60, label %19

19:                                               ; preds = %7
  %20 = add nsw i64 %16, 16
  %21 = icmp ult i64 %16, -16
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  tail call void @_ZNSt3__16vectorI16JBig2HuffmanCodeNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector"* %9, i64 16) #8
  br label %26

23:                                               ; preds = %19
  %24 = inttoptr i64 %14 to %struct.JBig2HuffmanCode*
  %25 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %24, i64 %20
  store %struct.JBig2HuffmanCode* %25, %struct.JBig2HuffmanCode** %10, align 8
  br label %26

26:                                               ; preds = %22, %23
  %27 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 4
  %28 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 4, i32 0, i32 1
  %29 = bitcast i32** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %"class.std::__1::vector.1"* %27 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %30, %32
  %34 = ashr exact i64 %33, 2
  %35 = icmp ugt i64 %20, %34
  %36 = inttoptr i64 %32 to i32*
  br i1 %35, label %37, label %39

37:                                               ; preds = %26
  %38 = sub nsw i64 %20, %34
  tail call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.1"* %27, i64 %38) #8
  br label %43

39:                                               ; preds = %26
  %40 = icmp ult i64 %20, %34
  br i1 %40, label %41, label %43

41:                                               ; preds = %39
  %42 = getelementptr inbounds i32, i32* %36, i64 %20
  store i32* %42, i32** %28, align 8
  br label %43

43:                                               ; preds = %37, %39, %41
  %44 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 5
  %45 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %0, i64 0, i32 5, i32 0, i32 1
  %46 = bitcast i32** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"class.std::__1::vector.1"* %44 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %47, %49
  %51 = ashr exact i64 %50, 2
  %52 = icmp ugt i64 %20, %51
  %53 = inttoptr i64 %49 to i32*
  br i1 %52, label %54, label %56

54:                                               ; preds = %43
  %55 = sub nsw i64 %20, %51
  tail call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.1"* %44, i64 %55) #8
  br label %60

56:                                               ; preds = %43
  %57 = icmp ult i64 %20, %51
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = getelementptr inbounds i32, i32* %53, i64 %20
  store i32* %59, i32** %45, align 8
  br label %60

60:                                               ; preds = %58, %56, %54, %7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @_ZN16CJBig2_BitStream9readNBitsEjPi(%class.CJBig2_BitStream*, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI16JBig2HuffmanCodeNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %struct.JBig2HuffmanCode** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %struct.JBig2HuffmanCode** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %struct.JBig2HuffmanCode*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %13, i64 %18, i32 0
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #8
  %26 = ptrtoint %struct.JBig2HuffmanCode* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #10
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #10
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #9
  %54 = bitcast i8* %53 to %struct.JBig2HuffmanCode*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %struct.JBig2HuffmanCode* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %57, i64 %33
  %59 = bitcast %struct.JBig2HuffmanCode* %58 to i8*
  %60 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %57, i64 %56
  %61 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %58, i64 %1
  %62 = shl nsw i64 %1, 3
  call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 %62, i1 false)
  %63 = ptrtoint %struct.JBig2HuffmanCode* %60 to i64
  %64 = ptrtoint %struct.JBig2HuffmanCode* %61 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint %struct.JBig2HuffmanCode* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %58, i64 %71
  %73 = ptrtoint %struct.JBig2HuffmanCode* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast %struct.JBig2HuffmanCode* %72 to i8*
  %77 = bitcast %struct.JBig2HuffmanCode* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #8
  %78 = load %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi %struct.JBig2HuffmanCode* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq %struct.JBig2HuffmanCode* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast %struct.JBig2HuffmanCode* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #9
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.1"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #8
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #10
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #10
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #9
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #8
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #8
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #9
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
