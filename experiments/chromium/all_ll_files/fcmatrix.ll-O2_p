; ModuleID = '../../third_party/fontconfig/src/src/fcmatrix.c'
source_filename = "../../third_party/fontconfig/src/src/fcmatrix.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._FcMatrix = type { double, double, double, double }

@FcIdentityMatrix = hidden constant %struct._FcMatrix { double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00 }, align 8

@FcMatrixCopy = hidden alias %struct._FcMatrix* (%struct._FcMatrix*), %struct._FcMatrix* (%struct._FcMatrix*)* @IA__FcMatrixCopy
@FcMatrixEqual = hidden alias i32 (%struct._FcMatrix*, %struct._FcMatrix*), i32 (%struct._FcMatrix*, %struct._FcMatrix*)* @IA__FcMatrixEqual
@FcMatrixMultiply = hidden alias void (%struct._FcMatrix*, %struct._FcMatrix*, %struct._FcMatrix*), void (%struct._FcMatrix*, %struct._FcMatrix*, %struct._FcMatrix*)* @IA__FcMatrixMultiply
@FcMatrixRotate = hidden alias void (%struct._FcMatrix*, double, double), void (%struct._FcMatrix*, double, double)* @IA__FcMatrixRotate
@FcMatrixScale = hidden alias void (%struct._FcMatrix*, double, double), void (%struct._FcMatrix*, double, double)* @IA__FcMatrixScale
@FcMatrixShear = hidden alias void (%struct._FcMatrix*, double, double), void (%struct._FcMatrix*, double, double)* @IA__FcMatrixShear

; Function Attrs: nounwind ssp uwtable
define hidden noalias %struct._FcMatrix* @IA__FcMatrixCopy(%struct._FcMatrix* readonly) #0 {
  %2 = icmp eq %struct._FcMatrix* %0, null
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = tail call noalias i8* @malloc(i64 32) #6
  %5 = icmp eq i8* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = bitcast i8* %4 to %struct._FcMatrix*
  %8 = bitcast %struct._FcMatrix* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* nonnull align 8 %8, i64 32, i1 false)
  br label %9

9:                                                ; preds = %3, %1, %6
  %10 = phi %struct._FcMatrix* [ %7, %6 ], [ null, %1 ], [ null, %3 ]
  ret %struct._FcMatrix* %10
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @FcMatrixFree(%struct._FcMatrix*) local_unnamed_addr #0 {
  %2 = icmp eq %struct._FcMatrix* %0, @FcIdentityMatrix
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct._FcMatrix* %0 to i8*
  tail call void @free(i8* %4) #6
  br label %5

5:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @IA__FcMatrixEqual(%struct._FcMatrix* readonly, %struct._FcMatrix* readonly) #4 {
  %3 = icmp eq %struct._FcMatrix* %0, %1
  br i1 %3, label %33, label %4

4:                                                ; preds = %2
  %5 = icmp eq %struct._FcMatrix* %0, null
  %6 = icmp eq %struct._FcMatrix* %1, null
  %7 = or i1 %5, %6
  br i1 %7, label %33, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %0, i64 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %1, i64 0, i32 0
  %12 = load double, double* %11, align 8
  %13 = fcmp oeq double %10, %12
  br i1 %13, label %14, label %33

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %0, i64 0, i32 1
  %16 = load double, double* %15, align 8
  %17 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %1, i64 0, i32 1
  %18 = load double, double* %17, align 8
  %19 = fcmp oeq double %16, %18
  br i1 %19, label %20, label %33

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %0, i64 0, i32 2
  %22 = load double, double* %21, align 8
  %23 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %1, i64 0, i32 2
  %24 = load double, double* %23, align 8
  %25 = fcmp oeq double %22, %24
  br i1 %25, label %26, label %33

26:                                               ; preds = %20
  %27 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %0, i64 0, i32 3
  %28 = load double, double* %27, align 8
  %29 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %1, i64 0, i32 3
  %30 = load double, double* %29, align 8
  %31 = fcmp oeq double %28, %30
  %32 = zext i1 %31 to i32
  br label %33

33:                                               ; preds = %8, %14, %20, %26, %4, %2
  %34 = phi i32 [ 1, %2 ], [ 0, %4 ], [ 0, %20 ], [ 0, %14 ], [ 0, %8 ], [ %32, %26 ]
  ret i32 %34
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @IA__FcMatrixMultiply(%struct._FcMatrix* nocapture, %struct._FcMatrix* nocapture readonly, %struct._FcMatrix* nocapture readonly) #5 {
  %4 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %1, i64 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %1, i64 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %2, i64 0, i32 2
  %9 = bitcast %struct._FcMatrix* %2 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = insertelement <2 x double> undef, double %5, i32 0
  %12 = shufflevector <2 x double> %11, <2 x double> undef, <2 x i32> zeroinitializer
  %13 = fmul <2 x double> %12, %10
  %14 = bitcast double* %8 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 8
  %16 = insertelement <2 x double> undef, double %7, i32 0
  %17 = shufflevector <2 x double> %16, <2 x double> undef, <2 x i32> zeroinitializer
  %18 = fmul <2 x double> %17, %15
  %19 = fadd <2 x double> %13, %18
  %20 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %1, i64 0, i32 2
  %21 = load double, double* %20, align 8
  %22 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %1, i64 0, i32 3
  %23 = load double, double* %22, align 8
  %24 = insertelement <2 x double> undef, double %21, i32 0
  %25 = shufflevector <2 x double> %24, <2 x double> undef, <2 x i32> zeroinitializer
  %26 = fmul <2 x double> %10, %25
  %27 = insertelement <2 x double> undef, double %23, i32 0
  %28 = shufflevector <2 x double> %27, <2 x double> undef, <2 x i32> zeroinitializer
  %29 = fmul <2 x double> %15, %28
  %30 = fadd <2 x double> %26, %29
  %31 = bitcast %struct._FcMatrix* %0 to <2 x double>*
  store <2 x double> %19, <2 x double>* %31, align 8
  %32 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %0, i64 0, i32 2
  %33 = bitcast double* %32 to <2 x double>*
  store <2 x double> %30, <2 x double>* %33, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @IA__FcMatrixRotate(%struct._FcMatrix* nocapture, double, double) #0 {
  %4 = fsub double -0.000000e+00, %2
  %5 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %0, i64 0, i32 2
  %6 = bitcast %struct._FcMatrix* %0 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = insertelement <2 x double> undef, double %1, i32 0
  %9 = shufflevector <2 x double> %8, <2 x double> undef, <2 x i32> zeroinitializer
  %10 = fmul <2 x double> %7, %9
  %11 = bitcast double* %5 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = insertelement <2 x double> undef, double %4, i32 0
  %14 = shufflevector <2 x double> %13, <2 x double> undef, <2 x i32> zeroinitializer
  %15 = fmul <2 x double> %12, %14
  %16 = fadd <2 x double> %10, %15
  %17 = insertelement <2 x double> undef, double %2, i32 0
  %18 = shufflevector <2 x double> %17, <2 x double> undef, <2 x i32> zeroinitializer
  %19 = fmul <2 x double> %7, %18
  %20 = fmul <2 x double> %12, %9
  %21 = fadd <2 x double> %19, %20
  %22 = bitcast %struct._FcMatrix* %0 to <2 x double>*
  store <2 x double> %16, <2 x double>* %22, align 8
  %23 = bitcast double* %5 to <2 x double>*
  store <2 x double> %21, <2 x double>* %23, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @IA__FcMatrixScale(%struct._FcMatrix* nocapture, double, double) #0 {
  %4 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %0, i64 0, i32 2
  %5 = bitcast %struct._FcMatrix* %0 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = insertelement <2 x double> undef, double %1, i32 0
  %8 = shufflevector <2 x double> %7, <2 x double> undef, <2 x i32> zeroinitializer
  %9 = fmul <2 x double> %6, %8
  %10 = bitcast double* %4 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = fmul <2 x double> %11, zeroinitializer
  %13 = fadd <2 x double> %9, %12
  %14 = fmul <2 x double> %6, zeroinitializer
  %15 = insertelement <2 x double> undef, double %2, i32 0
  %16 = shufflevector <2 x double> %15, <2 x double> undef, <2 x i32> zeroinitializer
  %17 = fmul <2 x double> %11, %16
  %18 = fadd <2 x double> %14, %17
  %19 = bitcast %struct._FcMatrix* %0 to <2 x double>*
  store <2 x double> %13, <2 x double>* %19, align 8
  %20 = bitcast double* %4 to <2 x double>*
  store <2 x double> %18, <2 x double>* %20, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @IA__FcMatrixShear(%struct._FcMatrix* nocapture, double, double) #0 {
  %4 = getelementptr inbounds %struct._FcMatrix, %struct._FcMatrix* %0, i64 0, i32 2
  %5 = bitcast %struct._FcMatrix* %0 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = bitcast double* %4 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = insertelement <2 x double> undef, double %1, i32 0
  %10 = shufflevector <2 x double> %9, <2 x double> undef, <2 x i32> zeroinitializer
  %11 = fmul <2 x double> %8, %10
  %12 = fadd <2 x double> %6, %11
  %13 = insertelement <2 x double> undef, double %2, i32 0
  %14 = shufflevector <2 x double> %13, <2 x double> undef, <2 x i32> zeroinitializer
  %15 = fmul <2 x double> %6, %14
  %16 = fadd <2 x double> %15, %8
  %17 = bitcast %struct._FcMatrix* %0 to <2 x double>*
  store <2 x double> %12, <2 x double>* %17, align 8
  %18 = bitcast double* %4 to <2 x double>*
  store <2 x double> %16, <2 x double>* %18, align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
