; ModuleID = '../../components/autofill/core/browser/data_model/phone_number.cc'
source_filename = "../../components/autofill/core/browser/data_model/phone_number.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::Feature" = type { i8*, i32 }
%"class.autofill::PhoneNumber" = type { %"class.autofill::FormGroup", %"class.std::__1::basic_string", %"class.autofill::AutofillProfile"*, %"class.autofill::i18n::PhoneObject" }
%"class.autofill::FormGroup" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.autofill::i18n::PhoneObject" = type { %"class.std::__1::basic_string.1", %"class.std::__1::unique_ptr", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.4 }
%union.anon.4 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.i18n::phonenumbers::PhoneNumber"* }
%"class.i18n::phonenumbers::PhoneNumber" = type opaque
%"class.autofill::AutofillProfile" = type { %"class.autofill::AutofillDataModel", %"class.autofill::NameInfo", %"class.autofill::EmailInfo", %"class.autofill::CompanyInfo", %"class.autofill::PhoneNumber", %"class.autofill::Address", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", i8, %"class.std::__1::basic_string.1", %"class.base::Time", i32, i8, i8, %"class.std::__1::map", %"class.std::__1::map", %"class.base::WeakPtrFactory" }
%"class.autofill::AutofillDataModel" = type { %"class.autofill::FormGroup", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", i64, %"class.base::Time", %"class.base::Time" }
%"class.autofill::NameInfo" = type { %"class.autofill::FormGroup", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::unique_ptr.13" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.autofill::structured_address::AddressComponent"* }
%"class.autofill::structured_address::AddressComponent" = type <{ i32 (...)**, %"class.absl::optional", i32, i32, %"class.std::__1::vector", %"class.absl::optional.22", %"class.autofill::structured_address::AddressComponent"*, i32, [4 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.16 }
%union.anon.16 = type { %"class.std::__1::basic_string" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"**, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.autofill::structured_address::AddressComponent"** }
%"class.absl::optional.22" = type { %"class.absl::optional_internal::optional_data.23" }
%"class.absl::optional_internal::optional_data.23" = type { %"class.absl::optional_internal::optional_data_base.24" }
%"class.absl::optional_internal::optional_data_base.24" = type { %"class.absl::optional_internal::optional_data_dtor_base.25" }
%"class.absl::optional_internal::optional_data_dtor_base.25" = type { i8, %union.anon.26 }
%union.anon.26 = type { %"class.std::__1::vector.27" }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"*, %"class.std::__1::__compressed_pair.29" }
%"struct.autofill::structured_address::AddressToken" = type opaque
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.autofill::structured_address::AddressToken"* }
%"class.autofill::EmailInfo" = type { %"class.autofill::FormGroup", %"class.std::__1::basic_string" }
%"class.autofill::CompanyInfo" = type { %"class.autofill::FormGroup", %"class.std::__1::basic_string", %"class.autofill::AutofillProfile"* }
%"class.autofill::Address" = type { %"class.autofill::FormGroup", %"class.std::__1::vector.37", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string.1", %"class.autofill::structured_address::Address" }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.std::__1::basic_string"* }
%"class.autofill::structured_address::Address" = type { %"class.autofill::structured_address::AddressComponent.base", %"class.autofill::structured_address::StreetAddress", %"class.autofill::structured_address::PostalCode", %"class.autofill::structured_address::SortingCode", %"class.autofill::structured_address::DependentLocality", %"class.autofill::structured_address::City", %"class.autofill::structured_address::State", %"class.autofill::structured_address::CountryCode" }
%"class.autofill::structured_address::AddressComponent.base" = type <{ i32 (...)**, %"class.absl::optional", i32, i32, %"class.std::__1::vector", %"class.absl::optional.22", %"class.autofill::structured_address::AddressComponent"*, i32 }>
%"class.autofill::structured_address::StreetAddress" = type { %"class.autofill::structured_address::AddressComponentWithRewriter.base", [4 x i8], %"class.autofill::structured_address::StreetAndDependentStreetName", %"class.autofill::structured_address::HouseNumber", %"class.autofill::structured_address::Premise", %"class.autofill::structured_address::SubPremise", %"class.std::__1::vector.37" }
%"class.autofill::structured_address::AddressComponentWithRewriter.base" = type { %"class.autofill::structured_address::AddressComponent.base" }
%"class.autofill::structured_address::StreetAndDependentStreetName" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8], %"class.autofill::structured_address::StreetName", %"class.autofill::structured_address::DependentStreetName" }
%"class.autofill::structured_address::StreetName" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::DependentStreetName" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::HouseNumber" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::Premise" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::SubPremise" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8], %"class.autofill::structured_address::Floor", %"class.autofill::structured_address::Apartment" }
%"class.autofill::structured_address::Floor" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::Apartment" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::PostalCode" = type { %"class.autofill::structured_address::AddressComponentWithRewriter.base", [4 x i8] }
%"class.autofill::structured_address::SortingCode" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::DependentLocality" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::City" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::State" = type { %"class.autofill::structured_address::AddressComponentWithRewriter.base", [4 x i8] }
%"class.autofill::structured_address::CountryCode" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.44", %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { i64 }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.52" }
%"struct.std::__1::__atomic_base.52" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.53" }
%"struct.std::__1::atomic.53" = type { %"struct.std::__1::__atomic_base.54" }
%"struct.std::__1::__atomic_base.54" = type { %"struct.std::__1::__atomic_base.55" }
%"struct.std::__1::__atomic_base.55" = type { %"struct.std::__1::__cxx_atomic_impl.56" }
%"struct.std::__1::__cxx_atomic_impl.56" = type { %"struct.std::__1::__cxx_atomic_base_impl.57" }
%"struct.std::__1::__cxx_atomic_base_impl.57" = type { i8 }
%"class.autofill::PhoneNumber::PhoneCombineHelper" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.autofill::DenseSet" = type { %"class.std::__1::bitset" }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { [2 x i64] }
%"class.autofill::AutofillType" = type { i32, i32, i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.5 }
%struct.anon.5 = type { i8 }
%"class.std::__1::allocator" = type { i8 }

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_ = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEC2ERKS5_mmRKS4_ = comdat any

@_ZTVN8autofill11PhoneNumberE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.autofill::PhoneNumber"*)* @_ZN8autofill11PhoneNumberD2Ev to i8*), i8* bitcast (void (%"class.autofill::PhoneNumber"*)* @_ZN8autofill11PhoneNumberD0Ev to i8*), i8* bitcast (void (%"class.autofill::PhoneNumber"*, %"class.std::__1::basic_string"*, %"class.std::__1::basic_string.1"*, %"class.autofill::DenseSet"*)* @_ZNK8autofill11PhoneNumber16GetMatchingTypesERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEERKNS2_IcNS3_IcEENS5_IcEEEEPNS_8DenseSetINS_15ServerFieldTypeELSG_118EEE to i8*), i8* bitcast (void (%"class.autofill::FormGroup"*, %"class.std::__1::basic_string.1"*, %"class.autofill::DenseSet"*)* @_ZNK8autofill9FormGroup16GetNonEmptyTypesERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS_8DenseSetINS_15ServerFieldTypeELSB_118EEE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.autofill::PhoneNumber"*, i32)* @_ZNK8autofill11PhoneNumber10GetRawInfoENS_15ServerFieldTypeE to i8*), i8* bitcast (void (%"class.autofill::PhoneNumber"*, i32, %"class.std::__1::basic_string"*, i32)* @_ZN8autofill11PhoneNumber32SetRawInfoWithVerificationStatusENS_15ServerFieldTypeERKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEENS_18structured_address18VerificationStatusE to i8*), i8* bitcast (i32 (%"class.autofill::FormGroup"*, i32)* @_ZNK8autofill9FormGroup21GetVerificationStatusENS_15ServerFieldTypeE to i8*), i8* bitcast (void (%"class.autofill::PhoneNumber"*, %"class.autofill::DenseSet"*)* @_ZNK8autofill11PhoneNumber17GetSupportedTypesEPNS_8DenseSetINS_15ServerFieldTypeELS2_118EEE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.autofill::PhoneNumber"*, %"class.autofill::AutofillType"*, %"class.std::__1::basic_string.1"*)* @_ZNK8autofill11PhoneNumber11GetInfoImplERKNS_12AutofillTypeERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE to i8*), i8* bitcast (i1 (%"class.autofill::PhoneNumber"*, %"class.autofill::AutofillType"*, %"class.std::__1::basic_string"*, %"class.std::__1::basic_string.1"*, i32)* @_ZN8autofill11PhoneNumber33SetInfoWithVerificationStatusImplERKNS_12AutofillTypeERKNSt3__112basic_stringIDsNS4_11char_traitsIDsEENS4_9allocatorIDsEEEERKNS5_IcNS6_IcEENS8_IcEEEENS_18structured_address18VerificationStatusE to i8*), i8* bitcast (i32 (%"class.autofill::FormGroup"*, i32)* @_ZNK8autofill9FormGroup25GetVerificationStatusImplENS_15ServerFieldTypeE to i8*)] }, align 8
@.str = private unnamed_addr constant [6 x i16] [i16 32, i16 46, i16 40, i16 41, i16 45, i16 0], align 2
@.str.1 = private unnamed_addr constant [3 x i8] c"US\00", align 1
@_ZN8autofill8features40kAutofillEnableAugmentedPhoneCountryCodeE = external global %"struct.base::Feature", align 8
@.str.2 = private unnamed_addr constant [12 x i16] [i16 43, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 54, i16 55, i16 56, i16 57, i16 0], align 2

@_ZN8autofill11PhoneNumberC1EPKNS_15AutofillProfileE = hidden unnamed_addr alias void (%"class.autofill::PhoneNumber"*, %"class.autofill::AutofillProfile"*), void (%"class.autofill::PhoneNumber"*, %"class.autofill::AutofillProfile"*)* @_ZN8autofill11PhoneNumberC2EPKNS_15AutofillProfileE
@_ZN8autofill11PhoneNumberC1ERKS0_ = hidden unnamed_addr alias void (%"class.autofill::PhoneNumber"*, %"class.autofill::PhoneNumber"*), void (%"class.autofill::PhoneNumber"*, %"class.autofill::PhoneNumber"*)* @_ZN8autofill11PhoneNumberC2ERKS0_
@_ZN8autofill11PhoneNumberD1Ev = hidden unnamed_addr alias void (%"class.autofill::PhoneNumber"*), void (%"class.autofill::PhoneNumber"*)* @_ZN8autofill11PhoneNumberD2Ev
@_ZN8autofill11PhoneNumber18PhoneCombineHelperC1Ev = hidden unnamed_addr alias void (%"class.autofill::PhoneNumber::PhoneCombineHelper"*), void (%"class.autofill::PhoneNumber::PhoneCombineHelper"*)* @_ZN8autofill11PhoneNumber18PhoneCombineHelperC2Ev
@_ZN8autofill11PhoneNumber18PhoneCombineHelperD1Ev = hidden unnamed_addr alias void (%"class.autofill::PhoneNumber::PhoneCombineHelper"*), void (%"class.autofill::PhoneNumber::PhoneCombineHelper"*)* @_ZN8autofill11PhoneNumber18PhoneCombineHelperD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill11PhoneNumberC2EPKNS_15AutofillProfileE(%"class.autofill::PhoneNumber"*, %"class.autofill::AutofillProfile"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN8autofill11PhoneNumberE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 1
  %5 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #11
  %6 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 2
  store %"class.autofill::AutofillProfile"* %1, %"class.autofill::AutofillProfile"** %6, align 8
  %7 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 3
  tail call void @_ZN8autofill4i18n11PhoneObjectC1Ev(%"class.autofill::i18n::PhoneObject"* %7) #11
  ret void
}

declare void @_ZN8autofill4i18n11PhoneObjectC1Ev(%"class.autofill::i18n::PhoneObject"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill11PhoneNumberC2ERKS0_(%"class.autofill::PhoneNumber"*, %"class.autofill::PhoneNumber"* dereferenceable(192)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN8autofill11PhoneNumberE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 3
  %6 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 32, i1 false)
  tail call void @_ZN8autofill4i18n11PhoneObjectC1Ev(%"class.autofill::i18n::PhoneObject"* %5) #11
  %7 = icmp eq %"class.autofill::PhoneNumber"* %0, %1
  br i1 %7, label %18, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 1
  %11 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %4, %"class.std::__1::basic_string"* dereferenceable(24) %10) #11
  %12 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 2
  %13 = bitcast %"class.autofill::AutofillProfile"** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.autofill::AutofillProfile"** %9 to i64*
  store i64 %14, i64* %15, align 8
  %16 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 3
  %17 = tail call dereferenceable(152) %"class.autofill::i18n::PhoneObject"* @_ZN8autofill4i18n11PhoneObjectaSERKS1_(%"class.autofill::i18n::PhoneObject"* %5, %"class.autofill::i18n::PhoneObject"* dereferenceable(152) %16) #11
  br label %18

18:                                               ; preds = %2, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(192) %"class.autofill::PhoneNumber"* @_ZN8autofill11PhoneNumberaSERKS0_(%"class.autofill::PhoneNumber"* returned, %"class.autofill::PhoneNumber"* dereferenceable(192)) local_unnamed_addr #0 align 2 {
  %3 = icmp eq %"class.autofill::PhoneNumber"* %0, %1
  br i1 %3, label %16, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 1
  %6 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 1
  %7 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %6, %"class.std::__1::basic_string"* dereferenceable(24) %5)
  %8 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 2
  %9 = bitcast %"class.autofill::AutofillProfile"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 2
  %12 = bitcast %"class.autofill::AutofillProfile"** %11 to i64*
  store i64 %10, i64* %12, align 8
  %13 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 3
  %14 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 3
  %15 = tail call dereferenceable(152) %"class.autofill::i18n::PhoneObject"* @_ZN8autofill4i18n11PhoneObjectaSERKS1_(%"class.autofill::i18n::PhoneObject"* %14, %"class.autofill::i18n::PhoneObject"* dereferenceable(152) %13) #11
  br label %16

16:                                               ; preds = %2, %4
  ret %"class.autofill::PhoneNumber"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill11PhoneNumberD2Ev(%"class.autofill::PhoneNumber"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN8autofill11PhoneNumberE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 3
  tail call void @_ZN8autofill4i18n11PhoneObjectD1Ev(%"class.autofill::i18n::PhoneObject"* %3) #11
  %4 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 1
  %5 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %5, i64 0, i32 1, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %1
  %10 = bitcast %"class.std::__1::basic_string"* %4 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_ZdlPv(i8* %11) #12
  br label %12

12:                                               ; preds = %1, %9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN8autofill4i18n11PhoneObjectD1Ev(%"class.autofill::i18n::PhoneObject"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill11PhoneNumberD0Ev(%"class.autofill::PhoneNumber"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN8autofill11PhoneNumberE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 3
  tail call void @_ZN8autofill4i18n11PhoneObjectD1Ev(%"class.autofill::i18n::PhoneObject"* %3) #11
  %4 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 1
  %5 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %5, i64 0, i32 1, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %1
  %10 = bitcast %"class.std::__1::basic_string"* %4 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_ZdlPv(i8* %11) #12
  br label %12

12:                                               ; preds = %1, %9
  %13 = bitcast %"class.autofill::PhoneNumber"* %0 to i8*
  tail call void @_ZdlPv(i8* %13) #12
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %4 = icmp eq %"class.std::__1::basic_string"* %0, %1
  br i1 %4, label %510, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %10, i64 0, i32 1, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %9, label %341, label %14

14:                                               ; preds = %5
  br i1 %13, label %17, label %15

15:                                               ; preds = %14
  %16 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %16, i64 24, i1 false)
  br label %510

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  %20 = bitcast i16* %19 to i8*
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp ult i64 %22, 11
  br i1 %23, label %24, label %175

24:                                               ; preds = %17
  %25 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %26 = trunc i64 %22 to i8
  store i8 %26, i8* %7, align 1
  %27 = icmp eq i64 %22, 0
  br i1 %27, label %173, label %28

28:                                               ; preds = %24
  %29 = icmp ult i64 %22, 16
  br i1 %29, label %120, label %30

30:                                               ; preds = %28
  %31 = shl i64 %22, 1
  %32 = getelementptr i8, i8* %3, i64 %31
  %33 = getelementptr i16, i16* %19, i64 %22
  %34 = bitcast i16* %33 to %"class.std::__1::basic_string"*
  %35 = icmp ugt %"class.std::__1::basic_string"* %34, %0
  %36 = icmp ugt i8* %32, %20
  %37 = and i1 %35, %36
  br i1 %37, label %120, label %38

38:                                               ; preds = %30
  %39 = and i64 %22, -16
  %40 = sub i64 %22, %39
  %41 = getelementptr i16, i16* %19, i64 %39
  %42 = getelementptr i16, i16* %25, i64 %39
  %43 = add i64 %39, -16
  %44 = lshr exact i64 %43, 4
  %45 = add nuw nsw i64 %44, 1
  %46 = and i64 %45, 3
  %47 = icmp ult i64 %43, 48
  br i1 %47, label %99, label %48

48:                                               ; preds = %38
  %49 = sub nsw i64 %45, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %96, %50 ]
  %52 = phi i64 [ %49, %48 ], [ %97, %50 ]
  %53 = getelementptr i16, i16* %19, i64 %51
  %54 = getelementptr i16, i16* %25, i64 %51
  %55 = bitcast i16* %53 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2, !alias.scope !2
  %57 = getelementptr i16, i16* %53, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !2
  %60 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %60, align 2, !alias.scope !5, !noalias !2
  %61 = getelementptr i16, i16* %54, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %62, align 2, !alias.scope !5, !noalias !2
  %63 = or i64 %51, 16
  %64 = getelementptr i16, i16* %19, i64 %63
  %65 = getelementptr i16, i16* %25, i64 %63
  %66 = bitcast i16* %64 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2, !alias.scope !2
  %68 = getelementptr i16, i16* %64, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2, !alias.scope !2
  %71 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %71, align 2, !alias.scope !5, !noalias !2
  %72 = getelementptr i16, i16* %65, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %73, align 2, !alias.scope !5, !noalias !2
  %74 = or i64 %51, 32
  %75 = getelementptr i16, i16* %19, i64 %74
  %76 = getelementptr i16, i16* %25, i64 %74
  %77 = bitcast i16* %75 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !2
  %79 = getelementptr i16, i16* %75, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !2
  %82 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %82, align 2, !alias.scope !5, !noalias !2
  %83 = getelementptr i16, i16* %76, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 2, !alias.scope !5, !noalias !2
  %85 = or i64 %51, 48
  %86 = getelementptr i16, i16* %19, i64 %85
  %87 = getelementptr i16, i16* %25, i64 %85
  %88 = bitcast i16* %86 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !2
  %90 = getelementptr i16, i16* %86, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !2
  %93 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %93, align 2, !alias.scope !5, !noalias !2
  %94 = getelementptr i16, i16* %87, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2, !alias.scope !5, !noalias !2
  %96 = add i64 %51, 64
  %97 = add i64 %52, -4
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %50, !llvm.loop !7

99:                                               ; preds = %50, %38
  %100 = phi i64 [ 0, %38 ], [ %96, %50 ]
  %101 = icmp eq i64 %46, 0
  br i1 %101, label %118, label %102

102:                                              ; preds = %99, %102
  %103 = phi i64 [ %115, %102 ], [ %100, %99 ]
  %104 = phi i64 [ %116, %102 ], [ %46, %99 ]
  %105 = getelementptr i16, i16* %19, i64 %103
  %106 = getelementptr i16, i16* %25, i64 %103
  %107 = bitcast i16* %105 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !2
  %109 = getelementptr i16, i16* %105, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !2
  %112 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 2, !alias.scope !5, !noalias !2
  %113 = getelementptr i16, i16* %106, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %114, align 2, !alias.scope !5, !noalias !2
  %115 = add i64 %103, 16
  %116 = add i64 %104, -1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %102, !llvm.loop !9

118:                                              ; preds = %102, %99
  %119 = icmp eq i64 %22, %39
  br i1 %119, label %173, label %120

120:                                              ; preds = %118, %30, %28
  %121 = phi i64 [ %22, %30 ], [ %22, %28 ], [ %40, %118 ]
  %122 = phi i16* [ %19, %30 ], [ %19, %28 ], [ %41, %118 ]
  %123 = phi i16* [ %25, %30 ], [ %25, %28 ], [ %42, %118 ]
  %124 = add i64 %121, -1
  %125 = and i64 %121, 7
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %138, label %127

127:                                              ; preds = %120, %127
  %128 = phi i64 [ %133, %127 ], [ %121, %120 ]
  %129 = phi i16* [ %135, %127 ], [ %122, %120 ]
  %130 = phi i16* [ %134, %127 ], [ %123, %120 ]
  %131 = phi i64 [ %136, %127 ], [ %125, %120 ]
  %132 = load i16, i16* %129, align 2
  store i16 %132, i16* %130, align 2
  %133 = add i64 %128, -1
  %134 = getelementptr inbounds i16, i16* %130, i64 1
  %135 = getelementptr inbounds i16, i16* %129, i64 1
  %136 = add i64 %131, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %127, !llvm.loop !11

138:                                              ; preds = %127, %120
  %139 = phi i64 [ %121, %120 ], [ %133, %127 ]
  %140 = phi i16* [ %122, %120 ], [ %135, %127 ]
  %141 = phi i16* [ %123, %120 ], [ %134, %127 ]
  %142 = icmp ult i64 %124, 7
  br i1 %142, label %173, label %143

143:                                              ; preds = %138, %143
  %144 = phi i64 [ %169, %143 ], [ %139, %138 ]
  %145 = phi i16* [ %171, %143 ], [ %140, %138 ]
  %146 = phi i16* [ %170, %143 ], [ %141, %138 ]
  %147 = load i16, i16* %145, align 2
  store i16 %147, i16* %146, align 2
  %148 = getelementptr inbounds i16, i16* %146, i64 1
  %149 = getelementptr inbounds i16, i16* %145, i64 1
  %150 = load i16, i16* %149, align 2
  store i16 %150, i16* %148, align 2
  %151 = getelementptr inbounds i16, i16* %146, i64 2
  %152 = getelementptr inbounds i16, i16* %145, i64 2
  %153 = load i16, i16* %152, align 2
  store i16 %153, i16* %151, align 2
  %154 = getelementptr inbounds i16, i16* %146, i64 3
  %155 = getelementptr inbounds i16, i16* %145, i64 3
  %156 = load i16, i16* %155, align 2
  store i16 %156, i16* %154, align 2
  %157 = getelementptr inbounds i16, i16* %146, i64 4
  %158 = getelementptr inbounds i16, i16* %145, i64 4
  %159 = load i16, i16* %158, align 2
  store i16 %159, i16* %157, align 2
  %160 = getelementptr inbounds i16, i16* %146, i64 5
  %161 = getelementptr inbounds i16, i16* %145, i64 5
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds i16, i16* %146, i64 6
  %164 = getelementptr inbounds i16, i16* %145, i64 6
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %146, i64 7
  %167 = getelementptr inbounds i16, i16* %145, i64 7
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = add i64 %144, -8
  %170 = getelementptr inbounds i16, i16* %146, i64 8
  %171 = getelementptr inbounds i16, i16* %145, i64 8
  %172 = icmp eq i64 %169, 0
  br i1 %172, label %173, label %143, !llvm.loop !12

173:                                              ; preds = %138, %143, %118, %24
  %174 = getelementptr inbounds i16, i16* %25, i64 %22
  store i16 0, i16* %174, align 2
  br label %510

175:                                              ; preds = %17
  %176 = add i64 %22, -10
  %177 = icmp ugt i64 %176, 9223372036854775780
  br i1 %177, label %178, label %180

178:                                              ; preds = %175
  %179 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %179) #13
  unreachable

180:                                              ; preds = %175
  %181 = icmp ugt i64 %22, 20
  %182 = select i1 %181, i64 %22, i64 20
  %183 = add nuw nsw i64 %182, 8
  %184 = and i64 %183, -8
  %185 = icmp slt i64 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %180
  tail call void @abort() #13
  unreachable

187:                                              ; preds = %180
  %188 = shl i64 %184, 1
  %189 = tail call i8* @_Znwm(i64 %188) #12
  %190 = bitcast i8* %189 to i16*
  %191 = icmp ult i64 %22, 16
  br i1 %191, label %282, label %192

192:                                              ; preds = %187
  %193 = shl i64 %22, 1
  %194 = getelementptr i8, i8* %189, i64 %193
  %195 = getelementptr i16, i16* %19, i64 %22
  %196 = bitcast i16* %195 to i8*
  %197 = icmp ult i8* %189, %196
  %198 = icmp ugt i8* %194, %20
  %199 = and i1 %197, %198
  br i1 %199, label %282, label %200

200:                                              ; preds = %192
  %201 = and i64 %22, -16
  %202 = sub i64 %22, %201
  %203 = getelementptr i16, i16* %19, i64 %201
  %204 = getelementptr i16, i16* %190, i64 %201
  %205 = add i64 %201, -16
  %206 = lshr exact i64 %205, 4
  %207 = add nuw nsw i64 %206, 1
  %208 = and i64 %207, 3
  %209 = icmp ult i64 %205, 48
  br i1 %209, label %261, label %210

210:                                              ; preds = %200
  %211 = sub nsw i64 %207, %208
  br label %212

212:                                              ; preds = %212, %210
  %213 = phi i64 [ 0, %210 ], [ %258, %212 ]
  %214 = phi i64 [ %211, %210 ], [ %259, %212 ]
  %215 = getelementptr i16, i16* %19, i64 %213
  %216 = getelementptr i16, i16* %190, i64 %213
  %217 = bitcast i16* %215 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 2, !alias.scope !13
  %219 = getelementptr i16, i16* %215, i64 8
  %220 = bitcast i16* %219 to <8 x i16>*
  %221 = load <8 x i16>, <8 x i16>* %220, align 2, !alias.scope !13
  %222 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> %218, <8 x i16>* %222, align 2, !alias.scope !16, !noalias !13
  %223 = getelementptr i16, i16* %216, i64 8
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %221, <8 x i16>* %224, align 2, !alias.scope !16, !noalias !13
  %225 = or i64 %213, 16
  %226 = getelementptr i16, i16* %19, i64 %225
  %227 = getelementptr i16, i16* %190, i64 %225
  %228 = bitcast i16* %226 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 2, !alias.scope !13
  %230 = getelementptr i16, i16* %226, i64 8
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2, !alias.scope !13
  %233 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %233, align 2, !alias.scope !16, !noalias !13
  %234 = getelementptr i16, i16* %227, i64 8
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %232, <8 x i16>* %235, align 2, !alias.scope !16, !noalias !13
  %236 = or i64 %213, 32
  %237 = getelementptr i16, i16* %19, i64 %236
  %238 = getelementptr i16, i16* %190, i64 %236
  %239 = bitcast i16* %237 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 2, !alias.scope !13
  %241 = getelementptr i16, i16* %237, i64 8
  %242 = bitcast i16* %241 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 2, !alias.scope !13
  %244 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %244, align 2, !alias.scope !16, !noalias !13
  %245 = getelementptr i16, i16* %238, i64 8
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %246, align 2, !alias.scope !16, !noalias !13
  %247 = or i64 %213, 48
  %248 = getelementptr i16, i16* %19, i64 %247
  %249 = getelementptr i16, i16* %190, i64 %247
  %250 = bitcast i16* %248 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !13
  %252 = getelementptr i16, i16* %248, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !13
  %255 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %255, align 2, !alias.scope !16, !noalias !13
  %256 = getelementptr i16, i16* %249, i64 8
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %257, align 2, !alias.scope !16, !noalias !13
  %258 = add i64 %213, 64
  %259 = add i64 %214, -4
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %212, !llvm.loop !18

261:                                              ; preds = %212, %200
  %262 = phi i64 [ 0, %200 ], [ %258, %212 ]
  %263 = icmp eq i64 %208, 0
  br i1 %263, label %280, label %264

264:                                              ; preds = %261, %264
  %265 = phi i64 [ %277, %264 ], [ %262, %261 ]
  %266 = phi i64 [ %278, %264 ], [ %208, %261 ]
  %267 = getelementptr i16, i16* %19, i64 %265
  %268 = getelementptr i16, i16* %190, i64 %265
  %269 = bitcast i16* %267 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !13
  %271 = getelementptr i16, i16* %267, i64 8
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2, !alias.scope !13
  %274 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %274, align 2, !alias.scope !16, !noalias !13
  %275 = getelementptr i16, i16* %268, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %276, align 2, !alias.scope !16, !noalias !13
  %277 = add i64 %265, 16
  %278 = add i64 %266, -1
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %264, !llvm.loop !19

280:                                              ; preds = %264, %261
  %281 = icmp eq i64 %22, %201
  br i1 %281, label %335, label %282

282:                                              ; preds = %280, %192, %187
  %283 = phi i64 [ %22, %192 ], [ %22, %187 ], [ %202, %280 ]
  %284 = phi i16* [ %19, %192 ], [ %19, %187 ], [ %203, %280 ]
  %285 = phi i16* [ %190, %192 ], [ %190, %187 ], [ %204, %280 ]
  %286 = add i64 %283, -1
  %287 = and i64 %283, 7
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %300, label %289

289:                                              ; preds = %282, %289
  %290 = phi i64 [ %295, %289 ], [ %283, %282 ]
  %291 = phi i16* [ %297, %289 ], [ %284, %282 ]
  %292 = phi i16* [ %296, %289 ], [ %285, %282 ]
  %293 = phi i64 [ %298, %289 ], [ %287, %282 ]
  %294 = load i16, i16* %291, align 2
  store i16 %294, i16* %292, align 2
  %295 = add i64 %290, -1
  %296 = getelementptr inbounds i16, i16* %292, i64 1
  %297 = getelementptr inbounds i16, i16* %291, i64 1
  %298 = add i64 %293, -1
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %300, label %289, !llvm.loop !20

300:                                              ; preds = %289, %282
  %301 = phi i64 [ %283, %282 ], [ %295, %289 ]
  %302 = phi i16* [ %284, %282 ], [ %297, %289 ]
  %303 = phi i16* [ %285, %282 ], [ %296, %289 ]
  %304 = icmp ult i64 %286, 7
  br i1 %304, label %335, label %305

305:                                              ; preds = %300, %305
  %306 = phi i64 [ %331, %305 ], [ %301, %300 ]
  %307 = phi i16* [ %333, %305 ], [ %302, %300 ]
  %308 = phi i16* [ %332, %305 ], [ %303, %300 ]
  %309 = load i16, i16* %307, align 2
  store i16 %309, i16* %308, align 2
  %310 = getelementptr inbounds i16, i16* %308, i64 1
  %311 = getelementptr inbounds i16, i16* %307, i64 1
  %312 = load i16, i16* %311, align 2
  store i16 %312, i16* %310, align 2
  %313 = getelementptr inbounds i16, i16* %308, i64 2
  %314 = getelementptr inbounds i16, i16* %307, i64 2
  %315 = load i16, i16* %314, align 2
  store i16 %315, i16* %313, align 2
  %316 = getelementptr inbounds i16, i16* %308, i64 3
  %317 = getelementptr inbounds i16, i16* %307, i64 3
  %318 = load i16, i16* %317, align 2
  store i16 %318, i16* %316, align 2
  %319 = getelementptr inbounds i16, i16* %308, i64 4
  %320 = getelementptr inbounds i16, i16* %307, i64 4
  %321 = load i16, i16* %320, align 2
  store i16 %321, i16* %319, align 2
  %322 = getelementptr inbounds i16, i16* %308, i64 5
  %323 = getelementptr inbounds i16, i16* %307, i64 5
  %324 = load i16, i16* %323, align 2
  store i16 %324, i16* %322, align 2
  %325 = getelementptr inbounds i16, i16* %308, i64 6
  %326 = getelementptr inbounds i16, i16* %307, i64 6
  %327 = load i16, i16* %326, align 2
  store i16 %327, i16* %325, align 2
  %328 = getelementptr inbounds i16, i16* %308, i64 7
  %329 = getelementptr inbounds i16, i16* %307, i64 7
  %330 = load i16, i16* %329, align 2
  store i16 %330, i16* %328, align 2
  %331 = add i64 %306, -8
  %332 = getelementptr inbounds i16, i16* %308, i64 8
  %333 = getelementptr inbounds i16, i16* %307, i64 8
  %334 = icmp eq i64 %331, 0
  br i1 %334, label %335, label %305, !llvm.loop !21

335:                                              ; preds = %300, %305, %280
  %336 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %189, i8** %336, align 8
  %337 = or i64 %184, -9223372036854775808
  %338 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %337, i64* %338, align 8
  %339 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %22, i64* %339, align 8
  %340 = getelementptr inbounds i16, i16* %190, i64 %22
  store i16 0, i16* %340, align 2
  br label %510

341:                                              ; preds = %5
  %342 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %343 = load i16*, i16** %342, align 8
  %344 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %345 = load i64, i64* %344, align 8
  %346 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %347 = zext i8 %12 to i64
  %348 = select i1 %13, i16* %343, i16* %346
  %349 = select i1 %13, i64 %345, i64 %347
  %350 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %351 = load i64, i64* %350, align 8
  %352 = and i64 %351, 9223372036854775807
  %353 = icmp ugt i64 %352, %349
  br i1 %353, label %354, label %504

354:                                              ; preds = %341
  %355 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %356 = load i16*, i16** %355, align 8
  %357 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %349, i64* %357, align 8
  %358 = icmp eq i64 %349, 0
  br i1 %358, label %502, label %359

359:                                              ; preds = %354
  %360 = icmp ult i64 %349, 16
  br i1 %360, label %449, label %361

361:                                              ; preds = %359
  %362 = getelementptr i16, i16* %356, i64 %349
  %363 = getelementptr i16, i16* %348, i64 %349
  %364 = icmp ult i16* %356, %363
  %365 = icmp ult i16* %348, %362
  %366 = and i1 %364, %365
  br i1 %366, label %449, label %367

367:                                              ; preds = %361
  %368 = and i64 %349, -16
  %369 = sub i64 %349, %368
  %370 = getelementptr i16, i16* %348, i64 %368
  %371 = getelementptr i16, i16* %356, i64 %368
  %372 = add i64 %368, -16
  %373 = lshr exact i64 %372, 4
  %374 = add nuw nsw i64 %373, 1
  %375 = and i64 %374, 3
  %376 = icmp ult i64 %372, 48
  br i1 %376, label %428, label %377

377:                                              ; preds = %367
  %378 = sub nsw i64 %374, %375
  br label %379

379:                                              ; preds = %379, %377
  %380 = phi i64 [ 0, %377 ], [ %425, %379 ]
  %381 = phi i64 [ %378, %377 ], [ %426, %379 ]
  %382 = getelementptr i16, i16* %348, i64 %380
  %383 = getelementptr i16, i16* %356, i64 %380
  %384 = bitcast i16* %382 to <8 x i16>*
  %385 = load <8 x i16>, <8 x i16>* %384, align 2, !alias.scope !22
  %386 = getelementptr i16, i16* %382, i64 8
  %387 = bitcast i16* %386 to <8 x i16>*
  %388 = load <8 x i16>, <8 x i16>* %387, align 2, !alias.scope !22
  %389 = bitcast i16* %383 to <8 x i16>*
  store <8 x i16> %385, <8 x i16>* %389, align 2, !alias.scope !25, !noalias !22
  %390 = getelementptr i16, i16* %383, i64 8
  %391 = bitcast i16* %390 to <8 x i16>*
  store <8 x i16> %388, <8 x i16>* %391, align 2, !alias.scope !25, !noalias !22
  %392 = or i64 %380, 16
  %393 = getelementptr i16, i16* %348, i64 %392
  %394 = getelementptr i16, i16* %356, i64 %392
  %395 = bitcast i16* %393 to <8 x i16>*
  %396 = load <8 x i16>, <8 x i16>* %395, align 2, !alias.scope !22
  %397 = getelementptr i16, i16* %393, i64 8
  %398 = bitcast i16* %397 to <8 x i16>*
  %399 = load <8 x i16>, <8 x i16>* %398, align 2, !alias.scope !22
  %400 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %396, <8 x i16>* %400, align 2, !alias.scope !25, !noalias !22
  %401 = getelementptr i16, i16* %394, i64 8
  %402 = bitcast i16* %401 to <8 x i16>*
  store <8 x i16> %399, <8 x i16>* %402, align 2, !alias.scope !25, !noalias !22
  %403 = or i64 %380, 32
  %404 = getelementptr i16, i16* %348, i64 %403
  %405 = getelementptr i16, i16* %356, i64 %403
  %406 = bitcast i16* %404 to <8 x i16>*
  %407 = load <8 x i16>, <8 x i16>* %406, align 2, !alias.scope !22
  %408 = getelementptr i16, i16* %404, i64 8
  %409 = bitcast i16* %408 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 2, !alias.scope !22
  %411 = bitcast i16* %405 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %411, align 2, !alias.scope !25, !noalias !22
  %412 = getelementptr i16, i16* %405, i64 8
  %413 = bitcast i16* %412 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %413, align 2, !alias.scope !25, !noalias !22
  %414 = or i64 %380, 48
  %415 = getelementptr i16, i16* %348, i64 %414
  %416 = getelementptr i16, i16* %356, i64 %414
  %417 = bitcast i16* %415 to <8 x i16>*
  %418 = load <8 x i16>, <8 x i16>* %417, align 2, !alias.scope !22
  %419 = getelementptr i16, i16* %415, i64 8
  %420 = bitcast i16* %419 to <8 x i16>*
  %421 = load <8 x i16>, <8 x i16>* %420, align 2, !alias.scope !22
  %422 = bitcast i16* %416 to <8 x i16>*
  store <8 x i16> %418, <8 x i16>* %422, align 2, !alias.scope !25, !noalias !22
  %423 = getelementptr i16, i16* %416, i64 8
  %424 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %421, <8 x i16>* %424, align 2, !alias.scope !25, !noalias !22
  %425 = add i64 %380, 64
  %426 = add i64 %381, -4
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %428, label %379, !llvm.loop !27

428:                                              ; preds = %379, %367
  %429 = phi i64 [ 0, %367 ], [ %425, %379 ]
  %430 = icmp eq i64 %375, 0
  br i1 %430, label %447, label %431

431:                                              ; preds = %428, %431
  %432 = phi i64 [ %444, %431 ], [ %429, %428 ]
  %433 = phi i64 [ %445, %431 ], [ %375, %428 ]
  %434 = getelementptr i16, i16* %348, i64 %432
  %435 = getelementptr i16, i16* %356, i64 %432
  %436 = bitcast i16* %434 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 2, !alias.scope !22
  %438 = getelementptr i16, i16* %434, i64 8
  %439 = bitcast i16* %438 to <8 x i16>*
  %440 = load <8 x i16>, <8 x i16>* %439, align 2, !alias.scope !22
  %441 = bitcast i16* %435 to <8 x i16>*
  store <8 x i16> %437, <8 x i16>* %441, align 2, !alias.scope !25, !noalias !22
  %442 = getelementptr i16, i16* %435, i64 8
  %443 = bitcast i16* %442 to <8 x i16>*
  store <8 x i16> %440, <8 x i16>* %443, align 2, !alias.scope !25, !noalias !22
  %444 = add i64 %432, 16
  %445 = add i64 %433, -1
  %446 = icmp eq i64 %445, 0
  br i1 %446, label %447, label %431, !llvm.loop !28

447:                                              ; preds = %431, %428
  %448 = icmp eq i64 %349, %368
  br i1 %448, label %502, label %449

449:                                              ; preds = %447, %361, %359
  %450 = phi i64 [ %349, %361 ], [ %349, %359 ], [ %369, %447 ]
  %451 = phi i16* [ %348, %361 ], [ %348, %359 ], [ %370, %447 ]
  %452 = phi i16* [ %356, %361 ], [ %356, %359 ], [ %371, %447 ]
  %453 = add i64 %450, -1
  %454 = and i64 %450, 7
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %467, label %456

456:                                              ; preds = %449, %456
  %457 = phi i64 [ %462, %456 ], [ %450, %449 ]
  %458 = phi i16* [ %464, %456 ], [ %451, %449 ]
  %459 = phi i16* [ %463, %456 ], [ %452, %449 ]
  %460 = phi i64 [ %465, %456 ], [ %454, %449 ]
  %461 = load i16, i16* %458, align 2
  store i16 %461, i16* %459, align 2
  %462 = add i64 %457, -1
  %463 = getelementptr inbounds i16, i16* %459, i64 1
  %464 = getelementptr inbounds i16, i16* %458, i64 1
  %465 = add i64 %460, -1
  %466 = icmp eq i64 %465, 0
  br i1 %466, label %467, label %456, !llvm.loop !29

467:                                              ; preds = %456, %449
  %468 = phi i64 [ %450, %449 ], [ %462, %456 ]
  %469 = phi i16* [ %451, %449 ], [ %464, %456 ]
  %470 = phi i16* [ %452, %449 ], [ %463, %456 ]
  %471 = icmp ult i64 %453, 7
  br i1 %471, label %502, label %472

472:                                              ; preds = %467, %472
  %473 = phi i64 [ %498, %472 ], [ %468, %467 ]
  %474 = phi i16* [ %500, %472 ], [ %469, %467 ]
  %475 = phi i16* [ %499, %472 ], [ %470, %467 ]
  %476 = load i16, i16* %474, align 2
  store i16 %476, i16* %475, align 2
  %477 = getelementptr inbounds i16, i16* %475, i64 1
  %478 = getelementptr inbounds i16, i16* %474, i64 1
  %479 = load i16, i16* %478, align 2
  store i16 %479, i16* %477, align 2
  %480 = getelementptr inbounds i16, i16* %475, i64 2
  %481 = getelementptr inbounds i16, i16* %474, i64 2
  %482 = load i16, i16* %481, align 2
  store i16 %482, i16* %480, align 2
  %483 = getelementptr inbounds i16, i16* %475, i64 3
  %484 = getelementptr inbounds i16, i16* %474, i64 3
  %485 = load i16, i16* %484, align 2
  store i16 %485, i16* %483, align 2
  %486 = getelementptr inbounds i16, i16* %475, i64 4
  %487 = getelementptr inbounds i16, i16* %474, i64 4
  %488 = load i16, i16* %487, align 2
  store i16 %488, i16* %486, align 2
  %489 = getelementptr inbounds i16, i16* %475, i64 5
  %490 = getelementptr inbounds i16, i16* %474, i64 5
  %491 = load i16, i16* %490, align 2
  store i16 %491, i16* %489, align 2
  %492 = getelementptr inbounds i16, i16* %475, i64 6
  %493 = getelementptr inbounds i16, i16* %474, i64 6
  %494 = load i16, i16* %493, align 2
  store i16 %494, i16* %492, align 2
  %495 = getelementptr inbounds i16, i16* %475, i64 7
  %496 = getelementptr inbounds i16, i16* %474, i64 7
  %497 = load i16, i16* %496, align 2
  store i16 %497, i16* %495, align 2
  %498 = add i64 %473, -8
  %499 = getelementptr inbounds i16, i16* %475, i64 8
  %500 = getelementptr inbounds i16, i16* %474, i64 8
  %501 = icmp eq i64 %498, 0
  br i1 %501, label %502, label %472, !llvm.loop !30

502:                                              ; preds = %467, %472, %447, %354
  %503 = getelementptr inbounds i16, i16* %356, i64 %349
  store i16 0, i16* %503, align 2
  br label %510

504:                                              ; preds = %341
  %505 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %506 = load i64, i64* %505, align 8
  %507 = add nsw i64 %352, -1
  %508 = add i64 %349, 1
  %509 = sub i64 %508, %352
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string"* %0, i64 %507, i64 %509, i64 %506, i64 0, i64 %506, i64 %349, i16* %348) #11
  br label %510

510:                                              ; preds = %504, %502, %335, %173, %15, %2
  ret %"class.std::__1::basic_string"* %0
}

declare dereferenceable(152) %"class.autofill::i18n::PhoneObject"* @_ZN8autofill4i18n11PhoneObjectaSERKS1_(%"class.autofill::i18n::PhoneObject"*, %"class.autofill::i18n::PhoneObject"* dereferenceable(152)) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8autofill11PhoneNumbereqERKS0_(%"class.autofill::PhoneNumber"* readonly, %"class.autofill::PhoneNumber"* readonly dereferenceable(192)) local_unnamed_addr #4 align 2 {
  %3 = icmp eq %"class.autofill::PhoneNumber"* %0, %1
  br i1 %3, label %53, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 1
  %7 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %7, i64 0, i32 1, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  %11 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = zext i8 %9 to i64
  %14 = select i1 %10, i64 %12, i64 %13
  %15 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %15, i64 0, i32 1, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  %19 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = zext i8 %17 to i64
  %22 = select i1 %18, i64 %20, i64 %21
  %23 = icmp eq i64 %14, %22
  br i1 %23, label %24, label %53

24:                                               ; preds = %4
  %25 = icmp eq i64 %14, 0
  br i1 %25, label %47, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i16*, i16** %27, align 8
  %29 = bitcast %"class.std::__1::basic_string"* %6 to i16*
  %30 = select i1 %18, i16* %28, i16* %29
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = bitcast %"class.std::__1::basic_string"* %5 to i16*
  %34 = select i1 %10, i16* %32, i16* %33
  br label %35

35:                                               ; preds = %42, %26
  %36 = phi i64 [ %43, %42 ], [ %14, %26 ]
  %37 = phi i16* [ %45, %42 ], [ %30, %26 ]
  %38 = phi i16* [ %44, %42 ], [ %34, %26 ]
  %39 = load i16, i16* %38, align 2
  %40 = load i16, i16* %37, align 2
  %41 = icmp eq i16 %40, %39
  br i1 %41, label %42, label %53

42:                                               ; preds = %35
  %43 = add i64 %36, -1
  %44 = getelementptr inbounds i16, i16* %38, i64 1
  %45 = getelementptr inbounds i16, i16* %37, i64 1
  %46 = icmp eq i64 %43, 0
  br i1 %46, label %47, label %35

47:                                               ; preds = %42, %24
  %48 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 2
  %49 = load %"class.autofill::AutofillProfile"*, %"class.autofill::AutofillProfile"** %48, align 8
  %50 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 2
  %51 = load %"class.autofill::AutofillProfile"*, %"class.autofill::AutofillProfile"** %50, align 8
  %52 = icmp eq %"class.autofill::AutofillProfile"* %49, %51
  br label %53

53:                                               ; preds = %35, %4, %47, %2
  %54 = phi i1 [ true, %2 ], [ %52, %47 ], [ false, %4 ], [ false, %35 ]
  ret i1 %54
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill11PhoneNumber17GetSupportedTypesEPNS_8DenseSetINS_15ServerFieldTypeELS2_118EEE(%"class.autofill::PhoneNumber"* nocapture readnone, %"class.autofill::DenseSet"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.autofill::DenseSet", %"class.autofill::DenseSet"* %1, i64 0, i32 0, i32 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8, !noalias !31
  %5 = or i64 %4, 31744
  store i64 %5, i64* %3, align 8, !noalias !34
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill11PhoneNumber10GetRawInfoENS_15ServerFieldTypeE(%"class.std::__1::basic_string"* noalias sret, %"class.autofill::PhoneNumber"* nocapture readonly, i32) unnamed_addr #0 align 2 {
  %4 = icmp eq i32 %2, 14
  br i1 %4, label %5, label %189

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 1
  %7 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %7, i64 0, i32 1, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %5
  %12 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %13 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 24, i1 false) #11
  br label %191

14:                                               ; preds = %5
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i16*, i16** %15, align 8
  %17 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %18, 11
  br i1 %19, label %20, label %25

20:                                               ; preds = %14
  %21 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %22 = trunc i64 %18 to i8
  %23 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %23, i64 0, i32 1, i32 1
  store i8 %22, i8* %24, align 1
  br label %42

25:                                               ; preds = %14
  %26 = icmp ugt i64 %18, 9223372036854775791
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %28) #13
  unreachable

29:                                               ; preds = %25
  %30 = add nuw nsw i64 %18, 8
  %31 = and i64 %30, -8
  %32 = icmp slt i64 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %29
  tail call void @abort() #13
  unreachable

34:                                               ; preds = %29
  %35 = shl i64 %31, 1
  %36 = tail call i8* @_Znwm(i64 %35) #12
  %37 = bitcast i8* %36 to i16*
  %38 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %36, i8** %38, align 8
  %39 = or i64 %31, -9223372036854775808
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %18, i64* %41, align 8
  br label %42

42:                                               ; preds = %34, %20
  %43 = phi i16* [ %21, %20 ], [ %37, %34 ]
  %44 = add nuw nsw i64 %18, 1
  %45 = add i64 %18, 1
  %46 = icmp ult i64 %45, 16
  br i1 %46, label %136, label %47

47:                                               ; preds = %42
  %48 = add i64 %18, 1
  %49 = getelementptr i16, i16* %43, i64 %48
  %50 = getelementptr i16, i16* %16, i64 %48
  %51 = icmp ult i16* %43, %50
  %52 = icmp ult i16* %16, %49
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %47
  %55 = and i64 %45, -16
  %56 = sub i64 %44, %55
  %57 = getelementptr i16, i16* %16, i64 %55
  %58 = getelementptr i16, i16* %43, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %16, i64 %67
  %70 = getelementptr i16, i16* %43, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !37
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !37
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !40, !noalias !37
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !40, !noalias !37
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %16, i64 %79
  %81 = getelementptr i16, i16* %43, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !37
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !37
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !40, !noalias !37
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !40, !noalias !37
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %16, i64 %90
  %92 = getelementptr i16, i16* %43, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !37
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !37
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !40, !noalias !37
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !40, !noalias !37
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %16, i64 %101
  %103 = getelementptr i16, i16* %43, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !37
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !37
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !40, !noalias !37
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !40, !noalias !37
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !42

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %16, i64 %119
  %122 = getelementptr i16, i16* %43, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !37
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !37
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !40, !noalias !37
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !40, !noalias !37
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !43

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %45, %55
  br i1 %135, label %191, label %136

136:                                              ; preds = %134, %47, %42
  %137 = phi i64 [ %44, %47 ], [ %44, %42 ], [ %56, %134 ]
  %138 = phi i16* [ %16, %47 ], [ %16, %42 ], [ %57, %134 ]
  %139 = phi i16* [ %43, %47 ], [ %43, %42 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !44

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %191, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %191, label %159, !llvm.loop !45

189:                                              ; preds = %3
  %190 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %190, i8 0, i64 24, i1 false) #11
  br label %191

191:                                              ; preds = %154, %159, %134, %11, %189
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill11PhoneNumber32SetRawInfoWithVerificationStatusENS_15ServerFieldTypeERKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEENS_18structured_address18VerificationStatusE(%"class.autofill::PhoneNumber"*, i32, %"class.std::__1::basic_string"* dereferenceable(24), i32) unnamed_addr #0 align 2 {
  %5 = alloca %"class.autofill::i18n::PhoneObject", align 8
  %6 = add i32 %1, -13
  %7 = icmp ugt i32 %6, 1
  br i1 %7, label %14, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 1
  %10 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %9, %"class.std::__1::basic_string"* dereferenceable(24) %2)
  %11 = bitcast %"class.autofill::i18n::PhoneObject"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %11) #11
  call void @_ZN8autofill4i18n11PhoneObjectC1Ev(%"class.autofill::i18n::PhoneObject"* nonnull %5) #11
  %12 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 3
  %13 = call dereferenceable(152) %"class.autofill::i18n::PhoneObject"* @_ZN8autofill4i18n11PhoneObjectaSERKS1_(%"class.autofill::i18n::PhoneObject"* %12, %"class.autofill::i18n::PhoneObject"* nonnull dereferenceable(152) %5) #11
  call void @_ZN8autofill4i18n11PhoneObjectD1Ev(%"class.autofill::i18n::PhoneObject"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %11) #11
  br label %14

14:                                               ; preds = %4, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill11PhoneNumber16GetMatchingTypesERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEERKNS2_IcNS3_IcEENS5_IcEEEEPNS_8DenseSetINS_15ServerFieldTypeELSG_118EEE(%"class.autofill::PhoneNumber"*, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string.1"* dereferenceable(24), %"class.autofill::DenseSet"*) unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.autofill::AutofillType", align 4
  %10 = alloca %"class.std::__1::basic_string.1", align 8
  %11 = alloca %"class.std::__1::basic_string", align 8
  %12 = alloca %"class.std::__1::basic_string", align 8
  %13 = alloca %"class.std::__1::basic_string", align 8
  %14 = alloca %"class.autofill::AutofillType", align 4
  %15 = alloca %"class.std::__1::basic_string", align 8
  %16 = alloca %"class.std::__1::basic_string.1", align 8
  %17 = alloca %"class.std::__1::basic_string", align 8
  %18 = alloca %"class.std::__1::basic_string", align 8
  %19 = alloca %"class.autofill::AutofillType", align 4
  %20 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #11
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %24 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %24, i64 0, i32 1, i32 1
  %26 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 24, i1 false)
  %27 = load i8, i8* %25, align 1
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %4
  %30 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* align 8 %30, i64 24, i1 false) #11
  br label %204

31:                                               ; preds = %4
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load i16*, i16** %32, align 8
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = icmp ult i64 %35, 11
  br i1 %36, label %37, label %42

37:                                               ; preds = %31
  %38 = bitcast %"class.std::__1::basic_string"* %7 to i16*
  %39 = trunc i64 %35 to i8
  %40 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %41 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %40, i64 0, i32 1, i32 1
  store i8 %39, i8* %41, align 1
  br label %57

42:                                               ; preds = %31
  %43 = icmp ugt i64 %35, 9223372036854775791
  br i1 %43, label %44, label %46

44:                                               ; preds = %42
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %45) #13
  unreachable

46:                                               ; preds = %42
  %47 = add nuw nsw i64 %35, 8
  %48 = and i64 %47, -8
  %49 = icmp slt i64 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %46
  tail call void @abort() #13
  unreachable

51:                                               ; preds = %46
  %52 = shl i64 %48, 1
  %53 = tail call i8* @_Znwm(i64 %52) #12
  %54 = bitcast i8* %53 to i16*
  %55 = bitcast %"class.std::__1::basic_string"* %7 to i8**
  store i8* %53, i8** %55, align 8
  %56 = or i64 %48, -9223372036854775808
  store i64 %56, i64* %23, align 8
  store i64 %35, i64* %22, align 8
  br label %57

57:                                               ; preds = %51, %37
  %58 = phi i16* [ %38, %37 ], [ %54, %51 ]
  %59 = add nuw nsw i64 %35, 1
  %60 = add i64 %35, 1
  %61 = icmp ult i64 %60, 16
  br i1 %61, label %151, label %62

62:                                               ; preds = %57
  %63 = add i64 %35, 1
  %64 = getelementptr i16, i16* %58, i64 %63
  %65 = getelementptr i16, i16* %33, i64 %63
  %66 = icmp ult i16* %58, %65
  %67 = icmp ult i16* %33, %64
  %68 = and i1 %66, %67
  br i1 %68, label %151, label %69

69:                                               ; preds = %62
  %70 = and i64 %60, -16
  %71 = sub i64 %59, %70
  %72 = getelementptr i16, i16* %33, i64 %70
  %73 = getelementptr i16, i16* %58, i64 %70
  %74 = add i64 %70, -16
  %75 = lshr exact i64 %74, 4
  %76 = add nuw nsw i64 %75, 1
  %77 = and i64 %76, 3
  %78 = icmp ult i64 %74, 48
  br i1 %78, label %130, label %79

79:                                               ; preds = %69
  %80 = sub nsw i64 %76, %77
  br label %81

81:                                               ; preds = %81, %79
  %82 = phi i64 [ 0, %79 ], [ %127, %81 ]
  %83 = phi i64 [ %80, %79 ], [ %128, %81 ]
  %84 = getelementptr i16, i16* %33, i64 %82
  %85 = getelementptr i16, i16* %58, i64 %82
  %86 = bitcast i16* %84 to <8 x i16>*
  %87 = load <8 x i16>, <8 x i16>* %86, align 2, !alias.scope !46
  %88 = getelementptr i16, i16* %84, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !46
  %91 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %91, align 2, !alias.scope !49, !noalias !46
  %92 = getelementptr i16, i16* %85, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %93, align 2, !alias.scope !49, !noalias !46
  %94 = or i64 %82, 16
  %95 = getelementptr i16, i16* %33, i64 %94
  %96 = getelementptr i16, i16* %58, i64 %94
  %97 = bitcast i16* %95 to <8 x i16>*
  %98 = load <8 x i16>, <8 x i16>* %97, align 2, !alias.scope !46
  %99 = getelementptr i16, i16* %95, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !46
  %102 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %102, align 2, !alias.scope !49, !noalias !46
  %103 = getelementptr i16, i16* %96, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %104, align 2, !alias.scope !49, !noalias !46
  %105 = or i64 %82, 32
  %106 = getelementptr i16, i16* %33, i64 %105
  %107 = getelementptr i16, i16* %58, i64 %105
  %108 = bitcast i16* %106 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2, !alias.scope !46
  %110 = getelementptr i16, i16* %106, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2, !alias.scope !46
  %113 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %113, align 2, !alias.scope !49, !noalias !46
  %114 = getelementptr i16, i16* %107, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %115, align 2, !alias.scope !49, !noalias !46
  %116 = or i64 %82, 48
  %117 = getelementptr i16, i16* %33, i64 %116
  %118 = getelementptr i16, i16* %58, i64 %116
  %119 = bitcast i16* %117 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2, !alias.scope !46
  %121 = getelementptr i16, i16* %117, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !46
  %124 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %120, <8 x i16>* %124, align 2, !alias.scope !49, !noalias !46
  %125 = getelementptr i16, i16* %118, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %126, align 2, !alias.scope !49, !noalias !46
  %127 = add i64 %82, 64
  %128 = add i64 %83, -4
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %81, !llvm.loop !51

130:                                              ; preds = %81, %69
  %131 = phi i64 [ 0, %69 ], [ %127, %81 ]
  %132 = icmp eq i64 %77, 0
  br i1 %132, label %149, label %133

133:                                              ; preds = %130, %133
  %134 = phi i64 [ %146, %133 ], [ %131, %130 ]
  %135 = phi i64 [ %147, %133 ], [ %77, %130 ]
  %136 = getelementptr i16, i16* %33, i64 %134
  %137 = getelementptr i16, i16* %58, i64 %134
  %138 = bitcast i16* %136 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 2, !alias.scope !46
  %140 = getelementptr i16, i16* %136, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 2, !alias.scope !46
  %143 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %139, <8 x i16>* %143, align 2, !alias.scope !49, !noalias !46
  %144 = getelementptr i16, i16* %137, i64 8
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %145, align 2, !alias.scope !49, !noalias !46
  %146 = add i64 %134, 16
  %147 = add i64 %135, -1
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %133, !llvm.loop !52

149:                                              ; preds = %133, %130
  %150 = icmp eq i64 %60, %70
  br i1 %150, label %204, label %151

151:                                              ; preds = %149, %62, %57
  %152 = phi i64 [ %59, %62 ], [ %59, %57 ], [ %71, %149 ]
  %153 = phi i16* [ %33, %62 ], [ %33, %57 ], [ %72, %149 ]
  %154 = phi i16* [ %58, %62 ], [ %58, %57 ], [ %73, %149 ]
  %155 = add i64 %152, -1
  %156 = and i64 %152, 7
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %169, label %158

158:                                              ; preds = %151, %158
  %159 = phi i64 [ %164, %158 ], [ %152, %151 ]
  %160 = phi i16* [ %166, %158 ], [ %153, %151 ]
  %161 = phi i16* [ %165, %158 ], [ %154, %151 ]
  %162 = phi i64 [ %167, %158 ], [ %156, %151 ]
  %163 = load i16, i16* %160, align 2
  store i16 %163, i16* %161, align 2
  %164 = add i64 %159, -1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = getelementptr inbounds i16, i16* %160, i64 1
  %167 = add i64 %162, -1
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %158, !llvm.loop !53

169:                                              ; preds = %158, %151
  %170 = phi i64 [ %152, %151 ], [ %164, %158 ]
  %171 = phi i16* [ %153, %151 ], [ %166, %158 ]
  %172 = phi i16* [ %154, %151 ], [ %165, %158 ]
  %173 = icmp ult i64 %155, 7
  br i1 %173, label %204, label %174

174:                                              ; preds = %169, %174
  %175 = phi i64 [ %200, %174 ], [ %170, %169 ]
  %176 = phi i16* [ %202, %174 ], [ %171, %169 ]
  %177 = phi i16* [ %201, %174 ], [ %172, %169 ]
  %178 = load i16, i16* %176, align 2
  store i16 %178, i16* %177, align 2
  %179 = getelementptr inbounds i16, i16* %177, i64 1
  %180 = getelementptr inbounds i16, i16* %176, i64 1
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %177, i64 2
  %183 = getelementptr inbounds i16, i16* %176, i64 2
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = getelementptr inbounds i16, i16* %177, i64 3
  %186 = getelementptr inbounds i16, i16* %176, i64 3
  %187 = load i16, i16* %186, align 2
  store i16 %187, i16* %185, align 2
  %188 = getelementptr inbounds i16, i16* %177, i64 4
  %189 = getelementptr inbounds i16, i16* %176, i64 4
  %190 = load i16, i16* %189, align 2
  store i16 %190, i16* %188, align 2
  %191 = getelementptr inbounds i16, i16* %177, i64 5
  %192 = getelementptr inbounds i16, i16* %176, i64 5
  %193 = load i16, i16* %192, align 2
  store i16 %193, i16* %191, align 2
  %194 = getelementptr inbounds i16, i16* %177, i64 6
  %195 = getelementptr inbounds i16, i16* %176, i64 6
  %196 = load i16, i16* %195, align 2
  store i16 %196, i16* %194, align 2
  %197 = getelementptr inbounds i16, i16* %177, i64 7
  %198 = getelementptr inbounds i16, i16* %176, i64 7
  %199 = load i16, i16* %198, align 2
  store i16 %199, i16* %197, align 2
  %200 = add i64 %175, -8
  %201 = getelementptr inbounds i16, i16* %177, i64 8
  %202 = getelementptr inbounds i16, i16* %176, i64 8
  %203 = icmp eq i64 %200, 0
  br i1 %203, label %204, label %174, !llvm.loop !54

204:                                              ; preds = %169, %174, %149, %29
  %205 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %206 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %205, i64 0, i32 1, i32 1
  %207 = load i8, i8* %206, align 1
  %208 = load i16*, i16** %21, align 8
  %209 = bitcast %"class.std::__1::basic_string"* %7 to i16*
  %210 = load i64, i64* %22, align 8
  %211 = zext i8 %207 to i64
  %212 = icmp slt i8 %207, 0
  %213 = select i1 %212, i16* %208, i16* %209
  %214 = select i1 %212, i64 %210, i64 %211
  %215 = call zeroext i1 @_ZN4base11RemoveCharsENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_PNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEE(i16* %213, i64 %214, i16* getelementptr inbounds ([6 x i16], [6 x i16]* @.str, i64 0, i64 0), i64 5, %"class.std::__1::basic_string"* nonnull %7) #11
  %216 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 0
  call void @_ZNK8autofill9FormGroup16GetMatchingTypesERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEERKNS2_IcNS3_IcEENS5_IcEEEEPNS_8DenseSetINS_15ServerFieldTypeELSG_118EEE(%"class.autofill::FormGroup"* %216, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %7, %"class.std::__1::basic_string.1"* dereferenceable(24) %2, %"class.autofill::DenseSet"* %3) #11
  %217 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %217) #11
  %218 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %219 = bitcast %"class.autofill::AutofillType"* %9 to i8*
  %220 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %220, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %219) #11
  call void @_ZN8autofill12AutofillTypeC1ENS_15ServerFieldTypeE(%"class.autofill::AutofillType"* nonnull %9, i32 10) #11
  call void @_ZNK8autofill9FormGroup7GetInfoERKNS_12AutofillTypeERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.std::__1::basic_string"* nonnull sret %8, %"class.autofill::FormGroup"* %216, %"class.autofill::AutofillType"* nonnull dereferenceable(12) %9, %"class.std::__1::basic_string.1"* dereferenceable(24) %2) #11
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %219) #11
  %221 = bitcast %"class.std::__1::basic_string.1"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %221) #11
  %222 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 2
  %223 = load %"class.autofill::AutofillProfile"*, %"class.autofill::AutofillProfile"** %222, align 8
  %224 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %224) #11, !noalias !55
  %225 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %226 = bitcast %"class.autofill::AutofillProfile"* %223 to void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)***
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %224, i8 -86, i64 24, i1 false) #11, !noalias !55
  %227 = load void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)**, void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)*** %226, align 8, !noalias !55
  %228 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)*, void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)** %227, i64 4
  %229 = load void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)*, void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)** %228, align 8, !noalias !55
  call void %229(%"class.std::__1::basic_string"* nonnull sret %6, %"class.autofill::AutofillProfile"* %223, i32 36) #11, !noalias !55
  %230 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %231 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %230, i64 0, i32 1, i32 1
  %232 = load i8, i8* %231, align 1, !noalias !55
  %233 = icmp slt i8 %232, 0
  %234 = load i64, i64* %225, align 8, !noalias !55
  %235 = zext i8 %232 to i64
  %236 = select i1 %233, i64 %234, i64 %235
  %237 = icmp eq i64 %236, 0
  br i1 %237, label %243, label %238

238:                                              ; preds = %204
  %239 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %240 = load i16*, i16** %239, align 8, !noalias !55
  %241 = bitcast %"class.std::__1::basic_string"* %6 to i16*
  %242 = select i1 %233, i16* %240, i16* %241
  call void @_ZN4base12UTF16ToASCIIENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string.1"* nonnull sret %10, i16* %242, i64 %236) #11
  br label %244

243:                                              ; preds = %204
  call void @_ZN8autofill15AutofillCountry20CountryCodeForLocaleERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string.1"* nonnull sret %10, %"class.std::__1::basic_string.1"* dereferenceable(24) %2) #11
  br label %244

244:                                              ; preds = %243, %238
  %245 = load i8, i8* %231, align 1, !noalias !55
  %246 = icmp slt i8 %245, 0
  br i1 %246, label %247, label %250

247:                                              ; preds = %244
  %248 = bitcast %"class.std::__1::basic_string"* %6 to i8**
  %249 = load i8*, i8** %248, align 8, !noalias !55
  call void @_ZdlPv(i8* %249) #12
  br label %250

250:                                              ; preds = %244, %247
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %224) #11, !noalias !55
  %251 = bitcast %"class.std::__1::basic_string.1"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %252 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %251, i64 0, i32 1, i32 0
  %253 = load i8, i8* %252, align 1
  %254 = icmp slt i8 %253, 0
  %255 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %256 = load i64, i64* %255, align 8
  %257 = zext i8 %253 to i64
  %258 = select i1 %254, i64 %256, i64 %257
  %259 = icmp eq i64 %258, 2
  br i1 %259, label %260, label %377

260:                                              ; preds = %250
  %261 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string.1"* nonnull %10, i64 0, i64 -1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i64 2) #11
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %265, label %263

263:                                              ; preds = %260
  %264 = load i8, i8* %252, align 1
  br label %377

265:                                              ; preds = %260
  %266 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %267 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %266, i64 0, i32 1, i32 1
  %268 = load i8, i8* %267, align 1
  %269 = icmp slt i8 %268, 0
  %270 = load i64, i64* %218, align 8
  %271 = zext i8 %268 to i64
  %272 = select i1 %269, i64 %270, i64 %271
  %273 = icmp eq i64 %272, 7
  %274 = load i8, i8* %252, align 1
  %275 = icmp slt i8 %274, 0
  br i1 %275, label %276, label %279

276:                                              ; preds = %265
  %277 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %278 = load i8*, i8** %277, align 8
  call void @_ZdlPv(i8* %278) #12
  br label %279

279:                                              ; preds = %265, %276
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %221) #11
  br i1 %273, label %280, label %385

280:                                              ; preds = %279
  %281 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %281) #11
  %282 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %283 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %284 = bitcast %"class.std::__1::basic_string"* %8 to %"class.std::__1::allocator"*
  %285 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %285, i8 -86, i64 24, i1 false)
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEC2ERKS5_mmRKS4_(%"class.std::__1::basic_string"* nonnull %11, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %8, i64 0, i64 3, %"class.std::__1::allocator"* nonnull dereferenceable(1) %284) #11
  %286 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %286) #11
  %287 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %288 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %289 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %289, i8 -86, i64 24, i1 false)
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEC2ERKS5_mmRKS4_(%"class.std::__1::basic_string"* nonnull %12, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %8, i64 3, i64 4, %"class.std::__1::allocator"* nonnull dereferenceable(1) %284) #11
  %290 = load i8, i8* %25, align 1
  %291 = icmp slt i8 %290, 0
  %292 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %293 = load i64, i64* %292, align 8
  %294 = zext i8 %290 to i64
  %295 = select i1 %291, i64 %293, i64 %294
  %296 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %297 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %296, i64 0, i32 1, i32 1
  %298 = load i8, i8* %297, align 1
  %299 = icmp slt i8 %298, 0
  %300 = load i64, i64* %283, align 8
  %301 = zext i8 %298 to i64
  %302 = select i1 %299, i64 %300, i64 %301
  %303 = icmp eq i64 %295, %302
  br i1 %303, label %304, label %326

304:                                              ; preds = %280
  %305 = icmp eq i64 %295, 0
  br i1 %305, label %357, label %306

306:                                              ; preds = %304
  %307 = load i16*, i16** %282, align 8
  %308 = bitcast %"class.std::__1::basic_string"* %11 to i16*
  %309 = select i1 %299, i16* %307, i16* %308
  %310 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %311 = load i16*, i16** %310, align 8
  %312 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %313 = select i1 %291, i16* %311, i16* %312
  br label %314

314:                                              ; preds = %321, %306
  %315 = phi i64 [ %322, %321 ], [ %295, %306 ]
  %316 = phi i16* [ %324, %321 ], [ %309, %306 ]
  %317 = phi i16* [ %323, %321 ], [ %313, %306 ]
  %318 = load i16, i16* %317, align 2
  %319 = load i16, i16* %316, align 2
  %320 = icmp eq i16 %319, %318
  br i1 %320, label %321, label %326

321:                                              ; preds = %314
  %322 = add i64 %315, -1
  %323 = getelementptr inbounds i16, i16* %317, i64 1
  %324 = getelementptr inbounds i16, i16* %316, i64 1
  %325 = icmp eq i64 %322, 0
  br i1 %325, label %357, label %314

326:                                              ; preds = %314, %280
  %327 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %328 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %327, i64 0, i32 1, i32 1
  %329 = load i8, i8* %328, align 1
  %330 = icmp slt i8 %329, 0
  %331 = load i64, i64* %288, align 8
  %332 = zext i8 %329 to i64
  %333 = select i1 %330, i64 %331, i64 %332
  %334 = icmp eq i64 %295, %333
  br i1 %334, label %335, label %364

335:                                              ; preds = %326
  %336 = icmp eq i64 %295, 0
  br i1 %336, label %357, label %337

337:                                              ; preds = %335
  %338 = load i16*, i16** %287, align 8
  %339 = bitcast %"class.std::__1::basic_string"* %12 to i16*
  %340 = select i1 %330, i16* %338, i16* %339
  %341 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %342 = load i16*, i16** %341, align 8
  %343 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %344 = select i1 %291, i16* %342, i16* %343
  br label %345

345:                                              ; preds = %352, %337
  %346 = phi i64 [ %353, %352 ], [ %295, %337 ]
  %347 = phi i16* [ %355, %352 ], [ %340, %337 ]
  %348 = phi i16* [ %354, %352 ], [ %344, %337 ]
  %349 = load i16, i16* %348, align 2
  %350 = load i16, i16* %347, align 2
  %351 = icmp eq i16 %350, %349
  br i1 %351, label %352, label %364

352:                                              ; preds = %345
  %353 = add i64 %346, -1
  %354 = getelementptr inbounds i16, i16* %348, i64 1
  %355 = getelementptr inbounds i16, i16* %347, i64 1
  %356 = icmp eq i64 %353, 0
  br i1 %356, label %357, label %345

357:                                              ; preds = %321, %352, %335, %304
  %358 = getelementptr inbounds %"class.autofill::DenseSet", %"class.autofill::DenseSet"* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %359 = load i64, i64* %358, align 8, !noalias !58
  %360 = or i64 %359, 1024
  store i64 %360, i64* %358, align 8, !noalias !58
  %361 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %362 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %361, i64 0, i32 1, i32 1
  %363 = load i8, i8* %362, align 1
  br label %364

364:                                              ; preds = %345, %326, %357
  %365 = phi i8 [ %329, %326 ], [ %363, %357 ], [ %329, %345 ]
  %366 = icmp slt i8 %365, 0
  br i1 %366, label %367, label %371

367:                                              ; preds = %364
  %368 = bitcast %"class.std::__1::basic_string"* %12 to i8**
  %369 = load i8*, i8** %368, align 8
  call void @_ZdlPv(i8* %369) #12
  %370 = load i8, i8* %297, align 1
  br label %371

371:                                              ; preds = %364, %367
  %372 = phi i8 [ %298, %364 ], [ %370, %367 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %286) #11
  %373 = icmp slt i8 %372, 0
  br i1 %373, label %374, label %383

374:                                              ; preds = %371
  %375 = bitcast %"class.std::__1::basic_string"* %11 to i8**
  %376 = load i8*, i8** %375, align 8
  call void @_ZdlPv(i8* %376) #12
  br label %383

377:                                              ; preds = %263, %250
  %378 = phi i8 [ %264, %263 ], [ %253, %250 ]
  %379 = icmp slt i8 %378, 0
  br i1 %379, label %380, label %383

380:                                              ; preds = %377
  %381 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %382 = load i8*, i8** %381, align 8
  call void @_ZdlPv(i8* %382) #12
  br label %383

383:                                              ; preds = %380, %377, %374, %371
  %384 = phi i8* [ %281, %371 ], [ %281, %374 ], [ %221, %377 ], [ %221, %380 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %384) #11
  br label %385

385:                                              ; preds = %383, %279
  %386 = getelementptr inbounds %"class.autofill::DenseSet", %"class.autofill::DenseSet"* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %387 = load i64, i64* %386, align 8
  %388 = and i64 %387, 16384
  %389 = icmp eq i64 %388, 0
  br i1 %389, label %390, label %497

390:                                              ; preds = %385
  %391 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %391) #11
  %392 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %393 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %394 = bitcast %"class.autofill::AutofillType"* %14 to i8*
  %395 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %395, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %394) #11
  call void @_ZN8autofill12AutofillTypeC1ENS_15ServerFieldTypeE(%"class.autofill::AutofillType"* nonnull %14, i32 14) #11
  call void @_ZNK8autofill9FormGroup7GetInfoERKNS_12AutofillTypeERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.std::__1::basic_string"* nonnull sret %13, %"class.autofill::FormGroup"* %216, %"class.autofill::AutofillType"* nonnull dereferenceable(12) %14, %"class.std::__1::basic_string.1"* dereferenceable(24) %2) #11
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %394) #11
  %396 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %397 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %396, i64 0, i32 1, i32 1
  %398 = load i8, i8* %397, align 1
  %399 = icmp slt i8 %398, 0
  %400 = load i64, i64* %393, align 8
  %401 = zext i8 %398 to i64
  %402 = select i1 %399, i64 %400, i64 %401
  %403 = icmp eq i64 %402, 0
  br i1 %403, label %490, label %404

404:                                              ; preds = %390
  %405 = bitcast %"class.std::__1::basic_string"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %405) #11
  %406 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %407 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %408 = bitcast %"class.std::__1::basic_string.1"* %16 to i8*
  %409 = bitcast %"class.std::__1::basic_string"* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %409, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %408) #11
  %410 = load %"class.autofill::AutofillProfile"*, %"class.autofill::AutofillProfile"** %222, align 8
  %411 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %411) #11, !noalias !61
  %412 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %413 = bitcast %"class.autofill::AutofillProfile"* %410 to void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)***
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %411, i8 -86, i64 24, i1 false) #11, !noalias !61
  %414 = load void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)**, void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)*** %413, align 8, !noalias !61
  %415 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)*, void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)** %414, i64 4
  %416 = load void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)*, void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)** %415, align 8, !noalias !61
  call void %416(%"class.std::__1::basic_string"* nonnull sret %5, %"class.autofill::AutofillProfile"* %410, i32 36) #11, !noalias !61
  %417 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %418 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %417, i64 0, i32 1, i32 1
  %419 = load i8, i8* %418, align 1, !noalias !61
  %420 = icmp slt i8 %419, 0
  %421 = load i64, i64* %412, align 8, !noalias !61
  %422 = zext i8 %419 to i64
  %423 = select i1 %420, i64 %421, i64 %422
  %424 = icmp eq i64 %423, 0
  br i1 %424, label %430, label %425

425:                                              ; preds = %404
  %426 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %427 = load i16*, i16** %426, align 8, !noalias !61
  %428 = bitcast %"class.std::__1::basic_string"* %5 to i16*
  %429 = select i1 %420, i16* %427, i16* %428
  call void @_ZN4base12UTF16ToASCIIENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string.1"* nonnull sret %16, i16* %429, i64 %423) #11
  br label %431

430:                                              ; preds = %404
  call void @_ZN8autofill15AutofillCountry20CountryCodeForLocaleERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string.1"* nonnull sret %16, %"class.std::__1::basic_string.1"* dereferenceable(24) %2) #11
  br label %431

431:                                              ; preds = %430, %425
  %432 = load i8, i8* %418, align 1, !noalias !61
  %433 = icmp slt i8 %432, 0
  br i1 %433, label %434, label %437

434:                                              ; preds = %431
  %435 = bitcast %"class.std::__1::basic_string"* %5 to i8**
  %436 = load i8*, i8** %435, align 8, !noalias !61
  call void @_ZdlPv(i8* %436) #12
  br label %437

437:                                              ; preds = %431, %434
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %411) #11, !noalias !61
  call void @_ZN8autofill4i18n20NormalizePhoneNumberERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEERKNS2_IcNS3_IcEENS5_IcEEEE(%"class.std::__1::basic_string"* nonnull sret %15, %"class.std::__1::basic_string"* dereferenceable(24) %1, %"class.std::__1::basic_string.1"* nonnull dereferenceable(24) %16) #11
  %438 = bitcast %"class.std::__1::basic_string.1"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %439 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %438, i64 0, i32 1, i32 0
  %440 = load i8, i8* %439, align 1
  %441 = icmp slt i8 %440, 0
  br i1 %441, label %442, label %445

442:                                              ; preds = %437
  %443 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %444 = load i8*, i8** %443, align 8
  call void @_ZdlPv(i8* %444) #12
  br label %445

445:                                              ; preds = %437, %442
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %408) #11
  %446 = bitcast %"class.std::__1::basic_string"* %15 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %447 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %446, i64 0, i32 1, i32 1
  %448 = load i8, i8* %447, align 1
  %449 = icmp slt i8 %448, 0
  %450 = load i64, i64* %407, align 8
  %451 = zext i8 %448 to i64
  %452 = select i1 %449, i64 %450, i64 %451
  %453 = load i8, i8* %397, align 1
  %454 = icmp slt i8 %453, 0
  %455 = load i64, i64* %393, align 8
  %456 = zext i8 %453 to i64
  %457 = select i1 %454, i64 %455, i64 %456
  %458 = icmp eq i64 %452, %457
  br i1 %458, label %459, label %483

459:                                              ; preds = %445
  %460 = icmp eq i64 %452, 0
  br i1 %460, label %480, label %461

461:                                              ; preds = %459
  %462 = load i16*, i16** %392, align 8
  %463 = bitcast %"class.std::__1::basic_string"* %13 to i16*
  %464 = select i1 %454, i16* %462, i16* %463
  %465 = load i16*, i16** %406, align 8
  %466 = bitcast %"class.std::__1::basic_string"* %15 to i16*
  %467 = select i1 %449, i16* %465, i16* %466
  br label %468

468:                                              ; preds = %475, %461
  %469 = phi i64 [ %476, %475 ], [ %452, %461 ]
  %470 = phi i16* [ %478, %475 ], [ %464, %461 ]
  %471 = phi i16* [ %477, %475 ], [ %467, %461 ]
  %472 = load i16, i16* %471, align 2
  %473 = load i16, i16* %470, align 2
  %474 = icmp eq i16 %473, %472
  br i1 %474, label %475, label %483

475:                                              ; preds = %468
  %476 = add i64 %469, -1
  %477 = getelementptr inbounds i16, i16* %471, i64 1
  %478 = getelementptr inbounds i16, i16* %470, i64 1
  %479 = icmp eq i64 %476, 0
  br i1 %479, label %480, label %468

480:                                              ; preds = %475, %459
  %481 = load i64, i64* %386, align 8, !noalias !64
  %482 = or i64 %481, 16384
  store i64 %482, i64* %386, align 8, !noalias !64
  br label %483

483:                                              ; preds = %468, %445, %480
  br i1 %449, label %484, label %488

484:                                              ; preds = %483
  %485 = bitcast %"class.std::__1::basic_string"* %15 to i8**
  %486 = load i8*, i8** %485, align 8
  call void @_ZdlPv(i8* %486) #12
  %487 = load i8, i8* %397, align 1
  br label %488

488:                                              ; preds = %483, %484
  %489 = phi i8 [ %453, %483 ], [ %487, %484 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %405) #11
  br label %490

490:                                              ; preds = %488, %390
  %491 = phi i8 [ %489, %488 ], [ %398, %390 ]
  %492 = icmp slt i8 %491, 0
  br i1 %492, label %493, label %496

493:                                              ; preds = %490
  %494 = bitcast %"class.std::__1::basic_string"* %13 to i8**
  %495 = load i8*, i8** %494, align 8
  call void @_ZdlPv(i8* %495) #12
  br label %496

496:                                              ; preds = %490, %493
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %391) #11
  br label %497

497:                                              ; preds = %496, %385
  %498 = call zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* nonnull dereferenceable(16) @_ZN8autofill8features40kAutofillEnableAugmentedPhoneCountryCodeE) #11
  br i1 %498, label %499, label %566

499:                                              ; preds = %497
  %500 = bitcast %"class.std::__1::basic_string"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %500) #11
  %501 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %502 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %503 = bitcast %"class.std::__1::basic_string"* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %503, i8 -86, i64 24, i1 false)
  call void @_ZN8autofill9data_util28FindPossiblePhoneCountryCodeERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEE(%"class.std::__1::basic_string"* nonnull sret %17, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %7) #11
  %504 = bitcast %"class.std::__1::basic_string"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %504) #11
  %505 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %506 = bitcast %"class.autofill::AutofillType"* %19 to i8*
  %507 = bitcast %"class.std::__1::basic_string"* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %507, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %506) #11
  call void @_ZN8autofill12AutofillTypeC1ENS_15ServerFieldTypeE(%"class.autofill::AutofillType"* nonnull %19, i32 12) #11
  call void @_ZNK8autofill9FormGroup7GetInfoERKNS_12AutofillTypeERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.std::__1::basic_string"* nonnull sret %18, %"class.autofill::FormGroup"* %216, %"class.autofill::AutofillType"* nonnull dereferenceable(12) %19, %"class.std::__1::basic_string.1"* dereferenceable(24) %2) #11
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %506) #11
  %508 = bitcast %"class.std::__1::basic_string"* %17 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %509 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %508, i64 0, i32 1, i32 1
  %510 = load i8, i8* %509, align 1
  %511 = icmp slt i8 %510, 0
  %512 = load i64, i64* %502, align 8
  %513 = zext i8 %510 to i64
  %514 = select i1 %511, i64 %512, i64 %513
  %515 = icmp eq i64 %514, 0
  br i1 %515, label %516, label %520

516:                                              ; preds = %499
  %517 = bitcast %"class.std::__1::basic_string"* %18 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %518 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %517, i64 0, i32 1, i32 1
  %519 = load i8, i8* %518, align 1
  br label %552

520:                                              ; preds = %499
  %521 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %522 = bitcast %"class.std::__1::basic_string"* %18 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %523 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %522, i64 0, i32 1, i32 1
  %524 = load i8, i8* %523, align 1
  %525 = icmp slt i8 %524, 0
  %526 = load i64, i64* %521, align 8
  %527 = zext i8 %524 to i64
  %528 = select i1 %525, i64 %526, i64 %527
  %529 = icmp eq i64 %514, %528
  br i1 %529, label %530, label %552

530:                                              ; preds = %520
  %531 = load i16*, i16** %505, align 8
  %532 = bitcast %"class.std::__1::basic_string"* %18 to i16*
  %533 = select i1 %525, i16* %531, i16* %532
  %534 = load i16*, i16** %501, align 8
  %535 = bitcast %"class.std::__1::basic_string"* %17 to i16*
  %536 = select i1 %511, i16* %534, i16* %535
  br label %537

537:                                              ; preds = %544, %530
  %538 = phi i64 [ %545, %544 ], [ %514, %530 ]
  %539 = phi i16* [ %547, %544 ], [ %533, %530 ]
  %540 = phi i16* [ %546, %544 ], [ %536, %530 ]
  %541 = load i16, i16* %540, align 2
  %542 = load i16, i16* %539, align 2
  %543 = icmp eq i16 %542, %541
  br i1 %543, label %544, label %552

544:                                              ; preds = %537
  %545 = add i64 %538, -1
  %546 = getelementptr inbounds i16, i16* %540, i64 1
  %547 = getelementptr inbounds i16, i16* %539, i64 1
  %548 = icmp eq i64 %545, 0
  br i1 %548, label %549, label %537

549:                                              ; preds = %544
  %550 = load i64, i64* %386, align 8, !noalias !67
  %551 = or i64 %550, 4096
  store i64 %551, i64* %386, align 8, !noalias !67
  br label %552

552:                                              ; preds = %537, %516, %520, %549
  %553 = phi i8 [ %519, %516 ], [ %524, %520 ], [ %524, %549 ], [ %524, %537 ]
  %554 = icmp slt i8 %553, 0
  br i1 %554, label %555, label %559

555:                                              ; preds = %552
  %556 = bitcast %"class.std::__1::basic_string"* %18 to i8**
  %557 = load i8*, i8** %556, align 8
  call void @_ZdlPv(i8* %557) #12
  %558 = load i8, i8* %509, align 1
  br label %559

559:                                              ; preds = %552, %555
  %560 = phi i8 [ %510, %552 ], [ %558, %555 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %504) #11
  %561 = icmp slt i8 %560, 0
  br i1 %561, label %562, label %565

562:                                              ; preds = %559
  %563 = bitcast %"class.std::__1::basic_string"* %17 to i8**
  %564 = load i8*, i8** %563, align 8
  call void @_ZdlPv(i8* %564) #12
  br label %565

565:                                              ; preds = %559, %562
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %500) #11
  br label %566

566:                                              ; preds = %565, %497
  %567 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %568 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %567, i64 0, i32 1, i32 1
  %569 = load i8, i8* %568, align 1
  %570 = icmp slt i8 %569, 0
  br i1 %570, label %571, label %574

571:                                              ; preds = %566
  %572 = bitcast %"class.std::__1::basic_string"* %8 to i8**
  %573 = load i8*, i8** %572, align 8
  call void @_ZdlPv(i8* %573) #12
  br label %574

574:                                              ; preds = %566, %571
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %217) #11
  %575 = load i8, i8* %206, align 1
  %576 = icmp slt i8 %575, 0
  br i1 %576, label %577, label %580

577:                                              ; preds = %574
  %578 = bitcast %"class.std::__1::basic_string"* %7 to i8**
  %579 = load i8*, i8** %578, align 8
  call void @_ZdlPv(i8* %579) #12
  br label %580

580:                                              ; preds = %574, %577
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #11
  ret void
}

declare zeroext i1 @_ZN4base11RemoveCharsENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_PNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEE(i16*, i64, i16*, i64, %"class.std::__1::basic_string"*) local_unnamed_addr #1

declare void @_ZNK8autofill9FormGroup16GetMatchingTypesERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEERKNS2_IcNS3_IcEENS5_IcEEEEPNS_8DenseSetINS_15ServerFieldTypeELSG_118EEE(%"class.autofill::FormGroup"*, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string.1"* dereferenceable(24), %"class.autofill::DenseSet"*) unnamed_addr #1

declare void @_ZNK8autofill9FormGroup7GetInfoERKNS_12AutofillTypeERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.std::__1::basic_string"* sret, %"class.autofill::FormGroup"*, %"class.autofill::AutofillType"* dereferenceable(12), %"class.std::__1::basic_string.1"* dereferenceable(24)) local_unnamed_addr #1

declare void @_ZN8autofill12AutofillTypeC1ENS_15ServerFieldTypeE(%"class.autofill::AutofillType"*, i32) unnamed_addr #1

declare void @_ZN8autofill4i18n20NormalizePhoneNumberERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEERKNS2_IcNS3_IcEENS5_IcEEEE(%"class.std::__1::basic_string"* sret, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string.1"* dereferenceable(24)) local_unnamed_addr #1

declare zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZN8autofill9data_util28FindPossiblePhoneCountryCodeERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEE(%"class.std::__1::basic_string"* sret, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill11PhoneNumber11GetInfoImplERKNS_12AutofillTypeERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.std::__1::basic_string"* noalias sret, %"class.autofill::PhoneNumber"*, %"class.autofill::AutofillType"* dereferenceable(12), %"class.std::__1::basic_string.1"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %5 = tail call i32 @_ZNK8autofill12AutofillType15GetStorableTypeEv(%"class.autofill::AutofillType"* %2) #11
  tail call void @_ZNK8autofill11PhoneNumber19UpdateCacheIfNeededERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.autofill::PhoneNumber"* %1, %"class.std::__1::basic_string.1"* dereferenceable(24) %3)
  %6 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 3
  %7 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %8 = load %"class.i18n::phonenumbers::PhoneNumber"*, %"class.i18n::phonenumbers::PhoneNumber"** %7, align 8
  %9 = icmp eq %"class.i18n::phonenumbers::PhoneNumber"* %8, null
  br i1 %9, label %10, label %199

10:                                               ; preds = %4
  %11 = add i32 %5, -13
  %12 = icmp ult i32 %11, 2
  br i1 %12, label %13, label %197

13:                                               ; preds = %10
  %14 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK8autofill4i18n11PhoneObject14GetWholeNumberEv(%"class.autofill::i18n::PhoneObject"* %6) #11
  %15 = bitcast %"class.std::__1::basic_string"* %14 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %15, i64 0, i32 1, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %21 = bitcast %"class.std::__1::basic_string"* %14 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 24, i1 false) #11
  br label %1388

22:                                               ; preds = %13
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = icmp ult i64 %26, 11
  br i1 %27, label %28, label %33

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %30 = trunc i64 %26 to i8
  %31 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %31, i64 0, i32 1, i32 1
  store i8 %30, i8* %32, align 1
  br label %50

33:                                               ; preds = %22
  %34 = icmp ugt i64 %26, 9223372036854775791
  br i1 %34, label %35, label %37

35:                                               ; preds = %33
  %36 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %36) #13
  unreachable

37:                                               ; preds = %33
  %38 = add nuw nsw i64 %26, 8
  %39 = and i64 %38, -8
  %40 = icmp slt i64 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %37
  tail call void @abort() #13
  unreachable

42:                                               ; preds = %37
  %43 = shl i64 %39, 1
  %44 = tail call i8* @_Znwm(i64 %43) #12
  %45 = bitcast i8* %44 to i16*
  %46 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %44, i8** %46, align 8
  %47 = or i64 %39, -9223372036854775808
  %48 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %47, i64* %48, align 8
  %49 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %26, i64* %49, align 8
  br label %50

50:                                               ; preds = %42, %28
  %51 = phi i16* [ %29, %28 ], [ %45, %42 ]
  %52 = add nuw nsw i64 %26, 1
  %53 = add i64 %26, 1
  %54 = icmp ult i64 %53, 16
  br i1 %54, label %144, label %55

55:                                               ; preds = %50
  %56 = add i64 %26, 1
  %57 = getelementptr i16, i16* %51, i64 %56
  %58 = getelementptr i16, i16* %24, i64 %56
  %59 = icmp ult i16* %51, %58
  %60 = icmp ult i16* %24, %57
  %61 = and i1 %59, %60
  br i1 %61, label %144, label %62

62:                                               ; preds = %55
  %63 = and i64 %53, -16
  %64 = sub i64 %52, %63
  %65 = getelementptr i16, i16* %24, i64 %63
  %66 = getelementptr i16, i16* %51, i64 %63
  %67 = add i64 %63, -16
  %68 = lshr exact i64 %67, 4
  %69 = add nuw nsw i64 %68, 1
  %70 = and i64 %69, 3
  %71 = icmp ult i64 %67, 48
  br i1 %71, label %123, label %72

72:                                               ; preds = %62
  %73 = sub nsw i64 %69, %70
  br label %74

74:                                               ; preds = %74, %72
  %75 = phi i64 [ 0, %72 ], [ %120, %74 ]
  %76 = phi i64 [ %73, %72 ], [ %121, %74 ]
  %77 = getelementptr i16, i16* %24, i64 %75
  %78 = getelementptr i16, i16* %51, i64 %75
  %79 = bitcast i16* %77 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2, !alias.scope !70
  %81 = getelementptr i16, i16* %77, i64 8
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !70
  %84 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %84, align 2, !alias.scope !73, !noalias !70
  %85 = getelementptr i16, i16* %78, i64 8
  %86 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %86, align 2, !alias.scope !73, !noalias !70
  %87 = or i64 %75, 16
  %88 = getelementptr i16, i16* %24, i64 %87
  %89 = getelementptr i16, i16* %51, i64 %87
  %90 = bitcast i16* %88 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !70
  %92 = getelementptr i16, i16* %88, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !70
  %95 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %95, align 2, !alias.scope !73, !noalias !70
  %96 = getelementptr i16, i16* %89, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %97, align 2, !alias.scope !73, !noalias !70
  %98 = or i64 %75, 32
  %99 = getelementptr i16, i16* %24, i64 %98
  %100 = getelementptr i16, i16* %51, i64 %98
  %101 = bitcast i16* %99 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !70
  %103 = getelementptr i16, i16* %99, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !70
  %106 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %106, align 2, !alias.scope !73, !noalias !70
  %107 = getelementptr i16, i16* %100, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %108, align 2, !alias.scope !73, !noalias !70
  %109 = or i64 %75, 48
  %110 = getelementptr i16, i16* %24, i64 %109
  %111 = getelementptr i16, i16* %51, i64 %109
  %112 = bitcast i16* %110 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !70
  %114 = getelementptr i16, i16* %110, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !70
  %117 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %117, align 2, !alias.scope !73, !noalias !70
  %118 = getelementptr i16, i16* %111, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %119, align 2, !alias.scope !73, !noalias !70
  %120 = add i64 %75, 64
  %121 = add i64 %76, -4
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %74, !llvm.loop !75

123:                                              ; preds = %74, %62
  %124 = phi i64 [ 0, %62 ], [ %120, %74 ]
  %125 = icmp eq i64 %70, 0
  br i1 %125, label %142, label %126

126:                                              ; preds = %123, %126
  %127 = phi i64 [ %139, %126 ], [ %124, %123 ]
  %128 = phi i64 [ %140, %126 ], [ %70, %123 ]
  %129 = getelementptr i16, i16* %24, i64 %127
  %130 = getelementptr i16, i16* %51, i64 %127
  %131 = bitcast i16* %129 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !70
  %133 = getelementptr i16, i16* %129, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !70
  %136 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %136, align 2, !alias.scope !73, !noalias !70
  %137 = getelementptr i16, i16* %130, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %138, align 2, !alias.scope !73, !noalias !70
  %139 = add i64 %127, 16
  %140 = add i64 %128, -1
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %126, !llvm.loop !76

142:                                              ; preds = %126, %123
  %143 = icmp eq i64 %53, %63
  br i1 %143, label %1388, label %144

144:                                              ; preds = %142, %55, %50
  %145 = phi i64 [ %52, %55 ], [ %52, %50 ], [ %64, %142 ]
  %146 = phi i16* [ %24, %55 ], [ %24, %50 ], [ %65, %142 ]
  %147 = phi i16* [ %51, %55 ], [ %51, %50 ], [ %66, %142 ]
  %148 = add i64 %145, -1
  %149 = and i64 %145, 7
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %162, label %151

151:                                              ; preds = %144, %151
  %152 = phi i64 [ %157, %151 ], [ %145, %144 ]
  %153 = phi i16* [ %159, %151 ], [ %146, %144 ]
  %154 = phi i16* [ %158, %151 ], [ %147, %144 ]
  %155 = phi i64 [ %160, %151 ], [ %149, %144 ]
  %156 = load i16, i16* %153, align 2
  store i16 %156, i16* %154, align 2
  %157 = add i64 %152, -1
  %158 = getelementptr inbounds i16, i16* %154, i64 1
  %159 = getelementptr inbounds i16, i16* %153, i64 1
  %160 = add i64 %155, -1
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %162, label %151, !llvm.loop !77

162:                                              ; preds = %151, %144
  %163 = phi i64 [ %145, %144 ], [ %157, %151 ]
  %164 = phi i16* [ %146, %144 ], [ %159, %151 ]
  %165 = phi i16* [ %147, %144 ], [ %158, %151 ]
  %166 = icmp ult i64 %148, 7
  br i1 %166, label %1388, label %167

167:                                              ; preds = %162, %167
  %168 = phi i64 [ %193, %167 ], [ %163, %162 ]
  %169 = phi i16* [ %195, %167 ], [ %164, %162 ]
  %170 = phi i16* [ %194, %167 ], [ %165, %162 ]
  %171 = load i16, i16* %169, align 2
  store i16 %171, i16* %170, align 2
  %172 = getelementptr inbounds i16, i16* %170, i64 1
  %173 = getelementptr inbounds i16, i16* %169, i64 1
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %170, i64 2
  %176 = getelementptr inbounds i16, i16* %169, i64 2
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %170, i64 3
  %179 = getelementptr inbounds i16, i16* %169, i64 3
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %170, i64 4
  %182 = getelementptr inbounds i16, i16* %169, i64 4
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds i16, i16* %170, i64 5
  %185 = getelementptr inbounds i16, i16* %169, i64 5
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = getelementptr inbounds i16, i16* %170, i64 6
  %188 = getelementptr inbounds i16, i16* %169, i64 6
  %189 = load i16, i16* %188, align 2
  store i16 %189, i16* %187, align 2
  %190 = getelementptr inbounds i16, i16* %170, i64 7
  %191 = getelementptr inbounds i16, i16* %169, i64 7
  %192 = load i16, i16* %191, align 2
  store i16 %192, i16* %190, align 2
  %193 = add i64 %168, -8
  %194 = getelementptr inbounds i16, i16* %170, i64 8
  %195 = getelementptr inbounds i16, i16* %169, i64 8
  %196 = icmp eq i64 %193, 0
  br i1 %196, label %1388, label %167, !llvm.loop !78

197:                                              ; preds = %10
  %198 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %198, i8 0, i64 24, i1 false) #11
  br label %1388

199:                                              ; preds = %4
  switch i32 %5, label %1386 [
    i32 14, label %200
    i32 10, label %384
    i32 11, label %568
    i32 12, label %752
    i32 13, label %936
    i32 93, label %1384
  ]

200:                                              ; preds = %199
  %201 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK8autofill4i18n11PhoneObject14GetWholeNumberEv(%"class.autofill::i18n::PhoneObject"* %6) #11
  %202 = bitcast %"class.std::__1::basic_string"* %201 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %203 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %202, i64 0, i32 1, i32 1
  %204 = load i8, i8* %203, align 1
  %205 = icmp slt i8 %204, 0
  br i1 %205, label %209, label %206

206:                                              ; preds = %200
  %207 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %208 = bitcast %"class.std::__1::basic_string"* %201 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %207, i8* align 8 %208, i64 24, i1 false) #11
  br label %1388

209:                                              ; preds = %200
  %210 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %201, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %211 = load i16*, i16** %210, align 8
  %212 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %201, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %213 = load i64, i64* %212, align 8
  %214 = icmp ult i64 %213, 11
  br i1 %214, label %215, label %220

215:                                              ; preds = %209
  %216 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %217 = trunc i64 %213 to i8
  %218 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %219 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %218, i64 0, i32 1, i32 1
  store i8 %217, i8* %219, align 1
  br label %237

220:                                              ; preds = %209
  %221 = icmp ugt i64 %213, 9223372036854775791
  br i1 %221, label %222, label %224

222:                                              ; preds = %220
  %223 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %223) #13
  unreachable

224:                                              ; preds = %220
  %225 = add nuw nsw i64 %213, 8
  %226 = and i64 %225, -8
  %227 = icmp slt i64 %226, 0
  br i1 %227, label %228, label %229

228:                                              ; preds = %224
  tail call void @abort() #13
  unreachable

229:                                              ; preds = %224
  %230 = shl i64 %226, 1
  %231 = tail call i8* @_Znwm(i64 %230) #12
  %232 = bitcast i8* %231 to i16*
  %233 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %231, i8** %233, align 8
  %234 = or i64 %226, -9223372036854775808
  %235 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %234, i64* %235, align 8
  %236 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %213, i64* %236, align 8
  br label %237

237:                                              ; preds = %229, %215
  %238 = phi i16* [ %216, %215 ], [ %232, %229 ]
  %239 = add nuw nsw i64 %213, 1
  %240 = add i64 %213, 1
  %241 = icmp ult i64 %240, 16
  br i1 %241, label %331, label %242

242:                                              ; preds = %237
  %243 = add i64 %213, 1
  %244 = getelementptr i16, i16* %238, i64 %243
  %245 = getelementptr i16, i16* %211, i64 %243
  %246 = icmp ult i16* %238, %245
  %247 = icmp ult i16* %211, %244
  %248 = and i1 %246, %247
  br i1 %248, label %331, label %249

249:                                              ; preds = %242
  %250 = and i64 %240, -16
  %251 = sub i64 %239, %250
  %252 = getelementptr i16, i16* %211, i64 %250
  %253 = getelementptr i16, i16* %238, i64 %250
  %254 = add i64 %250, -16
  %255 = lshr exact i64 %254, 4
  %256 = add nuw nsw i64 %255, 1
  %257 = and i64 %256, 3
  %258 = icmp ult i64 %254, 48
  br i1 %258, label %310, label %259

259:                                              ; preds = %249
  %260 = sub nsw i64 %256, %257
  br label %261

261:                                              ; preds = %261, %259
  %262 = phi i64 [ 0, %259 ], [ %307, %261 ]
  %263 = phi i64 [ %260, %259 ], [ %308, %261 ]
  %264 = getelementptr i16, i16* %211, i64 %262
  %265 = getelementptr i16, i16* %238, i64 %262
  %266 = bitcast i16* %264 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2, !alias.scope !79
  %268 = getelementptr i16, i16* %264, i64 8
  %269 = bitcast i16* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !79
  %271 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %271, align 2, !alias.scope !82, !noalias !79
  %272 = getelementptr i16, i16* %265, i64 8
  %273 = bitcast i16* %272 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %273, align 2, !alias.scope !82, !noalias !79
  %274 = or i64 %262, 16
  %275 = getelementptr i16, i16* %211, i64 %274
  %276 = getelementptr i16, i16* %238, i64 %274
  %277 = bitcast i16* %275 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 2, !alias.scope !79
  %279 = getelementptr i16, i16* %275, i64 8
  %280 = bitcast i16* %279 to <8 x i16>*
  %281 = load <8 x i16>, <8 x i16>* %280, align 2, !alias.scope !79
  %282 = bitcast i16* %276 to <8 x i16>*
  store <8 x i16> %278, <8 x i16>* %282, align 2, !alias.scope !82, !noalias !79
  %283 = getelementptr i16, i16* %276, i64 8
  %284 = bitcast i16* %283 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %284, align 2, !alias.scope !82, !noalias !79
  %285 = or i64 %262, 32
  %286 = getelementptr i16, i16* %211, i64 %285
  %287 = getelementptr i16, i16* %238, i64 %285
  %288 = bitcast i16* %286 to <8 x i16>*
  %289 = load <8 x i16>, <8 x i16>* %288, align 2, !alias.scope !79
  %290 = getelementptr i16, i16* %286, i64 8
  %291 = bitcast i16* %290 to <8 x i16>*
  %292 = load <8 x i16>, <8 x i16>* %291, align 2, !alias.scope !79
  %293 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %289, <8 x i16>* %293, align 2, !alias.scope !82, !noalias !79
  %294 = getelementptr i16, i16* %287, i64 8
  %295 = bitcast i16* %294 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %295, align 2, !alias.scope !82, !noalias !79
  %296 = or i64 %262, 48
  %297 = getelementptr i16, i16* %211, i64 %296
  %298 = getelementptr i16, i16* %238, i64 %296
  %299 = bitcast i16* %297 to <8 x i16>*
  %300 = load <8 x i16>, <8 x i16>* %299, align 2, !alias.scope !79
  %301 = getelementptr i16, i16* %297, i64 8
  %302 = bitcast i16* %301 to <8 x i16>*
  %303 = load <8 x i16>, <8 x i16>* %302, align 2, !alias.scope !79
  %304 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %300, <8 x i16>* %304, align 2, !alias.scope !82, !noalias !79
  %305 = getelementptr i16, i16* %298, i64 8
  %306 = bitcast i16* %305 to <8 x i16>*
  store <8 x i16> %303, <8 x i16>* %306, align 2, !alias.scope !82, !noalias !79
  %307 = add i64 %262, 64
  %308 = add i64 %263, -4
  %309 = icmp eq i64 %308, 0
  br i1 %309, label %310, label %261, !llvm.loop !84

310:                                              ; preds = %261, %249
  %311 = phi i64 [ 0, %249 ], [ %307, %261 ]
  %312 = icmp eq i64 %257, 0
  br i1 %312, label %329, label %313

313:                                              ; preds = %310, %313
  %314 = phi i64 [ %326, %313 ], [ %311, %310 ]
  %315 = phi i64 [ %327, %313 ], [ %257, %310 ]
  %316 = getelementptr i16, i16* %211, i64 %314
  %317 = getelementptr i16, i16* %238, i64 %314
  %318 = bitcast i16* %316 to <8 x i16>*
  %319 = load <8 x i16>, <8 x i16>* %318, align 2, !alias.scope !79
  %320 = getelementptr i16, i16* %316, i64 8
  %321 = bitcast i16* %320 to <8 x i16>*
  %322 = load <8 x i16>, <8 x i16>* %321, align 2, !alias.scope !79
  %323 = bitcast i16* %317 to <8 x i16>*
  store <8 x i16> %319, <8 x i16>* %323, align 2, !alias.scope !82, !noalias !79
  %324 = getelementptr i16, i16* %317, i64 8
  %325 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %322, <8 x i16>* %325, align 2, !alias.scope !82, !noalias !79
  %326 = add i64 %314, 16
  %327 = add i64 %315, -1
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %329, label %313, !llvm.loop !85

329:                                              ; preds = %313, %310
  %330 = icmp eq i64 %240, %250
  br i1 %330, label %1388, label %331

331:                                              ; preds = %329, %242, %237
  %332 = phi i64 [ %239, %242 ], [ %239, %237 ], [ %251, %329 ]
  %333 = phi i16* [ %211, %242 ], [ %211, %237 ], [ %252, %329 ]
  %334 = phi i16* [ %238, %242 ], [ %238, %237 ], [ %253, %329 ]
  %335 = add i64 %332, -1
  %336 = and i64 %332, 7
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %349, label %338

338:                                              ; preds = %331, %338
  %339 = phi i64 [ %344, %338 ], [ %332, %331 ]
  %340 = phi i16* [ %346, %338 ], [ %333, %331 ]
  %341 = phi i16* [ %345, %338 ], [ %334, %331 ]
  %342 = phi i64 [ %347, %338 ], [ %336, %331 ]
  %343 = load i16, i16* %340, align 2
  store i16 %343, i16* %341, align 2
  %344 = add i64 %339, -1
  %345 = getelementptr inbounds i16, i16* %341, i64 1
  %346 = getelementptr inbounds i16, i16* %340, i64 1
  %347 = add i64 %342, -1
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %349, label %338, !llvm.loop !86

349:                                              ; preds = %338, %331
  %350 = phi i64 [ %332, %331 ], [ %344, %338 ]
  %351 = phi i16* [ %333, %331 ], [ %346, %338 ]
  %352 = phi i16* [ %334, %331 ], [ %345, %338 ]
  %353 = icmp ult i64 %335, 7
  br i1 %353, label %1388, label %354

354:                                              ; preds = %349, %354
  %355 = phi i64 [ %380, %354 ], [ %350, %349 ]
  %356 = phi i16* [ %382, %354 ], [ %351, %349 ]
  %357 = phi i16* [ %381, %354 ], [ %352, %349 ]
  %358 = load i16, i16* %356, align 2
  store i16 %358, i16* %357, align 2
  %359 = getelementptr inbounds i16, i16* %357, i64 1
  %360 = getelementptr inbounds i16, i16* %356, i64 1
  %361 = load i16, i16* %360, align 2
  store i16 %361, i16* %359, align 2
  %362 = getelementptr inbounds i16, i16* %357, i64 2
  %363 = getelementptr inbounds i16, i16* %356, i64 2
  %364 = load i16, i16* %363, align 2
  store i16 %364, i16* %362, align 2
  %365 = getelementptr inbounds i16, i16* %357, i64 3
  %366 = getelementptr inbounds i16, i16* %356, i64 3
  %367 = load i16, i16* %366, align 2
  store i16 %367, i16* %365, align 2
  %368 = getelementptr inbounds i16, i16* %357, i64 4
  %369 = getelementptr inbounds i16, i16* %356, i64 4
  %370 = load i16, i16* %369, align 2
  store i16 %370, i16* %368, align 2
  %371 = getelementptr inbounds i16, i16* %357, i64 5
  %372 = getelementptr inbounds i16, i16* %356, i64 5
  %373 = load i16, i16* %372, align 2
  store i16 %373, i16* %371, align 2
  %374 = getelementptr inbounds i16, i16* %357, i64 6
  %375 = getelementptr inbounds i16, i16* %356, i64 6
  %376 = load i16, i16* %375, align 2
  store i16 %376, i16* %374, align 2
  %377 = getelementptr inbounds i16, i16* %357, i64 7
  %378 = getelementptr inbounds i16, i16* %356, i64 7
  %379 = load i16, i16* %378, align 2
  store i16 %379, i16* %377, align 2
  %380 = add i64 %355, -8
  %381 = getelementptr inbounds i16, i16* %357, i64 8
  %382 = getelementptr inbounds i16, i16* %356, i64 8
  %383 = icmp eq i64 %380, 0
  br i1 %383, label %1388, label %354, !llvm.loop !87

384:                                              ; preds = %199
  %385 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 3, i32 4
  %386 = bitcast %"class.std::__1::basic_string"* %385 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %387 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %386, i64 0, i32 1, i32 1
  %388 = load i8, i8* %387, align 1
  %389 = icmp slt i8 %388, 0
  br i1 %389, label %393, label %390

390:                                              ; preds = %384
  %391 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %392 = bitcast %"class.std::__1::basic_string"* %385 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %391, i8* align 8 %392, i64 24, i1 false) #11
  br label %1388

393:                                              ; preds = %384
  %394 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %385, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %395 = load i16*, i16** %394, align 8
  %396 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 3, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %397 = load i64, i64* %396, align 8
  %398 = icmp ult i64 %397, 11
  br i1 %398, label %399, label %404

399:                                              ; preds = %393
  %400 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %401 = trunc i64 %397 to i8
  %402 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %403 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %402, i64 0, i32 1, i32 1
  store i8 %401, i8* %403, align 1
  br label %421

404:                                              ; preds = %393
  %405 = icmp ugt i64 %397, 9223372036854775791
  br i1 %405, label %406, label %408

406:                                              ; preds = %404
  %407 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %407) #13
  unreachable

408:                                              ; preds = %404
  %409 = add nuw nsw i64 %397, 8
  %410 = and i64 %409, -8
  %411 = icmp slt i64 %410, 0
  br i1 %411, label %412, label %413

412:                                              ; preds = %408
  tail call void @abort() #13
  unreachable

413:                                              ; preds = %408
  %414 = shl i64 %410, 1
  %415 = tail call i8* @_Znwm(i64 %414) #12
  %416 = bitcast i8* %415 to i16*
  %417 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %415, i8** %417, align 8
  %418 = or i64 %410, -9223372036854775808
  %419 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %418, i64* %419, align 8
  %420 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %397, i64* %420, align 8
  br label %421

421:                                              ; preds = %413, %399
  %422 = phi i16* [ %400, %399 ], [ %416, %413 ]
  %423 = add nuw nsw i64 %397, 1
  %424 = add i64 %397, 1
  %425 = icmp ult i64 %424, 16
  br i1 %425, label %515, label %426

426:                                              ; preds = %421
  %427 = add i64 %397, 1
  %428 = getelementptr i16, i16* %422, i64 %427
  %429 = getelementptr i16, i16* %395, i64 %427
  %430 = icmp ult i16* %422, %429
  %431 = icmp ult i16* %395, %428
  %432 = and i1 %430, %431
  br i1 %432, label %515, label %433

433:                                              ; preds = %426
  %434 = and i64 %424, -16
  %435 = sub i64 %423, %434
  %436 = getelementptr i16, i16* %395, i64 %434
  %437 = getelementptr i16, i16* %422, i64 %434
  %438 = add i64 %434, -16
  %439 = lshr exact i64 %438, 4
  %440 = add nuw nsw i64 %439, 1
  %441 = and i64 %440, 3
  %442 = icmp ult i64 %438, 48
  br i1 %442, label %494, label %443

443:                                              ; preds = %433
  %444 = sub nsw i64 %440, %441
  br label %445

445:                                              ; preds = %445, %443
  %446 = phi i64 [ 0, %443 ], [ %491, %445 ]
  %447 = phi i64 [ %444, %443 ], [ %492, %445 ]
  %448 = getelementptr i16, i16* %395, i64 %446
  %449 = getelementptr i16, i16* %422, i64 %446
  %450 = bitcast i16* %448 to <8 x i16>*
  %451 = load <8 x i16>, <8 x i16>* %450, align 2, !alias.scope !88
  %452 = getelementptr i16, i16* %448, i64 8
  %453 = bitcast i16* %452 to <8 x i16>*
  %454 = load <8 x i16>, <8 x i16>* %453, align 2, !alias.scope !88
  %455 = bitcast i16* %449 to <8 x i16>*
  store <8 x i16> %451, <8 x i16>* %455, align 2, !alias.scope !91, !noalias !88
  %456 = getelementptr i16, i16* %449, i64 8
  %457 = bitcast i16* %456 to <8 x i16>*
  store <8 x i16> %454, <8 x i16>* %457, align 2, !alias.scope !91, !noalias !88
  %458 = or i64 %446, 16
  %459 = getelementptr i16, i16* %395, i64 %458
  %460 = getelementptr i16, i16* %422, i64 %458
  %461 = bitcast i16* %459 to <8 x i16>*
  %462 = load <8 x i16>, <8 x i16>* %461, align 2, !alias.scope !88
  %463 = getelementptr i16, i16* %459, i64 8
  %464 = bitcast i16* %463 to <8 x i16>*
  %465 = load <8 x i16>, <8 x i16>* %464, align 2, !alias.scope !88
  %466 = bitcast i16* %460 to <8 x i16>*
  store <8 x i16> %462, <8 x i16>* %466, align 2, !alias.scope !91, !noalias !88
  %467 = getelementptr i16, i16* %460, i64 8
  %468 = bitcast i16* %467 to <8 x i16>*
  store <8 x i16> %465, <8 x i16>* %468, align 2, !alias.scope !91, !noalias !88
  %469 = or i64 %446, 32
  %470 = getelementptr i16, i16* %395, i64 %469
  %471 = getelementptr i16, i16* %422, i64 %469
  %472 = bitcast i16* %470 to <8 x i16>*
  %473 = load <8 x i16>, <8 x i16>* %472, align 2, !alias.scope !88
  %474 = getelementptr i16, i16* %470, i64 8
  %475 = bitcast i16* %474 to <8 x i16>*
  %476 = load <8 x i16>, <8 x i16>* %475, align 2, !alias.scope !88
  %477 = bitcast i16* %471 to <8 x i16>*
  store <8 x i16> %473, <8 x i16>* %477, align 2, !alias.scope !91, !noalias !88
  %478 = getelementptr i16, i16* %471, i64 8
  %479 = bitcast i16* %478 to <8 x i16>*
  store <8 x i16> %476, <8 x i16>* %479, align 2, !alias.scope !91, !noalias !88
  %480 = or i64 %446, 48
  %481 = getelementptr i16, i16* %395, i64 %480
  %482 = getelementptr i16, i16* %422, i64 %480
  %483 = bitcast i16* %481 to <8 x i16>*
  %484 = load <8 x i16>, <8 x i16>* %483, align 2, !alias.scope !88
  %485 = getelementptr i16, i16* %481, i64 8
  %486 = bitcast i16* %485 to <8 x i16>*
  %487 = load <8 x i16>, <8 x i16>* %486, align 2, !alias.scope !88
  %488 = bitcast i16* %482 to <8 x i16>*
  store <8 x i16> %484, <8 x i16>* %488, align 2, !alias.scope !91, !noalias !88
  %489 = getelementptr i16, i16* %482, i64 8
  %490 = bitcast i16* %489 to <8 x i16>*
  store <8 x i16> %487, <8 x i16>* %490, align 2, !alias.scope !91, !noalias !88
  %491 = add i64 %446, 64
  %492 = add i64 %447, -4
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %494, label %445, !llvm.loop !93

494:                                              ; preds = %445, %433
  %495 = phi i64 [ 0, %433 ], [ %491, %445 ]
  %496 = icmp eq i64 %441, 0
  br i1 %496, label %513, label %497

497:                                              ; preds = %494, %497
  %498 = phi i64 [ %510, %497 ], [ %495, %494 ]
  %499 = phi i64 [ %511, %497 ], [ %441, %494 ]
  %500 = getelementptr i16, i16* %395, i64 %498
  %501 = getelementptr i16, i16* %422, i64 %498
  %502 = bitcast i16* %500 to <8 x i16>*
  %503 = load <8 x i16>, <8 x i16>* %502, align 2, !alias.scope !88
  %504 = getelementptr i16, i16* %500, i64 8
  %505 = bitcast i16* %504 to <8 x i16>*
  %506 = load <8 x i16>, <8 x i16>* %505, align 2, !alias.scope !88
  %507 = bitcast i16* %501 to <8 x i16>*
  store <8 x i16> %503, <8 x i16>* %507, align 2, !alias.scope !91, !noalias !88
  %508 = getelementptr i16, i16* %501, i64 8
  %509 = bitcast i16* %508 to <8 x i16>*
  store <8 x i16> %506, <8 x i16>* %509, align 2, !alias.scope !91, !noalias !88
  %510 = add i64 %498, 16
  %511 = add i64 %499, -1
  %512 = icmp eq i64 %511, 0
  br i1 %512, label %513, label %497, !llvm.loop !94

513:                                              ; preds = %497, %494
  %514 = icmp eq i64 %424, %434
  br i1 %514, label %1388, label %515

515:                                              ; preds = %513, %426, %421
  %516 = phi i64 [ %423, %426 ], [ %423, %421 ], [ %435, %513 ]
  %517 = phi i16* [ %395, %426 ], [ %395, %421 ], [ %436, %513 ]
  %518 = phi i16* [ %422, %426 ], [ %422, %421 ], [ %437, %513 ]
  %519 = add i64 %516, -1
  %520 = and i64 %516, 7
  %521 = icmp eq i64 %520, 0
  br i1 %521, label %533, label %522

522:                                              ; preds = %515, %522
  %523 = phi i64 [ %528, %522 ], [ %516, %515 ]
  %524 = phi i16* [ %530, %522 ], [ %517, %515 ]
  %525 = phi i16* [ %529, %522 ], [ %518, %515 ]
  %526 = phi i64 [ %531, %522 ], [ %520, %515 ]
  %527 = load i16, i16* %524, align 2
  store i16 %527, i16* %525, align 2
  %528 = add i64 %523, -1
  %529 = getelementptr inbounds i16, i16* %525, i64 1
  %530 = getelementptr inbounds i16, i16* %524, i64 1
  %531 = add i64 %526, -1
  %532 = icmp eq i64 %531, 0
  br i1 %532, label %533, label %522, !llvm.loop !95

533:                                              ; preds = %522, %515
  %534 = phi i64 [ %516, %515 ], [ %528, %522 ]
  %535 = phi i16* [ %517, %515 ], [ %530, %522 ]
  %536 = phi i16* [ %518, %515 ], [ %529, %522 ]
  %537 = icmp ult i64 %519, 7
  br i1 %537, label %1388, label %538

538:                                              ; preds = %533, %538
  %539 = phi i64 [ %564, %538 ], [ %534, %533 ]
  %540 = phi i16* [ %566, %538 ], [ %535, %533 ]
  %541 = phi i16* [ %565, %538 ], [ %536, %533 ]
  %542 = load i16, i16* %540, align 2
  store i16 %542, i16* %541, align 2
  %543 = getelementptr inbounds i16, i16* %541, i64 1
  %544 = getelementptr inbounds i16, i16* %540, i64 1
  %545 = load i16, i16* %544, align 2
  store i16 %545, i16* %543, align 2
  %546 = getelementptr inbounds i16, i16* %541, i64 2
  %547 = getelementptr inbounds i16, i16* %540, i64 2
  %548 = load i16, i16* %547, align 2
  store i16 %548, i16* %546, align 2
  %549 = getelementptr inbounds i16, i16* %541, i64 3
  %550 = getelementptr inbounds i16, i16* %540, i64 3
  %551 = load i16, i16* %550, align 2
  store i16 %551, i16* %549, align 2
  %552 = getelementptr inbounds i16, i16* %541, i64 4
  %553 = getelementptr inbounds i16, i16* %540, i64 4
  %554 = load i16, i16* %553, align 2
  store i16 %554, i16* %552, align 2
  %555 = getelementptr inbounds i16, i16* %541, i64 5
  %556 = getelementptr inbounds i16, i16* %540, i64 5
  %557 = load i16, i16* %556, align 2
  store i16 %557, i16* %555, align 2
  %558 = getelementptr inbounds i16, i16* %541, i64 6
  %559 = getelementptr inbounds i16, i16* %540, i64 6
  %560 = load i16, i16* %559, align 2
  store i16 %560, i16* %558, align 2
  %561 = getelementptr inbounds i16, i16* %541, i64 7
  %562 = getelementptr inbounds i16, i16* %540, i64 7
  %563 = load i16, i16* %562, align 2
  store i16 %563, i16* %561, align 2
  %564 = add i64 %539, -8
  %565 = getelementptr inbounds i16, i16* %541, i64 8
  %566 = getelementptr inbounds i16, i16* %540, i64 8
  %567 = icmp eq i64 %564, 0
  br i1 %567, label %1388, label %538, !llvm.loop !96

568:                                              ; preds = %199
  %569 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 3, i32 2
  %570 = bitcast %"class.std::__1::basic_string"* %569 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %571 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %570, i64 0, i32 1, i32 1
  %572 = load i8, i8* %571, align 1
  %573 = icmp slt i8 %572, 0
  br i1 %573, label %577, label %574

574:                                              ; preds = %568
  %575 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %576 = bitcast %"class.std::__1::basic_string"* %569 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %575, i8* align 8 %576, i64 24, i1 false) #11
  br label %1388

577:                                              ; preds = %568
  %578 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %569, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %579 = load i16*, i16** %578, align 8
  %580 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 3, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %581 = load i64, i64* %580, align 8
  %582 = icmp ult i64 %581, 11
  br i1 %582, label %583, label %588

583:                                              ; preds = %577
  %584 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %585 = trunc i64 %581 to i8
  %586 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %587 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %586, i64 0, i32 1, i32 1
  store i8 %585, i8* %587, align 1
  br label %605

588:                                              ; preds = %577
  %589 = icmp ugt i64 %581, 9223372036854775791
  br i1 %589, label %590, label %592

590:                                              ; preds = %588
  %591 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %591) #13
  unreachable

592:                                              ; preds = %588
  %593 = add nuw nsw i64 %581, 8
  %594 = and i64 %593, -8
  %595 = icmp slt i64 %594, 0
  br i1 %595, label %596, label %597

596:                                              ; preds = %592
  tail call void @abort() #13
  unreachable

597:                                              ; preds = %592
  %598 = shl i64 %594, 1
  %599 = tail call i8* @_Znwm(i64 %598) #12
  %600 = bitcast i8* %599 to i16*
  %601 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %599, i8** %601, align 8
  %602 = or i64 %594, -9223372036854775808
  %603 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %602, i64* %603, align 8
  %604 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %581, i64* %604, align 8
  br label %605

605:                                              ; preds = %597, %583
  %606 = phi i16* [ %584, %583 ], [ %600, %597 ]
  %607 = add nuw nsw i64 %581, 1
  %608 = add i64 %581, 1
  %609 = icmp ult i64 %608, 16
  br i1 %609, label %699, label %610

610:                                              ; preds = %605
  %611 = add i64 %581, 1
  %612 = getelementptr i16, i16* %606, i64 %611
  %613 = getelementptr i16, i16* %579, i64 %611
  %614 = icmp ult i16* %606, %613
  %615 = icmp ult i16* %579, %612
  %616 = and i1 %614, %615
  br i1 %616, label %699, label %617

617:                                              ; preds = %610
  %618 = and i64 %608, -16
  %619 = sub i64 %607, %618
  %620 = getelementptr i16, i16* %579, i64 %618
  %621 = getelementptr i16, i16* %606, i64 %618
  %622 = add i64 %618, -16
  %623 = lshr exact i64 %622, 4
  %624 = add nuw nsw i64 %623, 1
  %625 = and i64 %624, 3
  %626 = icmp ult i64 %622, 48
  br i1 %626, label %678, label %627

627:                                              ; preds = %617
  %628 = sub nsw i64 %624, %625
  br label %629

629:                                              ; preds = %629, %627
  %630 = phi i64 [ 0, %627 ], [ %675, %629 ]
  %631 = phi i64 [ %628, %627 ], [ %676, %629 ]
  %632 = getelementptr i16, i16* %579, i64 %630
  %633 = getelementptr i16, i16* %606, i64 %630
  %634 = bitcast i16* %632 to <8 x i16>*
  %635 = load <8 x i16>, <8 x i16>* %634, align 2, !alias.scope !97
  %636 = getelementptr i16, i16* %632, i64 8
  %637 = bitcast i16* %636 to <8 x i16>*
  %638 = load <8 x i16>, <8 x i16>* %637, align 2, !alias.scope !97
  %639 = bitcast i16* %633 to <8 x i16>*
  store <8 x i16> %635, <8 x i16>* %639, align 2, !alias.scope !100, !noalias !97
  %640 = getelementptr i16, i16* %633, i64 8
  %641 = bitcast i16* %640 to <8 x i16>*
  store <8 x i16> %638, <8 x i16>* %641, align 2, !alias.scope !100, !noalias !97
  %642 = or i64 %630, 16
  %643 = getelementptr i16, i16* %579, i64 %642
  %644 = getelementptr i16, i16* %606, i64 %642
  %645 = bitcast i16* %643 to <8 x i16>*
  %646 = load <8 x i16>, <8 x i16>* %645, align 2, !alias.scope !97
  %647 = getelementptr i16, i16* %643, i64 8
  %648 = bitcast i16* %647 to <8 x i16>*
  %649 = load <8 x i16>, <8 x i16>* %648, align 2, !alias.scope !97
  %650 = bitcast i16* %644 to <8 x i16>*
  store <8 x i16> %646, <8 x i16>* %650, align 2, !alias.scope !100, !noalias !97
  %651 = getelementptr i16, i16* %644, i64 8
  %652 = bitcast i16* %651 to <8 x i16>*
  store <8 x i16> %649, <8 x i16>* %652, align 2, !alias.scope !100, !noalias !97
  %653 = or i64 %630, 32
  %654 = getelementptr i16, i16* %579, i64 %653
  %655 = getelementptr i16, i16* %606, i64 %653
  %656 = bitcast i16* %654 to <8 x i16>*
  %657 = load <8 x i16>, <8 x i16>* %656, align 2, !alias.scope !97
  %658 = getelementptr i16, i16* %654, i64 8
  %659 = bitcast i16* %658 to <8 x i16>*
  %660 = load <8 x i16>, <8 x i16>* %659, align 2, !alias.scope !97
  %661 = bitcast i16* %655 to <8 x i16>*
  store <8 x i16> %657, <8 x i16>* %661, align 2, !alias.scope !100, !noalias !97
  %662 = getelementptr i16, i16* %655, i64 8
  %663 = bitcast i16* %662 to <8 x i16>*
  store <8 x i16> %660, <8 x i16>* %663, align 2, !alias.scope !100, !noalias !97
  %664 = or i64 %630, 48
  %665 = getelementptr i16, i16* %579, i64 %664
  %666 = getelementptr i16, i16* %606, i64 %664
  %667 = bitcast i16* %665 to <8 x i16>*
  %668 = load <8 x i16>, <8 x i16>* %667, align 2, !alias.scope !97
  %669 = getelementptr i16, i16* %665, i64 8
  %670 = bitcast i16* %669 to <8 x i16>*
  %671 = load <8 x i16>, <8 x i16>* %670, align 2, !alias.scope !97
  %672 = bitcast i16* %666 to <8 x i16>*
  store <8 x i16> %668, <8 x i16>* %672, align 2, !alias.scope !100, !noalias !97
  %673 = getelementptr i16, i16* %666, i64 8
  %674 = bitcast i16* %673 to <8 x i16>*
  store <8 x i16> %671, <8 x i16>* %674, align 2, !alias.scope !100, !noalias !97
  %675 = add i64 %630, 64
  %676 = add i64 %631, -4
  %677 = icmp eq i64 %676, 0
  br i1 %677, label %678, label %629, !llvm.loop !102

678:                                              ; preds = %629, %617
  %679 = phi i64 [ 0, %617 ], [ %675, %629 ]
  %680 = icmp eq i64 %625, 0
  br i1 %680, label %697, label %681

681:                                              ; preds = %678, %681
  %682 = phi i64 [ %694, %681 ], [ %679, %678 ]
  %683 = phi i64 [ %695, %681 ], [ %625, %678 ]
  %684 = getelementptr i16, i16* %579, i64 %682
  %685 = getelementptr i16, i16* %606, i64 %682
  %686 = bitcast i16* %684 to <8 x i16>*
  %687 = load <8 x i16>, <8 x i16>* %686, align 2, !alias.scope !97
  %688 = getelementptr i16, i16* %684, i64 8
  %689 = bitcast i16* %688 to <8 x i16>*
  %690 = load <8 x i16>, <8 x i16>* %689, align 2, !alias.scope !97
  %691 = bitcast i16* %685 to <8 x i16>*
  store <8 x i16> %687, <8 x i16>* %691, align 2, !alias.scope !100, !noalias !97
  %692 = getelementptr i16, i16* %685, i64 8
  %693 = bitcast i16* %692 to <8 x i16>*
  store <8 x i16> %690, <8 x i16>* %693, align 2, !alias.scope !100, !noalias !97
  %694 = add i64 %682, 16
  %695 = add i64 %683, -1
  %696 = icmp eq i64 %695, 0
  br i1 %696, label %697, label %681, !llvm.loop !103

697:                                              ; preds = %681, %678
  %698 = icmp eq i64 %608, %618
  br i1 %698, label %1388, label %699

699:                                              ; preds = %697, %610, %605
  %700 = phi i64 [ %607, %610 ], [ %607, %605 ], [ %619, %697 ]
  %701 = phi i16* [ %579, %610 ], [ %579, %605 ], [ %620, %697 ]
  %702 = phi i16* [ %606, %610 ], [ %606, %605 ], [ %621, %697 ]
  %703 = add i64 %700, -1
  %704 = and i64 %700, 7
  %705 = icmp eq i64 %704, 0
  br i1 %705, label %717, label %706

706:                                              ; preds = %699, %706
  %707 = phi i64 [ %712, %706 ], [ %700, %699 ]
  %708 = phi i16* [ %714, %706 ], [ %701, %699 ]
  %709 = phi i16* [ %713, %706 ], [ %702, %699 ]
  %710 = phi i64 [ %715, %706 ], [ %704, %699 ]
  %711 = load i16, i16* %708, align 2
  store i16 %711, i16* %709, align 2
  %712 = add i64 %707, -1
  %713 = getelementptr inbounds i16, i16* %709, i64 1
  %714 = getelementptr inbounds i16, i16* %708, i64 1
  %715 = add i64 %710, -1
  %716 = icmp eq i64 %715, 0
  br i1 %716, label %717, label %706, !llvm.loop !104

717:                                              ; preds = %706, %699
  %718 = phi i64 [ %700, %699 ], [ %712, %706 ]
  %719 = phi i16* [ %701, %699 ], [ %714, %706 ]
  %720 = phi i16* [ %702, %699 ], [ %713, %706 ]
  %721 = icmp ult i64 %703, 7
  br i1 %721, label %1388, label %722

722:                                              ; preds = %717, %722
  %723 = phi i64 [ %748, %722 ], [ %718, %717 ]
  %724 = phi i16* [ %750, %722 ], [ %719, %717 ]
  %725 = phi i16* [ %749, %722 ], [ %720, %717 ]
  %726 = load i16, i16* %724, align 2
  store i16 %726, i16* %725, align 2
  %727 = getelementptr inbounds i16, i16* %725, i64 1
  %728 = getelementptr inbounds i16, i16* %724, i64 1
  %729 = load i16, i16* %728, align 2
  store i16 %729, i16* %727, align 2
  %730 = getelementptr inbounds i16, i16* %725, i64 2
  %731 = getelementptr inbounds i16, i16* %724, i64 2
  %732 = load i16, i16* %731, align 2
  store i16 %732, i16* %730, align 2
  %733 = getelementptr inbounds i16, i16* %725, i64 3
  %734 = getelementptr inbounds i16, i16* %724, i64 3
  %735 = load i16, i16* %734, align 2
  store i16 %735, i16* %733, align 2
  %736 = getelementptr inbounds i16, i16* %725, i64 4
  %737 = getelementptr inbounds i16, i16* %724, i64 4
  %738 = load i16, i16* %737, align 2
  store i16 %738, i16* %736, align 2
  %739 = getelementptr inbounds i16, i16* %725, i64 5
  %740 = getelementptr inbounds i16, i16* %724, i64 5
  %741 = load i16, i16* %740, align 2
  store i16 %741, i16* %739, align 2
  %742 = getelementptr inbounds i16, i16* %725, i64 6
  %743 = getelementptr inbounds i16, i16* %724, i64 6
  %744 = load i16, i16* %743, align 2
  store i16 %744, i16* %742, align 2
  %745 = getelementptr inbounds i16, i16* %725, i64 7
  %746 = getelementptr inbounds i16, i16* %724, i64 7
  %747 = load i16, i16* %746, align 2
  store i16 %747, i16* %745, align 2
  %748 = add i64 %723, -8
  %749 = getelementptr inbounds i16, i16* %725, i64 8
  %750 = getelementptr inbounds i16, i16* %724, i64 8
  %751 = icmp eq i64 %748, 0
  br i1 %751, label %1388, label %722, !llvm.loop !105

752:                                              ; preds = %199
  %753 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 3, i32 3
  %754 = bitcast %"class.std::__1::basic_string"* %753 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %755 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %754, i64 0, i32 1, i32 1
  %756 = load i8, i8* %755, align 1
  %757 = icmp slt i8 %756, 0
  br i1 %757, label %761, label %758

758:                                              ; preds = %752
  %759 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %760 = bitcast %"class.std::__1::basic_string"* %753 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %759, i8* align 8 %760, i64 24, i1 false) #11
  br label %1388

761:                                              ; preds = %752
  %762 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %753, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %763 = load i16*, i16** %762, align 8
  %764 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %1, i64 0, i32 3, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %765 = load i64, i64* %764, align 8
  %766 = icmp ult i64 %765, 11
  br i1 %766, label %767, label %772

767:                                              ; preds = %761
  %768 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %769 = trunc i64 %765 to i8
  %770 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %771 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %770, i64 0, i32 1, i32 1
  store i8 %769, i8* %771, align 1
  br label %789

772:                                              ; preds = %761
  %773 = icmp ugt i64 %765, 9223372036854775791
  br i1 %773, label %774, label %776

774:                                              ; preds = %772
  %775 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %775) #13
  unreachable

776:                                              ; preds = %772
  %777 = add nuw nsw i64 %765, 8
  %778 = and i64 %777, -8
  %779 = icmp slt i64 %778, 0
  br i1 %779, label %780, label %781

780:                                              ; preds = %776
  tail call void @abort() #13
  unreachable

781:                                              ; preds = %776
  %782 = shl i64 %778, 1
  %783 = tail call i8* @_Znwm(i64 %782) #12
  %784 = bitcast i8* %783 to i16*
  %785 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %783, i8** %785, align 8
  %786 = or i64 %778, -9223372036854775808
  %787 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %786, i64* %787, align 8
  %788 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %765, i64* %788, align 8
  br label %789

789:                                              ; preds = %781, %767
  %790 = phi i16* [ %768, %767 ], [ %784, %781 ]
  %791 = add nuw nsw i64 %765, 1
  %792 = add i64 %765, 1
  %793 = icmp ult i64 %792, 16
  br i1 %793, label %883, label %794

794:                                              ; preds = %789
  %795 = add i64 %765, 1
  %796 = getelementptr i16, i16* %790, i64 %795
  %797 = getelementptr i16, i16* %763, i64 %795
  %798 = icmp ult i16* %790, %797
  %799 = icmp ult i16* %763, %796
  %800 = and i1 %798, %799
  br i1 %800, label %883, label %801

801:                                              ; preds = %794
  %802 = and i64 %792, -16
  %803 = sub i64 %791, %802
  %804 = getelementptr i16, i16* %763, i64 %802
  %805 = getelementptr i16, i16* %790, i64 %802
  %806 = add i64 %802, -16
  %807 = lshr exact i64 %806, 4
  %808 = add nuw nsw i64 %807, 1
  %809 = and i64 %808, 3
  %810 = icmp ult i64 %806, 48
  br i1 %810, label %862, label %811

811:                                              ; preds = %801
  %812 = sub nsw i64 %808, %809
  br label %813

813:                                              ; preds = %813, %811
  %814 = phi i64 [ 0, %811 ], [ %859, %813 ]
  %815 = phi i64 [ %812, %811 ], [ %860, %813 ]
  %816 = getelementptr i16, i16* %763, i64 %814
  %817 = getelementptr i16, i16* %790, i64 %814
  %818 = bitcast i16* %816 to <8 x i16>*
  %819 = load <8 x i16>, <8 x i16>* %818, align 2, !alias.scope !106
  %820 = getelementptr i16, i16* %816, i64 8
  %821 = bitcast i16* %820 to <8 x i16>*
  %822 = load <8 x i16>, <8 x i16>* %821, align 2, !alias.scope !106
  %823 = bitcast i16* %817 to <8 x i16>*
  store <8 x i16> %819, <8 x i16>* %823, align 2, !alias.scope !109, !noalias !106
  %824 = getelementptr i16, i16* %817, i64 8
  %825 = bitcast i16* %824 to <8 x i16>*
  store <8 x i16> %822, <8 x i16>* %825, align 2, !alias.scope !109, !noalias !106
  %826 = or i64 %814, 16
  %827 = getelementptr i16, i16* %763, i64 %826
  %828 = getelementptr i16, i16* %790, i64 %826
  %829 = bitcast i16* %827 to <8 x i16>*
  %830 = load <8 x i16>, <8 x i16>* %829, align 2, !alias.scope !106
  %831 = getelementptr i16, i16* %827, i64 8
  %832 = bitcast i16* %831 to <8 x i16>*
  %833 = load <8 x i16>, <8 x i16>* %832, align 2, !alias.scope !106
  %834 = bitcast i16* %828 to <8 x i16>*
  store <8 x i16> %830, <8 x i16>* %834, align 2, !alias.scope !109, !noalias !106
  %835 = getelementptr i16, i16* %828, i64 8
  %836 = bitcast i16* %835 to <8 x i16>*
  store <8 x i16> %833, <8 x i16>* %836, align 2, !alias.scope !109, !noalias !106
  %837 = or i64 %814, 32
  %838 = getelementptr i16, i16* %763, i64 %837
  %839 = getelementptr i16, i16* %790, i64 %837
  %840 = bitcast i16* %838 to <8 x i16>*
  %841 = load <8 x i16>, <8 x i16>* %840, align 2, !alias.scope !106
  %842 = getelementptr i16, i16* %838, i64 8
  %843 = bitcast i16* %842 to <8 x i16>*
  %844 = load <8 x i16>, <8 x i16>* %843, align 2, !alias.scope !106
  %845 = bitcast i16* %839 to <8 x i16>*
  store <8 x i16> %841, <8 x i16>* %845, align 2, !alias.scope !109, !noalias !106
  %846 = getelementptr i16, i16* %839, i64 8
  %847 = bitcast i16* %846 to <8 x i16>*
  store <8 x i16> %844, <8 x i16>* %847, align 2, !alias.scope !109, !noalias !106
  %848 = or i64 %814, 48
  %849 = getelementptr i16, i16* %763, i64 %848
  %850 = getelementptr i16, i16* %790, i64 %848
  %851 = bitcast i16* %849 to <8 x i16>*
  %852 = load <8 x i16>, <8 x i16>* %851, align 2, !alias.scope !106
  %853 = getelementptr i16, i16* %849, i64 8
  %854 = bitcast i16* %853 to <8 x i16>*
  %855 = load <8 x i16>, <8 x i16>* %854, align 2, !alias.scope !106
  %856 = bitcast i16* %850 to <8 x i16>*
  store <8 x i16> %852, <8 x i16>* %856, align 2, !alias.scope !109, !noalias !106
  %857 = getelementptr i16, i16* %850, i64 8
  %858 = bitcast i16* %857 to <8 x i16>*
  store <8 x i16> %855, <8 x i16>* %858, align 2, !alias.scope !109, !noalias !106
  %859 = add i64 %814, 64
  %860 = add i64 %815, -4
  %861 = icmp eq i64 %860, 0
  br i1 %861, label %862, label %813, !llvm.loop !111

862:                                              ; preds = %813, %801
  %863 = phi i64 [ 0, %801 ], [ %859, %813 ]
  %864 = icmp eq i64 %809, 0
  br i1 %864, label %881, label %865

865:                                              ; preds = %862, %865
  %866 = phi i64 [ %878, %865 ], [ %863, %862 ]
  %867 = phi i64 [ %879, %865 ], [ %809, %862 ]
  %868 = getelementptr i16, i16* %763, i64 %866
  %869 = getelementptr i16, i16* %790, i64 %866
  %870 = bitcast i16* %868 to <8 x i16>*
  %871 = load <8 x i16>, <8 x i16>* %870, align 2, !alias.scope !106
  %872 = getelementptr i16, i16* %868, i64 8
  %873 = bitcast i16* %872 to <8 x i16>*
  %874 = load <8 x i16>, <8 x i16>* %873, align 2, !alias.scope !106
  %875 = bitcast i16* %869 to <8 x i16>*
  store <8 x i16> %871, <8 x i16>* %875, align 2, !alias.scope !109, !noalias !106
  %876 = getelementptr i16, i16* %869, i64 8
  %877 = bitcast i16* %876 to <8 x i16>*
  store <8 x i16> %874, <8 x i16>* %877, align 2, !alias.scope !109, !noalias !106
  %878 = add i64 %866, 16
  %879 = add i64 %867, -1
  %880 = icmp eq i64 %879, 0
  br i1 %880, label %881, label %865, !llvm.loop !112

881:                                              ; preds = %865, %862
  %882 = icmp eq i64 %792, %802
  br i1 %882, label %1388, label %883

883:                                              ; preds = %881, %794, %789
  %884 = phi i64 [ %791, %794 ], [ %791, %789 ], [ %803, %881 ]
  %885 = phi i16* [ %763, %794 ], [ %763, %789 ], [ %804, %881 ]
  %886 = phi i16* [ %790, %794 ], [ %790, %789 ], [ %805, %881 ]
  %887 = add i64 %884, -1
  %888 = and i64 %884, 7
  %889 = icmp eq i64 %888, 0
  br i1 %889, label %901, label %890

890:                                              ; preds = %883, %890
  %891 = phi i64 [ %896, %890 ], [ %884, %883 ]
  %892 = phi i16* [ %898, %890 ], [ %885, %883 ]
  %893 = phi i16* [ %897, %890 ], [ %886, %883 ]
  %894 = phi i64 [ %899, %890 ], [ %888, %883 ]
  %895 = load i16, i16* %892, align 2
  store i16 %895, i16* %893, align 2
  %896 = add i64 %891, -1
  %897 = getelementptr inbounds i16, i16* %893, i64 1
  %898 = getelementptr inbounds i16, i16* %892, i64 1
  %899 = add i64 %894, -1
  %900 = icmp eq i64 %899, 0
  br i1 %900, label %901, label %890, !llvm.loop !113

901:                                              ; preds = %890, %883
  %902 = phi i64 [ %884, %883 ], [ %896, %890 ]
  %903 = phi i16* [ %885, %883 ], [ %898, %890 ]
  %904 = phi i16* [ %886, %883 ], [ %897, %890 ]
  %905 = icmp ult i64 %887, 7
  br i1 %905, label %1388, label %906

906:                                              ; preds = %901, %906
  %907 = phi i64 [ %932, %906 ], [ %902, %901 ]
  %908 = phi i16* [ %934, %906 ], [ %903, %901 ]
  %909 = phi i16* [ %933, %906 ], [ %904, %901 ]
  %910 = load i16, i16* %908, align 2
  store i16 %910, i16* %909, align 2
  %911 = getelementptr inbounds i16, i16* %909, i64 1
  %912 = getelementptr inbounds i16, i16* %908, i64 1
  %913 = load i16, i16* %912, align 2
  store i16 %913, i16* %911, align 2
  %914 = getelementptr inbounds i16, i16* %909, i64 2
  %915 = getelementptr inbounds i16, i16* %908, i64 2
  %916 = load i16, i16* %915, align 2
  store i16 %916, i16* %914, align 2
  %917 = getelementptr inbounds i16, i16* %909, i64 3
  %918 = getelementptr inbounds i16, i16* %908, i64 3
  %919 = load i16, i16* %918, align 2
  store i16 %919, i16* %917, align 2
  %920 = getelementptr inbounds i16, i16* %909, i64 4
  %921 = getelementptr inbounds i16, i16* %908, i64 4
  %922 = load i16, i16* %921, align 2
  store i16 %922, i16* %920, align 2
  %923 = getelementptr inbounds i16, i16* %909, i64 5
  %924 = getelementptr inbounds i16, i16* %908, i64 5
  %925 = load i16, i16* %924, align 2
  store i16 %925, i16* %923, align 2
  %926 = getelementptr inbounds i16, i16* %909, i64 6
  %927 = getelementptr inbounds i16, i16* %908, i64 6
  %928 = load i16, i16* %927, align 2
  store i16 %928, i16* %926, align 2
  %929 = getelementptr inbounds i16, i16* %909, i64 7
  %930 = getelementptr inbounds i16, i16* %908, i64 7
  %931 = load i16, i16* %930, align 2
  store i16 %931, i16* %929, align 2
  %932 = add i64 %907, -8
  %933 = getelementptr inbounds i16, i16* %909, i64 8
  %934 = getelementptr inbounds i16, i16* %908, i64 8
  %935 = icmp eq i64 %932, 0
  br i1 %935, label %1388, label %906, !llvm.loop !114

936:                                              ; preds = %199
  %937 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %938 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %939 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %939, i8 -86, i64 24, i1 false)
  tail call void @_ZNK8autofill4i18n11PhoneObject28GetNationallyFormattedNumberEv(%"class.std::__1::basic_string"* sret %0, %"class.autofill::i18n::PhoneObject"* %6) #11
  %940 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %941 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %940, i64 0, i32 1, i32 1
  %942 = load i8, i8* %941, align 1
  %943 = icmp slt i8 %942, 0
  %944 = load i16*, i16** %937, align 8
  %945 = load i64, i64* %938, align 8
  %946 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %947 = zext i8 %942 to i64
  %948 = select i1 %943, i16* %944, i16* %946
  %949 = select i1 %943, i64 %945, i64 %947
  %950 = getelementptr inbounds i16, i16* %948, i64 %949
  %951 = icmp eq i64 %949, 0
  br i1 %951, label %963, label %952

952:                                              ; preds = %936, %958
  %953 = phi i16* [ %959, %958 ], [ %948, %936 ]
  %954 = load i16, i16* %953, align 2
  %955 = zext i16 %954 to i32
  %956 = add nsw i32 %955, -48
  %957 = icmp ugt i32 %956, 9
  br i1 %957, label %963, label %958

958:                                              ; preds = %952
  %959 = getelementptr inbounds i16, i16* %953, i64 1
  %960 = icmp eq i16* %959, %950
  br i1 %960, label %961, label %952

961:                                              ; preds = %958
  %962 = ptrtoint i16* %950 to i64
  br label %1025

963:                                              ; preds = %952, %936
  %964 = phi i16* [ %948, %936 ], [ %953, %952 ]
  %965 = ptrtoint i16* %964 to i64
  %966 = icmp eq i16* %964, %950
  br i1 %966, label %1025, label %967

967:                                              ; preds = %963
  %968 = getelementptr inbounds i16, i16* %964, i64 1
  %969 = icmp eq i16* %968, %950
  br i1 %969, label %1025, label %970

970:                                              ; preds = %967
  %971 = add i64 %949, -2
  %972 = getelementptr i16, i16* %948, i64 %971
  %973 = ptrtoint i16* %972 to i64
  %974 = sub i64 %973, %965
  %975 = lshr i64 %974, 1
  %976 = add nuw i64 %975, 1
  %977 = and i64 %976, 3
  %978 = icmp eq i64 %977, 0
  br i1 %978, label %996, label %979

979:                                              ; preds = %970, %991
  %980 = phi i16* [ %993, %991 ], [ %968, %970 ]
  %981 = phi i64 [ %992, %991 ], [ %965, %970 ]
  %982 = phi i64 [ %994, %991 ], [ %977, %970 ]
  %983 = load i16, i16* %980, align 2
  %984 = zext i16 %983 to i32
  %985 = add nsw i32 %984, -48
  %986 = icmp ugt i32 %985, 9
  br i1 %986, label %991, label %987

987:                                              ; preds = %979
  %988 = inttoptr i64 %981 to i16*
  store i16 %983, i16* %988, align 2
  %989 = getelementptr inbounds i16, i16* %988, i64 1
  %990 = ptrtoint i16* %989 to i64
  br label %991

991:                                              ; preds = %987, %979
  %992 = phi i64 [ %981, %979 ], [ %990, %987 ]
  %993 = getelementptr inbounds i16, i16* %980, i64 1
  %994 = add i64 %982, -1
  %995 = icmp eq i64 %994, 0
  br i1 %995, label %996, label %979, !llvm.loop !115

996:                                              ; preds = %991, %970
  %997 = phi i64 [ undef, %970 ], [ %992, %991 ]
  %998 = phi i16* [ %968, %970 ], [ %993, %991 ]
  %999 = phi i64 [ %965, %970 ], [ %992, %991 ]
  %1000 = icmp ult i64 %974, 6
  br i1 %1000, label %1019, label %1001

1001:                                             ; preds = %996, %1415
  %1002 = phi i16* [ %1417, %1415 ], [ %998, %996 ]
  %1003 = phi i64 [ %1416, %1415 ], [ %999, %996 ]
  %1004 = load i16, i16* %1002, align 2
  %1005 = zext i16 %1004 to i32
  %1006 = add nsw i32 %1005, -48
  %1007 = icmp ugt i32 %1006, 9
  br i1 %1007, label %1012, label %1008

1008:                                             ; preds = %1001
  %1009 = inttoptr i64 %1003 to i16*
  store i16 %1004, i16* %1009, align 2
  %1010 = getelementptr inbounds i16, i16* %1009, i64 1
  %1011 = ptrtoint i16* %1010 to i64
  br label %1012

1012:                                             ; preds = %1008, %1001
  %1013 = phi i64 [ %1003, %1001 ], [ %1011, %1008 ]
  %1014 = getelementptr inbounds i16, i16* %1002, i64 1
  %1015 = load i16, i16* %1014, align 2
  %1016 = zext i16 %1015 to i32
  %1017 = add nsw i32 %1016, -48
  %1018 = icmp ugt i32 %1017, 9
  br i1 %1018, label %1393, label %1389

1019:                                             ; preds = %1415, %996
  %1020 = phi i64 [ %997, %996 ], [ %1416, %1415 ]
  %1021 = load i8, i8* %941, align 1
  %1022 = load i16*, i16** %937, align 8
  %1023 = load i64, i64* %938, align 8
  %1024 = zext i8 %1021 to i64
  br label %1025

1025:                                             ; preds = %1019, %961, %963, %967
  %1026 = phi i64 [ %1024, %1019 ], [ %947, %961 ], [ %947, %963 ], [ %947, %967 ]
  %1027 = phi i64 [ %1023, %1019 ], [ %945, %961 ], [ %945, %963 ], [ %945, %967 ]
  %1028 = phi i16* [ %1022, %1019 ], [ %944, %961 ], [ %944, %963 ], [ %944, %967 ]
  %1029 = phi i8 [ %1021, %1019 ], [ %942, %961 ], [ %942, %963 ], [ %942, %967 ]
  %1030 = phi i64 [ %1020, %1019 ], [ %962, %961 ], [ %965, %963 ], [ %965, %967 ]
  %1031 = icmp slt i8 %1029, 0
  %1032 = getelementptr inbounds i16, i16* %1028, i64 %1027
  %1033 = ptrtoint i16* %1028 to i64
  %1034 = getelementptr inbounds i16, i16* %946, i64 %1026
  %1035 = ptrtoint %"class.std::__1::basic_string"* %0 to i64
  %1036 = select i1 %1031, i16* %1032, i16* %1034
  %1037 = select i1 %1031, i64 %1033, i64 %1035
  %1038 = select i1 %1031, i64 %1027, i64 %1026
  %1039 = ptrtoint i16* %1036 to i64
  %1040 = sub i64 %1030, %1037
  %1041 = sub i64 %1039, %1030
  %1042 = ashr exact i64 %1040, 1
  %1043 = ashr exact i64 %1041, 1
  %1044 = icmp ult i64 %1038, %1042
  br i1 %1044, label %1045, label %1047

1045:                                             ; preds = %1025
  %1046 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* %1046) #13
  unreachable

1047:                                             ; preds = %1025
  switch i64 %1043, label %1054 [
    i64 -1, label %1048
    i64 0, label %1388
  ]

1048:                                             ; preds = %1047
  br i1 %1031, label %1049, label %1051

1049:                                             ; preds = %1048
  %1050 = getelementptr inbounds i16, i16* %1028, i64 %1042
  store i16 0, i16* %1050, align 2
  store i64 %1042, i64* %938, align 8
  br label %1388

1051:                                             ; preds = %1048
  %1052 = getelementptr inbounds i16, i16* %946, i64 %1042
  store i16 0, i16* %1052, align 2
  %1053 = trunc i64 %1042 to i8
  store i8 %1053, i8* %941, align 1
  br label %1388

1054:                                             ; preds = %1047
  %1055 = select i1 %1031, i16* %1028, i16* %946
  %1056 = sub i64 %1038, %1042
  %1057 = icmp ult i64 %1056, %1043
  %1058 = select i1 %1057, i64 %1056, i64 %1043
  %1059 = sub i64 %1056, %1058
  %1060 = icmp eq i64 %1059, 0
  br i1 %1060, label %1375, label %1061

1061:                                             ; preds = %1054
  %1062 = getelementptr inbounds i16, i16* %1055, i64 %1042
  %1063 = getelementptr inbounds i16, i16* %1062, i64 %1058
  %1064 = icmp sgt i64 %1058, 0
  br i1 %1064, label %1065, label %1209

1065:                                             ; preds = %1061
  %1066 = icmp ult i64 %1059, 16
  br i1 %1066, label %1156, label %1067

1067:                                             ; preds = %1065
  %1068 = sub i64 %1038, %1058
  %1069 = getelementptr i16, i16* %1055, i64 %1068
  %1070 = getelementptr i16, i16* %1055, i64 %1038
  %1071 = icmp ult i16* %1062, %1070
  %1072 = icmp ult i16* %1063, %1069
  %1073 = and i1 %1071, %1072
  br i1 %1073, label %1156, label %1074

1074:                                             ; preds = %1067
  %1075 = and i64 %1059, -16
  %1076 = sub i64 %1059, %1075
  %1077 = getelementptr i16, i16* %1063, i64 %1075
  %1078 = getelementptr i16, i16* %1062, i64 %1075
  %1079 = add i64 %1075, -16
  %1080 = lshr exact i64 %1079, 4
  %1081 = add nuw nsw i64 %1080, 1
  %1082 = and i64 %1081, 3
  %1083 = icmp ult i64 %1079, 48
  br i1 %1083, label %1135, label %1084

1084:                                             ; preds = %1074
  %1085 = sub nsw i64 %1081, %1082
  br label %1086

1086:                                             ; preds = %1086, %1084
  %1087 = phi i64 [ 0, %1084 ], [ %1132, %1086 ]
  %1088 = phi i64 [ %1085, %1084 ], [ %1133, %1086 ]
  %1089 = getelementptr i16, i16* %1063, i64 %1087
  %1090 = getelementptr i16, i16* %1062, i64 %1087
  %1091 = bitcast i16* %1089 to <8 x i16>*
  %1092 = load <8 x i16>, <8 x i16>* %1091, align 2, !alias.scope !116
  %1093 = getelementptr i16, i16* %1089, i64 8
  %1094 = bitcast i16* %1093 to <8 x i16>*
  %1095 = load <8 x i16>, <8 x i16>* %1094, align 2, !alias.scope !116
  %1096 = bitcast i16* %1090 to <8 x i16>*
  store <8 x i16> %1092, <8 x i16>* %1096, align 2, !alias.scope !119, !noalias !116
  %1097 = getelementptr i16, i16* %1090, i64 8
  %1098 = bitcast i16* %1097 to <8 x i16>*
  store <8 x i16> %1095, <8 x i16>* %1098, align 2, !alias.scope !119, !noalias !116
  %1099 = or i64 %1087, 16
  %1100 = getelementptr i16, i16* %1063, i64 %1099
  %1101 = getelementptr i16, i16* %1062, i64 %1099
  %1102 = bitcast i16* %1100 to <8 x i16>*
  %1103 = load <8 x i16>, <8 x i16>* %1102, align 2, !alias.scope !116
  %1104 = getelementptr i16, i16* %1100, i64 8
  %1105 = bitcast i16* %1104 to <8 x i16>*
  %1106 = load <8 x i16>, <8 x i16>* %1105, align 2, !alias.scope !116
  %1107 = bitcast i16* %1101 to <8 x i16>*
  store <8 x i16> %1103, <8 x i16>* %1107, align 2, !alias.scope !119, !noalias !116
  %1108 = getelementptr i16, i16* %1101, i64 8
  %1109 = bitcast i16* %1108 to <8 x i16>*
  store <8 x i16> %1106, <8 x i16>* %1109, align 2, !alias.scope !119, !noalias !116
  %1110 = or i64 %1087, 32
  %1111 = getelementptr i16, i16* %1063, i64 %1110
  %1112 = getelementptr i16, i16* %1062, i64 %1110
  %1113 = bitcast i16* %1111 to <8 x i16>*
  %1114 = load <8 x i16>, <8 x i16>* %1113, align 2, !alias.scope !116
  %1115 = getelementptr i16, i16* %1111, i64 8
  %1116 = bitcast i16* %1115 to <8 x i16>*
  %1117 = load <8 x i16>, <8 x i16>* %1116, align 2, !alias.scope !116
  %1118 = bitcast i16* %1112 to <8 x i16>*
  store <8 x i16> %1114, <8 x i16>* %1118, align 2, !alias.scope !119, !noalias !116
  %1119 = getelementptr i16, i16* %1112, i64 8
  %1120 = bitcast i16* %1119 to <8 x i16>*
  store <8 x i16> %1117, <8 x i16>* %1120, align 2, !alias.scope !119, !noalias !116
  %1121 = or i64 %1087, 48
  %1122 = getelementptr i16, i16* %1063, i64 %1121
  %1123 = getelementptr i16, i16* %1062, i64 %1121
  %1124 = bitcast i16* %1122 to <8 x i16>*
  %1125 = load <8 x i16>, <8 x i16>* %1124, align 2, !alias.scope !116
  %1126 = getelementptr i16, i16* %1122, i64 8
  %1127 = bitcast i16* %1126 to <8 x i16>*
  %1128 = load <8 x i16>, <8 x i16>* %1127, align 2, !alias.scope !116
  %1129 = bitcast i16* %1123 to <8 x i16>*
  store <8 x i16> %1125, <8 x i16>* %1129, align 2, !alias.scope !119, !noalias !116
  %1130 = getelementptr i16, i16* %1123, i64 8
  %1131 = bitcast i16* %1130 to <8 x i16>*
  store <8 x i16> %1128, <8 x i16>* %1131, align 2, !alias.scope !119, !noalias !116
  %1132 = add i64 %1087, 64
  %1133 = add i64 %1088, -4
  %1134 = icmp eq i64 %1133, 0
  br i1 %1134, label %1135, label %1086, !llvm.loop !121

1135:                                             ; preds = %1086, %1074
  %1136 = phi i64 [ 0, %1074 ], [ %1132, %1086 ]
  %1137 = icmp eq i64 %1082, 0
  br i1 %1137, label %1154, label %1138

1138:                                             ; preds = %1135, %1138
  %1139 = phi i64 [ %1151, %1138 ], [ %1136, %1135 ]
  %1140 = phi i64 [ %1152, %1138 ], [ %1082, %1135 ]
  %1141 = getelementptr i16, i16* %1063, i64 %1139
  %1142 = getelementptr i16, i16* %1062, i64 %1139
  %1143 = bitcast i16* %1141 to <8 x i16>*
  %1144 = load <8 x i16>, <8 x i16>* %1143, align 2, !alias.scope !116
  %1145 = getelementptr i16, i16* %1141, i64 8
  %1146 = bitcast i16* %1145 to <8 x i16>*
  %1147 = load <8 x i16>, <8 x i16>* %1146, align 2, !alias.scope !116
  %1148 = bitcast i16* %1142 to <8 x i16>*
  store <8 x i16> %1144, <8 x i16>* %1148, align 2, !alias.scope !119, !noalias !116
  %1149 = getelementptr i16, i16* %1142, i64 8
  %1150 = bitcast i16* %1149 to <8 x i16>*
  store <8 x i16> %1147, <8 x i16>* %1150, align 2, !alias.scope !119, !noalias !116
  %1151 = add i64 %1139, 16
  %1152 = add i64 %1140, -1
  %1153 = icmp eq i64 %1152, 0
  br i1 %1153, label %1154, label %1138, !llvm.loop !122

1154:                                             ; preds = %1138, %1135
  %1155 = icmp eq i64 %1059, %1075
  br i1 %1155, label %1375, label %1156

1156:                                             ; preds = %1154, %1067, %1065
  %1157 = phi i64 [ %1059, %1067 ], [ %1059, %1065 ], [ %1076, %1154 ]
  %1158 = phi i16* [ %1063, %1067 ], [ %1063, %1065 ], [ %1077, %1154 ]
  %1159 = phi i16* [ %1062, %1067 ], [ %1062, %1065 ], [ %1078, %1154 ]
  %1160 = add i64 %1157, -1
  %1161 = and i64 %1157, 7
  %1162 = icmp eq i64 %1161, 0
  br i1 %1162, label %1174, label %1163

1163:                                             ; preds = %1156, %1163
  %1164 = phi i64 [ %1169, %1163 ], [ %1157, %1156 ]
  %1165 = phi i16* [ %1171, %1163 ], [ %1158, %1156 ]
  %1166 = phi i16* [ %1170, %1163 ], [ %1159, %1156 ]
  %1167 = phi i64 [ %1172, %1163 ], [ %1161, %1156 ]
  %1168 = load i16, i16* %1165, align 2
  store i16 %1168, i16* %1166, align 2
  %1169 = add i64 %1164, -1
  %1170 = getelementptr inbounds i16, i16* %1166, i64 1
  %1171 = getelementptr inbounds i16, i16* %1165, i64 1
  %1172 = add i64 %1167, -1
  %1173 = icmp eq i64 %1172, 0
  br i1 %1173, label %1174, label %1163, !llvm.loop !123

1174:                                             ; preds = %1163, %1156
  %1175 = phi i64 [ %1157, %1156 ], [ %1169, %1163 ]
  %1176 = phi i16* [ %1158, %1156 ], [ %1171, %1163 ]
  %1177 = phi i16* [ %1159, %1156 ], [ %1170, %1163 ]
  %1178 = icmp ult i64 %1160, 7
  br i1 %1178, label %1375, label %1179

1179:                                             ; preds = %1174, %1179
  %1180 = phi i64 [ %1205, %1179 ], [ %1175, %1174 ]
  %1181 = phi i16* [ %1207, %1179 ], [ %1176, %1174 ]
  %1182 = phi i16* [ %1206, %1179 ], [ %1177, %1174 ]
  %1183 = load i16, i16* %1181, align 2
  store i16 %1183, i16* %1182, align 2
  %1184 = getelementptr inbounds i16, i16* %1182, i64 1
  %1185 = getelementptr inbounds i16, i16* %1181, i64 1
  %1186 = load i16, i16* %1185, align 2
  store i16 %1186, i16* %1184, align 2
  %1187 = getelementptr inbounds i16, i16* %1182, i64 2
  %1188 = getelementptr inbounds i16, i16* %1181, i64 2
  %1189 = load i16, i16* %1188, align 2
  store i16 %1189, i16* %1187, align 2
  %1190 = getelementptr inbounds i16, i16* %1182, i64 3
  %1191 = getelementptr inbounds i16, i16* %1181, i64 3
  %1192 = load i16, i16* %1191, align 2
  store i16 %1192, i16* %1190, align 2
  %1193 = getelementptr inbounds i16, i16* %1182, i64 4
  %1194 = getelementptr inbounds i16, i16* %1181, i64 4
  %1195 = load i16, i16* %1194, align 2
  store i16 %1195, i16* %1193, align 2
  %1196 = getelementptr inbounds i16, i16* %1182, i64 5
  %1197 = getelementptr inbounds i16, i16* %1181, i64 5
  %1198 = load i16, i16* %1197, align 2
  store i16 %1198, i16* %1196, align 2
  %1199 = getelementptr inbounds i16, i16* %1182, i64 6
  %1200 = getelementptr inbounds i16, i16* %1181, i64 6
  %1201 = load i16, i16* %1200, align 2
  store i16 %1201, i16* %1199, align 2
  %1202 = getelementptr inbounds i16, i16* %1182, i64 7
  %1203 = getelementptr inbounds i16, i16* %1181, i64 7
  %1204 = load i16, i16* %1203, align 2
  store i16 %1204, i16* %1202, align 2
  %1205 = add i64 %1180, -8
  %1206 = getelementptr inbounds i16, i16* %1182, i64 8
  %1207 = getelementptr inbounds i16, i16* %1181, i64 8
  %1208 = icmp eq i64 %1205, 0
  br i1 %1208, label %1375, label %1179, !llvm.loop !124

1209:                                             ; preds = %1061
  %1210 = icmp slt i64 %1058, 0
  br i1 %1210, label %1211, label %1375

1211:                                             ; preds = %1209
  %1212 = getelementptr inbounds i16, i16* %1063, i64 %1059
  %1213 = getelementptr inbounds i16, i16* %1062, i64 %1059
  %1214 = icmp ult i64 %1059, 16
  br i1 %1214, label %1322, label %1215

1215:                                             ; preds = %1211
  %1216 = add i64 %1038, -1
  %1217 = sub i64 %1216, %1042
  %1218 = sub i64 %1217, %1058
  %1219 = sub i64 %1216, %1058
  %1220 = getelementptr i16, i16* %1055, i64 %1219
  %1221 = ptrtoint i16* %1220 to i64
  %1222 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1218, i64 2)
  %1223 = extractvalue { i64, i1 } %1222, 0
  %1224 = extractvalue { i64, i1 } %1222, 1
  %1225 = icmp ugt i64 %1223, %1221
  %1226 = or i1 %1225, %1224
  %1227 = add i64 %1038, -1
  %1228 = getelementptr i16, i16* %1055, i64 %1227
  %1229 = ptrtoint i16* %1228 to i64
  %1230 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1218, i64 2)
  %1231 = extractvalue { i64, i1 } %1230, 0
  %1232 = extractvalue { i64, i1 } %1230, 1
  %1233 = icmp ugt i64 %1231, %1229
  %1234 = or i1 %1233, %1232
  %1235 = or i1 %1226, %1234
  br i1 %1235, label %1322, label %1236

1236:                                             ; preds = %1215
  %1237 = add i64 %1042, %1058
  %1238 = getelementptr i16, i16* %1055, i64 %1237
  %1239 = icmp ult i16* %1062, %1212
  %1240 = icmp ult i16* %1238, %1213
  %1241 = and i1 %1239, %1240
  br i1 %1241, label %1322, label %1242

1242:                                             ; preds = %1236
  %1243 = and i64 %1059, -16
  %1244 = sub i64 %1059, %1243
  %1245 = sub i64 0, %1243
  %1246 = getelementptr i16, i16* %1212, i64 %1245
  %1247 = sub i64 0, %1243
  %1248 = getelementptr i16, i16* %1213, i64 %1247
  %1249 = add i64 %1243, -16
  %1250 = lshr exact i64 %1249, 4
  %1251 = add nuw nsw i64 %1250, 1
  %1252 = and i64 %1251, 1
  %1253 = icmp eq i64 %1249, 0
  br i1 %1253, label %1300, label %1254

1254:                                             ; preds = %1242
  %1255 = sub nuw nsw i64 %1251, %1252
  %1256 = getelementptr i16, i16* %1212, i64 -1
  %1257 = getelementptr i16, i16* %1213, i64 -1
  %1258 = getelementptr i16, i16* %1212, i64 -1
  %1259 = getelementptr i16, i16* %1213, i64 -1
  br label %1260

1260:                                             ; preds = %1260, %1254
  %1261 = phi i64 [ 0, %1254 ], [ %1295, %1260 ]
  %1262 = phi i64 [ %1255, %1254 ], [ %1296, %1260 ]
  %1263 = sub i64 0, %1261
  %1264 = sub i64 0, %1261
  %1265 = getelementptr inbounds i16, i16* %1257, i64 %1264
  %1266 = getelementptr inbounds i16, i16* %1256, i64 %1263
  %1267 = getelementptr inbounds i16, i16* %1266, i64 -7
  %1268 = bitcast i16* %1267 to <8 x i16>*
  %1269 = load <8 x i16>, <8 x i16>* %1268, align 2, !alias.scope !125
  %1270 = getelementptr inbounds i16, i16* %1266, i64 -8
  %1271 = getelementptr inbounds i16, i16* %1270, i64 -7
  %1272 = bitcast i16* %1271 to <8 x i16>*
  %1273 = load <8 x i16>, <8 x i16>* %1272, align 2, !alias.scope !125
  %1274 = getelementptr inbounds i16, i16* %1265, i64 -7
  %1275 = bitcast i16* %1274 to <8 x i16>*
  store <8 x i16> %1269, <8 x i16>* %1275, align 2, !alias.scope !128, !noalias !125
  %1276 = getelementptr inbounds i16, i16* %1265, i64 -8
  %1277 = getelementptr inbounds i16, i16* %1276, i64 -7
  %1278 = bitcast i16* %1277 to <8 x i16>*
  store <8 x i16> %1273, <8 x i16>* %1278, align 2, !alias.scope !128, !noalias !125
  %1279 = sub nuw nsw i64 -16, %1261
  %1280 = sub nuw nsw i64 -16, %1261
  %1281 = getelementptr inbounds i16, i16* %1259, i64 %1280
  %1282 = getelementptr inbounds i16, i16* %1258, i64 %1279
  %1283 = getelementptr inbounds i16, i16* %1282, i64 -7
  %1284 = bitcast i16* %1283 to <8 x i16>*
  %1285 = load <8 x i16>, <8 x i16>* %1284, align 2, !alias.scope !125
  %1286 = getelementptr inbounds i16, i16* %1282, i64 -8
  %1287 = getelementptr inbounds i16, i16* %1286, i64 -7
  %1288 = bitcast i16* %1287 to <8 x i16>*
  %1289 = load <8 x i16>, <8 x i16>* %1288, align 2, !alias.scope !125
  %1290 = getelementptr inbounds i16, i16* %1281, i64 -7
  %1291 = bitcast i16* %1290 to <8 x i16>*
  store <8 x i16> %1285, <8 x i16>* %1291, align 2, !alias.scope !128, !noalias !125
  %1292 = getelementptr inbounds i16, i16* %1281, i64 -8
  %1293 = getelementptr inbounds i16, i16* %1292, i64 -7
  %1294 = bitcast i16* %1293 to <8 x i16>*
  store <8 x i16> %1289, <8 x i16>* %1294, align 2, !alias.scope !128, !noalias !125
  %1295 = add i64 %1261, 32
  %1296 = add i64 %1262, -2
  %1297 = icmp eq i64 %1296, 0
  br i1 %1297, label %1298, label %1260, !llvm.loop !130

1298:                                             ; preds = %1260
  %1299 = sub nuw nsw i64 -32, %1261
  br label %1300

1300:                                             ; preds = %1298, %1242
  %1301 = phi i64 [ 0, %1242 ], [ %1299, %1298 ]
  %1302 = icmp eq i64 %1252, 0
  br i1 %1302, label %1320, label %1303

1303:                                             ; preds = %1300
  %1304 = getelementptr i16, i16* %1212, i64 -1
  %1305 = getelementptr i16, i16* %1213, i64 -1
  %1306 = getelementptr inbounds i16, i16* %1305, i64 %1301
  %1307 = getelementptr inbounds i16, i16* %1304, i64 %1301
  %1308 = getelementptr inbounds i16, i16* %1307, i64 -7
  %1309 = bitcast i16* %1308 to <8 x i16>*
  %1310 = load <8 x i16>, <8 x i16>* %1309, align 2, !alias.scope !125
  %1311 = getelementptr inbounds i16, i16* %1307, i64 -8
  %1312 = getelementptr inbounds i16, i16* %1311, i64 -7
  %1313 = bitcast i16* %1312 to <8 x i16>*
  %1314 = load <8 x i16>, <8 x i16>* %1313, align 2, !alias.scope !125
  %1315 = getelementptr inbounds i16, i16* %1306, i64 -7
  %1316 = bitcast i16* %1315 to <8 x i16>*
  store <8 x i16> %1310, <8 x i16>* %1316, align 2, !alias.scope !128, !noalias !125
  %1317 = getelementptr inbounds i16, i16* %1306, i64 -8
  %1318 = getelementptr inbounds i16, i16* %1317, i64 -7
  %1319 = bitcast i16* %1318 to <8 x i16>*
  store <8 x i16> %1314, <8 x i16>* %1319, align 2, !alias.scope !128, !noalias !125
  br label %1320

1320:                                             ; preds = %1300, %1303
  %1321 = icmp eq i64 %1059, %1243
  br i1 %1321, label %1375, label %1322

1322:                                             ; preds = %1320, %1236, %1215, %1211
  %1323 = phi i64 [ %1059, %1236 ], [ %1059, %1215 ], [ %1059, %1211 ], [ %1244, %1320 ]
  %1324 = phi i16* [ %1212, %1236 ], [ %1212, %1215 ], [ %1212, %1211 ], [ %1246, %1320 ]
  %1325 = phi i16* [ %1213, %1236 ], [ %1213, %1215 ], [ %1213, %1211 ], [ %1248, %1320 ]
  %1326 = add i64 %1323, -1
  %1327 = and i64 %1323, 7
  %1328 = icmp eq i64 %1327, 0
  br i1 %1328, label %1340, label %1329

1329:                                             ; preds = %1322, %1329
  %1330 = phi i64 [ %1337, %1329 ], [ %1323, %1322 ]
  %1331 = phi i16* [ %1335, %1329 ], [ %1324, %1322 ]
  %1332 = phi i16* [ %1334, %1329 ], [ %1325, %1322 ]
  %1333 = phi i64 [ %1338, %1329 ], [ %1327, %1322 ]
  %1334 = getelementptr inbounds i16, i16* %1332, i64 -1
  %1335 = getelementptr inbounds i16, i16* %1331, i64 -1
  %1336 = load i16, i16* %1335, align 2
  store i16 %1336, i16* %1334, align 2
  %1337 = add i64 %1330, -1
  %1338 = add i64 %1333, -1
  %1339 = icmp eq i64 %1338, 0
  br i1 %1339, label %1340, label %1329, !llvm.loop !131

1340:                                             ; preds = %1329, %1322
  %1341 = phi i64 [ %1323, %1322 ], [ %1337, %1329 ]
  %1342 = phi i16* [ %1324, %1322 ], [ %1335, %1329 ]
  %1343 = phi i16* [ %1325, %1322 ], [ %1334, %1329 ]
  %1344 = icmp ult i64 %1326, 7
  br i1 %1344, label %1375, label %1345

1345:                                             ; preds = %1340, %1345
  %1346 = phi i64 [ %1373, %1345 ], [ %1341, %1340 ]
  %1347 = phi i16* [ %1371, %1345 ], [ %1342, %1340 ]
  %1348 = phi i16* [ %1370, %1345 ], [ %1343, %1340 ]
  %1349 = getelementptr inbounds i16, i16* %1348, i64 -1
  %1350 = getelementptr inbounds i16, i16* %1347, i64 -1
  %1351 = load i16, i16* %1350, align 2
  store i16 %1351, i16* %1349, align 2
  %1352 = getelementptr inbounds i16, i16* %1348, i64 -2
  %1353 = getelementptr inbounds i16, i16* %1347, i64 -2
  %1354 = load i16, i16* %1353, align 2
  store i16 %1354, i16* %1352, align 2
  %1355 = getelementptr inbounds i16, i16* %1348, i64 -3
  %1356 = getelementptr inbounds i16, i16* %1347, i64 -3
  %1357 = load i16, i16* %1356, align 2
  store i16 %1357, i16* %1355, align 2
  %1358 = getelementptr inbounds i16, i16* %1348, i64 -4
  %1359 = getelementptr inbounds i16, i16* %1347, i64 -4
  %1360 = load i16, i16* %1359, align 2
  store i16 %1360, i16* %1358, align 2
  %1361 = getelementptr inbounds i16, i16* %1348, i64 -5
  %1362 = getelementptr inbounds i16, i16* %1347, i64 -5
  %1363 = load i16, i16* %1362, align 2
  store i16 %1363, i16* %1361, align 2
  %1364 = getelementptr inbounds i16, i16* %1348, i64 -6
  %1365 = getelementptr inbounds i16, i16* %1347, i64 -6
  %1366 = load i16, i16* %1365, align 2
  store i16 %1366, i16* %1364, align 2
  %1367 = getelementptr inbounds i16, i16* %1348, i64 -7
  %1368 = getelementptr inbounds i16, i16* %1347, i64 -7
  %1369 = load i16, i16* %1368, align 2
  store i16 %1369, i16* %1367, align 2
  %1370 = getelementptr inbounds i16, i16* %1348, i64 -8
  %1371 = getelementptr inbounds i16, i16* %1347, i64 -8
  %1372 = load i16, i16* %1371, align 2
  store i16 %1372, i16* %1370, align 2
  %1373 = add i64 %1346, -8
  %1374 = icmp eq i64 %1373, 0
  br i1 %1374, label %1375, label %1345, !llvm.loop !132

1375:                                             ; preds = %1340, %1345, %1174, %1179, %1320, %1154, %1209, %1054
  %1376 = sub i64 %1038, %1058
  %1377 = load i8, i8* %941, align 1
  %1378 = icmp slt i8 %1377, 0
  br i1 %1378, label %1379, label %1380

1379:                                             ; preds = %1375
  store i64 %1376, i64* %938, align 8
  br label %1382

1380:                                             ; preds = %1375
  %1381 = trunc i64 %1376 to i8
  store i8 %1381, i8* %941, align 1
  br label %1382

1382:                                             ; preds = %1380, %1379
  %1383 = getelementptr inbounds i16, i16* %1055, i64 %1376
  store i16 0, i16* %1383, align 2
  br label %1388

1384:                                             ; preds = %199
  %1385 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %1385, i8 0, i64 24, i1 false) #11
  br label %1388

1386:                                             ; preds = %199
  %1387 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %1387, i8 0, i64 24, i1 false) #11
  br label %1388

1388:                                             ; preds = %901, %906, %717, %722, %533, %538, %349, %354, %162, %167, %881, %697, %513, %329, %142, %1382, %1051, %1049, %1047, %758, %574, %390, %206, %19, %1386, %1384, %197
  ret void

1389:                                             ; preds = %1012
  %1390 = inttoptr i64 %1013 to i16*
  store i16 %1015, i16* %1390, align 2
  %1391 = getelementptr inbounds i16, i16* %1390, i64 1
  %1392 = ptrtoint i16* %1391 to i64
  br label %1393

1393:                                             ; preds = %1389, %1012
  %1394 = phi i64 [ %1013, %1012 ], [ %1392, %1389 ]
  %1395 = getelementptr inbounds i16, i16* %1002, i64 2
  %1396 = load i16, i16* %1395, align 2
  %1397 = zext i16 %1396 to i32
  %1398 = add nsw i32 %1397, -48
  %1399 = icmp ugt i32 %1398, 9
  br i1 %1399, label %1404, label %1400

1400:                                             ; preds = %1393
  %1401 = inttoptr i64 %1394 to i16*
  store i16 %1396, i16* %1401, align 2
  %1402 = getelementptr inbounds i16, i16* %1401, i64 1
  %1403 = ptrtoint i16* %1402 to i64
  br label %1404

1404:                                             ; preds = %1400, %1393
  %1405 = phi i64 [ %1394, %1393 ], [ %1403, %1400 ]
  %1406 = getelementptr inbounds i16, i16* %1002, i64 3
  %1407 = load i16, i16* %1406, align 2
  %1408 = zext i16 %1407 to i32
  %1409 = add nsw i32 %1408, -48
  %1410 = icmp ugt i32 %1409, 9
  br i1 %1410, label %1415, label %1411

1411:                                             ; preds = %1404
  %1412 = inttoptr i64 %1405 to i16*
  store i16 %1407, i16* %1412, align 2
  %1413 = getelementptr inbounds i16, i16* %1412, i64 1
  %1414 = ptrtoint i16* %1413 to i64
  br label %1415

1415:                                             ; preds = %1411, %1404
  %1416 = phi i64 [ %1405, %1404 ], [ %1414, %1411 ]
  %1417 = getelementptr inbounds i16, i16* %1002, i64 4
  %1418 = icmp eq i16* %1417, %950
  br i1 %1418, label %1019, label %1001
}

declare i32 @_ZNK8autofill12AutofillType15GetStorableTypeEv(%"class.autofill::AutofillType"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill11PhoneNumber19UpdateCacheIfNeededERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.autofill::PhoneNumber"*, %"class.std::__1::basic_string.1"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string.1", align 8
  %5 = alloca %"class.autofill::i18n::PhoneObject", align 8
  %6 = bitcast %"class.std::__1::basic_string.1"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #11
  %7 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 2
  %10 = bitcast %"class.std::__1::basic_string.1"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 24, i1 false)
  %11 = load %"class.autofill::AutofillProfile"*, %"class.autofill::AutofillProfile"** %9, align 8
  %12 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #11, !noalias !133
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = bitcast %"class.autofill::AutofillProfile"* %11 to void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)***
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 24, i1 false) #11, !noalias !133
  %15 = load void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)**, void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)*** %14, align 8, !noalias !133
  %16 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)*, void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)** %15, i64 4
  %17 = load void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)*, void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)** %16, align 8, !noalias !133
  call void %17(%"class.std::__1::basic_string"* nonnull sret %3, %"class.autofill::AutofillProfile"* %11, i32 36) #11, !noalias !133
  %18 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %18, i64 0, i32 1, i32 1
  %20 = load i8, i8* %19, align 1, !noalias !133
  %21 = icmp slt i8 %20, 0
  %22 = load i64, i64* %13, align 8, !noalias !133
  %23 = zext i8 %20 to i64
  %24 = select i1 %21, i64 %22, i64 %23
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %2
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i16*, i16** %27, align 8, !noalias !133
  %29 = bitcast %"class.std::__1::basic_string"* %3 to i16*
  %30 = select i1 %21, i16* %28, i16* %29
  call void @_ZN4base12UTF16ToASCIIENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string.1"* nonnull sret %4, i16* %30, i64 %24) #11
  br label %32

31:                                               ; preds = %2
  call void @_ZN8autofill15AutofillCountry20CountryCodeForLocaleERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string.1"* nonnull sret %4, %"class.std::__1::basic_string.1"* dereferenceable(24) %1) #11
  br label %32

32:                                               ; preds = %31, %26
  %33 = load i8, i8* %19, align 1, !noalias !133
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %32
  %36 = bitcast %"class.std::__1::basic_string"* %3 to i8**
  %37 = load i8*, i8** %36, align 8, !noalias !133
  call void @_ZdlPv(i8* %37) #12
  br label %38

38:                                               ; preds = %32, %35
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #11, !noalias !133
  %39 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 1
  %40 = bitcast %"class.std::__1::basic_string"* %39 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %41 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %40, i64 0, i32 1, i32 1
  %42 = load i8, i8* %41, align 1
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  br label %49

47:                                               ; preds = %38
  %48 = zext i8 %42 to i64
  br label %49

49:                                               ; preds = %44, %47
  %50 = phi i64 [ %46, %44 ], [ %48, %47 ]
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %49
  %53 = bitcast %"class.std::__1::basic_string.1"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %105

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 3
  %56 = bitcast %"class.autofill::i18n::PhoneObject"* %55 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %57 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %56, i64 0, i32 1, i32 0
  %58 = load i8, i8* %57, align 1
  %59 = icmp slt i8 %58, 0
  %60 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = zext i8 %58 to i64
  %63 = select i1 %59, i64 %61, i64 %62
  %64 = bitcast %"class.std::__1::basic_string.1"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %65 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %64, i64 0, i32 1, i32 0
  %66 = load i8, i8* %65, align 1
  %67 = icmp slt i8 %66, 0
  %68 = load i64, i64* %8, align 8
  %69 = zext i8 %66 to i64
  %70 = select i1 %67, i64 %68, i64 %69
  %71 = icmp eq i64 %63, %70
  br i1 %71, label %72, label %102

72:                                               ; preds = %54
  %73 = getelementptr inbounds %"class.autofill::i18n::PhoneObject", %"class.autofill::i18n::PhoneObject"* %55, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = bitcast %"class.autofill::i18n::PhoneObject"* %55 to i8*
  %76 = select i1 %59, i8* %74, i8* %75
  %77 = load i8*, i8** %7, align 8
  %78 = select i1 %67, i8* %77, i8* %6
  %79 = icmp eq i64 %63, 0
  br i1 %59, label %86, label %80

80:                                               ; preds = %72
  br i1 %79, label %105, label %81

81:                                               ; preds = %80
  %82 = ptrtoint i8* %74 to i64
  %83 = trunc i64 %82 to i8
  %84 = load i8, i8* %78, align 1
  %85 = icmp eq i8 %84, %83
  br i1 %85, label %87, label %102

86:                                               ; preds = %72
  br i1 %79, label %105, label %99

87:                                               ; preds = %81, %94
  %88 = phi i64 [ %91, %94 ], [ %62, %81 ]
  %89 = phi i8* [ %92, %94 ], [ %75, %81 ]
  %90 = phi i8* [ %95, %94 ], [ %78, %81 ]
  %91 = add i64 %88, -1
  %92 = getelementptr inbounds i8, i8* %89, i64 1
  %93 = icmp eq i64 %91, 0
  br i1 %93, label %105, label %94

94:                                               ; preds = %87
  %95 = getelementptr inbounds i8, i8* %90, i64 1
  %96 = load i8, i8* %92, align 1
  %97 = load i8, i8* %95, align 1
  %98 = icmp eq i8 %96, %97
  br i1 %98, label %87, label %102

99:                                               ; preds = %86
  %100 = call i32 @bcmp(i8* %76, i8* %78, i64 %63) #11
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %105, label %102

102:                                              ; preds = %94, %81, %99, %54
  %103 = bitcast %"class.autofill::i18n::PhoneObject"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %103) #11
  call void @_ZN8autofill4i18n11PhoneObjectC1ERKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEERKNS3_IcNS4_IcEENS6_IcEEEE(%"class.autofill::i18n::PhoneObject"* nonnull %5, %"class.std::__1::basic_string"* dereferenceable(24) %39, %"class.std::__1::basic_string.1"* nonnull dereferenceable(24) %4) #11
  %104 = call dereferenceable(152) %"class.autofill::i18n::PhoneObject"* @_ZN8autofill4i18n11PhoneObjectaSERKS1_(%"class.autofill::i18n::PhoneObject"* %55, %"class.autofill::i18n::PhoneObject"* nonnull dereferenceable(152) %5) #11
  call void @_ZN8autofill4i18n11PhoneObjectD1Ev(%"class.autofill::i18n::PhoneObject"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %103) #11
  br label %105

105:                                              ; preds = %87, %52, %99, %80, %86, %102
  %106 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %53, %52 ], [ %64, %99 ], [ %64, %80 ], [ %64, %86 ], [ %64, %102 ], [ %64, %87 ]
  %107 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %106, i64 0, i32 1, i32 0
  %108 = load i8, i8* %107, align 1
  %109 = icmp slt i8 %108, 0
  br i1 %109, label %110, label %112

110:                                              ; preds = %105
  %111 = load i8*, i8** %7, align 8
  call void @_ZdlPv(i8* %111) #12
  br label %112

112:                                              ; preds = %105, %110
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #11
  ret void
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK8autofill4i18n11PhoneObject14GetWholeNumberEv(%"class.autofill::i18n::PhoneObject"*) local_unnamed_addr #1

declare void @_ZNK8autofill4i18n11PhoneObject28GetNationallyFormattedNumberEv(%"class.std::__1::basic_string"* sret, %"class.autofill::i18n::PhoneObject"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill11PhoneNumber33SetInfoWithVerificationStatusImplERKNS_12AutofillTypeERKNSt3__112basic_stringIDsNS4_11char_traitsIDsEENS4_9allocatorIDsEEEERKNS5_IcNS6_IcEENS8_IcEEEENS_18structured_address18VerificationStatusE(%"class.autofill::PhoneNumber"*, %"class.autofill::AutofillType"* dereferenceable(12), %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string.1"* dereferenceable(24), i32) unnamed_addr #0 align 2 {
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.std::__1::basic_string.1", align 8
  %9 = tail call i32 @_ZNK8autofill12AutofillType15GetStorableTypeEv(%"class.autofill::AutofillType"* %1) #11
  %10 = bitcast %"class.autofill::PhoneNumber"* %0 to void (%"class.autofill::PhoneNumber"*, i32, %"class.std::__1::basic_string"*, i32)***
  %11 = load void (%"class.autofill::PhoneNumber"*, i32, %"class.std::__1::basic_string"*, i32)**, void (%"class.autofill::PhoneNumber"*, i32, %"class.std::__1::basic_string"*, i32)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.autofill::PhoneNumber"*, i32, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::PhoneNumber"*, i32, %"class.std::__1::basic_string"*, i32)** %11, i64 5
  %13 = load void (%"class.autofill::PhoneNumber"*, i32, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::PhoneNumber"*, i32, %"class.std::__1::basic_string"*, i32)** %12, align 8
  tail call void %13(%"class.autofill::PhoneNumber"* %0, i32 %9, %"class.std::__1::basic_string"* dereferenceable(24) %2, i32 %4) #11
  %14 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 1
  %15 = bitcast %"class.std::__1::basic_string"* %14 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %15, i64 0, i32 1, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %5
  %20 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  br label %24

22:                                               ; preds = %5
  %23 = zext i8 %17 to i64
  br label %24

24:                                               ; preds = %19, %22
  %25 = phi i64 [ %21, %19 ], [ %23, %22 ]
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %114, label %27

27:                                               ; preds = %24
  tail call void @_ZNK8autofill11PhoneNumber19UpdateCacheIfNeededERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.autofill::PhoneNumber"* %0, %"class.std::__1::basic_string.1"* dereferenceable(24) %3)
  %28 = load i8, i8* %16, align 1
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i16*, i16** %29, align 8
  %31 = bitcast %"class.std::__1::basic_string"* %14 to i16*
  %32 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = zext i8 %28 to i64
  %35 = icmp slt i8 %28, 0
  %36 = select i1 %35, i16* %30, i16* %31
  %37 = select i1 %35, i64 %33, i64 %34
  %38 = tail call zeroext i1 @_ZN4base17ContainsOnlyCharsENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_(i16* %36, i64 %37, i16* getelementptr inbounds ([12 x i16], [12 x i16]* @.str.2, i64 0, i64 0), i64 11) #11
  br i1 %38, label %39, label %43

39:                                               ; preds = %27
  %40 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 3
  %41 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK8autofill4i18n11PhoneObject18GetFormattedNumberEv(%"class.autofill::i18n::PhoneObject"* %40) #11
  %42 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %14, %"class.std::__1::basic_string"* dereferenceable(24) %41)
  br label %103

43:                                               ; preds = %27
  %44 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %44) #11
  %45 = bitcast %"class.std::__1::basic_string.1"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %45) #11
  %46 = getelementptr inbounds %"class.autofill::PhoneNumber", %"class.autofill::PhoneNumber"* %0, i64 0, i32 2
  %47 = load %"class.autofill::AutofillProfile"*, %"class.autofill::AutofillProfile"** %46, align 8
  %48 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %48) #11, !noalias !136
  %49 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %50 = bitcast %"class.autofill::AutofillProfile"* %47 to void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)***
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 -86, i64 24, i1 false) #11, !noalias !136
  %51 = load void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)**, void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)*** %50, align 8, !noalias !136
  %52 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)*, void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)** %51, i64 4
  %53 = load void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)*, void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)** %52, align 8, !noalias !136
  call void %53(%"class.std::__1::basic_string"* nonnull sret %6, %"class.autofill::AutofillProfile"* %47, i32 36) #11, !noalias !136
  %54 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %55 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %54, i64 0, i32 1, i32 1
  %56 = load i8, i8* %55, align 1, !noalias !136
  %57 = icmp slt i8 %56, 0
  %58 = load i64, i64* %49, align 8, !noalias !136
  %59 = zext i8 %56 to i64
  %60 = select i1 %57, i64 %58, i64 %59
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %67, label %62

62:                                               ; preds = %43
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i16*, i16** %63, align 8, !noalias !136
  %65 = bitcast %"class.std::__1::basic_string"* %6 to i16*
  %66 = select i1 %57, i16* %64, i16* %65
  call void @_ZN4base12UTF16ToASCIIENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string.1"* nonnull sret %8, i16* %66, i64 %60) #11
  br label %68

67:                                               ; preds = %43
  call void @_ZN8autofill15AutofillCountry20CountryCodeForLocaleERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string.1"* nonnull sret %8, %"class.std::__1::basic_string.1"* dereferenceable(24) %3) #11
  br label %68

68:                                               ; preds = %67, %62
  %69 = load i8, i8* %55, align 1, !noalias !136
  %70 = icmp slt i8 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %68
  %72 = bitcast %"class.std::__1::basic_string"* %6 to i8**
  %73 = load i8*, i8** %72, align 8, !noalias !136
  call void @_ZdlPv(i8* %73) #12
  br label %74

74:                                               ; preds = %68, %71
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %48) #11, !noalias !136
  call void @_ZN8autofill4i18n20NormalizePhoneNumberERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEERKNS2_IcNS3_IcEENS5_IcEEEE(%"class.std::__1::basic_string"* nonnull sret %7, %"class.std::__1::basic_string"* dereferenceable(24) %14, %"class.std::__1::basic_string.1"* nonnull dereferenceable(24) %8) #11
  %75 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %76 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %75, i64 0, i32 1, i32 1
  %77 = load i8, i8* %76, align 1
  %78 = icmp slt i8 %77, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %74
  %80 = icmp eq i8 %77, 0
  br label %87

81:                                               ; preds = %74
  %82 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = icmp eq i64 %83, 0
  %85 = bitcast %"class.std::__1::basic_string"* %7 to i8**
  %86 = load i8*, i8** %85, align 8
  call void @_ZdlPv(i8* %86) #12
  br label %87

87:                                               ; preds = %79, %81
  %88 = phi i1 [ %80, %79 ], [ %84, %81 ]
  %89 = bitcast %"class.std::__1::basic_string.1"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %90 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %89, i64 0, i32 1, i32 0
  %91 = load i8, i8* %90, align 1
  %92 = icmp slt i8 %91, 0
  br i1 %92, label %93, label %96

93:                                               ; preds = %87
  %94 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %95 = load i8*, i8** %94, align 8
  call void @_ZdlPv(i8* %95) #12
  br label %96

96:                                               ; preds = %87, %93
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %45) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %44) #11
  br i1 %88, label %97, label %103

97:                                               ; preds = %96
  %98 = load i8, i8* %16, align 1
  %99 = icmp slt i8 %98, 0
  br i1 %99, label %100, label %102

100:                                              ; preds = %97
  %101 = load i16*, i16** %29, align 8
  store i16 0, i16* %101, align 2
  store i64 0, i64* %32, align 8
  br label %103

102:                                              ; preds = %97
  store i16 0, i16* %31, align 2
  store i8 0, i8* %16, align 1
  br label %108

103:                                              ; preds = %100, %96, %39
  %104 = load i8, i8* %16, align 1
  %105 = icmp slt i8 %104, 0
  br i1 %105, label %106, label %108

106:                                              ; preds = %103
  %107 = load i64, i64* %32, align 8
  br label %111

108:                                              ; preds = %102, %103
  %109 = phi i8 [ 0, %102 ], [ %104, %103 ]
  %110 = zext i8 %109 to i64
  br label %111

111:                                              ; preds = %106, %108
  %112 = phi i64 [ %107, %106 ], [ %110, %108 ]
  %113 = icmp ne i64 %112, 0
  br label %114

114:                                              ; preds = %24, %111
  %115 = phi i1 [ %113, %111 ], [ true, %24 ]
  ret i1 %115
}

declare zeroext i1 @_ZN4base17ContainsOnlyCharsENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_(i16*, i64, i16*, i64) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK8autofill4i18n11PhoneObject18GetFormattedNumberEv(%"class.autofill::i18n::PhoneObject"*) local_unnamed_addr #1

declare void @_ZN8autofill4i18n11PhoneObjectC1ERKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEERKNS3_IcNS4_IcEENS6_IcEEEE(%"class.autofill::i18n::PhoneObject"*, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string.1"* dereferenceable(24)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill11PhoneNumber18PhoneCombineHelperC2Ev(%"class.autofill::PhoneNumber::PhoneCombineHelper"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 96, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill11PhoneNumber18PhoneCombineHelperD2Ev(%"class.autofill::PhoneNumber::PhoneCombineHelper"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 3
  %3 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %3, i64 0, i32 1, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = bitcast %"class.std::__1::basic_string"* %2 to i8**
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #12
  br label %10

10:                                               ; preds = %1, %7
  %11 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 2
  %12 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %12, i64 0, i32 1, i32 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %10
  %17 = bitcast %"class.std::__1::basic_string"* %11 to i8**
  %18 = load i8*, i8** %17, align 8
  tail call void @_ZdlPv(i8* %18) #12
  br label %19

19:                                               ; preds = %10, %16
  %20 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 1
  %21 = bitcast %"class.std::__1::basic_string"* %20 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %21, i64 0, i32 1, i32 1
  %23 = load i8, i8* %22, align 1
  %24 = icmp slt i8 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %19
  %26 = bitcast %"class.std::__1::basic_string"* %20 to i8**
  %27 = load i8*, i8** %26, align 8
  tail call void @_ZdlPv(i8* %27) #12
  br label %28

28:                                               ; preds = %19, %25
  %29 = bitcast %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %29, i64 0, i32 1, i32 1
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %28
  %34 = bitcast %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0 to i8**
  %35 = load i8*, i8** %34, align 8
  tail call void @_ZdlPv(i8* %35) #12
  br label %36

36:                                               ; preds = %28, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill11PhoneNumber18PhoneCombineHelper7SetInfoERKNS_12AutofillTypeERKNSt3__112basic_stringIDsNS5_11char_traitsIDsEENS5_9allocatorIDsEEEE(%"class.autofill::PhoneNumber::PhoneCombineHelper"*, %"class.autofill::AutofillType"* dereferenceable(12), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = tail call i32 @_ZNK8autofill12AutofillType15GetStorableTypeEv(%"class.autofill::AutofillType"* %1) #11
  switch i32 %4, label %216 [
    i32 12, label %5
    i32 11, label %8
    i32 13, label %11
    i32 14, label %14
    i32 10, label %17
  ]

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 0
  %7 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %6, %"class.std::__1::basic_string"* dereferenceable(24) %2)
  br label %216

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 1
  %10 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %9, %"class.std::__1::basic_string"* dereferenceable(24) %2)
  br label %216

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 2
  %13 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %12, %"class.std::__1::basic_string"* dereferenceable(24) %2)
  br label %216

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 3
  %16 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %15, %"class.std::__1::basic_string"* dereferenceable(24) %2)
  br label %216

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 2
  %19 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %19, i64 0, i32 1, i32 1
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.std::__1::basic_string"* %2 to i16*
  %28 = zext i8 %21 to i64
  %29 = select i1 %22, i16* %24, i16* %27
  %30 = select i1 %22, i64 %26, i64 %28
  %31 = bitcast %"class.std::__1::basic_string"* %18 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %31, i64 0, i32 1, i32 1
  %33 = load i8, i8* %32, align 1
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %35, label %42

35:                                               ; preds = %17
  %36 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = load i64, i64* %36, align 8
  %38 = and i64 %37, 9223372036854775807
  %39 = add nsw i64 %38, -1
  %40 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  br label %44

42:                                               ; preds = %17
  %43 = zext i8 %33 to i64
  br label %44

44:                                               ; preds = %42, %35
  %45 = phi i64 [ %39, %35 ], [ 10, %42 ]
  %46 = phi i64 [ %41, %35 ], [ %43, %42 ]
  %47 = sub i64 %45, %46
  %48 = icmp ult i64 %47, %30
  br i1 %48, label %213, label %49

49:                                               ; preds = %44
  %50 = icmp eq i64 %30, 0
  br i1 %50, label %216, label %51

51:                                               ; preds = %49
  br i1 %34, label %52, label %55

52:                                               ; preds = %51
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i16*, i16** %53, align 8
  br label %57

55:                                               ; preds = %51
  %56 = bitcast %"class.std::__1::basic_string"* %18 to i16*
  br label %57

57:                                               ; preds = %55, %52
  %58 = phi i16* [ %54, %52 ], [ %56, %55 ]
  %59 = getelementptr inbounds i16, i16* %58, i64 %46
  %60 = icmp ult i64 %30, 16
  br i1 %60, label %150, label %61

61:                                               ; preds = %57
  %62 = add i64 %30, %46
  %63 = getelementptr i16, i16* %58, i64 %62
  %64 = getelementptr i16, i16* %29, i64 %30
  %65 = icmp ult i16* %59, %64
  %66 = icmp ult i16* %29, %63
  %67 = and i1 %65, %66
  br i1 %67, label %150, label %68

68:                                               ; preds = %61
  %69 = and i64 %30, -16
  %70 = sub i64 %30, %69
  %71 = getelementptr i16, i16* %29, i64 %69
  %72 = getelementptr i16, i16* %59, i64 %69
  %73 = add i64 %69, -16
  %74 = lshr exact i64 %73, 4
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 3
  %77 = icmp ult i64 %73, 48
  br i1 %77, label %129, label %78

78:                                               ; preds = %68
  %79 = sub nsw i64 %75, %76
  br label %80

80:                                               ; preds = %80, %78
  %81 = phi i64 [ 0, %78 ], [ %126, %80 ]
  %82 = phi i64 [ %79, %78 ], [ %127, %80 ]
  %83 = getelementptr i16, i16* %29, i64 %81
  %84 = getelementptr i16, i16* %59, i64 %81
  %85 = bitcast i16* %83 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !139
  %87 = getelementptr i16, i16* %83, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !139
  %90 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %90, align 2, !alias.scope !142, !noalias !139
  %91 = getelementptr i16, i16* %84, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %92, align 2, !alias.scope !142, !noalias !139
  %93 = or i64 %81, 16
  %94 = getelementptr i16, i16* %29, i64 %93
  %95 = getelementptr i16, i16* %59, i64 %93
  %96 = bitcast i16* %94 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !139
  %98 = getelementptr i16, i16* %94, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !139
  %101 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %101, align 2, !alias.scope !142, !noalias !139
  %102 = getelementptr i16, i16* %95, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %103, align 2, !alias.scope !142, !noalias !139
  %104 = or i64 %81, 32
  %105 = getelementptr i16, i16* %29, i64 %104
  %106 = getelementptr i16, i16* %59, i64 %104
  %107 = bitcast i16* %105 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !139
  %109 = getelementptr i16, i16* %105, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !139
  %112 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 2, !alias.scope !142, !noalias !139
  %113 = getelementptr i16, i16* %106, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %114, align 2, !alias.scope !142, !noalias !139
  %115 = or i64 %81, 48
  %116 = getelementptr i16, i16* %29, i64 %115
  %117 = getelementptr i16, i16* %59, i64 %115
  %118 = bitcast i16* %116 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2, !alias.scope !139
  %120 = getelementptr i16, i16* %116, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 2, !alias.scope !139
  %123 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %123, align 2, !alias.scope !142, !noalias !139
  %124 = getelementptr i16, i16* %117, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %125, align 2, !alias.scope !142, !noalias !139
  %126 = add i64 %81, 64
  %127 = add i64 %82, -4
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %80, !llvm.loop !144

129:                                              ; preds = %80, %68
  %130 = phi i64 [ 0, %68 ], [ %126, %80 ]
  %131 = icmp eq i64 %76, 0
  br i1 %131, label %148, label %132

132:                                              ; preds = %129, %132
  %133 = phi i64 [ %145, %132 ], [ %130, %129 ]
  %134 = phi i64 [ %146, %132 ], [ %76, %129 ]
  %135 = getelementptr i16, i16* %29, i64 %133
  %136 = getelementptr i16, i16* %59, i64 %133
  %137 = bitcast i16* %135 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2, !alias.scope !139
  %139 = getelementptr i16, i16* %135, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2, !alias.scope !139
  %142 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %142, align 2, !alias.scope !142, !noalias !139
  %143 = getelementptr i16, i16* %136, i64 8
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %144, align 2, !alias.scope !142, !noalias !139
  %145 = add i64 %133, 16
  %146 = add i64 %134, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %132, !llvm.loop !145

148:                                              ; preds = %132, %129
  %149 = icmp eq i64 %30, %69
  br i1 %149, label %203, label %150

150:                                              ; preds = %148, %61, %57
  %151 = phi i64 [ %30, %61 ], [ %30, %57 ], [ %70, %148 ]
  %152 = phi i16* [ %29, %61 ], [ %29, %57 ], [ %71, %148 ]
  %153 = phi i16* [ %59, %61 ], [ %59, %57 ], [ %72, %148 ]
  %154 = add i64 %151, -1
  %155 = and i64 %151, 7
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %168, label %157

157:                                              ; preds = %150, %157
  %158 = phi i64 [ %163, %157 ], [ %151, %150 ]
  %159 = phi i16* [ %165, %157 ], [ %152, %150 ]
  %160 = phi i16* [ %164, %157 ], [ %153, %150 ]
  %161 = phi i64 [ %166, %157 ], [ %155, %150 ]
  %162 = load i16, i16* %159, align 2
  store i16 %162, i16* %160, align 2
  %163 = add i64 %158, -1
  %164 = getelementptr inbounds i16, i16* %160, i64 1
  %165 = getelementptr inbounds i16, i16* %159, i64 1
  %166 = add i64 %161, -1
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %157, !llvm.loop !146

168:                                              ; preds = %157, %150
  %169 = phi i64 [ %151, %150 ], [ %163, %157 ]
  %170 = phi i16* [ %152, %150 ], [ %165, %157 ]
  %171 = phi i16* [ %153, %150 ], [ %164, %157 ]
  %172 = icmp ult i64 %154, 7
  br i1 %172, label %203, label %173

173:                                              ; preds = %168, %173
  %174 = phi i64 [ %199, %173 ], [ %169, %168 ]
  %175 = phi i16* [ %201, %173 ], [ %170, %168 ]
  %176 = phi i16* [ %200, %173 ], [ %171, %168 ]
  %177 = load i16, i16* %175, align 2
  store i16 %177, i16* %176, align 2
  %178 = getelementptr inbounds i16, i16* %176, i64 1
  %179 = getelementptr inbounds i16, i16* %175, i64 1
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %176, i64 2
  %182 = getelementptr inbounds i16, i16* %175, i64 2
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds i16, i16* %176, i64 3
  %185 = getelementptr inbounds i16, i16* %175, i64 3
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = getelementptr inbounds i16, i16* %176, i64 4
  %188 = getelementptr inbounds i16, i16* %175, i64 4
  %189 = load i16, i16* %188, align 2
  store i16 %189, i16* %187, align 2
  %190 = getelementptr inbounds i16, i16* %176, i64 5
  %191 = getelementptr inbounds i16, i16* %175, i64 5
  %192 = load i16, i16* %191, align 2
  store i16 %192, i16* %190, align 2
  %193 = getelementptr inbounds i16, i16* %176, i64 6
  %194 = getelementptr inbounds i16, i16* %175, i64 6
  %195 = load i16, i16* %194, align 2
  store i16 %195, i16* %193, align 2
  %196 = getelementptr inbounds i16, i16* %176, i64 7
  %197 = getelementptr inbounds i16, i16* %175, i64 7
  %198 = load i16, i16* %197, align 2
  store i16 %198, i16* %196, align 2
  %199 = add i64 %174, -8
  %200 = getelementptr inbounds i16, i16* %176, i64 8
  %201 = getelementptr inbounds i16, i16* %175, i64 8
  %202 = icmp eq i64 %199, 0
  br i1 %202, label %203, label %173, !llvm.loop !147

203:                                              ; preds = %168, %173, %148
  %204 = add i64 %46, %30
  %205 = load i8, i8* %32, align 1
  %206 = icmp slt i8 %205, 0
  br i1 %206, label %207, label %209

207:                                              ; preds = %203
  %208 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %204, i64* %208, align 8
  br label %211

209:                                              ; preds = %203
  %210 = trunc i64 %204 to i8
  store i8 %210, i8* %32, align 1
  br label %211

211:                                              ; preds = %209, %207
  %212 = getelementptr inbounds i16, i16* %58, i64 %204
  store i16 0, i16* %212, align 2
  br label %216

213:                                              ; preds = %44
  %214 = add i64 %46, %30
  %215 = sub i64 %214, %45
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string"* %18, i64 %45, i64 %215, i64 %46, i64 %46, i64 0, i64 %30, i16* %29) #11
  br label %216

216:                                              ; preds = %213, %211, %49, %3, %14, %11, %8, %5
  %217 = phi i1 [ true, %5 ], [ true, %8 ], [ true, %11 ], [ true, %14 ], [ false, %3 ], [ true, %49 ], [ true, %211 ], [ true, %213 ]
  ret i1 %217
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill11PhoneNumber18PhoneCombineHelper11ParseNumberERKNS_15AutofillProfileERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEPNS6_IDsNS7_IDsEENS9_IDsEEEE(%"class.autofill::PhoneNumber::PhoneCombineHelper"*, %"class.autofill::AutofillProfile"* dereferenceable(2856), %"class.std::__1::basic_string.1"* dereferenceable(24), %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string.1", align 8
  %7 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 2
  %8 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %8, i64 0, i32 1, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  br label %17

15:                                               ; preds = %4
  %16 = zext i8 %10 to i64
  br label %17

17:                                               ; preds = %15, %12
  %18 = phi i64 [ %14, %12 ], [ %16, %15 ]
  %19 = icmp eq i64 %18, 0
  %20 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 3
  %21 = bitcast %"class.std::__1::basic_string"* %20 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %21, i64 0, i32 1, i32 1
  %23 = load i8, i8* %22, align 1
  br i1 %19, label %24, label %34

24:                                               ; preds = %17
  %25 = icmp slt i8 %23, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  br label %31

29:                                               ; preds = %24
  %30 = zext i8 %23 to i64
  br label %31

31:                                               ; preds = %26, %29
  %32 = phi i64 [ %28, %26 ], [ %30, %29 ]
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %87, label %34

34:                                               ; preds = %17, %31
  %35 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 3
  %36 = icmp slt i8 %23, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %34
  %38 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  br label %42

40:                                               ; preds = %34
  %41 = zext i8 %23 to i64
  br label %42

42:                                               ; preds = %37, %40
  %43 = phi i64 [ %39, %37 ], [ %41, %40 ]
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %47, label %45

45:                                               ; preds = %42
  %46 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %3, %"class.std::__1::basic_string"* dereferenceable(24) %35)
  br label %87

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 0
  %49 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 1
  %50 = bitcast %"class.std::__1::basic_string.1"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %50) #11
  %51 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51) #11, !noalias !148
  %52 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %53 = bitcast %"class.autofill::AutofillProfile"* %1 to void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)***
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 24, i1 false) #11, !noalias !148
  %54 = load void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)**, void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)*** %53, align 8, !noalias !148
  %55 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)*, void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)** %54, i64 4
  %56 = load void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)*, void (%"class.std::__1::basic_string"*, %"class.autofill::AutofillProfile"*, i32)** %55, align 8, !noalias !148
  call void %56(%"class.std::__1::basic_string"* nonnull sret %5, %"class.autofill::AutofillProfile"* %1, i32 36) #11, !noalias !148
  %57 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %58 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %57, i64 0, i32 1, i32 1
  %59 = load i8, i8* %58, align 1, !noalias !148
  %60 = icmp slt i8 %59, 0
  %61 = load i64, i64* %52, align 8, !noalias !148
  %62 = zext i8 %59 to i64
  %63 = select i1 %60, i64 %61, i64 %62
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %70, label %65

65:                                               ; preds = %47
  %66 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = load i16*, i16** %66, align 8, !noalias !148
  %68 = bitcast %"class.std::__1::basic_string"* %5 to i16*
  %69 = select i1 %60, i16* %67, i16* %68
  call void @_ZN4base12UTF16ToASCIIENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string.1"* nonnull sret %6, i16* %69, i64 %63) #11
  br label %71

70:                                               ; preds = %47
  call void @_ZN8autofill15AutofillCountry20CountryCodeForLocaleERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string.1"* nonnull sret %6, %"class.std::__1::basic_string.1"* dereferenceable(24) %2) #11
  br label %71

71:                                               ; preds = %70, %65
  %72 = load i8, i8* %58, align 1, !noalias !148
  %73 = icmp slt i8 %72, 0
  br i1 %73, label %74, label %77

74:                                               ; preds = %71
  %75 = bitcast %"class.std::__1::basic_string"* %5 to i8**
  %76 = load i8*, i8** %75, align 8, !noalias !148
  call void @_ZdlPv(i8* %76) #12
  br label %77

77:                                               ; preds = %71, %74
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51) #11, !noalias !148
  %78 = call zeroext i1 @_ZN8autofill4i18n20ConstructPhoneNumberERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEES9_S9_RKNS2_IcNS3_IcEENS5_IcEEEEPS7_(%"class.std::__1::basic_string"* dereferenceable(24) %48, %"class.std::__1::basic_string"* dereferenceable(24) %49, %"class.std::__1::basic_string"* dereferenceable(24) %7, %"class.std::__1::basic_string.1"* nonnull dereferenceable(24) %6, %"class.std::__1::basic_string"* %3) #11
  %79 = bitcast %"class.std::__1::basic_string.1"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %80 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %79, i64 0, i32 1, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp slt i8 %81, 0
  br i1 %82, label %83, label %86

83:                                               ; preds = %77
  %84 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  call void @_ZdlPv(i8* %85) #12
  br label %86

86:                                               ; preds = %77, %83
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %50) #11
  br label %87

87:                                               ; preds = %31, %86, %45
  %88 = phi i1 [ %78, %86 ], [ true, %45 ], [ false, %31 ]
  ret i1 %88
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8autofill11PhoneNumber18PhoneCombineHelper7IsEmptyEv(%"class.autofill::PhoneNumber::PhoneCombineHelper"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 2
  %3 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %3, i64 0, i32 1, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  br label %12

10:                                               ; preds = %1
  %11 = zext i8 %5 to i64
  br label %12

12:                                               ; preds = %7, %10
  %13 = phi i64 [ %9, %7 ], [ %11, %10 ]
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %29

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 3
  %17 = bitcast %"class.std::__1::basic_string"* %16 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %17, i64 0, i32 1, i32 1
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.autofill::PhoneNumber::PhoneCombineHelper", %"class.autofill::PhoneNumber::PhoneCombineHelper"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  br label %26

24:                                               ; preds = %15
  %25 = zext i8 %19 to i64
  br label %26

26:                                               ; preds = %21, %24
  %27 = phi i64 [ %23, %21 ], [ %25, %24 ]
  %28 = icmp eq i64 %27, 0
  br label %29

29:                                               ; preds = %26, %12
  %30 = phi i1 [ false, %12 ], [ %28, %26 ]
  ret i1 %30
}

declare zeroext i1 @_ZN8autofill4i18n20ConstructPhoneNumberERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEES9_S9_RKNS2_IcNS3_IcEENS5_IcEEEEPS7_(%"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string.1"* dereferenceable(24), %"class.std::__1::basic_string"*) local_unnamed_addr #1

declare void @_ZNK8autofill9FormGroup16GetNonEmptyTypesERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS_8DenseSetINS_15ServerFieldTypeELSB_118EEE(%"class.autofill::FormGroup"*, %"class.std::__1::basic_string.1"* dereferenceable(24), %"class.autofill::DenseSet"*) unnamed_addr #1

declare i32 @_ZNK8autofill9FormGroup21GetVerificationStatusENS_15ServerFieldTypeE(%"class.autofill::FormGroup"*, i32) unnamed_addr #1

declare i32 @_ZNK8autofill9FormGroup25GetVerificationStatusImplENS_15ServerFieldTypeE(%"class.autofill::FormGroup"*, i32) unnamed_addr #1

declare void @_ZN4base12UTF16ToASCIIENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string.1"* sret, i16*, i64) local_unnamed_addr #1

declare void @_ZN8autofill15AutofillCountry20CountryCodeForLocaleERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string.1"* sret, %"class.std::__1::basic_string.1"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string"*, i64, i64, i64, i64, i64, i64, i16*) local_unnamed_addr #0 comdat align 2 {
  %9 = sub i64 9223372036854775790, %1
  %10 = icmp ult i64 %9, %2
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %12) #13
  unreachable

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  br label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  br label %23

23:                                               ; preds = %18, %21
  %24 = phi i16* [ %20, %18 ], [ %22, %21 ]
  %25 = bitcast i16* %24 to i8*
  %26 = icmp ult i64 %1, 4611686018427387879
  br i1 %26, label %27, label %38

27:                                               ; preds = %23
  %28 = add i64 %2, %1
  %29 = shl i64 %1, 1
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = icmp ult i64 %31, 11
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = add i64 %31, 8
  %35 = and i64 %34, -8
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void @abort() #13
  unreachable

38:                                               ; preds = %23, %27, %33
  %39 = phi i64 [ %35, %33 ], [ 9223372036854775791, %23 ], [ 11, %27 ]
  %40 = shl i64 %39, 1
  %41 = tail call i8* @_Znwm(i64 %40) #12
  %42 = bitcast i8* %41 to i16*
  %43 = icmp eq i64 %4, 0
  br i1 %43, label %189, label %44

44:                                               ; preds = %38
  %45 = icmp ult i64 %4, 16
  br i1 %45, label %136, label %46

46:                                               ; preds = %44
  %47 = shl i64 %4, 1
  %48 = getelementptr i8, i8* %41, i64 %47
  %49 = getelementptr i16, i16* %24, i64 %4
  %50 = bitcast i16* %49 to i8*
  %51 = icmp ult i8* %41, %50
  %52 = icmp ugt i8* %48, %25
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %46
  %55 = and i64 %4, -16
  %56 = sub i64 %4, %55
  %57 = getelementptr i16, i16* %24, i64 %55
  %58 = getelementptr i16, i16* %42, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %24, i64 %67
  %70 = getelementptr i16, i16* %42, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !151
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !151
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !154, !noalias !151
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !154, !noalias !151
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %24, i64 %79
  %81 = getelementptr i16, i16* %42, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !151
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !151
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !154, !noalias !151
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !154, !noalias !151
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %24, i64 %90
  %92 = getelementptr i16, i16* %42, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !151
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !151
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !154, !noalias !151
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !154, !noalias !151
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %24, i64 %101
  %103 = getelementptr i16, i16* %42, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !151
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !151
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !154, !noalias !151
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !154, !noalias !151
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !156

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %24, i64 %119
  %122 = getelementptr i16, i16* %42, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !151
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !151
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !154, !noalias !151
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !154, !noalias !151
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !157

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %55, %4
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %46, %44
  %137 = phi i64 [ %4, %46 ], [ %4, %44 ], [ %56, %134 ]
  %138 = phi i16* [ %24, %46 ], [ %24, %44 ], [ %57, %134 ]
  %139 = phi i16* [ %42, %46 ], [ %42, %44 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !158

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !159

189:                                              ; preds = %154, %159, %134, %38
  %190 = icmp eq i64 %6, 0
  br i1 %190, label %289, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds i16, i16* %42, i64 %4
  %193 = icmp ult i64 %6, 16
  br i1 %193, label %276, label %194

194:                                              ; preds = %191
  %195 = and i64 %6, -16
  %196 = sub i64 %6, %195
  %197 = getelementptr i16, i16* %7, i64 %195
  %198 = getelementptr i16, i16* %192, i64 %195
  %199 = add i64 %195, -16
  %200 = lshr exact i64 %199, 4
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 48
  br i1 %203, label %255, label %204

204:                                              ; preds = %194
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %252, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %253, %206 ]
  %209 = getelementptr i16, i16* %7, i64 %207
  %210 = getelementptr i16, i16* %192, i64 %207
  %211 = bitcast i16* %209 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = getelementptr i16, i16* %209, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %216, align 2
  %217 = getelementptr i16, i16* %210, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %218, align 2
  %219 = or i64 %207, 16
  %220 = getelementptr i16, i16* %7, i64 %219
  %221 = getelementptr i16, i16* %192, i64 %219
  %222 = bitcast i16* %220 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = getelementptr i16, i16* %220, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2
  %227 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %227, align 2
  %228 = getelementptr i16, i16* %221, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2
  %230 = or i64 %207, 32
  %231 = getelementptr i16, i16* %7, i64 %230
  %232 = getelementptr i16, i16* %192, i64 %230
  %233 = bitcast i16* %231 to <8 x i16>*
  %234 = load <8 x i16>, <8 x i16>* %233, align 2
  %235 = getelementptr i16, i16* %231, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %238, align 2
  %239 = getelementptr i16, i16* %232, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %240, align 2
  %241 = or i64 %207, 48
  %242 = getelementptr i16, i16* %7, i64 %241
  %243 = getelementptr i16, i16* %192, i64 %241
  %244 = bitcast i16* %242 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2
  %246 = getelementptr i16, i16* %242, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2
  %249 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %249, align 2
  %250 = getelementptr i16, i16* %243, i64 8
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %251, align 2
  %252 = add i64 %207, 64
  %253 = add i64 %208, -4
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %206, !llvm.loop !160

255:                                              ; preds = %206, %194
  %256 = phi i64 [ 0, %194 ], [ %252, %206 ]
  %257 = icmp eq i64 %202, 0
  br i1 %257, label %274, label %258

258:                                              ; preds = %255, %258
  %259 = phi i64 [ %271, %258 ], [ %256, %255 ]
  %260 = phi i64 [ %272, %258 ], [ %202, %255 ]
  %261 = getelementptr i16, i16* %7, i64 %259
  %262 = getelementptr i16, i16* %192, i64 %259
  %263 = bitcast i16* %261 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2
  %265 = getelementptr i16, i16* %261, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %268, align 2
  %269 = getelementptr i16, i16* %262, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %270, align 2
  %271 = add i64 %259, 16
  %272 = add i64 %260, -1
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %258, !llvm.loop !161

274:                                              ; preds = %258, %255
  %275 = icmp eq i64 %195, %6
  br i1 %275, label %289, label %276

276:                                              ; preds = %274, %191
  %277 = phi i64 [ %6, %191 ], [ %196, %274 ]
  %278 = phi i16* [ %7, %191 ], [ %197, %274 ]
  %279 = phi i16* [ %192, %191 ], [ %198, %274 ]
  br label %280

280:                                              ; preds = %276, %280
  %281 = phi i64 [ %285, %280 ], [ %277, %276 ]
  %282 = phi i16* [ %287, %280 ], [ %278, %276 ]
  %283 = phi i16* [ %286, %280 ], [ %279, %276 ]
  %284 = load i16, i16* %282, align 2
  store i16 %284, i16* %283, align 2
  %285 = add i64 %281, -1
  %286 = getelementptr inbounds i16, i16* %283, i64 1
  %287 = getelementptr inbounds i16, i16* %282, i64 1
  %288 = icmp eq i64 %285, 0
  br i1 %288, label %289, label %280, !llvm.loop !162

289:                                              ; preds = %280, %274, %189
  %290 = sub i64 %3, %5
  %291 = sub i64 %290, %4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %448, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i16, i16* %42, i64 %4
  %295 = getelementptr inbounds i16, i16* %294, i64 %6
  %296 = getelementptr inbounds i16, i16* %24, i64 %4
  %297 = getelementptr inbounds i16, i16* %296, i64 %5
  %298 = icmp ult i64 %291, 16
  br i1 %298, label %395, label %299

299:                                              ; preds = %293
  %300 = bitcast i16* %297 to i8*
  %301 = add i64 %6, %4
  %302 = shl i64 %301, 1
  %303 = getelementptr i8, i8* %41, i64 %302
  %304 = add i64 %6, %3
  %305 = sub i64 %304, %5
  %306 = shl i64 %305, 1
  %307 = getelementptr i8, i8* %41, i64 %306
  %308 = getelementptr i16, i16* %24, i64 %3
  %309 = bitcast i16* %308 to i8*
  %310 = icmp ult i8* %303, %309
  %311 = icmp ugt i8* %307, %300
  %312 = and i1 %310, %311
  br i1 %312, label %395, label %313

313:                                              ; preds = %299
  %314 = and i64 %291, -16
  %315 = sub i64 %291, %314
  %316 = getelementptr i16, i16* %297, i64 %314
  %317 = getelementptr i16, i16* %295, i64 %314
  %318 = add i64 %314, -16
  %319 = lshr exact i64 %318, 4
  %320 = add nuw nsw i64 %319, 1
  %321 = and i64 %320, 3
  %322 = icmp ult i64 %318, 48
  br i1 %322, label %374, label %323

323:                                              ; preds = %313
  %324 = sub nsw i64 %320, %321
  br label %325

325:                                              ; preds = %325, %323
  %326 = phi i64 [ 0, %323 ], [ %371, %325 ]
  %327 = phi i64 [ %324, %323 ], [ %372, %325 ]
  %328 = getelementptr i16, i16* %297, i64 %326
  %329 = getelementptr i16, i16* %295, i64 %326
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !164
  %332 = getelementptr i16, i16* %328, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !164
  %335 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !167, !noalias !164
  %336 = getelementptr i16, i16* %329, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !167, !noalias !164
  %338 = or i64 %326, 16
  %339 = getelementptr i16, i16* %297, i64 %338
  %340 = getelementptr i16, i16* %295, i64 %338
  %341 = bitcast i16* %339 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !164
  %343 = getelementptr i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !164
  %346 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !167, !noalias !164
  %347 = getelementptr i16, i16* %340, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !167, !noalias !164
  %349 = or i64 %326, 32
  %350 = getelementptr i16, i16* %297, i64 %349
  %351 = getelementptr i16, i16* %295, i64 %349
  %352 = bitcast i16* %350 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !164
  %354 = getelementptr i16, i16* %350, i64 8
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2, !alias.scope !164
  %357 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %357, align 2, !alias.scope !167, !noalias !164
  %358 = getelementptr i16, i16* %351, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !167, !noalias !164
  %360 = or i64 %326, 48
  %361 = getelementptr i16, i16* %297, i64 %360
  %362 = getelementptr i16, i16* %295, i64 %360
  %363 = bitcast i16* %361 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2, !alias.scope !164
  %365 = getelementptr i16, i16* %361, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !164
  %368 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %368, align 2, !alias.scope !167, !noalias !164
  %369 = getelementptr i16, i16* %362, i64 8
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %370, align 2, !alias.scope !167, !noalias !164
  %371 = add i64 %326, 64
  %372 = add i64 %327, -4
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %325, !llvm.loop !169

374:                                              ; preds = %325, %313
  %375 = phi i64 [ 0, %313 ], [ %371, %325 ]
  %376 = icmp eq i64 %321, 0
  br i1 %376, label %393, label %377

377:                                              ; preds = %374, %377
  %378 = phi i64 [ %390, %377 ], [ %375, %374 ]
  %379 = phi i64 [ %391, %377 ], [ %321, %374 ]
  %380 = getelementptr i16, i16* %297, i64 %378
  %381 = getelementptr i16, i16* %295, i64 %378
  %382 = bitcast i16* %380 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !164
  %384 = getelementptr i16, i16* %380, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !164
  %387 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %387, align 2, !alias.scope !167, !noalias !164
  %388 = getelementptr i16, i16* %381, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %389, align 2, !alias.scope !167, !noalias !164
  %390 = add i64 %378, 16
  %391 = add i64 %379, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %377, !llvm.loop !170

393:                                              ; preds = %377, %374
  %394 = icmp eq i64 %291, %314
  br i1 %394, label %448, label %395

395:                                              ; preds = %393, %299, %293
  %396 = phi i64 [ %291, %299 ], [ %291, %293 ], [ %315, %393 ]
  %397 = phi i16* [ %297, %299 ], [ %297, %293 ], [ %316, %393 ]
  %398 = phi i16* [ %295, %299 ], [ %295, %293 ], [ %317, %393 ]
  %399 = add i64 %396, -1
  %400 = and i64 %396, 7
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %413, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %408, %402 ], [ %396, %395 ]
  %404 = phi i16* [ %410, %402 ], [ %397, %395 ]
  %405 = phi i16* [ %409, %402 ], [ %398, %395 ]
  %406 = phi i64 [ %411, %402 ], [ %400, %395 ]
  %407 = load i16, i16* %404, align 2
  store i16 %407, i16* %405, align 2
  %408 = add i64 %403, -1
  %409 = getelementptr inbounds i16, i16* %405, i64 1
  %410 = getelementptr inbounds i16, i16* %404, i64 1
  %411 = add i64 %406, -1
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %402, !llvm.loop !171

413:                                              ; preds = %402, %395
  %414 = phi i64 [ %396, %395 ], [ %408, %402 ]
  %415 = phi i16* [ %397, %395 ], [ %410, %402 ]
  %416 = phi i16* [ %398, %395 ], [ %409, %402 ]
  %417 = icmp ult i64 %399, 7
  br i1 %417, label %448, label %418

418:                                              ; preds = %413, %418
  %419 = phi i64 [ %444, %418 ], [ %414, %413 ]
  %420 = phi i16* [ %446, %418 ], [ %415, %413 ]
  %421 = phi i16* [ %445, %418 ], [ %416, %413 ]
  %422 = load i16, i16* %420, align 2
  store i16 %422, i16* %421, align 2
  %423 = getelementptr inbounds i16, i16* %421, i64 1
  %424 = getelementptr inbounds i16, i16* %420, i64 1
  %425 = load i16, i16* %424, align 2
  store i16 %425, i16* %423, align 2
  %426 = getelementptr inbounds i16, i16* %421, i64 2
  %427 = getelementptr inbounds i16, i16* %420, i64 2
  %428 = load i16, i16* %427, align 2
  store i16 %428, i16* %426, align 2
  %429 = getelementptr inbounds i16, i16* %421, i64 3
  %430 = getelementptr inbounds i16, i16* %420, i64 3
  %431 = load i16, i16* %430, align 2
  store i16 %431, i16* %429, align 2
  %432 = getelementptr inbounds i16, i16* %421, i64 4
  %433 = getelementptr inbounds i16, i16* %420, i64 4
  %434 = load i16, i16* %433, align 2
  store i16 %434, i16* %432, align 2
  %435 = getelementptr inbounds i16, i16* %421, i64 5
  %436 = getelementptr inbounds i16, i16* %420, i64 5
  %437 = load i16, i16* %436, align 2
  store i16 %437, i16* %435, align 2
  %438 = getelementptr inbounds i16, i16* %421, i64 6
  %439 = getelementptr inbounds i16, i16* %420, i64 6
  %440 = load i16, i16* %439, align 2
  store i16 %440, i16* %438, align 2
  %441 = getelementptr inbounds i16, i16* %421, i64 7
  %442 = getelementptr inbounds i16, i16* %420, i64 7
  %443 = load i16, i16* %442, align 2
  store i16 %443, i16* %441, align 2
  %444 = add i64 %419, -8
  %445 = getelementptr inbounds i16, i16* %421, i64 8
  %446 = getelementptr inbounds i16, i16* %420, i64 8
  %447 = icmp eq i64 %444, 0
  br i1 %447, label %448, label %418, !llvm.loop !172

448:                                              ; preds = %413, %418, %393, %289
  %449 = icmp eq i64 %1, 10
  br i1 %449, label %451, label %450

450:                                              ; preds = %448
  tail call void @_ZdlPv(i8* %25) #12
  br label %451

451:                                              ; preds = %448, %450
  %452 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %41, i8** %452, align 8
  %453 = or i64 %39, -9223372036854775808
  %454 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %453, i64* %454, align 8
  %455 = add i64 %290, %6
  %456 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %455, i64* %456, align 8
  %457 = getelementptr inbounds i16, i16* %42, i64 %455
  store i16 0, i16* %457, align 2
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string.1"*, i64, i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEC2ERKS5_mmRKS4_(%"class.std::__1::basic_string"*, %"class.std::__1::basic_string"* dereferenceable(24), i64, i64, %"class.std::__1::allocator"* dereferenceable(1)) unnamed_addr #0 comdat align 2 {
  %6 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = zext i8 %8 to i64
  %13 = select i1 %9, i64 %11, i64 %12
  %14 = icmp ult i64 %13, %2
  br i1 %14, label %15, label %17

15:                                               ; preds = %5
  %16 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* %16) #13
  unreachable

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  %20 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %21 = select i1 %9, i16* %19, i16* %20
  %22 = getelementptr inbounds i16, i16* %21, i64 %2
  %23 = sub i64 %13, %2
  %24 = icmp ult i64 %23, %3
  %25 = select i1 %24, i64 %23, i64 %3
  %26 = icmp ugt i64 %25, 9223372036854775791
  br i1 %26, label %27, label %29

27:                                               ; preds = %17
  %28 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %28) #13
  unreachable

29:                                               ; preds = %17
  %30 = icmp ult i64 %25, 11
  br i1 %30, label %44, label %31

31:                                               ; preds = %29
  %32 = add nuw nsw i64 %25, 8
  %33 = and i64 %32, -8
  %34 = icmp slt i64 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %31
  tail call void @abort() #13
  unreachable

36:                                               ; preds = %31
  %37 = shl i64 %33, 1
  %38 = tail call i8* @_Znwm(i64 %37) #12
  %39 = bitcast i8* %38 to i16*
  %40 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %38, i8** %40, align 8
  %41 = or i64 %33, -9223372036854775808
  %42 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %41, i64* %42, align 8
  %43 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %25, i64* %43, align 8
  br label %50

44:                                               ; preds = %29
  %45 = trunc i64 %25 to i8
  %46 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %46, i64 0, i32 1, i32 1
  store i8 %45, i8* %47, align 1
  %48 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %49 = icmp eq i64 %25, 0
  br i1 %49, label %195, label %50

50:                                               ; preds = %44, %36
  %51 = phi i16* [ %39, %36 ], [ %48, %44 ]
  %52 = icmp ult i64 %25, 16
  br i1 %52, label %142, label %53

53:                                               ; preds = %50
  %54 = getelementptr i16, i16* %51, i64 %25
  %55 = add i64 %25, %2
  %56 = getelementptr i16, i16* %21, i64 %55
  %57 = icmp ult i16* %51, %56
  %58 = icmp ult i16* %22, %54
  %59 = and i1 %57, %58
  br i1 %59, label %142, label %60

60:                                               ; preds = %53
  %61 = and i64 %25, -16
  %62 = sub i64 %25, %61
  %63 = getelementptr i16, i16* %22, i64 %61
  %64 = getelementptr i16, i16* %51, i64 %61
  %65 = add i64 %61, -16
  %66 = lshr exact i64 %65, 4
  %67 = add nuw nsw i64 %66, 1
  %68 = and i64 %67, 3
  %69 = icmp ult i64 %65, 48
  br i1 %69, label %121, label %70

70:                                               ; preds = %60
  %71 = sub nsw i64 %67, %68
  br label %72

72:                                               ; preds = %72, %70
  %73 = phi i64 [ 0, %70 ], [ %118, %72 ]
  %74 = phi i64 [ %71, %70 ], [ %119, %72 ]
  %75 = getelementptr i16, i16* %22, i64 %73
  %76 = getelementptr i16, i16* %51, i64 %73
  %77 = bitcast i16* %75 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !173
  %79 = getelementptr i16, i16* %75, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !173
  %82 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %82, align 2, !alias.scope !176, !noalias !173
  %83 = getelementptr i16, i16* %76, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 2, !alias.scope !176, !noalias !173
  %85 = or i64 %73, 16
  %86 = getelementptr i16, i16* %22, i64 %85
  %87 = getelementptr i16, i16* %51, i64 %85
  %88 = bitcast i16* %86 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !173
  %90 = getelementptr i16, i16* %86, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !173
  %93 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %93, align 2, !alias.scope !176, !noalias !173
  %94 = getelementptr i16, i16* %87, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2, !alias.scope !176, !noalias !173
  %96 = or i64 %73, 32
  %97 = getelementptr i16, i16* %22, i64 %96
  %98 = getelementptr i16, i16* %51, i64 %96
  %99 = bitcast i16* %97 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !173
  %101 = getelementptr i16, i16* %97, i64 8
  %102 = bitcast i16* %101 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2, !alias.scope !173
  %104 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %104, align 2, !alias.scope !176, !noalias !173
  %105 = getelementptr i16, i16* %98, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %106, align 2, !alias.scope !176, !noalias !173
  %107 = or i64 %73, 48
  %108 = getelementptr i16, i16* %22, i64 %107
  %109 = getelementptr i16, i16* %51, i64 %107
  %110 = bitcast i16* %108 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !173
  %112 = getelementptr i16, i16* %108, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2, !alias.scope !173
  %115 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %115, align 2, !alias.scope !176, !noalias !173
  %116 = getelementptr i16, i16* %109, i64 8
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %117, align 2, !alias.scope !176, !noalias !173
  %118 = add i64 %73, 64
  %119 = add i64 %74, -4
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %72, !llvm.loop !178

121:                                              ; preds = %72, %60
  %122 = phi i64 [ 0, %60 ], [ %118, %72 ]
  %123 = icmp eq i64 %68, 0
  br i1 %123, label %140, label %124

124:                                              ; preds = %121, %124
  %125 = phi i64 [ %137, %124 ], [ %122, %121 ]
  %126 = phi i64 [ %138, %124 ], [ %68, %121 ]
  %127 = getelementptr i16, i16* %22, i64 %125
  %128 = getelementptr i16, i16* %51, i64 %125
  %129 = bitcast i16* %127 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2, !alias.scope !173
  %131 = getelementptr i16, i16* %127, i64 8
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 2, !alias.scope !173
  %134 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %134, align 2, !alias.scope !176, !noalias !173
  %135 = getelementptr i16, i16* %128, i64 8
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %133, <8 x i16>* %136, align 2, !alias.scope !176, !noalias !173
  %137 = add i64 %125, 16
  %138 = add i64 %126, -1
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %124, !llvm.loop !179

140:                                              ; preds = %124, %121
  %141 = icmp eq i64 %25, %61
  br i1 %141, label %195, label %142

142:                                              ; preds = %140, %53, %50
  %143 = phi i64 [ %25, %53 ], [ %25, %50 ], [ %62, %140 ]
  %144 = phi i16* [ %22, %53 ], [ %22, %50 ], [ %63, %140 ]
  %145 = phi i16* [ %51, %53 ], [ %51, %50 ], [ %64, %140 ]
  %146 = add i64 %143, -1
  %147 = and i64 %143, 7
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %160, label %149

149:                                              ; preds = %142, %149
  %150 = phi i64 [ %155, %149 ], [ %143, %142 ]
  %151 = phi i16* [ %157, %149 ], [ %144, %142 ]
  %152 = phi i16* [ %156, %149 ], [ %145, %142 ]
  %153 = phi i64 [ %158, %149 ], [ %147, %142 ]
  %154 = load i16, i16* %151, align 2
  store i16 %154, i16* %152, align 2
  %155 = add i64 %150, -1
  %156 = getelementptr inbounds i16, i16* %152, i64 1
  %157 = getelementptr inbounds i16, i16* %151, i64 1
  %158 = add i64 %153, -1
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %149, !llvm.loop !180

160:                                              ; preds = %149, %142
  %161 = phi i64 [ %143, %142 ], [ %155, %149 ]
  %162 = phi i16* [ %144, %142 ], [ %157, %149 ]
  %163 = phi i16* [ %145, %142 ], [ %156, %149 ]
  %164 = icmp ult i64 %146, 7
  br i1 %164, label %195, label %165

165:                                              ; preds = %160, %165
  %166 = phi i64 [ %191, %165 ], [ %161, %160 ]
  %167 = phi i16* [ %193, %165 ], [ %162, %160 ]
  %168 = phi i16* [ %192, %165 ], [ %163, %160 ]
  %169 = load i16, i16* %167, align 2
  store i16 %169, i16* %168, align 2
  %170 = getelementptr inbounds i16, i16* %168, i64 1
  %171 = getelementptr inbounds i16, i16* %167, i64 1
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %168, i64 2
  %174 = getelementptr inbounds i16, i16* %167, i64 2
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %168, i64 3
  %177 = getelementptr inbounds i16, i16* %167, i64 3
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %168, i64 4
  %180 = getelementptr inbounds i16, i16* %167, i64 4
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %168, i64 5
  %183 = getelementptr inbounds i16, i16* %167, i64 5
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = getelementptr inbounds i16, i16* %168, i64 6
  %186 = getelementptr inbounds i16, i16* %167, i64 6
  %187 = load i16, i16* %186, align 2
  store i16 %187, i16* %185, align 2
  %188 = getelementptr inbounds i16, i16* %168, i64 7
  %189 = getelementptr inbounds i16, i16* %167, i64 7
  %190 = load i16, i16* %189, align 2
  store i16 %190, i16* %188, align 2
  %191 = add i64 %166, -8
  %192 = getelementptr inbounds i16, i16* %168, i64 8
  %193 = getelementptr inbounds i16, i16* %167, i64 8
  %194 = icmp eq i64 %191, 0
  br i1 %194, label %195, label %165, !llvm.loop !181

195:                                              ; preds = %160, %165, %140, %44
  %196 = phi i16* [ %48, %44 ], [ %51, %140 ], [ %51, %165 ], [ %51, %160 ]
  %197 = getelementptr inbounds i16, i16* %196, i64 %25
  store i16 0, i16* %197, align 2
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !10}
!21 = distinct !{!21, !8}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !10}
!30 = distinct !{!30, !8}
!31 = !{!32}
!32 = distinct !{!32, !33, !"_ZN8autofill8DenseSetINS_15ServerFieldTypeELS1_118EE6insertES1_: argument 0"}
!33 = distinct !{!33, !"_ZN8autofill8DenseSetINS_15ServerFieldTypeELS1_118EE6insertES1_"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN8autofill8DenseSetINS_15ServerFieldTypeELS1_118EE6insertES1_: argument 0"}
!36 = distinct !{!36, !"_ZN8autofill8DenseSetINS_15ServerFieldTypeELS1_118EE6insertES1_"}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !8}
!43 = distinct !{!43, !10}
!44 = distinct !{!44, !10}
!45 = distinct !{!45, !8}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = distinct !{!51, !8}
!52 = distinct !{!52, !10}
!53 = distinct !{!53, !10}
!54 = distinct !{!54, !8}
!55 = !{!56}
!56 = distinct !{!56, !57, !"_ZN8autofill12_GLOBAL__N_19GetRegionERKNS_15AutofillProfileERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE: argument 0"}
!57 = distinct !{!57, !"_ZN8autofill12_GLOBAL__N_19GetRegionERKNS_15AutofillProfileERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE"}
!58 = !{!59}
!59 = distinct !{!59, !60, !"_ZN8autofill8DenseSetINS_15ServerFieldTypeELS1_118EE6insertES1_: argument 0"}
!60 = distinct !{!60, !"_ZN8autofill8DenseSetINS_15ServerFieldTypeELS1_118EE6insertES1_"}
!61 = !{!62}
!62 = distinct !{!62, !63, !"_ZN8autofill12_GLOBAL__N_19GetRegionERKNS_15AutofillProfileERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE: argument 0"}
!63 = distinct !{!63, !"_ZN8autofill12_GLOBAL__N_19GetRegionERKNS_15AutofillProfileERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"_ZN8autofill8DenseSetINS_15ServerFieldTypeELS1_118EE6insertES1_: argument 0"}
!66 = distinct !{!66, !"_ZN8autofill8DenseSetINS_15ServerFieldTypeELS1_118EE6insertES1_"}
!67 = !{!68}
!68 = distinct !{!68, !69, !"_ZN8autofill8DenseSetINS_15ServerFieldTypeELS1_118EE6insertES1_: argument 0"}
!69 = distinct !{!69, !"_ZN8autofill8DenseSetINS_15ServerFieldTypeELS1_118EE6insertES1_"}
!70 = !{!71}
!71 = distinct !{!71, !72}
!72 = distinct !{!72, !"LVerDomain"}
!73 = !{!74}
!74 = distinct !{!74, !72}
!75 = distinct !{!75, !8}
!76 = distinct !{!76, !10}
!77 = distinct !{!77, !10}
!78 = distinct !{!78, !8}
!79 = !{!80}
!80 = distinct !{!80, !81}
!81 = distinct !{!81, !"LVerDomain"}
!82 = !{!83}
!83 = distinct !{!83, !81}
!84 = distinct !{!84, !8}
!85 = distinct !{!85, !10}
!86 = distinct !{!86, !10}
!87 = distinct !{!87, !8}
!88 = !{!89}
!89 = distinct !{!89, !90}
!90 = distinct !{!90, !"LVerDomain"}
!91 = !{!92}
!92 = distinct !{!92, !90}
!93 = distinct !{!93, !8}
!94 = distinct !{!94, !10}
!95 = distinct !{!95, !10}
!96 = distinct !{!96, !8}
!97 = !{!98}
!98 = distinct !{!98, !99}
!99 = distinct !{!99, !"LVerDomain"}
!100 = !{!101}
!101 = distinct !{!101, !99}
!102 = distinct !{!102, !8}
!103 = distinct !{!103, !10}
!104 = distinct !{!104, !10}
!105 = distinct !{!105, !8}
!106 = !{!107}
!107 = distinct !{!107, !108}
!108 = distinct !{!108, !"LVerDomain"}
!109 = !{!110}
!110 = distinct !{!110, !108}
!111 = distinct !{!111, !8}
!112 = distinct !{!112, !10}
!113 = distinct !{!113, !10}
!114 = distinct !{!114, !8}
!115 = distinct !{!115, !10}
!116 = !{!117}
!117 = distinct !{!117, !118}
!118 = distinct !{!118, !"LVerDomain"}
!119 = !{!120}
!120 = distinct !{!120, !118}
!121 = distinct !{!121, !8}
!122 = distinct !{!122, !10}
!123 = distinct !{!123, !10}
!124 = distinct !{!124, !8}
!125 = !{!126}
!126 = distinct !{!126, !127}
!127 = distinct !{!127, !"LVerDomain"}
!128 = !{!129}
!129 = distinct !{!129, !127}
!130 = distinct !{!130, !8}
!131 = distinct !{!131, !10}
!132 = distinct !{!132, !8}
!133 = !{!134}
!134 = distinct !{!134, !135, !"_ZN8autofill12_GLOBAL__N_19GetRegionERKNS_15AutofillProfileERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE: argument 0"}
!135 = distinct !{!135, !"_ZN8autofill12_GLOBAL__N_19GetRegionERKNS_15AutofillProfileERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE"}
!136 = !{!137}
!137 = distinct !{!137, !138, !"_ZN8autofill12_GLOBAL__N_19GetRegionERKNS_15AutofillProfileERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE: argument 0"}
!138 = distinct !{!138, !"_ZN8autofill12_GLOBAL__N_19GetRegionERKNS_15AutofillProfileERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE"}
!139 = !{!140}
!140 = distinct !{!140, !141}
!141 = distinct !{!141, !"LVerDomain"}
!142 = !{!143}
!143 = distinct !{!143, !141}
!144 = distinct !{!144, !8}
!145 = distinct !{!145, !10}
!146 = distinct !{!146, !10}
!147 = distinct !{!147, !8}
!148 = !{!149}
!149 = distinct !{!149, !150, !"_ZN8autofill12_GLOBAL__N_19GetRegionERKNS_15AutofillProfileERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE: argument 0"}
!150 = distinct !{!150, !"_ZN8autofill12_GLOBAL__N_19GetRegionERKNS_15AutofillProfileERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE"}
!151 = !{!152}
!152 = distinct !{!152, !153}
!153 = distinct !{!153, !"LVerDomain"}
!154 = !{!155}
!155 = distinct !{!155, !153}
!156 = distinct !{!156, !8}
!157 = distinct !{!157, !10}
!158 = distinct !{!158, !10}
!159 = distinct !{!159, !8}
!160 = distinct !{!160, !8}
!161 = distinct !{!161, !10}
!162 = distinct !{!162, !163, !8}
!163 = !{!"llvm.loop.unroll.runtime.disable"}
!164 = !{!165}
!165 = distinct !{!165, !166}
!166 = distinct !{!166, !"LVerDomain"}
!167 = !{!168}
!168 = distinct !{!168, !166}
!169 = distinct !{!169, !8}
!170 = distinct !{!170, !10}
!171 = distinct !{!171, !10}
!172 = distinct !{!172, !8}
!173 = !{!174}
!174 = distinct !{!174, !175}
!175 = distinct !{!175, !"LVerDomain"}
!176 = !{!177}
!177 = distinct !{!177, !175}
!178 = distinct !{!178, !8}
!179 = distinct !{!179, !10}
!180 = distinct !{!180, !10}
!181 = distinct !{!181, !8}
