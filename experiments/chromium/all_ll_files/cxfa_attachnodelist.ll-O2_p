; ModuleID = '../../third_party/pdfium/xfa/fxfa/parser/cxfa_attachnodelist.cpp'
source_filename = "../../third_party/pdfium/xfa/fxfa/parser/cxfa_attachnodelist.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CXFA_AttachNodeList = type { %class.CXFA_TreeList, %"class.cppgc::internal::BasicMember.1" }
%class.CXFA_TreeList = type { %class.CXFA_List }
%class.CXFA_List = type { %class.CXFA_Object }
%class.CXFA_Object = type { i32 (...)**, i32, i16, %"class.fxcrt::StringViewTemplate", i32, %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember.0" }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.cppgc::internal::BasicMember" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::MemberBase" = type { i8* }
%"class.cppgc::internal::BasicMember.0" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.1" = type { %"class.cppgc::internal::MemberBase" }
%class.CXFA_Document = type opaque
%class.CXFA_Node = type { %class.CXFA_Object, %"class.fxjs::GCedTreeNodeMixin", i32, i8, i8, i8, %"class.pdfium::span.2", %"class.pdfium::span.4", i32, %"class.fxcrt::UnownedPtr.6", i8, i8, i8, i32, %"class.cppgc::internal::BasicMember.1", %"class.std::__1::vector", %"class.cppgc::internal::BasicMember.8", %"class.cppgc::internal::BasicMember.9" }
%"class.fxjs::GCedTreeNodeMixin" = type { %"class.cppgc::GarbageCollectedMixin", %"class.fxcrt::TreeNode" }
%"class.cppgc::GarbageCollectedMixin" = type { i32 (...)** }
%"class.fxcrt::TreeNode" = type { i32 (...)**, %"class.cppgc::internal::BasicMember.1", %"class.cppgc::internal::BasicMember.1", %"class.cppgc::internal::BasicMember.1", %"class.cppgc::internal::BasicMember.1", %"class.cppgc::internal::BasicMember.1" }
%"class.pdfium::span.2" = type { %"class.fxcrt::UnownedPtr.3", i64 }
%"class.fxcrt::UnownedPtr.3" = type { %"struct.CXFA_Node::PropertyData"* }
%"struct.CXFA_Node::PropertyData" = type { i16, i8, i8 }
%"class.pdfium::span.4" = type { %"class.fxcrt::UnownedPtr.5", i64 }
%"class.fxcrt::UnownedPtr.5" = type { %"struct.CXFA_Node::AttributeData"* }
%"struct.CXFA_Node::AttributeData" = type { i16, i8, i8* }
%"class.fxcrt::UnownedPtr.6" = type { %class.CFX_XMLNode* }
%class.CFX_XMLNode = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.cppgc::internal::BasicMember.1"*, %"class.cppgc::internal::BasicMember.1"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.cppgc::internal::BasicMember.1"* }
%"class.cppgc::internal::BasicMember.8" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.9" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::Visitor" = type { i32 (...)** }

$_ZN5cppgc8internal14TraceTraitBaseI9CXFA_NodeE5TraceEPNS_7VisitorEPKv = comdat any

@_ZTV19CXFA_AttachNodeList = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CXFA_AttachNodeList*)* @_ZN19CXFA_AttachNodeListD2Ev to i8*), i8* bitcast (void (%class.CXFA_AttachNodeList*)* @_ZN19CXFA_AttachNodeListD0Ev to i8*), i8* bitcast (void (%class.CXFA_AttachNodeList*, %"class.cppgc::Visitor"*)* @_ZNK19CXFA_AttachNodeList5TraceEPN5cppgc7VisitorE to i8*), i8* bitcast (i64 (%class.CXFA_AttachNodeList*)* @_ZN19CXFA_AttachNodeList9GetLengthEv to i8*), i8* bitcast (void (%class.CXFA_AttachNodeList*, %class.CXFA_Node*)* @_ZN19CXFA_AttachNodeList6AppendEP9CXFA_Node to i8*), i8* bitcast (i1 (%class.CXFA_AttachNodeList*, %class.CXFA_Node*, %class.CXFA_Node*)* @_ZN19CXFA_AttachNodeList6InsertEP9CXFA_NodeS1_ to i8*), i8* bitcast (void (%class.CXFA_AttachNodeList*, %class.CXFA_Node*)* @_ZN19CXFA_AttachNodeList6RemoveEP9CXFA_Node to i8*), i8* bitcast (%class.CXFA_Node* (%class.CXFA_AttachNodeList*, i64)* @_ZN19CXFA_AttachNodeList4ItemEm to i8*)] }, align 8

@_ZN19CXFA_AttachNodeListC1EP13CXFA_DocumentP9CXFA_Node = hidden unnamed_addr alias void (%class.CXFA_AttachNodeList*, %class.CXFA_Document*, %class.CXFA_Node*), void (%class.CXFA_AttachNodeList*, %class.CXFA_Document*, %class.CXFA_Node*)* @_ZN19CXFA_AttachNodeListC2EP13CXFA_DocumentP9CXFA_Node
@_ZN19CXFA_AttachNodeListD1Ev = hidden unnamed_addr alias void (%class.CXFA_AttachNodeList*), void (%class.CXFA_AttachNodeList*)* @_ZN19CXFA_AttachNodeListD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CXFA_AttachNodeListC2EP13CXFA_DocumentP9CXFA_Node(%class.CXFA_AttachNodeList*, %class.CXFA_Document*, %class.CXFA_Node*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CXFA_AttachNodeList, %class.CXFA_AttachNodeList* %0, i64 0, i32 0
  tail call void @_ZN13CXFA_TreeListC2EP13CXFA_Document(%class.CXFA_TreeList* %4, %class.CXFA_Document* %1) #3
  %5 = getelementptr inbounds %class.CXFA_AttachNodeList, %class.CXFA_AttachNodeList* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV19CXFA_AttachNodeList, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %class.CXFA_AttachNodeList, %class.CXFA_AttachNodeList* %0, i64 0, i32 1
  %7 = bitcast %"class.cppgc::internal::BasicMember.1"* %6 to %class.CXFA_Node**
  store %class.CXFA_Node* %2, %class.CXFA_Node** %7, align 8
  ret void
}

declare void @_ZN13CXFA_TreeListC2EP13CXFA_Document(%class.CXFA_TreeList*, %class.CXFA_Document*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN13CXFA_TreeListD2Ev(%class.CXFA_TreeList*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CXFA_AttachNodeListD2Ev(%class.CXFA_AttachNodeList*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CXFA_AttachNodeList, %class.CXFA_AttachNodeList* %0, i64 0, i32 0
  tail call void @_ZN13CXFA_TreeListD2Ev(%class.CXFA_TreeList* %2) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CXFA_AttachNodeListD0Ev(%class.CXFA_AttachNodeList*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CXFA_AttachNodeList, %class.CXFA_AttachNodeList* %0, i64 0, i32 0
  tail call void @_ZN13CXFA_TreeListD2Ev(%class.CXFA_TreeList* %2) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK19CXFA_AttachNodeList5TraceEPN5cppgc7VisitorE(%class.CXFA_AttachNodeList*, %"class.cppgc::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CXFA_AttachNodeList, %class.CXFA_AttachNodeList* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK11CXFA_Object5TraceEPN5cppgc7VisitorE(%class.CXFA_Object* %3, %"class.cppgc::Visitor"* %1) #3
  %4 = getelementptr inbounds %class.CXFA_AttachNodeList, %class.CXFA_AttachNodeList* %0, i64 0, i32 1
  %5 = bitcast %"class.cppgc::internal::BasicMember.1"* %4 to i64*
  %6 = load atomic i64, i64* %5 monotonic, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = inttoptr i64 %6 to i8*
  %10 = bitcast %"class.cppgc::Visitor"* %1 to void (%"class.cppgc::Visitor"*, i8*, i8*, void (%"class.cppgc::Visitor"*, i8*)*)***
  %11 = load void (%"class.cppgc::Visitor"*, i8*, i8*, void (%"class.cppgc::Visitor"*, i8*)*)**, void (%"class.cppgc::Visitor"*, i8*, i8*, void (%"class.cppgc::Visitor"*, i8*)*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.cppgc::Visitor"*, i8*, i8*, void (%"class.cppgc::Visitor"*, i8*)*)*, void (%"class.cppgc::Visitor"*, i8*, i8*, void (%"class.cppgc::Visitor"*, i8*)*)** %11, i64 4
  %13 = load void (%"class.cppgc::Visitor"*, i8*, i8*, void (%"class.cppgc::Visitor"*, i8*)*)*, void (%"class.cppgc::Visitor"*, i8*, i8*, void (%"class.cppgc::Visitor"*, i8*)*)** %12, align 8
  tail call void %13(%"class.cppgc::Visitor"* %1, i8* nonnull %9, i8* nonnull %9, void (%"class.cppgc::Visitor"*, i8*)* nonnull @_ZN5cppgc8internal14TraceTraitBaseI9CXFA_NodeE5TraceEPNS_7VisitorEPKv) #3
  br label %14

14:                                               ; preds = %2, %8
  ret void
}

declare void @_ZNK11CXFA_Object5TraceEPN5cppgc7VisitorE(%class.CXFA_Object*, %"class.cppgc::Visitor"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN19CXFA_AttachNodeList9GetLengthEv(%class.CXFA_AttachNodeList* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CXFA_AttachNodeList, %class.CXFA_AttachNodeList* %0, i64 0, i32 1
  %3 = bitcast %"class.cppgc::internal::BasicMember.1"* %2 to %class.CXFA_Node**
  %4 = load %class.CXFA_Node*, %class.CXFA_Node** %3, align 8
  %5 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %4, i64 0, i32 0, i32 2
  %6 = load i16, i16* %5, align 4
  %7 = icmp eq i16 %6, 124
  %8 = tail call i64 @_ZN9CXFA_Node13CountChildrenE11XFA_Elementb(%class.CXFA_Node* %4, i16 signext -1, i1 zeroext %7) #3
  ret i64 %8
}

declare i64 @_ZN9CXFA_Node13CountChildrenE11XFA_Elementb(%class.CXFA_Node*, i16 signext, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CXFA_AttachNodeList6AppendEP9CXFA_Node(%class.CXFA_AttachNodeList* nocapture readonly, %class.CXFA_Node*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %1, i64 0, i32 1, i32 1, i32 1
  %4 = bitcast %"class.cppgc::internal::BasicMember.1"* %3 to %class.CXFA_Node**
  %5 = load %class.CXFA_Node*, %class.CXFA_Node** %4, align 8
  %6 = icmp eq %class.CXFA_Node* %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %2
  tail call void @_ZN9CXFA_Node20RemoveChildAndNotifyEPS_b(%class.CXFA_Node* nonnull %5, %class.CXFA_Node* %1, i1 zeroext true) #3
  br label %8

8:                                                ; preds = %2, %7
  %9 = getelementptr inbounds %class.CXFA_AttachNodeList, %class.CXFA_AttachNodeList* %0, i64 0, i32 1
  %10 = bitcast %"class.cppgc::internal::BasicMember.1"* %9 to %class.CXFA_Node**
  %11 = load %class.CXFA_Node*, %class.CXFA_Node** %10, align 8
  tail call void @_ZN9CXFA_Node20InsertChildAndNotifyEPS_S0_(%class.CXFA_Node* %11, %class.CXFA_Node* %1, %class.CXFA_Node* null) #3
  ret void
}

declare void @_ZN9CXFA_Node20RemoveChildAndNotifyEPS_b(%class.CXFA_Node*, %class.CXFA_Node*, i1 zeroext) local_unnamed_addr #1

declare void @_ZN9CXFA_Node20InsertChildAndNotifyEPS_S0_(%class.CXFA_Node*, %class.CXFA_Node*, %class.CXFA_Node*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN19CXFA_AttachNodeList6InsertEP9CXFA_NodeS1_(%class.CXFA_AttachNodeList* nocapture readonly, %class.CXFA_Node*, %class.CXFA_Node*) unnamed_addr #0 align 2 {
  %4 = icmp eq %class.CXFA_Node* %2, null
  br i1 %4, label %13, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %2, i64 0, i32 1, i32 1, i32 1
  %7 = bitcast %"class.cppgc::internal::BasicMember.1"* %6 to %class.CXFA_Node**
  %8 = load %class.CXFA_Node*, %class.CXFA_Node** %7, align 8
  %9 = getelementptr inbounds %class.CXFA_AttachNodeList, %class.CXFA_AttachNodeList* %0, i64 0, i32 1
  %10 = bitcast %"class.cppgc::internal::BasicMember.1"* %9 to %class.CXFA_Node**
  %11 = load %class.CXFA_Node*, %class.CXFA_Node** %10, align 8
  %12 = icmp eq %class.CXFA_Node* %8, %11
  br i1 %12, label %13, label %23

13:                                               ; preds = %5, %3
  %14 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %1, i64 0, i32 1, i32 1, i32 1
  %15 = bitcast %"class.cppgc::internal::BasicMember.1"* %14 to %class.CXFA_Node**
  %16 = load %class.CXFA_Node*, %class.CXFA_Node** %15, align 8
  %17 = icmp eq %class.CXFA_Node* %16, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %13
  tail call void @_ZN9CXFA_Node20RemoveChildAndNotifyEPS_b(%class.CXFA_Node* nonnull %16, %class.CXFA_Node* %1, i1 zeroext true) #3
  br label %19

19:                                               ; preds = %13, %18
  %20 = getelementptr inbounds %class.CXFA_AttachNodeList, %class.CXFA_AttachNodeList* %0, i64 0, i32 1
  %21 = bitcast %"class.cppgc::internal::BasicMember.1"* %20 to %class.CXFA_Node**
  %22 = load %class.CXFA_Node*, %class.CXFA_Node** %21, align 8
  tail call void @_ZN9CXFA_Node20InsertChildAndNotifyEPS_S0_(%class.CXFA_Node* %22, %class.CXFA_Node* %1, %class.CXFA_Node* %2) #3
  br label %23

23:                                               ; preds = %5, %19
  %24 = phi i1 [ true, %19 ], [ false, %5 ]
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CXFA_AttachNodeList6RemoveEP9CXFA_Node(%class.CXFA_AttachNodeList* nocapture readonly, %class.CXFA_Node*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CXFA_AttachNodeList, %class.CXFA_AttachNodeList* %0, i64 0, i32 1
  %4 = bitcast %"class.cppgc::internal::BasicMember.1"* %3 to %class.CXFA_Node**
  %5 = load %class.CXFA_Node*, %class.CXFA_Node** %4, align 8
  tail call void @_ZN9CXFA_Node20RemoveChildAndNotifyEPS_b(%class.CXFA_Node* %5, %class.CXFA_Node* %1, i1 zeroext true) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.CXFA_Node* @_ZN19CXFA_AttachNodeList4ItemEm(%class.CXFA_AttachNodeList* nocapture readonly, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CXFA_AttachNodeList, %class.CXFA_AttachNodeList* %0, i64 0, i32 1
  %4 = bitcast %"class.cppgc::internal::BasicMember.1"* %3 to %class.CXFA_Node**
  %5 = load %class.CXFA_Node*, %class.CXFA_Node** %4, align 8
  %6 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %5, i64 0, i32 0, i32 2
  %7 = load i16, i16* %6, align 4
  %8 = icmp eq i16 %7, 124
  %9 = tail call %class.CXFA_Node* @_ZNK9CXFA_Node16GetChildInternalEm11XFA_Elementb(%class.CXFA_Node* %5, i64 %1, i16 signext -1, i1 zeroext %8) #3
  ret %class.CXFA_Node* %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5cppgc8internal14TraceTraitBaseI9CXFA_NodeE5TraceEPNS_7VisitorEPKv(%"class.cppgc::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %class.CXFA_Node*
  %4 = bitcast i8* %1 to void (%class.CXFA_Node*, %"class.cppgc::Visitor"*)***
  %5 = load void (%class.CXFA_Node*, %"class.cppgc::Visitor"*)**, void (%class.CXFA_Node*, %"class.cppgc::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.CXFA_Node*, %"class.cppgc::Visitor"*)*, void (%class.CXFA_Node*, %"class.cppgc::Visitor"*)** %5, i64 2
  %7 = load void (%class.CXFA_Node*, %"class.cppgc::Visitor"*)*, void (%class.CXFA_Node*, %"class.cppgc::Visitor"*)** %6, align 8
  tail call void %7(%class.CXFA_Node* %3, %"class.cppgc::Visitor"* %0) #3
  ret void
}

declare %class.CXFA_Node* @_ZNK9CXFA_Node16GetChildInternalEm11XFA_Elementb(%class.CXFA_Node*, i64, i16 signext, i1 zeroext) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
