; ModuleID = '../../v8/src/codegen/code-comments.cc'
source_filename = "../../v8/src/codegen/code-comments.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::CodeCommentsIterator" = type { i64, i32, i64 }
%"struct.v8::internal::CodeCommentEntry" = type { i32, %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.v8::internal::CodeCommentsWriter" = type { i32, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.v8::internal::CodeCommentEntry"*, %"struct.v8::internal::CodeCommentEntry"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.v8::internal::CodeCommentEntry"* }
%"class.v8::internal::Assembler" = type { %"class.v8::internal::AssemblerBase", %"class.v8::internal::RelocInfoWriter", %"class.std::__1::deque", i32, %"class.std::__1::deque", %"class.std::__1::map", %"class.v8::internal::ConstPool" }
%"class.v8::internal::AssemblerBase" = type { i32 (...)**, %"class.std::__1::unique_ptr", i8*, %"class.std::__1::forward_list", i8*, %"class.v8::internal::CodeCommentsWriter", %"class.std::__1::vector.14", %"class.std::__1::vector.21", %"class.std::__1::unordered_map", %"struct.v8::internal::AssemblerOptions", i64, i8, i8, %"class.v8::internal::JumpOptimizationInfo"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.v8::internal::AssemblerBuffer"* }
%"class.v8::internal::AssemblerBuffer" = type { i32 (...)** }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type opaque
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %"class.v8::internal::Handle"*, %"class.v8::internal::Handle"*, %"class.std::__1::__compressed_pair.16" }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.v8::internal::Handle"* }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { %"class.v8::internal::Handle.23"*, %"class.v8::internal::Handle.23"*, %"class.std::__1::__compressed_pair.24" }
%"class.v8::internal::Handle.23" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.v8::internal::Handle.23"* }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.29", %"class.std::__1::__compressed_pair.38", %"class.std::__1::__compressed_pair.43", %"class.std::__1::__compressed_pair.45", [4 x i8] }>
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31", %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { i64 }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { float }
%"struct.v8::internal::AssemblerOptions" = type <{ i8, i8, i8, i8, i8, i8, i8, i8, i64, i8, i8, i8, [5 x i8] }>
%"class.v8::internal::JumpOptimizationInfo" = type { i32, i8, %"class.std::__1::vector.48", i64 }
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { i32*, i32*, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { i32* }
%"class.v8::internal::RelocInfoWriter" = type { i8*, i8* }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.60" }
%"struct.std::__1::__split_buffer" = type { i32**, i32**, i32**, %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { i32** }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.64", %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.v8::internal::ConstPool" = type { %"class.v8::internal::Assembler"*, %"class.std::__1::multimap" }
%"class.std::__1::multimap" = type { %"class.std::__1::__tree.71" }
%"class.std::__1::__tree.71" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.72", %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN2v88internal16CodeCommentEntryENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_ = comdat any

@.str = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"GetCommentSize() == strlen(comment_string) + 1\00", align 1

@_ZN2v88internal20CodeCommentsIteratorC1Emj = hidden unnamed_addr alias void (%"class.v8::internal::CodeCommentsIterator"*, i64, i32), void (%"class.v8::internal::CodeCommentsIterator"*, i64, i32)* @_ZN2v88internal20CodeCommentsIteratorC2Emj

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal16CodeCommentEntry14comment_lengthEv(%"struct.v8::internal::CodeCommentEntry"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %0, i64 0, i32 1
  %3 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  br label %12

10:                                               ; preds = %1
  %11 = zext i8 %5 to i64
  br label %12

12:                                               ; preds = %7, %10
  %13 = phi i64 [ %9, %7 ], [ %11, %10 ]
  %14 = trunc i64 %13 to i32
  %15 = add i32 %14, 1
  ret i32 %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal16CodeCommentEntry4sizeEv(%"struct.v8::internal::CodeCommentEntry"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %0, i64 0, i32 1
  %3 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  br label %12

10:                                               ; preds = %1
  %11 = zext i8 %5 to i64
  br label %12

12:                                               ; preds = %7, %10
  %13 = phi i64 [ %9, %7 ], [ %11, %10 ]
  %14 = trunc i64 %13 to i32
  %15 = add i32 %14, 9
  ret i32 %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal20CodeCommentsIteratorC2Emj(%"class.v8::internal::CodeCommentsIterator"* nocapture, i64, i32) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::CodeCommentsIterator", %"class.v8::internal::CodeCommentsIterator"* %0, i64 0, i32 0
  store i64 %1, i64* %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::CodeCommentsIterator", %"class.v8::internal::CodeCommentsIterator"* %0, i64 0, i32 1
  store i32 %2, i32* %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::CodeCommentsIterator", %"class.v8::internal::CodeCommentsIterator"* %0, i64 0, i32 2
  %7 = add i64 %1, 4
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal20CodeCommentsIterator4sizeEv(%"class.v8::internal::CodeCommentsIterator"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::CodeCommentsIterator", %"class.v8::internal::CodeCommentsIterator"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZNK2v88internal20CodeCommentsIterator10GetCommentEv(%"class.v8::internal::CodeCommentsIterator"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::CodeCommentsIterator", %"class.v8::internal::CodeCommentsIterator"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 8
  %5 = inttoptr i64 %4 to i8*
  %6 = add i64 %3, 4
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = tail call i64 @strlen(i8* %5) #12
  %10 = add i64 %9, 1
  %11 = zext i32 %8 to i64
  %12 = icmp eq i64 %10, %11
  br i1 %12, label %14, label %13, !prof !2

13:                                               ; preds = %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0)) #13
  unreachable

14:                                               ; preds = %1
  ret i8* %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal20CodeCommentsIterator14GetCommentSizeEv(%"class.v8::internal::CodeCommentsIterator"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::CodeCommentsIterator", %"class.v8::internal::CodeCommentsIterator"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 4
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 1
  ret i32 %6
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal20CodeCommentsIterator11GetPCOffsetEv(%"class.v8::internal::CodeCommentsIterator"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::CodeCommentsIterator", %"class.v8::internal::CodeCommentsIterator"* %0, i64 0, i32 2
  %3 = bitcast i64* %2 to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i32, i32* %4, align 1
  ret i32 %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal20CodeCommentsIterator4NextEv(%"class.v8::internal::CodeCommentsIterator"* nocapture) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::CodeCommentsIterator", %"class.v8::internal::CodeCommentsIterator"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 4
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 1
  %7 = add i32 %6, 8
  %8 = zext i32 %7 to i64
  %9 = add i64 %3, %8
  store i64 %9, i64* %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal20CodeCommentsIterator10HasCurrentEv(%"class.v8::internal::CodeCommentsIterator"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::CodeCommentsIterator", %"class.v8::internal::CodeCommentsIterator"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::CodeCommentsIterator", %"class.v8::internal::CodeCommentsIterator"* %0, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::CodeCommentsIterator", %"class.v8::internal::CodeCommentsIterator"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = add i64 %5, %8
  %10 = icmp ult i64 %3, %9
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18CodeCommentsWriter4EmitEPNS0_9AssemblerE(%"class.v8::internal::CodeCommentsWriter"* nocapture readonly, %"class.v8::internal::Assembler"*) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::CodeCommentsWriter", %"class.v8::internal::CodeCommentsWriter"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = add i32 %4, 4
  tail call void @_ZN2v88internal9Assembler2ddEjNS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"* %1, i32 %5, i8 signext 0) #14
  %6 = getelementptr inbounds %"class.v8::internal::CodeCommentsWriter", %"class.v8::internal::CodeCommentsWriter"* %0, i64 0, i32 1, i32 0, i32 0
  %7 = load %"struct.v8::internal::CodeCommentEntry"*, %"struct.v8::internal::CodeCommentEntry"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::CodeCommentsWriter", %"class.v8::internal::CodeCommentsWriter"* %0, i64 0, i32 1, i32 0, i32 1
  %9 = load %"struct.v8::internal::CodeCommentEntry"*, %"struct.v8::internal::CodeCommentEntry"** %8, align 8
  %10 = icmp eq %"struct.v8::internal::CodeCommentEntry"* %7, %9
  br i1 %10, label %14, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %1, i64 0, i32 0, i32 4
  %13 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %1, i64 0, i32 1, i32 0
  br label %15

14:                                               ; preds = %48, %2
  ret void

15:                                               ; preds = %11, %48
  %16 = phi %"struct.v8::internal::CodeCommentEntry"* [ %7, %11 ], [ %49, %48 ]
  %17 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %16, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  tail call void @_ZN2v88internal9Assembler2ddEjNS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"* %1, i32 %18, i8 signext 0) #14
  %19 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %16, i64 0, i32 1
  %20 = bitcast %"class.std::__1::basic_string"* %19 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %15
  %25 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %16, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  br label %29

27:                                               ; preds = %15
  %28 = zext i8 %22 to i64
  br label %29

29:                                               ; preds = %24, %27
  %30 = phi i64 [ %26, %24 ], [ %28, %27 ]
  %31 = trunc i64 %30 to i32
  %32 = add i32 %31, 1
  tail call void @_ZN2v88internal9Assembler2ddEjNS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"* %1, i32 %32, i8 signext 0) #14
  %33 = load i8, i8* %21, align 1
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %35, label %40

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %16, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  br label %43

40:                                               ; preds = %29
  %41 = bitcast %"class.std::__1::basic_string"* %19 to i8*
  %42 = zext i8 %33 to i64
  br label %43

43:                                               ; preds = %35, %40
  %44 = phi i8* [ %37, %35 ], [ %41, %40 ]
  %45 = phi i64 [ %39, %35 ], [ %42, %40 ]
  %46 = getelementptr inbounds i8, i8* %44, i64 %45
  %47 = icmp eq i64 %45, 0
  br i1 %47, label %48, label %52

48:                                               ; preds = %60, %43
  tail call void @_ZN2v88internal9Assembler2dbEh(%"class.v8::internal::Assembler"* %1, i8 zeroext 0) #14
  %49 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %16, i64 1
  %50 = load %"struct.v8::internal::CodeCommentEntry"*, %"struct.v8::internal::CodeCommentEntry"** %8, align 8
  %51 = icmp eq %"struct.v8::internal::CodeCommentEntry"* %49, %50
  br i1 %51, label %14, label %15

52:                                               ; preds = %43, %60
  %53 = phi i8* [ %61, %60 ], [ %44, %43 ]
  %54 = load i8, i8* %53, align 1
  %55 = load i8*, i8** %12, align 8
  %56 = load i8*, i8** %13, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 -32
  %58 = icmp ult i8* %55, %57
  br i1 %58, label %60, label %59, !prof !2

59:                                               ; preds = %52
  tail call void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"* %1) #14
  br label %60

60:                                               ; preds = %52, %59
  tail call void @_ZN2v88internal9Assembler2dbEh(%"class.v8::internal::Assembler"* %1, i8 zeroext %54) #14
  %61 = getelementptr inbounds i8, i8* %53, i64 1
  %62 = icmp eq i8* %61, %46
  br i1 %62, label %48, label %52
}

declare void @_ZN2v88internal9Assembler2ddEjNS0_9RelocInfo4ModeE(%"class.v8::internal::Assembler"*, i32, i8 signext) local_unnamed_addr #7

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal18CodeCommentsWriter12section_sizeEv(%"class.v8::internal::CodeCommentsWriter"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::CodeCommentsWriter", %"class.v8::internal::CodeCommentsWriter"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = add i32 %3, 4
  ret i32 %4
}

declare void @_ZN2v88internal9Assembler2dbEh(%"class.v8::internal::Assembler"*, i8 zeroext) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18CodeCommentsWriter3AddEjNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.v8::internal::CodeCommentsWriter"*, i32, %"class.std::__1::basic_string"* nocapture) local_unnamed_addr #2 align 2 {
  %4 = alloca %"struct.v8::internal::CodeCommentEntry", align 8
  %5 = bitcast %"struct.v8::internal::CodeCommentEntry"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #14
  %6 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %4, i64 0, i32 0
  store i32 %1, i32* %6, align 8
  %7 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %4, i64 0, i32 1
  %8 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %9 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #14
  %10 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  %14 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %4, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = zext i8 %12 to i64
  %17 = select i1 %13, i64 %15, i64 %16
  %18 = trunc i64 %17 to i32
  %19 = getelementptr inbounds %"class.v8::internal::CodeCommentsWriter", %"class.v8::internal::CodeCommentsWriter"* %0, i64 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = add i32 %20, 9
  %22 = add i32 %21, %18
  store i32 %22, i32* %19, align 8
  %23 = getelementptr inbounds %"class.v8::internal::CodeCommentsWriter", %"class.v8::internal::CodeCommentsWriter"* %0, i64 0, i32 1, i32 0, i32 1
  %24 = load %"struct.v8::internal::CodeCommentEntry"*, %"struct.v8::internal::CodeCommentEntry"** %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::CodeCommentsWriter", %"class.v8::internal::CodeCommentsWriter"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %26 = load %"struct.v8::internal::CodeCommentEntry"*, %"struct.v8::internal::CodeCommentEntry"** %25, align 8
  %27 = icmp ult %"struct.v8::internal::CodeCommentEntry"* %24, %26
  br i1 %27, label %28, label %35

28:                                               ; preds = %3
  %29 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %24, i64 0, i32 0
  store i32 %1, i32* %29, align 8
  %30 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %24, i64 0, i32 1
  %31 = bitcast %"class.std::__1::basic_string"* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %8, i64 24, i1 false) #14
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #14
  %32 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %24, i64 1
  %33 = ptrtoint %"struct.v8::internal::CodeCommentEntry"* %32 to i64
  %34 = bitcast %"struct.v8::internal::CodeCommentEntry"** %23 to i64*
  store i64 %33, i64* %34, align 8
  br label %42

35:                                               ; preds = %3
  %36 = getelementptr inbounds %"class.v8::internal::CodeCommentsWriter", %"class.v8::internal::CodeCommentsWriter"* %0, i64 0, i32 1
  call void @_ZNSt3__16vectorIN2v88internal16CodeCommentEntryENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector"* %36, %"struct.v8::internal::CodeCommentEntry"* nonnull dereferenceable(32) %4) #14
  %37 = load i8, i8* %11, align 1
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  call void @_ZdlPv(i8* %41) #15
  br label %42

42:                                               ; preds = %28, %35, %39
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #14
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2v88internal18CodeCommentsWriter11entry_countEv(%"class.v8::internal::CodeCommentsWriter"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::CodeCommentsWriter", %"class.v8::internal::CodeCommentsWriter"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.v8::internal::CodeCommentsWriter", %"class.v8::internal::CodeCommentsWriter"* %0, i64 0, i32 1, i32 0, i32 1
  %4 = bitcast %"struct.v8::internal::CodeCommentEntry"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  ret i64 %9
}

declare void @_ZN2v88internal9Assembler10GrowBufferEv(%"class.v8::internal::Assembler"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2v88internal16CodeCommentEntryENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector"*, %"struct.v8::internal::CodeCommentEntry"* dereferenceable(32)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.v8::internal::CodeCommentEntry"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.v8::internal::CodeCommentEntry"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #13
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #15
  %33 = bitcast i8* %32 to %"struct.v8::internal::CodeCommentEntry"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"struct.v8::internal::CodeCommentEntry"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %36, i64 %9
  %38 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %36, i64 %35
  %39 = ptrtoint %"struct.v8::internal::CodeCommentEntry"* %38 to i64
  %40 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %37, i64 0, i32 0
  %41 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %1, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  store i32 %42, i32* %40, align 8
  %43 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %36, i64 %9, i32 1
  %44 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %1, i64 0, i32 1
  %45 = bitcast %"class.std::__1::basic_string"* %43 to i8*
  %46 = bitcast %"class.std::__1::basic_string"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %46, i64 24, i1 false) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 24, i1 false) #14
  %47 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %37, i64 1
  %48 = ptrtoint %"struct.v8::internal::CodeCommentEntry"* %47 to i64
  %49 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %50 = load %"struct.v8::internal::CodeCommentEntry"*, %"struct.v8::internal::CodeCommentEntry"** %49, align 8
  %51 = ptrtoint %"struct.v8::internal::CodeCommentEntry"* %50 to i64
  %52 = load %"struct.v8::internal::CodeCommentEntry"*, %"struct.v8::internal::CodeCommentEntry"** %3, align 8
  %53 = icmp eq %"struct.v8::internal::CodeCommentEntry"* %52, %50
  br i1 %53, label %99, label %54

54:                                               ; preds = %34
  %55 = getelementptr %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %52, i64 -1, i32 0
  %56 = ptrtoint i32* %55 to i64
  %57 = sub i64 %56, %51
  %58 = and i64 %57, 32
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %70

60:                                               ; preds = %54
  %61 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %52, i64 -1
  %62 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %37, i64 -1, i32 0
  %63 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %61, i64 0, i32 0
  %64 = load i32, i32* %63, align 8
  store i32 %64, i32* %62, align 8
  %65 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %37, i64 -1, i32 1
  %66 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %52, i64 -1, i32 1
  %67 = bitcast %"class.std::__1::basic_string"* %65 to i8*
  %68 = bitcast %"class.std::__1::basic_string"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 24, i1 false) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 24, i1 false) #14
  %69 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %37, i64 -1
  br label %70

70:                                               ; preds = %60, %54
  %71 = phi %"struct.v8::internal::CodeCommentEntry"* [ undef, %54 ], [ %69, %60 ]
  %72 = phi %"struct.v8::internal::CodeCommentEntry"* [ %37, %54 ], [ %69, %60 ]
  %73 = phi %"struct.v8::internal::CodeCommentEntry"* [ %52, %54 ], [ %61, %60 ]
  %74 = icmp ult i64 %57, 32
  br i1 %74, label %95, label %75

75:                                               ; preds = %70, %75
  %76 = phi %"struct.v8::internal::CodeCommentEntry"* [ %93, %75 ], [ %72, %70 ]
  %77 = phi %"struct.v8::internal::CodeCommentEntry"* [ %85, %75 ], [ %73, %70 ]
  %78 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %76, i64 -1, i32 0
  %79 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %77, i64 -1, i32 0
  %80 = load i32, i32* %79, align 8
  store i32 %80, i32* %78, align 8
  %81 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %76, i64 -1, i32 1
  %82 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %77, i64 -1, i32 1
  %83 = bitcast %"class.std::__1::basic_string"* %81 to i8*
  %84 = bitcast %"class.std::__1::basic_string"* %82 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %83, i8* align 8 %84, i64 24, i1 false) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %84, i8 0, i64 24, i1 false) #14
  %85 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %77, i64 -2
  %86 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %76, i64 -2, i32 0
  %87 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %85, i64 0, i32 0
  %88 = load i32, i32* %87, align 8
  store i32 %88, i32* %86, align 8
  %89 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %76, i64 -2, i32 1
  %90 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %77, i64 -2, i32 1
  %91 = bitcast %"class.std::__1::basic_string"* %89 to i8*
  %92 = bitcast %"class.std::__1::basic_string"* %90 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 24, i1 false) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 24, i1 false) #14
  %93 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %76, i64 -2
  %94 = icmp eq %"struct.v8::internal::CodeCommentEntry"* %85, %50
  br i1 %94, label %95, label %75

95:                                               ; preds = %75, %70
  %96 = phi %"struct.v8::internal::CodeCommentEntry"* [ %71, %70 ], [ %93, %75 ]
  %97 = load i64, i64* %6, align 8
  %98 = load %"struct.v8::internal::CodeCommentEntry"*, %"struct.v8::internal::CodeCommentEntry"** %3, align 8
  br label %99

99:                                               ; preds = %34, %95
  %100 = phi %"struct.v8::internal::CodeCommentEntry"* [ %98, %95 ], [ %50, %34 ]
  %101 = phi %"struct.v8::internal::CodeCommentEntry"* [ %96, %95 ], [ %37, %34 ]
  %102 = phi i64 [ %97, %95 ], [ %51, %34 ]
  %103 = ptrtoint %"struct.v8::internal::CodeCommentEntry"* %101 to i64
  store i64 %103, i64* %6, align 8
  store i64 %48, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %104 = inttoptr i64 %102 to %"struct.v8::internal::CodeCommentEntry"*
  %105 = icmp eq %"struct.v8::internal::CodeCommentEntry"* %100, %104
  br i1 %105, label %119, label %106

106:                                              ; preds = %99, %117
  %107 = phi %"struct.v8::internal::CodeCommentEntry"* [ %108, %117 ], [ %100, %99 ]
  %108 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %107, i64 -1
  %109 = getelementptr inbounds %"struct.v8::internal::CodeCommentEntry", %"struct.v8::internal::CodeCommentEntry"* %107, i64 -1, i32 1
  %110 = bitcast %"class.std::__1::basic_string"* %109 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %111 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %110, i64 0, i32 1, i32 0
  %112 = load i8, i8* %111, align 1
  %113 = icmp slt i8 %112, 0
  br i1 %113, label %114, label %117

114:                                              ; preds = %106
  %115 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %109, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  tail call void @_ZdlPv(i8* %116) #15
  br label %117

117:                                              ; preds = %114, %106
  %118 = icmp eq %"struct.v8::internal::CodeCommentEntry"* %108, %104
  br i1 %118, label %119, label %106

119:                                              ; preds = %117, %99
  %120 = icmp eq i64 %102, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %102 to i8*
  tail call void @_ZdlPv(i8* %122) #15
  br label %123

123:                                              ; preds = %119, %121
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readonly }
attributes #13 = { noreturn nounwind }
attributes #14 = { nounwind }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
