; ModuleID = '../../third_party/skia/src/utils/SkUTF.cpp'
source_filename = "../../third_party/skia/src/utils/SkUTF.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN5SkUTF9CountUTF8EPKcm(i8* readonly, i64) local_unnamed_addr #0 {
  %3 = icmp eq i8* %0, null
  br i1 %3, label %43, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  %6 = icmp sgt i64 %1, 0
  br i1 %6, label %7, label %43

7:                                                ; preds = %4, %39
  %8 = phi i32 [ %41, %39 ], [ 0, %4 ]
  %9 = phi i8* [ %40, %39 ], [ %0, %4 ]
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = icmp sgt i8 %10, -1
  br i1 %12, label %26, label %13

13:                                               ; preds = %7
  %14 = icmp ult i8 %10, -64
  br i1 %14, label %43, label %15

15:                                               ; preds = %13
  %16 = icmp ugt i8 %10, -12
  %17 = and i32 %11, 254
  %18 = icmp eq i32 %17, 192
  %19 = or i1 %16, %18
  br i1 %19, label %43, label %20

20:                                               ; preds = %15
  %21 = lshr i32 %11, 4
  %22 = shl nuw nsw i32 %21, 1
  %23 = ashr i32 -452984832, %22
  %24 = and i32 %23, 3
  %25 = add nuw nsw i32 %24, 1
  br label %26

26:                                               ; preds = %20, %7
  %27 = phi i32 [ 1, %7 ], [ %25, %20 ]
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %9, i64 %28
  %30 = icmp ugt i8* %29, %5
  br i1 %30, label %43, label %31

31:                                               ; preds = %26
  %32 = icmp sgt i32 %27, 1
  %33 = getelementptr inbounds i8, i8* %9, i64 1
  br i1 %32, label %34, label %39

34:                                               ; preds = %31
  %35 = load i8, i8* %33, align 1
  %36 = icmp slt i8 %35, 0
  %37 = icmp ult i8 %35, -64
  %38 = and i1 %36, %37
  br i1 %38, label %45, label %43

39:                                               ; preds = %61, %53, %45, %31
  %40 = phi i8* [ %33, %31 ], [ %47, %45 ], [ %55, %53 ], [ %63, %61 ]
  %41 = add nuw nsw i32 %8, 1
  %42 = icmp ult i8* %40, %5
  br i1 %42, label %7, label %43

43:                                               ; preds = %61, %39, %26, %13, %15, %34, %48, %56, %4, %2
  %44 = phi i32 [ -1, %2 ], [ 0, %4 ], [ -1, %56 ], [ -1, %48 ], [ -1, %34 ], [ %41, %39 ], [ -1, %26 ], [ -1, %13 ], [ -1, %15 ], [ -1, %61 ]
  ret i32 %44

45:                                               ; preds = %34
  %46 = icmp sgt i32 %27, 2
  %47 = getelementptr inbounds i8, i8* %9, i64 2
  br i1 %46, label %48, label %39

48:                                               ; preds = %45
  %49 = load i8, i8* %47, align 1
  %50 = icmp slt i8 %49, 0
  %51 = icmp ult i8 %49, -64
  %52 = and i1 %50, %51
  br i1 %52, label %53, label %43

53:                                               ; preds = %48
  %54 = icmp sgt i32 %27, 3
  %55 = getelementptr inbounds i8, i8* %9, i64 3
  br i1 %54, label %56, label %39

56:                                               ; preds = %53
  %57 = load i8, i8* %55, align 1
  %58 = icmp slt i8 %57, 0
  %59 = icmp ult i8 %57, -64
  %60 = and i1 %58, %59
  br i1 %60, label %61, label %43

61:                                               ; preds = %56
  %62 = icmp sgt i32 %27, 4
  %63 = getelementptr inbounds i8, i8* %9, i64 4
  br i1 %62, label %43, label %39
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN5SkUTF10CountUTF16EPKtm(i16*, i64) local_unnamed_addr #0 {
  %3 = icmp eq i16* %0, null
  br i1 %3, label %30, label %4

4:                                                ; preds = %2
  %5 = ptrtoint i16* %0 to i64
  %6 = or i64 %5, %1
  %7 = and i64 %6, 1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %30

9:                                                ; preds = %4
  %10 = lshr i64 %1, 1
  %11 = getelementptr inbounds i16, i16* %0, i64 %10
  %12 = icmp eq i64 %10, 0
  br i1 %12, label %30, label %13

13:                                               ; preds = %9, %26
  %14 = phi i32 [ %28, %26 ], [ 0, %9 ]
  %15 = phi i16* [ %27, %26 ], [ %0, %9 ]
  %16 = getelementptr inbounds i16, i16* %15, i64 1
  %17 = load i16, i16* %15, align 2
  %18 = and i16 %17, -1024
  switch i16 %18, label %26 [
    i16 -9216, label %30
    i16 -10240, label %19
  ]

19:                                               ; preds = %13
  %20 = icmp ult i16* %16, %11
  br i1 %20, label %21, label %30

21:                                               ; preds = %19
  %22 = getelementptr inbounds i16, i16* %15, i64 2
  %23 = load i16, i16* %16, align 2
  %24 = and i16 %23, -1024
  %25 = icmp eq i16 %24, -9216
  br i1 %25, label %26, label %30

26:                                               ; preds = %13, %21
  %27 = phi i16* [ %22, %21 ], [ %16, %13 ]
  %28 = add nuw nsw i32 %14, 1
  %29 = icmp ult i16* %27, %11
  br i1 %29, label %13, label %30

30:                                               ; preds = %26, %19, %21, %13, %9, %4, %2
  %31 = phi i32 [ -1, %2 ], [ -1, %4 ], [ 0, %9 ], [ %28, %26 ], [ -1, %19 ], [ -1, %21 ], [ -1, %13 ]
  ret i32 %31
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN5SkUTF10CountUTF32EPKim(i32*, i64) local_unnamed_addr #0 {
  %3 = ptrtoint i32* %0 to i64
  %4 = or i64 %3, %1
  %5 = and i64 %4, 3
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %22

7:                                                ; preds = %2
  %8 = lshr i64 %1, 2
  %9 = icmp ult i64 %1, 8589934592
  br i1 %9, label %10, label %22

10:                                               ; preds = %7
  %11 = getelementptr inbounds i32, i32* %0, i64 %8
  %12 = icmp eq i64 %8, 0
  br i1 %12, label %20, label %15

13:                                               ; preds = %15
  %14 = icmp ult i32* %19, %11
  br i1 %14, label %15, label %20

15:                                               ; preds = %10, %13
  %16 = phi i32* [ %19, %13 ], [ %0, %10 ]
  %17 = load i32, i32* %16, align 4
  %18 = icmp ugt i32 %17, 16777215
  %19 = getelementptr inbounds i32, i32* %16, i64 1
  br i1 %18, label %22, label %13

20:                                               ; preds = %13, %10
  %21 = trunc i64 %8 to i32
  br label %22

22:                                               ; preds = %15, %20, %2, %7
  %23 = phi i32 [ -1, %7 ], [ -1, %2 ], [ %21, %20 ], [ -1, %15 ]
  ret i32 %23
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN5SkUTF8NextUTF8EPPKcS1_(i8**, i8*) local_unnamed_addr #2 {
  %3 = icmp ne i8** %0, null
  %4 = icmp ne i8* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %54

6:                                                ; preds = %2
  %7 = load i8*, i8** %0, align 8
  %8 = icmp ne i8* %7, null
  %9 = icmp ult i8* %7, %1
  %10 = and i1 %8, %9
  br i1 %10, label %11, label %51

11:                                               ; preds = %6
  %12 = load i8, i8* %7, align 1
  %13 = zext i8 %12 to i32
  %14 = icmp sgt i8 %12, -1
  br i1 %14, label %47, label %15

15:                                               ; preds = %11
  %16 = icmp ult i8 %12, -64
  br i1 %16, label %51, label %17

17:                                               ; preds = %15
  %18 = icmp ugt i8 %12, -12
  %19 = and i32 %13, 254
  %20 = icmp eq i32 %19, 192
  %21 = or i1 %18, %20
  br i1 %21, label %51, label %22

22:                                               ; preds = %17
  %23 = shl i32 %13, 25
  br label %24

24:                                               ; preds = %36, %22
  %25 = phi i8* [ %7, %22 ], [ %29, %36 ]
  %26 = phi i32 [ %13, %22 ], [ %40, %36 ]
  %27 = phi i32 [ %23, %22 ], [ %42, %36 ]
  %28 = phi i32 [ -64, %22 ], [ %41, %36 ]
  %29 = getelementptr inbounds i8, i8* %25, i64 1
  %30 = icmp ult i8* %29, %1
  br i1 %30, label %31, label %51

31:                                               ; preds = %24
  %32 = load i8, i8* %29, align 1
  %33 = icmp slt i8 %32, 0
  %34 = icmp ult i8 %32, -64
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %51

36:                                               ; preds = %31
  %37 = shl i32 %26, 6
  %38 = and i8 %32, 63
  %39 = zext i8 %38 to i32
  %40 = or i32 %37, %39
  %41 = shl i32 %28, 5
  %42 = shl i32 %27, 1
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %24, label %44

44:                                               ; preds = %36
  %45 = xor i32 %41, -1
  %46 = and i32 %40, %45
  br label %47

47:                                               ; preds = %11, %44
  %48 = phi i8* [ %29, %44 ], [ %7, %11 ]
  %49 = phi i32 [ %46, %44 ], [ %13, %11 ]
  %50 = getelementptr inbounds i8, i8* %48, i64 1
  br label %51

51:                                               ; preds = %31, %24, %15, %17, %6, %47
  %52 = phi i8* [ %50, %47 ], [ %1, %6 ], [ %1, %17 ], [ %1, %15 ], [ %1, %24 ], [ %1, %31 ]
  %53 = phi i32 [ %49, %47 ], [ -1, %6 ], [ -1, %17 ], [ -1, %15 ], [ -1, %24 ], [ -1, %31 ]
  store i8* %52, i8** %0, align 8
  br label %54

54:                                               ; preds = %51, %2
  %55 = phi i32 [ -1, %2 ], [ %53, %51 ]
  ret i32 %55
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN5SkUTF9NextUTF16EPPKtS1_(i16**, i16*) local_unnamed_addr #2 {
  %3 = icmp ne i16** %0, null
  %4 = icmp ne i16* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %38

6:                                                ; preds = %2
  %7 = load i16*, i16** %0, align 8
  %8 = icmp eq i16* %7, null
  %9 = getelementptr inbounds i16, i16* %7, i64 1
  %10 = icmp ugt i16* %9, %1
  %11 = or i1 %8, %10
  br i1 %11, label %35, label %12

12:                                               ; preds = %6
  %13 = ptrtoint i16* %7 to i64
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %35

16:                                               ; preds = %12
  %17 = load i16, i16* %7, align 2
  %18 = zext i16 %17 to i32
  %19 = and i16 %17, -1024
  switch i16 %19, label %32 [
    i16 -9216, label %35
    i16 -10240, label %20
  ]

20:                                               ; preds = %16
  %21 = getelementptr inbounds i16, i16* %7, i64 2
  %22 = icmp ugt i16* %21, %1
  br i1 %22, label %35, label %23

23:                                               ; preds = %20
  %24 = load i16, i16* %9, align 2
  %25 = and i16 %24, -1024
  %26 = icmp eq i16 %25, -9216
  br i1 %26, label %27, label %35

27:                                               ; preds = %23
  %28 = shl nuw nsw i32 %18, 10
  %29 = zext i16 %24 to i32
  %30 = add nsw i32 %28, -56613888
  %31 = add nsw i32 %30, %29
  br label %32

32:                                               ; preds = %16, %27
  %33 = phi i16* [ %21, %27 ], [ %9, %16 ]
  %34 = phi i32 [ %31, %27 ], [ %18, %16 ]
  br label %35

35:                                               ; preds = %23, %20, %16, %12, %6, %32
  %36 = phi i16* [ %33, %32 ], [ %1, %6 ], [ %1, %12 ], [ %1, %16 ], [ %1, %20 ], [ %1, %23 ]
  %37 = phi i32 [ %34, %32 ], [ -1, %6 ], [ -1, %12 ], [ -1, %16 ], [ -1, %20 ], [ -1, %23 ]
  store i16* %36, i16** %0, align 8
  br label %38

38:                                               ; preds = %35, %2
  %39 = phi i32 [ -1, %2 ], [ %37, %35 ]
  ret i32 %39
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN5SkUTF9NextUTF32EPPKiS1_(i32**, i32*) local_unnamed_addr #2 {
  %3 = icmp ne i32** %0, null
  %4 = icmp ne i32* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %24

6:                                                ; preds = %2
  %7 = load i32*, i32** %0, align 8
  %8 = icmp eq i32* %7, null
  br i1 %8, label %21, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds i32, i32* %7, i64 1
  %11 = icmp ugt i32* %10, %1
  br i1 %11, label %21, label %12

12:                                               ; preds = %9
  %13 = ptrtoint i32* %7 to i64
  %14 = and i64 %13, 3
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %21

16:                                               ; preds = %12
  %17 = load i32, i32* %7, align 4
  %18 = icmp ugt i32 %17, 16777215
  %19 = select i1 %18, i32* %1, i32* %10
  %20 = select i1 %18, i32 -1, i32 %17
  br label %21

21:                                               ; preds = %16, %9, %12, %6
  %22 = phi i32* [ %1, %6 ], [ %1, %12 ], [ %1, %9 ], [ %19, %16 ]
  %23 = phi i32 [ -1, %6 ], [ -1, %12 ], [ -1, %9 ], [ %20, %16 ]
  store i32* %22, i32** %0, align 8
  br label %24

24:                                               ; preds = %21, %2
  %25 = phi i32 [ -1, %2 ], [ %23, %21 ]
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN5SkUTF6ToUTF8EiPc(i32, i8*) local_unnamed_addr #3 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  %5 = ptrtoint i32* %3 to i64
  %6 = bitcast i32* %3 to [4 x i8]*
  %7 = icmp ugt i32 %0, 1114111
  br i1 %7, label %146, label %8

8:                                                ; preds = %2
  %9 = icmp slt i32 %0, 128
  br i1 %9, label %10, label %14

10:                                               ; preds = %8
  %11 = icmp eq i8* %1, null
  br i1 %11, label %146, label %12

12:                                               ; preds = %10
  %13 = trunc i32 %0 to i8
  store i8 %13, i8* %1, align 1
  br label %146

14:                                               ; preds = %8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  store i32 -1431655766, i32* %3, align 4
  br label %15

15:                                               ; preds = %14, %15
  %16 = phi i64 [ 1, %14 ], [ %24, %15 ]
  %17 = phi i8* [ %4, %14 ], [ %22, %15 ]
  %18 = phi i32 [ %0, %14 ], [ %23, %15 ]
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 63
  %21 = or i8 %20, -128
  %22 = getelementptr inbounds i8, i8* %17, i64 1
  store i8 %21, i8* %17, align 1
  %23 = ashr i32 %18, 6
  %24 = add i64 %16, 1
  %25 = trunc i64 %24 to i32
  %26 = lshr i32 127, %25
  %27 = icmp sgt i32 %23, %26
  br i1 %27, label %15, label %28

28:                                               ; preds = %15
  %29 = trunc i64 %24 to i32
  %30 = icmp eq i8* %1, null
  br i1 %30, label %145, label %31

31:                                               ; preds = %28
  %32 = getelementptr inbounds i8, i8* %1, i64 %24
  %33 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 %16
  %34 = icmp sgt i64 %16, 0
  br i1 %34, label %35, label %139

35:                                               ; preds = %31
  %36 = getelementptr i8, i8* %4, i64 %16
  %37 = getelementptr inbounds i8, i8* %4, i64 1
  %38 = icmp ugt i8* %36, %37
  %39 = select i1 %38, i8* %36, i8* %37
  %40 = ptrtoint i8* %39 to i64
  %41 = sub i64 %40, %5
  %42 = icmp ult i64 %41, 16
  br i1 %42, label %129, label %43

43:                                               ; preds = %35
  %44 = getelementptr i8, i8* %4, i64 %16
  %45 = getelementptr inbounds i8, i8* %4, i64 1
  %46 = icmp ugt i8* %44, %45
  %47 = select i1 %46, i8* %44, i8* %45
  %48 = ptrtoint i8* %47 to i64
  %49 = sub i64 %24, %48
  %50 = getelementptr i8, i8* %1, i64 %49
  %51 = ptrtoint i8* %50 to i64
  %52 = getelementptr i8, i8* %4, i64 %51
  %53 = icmp ult i8* %52, %47
  %54 = icmp ugt i8* %32, %4
  %55 = and i1 %53, %54
  br i1 %55, label %129, label %56

56:                                               ; preds = %43
  %57 = and i64 %41, -16
  %58 = getelementptr i8, i8* %4, i64 %57
  %59 = sub i64 0, %57
  %60 = getelementptr i8, i8* %32, i64 %59
  %61 = add i64 %57, -16
  %62 = lshr exact i64 %61, 4
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %61, 0
  br i1 %65, label %107, label %66

66:                                               ; preds = %56
  %67 = sub nuw nsw i64 %63, %64
  %68 = getelementptr i8, i8* %1, i64 %16
  %69 = getelementptr i8, i8* %1, i64 %16
  br label %70

70:                                               ; preds = %70, %66
  %71 = phi i64 [ 0, %66 ], [ %104, %70 ]
  %72 = phi i64 [ %67, %66 ], [ %105, %70 ]
  %73 = getelementptr i8, i8* %4, i64 %71
  %74 = sub i64 0, %71
  %75 = bitcast i8* %73 to <8 x i8>*
  %76 = load <8 x i8>, <8 x i8>* %75, align 4, !alias.scope !2
  %77 = getelementptr i8, i8* %73, i64 8
  %78 = bitcast i8* %77 to <8 x i8>*
  %79 = load <8 x i8>, <8 x i8>* %78, align 4, !alias.scope !2
  %80 = getelementptr inbounds i8, i8* %68, i64 %74
  %81 = shufflevector <8 x i8> %76, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %82 = getelementptr inbounds i8, i8* %80, i64 -7
  %83 = bitcast i8* %82 to <8 x i8>*
  store <8 x i8> %81, <8 x i8>* %83, align 1, !alias.scope !5, !noalias !2
  %84 = shufflevector <8 x i8> %79, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %85 = getelementptr inbounds i8, i8* %80, i64 -8
  %86 = getelementptr inbounds i8, i8* %85, i64 -7
  %87 = bitcast i8* %86 to <8 x i8>*
  store <8 x i8> %84, <8 x i8>* %87, align 1, !alias.scope !5, !noalias !2
  %88 = or i64 %71, 16
  %89 = getelementptr i8, i8* %4, i64 %88
  %90 = sub nuw nsw i64 -16, %71
  %91 = bitcast i8* %89 to <8 x i8>*
  %92 = load <8 x i8>, <8 x i8>* %91, align 4, !alias.scope !2
  %93 = getelementptr i8, i8* %89, i64 8
  %94 = bitcast i8* %93 to <8 x i8>*
  %95 = load <8 x i8>, <8 x i8>* %94, align 4, !alias.scope !2
  %96 = getelementptr inbounds i8, i8* %69, i64 %90
  %97 = shufflevector <8 x i8> %92, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %98 = getelementptr inbounds i8, i8* %96, i64 -7
  %99 = bitcast i8* %98 to <8 x i8>*
  store <8 x i8> %97, <8 x i8>* %99, align 1, !alias.scope !5, !noalias !2
  %100 = shufflevector <8 x i8> %95, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %101 = getelementptr inbounds i8, i8* %96, i64 -8
  %102 = getelementptr inbounds i8, i8* %101, i64 -7
  %103 = bitcast i8* %102 to <8 x i8>*
  store <8 x i8> %100, <8 x i8>* %103, align 1, !alias.scope !5, !noalias !2
  %104 = add i64 %71, 32
  %105 = add i64 %72, -2
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %70, !llvm.loop !7

107:                                              ; preds = %70, %56
  %108 = phi i64 [ 0, %56 ], [ %104, %70 ]
  %109 = icmp eq i64 %64, 0
  br i1 %109, label %127, label %110

110:                                              ; preds = %107
  %111 = getelementptr i8, i8* %4, i64 %108
  %112 = sub i64 0, %108
  %113 = getelementptr i8, i8* %1, i64 %16
  %114 = bitcast i8* %111 to <8 x i8>*
  %115 = load <8 x i8>, <8 x i8>* %114, align 4, !alias.scope !2
  %116 = getelementptr i8, i8* %111, i64 8
  %117 = bitcast i8* %116 to <8 x i8>*
  %118 = load <8 x i8>, <8 x i8>* %117, align 4, !alias.scope !2
  %119 = getelementptr inbounds i8, i8* %113, i64 %112
  %120 = shufflevector <8 x i8> %115, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %121 = getelementptr inbounds i8, i8* %119, i64 -7
  %122 = bitcast i8* %121 to <8 x i8>*
  store <8 x i8> %120, <8 x i8>* %122, align 1, !alias.scope !5, !noalias !2
  %123 = shufflevector <8 x i8> %118, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %124 = getelementptr inbounds i8, i8* %119, i64 -8
  %125 = getelementptr inbounds i8, i8* %124, i64 -7
  %126 = bitcast i8* %125 to <8 x i8>*
  store <8 x i8> %123, <8 x i8>* %126, align 1, !alias.scope !5, !noalias !2
  br label %127

127:                                              ; preds = %107, %110
  %128 = icmp eq i64 %41, %57
  br i1 %128, label %139, label %129

129:                                              ; preds = %127, %43, %35
  %130 = phi i8* [ %4, %43 ], [ %4, %35 ], [ %58, %127 ]
  %131 = phi i8* [ %32, %43 ], [ %32, %35 ], [ %60, %127 ]
  br label %132

132:                                              ; preds = %129, %132
  %133 = phi i8* [ %135, %132 ], [ %130, %129 ]
  %134 = phi i8* [ %137, %132 ], [ %131, %129 ]
  %135 = getelementptr inbounds i8, i8* %133, i64 1
  %136 = load i8, i8* %133, align 1
  %137 = getelementptr inbounds i8, i8* %134, i64 -1
  store i8 %136, i8* %137, align 1
  %138 = icmp ult i8* %135, %33
  br i1 %138, label %132, label %139, !llvm.loop !9

139:                                              ; preds = %132, %127, %31
  %140 = phi i8* [ %32, %31 ], [ %60, %127 ], [ %137, %132 ]
  %141 = ashr i32 -256, %29
  %142 = or i32 %141, %23
  %143 = trunc i32 %142 to i8
  %144 = getelementptr inbounds i8, i8* %140, i64 -1
  store i8 %143, i8* %144, align 1
  br label %145

145:                                              ; preds = %28, %139
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  br label %146

146:                                              ; preds = %12, %10, %2, %145
  %147 = phi i64 [ %24, %145 ], [ 0, %2 ], [ 1, %10 ], [ 1, %12 ]
  ret i64 %147
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i64 @_ZN5SkUTF7ToUTF16EiPt(i32, i16*) local_unnamed_addr #4 {
  %3 = icmp ugt i32 %0, 1114111
  br i1 %3, label %20, label %4

4:                                                ; preds = %2
  %5 = icmp sgt i32 %0, 65535
  %6 = icmp eq i16* %1, null
  br i1 %6, label %18, label %7

7:                                                ; preds = %4
  br i1 %5, label %8, label %16

8:                                                ; preds = %7
  %9 = lshr i32 %0, 10
  %10 = trunc i32 %9 to i16
  %11 = add nuw nsw i16 %10, -10304
  store i16 %11, i16* %1, align 2
  %12 = trunc i32 %0 to i16
  %13 = and i16 %12, 1023
  %14 = or i16 %13, -9216
  %15 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %14, i16* %15, align 2
  br label %18

16:                                               ; preds = %7
  %17 = trunc i32 %0 to i16
  store i16 %17, i16* %1, align 2
  br label %18

18:                                               ; preds = %4, %8, %16
  %19 = select i1 %5, i64 2, i64 1
  br label %20

20:                                               ; preds = %2, %18
  %21 = phi i64 [ %19, %18 ], [ 0, %2 ]
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5SkUTF11UTF8ToUTF16EPtiPKcm(i16*, i32, i8*, i64) local_unnamed_addr #3 {
  %5 = alloca [2 x i16], align 2
  %6 = icmp eq i16* %0, null
  %7 = sext i32 %1 to i64
  %8 = select i1 %6, i64 0, i64 %7
  %9 = getelementptr inbounds i16, i16* %0, i64 %8
  %10 = getelementptr inbounds i8, i8* %2, i64 %3
  %11 = icmp sgt i64 %3, 0
  br i1 %11, label %12, label %100

12:                                               ; preds = %4
  %13 = icmp ne i8* %10, null
  %14 = bitcast [2 x i16]* %5 to i8*
  %15 = getelementptr inbounds [2 x i16], [2 x i16]* %5, i64 0, i64 0
  %16 = getelementptr inbounds [2 x i16], [2 x i16]* %5, i64 0, i64 1
  %17 = getelementptr inbounds [2 x i16], [2 x i16]* %5, i64 0, i64 1
  br label %18

18:                                               ; preds = %12, %97
  %19 = phi i32 [ 0, %12 ], [ %85, %97 ]
  %20 = phi i16* [ %0, %12 ], [ %98, %97 ]
  %21 = phi i8* [ %2, %12 ], [ %82, %97 ]
  %22 = icmp ne i8* %21, null
  %23 = and i1 %13, %22
  br i1 %23, label %24, label %100

24:                                               ; preds = %18
  %25 = load i8, i8* %21, align 1
  %26 = zext i8 %25 to i32
  %27 = icmp sgt i8 %25, -1
  br i1 %27, label %28, label %30

28:                                               ; preds = %24
  %29 = getelementptr inbounds i8, i8* %21, i64 1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #5
  store i16 -21846, i16* %15, align 2
  store i16 -21846, i16* %16, align 2
  br label %76

30:                                               ; preds = %24
  %31 = icmp ult i8 %25, -64
  br i1 %31, label %100, label %32

32:                                               ; preds = %30
  %33 = icmp ugt i8 %25, -12
  %34 = and i32 %26, 254
  %35 = icmp eq i32 %34, 192
  %36 = or i1 %33, %35
  br i1 %36, label %100, label %37

37:                                               ; preds = %32
  %38 = shl i32 %26, 25
  br label %39

39:                                               ; preds = %51, %37
  %40 = phi i8* [ %21, %37 ], [ %44, %51 ]
  %41 = phi i32 [ %26, %37 ], [ %55, %51 ]
  %42 = phi i32 [ %38, %37 ], [ %57, %51 ]
  %43 = phi i32 [ -64, %37 ], [ %56, %51 ]
  %44 = getelementptr inbounds i8, i8* %40, i64 1
  %45 = icmp ult i8* %44, %10
  br i1 %45, label %46, label %100

46:                                               ; preds = %39
  %47 = load i8, i8* %44, align 1
  %48 = icmp slt i8 %47, 0
  %49 = icmp ult i8 %47, -64
  %50 = and i1 %48, %49
  br i1 %50, label %51, label %100

51:                                               ; preds = %46
  %52 = shl i32 %41, 6
  %53 = and i8 %47, 63
  %54 = zext i8 %53 to i32
  %55 = or i32 %52, %54
  %56 = shl i32 %43, 5
  %57 = shl i32 %42, 1
  %58 = icmp slt i32 %57, 0
  br i1 %58, label %39, label %59

59:                                               ; preds = %51
  %60 = xor i32 %56, -1
  %61 = and i32 %55, %60
  %62 = getelementptr inbounds i8, i8* %40, i64 2
  %63 = icmp slt i32 %61, 0
  br i1 %63, label %100, label %64

64:                                               ; preds = %59
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #5
  store i16 -21846, i16* %15, align 2
  store i16 -21846, i16* %16, align 2
  %65 = icmp ugt i32 %61, 1114111
  br i1 %65, label %66, label %67

66:                                               ; preds = %64
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #5
  br label %100

67:                                               ; preds = %64
  %68 = icmp sgt i32 %61, 65535
  br i1 %68, label %69, label %76

69:                                               ; preds = %67
  %70 = lshr i32 %61, 10
  %71 = trunc i32 %70 to i16
  %72 = add nuw nsw i16 %71, -10304
  store i16 %72, i16* %15, align 2
  %73 = trunc i32 %61 to i16
  %74 = and i16 %73, 1023
  %75 = or i16 %74, -9216
  store i16 %75, i16* %16, align 2
  br label %80

76:                                               ; preds = %28, %67
  %77 = phi i8* [ %29, %28 ], [ %62, %67 ]
  %78 = phi i32 [ %26, %28 ], [ %61, %67 ]
  %79 = trunc i32 %78 to i16
  store i16 %79, i16* %15, align 2
  br label %80

80:                                               ; preds = %76, %69
  %81 = phi i64 [ 1, %76 ], [ 2, %69 ]
  %82 = phi i8* [ %77, %76 ], [ %62, %69 ]
  %83 = phi i16 [ %79, %76 ], [ %72, %69 ]
  %84 = trunc i64 %81 to i32
  %85 = add i32 %19, %84
  %86 = icmp eq i16* %20, null
  br i1 %86, label %97, label %87

87:                                               ; preds = %80
  %88 = icmp ult i16* %20, %9
  br i1 %88, label %89, label %97

89:                                               ; preds = %87
  %90 = getelementptr inbounds i16, i16* %20, i64 1
  store i16 %83, i16* %20, align 2
  %91 = icmp ult i16* %90, %9
  %92 = icmp ne i64 %81, 1
  %93 = and i1 %91, %92
  br i1 %93, label %94, label %97

94:                                               ; preds = %89
  %95 = load i16, i16* %17, align 2
  %96 = getelementptr inbounds i16, i16* %20, i64 2
  store i16 %95, i16* %90, align 2
  br label %97

97:                                               ; preds = %94, %89, %87, %80
  %98 = phi i16* [ null, %80 ], [ %20, %87 ], [ %90, %89 ], [ %96, %94 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #5
  %99 = icmp ult i8* %82, %10
  br i1 %99, label %18, label %100

100:                                              ; preds = %97, %59, %18, %32, %30, %46, %39, %4, %66
  %101 = phi i32 [ -1, %66 ], [ 0, %4 ], [ -1, %39 ], [ -1, %46 ], [ %85, %97 ], [ -1, %59 ], [ -1, %18 ], [ -1, %32 ], [ -1, %30 ]
  ret i32 %101
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5SkUTF11UTF16ToUTF8EPciPKtm(i8*, i32, i16*, i64) local_unnamed_addr #3 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  %7 = ptrtoint i32* %5 to i64
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = bitcast i32* %8 to [4 x i8]*
  %11 = icmp eq i8* %0, null
  %12 = sext i32 %1 to i64
  %13 = select i1 %11, i64 0, i64 %12
  %14 = getelementptr inbounds i8, i8* %0, i64 %13
  %15 = getelementptr inbounds i16, i16* %2, i64 %3
  %16 = icmp sgt i64 %3, 0
  br i1 %16, label %17, label %324

17:                                               ; preds = %4
  %18 = icmp eq i16* %15, null
  %19 = bitcast i32* %5 to [4 x i8]*
  %20 = add nsw i64 %13, -1
  %21 = getelementptr i8, i8* %0, i64 %20
  %22 = add nsw i64 %13, -1
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = getelementptr inbounds i8, i8* %9, i64 1
  %25 = getelementptr inbounds i8, i8* %6, i64 1
  %26 = getelementptr i8, i8* %9, i64 %7
  br label %27

27:                                               ; preds = %17, %321
  %28 = phi i32 [ 0, %17 ], [ %197, %321 ]
  %29 = phi i8* [ %0, %17 ], [ %322, %321 ]
  %30 = phi i16* [ %2, %17 ], [ %62, %321 ]
  %31 = ptrtoint i8* %29 to i64
  br i1 %18, label %324, label %32

32:                                               ; preds = %27
  %33 = icmp eq i16* %30, null
  %34 = getelementptr inbounds i16, i16* %30, i64 1
  %35 = icmp ugt i16* %34, %15
  %36 = or i1 %33, %35
  br i1 %36, label %324, label %37

37:                                               ; preds = %32
  %38 = ptrtoint i16* %30 to i64
  %39 = and i64 %38, 1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %324

41:                                               ; preds = %37
  %42 = load i16, i16* %30, align 2
  %43 = zext i16 %42 to i32
  %44 = and i16 %42, -1024
  switch i16 %44, label %45 [
    i16 -9216, label %324
    i16 -10240, label %46
  ]

45:                                               ; preds = %41
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  store i32 -1431655766, i32* %8, align 4
  br label %61

46:                                               ; preds = %41
  %47 = getelementptr inbounds i16, i16* %30, i64 2
  %48 = icmp ugt i16* %47, %15
  br i1 %48, label %324, label %49

49:                                               ; preds = %46
  %50 = load i16, i16* %34, align 2
  %51 = and i16 %50, -1024
  %52 = icmp eq i16 %51, -9216
  br i1 %52, label %53, label %324

53:                                               ; preds = %49
  %54 = shl nuw nsw i32 %43, 10
  %55 = zext i16 %50 to i32
  %56 = add nsw i32 %54, -56613888
  %57 = add nsw i32 %56, %55
  %58 = icmp slt i32 %57, 0
  br i1 %58, label %324, label %59

59:                                               ; preds = %53
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %60 = icmp ugt i32 %57, 1114111
  store i32 -1431655766, i32* %8, align 4
  br i1 %60, label %320, label %61

61:                                               ; preds = %45, %59
  %62 = phi i16* [ %34, %45 ], [ %47, %59 ]
  %63 = phi i32 [ %43, %45 ], [ %57, %59 ]
  %64 = icmp slt i32 %63, 128
  br i1 %64, label %65, label %67

65:                                               ; preds = %61
  %66 = trunc i32 %63 to i8
  store i8 %66, i8* %9, align 4
  br label %194

67:                                               ; preds = %61
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  store i32 -1431655766, i32* %5, align 4
  br label %68

68:                                               ; preds = %68, %67
  %69 = phi i64 [ 1, %67 ], [ %77, %68 ]
  %70 = phi i8* [ %6, %67 ], [ %75, %68 ]
  %71 = phi i32 [ %63, %67 ], [ %76, %68 ]
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 63
  %74 = or i8 %73, -128
  %75 = getelementptr inbounds i8, i8* %70, i64 1
  store i8 %74, i8* %70, align 1
  %76 = ashr i32 %71, 6
  %77 = add i64 %69, 1
  %78 = trunc i64 %77 to i32
  %79 = lshr i32 127, %78
  %80 = icmp sgt i32 %76, %79
  br i1 %80, label %68, label %81

81:                                               ; preds = %68
  %82 = trunc i64 %77 to i32
  %83 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 %77
  %84 = getelementptr inbounds [4 x i8], [4 x i8]* %19, i64 0, i64 %69
  %85 = icmp sgt i64 %69, 0
  br i1 %85, label %86, label %187

86:                                               ; preds = %81
  %87 = getelementptr i8, i8* %6, i64 %69
  %88 = icmp ugt i8* %87, %25
  %89 = select i1 %88, i8* %87, i8* %25
  %90 = ptrtoint i8* %89 to i64
  %91 = sub i64 %90, %7
  %92 = icmp ult i64 %91, 16
  br i1 %92, label %177, label %93

93:                                               ; preds = %86
  %94 = getelementptr i8, i8* %6, i64 %69
  %95 = icmp ugt i8* %94, %25
  %96 = select i1 %95, i8* %94, i8* %25
  %97 = ptrtoint i8* %96 to i64
  %98 = sub i64 %77, %97
  %99 = getelementptr i8, i8* %26, i64 %98
  %100 = getelementptr i8, i8* %9, i64 %77
  %101 = icmp ult i8* %99, %96
  %102 = icmp ugt i8* %100, %6
  %103 = and i1 %101, %102
  br i1 %103, label %177, label %104

104:                                              ; preds = %93
  %105 = and i64 %91, -16
  %106 = getelementptr i8, i8* %6, i64 %105
  %107 = sub i64 0, %105
  %108 = getelementptr i8, i8* %83, i64 %107
  %109 = add i64 %105, -16
  %110 = lshr exact i64 %109, 4
  %111 = add nuw nsw i64 %110, 1
  %112 = and i64 %111, 1
  %113 = icmp eq i64 %109, 0
  br i1 %113, label %155, label %114

114:                                              ; preds = %104
  %115 = sub nuw nsw i64 %111, %112
  %116 = getelementptr [4 x i8], [4 x i8]* %10, i64 0, i64 %69
  %117 = getelementptr [4 x i8], [4 x i8]* %10, i64 0, i64 %69
  br label %118

118:                                              ; preds = %118, %114
  %119 = phi i64 [ 0, %114 ], [ %152, %118 ]
  %120 = phi i64 [ %115, %114 ], [ %153, %118 ]
  %121 = getelementptr i8, i8* %6, i64 %119
  %122 = sub i64 0, %119
  %123 = bitcast i8* %121 to <8 x i8>*
  %124 = load <8 x i8>, <8 x i8>* %123, align 4, !alias.scope !10
  %125 = getelementptr i8, i8* %121, i64 8
  %126 = bitcast i8* %125 to <8 x i8>*
  %127 = load <8 x i8>, <8 x i8>* %126, align 4, !alias.scope !10
  %128 = getelementptr inbounds i8, i8* %116, i64 %122
  %129 = shufflevector <8 x i8> %124, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %130 = getelementptr inbounds i8, i8* %128, i64 -7
  %131 = bitcast i8* %130 to <8 x i8>*
  store <8 x i8> %129, <8 x i8>* %131, align 1, !alias.scope !13, !noalias !10
  %132 = shufflevector <8 x i8> %127, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %133 = getelementptr inbounds i8, i8* %128, i64 -8
  %134 = getelementptr inbounds i8, i8* %133, i64 -7
  %135 = bitcast i8* %134 to <8 x i8>*
  store <8 x i8> %132, <8 x i8>* %135, align 1, !alias.scope !13, !noalias !10
  %136 = or i64 %119, 16
  %137 = getelementptr i8, i8* %6, i64 %136
  %138 = sub nuw nsw i64 -16, %119
  %139 = bitcast i8* %137 to <8 x i8>*
  %140 = load <8 x i8>, <8 x i8>* %139, align 4, !alias.scope !10
  %141 = getelementptr i8, i8* %137, i64 8
  %142 = bitcast i8* %141 to <8 x i8>*
  %143 = load <8 x i8>, <8 x i8>* %142, align 4, !alias.scope !10
  %144 = getelementptr inbounds i8, i8* %117, i64 %138
  %145 = shufflevector <8 x i8> %140, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %146 = getelementptr inbounds i8, i8* %144, i64 -7
  %147 = bitcast i8* %146 to <8 x i8>*
  store <8 x i8> %145, <8 x i8>* %147, align 1, !alias.scope !13, !noalias !10
  %148 = shufflevector <8 x i8> %143, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %149 = getelementptr inbounds i8, i8* %144, i64 -8
  %150 = getelementptr inbounds i8, i8* %149, i64 -7
  %151 = bitcast i8* %150 to <8 x i8>*
  store <8 x i8> %148, <8 x i8>* %151, align 1, !alias.scope !13, !noalias !10
  %152 = add i64 %119, 32
  %153 = add i64 %120, -2
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %118, !llvm.loop !15

155:                                              ; preds = %118, %104
  %156 = phi i64 [ 0, %104 ], [ %152, %118 ]
  %157 = icmp eq i64 %112, 0
  br i1 %157, label %175, label %158

158:                                              ; preds = %155
  %159 = getelementptr i8, i8* %6, i64 %156
  %160 = sub i64 0, %156
  %161 = getelementptr [4 x i8], [4 x i8]* %10, i64 0, i64 %69
  %162 = bitcast i8* %159 to <8 x i8>*
  %163 = load <8 x i8>, <8 x i8>* %162, align 4, !alias.scope !10
  %164 = getelementptr i8, i8* %159, i64 8
  %165 = bitcast i8* %164 to <8 x i8>*
  %166 = load <8 x i8>, <8 x i8>* %165, align 4, !alias.scope !10
  %167 = getelementptr inbounds i8, i8* %161, i64 %160
  %168 = shufflevector <8 x i8> %163, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %169 = getelementptr inbounds i8, i8* %167, i64 -7
  %170 = bitcast i8* %169 to <8 x i8>*
  store <8 x i8> %168, <8 x i8>* %170, align 1, !alias.scope !13, !noalias !10
  %171 = shufflevector <8 x i8> %166, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %172 = getelementptr inbounds i8, i8* %167, i64 -8
  %173 = getelementptr inbounds i8, i8* %172, i64 -7
  %174 = bitcast i8* %173 to <8 x i8>*
  store <8 x i8> %171, <8 x i8>* %174, align 1, !alias.scope !13, !noalias !10
  br label %175

175:                                              ; preds = %155, %158
  %176 = icmp eq i64 %91, %105
  br i1 %176, label %187, label %177

177:                                              ; preds = %175, %93, %86
  %178 = phi i8* [ %6, %93 ], [ %6, %86 ], [ %106, %175 ]
  %179 = phi i8* [ %83, %93 ], [ %83, %86 ], [ %108, %175 ]
  br label %180

180:                                              ; preds = %177, %180
  %181 = phi i8* [ %183, %180 ], [ %178, %177 ]
  %182 = phi i8* [ %185, %180 ], [ %179, %177 ]
  %183 = getelementptr inbounds i8, i8* %181, i64 1
  %184 = load i8, i8* %181, align 1
  %185 = getelementptr inbounds i8, i8* %182, i64 -1
  store i8 %184, i8* %185, align 1
  %186 = icmp ult i8* %183, %84
  br i1 %186, label %180, label %187, !llvm.loop !16

187:                                              ; preds = %180, %175, %81
  %188 = phi i8* [ %83, %81 ], [ %108, %175 ], [ %185, %180 ]
  %189 = ashr i32 -256, %82
  %190 = or i32 %189, %76
  %191 = trunc i32 %190 to i8
  %192 = getelementptr inbounds i8, i8* %188, i64 -1
  store i8 %191, i8* %192, align 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  %193 = icmp eq i64 %77, 0
  br i1 %193, label %320, label %194

194:                                              ; preds = %65, %187
  %195 = phi i64 [ 1, %65 ], [ %77, %187 ]
  %196 = trunc i64 %195 to i32
  %197 = add i32 %28, %196
  %198 = icmp eq i8* %29, null
  br i1 %198, label %321, label %199

199:                                              ; preds = %194
  %200 = icmp ult i8* %29, %14
  br i1 %200, label %201, label %321

201:                                              ; preds = %199
  %202 = sub i64 0, %31
  %203 = getelementptr i8, i8* %21, i64 %202
  %204 = ptrtoint i8* %203 to i64
  %205 = add i64 %195, -1
  %206 = icmp ugt i64 %205, %204
  %207 = select i1 %206, i64 %204, i64 %205
  %208 = add i64 %207, 1
  %209 = icmp ult i64 %208, 32
  br i1 %209, label %305, label %210

210:                                              ; preds = %201
  %211 = getelementptr i8, i8* %29, i64 1
  %212 = sub i64 0, %31
  %213 = getelementptr i8, i8* %23, i64 %212
  %214 = ptrtoint i8* %213 to i64
  %215 = add i64 %195, -1
  %216 = icmp ugt i64 %215, %214
  %217 = select i1 %216, i64 %214, i64 %215
  %218 = getelementptr i8, i8* %211, i64 %217
  %219 = getelementptr i8, i8* %24, i64 %217
  %220 = icmp ult i8* %29, %219
  %221 = icmp ugt i8* %218, %9
  %222 = and i1 %220, %221
  br i1 %222, label %305, label %223

223:                                              ; preds = %210
  %224 = and i64 %208, -32
  %225 = getelementptr i8, i8* %9, i64 %224
  %226 = sub i64 %195, %224
  %227 = getelementptr i8, i8* %29, i64 %224
  %228 = add i64 %224, -32
  %229 = lshr exact i64 %228, 5
  %230 = add nuw nsw i64 %229, 1
  %231 = and i64 %230, 3
  %232 = icmp ult i64 %228, 96
  br i1 %232, label %284, label %233

233:                                              ; preds = %223
  %234 = sub nsw i64 %230, %231
  br label %235

235:                                              ; preds = %235, %233
  %236 = phi i64 [ 0, %233 ], [ %281, %235 ]
  %237 = phi i64 [ %234, %233 ], [ %282, %235 ]
  %238 = getelementptr i8, i8* %9, i64 %236
  %239 = getelementptr i8, i8* %29, i64 %236
  %240 = bitcast i8* %238 to <16 x i8>*
  %241 = load <16 x i8>, <16 x i8>* %240, align 4, !alias.scope !17
  %242 = getelementptr i8, i8* %238, i64 16
  %243 = bitcast i8* %242 to <16 x i8>*
  %244 = load <16 x i8>, <16 x i8>* %243, align 4, !alias.scope !17
  %245 = bitcast i8* %239 to <16 x i8>*
  store <16 x i8> %241, <16 x i8>* %245, align 1, !alias.scope !20, !noalias !17
  %246 = getelementptr i8, i8* %239, i64 16
  %247 = bitcast i8* %246 to <16 x i8>*
  store <16 x i8> %244, <16 x i8>* %247, align 1, !alias.scope !20, !noalias !17
  %248 = or i64 %236, 32
  %249 = getelementptr i8, i8* %9, i64 %248
  %250 = getelementptr i8, i8* %29, i64 %248
  %251 = bitcast i8* %249 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 4, !alias.scope !17
  %253 = getelementptr i8, i8* %249, i64 16
  %254 = bitcast i8* %253 to <16 x i8>*
  %255 = load <16 x i8>, <16 x i8>* %254, align 4, !alias.scope !17
  %256 = bitcast i8* %250 to <16 x i8>*
  store <16 x i8> %252, <16 x i8>* %256, align 1, !alias.scope !20, !noalias !17
  %257 = getelementptr i8, i8* %250, i64 16
  %258 = bitcast i8* %257 to <16 x i8>*
  store <16 x i8> %255, <16 x i8>* %258, align 1, !alias.scope !20, !noalias !17
  %259 = or i64 %236, 64
  %260 = getelementptr i8, i8* %9, i64 %259
  %261 = getelementptr i8, i8* %29, i64 %259
  %262 = bitcast i8* %260 to <16 x i8>*
  %263 = load <16 x i8>, <16 x i8>* %262, align 4, !alias.scope !17
  %264 = getelementptr i8, i8* %260, i64 16
  %265 = bitcast i8* %264 to <16 x i8>*
  %266 = load <16 x i8>, <16 x i8>* %265, align 4, !alias.scope !17
  %267 = bitcast i8* %261 to <16 x i8>*
  store <16 x i8> %263, <16 x i8>* %267, align 1, !alias.scope !20, !noalias !17
  %268 = getelementptr i8, i8* %261, i64 16
  %269 = bitcast i8* %268 to <16 x i8>*
  store <16 x i8> %266, <16 x i8>* %269, align 1, !alias.scope !20, !noalias !17
  %270 = or i64 %236, 96
  %271 = getelementptr i8, i8* %9, i64 %270
  %272 = getelementptr i8, i8* %29, i64 %270
  %273 = bitcast i8* %271 to <16 x i8>*
  %274 = load <16 x i8>, <16 x i8>* %273, align 4, !alias.scope !17
  %275 = getelementptr i8, i8* %271, i64 16
  %276 = bitcast i8* %275 to <16 x i8>*
  %277 = load <16 x i8>, <16 x i8>* %276, align 4, !alias.scope !17
  %278 = bitcast i8* %272 to <16 x i8>*
  store <16 x i8> %274, <16 x i8>* %278, align 1, !alias.scope !20, !noalias !17
  %279 = getelementptr i8, i8* %272, i64 16
  %280 = bitcast i8* %279 to <16 x i8>*
  store <16 x i8> %277, <16 x i8>* %280, align 1, !alias.scope !20, !noalias !17
  %281 = add i64 %236, 128
  %282 = add i64 %237, -4
  %283 = icmp eq i64 %282, 0
  br i1 %283, label %284, label %235, !llvm.loop !22

284:                                              ; preds = %235, %223
  %285 = phi i64 [ 0, %223 ], [ %281, %235 ]
  %286 = icmp eq i64 %231, 0
  br i1 %286, label %303, label %287

287:                                              ; preds = %284, %287
  %288 = phi i64 [ %300, %287 ], [ %285, %284 ]
  %289 = phi i64 [ %301, %287 ], [ %231, %284 ]
  %290 = getelementptr i8, i8* %9, i64 %288
  %291 = getelementptr i8, i8* %29, i64 %288
  %292 = bitcast i8* %290 to <16 x i8>*
  %293 = load <16 x i8>, <16 x i8>* %292, align 4, !alias.scope !17
  %294 = getelementptr i8, i8* %290, i64 16
  %295 = bitcast i8* %294 to <16 x i8>*
  %296 = load <16 x i8>, <16 x i8>* %295, align 4, !alias.scope !17
  %297 = bitcast i8* %291 to <16 x i8>*
  store <16 x i8> %293, <16 x i8>* %297, align 1, !alias.scope !20, !noalias !17
  %298 = getelementptr i8, i8* %291, i64 16
  %299 = bitcast i8* %298 to <16 x i8>*
  store <16 x i8> %296, <16 x i8>* %299, align 1, !alias.scope !20, !noalias !17
  %300 = add i64 %288, 32
  %301 = add i64 %289, -1
  %302 = icmp eq i64 %301, 0
  br i1 %302, label %303, label %287, !llvm.loop !23

303:                                              ; preds = %287, %284
  %304 = icmp eq i64 %208, %224
  br i1 %304, label %321, label %305

305:                                              ; preds = %303, %210, %201
  %306 = phi i8* [ %9, %210 ], [ %9, %201 ], [ %225, %303 ]
  %307 = phi i64 [ %195, %210 ], [ %195, %201 ], [ %226, %303 ]
  %308 = phi i8* [ %29, %210 ], [ %29, %201 ], [ %227, %303 ]
  br label %309

309:                                              ; preds = %305, %309
  %310 = phi i8* [ %313, %309 ], [ %306, %305 ]
  %311 = phi i64 [ %316, %309 ], [ %307, %305 ]
  %312 = phi i8* [ %315, %309 ], [ %308, %305 ]
  %313 = getelementptr inbounds i8, i8* %310, i64 1
  %314 = load i8, i8* %310, align 1
  %315 = getelementptr inbounds i8, i8* %312, i64 1
  store i8 %314, i8* %312, align 1
  %316 = add i64 %311, -1
  %317 = icmp ult i8* %315, %14
  %318 = icmp ne i64 %316, 0
  %319 = and i1 %317, %318
  br i1 %319, label %309, label %321, !llvm.loop !25

320:                                              ; preds = %187, %59
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  br label %324

321:                                              ; preds = %309, %303, %199, %194
  %322 = phi i8* [ null, %194 ], [ %29, %199 ], [ %227, %303 ], [ %315, %309 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  %323 = icmp ult i16* %62, %15
  br i1 %323, label %27, label %324

324:                                              ; preds = %321, %53, %37, %32, %41, %46, %49, %27, %4, %320
  %325 = phi i32 [ -1, %320 ], [ 0, %4 ], [ %197, %321 ], [ -1, %53 ], [ -1, %37 ], [ -1, %32 ], [ -1, %41 ], [ -1, %46 ], [ -1, %49 ], [ -1, %27 ]
  ret i32 %325
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !8}
!23 = distinct !{!23, !24}
!24 = !{!"llvm.loop.unroll.disable"}
!25 = distinct !{!25, !8}
