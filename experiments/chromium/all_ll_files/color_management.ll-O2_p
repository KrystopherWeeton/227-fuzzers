; ModuleID = '../../third_party/libjxl/src/lib/jxl/color_management.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/color_management.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i16*, i16*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i16* }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.23" }
%"struct.std::__1::__atomic_base.23" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.jxl::CIExy" = type { double, double }
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i8* }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { i64*, i64*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.jxl::PrimariesCIExy" = type { %"struct.jxl::CIExy", %"struct.jxl::CIExy", %"struct.jxl::CIExy" }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { float*, float*, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { float* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNK3jxl22CustomTransferFunction19GetTransferFunctionEv = comdat any

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [57 x i8] c"../../third_party/libjxl/src/lib/jxl/color_management.cc\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"N <= 4096\00", align 1
@.str.3 = private unnamed_addr constant [42 x i8] c"tf == ExtraTF::kPQ || tf == ExtraTF::kHLG\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"y >= 0.0\00", align 1
@.str.11 = private unnamed_addr constant [115 x i8] c"Copyright 2019 Google LLC, CC-BY-SA 3.0 Unported license(https://creativecommons.org/licenses/by-sa/3.0/legalcode)\00", align 1
@__const._ZN3jxl18MaybeCreateProfileERKNS_13ColorEncodingEPNS_11PaddedBytesE.d50 = private unnamed_addr constant [3 x float] [float 0x3FEEDAC040000000, float 1.000000e+00, float 0x3FEA659F20000000], align 4
@_ZN3jxlL36CreateTableCurveHighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"class.std::__1::vector"*, i32, i32)*] [void (%"class.std::__1::vector"*, i32, i32)* @_ZN3hwy13FunctionCacheINSt3__16vectorItNS1_9allocatorItEEEEJjN3jxl7ExtraTFEEE13ChooseAndCallIXadL_ZNS6_L36CreateTableCurveHighwayDispatchTableEEEEES5_jS7_, void (%"class.std::__1::vector"*, i32, i32)* null, void (%"class.std::__1::vector"*, i32, i32)* null, void (%"class.std::__1::vector"*, i32, i32)* null, void (%"class.std::__1::vector"*, i32, i32)* @_ZN3jxl6N_AVX316CreateTableCurveEjNS_7ExtraTFE, void (%"class.std::__1::vector"*, i32, i32)* @_ZN3jxl6N_AVX216CreateTableCurveEjNS_7ExtraTFE, void (%"class.std::__1::vector"*, i32, i32)* null, void (%"class.std::__1::vector"*, i32, i32)* @_ZN3jxl6N_SSE416CreateTableCurveEjNS_7ExtraTFE, void (%"class.std::__1::vector"*, i32, i32)* null, void (%"class.std::__1::vector"*, i32, i32)* null, void (%"class.std::__1::vector"*, i32, i32)* null, void (%"class.std::__1::vector"*, i32, i32)* @_ZN3jxl8N_SCALAR16CreateTableCurveEjNS_7ExtraTFE], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@.ref.tmp = private unnamed_addr constant [5 x float] [float 0x4003333340000000, float 0x3FEE54EDC0000000, float 0x3FAAB12320000000, float 0x3FB3D07220000000, float 0x3FA4B5DCC0000000], align 4
@.ref.tmp.29 = private unnamed_addr constant [5 x float] [float 0x4001C71C80000000, float 0x3FED1E0CA0000000, float 0x3FB70F9B60000000, float 0x3FCC71C720000000, float 0x3FB4BC6A80000000], align 4
@.ref.tmp.31 = private unnamed_addr constant [5 x float] [float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 4
@.ref.tmp.33 = private unnamed_addr constant [5 x float] [float 0x4004CCCCC0000000, float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 4
@.str.35 = private unnamed_addr constant [33 x i8] c"%s:%d: JXL_ABORT: Unknown TF %d\0A\00", align 1
@.str.40 = private unnamed_addr constant [62 x i8] c"../../third_party/libjxl/src/lib/jxl/transfer_functions-inl.h\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"s >= 0\00", align 1
@.str.49 = private unnamed_addr constant [57 x i8] c"../../third_party/libjxl/src/lib/jxl/base/padded_bytes.h\00", align 1
@.str.50 = private unnamed_addr constant [12 x i8] c"i <= size()\00", align 1
@.str.61 = private unnamed_addr constant [63 x i8] c"../../third_party/libjxl/src/lib/jxl/color_encoding_internal.h\00", align 1
@.str.65 = private unnamed_addr constant [11 x i8] c"!IsGamma()\00", align 1
@_ZZN3jxl12_GLOBAL__N_113ICCComputeMD5ERKNS_11PaddedBytesEPhE9sineparts = internal unnamed_addr constant [64 x i32] [i32 -680876936, i32 -389564586, i32 606105819, i32 -1044525330, i32 -176418897, i32 1200080426, i32 -1473231341, i32 -45705983, i32 1770035416, i32 -1958414417, i32 -42063, i32 -1990404162, i32 1804603682, i32 -40341101, i32 -1502002290, i32 1236535329, i32 -165796510, i32 -1069501632, i32 643717713, i32 -373897302, i32 -701558691, i32 38016083, i32 -660478335, i32 -405537848, i32 568446438, i32 -1019803690, i32 -187363961, i32 1163531501, i32 -1444681467, i32 -51403784, i32 1735328473, i32 -1926607734, i32 -378558, i32 -2022574463, i32 1839030562, i32 -35309556, i32 -1530992060, i32 1272893353, i32 -155497632, i32 -1094730640, i32 681279174, i32 -358537222, i32 -722521979, i32 76029189, i32 -640364487, i32 -421815835, i32 530742520, i32 -995338651, i32 -198630844, i32 1126891415, i32 -1416354905, i32 -57434055, i32 1700485571, i32 -1894986606, i32 -1051523, i32 -2054922799, i32 1873313359, i32 -30611744, i32 -1560198380, i32 1309151649, i32 -145523070, i32 -1120210379, i32 718787259, i32 -343485551], align 16
@_ZZN3jxl12_GLOBAL__N_113ICCComputeMD5ERKNS_11PaddedBytesEPhE5shift = internal unnamed_addr constant [64 x i32] [i32 7, i32 12, i32 17, i32 22, i32 7, i32 12, i32 17, i32 22, i32 7, i32 12, i32 17, i32 22, i32 7, i32 12, i32 17, i32 22, i32 5, i32 9, i32 14, i32 20, i32 5, i32 9, i32 14, i32 20, i32 5, i32 9, i32 14, i32 20, i32 5, i32 9, i32 14, i32 20, i32 4, i32 11, i32 16, i32 23, i32 4, i32 11, i32 16, i32 23, i32 4, i32 11, i32 16, i32 23, i32 4, i32 11, i32 16, i32 23, i32 6, i32 10, i32 15, i32 21, i32 6, i32 10, i32 15, i32 21, i32 6, i32 10, i32 15, i32 21, i32 6, i32 10, i32 15, i32 21], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE416CreateTableCurveEjNS_7ExtraTFE(%"class.std::__1::vector"* noalias nocapture sret, i32, i32) #0 {
  %4 = icmp ult i32 %1, 4097
  br i1 %4, label %8, label %5

5:                                                ; preds = %3
  %6 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0)) #13
  %7 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

8:                                                ; preds = %3
  %9 = icmp eq i32 %2, 2
  %10 = add i32 %2, -1
  %11 = icmp ult i32 %10, 2
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 56, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0)) #13
  %14 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

15:                                               ; preds = %8
  %16 = zext i32 %1 to i64
  %17 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #13
  %18 = icmp eq i32 %1, 0
  br i1 %18, label %98, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %22 = shl nuw nsw i64 %16, 1
  %23 = tail call i8* @_Znwm(i64 %22) #15
  %24 = bitcast i8* %23 to i16*
  %25 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %23, i8** %25, align 8
  %26 = getelementptr inbounds i16, i16* %24, i64 %16
  store i16* %26, i16** %20, align 8
  %27 = bitcast i16** %21 to i64*
  %28 = ptrtoint i8* %23 to i64
  %29 = add nsw i64 %16, -1
  %30 = getelementptr i16, i16* %24, i64 %29
  %31 = ptrtoint i16* %30 to i64
  %32 = sub i64 2, %28
  %33 = add i64 %32, %31
  %34 = and i64 %33, -2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %23, i8 0, i64 %34, i1 false) #13
  %35 = ptrtoint i16* %26 to i64
  store i64 %35, i64* %27, align 8
  %36 = add nsw i32 %1, -1
  %37 = uitofp i32 %36 to float
  br label %38

38:                                               ; preds = %87, %19
  %39 = phi i64 [ 0, %19 ], [ %96, %87 ]
  %40 = trunc i64 %39 to i32
  %41 = uitofp i32 %40 to float
  %42 = fdiv float %41, %37
  %43 = fpext float %42 to double
  br i1 %9, label %44, label %66

44:                                               ; preds = %38
  %45 = fmul double %43, 0x3FEEB851EB851EB8
  %46 = fadd double %45, 4.000000e-02
  %47 = fcmp oeq double %46, 0.000000e+00
  br i1 %47, label %87, label %48

48:                                               ; preds = %44
  %49 = fcmp ugt double %46, 5.000000e-01
  br i1 %49, label %54, label %50

50:                                               ; preds = %48
  %51 = fmul double %46, %46
  %52 = fmul double %51, 0x3FD5555555555555
  %53 = fptrunc double %46 to float
  br label %77

54:                                               ; preds = %48
  %55 = fadd double %46, 0xBFE1EAC9E7FC395D
  %56 = fmul double %55, 0x40165E05183E19B4
  %57 = tail call double @exp(double %56) #13
  %58 = fadd double %57, 0x3FD23803FD659BE6
  %59 = fmul double %58, 0x3FB5555555555555
  %60 = fcmp ult double %59, 0.000000e+00
  br i1 %60, label %61, label %64

61:                                               ; preds = %54
  %62 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.40, i64 0, i64 0), i32 105, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i64 0, i64 0)) #13
  %63 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

64:                                               ; preds = %54
  %65 = fptrunc double %46 to float
  br label %77

66:                                               ; preds = %38
  %67 = fcmp oeq float %42, 0.000000e+00
  br i1 %67, label %87, label %68

68:                                               ; preds = %66
  %69 = tail call double @pow(double %43, double 0x3F89F9B5860989B1) #13
  %70 = fadd double %69, 0xBFEAC00000000000
  %71 = fcmp olt double %70, 0.000000e+00
  %72 = select i1 %71, double 0.000000e+00, double %70
  %73 = fmul double %69, 1.868750e+01
  %74 = fsub double 0x4032DA0000000000, %73
  %75 = fdiv double %72, %74
  %76 = tail call double @pow(double %75, double 0x40191C0D56E7162B) #13
  br label %77

77:                                               ; preds = %50, %64, %68
  %78 = phi float [ %53, %50 ], [ %65, %64 ], [ %42, %68 ]
  %79 = phi double [ %52, %50 ], [ %59, %64 ], [ %76, %68 ]
  %80 = fptrunc double %79 to float
  %81 = tail call float @llvm.copysign.f32(float %80, float %78) #13
  %82 = fpext float %81 to double
  %83 = fcmp ult float %81, 0.000000e+00
  br i1 %83, label %84, label %87

84:                                               ; preds = %77
  %85 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 65, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0)) #13
  %86 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

87:                                               ; preds = %66, %44, %77
  %88 = phi double [ %82, %77 ], [ 0.000000e+00, %44 ], [ 0.000000e+00, %66 ]
  %89 = fcmp ogt double %88, 1.000000e+00
  %90 = select i1 %89, double 1.000000e+00, double %88
  %91 = fmul double %90, 6.553500e+04
  %92 = fptrunc double %91 to float
  %93 = tail call float @llvm.round.f32(float %92)
  %94 = fptoui float %93 to i16
  %95 = getelementptr inbounds i16, i16* %24, i64 %39
  store i16 %94, i16* %95, align 2
  %96 = add nuw nsw i64 %39, 1
  %97 = icmp eq i64 %96, %16
  br i1 %97, label %98, label %38

98:                                               ; preds = %87, %15
  ret void
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX216CreateTableCurveEjNS_7ExtraTFE(%"class.std::__1::vector"* noalias nocapture sret, i32, i32) #5 {
  %4 = icmp ult i32 %1, 4097
  br i1 %4, label %8, label %5

5:                                                ; preds = %3
  %6 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0)) #13
  %7 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

8:                                                ; preds = %3
  %9 = icmp eq i32 %2, 2
  %10 = add i32 %2, -1
  %11 = icmp ult i32 %10, 2
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 56, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0)) #13
  %14 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

15:                                               ; preds = %8
  %16 = zext i32 %1 to i64
  %17 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #13
  %18 = icmp eq i32 %1, 0
  br i1 %18, label %98, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %22 = shl nuw nsw i64 %16, 1
  %23 = tail call i8* @_Znwm(i64 %22) #15
  %24 = bitcast i8* %23 to i16*
  %25 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %23, i8** %25, align 8
  %26 = getelementptr inbounds i16, i16* %24, i64 %16
  store i16* %26, i16** %20, align 8
  %27 = bitcast i16** %21 to i64*
  %28 = ptrtoint i8* %23 to i64
  %29 = add nsw i64 %16, -1
  %30 = getelementptr i16, i16* %24, i64 %29
  %31 = ptrtoint i16* %30 to i64
  %32 = sub i64 2, %28
  %33 = add i64 %32, %31
  %34 = and i64 %33, -2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %23, i8 0, i64 %34, i1 false) #13
  %35 = ptrtoint i16* %26 to i64
  store i64 %35, i64* %27, align 8
  %36 = add nsw i32 %1, -1
  %37 = uitofp i32 %36 to float
  br label %38

38:                                               ; preds = %87, %19
  %39 = phi i64 [ 0, %19 ], [ %96, %87 ]
  %40 = trunc i64 %39 to i32
  %41 = uitofp i32 %40 to float
  %42 = fdiv float %41, %37
  %43 = fpext float %42 to double
  br i1 %9, label %44, label %66

44:                                               ; preds = %38
  %45 = fmul double %43, 0x3FEEB851EB851EB8
  %46 = fadd double %45, 4.000000e-02
  %47 = fcmp oeq double %46, 0.000000e+00
  br i1 %47, label %87, label %48

48:                                               ; preds = %44
  %49 = fcmp ugt double %46, 5.000000e-01
  br i1 %49, label %54, label %50

50:                                               ; preds = %48
  %51 = fmul double %46, %46
  %52 = fmul double %51, 0x3FD5555555555555
  %53 = fptrunc double %46 to float
  br label %77

54:                                               ; preds = %48
  %55 = fadd double %46, 0xBFE1EAC9E7FC395D
  %56 = fmul double %55, 0x40165E05183E19B4
  %57 = tail call double @exp(double %56) #13
  %58 = fadd double %57, 0x3FD23803FD659BE6
  %59 = fmul double %58, 0x3FB5555555555555
  %60 = fcmp ult double %59, 0.000000e+00
  br i1 %60, label %61, label %64

61:                                               ; preds = %54
  %62 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.40, i64 0, i64 0), i32 105, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i64 0, i64 0)) #13
  %63 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

64:                                               ; preds = %54
  %65 = fptrunc double %46 to float
  br label %77

66:                                               ; preds = %38
  %67 = fcmp oeq float %42, 0.000000e+00
  br i1 %67, label %87, label %68

68:                                               ; preds = %66
  %69 = tail call double @pow(double %43, double 0x3F89F9B5860989B1) #13
  %70 = fadd double %69, 0xBFEAC00000000000
  %71 = fcmp olt double %70, 0.000000e+00
  %72 = select i1 %71, double 0.000000e+00, double %70
  %73 = fmul double %69, 1.868750e+01
  %74 = fsub double 0x4032DA0000000000, %73
  %75 = fdiv double %72, %74
  %76 = tail call double @pow(double %75, double 0x40191C0D56E7162B) #13
  br label %77

77:                                               ; preds = %50, %64, %68
  %78 = phi float [ %53, %50 ], [ %65, %64 ], [ %42, %68 ]
  %79 = phi double [ %52, %50 ], [ %59, %64 ], [ %76, %68 ]
  %80 = fptrunc double %79 to float
  %81 = tail call float @llvm.copysign.f32(float %80, float %78) #13
  %82 = fpext float %81 to double
  %83 = fcmp ult float %81, 0.000000e+00
  br i1 %83, label %84, label %87

84:                                               ; preds = %77
  %85 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 65, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0)) #13
  %86 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

87:                                               ; preds = %66, %44, %77
  %88 = phi double [ %82, %77 ], [ 0.000000e+00, %44 ], [ 0.000000e+00, %66 ]
  %89 = fcmp ogt double %88, 1.000000e+00
  %90 = select i1 %89, double 1.000000e+00, double %88
  %91 = fmul double %90, 6.553500e+04
  %92 = fptrunc double %91 to float
  %93 = tail call float @llvm.round.f32(float %92)
  %94 = fptoui float %93 to i16
  %95 = getelementptr inbounds i16, i16* %24, i64 %39
  store i16 %94, i16* %95, align 2
  %96 = add nuw nsw i64 %39, 1
  %97 = icmp eq i64 %96, %16
  br i1 %97, label %98, label %38

98:                                               ; preds = %87, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX316CreateTableCurveEjNS_7ExtraTFE(%"class.std::__1::vector"* noalias nocapture sret, i32, i32) #6 {
  %4 = icmp ult i32 %1, 4097
  br i1 %4, label %8, label %5

5:                                                ; preds = %3
  %6 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0)) #13
  %7 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

8:                                                ; preds = %3
  %9 = icmp eq i32 %2, 2
  %10 = add i32 %2, -1
  %11 = icmp ult i32 %10, 2
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 56, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0)) #13
  %14 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

15:                                               ; preds = %8
  %16 = zext i32 %1 to i64
  %17 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #13
  %18 = icmp eq i32 %1, 0
  br i1 %18, label %98, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %22 = shl nuw nsw i64 %16, 1
  %23 = tail call i8* @_Znwm(i64 %22) #15
  %24 = bitcast i8* %23 to i16*
  %25 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %23, i8** %25, align 8
  %26 = getelementptr inbounds i16, i16* %24, i64 %16
  store i16* %26, i16** %20, align 8
  %27 = bitcast i16** %21 to i64*
  %28 = ptrtoint i8* %23 to i64
  %29 = add nsw i64 %16, -1
  %30 = getelementptr i16, i16* %24, i64 %29
  %31 = ptrtoint i16* %30 to i64
  %32 = sub i64 2, %28
  %33 = add i64 %32, %31
  %34 = and i64 %33, -2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %23, i8 0, i64 %34, i1 false) #13
  %35 = ptrtoint i16* %26 to i64
  store i64 %35, i64* %27, align 8
  %36 = add nsw i32 %1, -1
  %37 = uitofp i32 %36 to float
  br label %38

38:                                               ; preds = %87, %19
  %39 = phi i64 [ 0, %19 ], [ %96, %87 ]
  %40 = trunc i64 %39 to i32
  %41 = uitofp i32 %40 to float
  %42 = fdiv float %41, %37
  %43 = fpext float %42 to double
  br i1 %9, label %44, label %66

44:                                               ; preds = %38
  %45 = fmul double %43, 0x3FEEB851EB851EB8
  %46 = fadd double %45, 4.000000e-02
  %47 = fcmp oeq double %46, 0.000000e+00
  br i1 %47, label %87, label %48

48:                                               ; preds = %44
  %49 = fcmp ugt double %46, 5.000000e-01
  br i1 %49, label %54, label %50

50:                                               ; preds = %48
  %51 = fmul double %46, %46
  %52 = fmul double %51, 0x3FD5555555555555
  %53 = fptrunc double %46 to float
  br label %77

54:                                               ; preds = %48
  %55 = fadd double %46, 0xBFE1EAC9E7FC395D
  %56 = fmul double %55, 0x40165E05183E19B4
  %57 = tail call double @exp(double %56) #13
  %58 = fadd double %57, 0x3FD23803FD659BE6
  %59 = fmul double %58, 0x3FB5555555555555
  %60 = fcmp ult double %59, 0.000000e+00
  br i1 %60, label %61, label %64

61:                                               ; preds = %54
  %62 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.40, i64 0, i64 0), i32 105, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i64 0, i64 0)) #13
  %63 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

64:                                               ; preds = %54
  %65 = fptrunc double %46 to float
  br label %77

66:                                               ; preds = %38
  %67 = fcmp oeq float %42, 0.000000e+00
  br i1 %67, label %87, label %68

68:                                               ; preds = %66
  %69 = tail call double @pow(double %43, double 0x3F89F9B5860989B1) #13
  %70 = fadd double %69, 0xBFEAC00000000000
  %71 = fcmp olt double %70, 0.000000e+00
  %72 = select i1 %71, double 0.000000e+00, double %70
  %73 = fmul double %69, 1.868750e+01
  %74 = fsub double 0x4032DA0000000000, %73
  %75 = fdiv double %72, %74
  %76 = tail call double @pow(double %75, double 0x40191C0D56E7162B) #13
  br label %77

77:                                               ; preds = %50, %64, %68
  %78 = phi float [ %53, %50 ], [ %65, %64 ], [ %42, %68 ]
  %79 = phi double [ %52, %50 ], [ %59, %64 ], [ %76, %68 ]
  %80 = fptrunc double %79 to float
  %81 = tail call float @llvm.copysign.f32(float %80, float %78) #13
  %82 = fpext float %81 to double
  %83 = fcmp ult float %81, 0.000000e+00
  br i1 %83, label %84, label %87

84:                                               ; preds = %77
  %85 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 65, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0)) #13
  %86 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

87:                                               ; preds = %66, %44, %77
  %88 = phi double [ %82, %77 ], [ 0.000000e+00, %44 ], [ 0.000000e+00, %66 ]
  %89 = fcmp ogt double %88, 1.000000e+00
  %90 = select i1 %89, double 1.000000e+00, double %88
  %91 = fmul double %90, 6.553500e+04
  %92 = fptrunc double %91 to float
  %93 = tail call float @llvm.round.f32(float %92)
  %94 = fptoui float %93 to i16
  %95 = getelementptr inbounds i16, i16* %24, i64 %39
  store i16 %94, i16* %95, align 2
  %96 = add nuw nsw i64 %39, 1
  %97 = icmp eq i64 %96, %16
  br i1 %97, label %98, label %38

98:                                               ; preds = %87, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR16CreateTableCurveEjNS_7ExtraTFE(%"class.std::__1::vector"* noalias nocapture sret, i32, i32) #7 {
  %4 = icmp ult i32 %1, 4097
  br i1 %4, label %8, label %5

5:                                                ; preds = %3
  %6 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0)) #13
  %7 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

8:                                                ; preds = %3
  %9 = icmp eq i32 %2, 2
  %10 = add i32 %2, -1
  %11 = icmp ult i32 %10, 2
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 56, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0)) #13
  %14 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

15:                                               ; preds = %8
  %16 = zext i32 %1 to i64
  %17 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #13
  %18 = icmp eq i32 %1, 0
  br i1 %18, label %98, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %22 = shl nuw nsw i64 %16, 1
  %23 = tail call i8* @_Znwm(i64 %22) #15
  %24 = bitcast i8* %23 to i16*
  %25 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %23, i8** %25, align 8
  %26 = getelementptr inbounds i16, i16* %24, i64 %16
  store i16* %26, i16** %20, align 8
  %27 = bitcast i16** %21 to i64*
  %28 = ptrtoint i8* %23 to i64
  %29 = add nsw i64 %16, -1
  %30 = getelementptr i16, i16* %24, i64 %29
  %31 = ptrtoint i16* %30 to i64
  %32 = sub i64 2, %28
  %33 = add i64 %32, %31
  %34 = and i64 %33, -2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %23, i8 0, i64 %34, i1 false) #13
  %35 = ptrtoint i16* %26 to i64
  store i64 %35, i64* %27, align 8
  %36 = add nsw i32 %1, -1
  %37 = uitofp i32 %36 to float
  br label %38

38:                                               ; preds = %87, %19
  %39 = phi i64 [ 0, %19 ], [ %96, %87 ]
  %40 = trunc i64 %39 to i32
  %41 = uitofp i32 %40 to float
  %42 = fdiv float %41, %37
  %43 = fpext float %42 to double
  br i1 %9, label %44, label %66

44:                                               ; preds = %38
  %45 = fmul double %43, 0x3FEEB851EB851EB8
  %46 = fadd double %45, 4.000000e-02
  %47 = fcmp oeq double %46, 0.000000e+00
  br i1 %47, label %87, label %48

48:                                               ; preds = %44
  %49 = fcmp ugt double %46, 5.000000e-01
  br i1 %49, label %54, label %50

50:                                               ; preds = %48
  %51 = fmul double %46, %46
  %52 = fmul double %51, 0x3FD5555555555555
  %53 = fptrunc double %46 to float
  br label %77

54:                                               ; preds = %48
  %55 = fadd double %46, 0xBFE1EAC9E7FC395D
  %56 = fmul double %55, 0x40165E05183E19B4
  %57 = tail call double @exp(double %56) #13
  %58 = fadd double %57, 0x3FD23803FD659BE6
  %59 = fmul double %58, 0x3FB5555555555555
  %60 = fcmp ult double %59, 0.000000e+00
  br i1 %60, label %61, label %64

61:                                               ; preds = %54
  %62 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.40, i64 0, i64 0), i32 105, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i64 0, i64 0)) #13
  %63 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

64:                                               ; preds = %54
  %65 = fptrunc double %46 to float
  br label %77

66:                                               ; preds = %38
  %67 = fcmp oeq float %42, 0.000000e+00
  br i1 %67, label %87, label %68

68:                                               ; preds = %66
  %69 = tail call double @pow(double %43, double 0x3F89F9B5860989B1) #13
  %70 = fadd double %69, 0xBFEAC00000000000
  %71 = fcmp olt double %70, 0.000000e+00
  %72 = select i1 %71, double 0.000000e+00, double %70
  %73 = fmul double %69, 1.868750e+01
  %74 = fsub double 0x4032DA0000000000, %73
  %75 = fdiv double %72, %74
  %76 = tail call double @pow(double %75, double 0x40191C0D56E7162B) #13
  br label %77

77:                                               ; preds = %50, %64, %68
  %78 = phi float [ %53, %50 ], [ %65, %64 ], [ %42, %68 ]
  %79 = phi double [ %52, %50 ], [ %59, %64 ], [ %76, %68 ]
  %80 = fptrunc double %79 to float
  %81 = tail call float @llvm.copysign.f32(float %80, float %78) #13
  %82 = fpext float %81 to double
  %83 = fcmp ult float %81, 0.000000e+00
  br i1 %83, label %84, label %87

84:                                               ; preds = %77
  %85 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 65, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0)) #13
  %86 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

87:                                               ; preds = %66, %44, %77
  %88 = phi double [ %82, %77 ], [ 0.000000e+00, %44 ], [ 0.000000e+00, %66 ]
  %89 = fcmp ogt double %88, 1.000000e+00
  %90 = select i1 %89, double 1.000000e+00, double %88
  %91 = fmul double %90, 6.553500e+04
  %92 = fptrunc double %91 to float
  %93 = tail call float @llvm.round.f32(float %92)
  %94 = fptoui float %93 to i16
  %95 = getelementptr inbounds i16, i16* %24, i64 %39
  store i16 %94, i16* %95, align 2
  %96 = add nuw nsw i64 %39, 1
  %97 = icmp eq i64 %96, %16
  br i1 %97, label %98, label %38

98:                                               ; preds = %87, %15
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @_ZN3jxl20CIEXYZFromWhiteCIExyERKNS_5CIExyEPf(%"struct.jxl::CIExy"* nocapture readonly dereferenceable(16), float* nocapture) local_unnamed_addr #8 {
  %3 = getelementptr inbounds %"struct.jxl::CIExy", %"struct.jxl::CIExy"* %0, i64 0, i32 1
  %4 = load double, double* %3, align 8
  %5 = tail call double @llvm.fabs.f64(double %4) #13
  %6 = fcmp olt double %5, 0x3D719799812DEA11
  br i1 %6, label %23, label %7

7:                                                ; preds = %2
  %8 = fdiv double 1.000000e+00, %4
  %9 = fptrunc double %8 to float
  %10 = getelementptr inbounds %"struct.jxl::CIExy", %"struct.jxl::CIExy"* %0, i64 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = fpext float %9 to double
  %13 = fmul double %11, %12
  %14 = fptrunc double %13 to float
  store float %14, float* %1, align 4
  %15 = getelementptr inbounds float, float* %1, i64 1
  store float 1.000000e+00, float* %15, align 4
  %16 = load double, double* %10, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double, double* %3, align 8
  %19 = fsub double %17, %18
  %20 = fmul double %19, %12
  %21 = fptrunc double %20 to float
  %22 = getelementptr inbounds float, float* %1, i64 2
  store float %21, float* %22, align 4
  br label %23

23:                                               ; preds = %2, %7
  %24 = phi i32 [ 0, %7 ], [ 1, %2 ]
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl18MaybeCreateProfileERKNS_13ColorEncodingEPNS_11PaddedBytesE(%"struct.jxl::ColorEncoding"* dereferenceable(152), %"class.jxl::PaddedBytes"* noalias) local_unnamed_addr #7 {
  %3 = alloca [9 x float], align 16
  %4 = alloca %"class.jxl::PaddedBytes", align 8
  %5 = alloca %"class.jxl::PaddedBytes", align 8
  %6 = alloca %"class.jxl::PaddedBytes", align 8
  %7 = alloca %"class.jxl::PaddedBytes", align 8
  %8 = alloca %"class.std::__1::vector.4", align 8
  %9 = alloca %"class.std::__1::basic_string", align 8
  %10 = alloca %"class.std::__1::basic_string", align 8
  %11 = alloca [3 x float], align 4
  %12 = alloca [3 x float], align 4
  %13 = alloca %"struct.jxl::PrimariesCIExy", align 8
  %14 = alloca [3 x float], align 4
  %15 = alloca [3 x float], align 4
  %16 = alloca [3 x float], align 4
  %17 = alloca %"class.std::__1::vector.16", align 8
  %18 = alloca %"class.std::__1::vector", align 8
  %19 = alloca %"class.std::__1::vector", align 8
  %20 = alloca %"class.std::__1::vector.16", align 8
  %21 = alloca %"class.std::__1::vector.16", align 8
  %22 = alloca %"class.std::__1::vector.16", align 8
  %23 = alloca %"class.std::__1::vector.16", align 8
  %24 = alloca %"class.jxl::PaddedBytes", align 8
  %25 = bitcast %"class.jxl::PaddedBytes"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #13
  %26 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %5, i64 0, i32 0
  %27 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %5, i64 0, i32 1
  %28 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 0, i64 24, i1 false) #13
  %29 = bitcast %"class.jxl::PaddedBytes"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %29) #13
  %30 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %6, i64 0, i32 0
  %31 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %6, i64 0, i32 1
  %32 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %6, i64 0, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 0, i64 24, i1 false) #13
  %33 = bitcast %"class.jxl::PaddedBytes"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %33) #13
  %34 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %7, i64 0, i32 0
  %35 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %7, i64 0, i32 1
  %36 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %7, i64 0, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 24, i1 false) #13
  %37 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 9
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, 3
  br i1 %39, label %2062, label %40

40:                                               ; preds = %2
  %41 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 4
  %42 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 4, i32 2
  %43 = load i8, i8* %42, align 4, !range !2
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %51

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 4, i32 4
  %47 = load i32, i32* %46, align 4
  %48 = icmp ne i32 %47, 2
  %49 = icmp ult i32 %38, 2
  %50 = and i1 %49, %48
  br i1 %50, label %53, label %2062

51:                                               ; preds = %40
  %52 = icmp ult i32 %38, 2
  br i1 %52, label %53, label %2062

53:                                               ; preds = %45, %51
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 128) #13
  %54 = load i8*, i8** %28, align 8, !alias.scope !3
  %55 = icmp eq i8* %54, null
  %56 = select i1 %55, i64 0, i64 128
  store i64 %56, i64* %26, align 8, !alias.scope !3
  br i1 %55, label %58, label %57

57:                                               ; preds = %53
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %54, i8 0, i64 %56, i1 false) #13
  br label %58

58:                                               ; preds = %53, %57
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 0, %"class.jxl::PaddedBytes"* nonnull %5) #13
  %59 = load i64, i64* %26, align 8, !alias.scope !6
  %60 = icmp ult i64 %59, 8
  br i1 %60, label %63, label %61

61:                                               ; preds = %58
  %62 = load i8*, i8** %28, align 8, !alias.scope !6
  br label %71

63:                                               ; preds = %58
  %64 = load i64, i64* %27, align 8, !alias.scope !6
  %65 = icmp ult i64 %64, 8
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 8) #13
  br label %67

67:                                               ; preds = %66, %63
  %68 = load i8*, i8** %28, align 8, !alias.scope !6
  %69 = icmp eq i8* %68, null
  %70 = select i1 %69, i64 0, i64 8
  store i64 %70, i64* %26, align 8, !alias.scope !6
  br label %71

71:                                               ; preds = %67, %61
  %72 = phi i8* [ %62, %61 ], [ %68, %67 ]
  %73 = getelementptr inbounds i8, i8* %72, i64 4
  %74 = bitcast i8* %73 to i32*
  store i32 543979626, i32* %74, align 1
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 70254592, i64 8, %"class.jxl::PaddedBytes"* nonnull %5) #13
  %75 = load i64, i64* %26, align 8, !alias.scope !9
  %76 = icmp ult i64 %75, 16
  br i1 %76, label %77, label %89

77:                                               ; preds = %71
  %78 = load i64, i64* %27, align 8, !alias.scope !14
  %79 = icmp ult i64 %78, 16
  br i1 %79, label %80, label %81

80:                                               ; preds = %77
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 16) #13
  br label %81

81:                                               ; preds = %77, %80
  %82 = load i8*, i8** %28, align 8, !alias.scope !14
  %83 = icmp eq i8* %82, null
  %84 = select i1 %83, i64 0, i64 16
  store i64 %84, i64* %26, align 8, !alias.scope !14
  %85 = getelementptr inbounds i8, i8* %82, i64 12
  %86 = bitcast i8* %85 to i32*
  store i32 1920233069, i32* %86, align 1
  %87 = load i32, i32* %37, align 8, !noalias !3
  %88 = icmp eq i32 %87, 1
  br label %96

89:                                               ; preds = %71
  %90 = load i8*, i8** %28, align 8, !alias.scope !14
  %91 = getelementptr inbounds i8, i8* %90, i64 12
  %92 = bitcast i8* %91 to i32*
  store i32 1920233069, i32* %92, align 1
  %93 = load i32, i32* %37, align 8, !noalias !3
  %94 = icmp eq i32 %93, 1
  %95 = icmp ult i64 %75, 20
  br i1 %95, label %96, label %108

96:                                               ; preds = %81, %89
  %97 = phi i1 [ %88, %81 ], [ %94, %89 ]
  %98 = load i64, i64* %27, align 8, !alias.scope !15
  %99 = icmp ult i64 %98, 20
  br i1 %99, label %100, label %101

100:                                              ; preds = %96
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 20) #13
  br label %101

101:                                              ; preds = %96, %100
  %102 = load i8*, i8** %28, align 8, !alias.scope !15
  %103 = icmp eq i8* %102, null
  %104 = select i1 %103, i64 0, i64 20
  store i64 %104, i64* %26, align 8, !alias.scope !15
  %105 = getelementptr inbounds i8, i8* %102, i64 16
  %106 = bitcast i8* %105 to i32*
  %107 = select i1 %97, i32 1497453127, i32 541214546
  store i32 %107, i32* %106, align 1
  br label %114

108:                                              ; preds = %89
  %109 = load i8*, i8** %28, align 8, !alias.scope !15
  %110 = getelementptr inbounds i8, i8* %109, i64 16
  %111 = bitcast i8* %110 to i32*
  %112 = select i1 %94, i32 1497453127, i32 541214546
  store i32 %112, i32* %111, align 1
  %113 = icmp ult i64 %75, 24
  br i1 %113, label %114, label %124

114:                                              ; preds = %101, %108
  %115 = load i64, i64* %27, align 8, !alias.scope !16
  %116 = icmp ult i64 %115, 24
  br i1 %116, label %117, label %118

117:                                              ; preds = %114
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 24) #13
  br label %118

118:                                              ; preds = %114, %117
  %119 = load i8*, i8** %28, align 8, !alias.scope !16
  %120 = icmp eq i8* %119, null
  %121 = select i1 %120, i64 0, i64 24
  store i64 %121, i64* %26, align 8, !alias.scope !16
  %122 = getelementptr inbounds i8, i8* %119, i64 20
  %123 = bitcast i8* %122 to i32*
  store i32 542792024, i32* %123, align 1
  br label %129

124:                                              ; preds = %108
  %125 = load i8*, i8** %28, align 8, !alias.scope !16
  %126 = getelementptr inbounds i8, i8* %125, i64 20
  %127 = bitcast i8* %126 to i32*
  store i32 542792024, i32* %127, align 1
  %128 = icmp ult i64 %75, 26
  br i1 %128, label %129, label %143

129:                                              ; preds = %118, %124
  %130 = load i64, i64* %27, align 8, !alias.scope !19
  %131 = icmp ult i64 %130, 26
  br i1 %131, label %132, label %133

132:                                              ; preds = %129
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 26) #13
  br label %133

133:                                              ; preds = %132, %129
  %134 = load i8*, i8** %28, align 8, !alias.scope !19
  %135 = icmp eq i8* %134, null
  %136 = select i1 %135, i64 0, i64 26
  store i64 %136, i64* %26, align 8, !alias.scope !19
  br i1 %135, label %140, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds i8, i8* %134, i64 24
  store i8 7, i8* %138, align 1
  %139 = getelementptr inbounds i8, i8* %134, i64 25
  store i8 -29, i8* %139, align 1
  br label %148

140:                                              ; preds = %133
  %141 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %142 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

143:                                              ; preds = %124
  %144 = load i8*, i8** %28, align 8, !alias.scope !3
  %145 = getelementptr inbounds i8, i8* %144, i64 24
  store i8 7, i8* %145, align 1
  %146 = getelementptr inbounds i8, i8* %144, i64 25
  store i8 -29, i8* %146, align 1
  %147 = icmp ult i64 %75, 28
  br i1 %147, label %148, label %164

148:                                              ; preds = %137, %143
  %149 = phi i8* [ %134, %137 ], [ %144, %143 ]
  %150 = load i64, i64* %27, align 8, !alias.scope !22
  %151 = icmp ult i64 %150, 28
  br i1 %151, label %152, label %154

152:                                              ; preds = %148
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 28) #13
  %153 = load i8*, i8** %28, align 8, !alias.scope !22
  br label %154

154:                                              ; preds = %152, %148
  %155 = phi i8* [ %153, %152 ], [ %149, %148 ]
  %156 = icmp eq i8* %155, null
  %157 = select i1 %156, i64 0, i64 28
  store i64 %157, i64* %26, align 8, !alias.scope !22
  br i1 %156, label %161, label %158

158:                                              ; preds = %154
  %159 = getelementptr inbounds i8, i8* %155, i64 26
  store i8 0, i8* %159, align 1
  %160 = getelementptr inbounds i8, i8* %155, i64 27
  store i8 12, i8* %160, align 1
  br label %168

161:                                              ; preds = %154
  %162 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %163 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

164:                                              ; preds = %143
  %165 = getelementptr inbounds i8, i8* %144, i64 26
  store i8 0, i8* %165, align 1
  %166 = getelementptr inbounds i8, i8* %144, i64 27
  store i8 12, i8* %166, align 1
  %167 = icmp ult i64 %75, 30
  br i1 %167, label %168, label %184

168:                                              ; preds = %158, %164
  %169 = phi i8* [ %155, %158 ], [ %144, %164 ]
  %170 = load i64, i64* %27, align 8, !alias.scope !25
  %171 = icmp ult i64 %170, 30
  br i1 %171, label %172, label %174

172:                                              ; preds = %168
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 30) #13
  %173 = load i8*, i8** %28, align 8, !alias.scope !25
  br label %174

174:                                              ; preds = %172, %168
  %175 = phi i8* [ %173, %172 ], [ %169, %168 ]
  %176 = icmp eq i8* %175, null
  %177 = select i1 %176, i64 0, i64 30
  store i64 %177, i64* %26, align 8, !alias.scope !25
  br i1 %176, label %181, label %178

178:                                              ; preds = %174
  %179 = getelementptr inbounds i8, i8* %175, i64 28
  store i8 0, i8* %179, align 1
  %180 = getelementptr inbounds i8, i8* %175, i64 29
  store i8 1, i8* %180, align 1
  br label %188

181:                                              ; preds = %174
  %182 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %183 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

184:                                              ; preds = %164
  %185 = getelementptr inbounds i8, i8* %144, i64 28
  store i8 0, i8* %185, align 1
  %186 = getelementptr inbounds i8, i8* %144, i64 29
  store i8 1, i8* %186, align 1
  %187 = icmp ult i64 %75, 32
  br i1 %187, label %188, label %204

188:                                              ; preds = %178, %184
  %189 = phi i8* [ %175, %178 ], [ %144, %184 ]
  %190 = load i64, i64* %27, align 8, !alias.scope !28
  %191 = icmp ult i64 %190, 32
  br i1 %191, label %192, label %194

192:                                              ; preds = %188
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 32) #13
  %193 = load i8*, i8** %28, align 8, !alias.scope !28
  br label %194

194:                                              ; preds = %192, %188
  %195 = phi i8* [ %193, %192 ], [ %189, %188 ]
  %196 = icmp eq i8* %195, null
  %197 = select i1 %196, i64 0, i64 32
  store i64 %197, i64* %26, align 8, !alias.scope !28
  br i1 %196, label %201, label %198

198:                                              ; preds = %194
  %199 = getelementptr inbounds i8, i8* %195, i64 30
  store i8 0, i8* %199, align 1
  %200 = getelementptr inbounds i8, i8* %195, i64 31
  store i8 0, i8* %200, align 1
  br label %208

201:                                              ; preds = %194
  %202 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %203 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

204:                                              ; preds = %184
  %205 = getelementptr inbounds i8, i8* %144, i64 30
  store i8 0, i8* %205, align 1
  %206 = getelementptr inbounds i8, i8* %144, i64 31
  store i8 0, i8* %206, align 1
  %207 = icmp ult i64 %75, 34
  br i1 %207, label %208, label %224

208:                                              ; preds = %198, %204
  %209 = phi i8* [ %195, %198 ], [ %144, %204 ]
  %210 = load i64, i64* %27, align 8, !alias.scope !31
  %211 = icmp ult i64 %210, 34
  br i1 %211, label %212, label %214

212:                                              ; preds = %208
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 34) #13
  %213 = load i8*, i8** %28, align 8, !alias.scope !31
  br label %214

214:                                              ; preds = %212, %208
  %215 = phi i8* [ %213, %212 ], [ %209, %208 ]
  %216 = icmp eq i8* %215, null
  %217 = select i1 %216, i64 0, i64 34
  store i64 %217, i64* %26, align 8, !alias.scope !31
  br i1 %216, label %221, label %218

218:                                              ; preds = %214
  %219 = getelementptr inbounds i8, i8* %215, i64 32
  store i8 0, i8* %219, align 1
  %220 = getelementptr inbounds i8, i8* %215, i64 33
  store i8 0, i8* %220, align 1
  br label %228

221:                                              ; preds = %214
  %222 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %223 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

224:                                              ; preds = %204
  %225 = getelementptr inbounds i8, i8* %144, i64 32
  store i8 0, i8* %225, align 1
  %226 = getelementptr inbounds i8, i8* %144, i64 33
  store i8 0, i8* %226, align 1
  %227 = icmp ult i64 %75, 36
  br i1 %227, label %228, label %244

228:                                              ; preds = %218, %224
  %229 = phi i8* [ %215, %218 ], [ %144, %224 ]
  %230 = load i64, i64* %27, align 8, !alias.scope !34
  %231 = icmp ult i64 %230, 36
  br i1 %231, label %232, label %234

232:                                              ; preds = %228
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 36) #13
  %233 = load i8*, i8** %28, align 8, !alias.scope !34
  br label %234

234:                                              ; preds = %232, %228
  %235 = phi i8* [ %233, %232 ], [ %229, %228 ]
  %236 = icmp eq i8* %235, null
  %237 = select i1 %236, i64 0, i64 36
  store i64 %237, i64* %26, align 8, !alias.scope !34
  br i1 %236, label %241, label %238

238:                                              ; preds = %234
  %239 = getelementptr inbounds i8, i8* %235, i64 34
  store i8 0, i8* %239, align 1
  %240 = getelementptr inbounds i8, i8* %235, i64 35
  store i8 0, i8* %240, align 1
  br label %248

241:                                              ; preds = %234
  %242 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %243 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

244:                                              ; preds = %224
  %245 = getelementptr inbounds i8, i8* %144, i64 34
  store i8 0, i8* %245, align 1
  %246 = getelementptr inbounds i8, i8* %144, i64 35
  store i8 0, i8* %246, align 1
  %247 = icmp ult i64 %75, 40
  br i1 %247, label %248, label %260

248:                                              ; preds = %238, %244
  %249 = phi i8* [ %235, %238 ], [ %144, %244 ]
  %250 = load i64, i64* %27, align 8, !alias.scope !37
  %251 = icmp ult i64 %250, 40
  br i1 %251, label %252, label %254

252:                                              ; preds = %248
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 40) #13
  %253 = load i8*, i8** %28, align 8, !alias.scope !37
  br label %254

254:                                              ; preds = %248, %252
  %255 = phi i8* [ %249, %248 ], [ %253, %252 ]
  %256 = icmp eq i8* %255, null
  %257 = select i1 %256, i64 0, i64 40
  store i64 %257, i64* %26, align 8, !alias.scope !37
  %258 = getelementptr inbounds i8, i8* %255, i64 36
  %259 = bitcast i8* %258 to i32*
  store i32 1886610273, i32* %259, align 1
  br label %264

260:                                              ; preds = %244
  %261 = getelementptr inbounds i8, i8* %144, i64 36
  %262 = bitcast i8* %261 to i32*
  store i32 1886610273, i32* %262, align 1
  %263 = icmp ult i64 %75, 44
  br i1 %263, label %264, label %274

264:                                              ; preds = %254, %260
  %265 = phi i8* [ %255, %254 ], [ %144, %260 ]
  %266 = load i64, i64* %27, align 8, !alias.scope !40
  %267 = icmp ult i64 %266, 44
  br i1 %267, label %268, label %270

268:                                              ; preds = %264
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 44) #13
  %269 = load i8*, i8** %28, align 8, !alias.scope !40
  br label %270

270:                                              ; preds = %268, %264
  %271 = phi i8* [ %269, %268 ], [ %265, %264 ]
  %272 = icmp eq i8* %271, null
  %273 = select i1 %272, i64 0, i64 44
  store i64 %273, i64* %26, align 8, !alias.scope !40
  br label %274

274:                                              ; preds = %260, %270
  %275 = phi i8* [ %271, %270 ], [ %144, %260 ]
  %276 = getelementptr inbounds i8, i8* %275, i64 40
  %277 = bitcast i8* %276 to i32*
  store i32 1280331841, i32* %277, align 1
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 44, %"class.jxl::PaddedBytes"* nonnull %5) #13
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 48, %"class.jxl::PaddedBytes"* nonnull %5) #13
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 52, %"class.jxl::PaddedBytes"* nonnull %5) #13
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 56, %"class.jxl::PaddedBytes"* nonnull %5) #13
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 60, %"class.jxl::PaddedBytes"* nonnull %5) #13
  %278 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 5
  %279 = load i32, i32* %278, align 8, !noalias !3
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %279, i64 64, %"class.jxl::PaddedBytes"* nonnull %5) #13
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 63190, i64 68, %"class.jxl::PaddedBytes"* nonnull %5) #13
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 65536, i64 72, %"class.jxl::PaddedBytes"* nonnull %5) #13
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 54061, i64 76, %"class.jxl::PaddedBytes"* nonnull %5) #13
  %280 = load i64, i64* %26, align 8, !alias.scope !43
  %281 = icmp ult i64 %280, 84
  br i1 %281, label %284, label %282

282:                                              ; preds = %274
  %283 = load i8*, i8** %28, align 8, !alias.scope !43
  br label %292

284:                                              ; preds = %274
  %285 = load i64, i64* %27, align 8, !alias.scope !43
  %286 = icmp ult i64 %285, 84
  br i1 %286, label %287, label %288

287:                                              ; preds = %284
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 84) #13
  br label %288

288:                                              ; preds = %287, %284
  %289 = load i8*, i8** %28, align 8, !alias.scope !43
  %290 = icmp eq i8* %289, null
  %291 = select i1 %290, i64 0, i64 84
  store i64 %291, i64* %26, align 8, !alias.scope !43
  br label %292

292:                                              ; preds = %288, %282
  %293 = phi i8* [ %283, %282 ], [ %289, %288 ]
  %294 = getelementptr inbounds i8, i8* %293, i64 80
  %295 = bitcast i8* %294 to i32*
  store i32 543979626, i32* %295, align 1
  %296 = bitcast %"class.std::__1::vector.4"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %296) #13
  %297 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %8, i64 0, i32 0, i32 0
  %298 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %8, i64 0, i32 0, i32 1
  %299 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %296, i8 0, i64 24, i1 false) #13
  %300 = load i64, i64* %30, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %300, %"class.jxl::PaddedBytes"* nonnull %6)
  %301 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %301) #13
  call void @_ZN3jxl11DescriptionERKNS_13ColorEncodingE(%"class.std::__1::basic_string"* nonnull sret %9, %"struct.jxl::ColorEncoding"* dereferenceable(152) %0) #13
  call fastcc void @_ZN3jxl12_GLOBAL__N_116CreateICCMlucTagERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS_11PaddedBytesE(%"class.std::__1::basic_string"* nonnull dereferenceable(24) %9, %"class.jxl::PaddedBytes"* nonnull %7)
  %302 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %303 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %302, i64 0, i32 1, i32 0
  %304 = load i8, i8* %303, align 1
  %305 = icmp slt i8 %304, 0
  br i1 %305, label %306, label %309

306:                                              ; preds = %292
  %307 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %308 = load i8*, i8** %307, align 8
  call void @_ZdlPv(i8* %308) #15
  br label %309

309:                                              ; preds = %292, %306
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %301) #13
  %310 = load i64, i64* %34, align 8, !alias.scope !46
  %311 = and i64 %310, 3
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %334, label %313

313:                                              ; preds = %309, %330
  %314 = phi i64 [ %331, %330 ], [ %310, %309 ]
  %315 = load i64, i64* %35, align 8, !alias.scope !46
  %316 = icmp eq i64 %314, %315
  br i1 %316, label %319, label %317

317:                                              ; preds = %313
  %318 = load i8*, i8** %36, align 8, !alias.scope !46
  br label %325

319:                                              ; preds = %313
  %320 = add i64 %314, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %7, i64 %320) #13
  %321 = load i8*, i8** %36, align 8, !alias.scope !46
  %322 = icmp eq i8* %321, null
  br i1 %322, label %330, label %323

323:                                              ; preds = %319
  %324 = load i64, i64* %34, align 8, !alias.scope !46
  br label %325

325:                                              ; preds = %323, %317
  %326 = phi i8* [ %321, %323 ], [ %318, %317 ]
  %327 = phi i64 [ %324, %323 ], [ %314, %317 ]
  %328 = add i64 %327, 1
  store i64 %328, i64* %34, align 8, !alias.scope !46
  %329 = getelementptr inbounds i8, i8* %326, i64 %327
  store i8 0, i8* %329, align 1
  br label %330

330:                                              ; preds = %325, %319
  %331 = load i64, i64* %34, align 8, !alias.scope !46
  %332 = and i64 %331, 3
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %334, label %313

334:                                              ; preds = %330, %309
  %335 = phi i64 [ %310, %309 ], [ %331, %330 ]
  %336 = load i64, i64* %30, align 8, !alias.scope !49
  %337 = add i64 %336, 4
  %338 = icmp ult i64 %336, -4
  br i1 %338, label %341, label %339

339:                                              ; preds = %334
  %340 = load i8*, i8** %32, align 8, !alias.scope !52
  br label %349

341:                                              ; preds = %334
  %342 = load i64, i64* %31, align 8, !alias.scope !52
  %343 = icmp ult i64 %342, %337
  br i1 %343, label %344, label %345

344:                                              ; preds = %341
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %6, i64 %337) #13
  br label %345

345:                                              ; preds = %344, %341
  %346 = load i8*, i8** %32, align 8, !alias.scope !52
  %347 = icmp eq i8* %346, null
  %348 = select i1 %347, i64 0, i64 %337
  store i64 %348, i64* %30, align 8, !alias.scope !52
  br label %349

349:                                              ; preds = %339, %345
  %350 = phi i8* [ %340, %339 ], [ %346, %345 ]
  %351 = getelementptr inbounds i8, i8* %350, i64 %336
  %352 = bitcast i8* %351 to i32*
  store i32 1668506980, i32* %352, align 1
  %353 = load i64, i64* %30, align 8, !alias.scope !49
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %353, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %354 = load i64*, i64** %298, align 8
  %355 = load i64*, i64** %299, align 8
  %356 = icmp eq i64* %354, %355
  %357 = ptrtoint i64* %355 to i64
  br i1 %356, label %362, label %358

358:                                              ; preds = %349
  store i64 0, i64* %354, align 8
  %359 = getelementptr inbounds i64, i64* %354, i64 1
  %360 = ptrtoint i64* %359 to i64
  %361 = bitcast i64** %298 to i64*
  store i64 %360, i64* %361, align 8
  br label %408

362:                                              ; preds = %349
  %363 = ptrtoint i64* %354 to i64
  %364 = bitcast i64** %298 to i64*
  %365 = bitcast %"class.std::__1::vector.4"* %8 to i64*
  %366 = load i64, i64* %365, align 8
  %367 = sub i64 %363, %366
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = icmp ugt i64 %369, 2305843009213693951
  br i1 %370, label %371, label %373

371:                                              ; preds = %362
  %372 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %372) #14
  unreachable

373:                                              ; preds = %362
  %374 = bitcast i64** %299 to i64*
  %375 = sub i64 %357, %366
  %376 = ashr exact i64 %375, 3
  %377 = icmp ult i64 %376, 1152921504606846975
  br i1 %377, label %378, label %386

378:                                              ; preds = %373
  %379 = ashr exact i64 %375, 2
  %380 = icmp ult i64 %379, %369
  %381 = select i1 %380, i64 %369, i64 %379
  %382 = icmp eq i64 %381, 0
  br i1 %382, label %391, label %383

383:                                              ; preds = %378
  %384 = icmp ugt i64 %381, 2305843009213693951
  br i1 %384, label %385, label %386

385:                                              ; preds = %383
  call void @abort() #14
  unreachable

386:                                              ; preds = %383, %373
  %387 = phi i64 [ %381, %383 ], [ 2305843009213693951, %373 ]
  %388 = shl i64 %387, 3
  %389 = call i8* @_Znwm(i64 %388) #15
  %390 = bitcast i8* %389 to i64*
  br label %391

391:                                              ; preds = %386, %378
  %392 = phi i64 [ %387, %386 ], [ 0, %378 ]
  %393 = phi i8* [ %389, %386 ], [ null, %378 ]
  %394 = phi i64* [ %390, %386 ], [ null, %378 ]
  %395 = getelementptr inbounds i64, i64* %394, i64 %368
  %396 = getelementptr inbounds i64, i64* %394, i64 %392
  %397 = ptrtoint i64* %396 to i64
  store i64 0, i64* %395, align 8
  %398 = getelementptr inbounds i64, i64* %395, i64 1
  %399 = ptrtoint i64* %398 to i64
  %400 = ptrtoint i64* %394 to i64
  %401 = icmp sgt i64 %367, 0
  br i1 %401, label %402, label %404

402:                                              ; preds = %391
  %403 = inttoptr i64 %366 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %393, i8* align 8 %403, i64 %367, i1 false) #13
  br label %404

404:                                              ; preds = %402, %391
  store i64 %400, i64* %365, align 8
  store i64 %399, i64* %364, align 8
  store i64 %397, i64* %374, align 8
  %405 = icmp eq i64 %366, 0
  br i1 %405, label %408, label %406

406:                                              ; preds = %404
  %407 = inttoptr i64 %366 to i8*
  call void @_ZdlPv(i8* %407) #15
  br label %408

408:                                              ; preds = %358, %404, %406
  %409 = trunc i64 %335 to i32
  %410 = load i64, i64* %30, align 8, !alias.scope !49
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %409, i64 %410, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %411 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %411) #13
  %412 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %413 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %414 = call i8* @_Znwm(i64 128) #15
  store i8* %414, i8** %412, align 8
  %415 = bitcast i64* %413 to <2 x i64>*
  store <2 x i64> <i64 114, i64 -9223372036854775680>, <2 x i64>* %415, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %414, i8* align 1 getelementptr inbounds ([115 x i8], [115 x i8]* @.str.11, i64 0, i64 0), i64 114, i1 false) #13
  %416 = getelementptr inbounds i8, i8* %414, i64 114
  store i8 0, i8* %416, align 1
  call fastcc void @_ZN3jxl12_GLOBAL__N_116CreateICCMlucTagERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS_11PaddedBytesE(%"class.std::__1::basic_string"* nonnull dereferenceable(24) %10, %"class.jxl::PaddedBytes"* nonnull %7)
  %417 = load i64, i64* %34, align 8, !alias.scope !55
  %418 = and i64 %417, 3
  %419 = icmp eq i64 %418, 0
  br i1 %419, label %441, label %420

420:                                              ; preds = %408, %437
  %421 = phi i64 [ %438, %437 ], [ %417, %408 ]
  %422 = load i64, i64* %35, align 8, !alias.scope !55
  %423 = icmp eq i64 %421, %422
  br i1 %423, label %426, label %424

424:                                              ; preds = %420
  %425 = load i8*, i8** %36, align 8, !alias.scope !55
  br label %432

426:                                              ; preds = %420
  %427 = add i64 %421, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %7, i64 %427) #13
  %428 = load i8*, i8** %36, align 8, !alias.scope !55
  %429 = icmp eq i8* %428, null
  br i1 %429, label %437, label %430

430:                                              ; preds = %426
  %431 = load i64, i64* %34, align 8, !alias.scope !55
  br label %432

432:                                              ; preds = %430, %424
  %433 = phi i8* [ %428, %430 ], [ %425, %424 ]
  %434 = phi i64 [ %431, %430 ], [ %421, %424 ]
  %435 = add i64 %434, 1
  store i64 %435, i64* %34, align 8, !alias.scope !55
  %436 = getelementptr inbounds i8, i8* %433, i64 %434
  store i8 0, i8* %436, align 1
  br label %437

437:                                              ; preds = %432, %426
  %438 = load i64, i64* %34, align 8, !alias.scope !55
  %439 = and i64 %438, 3
  %440 = icmp eq i64 %439, 0
  br i1 %440, label %441, label %420

441:                                              ; preds = %437, %408
  %442 = phi i64 [ %417, %408 ], [ %438, %437 ]
  %443 = sub i64 %442, %335
  %444 = load i64, i64* %30, align 8, !alias.scope !58
  %445 = add i64 %444, 4
  %446 = icmp ult i64 %444, -4
  br i1 %446, label %449, label %447

447:                                              ; preds = %441
  %448 = load i8*, i8** %32, align 8, !alias.scope !61
  br label %457

449:                                              ; preds = %441
  %450 = load i64, i64* %31, align 8, !alias.scope !61
  %451 = icmp ult i64 %450, %445
  br i1 %451, label %452, label %453

452:                                              ; preds = %449
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %6, i64 %445) #13
  br label %453

453:                                              ; preds = %452, %449
  %454 = load i8*, i8** %32, align 8, !alias.scope !61
  %455 = icmp eq i8* %454, null
  %456 = select i1 %455, i64 0, i64 %445
  store i64 %456, i64* %30, align 8, !alias.scope !61
  br label %457

457:                                              ; preds = %447, %453
  %458 = phi i8* [ %448, %447 ], [ %454, %453 ]
  %459 = getelementptr inbounds i8, i8* %458, i64 %444
  %460 = bitcast i8* %459 to i32*
  store i32 1953656931, i32* %460, align 1
  %461 = load i64, i64* %30, align 8, !alias.scope !58
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %461, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %462 = load i64*, i64** %298, align 8
  %463 = load i64*, i64** %299, align 8
  %464 = icmp eq i64* %462, %463
  %465 = ptrtoint i64* %463 to i64
  br i1 %464, label %470, label %466

466:                                              ; preds = %457
  store i64 %335, i64* %462, align 8
  %467 = getelementptr inbounds i64, i64* %462, i64 1
  %468 = ptrtoint i64* %467 to i64
  %469 = bitcast i64** %298 to i64*
  store i64 %468, i64* %469, align 8
  br label %516

470:                                              ; preds = %457
  %471 = ptrtoint i64* %462 to i64
  %472 = bitcast i64** %298 to i64*
  %473 = bitcast %"class.std::__1::vector.4"* %8 to i64*
  %474 = load i64, i64* %473, align 8
  %475 = sub i64 %471, %474
  %476 = ashr exact i64 %475, 3
  %477 = add nsw i64 %476, 1
  %478 = icmp ugt i64 %477, 2305843009213693951
  br i1 %478, label %479, label %481

479:                                              ; preds = %470
  %480 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %480) #14
  unreachable

481:                                              ; preds = %470
  %482 = bitcast i64** %299 to i64*
  %483 = sub i64 %465, %474
  %484 = ashr exact i64 %483, 3
  %485 = icmp ult i64 %484, 1152921504606846975
  br i1 %485, label %486, label %494

486:                                              ; preds = %481
  %487 = ashr exact i64 %483, 2
  %488 = icmp ult i64 %487, %477
  %489 = select i1 %488, i64 %477, i64 %487
  %490 = icmp eq i64 %489, 0
  br i1 %490, label %499, label %491

491:                                              ; preds = %486
  %492 = icmp ugt i64 %489, 2305843009213693951
  br i1 %492, label %493, label %494

493:                                              ; preds = %491
  call void @abort() #14
  unreachable

494:                                              ; preds = %491, %481
  %495 = phi i64 [ %489, %491 ], [ 2305843009213693951, %481 ]
  %496 = shl i64 %495, 3
  %497 = call i8* @_Znwm(i64 %496) #15
  %498 = bitcast i8* %497 to i64*
  br label %499

499:                                              ; preds = %494, %486
  %500 = phi i64 [ %495, %494 ], [ 0, %486 ]
  %501 = phi i8* [ %497, %494 ], [ null, %486 ]
  %502 = phi i64* [ %498, %494 ], [ null, %486 ]
  %503 = getelementptr inbounds i64, i64* %502, i64 %476
  %504 = getelementptr inbounds i64, i64* %502, i64 %500
  %505 = ptrtoint i64* %504 to i64
  store i64 %335, i64* %503, align 8
  %506 = getelementptr inbounds i64, i64* %503, i64 1
  %507 = ptrtoint i64* %506 to i64
  %508 = ptrtoint i64* %502 to i64
  %509 = icmp sgt i64 %475, 0
  br i1 %509, label %510, label %512

510:                                              ; preds = %499
  %511 = inttoptr i64 %474 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %501, i8* align 8 %511, i64 %475, i1 false) #13
  br label %512

512:                                              ; preds = %510, %499
  store i64 %508, i64* %473, align 8
  store i64 %507, i64* %472, align 8
  store i64 %505, i64* %482, align 8
  %513 = icmp eq i64 %474, 0
  br i1 %513, label %516, label %514

514:                                              ; preds = %512
  %515 = inttoptr i64 %474 to i8*
  call void @_ZdlPv(i8* %515) #15
  br label %516

516:                                              ; preds = %466, %512, %514
  %517 = trunc i64 %443 to i32
  %518 = load i64, i64* %30, align 8, !alias.scope !58
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %517, i64 %518, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %519 = load i32, i32* %37, align 8
  %520 = icmp eq i32 %519, 1
  br i1 %520, label %521, label %544

521:                                              ; preds = %516
  %522 = bitcast [3 x float]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %522) #13
  %523 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %523, align 4
  %524 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %524, align 4
  %525 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 0, i64 2
  store float 0xFFFFFFFFE0000000, float* %525, align 4
  %526 = call { double, double } @_ZNK3jxl13ColorEncoding13GetWhitePointEv(%"struct.jxl::ColorEncoding"* %0) #13
  %527 = extractvalue { double, double } %526, 0
  %528 = extractvalue { double, double } %526, 1
  %529 = call double @llvm.fabs.f64(double %528) #13
  %530 = fcmp olt double %529, 0x3D719799812DEA11
  br i1 %530, label %531, label %532

531:                                              ; preds = %521
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %522) #13
  br label %2051

532:                                              ; preds = %521
  %533 = fdiv double 1.000000e+00, %528
  %534 = fptrunc double %533 to float
  %535 = fpext float %534 to double
  %536 = fmul double %527, %535
  %537 = fptrunc double %536 to float
  store float %537, float* %523, align 4
  store float 1.000000e+00, float* %524, align 4
  %538 = fsub double 1.000000e+00, %527
  %539 = fsub double %538, %528
  %540 = fmul double %539, %535
  %541 = fptrunc double %540 to float
  store float %541, float* %525, align 4
  %542 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115CreateICCXYZTagEPfPNS_11PaddedBytesE(float* nonnull %523, %"class.jxl::PaddedBytes"* nonnull %7)
  %543 = icmp eq i32 %542, 0
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %522) #13
  br i1 %543, label %549, label %2051

544:                                              ; preds = %516
  %545 = bitcast [3 x float]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %545) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %545, i8* align 4 bitcast ([3 x float]* @__const._ZN3jxl18MaybeCreateProfileERKNS_13ColorEncodingEPNS_11PaddedBytesE.d50 to i8*), i64 12, i1 false)
  %546 = getelementptr inbounds [3 x float], [3 x float]* %12, i64 0, i64 0
  %547 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115CreateICCXYZTagEPfPNS_11PaddedBytesE(float* nonnull %546, %"class.jxl::PaddedBytes"* nonnull %7)
  %548 = icmp eq i32 %547, 0
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %545) #13
  br i1 %548, label %549, label %2051

549:                                              ; preds = %544, %532
  %550 = load i64, i64* %34, align 8, !alias.scope !64
  %551 = and i64 %550, 3
  %552 = icmp eq i64 %551, 0
  br i1 %552, label %574, label %553

553:                                              ; preds = %549, %570
  %554 = phi i64 [ %571, %570 ], [ %550, %549 ]
  %555 = load i64, i64* %35, align 8, !alias.scope !64
  %556 = icmp eq i64 %554, %555
  br i1 %556, label %559, label %557

557:                                              ; preds = %553
  %558 = load i8*, i8** %36, align 8, !alias.scope !64
  br label %565

559:                                              ; preds = %553
  %560 = add i64 %554, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %7, i64 %560) #13
  %561 = load i8*, i8** %36, align 8, !alias.scope !64
  %562 = icmp eq i8* %561, null
  br i1 %562, label %570, label %563

563:                                              ; preds = %559
  %564 = load i64, i64* %34, align 8, !alias.scope !64
  br label %565

565:                                              ; preds = %563, %557
  %566 = phi i8* [ %561, %563 ], [ %558, %557 ]
  %567 = phi i64 [ %564, %563 ], [ %554, %557 ]
  %568 = add i64 %567, 1
  store i64 %568, i64* %34, align 8, !alias.scope !64
  %569 = getelementptr inbounds i8, i8* %566, i64 %567
  store i8 0, i8* %569, align 1
  br label %570

570:                                              ; preds = %565, %559
  %571 = load i64, i64* %34, align 8, !alias.scope !64
  %572 = and i64 %571, 3
  %573 = icmp eq i64 %572, 0
  br i1 %573, label %574, label %553

574:                                              ; preds = %570, %549
  %575 = phi i64 [ %550, %549 ], [ %571, %570 ]
  %576 = sub i64 %575, %442
  %577 = load i64, i64* %30, align 8, !alias.scope !67
  %578 = add i64 %577, 4
  %579 = icmp ult i64 %577, -4
  br i1 %579, label %582, label %580

580:                                              ; preds = %574
  %581 = load i8*, i8** %32, align 8, !alias.scope !70
  br label %590

582:                                              ; preds = %574
  %583 = load i64, i64* %31, align 8, !alias.scope !70
  %584 = icmp ult i64 %583, %578
  br i1 %584, label %585, label %586

585:                                              ; preds = %582
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %6, i64 %578) #13
  br label %586

586:                                              ; preds = %585, %582
  %587 = load i8*, i8** %32, align 8, !alias.scope !70
  %588 = icmp eq i8* %587, null
  %589 = select i1 %588, i64 0, i64 %578
  store i64 %589, i64* %30, align 8, !alias.scope !70
  br label %590

590:                                              ; preds = %580, %586
  %591 = phi i8* [ %581, %580 ], [ %587, %586 ]
  %592 = getelementptr inbounds i8, i8* %591, i64 %577
  %593 = bitcast i8* %592 to i32*
  store i32 1953526903, i32* %593, align 1
  %594 = load i64, i64* %30, align 8, !alias.scope !67
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %594, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %595 = load i64*, i64** %298, align 8
  %596 = load i64*, i64** %299, align 8
  %597 = icmp eq i64* %595, %596
  %598 = ptrtoint i64* %596 to i64
  br i1 %597, label %603, label %599

599:                                              ; preds = %590
  store i64 %442, i64* %595, align 8
  %600 = getelementptr inbounds i64, i64* %595, i64 1
  %601 = ptrtoint i64* %600 to i64
  %602 = bitcast i64** %298 to i64*
  store i64 %601, i64* %602, align 8
  br label %649

603:                                              ; preds = %590
  %604 = ptrtoint i64* %595 to i64
  %605 = bitcast i64** %298 to i64*
  %606 = bitcast %"class.std::__1::vector.4"* %8 to i64*
  %607 = load i64, i64* %606, align 8
  %608 = sub i64 %604, %607
  %609 = ashr exact i64 %608, 3
  %610 = add nsw i64 %609, 1
  %611 = icmp ugt i64 %610, 2305843009213693951
  br i1 %611, label %612, label %614

612:                                              ; preds = %603
  %613 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %613) #14
  unreachable

614:                                              ; preds = %603
  %615 = bitcast i64** %299 to i64*
  %616 = sub i64 %598, %607
  %617 = ashr exact i64 %616, 3
  %618 = icmp ult i64 %617, 1152921504606846975
  br i1 %618, label %619, label %627

619:                                              ; preds = %614
  %620 = ashr exact i64 %616, 2
  %621 = icmp ult i64 %620, %610
  %622 = select i1 %621, i64 %610, i64 %620
  %623 = icmp eq i64 %622, 0
  br i1 %623, label %632, label %624

624:                                              ; preds = %619
  %625 = icmp ugt i64 %622, 2305843009213693951
  br i1 %625, label %626, label %627

626:                                              ; preds = %624
  call void @abort() #14
  unreachable

627:                                              ; preds = %624, %614
  %628 = phi i64 [ %622, %624 ], [ 2305843009213693951, %614 ]
  %629 = shl i64 %628, 3
  %630 = call i8* @_Znwm(i64 %629) #15
  %631 = bitcast i8* %630 to i64*
  br label %632

632:                                              ; preds = %627, %619
  %633 = phi i64 [ %628, %627 ], [ 0, %619 ]
  %634 = phi i8* [ %630, %627 ], [ null, %619 ]
  %635 = phi i64* [ %631, %627 ], [ null, %619 ]
  %636 = getelementptr inbounds i64, i64* %635, i64 %609
  %637 = getelementptr inbounds i64, i64* %635, i64 %633
  %638 = ptrtoint i64* %637 to i64
  store i64 %442, i64* %636, align 8
  %639 = getelementptr inbounds i64, i64* %636, i64 1
  %640 = ptrtoint i64* %639 to i64
  %641 = ptrtoint i64* %635 to i64
  %642 = icmp sgt i64 %608, 0
  br i1 %642, label %643, label %645

643:                                              ; preds = %632
  %644 = inttoptr i64 %607 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %634, i8* align 8 %644, i64 %608, i1 false) #13
  br label %645

645:                                              ; preds = %643, %632
  store i64 %641, i64* %606, align 8
  store i64 %640, i64* %605, align 8
  store i64 %638, i64* %615, align 8
  %646 = icmp eq i64 %607, 0
  br i1 %646, label %649, label %647

647:                                              ; preds = %645
  %648 = inttoptr i64 %607 to i8*
  call void @_ZdlPv(i8* %648) #15
  br label %649

649:                                              ; preds = %599, %645, %647
  %650 = trunc i64 %576 to i32
  %651 = load i64, i64* %30, align 8, !alias.scope !67
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %650, i64 %651, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %652 = load i32, i32* %37, align 8
  %653 = icmp eq i32 %652, 1
  br i1 %653, label %1266, label %654

654:                                              ; preds = %649
  %655 = call { double, double } @_ZNK3jxl13ColorEncoding13GetWhitePointEv(%"struct.jxl::ColorEncoding"* %0) #13
  %656 = extractvalue { double, double } %655, 1
  %657 = bitcast [9 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %657) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %657, i8 -1, i64 36, i1 false) #13
  %658 = fcmp oeq double %656, 0.000000e+00
  br i1 %658, label %666, label %659

659:                                              ; preds = %654
  %660 = extractvalue { double, double } %655, 0
  %661 = fptrunc double %660 to float
  %662 = fptrunc double %656 to float
  %663 = getelementptr inbounds [9 x float], [9 x float]* %3, i64 0, i64 0
  %664 = call i32 @_ZN3jxl13AdaptToXYZD50EffPf(float %661, float %662, float* nonnull %663) #13
  %665 = icmp eq i32 %664, 0
  br i1 %665, label %668, label %666

666:                                              ; preds = %659, %654
  %667 = phi i32 [ %664, %659 ], [ 1, %654 ]
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %657) #13
  br label %2051

668:                                              ; preds = %659
  %669 = load float, float* %663, align 16
  %670 = getelementptr inbounds [9 x float], [9 x float]* %3, i64 0, i64 1
  %671 = load float, float* %670, align 4
  %672 = getelementptr inbounds [9 x float], [9 x float]* %3, i64 0, i64 2
  %673 = load float, float* %672, align 8
  %674 = getelementptr inbounds [9 x float], [9 x float]* %3, i64 0, i64 3
  %675 = load float, float* %674, align 4
  %676 = getelementptr inbounds [9 x float], [9 x float]* %3, i64 0, i64 4
  %677 = load float, float* %676, align 16
  %678 = getelementptr inbounds [9 x float], [9 x float]* %3, i64 0, i64 5
  %679 = load float, float* %678, align 4
  %680 = getelementptr inbounds [9 x float], [9 x float]* %3, i64 0, i64 6
  %681 = load float, float* %680, align 8
  %682 = getelementptr inbounds [9 x float], [9 x float]* %3, i64 0, i64 7
  %683 = load float, float* %682, align 4
  %684 = getelementptr inbounds [9 x float], [9 x float]* %3, i64 0, i64 8
  %685 = load float, float* %684, align 16
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %657) #13
  %686 = bitcast %"struct.jxl::PrimariesCIExy"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %686) #13
  %687 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %13, i64 0, i32 0, i32 0
  %688 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %13, i64 0, i32 0, i32 1
  %689 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %13, i64 0, i32 1, i32 0
  %690 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %13, i64 0, i32 1, i32 1
  %691 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %13, i64 0, i32 2, i32 0
  %692 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %13, i64 0, i32 2, i32 1
  %693 = bitcast %"struct.jxl::PrimariesCIExy"* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %693, i8 -1, i64 48, i1 false)
  call void @_ZNK3jxl13ColorEncoding12GetPrimariesEv(%"struct.jxl::PrimariesCIExy"* nonnull sret %13, %"struct.jxl::ColorEncoding"* %0) #13
  %694 = load double, double* %687, align 8
  %695 = load double, double* %688, align 8
  %696 = load double, double* %689, align 8
  %697 = load double, double* %690, align 8
  %698 = load double, double* %691, align 8
  %699 = load double, double* %692, align 8
  %700 = call { double, double } @_ZNK3jxl13ColorEncoding13GetWhitePointEv(%"struct.jxl::ColorEncoding"* %0) #13
  %701 = extractvalue { double, double } %700, 0
  %702 = extractvalue { double, double } %700, 1
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %657) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %657, i8 -1, i64 36, i1 false) #13
  %703 = fptrunc double %694 to float
  %704 = fptrunc double %695 to float
  %705 = fptrunc double %696 to float
  %706 = fptrunc double %697 to float
  %707 = fptrunc double %698 to float
  %708 = fptrunc double %699 to float
  %709 = fptrunc double %701 to float
  %710 = fptrunc double %702 to float
  %711 = call i32 @_ZN3jxl17PrimariesToXYZD50EffffffffPf(float %703, float %704, float %705, float %706, float %707, float %708, float %709, float %710, float* nonnull %663) #13
  %712 = icmp eq i32 %711, 0
  br i1 %712, label %714, label %713

713:                                              ; preds = %668
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %657) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %686) #13
  br label %2051

714:                                              ; preds = %668
  %715 = bitcast [9 x float]* %3 to i32*
  %716 = load i32, i32* %715, align 16
  %717 = bitcast float* %670 to i32*
  %718 = load i32, i32* %717, align 4
  %719 = bitcast float* %672 to i32*
  %720 = load i32, i32* %719, align 8
  %721 = bitcast float* %674 to i32*
  %722 = load i32, i32* %721, align 4
  %723 = bitcast float* %676 to i32*
  %724 = load i32, i32* %723, align 16
  %725 = bitcast float* %678 to i32*
  %726 = load i32, i32* %725, align 4
  %727 = bitcast float* %680 to i32*
  %728 = load i32, i32* %727, align 8
  %729 = bitcast float* %682 to i32*
  %730 = load i32, i32* %729, align 4
  %731 = bitcast float* %684 to i32*
  %732 = load i32, i32* %731, align 16
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %657) #13
  %733 = bitcast [3 x float]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %733) #13
  %734 = getelementptr inbounds [3 x float], [3 x float]* %14, i64 0, i64 0
  %735 = getelementptr inbounds [3 x float], [3 x float]* %14, i64 0, i64 1
  %736 = getelementptr inbounds [3 x float], [3 x float]* %14, i64 0, i64 2
  %737 = bitcast [3 x float]* %14 to i32*
  store i32 %716, i32* %737, align 4
  %738 = bitcast float* %735 to i32*
  store i32 %722, i32* %738, align 4
  %739 = bitcast float* %736 to i32*
  store i32 %728, i32* %739, align 4
  %740 = bitcast [3 x float]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %740) #13
  %741 = getelementptr inbounds [3 x float], [3 x float]* %15, i64 0, i64 0
  %742 = getelementptr inbounds [3 x float], [3 x float]* %15, i64 0, i64 1
  %743 = getelementptr inbounds [3 x float], [3 x float]* %15, i64 0, i64 2
  %744 = bitcast [3 x float]* %15 to i32*
  store i32 %718, i32* %744, align 4
  %745 = bitcast float* %742 to i32*
  store i32 %724, i32* %745, align 4
  %746 = bitcast float* %743 to i32*
  store i32 %730, i32* %746, align 4
  %747 = bitcast [3 x float]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %747) #13
  %748 = getelementptr inbounds [3 x float], [3 x float]* %16, i64 0, i64 0
  %749 = getelementptr inbounds [3 x float], [3 x float]* %16, i64 0, i64 1
  %750 = getelementptr inbounds [3 x float], [3 x float]* %16, i64 0, i64 2
  %751 = bitcast [3 x float]* %16 to i32*
  store i32 %720, i32* %751, align 4
  %752 = bitcast float* %749 to i32*
  store i32 %726, i32* %752, align 4
  %753 = bitcast float* %750 to i32*
  store i32 %732, i32* %753, align 4
  %754 = load i64, i64* %34, align 8, !alias.scope !73
  %755 = add i64 %754, 4
  %756 = icmp ult i64 %754, -4
  br i1 %756, label %759, label %757

757:                                              ; preds = %714
  %758 = load i8*, i8** %36, align 8, !alias.scope !76
  br label %767

759:                                              ; preds = %714
  %760 = load i64, i64* %35, align 8, !alias.scope !76
  %761 = icmp ult i64 %760, %755
  br i1 %761, label %762, label %763

762:                                              ; preds = %759
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %7, i64 %755) #13
  br label %763

763:                                              ; preds = %762, %759
  %764 = load i8*, i8** %36, align 8, !alias.scope !76
  %765 = icmp eq i8* %764, null
  %766 = select i1 %765, i64 0, i64 %755
  store i64 %766, i64* %34, align 8, !alias.scope !76
  br label %767

767:                                              ; preds = %763, %757
  %768 = phi i8* [ %758, %757 ], [ %764, %763 ]
  %769 = getelementptr inbounds i8, i8* %768, i64 %754
  %770 = bitcast i8* %769 to i32*
  store i32 842229363, i32* %770, align 1
  %771 = load i64, i64* %34, align 8, !alias.scope !73
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %771, %"class.jxl::PaddedBytes"* nonnull %7) #13
  %772 = fcmp oge float %669, 0xC0DFFFFFA0000000
  %773 = fcmp ole float %669, 0x40DFFFFFA0000000
  %774 = and i1 %772, %773
  br i1 %774, label %775, label %1261

775:                                              ; preds = %767
  %776 = load i64, i64* %34, align 8, !alias.scope !73
  %777 = fmul float %669, 6.553600e+04
  %778 = fadd float %777, 5.000000e-01
  %779 = fptosi float %778 to i32
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %779, i64 %776, %"class.jxl::PaddedBytes"* nonnull %7) #13
  %780 = fcmp oge float %671, 0xC0DFFFFFA0000000
  %781 = fcmp ole float %671, 0x40DFFFFFA0000000
  %782 = and i1 %780, %781
  br i1 %782, label %783, label %1261

783:                                              ; preds = %775
  %784 = load i64, i64* %34, align 8, !alias.scope !73
  %785 = fmul float %671, 6.553600e+04
  %786 = fadd float %785, 5.000000e-01
  %787 = fptosi float %786 to i32
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %787, i64 %784, %"class.jxl::PaddedBytes"* nonnull %7) #13
  %788 = fcmp oge float %673, 0xC0DFFFFFA0000000
  %789 = fcmp ole float %673, 0x40DFFFFFA0000000
  %790 = and i1 %788, %789
  br i1 %790, label %791, label %1261

791:                                              ; preds = %783
  %792 = load i64, i64* %34, align 8, !alias.scope !73
  %793 = fmul float %673, 6.553600e+04
  %794 = fadd float %793, 5.000000e-01
  %795 = fptosi float %794 to i32
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %795, i64 %792, %"class.jxl::PaddedBytes"* nonnull %7) #13
  %796 = fcmp oge float %675, 0xC0DFFFFFA0000000
  %797 = fcmp ole float %675, 0x40DFFFFFA0000000
  %798 = and i1 %796, %797
  br i1 %798, label %799, label %1261

799:                                              ; preds = %791
  %800 = load i64, i64* %34, align 8, !alias.scope !73
  %801 = fmul float %675, 6.553600e+04
  %802 = fadd float %801, 5.000000e-01
  %803 = fptosi float %802 to i32
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %803, i64 %800, %"class.jxl::PaddedBytes"* nonnull %7) #13
  %804 = fcmp oge float %677, 0xC0DFFFFFA0000000
  %805 = fcmp ole float %677, 0x40DFFFFFA0000000
  %806 = and i1 %804, %805
  br i1 %806, label %807, label %1261

807:                                              ; preds = %799
  %808 = load i64, i64* %34, align 8, !alias.scope !73
  %809 = fmul float %677, 6.553600e+04
  %810 = fadd float %809, 5.000000e-01
  %811 = fptosi float %810 to i32
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %811, i64 %808, %"class.jxl::PaddedBytes"* nonnull %7) #13
  %812 = fcmp oge float %679, 0xC0DFFFFFA0000000
  %813 = fcmp ole float %679, 0x40DFFFFFA0000000
  %814 = and i1 %812, %813
  br i1 %814, label %815, label %1261

815:                                              ; preds = %807
  %816 = load i64, i64* %34, align 8, !alias.scope !73
  %817 = fmul float %679, 6.553600e+04
  %818 = fadd float %817, 5.000000e-01
  %819 = fptosi float %818 to i32
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %819, i64 %816, %"class.jxl::PaddedBytes"* nonnull %7) #13
  %820 = fcmp oge float %681, 0xC0DFFFFFA0000000
  %821 = fcmp ole float %681, 0x40DFFFFFA0000000
  %822 = and i1 %820, %821
  br i1 %822, label %823, label %1261

823:                                              ; preds = %815
  %824 = load i64, i64* %34, align 8, !alias.scope !73
  %825 = fmul float %681, 6.553600e+04
  %826 = fadd float %825, 5.000000e-01
  %827 = fptosi float %826 to i32
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %827, i64 %824, %"class.jxl::PaddedBytes"* nonnull %7) #13
  %828 = fcmp oge float %683, 0xC0DFFFFFA0000000
  %829 = fcmp ole float %683, 0x40DFFFFFA0000000
  %830 = and i1 %828, %829
  br i1 %830, label %831, label %1261

831:                                              ; preds = %823
  %832 = load i64, i64* %34, align 8, !alias.scope !73
  %833 = fmul float %683, 6.553600e+04
  %834 = fadd float %833, 5.000000e-01
  %835 = fptosi float %834 to i32
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %835, i64 %832, %"class.jxl::PaddedBytes"* nonnull %7) #13
  %836 = fcmp oge float %685, 0xC0DFFFFFA0000000
  %837 = fcmp ole float %685, 0x40DFFFFFA0000000
  %838 = and i1 %836, %837
  br i1 %838, label %839, label %1261

839:                                              ; preds = %831
  %840 = load i64, i64* %34, align 8, !alias.scope !73
  %841 = fmul float %685, 6.553600e+04
  %842 = fadd float %841, 5.000000e-01
  %843 = fptosi float %842 to i32
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %843, i64 %840, %"class.jxl::PaddedBytes"* nonnull %7) #13
  %844 = load i64, i64* %34, align 8, !alias.scope !79
  %845 = and i64 %844, 3
  %846 = icmp eq i64 %845, 0
  br i1 %846, label %868, label %847

847:                                              ; preds = %839, %864
  %848 = phi i64 [ %865, %864 ], [ %844, %839 ]
  %849 = load i64, i64* %35, align 8, !alias.scope !79
  %850 = icmp eq i64 %848, %849
  br i1 %850, label %853, label %851

851:                                              ; preds = %847
  %852 = load i8*, i8** %36, align 8, !alias.scope !79
  br label %859

853:                                              ; preds = %847
  %854 = add i64 %848, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %7, i64 %854) #13
  %855 = load i8*, i8** %36, align 8, !alias.scope !79
  %856 = icmp eq i8* %855, null
  br i1 %856, label %864, label %857

857:                                              ; preds = %853
  %858 = load i64, i64* %34, align 8, !alias.scope !79
  br label %859

859:                                              ; preds = %857, %851
  %860 = phi i8* [ %855, %857 ], [ %852, %851 ]
  %861 = phi i64 [ %858, %857 ], [ %848, %851 ]
  %862 = add i64 %861, 1
  store i64 %862, i64* %34, align 8, !alias.scope !79
  %863 = getelementptr inbounds i8, i8* %860, i64 %861
  store i8 0, i8* %863, align 1
  br label %864

864:                                              ; preds = %859, %853
  %865 = load i64, i64* %34, align 8, !alias.scope !79
  %866 = and i64 %865, 3
  %867 = icmp eq i64 %866, 0
  br i1 %867, label %868, label %847

868:                                              ; preds = %864, %839
  %869 = phi i64 [ %844, %839 ], [ %865, %864 ]
  %870 = sub i64 %869, %575
  %871 = load i64, i64* %30, align 8, !alias.scope !82
  %872 = add i64 %871, 4
  %873 = icmp ult i64 %871, -4
  br i1 %873, label %876, label %874

874:                                              ; preds = %868
  %875 = load i8*, i8** %32, align 8, !alias.scope !85
  br label %884

876:                                              ; preds = %868
  %877 = load i64, i64* %31, align 8, !alias.scope !85
  %878 = icmp ult i64 %877, %872
  br i1 %878, label %879, label %880

879:                                              ; preds = %876
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %6, i64 %872) #13
  br label %880

880:                                              ; preds = %879, %876
  %881 = load i8*, i8** %32, align 8, !alias.scope !85
  %882 = icmp eq i8* %881, null
  %883 = select i1 %882, i64 0, i64 %872
  store i64 %883, i64* %30, align 8, !alias.scope !85
  br label %884

884:                                              ; preds = %874, %880
  %885 = phi i8* [ %875, %874 ], [ %881, %880 ]
  %886 = getelementptr inbounds i8, i8* %885, i64 %871
  %887 = bitcast i8* %886 to i32*
  store i32 1684105315, i32* %887, align 1
  %888 = load i64, i64* %30, align 8, !alias.scope !82
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %888, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %889 = load i64*, i64** %298, align 8
  %890 = load i64*, i64** %299, align 8
  %891 = icmp eq i64* %889, %890
  %892 = ptrtoint i64* %890 to i64
  br i1 %891, label %897, label %893

893:                                              ; preds = %884
  store i64 %575, i64* %889, align 8
  %894 = getelementptr inbounds i64, i64* %889, i64 1
  %895 = ptrtoint i64* %894 to i64
  %896 = bitcast i64** %298 to i64*
  store i64 %895, i64* %896, align 8
  br label %943

897:                                              ; preds = %884
  %898 = ptrtoint i64* %889 to i64
  %899 = bitcast i64** %298 to i64*
  %900 = bitcast %"class.std::__1::vector.4"* %8 to i64*
  %901 = load i64, i64* %900, align 8
  %902 = sub i64 %898, %901
  %903 = ashr exact i64 %902, 3
  %904 = add nsw i64 %903, 1
  %905 = icmp ugt i64 %904, 2305843009213693951
  br i1 %905, label %906, label %908

906:                                              ; preds = %897
  %907 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %907) #14
  unreachable

908:                                              ; preds = %897
  %909 = bitcast i64** %299 to i64*
  %910 = sub i64 %892, %901
  %911 = ashr exact i64 %910, 3
  %912 = icmp ult i64 %911, 1152921504606846975
  br i1 %912, label %913, label %921

913:                                              ; preds = %908
  %914 = ashr exact i64 %910, 2
  %915 = icmp ult i64 %914, %904
  %916 = select i1 %915, i64 %904, i64 %914
  %917 = icmp eq i64 %916, 0
  br i1 %917, label %926, label %918

918:                                              ; preds = %913
  %919 = icmp ugt i64 %916, 2305843009213693951
  br i1 %919, label %920, label %921

920:                                              ; preds = %918
  call void @abort() #14
  unreachable

921:                                              ; preds = %918, %908
  %922 = phi i64 [ %916, %918 ], [ 2305843009213693951, %908 ]
  %923 = shl i64 %922, 3
  %924 = call i8* @_Znwm(i64 %923) #15
  %925 = bitcast i8* %924 to i64*
  br label %926

926:                                              ; preds = %921, %913
  %927 = phi i64 [ %922, %921 ], [ 0, %913 ]
  %928 = phi i8* [ %924, %921 ], [ null, %913 ]
  %929 = phi i64* [ %925, %921 ], [ null, %913 ]
  %930 = getelementptr inbounds i64, i64* %929, i64 %903
  %931 = getelementptr inbounds i64, i64* %929, i64 %927
  %932 = ptrtoint i64* %931 to i64
  store i64 %575, i64* %930, align 8
  %933 = getelementptr inbounds i64, i64* %930, i64 1
  %934 = ptrtoint i64* %933 to i64
  %935 = ptrtoint i64* %929 to i64
  %936 = icmp sgt i64 %902, 0
  br i1 %936, label %937, label %939

937:                                              ; preds = %926
  %938 = inttoptr i64 %901 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %928, i8* align 8 %938, i64 %902, i1 false) #13
  br label %939

939:                                              ; preds = %937, %926
  store i64 %935, i64* %900, align 8
  store i64 %934, i64* %899, align 8
  store i64 %932, i64* %909, align 8
  %940 = icmp eq i64 %901, 0
  br i1 %940, label %943, label %941

941:                                              ; preds = %939
  %942 = inttoptr i64 %901 to i8*
  call void @_ZdlPv(i8* %942) #15
  br label %943

943:                                              ; preds = %893, %939, %941
  %944 = trunc i64 %870 to i32
  %945 = load i64, i64* %30, align 8, !alias.scope !82
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %944, i64 %945, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %946 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115CreateICCXYZTagEPfPNS_11PaddedBytesE(float* nonnull %734, %"class.jxl::PaddedBytes"* nonnull %7)
  %947 = icmp eq i32 %946, 0
  br i1 %947, label %948, label %1261

948:                                              ; preds = %943
  %949 = load i64, i64* %34, align 8, !alias.scope !88
  %950 = and i64 %949, 3
  %951 = icmp eq i64 %950, 0
  br i1 %951, label %973, label %952

952:                                              ; preds = %948, %969
  %953 = phi i64 [ %970, %969 ], [ %949, %948 ]
  %954 = load i64, i64* %35, align 8, !alias.scope !88
  %955 = icmp eq i64 %953, %954
  br i1 %955, label %958, label %956

956:                                              ; preds = %952
  %957 = load i8*, i8** %36, align 8, !alias.scope !88
  br label %964

958:                                              ; preds = %952
  %959 = add i64 %953, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %7, i64 %959) #13
  %960 = load i8*, i8** %36, align 8, !alias.scope !88
  %961 = icmp eq i8* %960, null
  br i1 %961, label %969, label %962

962:                                              ; preds = %958
  %963 = load i64, i64* %34, align 8, !alias.scope !88
  br label %964

964:                                              ; preds = %962, %956
  %965 = phi i8* [ %960, %962 ], [ %957, %956 ]
  %966 = phi i64 [ %963, %962 ], [ %953, %956 ]
  %967 = add i64 %966, 1
  store i64 %967, i64* %34, align 8, !alias.scope !88
  %968 = getelementptr inbounds i8, i8* %965, i64 %966
  store i8 0, i8* %968, align 1
  br label %969

969:                                              ; preds = %964, %958
  %970 = load i64, i64* %34, align 8, !alias.scope !88
  %971 = and i64 %970, 3
  %972 = icmp eq i64 %971, 0
  br i1 %972, label %973, label %952

973:                                              ; preds = %969, %948
  %974 = phi i64 [ %949, %948 ], [ %970, %969 ]
  %975 = sub i64 %974, %869
  %976 = load i64, i64* %30, align 8, !alias.scope !91
  %977 = add i64 %976, 4
  %978 = icmp ult i64 %976, -4
  br i1 %978, label %981, label %979

979:                                              ; preds = %973
  %980 = load i8*, i8** %32, align 8, !alias.scope !94
  br label %989

981:                                              ; preds = %973
  %982 = load i64, i64* %31, align 8, !alias.scope !94
  %983 = icmp ult i64 %982, %977
  br i1 %983, label %984, label %985

984:                                              ; preds = %981
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %6, i64 %977) #13
  br label %985

985:                                              ; preds = %984, %981
  %986 = load i8*, i8** %32, align 8, !alias.scope !94
  %987 = icmp eq i8* %986, null
  %988 = select i1 %987, i64 0, i64 %977
  store i64 %988, i64* %30, align 8, !alias.scope !94
  br label %989

989:                                              ; preds = %979, %985
  %990 = phi i8* [ %980, %979 ], [ %986, %985 ]
  %991 = getelementptr inbounds i8, i8* %990, i64 %976
  %992 = bitcast i8* %991 to i32*
  store i32 1515804786, i32* %992, align 1
  %993 = load i64, i64* %30, align 8, !alias.scope !91
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %993, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %994 = load i64*, i64** %298, align 8
  %995 = load i64*, i64** %299, align 8
  %996 = icmp eq i64* %994, %995
  %997 = ptrtoint i64* %995 to i64
  br i1 %996, label %1002, label %998

998:                                              ; preds = %989
  store i64 %869, i64* %994, align 8
  %999 = getelementptr inbounds i64, i64* %994, i64 1
  %1000 = ptrtoint i64* %999 to i64
  %1001 = bitcast i64** %298 to i64*
  store i64 %1000, i64* %1001, align 8
  br label %1048

1002:                                             ; preds = %989
  %1003 = ptrtoint i64* %994 to i64
  %1004 = bitcast i64** %298 to i64*
  %1005 = bitcast %"class.std::__1::vector.4"* %8 to i64*
  %1006 = load i64, i64* %1005, align 8
  %1007 = sub i64 %1003, %1006
  %1008 = ashr exact i64 %1007, 3
  %1009 = add nsw i64 %1008, 1
  %1010 = icmp ugt i64 %1009, 2305843009213693951
  br i1 %1010, label %1011, label %1013

1011:                                             ; preds = %1002
  %1012 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1012) #14
  unreachable

1013:                                             ; preds = %1002
  %1014 = bitcast i64** %299 to i64*
  %1015 = sub i64 %997, %1006
  %1016 = ashr exact i64 %1015, 3
  %1017 = icmp ult i64 %1016, 1152921504606846975
  br i1 %1017, label %1018, label %1026

1018:                                             ; preds = %1013
  %1019 = ashr exact i64 %1015, 2
  %1020 = icmp ult i64 %1019, %1009
  %1021 = select i1 %1020, i64 %1009, i64 %1019
  %1022 = icmp eq i64 %1021, 0
  br i1 %1022, label %1031, label %1023

1023:                                             ; preds = %1018
  %1024 = icmp ugt i64 %1021, 2305843009213693951
  br i1 %1024, label %1025, label %1026

1025:                                             ; preds = %1023
  call void @abort() #14
  unreachable

1026:                                             ; preds = %1023, %1013
  %1027 = phi i64 [ %1021, %1023 ], [ 2305843009213693951, %1013 ]
  %1028 = shl i64 %1027, 3
  %1029 = call i8* @_Znwm(i64 %1028) #15
  %1030 = bitcast i8* %1029 to i64*
  br label %1031

1031:                                             ; preds = %1026, %1018
  %1032 = phi i64 [ %1027, %1026 ], [ 0, %1018 ]
  %1033 = phi i8* [ %1029, %1026 ], [ null, %1018 ]
  %1034 = phi i64* [ %1030, %1026 ], [ null, %1018 ]
  %1035 = getelementptr inbounds i64, i64* %1034, i64 %1008
  %1036 = getelementptr inbounds i64, i64* %1034, i64 %1032
  %1037 = ptrtoint i64* %1036 to i64
  store i64 %869, i64* %1035, align 8
  %1038 = getelementptr inbounds i64, i64* %1035, i64 1
  %1039 = ptrtoint i64* %1038 to i64
  %1040 = ptrtoint i64* %1034 to i64
  %1041 = icmp sgt i64 %1007, 0
  br i1 %1041, label %1042, label %1044

1042:                                             ; preds = %1031
  %1043 = inttoptr i64 %1006 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1033, i8* align 8 %1043, i64 %1007, i1 false) #13
  br label %1044

1044:                                             ; preds = %1042, %1031
  store i64 %1040, i64* %1005, align 8
  store i64 %1039, i64* %1004, align 8
  store i64 %1037, i64* %1014, align 8
  %1045 = icmp eq i64 %1006, 0
  br i1 %1045, label %1048, label %1046

1046:                                             ; preds = %1044
  %1047 = inttoptr i64 %1006 to i8*
  call void @_ZdlPv(i8* %1047) #15
  br label %1048

1048:                                             ; preds = %998, %1044, %1046
  %1049 = trunc i64 %975 to i32
  %1050 = load i64, i64* %30, align 8, !alias.scope !91
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %1049, i64 %1050, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %1051 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115CreateICCXYZTagEPfPNS_11PaddedBytesE(float* nonnull %741, %"class.jxl::PaddedBytes"* nonnull %7)
  %1052 = icmp eq i32 %1051, 0
  br i1 %1052, label %1053, label %1261

1053:                                             ; preds = %1048
  %1054 = load i64, i64* %34, align 8, !alias.scope !97
  %1055 = and i64 %1054, 3
  %1056 = icmp eq i64 %1055, 0
  br i1 %1056, label %1078, label %1057

1057:                                             ; preds = %1053, %1074
  %1058 = phi i64 [ %1075, %1074 ], [ %1054, %1053 ]
  %1059 = load i64, i64* %35, align 8, !alias.scope !97
  %1060 = icmp eq i64 %1058, %1059
  br i1 %1060, label %1063, label %1061

1061:                                             ; preds = %1057
  %1062 = load i8*, i8** %36, align 8, !alias.scope !97
  br label %1069

1063:                                             ; preds = %1057
  %1064 = add i64 %1058, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %7, i64 %1064) #13
  %1065 = load i8*, i8** %36, align 8, !alias.scope !97
  %1066 = icmp eq i8* %1065, null
  br i1 %1066, label %1074, label %1067

1067:                                             ; preds = %1063
  %1068 = load i64, i64* %34, align 8, !alias.scope !97
  br label %1069

1069:                                             ; preds = %1067, %1061
  %1070 = phi i8* [ %1065, %1067 ], [ %1062, %1061 ]
  %1071 = phi i64 [ %1068, %1067 ], [ %1058, %1061 ]
  %1072 = add i64 %1071, 1
  store i64 %1072, i64* %34, align 8, !alias.scope !97
  %1073 = getelementptr inbounds i8, i8* %1070, i64 %1071
  store i8 0, i8* %1073, align 1
  br label %1074

1074:                                             ; preds = %1069, %1063
  %1075 = load i64, i64* %34, align 8, !alias.scope !97
  %1076 = and i64 %1075, 3
  %1077 = icmp eq i64 %1076, 0
  br i1 %1077, label %1078, label %1057

1078:                                             ; preds = %1074, %1053
  %1079 = phi i64 [ %1054, %1053 ], [ %1075, %1074 ]
  %1080 = sub i64 %1079, %974
  %1081 = load i64, i64* %30, align 8, !alias.scope !100
  %1082 = add i64 %1081, 4
  %1083 = icmp ult i64 %1081, -4
  br i1 %1083, label %1086, label %1084

1084:                                             ; preds = %1078
  %1085 = load i8*, i8** %32, align 8, !alias.scope !103
  br label %1094

1086:                                             ; preds = %1078
  %1087 = load i64, i64* %31, align 8, !alias.scope !103
  %1088 = icmp ult i64 %1087, %1082
  br i1 %1088, label %1089, label %1090

1089:                                             ; preds = %1086
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %6, i64 %1082) #13
  br label %1090

1090:                                             ; preds = %1089, %1086
  %1091 = load i8*, i8** %32, align 8, !alias.scope !103
  %1092 = icmp eq i8* %1091, null
  %1093 = select i1 %1092, i64 0, i64 %1082
  store i64 %1093, i64* %30, align 8, !alias.scope !103
  br label %1094

1094:                                             ; preds = %1084, %1090
  %1095 = phi i8* [ %1085, %1084 ], [ %1091, %1090 ]
  %1096 = getelementptr inbounds i8, i8* %1095, i64 %1081
  %1097 = bitcast i8* %1096 to i32*
  store i32 1515804775, i32* %1097, align 1
  %1098 = load i64, i64* %30, align 8, !alias.scope !100
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %1098, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %1099 = load i64*, i64** %298, align 8
  %1100 = load i64*, i64** %299, align 8
  %1101 = icmp eq i64* %1099, %1100
  %1102 = ptrtoint i64* %1100 to i64
  br i1 %1101, label %1107, label %1103

1103:                                             ; preds = %1094
  store i64 %974, i64* %1099, align 8
  %1104 = getelementptr inbounds i64, i64* %1099, i64 1
  %1105 = ptrtoint i64* %1104 to i64
  %1106 = bitcast i64** %298 to i64*
  store i64 %1105, i64* %1106, align 8
  br label %1153

1107:                                             ; preds = %1094
  %1108 = ptrtoint i64* %1099 to i64
  %1109 = bitcast i64** %298 to i64*
  %1110 = bitcast %"class.std::__1::vector.4"* %8 to i64*
  %1111 = load i64, i64* %1110, align 8
  %1112 = sub i64 %1108, %1111
  %1113 = ashr exact i64 %1112, 3
  %1114 = add nsw i64 %1113, 1
  %1115 = icmp ugt i64 %1114, 2305843009213693951
  br i1 %1115, label %1116, label %1118

1116:                                             ; preds = %1107
  %1117 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1117) #14
  unreachable

1118:                                             ; preds = %1107
  %1119 = bitcast i64** %299 to i64*
  %1120 = sub i64 %1102, %1111
  %1121 = ashr exact i64 %1120, 3
  %1122 = icmp ult i64 %1121, 1152921504606846975
  br i1 %1122, label %1123, label %1131

1123:                                             ; preds = %1118
  %1124 = ashr exact i64 %1120, 2
  %1125 = icmp ult i64 %1124, %1114
  %1126 = select i1 %1125, i64 %1114, i64 %1124
  %1127 = icmp eq i64 %1126, 0
  br i1 %1127, label %1136, label %1128

1128:                                             ; preds = %1123
  %1129 = icmp ugt i64 %1126, 2305843009213693951
  br i1 %1129, label %1130, label %1131

1130:                                             ; preds = %1128
  call void @abort() #14
  unreachable

1131:                                             ; preds = %1128, %1118
  %1132 = phi i64 [ %1126, %1128 ], [ 2305843009213693951, %1118 ]
  %1133 = shl i64 %1132, 3
  %1134 = call i8* @_Znwm(i64 %1133) #15
  %1135 = bitcast i8* %1134 to i64*
  br label %1136

1136:                                             ; preds = %1131, %1123
  %1137 = phi i64 [ %1132, %1131 ], [ 0, %1123 ]
  %1138 = phi i8* [ %1134, %1131 ], [ null, %1123 ]
  %1139 = phi i64* [ %1135, %1131 ], [ null, %1123 ]
  %1140 = getelementptr inbounds i64, i64* %1139, i64 %1113
  %1141 = getelementptr inbounds i64, i64* %1139, i64 %1137
  %1142 = ptrtoint i64* %1141 to i64
  store i64 %974, i64* %1140, align 8
  %1143 = getelementptr inbounds i64, i64* %1140, i64 1
  %1144 = ptrtoint i64* %1143 to i64
  %1145 = ptrtoint i64* %1139 to i64
  %1146 = icmp sgt i64 %1112, 0
  br i1 %1146, label %1147, label %1149

1147:                                             ; preds = %1136
  %1148 = inttoptr i64 %1111 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1138, i8* align 8 %1148, i64 %1112, i1 false) #13
  br label %1149

1149:                                             ; preds = %1147, %1136
  store i64 %1145, i64* %1110, align 8
  store i64 %1144, i64* %1109, align 8
  store i64 %1142, i64* %1119, align 8
  %1150 = icmp eq i64 %1111, 0
  br i1 %1150, label %1153, label %1151

1151:                                             ; preds = %1149
  %1152 = inttoptr i64 %1111 to i8*
  call void @_ZdlPv(i8* %1152) #15
  br label %1153

1153:                                             ; preds = %1103, %1149, %1151
  %1154 = trunc i64 %1080 to i32
  %1155 = load i64, i64* %30, align 8, !alias.scope !100
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %1154, i64 %1155, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %1156 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115CreateICCXYZTagEPfPNS_11PaddedBytesE(float* nonnull %748, %"class.jxl::PaddedBytes"* nonnull %7)
  %1157 = icmp eq i32 %1156, 0
  br i1 %1157, label %1158, label %1261

1158:                                             ; preds = %1153
  %1159 = load i64, i64* %34, align 8, !alias.scope !106
  %1160 = and i64 %1159, 3
  %1161 = icmp eq i64 %1160, 0
  br i1 %1161, label %1183, label %1162

1162:                                             ; preds = %1158, %1179
  %1163 = phi i64 [ %1180, %1179 ], [ %1159, %1158 ]
  %1164 = load i64, i64* %35, align 8, !alias.scope !106
  %1165 = icmp eq i64 %1163, %1164
  br i1 %1165, label %1168, label %1166

1166:                                             ; preds = %1162
  %1167 = load i8*, i8** %36, align 8, !alias.scope !106
  br label %1174

1168:                                             ; preds = %1162
  %1169 = add i64 %1163, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %7, i64 %1169) #13
  %1170 = load i8*, i8** %36, align 8, !alias.scope !106
  %1171 = icmp eq i8* %1170, null
  br i1 %1171, label %1179, label %1172

1172:                                             ; preds = %1168
  %1173 = load i64, i64* %34, align 8, !alias.scope !106
  br label %1174

1174:                                             ; preds = %1172, %1166
  %1175 = phi i8* [ %1170, %1172 ], [ %1167, %1166 ]
  %1176 = phi i64 [ %1173, %1172 ], [ %1163, %1166 ]
  %1177 = add i64 %1176, 1
  store i64 %1177, i64* %34, align 8, !alias.scope !106
  %1178 = getelementptr inbounds i8, i8* %1175, i64 %1176
  store i8 0, i8* %1178, align 1
  br label %1179

1179:                                             ; preds = %1174, %1168
  %1180 = load i64, i64* %34, align 8, !alias.scope !106
  %1181 = and i64 %1180, 3
  %1182 = icmp eq i64 %1181, 0
  br i1 %1182, label %1183, label %1162

1183:                                             ; preds = %1179, %1158
  %1184 = phi i64 [ %1159, %1158 ], [ %1180, %1179 ]
  %1185 = sub i64 %1184, %1079
  %1186 = load i64, i64* %30, align 8, !alias.scope !109
  %1187 = add i64 %1186, 4
  %1188 = icmp ult i64 %1186, -4
  br i1 %1188, label %1191, label %1189

1189:                                             ; preds = %1183
  %1190 = load i8*, i8** %32, align 8, !alias.scope !112
  br label %1199

1191:                                             ; preds = %1183
  %1192 = load i64, i64* %31, align 8, !alias.scope !112
  %1193 = icmp ult i64 %1192, %1187
  br i1 %1193, label %1194, label %1195

1194:                                             ; preds = %1191
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %6, i64 %1187) #13
  br label %1195

1195:                                             ; preds = %1194, %1191
  %1196 = load i8*, i8** %32, align 8, !alias.scope !112
  %1197 = icmp eq i8* %1196, null
  %1198 = select i1 %1197, i64 0, i64 %1187
  store i64 %1198, i64* %30, align 8, !alias.scope !112
  br label %1199

1199:                                             ; preds = %1189, %1195
  %1200 = phi i8* [ %1190, %1189 ], [ %1196, %1195 ]
  %1201 = getelementptr inbounds i8, i8* %1200, i64 %1186
  %1202 = bitcast i8* %1201 to i32*
  store i32 1515804770, i32* %1202, align 1
  %1203 = load i64, i64* %30, align 8, !alias.scope !109
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %1203, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %1204 = load i64*, i64** %298, align 8
  %1205 = load i64*, i64** %299, align 8
  %1206 = icmp eq i64* %1204, %1205
  %1207 = ptrtoint i64* %1205 to i64
  br i1 %1206, label %1212, label %1208

1208:                                             ; preds = %1199
  store i64 %1079, i64* %1204, align 8
  %1209 = getelementptr inbounds i64, i64* %1204, i64 1
  %1210 = ptrtoint i64* %1209 to i64
  %1211 = bitcast i64** %298 to i64*
  store i64 %1210, i64* %1211, align 8
  br label %1258

1212:                                             ; preds = %1199
  %1213 = ptrtoint i64* %1204 to i64
  %1214 = bitcast i64** %298 to i64*
  %1215 = bitcast %"class.std::__1::vector.4"* %8 to i64*
  %1216 = load i64, i64* %1215, align 8
  %1217 = sub i64 %1213, %1216
  %1218 = ashr exact i64 %1217, 3
  %1219 = add nsw i64 %1218, 1
  %1220 = icmp ugt i64 %1219, 2305843009213693951
  br i1 %1220, label %1221, label %1223

1221:                                             ; preds = %1212
  %1222 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1222) #14
  unreachable

1223:                                             ; preds = %1212
  %1224 = bitcast i64** %299 to i64*
  %1225 = sub i64 %1207, %1216
  %1226 = ashr exact i64 %1225, 3
  %1227 = icmp ult i64 %1226, 1152921504606846975
  br i1 %1227, label %1228, label %1236

1228:                                             ; preds = %1223
  %1229 = ashr exact i64 %1225, 2
  %1230 = icmp ult i64 %1229, %1219
  %1231 = select i1 %1230, i64 %1219, i64 %1229
  %1232 = icmp eq i64 %1231, 0
  br i1 %1232, label %1241, label %1233

1233:                                             ; preds = %1228
  %1234 = icmp ugt i64 %1231, 2305843009213693951
  br i1 %1234, label %1235, label %1236

1235:                                             ; preds = %1233
  call void @abort() #14
  unreachable

1236:                                             ; preds = %1233, %1223
  %1237 = phi i64 [ %1231, %1233 ], [ 2305843009213693951, %1223 ]
  %1238 = shl i64 %1237, 3
  %1239 = call i8* @_Znwm(i64 %1238) #15
  %1240 = bitcast i8* %1239 to i64*
  br label %1241

1241:                                             ; preds = %1236, %1228
  %1242 = phi i64 [ %1237, %1236 ], [ 0, %1228 ]
  %1243 = phi i8* [ %1239, %1236 ], [ null, %1228 ]
  %1244 = phi i64* [ %1240, %1236 ], [ null, %1228 ]
  %1245 = getelementptr inbounds i64, i64* %1244, i64 %1218
  %1246 = getelementptr inbounds i64, i64* %1244, i64 %1242
  %1247 = ptrtoint i64* %1246 to i64
  store i64 %1079, i64* %1245, align 8
  %1248 = getelementptr inbounds i64, i64* %1245, i64 1
  %1249 = ptrtoint i64* %1248 to i64
  %1250 = ptrtoint i64* %1244 to i64
  %1251 = icmp sgt i64 %1217, 0
  br i1 %1251, label %1252, label %1254

1252:                                             ; preds = %1241
  %1253 = inttoptr i64 %1216 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1243, i8* align 8 %1253, i64 %1217, i1 false) #13
  br label %1254

1254:                                             ; preds = %1252, %1241
  store i64 %1250, i64* %1215, align 8
  store i64 %1249, i64* %1214, align 8
  store i64 %1247, i64* %1224, align 8
  %1255 = icmp eq i64 %1216, 0
  br i1 %1255, label %1258, label %1256

1256:                                             ; preds = %1254
  %1257 = inttoptr i64 %1216 to i8*
  call void @_ZdlPv(i8* %1257) #15
  br label %1258

1258:                                             ; preds = %1208, %1254, %1256
  %1259 = trunc i64 %1185 to i32
  %1260 = load i64, i64* %30, align 8, !alias.scope !109
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %1259, i64 %1260, %"class.jxl::PaddedBytes"* nonnull %6) #13
  br label %1261

1261:                                             ; preds = %1258, %767, %775, %783, %791, %799, %807, %815, %823, %831, %943, %1048, %1153
  %1262 = phi i64 [ %1185, %1258 ], [ %576, %767 ], [ %576, %775 ], [ %576, %783 ], [ %576, %791 ], [ %576, %799 ], [ %576, %807 ], [ %576, %815 ], [ %576, %823 ], [ %576, %831 ], [ %870, %943 ], [ %975, %1048 ], [ %1080, %1153 ]
  %1263 = phi i64 [ %1079, %1258 ], [ %442, %767 ], [ %442, %775 ], [ %442, %783 ], [ %442, %791 ], [ %442, %799 ], [ %442, %807 ], [ %442, %815 ], [ %442, %823 ], [ %442, %831 ], [ %575, %943 ], [ %869, %1048 ], [ %974, %1153 ]
  %1264 = phi i32 [ 0, %1258 ], [ 1, %767 ], [ 1, %775 ], [ 1, %783 ], [ 1, %791 ], [ 1, %799 ], [ 1, %807 ], [ 1, %815 ], [ 1, %823 ], [ 1, %831 ], [ %946, %943 ], [ %1051, %1048 ], [ %1156, %1153 ]
  %1265 = phi i1 [ true, %1258 ], [ false, %767 ], [ false, %775 ], [ false, %783 ], [ false, %791 ], [ false, %799 ], [ false, %807 ], [ false, %815 ], [ false, %823 ], [ false, %831 ], [ false, %943 ], [ false, %1048 ], [ false, %1153 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %747) #13
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %740) #13
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %733) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %686) #13
  br i1 %1265, label %1266, label %2051

1266:                                             ; preds = %1261, %649
  %1267 = phi i64 [ %576, %649 ], [ %1262, %1261 ]
  %1268 = phi i64 [ %442, %649 ], [ %1263, %1261 ]
  %1269 = load i8, i8* %42, align 4, !range !2
  %1270 = icmp eq i8 %1269, 0
  br i1 %1270, label %1292, label %1271

1271:                                             ; preds = %1266
  %1272 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 4, i32 3
  %1273 = load i32, i32* %1272, align 8
  %1274 = uitofp i32 %1273 to double
  %1275 = fmul double %1274, 0x3E7AD7F29ABCAF48
  %1276 = fdiv double 1.000000e+00, %1275
  %1277 = fptrunc double %1276 to float
  %1278 = call i8* @_Znwm(i64 20) #15
  %1279 = bitcast i8* %1278 to float*
  %1280 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %17, i64 0, i32 0, i32 1
  %1281 = bitcast %"class.std::__1::vector.16"* %17 to i8**
  store i8* %1278, i8** %1281, align 8
  %1282 = getelementptr inbounds i8, i8* %1278, i64 20
  %1283 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %17, i64 0, i32 0, i32 2, i32 0, i32 0
  %1284 = bitcast float** %1283 to i8**
  store i8* %1282, i8** %1284, align 8
  %1285 = bitcast float** %1280 to i64*
  store float %1277, float* %1279, align 4
  %1286 = getelementptr inbounds i8, i8* %1278, i64 4
  %1287 = bitcast i8* %1286 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00>, <4 x float>* %1287, align 4
  %1288 = ptrtoint i8* %1282 to i64
  store i64 %1288, i64* %1285, align 8
  %1289 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_120CreateICCCurvParaTagENSt3__16vectorIfNS1_9allocatorIfEEEEmPNS_11PaddedBytesE(%"class.std::__1::vector.16"* nonnull %17, %"class.jxl::PaddedBytes"* nonnull %7)
  %1290 = ptrtoint i8* %1278 to i64
  store i64 %1290, i64* %1285, align 8
  call void @_ZdlPv(i8* nonnull %1278) #15
  %1291 = icmp eq i32 %1289, 0
  br i1 %1291, label %1381, label %2051

1292:                                             ; preds = %1266
  %1293 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 4, i32 4
  %1294 = load i32, i32* %1293, align 4
  switch i32 %1294, label %1377 [
    i32 18, label %1295
    i32 16, label %1312
    i32 13, label %1329
    i32 1, label %1341
    i32 8, label %1353
    i32 17, label %1365
  ]

1295:                                             ; preds = %1292
  %1296 = bitcast %"class.std::__1::vector"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1296) #13
  %1297 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %1298 = and i32 %1297, 2225
  %1299 = call i32 @llvm.cttz.i32(i32 %1298, i1 true) #13, !range !115
  %1300 = zext i32 %1299 to i64
  %1301 = getelementptr inbounds [12 x void (%"class.std::__1::vector"*, i32, i32)*], [12 x void (%"class.std::__1::vector"*, i32, i32)*]* @_ZN3jxlL36CreateTableCurveHighwayDispatchTableE, i64 0, i64 %1300
  %1302 = load void (%"class.std::__1::vector"*, i32, i32)*, void (%"class.std::__1::vector"*, i32, i32)** %1301, align 8
  call void %1302(%"class.std::__1::vector"* nonnull sret %18, i32 4096, i32 2) #13
  call fastcc void @_ZN3jxl12_GLOBAL__N_120CreateICCCurvCurvTagERKNSt3__16vectorItNS1_9allocatorItEEEEPNS_11PaddedBytesE(%"class.std::__1::vector"* nonnull dereferenceable(24) %18, %"class.jxl::PaddedBytes"* nonnull %7)
  %1303 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %18, i64 0, i32 0, i32 0
  %1304 = load i16*, i16** %1303, align 8
  %1305 = icmp eq i16* %1304, null
  br i1 %1305, label %1311, label %1306

1306:                                             ; preds = %1295
  %1307 = ptrtoint i16* %1304 to i64
  %1308 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %18, i64 0, i32 0, i32 1
  %1309 = bitcast i16** %1308 to i64*
  store i64 %1307, i64* %1309, align 8
  %1310 = bitcast i16* %1304 to i8*
  call void @_ZdlPv(i8* %1310) #15
  br label %1311

1311:                                             ; preds = %1295, %1306
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1296) #13
  br label %1381

1312:                                             ; preds = %1292
  %1313 = bitcast %"class.std::__1::vector"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1313) #13
  %1314 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %1315 = and i32 %1314, 2225
  %1316 = call i32 @llvm.cttz.i32(i32 %1315, i1 true) #13, !range !115
  %1317 = zext i32 %1316 to i64
  %1318 = getelementptr inbounds [12 x void (%"class.std::__1::vector"*, i32, i32)*], [12 x void (%"class.std::__1::vector"*, i32, i32)*]* @_ZN3jxlL36CreateTableCurveHighwayDispatchTableE, i64 0, i64 %1317
  %1319 = load void (%"class.std::__1::vector"*, i32, i32)*, void (%"class.std::__1::vector"*, i32, i32)** %1318, align 8
  call void %1319(%"class.std::__1::vector"* nonnull sret %19, i32 4096, i32 1) #13
  call fastcc void @_ZN3jxl12_GLOBAL__N_120CreateICCCurvCurvTagERKNSt3__16vectorItNS1_9allocatorItEEEEPNS_11PaddedBytesE(%"class.std::__1::vector"* nonnull dereferenceable(24) %19, %"class.jxl::PaddedBytes"* nonnull %7)
  %1320 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %19, i64 0, i32 0, i32 0
  %1321 = load i16*, i16** %1320, align 8
  %1322 = icmp eq i16* %1321, null
  br i1 %1322, label %1328, label %1323

1323:                                             ; preds = %1312
  %1324 = ptrtoint i16* %1321 to i64
  %1325 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %19, i64 0, i32 0, i32 1
  %1326 = bitcast i16** %1325 to i64*
  store i64 %1324, i64* %1326, align 8
  %1327 = bitcast i16* %1321 to i8*
  call void @_ZdlPv(i8* %1327) #15
  br label %1328

1328:                                             ; preds = %1312, %1323
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1313) #13
  br label %1381

1329:                                             ; preds = %1292
  %1330 = call i8* @_Znwm(i64 20) #15
  %1331 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %20, i64 0, i32 0, i32 1
  %1332 = bitcast %"class.std::__1::vector.16"* %20 to i8**
  store i8* %1330, i8** %1332, align 8
  %1333 = getelementptr inbounds i8, i8* %1330, i64 20
  %1334 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %20, i64 0, i32 0, i32 2, i32 0, i32 0
  %1335 = bitcast float** %1334 to i8**
  store i8* %1333, i8** %1335, align 8
  %1336 = bitcast float** %1331 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1330, i8* align 4 bitcast ([5 x float]* @.ref.tmp to i8*), i64 20, i1 false) #13
  %1337 = ptrtoint i8* %1333 to i64
  store i64 %1337, i64* %1336, align 8
  %1338 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_120CreateICCCurvParaTagENSt3__16vectorIfNS1_9allocatorIfEEEEmPNS_11PaddedBytesE(%"class.std::__1::vector.16"* nonnull %20, %"class.jxl::PaddedBytes"* nonnull %7)
  %1339 = ptrtoint i8* %1330 to i64
  store i64 %1339, i64* %1336, align 8
  call void @_ZdlPv(i8* nonnull %1330) #15
  %1340 = icmp eq i32 %1338, 0
  br i1 %1340, label %1381, label %2051

1341:                                             ; preds = %1292
  %1342 = call i8* @_Znwm(i64 20) #15
  %1343 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %21, i64 0, i32 0, i32 1
  %1344 = bitcast %"class.std::__1::vector.16"* %21 to i8**
  store i8* %1342, i8** %1344, align 8
  %1345 = getelementptr inbounds i8, i8* %1342, i64 20
  %1346 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %21, i64 0, i32 0, i32 2, i32 0, i32 0
  %1347 = bitcast float** %1346 to i8**
  store i8* %1345, i8** %1347, align 8
  %1348 = bitcast float** %1343 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1342, i8* align 4 bitcast ([5 x float]* @.ref.tmp.29 to i8*), i64 20, i1 false) #13
  %1349 = ptrtoint i8* %1345 to i64
  store i64 %1349, i64* %1348, align 8
  %1350 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_120CreateICCCurvParaTagENSt3__16vectorIfNS1_9allocatorIfEEEEmPNS_11PaddedBytesE(%"class.std::__1::vector.16"* nonnull %21, %"class.jxl::PaddedBytes"* nonnull %7)
  %1351 = ptrtoint i8* %1342 to i64
  store i64 %1351, i64* %1348, align 8
  call void @_ZdlPv(i8* nonnull %1342) #15
  %1352 = icmp eq i32 %1350, 0
  br i1 %1352, label %1381, label %2051

1353:                                             ; preds = %1292
  %1354 = call i8* @_Znwm(i64 20) #15
  %1355 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %22, i64 0, i32 0, i32 1
  %1356 = bitcast %"class.std::__1::vector.16"* %22 to i8**
  store i8* %1354, i8** %1356, align 8
  %1357 = getelementptr inbounds i8, i8* %1354, i64 20
  %1358 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %22, i64 0, i32 0, i32 2, i32 0, i32 0
  %1359 = bitcast float** %1358 to i8**
  store i8* %1357, i8** %1359, align 8
  %1360 = bitcast float** %1355 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1354, i8* align 4 bitcast ([5 x float]* @.ref.tmp.31 to i8*), i64 20, i1 false) #13
  %1361 = ptrtoint i8* %1357 to i64
  store i64 %1361, i64* %1360, align 8
  %1362 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_120CreateICCCurvParaTagENSt3__16vectorIfNS1_9allocatorIfEEEEmPNS_11PaddedBytesE(%"class.std::__1::vector.16"* nonnull %22, %"class.jxl::PaddedBytes"* nonnull %7)
  %1363 = ptrtoint i8* %1354 to i64
  store i64 %1363, i64* %1360, align 8
  call void @_ZdlPv(i8* nonnull %1354) #15
  %1364 = icmp eq i32 %1362, 0
  br i1 %1364, label %1381, label %2051

1365:                                             ; preds = %1292
  %1366 = call i8* @_Znwm(i64 20) #15
  %1367 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %23, i64 0, i32 0, i32 1
  %1368 = bitcast %"class.std::__1::vector.16"* %23 to i8**
  store i8* %1366, i8** %1368, align 8
  %1369 = getelementptr inbounds i8, i8* %1366, i64 20
  %1370 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %23, i64 0, i32 0, i32 2, i32 0, i32 0
  %1371 = bitcast float** %1370 to i8**
  store i8* %1369, i8** %1371, align 8
  %1372 = bitcast float** %1367 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1366, i8* align 4 bitcast ([5 x float]* @.ref.tmp.33 to i8*), i64 20, i1 false) #13
  %1373 = ptrtoint i8* %1369 to i64
  store i64 %1373, i64* %1372, align 8
  %1374 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_120CreateICCCurvParaTagENSt3__16vectorIfNS1_9allocatorIfEEEEmPNS_11PaddedBytesE(%"class.std::__1::vector.16"* nonnull %23, %"class.jxl::PaddedBytes"* nonnull %7)
  %1375 = ptrtoint i8* %1366 to i64
  store i64 %1375, i64* %1372, align 8
  call void @_ZdlPv(i8* nonnull %1366) #15
  %1376 = icmp eq i32 %1374, 0
  br i1 %1376, label %1381, label %2051

1377:                                             ; preds = %1292
  %1378 = call i32 @_ZNK3jxl22CustomTransferFunction19GetTransferFunctionEv(%"struct.jxl::CustomTransferFunction"* %41)
  %1379 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 485, i32 %1378) #13
  %1380 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

1381:                                             ; preds = %1271, %1311, %1328, %1329, %1341, %1353, %1365
  %1382 = load i64, i64* %34, align 8, !alias.scope !116
  %1383 = and i64 %1382, 3
  %1384 = icmp eq i64 %1383, 0
  br i1 %1384, label %1406, label %1385

1385:                                             ; preds = %1381, %1402
  %1386 = phi i64 [ %1403, %1402 ], [ %1382, %1381 ]
  %1387 = load i64, i64* %35, align 8, !alias.scope !116
  %1388 = icmp eq i64 %1386, %1387
  br i1 %1388, label %1391, label %1389

1389:                                             ; preds = %1385
  %1390 = load i8*, i8** %36, align 8, !alias.scope !116
  br label %1397

1391:                                             ; preds = %1385
  %1392 = add i64 %1386, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %7, i64 %1392) #13
  %1393 = load i8*, i8** %36, align 8, !alias.scope !116
  %1394 = icmp eq i8* %1393, null
  br i1 %1394, label %1402, label %1395

1395:                                             ; preds = %1391
  %1396 = load i64, i64* %34, align 8, !alias.scope !116
  br label %1397

1397:                                             ; preds = %1395, %1389
  %1398 = phi i8* [ %1393, %1395 ], [ %1390, %1389 ]
  %1399 = phi i64 [ %1396, %1395 ], [ %1386, %1389 ]
  %1400 = add i64 %1399, 1
  store i64 %1400, i64* %34, align 8, !alias.scope !116
  %1401 = getelementptr inbounds i8, i8* %1398, i64 %1399
  store i8 0, i8* %1401, align 1
  br label %1402

1402:                                             ; preds = %1397, %1391
  %1403 = load i64, i64* %34, align 8, !alias.scope !116
  %1404 = and i64 %1403, 3
  %1405 = icmp eq i64 %1404, 0
  br i1 %1405, label %1406, label %1385

1406:                                             ; preds = %1402, %1381
  %1407 = phi i64 [ %1382, %1381 ], [ %1403, %1402 ]
  %1408 = add i64 %1268, %1267
  %1409 = sub i64 %1407, %1408
  %1410 = load i32, i32* %37, align 8
  %1411 = icmp eq i32 %1410, 1
  %1412 = load i64, i64* %30, align 8
  %1413 = add i64 %1412, 4
  %1414 = icmp ult i64 %1412, -4
  br i1 %1411, label %1415, label %1487

1415:                                             ; preds = %1406
  br i1 %1414, label %1418, label %1416

1416:                                             ; preds = %1415
  %1417 = load i8*, i8** %32, align 8, !alias.scope !119
  br label %1426

1418:                                             ; preds = %1415
  %1419 = load i64, i64* %31, align 8, !alias.scope !119
  %1420 = icmp ult i64 %1419, %1413
  br i1 %1420, label %1421, label %1422

1421:                                             ; preds = %1418
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %6, i64 %1413) #13
  br label %1422

1422:                                             ; preds = %1421, %1418
  %1423 = load i8*, i8** %32, align 8, !alias.scope !119
  %1424 = icmp eq i8* %1423, null
  %1425 = select i1 %1424, i64 0, i64 %1413
  store i64 %1425, i64* %30, align 8, !alias.scope !119
  br label %1426

1426:                                             ; preds = %1416, %1422
  %1427 = phi i8* [ %1417, %1416 ], [ %1423, %1422 ]
  %1428 = getelementptr inbounds i8, i8* %1427, i64 %1412
  %1429 = bitcast i8* %1428 to i32*
  store i32 1129469035, i32* %1429, align 1
  %1430 = load i64, i64* %30, align 8, !alias.scope !124
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %1430, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %1431 = load i64*, i64** %298, align 8
  %1432 = load i64*, i64** %299, align 8
  %1433 = icmp eq i64* %1431, %1432
  %1434 = ptrtoint i64* %1432 to i64
  br i1 %1433, label %1439, label %1435

1435:                                             ; preds = %1426
  store i64 %1408, i64* %1431, align 8
  %1436 = getelementptr inbounds i64, i64* %1431, i64 1
  %1437 = ptrtoint i64* %1436 to i64
  %1438 = bitcast i64** %298 to i64*
  store i64 %1437, i64* %1438, align 8
  br label %1485

1439:                                             ; preds = %1426
  %1440 = ptrtoint i64* %1431 to i64
  %1441 = bitcast i64** %298 to i64*
  %1442 = bitcast %"class.std::__1::vector.4"* %8 to i64*
  %1443 = load i64, i64* %1442, align 8
  %1444 = sub i64 %1440, %1443
  %1445 = ashr exact i64 %1444, 3
  %1446 = add nsw i64 %1445, 1
  %1447 = icmp ugt i64 %1446, 2305843009213693951
  br i1 %1447, label %1448, label %1450

1448:                                             ; preds = %1439
  %1449 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1449) #14
  unreachable

1450:                                             ; preds = %1439
  %1451 = bitcast i64** %299 to i64*
  %1452 = sub i64 %1434, %1443
  %1453 = ashr exact i64 %1452, 3
  %1454 = icmp ult i64 %1453, 1152921504606846975
  br i1 %1454, label %1455, label %1463

1455:                                             ; preds = %1450
  %1456 = ashr exact i64 %1452, 2
  %1457 = icmp ult i64 %1456, %1446
  %1458 = select i1 %1457, i64 %1446, i64 %1456
  %1459 = icmp eq i64 %1458, 0
  br i1 %1459, label %1468, label %1460

1460:                                             ; preds = %1455
  %1461 = icmp ugt i64 %1458, 2305843009213693951
  br i1 %1461, label %1462, label %1463

1462:                                             ; preds = %1460
  call void @abort() #14
  unreachable

1463:                                             ; preds = %1460, %1450
  %1464 = phi i64 [ %1458, %1460 ], [ 2305843009213693951, %1450 ]
  %1465 = shl i64 %1464, 3
  %1466 = call i8* @_Znwm(i64 %1465) #15
  %1467 = bitcast i8* %1466 to i64*
  br label %1468

1468:                                             ; preds = %1463, %1455
  %1469 = phi i64 [ %1464, %1463 ], [ 0, %1455 ]
  %1470 = phi i8* [ %1466, %1463 ], [ null, %1455 ]
  %1471 = phi i64* [ %1467, %1463 ], [ null, %1455 ]
  %1472 = getelementptr inbounds i64, i64* %1471, i64 %1445
  %1473 = getelementptr inbounds i64, i64* %1471, i64 %1469
  %1474 = ptrtoint i64* %1473 to i64
  store i64 %1408, i64* %1472, align 8
  %1475 = getelementptr inbounds i64, i64* %1472, i64 1
  %1476 = ptrtoint i64* %1475 to i64
  %1477 = ptrtoint i64* %1471 to i64
  %1478 = icmp sgt i64 %1444, 0
  br i1 %1478, label %1479, label %1481

1479:                                             ; preds = %1468
  %1480 = inttoptr i64 %1443 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1470, i8* align 8 %1480, i64 %1444, i1 false) #13
  br label %1481

1481:                                             ; preds = %1479, %1468
  store i64 %1477, i64* %1442, align 8
  store i64 %1476, i64* %1441, align 8
  store i64 %1474, i64* %1451, align 8
  %1482 = icmp eq i64 %1443, 0
  br i1 %1482, label %1485, label %1483

1483:                                             ; preds = %1481
  %1484 = inttoptr i64 %1443 to i8*
  call void @_ZdlPv(i8* %1484) #15
  br label %1485

1485:                                             ; preds = %1435, %1481, %1483
  %1486 = trunc i64 %1409 to i32
  br label %1706

1487:                                             ; preds = %1406
  br i1 %1414, label %1490, label %1488

1488:                                             ; preds = %1487
  %1489 = load i8*, i8** %32, align 8, !alias.scope !125
  br label %1498

1490:                                             ; preds = %1487
  %1491 = load i64, i64* %31, align 8, !alias.scope !125
  %1492 = icmp ult i64 %1491, %1413
  br i1 %1492, label %1493, label %1494

1493:                                             ; preds = %1490
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %6, i64 %1413) #13
  br label %1494

1494:                                             ; preds = %1493, %1490
  %1495 = load i8*, i8** %32, align 8, !alias.scope !125
  %1496 = icmp eq i8* %1495, null
  %1497 = select i1 %1496, i64 0, i64 %1413
  store i64 %1497, i64* %30, align 8, !alias.scope !125
  br label %1498

1498:                                             ; preds = %1488, %1494
  %1499 = phi i8* [ %1489, %1488 ], [ %1495, %1494 ]
  %1500 = getelementptr inbounds i8, i8* %1499, i64 %1412
  %1501 = bitcast i8* %1500 to i32*
  store i32 1129469042, i32* %1501, align 1
  %1502 = load i64, i64* %30, align 8, !alias.scope !130
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %1502, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %1503 = load i64*, i64** %298, align 8
  %1504 = load i64*, i64** %299, align 8
  %1505 = icmp eq i64* %1503, %1504
  %1506 = ptrtoint i64* %1504 to i64
  br i1 %1505, label %1511, label %1507

1507:                                             ; preds = %1498
  store i64 %1408, i64* %1503, align 8
  %1508 = getelementptr inbounds i64, i64* %1503, i64 1
  %1509 = ptrtoint i64* %1508 to i64
  %1510 = bitcast i64** %298 to i64*
  store i64 %1509, i64* %1510, align 8
  br label %1557

1511:                                             ; preds = %1498
  %1512 = ptrtoint i64* %1503 to i64
  %1513 = bitcast i64** %298 to i64*
  %1514 = bitcast %"class.std::__1::vector.4"* %8 to i64*
  %1515 = load i64, i64* %1514, align 8
  %1516 = sub i64 %1512, %1515
  %1517 = ashr exact i64 %1516, 3
  %1518 = add nsw i64 %1517, 1
  %1519 = icmp ugt i64 %1518, 2305843009213693951
  br i1 %1519, label %1520, label %1522

1520:                                             ; preds = %1511
  %1521 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1521) #14
  unreachable

1522:                                             ; preds = %1511
  %1523 = bitcast i64** %299 to i64*
  %1524 = sub i64 %1506, %1515
  %1525 = ashr exact i64 %1524, 3
  %1526 = icmp ult i64 %1525, 1152921504606846975
  br i1 %1526, label %1527, label %1535

1527:                                             ; preds = %1522
  %1528 = ashr exact i64 %1524, 2
  %1529 = icmp ult i64 %1528, %1518
  %1530 = select i1 %1529, i64 %1518, i64 %1528
  %1531 = icmp eq i64 %1530, 0
  br i1 %1531, label %1540, label %1532

1532:                                             ; preds = %1527
  %1533 = icmp ugt i64 %1530, 2305843009213693951
  br i1 %1533, label %1534, label %1535

1534:                                             ; preds = %1532
  call void @abort() #14
  unreachable

1535:                                             ; preds = %1532, %1522
  %1536 = phi i64 [ %1530, %1532 ], [ 2305843009213693951, %1522 ]
  %1537 = shl i64 %1536, 3
  %1538 = call i8* @_Znwm(i64 %1537) #15
  %1539 = bitcast i8* %1538 to i64*
  br label %1540

1540:                                             ; preds = %1535, %1527
  %1541 = phi i64 [ %1536, %1535 ], [ 0, %1527 ]
  %1542 = phi i8* [ %1538, %1535 ], [ null, %1527 ]
  %1543 = phi i64* [ %1539, %1535 ], [ null, %1527 ]
  %1544 = getelementptr inbounds i64, i64* %1543, i64 %1517
  %1545 = getelementptr inbounds i64, i64* %1543, i64 %1541
  %1546 = ptrtoint i64* %1545 to i64
  store i64 %1408, i64* %1544, align 8
  %1547 = getelementptr inbounds i64, i64* %1544, i64 1
  %1548 = ptrtoint i64* %1547 to i64
  %1549 = ptrtoint i64* %1543 to i64
  %1550 = icmp sgt i64 %1516, 0
  br i1 %1550, label %1551, label %1553

1551:                                             ; preds = %1540
  %1552 = inttoptr i64 %1515 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1542, i8* align 8 %1552, i64 %1516, i1 false) #13
  br label %1553

1553:                                             ; preds = %1551, %1540
  store i64 %1549, i64* %1514, align 8
  store i64 %1548, i64* %1513, align 8
  store i64 %1546, i64* %1523, align 8
  %1554 = icmp eq i64 %1515, 0
  br i1 %1554, label %1557, label %1555

1555:                                             ; preds = %1553
  %1556 = inttoptr i64 %1515 to i8*
  call void @_ZdlPv(i8* %1556) #15
  br label %1557

1557:                                             ; preds = %1507, %1553, %1555
  %1558 = trunc i64 %1409 to i32
  %1559 = load i64, i64* %30, align 8, !alias.scope !130
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %1558, i64 %1559, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %1560 = load i64, i64* %30, align 8, !alias.scope !131
  %1561 = add i64 %1560, 4
  %1562 = icmp ult i64 %1560, -4
  br i1 %1562, label %1565, label %1563

1563:                                             ; preds = %1557
  %1564 = load i8*, i8** %32, align 8, !alias.scope !134
  br label %1573

1565:                                             ; preds = %1557
  %1566 = load i64, i64* %31, align 8, !alias.scope !134
  %1567 = icmp ult i64 %1566, %1561
  br i1 %1567, label %1568, label %1569

1568:                                             ; preds = %1565
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %6, i64 %1561) #13
  br label %1569

1569:                                             ; preds = %1568, %1565
  %1570 = load i8*, i8** %32, align 8, !alias.scope !134
  %1571 = icmp eq i8* %1570, null
  %1572 = select i1 %1571, i64 0, i64 %1561
  store i64 %1572, i64* %30, align 8, !alias.scope !134
  br label %1573

1573:                                             ; preds = %1563, %1569
  %1574 = phi i8* [ %1564, %1563 ], [ %1570, %1569 ]
  %1575 = getelementptr inbounds i8, i8* %1574, i64 %1560
  %1576 = bitcast i8* %1575 to i32*
  store i32 1129469031, i32* %1576, align 1
  %1577 = load i64, i64* %30, align 8, !alias.scope !131
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %1577, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %1578 = load i64*, i64** %298, align 8
  %1579 = load i64*, i64** %299, align 8
  %1580 = icmp eq i64* %1578, %1579
  %1581 = ptrtoint i64* %1579 to i64
  br i1 %1580, label %1586, label %1582

1582:                                             ; preds = %1573
  store i64 %1408, i64* %1578, align 8
  %1583 = getelementptr inbounds i64, i64* %1578, i64 1
  %1584 = ptrtoint i64* %1583 to i64
  %1585 = bitcast i64** %298 to i64*
  store i64 %1584, i64* %1585, align 8
  br label %1632

1586:                                             ; preds = %1573
  %1587 = ptrtoint i64* %1578 to i64
  %1588 = bitcast i64** %298 to i64*
  %1589 = bitcast %"class.std::__1::vector.4"* %8 to i64*
  %1590 = load i64, i64* %1589, align 8
  %1591 = sub i64 %1587, %1590
  %1592 = ashr exact i64 %1591, 3
  %1593 = add nsw i64 %1592, 1
  %1594 = icmp ugt i64 %1593, 2305843009213693951
  br i1 %1594, label %1595, label %1597

1595:                                             ; preds = %1586
  %1596 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1596) #14
  unreachable

1597:                                             ; preds = %1586
  %1598 = bitcast i64** %299 to i64*
  %1599 = sub i64 %1581, %1590
  %1600 = ashr exact i64 %1599, 3
  %1601 = icmp ult i64 %1600, 1152921504606846975
  br i1 %1601, label %1602, label %1610

1602:                                             ; preds = %1597
  %1603 = ashr exact i64 %1599, 2
  %1604 = icmp ult i64 %1603, %1593
  %1605 = select i1 %1604, i64 %1593, i64 %1603
  %1606 = icmp eq i64 %1605, 0
  br i1 %1606, label %1615, label %1607

1607:                                             ; preds = %1602
  %1608 = icmp ugt i64 %1605, 2305843009213693951
  br i1 %1608, label %1609, label %1610

1609:                                             ; preds = %1607
  call void @abort() #14
  unreachable

1610:                                             ; preds = %1607, %1597
  %1611 = phi i64 [ %1605, %1607 ], [ 2305843009213693951, %1597 ]
  %1612 = shl i64 %1611, 3
  %1613 = call i8* @_Znwm(i64 %1612) #15
  %1614 = bitcast i8* %1613 to i64*
  br label %1615

1615:                                             ; preds = %1610, %1602
  %1616 = phi i64 [ %1611, %1610 ], [ 0, %1602 ]
  %1617 = phi i8* [ %1613, %1610 ], [ null, %1602 ]
  %1618 = phi i64* [ %1614, %1610 ], [ null, %1602 ]
  %1619 = getelementptr inbounds i64, i64* %1618, i64 %1592
  %1620 = getelementptr inbounds i64, i64* %1618, i64 %1616
  %1621 = ptrtoint i64* %1620 to i64
  store i64 %1408, i64* %1619, align 8
  %1622 = getelementptr inbounds i64, i64* %1619, i64 1
  %1623 = ptrtoint i64* %1622 to i64
  %1624 = ptrtoint i64* %1618 to i64
  %1625 = icmp sgt i64 %1591, 0
  br i1 %1625, label %1626, label %1628

1626:                                             ; preds = %1615
  %1627 = inttoptr i64 %1590 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1617, i8* align 8 %1627, i64 %1591, i1 false) #13
  br label %1628

1628:                                             ; preds = %1626, %1615
  store i64 %1624, i64* %1589, align 8
  store i64 %1623, i64* %1588, align 8
  store i64 %1621, i64* %1598, align 8
  %1629 = icmp eq i64 %1590, 0
  br i1 %1629, label %1632, label %1630

1630:                                             ; preds = %1628
  %1631 = inttoptr i64 %1590 to i8*
  call void @_ZdlPv(i8* %1631) #15
  br label %1632

1632:                                             ; preds = %1582, %1628, %1630
  %1633 = load i64, i64* %30, align 8, !alias.scope !131
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %1558, i64 %1633, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %1634 = load i64, i64* %30, align 8, !alias.scope !137
  %1635 = add i64 %1634, 4
  %1636 = icmp ult i64 %1634, -4
  br i1 %1636, label %1639, label %1637

1637:                                             ; preds = %1632
  %1638 = load i8*, i8** %32, align 8, !alias.scope !140
  br label %1647

1639:                                             ; preds = %1632
  %1640 = load i64, i64* %31, align 8, !alias.scope !140
  %1641 = icmp ult i64 %1640, %1635
  br i1 %1641, label %1642, label %1643

1642:                                             ; preds = %1639
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %6, i64 %1635) #13
  br label %1643

1643:                                             ; preds = %1642, %1639
  %1644 = load i8*, i8** %32, align 8, !alias.scope !140
  %1645 = icmp eq i8* %1644, null
  %1646 = select i1 %1645, i64 0, i64 %1635
  store i64 %1646, i64* %30, align 8, !alias.scope !140
  br label %1647

1647:                                             ; preds = %1637, %1643
  %1648 = phi i8* [ %1638, %1637 ], [ %1644, %1643 ]
  %1649 = getelementptr inbounds i8, i8* %1648, i64 %1634
  %1650 = bitcast i8* %1649 to i32*
  store i32 1129469026, i32* %1650, align 1
  %1651 = load i64, i64* %30, align 8, !alias.scope !137
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %1651, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %1652 = load i64*, i64** %298, align 8
  %1653 = load i64*, i64** %299, align 8
  %1654 = icmp eq i64* %1652, %1653
  %1655 = ptrtoint i64* %1653 to i64
  br i1 %1654, label %1660, label %1656

1656:                                             ; preds = %1647
  store i64 %1408, i64* %1652, align 8
  %1657 = getelementptr inbounds i64, i64* %1652, i64 1
  %1658 = ptrtoint i64* %1657 to i64
  %1659 = bitcast i64** %298 to i64*
  store i64 %1658, i64* %1659, align 8
  br label %1706

1660:                                             ; preds = %1647
  %1661 = ptrtoint i64* %1652 to i64
  %1662 = bitcast i64** %298 to i64*
  %1663 = bitcast %"class.std::__1::vector.4"* %8 to i64*
  %1664 = load i64, i64* %1663, align 8
  %1665 = sub i64 %1661, %1664
  %1666 = ashr exact i64 %1665, 3
  %1667 = add nsw i64 %1666, 1
  %1668 = icmp ugt i64 %1667, 2305843009213693951
  br i1 %1668, label %1669, label %1671

1669:                                             ; preds = %1660
  %1670 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1670) #14
  unreachable

1671:                                             ; preds = %1660
  %1672 = bitcast i64** %299 to i64*
  %1673 = sub i64 %1655, %1664
  %1674 = ashr exact i64 %1673, 3
  %1675 = icmp ult i64 %1674, 1152921504606846975
  br i1 %1675, label %1676, label %1684

1676:                                             ; preds = %1671
  %1677 = ashr exact i64 %1673, 2
  %1678 = icmp ult i64 %1677, %1667
  %1679 = select i1 %1678, i64 %1667, i64 %1677
  %1680 = icmp eq i64 %1679, 0
  br i1 %1680, label %1689, label %1681

1681:                                             ; preds = %1676
  %1682 = icmp ugt i64 %1679, 2305843009213693951
  br i1 %1682, label %1683, label %1684

1683:                                             ; preds = %1681
  call void @abort() #14
  unreachable

1684:                                             ; preds = %1681, %1671
  %1685 = phi i64 [ %1679, %1681 ], [ 2305843009213693951, %1671 ]
  %1686 = shl i64 %1685, 3
  %1687 = call i8* @_Znwm(i64 %1686) #15
  %1688 = bitcast i8* %1687 to i64*
  br label %1689

1689:                                             ; preds = %1684, %1676
  %1690 = phi i64 [ %1685, %1684 ], [ 0, %1676 ]
  %1691 = phi i8* [ %1687, %1684 ], [ null, %1676 ]
  %1692 = phi i64* [ %1688, %1684 ], [ null, %1676 ]
  %1693 = getelementptr inbounds i64, i64* %1692, i64 %1666
  %1694 = getelementptr inbounds i64, i64* %1692, i64 %1690
  %1695 = ptrtoint i64* %1694 to i64
  store i64 %1408, i64* %1693, align 8
  %1696 = getelementptr inbounds i64, i64* %1693, i64 1
  %1697 = ptrtoint i64* %1696 to i64
  %1698 = ptrtoint i64* %1692 to i64
  %1699 = icmp sgt i64 %1665, 0
  br i1 %1699, label %1700, label %1702

1700:                                             ; preds = %1689
  %1701 = inttoptr i64 %1664 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1691, i8* align 8 %1701, i64 %1665, i1 false) #13
  br label %1702

1702:                                             ; preds = %1700, %1689
  store i64 %1698, i64* %1663, align 8
  store i64 %1697, i64* %1662, align 8
  store i64 %1695, i64* %1672, align 8
  %1703 = icmp eq i64 %1664, 0
  br i1 %1703, label %1706, label %1704

1704:                                             ; preds = %1702
  %1705 = inttoptr i64 %1664 to i8*
  call void @_ZdlPv(i8* %1705) #15
  br label %1706

1706:                                             ; preds = %1704, %1702, %1656, %1485
  %1707 = phi i32 [ %1486, %1485 ], [ %1558, %1656 ], [ %1558, %1702 ], [ %1558, %1704 ]
  %1708 = load i64, i64* %30, align 8, !alias.scope !143
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %1707, i64 %1708, %"class.jxl::PaddedBytes"* nonnull %6) #13
  %1709 = bitcast i64** %298 to i64*
  %1710 = load i64, i64* %1709, align 8
  %1711 = bitcast %"class.std::__1::vector.4"* %8 to i64*
  %1712 = load i64, i64* %1711, align 8
  %1713 = sub i64 %1710, %1712
  %1714 = lshr exact i64 %1713, 3
  %1715 = trunc i64 %1714 to i32
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %1715, i64 0, %"class.jxl::PaddedBytes"* nonnull %6)
  %1716 = load i64, i64* %1709, align 8
  %1717 = load i64, i64* %1711, align 8
  %1718 = icmp eq i64 %1716, %1717
  br i1 %1718, label %1719, label %2027

1719:                                             ; preds = %2027, %1706
  %1720 = load i64, i64* %26, align 8
  %1721 = load i64, i64* %30, align 8
  %1722 = add i64 %1721, %1720
  %1723 = load i64, i64* %34, align 8
  %1724 = add i64 %1722, %1723
  %1725 = trunc i64 %1724 to i32
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %1725, i64 0, %"class.jxl::PaddedBytes"* nonnull %5)
  %1726 = load i64, i64* %26, align 8
  %1727 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 1
  %1728 = load i64, i64* %1727, align 8
  %1729 = icmp ult i64 %1728, %1726
  br i1 %1729, label %1730, label %1731

1730:                                             ; preds = %1719
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %1726) #13
  br label %1731

1731:                                             ; preds = %1730, %1719
  %1732 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %1733 = load i8*, i8** %1732, align 8
  %1734 = icmp eq i8* %1733, null
  %1735 = select i1 %1734, i64 0, i64 %1726
  %1736 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 0
  store i64 %1735, i64* %1736, align 8
  br i1 %1734, label %1740, label %1737

1737:                                             ; preds = %1731
  %1738 = load i8*, i8** %28, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %1733, i8* align 1 %1738, i64 %1735, i1 false) #13
  %1739 = load i64, i64* %1736, align 8
  br label %1740

1740:                                             ; preds = %1731, %1737
  %1741 = phi i64 [ 0, %1731 ], [ %1739, %1737 ]
  %1742 = load i8*, i8** %32, align 8
  %1743 = load i64, i64* %30, align 8
  %1744 = add i64 %1741, %1743
  %1745 = load i64, i64* %1727, align 8
  %1746 = icmp ult i64 %1745, %1744
  br i1 %1746, label %1747, label %1748

1747:                                             ; preds = %1740
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %1744) #13
  br label %1748

1748:                                             ; preds = %1740, %1747
  %1749 = load i8*, i8** %1732, align 8
  %1750 = icmp eq i8* %1749, null
  %1751 = select i1 %1750, i64 0, i64 %1744
  store i64 %1751, i64* %1736, align 8
  %1752 = getelementptr inbounds i8, i8* %1749, i64 %1741
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1752, i8* align 1 %1742, i64 %1743, i1 false) #13
  %1753 = load i8*, i8** %36, align 8
  %1754 = load i64, i64* %34, align 8
  %1755 = load i64, i64* %1736, align 8
  %1756 = add i64 %1755, %1754
  %1757 = load i64, i64* %1727, align 8
  %1758 = icmp ult i64 %1757, %1756
  br i1 %1758, label %1759, label %1760

1759:                                             ; preds = %1748
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %1756) #13
  br label %1760

1760:                                             ; preds = %1748, %1759
  %1761 = load i8*, i8** %1732, align 8
  %1762 = icmp eq i8* %1761, null
  %1763 = select i1 %1762, i64 0, i64 %1756
  store i64 %1763, i64* %1736, align 8
  %1764 = getelementptr inbounds i8, i8* %1761, i64 %1755
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1764, i8* align 1 %1753, i64 %1754, i1 false) #13
  %1765 = bitcast %"class.jxl::PaddedBytes"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1765) #13
  %1766 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %24, i64 0, i32 0
  %1767 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %24, i64 0, i32 1
  %1768 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %24, i64 0, i32 2, i32 0, i32 0, i32 0
  %1769 = load i64, i64* %1736, align 8
  store i64 %1769, i64* %1766, align 8
  %1770 = icmp eq i64 %1769, 0
  %1771 = bitcast i64* %1767 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1771, i8 0, i64 16, i1 false) #13
  br i1 %1770, label %1779, label %1772

1772:                                             ; preds = %1760
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %24, i64 %1769) #13
  %1773 = load i8*, i8** %1768, align 8
  %1774 = icmp eq i8* %1773, null
  br i1 %1774, label %1779, label %1775

1775:                                             ; preds = %1772
  %1776 = load i8*, i8** %1732, align 8
  %1777 = load i64, i64* %1766, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %1773, i8* align 1 %1776, i64 %1777, i1 false) #13
  %1778 = load i8*, i8** %1768, align 8
  br label %1779

1779:                                             ; preds = %1760, %1772, %1775
  %1780 = phi i8* [ null, %1760 ], [ null, %1772 ], [ %1778, %1775 ]
  %1781 = getelementptr inbounds i8, i8* %1780, i64 44
  %1782 = bitcast i8* %1781 to i32*
  store i32 0, i32* %1782, align 1
  %1783 = getelementptr inbounds i8, i8* %1780, i64 64
  %1784 = bitcast i8* %1783 to i32*
  store i32 0, i32* %1784, align 1
  %1785 = bitcast %"class.jxl::PaddedBytes"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1785) #13
  %1786 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %4, i64 0, i32 0
  %1787 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %4, i64 0, i32 1
  %1788 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  %1789 = load i64, i64* %1766, align 8
  store i64 %1789, i64* %1786, align 8
  %1790 = icmp eq i64 %1789, 0
  %1791 = bitcast i64* %1787 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1791, i8 0, i64 16, i1 false) #13
  br i1 %1790, label %1798, label %1792

1792:                                             ; preds = %1779
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %4, i64 %1789) #13
  %1793 = load i8*, i8** %1788, align 8
  %1794 = icmp eq i8* %1793, null
  br i1 %1794, label %1798, label %1795

1795:                                             ; preds = %1792
  %1796 = load i8*, i8** %1768, align 8
  %1797 = load i64, i64* %1786, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %1793, i8* align 1 %1796, i64 %1797, i1 false) #13
  br label %1798

1798:                                             ; preds = %1795, %1792, %1779
  %1799 = load i64, i64* %1786, align 8
  %1800 = load i64, i64* %1787, align 8
  %1801 = icmp eq i64 %1799, %1800
  br i1 %1801, label %1804, label %1802

1802:                                             ; preds = %1798
  %1803 = load i8*, i8** %1788, align 8
  br label %1810

1804:                                             ; preds = %1798
  %1805 = add i64 %1799, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %4, i64 %1805) #13
  %1806 = load i8*, i8** %1788, align 8
  %1807 = icmp eq i8* %1806, null
  br i1 %1807, label %1815, label %1808

1808:                                             ; preds = %1804
  %1809 = load i64, i64* %1786, align 8
  br label %1810

1810:                                             ; preds = %1808, %1802
  %1811 = phi i8* [ %1806, %1808 ], [ %1803, %1802 ]
  %1812 = phi i64 [ %1809, %1808 ], [ %1799, %1802 ]
  %1813 = add i64 %1812, 1
  store i64 %1813, i64* %1786, align 8
  %1814 = getelementptr inbounds i8, i8* %1811, i64 %1812
  store i8 -128, i8* %1814, align 1
  br label %1815

1815:                                             ; preds = %1810, %1804
  %1816 = load i64, i64* %1786, align 8
  %1817 = sub i64 56, %1816
  %1818 = and i64 %1817, 63
  %1819 = add i64 %1818, %1816
  %1820 = load i64, i64* %1787, align 8
  %1821 = icmp ult i64 %1820, %1819
  br i1 %1821, label %1822, label %1823

1822:                                             ; preds = %1815
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %4, i64 %1819) #13
  br label %1823

1823:                                             ; preds = %1822, %1815
  %1824 = load i8*, i8** %1788, align 8
  %1825 = icmp eq i8* %1824, null
  %1826 = select i1 %1825, i64 0, i64 %1819
  store i64 %1826, i64* %1786, align 8
  %1827 = icmp ugt i64 %1826, %1816
  br i1 %1827, label %1829, label %1828

1828:                                             ; preds = %1829, %1823
  br label %1836

1829:                                             ; preds = %1823
  %1830 = getelementptr inbounds i8, i8* %1824, i64 %1816
  %1831 = sub i64 %1826, %1816
  call void @llvm.memset.p0i8.i64(i8* align 1 %1830, i8 0, i64 %1831, i1 false) #13
  br label %1828

1832:                                             ; preds = %1858
  %1833 = load i64, i64* %1786, align 8
  %1834 = icmp eq i64 %1833, 0
  %1835 = load i8*, i8** %1788, align 8
  br i1 %1834, label %1867, label %1861

1836:                                             ; preds = %1828, %1858
  %1837 = phi i64 [ %1859, %1858 ], [ 0, %1828 ]
  %1838 = load i64, i64* %1766, align 8
  %1839 = shl i64 %1838, 3
  %1840 = lshr i64 %1839, %1837
  %1841 = trunc i64 %1840 to i8
  %1842 = load i64, i64* %1786, align 8
  %1843 = load i64, i64* %1787, align 8
  %1844 = icmp eq i64 %1842, %1843
  br i1 %1844, label %1847, label %1845

1845:                                             ; preds = %1836
  %1846 = load i8*, i8** %1788, align 8
  br label %1853

1847:                                             ; preds = %1836
  %1848 = add i64 %1842, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %4, i64 %1848) #13
  %1849 = load i8*, i8** %1788, align 8
  %1850 = icmp eq i8* %1849, null
  br i1 %1850, label %1858, label %1851

1851:                                             ; preds = %1847
  %1852 = load i64, i64* %1786, align 8
  br label %1853

1853:                                             ; preds = %1851, %1845
  %1854 = phi i8* [ %1849, %1851 ], [ %1846, %1845 ]
  %1855 = phi i64 [ %1852, %1851 ], [ %1842, %1845 ]
  %1856 = add i64 %1855, 1
  store i64 %1856, i64* %1786, align 8
  %1857 = getelementptr inbounds i8, i8* %1854, i64 %1855
  store i8 %1841, i8* %1857, align 1
  br label %1858

1858:                                             ; preds = %1853, %1847
  %1859 = add nuw nsw i64 %1837, 8
  %1860 = icmp ult i64 %1859, 64
  br i1 %1860, label %1836, label %1832

1861:                                             ; preds = %1832, %1902
  %1862 = phi i32 [ %1903, %1902 ], [ 1732584193, %1832 ]
  %1863 = phi i32 [ %1904, %1902 ], [ -271733879, %1832 ]
  %1864 = phi i32 [ %1905, %1902 ], [ -1732584194, %1832 ]
  %1865 = phi i32 [ %1906, %1902 ], [ 271733878, %1832 ]
  %1866 = phi i64 [ %1907, %1902 ], [ 0, %1832 ]
  br label %1909

1867:                                             ; preds = %1902, %1832
  %1868 = phi i32 [ 271733878, %1832 ], [ %1906, %1902 ]
  %1869 = phi i32 [ -1732584194, %1832 ], [ %1905, %1902 ]
  %1870 = phi i32 [ -271733879, %1832 ], [ %1904, %1902 ]
  %1871 = phi i32 [ 1732584193, %1832 ], [ %1903, %1902 ]
  %1872 = trunc i32 %1871 to i8
  %1873 = lshr i32 %1871, 8
  %1874 = trunc i32 %1873 to i8
  %1875 = lshr i32 %1871, 16
  %1876 = trunc i32 %1875 to i8
  %1877 = lshr i32 %1871, 24
  %1878 = trunc i32 %1877 to i8
  %1879 = trunc i32 %1870 to i8
  %1880 = lshr i32 %1870, 8
  %1881 = trunc i32 %1880 to i8
  %1882 = lshr i32 %1870, 16
  %1883 = trunc i32 %1882 to i8
  %1884 = lshr i32 %1870, 24
  %1885 = trunc i32 %1884 to i8
  %1886 = trunc i32 %1869 to i8
  %1887 = lshr i32 %1869, 8
  %1888 = trunc i32 %1887 to i8
  %1889 = lshr i32 %1869, 16
  %1890 = trunc i32 %1889 to i8
  %1891 = lshr i32 %1869, 24
  %1892 = trunc i32 %1891 to i8
  %1893 = trunc i32 %1868 to i8
  %1894 = lshr i32 %1868, 8
  %1895 = trunc i32 %1894 to i8
  %1896 = lshr i32 %1868, 16
  %1897 = trunc i32 %1896 to i8
  %1898 = lshr i32 %1868, 24
  %1899 = trunc i32 %1898 to i8
  store i8* null, i8** %1788, align 8
  %1900 = icmp eq i8* %1835, null
  br i1 %1900, label %2006, label %1901

1901:                                             ; preds = %1867
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1835) #13
  br label %2006

1902:                                             ; preds = %1979
  %1903 = add i32 %1911, %1862
  %1904 = add i32 %2003, %1863
  %1905 = add i32 %1913, %1864
  %1906 = add i32 %1912, %1865
  %1907 = add i64 %1866, 64
  %1908 = icmp ult i64 %1907, %1833
  br i1 %1908, label %1861, label %1867

1909:                                             ; preds = %1979, %1861
  %1910 = phi i64 [ 0, %1861 ], [ %2004, %1979 ]
  %1911 = phi i32 [ %1865, %1861 ], [ %1912, %1979 ]
  %1912 = phi i32 [ %1864, %1861 ], [ %1913, %1979 ]
  %1913 = phi i32 [ %1863, %1861 ], [ %2003, %1979 ]
  %1914 = phi i32 [ %1862, %1861 ], [ %1911, %1979 ]
  %1915 = icmp ult i64 %1910, 16
  br i1 %1915, label %1916, label %1921

1916:                                             ; preds = %1909
  %1917 = and i32 %1913, %1912
  %1918 = xor i32 %1913, -1
  %1919 = and i32 %1911, %1918
  %1920 = or i32 %1919, %1917
  br label %1945

1921:                                             ; preds = %1909
  %1922 = icmp ult i64 %1910, 32
  br i1 %1922, label %1923, label %1931

1923:                                             ; preds = %1921
  %1924 = and i32 %1913, %1911
  %1925 = xor i32 %1911, -1
  %1926 = and i32 %1912, %1925
  %1927 = or i32 %1924, %1926
  %1928 = mul nuw nsw i64 %1910, 5
  %1929 = add nuw nsw i64 %1928, 1
  %1930 = and i64 %1929, 15
  br label %1945

1931:                                             ; preds = %1921
  %1932 = icmp ult i64 %1910, 48
  br i1 %1932, label %1933, label %1939

1933:                                             ; preds = %1931
  %1934 = xor i32 %1912, %1911
  %1935 = xor i32 %1934, %1913
  %1936 = mul nuw nsw i64 %1910, 3
  %1937 = add nuw nsw i64 %1936, 5
  %1938 = and i64 %1937, 15
  br label %1945

1939:                                             ; preds = %1931
  %1940 = xor i32 %1911, -1
  %1941 = or i32 %1913, %1940
  %1942 = xor i32 %1941, %1912
  %1943 = mul nuw nsw i64 %1910, 7
  %1944 = and i64 %1943, 15
  br label %1945

1945:                                             ; preds = %1939, %1933, %1923, %1916
  %1946 = phi i32 [ %1920, %1916 ], [ %1927, %1923 ], [ %1935, %1933 ], [ %1942, %1939 ]
  %1947 = phi i64 [ %1910, %1916 ], [ %1930, %1923 ], [ %1938, %1933 ], [ %1944, %1939 ]
  %1948 = shl i64 %1947, 2
  %1949 = and i64 %1948, 4294967292
  %1950 = add i64 %1949, %1866
  %1951 = icmp ult i64 %1833, %1950
  br i1 %1951, label %1952, label %1955

1952:                                             ; preds = %1945
  %1953 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %1954 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

1955:                                             ; preds = %1945
  %1956 = getelementptr inbounds i8, i8* %1835, i64 %1950
  %1957 = load i8, i8* %1956, align 1
  %1958 = zext i8 %1957 to i32
  %1959 = or i64 %1950, 1
  %1960 = icmp ult i64 %1833, %1959
  br i1 %1960, label %1961, label %1964

1961:                                             ; preds = %1955
  %1962 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %1963 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

1964:                                             ; preds = %1955
  %1965 = getelementptr inbounds i8, i8* %1835, i64 %1959
  %1966 = load i8, i8* %1965, align 1
  %1967 = zext i8 %1966 to i32
  %1968 = or i64 %1950, 2
  %1969 = icmp ult i64 %1833, %1968
  br i1 %1969, label %1970, label %1973

1970:                                             ; preds = %1964
  %1971 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %1972 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

1973:                                             ; preds = %1964
  %1974 = or i64 %1950, 3
  %1975 = icmp ult i64 %1833, %1974
  br i1 %1975, label %1976, label %1979

1976:                                             ; preds = %1973
  %1977 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %1978 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

1979:                                             ; preds = %1973
  %1980 = getelementptr inbounds i8, i8* %1835, i64 %1968
  %1981 = load i8, i8* %1980, align 1
  %1982 = zext i8 %1981 to i32
  %1983 = getelementptr inbounds i8, i8* %1835, i64 %1974
  %1984 = load i8, i8* %1983, align 1
  %1985 = zext i8 %1984 to i32
  %1986 = shl nuw nsw i32 %1967, 8
  %1987 = or i32 %1986, %1958
  %1988 = shl nuw nsw i32 %1982, 16
  %1989 = or i32 %1987, %1988
  %1990 = shl nuw i32 %1985, 24
  %1991 = or i32 %1989, %1990
  %1992 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZZN3jxl12_GLOBAL__N_113ICCComputeMD5ERKNS_11PaddedBytesEPhE9sineparts, i64 0, i64 %1910
  %1993 = load i32, i32* %1992, align 4
  %1994 = add i32 %1946, %1914
  %1995 = add i32 %1994, %1993
  %1996 = add i32 %1995, %1991
  %1997 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZZN3jxl12_GLOBAL__N_113ICCComputeMD5ERKNS_11PaddedBytesEPhE5shift, i64 0, i64 %1910
  %1998 = load i32, i32* %1997, align 4
  %1999 = shl i32 %1996, %1998
  %2000 = sub i32 32, %1998
  %2001 = lshr i32 %1996, %2000
  %2002 = or i32 %1999, %2001
  %2003 = add i32 %2002, %1913
  %2004 = add nuw nsw i64 %1910, 1
  %2005 = icmp eq i64 %2004, 64
  br i1 %2005, label %1902, label %1909

2006:                                             ; preds = %1867, %1901
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1785) #13
  %2007 = load i8*, i8** %1732, align 8
  %2008 = getelementptr inbounds i8, i8* %2007, i64 84
  store i8 %1872, i8* %2008, align 1
  %2009 = getelementptr inbounds i8, i8* %2007, i64 85
  store i8 %1874, i8* %2009, align 1
  %2010 = getelementptr inbounds i8, i8* %2007, i64 86
  store i8 %1876, i8* %2010, align 1
  %2011 = getelementptr inbounds i8, i8* %2007, i64 87
  store i8 %1878, i8* %2011, align 1
  %2012 = getelementptr inbounds i8, i8* %2007, i64 88
  store i8 %1879, i8* %2012, align 1
  %2013 = getelementptr inbounds i8, i8* %2007, i64 89
  store i8 %1881, i8* %2013, align 1
  %2014 = getelementptr inbounds i8, i8* %2007, i64 90
  store i8 %1883, i8* %2014, align 1
  %2015 = getelementptr inbounds i8, i8* %2007, i64 91
  store i8 %1885, i8* %2015, align 1
  %2016 = getelementptr inbounds i8, i8* %2007, i64 92
  store i8 %1886, i8* %2016, align 1
  %2017 = getelementptr inbounds i8, i8* %2007, i64 93
  store i8 %1888, i8* %2017, align 1
  %2018 = getelementptr inbounds i8, i8* %2007, i64 94
  store i8 %1890, i8* %2018, align 1
  %2019 = getelementptr inbounds i8, i8* %2007, i64 95
  store i8 %1892, i8* %2019, align 1
  %2020 = getelementptr inbounds i8, i8* %2007, i64 96
  store i8 %1893, i8* %2020, align 1
  %2021 = getelementptr inbounds i8, i8* %2007, i64 97
  store i8 %1895, i8* %2021, align 1
  %2022 = getelementptr inbounds i8, i8* %2007, i64 98
  store i8 %1897, i8* %2022, align 1
  %2023 = getelementptr inbounds i8, i8* %2007, i64 99
  store i8 %1899, i8* %2023, align 1
  %2024 = load i8*, i8** %1768, align 8
  store i8* null, i8** %1768, align 8
  %2025 = icmp eq i8* %2024, null
  br i1 %2025, label %2046, label %2026

2026:                                             ; preds = %2006
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %2024) #13
  br label %2046

2027:                                             ; preds = %1706, %2027
  %2028 = phi i64 [ %2042, %2027 ], [ %1717, %1706 ]
  %2029 = phi i64 [ %2040, %2027 ], [ 0, %1706 ]
  %2030 = inttoptr i64 %2028 to i64*
  %2031 = getelementptr inbounds i64, i64* %2030, i64 %2029
  %2032 = load i64, i64* %2031, align 8
  %2033 = load i64, i64* %26, align 8
  %2034 = add i64 %2033, %2032
  %2035 = load i64, i64* %30, align 8
  %2036 = add i64 %2034, %2035
  %2037 = trunc i64 %2036 to i32
  %2038 = mul i64 %2029, 12
  %2039 = add i64 %2038, 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %2037, i64 %2039, %"class.jxl::PaddedBytes"* nonnull %6)
  %2040 = add nuw i64 %2029, 1
  %2041 = load i64, i64* %1709, align 8
  %2042 = load i64, i64* %1711, align 8
  %2043 = sub i64 %2041, %2042
  %2044 = ashr exact i64 %2043, 3
  %2045 = icmp ult i64 %2040, %2044
  br i1 %2045, label %2027, label %1719

2046:                                             ; preds = %2026, %2006
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1765) #13
  %2047 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %2048 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %2047, i64 0, i32 1, i32 0
  %2049 = load i8, i8* %2048, align 1
  %2050 = icmp slt i8 %2049, 0
  br i1 %2050, label %2051, label %2054

2051:                                             ; preds = %544, %532, %1365, %1353, %1341, %1329, %1271, %713, %666, %531, %1261, %2046
  %2052 = phi i32 [ 0, %2046 ], [ %547, %544 ], [ %542, %532 ], [ %1374, %1365 ], [ %1362, %1353 ], [ %1350, %1341 ], [ %1338, %1329 ], [ %1289, %1271 ], [ %711, %713 ], [ %667, %666 ], [ 1, %531 ], [ %1264, %1261 ]
  %2053 = load i8*, i8** %412, align 8
  call void @_ZdlPv(i8* %2053) #15
  br label %2054

2054:                                             ; preds = %2046, %2051
  %2055 = phi i32 [ 0, %2046 ], [ %2052, %2051 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %411) #13
  %2056 = load i64*, i64** %297, align 8
  %2057 = icmp eq i64* %2056, null
  br i1 %2057, label %2063, label %2058

2058:                                             ; preds = %2054
  %2059 = ptrtoint i64* %2056 to i64
  %2060 = bitcast i64** %298 to i64*
  store i64 %2059, i64* %2060, align 8
  %2061 = bitcast i64* %2056 to i8*
  call void @_ZdlPv(i8* %2061) #15
  br label %2063

2062:                                             ; preds = %45, %2, %51
  store i8* null, i8** %36, align 8
  br label %2067

2063:                                             ; preds = %2058, %2054
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %296) #13
  %2064 = load i8*, i8** %36, align 8
  store i8* null, i8** %36, align 8
  %2065 = icmp eq i8* %2064, null
  br i1 %2065, label %2067, label %2066

2066:                                             ; preds = %2063
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %2064) #13
  br label %2067

2067:                                             ; preds = %2062, %2063, %2066
  %2068 = phi i32 [ 1, %2062 ], [ %2055, %2063 ], [ %2055, %2066 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #13
  %2069 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %2070 = icmp eq i8* %2069, null
  br i1 %2070, label %2072, label %2071

2071:                                             ; preds = %2067
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %2069) #13
  br label %2072

2072:                                             ; preds = %2067, %2071
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %29) #13
  %2073 = load i8*, i8** %28, align 8
  store i8* null, i8** %28, align 8
  %2074 = icmp eq i8* %2073, null
  br i1 %2074, label %2076, label %2075

2075:                                             ; preds = %2072
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %2073) #13
  br label %2076

2076:                                             ; preds = %2072, %2075
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #13
  ret i32 %2068
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32, i64, %"class.jxl::PaddedBytes"* noalias) unnamed_addr #7 {
  %4 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %1, 4
  %7 = icmp ult i64 %5, %6
  br i1 %7, label %8, label %18

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = icmp ult i64 %10, %6
  br i1 %11, label %12, label %13

12:                                               ; preds = %8
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %6) #13
  br label %13

13:                                               ; preds = %8, %12
  %14 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 2, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  %17 = select i1 %16, i64 0, i64 %6
  store i64 %17, i64* %4, align 8
  br label %18

18:                                               ; preds = %13, %3
  %19 = phi i64 [ %17, %13 ], [ %5, %3 ]
  %20 = icmp ult i64 %19, %1
  br i1 %20, label %21, label %24

21:                                               ; preds = %18
  %22 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %23 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

24:                                               ; preds = %18
  %25 = lshr i32 %0, 24
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 2, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  store i8 %26, i8* %29, align 1
  %30 = add i64 %1, 1
  %31 = load i64, i64* %4, align 8
  %32 = icmp ult i64 %31, %30
  br i1 %32, label %33, label %36

33:                                               ; preds = %24
  %34 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %35 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

36:                                               ; preds = %24
  %37 = lshr i32 %0, 16
  %38 = trunc i32 %37 to i8
  %39 = load i8*, i8** %27, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %30
  store i8 %38, i8* %40, align 1
  %41 = add i64 %1, 2
  %42 = load i64, i64* %4, align 8
  %43 = icmp ult i64 %42, %41
  br i1 %43, label %44, label %47

44:                                               ; preds = %36
  %45 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %46 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

47:                                               ; preds = %36
  %48 = lshr i32 %0, 8
  %49 = trunc i32 %48 to i8
  %50 = load i8*, i8** %27, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 %41
  store i8 %49, i8* %51, align 1
  %52 = add i64 %1, 3
  %53 = load i64, i64* %4, align 8
  %54 = icmp ult i64 %53, %52
  br i1 %54, label %55, label %58

55:                                               ; preds = %47
  %56 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %57 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

58:                                               ; preds = %47
  %59 = trunc i32 %0 to i8
  %60 = load i8*, i8** %27, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 %52
  store i8 %59, i8* %61, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_116CreateICCMlucTagERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS_11PaddedBytesE(%"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), %"class.jxl::PaddedBytes"* noalias) unnamed_addr #7 {
  %3 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 4
  %6 = icmp ult i64 %4, -4
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8, !alias.scope !144
  br label %20

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 1
  %12 = load i64, i64* %11, align 8, !alias.scope !144
  %13 = icmp ult i64 %12, %5
  br i1 %13, label %14, label %15

14:                                               ; preds = %10
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %5) #13
  br label %15

15:                                               ; preds = %14, %10
  %16 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8, !alias.scope !144
  %18 = icmp eq i8* %17, null
  %19 = select i1 %18, i64 0, i64 %5
  store i64 %19, i64* %3, align 8, !alias.scope !144
  br label %20

20:                                               ; preds = %7, %15
  %21 = phi i8* [ %9, %7 ], [ %17, %15 ]
  %22 = getelementptr inbounds i8, i8* %21, i64 %4
  %23 = bitcast i8* %22 to i32*
  store i32 1668639853, i32* %23, align 1
  %24 = load i64, i64* %3, align 8
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %24, %"class.jxl::PaddedBytes"* %1)
  %25 = load i64, i64* %3, align 8
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 1, i64 %25, %"class.jxl::PaddedBytes"* %1)
  %26 = load i64, i64* %3, align 8
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 12, i64 %26, %"class.jxl::PaddedBytes"* %1)
  %27 = load i64, i64* %3, align 8
  %28 = add i64 %27, 4
  %29 = icmp ult i64 %27, -4
  br i1 %29, label %33, label %30

30:                                               ; preds = %20
  %31 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8, !alias.scope !147
  br label %43

33:                                               ; preds = %20
  %34 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 1
  %35 = load i64, i64* %34, align 8, !alias.scope !147
  %36 = icmp ult i64 %35, %28
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %28) #13
  br label %38

38:                                               ; preds = %37, %33
  %39 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8, !alias.scope !147
  %41 = icmp eq i8* %40, null
  %42 = select i1 %41, i64 0, i64 %28
  store i64 %42, i64* %3, align 8, !alias.scope !147
  br label %43

43:                                               ; preds = %30, %38
  %44 = phi i8* [ %32, %30 ], [ %40, %38 ]
  %45 = getelementptr inbounds i8, i8* %44, i64 %27
  %46 = bitcast i8* %45 to i32*
  store i32 1398107749, i32* %46, align 1
  %47 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  %49 = load i8, i8* %48, align 1
  %50 = icmp slt i8 %49, 0
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = zext i8 %49 to i64
  %54 = select i1 %50, i64 %52, i64 %53
  %55 = trunc i64 %54 to i32
  %56 = shl i32 %55, 1
  %57 = load i64, i64* %3, align 8
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %56, i64 %57, %"class.jxl::PaddedBytes"* %1)
  %58 = load i64, i64* %3, align 8
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 28, i64 %58, %"class.jxl::PaddedBytes"* %1)
  %59 = load i8, i8* %48, align 1
  %60 = icmp slt i8 %59, 0
  %61 = load i64, i64* %51, align 8
  %62 = zext i8 %59 to i64
  %63 = select i1 %60, i64 %61, i64 %62
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %70, label %65

65:                                               ; preds = %43
  %66 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 1
  %67 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %68 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %71

70:                                               ; preds = %112, %43
  ret void

71:                                               ; preds = %65, %112
  %72 = phi i64 [ 0, %65 ], [ %113, %112 ]
  %73 = load i64, i64* %3, align 8
  %74 = load i64, i64* %66, align 8
  %75 = icmp eq i64 %73, %74
  br i1 %75, label %78, label %76

76:                                               ; preds = %71
  %77 = load i8*, i8** %67, align 8
  br label %84

78:                                               ; preds = %71
  %79 = add i64 %73, 1
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %79) #13
  %80 = load i8*, i8** %67, align 8
  %81 = icmp eq i8* %80, null
  br i1 %81, label %89, label %82

82:                                               ; preds = %78
  %83 = load i64, i64* %3, align 8
  br label %84

84:                                               ; preds = %82, %76
  %85 = phi i8* [ %80, %82 ], [ %77, %76 ]
  %86 = phi i64 [ %83, %82 ], [ %73, %76 ]
  %87 = add i64 %86, 1
  store i64 %87, i64* %3, align 8
  %88 = getelementptr inbounds i8, i8* %85, i64 %86
  store i8 0, i8* %88, align 1
  br label %89

89:                                               ; preds = %78, %84
  %90 = load i8, i8* %48, align 1
  %91 = icmp slt i8 %90, 0
  %92 = load i8*, i8** %68, align 8
  %93 = select i1 %91, i8* %92, i8* %69
  %94 = getelementptr inbounds i8, i8* %93, i64 %72
  %95 = load i8, i8* %94, align 1
  %96 = load i64, i64* %3, align 8
  %97 = load i64, i64* %66, align 8
  %98 = icmp eq i64 %96, %97
  br i1 %98, label %101, label %99

99:                                               ; preds = %89
  %100 = load i8*, i8** %67, align 8
  br label %107

101:                                              ; preds = %89
  %102 = add i64 %96, 1
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %102) #13
  %103 = load i8*, i8** %67, align 8
  %104 = icmp eq i8* %103, null
  br i1 %104, label %112, label %105

105:                                              ; preds = %101
  %106 = load i64, i64* %3, align 8
  br label %107

107:                                              ; preds = %105, %99
  %108 = phi i8* [ %103, %105 ], [ %100, %99 ]
  %109 = phi i64 [ %106, %105 ], [ %96, %99 ]
  %110 = add i64 %109, 1
  store i64 %110, i64* %3, align 8
  %111 = getelementptr inbounds i8, i8* %108, i64 %109
  store i8 %95, i8* %111, align 1
  br label %112

112:                                              ; preds = %101, %107
  %113 = add nuw i64 %72, 1
  %114 = load i8, i8* %48, align 1
  %115 = icmp slt i8 %114, 0
  %116 = load i64, i64* %51, align 8
  %117 = zext i8 %114 to i64
  %118 = select i1 %115, i64 %116, i64 %117
  %119 = icmp ult i64 %113, %118
  br i1 %119, label %71, label %70
}

declare void @_ZN3jxl11DescriptionERKNS_13ColorEncodingE(%"class.std::__1::basic_string"* sret, %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #1

declare { double, double } @_ZNK3jxl13ColorEncoding13GetWhitePointEv(%"struct.jxl::ColorEncoding"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN3jxl12_GLOBAL__N_115CreateICCXYZTagEPfPNS_11PaddedBytesE(float* nocapture readonly, %"class.jxl::PaddedBytes"* noalias) unnamed_addr #7 {
  %3 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 4
  %6 = icmp ult i64 %4, -4
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8, !alias.scope !150
  br label %20

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 1
  %12 = load i64, i64* %11, align 8, !alias.scope !150
  %13 = icmp ult i64 %12, %5
  br i1 %13, label %14, label %15

14:                                               ; preds = %10
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %5) #13
  br label %15

15:                                               ; preds = %14, %10
  %16 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8, !alias.scope !150
  %18 = icmp eq i8* %17, null
  %19 = select i1 %18, i64 0, i64 %5
  store i64 %19, i64* %3, align 8, !alias.scope !150
  br label %20

20:                                               ; preds = %7, %15
  %21 = phi i8* [ %9, %7 ], [ %17, %15 ]
  %22 = getelementptr inbounds i8, i8* %21, i64 %4
  %23 = bitcast i8* %22 to i32*
  store i32 542792024, i32* %23, align 1
  %24 = load i64, i64* %3, align 8
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %24, %"class.jxl::PaddedBytes"* %1)
  %25 = load float, float* %0, align 4
  %26 = fcmp oge float %25, 0xC0DFFFFFA0000000
  %27 = fcmp ole float %25, 0x40DFFFFFA0000000
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %39

29:                                               ; preds = %20
  %30 = load i64, i64* %3, align 8
  %31 = fmul float %25, 6.553600e+04
  %32 = fadd float %31, 5.000000e-01
  %33 = fptosi float %32 to i32
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %33, i64 %30, %"class.jxl::PaddedBytes"* %1) #13
  %34 = getelementptr inbounds float, float* %0, i64 1
  %35 = load float, float* %34, align 4
  %36 = fcmp oge float %35, 0xC0DFFFFFA0000000
  %37 = fcmp ole float %35, 0x40DFFFFFA0000000
  %38 = and i1 %36, %37
  br i1 %38, label %41, label %39

39:                                               ; preds = %51, %41, %29, %20
  %40 = phi i32 [ 1, %20 ], [ 1, %29 ], [ 1, %41 ], [ 0, %51 ]
  ret i32 %40

41:                                               ; preds = %29
  %42 = load i64, i64* %3, align 8
  %43 = fmul float %35, 6.553600e+04
  %44 = fadd float %43, 5.000000e-01
  %45 = fptosi float %44 to i32
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %45, i64 %42, %"class.jxl::PaddedBytes"* %1) #13
  %46 = getelementptr inbounds float, float* %0, i64 2
  %47 = load float, float* %46, align 4
  %48 = fcmp oge float %47, 0xC0DFFFFFA0000000
  %49 = fcmp ole float %47, 0x40DFFFFFA0000000
  %50 = and i1 %48, %49
  br i1 %50, label %51, label %39

51:                                               ; preds = %41
  %52 = load i64, i64* %3, align 8
  %53 = fmul float %47, 6.553600e+04
  %54 = fadd float %53, 5.000000e-01
  %55 = fptosi float %54 to i32
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %55, i64 %52, %"class.jxl::PaddedBytes"* %1) #13
  br label %39
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZNK3jxl13ColorEncoding12GetPrimariesEv(%"struct.jxl::PrimariesCIExy"* sret, %"struct.jxl::ColorEncoding"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN3jxl12_GLOBAL__N_120CreateICCCurvParaTagENSt3__16vectorIfNS1_9allocatorIfEEEEmPNS_11PaddedBytesE(%"class.std::__1::vector.16"* nocapture readonly, %"class.jxl::PaddedBytes"* noalias) unnamed_addr #7 {
  %3 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 4
  %6 = icmp ult i64 %4, -4
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8, !alias.scope !153
  br label %20

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 1
  %12 = load i64, i64* %11, align 8, !alias.scope !153
  %13 = icmp ult i64 %12, %5
  br i1 %13, label %14, label %15

14:                                               ; preds = %10
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %5) #13
  br label %15

15:                                               ; preds = %14, %10
  %16 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8, !alias.scope !153
  %18 = icmp eq i8* %17, null
  %19 = select i1 %18, i64 0, i64 %5
  store i64 %19, i64* %3, align 8, !alias.scope !153
  br label %20

20:                                               ; preds = %7, %15
  %21 = phi i8* [ %9, %7 ], [ %17, %15 ]
  %22 = getelementptr inbounds i8, i8* %21, i64 %4
  %23 = bitcast i8* %22 to i32*
  store i32 1634886000, i32* %23, align 1
  %24 = load i64, i64* %3, align 8
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %24, %"class.jxl::PaddedBytes"* %1)
  %25 = load i64, i64* %3, align 8
  %26 = add i64 %25, 2
  %27 = icmp ult i64 %25, -2
  br i1 %27, label %28, label %42

28:                                               ; preds = %20
  %29 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 1
  %30 = load i64, i64* %29, align 8, !alias.scope !156
  %31 = icmp ult i64 %30, %26
  br i1 %31, label %32, label %33

32:                                               ; preds = %28
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %26) #13
  br label %33

33:                                               ; preds = %28, %32
  %34 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8, !alias.scope !156
  %36 = icmp eq i8* %35, null
  %37 = select i1 %36, i64 0, i64 %26
  store i64 %37, i64* %3, align 8, !alias.scope !156
  %38 = icmp ult i64 %37, %25
  br i1 %38, label %39, label %42

39:                                               ; preds = %33
  %40 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %41 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

42:                                               ; preds = %20, %33
  %43 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 %25
  store i8 0, i8* %45, align 1
  %46 = add i64 %25, 1
  %47 = load i64, i64* %3, align 8, !alias.scope !156
  %48 = icmp ult i64 %47, %46
  br i1 %48, label %49, label %52

49:                                               ; preds = %42
  %50 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %51 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

52:                                               ; preds = %42
  %53 = load i8*, i8** %43, align 8, !alias.scope !156
  %54 = getelementptr inbounds i8, i8* %53, i64 %46
  store i8 3, i8* %54, align 1
  %55 = load i64, i64* %3, align 8
  %56 = add i64 %55, 2
  %57 = icmp ult i64 %55, -2
  br i1 %57, label %58, label %71

58:                                               ; preds = %52
  %59 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 1
  %60 = load i64, i64* %59, align 8, !alias.scope !159
  %61 = icmp ult i64 %60, %56
  br i1 %61, label %62, label %63

62:                                               ; preds = %58
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %56) #13
  br label %63

63:                                               ; preds = %58, %62
  %64 = load i8*, i8** %43, align 8, !alias.scope !159
  %65 = icmp eq i8* %64, null
  %66 = select i1 %65, i64 0, i64 %56
  store i64 %66, i64* %3, align 8, !alias.scope !159
  %67 = icmp ult i64 %66, %55
  br i1 %67, label %68, label %71

68:                                               ; preds = %63
  %69 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %70 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

71:                                               ; preds = %52, %63
  %72 = load i8*, i8** %43, align 8
  %73 = getelementptr inbounds i8, i8* %72, i64 %55
  store i8 0, i8* %73, align 1
  %74 = add i64 %55, 1
  %75 = load i64, i64* %3, align 8, !alias.scope !159
  %76 = icmp ult i64 %75, %74
  br i1 %76, label %77, label %80

77:                                               ; preds = %71
  %78 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %79 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

80:                                               ; preds = %71
  %81 = load i8*, i8** %43, align 8, !alias.scope !159
  %82 = getelementptr inbounds i8, i8* %81, i64 %74
  store i8 0, i8* %82, align 1
  %83 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 1
  %84 = bitcast float** %83 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = bitcast %"class.std::__1::vector.16"* %0 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = icmp eq i64 %85, %87
  br i1 %88, label %109, label %89

89:                                               ; preds = %80, %98
  %90 = phi i64 [ %105, %98 ], [ %87, %80 ]
  %91 = phi i64 [ %103, %98 ], [ 0, %80 ]
  %92 = inttoptr i64 %90 to float*
  %93 = getelementptr inbounds float, float* %92, i64 %91
  %94 = load float, float* %93, align 4
  %95 = fcmp oge float %94, 0xC0DFFFFFA0000000
  %96 = fcmp ole float %94, 0x40DFFFFFA0000000
  %97 = and i1 %95, %96
  br i1 %97, label %98, label %109

98:                                               ; preds = %89
  %99 = load i64, i64* %3, align 8
  %100 = fmul float %94, 6.553600e+04
  %101 = fadd float %100, 5.000000e-01
  %102 = fptosi float %101 to i32
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %102, i64 %99, %"class.jxl::PaddedBytes"* %1) #13
  %103 = add nuw i64 %91, 1
  %104 = load i64, i64* %84, align 8
  %105 = load i64, i64* %86, align 8
  %106 = sub i64 %104, %105
  %107 = ashr exact i64 %106, 2
  %108 = icmp ult i64 %103, %107
  br i1 %108, label %89, label %109

109:                                              ; preds = %89, %98, %80
  %110 = phi i32 [ 0, %80 ], [ 0, %98 ], [ 1, %89 ]
  ret i32 %110
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3jxl22CustomTransferFunction19GetTransferFunctionEv(%"struct.jxl::CustomTransferFunction"*) local_unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::CustomTransferFunction", %"struct.jxl::CustomTransferFunction"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 4, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.61, i64 0, i64 0), i32 181, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.65, i64 0, i64 0)) #13
  %7 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"struct.jxl::CustomTransferFunction", %"struct.jxl::CustomTransferFunction"* %0, i64 0, i32 4
  %10 = load i32, i32* %9, align 4
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_120CreateICCCurvCurvTagERKNSt3__16vectorItNS1_9allocatorItEEEEPNS_11PaddedBytesE(%"class.std::__1::vector"* nocapture readonly dereferenceable(24), %"class.jxl::PaddedBytes"* noalias) unnamed_addr #7 {
  %3 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 12
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i16** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector"* %0 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = add i64 %11, %5
  %13 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %14, %12
  br i1 %15, label %16, label %17

16:                                               ; preds = %2
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %12) #13
  br label %17

17:                                               ; preds = %16, %2
  %18 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  %21 = select i1 %20, i64 0, i64 %12
  store i64 %21, i64* %3, align 8
  %22 = icmp ugt i64 %21, %4
  br i1 %22, label %23, label %27

23:                                               ; preds = %17
  %24 = getelementptr inbounds i8, i8* %19, i64 %4
  %25 = sub i64 %21, %4
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 0, i64 %25, i1 false) #13
  %26 = load i64, i64* %3, align 8, !alias.scope !162
  br label %27

27:                                               ; preds = %17, %23
  %28 = phi i64 [ %21, %17 ], [ %26, %23 ]
  %29 = add i64 %4, 4
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %33, label %31

31:                                               ; preds = %27
  %32 = load i8*, i8** %18, align 8, !alias.scope !162
  br label %41

33:                                               ; preds = %27
  %34 = load i64, i64* %13, align 8, !alias.scope !162
  %35 = icmp ult i64 %34, %29
  br i1 %35, label %36, label %37

36:                                               ; preds = %33
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %29) #13
  br label %37

37:                                               ; preds = %36, %33
  %38 = load i8*, i8** %18, align 8, !alias.scope !162
  %39 = icmp eq i8* %38, null
  %40 = select i1 %39, i64 0, i64 %29
  store i64 %40, i64* %3, align 8, !alias.scope !162
  br label %41

41:                                               ; preds = %31, %37
  %42 = phi i8* [ %32, %31 ], [ %38, %37 ]
  %43 = getelementptr inbounds i8, i8* %42, i64 %4
  %44 = bitcast i8* %43 to i32*
  store i32 1987212643, i32* %44, align 1
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 0, i64 %29, %"class.jxl::PaddedBytes"* %1)
  %45 = load i64, i64* %7, align 8
  %46 = load i64, i64* %9, align 8
  %47 = sub i64 %45, %46
  %48 = lshr exact i64 %47, 1
  %49 = trunc i64 %48 to i32
  %50 = add i64 %4, 8
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_114WriteICCUint32EjmPNS_11PaddedBytesE(i32 %49, i64 %50, %"class.jxl::PaddedBytes"* %1)
  %51 = load i64, i64* %7, align 8
  %52 = load i64, i64* %9, align 8
  %53 = icmp eq i64 %51, %52
  br i1 %53, label %54, label %55

54:                                               ; preds = %91, %41
  ret void

55:                                               ; preds = %41, %91
  %56 = phi i64 [ %97, %91 ], [ %52, %41 ]
  %57 = phi i64 [ %95, %91 ], [ 0, %41 ]
  %58 = inttoptr i64 %56 to i16*
  %59 = getelementptr inbounds i16, i16* %58, i64 %57
  %60 = load i16, i16* %59, align 2
  %61 = shl i64 %57, 1
  %62 = add i64 %61, %5
  %63 = load i64, i64* %3, align 8, !alias.scope !165
  %64 = add i64 %62, 2
  %65 = icmp ult i64 %63, %64
  br i1 %65, label %66, label %74

66:                                               ; preds = %55
  %67 = load i64, i64* %13, align 8, !alias.scope !165
  %68 = icmp ult i64 %67, %64
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %64) #13
  br label %70

70:                                               ; preds = %69, %66
  %71 = load i8*, i8** %18, align 8, !alias.scope !165
  %72 = icmp eq i8* %71, null
  %73 = select i1 %72, i64 0, i64 %64
  store i64 %73, i64* %3, align 8, !alias.scope !165
  br label %74

74:                                               ; preds = %70, %55
  %75 = phi i64 [ %73, %70 ], [ %63, %55 ]
  %76 = icmp ult i64 %75, %62
  br i1 %76, label %77, label %80

77:                                               ; preds = %74
  %78 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %79 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

80:                                               ; preds = %74
  %81 = lshr i16 %60, 8
  %82 = trunc i16 %81 to i8
  %83 = load i8*, i8** %18, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 %62
  store i8 %82, i8* %84, align 1
  %85 = add i64 %62, 1
  %86 = load i64, i64* %3, align 8, !alias.scope !165
  %87 = icmp ult i64 %86, %85
  br i1 %87, label %88, label %91

88:                                               ; preds = %80
  %89 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.49, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #13
  %90 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

91:                                               ; preds = %80
  %92 = trunc i16 %60 to i8
  %93 = load i8*, i8** %18, align 8, !alias.scope !165
  %94 = getelementptr inbounds i8, i8* %93, i64 %85
  store i8 %92, i8* %94, align 1
  %95 = add nuw i64 %57, 1
  %96 = load i64, i64* %7, align 8
  %97 = load i64, i64* %9, align 8
  %98 = sub i64 %96, %97
  %99 = ashr exact i64 %98, 1
  %100 = icmp ult i64 %95, %99
  br i1 %100, label %55, label %54
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.copysign.f32(float, float) #4

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #4

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #12

declare i32 @_ZN3jxl13AdaptToXYZD50EffPf(float, float, float*) local_unnamed_addr #1

declare i32 @_ZN3jxl17PrimariesToXYZD50EffffffffPf(float, float, float, float, float, float, float, float, float*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheINSt3__16vectorItNS1_9allocatorItEEEEJjN3jxl7ExtraTFEEE13ChooseAndCallIXadL_ZNS6_L36CreateTableCurveHighwayDispatchTableEEEEES5_jS7_(%"class.std::__1::vector"* noalias sret, i32, i32) #7 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #13
  %4 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %5 = and i32 %4, 2225
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #13, !range !115
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [12 x void (%"class.std::__1::vector"*, i32, i32)*], [12 x void (%"class.std::__1::vector"*, i32, i32)*]* @_ZN3jxlL36CreateTableCurveHighwayDispatchTableE, i64 0, i64 %7
  %9 = load void (%"class.std::__1::vector"*, i32, i32)*, void (%"class.std::__1::vector"*, i32, i32)** %8, align 8
  tail call void %9(%"class.std::__1::vector"* sret %0, i32 %1, i32 %2) #13
  ret void
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3jxl12_GLOBAL__N_115CreateICCHeaderERKNS_13ColorEncodingEPNS_11PaddedBytesE: argument 0"}
!5 = distinct !{!5, !"_ZN3jxl12_GLOBAL__N_115CreateICCHeaderERKNS_13ColorEncodingEPNS_11PaddedBytesE"}
!6 = !{!7, !4}
!7 = distinct !{!7, !8, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!8 = distinct !{!8, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!9 = !{!10, !4, !12}
!10 = distinct !{!10, !11, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!11 = distinct !{!11, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!12 = distinct !{!12, !13, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!13 = distinct !{!13, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!14 = !{!12, !4}
!15 = !{!10, !4}
!16 = !{!17, !4}
!17 = distinct !{!17, !18, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!18 = distinct !{!18, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!19 = !{!20, !4}
!20 = distinct !{!20, !21, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE: argument 0"}
!21 = distinct !{!21, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE"}
!22 = !{!23, !4}
!23 = distinct !{!23, !24, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE: argument 0"}
!24 = distinct !{!24, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE"}
!25 = !{!26, !4}
!26 = distinct !{!26, !27, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE: argument 0"}
!27 = distinct !{!27, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE"}
!28 = !{!29, !4}
!29 = distinct !{!29, !30, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE: argument 0"}
!30 = distinct !{!30, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE"}
!31 = !{!32, !4}
!32 = distinct !{!32, !33, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE: argument 0"}
!33 = distinct !{!33, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE"}
!34 = !{!35, !4}
!35 = distinct !{!35, !36, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE: argument 0"}
!36 = distinct !{!36, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE"}
!37 = !{!38, !4}
!38 = distinct !{!38, !39, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!39 = distinct !{!39, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!40 = !{!41, !4}
!41 = distinct !{!41, !42, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!42 = distinct !{!42, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!43 = !{!44, !4}
!44 = distinct !{!44, !45, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!45 = distinct !{!45, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!46 = !{!47}
!47 = distinct !{!47, !48, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_: argument 0"}
!48 = distinct !{!48, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_"}
!49 = !{!50}
!50 = distinct !{!50, !51, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE: argument 0"}
!51 = distinct !{!51, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE"}
!52 = !{!53, !50}
!53 = distinct !{!53, !54, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!54 = distinct !{!54, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!55 = !{!56}
!56 = distinct !{!56, !57, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_: argument 0"}
!57 = distinct !{!57, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_"}
!58 = !{!59}
!59 = distinct !{!59, !60, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE: argument 0"}
!60 = distinct !{!60, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE"}
!61 = !{!62, !59}
!62 = distinct !{!62, !63, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!63 = distinct !{!63, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_: argument 0"}
!66 = distinct !{!66, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_"}
!67 = !{!68}
!68 = distinct !{!68, !69, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE: argument 0"}
!69 = distinct !{!69, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE"}
!70 = !{!71, !68}
!71 = distinct !{!71, !72, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!72 = distinct !{!72, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!73 = !{!74}
!74 = distinct !{!74, !75, !"_ZN3jxl12_GLOBAL__N_116CreateICCChadTagEPfPNS_11PaddedBytesE: argument 0"}
!75 = distinct !{!75, !"_ZN3jxl12_GLOBAL__N_116CreateICCChadTagEPfPNS_11PaddedBytesE"}
!76 = !{!77, !74}
!77 = distinct !{!77, !78, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!78 = distinct !{!78, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!79 = !{!80}
!80 = distinct !{!80, !81, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_: argument 0"}
!81 = distinct !{!81, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_"}
!82 = !{!83}
!83 = distinct !{!83, !84, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE: argument 0"}
!84 = distinct !{!84, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE"}
!85 = !{!86, !83}
!86 = distinct !{!86, !87, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!87 = distinct !{!87, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!88 = !{!89}
!89 = distinct !{!89, !90, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_: argument 0"}
!90 = distinct !{!90, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_"}
!91 = !{!92}
!92 = distinct !{!92, !93, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE: argument 0"}
!93 = distinct !{!93, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE"}
!94 = !{!95, !92}
!95 = distinct !{!95, !96, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!96 = distinct !{!96, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!97 = !{!98}
!98 = distinct !{!98, !99, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_: argument 0"}
!99 = distinct !{!99, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_"}
!100 = !{!101}
!101 = distinct !{!101, !102, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE: argument 0"}
!102 = distinct !{!102, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE"}
!103 = !{!104, !101}
!104 = distinct !{!104, !105, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!105 = distinct !{!105, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!106 = !{!107}
!107 = distinct !{!107, !108, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_: argument 0"}
!108 = distinct !{!108, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_"}
!109 = !{!110}
!110 = distinct !{!110, !111, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE: argument 0"}
!111 = distinct !{!111, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE"}
!112 = !{!113, !110}
!113 = distinct !{!113, !114, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!114 = distinct !{!114, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!115 = !{i32 0, i32 33}
!116 = !{!117}
!117 = distinct !{!117, !118, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_: argument 0"}
!118 = distinct !{!118, !"_ZN3jxl12_GLOBAL__N_114FinalizeICCTagEPNS_11PaddedBytesEPmS3_"}
!119 = !{!120, !122}
!120 = distinct !{!120, !121, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!121 = distinct !{!121, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!122 = distinct !{!122, !123, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE: argument 0"}
!123 = distinct !{!123, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE"}
!124 = !{!122}
!125 = !{!126, !128}
!126 = distinct !{!126, !127, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!127 = distinct !{!127, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!128 = distinct !{!128, !129, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE: argument 0"}
!129 = distinct !{!129, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE"}
!130 = !{!128}
!131 = !{!132}
!132 = distinct !{!132, !133, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE: argument 0"}
!133 = distinct !{!133, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE"}
!134 = !{!135, !132}
!135 = distinct !{!135, !136, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!136 = distinct !{!136, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!137 = !{!138}
!138 = distinct !{!138, !139, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE: argument 0"}
!139 = distinct !{!139, !"_ZN3jxl12_GLOBAL__N_116AddToICCTagTableEPKcmmPNS_11PaddedBytesEPNSt3__16vectorImNS5_9allocatorImEEEE"}
!140 = !{!141, !138}
!141 = distinct !{!141, !142, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!142 = distinct !{!142, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!143 = !{!122, !138}
!144 = !{!145}
!145 = distinct !{!145, !146, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!146 = distinct !{!146, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!147 = !{!148}
!148 = distinct !{!148, !149, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!149 = distinct !{!149, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!150 = !{!151}
!151 = distinct !{!151, !152, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!152 = distinct !{!152, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!153 = !{!154}
!154 = distinct !{!154, !155, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!155 = distinct !{!155, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!156 = !{!157}
!157 = distinct !{!157, !158, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE: argument 0"}
!158 = distinct !{!158, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE"}
!159 = !{!160}
!160 = distinct !{!160, !161, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE: argument 0"}
!161 = distinct !{!161, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE"}
!162 = !{!163}
!163 = distinct !{!163, !164, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE: argument 0"}
!164 = distinct !{!164, !"_ZN3jxl12_GLOBAL__N_111WriteICCTagEPKcmPNS_11PaddedBytesE"}
!165 = !{!166}
!166 = distinct !{!166, !167, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE: argument 0"}
!167 = distinct !{!167, !"_ZN3jxl12_GLOBAL__N_114WriteICCUint16EtmPNS_11PaddedBytesE"}
