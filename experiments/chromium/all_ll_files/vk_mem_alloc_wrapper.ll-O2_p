; ModuleID = '../../third_party/angle/src/libANGLE/renderer/vulkan/vk_mem_alloc_wrapper.cpp'
source_filename = "../../third_party/angle/src/libANGLE/renderer/vulkan/vk_mem_alloc_wrapper.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VkPhysicalDevice_T = type opaque
%struct.VkPhysicalDeviceProperties = type { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], %struct.VkPhysicalDeviceLimits, %struct.VkPhysicalDeviceSparseProperties }
%struct.VkPhysicalDeviceLimits = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, i64, i64, i64 }
%struct.VkPhysicalDeviceSparseProperties = type { i32, i32, i32, i32, i32 }
%struct.VkPhysicalDeviceMemoryProperties = type { i32, [32 x %struct.VkMemoryType], i32, [16 x %struct.VkMemoryHeap] }
%struct.VkMemoryType = type { i32, i32 }
%struct.VkMemoryHeap = type { i64, i32 }
%struct.VkDevice_T = type opaque
%struct.VkMemoryAllocateInfo = type { i32, i8*, i64, i32 }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%struct.VkDeviceMemory_T = type opaque
%struct.VkMappedMemoryRange = type { i32, i8*, %struct.VkDeviceMemory_T*, i64, i64 }
%struct.VkBuffer_T = type opaque
%struct.VkImage_T = type opaque
%struct.VkMemoryRequirements = type { i64, i64, i32 }
%struct.VkBufferCreateInfo = type { i32, i8*, i32, i64, i32, i32, i32, i32* }
%struct.VkImageCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkExtent3D, i32, i32, i32, i32, i32, i32, i32, i32*, i32 }
%struct.VkExtent3D = type { i32, i32, i32 }
%struct.VkCommandBuffer_T = type opaque
%struct.VkBufferCopy = type { i64, i64, i64 }
%struct.VkBufferMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkBuffer_T* }
%struct.VkMemoryRequirements2 = type { i32, i8*, %struct.VkMemoryRequirements }
%struct.VkImageMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkBindBufferMemoryInfo = type { i32, i8*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64 }
%struct.VkBindImageMemoryInfo = type { i32, i8*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64 }
%struct.VkPhysicalDeviceMemoryProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceMemoryProperties }
%struct.VkInstance_T = type opaque
%struct.VmaAllocator_T = type opaque
%struct.VmaVulkanFunctions = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)*, i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)*, i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)*, void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)* }
%struct.VmaAllocatorCreateInfo = type { i32, %struct.VkPhysicalDevice_T*, %struct.VkDevice_T*, i64, %struct.VkAllocationCallbacks*, %struct.VmaDeviceMemoryCallbacks*, i32, i64*, %struct.VmaVulkanFunctions*, %struct.VmaRecordSettings*, %struct.VkInstance_T*, i32 }
%struct.VmaDeviceMemoryCallbacks = type { void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)*, void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)*, i8* }
%struct.VmaRecordSettings = type { i32, i8* }
%struct.VmaAllocation_T = type opaque
%struct.VmaAllocationCreateInfo = type { i32, i32, i32, i32, i32, %struct.VmaPool_T*, i8* }
%struct.VmaPool_T = type opaque
%struct.VmaAllocationInfo = type { i32, %struct.VkDeviceMemory_T*, i64, i64, i8*, i8* }

@vkGetPhysicalDeviceProperties = external local_unnamed_addr global void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)*, align 8
@vkGetPhysicalDeviceMemoryProperties = external local_unnamed_addr global void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)*, align 8
@vkAllocateMemory = external local_unnamed_addr global i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)*, align 8
@vkFreeMemory = external local_unnamed_addr global void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, align 8
@vkMapMemory = external local_unnamed_addr global i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, align 8
@vkUnmapMemory = external local_unnamed_addr global void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, align 8
@vkFlushMappedMemoryRanges = external local_unnamed_addr global i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, align 8
@vkInvalidateMappedMemoryRanges = external local_unnamed_addr global i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, align 8
@vkBindBufferMemory = external local_unnamed_addr global i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, align 8
@vkBindImageMemory = external local_unnamed_addr global i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, align 8
@vkGetBufferMemoryRequirements = external local_unnamed_addr global void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)*, align 8
@vkGetImageMemoryRequirements = external local_unnamed_addr global void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)*, align 8
@vkCreateBuffer = external local_unnamed_addr global i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)*, align 8
@vkDestroyBuffer = external local_unnamed_addr global void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, align 8
@vkCreateImage = external local_unnamed_addr global i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)*, align 8
@vkDestroyImage = external local_unnamed_addr global void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)*, align 8
@vkCmdCopyBuffer = external local_unnamed_addr global void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)*, align 8
@vkGetBufferMemoryRequirements2KHR = external local_unnamed_addr global void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, align 8
@vkGetImageMemoryRequirements2KHR = external local_unnamed_addr global void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, align 8
@vkBindBufferMemory2KHR = external local_unnamed_addr global i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)*, align 8
@vkBindImageMemory2KHR = external local_unnamed_addr global i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)*, align 8
@vkGetPhysicalDeviceMemoryProperties2KHR = external local_unnamed_addr global void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3vma13InitAllocatorEP18VkPhysicalDevice_TP10VkDevice_TP12VkInstance_TjmPP14VmaAllocator_T(%struct.VkPhysicalDevice_T*, %struct.VkDevice_T*, %struct.VkInstance_T*, i32, i64, %struct.VmaAllocator_T**) local_unnamed_addr #0 {
  %7 = alloca %struct.VmaVulkanFunctions, align 8
  %8 = alloca %struct.VmaAllocatorCreateInfo, align 8
  %9 = bitcast %struct.VmaVulkanFunctions* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 176, i8* nonnull %9) #3
  %10 = load i64, i64* bitcast (void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)** @vkGetPhysicalDeviceProperties to i64*), align 8
  %11 = bitcast %struct.VmaVulkanFunctions* %7 to i64*
  store i64 %10, i64* %11, align 8
  %12 = load i64, i64* bitcast (void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)** @vkGetPhysicalDeviceMemoryProperties to i64*), align 8
  %13 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 1
  %14 = bitcast void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)** %13 to i64*
  store i64 %12, i64* %14, align 8
  %15 = load i64, i64* bitcast (i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)** @vkAllocateMemory to i64*), align 8
  %16 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 2
  %17 = bitcast i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = load i64, i64* bitcast (void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)** @vkFreeMemory to i64*), align 8
  %19 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 3
  %20 = bitcast void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)** %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = load i64, i64* bitcast (i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** @vkMapMemory to i64*), align 8
  %22 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 4
  %23 = bitcast i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = load i64, i64* bitcast (void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)** @vkUnmapMemory to i64*), align 8
  %25 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 5
  %26 = bitcast void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)** %25 to i64*
  store i64 %24, i64* %26, align 8
  %27 = load i64, i64* bitcast (i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** @vkFlushMappedMemoryRanges to i64*), align 8
  %28 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 6
  %29 = bitcast i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %28 to i64*
  store i64 %27, i64* %29, align 8
  %30 = load i64, i64* bitcast (i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** @vkInvalidateMappedMemoryRanges to i64*), align 8
  %31 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 7
  %32 = bitcast i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %31 to i64*
  store i64 %30, i64* %32, align 8
  %33 = load i64, i64* bitcast (i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)** @vkBindBufferMemory to i64*), align 8
  %34 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 8
  %35 = bitcast i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)** %34 to i64*
  store i64 %33, i64* %35, align 8
  %36 = load i64, i64* bitcast (i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)** @vkBindImageMemory to i64*), align 8
  %37 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 9
  %38 = bitcast i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)** %37 to i64*
  store i64 %36, i64* %38, align 8
  %39 = load i64, i64* bitcast (void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)** @vkGetBufferMemoryRequirements to i64*), align 8
  %40 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 10
  %41 = bitcast void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)** %40 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* bitcast (void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)** @vkGetImageMemoryRequirements to i64*), align 8
  %43 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 11
  %44 = bitcast void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)** %43 to i64*
  store i64 %42, i64* %44, align 8
  %45 = load i64, i64* bitcast (i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)** @vkCreateBuffer to i64*), align 8
  %46 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 12
  %47 = bitcast i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)** %46 to i64*
  store i64 %45, i64* %47, align 8
  %48 = load i64, i64* bitcast (void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)** @vkDestroyBuffer to i64*), align 8
  %49 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 13
  %50 = bitcast void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load i64, i64* bitcast (i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)** @vkCreateImage to i64*), align 8
  %52 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 14
  %53 = bitcast i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)** %52 to i64*
  store i64 %51, i64* %53, align 8
  %54 = load i64, i64* bitcast (void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)** @vkDestroyImage to i64*), align 8
  %55 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 15
  %56 = bitcast void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)** %55 to i64*
  store i64 %54, i64* %56, align 8
  %57 = load i64, i64* bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)** @vkCmdCopyBuffer to i64*), align 8
  %58 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 16
  %59 = bitcast void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)** %58 to i64*
  store i64 %57, i64* %59, align 8
  %60 = load i64, i64* bitcast (void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** @vkGetBufferMemoryRequirements2KHR to i64*), align 8
  %61 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 17
  %62 = bitcast void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = load i64, i64* bitcast (void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** @vkGetImageMemoryRequirements2KHR to i64*), align 8
  %64 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 18
  %65 = bitcast void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** %64 to i64*
  store i64 %63, i64* %65, align 8
  %66 = load i64, i64* bitcast (i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)** @vkBindBufferMemory2KHR to i64*), align 8
  %67 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 19
  %68 = bitcast i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)** %67 to i64*
  store i64 %66, i64* %68, align 8
  %69 = load i64, i64* bitcast (i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)** @vkBindImageMemory2KHR to i64*), align 8
  %70 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 20
  %71 = bitcast i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)** %70 to i64*
  store i64 %69, i64* %71, align 8
  %72 = load i64, i64* bitcast (void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)** @vkGetPhysicalDeviceMemoryProperties2KHR to i64*), align 8
  %73 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %7, i64 0, i32 21
  %74 = bitcast void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)** %73 to i64*
  store i64 %72, i64* %74, align 8
  %75 = bitcast %struct.VmaAllocatorCreateInfo* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %75) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %75, i8 0, i64 96, i1 false)
  %76 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %8, i64 0, i32 1
  store %struct.VkPhysicalDevice_T* %0, %struct.VkPhysicalDevice_T** %76, align 8
  %77 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %8, i64 0, i32 2
  store %struct.VkDevice_T* %1, %struct.VkDevice_T** %77, align 8
  %78 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %8, i64 0, i32 10
  store %struct.VkInstance_T* %2, %struct.VkInstance_T** %78, align 8
  %79 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %8, i64 0, i32 8
  store %struct.VmaVulkanFunctions* %7, %struct.VmaVulkanFunctions** %79, align 8
  %80 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %8, i64 0, i32 11
  store i32 %3, i32* %80, align 8
  %81 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %8, i64 0, i32 3
  store i64 %4, i64* %81, align 8
  %82 = call i32 @vmaCreateAllocator(%struct.VmaAllocatorCreateInfo* nonnull %8, %struct.VmaAllocator_T** %5) #3
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %75) #3
  call void @llvm.lifetime.end.p0i8(i64 176, i8* nonnull %9) #3
  ret i32 %82
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @vmaCreateAllocator(%struct.VmaAllocatorCreateInfo*, %struct.VmaAllocator_T**) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3vma16DestroyAllocatorEP14VmaAllocator_T(%struct.VmaAllocator_T*) local_unnamed_addr #0 {
  tail call void @vmaDestroyAllocator(%struct.VmaAllocator_T* %0) #3
  ret void
}

declare void @vmaDestroyAllocator(%struct.VmaAllocator_T*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3vma10FreeMemoryEP14VmaAllocator_TP15VmaAllocation_T(%struct.VmaAllocator_T*, %struct.VmaAllocation_T*) local_unnamed_addr #0 {
  tail call void @vmaFreeMemory(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %1) #3
  ret void
}

declare void @vmaFreeMemory(%struct.VmaAllocator_T*, %struct.VmaAllocation_T*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3vma12CreateBufferEP14VmaAllocator_TPK18VkBufferCreateInfojjbPjPP10VkBuffer_TPP15VmaAllocation_T(%struct.VmaAllocator_T*, %struct.VkBufferCreateInfo*, i32, i32, i1 zeroext, i32* nocapture, %struct.VkBuffer_T**, %struct.VmaAllocation_T**) local_unnamed_addr #0 {
  %9 = alloca %struct.VmaAllocationCreateInfo, align 8
  %10 = alloca %struct.VmaAllocationInfo, align 8
  %11 = bitcast %struct.VmaAllocationCreateInfo* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %11) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 40, i1 false)
  %12 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %9, i64 0, i32 2
  store i32 %2, i32* %12, align 8
  %13 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %9, i64 0, i32 3
  store i32 %3, i32* %13, align 4
  %14 = select i1 %4, i32 4, i32 0
  %15 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %9, i64 0, i32 0
  store i32 %14, i32* %15, align 8
  %16 = bitcast %struct.VmaAllocationInfo* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %16) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 48, i1 false)
  %17 = call i32 @vmaCreateBuffer(%struct.VmaAllocator_T* %0, %struct.VkBufferCreateInfo* %1, %struct.VmaAllocationCreateInfo* nonnull %9, %struct.VkBuffer_T** %6, %struct.VmaAllocation_T** %7, %struct.VmaAllocationInfo* nonnull %10) #3
  %18 = getelementptr inbounds %struct.VmaAllocationInfo, %struct.VmaAllocationInfo* %10, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  store i32 %19, i32* %5, align 4
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %16) #3
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %11) #3
  ret i32 %17
}

declare i32 @vmaCreateBuffer(%struct.VmaAllocator_T*, %struct.VkBufferCreateInfo*, %struct.VmaAllocationCreateInfo*, %struct.VkBuffer_T**, %struct.VmaAllocation_T**, %struct.VmaAllocationInfo*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3vma32FindMemoryTypeIndexForBufferInfoEP14VmaAllocator_TPK18VkBufferCreateInfojjbPj(%struct.VmaAllocator_T*, %struct.VkBufferCreateInfo*, i32, i32, i1 zeroext, i32*) local_unnamed_addr #0 {
  %7 = alloca %struct.VmaAllocationCreateInfo, align 8
  %8 = bitcast %struct.VmaAllocationCreateInfo* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 40, i1 false)
  %9 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %7, i64 0, i32 2
  store i32 %2, i32* %9, align 8
  %10 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %7, i64 0, i32 3
  store i32 %3, i32* %10, align 4
  %11 = select i1 %4, i32 4, i32 0
  %12 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %7, i64 0, i32 0
  store i32 %11, i32* %12, align 8
  %13 = call i32 @vmaFindMemoryTypeIndexForBufferInfo(%struct.VmaAllocator_T* %0, %struct.VkBufferCreateInfo* %1, %struct.VmaAllocationCreateInfo* nonnull %7, i32* %5) #3
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #3
  ret i32 %13
}

declare i32 @vmaFindMemoryTypeIndexForBufferInfo(%struct.VmaAllocator_T*, %struct.VkBufferCreateInfo*, %struct.VmaAllocationCreateInfo*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3vma23GetMemoryTypePropertiesEP14VmaAllocator_TjPj(%struct.VmaAllocator_T*, i32, i32*) local_unnamed_addr #0 {
  tail call void @vmaGetMemoryTypeProperties(%struct.VmaAllocator_T* %0, i32 %1, i32* %2) #3
  ret void
}

declare void @vmaGetMemoryTypeProperties(%struct.VmaAllocator_T*, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3vma9MapMemoryEP14VmaAllocator_TP15VmaAllocation_TPPv(%struct.VmaAllocator_T*, %struct.VmaAllocation_T*, i8**) local_unnamed_addr #0 {
  %4 = tail call i32 @vmaMapMemory(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %1, i8** %2) #3
  ret i32 %4
}

declare i32 @vmaMapMemory(%struct.VmaAllocator_T*, %struct.VmaAllocation_T*, i8**) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3vma11UnmapMemoryEP14VmaAllocator_TP15VmaAllocation_T(%struct.VmaAllocator_T*, %struct.VmaAllocation_T*) local_unnamed_addr #0 {
  tail call void @vmaUnmapMemory(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %1) #3
  ret void
}

declare void @vmaUnmapMemory(%struct.VmaAllocator_T*, %struct.VmaAllocation_T*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3vma15FlushAllocationEP14VmaAllocator_TP15VmaAllocation_Tmm(%struct.VmaAllocator_T*, %struct.VmaAllocation_T*, i64, i64) local_unnamed_addr #0 {
  %5 = tail call i32 @vmaFlushAllocation(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %1, i64 %2, i64 %3) #3
  ret void
}

declare i32 @vmaFlushAllocation(%struct.VmaAllocator_T*, %struct.VmaAllocation_T*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3vma20InvalidateAllocationEP14VmaAllocator_TP15VmaAllocation_Tmm(%struct.VmaAllocator_T*, %struct.VmaAllocation_T*, i64, i64) local_unnamed_addr #0 {
  %5 = tail call i32 @vmaInvalidateAllocation(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %1, i64 %2, i64 %3) #3
  ret void
}

declare i32 @vmaInvalidateAllocation(%struct.VmaAllocator_T*, %struct.VmaAllocation_T*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3vma16BuildStatsStringEP14VmaAllocator_TPPcj(%struct.VmaAllocator_T*, i8**, i32) local_unnamed_addr #0 {
  tail call void @vmaBuildStatsString(%struct.VmaAllocator_T* %0, i8** %1, i32 %2) #3
  ret void
}

declare void @vmaBuildStatsString(%struct.VmaAllocator_T*, i8**, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3vma15FreeStatsStringEP14VmaAllocator_TPc(%struct.VmaAllocator_T*, i8*) local_unnamed_addr #0 {
  tail call void @vmaFreeStatsString(%struct.VmaAllocator_T* %0, i8* %1) #3
  ret void
}

declare void @vmaFreeStatsString(%struct.VmaAllocator_T*, i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
