; ModuleID = '../../third_party/swiftshader/src/OpenGL/compiler/TranslatorASM.cpp'
source_filename = "../../third_party/swiftshader/src/OpenGL/compiler/TranslatorASM.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.TranslatorASM = type { %class.TCompiler, %"class.glsl::Shader"* }
%class.TCompiler = type { i32 (...)**, i32, i32, %class.TSymbolTable, %"class.std::__1::map.41", i32, %class.TInfoSink, %class.TPoolAllocator }
%class.TSymbolTable = type <{ %"class.std::__1::vector", %"class.std::__1::vector.14", %"class.std::__1::set", %"class.std::__1::set", i8, [7 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.TSymbolTableLevel**, %class.TSymbolTableLevel**, %"class.std::__1::__compressed_pair.9" }
%class.TSymbolTableLevel = type { %class.TMap }
%class.TMap = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"struct.std::__1::__compressed_pair_elem.0" = type { %class.pool_allocator }
%class.pool_allocator = type { %class.TPoolAllocator* }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %class.TSymbolTableLevel** }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %"class.std::__1::map.16"*, %"class.std::__1::map.16"*, %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::map.16" = type { %"class.std::__1::__tree.17" }
%"class.std::__1::__tree.17" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.18", %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.std::__1::map.16"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree.32" }
%"class.std::__1::__tree.32" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.33", %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::map.41" = type { %"class.std::__1::__tree.42" }
%"class.std::__1::__tree.42" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.43", %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%class.TInfoSink = type { %class.TInfoSinkBase, %class.TInfoSinkBase, %class.TInfoSinkBase }
%class.TInfoSinkBase = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%class.TPoolAllocator = type { i64, i64, i64, i64, i64, %"struct.TPoolAllocator::tHeader"*, %"struct.TPoolAllocator::tHeader"*, %"class.std::__1::vector.1", i32, i64 }
%"struct.TPoolAllocator::tHeader" = type { %"struct.TPoolAllocator::tHeader"*, i64 }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.TPoolAllocator::tAllocState"*, %"struct.TPoolAllocator::tAllocState"*, %"class.std::__1::__compressed_pair.3" }
%"struct.TPoolAllocator::tAllocState" = type { i64, %"struct.TPoolAllocator::tHeader"* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.TPoolAllocator::tAllocState"* }
%"class.glsl::Shader" = type <{ i32 (...)**, %"class.std::__1::list", %"class.std::__1::vector.59", %"class.std::__1::vector.59", %"class.std::__1::vector.73", %"class.std::__1::vector.80", i32, [4 x i8] }>
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.55" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.glsl::Uniform"*, %"struct.glsl::Uniform"*, %"class.std::__1::__compressed_pair.68" }
%"struct.glsl::Uniform" = type <{ %"struct.glsl::ShaderVariable", i32, %"struct.glsl::BlockMemberInfo", [4 x i8] }>
%"struct.glsl::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", i32, i32, %"class.std::__1::vector.61" }
%"class.std::__1::vector.61" = type { %"class.std::__1::__vector_base.62" }
%"class.std::__1::__vector_base.62" = type { %"struct.glsl::ShaderVariable"*, %"struct.glsl::ShaderVariable"*, %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.glsl::ShaderVariable"* }
%"struct.glsl::BlockMemberInfo" = type <{ i32, i32, i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"struct.glsl::Uniform"* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"struct.glsl::Attribute"*, %"struct.glsl::Attribute"*, %"class.std::__1::__compressed_pair.75" }
%"struct.glsl::Attribute" = type <{ i32, [4 x i8], %"class.std::__1::basic_string", i32, i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"struct.glsl::Attribute"* }
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { %"struct.glsl::UniformBlock"*, %"struct.glsl::UniformBlock"*, %"class.std::__1::__compressed_pair.89" }
%"struct.glsl::UniformBlock" = type { %"class.std::__1::basic_string", i32, i32, i32, i8, %"class.std::__1::vector.82", i32, i32 }
%"class.std::__1::vector.82" = type { %"class.std::__1::__vector_base.83" }
%"class.std::__1::__vector_base.83" = type { i32*, i32*, %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { i32* }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"struct.glsl::UniformBlock"* }
%class.TIntermNode = type { i32 (...)**, %struct.TSourceLoc }
%struct.TSourceLoc = type { i32, i32, i32, i32 }
%"class.glsl::OutputASM" = type { %class.TIntermTraverser, %"class.glsl::Shader"*, %"class.sw::Shader"*, %"class.sw::PixelShader"*, %"class.sw::VertexShader"*, %"class.std::__1::vector.139", %"class.std::__1::vector.139", %"class.std::__1::vector.139", %"class.std::__1::vector.139", %"class.std::__1::vector.139", %"class.std::__1::vector.139", %"class.std::__1::vector.146", i32, i32, i32, %"class.std::__1::vector.154", i8, %"class.std::__1::set.161", %class.TParseContext* }
%class.TIntermTraverser = type { i32 (...)**, i8, i8, i8, i8, i32, %class.TVector.107, %"class.std::__1::vector.114" }
%class.TVector.107 = type { %"class.std::__1::vector.108" }
%"class.std::__1::vector.108" = type { %"class.std::__1::__vector_base.109" }
%"class.std::__1::__vector_base.109" = type { %class.TIntermNode**, %class.TIntermNode**, %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111", %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %class.TIntermNode** }
%"struct.std::__1::__compressed_pair_elem.112" = type { %class.pool_allocator.113 }
%class.pool_allocator.113 = type { %class.TPoolAllocator* }
%"class.std::__1::vector.114" = type { %"class.std::__1::__vector_base.115" }
%"class.std::__1::__vector_base.115" = type { %"struct.TIntermTraverser::ParentBlock"*, %"struct.TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.116" }
%"struct.TIntermTraverser::ParentBlock" = type { %class.TIntermAggregate*, i64 }
%class.TIntermAggregate = type <{ %class.TIntermOperator.base, [4 x i8], %class.TVector.107, %"class.std::__1::basic_string.94", i8, i8, i8, i8, %struct.TSourceLoc, [4 x i8] }>
%class.TIntermOperator.base = type <{ %class.TIntermTyped, i32 }>
%class.TIntermTyped = type { %class.TIntermNode, %class.TType }
%class.TType = type { i8, i8, i8, i8, i8, i8, i32, i32, %class.TType*, %class.TInterfaceBlock*, %struct.TLayoutQualifier, %class.TStructure*, %"class.std::__1::basic_string.94"* }
%class.TInterfaceBlock = type <{ %class.TFieldListCollection, %"class.std::__1::basic_string.94"*, i32, i32, i32, [4 x i8] }>
%class.TFieldListCollection = type { i32 (...)**, %"class.std::__1::basic_string.94"*, %class.TVector*, %"class.std::__1::basic_string.94", i64 }
%class.TVector = type { %"class.std::__1::vector.101" }
%"class.std::__1::vector.101" = type { %"class.std::__1::__vector_base.102" }
%"class.std::__1::__vector_base.102" = type { %class.TField**, %class.TField**, %"class.std::__1::__compressed_pair.103" }
%class.TField = type { %class.TType*, %"class.std::__1::basic_string.94"*, %struct.TSourceLoc }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104", %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %class.TField** }
%"struct.std::__1::__compressed_pair_elem.105" = type { %class.pool_allocator.106 }
%class.pool_allocator.106 = type { %class.TPoolAllocator* }
%struct.TLayoutQualifier = type { i32, i32, i32 }
%class.TStructure = type <{ %class.TFieldListCollection, i32, i32, i8, [7 x i8] }>
%"class.std::__1::basic_string.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96", %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon.97 }
%union.anon.97 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::__compressed_pair_elem.99" = type { %class.pool_allocator.100 }
%class.pool_allocator.100 = type { %class.TPoolAllocator* }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"struct.TIntermTraverser::ParentBlock"* }
%"class.sw::Shader" = type <{ i32 (...)**, i32, i32, i32, i8, i8, i8, i8, %"struct.sw::Shader::Limits", i32, %union.anon.121, [2 x i8], %"class.std::__1::vector.123", i16, [2 x i8], i32, i8, i8, i8, i8, i8, [3 x i8] }>
%"struct.sw::Shader::Limits" = type { i32, i32, i32, i32 }
%union.anon.121 = type { i16 }
%"class.std::__1::vector.123" = type { %"class.std::__1::__vector_base.124" }
%"class.std::__1::__vector_base.124" = type { %"struct.sw::Shader::Instruction"**, %"struct.sw::Shader::Instruction"**, %"class.std::__1::__compressed_pair.134" }
%"struct.sw::Shader::Instruction" = type <{ i32 (...)**, i32, %union.anon.125, i8, i8, i8, i8, i32, i32, i8, [3 x i8], %"struct.sw::Shader::DestinationParameter", [5 x %"struct.sw::Shader::SourceParameter"], %union.anon.132, [4 x i8] }>
%union.anon.125 = type { i32 }
%"struct.sw::Shader::DestinationParameter" = type { %"struct.sw::Shader::Parameter.base", %union.anon.130, i8, i8 }
%"struct.sw::Shader::Parameter.base" = type <{ %union.anon.127, i8 }>
%union.anon.127 = type { %struct.anon.128 }
%struct.anon.128 = type { i32, %"struct.sw::Shader::Relative" }
%"struct.sw::Shader::Relative" = type { i8, i32, i8, i32, i8 }
%union.anon.130 = type { i8 }
%"struct.sw::Shader::SourceParameter" = type { %"struct.sw::Shader::Parameter.base", [3 x i8] }
%union.anon.132 = type { i32 }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"struct.sw::Shader::Instruction"** }
%"class.sw::PixelShader" = type { %"class.sw::Shader.base", [32 x [4 x %"struct.sw::Shader::Semantic"]], i8, i8, i8, i8, i8, [6 x i8] }
%"class.sw::Shader.base" = type <{ i32 (...)**, i32, i32, i32, i8, i8, i8, i8, %"struct.sw::Shader::Limits", i32, %union.anon.121, [2 x i8], %"class.std::__1::vector.123", i16, [2 x i8], i32, i8, i8, i8, i8, i8 }>
%"struct.sw::Shader::Semantic" = type { i8, i8, i8, i8 }
%"class.sw::VertexShader" = type <{ %"class.sw::Shader.base", [32 x %"struct.sw::Shader::Semantic"], [34 x [4 x %"struct.sw::Shader::Semantic"]], [32 x i8], [3 x i8], i32, i32, i8, i8, i8, [5 x i8] }>
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %class.TIntermTyped**, %class.TIntermTyped**, %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %class.TIntermTyped** }
%"class.std::__1::vector.146" = type { %"class.std::__1::__vector_base.147" }
%"class.std::__1::__vector_base.147" = type { %"class.std::__1::map.148"*, %"class.std::__1::map.148"*, %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::map.148" = type opaque
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.std::__1::map.148"* }
%"class.std::__1::vector.154" = type { %"class.std::__1::__vector_base.155" }
%"class.std::__1::__vector_base.155" = type { %"struct.glsl::Function"*, %"struct.glsl::Function"*, %"class.std::__1::__compressed_pair.156" }
%"struct.glsl::Function" = type { i32, %"class.std::__1::basic_string.94", %class.TVector.107*, %class.TIntermTyped* }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"struct.glsl::Function"* }
%"class.std::__1::set.161" = type { %"class.std::__1::__tree.162" }
%"class.std::__1::__tree.162" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.163", %"class.std::__1::__compressed_pair.167" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%class.TParseContext = type <{ %class.TIntermediate*, %class.TSymbolTable*, i32, [4 x i8], i8*, i8, i8, i8, i8, i32, i32, [4 x i8], %class.TIntermNode*, i32, i32, i32, [4 x i8], %class.TType*, i8, i8, [2 x i8], i32, i32, [4 x i8], %class.TDiagnostics, %class.TDirectiveHandler, %"class.pp::Preprocessor", i8*, i8, i8, [6 x i8] }>
%class.TIntermediate = type { %class.TInfoSink* }
%class.TDiagnostics = type <{ %"class.pp::Diagnostics", i32, [4 x i8], %class.TInfoSink*, i32, i32, i32, [4 x i8] }>
%"class.pp::Diagnostics" = type { i32 (...)** }
%class.TDirectiveHandler = type { %"class.pp::DirectiveHandler", %struct.TPragma, %"class.std::__1::map.41"*, %class.TDiagnostics*, i32* }
%"class.pp::DirectiveHandler" = type { i32 (...)** }
%struct.TPragma = type { i8, i8 }
%"class.pp::Preprocessor" = type { %"struct.pp::PreprocessorImpl"* }
%"struct.pp::PreprocessorImpl" = type opaque

$_ZN13TranslatorASMD0Ev = comdat any

$_ZN9TCompiler13getAsCompilerEv = comdat any

@_ZTV13TranslatorASM = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.TCompiler*)* @_ZN9TCompilerD2Ev to i8*), i8* bitcast (void (%class.TranslatorASM*)* @_ZN13TranslatorASMD0Ev to i8*), i8* bitcast (%class.TCompiler* (%class.TCompiler*)* @_ZN9TCompiler13getAsCompilerEv to i8*), i8* bitcast (i1 (%class.TranslatorASM*, %class.TIntermNode*)* @_ZN13TranslatorASM9translateEP11TIntermNode to i8*)] }, align 8

@_ZN13TranslatorASMC1EPN4glsl6ShaderEj = hidden unnamed_addr alias void (%class.TranslatorASM*, %"class.glsl::Shader"*, i32), void (%class.TranslatorASM*, %"class.glsl::Shader"*, i32)* @_ZN13TranslatorASMC2EPN4glsl6ShaderEj

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN13TranslatorASMC2EPN4glsl6ShaderEj(%class.TranslatorASM*, %"class.glsl::Shader"*, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.TranslatorASM, %class.TranslatorASM* %0, i64 0, i32 0
  tail call void @_ZN9TCompilerC2Ej(%class.TCompiler* %4, i32 %2) #6
  %5 = getelementptr inbounds %class.TranslatorASM, %class.TranslatorASM* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV13TranslatorASM, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %class.TranslatorASM, %class.TranslatorASM* %0, i64 0, i32 1
  store %"class.glsl::Shader"* %1, %"class.glsl::Shader"** %6, align 8
  ret void
}

; Function Attrs: optsize
declare void @_ZN9TCompilerC2Ej(%class.TCompiler*, i32) unnamed_addr #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN13TranslatorASM9translateEP11TIntermNode(%class.TranslatorASM* nocapture readonly, %class.TIntermNode* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = alloca %"class.glsl::OutputASM", align 8
  %4 = tail call %class.TParseContext* @_Z21GetGlobalParseContextv() #6
  %5 = bitcast %"class.glsl::OutputASM"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 352, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 352, i1 false)
  %6 = getelementptr inbounds %class.TranslatorASM, %class.TranslatorASM* %0, i64 0, i32 1
  %7 = load %"class.glsl::Shader"*, %"class.glsl::Shader"** %6, align 8
  call void @_ZN4glsl9OutputASMC1ER13TParseContextPNS_6ShaderE(%"class.glsl::OutputASM"* nonnull %3, %class.TParseContext* dereferenceable(200) %4, %"class.glsl::Shader"* %7) #6
  call void @_ZN4glsl9OutputASM6outputEv(%"class.glsl::OutputASM"* nonnull %3) #6
  %8 = getelementptr inbounds %class.TParseContext, %class.TParseContext* %4, i64 0, i32 24, i32 4
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  call void @_ZN4glsl9OutputASMD1Ev(%"class.glsl::OutputASM"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 352, i8* nonnull %5) #7
  ret i1 %10
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: optsize
declare %class.TParseContext* @_Z21GetGlobalParseContextv() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: optsize
declare void @_ZN4glsl9OutputASMC1ER13TParseContextPNS_6ShaderE(%"class.glsl::OutputASM"*, %class.TParseContext* dereferenceable(200), %"class.glsl::Shader"*) unnamed_addr #1

; Function Attrs: optsize
declare void @_ZN4glsl9OutputASM6outputEv(%"class.glsl::OutputASM"*) local_unnamed_addr #1

; Function Attrs: nounwind optsize
declare void @_ZN4glsl9OutputASMD1Ev(%"class.glsl::OutputASM"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind optsize
declare void @_ZN9TCompilerD2Ev(%class.TCompiler*) unnamed_addr #3

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN13TranslatorASMD0Ev(%class.TranslatorASM*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.TranslatorASM, %class.TranslatorASM* %0, i64 0, i32 0
  tail call void @_ZN9TCompilerD2Ev(%class.TCompiler* %2) #6
  %3 = bitcast %class.TranslatorASM* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TCompiler* @_ZN9TCompiler13getAsCompilerEv(%class.TCompiler*) unnamed_addr #0 comdat align 2 {
  ret %class.TCompiler* %0
}

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #5

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind optsize }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
