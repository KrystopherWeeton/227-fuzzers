; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/vulkan/RewriteR32fImages.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/vulkan/RewriteR32fImages.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.sh::StaticType::Helpers::StaticMangledName" = type { [4 x i8] }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string.24" }
%"class.sh::TVector.23" = type opaque
%"class.std::__1::basic_string.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon.27 }
%union.anon.27 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TCompiler" = type { %"class.sh::TShHandleBase", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"struct.sh::ValidateASTOptions", %"class.angle::BitSetT", i8, i8, i32, i32, i32, %"class.sh::CallDAG", %"class.std::__1::vector.59", %struct.ShBuiltInResources, %"class.std::__1::basic_string", %"class.sh::TSymbolTable", %"class.std::__1::map.90", %"class.sh::ArrayBoundsClamper", %"class.sh::BuiltInFunctionEmulator", i32, %"class.sh::TInfoSink", %"class.sh::TDiagnostics", i8*, i8, i8, i8, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::map.124", %struct.TPragma, i64 }
%"class.sh::TShHandleBase" = type { i32 (...)**, %"class.angle::PoolAllocator" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.117", i8, i8, %"class.std::__1::vector.1", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::vector.117" = type { %"class.std::__1::__vector_base.118" }
%"class.std::__1::__vector_base.118" = type { i32*, i32*, %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { i32* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::ShaderVariable"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.1" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::InterfaceBlock"* }
%"struct.sh::ValidateASTOptions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.angle::BitSetT" = type { i32 }
%"class.sh::CallDAG" = type { %"class.std::__1::vector.20", %"class.std::__1::map" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::CallDAG::Record"*, %"struct.sh::CallDAG::Record"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::CallDAG::Record" = type { %"class.sh::TIntermFunctionDefinition"*, %"class.std::__1::vector.39" }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.30, i32 }
%union.anon.30 = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { i32*, i32*, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i32* }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::CallDAG::Record"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { i64 }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.sh::TCompiler::FunctionMetadata"*, %"struct.sh::TCompiler::FunctionMetadata"*, %"class.std::__1::__compressed_pair.61" }
%"struct.sh::TCompiler::FunctionMetadata" = type { i8 }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.sh::TCompiler::FunctionMetadata"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.66", %"class.std::__1::vector.73", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map.81", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"class.std::__1::unique_ptr.75"*, %"class.std::__1::unique_ptr.75"*, %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::unique_ptr.75" = type opaque
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.std::__1::unique_ptr.75"* }
%"class.std::__1::map.81" = type { %"class.std::__1::__tree.82" }
%"class.std::__1::__tree.82" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.83", %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::map.90" = type { %"class.std::__1::__tree.91" }
%"class.std::__1::__tree.91" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.92", %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.sh::ArrayBoundsClamper" = type <{ i32, i8, [3 x i8] }>
%"class.sh::BuiltInFunctionEmulator" = type { %"class.std::__1::map.101", %"class.std::__1::map", %"class.std::__1::vector.39", %"class.std::__1::vector.110" }
%"class.std::__1::map.101" = type { %"class.std::__1::__tree.102" }
%"class.std::__1::__tree.102" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::vector.110" = type { %"class.std::__1::__vector_base.111" }
%"class.std::__1::__vector_base.111" = type { i8* (i32)**, i8* (i32)**, %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { i8* (i32)** }
%"class.sh::TInfoSink" = type { %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase" }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.117" }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"class.std::__1::map.124" = type { %"class.std::__1::__tree.125" }
%"class.std::__1::__tree.125" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.126", %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%struct.TPragma = type { i8, i8, i8, %"struct.TPragma::STDGL" }
%"struct.TPragma::STDGL" = type { i8 }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.31" = type { %"class.std::__1::vector.32" }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.sh::TIntermNode"** }
%"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser" = type { %"class.sh::TIntermTraverser", %"class.sh::TCompiler"*, %"class.absl::flat_hash_map" }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.135", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.142", %"class.std::__1::vector.149", %"class.sh::TVector.31", %"class.std::__1::vector.156" }
%"class.std::__1::vector.135" = type { %"class.std::__1::__vector_base.136" }
%"class.std::__1::__vector_base.136" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.137" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector.31" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.142" = type { %"class.std::__1::__vector_base.143" }
%"class.std::__1::__vector_base.143" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.144" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector.31", %"class.sh::TVector.31" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.149" = type { %"class.std::__1::__vector_base.150" }
%"class.std::__1::__vector_base.150" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.151" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.158" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"class.sh::TVariable"*, %"class.sh::TVariable"* }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.170", i8, [7 x i8] }>
%"class.sh::TVector.170" = type { %"class.std::__1::vector.171" }
%"class.std::__1::vector.171" = type { %"class.std::__1::__vector_base.172" }
%"class.std::__1::__vector_base.172" = type { i32*, i32*, %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31" }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::(anonymous namespace)::RewriteExpressionTraverser" = type { %"class.sh::TIntermTraverser", %"class.sh::TCompiler"*, %"class.absl::flat_hash_map"* }

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZNK4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE2atIS6_S7_EEDTclsrT0_5valueclL_ZNSC_9addressofIKSG_EEPT_RSN_EclL_ZNSC_7declvalIRSM_EEDTclsr3std3__1E9__declvalISN_ELi0EEEvEEEEERKSN_ = comdat any

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE27drop_deletes_without_resizeEv = comdat any

$_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = comdat any

@_ZTVN2sh12_GLOBAL__N_126RewriteR32fImagesTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"*)* @_ZN2sh12_GLOBAL__N_126RewriteR32fImagesTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"*)* @_ZN2sh12_GLOBAL__N_126RewriteR32fImagesTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh12_GLOBAL__N_126RewriteR32fImagesTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh12_GLOBAL__N_126RewriteR32fImagesTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh12_GLOBAL__N_126RewriteR32fImagesTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = linkonce_odr hidden constant [16 x i8] c"\FF\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", comdat, align 16
@.str = private unnamed_addr constant [20 x i8] c"imageAtomicExchange\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"imageStore\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"imageLoad\00", align 1
@.str.3 = private unnamed_addr constant [45 x i8] c"absl::container_internal::raw_hash_map<>::at\00", align 1
@_ZN4absl13hash_internal15MixingHashState5kSeedE = external local_unnamed_addr constant i8*, align 8
@_ZTVN2sh12TIntermBlockE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8
@_ZTVN2sh12_GLOBAL__N_126RewriteExpressionTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"*)* @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"30B\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 1, i32 0, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 4, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.22"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZTVN2sh18TIntermDeclarationE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh17RewriteR32fImagesEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %4 = alloca %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", align 8
  %5 = bitcast %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 200, i1 false)
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %4, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %6, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %2) #7
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_126RewriteR32fImagesTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %4, i64 0, i32 1
  store %"class.sh::TCompiler"* %0, %"class.sh::TCompiler"** %8, align 8
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %9, align 8
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %4, i64 0, i32 2, i32 0, i32 0, i32 1
  %11 = bitcast %"union.absl::container_internal::map_slot_type"** %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 32, i1 false) #7
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %6) #7
  %12 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %13 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %6, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %12) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_126RewriteR32fImagesTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %4, i64 0, i32 2, i32 0, i32 0, i32 3
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %3
  %18 = load i8*, i8** %9, align 8
  call void @_ZdlPv(i8* %18) #15
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %9, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 32, i1 false) #7
  br label %19

19:                                               ; preds = %3, %17
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %5) #7
  ret i1 %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_126RewriteR32fImagesTraverserD2Ev(%"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_126RewriteR32fImagesTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #15
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %8, align 8
  %10 = bitcast %"union.absl::container_internal::map_slot_type"** %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false) #7
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %12) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_126RewriteR32fImagesTraverserD0Ev(%"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_126RewriteR32fImagesTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #15
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %8, align 8
  %10 = bitcast %"union.absl::container_internal::map_slot_type"** %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false) #7
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %12) #7
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_126RewriteR32fImagesTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* nocapture, %"class.sh::TIntermSymbol"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_126RewriteR32fImagesTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 1
  %5 = load %"class.sh::TCompiler"*, %"class.sh::TCompiler"** %4, align 8
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 0, i32 8
  %7 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %6, align 8
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 2
  %9 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_126RewriteBuiltinFunctionCallEPNS_9TCompilerEPNS_12TSymbolTableEPNS_16TIntermAggregateERKN4absl13flat_hash_mapIPKNS_9TVariableESB_NS7_18container_internal6HashEqISB_vE4HashENSE_2EqENSt3__19allocatorINSH_4pairIKSB_SB_EEEEEE(%"class.sh::TCompiler"* %5, %"class.sh::TSymbolTable"* %7, %"class.sh::TIntermAggregate"* %2, %"class.absl::flat_hash_map"* dereferenceable(40) %8)
  %10 = icmp eq %"class.sh::TIntermTyped"* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 0
  %13 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %9, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %12, %"class.sh::TIntermNode"* %13, i32 1) #7
  br label %14

14:                                               ; preds = %3, %11
  %15 = phi i1 [ false, %11 ], [ true, %3 ]
  ret i1 %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_126RewriteR32fImagesTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #5 align 2 {
  %4 = alloca [52 x i8], align 8
  %5 = getelementptr inbounds [52 x i8], [52 x i8]* %4, i64 0, i64 0
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %7, label %193

7:                                                ; preds = %3
  %8 = bitcast %"class.sh::TIntermDeclaration"* %2 to %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)***
  %9 = load %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)** %9, i64 27
  %11 = load %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermDeclaration"*)** %10, align 8
  %12 = tail call %"class.sh::TVector.31"* %11(%"class.sh::TIntermDeclaration"* %2) #7
  %13 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %12, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %13, align 8
  %15 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %14, align 8
  %16 = bitcast %"class.sh::TIntermNode"* %15 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %17 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %17, i64 4
  %19 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %18, align 8
  %20 = tail call %"class.sh::TIntermTyped"* %19(%"class.sh::TIntermNode"* %15) #7
  %21 = bitcast %"class.sh::TIntermTyped"* %20 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %22 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %22, i64 31
  %24 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %23, align 8
  %25 = tail call dereferenceable(184) %"class.sh::TType"* %24(%"class.sh::TIntermTyped"* %20) #7
  %26 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %25, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 6
  br i1 %28, label %29, label %193

29:                                               ; preds = %7
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %25, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = add i32 %31, -51
  %33 = icmp ult i32 %32, 33
  br i1 %33, label %34, label %193

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %25, i64 0, i32 7, i32 7
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 3
  br i1 %37, label %38, label %193

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %20, i64 0, i32 0
  %40 = bitcast %"class.sh::TIntermTyped"* %20 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %41 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %40, align 8
  %42 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %41, i64 19
  %43 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %42, align 8
  %44 = tail call %"class.sh::TIntermSymbol"* %43(%"class.sh::TIntermNode"* %39) #7
  %45 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %44, i64 0, i32 1
  %46 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %45, align 8
  %47 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %48 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %47, i64 184) #7
  %49 = bitcast i8* %48 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %49, %"class.sh::TType"* dereferenceable(184) %25) #7
  %50 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %25, i64 0, i32 7
  %51 = bitcast %"struct.sh::TLayoutQualifier"* %50 to i8*
  %52 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %25, i64 0, i32 7, i32 8
  %53 = bitcast i32* %52 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %5)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* align 4 %53, i64 52, i1 false)
  %54 = getelementptr inbounds i8, i8* %48, i64 20
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %54, i8* align 4 %51, i64 36, i1 false)
  %55 = getelementptr inbounds i8, i8* %48, i64 56
  %56 = bitcast i8* %55 to i32*
  store i32 7, i32* %56, align 4
  %57 = getelementptr inbounds i8, i8* %48, i64 60
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %57, i8* nonnull align 8 %5, i64 49, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %5)
  %58 = load i32, i32* %30, align 8
  switch i32 %58, label %71 [
    i32 51, label %69
    i32 54, label %59
    i32 57, label %60
    i32 60, label %61
    i32 63, label %62
    i32 66, label %63
    i32 69, label %64
    i32 72, label %65
    i32 75, label %66
    i32 78, label %67
    i32 81, label %68
  ]

59:                                               ; preds = %38
  br label %69

60:                                               ; preds = %38
  br label %69

61:                                               ; preds = %38
  br label %69

62:                                               ; preds = %38
  br label %69

63:                                               ; preds = %38
  br label %69

64:                                               ; preds = %38
  br label %69

65:                                               ; preds = %38
  br label %69

66:                                               ; preds = %38
  br label %69

67:                                               ; preds = %38
  br label %69

68:                                               ; preds = %38
  br label %69

69:                                               ; preds = %38, %59, %60, %61, %62, %63, %64, %65, %66, %67, %68
  %70 = phi i32 [ 83, %68 ], [ 80, %67 ], [ 77, %66 ], [ 74, %65 ], [ 71, %64 ], [ 68, %63 ], [ 65, %62 ], [ 62, %61 ], [ 59, %60 ], [ 56, %59 ], [ 53, %38 ]
  tail call void @_ZN2sh5TType12setBasicTypeENS_10TBasicTypeE(%"class.sh::TType"* %49, i32 %70) #7
  br label %71

71:                                               ; preds = %69, %38
  %72 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %73 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %72, i64 40) #7
  %74 = bitcast i8* %73 to %"class.sh::TVariable"*
  %75 = bitcast %"class.sh::TVariable"* %46 to %"class.sh::TSymbol"*
  %76 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %75) #7
  %77 = extractvalue { i8*, i64 } %76, 0
  %78 = extractvalue { i8*, i64 } %76, 1
  %79 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %46, i64 0, i32 0, i32 2
  %80 = load i8, i8* %79, align 4
  %81 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %46, i64 0, i32 0, i32 3
  %82 = load i8, i8* %81, align 1
  %83 = bitcast i8* %73 to i8**
  store i8* %77, i8** %83, align 8
  %84 = getelementptr inbounds i8, i8* %73, i64 8
  %85 = bitcast i8* %84 to i64*
  store i64 %78, i64* %85, align 8
  %86 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %46, i64 0, i32 0, i32 1, i32 0
  %87 = getelementptr inbounds i8, i8* %73, i64 16
  %88 = bitcast i8* %87 to i32*
  %89 = load i32, i32* %86, align 4
  store i32 %89, i32* %88, align 8
  %90 = getelementptr inbounds i8, i8* %73, i64 20
  store i8 %80, i8* %90, align 4
  %91 = getelementptr inbounds i8, i8* %73, i64 21
  store i8 %82, i8* %91, align 1
  %92 = getelementptr inbounds i8, i8* %73, i64 22
  store i8 1, i8* %92, align 2
  %93 = getelementptr inbounds i8, i8* %73, i64 24
  %94 = bitcast i8* %93 to i8**
  store i8* %48, i8** %94, align 8
  %95 = getelementptr inbounds i8, i8* %73, i64 32
  %96 = bitcast i8* %95 to %"class.sh::TConstantUnion"**
  store %"class.sh::TConstantUnion"* null, %"class.sh::TConstantUnion"** %96, align 8
  %97 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 2, i32 0
  %98 = ptrtoint %"class.sh::TVariable"* %46 to i64
  %99 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %97, i64 0, i32 0
  %100 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %101 = add i64 %100, %98
  %102 = zext i64 %101 to i128
  %103 = mul nuw i128 %102, 11376068507788127593
  %104 = lshr i128 %103, 64
  %105 = xor i128 %104, %103
  %106 = trunc i128 %105 to i64
  %107 = add i64 %106, %98
  %108 = zext i64 %107 to i128
  %109 = mul nuw i128 %108, 11376068507788127593
  %110 = lshr i128 %109, 64
  %111 = xor i128 %110, %109
  %112 = trunc i128 %111 to i64
  %113 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %97, i64 0, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  %115 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 3
  %116 = load i64, i64* %115, align 8
  %117 = lshr i64 %112, 7
  %118 = ptrtoint i8* %114 to i64
  %119 = lshr i64 %118, 12
  %120 = xor i64 %117, %119
  %121 = trunc i128 %111 to i8
  %122 = and i8 %121, 127
  %123 = insertelement <16 x i8> undef, i8 %122, i32 0
  %124 = shufflevector <16 x i8> %123, <16 x i8> undef, <16 x i32> zeroinitializer
  %125 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  br label %126

126:                                              ; preds = %156, %71
  %127 = phi i64 [ %120, %71 ], [ %158, %156 ]
  %128 = phi i64 [ 0, %71 ], [ %157, %156 ]
  %129 = and i64 %127, %116
  %130 = getelementptr inbounds i8, i8* %114, i64 %129
  %131 = bitcast i8* %130 to <16 x i8>*
  %132 = load <16 x i8>, <16 x i8>* %131, align 1
  %133 = icmp eq <16 x i8> %124, %132
  %134 = bitcast <16 x i1> %133 to i16
  %135 = icmp eq i16 %134, 0
  br i1 %135, label %152, label %136

136:                                              ; preds = %126
  %137 = zext i16 %134 to i32
  %138 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %125, align 8
  br label %139

139:                                              ; preds = %148, %136
  %140 = phi i32 [ %137, %136 ], [ %150, %148 ]
  %141 = tail call i32 @llvm.cttz.i32(i32 %140, i1 false) #7, !range !2
  %142 = zext i32 %141 to i64
  %143 = add i64 %129, %142
  %144 = and i64 %143, %116
  %145 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %138, i64 %144, i32 0, i32 0
  %146 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %145, align 8
  %147 = icmp eq %"class.sh::TVariable"* %146, %46
  br i1 %147, label %167, label %148, !prof !3

148:                                              ; preds = %139
  %149 = add i32 %140, -1
  %150 = and i32 %149, %140
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %139

152:                                              ; preds = %148, %126
  %153 = icmp eq <16 x i8> %132, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %154 = bitcast <16 x i1> %153 to i16
  %155 = icmp eq i16 %154, 0
  br i1 %155, label %156, label %159, !prof !4

156:                                              ; preds = %152
  %157 = add i64 %128, 16
  %158 = add i64 %157, %129
  br label %126

159:                                              ; preds = %152
  %160 = tail call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"* %99, i64 %112) #7
  %161 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %125, align 8, !noalias !5
  %162 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %161, i64 %160
  %163 = bitcast %"union.absl::container_internal::map_slot_type"* %162 to i64*
  store i64 %98, i64* %163, align 8, !noalias !5
  %164 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %161, i64 %160, i32 0, i32 1
  store %"class.sh::TVariable"* null, %"class.sh::TVariable"** %164, align 8, !noalias !5
  %165 = load i8*, i8** %113, align 8, !noalias !5
  %166 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %125, align 8, !noalias !5
  br label %167

167:                                              ; preds = %139, %159
  %168 = phi %"union.absl::container_internal::map_slot_type"* [ %166, %159 ], [ %138, %139 ]
  %169 = phi i8* [ %165, %159 ], [ %114, %139 ]
  %170 = phi i64 [ %160, %159 ], [ %144, %139 ]
  %171 = getelementptr inbounds i8, i8* %169, i64 %170
  %172 = icmp ne i8* %171, null
  tail call void @llvm.assume(i1 %172) #7, !noalias !5
  %173 = load i8, i8* %171, align 1
  %174 = icmp sgt i8 %173, -1
  br i1 %174, label %176, label %175, !prof !3

175:                                              ; preds = %167
  tail call void @llvm.trap() #7
  unreachable

176:                                              ; preds = %167
  %177 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %168, i64 %170, i32 0, i32 1
  %178 = bitcast %"class.sh::TVariable"** %177 to i8**
  store i8* %73, i8** %178, align 8
  %179 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %180 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %179, i64 56) #7
  %181 = bitcast i8* %180 to %"class.sh::TIntermDeclaration"*
  %182 = bitcast i8* %180 to i32 (...)***
  %183 = getelementptr inbounds i8, i8* %180, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %183, i8 0, i64 16, i1 false) #7
  %184 = getelementptr inbounds i8, i8* %180, i64 24
  %185 = bitcast i8* %184 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %182, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %185, align 8
  %186 = getelementptr inbounds i8, i8* %180, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %186, i8 0, i64 24, i1 false) #7
  %187 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %188 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %187, i64 32) #7
  %189 = bitcast i8* %188 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %189, %"class.sh::TVariable"* %74) #7
  %190 = bitcast i8* %188 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %181, %"class.sh::TIntermTyped"* %190) #7
  %191 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser", %"class.sh::(anonymous namespace)::RewriteR32fImagesTraverser"* %0, i64 0, i32 0
  %192 = bitcast i8* %180 to %"class.sh::TIntermNode"*
  tail call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %191, %"class.sh::TIntermNode"* %192, i32 1) #7
  br label %193

193:                                              ; preds = %7, %29, %176, %34, %3
  %194 = phi i1 [ true, %3 ], [ false, %176 ], [ true, %34 ], [ true, %29 ], [ true, %7 ]
  ret i1 %194
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_126RewriteBuiltinFunctionCallEPNS_9TCompilerEPNS_12TSymbolTableEPNS_16TIntermAggregateERKN4absl13flat_hash_mapIPKNS_9TVariableESB_NS7_18container_internal6HashEqISB_vE4HashENSE_2EqENSt3__19allocatorINSH_4pairIKSB_SB_EEEEEE(%"class.sh::TCompiler"*, %"class.sh::TSymbolTable"*, %"class.sh::TIntermAggregate"*, %"class.absl::flat_hash_map"* dereferenceable(40)) unnamed_addr #0 {
  %5 = alloca %"class.sh::TVariable"*, align 8
  %6 = alloca %"class.sh::TVector.31", align 8
  %7 = alloca %"class.sh::TVector.170", align 8
  %8 = alloca %"class.sh::TVector.31", align 8
  %9 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 0, i32 1
  %10 = load i8, i8* %9, align 8
  %11 = icmp eq i8 %10, 3
  br i1 %11, label %12, label %649

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 5
  %14 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %13, align 8
  %15 = tail call zeroext i1 @_ZNK2sh9TFunction15isImageFunctionEv(%"class.sh::TFunction"* %14) #7
  br i1 %15, label %16, label %649

16:                                               ; preds = %12
  %17 = bitcast %"class.sh::TIntermAggregate"* %2 to %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)***
  %18 = load %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)*** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)** %18, i64 32
  %20 = load %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)** %19, align 8
  %21 = tail call %"class.sh::TVector.31"* %20(%"class.sh::TIntermAggregate"* %2) #7
  %22 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %22, align 8
  %24 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %23, align 8
  %25 = bitcast %"class.sh::TIntermNode"* %24 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %26 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %26, i64 4
  %28 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %27, align 8
  %29 = tail call %"class.sh::TIntermTyped"* %28(%"class.sh::TIntermNode"* %24) #7
  %30 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %29, i64 0, i32 0
  %31 = bitcast %"class.sh::TIntermTyped"* %29 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %32 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %31, align 8
  %33 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %32, i64 13
  %34 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %33, align 8
  %35 = tail call %"class.sh::TIntermBinary"* %34(%"class.sh::TIntermNode"* %30) #7
  %36 = bitcast %"class.sh::TIntermTyped"* %29 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %37 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %36, align 8
  %38 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %37, i64 19
  %39 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %38, align 8
  %40 = tail call %"class.sh::TIntermSymbol"* %39(%"class.sh::TIntermNode"* %30) #7
  %41 = icmp ne %"class.sh::TIntermBinary"* %35, null
  br i1 %41, label %42, label %51

42:                                               ; preds = %16
  %43 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %35, i64 0, i32 2
  %44 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %43, align 8
  %45 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %44, i64 0, i32 0
  %46 = bitcast %"class.sh::TIntermTyped"* %44 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %47 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %46, align 8
  %48 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %47, i64 19
  %49 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %48, align 8
  %50 = tail call %"class.sh::TIntermSymbol"* %49(%"class.sh::TIntermNode"* %45) #7
  br label %51

51:                                               ; preds = %42, %16
  %52 = phi %"class.sh::TIntermSymbol"* [ %50, %42 ], [ %40, %16 ]
  %53 = bitcast %"class.sh::TIntermSymbol"* %52 to %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)***
  %54 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*** %53, align 8
  %55 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %54, i64 31
  %56 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %55, align 8
  %57 = tail call dereferenceable(184) %"class.sh::TType"* %56(%"class.sh::TIntermSymbol"* %52) #7
  %58 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %57, i64 0, i32 2
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %59, 6
  br i1 %60, label %61, label %649

61:                                               ; preds = %51
  %62 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %57, i64 0, i32 0
  %63 = load i32, i32* %62, align 8
  %64 = add i32 %63, -51
  %65 = icmp ult i32 %64, 33
  br i1 %65, label %66, label %649

66:                                               ; preds = %61
  %67 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %57, i64 0, i32 7, i32 7
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 3
  br i1 %69, label %70, label %649

70:                                               ; preds = %66
  %71 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %3, i64 0, i32 0
  %72 = bitcast %"class.sh::TVariable"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #7
  %73 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %52, i64 0, i32 1
  %74 = bitcast %"class.sh::TVariable"** %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.sh::TVariable"** %5 to i64*
  store i64 %75, i64* %76, align 8
  %77 = call dereferenceable(8) %"class.sh::TVariable"** @_ZNK4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE2atIS6_S7_EEDTclsrT0_5valueclL_ZNSC_9addressofIKSG_EEPT_RSN_EclL_ZNSC_7declvalIRSM_EEDTclsr3std3__1E9__declvalISN_ELi0EEEvEEEEERKSN_(%"class.absl::container_internal::raw_hash_map"* %71, %"class.sh::TVariable"** nonnull dereferenceable(8) %5)
  %78 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %77, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #7
  %79 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %80 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %79, i64 32) #7
  %81 = bitcast i8* %80 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %81, %"class.sh::TVariable"* %78) #7
  %82 = bitcast i8* %80 to %"class.sh::TIntermTyped"*
  br i1 %41, label %83, label %98

83:                                               ; preds = %70
  %84 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %35, i64 0, i32 3
  %85 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %84, align 8
  %86 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %35, i64 0, i32 0, i32 1
  %87 = load i8, i8* %86, align 8
  %88 = icmp eq i8 %87, 45
  br i1 %88, label %89, label %91

89:                                               ; preds = %83
  %90 = call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_117RewriteExpressionEPNS_9TCompilerEPNS_12TSymbolTableEPNS_12TIntermTypedERKN4absl13flat_hash_mapIPKNS_9TVariableESB_NS7_18container_internal6HashEqISB_vE4HashENSE_2EqENSt3__19allocatorINSH_4pairIKSB_SB_EEEEEE(%"class.sh::TCompiler"* %0, %"class.sh::TSymbolTable"* %1, %"class.sh::TIntermTyped"* %85, %"class.absl::flat_hash_map"* dereferenceable(40) %3)
  br label %91

91:                                               ; preds = %83, %89
  %92 = phi %"class.sh::TIntermTyped"* [ %90, %89 ], [ %85, %83 ]
  %93 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %94 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %93, i64 240) #7
  %95 = bitcast i8* %94 to %"class.sh::TIntermBinary"*
  %96 = load i8, i8* %86, align 8
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %95, i8 zeroext %96, %"class.sh::TIntermTyped"* %82, %"class.sh::TIntermTyped"* %92) #7
  %97 = bitcast i8* %94 to %"class.sh::TIntermTyped"*
  br label %98

98:                                               ; preds = %70, %91
  %99 = phi %"class.sh::TIntermTyped"* [ %97, %91 ], [ %82, %70 ]
  %100 = bitcast %"class.sh::TVector.31"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %100) #7
  %101 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %6, i64 0, i32 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %6, i64 0, i32 0, i32 0, i32 1
  %103 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %100, i8 0, i64 24, i1 false) #7
  %104 = ptrtoint %"class.sh::TIntermTyped"* %99 to i64
  %105 = bitcast %"class.sh::TIntermNode"*** %102 to i64*
  %106 = bitcast %"class.sh::TVector.31"* %6 to i64*
  %107 = bitcast %"class.sh::TIntermNode"*** %103 to i64*
  %108 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %109 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %108, i64 8) #7
  %110 = bitcast i8* %109 to %"class.sh::TIntermNode"**
  %111 = getelementptr inbounds i8, i8* %109, i64 8
  %112 = ptrtoint i8* %111 to i64
  %113 = bitcast i8* %109 to i64*
  store i64 %104, i64* %113, align 8
  %114 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %101, align 8
  %115 = ptrtoint %"class.sh::TIntermNode"** %114 to i64
  %116 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %102, align 8
  %117 = bitcast %"class.sh::TIntermNode"** %116 to i8*
  %118 = icmp eq %"class.sh::TIntermNode"** %116, %114
  br i1 %118, label %292, label %119

119:                                              ; preds = %98
  %120 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 -1
  %121 = ptrtoint %"class.sh::TIntermNode"** %120 to i64
  %122 = sub i64 %121, %115
  %123 = lshr i64 %122, 3
  %124 = add nuw nsw i64 %123, 1
  %125 = icmp ult i64 %124, 4
  br i1 %125, label %222, label %126

126:                                              ; preds = %119
  %127 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 -1
  %128 = ptrtoint %"class.sh::TIntermNode"** %127 to i64
  %129 = sub i64 %128, %115
  %130 = lshr i64 %129, 3
  %131 = and i64 %129, -8
  %132 = xor i64 %131, -8
  %133 = getelementptr i8, i8* %109, i64 %132
  %134 = xor i64 %130, -1
  %135 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 %134
  %136 = bitcast %"class.sh::TIntermNode"** %135 to i8*
  %137 = icmp ult i8* %133, %117
  %138 = icmp ugt i8* %109, %136
  %139 = and i1 %137, %138
  br i1 %139, label %222, label %140

140:                                              ; preds = %126
  %141 = and i64 %124, 4611686018427387900
  %142 = sub nsw i64 0, %141
  %143 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %110, i64 %142
  %144 = sub nsw i64 0, %141
  %145 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 %144
  %146 = add nsw i64 %141, -4
  %147 = lshr exact i64 %146, 2
  %148 = add nuw nsw i64 %147, 1
  %149 = and i64 %148, 1
  %150 = icmp eq i64 %146, 0
  br i1 %150, label %197, label %151

151:                                              ; preds = %140
  %152 = sub nuw nsw i64 %148, %149
  %153 = getelementptr i8, i8* %109, i64 -8
  %154 = bitcast i8* %153 to %"class.sh::TIntermNode"**
  %155 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 -1
  %156 = getelementptr i8, i8* %109, i64 -8
  %157 = bitcast i8* %156 to %"class.sh::TIntermNode"**
  %158 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 -1
  br label %159

159:                                              ; preds = %159, %151
  %160 = phi i64 [ 0, %151 ], [ %194, %159 ]
  %161 = phi i64 [ %152, %151 ], [ %195, %159 ]
  %162 = sub i64 0, %160
  %163 = sub i64 0, %160
  %164 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %154, i64 %162
  %165 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %155, i64 %163
  %166 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -1
  %167 = bitcast %"class.sh::TIntermNode"** %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 8, !alias.scope !10
  %169 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -2
  %170 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %169, i64 -1
  %171 = bitcast %"class.sh::TIntermNode"** %170 to <2 x i64>*
  %172 = load <2 x i64>, <2 x i64>* %171, align 8, !alias.scope !10
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 -1
  %174 = bitcast %"class.sh::TIntermNode"** %173 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %174, align 8, !alias.scope !13, !noalias !10
  %175 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 -2
  %176 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %175, i64 -1
  %177 = bitcast %"class.sh::TIntermNode"** %176 to <2 x i64>*
  store <2 x i64> %172, <2 x i64>* %177, align 8, !alias.scope !13, !noalias !10
  %178 = sub nuw nsw i64 -4, %160
  %179 = sub nuw nsw i64 -4, %160
  %180 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %157, i64 %178
  %181 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %158, i64 %179
  %182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %181, i64 -1
  %183 = bitcast %"class.sh::TIntermNode"** %182 to <2 x i64>*
  %184 = load <2 x i64>, <2 x i64>* %183, align 8, !alias.scope !10
  %185 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %181, i64 -2
  %186 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 -1
  %187 = bitcast %"class.sh::TIntermNode"** %186 to <2 x i64>*
  %188 = load <2 x i64>, <2 x i64>* %187, align 8, !alias.scope !10
  %189 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 -1
  %190 = bitcast %"class.sh::TIntermNode"** %189 to <2 x i64>*
  store <2 x i64> %184, <2 x i64>* %190, align 8, !alias.scope !13, !noalias !10
  %191 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 -2
  %192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %191, i64 -1
  %193 = bitcast %"class.sh::TIntermNode"** %192 to <2 x i64>*
  store <2 x i64> %188, <2 x i64>* %193, align 8, !alias.scope !13, !noalias !10
  %194 = add i64 %160, 8
  %195 = add i64 %161, -2
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %197, label %159, !llvm.loop !15

197:                                              ; preds = %159, %140
  %198 = phi i64 [ 0, %140 ], [ %194, %159 ]
  %199 = icmp eq i64 %149, 0
  br i1 %199, label %220, label %200

200:                                              ; preds = %197
  %201 = sub i64 0, %198
  %202 = getelementptr i8, i8* %109, i64 -8
  %203 = bitcast i8* %202 to %"class.sh::TIntermNode"**
  %204 = sub i64 0, %198
  %205 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 -1
  %206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %203, i64 %201
  %207 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %205, i64 %204
  %208 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -1
  %209 = bitcast %"class.sh::TIntermNode"** %208 to <2 x i64>*
  %210 = load <2 x i64>, <2 x i64>* %209, align 8, !alias.scope !10
  %211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -2
  %212 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %211, i64 -1
  %213 = bitcast %"class.sh::TIntermNode"** %212 to <2 x i64>*
  %214 = load <2 x i64>, <2 x i64>* %213, align 8, !alias.scope !10
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %206, i64 -1
  %216 = bitcast %"class.sh::TIntermNode"** %215 to <2 x i64>*
  store <2 x i64> %210, <2 x i64>* %216, align 8, !alias.scope !13, !noalias !10
  %217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %206, i64 -2
  %218 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %217, i64 -1
  %219 = bitcast %"class.sh::TIntermNode"** %218 to <2 x i64>*
  store <2 x i64> %214, <2 x i64>* %219, align 8, !alias.scope !13, !noalias !10
  br label %220

220:                                              ; preds = %197, %200
  %221 = icmp eq i64 %124, %141
  br i1 %221, label %292, label %222

222:                                              ; preds = %220, %126, %119
  %223 = phi %"class.sh::TIntermNode"** [ %110, %126 ], [ %110, %119 ], [ %143, %220 ]
  %224 = phi %"class.sh::TIntermNode"** [ %116, %126 ], [ %116, %119 ], [ %145, %220 ]
  %225 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %224, i64 -1
  %226 = ptrtoint %"class.sh::TIntermNode"** %225 to i64
  %227 = sub i64 %226, %115
  %228 = lshr i64 %227, 3
  %229 = add nuw nsw i64 %228, 1
  %230 = and i64 %229, 7
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %243, label %232

232:                                              ; preds = %222, %232
  %233 = phi %"class.sh::TIntermNode"** [ %236, %232 ], [ %223, %222 ]
  %234 = phi %"class.sh::TIntermNode"** [ %237, %232 ], [ %224, %222 ]
  %235 = phi i64 [ %241, %232 ], [ %230, %222 ]
  %236 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %233, i64 -1
  %237 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %234, i64 -1
  %238 = bitcast %"class.sh::TIntermNode"** %237 to i64*
  %239 = load i64, i64* %238, align 8
  %240 = bitcast %"class.sh::TIntermNode"** %236 to i64*
  store i64 %239, i64* %240, align 8
  %241 = add i64 %235, -1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %232, !llvm.loop !17

243:                                              ; preds = %232, %222
  %244 = phi %"class.sh::TIntermNode"** [ undef, %222 ], [ %236, %232 ]
  %245 = phi %"class.sh::TIntermNode"** [ %223, %222 ], [ %236, %232 ]
  %246 = phi %"class.sh::TIntermNode"** [ %224, %222 ], [ %237, %232 ]
  %247 = icmp ult i64 %227, 56
  br i1 %247, label %292, label %248

248:                                              ; preds = %243, %248
  %249 = phi %"class.sh::TIntermNode"** [ %286, %248 ], [ %245, %243 ]
  %250 = phi %"class.sh::TIntermNode"** [ %287, %248 ], [ %246, %243 ]
  %251 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -1
  %252 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -1
  %253 = bitcast %"class.sh::TIntermNode"** %252 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = bitcast %"class.sh::TIntermNode"** %251 to i64*
  store i64 %254, i64* %255, align 8
  %256 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -2
  %257 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -2
  %258 = bitcast %"class.sh::TIntermNode"** %257 to i64*
  %259 = load i64, i64* %258, align 8
  %260 = bitcast %"class.sh::TIntermNode"** %256 to i64*
  store i64 %259, i64* %260, align 8
  %261 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -3
  %262 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -3
  %263 = bitcast %"class.sh::TIntermNode"** %262 to i64*
  %264 = load i64, i64* %263, align 8
  %265 = bitcast %"class.sh::TIntermNode"** %261 to i64*
  store i64 %264, i64* %265, align 8
  %266 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -4
  %267 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -4
  %268 = bitcast %"class.sh::TIntermNode"** %267 to i64*
  %269 = load i64, i64* %268, align 8
  %270 = bitcast %"class.sh::TIntermNode"** %266 to i64*
  store i64 %269, i64* %270, align 8
  %271 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -5
  %272 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -5
  %273 = bitcast %"class.sh::TIntermNode"** %272 to i64*
  %274 = load i64, i64* %273, align 8
  %275 = bitcast %"class.sh::TIntermNode"** %271 to i64*
  store i64 %274, i64* %275, align 8
  %276 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -6
  %277 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -6
  %278 = bitcast %"class.sh::TIntermNode"** %277 to i64*
  %279 = load i64, i64* %278, align 8
  %280 = bitcast %"class.sh::TIntermNode"** %276 to i64*
  store i64 %279, i64* %280, align 8
  %281 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -7
  %282 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -7
  %283 = bitcast %"class.sh::TIntermNode"** %282 to i64*
  %284 = load i64, i64* %283, align 8
  %285 = bitcast %"class.sh::TIntermNode"** %281 to i64*
  store i64 %284, i64* %285, align 8
  %286 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -8
  %287 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -8
  %288 = bitcast %"class.sh::TIntermNode"** %287 to i64*
  %289 = load i64, i64* %288, align 8
  %290 = bitcast %"class.sh::TIntermNode"** %286 to i64*
  store i64 %289, i64* %290, align 8
  %291 = icmp eq %"class.sh::TIntermNode"** %287, %114
  br i1 %291, label %292, label %248, !llvm.loop !19

292:                                              ; preds = %243, %248, %220, %98
  %293 = phi %"class.sh::TIntermNode"** [ %110, %98 ], [ %143, %220 ], [ %244, %243 ], [ %286, %248 ]
  %294 = ptrtoint %"class.sh::TIntermNode"** %293 to i64
  store i64 %294, i64* %106, align 8
  store i64 %112, i64* %105, align 8
  store i64 %112, i64* %107, align 8
  %295 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %21, i64 0, i32 0, i32 0, i32 1
  %296 = bitcast %"class.sh::TIntermNode"*** %295 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = bitcast %"class.sh::TVector.31"* %21 to i64*
  %299 = load i64, i64* %298, align 8
  %300 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %21, i64 0, i32 0, i32 0, i32 1
  %301 = bitcast %"class.sh::TIntermNode"*** %300 to i64*
  %302 = sub i64 %297, %299
  %303 = ashr exact i64 %302, 3
  %304 = icmp ugt i64 %303, 1
  br i1 %304, label %305, label %309

305:                                              ; preds = %292
  %306 = bitcast %"class.sh::TIntermNode"*** %102 to i64*
  %307 = bitcast %"class.sh::TVector.31"* %6 to i64*
  %308 = bitcast %"class.sh::TIntermNode"*** %103 to i64*
  br label %321

309:                                              ; preds = %552, %292
  %310 = bitcast %"class.sh::TFunction"** %13 to %"class.sh::TSymbol"**
  %311 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %310, align 8
  %312 = call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %311) #7
  %313 = extractvalue { i8*, i64 } %312, 0
  %314 = icmp eq i8* %313, null
  %315 = select i1 %314, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i64 0, i64 0), i8* %313
  %316 = call i32 @strcmp(i8* %315, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0)) #16
  %317 = icmp eq i32 %316, 0
  %318 = call i32 @strcmp(i8* %315, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0)) #16
  %319 = icmp eq i32 %318, 0
  %320 = or i1 %317, %319
  br i1 %320, label %559, label %574

321:                                              ; preds = %305, %552
  %322 = phi i64 [ %299, %305 ], [ %555, %552 ]
  %323 = phi i64 [ 1, %305 ], [ %553, %552 ]
  %324 = inttoptr i64 %322 to %"class.sh::TIntermNode"**
  %325 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %324, i64 %323
  %326 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %325, align 8
  %327 = bitcast %"class.sh::TIntermNode"* %326 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %328 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %327, align 8
  %329 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %328, i64 4
  %330 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %329, align 8
  %331 = call %"class.sh::TIntermTyped"* %330(%"class.sh::TIntermNode"* %326) #7
  %332 = call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_117RewriteExpressionEPNS_9TCompilerEPNS_12TSymbolTableEPNS_12TIntermTypedERKN4absl13flat_hash_mapIPKNS_9TVariableESB_NS7_18container_internal6HashEqISB_vE4HashENSE_2EqENSt3__19allocatorINSH_4pairIKSB_SB_EEEEEE(%"class.sh::TCompiler"* %0, %"class.sh::TSymbolTable"* %1, %"class.sh::TIntermTyped"* %331, %"class.absl::flat_hash_map"* dereferenceable(40) %3)
  %333 = ptrtoint %"class.sh::TIntermTyped"* %332 to i64
  %334 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %102, align 8
  %335 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %103, align 8
  %336 = icmp ult %"class.sh::TIntermNode"** %334, %335
  %337 = ptrtoint %"class.sh::TIntermNode"** %335 to i64
  br i1 %336, label %338, label %342

338:                                              ; preds = %321
  %339 = bitcast %"class.sh::TIntermNode"** %334 to i64*
  store i64 %333, i64* %339, align 8
  %340 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %334, i64 1
  %341 = ptrtoint %"class.sh::TIntermNode"** %340 to i64
  store i64 %341, i64* %306, align 8
  br label %552

342:                                              ; preds = %321
  %343 = ptrtoint %"class.sh::TIntermNode"** %334 to i64
  %344 = load i64, i64* %307, align 8
  %345 = sub i64 %343, %344
  %346 = ashr exact i64 %345, 3
  %347 = add nsw i64 %346, 1
  %348 = icmp ugt i64 %347, 2305843009213693951
  br i1 %348, label %349, label %351

349:                                              ; preds = %342
  %350 = bitcast %"class.sh::TVector.31"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %350) #17
  unreachable

351:                                              ; preds = %342
  %352 = sub i64 %337, %344
  %353 = ashr exact i64 %352, 3
  %354 = icmp ult i64 %353, 1152921504606846975
  br i1 %354, label %355, label %360

355:                                              ; preds = %351
  %356 = ashr exact i64 %352, 2
  %357 = icmp ult i64 %356, %347
  %358 = select i1 %357, i64 %347, i64 %356
  %359 = icmp eq i64 %358, 0
  br i1 %359, label %366, label %360

360:                                              ; preds = %355, %351
  %361 = phi i64 [ %358, %355 ], [ 2305843009213693951, %351 ]
  %362 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %363 = shl i64 %361, 3
  %364 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %362, i64 %363) #7
  %365 = bitcast i8* %364 to %"class.sh::TIntermNode"**
  br label %366

366:                                              ; preds = %360, %355
  %367 = phi i64 [ %361, %360 ], [ 0, %355 ]
  %368 = phi %"class.sh::TIntermNode"** [ %365, %360 ], [ null, %355 ]
  %369 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %368, i64 %346
  %370 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %368, i64 %367
  %371 = ptrtoint %"class.sh::TIntermNode"** %370 to i64
  %372 = bitcast %"class.sh::TIntermNode"** %369 to i64*
  store i64 %333, i64* %372, align 8
  %373 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %369, i64 1
  %374 = ptrtoint %"class.sh::TIntermNode"** %373 to i64
  %375 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %101, align 8
  %376 = ptrtoint %"class.sh::TIntermNode"** %375 to i64
  %377 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %102, align 8
  %378 = icmp eq %"class.sh::TIntermNode"** %377, %375
  br i1 %378, label %549, label %379

379:                                              ; preds = %366
  %380 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -1
  %381 = ptrtoint %"class.sh::TIntermNode"** %380 to i64
  %382 = sub i64 %381, %376
  %383 = lshr i64 %382, 3
  %384 = add nuw nsw i64 %383, 1
  %385 = icmp ult i64 %384, 4
  br i1 %385, label %479, label %386

386:                                              ; preds = %379
  %387 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %368, i64 -1
  %388 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -1
  %389 = ptrtoint %"class.sh::TIntermNode"** %388 to i64
  %390 = sub i64 %389, %376
  %391 = lshr i64 %390, 3
  %392 = sub nsw i64 %346, %391
  %393 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %387, i64 %392
  %394 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -1
  %395 = sub nsw i64 0, %391
  %396 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %394, i64 %395
  %397 = icmp ult %"class.sh::TIntermNode"** %393, %377
  %398 = icmp ult %"class.sh::TIntermNode"** %396, %369
  %399 = and i1 %397, %398
  br i1 %399, label %479, label %400

400:                                              ; preds = %386
  %401 = and i64 %384, 4611686018427387900
  %402 = sub nsw i64 0, %401
  %403 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %369, i64 %402
  %404 = sub nsw i64 0, %401
  %405 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 %404
  %406 = add nsw i64 %401, -4
  %407 = lshr exact i64 %406, 2
  %408 = add nuw nsw i64 %407, 1
  %409 = and i64 %408, 1
  %410 = icmp eq i64 %406, 0
  br i1 %410, label %455, label %411

411:                                              ; preds = %400
  %412 = sub nuw nsw i64 %408, %409
  %413 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %369, i64 -1
  %414 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -1
  %415 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %369, i64 -1
  %416 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -1
  br label %417

417:                                              ; preds = %417, %411
  %418 = phi i64 [ 0, %411 ], [ %452, %417 ]
  %419 = phi i64 [ %412, %411 ], [ %453, %417 ]
  %420 = sub i64 0, %418
  %421 = sub i64 0, %418
  %422 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %413, i64 %420
  %423 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %414, i64 %421
  %424 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %423, i64 -1
  %425 = bitcast %"class.sh::TIntermNode"** %424 to <2 x i64>*
  %426 = load <2 x i64>, <2 x i64>* %425, align 8, !alias.scope !20
  %427 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %423, i64 -2
  %428 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %427, i64 -1
  %429 = bitcast %"class.sh::TIntermNode"** %428 to <2 x i64>*
  %430 = load <2 x i64>, <2 x i64>* %429, align 8, !alias.scope !20
  %431 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %422, i64 -1
  %432 = bitcast %"class.sh::TIntermNode"** %431 to <2 x i64>*
  store <2 x i64> %426, <2 x i64>* %432, align 8, !alias.scope !23, !noalias !20
  %433 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %422, i64 -2
  %434 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %433, i64 -1
  %435 = bitcast %"class.sh::TIntermNode"** %434 to <2 x i64>*
  store <2 x i64> %430, <2 x i64>* %435, align 8, !alias.scope !23, !noalias !20
  %436 = sub nuw nsw i64 -4, %418
  %437 = sub nuw nsw i64 -4, %418
  %438 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %415, i64 %436
  %439 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %416, i64 %437
  %440 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %439, i64 -1
  %441 = bitcast %"class.sh::TIntermNode"** %440 to <2 x i64>*
  %442 = load <2 x i64>, <2 x i64>* %441, align 8, !alias.scope !20
  %443 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %439, i64 -2
  %444 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %443, i64 -1
  %445 = bitcast %"class.sh::TIntermNode"** %444 to <2 x i64>*
  %446 = load <2 x i64>, <2 x i64>* %445, align 8, !alias.scope !20
  %447 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %438, i64 -1
  %448 = bitcast %"class.sh::TIntermNode"** %447 to <2 x i64>*
  store <2 x i64> %442, <2 x i64>* %448, align 8, !alias.scope !23, !noalias !20
  %449 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %438, i64 -2
  %450 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %449, i64 -1
  %451 = bitcast %"class.sh::TIntermNode"** %450 to <2 x i64>*
  store <2 x i64> %446, <2 x i64>* %451, align 8, !alias.scope !23, !noalias !20
  %452 = add i64 %418, 8
  %453 = add i64 %419, -2
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %455, label %417, !llvm.loop !25

455:                                              ; preds = %417, %400
  %456 = phi i64 [ 0, %400 ], [ %452, %417 ]
  %457 = icmp eq i64 %409, 0
  br i1 %457, label %477, label %458

458:                                              ; preds = %455
  %459 = sub i64 0, %456
  %460 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %369, i64 -1
  %461 = sub i64 0, %456
  %462 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -1
  %463 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %460, i64 %459
  %464 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %462, i64 %461
  %465 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %464, i64 -1
  %466 = bitcast %"class.sh::TIntermNode"** %465 to <2 x i64>*
  %467 = load <2 x i64>, <2 x i64>* %466, align 8, !alias.scope !20
  %468 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %464, i64 -2
  %469 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -1
  %470 = bitcast %"class.sh::TIntermNode"** %469 to <2 x i64>*
  %471 = load <2 x i64>, <2 x i64>* %470, align 8, !alias.scope !20
  %472 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %463, i64 -1
  %473 = bitcast %"class.sh::TIntermNode"** %472 to <2 x i64>*
  store <2 x i64> %467, <2 x i64>* %473, align 8, !alias.scope !23, !noalias !20
  %474 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %463, i64 -2
  %475 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %474, i64 -1
  %476 = bitcast %"class.sh::TIntermNode"** %475 to <2 x i64>*
  store <2 x i64> %471, <2 x i64>* %476, align 8, !alias.scope !23, !noalias !20
  br label %477

477:                                              ; preds = %455, %458
  %478 = icmp eq i64 %384, %401
  br i1 %478, label %549, label %479

479:                                              ; preds = %477, %386, %379
  %480 = phi %"class.sh::TIntermNode"** [ %369, %386 ], [ %369, %379 ], [ %403, %477 ]
  %481 = phi %"class.sh::TIntermNode"** [ %377, %386 ], [ %377, %379 ], [ %405, %477 ]
  %482 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %481, i64 -1
  %483 = ptrtoint %"class.sh::TIntermNode"** %482 to i64
  %484 = sub i64 %483, %376
  %485 = lshr i64 %484, 3
  %486 = add nuw nsw i64 %485, 1
  %487 = and i64 %486, 7
  %488 = icmp eq i64 %487, 0
  br i1 %488, label %500, label %489

489:                                              ; preds = %479, %489
  %490 = phi %"class.sh::TIntermNode"** [ %493, %489 ], [ %480, %479 ]
  %491 = phi %"class.sh::TIntermNode"** [ %494, %489 ], [ %481, %479 ]
  %492 = phi i64 [ %498, %489 ], [ %487, %479 ]
  %493 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %490, i64 -1
  %494 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %491, i64 -1
  %495 = bitcast %"class.sh::TIntermNode"** %494 to i64*
  %496 = load i64, i64* %495, align 8
  %497 = bitcast %"class.sh::TIntermNode"** %493 to i64*
  store i64 %496, i64* %497, align 8
  %498 = add i64 %492, -1
  %499 = icmp eq i64 %498, 0
  br i1 %499, label %500, label %489, !llvm.loop !26

500:                                              ; preds = %489, %479
  %501 = phi %"class.sh::TIntermNode"** [ undef, %479 ], [ %493, %489 ]
  %502 = phi %"class.sh::TIntermNode"** [ %480, %479 ], [ %493, %489 ]
  %503 = phi %"class.sh::TIntermNode"** [ %481, %479 ], [ %494, %489 ]
  %504 = icmp ult i64 %484, 56
  br i1 %504, label %549, label %505

505:                                              ; preds = %500, %505
  %506 = phi %"class.sh::TIntermNode"** [ %543, %505 ], [ %502, %500 ]
  %507 = phi %"class.sh::TIntermNode"** [ %544, %505 ], [ %503, %500 ]
  %508 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 -1
  %509 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %507, i64 -1
  %510 = bitcast %"class.sh::TIntermNode"** %509 to i64*
  %511 = load i64, i64* %510, align 8
  %512 = bitcast %"class.sh::TIntermNode"** %508 to i64*
  store i64 %511, i64* %512, align 8
  %513 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 -2
  %514 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %507, i64 -2
  %515 = bitcast %"class.sh::TIntermNode"** %514 to i64*
  %516 = load i64, i64* %515, align 8
  %517 = bitcast %"class.sh::TIntermNode"** %513 to i64*
  store i64 %516, i64* %517, align 8
  %518 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 -3
  %519 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %507, i64 -3
  %520 = bitcast %"class.sh::TIntermNode"** %519 to i64*
  %521 = load i64, i64* %520, align 8
  %522 = bitcast %"class.sh::TIntermNode"** %518 to i64*
  store i64 %521, i64* %522, align 8
  %523 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 -4
  %524 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %507, i64 -4
  %525 = bitcast %"class.sh::TIntermNode"** %524 to i64*
  %526 = load i64, i64* %525, align 8
  %527 = bitcast %"class.sh::TIntermNode"** %523 to i64*
  store i64 %526, i64* %527, align 8
  %528 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 -5
  %529 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %507, i64 -5
  %530 = bitcast %"class.sh::TIntermNode"** %529 to i64*
  %531 = load i64, i64* %530, align 8
  %532 = bitcast %"class.sh::TIntermNode"** %528 to i64*
  store i64 %531, i64* %532, align 8
  %533 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 -6
  %534 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %507, i64 -6
  %535 = bitcast %"class.sh::TIntermNode"** %534 to i64*
  %536 = load i64, i64* %535, align 8
  %537 = bitcast %"class.sh::TIntermNode"** %533 to i64*
  store i64 %536, i64* %537, align 8
  %538 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 -7
  %539 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %507, i64 -7
  %540 = bitcast %"class.sh::TIntermNode"** %539 to i64*
  %541 = load i64, i64* %540, align 8
  %542 = bitcast %"class.sh::TIntermNode"** %538 to i64*
  store i64 %541, i64* %542, align 8
  %543 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 -8
  %544 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %507, i64 -8
  %545 = bitcast %"class.sh::TIntermNode"** %544 to i64*
  %546 = load i64, i64* %545, align 8
  %547 = bitcast %"class.sh::TIntermNode"** %543 to i64*
  store i64 %546, i64* %547, align 8
  %548 = icmp eq %"class.sh::TIntermNode"** %544, %375
  br i1 %548, label %549, label %505, !llvm.loop !27

549:                                              ; preds = %500, %505, %477, %366
  %550 = phi %"class.sh::TIntermNode"** [ %369, %366 ], [ %403, %477 ], [ %501, %500 ], [ %543, %505 ]
  %551 = ptrtoint %"class.sh::TIntermNode"** %550 to i64
  store i64 %551, i64* %307, align 8
  store i64 %374, i64* %306, align 8
  store i64 %371, i64* %308, align 8
  br label %552

552:                                              ; preds = %338, %549
  %553 = add nuw i64 %323, 1
  %554 = load i64, i64* %301, align 8
  %555 = load i64, i64* %298, align 8
  %556 = sub i64 %554, %555
  %557 = ashr exact i64 %556, 3
  %558 = icmp ult i64 %553, %557
  br i1 %558, label %321, label %309

559:                                              ; preds = %309
  %560 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %102, align 8
  %561 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %560, i64 -1
  %562 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %561, align 8
  %563 = bitcast %"class.sh::TIntermNode"* %562 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %564 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %563, align 8
  %565 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %564, i64 4
  %566 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %565, align 8
  %567 = call %"class.sh::TIntermTyped"* %566(%"class.sh::TIntermNode"* %562) #7
  %568 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %569 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %568, i64 240) #7
  %570 = bitcast i8* %569 to %"class.sh::TIntermUnary"*
  call void @_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"* %570, i8 zeroext 89, %"class.sh::TIntermTyped"* %567, %"class.sh::TFunction"* null) #7
  %571 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %102, align 8
  %572 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %571, i64 -1
  %573 = bitcast %"class.sh::TIntermNode"** %572 to i8**
  store i8* %569, i8** %573, align 8
  br label %577

574:                                              ; preds = %309
  %575 = call i32 @strcmp(i8* %315, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0)) #16
  %576 = icmp eq i32 %575, 0
  br label %577

577:                                              ; preds = %574, %559
  %578 = phi i1 [ false, %559 ], [ %576, %574 ]
  %579 = call %"class.sh::TIntermTyped"* @_ZN2sh29CreateBuiltInFunctionCallNodeEPKcPNS_7TVectorIPNS_11TIntermNodeEEERKNS_12TSymbolTableEi(i8* %315, %"class.sh::TVector.31"* nonnull %6, %"class.sh::TSymbolTable"* dereferenceable(1720) %1, i32 310) #7
  %580 = or i1 %317, %578
  br i1 %580, label %581, label %641

581:                                              ; preds = %577
  br i1 %578, label %582, label %609

582:                                              ; preds = %581
  %583 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %584 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %583, i64 248) #7
  %585 = bitcast %"class.sh::TVector.170"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %585) #7
  %586 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %587 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %586, i64 12) #7
  %588 = bitcast i8* %587 to i32*
  %589 = getelementptr inbounds %"class.sh::TVector.170", %"class.sh::TVector.170"* %7, i64 0, i32 0, i32 0, i32 1
  %590 = bitcast %"class.sh::TVector.170"* %7 to i8**
  store i8* %587, i8** %590, align 8
  %591 = getelementptr inbounds i8, i8* %587, i64 12
  %592 = getelementptr inbounds %"class.sh::TVector.170", %"class.sh::TVector.170"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %593 = bitcast i32** %592 to i8**
  store i8* %591, i8** %593, align 8
  store i32 0, i32* %588, align 4
  %594 = getelementptr inbounds i8, i8* %587, i64 4
  %595 = bitcast i8* %594 to i32*
  store i32 1, i32* %595, align 4
  %596 = getelementptr inbounds i8, i8* %587, i64 8
  %597 = bitcast i8* %596 to i32*
  store i32 2, i32* %597, align 4
  %598 = getelementptr inbounds i8, i8* %587, i64 12
  %599 = bitcast i8* %584 to %"class.sh::TIntermSwizzle"*
  %600 = bitcast i32** %589 to i64*
  %601 = ptrtoint i8* %598 to i64
  store i64 %601, i64* %600, align 8
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %599, %"class.sh::TIntermTyped"* %579, %"class.sh::TVector.170"* nonnull dereferenceable(24) %7) #7
  %602 = bitcast i8* %584 to %"class.sh::TIntermTyped"*
  %603 = getelementptr inbounds %"class.sh::TVector.170", %"class.sh::TVector.170"* %7, i64 0, i32 0, i32 0, i32 0
  %604 = load i32*, i32** %603, align 8
  %605 = icmp eq i32* %604, null
  br i1 %605, label %608, label %606

606:                                              ; preds = %582
  %607 = ptrtoint i32* %604 to i64
  store i64 %607, i64* %600, align 8
  br label %608

608:                                              ; preds = %582, %606
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %585) #7
  br label %609

609:                                              ; preds = %608, %581
  %610 = phi %"class.sh::TIntermTyped"* [ %602, %608 ], [ %579, %581 ]
  %611 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %612 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %611, i64 240) #7
  %613 = bitcast i8* %612 to %"class.sh::TIntermUnary"*
  call void @_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"* %613, i8 zeroext 91, %"class.sh::TIntermTyped"* %610, %"class.sh::TFunction"* null) #7
  %614 = bitcast i8* %612 to %"class.sh::TIntermTyped"*
  br i1 %578, label %615, label %641

615:                                              ; preds = %609
  %616 = bitcast %"class.sh::TVector.31"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %616) #7
  %617 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %8, i64 0, i32 0, i32 0, i32 0
  %618 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %8, i64 0, i32 0, i32 0, i32 1
  %619 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %8, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %620 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float 1.000000e+00) #7
  %621 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %622 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %621, i64 16) #7
  %623 = bitcast %"class.sh::TVector.31"* %8 to i8**
  store i8* %622, i8** %623, align 8
  %624 = getelementptr inbounds i8, i8* %622, i64 16
  %625 = bitcast %"class.sh::TIntermNode"*** %619 to i8**
  store i8* %624, i8** %625, align 8
  %626 = bitcast i8* %622 to i64*
  %627 = ptrtoint i8* %612 to i64
  store i64 %627, i64* %626, align 8
  %628 = getelementptr inbounds i8, i8* %622, i64 8
  %629 = bitcast i8* %628 to i64*
  %630 = ptrtoint %"class.sh::TIntermConstantUnion"* %620 to i64
  store i64 %630, i64* %629, align 8
  %631 = getelementptr inbounds i8, i8* %622, i64 16
  %632 = bitcast %"class.sh::TIntermNode"*** %618 to i64*
  %633 = ptrtoint i8* %631 to i64
  store i64 %633, i64* %632, align 8
  %634 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184) bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE to %"class.sh::TType"*), %"class.sh::TVector.31"* nonnull %8) #7
  %635 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %634, i64 0, i32 0, i32 0, i32 0
  %636 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %617, align 8
  %637 = icmp eq %"class.sh::TIntermNode"** %636, null
  br i1 %637, label %640, label %638

638:                                              ; preds = %615
  %639 = ptrtoint %"class.sh::TIntermNode"** %636 to i64
  store i64 %639, i64* %632, align 8
  br label %640

640:                                              ; preds = %615, %638
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %616) #7
  br label %641

641:                                              ; preds = %577, %609, %640
  %642 = phi %"class.sh::TIntermTyped"* [ %635, %640 ], [ %614, %609 ], [ %579, %577 ]
  %643 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %101, align 8
  %644 = icmp eq %"class.sh::TIntermNode"** %643, null
  br i1 %644, label %648, label %645

645:                                              ; preds = %641
  %646 = ptrtoint %"class.sh::TIntermNode"** %643 to i64
  %647 = bitcast %"class.sh::TIntermNode"*** %102 to i64*
  store i64 %646, i64* %647, align 8
  br label %648

648:                                              ; preds = %641, %645
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %100) #7
  br label %649

649:                                              ; preds = %51, %61, %648, %66, %12, %4
  %650 = phi %"class.sh::TIntermTyped"* [ null, %4 ], [ null, %12 ], [ %642, %648 ], [ null, %66 ], [ null, %61 ], [ null, %51 ]
  ret %"class.sh::TIntermTyped"* %650
}

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZNK2sh9TFunction15isImageFunctionEv(%"class.sh::TFunction"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.sh::TVariable"** @_ZNK4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE2atIS6_S7_EEDTclsrT0_5valueclL_ZNSC_9addressofIKSG_EEPT_RSN_EclL_ZNSC_7declvalIRSM_EEDTclsr3std3__1E9__declvalISN_ELi0EEEvEEEEERKSN_(%"class.absl::container_internal::raw_hash_map"*, %"class.sh::TVariable"** dereferenceable(8)) local_unnamed_addr #5 comdat align 2 {
  %3 = bitcast %"class.sh::TVariable"** %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %6 = add i64 %5, %4
  %7 = zext i64 %6 to i128
  %8 = mul nuw i128 %7, 11376068507788127593
  %9 = lshr i128 %8, 64
  %10 = xor i128 %9, %8
  %11 = trunc i128 %10 to i64
  %12 = add i64 %4, %11
  %13 = zext i64 %12 to i128
  %14 = mul nuw i128 %13, 11376068507788127593
  %15 = lshr i128 %14, 64
  %16 = xor i128 %15, %14
  %17 = trunc i128 %16 to i64
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 3
  %21 = load i64, i64* %20, align 8
  %22 = lshr i64 %17, 7
  %23 = ptrtoint i8* %19 to i64
  %24 = lshr i64 %23, 12
  %25 = xor i64 %22, %24
  %26 = trunc i128 %16 to i8
  %27 = and i8 %26, 127
  %28 = insertelement <16 x i8> undef, i8 %27, i32 0
  %29 = shufflevector <16 x i8> %28, <16 x i8> undef, <16 x i32> zeroinitializer
  %30 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 1
  %31 = inttoptr i64 %4 to %"class.sh::TVariable"*
  br label %32

32:                                               ; preds = %62, %2
  %33 = phi i64 [ %25, %2 ], [ %64, %62 ]
  %34 = phi i64 [ 0, %2 ], [ %63, %62 ]
  %35 = and i64 %33, %21
  %36 = getelementptr inbounds i8, i8* %19, i64 %35
  %37 = bitcast i8* %36 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 1
  %39 = icmp eq <16 x i8> %29, %38
  %40 = bitcast <16 x i1> %39 to i16
  %41 = icmp eq i16 %40, 0
  br i1 %41, label %58, label %42

42:                                               ; preds = %32
  %43 = zext i16 %40 to i32
  %44 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %30, align 8
  br label %45

45:                                               ; preds = %54, %42
  %46 = phi i32 [ %43, %42 ], [ %56, %54 ]
  %47 = tail call i32 @llvm.cttz.i32(i32 %46, i1 false) #7, !range !2
  %48 = zext i32 %47 to i64
  %49 = add i64 %35, %48
  %50 = and i64 %49, %21
  %51 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %44, i64 %50, i32 0, i32 0
  %52 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %51, align 8
  %53 = icmp eq %"class.sh::TVariable"* %52, %31
  br i1 %53, label %65, label %54, !prof !3

54:                                               ; preds = %45
  %55 = add i32 %46, -1
  %56 = and i32 %55, %46
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %45

58:                                               ; preds = %54, %32
  %59 = icmp eq <16 x i8> %38, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %60 = bitcast <16 x i1> %59 to i16
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %62, label %71, !prof !4

62:                                               ; preds = %58
  %63 = add i64 %34, 16
  %64 = add i64 %63, %35
  br label %32

65:                                               ; preds = %45
  %66 = getelementptr inbounds i8, i8* %19, i64 %50
  %67 = icmp ne i8* %66, null
  tail call void @llvm.assume(i1 %67) #7
  %68 = load i8, i8* %66, align 1
  %69 = icmp sgt i8 %68, -1
  br i1 %69, label %72, label %70, !prof !3

70:                                               ; preds = %65
  tail call void @llvm.trap() #7
  unreachable

71:                                               ; preds = %58
  tail call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0)) #17
  unreachable

72:                                               ; preds = %65
  %73 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %44, i64 %50, i32 0, i32 1
  ret %"class.sh::TVariable"** %73
}

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_117RewriteExpressionEPNS_9TCompilerEPNS_12TSymbolTableEPNS_12TIntermTypedERKN4absl13flat_hash_mapIPKNS_9TVariableESB_NS7_18container_internal6HashEqISB_vE4HashENSE_2EqENSt3__19allocatorINSH_4pairIKSB_SB_EEEEEE(%"class.sh::TCompiler"*, %"class.sh::TSymbolTable"*, %"class.sh::TIntermTyped"*, %"class.absl::flat_hash_map"* dereferenceable(40)) unnamed_addr #0 {
  %5 = alloca %"class.sh::TIntermBlock", align 8
  %6 = alloca %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", align 8
  %7 = bitcast %"class.sh::TIntermBlock"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %7) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 64, i1 false)
  %8 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %5, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %5, i64 0, i32 0, i32 1, i32 0
  %10 = bitcast i32* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #7
  %11 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %5, i64 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %5, i64 0, i32 2
  %13 = bitcast %"class.sh::TVector.31"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 25, i1 false) #7
  %14 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %2, i64 0, i32 0
  call void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"* nonnull %5, %"class.sh::TIntermNode"* %14) #7
  %15 = bitcast %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %15) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 168, i1 false)
  %16 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %6, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %16, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %1) #7
  %17 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %6, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_126RewriteExpressionTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %17, align 8
  %18 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %6, i64 0, i32 1
  store %"class.sh::TCompiler"* %0, %"class.sh::TCompiler"** %18, align 8
  %19 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %6, i64 0, i32 2
  store %"class.absl::flat_hash_map"* %3, %"class.absl::flat_hash_map"** %19, align 8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* nonnull %5, %"class.sh::TIntermTraverser"* nonnull %16) #7
  %20 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %5, i64 0, i32 0
  %21 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %16, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* nonnull %20) #7
  %22 = call %"class.sh::TIntermNode"* @_ZNK2sh12TIntermBlock12getChildNodeEm(%"class.sh::TIntermBlock"* nonnull %5, i64 0) #7
  %23 = bitcast %"class.sh::TIntermNode"* %22 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %24 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %23, align 8
  %25 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %24, i64 4
  %26 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %25, align 8
  %27 = call %"class.sh::TIntermTyped"* %26(%"class.sh::TIntermNode"* %22) #7
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %16) #7
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %15) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %28 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  %29 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %28, align 8
  %30 = icmp eq %"class.sh::TIntermNode"** %29, null
  br i1 %30, label %35, label %31

31:                                               ; preds = %4
  %32 = ptrtoint %"class.sh::TIntermNode"** %29 to i64
  %33 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %5, i64 0, i32 2, i32 0, i32 0, i32 1
  %34 = bitcast %"class.sh::TIntermNode"*** %33 to i64*
  store i64 %32, i64* %34, align 8
  br label %35

35:                                               ; preds = %4, %31
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %7) #7
  ret %"class.sh::TIntermTyped"* %27
}

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

declare { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"*) local_unnamed_addr #2

declare void @_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TFunction"*) unnamed_addr #2

declare %"class.sh::TIntermTyped"* @_ZN2sh29CreateBuiltInFunctionCallNodeEPKcPNS_7TVectorIPNS_11TIntermNodeEEERKNS_12TSymbolTableEi(i8*, %"class.sh::TVector.31"*, %"class.sh::TSymbolTable"* dereferenceable(1720), i32) local_unnamed_addr #2

declare void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermTyped"*, %"class.sh::TVector.170"* dereferenceable(24)) unnamed_addr #2

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float) local_unnamed_addr #2

declare %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184), %"class.sh::TVector.31"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8*) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @llvm.assume(i1) #7

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #8

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

declare void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

declare %"class.sh::TIntermNode"* @_ZNK2sh12TIntermBlock12getChildNodeEm(%"class.sh::TIntermBlock"*, i64) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #10

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverserD0Ev(%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %0, i64 0, i32 1
  %5 = load %"class.sh::TCompiler"*, %"class.sh::TCompiler"** %4, align 8
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %0, i64 0, i32 0, i32 8
  %7 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %6, align 8
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %0, i64 0, i32 2
  %9 = load %"class.absl::flat_hash_map"*, %"class.absl::flat_hash_map"** %8, align 8
  %10 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_126RewriteBuiltinFunctionCallEPNS_9TCompilerEPNS_12TSymbolTableEPNS_16TIntermAggregateERKN4absl13flat_hash_mapIPKNS_9TVariableESB_NS7_18container_internal6HashEqISB_vE4HashENSE_2EqENSt3__19allocatorINSH_4pairIKSB_SB_EEEEEE(%"class.sh::TCompiler"* %5, %"class.sh::TSymbolTable"* %7, %"class.sh::TIntermAggregate"* %2, %"class.absl::flat_hash_map"* dereferenceable(40) %9)
  %11 = icmp eq %"class.sh::TIntermTyped"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %0, i64 0, i32 0
  %14 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %10, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %13, %"class.sh::TIntermNode"* %14, i32 1) #7
  br label %15

15:                                               ; preds = %3, %12
  %16 = phi i1 [ false, %12 ], [ true, %3 ]
  ret i1 %16
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #11

declare void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #2

declare void @_ZN2sh5TType12setBasicTypeENS_10TBasicTypeE(%"class.sh::TType"*, i32) local_unnamed_addr #2

declare void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #12 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #7, !range !2
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !3

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 1) #7
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"* %0) #7
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %58) #7
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #7, !range !2
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = shl i64 %1, 4
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #15
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #7
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %100, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %96
  br i1 %24, label %100, label %99

28:                                               ; preds = %25, %96
  %29 = phi i64 [ 0, %25 ], [ %97, %96 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %96

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29
  %35 = bitcast %"union.absl::container_internal::map_slot_type"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %26, %36
  %38 = zext i64 %37 to i128
  %39 = mul nuw i128 %38, 11376068507788127593
  %40 = lshr i128 %39, 64
  %41 = xor i128 %40, %39
  %42 = trunc i128 %41 to i64
  %43 = add i64 %36, %42
  %44 = zext i64 %43 to i128
  %45 = mul nuw i128 %44, 11376068507788127593
  %46 = lshr i128 %45, 64
  %47 = xor i128 %46, %45
  %48 = trunc i128 %47 to i64
  %49 = load i8*, i8** %3, align 8
  %50 = load i64, i64* %7, align 8
  %51 = lshr i64 %48, 7
  %52 = ptrtoint i8* %49 to i64
  %53 = lshr i64 %52, 12
  %54 = xor i64 %51, %53
  %55 = and i64 %54, %50
  %56 = getelementptr inbounds i8, i8* %49, i64 %55
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1
  %59 = icmp slt <16 x i8> %58, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %60 = bitcast <16 x i1> %59 to i16
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %62, label %74

62:                                               ; preds = %33, %62
  %63 = phi i64 [ %67, %62 ], [ %55, %33 ]
  %64 = phi i64 [ %65, %62 ], [ 0, %33 ]
  %65 = add i64 %64, 16
  %66 = add i64 %65, %63
  %67 = and i64 %66, %50
  %68 = getelementptr inbounds i8, i8* %49, i64 %67
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = icmp slt <16 x i8> %70, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %72 = bitcast <16 x i1> %71 to i16
  %73 = icmp eq i16 %72, 0
  br i1 %73, label %62, label %74

74:                                               ; preds = %62, %33
  %75 = phi i64 [ %55, %33 ], [ %67, %62 ]
  %76 = phi i16 [ %60, %33 ], [ %72, %62 ]
  %77 = zext i16 %76 to i32
  %78 = tail call i32 @llvm.cttz.i32(i32 %77, i1 false) #7, !range !2
  %79 = zext i32 %78 to i64
  %80 = add i64 %75, %79
  %81 = and i64 %80, %50
  %82 = trunc i128 %47 to i8
  %83 = and i8 %82, 127
  %84 = getelementptr inbounds i8, i8* %49, i64 %81
  store i8 %83, i8* %84, align 1
  %85 = load i8*, i8** %3, align 8
  %86 = add i64 %81, -15
  %87 = load i64, i64* %7, align 8
  %88 = and i64 %86, %87
  %89 = and i64 %87, 15
  %90 = add i64 %88, %89
  %91 = getelementptr inbounds i8, i8* %85, i64 %90
  store i8 %83, i8* %91, align 1
  %92 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %93 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81
  %94 = bitcast %"union.absl::container_internal::map_slot_type"* %93 to i8*
  %95 = bitcast %"union.absl::container_internal::map_slot_type"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 16, i1 false) #7
  br label %96

96:                                               ; preds = %28, %74
  %97 = add nuw i64 %29, 1
  %98 = icmp eq i64 %97, %8
  br i1 %98, label %27, label %28

99:                                               ; preds = %27
  tail call void @_ZdlPv(i8* %4) #15
  br label %100

100:                                              ; preds = %2, %27, %99
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"*) local_unnamed_addr #12 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #7
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %10 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %19

11:                                               ; preds = %128, %1
  %12 = phi i64 [ 0, %1 ], [ %130, %128 ]
  %13 = lshr i64 %12, 3
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  ret void

19:                                               ; preds = %8, %128
  %20 = phi i64 [ %6, %8 ], [ %131, %128 ]
  %21 = phi i64 [ 0, %8 ], [ %130, %128 ]
  %22 = load i8*, i8** %2, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, -2
  br i1 %25, label %26, label %128

26:                                               ; preds = %19
  %27 = ptrtoint i8* %22 to i64
  %28 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %21, i32 0
  %30 = bitcast %"struct.std::__1::pair"* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %10, %31
  %33 = zext i64 %32 to i128
  %34 = mul nuw i128 %33, 11376068507788127593
  %35 = lshr i128 %34, 64
  %36 = xor i128 %35, %34
  %37 = trunc i128 %36 to i64
  %38 = add i64 %31, %37
  %39 = zext i64 %38 to i128
  %40 = mul nuw i128 %39, 11376068507788127593
  %41 = lshr i128 %40, 64
  %42 = xor i128 %41, %40
  %43 = trunc i128 %42 to i64
  %44 = lshr i64 %43, 7
  %45 = lshr i64 %27, 12
  %46 = xor i64 %44, %45
  %47 = and i64 %46, %20
  %48 = getelementptr inbounds i8, i8* %22, i64 %47
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1
  %51 = icmp slt <16 x i8> %50, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %52 = bitcast <16 x i1> %51 to i16
  %53 = icmp eq i16 %52, 0
  br i1 %53, label %54, label %66

54:                                               ; preds = %26, %54
  %55 = phi i64 [ %59, %54 ], [ %47, %26 ]
  %56 = phi i64 [ %57, %54 ], [ 0, %26 ]
  %57 = add i64 %56, 16
  %58 = add i64 %57, %55
  %59 = and i64 %58, %20
  %60 = getelementptr inbounds i8, i8* %22, i64 %59
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = icmp slt <16 x i8> %62, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %64 = bitcast <16 x i1> %63 to i16
  %65 = icmp eq i16 %64, 0
  br i1 %65, label %54, label %66

66:                                               ; preds = %54, %26
  %67 = phi i64 [ %47, %26 ], [ %59, %54 ]
  %68 = phi i16 [ %52, %26 ], [ %64, %54 ]
  %69 = zext i16 %68 to i32
  %70 = tail call i32 @llvm.cttz.i32(i32 %69, i1 false) #7, !range !2
  %71 = zext i32 %70 to i64
  %72 = add i64 %67, %71
  %73 = and i64 %72, %20
  %74 = sub i64 %73, %47
  %75 = sub i64 %21, %47
  %76 = xor i64 %74, %75
  %77 = and i64 %76, %20
  %78 = icmp ult i64 %77, 16
  br i1 %78, label %79, label %89, !prof !3

79:                                               ; preds = %66
  %80 = trunc i128 %42 to i8
  %81 = and i8 %80, 127
  store i8 %81, i8* %23, align 1
  %82 = load i8*, i8** %2, align 8
  %83 = add i64 %21, -15
  %84 = load i64, i64* %4, align 8
  %85 = and i64 %84, %83
  %86 = and i64 %84, 15
  %87 = add i64 %85, %86
  %88 = getelementptr inbounds i8, i8* %82, i64 %87
  store i8 %81, i8* %88, align 1
  br label %128

89:                                               ; preds = %66
  %90 = getelementptr inbounds i8, i8* %22, i64 %73
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, -128
  %93 = trunc i128 %42 to i8
  %94 = and i8 %93, 127
  store i8 %94, i8* %90, align 1
  %95 = load i8*, i8** %2, align 8
  %96 = add i64 %73, -15
  %97 = load i64, i64* %4, align 8
  %98 = and i64 %97, %96
  %99 = and i64 %97, 15
  %100 = add i64 %98, %99
  %101 = getelementptr inbounds i8, i8* %95, i64 %100
  store i8 %94, i8* %101, align 1
  %102 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  br i1 %92, label %103, label %117

103:                                              ; preds = %89
  %104 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73
  %105 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21
  %106 = bitcast %"union.absl::container_internal::map_slot_type"* %104 to i8*
  %107 = bitcast %"union.absl::container_internal::map_slot_type"* %105 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 16, i1 false) #7
  %108 = load i8*, i8** %2, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 %21
  store i8 -128, i8* %109, align 1
  %110 = load i8*, i8** %2, align 8
  %111 = add i64 %21, -15
  %112 = load i64, i64* %4, align 8
  %113 = and i64 %112, %111
  %114 = and i64 %112, 15
  %115 = add i64 %113, %114
  %116 = getelementptr inbounds i8, i8* %110, i64 %115
  store i8 -128, i8* %116, align 1
  br label %128

117:                                              ; preds = %89
  %118 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21
  %119 = bitcast %"union.absl::container_internal::map_slot_type"* %118 to i8*
  %120 = bitcast %"union.absl::container_internal::map_slot_type"* %118 to <16 x i8>*
  %121 = load <16 x i8>, <16 x i8>* %120, align 8
  %122 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73
  %123 = bitcast %"union.absl::container_internal::map_slot_type"* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %123, i64 16, i1 false) #7
  %124 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %125 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %124, i64 %73
  %126 = bitcast %"union.absl::container_internal::map_slot_type"* %125 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %126, align 8
  %127 = add i64 %21, -1
  br label %128

128:                                              ; preds = %79, %117, %103, %19
  %129 = phi i64 [ %21, %19 ], [ %21, %79 ], [ %21, %103 ], [ %127, %117 ]
  %130 = add i64 %129, 1
  %131 = load i64, i64* %4, align 8
  %132 = icmp eq i64 %130, %131
  br i1 %132, label %11, label %19
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #13

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #14

declare void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { builtin nounwind }
attributes #16 = { nounwind readonly }
attributes #17 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!"branch_weights", i32 1, i32 2000}
!5 = !{!6, !8}
!6 = distinct !{!6, !7, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE16try_emplace_implIS6_JEEENSE_INS0_12raw_hash_setIS7_SA_SB_SH_E8iteratorEbEEOT_DpOT0_: argument 0"}
!7 = distinct !{!7, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE16try_emplace_implIS6_JEEENSE_INS0_12raw_hash_setIS7_SA_SB_SH_E8iteratorEbEEOT_DpOT0_"}
!8 = distinct !{!8, !9, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE11try_emplaceIS6_JELi0ELPS6_0EEENSE_INS0_12raw_hash_setIS7_SA_SB_SH_E8iteratorEbEEOT_DpOT0_: argument 0"}
!9 = distinct !{!9, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableES6_EENS0_6HashEqIS6_vE4HashENS9_2EqENSt3__19allocatorINSC_4pairIKS6_S6_EEEEE11try_emplaceIS6_JELi0ELPS6_0EEENSE_INS0_12raw_hash_setIS7_SA_SB_SH_E8iteratorEbEEOT_DpOT0_"}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.isvectorized", i32 1}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = distinct !{!19, !16}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !16}
!26 = distinct !{!26, !18}
!27 = distinct !{!27, !16}
