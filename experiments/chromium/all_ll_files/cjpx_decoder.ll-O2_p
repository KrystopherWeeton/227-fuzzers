; ModuleID = '../../third_party/pdfium/core/fxcodec/jpx/cjpx_decoder.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/jpx/cjpx_decoder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.fxcodec::CJPX_Decoder" = type <{ i32, [4 x i8], %"class.pdfium::span", %"class.fxcrt::UnownedPtr.0", %"class.fxcrt::UnownedPtr.1", %"class.std::__1::unique_ptr.2", %"class.fxcrt::UnownedPtr.1", %struct.opj_dparameters, [4 x i8] }>
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.fxcrt::UnownedPtr.0" = type { %struct.opj_image* }
%struct.opj_image = type { i32, i32, i32, i32, i32, i32, %struct.opj_image_comp*, i8*, i32 }
%struct.opj_image_comp = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i16 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.fxcodec::DecodeData"* }
%"struct.fxcodec::DecodeData" = type { i8*, i64, i64 }
%"class.fxcrt::UnownedPtr.1" = type { i8** }
%struct.opj_dparameters = type { i32, i32, [4096 x i8], [4096 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

@_ZZN7fxcodec12CJPX_Decoder4InitEN6pdfium4spanIKhEEE11szJP2Header = internal constant [12 x i8] c"\00\00\00\0CjP  \0D\0A\87\0A", align 1

@_ZN7fxcodec12CJPX_DecoderC1ENS0_16ColorSpaceOptionE = hidden unnamed_addr alias void (%"class.fxcodec::CJPX_Decoder"*, i32), void (%"class.fxcodec::CJPX_Decoder"*, i32)* @_ZN7fxcodec12CJPX_DecoderC2ENS0_16ColorSpaceOptionE
@_ZN7fxcodec12CJPX_DecoderD1Ev = hidden unnamed_addr alias void (%"class.fxcodec::CJPX_Decoder"*), void (%"class.fxcodec::CJPX_Decoder"*)* @_ZN7fxcodec12CJPX_DecoderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden %"class.fxcodec::CJPX_Decoder"* @_ZN7fxcodec12CJPX_Decoder6CreateEN6pdfium4spanIKhEENS0_16ColorSpaceOptionE(%"class.pdfium::span"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.pdfium::span", align 8
  %4 = tail call i8* @_Znwm(i64 8312) #9
  %5 = bitcast i8* %4 to %"class.fxcodec::CJPX_Decoder"*
  %6 = bitcast i8* %4 to i32*
  store i32 %1, i32* %6, align 8
  %7 = getelementptr inbounds i8, i8* %4, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 48, i1 false) #10
  %8 = ptrtoint i8* %4 to i64
  %9 = bitcast %"class.pdfium::span"* %3 to i8*
  %10 = bitcast %"class.pdfium::span"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* align 8 %10, i64 16, i1 false)
  %11 = call zeroext i1 @_ZN7fxcodec12CJPX_Decoder4InitEN6pdfium4spanIKhEE(%"class.fxcodec::CJPX_Decoder"* nonnull %5, %"class.pdfium::span"* nonnull %3)
  br i1 %11, label %41, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds i8, i8* %4, i64 32
  %14 = bitcast i8* %13 to i8***
  %15 = load i8**, i8*** %14, align 8
  %16 = icmp eq i8** %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %12
  %18 = bitcast i8* %13 to i64*
  store i64 0, i64* %18, align 8
  tail call void @opj_destroy_codec(i8** nonnull %15) #10
  br label %19

19:                                               ; preds = %17, %12
  %20 = getelementptr inbounds i8, i8* %4, i64 48
  %21 = bitcast i8* %20 to i8***
  %22 = load i8**, i8*** %21, align 8
  %23 = icmp eq i8** %22, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %19
  %25 = bitcast i8* %20 to i64*
  store i64 0, i64* %25, align 8
  tail call void @opj_stream_destroy(i8** nonnull %22) #10
  br label %26

26:                                               ; preds = %24, %19
  %27 = getelementptr inbounds i8, i8* %4, i64 24
  %28 = bitcast i8* %27 to %struct.opj_image**
  %29 = load %struct.opj_image*, %struct.opj_image** %28, align 8
  %30 = icmp eq %struct.opj_image* %29, null
  br i1 %30, label %33, label %31

31:                                               ; preds = %26
  %32 = bitcast i8* %27 to i64*
  store i64 0, i64* %32, align 8
  tail call void @opj_image_destroy(%struct.opj_image* nonnull %29) #10
  br label %33

33:                                               ; preds = %31, %26
  %34 = getelementptr inbounds i8, i8* %4, i64 40
  %35 = bitcast i8* %34 to %"struct.fxcodec::DecodeData"**
  %36 = load %"struct.fxcodec::DecodeData"*, %"struct.fxcodec::DecodeData"** %35, align 8
  store %"struct.fxcodec::DecodeData"* null, %"struct.fxcodec::DecodeData"** %35, align 8
  %37 = icmp eq %"struct.fxcodec::DecodeData"* %36, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %33
  %39 = bitcast %"struct.fxcodec::DecodeData"* %36 to i8*
  tail call void @_ZdlPv(i8* %39) #9
  br label %40

40:                                               ; preds = %33, %38
  tail call void @_ZdlPv(i8* nonnull %4) #9
  br label %41

41:                                               ; preds = %2, %40
  %42 = phi i64 [ 0, %40 ], [ %8, %2 ]
  %43 = inttoptr i64 %42 to %"class.fxcodec::CJPX_Decoder"*
  ret %"class.fxcodec::CJPX_Decoder"* %43
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7fxcodec12CJPX_Decoder4InitEN6pdfium4spanIKhEE(%"class.fxcodec::CJPX_Decoder"*, %"class.pdfium::span"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.opj_image*, align 8
  %4 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, 12
  br i1 %6, label %96, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 3, i32 0
  store %struct.opj_image* null, %struct.opj_image** %8, align 8
  %9 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 2, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %10, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %7
  store i8* %12, i8** %9, align 8
  br label %15

15:                                               ; preds = %7, %14
  %16 = load i64, i64* %4, align 8
  %17 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 2, i32 1
  store i64 %16, i64* %17, align 8
  %18 = bitcast %"class.pdfium::span"* %1 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 8
  %20 = tail call i8* @_Znwm(i64 24) #9
  %21 = bitcast i8* %20 to <2 x i64>*
  store <2 x i64> %19, <2 x i64>* %21, align 8
  %22 = getelementptr inbounds i8, i8* %20, i64 16
  %23 = bitcast i8* %22 to i64*
  store i64 0, i64* %23, align 8
  %24 = ptrtoint i8* %20 to i64
  %25 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 5
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = load %"struct.fxcodec::DecodeData"*, %"struct.fxcodec::DecodeData"** %26, align 8
  %28 = bitcast %"class.std::__1::unique_ptr.2"* %25 to i64*
  store i64 %24, i64* %28, align 8
  %29 = icmp eq %"struct.fxcodec::DecodeData"* %27, null
  %30 = bitcast i8* %20 to %"struct.fxcodec::DecodeData"*
  br i1 %29, label %35, label %31

31:                                               ; preds = %15
  %32 = bitcast %"struct.fxcodec::DecodeData"* %27 to i8*
  tail call void @_ZdlPv(i8* %32) #9
  %33 = load %"struct.fxcodec::DecodeData"*, %"struct.fxcodec::DecodeData"** %26, align 8
  %34 = icmp eq %"struct.fxcodec::DecodeData"* %33, null
  br i1 %34, label %47, label %35

35:                                               ; preds = %15, %31
  %36 = phi %"struct.fxcodec::DecodeData"* [ %33, %31 ], [ %30, %15 ]
  %37 = getelementptr inbounds %"struct.fxcodec::DecodeData", %"struct.fxcodec::DecodeData"* %36, i64 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %47, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"struct.fxcodec::DecodeData", %"struct.fxcodec::DecodeData"* %36, i64 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %40
  %45 = tail call i8** @opj_stream_create(i64 1048576, i32 1) #10
  %46 = icmp eq i8** %45, null
  br i1 %46, label %47, label %49

47:                                               ; preds = %35, %31, %40, %44
  %48 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 6, i32 0
  store i8** null, i8*** %48, align 8
  br label %96

49:                                               ; preds = %44
  %50 = bitcast %"struct.fxcodec::DecodeData"* %36 to i8*
  tail call void @opj_stream_set_user_data(i8** nonnull %45, i8* nonnull %50, void (i8*)* null) #10
  %51 = load i64, i64* %41, align 8
  tail call void @opj_stream_set_user_data_length(i8** nonnull %45, i64 %51) #10
  tail call void @opj_stream_set_read_function(i8** nonnull %45, i64 (i8*, i64, i8*)* nonnull @_ZN7fxcodec20opj_read_from_memoryEPvmS0_) #10
  tail call void @opj_stream_set_skip_function(i8** nonnull %45, i64 (i64, i8*)* nonnull @_ZN7fxcodec20opj_skip_from_memoryElPv) #10
  tail call void @opj_stream_set_seek_function(i8** nonnull %45, i32 (i64, i8*)* nonnull @_ZN7fxcodec20opj_seek_from_memoryElPv) #10
  %52 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 6, i32 0
  store i8** %45, i8*** %52, align 8
  %53 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 7
  tail call void @opj_set_default_decoder_parameters(%struct.opj_dparameters* %53) #10
  %54 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 7, i32 4
  store i32 0, i32* %54, align 8
  %55 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 7, i32 5
  store i32 3, i32* %55, align 4
  %56 = load i8*, i8** %9, align 8
  %57 = tail call i32 @bcmp(i8* %56, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @_ZZN7fxcodec12CJPX_Decoder4InitEN6pdfium4spanIKhEEE11szJP2Header, i64 0, i64 0), i64 12)
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %49
  %60 = tail call i8** @opj_create_decompress(i32 2) #10
  store i32 1, i32* %54, align 8
  br label %63

61:                                               ; preds = %49
  %62 = tail call i8** @opj_create_decompress(i32 0) #10
  br label %63

63:                                               ; preds = %61, %59
  %64 = phi i8** [ %62, %61 ], [ %60, %59 ]
  %65 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 4, i32 0
  store i8** %64, i8*** %65, align 8
  %66 = icmp eq i8** %64, null
  br i1 %66, label %96, label %67

67:                                               ; preds = %63
  %68 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 0
  %69 = load i32, i32* %68, align 8
  %70 = icmp eq i32 %69, 2
  br i1 %70, label %71, label %75

71:                                               ; preds = %67
  %72 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 7, i32 16
  %73 = load i32, i32* %72, align 8
  %74 = or i32 %73, 1
  store i32 %74, i32* %72, align 8
  br label %75

75:                                               ; preds = %71, %67
  %76 = tail call i32 @opj_set_info_handler(i8** nonnull %64, void (i8*, i8*)* nonnull @_ZN7fxcodec12_GLOBAL__N_118fx_ignore_callbackEPKcPv, i8* null) #10
  %77 = load i8**, i8*** %65, align 8
  %78 = tail call i32 @opj_set_warning_handler(i8** %77, void (i8*, i8*)* nonnull @_ZN7fxcodec12_GLOBAL__N_118fx_ignore_callbackEPKcPv, i8* null) #10
  %79 = load i8**, i8*** %65, align 8
  %80 = tail call i32 @opj_set_error_handler(i8** %79, void (i8*, i8*)* nonnull @_ZN7fxcodec12_GLOBAL__N_118fx_ignore_callbackEPKcPv, i8* null) #10
  %81 = load i8**, i8*** %65, align 8
  %82 = tail call i32 @opj_setup_decoder(i8** %81, %struct.opj_dparameters* %53) #10
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %96, label %84

84:                                               ; preds = %75
  store %struct.opj_image* null, %struct.opj_image** %8, align 8
  %85 = bitcast %struct.opj_image** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %85) #10
  store %struct.opj_image* null, %struct.opj_image** %3, align 8
  %86 = load i8**, i8*** %52, align 8
  %87 = load i8**, i8*** %65, align 8
  %88 = call i32 @opj_read_header(i8** %86, i8** %87, %struct.opj_image** nonnull %3) #10
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %94, label %90

90:                                               ; preds = %84
  %91 = bitcast %struct.opj_image** %3 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = bitcast %struct.opj_image** %8 to i64*
  store i64 %92, i64* %93, align 8
  br label %94

94:                                               ; preds = %84, %90
  %95 = phi i1 [ true, %90 ], [ false, %84 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %85) #10
  br label %96

96:                                               ; preds = %63, %47, %75, %2, %94
  %97 = phi i1 [ %95, %94 ], [ false, %2 ], [ false, %63 ], [ false, %75 ], [ false, %47 ]
  ret i1 %97
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec12CJPX_Decoder22Sycc420ToRgbForTestingEP9opj_image(%struct.opj_image* readonly) local_unnamed_addr #0 align 2 {
  tail call fastcc void @_ZN7fxcodec12_GLOBAL__N_114sycc420_to_rgbEP9opj_image(%struct.opj_image* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7fxcodec12_GLOBAL__N_114sycc420_to_rgbEP9opj_image(%struct.opj_image* readonly) unnamed_addr #0 {
  %2 = icmp eq %struct.opj_image* %0, null
  br i1 %2, label %547, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 6
  %5 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8
  %6 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %5, i64 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %547, label %9

9:                                                ; preds = %3
  %10 = add nuw i32 %7, 1
  %11 = lshr i32 %10, 1
  %12 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %5, i64 1, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %547

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %5, i64 2, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %11, %17
  br i1 %18, label %19, label %547

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %5, i64 1, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %5, i64 2, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %21, %23
  br i1 %24, label %25, label %547

25:                                               ; preds = %19
  %26 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %5, i64 0, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, -1
  br i1 %28, label %547, label %29

29:                                               ; preds = %25
  %30 = add nuw i32 %27, 1
  %31 = lshr i32 %30, 1
  %32 = icmp eq i32 %31, %21
  br i1 %32, label %33, label %547

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %5, i64 0, i32 6
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %547, label %37

37:                                               ; preds = %33
  %38 = add i32 %35, -1
  %39 = shl i32 1, %38
  %40 = shl nsw i32 -1, %35
  %41 = xor i32 %40, -1
  %42 = and i32 %7, 1
  %43 = icmp ne i32 %42, 0
  %44 = lshr i32 %7, 1
  %45 = icmp eq i32 %44, %11
  %46 = and i1 %43, %45
  %47 = and i32 %27, 1
  %48 = icmp ne i32 %47, 0
  %49 = lshr i32 %27, 1
  %50 = icmp eq i32 %49, %21
  %51 = and i1 %48, %50
  %52 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %7, i32 %27) #10
  %53 = extractvalue { i32, i1 } %52, 1
  br i1 %53, label %547, label %54

54:                                               ; preds = %37
  %55 = extractvalue { i32, i1 } %52, 0
  %56 = zext i32 %55 to i64
  %57 = icmp ult i32 %55, 1073741824
  %58 = shl nuw nsw i64 %56, 2
  %59 = and i64 %58, 4294967292
  br i1 %57, label %60, label %547

60:                                               ; preds = %54
  %61 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %5, i64 0, i32 11
  %62 = load i32*, i32** %61, align 8
  %63 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %5, i64 1, i32 11
  %64 = load i32*, i32** %63, align 8
  %65 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %5, i64 2, i32 11
  %66 = load i32*, i32** %65, align 8
  %67 = icmp ne i32* %62, null
  %68 = icmp ne i32* %64, null
  %69 = and i1 %67, %68
  %70 = icmp ne i32* %66, null
  %71 = and i1 %69, %70
  br i1 %71, label %72, label %547

72:                                               ; preds = %60
  %73 = tail call i8* @opj_image_data_alloc(i64 %59) #10, !noalias !2
  %74 = icmp eq i8* %73, null
  br i1 %74, label %547, label %75

75:                                               ; preds = %72
  %76 = tail call i8* @opj_image_data_alloc(i64 %59) #10, !noalias !2
  %77 = icmp eq i8* %76, null
  br i1 %77, label %82, label %78

78:                                               ; preds = %75
  %79 = tail call i8* @opj_image_data_alloc(i64 %59) #10, !noalias !2
  %80 = icmp eq i8* %79, null
  br i1 %80, label %81, label %83

81:                                               ; preds = %78
  tail call void @opj_image_data_free(i8* nonnull %76) #10, !noalias !2
  br label %82

82:                                               ; preds = %75, %81
  tail call void @opj_image_data_free(i8* nonnull %73) #10, !noalias !2
  br label %547

83:                                               ; preds = %78
  %84 = bitcast i8* %73 to i32*
  %85 = bitcast i8* %76 to i32*
  %86 = bitcast i8* %79 to i32*
  %87 = and i32 %27, -2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %357, label %89

89:                                               ; preds = %83
  %90 = zext i32 %7 to i64
  %91 = and i32 %7, -2
  %92 = icmp eq i32 %91, 0
  %93 = and i32 %7, -2
  br label %94

94:                                               ; preds = %89, %342
  %95 = phi i32 [ 0, %89 ], [ %353, %342 ]
  %96 = phi i32* [ %86, %89 ], [ %352, %342 ]
  %97 = phi i32* [ %85, %89 ], [ %351, %342 ]
  %98 = phi i32* [ %84, %89 ], [ %350, %342 ]
  %99 = phi i32* [ %66, %89 ], [ %345, %342 ]
  %100 = phi i32* [ %64, %89 ], [ %344, %342 ]
  %101 = phi i32* [ %62, %89 ], [ %349, %342 ]
  %102 = getelementptr inbounds i32, i32* %101, i64 %90
  %103 = getelementptr inbounds i32, i32* %98, i64 %90
  %104 = getelementptr inbounds i32, i32* %97, i64 %90
  %105 = getelementptr inbounds i32, i32* %96, i64 %90
  br i1 %92, label %258, label %106

106:                                              ; preds = %94, %106
  %107 = phi i32 [ %256, %106 ], [ 0, %94 ]
  %108 = phi i32* [ %253, %106 ], [ %105, %94 ]
  %109 = phi i32* [ %252, %106 ], [ %104, %94 ]
  %110 = phi i32* [ %251, %106 ], [ %103, %94 ]
  %111 = phi i32* [ %250, %106 ], [ %102, %94 ]
  %112 = phi i32* [ %185, %106 ], [ %96, %94 ]
  %113 = phi i32* [ %184, %106 ], [ %97, %94 ]
  %114 = phi i32* [ %183, %106 ], [ %98, %94 ]
  %115 = phi i32* [ %255, %106 ], [ %99, %94 ]
  %116 = phi i32* [ %254, %106 ], [ %100, %94 ]
  %117 = phi i32* [ %182, %106 ], [ %101, %94 ]
  %118 = load i32, i32* %117, align 4
  %119 = load i32, i32* %116, align 4
  %120 = load i32, i32* %115, align 4
  %121 = sub nsw i32 %119, %39
  %122 = sub nsw i32 %120, %39
  %123 = sitofp i32 %122 to double
  %124 = fmul double %123, 1.402000e+00
  %125 = fptosi double %124 to i32
  %126 = add nsw i32 %118, %125
  %127 = icmp sgt i32 %126, 0
  %128 = select i1 %127, i32 %126, i32 0
  %129 = icmp sgt i32 %128, %41
  %130 = select i1 %129, i32 %41, i32 %128
  store i32 %130, i32* %114, align 4
  %131 = sitofp i32 %121 to double
  %132 = fmul double %131, 3.440000e-01
  %133 = fmul double %123, 7.140000e-01
  %134 = fadd double %132, %133
  %135 = fptosi double %134 to i32
  %136 = sub nsw i32 %118, %135
  %137 = icmp sgt i32 %136, 0
  %138 = select i1 %137, i32 %136, i32 0
  %139 = icmp sgt i32 %138, %41
  %140 = select i1 %139, i32 %41, i32 %138
  store i32 %140, i32* %113, align 4
  %141 = fmul double %131, 1.772000e+00
  %142 = fptosi double %141 to i32
  %143 = add nsw i32 %118, %142
  %144 = icmp sgt i32 %143, 0
  %145 = select i1 %144, i32 %143, i32 0
  %146 = icmp sgt i32 %145, %41
  %147 = select i1 %146, i32 %41, i32 %145
  store i32 %147, i32* %112, align 4
  %148 = getelementptr inbounds i32, i32* %117, i64 1
  %149 = getelementptr inbounds i32, i32* %114, i64 1
  %150 = getelementptr inbounds i32, i32* %113, i64 1
  %151 = getelementptr inbounds i32, i32* %112, i64 1
  %152 = load i32, i32* %148, align 4
  %153 = load i32, i32* %116, align 4
  %154 = load i32, i32* %115, align 4
  %155 = sub nsw i32 %153, %39
  %156 = sub nsw i32 %154, %39
  %157 = sitofp i32 %156 to double
  %158 = fmul double %157, 1.402000e+00
  %159 = fptosi double %158 to i32
  %160 = add nsw i32 %152, %159
  %161 = icmp sgt i32 %160, 0
  %162 = select i1 %161, i32 %160, i32 0
  %163 = icmp sgt i32 %162, %41
  %164 = select i1 %163, i32 %41, i32 %162
  store i32 %164, i32* %149, align 4
  %165 = sitofp i32 %155 to double
  %166 = fmul double %165, 3.440000e-01
  %167 = fmul double %157, 7.140000e-01
  %168 = fadd double %166, %167
  %169 = fptosi double %168 to i32
  %170 = sub nsw i32 %152, %169
  %171 = icmp sgt i32 %170, 0
  %172 = select i1 %171, i32 %170, i32 0
  %173 = icmp sgt i32 %172, %41
  %174 = select i1 %173, i32 %41, i32 %172
  store i32 %174, i32* %150, align 4
  %175 = fmul double %165, 1.772000e+00
  %176 = fptosi double %175 to i32
  %177 = add nsw i32 %152, %176
  %178 = icmp sgt i32 %177, 0
  %179 = select i1 %178, i32 %177, i32 0
  %180 = icmp sgt i32 %179, %41
  %181 = select i1 %180, i32 %41, i32 %179
  store i32 %181, i32* %151, align 4
  %182 = getelementptr inbounds i32, i32* %117, i64 2
  %183 = getelementptr inbounds i32, i32* %114, i64 2
  %184 = getelementptr inbounds i32, i32* %113, i64 2
  %185 = getelementptr inbounds i32, i32* %112, i64 2
  %186 = load i32, i32* %111, align 4
  %187 = load i32, i32* %116, align 4
  %188 = load i32, i32* %115, align 4
  %189 = sub nsw i32 %187, %39
  %190 = sub nsw i32 %188, %39
  %191 = sitofp i32 %190 to double
  %192 = fmul double %191, 1.402000e+00
  %193 = fptosi double %192 to i32
  %194 = add nsw i32 %186, %193
  %195 = icmp sgt i32 %194, 0
  %196 = select i1 %195, i32 %194, i32 0
  %197 = icmp sgt i32 %196, %41
  %198 = select i1 %197, i32 %41, i32 %196
  store i32 %198, i32* %110, align 4
  %199 = sitofp i32 %189 to double
  %200 = fmul double %199, 3.440000e-01
  %201 = fmul double %191, 7.140000e-01
  %202 = fadd double %200, %201
  %203 = fptosi double %202 to i32
  %204 = sub nsw i32 %186, %203
  %205 = icmp sgt i32 %204, 0
  %206 = select i1 %205, i32 %204, i32 0
  %207 = icmp sgt i32 %206, %41
  %208 = select i1 %207, i32 %41, i32 %206
  store i32 %208, i32* %109, align 4
  %209 = fmul double %199, 1.772000e+00
  %210 = fptosi double %209 to i32
  %211 = add nsw i32 %186, %210
  %212 = icmp sgt i32 %211, 0
  %213 = select i1 %212, i32 %211, i32 0
  %214 = icmp sgt i32 %213, %41
  %215 = select i1 %214, i32 %41, i32 %213
  store i32 %215, i32* %108, align 4
  %216 = getelementptr inbounds i32, i32* %111, i64 1
  %217 = getelementptr inbounds i32, i32* %110, i64 1
  %218 = getelementptr inbounds i32, i32* %109, i64 1
  %219 = getelementptr inbounds i32, i32* %108, i64 1
  %220 = load i32, i32* %216, align 4
  %221 = load i32, i32* %116, align 4
  %222 = load i32, i32* %115, align 4
  %223 = sub nsw i32 %221, %39
  %224 = sub nsw i32 %222, %39
  %225 = sitofp i32 %224 to double
  %226 = fmul double %225, 1.402000e+00
  %227 = fptosi double %226 to i32
  %228 = add nsw i32 %220, %227
  %229 = icmp sgt i32 %228, 0
  %230 = select i1 %229, i32 %228, i32 0
  %231 = icmp sgt i32 %230, %41
  %232 = select i1 %231, i32 %41, i32 %230
  store i32 %232, i32* %217, align 4
  %233 = sitofp i32 %223 to double
  %234 = fmul double %233, 3.440000e-01
  %235 = fmul double %225, 7.140000e-01
  %236 = fadd double %234, %235
  %237 = fptosi double %236 to i32
  %238 = sub nsw i32 %220, %237
  %239 = icmp sgt i32 %238, 0
  %240 = select i1 %239, i32 %238, i32 0
  %241 = icmp sgt i32 %240, %41
  %242 = select i1 %241, i32 %41, i32 %240
  store i32 %242, i32* %218, align 4
  %243 = fmul double %233, 1.772000e+00
  %244 = fptosi double %243 to i32
  %245 = add nsw i32 %220, %244
  %246 = icmp sgt i32 %245, 0
  %247 = select i1 %246, i32 %245, i32 0
  %248 = icmp sgt i32 %247, %41
  %249 = select i1 %248, i32 %41, i32 %247
  store i32 %249, i32* %219, align 4
  %250 = getelementptr inbounds i32, i32* %111, i64 2
  %251 = getelementptr inbounds i32, i32* %110, i64 2
  %252 = getelementptr inbounds i32, i32* %109, i64 2
  %253 = getelementptr inbounds i32, i32* %108, i64 2
  %254 = getelementptr inbounds i32, i32* %116, i64 1
  %255 = getelementptr inbounds i32, i32* %115, i64 1
  %256 = add nuw i32 %107, 2
  %257 = icmp ult i32 %256, %91
  br i1 %257, label %106, label %258

258:                                              ; preds = %106, %94
  %259 = phi i32* [ %101, %94 ], [ %182, %106 ]
  %260 = phi i32* [ %100, %94 ], [ %254, %106 ]
  %261 = phi i32* [ %99, %94 ], [ %255, %106 ]
  %262 = phi i32* [ %98, %94 ], [ %183, %106 ]
  %263 = phi i32* [ %97, %94 ], [ %184, %106 ]
  %264 = phi i32* [ %96, %94 ], [ %185, %106 ]
  %265 = phi i32* [ %102, %94 ], [ %250, %106 ]
  %266 = phi i32* [ %103, %94 ], [ %251, %106 ]
  %267 = phi i32* [ %104, %94 ], [ %252, %106 ]
  %268 = phi i32* [ %105, %94 ], [ %253, %106 ]
  %269 = phi i32 [ 0, %94 ], [ %93, %106 ]
  %270 = icmp ult i32 %269, %7
  br i1 %270, label %271, label %342

271:                                              ; preds = %258
  %272 = getelementptr inbounds i32, i32* %260, i64 -1
  %273 = getelementptr inbounds i32, i32* %261, i64 -1
  %274 = select i1 %46, i32* %272, i32* %260
  %275 = select i1 %46, i32* %273, i32* %261
  %276 = load i32, i32* %259, align 4
  %277 = load i32, i32* %274, align 4
  %278 = load i32, i32* %275, align 4
  %279 = sub nsw i32 %277, %39
  %280 = sub nsw i32 %278, %39
  %281 = sitofp i32 %280 to double
  %282 = fmul double %281, 1.402000e+00
  %283 = fptosi double %282 to i32
  %284 = add nsw i32 %276, %283
  %285 = icmp sgt i32 %284, 0
  %286 = select i1 %285, i32 %284, i32 0
  %287 = icmp sgt i32 %286, %41
  %288 = select i1 %287, i32 %41, i32 %286
  store i32 %288, i32* %262, align 4
  %289 = sitofp i32 %279 to double
  %290 = fmul double %289, 3.440000e-01
  %291 = fmul double %281, 7.140000e-01
  %292 = fadd double %290, %291
  %293 = fptosi double %292 to i32
  %294 = sub nsw i32 %276, %293
  %295 = icmp sgt i32 %294, 0
  %296 = select i1 %295, i32 %294, i32 0
  %297 = icmp sgt i32 %296, %41
  %298 = select i1 %297, i32 %41, i32 %296
  store i32 %298, i32* %263, align 4
  %299 = fmul double %289, 1.772000e+00
  %300 = fptosi double %299 to i32
  %301 = add nsw i32 %276, %300
  %302 = icmp sgt i32 %301, 0
  %303 = select i1 %302, i32 %301, i32 0
  %304 = icmp sgt i32 %303, %41
  %305 = select i1 %304, i32 %41, i32 %303
  store i32 %305, i32* %264, align 4
  %306 = getelementptr inbounds i32, i32* %259, i64 1
  %307 = getelementptr inbounds i32, i32* %262, i64 1
  %308 = getelementptr inbounds i32, i32* %263, i64 1
  %309 = getelementptr inbounds i32, i32* %264, i64 1
  %310 = load i32, i32* %265, align 4
  %311 = load i32, i32* %274, align 4
  %312 = load i32, i32* %275, align 4
  %313 = sub nsw i32 %311, %39
  %314 = sub nsw i32 %312, %39
  %315 = sitofp i32 %314 to double
  %316 = fmul double %315, 1.402000e+00
  %317 = fptosi double %316 to i32
  %318 = add nsw i32 %310, %317
  %319 = icmp sgt i32 %318, 0
  %320 = select i1 %319, i32 %318, i32 0
  %321 = icmp sgt i32 %320, %41
  %322 = select i1 %321, i32 %41, i32 %320
  store i32 %322, i32* %266, align 4
  %323 = sitofp i32 %313 to double
  %324 = fmul double %323, 3.440000e-01
  %325 = fmul double %315, 7.140000e-01
  %326 = fadd double %324, %325
  %327 = fptosi double %326 to i32
  %328 = sub nsw i32 %310, %327
  %329 = icmp sgt i32 %328, 0
  %330 = select i1 %329, i32 %328, i32 0
  %331 = icmp sgt i32 %330, %41
  %332 = select i1 %331, i32 %41, i32 %330
  store i32 %332, i32* %267, align 4
  %333 = fmul double %323, 1.772000e+00
  %334 = fptosi double %333 to i32
  %335 = add nsw i32 %310, %334
  %336 = icmp sgt i32 %335, 0
  %337 = select i1 %336, i32 %335, i32 0
  %338 = icmp sgt i32 %337, %41
  %339 = select i1 %338, i32 %41, i32 %337
  store i32 %339, i32* %268, align 4
  %340 = getelementptr inbounds i32, i32* %274, i64 1
  %341 = getelementptr inbounds i32, i32* %275, i64 1
  br label %342

342:                                              ; preds = %271, %258
  %343 = phi i32* [ %306, %271 ], [ %259, %258 ]
  %344 = phi i32* [ %340, %271 ], [ %260, %258 ]
  %345 = phi i32* [ %341, %271 ], [ %261, %258 ]
  %346 = phi i32* [ %307, %271 ], [ %262, %258 ]
  %347 = phi i32* [ %308, %271 ], [ %263, %258 ]
  %348 = phi i32* [ %309, %271 ], [ %264, %258 ]
  %349 = getelementptr inbounds i32, i32* %343, i64 %90
  %350 = getelementptr inbounds i32, i32* %346, i64 %90
  %351 = getelementptr inbounds i32, i32* %347, i64 %90
  %352 = getelementptr inbounds i32, i32* %348, i64 %90
  %353 = add nuw i32 %95, 2
  %354 = icmp ult i32 %353, %87
  br i1 %354, label %94, label %355

355:                                              ; preds = %342
  %356 = and i32 %27, -2
  br label %357

357:                                              ; preds = %355, %83
  %358 = phi i32* [ %62, %83 ], [ %349, %355 ]
  %359 = phi i32* [ %64, %83 ], [ %344, %355 ]
  %360 = phi i32* [ %66, %83 ], [ %345, %355 ]
  %361 = phi i32* [ %84, %83 ], [ %350, %355 ]
  %362 = phi i32* [ %85, %83 ], [ %351, %355 ]
  %363 = phi i32* [ %86, %83 ], [ %352, %355 ]
  %364 = phi i32 [ 0, %83 ], [ %356, %355 ]
  %365 = icmp ult i32 %364, %27
  br i1 %365, label %366, label %501

366:                                              ; preds = %357
  %367 = zext i32 %11 to i64
  %368 = sub nsw i64 0, %367
  %369 = getelementptr inbounds i32, i32* %359, i64 %368
  %370 = getelementptr inbounds i32, i32* %360, i64 %368
  %371 = select i1 %51, i32* %369, i32* %359
  %372 = select i1 %51, i32* %370, i32* %360
  %373 = and i32 %7, -2
  %374 = icmp eq i32 %373, 0
  br i1 %374, label %457, label %375

375:                                              ; preds = %366, %375
  %376 = phi i32 [ %453, %375 ], [ 0, %366 ]
  %377 = phi i32* [ %450, %375 ], [ %363, %366 ]
  %378 = phi i32* [ %449, %375 ], [ %362, %366 ]
  %379 = phi i32* [ %448, %375 ], [ %361, %366 ]
  %380 = phi i32* [ %452, %375 ], [ %372, %366 ]
  %381 = phi i32* [ %451, %375 ], [ %371, %366 ]
  %382 = phi i32* [ %447, %375 ], [ %358, %366 ]
  %383 = load i32, i32* %382, align 4
  %384 = load i32, i32* %381, align 4
  %385 = load i32, i32* %380, align 4
  %386 = sub nsw i32 %384, %39
  %387 = sub nsw i32 %385, %39
  %388 = sitofp i32 %387 to double
  %389 = fmul double %388, 1.402000e+00
  %390 = fptosi double %389 to i32
  %391 = add nsw i32 %383, %390
  %392 = icmp sgt i32 %391, 0
  %393 = select i1 %392, i32 %391, i32 0
  %394 = icmp sgt i32 %393, %41
  %395 = select i1 %394, i32 %41, i32 %393
  store i32 %395, i32* %379, align 4
  %396 = sitofp i32 %386 to double
  %397 = fmul double %396, 3.440000e-01
  %398 = fmul double %388, 7.140000e-01
  %399 = fadd double %397, %398
  %400 = fptosi double %399 to i32
  %401 = sub nsw i32 %383, %400
  %402 = icmp sgt i32 %401, 0
  %403 = select i1 %402, i32 %401, i32 0
  %404 = icmp sgt i32 %403, %41
  %405 = select i1 %404, i32 %41, i32 %403
  store i32 %405, i32* %378, align 4
  %406 = fmul double %396, 1.772000e+00
  %407 = fptosi double %406 to i32
  %408 = add nsw i32 %383, %407
  %409 = icmp sgt i32 %408, 0
  %410 = select i1 %409, i32 %408, i32 0
  %411 = icmp sgt i32 %410, %41
  %412 = select i1 %411, i32 %41, i32 %410
  store i32 %412, i32* %377, align 4
  %413 = getelementptr inbounds i32, i32* %382, i64 1
  %414 = getelementptr inbounds i32, i32* %379, i64 1
  %415 = getelementptr inbounds i32, i32* %378, i64 1
  %416 = getelementptr inbounds i32, i32* %377, i64 1
  %417 = load i32, i32* %413, align 4
  %418 = load i32, i32* %381, align 4
  %419 = load i32, i32* %380, align 4
  %420 = sub nsw i32 %418, %39
  %421 = sub nsw i32 %419, %39
  %422 = sitofp i32 %421 to double
  %423 = fmul double %422, 1.402000e+00
  %424 = fptosi double %423 to i32
  %425 = add nsw i32 %417, %424
  %426 = icmp sgt i32 %425, 0
  %427 = select i1 %426, i32 %425, i32 0
  %428 = icmp sgt i32 %427, %41
  %429 = select i1 %428, i32 %41, i32 %427
  store i32 %429, i32* %414, align 4
  %430 = sitofp i32 %420 to double
  %431 = fmul double %430, 3.440000e-01
  %432 = fmul double %422, 7.140000e-01
  %433 = fadd double %431, %432
  %434 = fptosi double %433 to i32
  %435 = sub nsw i32 %417, %434
  %436 = icmp sgt i32 %435, 0
  %437 = select i1 %436, i32 %435, i32 0
  %438 = icmp sgt i32 %437, %41
  %439 = select i1 %438, i32 %41, i32 %437
  store i32 %439, i32* %415, align 4
  %440 = fmul double %430, 1.772000e+00
  %441 = fptosi double %440 to i32
  %442 = add nsw i32 %417, %441
  %443 = icmp sgt i32 %442, 0
  %444 = select i1 %443, i32 %442, i32 0
  %445 = icmp sgt i32 %444, %41
  %446 = select i1 %445, i32 %41, i32 %444
  store i32 %446, i32* %416, align 4
  %447 = getelementptr inbounds i32, i32* %382, i64 2
  %448 = getelementptr inbounds i32, i32* %379, i64 2
  %449 = getelementptr inbounds i32, i32* %378, i64 2
  %450 = getelementptr inbounds i32, i32* %377, i64 2
  %451 = getelementptr inbounds i32, i32* %381, i64 1
  %452 = getelementptr inbounds i32, i32* %380, i64 1
  %453 = add nuw i32 %376, 2
  %454 = icmp ult i32 %453, %373
  br i1 %454, label %375, label %455

455:                                              ; preds = %375
  %456 = and i32 %7, -2
  br label %457

457:                                              ; preds = %455, %366
  %458 = phi i32* [ %358, %366 ], [ %447, %455 ]
  %459 = phi i32* [ %371, %366 ], [ %451, %455 ]
  %460 = phi i32* [ %372, %366 ], [ %452, %455 ]
  %461 = phi i32* [ %361, %366 ], [ %448, %455 ]
  %462 = phi i32* [ %362, %366 ], [ %449, %455 ]
  %463 = phi i32* [ %363, %366 ], [ %450, %455 ]
  %464 = phi i32 [ 0, %366 ], [ %456, %455 ]
  %465 = icmp ult i32 %464, %7
  br i1 %465, label %466, label %501

466:                                              ; preds = %457
  %467 = getelementptr inbounds i32, i32* %459, i64 -1
  %468 = getelementptr inbounds i32, i32* %460, i64 -1
  %469 = select i1 %46, i32* %467, i32* %459
  %470 = select i1 %46, i32* %468, i32* %460
  %471 = load i32, i32* %458, align 4
  %472 = load i32, i32* %469, align 4
  %473 = load i32, i32* %470, align 4
  %474 = sub nsw i32 %472, %39
  %475 = sub nsw i32 %473, %39
  %476 = sitofp i32 %475 to double
  %477 = fmul double %476, 1.402000e+00
  %478 = fptosi double %477 to i32
  %479 = add nsw i32 %471, %478
  %480 = icmp sgt i32 %479, 0
  %481 = select i1 %480, i32 %479, i32 0
  %482 = icmp sgt i32 %481, %41
  %483 = select i1 %482, i32 %41, i32 %481
  store i32 %483, i32* %461, align 4
  %484 = sitofp i32 %474 to double
  %485 = fmul double %484, 3.440000e-01
  %486 = fmul double %476, 7.140000e-01
  %487 = fadd double %485, %486
  %488 = fptosi double %487 to i32
  %489 = sub nsw i32 %471, %488
  %490 = icmp sgt i32 %489, 0
  %491 = select i1 %490, i32 %489, i32 0
  %492 = icmp sgt i32 %491, %41
  %493 = select i1 %492, i32 %41, i32 %491
  store i32 %493, i32* %462, align 4
  %494 = fmul double %484, 1.772000e+00
  %495 = fptosi double %494 to i32
  %496 = add nsw i32 %471, %495
  %497 = icmp sgt i32 %496, 0
  %498 = select i1 %497, i32 %496, i32 0
  %499 = icmp sgt i32 %498, %41
  %500 = select i1 %499, i32 %41, i32 %498
  store i32 %500, i32* %463, align 4
  br label %501

501:                                              ; preds = %357, %466, %457
  %502 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8
  %503 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %502, i64 0, i32 11
  %504 = bitcast i32** %503 to i8**
  %505 = load i8*, i8** %504, align 8
  tail call void @opj_image_data_free(i8* %505) #10
  %506 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8
  %507 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %506, i64 1, i32 11
  %508 = bitcast i32** %507 to i8**
  %509 = load i8*, i8** %508, align 8
  tail call void @opj_image_data_free(i8* %509) #10
  %510 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8
  %511 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %510, i64 2, i32 11
  %512 = bitcast i32** %511 to i8**
  %513 = load i8*, i8** %512, align 8
  tail call void @opj_image_data_free(i8* %513) #10
  %514 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8
  %515 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %514, i64 0, i32 11
  %516 = bitcast i32** %515 to i8**
  store i8* %73, i8** %516, align 8
  %517 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8
  %518 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %517, i64 1, i32 11
  %519 = bitcast i32** %518 to i8**
  store i8* %76, i8** %519, align 8
  %520 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8
  %521 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %520, i64 2, i32 11
  %522 = bitcast i32** %521 to i8**
  store i8* %79, i8** %522, align 8
  %523 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8
  %524 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %523, i64 1, i32 2
  store i32 %7, i32* %524, align 8
  %525 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8
  %526 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %525, i64 1, i32 3
  store i32 %27, i32* %526, align 4
  %527 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8
  %528 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %527, i64 2, i32 2
  store i32 %7, i32* %528, align 8
  %529 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8
  %530 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %529, i64 2, i32 3
  store i32 %27, i32* %530, align 4
  %531 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8
  %532 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %531, i64 0, i32 0
  %533 = load i32, i32* %532, align 8
  %534 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %531, i64 1, i32 0
  store i32 %533, i32* %534, align 8
  %535 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8
  %536 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %535, i64 0, i32 0
  %537 = load i32, i32* %536, align 8
  %538 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %535, i64 2, i32 0
  store i32 %537, i32* %538, align 8
  %539 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8
  %540 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %539, i64 0, i32 1
  %541 = load i32, i32* %540, align 4
  %542 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %539, i64 1, i32 1
  store i32 %541, i32* %542, align 4
  %543 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8
  %544 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %543, i64 0, i32 1
  %545 = load i32, i32* %544, align 4
  %546 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %543, i64 2, i32 1
  store i32 %545, i32* %546, align 4
  br label %547

547:                                              ; preds = %37, %82, %501, %72, %1, %3, %9, %15, %19, %25, %54, %60, %33, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec12CJPX_DecoderC2ENS0_16ColorSpaceOptionE(%"class.fxcodec::CJPX_Decoder"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 0
  store i32 %1, i32* %3, align 8
  %4 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 2
  %5 = bitcast %"class.pdfium::span"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 48, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec12CJPX_DecoderD2Ev(%"class.fxcodec::CJPX_Decoder"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 4
  %3 = getelementptr inbounds %"class.fxcrt::UnownedPtr.1", %"class.fxcrt::UnownedPtr.1"* %2, i64 0, i32 0
  %4 = load i8**, i8*** %3, align 8
  %5 = icmp eq i8** %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.fxcrt::UnownedPtr.1"* %2 to i64*
  store i64 0, i64* %7, align 8
  tail call void @opj_destroy_codec(i8** nonnull %4) #10
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 6
  %10 = getelementptr inbounds %"class.fxcrt::UnownedPtr.1", %"class.fxcrt::UnownedPtr.1"* %9, i64 0, i32 0
  %11 = load i8**, i8*** %10, align 8
  %12 = icmp eq i8** %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %8
  %14 = bitcast %"class.fxcrt::UnownedPtr.1"* %9 to i64*
  store i64 0, i64* %14, align 8
  tail call void @opj_stream_destroy(i8** nonnull %11) #10
  br label %15

15:                                               ; preds = %8, %13
  %16 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 3
  %17 = getelementptr inbounds %"class.fxcrt::UnownedPtr.0", %"class.fxcrt::UnownedPtr.0"* %16, i64 0, i32 0
  %18 = load %struct.opj_image*, %struct.opj_image** %17, align 8
  %19 = icmp eq %struct.opj_image* %18, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %15
  %21 = bitcast %"class.fxcrt::UnownedPtr.0"* %16 to i64*
  store i64 0, i64* %21, align 8
  tail call void @opj_image_destroy(%struct.opj_image* nonnull %18) #10
  br label %22

22:                                               ; preds = %15, %20
  %23 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %24 = load %"struct.fxcodec::DecodeData"*, %"struct.fxcodec::DecodeData"** %23, align 8
  store %"struct.fxcodec::DecodeData"* null, %"struct.fxcodec::DecodeData"** %23, align 8
  %25 = icmp eq %"struct.fxcodec::DecodeData"* %24, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  %27 = bitcast %"struct.fxcodec::DecodeData"* %24 to i8*
  tail call void @_ZdlPv(i8* %27) #9
  br label %28

28:                                               ; preds = %22, %26
  ret void
}

declare hidden void @opj_destroy_codec(i8**) local_unnamed_addr #3

declare hidden void @opj_stream_destroy(i8**) local_unnamed_addr #3

declare hidden void @opj_image_destroy(%struct.opj_image*) local_unnamed_addr #3

declare hidden void @opj_set_default_decoder_parameters(%struct.opj_dparameters*) local_unnamed_addr #3

declare hidden i8** @opj_create_decompress(i32) local_unnamed_addr #3

declare hidden i32 @opj_set_info_handler(i8**, void (i8*, i8*)*, i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN7fxcodec12_GLOBAL__N_118fx_ignore_callbackEPKcPv(i8* nocapture, i8* nocapture) #4 {
  ret void
}

declare hidden i32 @opj_set_warning_handler(i8**, void (i8*, i8*)*, i8*) local_unnamed_addr #3

declare hidden i32 @opj_set_error_handler(i8**, void (i8*, i8*)*, i8*) local_unnamed_addr #3

declare hidden i32 @opj_setup_decoder(i8**, %struct.opj_dparameters*) local_unnamed_addr #3

declare hidden i32 @opj_read_header(i8**, i8**, %struct.opj_image**) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7fxcodec12CJPX_Decoder11StartDecodeEv(%"class.fxcodec::CJPX_Decoder"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 7, i32 12
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  %5 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 4, i32 0
  %6 = load i8**, i8*** %5, align 8
  br i1 %4, label %7, label %39

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"class.fxcrt::UnownedPtr.0", %"class.fxcrt::UnownedPtr.0"* %8, i64 0, i32 0
  %10 = load %struct.opj_image*, %struct.opj_image** %9, align 8
  %11 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 7, i32 6
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 7, i32 8
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 7, i32 7
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 7, i32 9
  %18 = load i32, i32* %17, align 4
  %19 = tail call i32 @opj_set_decode_area(i8** %6, %struct.opj_image* %10, i32 %12, i32 %14, i32 %16, i32 %18) #10
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %7
  %22 = bitcast %"class.fxcrt::UnownedPtr.0"* %8 to i64*
  %23 = load %struct.opj_image*, %struct.opj_image** %9, align 8
  store i64 0, i64* %22, align 8
  tail call void @opj_image_destroy(%struct.opj_image* %23) #10
  br label %537

24:                                               ; preds = %7
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 6, i32 0
  %27 = load i8**, i8*** %26, align 8
  %28 = load %struct.opj_image*, %struct.opj_image** %9, align 8
  %29 = tail call i32 @opj_decode(i8** %25, i8** %27, %struct.opj_image* %28) #10
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %24
  %32 = load i8**, i8*** %5, align 8
  %33 = load i8**, i8*** %26, align 8
  %34 = tail call i32 @opj_end_decompress(i8** %32, i8** %33) #10
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %48

36:                                               ; preds = %31, %24
  %37 = bitcast %"class.fxcrt::UnownedPtr.0"* %8 to i64*
  %38 = load %struct.opj_image*, %struct.opj_image** %9, align 8
  store i64 0, i64* %37, align 8
  tail call void @opj_image_destroy(%struct.opj_image* %38) #10
  br label %537

39:                                               ; preds = %1
  %40 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 6, i32 0
  %41 = load i8**, i8*** %40, align 8
  %42 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 3, i32 0
  %43 = load %struct.opj_image*, %struct.opj_image** %42, align 8
  %44 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 7, i32 11
  %45 = load i32, i32* %44, align 4
  %46 = tail call i32 @opj_get_decoded_tile(i8** %6, i8** %41, %struct.opj_image* %43, i32 %45) #10
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %537, label %48

48:                                               ; preds = %39, %31
  %49 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 6
  %50 = bitcast %"class.fxcrt::UnownedPtr.1"* %49 to i64*
  %51 = getelementptr inbounds %"class.fxcrt::UnownedPtr.1", %"class.fxcrt::UnownedPtr.1"* %49, i64 0, i32 0
  %52 = load i8**, i8*** %51, align 8
  store i64 0, i64* %50, align 8
  tail call void @opj_stream_destroy(i8** %52) #10
  %53 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 3, i32 0
  %54 = load %struct.opj_image*, %struct.opj_image** %53, align 8
  %55 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %54, i64 0, i32 5
  %56 = load i32, i32* %55, align 4
  %57 = icmp ne i32 %56, 3
  %58 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %54, i64 0, i32 4
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %59, 3
  %61 = and i1 %57, %60
  br i1 %61, label %62, label %75

62:                                               ; preds = %48
  %63 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %54, i64 0, i32 6
  %64 = load %struct.opj_image_comp*, %struct.opj_image_comp** %63, align 8
  %65 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %64, i64 0, i32 0
  %66 = load i32, i32* %65, align 8
  %67 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %64, i64 0, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %66, %68
  br i1 %69, label %70, label %78

70:                                               ; preds = %62
  %71 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %64, i64 1, i32 0
  %72 = load i32, i32* %71, align 8
  %73 = icmp eq i32 %72, 1
  br i1 %73, label %78, label %74

74:                                               ; preds = %70
  store i32 3, i32* %55, align 4
  br label %78

75:                                               ; preds = %48
  %76 = icmp ult i32 %59, 3
  br i1 %76, label %77, label %78

77:                                               ; preds = %75
  store i32 2, i32* %55, align 4
  br label %78

78:                                               ; preds = %62, %70, %75, %77, %74
  %79 = load %struct.opj_image*, %struct.opj_image** %53, align 8
  %80 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %79, i64 0, i32 5
  %81 = load i32, i32* %80, align 4
  %82 = icmp eq i32 %81, 3
  br i1 %82, label %83, label %527

83:                                               ; preds = %78
  %84 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %79, i64 0, i32 4
  %85 = load i32, i32* %84, align 8
  %86 = icmp ult i32 %85, 3
  br i1 %86, label %87, label %88

87:                                               ; preds = %83
  store i32 2, i32* %80, align 4
  br label %527

88:                                               ; preds = %83
  %89 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %79, i64 0, i32 6
  %90 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %91 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 0, i32 0
  %92 = load i32, i32* %91, align 8
  %93 = icmp eq i32 %92, 1
  br i1 %93, label %94, label %527

94:                                               ; preds = %88
  %95 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 0, i32 1
  %96 = load i32, i32* %95, align 4
  %97 = icmp eq i32 %96, 1
  br i1 %97, label %98, label %527

98:                                               ; preds = %94
  %99 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 1, i32 0
  %100 = load i32, i32* %99, align 8
  switch i32 %100, label %527 [
    i32 2, label %101
    i32 1, label %381
  ]

101:                                              ; preds = %98
  %102 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 1, i32 1
  %103 = load i32, i32* %102, align 4
  switch i32 %103, label %527 [
    i32 2, label %104
    i32 1, label %113
  ]

104:                                              ; preds = %101
  %105 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 2, i32 0
  %106 = load i32, i32* %105, align 8
  %107 = icmp eq i32 %106, 2
  br i1 %107, label %108, label %527

108:                                              ; preds = %104
  %109 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 2, i32 1
  %110 = load i32, i32* %109, align 4
  %111 = icmp eq i32 %110, 2
  br i1 %111, label %112, label %527

112:                                              ; preds = %108
  tail call fastcc void @_ZN7fxcodec12_GLOBAL__N_114sycc420_to_rgbEP9opj_image(%struct.opj_image* %79) #10
  br label %526

113:                                              ; preds = %101
  %114 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 2, i32 0
  %115 = load i32, i32* %114, align 8
  %116 = icmp eq i32 %115, 2
  br i1 %116, label %117, label %527

117:                                              ; preds = %113
  %118 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 2, i32 1
  %119 = load i32, i32* %118, align 4
  %120 = icmp eq i32 %119, 1
  br i1 %120, label %121, label %527

121:                                              ; preds = %117
  %122 = icmp eq %struct.opj_image* %79, null
  br i1 %122, label %526, label %123

123:                                              ; preds = %121
  %124 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 0, i32 2
  %125 = load i32, i32* %124, align 8
  %126 = icmp eq i32 %125, -1
  br i1 %126, label %526, label %127

127:                                              ; preds = %123
  %128 = add nuw i32 %125, 1
  %129 = lshr i32 %128, 1
  %130 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 1, i32 2
  %131 = load i32, i32* %130, align 8
  %132 = icmp eq i32 %129, %131
  br i1 %132, label %133, label %526

133:                                              ; preds = %127
  %134 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 2, i32 2
  %135 = load i32, i32* %134, align 8
  %136 = icmp eq i32 %129, %135
  br i1 %136, label %137, label %526

137:                                              ; preds = %133
  %138 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 1, i32 3
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 2, i32 3
  %141 = load i32, i32* %140, align 4
  %142 = icmp eq i32 %139, %141
  br i1 %142, label %143, label %526

143:                                              ; preds = %137
  %144 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 0, i32 3
  %145 = load i32, i32* %144, align 4
  %146 = icmp eq i32 %145, %139
  br i1 %146, label %147, label %526

147:                                              ; preds = %143
  %148 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 0, i32 6
  %149 = load i32, i32* %148, align 8
  %150 = add i32 %149, -1
  %151 = icmp ugt i32 %150, 30
  br i1 %151, label %526, label %152

152:                                              ; preds = %147
  %153 = shl i32 1, %150
  %154 = shl nsw i32 -1, %149
  %155 = xor i32 %154, -1
  %156 = zext i32 %125 to i64
  %157 = zext i32 %139 to i64
  %158 = mul nuw i64 %157, %156
  %159 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %158, i64 4) #10
  %160 = extractvalue { i64, i1 } %159, 1
  %161 = extractvalue { i64, i1 } %159, 0
  br i1 %160, label %526, label %162

162:                                              ; preds = %152
  %163 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 0, i32 11
  %164 = load i32*, i32** %163, align 8
  %165 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 1, i32 11
  %166 = load i32*, i32** %165, align 8
  %167 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 2, i32 11
  %168 = load i32*, i32** %167, align 8
  %169 = icmp ne i32* %164, null
  %170 = icmp ne i32* %166, null
  %171 = and i1 %169, %170
  %172 = icmp ne i32* %168, null
  %173 = and i1 %171, %172
  br i1 %173, label %174, label %526

174:                                              ; preds = %162
  %175 = tail call i8* @opj_image_data_alloc(i64 %161) #10, !noalias !5
  %176 = icmp eq i8* %175, null
  br i1 %176, label %526, label %177

177:                                              ; preds = %174
  %178 = tail call i8* @opj_image_data_alloc(i64 %161) #10, !noalias !5
  %179 = icmp eq i8* %178, null
  br i1 %179, label %184, label %180

180:                                              ; preds = %177
  %181 = tail call i8* @opj_image_data_alloc(i64 %161) #10, !noalias !5
  %182 = icmp eq i8* %181, null
  br i1 %182, label %183, label %185

183:                                              ; preds = %180
  tail call void @opj_image_data_free(i8* nonnull %178) #10, !noalias !5
  br label %184

184:                                              ; preds = %183, %177
  tail call void @opj_image_data_free(i8* nonnull %175) #10, !noalias !5
  br label %526

185:                                              ; preds = %180
  %186 = icmp eq i32 %139, 0
  br i1 %186, label %335, label %187

187:                                              ; preds = %185
  %188 = bitcast i8* %181 to i32*
  %189 = bitcast i8* %178 to i32*
  %190 = bitcast i8* %175 to i32*
  %191 = and i32 %125, -2
  %192 = icmp eq i32 %191, 0
  %193 = icmp ult i32 %191, %125
  br label %194

194:                                              ; preds = %326, %187
  %195 = phi i32 [ 0, %187 ], [ %333, %326 ]
  %196 = phi i32* [ %188, %187 ], [ %332, %326 ]
  %197 = phi i32* [ %189, %187 ], [ %331, %326 ]
  %198 = phi i32* [ %190, %187 ], [ %330, %326 ]
  %199 = phi i32* [ %168, %187 ], [ %329, %326 ]
  %200 = phi i32* [ %166, %187 ], [ %328, %326 ]
  %201 = phi i32* [ %164, %187 ], [ %327, %326 ]
  br i1 %192, label %282, label %202

202:                                              ; preds = %194, %202
  %203 = phi i32 [ %280, %202 ], [ 0, %194 ]
  %204 = phi i32* [ %252, %202 ], [ %196, %194 ]
  %205 = phi i32* [ %251, %202 ], [ %197, %194 ]
  %206 = phi i32* [ %250, %202 ], [ %198, %194 ]
  %207 = phi i32* [ %248, %202 ], [ %199, %194 ]
  %208 = phi i32* [ %246, %202 ], [ %200, %194 ]
  %209 = phi i32* [ %244, %202 ], [ %201, %194 ]
  %210 = getelementptr inbounds i32, i32* %209, i64 1
  %211 = load i32, i32* %209, align 4
  %212 = load i32, i32* %208, align 4
  %213 = load i32, i32* %207, align 4
  %214 = getelementptr inbounds i32, i32* %206, i64 1
  %215 = getelementptr inbounds i32, i32* %205, i64 1
  %216 = getelementptr inbounds i32, i32* %204, i64 1
  %217 = sub nsw i32 %212, %153
  %218 = sub nsw i32 %213, %153
  %219 = sitofp i32 %218 to double
  %220 = fmul double %219, 1.402000e+00
  %221 = fptosi double %220 to i32
  %222 = add nsw i32 %211, %221
  %223 = icmp sgt i32 %222, 0
  %224 = select i1 %223, i32 %222, i32 0
  %225 = icmp sgt i32 %224, %155
  %226 = select i1 %225, i32 %155, i32 %224
  store i32 %226, i32* %206, align 4
  %227 = sitofp i32 %217 to double
  %228 = fmul double %227, 3.440000e-01
  %229 = fmul double %219, 7.140000e-01
  %230 = fadd double %228, %229
  %231 = fptosi double %230 to i32
  %232 = sub nsw i32 %211, %231
  %233 = icmp sgt i32 %232, 0
  %234 = select i1 %233, i32 %232, i32 0
  %235 = icmp sgt i32 %234, %155
  %236 = select i1 %235, i32 %155, i32 %234
  store i32 %236, i32* %205, align 4
  %237 = fmul double %227, 1.772000e+00
  %238 = fptosi double %237 to i32
  %239 = add nsw i32 %211, %238
  %240 = icmp sgt i32 %239, 0
  %241 = select i1 %240, i32 %239, i32 0
  %242 = icmp sgt i32 %241, %155
  %243 = select i1 %242, i32 %155, i32 %241
  store i32 %243, i32* %204, align 4
  %244 = getelementptr inbounds i32, i32* %209, i64 2
  %245 = load i32, i32* %210, align 4
  %246 = getelementptr inbounds i32, i32* %208, i64 1
  %247 = load i32, i32* %208, align 4
  %248 = getelementptr inbounds i32, i32* %207, i64 1
  %249 = load i32, i32* %207, align 4
  %250 = getelementptr inbounds i32, i32* %206, i64 2
  %251 = getelementptr inbounds i32, i32* %205, i64 2
  %252 = getelementptr inbounds i32, i32* %204, i64 2
  %253 = sub nsw i32 %247, %153
  %254 = sub nsw i32 %249, %153
  %255 = sitofp i32 %254 to double
  %256 = fmul double %255, 1.402000e+00
  %257 = fptosi double %256 to i32
  %258 = add nsw i32 %245, %257
  %259 = icmp sgt i32 %258, 0
  %260 = select i1 %259, i32 %258, i32 0
  %261 = icmp sgt i32 %260, %155
  %262 = select i1 %261, i32 %155, i32 %260
  store i32 %262, i32* %214, align 4
  %263 = sitofp i32 %253 to double
  %264 = fmul double %263, 3.440000e-01
  %265 = fmul double %255, 7.140000e-01
  %266 = fadd double %264, %265
  %267 = fptosi double %266 to i32
  %268 = sub nsw i32 %245, %267
  %269 = icmp sgt i32 %268, 0
  %270 = select i1 %269, i32 %268, i32 0
  %271 = icmp sgt i32 %270, %155
  %272 = select i1 %271, i32 %155, i32 %270
  store i32 %272, i32* %215, align 4
  %273 = fmul double %263, 1.772000e+00
  %274 = fptosi double %273 to i32
  %275 = add nsw i32 %245, %274
  %276 = icmp sgt i32 %275, 0
  %277 = select i1 %276, i32 %275, i32 0
  %278 = icmp sgt i32 %277, %155
  %279 = select i1 %278, i32 %155, i32 %277
  store i32 %279, i32* %216, align 4
  %280 = add nuw i32 %203, 2
  %281 = icmp ult i32 %280, %191
  br i1 %281, label %202, label %282

282:                                              ; preds = %202, %194
  %283 = phi i32* [ %201, %194 ], [ %244, %202 ]
  %284 = phi i32* [ %200, %194 ], [ %246, %202 ]
  %285 = phi i32* [ %199, %194 ], [ %248, %202 ]
  %286 = phi i32* [ %198, %194 ], [ %250, %202 ]
  %287 = phi i32* [ %197, %194 ], [ %251, %202 ]
  %288 = phi i32* [ %196, %194 ], [ %252, %202 ]
  br i1 %193, label %289, label %326

289:                                              ; preds = %282
  %290 = getelementptr inbounds i32, i32* %283, i64 1
  %291 = load i32, i32* %283, align 4
  %292 = getelementptr inbounds i32, i32* %284, i64 1
  %293 = load i32, i32* %284, align 4
  %294 = getelementptr inbounds i32, i32* %285, i64 1
  %295 = load i32, i32* %285, align 4
  %296 = getelementptr inbounds i32, i32* %286, i64 1
  %297 = getelementptr inbounds i32, i32* %287, i64 1
  %298 = getelementptr inbounds i32, i32* %288, i64 1
  %299 = sub nsw i32 %293, %153
  %300 = sub nsw i32 %295, %153
  %301 = sitofp i32 %300 to double
  %302 = fmul double %301, 1.402000e+00
  %303 = fptosi double %302 to i32
  %304 = add nsw i32 %291, %303
  %305 = icmp sgt i32 %304, 0
  %306 = select i1 %305, i32 %304, i32 0
  %307 = icmp sgt i32 %306, %155
  %308 = select i1 %307, i32 %155, i32 %306
  store i32 %308, i32* %286, align 4
  %309 = sitofp i32 %299 to double
  %310 = fmul double %309, 3.440000e-01
  %311 = fmul double %301, 7.140000e-01
  %312 = fadd double %310, %311
  %313 = fptosi double %312 to i32
  %314 = sub nsw i32 %291, %313
  %315 = icmp sgt i32 %314, 0
  %316 = select i1 %315, i32 %314, i32 0
  %317 = icmp sgt i32 %316, %155
  %318 = select i1 %317, i32 %155, i32 %316
  store i32 %318, i32* %287, align 4
  %319 = fmul double %309, 1.772000e+00
  %320 = fptosi double %319 to i32
  %321 = add nsw i32 %291, %320
  %322 = icmp sgt i32 %321, 0
  %323 = select i1 %322, i32 %321, i32 0
  %324 = icmp sgt i32 %323, %155
  %325 = select i1 %324, i32 %155, i32 %323
  store i32 %325, i32* %288, align 4
  br label %326

326:                                              ; preds = %289, %282
  %327 = phi i32* [ %290, %289 ], [ %283, %282 ]
  %328 = phi i32* [ %292, %289 ], [ %284, %282 ]
  %329 = phi i32* [ %294, %289 ], [ %285, %282 ]
  %330 = phi i32* [ %296, %289 ], [ %286, %282 ]
  %331 = phi i32* [ %297, %289 ], [ %287, %282 ]
  %332 = phi i32* [ %298, %289 ], [ %288, %282 ]
  %333 = add nuw i32 %195, 1
  %334 = icmp eq i32 %333, %139
  br i1 %334, label %335, label %194

335:                                              ; preds = %326, %185
  %336 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %337 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %336, i64 0, i32 11
  %338 = bitcast i32** %337 to i8**
  %339 = load i8*, i8** %338, align 8
  tail call void @opj_image_data_free(i8* %339) #10
  %340 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %341 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %340, i64 1, i32 11
  %342 = bitcast i32** %341 to i8**
  %343 = load i8*, i8** %342, align 8
  tail call void @opj_image_data_free(i8* %343) #10
  %344 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %345 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %344, i64 2, i32 11
  %346 = bitcast i32** %345 to i8**
  %347 = load i8*, i8** %346, align 8
  tail call void @opj_image_data_free(i8* %347) #10
  %348 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %349 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %348, i64 0, i32 11
  %350 = bitcast i32** %349 to i8**
  store i8* %175, i8** %350, align 8
  %351 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %352 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %351, i64 1, i32 11
  %353 = bitcast i32** %352 to i8**
  store i8* %178, i8** %353, align 8
  %354 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %355 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %354, i64 2, i32 11
  %356 = bitcast i32** %355 to i8**
  store i8* %181, i8** %356, align 8
  %357 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %358 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %357, i64 1, i32 2
  store i32 %125, i32* %358, align 8
  %359 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %360 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %359, i64 1, i32 3
  store i32 %139, i32* %360, align 4
  %361 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %362 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %361, i64 2, i32 2
  store i32 %125, i32* %362, align 8
  %363 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %364 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %363, i64 2, i32 3
  store i32 %139, i32* %364, align 4
  %365 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %366 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %365, i64 0, i32 0
  %367 = load i32, i32* %366, align 8
  %368 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %365, i64 1, i32 0
  store i32 %367, i32* %368, align 8
  %369 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %370 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %369, i64 0, i32 0
  %371 = load i32, i32* %370, align 8
  %372 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %369, i64 2, i32 0
  store i32 %371, i32* %372, align 8
  %373 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %374 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %373, i64 0, i32 1
  %375 = load i32, i32* %374, align 4
  %376 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %373, i64 1, i32 1
  store i32 %375, i32* %376, align 4
  %377 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %378 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %377, i64 0, i32 1
  %379 = load i32, i32* %378, align 4
  %380 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %377, i64 2, i32 1
  store i32 %379, i32* %380, align 4
  br label %526

381:                                              ; preds = %98
  %382 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 1, i32 1
  %383 = load i32, i32* %382, align 4
  %384 = icmp eq i32 %383, 1
  br i1 %384, label %385, label %527

385:                                              ; preds = %381
  %386 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 2, i32 0
  %387 = load i32, i32* %386, align 8
  %388 = icmp eq i32 %387, 1
  br i1 %388, label %389, label %527

389:                                              ; preds = %385
  %390 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 2, i32 1
  %391 = load i32, i32* %390, align 4
  %392 = icmp eq i32 %391, 1
  br i1 %392, label %393, label %527

393:                                              ; preds = %389
  %394 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 0, i32 6
  %395 = load i32, i32* %394, align 8
  %396 = icmp sgt i32 %395, 30
  br i1 %396, label %526, label %397

397:                                              ; preds = %393
  %398 = add nsw i32 %395, -1
  %399 = shl nsw i32 -1, %395
  %400 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 0, i32 2
  %401 = load i32, i32* %400, align 8
  %402 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 1, i32 2
  %403 = load i32, i32* %402, align 8
  %404 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 2, i32 2
  %405 = load i32, i32* %404, align 8
  %406 = icmp ult i32 %403, %401
  %407 = select i1 %406, i32 %403, i32 %401
  %408 = icmp ult i32 %405, %407
  %409 = shl i32 1, %398
  %410 = xor i32 %399, -1
  %411 = select i1 %408, i32 %405, i32 %407
  %412 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 0, i32 3
  %413 = load i32, i32* %412, align 4
  %414 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 1, i32 3
  %415 = load i32, i32* %414, align 4
  %416 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 2, i32 3
  %417 = load i32, i32* %416, align 4
  %418 = icmp ult i32 %415, %413
  %419 = select i1 %418, i32 %415, i32 %413
  %420 = icmp ult i32 %417, %419
  %421 = select i1 %420, i32 %417, i32 %419
  %422 = zext i32 %411 to i64
  %423 = zext i32 %421 to i64
  %424 = mul nuw i64 %423, %422
  %425 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %424, i64 4) #10
  %426 = extractvalue { i64, i1 } %425, 1
  %427 = extractvalue { i64, i1 } %425, 0
  br i1 %426, label %526, label %428

428:                                              ; preds = %397
  %429 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 0, i32 11
  %430 = load i32*, i32** %429, align 8
  %431 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 1, i32 11
  %432 = load i32*, i32** %431, align 8
  %433 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 2, i32 11
  %434 = load i32*, i32** %433, align 8
  %435 = icmp ne i32* %430, null
  %436 = icmp ne i32* %432, null
  %437 = and i1 %435, %436
  %438 = icmp ne i32* %434, null
  %439 = and i1 %437, %438
  br i1 %439, label %440, label %526

440:                                              ; preds = %428
  %441 = tail call i8* @opj_image_data_alloc(i64 %427) #10, !noalias !8
  %442 = icmp eq i8* %441, null
  br i1 %442, label %526, label %443

443:                                              ; preds = %440
  %444 = tail call i8* @opj_image_data_alloc(i64 %427) #10, !noalias !8
  %445 = icmp eq i8* %444, null
  br i1 %445, label %450, label %446

446:                                              ; preds = %443
  %447 = tail call i8* @opj_image_data_alloc(i64 %427) #10, !noalias !8
  %448 = icmp eq i8* %447, null
  br i1 %448, label %449, label %451

449:                                              ; preds = %446
  tail call void @opj_image_data_free(i8* nonnull %444) #10, !noalias !8
  br label %450

450:                                              ; preds = %449, %443
  tail call void @opj_image_data_free(i8* nonnull %441) #10, !noalias !8
  br label %526

451:                                              ; preds = %446
  %452 = lshr exact i64 %427, 2
  %453 = icmp eq i64 %427, 0
  br i1 %453, label %504, label %454

454:                                              ; preds = %451
  %455 = bitcast i8* %447 to i32*
  %456 = bitcast i8* %444 to i32*
  %457 = bitcast i8* %441 to i32*
  br label %458

458:                                              ; preds = %458, %454
  %459 = phi i64 [ %502, %458 ], [ 0, %454 ]
  %460 = phi i32* [ %474, %458 ], [ %455, %454 ]
  %461 = phi i32* [ %473, %458 ], [ %456, %454 ]
  %462 = phi i32* [ %472, %458 ], [ %457, %454 ]
  %463 = phi i32* [ %470, %458 ], [ %434, %454 ]
  %464 = phi i32* [ %468, %458 ], [ %432, %454 ]
  %465 = phi i32* [ %466, %458 ], [ %430, %454 ]
  %466 = getelementptr inbounds i32, i32* %465, i64 1
  %467 = load i32, i32* %465, align 4
  %468 = getelementptr inbounds i32, i32* %464, i64 1
  %469 = load i32, i32* %464, align 4
  %470 = getelementptr inbounds i32, i32* %463, i64 1
  %471 = load i32, i32* %463, align 4
  %472 = getelementptr inbounds i32, i32* %462, i64 1
  %473 = getelementptr inbounds i32, i32* %461, i64 1
  %474 = getelementptr inbounds i32, i32* %460, i64 1
  %475 = sub nsw i32 %469, %409
  %476 = sub nsw i32 %471, %409
  %477 = sitofp i32 %476 to double
  %478 = fmul double %477, 1.402000e+00
  %479 = fptosi double %478 to i32
  %480 = add nsw i32 %467, %479
  %481 = icmp sgt i32 %480, 0
  %482 = select i1 %481, i32 %480, i32 0
  %483 = icmp sgt i32 %482, %410
  %484 = select i1 %483, i32 %410, i32 %482
  store i32 %484, i32* %462, align 4
  %485 = sitofp i32 %475 to double
  %486 = fmul double %485, 3.440000e-01
  %487 = fmul double %477, 7.140000e-01
  %488 = fadd double %486, %487
  %489 = fptosi double %488 to i32
  %490 = sub nsw i32 %467, %489
  %491 = icmp sgt i32 %490, 0
  %492 = select i1 %491, i32 %490, i32 0
  %493 = icmp sgt i32 %492, %410
  %494 = select i1 %493, i32 %410, i32 %492
  store i32 %494, i32* %461, align 4
  %495 = fmul double %485, 1.772000e+00
  %496 = fptosi double %495 to i32
  %497 = add nsw i32 %467, %496
  %498 = icmp sgt i32 %497, 0
  %499 = select i1 %498, i32 %497, i32 0
  %500 = icmp sgt i32 %499, %410
  %501 = select i1 %500, i32 %410, i32 %499
  store i32 %501, i32* %460, align 4
  %502 = add nuw nsw i64 %459, 1
  %503 = icmp ult i64 %502, %452
  br i1 %503, label %458, label %504

504:                                              ; preds = %458, %451
  %505 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %506 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %505, i64 0, i32 11
  %507 = bitcast i32** %506 to i8**
  %508 = load i8*, i8** %507, align 8
  tail call void @opj_image_data_free(i8* %508) #10
  %509 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %510 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %509, i64 1, i32 11
  %511 = bitcast i32** %510 to i8**
  %512 = load i8*, i8** %511, align 8
  tail call void @opj_image_data_free(i8* %512) #10
  %513 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %514 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %513, i64 2, i32 11
  %515 = bitcast i32** %514 to i8**
  %516 = load i8*, i8** %515, align 8
  tail call void @opj_image_data_free(i8* %516) #10
  %517 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %518 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %517, i64 0, i32 11
  %519 = bitcast i32** %518 to i8**
  store i8* %441, i8** %519, align 8
  %520 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %521 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %520, i64 1, i32 11
  %522 = bitcast i32** %521 to i8**
  store i8* %444, i8** %522, align 8
  %523 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %524 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %523, i64 2, i32 11
  %525 = bitcast i32** %524 to i8**
  store i8* %447, i8** %525, align 8
  br label %526

526:                                              ; preds = %504, %450, %440, %428, %397, %393, %335, %184, %174, %162, %152, %147, %143, %137, %133, %127, %123, %121, %112
  store i32 1, i32* %80, align 4
  br label %527

527:                                              ; preds = %101, %104, %108, %98, %113, %117, %526, %389, %385, %381, %94, %88, %87, %78
  %528 = load %struct.opj_image*, %struct.opj_image** %53, align 8
  %529 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %528, i64 0, i32 7
  %530 = load i8*, i8** %529, align 8
  %531 = icmp eq i8* %530, null
  br i1 %531, label %537, label %532

532:                                              ; preds = %527
  tail call void @opj_free(i8* nonnull %530) #10
  %533 = load %struct.opj_image*, %struct.opj_image** %53, align 8
  %534 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %533, i64 0, i32 7
  store i8* null, i8** %534, align 8
  %535 = load %struct.opj_image*, %struct.opj_image** %53, align 8
  %536 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %535, i64 0, i32 8
  store i32 0, i32* %536, align 8
  br label %537

537:                                              ; preds = %532, %527, %39, %36, %21
  %538 = phi i1 [ false, %36 ], [ false, %21 ], [ false, %39 ], [ true, %527 ], [ true, %532 ]
  ret i1 %538
}

declare hidden i32 @opj_set_decode_area(i8**, %struct.opj_image*, i32, i32, i32, i32) local_unnamed_addr #3

declare hidden i32 @opj_decode(i8**, i8**, %struct.opj_image*) local_unnamed_addr #3

declare hidden i32 @opj_end_decompress(i8**, i8**) local_unnamed_addr #3

declare hidden i32 @opj_get_decoded_tile(i8**, i8**, %struct.opj_image*, i32) local_unnamed_addr #3

declare void @opj_free(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK7fxcodec12CJPX_Decoder7GetInfoEv(%"class.fxcodec::CJPX_Decoder"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 3, i32 0
  %3 = load %struct.opj_image*, %struct.opj_image** %2, align 8
  %4 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %3, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %3, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %3, i64 0, i32 4
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %3, i64 0, i32 5
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %7 to i64
  %13 = shl nuw i64 %12, 32
  %14 = zext i32 %5 to i64
  %15 = or i64 %13, %14
  %16 = insertvalue { i64, i64 } undef, i64 %15, 0
  %17 = zext i32 %11 to i64
  %18 = shl nuw i64 %17, 32
  %19 = zext i32 %9 to i64
  %20 = or i64 %18, %19
  %21 = insertvalue { i64, i64 } %16, i64 %20, 1
  ret { i64, i64 } %21
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7fxcodec12CJPX_Decoder6DecodeEPhjb(%"class.fxcodec::CJPX_Decoder"* readonly, i8*, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.fxcodec::CJPX_Decoder", %"class.fxcodec::CJPX_Decoder"* %0, i64 0, i32 3, i32 0
  %6 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %7 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %6, i64 0, i32 6
  %8 = load %struct.opj_image_comp*, %struct.opj_image_comp** %7, align 8
  %9 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %8, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %6, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %14, label %279

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %8, i64 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %6, i64 0, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %20, label %279

20:                                               ; preds = %14
  %21 = shl i32 %10, 3
  %22 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %6, i64 0, i32 4
  %23 = load i32, i32* %22, align 8
  %24 = mul i32 %21, %23
  %25 = add i32 %24, 31
  %26 = lshr i32 %25, 5
  %27 = shl nuw nsw i32 %26, 2
  %28 = icmp ugt i32 %27, %2
  %29 = icmp ult i32 %23, 3
  %30 = and i1 %29, %3
  %31 = or i1 %30, %28
  br i1 %31, label %279, label %32

32:                                               ; preds = %20
  %33 = mul i32 %16, %2
  %34 = zext i32 %33 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 -1, i64 %34, i1 false)
  %35 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %36 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %35, i64 0, i32 4
  %37 = load i32, i32* %36, align 8
  %38 = zext i32 %37 to i64
  %39 = icmp eq i32 %37, 0
  br i1 %39, label %108, label %40

40:                                               ; preds = %32
  %41 = shl nuw nsw i64 %38, 3
  %42 = tail call i8* @_Znwm(i64 %41) #9
  %43 = bitcast i8* %42 to i8**
  %44 = ptrtoint i8* %42 to i64
  %45 = add nsw i64 %38, -1
  %46 = getelementptr i8*, i8** %43, i64 %45
  %47 = ptrtoint i8** %46 to i64
  %48 = sub i64 8, %44
  %49 = add i64 %48, %47
  %50 = and i64 %49, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 0, i64 %50, i1 false) #10
  %51 = load i32, i32* %36, align 8
  %52 = zext i32 %51 to i64
  %53 = icmp eq i32 %51, 0
  br i1 %53, label %108, label %54

54:                                               ; preds = %40
  %55 = shl nuw nsw i64 %52, 2
  %56 = tail call i8* @_Znwm(i64 %55) #9
  %57 = bitcast i8* %56 to i32*
  %58 = ptrtoint i8* %56 to i64
  %59 = add nsw i64 %52, -1
  %60 = getelementptr i32, i32* %57, i64 %59
  %61 = ptrtoint i32* %60 to i64
  %62 = sub i64 4, %58
  %63 = add i64 %62, %61
  %64 = and i64 %63, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %56, i8 0, i64 %64, i1 false) #10
  %65 = load i32, i32* %36, align 8
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %108, label %67

67:                                               ; preds = %54, %102
  %68 = phi i64 [ %103, %102 ], [ 0, %54 ]
  %69 = getelementptr inbounds i8, i8* %1, i64 %68
  %70 = getelementptr inbounds i8*, i8** %43, i64 %68
  store i8* %69, i8** %70, align 8
  %71 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %72 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %71, i64 0, i32 6
  %73 = load %struct.opj_image_comp*, %struct.opj_image_comp** %72, align 8
  %74 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %73, i64 %68, i32 6
  %75 = load i32, i32* %74, align 8
  %76 = add i32 %75, -8
  %77 = getelementptr inbounds i32, i32* %57, i64 %68
  store i32 %76, i32* %77, align 4
  %78 = icmp eq i64 %68, 0
  %79 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  br i1 %78, label %102, label %80

80:                                               ; preds = %67
  %81 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %79, i64 0, i32 6
  %82 = load %struct.opj_image_comp*, %struct.opj_image_comp** %81, align 8
  %83 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %82, i64 %68, i32 0
  %84 = load i32, i32* %83, align 8
  %85 = add nuw i64 %68, 4294967295
  %86 = and i64 %85, 4294967295
  %87 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %82, i64 %86, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = icmp eq i32 %84, %88
  br i1 %89, label %90, label %268

90:                                               ; preds = %80
  %91 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %82, i64 %68, i32 1
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %82, i64 %86, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %92, %94
  br i1 %95, label %96, label %268

96:                                               ; preds = %90
  %97 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %82, i64 %68, i32 6
  %98 = load i32, i32* %97, align 8
  %99 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %82, i64 %86, i32 6
  %100 = load i32, i32* %99, align 8
  %101 = icmp eq i32 %98, %100
  br i1 %101, label %102, label %268

102:                                              ; preds = %67, %96
  %103 = add nuw nsw i64 %68, 1
  %104 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %79, i64 0, i32 4
  %105 = load i32, i32* %104, align 8
  %106 = zext i32 %105 to i64
  %107 = icmp ult i64 %103, %106
  br i1 %107, label %67, label %108

108:                                              ; preds = %102, %32, %40, %54
  %109 = phi i32* [ %57, %54 ], [ null, %40 ], [ null, %32 ], [ %57, %102 ]
  %110 = phi i8* [ %56, %54 ], [ null, %40 ], [ null, %32 ], [ %56, %102 ]
  %111 = phi i8* [ %42, %54 ], [ %42, %40 ], [ null, %32 ], [ %42, %102 ]
  %112 = phi i8** [ %43, %54 ], [ %43, %40 ], [ null, %32 ], [ %43, %102 ]
  %113 = phi %struct.opj_image* [ %35, %54 ], [ %35, %40 ], [ %35, %32 ], [ %79, %102 ]
  br i1 %3, label %114, label %121

114:                                              ; preds = %108
  %115 = getelementptr inbounds i8*, i8** %112, i64 2
  %116 = bitcast i8** %112 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = bitcast i8** %115 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %116, align 8
  store i64 %117, i64* %118, align 8
  %120 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  br label %121

121:                                              ; preds = %114, %108
  %122 = phi %struct.opj_image* [ %120, %114 ], [ %113, %108 ]
  %123 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %122, i64 0, i32 6
  %124 = load %struct.opj_image_comp*, %struct.opj_image_comp** %123, align 8
  %125 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %124, i64 0, i32 2
  %126 = load i32, i32* %125, align 8
  %127 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %124, i64 0, i32 3
  %128 = load i32, i32* %127, align 4
  %129 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %122, i64 0, i32 4
  %130 = load i32, i32* %129, align 8
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %266, label %132

132:                                              ; preds = %121
  %133 = icmp eq i32 %128, 0
  %134 = icmp eq i32 %126, 0
  %135 = zext i32 %128 to i64
  %136 = zext i32 %126 to i64
  %137 = zext i32 %128 to i64
  %138 = zext i32 %126 to i64
  br label %139

139:                                              ; preds = %132, %259
  %140 = phi i64 [ 0, %132 ], [ %260, %259 ]
  %141 = getelementptr inbounds i8*, i8** %112, i64 %140
  %142 = load i8*, i8** %141, align 8
  %143 = getelementptr inbounds i32, i32* %109, i64 %140
  %144 = load i32, i32* %143, align 4
  %145 = icmp slt i32 %144, 0
  br i1 %145, label %147, label %146

146:                                              ; preds = %139
  br i1 %133, label %259, label %200

147:                                              ; preds = %139
  br i1 %133, label %259, label %148

148:                                              ; preds = %147, %156
  %149 = phi i64 [ %157, %156 ], [ 0, %147 ]
  %150 = trunc i64 %149 to i32
  %151 = mul i32 %150, %2
  %152 = zext i32 %151 to i64
  %153 = getelementptr inbounds i8, i8* %142, i64 %152
  br i1 %134, label %156, label %154

154:                                              ; preds = %148
  %155 = mul i32 %126, %150
  br label %159

156:                                              ; preds = %197, %148
  %157 = add nuw nsw i64 %149, 1
  %158 = icmp eq i64 %157, %137
  br i1 %158, label %259, label %148

159:                                              ; preds = %197, %154
  %160 = phi i64 [ 0, %154 ], [ %198, %197 ]
  %161 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %162 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %161, i64 0, i32 4
  %163 = load i32, i32* %162, align 8
  %164 = trunc i64 %160 to i32
  %165 = mul i32 %163, %164
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds i8, i8* %153, i64 %166
  %168 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %161, i64 0, i32 6
  %169 = load %struct.opj_image_comp*, %struct.opj_image_comp** %168, align 8
  %170 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %169, i64 %140, i32 11
  %171 = load i32*, i32** %170, align 8
  %172 = icmp eq i32* %171, null
  br i1 %172, label %197, label %173

173:                                              ; preds = %159
  %174 = add i32 %155, %164
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds i32, i32* %171, i64 %175
  %177 = load i32, i32* %176, align 4
  %178 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %169, i64 %140, i32 8
  %179 = load i32, i32* %178, align 8
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %186, label %181

181:                                              ; preds = %173
  %182 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %169, i64 %140, i32 6
  %183 = load i32, i32* %182, align 8
  %184 = add i32 %183, -1
  %185 = shl i32 1, %184
  br label %186

186:                                              ; preds = %173, %181
  %187 = phi i32 [ %185, %181 ], [ 0, %173 ]
  %188 = load i32, i32* %143, align 4
  %189 = icmp sgt i32 %188, 0
  br i1 %189, label %195, label %190

190:                                              ; preds = %186
  %191 = add nsw i32 %187, %177
  %192 = sub nsw i32 0, %188
  %193 = shl i32 %191, %192
  %194 = trunc i32 %193 to i8
  br label %195

195:                                              ; preds = %186, %190
  %196 = phi i8 [ %194, %190 ], [ 0, %186 ]
  store i8 %196, i8* %167, align 1
  br label %197

197:                                              ; preds = %159, %195
  %198 = add nuw nsw i64 %160, 1
  %199 = icmp eq i64 %198, %138
  br i1 %199, label %156, label %159

200:                                              ; preds = %146, %208
  %201 = phi i64 [ %209, %208 ], [ 0, %146 ]
  %202 = trunc i64 %201 to i32
  %203 = mul i32 %202, %2
  %204 = zext i32 %203 to i64
  %205 = getelementptr inbounds i8, i8* %142, i64 %204
  br i1 %134, label %208, label %206

206:                                              ; preds = %200
  %207 = mul i32 %126, %202
  br label %211

208:                                              ; preds = %256, %200
  %209 = add nuw nsw i64 %201, 1
  %210 = icmp eq i64 %209, %135
  br i1 %210, label %259, label %200

211:                                              ; preds = %256, %206
  %212 = phi i64 [ 0, %206 ], [ %257, %256 ]
  %213 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %214 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %213, i64 0, i32 4
  %215 = load i32, i32* %214, align 8
  %216 = trunc i64 %212 to i32
  %217 = mul i32 %215, %216
  %218 = zext i32 %217 to i64
  %219 = getelementptr inbounds i8, i8* %205, i64 %218
  %220 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %213, i64 0, i32 6
  %221 = load %struct.opj_image_comp*, %struct.opj_image_comp** %220, align 8
  %222 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %221, i64 %140, i32 11
  %223 = load i32*, i32** %222, align 8
  %224 = icmp eq i32* %223, null
  br i1 %224, label %256, label %225

225:                                              ; preds = %211
  %226 = add i32 %207, %216
  %227 = zext i32 %226 to i64
  %228 = getelementptr inbounds i32, i32* %223, i64 %227
  %229 = load i32, i32* %228, align 4
  %230 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %221, i64 %140, i32 8
  %231 = load i32, i32* %230, align 8
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %238, label %233

233:                                              ; preds = %225
  %234 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %221, i64 %140, i32 6
  %235 = load i32, i32* %234, align 8
  %236 = add i32 %235, -1
  %237 = shl i32 1, %236
  br label %238

238:                                              ; preds = %225, %233
  %239 = phi i32 [ %237, %233 ], [ 0, %225 ]
  %240 = add nsw i32 %239, %229
  %241 = load i32, i32* %143, align 4
  %242 = icmp slt i32 %241, 1
  %243 = ashr i32 %240, %241
  br i1 %242, label %253, label %244

244:                                              ; preds = %238
  %245 = add nsw i32 %241, -1
  %246 = ashr i32 %240, %245
  %247 = srem i32 %246, 2
  %248 = add nsw i32 %247, %243
  %249 = icmp sgt i32 %248, 0
  %250 = select i1 %249, i32 %248, i32 0
  %251 = icmp slt i32 %250, 255
  %252 = select i1 %251, i32 %250, i32 255
  br label %253

253:                                              ; preds = %238, %244
  %254 = phi i32 [ %252, %244 ], [ %243, %238 ]
  %255 = trunc i32 %254 to i8
  store i8 %255, i8* %219, align 1
  br label %256

256:                                              ; preds = %253, %211
  %257 = add nuw nsw i64 %212, 1
  %258 = icmp eq i64 %257, %136
  br i1 %258, label %208, label %211

259:                                              ; preds = %208, %156, %147, %146
  %260 = add nuw nsw i64 %140, 1
  %261 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %262 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %261, i64 0, i32 4
  %263 = load i32, i32* %262, align 8
  %264 = zext i32 %263 to i64
  %265 = icmp ult i64 %260, %264
  br i1 %265, label %139, label %266

266:                                              ; preds = %259, %121
  %267 = icmp eq i32* %109, null
  br i1 %267, label %273, label %268

268:                                              ; preds = %96, %90, %80, %266
  %269 = phi i1 [ true, %266 ], [ false, %80 ], [ false, %90 ], [ false, %96 ]
  %270 = phi i8** [ %112, %266 ], [ %43, %80 ], [ %43, %90 ], [ %43, %96 ]
  %271 = phi i8* [ %111, %266 ], [ %42, %80 ], [ %42, %90 ], [ %42, %96 ]
  %272 = phi i8* [ %110, %266 ], [ %56, %80 ], [ %56, %90 ], [ %56, %96 ]
  tail call void @_ZdlPv(i8* %272) #9
  br label %273

273:                                              ; preds = %266, %268
  %274 = phi i1 [ true, %266 ], [ %269, %268 ]
  %275 = phi i8** [ %112, %266 ], [ %270, %268 ]
  %276 = phi i8* [ %111, %266 ], [ %271, %268 ]
  %277 = icmp eq i8** %275, null
  br i1 %277, label %279, label %278

278:                                              ; preds = %273
  tail call void @_ZdlPv(i8* %276) #9
  br label %279

279:                                              ; preds = %278, %273, %20, %4, %14
  %280 = phi i1 [ false, %14 ], [ false, %4 ], [ false, %20 ], [ %274, %273 ], [ %274, %278 ]
  ret i1 %280
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare hidden void @opj_image_data_free(i8*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #6

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #6

declare hidden i8* @opj_image_data_alloc(i64) local_unnamed_addr #3

declare hidden i8** @opj_stream_create(i64, i32) local_unnamed_addr #3

declare hidden void @opj_stream_set_user_data(i8**, i8*, void (i8*)*) local_unnamed_addr #3

declare hidden void @opj_stream_set_user_data_length(i8**, i64) local_unnamed_addr #3

declare hidden void @opj_stream_set_read_function(i8**, i64 (i8*, i64, i8*)*) local_unnamed_addr #3

declare i64 @_ZN7fxcodec20opj_read_from_memoryEPvmS0_(i8*, i64, i8*) #3

declare hidden void @opj_stream_set_skip_function(i8**, i64 (i64, i8*)*) local_unnamed_addr #3

declare i64 @_ZN7fxcodec20opj_skip_from_memoryElPv(i64, i8*) #3

declare hidden void @opj_stream_set_seek_function(i8**, i32 (i64, i8*)*) local_unnamed_addr #3

declare i32 @_ZN7fxcodec20opj_seek_from_memoryElPv(i64, i8*) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN7fxcodec12_GLOBAL__N_19alloc_rgbEm: argument 0"}
!4 = distinct !{!4, !"_ZN7fxcodec12_GLOBAL__N_19alloc_rgbEm"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN7fxcodec12_GLOBAL__N_19alloc_rgbEm: argument 0"}
!7 = distinct !{!7, !"_ZN7fxcodec12_GLOBAL__N_19alloc_rgbEm"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN7fxcodec12_GLOBAL__N_19alloc_rgbEm: argument 0"}
!10 = distinct !{!10, !"_ZN7fxcodec12_GLOBAL__N_19alloc_rgbEm"}
