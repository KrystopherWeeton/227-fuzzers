; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_encodeframe.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_encodeframe.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.mv = type { i16, i16 }
%struct.anon.8 = type { i8, i8 }
%struct.anon.9 = type { i32, i32 }
%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.0, %union.anon.1, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.0 = type { i64 }
%union.anon.1 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.anon.4, [40 x i8] }
%struct.anon.4 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.5] }
%struct.anon.5 = type { i32, %union.anon.6 }
%union.anon.6 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.7, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.7 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.RD_COST = type { i32, i64, i64 }
%struct.vpx_usec_timer = type { %struct.timeval, %struct.timeval }
%struct.timeval = type { i64, i64 }
%struct.v64x64 = type { %struct.partition_variance, [4 x %struct.v32x32] }
%struct.partition_variance = type { %struct.var, [2 x %struct.var], [2 x %struct.var] }
%struct.var = type { i32, i32, i32, i32 }
%struct.v32x32 = type { %struct.partition_variance, [4 x %struct.v16x16] }
%struct.v16x16 = type { %struct.partition_variance, [4 x %struct.v8x8] }
%struct.v8x8 = type { %struct.partition_variance, [4 x %struct.v4x4] }
%struct.v4x4 = type { %struct.partition_variance, [4 x %struct.var] }
%struct.NN_CONFIG = type { i32, i32, i32, [10 x i32], [11 x float*], [11 x float*] }

@VP9_VAR_OFFS = internal constant [64 x i8] c"\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", align 16
@VP9_HIGH_VAR_OFFS_10 = internal constant [64 x i16] [i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512], align 16
@VP9_HIGH_VAR_OFFS_12 = internal constant [64 x i16] [i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048], align 16
@VP9_HIGH_VAR_OFFS_8 = internal constant [64 x i16] [i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128], align 16
@num_pels_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@.str = private unnamed_addr constant [34 x i8] c"Failed to allocate cpi->tile_data\00", align 1
@num_8x8_blocks_wide_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_8x8_blocks_high_lookup = external local_unnamed_addr constant [13 x i8], align 1
@vpx_variance64x64 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8
@choose_partitioning.dummy_mv = internal constant %struct.mv zeroinitializer, align 2
@.str.1 = private unnamed_addr constant [23 x i8] c"Failed to allocate vt2\00", align 1
@b_width_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@scale_partitioning_svc.row_boundary_block_scale_factor = internal unnamed_addr constant [13 x i32] [i32 13, i32 13, i32 13, i32 1, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0, i32 1, i32 0], align 16
@scale_partitioning_svc.col_boundary_block_scale_factor = internal unnamed_addr constant [13 x i32] [i32 13, i32 13, i32 13, i32 2, i32 2, i32 0, i32 2, i32 2, i32 0, i32 2, i32 2, i32 0, i32 0], align 16
@partition_lookup = external local_unnamed_addr constant [0 x [13 x i32]], align 4
@subsize_lookup = external local_unnamed_addr constant [4 x [13 x i8]], align 16
@ss_size_lookup = external local_unnamed_addr constant [13 x [2 x [2 x i8]]], align 16
@set_low_temp_var_flag.idx = internal unnamed_addr constant [4 x [2 x i32]] [[2 x i32] zeroinitializer, [2 x i32] [i32 0, i32 4], [2 x i32] [i32 4, i32 0], [2 x i32] [i32 4, i32 4]], align 16
@mi_width_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_4x4_blocks_wide_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_4x4_blocks_high_lookup = external local_unnamed_addr constant [13 x i8], align 1
@max_txsize_lookup = external local_unnamed_addr constant [13 x i8], align 1
@tx_mode_to_biggest_tx_size = external local_unnamed_addr constant [5 x i8], align 1
@size_group_lookup = external local_unnamed_addr constant [13 x i8], align 1
@uv_txsize_lookup = external local_unnamed_addr constant [13 x [4 x [2 x [2 x i8]]]], align 16
@partition_context_lookup = external local_unnamed_addr constant [13 x %struct.anon.8], align 16
@get_estimated_pred.dummy_mv = internal constant %struct.mv zeroinitializer, align 2
@b_height_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@vp9_var_part_nn_weights_64_layer0 = internal constant [48 x float] [float 0xBFCFF1F9A0000000, float 0x3FCA4EDF60000000, float 0xC00167A520000000, float 0x3FF18472C0000000, float 0xC007E41600000000, float 0x3FC8B97780000000, float 0xBFC268CAC0000000, float 0x3FD8398640000000, float 0xBFFFF6F080000000, float 0xC00155BDE0000000, float 0xBFFEE1ED60000000, float 0xBFF33BE980000000, float 0xBFE3947AE0000000, float 0xBFE0349BE0000000, float 0xBFDBADDE00000000, float 0x3FB23A7DA0000000, float 0x3FE28062A0000000, float 0xBFC3BF9C60000000, float 0xBFAA897640000000, float 0x3FD53A4300000000, float 0xBFF75098E0000000, float 0xC0038C61E0000000, float 0xC000009E60000000, float 0xBFF63A80C0000000, float 0x3FD7D03960000000, float 0xBFDDC13340000000, float 0x40021F3380000000, float 0x4003161780000000, float 0x4002807460000000, float 0x400105DFA0000000, float 0xBFD9DA87A0000000, float 0xBFC6C41DE0000000, float 0xBFDBF3BA80000000, float 0xBFE1EFEF80000000, float 0x3FD05054A0000000, float 0x3FC8D434A0000000, float 0xBFD38F2180000000, float 0x3FD06CA8A0000000, float 0x3FD3CD0360000000, float 0xBFDBFF0020000000, float 0x3FFB3E0380000000, float 0xC014073D20000000, float 0xBFD4B367A0000000, float 0x3FD2D49D80000000, float 0x3FF4466C20000000, float 0x3FF0E7D680000000, float 0x3FD8C792E0000000, float 0xBFC879BBA0000000], align 16
@vp9_var_part_nn_weights_64_layer1 = internal constant [8 x float] [float 0x3FFA2CD4A0000000, float 0x3FEF5887E0000000, float 0x3FDD23E180000000, float 0x3FF327BA20000000, float 0xC0020218E0000000, float 0xBFDDC1CA40000000, float 0x3FF60F0EA0000000, float 0xBFBCA73F80000000], align 16
@vp9_var_part_nn_bias_64_layer0 = internal constant [8 x float] [float 0xBFA6BB12A0000000, float 0xBFEE0574C0000000, float 0.000000e+00, float 0xBFED52F1A0000000, float 0x3FF3E074E0000000, float 0.000000e+00, float 0xBFD9F78BC0000000, float 0x3F8D180900000000], align 16
@vp9_var_part_nn_bias_64_layer1 = internal constant [1 x float] [float 0xBFD84D67E0000000], align 4
@vp9_var_part_nnconfig_64 = internal unnamed_addr constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 6, i32 1, i32 1, <{ i32, [9 x i32] }> <{ i32 8, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([48 x float], [48 x float]* @vp9_var_part_nn_weights_64_layer0, i32 0, i32 0), float* getelementptr inbounds ([8 x float], [8 x float]* @vp9_var_part_nn_weights_64_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([8 x float], [8 x float]* @vp9_var_part_nn_bias_64_layer0, i32 0, i32 0), float* getelementptr inbounds ([1 x float], [1 x float]* @vp9_var_part_nn_bias_64_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@vp9_var_part_nn_weights_32_layer0 = internal constant [48 x float] [float 0x3FB136D660000000, float 0xBFB566ADC0000000, float 0xC001877E60000000, float 0x4005CFBCA0000000, float 0xC00A979420000000, float 0x400BD2E5A0000000, float 0x3FD4B81740000000, float 0xBFE0538CE0000000, float 0x4007AF7FC0000000, float 0x4007805460000000, float 0x40071B9940000000, float 0x400781AB40000000, float 0xBFD3AFC040000000, float 0xBFE01B77C0000000, float 0xBFB4AA64C0000000, float 0xBFDE548660000000, float 0xBFDAB2C840000000, float 0x3FDD40F240000000, float 0x3FE548EF00000000, float 0xBFD17C45C0000000, float 0x3F9CF52BA0000000, float 0x3FEF1C6D20000000, float 0xBFDC84A520000000, float 0x3FFC1B1420000000, float 0xBFC6C52A40000000, float 0xBFB77D73C0000000, float 0x3FDBF24100000000, float 0xBFE0B02D60000000, float 0x3FC11FE640000000, float 0x3FD1125140000000, float 0x3FE4654F80000000, float 0xBFC47DA1E0000000, float 0xBFF6571E20000000, float 0x3FF0555D60000000, float 0xBFF1CEBAA0000000, float 0x3FED6C82E0000000, float 0xBFCE316A00000000, float 0x3FE4DCCEA0000000, float 0x3FBBEB6C00000000, float 0xBFDB7C5260000000, float 0x3FE7B4F400000000, float 0xBFEEC93200000000, float 0x3FD32B51C0000000, float 0xBFD8B91B40000000, float 0x3FF8CDBF00000000, float 0x4003B82560000000, float 0x3FF4FDD340000000, float 0x40047E2E60000000], align 16
@vp9_var_part_nn_weights_32_layer1 = internal constant [8 x float] [float 0x3FEE1387A0000000, float 0xC0035DE6A0000000, float 0xBFDA4573A0000000, float 0xBFC7E57540000000, float 0x3FB03393A0000000, float 0xBFE0B45060000000, float 0x3FDF027D80000000, float 0xBFE477CEE0000000], align 16
@vp9_var_part_nn_bias_32_layer0 = internal constant [8 x float] [float 0x3FD79146E0000000, float 0x3FE7925DE0000000, float 0.000000e+00, float 0x3FE83BB200000000, float 0.000000e+00, float 0x3FE39FBA40000000, float 0xBFE8D82FE0000000, float 0x3FEDB63F60000000], align 16
@vp9_var_part_nn_bias_32_layer1 = internal constant [1 x float] [float 0xBFE4A7F0E0000000], align 4
@vp9_var_part_nnconfig_32 = internal unnamed_addr constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 6, i32 1, i32 1, <{ i32, [9 x i32] }> <{ i32 8, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([48 x float], [48 x float]* @vp9_var_part_nn_weights_32_layer0, i32 0, i32 0), float* getelementptr inbounds ([8 x float], [8 x float]* @vp9_var_part_nn_weights_32_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([8 x float], [8 x float]* @vp9_var_part_nn_bias_32_layer0, i32 0, i32 0), float* getelementptr inbounds ([1 x float], [1 x float]* @vp9_var_part_nn_bias_32_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@vp9_var_part_nn_weights_16_layer0 = internal constant [48 x float] [float 0x3FE7C31BE0000000, float 0xBFE29478C0000000, float 0xBFCF4CB180000000, float 0x3FD539EF00000000, float 0xBFBD2BC300000000, float 0xBFE1E5BEA0000000, float 0xBFD8B53940000000, float 0x3FDC12E400000000, float 0x3FF77ABA80000000, float 0x3FCB155920000000, float 0x3FE0727560000000, float 0x3FF115EF20000000, float 0xBFEC0DC120000000, float 0x3FB6ABDE40000000, float 0xBFE5FFDC60000000, float 0xBFD856E6A0000000, float 0xBF90CE4EA0000000, float 0x3FC2BC9480000000, float 0x3F8F5F0B20000000, float 0x3F3700CD80000000, float 0xC0061E7D20000000, float 0x400A286160000000, float 0x400604F900000000, float 0xC001E4DF40000000, float 0x3FE1F820A0000000, float 0xBFEB43FE60000000, float 0xBFB5ACBC80000000, float 0x3FC9DD0100000000, float 0x3FC938E6E0000000, float 0x3FD75AE1C0000000, float 0xBFDDAEEA60000000, float 0x3FDBA27280000000, float 0x3FFDF41AE0000000, float 0xBFB785E800000000, float 0xBFAC2D6AA0000000, float 0x40038C4580000000, float 0xBFC4173320000000, float 0xBFC843DCC0000000, float 0xBFE15B89A0000000, float 0xBFE2DFACA0000000, float 0xBFD6AED9A0000000, float 0x3FD9B3E580000000, float 0x3FE48B6FA0000000, float 0xBFEC00F560000000, float 0x4000538BC0000000, float 0x3FFEBCB3E0000000, float 0x3FFCADB940000000, float 0x3FFD6F85A0000000], align 16
@vp9_var_part_nn_weights_16_layer1 = internal constant [8 x float] [float 0xBFE0EB5D40000000, float 0x3FD803D580000000, float 0xBFB6A2D300000000, float 0x3FE56568A0000000, float 0x3FEBDAB7E0000000, float 0x3FE284FF40000000, float 0x3FE179AD00000000, float 0xBFFF50B840000000], align 16
@vp9_var_part_nn_bias_16_layer0 = internal constant [8 x float] [float 0x400735BA20000000, float 0xBFFF0E0EC0000000, float 0xBFC977D960000000, float 0xBFDA047D40000000, float 0x3FAE6C8F80000000, float 0xBFFE113B60000000, float 0xBFCDBD5120000000, float 0x4007D6AC60000000], align 16
@vp9_var_part_nn_bias_16_layer1 = internal constant [1 x float] [float 0xBFFF52B700000000], align 4
@vp9_var_part_nnconfig_16 = internal unnamed_addr constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 6, i32 1, i32 1, <{ i32, [9 x i32] }> <{ i32 8, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([48 x float], [48 x float]* @vp9_var_part_nn_weights_16_layer0, i32 0, i32 0), float* getelementptr inbounds ([8 x float], [8 x float]* @vp9_var_part_nn_weights_16_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([8 x float], [8 x float]* @vp9_var_part_nn_bias_16_layer0, i32 0, i32 0), float* getelementptr inbounds ([1 x float], [1 x float]* @vp9_var_part_nn_bias_16_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@coord_lookup = internal unnamed_addr constant [16 x %struct.anon.9] [%struct.anon.9 zeroinitializer, %struct.anon.9 { i32 0, i32 2 }, %struct.anon.9 { i32 2, i32 0 }, %struct.anon.9 { i32 2, i32 2 }, %struct.anon.9 { i32 0, i32 4 }, %struct.anon.9 { i32 0, i32 6 }, %struct.anon.9 { i32 2, i32 4 }, %struct.anon.9 { i32 2, i32 6 }, %struct.anon.9 { i32 4, i32 0 }, %struct.anon.9 { i32 4, i32 2 }, %struct.anon.9 { i32 6, i32 0 }, %struct.anon.9 { i32 6, i32 2 }, %struct.anon.9 { i32 4, i32 4 }, %struct.anon.9 { i32 4, i32 6 }, %struct.anon.9 { i32 6, i32 4 }, %struct.anon.9 { i32 6, i32 6 }], align 16
@.str.5 = private unnamed_addr constant [40 x i8] c"Failed to allocate cpi->source_diff_var\00", align 1
@vpx_get16x16var = external local_unnamed_addr global void (i8*, i32, i8*, i32, i32*, i32*)*, align 8
@switch.table.encode_frame_internal = private unnamed_addr constant [3 x i32] [i32 4, i32 3, i32 4], align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_get_sby_variance(%struct.VP9_COMP* nocapture readonly, %struct.buf_2d* nocapture readonly, i8 zeroext) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #8
  store i32 -1431655766, i32* %4, align 4
  %6 = zext i8 %2 to i64
  %7 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %6, i32 2
  %8 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %7, align 8
  %9 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = call i32 %8(i8* %10, i32 %12, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @VP9_VAR_OFFS, i64 0, i64 0), i32 0, i32* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #8
  ret i32 %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_high_get_sby_variance(%struct.VP9_COMP* nocapture readonly, %struct.buf_2d* nocapture readonly, i8 zeroext, i32) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #8
  store i32 -1431655766, i32* %5, align 4
  switch i32 %3, label %25 [
    i32 10, label %7
    i32 12, label %16
  ]

7:                                                ; preds = %4
  %8 = zext i8 %2 to i64
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %8, i32 2
  %10 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %9, align 8
  %11 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = call i32 %10(i8* %12, i32 %14, i8* inttoptr (i64 lshr (i64 ptrtoint ([64 x i16]* @VP9_HIGH_VAR_OFFS_10 to i64), i64 1) to i8*), i32 0, i32* nonnull %5) #8
  br label %34

16:                                               ; preds = %4
  %17 = zext i8 %2 to i64
  %18 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %17, i32 2
  %19 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %18, align 8
  %20 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = call i32 %19(i8* %21, i32 %23, i8* inttoptr (i64 lshr (i64 ptrtoint ([64 x i16]* @VP9_HIGH_VAR_OFFS_12 to i64), i64 1) to i8*), i32 0, i32* nonnull %5) #8
  br label %34

25:                                               ; preds = %4
  %26 = zext i8 %2 to i64
  %27 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %26, i32 2
  %28 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %27, align 8
  %29 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = call i32 %28(i8* %30, i32 %32, i8* inttoptr (i64 lshr (i64 ptrtoint ([64 x i16]* @VP9_HIGH_VAR_OFFS_8 to i64), i64 1) to i8*), i32 0, i32* nonnull %5) #8
  br label %34

34:                                               ; preds = %25, %16, %7
  %35 = phi i32 [ %33, %25 ], [ %24, %16 ], [ %15, %7 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #8
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_get_sby_perpixel_variance(%struct.VP9_COMP* nocapture readonly, %struct.buf_2d* nocapture readonly, i8 zeroext) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #8
  store i32 -1431655766, i32* %4, align 4
  %6 = zext i8 %2 to i64
  %7 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %6, i32 2
  %8 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %7, align 8
  %9 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = call i32 %8(i8* %10, i32 %12, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @VP9_VAR_OFFS, i64 0, i64 0), i32 0, i32* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #8
  %14 = getelementptr inbounds [13 x i8], [13 x i8]* @num_pels_log2_lookup, i64 0, i64 %6
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = add nsw i32 %16, -1
  %18 = shl i32 1, %17
  %19 = add i32 %18, %13
  %20 = lshr i32 %19, %16
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_high_get_sby_perpixel_variance(%struct.VP9_COMP* nocapture readonly, %struct.buf_2d* nocapture readonly, i8 zeroext, i32) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #8
  store i32 -1431655766, i32* %5, align 4
  switch i32 %3, label %25 [
    i32 10, label %7
    i32 12, label %16
  ]

7:                                                ; preds = %4
  %8 = zext i8 %2 to i64
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %8, i32 2
  %10 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %9, align 8
  %11 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = call i32 %10(i8* %12, i32 %14, i8* inttoptr (i64 lshr (i64 ptrtoint ([64 x i16]* @VP9_HIGH_VAR_OFFS_10 to i64), i64 1) to i8*), i32 0, i32* nonnull %5) #8
  br label %34

16:                                               ; preds = %4
  %17 = zext i8 %2 to i64
  %18 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %17, i32 2
  %19 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %18, align 8
  %20 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = call i32 %19(i8* %21, i32 %23, i8* inttoptr (i64 lshr (i64 ptrtoint ([64 x i16]* @VP9_HIGH_VAR_OFFS_12 to i64), i64 1) to i8*), i32 0, i32* nonnull %5) #8
  br label %34

25:                                               ; preds = %4
  %26 = zext i8 %2 to i64
  %27 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %26, i32 2
  %28 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %27, align 8
  %29 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %1, i64 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = call i32 %28(i8* %30, i32 %32, i8* inttoptr (i64 lshr (i64 ptrtoint ([64 x i16]* @VP9_HIGH_VAR_OFFS_8 to i64), i64 1) to i8*), i32 0, i32* nonnull %5) #8
  br label %34

34:                                               ; preds = %7, %16, %25
  %35 = phi i64 [ %8, %7 ], [ %17, %16 ], [ %26, %25 ]
  %36 = phi i32 [ %15, %7 ], [ %24, %16 ], [ %33, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #8
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [13 x i8], [13 x i8]* @num_pels_log2_lookup, i64 0, i64 %35
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = add nuw nsw i64 %40, 4294967295
  %42 = and i64 %41, 4294967295
  %43 = shl i64 1, %42
  %44 = add i64 %43, %37
  %45 = lshr i64 %44, %40
  %46 = trunc i64 %45 to i32
  ret i32 %46
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_set_variance_partition_thresholds(%struct.VP9_COMP*, i32, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %12, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %9 = load i8, i8* %8, align 4
  %10 = icmp ne i8 %9, 0
  %11 = zext i1 %10 to i32
  br label %12

12:                                               ; preds = %3, %7
  %13 = phi i32 [ 1, %3 ], [ %11, %7 ]
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 24
  %15 = load i32, i32* %14, align 8
  %16 = and i32 %15, -2
  %17 = icmp eq i32 %16, 2
  br i1 %17, label %18, label %92

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 130, i64 0
  tail call fastcc void @set_vbp_thresholds(%struct.VP9_COMP* %0, i64* %19, i32 %1, i32 %2)
  %20 = icmp eq i32 %13, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 132
  %23 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 134
  %24 = bitcast i64* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %24, i8 0, i64 16, i1 false)
  store i8 3, i8* %23, align 16
  br label %87

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 3
  %27 = load i32, i32* %26, align 16
  %28 = icmp slt i32 %27, 353
  br i1 %28, label %29, label %36

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, 289
  br i1 %32, label %33, label %36

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 132
  store i64 10, i64* %34, align 16
  %35 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 134
  store i8 6, i8* %35, align 16
  br label %70

36:                                               ; preds = %25, %29
  %37 = sext i32 %1 to i64
  %38 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 6, i64 %37, i64 1
  %39 = load i16, i16* %38, align 2
  %40 = icmp sgt i16 %39, 500
  %41 = sext i16 %39 to i32
  %42 = shl nsw i32 %41, 1
  %43 = sext i32 %42 to i64
  %44 = select i1 %40, i64 %43, i64 1000
  %45 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 132
  store i64 %44, i64* %45, align 16
  %46 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 134
  store i8 6, i8* %46, align 16
  br i1 %28, label %47, label %51

47:                                               ; preds = %36
  %48 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %49 = load i32, i32* %48, align 4
  %50 = icmp slt i32 %49, 289
  br i1 %50, label %70, label %56

51:                                               ; preds = %36
  %52 = icmp slt i32 %27, 641
  br i1 %52, label %53, label %61

53:                                               ; preds = %51
  %54 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %55 = load i32, i32* %54, align 4
  br label %56

56:                                               ; preds = %53, %47
  %57 = phi i32 [ %55, %53 ], [ %49, %47 ]
  %58 = icmp slt i32 %57, 361
  br i1 %58, label %70, label %59

59:                                               ; preds = %56
  %60 = sext i32 %1 to i64
  br label %61

61:                                               ; preds = %59, %51
  %62 = phi i64 [ %60, %59 ], [ %37, %51 ]
  %63 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 6, i64 %62, i64 1
  %64 = load i16, i16* %63, align 2
  %65 = icmp sgt i16 %64, 1000
  %66 = sext i16 %64 to i32
  %67 = shl nsw i32 %66, 3
  %68 = sext i32 %67 to i64
  %69 = select i1 %65, i64 %68, i64 8000
  br label %70

70:                                               ; preds = %56, %47, %33, %61
  %71 = phi i64 [ %69, %61 ], [ 4000, %33 ], [ 4000, %47 ], [ 8000, %56 ]
  %72 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 133
  store i64 %71, i64* %72, align 8
  %73 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 71
  %74 = load i32, i32* %73, align 8
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %84

76:                                               ; preds = %70
  %77 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %78 = load i32, i32* %77, align 4
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %87, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 43
  %82 = load i32, i32* %81, align 8
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %87, label %84

84:                                               ; preds = %80, %70
  %85 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 132
  %86 = bitcast i64* %85 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %86, i8 0, i64 16, i1 false)
  br label %87

87:                                               ; preds = %80, %76, %84, %21
  %88 = ashr i32 %1, 3
  %89 = add nsw i32 %88, 15
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 131
  store i64 %90, i64* %91, align 8
  br label %92

92:                                               ; preds = %12, %87
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @set_vbp_thresholds(%struct.VP9_COMP*, i64* nocapture, i32, i32) unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %10 = load i8, i8* %9, align 4
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %23, label %12

12:                                               ; preds = %8, %4
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 6, i64 %13, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i64
  %17 = mul nsw i64 %16, 20
  store i64 %17, i64* %1, align 8
  %18 = ashr exact i64 %17, 2
  %19 = getelementptr inbounds i64, i64* %1, i64 1
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds i64, i64* %1, i64 2
  store i64 %18, i64* %20, align 8
  %21 = mul nsw i64 %16, 80
  %22 = getelementptr inbounds i64, i64* %1, i64 3
  store i64 %21, i64* %22, align 8
  br label %179

23:                                               ; preds = %8
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 98
  %25 = load i32, i32* %24, align 8
  %26 = sext i32 %2 to i64
  %27 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 6, i64 %26, i64 1
  %28 = load i16, i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = mul nsw i32 %25, %29
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128
  %33 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %53, label %36

36:                                               ; preds = %23
  %37 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 3
  %38 = load i32, i32* %37, align 16
  %39 = icmp sgt i32 %38, 639
  br i1 %39, label %40, label %53

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %42 = load i32, i32* %41, align 4
  %43 = icmp sgt i32 %42, 479
  br i1 %43, label %44, label %53

44:                                               ; preds = %40
  %45 = tail call i32 @vp9_noise_estimate_extract_level(%struct.noise_estimate* %32) #8
  switch i32 %45, label %53 [
    i32 3, label %46
    i32 2, label %48
    i32 0, label %50
  ]

46:                                               ; preds = %44
  %47 = mul nsw i64 %31, 3
  br label %53

48:                                               ; preds = %44
  %49 = shl nsw i64 %31, 1
  br label %53

50:                                               ; preds = %44
  %51 = mul nsw i64 %31, 7
  %52 = ashr i64 %51, 3
  br label %53

53:                                               ; preds = %46, %50, %48, %44, %23, %40, %36
  %54 = phi i64 [ %31, %40 ], [ %31, %36 ], [ %31, %23 ], [ %47, %46 ], [ %49, %48 ], [ %52, %50 ], [ %31, %44 ]
  %55 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 9
  %56 = load i32, i32* %55, align 16
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %58, label %80

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %68, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %64 = load i32, i32* %63, align 16
  %65 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 32
  %66 = load i32, i32* %65, align 16
  %67 = icmp slt i32 %64, %66
  br i1 %67, label %80, label %68

68:                                               ; preds = %58, %62
  %69 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 11
  %70 = load i32, i32* %69, align 8
  %71 = icmp sgt i32 %70, 5
  br i1 %71, label %72, label %80

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 8
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %80, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = tail call i64 @vp9_scale_part_thresh(i64 %54, i32 %74, i32 %3, i32 %78) #8
  br label %105

80:                                               ; preds = %72, %62, %68, %53
  %81 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 11
  %82 = load i32, i32* %81, align 8
  %83 = icmp sgt i32 %82, 7
  br i1 %83, label %84, label %99

84:                                               ; preds = %80
  %85 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 3
  %88 = load i32, i32* %87, align 16
  %89 = icmp slt i32 %88, 641
  %90 = icmp slt i32 %86, 481
  %91 = and i1 %90, %89
  br i1 %91, label %92, label %95

92:                                               ; preds = %84
  %93 = mul nsw i64 %54, 5
  %94 = ashr i64 %93, 2
  br label %105

95:                                               ; preds = %84
  switch i32 %3, label %105 [
    i32 5, label %96
    i32 3, label %96
    i32 1, label %96
  ]

96:                                               ; preds = %95, %95, %95
  %97 = mul nsw i64 %54, 5
  %98 = ashr i64 %97, 2
  br label %105

99:                                               ; preds = %80
  %100 = icmp eq i32 %82, 7
  br i1 %100, label %101, label %105

101:                                              ; preds = %99
  switch i32 %3, label %105 [
    i32 5, label %102
    i32 3, label %102
    i32 1, label %102
  ]

102:                                              ; preds = %101, %101, %101
  %103 = mul nsw i64 %54, 5
  %104 = ashr i64 %103, 2
  br label %105

105:                                              ; preds = %102, %101, %99, %96, %95, %92, %76
  %106 = phi i64 [ %79, %76 ], [ %94, %92 ], [ %98, %96 ], [ %104, %102 ], [ %54, %101 ], [ %54, %95 ], [ %54, %99 ]
  store i64 %106, i64* %1, align 8
  %107 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 11
  %108 = load i32, i32* %107, align 8
  %109 = zext i32 %108 to i64
  %110 = shl i64 %106, %109
  %111 = getelementptr inbounds i64, i64* %1, i64 2
  store i64 %110, i64* %111, align 8
  %112 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 3
  %113 = load i32, i32* %112, align 16
  %114 = icmp sgt i32 %113, 1279
  br i1 %114, label %115, label %125

115:                                              ; preds = %105
  %116 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %117 = load i32, i32* %116, align 4
  %118 = icmp sgt i32 %117, 719
  br i1 %118, label %119, label %158

119:                                              ; preds = %115
  %120 = load i32, i32* %107, align 8
  %121 = icmp slt i32 %120, 7
  br i1 %121, label %122, label %158

122:                                              ; preds = %119
  %123 = shl i64 %110, 1
  store i64 %123, i64* %111, align 8
  %124 = load i32, i32* %112, align 16
  br label %125

125:                                              ; preds = %122, %105
  %126 = phi i32 [ %113, %105 ], [ %124, %122 ]
  %127 = icmp slt i32 %126, 353
  br i1 %127, label %128, label %146

128:                                              ; preds = %125
  %129 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %130 = load i32, i32* %129, align 4
  %131 = icmp slt i32 %130, 289
  br i1 %131, label %132, label %151

132:                                              ; preds = %128
  %133 = ashr i64 %106, 3
  store i64 %133, i64* %1, align 8
  %134 = ashr i64 %106, 1
  %135 = getelementptr inbounds i64, i64* %1, i64 1
  store i64 %134, i64* %135, align 8
  %136 = shl i64 %106, 3
  store i64 %136, i64* %111, align 8
  %137 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 31, i64 1
  %138 = load i32, i32* %137, align 4
  %139 = icmp sgt i32 %138, 220
  br i1 %139, label %140, label %142

140:                                              ; preds = %132
  %141 = shl i64 %106, 5
  store i64 %141, i64* %111, align 8
  br label %174

142:                                              ; preds = %132
  %143 = icmp sgt i32 %138, 200
  br i1 %143, label %144, label %174

144:                                              ; preds = %142
  %145 = shl i64 %106, 4
  store i64 %145, i64* %111, align 8
  br label %174

146:                                              ; preds = %125
  %147 = icmp slt i32 %126, 1280
  br i1 %147, label %148, label %158

148:                                              ; preds = %146
  %149 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %150 = load i32, i32* %149, align 4
  br label %151

151:                                              ; preds = %148, %128
  %152 = phi i32 [ %150, %148 ], [ %130, %128 ]
  %153 = icmp slt i32 %152, 720
  br i1 %153, label %154, label %164

154:                                              ; preds = %151
  %155 = mul nsw i64 %106, 5
  %156 = ashr i64 %155, 2
  %157 = getelementptr inbounds i64, i64* %1, i64 1
  store i64 %156, i64* %157, align 8
  br label %174

158:                                              ; preds = %115, %119, %146
  %159 = phi i32 [ %126, %146 ], [ %113, %119 ], [ %113, %115 ]
  %160 = icmp slt i32 %159, 1920
  br i1 %160, label %161, label %170

161:                                              ; preds = %158
  %162 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %163 = load i32, i32* %162, align 4
  br label %164

164:                                              ; preds = %161, %151
  %165 = phi i32 [ %163, %161 ], [ %152, %151 ]
  %166 = icmp slt i32 %165, 1080
  br i1 %166, label %167, label %170

167:                                              ; preds = %164
  %168 = shl i64 %106, 1
  %169 = getelementptr inbounds i64, i64* %1, i64 1
  store i64 %168, i64* %169, align 8
  br label %174

170:                                              ; preds = %164, %158
  %171 = mul nsw i64 %106, 5
  %172 = ashr i64 %171, 1
  %173 = getelementptr inbounds i64, i64* %1, i64 1
  store i64 %172, i64* %173, align 8
  br label %174

174:                                              ; preds = %154, %170, %167, %140, %144, %142
  %175 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 93
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %179, label %178

178:                                              ; preds = %174
  store i64 9223372036854775807, i64* %111, align 8
  br label %179

179:                                              ; preds = %174, %178, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_setup_src_planes(%struct.macroblock* nocapture, %struct.yv12_buffer_config*, i32, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i32 18
  store %struct.yv12_buffer_config* %1, %struct.yv12_buffer_config** %15, align 16
  %16 = shl nsw i32 %3, 3
  %17 = shl nsw i32 %2, 3
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i32 0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i32 0, i64 0, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = ashr i32 %16, %19
  %23 = ashr i32 %17, %21
  %24 = sext i32 %23 to i64
  %25 = sext i32 %12 to i64
  %26 = mul nsw i64 %24, %25
  %27 = sext i32 %22 to i64
  %28 = add nsw i64 %26, %27
  %29 = getelementptr inbounds i8, i8* %6, i64 %28
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 4, i32 0
  store i8* %29, i8** %30, align 8
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 4, i32 1
  store i32 %12, i32* %31, align 8
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i32 0, i64 1, i32 1
  %33 = load i32, i32* %32, align 8
  %34 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i32 0, i64 1, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = ashr i32 %16, %33
  %37 = ashr i32 %17, %35
  %38 = sext i32 %37 to i64
  %39 = sext i32 %14 to i64
  %40 = mul nsw i64 %38, %39
  %41 = sext i32 %36 to i64
  %42 = add nsw i64 %40, %41
  %43 = getelementptr inbounds i8, i8* %8, i64 %42
  %44 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 1, i32 4, i32 0
  store i8* %43, i8** %44, align 8
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 1, i32 4, i32 1
  store i32 %14, i32* %45, align 8
  %46 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i32 0, i64 2, i32 1
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i32 0, i64 2, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = ashr i32 %16, %47
  %51 = ashr i32 %17, %49
  %52 = sext i32 %51 to i64
  %53 = mul nsw i64 %52, %39
  %54 = sext i32 %50 to i64
  %55 = add nsw i64 %53, %54
  %56 = getelementptr inbounds i8, i8* %10, i64 %55
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 2, i32 4, i32 0
  store i8* %56, i8** %57, align 8
  %58 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 2, i32 4, i32 1
  store i32 %14, i32* %58, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_init_tile_data(%struct.VP9_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8
  %3 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 85
  %4 = load i32, i32* %3, align 8
  %5 = shl i32 1, %4
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 86
  %7 = load i32, i32* %6, align 4
  %8 = shl i32 1, %7
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 55, i64 0, i64 0
  %10 = load %struct.TOKENEXTRA*, %struct.TOKENEXTRA** %9, align 16
  %11 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 56, i64 0, i64 0
  %12 = load %struct.TOKENLIST*, %struct.TOKENLIST** %11, align 16
  %13 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 32
  %14 = load %struct.TileDataEnc*, %struct.TileDataEnc** %13, align 16
  %15 = icmp eq %struct.TileDataEnc* %14, null
  br i1 %15, label %16, label %18

16:                                               ; preds = %1
  %17 = shl i32 %8, %4
  br label %25

18:                                               ; preds = %1
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 33
  %20 = load i32, i32* %19, align 8
  %21 = shl i32 %8, %4
  %22 = icmp slt i32 %20, %21
  br i1 %22, label %23, label %118

23:                                               ; preds = %18
  %24 = bitcast %struct.TileDataEnc* %14 to i8*
  tail call void @vpx_free(i8* nonnull %24) #8
  br label %25

25:                                               ; preds = %16, %23
  %26 = phi i32 [ %17, %16 ], [ %21, %23 ]
  %27 = sext i32 %26 to i64
  %28 = mul nsw i64 %27, 2144
  %29 = tail call i8* @vpx_malloc(i64 %28) #8
  %30 = bitcast %struct.TileDataEnc** %13 to i8**
  store i8* %29, i8** %30, align 16
  %31 = icmp eq i8* %29, null
  br i1 %31, label %32, label %34

32:                                               ; preds = %25
  %33 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %33, i32 2, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0)) #8
  br label %34

34:                                               ; preds = %25, %32
  %35 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 33
  store i32 %26, i32* %35, align 8
  %36 = icmp eq i32 %7, 31
  br i1 %36, label %195, label %37

37:                                               ; preds = %34
  %38 = icmp eq i32 %4, 31
  %39 = sext i32 %5 to i64
  br label %40

40:                                               ; preds = %37, %115
  %41 = phi i32 [ 0, %37 ], [ %116, %115 ]
  br i1 %38, label %115, label %42

42:                                               ; preds = %40
  %43 = shl i32 %41, %4
  %44 = sext i32 %43 to i64
  br label %45

45:                                               ; preds = %42, %111
  %46 = phi i64 [ 0, %42 ], [ %113, %111 ]
  %47 = add i64 %46, %44
  %48 = load %struct.TileDataEnc*, %struct.TileDataEnc** %13, align 16
  %49 = add nsw i64 %46, %44
  br label %50

50:                                               ; preds = %108, %45
  %51 = phi i64 [ 0, %45 ], [ %109, %108 ]
  %52 = add nuw i64 %51, 1
  %53 = getelementptr %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %47, i32 2, i64 %52, i64 0
  %54 = getelementptr %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %47, i32 2, i64 %51, i64 0
  %55 = getelementptr %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %47, i32 1, i64 %52, i64 0
  %56 = bitcast i32* %55 to i8*
  %57 = getelementptr %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %47, i32 1, i64 %51, i64 0
  %58 = bitcast i32* %57 to i8*
  %59 = icmp ugt i8* %53, %58
  %60 = icmp ult i8* %54, %56
  %61 = and i1 %59, %60
  br i1 %61, label %91, label %62

62:                                               ; preds = %50
  %63 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 1, i64 %51, i64 0
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> <i32 32, i32 32, i32 32, i32 32>, <4 x i32>* %64, align 4, !alias.scope !2, !noalias !5
  %65 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 2, i64 %51, i64 0
  %66 = bitcast i8* %65 to <4 x i8>*
  store <4 x i8> <i8 0, i8 1, i8 2, i8 3>, <4 x i8>* %66, align 1, !alias.scope !5
  %67 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 1, i64 %51, i64 4
  %68 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> <i32 32, i32 32, i32 32, i32 32>, <4 x i32>* %68, align 4, !alias.scope !2, !noalias !5
  %69 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 2, i64 %51, i64 4
  %70 = bitcast i8* %69 to <4 x i8>*
  store <4 x i8> <i8 4, i8 5, i8 6, i8 7>, <4 x i8>* %70, align 1, !alias.scope !5
  %71 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 1, i64 %51, i64 8
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> <i32 32, i32 32, i32 32, i32 32>, <4 x i32>* %72, align 4, !alias.scope !2, !noalias !5
  %73 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 2, i64 %51, i64 8
  %74 = bitcast i8* %73 to <4 x i8>*
  store <4 x i8> <i8 8, i8 9, i8 10, i8 11>, <4 x i8>* %74, align 1, !alias.scope !5
  %75 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 1, i64 %51, i64 12
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> <i32 32, i32 32, i32 32, i32 32>, <4 x i32>* %76, align 4, !alias.scope !2, !noalias !5
  %77 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 2, i64 %51, i64 12
  %78 = bitcast i8* %77 to <4 x i8>*
  store <4 x i8> <i8 12, i8 13, i8 14, i8 15>, <4 x i8>* %78, align 1, !alias.scope !5
  %79 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 1, i64 %51, i64 16
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> <i32 32, i32 32, i32 32, i32 32>, <4 x i32>* %80, align 4, !alias.scope !2, !noalias !5
  %81 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 2, i64 %51, i64 16
  %82 = bitcast i8* %81 to <4 x i8>*
  store <4 x i8> <i8 16, i8 17, i8 18, i8 19>, <4 x i8>* %82, align 1, !alias.scope !5
  %83 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 1, i64 %51, i64 20
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> <i32 32, i32 32, i32 32, i32 32>, <4 x i32>* %84, align 4, !alias.scope !2, !noalias !5
  %85 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 2, i64 %51, i64 20
  %86 = bitcast i8* %85 to <4 x i8>*
  store <4 x i8> <i8 20, i8 21, i8 22, i8 23>, <4 x i8>* %86, align 1, !alias.scope !5
  %87 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 1, i64 %51, i64 24
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> <i32 32, i32 32, i32 32, i32 32>, <4 x i32>* %88, align 4, !alias.scope !2, !noalias !5
  %89 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 2, i64 %51, i64 24
  %90 = bitcast i8* %89 to <4 x i8>*
  store <4 x i8> <i8 24, i8 25, i8 26, i8 27>, <4 x i8>* %90, align 1, !alias.scope !5
  br label %91

91:                                               ; preds = %62, %50
  %92 = phi i64 [ 0, %50 ], [ 28, %62 ]
  %93 = phi i32 [ 0, %50 ], [ 28, %62 ]
  br label %94

94:                                               ; preds = %94, %91
  %95 = phi i64 [ %92, %91 ], [ %105, %94 ]
  %96 = phi i32 [ %93, %91 ], [ %106, %94 ]
  %97 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 1, i64 %51, i64 %95
  store i32 32, i32* %97, align 4
  %98 = trunc i32 %96 to i8
  %99 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 2, i64 %51, i64 %95
  store i8 %98, i8* %99, align 1
  %100 = or i64 %95, 1
  %101 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 1, i64 %51, i64 %100
  store i32 32, i32* %101, align 4
  %102 = trunc i32 %96 to i8
  %103 = or i8 %102, 1
  %104 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 2, i64 %51, i64 %100
  store i8 %103, i8* %104, align 1
  %105 = add nuw nsw i64 %95, 2
  %106 = add nuw nsw i32 %96, 2
  %107 = icmp eq i64 %105, 30
  br i1 %107, label %108, label %94, !llvm.loop !7

108:                                              ; preds = %94
  %109 = add nuw nsw i64 %51, 1
  %110 = icmp eq i64 %109, 13
  br i1 %110, label %111, label %50

111:                                              ; preds = %108
  %112 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %48, i64 %49, i32 5
  store i32* null, i32** %112, align 8
  %113 = add nuw nsw i64 %46, 1
  %114 = icmp slt i64 %113, %39
  br i1 %114, label %45, label %115

115:                                              ; preds = %111, %40
  %116 = add nuw nsw i32 %41, 1
  %117 = icmp slt i32 %116, %8
  br i1 %117, label %40, label %118

118:                                              ; preds = %115, %18
  %119 = icmp eq i32 %7, 31
  br i1 %119, label %195, label %120

120:                                              ; preds = %118
  %121 = icmp eq i32 %4, 31
  %122 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 7
  %123 = sext i32 %5 to i64
  %124 = sext i32 %8 to i64
  br label %125

125:                                              ; preds = %120, %188
  %126 = phi i64 [ 0, %120 ], [ %193, %188 ]
  %127 = phi i32 [ 0, %120 ], [ %192, %188 ]
  %128 = phi i32 [ 0, %120 ], [ %191, %188 ]
  %129 = phi %struct.TOKENLIST* [ %12, %120 ], [ %190, %188 ]
  %130 = phi %struct.TOKENEXTRA* [ %10, %120 ], [ %189, %188 ]
  br i1 %121, label %188, label %131

131:                                              ; preds = %125
  %132 = trunc i64 %126 to i32
  %133 = shl i32 %132, %4
  %134 = sext i32 %133 to i64
  br label %135

135:                                              ; preds = %131, %152
  %136 = phi i64 [ 0, %131 ], [ %186, %152 ]
  %137 = phi i32 [ %127, %131 ], [ %185, %152 ]
  %138 = phi i32 [ %128, %131 ], [ %175, %152 ]
  %139 = phi %struct.TOKENLIST* [ %129, %131 ], [ %177, %152 ]
  %140 = phi %struct.TOKENEXTRA* [ %130, %131 ], [ %155, %152 ]
  %141 = load %struct.TileDataEnc*, %struct.TileDataEnc** %13, align 16
  %142 = add nsw i64 %136, %134
  %143 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %141, i64 %142
  %144 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %143, i64 0, i32 0
  %145 = load i32, i32* %122, align 4
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %152, label %147

147:                                              ; preds = %135
  %148 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %141, i64 %142, i32 5
  %149 = load i32*, i32** %148, align 8
  %150 = icmp eq i32* %149, null
  br i1 %150, label %151, label %152

151:                                              ; preds = %147
  tail call void @vp9_row_mt_alloc_rd_thresh(%struct.VP9_COMP* %0, %struct.TileDataEnc* %143) #8
  br label %152

152:                                              ; preds = %135, %151, %147
  %153 = trunc i64 %136 to i32
  tail call void @vp9_tile_init(%struct.TileInfo* %144, %struct.VP9Common* %2, i32 %132, i32 %153) #8
  %154 = sext i32 %138 to i64
  %155 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %140, i64 %154
  %156 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 55, i64 %126, i64 %136
  store %struct.TOKENEXTRA* %155, %struct.TOKENEXTRA** %156, align 8
  %157 = bitcast %struct.TileDataEnc* %143 to i64*
  %158 = load i64, i64* %157, align 4
  %159 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %141, i64 %142, i32 0, i32 2
  %160 = bitcast i32* %159 to i64*
  %161 = load i64, i64* %160, align 4
  %162 = trunc i64 %158 to i32
  %163 = lshr i64 %158, 32
  %164 = trunc i64 %163 to i32
  %165 = trunc i64 %161 to i32
  %166 = lshr i64 %161, 32
  %167 = trunc i64 %166 to i32
  %168 = sub i32 1, %162
  %169 = add i32 %168, %164
  %170 = ashr i32 %169, 1
  %171 = sub i32 1, %165
  %172 = add i32 %171, %167
  %173 = ashr i32 %172, 1
  %174 = mul i32 %170, 772
  %175 = mul i32 %174, %173
  %176 = sext i32 %137 to i64
  %177 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %139, i64 %176
  %178 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 56, i64 %126, i64 %136
  store %struct.TOKENLIST* %177, %struct.TOKENLIST** %178, align 8
  %179 = load i64, i64* %157, align 4
  %180 = trunc i64 %179 to i32
  %181 = lshr i64 %179, 32
  %182 = trunc i64 %181 to i32
  %183 = sub i32 7, %180
  %184 = add i32 %183, %182
  %185 = ashr i32 %184, 3
  %186 = add nuw nsw i64 %136, 1
  %187 = icmp slt i64 %186, %123
  br i1 %187, label %135, label %188

188:                                              ; preds = %152, %125
  %189 = phi %struct.TOKENEXTRA* [ %130, %125 ], [ %155, %152 ]
  %190 = phi %struct.TOKENLIST* [ %129, %125 ], [ %177, %152 ]
  %191 = phi i32 [ %128, %125 ], [ %175, %152 ]
  %192 = phi i32 [ %127, %125 ], [ %185, %152 ]
  %193 = add nuw nsw i64 %126, 1
  %194 = icmp slt i64 %193, %124
  br i1 %194, label %125, label %195

195:                                              ; preds = %188, %34, %118
  ret void
}

declare void @vpx_free(i8*) local_unnamed_addr #2

declare i8* @vpx_malloc(i64) local_unnamed_addr #2

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #2

declare void @vp9_row_mt_alloc_rd_thresh(%struct.VP9_COMP*, %struct.TileDataEnc*) local_unnamed_addr #2

declare void @vp9_tile_init(%struct.TileInfo*, %struct.VP9Common*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_encode_sb_row(%struct.VP9_COMP*, %struct.ThreadData*, i32, i32, i32) local_unnamed_addr #0 {
  %6 = alloca [4 x %struct.diff], align 16
  %7 = alloca i32, align 4
  %8 = alloca %struct.RD_COST, align 8
  %9 = alloca %struct.TOKENEXTRA*, align 8
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 85
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 32
  %13 = load %struct.TileDataEnc*, %struct.TileDataEnc** %12, align 16
  %14 = shl i32 %2, %11
  %15 = add nsw i32 %14, %3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %13, i64 %16
  %18 = bitcast %struct.TOKENEXTRA** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #8
  store %struct.TOKENEXTRA* null, %struct.TOKENEXTRA** %9, align 8
  %19 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %17, i64 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = add i32 %4, 7
  %22 = sub i32 %21, %20
  %23 = ashr i32 %22, 3
  %24 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %13, i64 %16, i32 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %13, i64 %16, i32 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = add i32 %25, 1
  %29 = sub i32 %28, %27
  %30 = ashr i32 %29, 1
  %31 = sub nsw i32 %4, %20
  %32 = ashr i32 %31, 1
  %33 = sext i32 %2 to i64
  %34 = sext i32 %3 to i64
  %35 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 55, i64 %33, i64 %34
  %36 = load %struct.TOKENEXTRA*, %struct.TOKENEXTRA** %35, align 8
  %37 = mul i32 %30, 772
  %38 = mul i32 %37, %32
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %36, i64 %39
  store %struct.TOKENEXTRA* %40, %struct.TOKENEXTRA** %9, align 8
  %41 = bitcast %struct.TOKENEXTRA** %9 to i64*
  %42 = ptrtoint %struct.TOKENEXTRA* %40 to i64
  %43 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 56, i64 %33, i64 %34
  %44 = load %struct.TOKENLIST*, %struct.TOKENLIST** %43, align 8
  %45 = sext i32 %23 to i64
  %46 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %44, i64 %45
  %47 = bitcast %struct.TOKENLIST* %46 to i64*
  store i64 %42, i64* %47, align 8
  %48 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 61
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %1054, label %51

51:                                               ; preds = %5
  %52 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %17, i64 0, i32 0
  %53 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0
  %54 = load i32, i32* %26, align 4
  %55 = load i32, i32* %24, align 4
  %56 = ashr i32 %4, 3
  %57 = bitcast i32* %26 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = trunc i64 %58 to i32
  %60 = lshr i64 %58, 32
  %61 = trunc i64 %60 to i32
  %62 = sub i32 7, %59
  %63 = add i32 %62, %61
  %64 = ashr i32 %63, 3
  %65 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 20, i64 0, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %65, i8 0, i64 48, i1 false) #8
  %66 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 22, i64 0
  %67 = bitcast i8* %66 to i64*
  store i64 0, i64* %67, align 8
  %68 = icmp slt i32 %54, %55
  br i1 %68, label %69, label %1054

69:                                               ; preds = %51
  %70 = bitcast %struct.RD_COST* %8 to i8*
  %71 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 36
  %72 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %73 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 24
  %74 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 143
  %75 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %13, i64 %16, i32 4
  %76 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 126
  %77 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 23
  %78 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 50, i64 0
  %79 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 60
  %80 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 59
  %81 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 55
  %82 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 56
  %83 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 57
  %84 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 58
  %85 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 62
  %86 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 63
  %87 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 0
  %88 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 1
  %89 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 81
  %90 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 60
  %91 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %92 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 12), align 1
  %93 = zext i8 %92 to i32
  %94 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 12), align 1
  %95 = zext i8 %94 to i32
  %96 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %97 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 155
  %98 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 84
  %99 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 12
  %100 = bitcast i32* %7 to i8*
  %101 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 13
  %102 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 11
  %103 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 12, i32 0
  %104 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 62
  %105 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 20
  %106 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 154
  %107 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 86
  %108 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 24
  %109 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 87
  %110 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 41
  %111 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 42
  %112 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 25
  %113 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %13, i64 %16, i32 0, i32 1
  %114 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %115 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 5
  %116 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 18
  %117 = shl nsw i32 %4, 3
  %118 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 0, i64 0, i32 1
  %119 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 0, i64 0, i32 2
  %120 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 0, i64 0, i32 4, i32 0
  %121 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 0, i64 0, i32 4, i32 1
  %122 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 0, i64 1, i32 1
  %123 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 0, i64 1, i32 2
  %124 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 0, i64 1, i32 4, i32 0
  %125 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 0, i64 1, i32 4, i32 1
  %126 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 0, i64 2, i32 1
  %127 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 0, i64 2, i32 2
  %128 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 0, i64 2, i32 4, i32 0
  %129 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 0, i64 2, i32 4, i32 1
  %130 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 6), align 1
  %131 = zext i8 %130 to i32
  %132 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 6), align 1
  %133 = zext i8 %132 to i32
  %134 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 3), align 1
  %135 = zext i8 %134 to i32
  %136 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 3), align 1
  %137 = zext i8 %136 to i32
  %138 = bitcast [4 x %struct.diff]* %6 to i8*
  %139 = ashr i32 %4, 1
  %140 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 34
  %141 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 106
  %142 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 105
  %143 = getelementptr inbounds [4 x %struct.diff], [4 x %struct.diff]* %6, i64 0, i64 0, i32 2
  %144 = getelementptr inbounds [4 x %struct.diff], [4 x %struct.diff]* %6, i64 0, i64 1, i32 2
  %145 = getelementptr inbounds [4 x %struct.diff], [4 x %struct.diff]* %6, i64 0, i64 2, i32 2
  %146 = getelementptr inbounds [4 x %struct.diff], [4 x %struct.diff]* %6, i64 0, i64 3, i32 2
  %147 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %148 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %149 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1
  %150 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 6
  %151 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 36
  %152 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 89
  %153 = add nsw i32 %4, 4
  %154 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %155 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 16
  %156 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %157 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 20
  %158 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 37
  %159 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 11
  %160 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 74
  %161 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 1, i32 2
  %162 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 0, i64 0, i32 4, i64 0, i32 0
  %163 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 0, i64 0, i32 4, i64 0, i32 1
  %164 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 19
  %165 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 38
  %166 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 2, i32 2
  %167 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 0, i32 2
  %168 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 79
  %169 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 49, i64 1
  %170 = bitcast %struct.mv* %169 to i32*
  %171 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 17, i64 0
  %172 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 17, i64 1
  %173 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 68, i64 0
  %174 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 0, i64 0, i32 3, i32 0
  %175 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 0, i64 0, i32 3, i32 1
  %176 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 23
  %177 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 20
  %178 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 19
  %179 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 71
  %180 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 3
  %181 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %182 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 69
  %183 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 88
  %184 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 157
  %185 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 158
  %186 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 144
  %187 = sext i32 %54 to i64
  %188 = sext i32 %55 to i64
  %189 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 49, i64 0, i32 0
  %190 = bitcast i32* %81 to i8*
  %191 = bitcast i16* %189 to <8 x i16>*
  br label %192

192:                                              ; preds = %1049, %69
  %193 = phi i64 [ %187, %69 ], [ %1051, %1049 ]
  %194 = phi i32 [ 0, %69 ], [ %1052, %1049 ]
  %195 = shl i32 %194, 3
  %196 = add i32 %54, %195
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %70, i8 -86, i64 24, i1 false) #8
  %197 = load i32, i32* %71, align 4
  %198 = mul nsw i32 %197, %4
  %199 = trunc i64 %193 to i32
  %200 = add nsw i32 %198, %199
  %201 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %72, align 8
  %202 = sext i32 %200 to i64
  %203 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %201, i64 %202
  %204 = load i32, i32* %73, align 8
  %205 = load void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32)** %74, align 16
  call void %205(%struct.VP9RowMTSyncData* %75, i32 %56, i32 %194) #8
  %206 = load i32, i32* %76, align 16
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %209, label %208

208:                                              ; preds = %192
  call void @vp9_compute_skin_sb(%struct.VP9_COMP* %0, i8 zeroext 6, i32 %4, i32 %199) #8
  br label %209

209:                                              ; preds = %208, %192
  store i32 -1, i32* %77, align 16
  store <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, <8 x i16>* %191, align 4
  call void @vp9_rd_cost_init(%struct.RD_COST* nonnull %8) #8
  store i8 0, i8* %85, align 2
  store i8 0, i8* %86, align 1
  call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 5, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* align 16 %190, i8 0, i64 21, i1 false) #8
  %210 = load i8, i8* %87, align 4
  %211 = icmp eq i8 %210, 0
  br i1 %211, label %362, label %212

212:                                              ; preds = %209
  %213 = load i8, i8* %88, align 1
  %214 = icmp eq i8 %213, 0
  %215 = select i1 %214, i8** %90, i8** %89
  %216 = load i8*, i8** %215, align 8
  %217 = load i32, i32* %91, align 8
  %218 = sub nsw i32 %217, %199
  %219 = icmp slt i32 %218, %93
  %220 = select i1 %219, i32 %218, i32 %93
  %221 = load i32, i32* %96, align 16
  %222 = sub nsw i32 %221, %4
  %223 = icmp slt i32 %222, %95
  %224 = select i1 %223, i32 %222, i32 %95
  %225 = icmp sgt i32 %224, 0
  br i1 %225, label %226, label %353

226:                                              ; preds = %212
  %227 = icmp sgt i32 %220, 0
  %228 = sext i32 %220 to i64
  %229 = add nsw i64 %228, -1
  %230 = mul i32 %217, %4
  %231 = add i32 %196, %230
  %232 = add nsw i64 %228, -8
  %233 = lshr i64 %232, 3
  %234 = add nuw nsw i64 %233, 1
  %235 = icmp ult i32 %220, 8
  %236 = trunc i64 %229 to i32
  %237 = icmp ugt i64 %229, 4294967295
  %238 = and i64 %228, -8
  %239 = and i64 %234, 1
  %240 = icmp eq i64 %233, 0
  %241 = sub nuw nsw i64 %234, %239
  %242 = icmp eq i64 %239, 0
  %243 = icmp eq i64 %238, %228
  br label %244

244:                                              ; preds = %349, %226
  %245 = phi i32 [ 8, %226 ], [ %350, %349 ]
  %246 = phi i32 [ 0, %226 ], [ %351, %349 ]
  %247 = mul i32 %217, %246
  %248 = add i32 %231, %247
  br i1 %227, label %249, label %349

249:                                              ; preds = %244
  %250 = add i32 %246, %4
  %251 = mul i32 %250, %217
  %252 = add i32 %251, %199
  br i1 %235, label %333, label %253

253:                                              ; preds = %249
  %254 = add i32 %248, %236
  %255 = icmp slt i32 %254, %248
  %256 = or i1 %255, %237
  br i1 %256, label %333, label %257

257:                                              ; preds = %253
  %258 = insertelement <4 x i32> undef, i32 %245, i32 0
  %259 = shufflevector <4 x i32> %258, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %240, label %299, label %260

260:                                              ; preds = %257, %260
  %261 = phi i64 [ %296, %260 ], [ 0, %257 ]
  %262 = phi <4 x i32> [ %294, %260 ], [ %259, %257 ]
  %263 = phi <4 x i32> [ %295, %260 ], [ %259, %257 ]
  %264 = phi i64 [ %297, %260 ], [ %241, %257 ]
  %265 = trunc i64 %261 to i32
  %266 = add i32 %252, %265
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds i8, i8* %216, i64 %267
  %269 = bitcast i8* %268 to <4 x i8>*
  %270 = load <4 x i8>, <4 x i8>* %269, align 1
  %271 = getelementptr inbounds i8, i8* %268, i64 4
  %272 = bitcast i8* %271 to <4 x i8>*
  %273 = load <4 x i8>, <4 x i8>* %272, align 1
  %274 = zext <4 x i8> %270 to <4 x i32>
  %275 = zext <4 x i8> %273 to <4 x i32>
  %276 = icmp slt <4 x i32> %262, %274
  %277 = icmp slt <4 x i32> %263, %275
  %278 = select <4 x i1> %276, <4 x i32> %262, <4 x i32> %274
  %279 = select <4 x i1> %277, <4 x i32> %263, <4 x i32> %275
  %280 = trunc i64 %261 to i32
  %281 = or i32 %280, 8
  %282 = add i32 %252, %281
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds i8, i8* %216, i64 %283
  %285 = bitcast i8* %284 to <4 x i8>*
  %286 = load <4 x i8>, <4 x i8>* %285, align 1
  %287 = getelementptr inbounds i8, i8* %284, i64 4
  %288 = bitcast i8* %287 to <4 x i8>*
  %289 = load <4 x i8>, <4 x i8>* %288, align 1
  %290 = zext <4 x i8> %286 to <4 x i32>
  %291 = zext <4 x i8> %289 to <4 x i32>
  %292 = icmp slt <4 x i32> %278, %290
  %293 = icmp slt <4 x i32> %279, %291
  %294 = select <4 x i1> %292, <4 x i32> %278, <4 x i32> %290
  %295 = select <4 x i1> %293, <4 x i32> %279, <4 x i32> %291
  %296 = add i64 %261, 16
  %297 = add i64 %264, -2
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %299, label %260, !llvm.loop !9

299:                                              ; preds = %260, %257
  %300 = phi <4 x i32> [ undef, %257 ], [ %294, %260 ]
  %301 = phi <4 x i32> [ undef, %257 ], [ %295, %260 ]
  %302 = phi i64 [ 0, %257 ], [ %296, %260 ]
  %303 = phi <4 x i32> [ %259, %257 ], [ %294, %260 ]
  %304 = phi <4 x i32> [ %259, %257 ], [ %295, %260 ]
  br i1 %242, label %321, label %305

305:                                              ; preds = %299
  %306 = trunc i64 %302 to i32
  %307 = add i32 %252, %306
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds i8, i8* %216, i64 %308
  %310 = bitcast i8* %309 to <4 x i8>*
  %311 = load <4 x i8>, <4 x i8>* %310, align 1
  %312 = getelementptr inbounds i8, i8* %309, i64 4
  %313 = bitcast i8* %312 to <4 x i8>*
  %314 = load <4 x i8>, <4 x i8>* %313, align 1
  %315 = zext <4 x i8> %311 to <4 x i32>
  %316 = zext <4 x i8> %314 to <4 x i32>
  %317 = icmp slt <4 x i32> %304, %316
  %318 = select <4 x i1> %317, <4 x i32> %304, <4 x i32> %316
  %319 = icmp slt <4 x i32> %303, %315
  %320 = select <4 x i1> %319, <4 x i32> %303, <4 x i32> %315
  br label %321

321:                                              ; preds = %299, %305
  %322 = phi <4 x i32> [ %300, %299 ], [ %320, %305 ]
  %323 = phi <4 x i32> [ %301, %299 ], [ %318, %305 ]
  %324 = icmp slt <4 x i32> %322, %323
  %325 = select <4 x i1> %324, <4 x i32> %322, <4 x i32> %323
  %326 = shufflevector <4 x i32> %325, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %327 = icmp slt <4 x i32> %325, %326
  %328 = select <4 x i1> %327, <4 x i32> %325, <4 x i32> %326
  %329 = shufflevector <4 x i32> %328, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %330 = icmp slt <4 x i32> %328, %329
  %331 = select <4 x i1> %330, <4 x i32> %328, <4 x i32> %329
  %332 = extractelement <4 x i32> %331, i32 0
  br i1 %243, label %349, label %333

333:                                              ; preds = %321, %253, %249
  %334 = phi i64 [ 0, %253 ], [ 0, %249 ], [ %238, %321 ]
  %335 = phi i32 [ %245, %253 ], [ %245, %249 ], [ %332, %321 ]
  br label %336

336:                                              ; preds = %333, %336
  %337 = phi i64 [ %347, %336 ], [ %334, %333 ]
  %338 = phi i32 [ %346, %336 ], [ %335, %333 ]
  %339 = trunc i64 %337 to i32
  %340 = add i32 %252, %339
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds i8, i8* %216, i64 %341
  %343 = load i8, i8* %342, align 1
  %344 = zext i8 %343 to i32
  %345 = icmp slt i32 %338, %344
  %346 = select i1 %345, i32 %338, i32 %344
  %347 = add nuw nsw i64 %337, 1
  %348 = icmp slt i64 %347, %228
  br i1 %348, label %336, label %349, !llvm.loop !10

349:                                              ; preds = %336, %321, %244
  %350 = phi i32 [ %245, %244 ], [ %332, %321 ], [ %346, %336 ]
  %351 = add nuw nsw i32 %246, 1
  %352 = icmp slt i32 %351, %224
  br i1 %352, label %244, label %353

353:                                              ; preds = %349, %212
  %354 = phi i32 [ 8, %212 ], [ %350, %349 ]
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %355
  %357 = load i32, i32* %356, align 4
  %358 = lshr i32 %357, 3
  %359 = and i32 %358, 1
  %360 = icmp eq i32 %359, 0
  %361 = select i1 %360, i32 %204, i32 1
  br label %362

362:                                              ; preds = %353, %209
  %363 = phi i32 [ %361, %353 ], [ %204, %209 ]
  %364 = phi i32 [ %359, %353 ], [ 0, %209 ]
  %365 = load i32, i32* %97, align 16
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %458, label %367

367:                                              ; preds = %362
  %368 = load i32, i32* %98, align 8
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %458, label %370

370:                                              ; preds = %367
  %371 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %99, align 8
  %372 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %371, i64 0, i32 4
  %373 = load i32, i32* %372, align 8
  %374 = load i32, i32* %91, align 8
  %375 = add nsw i32 %374, 7
  %376 = ashr i32 %375, 3
  %377 = mul nsw i32 %376, %56
  %378 = ashr i32 %199, 3
  %379 = add nsw i32 %377, %378
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %100) #8
  store i32 -1431655766, i32* %7, align 4
  %380 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %101, align 16
  %381 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %380, i64 0, i32 4
  %382 = load i32, i32* %381, align 8
  %383 = load i32, i32* %102, align 16
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %385, label %438

385:                                              ; preds = %370
  %386 = mul i32 %373, %4
  %387 = add i32 %386, %199
  %388 = shl i32 %387, 3
  %389 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %380, i64 0, i32 13
  %390 = load i8*, i8** %389, align 8
  %391 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %371, i64 0, i32 13
  %392 = load i8*, i8** %391, align 8
  %393 = sext i32 %388 to i64
  %394 = getelementptr inbounds i8, i8* %392, i64 %393
  %395 = getelementptr inbounds i8, i8* %390, i64 %393
  %396 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %103, align 16
  %397 = call i32 %396(i8* %394, i32 %373, i8* %395, i32 %382) #8
  %398 = zext i32 %397 to i64
  %399 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_variance64x64, align 8
  %400 = call i32 %399(i8* %394, i32 %373, i8* %395, i32 %382, i32* nonnull %7) #8
  %401 = icmp ult i32 %397, 10000
  %402 = load i32, i32* %7, align 4
  %403 = sub i32 %402, %400
  %404 = icmp ult i32 %403, 25
  %405 = select i1 %404, i8 3, i8 4
  %406 = select i1 %404, i8 1, i8 2
  %407 = select i1 %401, i8 %406, i8 %405
  store i8 %407, i8* %79, align 4
  %408 = load i32, i32* %104, align 4
  %409 = icmp eq i32 %408, 1
  br i1 %409, label %418, label %410

410:                                              ; preds = %385
  %411 = load i32, i32* %105, align 4
  %412 = icmp eq i32 %411, 1
  br i1 %412, label %413, label %418

413:                                              ; preds = %410
  %414 = lshr i32 %402, 3
  %415 = icmp ult i32 %400, %414
  %416 = icmp ugt i32 %403, 10000
  %417 = and i1 %415, %416
  br i1 %417, label %420, label %418

418:                                              ; preds = %413, %410, %385
  %419 = icmp ugt i32 %397, 20000
  br i1 %419, label %420, label %422

420:                                              ; preds = %418, %413
  %421 = phi i8 [ 5, %413 ], [ 6, %418 ]
  store i8 %421, i8* %79, align 4
  br label %422

422:                                              ; preds = %420, %418
  %423 = load i8*, i8** %106, align 8
  %424 = icmp eq i8* %423, null
  br i1 %424, label %435, label %425

425:                                              ; preds = %422
  %426 = icmp ult i32 %397, 12000
  %427 = sext i32 %379 to i64
  %428 = getelementptr inbounds i8, i8* %423, i64 %427
  br i1 %426, label %429, label %434

429:                                              ; preds = %425
  %430 = load i8, i8* %428, align 1
  %431 = icmp eq i8 %430, -1
  br i1 %431, label %435, label %432

432:                                              ; preds = %429
  %433 = add nuw i8 %430, 1
  store i8 %433, i8* %428, align 1
  br label %435

434:                                              ; preds = %425
  store i8 0, i8* %428, align 1
  br label %438

435:                                              ; preds = %432, %429, %422
  %436 = icmp eq i32 %397, 0
  br i1 %436, label %437, label %438

437:                                              ; preds = %435
  store i32 1, i32* %80, align 16
  br label %438

438:                                              ; preds = %437, %435, %434, %370
  %439 = phi i64 [ 0, %370 ], [ 0, %437 ], [ %398, %435 ], [ %398, %434 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %100) #8
  %440 = load i32, i32* %107, align 8
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %458, label %442

442:                                              ; preds = %438
  %443 = load i32, i32* %105, align 4
  %444 = icmp eq i32 %443, 0
  br i1 %444, label %445, label %458

445:                                              ; preds = %442
  %446 = load i32, i32* %108, align 4
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %448, label %458

448:                                              ; preds = %445
  %449 = load i32, i32* %109, align 4
  %450 = sext i32 %449 to i64
  %451 = icmp sgt i64 %439, %450
  br i1 %451, label %452, label %458

452:                                              ; preds = %448
  %453 = load i32, i32* %110, align 4
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %455, label %971

455:                                              ; preds = %452
  %456 = load i32, i32* %111, align 16
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %458, label %971

458:                                              ; preds = %455, %448, %445, %442, %438, %367, %362
  switch i32 %363, label %971 [
    i32 3, label %459
    i32 5, label %461
    i32 4, label %615
    i32 1, label %873
  ]

459:                                              ; preds = %458
  call fastcc void @choose_partitioning(%struct.VP9_COMP* %0, %struct.TileInfo* %52, %struct.macroblock* %53, i32 %4, i32 %199) #8
  %460 = load %struct.PC_TREE*, %struct.PC_TREE** %115, align 16
  call fastcc void @nonrd_use_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %17, %struct.MODE_INFO** %203, %struct.TOKENEXTRA** nonnull %9, i32 %4, i32 %199, i8 zeroext 12, %struct.RD_COST* nonnull %8, %struct.PC_TREE* %460) #8
  br label %1014

461:                                              ; preds = %458
  %462 = load i32, i32* %147, align 4
  %463 = icmp eq i32 %462, 0
  br i1 %463, label %464, label %465

464:                                              ; preds = %461
  call fastcc void @set_offsets(%struct.VP9_COMP* %0, %struct.TileInfo* %52, %struct.macroblock* %53, i32 %4, i32 %199, i8 zeroext 12) #8
  br label %608

465:                                              ; preds = %461
  %466 = load i8, i8* %148, align 4
  %467 = icmp eq i8 %466, 0
  call fastcc void @set_offsets(%struct.VP9_COMP* %0, %struct.TileInfo* %52, %struct.macroblock* %53, i32 %4, i32 %199, i8 zeroext 12) #8
  br i1 %467, label %468, label %608

468:                                              ; preds = %465
  %469 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %150, align 8
  %470 = load %struct.MODE_INFO*, %struct.MODE_INFO** %469, align 8
  %471 = load i32, i32* %151, align 4
  %472 = icmp eq i32 %471, -1
  br i1 %472, label %482, label %473

473:                                              ; preds = %468
  %474 = sext i32 %471 to i64
  %475 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 15, i64 %474
  %476 = load i32, i32* %475, align 4
  %477 = icmp eq i32 %476, -1
  br i1 %477, label %482, label %478

478:                                              ; preds = %473
  %479 = load %struct.BufferPool*, %struct.BufferPool** %152, align 8
  %480 = sext i32 %476 to i64
  %481 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %479, i64 0, i32 3, i64 %480, i32 8
  br label %482

482:                                              ; preds = %478, %473, %468
  %483 = phi %struct.yv12_buffer_config* [ %481, %478 ], [ null, %473 ], [ null, %468 ]
  %484 = add nsw i64 %193, 4
  %485 = load i32, i32* %91, align 8
  %486 = sext i32 %485 to i64
  %487 = icmp slt i64 %484, %486
  %488 = zext i1 %487 to i8
  %489 = shl nuw nsw i8 %488, 1
  %490 = or i8 %489, 9
  %491 = load i32, i32* %96, align 16
  %492 = icmp slt i32 %153, %491
  %493 = zext i1 %492 to i8
  %494 = add nuw nsw i8 %490, %493
  %495 = load i32, i32* %154, align 4
  %496 = icmp eq i32 %495, 0
  br i1 %496, label %506, label %497

497:                                              ; preds = %482
  %498 = load i32, i32* %155, align 4
  %499 = icmp eq i32 %498, 0
  br i1 %499, label %500, label %506

500:                                              ; preds = %497
  %501 = load i32, i32* %156, align 16
  %502 = icmp eq i32 %501, 0
  br i1 %502, label %506, label %503

503:                                              ; preds = %500
  %504 = load i32, i32* %157, align 4
  %505 = icmp eq i32 %504, 0
  br i1 %505, label %535, label %506

506:                                              ; preds = %503, %500, %497, %482
  %507 = load i32, i32* %158, align 4
  %508 = icmp eq i32 %507, -1
  br i1 %508, label %535, label %509

509:                                              ; preds = %506
  %510 = sext i32 %507 to i64
  %511 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 15, i64 %510
  %512 = load i32, i32* %511, align 4
  %513 = icmp eq i32 %512, -1
  br i1 %513, label %535, label %514

514:                                              ; preds = %509
  %515 = load %struct.BufferPool*, %struct.BufferPool** %152, align 8
  %516 = sext i32 %512 to i64
  %517 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %515, i64 0, i32 3, i64 %516, i32 8
  %518 = load i32, i32* %159, align 8
  %519 = icmp sgt i32 %518, 7
  %520 = icmp eq %struct.yv12_buffer_config* %517, %483
  %521 = or i1 %520, %519
  br i1 %521, label %535, label %522

522:                                              ; preds = %514
  %523 = load i32, i32* %160, align 16
  %524 = and i32 %523, 2
  %525 = icmp eq i32 %524, 0
  br i1 %525, label %535, label %526

526:                                              ; preds = %522
  call void @vp9_setup_pre_planes(%struct.macroblockd* %149, i32 0, %struct.yv12_buffer_config* nonnull %517, i32 %4, i32 %199, %struct.scale_factors* %161) #8
  %527 = zext i8 %494 to i64
  %528 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %527, i32 0
  %529 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %528, align 8
  %530 = load i8*, i8** %120, align 8
  %531 = load i32, i32* %121, align 8
  %532 = load i8*, i8** %162, align 8
  %533 = load i32, i32* %163, align 8
  %534 = call i32 %529(i8* %530, i32 %531, i8* %532, i32 %533) #8
  br label %535

535:                                              ; preds = %526, %522, %514, %509, %506, %503
  %536 = phi %struct.yv12_buffer_config* [ %517, %526 ], [ %517, %514 ], [ %517, %522 ], [ null, %503 ], [ null, %509 ], [ null, %506 ]
  %537 = phi i32 [ %534, %526 ], [ -1, %514 ], [ -1, %522 ], [ -1, %503 ], [ -1, %509 ], [ -1, %506 ]
  %538 = load i32, i32* %164, align 8
  %539 = icmp sgt i32 %538, 0
  br i1 %539, label %540, label %560

540:                                              ; preds = %535
  %541 = load i32, i32* %105, align 4
  %542 = icmp eq i32 %541, 0
  br i1 %542, label %543, label %560

543:                                              ; preds = %540
  %544 = load i32, i32* %108, align 4
  %545 = icmp eq i32 %544, 0
  br i1 %545, label %560, label %546

546:                                              ; preds = %543
  %547 = load i32, i32* %165, align 4
  %548 = icmp eq i32 %547, -1
  br i1 %548, label %558, label %549

549:                                              ; preds = %546
  %550 = sext i32 %547 to i64
  %551 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 15, i64 %550
  %552 = load i32, i32* %551, align 4
  %553 = icmp eq i32 %552, -1
  br i1 %553, label %558, label %554

554:                                              ; preds = %549
  %555 = load %struct.BufferPool*, %struct.BufferPool** %152, align 8
  %556 = sext i32 %552 to i64
  %557 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %555, i64 0, i32 3, i64 %556, i32 8
  br label %558

558:                                              ; preds = %554, %549, %546
  %559 = phi %struct.yv12_buffer_config* [ %557, %554 ], [ null, %549 ], [ null, %546 ]
  call void @vp9_setup_pre_planes(%struct.macroblockd* %149, i32 0, %struct.yv12_buffer_config* %559, i32 %4, i32 %199, %struct.scale_factors* %166) #8
  br label %561

560:                                              ; preds = %543, %540, %535
  call void @vp9_setup_pre_planes(%struct.macroblockd* %149, i32 0, %struct.yv12_buffer_config* %483, i32 %4, i32 %199, %struct.scale_factors* %167) #8
  br label %561

561:                                              ; preds = %560, %558
  %562 = phi i8 [ 1, %560 ], [ 3, %558 ]
  %563 = phi i32 [ %537, %560 ], [ -1, %558 ]
  %564 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %470, i64 0, i32 8, i64 0
  store i8 %562, i8* %564, align 4
  %565 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %470, i64 0, i32 8
  %566 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %470, i64 0, i32 8, i64 1
  store i8 -1, i8* %566, align 1
  %567 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %470, i64 0, i32 0
  store i8 12, i8* %567, align 4
  %568 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %470, i64 0, i32 9, i64 0
  %569 = getelementptr inbounds %union.int_mv, %union.int_mv* %568, i64 0, i32 0
  store i32 0, i32* %569, align 4
  %570 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %470, i64 0, i32 7
  store i8 3, i8* %570, align 1
  %571 = call i32 @vp9_int_pro_motion_estimation(%struct.VP9_COMP* %0, %struct.macroblock* %53, i8 zeroext %494, i32 %4, i32 %199, %struct.mv* nonnull @get_estimated_pred.dummy_mv) #8
  store i32 1, i32* %81, align 16
  %572 = bitcast %union.int_mv* %568 to %struct.mv*
  %573 = getelementptr inbounds %struct.mv, %struct.mv* %572, i64 0, i32 1
  %574 = load i16, i16* %573, align 2
  %575 = sext i16 %574 to i32
  store i32 %575, i32* %82, align 4
  %576 = bitcast %union.int_mv* %568 to i16*
  %577 = load i16, i16* %576, align 4
  %578 = sext i16 %577 to i32
  store i32 %578, i32* %83, align 8
  %579 = load i32, i32* %168, align 4
  %580 = icmp eq i32 %579, 0
  %581 = mul i32 %571, 7
  %582 = lshr i32 %581, 3
  %583 = select i1 %580, i32 %571, i32 %582
  %584 = icmp ult i32 %563, %583
  br i1 %584, label %585, label %588

585:                                              ; preds = %561
  call void @vp9_setup_pre_planes(%struct.macroblockd* %149, i32 0, %struct.yv12_buffer_config* %536, i32 %4, i32 %199, %struct.scale_factors* %161) #8
  %586 = getelementptr inbounds [2 x i8], [2 x i8]* %565, i64 0, i64 0
  store i8 2, i8* %586, align 4
  store i32 0, i32* %569, align 4
  %587 = load i8, i8* %566, align 1
  br label %596

588:                                              ; preds = %561
  %589 = load i32, i32* %569, align 4
  store i32 %589, i32* %170, align 4
  %590 = getelementptr inbounds [2 x i8], [2 x i8]* %565, i64 0, i64 0
  %591 = load i8, i8* %590, align 4
  %592 = load i8, i8* %566, align 1
  %593 = sext i8 %591 to i64
  %594 = icmp sgt i8 %591, 0
  %595 = add nsw i64 %593, -1
  br i1 %594, label %596, label %599

596:                                              ; preds = %588, %585
  %597 = phi i64 [ 1, %585 ], [ %595, %588 ]
  %598 = phi i8 [ %587, %585 ], [ %592, %588 ]
  br label %599

599:                                              ; preds = %596, %588
  %600 = phi i8 [ %598, %596 ], [ %592, %588 ]
  %601 = phi i64 [ %597, %596 ], [ 0, %588 ]
  %602 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 %601
  store %struct.RefBuffer* %602, %struct.RefBuffer** %171, align 8
  %603 = sext i8 %600 to i64
  %604 = icmp sgt i8 %600, 0
  %605 = add nsw i64 %603, -1
  %606 = select i1 %604, i64 %605, i64 0
  %607 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 %606
  store %struct.RefBuffer* %607, %struct.RefBuffer** %172, align 8
  store i8* %173, i8** %174, align 8
  store i32 64, i32* %175, align 8
  call void @vp9_build_inter_predictors_sb(%struct.macroblockd* %149, i32 %4, i32 %199, i8 zeroext 12) #8
  br label %613

608:                                              ; preds = %465, %464
  %609 = load i32, i32* %176, align 8
  switch i32 %609, label %613 [
    i32 8, label %610
    i32 10, label %611
    i32 12, label %612
  ]

610:                                              ; preds = %608
  call void @llvm.memset.p0i8.i64(i8* align 16 %173, i8 -128, i64 4096, i1 false) #8
  br label %613

611:                                              ; preds = %608
  call void @llvm.memset.p0i8.i64(i8* align 16 %173, i8 0, i64 4096, i1 false) #8
  br label %613

612:                                              ; preds = %608
  call void @llvm.memset.p0i8.i64(i8* align 16 %173, i8 0, i64 4096, i1 false) #8
  br label %613

613:                                              ; preds = %612, %611, %610, %608, %599
  store i8 12, i8* %177, align 1
  store i8 3, i8* %178, align 4
  store i32 1, i32* %84, align 4
  %614 = load %struct.PC_TREE*, %struct.PC_TREE** %115, align 16
  call fastcc void @nonrd_pick_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %17, %struct.TOKENEXTRA** nonnull %9, i32 %4, i32 %199, i8 zeroext 12, %struct.RD_COST* nonnull %8, i32 1, i64 9223372036854775807, %struct.PC_TREE* %614) #8
  br label %1014

615:                                              ; preds = %458
  %616 = load i32, i32* %71, align 4
  %617 = load i32, i32* %113, align 4
  %618 = sub nsw i32 %617, %4
  %619 = load i32, i32* %24, align 4
  %620 = sub nsw i32 %619, %199
  %621 = load %struct.MODE_INFO*, %struct.MODE_INFO** %114, align 16
  %622 = mul nsw i32 %616, %4
  %623 = sext i32 %622 to i64
  %624 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %621, i64 %623
  %625 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %624, i64 %193
  %626 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %99, align 8
  %627 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %626, i64 0, i32 13
  %628 = load i8*, i8** %627, align 8
  %629 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %626, i64 0, i32 14
  %630 = load i8*, i8** %629, align 8
  %631 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %626, i64 0, i32 15
  %632 = load i8*, i8** %631, align 8
  %633 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %626, i64 0, i32 4
  %634 = load i32, i32* %633, align 8
  %635 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %626, i64 0, i32 9
  %636 = load i32, i32* %635, align 4
  store %struct.yv12_buffer_config* %626, %struct.yv12_buffer_config** %116, align 16
  %637 = shl nsw i32 %199, 3
  %638 = load i32, i32* %118, align 8
  %639 = load i32, i32* %119, align 4
  %640 = ashr i32 %637, %638
  %641 = ashr i32 %117, %639
  %642 = sext i32 %641 to i64
  %643 = sext i32 %634 to i64
  %644 = mul nsw i64 %642, %643
  %645 = sext i32 %640 to i64
  %646 = add nsw i64 %644, %645
  %647 = getelementptr inbounds i8, i8* %628, i64 %646
  store i8* %647, i8** %120, align 8
  store i32 %634, i32* %121, align 8
  %648 = load i32, i32* %122, align 8
  %649 = load i32, i32* %123, align 4
  %650 = ashr i32 %637, %648
  %651 = ashr i32 %117, %649
  %652 = sext i32 %651 to i64
  %653 = sext i32 %636 to i64
  %654 = mul nsw i64 %652, %653
  %655 = sext i32 %650 to i64
  %656 = add nsw i64 %654, %655
  %657 = getelementptr inbounds i8, i8* %630, i64 %656
  store i8* %657, i8** %124, align 8
  store i32 %636, i32* %125, align 8
  %658 = load i32, i32* %126, align 8
  %659 = load i32, i32* %127, align 4
  %660 = ashr i32 %637, %658
  %661 = ashr i32 %117, %659
  %662 = sext i32 %661 to i64
  %663 = mul nsw i64 %662, %653
  %664 = sext i32 %660 to i64
  %665 = add nsw i64 %663, %664
  %666 = getelementptr inbounds i8, i8* %632, i64 %665
  store i8* %666, i8** %128, align 8
  store i32 %636, i32* %129, align 8
  %667 = icmp sgt i32 %620, 7
  %668 = icmp sgt i32 %618, 7
  %669 = and i1 %668, %667
  br i1 %669, label %670, label %835

670:                                              ; preds = %615
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %138) #8
  %671 = load i32, i32* %140, align 4
  %672 = mul nsw i32 %671, %139
  %673 = ashr i32 %199, 1
  %674 = add nsw i32 %672, %673
  %675 = load i32, i32* %141, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %138, i8 0, i64 48, i1 false) #8
  %676 = sext i32 %674 to i64
  br label %677

677:                                              ; preds = %815, %670
  %678 = phi i32 [ %671, %670 ], [ %816, %815 ]
  %679 = phi i64 [ 0, %670 ], [ %813, %815 ]
  %680 = phi i32 [ 0, %670 ], [ %812, %815 ]
  %681 = shl i64 %679, 2
  %682 = getelementptr inbounds [16 x %struct.anon.9], [16 x %struct.anon.9]* @coord_lookup, i64 0, i64 %681, i32 0
  %683 = load i32, i32* %682, align 16
  %684 = getelementptr inbounds [16 x %struct.anon.9], [16 x %struct.anon.9]* @coord_lookup, i64 0, i64 %681, i32 1
  %685 = load i32, i32* %684, align 4
  %686 = sdiv i32 %683, 2
  %687 = mul nsw i32 %686, %678
  %688 = sdiv i32 %685, 2
  %689 = add nsw i32 %687, %688
  %690 = load %struct.diff*, %struct.diff** %142, align 8
  %691 = getelementptr inbounds %struct.diff, %struct.diff* %690, i64 %676
  %692 = sext i32 %689 to i64
  %693 = getelementptr inbounds %struct.diff, %struct.diff* %691, i64 %692
  %694 = mul nsw i32 %683, %616
  %695 = add nsw i32 %694, %685
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %625, i64 %696
  %698 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %203, i64 %696
  store %struct.MODE_INFO* %697, %struct.MODE_INFO** %698, align 8
  %699 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %697, i64 0, i32 0
  store i8 6, i8* %699, align 4
  %700 = or i64 %681, 1
  %701 = getelementptr inbounds [16 x %struct.anon.9], [16 x %struct.anon.9]* @coord_lookup, i64 0, i64 %700, i32 0
  %702 = load i32, i32* %701, align 8
  %703 = getelementptr inbounds [16 x %struct.anon.9], [16 x %struct.anon.9]* @coord_lookup, i64 0, i64 %700, i32 1
  %704 = load i32, i32* %703, align 4
  %705 = sdiv i32 %702, 2
  %706 = load i32, i32* %140, align 4
  %707 = mul nsw i32 %706, %705
  %708 = sdiv i32 %704, 2
  %709 = add nsw i32 %707, %708
  %710 = load %struct.diff*, %struct.diff** %142, align 8
  %711 = getelementptr inbounds %struct.diff, %struct.diff* %710, i64 %676
  %712 = sext i32 %709 to i64
  %713 = getelementptr inbounds %struct.diff, %struct.diff* %711, i64 %712
  %714 = mul nsw i32 %702, %616
  %715 = add nsw i32 %714, %704
  %716 = sext i32 %715 to i64
  %717 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %625, i64 %716
  %718 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %203, i64 %716
  store %struct.MODE_INFO* %717, %struct.MODE_INFO** %718, align 8
  %719 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %717, i64 0, i32 0
  store i8 6, i8* %719, align 4
  %720 = or i64 %681, 2
  %721 = getelementptr inbounds [16 x %struct.anon.9], [16 x %struct.anon.9]* @coord_lookup, i64 0, i64 %720, i32 0
  %722 = load i32, i32* %721, align 16
  %723 = getelementptr inbounds [16 x %struct.anon.9], [16 x %struct.anon.9]* @coord_lookup, i64 0, i64 %720, i32 1
  %724 = load i32, i32* %723, align 4
  %725 = sdiv i32 %722, 2
  %726 = load i32, i32* %140, align 4
  %727 = mul nsw i32 %726, %725
  %728 = sdiv i32 %724, 2
  %729 = add nsw i32 %727, %728
  %730 = load %struct.diff*, %struct.diff** %142, align 8
  %731 = getelementptr inbounds %struct.diff, %struct.diff* %730, i64 %676
  %732 = sext i32 %729 to i64
  %733 = getelementptr inbounds %struct.diff, %struct.diff* %731, i64 %732
  %734 = mul nsw i32 %722, %616
  %735 = add nsw i32 %734, %724
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %625, i64 %736
  %738 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %203, i64 %736
  store %struct.MODE_INFO* %737, %struct.MODE_INFO** %738, align 8
  %739 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %737, i64 0, i32 0
  store i8 6, i8* %739, align 4
  %740 = or i64 %681, 3
  %741 = getelementptr inbounds [16 x %struct.anon.9], [16 x %struct.anon.9]* @coord_lookup, i64 0, i64 %740, i32 0
  %742 = load i32, i32* %741, align 8
  %743 = getelementptr inbounds [16 x %struct.anon.9], [16 x %struct.anon.9]* @coord_lookup, i64 0, i64 %740, i32 1
  %744 = load i32, i32* %743, align 4
  %745 = sdiv i32 %742, 2
  %746 = load i32, i32* %140, align 4
  %747 = mul nsw i32 %746, %745
  %748 = sdiv i32 %744, 2
  %749 = add nsw i32 %747, %748
  %750 = load %struct.diff*, %struct.diff** %142, align 8
  %751 = getelementptr inbounds %struct.diff, %struct.diff* %750, i64 %676
  %752 = sext i32 %749 to i64
  %753 = getelementptr inbounds %struct.diff, %struct.diff* %751, i64 %752
  %754 = mul nsw i32 %742, %616
  %755 = add nsw i32 %754, %744
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %625, i64 %756
  %758 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %203, i64 %756
  store %struct.MODE_INFO* %757, %struct.MODE_INFO** %758, align 8
  %759 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %757, i64 0, i32 0
  store i8 6, i8* %759, align 4
  %760 = getelementptr inbounds %struct.diff, %struct.diff* %693, i64 0, i32 2
  %761 = load i32, i32* %760, align 4
  %762 = icmp ult i32 %761, %675
  br i1 %762, label %763, label %811

763:                                              ; preds = %677
  %764 = getelementptr inbounds %struct.diff, %struct.diff* %713, i64 0, i32 2
  %765 = load i32, i32* %764, align 4
  %766 = icmp ult i32 %765, %675
  br i1 %766, label %767, label %811

767:                                              ; preds = %763
  %768 = getelementptr inbounds %struct.diff, %struct.diff* %733, i64 0, i32 2
  %769 = load i32, i32* %768, align 4
  %770 = icmp ult i32 %769, %675
  br i1 %770, label %771, label %811

771:                                              ; preds = %767
  %772 = getelementptr inbounds %struct.diff, %struct.diff* %753, i64 0, i32 2
  %773 = load i32, i32* %772, align 4
  %774 = icmp ult i32 %773, %675
  br i1 %774, label %775, label %811

775:                                              ; preds = %771
  %776 = getelementptr inbounds [4 x %struct.diff], [4 x %struct.diff]* %6, i64 0, i64 %679, i32 0
  %777 = getelementptr inbounds [4 x %struct.diff], [4 x %struct.diff]* %6, i64 0, i64 %679, i32 1
  %778 = load i32, i32* %776, align 4
  %779 = load i32, i32* %777, align 4
  %780 = getelementptr inbounds %struct.diff, %struct.diff* %693, i64 0, i32 0
  %781 = load i32, i32* %780, align 4
  %782 = add i32 %781, %778
  %783 = getelementptr inbounds %struct.diff, %struct.diff* %693, i64 0, i32 1
  %784 = load i32, i32* %783, align 4
  %785 = add nsw i32 %784, %779
  %786 = getelementptr inbounds %struct.diff, %struct.diff* %713, i64 0, i32 0
  %787 = load i32, i32* %786, align 4
  %788 = add i32 %782, %787
  %789 = getelementptr inbounds %struct.diff, %struct.diff* %713, i64 0, i32 1
  %790 = load i32, i32* %789, align 4
  %791 = add nsw i32 %785, %790
  %792 = getelementptr inbounds %struct.diff, %struct.diff* %733, i64 0, i32 0
  %793 = load i32, i32* %792, align 4
  %794 = add i32 %788, %793
  %795 = getelementptr inbounds %struct.diff, %struct.diff* %733, i64 0, i32 1
  %796 = load i32, i32* %795, align 4
  %797 = add nsw i32 %791, %796
  %798 = getelementptr inbounds %struct.diff, %struct.diff* %753, i64 0, i32 0
  %799 = load i32, i32* %798, align 4
  %800 = add i32 %794, %799
  %801 = getelementptr inbounds %struct.diff, %struct.diff* %753, i64 0, i32 1
  %802 = load i32, i32* %801, align 4
  %803 = add nsw i32 %797, %802
  %804 = add nsw i32 %680, 1
  store i32 %800, i32* %776, align 4
  store i32 %803, i32* %777, align 4
  %805 = sext i32 %803 to i64
  %806 = mul nsw i64 %805, %805
  %807 = lshr i64 %806, 10
  %808 = trunc i64 %807 to i32
  %809 = sub i32 %800, %808
  %810 = getelementptr inbounds [4 x %struct.diff], [4 x %struct.diff]* %6, i64 0, i64 %679, i32 2
  store i32 %809, i32* %810, align 4
  store %struct.MODE_INFO* %697, %struct.MODE_INFO** %698, align 8
  store i8 9, i8* %699, align 4
  br label %811

811:                                              ; preds = %775, %771, %767, %763, %677
  %812 = phi i32 [ %804, %775 ], [ %680, %771 ], [ %680, %767 ], [ %680, %763 ], [ %680, %677 ]
  %813 = add nuw nsw i64 %679, 1
  %814 = icmp eq i64 %813, 4
  br i1 %814, label %817, label %815

815:                                              ; preds = %811
  %816 = load i32, i32* %140, align 4
  br label %677

817:                                              ; preds = %811
  %818 = icmp eq i32 %812, 4
  br i1 %818, label %819, label %834

819:                                              ; preds = %817
  %820 = shl i32 %675, 1
  %821 = load i32, i32* %143, align 8
  %822 = icmp ult i32 %821, %820
  %823 = load i32, i32* %144, align 4
  %824 = icmp ult i32 %823, %820
  %825 = and i1 %822, %824
  %826 = load i32, i32* %145, align 8
  %827 = icmp ult i32 %826, %820
  %828 = and i1 %825, %827
  %829 = load i32, i32* %146, align 4
  %830 = icmp ult i32 %829, %820
  %831 = and i1 %828, %830
  br i1 %831, label %832, label %834

832:                                              ; preds = %819
  store %struct.MODE_INFO* %625, %struct.MODE_INFO** %203, align 8
  %833 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %625, i64 0, i32 0
  store i8 12, i8* %833, align 4
  br label %834

834:                                              ; preds = %832, %819, %817
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %138) #8
  br label %871

835:                                              ; preds = %615, %868
  %836 = phi i32 [ %869, %868 ], [ 0, %615 ]
  %837 = phi i32 [ %862, %868 ], [ %131, %615 ]
  %838 = mul nsw i32 %836, %616
  %839 = sub nsw i32 %618, %836
  %840 = icmp slt i32 %839, 1
  %841 = icmp slt i32 %839, %131
  %842 = icmp slt i32 %839, %135
  br label %843

843:                                              ; preds = %861, %835
  %844 = phi i32 [ 0, %835 ], [ %866, %861 ]
  %845 = phi i32 [ %133, %835 ], [ %863, %861 ]
  %846 = phi i32 [ %837, %835 ], [ %862, %861 ]
  %847 = add nsw i32 %844, %838
  %848 = sext i32 %847 to i64
  %849 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %625, i64 %848
  %850 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %203, i64 %848
  store %struct.MODE_INFO* %849, %struct.MODE_INFO** %850, align 8
  %851 = sub nsw i32 %620, %844
  %852 = icmp slt i32 %851, 1
  %853 = or i1 %840, %852
  br i1 %853, label %861, label %854

854:                                              ; preds = %843
  %855 = icmp slt i32 %851, %133
  %856 = or i1 %841, %855
  br i1 %856, label %857, label %861

857:                                              ; preds = %854
  %858 = icmp slt i32 %851, %137
  %859 = or i1 %842, %858
  %860 = select i1 %859, i8 0, i8 3
  br label %861

861:                                              ; preds = %857, %854, %843
  %862 = phi i32 [ %846, %843 ], [ %131, %854 ], [ %135, %857 ]
  %863 = phi i32 [ %845, %843 ], [ %133, %854 ], [ %137, %857 ]
  %864 = phi i8 [ 3, %843 ], [ 6, %854 ], [ %860, %857 ]
  %865 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %849, i64 0, i32 0
  store i8 %864, i8* %865, align 4
  %866 = add nsw i32 %863, %844
  %867 = icmp slt i32 %866, 8
  br i1 %867, label %843, label %868

868:                                              ; preds = %861
  %869 = add nsw i32 %862, %836
  %870 = icmp slt i32 %869, 8
  br i1 %870, label %835, label %871

871:                                              ; preds = %868, %834
  %872 = load %struct.PC_TREE*, %struct.PC_TREE** %115, align 16
  call fastcc void @nonrd_use_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %17, %struct.MODE_INFO** %203, %struct.TOKENEXTRA** nonnull %9, i32 %4, i32 %199, i8 zeroext 12, %struct.RD_COST* nonnull %8, %struct.PC_TREE* %872) #8
  br label %1014

873:                                              ; preds = %458
  %874 = icmp eq i32 %364, 0
  br i1 %874, label %875, label %877

875:                                              ; preds = %873
  %876 = load i8, i8* %112, align 4
  br label %877

877:                                              ; preds = %875, %873
  %878 = phi i8 [ 12, %873 ], [ %876, %875 ]
  %879 = load i32, i32* %71, align 4
  %880 = load i32, i32* %113, align 4
  %881 = sub nsw i32 %880, %4
  %882 = load i32, i32* %24, align 4
  %883 = sub nsw i32 %882, %199
  %884 = load %struct.MODE_INFO*, %struct.MODE_INFO** %114, align 16
  %885 = mul nsw i32 %879, %4
  %886 = sext i32 %885 to i64
  %887 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %884, i64 %886
  %888 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %887, i64 %193
  %889 = zext i8 %878 to i64
  %890 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %889
  %891 = load i8, i8* %890, align 1
  %892 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %889
  %893 = load i8, i8* %892, align 1
  %894 = zext i8 %893 to i32
  %895 = icmp sgt i32 %883, 7
  %896 = icmp sgt i32 %881, 7
  %897 = and i1 %896, %895
  br i1 %897, label %898, label %916

898:                                              ; preds = %877
  %899 = zext i8 %893 to i64
  %900 = zext i8 %891 to i64
  %901 = sext i32 %879 to i64
  br label %902

902:                                              ; preds = %913, %898
  %903 = phi i64 [ 0, %898 ], [ %914, %913 ]
  %904 = mul nsw i64 %903, %901
  br label %905

905:                                              ; preds = %905, %902
  %906 = phi i64 [ 0, %902 ], [ %911, %905 ]
  %907 = add nsw i64 %906, %904
  %908 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %888, i64 %907
  %909 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %203, i64 %907
  store %struct.MODE_INFO* %908, %struct.MODE_INFO** %909, align 8
  %910 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %908, i64 0, i32 0
  store i8 %878, i8* %910, align 4
  %911 = add nuw nsw i64 %906, %899
  %912 = icmp ult i64 %911, 8
  br i1 %912, label %905, label %913

913:                                              ; preds = %905
  %914 = add nuw nsw i64 %903, %900
  %915 = icmp ult i64 %914, 8
  br i1 %915, label %902, label %969

916:                                              ; preds = %877
  %917 = zext i8 %891 to i32
  %918 = icmp eq i8 %878, 0
  %919 = icmp ult i8 %878, 3
  %920 = select i1 %919, i8 %878, i8 3
  br label %921

921:                                              ; preds = %966, %916
  %922 = phi i32 [ 0, %916 ], [ %967, %966 ]
  %923 = phi i32 [ %917, %916 ], [ %960, %966 ]
  %924 = mul nsw i32 %922, %879
  %925 = sub nsw i32 %881, %922
  %926 = icmp slt i32 %925, 1
  br label %927

927:                                              ; preds = %959, %921
  %928 = phi i32 [ 0, %921 ], [ %964, %959 ]
  %929 = phi i32 [ %894, %921 ], [ %961, %959 ]
  %930 = phi i32 [ %923, %921 ], [ %960, %959 ]
  %931 = add nsw i32 %928, %924
  %932 = sext i32 %931 to i64
  %933 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %888, i64 %932
  %934 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %203, i64 %932
  store %struct.MODE_INFO* %933, %struct.MODE_INFO** %934, align 8
  %935 = sub nsw i32 %883, %928
  %936 = icmp slt i32 %935, 1
  %937 = or i1 %926, %936
  %938 = or i1 %918, %937
  %939 = select i1 %937, i8 %920, i8 0
  br i1 %938, label %959, label %940

940:                                              ; preds = %927, %952
  %941 = phi i8 [ %953, %952 ], [ %878, %927 ]
  %942 = zext i8 %941 to i64
  %943 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %942
  %944 = load i8, i8* %943, align 1
  %945 = zext i8 %944 to i32
  %946 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %942
  %947 = load i8, i8* %946, align 1
  %948 = zext i8 %947 to i32
  %949 = icmp slt i32 %925, %945
  %950 = icmp slt i32 %935, %948
  %951 = or i1 %949, %950
  br i1 %951, label %952, label %955

952:                                              ; preds = %940
  %953 = add i8 %941, -3
  %954 = icmp eq i8 %953, 0
  br i1 %954, label %955, label %940

955:                                              ; preds = %952, %940
  %956 = phi i8 [ 0, %952 ], [ %941, %940 ]
  %957 = zext i8 %944 to i32
  %958 = zext i8 %947 to i32
  br label %959

959:                                              ; preds = %955, %927
  %960 = phi i32 [ %930, %927 ], [ %957, %955 ]
  %961 = phi i32 [ %929, %927 ], [ %958, %955 ]
  %962 = phi i8 [ %939, %927 ], [ %956, %955 ]
  %963 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %933, i64 0, i32 0
  store i8 %962, i8* %963, align 4
  %964 = add nsw i32 %961, %928
  %965 = icmp slt i32 %964, 8
  br i1 %965, label %927, label %966

966:                                              ; preds = %959
  %967 = add nsw i32 %960, %922
  %968 = icmp slt i32 %967, 8
  br i1 %968, label %921, label %969

969:                                              ; preds = %966, %913
  %970 = load %struct.PC_TREE*, %struct.PC_TREE** %115, align 16
  call fastcc void @nonrd_use_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %17, %struct.MODE_INFO** %203, %struct.TOKENEXTRA** nonnull %9, i32 %4, i32 %199, i8 zeroext 12, %struct.RD_COST* nonnull %8, %struct.PC_TREE* %970) #8
  br label %1014

971:                                              ; preds = %458, %455, %452
  store i32 1, i32* %84, align 4
  call fastcc void @set_offsets(%struct.VP9_COMP* %0, %struct.TileInfo* %52, %struct.macroblock* %53, i32 %4, i32 %199, i8 zeroext 12) #8
  %972 = load i32, i32* %105, align 4
  %973 = icmp eq i32 %972, 0
  br i1 %973, label %974, label %1002

974:                                              ; preds = %971
  %975 = load i32, i32* %179, align 8
  %976 = icmp eq i32 %975, 0
  br i1 %976, label %1002, label %977

977:                                              ; preds = %974
  %978 = load i32, i32* %159, align 8
  %979 = icmp slt i32 %978, 6
  br i1 %979, label %980, label %1002

980:                                              ; preds = %977
  %981 = load i32, i32* %147, align 4
  %982 = icmp eq i32 %981, 0
  br i1 %982, label %1002, label %983

983:                                              ; preds = %980
  %984 = load i8, i8* %148, align 4
  %985 = icmp eq i8 %984, 0
  br i1 %985, label %986, label %1002

986:                                              ; preds = %983
  %987 = load i32, i32* %110, align 4
  %988 = icmp eq i32 %987, 0
  br i1 %988, label %989, label %992

989:                                              ; preds = %986
  %990 = load i32, i32* %111, align 16
  %991 = icmp eq i32 %990, 0
  br i1 %991, label %1002, label %992

992:                                              ; preds = %989, %986
  %993 = load i32, i32* %180, align 16
  %994 = icmp slt i32 %993, 353
  br i1 %994, label %995, label %998

995:                                              ; preds = %992
  %996 = load i32, i32* %181, align 4
  %997 = icmp slt i32 %996, 289
  br i1 %997, label %999, label %998

998:                                              ; preds = %995, %992
  br label %999

999:                                              ; preds = %998, %995
  %1000 = phi i8 [ 12, %998 ], [ 9, %995 ]
  store i8 %1000, i8* %177, align 1
  store i8 3, i8* %178, align 4
  %1001 = load %struct.PC_TREE*, %struct.PC_TREE** %115, align 16
  call fastcc void @nonrd_pick_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %17, %struct.TOKENEXTRA** nonnull %9, i32 %4, i32 %199, i8 zeroext 12, %struct.RD_COST* nonnull %8, i32 1, i64 9223372036854775807, %struct.PC_TREE* %1001) #8
  br label %1014

1002:                                             ; preds = %989, %983, %980, %977, %974, %971
  call fastcc void @choose_partitioning(%struct.VP9_COMP* %0, %struct.TileInfo* %52, %struct.macroblock* %53, i32 %4, i32 %199) #8
  %1003 = load i32, i32* %147, align 4
  %1004 = icmp eq i32 %1003, 0
  br i1 %1004, label %1005, label %1007

1005:                                             ; preds = %1002
  %1006 = load %struct.PC_TREE*, %struct.PC_TREE** %115, align 16
  br label %1011

1007:                                             ; preds = %1002
  %1008 = load i8, i8* %148, align 4
  %1009 = icmp eq i8 %1008, 0
  %1010 = load %struct.PC_TREE*, %struct.PC_TREE** %115, align 16
  br i1 %1009, label %1013, label %1011

1011:                                             ; preds = %1007, %1005
  %1012 = phi %struct.PC_TREE* [ %1006, %1005 ], [ %1010, %1007 ]
  call fastcc void @nonrd_use_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %17, %struct.MODE_INFO** %203, %struct.TOKENEXTRA** nonnull %9, i32 %4, i32 %199, i8 zeroext 12, %struct.RD_COST* nonnull %8, %struct.PC_TREE* %1012) #8
  br label %1014

1013:                                             ; preds = %1007
  call fastcc void @nonrd_select_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %17, %struct.MODE_INFO** %203, %struct.TOKENEXTRA** nonnull %9, i32 %4, i32 %199, i8 zeroext 12, %struct.RD_COST* nonnull %8, %struct.PC_TREE* %1010) #8
  br label %1014

1014:                                             ; preds = %1013, %1011, %999, %969, %871, %613, %459
  %1015 = load i32, i32* %108, align 4
  %1016 = icmp eq i32 %1015, 0
  br i1 %1016, label %1017, label %1049

1017:                                             ; preds = %1014
  %1018 = load i32, i32* %110, align 4
  %1019 = icmp eq i32 %1018, 0
  br i1 %1019, label %1020, label %1049

1020:                                             ; preds = %1017
  %1021 = load i32, i32* %111, align 16
  %1022 = icmp eq i32 %1021, 0
  br i1 %1022, label %1023, label %1049

1023:                                             ; preds = %1020
  %1024 = load i32, i32* %182, align 8
  %1025 = icmp eq i32 %1024, 0
  br i1 %1025, label %1049, label %1026

1026:                                             ; preds = %1023
  %1027 = load i32, i32* %183, align 8
  %1028 = icmp eq i32 %1027, 0
  br i1 %1028, label %1049, label %1029

1029:                                             ; preds = %1026
  %1030 = load i32, i32* %91, align 8
  %1031 = add nsw i32 %1030, 7
  %1032 = ashr i32 %1031, 3
  %1033 = mul nsw i32 %1032, %56
  %1034 = ashr i32 %199, 3
  %1035 = add nsw i32 %1033, %1034
  %1036 = load i8*, i8** %184, align 8
  %1037 = icmp eq i8* %1036, null
  br i1 %1037, label %1042, label %1038

1038:                                             ; preds = %1029
  %1039 = load i8, i8* %85, align 2
  %1040 = sext i32 %1035 to i64
  %1041 = getelementptr inbounds i8, i8* %1036, i64 %1040
  store i8 %1039, i8* %1041, align 1
  br label %1042

1042:                                             ; preds = %1038, %1029
  %1043 = load i8*, i8** %185, align 16
  %1044 = icmp eq i8* %1043, null
  br i1 %1044, label %1049, label %1045

1045:                                             ; preds = %1042
  %1046 = load i8, i8* %86, align 1
  %1047 = sext i32 %1035 to i64
  %1048 = getelementptr inbounds i8, i8* %1043, i64 %1047
  store i8 %1046, i8* %1048, align 1
  br label %1049

1049:                                             ; preds = %1045, %1042, %1026, %1023, %1020, %1017, %1014
  %1050 = load void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)** %186, align 8
  call void %1050(%struct.VP9RowMTSyncData* %75, i32 %56, i32 %194, i32 %64) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #8
  %1051 = add nsw i64 %193, 8
  %1052 = add nuw nsw i32 %194, 1
  %1053 = icmp slt i64 %1051, %188
  br i1 %1053, label %192, label %1054

1054:                                             ; preds = %1049, %51, %5
  %1055 = load i64, i64* %41, align 8
  %1056 = load %struct.TOKENLIST*, %struct.TOKENLIST** %43, align 8
  %1057 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %1056, i64 %45, i32 1
  %1058 = bitcast %struct.TOKENEXTRA** %1057 to i64*
  store i64 %1055, i64* %1058, align 8
  %1059 = load %struct.TOKENLIST*, %struct.TOKENLIST** %43, align 8
  %1060 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %1059, i64 %45
  %1061 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %1059, i64 %45, i32 1
  %1062 = bitcast %struct.TOKENEXTRA** %1061 to i64*
  %1063 = load i64, i64* %1062, align 8
  %1064 = bitcast %struct.TOKENLIST* %1060 to i64*
  %1065 = load i64, i64* %1064, align 8
  %1066 = sub i64 %1063, %1065
  %1067 = lshr exact i64 %1066, 4
  %1068 = trunc i64 %1067 to i32
  %1069 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %1059, i64 %45, i32 2
  store i32 %1068, i32* %1069, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_encode_tile(%struct.VP9_COMP*, %struct.ThreadData*, i32, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 85
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 32
  %8 = load %struct.TileDataEnc*, %struct.TileDataEnc** %7, align 16
  %9 = shl i32 %2, %6
  %10 = add nsw i32 %9, %3
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %8, i64 %11, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %8, i64 %11, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %13, %15
  br i1 %16, label %17, label %21

17:                                               ; preds = %4, %17
  %18 = phi i32 [ %19, %17 ], [ %13, %4 ]
  tail call void @vp9_encode_sb_row(%struct.VP9_COMP* %0, %struct.ThreadData* %1, i32 %2, i32 %3, i32 %18)
  %19 = add nsw i32 %18, 8
  %20 = icmp slt i32 %19, %15
  br i1 %20, label %17, label %21

21:                                               ; preds = %17, %4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vp9_get_group_idx(double, double* nocapture readonly, i32) local_unnamed_addr #3 {
  %4 = add nsw i32 %2, -1
  %5 = zext i32 %4 to i64
  br label %6

6:                                                ; preds = %12, %3
  %7 = phi i64 [ %13, %12 ], [ 0, %3 ]
  %8 = phi i32 [ %14, %12 ], [ 0, %3 ]
  %9 = getelementptr inbounds double, double* %1, i64 %7
  %10 = load double, double* %9, align 8
  %11 = fcmp ugt double %10, %0
  br i1 %11, label %16, label %12

12:                                               ; preds = %6
  %13 = add nuw nsw i64 %7, 1
  %14 = add nuw nsw i32 %8, 1
  %15 = icmp eq i64 %13, %5
  br i1 %15, label %18, label %6

16:                                               ; preds = %6
  %17 = trunc i64 %7 to i32
  br label %18

18:                                               ; preds = %12, %16
  %19 = phi i32 [ %17, %16 ], [ %14, %12 ]
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_kmeans(double* nocapture, double* nocapture, i32* nocapture, i32, %struct.KMEANS_DATA*, i32) local_unnamed_addr #0 {
  %7 = bitcast i32* %2 to i8*
  %8 = alloca [8 x double], align 16
  %9 = bitcast [8 x double]* %8 to i8*
  %10 = alloca [8 x i32], align 16
  %11 = bitcast [8 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -1, i64 64, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #8
  %12 = bitcast [8 x i32]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 32, i1 false)
  tail call void @vpx_clear_system_state() #8
  %13 = bitcast %struct.KMEANS_DATA* %4 to i8*
  %14 = sext i32 %5 to i64
  tail call void @qsort(i8* %13, i64 %14, i64 16, i32 (i8*, i8*)* nonnull @compare_kmeans_data) #8
  %15 = icmp sgt i32 %3, 0
  br i1 %15, label %16, label %38

16:                                               ; preds = %6
  %17 = shl nsw i32 %3, 1
  %18 = zext i32 %3 to i64
  %19 = and i64 %18, 1
  %20 = icmp eq i32 %3, 1
  br i1 %20, label %23, label %21

21:                                               ; preds = %16
  %22 = sub nsw i64 %18, %19
  br label %67

23:                                               ; preds = %67, %16
  %24 = phi i64 [ 0, %16 ], [ %93, %67 ]
  %25 = icmp eq i64 %19, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %23
  %27 = trunc i64 %24 to i32
  %28 = shl i32 %27, 1
  %29 = or i32 %28, 1
  %30 = mul nsw i32 %29, %5
  %31 = sdiv i32 %30, %17
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %struct.KMEANS_DATA, %struct.KMEANS_DATA* %4, i64 %32, i32 0
  %34 = bitcast double* %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds double, double* %0, i64 %24
  %37 = bitcast double* %36 to i64*
  store i64 %35, i64* %37, align 8
  br label %38

38:                                               ; preds = %26, %23, %6
  %39 = add i32 %3, -1
  %40 = icmp sgt i32 %39, 0
  %41 = zext i32 %39 to i64
  %42 = sext i32 %39 to i64
  %43 = getelementptr inbounds double, double* %1, i64 %42
  %44 = icmp sgt i32 %5, 0
  %45 = zext i32 %5 to i64
  %46 = zext i32 %3 to i64
  %47 = getelementptr double, double* %1, i64 %41
  %48 = add nuw nsw i64 %41, 1
  %49 = getelementptr double, double* %0, i64 %48
  %50 = and i64 %41, 4294967292
  %51 = add nsw i64 %50, -4
  %52 = lshr exact i64 %51, 2
  %53 = add nuw nsw i64 %52, 1
  %54 = icmp ult i32 %39, 4
  %55 = icmp ugt double* %49, %1
  %56 = icmp ugt double* %47, %0
  %57 = and i1 %55, %56
  %58 = and i64 %41, 4294967292
  %59 = and i64 %53, 1
  %60 = icmp eq i64 %51, 0
  %61 = sub nuw nsw i64 %53, %59
  %62 = icmp eq i64 %59, 0
  %63 = icmp eq i64 %58, %41
  %64 = and i64 %41, 1
  %65 = icmp eq i64 %64, 0
  %66 = sub nsw i64 0, %41
  br label %100

67:                                               ; preds = %67, %21
  %68 = phi i64 [ 0, %21 ], [ %93, %67 ]
  %69 = phi i64 [ %22, %21 ], [ %94, %67 ]
  %70 = trunc i64 %68 to i32
  %71 = shl i32 %70, 1
  %72 = or i32 %71, 1
  %73 = mul nsw i32 %72, %5
  %74 = sdiv i32 %73, %17
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct.KMEANS_DATA, %struct.KMEANS_DATA* %4, i64 %75, i32 0
  %77 = bitcast double* %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds double, double* %0, i64 %68
  %80 = bitcast double* %79 to i64*
  store i64 %78, i64* %80, align 8
  %81 = or i64 %68, 1
  %82 = trunc i64 %81 to i32
  %83 = shl i32 %82, 1
  %84 = or i32 %83, 1
  %85 = mul nsw i32 %84, %5
  %86 = sdiv i32 %85, %17
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds %struct.KMEANS_DATA, %struct.KMEANS_DATA* %4, i64 %87, i32 0
  %89 = bitcast double* %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds double, double* %0, i64 %81
  %92 = bitcast double* %91 to i64*
  store i64 %90, i64* %92, align 8
  %93 = add nuw nsw i64 %68, 2
  %94 = add i64 %69, -2
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %23, label %67

96:                                               ; preds = %260
  br i1 %15, label %97, label %263

97:                                               ; preds = %96
  %98 = zext i32 %3 to i64
  %99 = shl nuw nsw i64 %98, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 %99, i1 false)
  br label %263

100:                                              ; preds = %260, %38
  %101 = phi i32 [ 0, %38 ], [ %261, %260 ]
  br i1 %40, label %102, label %213

102:                                              ; preds = %100
  %103 = or i1 %54, %57
  br i1 %103, label %179, label %104

104:                                              ; preds = %102
  br i1 %60, label %154, label %105

105:                                              ; preds = %104, %105
  %106 = phi i64 [ %151, %105 ], [ 0, %104 ]
  %107 = phi i64 [ %152, %105 ], [ %61, %104 ]
  %108 = getelementptr inbounds double, double* %0, i64 %106
  %109 = bitcast double* %108 to <2 x double>*
  %110 = load <2 x double>, <2 x double>* %109, align 8, !alias.scope !11
  %111 = getelementptr inbounds double, double* %108, i64 2
  %112 = bitcast double* %111 to <2 x double>*
  %113 = load <2 x double>, <2 x double>* %112, align 8, !alias.scope !11
  %114 = or i64 %106, 1
  %115 = getelementptr inbounds double, double* %0, i64 %114
  %116 = bitcast double* %115 to <2 x double>*
  %117 = load <2 x double>, <2 x double>* %116, align 8, !alias.scope !11
  %118 = getelementptr inbounds double, double* %115, i64 2
  %119 = bitcast double* %118 to <2 x double>*
  %120 = load <2 x double>, <2 x double>* %119, align 8, !alias.scope !11
  %121 = fadd <2 x double> %110, %117
  %122 = fadd <2 x double> %113, %120
  %123 = fmul <2 x double> %121, <double 5.000000e-01, double 5.000000e-01>
  %124 = fmul <2 x double> %122, <double 5.000000e-01, double 5.000000e-01>
  %125 = getelementptr inbounds double, double* %1, i64 %106
  %126 = bitcast double* %125 to <2 x double>*
  store <2 x double> %123, <2 x double>* %126, align 8, !alias.scope !14, !noalias !11
  %127 = getelementptr inbounds double, double* %125, i64 2
  %128 = bitcast double* %127 to <2 x double>*
  store <2 x double> %124, <2 x double>* %128, align 8, !alias.scope !14, !noalias !11
  %129 = or i64 %106, 4
  %130 = getelementptr inbounds double, double* %0, i64 %129
  %131 = bitcast double* %130 to <2 x double>*
  %132 = load <2 x double>, <2 x double>* %131, align 8, !alias.scope !11
  %133 = getelementptr inbounds double, double* %130, i64 2
  %134 = bitcast double* %133 to <2 x double>*
  %135 = load <2 x double>, <2 x double>* %134, align 8, !alias.scope !11
  %136 = or i64 %106, 5
  %137 = getelementptr inbounds double, double* %0, i64 %136
  %138 = bitcast double* %137 to <2 x double>*
  %139 = load <2 x double>, <2 x double>* %138, align 8, !alias.scope !11
  %140 = getelementptr inbounds double, double* %137, i64 2
  %141 = bitcast double* %140 to <2 x double>*
  %142 = load <2 x double>, <2 x double>* %141, align 8, !alias.scope !11
  %143 = fadd <2 x double> %132, %139
  %144 = fadd <2 x double> %135, %142
  %145 = fmul <2 x double> %143, <double 5.000000e-01, double 5.000000e-01>
  %146 = fmul <2 x double> %144, <double 5.000000e-01, double 5.000000e-01>
  %147 = getelementptr inbounds double, double* %1, i64 %129
  %148 = bitcast double* %147 to <2 x double>*
  store <2 x double> %145, <2 x double>* %148, align 8, !alias.scope !14, !noalias !11
  %149 = getelementptr inbounds double, double* %147, i64 2
  %150 = bitcast double* %149 to <2 x double>*
  store <2 x double> %146, <2 x double>* %150, align 8, !alias.scope !14, !noalias !11
  %151 = add i64 %106, 8
  %152 = add i64 %107, -2
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %105, !llvm.loop !16

154:                                              ; preds = %105, %104
  %155 = phi i64 [ 0, %104 ], [ %151, %105 ]
  br i1 %62, label %178, label %156

156:                                              ; preds = %154
  %157 = getelementptr inbounds double, double* %0, i64 %155
  %158 = bitcast double* %157 to <2 x double>*
  %159 = load <2 x double>, <2 x double>* %158, align 8, !alias.scope !11
  %160 = getelementptr inbounds double, double* %157, i64 2
  %161 = bitcast double* %160 to <2 x double>*
  %162 = load <2 x double>, <2 x double>* %161, align 8, !alias.scope !11
  %163 = or i64 %155, 1
  %164 = getelementptr inbounds double, double* %0, i64 %163
  %165 = bitcast double* %164 to <2 x double>*
  %166 = load <2 x double>, <2 x double>* %165, align 8, !alias.scope !11
  %167 = getelementptr inbounds double, double* %164, i64 2
  %168 = bitcast double* %167 to <2 x double>*
  %169 = load <2 x double>, <2 x double>* %168, align 8, !alias.scope !11
  %170 = fadd <2 x double> %159, %166
  %171 = fadd <2 x double> %162, %169
  %172 = fmul <2 x double> %170, <double 5.000000e-01, double 5.000000e-01>
  %173 = fmul <2 x double> %171, <double 5.000000e-01, double 5.000000e-01>
  %174 = getelementptr inbounds double, double* %1, i64 %155
  %175 = bitcast double* %174 to <2 x double>*
  store <2 x double> %172, <2 x double>* %175, align 8, !alias.scope !14, !noalias !11
  %176 = getelementptr inbounds double, double* %174, i64 2
  %177 = bitcast double* %176 to <2 x double>*
  store <2 x double> %173, <2 x double>* %177, align 8, !alias.scope !14, !noalias !11
  br label %178

178:                                              ; preds = %154, %156
  br i1 %63, label %213, label %179

179:                                              ; preds = %102, %178
  %180 = phi i64 [ 0, %102 ], [ %58, %178 ]
  %181 = xor i64 %180, -1
  br i1 %65, label %191, label %182

182:                                              ; preds = %179
  %183 = getelementptr inbounds double, double* %0, i64 %180
  %184 = load double, double* %183, align 8
  %185 = or i64 %180, 1
  %186 = getelementptr inbounds double, double* %0, i64 %185
  %187 = load double, double* %186, align 8
  %188 = fadd double %184, %187
  %189 = fmul double %188, 5.000000e-01
  %190 = getelementptr inbounds double, double* %1, i64 %180
  store double %189, double* %190, align 8
  br label %191

191:                                              ; preds = %182, %179
  %192 = phi i64 [ %185, %182 ], [ %180, %179 ]
  %193 = icmp eq i64 %181, %66
  br i1 %193, label %213, label %194

194:                                              ; preds = %191, %194
  %195 = phi i64 [ %206, %194 ], [ %192, %191 ]
  %196 = getelementptr inbounds double, double* %0, i64 %195
  %197 = load double, double* %196, align 8
  %198 = add nuw nsw i64 %195, 1
  %199 = getelementptr inbounds double, double* %0, i64 %198
  %200 = load double, double* %199, align 8
  %201 = fadd double %197, %200
  %202 = fmul double %201, 5.000000e-01
  %203 = getelementptr inbounds double, double* %1, i64 %195
  store double %202, double* %203, align 8
  %204 = getelementptr inbounds double, double* %0, i64 %198
  %205 = load double, double* %204, align 8
  %206 = add nuw nsw i64 %195, 2
  %207 = getelementptr inbounds double, double* %0, i64 %206
  %208 = load double, double* %207, align 8
  %209 = fadd double %205, %208
  %210 = fmul double %209, 5.000000e-01
  %211 = getelementptr inbounds double, double* %1, i64 %198
  store double %210, double* %211, align 8
  %212 = icmp eq i64 %206, %41
  br i1 %212, label %213, label %194, !llvm.loop !17

213:                                              ; preds = %191, %194, %178, %100
  store double 0x7FEFFFFFFFFFFFFF, double* %43, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 0, i64 64, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 32, i1 false)
  br i1 %44, label %215, label %214

214:                                              ; preds = %234, %213
  br i1 %15, label %245, label %260

215:                                              ; preds = %213, %234
  %216 = phi i64 [ %243, %234 ], [ 0, %213 ]
  %217 = phi i32 [ %235, %234 ], [ 0, %213 ]
  %218 = getelementptr inbounds %struct.KMEANS_DATA, %struct.KMEANS_DATA* %4, i64 %216, i32 0
  %219 = load double, double* %218, align 8
  %220 = sext i32 %217 to i64
  br label %221

221:                                              ; preds = %215, %227
  %222 = phi i64 [ %220, %215 ], [ %228, %227 ]
  %223 = phi i32 [ %217, %215 ], [ %229, %227 ]
  %224 = getelementptr inbounds double, double* %1, i64 %222
  %225 = load double, double* %224, align 8
  %226 = fcmp ult double %219, %225
  br i1 %226, label %232, label %227

227:                                              ; preds = %221
  %228 = add nsw i64 %222, 1
  %229 = add nsw i32 %223, 1
  %230 = trunc i64 %228 to i32
  %231 = icmp eq i32 %39, %230
  br i1 %231, label %234, label %221

232:                                              ; preds = %221
  %233 = trunc i64 %222 to i32
  br label %234

234:                                              ; preds = %227, %232
  %235 = phi i32 [ %233, %232 ], [ %229, %227 ]
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds [8 x double], [8 x double]* %8, i64 0, i64 %236
  %238 = load double, double* %237, align 8
  %239 = fadd double %219, %238
  store double %239, double* %237, align 8
  %240 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 %236
  %241 = load i32, i32* %240, align 4
  %242 = add nsw i32 %241, 1
  store i32 %242, i32* %240, align 4
  %243 = add nuw nsw i64 %216, 1
  %244 = icmp eq i64 %243, %45
  br i1 %244, label %214, label %215

245:                                              ; preds = %214, %256
  %246 = phi i64 [ %258, %256 ], [ 0, %214 ]
  %247 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 %246
  %248 = load i32, i32* %247, align 4
  %249 = icmp sgt i32 %248, 0
  br i1 %249, label %250, label %256

250:                                              ; preds = %245
  %251 = getelementptr inbounds [8 x double], [8 x double]* %8, i64 0, i64 %246
  %252 = load double, double* %251, align 8
  %253 = sitofp i32 %248 to double
  %254 = fdiv double %252, %253
  %255 = getelementptr inbounds double, double* %0, i64 %246
  store double %254, double* %255, align 8
  br label %256

256:                                              ; preds = %250, %245
  %257 = getelementptr inbounds [8 x double], [8 x double]* %8, i64 0, i64 %246
  store double 0.000000e+00, double* %257, align 8
  store i32 0, i32* %247, align 4
  %258 = add nuw nsw i64 %246, 1
  %259 = icmp eq i64 %258, %46
  br i1 %259, label %260, label %245

260:                                              ; preds = %256, %214
  %261 = add nuw nsw i32 %101, 1
  %262 = icmp eq i32 %261, 10
  br i1 %262, label %96, label %100

263:                                              ; preds = %97, %96
  br i1 %40, label %264, label %395

264:                                              ; preds = %263
  %265 = icmp ult i32 %39, 4
  br i1 %265, label %358, label %266

266:                                              ; preds = %264
  %267 = getelementptr double, double* %1, i64 %41
  %268 = add nuw nsw i64 %41, 1
  %269 = getelementptr double, double* %0, i64 %268
  %270 = icmp ugt double* %269, %1
  %271 = icmp ugt double* %267, %0
  %272 = and i1 %270, %271
  br i1 %272, label %358, label %273

273:                                              ; preds = %266
  %274 = and i64 %41, 4294967292
  %275 = add nsw i64 %274, -4
  %276 = lshr exact i64 %275, 2
  %277 = add nuw nsw i64 %276, 1
  %278 = and i64 %277, 1
  %279 = icmp eq i64 %275, 0
  br i1 %279, label %331, label %280

280:                                              ; preds = %273
  %281 = sub nuw nsw i64 %277, %278
  br label %282

282:                                              ; preds = %282, %280
  %283 = phi i64 [ 0, %280 ], [ %328, %282 ]
  %284 = phi i64 [ %281, %280 ], [ %329, %282 ]
  %285 = getelementptr inbounds double, double* %0, i64 %283
  %286 = bitcast double* %285 to <2 x double>*
  %287 = load <2 x double>, <2 x double>* %286, align 8, !alias.scope !18
  %288 = getelementptr inbounds double, double* %285, i64 2
  %289 = bitcast double* %288 to <2 x double>*
  %290 = load <2 x double>, <2 x double>* %289, align 8, !alias.scope !18
  %291 = or i64 %283, 1
  %292 = getelementptr inbounds double, double* %0, i64 %291
  %293 = bitcast double* %292 to <2 x double>*
  %294 = load <2 x double>, <2 x double>* %293, align 8, !alias.scope !18
  %295 = getelementptr inbounds double, double* %292, i64 2
  %296 = bitcast double* %295 to <2 x double>*
  %297 = load <2 x double>, <2 x double>* %296, align 8, !alias.scope !18
  %298 = fadd <2 x double> %287, %294
  %299 = fadd <2 x double> %290, %297
  %300 = fmul <2 x double> %298, <double 5.000000e-01, double 5.000000e-01>
  %301 = fmul <2 x double> %299, <double 5.000000e-01, double 5.000000e-01>
  %302 = getelementptr inbounds double, double* %1, i64 %283
  %303 = bitcast double* %302 to <2 x double>*
  store <2 x double> %300, <2 x double>* %303, align 8, !alias.scope !21, !noalias !18
  %304 = getelementptr inbounds double, double* %302, i64 2
  %305 = bitcast double* %304 to <2 x double>*
  store <2 x double> %301, <2 x double>* %305, align 8, !alias.scope !21, !noalias !18
  %306 = or i64 %283, 4
  %307 = getelementptr inbounds double, double* %0, i64 %306
  %308 = bitcast double* %307 to <2 x double>*
  %309 = load <2 x double>, <2 x double>* %308, align 8, !alias.scope !18
  %310 = getelementptr inbounds double, double* %307, i64 2
  %311 = bitcast double* %310 to <2 x double>*
  %312 = load <2 x double>, <2 x double>* %311, align 8, !alias.scope !18
  %313 = or i64 %283, 5
  %314 = getelementptr inbounds double, double* %0, i64 %313
  %315 = bitcast double* %314 to <2 x double>*
  %316 = load <2 x double>, <2 x double>* %315, align 8, !alias.scope !18
  %317 = getelementptr inbounds double, double* %314, i64 2
  %318 = bitcast double* %317 to <2 x double>*
  %319 = load <2 x double>, <2 x double>* %318, align 8, !alias.scope !18
  %320 = fadd <2 x double> %309, %316
  %321 = fadd <2 x double> %312, %319
  %322 = fmul <2 x double> %320, <double 5.000000e-01, double 5.000000e-01>
  %323 = fmul <2 x double> %321, <double 5.000000e-01, double 5.000000e-01>
  %324 = getelementptr inbounds double, double* %1, i64 %306
  %325 = bitcast double* %324 to <2 x double>*
  store <2 x double> %322, <2 x double>* %325, align 8, !alias.scope !21, !noalias !18
  %326 = getelementptr inbounds double, double* %324, i64 2
  %327 = bitcast double* %326 to <2 x double>*
  store <2 x double> %323, <2 x double>* %327, align 8, !alias.scope !21, !noalias !18
  %328 = add i64 %283, 8
  %329 = add i64 %284, -2
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %331, label %282, !llvm.loop !23

331:                                              ; preds = %282, %273
  %332 = phi i64 [ 0, %273 ], [ %328, %282 ]
  %333 = icmp eq i64 %278, 0
  br i1 %333, label %356, label %334

334:                                              ; preds = %331
  %335 = getelementptr inbounds double, double* %0, i64 %332
  %336 = bitcast double* %335 to <2 x double>*
  %337 = load <2 x double>, <2 x double>* %336, align 8, !alias.scope !18
  %338 = getelementptr inbounds double, double* %335, i64 2
  %339 = bitcast double* %338 to <2 x double>*
  %340 = load <2 x double>, <2 x double>* %339, align 8, !alias.scope !18
  %341 = or i64 %332, 1
  %342 = getelementptr inbounds double, double* %0, i64 %341
  %343 = bitcast double* %342 to <2 x double>*
  %344 = load <2 x double>, <2 x double>* %343, align 8, !alias.scope !18
  %345 = getelementptr inbounds double, double* %342, i64 2
  %346 = bitcast double* %345 to <2 x double>*
  %347 = load <2 x double>, <2 x double>* %346, align 8, !alias.scope !18
  %348 = fadd <2 x double> %337, %344
  %349 = fadd <2 x double> %340, %347
  %350 = fmul <2 x double> %348, <double 5.000000e-01, double 5.000000e-01>
  %351 = fmul <2 x double> %349, <double 5.000000e-01, double 5.000000e-01>
  %352 = getelementptr inbounds double, double* %1, i64 %332
  %353 = bitcast double* %352 to <2 x double>*
  store <2 x double> %350, <2 x double>* %353, align 8, !alias.scope !21, !noalias !18
  %354 = getelementptr inbounds double, double* %352, i64 2
  %355 = bitcast double* %354 to <2 x double>*
  store <2 x double> %351, <2 x double>* %355, align 8, !alias.scope !21, !noalias !18
  br label %356

356:                                              ; preds = %331, %334
  %357 = icmp eq i64 %274, %41
  br i1 %357, label %395, label %358

358:                                              ; preds = %356, %266, %264
  %359 = phi i64 [ 0, %266 ], [ 0, %264 ], [ %274, %356 ]
  %360 = xor i64 %359, -1
  %361 = and i64 %41, 1
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %372, label %363

363:                                              ; preds = %358
  %364 = getelementptr inbounds double, double* %0, i64 %359
  %365 = load double, double* %364, align 8
  %366 = or i64 %359, 1
  %367 = getelementptr inbounds double, double* %0, i64 %366
  %368 = load double, double* %367, align 8
  %369 = fadd double %365, %368
  %370 = fmul double %369, 5.000000e-01
  %371 = getelementptr inbounds double, double* %1, i64 %359
  store double %370, double* %371, align 8
  br label %372

372:                                              ; preds = %358, %363
  %373 = phi i64 [ %359, %358 ], [ %366, %363 ]
  %374 = sub nsw i64 0, %41
  %375 = icmp eq i64 %360, %374
  br i1 %375, label %395, label %376

376:                                              ; preds = %372, %376
  %377 = phi i64 [ %388, %376 ], [ %373, %372 ]
  %378 = getelementptr inbounds double, double* %0, i64 %377
  %379 = load double, double* %378, align 8
  %380 = add nuw nsw i64 %377, 1
  %381 = getelementptr inbounds double, double* %0, i64 %380
  %382 = load double, double* %381, align 8
  %383 = fadd double %379, %382
  %384 = fmul double %383, 5.000000e-01
  %385 = getelementptr inbounds double, double* %1, i64 %377
  store double %384, double* %385, align 8
  %386 = getelementptr inbounds double, double* %0, i64 %380
  %387 = load double, double* %386, align 8
  %388 = add nuw nsw i64 %377, 2
  %389 = getelementptr inbounds double, double* %0, i64 %388
  %390 = load double, double* %389, align 8
  %391 = fadd double %387, %390
  %392 = fmul double %391, 5.000000e-01
  %393 = getelementptr inbounds double, double* %1, i64 %380
  store double %392, double* %393, align 8
  %394 = icmp eq i64 %388, %41
  br i1 %394, label %395, label %376, !llvm.loop !24

395:                                              ; preds = %372, %376, %356, %263
  store double 0x7FEFFFFFFFFFFFFF, double* %43, align 8
  br i1 %44, label %396, label %426

396:                                              ; preds = %395
  %397 = zext i32 %5 to i64
  br label %398

398:                                              ; preds = %417, %396
  %399 = phi i64 [ 0, %396 ], [ %424, %417 ]
  %400 = phi i32 [ 0, %396 ], [ %418, %417 ]
  %401 = getelementptr inbounds %struct.KMEANS_DATA, %struct.KMEANS_DATA* %4, i64 %399, i32 0
  %402 = load double, double* %401, align 8
  %403 = sext i32 %400 to i64
  br label %404

404:                                              ; preds = %398, %410
  %405 = phi i64 [ %403, %398 ], [ %411, %410 ]
  %406 = phi i32 [ %400, %398 ], [ %412, %410 ]
  %407 = getelementptr inbounds double, double* %1, i64 %405
  %408 = load double, double* %407, align 8
  %409 = fcmp ult double %402, %408
  br i1 %409, label %415, label %410

410:                                              ; preds = %404
  %411 = add nsw i64 %405, 1
  %412 = add nsw i32 %406, 1
  %413 = trunc i64 %411 to i32
  %414 = icmp eq i32 %39, %413
  br i1 %414, label %417, label %404

415:                                              ; preds = %404
  %416 = trunc i64 %405 to i32
  br label %417

417:                                              ; preds = %410, %415
  %418 = phi i32 [ %416, %415 ], [ %412, %410 ]
  %419 = getelementptr inbounds %struct.KMEANS_DATA, %struct.KMEANS_DATA* %4, i64 %399, i32 2
  store i32 %418, i32* %419, align 4
  %420 = sext i32 %418 to i64
  %421 = getelementptr inbounds i32, i32* %2, i64 %420
  %422 = load i32, i32* %421, align 4
  %423 = add nsw i32 %422, 1
  store i32 %423, i32* %421, align 4
  %424 = add nuw nsw i64 %399, 1
  %425 = icmp eq i64 %424, %397
  br i1 %425, label %426, label %398

426:                                              ; preds = %417, %395
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @vpx_clear_system_state() local_unnamed_addr #2

; Function Attrs: nofree
declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @compare_kmeans_data(i8* nocapture readonly, i8* nocapture readonly) #3 {
  %3 = bitcast i8* %0 to double*
  %4 = load double, double* %3, align 8
  %5 = bitcast i8* %1 to double*
  %6 = load double, double* %5, align 8
  %7 = fcmp ogt double %4, %6
  %8 = fcmp olt double %4, %6
  %9 = sext i1 %8 to i32
  %10 = select i1 %7, i32 1, i32 %9
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_encode_frame(%struct.VP9_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8
  %3 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %8 = load i8, i8* %7, align 4
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = tail call i32 @vp9_compound_reference_allowed(%struct.VP9Common* %2) #8
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 78
  br i1 %12, label %15, label %14

14:                                               ; preds = %10
  store i32 1, i32* %13, align 8
  tail call void @vp9_setup_compound_reference_mode(%struct.VP9Common* %2) #8
  br label %16

15:                                               ; preds = %10
  store i32 0, i32* %13, align 8
  br label %16

16:                                               ; preds = %1, %6, %14, %15
  %17 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 2
  %21 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %20, align 8
  br i1 %19, label %435, label %22

22:                                               ; preds = %16
  %23 = load i32, i32* %3, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %41, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %27 = load i8, i8* %26, align 4
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %41

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 24
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 41
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %44

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 42
  %38 = load i32, i32* %37, align 16
  %39 = icmp eq i32 %38, 0
  %40 = select i1 %39, i64 1, i64 2
  br label %41

41:                                               ; preds = %36, %25, %22
  %42 = phi i64 [ 0, %22 ], [ 0, %25 ], [ %40, %36 ]
  %43 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 4, i64 %42, i64 0
  br label %47

44:                                               ; preds = %29
  %45 = select i1 %32, i64 2, i64 3
  %46 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 4, i64 %45, i64 0
  br i1 %32, label %47, label %53

47:                                               ; preds = %44, %41
  %48 = phi i64* [ %43, %41 ], [ %46, %44 ]
  %49 = phi i64 [ %42, %41 ], [ 2, %44 ]
  %50 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 78
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %58

53:                                               ; preds = %44, %47
  %54 = phi i32 [ 0, %47 ], [ 1, %44 ]
  %55 = phi i64* [ %48, %47 ], [ %46, %44 ]
  %56 = phi i64 [ %49, %47 ], [ 3, %44 ]
  %57 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 72
  store i32 0, i32* %57, align 16
  br label %99

58:                                               ; preds = %47
  %59 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 3, i64 %49, i64 0
  %60 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 3, i64 %49, i64 1
  %61 = load i64, i64* %60, align 8
  %62 = load i64, i64* %59, align 8
  %63 = icmp sgt i64 %61, %62
  %64 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 3, i64 %49, i64 2
  %65 = load i64, i64* %64, align 8
  %66 = icmp sgt i64 %61, %65
  %67 = and i1 %63, %66
  br i1 %67, label %68, label %94

68:                                               ; preds = %58
  %69 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 74
  %70 = load i32, i32* %69, align 16
  %71 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 0
  %72 = load i8, i8* %71, align 4
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %79, label %74

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 1
  %76 = load i32, i32* %75, align 4
  %77 = and i32 %76, 4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %94

79:                                               ; preds = %68, %74
  %80 = lshr i32 %70, 1
  %81 = and i32 %80, 1
  %82 = and i32 %70, 1
  %83 = add nuw nsw i32 %81, %82
  %84 = lshr i32 %70, 2
  %85 = and i32 %84, 1
  %86 = add nuw nsw i32 %83, %85
  %87 = icmp ult i32 %86, 2
  br i1 %87, label %94, label %88

88:                                               ; preds = %79
  %89 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 73
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 100
  br i1 %91, label %92, label %94

92:                                               ; preds = %88
  %93 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 72
  store i32 1, i32* %93, align 16
  br label %99

94:                                               ; preds = %58, %74, %79, %88
  %95 = icmp sgt i64 %62, %65
  %96 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 72
  br i1 %95, label %97, label %98

97:                                               ; preds = %94
  store i32 0, i32* %96, align 16
  br label %99

98:                                               ; preds = %94
  store i32 2, i32* %96, align 16
  br label %99

99:                                               ; preds = %92, %98, %97, %53
  %100 = phi i32 [ 0, %92 ], [ 0, %98 ], [ 0, %97 ], [ %54, %53 ]
  %101 = phi i64* [ %48, %92 ], [ %48, %98 ], [ %48, %97 ], [ %55, %53 ]
  %102 = phi i64 [ %49, %92 ], [ %49, %98 ], [ %49, %97 ], [ %56, %53 ]
  %103 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 63
  %104 = load i8, i8* %103, align 4
  %105 = icmp eq i8 %104, 4
  br i1 %105, label %106, label %137

106:                                              ; preds = %99
  %107 = icmp eq i32 %100, 0
  br i1 %107, label %110, label %108

108:                                              ; preds = %106
  %109 = load i64, i64* %101, align 8
  br label %123

110:                                              ; preds = %106
  %111 = getelementptr inbounds i64, i64* %101, i64 1
  %112 = load i64, i64* %111, align 8
  %113 = load i64, i64* %101, align 8
  %114 = icmp sgt i64 %112, %113
  br i1 %114, label %115, label %123

115:                                              ; preds = %110
  %116 = getelementptr inbounds i64, i64* %101, i64 2
  %117 = load i64, i64* %116, align 8
  %118 = icmp sgt i64 %112, %117
  br i1 %118, label %119, label %123

119:                                              ; preds = %115
  %120 = getelementptr inbounds i64, i64* %101, i64 3
  %121 = load i64, i64* %120, align 8
  %122 = icmp sgt i64 %112, %121
  br i1 %122, label %135, label %123

123:                                              ; preds = %119, %115, %110, %108
  %124 = phi i64 [ %109, %108 ], [ %113, %119 ], [ %113, %115 ], [ %113, %110 ]
  %125 = getelementptr inbounds i64, i64* %101, i64 2
  %126 = load i64, i64* %125, align 8
  %127 = icmp sgt i64 %126, %124
  %128 = getelementptr inbounds i64, i64* %101, i64 3
  %129 = load i64, i64* %128, align 8
  %130 = icmp sgt i64 %126, %129
  %131 = and i1 %127, %130
  br i1 %131, label %135, label %132

132:                                              ; preds = %123
  %133 = icmp sgt i64 %124, %129
  %134 = select i1 %133, i8 0, i8 4
  br label %135

135:                                              ; preds = %119, %123, %132
  %136 = phi i8 [ 1, %119 ], [ %134, %132 ], [ 2, %123 ]
  store i8 %136, i8* %103, align 4
  br label %137

137:                                              ; preds = %135, %99
  tail call fastcc void @encode_frame_internal(%struct.VP9_COMP* %0)
  %138 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 31
  %139 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 3, i64 %102, i64 0
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 1, i32 1, i64 0
  %142 = load i64, i64* %141, align 8
  %143 = load i32, i32* %138, align 8
  %144 = sext i32 %143 to i64
  %145 = sdiv i64 %142, %144
  %146 = add nsw i64 %145, %140
  %147 = sdiv i64 %146, 2
  store i64 %147, i64* %139, align 8
  %148 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 3, i64 %102, i64 1
  %149 = load i64, i64* %148, align 8
  %150 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 1, i32 1, i64 1
  %151 = load i64, i64* %150, align 8
  %152 = load i32, i32* %138, align 8
  %153 = sext i32 %152 to i64
  %154 = sdiv i64 %151, %153
  %155 = add nsw i64 %154, %149
  %156 = sdiv i64 %155, 2
  store i64 %156, i64* %148, align 8
  %157 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 3, i64 %102, i64 2
  %158 = load i64, i64* %157, align 8
  %159 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 1, i32 1, i64 2
  %160 = load i64, i64* %159, align 8
  %161 = load i32, i32* %138, align 8
  %162 = sext i32 %161 to i64
  %163 = sdiv i64 %160, %162
  %164 = add nsw i64 %163, %158
  %165 = sdiv i64 %164, 2
  store i64 %165, i64* %157, align 8
  %166 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 4, i64 %102, i64 0
  %167 = load i64, i64* %166, align 8
  %168 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 1, i32 2, i64 0
  %169 = load i64, i64* %168, align 8
  %170 = load i32, i32* %138, align 8
  %171 = sext i32 %170 to i64
  %172 = sdiv i64 %169, %171
  %173 = add nsw i64 %172, %167
  %174 = sdiv i64 %173, 2
  store i64 %174, i64* %166, align 8
  %175 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 4, i64 %102, i64 1
  %176 = load i64, i64* %175, align 8
  %177 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 1, i32 2, i64 1
  %178 = load i64, i64* %177, align 8
  %179 = sdiv i64 %178, %171
  %180 = add nsw i64 %179, %176
  %181 = sdiv i64 %180, 2
  store i64 %181, i64* %175, align 8
  %182 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 4, i64 %102, i64 2
  %183 = load i64, i64* %182, align 8
  %184 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 1, i32 2, i64 2
  %185 = load i64, i64* %184, align 8
  %186 = sdiv i64 %185, %171
  %187 = add nsw i64 %186, %183
  %188 = sdiv i64 %187, 2
  store i64 %188, i64* %182, align 8
  %189 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 4, i64 %102, i64 3
  %190 = load i64, i64* %189, align 8
  %191 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 1, i32 2, i64 3
  %192 = load i64, i64* %191, align 8
  %193 = load i32, i32* %138, align 8
  %194 = sext i32 %193 to i64
  %195 = sdiv i64 %192, %194
  %196 = add nsw i64 %195, %190
  %197 = sdiv i64 %196, 2
  store i64 %197, i64* %189, align 8
  %198 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 72
  %199 = load i32, i32* %198, align 16
  %200 = icmp eq i32 %199, 2
  br i1 %200, label %201, label %239

201:                                              ; preds = %137
  %202 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 0, i64 1
  %203 = load i32, i32* %202, align 4
  %204 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 1, i64 1
  %205 = load i32, i32* %204, align 4
  %206 = add i32 %205, %203
  %207 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 2, i64 1
  %208 = load i32, i32* %207, align 4
  %209 = add i32 %208, %206
  %210 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 3, i64 1
  %211 = load i32, i32* %210, align 4
  %212 = add i32 %211, %209
  %213 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 4, i64 1
  %214 = load i32, i32* %213, align 4
  %215 = sub i32 0, %212
  %216 = icmp eq i32 %214, %215
  br i1 %216, label %217, label %220

217:                                              ; preds = %201
  store i32 0, i32* %198, align 16
  %218 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8
  %219 = bitcast [5 x [2 x i32]]* %218 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %219, i8 0, i64 40, i1 false)
  br label %239

220:                                              ; preds = %201
  %221 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 4, i64 0
  %222 = load i32, i32* %221, align 4
  %223 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 3, i64 0
  %224 = load i32, i32* %223, align 4
  %225 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 2, i64 0
  %226 = load i32, i32* %225, align 4
  %227 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 1, i64 0
  %228 = load i32, i32* %227, align 4
  %229 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 0, i64 0
  %230 = load i32, i32* %229, align 4
  %231 = add i32 %228, %230
  %232 = add i32 %226, %231
  %233 = add i32 %224, %232
  %234 = sub i32 0, %233
  %235 = icmp eq i32 %222, %234
  br i1 %235, label %236, label %239

236:                                              ; preds = %220
  store i32 1, i32* %198, align 16
  %237 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8
  %238 = bitcast [5 x [2 x i32]]* %237 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %238, i8 0, i64 40, i1 false)
  br label %239

239:                                              ; preds = %217, %236, %220, %137
  %240 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 37
  %241 = load i32, i32* %240, align 16
  %242 = icmp eq i32 %241, 4
  br i1 %242, label %243, label %497

243:                                              ; preds = %239
  %244 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 0, i64 0, i64 0
  %245 = load i32, i32* %244, align 4
  %246 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 1, i64 0, i64 0
  %247 = load i32, i32* %246, align 4
  %248 = add i32 %245, %247
  %249 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 2, i64 0, i64 0
  %250 = load i32, i32* %249, align 4
  %251 = add i32 %248, %250
  %252 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 0, i64 0, i64 1
  %253 = load i32, i32* %252, align 4
  %254 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 1, i64 0, i64 1
  %255 = load i32, i32* %254, align 4
  %256 = add i32 %253, %255
  %257 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 1, i64 0, i64 2
  %258 = load i32, i32* %257, align 4
  %259 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 0, i64 0, i64 2
  %260 = load i32, i32* %259, align 4
  %261 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 0, i64 0, i64 3
  %262 = load i32, i32* %261, align 4
  %263 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 0, i64 1, i64 0
  %264 = load i32, i32* %263, align 4
  %265 = add i32 %264, %251
  %266 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 1, i64 1, i64 0
  %267 = load i32, i32* %266, align 4
  %268 = add i32 %265, %267
  %269 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 2, i64 1, i64 0
  %270 = load i32, i32* %269, align 4
  %271 = add i32 %268, %270
  %272 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 0, i64 1, i64 1
  %273 = load i32, i32* %272, align 4
  %274 = add i32 %273, %256
  %275 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 1, i64 1, i64 1
  %276 = load i32, i32* %275, align 4
  %277 = add i32 %274, %276
  %278 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 1, i64 1, i64 2
  %279 = load i32, i32* %278, align 4
  %280 = add i32 %279, %258
  %281 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 0, i64 1, i64 2
  %282 = load i32, i32* %281, align 4
  %283 = add i32 %282, %260
  %284 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 0, i64 1, i64 3
  %285 = load i32, i32* %284, align 4
  %286 = add i32 %285, %262
  %287 = or i32 %283, %280
  %288 = or i32 %287, %271
  %289 = or i32 %288, %286
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %291, label %334

291:                                              ; preds = %243
  store i32 1, i32* %240, align 16
  %292 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %293 = load i32, i32* %292, align 16
  %294 = icmp sgt i32 %293, 0
  br i1 %294, label %295, label %497

295:                                              ; preds = %291
  %296 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %297 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %296, align 8
  %298 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 36
  %299 = load i32, i32* %298, align 4
  %300 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %301 = sext i32 %299 to i64
  %302 = load i32, i32* %300, align 8
  br label %303

303:                                              ; preds = %327, %295
  %304 = phi i32 [ %293, %295 ], [ %328, %327 ]
  %305 = phi i32 [ %302, %295 ], [ %329, %327 ]
  %306 = phi i32 [ %302, %295 ], [ %330, %327 ]
  %307 = phi %struct.MODE_INFO** [ %297, %295 ], [ %332, %327 ]
  %308 = phi i32 [ 0, %295 ], [ %331, %327 ]
  %309 = icmp sgt i32 %306, 0
  br i1 %309, label %310, label %327

310:                                              ; preds = %303, %320
  %311 = phi i32 [ %321, %320 ], [ %305, %303 ]
  %312 = phi i64 [ %322, %320 ], [ 0, %303 ]
  %313 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %307, i64 %312
  %314 = load %struct.MODE_INFO*, %struct.MODE_INFO** %313, align 8
  %315 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %314, i64 0, i32 2
  %316 = load i8, i8* %315, align 2
  %317 = icmp ugt i8 %316, 1
  br i1 %317, label %318, label %320

318:                                              ; preds = %310
  store i8 1, i8* %315, align 2
  %319 = load i32, i32* %300, align 8
  br label %320

320:                                              ; preds = %318, %310
  %321 = phi i32 [ %311, %310 ], [ %319, %318 ]
  %322 = add nuw nsw i64 %312, 1
  %323 = sext i32 %321 to i64
  %324 = icmp slt i64 %322, %323
  br i1 %324, label %310, label %325

325:                                              ; preds = %320
  %326 = load i32, i32* %292, align 16
  br label %327

327:                                              ; preds = %325, %303
  %328 = phi i32 [ %304, %303 ], [ %326, %325 ]
  %329 = phi i32 [ %305, %303 ], [ %321, %325 ]
  %330 = phi i32 [ %306, %303 ], [ %321, %325 ]
  %331 = add nuw nsw i32 %308, 1
  %332 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %307, i64 %301
  %333 = icmp slt i32 %331, %328
  br i1 %333, label %303, label %497

334:                                              ; preds = %243
  %335 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 2, i64 1, i64 1
  %336 = load i32, i32* %335, align 4
  %337 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 11, i32 2, i64 0, i64 1
  %338 = load i32, i32* %337, align 4
  %339 = add i32 %336, %338
  %340 = or i32 %287, %277
  %341 = or i32 %340, %339
  %342 = or i32 %341, %286
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %344, label %384

344:                                              ; preds = %334
  store i32 0, i32* %240, align 16
  %345 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %346 = load i32, i32* %345, align 16
  %347 = icmp sgt i32 %346, 0
  br i1 %347, label %348, label %497

348:                                              ; preds = %344
  %349 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %350 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %349, align 8
  %351 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 36
  %352 = load i32, i32* %351, align 4
  %353 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %354 = sext i32 %352 to i64
  %355 = load i32, i32* %353, align 8
  br label %356

356:                                              ; preds = %377, %348
  %357 = phi i32 [ %355, %348 ], [ %378, %377 ]
  %358 = phi i32 [ %355, %348 ], [ %379, %377 ]
  %359 = phi %struct.MODE_INFO** [ %350, %348 ], [ %381, %377 ]
  %360 = phi i32 [ 0, %348 ], [ %380, %377 ]
  %361 = icmp sgt i32 %358, 0
  br i1 %361, label %362, label %377

362:                                              ; preds = %356, %372
  %363 = phi i32 [ %373, %372 ], [ %357, %356 ]
  %364 = phi i64 [ %374, %372 ], [ 0, %356 ]
  %365 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %359, i64 %364
  %366 = load %struct.MODE_INFO*, %struct.MODE_INFO** %365, align 8
  %367 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %366, i64 0, i32 2
  %368 = load i8, i8* %367, align 2
  %369 = icmp eq i8 %368, 0
  br i1 %369, label %372, label %370

370:                                              ; preds = %362
  store i8 0, i8* %367, align 2
  %371 = load i32, i32* %353, align 8
  br label %372

372:                                              ; preds = %362, %370
  %373 = phi i32 [ %363, %362 ], [ %371, %370 ]
  %374 = add nuw nsw i64 %364, 1
  %375 = sext i32 %373 to i64
  %376 = icmp slt i64 %374, %375
  br i1 %376, label %362, label %377

377:                                              ; preds = %372, %356
  %378 = phi i32 [ %357, %356 ], [ %373, %372 ]
  %379 = phi i32 [ %358, %356 ], [ %373, %372 ]
  %380 = add nuw nsw i32 %360, 1
  %381 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %359, i64 %354
  %382 = load i32, i32* %345, align 16
  %383 = icmp slt i32 %380, %382
  br i1 %383, label %356, label %497

384:                                              ; preds = %334
  %385 = or i32 %277, %271
  %386 = or i32 %385, %283
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %388, label %389

388:                                              ; preds = %384
  store i32 3, i32* %240, align 16
  br label %497

389:                                              ; preds = %384
  %390 = or i32 %385, %286
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %392, label %497

392:                                              ; preds = %389
  store i32 2, i32* %240, align 16
  %393 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %394 = load i32, i32* %393, align 16
  %395 = icmp sgt i32 %394, 0
  br i1 %395, label %396, label %497

396:                                              ; preds = %392
  %397 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %398 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %397, align 8
  %399 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 36
  %400 = load i32, i32* %399, align 4
  %401 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %402 = sext i32 %400 to i64
  %403 = load i32, i32* %401, align 8
  br label %404

404:                                              ; preds = %428, %396
  %405 = phi i32 [ %394, %396 ], [ %429, %428 ]
  %406 = phi i32 [ %403, %396 ], [ %430, %428 ]
  %407 = phi i32 [ %403, %396 ], [ %431, %428 ]
  %408 = phi %struct.MODE_INFO** [ %398, %396 ], [ %433, %428 ]
  %409 = phi i32 [ 0, %396 ], [ %432, %428 ]
  %410 = icmp sgt i32 %407, 0
  br i1 %410, label %411, label %428

411:                                              ; preds = %404, %421
  %412 = phi i32 [ %422, %421 ], [ %406, %404 ]
  %413 = phi i64 [ %423, %421 ], [ 0, %404 ]
  %414 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %408, i64 %413
  %415 = load %struct.MODE_INFO*, %struct.MODE_INFO** %414, align 8
  %416 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %415, i64 0, i32 2
  %417 = load i8, i8* %416, align 2
  %418 = icmp ugt i8 %417, 2
  br i1 %418, label %419, label %421

419:                                              ; preds = %411
  store i8 2, i8* %416, align 2
  %420 = load i32, i32* %401, align 8
  br label %421

421:                                              ; preds = %419, %411
  %422 = phi i32 [ %412, %411 ], [ %420, %419 ]
  %423 = add nuw nsw i64 %413, 1
  %424 = sext i32 %422 to i64
  %425 = icmp slt i64 %423, %424
  br i1 %425, label %411, label %426

426:                                              ; preds = %421
  %427 = load i32, i32* %393, align 16
  br label %428

428:                                              ; preds = %426, %404
  %429 = phi i32 [ %405, %404 ], [ %427, %426 ]
  %430 = phi i32 [ %406, %404 ], [ %422, %426 ]
  %431 = phi i32 [ %407, %404 ], [ %422, %426 ]
  %432 = add nuw nsw i32 %409, 1
  %433 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %408, i64 %402
  %434 = icmp slt i32 %432, %429
  br i1 %434, label %404, label %497

435:                                              ; preds = %16
  %436 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 72
  store i32 0, i32* %436, align 16
  %437 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 78
  %438 = load i32, i32* %437, align 8
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %456, label %440

440:                                              ; preds = %435
  %441 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 89
  %442 = load i32, i32* %441, align 4
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %456, label %444

444:                                              ; preds = %440
  %445 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 69
  %446 = load i32, i32* %445, align 8
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %456, label %448

448:                                              ; preds = %444
  %449 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 24
  %450 = load i32, i32* %449, align 4
  %451 = icmp eq i32 %450, 0
  br i1 %451, label %452, label %456

452:                                              ; preds = %448
  %453 = load i32, i32* %3, align 4
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %456, label %455

455:                                              ; preds = %452
  store i32 2, i32* %436, align 16
  br label %456

456:                                              ; preds = %452, %448, %444, %440, %435, %455
  tail call fastcc void @encode_frame_internal(%struct.VP9_COMP* %0)
  %457 = load i32, i32* %436, align 16
  %458 = icmp eq i32 %457, 2
  br i1 %458, label %459, label %497

459:                                              ; preds = %456
  %460 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 0, i64 1
  %461 = load i32, i32* %460, align 4
  %462 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 1, i64 1
  %463 = load i32, i32* %462, align 4
  %464 = add i32 %463, %461
  %465 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 2, i64 1
  %466 = load i32, i32* %465, align 4
  %467 = add i32 %466, %464
  %468 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 3, i64 1
  %469 = load i32, i32* %468, align 4
  %470 = add i32 %469, %467
  %471 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 4, i64 1
  %472 = load i32, i32* %471, align 4
  %473 = sub i32 0, %470
  %474 = icmp eq i32 %472, %473
  br i1 %474, label %475, label %478

475:                                              ; preds = %459
  store i32 0, i32* %436, align 16
  %476 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8
  %477 = bitcast [5 x [2 x i32]]* %476 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %477, i8 0, i64 40, i1 false)
  br label %497

478:                                              ; preds = %459
  %479 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 4, i64 0
  %480 = load i32, i32* %479, align 4
  %481 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 3, i64 0
  %482 = load i32, i32* %481, align 4
  %483 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 2, i64 0
  %484 = load i32, i32* %483, align 4
  %485 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 1, i64 0
  %486 = load i32, i32* %485, align 4
  %487 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8, i64 0, i64 0
  %488 = load i32, i32* %487, align 4
  %489 = add i32 %486, %488
  %490 = add i32 %484, %489
  %491 = add i32 %482, %490
  %492 = sub i32 0, %491
  %493 = icmp eq i32 %480, %492
  br i1 %493, label %494, label %497

494:                                              ; preds = %478
  store i32 1, i32* %436, align 16
  %495 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %21, i64 0, i32 8
  %496 = bitcast [5 x [2 x i32]]* %495 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %496, i8 0, i64 40, i1 false)
  br label %497

497:                                              ; preds = %428, %377, %327, %392, %344, %291, %456, %478, %494, %475, %239, %389, %388
  %498 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 0
  %499 = load i8, i8* %498, align 8
  %500 = icmp eq i8 %499, 0
  br i1 %500, label %611, label %501

501:                                              ; preds = %497
  %502 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 31
  %503 = load i32, i32* %502, align 4
  %504 = icmp eq i32 %503, 0
  br i1 %504, label %611, label %505

505:                                              ; preds = %501
  %506 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 1
  %507 = load i8, i8* %506, align 1
  %508 = icmp eq i8 %507, 0
  br i1 %508, label %509, label %513

509:                                              ; preds = %505
  %510 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 2
  %511 = load i8, i8* %510, align 2
  %512 = icmp eq i8 %511, 0
  br i1 %512, label %611, label %513

513:                                              ; preds = %509, %505
  %514 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %515 = load i32, i32* %514, align 16
  %516 = icmp sgt i32 %515, 0
  br i1 %516, label %520, label %517

517:                                              ; preds = %513
  %518 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %519 = load i32, i32* %518, align 8
  br label %605

520:                                              ; preds = %513
  %521 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %522 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %521, align 8
  %523 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %524 = load i32, i32* %523, align 8
  %525 = icmp sgt i32 %524, 0
  %526 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 36
  %527 = load i32, i32* %526, align 4
  %528 = sext i32 %527 to i64
  %529 = add i32 %524, -1
  %530 = and i32 %524, 3
  %531 = icmp ult i32 %529, 3
  %532 = sub i32 %524, %530
  %533 = icmp eq i32 %530, 0
  br label %534

534:                                              ; preds = %600, %520
  %535 = phi i32 [ 0, %520 ], [ %601, %600 ]
  %536 = phi i32 [ 0, %520 ], [ %603, %600 ]
  %537 = phi %struct.MODE_INFO** [ %522, %520 ], [ %602, %600 ]
  br i1 %525, label %538, label %600

538:                                              ; preds = %534
  br i1 %531, label %581, label %539

539:                                              ; preds = %538, %539
  %540 = phi %struct.MODE_INFO** [ %578, %539 ], [ %537, %538 ]
  %541 = phi i32 [ %577, %539 ], [ %535, %538 ]
  %542 = phi i32 [ %579, %539 ], [ %532, %538 ]
  %543 = load %struct.MODE_INFO*, %struct.MODE_INFO** %540, align 8
  %544 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %543, i64 0, i32 4
  %545 = load i8, i8* %544, align 4
  %546 = sext i8 %545 to i64
  %547 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 7, i64 %546, i64 0
  %548 = load i16, i16* %547, align 2
  %549 = sext i16 %548 to i32
  %550 = add nsw i32 %541, %549
  %551 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %540, i64 1
  %552 = load %struct.MODE_INFO*, %struct.MODE_INFO** %551, align 8
  %553 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %552, i64 0, i32 4
  %554 = load i8, i8* %553, align 4
  %555 = sext i8 %554 to i64
  %556 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 7, i64 %555, i64 0
  %557 = load i16, i16* %556, align 2
  %558 = sext i16 %557 to i32
  %559 = add nsw i32 %550, %558
  %560 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %540, i64 2
  %561 = load %struct.MODE_INFO*, %struct.MODE_INFO** %560, align 8
  %562 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %561, i64 0, i32 4
  %563 = load i8, i8* %562, align 4
  %564 = sext i8 %563 to i64
  %565 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 7, i64 %564, i64 0
  %566 = load i16, i16* %565, align 2
  %567 = sext i16 %566 to i32
  %568 = add nsw i32 %559, %567
  %569 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %540, i64 3
  %570 = load %struct.MODE_INFO*, %struct.MODE_INFO** %569, align 8
  %571 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %570, i64 0, i32 4
  %572 = load i8, i8* %571, align 4
  %573 = sext i8 %572 to i64
  %574 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 7, i64 %573, i64 0
  %575 = load i16, i16* %574, align 2
  %576 = sext i16 %575 to i32
  %577 = add nsw i32 %568, %576
  %578 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %540, i64 4
  %579 = add i32 %542, -4
  %580 = icmp eq i32 %579, 0
  br i1 %580, label %581, label %539

581:                                              ; preds = %539, %538
  %582 = phi i32 [ undef, %538 ], [ %577, %539 ]
  %583 = phi %struct.MODE_INFO** [ %537, %538 ], [ %578, %539 ]
  %584 = phi i32 [ %535, %538 ], [ %577, %539 ]
  br i1 %533, label %600, label %585

585:                                              ; preds = %581, %585
  %586 = phi %struct.MODE_INFO** [ %597, %585 ], [ %583, %581 ]
  %587 = phi i32 [ %596, %585 ], [ %584, %581 ]
  %588 = phi i32 [ %598, %585 ], [ %530, %581 ]
  %589 = load %struct.MODE_INFO*, %struct.MODE_INFO** %586, align 8
  %590 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %589, i64 0, i32 4
  %591 = load i8, i8* %590, align 4
  %592 = sext i8 %591 to i64
  %593 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 7, i64 %592, i64 0
  %594 = load i16, i16* %593, align 2
  %595 = sext i16 %594 to i32
  %596 = add nsw i32 %587, %595
  %597 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %586, i64 1
  %598 = add i32 %588, -1
  %599 = icmp eq i32 %598, 0
  br i1 %599, label %600, label %585, !llvm.loop !25

600:                                              ; preds = %581, %585, %534
  %601 = phi i32 [ %535, %534 ], [ %582, %581 ], [ %596, %585 ]
  %602 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %537, i64 %528
  %603 = add nuw nsw i32 %536, 1
  %604 = icmp eq i32 %603, %515
  br i1 %604, label %605, label %534

605:                                              ; preds = %600, %517
  %606 = phi i32 [ %519, %517 ], [ %524, %600 ]
  %607 = phi i32 [ 0, %517 ], [ %601, %600 ]
  %608 = mul nsw i32 %606, %515
  %609 = sdiv i32 %607, %608
  %610 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 9
  store i32 %609, i32* %610, align 8
  br label %611

611:                                              ; preds = %509, %501, %497, %605
  ret void
}

declare i32 @vp9_compound_reference_allowed(%struct.VP9Common*) local_unnamed_addr #2

declare void @vp9_setup_compound_reference_mode(%struct.VP9Common*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @encode_frame_internal(%struct.VP9_COMP*) unnamed_addr #0 {
  %2 = alloca [101 x i32], align 16
  %3 = alloca %struct.vpx_usec_timer, align 8
  %4 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3
  %5 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %4, i64 0, i32 0
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 1
  %7 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 94, i32 32, i32 0
  %8 = load i8, i8* %7, align 4
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %10 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %9, align 8
  %11 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 1, i32 6
  store %struct.MODE_INFO** %10, %struct.MODE_INFO*** %11, align 8
  %12 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %13 = bitcast %struct.MODE_INFO** %12 to i64*
  %14 = load i64, i64* %13, align 16
  %15 = bitcast %struct.MODE_INFO** %10 to i64*
  store i64 %14, i64* %15, align 8
  %16 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 2
  %17 = bitcast %struct.FRAME_COUNTS** %16 to i8**
  %18 = load i8*, i8** %17, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %18, i8 0, i64 13224, i1 false)
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 1
  %20 = bitcast %struct.RD_COUNTS* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %20, i8 0, i64 27704, i1 false)
  %21 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 38
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %36

24:                                               ; preds = %1
  %25 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 39
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %36

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 40
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 41
  %34 = load i32, i32* %33, align 16
  %35 = icmp eq i32 %34, 0
  br label %36

36:                                               ; preds = %32, %28, %24, %1
  %37 = phi i1 [ false, %28 ], [ false, %24 ], [ false, %1 ], [ %35, %32 ]
  %38 = zext i1 %37 to i32
  %39 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 1, i32 24
  store i32 %38, i32* %39, align 4
  %40 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 11
  %41 = load i32, i32* %40, align 16
  %42 = icmp eq i32 %41, 0
  %43 = select i1 %37, void (i16*, i32*, i32)* @vp9_fwht4x4_sse2, void (i16*, i32*, i32)* @vpx_fdct4x4_sse2
  %44 = select i1 %37, void (i16*, i32*, i32)* @vp9_highbd_fwht4x4_c, void (i16*, i32*, i32)* @vpx_highbd_fdct4x4_sse2
  %45 = select i1 %42, void (i16*, i32*, i32)* %43, void (i16*, i32*, i32)* %44
  %46 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 64
  store void (i16*, i32*, i32)* %45, void (i16*, i32*, i32)** %46, align 16
  %47 = select i1 %37, void (i32*, i16*, i32, i32, i32)* @vp9_highbd_iwht4x4_add, void (i32*, i16*, i32, i32, i32)* @vp9_highbd_idct4x4_add
  %48 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 66
  store void (i32*, i16*, i32, i32, i32)* %47, void (i32*, i16*, i32, i32, i32)** %48, align 16
  %49 = select i1 %37, void (i32*, i8*, i32, i32)* @vp9_iwht4x4_add, void (i32*, i8*, i32, i32)* @vp9_idct4x4_add
  %50 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 65
  store void (i32*, i8*, i32, i32)* %49, void (i32*, i8*, i32, i32)** %50, align 8
  br i1 %37, label %51, label %53

51:                                               ; preds = %36
  %52 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 42
  store i32 0, i32* %52, align 8
  br label %53

53:                                               ; preds = %36, %51
  %54 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 10
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 34
  store i32 %55, i32* %56, align 8
  %57 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 31
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 1
  %60 = zext i1 %59 to i32
  %61 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 35
  store i32 %60, i32* %61, align 4
  br i1 %37, label %81, label %62

62:                                               ; preds = %53
  %63 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %70

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 61
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %81

70:                                               ; preds = %66, %62
  %71 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 19
  %72 = load i32, i32* %71, align 4
  %73 = icmp ult i32 %72, 3
  br i1 %73, label %77, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 37
  %76 = load i32, i32* %75, align 16
  br label %81

77:                                               ; preds = %70
  %78 = sext i32 %72 to i64
  %79 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.encode_frame_internal, i64 0, i64 %78
  %80 = load i32, i32* %79, align 4
  br label %81

81:                                               ; preds = %77, %53, %66, %74
  %82 = phi i32 [ %76, %74 ], [ 0, %53 ], [ 2, %66 ], [ %80, %77 ]
  %83 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 37
  store i32 %82, i32* %83, align 16
  tail call void @vp9_frame_init_quantizer(%struct.VP9_COMP* %0) #8
  tail call void @vp9_initialize_rd_consts(%struct.VP9_COMP* %0) #8
  %84 = load i32, i32* %21, align 4
  tail call void @vp9_initialize_me_consts(%struct.VP9_COMP* %0, %struct.macroblock* %5, i32 %84) #8
  %85 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %86 = load i32, i32* %85, align 8
  %87 = add nsw i32 %86, 7
  %88 = and i32 %87, -8
  %89 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 12
  %90 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %89, align 8
  %91 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %90, i64 0, i32 13
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %90, i64 0, i32 14
  %95 = bitcast i8** %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %90, i64 0, i32 15
  %98 = bitcast i8** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %90, i64 0, i32 4
  %101 = load i32, i32* %100, align 8
  %102 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %90, i64 0, i32 9
  %103 = load i32, i32* %102, align 4
  %104 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 1, i32 18
  store %struct.yv12_buffer_config* %90, %struct.yv12_buffer_config** %104, align 16
  %105 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 0, i64 0, i32 4, i32 0
  %106 = bitcast i8** %105 to i64*
  store i64 %93, i64* %106, align 8
  %107 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 0, i64 0, i32 4, i32 1
  store i32 %101, i32* %107, align 8
  %108 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i32 4, i32 0
  %109 = bitcast i8** %108 to i64*
  store i64 %96, i64* %109, align 8
  %110 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i32 4, i32 1
  store i32 %103, i32* %110, align 8
  %111 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i32 4, i32 0
  %112 = bitcast i8** %111 to i64*
  store i64 %99, i64* %112, align 8
  %113 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i32 4, i32 1
  store i32 %103, i32* %113, align 8
  %114 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 9
  %115 = load i32, i32* %114, align 8
  %116 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 10
  %117 = load i32, i32* %116, align 4
  tail call void @vp9_setup_block_planes(%struct.macroblockd* %6, i32 %115, i32 %117) #8
  %118 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 1, i32 19, i64 0
  %119 = load i8*, i8** %118, align 8
  %120 = sext i32 %88 to i64
  %121 = mul nsw i64 %120, 6
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %119, i8 0, i64 %121, i1 false) #8
  %122 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 1, i32 21
  %123 = load i8*, i8** %122, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %123, i8 0, i64 %120, i1 false) #8
  %124 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 83
  %125 = load i32, i32* %124, align 16
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %143

127:                                              ; preds = %81
  %128 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 3
  %129 = load i32, i32* %128, align 16
  %130 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 7
  %131 = load i32, i32* %130, align 16
  %132 = icmp eq i32 %129, %131
  br i1 %132, label %133, label %143

133:                                              ; preds = %127
  %134 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %135 = load i32, i32* %134, align 4
  %136 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 8
  %137 = load i32, i32* %136, align 4
  %138 = icmp eq i32 %135, %137
  br i1 %138, label %139, label %143

139:                                              ; preds = %133
  %140 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %141 = load i8, i8* %140, align 4
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %145, label %143

143:                                              ; preds = %139, %133, %127, %81
  %144 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 56
  store i32 0, i32* %144, align 16
  br label %159

145:                                              ; preds = %139
  %146 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 25
  %147 = load i32, i32* %146, align 4
  %148 = icmp ne i32 %147, 0
  %149 = zext i1 %148 to i32
  %150 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 56
  store i32 %149, i32* %150, align 16
  br i1 %148, label %151, label %159

151:                                              ; preds = %145
  %152 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 47
  %153 = load %struct.MODE_INFO*, %struct.MODE_INFO** %152, align 8
  %154 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 36
  %155 = load i32, i32* %154, align 4
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %153, i64 %156
  %158 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %157, i64 1
  br label %159

159:                                              ; preds = %143, %145, %151
  %160 = phi %struct.MODE_INFO* [ %158, %151 ], [ null, %145 ], [ null, %143 ]
  %161 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 48
  store %struct.MODE_INFO* %160, %struct.MODE_INFO** %161, align 16
  %162 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 49
  %163 = load i32, i32* %162, align 4
  %164 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 46
  store i32 %163, i32* %164, align 8
  %165 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 47, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %165, i8 0, i64 12, i1 false)
  %166 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 61
  %167 = load i32, i32* %166, align 4
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %467, label %169

169:                                              ; preds = %159
  %170 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 5
  %171 = load %struct.PC_TREE*, %struct.PC_TREE** %170, align 16
  %172 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %171, i64 0, i32 3, i32 7, i64 0, i64 0
  %173 = bitcast i32** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 0, i64 0, i32 2
  %176 = bitcast i32** %175 to i64*
  store i64 %174, i64* %176, align 8
  %177 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %171, i64 0, i32 3, i32 8, i64 0, i64 0
  %178 = bitcast i32** %177 to i64*
  %179 = load i64, i64* %178, align 8
  %180 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 0, i64 0, i32 1
  %181 = bitcast i32** %180 to i64*
  store i64 %179, i64* %181, align 16
  %182 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %171, i64 0, i32 3, i32 9, i64 0, i64 0
  %183 = bitcast i32** %182 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i64 0
  %186 = bitcast %struct.macroblockd_plane* %185 to i64*
  store i64 %184, i64* %186, align 8
  %187 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %171, i64 0, i32 3, i32 10, i64 0, i64 0
  %188 = bitcast i16** %187 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 0, i64 0, i32 3
  %191 = bitcast i16** %190 to i64*
  store i64 %189, i64* %191, align 16
  %192 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %171, i64 0, i32 3, i32 7, i64 1, i64 0
  %193 = bitcast i32** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i32 2
  %196 = bitcast i32** %195 to i64*
  store i64 %194, i64* %196, align 8
  %197 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %171, i64 0, i32 3, i32 8, i64 1, i64 0
  %198 = bitcast i32** %197 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i32 1
  %201 = bitcast i32** %200 to i64*
  store i64 %199, i64* %201, align 16
  %202 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %171, i64 0, i32 3, i32 9, i64 1, i64 0
  %203 = bitcast i32** %202 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i64 1
  %206 = bitcast %struct.macroblockd_plane* %205 to i64*
  store i64 %204, i64* %206, align 8
  %207 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %171, i64 0, i32 3, i32 10, i64 1, i64 0
  %208 = bitcast i16** %207 to i64*
  %209 = load i64, i64* %208, align 8
  %210 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i32 3
  %211 = bitcast i16** %210 to i64*
  store i64 %209, i64* %211, align 16
  %212 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %171, i64 0, i32 3, i32 7, i64 2, i64 0
  %213 = bitcast i32** %212 to i64*
  %214 = load i64, i64* %213, align 8
  %215 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i32 2
  %216 = bitcast i32** %215 to i64*
  store i64 %214, i64* %216, align 8
  %217 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %171, i64 0, i32 3, i32 8, i64 2, i64 0
  %218 = bitcast i32** %217 to i64*
  %219 = load i64, i64* %218, align 8
  %220 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i32 1
  %221 = bitcast i32** %220 to i64*
  store i64 %219, i64* %221, align 16
  %222 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %171, i64 0, i32 3, i32 9, i64 2, i64 0
  %223 = bitcast i32** %222 to i64*
  %224 = load i64, i64* %223, align 8
  %225 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i64 2
  %226 = bitcast %struct.macroblockd_plane* %225 to i64*
  store i64 %224, i64* %226, align 8
  %227 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %171, i64 0, i32 3, i32 10, i64 2, i64 0
  %228 = bitcast i16** %227 to i64*
  %229 = load i64, i64* %228, align 8
  %230 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i32 3
  %231 = bitcast i16** %230 to i64*
  store i64 %229, i64* %231, align 16
  %232 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 37, i64 0, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %232, i8 0, i64 1024, i1 false)
  %233 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %234 = load i32, i32* %233, align 4
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %256, label %236

236:                                              ; preds = %169
  %237 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 11
  %238 = load i32, i32* %237, align 8
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %256

240:                                              ; preds = %236
  %241 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 19
  %242 = load i32, i32* %241, align 8
  %243 = icmp sgt i32 %242, 0
  br i1 %243, label %244, label %248

244:                                              ; preds = %240
  %245 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 20
  %246 = load i32, i32* %245, align 4
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %256, label %248

248:                                              ; preds = %244, %240
  %249 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %250 = load i32, i32* %249, align 4
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %252, label %256

252:                                              ; preds = %248
  %253 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 74
  %254 = load i32, i32* %253, align 16
  %255 = and i32 %254, -3
  store i32 %255, i32* %253, align 16
  br label %256

256:                                              ; preds = %248, %169, %252, %244, %236
  %257 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 24
  %258 = load i32, i32* %257, align 8
  %259 = icmp eq i32 %258, 4
  br i1 %259, label %260, label %576

260:                                              ; preds = %256
  br i1 %235, label %261, label %262

261:                                              ; preds = %260
  store i32 0, i32* %257, align 8
  br label %576

262:                                              ; preds = %260
  %263 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %264 = load i8, i8* %263, align 4
  %265 = icmp eq i8 %264, 0
  br i1 %265, label %267, label %266

266:                                              ; preds = %262
  store i32 1, i32* %257, align 8
  br label %576

267:                                              ; preds = %262
  %268 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 7
  %269 = load i32, i32* %268, align 16
  %270 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 3
  %271 = load i32, i32* %270, align 16
  %272 = icmp eq i32 %269, %271
  br i1 %272, label %273, label %279

273:                                              ; preds = %267
  %274 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 8
  %275 = load i32, i32* %274, align 4
  %276 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %277 = load i32, i32* %276, align 4
  %278 = icmp eq i32 %275, %277
  br i1 %278, label %294, label %279

279:                                              ; preds = %273, %267
  %280 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 105
  %281 = load %struct.diff*, %struct.diff** %280, align 8
  %282 = icmp eq %struct.diff* %281, null
  br i1 %282, label %285, label %283

283:                                              ; preds = %279
  %284 = bitcast %struct.diff* %281 to i8*
  tail call void @vpx_free(i8* nonnull %284) #8
  br label %285

285:                                              ; preds = %283, %279
  %286 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 31
  %287 = load i32, i32* %286, align 8
  %288 = sext i32 %287 to i64
  %289 = tail call i8* @vpx_calloc(i64 %288, i64 12) #8
  %290 = bitcast %struct.diff** %280 to i8**
  store i8* %289, i8** %290, align 8
  %291 = icmp eq i8* %289, null
  br i1 %291, label %292, label %294

292:                                              ; preds = %285
  %293 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %293, i32 2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %294

294:                                              ; preds = %292, %285, %273
  %295 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 107
  %296 = load i32, i32* %295, align 4
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %462

298:                                              ; preds = %294
  %299 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %89, align 8
  %300 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %299, i64 0, i32 13
  %301 = load i8*, i8** %300, align 8
  %302 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 13
  %303 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %302, align 16
  %304 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %303, i64 0, i32 13
  %305 = load i8*, i8** %304, align 8
  %306 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %299, i64 0, i32 4
  %307 = load i32, i32* %306, align 8
  %308 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %303, i64 0, i32 4
  %309 = load i32, i32* %308, align 8
  %310 = load i32, i32* %270, align 16
  %311 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %312 = load i32, i32* %311, align 4
  %313 = icmp slt i32 %310, %312
  %314 = select i1 %313, i32 %310, i32 %312
  %315 = icmp sgt i32 %314, 719
  %316 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 31
  %317 = load i32, i32* %316, align 8
  %318 = select i1 %315, i32 75, i32 45
  %319 = mul nsw i32 %318, %317
  %320 = sdiv i32 %319, 100
  %321 = bitcast [101 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 404, i8* nonnull %321) #8
  %322 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 105
  %323 = load %struct.diff*, %struct.diff** %322, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %321, i8 0, i64 404, i1 false) #8
  %324 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 32
  %325 = load i32, i32* %324, align 4
  %326 = icmp sgt i32 %325, 0
  br i1 %326, label %327, label %440

327:                                              ; preds = %298
  %328 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 34
  %329 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 80
  %330 = getelementptr inbounds [101 x i32], [101 x i32]* %2, i64 0, i64 100
  %331 = shl nsw i32 %307, 4
  %332 = sext i32 %331 to i64
  %333 = shl nsw i32 %309, 4
  %334 = sext i32 %333 to i64
  %335 = load i32, i32* %328, align 4
  br label %336

336:                                              ; preds = %423, %327
  %337 = phi i32 [ %325, %327 ], [ %424, %423 ]
  %338 = phi i32 [ %335, %327 ], [ %425, %423 ]
  %339 = phi i32 [ 0, %327 ], [ %436, %423 ]
  %340 = phi %struct.diff* [ %323, %327 ], [ %428, %423 ]
  %341 = phi i8* [ %305, %327 ], [ %435, %423 ]
  %342 = phi i8* [ %301, %327 ], [ %433, %423 ]
  %343 = icmp sgt i32 %338, 0
  br i1 %343, label %344, label %423

344:                                              ; preds = %336, %414
  %345 = phi i32 [ %418, %414 ], [ 0, %336 ]
  %346 = phi %struct.diff* [ %417, %414 ], [ %340, %336 ]
  %347 = phi i8* [ %416, %414 ], [ %341, %336 ]
  %348 = phi i8* [ %415, %414 ], [ %342, %336 ]
  %349 = load i32, i32* %40, align 16
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %389, label %351

351:                                              ; preds = %344
  %352 = load i32, i32* %329, align 16
  switch i32 %352, label %376 [
    i32 8, label %353
    i32 10, label %363
  ]

353:                                              ; preds = %351
  %354 = getelementptr inbounds %struct.diff, %struct.diff* %346, i64 0, i32 0
  %355 = getelementptr inbounds %struct.diff, %struct.diff* %346, i64 0, i32 1
  tail call void @vpx_highbd_8_get16x16var_sse2(i8* %348, i32 %307, i8* %347, i32 %309, i32* %354, i32* %355) #8
  %356 = load i32, i32* %354, align 4
  %357 = load i32, i32* %355, align 4
  %358 = sext i32 %357 to i64
  %359 = mul nsw i64 %358, %358
  %360 = lshr i64 %359, 8
  %361 = trunc i64 %360 to i32
  %362 = sub i32 %356, %361
  br label %400

363:                                              ; preds = %351
  %364 = getelementptr inbounds %struct.diff, %struct.diff* %346, i64 0, i32 0
  %365 = getelementptr inbounds %struct.diff, %struct.diff* %346, i64 0, i32 1
  tail call void @vpx_highbd_10_get16x16var_sse2(i8* %348, i32 %307, i8* %347, i32 %309, i32* %364, i32* %365) #8
  %366 = load i32, i32* %364, align 4
  %367 = zext i32 %366 to i64
  %368 = load i32, i32* %365, align 4
  %369 = sext i32 %368 to i64
  %370 = mul nsw i64 %369, %369
  %371 = lshr i64 %370, 8
  %372 = sub nsw i64 %367, %371
  %373 = icmp sgt i64 %372, -1
  %374 = trunc i64 %372 to i32
  %375 = select i1 %373, i32 %374, i32 0
  br label %400

376:                                              ; preds = %351
  %377 = getelementptr inbounds %struct.diff, %struct.diff* %346, i64 0, i32 0
  %378 = getelementptr inbounds %struct.diff, %struct.diff* %346, i64 0, i32 1
  tail call void @vpx_highbd_12_get16x16var_sse2(i8* %348, i32 %307, i8* %347, i32 %309, i32* %377, i32* %378) #8
  %379 = load i32, i32* %377, align 4
  %380 = zext i32 %379 to i64
  %381 = load i32, i32* %378, align 4
  %382 = sext i32 %381 to i64
  %383 = mul nsw i64 %382, %382
  %384 = lshr i64 %383, 8
  %385 = sub nsw i64 %380, %384
  %386 = icmp sgt i64 %385, -1
  %387 = trunc i64 %385 to i32
  %388 = select i1 %386, i32 %387, i32 0
  br label %400

389:                                              ; preds = %344
  %390 = load void (i8*, i32, i8*, i32, i32*, i32*)*, void (i8*, i32, i8*, i32, i32*, i32*)** @vpx_get16x16var, align 8
  %391 = getelementptr inbounds %struct.diff, %struct.diff* %346, i64 0, i32 0
  %392 = getelementptr inbounds %struct.diff, %struct.diff* %346, i64 0, i32 1
  tail call void %390(i8* %348, i32 %307, i8* %347, i32 %309, i32* %391, i32* %392) #8
  %393 = load i32, i32* %391, align 4
  %394 = load i32, i32* %392, align 4
  %395 = sext i32 %394 to i64
  %396 = mul nsw i64 %395, %395
  %397 = lshr i64 %396, 8
  %398 = trunc i64 %397 to i32
  %399 = sub i32 %393, %398
  br label %400

400:                                              ; preds = %389, %376, %363, %353
  %401 = phi i32 [ %399, %389 ], [ %388, %376 ], [ %375, %363 ], [ %362, %353 ]
  %402 = getelementptr inbounds %struct.diff, %struct.diff* %346, i64 0, i32 2
  store i32 %401, i32* %402, align 4
  %403 = icmp ugt i32 %401, 999
  br i1 %403, label %404, label %407

404:                                              ; preds = %400
  %405 = load i32, i32* %330, align 16
  %406 = add nsw i32 %405, 1
  store i32 %406, i32* %330, align 16
  br label %414

407:                                              ; preds = %400
  %408 = trunc i32 %401 to i16
  %409 = udiv i16 %408, 10
  %410 = zext i16 %409 to i64
  %411 = getelementptr inbounds [101 x i32], [101 x i32]* %2, i64 0, i64 %410
  %412 = load i32, i32* %411, align 4
  %413 = add nsw i32 %412, 1
  store i32 %413, i32* %411, align 4
  br label %414

414:                                              ; preds = %407, %404
  %415 = getelementptr inbounds i8, i8* %348, i64 16
  %416 = getelementptr inbounds i8, i8* %347, i64 16
  %417 = getelementptr inbounds %struct.diff, %struct.diff* %346, i64 1
  %418 = add nuw nsw i32 %345, 1
  %419 = load i32, i32* %328, align 4
  %420 = icmp slt i32 %418, %419
  br i1 %420, label %344, label %421

421:                                              ; preds = %414
  %422 = load i32, i32* %324, align 4
  br label %423

423:                                              ; preds = %421, %336
  %424 = phi i32 [ %337, %336 ], [ %422, %421 ]
  %425 = phi i32 [ %338, %336 ], [ %419, %421 ]
  %426 = phi i8* [ %342, %336 ], [ %415, %421 ]
  %427 = phi i8* [ %341, %336 ], [ %416, %421 ]
  %428 = phi %struct.diff* [ %340, %336 ], [ %417, %421 ]
  %429 = shl nsw i32 %425, 4
  %430 = sext i32 %429 to i64
  %431 = sub nsw i64 0, %430
  %432 = getelementptr inbounds i8, i8* %426, i64 %332
  %433 = getelementptr inbounds i8, i8* %432, i64 %431
  %434 = getelementptr inbounds i8, i8* %427, i64 %334
  %435 = getelementptr inbounds i8, i8* %434, i64 %431
  %436 = add nuw nsw i32 %339, 1
  %437 = icmp slt i32 %436, %424
  br i1 %437, label %336, label %438

438:                                              ; preds = %423
  %439 = load i32, i32* %330, align 16
  br label %440

440:                                              ; preds = %438, %298
  %441 = phi i32 [ %439, %438 ], [ 0, %298 ]
  %442 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 106
  store i32 0, i32* %442, align 16
  %443 = icmp slt i32 %441, %320
  br i1 %443, label %444, label %457

444:                                              ; preds = %440, %448
  %445 = phi i64 [ %453, %448 ], [ 0, %440 ]
  %446 = phi i32 [ %451, %448 ], [ 0, %440 ]
  %447 = icmp eq i64 %445, 100
  br i1 %447, label %457, label %448

448:                                              ; preds = %444
  %449 = getelementptr inbounds [101 x i32], [101 x i32]* %2, i64 0, i64 %445
  %450 = load i32, i32* %449, align 4
  %451 = add nsw i32 %450, %446
  %452 = icmp sgt i32 %451, %320
  %453 = add nuw nsw i64 %445, 1
  br i1 %452, label %454, label %444

454:                                              ; preds = %448
  %455 = trunc i64 %453 to i32
  %456 = mul nsw i32 %455, 10
  store i32 %456, i32* %442, align 16
  br label %460

457:                                              ; preds = %444, %440
  %458 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 67
  %459 = load i32, i32* %458, align 4
  br label %460

460:                                              ; preds = %457, %454
  %461 = phi i32 [ 0, %454 ], [ %459, %457 ]
  call void @llvm.lifetime.end.p0i8(i64 404, i8* nonnull %321) #8
  store i32 %461, i32* %295, align 4
  br label %462

462:                                              ; preds = %460, %294
  %463 = phi i32 [ %296, %294 ], [ %461, %460 ]
  %464 = icmp sgt i32 %463, 0
  br i1 %464, label %465, label %576

465:                                              ; preds = %462
  store i32 1, i32* %257, align 8
  %466 = add nsw i32 %463, -1
  store i32 %466, i32* %295, align 4
  br label %576

467:                                              ; preds = %159
  %468 = add i8 %8, -1
  %469 = icmp ult i8 %468, 49
  br i1 %469, label %470, label %576

470:                                              ; preds = %467
  %471 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 15
  %472 = load i32, i32* %471, align 4
  %473 = icmp eq i32 %472, 0
  br i1 %473, label %576, label %474

474:                                              ; preds = %470
  %475 = load i8, i8* %7, align 4
  %476 = zext i8 %475 to i64
  %477 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 20, i64 %476
  %478 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 20, i64 %476, i32 1
  %479 = load %struct.TplDepStats*, %struct.TplDepStats** %478, align 8
  %480 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %481 = load i32, i32* %480, align 16
  %482 = icmp sgt i32 %481, 0
  br i1 %482, label %483, label %565

483:                                              ; preds = %474
  %484 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 20, i64 %476, i32 2
  %485 = load i32, i32* %484, align 8
  %486 = getelementptr inbounds %struct.TplDepFrame, %struct.TplDepFrame* %477, i64 0, i32 0
  %487 = load i8, i8* %486, align 8
  %488 = icmp eq i8 %487, 0
  %489 = sext i32 %485 to i64
  %490 = sext i32 %481 to i64
  br label %491

491:                                              ; preds = %483, %560
  %492 = phi i64 [ 0, %483 ], [ %563, %560 ]
  %493 = phi i64 [ 0, %483 ], [ %562, %560 ]
  %494 = phi i64 [ 0, %483 ], [ %561, %560 ]
  br i1 %488, label %565, label %495

495:                                              ; preds = %491
  %496 = load i32, i32* %85, align 8
  %497 = icmp sgt i32 %496, 0
  br i1 %497, label %498, label %560

498:                                              ; preds = %495
  %499 = mul nsw i64 %492, %489
  %500 = sext i32 %496 to i64
  %501 = icmp ult i32 %496, 5
  br i1 %501, label %543, label %502

502:                                              ; preds = %498
  %503 = and i64 %500, 3
  %504 = icmp eq i64 %503, 0
  %505 = select i1 %504, i64 4, i64 %503
  %506 = sub nsw i64 %500, %505
  %507 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %493, i32 0
  %508 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %494, i32 0
  br label %509

509:                                              ; preds = %509, %502
  %510 = phi i64 [ 0, %502 ], [ %532, %509 ]
  %511 = phi <2 x i64> [ %507, %502 ], [ %530, %509 ]
  %512 = phi <2 x i64> [ zeroinitializer, %502 ], [ %531, %509 ]
  %513 = phi <2 x i64> [ %508, %502 ], [ %528, %509 ]
  %514 = phi <2 x i64> [ zeroinitializer, %502 ], [ %529, %509 ]
  %515 = or i64 %510, 2
  %516 = add nsw i64 %510, %499
  %517 = add nsw i64 %515, %499
  %518 = getelementptr inbounds %struct.TplDepStats, %struct.TplDepStats* %479, i64 %516, i32 0
  %519 = getelementptr inbounds %struct.TplDepStats, %struct.TplDepStats* %479, i64 %517, i32 0
  %520 = bitcast i64* %518 to <12 x i64>*
  %521 = bitcast i64* %519 to <12 x i64>*
  %522 = load <12 x i64>, <12 x i64>* %520, align 8
  %523 = load <12 x i64>, <12 x i64>* %521, align 8
  %524 = shufflevector <12 x i64> %522, <12 x i64> undef, <2 x i32> <i32 0, i32 6>
  %525 = shufflevector <12 x i64> %523, <12 x i64> undef, <2 x i32> <i32 0, i32 6>
  %526 = shufflevector <12 x i64> %522, <12 x i64> undef, <2 x i32> <i32 3, i32 9>
  %527 = shufflevector <12 x i64> %523, <12 x i64> undef, <2 x i32> <i32 3, i32 9>
  %528 = add nsw <2 x i64> %524, %513
  %529 = add nsw <2 x i64> %525, %514
  %530 = add nsw <2 x i64> %526, %511
  %531 = add nsw <2 x i64> %527, %512
  %532 = add i64 %510, 4
  %533 = icmp eq i64 %532, %506
  br i1 %533, label %534, label %509, !llvm.loop !27

534:                                              ; preds = %509
  %535 = add <2 x i64> %529, %528
  %536 = shufflevector <2 x i64> %535, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %537 = add <2 x i64> %535, %536
  %538 = extractelement <2 x i64> %537, i32 0
  %539 = add <2 x i64> %531, %530
  %540 = shufflevector <2 x i64> %539, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %541 = add <2 x i64> %539, %540
  %542 = extractelement <2 x i64> %541, i32 0
  br label %543

543:                                              ; preds = %534, %498
  %544 = phi i64 [ 0, %498 ], [ %506, %534 ]
  %545 = phi i64 [ %493, %498 ], [ %542, %534 ]
  %546 = phi i64 [ %494, %498 ], [ %538, %534 ]
  br label %547

547:                                              ; preds = %543, %547
  %548 = phi i64 [ %558, %547 ], [ %544, %543 ]
  %549 = phi i64 [ %557, %547 ], [ %545, %543 ]
  %550 = phi i64 [ %554, %547 ], [ %546, %543 ]
  %551 = add nsw i64 %548, %499
  %552 = getelementptr inbounds %struct.TplDepStats, %struct.TplDepStats* %479, i64 %551, i32 0
  %553 = load i64, i64* %552, align 8
  %554 = add nsw i64 %553, %550
  %555 = getelementptr inbounds %struct.TplDepStats, %struct.TplDepStats* %479, i64 %551, i32 3
  %556 = load i64, i64* %555, align 8
  %557 = add nsw i64 %556, %549
  %558 = add nuw nsw i64 %548, 1
  %559 = icmp slt i64 %558, %500
  br i1 %559, label %547, label %560, !llvm.loop !28

560:                                              ; preds = %547, %495
  %561 = phi i64 [ %494, %495 ], [ %554, %547 ]
  %562 = phi i64 [ %493, %495 ], [ %557, %547 ]
  %563 = add nuw nsw i64 %492, 1
  %564 = icmp slt i64 %563, %490
  br i1 %564, label %491, label %565

565:                                              ; preds = %560, %491, %474
  %566 = phi i64 [ 0, %474 ], [ 0, %491 ], [ %561, %560 ]
  %567 = phi i64 [ 0, %474 ], [ 0, %491 ], [ %562, %560 ]
  tail call void @vpx_clear_system_state() #8
  %568 = getelementptr inbounds %struct.TplDepFrame, %struct.TplDepFrame* %477, i64 0, i32 0
  %569 = load i8, i8* %568, align 8
  %570 = icmp eq i8 %569, 0
  br i1 %570, label %576, label %571

571:                                              ; preds = %565
  %572 = sitofp i64 %566 to double
  %573 = sitofp i64 %567 to double
  %574 = fdiv double %572, %573
  %575 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 7
  store double %574, double* %575, align 8
  br label %576

576:                                              ; preds = %465, %462, %266, %261, %571, %565, %256, %470, %467
  %577 = load i32, i32* %57, align 4
  %578 = icmp eq i32 %577, 5
  br i1 %578, label %579, label %773

579:                                              ; preds = %576
  %580 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69
  tail call void @vp9_disable_segmentation(%struct.segmentation* %580) #8
  %581 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 24
  %582 = load i32, i32* %581, align 16
  %583 = icmp eq i32 %582, 0
  br i1 %583, label %773, label %584

584:                                              ; preds = %579
  %585 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 26
  store i32 0, i32* %585, align 16
  %586 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 31
  store i32 8, i32* %586, align 8
  %587 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %588 = load i32, i32* %587, align 16
  %589 = icmp sgt i32 %588, 0
  br i1 %589, label %590, label %765

590:                                              ; preds = %584
  %591 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 12), align 1
  %592 = zext i8 %591 to i32
  %593 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 32
  %594 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 12), align 1
  %595 = zext i8 %594 to i32
  %596 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 34
  %597 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 50
  %598 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 23
  %599 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 25
  %600 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 27
  %601 = load i32, i32* %85, align 8
  br label %602

602:                                              ; preds = %756, %590
  %603 = phi i32 [ %588, %590 ], [ %757, %756 ]
  %604 = phi i32 [ %601, %590 ], [ %758, %756 ]
  %605 = phi i32 [ 0, %590 ], [ %761, %756 ]
  %606 = phi i32 [ 0, %590 ], [ %759, %756 ]
  %607 = sext i32 %605 to i64
  %608 = icmp sgt i32 %604, 0
  br i1 %608, label %609, label %756

609:                                              ; preds = %602
  %610 = lshr exact i32 %606, 1
  %611 = add nuw nsw i32 %606, %592
  %612 = lshr i32 %611, 1
  br label %613

613:                                              ; preds = %727, %609
  %614 = phi i32 [ %753, %727 ], [ 0, %609 ]
  %615 = phi i32 [ %752, %727 ], [ 0, %609 ]
  %616 = phi i32 [ %749, %727 ], [ 0, %609 ]
  %617 = sext i32 %615 to i64
  %618 = lshr exact i32 %616, 1
  %619 = load i32, i32* %593, align 4
  %620 = icmp slt i32 %612, %619
  %621 = select i1 %620, i32 %612, i32 %619
  %622 = add nuw nsw i32 %616, %595
  %623 = lshr i32 %622, 1
  %624 = load i32, i32* %596, align 4
  %625 = icmp slt i32 %623, %624
  %626 = select i1 %625, i32 %623, i32 %624
  %627 = icmp sgt i32 %621, %610
  br i1 %627, label %628, label %727

628:                                              ; preds = %613
  %629 = shl i32 %614, 2
  %630 = sext i32 %629 to i64
  %631 = shl i32 %614, 2
  %632 = sext i32 %631 to i64
  %633 = icmp sgt i32 %626, %618
  %634 = sext i32 %626 to i64
  %635 = sext i32 %624 to i64
  %636 = sext i32 %621 to i64
  %637 = sub nsw i64 %634, %632
  %638 = sub nsw i64 %634, %630
  %639 = add nsw i64 %638, -4
  %640 = lshr i64 %639, 2
  %641 = add nuw nsw i64 %640, 1
  %642 = icmp ult i64 %637, 4
  %643 = and i64 %637, -4
  %644 = add nsw i64 %643, %617
  %645 = and i64 %641, 1
  %646 = icmp eq i64 %640, 0
  %647 = sub nuw nsw i64 %641, %645
  %648 = icmp eq i64 %645, 0
  %649 = icmp eq i64 %637, %643
  br label %650

650:                                              ; preds = %723, %628
  %651 = phi i64 [ %607, %628 ], [ %725, %723 ]
  %652 = phi i64 [ 0, %628 ], [ %724, %723 ]
  br i1 %633, label %653, label %723

653:                                              ; preds = %650
  %654 = load i64*, i64** %597, align 8
  %655 = mul nsw i64 %651, %635
  br i1 %642, label %711, label %656

656:                                              ; preds = %653
  %657 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %652, i32 0
  br i1 %646, label %687, label %658

658:                                              ; preds = %656, %658
  %659 = phi i64 [ %684, %658 ], [ 0, %656 ]
  %660 = phi <2 x i64> [ %682, %658 ], [ %657, %656 ]
  %661 = phi <2 x i64> [ %683, %658 ], [ zeroinitializer, %656 ]
  %662 = phi i64 [ %685, %658 ], [ %647, %656 ]
  %663 = add i64 %659, %617
  %664 = add nsw i64 %663, %655
  %665 = getelementptr inbounds i64, i64* %654, i64 %664
  %666 = bitcast i64* %665 to <2 x i64>*
  %667 = load <2 x i64>, <2 x i64>* %666, align 8
  %668 = getelementptr inbounds i64, i64* %665, i64 2
  %669 = bitcast i64* %668 to <2 x i64>*
  %670 = load <2 x i64>, <2 x i64>* %669, align 8
  %671 = add nsw <2 x i64> %667, %660
  %672 = add nsw <2 x i64> %670, %661
  %673 = or i64 %659, 4
  %674 = add i64 %673, %617
  %675 = add nsw i64 %674, %655
  %676 = getelementptr inbounds i64, i64* %654, i64 %675
  %677 = bitcast i64* %676 to <2 x i64>*
  %678 = load <2 x i64>, <2 x i64>* %677, align 8
  %679 = getelementptr inbounds i64, i64* %676, i64 2
  %680 = bitcast i64* %679 to <2 x i64>*
  %681 = load <2 x i64>, <2 x i64>* %680, align 8
  %682 = add nsw <2 x i64> %678, %671
  %683 = add nsw <2 x i64> %681, %672
  %684 = add i64 %659, 8
  %685 = add i64 %662, -2
  %686 = icmp eq i64 %685, 0
  br i1 %686, label %687, label %658, !llvm.loop !30

687:                                              ; preds = %658, %656
  %688 = phi <2 x i64> [ undef, %656 ], [ %682, %658 ]
  %689 = phi <2 x i64> [ undef, %656 ], [ %683, %658 ]
  %690 = phi i64 [ 0, %656 ], [ %684, %658 ]
  %691 = phi <2 x i64> [ %657, %656 ], [ %682, %658 ]
  %692 = phi <2 x i64> [ zeroinitializer, %656 ], [ %683, %658 ]
  br i1 %648, label %704, label %693

693:                                              ; preds = %687
  %694 = add i64 %690, %617
  %695 = add nsw i64 %694, %655
  %696 = getelementptr inbounds i64, i64* %654, i64 %695
  %697 = getelementptr inbounds i64, i64* %696, i64 2
  %698 = bitcast i64* %697 to <2 x i64>*
  %699 = load <2 x i64>, <2 x i64>* %698, align 8
  %700 = add nsw <2 x i64> %699, %692
  %701 = bitcast i64* %696 to <2 x i64>*
  %702 = load <2 x i64>, <2 x i64>* %701, align 8
  %703 = add nsw <2 x i64> %702, %691
  br label %704

704:                                              ; preds = %687, %693
  %705 = phi <2 x i64> [ %688, %687 ], [ %703, %693 ]
  %706 = phi <2 x i64> [ %689, %687 ], [ %700, %693 ]
  %707 = add <2 x i64> %706, %705
  %708 = shufflevector <2 x i64> %707, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %709 = add <2 x i64> %707, %708
  %710 = extractelement <2 x i64> %709, i32 0
  br i1 %649, label %723, label %711

711:                                              ; preds = %704, %653
  %712 = phi i64 [ %617, %653 ], [ %644, %704 ]
  %713 = phi i64 [ %652, %653 ], [ %710, %704 ]
  br label %714

714:                                              ; preds = %711, %714
  %715 = phi i64 [ %721, %714 ], [ %712, %711 ]
  %716 = phi i64 [ %720, %714 ], [ %713, %711 ]
  %717 = add nsw i64 %715, %655
  %718 = getelementptr inbounds i64, i64* %654, i64 %717
  %719 = load i64, i64* %718, align 8
  %720 = add nsw i64 %719, %716
  %721 = add nsw i64 %715, 1
  %722 = icmp slt i64 %721, %634
  br i1 %722, label %714, label %723, !llvm.loop !31

723:                                              ; preds = %714, %704, %650
  %724 = phi i64 [ %652, %650 ], [ %710, %704 ], [ %720, %714 ]
  %725 = add nsw i64 %651, 1
  %726 = icmp slt i64 %725, %636
  br i1 %726, label %650, label %727

727:                                              ; preds = %723, %613
  %728 = phi i64 [ 0, %613 ], [ %724, %723 ]
  %729 = sub nsw i32 %621, %610
  %730 = sub nsw i32 %626, %618
  %731 = mul nsw i32 %730, %729
  %732 = sext i32 %731 to i64
  %733 = sdiv i64 %728, %732
  %734 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %598) #8
  %735 = load %struct.KMEANS_DATA*, %struct.KMEANS_DATA** %599, align 8
  %736 = load i32, i32* %585, align 16
  %737 = add nsw i32 %736, 1
  store i32 %737, i32* %585, align 16
  %738 = sext i32 %736 to i64
  %739 = sitofp i64 %733 to double
  %740 = fadd double %739, 1.000000e+00
  %741 = tail call double @log(double %740) #8
  %742 = fdiv double %741, 0x3FE62E42FEFA39EF
  %743 = getelementptr inbounds %struct.KMEANS_DATA, %struct.KMEANS_DATA* %735, i64 %738, i32 0
  store double %742, double* %743, align 8
  %744 = load i32, i32* %600, align 4
  %745 = mul nsw i32 %744, %606
  %746 = add nsw i32 %745, %616
  %747 = getelementptr inbounds %struct.KMEANS_DATA, %struct.KMEANS_DATA* %735, i64 %738, i32 1
  store i32 %746, i32* %747, align 8
  %748 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %598) #8
  %749 = add nuw nsw i32 %616, 8
  %750 = load i32, i32* %85, align 8
  %751 = icmp slt i32 %749, %750
  %752 = add i32 %615, 4
  %753 = add i32 %614, 1
  br i1 %751, label %613, label %754

754:                                              ; preds = %727
  %755 = load i32, i32* %587, align 16
  br label %756

756:                                              ; preds = %754, %602
  %757 = phi i32 [ %755, %754 ], [ %603, %602 ]
  %758 = phi i32 [ %750, %754 ], [ %604, %602 ]
  %759 = add nuw nsw i32 %606, 8
  %760 = icmp slt i32 %759, %757
  %761 = add i32 %605, 4
  br i1 %760, label %602, label %762

762:                                              ; preds = %756
  %763 = load i32, i32* %586, align 8
  %764 = load i32, i32* %585, align 16
  br label %765

765:                                              ; preds = %762, %584
  %766 = phi i32 [ %764, %762 ], [ 0, %584 ]
  %767 = phi i32 [ %763, %762 ], [ 8, %584 ]
  %768 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 28, i64 0
  %769 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 29, i64 0
  %770 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 30, i64 0
  %771 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 25
  %772 = load %struct.KMEANS_DATA*, %struct.KMEANS_DATA** %771, align 8
  tail call void @vp9_kmeans(double* %768, double* %769, i32* %770, i32 %767, %struct.KMEANS_DATA* %772, i32 %766) #8
  tail call void @vp9_perceptual_aq_mode_setup(%struct.VP9_COMP* %0, %struct.segmentation* %580) #8
  br label %773

773:                                              ; preds = %765, %579, %576
  %774 = bitcast %struct.vpx_usec_timer* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %774) #8
  %775 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %3, i64 0, i32 0, i32 0
  %776 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %3, i64 0, i32 0, i32 1
  %777 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %3, i64 0, i32 1, i32 0
  %778 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %3, i64 0, i32 1, i32 1
  %779 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %3, i64 0, i32 0
  %780 = bitcast %struct.vpx_usec_timer* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %780, i8 -86, i64 32, i1 false)
  %781 = call i32 @gettimeofday(%struct.timeval* nonnull %779, i8* null) #8
  %782 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 146
  %783 = load i32, i32* %782, align 8
  %784 = icmp eq i32 %783, 0
  %785 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 143
  br i1 %784, label %786, label %829

786:                                              ; preds = %773
  store void (%struct.VP9RowMTSyncData*, i32, i32)* @vp9_row_mt_sync_read_dummy, void (%struct.VP9RowMTSyncData*, i32, i32)** %785, align 16
  %787 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 144
  store void (%struct.VP9RowMTSyncData*, i32, i32, i32)* @vp9_row_mt_sync_write_dummy, void (%struct.VP9RowMTSyncData*, i32, i32, i32)** %787, align 8
  %788 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 58
  %789 = load i32, i32* %788, align 4
  %790 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 85
  %791 = load i32, i32* %790, align 8
  %792 = shl i32 1, %791
  %793 = icmp slt i32 %789, %792
  %794 = select i1 %793, i32 %789, i32 %792
  %795 = icmp sgt i32 %794, 1
  br i1 %795, label %796, label %797

796:                                              ; preds = %786
  tail call void @vp9_encode_tiles_mt(%struct.VP9_COMP* %0) #8
  br label %831

797:                                              ; preds = %786
  %798 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 86
  %799 = load i32, i32* %798, align 4
  %800 = shl i32 1, %799
  tail call void @vp9_init_tile_data(%struct.VP9_COMP* %0) #8
  %801 = icmp eq i32 %799, 31
  br i1 %801, label %831, label %802

802:                                              ; preds = %797
  %803 = icmp eq i32 %791, 31
  %804 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 32
  br label %805

805:                                              ; preds = %826, %802
  %806 = phi i32 [ 0, %802 ], [ %827, %826 ]
  br i1 %803, label %826, label %807

807:                                              ; preds = %805, %823
  %808 = phi i32 [ %824, %823 ], [ 0, %805 ]
  %809 = load i32, i32* %790, align 8
  %810 = load %struct.TileDataEnc*, %struct.TileDataEnc** %804, align 16
  %811 = shl i32 %806, %809
  %812 = add nsw i32 %811, %808
  %813 = sext i32 %812 to i64
  %814 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %810, i64 %813, i32 0, i32 0
  %815 = load i32, i32* %814, align 4
  %816 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %810, i64 %813, i32 0, i32 1
  %817 = load i32, i32* %816, align 4
  %818 = icmp slt i32 %815, %817
  br i1 %818, label %819, label %823

819:                                              ; preds = %807, %819
  %820 = phi i32 [ %821, %819 ], [ %815, %807 ]
  tail call void @vp9_encode_sb_row(%struct.VP9_COMP* %0, %struct.ThreadData* %4, i32 %806, i32 %808, i32 %820) #8
  %821 = add nsw i32 %820, 8
  %822 = icmp slt i32 %821, %817
  br i1 %822, label %819, label %823

823:                                              ; preds = %819, %807
  %824 = add nuw nsw i32 %808, 1
  %825 = icmp slt i32 %824, %792
  br i1 %825, label %807, label %826

826:                                              ; preds = %823, %805
  %827 = add nuw nsw i32 %806, 1
  %828 = icmp slt i32 %827, %800
  br i1 %828, label %805, label %831

829:                                              ; preds = %773
  store void (%struct.VP9RowMTSyncData*, i32, i32)* @vp9_row_mt_sync_read, void (%struct.VP9RowMTSyncData*, i32, i32)** %785, align 16
  %830 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 144
  store void (%struct.VP9RowMTSyncData*, i32, i32, i32)* @vp9_row_mt_sync_write, void (%struct.VP9RowMTSyncData*, i32, i32, i32)** %830, align 8
  tail call void @vp9_encode_tiles_row_mt(%struct.VP9_COMP* %0) #8
  br label %831

831:                                              ; preds = %826, %797, %796, %829
  %832 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %3, i64 0, i32 1
  %833 = call i32 @gettimeofday(%struct.timeval* %832, i8* null) #8
  %834 = load i64, i64* %777, align 8
  %835 = load i64, i64* %775, align 8
  %836 = sub i64 %834, %835
  %837 = load i64, i64* %778, align 8
  %838 = load i64, i64* %776, align 8
  %839 = sub nsw i64 %837, %838
  %840 = icmp slt i64 %839, 0
  %841 = add nsw i64 %839, 1000000
  %842 = select i1 %840, i64 %841, i64 %839
  %843 = ashr i64 %839, 63
  %844 = add nsw i64 %836, %843
  %845 = mul nsw i64 %844, 1000000
  %846 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 93
  %847 = load i64, i64* %846, align 16
  %848 = add i64 %842, %847
  %849 = add i64 %848, %845
  store i64 %849, i64* %846, align 16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %774) #8
  %850 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 8
  %851 = load i32, i32* %850, align 8
  %852 = icmp eq i32 %851, 0
  br i1 %852, label %883, label %853

853:                                              ; preds = %831
  %854 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %16, align 8
  %855 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %854, i64 0, i32 7, i64 0, i64 0
  %856 = bitcast i32* %855 to <2 x i32>*
  %857 = load <2 x i32>, <2 x i32>* %856, align 4
  %858 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %854, i64 0, i32 7, i64 1, i64 0
  %859 = bitcast i32* %858 to <2 x i32>*
  %860 = load <2 x i32>, <2 x i32>* %859, align 4
  %861 = add <2 x i32> %860, %857
  %862 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %854, i64 0, i32 7, i64 2, i64 0
  %863 = bitcast i32* %862 to <2 x i32>*
  %864 = load <2 x i32>, <2 x i32>* %863, align 4
  %865 = add <2 x i32> %861, %864
  %866 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %854, i64 0, i32 7, i64 3, i64 0
  %867 = bitcast i32* %866 to <2 x i32>*
  %868 = load <2 x i32>, <2 x i32>* %867, align 4
  %869 = add <2 x i32> %865, %868
  %870 = extractelement <2 x i32> %869, i32 0
  %871 = shl i32 %870, 2
  %872 = extractelement <2 x i32> %869, i32 1
  %873 = icmp ult i32 %871, %872
  br i1 %873, label %874, label %883

874:                                              ; preds = %853
  %875 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %876 = load i32, i32* %875, align 4
  %877 = icmp eq i32 %876, 0
  br i1 %877, label %883, label %878

878:                                              ; preds = %874
  %879 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 24
  %880 = load i32, i32* %879, align 16
  %881 = icmp ne i32 %880, 0
  %882 = zext i1 %881 to i32
  br label %883

883:                                              ; preds = %878, %874, %853, %831
  %884 = phi i32 [ 0, %831 ], [ 0, %874 ], [ 0, %853 ], [ %882, %878 ]
  %885 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 9
  store i32 %884, i32* %885, align 4
  ret void
}

declare i32 @vp9_noise_estimate_extract_level(%struct.noise_estimate*) local_unnamed_addr #2

declare i64 @vp9_scale_part_thresh(i64, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @vp9_compute_skin_sb(%struct.VP9_COMP*, i8 zeroext, i32, i32) local_unnamed_addr #2

declare void @vp9_rd_cost_init(%struct.RD_COST*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @choose_partitioning(%struct.VP9_COMP*, %struct.TileInfo* nocapture readonly, %struct.macroblock*, i32, i32) unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.v64x64, align 4
  %9 = alloca [21 x i32], align 16
  %10 = alloca [4 x i32], align 16
  %11 = alloca [4 x i32], align 16
  %12 = alloca [4 x i32], align 16
  %13 = alloca [4 x i64], align 16
  %14 = alloca [16 x i32], align 16
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1
  %16 = bitcast %struct.v64x64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 43664, i8* nonnull %16) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %16, i8 -86, i64 43664, i1 false)
  %17 = bitcast [21 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 84, i8* nonnull %17) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 84, i1 false)
  %18 = bitcast [4 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #8
  %19 = bitcast [4 x i32]* %11 to i8*
  %20 = bitcast [4 x i32]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #8
  %21 = bitcast [4 x i32]* %12 to i8*
  %22 = bitcast [4 x i32]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #8
  %23 = bitcast [4 x i64]* %13 to i8*
  %24 = bitcast [4 x i32]* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %23) #8
  %25 = getelementptr inbounds [4 x i64], [4 x i64]* %13, i64 0, i64 0
  %26 = getelementptr inbounds [4 x i64], [4 x i64]* %13, i64 0, i64 1
  %27 = getelementptr inbounds [4 x i64], [4 x i64]* %13, i64 0, i64 2
  %28 = getelementptr inbounds [4 x i64], [4 x i64]* %13, i64 0, i64 3
  %29 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 130, i64 0
  %30 = bitcast i64* %29 to <2 x i64>*
  %31 = load <2 x i64>, <2 x i64>* %30, align 8
  %32 = bitcast [4 x i64]* %13 to <2 x i64>*
  store <2 x i64> %31, <2 x i64>* %32, align 16
  %33 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 130, i64 2
  %34 = bitcast i64* %33 to <2 x i64>*
  %35 = load <2 x i64>, <2 x i64>* %34, align 8
  %36 = bitcast i64* %27 to <2 x i64>*
  store <2 x i64> %35, <2 x i64>* %36, align 16
  %37 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 71
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %64

40:                                               ; preds = %5
  %41 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 43
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %64

48:                                               ; preds = %44, %40
  %49 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 62
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %64

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 155
  %54 = load i32, i32* %53, align 16
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %64, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 84
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %64, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 59
  %62 = load i32, i32* %61, align 16
  %63 = icmp eq i32 %62, 0
  br label %64

64:                                               ; preds = %44, %5, %56, %52, %48, %60
  %65 = phi i32 [ 1, %44 ], [ 0, %56 ], [ 0, %52 ], [ 0, %48 ], [ 0, %60 ], [ 1, %5 ]
  %66 = phi i1 [ true, %44 ], [ false, %56 ], [ false, %52 ], [ false, %48 ], [ %63, %60 ], [ true, %5 ]
  %67 = zext i1 %66 to i32
  %68 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %95, label %71

71:                                               ; preds = %64
  %72 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %73 = load i8, i8* %72, align 4
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %75, label %90

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %90, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 16
  %81 = load i32, i32* %80, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %90

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 1
  %85 = load i32, i32* %84, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 12, i64 %86, i32 14
  %88 = load i32, i32* %87, align 4
  %89 = icmp ne i32 %88, 0
  br label %90

90:                                               ; preds = %79, %75, %71, %83
  %91 = phi i1 [ %89, %83 ], [ false, %79 ], [ true, %71 ], [ false, %75 ]
  %92 = zext i1 %91 to i32
  %93 = icmp ne i8 %73, 0
  %94 = zext i1 %93 to i32
  br label %95

95:                                               ; preds = %64, %90
  %96 = phi i32 [ %92, %90 ], [ 1, %64 ]
  %97 = phi i32 [ %94, %90 ], [ 1, %64 ]
  %98 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 3
  %99 = load i32, i32* %98, align 16
  %100 = icmp slt i32 %99, 353
  br i1 %100, label %101, label %105

101:                                              ; preds = %95
  %102 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %103 = load i32, i32* %102, align 4
  %104 = icmp slt i32 %103, 289
  br label %105

105:                                              ; preds = %101, %95
  %106 = phi i1 [ false, %95 ], [ %104, %101 ]
  %107 = bitcast [16 x i32]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %107) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %107, i8 -86, i64 64, i1 false)
  %108 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 36
  %109 = load i32, i32* %108, align 4
  %110 = ashr i32 %109, 3
  %111 = ashr i32 %3, 3
  %112 = mul nsw i32 %110, %111
  %113 = ashr i32 %4, 3
  %114 = add nsw i32 %112, %113
  %115 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %144, label %118

118:                                              ; preds = %105
  %119 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 36
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %120, -1
  br i1 %121, label %143, label %122

122:                                              ; preds = %118
  %123 = sext i32 %120 to i64
  %124 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 15, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = icmp eq i32 %125, -1
  br i1 %126, label %143, label %127

127:                                              ; preds = %122
  %128 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 89
  %129 = load %struct.BufferPool*, %struct.BufferPool** %128, align 8
  %130 = sext i32 %125 to i64
  %131 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %129, i64 0, i32 3, i64 %130, i32 8
  %132 = icmp eq %struct.yv12_buffer_config* %131, null
  br i1 %132, label %143, label %133

133:                                              ; preds = %127
  %134 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %129, i64 0, i32 3, i64 %130, i32 8, i32 3
  %135 = load i32, i32* %134, align 4
  %136 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %137 = load i32, i32* %136, align 4
  %138 = icmp eq i32 %135, %137
  br i1 %138, label %139, label %143

139:                                              ; preds = %133
  %140 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %129, i64 0, i32 3, i64 %130, i32 8, i32 2
  %141 = load i32, i32* %140, align 8
  %142 = icmp eq i32 %141, %99
  br i1 %142, label %144, label %143

143:                                              ; preds = %118, %122, %139, %133, %127
  br label %144

144:                                              ; preds = %143, %139, %105
  %145 = phi i32 [ %96, %105 ], [ 1, %143 ], [ %96, %139 ]
  tail call fastcc void @set_offsets(%struct.VP9_COMP* %0, %struct.TileInfo* %1, %struct.macroblock* %2, i32 %3, i32 %4, i8 zeroext 12)
  tail call fastcc void @set_segment_index(%struct.VP9_COMP* %0, %struct.macroblock* %2, i32 %3, i32 %4, i8 zeroext 12)
  %146 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 6
  %147 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %146, align 8
  %148 = load %struct.MODE_INFO*, %struct.MODE_INFO** %147, align 8
  %149 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %148, i64 0, i32 4
  %150 = load i8, i8* %149, align 4
  %151 = sext i8 %150 to i32
  %152 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 11
  %153 = load i32, i32* %152, align 8
  %154 = icmp sgt i32 %153, 7
  br i1 %154, label %162, label %155

155:                                              ; preds = %144
  %156 = load i32, i32* %115, align 4
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %163, label %158

158:                                              ; preds = %155
  %159 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 23
  %160 = load i32, i32* %159, align 4
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %163, label %162

162:                                              ; preds = %158, %144
  br label %163

163:                                              ; preds = %158, %155, %162
  %164 = phi i32 [ 0, %162 ], [ 1, %158 ], [ 1, %155 ]
  %165 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 61, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %165, i8 0, i64 25, i1 false)
  %166 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 84
  %167 = load i32, i32* %166, align 8
  %168 = icmp eq i32 %167, 0
  %169 = icmp ne i32 %145, 0
  %170 = or i1 %169, %168
  br i1 %170, label %318, label %171

171:                                              ; preds = %163
  %172 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %173 = load i32, i32* %172, align 8
  %174 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 60
  %175 = load i8, i8* %174, align 4
  %176 = zext i8 %175 to i32
  %177 = add i8 %175, -1
  %178 = icmp ult i8 %177, 2
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 52
  store i8 %179, i8* %180, align 1
  %181 = icmp eq i8 %175, 5
  %182 = zext i1 %181 to i8
  %183 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 53
  store i8 %182, i8* %183, align 4
  %184 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 154
  %185 = load i8*, i8** %184, align 8
  %186 = icmp eq i8* %185, null
  br i1 %186, label %196, label %187

187:                                              ; preds = %171
  %188 = add nsw i32 %173, 7
  %189 = ashr i32 %188, 3
  %190 = mul nsw i32 %189, %111
  %191 = add nsw i32 %190, %113
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds i8, i8* %185, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 54
  store i8 %194, i8* %195, align 1
  br label %196

196:                                              ; preds = %171, %187
  %197 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 91
  %198 = load i32, i32* %197, align 4
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %237, label %200

200:                                              ; preds = %196
  %201 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %202 = load i32, i32* %201, align 16
  %203 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %204 = load i32, i32* %203, align 8
  %205 = add nsw i32 %204, -1
  %206 = icmp eq i32 %202, %205
  br i1 %206, label %207, label %237

207:                                              ; preds = %200
  %208 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 28
  %209 = load i8*, i8** %208, align 8
  %210 = icmp ne i8* %209, null
  %211 = icmp ne i8 %175, 6
  %212 = and i1 %211, %210
  br i1 %212, label %213, label %237

213:                                              ; preds = %207
  %214 = ashr i32 %3, 1
  %215 = ashr i32 %4, 1
  %216 = tail call fastcc i32 @scale_partitioning_svc(%struct.VP9_COMP* %0, %struct.macroblock* %2, %struct.macroblockd* %15, i8 zeroext 12, i32 %214, i32 %215, i32 %3, i32 %4)
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %220, label %218

218:                                              ; preds = %213
  %219 = load i8, i8* %180, align 1
  br label %237

220:                                              ; preds = %213
  %221 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 83
  %222 = load i32, i32* %221, align 4
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %1935, label %224

224:                                              ; preds = %220
  tail call fastcc void @update_prev_partition_helper(%struct.VP9_COMP* %0, i8 zeroext 12, i32 %3, i32 %4) #8
  %225 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 149
  %226 = load i8*, i8** %225, align 8
  %227 = sext i32 %114 to i64
  %228 = getelementptr inbounds i8, i8* %226, i64 %227
  store i8 %150, i8* %228, align 1
  %229 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 150
  %230 = load i8*, i8** %229, align 16
  %231 = mul nsw i32 %114, 25
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds i8, i8* %230, i64 %232
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %233, i8* align 1 %165, i64 25, i1 false) #8
  %234 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 151
  %235 = load i8*, i8** %234, align 8
  %236 = getelementptr inbounds i8, i8* %235, i64 %227
  store i8 0, i8* %236, align 1
  br label %1935

237:                                              ; preds = %218, %196, %207, %200
  %238 = phi i8 [ %219, %218 ], [ %179, %196 ], [ %179, %207 ], [ %179, %200 ]
  %239 = icmp eq i8 %238, 0
  br i1 %239, label %318, label %240

240:                                              ; preds = %237
  %241 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 83
  %242 = load i32, i32* %241, align 4
  %243 = icmp eq i32 %242, 0
  %244 = or i1 %66, %243
  br i1 %244, label %318, label %245

245:                                              ; preds = %240
  %246 = load i32, i32* %115, align 4
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %265, label %248

248:                                              ; preds = %245
  %249 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 1
  %250 = load i32, i32* %249, align 4
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 12, i64 %251, i32 14
  %253 = load i32, i32* %252, align 4
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %255, label %259

255:                                              ; preds = %248
  %256 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 23
  %257 = load i32, i32* %256, align 4
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %259, label %260

259:                                              ; preds = %255, %248
  br label %260

260:                                              ; preds = %259, %255
  %261 = phi i32 [ 0, %259 ], [ 1, %255 ]
  %262 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %263 = load i32, i32* %262, align 8
  %264 = shl i32 %263, 1
  br label %265

265:                                              ; preds = %260, %245
  %266 = phi i32 [ %264, %260 ], [ 1, %245 ]
  %267 = phi i32 [ %261, %260 ], [ 1, %245 ]
  %268 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 19
  %269 = load i32, i32* %268, align 8
  %270 = icmp sgt i32 %269, %266
  %271 = icmp ne i32 %267, 0
  %272 = and i1 %271, %270
  br i1 %272, label %273, label %318

273:                                              ; preds = %265
  %274 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 118
  %275 = load i32, i32* %274, align 16
  %276 = or i32 %275, %151
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %278, label %318

278:                                              ; preds = %273
  %279 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 149
  %280 = load i8*, i8** %279, align 8
  %281 = sext i32 %114 to i64
  %282 = getelementptr inbounds i8, i8* %280, i64 %281
  %283 = load i8, i8* %282, align 1
  %284 = icmp eq i8 %283, 0
  br i1 %284, label %285, label %318

285:                                              ; preds = %278
  %286 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 151
  %287 = load i8*, i8** %286, align 8
  %288 = getelementptr inbounds i8, i8* %287, i64 %281
  %289 = load i8, i8* %288, align 1
  %290 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 152
  %291 = load i8, i8* %290, align 16
  %292 = icmp ult i8 %289, %291
  br i1 %292, label %293, label %318

293:                                              ; preds = %285
  %294 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 148
  %295 = load i8*, i8** %294, align 16
  %296 = icmp eq i8* %295, null
  br i1 %296, label %318, label %297

297:                                              ; preds = %293
  tail call fastcc void @copy_partitioning_helper(%struct.VP9_COMP* %0, %struct.macroblock* %2, %struct.macroblockd* %15, i8 zeroext 12, i32 %3, i32 %4) #8
  %298 = load i8*, i8** %286, align 8
  %299 = getelementptr inbounds i8, i8* %298, i64 %281
  %300 = load i8, i8* %299, align 1
  %301 = add i8 %300, 1
  store i8 %301, i8* %299, align 1
  %302 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 150
  %303 = load i8*, i8** %302, align 16
  %304 = mul nsw i32 %114, 25
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds i8, i8* %303, i64 %305
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %165, i8* align 1 %306, i64 25, i1 false) #8
  %307 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 55
  store i32 1, i32* %307, align 16
  %308 = load i32, i32* %197, align 4
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %1935, label %310

310:                                              ; preds = %297
  %311 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %312 = load i32, i32* %311, align 16
  %313 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %314 = load i32, i32* %313, align 8
  %315 = add nsw i32 %314, -2
  %316 = icmp eq i32 %312, %315
  br i1 %316, label %317, label %1935

317:                                              ; preds = %310
  tail call fastcc void @update_partition_svc(%struct.VP9_COMP* %0, i8 zeroext 12, i32 %3, i32 %4)
  br label %1935

318:                                              ; preds = %265, %278, %285, %273, %293, %237, %240, %163
  %319 = phi i32 [ 0, %163 ], [ %176, %240 ], [ %176, %237 ], [ %176, %293 ], [ %176, %273 ], [ %176, %285 ], [ %176, %278 ], [ %176, %265 ]
  %320 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 31
  %321 = load i32, i32* %320, align 4
  %322 = icmp eq i32 %321, 3
  br i1 %322, label %323, label %335

323:                                              ; preds = %318
  %324 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69
  %325 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %324, i64 0, i32 0
  %326 = load i8, i8* %325, align 8
  %327 = icmp eq i8 %326, 0
  %328 = add nsw i32 %151, -1
  %329 = icmp ugt i32 %328, 1
  %330 = or i1 %329, %327
  br i1 %330, label %335, label %331

331:                                              ; preds = %323
  %332 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 38
  %333 = load i32, i32* %332, align 4
  %334 = tail call i32 @vp9_get_qindex(%struct.segmentation* %324, i32 %151, i32 %333) #8
  br label %338

335:                                              ; preds = %323, %318
  %336 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 38
  %337 = load i32, i32* %336, align 4
  br label %338

338:                                              ; preds = %335, %331
  %339 = phi i32 [ %337, %335 ], [ %334, %331 ]
  call fastcc void @set_vbp_thresholds(%struct.VP9_COMP* %0, i64* nonnull %25, i32 %339, i32 %319)
  %340 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 62
  %341 = load i32, i32* %340, align 4
  %342 = icmp eq i32 %341, 1
  br i1 %342, label %343, label %352

343:                                              ; preds = %338
  %344 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %345 = load i32, i32* %344, align 16
  %346 = icmp eq i32 %345, 0
  %347 = and i1 %66, %346
  br i1 %347, label %348, label %352

348:                                              ; preds = %343
  %349 = load i64, i64* %26, align 8
  %350 = mul nsw i64 %349, 3
  %351 = ashr i64 %350, 2
  store i64 %351, i64* %26, align 8
  br label %352

352:                                              ; preds = %348, %343, %338
  %353 = load i32, i32* %152, align 8
  %354 = icmp slt i32 %353, 8
  %355 = load i64, i64* %26, align 8
  %356 = shl i64 %355, 1
  %357 = select i1 %354, i64 %356, i64 9223372036854775807
  %358 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 13
  %359 = load i32, i32* %358, align 4
  %360 = icmp slt i32 %359, 0
  %361 = ashr i32 %359, 3
  %362 = add nsw i32 %361, 64
  %363 = select i1 %360, i32 %362, i32 64
  %364 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 15
  %365 = load i32, i32* %364, align 4
  %366 = icmp slt i32 %365, 0
  %367 = ashr i32 %365, 3
  %368 = add nsw i32 %367, 64
  %369 = select i1 %366, i32 %368, i32 64
  %370 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 0, i32 4, i32 0
  %371 = load i8*, i8** %370, align 8
  %372 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 0, i32 4, i32 1
  %373 = load i32, i32* %372, align 8
  %374 = getelementptr inbounds [21 x i32], [21 x i32]* %9, i64 0, i64 0
  store i32 %67, i32* %374, align 16
  br i1 %169, label %858, label %375

375:                                              ; preds = %352
  %376 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %146, align 8
  %377 = load %struct.MODE_INFO*, %struct.MODE_INFO** %376, align 8
  %378 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 36
  %379 = load i32, i32* %378, align 4
  %380 = icmp eq i32 %379, -1
  br i1 %380, label %391, label %381

381:                                              ; preds = %375
  %382 = sext i32 %379 to i64
  %383 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 15, i64 %382
  %384 = load i32, i32* %383, align 4
  %385 = icmp eq i32 %384, -1
  br i1 %385, label %391, label %386

386:                                              ; preds = %381
  %387 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 89
  %388 = load %struct.BufferPool*, %struct.BufferPool** %387, align 8
  %389 = sext i32 %384 to i64
  %390 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %388, i64 0, i32 3, i64 %389, i32 8
  br label %391

391:                                              ; preds = %375, %381, %386
  %392 = phi %struct.yv12_buffer_config* [ %390, %386 ], [ null, %381 ], [ null, %375 ]
  %393 = add nsw i32 %4, 4
  %394 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %395 = load i32, i32* %394, align 8
  %396 = icmp slt i32 %393, %395
  %397 = zext i1 %396 to i8
  %398 = shl nuw nsw i8 %397, 1
  %399 = or i8 %398, 9
  %400 = add nsw i32 %3, 4
  %401 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %402 = load i32, i32* %401, align 16
  %403 = icmp slt i32 %400, %402
  %404 = zext i1 %403 to i8
  %405 = add nuw nsw i8 %399, %404
  %406 = load i32, i32* %115, align 4
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %420, label %408

408:                                              ; preds = %391
  %409 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 16
  %410 = load i32, i32* %409, align 4
  %411 = icmp eq i32 %410, 0
  br i1 %411, label %412, label %420

412:                                              ; preds = %408
  %413 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %414 = load i32, i32* %413, align 16
  %415 = icmp eq i32 %414, 0
  br i1 %415, label %420, label %416

416:                                              ; preds = %412
  %417 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 20
  %418 = load i32, i32* %417, align 4
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %456, label %420

420:                                              ; preds = %408, %391, %416, %412
  %421 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 37
  %422 = load i32, i32* %421, align 4
  %423 = icmp eq i32 %422, -1
  br i1 %423, label %456, label %424

424:                                              ; preds = %420
  %425 = sext i32 %422 to i64
  %426 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 15, i64 %425
  %427 = load i32, i32* %426, align 4
  %428 = icmp eq i32 %427, -1
  br i1 %428, label %456, label %429

429:                                              ; preds = %424
  %430 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 89
  %431 = load %struct.BufferPool*, %struct.BufferPool** %430, align 8
  %432 = sext i32 %427 to i64
  %433 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %431, i64 0, i32 3, i64 %432, i32 8
  %434 = icmp ne %struct.yv12_buffer_config* %433, null
  %435 = and i1 %354, %434
  %436 = xor i1 %435, true
  %437 = icmp eq %struct.yv12_buffer_config* %433, %392
  %438 = or i1 %437, %436
  br i1 %438, label %456, label %439

439:                                              ; preds = %429
  %440 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 74
  %441 = load i32, i32* %440, align 16
  %442 = and i32 %441, 2
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %456, label %444

444:                                              ; preds = %439
  %445 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 1, i32 2
  tail call void @vp9_setup_pre_planes(%struct.macroblockd* %15, i32 0, %struct.yv12_buffer_config* nonnull %433, i32 %3, i32 %4, %struct.scale_factors* %445) #8
  %446 = zext i8 %405 to i64
  %447 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %446, i32 0
  %448 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %447, align 8
  %449 = load i8*, i8** %370, align 8
  %450 = load i32, i32* %372, align 8
  %451 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0, i32 0
  %452 = load i8*, i8** %451, align 8
  %453 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0, i32 1
  %454 = load i32, i32* %453, align 8
  %455 = tail call i32 %448(i8* %449, i32 %450, i8* %452, i32 %454) #8
  br label %456

456:                                              ; preds = %420, %424, %416, %439, %429, %444
  %457 = phi %struct.yv12_buffer_config* [ %433, %444 ], [ %433, %429 ], [ %433, %439 ], [ null, %416 ], [ null, %424 ], [ null, %420 ]
  %458 = phi i32 [ %455, %444 ], [ -1, %429 ], [ -1, %439 ], [ -1, %416 ], [ -1, %424 ], [ -1, %420 ]
  %459 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 19
  %460 = load i32, i32* %459, align 8
  %461 = icmp sgt i32 %460, 0
  br i1 %461, label %462, label %487

462:                                              ; preds = %456
  %463 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 20
  %464 = load i32, i32* %463, align 4
  %465 = icmp eq i32 %464, 0
  br i1 %465, label %466, label %487

466:                                              ; preds = %462
  %467 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 24
  %468 = load i32, i32* %467, align 4
  %469 = icmp eq i32 %468, 0
  br i1 %469, label %487, label %470

470:                                              ; preds = %466
  %471 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 38
  %472 = load i32, i32* %471, align 4
  %473 = icmp eq i32 %472, -1
  br i1 %473, label %484, label %474

474:                                              ; preds = %470
  %475 = sext i32 %472 to i64
  %476 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 15, i64 %475
  %477 = load i32, i32* %476, align 4
  %478 = icmp eq i32 %477, -1
  br i1 %478, label %484, label %479

479:                                              ; preds = %474
  %480 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 89
  %481 = load %struct.BufferPool*, %struct.BufferPool** %480, align 8
  %482 = sext i32 %477 to i64
  %483 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %481, i64 0, i32 3, i64 %482, i32 8
  br label %484

484:                                              ; preds = %470, %474, %479
  %485 = phi %struct.yv12_buffer_config* [ %483, %479 ], [ null, %474 ], [ null, %470 ]
  %486 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 2, i32 2
  tail call void @vp9_setup_pre_planes(%struct.macroblockd* %15, i32 0, %struct.yv12_buffer_config* %485, i32 %3, i32 %4, %struct.scale_factors* %486) #8
  br label %489

487:                                              ; preds = %466, %462, %456
  %488 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 0, i32 2
  tail call void @vp9_setup_pre_planes(%struct.macroblockd* %15, i32 0, %struct.yv12_buffer_config* %392, i32 %3, i32 %4, %struct.scale_factors* %488) #8
  br label %489

489:                                              ; preds = %487, %484
  %490 = phi i8 [ 1, %487 ], [ 3, %484 ]
  %491 = phi i32 [ %458, %487 ], [ -1, %484 ]
  %492 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %377, i64 0, i32 8, i64 0
  store i8 %490, i8* %492, align 4
  %493 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %377, i64 0, i32 8
  %494 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %377, i64 0, i32 8, i64 1
  store i8 -1, i8* %494, align 1
  %495 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %377, i64 0, i32 0
  store i8 12, i8* %495, align 4
  %496 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %377, i64 0, i32 9, i64 0
  %497 = getelementptr inbounds %union.int_mv, %union.int_mv* %496, i64 0, i32 0
  store i32 0, i32* %497, align 4
  %498 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %377, i64 0, i32 7
  store i8 3, i8* %498, align 1
  %499 = load i32, i32* %152, align 8
  %500 = icmp slt i32 %499, 8
  %501 = or i1 %106, %500
  br i1 %501, label %517, label %502

502:                                              ; preds = %489
  %503 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 60
  %504 = load i8, i8* %503, align 4
  %505 = icmp eq i8 %504, 6
  br i1 %505, label %517, label %506

506:                                              ; preds = %502
  %507 = zext i8 %405 to i64
  %508 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %507, i32 0
  %509 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %508, align 8
  %510 = load i8*, i8** %370, align 8
  %511 = load i32, i32* %372, align 8
  %512 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0, i32 0
  %513 = load i8*, i8** %512, align 8
  %514 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0, i32 1
  %515 = load i32, i32* %514, align 8
  %516 = tail call i32 %509(i8* %510, i32 %511, i8* %513, i32 %515) #8
  br label %576

517:                                              ; preds = %502, %489
  %518 = tail call i32 @vp9_int_pro_motion_estimation(%struct.VP9_COMP* %0, %struct.macroblock* %2, i8 zeroext %405, i32 %3, i32 %4, %struct.mv* nonnull @choose_partitioning.dummy_mv) #8
  %519 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 55
  store i32 1, i32* %519, align 16
  %520 = bitcast %union.int_mv* %496 to %struct.mv*
  %521 = getelementptr inbounds %struct.mv, %struct.mv* %520, i64 0, i32 1
  %522 = load i16, i16* %521, align 2
  %523 = sext i16 %522 to i32
  %524 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 56
  store i32 %523, i32* %524, align 4
  %525 = bitcast %union.int_mv* %496 to i16*
  %526 = load i16, i16* %525, align 4
  %527 = sext i16 %526 to i32
  %528 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 57
  store i32 %527, i32* %528, align 8
  %529 = load i32, i32* %340, align 4
  %530 = icmp eq i32 %529, 1
  br i1 %530, label %531, label %576

531:                                              ; preds = %517
  %532 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %533 = load i32, i32* %532, align 16
  %534 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 62
  %535 = load i32, i32* %534, align 16
  %536 = icmp eq i32 %533, %535
  br i1 %536, label %537, label %576

537:                                              ; preds = %531
  %538 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 44
  %539 = load i32, i32* %538, align 4
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %576, label %541

541:                                              ; preds = %537
  %542 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 59
  %543 = load i32, i32* %542, align 16
  %544 = icmp eq i32 %543, 0
  br i1 %544, label %545, label %576

545:                                              ; preds = %541
  %546 = load i32, i32* %98, align 16
  %547 = icmp sgt i32 %546, 640
  br i1 %547, label %548, label %576

548:                                              ; preds = %545
  %549 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %550 = load i32, i32* %549, align 4
  %551 = icmp sgt i32 %550, 480
  br i1 %551, label %552, label %576

552:                                              ; preds = %548
  %553 = icmp slt i32 %527, 0
  %554 = sub nsw i32 0, %527
  %555 = select i1 %553, i32 %554, i32 %527
  %556 = icmp sgt i32 %555, 47
  br i1 %556, label %559, label %557

557:                                              ; preds = %552
  %558 = sub nsw i32 0, %523
  br label %564

559:                                              ; preds = %552
  %560 = icmp slt i32 %523, 0
  %561 = sub nsw i32 0, %523
  %562 = select i1 %560, i32 %561, i32 %523
  %563 = icmp slt i32 %562, 9
  br i1 %563, label %573, label %564

564:                                              ; preds = %557, %559
  %565 = phi i32 [ %558, %557 ], [ %561, %559 ]
  %566 = icmp slt i16 %522, 0
  %567 = select i1 %566, i32 %565, i32 %523
  %568 = icmp sgt i32 %567, 47
  br i1 %568, label %569, label %576

569:                                              ; preds = %564
  %570 = icmp slt i32 %555, 9
  %571 = icmp ult i32 %518, 100000
  %572 = and i1 %571, %570
  br i1 %572, label %575, label %576

573:                                              ; preds = %559
  %574 = icmp ult i32 %518, 100000
  br i1 %574, label %575, label %576

575:                                              ; preds = %569, %573
  store i64 9223372036854775807, i64* %27, align 16
  br label %576

576:                                              ; preds = %541, %537, %517, %531, %545, %548, %575, %573, %569, %564, %506
  %577 = phi i32 [ %164, %541 ], [ 0, %575 ], [ %164, %573 ], [ %164, %569 ], [ %164, %564 ], [ %164, %548 ], [ %164, %545 ], [ %164, %537 ], [ %164, %531 ], [ %164, %517 ], [ %164, %506 ]
  %578 = phi i32 [ %518, %541 ], [ %518, %575 ], [ %518, %573 ], [ %518, %569 ], [ %518, %564 ], [ %518, %548 ], [ %518, %545 ], [ %518, %537 ], [ %518, %531 ], [ %518, %517 ], [ %516, %506 ]
  %579 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 79
  %580 = load i32, i32* %579, align 4
  %581 = icmp eq i32 %580, 0
  %582 = mul i32 %578, 7
  %583 = lshr i32 %582, 3
  %584 = select i1 %581, i32 %578, i32 %583
  %585 = icmp ult i32 %491, %584
  br i1 %585, label %586, label %590

586:                                              ; preds = %576
  %587 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 1, i32 2
  tail call void @vp9_setup_pre_planes(%struct.macroblockd* %15, i32 0, %struct.yv12_buffer_config* %457, i32 %3, i32 %4, %struct.scale_factors* %587) #8
  %588 = getelementptr inbounds [2 x i8], [2 x i8]* %493, i64 0, i64 0
  store i8 2, i8* %588, align 4
  store i32 0, i32* %497, align 4
  %589 = load i8, i8* %494, align 1
  br label %600

590:                                              ; preds = %576
  %591 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 49, i64 1
  %592 = bitcast %struct.mv* %591 to i32*
  %593 = load i32, i32* %497, align 4
  store i32 %593, i32* %592, align 4
  %594 = getelementptr inbounds [2 x i8], [2 x i8]* %493, i64 0, i64 0
  %595 = load i8, i8* %594, align 4
  %596 = load i8, i8* %494, align 1
  %597 = sext i8 %595 to i64
  %598 = icmp sgt i8 %595, 0
  %599 = add nsw i64 %597, -1
  br i1 %598, label %600, label %605

600:                                              ; preds = %586, %590
  %601 = phi i64 [ 1, %586 ], [ %599, %590 ]
  %602 = phi i8 [ %589, %586 ], [ %596, %590 ]
  %603 = phi i8 [ 2, %586 ], [ 1, %590 ]
  %604 = phi i32 [ %491, %586 ], [ %578, %590 ]
  br label %605

605:                                              ; preds = %590, %600
  %606 = phi i8 [ %602, %600 ], [ %596, %590 ]
  %607 = phi i8 [ %603, %600 ], [ 1, %590 ]
  %608 = phi i32 [ %604, %600 ], [ %578, %590 ]
  %609 = phi i64 [ %601, %600 ], [ 0, %590 ]
  %610 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 %609
  %611 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 17, i64 0
  store %struct.RefBuffer* %610, %struct.RefBuffer** %611, align 8
  %612 = sext i8 %606 to i64
  %613 = icmp sgt i8 %606, 0
  %614 = add nsw i64 %612, -1
  %615 = select i1 %613, i64 %614, i64 0
  %616 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 %615
  %617 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 17, i64 1
  store %struct.RefBuffer* %616, %struct.RefBuffer** %617, align 8
  tail call void @vp9_build_inter_predictors_sb(%struct.macroblockd* %15, i32 %3, i32 %4, i8 zeroext 12) #8
  %618 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 126
  %619 = load i32, i32* %618, align 16
  %620 = icmp eq i32 %619, 0
  br i1 %620, label %693, label %621

621:                                              ; preds = %605
  %622 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 11
  %623 = load i32, i32* %622, align 16
  %624 = icmp eq i32 %623, 0
  br i1 %624, label %625, label %690

625:                                              ; preds = %621
  %626 = xor i1 %106, true
  %627 = icmp sgt i32 %4, 7
  %628 = and i1 %627, %626
  br i1 %628, label %629, label %690

629:                                              ; preds = %625
  %630 = add nuw nsw i32 %4, 8
  %631 = load i32, i32* %394, align 8
  %632 = icmp slt i32 %630, %631
  %633 = icmp sgt i32 %3, 7
  %634 = and i1 %633, %632
  br i1 %634, label %635, label %690

635:                                              ; preds = %629
  %636 = add nuw nsw i32 %3, 8
  %637 = load i32, i32* %401, align 16
  %638 = icmp slt i32 %636, %637
  br i1 %638, label %639, label %690

639:                                              ; preds = %635
  %640 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 12), align 1
  %641 = zext i8 %640 to i32
  %642 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 12), align 1
  %643 = zext i8 %642 to i32
  %644 = sub nsw i32 %631, %4
  %645 = icmp slt i32 %644, %641
  %646 = select i1 %645, i32 %644, i32 %641
  %647 = sub nsw i32 %637, %3
  %648 = icmp slt i32 %647, %643
  %649 = select i1 %648, i32 %647, i32 %643
  %650 = icmp sgt i32 %649, 0
  br i1 %650, label %651, label %690

651:                                              ; preds = %639
  %652 = icmp sgt i32 %646, 0
  %653 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 82
  %654 = sext i32 %646 to i64
  br label %655

655:                                              ; preds = %681, %651
  %656 = phi i32 [ 0, %651 ], [ %685, %681 ]
  %657 = phi i32 [ 0, %651 ], [ %683, %681 ]
  %658 = phi i32 [ 0, %651 ], [ %682, %681 ]
  %659 = add i32 %656, %3
  %660 = mul i32 %659, %631
  %661 = add i32 %660, %4
  br i1 %652, label %662, label %681

662:                                              ; preds = %655
  %663 = load i8*, i8** %653, align 16
  br label %664

664:                                              ; preds = %678, %662
  %665 = phi i64 [ 0, %662 ], [ %679, %678 ]
  %666 = phi i32 [ %657, %662 ], [ %676, %678 ]
  %667 = phi i32 [ %658, %662 ], [ %674, %678 ]
  %668 = trunc i64 %665 to i32
  %669 = add i32 %661, %668
  %670 = sext i32 %669 to i64
  %671 = getelementptr inbounds i8, i8* %663, i64 %670
  %672 = load i8, i8* %671, align 1
  %673 = zext i8 %672 to i32
  %674 = add nsw i32 %667, %673
  %675 = sub nsw i32 1, %673
  %676 = add nsw i32 %675, %666
  %677 = icmp sgt i32 %676, 3
  br i1 %677, label %681, label %678

678:                                              ; preds = %664
  %679 = add nuw nsw i64 %665, 2
  %680 = icmp slt i64 %679, %654
  br i1 %680, label %664, label %681

681:                                              ; preds = %678, %664, %655
  %682 = phi i32 [ %658, %655 ], [ %674, %664 ], [ %674, %678 ]
  %683 = phi i32 [ %657, %655 ], [ %676, %664 ], [ %676, %678 ]
  %684 = phi i32 [ %656, %655 ], [ %656, %678 ], [ %649, %664 ]
  %685 = add nsw i32 %684, 2
  %686 = icmp slt i32 %685, %649
  br i1 %686, label %655, label %687

687:                                              ; preds = %681
  %688 = icmp sgt i32 %682, 12
  br i1 %688, label %689, label %690

689:                                              ; preds = %687
  store i32 1, i32* %374, align 16
  br label %690

690:                                              ; preds = %621, %625, %629, %635, %639, %687, %689
  %691 = phi i8 [ 0, %621 ], [ 1, %689 ], [ 0, %687 ], [ 0, %625 ], [ 0, %635 ], [ 0, %629 ], [ 0, %639 ]
  %692 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 51
  store i8 %691, i8* %692, align 2
  br label %693

693:                                              ; preds = %605, %690
  %694 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 0, i32 3, i32 0
  %695 = load i8*, i8** %694, align 8
  %696 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 0, i32 3, i32 1
  %697 = load i32, i32* %696, align 8
  %698 = icmp eq i8 %150, 0
  br i1 %698, label %699, label %775

699:                                              ; preds = %693
  %700 = zext i32 %608 to i64
  %701 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 132
  %702 = load i64, i64* %701, align 16
  %703 = icmp sgt i64 %702, %700
  br i1 %703, label %704, label %775

704:                                              ; preds = %699
  %705 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 12), align 1
  %706 = lshr i8 %705, 1
  %707 = zext i8 %706 to i32
  %708 = add nsw i32 %707, %4
  %709 = load i32, i32* %394, align 8
  %710 = icmp slt i32 %708, %709
  br i1 %710, label %711, label %775

711:                                              ; preds = %704
  %712 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 12), align 1
  %713 = lshr i8 %712, 1
  %714 = zext i8 %713 to i32
  %715 = add nsw i32 %714, %3
  %716 = load i32, i32* %401, align 16
  %717 = icmp slt i32 %715, %716
  br i1 %717, label %718, label %775

718:                                              ; preds = %711
  %719 = icmp sgt i32 %709, %4
  %720 = icmp sgt i32 %716, %3
  %721 = and i1 %719, %720
  br i1 %721, label %722, label %745

722:                                              ; preds = %718
  %723 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 5
  %724 = load i32, i32* %723, align 8
  %725 = mul nsw i32 %724, %3
  %726 = add nsw i32 %725, %4
  %727 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %728 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %727, align 8
  %729 = sext i32 %726 to i64
  %730 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %728, i64 %729
  store %struct.MODE_INFO** %730, %struct.MODE_INFO*** %146, align 8
  %731 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %732 = load %struct.MODE_INFO*, %struct.MODE_INFO** %731, align 16
  %733 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %732, i64 %729
  store %struct.MODE_INFO* %733, %struct.MODE_INFO** %730, align 8
  %734 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 3
  %735 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %734, align 8
  %736 = load i32, i32* %394, align 8
  %737 = mul nsw i32 %736, %3
  %738 = add nsw i32 %737, %4
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %735, i64 %739
  %741 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %740, %struct.MB_MODE_INFO_EXT** %741, align 16
  %742 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %146, align 8
  %743 = load %struct.MODE_INFO*, %struct.MODE_INFO** %742, align 8
  %744 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %743, i64 0, i32 0
  store i8 12, i8* %744, align 4
  br label %745

745:                                              ; preds = %718, %722
  store i8 1, i8* %165, align 1
  %746 = zext i8 %405 to i32
  tail call fastcc void @chroma_check(%struct.VP9_COMP* %0, %struct.macroblock* %2, i32 %746, i32 %608, i32 0, i32 %65)
  %747 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 91
  %748 = load i32, i32* %747, align 4
  %749 = icmp eq i32 %748, 0
  br i1 %749, label %758, label %750

750:                                              ; preds = %745
  %751 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %752 = load i32, i32* %751, align 16
  %753 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %754 = load i32, i32* %753, align 8
  %755 = add nsw i32 %754, -2
  %756 = icmp eq i32 %752, %755
  br i1 %756, label %757, label %758

757:                                              ; preds = %750
  tail call fastcc void @update_partition_svc(%struct.VP9_COMP* %0, i8 zeroext 12, i32 %3, i32 %4)
  br label %758

758:                                              ; preds = %745, %757, %750
  %759 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 83
  %760 = load i32, i32* %759, align 4
  %761 = icmp eq i32 %760, 0
  br i1 %761, label %1935, label %762

762:                                              ; preds = %758
  tail call fastcc void @update_prev_partition_helper(%struct.VP9_COMP* %0, i8 zeroext 12, i32 %3, i32 %4) #8
  %763 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 149
  %764 = load i8*, i8** %763, align 8
  %765 = sext i32 %114 to i64
  %766 = getelementptr inbounds i8, i8* %764, i64 %765
  store i8 0, i8* %766, align 1
  %767 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 150
  %768 = load i8*, i8** %767, align 16
  %769 = mul nsw i32 %114, 25
  %770 = sext i32 %769 to i64
  %771 = getelementptr inbounds i8, i8* %768, i64 %770
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %771, i8* align 1 %165, i64 25, i1 false) #8
  %772 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 151
  %773 = load i8*, i8** %772, align 8
  %774 = getelementptr inbounds i8, i8* %773, i64 %765
  store i8 0, i8* %774, align 1
  br label %1935

775:                                              ; preds = %704, %711, %699, %693
  %776 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 83
  %777 = load i32, i32* %776, align 4
  %778 = icmp eq i32 %777, 0
  br i1 %778, label %870, label %779

779:                                              ; preds = %775
  %780 = zext i32 %578 to i64
  %781 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 133
  %782 = load i64, i64* %781, align 8
  %783 = icmp sgt i64 %782, %780
  br i1 %783, label %784, label %870

784:                                              ; preds = %779
  %785 = load i32, i32* %115, align 4
  %786 = icmp eq i32 %785, 0
  br i1 %786, label %804, label %787

787:                                              ; preds = %784
  %788 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 1
  %789 = load i32, i32* %788, align 4
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 12, i64 %790, i32 14
  %792 = load i32, i32* %791, align 4
  %793 = icmp eq i32 %792, 0
  br i1 %793, label %794, label %798

794:                                              ; preds = %787
  %795 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 23
  %796 = load i32, i32* %795, align 4
  %797 = icmp eq i32 %796, 0
  br i1 %797, label %798, label %799

798:                                              ; preds = %794, %787
  br label %799

799:                                              ; preds = %798, %794
  %800 = phi i32 [ 0, %798 ], [ 1, %794 ]
  %801 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %802 = load i32, i32* %801, align 8
  %803 = shl i32 %802, 1
  br label %804

804:                                              ; preds = %799, %784
  %805 = phi i32 [ %803, %799 ], [ 1, %784 ]
  %806 = phi i32 [ %800, %799 ], [ 1, %784 ]
  %807 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 19
  %808 = load i32, i32* %807, align 8
  %809 = icmp sgt i32 %808, %805
  %810 = icmp ne i32 %806, 0
  %811 = and i1 %810, %809
  br i1 %811, label %812, label %870

812:                                              ; preds = %804
  %813 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 118
  %814 = load i32, i32* %813, align 16
  %815 = or i32 %814, %151
  %816 = icmp eq i32 %815, 0
  br i1 %816, label %817, label %870

817:                                              ; preds = %812
  %818 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 149
  %819 = load i8*, i8** %818, align 8
  %820 = sext i32 %114 to i64
  %821 = getelementptr inbounds i8, i8* %819, i64 %820
  %822 = load i8, i8* %821, align 1
  %823 = icmp eq i8 %822, 0
  br i1 %823, label %824, label %870

824:                                              ; preds = %817
  %825 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 151
  %826 = load i8*, i8** %825, align 8
  %827 = getelementptr inbounds i8, i8* %826, i64 %820
  %828 = load i8, i8* %827, align 1
  %829 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 152
  %830 = load i8, i8* %829, align 16
  %831 = icmp ult i8 %828, %830
  br i1 %831, label %832, label %870

832:                                              ; preds = %824
  %833 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 148
  %834 = load i8*, i8** %833, align 16
  %835 = icmp eq i8* %834, null
  br i1 %835, label %870, label %836

836:                                              ; preds = %832
  tail call fastcc void @copy_partitioning_helper(%struct.VP9_COMP* %0, %struct.macroblock* %2, %struct.macroblockd* %15, i8 zeroext 12, i32 %3, i32 %4) #8
  %837 = load i8*, i8** %825, align 8
  %838 = getelementptr inbounds i8, i8* %837, i64 %820
  %839 = load i8, i8* %838, align 1
  %840 = add i8 %839, 1
  store i8 %840, i8* %838, align 1
  %841 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 150
  %842 = load i8*, i8** %841, align 16
  %843 = mul nsw i32 %114, 25
  %844 = sext i32 %843 to i64
  %845 = getelementptr inbounds i8, i8* %842, i64 %844
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %165, i8* align 1 %845, i64 25, i1 false) #8
  %846 = zext i8 %405 to i32
  tail call fastcc void @chroma_check(%struct.VP9_COMP* %0, %struct.macroblock* %2, i32 %846, i32 %608, i32 0, i32 %65)
  %847 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 91
  %848 = load i32, i32* %847, align 4
  %849 = icmp eq i32 %848, 0
  br i1 %849, label %1935, label %850

850:                                              ; preds = %836
  %851 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %852 = load i32, i32* %851, align 16
  %853 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %854 = load i32, i32* %853, align 8
  %855 = add nsw i32 %854, -2
  %856 = icmp eq i32 %852, %855
  br i1 %856, label %857, label %1935

857:                                              ; preds = %850
  tail call fastcc void @update_partition_svc(%struct.VP9_COMP* %0, i8 zeroext 12, i32 %3, i32 %4)
  br label %1935

858:                                              ; preds = %352
  %859 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 18
  %860 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %859, align 8
  %861 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %860, i64 0, i32 29
  %862 = load i32, i32* %861, align 8
  %863 = and i32 %862, 8
  %864 = icmp eq i32 %863, 0
  br i1 %864, label %870, label %865

865:                                              ; preds = %858
  %866 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 23
  %867 = load i32, i32* %866, align 8
  switch i32 %867, label %869 [
    i32 10, label %870
    i32 12, label %868
  ]

868:                                              ; preds = %865
  br label %870

869:                                              ; preds = %865
  br label %870

870:                                              ; preds = %804, %817, %824, %812, %832, %775, %779, %865, %858, %869, %868
  %871 = phi i8* [ inttoptr (i64 lshr (i64 ptrtoint ([64 x i16]* @VP9_HIGH_VAR_OFFS_8 to i64), i64 1) to i8*), %869 ], [ inttoptr (i64 lshr (i64 ptrtoint ([64 x i16]* @VP9_HIGH_VAR_OFFS_12 to i64), i64 1) to i8*), %868 ], [ getelementptr inbounds ([64 x i8], [64 x i8]* @VP9_VAR_OFFS, i64 0, i64 0), %858 ], [ inttoptr (i64 lshr (i64 ptrtoint ([64 x i16]* @VP9_HIGH_VAR_OFFS_10 to i64), i64 1) to i8*), %865 ], [ %695, %779 ], [ %695, %775 ], [ %695, %832 ], [ %695, %812 ], [ %695, %824 ], [ %695, %817 ], [ %695, %804 ]
  %872 = phi i32 [ 0, %869 ], [ 0, %868 ], [ 0, %858 ], [ 0, %865 ], [ %697, %779 ], [ %697, %775 ], [ %697, %832 ], [ %697, %812 ], [ %697, %824 ], [ %697, %817 ], [ %697, %804 ]
  %873 = phi i32 [ %164, %869 ], [ %164, %868 ], [ %164, %858 ], [ %164, %865 ], [ %577, %779 ], [ %577, %775 ], [ %577, %832 ], [ %577, %812 ], [ %577, %824 ], [ %577, %817 ], [ %577, %804 ]
  %874 = phi i32 [ -1, %869 ], [ -1, %868 ], [ -1, %858 ], [ -1, %865 ], [ %608, %779 ], [ %608, %775 ], [ %608, %832 ], [ %608, %812 ], [ %608, %824 ], [ %608, %817 ], [ %608, %804 ]
  %875 = phi i8 [ 12, %869 ], [ 12, %868 ], [ 12, %858 ], [ 12, %865 ], [ %405, %779 ], [ %405, %775 ], [ %405, %832 ], [ %405, %812 ], [ %405, %824 ], [ %405, %817 ], [ %405, %804 ]
  %876 = phi i8 [ 1, %869 ], [ 1, %868 ], [ 1, %858 ], [ 1, %865 ], [ %607, %779 ], [ %607, %775 ], [ %607, %832 ], [ %607, %812 ], [ %607, %824 ], [ %607, %817 ], [ %607, %804 ]
  %877 = and i1 %106, %354
  br i1 %877, label %878, label %884

878:                                              ; preds = %870
  %879 = tail call i8* @vpx_calloc(i64 16, i64 2704) #8
  %880 = bitcast i8* %879 to %struct.v16x16*
  %881 = icmp eq i8* %879, null
  br i1 %881, label %882, label %884

882:                                              ; preds = %878
  %883 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %883, i32 2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #8
  br label %884

884:                                              ; preds = %878, %882, %870
  %885 = phi i8* [ %879, %878 ], [ null, %882 ], [ null, %870 ]
  %886 = phi %struct.v16x16* [ %880, %878 ], [ null, %882 ], [ null, %870 ]
  %887 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 18
  %888 = icmp ne i32 %873, 0
  %889 = add nsw i32 %151, -1
  %890 = icmp ugt i32 %889, 1
  %891 = bitcast i32* %6 to i8*
  %892 = bitcast i32* %7 to i8*
  %893 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 131
  %894 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 60
  %895 = icmp eq i32 %145, 0
  br label %898

896:                                              ; preds = %1185
  %897 = icmp eq i64 %907, 4
  br i1 %897, label %1188, label %898

898:                                              ; preds = %896, %884
  %899 = phi i64 [ 0, %884 ], [ %907, %896 ]
  %900 = trunc i64 %899 to i32
  %901 = shl i32 %900, 5
  %902 = and i32 %901, 32
  %903 = trunc i64 %899 to i32
  %904 = lshr i32 %903, 1
  %905 = shl i32 %904, 5
  %906 = shl i64 %899, 2
  %907 = add nuw nsw i64 %899, 1
  %908 = getelementptr inbounds [21 x i32], [21 x i32]* %9, i64 0, i64 %907
  store i32 0, i32* %908, align 4
  %909 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 %899
  store i32 0, i32* %909, align 4
  %910 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %899
  store i32 0, i32* %910, align 4
  %911 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 %899
  store i32 2147483647, i32* %911, align 4
  br label %912

912:                                              ; preds = %1185, %898
  %913 = phi i64 [ 0, %898 ], [ %1186, %1185 ]
  %914 = trunc i64 %913 to i32
  %915 = shl i32 %914, 4
  %916 = and i32 %915, 16
  %917 = or i32 %916, %902
  %918 = trunc i64 %913 to i32
  %919 = lshr i32 %918, 1
  %920 = shl i32 %919, 4
  %921 = add nsw i32 %920, %905
  %922 = add nuw nsw i64 %913, %906
  %923 = add nuw nsw i64 %922, 5
  %924 = getelementptr inbounds [21 x i32], [21 x i32]* %9, i64 0, i64 %923
  store i32 0, i32* %924, align 4
  %925 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %922
  store i32 0, i32* %925, align 4
  br i1 %169, label %1116, label %926

926:                                              ; preds = %912
  %927 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %887, align 8
  %928 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %927, i64 0, i32 29
  %929 = load i32, i32* %928, align 8
  %930 = and i32 %929, 8
  %931 = icmp eq i32 %930, 0
  br label %932

932:                                              ; preds = %969, %926
  %933 = phi i64 [ 0, %926 ], [ %975, %969 ]
  %934 = trunc i64 %933 to i32
  %935 = shl i32 %934, 3
  %936 = and i32 %935, 8
  %937 = or i32 %936, %917
  %938 = lshr i32 %934, 1
  %939 = shl i32 %938, 3
  %940 = add nsw i32 %939, %921
  %941 = icmp slt i32 %937, %363
  %942 = icmp slt i32 %940, %369
  %943 = and i1 %941, %942
  br i1 %943, label %944, label %969

944:                                              ; preds = %932
  %945 = mul nsw i32 %940, %373
  %946 = sext i32 %945 to i64
  %947 = getelementptr inbounds i8, i8* %371, i64 %946
  %948 = zext i32 %937 to i64
  %949 = getelementptr inbounds i8, i8* %947, i64 %948
  br i1 %931, label %957, label %950

950:                                              ; preds = %944
  %951 = call i32 @vpx_highbd_avg_8x8_sse2(i8* %949, i32 %373) #8
  %952 = mul nsw i32 %940, %872
  %953 = sext i32 %952 to i64
  %954 = getelementptr inbounds i8, i8* %871, i64 %953
  %955 = getelementptr inbounds i8, i8* %954, i64 %948
  %956 = call i32 @vpx_highbd_avg_8x8_sse2(i8* %955, i32 %872) #8
  br label %964

957:                                              ; preds = %944
  %958 = call i32 @vpx_avg_8x8_sse2(i8* %949, i32 %373) #8
  %959 = mul nsw i32 %940, %872
  %960 = sext i32 %959 to i64
  %961 = getelementptr inbounds i8, i8* %871, i64 %960
  %962 = getelementptr inbounds i8, i8* %961, i64 %948
  %963 = call i32 @vpx_avg_8x8_sse2(i8* %962, i32 %872) #8
  br label %964

964:                                              ; preds = %957, %950
  %965 = phi i32 [ %951, %950 ], [ %958, %957 ]
  %966 = phi i32 [ %956, %950 ], [ %963, %957 ]
  %967 = sub nsw i32 %965, %966
  %968 = mul nsw i32 %967, %967
  br label %969

969:                                              ; preds = %964, %932
  %970 = phi i32 [ %968, %964 ], [ 0, %932 ]
  %971 = phi i32 [ %967, %964 ], [ 0, %932 ]
  %972 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 1, i64 %933, i32 0, i32 0, i32 0
  store i32 %970, i32* %972, align 4
  %973 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 1, i64 %933, i32 0, i32 0, i32 1
  store i32 %971, i32* %973, align 4
  %974 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 1, i64 %933, i32 0, i32 0, i32 2
  store i32 0, i32* %974, align 4
  %975 = add nuw nsw i64 %933, 1
  %976 = icmp eq i64 %975, 4
  br i1 %976, label %977, label %932

977:                                              ; preds = %969
  %978 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 1, i64 0, i32 0, i32 0, i32 0
  %979 = load i32, i32* %978, align 4
  %980 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 1, i64 1, i32 0, i32 0, i32 0
  %981 = load i32, i32* %980, align 4
  %982 = add i32 %981, %979
  %983 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 1, i64 0, i32 0, i32 0, i32 1
  %984 = load i32, i32* %983, align 4
  %985 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 1, i64 1, i32 0, i32 0, i32 1
  %986 = load i32, i32* %985, align 4
  %987 = add nsw i32 %986, %984
  %988 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 1, i64 0, i32 0, i32 0, i32 2
  %989 = load i32, i32* %988, align 4
  %990 = add nsw i32 %989, 1
  %991 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 1, i64 0, i32 0
  store i32 %982, i32* %991, align 4
  %992 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 1, i64 0, i32 1
  store i32 %987, i32* %992, align 4
  %993 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 1, i64 0, i32 2
  store i32 %990, i32* %993, align 4
  %994 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 1, i64 2, i32 0, i32 0, i32 0
  %995 = load i32, i32* %994, align 4
  %996 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 1, i64 3, i32 0, i32 0, i32 0
  %997 = load i32, i32* %996, align 4
  %998 = add i32 %997, %995
  %999 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 1, i64 2, i32 0, i32 0, i32 1
  %1000 = load i32, i32* %999, align 4
  %1001 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 1, i64 3, i32 0, i32 0, i32 1
  %1002 = load i32, i32* %1001, align 4
  %1003 = add nsw i32 %1002, %1000
  %1004 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 1, i64 2, i32 0, i32 0, i32 2
  %1005 = load i32, i32* %1004, align 4
  %1006 = add nsw i32 %1005, 1
  %1007 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 1, i64 1, i32 0
  store i32 %998, i32* %1007, align 4
  %1008 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 1, i64 1, i32 1
  store i32 %1003, i32* %1008, align 4
  %1009 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 1, i64 1, i32 2
  store i32 %1006, i32* %1009, align 4
  %1010 = add i32 %995, %979
  %1011 = add nsw i32 %1000, %984
  %1012 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 2, i64 0, i32 0
  store i32 %1010, i32* %1012, align 4
  %1013 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 2, i64 0, i32 1
  store i32 %1011, i32* %1013, align 4
  %1014 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 2, i64 0, i32 2
  store i32 %990, i32* %1014, align 4
  %1015 = add i32 %997, %981
  %1016 = add nsw i32 %1002, %986
  %1017 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 1, i64 1, i32 0, i32 0, i32 2
  %1018 = load i32, i32* %1017, align 4
  %1019 = add nsw i32 %1018, 1
  %1020 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 2, i64 1, i32 0
  store i32 %1015, i32* %1020, align 4
  %1021 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 2, i64 1, i32 1
  store i32 %1016, i32* %1021, align 4
  %1022 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 2, i64 1, i32 2
  store i32 %1019, i32* %1022, align 4
  %1023 = add i32 %1015, %1010
  %1024 = add nsw i32 %1016, %1011
  %1025 = add nsw i32 %989, 2
  %1026 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 0, i32 0
  store i32 %1023, i32* %1026, align 4
  %1027 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 0, i32 1
  store i32 %1024, i32* %1027, align 4
  %1028 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 0, i32 2
  store i32 %1025, i32* %1028, align 4
  %1029 = sext i32 %1024 to i64
  %1030 = mul nsw i64 %1029, %1029
  %1031 = zext i32 %1025 to i64
  %1032 = lshr i64 %1030, %1031
  %1033 = trunc i64 %1032 to i32
  %1034 = sub i32 %1023, %1033
  %1035 = shl i32 %1034, 8
  %1036 = lshr i32 %1035, %1025
  %1037 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 0, i32 0, i32 3
  store i32 %1036, i32* %1037, align 4
  %1038 = load i32, i32* %909, align 4
  %1039 = add nsw i32 %1038, %1036
  store i32 %1039, i32* %909, align 4
  %1040 = load i32, i32* %911, align 4
  %1041 = icmp slt i32 %1036, %1040
  br i1 %1041, label %1042, label %1043

1042:                                             ; preds = %977
  store i32 %1036, i32* %911, align 4
  br label %1043

1043:                                             ; preds = %1042, %977
  %1044 = load i32, i32* %910, align 4
  %1045 = icmp sgt i32 %1036, %1044
  br i1 %1045, label %1046, label %1047

1046:                                             ; preds = %1043
  store i32 %1036, i32* %910, align 4
  br label %1047

1047:                                             ; preds = %1046, %1043
  %1048 = sext i32 %1036 to i64
  %1049 = load i64, i64* %27, align 16
  %1050 = icmp slt i64 %1049, %1048
  br i1 %1050, label %1051, label %1052

1051:                                             ; preds = %1047
  store i32 1, i32* %924, align 4
  store i32 1, i32* %908, align 4
  store i32 1, i32* %374, align 16
  br label %1111

1052:                                             ; preds = %1047
  %1053 = load i64, i64* %26, align 8
  %1054 = icmp slt i64 %1053, %1048
  %1055 = and i1 %888, %1054
  %1056 = and i1 %890, %1055
  br i1 %1056, label %1057, label %1111

1057:                                             ; preds = %1052
  %1058 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %887, align 8
  %1059 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1058, i64 0, i32 29
  %1060 = load i32, i32* %1059, align 8
  %1061 = and i32 %1060, 8
  %1062 = icmp eq i32 %1061, 0
  br label %1063

1063:                                             ; preds = %1096, %1057
  %1064 = phi i32 [ 255, %1057 ], [ %1098, %1096 ]
  %1065 = phi i32 [ 0, %1057 ], [ %1097, %1096 ]
  %1066 = phi i32 [ 0, %1057 ], [ %1099, %1096 ]
  %1067 = shl i32 %1066, 3
  %1068 = and i32 %1067, 8
  %1069 = or i32 %1068, %917
  %1070 = lshr i32 %1066, 1
  %1071 = shl i32 %1070, 3
  %1072 = add nsw i32 %1071, %921
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %891) #8
  store i32 0, i32* %6, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %892) #8
  store i32 0, i32* %7, align 4
  %1073 = icmp slt i32 %1069, %363
  %1074 = icmp slt i32 %1072, %369
  %1075 = and i1 %1073, %1074
  br i1 %1075, label %1076, label %1096

1076:                                             ; preds = %1063
  %1077 = mul nsw i32 %1072, %373
  %1078 = sext i32 %1077 to i64
  %1079 = getelementptr inbounds i8, i8* %371, i64 %1078
  %1080 = zext i32 %1069 to i64
  %1081 = getelementptr inbounds i8, i8* %1079, i64 %1080
  %1082 = mul nsw i32 %1072, %872
  %1083 = sext i32 %1082 to i64
  %1084 = getelementptr inbounds i8, i8* %871, i64 %1083
  %1085 = getelementptr inbounds i8, i8* %1084, i64 %1080
  br i1 %1062, label %1087, label %1086

1086:                                             ; preds = %1076
  call void @vpx_highbd_minmax_8x8_c(i8* %1081, i32 %373, i8* %1085, i32 %872, i32* nonnull %6, i32* nonnull %7) #8
  br label %1088

1087:                                             ; preds = %1076
  call void @vpx_minmax_8x8_sse2(i8* %1081, i32 %373, i8* %1085, i32 %872, i32* nonnull %6, i32* nonnull %7) #8
  br label %1088

1088:                                             ; preds = %1087, %1086
  %1089 = load i32, i32* %7, align 4
  %1090 = load i32, i32* %6, align 4
  %1091 = sub nsw i32 %1089, %1090
  %1092 = icmp sgt i32 %1091, %1065
  %1093 = select i1 %1092, i32 %1091, i32 %1065
  %1094 = icmp slt i32 %1091, %1064
  %1095 = select i1 %1094, i32 %1091, i32 %1064
  br label %1096

1096:                                             ; preds = %1088, %1063
  %1097 = phi i32 [ %1065, %1063 ], [ %1093, %1088 ]
  %1098 = phi i32 [ %1064, %1063 ], [ %1095, %1088 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %892) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %891) #8
  %1099 = add nuw nsw i32 %1066, 1
  %1100 = icmp eq i32 %1099, 4
  br i1 %1100, label %1101, label %1063

1101:                                             ; preds = %1096
  %1102 = sub nsw i32 %1097, %1098
  %1103 = load i64, i64* %893, align 8
  %1104 = trunc i64 %1103 to i32
  %1105 = load i8, i8* %894, align 4
  %1106 = icmp eq i8 %1105, 6
  %1107 = zext i1 %1106 to i32
  %1108 = shl i32 %1104, %1107
  %1109 = icmp sgt i32 %1102, %1108
  br i1 %1109, label %1110, label %1111

1110:                                             ; preds = %1101
  store i32 1, i32* %924, align 4
  store i32 1, i32* %908, align 4
  store i32 1, i32* %374, align 16
  br label %1111

1111:                                             ; preds = %1051, %1052, %1110, %1101
  br i1 %106, label %1112, label %1185

1112:                                             ; preds = %1111
  %1113 = load i32, i32* %1037, align 4
  %1114 = sext i32 %1113 to i64
  %1115 = icmp slt i64 %357, %1114
  br i1 %1115, label %1116, label %1185

1116:                                             ; preds = %912, %1112
  store i32 0, i32* %924, align 4
  store i32 1, i32* %925, align 4
  br label %1117

1117:                                             ; preds = %1182, %1116
  %1118 = phi i64 [ 0, %1116 ], [ %1183, %1182 ]
  %1119 = trunc i64 %1118 to i32
  %1120 = shl i32 %1119, 3
  %1121 = and i32 %1120, 8
  %1122 = or i32 %1121, %917
  %1123 = trunc i64 %1118 to i32
  %1124 = lshr i32 %1123, 1
  %1125 = shl i32 %1124, 3
  %1126 = add nsw i32 %1125, %921
  %1127 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %899, i32 1, i64 %913, i32 1, i64 %1118
  %1128 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %886, i64 %922, i32 1, i64 %1118
  %1129 = select i1 %169, %struct.v8x8* %1127, %struct.v8x8* %1128
  %1130 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %887, align 8
  %1131 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1130, i64 0, i32 29
  %1132 = load i32, i32* %1131, align 8
  %1133 = and i32 %1132, 8
  %1134 = icmp eq i32 %1133, 0
  br label %1135

1135:                                             ; preds = %1174, %1117
  %1136 = phi i64 [ 0, %1117 ], [ %1180, %1174 ]
  %1137 = trunc i64 %1136 to i32
  %1138 = shl i32 %1137, 2
  %1139 = and i32 %1138, 4
  %1140 = or i32 %1122, %1139
  %1141 = lshr i32 %1137, 1
  %1142 = shl nuw i32 %1141, 2
  %1143 = add nsw i32 %1126, %1142
  %1144 = icmp slt i32 %1140, %363
  %1145 = icmp slt i32 %1143, %369
  %1146 = and i1 %1144, %1145
  br i1 %1146, label %1147, label %1174

1147:                                             ; preds = %1135
  %1148 = mul nsw i32 %1143, %373
  %1149 = sext i32 %1148 to i64
  %1150 = getelementptr inbounds i8, i8* %371, i64 %1149
  %1151 = zext i32 %1140 to i64
  %1152 = getelementptr inbounds i8, i8* %1150, i64 %1151
  br i1 %1134, label %1161, label %1153

1153:                                             ; preds = %1147
  %1154 = call i32 @vpx_highbd_avg_4x4_sse2(i8* %1152, i32 %373) #8
  br i1 %895, label %1155, label %1169

1155:                                             ; preds = %1153
  %1156 = mul nsw i32 %1143, %872
  %1157 = sext i32 %1156 to i64
  %1158 = getelementptr inbounds i8, i8* %871, i64 %1157
  %1159 = getelementptr inbounds i8, i8* %1158, i64 %1151
  %1160 = call i32 @vpx_highbd_avg_4x4_sse2(i8* %1159, i32 %872) #8
  br label %1169

1161:                                             ; preds = %1147
  %1162 = call i32 @vpx_avg_4x4_sse2(i8* %1152, i32 %373) #8
  br i1 %895, label %1163, label %1169

1163:                                             ; preds = %1161
  %1164 = mul nsw i32 %1143, %872
  %1165 = sext i32 %1164 to i64
  %1166 = getelementptr inbounds i8, i8* %871, i64 %1165
  %1167 = getelementptr inbounds i8, i8* %1166, i64 %1151
  %1168 = call i32 @vpx_avg_4x4_sse2(i8* %1167, i32 %872) #8
  br label %1169

1169:                                             ; preds = %1163, %1161, %1155, %1153
  %1170 = phi i32 [ %1154, %1153 ], [ %1154, %1155 ], [ %1162, %1161 ], [ %1162, %1163 ]
  %1171 = phi i32 [ 128, %1153 ], [ %1160, %1155 ], [ 128, %1161 ], [ %1168, %1163 ]
  %1172 = sub nsw i32 %1170, %1171
  %1173 = mul nsw i32 %1172, %1172
  br label %1174

1174:                                             ; preds = %1169, %1135
  %1175 = phi i32 [ %1173, %1169 ], [ 0, %1135 ]
  %1176 = phi i32 [ %1172, %1169 ], [ 0, %1135 ]
  %1177 = getelementptr inbounds %struct.v8x8, %struct.v8x8* %1129, i64 0, i32 1, i64 %1136, i32 0, i32 0, i32 0
  store i32 %1175, i32* %1177, align 4
  %1178 = getelementptr inbounds %struct.v8x8, %struct.v8x8* %1129, i64 0, i32 1, i64 %1136, i32 0, i32 0, i32 1
  store i32 %1176, i32* %1178, align 4
  %1179 = getelementptr inbounds %struct.v8x8, %struct.v8x8* %1129, i64 0, i32 1, i64 %1136, i32 0, i32 0, i32 2
  store i32 0, i32* %1179, align 4
  %1180 = add nuw nsw i64 %1136, 1
  %1181 = icmp eq i64 %1180, 4
  br i1 %1181, label %1182, label %1135

1182:                                             ; preds = %1174
  %1183 = add nuw nsw i64 %1118, 1
  %1184 = icmp eq i64 %1183, 4
  br i1 %1184, label %1185, label %1117

1185:                                             ; preds = %1182, %1112, %1111
  %1186 = add nuw nsw i64 %913, 1
  %1187 = icmp eq i64 %1186, 4
  br i1 %1187, label %896, label %912

1188:                                             ; preds = %896
  %1189 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128
  %1190 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %1189, i64 0, i32 0
  %1191 = load i32, i32* %1190, align 8
  %1192 = icmp eq i32 %1191, 0
  br i1 %1192, label %1195, label %1193

1193:                                             ; preds = %1188
  %1194 = call i32 @vp9_noise_estimate_extract_level(%struct.noise_estimate* %1189) #8
  br label %1195

1195:                                             ; preds = %1188, %1193
  %1196 = phi i32 [ %1194, %1193 ], [ 1, %1188 ]
  %1197 = xor i1 %169, true
  %1198 = or i32 %1196, %145
  %1199 = icmp eq i32 %1198, 0
  %1200 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  br label %1201

1201:                                             ; preds = %1443, %1195
  %1202 = phi i64 [ 0, %1195 ], [ %1207, %1443 ]
  %1203 = phi i32 [ 2147483647, %1195 ], [ %1446, %1443 ]
  %1204 = phi i32 [ 0, %1195 ], [ %1445, %1443 ]
  %1205 = phi i32 [ 0, %1195 ], [ %1444, %1443 ]
  %1206 = shl i64 %1202, 2
  %1207 = add nuw nsw i64 %1202, 1
  %1208 = getelementptr inbounds [21 x i32], [21 x i32]* %9, i64 0, i64 %1207
  br label %1209

1209:                                             ; preds = %1341, %1201
  %1210 = phi i64 [ 0, %1201 ], [ %1342, %1341 ]
  %1211 = add nuw nsw i64 %1210, %1206
  %1212 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %1211
  %1213 = load i32, i32* %1212, align 4
  %1214 = icmp eq i32 %1213, 1
  br i1 %1214, label %1215, label %1341

1215:                                             ; preds = %1209
  %1216 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %886, i64 %1211
  %1217 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 1, i64 %1210
  %1218 = select i1 %169, %struct.v16x16* %1217, %struct.v16x16* %1216
  br label %1219

1219:                                             ; preds = %1219, %1215
  %1220 = phi i64 [ 0, %1215 ], [ %1272, %1219 ]
  %1221 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 1, i64 0, i32 0, i32 0, i32 0
  %1222 = load i32, i32* %1221, align 4
  %1223 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 1, i64 1, i32 0, i32 0, i32 0
  %1224 = load i32, i32* %1223, align 4
  %1225 = add i32 %1224, %1222
  %1226 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 1, i64 0, i32 0, i32 0, i32 1
  %1227 = load i32, i32* %1226, align 4
  %1228 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 1, i64 1, i32 0, i32 0, i32 1
  %1229 = load i32, i32* %1228, align 4
  %1230 = add nsw i32 %1229, %1227
  %1231 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 1, i64 0, i32 0, i32 0, i32 2
  %1232 = load i32, i32* %1231, align 4
  %1233 = add nsw i32 %1232, 1
  %1234 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 0, i32 1, i64 0, i32 0
  store i32 %1225, i32* %1234, align 4
  %1235 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 0, i32 1, i64 0, i32 1
  store i32 %1230, i32* %1235, align 4
  %1236 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 0, i32 1, i64 0, i32 2
  store i32 %1233, i32* %1236, align 4
  %1237 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 1, i64 2, i32 0, i32 0, i32 0
  %1238 = load i32, i32* %1237, align 4
  %1239 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 1, i64 3, i32 0, i32 0, i32 0
  %1240 = load i32, i32* %1239, align 4
  %1241 = add i32 %1240, %1238
  %1242 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 1, i64 2, i32 0, i32 0, i32 1
  %1243 = load i32, i32* %1242, align 4
  %1244 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 1, i64 3, i32 0, i32 0, i32 1
  %1245 = load i32, i32* %1244, align 4
  %1246 = add nsw i32 %1245, %1243
  %1247 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 1, i64 2, i32 0, i32 0, i32 2
  %1248 = load i32, i32* %1247, align 4
  %1249 = add nsw i32 %1248, 1
  %1250 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 0, i32 1, i64 1, i32 0
  store i32 %1241, i32* %1250, align 4
  %1251 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 0, i32 1, i64 1, i32 1
  store i32 %1246, i32* %1251, align 4
  %1252 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 0, i32 1, i64 1, i32 2
  store i32 %1249, i32* %1252, align 4
  %1253 = add i32 %1238, %1222
  %1254 = add nsw i32 %1243, %1227
  %1255 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 0, i32 2, i64 0, i32 0
  store i32 %1253, i32* %1255, align 4
  %1256 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 0, i32 2, i64 0, i32 1
  store i32 %1254, i32* %1256, align 4
  %1257 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 0, i32 2, i64 0, i32 2
  store i32 %1233, i32* %1257, align 4
  %1258 = add i32 %1240, %1224
  %1259 = add nsw i32 %1245, %1229
  %1260 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 1, i64 1, i32 0, i32 0, i32 2
  %1261 = load i32, i32* %1260, align 4
  %1262 = add nsw i32 %1261, 1
  %1263 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 0, i32 2, i64 1, i32 0
  store i32 %1258, i32* %1263, align 4
  %1264 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 0, i32 2, i64 1, i32 1
  store i32 %1259, i32* %1264, align 4
  %1265 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 0, i32 2, i64 1, i32 2
  store i32 %1262, i32* %1265, align 4
  %1266 = add i32 %1258, %1253
  %1267 = add nsw i32 %1259, %1254
  %1268 = add nsw i32 %1232, 2
  %1269 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 0, i32 0, i32 0
  store i32 %1266, i32* %1269, align 4
  %1270 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 0, i32 0, i32 1
  store i32 %1267, i32* %1270, align 4
  %1271 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 %1220, i32 0, i32 0, i32 2
  store i32 %1268, i32* %1271, align 4
  %1272 = add nuw nsw i64 %1220, 1
  %1273 = icmp eq i64 %1272, 4
  br i1 %1273, label %1274, label %1219

1274:                                             ; preds = %1219
  %1275 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0
  %1276 = load i32, i32* %1275, align 4
  %1277 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0
  %1278 = load i32, i32* %1277, align 4
  %1279 = add i32 %1278, %1276
  %1280 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 0, i32 0, i32 0, i32 1
  %1281 = load i32, i32* %1280, align 4
  %1282 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 1, i32 0, i32 0, i32 1
  %1283 = load i32, i32* %1282, align 4
  %1284 = add nsw i32 %1283, %1281
  %1285 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 0, i32 0, i32 0, i32 2
  %1286 = load i32, i32* %1285, align 4
  %1287 = add nsw i32 %1286, 1
  %1288 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 1, i64 0, i32 0
  store i32 %1279, i32* %1288, align 4
  %1289 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 1, i64 0, i32 1
  store i32 %1284, i32* %1289, align 4
  %1290 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 1, i64 0, i32 2
  store i32 %1287, i32* %1290, align 4
  %1291 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0
  %1292 = load i32, i32* %1291, align 4
  %1293 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0
  %1294 = load i32, i32* %1293, align 4
  %1295 = add i32 %1294, %1292
  %1296 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 2, i32 0, i32 0, i32 1
  %1297 = load i32, i32* %1296, align 4
  %1298 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 3, i32 0, i32 0, i32 1
  %1299 = load i32, i32* %1298, align 4
  %1300 = add nsw i32 %1299, %1297
  %1301 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 2, i32 0, i32 0, i32 2
  %1302 = load i32, i32* %1301, align 4
  %1303 = add nsw i32 %1302, 1
  %1304 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 1, i64 1, i32 0
  store i32 %1295, i32* %1304, align 4
  %1305 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 1, i64 1, i32 1
  store i32 %1300, i32* %1305, align 4
  %1306 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 1, i64 1, i32 2
  store i32 %1303, i32* %1306, align 4
  %1307 = add i32 %1292, %1276
  %1308 = add nsw i32 %1297, %1281
  %1309 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 2, i64 0, i32 0
  store i32 %1307, i32* %1309, align 4
  %1310 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 2, i64 0, i32 1
  store i32 %1308, i32* %1310, align 4
  %1311 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 2, i64 0, i32 2
  store i32 %1287, i32* %1311, align 4
  %1312 = add i32 %1294, %1278
  %1313 = add nsw i32 %1299, %1283
  %1314 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 1, i64 1, i32 0, i32 0, i32 2
  %1315 = load i32, i32* %1314, align 4
  %1316 = add nsw i32 %1315, 1
  %1317 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 2, i64 1, i32 0
  store i32 %1312, i32* %1317, align 4
  %1318 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 2, i64 1, i32 1
  store i32 %1313, i32* %1318, align 4
  %1319 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 2, i64 1, i32 2
  store i32 %1316, i32* %1319, align 4
  %1320 = add i32 %1312, %1307
  %1321 = add nsw i32 %1313, %1308
  %1322 = add nsw i32 %1286, 2
  %1323 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 0, i32 0
  store i32 %1320, i32* %1323, align 4
  %1324 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 0, i32 1
  store i32 %1321, i32* %1324, align 4
  %1325 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 0, i32 2
  store i32 %1322, i32* %1325, align 4
  %1326 = sext i32 %1321 to i64
  %1327 = mul nsw i64 %1326, %1326
  %1328 = zext i32 %1322 to i64
  %1329 = lshr i64 %1327, %1328
  %1330 = trunc i64 %1329 to i32
  %1331 = sub i32 %1320, %1330
  %1332 = shl i32 %1331, 8
  %1333 = lshr i32 %1332, %1322
  %1334 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1218, i64 0, i32 0, i32 0, i32 3
  store i32 %1333, i32* %1334, align 4
  %1335 = sext i32 %1333 to i64
  %1336 = load i64, i64* %27, align 16
  %1337 = icmp slt i64 %1336, %1335
  br i1 %1337, label %1338, label %1341

1338:                                             ; preds = %1274
  %1339 = add nuw nsw i64 %1211, 5
  %1340 = getelementptr inbounds [21 x i32], [21 x i32]* %9, i64 0, i64 %1339
  store i32 1, i32* %1340, align 4
  store i32 1, i32* %1208, align 4
  store i32 1, i32* %374, align 16
  br label %1341

1341:                                             ; preds = %1274, %1338, %1209
  %1342 = add nuw nsw i64 %1210, 1
  %1343 = icmp eq i64 %1342, 4
  br i1 %1343, label %1344, label %1209

1344:                                             ; preds = %1341
  %1345 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 1, i64 0, i32 0, i32 0, i32 0
  %1346 = load i32, i32* %1345, align 4
  %1347 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 1, i64 1, i32 0, i32 0, i32 0
  %1348 = load i32, i32* %1347, align 4
  %1349 = add i32 %1348, %1346
  %1350 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 1, i64 0, i32 0, i32 0, i32 1
  %1351 = load i32, i32* %1350, align 4
  %1352 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 1, i64 1, i32 0, i32 0, i32 1
  %1353 = load i32, i32* %1352, align 4
  %1354 = add nsw i32 %1353, %1351
  %1355 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 1, i64 0, i32 0, i32 0, i32 2
  %1356 = load i32, i32* %1355, align 4
  %1357 = add nsw i32 %1356, 1
  %1358 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 1, i64 0, i32 0
  store i32 %1349, i32* %1358, align 4
  %1359 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 1, i64 0, i32 1
  store i32 %1354, i32* %1359, align 4
  %1360 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 1, i64 0, i32 2
  store i32 %1357, i32* %1360, align 4
  %1361 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 1, i64 2, i32 0, i32 0, i32 0
  %1362 = load i32, i32* %1361, align 4
  %1363 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 1, i64 3, i32 0, i32 0, i32 0
  %1364 = load i32, i32* %1363, align 4
  %1365 = add i32 %1364, %1362
  %1366 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 1, i64 2, i32 0, i32 0, i32 1
  %1367 = load i32, i32* %1366, align 4
  %1368 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 1, i64 3, i32 0, i32 0, i32 1
  %1369 = load i32, i32* %1368, align 4
  %1370 = add nsw i32 %1369, %1367
  %1371 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 1, i64 2, i32 0, i32 0, i32 2
  %1372 = load i32, i32* %1371, align 4
  %1373 = add nsw i32 %1372, 1
  %1374 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 1, i64 1, i32 0
  store i32 %1365, i32* %1374, align 4
  %1375 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 1, i64 1, i32 1
  store i32 %1370, i32* %1375, align 4
  %1376 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 1, i64 1, i32 2
  store i32 %1373, i32* %1376, align 4
  %1377 = add i32 %1362, %1346
  %1378 = add nsw i32 %1367, %1351
  %1379 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 2, i64 0, i32 0
  store i32 %1377, i32* %1379, align 4
  %1380 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 2, i64 0, i32 1
  store i32 %1378, i32* %1380, align 4
  %1381 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 2, i64 0, i32 2
  store i32 %1357, i32* %1381, align 4
  %1382 = add i32 %1364, %1348
  %1383 = add nsw i32 %1369, %1353
  %1384 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 1, i64 1, i32 0, i32 0, i32 2
  %1385 = load i32, i32* %1384, align 4
  %1386 = add nsw i32 %1385, 1
  %1387 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 2, i64 1, i32 0
  store i32 %1382, i32* %1387, align 4
  %1388 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 2, i64 1, i32 1
  store i32 %1383, i32* %1388, align 4
  %1389 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 2, i64 1, i32 2
  store i32 %1386, i32* %1389, align 4
  %1390 = add i32 %1382, %1377
  %1391 = add nsw i32 %1383, %1378
  %1392 = add nsw i32 %1356, 2
  %1393 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 0, i32 0
  store i32 %1390, i32* %1393, align 4
  %1394 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 0, i32 1
  store i32 %1391, i32* %1394, align 4
  %1395 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 0, i32 2
  store i32 %1392, i32* %1395, align 4
  %1396 = load i32, i32* %1208, align 4
  %1397 = icmp eq i32 %1396, 0
  br i1 %1397, label %1398, label %1443

1398:                                             ; preds = %1344
  %1399 = sext i32 %1391 to i64
  %1400 = mul nsw i64 %1399, %1399
  %1401 = zext i32 %1392 to i64
  %1402 = lshr i64 %1400, %1401
  %1403 = trunc i64 %1402 to i32
  %1404 = sub i32 %1390, %1403
  %1405 = shl i32 %1404, 8
  %1406 = lshr i32 %1405, %1392
  %1407 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1202, i32 0, i32 0, i32 3
  store i32 %1406, i32* %1407, align 4
  %1408 = icmp sgt i32 %1406, %1204
  %1409 = select i1 %1408, i32 %1406, i32 %1204
  %1410 = icmp slt i32 %1406, %1203
  %1411 = select i1 %1410, i32 %1406, i32 %1203
  %1412 = sext i32 %1406 to i64
  %1413 = load i64, i64* %26, align 8
  %1414 = icmp slt i64 %1413, %1412
  br i1 %1414, label %1424, label %1415

1415:                                             ; preds = %1398
  %1416 = ashr i64 %1413, 1
  %1417 = icmp slt i64 %1416, %1412
  %1418 = and i1 %1417, %1197
  br i1 %1418, label %1419, label %1425

1419:                                             ; preds = %1415
  %1420 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 %1202
  %1421 = load i32, i32* %1420, align 4
  %1422 = ashr i32 %1421, 1
  %1423 = icmp sgt i32 %1406, %1422
  br i1 %1423, label %1424, label %1425

1424:                                             ; preds = %1419, %1398
  store i32 1, i32* %1208, align 4
  store i32 1, i32* %374, align 16
  br label %1441

1425:                                             ; preds = %1415, %1419
  br i1 %1199, label %1426, label %1441

1426:                                             ; preds = %1425
  %1427 = load i32, i32* %1200, align 4
  %1428 = icmp slt i32 %1427, 361
  br i1 %1428, label %1429, label %1441

1429:                                             ; preds = %1426
  %1430 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %1202
  %1431 = load i32, i32* %1430, align 4
  %1432 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 %1202
  %1433 = load i32, i32* %1432, align 4
  %1434 = sub nsw i32 %1431, %1433
  %1435 = sext i32 %1434 to i64
  %1436 = icmp slt i64 %1416, %1435
  %1437 = sext i32 %1431 to i64
  %1438 = icmp slt i64 %1413, %1437
  %1439 = and i1 %1438, %1436
  br i1 %1439, label %1440, label %1441

1440:                                             ; preds = %1429
  store i32 1, i32* %1208, align 4
  store i32 1, i32* %374, align 16
  br label %1441

1441:                                             ; preds = %1426, %1429, %1440, %1425, %1424
  %1442 = add nsw i32 %1406, %1205
  br label %1443

1443:                                             ; preds = %1344, %1441
  %1444 = phi i32 [ %1205, %1344 ], [ %1442, %1441 ]
  %1445 = phi i32 [ %1204, %1344 ], [ %1409, %1441 ]
  %1446 = phi i32 [ %1203, %1344 ], [ %1411, %1441 ]
  %1447 = icmp eq i64 %1207, 4
  br i1 %1447, label %1448, label %1201

1448:                                             ; preds = %1443
  %1449 = load i32, i32* %374, align 16
  %1450 = icmp eq i32 %1449, 0
  br i1 %1450, label %1451, label %1534

1451:                                             ; preds = %1448
  %1452 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0
  %1453 = load i32, i32* %1452, align 4
  %1454 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0
  %1455 = load i32, i32* %1454, align 4
  %1456 = add i32 %1455, %1453
  %1457 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 0, i32 0, i32 0, i32 1
  %1458 = load i32, i32* %1457, align 4
  %1459 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 1, i32 0, i32 0, i32 1
  %1460 = load i32, i32* %1459, align 4
  %1461 = add nsw i32 %1460, %1458
  %1462 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 0, i32 0, i32 0, i32 2
  %1463 = load i32, i32* %1462, align 4
  %1464 = add nsw i32 %1463, 1
  %1465 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 1, i64 0, i32 0
  store i32 %1456, i32* %1465, align 4
  %1466 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 1, i64 0, i32 1
  store i32 %1461, i32* %1466, align 4
  %1467 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 1, i64 0, i32 2
  store i32 %1464, i32* %1467, align 4
  %1468 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0
  %1469 = load i32, i32* %1468, align 4
  %1470 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0
  %1471 = load i32, i32* %1470, align 4
  %1472 = add i32 %1471, %1469
  %1473 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 2, i32 0, i32 0, i32 1
  %1474 = load i32, i32* %1473, align 4
  %1475 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 3, i32 0, i32 0, i32 1
  %1476 = load i32, i32* %1475, align 4
  %1477 = add nsw i32 %1476, %1474
  %1478 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 2, i32 0, i32 0, i32 2
  %1479 = load i32, i32* %1478, align 4
  %1480 = add nsw i32 %1479, 1
  %1481 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 1, i64 1, i32 0
  store i32 %1472, i32* %1481, align 4
  %1482 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 1, i64 1, i32 1
  store i32 %1477, i32* %1482, align 4
  %1483 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 1, i64 1, i32 2
  store i32 %1480, i32* %1483, align 4
  %1484 = add i32 %1469, %1453
  %1485 = add nsw i32 %1474, %1458
  %1486 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 2, i64 0, i32 0
  store i32 %1484, i32* %1486, align 4
  %1487 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 2, i64 0, i32 1
  store i32 %1485, i32* %1487, align 4
  %1488 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 2, i64 0, i32 2
  store i32 %1464, i32* %1488, align 4
  %1489 = add i32 %1471, %1455
  %1490 = add nsw i32 %1476, %1460
  %1491 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 1, i32 0, i32 0, i32 2
  %1492 = load i32, i32* %1491, align 4
  %1493 = add nsw i32 %1492, 1
  %1494 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 2, i64 1, i32 0
  store i32 %1489, i32* %1494, align 4
  %1495 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 2, i64 1, i32 1
  store i32 %1490, i32* %1495, align 4
  %1496 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 2, i64 1, i32 2
  store i32 %1493, i32* %1496, align 4
  %1497 = add i32 %1489, %1484
  %1498 = add nsw i32 %1490, %1485
  %1499 = add nsw i32 %1463, 2
  %1500 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 0, i32 0
  store i32 %1497, i32* %1500, align 4
  %1501 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 0, i32 1
  store i32 %1498, i32* %1501, align 4
  %1502 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 0, i32 2
  store i32 %1499, i32* %1502, align 4
  %1503 = sext i32 %1498 to i64
  %1504 = mul nsw i64 %1503, %1503
  %1505 = zext i32 %1499 to i64
  %1506 = lshr i64 %1504, %1505
  %1507 = trunc i64 %1506 to i32
  %1508 = sub i32 %1497, %1507
  %1509 = shl i32 %1508, 8
  %1510 = lshr i32 %1509, %1499
  %1511 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 0, i32 3
  store i32 %1510, i32* %1511, align 4
  %1512 = icmp ugt i32 %1196, 1
  %1513 = and i1 %895, %1512
  br i1 %1513, label %1514, label %1519

1514:                                             ; preds = %1451
  %1515 = mul nsw i32 %1444, 9
  %1516 = ashr i32 %1515, 5
  %1517 = icmp sgt i32 %1510, %1516
  br i1 %1517, label %1518, label %1534

1518:                                             ; preds = %1514
  store i32 1, i32* %374, align 16
  br label %1534

1519:                                             ; preds = %1451
  %1520 = icmp ult i32 %1196, 2
  %1521 = and i1 %895, %1520
  br i1 %1521, label %1522, label %1534

1522:                                             ; preds = %1519
  %1523 = sub nsw i32 %1445, %1446
  %1524 = sext i32 %1523 to i64
  %1525 = load i64, i64* %25, align 16
  %1526 = ashr i64 %1525, 3
  %1527 = mul nsw i64 %1526, 3
  %1528 = icmp slt i64 %1527, %1524
  br i1 %1528, label %1529, label %1534

1529:                                             ; preds = %1522
  %1530 = sext i32 %1445 to i64
  %1531 = ashr i64 %1525, 1
  %1532 = icmp slt i64 %1531, %1530
  br i1 %1532, label %1533, label %1534

1533:                                             ; preds = %1529
  store i32 1, i32* %374, align 16
  br label %1534

1534:                                             ; preds = %1514, %1448, %1518, %1519, %1533, %1529, %1522
  %1535 = phi i32 [ 0, %1514 ], [ %1449, %1448 ], [ 1, %1518 ], [ 0, %1519 ], [ 1, %1533 ], [ 0, %1529 ], [ 0, %1522 ]
  %1536 = add nsw i32 %4, 8
  %1537 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %1538 = load i32, i32* %1537, align 8
  %1539 = icmp sgt i32 %1536, %1538
  br i1 %1539, label %1549, label %1540

1540:                                             ; preds = %1534
  %1541 = add nsw i32 %3, 8
  %1542 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %1543 = load i32, i32* %1542, align 16
  %1544 = icmp sgt i32 %1541, %1543
  br i1 %1544, label %1549, label %1545

1545:                                             ; preds = %1540
  %1546 = load i64, i64* %25, align 16
  %1547 = call fastcc i32 @set_vt_partitioning(%struct.VP9_COMP* %0, %struct.macroblock* %2, %struct.macroblockd* %15, i8* nonnull %16, i8 zeroext 12, i32 %3, i32 %4, i64 %1546, i8 zeroext 6, i32 %1535)
  %1548 = icmp eq i32 %1547, 0
  br i1 %1548, label %1549, label %1731

1549:                                             ; preds = %1545, %1540, %1534
  %1550 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 134
  %1551 = icmp eq i32 %97, 0
  %1552 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 3), align 1
  %1553 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 3), align 1
  %1554 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %1555 = lshr i8 %1552, 1
  %1556 = zext i8 %1555 to i32
  %1557 = lshr i8 %1553, 1
  %1558 = zext i8 %1557 to i32
  %1559 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %1560 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 5
  %1561 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %1562 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %1563 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 3
  %1564 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2
  br label %1565

1565:                                             ; preds = %1729, %1549
  %1566 = phi i64 [ 0, %1549 ], [ %1578, %1729 ]
  %1567 = shl i64 %1566, 2
  %1568 = trunc i64 %1567 to i32
  %1569 = and i32 %1568, 4
  %1570 = trunc i64 %1566 to i32
  %1571 = lshr i32 %1570, 1
  %1572 = shl nuw i32 %1571, 2
  %1573 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1566
  %1574 = bitcast %struct.v32x32* %1573 to i8*
  %1575 = add nsw i32 %1572, %3
  %1576 = add nsw i32 %1569, %4
  %1577 = load i64, i64* %26, align 8
  %1578 = add nuw nsw i64 %1566, 1
  %1579 = getelementptr inbounds [21 x i32], [21 x i32]* %9, i64 0, i64 %1578
  %1580 = load i32, i32* %1579, align 4
  %1581 = call fastcc i32 @set_vt_partitioning(%struct.VP9_COMP* %0, %struct.macroblock* %2, %struct.macroblockd* %15, i8* %1574, i8 zeroext 9, i32 %1575, i32 %1576, i64 %1577, i8 zeroext 6, i32 %1580)
  %1582 = icmp eq i32 %1581, 0
  br i1 %1582, label %1583, label %1729

1583:                                             ; preds = %1565, %1726
  %1584 = phi i64 [ %1727, %1726 ], [ 0, %1565 ]
  %1585 = trunc i64 %1584 to i32
  %1586 = shl i32 %1585, 1
  %1587 = and i32 %1586, 2
  %1588 = trunc i64 %1584 to i32
  %1589 = and i32 %1588, 2147483646
  %1590 = add nuw nsw i64 %1584, %1567
  br i1 %169, label %1597, label %1591

1591:                                             ; preds = %1583
  %1592 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %1590
  %1593 = load i32, i32* %1592, align 4
  %1594 = icmp eq i32 %1593, 1
  br i1 %1594, label %1595, label %1597

1595:                                             ; preds = %1591
  %1596 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %886, i64 %1590
  br label %1599

1597:                                             ; preds = %1583, %1591
  %1598 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1566, i32 1, i64 %1584
  br label %1599

1599:                                             ; preds = %1597, %1595
  %1600 = phi %struct.v16x16* [ %1598, %1597 ], [ %1596, %1595 ]
  %1601 = bitcast %struct.v16x16* %1600 to i8*
  %1602 = add nsw i32 %1589, %1575
  %1603 = add nsw i32 %1587, %1576
  %1604 = load i64, i64* %27, align 16
  %1605 = load i8, i8* %1550, align 16
  %1606 = add nuw nsw i64 %1590, 5
  %1607 = getelementptr inbounds [21 x i32], [21 x i32]* %9, i64 0, i64 %1606
  %1608 = load i32, i32* %1607, align 4
  %1609 = call fastcc i32 @set_vt_partitioning(%struct.VP9_COMP* %0, %struct.macroblock* %2, %struct.macroblockd* %15, i8* %1601, i8 zeroext 6, i32 %1602, i32 %1603, i64 %1604, i8 zeroext %1605, i32 %1608)
  %1610 = icmp eq i32 %1609, 0
  br i1 %1610, label %1611, label %1726

1611:                                             ; preds = %1599, %1723
  %1612 = phi i64 [ %1724, %1723 ], [ 0, %1599 ]
  %1613 = trunc i64 %1612 to i32
  %1614 = and i32 %1613, 1
  %1615 = lshr i32 %1613, 1
  %1616 = add nsw i32 %1615, %1602
  %1617 = add nsw i32 %1614, %1603
  br i1 %1551, label %1699, label %1618

1618:                                             ; preds = %1611
  %1619 = load i64, i64* %28, align 8
  %1620 = load i32, i32* %68, align 4
  %1621 = icmp eq i32 %1620, 0
  br i1 %1621, label %1625, label %1622

1622:                                             ; preds = %1618
  %1623 = load i8, i8* %1554, align 4
  %1624 = icmp eq i8 %1623, 0
  br i1 %1624, label %1641, label %1625

1625:                                             ; preds = %1622, %1618
  %1626 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1600, i64 0, i32 1, i64 %1612, i32 0, i32 0, i32 0
  %1627 = load i32, i32* %1626, align 4
  %1628 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1600, i64 0, i32 1, i64 %1612, i32 0, i32 0, i32 1
  %1629 = load i32, i32* %1628, align 4
  %1630 = sext i32 %1629 to i64
  %1631 = mul nsw i64 %1630, %1630
  %1632 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1600, i64 0, i32 1, i64 %1612, i32 0, i32 0, i32 2
  %1633 = load i32, i32* %1632, align 4
  %1634 = zext i32 %1633 to i64
  %1635 = lshr i64 %1631, %1634
  %1636 = trunc i64 %1635 to i32
  %1637 = sub i32 %1627, %1636
  %1638 = shl i32 %1637, 8
  %1639 = lshr i32 %1638, %1633
  %1640 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1600, i64 0, i32 1, i64 %1612, i32 0, i32 0, i32 3
  store i32 %1639, i32* %1640, align 4
  br label %1641

1641:                                             ; preds = %1625, %1622
  %1642 = add nsw i32 %1617, %1556
  %1643 = load i32, i32* %1537, align 8
  %1644 = icmp slt i32 %1642, %1643
  br i1 %1644, label %1645, label %1676

1645:                                             ; preds = %1641
  %1646 = add nsw i32 %1616, %1558
  %1647 = load i32, i32* %1559, align 16
  %1648 = icmp slt i32 %1646, %1647
  br i1 %1648, label %1649, label %1676

1649:                                             ; preds = %1645
  %1650 = getelementptr inbounds %struct.v16x16, %struct.v16x16* %1600, i64 0, i32 1, i64 %1612, i32 0, i32 0, i32 3
  %1651 = load i32, i32* %1650, align 4
  %1652 = sext i32 %1651 to i64
  %1653 = icmp sgt i64 %1619, %1652
  br i1 %1653, label %1654, label %1676

1654:                                             ; preds = %1649
  %1655 = icmp sgt i32 %1643, %1617
  %1656 = icmp sgt i32 %1647, %1616
  %1657 = and i1 %1655, %1656
  br i1 %1657, label %1658, label %1723

1658:                                             ; preds = %1654
  %1659 = load i32, i32* %1560, align 8
  %1660 = mul nsw i32 %1659, %1616
  %1661 = add nsw i32 %1660, %1617
  %1662 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %1561, align 8
  %1663 = sext i32 %1661 to i64
  %1664 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %1662, i64 %1663
  store %struct.MODE_INFO** %1664, %struct.MODE_INFO*** %146, align 8
  %1665 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1562, align 16
  %1666 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1665, i64 %1663
  store %struct.MODE_INFO* %1666, %struct.MODE_INFO** %1664, align 8
  %1667 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %1563, align 8
  %1668 = load i32, i32* %1537, align 8
  %1669 = mul nsw i32 %1668, %1616
  %1670 = add nsw i32 %1669, %1617
  %1671 = sext i32 %1670 to i64
  %1672 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %1667, i64 %1671
  store %struct.MB_MODE_INFO_EXT* %1672, %struct.MB_MODE_INFO_EXT** %1564, align 16
  %1673 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %146, align 8
  %1674 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1673, align 8
  %1675 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1674, i64 0, i32 0
  store i8 3, i8* %1675, align 4
  br label %1723

1676:                                             ; preds = %1649, %1645, %1641
  %1677 = icmp sgt i32 %1643, %1617
  br i1 %1677, label %1678, label %1723

1678:                                             ; preds = %1676
  %1679 = load i32, i32* %1559, align 16
  %1680 = icmp sgt i32 %1679, %1616
  br i1 %1680, label %1681, label %1723

1681:                                             ; preds = %1678
  %1682 = load i32, i32* %1560, align 8
  %1683 = mul nsw i32 %1682, %1616
  %1684 = add nsw i32 %1683, %1617
  %1685 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %1561, align 8
  %1686 = sext i32 %1684 to i64
  %1687 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %1685, i64 %1686
  store %struct.MODE_INFO** %1687, %struct.MODE_INFO*** %146, align 8
  %1688 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1562, align 16
  %1689 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1688, i64 %1686
  store %struct.MODE_INFO* %1689, %struct.MODE_INFO** %1687, align 8
  %1690 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %1563, align 8
  %1691 = load i32, i32* %1537, align 8
  %1692 = mul nsw i32 %1691, %1616
  %1693 = add nsw i32 %1692, %1617
  %1694 = sext i32 %1693 to i64
  %1695 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %1690, i64 %1694
  store %struct.MB_MODE_INFO_EXT* %1695, %struct.MB_MODE_INFO_EXT** %1564, align 16
  %1696 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %146, align 8
  %1697 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1696, align 8
  %1698 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1697, i64 0, i32 0
  store i8 0, i8* %1698, align 4
  br label %1723

1699:                                             ; preds = %1611
  %1700 = load i32, i32* %1537, align 8
  %1701 = icmp sgt i32 %1700, %1617
  br i1 %1701, label %1702, label %1723

1702:                                             ; preds = %1699
  %1703 = load i32, i32* %1559, align 16
  %1704 = icmp sgt i32 %1703, %1616
  br i1 %1704, label %1705, label %1723

1705:                                             ; preds = %1702
  %1706 = load i32, i32* %1560, align 8
  %1707 = mul nsw i32 %1706, %1616
  %1708 = add nsw i32 %1707, %1617
  %1709 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %1561, align 8
  %1710 = sext i32 %1708 to i64
  %1711 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %1709, i64 %1710
  store %struct.MODE_INFO** %1711, %struct.MODE_INFO*** %146, align 8
  %1712 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1562, align 16
  %1713 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1712, i64 %1710
  store %struct.MODE_INFO* %1713, %struct.MODE_INFO** %1711, align 8
  %1714 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %1563, align 8
  %1715 = load i32, i32* %1537, align 8
  %1716 = mul nsw i32 %1715, %1616
  %1717 = add nsw i32 %1716, %1617
  %1718 = sext i32 %1717 to i64
  %1719 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %1714, i64 %1718
  store %struct.MB_MODE_INFO_EXT* %1719, %struct.MB_MODE_INFO_EXT** %1564, align 16
  %1720 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %146, align 8
  %1721 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1720, align 8
  %1722 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1721, i64 0, i32 0
  store i8 3, i8* %1722, align 4
  br label %1723

1723:                                             ; preds = %1705, %1702, %1699, %1681, %1678, %1676, %1658, %1654
  %1724 = add nuw nsw i64 %1612, 1
  %1725 = icmp eq i64 %1724, 4
  br i1 %1725, label %1726, label %1611

1726:                                             ; preds = %1723, %1599
  %1727 = add nuw nsw i64 %1584, 1
  %1728 = icmp eq i64 %1727, 4
  br i1 %1728, label %1729, label %1583

1729:                                             ; preds = %1726, %1565
  %1730 = icmp eq i64 %1578, 4
  br i1 %1730, label %1731, label %1565

1731:                                             ; preds = %1729, %1545
  %1732 = load i32, i32* %68, align 4
  %1733 = icmp eq i32 %1732, 0
  br i1 %1733, label %1772, label %1734

1734:                                             ; preds = %1731
  %1735 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %1736 = load i8, i8* %1735, align 4
  %1737 = icmp eq i8 %1736, 0
  br i1 %1737, label %1738, label %1772

1738:                                             ; preds = %1734
  %1739 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 83
  %1740 = load i32, i32* %1739, align 4
  %1741 = icmp eq i32 %1740, 0
  br i1 %1741, label %1757, label %1742

1742:                                             ; preds = %1738
  call fastcc void @update_prev_partition_helper(%struct.VP9_COMP* %0, i8 zeroext 12, i32 %3, i32 %4) #8
  %1743 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 149
  %1744 = load i8*, i8** %1743, align 8
  %1745 = sext i32 %114 to i64
  %1746 = getelementptr inbounds i8, i8* %1744, i64 %1745
  store i8 %150, i8* %1746, align 1
  %1747 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 150
  %1748 = load i8*, i8** %1747, align 16
  %1749 = mul nsw i32 %114, 25
  %1750 = sext i32 %1749 to i64
  %1751 = getelementptr inbounds i8, i8* %1748, i64 %1750
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1751, i8* align 1 %165, i64 25, i1 false) #8
  %1752 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 151
  %1753 = load i8*, i8** %1752, align 8
  %1754 = getelementptr inbounds i8, i8* %1753, i64 %1745
  store i8 0, i8* %1754, align 1
  %1755 = load i32, i32* %68, align 4
  %1756 = icmp eq i32 %1755, 0
  br i1 %1756, label %1772, label %1757

1757:                                             ; preds = %1738, %1742
  %1758 = load i8, i8* %1735, align 4
  %1759 = icmp eq i8 %1758, 0
  br i1 %1759, label %1760, label %1772

1760:                                             ; preds = %1757
  %1761 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 91
  %1762 = load i32, i32* %1761, align 4
  %1763 = icmp eq i32 %1762, 0
  br i1 %1763, label %1772, label %1764

1764:                                             ; preds = %1760
  %1765 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %1766 = load i32, i32* %1765, align 16
  %1767 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %1768 = load i32, i32* %1767, align 8
  %1769 = add nsw i32 %1768, -2
  %1770 = icmp eq i32 %1766, %1769
  br i1 %1770, label %1771, label %1772

1771:                                             ; preds = %1764
  call fastcc void @update_partition_svc(%struct.VP9_COMP* %0, i8 zeroext 12, i32 %3, i32 %4)
  br label %1772

1772:                                             ; preds = %1734, %1731, %1742, %1760, %1757, %1771, %1764
  %1773 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 79
  %1774 = load i32, i32* %1773, align 4
  %1775 = icmp eq i32 %1774, 0
  br i1 %1775, label %1931, label %1776

1776:                                             ; preds = %1772
  %1777 = load i32, i32* %98, align 16
  %1778 = icmp sgt i32 %1777, 640
  %1779 = select i1 %1778, i32 8, i32 4
  %1780 = icmp eq i8 %876, 1
  br i1 %1780, label %1781, label %1931

1781:                                             ; preds = %1776
  %1782 = icmp eq i32 %1774, 1
  %1783 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %146, align 8
  %1784 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1783, align 8
  br i1 %1782, label %1802, label %1785

1785:                                             ; preds = %1781
  %1786 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1784, i64 0, i32 9, i64 0
  %1787 = bitcast %union.int_mv* %1786 to %struct.mv*
  %1788 = getelementptr inbounds %struct.mv, %struct.mv* %1787, i64 0, i32 1
  %1789 = load i16, i16* %1788, align 2
  %1790 = sext i16 %1789 to i32
  %1791 = icmp sgt i32 %1779, %1790
  br i1 %1791, label %1792, label %1931

1792:                                             ; preds = %1785
  %1793 = sub nsw i32 0, %1779
  %1794 = icmp sgt i32 %1790, %1793
  br i1 %1794, label %1795, label %1931

1795:                                             ; preds = %1792
  %1796 = bitcast %union.int_mv* %1786 to i16*
  %1797 = load i16, i16* %1796, align 4
  %1798 = sext i16 %1797 to i32
  %1799 = icmp sgt i32 %1779, %1798
  %1800 = icmp sgt i32 %1798, %1793
  %1801 = and i1 %1799, %1800
  br i1 %1801, label %1802, label %1931

1802:                                             ; preds = %1795, %1781
  %1803 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1784, i64 0, i32 0
  %1804 = load i8, i8* %1803, align 4
  switch i8 %1804, label %1819 [
    i8 12, label %1828
    i8 11, label %1812
    i8 10, label %1805
  ]

1805:                                             ; preds = %1802
  %1806 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 2, i64 0, i32 3
  %1807 = load i32, i32* %1806, align 4
  %1808 = sext i32 %1807 to i64
  %1809 = load i64, i64* %25, align 16
  %1810 = ashr i64 %1809, 2
  %1811 = icmp sgt i64 %1810, %1808
  br i1 %1811, label %1843, label %1845

1812:                                             ; preds = %1802
  %1813 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 1, i64 0, i32 3
  %1814 = load i32, i32* %1813, align 4
  %1815 = sext i32 %1814 to i64
  %1816 = load i64, i64* %25, align 16
  %1817 = ashr i64 %1816, 2
  %1818 = icmp sgt i64 %1817, %1815
  br i1 %1818, label %1836, label %1838

1819:                                             ; preds = %1802
  %1820 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %1821 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %1822 = load i64, i64* %27, align 16
  %1823 = ashr i64 %1822, 8
  %1824 = load i64, i64* %26, align 8
  %1825 = mul nsw i64 %1824, 5
  %1826 = ashr i64 %1825, 3
  %1827 = ashr i64 %1824, 1
  br label %1850

1828:                                             ; preds = %1802
  %1829 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 0, i32 3
  %1830 = load i32, i32* %1829, align 4
  %1831 = sext i32 %1830 to i64
  %1832 = load i64, i64* %25, align 16
  %1833 = ashr i64 %1832, 1
  %1834 = icmp sgt i64 %1833, %1831
  br i1 %1834, label %1835, label %1931

1835:                                             ; preds = %1828
  store i8 1, i8* %165, align 1
  br label %1931

1836:                                             ; preds = %1812
  %1837 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 61, i64 1
  store i8 1, i8* %1837, align 1
  br label %1838

1838:                                             ; preds = %1836, %1812
  %1839 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 1, i64 1, i32 3
  %1840 = load i32, i32* %1839, align 4
  %1841 = sext i32 %1840 to i64
  %1842 = icmp sgt i64 %1817, %1841
  br i1 %1842, label %1927, label %1931

1843:                                             ; preds = %1805
  %1844 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 61, i64 3
  store i8 1, i8* %1844, align 1
  br label %1845

1845:                                             ; preds = %1843, %1805
  %1846 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 0, i32 2, i64 1, i32 3
  %1847 = load i32, i32* %1846, align 4
  %1848 = sext i32 %1847 to i64
  %1849 = icmp sgt i64 %1810, %1848
  br i1 %1849, label %1929, label %1931

1850:                                             ; preds = %1905, %1819
  %1851 = phi i64 [ 0, %1819 ], [ %1906, %1905 ]
  %1852 = load i32, i32* %108, align 4
  %1853 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @set_low_temp_var_flag.idx, i64 0, i64 %1851, i64 0
  %1854 = load i32, i32* %1853, align 8
  %1855 = add nsw i32 %1854, %3
  %1856 = mul nsw i32 %1855, %1852
  %1857 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @set_low_temp_var_flag.idx, i64 0, i64 %1851, i64 1
  %1858 = load i32, i32* %1857, align 4
  %1859 = add i32 %1858, %4
  %1860 = add i32 %1859, %1856
  %1861 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %1820, align 8
  %1862 = sext i32 %1860 to i64
  %1863 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %1861, i64 %1862
  %1864 = load i32, i32* %1537, align 8
  %1865 = icmp sgt i32 %1864, %1859
  br i1 %1865, label %1866, label %1905

1866:                                             ; preds = %1850
  %1867 = load i32, i32* %1821, align 16
  %1868 = icmp sgt i32 %1867, %1855
  br i1 %1868, label %1869, label %1905

1869:                                             ; preds = %1866
  %1870 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1863, align 8
  %1871 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1870, i64 0, i32 0
  %1872 = load i8, i8* %1871, align 4
  %1873 = icmp eq i8 %1872, 9
  %1874 = load i32, i32* %1773, align 4
  br i1 %1873, label %1875, label %1886

1875:                                             ; preds = %1869
  switch i32 %1874, label %1876 [
    i32 1, label %1877
    i32 3, label %1877
  ]

1876:                                             ; preds = %1875
  br label %1877

1877:                                             ; preds = %1875, %1875, %1876
  %1878 = phi i64 [ %1827, %1876 ], [ %1826, %1875 ], [ %1826, %1875 ]
  %1879 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1851, i32 0, i32 0, i32 3
  %1880 = load i32, i32* %1879, align 4
  %1881 = sext i32 %1880 to i64
  %1882 = icmp sgt i64 %1878, %1881
  br i1 %1882, label %1883, label %1905

1883:                                             ; preds = %1877
  %1884 = add nuw nsw i64 %1851, 5
  %1885 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 61, i64 %1884
  store i8 1, i8* %1885, align 1
  br label %1905

1886:                                             ; preds = %1869
  %1887 = icmp sgt i32 %1874, 1
  %1888 = add i8 %1872, -6
  %1889 = icmp ult i8 %1888, 3
  %1890 = and i1 %1887, %1889
  br i1 %1890, label %1891, label %1905

1891:                                             ; preds = %1886
  %1892 = shl i64 %1851, 2
  %1893 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1851, i32 1, i64 0, i32 0, i32 0, i32 3
  %1894 = load i32, i32* %1893, align 4
  %1895 = sext i32 %1894 to i64
  %1896 = icmp sgt i64 %1823, %1895
  br i1 %1896, label %1897, label %1900

1897:                                             ; preds = %1891
  %1898 = add nuw nsw i64 %1892, 9
  %1899 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 61, i64 %1898
  store i8 1, i8* %1899, align 1
  br label %1900

1900:                                             ; preds = %1897, %1891
  %1901 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1851, i32 1, i64 1, i32 0, i32 0, i32 3
  %1902 = load i32, i32* %1901, align 4
  %1903 = sext i32 %1902 to i64
  %1904 = icmp sgt i64 %1823, %1903
  br i1 %1904, label %1908, label %1911

1905:                                             ; preds = %1924, %1919, %1886, %1883, %1877, %1866, %1850
  %1906 = add nuw nsw i64 %1851, 1
  %1907 = icmp eq i64 %1906, 4
  br i1 %1907, label %1931, label %1850

1908:                                             ; preds = %1900
  %1909 = add nuw nsw i64 %1892, 10
  %1910 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 61, i64 %1909
  store i8 1, i8* %1910, align 1
  br label %1911

1911:                                             ; preds = %1908, %1900
  %1912 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1851, i32 1, i64 2, i32 0, i32 0, i32 3
  %1913 = load i32, i32* %1912, align 4
  %1914 = sext i32 %1913 to i64
  %1915 = icmp sgt i64 %1823, %1914
  br i1 %1915, label %1916, label %1919

1916:                                             ; preds = %1911
  %1917 = add nuw nsw i64 %1892, 11
  %1918 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 61, i64 %1917
  store i8 1, i8* %1918, align 1
  br label %1919

1919:                                             ; preds = %1916, %1911
  %1920 = getelementptr inbounds %struct.v64x64, %struct.v64x64* %8, i64 0, i32 1, i64 %1851, i32 1, i64 3, i32 0, i32 0, i32 3
  %1921 = load i32, i32* %1920, align 4
  %1922 = sext i32 %1921 to i64
  %1923 = icmp sgt i64 %1823, %1922
  br i1 %1923, label %1924, label %1905

1924:                                             ; preds = %1919
  %1925 = add nuw nsw i64 %1892, 12
  %1926 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 61, i64 %1925
  store i8 1, i8* %1926, align 1
  br label %1905

1927:                                             ; preds = %1838
  %1928 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 61, i64 2
  store i8 1, i8* %1928, align 1
  br label %1931

1929:                                             ; preds = %1845
  %1930 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 61, i64 4
  store i8 1, i8* %1930, align 1
  br label %1931

1931:                                             ; preds = %1905, %1929, %1927, %1845, %1838, %1835, %1828, %1795, %1792, %1785, %1776, %1772
  %1932 = zext i8 %875 to i32
  call fastcc void @chroma_check(%struct.VP9_COMP* %0, %struct.macroblock* %2, i32 %1932, i32 %874, i32 %145, i32 %65)
  %1933 = icmp eq %struct.v16x16* %886, null
  br i1 %1933, label %1935, label %1934

1934:                                             ; preds = %1931
  call void @vpx_free(i8* %885) #8
  br label %1935

1935:                                             ; preds = %762, %758, %850, %857, %836, %310, %297, %220, %1934, %1931, %317, %224
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %107) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #8
  call void @llvm.lifetime.end.p0i8(i64 84, i8* nonnull %17) #8
  call void @llvm.lifetime.end.p0i8(i64 43664, i8* nonnull %16) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @nonrd_use_partition(%struct.VP9_COMP*, %struct.ThreadData*, %struct.TileDataEnc*, %struct.MODE_INFO** readonly, %struct.TOKENEXTRA**, i32, i32, i8 zeroext, %struct.RD_COST*, %struct.PC_TREE*) unnamed_addr #0 {
  %11 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %2, i64 0, i32 0
  %12 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0
  %13 = zext i8 %7 to i64
  %14 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = shl i32 1, %16
  %18 = sdiv i32 %17, 4
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 36
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %22 = load i32, i32* %21, align 16
  %23 = icmp sgt i32 %22, %5
  br i1 %23, label %24, label %217

24:                                               ; preds = %10
  %25 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %26 = load i32, i32* %25, align 8
  %27 = icmp sgt i32 %26, %6
  br i1 %27, label %28, label %217

28:                                               ; preds = %24
  %29 = icmp ugt i8 %7, 2
  br i1 %29, label %30, label %38

30:                                               ; preds = %28
  %31 = load %struct.MODE_INFO*, %struct.MODE_INFO** %3, align 8
  %32 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %31, i64 0, i32 0
  %33 = load i8, i8* %32, align 4
  %34 = zext i8 %15 to i64
  %35 = zext i8 %33 to i64
  %36 = getelementptr inbounds [0 x [13 x i32]], [0 x [13 x i32]]* @partition_lookup, i64 0, i64 %34, i64 %35
  %37 = load i32, i32* %36, align 4
  br label %43

38:                                               ; preds = %28
  %39 = zext i8 %15 to i64
  %40 = getelementptr inbounds [0 x [13 x i32]], [0 x [13 x i32]]* @partition_lookup, i64 0, i64 %39, i64 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i8 %7, 0
  br i1 %42, label %75, label %43

43:                                               ; preds = %30, %38
  %44 = phi i32 [ %37, %30 ], [ %41, %38 ]
  %45 = phi i8 [ %33, %30 ], [ 0, %38 ]
  %46 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 21
  %47 = load i8*, i8** %46, align 8
  %48 = sext i32 %6 to i64
  %49 = getelementptr inbounds i8, i8* %47, i64 %48
  %50 = and i32 %5, 7
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 22, i64 %51
  %53 = getelementptr inbounds [13 x i8], [13 x i8]* @mi_width_log2_lookup, i64 0, i64 %13
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = load i8, i8* %49, align 1
  %57 = sext i8 %56 to i32
  %58 = lshr i32 %57, %55
  %59 = and i32 %58, 1
  %60 = load i8, i8* %52, align 1
  %61 = sext i8 %60 to i32
  %62 = lshr i32 %61, %55
  %63 = shl i32 %62, 1
  %64 = and i32 %63, 2
  %65 = shl nuw nsw i32 %55, 2
  %66 = or i32 %59, %65
  %67 = or i32 %66, %64
  %68 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 2
  %69 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %68, align 8
  %70 = zext i32 %67 to i64
  %71 = zext i32 %44 to i64
  %72 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %69, i64 0, i32 2, i64 %70, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = add i32 %73, 1
  store i32 %74, i32* %72, align 4
  br label %75

75:                                               ; preds = %38, %43
  %76 = phi i32 [ %41, %38 ], [ %44, %43 ]
  %77 = phi i8 [ 0, %38 ], [ %45, %43 ]
  switch i32 %76, label %173 [
    i32 0, label %78
    i32 2, label %97
    i32 1, label %135
  ]

78:                                               ; preds = %75
  %79 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 3
  %80 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 3, i32 14
  store i32 1, i32* %80, align 4
  tail call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %12, i32 %5, i32 %6, %struct.RD_COST* %8, i8 zeroext %77, %struct.PICK_MODE_CONTEXT* %79)
  %81 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 6
  %82 = bitcast %struct.MODE_INFO*** %81 to i8***
  %83 = load i8**, i8*** %82, align 8
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %79, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 4 %84, i64 68, i1 false)
  %86 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 3, i32 1
  %87 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 2
  %88 = bitcast %struct.MB_MODE_INFO_EXT** %87 to i8**
  %89 = load i8*, i8** %88, align 16
  %90 = bitcast %struct.MB_MODE_INFO_EXT* %86 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %90, i8* align 4 %89, i64 36, i1 false)
  %91 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 47, i64 0
  %92 = load i8, i8* %91, align 4
  %93 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 3, i32 16, i64 0
  store i8 %92, i8* %93, align 4
  %94 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 39
  %95 = load i32, i32* %94, align 16
  %96 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 3, i32 13
  store i32 %95, i32* %96, align 8
  tail call fastcc void @encode_b_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %11, %struct.TOKENEXTRA** %4, i32 %5, i32 %6, i32 1, i8 zeroext %77, %struct.PICK_MODE_CONTEXT* %79)
  br label %200

97:                                               ; preds = %75
  %98 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5
  %99 = getelementptr inbounds [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT]* %98, i64 0, i64 0
  %100 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 0, i32 14
  store i32 1, i32* %100, align 4
  tail call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %12, i32 %5, i32 %6, %struct.RD_COST* %8, i8 zeroext %77, %struct.PICK_MODE_CONTEXT* %99)
  %101 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 6
  %102 = bitcast %struct.MODE_INFO*** %101 to i8***
  %103 = load i8**, i8*** %102, align 8
  %104 = load i8*, i8** %103, align 8
  %105 = getelementptr inbounds [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT]* %98, i64 0, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 4 %104, i64 68, i1 false)
  %106 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 0, i32 1
  %107 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 2
  %108 = bitcast %struct.MB_MODE_INFO_EXT** %107 to i8**
  %109 = load i8*, i8** %108, align 16
  %110 = bitcast %struct.MB_MODE_INFO_EXT* %106 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %110, i8* align 4 %109, i64 36, i1 false)
  %111 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 47, i64 0
  %112 = load i8, i8* %111, align 4
  %113 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 0, i32 16, i64 0
  store i8 %112, i8* %113, align 4
  %114 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 39
  %115 = load i32, i32* %114, align 16
  %116 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 0, i32 13
  store i32 %115, i32* %116, align 8
  tail call fastcc void @encode_b_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %11, %struct.TOKENEXTRA** %4, i32 %5, i32 %6, i32 1, i8 zeroext %77, %struct.PICK_MODE_CONTEXT* %99)
  %117 = add nsw i32 %18, %6
  %118 = load i32, i32* %25, align 8
  %119 = icmp slt i32 %117, %118
  %120 = icmp ugt i8 %7, 3
  %121 = and i1 %120, %119
  br i1 %121, label %122, label %200

122:                                              ; preds = %97
  %123 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 1
  %124 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 1, i32 14
  store i32 1, i32* %124, align 4
  tail call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %12, i32 %5, i32 %117, %struct.RD_COST* %8, i8 zeroext %77, %struct.PICK_MODE_CONTEXT* %123)
  %125 = load i8**, i8*** %102, align 8
  %126 = load i8*, i8** %125, align 8
  %127 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %123, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* align 4 %126, i64 68, i1 false)
  %128 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 1, i32 1
  %129 = load i8*, i8** %108, align 16
  %130 = bitcast %struct.MB_MODE_INFO_EXT* %128 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %130, i8* align 4 %129, i64 36, i1 false)
  %131 = load i8, i8* %111, align 4
  %132 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 1, i32 16, i64 0
  store i8 %131, i8* %132, align 4
  %133 = load i32, i32* %114, align 16
  %134 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 1, i32 13
  store i32 %133, i32* %134, align 8
  tail call fastcc void @encode_b_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %11, %struct.TOKENEXTRA** %4, i32 %5, i32 %117, i32 1, i8 zeroext %77, %struct.PICK_MODE_CONTEXT* %123)
  br label %200

135:                                              ; preds = %75
  %136 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4
  %137 = getelementptr inbounds [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT]* %136, i64 0, i64 0
  %138 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 0, i32 14
  store i32 1, i32* %138, align 4
  tail call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %12, i32 %5, i32 %6, %struct.RD_COST* %8, i8 zeroext %77, %struct.PICK_MODE_CONTEXT* %137)
  %139 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 6
  %140 = bitcast %struct.MODE_INFO*** %139 to i8***
  %141 = load i8**, i8*** %140, align 8
  %142 = load i8*, i8** %141, align 8
  %143 = getelementptr inbounds [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT]* %136, i64 0, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 4 %142, i64 68, i1 false)
  %144 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 0, i32 1
  %145 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 2
  %146 = bitcast %struct.MB_MODE_INFO_EXT** %145 to i8**
  %147 = load i8*, i8** %146, align 16
  %148 = bitcast %struct.MB_MODE_INFO_EXT* %144 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %148, i8* align 4 %147, i64 36, i1 false)
  %149 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 47, i64 0
  %150 = load i8, i8* %149, align 4
  %151 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 0, i32 16, i64 0
  store i8 %150, i8* %151, align 4
  %152 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 39
  %153 = load i32, i32* %152, align 16
  %154 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 0, i32 13
  store i32 %153, i32* %154, align 8
  tail call fastcc void @encode_b_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %11, %struct.TOKENEXTRA** %4, i32 %5, i32 %6, i32 1, i8 zeroext %77, %struct.PICK_MODE_CONTEXT* %137)
  %155 = add nsw i32 %18, %5
  %156 = load i32, i32* %21, align 16
  %157 = icmp slt i32 %155, %156
  %158 = icmp ugt i8 %7, 3
  %159 = and i1 %158, %157
  br i1 %159, label %160, label %200

160:                                              ; preds = %135
  %161 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 1
  %162 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 1, i32 14
  store i32 1, i32* %162, align 4
  tail call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %12, i32 %155, i32 %6, %struct.RD_COST* %8, i8 zeroext %77, %struct.PICK_MODE_CONTEXT* %161)
  %163 = load i8**, i8*** %140, align 8
  %164 = load i8*, i8** %163, align 8
  %165 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %161, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %165, i8* align 4 %164, i64 68, i1 false)
  %166 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 1, i32 1
  %167 = load i8*, i8** %146, align 16
  %168 = bitcast %struct.MB_MODE_INFO_EXT* %166 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %168, i8* align 4 %167, i64 36, i1 false)
  %169 = load i8, i8* %149, align 4
  %170 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 1, i32 16, i64 0
  store i8 %169, i8* %170, align 4
  %171 = load i32, i32* %152, align 16
  %172 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 1, i32 13
  store i32 %171, i32* %172, align 8
  tail call fastcc void @encode_b_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %11, %struct.TOKENEXTRA** %4, i32 %155, i32 %6, i32 1, i8 zeroext %77, %struct.PICK_MODE_CONTEXT* %161)
  br label %200

173:                                              ; preds = %75
  %174 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 3, i64 %13
  %175 = load i8, i8* %174, align 1
  %176 = icmp eq i8 %7, 3
  br i1 %176, label %177, label %182

177:                                              ; preds = %173
  %178 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 6
  %179 = bitcast %union.anon* %178 to %struct.PICK_MODE_CONTEXT**
  %180 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %179, align 8
  tail call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %12, i32 %5, i32 %6, %struct.RD_COST* %8, i8 zeroext %175, %struct.PICK_MODE_CONTEXT* %180)
  %181 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %179, align 8
  tail call fastcc void @encode_b_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %11, %struct.TOKENEXTRA** %4, i32 %5, i32 %6, i32 1, i8 zeroext %175, %struct.PICK_MODE_CONTEXT* %181)
  br label %200

182:                                              ; preds = %173
  %183 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 6, i32 0, i64 0
  %184 = load %struct.PC_TREE*, %struct.PC_TREE** %183, align 8
  tail call fastcc void @nonrd_use_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %2, %struct.MODE_INFO** %3, %struct.TOKENEXTRA** %4, i32 %5, i32 %6, i8 zeroext %175, %struct.RD_COST* %8, %struct.PC_TREE* %184)
  %185 = sext i32 %18 to i64
  %186 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %3, i64 %185
  %187 = add nsw i32 %18, %6
  %188 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 6, i32 0, i64 1
  %189 = load %struct.PC_TREE*, %struct.PC_TREE** %188, align 8
  tail call fastcc void @nonrd_use_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %2, %struct.MODE_INFO** %186, %struct.TOKENEXTRA** %4, i32 %5, i32 %187, i8 zeroext %175, %struct.RD_COST* %8, %struct.PC_TREE* %189)
  %190 = mul nsw i32 %18, %20
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %3, i64 %191
  %193 = add nsw i32 %18, %5
  %194 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 6, i32 0, i64 2
  %195 = load %struct.PC_TREE*, %struct.PC_TREE** %194, align 8
  tail call fastcc void @nonrd_use_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %2, %struct.MODE_INFO** %192, %struct.TOKENEXTRA** %4, i32 %193, i32 %6, i8 zeroext %175, %struct.RD_COST* %8, %struct.PC_TREE* %195)
  %196 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %192, i64 %185
  %197 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 6, i32 0, i64 3
  %198 = load %struct.PC_TREE*, %struct.PC_TREE** %197, align 8
  tail call fastcc void @nonrd_use_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %2, %struct.MODE_INFO** %196, %struct.TOKENEXTRA** %4, i32 %193, i32 %187, i8 zeroext %175, %struct.RD_COST* %8, %struct.PC_TREE* %198)
  %199 = icmp eq i32 %76, 3
  br i1 %199, label %217, label %200

200:                                              ; preds = %182, %177, %78, %122, %97, %160, %135
  %201 = phi i8 [ %175, %182 ], [ %77, %78 ], [ %77, %97 ], [ %77, %122 ], [ %77, %135 ], [ %77, %160 ], [ %175, %177 ]
  %202 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 21
  %203 = load i8*, i8** %202, align 8
  %204 = sext i32 %6 to i64
  %205 = getelementptr inbounds i8, i8* %203, i64 %204
  %206 = and i32 %5, 7
  %207 = zext i32 %206 to i64
  %208 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 22, i64 %207
  %209 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %13
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %201 to i64
  %212 = getelementptr inbounds [13 x %struct.anon.8], [13 x %struct.anon.8]* @partition_context_lookup, i64 0, i64 %211, i32 0
  %213 = load i8, i8* %212, align 2
  %214 = zext i8 %210 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %205, i8 %213, i64 %214, i1 false) #8
  %215 = getelementptr inbounds [13 x %struct.anon.8], [13 x %struct.anon.8]* @partition_context_lookup, i64 0, i64 %211, i32 1
  %216 = load i8, i8* %215, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %208, i8 %216, i64 %214, i1 false) #8
  br label %217

217:                                              ; preds = %182, %200, %10, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @nonrd_pick_partition(%struct.VP9_COMP*, %struct.ThreadData*, %struct.TileDataEnc*, %struct.TOKENEXTRA**, i32, i32, i8 zeroext, %struct.RD_COST*, i32, i64, %struct.PC_TREE*) unnamed_addr #0 {
  %12 = alloca %struct.RD_COST, align 8
  %13 = alloca %struct.RD_COST, align 8
  %14 = alloca %struct.RD_COST, align 8
  %15 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8
  %16 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %2, i64 0, i32 0
  %17 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0
  %18 = zext i8 %6 to i64
  %19 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = lshr i8 %20, 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 3
  %24 = bitcast %struct.RD_COST* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 -86, i64 24, i1 false)
  %25 = bitcast %struct.RD_COST* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 24, i1 false)
  %26 = bitcast %struct.RD_COST* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 24, i1 false)
  %27 = icmp ugt i8 %6, 2
  %28 = add nsw i32 %22, %4
  %29 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %30 = load i32, i32* %29, align 16
  %31 = icmp sge i32 %28, %30
  %32 = add nsw i32 %22, %5
  %33 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %34 = load i32, i32* %33, align 8
  %35 = icmp sge i32 %32, %34
  %36 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 0, i64 1, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 0, i64 1, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = or i1 %31, %35
  %41 = xor i1 %40, true
  %42 = icmp sgt i32 %39, %37
  %43 = or i1 %35, %42
  %44 = xor i1 %43, true
  %45 = and i1 %27, %44
  %46 = icmp sgt i32 %37, %39
  %47 = or i1 %31, %46
  %48 = xor i1 %47, true
  %49 = and i1 %27, %48
  %50 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 24
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, 5
  %53 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 11
  %54 = load i32, i32* %53, align 8
  %55 = icmp slt i32 %54, 5
  %56 = zext i1 %55 to i32
  call void @vp9_rd_cost_init(%struct.RD_COST* nonnull %13) #8
  call void @vp9_rd_cost_reset(%struct.RD_COST* nonnull %14) #8
  %57 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %14, i64 0, i32 2
  store i64 %9, i64* %57, align 8
  %58 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 31
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %89, label %61

61:                                               ; preds = %11
  %62 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 20
  %63 = load i8, i8* %62, align 1
  %64 = icmp ult i8 %63, %6
  br i1 %64, label %65, label %69

65:                                               ; preds = %61
  %66 = and i1 %31, %45
  %67 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 19
  %68 = load i8, i8* %67, align 4
  br label %77

69:                                               ; preds = %61
  %70 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 19
  %71 = load i8, i8* %70, align 4
  %72 = icmp ule i8 %71, %6
  %73 = and i1 %72, %41
  %74 = icmp ult i8 %71, %6
  %75 = or i1 %31, %74
  %76 = and i1 %45, %75
  br i1 %74, label %81, label %77

77:                                               ; preds = %65, %69
  %78 = phi i8 [ %71, %69 ], [ %68, %65 ]
  %79 = phi i1 [ %76, %69 ], [ %66, %65 ]
  %80 = phi i1 [ %73, %69 ], [ false, %65 ]
  br label %81

81:                                               ; preds = %77, %69
  %82 = phi i8 [ %71, %69 ], [ %78, %77 ]
  %83 = phi i1 [ %76, %69 ], [ %79, %77 ]
  %84 = phi i1 [ %73, %69 ], [ %80, %77 ]
  %85 = phi i1 [ true, %69 ], [ %35, %77 ]
  %86 = and i1 %49, %85
  %87 = icmp ult i8 %82, %6
  %88 = and i1 %27, %87
  br label %89

89:                                               ; preds = %11, %81
  %90 = phi i1 [ %88, %81 ], [ %27, %11 ]
  %91 = phi i1 [ %84, %81 ], [ %41, %11 ]
  %92 = phi i1 [ %83, %81 ], [ %45, %11 ]
  %93 = phi i1 [ %86, %81 ], [ %49, %11 ]
  %94 = zext i1 %90 to i32
  %95 = zext i1 %91 to i32
  %96 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 27
  %97 = load i32, i32* %96, align 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %102, label %99

99:                                               ; preds = %89
  %100 = and i1 %31, %92
  %101 = and i1 %35, %93
  br label %102

102:                                              ; preds = %89, %99
  %103 = phi i1 [ %100, %99 ], [ %92, %89 ]
  %104 = phi i1 [ %101, %99 ], [ %93, %89 ]
  br i1 %52, label %105, label %117

105:                                              ; preds = %102
  %106 = or i1 %90, %91
  %107 = xor i1 %106, true
  %108 = and i1 %55, %107
  %109 = zext i1 %108 to i32
  %110 = and i1 %90, %91
  br i1 %110, label %111, label %117

111:                                              ; preds = %105
  %112 = call fastcc i32 @ml_predict_var_paritioning(%struct.VP9_COMP* %0, %struct.macroblock* %17, i8 zeroext %6, i32 %4, i32 %5)
  %113 = icmp ne i32 %112, 0
  %114 = zext i1 %113 to i32
  %115 = icmp ne i32 %112, 3
  %116 = zext i1 %115 to i32
  br label %117

117:                                              ; preds = %111, %105, %102
  %118 = phi i32 [ %94, %105 ], [ %94, %102 ], [ %114, %111 ]
  %119 = phi i32 [ %109, %105 ], [ %56, %102 ], [ %109, %111 ]
  %120 = phi i32 [ %95, %105 ], [ %95, %102 ], [ %116, %111 ]
  %121 = icmp ne i32 %120, 0
  %122 = icmp ne i32 %118, 0
  %123 = or i32 %120, %118
  %124 = icmp eq i32 %123, 0
  %125 = select i1 %124, i32 1, i32 %119
  %126 = or i1 %103, %104
  %127 = or i1 %126, %122
  %128 = xor i1 %127, true
  %129 = zext i1 %128 to i32
  %130 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 3, i32 14
  store i32 %129, i32* %130, align 4
  br i1 %121, label %131, label %231

131:                                              ; preds = %117
  call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %17, i32 %4, i32 %5, %struct.RD_COST* nonnull %12, i8 zeroext %6, %struct.PICK_MODE_CONTEXT* %23)
  %132 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 6
  %133 = bitcast %struct.MODE_INFO*** %132 to i8***
  %134 = load i8**, i8*** %133, align 8
  %135 = load i8*, i8** %134, align 8
  %136 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %23, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %136, i8* align 4 %135, i64 68, i1 false)
  %137 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 3, i32 1
  %138 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 2
  %139 = bitcast %struct.MB_MODE_INFO_EXT** %138 to i8**
  %140 = load i8*, i8** %139, align 16
  %141 = bitcast %struct.MB_MODE_INFO_EXT* %137 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %141, i8* align 4 %140, i64 36, i1 false)
  %142 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 47, i64 0
  %143 = load i8, i8* %142, align 4
  %144 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 3, i32 16, i64 0
  store i8 %143, i8* %144, align 4
  %145 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 39
  %146 = load i32, i32* %145, align 16
  %147 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 3, i32 13
  store i32 %146, i32* %147, align 8
  %148 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %12, i64 0, i32 0
  %149 = load i32, i32* %148, align 8
  %150 = icmp eq i32 %149, 2147483647
  br i1 %150, label %231, label %151

151:                                              ; preds = %131
  %152 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 21
  %153 = load i8*, i8** %152, align 8
  %154 = sext i32 %5 to i64
  %155 = getelementptr inbounds i8, i8* %153, i64 %154
  %156 = and i32 %4, 7
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 22, i64 %157
  %159 = getelementptr inbounds [13 x i8], [13 x i8]* @mi_width_log2_lookup, i64 0, i64 %18
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = load i8, i8* %155, align 1
  %163 = sext i8 %162 to i32
  %164 = lshr i32 %163, %161
  %165 = and i32 %164, 1
  %166 = load i8, i8* %158, align 1
  %167 = sext i8 %166 to i32
  %168 = lshr i32 %167, %161
  %169 = shl i32 %168, 1
  %170 = and i32 %169, 2
  %171 = shl nuw nsw i32 %161, 2
  %172 = or i32 %165, %171
  %173 = or i32 %172, %170
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 115, i64 %174, i64 0
  %176 = load i32, i32* %175, align 16
  %177 = add nsw i32 %176, %149
  store i32 %177, i32* %148, align 8
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 15
  %180 = load i32, i32* %179, align 4
  %181 = sext i32 %180 to i64
  %182 = mul nsw i64 %181, %178
  %183 = add nsw i64 %182, 256
  %184 = ashr i64 %183, 9
  %185 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %12, i64 0, i32 1
  %186 = load i64, i64* %185, align 8
  %187 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 14
  %188 = load i32, i32* %187, align 8
  %189 = zext i32 %188 to i64
  %190 = shl i64 %186, %189
  %191 = add nsw i64 %184, %190
  %192 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %12, i64 0, i32 2
  store i64 %191, i64* %192, align 8
  %193 = load i64, i64* %57, align 8
  %194 = icmp slt i64 %191, %193
  br i1 %194, label %195, label %231

195:                                              ; preds = %151
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* nonnull align 8 %24, i64 24, i1 false)
  br i1 %27, label %196, label %198

196:                                              ; preds = %195
  %197 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 1
  store i32 0, i32* %197, align 4
  br label %198

198:                                              ; preds = %196, %195
  br i1 %52, label %231, label %199

199:                                              ; preds = %198
  %200 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 24
  %201 = load i32, i32* %200, align 4
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %231

203:                                              ; preds = %199
  %204 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 74, i32 0
  %205 = load i64, i64* %204, align 8
  %206 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %18
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i64
  %209 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %18
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i64
  %212 = sub nsw i64 8, %208
  %213 = sub nsw i64 %212, %211
  %214 = and i64 %213, 4294967295
  %215 = ashr i64 %205, %214
  %216 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 74, i32 1
  %217 = load i32, i32* %216, align 8
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds [13 x i8], [13 x i8]* @num_pels_log2_lookup, i64 0, i64 %18
  %220 = load i8, i8* %219, align 1
  %221 = zext i8 %220 to i64
  %222 = mul nsw i64 %221, %218
  %223 = icmp sgt i64 %222, %178
  %224 = icmp slt i64 %186, %215
  %225 = and i1 %223, %224
  br i1 %225, label %226, label %231

226:                                              ; preds = %203
  %227 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 3, i32 33, i64 0
  %228 = bitcast %struct.mv* %227 to i8*
  %229 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 49, i64 0
  %230 = bitcast %struct.mv* %229 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %228, i8* align 8 %230, i64 16, i1 false) #8
  br label %547

231:                                              ; preds = %203, %151, %198, %199, %131, %117
  %232 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 3, i32 33, i64 0
  %233 = bitcast %struct.mv* %232 to i8*
  %234 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 49, i64 0
  %235 = bitcast %struct.mv* %234 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %233, i8* align 8 %235, i64 16, i1 false) #8
  %236 = icmp eq i32 %118, 0
  br i1 %236, label %339, label %237

237:                                              ; preds = %231
  %238 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 21
  %239 = load i8*, i8** %238, align 8
  %240 = sext i32 %5 to i64
  %241 = getelementptr inbounds i8, i8* %239, i64 %240
  %242 = and i32 %4, 7
  %243 = zext i32 %242 to i64
  %244 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 22, i64 %243
  %245 = getelementptr inbounds [13 x i8], [13 x i8]* @mi_width_log2_lookup, i64 0, i64 %18
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i32
  %248 = load i8, i8* %241, align 1
  %249 = sext i8 %248 to i32
  %250 = lshr i32 %249, %247
  %251 = and i32 %250, 1
  %252 = load i8, i8* %244, align 1
  %253 = sext i8 %252 to i32
  %254 = lshr i32 %253, %247
  %255 = shl i32 %254, 1
  %256 = and i32 %255, 2
  %257 = shl nuw nsw i32 %247, 2
  %258 = or i32 %251, %257
  %259 = or i32 %258, %256
  %260 = zext i32 %259 to i64
  %261 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 115, i64 %260, i64 3
  %262 = load i32, i32* %261, align 4
  %263 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %13, i64 0, i32 0
  %264 = load i32, i32* %263, align 8
  %265 = add nsw i32 %264, %262
  store i32 %265, i32* %263, align 8
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 15
  %268 = load i32, i32* %267, align 4
  %269 = sext i32 %268 to i64
  %270 = mul nsw i64 %269, %266
  %271 = add nsw i64 %270, 256
  %272 = ashr i64 %271, 9
  %273 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %13, i64 0, i32 1
  %274 = load i64, i64* %273, align 8
  %275 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 14
  %276 = load i32, i32* %275, align 8
  %277 = zext i32 %276 to i64
  %278 = shl i64 %274, %277
  %279 = add nsw i64 %272, %278
  %280 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %13, i64 0, i32 2
  store i64 %279, i64* %280, align 8
  %281 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 3, i64 %18
  %282 = load i8, i8* %281, align 1
  %283 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %12, i64 0, i32 0
  %284 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %12, i64 0, i32 1
  %285 = bitcast i64* %284 to <2 x i64>*
  %286 = bitcast i64* %273 to <2 x i64>*
  %287 = bitcast i64* %273 to <2 x i64>*
  br label %288

288:                                              ; preds = %319, %237
  %289 = phi i64 [ %279, %237 ], [ %322, %319 ]
  %290 = phi i64 [ 0, %237 ], [ %320, %319 ]
  %291 = load i64, i64* %57, align 8
  %292 = icmp sgt i64 %291, %289
  br i1 %292, label %293, label %325

293:                                              ; preds = %288
  %294 = trunc i64 %290 to i32
  %295 = lshr i32 %294, 1
  %296 = mul nsw i32 %295, %22
  %297 = add nsw i32 %296, %4
  %298 = load i32, i32* %29, align 16
  %299 = icmp slt i32 %297, %298
  br i1 %299, label %300, label %319

300:                                              ; preds = %293
  %301 = and i32 %294, 1
  %302 = mul nuw nsw i32 %301, %22
  %303 = add nsw i32 %302, %5
  %304 = load i32, i32* %33, align 8
  %305 = icmp slt i32 %303, %304
  br i1 %305, label %306, label %319

306:                                              ; preds = %300
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %235, i8* align 4 %233, i64 16, i1 false) #8
  %307 = sub nsw i64 %291, %289
  %308 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 6, i32 0, i64 %290
  %309 = load %struct.PC_TREE*, %struct.PC_TREE** %308, align 8
  call fastcc void @nonrd_pick_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %2, %struct.TOKENEXTRA** %3, i32 %297, i32 %303, i8 zeroext %282, %struct.RD_COST* nonnull %12, i32 0, i64 %307, %struct.PC_TREE* %309)
  %310 = load i32, i32* %283, align 8
  %311 = icmp eq i32 %310, 2147483647
  br i1 %311, label %312, label %313

312:                                              ; preds = %306
  call void @vp9_rd_cost_reset(%struct.RD_COST* nonnull %13) #8
  br label %319

313:                                              ; preds = %306
  %314 = load i32, i32* %263, align 8
  %315 = add nsw i32 %314, %310
  store i32 %315, i32* %263, align 8
  %316 = load <2 x i64>, <2 x i64>* %285, align 8
  %317 = load <2 x i64>, <2 x i64>* %286, align 8
  %318 = add nsw <2 x i64> %317, %316
  store <2 x i64> %318, <2 x i64>* %287, align 8
  br label %319

319:                                              ; preds = %312, %313, %293, %300
  %320 = add nuw nsw i64 %290, 1
  %321 = icmp eq i64 %320, 4
  %322 = load i64, i64* %280, align 8
  br i1 %321, label %323, label %288

323:                                              ; preds = %319
  %324 = load i64, i64* %57, align 8
  br label %325

325:                                              ; preds = %288, %323
  %326 = phi i64 [ %324, %323 ], [ %291, %288 ]
  %327 = phi i64 [ %322, %323 ], [ %289, %288 ]
  %328 = icmp slt i64 %327, %326
  br i1 %328, label %329, label %331

329:                                              ; preds = %325
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* nonnull align 8 %25, i64 24, i1 false)
  %330 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 1
  store i32 3, i32* %330, align 4
  br label %339

331:                                              ; preds = %325
  %332 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 26
  %333 = load i32, i32* %332, align 8
  %334 = icmp eq i32 %333, 0
  br i1 %334, label %339, label %335

335:                                              ; preds = %331
  %336 = xor i1 %121, true
  %337 = zext i1 %336 to i32
  %338 = and i32 %125, %337
  br label %339

339:                                              ; preds = %329, %335, %331, %231
  %340 = phi i32 [ %125, %231 ], [ %125, %329 ], [ %338, %335 ], [ %125, %331 ]
  %341 = icmp ne i32 %340, 0
  %342 = and i1 %103, %341
  br i1 %342, label %343, label %444

343:                                              ; preds = %339
  %344 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 1, i64 %18
  %345 = load i8, i8* %344, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %235, i8* align 4 %233, i64 16, i1 false) #8
  %346 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 4
  %347 = getelementptr inbounds [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT]* %346, i64 0, i64 0
  %348 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 4, i64 0, i32 14
  store i32 1, i32* %348, align 4
  call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %17, i32 %4, i32 %5, %struct.RD_COST* nonnull %13, i8 zeroext %345, %struct.PICK_MODE_CONTEXT* %347)
  %349 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 6
  %350 = bitcast %struct.MODE_INFO*** %349 to i8***
  %351 = load i8**, i8*** %350, align 8
  %352 = load i8*, i8** %351, align 8
  %353 = getelementptr inbounds [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT]* %346, i64 0, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %353, i8* align 4 %352, i64 68, i1 false)
  %354 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 4, i64 0, i32 1
  %355 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 2
  %356 = bitcast %struct.MB_MODE_INFO_EXT** %355 to i8**
  %357 = load i8*, i8** %356, align 16
  %358 = bitcast %struct.MB_MODE_INFO_EXT* %354 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %358, i8* align 4 %357, i64 36, i1 false)
  %359 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 47, i64 0
  %360 = load i8, i8* %359, align 4
  %361 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 4, i64 0, i32 16, i64 0
  store i8 %360, i8* %361, align 4
  %362 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 39
  %363 = load i32, i32* %362, align 16
  %364 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 4, i64 0, i32 13
  store i32 %363, i32* %364, align 8
  %365 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %13, i64 0, i32 2
  %366 = load i64, i64* %365, align 8
  %367 = load i64, i64* %57, align 8
  %368 = icmp slt i64 %366, %367
  br i1 %368, label %369, label %437

369:                                              ; preds = %343
  %370 = load i32, i32* %29, align 16
  %371 = icmp slt i32 %28, %370
  br i1 %371, label %372, label %437

372:                                              ; preds = %369
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %235, i8* align 4 %233, i64 16, i1 false) #8
  %373 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 4, i64 1
  %374 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 4, i64 1, i32 14
  store i32 1, i32* %374, align 4
  call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %17, i32 %28, i32 %5, %struct.RD_COST* nonnull %12, i8 zeroext %345, %struct.PICK_MODE_CONTEXT* %373)
  %375 = load i8**, i8*** %350, align 8
  %376 = load i8*, i8** %375, align 8
  %377 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %373, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %377, i8* align 4 %376, i64 68, i1 false)
  %378 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 4, i64 1, i32 1
  %379 = load i8*, i8** %356, align 16
  %380 = bitcast %struct.MB_MODE_INFO_EXT* %378 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %380, i8* align 4 %379, i64 36, i1 false)
  %381 = load i8, i8* %359, align 4
  %382 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 4, i64 1, i32 16, i64 0
  store i8 %381, i8* %382, align 4
  %383 = load i32, i32* %362, align 16
  %384 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 4, i64 1, i32 13
  store i32 %383, i32* %384, align 8
  %385 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %12, i64 0, i32 0
  %386 = load i32, i32* %385, align 8
  %387 = icmp eq i32 %386, 2147483647
  br i1 %387, label %388, label %390

388:                                              ; preds = %372
  call void @vp9_rd_cost_reset(%struct.RD_COST* nonnull %13) #8
  %389 = load i64, i64* %365, align 8
  br label %437

390:                                              ; preds = %372
  %391 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 21
  %392 = load i8*, i8** %391, align 8
  %393 = sext i32 %5 to i64
  %394 = getelementptr inbounds i8, i8* %392, i64 %393
  %395 = and i32 %4, 7
  %396 = zext i32 %395 to i64
  %397 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 22, i64 %396
  %398 = getelementptr inbounds [13 x i8], [13 x i8]* @mi_width_log2_lookup, i64 0, i64 %18
  %399 = load i8, i8* %398, align 1
  %400 = zext i8 %399 to i32
  %401 = load i8, i8* %394, align 1
  %402 = sext i8 %401 to i32
  %403 = lshr i32 %402, %400
  %404 = and i32 %403, 1
  %405 = load i8, i8* %397, align 1
  %406 = sext i8 %405 to i32
  %407 = lshr i32 %406, %400
  %408 = shl i32 %407, 1
  %409 = and i32 %408, 2
  %410 = shl nuw nsw i32 %400, 2
  %411 = or i32 %404, %410
  %412 = or i32 %411, %409
  %413 = zext i32 %412 to i64
  %414 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 115, i64 %413, i64 1
  %415 = load i32, i32* %414, align 4
  %416 = add nsw i32 %415, %386
  store i32 %416, i32* %385, align 8
  %417 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %13, i64 0, i32 0
  %418 = load i32, i32* %417, align 8
  %419 = add nsw i32 %418, %416
  store i32 %419, i32* %417, align 8
  %420 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %12, i64 0, i32 1
  %421 = load i64, i64* %420, align 8
  %422 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %13, i64 0, i32 1
  %423 = load i64, i64* %422, align 8
  %424 = add nsw i64 %423, %421
  store i64 %424, i64* %422, align 8
  %425 = sext i32 %419 to i64
  %426 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 15
  %427 = load i32, i32* %426, align 4
  %428 = sext i32 %427 to i64
  %429 = mul nsw i64 %428, %425
  %430 = add nsw i64 %429, 256
  %431 = ashr i64 %430, 9
  %432 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 14
  %433 = load i32, i32* %432, align 8
  %434 = zext i32 %433 to i64
  %435 = shl i64 %424, %434
  %436 = add nsw i64 %431, %435
  store i64 %436, i64* %365, align 8
  br label %437

437:                                              ; preds = %388, %390, %369, %343
  %438 = phi i64 [ %389, %388 ], [ %436, %390 ], [ %366, %369 ], [ %366, %343 ]
  %439 = load i64, i64* %57, align 8
  %440 = icmp slt i64 %438, %439
  br i1 %440, label %441, label %443

441:                                              ; preds = %437
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* nonnull align 8 %25, i64 24, i1 false)
  %442 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 1
  store i32 1, i32* %442, align 4
  br label %444

443:                                              ; preds = %437
  call fastcc void @pred_pixel_ready_reset(%struct.PC_TREE* %10, i8 zeroext %6)
  br label %444

444:                                              ; preds = %441, %443, %339
  %445 = and i1 %104, %341
  br i1 %445, label %446, label %547

446:                                              ; preds = %444
  %447 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 2, i64 %18
  %448 = load i8, i8* %447, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %235, i8* align 4 %233, i64 16, i1 false) #8
  %449 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 5
  %450 = getelementptr inbounds [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT]* %449, i64 0, i64 0
  %451 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 5, i64 0, i32 14
  store i32 1, i32* %451, align 4
  call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %17, i32 %4, i32 %5, %struct.RD_COST* nonnull %13, i8 zeroext %448, %struct.PICK_MODE_CONTEXT* %450)
  %452 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 6
  %453 = bitcast %struct.MODE_INFO*** %452 to i8***
  %454 = load i8**, i8*** %453, align 8
  %455 = load i8*, i8** %454, align 8
  %456 = getelementptr inbounds [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT]* %449, i64 0, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %456, i8* align 4 %455, i64 68, i1 false)
  %457 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 5, i64 0, i32 1
  %458 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 2
  %459 = bitcast %struct.MB_MODE_INFO_EXT** %458 to i8**
  %460 = load i8*, i8** %459, align 16
  %461 = bitcast %struct.MB_MODE_INFO_EXT* %457 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %461, i8* align 4 %460, i64 36, i1 false)
  %462 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 47, i64 0
  %463 = load i8, i8* %462, align 4
  %464 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 5, i64 0, i32 16, i64 0
  store i8 %463, i8* %464, align 4
  %465 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 39
  %466 = load i32, i32* %465, align 16
  %467 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 5, i64 0, i32 13
  store i32 %466, i32* %467, align 8
  %468 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %13, i64 0, i32 2
  %469 = load i64, i64* %468, align 8
  %470 = load i64, i64* %57, align 8
  %471 = icmp slt i64 %469, %470
  br i1 %471, label %472, label %540

472:                                              ; preds = %446
  %473 = load i32, i32* %33, align 8
  %474 = icmp slt i32 %32, %473
  br i1 %474, label %475, label %540

475:                                              ; preds = %472
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %235, i8* align 4 %233, i64 16, i1 false) #8
  %476 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 5, i64 1
  %477 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 5, i64 1, i32 14
  store i32 1, i32* %477, align 4
  call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %17, i32 %4, i32 %32, %struct.RD_COST* nonnull %12, i8 zeroext %448, %struct.PICK_MODE_CONTEXT* %476)
  %478 = load i8**, i8*** %453, align 8
  %479 = load i8*, i8** %478, align 8
  %480 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %476, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %480, i8* align 4 %479, i64 68, i1 false)
  %481 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 5, i64 1, i32 1
  %482 = load i8*, i8** %459, align 16
  %483 = bitcast %struct.MB_MODE_INFO_EXT* %481 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %483, i8* align 4 %482, i64 36, i1 false)
  %484 = load i8, i8* %462, align 4
  %485 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 5, i64 1, i32 16, i64 0
  store i8 %484, i8* %485, align 4
  %486 = load i32, i32* %465, align 16
  %487 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 5, i64 1, i32 13
  store i32 %486, i32* %487, align 8
  %488 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %12, i64 0, i32 0
  %489 = load i32, i32* %488, align 8
  %490 = icmp eq i32 %489, 2147483647
  br i1 %490, label %491, label %493

491:                                              ; preds = %475
  call void @vp9_rd_cost_reset(%struct.RD_COST* nonnull %13) #8
  %492 = load i64, i64* %468, align 8
  br label %540

493:                                              ; preds = %475
  %494 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 21
  %495 = load i8*, i8** %494, align 8
  %496 = sext i32 %5 to i64
  %497 = getelementptr inbounds i8, i8* %495, i64 %496
  %498 = and i32 %4, 7
  %499 = zext i32 %498 to i64
  %500 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 22, i64 %499
  %501 = getelementptr inbounds [13 x i8], [13 x i8]* @mi_width_log2_lookup, i64 0, i64 %18
  %502 = load i8, i8* %501, align 1
  %503 = zext i8 %502 to i32
  %504 = load i8, i8* %497, align 1
  %505 = sext i8 %504 to i32
  %506 = lshr i32 %505, %503
  %507 = and i32 %506, 1
  %508 = load i8, i8* %500, align 1
  %509 = sext i8 %508 to i32
  %510 = lshr i32 %509, %503
  %511 = shl i32 %510, 1
  %512 = and i32 %511, 2
  %513 = shl nuw nsw i32 %503, 2
  %514 = or i32 %507, %513
  %515 = or i32 %514, %512
  %516 = zext i32 %515 to i64
  %517 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 115, i64 %516, i64 2
  %518 = load i32, i32* %517, align 8
  %519 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %13, i64 0, i32 0
  %520 = load i32, i32* %519, align 8
  %521 = add i32 %518, %489
  %522 = add i32 %521, %520
  store i32 %522, i32* %519, align 8
  %523 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %12, i64 0, i32 1
  %524 = load i64, i64* %523, align 8
  %525 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %13, i64 0, i32 1
  %526 = load i64, i64* %525, align 8
  %527 = add nsw i64 %526, %524
  store i64 %527, i64* %525, align 8
  %528 = sext i32 %522 to i64
  %529 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 15
  %530 = load i32, i32* %529, align 4
  %531 = sext i32 %530 to i64
  %532 = mul nsw i64 %531, %528
  %533 = add nsw i64 %532, 256
  %534 = ashr i64 %533, 9
  %535 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 14
  %536 = load i32, i32* %535, align 8
  %537 = zext i32 %536 to i64
  %538 = shl i64 %527, %537
  %539 = add nsw i64 %534, %538
  store i64 %539, i64* %468, align 8
  br label %540

540:                                              ; preds = %491, %493, %472, %446
  %541 = phi i64 [ %492, %491 ], [ %539, %493 ], [ %469, %472 ], [ %469, %446 ]
  %542 = load i64, i64* %57, align 8
  %543 = icmp slt i64 %541, %542
  br i1 %543, label %544, label %546

544:                                              ; preds = %540
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* nonnull align 8 %25, i64 24, i1 false)
  %545 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %10, i64 0, i32 1
  store i32 2, i32* %545, align 4
  br label %547

546:                                              ; preds = %540
  call fastcc void @pred_pixel_ready_reset(%struct.PC_TREE* %10, i8 zeroext %6)
  br label %547

547:                                              ; preds = %226, %544, %546, %444
  %548 = bitcast %struct.RD_COST* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %548, i8* nonnull align 8 %26, i64 24, i1 false)
  %549 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %14, i64 0, i32 0
  %550 = load i32, i32* %549, align 8
  %551 = icmp eq i32 %550, 2147483647
  br i1 %551, label %552, label %553

552:                                              ; preds = %547
  call void @vp9_rd_cost_reset(%struct.RD_COST* %7) #8
  br label %565

553:                                              ; preds = %547
  call fastcc void @fill_mode_info_sb(%struct.VP9Common* %15, %struct.macroblock* %17, i32 %4, i32 %5, i8 zeroext %6, %struct.PC_TREE* %10)
  %554 = load i32, i32* %549, align 8
  %555 = icmp eq i32 %554, 2147483647
  br i1 %555, label %565, label %556

556:                                              ; preds = %553
  %557 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %14, i64 0, i32 1
  %558 = load i64, i64* %557, align 8
  %559 = icmp ne i64 %558, 9223372036854775807
  %560 = icmp ne i32 %8, 0
  %561 = and i1 %560, %559
  br i1 %561, label %562, label %565

562:                                              ; preds = %556
  %563 = icmp eq i8 %6, 12
  %564 = zext i1 %563 to i32
  call fastcc void @encode_sb_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %16, %struct.TOKENEXTRA** %3, i32 %4, i32 %5, i32 %564, i8 zeroext %6, %struct.PC_TREE* %10)
  br label %565

565:                                              ; preds = %556, %562, %553, %552
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @set_offsets(%struct.VP9_COMP* nocapture readonly, %struct.TileInfo* nocapture readonly, %struct.macroblock*, i32, i32, i8 zeroext) unnamed_addr #0 {
  %7 = zext i8 %5 to i64
  %8 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %7
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = shl nsw i32 %4, 1
  %15 = shl nsw i32 %3, 1
  %16 = and i32 %15, 14
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 19, i64 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = ashr i32 %14, %20
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %18, i64 %22
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 0, i32 5
  store i8* %23, i8** %24, align 8
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = lshr i32 %16, %26
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 20, i64 0, i64 %28
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 0, i32 6
  store i8* %29, i8** %30, align 8
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 19, i64 1
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 1, i32 1
  %34 = load i32, i32* %33, align 8
  %35 = ashr i32 %14, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %32, i64 %36
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 1, i32 5
  store i8* %37, i8** %38, align 8
  %39 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 1, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = lshr i32 %16, %40
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 20, i64 1, i64 %42
  %44 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 1, i32 6
  store i8* %43, i8** %44, align 8
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 19, i64 2
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 2, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = ashr i32 %14, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %46, i64 %50
  %52 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 2, i32 5
  store i8* %51, i8** %52, align 8
  %53 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 2, i32 2
  %54 = load i32, i32* %53, align 4
  %55 = lshr i32 %16, %54
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 20, i64 2, i64 %56
  %58 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 2, i32 6
  store i8* %57, i8** %58, align 8
  %59 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 5
  %60 = load i32, i32* %59, align 8
  %61 = mul nsw i32 %60, %3
  %62 = add nsw i32 %61, %4
  %63 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %64 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %63, align 8
  %65 = sext i32 %62 to i64
  %66 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %64, i64 %65
  %67 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 6
  store %struct.MODE_INFO** %66, %struct.MODE_INFO*** %67, align 8
  %68 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %69 = load %struct.MODE_INFO*, %struct.MODE_INFO** %68, align 16
  %70 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %69, i64 %65
  store %struct.MODE_INFO* %70, %struct.MODE_INFO** %66, align 8
  %71 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 3
  %72 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %71, align 8
  %73 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %74 = load i32, i32* %73, align 8
  %75 = mul nsw i32 %74, %3
  %76 = add nsw i32 %75, %4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %72, i64 %77
  %79 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %78, %struct.MB_MODE_INFO_EXT** %79, align 16
  %80 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 0
  %81 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 89
  %82 = load %struct.BufferPool*, %struct.BufferPool** %81, align 8
  %83 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 18
  %84 = load i32, i32* %83, align 16
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %82, i64 0, i32 3, i64 %85, i32 8
  tail call void @vp9_setup_dst_planes(%struct.macroblockd_plane* %80, %struct.yv12_buffer_config* %86, i32 %3, i32 %4) #8
  %87 = add i32 %13, %3
  %88 = shl nsw i32 %87, 3
  %89 = or i32 %88, 4
  %90 = sub nsw i32 0, %89
  %91 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 36, i32 2
  store i32 %90, i32* %91, align 4
  %92 = add i32 %10, %4
  %93 = shl nsw i32 %92, 3
  %94 = or i32 %93, 4
  %95 = sub nsw i32 0, %94
  %96 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 36, i32 0
  store i32 %95, i32* %96, align 4
  %97 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %98 = load i32, i32* %97, align 16
  %99 = sub nsw i32 %98, %3
  %100 = shl nsw i32 %99, 3
  %101 = or i32 %100, 4
  %102 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 36, i32 3
  store i32 %101, i32* %102, align 4
  %103 = load i32, i32* %73, align 8
  %104 = sub nsw i32 %103, %4
  %105 = shl nsw i32 %104, 3
  %106 = or i32 %105, 4
  %107 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 36, i32 1
  store i32 %106, i32* %107, align 4
  %108 = load i32, i32* %97, align 16
  %109 = load i32, i32* %73, align 8
  %110 = shl nsw i32 %3, 6
  %111 = sub nsw i32 0, %110
  %112 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 14
  store i32 %111, i32* %112, align 8
  %113 = sub i32 %108, %87
  %114 = shl nsw i32 %113, 6
  %115 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 15
  store i32 %114, i32* %115, align 4
  %116 = shl nsw i32 %4, 6
  %117 = sub nsw i32 0, %116
  %118 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 12
  store i32 %117, i32* %118, align 8
  %119 = sub i32 %109, %92
  %120 = shl nsw i32 %119, 6
  %121 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 13
  store i32 %120, i32* %121, align 4
  %122 = icmp eq i32 %3, 0
  br i1 %122, label %130, label %123

123:                                              ; preds = %6
  %124 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %67, align 8
  %125 = load i32, i32* %59, align 8
  %126 = sub nsw i32 0, %125
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %124, i64 %127
  %129 = load %struct.MODE_INFO*, %struct.MODE_INFO** %128, align 8
  br label %130

130:                                              ; preds = %123, %6
  %131 = phi %struct.MODE_INFO* [ %129, %123 ], [ null, %6 ]
  %132 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 8
  store %struct.MODE_INFO* %131, %struct.MODE_INFO** %132, align 8
  %133 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %1, i64 0, i32 2
  %134 = load i32, i32* %133, align 4
  %135 = icmp slt i32 %134, %4
  br i1 %135, label %136, label %140

136:                                              ; preds = %130
  %137 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %67, align 8
  %138 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %137, i64 -1
  %139 = load %struct.MODE_INFO*, %struct.MODE_INFO** %138, align 8
  br label %140

140:                                              ; preds = %130, %136
  %141 = phi %struct.MODE_INFO* [ %139, %136 ], [ null, %130 ]
  %142 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 7
  store %struct.MODE_INFO* %141, %struct.MODE_INFO** %142, align 8
  %143 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 12
  %144 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %143, align 8
  %145 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %144, i64 0, i32 13
  %146 = load i8*, i8** %145, align 8
  %147 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %144, i64 0, i32 14
  %148 = load i8*, i8** %147, align 8
  %149 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %144, i64 0, i32 15
  %150 = load i8*, i8** %149, align 8
  %151 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %144, i64 0, i32 4
  %152 = load i32, i32* %151, align 8
  %153 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %144, i64 0, i32 9
  %154 = load i32, i32* %153, align 4
  %155 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 18
  store %struct.yv12_buffer_config* %144, %struct.yv12_buffer_config** %155, align 16
  %156 = shl nsw i32 %4, 3
  %157 = shl nsw i32 %3, 3
  %158 = load i32, i32* %19, align 8
  %159 = load i32, i32* %25, align 4
  %160 = ashr i32 %156, %158
  %161 = ashr i32 %157, %159
  %162 = sext i32 %161 to i64
  %163 = sext i32 %152 to i64
  %164 = mul nsw i64 %162, %163
  %165 = sext i32 %160 to i64
  %166 = add nsw i64 %164, %165
  %167 = getelementptr inbounds i8, i8* %146, i64 %166
  %168 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 0, i32 4, i32 0
  store i8* %167, i8** %168, align 8
  %169 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 0, i32 4, i32 1
  store i32 %152, i32* %169, align 8
  %170 = load i32, i32* %33, align 8
  %171 = load i32, i32* %39, align 4
  %172 = ashr i32 %156, %170
  %173 = ashr i32 %157, %171
  %174 = sext i32 %173 to i64
  %175 = sext i32 %154 to i64
  %176 = mul nsw i64 %174, %175
  %177 = sext i32 %172 to i64
  %178 = add nsw i64 %176, %177
  %179 = getelementptr inbounds i8, i8* %148, i64 %178
  %180 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 1, i32 4, i32 0
  store i8* %179, i8** %180, align 8
  %181 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 1, i32 4, i32 1
  store i32 %154, i32* %181, align 8
  %182 = load i32, i32* %47, align 8
  %183 = load i32, i32* %53, align 4
  %184 = ashr i32 %156, %182
  %185 = ashr i32 %157, %183
  %186 = sext i32 %185 to i64
  %187 = mul nsw i64 %186, %175
  %188 = sext i32 %184 to i64
  %189 = add nsw i64 %187, %188
  %190 = getelementptr inbounds i8, i8* %150, i64 %189
  %191 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 2, i32 4, i32 0
  store i8* %190, i8** %191, align 8
  %192 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 2, i32 4, i32 1
  store i32 %154, i32* %192, align 8
  %193 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 6
  %194 = load i32, i32* %193, align 4
  %195 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 14
  store i32 %194, i32* %195, align 8
  %196 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 58, i32 5
  %197 = load i32, i32* %196, align 8
  %198 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 15
  store i32 %197, i32* %198, align 4
  %199 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 61
  %200 = load i32, i32* %199, align 8
  %201 = icmp eq i32 %200, 1
  br i1 %201, label %202, label %281

202:                                              ; preds = %140
  %203 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 6), align 1
  %204 = zext i8 %203 to i32
  %205 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 6), align 1
  %206 = zext i8 %205 to i32
  %207 = load i32, i32* %73, align 8
  %208 = add nsw i32 %204, -1
  %209 = add i32 %208, %207
  %210 = sdiv i32 %209, %204
  %211 = load i32, i32* %97, align 16
  %212 = add nsw i32 %206, -1
  %213 = add i32 %211, %212
  %214 = sdiv i32 %213, %206
  %215 = add nsw i32 %212, %13
  %216 = sdiv i32 %215, %206
  %217 = sdiv i32 %3, %204
  %218 = icmp slt i32 %217, %214
  %219 = icmp sgt i32 %216, 0
  %220 = and i1 %219, %218
  br i1 %220, label %221, label %265

221:                                              ; preds = %202
  %222 = add nsw i32 %217, %216
  %223 = add nsw i32 %208, %10
  %224 = sdiv i32 %223, %204
  %225 = sdiv i32 %4, %206
  %226 = icmp slt i32 %225, %210
  %227 = add nsw i32 %225, %224
  %228 = icmp sgt i32 %224, 0
  %229 = and i1 %228, %226
  %230 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 53
  %231 = sext i32 %225 to i64
  %232 = sext i32 %227 to i64
  %233 = sext i32 %210 to i64
  %234 = sext i32 %217 to i64
  %235 = sext i32 %222 to i64
  %236 = sext i32 %214 to i64
  br label %237

237:                                              ; preds = %258, %221
  %238 = phi i64 [ %234, %221 ], [ %261, %258 ]
  %239 = phi double [ 0.000000e+00, %221 ], [ %260, %258 ]
  %240 = phi double [ 0.000000e+00, %221 ], [ %259, %258 ]
  br i1 %229, label %241, label %258

241:                                              ; preds = %237
  %242 = mul nsw i64 %238, %233
  br label %243

243:                                              ; preds = %243, %241
  %244 = phi i64 [ %231, %241 ], [ %254, %243 ]
  %245 = phi double [ %239, %241 ], [ %252, %243 ]
  %246 = phi double [ %240, %241 ], [ %253, %243 ]
  %247 = add nsw i64 %244, %242
  %248 = load double*, double** %230, align 8
  %249 = getelementptr inbounds double, double* %248, i64 %247
  %250 = load double, double* %249, align 8
  %251 = tail call double @log(double %250) #8
  %252 = fadd double %245, %251
  %253 = fadd double %246, 1.000000e+00
  %254 = add nsw i64 %244, 1
  %255 = icmp slt i64 %254, %233
  %256 = icmp slt i64 %254, %232
  %257 = and i1 %255, %256
  br i1 %257, label %243, label %258

258:                                              ; preds = %243, %237
  %259 = phi double [ %240, %237 ], [ %253, %243 ]
  %260 = phi double [ %239, %237 ], [ %252, %243 ]
  %261 = add nsw i64 %238, 1
  %262 = icmp slt i64 %261, %236
  %263 = icmp slt i64 %261, %235
  %264 = and i1 %262, %263
  br i1 %264, label %237, label %265

265:                                              ; preds = %258, %202
  %266 = phi double [ 0.000000e+00, %202 ], [ %259, %258 ]
  %267 = phi double [ 0.000000e+00, %202 ], [ %260, %258 ]
  %268 = fdiv double %267, %266
  %269 = tail call double @exp(double %268) #8
  %270 = load i32, i32* %198, align 4
  %271 = sitofp i32 %270 to double
  %272 = fmul double %269, %271
  %273 = fptosi double %272 to i32
  %274 = icmp sgt i32 %273, 0
  %275 = select i1 %274, i32 %273, i32 0
  store i32 %275, i32* %198, align 4
  %276 = lshr i32 %275, 6
  %277 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 11
  %278 = icmp eq i32 %276, 0
  %279 = zext i1 %278 to i32
  %280 = add nuw nsw i32 %276, %279
  store i32 %280, i32* %277, align 4
  tail call void @vpx_clear_system_state() #8
  br label %281

281:                                              ; preds = %265, %140
  %282 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 4
  %283 = bitcast %struct.TileInfo* %282 to i8*
  %284 = bitcast %struct.TileInfo* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %283, i8* align 4 %284, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @nonrd_select_partition(%struct.VP9_COMP*, %struct.ThreadData*, %struct.TileDataEnc*, %struct.MODE_INFO** readonly, %struct.TOKENEXTRA**, i32, i32, i8 zeroext, %struct.RD_COST*, %struct.PC_TREE*) unnamed_addr #0 {
  %11 = alloca %struct.RD_COST, align 8
  %12 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %2, i64 0, i32 0
  %13 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0
  %14 = zext i8 %7 to i64
  %15 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = shl i32 1, %17
  %19 = sdiv i32 %18, 4
  %20 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 36
  %21 = load i32, i32* %20, align 4
  %22 = bitcast %struct.RD_COST* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 24, i1 false)
  %23 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 86
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  call void @vp9_rd_cost_reset(%struct.RD_COST* nonnull %11) #8
  %26 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %27 = load i32, i32* %26, align 16
  %28 = icmp sgt i32 %27, %5
  br i1 %28, label %29, label %271

29:                                               ; preds = %10
  %30 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %31 = load i32, i32* %30, align 8
  %32 = icmp sgt i32 %31, %6
  br i1 %32, label %33, label %271

33:                                               ; preds = %29
  %34 = icmp ugt i8 %7, 2
  br i1 %34, label %35, label %39

35:                                               ; preds = %33
  %36 = load %struct.MODE_INFO*, %struct.MODE_INFO** %3, align 8
  %37 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %36, i64 0, i32 0
  %38 = load i8, i8* %37, align 4
  br label %39

39:                                               ; preds = %33, %35
  %40 = phi i8 [ %38, %35 ], [ 0, %33 ]
  %41 = zext i8 %16 to i64
  %42 = zext i8 %40 to i64
  %43 = getelementptr inbounds [0 x [13 x i32]], [0 x [13 x i32]]* @partition_lookup, i64 0, i64 %41, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i8 %7, 9
  %46 = icmp eq i8 %40, 9
  %47 = and i1 %45, %46
  br i1 %47, label %48, label %51

48:                                               ; preds = %39
  %49 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 20
  store i8 9, i8* %49, align 1
  %50 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 19
  store i8 6, i8* %50, align 4
  call fastcc void @nonrd_pick_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %2, %struct.TOKENEXTRA** %4, i32 %5, i32 %6, i8 zeroext 9, %struct.RD_COST* %8, i32 0, i64 9223372036854775807, %struct.PC_TREE* %9)
  br label %271

51:                                               ; preds = %39
  %52 = icmp ne i32 %44, 0
  %53 = and i1 %45, %52
  br i1 %53, label %54, label %61

54:                                               ; preds = %51
  %55 = zext i8 %40 to i32
  %56 = select i1 %25, i32 6, i32 3
  %57 = icmp ugt i32 %56, %55
  br i1 %57, label %67, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 20
  store i8 9, i8* %59, align 1
  %60 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 19
  store i8 3, i8* %60, align 4
  call fastcc void @nonrd_pick_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %2, %struct.TOKENEXTRA** %4, i32 %5, i32 %6, i8 zeroext 9, %struct.RD_COST* %8, i32 0, i64 9223372036854775807, %struct.PC_TREE* %9)
  br label %271

61:                                               ; preds = %51
  %62 = icmp eq i8 %7, 6
  %63 = and i1 %62, %52
  br i1 %63, label %64, label %67

64:                                               ; preds = %61
  %65 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 20
  store i8 6, i8* %65, align 1
  %66 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 19
  store i8 3, i8* %66, align 4
  call fastcc void @nonrd_pick_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %2, %struct.TOKENEXTRA** %4, i32 %5, i32 %6, i8 zeroext 6, %struct.RD_COST* %8, i32 0, i64 9223372036854775807, %struct.PC_TREE* %9)
  br label %271

67:                                               ; preds = %54, %61
  switch i32 %44, label %195 [
    i32 0, label %68
    i32 2, label %87
    i32 1, label %141
  ]

68:                                               ; preds = %67
  %69 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 3
  %70 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 3, i32 14
  store i32 1, i32* %70, align 4
  call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %13, i32 %5, i32 %6, %struct.RD_COST* %8, i8 zeroext %40, %struct.PICK_MODE_CONTEXT* %69)
  %71 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 6
  %72 = bitcast %struct.MODE_INFO*** %71 to i8***
  %73 = load i8**, i8*** %72, align 8
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %69, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 4 %74, i64 68, i1 false)
  %76 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 3, i32 1
  %77 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 2
  %78 = bitcast %struct.MB_MODE_INFO_EXT** %77 to i8**
  %79 = load i8*, i8** %78, align 16
  %80 = bitcast %struct.MB_MODE_INFO_EXT* %76 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %80, i8* align 4 %79, i64 36, i1 false)
  %81 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 47, i64 0
  %82 = load i8, i8* %81, align 4
  %83 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 3, i32 16, i64 0
  store i8 %82, i8* %83, align 4
  %84 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 39
  %85 = load i32, i32* %84, align 16
  %86 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 3, i32 13
  store i32 %85, i32* %86, align 8
  br label %268

87:                                               ; preds = %67
  %88 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5
  %89 = getelementptr inbounds [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT]* %88, i64 0, i64 0
  %90 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 0, i32 14
  store i32 1, i32* %90, align 4
  call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %13, i32 %5, i32 %6, %struct.RD_COST* %8, i8 zeroext %40, %struct.PICK_MODE_CONTEXT* %89)
  %91 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 6
  %92 = bitcast %struct.MODE_INFO*** %91 to i8***
  %93 = load i8**, i8*** %92, align 8
  %94 = load i8*, i8** %93, align 8
  %95 = getelementptr inbounds [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT]* %88, i64 0, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 4 %94, i64 68, i1 false)
  %96 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 0, i32 1
  %97 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 2
  %98 = bitcast %struct.MB_MODE_INFO_EXT** %97 to i8**
  %99 = load i8*, i8** %98, align 16
  %100 = bitcast %struct.MB_MODE_INFO_EXT* %96 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %100, i8* align 4 %99, i64 36, i1 false)
  %101 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 47, i64 0
  %102 = load i8, i8* %101, align 4
  %103 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 0, i32 16, i64 0
  store i8 %102, i8* %103, align 4
  %104 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 39
  %105 = load i32, i32* %104, align 16
  %106 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 0, i32 13
  store i32 %105, i32* %106, align 8
  %107 = add nsw i32 %19, %6
  %108 = load i32, i32* %30, align 8
  %109 = icmp slt i32 %107, %108
  br i1 %109, label %110, label %268

110:                                              ; preds = %87
  %111 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 1
  %112 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 1, i32 14
  store i32 1, i32* %112, align 4
  call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %13, i32 %5, i32 %107, %struct.RD_COST* nonnull %11, i8 zeroext %40, %struct.PICK_MODE_CONTEXT* %111)
  %113 = load i8**, i8*** %92, align 8
  %114 = load i8*, i8** %113, align 8
  %115 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %111, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 4 %114, i64 68, i1 false)
  %116 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 1, i32 1
  %117 = load i8*, i8** %98, align 16
  %118 = bitcast %struct.MB_MODE_INFO_EXT* %116 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %118, i8* align 4 %117, i64 36, i1 false)
  %119 = load i8, i8* %101, align 4
  %120 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 1, i32 16, i64 0
  store i8 %119, i8* %120, align 4
  %121 = load i32, i32* %104, align 16
  %122 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 5, i64 1, i32 13
  store i32 %121, i32* %122, align 8
  %123 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %11, i64 0, i32 0
  %124 = load i32, i32* %123, align 8
  %125 = icmp eq i32 %124, 2147483647
  br i1 %125, label %268, label %126

126:                                              ; preds = %110
  %127 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %11, i64 0, i32 1
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 9223372036854775807
  br i1 %129, label %268, label %130

130:                                              ; preds = %126
  %131 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %8, i64 0, i32 0
  %132 = load i32, i32* %131, align 8
  %133 = icmp eq i32 %132, 2147483647
  br i1 %133, label %268, label %134

134:                                              ; preds = %130
  %135 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %8, i64 0, i32 1
  %136 = load i64, i64* %135, align 8
  %137 = icmp eq i64 %136, 9223372036854775807
  br i1 %137, label %268, label %138

138:                                              ; preds = %134
  %139 = add nsw i32 %132, %124
  store i32 %139, i32* %131, align 8
  %140 = add nsw i64 %136, %128
  store i64 %140, i64* %135, align 8
  br label %268

141:                                              ; preds = %67
  %142 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4
  %143 = getelementptr inbounds [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT]* %142, i64 0, i64 0
  %144 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 0, i32 14
  store i32 1, i32* %144, align 4
  call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %13, i32 %5, i32 %6, %struct.RD_COST* %8, i8 zeroext %40, %struct.PICK_MODE_CONTEXT* %143)
  %145 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 6
  %146 = bitcast %struct.MODE_INFO*** %145 to i8***
  %147 = load i8**, i8*** %146, align 8
  %148 = load i8*, i8** %147, align 8
  %149 = getelementptr inbounds [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT]* %142, i64 0, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %149, i8* align 4 %148, i64 68, i1 false)
  %150 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 0, i32 1
  %151 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 2
  %152 = bitcast %struct.MB_MODE_INFO_EXT** %151 to i8**
  %153 = load i8*, i8** %152, align 16
  %154 = bitcast %struct.MB_MODE_INFO_EXT* %150 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %154, i8* align 4 %153, i64 36, i1 false)
  %155 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 47, i64 0
  %156 = load i8, i8* %155, align 4
  %157 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 0, i32 16, i64 0
  store i8 %156, i8* %157, align 4
  %158 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 39
  %159 = load i32, i32* %158, align 16
  %160 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 0, i32 13
  store i32 %159, i32* %160, align 8
  %161 = add nsw i32 %19, %5
  %162 = load i32, i32* %26, align 16
  %163 = icmp slt i32 %161, %162
  br i1 %163, label %164, label %268

164:                                              ; preds = %141
  %165 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 1
  %166 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 1, i32 14
  store i32 1, i32* %166, align 4
  call fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP* %0, %struct.TileDataEnc* %2, %struct.macroblock* %13, i32 %161, i32 %6, %struct.RD_COST* nonnull %11, i8 zeroext %40, %struct.PICK_MODE_CONTEXT* %165)
  %167 = load i8**, i8*** %146, align 8
  %168 = load i8*, i8** %167, align 8
  %169 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %165, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %169, i8* align 4 %168, i64 68, i1 false)
  %170 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 1, i32 1
  %171 = load i8*, i8** %152, align 16
  %172 = bitcast %struct.MB_MODE_INFO_EXT* %170 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %172, i8* align 4 %171, i64 36, i1 false)
  %173 = load i8, i8* %155, align 4
  %174 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 1, i32 16, i64 0
  store i8 %173, i8* %174, align 4
  %175 = load i32, i32* %158, align 16
  %176 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 4, i64 1, i32 13
  store i32 %175, i32* %176, align 8
  %177 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %11, i64 0, i32 0
  %178 = load i32, i32* %177, align 8
  %179 = icmp eq i32 %178, 2147483647
  br i1 %179, label %268, label %180

180:                                              ; preds = %164
  %181 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %11, i64 0, i32 1
  %182 = load i64, i64* %181, align 8
  %183 = icmp eq i64 %182, 9223372036854775807
  br i1 %183, label %268, label %184

184:                                              ; preds = %180
  %185 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %8, i64 0, i32 0
  %186 = load i32, i32* %185, align 8
  %187 = icmp eq i32 %186, 2147483647
  br i1 %187, label %268, label %188

188:                                              ; preds = %184
  %189 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %8, i64 0, i32 1
  %190 = load i64, i64* %189, align 8
  %191 = icmp eq i64 %190, 9223372036854775807
  br i1 %191, label %268, label %192

192:                                              ; preds = %188
  %193 = add nsw i32 %186, %178
  store i32 %193, i32* %185, align 8
  %194 = add nsw i64 %190, %182
  store i64 %194, i64* %189, align 8
  br label %268

195:                                              ; preds = %67
  %196 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 3, i64 %14
  %197 = load i8, i8* %196, align 1
  %198 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 6, i32 0, i64 0
  %199 = load %struct.PC_TREE*, %struct.PC_TREE** %198, align 8
  call fastcc void @nonrd_select_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %2, %struct.MODE_INFO** %3, %struct.TOKENEXTRA** %4, i32 %5, i32 %6, i8 zeroext %197, %struct.RD_COST* %8, %struct.PC_TREE* %199)
  %200 = sext i32 %19 to i64
  %201 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %3, i64 %200
  %202 = add nsw i32 %19, %6
  %203 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 6, i32 0, i64 1
  %204 = load %struct.PC_TREE*, %struct.PC_TREE** %203, align 8
  call fastcc void @nonrd_select_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %2, %struct.MODE_INFO** %201, %struct.TOKENEXTRA** %4, i32 %5, i32 %202, i8 zeroext %197, %struct.RD_COST* nonnull %11, %struct.PC_TREE* %204)
  %205 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %11, i64 0, i32 0
  %206 = load i32, i32* %205, align 8
  %207 = icmp eq i32 %206, 2147483647
  br i1 %207, label %223, label %208

208:                                              ; preds = %195
  %209 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %11, i64 0, i32 1
  %210 = load i64, i64* %209, align 8
  %211 = icmp eq i64 %210, 9223372036854775807
  br i1 %211, label %223, label %212

212:                                              ; preds = %208
  %213 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %8, i64 0, i32 0
  %214 = load i32, i32* %213, align 8
  %215 = icmp eq i32 %214, 2147483647
  br i1 %215, label %223, label %216

216:                                              ; preds = %212
  %217 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %8, i64 0, i32 1
  %218 = load i64, i64* %217, align 8
  %219 = icmp eq i64 %218, 9223372036854775807
  br i1 %219, label %223, label %220

220:                                              ; preds = %216
  %221 = add nsw i32 %214, %206
  store i32 %221, i32* %213, align 8
  %222 = add nsw i64 %218, %210
  store i64 %222, i64* %217, align 8
  br label %223

223:                                              ; preds = %216, %212, %208, %195, %220
  %224 = mul nsw i32 %19, %21
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %3, i64 %225
  %227 = add nsw i32 %19, %5
  %228 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 6, i32 0, i64 2
  %229 = load %struct.PC_TREE*, %struct.PC_TREE** %228, align 8
  call fastcc void @nonrd_select_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %2, %struct.MODE_INFO** %226, %struct.TOKENEXTRA** %4, i32 %227, i32 %6, i8 zeroext %197, %struct.RD_COST* nonnull %11, %struct.PC_TREE* %229)
  %230 = load i32, i32* %205, align 8
  %231 = icmp eq i32 %230, 2147483647
  br i1 %231, label %247, label %232

232:                                              ; preds = %223
  %233 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %11, i64 0, i32 1
  %234 = load i64, i64* %233, align 8
  %235 = icmp eq i64 %234, 9223372036854775807
  br i1 %235, label %247, label %236

236:                                              ; preds = %232
  %237 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %8, i64 0, i32 0
  %238 = load i32, i32* %237, align 8
  %239 = icmp eq i32 %238, 2147483647
  br i1 %239, label %247, label %240

240:                                              ; preds = %236
  %241 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %8, i64 0, i32 1
  %242 = load i64, i64* %241, align 8
  %243 = icmp eq i64 %242, 9223372036854775807
  br i1 %243, label %247, label %244

244:                                              ; preds = %240
  %245 = add nsw i32 %238, %230
  store i32 %245, i32* %237, align 8
  %246 = add nsw i64 %242, %234
  store i64 %246, i64* %241, align 8
  br label %247

247:                                              ; preds = %240, %236, %232, %223, %244
  %248 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %226, i64 %200
  %249 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %9, i64 0, i32 6, i32 0, i64 3
  %250 = load %struct.PC_TREE*, %struct.PC_TREE** %249, align 8
  call fastcc void @nonrd_select_partition(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileDataEnc* %2, %struct.MODE_INFO** %248, %struct.TOKENEXTRA** %4, i32 %227, i32 %202, i8 zeroext %197, %struct.RD_COST* nonnull %11, %struct.PC_TREE* %250)
  %251 = load i32, i32* %205, align 8
  %252 = icmp eq i32 %251, 2147483647
  br i1 %252, label %268, label %253

253:                                              ; preds = %247
  %254 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %11, i64 0, i32 1
  %255 = load i64, i64* %254, align 8
  %256 = icmp eq i64 %255, 9223372036854775807
  br i1 %256, label %268, label %257

257:                                              ; preds = %253
  %258 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %8, i64 0, i32 0
  %259 = load i32, i32* %258, align 8
  %260 = icmp eq i32 %259, 2147483647
  br i1 %260, label %268, label %261

261:                                              ; preds = %257
  %262 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %8, i64 0, i32 1
  %263 = load i64, i64* %262, align 8
  %264 = icmp eq i64 %263, 9223372036854775807
  br i1 %264, label %268, label %265

265:                                              ; preds = %261
  %266 = add nsw i32 %259, %251
  store i32 %266, i32* %258, align 8
  %267 = add nsw i64 %263, %255
  store i64 %267, i64* %262, align 8
  br label %268

268:                                              ; preds = %261, %257, %253, %247, %134, %130, %126, %110, %188, %184, %180, %164, %68, %138, %87, %192, %141, %265
  %269 = icmp eq i8 %7, 12
  br i1 %269, label %270, label %271

270:                                              ; preds = %268
  call fastcc void @encode_sb_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %12, %struct.TOKENEXTRA** %4, i32 %5, i32 %6, i32 1, i8 zeroext 12, %struct.PC_TREE* %9)
  br label %271

271:                                              ; preds = %48, %64, %58, %268, %270, %10, %29
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @set_segment_index(%struct.VP9_COMP*, %struct.macroblock*, i32, i32, i8 zeroext) unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 6
  %7 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %6, align 8
  %8 = load %struct.MODE_INFO*, %struct.MODE_INFO** %7, align 8
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 31
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, 0
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 81
  %15 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 60
  %16 = select i1 %13, i8** %15, i8** %14
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %8, i64 0, i32 4
  store i8 0, i8* %18, align 4
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 0
  %20 = load i8, i8* %19, align 4
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %481, label %22

22:                                               ; preds = %5
  switch i32 %10, label %327 [
    i32 3, label %23
    i32 7, label %172
    i32 6, label %325
    i32 5, label %321
  ]

23:                                               ; preds = %22
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %25 = load i32, i32* %24, align 8
  %26 = zext i8 %4 to i64
  %27 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %26
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = sub nsw i32 %25, %3
  %34 = icmp slt i32 %33, %29
  %35 = select i1 %34, i32 %33, i32 %29
  %36 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %37 = load i32, i32* %36, align 16
  %38 = sub nsw i32 %37, %2
  %39 = icmp slt i32 %38, %32
  %40 = select i1 %39, i32 %38, i32 %32
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %169

42:                                               ; preds = %23
  %43 = icmp sgt i32 %35, 0
  %44 = sext i32 %35 to i64
  %45 = add nsw i64 %44, -1
  %46 = mul i32 %25, %2
  %47 = add i32 %46, %3
  %48 = add nsw i64 %44, -8
  %49 = lshr i64 %48, 3
  %50 = add nuw nsw i64 %49, 1
  %51 = icmp ult i32 %35, 8
  %52 = trunc i64 %45 to i32
  %53 = icmp ugt i64 %45, 4294967295
  %54 = and i64 %44, -8
  %55 = and i64 %50, 1
  %56 = icmp eq i64 %49, 0
  %57 = sub nuw nsw i64 %50, %55
  %58 = icmp eq i64 %55, 0
  %59 = icmp eq i64 %54, %44
  br label %60

60:                                               ; preds = %165, %42
  %61 = phi i32 [ 8, %42 ], [ %166, %165 ]
  %62 = phi i32 [ 0, %42 ], [ %167, %165 ]
  %63 = mul i32 %25, %62
  %64 = add i32 %47, %63
  br i1 %43, label %65, label %165

65:                                               ; preds = %60
  %66 = add i32 %62, %2
  %67 = mul i32 %66, %25
  %68 = add i32 %67, %3
  br i1 %51, label %149, label %69

69:                                               ; preds = %65
  %70 = add i32 %64, %52
  %71 = icmp slt i32 %70, %64
  %72 = or i1 %71, %53
  br i1 %72, label %149, label %73

73:                                               ; preds = %69
  %74 = insertelement <4 x i32> undef, i32 %61, i32 0
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %56, label %115, label %76

76:                                               ; preds = %73, %76
  %77 = phi i64 [ %112, %76 ], [ 0, %73 ]
  %78 = phi <4 x i32> [ %110, %76 ], [ %75, %73 ]
  %79 = phi <4 x i32> [ %111, %76 ], [ %75, %73 ]
  %80 = phi i64 [ %113, %76 ], [ %57, %73 ]
  %81 = trunc i64 %77 to i32
  %82 = add i32 %68, %81
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %17, i64 %83
  %85 = bitcast i8* %84 to <4 x i8>*
  %86 = load <4 x i8>, <4 x i8>* %85, align 1
  %87 = getelementptr inbounds i8, i8* %84, i64 4
  %88 = bitcast i8* %87 to <4 x i8>*
  %89 = load <4 x i8>, <4 x i8>* %88, align 1
  %90 = zext <4 x i8> %86 to <4 x i32>
  %91 = zext <4 x i8> %89 to <4 x i32>
  %92 = icmp slt <4 x i32> %78, %90
  %93 = icmp slt <4 x i32> %79, %91
  %94 = select <4 x i1> %92, <4 x i32> %78, <4 x i32> %90
  %95 = select <4 x i1> %93, <4 x i32> %79, <4 x i32> %91
  %96 = trunc i64 %77 to i32
  %97 = or i32 %96, 8
  %98 = add i32 %68, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %17, i64 %99
  %101 = bitcast i8* %100 to <4 x i8>*
  %102 = load <4 x i8>, <4 x i8>* %101, align 1
  %103 = getelementptr inbounds i8, i8* %100, i64 4
  %104 = bitcast i8* %103 to <4 x i8>*
  %105 = load <4 x i8>, <4 x i8>* %104, align 1
  %106 = zext <4 x i8> %102 to <4 x i32>
  %107 = zext <4 x i8> %105 to <4 x i32>
  %108 = icmp slt <4 x i32> %94, %106
  %109 = icmp slt <4 x i32> %95, %107
  %110 = select <4 x i1> %108, <4 x i32> %94, <4 x i32> %106
  %111 = select <4 x i1> %109, <4 x i32> %95, <4 x i32> %107
  %112 = add i64 %77, 16
  %113 = add i64 %80, -2
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %76, !llvm.loop !32

115:                                              ; preds = %76, %73
  %116 = phi <4 x i32> [ undef, %73 ], [ %110, %76 ]
  %117 = phi <4 x i32> [ undef, %73 ], [ %111, %76 ]
  %118 = phi i64 [ 0, %73 ], [ %112, %76 ]
  %119 = phi <4 x i32> [ %75, %73 ], [ %110, %76 ]
  %120 = phi <4 x i32> [ %75, %73 ], [ %111, %76 ]
  br i1 %58, label %137, label %121

121:                                              ; preds = %115
  %122 = trunc i64 %118 to i32
  %123 = add i32 %68, %122
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i8, i8* %17, i64 %124
  %126 = bitcast i8* %125 to <4 x i8>*
  %127 = load <4 x i8>, <4 x i8>* %126, align 1
  %128 = getelementptr inbounds i8, i8* %125, i64 4
  %129 = bitcast i8* %128 to <4 x i8>*
  %130 = load <4 x i8>, <4 x i8>* %129, align 1
  %131 = zext <4 x i8> %127 to <4 x i32>
  %132 = zext <4 x i8> %130 to <4 x i32>
  %133 = icmp slt <4 x i32> %120, %132
  %134 = select <4 x i1> %133, <4 x i32> %120, <4 x i32> %132
  %135 = icmp slt <4 x i32> %119, %131
  %136 = select <4 x i1> %135, <4 x i32> %119, <4 x i32> %131
  br label %137

137:                                              ; preds = %115, %121
  %138 = phi <4 x i32> [ %116, %115 ], [ %136, %121 ]
  %139 = phi <4 x i32> [ %117, %115 ], [ %134, %121 ]
  %140 = icmp slt <4 x i32> %138, %139
  %141 = select <4 x i1> %140, <4 x i32> %138, <4 x i32> %139
  %142 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %143 = icmp slt <4 x i32> %141, %142
  %144 = select <4 x i1> %143, <4 x i32> %141, <4 x i32> %142
  %145 = shufflevector <4 x i32> %144, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %146 = icmp slt <4 x i32> %144, %145
  %147 = select <4 x i1> %146, <4 x i32> %144, <4 x i32> %145
  %148 = extractelement <4 x i32> %147, i32 0
  br i1 %59, label %165, label %149

149:                                              ; preds = %137, %69, %65
  %150 = phi i64 [ 0, %69 ], [ 0, %65 ], [ %54, %137 ]
  %151 = phi i32 [ %61, %69 ], [ %61, %65 ], [ %148, %137 ]
  br label %152

152:                                              ; preds = %149, %152
  %153 = phi i64 [ %163, %152 ], [ %150, %149 ]
  %154 = phi i32 [ %162, %152 ], [ %151, %149 ]
  %155 = trunc i64 %153 to i32
  %156 = add i32 %68, %155
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i8, i8* %17, i64 %157
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = icmp slt i32 %154, %160
  %162 = select i1 %161, i32 %154, i32 %160
  %163 = add nuw nsw i64 %153, 1
  %164 = icmp slt i64 %163, %44
  br i1 %164, label %152, label %165, !llvm.loop !33

165:                                              ; preds = %152, %137, %60
  %166 = phi i32 [ %61, %60 ], [ %148, %137 ], [ %162, %152 ]
  %167 = add nuw nsw i32 %62, 1
  %168 = icmp slt i32 %167, %40
  br i1 %168, label %60, label %169

169:                                              ; preds = %165, %23
  %170 = phi i32 [ 8, %23 ], [ %166, %165 ]
  %171 = trunc i32 %170 to i8
  br label %325

172:                                              ; preds = %22
  %173 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %174 = load i32, i32* %173, align 8
  %175 = zext i8 %4 to i64
  %176 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %175
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = sub nsw i32 %174, %3
  %183 = icmp slt i32 %182, %178
  %184 = select i1 %183, i32 %182, i32 %178
  %185 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %186 = load i32, i32* %185, align 16
  %187 = sub nsw i32 %186, %2
  %188 = icmp slt i32 %187, %181
  %189 = select i1 %188, i32 %187, i32 %181
  %190 = icmp sgt i32 %189, 0
  br i1 %190, label %191, label %318

191:                                              ; preds = %172
  %192 = icmp sgt i32 %184, 0
  %193 = sext i32 %184 to i64
  %194 = add nsw i64 %193, -1
  %195 = mul i32 %174, %2
  %196 = add i32 %195, %3
  %197 = add nsw i64 %193, -8
  %198 = lshr i64 %197, 3
  %199 = add nuw nsw i64 %198, 1
  %200 = icmp ult i32 %184, 8
  %201 = trunc i64 %194 to i32
  %202 = icmp ugt i64 %194, 4294967295
  %203 = and i64 %193, -8
  %204 = and i64 %199, 1
  %205 = icmp eq i64 %198, 0
  %206 = sub nuw nsw i64 %199, %204
  %207 = icmp eq i64 %204, 0
  %208 = icmp eq i64 %203, %193
  br label %209

209:                                              ; preds = %314, %191
  %210 = phi i32 [ 8, %191 ], [ %315, %314 ]
  %211 = phi i32 [ 0, %191 ], [ %316, %314 ]
  %212 = mul i32 %174, %211
  %213 = add i32 %196, %212
  br i1 %192, label %214, label %314

214:                                              ; preds = %209
  %215 = add i32 %211, %2
  %216 = mul i32 %215, %174
  %217 = add i32 %216, %3
  br i1 %200, label %298, label %218

218:                                              ; preds = %214
  %219 = add i32 %213, %201
  %220 = icmp slt i32 %219, %213
  %221 = or i1 %220, %202
  br i1 %221, label %298, label %222

222:                                              ; preds = %218
  %223 = insertelement <4 x i32> undef, i32 %210, i32 0
  %224 = shufflevector <4 x i32> %223, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %205, label %264, label %225

225:                                              ; preds = %222, %225
  %226 = phi i64 [ %261, %225 ], [ 0, %222 ]
  %227 = phi <4 x i32> [ %259, %225 ], [ %224, %222 ]
  %228 = phi <4 x i32> [ %260, %225 ], [ %224, %222 ]
  %229 = phi i64 [ %262, %225 ], [ %206, %222 ]
  %230 = trunc i64 %226 to i32
  %231 = add i32 %217, %230
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds i8, i8* %17, i64 %232
  %234 = bitcast i8* %233 to <4 x i8>*
  %235 = load <4 x i8>, <4 x i8>* %234, align 1
  %236 = getelementptr inbounds i8, i8* %233, i64 4
  %237 = bitcast i8* %236 to <4 x i8>*
  %238 = load <4 x i8>, <4 x i8>* %237, align 1
  %239 = zext <4 x i8> %235 to <4 x i32>
  %240 = zext <4 x i8> %238 to <4 x i32>
  %241 = icmp slt <4 x i32> %227, %239
  %242 = icmp slt <4 x i32> %228, %240
  %243 = select <4 x i1> %241, <4 x i32> %227, <4 x i32> %239
  %244 = select <4 x i1> %242, <4 x i32> %228, <4 x i32> %240
  %245 = trunc i64 %226 to i32
  %246 = or i32 %245, 8
  %247 = add i32 %217, %246
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds i8, i8* %17, i64 %248
  %250 = bitcast i8* %249 to <4 x i8>*
  %251 = load <4 x i8>, <4 x i8>* %250, align 1
  %252 = getelementptr inbounds i8, i8* %249, i64 4
  %253 = bitcast i8* %252 to <4 x i8>*
  %254 = load <4 x i8>, <4 x i8>* %253, align 1
  %255 = zext <4 x i8> %251 to <4 x i32>
  %256 = zext <4 x i8> %254 to <4 x i32>
  %257 = icmp slt <4 x i32> %243, %255
  %258 = icmp slt <4 x i32> %244, %256
  %259 = select <4 x i1> %257, <4 x i32> %243, <4 x i32> %255
  %260 = select <4 x i1> %258, <4 x i32> %244, <4 x i32> %256
  %261 = add i64 %226, 16
  %262 = add i64 %229, -2
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %225, !llvm.loop !34

264:                                              ; preds = %225, %222
  %265 = phi <4 x i32> [ undef, %222 ], [ %259, %225 ]
  %266 = phi <4 x i32> [ undef, %222 ], [ %260, %225 ]
  %267 = phi i64 [ 0, %222 ], [ %261, %225 ]
  %268 = phi <4 x i32> [ %224, %222 ], [ %259, %225 ]
  %269 = phi <4 x i32> [ %224, %222 ], [ %260, %225 ]
  br i1 %207, label %286, label %270

270:                                              ; preds = %264
  %271 = trunc i64 %267 to i32
  %272 = add i32 %217, %271
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds i8, i8* %17, i64 %273
  %275 = bitcast i8* %274 to <4 x i8>*
  %276 = load <4 x i8>, <4 x i8>* %275, align 1
  %277 = getelementptr inbounds i8, i8* %274, i64 4
  %278 = bitcast i8* %277 to <4 x i8>*
  %279 = load <4 x i8>, <4 x i8>* %278, align 1
  %280 = zext <4 x i8> %276 to <4 x i32>
  %281 = zext <4 x i8> %279 to <4 x i32>
  %282 = icmp slt <4 x i32> %269, %281
  %283 = select <4 x i1> %282, <4 x i32> %269, <4 x i32> %281
  %284 = icmp slt <4 x i32> %268, %280
  %285 = select <4 x i1> %284, <4 x i32> %268, <4 x i32> %280
  br label %286

286:                                              ; preds = %264, %270
  %287 = phi <4 x i32> [ %265, %264 ], [ %285, %270 ]
  %288 = phi <4 x i32> [ %266, %264 ], [ %283, %270 ]
  %289 = icmp slt <4 x i32> %287, %288
  %290 = select <4 x i1> %289, <4 x i32> %287, <4 x i32> %288
  %291 = shufflevector <4 x i32> %290, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %292 = icmp slt <4 x i32> %290, %291
  %293 = select <4 x i1> %292, <4 x i32> %290, <4 x i32> %291
  %294 = shufflevector <4 x i32> %293, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %295 = icmp slt <4 x i32> %293, %294
  %296 = select <4 x i1> %295, <4 x i32> %293, <4 x i32> %294
  %297 = extractelement <4 x i32> %296, i32 0
  br i1 %208, label %314, label %298

298:                                              ; preds = %286, %218, %214
  %299 = phi i64 [ 0, %218 ], [ 0, %214 ], [ %203, %286 ]
  %300 = phi i32 [ %210, %218 ], [ %210, %214 ], [ %297, %286 ]
  br label %301

301:                                              ; preds = %298, %301
  %302 = phi i64 [ %312, %301 ], [ %299, %298 ]
  %303 = phi i32 [ %311, %301 ], [ %300, %298 ]
  %304 = trunc i64 %302 to i32
  %305 = add i32 %217, %304
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i8, i8* %17, i64 %306
  %308 = load i8, i8* %307, align 1
  %309 = zext i8 %308 to i32
  %310 = icmp slt i32 %303, %309
  %311 = select i1 %310, i32 %303, i32 %309
  %312 = add nuw nsw i64 %302, 1
  %313 = icmp slt i64 %312, %193
  br i1 %313, label %301, label %314, !llvm.loop !35

314:                                              ; preds = %301, %286, %209
  %315 = phi i32 [ %210, %209 ], [ %297, %286 ], [ %311, %301 ]
  %316 = add nuw nsw i32 %211, 1
  %317 = icmp slt i32 %316, %189
  br i1 %317, label %209, label %318

318:                                              ; preds = %314, %172
  %319 = phi i32 [ 8, %172 ], [ %315, %314 ]
  %320 = trunc i32 %319 to i8
  br label %325

321:                                              ; preds = %22
  %322 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %323 = load i32, i32* %322, align 4
  %324 = trunc i32 %323 to i8
  br label %325

325:                                              ; preds = %22, %169, %318, %321
  %326 = phi i8 [ %324, %321 ], [ %320, %318 ], [ %171, %169 ], [ 0, %22 ]
  store i8 %326, i8* %18, align 4
  br label %327

327:                                              ; preds = %325, %22
  %328 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 160, i32 0
  %329 = load i8, i8* %328, align 16
  %330 = icmp eq i8 %329, 0
  br i1 %330, label %480, label %331

331:                                              ; preds = %327
  %332 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %333 = load i32, i32* %332, align 8
  %334 = zext i8 %4 to i64
  %335 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %334
  %336 = load i8, i8* %335, align 1
  %337 = zext i8 %336 to i32
  %338 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %334
  %339 = load i8, i8* %338, align 1
  %340 = zext i8 %339 to i32
  %341 = sub nsw i32 %333, %3
  %342 = icmp slt i32 %341, %337
  %343 = select i1 %342, i32 %341, i32 %337
  %344 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %345 = load i32, i32* %344, align 16
  %346 = sub nsw i32 %345, %2
  %347 = icmp slt i32 %346, %340
  %348 = select i1 %347, i32 %346, i32 %340
  %349 = icmp sgt i32 %348, 0
  br i1 %349, label %350, label %477

350:                                              ; preds = %331
  %351 = icmp sgt i32 %343, 0
  %352 = sext i32 %343 to i64
  %353 = add nsw i64 %352, -1
  %354 = mul i32 %333, %2
  %355 = add i32 %354, %3
  %356 = add nsw i64 %352, -8
  %357 = lshr i64 %356, 3
  %358 = add nuw nsw i64 %357, 1
  %359 = icmp ult i32 %343, 8
  %360 = trunc i64 %353 to i32
  %361 = icmp ugt i64 %353, 4294967295
  %362 = and i64 %352, -8
  %363 = and i64 %358, 1
  %364 = icmp eq i64 %357, 0
  %365 = sub nuw nsw i64 %358, %363
  %366 = icmp eq i64 %363, 0
  %367 = icmp eq i64 %362, %352
  br label %368

368:                                              ; preds = %473, %350
  %369 = phi i32 [ 8, %350 ], [ %474, %473 ]
  %370 = phi i32 [ 0, %350 ], [ %475, %473 ]
  %371 = mul i32 %333, %370
  %372 = add i32 %355, %371
  br i1 %351, label %373, label %473

373:                                              ; preds = %368
  %374 = add i32 %370, %2
  %375 = mul i32 %374, %333
  %376 = add i32 %375, %3
  br i1 %359, label %457, label %377

377:                                              ; preds = %373
  %378 = add i32 %372, %360
  %379 = icmp slt i32 %378, %372
  %380 = or i1 %379, %361
  br i1 %380, label %457, label %381

381:                                              ; preds = %377
  %382 = insertelement <4 x i32> undef, i32 %369, i32 0
  %383 = shufflevector <4 x i32> %382, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %364, label %423, label %384

384:                                              ; preds = %381, %384
  %385 = phi i64 [ %420, %384 ], [ 0, %381 ]
  %386 = phi <4 x i32> [ %418, %384 ], [ %383, %381 ]
  %387 = phi <4 x i32> [ %419, %384 ], [ %383, %381 ]
  %388 = phi i64 [ %421, %384 ], [ %365, %381 ]
  %389 = trunc i64 %385 to i32
  %390 = add i32 %376, %389
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i8, i8* %17, i64 %391
  %393 = bitcast i8* %392 to <4 x i8>*
  %394 = load <4 x i8>, <4 x i8>* %393, align 1
  %395 = getelementptr inbounds i8, i8* %392, i64 4
  %396 = bitcast i8* %395 to <4 x i8>*
  %397 = load <4 x i8>, <4 x i8>* %396, align 1
  %398 = zext <4 x i8> %394 to <4 x i32>
  %399 = zext <4 x i8> %397 to <4 x i32>
  %400 = icmp slt <4 x i32> %386, %398
  %401 = icmp slt <4 x i32> %387, %399
  %402 = select <4 x i1> %400, <4 x i32> %386, <4 x i32> %398
  %403 = select <4 x i1> %401, <4 x i32> %387, <4 x i32> %399
  %404 = trunc i64 %385 to i32
  %405 = or i32 %404, 8
  %406 = add i32 %376, %405
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds i8, i8* %17, i64 %407
  %409 = bitcast i8* %408 to <4 x i8>*
  %410 = load <4 x i8>, <4 x i8>* %409, align 1
  %411 = getelementptr inbounds i8, i8* %408, i64 4
  %412 = bitcast i8* %411 to <4 x i8>*
  %413 = load <4 x i8>, <4 x i8>* %412, align 1
  %414 = zext <4 x i8> %410 to <4 x i32>
  %415 = zext <4 x i8> %413 to <4 x i32>
  %416 = icmp slt <4 x i32> %402, %414
  %417 = icmp slt <4 x i32> %403, %415
  %418 = select <4 x i1> %416, <4 x i32> %402, <4 x i32> %414
  %419 = select <4 x i1> %417, <4 x i32> %403, <4 x i32> %415
  %420 = add i64 %385, 16
  %421 = add i64 %388, -2
  %422 = icmp eq i64 %421, 0
  br i1 %422, label %423, label %384, !llvm.loop !36

423:                                              ; preds = %384, %381
  %424 = phi <4 x i32> [ undef, %381 ], [ %418, %384 ]
  %425 = phi <4 x i32> [ undef, %381 ], [ %419, %384 ]
  %426 = phi i64 [ 0, %381 ], [ %420, %384 ]
  %427 = phi <4 x i32> [ %383, %381 ], [ %418, %384 ]
  %428 = phi <4 x i32> [ %383, %381 ], [ %419, %384 ]
  br i1 %366, label %445, label %429

429:                                              ; preds = %423
  %430 = trunc i64 %426 to i32
  %431 = add i32 %376, %430
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i8, i8* %17, i64 %432
  %434 = bitcast i8* %433 to <4 x i8>*
  %435 = load <4 x i8>, <4 x i8>* %434, align 1
  %436 = getelementptr inbounds i8, i8* %433, i64 4
  %437 = bitcast i8* %436 to <4 x i8>*
  %438 = load <4 x i8>, <4 x i8>* %437, align 1
  %439 = zext <4 x i8> %435 to <4 x i32>
  %440 = zext <4 x i8> %438 to <4 x i32>
  %441 = icmp slt <4 x i32> %428, %440
  %442 = select <4 x i1> %441, <4 x i32> %428, <4 x i32> %440
  %443 = icmp slt <4 x i32> %427, %439
  %444 = select <4 x i1> %443, <4 x i32> %427, <4 x i32> %439
  br label %445

445:                                              ; preds = %423, %429
  %446 = phi <4 x i32> [ %424, %423 ], [ %444, %429 ]
  %447 = phi <4 x i32> [ %425, %423 ], [ %442, %429 ]
  %448 = icmp slt <4 x i32> %446, %447
  %449 = select <4 x i1> %448, <4 x i32> %446, <4 x i32> %447
  %450 = shufflevector <4 x i32> %449, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %451 = icmp slt <4 x i32> %449, %450
  %452 = select <4 x i1> %451, <4 x i32> %449, <4 x i32> %450
  %453 = shufflevector <4 x i32> %452, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %454 = icmp slt <4 x i32> %452, %453
  %455 = select <4 x i1> %454, <4 x i32> %452, <4 x i32> %453
  %456 = extractelement <4 x i32> %455, i32 0
  br i1 %367, label %473, label %457

457:                                              ; preds = %445, %377, %373
  %458 = phi i64 [ 0, %377 ], [ 0, %373 ], [ %362, %445 ]
  %459 = phi i32 [ %369, %377 ], [ %369, %373 ], [ %456, %445 ]
  br label %460

460:                                              ; preds = %457, %460
  %461 = phi i64 [ %471, %460 ], [ %458, %457 ]
  %462 = phi i32 [ %470, %460 ], [ %459, %457 ]
  %463 = trunc i64 %461 to i32
  %464 = add i32 %376, %463
  %465 = sext i32 %464 to i64
  %466 = getelementptr inbounds i8, i8* %17, i64 %465
  %467 = load i8, i8* %466, align 1
  %468 = zext i8 %467 to i32
  %469 = icmp slt i32 %462, %468
  %470 = select i1 %469, i32 %462, i32 %468
  %471 = add nuw nsw i64 %461, 1
  %472 = icmp slt i64 %471, %352
  br i1 %472, label %460, label %473, !llvm.loop !37

473:                                              ; preds = %460, %445, %368
  %474 = phi i32 [ %369, %368 ], [ %456, %445 ], [ %470, %460 ]
  %475 = add nuw nsw i32 %370, 1
  %476 = icmp slt i32 %475, %348
  br i1 %476, label %368, label %477

477:                                              ; preds = %473, %331
  %478 = phi i32 [ 8, %331 ], [ %474, %473 ]
  %479 = trunc i32 %478 to i8
  store i8 %479, i8* %18, align 4
  br label %480

480:                                              ; preds = %327, %477
  tail call void @vp9_init_plane_quantizers(%struct.VP9_COMP* %0, %struct.macroblock* %1) #8
  br label %481

481:                                              ; preds = %5, %480
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc i32 @scale_partitioning_svc(%struct.VP9_COMP* readonly, %struct.macroblock*, %struct.macroblockd*, i8 zeroext, i32, i32, i32, i32) unnamed_addr #5 {
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 28
  %10 = load i8*, i8** %9, align 8
  %11 = zext i8 %3 to i64
  %12 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = shl i32 1, %14
  %16 = ashr i32 %15, 2
  %17 = add nsw i32 %16, %6
  %18 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %19 = load i32, i32* %18, align 16
  %20 = icmp slt i32 %17, %19
  %21 = add nsw i32 %16, %7
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %23 = load i32, i32* %22, align 8
  %24 = icmp slt i32 %21, %23
  %25 = icmp sgt i32 %19, %6
  %26 = icmp sgt i32 %23, %7
  %27 = and i1 %25, %26
  br i1 %27, label %28, label %259

28:                                               ; preds = %8
  %29 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = add nsw i32 %30, -1
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 30, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = icmp sgt i32 %34, %4
  br i1 %35, label %36, label %259

36:                                               ; preds = %28
  %37 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 31, i64 %32
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %38, %5
  br i1 %39, label %40, label %259

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 29, i64 %32
  %42 = load i32, i32* %41, align 4
  %43 = mul nsw i32 %42, %4
  %44 = add nsw i32 %43, %5
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %10, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = and i1 %20, %24
  %49 = xor i1 %48, true
  %50 = icmp ugt i8 %47, 6
  %51 = and i1 %50, %49
  br i1 %51, label %259, label %52

52:                                               ; preds = %40
  %53 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 23
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %62

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 52
  %58 = load i8, i8* %57, align 1
  %59 = icmp eq i8 %58, 0
  %60 = icmp ult i8 %47, 9
  %61 = and i1 %60, %59
  br i1 %61, label %259, label %62

62:                                               ; preds = %56, %52
  %63 = zext i8 %47 to i32
  %64 = icmp ult i8 %47, 9
  %65 = add nuw nsw i32 %63, 3
  %66 = select i1 %64, i32 %65, i32 12
  %67 = xor i1 %24, true
  %68 = and i1 %20, %67
  br i1 %68, label %69, label %74

69:                                               ; preds = %62
  %70 = zext i8 %47 to i64
  %71 = getelementptr inbounds [13 x i32], [13 x i32]* @scale_partitioning_svc.row_boundary_block_scale_factor, i64 0, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = add nsw i32 %72, %63
  br label %84

74:                                               ; preds = %62
  %75 = or i1 %20, %67
  br i1 %75, label %81, label %76

76:                                               ; preds = %74
  %77 = zext i8 %47 to i64
  %78 = getelementptr inbounds [13 x i32], [13 x i32]* @scale_partitioning_svc.col_boundary_block_scale_factor, i64 0, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = add nsw i32 %79, %63
  br label %84

81:                                               ; preds = %74
  %82 = or i1 %24, %20
  %83 = select i1 %82, i32 %66, i32 %63
  br label %84

84:                                               ; preds = %81, %76, %69
  %85 = phi i32 [ %73, %69 ], [ %80, %76 ], [ %83, %81 ]
  %86 = zext i8 %13 to i64
  %87 = sext i32 %85 to i64
  %88 = getelementptr inbounds [0 x [13 x i32]], [0 x [13 x i32]]* @partition_lookup, i64 0, i64 %86, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 %90, i64 %11
  %92 = load i8, i8* %91, align 1
  %93 = icmp ult i8 %92, 3
  br i1 %93, label %94, label %119

94:                                               ; preds = %84
  %95 = trunc i32 %85 to i8
  %96 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 5
  %97 = load i32, i32* %96, align 8
  %98 = mul nsw i32 %97, %6
  %99 = add nsw i32 %98, %7
  %100 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %101 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %100, align 8
  %102 = sext i32 %99 to i64
  %103 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %101, i64 %102
  %104 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MODE_INFO** %103, %struct.MODE_INFO*** %104, align 8
  %105 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %106 = load %struct.MODE_INFO*, %struct.MODE_INFO** %105, align 16
  %107 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %106, i64 %102
  store %struct.MODE_INFO* %107, %struct.MODE_INFO** %103, align 8
  %108 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %109 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %108, align 8
  %110 = load i32, i32* %22, align 8
  %111 = mul nsw i32 %110, %6
  %112 = add nsw i32 %111, %7
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %109, i64 %113
  %115 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %114, %struct.MB_MODE_INFO_EXT** %115, align 16
  %116 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %104, align 8
  %117 = load %struct.MODE_INFO*, %struct.MODE_INFO** %116, align 8
  %118 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %117, i64 0, i32 0
  store i8 %95, i8* %118, align 4
  br label %259

119:                                              ; preds = %84
  switch i32 %89, label %243 [
    i32 0, label %120
    i32 1, label %145
    i32 2, label %194
  ]

120:                                              ; preds = %119
  %121 = trunc i32 %85 to i8
  %122 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 5
  %123 = load i32, i32* %122, align 8
  %124 = mul nsw i32 %123, %6
  %125 = add nsw i32 %124, %7
  %126 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %127 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %126, align 8
  %128 = sext i32 %125 to i64
  %129 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %127, i64 %128
  %130 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MODE_INFO** %129, %struct.MODE_INFO*** %130, align 8
  %131 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %132 = load %struct.MODE_INFO*, %struct.MODE_INFO** %131, align 16
  %133 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %132, i64 %128
  store %struct.MODE_INFO* %133, %struct.MODE_INFO** %129, align 8
  %134 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %135 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %134, align 8
  %136 = load i32, i32* %22, align 8
  %137 = mul nsw i32 %136, %6
  %138 = add nsw i32 %137, %7
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %135, i64 %139
  %141 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %140, %struct.MB_MODE_INFO_EXT** %141, align 16
  %142 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %130, align 8
  %143 = load %struct.MODE_INFO*, %struct.MODE_INFO** %142, align 8
  %144 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %143, i64 0, i32 0
  store i8 %121, i8* %144, align 4
  br label %258

145:                                              ; preds = %119
  %146 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 5
  %147 = load i32, i32* %146, align 8
  %148 = mul nsw i32 %147, %6
  %149 = add nsw i32 %148, %7
  %150 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %151 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %150, align 8
  %152 = sext i32 %149 to i64
  %153 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %151, i64 %152
  %154 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MODE_INFO** %153, %struct.MODE_INFO*** %154, align 8
  %155 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %156 = load %struct.MODE_INFO*, %struct.MODE_INFO** %155, align 16
  %157 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %156, i64 %152
  store %struct.MODE_INFO* %157, %struct.MODE_INFO** %153, align 8
  %158 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %159 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %158, align 8
  %160 = load i32, i32* %22, align 8
  %161 = mul nsw i32 %160, %6
  %162 = add nsw i32 %161, %7
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %159, i64 %163
  %165 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %164, %struct.MB_MODE_INFO_EXT** %165, align 16
  %166 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %154, align 8
  %167 = load %struct.MODE_INFO*, %struct.MODE_INFO** %166, align 8
  %168 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %167, i64 0, i32 0
  store i8 %92, i8* %168, align 4
  %169 = icmp ult i8 %92, 12
  br i1 %169, label %170, label %258

170:                                              ; preds = %145
  %171 = load i32, i32* %22, align 8
  %172 = icmp sgt i32 %171, %7
  br i1 %172, label %173, label %258

173:                                              ; preds = %170
  %174 = load i32, i32* %18, align 16
  %175 = icmp sgt i32 %174, %17
  br i1 %175, label %176, label %258

176:                                              ; preds = %173
  %177 = load i32, i32* %146, align 8
  %178 = mul nsw i32 %177, %17
  %179 = add nsw i32 %178, %7
  %180 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %150, align 8
  %181 = sext i32 %179 to i64
  %182 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %180, i64 %181
  store %struct.MODE_INFO** %182, %struct.MODE_INFO*** %154, align 8
  %183 = load %struct.MODE_INFO*, %struct.MODE_INFO** %155, align 16
  %184 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %183, i64 %181
  store %struct.MODE_INFO* %184, %struct.MODE_INFO** %182, align 8
  %185 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %158, align 8
  %186 = load i32, i32* %22, align 8
  %187 = mul nsw i32 %186, %17
  %188 = add nsw i32 %187, %7
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %185, i64 %189
  store %struct.MB_MODE_INFO_EXT* %190, %struct.MB_MODE_INFO_EXT** %165, align 16
  %191 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %154, align 8
  %192 = load %struct.MODE_INFO*, %struct.MODE_INFO** %191, align 8
  %193 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %192, i64 0, i32 0
  store i8 %92, i8* %193, align 4
  br label %258

194:                                              ; preds = %119
  %195 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 5
  %196 = load i32, i32* %195, align 8
  %197 = mul nsw i32 %196, %6
  %198 = add nsw i32 %197, %7
  %199 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %200 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %199, align 8
  %201 = sext i32 %198 to i64
  %202 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %200, i64 %201
  %203 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MODE_INFO** %202, %struct.MODE_INFO*** %203, align 8
  %204 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %205 = load %struct.MODE_INFO*, %struct.MODE_INFO** %204, align 16
  %206 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %205, i64 %201
  store %struct.MODE_INFO* %206, %struct.MODE_INFO** %202, align 8
  %207 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %208 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %207, align 8
  %209 = load i32, i32* %22, align 8
  %210 = mul nsw i32 %209, %6
  %211 = add nsw i32 %210, %7
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %208, i64 %212
  %214 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %213, %struct.MB_MODE_INFO_EXT** %214, align 16
  %215 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %203, align 8
  %216 = load %struct.MODE_INFO*, %struct.MODE_INFO** %215, align 8
  %217 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %216, i64 0, i32 0
  store i8 %92, i8* %217, align 4
  %218 = icmp ult i8 %92, 12
  br i1 %218, label %219, label %258

219:                                              ; preds = %194
  %220 = load i32, i32* %22, align 8
  %221 = icmp sgt i32 %220, %21
  br i1 %221, label %222, label %258

222:                                              ; preds = %219
  %223 = load i32, i32* %18, align 16
  %224 = icmp sgt i32 %223, %6
  br i1 %224, label %225, label %258

225:                                              ; preds = %222
  %226 = load i32, i32* %195, align 8
  %227 = mul nsw i32 %226, %6
  %228 = add nsw i32 %227, %21
  %229 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %199, align 8
  %230 = sext i32 %228 to i64
  %231 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %229, i64 %230
  store %struct.MODE_INFO** %231, %struct.MODE_INFO*** %203, align 8
  %232 = load %struct.MODE_INFO*, %struct.MODE_INFO** %204, align 16
  %233 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %232, i64 %230
  store %struct.MODE_INFO* %233, %struct.MODE_INFO** %231, align 8
  %234 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %207, align 8
  %235 = load i32, i32* %22, align 8
  %236 = mul nsw i32 %235, %6
  %237 = add nsw i32 %236, %21
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %234, i64 %238
  store %struct.MB_MODE_INFO_EXT* %239, %struct.MB_MODE_INFO_EXT** %214, align 16
  %240 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %203, align 8
  %241 = load %struct.MODE_INFO*, %struct.MODE_INFO** %240, align 8
  %242 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %241, i64 0, i32 0
  store i8 %92, i8* %242, align 4
  br label %258

243:                                              ; preds = %119
  %244 = tail call fastcc i32 @scale_partitioning_svc(%struct.VP9_COMP* %0, %struct.macroblock* %1, %struct.macroblockd* %2, i8 zeroext %92, i32 %4, i32 %5, i32 %6, i32 %7)
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %259

246:                                              ; preds = %243
  %247 = ashr i32 %15, 3
  %248 = add nsw i32 %247, %4
  %249 = tail call fastcc i32 @scale_partitioning_svc(%struct.VP9_COMP* %0, %struct.macroblock* %1, %struct.macroblockd* %2, i8 zeroext %92, i32 %248, i32 %5, i32 %17, i32 %7)
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %251, label %259

251:                                              ; preds = %246
  %252 = add nsw i32 %247, %5
  %253 = tail call fastcc i32 @scale_partitioning_svc(%struct.VP9_COMP* %0, %struct.macroblock* %1, %struct.macroblockd* %2, i8 zeroext %92, i32 %4, i32 %252, i32 %6, i32 %21)
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %255, label %259

255:                                              ; preds = %251
  %256 = tail call fastcc i32 @scale_partitioning_svc(%struct.VP9_COMP* %0, %struct.macroblock* %1, %struct.macroblockd* %2, i8 zeroext %92, i32 %248, i32 %252, i32 %17, i32 %21)
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %258, label %259

258:                                              ; preds = %225, %222, %219, %176, %173, %170, %120, %145, %194, %255
  br label %259

259:                                              ; preds = %94, %258, %243, %246, %251, %255, %56, %40, %28, %36, %8
  %260 = phi i32 [ 0, %8 ], [ 0, %36 ], [ 0, %28 ], [ 1, %40 ], [ 1, %56 ], [ 1, %255 ], [ 1, %251 ], [ 1, %246 ], [ 1, %243 ], [ 0, %258 ], [ 0, %94 ]
  ret i32 %260
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @update_partition_svc(%struct.VP9_COMP* readonly, i8 zeroext, i32, i32) unnamed_addr #5 {
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 28
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 36
  %7 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %8 = load i32, i32* %7, align 16
  %9 = icmp sgt i32 %8, %2
  br i1 %9, label %10, label %90

10:                                               ; preds = %4
  %11 = load i32, i32* %6, align 4
  %12 = mul nsw i32 %11, %2
  %13 = add nsw i32 %12, %3
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %15 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  br label %16

16:                                               ; preds = %10, %82
  %17 = phi i8 [ %1, %10 ], [ %43, %82 ]
  %18 = phi i32 [ %13, %10 ], [ %87, %82 ]
  %19 = phi i32 [ %3, %10 ], [ %84, %82 ]
  %20 = phi i32 [ %2, %10 ], [ %83, %82 ]
  %21 = zext i8 %17 to i64
  %22 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = shl i32 1, %24
  %26 = load i8*, i8** %5, align 8
  %27 = ashr i32 %25, 2
  %28 = load i32, i32* %14, align 8
  %29 = icmp sgt i32 %28, %19
  br i1 %29, label %30, label %90

30:                                               ; preds = %16
  %31 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %15, align 8
  %32 = sext i32 %18 to i64
  %33 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %31, i64 %32
  %34 = load %struct.MODE_INFO*, %struct.MODE_INFO** %33, align 8
  %35 = zext i8 %23 to i64
  %36 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %34, i64 0, i32 0
  %37 = load i8, i8* %36, align 4
  %38 = zext i8 %37 to i64
  %39 = getelementptr inbounds [0 x [13 x i32]], [0 x [13 x i32]]* @partition_lookup, i64 0, i64 %35, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 %41, i64 %21
  %43 = load i8, i8* %42, align 1
  %44 = icmp ult i8 %43, 3
  br i1 %44, label %45, label %47

45:                                               ; preds = %30
  %46 = getelementptr inbounds i8, i8* %26, i64 %32
  store i8 %17, i8* %46, align 1
  br label %90

47:                                               ; preds = %30
  switch i32 %40, label %82 [
    i32 0, label %48
    i32 1, label %62
    i32 2, label %73
  ]

48:                                               ; preds = %47
  %49 = getelementptr inbounds i8, i8* %26, i64 %32
  store i8 %17, i8* %49, align 1
  %50 = icmp eq i8 %17, 12
  br i1 %50, label %51, label %90

51:                                               ; preds = %48
  %52 = load i32, i32* %7, align 16
  %53 = icmp slt i32 %20, %52
  br i1 %53, label %54, label %59

54:                                               ; preds = %51
  %55 = load i32, i32* %14, align 8
  %56 = icmp slt i32 %19, %55
  br i1 %56, label %57, label %59

57:                                               ; preds = %54
  store i8 12, i8* %49, align 1
  %58 = load i32, i32* %7, align 16
  br label %59

59:                                               ; preds = %51, %54, %57
  %60 = phi i32 [ %52, %51 ], [ %52, %54 ], [ %58, %57 ]
  %61 = icmp slt i32 %20, %60
  br i1 %61, label %91, label %100

62:                                               ; preds = %47
  %63 = getelementptr inbounds i8, i8* %26, i64 %32
  store i8 %43, i8* %63, align 1
  %64 = add nsw i32 %27, %20
  %65 = load i32, i32* %7, align 16
  %66 = icmp slt i32 %64, %65
  br i1 %66, label %67, label %90

67:                                               ; preds = %62
  %68 = load i32, i32* %6, align 4
  %69 = mul nsw i32 %68, %27
  %70 = add nsw i32 %69, %18
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %26, i64 %71
  store i8 %43, i8* %72, align 1
  br label %90

73:                                               ; preds = %47
  %74 = getelementptr inbounds i8, i8* %26, i64 %32
  store i8 %43, i8* %74, align 1
  %75 = add nsw i32 %27, %19
  %76 = load i32, i32* %14, align 8
  %77 = icmp slt i32 %75, %76
  br i1 %77, label %78, label %90

78:                                               ; preds = %73
  %79 = add nsw i32 %27, %18
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %26, i64 %80
  store i8 %43, i8* %81, align 1
  br label %90

82:                                               ; preds = %47
  tail call fastcc void @update_partition_svc(%struct.VP9_COMP* %0, i8 zeroext %43, i32 %20, i32 %19)
  %83 = add nsw i32 %27, %20
  tail call fastcc void @update_partition_svc(%struct.VP9_COMP* %0, i8 zeroext %43, i32 %83, i32 %19)
  %84 = add nsw i32 %27, %19
  tail call fastcc void @update_partition_svc(%struct.VP9_COMP* %0, i8 zeroext %43, i32 %20, i32 %84)
  %85 = load i32, i32* %6, align 4
  %86 = mul nsw i32 %85, %83
  %87 = add nsw i32 %86, %84
  %88 = load i32, i32* %7, align 16
  %89 = icmp sgt i32 %88, %83
  br i1 %89, label %16, label %90

90:                                               ; preds = %16, %82, %114, %117, %121, %4, %45, %73, %78, %62, %67, %48
  ret void

91:                                               ; preds = %59
  %92 = add nsw i32 %19, 4
  %93 = load i32, i32* %14, align 8
  %94 = icmp slt i32 %92, %93
  br i1 %94, label %95, label %100

95:                                               ; preds = %91
  %96 = add i32 %18, 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %26, i64 %97
  store i8 12, i8* %98, align 1
  %99 = load i32, i32* %7, align 16
  br label %100

100:                                              ; preds = %95, %91, %59
  %101 = phi i32 [ %99, %95 ], [ %60, %91 ], [ %60, %59 ]
  %102 = add nsw i32 %20, 4
  %103 = icmp slt i32 %102, %101
  br i1 %103, label %104, label %114

104:                                              ; preds = %100
  %105 = load i32, i32* %14, align 8
  %106 = icmp slt i32 %19, %105
  br i1 %106, label %107, label %114

107:                                              ; preds = %104
  %108 = load i32, i32* %6, align 4
  %109 = shl nsw i32 %108, 2
  %110 = add i32 %18, %109
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %26, i64 %111
  store i8 12, i8* %112, align 1
  %113 = load i32, i32* %7, align 16
  br label %114

114:                                              ; preds = %107, %104, %100
  %115 = phi i32 [ %113, %107 ], [ %101, %104 ], [ %101, %100 ]
  %116 = icmp slt i32 %102, %115
  br i1 %116, label %117, label %90

117:                                              ; preds = %114
  %118 = add nsw i32 %19, 4
  %119 = load i32, i32* %14, align 8
  %120 = icmp slt i32 %118, %119
  br i1 %120, label %121, label %90

121:                                              ; preds = %117
  %122 = load i32, i32* %6, align 4
  %123 = shl nsw i32 %122, 2
  %124 = add i32 %18, 4
  %125 = add i32 %124, %123
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i8, i8* %26, i64 %126
  store i8 12, i8* %127, align 1
  br label %90
}

declare i32 @vp9_get_qindex(%struct.segmentation*, i32, i32) local_unnamed_addr #2

declare void @vp9_setup_pre_planes(%struct.macroblockd*, i32, %struct.yv12_buffer_config*, i32, i32, %struct.scale_factors*) local_unnamed_addr #2

declare i32 @vp9_int_pro_motion_estimation(%struct.VP9_COMP*, %struct.macroblock*, i8 zeroext, i32, i32, %struct.mv*) local_unnamed_addr #2

declare void @vp9_build_inter_predictors_sb(%struct.macroblockd*, i32, i32, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @chroma_check(%struct.VP9_COMP*, %struct.macroblock* nocapture, i32, i32, i32, i32) unnamed_addr #0 {
  %7 = icmp eq i32 %4, 0
  br i1 %7, label %8, label %71

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 11
  %10 = load i32, i32* %9, align 8
  %11 = icmp sgt i32 %10, 8
  br i1 %11, label %12, label %25

12:                                               ; preds = %8
  %13 = zext i32 %3 to i64
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 130, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp slt i64 %15, %13
  br i1 %16, label %17, label %25

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128
  %19 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %18, i64 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %71, label %22

22:                                               ; preds = %17
  %23 = tail call i32 @vp9_noise_estimate_extract_level(%struct.noise_estimate* %18) #8
  %24 = icmp ult i32 %23, 2
  br i1 %24, label %71, label %25

25:                                               ; preds = %12, %22, %8
  %26 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 62
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 1
  %29 = icmp ne i32 %5, 0
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 5, i32 2
  %32 = and i32 %2, 255
  %33 = zext i32 %32 to i64
  %34 = lshr i32 %3, %31
  %35 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 1
  %36 = load i32, i32* %35, align 8
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [13 x [2 x [2 x i8]]], [13 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %33, i64 %37, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 13
  br i1 %43, label %57, label %44

44:                                               ; preds = %25
  %45 = zext i8 %42 to i64
  %46 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %45, i32 0
  %47 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %46, align 8
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 4, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 4, i32 1
  %51 = load i32, i32* %50, align 8
  %52 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 3, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 3, i32 1
  %55 = load i32, i32* %54, align 8
  %56 = tail call i32 %47(i8* %49, i32 %51, i8* %53, i32 %55) #8
  br label %57

57:                                               ; preds = %25, %44
  %58 = phi i32 [ %56, %44 ], [ -1, %25 ]
  %59 = icmp ugt i32 %58, %34
  %60 = zext i1 %59 to i8
  %61 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 50, i64 0
  store i8 %60, i8* %61, align 1
  %62 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 1
  %63 = load i32, i32* %62, align 8
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 2
  %66 = load i32, i32* %65, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [13 x [2 x [2 x i8]]], [13 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %33, i64 %64, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = icmp eq i8 %69, 13
  br i1 %70, label %85, label %72

71:                                               ; preds = %85, %22, %17, %6
  ret void

72:                                               ; preds = %57
  %73 = zext i8 %69 to i64
  %74 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %73, i32 0
  %75 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %74, align 8
  %76 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 4, i32 0
  %77 = load i8*, i8** %76, align 8
  %78 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 4, i32 1
  %79 = load i32, i32* %78, align 8
  %80 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 3, i32 0
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 3, i32 1
  %83 = load i32, i32* %82, align 8
  %84 = tail call i32 %75(i8* %77, i32 %79, i8* %81, i32 %83) #8
  br label %85

85:                                               ; preds = %72, %57
  %86 = phi i32 [ %84, %72 ], [ -1, %57 ]
  %87 = icmp ugt i32 %86, %34
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 50, i64 1
  store i8 %88, i8* %89, align 1
  br label %71
}

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @set_vt_partitioning(%struct.VP9_COMP* readonly, %struct.macroblock* nocapture, %struct.macroblockd* nocapture, i8*, i8 zeroext, i32, i32, i64, i8 zeroext, i32) unnamed_addr #0 {
  %11 = zext i8 %4 to i64
  %12 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %11
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = icmp eq i32 %9, 1
  br i1 %18, label %433, label %19

19:                                               ; preds = %10
  %20 = icmp eq i8 %4, %8
  br i1 %20, label %21, label %94

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %27 = load i8, i8* %26, align 4
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %48, label %29

29:                                               ; preds = %21, %25
  %30 = bitcast i8* %3 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds i8, i8* %3, i64 4
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 4
  %35 = sext i32 %34 to i64
  %36 = mul nsw i64 %35, %35
  %37 = getelementptr inbounds i8, i8* %3, i64 8
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i64
  %41 = lshr i64 %36, %40
  %42 = trunc i64 %41 to i32
  %43 = sub i32 %31, %42
  %44 = shl i32 %43, 8
  %45 = lshr i32 %44, %39
  %46 = getelementptr inbounds i8, i8* %3, i64 12
  %47 = bitcast i8* %46 to i32*
  store i32 %45, i32* %47, align 4
  br label %48

48:                                               ; preds = %25, %29
  %49 = lshr i32 %14, 1
  %50 = add nsw i32 %49, %6
  %51 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %52 = load i32, i32* %51, align 8
  %53 = icmp slt i32 %50, %52
  br i1 %53, label %54, label %433

54:                                               ; preds = %48
  %55 = lshr i32 %17, 1
  %56 = add nsw i32 %55, %5
  %57 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %58 = load i32, i32* %57, align 16
  %59 = icmp slt i32 %56, %58
  br i1 %59, label %60, label %433

60:                                               ; preds = %54
  %61 = getelementptr inbounds i8, i8* %3, i64 12
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = sext i32 %63 to i64
  %65 = icmp slt i64 %64, %7
  br i1 %65, label %66, label %433

66:                                               ; preds = %60
  %67 = icmp sgt i32 %52, %6
  %68 = icmp sgt i32 %58, %5
  %69 = and i1 %67, %68
  br i1 %69, label %70, label %433

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 5
  %72 = load i32, i32* %71, align 8
  %73 = mul nsw i32 %72, %5
  %74 = add nsw i32 %73, %6
  %75 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %76 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %75, align 8
  %77 = sext i32 %74 to i64
  %78 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %76, i64 %77
  %79 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MODE_INFO** %78, %struct.MODE_INFO*** %79, align 8
  %80 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %81 = load %struct.MODE_INFO*, %struct.MODE_INFO** %80, align 16
  %82 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %81, i64 %77
  store %struct.MODE_INFO* %82, %struct.MODE_INFO** %78, align 8
  %83 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %84 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %83, align 8
  %85 = load i32, i32* %51, align 8
  %86 = mul nsw i32 %85, %5
  %87 = add nsw i32 %86, %6
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %84, i64 %88
  %90 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %89, %struct.MB_MODE_INFO_EXT** %90, align 16
  %91 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %79, align 8
  %92 = load %struct.MODE_INFO*, %struct.MODE_INFO** %91, align 8
  %93 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %92, i64 0, i32 0
  store i8 %4, i8* %93, align 4
  br label %433

94:                                               ; preds = %19
  %95 = icmp ugt i8 %4, %8
  br i1 %95, label %96, label %433

96:                                               ; preds = %94
  %97 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %98 = load i32, i32* %97, align 4
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %104, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %102 = load i8, i8* %101, align 4
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %125, label %104

104:                                              ; preds = %100, %96
  %105 = bitcast i8* %3 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds i8, i8* %3, i64 4
  %108 = bitcast i8* %107 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = sext i32 %109 to i64
  %111 = mul nsw i64 %110, %110
  %112 = getelementptr inbounds i8, i8* %3, i64 8
  %113 = bitcast i8* %112 to i32*
  %114 = load i32, i32* %113, align 4
  %115 = zext i32 %114 to i64
  %116 = lshr i64 %111, %115
  %117 = trunc i64 %116 to i32
  %118 = sub i32 %106, %117
  %119 = shl i32 %118, 8
  %120 = lshr i32 %119, %114
  %121 = getelementptr inbounds i8, i8* %3, i64 12
  %122 = bitcast i8* %121 to i32*
  store i32 %120, i32* %122, align 4
  %123 = load i32, i32* %97, align 4
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %129, label %125

125:                                              ; preds = %100, %104
  %126 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %127 = load i8, i8* %126, align 4
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %138, label %129

129:                                              ; preds = %104, %125
  %130 = icmp ugt i8 %4, 9
  br i1 %130, label %433, label %131

131:                                              ; preds = %129
  %132 = getelementptr inbounds i8, i8* %3, i64 12
  %133 = bitcast i8* %132 to i32*
  %134 = load i32, i32* %133, align 4
  %135 = sext i32 %134 to i64
  %136 = shl i64 %7, 4
  %137 = icmp slt i64 %136, %135
  br i1 %137, label %433, label %138

138:                                              ; preds = %125, %131
  %139 = lshr i32 %14, 1
  %140 = add nsw i32 %139, %6
  %141 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %142 = load i32, i32* %141, align 8
  %143 = icmp slt i32 %140, %142
  br i1 %143, label %149, label %144

144:                                              ; preds = %138
  %145 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %146 = load i32, i32* %145, align 16
  %147 = lshr i32 %17, 1
  %148 = add nsw i32 %147, %5
  br label %189

149:                                              ; preds = %138
  %150 = lshr i32 %17, 1
  %151 = add nsw i32 %150, %5
  %152 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %153 = load i32, i32* %152, align 16
  %154 = icmp slt i32 %151, %153
  br i1 %154, label %155, label %189

155:                                              ; preds = %149
  %156 = getelementptr inbounds i8, i8* %3, i64 12
  %157 = bitcast i8* %156 to i32*
  %158 = load i32, i32* %157, align 4
  %159 = sext i32 %158 to i64
  %160 = icmp slt i64 %159, %7
  br i1 %160, label %161, label %189

161:                                              ; preds = %155
  %162 = icmp sgt i32 %142, %6
  %163 = icmp sgt i32 %153, %5
  %164 = and i1 %162, %163
  br i1 %164, label %165, label %433

165:                                              ; preds = %161
  %166 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 5
  %167 = load i32, i32* %166, align 8
  %168 = mul nsw i32 %167, %5
  %169 = add nsw i32 %168, %6
  %170 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %171 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %170, align 8
  %172 = sext i32 %169 to i64
  %173 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %171, i64 %172
  %174 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MODE_INFO** %173, %struct.MODE_INFO*** %174, align 8
  %175 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %176 = load %struct.MODE_INFO*, %struct.MODE_INFO** %175, align 16
  %177 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %176, i64 %172
  store %struct.MODE_INFO* %177, %struct.MODE_INFO** %173, align 8
  %178 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %179 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %178, align 8
  %180 = load i32, i32* %141, align 8
  %181 = mul nsw i32 %180, %5
  %182 = add nsw i32 %181, %6
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %179, i64 %183
  %185 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %184, %struct.MB_MODE_INFO_EXT** %185, align 16
  %186 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %174, align 8
  %187 = load %struct.MODE_INFO*, %struct.MODE_INFO** %186, align 8
  %188 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %187, i64 0, i32 0
  store i8 %4, i8* %188, align 4
  br label %433

189:                                              ; preds = %144, %155, %149
  %190 = phi i32 [ %148, %144 ], [ %151, %155 ], [ %151, %149 ]
  %191 = phi i32 [ %146, %144 ], [ %153, %155 ], [ %153, %149 ]
  %192 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %193 = icmp slt i32 %190, %191
  br i1 %193, label %194, label %312

194:                                              ; preds = %189
  %195 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 2, i64 %11
  %196 = load i8, i8* %195, align 1
  %197 = getelementptr inbounds i8, i8* %3, i64 48
  %198 = bitcast i8* %197 to i32*
  %199 = load i32, i32* %198, align 4
  %200 = getelementptr inbounds i8, i8* %3, i64 52
  %201 = bitcast i8* %200 to i32*
  %202 = load i32, i32* %201, align 4
  %203 = sext i32 %202 to i64
  %204 = mul nsw i64 %203, %203
  %205 = getelementptr inbounds i8, i8* %3, i64 56
  %206 = bitcast i8* %205 to i32*
  %207 = load i32, i32* %206, align 4
  %208 = zext i32 %207 to i64
  %209 = lshr i64 %204, %208
  %210 = trunc i64 %209 to i32
  %211 = sub i32 %199, %210
  %212 = shl i32 %211, 8
  %213 = lshr i32 %212, %207
  %214 = getelementptr inbounds i8, i8* %3, i64 60
  %215 = bitcast i8* %214 to i32*
  store i32 %213, i32* %215, align 4
  %216 = getelementptr inbounds i8, i8* %3, i64 64
  %217 = bitcast i8* %216 to i32*
  %218 = load i32, i32* %217, align 4
  %219 = getelementptr inbounds i8, i8* %3, i64 68
  %220 = bitcast i8* %219 to i32*
  %221 = load i32, i32* %220, align 4
  %222 = sext i32 %221 to i64
  %223 = mul nsw i64 %222, %222
  %224 = getelementptr inbounds i8, i8* %3, i64 72
  %225 = bitcast i8* %224 to i32*
  %226 = load i32, i32* %225, align 4
  %227 = zext i32 %226 to i64
  %228 = lshr i64 %223, %227
  %229 = trunc i64 %228 to i32
  %230 = sub i32 %218, %229
  %231 = shl i32 %230, 8
  %232 = lshr i32 %231, %226
  %233 = getelementptr inbounds i8, i8* %3, i64 76
  %234 = bitcast i8* %233 to i32*
  store i32 %232, i32* %234, align 4
  %235 = sext i32 %213 to i64
  %236 = icmp slt i64 %235, %7
  %237 = sext i32 %232 to i64
  %238 = icmp slt i64 %237, %7
  %239 = and i1 %236, %238
  br i1 %239, label %240, label %312

240:                                              ; preds = %194
  %241 = zext i8 %196 to i64
  %242 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 1, i32 1
  %243 = load i32, i32* %242, align 8
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 1, i32 2
  %246 = load i32, i32* %245, align 4
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds [13 x [2 x [2 x i8]]], [13 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %241, i64 %244, i64 %247
  %249 = load i8, i8* %248, align 1
  %250 = icmp ult i8 %249, 13
  br i1 %250, label %251, label %312

251:                                              ; preds = %240
  %252 = load i32, i32* %141, align 8
  %253 = icmp sgt i32 %252, %6
  br i1 %253, label %254, label %282

254:                                              ; preds = %251
  %255 = load i32, i32* %192, align 16
  %256 = icmp sgt i32 %255, %5
  br i1 %256, label %257, label %282

257:                                              ; preds = %254
  %258 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 5
  %259 = load i32, i32* %258, align 8
  %260 = mul nsw i32 %259, %5
  %261 = add nsw i32 %260, %6
  %262 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %263 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %262, align 8
  %264 = sext i32 %261 to i64
  %265 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %263, i64 %264
  %266 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MODE_INFO** %265, %struct.MODE_INFO*** %266, align 8
  %267 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %268 = load %struct.MODE_INFO*, %struct.MODE_INFO** %267, align 16
  %269 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %268, i64 %264
  store %struct.MODE_INFO* %269, %struct.MODE_INFO** %265, align 8
  %270 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %271 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %270, align 8
  %272 = load i32, i32* %141, align 8
  %273 = mul nsw i32 %272, %5
  %274 = add nsw i32 %273, %6
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %271, i64 %275
  %277 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %276, %struct.MB_MODE_INFO_EXT** %277, align 16
  %278 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %266, align 8
  %279 = load %struct.MODE_INFO*, %struct.MODE_INFO** %278, align 8
  %280 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %279, i64 0, i32 0
  store i8 %196, i8* %280, align 4
  %281 = load i32, i32* %141, align 8
  br label %282

282:                                              ; preds = %251, %254, %257
  %283 = phi i32 [ %252, %251 ], [ %252, %254 ], [ %281, %257 ]
  %284 = icmp sgt i32 %283, %140
  br i1 %284, label %285, label %433

285:                                              ; preds = %282
  %286 = load i32, i32* %192, align 16
  %287 = icmp sgt i32 %286, %5
  br i1 %287, label %288, label %433

288:                                              ; preds = %285
  %289 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 5
  %290 = load i32, i32* %289, align 8
  %291 = mul nsw i32 %290, %5
  %292 = add nsw i32 %291, %140
  %293 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %294 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %293, align 8
  %295 = sext i32 %292 to i64
  %296 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %294, i64 %295
  %297 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MODE_INFO** %296, %struct.MODE_INFO*** %297, align 8
  %298 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %299 = load %struct.MODE_INFO*, %struct.MODE_INFO** %298, align 16
  %300 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %299, i64 %295
  store %struct.MODE_INFO* %300, %struct.MODE_INFO** %296, align 8
  %301 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %302 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %301, align 8
  %303 = load i32, i32* %141, align 8
  %304 = mul nsw i32 %303, %5
  %305 = add nsw i32 %304, %140
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %302, i64 %306
  %308 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %307, %struct.MB_MODE_INFO_EXT** %308, align 16
  %309 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %297, align 8
  %310 = load %struct.MODE_INFO*, %struct.MODE_INFO** %309, align 8
  %311 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %310, i64 0, i32 0
  store i8 %196, i8* %311, align 4
  br label %433

312:                                              ; preds = %240, %194, %189
  %313 = load i32, i32* %141, align 8
  %314 = icmp slt i32 %140, %313
  br i1 %314, label %315, label %433

315:                                              ; preds = %312
  %316 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 1, i64 %11
  %317 = load i8, i8* %316, align 1
  %318 = getelementptr inbounds i8, i8* %3, i64 16
  %319 = bitcast i8* %318 to i32*
  %320 = load i32, i32* %319, align 4
  %321 = getelementptr inbounds i8, i8* %3, i64 20
  %322 = bitcast i8* %321 to i32*
  %323 = load i32, i32* %322, align 4
  %324 = sext i32 %323 to i64
  %325 = mul nsw i64 %324, %324
  %326 = getelementptr inbounds i8, i8* %3, i64 24
  %327 = bitcast i8* %326 to i32*
  %328 = load i32, i32* %327, align 4
  %329 = zext i32 %328 to i64
  %330 = lshr i64 %325, %329
  %331 = trunc i64 %330 to i32
  %332 = sub i32 %320, %331
  %333 = shl i32 %332, 8
  %334 = lshr i32 %333, %328
  %335 = getelementptr inbounds i8, i8* %3, i64 28
  %336 = bitcast i8* %335 to i32*
  store i32 %334, i32* %336, align 4
  %337 = getelementptr inbounds i8, i8* %3, i64 32
  %338 = bitcast i8* %337 to i32*
  %339 = load i32, i32* %338, align 4
  %340 = getelementptr inbounds i8, i8* %3, i64 36
  %341 = bitcast i8* %340 to i32*
  %342 = load i32, i32* %341, align 4
  %343 = sext i32 %342 to i64
  %344 = mul nsw i64 %343, %343
  %345 = getelementptr inbounds i8, i8* %3, i64 40
  %346 = bitcast i8* %345 to i32*
  %347 = load i32, i32* %346, align 4
  %348 = zext i32 %347 to i64
  %349 = lshr i64 %344, %348
  %350 = trunc i64 %349 to i32
  %351 = sub i32 %339, %350
  %352 = shl i32 %351, 8
  %353 = lshr i32 %352, %347
  %354 = getelementptr inbounds i8, i8* %3, i64 44
  %355 = bitcast i8* %354 to i32*
  store i32 %353, i32* %355, align 4
  %356 = sext i32 %334 to i64
  %357 = icmp slt i64 %356, %7
  %358 = sext i32 %353 to i64
  %359 = icmp slt i64 %358, %7
  %360 = and i1 %357, %359
  br i1 %360, label %361, label %433

361:                                              ; preds = %315
  %362 = zext i8 %317 to i64
  %363 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 1, i32 1
  %364 = load i32, i32* %363, align 8
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 1, i32 2
  %367 = load i32, i32* %366, align 4
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds [13 x [2 x [2 x i8]]], [13 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %362, i64 %365, i64 %368
  %370 = load i8, i8* %369, align 1
  %371 = icmp ult i8 %370, 13
  br i1 %371, label %372, label %433

372:                                              ; preds = %361
  %373 = load i32, i32* %141, align 8
  %374 = icmp sgt i32 %373, %6
  br i1 %374, label %375, label %403

375:                                              ; preds = %372
  %376 = load i32, i32* %192, align 16
  %377 = icmp sgt i32 %376, %5
  br i1 %377, label %378, label %403

378:                                              ; preds = %375
  %379 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 5
  %380 = load i32, i32* %379, align 8
  %381 = mul nsw i32 %380, %5
  %382 = add nsw i32 %381, %6
  %383 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %384 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %383, align 8
  %385 = sext i32 %382 to i64
  %386 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %384, i64 %385
  %387 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MODE_INFO** %386, %struct.MODE_INFO*** %387, align 8
  %388 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %389 = load %struct.MODE_INFO*, %struct.MODE_INFO** %388, align 16
  %390 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %389, i64 %385
  store %struct.MODE_INFO* %390, %struct.MODE_INFO** %386, align 8
  %391 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %392 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %391, align 8
  %393 = load i32, i32* %141, align 8
  %394 = mul nsw i32 %393, %5
  %395 = add nsw i32 %394, %6
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %392, i64 %396
  %398 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %397, %struct.MB_MODE_INFO_EXT** %398, align 16
  %399 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %387, align 8
  %400 = load %struct.MODE_INFO*, %struct.MODE_INFO** %399, align 8
  %401 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %400, i64 0, i32 0
  store i8 %317, i8* %401, align 4
  %402 = load i32, i32* %141, align 8
  br label %403

403:                                              ; preds = %372, %375, %378
  %404 = phi i32 [ %373, %372 ], [ %373, %375 ], [ %402, %378 ]
  %405 = icmp sgt i32 %404, %6
  br i1 %405, label %406, label %433

406:                                              ; preds = %403
  %407 = load i32, i32* %192, align 16
  %408 = icmp sgt i32 %407, %190
  br i1 %408, label %409, label %433

409:                                              ; preds = %406
  %410 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 5
  %411 = load i32, i32* %410, align 8
  %412 = mul nsw i32 %411, %190
  %413 = add nsw i32 %412, %6
  %414 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %415 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %414, align 8
  %416 = sext i32 %413 to i64
  %417 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %415, i64 %416
  %418 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MODE_INFO** %417, %struct.MODE_INFO*** %418, align 8
  %419 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %420 = load %struct.MODE_INFO*, %struct.MODE_INFO** %419, align 16
  %421 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %420, i64 %416
  store %struct.MODE_INFO* %421, %struct.MODE_INFO** %417, align 8
  %422 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %423 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %422, align 8
  %424 = load i32, i32* %141, align 8
  %425 = mul nsw i32 %424, %190
  %426 = add nsw i32 %425, %6
  %427 = sext i32 %426 to i64
  %428 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %423, i64 %427
  %429 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %428, %struct.MB_MODE_INFO_EXT** %429, align 16
  %430 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %418, align 8
  %431 = load %struct.MODE_INFO*, %struct.MODE_INFO** %430, align 8
  %432 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %431, i64 0, i32 0
  store i8 %317, i8* %432, align 4
  br label %433

433:                                              ; preds = %409, %406, %403, %288, %285, %282, %165, %161, %70, %66, %94, %312, %315, %361, %129, %131, %48, %54, %60, %10
  %434 = phi i32 [ 0, %10 ], [ 0, %60 ], [ 0, %54 ], [ 0, %48 ], [ 0, %131 ], [ 0, %129 ], [ 0, %361 ], [ 0, %315 ], [ 0, %312 ], [ 0, %94 ], [ 1, %66 ], [ 1, %70 ], [ 1, %161 ], [ 1, %165 ], [ 1, %282 ], [ 1, %285 ], [ 1, %288 ], [ 1, %403 ], [ 1, %406 ], [ 1, %409 ]
  ret i32 %434
}

declare void @vp9_init_plane_quantizers(%struct.VP9_COMP*, %struct.macroblock*) local_unnamed_addr #2

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @update_prev_partition_helper(%struct.VP9_COMP* readonly, i8 zeroext, i32, i32) unnamed_addr #5 {
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 148
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 36
  %7 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %8 = load i32, i32* %7, align 16
  %9 = icmp sgt i32 %8, %2
  br i1 %9, label %10, label %78

10:                                               ; preds = %4
  %11 = load i32, i32* %6, align 4
  %12 = mul nsw i32 %11, %2
  %13 = add nsw i32 %12, %3
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %15 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  br label %16

16:                                               ; preds = %10, %70
  %17 = phi i8 [ %1, %10 ], [ %43, %70 ]
  %18 = phi i32 [ %13, %10 ], [ %75, %70 ]
  %19 = phi i32 [ %3, %10 ], [ %72, %70 ]
  %20 = phi i32 [ %2, %10 ], [ %71, %70 ]
  %21 = zext i8 %17 to i64
  %22 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = shl i32 1, %24
  %26 = load i8*, i8** %5, align 16
  %27 = ashr i32 %25, 2
  %28 = load i32, i32* %14, align 8
  %29 = icmp sgt i32 %28, %19
  br i1 %29, label %30, label %78

30:                                               ; preds = %16
  %31 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %15, align 8
  %32 = sext i32 %18 to i64
  %33 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %31, i64 %32
  %34 = load %struct.MODE_INFO*, %struct.MODE_INFO** %33, align 8
  %35 = zext i8 %23 to i64
  %36 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %34, i64 0, i32 0
  %37 = load i8, i8* %36, align 4
  %38 = zext i8 %37 to i64
  %39 = getelementptr inbounds [0 x [13 x i32]], [0 x [13 x i32]]* @partition_lookup, i64 0, i64 %35, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 %41, i64 %21
  %43 = load i8, i8* %42, align 1
  %44 = icmp ult i8 %43, 3
  br i1 %44, label %45, label %47

45:                                               ; preds = %30
  %46 = getelementptr inbounds i8, i8* %26, i64 %32
  store i8 %17, i8* %46, align 1
  br label %78

47:                                               ; preds = %30
  switch i32 %40, label %70 [
    i32 0, label %48
    i32 1, label %50
    i32 2, label %61
  ]

48:                                               ; preds = %47
  %49 = getelementptr inbounds i8, i8* %26, i64 %32
  store i8 %17, i8* %49, align 1
  br label %78

50:                                               ; preds = %47
  %51 = getelementptr inbounds i8, i8* %26, i64 %32
  store i8 %43, i8* %51, align 1
  %52 = add nsw i32 %27, %20
  %53 = load i32, i32* %7, align 16
  %54 = icmp slt i32 %52, %53
  br i1 %54, label %55, label %78

55:                                               ; preds = %50
  %56 = load i32, i32* %6, align 4
  %57 = mul nsw i32 %56, %27
  %58 = add nsw i32 %57, %18
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %26, i64 %59
  store i8 %43, i8* %60, align 1
  br label %78

61:                                               ; preds = %47
  %62 = getelementptr inbounds i8, i8* %26, i64 %32
  store i8 %43, i8* %62, align 1
  %63 = add nsw i32 %27, %19
  %64 = load i32, i32* %14, align 8
  %65 = icmp slt i32 %63, %64
  br i1 %65, label %66, label %78

66:                                               ; preds = %61
  %67 = add nsw i32 %27, %18
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %26, i64 %68
  store i8 %43, i8* %69, align 1
  br label %78

70:                                               ; preds = %47
  tail call fastcc void @update_prev_partition_helper(%struct.VP9_COMP* %0, i8 zeroext %43, i32 %20, i32 %19)
  %71 = add nsw i32 %27, %20
  tail call fastcc void @update_prev_partition_helper(%struct.VP9_COMP* %0, i8 zeroext %43, i32 %71, i32 %19)
  %72 = add nsw i32 %27, %19
  tail call fastcc void @update_prev_partition_helper(%struct.VP9_COMP* %0, i8 zeroext %43, i32 %20, i32 %72)
  %73 = load i32, i32* %6, align 4
  %74 = mul nsw i32 %73, %71
  %75 = add nsw i32 %74, %72
  %76 = load i32, i32* %7, align 16
  %77 = icmp sgt i32 %76, %71
  br i1 %77, label %16, label %78

78:                                               ; preds = %16, %70, %4, %45, %61, %66, %50, %55, %48
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @copy_partitioning_helper(%struct.VP9_COMP* readonly, %struct.macroblock*, %struct.macroblockd*, i8 zeroext, i32, i32) unnamed_addr #5 {
  %7 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 148
  %8 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 36
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %10 = load i32, i32* %9, align 16
  %11 = icmp sgt i32 %10, %4
  br i1 %11, label %12, label %196

12:                                               ; preds = %6
  %13 = load i32, i32* %8, align 4
  %14 = mul nsw i32 %13, %4
  %15 = add nsw i32 %14, %5
  %16 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  br label %17

17:                                               ; preds = %12, %188
  %18 = phi i8 [ %3, %12 ], [ %41, %188 ]
  %19 = phi i32 [ %15, %12 ], [ %193, %188 ]
  %20 = phi i32 [ %5, %12 ], [ %190, %188 ]
  %21 = phi i32 [ %4, %12 ], [ %189, %188 ]
  %22 = zext i8 %18 to i64
  %23 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = shl i32 1, %25
  %27 = ashr i32 %26, 2
  %28 = load i32, i32* %16, align 8
  %29 = icmp sgt i32 %28, %20
  br i1 %29, label %30, label %196

30:                                               ; preds = %17
  %31 = load i8*, i8** %7, align 16
  %32 = zext i8 %24 to i64
  %33 = sext i32 %19 to i64
  %34 = getelementptr inbounds i8, i8* %31, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i64
  %37 = getelementptr inbounds [0 x [13 x i32]], [0 x [13 x i32]]* @partition_lookup, i64 0, i64 %32, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 %39, i64 %22
  %41 = load i8, i8* %40, align 1
  %42 = icmp ult i8 %41, 3
  br i1 %42, label %43, label %67

43:                                               ; preds = %30
  %44 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 5
  %45 = load i32, i32* %44, align 8
  %46 = mul nsw i32 %45, %21
  %47 = add nsw i32 %46, %20
  %48 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %49 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %48, align 8
  %50 = sext i32 %47 to i64
  %51 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %49, i64 %50
  %52 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MODE_INFO** %51, %struct.MODE_INFO*** %52, align 8
  %53 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %54 = load %struct.MODE_INFO*, %struct.MODE_INFO** %53, align 16
  %55 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %54, i64 %50
  store %struct.MODE_INFO* %55, %struct.MODE_INFO** %51, align 8
  %56 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %57 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %56, align 8
  %58 = load i32, i32* %16, align 8
  %59 = mul nsw i32 %58, %21
  %60 = add nsw i32 %59, %20
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %57, i64 %61
  %63 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %62, %struct.MB_MODE_INFO_EXT** %63, align 16
  %64 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %52, align 8
  %65 = load %struct.MODE_INFO*, %struct.MODE_INFO** %64, align 8
  %66 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %65, i64 0, i32 0
  store i8 %18, i8* %66, align 4
  br label %196

67:                                               ; preds = %30
  switch i32 %38, label %188 [
    i32 0, label %68
    i32 1, label %92
    i32 2, label %140
  ]

68:                                               ; preds = %67
  %69 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 5
  %70 = load i32, i32* %69, align 8
  %71 = mul nsw i32 %70, %21
  %72 = add nsw i32 %71, %20
  %73 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %74 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %73, align 8
  %75 = sext i32 %72 to i64
  %76 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %74, i64 %75
  %77 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MODE_INFO** %76, %struct.MODE_INFO*** %77, align 8
  %78 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %79 = load %struct.MODE_INFO*, %struct.MODE_INFO** %78, align 16
  %80 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %79, i64 %75
  store %struct.MODE_INFO* %80, %struct.MODE_INFO** %76, align 8
  %81 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %82 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %81, align 8
  %83 = load i32, i32* %16, align 8
  %84 = mul nsw i32 %83, %21
  %85 = add nsw i32 %84, %20
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %82, i64 %86
  %88 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %87, %struct.MB_MODE_INFO_EXT** %88, align 16
  %89 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %77, align 8
  %90 = load %struct.MODE_INFO*, %struct.MODE_INFO** %89, align 8
  %91 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %90, i64 0, i32 0
  store i8 %18, i8* %91, align 4
  br label %196

92:                                               ; preds = %67
  %93 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 5
  %94 = load i32, i32* %93, align 8
  %95 = mul nsw i32 %94, %21
  %96 = add nsw i32 %95, %20
  %97 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %98 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %97, align 8
  %99 = sext i32 %96 to i64
  %100 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %98, i64 %99
  %101 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MODE_INFO** %100, %struct.MODE_INFO*** %101, align 8
  %102 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %103 = load %struct.MODE_INFO*, %struct.MODE_INFO** %102, align 16
  %104 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %103, i64 %99
  store %struct.MODE_INFO* %104, %struct.MODE_INFO** %100, align 8
  %105 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %106 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %105, align 8
  %107 = load i32, i32* %16, align 8
  %108 = mul nsw i32 %107, %21
  %109 = add nsw i32 %108, %20
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %106, i64 %110
  %112 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %111, %struct.MB_MODE_INFO_EXT** %112, align 16
  %113 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %101, align 8
  %114 = load %struct.MODE_INFO*, %struct.MODE_INFO** %113, align 8
  %115 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %114, i64 0, i32 0
  store i8 %41, i8* %115, align 4
  %116 = add nsw i32 %27, %21
  %117 = load i32, i32* %16, align 8
  %118 = icmp sgt i32 %117, %20
  br i1 %118, label %119, label %196

119:                                              ; preds = %92
  %120 = load i32, i32* %9, align 16
  %121 = icmp sgt i32 %120, %116
  br i1 %121, label %122, label %196

122:                                              ; preds = %119
  %123 = load i32, i32* %93, align 8
  %124 = mul nsw i32 %123, %116
  %125 = add nsw i32 %124, %20
  %126 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %97, align 8
  %127 = sext i32 %125 to i64
  %128 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %126, i64 %127
  store %struct.MODE_INFO** %128, %struct.MODE_INFO*** %101, align 8
  %129 = load %struct.MODE_INFO*, %struct.MODE_INFO** %102, align 16
  %130 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %129, i64 %127
  store %struct.MODE_INFO* %130, %struct.MODE_INFO** %128, align 8
  %131 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %105, align 8
  %132 = load i32, i32* %16, align 8
  %133 = mul nsw i32 %132, %116
  %134 = add nsw i32 %133, %20
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %131, i64 %135
  store %struct.MB_MODE_INFO_EXT* %136, %struct.MB_MODE_INFO_EXT** %112, align 16
  %137 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %101, align 8
  %138 = load %struct.MODE_INFO*, %struct.MODE_INFO** %137, align 8
  %139 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %138, i64 0, i32 0
  store i8 %41, i8* %139, align 4
  br label %196

140:                                              ; preds = %67
  %141 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 5
  %142 = load i32, i32* %141, align 8
  %143 = mul nsw i32 %142, %21
  %144 = add nsw i32 %143, %20
  %145 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %146 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %145, align 8
  %147 = sext i32 %144 to i64
  %148 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %146, i64 %147
  %149 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MODE_INFO** %148, %struct.MODE_INFO*** %149, align 8
  %150 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 46
  %151 = load %struct.MODE_INFO*, %struct.MODE_INFO** %150, align 16
  %152 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %151, i64 %147
  store %struct.MODE_INFO* %152, %struct.MODE_INFO** %148, align 8
  %153 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %154 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %153, align 8
  %155 = load i32, i32* %16, align 8
  %156 = mul nsw i32 %155, %21
  %157 = add nsw i32 %156, %20
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %154, i64 %158
  %160 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %159, %struct.MB_MODE_INFO_EXT** %160, align 16
  %161 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %149, align 8
  %162 = load %struct.MODE_INFO*, %struct.MODE_INFO** %161, align 8
  %163 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %162, i64 0, i32 0
  store i8 %41, i8* %163, align 4
  %164 = add nsw i32 %27, %20
  %165 = load i32, i32* %16, align 8
  %166 = icmp sgt i32 %165, %164
  br i1 %166, label %167, label %196

167:                                              ; preds = %140
  %168 = load i32, i32* %9, align 16
  %169 = icmp sgt i32 %168, %21
  br i1 %169, label %170, label %196

170:                                              ; preds = %167
  %171 = load i32, i32* %141, align 8
  %172 = mul nsw i32 %171, %21
  %173 = add nsw i32 %172, %164
  %174 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %145, align 8
  %175 = sext i32 %173 to i64
  %176 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %174, i64 %175
  store %struct.MODE_INFO** %176, %struct.MODE_INFO*** %149, align 8
  %177 = load %struct.MODE_INFO*, %struct.MODE_INFO** %150, align 16
  %178 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %177, i64 %175
  store %struct.MODE_INFO* %178, %struct.MODE_INFO** %176, align 8
  %179 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %153, align 8
  %180 = load i32, i32* %16, align 8
  %181 = mul nsw i32 %180, %21
  %182 = add nsw i32 %181, %164
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %179, i64 %183
  store %struct.MB_MODE_INFO_EXT* %184, %struct.MB_MODE_INFO_EXT** %160, align 16
  %185 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %149, align 8
  %186 = load %struct.MODE_INFO*, %struct.MODE_INFO** %185, align 8
  %187 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %186, i64 0, i32 0
  store i8 %41, i8* %187, align 4
  br label %196

188:                                              ; preds = %67
  tail call fastcc void @copy_partitioning_helper(%struct.VP9_COMP* %0, %struct.macroblock* %1, %struct.macroblockd* %2, i8 zeroext %41, i32 %21, i32 %20)
  %189 = add nsw i32 %27, %21
  tail call fastcc void @copy_partitioning_helper(%struct.VP9_COMP* %0, %struct.macroblock* %1, %struct.macroblockd* %2, i8 zeroext %41, i32 %189, i32 %20)
  %190 = add nsw i32 %27, %20
  tail call fastcc void @copy_partitioning_helper(%struct.VP9_COMP* %0, %struct.macroblock* %1, %struct.macroblockd* %2, i8 zeroext %41, i32 %21, i32 %190)
  %191 = load i32, i32* %8, align 4
  %192 = mul nsw i32 %191, %189
  %193 = add nsw i32 %192, %190
  %194 = load i32, i32* %9, align 16
  %195 = icmp sgt i32 %194, %189
  br i1 %195, label %17, label %196

196:                                              ; preds = %17, %188, %6, %170, %167, %140, %122, %119, %92, %43, %68
  ret void
}

declare i32 @vpx_highbd_avg_8x8_sse2(i8*, i32) local_unnamed_addr #2

declare i32 @vpx_avg_8x8_sse2(i8*, i32) local_unnamed_addr #2

declare void @vpx_highbd_minmax_8x8_c(i8*, i32, i8*, i32, i32*, i32*) local_unnamed_addr #2

declare void @vpx_minmax_8x8_sse2(i8*, i32, i8*, i32, i32*, i32*) local_unnamed_addr #2

declare i32 @vpx_highbd_avg_4x4_sse2(i8*, i32) local_unnamed_addr #2

declare i32 @vpx_avg_4x4_sse2(i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @nonrd_pick_sb_modes(%struct.VP9_COMP*, %struct.TileDataEnc*, %struct.macroblock*, i32, i32, %struct.RD_COST*, i8 zeroext, %struct.PICK_MODE_CONTEXT*) unnamed_addr #0 {
  %9 = alloca [48 x i8], align 16
  %10 = alloca [48 x i8], align 16
  %11 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %1, i64 0, i32 0
  %12 = getelementptr inbounds [48 x i8], [48 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %12) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 48, i1 false)
  %13 = getelementptr inbounds [48 x i8], [48 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %13) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 48, i1 false)
  %14 = icmp ugt i8 %6, 3
  %15 = select i1 %14, i8 %6, i8 3
  %16 = zext i8 %15 to i64
  %17 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %16
  %20 = load i8, i8* %19, align 1
  tail call fastcc void @set_offsets(%struct.VP9_COMP* %0, %struct.TileInfo* %11, %struct.macroblock* %2, i32 %3, i32 %4, i8 zeroext %6)
  tail call fastcc void @set_segment_index(%struct.VP9_COMP* %0, %struct.macroblock* %2, i32 %3, i32 %4, i8 zeroext %6)
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 6
  %22 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %21, align 8
  %23 = load %struct.MODE_INFO*, %struct.MODE_INFO** %22, align 8
  %24 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %23, i64 0, i32 0
  store i8 %6, i8* %24, align 4
  %25 = zext i8 %18 to i64
  %26 = zext i8 %20 to i64
  %27 = zext i8 %20 to i64
  %28 = zext i8 %18 to i64
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 0, i32 5
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = zext i32 %32 to i64
  %34 = lshr i64 %25, %33
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %13, i8* align 1 %30, i64 %34, i1 false)
  %35 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 0, i32 6
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  %40 = lshr i64 %26, %39
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %12, i8* align 1 %36, i64 %40, i1 false)
  %41 = getelementptr inbounds [48 x i8], [48 x i8]* %10, i64 0, i64 %28
  %42 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 1, i32 5
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 1, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = zext i32 %45 to i64
  %47 = lshr i64 %25, %46
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %43, i64 %47, i1 false)
  %48 = getelementptr inbounds [48 x i8], [48 x i8]* %9, i64 0, i64 %27
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 1, i32 6
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 1, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %52 to i64
  %54 = lshr i64 %26, %53
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %48, i8* align 1 %50, i64 %54, i1 false)
  %55 = shl nuw nsw i64 %28, 1
  %56 = getelementptr inbounds [48 x i8], [48 x i8]* %10, i64 0, i64 %55
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 2, i32 5
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 2, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = zext i32 %60 to i64
  %62 = lshr i64 %25, %61
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %56, i8* align 1 %58, i64 %62, i1 false)
  %63 = shl nuw nsw i64 %27, 1
  %64 = getelementptr inbounds [48 x i8], [48 x i8]* %9, i64 0, i64 %63
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 2, i32 6
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 0, i64 2, i32 2
  %68 = load i32, i32* %67, align 4
  %69 = zext i32 %68 to i64
  %70 = lshr i64 %26, %69
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %64, i8* align 1 %66, i64 %70, i1 false)
  %71 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 31
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %72, 3
  br i1 %73, label %74, label %89

74:                                               ; preds = %8
  %75 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 0
  %76 = load i8, i8* %75, align 8
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %89, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %23, i64 0, i32 4
  %80 = load i8, i8* %79, align 4
  %81 = sext i8 %80 to i32
  %82 = add nsw i32 %81, -1
  %83 = icmp ugt i32 %82, 1
  br i1 %83, label %89, label %84

84:                                               ; preds = %78
  %85 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 84
  %86 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %85, align 8
  %87 = tail call i32 @vp9_cyclic_refresh_get_rdmult(%struct.CYCLIC_REFRESH* %86) #8
  %88 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 15
  store i32 %87, i32* %88, align 4
  br label %89

89:                                               ; preds = %78, %74, %84, %8
  %90 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %91 = load i32, i32* %90, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %97, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %95 = load i8, i8* %94, align 4
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %105, label %97

97:                                               ; preds = %89, %93
  %98 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 90
  %99 = load i32, i32* %98, align 8
  %100 = icmp eq i32 %99, 0
  %101 = icmp ult i8 %6, 6
  %102 = and i1 %101, %100
  br i1 %102, label %103, label %104

103:                                              ; preds = %97
  tail call void @vp9_rd_pick_intra_mode_sb(%struct.VP9_COMP* %0, %struct.macroblock* %2, %struct.RD_COST* %5, i8 zeroext %6, %struct.PICK_MODE_CONTEXT* %7, i64 9223372036854775807) #8
  br label %212

104:                                              ; preds = %97
  tail call void @vp9_pick_intra_mode(%struct.VP9_COMP* %0, %struct.macroblock* %2, %struct.RD_COST* %5, i8 zeroext %6, %struct.PICK_MODE_CONTEXT* %7) #8
  br label %212

105:                                              ; preds = %93
  %106 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 1
  %107 = load i32, i32* %106, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 12, i64 %108, i32 14
  %110 = load i32, i32* %109, align 4
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %128, label %112

112:                                              ; preds = %105
  %113 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 90
  %114 = load i32, i32* %113, align 8
  %115 = icmp eq i32 %114, 0
  %116 = icmp ult i8 %6, 4
  %117 = and i1 %116, %115
  br i1 %117, label %118, label %119

118:                                              ; preds = %112
  tail call void @vp9_rd_pick_intra_mode_sb(%struct.VP9_COMP* %0, %struct.macroblock* %2, %struct.RD_COST* %5, i8 zeroext %6, %struct.PICK_MODE_CONTEXT* %7, i64 9223372036854775807) #8
  br label %212

119:                                              ; preds = %112
  %120 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 42
  %121 = load i32, i32* %120, align 4
  %122 = icmp eq i32 %121, 1
  br i1 %122, label %123, label %124

123:                                              ; preds = %119
  tail call void @vp9_pick_intra_mode(%struct.VP9_COMP* %0, %struct.macroblock* %2, %struct.RD_COST* %5, i8 zeroext %6, %struct.PICK_MODE_CONTEXT* %7) #8
  br label %212

124:                                              ; preds = %119
  %125 = icmp ugt i8 %6, 2
  br i1 %125, label %126, label %127

126:                                              ; preds = %124
  tail call void @vp9_pick_inter_mode(%struct.VP9_COMP* %0, %struct.macroblock* %2, %struct.TileDataEnc* %1, i32 %3, i32 %4, %struct.RD_COST* %5, i8 zeroext %6, %struct.PICK_MODE_CONTEXT* %7) #8
  br label %212

127:                                              ; preds = %124
  tail call void @vp9_pick_inter_mode_sub8x8(%struct.VP9_COMP* %0, %struct.macroblock* %2, i32 %3, i32 %4, %struct.RD_COST* %5, i8 zeroext %6, %struct.PICK_MODE_CONTEXT* %7) #8
  br label %212

128:                                              ; preds = %105
  %129 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 0
  %130 = load i8, i8* %129, align 4
  %131 = icmp eq i8 %130, 0
  br i1 %131, label %196, label %132

132:                                              ; preds = %128
  %133 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %23, i64 0, i32 4
  %134 = load i8, i8* %133, align 4
  %135 = sext i8 %134 to i64
  %136 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %135
  %137 = load i32, i32* %136, align 4
  %138 = and i32 %137, 8
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %196, label %140

140:                                              ; preds = %132
  %141 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 37
  %142 = load i32, i32* %141, align 16
  %143 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %21, align 8
  %144 = load %struct.MODE_INFO*, %struct.MODE_INFO** %143, align 8
  %145 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 7
  %146 = load %struct.MODE_INFO*, %struct.MODE_INFO** %145, align 8
  %147 = icmp eq %struct.MODE_INFO* %146, null
  br i1 %147, label %152, label %148

148:                                              ; preds = %140
  %149 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %146, i64 0, i32 7
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  br label %152

152:                                              ; preds = %148, %140
  %153 = phi i32 [ %151, %148 ], [ 3, %140 ]
  %154 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 8
  %155 = load %struct.MODE_INFO*, %struct.MODE_INFO** %154, align 8
  %156 = icmp eq %struct.MODE_INFO* %155, null
  br i1 %156, label %161, label %157

157:                                              ; preds = %152
  %158 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %155, i64 0, i32 7
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  br label %161

161:                                              ; preds = %157, %152
  %162 = phi i32 [ %160, %157 ], [ 3, %152 ]
  %163 = icmp eq i32 %153, %162
  br i1 %163, label %169, label %164

164:                                              ; preds = %161
  %165 = icmp eq i32 %153, 3
  br i1 %165, label %169, label %166

166:                                              ; preds = %164
  %167 = icmp eq i32 %162, 3
  %168 = select i1 %167, i32 %153, i32 3
  br label %169

169:                                              ; preds = %161, %164, %166
  %170 = phi i32 [ %153, %161 ], [ %162, %164 ], [ %168, %166 ]
  %171 = trunc i32 %170 to i8
  %172 = and i32 %170, 255
  %173 = icmp eq i32 %172, 3
  %174 = select i1 %173, i8 0, i8 %171
  %175 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %144, i64 0, i32 0
  store i8 %6, i8* %175, align 4
  %176 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %144, i64 0, i32 1
  store i8 12, i8* %176, align 1
  %177 = zext i8 %6 to i64
  %178 = getelementptr inbounds [13 x i8], [13 x i8]* @max_txsize_lookup, i64 0, i64 %177
  %179 = load i8, i8* %178, align 1
  %180 = zext i32 %142 to i64
  %181 = getelementptr inbounds [5 x i8], [5 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %180
  %182 = load i8, i8* %181, align 1
  %183 = icmp ult i8 %179, %182
  %184 = select i1 %183, i8 %179, i8 %182
  %185 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %144, i64 0, i32 2
  store i8 %184, i8* %185, align 2
  %186 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %144, i64 0, i32 3
  store i8 1, i8* %186, align 1
  %187 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %144, i64 0, i32 6
  store i8 0, i8* %187, align 2
  %188 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %144, i64 0, i32 8, i64 0
  store i8 1, i8* %188, align 4
  %189 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %144, i64 0, i32 8, i64 1
  store i8 -1, i8* %189, align 1
  %190 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %144, i64 0, i32 9, i64 0, i32 0
  store i32 0, i32* %190, align 4
  %191 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %144, i64 0, i32 7
  store i8 %174, i8* %191, align 1
  %192 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %21, align 8
  %193 = load %struct.MODE_INFO*, %struct.MODE_INFO** %192, align 8
  %194 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %193, i64 0, i32 10, i64 0, i32 1, i64 0, i32 0
  store i32 0, i32* %194, align 4
  %195 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 39
  store i32 1, i32* %195, align 16
  tail call void @vp9_rd_cost_init(%struct.RD_COST* %5) #8
  br label %212

196:                                              ; preds = %128, %132
  %197 = icmp ugt i8 %6, 2
  br i1 %197, label %198, label %211

198:                                              ; preds = %196
  %199 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 73
  %200 = load i32, i32* %199, align 8
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %210, label %202

202:                                              ; preds = %198
  %203 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 90
  %204 = load i32, i32* %203, align 8
  %205 = icmp eq i32 %204, 0
  %206 = icmp ult i8 %6, 4
  %207 = and i1 %206, %205
  br i1 %207, label %208, label %209

208:                                              ; preds = %202
  tail call void @vp9_rd_pick_intra_mode_sb(%struct.VP9_COMP* %0, %struct.macroblock* %2, %struct.RD_COST* %5, i8 zeroext %6, %struct.PICK_MODE_CONTEXT* %7, i64 9223372036854775807) #8
  br label %212

209:                                              ; preds = %202
  tail call void @vp9_pick_inter_mode(%struct.VP9_COMP* %0, %struct.macroblock* %2, %struct.TileDataEnc* %1, i32 %3, i32 %4, %struct.RD_COST* %5, i8 zeroext %6, %struct.PICK_MODE_CONTEXT* %7) #8
  br label %212

210:                                              ; preds = %198
  tail call void @vp9_pick_inter_mode(%struct.VP9_COMP* %0, %struct.macroblock* %2, %struct.TileDataEnc* %1, i32 %3, i32 %4, %struct.RD_COST* %5, i8 zeroext %6, %struct.PICK_MODE_CONTEXT* %7) #8
  br label %212

211:                                              ; preds = %196
  tail call void @vp9_pick_inter_mode_sub8x8(%struct.VP9_COMP* %0, %struct.macroblock* %2, i32 %3, i32 %4, %struct.RD_COST* %5, i8 zeroext %6, %struct.PICK_MODE_CONTEXT* %7) #8
  br label %212

212:                                              ; preds = %209, %208, %127, %126, %123, %118, %104, %103, %211, %210, %169
  %213 = zext i8 %6 to i64
  %214 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i32
  %217 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %218 = load i32, i32* %217, align 8
  %219 = sub nsw i32 %218, %4
  %220 = icmp sgt i32 %219, %216
  %221 = select i1 %220, i32 %216, i32 %219
  %222 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %213
  %223 = load i8, i8* %222, align 1
  %224 = zext i8 %223 to i32
  %225 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %226 = load i32, i32* %225, align 16
  %227 = sub nsw i32 %226, %3
  %228 = icmp sgt i32 %227, %224
  %229 = select i1 %228, i32 %224, i32 %227
  %230 = bitcast %struct.MODE_INFO*** %21 to i64**
  %231 = load i64*, i64** %230, align 8
  %232 = load i64, i64* %231, align 8
  %233 = icmp sgt i32 %229, 0
  br i1 %233, label %234, label %290

234:                                              ; preds = %212
  %235 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 1, i32 5
  %236 = load i32, i32* %235, align 8
  %237 = icmp sgt i32 %221, 0
  %238 = sext i32 %221 to i64
  %239 = sext i32 %236 to i64
  %240 = sext i32 %229 to i64
  %241 = add nsw i64 %238, -1
  %242 = and i64 %238, 3
  %243 = icmp ult i64 %241, 3
  %244 = sub nsw i64 %238, %242
  %245 = icmp eq i64 %242, 0
  br label %246

246:                                              ; preds = %287, %234
  %247 = phi i64 [ 0, %234 ], [ %288, %287 ]
  br i1 %237, label %248, label %287

248:                                              ; preds = %246
  %249 = mul nsw i64 %247, %239
  br i1 %243, label %275, label %250

250:                                              ; preds = %248, %250
  %251 = phi i64 [ %272, %250 ], [ 0, %248 ]
  %252 = phi i64 [ %273, %250 ], [ %244, %248 ]
  %253 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %21, align 8
  %254 = add nsw i64 %251, %249
  %255 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %253, i64 %254
  %256 = bitcast %struct.MODE_INFO** %255 to i64*
  store i64 %232, i64* %256, align 8
  %257 = or i64 %251, 1
  %258 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %21, align 8
  %259 = add nsw i64 %257, %249
  %260 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %258, i64 %259
  %261 = bitcast %struct.MODE_INFO** %260 to i64*
  store i64 %232, i64* %261, align 8
  %262 = or i64 %251, 2
  %263 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %21, align 8
  %264 = add nsw i64 %262, %249
  %265 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %263, i64 %264
  %266 = bitcast %struct.MODE_INFO** %265 to i64*
  store i64 %232, i64* %266, align 8
  %267 = or i64 %251, 3
  %268 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %21, align 8
  %269 = add nsw i64 %267, %249
  %270 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %268, i64 %269
  %271 = bitcast %struct.MODE_INFO** %270 to i64*
  store i64 %232, i64* %271, align 8
  %272 = add nuw nsw i64 %251, 4
  %273 = add i64 %252, -4
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %275, label %250

275:                                              ; preds = %250, %248
  %276 = phi i64 [ 0, %248 ], [ %272, %250 ]
  br i1 %245, label %287, label %277

277:                                              ; preds = %275, %277
  %278 = phi i64 [ %284, %277 ], [ %276, %275 ]
  %279 = phi i64 [ %285, %277 ], [ %242, %275 ]
  %280 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %21, align 8
  %281 = add nsw i64 %278, %249
  %282 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %280, i64 %281
  %283 = bitcast %struct.MODE_INFO** %282 to i64*
  store i64 %232, i64* %283, align 8
  %284 = add nuw nsw i64 %278, 1
  %285 = add i64 %279, -1
  %286 = icmp eq i64 %285, 0
  br i1 %286, label %287, label %277, !llvm.loop !38

287:                                              ; preds = %275, %277, %246
  %288 = add nuw nsw i64 %247, 1
  %289 = icmp slt i64 %288, %240
  br i1 %289, label %246, label %290

290:                                              ; preds = %287, %212
  %291 = load i8*, i8** %29, align 8
  %292 = load i32, i32* %31, align 8
  %293 = zext i32 %292 to i64
  %294 = lshr i64 %25, %293
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %291, i8* nonnull align 16 %13, i64 %294, i1 false)
  %295 = load i8*, i8** %35, align 8
  %296 = load i32, i32* %37, align 4
  %297 = zext i32 %296 to i64
  %298 = lshr i64 %26, %297
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %295, i8* nonnull align 16 %12, i64 %298, i1 false)
  %299 = load i8*, i8** %42, align 8
  %300 = load i32, i32* %44, align 8
  %301 = zext i32 %300 to i64
  %302 = lshr i64 %25, %301
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %299, i8* align 1 %41, i64 %302, i1 false)
  %303 = load i8*, i8** %49, align 8
  %304 = load i32, i32* %51, align 4
  %305 = zext i32 %304 to i64
  %306 = lshr i64 %26, %305
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %303, i8* align 1 %48, i64 %306, i1 false)
  %307 = load i8*, i8** %57, align 8
  %308 = load i32, i32* %59, align 8
  %309 = zext i32 %308 to i64
  %310 = lshr i64 %25, %309
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %307, i8* align 2 %56, i64 %310, i1 false)
  %311 = load i8*, i8** %65, align 8
  %312 = load i32, i32* %67, align 4
  %313 = zext i32 %312 to i64
  %314 = lshr i64 %26, %313
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %311, i8* align 2 %64, i64 %314, i1 false)
  %315 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %5, i64 0, i32 0
  %316 = load i32, i32* %315, align 8
  %317 = icmp eq i32 %316, 2147483647
  br i1 %317, label %318, label %320

318:                                              ; preds = %290
  tail call void @vp9_rd_cost_reset(%struct.RD_COST* %5) #8
  %319 = load i32, i32* %315, align 8
  br label %320

320:                                              ; preds = %318, %290
  %321 = phi i32 [ %319, %318 ], [ %316, %290 ]
  %322 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %7, i64 0, i32 22
  store i32 %321, i32* %322, align 8
  %323 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %5, i64 0, i32 1
  %324 = load i64, i64* %323, align 8
  %325 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %7, i64 0, i32 23
  store i64 %324, i64* %325, align 8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %13) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %12) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @encode_b_rt(%struct.VP9_COMP*, %struct.ThreadData*, %struct.TileInfo* nocapture readonly, %struct.TOKENEXTRA**, i32, i32, i32, i8 zeroext, %struct.PICK_MODE_CONTEXT* nocapture) unnamed_addr #0 {
  %10 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0
  tail call fastcc void @set_offsets(%struct.VP9_COMP* %0, %struct.TileInfo* %2, %struct.macroblock* %10, i32 %4, i32 %5, i8 zeroext %7)
  %11 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 6
  %12 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %11, align 8
  %13 = load %struct.MODE_INFO*, %struct.MODE_INFO** %12, align 8
  %14 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 0, i64 0
  %15 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %13, i64 0, i32 0
  %16 = load i8, i8* %15, align 4
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %17
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %25 = load i32, i32* %24, align 8
  %26 = sub nsw i32 %25, %5
  %27 = icmp sgt i32 %26, %20
  %28 = select i1 %27, i32 %20, i32 %26
  %29 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %30 = load i32, i32* %29, align 16
  %31 = sub nsw i32 %30, %4
  %32 = icmp sgt i32 %31, %23
  %33 = select i1 %32, i32 %23, i32 %31
  %34 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %8, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %15, i8* align 8 %34, i64 68, i1 false) #8
  %35 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 2
  %36 = bitcast %struct.MB_MODE_INFO_EXT** %35 to i8**
  %37 = load i8*, i8** %36, align 16
  %38 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %8, i64 0, i32 1
  %39 = bitcast %struct.MB_MODE_INFO_EXT* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %37, i8* align 4 %39, i64 36, i1 false) #8
  %40 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 0
  %41 = load i8, i8* %40, align 4
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %214, label %43

43:                                               ; preds = %9
  %44 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 31
  %45 = load i32, i32* %44, align 4
  switch i32 %45, label %58 [
    i32 0, label %46
    i32 3, label %50
  ]

46:                                               ; preds = %43
  %47 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 160, i32 0
  %48 = load i8, i8* %47, align 16
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %214, label %58

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %8, i64 0, i32 22
  %52 = load i32, i32* %51, align 8
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %8, i64 0, i32 23
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 39
  %57 = load i32, i32* %56, align 16
  tail call void @vp9_cyclic_refresh_update_segment(%struct.VP9_COMP* %0, %struct.MODE_INFO* %13, i32 %4, i32 %5, i8 zeroext %7, i64 %53, i64 %55, i32 %57, %struct.macroblock_plane* %14) #8
  br label %213

58:                                               ; preds = %46, %43
  %59 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 1
  %60 = load i8, i8* %59, align 1
  %61 = icmp eq i8 %60, 0
  %62 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 81
  %63 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 60
  %64 = select i1 %61, i8** %63, i8** %62
  %65 = load i8*, i8** %64, align 8
  %66 = load i32, i32* %24, align 8
  %67 = zext i8 %7 to i64
  %68 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %67
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = sub nsw i32 %66, %5
  %75 = icmp slt i32 %74, %70
  %76 = select i1 %75, i32 %74, i32 %70
  %77 = load i32, i32* %29, align 16
  %78 = sub nsw i32 %77, %4
  %79 = icmp slt i32 %78, %73
  %80 = select i1 %79, i32 %78, i32 %73
  %81 = icmp sgt i32 %80, 0
  br i1 %81, label %82, label %209

82:                                               ; preds = %58
  %83 = icmp sgt i32 %76, 0
  %84 = sext i32 %76 to i64
  %85 = add nsw i64 %84, -1
  %86 = mul i32 %66, %4
  %87 = add i32 %86, %5
  %88 = add nsw i64 %84, -8
  %89 = lshr i64 %88, 3
  %90 = add nuw nsw i64 %89, 1
  %91 = icmp ult i32 %76, 8
  %92 = trunc i64 %85 to i32
  %93 = icmp ugt i64 %85, 4294967295
  %94 = and i64 %84, -8
  %95 = and i64 %90, 1
  %96 = icmp eq i64 %89, 0
  %97 = sub nuw nsw i64 %90, %95
  %98 = icmp eq i64 %95, 0
  %99 = icmp eq i64 %94, %84
  br label %100

100:                                              ; preds = %205, %82
  %101 = phi i32 [ 8, %82 ], [ %206, %205 ]
  %102 = phi i32 [ 0, %82 ], [ %207, %205 ]
  %103 = mul i32 %66, %102
  %104 = add i32 %87, %103
  br i1 %83, label %105, label %205

105:                                              ; preds = %100
  %106 = add i32 %102, %4
  %107 = mul i32 %106, %66
  %108 = add i32 %107, %5
  br i1 %91, label %189, label %109

109:                                              ; preds = %105
  %110 = add i32 %104, %92
  %111 = icmp slt i32 %110, %104
  %112 = or i1 %111, %93
  br i1 %112, label %189, label %113

113:                                              ; preds = %109
  %114 = insertelement <4 x i32> undef, i32 %101, i32 0
  %115 = shufflevector <4 x i32> %114, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %96, label %155, label %116

116:                                              ; preds = %113, %116
  %117 = phi i64 [ %152, %116 ], [ 0, %113 ]
  %118 = phi <4 x i32> [ %150, %116 ], [ %115, %113 ]
  %119 = phi <4 x i32> [ %151, %116 ], [ %115, %113 ]
  %120 = phi i64 [ %153, %116 ], [ %97, %113 ]
  %121 = trunc i64 %117 to i32
  %122 = add i32 %108, %121
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %65, i64 %123
  %125 = bitcast i8* %124 to <4 x i8>*
  %126 = load <4 x i8>, <4 x i8>* %125, align 1
  %127 = getelementptr inbounds i8, i8* %124, i64 4
  %128 = bitcast i8* %127 to <4 x i8>*
  %129 = load <4 x i8>, <4 x i8>* %128, align 1
  %130 = zext <4 x i8> %126 to <4 x i32>
  %131 = zext <4 x i8> %129 to <4 x i32>
  %132 = icmp slt <4 x i32> %118, %130
  %133 = icmp slt <4 x i32> %119, %131
  %134 = select <4 x i1> %132, <4 x i32> %118, <4 x i32> %130
  %135 = select <4 x i1> %133, <4 x i32> %119, <4 x i32> %131
  %136 = trunc i64 %117 to i32
  %137 = or i32 %136, 8
  %138 = add i32 %108, %137
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i8, i8* %65, i64 %139
  %141 = bitcast i8* %140 to <4 x i8>*
  %142 = load <4 x i8>, <4 x i8>* %141, align 1
  %143 = getelementptr inbounds i8, i8* %140, i64 4
  %144 = bitcast i8* %143 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = zext <4 x i8> %142 to <4 x i32>
  %147 = zext <4 x i8> %145 to <4 x i32>
  %148 = icmp slt <4 x i32> %134, %146
  %149 = icmp slt <4 x i32> %135, %147
  %150 = select <4 x i1> %148, <4 x i32> %134, <4 x i32> %146
  %151 = select <4 x i1> %149, <4 x i32> %135, <4 x i32> %147
  %152 = add i64 %117, 16
  %153 = add i64 %120, -2
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %116, !llvm.loop !39

155:                                              ; preds = %116, %113
  %156 = phi <4 x i32> [ undef, %113 ], [ %150, %116 ]
  %157 = phi <4 x i32> [ undef, %113 ], [ %151, %116 ]
  %158 = phi i64 [ 0, %113 ], [ %152, %116 ]
  %159 = phi <4 x i32> [ %115, %113 ], [ %150, %116 ]
  %160 = phi <4 x i32> [ %115, %113 ], [ %151, %116 ]
  br i1 %98, label %177, label %161

161:                                              ; preds = %155
  %162 = trunc i64 %158 to i32
  %163 = add i32 %108, %162
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %65, i64 %164
  %166 = bitcast i8* %165 to <4 x i8>*
  %167 = load <4 x i8>, <4 x i8>* %166, align 1
  %168 = getelementptr inbounds i8, i8* %165, i64 4
  %169 = bitcast i8* %168 to <4 x i8>*
  %170 = load <4 x i8>, <4 x i8>* %169, align 1
  %171 = zext <4 x i8> %167 to <4 x i32>
  %172 = zext <4 x i8> %170 to <4 x i32>
  %173 = icmp slt <4 x i32> %160, %172
  %174 = select <4 x i1> %173, <4 x i32> %160, <4 x i32> %172
  %175 = icmp slt <4 x i32> %159, %171
  %176 = select <4 x i1> %175, <4 x i32> %159, <4 x i32> %171
  br label %177

177:                                              ; preds = %155, %161
  %178 = phi <4 x i32> [ %156, %155 ], [ %176, %161 ]
  %179 = phi <4 x i32> [ %157, %155 ], [ %174, %161 ]
  %180 = icmp slt <4 x i32> %178, %179
  %181 = select <4 x i1> %180, <4 x i32> %178, <4 x i32> %179
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %183 = icmp slt <4 x i32> %181, %182
  %184 = select <4 x i1> %183, <4 x i32> %181, <4 x i32> %182
  %185 = shufflevector <4 x i32> %184, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %186 = icmp slt <4 x i32> %184, %185
  %187 = select <4 x i1> %186, <4 x i32> %184, <4 x i32> %185
  %188 = extractelement <4 x i32> %187, i32 0
  br i1 %99, label %205, label %189

189:                                              ; preds = %177, %109, %105
  %190 = phi i64 [ 0, %109 ], [ 0, %105 ], [ %94, %177 ]
  %191 = phi i32 [ %101, %109 ], [ %101, %105 ], [ %188, %177 ]
  br label %192

192:                                              ; preds = %189, %192
  %193 = phi i64 [ %203, %192 ], [ %190, %189 ]
  %194 = phi i32 [ %202, %192 ], [ %191, %189 ]
  %195 = trunc i64 %193 to i32
  %196 = add i32 %108, %195
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %65, i64 %197
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = icmp slt i32 %194, %200
  %202 = select i1 %201, i32 %194, i32 %200
  %203 = add nuw nsw i64 %193, 1
  %204 = icmp slt i64 %203, %84
  br i1 %204, label %192, label %205, !llvm.loop !40

205:                                              ; preds = %192, %177, %100
  %206 = phi i32 [ %101, %100 ], [ %188, %177 ], [ %202, %192 ]
  %207 = add nuw nsw i32 %102, 1
  %208 = icmp slt i32 %207, %80
  br i1 %208, label %100, label %209

209:                                              ; preds = %205, %58
  %210 = phi i32 [ 8, %58 ], [ %206, %205 ]
  %211 = trunc i32 %210 to i8
  %212 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %13, i64 0, i32 4
  store i8 %211, i8* %212, align 4
  br label %213

213:                                              ; preds = %209, %50
  tail call void @vp9_init_plane_quantizers(%struct.VP9_COMP* %0, %struct.macroblock* %10) #8
  br label %214

214:                                              ; preds = %213, %46, %9
  %215 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %13, i64 0, i32 8, i64 0
  %216 = load i8, i8* %215, align 4
  %217 = icmp slt i8 %216, 1
  br i1 %217, label %268, label %218

218:                                              ; preds = %214
  tail call void @vp9_update_mv_count(%struct.ThreadData* %1) #8
  %219 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 63
  %220 = load i8, i8* %219, align 4
  %221 = icmp eq i8 %220, 4
  br i1 %221, label %222, label %258

222:                                              ; preds = %218
  %223 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 7
  %224 = load %struct.MODE_INFO*, %struct.MODE_INFO** %223, align 8
  %225 = icmp eq %struct.MODE_INFO* %224, null
  br i1 %225, label %230, label %226

226:                                              ; preds = %222
  %227 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %224, i64 0, i32 7
  %228 = load i8, i8* %227, align 1
  %229 = zext i8 %228 to i32
  br label %230

230:                                              ; preds = %226, %222
  %231 = phi i32 [ %229, %226 ], [ 3, %222 ]
  %232 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 8
  %233 = load %struct.MODE_INFO*, %struct.MODE_INFO** %232, align 8
  %234 = icmp eq %struct.MODE_INFO* %233, null
  br i1 %234, label %239, label %235

235:                                              ; preds = %230
  %236 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %233, i64 0, i32 7
  %237 = load i8, i8* %236, align 1
  %238 = zext i8 %237 to i32
  br label %239

239:                                              ; preds = %235, %230
  %240 = phi i32 [ %238, %235 ], [ 3, %230 ]
  %241 = icmp eq i32 %231, %240
  br i1 %241, label %247, label %242

242:                                              ; preds = %239
  %243 = icmp eq i32 %231, 3
  br i1 %243, label %247, label %244

244:                                              ; preds = %242
  %245 = icmp eq i32 %240, 3
  %246 = select i1 %245, i32 %231, i32 3
  br label %247

247:                                              ; preds = %244, %242, %239
  %248 = phi i32 [ %231, %239 ], [ %240, %242 ], [ %246, %244 ]
  %249 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 2
  %250 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %249, align 8
  %251 = sext i32 %248 to i64
  %252 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %13, i64 0, i32 7
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i64
  %255 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %250, i64 0, i32 5, i64 %251, i64 %254
  %256 = load i32, i32* %255, align 4
  %257 = add i32 %256, 1
  store i32 %257, i32* %255, align 4
  br label %258

258:                                              ; preds = %247, %218
  %259 = load i8, i8* %15, align 4
  %260 = icmp ult i8 %259, 3
  br i1 %260, label %261, label %268

261:                                              ; preds = %258
  %262 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %13, i64 0, i32 10, i64 3, i32 1, i64 0, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %13, i64 0, i32 9, i64 0, i32 0
  store i32 %263, i32* %264, align 4
  %265 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %13, i64 0, i32 10, i64 3, i32 1, i64 1, i32 0
  %266 = load i32, i32* %265, align 4
  %267 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %13, i64 0, i32 9, i64 1, i32 0
  store i32 %266, i32* %267, align 4
  br label %268

268:                                              ; preds = %261, %258, %214
  %269 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 56
  %270 = load i32, i32* %269, align 16
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %272, label %289

272:                                              ; preds = %268
  %273 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 83
  %274 = load i32, i32* %273, align 16
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %289, label %276

276:                                              ; preds = %272
  %277 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 24
  %278 = load i32, i32* %277, align 16
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %366, label %280

280:                                              ; preds = %276
  %281 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %282 = load i32, i32* %281, align 8
  %283 = icmp sgt i32 %282, 1
  br i1 %283, label %284, label %366

284:                                              ; preds = %280
  %285 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %286 = load i32, i32* %285, align 16
  %287 = add nsw i32 %282, -1
  %288 = icmp eq i32 %286, %287
  br i1 %288, label %366, label %289

289:                                              ; preds = %284, %272, %268
  %290 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 14
  %291 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %290, align 8
  %292 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %291, i64 0, i32 1
  %293 = load %struct.MV_REF*, %struct.MV_REF** %292, align 8
  %294 = load i32, i32* %24, align 8
  %295 = mul nsw i32 %294, %4
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %293, i64 %296
  %298 = sext i32 %5 to i64
  %299 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %297, i64 %298
  %300 = icmp sgt i32 %33, 0
  br i1 %300, label %301, label %366

301:                                              ; preds = %289
  %302 = icmp sgt i32 %28, 0
  %303 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %13, i64 0, i32 8, i64 1
  %304 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %13, i64 0, i32 9, i64 0, i32 0
  %305 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %13, i64 0, i32 9, i64 1, i32 0
  %306 = sext i32 %28 to i64
  %307 = and i64 %306, 1
  %308 = icmp eq i32 %28, 1
  %309 = sub nsw i64 %306, %307
  %310 = icmp eq i64 %307, 0
  br label %311

311:                                              ; preds = %364, %301
  %312 = phi i32 [ %294, %301 ], [ %365, %364 ]
  %313 = phi i32 [ 0, %301 ], [ %362, %364 ]
  %314 = mul nsw i32 %313, %312
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %299, i64 %315
  br i1 %302, label %317, label %361

317:                                              ; preds = %311
  br i1 %308, label %347, label %318

318:                                              ; preds = %317, %318
  %319 = phi i64 [ %344, %318 ], [ 0, %317 ]
  %320 = phi i64 [ %345, %318 ], [ %309, %317 ]
  %321 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %316, i64 %319
  %322 = load i8, i8* %215, align 4
  %323 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %321, i64 0, i32 1
  %324 = getelementptr inbounds [2 x i8], [2 x i8]* %323, i64 0, i64 0
  store i8 %322, i8* %324, align 4
  %325 = load i8, i8* %303, align 1
  %326 = getelementptr inbounds [2 x i8], [2 x i8]* %323, i64 0, i64 1
  store i8 %325, i8* %326, align 1
  %327 = load i32, i32* %304, align 4
  %328 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %321, i64 0, i32 0, i64 0, i32 0
  store i32 %327, i32* %328, align 4
  %329 = load i32, i32* %305, align 4
  %330 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %321, i64 0, i32 0, i64 1
  %331 = getelementptr inbounds %union.int_mv, %union.int_mv* %330, i64 0, i32 0
  store i32 %329, i32* %331, align 4
  %332 = or i64 %319, 1
  %333 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %316, i64 %332
  %334 = load i8, i8* %215, align 4
  %335 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %333, i64 0, i32 1
  %336 = getelementptr inbounds [2 x i8], [2 x i8]* %335, i64 0, i64 0
  store i8 %334, i8* %336, align 4
  %337 = load i8, i8* %303, align 1
  %338 = getelementptr inbounds [2 x i8], [2 x i8]* %335, i64 0, i64 1
  store i8 %337, i8* %338, align 1
  %339 = load i32, i32* %304, align 4
  %340 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %333, i64 0, i32 0, i64 0, i32 0
  store i32 %339, i32* %340, align 4
  %341 = load i32, i32* %305, align 4
  %342 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %333, i64 0, i32 0, i64 1
  %343 = getelementptr inbounds %union.int_mv, %union.int_mv* %342, i64 0, i32 0
  store i32 %341, i32* %343, align 4
  %344 = add nuw nsw i64 %319, 2
  %345 = add i64 %320, -2
  %346 = icmp eq i64 %345, 0
  br i1 %346, label %347, label %318

347:                                              ; preds = %318, %317
  %348 = phi i64 [ 0, %317 ], [ %344, %318 ]
  br i1 %310, label %361, label %349

349:                                              ; preds = %347
  %350 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %316, i64 %348
  %351 = load i8, i8* %215, align 4
  %352 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %350, i64 0, i32 1
  %353 = getelementptr inbounds [2 x i8], [2 x i8]* %352, i64 0, i64 0
  store i8 %351, i8* %353, align 4
  %354 = load i8, i8* %303, align 1
  %355 = getelementptr inbounds [2 x i8], [2 x i8]* %352, i64 0, i64 1
  store i8 %354, i8* %355, align 1
  %356 = load i32, i32* %304, align 4
  %357 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %350, i64 0, i32 0, i64 0, i32 0
  store i32 %356, i32* %357, align 4
  %358 = load i32, i32* %305, align 4
  %359 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %350, i64 0, i32 0, i64 1
  %360 = getelementptr inbounds %union.int_mv, %union.int_mv* %359, i64 0, i32 0
  store i32 %358, i32* %360, align 4
  br label %361

361:                                              ; preds = %349, %347, %311
  %362 = add nuw nsw i32 %313, 1
  %363 = icmp slt i32 %362, %33
  br i1 %363, label %364, label %366

364:                                              ; preds = %361
  %365 = load i32, i32* %24, align 8
  br label %311

366:                                              ; preds = %361, %289, %284, %280, %276
  %367 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %8, i64 0, i32 13
  %368 = load i32, i32* %367, align 8
  %369 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 39
  store i32 %368, i32* %369, align 16
  %370 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %13, i64 0, i32 4
  %371 = load i8, i8* %370, align 4
  %372 = icmp eq i8 %371, 0
  br i1 %372, label %373, label %380

373:                                              ; preds = %366
  %374 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 24
  %375 = load i32, i32* %374, align 4
  %376 = icmp eq i32 %375, 0
  br i1 %376, label %377, label %380

377:                                              ; preds = %373
  %378 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %8, i64 0, i32 16, i64 0
  %379 = load i8, i8* %378, align 4
  br label %380

380:                                              ; preds = %366, %373, %377
  %381 = phi i8 [ %379, %377 ], [ 0, %373 ], [ 0, %366 ]
  %382 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 47, i64 0
  store i8 %381, i8* %382, align 4
  %383 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1
  %384 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %11, align 8
  %385 = load %struct.MODE_INFO*, %struct.MODE_INFO** %384, align 8
  %386 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 4
  %387 = load i8, i8* %40, align 4
  %388 = icmp eq i8 %387, 0
  br i1 %388, label %396, label %389

389:                                              ; preds = %380
  %390 = load i8, i8* %386, align 4
  %391 = sext i8 %390 to i64
  %392 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %391
  %393 = load i32, i32* %392, align 4
  %394 = lshr i32 %393, 3
  %395 = and i32 %394, 1
  br label %396

396:                                              ; preds = %389, %380
  %397 = phi i32 [ 0, %380 ], [ %395, %389 ]
  %398 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 5
  %399 = load i32, i32* %398, align 4
  %400 = icmp eq i32 %399, 0
  br i1 %400, label %401, label %410

401:                                              ; preds = %396
  %402 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 0
  %403 = load i8, i8* %402, align 4
  %404 = icmp ugt i8 %403, 2
  br i1 %404, label %405, label %410

405:                                              ; preds = %401
  %406 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 31
  %407 = load i32, i32* %406, align 4
  %408 = and i32 %407, -2
  %409 = icmp eq i32 %408, 2
  br i1 %409, label %410, label %412

410:                                              ; preds = %405, %401, %396
  %411 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 6
  store i32 0, i32* %411, align 8
  br label %418

412:                                              ; preds = %405
  %413 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 10
  %414 = load i32, i32* %413, align 8
  %415 = icmp ne i32 %414, 0
  %416 = zext i1 %415 to i32
  %417 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 6
  store i32 %416, i32* %417, align 8
  br i1 %415, label %423, label %418

418:                                              ; preds = %412, %410
  %419 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 61
  %420 = load i32, i32* %419, align 4
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %422, label %423

422:                                              ; preds = %418
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %382, i8 0, i64 12, i1 false) #8
  br label %423

423:                                              ; preds = %422, %418, %412
  %424 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %8, i64 0, i32 11
  %425 = load i32, i32* %424, align 8
  %426 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 7
  store i32 %425, i32* %426, align 4
  store i32 1, i32* %424, align 8
  %427 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 21
  %428 = load i32, i32* %427, align 4
  %429 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 43
  store i32 %428, i32* %429, align 4
  %430 = icmp ne i32 %6, 0
  br i1 %430, label %435, label %431

431:                                              ; preds = %423
  %432 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 9
  %433 = load i32, i32* %432, align 4
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %435, label %437

435:                                              ; preds = %431, %423
  %436 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 44
  store i32 0, i32* %436, align 16
  br label %443

437:                                              ; preds = %431
  %438 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 8
  %439 = load i32, i32* %438, align 16
  %440 = icmp slt i32 %439, 115
  %441 = zext i1 %440 to i32
  %442 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 44
  store i32 %441, i32* %442, align 16
  br i1 %440, label %785, label %443

443:                                              ; preds = %437, %435
  %444 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 8, i64 0
  %445 = load i8, i8* %444, align 4
  %446 = icmp sgt i8 %445, 0
  br i1 %446, label %494, label %447

447:                                              ; preds = %443
  %448 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 3
  store i8 1, i8* %448, align 1
  %449 = icmp ugt i8 %7, 3
  %450 = select i1 %449, i8 %7, i8 3
  tail call void @vp9_encode_intra_block_plane(%struct.macroblock* %10, i8 zeroext %450, i32 0, i32 1) #8
  tail call void @vp9_encode_intra_block_plane(%struct.macroblock* %10, i8 zeroext %450, i32 1, i32 1) #8
  tail call void @vp9_encode_intra_block_plane(%struct.macroblock* %10, i8 zeroext %450, i32 2, i32 1) #8
  br i1 %430, label %451, label %782

451:                                              ; preds = %447
  %452 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 2
  %453 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %452, align 8
  %454 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 1
  %455 = load i8, i8* %454, align 1
  %456 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 6
  %457 = load i8, i8* %456, align 2
  %458 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 0
  %459 = load i8, i8* %458, align 4
  %460 = icmp ult i8 %459, 3
  %461 = zext i8 %459 to i64
  br i1 %460, label %462, label %478

462:                                              ; preds = %451
  %463 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %461
  %464 = load i8, i8* %463, align 1
  %465 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %461
  %466 = load i8, i8* %465, align 1
  %467 = zext i8 %464 to i64
  %468 = zext i8 %466 to i64
  %469 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 10, i64 0, i32 0
  %470 = load i8, i8* %469, align 4
  %471 = zext i8 %470 to i64
  %472 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %453, i64 0, i32 0, i64 0, i64 %471
  %473 = load i32, i32* %472, align 4
  %474 = add i32 %473, 1
  store i32 %474, i32* %472, align 4
  %475 = icmp ult i8 %464, 2
  br i1 %475, label %1035, label %476

476:                                              ; preds = %1043, %1035, %462
  %477 = icmp ult i8 %466, 2
  br i1 %477, label %1051, label %486

478:                                              ; preds = %451
  %479 = getelementptr inbounds [13 x i8], [13 x i8]* @size_group_lookup, i64 0, i64 %461
  %480 = load i8, i8* %479, align 1
  %481 = zext i8 %480 to i64
  %482 = zext i8 %455 to i64
  %483 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %453, i64 0, i32 0, i64 %481, i64 %482
  %484 = load i32, i32* %483, align 4
  %485 = add i32 %484, 1
  store i32 %485, i32* %483, align 4
  br label %488

486:                                              ; preds = %1080, %1089, %1098, %1078, %476
  %487 = zext i8 %455 to i64
  br label %488

488:                                              ; preds = %486, %478
  %489 = phi i64 [ %487, %486 ], [ %482, %478 ]
  %490 = zext i8 %457 to i64
  %491 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %453, i64 0, i32 1, i64 %489, i64 %490
  %492 = load i32, i32* %491, align 4
  %493 = add i32 %492, 1
  store i32 %493, i32* %491, align 4
  br label %555

494:                                              ; preds = %443
  %495 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 8, i64 1
  %496 = load i8, i8* %495, align 1
  %497 = icmp sgt i8 %496, 0
  %498 = sext i8 %445 to i64
  %499 = add nsw i64 %498, -1
  %500 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 %499
  %501 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 17, i64 0
  store %struct.RefBuffer* %500, %struct.RefBuffer** %501, align 8
  %502 = sext i8 %496 to i64
  %503 = add nsw i64 %502, -1
  %504 = select i1 %497, i64 %503, i64 0
  %505 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 %504
  %506 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 17, i64 1
  store %struct.RefBuffer* %505, %struct.RefBuffer** %506, align 8
  %507 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 37
  %508 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 36
  %509 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 38
  %510 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 89
  %511 = select i1 %497, i64 2, i64 1
  br label %512

512:                                              ; preds = %531, %494
  %513 = phi i64 [ %537, %531 ], [ 0, %494 ]
  %514 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 8, i64 %513
  %515 = load i8, i8* %514, align 1
  switch i8 %515, label %517 [
    i8 1, label %518
    i8 2, label %516
  ]

516:                                              ; preds = %512
  br label %518

517:                                              ; preds = %512
  br label %518

518:                                              ; preds = %517, %516, %512
  %519 = phi i32* [ %507, %516 ], [ %509, %517 ], [ %508, %512 ]
  %520 = load i32, i32* %519, align 4
  %521 = icmp eq i32 %520, -1
  br i1 %521, label %531, label %522

522:                                              ; preds = %518
  %523 = sext i32 %520 to i64
  %524 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 15, i64 %523
  %525 = load i32, i32* %524, align 4
  %526 = icmp eq i32 %525, -1
  br i1 %526, label %531, label %527

527:                                              ; preds = %522
  %528 = load %struct.BufferPool*, %struct.BufferPool** %510, align 8
  %529 = sext i32 %525 to i64
  %530 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %528, i64 0, i32 3, i64 %529, i32 8
  br label %531

531:                                              ; preds = %527, %522, %518
  %532 = phi %struct.yv12_buffer_config* [ %530, %527 ], [ null, %522 ], [ null, %518 ]
  %533 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 17, i64 %513
  %534 = load %struct.RefBuffer*, %struct.RefBuffer** %533, align 8
  %535 = getelementptr inbounds %struct.RefBuffer, %struct.RefBuffer* %534, i64 0, i32 2
  %536 = trunc i64 %513 to i32
  tail call void @vp9_setup_pre_planes(%struct.macroblockd* %383, i32 %536, %struct.yv12_buffer_config* %532, i32 %4, i32 %5, %struct.scale_factors* %535) #8
  %537 = add nuw nsw i64 %513, 1
  %538 = icmp eq i64 %537, %511
  br i1 %538, label %539, label %512

539:                                              ; preds = %531
  %540 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 68
  %541 = load i32, i32* %540, align 8
  %542 = icmp eq i32 %541, 0
  br i1 %542, label %549, label %543

543:                                              ; preds = %539
  %544 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %8, i64 0, i32 14
  %545 = load i32, i32* %544, align 4
  %546 = icmp eq i32 %545, 0
  %547 = icmp ne i32 %397, 0
  %548 = or i1 %547, %546
  br i1 %548, label %549, label %552

549:                                              ; preds = %543, %539
  %550 = icmp ugt i8 %7, 3
  %551 = select i1 %550, i8 %7, i8 3
  tail call void @vp9_build_inter_predictors_sby(%struct.macroblockd* %383, i32 %4, i32 %5, i8 zeroext %551) #8
  br label %552

552:                                              ; preds = %543, %549
  %553 = icmp ugt i8 %7, 3
  %554 = select i1 %553, i8 %7, i8 3
  tail call void @vp9_build_inter_predictors_sbuv(%struct.macroblockd* %383, i32 %4, i32 %5, i8 zeroext %554) #8
  tail call void @vp9_encode_sb(%struct.macroblock* %10, i8 zeroext %554, i32 %4, i32 %5, i32 %6) #8
  br label %555

555:                                              ; preds = %488, %552
  %556 = phi i8 [ %554, %552 ], [ %450, %488 ]
  %557 = xor i1 %430, true
  %558 = zext i1 %557 to i32
  tail call void @vp9_tokenize_sb(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TOKENEXTRA** %3, i32 %558, i32 %397, i8 zeroext %556) #8
  br i1 %430, label %559, label %785

559:                                              ; preds = %555
  %560 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 37
  %561 = load i32, i32* %560, align 16
  %562 = icmp eq i32 %561, 4
  br i1 %562, label %563, label %636

563:                                              ; preds = %559
  %564 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 0
  %565 = load i8, i8* %564, align 4
  %566 = icmp ugt i8 %565, 2
  br i1 %566, label %567, label %636

567:                                              ; preds = %563
  %568 = load i8, i8* %444, align 4
  %569 = icmp slt i8 %568, 1
  br i1 %569, label %574, label %570

570:                                              ; preds = %567
  %571 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 3
  %572 = load i8, i8* %571, align 1
  %573 = icmp eq i8 %572, 0
  br i1 %573, label %574, label %636

574:                                              ; preds = %570, %567
  %575 = zext i8 %7 to i64
  %576 = getelementptr inbounds [13 x i8], [13 x i8]* @max_txsize_lookup, i64 0, i64 %575
  %577 = load i8, i8* %576, align 1
  %578 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %11, align 8
  %579 = load %struct.MODE_INFO*, %struct.MODE_INFO** %578, align 8
  %580 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %579, i64 0, i32 0
  %581 = load i8, i8* %580, align 4
  %582 = zext i8 %581 to i64
  %583 = getelementptr inbounds [13 x i8], [13 x i8]* @max_txsize_lookup, i64 0, i64 %582
  %584 = load i8, i8* %583, align 1
  %585 = zext i8 %584 to i32
  %586 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 8
  %587 = load %struct.MODE_INFO*, %struct.MODE_INFO** %586, align 8
  %588 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 7
  %589 = load %struct.MODE_INFO*, %struct.MODE_INFO** %588, align 8
  %590 = icmp ne %struct.MODE_INFO* %587, null
  %591 = icmp ne %struct.MODE_INFO* %589, null
  br i1 %590, label %592, label %600

592:                                              ; preds = %574
  %593 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %587, i64 0, i32 3
  %594 = load i8, i8* %593, align 1
  %595 = icmp eq i8 %594, 0
  br i1 %595, label %596, label %600

596:                                              ; preds = %592
  %597 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %587, i64 0, i32 2
  %598 = load i8, i8* %597, align 2
  %599 = zext i8 %598 to i32
  br label %600

600:                                              ; preds = %596, %592, %574
  %601 = phi i32 [ %599, %596 ], [ %585, %592 ], [ %585, %574 ]
  br i1 %591, label %602, label %610

602:                                              ; preds = %600
  %603 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %589, i64 0, i32 3
  %604 = load i8, i8* %603, align 1
  %605 = icmp eq i8 %604, 0
  br i1 %605, label %606, label %610

606:                                              ; preds = %602
  %607 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %589, i64 0, i32 2
  %608 = load i8, i8* %607, align 2
  %609 = zext i8 %608 to i32
  br label %610

610:                                              ; preds = %606, %602, %600
  %611 = phi i32 [ %609, %606 ], [ %585, %602 ], [ %585, %600 ]
  %612 = select i1 %591, i32 %611, i32 %601
  %613 = select i1 %590, i32 %601, i32 %612
  %614 = add nuw nsw i32 %613, %612
  %615 = icmp ugt i32 %614, %585
  %616 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 2
  %617 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %616, align 8
  switch i8 %577, label %627 [
    i8 1, label %618
    i8 2, label %621
    i8 3, label %624
  ]

618:                                              ; preds = %610
  %619 = zext i1 %615 to i64
  %620 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %617, i64 0, i32 11, i32 2, i64 %619, i64 0
  br label %627

621:                                              ; preds = %610
  %622 = zext i1 %615 to i64
  %623 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %617, i64 0, i32 11, i32 1, i64 %622, i64 0
  br label %627

624:                                              ; preds = %610
  %625 = zext i1 %615 to i64
  %626 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %617, i64 0, i32 11, i32 0, i64 %625, i64 0
  br label %627

627:                                              ; preds = %624, %621, %618, %610
  %628 = phi i32* [ %626, %624 ], [ %623, %621 ], [ %620, %618 ], [ null, %610 ]
  %629 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 2
  %630 = load i8, i8* %629, align 2
  %631 = zext i8 %630 to i64
  %632 = getelementptr inbounds i32, i32* %628, i64 %631
  %633 = load i32, i32* %632, align 4
  %634 = add i32 %633, 1
  store i32 %634, i32* %632, align 4
  %635 = load i8, i8* %629, align 2
  br label %657

636:                                              ; preds = %570, %563, %559
  %637 = load i8, i8* %444, align 4
  %638 = icmp slt i8 %637, 1
  br i1 %638, label %649, label %639

639:                                              ; preds = %636
  %640 = zext i32 %561 to i64
  %641 = getelementptr inbounds [5 x i8], [5 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %640
  %642 = load i8, i8* %641, align 1
  %643 = zext i8 %7 to i64
  %644 = getelementptr inbounds [13 x i8], [13 x i8]* @max_txsize_lookup, i64 0, i64 %643
  %645 = load i8, i8* %644, align 1
  %646 = icmp ult i8 %642, %645
  %647 = select i1 %646, i8 %642, i8 %645
  %648 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 2
  store i8 %647, i8* %648, align 2
  br label %657

649:                                              ; preds = %636
  %650 = icmp ugt i8 %7, 2
  br i1 %650, label %651, label %654

651:                                              ; preds = %649
  %652 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 2
  %653 = load i8, i8* %652, align 2
  br label %654

654:                                              ; preds = %651, %649
  %655 = phi i8 [ %653, %651 ], [ 0, %649 ]
  %656 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 2
  store i8 %655, i8* %656, align 2
  br label %657

657:                                              ; preds = %654, %639, %627
  %658 = phi i8 [ %647, %639 ], [ %655, %654 ], [ %635, %627 ]
  %659 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 2
  %660 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %659, align 8
  %661 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 2
  %662 = zext i8 %658 to i64
  %663 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %660, i64 0, i32 11, i32 3, i64 %662
  %664 = load i32, i32* %663, align 4
  %665 = add i32 %664, 1
  store i32 %665, i32* %663, align 4
  %666 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %659, align 8
  %667 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 0
  %668 = load i8, i8* %667, align 4
  %669 = zext i8 %668 to i64
  %670 = load i8, i8* %661, align 2
  %671 = zext i8 %670 to i64
  %672 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 0, i64 1, i32 1
  %673 = load i32, i32* %672, align 8
  %674 = sext i32 %673 to i64
  %675 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 0, i64 1, i32 2
  %676 = load i32, i32* %675, align 4
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds [13 x [4 x [2 x [2 x i8]]]], [13 x [4 x [2 x [2 x i8]]]]* @uv_txsize_lookup, i64 0, i64 %669, i64 %671, i64 %674, i64 %677
  %679 = load i8, i8* %678, align 1
  %680 = zext i8 %679 to i64
  %681 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %666, i64 0, i32 11, i32 3, i64 %680
  %682 = load i32, i32* %681, align 4
  %683 = add i32 %682, 1
  store i32 %683, i32* %681, align 4
  %684 = load i8, i8* %40, align 8
  %685 = icmp eq i8 %684, 0
  br i1 %685, label %691, label %686

686:                                              ; preds = %657
  %687 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 31
  %688 = load i32, i32* %687, align 4
  %689 = icmp eq i32 %688, 3
  br i1 %689, label %690, label %691

690:                                              ; preds = %686
  tail call void @vp9_cyclic_refresh_update_sb_postencode(%struct.VP9_COMP* %0, %struct.MODE_INFO* %385, i32 %4, i32 %5, i8 zeroext %7) #8
  br label %691

691:                                              ; preds = %690, %686, %657
  %692 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 16
  %693 = load i32, i32* %692, align 4
  %694 = icmp eq i32 %693, 0
  br i1 %694, label %695, label %785

695:                                              ; preds = %691
  %696 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 1
  %697 = load i32, i32* %696, align 4
  %698 = icmp eq i32 %697, 0
  br i1 %698, label %699, label %785

699:                                              ; preds = %695
  %700 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %701 = load i32, i32* %700, align 4
  %702 = icmp eq i32 %701, 0
  br i1 %702, label %714, label %703

703:                                              ; preds = %699
  %704 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 12, i64 0, i32 14
  %705 = load i32, i32* %704, align 4
  %706 = icmp eq i32 %705, 0
  br i1 %706, label %707, label %785

707:                                              ; preds = %703
  %708 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %709 = load i32, i32* %708, align 16
  %710 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %711 = load i32, i32* %710, align 8
  %712 = add nsw i32 %711, -1
  %713 = icmp eq i32 %709, %712
  br i1 %713, label %714, label %785

714:                                              ; preds = %707, %699
  %715 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 9, i64 0
  %716 = zext i8 %7 to i64
  %717 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %716
  %718 = load i8, i8* %717, align 1
  %719 = zext i8 %718 to i32
  %720 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %716
  %721 = load i8, i8* %720, align 1
  %722 = zext i8 %721 to i32
  %723 = load i32, i32* %24, align 8
  %724 = sub nsw i32 %723, %5
  %725 = icmp slt i32 %724, %719
  %726 = select i1 %725, i32 %724, i32 %719
  %727 = load i32, i32* %29, align 16
  %728 = sub nsw i32 %727, %4
  %729 = icmp slt i32 %728, %722
  %730 = select i1 %729, i32 %728, i32 %722
  %731 = mul nsw i32 %723, %4
  %732 = add nsw i32 %731, %5
  %733 = icmp sgt i32 %730, 0
  br i1 %733, label %734, label %785

734:                                              ; preds = %714
  %735 = bitcast %union.int_mv* %715 to %struct.mv*
  %736 = getelementptr inbounds %struct.mv, %struct.mv* %735, i64 0, i32 1
  %737 = load i16, i16* %736, align 2
  %738 = bitcast %union.int_mv* %715 to i16*
  %739 = load i16, i16* %738, align 4
  %740 = icmp sgt i32 %726, 0
  %741 = sext i16 %739 to i32
  %742 = icmp slt i32 %741, 0
  %743 = sub nsw i32 0, %741
  %744 = select i1 %742, i32 %743, i32 %741
  %745 = icmp sgt i32 %744, 7
  %746 = sext i16 %737 to i32
  %747 = icmp slt i32 %746, 0
  %748 = sub nsw i32 0, %746
  %749 = select i1 %747, i32 %748, i32 %746
  %750 = icmp sgt i32 %749, 7
  %751 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 129
  %752 = or i1 %750, %745
  br label %753

753:                                              ; preds = %779, %734
  %754 = phi i32 [ 0, %734 ], [ %780, %779 ]
  br i1 %740, label %755, label %779

755:                                              ; preds = %753, %776
  %756 = phi i32 [ %777, %776 ], [ 0, %753 ]
  %757 = load i32, i32* %24, align 8
  %758 = mul nsw i32 %757, %754
  %759 = add i32 %732, %756
  %760 = add i32 %759, %758
  %761 = load i8, i8* %444, align 4
  %762 = icmp eq i8 %761, 1
  br i1 %762, label %763, label %776

763:                                              ; preds = %755
  %764 = load i8, i8* %386, align 4
  %765 = icmp slt i8 %764, 3
  br i1 %765, label %766, label %776

766:                                              ; preds = %763
  %767 = load i8*, i8** %751, align 16
  %768 = sext i32 %760 to i64
  %769 = getelementptr inbounds i8, i8* %767, i64 %768
  br i1 %752, label %775, label %770

770:                                              ; preds = %766
  %771 = load i8, i8* %769, align 1
  %772 = icmp eq i8 %771, -1
  br i1 %772, label %776, label %773

773:                                              ; preds = %770
  %774 = add nuw i8 %771, 1
  store i8 %774, i8* %769, align 1
  br label %776

775:                                              ; preds = %766
  store i8 0, i8* %769, align 1
  br label %776

776:                                              ; preds = %775, %773, %770, %763, %755
  %777 = add nuw nsw i32 %756, 1
  %778 = icmp slt i32 %777, %726
  br i1 %778, label %755, label %779

779:                                              ; preds = %776, %753
  %780 = add nuw nsw i32 %754, 1
  %781 = icmp slt i32 %780, %730
  br i1 %781, label %753, label %785

782:                                              ; preds = %447
  %783 = xor i1 %430, true
  %784 = zext i1 %783 to i32
  tail call void @vp9_tokenize_sb(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TOKENEXTRA** %3, i32 %784, i32 %397, i8 zeroext %450) #8
  br label %785

785:                                              ; preds = %779, %782, %437, %555, %691, %695, %703, %707, %714
  %786 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8
  %787 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %11, align 8
  %788 = load %struct.MODE_INFO*, %struct.MODE_INFO** %787, align 8
  %789 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %35, align 16
  %790 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 0
  %791 = load i8, i8* %790, align 4
  %792 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %793 = load i32, i32* %792, align 4
  %794 = icmp eq i32 %793, 0
  br i1 %794, label %950, label %795

795:                                              ; preds = %785
  %796 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %797 = load i8, i8* %796, align 4
  %798 = icmp eq i8 %797, 0
  br i1 %798, label %799, label %950

799:                                              ; preds = %795
  %800 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 2
  %801 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %800, align 8
  %802 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 8, i64 0
  %803 = load i8, i8* %802, align 4
  %804 = icmp sgt i8 %803, 0
  %805 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 4
  %806 = load i8, i8* %40, align 4
  %807 = icmp eq i8 %806, 0
  br i1 %807, label %815, label %808

808:                                              ; preds = %799
  %809 = load i8, i8* %805, align 4
  %810 = sext i8 %809 to i64
  %811 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %810
  %812 = load i32, i32* %811, align 4
  %813 = and i32 %812, 4
  %814 = icmp eq i32 %813, 0
  br i1 %814, label %815, label %905

815:                                              ; preds = %808, %799
  %816 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 8
  %817 = load %struct.MODE_INFO*, %struct.MODE_INFO** %816, align 8
  %818 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 7
  %819 = load %struct.MODE_INFO*, %struct.MODE_INFO** %818, align 8
  %820 = icmp ne %struct.MODE_INFO* %817, null
  %821 = icmp ne %struct.MODE_INFO* %819, null
  %822 = and i1 %820, %821
  br i1 %822, label %823, label %835

823:                                              ; preds = %815
  %824 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %817, i64 0, i32 8, i64 0
  %825 = load i8, i8* %824, align 4
  %826 = icmp sgt i8 %825, 0
  %827 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %819, i64 0, i32 8, i64 0
  %828 = load i8, i8* %827, align 4
  %829 = icmp sgt i8 %828, 0
  %830 = or i1 %826, %829
  br i1 %830, label %831, label %844

831:                                              ; preds = %823
  %832 = and i1 %826, %829
  %833 = xor i1 %832, true
  %834 = zext i1 %833 to i32
  br label %844

835:                                              ; preds = %815
  %836 = or i1 %820, %821
  br i1 %836, label %837, label %844

837:                                              ; preds = %835
  %838 = select i1 %820, %struct.MODE_INFO* %817, %struct.MODE_INFO* %819
  %839 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %838, i64 0, i32 8, i64 0
  %840 = load i8, i8* %839, align 4
  %841 = icmp slt i8 %840, 1
  %842 = zext i1 %841 to i32
  %843 = shl nuw nsw i32 %842, 1
  br label %844

844:                                              ; preds = %837, %835, %831, %823
  %845 = phi i32 [ %843, %837 ], [ %834, %831 ], [ 3, %823 ], [ 0, %835 ]
  %846 = sext i32 %845 to i64
  %847 = zext i1 %804 to i64
  %848 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %801, i64 0, i32 7, i64 %846, i64 %847
  %849 = load i32, i32* %848, align 4
  %850 = add i32 %849, 1
  store i32 %850, i32* %848, align 4
  br i1 %804, label %851, label %950

851:                                              ; preds = %844
  %852 = load i8, i8* %802, align 4
  %853 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 72
  %854 = load i32, i32* %853, align 16
  %855 = icmp eq i32 %854, 2
  br i1 %855, label %856, label %866

856:                                              ; preds = %851
  %857 = tail call i32 @vp9_get_reference_mode_context(%struct.VP9Common* %786, %struct.macroblockd* %383) #8
  %858 = sext i32 %857 to i64
  %859 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 8, i64 1
  %860 = load i8, i8* %859, align 1
  %861 = icmp sgt i8 %860, 0
  %862 = zext i1 %861 to i64
  %863 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %801, i64 0, i32 8, i64 %858, i64 %862
  %864 = load i32, i32* %863, align 4
  %865 = add i32 %864, 1
  store i32 %865, i32* %863, align 4
  br label %866

866:                                              ; preds = %856, %851
  %867 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 8, i64 1
  %868 = load i8, i8* %867, align 1
  %869 = icmp slt i8 %868, 1
  br i1 %869, label %889, label %870

870:                                              ; preds = %866
  %871 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 70
  %872 = load i8, i8* %871, align 4
  %873 = sext i8 %872 to i64
  %874 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 67, i64 %873
  %875 = load i32, i32* %874, align 4
  %876 = tail call i32 @vp9_get_pred_context_comp_ref_p(%struct.VP9Common* %786, %struct.macroblockd* %383) #8
  %877 = icmp eq i32 %875, 0
  %878 = zext i1 %877 to i64
  %879 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 8, i64 %878
  %880 = load i8, i8* %879, align 1
  %881 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 71, i64 1
  %882 = load i8, i8* %881, align 1
  %883 = icmp eq i8 %880, %882
  %884 = sext i32 %876 to i64
  %885 = zext i1 %883 to i64
  %886 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %801, i64 0, i32 10, i64 %884, i64 %885
  %887 = load i32, i32* %886, align 4
  %888 = add i32 %887, 1
  store i32 %888, i32* %886, align 4
  br label %906

889:                                              ; preds = %866
  %890 = tail call i32 @vp9_get_pred_context_single_ref_p1(%struct.macroblockd* %383) #8
  %891 = sext i32 %890 to i64
  %892 = icmp ne i8 %852, 1
  %893 = zext i1 %892 to i64
  %894 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %801, i64 0, i32 9, i64 %891, i64 0, i64 %893
  %895 = load i32, i32* %894, align 4
  %896 = add i32 %895, 1
  store i32 %896, i32* %894, align 4
  br i1 %892, label %897, label %906

897:                                              ; preds = %889
  %898 = tail call i32 @vp9_get_pred_context_single_ref_p2(%struct.macroblockd* %383) #8
  %899 = sext i32 %898 to i64
  %900 = icmp ne i8 %852, 2
  %901 = zext i1 %900 to i64
  %902 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %801, i64 0, i32 9, i64 %899, i64 1, i64 %901
  %903 = load i32, i32* %902, align 4
  %904 = add i32 %903, 1
  store i32 %904, i32* %902, align 4
  br label %906

905:                                              ; preds = %808
  br i1 %804, label %906, label %950

906:                                              ; preds = %905, %897, %889, %870
  %907 = load i8, i8* %40, align 4
  %908 = icmp eq i8 %907, 0
  br i1 %908, label %916, label %909

909:                                              ; preds = %906
  %910 = load i8, i8* %805, align 4
  %911 = sext i8 %910 to i64
  %912 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %911
  %913 = load i32, i32* %912, align 4
  %914 = and i32 %913, 8
  %915 = icmp eq i32 %914, 0
  br i1 %915, label %916, label %950

916:                                              ; preds = %909, %906
  %917 = load i8, i8* %802, align 4
  %918 = sext i8 %917 to i64
  %919 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %789, i64 0, i32 1, i64 %918
  %920 = load i8, i8* %919, align 1
  %921 = icmp ugt i8 %791, 2
  br i1 %921, label %922, label %931

922:                                              ; preds = %916
  %923 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 1
  %924 = load i8, i8* %923, align 1
  %925 = zext i8 %920 to i64
  %926 = zext i8 %924 to i64
  %927 = add nsw i64 %926, -10
  %928 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %801, i64 0, i32 6, i64 %925, i64 %927
  %929 = load i32, i32* %928, align 4
  %930 = add i32 %929, 1
  store i32 %930, i32* %928, align 4
  br label %950

931:                                              ; preds = %916
  %932 = zext i8 %791 to i64
  %933 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %932
  %934 = load i8, i8* %933, align 1
  %935 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %932
  %936 = load i8, i8* %935, align 1
  %937 = zext i8 %920 to i64
  %938 = zext i8 %934 to i64
  %939 = zext i8 %936 to i64
  %940 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 10, i64 0, i32 0
  %941 = load i8, i8* %940, align 4
  %942 = zext i8 %941 to i64
  %943 = add nsw i64 %942, -10
  %944 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %801, i64 0, i32 6, i64 %937, i64 %943
  %945 = load i32, i32* %944, align 4
  %946 = add i32 %945, 1
  store i32 %946, i32* %944, align 4
  %947 = icmp ult i8 %934, 2
  br i1 %947, label %955, label %948

948:                                              ; preds = %964, %955, %931
  %949 = icmp ult i8 %936, 2
  br i1 %949, label %973, label %950

950:                                              ; preds = %1005, %1015, %1025, %948, %1003, %785, %795, %844, %905, %909, %922
  %951 = load %struct.TOKENEXTRA*, %struct.TOKENEXTRA** %3, align 8
  %952 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %951, i64 0, i32 1
  store i16 127, i16* %952, align 8
  %953 = load %struct.TOKENEXTRA*, %struct.TOKENEXTRA** %3, align 8
  %954 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %953, i64 1
  store %struct.TOKENEXTRA* %954, %struct.TOKENEXTRA** %3, align 8
  ret void

955:                                              ; preds = %931
  %956 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 10, i64 %938, i32 0
  %957 = load i8, i8* %956, align 4
  %958 = zext i8 %957 to i64
  %959 = add nsw i64 %958, -10
  %960 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %801, i64 0, i32 6, i64 %937, i64 %959
  %961 = load i32, i32* %960, align 4
  %962 = add i32 %961, 1
  store i32 %962, i32* %960, align 4
  %963 = icmp eq i8 %934, 0
  br i1 %963, label %964, label %948

964:                                              ; preds = %955
  %965 = shl nuw nsw i64 %938, 1
  %966 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 10, i64 %965, i32 0
  %967 = load i8, i8* %966, align 4
  %968 = zext i8 %967 to i64
  %969 = add nsw i64 %968, -10
  %970 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %801, i64 0, i32 6, i64 %937, i64 %969
  %971 = load i32, i32* %970, align 4
  %972 = add i32 %971, 1
  store i32 %972, i32* %970, align 4
  br label %948

973:                                              ; preds = %948
  %974 = shl nuw nsw i64 %939, 1
  %975 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 10, i64 %974, i32 0
  %976 = load i8, i8* %975, align 4
  %977 = zext i8 %976 to i64
  %978 = add nsw i64 %977, -10
  %979 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %801, i64 0, i32 6, i64 %937, i64 %978
  %980 = load i32, i32* %979, align 4
  %981 = add i32 %980, 1
  store i32 %981, i32* %979, align 4
  %982 = icmp ult i8 %934, 2
  br i1 %982, label %983, label %1003

983:                                              ; preds = %973
  %984 = add nuw nsw i64 %974, %938
  %985 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 10, i64 %984, i32 0
  %986 = load i8, i8* %985, align 4
  %987 = zext i8 %986 to i64
  %988 = add nsw i64 %987, -10
  %989 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %801, i64 0, i32 6, i64 %937, i64 %988
  %990 = load i32, i32* %989, align 4
  %991 = add i32 %990, 1
  store i32 %991, i32* %989, align 4
  %992 = icmp eq i8 %934, 0
  br i1 %992, label %993, label %1003

993:                                              ; preds = %983
  %994 = shl nuw nsw i64 %938, 1
  %995 = add nuw nsw i64 %994, %974
  %996 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 10, i64 %995, i32 0
  %997 = load i8, i8* %996, align 4
  %998 = zext i8 %997 to i64
  %999 = add nsw i64 %998, -10
  %1000 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %801, i64 0, i32 6, i64 %937, i64 %999
  %1001 = load i32, i32* %1000, align 4
  %1002 = add i32 %1001, 1
  store i32 %1002, i32* %1000, align 4
  br label %1003

1003:                                             ; preds = %993, %983, %973
  %1004 = icmp eq i8 %936, 0
  br i1 %1004, label %1005, label %950

1005:                                             ; preds = %1003
  %1006 = shl nuw nsw i64 %939, 2
  %1007 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 10, i64 %1006, i32 0
  %1008 = load i8, i8* %1007, align 4
  %1009 = zext i8 %1008 to i64
  %1010 = add nsw i64 %1009, -10
  %1011 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %801, i64 0, i32 6, i64 %937, i64 %1010
  %1012 = load i32, i32* %1011, align 4
  %1013 = add i32 %1012, 1
  store i32 %1013, i32* %1011, align 4
  %1014 = icmp ult i8 %934, 2
  br i1 %1014, label %1015, label %950

1015:                                             ; preds = %1005
  %1016 = add nuw nsw i64 %1006, %938
  %1017 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 10, i64 %1016, i32 0
  %1018 = load i8, i8* %1017, align 4
  %1019 = zext i8 %1018 to i64
  %1020 = add nsw i64 %1019, -10
  %1021 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %801, i64 0, i32 6, i64 %937, i64 %1020
  %1022 = load i32, i32* %1021, align 4
  %1023 = add i32 %1022, 1
  store i32 %1023, i32* %1021, align 4
  %1024 = icmp eq i8 %934, 0
  br i1 %1024, label %1025, label %950

1025:                                             ; preds = %1015
  %1026 = shl nuw nsw i64 %938, 1
  %1027 = add nuw nsw i64 %1026, %1006
  %1028 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %788, i64 0, i32 10, i64 %1027, i32 0
  %1029 = load i8, i8* %1028, align 4
  %1030 = zext i8 %1029 to i64
  %1031 = add nsw i64 %1030, -10
  %1032 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %801, i64 0, i32 6, i64 %937, i64 %1031
  %1033 = load i32, i32* %1032, align 4
  %1034 = add i32 %1033, 1
  store i32 %1034, i32* %1032, align 4
  br label %950

1035:                                             ; preds = %462
  %1036 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 10, i64 %467, i32 0
  %1037 = load i8, i8* %1036, align 4
  %1038 = zext i8 %1037 to i64
  %1039 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %453, i64 0, i32 0, i64 0, i64 %1038
  %1040 = load i32, i32* %1039, align 4
  %1041 = add i32 %1040, 1
  store i32 %1041, i32* %1039, align 4
  %1042 = icmp eq i8 %464, 0
  br i1 %1042, label %1043, label %476

1043:                                             ; preds = %1035
  %1044 = shl nuw nsw i64 %467, 1
  %1045 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 10, i64 %1044, i32 0
  %1046 = load i8, i8* %1045, align 4
  %1047 = zext i8 %1046 to i64
  %1048 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %453, i64 0, i32 0, i64 0, i64 %1047
  %1049 = load i32, i32* %1048, align 4
  %1050 = add i32 %1049, 1
  store i32 %1050, i32* %1048, align 4
  br label %476

1051:                                             ; preds = %476
  %1052 = shl nuw nsw i64 %468, 1
  %1053 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 10, i64 %1052, i32 0
  %1054 = load i8, i8* %1053, align 4
  %1055 = zext i8 %1054 to i64
  %1056 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %453, i64 0, i32 0, i64 0, i64 %1055
  %1057 = load i32, i32* %1056, align 4
  %1058 = add i32 %1057, 1
  store i32 %1058, i32* %1056, align 4
  %1059 = icmp ult i8 %464, 2
  br i1 %1059, label %1060, label %1078

1060:                                             ; preds = %1051
  %1061 = add nuw nsw i64 %1052, %467
  %1062 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 10, i64 %1061, i32 0
  %1063 = load i8, i8* %1062, align 4
  %1064 = zext i8 %1063 to i64
  %1065 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %453, i64 0, i32 0, i64 0, i64 %1064
  %1066 = load i32, i32* %1065, align 4
  %1067 = add i32 %1066, 1
  store i32 %1067, i32* %1065, align 4
  %1068 = icmp eq i8 %464, 0
  br i1 %1068, label %1069, label %1078

1069:                                             ; preds = %1060
  %1070 = shl nuw nsw i64 %467, 1
  %1071 = add nuw nsw i64 %1070, %1052
  %1072 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 10, i64 %1071, i32 0
  %1073 = load i8, i8* %1072, align 4
  %1074 = zext i8 %1073 to i64
  %1075 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %453, i64 0, i32 0, i64 0, i64 %1074
  %1076 = load i32, i32* %1075, align 4
  %1077 = add i32 %1076, 1
  store i32 %1077, i32* %1075, align 4
  br label %1078

1078:                                             ; preds = %1069, %1060, %1051
  %1079 = icmp eq i8 %466, 0
  br i1 %1079, label %1080, label %486

1080:                                             ; preds = %1078
  %1081 = shl nuw nsw i64 %468, 2
  %1082 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 10, i64 %1081, i32 0
  %1083 = load i8, i8* %1082, align 4
  %1084 = zext i8 %1083 to i64
  %1085 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %453, i64 0, i32 0, i64 0, i64 %1084
  %1086 = load i32, i32* %1085, align 4
  %1087 = add i32 %1086, 1
  store i32 %1087, i32* %1085, align 4
  %1088 = icmp ult i8 %464, 2
  br i1 %1088, label %1089, label %486

1089:                                             ; preds = %1080
  %1090 = add nuw nsw i64 %1081, %467
  %1091 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 10, i64 %1090, i32 0
  %1092 = load i8, i8* %1091, align 4
  %1093 = zext i8 %1092 to i64
  %1094 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %453, i64 0, i32 0, i64 0, i64 %1093
  %1095 = load i32, i32* %1094, align 4
  %1096 = add i32 %1095, 1
  store i32 %1096, i32* %1094, align 4
  %1097 = icmp eq i8 %464, 0
  br i1 %1097, label %1098, label %486

1098:                                             ; preds = %1089
  %1099 = shl nuw nsw i64 %467, 1
  %1100 = add nuw nsw i64 %1099, %1081
  %1101 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %385, i64 0, i32 10, i64 %1100, i32 0
  %1102 = load i8, i8* %1101, align 4
  %1103 = zext i8 %1102 to i64
  %1104 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %453, i64 0, i32 0, i64 0, i64 %1103
  %1105 = load i32, i32* %1104, align 4
  %1106 = add i32 %1105, 1
  store i32 %1106, i32* %1104, align 4
  br label %486
}

declare i32 @vp9_cyclic_refresh_get_rdmult(%struct.CYCLIC_REFRESH*) local_unnamed_addr #2

declare void @vp9_pick_inter_mode(%struct.VP9_COMP*, %struct.macroblock*, %struct.TileDataEnc*, i32, i32, %struct.RD_COST*, i8 zeroext, %struct.PICK_MODE_CONTEXT*) local_unnamed_addr #2

declare void @vp9_pick_inter_mode_sub8x8(%struct.VP9_COMP*, %struct.macroblock*, i32, i32, %struct.RD_COST*, i8 zeroext, %struct.PICK_MODE_CONTEXT*) local_unnamed_addr #2

declare void @vp9_rd_cost_reset(%struct.RD_COST*) local_unnamed_addr #2

declare void @vp9_rd_pick_intra_mode_sb(%struct.VP9_COMP*, %struct.macroblock*, %struct.RD_COST*, i8 zeroext, %struct.PICK_MODE_CONTEXT*, i64) local_unnamed_addr #2

declare void @vp9_pick_intra_mode(%struct.VP9_COMP*, %struct.macroblock*, %struct.RD_COST*, i8 zeroext, %struct.PICK_MODE_CONTEXT*) local_unnamed_addr #2

declare void @vp9_cyclic_refresh_update_segment(%struct.VP9_COMP*, %struct.MODE_INFO*, i32, i32, i8 zeroext, i64, i64, i32, %struct.macroblock_plane*) local_unnamed_addr #2

declare void @vp9_update_mv_count(%struct.ThreadData*) local_unnamed_addr #2

declare void @vp9_encode_intra_block_plane(%struct.macroblock*, i8 zeroext, i32, i32) local_unnamed_addr #2

declare void @vp9_tokenize_sb(%struct.VP9_COMP*, %struct.ThreadData*, %struct.TOKENEXTRA**, i32, i32, i8 zeroext) local_unnamed_addr #2

declare void @vp9_build_inter_predictors_sby(%struct.macroblockd*, i32, i32, i8 zeroext) local_unnamed_addr #2

declare void @vp9_build_inter_predictors_sbuv(%struct.macroblockd*, i32, i32, i8 zeroext) local_unnamed_addr #2

declare void @vp9_encode_sb(%struct.macroblock*, i8 zeroext, i32, i32, i32) local_unnamed_addr #2

declare void @vp9_cyclic_refresh_update_sb_postencode(%struct.VP9_COMP*, %struct.MODE_INFO*, i32, i32, i8 zeroext) local_unnamed_addr #2

declare i32 @vp9_get_reference_mode_context(%struct.VP9Common*, %struct.macroblockd*) local_unnamed_addr #2

declare i32 @vp9_get_pred_context_comp_ref_p(%struct.VP9Common*, %struct.macroblockd*) local_unnamed_addr #2

declare i32 @vp9_get_pred_context_single_ref_p1(%struct.macroblockd*) local_unnamed_addr #2

declare i32 @vp9_get_pred_context_single_ref_p2(%struct.macroblockd*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @ml_predict_var_paritioning(%struct.VP9_COMP* nocapture readonly, %struct.macroblock*, i8 zeroext, i32, i32) unnamed_addr #0 {
  %6 = alloca [2 x [128 x float]], align 16
  %7 = alloca [6 x float], align 16
  %8 = alloca [2 x float], align 4
  %9 = alloca i32, align 4
  switch i8 %2, label %354 [
    i8 12, label %12
    i8 9, label %10
    i8 6, label %11
  ]

10:                                               ; preds = %5
  br label %12

11:                                               ; preds = %5
  br label %12

12:                                               ; preds = %5, %11, %10
  %13 = phi %struct.NN_CONFIG* [ bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @vp9_var_part_nnconfig_32 to %struct.NN_CONFIG*), %10 ], [ bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @vp9_var_part_nnconfig_16 to %struct.NN_CONFIG*), %11 ], [ bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @vp9_var_part_nnconfig_64 to %struct.NN_CONFIG*), %5 ]
  tail call void @vpx_clear_system_state() #8
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 11
  %15 = load i32, i32* %14, align 8
  %16 = icmp slt i32 %15, 6
  %17 = select i1 %16, float 1.250000e+00, float 0.000000e+00
  %18 = bitcast [6 x float]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 0, i64 24, i1 false)
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 38
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 80
  %22 = load i32, i32* %21, align 16
  %23 = tail call signext i16 @vp9_dc_quant(i32 %20, i32 0, i32 %22) #8
  %24 = sext i16 %23 to i32
  %25 = bitcast [2 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #8
  %26 = getelementptr inbounds [2 x float], [2 x float]* %8, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %26, align 4
  %27 = getelementptr inbounds [2 x float], [2 x float]* %8, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %27, align 4
  %28 = mul nsw i32 %24, %24
  %29 = sitofp i32 %28 to float
  %30 = fmul float %29, 3.906250e-03
  %31 = fadd float %30, 1.000000e+00
  %32 = tail call float @logf(float %31) #8
  %33 = getelementptr inbounds [6 x float], [6 x float]* %7, i64 0, i64 0
  store float %32, float* %33, align 16
  %34 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 12
  %35 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %34, align 8
  %36 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %35, i64 0, i32 13
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %35, i64 0, i32 14
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %35, i64 0, i32 15
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %35, i64 0, i32 4
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %35, i64 0, i32 9
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 18
  store %struct.yv12_buffer_config* %35, %struct.yv12_buffer_config** %46, align 16
  %47 = shl i32 %4, 3
  %48 = shl nsw i32 %3, 3
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 1
  %50 = load i32, i32* %49, align 8
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = ashr i32 %47, %50
  %54 = ashr i32 %48, %52
  %55 = sext i32 %54 to i64
  %56 = sext i32 %43 to i64
  %57 = mul nsw i64 %55, %56
  %58 = sext i32 %53 to i64
  %59 = add nsw i64 %57, %58
  %60 = getelementptr inbounds i8, i8* %37, i64 %59
  %61 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4, i32 0
  store i8* %60, i8** %61, align 8
  %62 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4, i32 1
  store i32 %43, i32* %62, align 8
  %63 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 1
  %64 = load i32, i32* %63, align 8
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 2
  %66 = load i32, i32* %65, align 4
  %67 = ashr i32 %47, %64
  %68 = ashr i32 %48, %66
  %69 = sext i32 %68 to i64
  %70 = sext i32 %45 to i64
  %71 = mul nsw i64 %69, %70
  %72 = sext i32 %67 to i64
  %73 = add nsw i64 %71, %72
  %74 = getelementptr inbounds i8, i8* %39, i64 %73
  %75 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 4, i32 0
  store i8* %74, i8** %75, align 8
  %76 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 4, i32 1
  store i32 %45, i32* %76, align 8
  %77 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 1
  %78 = load i32, i32* %77, align 8
  %79 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 2
  %80 = load i32, i32* %79, align 4
  %81 = ashr i32 %47, %78
  %82 = ashr i32 %48, %80
  %83 = sext i32 %82 to i64
  %84 = mul nsw i64 %83, %70
  %85 = sext i32 %81 to i64
  %86 = add nsw i64 %84, %85
  %87 = getelementptr inbounds i8, i8* %41, i64 %86
  %88 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 4, i32 0
  store i8* %87, i8** %88, align 8
  %89 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 4, i32 1
  store i32 %45, i32* %89, align 8
  %90 = zext i8 %2 to i64
  %91 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = shl nuw nsw i32 %93, 7
  %95 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 3, i64 %90
  %96 = load i8, i8* %95, align 1
  %97 = shl i32 %3, 9
  %98 = and i32 %97, 3584
  %99 = and i32 %47, 56
  %100 = zext i32 %98 to i64
  %101 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 68, i64 %100
  %102 = zext i32 %99 to i64
  %103 = getelementptr inbounds i8, i8* %101, i64 %102
  %104 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %104) #8
  store i32 -1431655766, i32* %9, align 4
  %105 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %90, i32 2
  %106 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %105, align 8
  %107 = call i32 %106(i8* %60, i32 %43, i8* %103, i32 64, i32* nonnull %9) #8
  %108 = icmp eq i32 %107, 0
  %109 = uitofp i32 %107 to float
  %110 = fdiv float 1.000000e+00, %109
  %111 = fadd float %109, 1.000000e+00
  %112 = call float @logf(float %111) #8
  %113 = getelementptr inbounds [6 x float], [6 x float]* %7, i64 0, i64 1
  store float %112, float* %113, align 4
  %114 = zext i8 %96 to i64
  %115 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %114, i32 2
  %116 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %115, align 8
  %117 = call i32 %116(i8* %60, i32 %43, i8* %103, i32 64, i32* nonnull %9) #8
  %118 = uitofp i32 %117 to float
  %119 = fmul float %110, %118
  %120 = select i1 %108, float 1.000000e+00, float %119
  %121 = getelementptr inbounds [6 x float], [6 x float]* %7, i64 0, i64 2
  store float %120, float* %121, align 8
  %122 = shl nuw nsw i32 %93, 1
  %123 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %115, align 8
  %124 = zext i32 %122 to i64
  %125 = getelementptr inbounds i8, i8* %60, i64 %124
  %126 = zext i32 %122 to i64
  %127 = getelementptr inbounds i8, i8* %103, i64 %126
  %128 = call i32 %123(i8* %125, i32 %43, i8* %127, i32 64, i32* nonnull %9) #8
  %129 = uitofp i32 %128 to float
  %130 = fmul float %110, %129
  %131 = select i1 %108, float 1.000000e+00, float %130
  %132 = getelementptr inbounds [6 x float], [6 x float]* %7, i64 0, i64 3
  store float %131, float* %132, align 4
  %133 = mul nsw i32 %122, %43
  %134 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %115, align 8
  %135 = sext i32 %133 to i64
  %136 = getelementptr inbounds i8, i8* %60, i64 %135
  %137 = zext i32 %94 to i64
  %138 = getelementptr inbounds i8, i8* %103, i64 %137
  %139 = call i32 %134(i8* %136, i32 %43, i8* %138, i32 64, i32* nonnull %9) #8
  %140 = uitofp i32 %139 to float
  %141 = fmul float %110, %140
  %142 = select i1 %108, float 1.000000e+00, float %141
  %143 = getelementptr inbounds [6 x float], [6 x float]* %7, i64 0, i64 4
  store float %142, float* %143, align 16
  %144 = add nsw i32 %133, %122
  %145 = mul nuw nsw i32 %93, 130
  %146 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %115, align 8
  %147 = sext i32 %144 to i64
  %148 = getelementptr inbounds i8, i8* %60, i64 %147
  %149 = zext i32 %145 to i64
  %150 = getelementptr inbounds i8, i8* %103, i64 %149
  %151 = call i32 %146(i8* %148, i32 %43, i8* %150, i32 64, i32* nonnull %9) #8
  %152 = uitofp i32 %151 to float
  %153 = fmul float %110, %152
  %154 = select i1 %108, float 1.000000e+00, float %153
  %155 = getelementptr inbounds [6 x float], [6 x float]* %7, i64 0, i64 5
  store float %154, float* %155, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %104) #8
  %156 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %13, i64 0, i32 0
  %157 = load i32, i32* %156, align 8
  %158 = bitcast [2 x [128 x float]]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %158) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %158, i8 -1, i64 1024, i1 false) #8
  %159 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %13, i64 0, i32 2
  %160 = load i32, i32* %159, align 8
  %161 = icmp sgt i32 %160, 0
  br i1 %161, label %162, label %258

162:                                              ; preds = %12
  %163 = zext i32 %160 to i64
  br label %164

164:                                              ; preds = %254, %162
  %165 = phi i64 [ 0, %162 ], [ %256, %254 ]
  %166 = phi float* [ %33, %162 ], [ %172, %254 ]
  %167 = phi i32 [ 0, %162 ], [ %255, %254 ]
  %168 = phi i32 [ %157, %162 ], [ %174, %254 ]
  %169 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %13, i64 0, i32 5, i64 %165
  %170 = load float*, float** %169, align 8
  %171 = sext i32 %167 to i64
  %172 = getelementptr inbounds [2 x [128 x float]], [2 x [128 x float]]* %6, i64 0, i64 %171, i64 0
  %173 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %13, i64 0, i32 3, i64 %165
  %174 = load i32, i32* %173, align 4
  %175 = icmp sgt i32 %174, 0
  br i1 %175, label %176, label %254

176:                                              ; preds = %164
  %177 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %13, i64 0, i32 4, i64 %165
  %178 = load float*, float** %177, align 8
  %179 = icmp sgt i32 %168, 0
  %180 = sext i32 %168 to i64
  %181 = zext i32 %174 to i64
  %182 = zext i32 %168 to i64
  %183 = add nsw i64 %182, -1
  %184 = and i64 %182, 3
  %185 = icmp ult i64 %183, 3
  %186 = sub nsw i64 %182, %184
  %187 = icmp eq i64 %184, 0
  br label %188

188:                                              ; preds = %243, %176
  %189 = phi i64 [ 0, %176 ], [ %252, %243 ]
  %190 = phi float* [ %178, %176 ], [ %251, %243 ]
  br i1 %179, label %191, label %243

191:                                              ; preds = %188
  br i1 %185, label %226, label %192

192:                                              ; preds = %191, %192
  %193 = phi i64 [ %223, %192 ], [ 0, %191 ]
  %194 = phi float [ %222, %192 ], [ 0.000000e+00, %191 ]
  %195 = phi i64 [ %224, %192 ], [ %186, %191 ]
  %196 = getelementptr inbounds float, float* %190, i64 %193
  %197 = load float, float* %196, align 4
  %198 = getelementptr inbounds float, float* %166, i64 %193
  %199 = load float, float* %198, align 4
  %200 = fmul float %197, %199
  %201 = fadd float %194, %200
  %202 = or i64 %193, 1
  %203 = getelementptr inbounds float, float* %190, i64 %202
  %204 = load float, float* %203, align 4
  %205 = getelementptr inbounds float, float* %166, i64 %202
  %206 = load float, float* %205, align 4
  %207 = fmul float %204, %206
  %208 = fadd float %201, %207
  %209 = or i64 %193, 2
  %210 = getelementptr inbounds float, float* %190, i64 %209
  %211 = load float, float* %210, align 4
  %212 = getelementptr inbounds float, float* %166, i64 %209
  %213 = load float, float* %212, align 4
  %214 = fmul float %211, %213
  %215 = fadd float %208, %214
  %216 = or i64 %193, 3
  %217 = getelementptr inbounds float, float* %190, i64 %216
  %218 = load float, float* %217, align 4
  %219 = getelementptr inbounds float, float* %166, i64 %216
  %220 = load float, float* %219, align 4
  %221 = fmul float %218, %220
  %222 = fadd float %215, %221
  %223 = add nuw nsw i64 %193, 4
  %224 = add i64 %195, -4
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %192

226:                                              ; preds = %192, %191
  %227 = phi float [ undef, %191 ], [ %222, %192 ]
  %228 = phi i64 [ 0, %191 ], [ %223, %192 ]
  %229 = phi float [ 0.000000e+00, %191 ], [ %222, %192 ]
  br i1 %187, label %243, label %230

230:                                              ; preds = %226, %230
  %231 = phi i64 [ %240, %230 ], [ %228, %226 ]
  %232 = phi float [ %239, %230 ], [ %229, %226 ]
  %233 = phi i64 [ %241, %230 ], [ %184, %226 ]
  %234 = getelementptr inbounds float, float* %190, i64 %231
  %235 = load float, float* %234, align 4
  %236 = getelementptr inbounds float, float* %166, i64 %231
  %237 = load float, float* %236, align 4
  %238 = fmul float %235, %237
  %239 = fadd float %232, %238
  %240 = add nuw nsw i64 %231, 1
  %241 = add i64 %233, -1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %230, !llvm.loop !41

243:                                              ; preds = %226, %230, %188
  %244 = phi float [ 0.000000e+00, %188 ], [ %227, %226 ], [ %239, %230 ]
  %245 = getelementptr inbounds float, float* %170, i64 %189
  %246 = load float, float* %245, align 4
  %247 = fadd float %244, %246
  %248 = fcmp ogt float %247, 0.000000e+00
  %249 = select i1 %248, float %247, float 0.000000e+00
  %250 = getelementptr inbounds [2 x [128 x float]], [2 x [128 x float]]* %6, i64 0, i64 %171, i64 %189
  store float %249, float* %250, align 4
  %251 = getelementptr inbounds float, float* %190, i64 %180
  %252 = add nuw nsw i64 %189, 1
  %253 = icmp eq i64 %252, %181
  br i1 %253, label %254, label %188

254:                                              ; preds = %243, %164
  %255 = sub nsw i32 1, %167
  %256 = add nuw nsw i64 %165, 1
  %257 = icmp eq i64 %256, %163
  br i1 %257, label %258, label %164

258:                                              ; preds = %254, %12
  %259 = phi i32 [ %157, %12 ], [ %174, %254 ]
  %260 = phi float* [ %33, %12 ], [ %172, %254 ]
  %261 = sext i32 %160 to i64
  %262 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %13, i64 0, i32 1
  %263 = load i32, i32* %262, align 4
  %264 = icmp sgt i32 %263, 0
  br i1 %264, label %266, label %265

265:                                              ; preds = %258
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %158) #8
  br label %347

266:                                              ; preds = %258
  %267 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %13, i64 0, i32 4, i64 %261
  %268 = load float*, float** %267, align 8
  %269 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %13, i64 0, i32 5, i64 %261
  %270 = icmp sgt i32 %259, 0
  %271 = sext i32 %259 to i64
  %272 = zext i32 %259 to i64
  %273 = load float*, float** %269, align 8
  %274 = sext i32 %263 to i64
  %275 = add nsw i64 %272, -1
  %276 = and i64 %272, 3
  %277 = icmp ult i64 %275, 3
  %278 = sub nsw i64 %272, %276
  %279 = icmp eq i64 %276, 0
  br label %280

280:                                              ; preds = %335, %266
  %281 = phi i64 [ 0, %266 ], [ %342, %335 ]
  %282 = phi float* [ %268, %266 ], [ %341, %335 ]
  br i1 %270, label %283, label %335

283:                                              ; preds = %280
  br i1 %277, label %318, label %284

284:                                              ; preds = %283, %284
  %285 = phi i64 [ %315, %284 ], [ 0, %283 ]
  %286 = phi float [ %314, %284 ], [ 0.000000e+00, %283 ]
  %287 = phi i64 [ %316, %284 ], [ %278, %283 ]
  %288 = getelementptr inbounds float, float* %282, i64 %285
  %289 = load float, float* %288, align 4
  %290 = getelementptr inbounds float, float* %260, i64 %285
  %291 = load float, float* %290, align 4
  %292 = fmul float %289, %291
  %293 = fadd float %286, %292
  %294 = or i64 %285, 1
  %295 = getelementptr inbounds float, float* %282, i64 %294
  %296 = load float, float* %295, align 4
  %297 = getelementptr inbounds float, float* %260, i64 %294
  %298 = load float, float* %297, align 4
  %299 = fmul float %296, %298
  %300 = fadd float %293, %299
  %301 = or i64 %285, 2
  %302 = getelementptr inbounds float, float* %282, i64 %301
  %303 = load float, float* %302, align 4
  %304 = getelementptr inbounds float, float* %260, i64 %301
  %305 = load float, float* %304, align 4
  %306 = fmul float %303, %305
  %307 = fadd float %300, %306
  %308 = or i64 %285, 3
  %309 = getelementptr inbounds float, float* %282, i64 %308
  %310 = load float, float* %309, align 4
  %311 = getelementptr inbounds float, float* %260, i64 %308
  %312 = load float, float* %311, align 4
  %313 = fmul float %310, %312
  %314 = fadd float %307, %313
  %315 = add nuw nsw i64 %285, 4
  %316 = add i64 %287, -4
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %318, label %284

318:                                              ; preds = %284, %283
  %319 = phi float [ undef, %283 ], [ %314, %284 ]
  %320 = phi i64 [ 0, %283 ], [ %315, %284 ]
  %321 = phi float [ 0.000000e+00, %283 ], [ %314, %284 ]
  br i1 %279, label %335, label %322

322:                                              ; preds = %318, %322
  %323 = phi i64 [ %332, %322 ], [ %320, %318 ]
  %324 = phi float [ %331, %322 ], [ %321, %318 ]
  %325 = phi i64 [ %333, %322 ], [ %276, %318 ]
  %326 = getelementptr inbounds float, float* %282, i64 %323
  %327 = load float, float* %326, align 4
  %328 = getelementptr inbounds float, float* %260, i64 %323
  %329 = load float, float* %328, align 4
  %330 = fmul float %327, %329
  %331 = fadd float %324, %330
  %332 = add nuw nsw i64 %323, 1
  %333 = add i64 %325, -1
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %335, label %322, !llvm.loop !42

335:                                              ; preds = %318, %322, %280
  %336 = phi float [ 0.000000e+00, %280 ], [ %319, %318 ], [ %331, %322 ]
  %337 = getelementptr inbounds float, float* %273, i64 %281
  %338 = load float, float* %337, align 4
  %339 = fadd float %336, %338
  %340 = getelementptr inbounds [2 x float], [2 x float]* %8, i64 0, i64 %281
  store float %339, float* %340, align 4
  %341 = getelementptr inbounds float, float* %282, i64 %271
  %342 = add nuw nsw i64 %281, 1
  %343 = icmp eq i64 %342, %274
  br i1 %343, label %344, label %280

344:                                              ; preds = %335
  %345 = load float, float* %26, align 4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %158) #8
  %346 = fcmp ogt float %345, %17
  br i1 %346, label %352, label %347

347:                                              ; preds = %265, %344
  %348 = phi float [ 0xFFFFFFFFE0000000, %265 ], [ %345, %344 ]
  %349 = fsub float -0.000000e+00, %17
  %350 = fcmp uge float %348, %349
  %351 = sext i1 %350 to i32
  br label %352

352:                                              ; preds = %347, %344
  %353 = phi i32 [ 3, %344 ], [ %351, %347 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #8
  br label %354

354:                                              ; preds = %5, %352
  %355 = phi i32 [ %353, %352 ], [ -1, %5 ]
  ret i32 %355
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @pred_pixel_ready_reset(%struct.PC_TREE* nocapture, i8 zeroext) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 3, i32 14
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 4, i64 0, i32 14
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 4, i64 1, i32 14
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 5, i64 0, i32 14
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 5, i64 1, i32 14
  store i32 0, i32* %7, align 4
  %8 = icmp ugt i8 %1, 3
  br i1 %8, label %9, label %21

9:                                                ; preds = %2
  %10 = zext i8 %1 to i64
  %11 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 3, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 6, i32 0, i64 0
  %14 = load %struct.PC_TREE*, %struct.PC_TREE** %13, align 8
  tail call fastcc void @pred_pixel_ready_reset(%struct.PC_TREE* %14, i8 zeroext %12)
  %15 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 6, i32 0, i64 1
  %16 = load %struct.PC_TREE*, %struct.PC_TREE** %15, align 8
  tail call fastcc void @pred_pixel_ready_reset(%struct.PC_TREE* %16, i8 zeroext %12)
  %17 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 6, i32 0, i64 2
  %18 = load %struct.PC_TREE*, %struct.PC_TREE** %17, align 8
  tail call fastcc void @pred_pixel_ready_reset(%struct.PC_TREE* %18, i8 zeroext %12)
  %19 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 6, i32 0, i64 3
  %20 = load %struct.PC_TREE*, %struct.PC_TREE** %19, align 8
  tail call fastcc void @pred_pixel_ready_reset(%struct.PC_TREE* %20, i8 zeroext %12)
  br label %21

21:                                               ; preds = %9, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @fill_mode_info_sb(%struct.VP9Common* readonly, %struct.macroblock*, i32, i32, i8 zeroext, %struct.PC_TREE* nocapture readonly) unnamed_addr #0 {
  %7 = zext i8 %4 to i64
  %8 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %5, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %11 = load i32, i32* %10, align 16
  %12 = icmp sgt i32 %11, %2
  br i1 %12, label %13, label %545

13:                                               ; preds = %6
  %14 = zext i32 %9 to i64
  %15 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 %14, i64 %7
  %16 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  br label %17

17:                                               ; preds = %13, %527
  %18 = phi i8* [ %15, %13 ], [ %542, %527 ]
  %19 = phi i32 [ %9, %13 ], [ %540, %527 ]
  %20 = phi i64 [ %7, %13 ], [ %538, %527 ]
  %21 = phi %struct.PC_TREE* [ %5, %13 ], [ %537, %527 ]
  %22 = phi i32 [ %3, %13 ], [ %530, %527 ]
  %23 = phi i32 [ %2, %13 ], [ %533, %527 ]
  %24 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %20
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = shl i32 1, %26
  %28 = sdiv i32 %27, 4
  %29 = load i8, i8* %18, align 1
  %30 = load i32, i32* %16, align 8
  %31 = icmp sgt i32 %30, %22
  br i1 %31, label %32, label %545

32:                                               ; preds = %17
  switch i32 %19, label %545 [
    i32 0, label %33
    i32 2, label %135
    i32 1, label %331
    i32 3, label %527
  ]

33:                                               ; preds = %32
  %34 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 5
  %35 = load i32, i32* %34, align 8
  %36 = mul nsw i32 %35, %23
  %37 = add nsw i32 %36, %22
  %38 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 53
  %39 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %38, align 8
  %40 = sext i32 %37 to i64
  %41 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %39, i64 %40
  %42 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 6
  store %struct.MODE_INFO** %41, %struct.MODE_INFO*** %42, align 8
  %43 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 46
  %44 = load %struct.MODE_INFO*, %struct.MODE_INFO** %43, align 16
  %45 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %44, i64 %40
  store %struct.MODE_INFO* %45, %struct.MODE_INFO** %41, align 8
  %46 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %47 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %46, align 8
  %48 = load i32, i32* %16, align 8
  %49 = mul nsw i32 %48, %23
  %50 = add nsw i32 %49, %22
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %47, i64 %51
  %53 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %52, %struct.MB_MODE_INFO_EXT** %53, align 16
  %54 = bitcast %struct.MODE_INFO*** %42 to i8***
  %55 = load i8**, i8*** %54, align 8
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %21, i64 0, i32 3, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %56, i8* align 8 %57, i64 68, i1 false)
  %58 = bitcast %struct.MB_MODE_INFO_EXT** %53 to i8**
  %59 = load i8*, i8** %58, align 16
  %60 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %21, i64 0, i32 3, i32 1
  %61 = bitcast %struct.MB_MODE_INFO_EXT* %60 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %61, i64 36, i1 false)
  %62 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %20
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = load i32, i32* %16, align 8
  %66 = sub nsw i32 %65, %22
  %67 = icmp sgt i32 %66, %64
  %68 = select i1 %67, i32 %64, i32 %66
  %69 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %20
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = load i32, i32* %10, align 16
  %73 = sub nsw i32 %72, %23
  %74 = icmp sgt i32 %73, %71
  %75 = select i1 %74, i32 %71, i32 %73
  %76 = bitcast %struct.MODE_INFO*** %42 to i64**
  %77 = load i64*, i64** %76, align 8
  %78 = load i64, i64* %77, align 8
  %79 = icmp sgt i32 %75, 0
  br i1 %79, label %80, label %545

80:                                               ; preds = %33
  %81 = load i32, i32* %34, align 8
  %82 = icmp sgt i32 %68, 0
  %83 = sext i32 %68 to i64
  %84 = sext i32 %81 to i64
  %85 = sext i32 %75 to i64
  %86 = add nsw i64 %83, -1
  %87 = and i64 %83, 3
  %88 = icmp ult i64 %86, 3
  %89 = sub nsw i64 %83, %87
  %90 = icmp eq i64 %87, 0
  br label %91

91:                                               ; preds = %132, %80
  %92 = phi i64 [ 0, %80 ], [ %133, %132 ]
  br i1 %82, label %93, label %132

93:                                               ; preds = %91
  %94 = mul nsw i64 %92, %84
  br i1 %88, label %120, label %95

95:                                               ; preds = %93, %95
  %96 = phi i64 [ %117, %95 ], [ 0, %93 ]
  %97 = phi i64 [ %118, %95 ], [ %89, %93 ]
  %98 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %42, align 8
  %99 = add nsw i64 %96, %94
  %100 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %98, i64 %99
  %101 = bitcast %struct.MODE_INFO** %100 to i64*
  store i64 %78, i64* %101, align 8
  %102 = or i64 %96, 1
  %103 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %42, align 8
  %104 = add nsw i64 %102, %94
  %105 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %103, i64 %104
  %106 = bitcast %struct.MODE_INFO** %105 to i64*
  store i64 %78, i64* %106, align 8
  %107 = or i64 %96, 2
  %108 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %42, align 8
  %109 = add nsw i64 %107, %94
  %110 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %108, i64 %109
  %111 = bitcast %struct.MODE_INFO** %110 to i64*
  store i64 %78, i64* %111, align 8
  %112 = or i64 %96, 3
  %113 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %42, align 8
  %114 = add nsw i64 %112, %94
  %115 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %113, i64 %114
  %116 = bitcast %struct.MODE_INFO** %115 to i64*
  store i64 %78, i64* %116, align 8
  %117 = add nuw nsw i64 %96, 4
  %118 = add i64 %97, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %95

120:                                              ; preds = %95, %93
  %121 = phi i64 [ 0, %93 ], [ %117, %95 ]
  br i1 %90, label %132, label %122

122:                                              ; preds = %120, %122
  %123 = phi i64 [ %129, %122 ], [ %121, %120 ]
  %124 = phi i64 [ %130, %122 ], [ %87, %120 ]
  %125 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %42, align 8
  %126 = add nsw i64 %123, %94
  %127 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %125, i64 %126
  %128 = bitcast %struct.MODE_INFO** %127 to i64*
  store i64 %78, i64* %128, align 8
  %129 = add nuw nsw i64 %123, 1
  %130 = add i64 %124, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %122, !llvm.loop !43

132:                                              ; preds = %120, %122, %91
  %133 = add nuw nsw i64 %92, 1
  %134 = icmp slt i64 %133, %85
  br i1 %134, label %91, label %545

135:                                              ; preds = %32
  %136 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 5
  %137 = load i32, i32* %136, align 8
  %138 = mul nsw i32 %137, %23
  %139 = add nsw i32 %138, %22
  %140 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 53
  %141 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %140, align 8
  %142 = sext i32 %139 to i64
  %143 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %141, i64 %142
  %144 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 6
  store %struct.MODE_INFO** %143, %struct.MODE_INFO*** %144, align 8
  %145 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 46
  %146 = load %struct.MODE_INFO*, %struct.MODE_INFO** %145, align 16
  %147 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %146, i64 %142
  store %struct.MODE_INFO* %147, %struct.MODE_INFO** %143, align 8
  %148 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %149 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %148, align 8
  %150 = load i32, i32* %16, align 8
  %151 = mul nsw i32 %150, %23
  %152 = add nsw i32 %151, %22
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %149, i64 %153
  %155 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %154, %struct.MB_MODE_INFO_EXT** %155, align 16
  %156 = bitcast %struct.MODE_INFO*** %144 to i8***
  %157 = load i8**, i8*** %156, align 8
  %158 = load i8*, i8** %157, align 8
  %159 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %21, i64 0, i32 5, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %158, i8* align 8 %159, i64 68, i1 false)
  %160 = bitcast %struct.MB_MODE_INFO_EXT** %155 to i8**
  %161 = load i8*, i8** %160, align 16
  %162 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %21, i64 0, i32 5, i64 0, i32 1
  %163 = bitcast %struct.MB_MODE_INFO_EXT* %162 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %161, i8* align 4 %163, i64 36, i1 false)
  %164 = zext i8 %29 to i64
  %165 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %164
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = load i32, i32* %16, align 8
  %169 = sub nsw i32 %168, %22
  %170 = icmp sgt i32 %169, %167
  %171 = select i1 %170, i32 %167, i32 %169
  %172 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %164
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = load i32, i32* %10, align 16
  %176 = sub nsw i32 %175, %23
  %177 = icmp sgt i32 %176, %174
  %178 = select i1 %177, i32 %174, i32 %176
  %179 = bitcast %struct.MODE_INFO*** %144 to i64**
  %180 = load i64*, i64** %179, align 8
  %181 = load i64, i64* %180, align 8
  %182 = icmp sgt i32 %178, 0
  br i1 %182, label %183, label %240

183:                                              ; preds = %135
  %184 = load i32, i32* %136, align 8
  %185 = icmp sgt i32 %171, 0
  %186 = sext i32 %171 to i64
  %187 = sext i32 %184 to i64
  %188 = sext i32 %178 to i64
  %189 = add nsw i64 %186, -1
  %190 = and i64 %186, 3
  %191 = icmp ult i64 %189, 3
  %192 = sub nsw i64 %186, %190
  %193 = icmp eq i64 %190, 0
  br label %194

194:                                              ; preds = %235, %183
  %195 = phi i64 [ 0, %183 ], [ %236, %235 ]
  br i1 %185, label %196, label %235

196:                                              ; preds = %194
  %197 = mul nsw i64 %195, %187
  br i1 %191, label %223, label %198

198:                                              ; preds = %196, %198
  %199 = phi i64 [ %220, %198 ], [ 0, %196 ]
  %200 = phi i64 [ %221, %198 ], [ %192, %196 ]
  %201 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %144, align 8
  %202 = add nsw i64 %199, %197
  %203 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %201, i64 %202
  %204 = bitcast %struct.MODE_INFO** %203 to i64*
  store i64 %181, i64* %204, align 8
  %205 = or i64 %199, 1
  %206 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %144, align 8
  %207 = add nsw i64 %205, %197
  %208 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %206, i64 %207
  %209 = bitcast %struct.MODE_INFO** %208 to i64*
  store i64 %181, i64* %209, align 8
  %210 = or i64 %199, 2
  %211 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %144, align 8
  %212 = add nsw i64 %210, %197
  %213 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %211, i64 %212
  %214 = bitcast %struct.MODE_INFO** %213 to i64*
  store i64 %181, i64* %214, align 8
  %215 = or i64 %199, 3
  %216 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %144, align 8
  %217 = add nsw i64 %215, %197
  %218 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %216, i64 %217
  %219 = bitcast %struct.MODE_INFO** %218 to i64*
  store i64 %181, i64* %219, align 8
  %220 = add nuw nsw i64 %199, 4
  %221 = add i64 %200, -4
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %223, label %198

223:                                              ; preds = %198, %196
  %224 = phi i64 [ 0, %196 ], [ %220, %198 ]
  br i1 %193, label %235, label %225

225:                                              ; preds = %223, %225
  %226 = phi i64 [ %232, %225 ], [ %224, %223 ]
  %227 = phi i64 [ %233, %225 ], [ %190, %223 ]
  %228 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %144, align 8
  %229 = add nsw i64 %226, %197
  %230 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %228, i64 %229
  %231 = bitcast %struct.MODE_INFO** %230 to i64*
  store i64 %181, i64* %231, align 8
  %232 = add nuw nsw i64 %226, 1
  %233 = add i64 %227, -1
  %234 = icmp eq i64 %233, 0
  br i1 %234, label %235, label %225, !llvm.loop !44

235:                                              ; preds = %223, %225, %194
  %236 = add nuw nsw i64 %195, 1
  %237 = icmp slt i64 %236, %188
  br i1 %237, label %194, label %238

238:                                              ; preds = %235
  %239 = load i32, i32* %16, align 8
  br label %240

240:                                              ; preds = %238, %135
  %241 = phi i32 [ %239, %238 ], [ %168, %135 ]
  %242 = add nsw i32 %28, %22
  %243 = icmp slt i32 %242, %241
  br i1 %243, label %244, label %545

244:                                              ; preds = %240
  %245 = load i32, i32* %136, align 8
  %246 = mul nsw i32 %245, %23
  %247 = add nsw i32 %246, %242
  %248 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %140, align 8
  %249 = sext i32 %247 to i64
  %250 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %248, i64 %249
  store %struct.MODE_INFO** %250, %struct.MODE_INFO*** %144, align 8
  %251 = load %struct.MODE_INFO*, %struct.MODE_INFO** %145, align 16
  %252 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %251, i64 %249
  store %struct.MODE_INFO* %252, %struct.MODE_INFO** %250, align 8
  %253 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %148, align 8
  %254 = load i32, i32* %16, align 8
  %255 = mul nsw i32 %254, %23
  %256 = add nsw i32 %255, %242
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %253, i64 %257
  store %struct.MB_MODE_INFO_EXT* %258, %struct.MB_MODE_INFO_EXT** %155, align 16
  %259 = load i8**, i8*** %156, align 8
  %260 = load i8*, i8** %259, align 8
  %261 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %21, i64 0, i32 5, i64 1, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %260, i8* align 8 %261, i64 68, i1 false)
  %262 = load i8*, i8** %160, align 16
  %263 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %21, i64 0, i32 5, i64 1, i32 1
  %264 = bitcast %struct.MB_MODE_INFO_EXT* %263 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %262, i8* align 4 %264, i64 36, i1 false)
  %265 = load i32, i32* %16, align 8
  %266 = sub nsw i32 %265, %242
  %267 = icmp sgt i32 %266, %167
  %268 = select i1 %267, i32 %167, i32 %266
  %269 = load i32, i32* %10, align 16
  %270 = sub nsw i32 %269, %23
  %271 = icmp sgt i32 %270, %174
  %272 = select i1 %271, i32 %174, i32 %270
  %273 = load i64*, i64** %179, align 8
  %274 = load i64, i64* %273, align 8
  %275 = icmp sgt i32 %272, 0
  br i1 %275, label %276, label %545

276:                                              ; preds = %244
  %277 = load i32, i32* %136, align 8
  %278 = icmp sgt i32 %268, 0
  %279 = sext i32 %268 to i64
  %280 = sext i32 %277 to i64
  %281 = sext i32 %272 to i64
  %282 = add nsw i64 %279, -1
  %283 = and i64 %279, 3
  %284 = icmp ult i64 %282, 3
  %285 = sub nsw i64 %279, %283
  %286 = icmp eq i64 %283, 0
  br label %287

287:                                              ; preds = %328, %276
  %288 = phi i64 [ 0, %276 ], [ %329, %328 ]
  br i1 %278, label %289, label %328

289:                                              ; preds = %287
  %290 = mul nsw i64 %288, %280
  br i1 %284, label %316, label %291

291:                                              ; preds = %289, %291
  %292 = phi i64 [ %313, %291 ], [ 0, %289 ]
  %293 = phi i64 [ %314, %291 ], [ %285, %289 ]
  %294 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %144, align 8
  %295 = add nsw i64 %292, %290
  %296 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %294, i64 %295
  %297 = bitcast %struct.MODE_INFO** %296 to i64*
  store i64 %274, i64* %297, align 8
  %298 = or i64 %292, 1
  %299 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %144, align 8
  %300 = add nsw i64 %298, %290
  %301 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %299, i64 %300
  %302 = bitcast %struct.MODE_INFO** %301 to i64*
  store i64 %274, i64* %302, align 8
  %303 = or i64 %292, 2
  %304 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %144, align 8
  %305 = add nsw i64 %303, %290
  %306 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %304, i64 %305
  %307 = bitcast %struct.MODE_INFO** %306 to i64*
  store i64 %274, i64* %307, align 8
  %308 = or i64 %292, 3
  %309 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %144, align 8
  %310 = add nsw i64 %308, %290
  %311 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %309, i64 %310
  %312 = bitcast %struct.MODE_INFO** %311 to i64*
  store i64 %274, i64* %312, align 8
  %313 = add nuw nsw i64 %292, 4
  %314 = add i64 %293, -4
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %316, label %291

316:                                              ; preds = %291, %289
  %317 = phi i64 [ 0, %289 ], [ %313, %291 ]
  br i1 %286, label %328, label %318

318:                                              ; preds = %316, %318
  %319 = phi i64 [ %325, %318 ], [ %317, %316 ]
  %320 = phi i64 [ %326, %318 ], [ %283, %316 ]
  %321 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %144, align 8
  %322 = add nsw i64 %319, %290
  %323 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %321, i64 %322
  %324 = bitcast %struct.MODE_INFO** %323 to i64*
  store i64 %274, i64* %324, align 8
  %325 = add nuw nsw i64 %319, 1
  %326 = add i64 %320, -1
  %327 = icmp eq i64 %326, 0
  br i1 %327, label %328, label %318, !llvm.loop !45

328:                                              ; preds = %316, %318, %287
  %329 = add nuw nsw i64 %288, 1
  %330 = icmp slt i64 %329, %281
  br i1 %330, label %287, label %545

331:                                              ; preds = %32
  %332 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 5
  %333 = load i32, i32* %332, align 8
  %334 = mul nsw i32 %333, %23
  %335 = add nsw i32 %334, %22
  %336 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 53
  %337 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %336, align 8
  %338 = sext i32 %335 to i64
  %339 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %337, i64 %338
  %340 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 6
  store %struct.MODE_INFO** %339, %struct.MODE_INFO*** %340, align 8
  %341 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 46
  %342 = load %struct.MODE_INFO*, %struct.MODE_INFO** %341, align 16
  %343 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %342, i64 %338
  store %struct.MODE_INFO* %343, %struct.MODE_INFO** %339, align 8
  %344 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 3
  %345 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %344, align 8
  %346 = load i32, i32* %16, align 8
  %347 = mul nsw i32 %346, %23
  %348 = add nsw i32 %347, %22
  %349 = sext i32 %348 to i64
  %350 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %345, i64 %349
  %351 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  store %struct.MB_MODE_INFO_EXT* %350, %struct.MB_MODE_INFO_EXT** %351, align 16
  %352 = bitcast %struct.MODE_INFO*** %340 to i8***
  %353 = load i8**, i8*** %352, align 8
  %354 = load i8*, i8** %353, align 8
  %355 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %21, i64 0, i32 4, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %354, i8* align 8 %355, i64 68, i1 false)
  %356 = bitcast %struct.MB_MODE_INFO_EXT** %351 to i8**
  %357 = load i8*, i8** %356, align 16
  %358 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %21, i64 0, i32 4, i64 0, i32 1
  %359 = bitcast %struct.MB_MODE_INFO_EXT* %358 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %357, i8* align 4 %359, i64 36, i1 false)
  %360 = zext i8 %29 to i64
  %361 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %360
  %362 = load i8, i8* %361, align 1
  %363 = zext i8 %362 to i32
  %364 = load i32, i32* %16, align 8
  %365 = sub nsw i32 %364, %22
  %366 = icmp sgt i32 %365, %363
  %367 = select i1 %366, i32 %363, i32 %365
  %368 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %360
  %369 = load i8, i8* %368, align 1
  %370 = zext i8 %369 to i32
  %371 = load i32, i32* %10, align 16
  %372 = sub nsw i32 %371, %23
  %373 = icmp sgt i32 %372, %370
  %374 = select i1 %373, i32 %370, i32 %372
  %375 = bitcast %struct.MODE_INFO*** %340 to i64**
  %376 = load i64*, i64** %375, align 8
  %377 = load i64, i64* %376, align 8
  %378 = icmp sgt i32 %374, 0
  br i1 %378, label %379, label %436

379:                                              ; preds = %331
  %380 = load i32, i32* %332, align 8
  %381 = icmp sgt i32 %367, 0
  %382 = sext i32 %367 to i64
  %383 = sext i32 %380 to i64
  %384 = sext i32 %374 to i64
  %385 = add nsw i64 %382, -1
  %386 = and i64 %382, 3
  %387 = icmp ult i64 %385, 3
  %388 = sub nsw i64 %382, %386
  %389 = icmp eq i64 %386, 0
  br label %390

390:                                              ; preds = %431, %379
  %391 = phi i64 [ 0, %379 ], [ %432, %431 ]
  br i1 %381, label %392, label %431

392:                                              ; preds = %390
  %393 = mul nsw i64 %391, %383
  br i1 %387, label %419, label %394

394:                                              ; preds = %392, %394
  %395 = phi i64 [ %416, %394 ], [ 0, %392 ]
  %396 = phi i64 [ %417, %394 ], [ %388, %392 ]
  %397 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %340, align 8
  %398 = add nsw i64 %395, %393
  %399 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %397, i64 %398
  %400 = bitcast %struct.MODE_INFO** %399 to i64*
  store i64 %377, i64* %400, align 8
  %401 = or i64 %395, 1
  %402 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %340, align 8
  %403 = add nsw i64 %401, %393
  %404 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %402, i64 %403
  %405 = bitcast %struct.MODE_INFO** %404 to i64*
  store i64 %377, i64* %405, align 8
  %406 = or i64 %395, 2
  %407 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %340, align 8
  %408 = add nsw i64 %406, %393
  %409 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %407, i64 %408
  %410 = bitcast %struct.MODE_INFO** %409 to i64*
  store i64 %377, i64* %410, align 8
  %411 = or i64 %395, 3
  %412 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %340, align 8
  %413 = add nsw i64 %411, %393
  %414 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %412, i64 %413
  %415 = bitcast %struct.MODE_INFO** %414 to i64*
  store i64 %377, i64* %415, align 8
  %416 = add nuw nsw i64 %395, 4
  %417 = add i64 %396, -4
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %419, label %394

419:                                              ; preds = %394, %392
  %420 = phi i64 [ 0, %392 ], [ %416, %394 ]
  br i1 %389, label %431, label %421

421:                                              ; preds = %419, %421
  %422 = phi i64 [ %428, %421 ], [ %420, %419 ]
  %423 = phi i64 [ %429, %421 ], [ %386, %419 ]
  %424 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %340, align 8
  %425 = add nsw i64 %422, %393
  %426 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %424, i64 %425
  %427 = bitcast %struct.MODE_INFO** %426 to i64*
  store i64 %377, i64* %427, align 8
  %428 = add nuw nsw i64 %422, 1
  %429 = add i64 %423, -1
  %430 = icmp eq i64 %429, 0
  br i1 %430, label %431, label %421, !llvm.loop !46

431:                                              ; preds = %419, %421, %390
  %432 = add nuw nsw i64 %391, 1
  %433 = icmp slt i64 %432, %384
  br i1 %433, label %390, label %434

434:                                              ; preds = %431
  %435 = load i32, i32* %10, align 16
  br label %436

436:                                              ; preds = %434, %331
  %437 = phi i32 [ %435, %434 ], [ %371, %331 ]
  %438 = add nsw i32 %28, %23
  %439 = icmp slt i32 %438, %437
  br i1 %439, label %440, label %545

440:                                              ; preds = %436
  %441 = load i32, i32* %332, align 8
  %442 = mul nsw i32 %441, %438
  %443 = add nsw i32 %442, %22
  %444 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %336, align 8
  %445 = sext i32 %443 to i64
  %446 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %444, i64 %445
  store %struct.MODE_INFO** %446, %struct.MODE_INFO*** %340, align 8
  %447 = load %struct.MODE_INFO*, %struct.MODE_INFO** %341, align 16
  %448 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %447, i64 %445
  store %struct.MODE_INFO* %448, %struct.MODE_INFO** %446, align 8
  %449 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %344, align 8
  %450 = load i32, i32* %16, align 8
  %451 = mul nsw i32 %450, %438
  %452 = add nsw i32 %451, %22
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %449, i64 %453
  store %struct.MB_MODE_INFO_EXT* %454, %struct.MB_MODE_INFO_EXT** %351, align 16
  %455 = load i8**, i8*** %352, align 8
  %456 = load i8*, i8** %455, align 8
  %457 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %21, i64 0, i32 4, i64 1, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %456, i8* align 8 %457, i64 68, i1 false)
  %458 = load i8*, i8** %356, align 16
  %459 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %21, i64 0, i32 4, i64 1, i32 1
  %460 = bitcast %struct.MB_MODE_INFO_EXT* %459 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %458, i8* align 4 %460, i64 36, i1 false)
  %461 = load i32, i32* %16, align 8
  %462 = sub nsw i32 %461, %22
  %463 = icmp sgt i32 %462, %363
  %464 = select i1 %463, i32 %363, i32 %462
  %465 = load i32, i32* %10, align 16
  %466 = sub nsw i32 %465, %438
  %467 = icmp sgt i32 %466, %370
  %468 = select i1 %467, i32 %370, i32 %466
  %469 = load i64*, i64** %375, align 8
  %470 = load i64, i64* %469, align 8
  %471 = icmp sgt i32 %468, 0
  br i1 %471, label %472, label %545

472:                                              ; preds = %440
  %473 = load i32, i32* %332, align 8
  %474 = icmp sgt i32 %464, 0
  %475 = sext i32 %464 to i64
  %476 = sext i32 %473 to i64
  %477 = sext i32 %468 to i64
  %478 = add nsw i64 %475, -1
  %479 = and i64 %475, 3
  %480 = icmp ult i64 %478, 3
  %481 = sub nsw i64 %475, %479
  %482 = icmp eq i64 %479, 0
  br label %483

483:                                              ; preds = %524, %472
  %484 = phi i64 [ 0, %472 ], [ %525, %524 ]
  br i1 %474, label %485, label %524

485:                                              ; preds = %483
  %486 = mul nsw i64 %484, %476
  br i1 %480, label %512, label %487

487:                                              ; preds = %485, %487
  %488 = phi i64 [ %509, %487 ], [ 0, %485 ]
  %489 = phi i64 [ %510, %487 ], [ %481, %485 ]
  %490 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %340, align 8
  %491 = add nsw i64 %488, %486
  %492 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %490, i64 %491
  %493 = bitcast %struct.MODE_INFO** %492 to i64*
  store i64 %470, i64* %493, align 8
  %494 = or i64 %488, 1
  %495 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %340, align 8
  %496 = add nsw i64 %494, %486
  %497 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %495, i64 %496
  %498 = bitcast %struct.MODE_INFO** %497 to i64*
  store i64 %470, i64* %498, align 8
  %499 = or i64 %488, 2
  %500 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %340, align 8
  %501 = add nsw i64 %499, %486
  %502 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %500, i64 %501
  %503 = bitcast %struct.MODE_INFO** %502 to i64*
  store i64 %470, i64* %503, align 8
  %504 = or i64 %488, 3
  %505 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %340, align 8
  %506 = add nsw i64 %504, %486
  %507 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %505, i64 %506
  %508 = bitcast %struct.MODE_INFO** %507 to i64*
  store i64 %470, i64* %508, align 8
  %509 = add nuw nsw i64 %488, 4
  %510 = add i64 %489, -4
  %511 = icmp eq i64 %510, 0
  br i1 %511, label %512, label %487

512:                                              ; preds = %487, %485
  %513 = phi i64 [ 0, %485 ], [ %509, %487 ]
  br i1 %482, label %524, label %514

514:                                              ; preds = %512, %514
  %515 = phi i64 [ %521, %514 ], [ %513, %512 ]
  %516 = phi i64 [ %522, %514 ], [ %479, %512 ]
  %517 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %340, align 8
  %518 = add nsw i64 %515, %486
  %519 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %517, i64 %518
  %520 = bitcast %struct.MODE_INFO** %519 to i64*
  store i64 %470, i64* %520, align 8
  %521 = add nuw nsw i64 %515, 1
  %522 = add i64 %516, -1
  %523 = icmp eq i64 %522, 0
  br i1 %523, label %524, label %514, !llvm.loop !47

524:                                              ; preds = %512, %514, %483
  %525 = add nuw nsw i64 %484, 1
  %526 = icmp slt i64 %525, %477
  br i1 %526, label %483, label %545

527:                                              ; preds = %32
  %528 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %21, i64 0, i32 6, i32 0, i64 0
  %529 = load %struct.PC_TREE*, %struct.PC_TREE** %528, align 8
  tail call fastcc void @fill_mode_info_sb(%struct.VP9Common* %0, %struct.macroblock* %1, i32 %23, i32 %22, i8 zeroext %29, %struct.PC_TREE* %529)
  %530 = add nsw i32 %28, %22
  %531 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %21, i64 0, i32 6, i32 0, i64 1
  %532 = load %struct.PC_TREE*, %struct.PC_TREE** %531, align 8
  tail call fastcc void @fill_mode_info_sb(%struct.VP9Common* %0, %struct.macroblock* %1, i32 %23, i32 %530, i8 zeroext %29, %struct.PC_TREE* %532)
  %533 = add nsw i32 %28, %23
  %534 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %21, i64 0, i32 6, i32 0, i64 2
  %535 = load %struct.PC_TREE*, %struct.PC_TREE** %534, align 8
  tail call fastcc void @fill_mode_info_sb(%struct.VP9Common* %0, %struct.macroblock* %1, i32 %533, i32 %22, i8 zeroext %29, %struct.PC_TREE* %535)
  %536 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %21, i64 0, i32 6, i32 0, i64 3
  %537 = load %struct.PC_TREE*, %struct.PC_TREE** %536, align 8
  %538 = zext i8 %29 to i64
  %539 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %537, i64 0, i32 1
  %540 = load i32, i32* %539, align 4
  %541 = zext i32 %540 to i64
  %542 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 %541, i64 %538
  %543 = load i32, i32* %10, align 16
  %544 = icmp sgt i32 %543, %533
  br i1 %544, label %17, label %545

545:                                              ; preds = %17, %527, %32, %524, %328, %132, %6, %440, %244, %33, %240, %436
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @encode_sb_rt(%struct.VP9_COMP*, %struct.ThreadData*, %struct.TileInfo* readonly, %struct.TOKENEXTRA**, i32, i32, i32, i8 zeroext, %struct.PC_TREE* nocapture) unnamed_addr #0 {
  %10 = zext i8 %7 to i64
  %11 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = shl i32 1, %13
  %15 = sdiv i32 %14, 4
  %16 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %17 = load i32, i32* %16, align 16
  %18 = icmp sgt i32 %17, %4
  br i1 %18, label %19, label %132

19:                                               ; preds = %9
  %20 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %21 = load i32, i32* %20, align 8
  %22 = icmp sgt i32 %21, %5
  br i1 %22, label %23, label %132

23:                                               ; preds = %19
  %24 = icmp ugt i8 %7, 2
  br i1 %24, label %25, label %60

25:                                               ; preds = %23
  %26 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 5
  %27 = load i32, i32* %26, align 8
  %28 = mul nsw i32 %27, %4
  %29 = add nsw i32 %28, %5
  %30 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %31 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %30, align 8
  %32 = sext i32 %29 to i64
  %33 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %31, i64 %32
  %34 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 21
  %35 = load i8*, i8** %34, align 8
  %36 = sext i32 %5 to i64
  %37 = getelementptr inbounds i8, i8* %35, i64 %36
  %38 = and i32 %4, 7
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 22, i64 %39
  %41 = getelementptr inbounds [13 x i8], [13 x i8]* @mi_width_log2_lookup, i64 0, i64 %10
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = load i8, i8* %37, align 1
  %45 = sext i8 %44 to i32
  %46 = lshr i32 %45, %43
  %47 = and i32 %46, 1
  %48 = load i8, i8* %40, align 1
  %49 = sext i8 %48 to i32
  %50 = lshr i32 %49, %43
  %51 = shl i32 %50, 1
  %52 = and i32 %51, 2
  %53 = shl nuw nsw i32 %43, 2
  %54 = or i32 %47, %53
  %55 = or i32 %54, %52
  %56 = load %struct.MODE_INFO*, %struct.MODE_INFO** %33, align 8
  %57 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %56, i64 0, i32 0
  %58 = load i8, i8* %57, align 4
  %59 = zext i32 %55 to i64
  br label %60

60:                                               ; preds = %23, %25
  %61 = phi i64 [ %59, %25 ], [ 0, %23 ]
  %62 = phi i8 [ %58, %25 ], [ 0, %23 ]
  %63 = zext i8 %12 to i64
  %64 = zext i8 %62 to i64
  %65 = getelementptr inbounds [0 x [13 x i32]], [0 x [13 x i32]]* @partition_lookup, i64 0, i64 %63, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %6, 0
  %68 = icmp eq i8 %7, 0
  %69 = or i1 %67, %68
  br i1 %69, label %77, label %70

70:                                               ; preds = %60
  %71 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 2
  %72 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %71, align 8
  %73 = zext i32 %66 to i64
  %74 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %72, i64 0, i32 2, i64 %61, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = add i32 %75, 1
  store i32 %76, i32* %74, align 4
  br label %77

77:                                               ; preds = %60, %70
  switch i32 %66, label %98 [
    i32 0, label %78
    i32 2, label %80
    i32 1, label %89
  ]

78:                                               ; preds = %77
  %79 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %8, i64 0, i32 3
  tail call fastcc void @encode_b_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %2, %struct.TOKENEXTRA** %3, i32 %4, i32 %5, i32 %6, i8 zeroext %62, %struct.PICK_MODE_CONTEXT* %79)
  br label %116

80:                                               ; preds = %77
  %81 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %8, i64 0, i32 5, i64 0
  tail call fastcc void @encode_b_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %2, %struct.TOKENEXTRA** %3, i32 %4, i32 %5, i32 %6, i8 zeroext %62, %struct.PICK_MODE_CONTEXT* %81)
  %82 = add nsw i32 %15, %5
  %83 = load i32, i32* %20, align 8
  %84 = icmp slt i32 %82, %83
  %85 = icmp ugt i8 %7, 3
  %86 = and i1 %85, %84
  br i1 %86, label %87, label %116

87:                                               ; preds = %80
  %88 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %8, i64 0, i32 5, i64 1
  tail call fastcc void @encode_b_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %2, %struct.TOKENEXTRA** %3, i32 %4, i32 %82, i32 %6, i8 zeroext %62, %struct.PICK_MODE_CONTEXT* %88)
  br label %116

89:                                               ; preds = %77
  %90 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %8, i64 0, i32 4, i64 0
  tail call fastcc void @encode_b_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %2, %struct.TOKENEXTRA** %3, i32 %4, i32 %5, i32 %6, i8 zeroext %62, %struct.PICK_MODE_CONTEXT* %90)
  %91 = add nsw i32 %15, %4
  %92 = load i32, i32* %16, align 16
  %93 = icmp slt i32 %91, %92
  %94 = icmp ugt i8 %7, 3
  %95 = and i1 %94, %93
  br i1 %95, label %96, label %116

96:                                               ; preds = %89
  %97 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %8, i64 0, i32 4, i64 1
  tail call fastcc void @encode_b_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %2, %struct.TOKENEXTRA** %3, i32 %91, i32 %5, i32 %6, i8 zeroext %62, %struct.PICK_MODE_CONTEXT* %97)
  br label %116

98:                                               ; preds = %77
  %99 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 3, i64 %10
  %100 = load i8, i8* %99, align 1
  %101 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %8, i64 0, i32 6, i32 0, i64 0
  %102 = load %struct.PC_TREE*, %struct.PC_TREE** %101, align 8
  tail call fastcc void @encode_sb_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %2, %struct.TOKENEXTRA** %3, i32 %4, i32 %5, i32 %6, i8 zeroext %100, %struct.PC_TREE* %102)
  %103 = add nsw i32 %15, %5
  %104 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %8, i64 0, i32 6, i32 0, i64 1
  %105 = load %struct.PC_TREE*, %struct.PC_TREE** %104, align 8
  tail call fastcc void @encode_sb_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %2, %struct.TOKENEXTRA** %3, i32 %4, i32 %103, i32 %6, i8 zeroext %100, %struct.PC_TREE* %105)
  %106 = add nsw i32 %15, %4
  %107 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %8, i64 0, i32 6, i32 0, i64 2
  %108 = load %struct.PC_TREE*, %struct.PC_TREE** %107, align 8
  tail call fastcc void @encode_sb_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %2, %struct.TOKENEXTRA** %3, i32 %106, i32 %5, i32 %6, i8 zeroext %100, %struct.PC_TREE* %108)
  %109 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %8, i64 0, i32 6, i32 0, i64 3
  %110 = load %struct.PC_TREE*, %struct.PC_TREE** %109, align 8
  tail call fastcc void @encode_sb_rt(%struct.VP9_COMP* %0, %struct.ThreadData* %1, %struct.TileInfo* %2, %struct.TOKENEXTRA** %3, i32 %106, i32 %103, i32 %6, i8 zeroext %100, %struct.PC_TREE* %110)
  %111 = icmp ne i32 %66, 3
  %112 = icmp eq i8 %7, 3
  %113 = or i1 %112, %111
  br i1 %113, label %114, label %132

114:                                              ; preds = %98
  %115 = zext i8 %100 to i64
  br label %116

116:                                              ; preds = %114, %78, %87, %80, %96, %89
  %117 = phi i64 [ %115, %114 ], [ %64, %78 ], [ %64, %87 ], [ %64, %80 ], [ %64, %96 ], [ %64, %89 ]
  %118 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 21
  %119 = load i8*, i8** %118, align 8
  %120 = sext i32 %5 to i64
  %121 = getelementptr inbounds i8, i8* %119, i64 %120
  %122 = and i32 %4, 7
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 0, i32 1, i32 22, i64 %123
  %125 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %10
  %126 = load i8, i8* %125, align 1
  %127 = getelementptr inbounds [13 x %struct.anon.8], [13 x %struct.anon.8]* @partition_context_lookup, i64 0, i64 %117, i32 0
  %128 = load i8, i8* %127, align 2
  %129 = zext i8 %126 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %121, i8 %128, i64 %129, i1 false) #8
  %130 = getelementptr inbounds [13 x %struct.anon.8], [13 x %struct.anon.8]* @partition_context_lookup, i64 0, i64 %117, i32 1
  %131 = load i8, i8* %130, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %124, i8 %131, i64 %129, i1 false) #8
  br label %132

132:                                              ; preds = %116, %98, %9, %19
  ret void
}

declare signext i16 @vp9_dc_quant(i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare float @logf(float) local_unnamed_addr #6

declare void @vp9_setup_dst_planes(%struct.macroblockd_plane*, %struct.yv12_buffer_config*, i32, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #6

declare void @vp9_highbd_fwht4x4_c(i16*, i32*, i32) #2

declare void @vpx_highbd_fdct4x4_sse2(i16*, i32*, i32) #2

declare void @vp9_fwht4x4_sse2(i16*, i32*, i32) #2

declare void @vpx_fdct4x4_sse2(i16*, i32*, i32) #2

declare void @vp9_highbd_iwht4x4_add(i32*, i16*, i32, i32, i32) #2

declare void @vp9_highbd_idct4x4_add(i32*, i16*, i32, i32, i32) #2

declare void @vp9_iwht4x4_add(i32*, i8*, i32, i32) #2

declare void @vp9_idct4x4_add(i32*, i8*, i32, i32) #2

declare void @vp9_frame_init_quantizer(%struct.VP9_COMP*) local_unnamed_addr #2

declare void @vp9_initialize_rd_consts(%struct.VP9_COMP*) local_unnamed_addr #2

declare void @vp9_initialize_me_consts(%struct.VP9_COMP*, %struct.macroblock*, i32) local_unnamed_addr #2

declare void @vp9_row_mt_sync_read_dummy(%struct.VP9RowMTSyncData*, i32, i32) #2

declare void @vp9_row_mt_sync_write_dummy(%struct.VP9RowMTSyncData*, i32, i32, i32) #2

declare void @vp9_encode_tiles_mt(%struct.VP9_COMP*) local_unnamed_addr #2

declare void @vp9_row_mt_sync_read(%struct.VP9RowMTSyncData*, i32, i32) #2

declare void @vp9_row_mt_sync_write(%struct.VP9RowMTSyncData*, i32, i32, i32) #2

declare void @vp9_encode_tiles_row_mt(%struct.VP9_COMP*) local_unnamed_addr #2

declare void @vp9_setup_block_planes(%struct.macroblockd*, i32, i32) local_unnamed_addr #2

declare void @vpx_highbd_8_get16x16var_sse2(i8*, i32, i8*, i32, i32*, i32*) local_unnamed_addr #2

declare void @vpx_highbd_10_get16x16var_sse2(i8*, i32, i8*, i32, i32*, i32*) local_unnamed_addr #2

declare void @vpx_highbd_12_get16x16var_sse2(i8*, i32, i8*, i32, i32*, i32*) local_unnamed_addr #2

declare void @vp9_disable_segmentation(%struct.segmentation*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #7

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #7

declare void @vp9_perceptual_aq_mode_setup(%struct.VP9_COMP*, %struct.segmentation*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @gettimeofday(%struct.timeval* nocapture, i8* nocapture) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = distinct !{!10, !8}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !8}
!17 = distinct !{!17, !8}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !8}
!24 = distinct !{!24, !8}
!25 = distinct !{!25, !26}
!26 = !{!"llvm.loop.unroll.disable"}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !29, !8}
!29 = !{!"llvm.loop.unroll.runtime.disable"}
!30 = distinct !{!30, !8}
!31 = distinct !{!31, !29, !8}
!32 = distinct !{!32, !8}
!33 = distinct !{!33, !8}
!34 = distinct !{!34, !8}
!35 = distinct !{!35, !8}
!36 = distinct !{!36, !8}
!37 = distinct !{!37, !8}
!38 = distinct !{!38, !26}
!39 = distinct !{!39, !8}
!40 = distinct !{!40, !8}
!41 = distinct !{!41, !26}
!42 = distinct !{!42, !26}
!43 = distinct !{!43, !26}
!44 = distinct !{!44, !26}
!45 = distinct !{!45, !26}
!46 = distinct !{!46, !26}
!47 = distinct !{!47, !26}
