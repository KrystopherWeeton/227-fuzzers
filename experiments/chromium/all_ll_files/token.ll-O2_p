; ModuleID = '../../base/token.cc'
source_filename = "../../base/token.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::Token" = type { i64, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::Pickle" = type { i32 (...)**, %"struct.base::Pickle::Header"*, i64, i64, i64 }
%"struct.base::Pickle::Header" = type { i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.1 }
%union.anon.1 = type { %"class.base::Token" }
%"class.base::PickleIterator" = type { i8*, i64, i64 }

@.str = private unnamed_addr constant [13 x i8] c"%016lX%016lX\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN4base5Token12CreateRandomEv() local_unnamed_addr #0 align 2 {
  %1 = alloca %"class.base::Token", align 8
  %2 = getelementptr inbounds %"class.base::Token", %"class.base::Token"* %1, i64 0, i32 0
  %3 = getelementptr inbounds %"class.base::Token", %"class.base::Token"* %1, i64 0, i32 1
  %4 = bitcast %"class.base::Token"* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 16, i1 false) #3
  call void @_ZN4base9RandBytesEPvm(i8* nonnull %4, i64 16) #3
  %5 = load i64, i64* %2, align 8
  %6 = insertvalue { i64, i64 } undef, i64 %5, 0
  %7 = load i64, i64* %3, align 8
  %8 = insertvalue { i64, i64 } %6, i64 %7, 1
  ret { i64, i64 } %8
}

declare void @_ZN4base9RandBytesEPvm(i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4base5Token8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.base::Token"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::Token", %"class.base::Token"* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::Token", %"class.base::Token"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i64 %4, i64 %6) #3
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base18WriteTokenToPickleEPNS_6PickleERKNS_5TokenE(%"class.base::Pickle"*, %"class.base::Token"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.base::Token", %"class.base::Token"* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  store i64 %6, i64* %3, align 8
  call void @_ZN4base6Pickle16WriteBytesStaticILm8EEEvPKv(%"class.base::Pickle"* %0, i8* nonnull %7) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  %8 = getelementptr inbounds %"class.base::Token", %"class.base::Token"* %1, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  store i64 %9, i64* %4, align 8
  call void @_ZN4base6Pickle16WriteBytesStaticILm8EEEvPKv(%"class.base::Pickle"* %0, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base19ReadTokenFromPickleEPNS_14PickleIteratorE(%"class.absl::optional"* noalias nocapture sret, %"class.base::PickleIterator"*) local_unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #3
  store i64 -6148914691236517206, i64* %3, align 8
  %6 = call zeroext i1 @_ZN4base14PickleIterator10ReadUInt64EPm(%"class.base::PickleIterator"* %1, i64* nonnull %3) #3
  br i1 %6, label %9, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %8, align 8
  br label %20

9:                                                ; preds = %2
  %10 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #3
  store i64 -6148914691236517206, i64* %4, align 8
  %11 = call zeroext i1 @_ZN4base14PickleIterator10ReadUInt64EPm(%"class.base::PickleIterator"* %1, i64* nonnull %4) #3
  br i1 %11, label %12, label %17

12:                                               ; preds = %9
  %13 = load i64, i64* %3, align 8
  %14 = load i64, i64* %4, align 8
  %15 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i64 %13, i64* %15, align 8
  %16 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  store i64 %14, i64* %16, align 8
  br label %17

17:                                               ; preds = %9, %12
  %18 = phi i8 [ 1, %12 ], [ 0, %9 ]
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 %18, i8* %19, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #3
  br label %20

20:                                               ; preds = %17, %7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZN4base14PickleIterator10ReadUInt64EPm(%"class.base::PickleIterator"*, i64*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN4base6Pickle16WriteBytesStaticILm8EEEvPKv(%"class.base::Pickle"*, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
