; ModuleID = '../../third_party/blink/renderer/core/css/counter_style.cc'
source_filename = "../../third_party/blink/renderer/core/css/counter_style.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StaticSingleton" = type { %"class.WTF::StaticSingleton<blink::Persistent<blink::CounterStyle> >::InstanceStorage" }
%"class.WTF::StaticSingleton<blink::Persistent<blink::CounterStyle> >::InstanceStorage" = type { [16 x i8] }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.152", %"class.std::__1::unique_ptr.152", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.163", %"class.std::__1::unique_ptr.169", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.181", %"class.std::__1::unique_ptr.187", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.194", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.21", %"class.std::__1::unique_ptr.25", %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.37", %"class.std::__1::unique_ptr.43", %"class.std::__1::unique_ptr.49", %"class.std::__1::unique_ptr.60", %"class.std::__1::unique_ptr.67", %"class.std::__1::unique_ptr.67", %"class.std::__1::unique_ptr.74", %"class.std::__1::unique_ptr.81", %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.95", %"class.std::__1::unique_ptr.102", %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.132", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.25" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.49" = type { %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.52" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.52" = type { %"struct.std::__1::__atomic_base.53" }
%"struct.std::__1::__atomic_base.53" = type { %"struct.std::__1::__atomic_base.54" }
%"struct.std::__1::__atomic_base.54" = type { %"struct.std::__1::__cxx_atomic_impl.55" }
%"struct.std::__1::__cxx_atomic_impl.55" = type { %"struct.std::__1::__cxx_atomic_base_impl.56" }
%"struct.std::__1::__cxx_atomic_base_impl.56" = type { i64 }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.blink::Worklist.63"* }
%"class.blink::Worklist.63" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.52" }
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.blink::Worklist.70"* }
%"class.blink::Worklist.70" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.52" }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.blink::Worklist.77"* }
%"class.blink::Worklist.77" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.52" }
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.blink::Worklist.84"* }
%"class.blink::Worklist.84" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.52" }
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.blink::Worklist.91"* }
%"class.blink::Worklist.91" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.52" }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"class.blink::Worklist.98"* }
%"class.blink::Worklist.98" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.52" }
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"class.blink::Worklist.105"* }
%"class.blink::Worklist.105" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.52" }
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.112", %"class.std::__1::__compressed_pair.119", %"class.std::__1::__compressed_pair.124", %"class.std::__1::__compressed_pair.126", [4 x i8] }>
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114", %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { i64 }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { float }
%"class.std::__1::unique_ptr.132" = type { %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.135", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.135" = type { %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.144" }
%"class.WTF::Vector.144" = type { %"class.WTF::VectorBuffer.145" }
%"class.WTF::VectorBuffer.145" = type { %"class.WTF::VectorBufferBase.146" }
%"class.WTF::VectorBufferBase.146" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.152" = type { %"class.std::__1::__compressed_pair.153" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.160" }
%"class.WTF::VectorBuffer.160" = type { %"class.WTF::VectorBufferBase.161" }
%"class.WTF::VectorBufferBase.161" = type { %"struct.std::__1::pair.162"*, i32, i32 }
%"struct.std::__1::pair.162" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.163" = type { %"class.std::__1::__compressed_pair.164" }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.175" }
%"class.std::__1::unique_ptr.175" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.63"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.70"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.77"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.84"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.91"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.198" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.181" = type { %"class.std::__1::__compressed_pair.182" }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.187" = type { %"class.std::__1::__compressed_pair.188" }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.193 }
%class.scoped_refptr.193 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.194" = type { %"struct.std::__1::__atomic_base.195" }
%"struct.std::__1::__atomic_base.195" = type { %"struct.std::__1::__cxx_atomic_impl.196" }
%"struct.std::__1::__cxx_atomic_impl.196" = type { %"struct.std::__1::__cxx_atomic_base_impl.197" }
%"struct.std::__1::__cxx_atomic_base_impl.197" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.284" }
%"struct.std::__1::atomic.284" = type { %"struct.std::__1::__atomic_base.285" }
%"struct.std::__1::__atomic_base.285" = type { %"struct.std::__1::__atomic_base.286" }
%"struct.std::__1::__atomic_base.286" = type { %"struct.std::__1::__cxx_atomic_impl.287" }
%"struct.std::__1::__cxx_atomic_impl.287" = type { %"struct.std::__1::__cxx_atomic_base_impl.288" }
%"struct.std::__1::__cxx_atomic_base_impl.288" = type { i32 }
%"class.blink::CounterStyle" = type <{ %"class.blink::Member", i32, i32, %"class.WTF::AtomicString", %"class.blink::Member.7", %"class.WTF::AtomicString", %"class.blink::Member.7", i8, [7 x i8], %"class.WTF::Vector", %"class.WTF::Vector.9", %"class.WTF::Vector.14", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i32, i32, i8, i8, i8, i8, [4 x i8] }>
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::StyleRuleCounterStyle"* }
%"class.blink::StyleRuleCounterStyle" = type <{ %"class.blink::StyleRuleBase", [7 x i8], %"class.WTF::AtomicString", %"class.blink::Member.3", %"class.blink::Member.3", %"class.blink::Member.3", %"class.blink::Member.3", %"class.blink::Member.3", %"class.blink::Member.3", %"class.blink::Member.3", %"class.blink::Member.3", %"class.blink::Member.3", %"class.blink::Member.3", i32, [4 x i8] }>
%"class.blink::StyleRuleBase" = type { i8 }
%"class.blink::Member.3" = type { %"class.blink::MemberBase.4" }
%"class.blink::MemberBase.4" = type { %"class.blink::CSSValue"* }
%"class.blink::CSSValue" = type { i8, i8, i8 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.blink::Member.7" = type { %"class.blink::MemberBase.8" }
%"class.blink::MemberBase.8" = type { %"class.blink::CounterStyle"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::Vector.9" = type { %"class.WTF::VectorBuffer.10" }
%"class.WTF::VectorBuffer.10" = type { %"class.WTF::VectorBufferBase.11" }
%"class.WTF::VectorBufferBase.11" = type { i32*, i32, i32 }
%"class.WTF::Vector.14" = type { %"class.WTF::VectorBuffer.15" }
%"class.WTF::VectorBuffer.15" = type { %"class.WTF::VectorBufferBase.16" }
%"class.WTF::VectorBufferBase.16" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i32, i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.blink::CounterStyleMap" = type { %"class.blink::Member.244", %"class.blink::Member.246", %"class.blink::HeapHashMap" }
%"class.blink::Member.244" = type { %"class.blink::MemberBase.245" }
%"class.blink::MemberBase.245" = type { %"class.blink::Document"* }
%"class.blink::Document" = type opaque
%"class.blink::Member.246" = type { %"class.blink::MemberBase.247" }
%"class.blink::MemberBase.247" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type opaque
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable.250" }
%"class.WTF::HashTable.250" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.blink::PersistentBase" = type { %"class.blink::CounterStyle"*, %"class.blink::PersistentNodePtr" }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::CSSIdentifierValue" = type { %"class.blink::CSSValue", i32 }
%"class.blink::CSSCustomIdentValue" = type <{ %"class.blink::CSSValue", [5 x i8], %"class.WTF::AtomicString", i32, [4 x i8] }>
%"class.blink::CSSPrimitiveValue" = type { %"class.blink::CSSValue" }
%"class.blink::CSSValueList" = type { %"class.blink::CSSValue", %"class.blink::HeapVector" }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.205" }
%"class.WTF::Vector.205" = type { %"class.WTF::VectorBuffer.206" }
%"class.WTF::VectorBuffer.206" = type { %"class.WTF::VectorBufferBase.207", [32 x i8] }
%"class.WTF::VectorBufferBase.207" = type { %"class.blink::Member.3"*, i32, i32 }
%"class.blink::CSSValuePair" = type <{ %"class.blink::CSSValue", [5 x i8], %"class.blink::Member.3", %"class.blink::Member.3", i32, [4 x i8] }>
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon, i32, i8, i8, [2 x i8] }>
%union.anon = type { %"class.WTF::Vector.210" }
%"class.WTF::Vector.210" = type { %"class.WTF::VectorBuffer.211" }
%"class.WTF::VectorBuffer.211" = type { %"class.WTF::VectorBufferBase.212", [16 x i8] }
%"class.WTF::VectorBufferBase.212" = type { i8*, i32, i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::Vector.234" = type { %"class.WTF::VectorBuffer.235" }
%"class.WTF::VectorBuffer.235" = type { %"class.WTF::VectorBufferBase.217" }
%"class.WTF::VectorBufferBase.217" = type { i16*, i32, i32 }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"class.blink::Member.7"*, i32, i32, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.228" }
%"class.std::__1::__compressed_pair.228" = type { %"struct.std::__1::__compressed_pair_elem.229" }
%"struct.std::__1::__compressed_pair_elem.229" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.230 }
%union.anon.230 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.blink::HeapHashTableBacking" = type { i8 }

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_ = comdat any

$_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEEaSERKS2_ = comdat any

$_ZN3WTF6VectorINSt3__14pairIiiEELj0ENS_18PartitionAllocatorEEaSERKS5_ = comdat any

$_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm = comdat any

$_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIjEEvOT_ = comdat any

$_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE14ExpandCapacityEjPj = comdat any

$_ZNK3WTF6VectorIjLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE6AppendIjEEvPKT_j = comdat any

$_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKDsEEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm = comdat any

$_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_12CounterStyleELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv = comdat any

$_ZN5blink10TraceTraitINS_12CounterStyleEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_12CounterStyleEEEPhm = comdat any

$_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc = comdat any

$_ZN5blink8internal14FinalizerTraitINS_12CounterStyleEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_12CounterStyleEE7GetNameEPKv = comdat any

$_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIiEEvOT_ = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZN3WTF6VectorINSt3__14pairIiiEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairIiiEEEEmm = comdat any

$_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF9HashTableIN5blink6MemberINS1_12CounterStyleEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE6insertINS_22IdentityHashTranslatorIS7_S9_SA_EERKPS3_SF_EENS_18HashTableAddResultISB_S4_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIN5blink6MemberINS1_12CounterStyleEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE6ExpandEPS4_ = comdat any

$_ZN3WTF9HashTableIN5blink6MemberINS1_12CounterStyleEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE12ExpandBufferEjPS4_Rb = comdat any

$_ZN3WTF9HashTableIN5blink6MemberINS1_12CounterStyleEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE8RehashToEPS4_jSC_ = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE4CallEm = comdat any

$_ZN5blink20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES5_NS1_17IdentityExtractorENS1_10MemberHashIS4_EENS1_10HashTraitsIS5_EESA_NS_13HeapAllocatorEEEE14AllocateObjectISD_EEPvm = comdat any

$_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv = comdat any

$_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE7GetNameEPKv = comdat any

$_ZN5blink10TraceTraitINS_21StyleRuleCounterStyleEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_12CounterStyleEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_12CounterStyleEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index = comdat any

@_ZZN5blink12CounterStyle10GetDecimalEvE9s_decimal = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink12CounterStyle10GetDecimalEvE9s_decimal = internal global i64 0, align 8
@.str = private unnamed_addr constant [8 x i8] c"decimal\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv = private unnamed_addr constant [60 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned int]\00", align 1
@.str.5 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"Allocator::IsAllocationAllowed()\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"new_size >= size_\00", align 1
@_ZZN5blink12_GLOBAL__N_124EthiopicNumericAlgorithmEjE5units = internal constant [9 x i16] [i16 4969, i16 4970, i16 4971, i16 4972, i16 4973, i16 4974, i16 4975, i16 4976, i16 4977], align 16
@_ZZN5blink12_GLOBAL__N_124EthiopicNumericAlgorithmEjE4tens = internal constant [9 x i16] [i16 4978, i16 4979, i16 4980, i16 4981, i16 4982, i16 4983, i16 4984, i16 4985, i16 4986], align 16
@_ZN3WTF7unicodeL35kEthiopicNumberTenThousandCharacterE = internal constant i16 4988, align 2
@_ZN3WTF7unicodeL31kEthiopicNumberHundredCharacterE = internal constant i16 4987, align 2
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = char16_t]\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink12CounterStyleEEEPKcv = private unnamed_addr constant [67 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::CounterStyle]\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.10 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_12CounterStyleEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_12CounterStyleEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_12CounterStyleEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_12CounterStyleEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_12CounterStyleEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.11 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__14pairIiiEEEEPKcv = private unnamed_addr constant [72 x i8] c"const char *WTF::GetStringWithTypeName() [T = std::__1::pair<int, int>]\00", align 1
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@.str.12 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.13 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@.str.14 = private unnamed_addr constant [18 x i8] c"num_elements > 0u\00", align 1
@.str.15 = private unnamed_addr constant [97 x i8] c"../../third_party/blink/renderer/platform/heap/impl/collection_support/heap_hash_table_backing.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv, void (i8*)* null, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink20HeapHashTableBackingINS_9HashTableINS1_6MemberINS1_12CounterStyleEEES6_NS_17IdentityExtractorENS_10MemberHashIS5_EENS_10HashTraitsIS6_EESB_NS1_13HeapAllocatorEEEEEEEPKcv = private unnamed_addr constant [356 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HeapHashTableBacking<WTF::HashTable<blink::Member<blink::CounterStyle>, blink::Member<blink::CounterStyle>, WTF::IdentityExtractor, WTF::MemberHash<blink::CounterStyle>, WTF::HashTraits<blink::Member<blink::CounterStyle> >, WTF::HashTraits<blink::Member<blink::CounterStyle> >, blink::HeapAllocator> >]\00", align 1

@_ZN5blink12CounterStyleD1Ev = hidden unnamed_addr alias void (%"class.blink::CounterStyle"*), void (%"class.blink::CounterStyle"*)* @_ZN5blink12CounterStyleD2Ev
@_ZN5blink12CounterStyleC1ERKNS_21StyleRuleCounterStyleE = hidden unnamed_addr alias void (%"class.blink::CounterStyle"*, %"class.blink::StyleRuleCounterStyle"*), void (%"class.blink::CounterStyle"*, %"class.blink::StyleRuleCounterStyle"*)* @_ZN5blink12CounterStyleC2ERKNS_21StyleRuleCounterStyleE

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.blink::CounterStyle"* @_ZN5blink12CounterStyle10GetDecimalEv() local_unnamed_addr #0 align 2 {
  %1 = alloca %"class.WTF::AtomicString", align 8
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink12CounterStyle10GetDecimalEvE9s_decimal to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %56, !prof !2

4:                                                ; preds = %0
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink12CounterStyle10GetDecimalEvE9s_decimal) #10
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %56, label %7

7:                                                ; preds = %4
  %8 = tail call %"class.blink::CounterStyleMap"* @_ZN5blink15CounterStyleMap20GetUACounterStyleMapEv() #10
  %9 = bitcast %"class.WTF::AtomicString"* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #10
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 7) #10
  %10 = call %"class.blink::CounterStyle"* @_ZNK5blink15CounterStyleMap28FindCounterStyleAcrossScopesERKN3WTF12AtomicStringE(%"class.blink::CounterStyleMap"* %8, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %1) #10
  store %"class.blink::CounterStyle"* %10, %"class.blink::CounterStyle"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink12CounterStyle10GetDecimalEvE9s_decimal to %"class.blink::CounterStyle"**), align 8
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink12CounterStyle10GetDecimalEvE9s_decimal, i64 0, i32 0, i32 0, i64 8) to %"class.blink::PersistentNode"**), align 8
  %11 = ptrtoint %"class.blink::CounterStyle"* %10 to i64
  switch i64 %11, label %12 [
    i64 0, label %38
    i64 -1, label %38
  ]

12:                                               ; preds = %7
  %13 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %14 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %13, i64 0, i32 1
  %15 = call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %14) #10
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %19, !prof !3

17:                                               ; preds = %12
  %18 = call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %14, i8* %18) #10
  br label %19

19:                                               ; preds = %17, %12
  %20 = phi i8* [ %18, %17 ], [ %15, %12 ]
  %21 = bitcast i8* %20 to %"class.blink::ThreadState"**
  %22 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %22, i64 0, i32 3, i32 0, i32 0, i32 0
  %24 = load %"class.blink::PersistentRegion"*, %"class.blink::PersistentRegion"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %24, i64 0, i32 0, i32 0
  %26 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %25, align 8
  %27 = icmp eq %"class.blink::PersistentNode"* %26, null
  br i1 %27, label %28, label %31, !prof !3

28:                                               ; preds = %19
  %29 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %24, i64 0, i32 0
  call void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"* %29) #10
  %30 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %25, align 8
  br label %31

31:                                               ; preds = %28, %19
  %32 = phi %"class.blink::PersistentNode"* [ %30, %28 ], [ %26, %19 ]
  %33 = bitcast %"class.blink::PersistentNode"* %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.blink::PersistentRegion"* %24 to i64*
  store i64 %34, i64* %35, align 8
  %36 = bitcast %"class.blink::PersistentNode"* %32 to %"class.blink::PersistentBase"**
  store %"class.blink::PersistentBase"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink12CounterStyle10GetDecimalEvE9s_decimal to %"class.blink::PersistentBase"*), %"class.blink::PersistentBase"** %36, align 8
  %37 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %32, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_12CounterStyleELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv, void (%"class.blink::Visitor"*, i8*)** %37, align 8
  store %"class.blink::PersistentNode"* %32, %"class.blink::PersistentNode"** bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink12CounterStyle10GetDecimalEvE9s_decimal, i64 0, i32 0, i32 0, i64 8) to %"class.blink::PersistentNode"**), align 8
  br label %38

38:                                               ; preds = %31, %7, %7
  %39 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %40, null
  br i1 %41, label %55, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  br i1 %46, label %49, label %51

49:                                               ; preds = %42
  %50 = add i32 %48, -1
  store i32 %50, i32* %47, align 4
  br label %51

51:                                               ; preds = %49, %42
  %52 = phi i32 [ %50, %49 ], [ %48, %42 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %40) #10
  br label %55

55:                                               ; preds = %38, %51, %54
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #10
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink12CounterStyle10GetDecimalEvE9s_decimal) #10
  br label %56

56:                                               ; preds = %4, %55, %0
  %57 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink12CounterStyle10GetDecimalEvE9s_decimal to %"class.blink::CounterStyle"**), align 8
  ret %"class.blink::CounterStyle"* %57
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN5blink12CounterStyle24ToCounterStyleSystemEnumEPKNS_8CSSValueE(%"class.blink::CSSValue"* readonly) local_unnamed_addr #3 align 2 {
  %2 = icmp eq %"class.blink::CSSValue"* %0, null
  br i1 %2, label %36, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %0, i64 0, i32 2
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 2
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %0, i64 1, i32 1
  %9 = bitcast i8* %8 to i32*
  br label %15

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %0, i64 2, i32 2
  %12 = bitcast i8* %11 to %"class.blink::CSSIdentifierValue"**
  %13 = load %"class.blink::CSSIdentifierValue"*, %"class.blink::CSSIdentifierValue"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::CSSIdentifierValue", %"class.blink::CSSIdentifierValue"* %13, i64 0, i32 1
  br label %15

15:                                               ; preds = %10, %7
  %16 = phi i32* [ %9, %7 ], [ %14, %10 ]
  %17 = load i32, i32* %16, align 4
  switch i32 %17, label %35 [
    i32 869, label %36
    i32 467, label %18
    i32 870, label %19
    i32 676, label %20
    i32 871, label %21
    i32 872, label %22
    i32 881, label %23
    i32 874, label %24
    i32 875, label %25
    i32 876, label %26
    i32 877, label %27
    i32 878, label %28
    i32 879, label %29
    i32 880, label %30
    i32 882, label %31
    i32 883, label %32
    i32 884, label %33
    i32 873, label %34
  ]

18:                                               ; preds = %15
  br label %36

19:                                               ; preds = %15
  br label %36

20:                                               ; preds = %15
  br label %36

21:                                               ; preds = %15
  br label %36

22:                                               ; preds = %15
  br label %36

23:                                               ; preds = %15
  br label %36

24:                                               ; preds = %15
  br label %36

25:                                               ; preds = %15
  br label %36

26:                                               ; preds = %15
  br label %36

27:                                               ; preds = %15
  br label %36

28:                                               ; preds = %15
  br label %36

29:                                               ; preds = %15
  br label %36

30:                                               ; preds = %15
  br label %36

31:                                               ; preds = %15
  br label %36

32:                                               ; preds = %15
  br label %36

33:                                               ; preds = %15
  br label %36

34:                                               ; preds = %15
  br label %36

35:                                               ; preds = %15
  br label %36

36:                                               ; preds = %18, %19, %20, %21, %22, %23, %24, %25, %26, %27, %28, %29, %30, %31, %32, %33, %34, %35, %15, %1
  %37 = phi i32 [ 2, %1 ], [ 2, %35 ], [ 17, %34 ], [ 16, %33 ], [ 15, %32 ], [ 14, %31 ], [ 13, %30 ], [ 12, %29 ], [ 11, %28 ], [ 10, %27 ], [ 9, %26 ], [ 8, %25 ], [ 7, %24 ], [ 6, %23 ], [ 5, %22 ], [ 4, %21 ], [ 3, %20 ], [ 2, %19 ], [ 1, %18 ], [ 0, %15 ]
  ret i32 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CounterStyleD2Ev(%"class.blink::CounterStyle"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 16, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  br i1 %9, label %12, label %14

12:                                               ; preds = %5
  %13 = add i32 %11, -1
  store i32 %13, i32* %10, align 4
  br label %14

14:                                               ; preds = %12, %5
  %15 = phi i32 [ %13, %12 ], [ %11, %5 ]
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %14
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #10
  br label %18

18:                                               ; preds = %1, %14, %17
  %19 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 15, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %31

29:                                               ; preds = %22
  %30 = add i32 %28, -1
  store i32 %30, i32* %27, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ %28, %22 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %20) #10
  br label %35

35:                                               ; preds = %18, %31, %34
  %36 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 14, i32 0, i32 0
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %38, label %52, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  br i1 %43, label %46, label %48

46:                                               ; preds = %39
  %47 = add i32 %45, -1
  store i32 %47, i32* %44, align 4
  br label %48

48:                                               ; preds = %46, %39
  %49 = phi i32 [ %47, %46 ], [ %45, %39 ]
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %48
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %37) #10
  br label %52

52:                                               ; preds = %35, %48, %51
  %53 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 13, i32 0, i32 0
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %53, align 8
  %55 = icmp eq %"class.WTF::StringImpl"* %54, null
  br i1 %55, label %69, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 0
  %62 = load i32, i32* %61, align 4
  br i1 %60, label %63, label %65

63:                                               ; preds = %56
  %64 = add i32 %62, -1
  store i32 %64, i32* %61, align 4
  br label %65

65:                                               ; preds = %63, %56
  %66 = phi i32 [ %64, %63 ], [ %62, %56 ]
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %65
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %54) #10
  br label %69

69:                                               ; preds = %52, %65, %68
  %70 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 12, i32 0, i32 0
  %71 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %70, align 8
  %72 = icmp eq %"class.WTF::StringImpl"* %71, null
  br i1 %72, label %86, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 0
  %79 = load i32, i32* %78, align 4
  br i1 %77, label %80, label %82

80:                                               ; preds = %73
  %81 = add i32 %79, -1
  store i32 %81, i32* %78, align 4
  br label %82

82:                                               ; preds = %80, %73
  %83 = phi i32 [ %81, %80 ], [ %79, %73 ]
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %86

85:                                               ; preds = %82
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %71) #10
  br label %86

86:                                               ; preds = %69, %82, %85
  %87 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %88 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %87, align 8
  %89 = icmp eq %"struct.std::__1::pair"* %88, null
  %90 = bitcast %"struct.std::__1::pair"* %88 to i8*
  br i1 %89, label %97, label %91, !prof !4

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 11, i32 0, i32 0, i32 2
  %93 = load i32, i32* %92, align 4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %96, label %95, !prof !3

95:                                               ; preds = %91
  store i32 0, i32* %92, align 4
  br label %96

96:                                               ; preds = %95, %91
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %90) #10
  store %"struct.std::__1::pair"* null, %"struct.std::__1::pair"** %87, align 8
  br label %97

97:                                               ; preds = %86, %96
  %98 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %99 = load i32*, i32** %98, align 8
  %100 = icmp eq i32* %99, null
  %101 = bitcast i32* %99 to i8*
  br i1 %100, label %108, label %102, !prof !4

102:                                              ; preds = %97
  %103 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 10, i32 0, i32 0, i32 2
  %104 = load i32, i32* %103, align 4
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %107, label %106, !prof !3

106:                                              ; preds = %102
  store i32 0, i32* %103, align 4
  br label %107

107:                                              ; preds = %106, %102
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %101) #10
  store i32* null, i32** %98, align 8
  br label %108

108:                                              ; preds = %97, %107
  %109 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 9
  %110 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %109, i64 0, i32 0, i32 0, i32 0
  %111 = load %"class.WTF::String"*, %"class.WTF::String"** %110, align 8
  %112 = icmp eq %"class.WTF::String"* %111, null
  br i1 %112, label %147, label %113, !prof !4

113:                                              ; preds = %108
  %114 = bitcast %"class.WTF::String"* %111 to i8*
  %115 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 9, i32 0, i32 0, i32 2
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %145, label %118, !prof !3

118:                                              ; preds = %113
  %119 = zext i32 %116 to i64
  %120 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %111, i64 %119
  br label %121

121:                                              ; preds = %139, %118
  %122 = phi %"class.WTF::String"* [ %140, %139 ], [ %111, %118 ]
  %123 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %122, i64 0, i32 0, i32 0
  %124 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %123, align 8
  %125 = icmp eq %"class.WTF::StringImpl"* %124, null
  br i1 %125, label %139, label %126

126:                                              ; preds = %121
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %124, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %128 = load atomic i32, i32* %127 monotonic, align 4
  %129 = and i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %124, i64 0, i32 0
  %132 = load i32, i32* %131, align 4
  br i1 %130, label %133, label %135

133:                                              ; preds = %126
  %134 = add i32 %132, -1
  store i32 %134, i32* %131, align 4
  br label %135

135:                                              ; preds = %133, %126
  %136 = phi i32 [ %134, %133 ], [ %132, %126 ]
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %139

138:                                              ; preds = %135
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %124) #10
  br label %139

139:                                              ; preds = %138, %135, %121
  %140 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %122, i64 1
  %141 = icmp eq %"class.WTF::String"* %140, %120
  br i1 %141, label %142, label %121

142:                                              ; preds = %139
  store i32 0, i32* %115, align 4
  %143 = bitcast %"class.WTF::Vector"* %109 to i8**
  %144 = load i8*, i8** %143, align 8
  br label %145

145:                                              ; preds = %142, %113
  %146 = phi i8* [ %144, %142 ], [ %114, %113 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %146) #10
  store %"class.WTF::String"* null, %"class.WTF::String"** %110, align 8
  br label %147

147:                                              ; preds = %108, %145
  %148 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %149 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %148, align 8
  %150 = icmp eq %"class.WTF::StringImpl"* %149, null
  br i1 %150, label %164, label %151

151:                                              ; preds = %147
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %149, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %153 = load atomic i32, i32* %152 monotonic, align 4
  %154 = and i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %149, i64 0, i32 0
  %157 = load i32, i32* %156, align 4
  br i1 %155, label %158, label %160

158:                                              ; preds = %151
  %159 = add i32 %157, -1
  store i32 %159, i32* %156, align 4
  br label %160

160:                                              ; preds = %158, %151
  %161 = phi i32 [ %159, %158 ], [ %157, %151 ]
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %164

163:                                              ; preds = %160
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %149) #10
  br label %164

164:                                              ; preds = %147, %160, %163
  %165 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %166 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %165, align 8
  %167 = icmp eq %"class.WTF::StringImpl"* %166, null
  br i1 %167, label %181, label %168

168:                                              ; preds = %164
  %169 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %166, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %170 = load atomic i32, i32* %169 monotonic, align 4
  %171 = and i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %166, i64 0, i32 0
  %174 = load i32, i32* %173, align 4
  br i1 %172, label %175, label %177

175:                                              ; preds = %168
  %176 = add i32 %174, -1
  store i32 %176, i32* %173, align 4
  br label %177

177:                                              ; preds = %175, %168
  %178 = phi i32 [ %176, %175 ], [ %174, %168 ]
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %180, label %181

180:                                              ; preds = %177
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %166) #10
  br label %181

181:                                              ; preds = %164, %177, %180
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle7GetNameEv(%"class.blink::CounterStyle"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.blink::StyleRuleCounterStyle"*, %"class.blink::StyleRuleCounterStyle"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %3, i64 0, i32 2, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #10
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !3

21:                                               ; preds = %12
  tail call void @llvm.trap() #10
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %1, %7, %22
  ret %"class.WTF::StringImpl"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CounterStyle"* @_ZN5blink12CounterStyle6CreateERKNS_21StyleRuleCounterStyleE(%"class.blink::StyleRuleCounterStyle"* dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %2 = tail call zeroext i1 @_ZNK5blink21StyleRuleCounterStyle15HasValidSymbolsEv(%"class.blink::StyleRuleCounterStyle"* %0) #10
  br i1 %2, label %3, label %10

3:                                                ; preds = %1
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_12CounterStyleEEEPhm(i64 160) #10
  %5 = bitcast i8* %4 to %"class.blink::CounterStyle"*
  tail call void @_ZN5blink12CounterStyleC2ERKNS_21StyleRuleCounterStyleE(%"class.blink::CounterStyle"* %5, %"class.blink::StyleRuleCounterStyle"* dereferenceable(104) %0) #10
  %6 = getelementptr inbounds i8, i8* %4, i64 -4
  %7 = bitcast i8* %6 to i16*
  %8 = load atomic i16, i16* %7 monotonic, align 2
  %9 = or i16 %8, 1
  store atomic i16 %9, i16* %7 release, align 2
  br label %10

10:                                               ; preds = %1, %3
  %11 = phi %"class.blink::CounterStyle"* [ %5, %3 ], [ null, %1 ]
  ret %"class.blink::CounterStyle"* %11
}

declare zeroext i1 @_ZNK5blink21StyleRuleCounterStyle15HasValidSymbolsEv(%"class.blink::StyleRuleCounterStyle"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CounterStyleC2ERKNS_21StyleRuleCounterStyleE(%"class.blink::CounterStyle"*, %"class.blink::StyleRuleCounterStyle"* dereferenceable(104)) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca %"class.WTF::String", align 8
  %5 = alloca %"class.WTF::String", align 8
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to %"struct.std::__1::pair"*
  %8 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::StyleRuleCounterStyle"* %1, %"class.blink::StyleRuleCounterStyle"** %8, align 8
  %9 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %1, i64 0, i32 13
  %11 = load i32, i32* %10, align 8
  store i32 %11, i32* %9, align 8
  %12 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 2
  store i32 2, i32* %12, align 4
  %13 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 3
  %14 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 5
  %16 = bitcast %"class.WTF::AtomicString"* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 16, i1 false)
  tail call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* %15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 7) #10
  %17 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 6, i32 0, i32 0
  store %"class.blink::CounterStyle"* null, %"class.blink::CounterStyle"** %17, align 8
  %18 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 7
  store i8 0, i8* %18, align 8
  %19 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 9
  %20 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 10
  %21 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 11
  %22 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 12
  %23 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %22, i64 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 13
  %25 = bitcast %"class.WTF::Vector"* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 56, i1 false)
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i64 2) #10
  %26 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 14
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i64 1) #10
  %27 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 15
  %28 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %27, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 16
  %30 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %29, i64 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 17
  %32 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 18
  %33 = bitcast %"class.WTF::String"* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 20, i1 false)
  store i32 1, i32* %32, align 4
  %34 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 19
  %35 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %1, i64 0, i32 3, i32 0, i32 0
  %36 = bitcast i8* %34 to i32*
  store i32 0, i32* %36, align 8
  %37 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %35, align 8
  %38 = icmp eq %"class.blink::CSSValue"* %37, null
  br i1 %38, label %99, label %39

39:                                               ; preds = %2
  %40 = tail call i32 @_ZN5blink12CounterStyle24ToCounterStyleSystemEnumEPKNS_8CSSValueE(%"class.blink::CSSValue"* nonnull %37)
  store i32 %40, i32* %12, align 4
  switch i32 %40, label %99 [
    i32 17, label %41
    i32 1, label %83
  ]

41:                                               ; preds = %39
  %42 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %37, i64 5, i32 1
  %43 = bitcast i8* %42 to %"class.blink::CSSCustomIdentValue"**
  %44 = load %"class.blink::CSSCustomIdentValue"*, %"class.blink::CSSCustomIdentValue"** %43, align 8
  %45 = getelementptr inbounds %"class.blink::CSSCustomIdentValue", %"class.blink::CSSCustomIdentValue"* %44, i64 0, i32 2, i32 0, i32 0, i32 0
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %47 = icmp eq %"class.WTF::StringImpl"* %46, null
  br i1 %47, label %65, label %48

48:                                               ; preds = %41
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %46, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = and i32 %50, 2
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %65

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %46, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i33
  %57 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %56, i33 1) #10
  %58 = extractvalue { i33, i1 } %57, 1
  %59 = extractvalue { i33, i1 } %57, 0
  %60 = icmp slt i33 %59, 0
  %61 = or i1 %58, %60
  br i1 %61, label %62, label %63, !prof !3

62:                                               ; preds = %53
  tail call void @llvm.trap() #10
  unreachable

63:                                               ; preds = %53
  %64 = trunc i33 %59 to i32
  store i32 %64, i32* %54, align 4
  br label %65

65:                                               ; preds = %41, %48, %63
  %66 = ptrtoint %"class.WTF::StringImpl"* %46 to i64
  %67 = bitcast %"class.WTF::AtomicString"* %13 to i64*
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  store i64 %66, i64* %67, align 8
  %69 = icmp eq %"class.WTF::StringImpl"* %68, null
  br i1 %69, label %99, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load atomic i32, i32* %71 monotonic, align 4
  %73 = and i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 0
  %76 = load i32, i32* %75, align 4
  br i1 %74, label %77, label %79

77:                                               ; preds = %70
  %78 = add i32 %76, -1
  store i32 %78, i32* %75, align 4
  br label %79

79:                                               ; preds = %77, %70
  %80 = phi i32 [ %78, %77 ], [ %76, %70 ]
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %99

82:                                               ; preds = %79
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %68) #10
  br label %99

83:                                               ; preds = %39
  %84 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %37, i64 0, i32 2
  %85 = load i8, i8* %84, align 1
  %86 = icmp eq i8 %85, 9
  br i1 %86, label %87, label %99

87:                                               ; preds = %83
  %88 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %37, i64 5, i32 1
  %89 = bitcast i8* %88 to %"class.blink::CSSPrimitiveValue"**
  %90 = load %"class.blink::CSSPrimitiveValue"*, %"class.blink::CSSPrimitiveValue"** %89, align 8
  %91 = tail call double @_ZNK5blink17CSSPrimitiveValue14GetDoubleValueEv(%"class.blink::CSSPrimitiveValue"* %90) #10
  %92 = fcmp ult double %91, 0x41DFFFFFFFC00000
  br i1 %92, label %93, label %97

93:                                               ; preds = %87
  %94 = fcmp ugt double %91, 0xC1E0000000000000
  br i1 %94, label %95, label %97

95:                                               ; preds = %93
  %96 = fptosi double %91 to i32
  br label %97

97:                                               ; preds = %87, %93, %95
  %98 = phi i32 [ %96, %95 ], [ 2147483647, %87 ], [ -2147483648, %93 ]
  store i32 %98, i32* %32, align 4
  br label %99

99:                                               ; preds = %65, %79, %82, %39, %2, %97, %83
  %100 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %1, i64 0, i32 9, i32 0, i32 0
  %101 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %100, align 8
  %102 = icmp eq %"class.blink::CSSValue"* %101, null
  br i1 %102, label %144, label %103

103:                                              ; preds = %99
  %104 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %101, i64 2, i32 2
  %105 = bitcast i8* %104 to %"class.WTF::StringImpl"**
  %106 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %105, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %106, null
  br i1 %107, label %125, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %125

113:                                              ; preds = %108
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = zext i32 %115 to i33
  %117 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %116, i33 1) #10
  %118 = extractvalue { i33, i1 } %117, 1
  %119 = extractvalue { i33, i1 } %117, 0
  %120 = icmp slt i33 %119, 0
  %121 = or i1 %118, %120
  br i1 %121, label %122, label %123, !prof !3

122:                                              ; preds = %113
  tail call void @llvm.trap() #10
  unreachable

123:                                              ; preds = %113
  %124 = trunc i33 %119 to i32
  store i32 %124, i32* %114, align 4
  br label %125

125:                                              ; preds = %103, %108, %123
  %126 = ptrtoint %"class.WTF::StringImpl"* %106 to i64
  %127 = bitcast %"class.WTF::AtomicString"* %15 to i64*
  %128 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %15, i64 0, i32 0, i32 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  store i64 %126, i64* %127, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %144, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load atomic i32, i32* %132 monotonic, align 4
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 0
  %137 = load i32, i32* %136, align 4
  br i1 %135, label %138, label %140

138:                                              ; preds = %131
  %139 = add i32 %137, -1
  store i32 %139, i32* %136, align 4
  br label %140

140:                                              ; preds = %138, %131
  %141 = phi i32 [ %139, %138 ], [ %137, %131 ]
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %144

143:                                              ; preds = %140
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %129) #10
  br label %144

144:                                              ; preds = %125, %140, %143, %99
  %145 = load i32, i32* %12, align 4
  %146 = icmp ult i32 %145, 6
  br i1 %146, label %147, label %281

147:                                              ; preds = %144
  %148 = icmp eq i32 %145, 5
  br i1 %148, label %149, label %229

149:                                              ; preds = %147
  %150 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %1, i64 0, i32 11, i32 0, i32 0
  %151 = bitcast %"class.blink::CSSValue"** %150 to %"class.blink::CSSValueList"**
  %152 = load %"class.blink::CSSValueList"*, %"class.blink::CSSValueList"** %151, align 8
  %153 = getelementptr inbounds %"class.blink::CSSValueList", %"class.blink::CSSValueList"* %152, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %154 = load %"class.blink::Member.3"*, %"class.blink::Member.3"** %153, align 8
  %155 = getelementptr inbounds %"class.blink::CSSValueList", %"class.blink::CSSValueList"* %152, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %156 = load i32, i32* %155, align 4
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds %"class.blink::Member.3", %"class.blink::Member.3"* %154, i64 %157
  %159 = icmp eq i32 %156, 0
  br i1 %159, label %281, label %160

160:                                              ; preds = %149
  %161 = bitcast i32* %3 to i8*
  %162 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 10, i32 0, i32 0, i32 2
  %163 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 10, i32 0, i32 0, i32 1
  %164 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %20, i64 0, i32 0, i32 0, i32 0
  %165 = bitcast %"class.WTF::String"* %4 to i8*
  %166 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %167 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 9, i32 0, i32 0, i32 2
  %168 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 9, i32 0, i32 0, i32 1
  %169 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %19, i64 0, i32 0, i32 0, i32 0
  br label %170

170:                                              ; preds = %160, %226
  %171 = phi %"class.blink::Member.3"* [ %154, %160 ], [ %227, %226 ]
  %172 = bitcast %"class.blink::Member.3"* %171 to %"class.blink::CSSValuePair"**
  %173 = load %"class.blink::CSSValuePair"*, %"class.blink::CSSValuePair"** %172, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %161) #10
  %174 = getelementptr inbounds %"class.blink::CSSValuePair", %"class.blink::CSSValuePair"* %173, i64 0, i32 2, i32 0, i32 0
  %175 = bitcast %"class.blink::CSSValue"** %174 to %"class.blink::CSSPrimitiveValue"**
  %176 = load %"class.blink::CSSPrimitiveValue"*, %"class.blink::CSSPrimitiveValue"** %175, align 8
  %177 = call double @_ZNK5blink17CSSPrimitiveValue14GetDoubleValueEv(%"class.blink::CSSPrimitiveValue"* %176) #10
  %178 = fcmp ult double %177, 0x41DFFFFFFFC00000
  br i1 %178, label %179, label %183

179:                                              ; preds = %170
  %180 = fcmp ugt double %177, 0xC1E0000000000000
  br i1 %180, label %181, label %183

181:                                              ; preds = %179
  %182 = fptosi double %177 to i32
  br label %183

183:                                              ; preds = %170, %179, %181
  %184 = phi i32 [ %182, %181 ], [ 2147483647, %170 ], [ -2147483648, %179 ]
  store i32 %184, i32* %3, align 4
  %185 = load i32, i32* %162, align 4
  %186 = load i32, i32* %163, align 8
  %187 = icmp eq i32 %185, %186
  br i1 %187, label %194, label %188, !prof !3

188:                                              ; preds = %183
  %189 = load i32*, i32** %164, align 8
  %190 = zext i32 %185 to i64
  %191 = getelementptr inbounds i32, i32* %189, i64 %190
  store i32 %184, i32* %191, align 4
  %192 = load i32, i32* %162, align 4
  %193 = add i32 %192, 1
  store i32 %193, i32* %162, align 4
  br label %195

194:                                              ; preds = %183
  call void @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIiEEvOT_(%"class.WTF::Vector.9"* %20, i32* nonnull dereferenceable(4) %3) #10
  br label %195

195:                                              ; preds = %188, %194
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %161) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %165) #10
  %196 = getelementptr inbounds %"class.blink::CSSValuePair", %"class.blink::CSSValuePair"* %173, i64 0, i32 3, i32 0, i32 0
  %197 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %196, align 8
  %198 = call fastcc %"class.WTF::StringImpl"* @_ZN5blink12_GLOBAL__N_114SymbolToStringERKNS_8CSSValueE(%"class.blink::CSSValue"* dereferenceable(3) %197)
  store %"class.WTF::StringImpl"* %198, %"class.WTF::StringImpl"** %166, align 8
  %199 = load i32, i32* %167, align 4
  %200 = load i32, i32* %168, align 8
  %201 = icmp eq i32 %199, %200
  br i1 %201, label %210, label %202, !prof !3

202:                                              ; preds = %195
  %203 = ptrtoint %"class.WTF::StringImpl"* %198 to i64
  %204 = load %"class.WTF::String"*, %"class.WTF::String"** %169, align 8
  %205 = zext i32 %199 to i64
  %206 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %204, i64 %205
  %207 = bitcast %"class.WTF::String"* %206 to i64*
  store i64 %203, i64* %207, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %166, align 8
  %208 = load i32, i32* %167, align 4
  %209 = add i32 %208, 1
  store i32 %209, i32* %167, align 4
  br label %226

210:                                              ; preds = %195
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_(%"class.WTF::Vector"* %19, %"class.WTF::String"* nonnull dereferenceable(8) %4) #10
  %211 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %166, align 8
  %212 = icmp eq %"class.WTF::StringImpl"* %211, null
  br i1 %212, label %226, label %213

213:                                              ; preds = %210
  %214 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %211, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %215 = load atomic i32, i32* %214 monotonic, align 4
  %216 = and i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %211, i64 0, i32 0
  %219 = load i32, i32* %218, align 4
  br i1 %217, label %220, label %222

220:                                              ; preds = %213
  %221 = add i32 %219, -1
  store i32 %221, i32* %218, align 4
  br label %222

222:                                              ; preds = %220, %213
  %223 = phi i32 [ %221, %220 ], [ %219, %213 ]
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %226

225:                                              ; preds = %222
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %211) #10
  br label %226

226:                                              ; preds = %202, %210, %222, %225
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %165) #10
  %227 = getelementptr inbounds %"class.blink::Member.3", %"class.blink::Member.3"* %171, i64 1
  %228 = icmp eq %"class.blink::Member.3"* %227, %158
  br i1 %228, label %281, label %170

229:                                              ; preds = %147
  %230 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %1, i64 0, i32 10, i32 0, i32 0
  %231 = bitcast %"class.blink::CSSValue"** %230 to %"class.blink::CSSValueList"**
  %232 = load %"class.blink::CSSValueList"*, %"class.blink::CSSValueList"** %231, align 8
  %233 = getelementptr inbounds %"class.blink::CSSValueList", %"class.blink::CSSValueList"* %232, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %234 = load %"class.blink::Member.3"*, %"class.blink::Member.3"** %233, align 8
  %235 = getelementptr inbounds %"class.blink::CSSValueList", %"class.blink::CSSValueList"* %232, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %236 = load i32, i32* %235, align 4
  %237 = zext i32 %236 to i64
  %238 = getelementptr inbounds %"class.blink::Member.3", %"class.blink::Member.3"* %234, i64 %237
  %239 = icmp eq i32 %236, 0
  br i1 %239, label %281, label %240

240:                                              ; preds = %229
  %241 = bitcast %"class.WTF::String"* %5 to i8*
  %242 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %243 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 9, i32 0, i32 0, i32 2
  %244 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 9, i32 0, i32 0, i32 1
  %245 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %19, i64 0, i32 0, i32 0, i32 0
  br label %246

246:                                              ; preds = %240, %278
  %247 = phi %"class.blink::Member.3"* [ %234, %240 ], [ %279, %278 ]
  %248 = getelementptr inbounds %"class.blink::Member.3", %"class.blink::Member.3"* %247, i64 0, i32 0, i32 0
  %249 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %248, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %241) #10
  %250 = call fastcc %"class.WTF::StringImpl"* @_ZN5blink12_GLOBAL__N_114SymbolToStringERKNS_8CSSValueE(%"class.blink::CSSValue"* dereferenceable(3) %249)
  store %"class.WTF::StringImpl"* %250, %"class.WTF::StringImpl"** %242, align 8
  %251 = load i32, i32* %243, align 4
  %252 = load i32, i32* %244, align 8
  %253 = icmp eq i32 %251, %252
  br i1 %253, label %262, label %254, !prof !3

254:                                              ; preds = %246
  %255 = ptrtoint %"class.WTF::StringImpl"* %250 to i64
  %256 = load %"class.WTF::String"*, %"class.WTF::String"** %245, align 8
  %257 = zext i32 %251 to i64
  %258 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %256, i64 %257
  %259 = bitcast %"class.WTF::String"* %258 to i64*
  store i64 %255, i64* %259, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %242, align 8
  %260 = load i32, i32* %243, align 4
  %261 = add i32 %260, 1
  store i32 %261, i32* %243, align 4
  br label %278

262:                                              ; preds = %246
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_(%"class.WTF::Vector"* %19, %"class.WTF::String"* nonnull dereferenceable(8) %5) #10
  %263 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %242, align 8
  %264 = icmp eq %"class.WTF::StringImpl"* %263, null
  br i1 %264, label %278, label %265

265:                                              ; preds = %262
  %266 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %263, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %267 = load atomic i32, i32* %266 monotonic, align 4
  %268 = and i32 %267, 2
  %269 = icmp eq i32 %268, 0
  %270 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %263, i64 0, i32 0
  %271 = load i32, i32* %270, align 4
  br i1 %269, label %272, label %274

272:                                              ; preds = %265
  %273 = add i32 %271, -1
  store i32 %273, i32* %270, align 4
  br label %274

274:                                              ; preds = %272, %265
  %275 = phi i32 [ %273, %272 ], [ %271, %265 ]
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %277, label %278

277:                                              ; preds = %274
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %263) #10
  br label %278

278:                                              ; preds = %254, %262, %274, %277
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %241) #10
  %279 = getelementptr inbounds %"class.blink::Member.3", %"class.blink::Member.3"* %247, i64 1
  %280 = icmp eq %"class.blink::Member.3"* %279, %238
  br i1 %280, label %281, label %246

281:                                              ; preds = %278, %226, %229, %149, %144
  %282 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %1, i64 0, i32 4, i32 0, i32 0
  %283 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %282, align 8
  %284 = icmp eq %"class.blink::CSSValue"* %283, null
  br i1 %284, label %354, label %285

285:                                              ; preds = %281
  %286 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %283, i64 0, i32 2
  %287 = load i8, i8* %286, align 1
  %288 = icmp eq i8 %287, 9
  br i1 %288, label %289, label %334

289:                                              ; preds = %285
  %290 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %283, i64 2, i32 2
  %291 = bitcast i8* %290 to %"class.blink::CSSValue"**
  %292 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %291, align 8
  %293 = call fastcc %"class.WTF::StringImpl"* @_ZN5blink12_GLOBAL__N_114SymbolToStringERKNS_8CSSValueE(%"class.blink::CSSValue"* dereferenceable(3) %292)
  %294 = ptrtoint %"class.WTF::StringImpl"* %293 to i64
  %295 = bitcast %"class.WTF::String"* %26 to i64*
  %296 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %26, i64 0, i32 0, i32 0
  %297 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %296, align 8
  store i64 %294, i64* %295, align 8
  %298 = icmp eq %"class.WTF::StringImpl"* %297, null
  br i1 %298, label %312, label %299

299:                                              ; preds = %289
  %300 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %297, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %301 = load atomic i32, i32* %300 monotonic, align 4
  %302 = and i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %297, i64 0, i32 0
  %305 = load i32, i32* %304, align 4
  br i1 %303, label %306, label %308

306:                                              ; preds = %299
  %307 = add i32 %305, -1
  store i32 %307, i32* %304, align 4
  br label %308

308:                                              ; preds = %306, %299
  %309 = phi i32 [ %307, %306 ], [ %305, %299 ]
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %311, label %312

311:                                              ; preds = %308
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %297) #10
  br label %312

312:                                              ; preds = %311, %308, %289
  %313 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %283, i64 5, i32 1
  %314 = bitcast i8* %313 to %"class.blink::CSSValue"**
  %315 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %314, align 8
  %316 = call fastcc %"class.WTF::StringImpl"* @_ZN5blink12_GLOBAL__N_114SymbolToStringERKNS_8CSSValueE(%"class.blink::CSSValue"* dereferenceable(3) %315)
  %317 = ptrtoint %"class.WTF::StringImpl"* %316 to i64
  %318 = bitcast %"class.WTF::String"* %27 to i64*
  %319 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  store i64 %317, i64* %318, align 8
  %320 = icmp eq %"class.WTF::StringImpl"* %319, null
  br i1 %320, label %354, label %321

321:                                              ; preds = %312
  %322 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %319, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %323 = load atomic i32, i32* %322 monotonic, align 4
  %324 = and i32 %323, 2
  %325 = icmp eq i32 %324, 0
  %326 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %319, i64 0, i32 0
  %327 = load i32, i32* %326, align 4
  br i1 %325, label %328, label %330

328:                                              ; preds = %321
  %329 = add i32 %327, -1
  store i32 %329, i32* %326, align 4
  br label %330

330:                                              ; preds = %328, %321
  %331 = phi i32 [ %329, %328 ], [ %327, %321 ]
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %333, label %354

333:                                              ; preds = %330
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %319) #10
  br label %354

334:                                              ; preds = %285
  %335 = call fastcc %"class.WTF::StringImpl"* @_ZN5blink12_GLOBAL__N_114SymbolToStringERKNS_8CSSValueE(%"class.blink::CSSValue"* nonnull dereferenceable(3) %283)
  %336 = ptrtoint %"class.WTF::StringImpl"* %335 to i64
  %337 = bitcast %"class.WTF::String"* %26 to i64*
  %338 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %26, i64 0, i32 0, i32 0
  %339 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %338, align 8
  store i64 %336, i64* %337, align 8
  %340 = icmp eq %"class.WTF::StringImpl"* %339, null
  br i1 %340, label %354, label %341

341:                                              ; preds = %334
  %342 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %339, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %343 = load atomic i32, i32* %342 monotonic, align 4
  %344 = and i32 %343, 2
  %345 = icmp eq i32 %344, 0
  %346 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %339, i64 0, i32 0
  %347 = load i32, i32* %346, align 4
  br i1 %345, label %348, label %350

348:                                              ; preds = %341
  %349 = add i32 %347, -1
  store i32 %349, i32* %346, align 4
  br label %350

350:                                              ; preds = %348, %341
  %351 = phi i32 [ %349, %348 ], [ %347, %341 ]
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %353, label %354

353:                                              ; preds = %350
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %339) #10
  br label %354

354:                                              ; preds = %334, %350, %353, %312, %330, %333, %281
  %355 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %1, i64 0, i32 8, i32 0, i32 0
  %356 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %355, align 8
  %357 = icmp eq %"class.blink::CSSValue"* %356, null
  br i1 %357, label %391, label %358

358:                                              ; preds = %354
  %359 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %356, i64 2, i32 2
  %360 = bitcast i8* %359 to %"class.blink::CSSPrimitiveValue"**
  %361 = load %"class.blink::CSSPrimitiveValue"*, %"class.blink::CSSPrimitiveValue"** %360, align 8
  %362 = call double @_ZNK5blink17CSSPrimitiveValue14GetDoubleValueEv(%"class.blink::CSSPrimitiveValue"* %361) #10
  %363 = fcmp ult double %362, 0x41DFFFFFFFC00000
  br i1 %363, label %364, label %368

364:                                              ; preds = %358
  %365 = fcmp ugt double %362, 0xC1E0000000000000
  br i1 %365, label %366, label %368

366:                                              ; preds = %364
  %367 = fptosi double %362 to i32
  br label %368

368:                                              ; preds = %358, %364, %366
  %369 = phi i32 [ %367, %366 ], [ 2147483647, %358 ], [ -2147483648, %364 ]
  store i32 %369, i32* %31, align 8
  %370 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %356, i64 5, i32 1
  %371 = bitcast i8* %370 to %"class.blink::CSSValue"**
  %372 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %371, align 8
  %373 = call fastcc %"class.WTF::StringImpl"* @_ZN5blink12_GLOBAL__N_114SymbolToStringERKNS_8CSSValueE(%"class.blink::CSSValue"* dereferenceable(3) %372)
  %374 = ptrtoint %"class.WTF::StringImpl"* %373 to i64
  %375 = bitcast %"class.WTF::String"* %29 to i64*
  %376 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  store i64 %374, i64* %375, align 8
  %377 = icmp eq %"class.WTF::StringImpl"* %376, null
  br i1 %377, label %391, label %378

378:                                              ; preds = %368
  %379 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %376, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %380 = load atomic i32, i32* %379 monotonic, align 4
  %381 = and i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %376, i64 0, i32 0
  %384 = load i32, i32* %383, align 4
  br i1 %382, label %385, label %387

385:                                              ; preds = %378
  %386 = add i32 %384, -1
  store i32 %386, i32* %383, align 4
  br label %387

387:                                              ; preds = %385, %378
  %388 = phi i32 [ %386, %385 ], [ %384, %378 ]
  %389 = icmp eq i32 %388, 0
  br i1 %389, label %390, label %391

390:                                              ; preds = %387
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %376) #10
  br label %391

391:                                              ; preds = %368, %387, %390, %354
  %392 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %1, i64 0, i32 7, i32 0, i32 0
  %393 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %392, align 8
  %394 = icmp eq %"class.blink::CSSValue"* %393, null
  br i1 %394, label %466, label %395

395:                                              ; preds = %391
  %396 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %393, i64 0, i32 2
  %397 = load i8, i8* %396, align 1
  %398 = icmp eq i8 %397, 2
  br i1 %398, label %466, label %399

399:                                              ; preds = %395
  %400 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %393, i64 2, i32 2
  %401 = bitcast i8* %400 to %"class.blink::Member.3"**
  %402 = load %"class.blink::Member.3"*, %"class.blink::Member.3"** %401, align 8
  %403 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %393, i64 6, i32 2
  %404 = bitcast i8* %403 to i32*
  %405 = load i32, i32* %404, align 4
  %406 = zext i32 %405 to i64
  %407 = getelementptr inbounds %"class.blink::Member.3", %"class.blink::Member.3"* %402, i64 %406
  %408 = icmp eq i32 %405, 0
  br i1 %408, label %466, label %409

409:                                              ; preds = %399
  %410 = bitcast i64* %6 to i8*
  %411 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 11, i32 0, i32 0, i32 2
  %412 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 11, i32 0, i32 0, i32 1
  %413 = getelementptr inbounds %"class.WTF::Vector.14", %"class.WTF::Vector.14"* %21, i64 0, i32 0, i32 0, i32 0
  br label %414

414:                                              ; preds = %409, %463
  %415 = phi %"class.blink::Member.3"* [ %402, %409 ], [ %464, %463 ]
  %416 = bitcast %"class.blink::Member.3"* %415 to %"class.blink::CSSValuePair"**
  %417 = load %"class.blink::CSSValuePair"*, %"class.blink::CSSValuePair"** %416, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %410) #10
  %418 = getelementptr inbounds %"class.blink::CSSValuePair", %"class.blink::CSSValuePair"* %417, i64 0, i32 2, i32 0, i32 0
  %419 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %418, align 8
  %420 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %419, i64 0, i32 2
  %421 = load i8, i8* %420, align 1
  %422 = icmp eq i8 %421, 2
  br i1 %422, label %432, label %423

423:                                              ; preds = %414
  %424 = bitcast %"class.blink::CSSValue"* %419 to %"class.blink::CSSPrimitiveValue"*
  %425 = call double @_ZNK5blink17CSSPrimitiveValue14GetDoubleValueEv(%"class.blink::CSSPrimitiveValue"* %424) #10
  %426 = fcmp ult double %425, 0x41DFFFFFFFC00000
  br i1 %426, label %427, label %432

427:                                              ; preds = %423
  %428 = fcmp ugt double %425, 0xC1E0000000000000
  br i1 %428, label %429, label %432

429:                                              ; preds = %427
  %430 = fptosi double %425 to i32
  %431 = zext i32 %430 to i64
  br label %432

432:                                              ; preds = %429, %427, %423, %414
  %433 = phi i64 [ 2147483648, %414 ], [ %431, %429 ], [ 2147483647, %423 ], [ 2147483648, %427 ]
  %434 = getelementptr inbounds %"class.blink::CSSValuePair", %"class.blink::CSSValuePair"* %417, i64 0, i32 3, i32 0, i32 0
  %435 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %434, align 8
  %436 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %435, i64 0, i32 2
  %437 = load i8, i8* %436, align 1
  %438 = icmp eq i8 %437, 2
  br i1 %438, label %449, label %439

439:                                              ; preds = %432
  %440 = bitcast %"class.blink::CSSValue"* %435 to %"class.blink::CSSPrimitiveValue"*
  %441 = call double @_ZNK5blink17CSSPrimitiveValue14GetDoubleValueEv(%"class.blink::CSSPrimitiveValue"* %440) #10
  %442 = fcmp ult double %441, 0x41DFFFFFFFC00000
  br i1 %442, label %443, label %449

443:                                              ; preds = %439
  %444 = fcmp ugt double %441, 0xC1E0000000000000
  br i1 %444, label %445, label %449

445:                                              ; preds = %443
  %446 = fptosi double %441 to i32
  %447 = zext i32 %446 to i64
  %448 = shl nuw i64 %447, 32
  br label %449

449:                                              ; preds = %432, %439, %443, %445
  %450 = phi i64 [ 9223372032559808512, %432 ], [ %448, %445 ], [ 9223372032559808512, %439 ], [ -9223372036854775808, %443 ]
  %451 = or i64 %450, %433
  store i64 %451, i64* %6, align 8
  %452 = load i32, i32* %411, align 4
  %453 = load i32, i32* %412, align 8
  %454 = icmp eq i32 %452, %453
  br i1 %454, label %462, label %455, !prof !3

455:                                              ; preds = %449
  %456 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %413, align 8
  %457 = zext i32 %452 to i64
  %458 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %456, i64 %457
  %459 = bitcast %"struct.std::__1::pair"* %458 to i64*
  store i64 %451, i64* %459, align 4
  %460 = load i32, i32* %411, align 4
  %461 = add i32 %460, 1
  store i32 %461, i32* %411, align 4
  br label %463

462:                                              ; preds = %449
  call void @_ZN3WTF6VectorINSt3__14pairIiiEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector.14"* %21, %"struct.std::__1::pair"* nonnull dereferenceable(8) %7) #10
  br label %463

463:                                              ; preds = %455, %462
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %410) #10
  %464 = getelementptr inbounds %"class.blink::Member.3", %"class.blink::Member.3"* %415, i64 1
  %465 = icmp eq %"class.blink::Member.3"* %464, %407
  br i1 %465, label %466, label %414

466:                                              ; preds = %463, %399, %391, %395
  %467 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %1, i64 0, i32 5, i32 0, i32 0
  %468 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %467, align 8
  %469 = icmp eq %"class.blink::CSSValue"* %468, null
  br i1 %469, label %489, label %470

470:                                              ; preds = %466
  %471 = call fastcc %"class.WTF::StringImpl"* @_ZN5blink12_GLOBAL__N_114SymbolToStringERKNS_8CSSValueE(%"class.blink::CSSValue"* nonnull dereferenceable(3) %468)
  %472 = ptrtoint %"class.WTF::StringImpl"* %471 to i64
  %473 = bitcast %"class.WTF::String"* %22 to i64*
  %474 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  store i64 %472, i64* %473, align 8
  %475 = icmp eq %"class.WTF::StringImpl"* %474, null
  br i1 %475, label %489, label %476

476:                                              ; preds = %470
  %477 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %474, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %478 = load atomic i32, i32* %477 monotonic, align 4
  %479 = and i32 %478, 2
  %480 = icmp eq i32 %479, 0
  %481 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %474, i64 0, i32 0
  %482 = load i32, i32* %481, align 4
  br i1 %480, label %483, label %485

483:                                              ; preds = %476
  %484 = add i32 %482, -1
  store i32 %484, i32* %481, align 4
  br label %485

485:                                              ; preds = %483, %476
  %486 = phi i32 [ %484, %483 ], [ %482, %476 ]
  %487 = icmp eq i32 %486, 0
  br i1 %487, label %488, label %489

488:                                              ; preds = %485
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %474) #10
  br label %489

489:                                              ; preds = %470, %485, %488, %466
  %490 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %1, i64 0, i32 6, i32 0, i32 0
  %491 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %490, align 8
  %492 = icmp eq %"class.blink::CSSValue"* %491, null
  br i1 %492, label %513, label %493

493:                                              ; preds = %489
  %494 = call fastcc %"class.WTF::StringImpl"* @_ZN5blink12_GLOBAL__N_114SymbolToStringERKNS_8CSSValueE(%"class.blink::CSSValue"* nonnull dereferenceable(3) %491)
  %495 = ptrtoint %"class.WTF::StringImpl"* %494 to i64
  %496 = bitcast %"class.WTF::String"* %24 to i64*
  %497 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %24, i64 0, i32 0, i32 0
  %498 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %497, align 8
  store i64 %495, i64* %496, align 8
  %499 = icmp eq %"class.WTF::StringImpl"* %498, null
  br i1 %499, label %513, label %500

500:                                              ; preds = %493
  %501 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %498, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %502 = load atomic i32, i32* %501 monotonic, align 4
  %503 = and i32 %502, 2
  %504 = icmp eq i32 %503, 0
  %505 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %498, i64 0, i32 0
  %506 = load i32, i32* %505, align 4
  br i1 %504, label %507, label %509

507:                                              ; preds = %500
  %508 = add i32 %506, -1
  store i32 %508, i32* %505, align 4
  br label %509

509:                                              ; preds = %507, %500
  %510 = phi i32 [ %508, %507 ], [ %506, %500 ]
  %511 = icmp eq i32 %510, 0
  br i1 %511, label %512, label %513

512:                                              ; preds = %509
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %498) #10
  br label %513

513:                                              ; preds = %493, %509, %512, %489
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.WTF::StringImpl"* @_ZN5blink12_GLOBAL__N_114SymbolToStringERKNS_8CSSValueE(%"class.blink::CSSValue"* readonly dereferenceable(3)) unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 1
  %4 = icmp ne i8 %3, 7
  %5 = icmp eq %"class.blink::CSSValue"* %0, null
  %6 = or i1 %5, %4
  %7 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %0, i64 2, i32 2
  %8 = bitcast i8* %7 to %"class.WTF::StringImpl"**
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %6, label %29, label %11

11:                                               ; preds = %1
  br i1 %10, label %75, label %12

12:                                               ; preds = %11
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %75

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #10
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !3

26:                                               ; preds = %17
  tail call void @llvm.trap() #10
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  br label %75

29:                                               ; preds = %1
  br i1 %10, label %75, label %30

30:                                               ; preds = %29
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #10
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !3

44:                                               ; preds = %35
  tail call void @llvm.trap() #10
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %30, %45
  %48 = load atomic i32, i32* %31 monotonic, align 4
  %49 = and i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %52 = load i32, i32* %51, align 4
  br i1 %50, label %53, label %63

53:                                               ; preds = %47
  %54 = zext i32 %52 to i33
  %55 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %54, i33 1) #10
  %56 = extractvalue { i33, i1 } %55, 1
  %57 = extractvalue { i33, i1 } %55, 0
  %58 = icmp slt i33 %57, 0
  %59 = or i1 %56, %58
  br i1 %59, label %60, label %61, !prof !3

60:                                               ; preds = %53
  tail call void @llvm.trap() #10
  unreachable

61:                                               ; preds = %53
  %62 = trunc i33 %57 to i32
  store i32 %62, i32* %51, align 4
  br label %63

63:                                               ; preds = %47, %61
  %64 = phi i32 [ %62, %61 ], [ %52, %47 ]
  %65 = load atomic i32, i32* %31 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %70 = add i32 %64, -1
  store i32 %70, i32* %69, align 4
  br label %71

71:                                               ; preds = %68, %63
  %72 = phi i32 [ %70, %68 ], [ %64, %63 ]
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %9) #10
  br label %75

75:                                               ; preds = %74, %71, %29, %27, %12, %11
  ret %"class.WTF::StringImpl"* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CounterStyle14ResolveExtendsERS0_(%"class.blink::CounterStyle"*, %"class.blink::CounterStyle"* dereferenceable(160)) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.blink::CounterStyle"* %1 to i64
  %4 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 4
  %5 = bitcast %"class.blink::Member.7"* %4 to i64*
  store atomic i64 %3, i64* %5 monotonic, align 8
  %6 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.blink::CounterStyle"* %1 to i8*
  %10 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %9) #10
  br label %11

11:                                               ; preds = %2, %8
  %12 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %1, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 2
  store i32 %13, i32* %14, align 4
  %15 = icmp eq i32 %13, 1
  br i1 %15, label %16, label %20

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %1, i64 0, i32 18
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 18
  store i32 %18, i32* %19, align 4
  br label %20

20:                                               ; preds = %16, %11
  %21 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.blink::StyleRuleCounterStyle"*, %"class.blink::StyleRuleCounterStyle"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %22, i64 0, i32 9, i32 0, i32 0
  %24 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %23, align 8
  %25 = icmp eq %"class.blink::CSSValue"* %24, null
  br i1 %25, label %26, label %70

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 5
  %28 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %1, i64 0, i32 5, i32 0, i32 0, i32 0
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  %30 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %30, label %48, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %48

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i33
  %40 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %39, i33 1) #10
  %41 = extractvalue { i33, i1 } %40, 1
  %42 = extractvalue { i33, i1 } %40, 0
  %43 = icmp slt i33 %42, 0
  %44 = or i1 %41, %43
  br i1 %44, label %45, label %46, !prof !3

45:                                               ; preds = %36
  tail call void @llvm.trap() #10
  unreachable

46:                                               ; preds = %36
  %47 = trunc i33 %42 to i32
  store i32 %47, i32* %37, align 4
  br label %48

48:                                               ; preds = %46, %31, %26
  %49 = ptrtoint %"class.WTF::StringImpl"* %29 to i64
  %50 = bitcast %"class.WTF::AtomicString"* %27 to i64*
  %51 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %27, i64 0, i32 0, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  store i64 %49, i64* %50, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %67, label %54

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %52) #10
  br label %67

67:                                               ; preds = %48, %63, %66
  %68 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 6
  %69 = bitcast %"class.blink::Member.7"* %68 to i64*
  store atomic i64 0, i64* %69 monotonic, align 8
  br label %70

70:                                               ; preds = %20, %67
  %71 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %1, i64 0, i32 9
  %72 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 9
  %73 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector"* %72, %"class.WTF::Vector"* dereferenceable(16) %71)
  %74 = load i32, i32* %14, align 4
  %75 = icmp eq i32 %74, 5
  br i1 %75, label %76, label %80

76:                                               ; preds = %70
  %77 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %1, i64 0, i32 10
  %78 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 10
  %79 = tail call dereferenceable(16) %"class.WTF::Vector.9"* @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEEaSERKS2_(%"class.WTF::Vector.9"* %78, %"class.WTF::Vector.9"* dereferenceable(16) %77)
  br label %80

80:                                               ; preds = %76, %70
  %81 = load %"class.blink::StyleRuleCounterStyle"*, %"class.blink::StyleRuleCounterStyle"** %21, align 8
  %82 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %81, i64 0, i32 4, i32 0, i32 0
  %83 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %82, align 8
  %84 = icmp eq %"class.blink::CSSValue"* %83, null
  br i1 %84, label %85, label %167

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 14
  %87 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %1, i64 0, i32 14, i32 0, i32 0
  %88 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %87, align 8
  %89 = icmp eq %"class.WTF::StringImpl"* %88, null
  br i1 %89, label %107, label %90

90:                                               ; preds = %85
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load atomic i32, i32* %91 monotonic, align 4
  %93 = and i32 %92, 2
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %107

95:                                               ; preds = %90
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 0, i32 0
  %97 = load i32, i32* %96, align 4
  %98 = zext i32 %97 to i33
  %99 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %98, i33 1) #10
  %100 = extractvalue { i33, i1 } %99, 1
  %101 = extractvalue { i33, i1 } %99, 0
  %102 = icmp slt i33 %101, 0
  %103 = or i1 %100, %102
  br i1 %103, label %104, label %105, !prof !3

104:                                              ; preds = %95
  tail call void @llvm.trap() #10
  unreachable

105:                                              ; preds = %95
  %106 = trunc i33 %101 to i32
  store i32 %106, i32* %96, align 4
  br label %107

107:                                              ; preds = %105, %90, %85
  %108 = ptrtoint %"class.WTF::StringImpl"* %88 to i64
  %109 = bitcast %"class.WTF::String"* %86 to i64*
  %110 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %86, i64 0, i32 0, i32 0
  %111 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %110, align 8
  store i64 %108, i64* %109, align 8
  %112 = icmp eq %"class.WTF::StringImpl"* %111, null
  br i1 %112, label %126, label %113

113:                                              ; preds = %107
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = load atomic i32, i32* %114 monotonic, align 4
  %116 = and i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 0
  %119 = load i32, i32* %118, align 4
  br i1 %117, label %120, label %122

120:                                              ; preds = %113
  %121 = add i32 %119, -1
  store i32 %121, i32* %118, align 4
  br label %122

122:                                              ; preds = %120, %113
  %123 = phi i32 [ %121, %120 ], [ %119, %113 ]
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %126

125:                                              ; preds = %122
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %111) #10
  br label %126

126:                                              ; preds = %107, %122, %125
  %127 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 15
  %128 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %1, i64 0, i32 15, i32 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %148, label %131

131:                                              ; preds = %126
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load atomic i32, i32* %132 monotonic, align 4
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %148

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i33
  %140 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %139, i33 1) #10
  %141 = extractvalue { i33, i1 } %140, 1
  %142 = extractvalue { i33, i1 } %140, 0
  %143 = icmp slt i33 %142, 0
  %144 = or i1 %141, %143
  br i1 %144, label %145, label %146, !prof !3

145:                                              ; preds = %136
  tail call void @llvm.trap() #10
  unreachable

146:                                              ; preds = %136
  %147 = trunc i33 %142 to i32
  store i32 %147, i32* %137, align 4
  br label %148

148:                                              ; preds = %146, %131, %126
  %149 = ptrtoint %"class.WTF::StringImpl"* %129 to i64
  %150 = bitcast %"class.WTF::String"* %127 to i64*
  %151 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 0, i32 0, i32 0
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8
  store i64 %149, i64* %150, align 8
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %167, label %154

154:                                              ; preds = %148
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  br i1 %158, label %161, label %163

161:                                              ; preds = %154
  %162 = add i32 %160, -1
  store i32 %162, i32* %159, align 4
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %152) #10
  br label %167

167:                                              ; preds = %166, %163, %148, %80
  %168 = load %"class.blink::StyleRuleCounterStyle"*, %"class.blink::StyleRuleCounterStyle"** %21, align 8
  %169 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %168, i64 0, i32 8, i32 0, i32 0
  %170 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %169, align 8
  %171 = icmp eq %"class.blink::CSSValue"* %170, null
  br i1 %171, label %172, label %216

172:                                              ; preds = %167
  %173 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %1, i64 0, i32 17
  %174 = load i32, i32* %173, align 8
  %175 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 17
  store i32 %174, i32* %175, align 8
  %176 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 16
  %177 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %1, i64 0, i32 16, i32 0, i32 0
  %178 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %177, align 8
  %179 = icmp eq %"class.WTF::StringImpl"* %178, null
  br i1 %179, label %197, label %180

180:                                              ; preds = %172
  %181 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %178, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %182 = load atomic i32, i32* %181 monotonic, align 4
  %183 = and i32 %182, 2
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %197

185:                                              ; preds = %180
  %186 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %178, i64 0, i32 0
  %187 = load i32, i32* %186, align 4
  %188 = zext i32 %187 to i33
  %189 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %188, i33 1) #10
  %190 = extractvalue { i33, i1 } %189, 1
  %191 = extractvalue { i33, i1 } %189, 0
  %192 = icmp slt i33 %191, 0
  %193 = or i1 %190, %192
  br i1 %193, label %194, label %195, !prof !3

194:                                              ; preds = %185
  tail call void @llvm.trap() #10
  unreachable

195:                                              ; preds = %185
  %196 = trunc i33 %191 to i32
  store i32 %196, i32* %186, align 4
  br label %197

197:                                              ; preds = %195, %180, %172
  %198 = ptrtoint %"class.WTF::StringImpl"* %178 to i64
  %199 = bitcast %"class.WTF::String"* %176 to i64*
  %200 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %176, i64 0, i32 0, i32 0
  %201 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %200, align 8
  store i64 %198, i64* %199, align 8
  %202 = icmp eq %"class.WTF::StringImpl"* %201, null
  br i1 %202, label %216, label %203

203:                                              ; preds = %197
  %204 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %201, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %205 = load atomic i32, i32* %204 monotonic, align 4
  %206 = and i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %201, i64 0, i32 0
  %209 = load i32, i32* %208, align 4
  br i1 %207, label %210, label %212

210:                                              ; preds = %203
  %211 = add i32 %209, -1
  store i32 %211, i32* %208, align 4
  br label %212

212:                                              ; preds = %210, %203
  %213 = phi i32 [ %211, %210 ], [ %209, %203 ]
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %216

215:                                              ; preds = %212
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %201) #10
  br label %216

216:                                              ; preds = %215, %212, %197, %167
  %217 = load %"class.blink::StyleRuleCounterStyle"*, %"class.blink::StyleRuleCounterStyle"** %21, align 8
  %218 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %217, i64 0, i32 7, i32 0, i32 0
  %219 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %218, align 8
  %220 = icmp eq %"class.blink::CSSValue"* %219, null
  br i1 %220, label %221, label %226

221:                                              ; preds = %216
  %222 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %1, i64 0, i32 11
  %223 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 11
  %224 = tail call dereferenceable(16) %"class.WTF::Vector.14"* @_ZN3WTF6VectorINSt3__14pairIiiEELj0ENS_18PartitionAllocatorEEaSERKS5_(%"class.WTF::Vector.14"* %223, %"class.WTF::Vector.14"* dereferenceable(16) %222)
  %225 = load %"class.blink::StyleRuleCounterStyle"*, %"class.blink::StyleRuleCounterStyle"** %21, align 8
  br label %226

226:                                              ; preds = %216, %221
  %227 = phi %"class.blink::StyleRuleCounterStyle"* [ %217, %216 ], [ %225, %221 ]
  %228 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %227, i64 0, i32 5, i32 0, i32 0
  %229 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %228, align 8
  %230 = icmp eq %"class.blink::CSSValue"* %229, null
  br i1 %230, label %231, label %272

231:                                              ; preds = %226
  %232 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 12
  %233 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %1, i64 0, i32 12, i32 0, i32 0
  %234 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %233, align 8
  %235 = icmp eq %"class.WTF::StringImpl"* %234, null
  br i1 %235, label %253, label %236

236:                                              ; preds = %231
  %237 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %234, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %238 = load atomic i32, i32* %237 monotonic, align 4
  %239 = and i32 %238, 2
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %241, label %253

241:                                              ; preds = %236
  %242 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %234, i64 0, i32 0
  %243 = load i32, i32* %242, align 4
  %244 = zext i32 %243 to i33
  %245 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %244, i33 1) #10
  %246 = extractvalue { i33, i1 } %245, 1
  %247 = extractvalue { i33, i1 } %245, 0
  %248 = icmp slt i33 %247, 0
  %249 = or i1 %246, %248
  br i1 %249, label %250, label %251, !prof !3

250:                                              ; preds = %241
  tail call void @llvm.trap() #10
  unreachable

251:                                              ; preds = %241
  %252 = trunc i33 %247 to i32
  store i32 %252, i32* %242, align 4
  br label %253

253:                                              ; preds = %251, %236, %231
  %254 = ptrtoint %"class.WTF::StringImpl"* %234 to i64
  %255 = bitcast %"class.WTF::String"* %232 to i64*
  %256 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %232, i64 0, i32 0, i32 0
  %257 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %256, align 8
  store i64 %254, i64* %255, align 8
  %258 = icmp eq %"class.WTF::StringImpl"* %257, null
  br i1 %258, label %272, label %259

259:                                              ; preds = %253
  %260 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %257, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %261 = load atomic i32, i32* %260 monotonic, align 4
  %262 = and i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %257, i64 0, i32 0
  %265 = load i32, i32* %264, align 4
  br i1 %263, label %266, label %268

266:                                              ; preds = %259
  %267 = add i32 %265, -1
  store i32 %267, i32* %264, align 4
  br label %268

268:                                              ; preds = %266, %259
  %269 = phi i32 [ %267, %266 ], [ %265, %259 ]
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %271, label %272

271:                                              ; preds = %268
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %257) #10
  br label %272

272:                                              ; preds = %271, %268, %253, %226
  %273 = load %"class.blink::StyleRuleCounterStyle"*, %"class.blink::StyleRuleCounterStyle"** %21, align 8
  %274 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %273, i64 0, i32 6, i32 0, i32 0
  %275 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %274, align 8
  %276 = icmp eq %"class.blink::CSSValue"* %275, null
  br i1 %276, label %277, label %318

277:                                              ; preds = %272
  %278 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 13
  %279 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %1, i64 0, i32 13, i32 0, i32 0
  %280 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %279, align 8
  %281 = icmp eq %"class.WTF::StringImpl"* %280, null
  br i1 %281, label %299, label %282

282:                                              ; preds = %277
  %283 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %280, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %284 = load atomic i32, i32* %283 monotonic, align 4
  %285 = and i32 %284, 2
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %287, label %299

287:                                              ; preds = %282
  %288 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %280, i64 0, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = zext i32 %289 to i33
  %291 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %290, i33 1) #10
  %292 = extractvalue { i33, i1 } %291, 1
  %293 = extractvalue { i33, i1 } %291, 0
  %294 = icmp slt i33 %293, 0
  %295 = or i1 %292, %294
  br i1 %295, label %296, label %297, !prof !3

296:                                              ; preds = %287
  tail call void @llvm.trap() #10
  unreachable

297:                                              ; preds = %287
  %298 = trunc i33 %293 to i32
  store i32 %298, i32* %288, align 4
  br label %299

299:                                              ; preds = %297, %282, %277
  %300 = ptrtoint %"class.WTF::StringImpl"* %280 to i64
  %301 = bitcast %"class.WTF::String"* %278 to i64*
  %302 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %278, i64 0, i32 0, i32 0
  %303 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %302, align 8
  store i64 %300, i64* %301, align 8
  %304 = icmp eq %"class.WTF::StringImpl"* %303, null
  br i1 %304, label %318, label %305

305:                                              ; preds = %299
  %306 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %303, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %307 = load atomic i32, i32* %306 monotonic, align 4
  %308 = and i32 %307, 2
  %309 = icmp eq i32 %308, 0
  %310 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %303, i64 0, i32 0
  %311 = load i32, i32* %310, align 4
  br i1 %309, label %312, label %314

312:                                              ; preds = %305
  %313 = add i32 %311, -1
  store i32 %313, i32* %310, align 4
  br label %314

314:                                              ; preds = %312, %305
  %315 = phi i32 [ %313, %312 ], [ %311, %305 ]
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %317, label %318

317:                                              ; preds = %314
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %303) #10
  br label %318

318:                                              ; preds = %317, %314, %299, %272
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector"* %1, %0
  br i1 %3, label %219, label %4, !prof !3

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %39

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::String"*, %"class.WTF::String"** %11, align 8
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %13
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %15
  br label %17

17:                                               ; preds = %35, %10
  %18 = phi %"class.WTF::String"* [ %36, %35 ], [ %16, %10 ]
  %19 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %31

29:                                               ; preds = %22
  %30 = add i32 %28, -1
  store i32 %30, i32* %27, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ %28, %22 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %20) #10
  br label %35

35:                                               ; preds = %34, %31, %17
  %36 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %37 = icmp eq %"class.WTF::String"* %36, %14
  br i1 %37, label %38, label %17

38:                                               ; preds = %35
  store i32 %8, i32* %5, align 4
  br label %116

39:                                               ; preds = %4
  %40 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp ugt i32 %8, %41
  br i1 %42, label %43, label %114

43:                                               ; preds = %39
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %80, label %45

45:                                               ; preds = %43
  %46 = icmp eq i32 %6, 0
  br i1 %46, label %74, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.WTF::String"*, %"class.WTF::String"** %48, align 8
  %50 = zext i32 %6 to i64
  %51 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %49, i64 %50
  br label %52

52:                                               ; preds = %70, %47
  %53 = phi %"class.WTF::String"* [ %71, %70 ], [ %49, %47 ]
  %54 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %70, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %55) #10
  br label %70

70:                                               ; preds = %69, %66, %52
  %71 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 1
  %72 = icmp eq %"class.WTF::String"* %71, %51
  br i1 %72, label %73, label %52

73:                                               ; preds = %70
  store i32 0, i32* %5, align 4
  br label %74

74:                                               ; preds = %73, %45
  %75 = bitcast %"class.WTF::Vector"* %0 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %77 monotonic, align 8
  store i32 0, i32* %40, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #10
  %78 = load i32, i32* %7, align 4
  %79 = load i32, i32* %40, align 8
  br label %80

80:                                               ; preds = %43, %74
  %81 = phi i32 [ 0, %43 ], [ %79, %74 ]
  %82 = phi i32 [ %8, %43 ], [ %78, %74 ]
  %83 = icmp ult i32 %81, %82
  br i1 %83, label %84, label %114, !prof !4

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %86 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %87 = icmp eq %"class.WTF::String"* %86, null
  %88 = zext i32 %82 to i64
  %89 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %88) #10
  %90 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %89, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #10
  br i1 %87, label %91, label %96

91:                                               ; preds = %84
  %92 = ptrtoint i8* %90 to i64
  %93 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %92, i64* %93 monotonic, align 8
  %94 = lshr i64 %89, 3
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %40, align 8
  br label %114

96:                                               ; preds = %84
  %97 = lshr i64 %89, 3
  %98 = ptrtoint i8* %90 to i64
  %99 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %100 = icmp ne i8* %90, null
  %101 = icmp ne %"class.WTF::String"* %99, null
  %102 = and i1 %100, %101
  %103 = bitcast %"class.WTF::String"* %99 to i8*
  br i1 %102, label %104, label %110, !prof !4

104:                                              ; preds = %96
  %105 = load i32, i32* %5, align 4
  %106 = zext i32 %105 to i64
  %107 = shl nuw nsw i64 %106, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %90, i8* nonnull align 8 %103, i64 %107, i1 false) #10
  %108 = bitcast %"class.WTF::Vector"* %0 to i8**
  %109 = load i8*, i8** %108, align 8
  br label %110

110:                                              ; preds = %104, %96
  %111 = phi i8* [ %109, %104 ], [ %103, %96 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %111) #10
  %112 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %98, i64* %112 monotonic, align 8
  %113 = trunc i64 %97 to i32
  store i32 %113, i32* %40, align 8
  br label %114

114:                                              ; preds = %39, %80, %91, %110
  %115 = load i32, i32* %5, align 4
  br label %116

116:                                              ; preds = %114, %38
  %117 = phi i32 [ %115, %114 ], [ %8, %38 ]
  %118 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %119 = load %"class.WTF::String"*, %"class.WTF::String"** %118, align 8
  %120 = zext i32 %117 to i64
  %121 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %119, i64 %120
  %122 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %123 = load %"class.WTF::String"*, %"class.WTF::String"** %122, align 8
  %124 = icmp eq i32 %117, 0
  br i1 %124, label %175, label %125

125:                                              ; preds = %116, %167
  %126 = phi %"class.WTF::String"* [ %169, %167 ], [ %123, %116 ]
  %127 = phi %"class.WTF::String"* [ %168, %167 ], [ %119, %116 ]
  %128 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 0, i32 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %148, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load atomic i32, i32* %132 monotonic, align 4
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %148

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i33
  %140 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %139, i33 1) #10
  %141 = extractvalue { i33, i1 } %140, 1
  %142 = extractvalue { i33, i1 } %140, 0
  %143 = icmp slt i33 %142, 0
  %144 = or i1 %141, %143
  br i1 %144, label %145, label %146, !prof !3

145:                                              ; preds = %136
  tail call void @llvm.trap() #10
  unreachable

146:                                              ; preds = %136
  %147 = trunc i33 %142 to i32
  store i32 %147, i32* %137, align 4
  br label %148

148:                                              ; preds = %146, %131, %125
  %149 = ptrtoint %"class.WTF::StringImpl"* %129 to i64
  %150 = bitcast %"class.WTF::String"* %126 to i64*
  %151 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 0, i32 0, i32 0
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8
  store i64 %149, i64* %150, align 8
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %167, label %154

154:                                              ; preds = %148
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  br i1 %158, label %161, label %163

161:                                              ; preds = %154
  %162 = add i32 %160, -1
  store i32 %162, i32* %159, align 4
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %152) #10
  br label %167

167:                                              ; preds = %166, %163, %148
  %168 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 1
  %169 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 1
  %170 = icmp eq %"class.WTF::String"* %168, %121
  br i1 %170, label %171, label %125

171:                                              ; preds = %167
  %172 = load %"class.WTF::String"*, %"class.WTF::String"** %118, align 8
  %173 = load i32, i32* %5, align 4
  %174 = load %"class.WTF::String"*, %"class.WTF::String"** %122, align 8
  br label %175

175:                                              ; preds = %171, %116
  %176 = phi %"class.WTF::String"* [ %174, %171 ], [ %123, %116 ]
  %177 = phi i32 [ %173, %171 ], [ 0, %116 ]
  %178 = phi %"class.WTF::String"* [ %172, %171 ], [ %119, %116 ]
  %179 = zext i32 %177 to i64
  %180 = load i32, i32* %7, align 4
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %178, i64 %181
  %183 = icmp eq i32 %177, %180
  br i1 %183, label %217, label %184

184:                                              ; preds = %175
  %185 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %176, i64 %179
  %186 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %178, i64 %179
  br label %187

187:                                              ; preds = %184, %211
  %188 = phi %"class.WTF::String"* [ %212, %211 ], [ %185, %184 ]
  %189 = phi %"class.WTF::String"* [ %213, %211 ], [ %186, %184 ]
  %190 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 0, i32 0, i32 0
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %190, align 8
  %192 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %188, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %191, %"class.WTF::StringImpl"** %192, align 8
  %193 = icmp eq %"class.WTF::StringImpl"* %191, null
  br i1 %193, label %211, label %194

194:                                              ; preds = %187
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %196 = load atomic i32, i32* %195 monotonic, align 4
  %197 = and i32 %196, 2
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %211

199:                                              ; preds = %194
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = zext i32 %201 to i33
  %203 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %202, i33 1) #10
  %204 = extractvalue { i33, i1 } %203, 1
  %205 = extractvalue { i33, i1 } %203, 0
  %206 = icmp slt i33 %205, 0
  %207 = or i1 %204, %206
  br i1 %207, label %208, label %209, !prof !3

208:                                              ; preds = %199
  tail call void @llvm.trap() #10
  unreachable

209:                                              ; preds = %199
  %210 = trunc i33 %205 to i32
  store i32 %210, i32* %200, align 4
  br label %211

211:                                              ; preds = %209, %194, %187
  %212 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %188, i64 1
  %213 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 1
  %214 = icmp eq %"class.WTF::String"* %213, %182
  br i1 %214, label %215, label %187

215:                                              ; preds = %211
  %216 = load i32, i32* %7, align 4
  br label %217

217:                                              ; preds = %215, %175
  %218 = phi i32 [ %216, %215 ], [ %177, %175 ]
  store i32 %218, i32* %5, align 4
  br label %219

219:                                              ; preds = %2, %217
  ret %"class.WTF::Vector"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector.9"* @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEEaSERKS2_(%"class.WTF::Vector.9"*, %"class.WTF::Vector.9"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector.9"* %1, %0
  br i1 %3, label %90, label %4, !prof !3

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %4
  store i32 %8, i32* %5, align 4
  br label %60

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp ugt i32 %8, %13
  br i1 %14, label %15, label %60

15:                                               ; preds = %11
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %15
  %18 = icmp eq i32 %6, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %17
  store i32 0, i32* %5, align 4
  br label %20

20:                                               ; preds = %19, %17
  %21 = bitcast %"class.WTF::Vector.9"* %0 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 0, i64* %23 monotonic, align 8
  store i32 0, i32* %12, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %22) #10
  %24 = load i32, i32* %7, align 4
  %25 = load i32, i32* %12, align 8
  br label %26

26:                                               ; preds = %15, %20
  %27 = phi i32 [ 0, %15 ], [ %25, %20 ]
  %28 = phi i32 [ %8, %15 ], [ %24, %20 ]
  %29 = icmp ult i32 %27, %28
  br i1 %29, label %30, label %60, !prof !4

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i32*, i32** %31, align 8
  %33 = icmp eq i32* %32, null
  %34 = zext i32 %28 to i64
  %35 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64 %34) #10
  %36 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %35, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #10
  br i1 %33, label %37, label %42

37:                                               ; preds = %30
  %38 = ptrtoint i8* %36 to i64
  %39 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 %38, i64* %39 monotonic, align 8
  %40 = lshr i64 %35, 2
  %41 = trunc i64 %40 to i32
  store i32 %41, i32* %12, align 8
  br label %60

42:                                               ; preds = %30
  %43 = lshr i64 %35, 2
  %44 = ptrtoint i8* %36 to i64
  %45 = load i32*, i32** %31, align 8
  %46 = icmp ne i8* %36, null
  %47 = icmp ne i32* %45, null
  %48 = and i1 %46, %47
  %49 = bitcast i32* %45 to i8*
  br i1 %48, label %50, label %56, !prof !4

50:                                               ; preds = %42
  %51 = load i32, i32* %5, align 4
  %52 = zext i32 %51 to i64
  %53 = shl nuw nsw i64 %52, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %36, i8* nonnull align 4 %49, i64 %53, i1 false) #10
  %54 = bitcast %"class.WTF::Vector.9"* %0 to i8**
  %55 = load i8*, i8** %54, align 8
  br label %56

56:                                               ; preds = %50, %42
  %57 = phi i8* [ %55, %50 ], [ %49, %42 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %57) #10
  %58 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 %44, i64* %58 monotonic, align 8
  %59 = trunc i64 %43 to i32
  store i32 %59, i32* %12, align 8
  br label %60

60:                                               ; preds = %56, %37, %26, %11, %10
  %61 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %1, i64 0, i32 0, i32 0, i32 0
  %62 = bitcast %"class.WTF::Vector.9"* %1 to i8**
  %63 = load i8*, i8** %62, align 8
  %64 = load i32, i32* %5, align 4
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  %67 = bitcast %"class.WTF::Vector.9"* %0 to i8**
  %68 = load i8*, i8** %67, align 8
  %69 = shl nuw nsw i64 %65, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %68, i8* align 4 %63, i64 %69, i1 false) #10
  %70 = load i32*, i32** %61, align 8
  %71 = load i32, i32* %5, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i32, i32* %70, i64 %72
  %74 = load i32*, i32** %66, align 8
  %75 = getelementptr inbounds i32, i32* %74, i64 %72
  %76 = icmp ne i32* %75, null
  %77 = icmp ne i32* %73, null
  %78 = and i1 %77, %76
  br i1 %78, label %79, label %88, !prof !4

79:                                               ; preds = %60
  %80 = load i32, i32* %7, align 4
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i32, i32* %70, i64 %81
  %83 = bitcast i32* %75 to i8*
  %84 = bitcast i32* %73 to i8*
  %85 = ptrtoint i32* %82 to i64
  %86 = ptrtoint i32* %73 to i64
  %87 = sub i64 %85, %86
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %83, i8* nonnull align 4 %84, i64 %87, i1 false) #10
  br label %88

88:                                               ; preds = %60, %79
  %89 = load i32, i32* %7, align 4
  store i32 %89, i32* %5, align 4
  br label %90

90:                                               ; preds = %2, %88
  ret %"class.WTF::Vector.9"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector.14"* @_ZN3WTF6VectorINSt3__14pairIiiEELj0ENS_18PartitionAllocatorEEaSERKS5_(%"class.WTF::Vector.14"*, %"class.WTF::Vector.14"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector.14"* %1, %0
  br i1 %3, label %90, label %4, !prof !3

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.14", %"class.WTF::Vector.14"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector.14", %"class.WTF::Vector.14"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %4
  store i32 %8, i32* %5, align 4
  br label %60

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.WTF::Vector.14", %"class.WTF::Vector.14"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp ugt i32 %8, %13
  br i1 %14, label %15, label %60

15:                                               ; preds = %11
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %15
  %18 = icmp eq i32 %6, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %17
  store i32 0, i32* %5, align 4
  br label %20

20:                                               ; preds = %19, %17
  %21 = bitcast %"class.WTF::Vector.14"* %0 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = bitcast %"class.WTF::Vector.14"* %0 to i64*
  store atomic i64 0, i64* %23 monotonic, align 8
  store i32 0, i32* %12, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %22) #10
  %24 = load i32, i32* %7, align 4
  %25 = load i32, i32* %12, align 8
  br label %26

26:                                               ; preds = %15, %20
  %27 = phi i32 [ 0, %15 ], [ %25, %20 ]
  %28 = phi i32 [ %8, %15 ], [ %24, %20 ]
  %29 = icmp ult i32 %27, %28
  br i1 %29, label %30, label %60, !prof !4

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.WTF::Vector.14", %"class.WTF::Vector.14"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %31, align 8
  %33 = icmp eq %"struct.std::__1::pair"* %32, null
  %34 = zext i32 %28 to i64
  %35 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairIiiEEEEmm(i64 %34) #10
  %36 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %35, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__14pairIiiEEEEPKcv, i64 0, i64 0)) #10
  br i1 %33, label %37, label %42

37:                                               ; preds = %30
  %38 = ptrtoint i8* %36 to i64
  %39 = bitcast %"class.WTF::Vector.14"* %0 to i64*
  store atomic i64 %38, i64* %39 monotonic, align 8
  %40 = lshr i64 %35, 3
  %41 = trunc i64 %40 to i32
  store i32 %41, i32* %12, align 8
  br label %60

42:                                               ; preds = %30
  %43 = lshr i64 %35, 3
  %44 = ptrtoint i8* %36 to i64
  %45 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %31, align 8
  %46 = icmp ne i8* %36, null
  %47 = icmp ne %"struct.std::__1::pair"* %45, null
  %48 = and i1 %46, %47
  %49 = bitcast %"struct.std::__1::pair"* %45 to i8*
  br i1 %48, label %50, label %56, !prof !4

50:                                               ; preds = %42
  %51 = load i32, i32* %5, align 4
  %52 = zext i32 %51 to i64
  %53 = shl nuw nsw i64 %52, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %36, i8* nonnull align 4 %49, i64 %53, i1 false) #10
  %54 = bitcast %"class.WTF::Vector.14"* %0 to i8**
  %55 = load i8*, i8** %54, align 8
  br label %56

56:                                               ; preds = %50, %42
  %57 = phi i8* [ %55, %50 ], [ %49, %42 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %57) #10
  %58 = bitcast %"class.WTF::Vector.14"* %0 to i64*
  store atomic i64 %44, i64* %58 monotonic, align 8
  %59 = trunc i64 %43 to i32
  store i32 %59, i32* %12, align 8
  br label %60

60:                                               ; preds = %56, %37, %26, %11, %10
  %61 = getelementptr inbounds %"class.WTF::Vector.14", %"class.WTF::Vector.14"* %1, i64 0, i32 0, i32 0, i32 0
  %62 = bitcast %"class.WTF::Vector.14"* %1 to i8**
  %63 = load i8*, i8** %62, align 8
  %64 = load i32, i32* %5, align 4
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds %"class.WTF::Vector.14", %"class.WTF::Vector.14"* %0, i64 0, i32 0, i32 0, i32 0
  %67 = bitcast %"class.WTF::Vector.14"* %0 to i8**
  %68 = load i8*, i8** %67, align 8
  %69 = shl nuw nsw i64 %65, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %68, i8* align 4 %63, i64 %69, i1 false) #10
  %70 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %61, align 8
  %71 = load i32, i32* %5, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %70, i64 %72
  %74 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %66, align 8
  %75 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %74, i64 %72
  %76 = icmp ne %"struct.std::__1::pair"* %75, null
  %77 = icmp ne %"struct.std::__1::pair"* %73, null
  %78 = and i1 %77, %76
  br i1 %78, label %79, label %88, !prof !4

79:                                               ; preds = %60
  %80 = load i32, i32* %7, align 4
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %70, i64 %81
  %83 = bitcast %"struct.std::__1::pair"* %75 to i8*
  %84 = bitcast %"struct.std::__1::pair"* %73 to i8*
  %85 = ptrtoint %"struct.std::__1::pair"* %82 to i64
  %86 = ptrtoint %"struct.std::__1::pair"* %73 to i64
  %87 = sub i64 %85, %86
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %83, i8* nonnull align 4 %84, i64 %87, i1 false) #10
  br label %88

88:                                               ; preds = %60, %79
  %89 = load i32, i32* %7, align 4
  store i32 %89, i32* %5, align 4
  br label %90

90:                                               ; preds = %2, %88
  ret %"class.WTF::Vector.14"* %0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink12CounterStyle13RangeContainsEi(%"class.blink::CounterStyle"* nocapture readonly, i32) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 11, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %25, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %8 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %7, align 8
  %9 = zext i32 %4 to i64
  %10 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %8, i64 %9
  br label %11

11:                                               ; preds = %6, %20
  %12 = phi %"struct.std::__1::pair"* [ %21, %20 ], [ %8, %6 ]
  %13 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %12, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %14, %1
  br i1 %15, label %20, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %12, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, %1
  br i1 %19, label %20, label %23

20:                                               ; preds = %11, %16
  %21 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %12, i64 1
  %22 = icmp eq %"struct.std::__1::pair"* %21, %10
  br i1 %22, label %23, label %11

23:                                               ; preds = %16, %20, %28, %30, %32, %34, %36, %25, %25, %25, %25, %25, %25, %25, %25, %25, %25
  %24 = phi i1 [ false, %36 ], [ %35, %34 ], [ %33, %32 ], [ %31, %30 ], [ %29, %28 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %25 ], [ true, %16 ], [ false, %20 ]
  ret i1 %24

25:                                               ; preds = %2
  %26 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 2
  %27 = load i32, i32* %26, align 4
  switch i32 %27, label %37 [
    i32 0, label %23
    i32 4, label %23
    i32 1, label %23
    i32 7, label %23
    i32 8, label %23
    i32 9, label %23
    i32 10, label %23
    i32 11, label %23
    i32 12, label %23
    i32 13, label %23
    i32 2, label %28
    i32 3, label %28
    i32 16, label %28
    i32 5, label %30
    i32 6, label %32
    i32 14, label %34
    i32 15, label %34
    i32 17, label %36
  ]

28:                                               ; preds = %25, %25, %25
  %29 = icmp sgt i32 %1, 0
  br label %23

30:                                               ; preds = %25
  %31 = icmp sgt i32 %1, -1
  br label %23

32:                                               ; preds = %25
  %33 = icmp ult i32 %1, 1000000
  br label %23

34:                                               ; preds = %25, %25
  %35 = icmp ult i32 %1, 100000000
  br label %23

36:                                               ; preds = %25
  br label %23

37:                                               ; preds = %25
  unreachable
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink12CounterStyle17NeedsNegativeSignEi(%"class.blink::CounterStyle"* nocapture readonly, i32) local_unnamed_addr #3 align 2 {
  %3 = icmp sgt i32 %1, -1
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = trunc i32 %6 to i18
  %8 = lshr i18 131068, %7
  %9 = and i18 %8, 1
  %10 = icmp ne i18 %9, 0
  ret i1 %10

11:                                               ; preds = %2
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle30GenerateFallbackRepresentationEi(%"class.blink::CounterStyle"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 7
  %4 = load i8, i8* %3, align 8, !range !5
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = tail call dereferenceable(160) %"class.blink::CounterStyle"* @_ZN5blink12CounterStyle10GetDecimalEv()
  %8 = tail call %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle22GenerateRepresentationEi(%"class.blink::CounterStyle"* %7, i32 %1)
  br label %15

9:                                                ; preds = %2
  store i8 1, i8* %3, align 1
  %10 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 6, i32 0, i32 0
  %11 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** %10, align 8
  %12 = tail call %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle22GenerateRepresentationEi(%"class.blink::CounterStyle"* %11, i32 %1)
  %13 = icmp eq i8* %3, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %9
  store i8 0, i8* %3, align 1
  br label %15

15:                                               ; preds = %14, %9, %6
  %16 = phi %"class.WTF::StringImpl"* [ %8, %6 ], [ %12, %9 ], [ %12, %14 ]
  ret %"class.WTF::StringImpl"* %16
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle22GenerateRepresentationEi(%"class.blink::CounterStyle"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.WTF::StringBuilder", align 8
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 17
  %10 = load i32, i32* %9, align 8
  %11 = icmp ugt i32 %10, 120
  br i1 %11, label %12, label %25

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 7
  %14 = load i8, i8* %13, align 8, !range !5
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %12
  %17 = tail call dereferenceable(160) %"class.blink::CounterStyle"* @_ZN5blink12CounterStyle10GetDecimalEv() #10
  %18 = tail call %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle22GenerateRepresentationEi(%"class.blink::CounterStyle"* %17, i32 %1) #10
  br label %180

19:                                               ; preds = %12
  store i8 1, i8* %13, align 1
  %20 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 6, i32 0, i32 0
  %21 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** %20, align 8
  %22 = tail call %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle22GenerateRepresentationEi(%"class.blink::CounterStyle"* %21, i32 %1) #10
  %23 = icmp eq i8* %13, null
  br i1 %23, label %180, label %24

24:                                               ; preds = %19
  store i8 0, i8* %13, align 1
  br label %180

25:                                               ; preds = %2
  %26 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #10
  %27 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %28 = tail call %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle29GenerateInitialRepresentationEi(%"class.blink::CounterStyle"* %0, i32 %1)
  store %"class.WTF::StringImpl"* %28, %"class.WTF::StringImpl"** %27, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %30, label %43

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 7
  %32 = load i8, i8* %31, align 8, !range !5
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %37, label %34

34:                                               ; preds = %30
  %35 = tail call dereferenceable(160) %"class.blink::CounterStyle"* @_ZN5blink12CounterStyle10GetDecimalEv() #10
  %36 = tail call %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle22GenerateRepresentationEi(%"class.blink::CounterStyle"* %35, i32 %1) #10
  br label %178

37:                                               ; preds = %30
  store i8 1, i8* %31, align 1
  %38 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 6, i32 0, i32 0
  %39 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** %38, align 8
  %40 = tail call %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle22GenerateRepresentationEi(%"class.blink::CounterStyle"* %39, i32 %1) #10
  %41 = icmp eq i8* %31, null
  br i1 %41, label %178, label %42

42:                                               ; preds = %37
  store i8 0, i8* %31, align 1
  br label %178

43:                                               ; preds = %25
  %44 = call i32 @_ZN5blink19NumGraphemeClustersERKN3WTF6StringE(%"class.WTF::String"* nonnull dereferenceable(8) %3) #10
  %45 = load i32, i32* %9, align 8
  %46 = call i32 @llvm.usub.sat.i32(i32 %45, i32 %44)
  %47 = bitcast %"class.WTF::StringBuilder"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %47) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 -86, i64 48, i1 false)
  %48 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %48, align 8
  %49 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %4, i64 0, i32 1
  %50 = bitcast %union.anon* %49 to i8*
  store i8 0, i8* %50, align 8
  %51 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %4, i64 0, i32 2
  store i32 0, i32* %51, align 8
  %52 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %4, i64 0, i32 3
  store i8 1, i8* %52, align 4
  %53 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %4, i64 0, i32 4
  store i8 0, i8* %53, align 1
  %54 = icmp sgt i32 %1, -1
  br i1 %54, label %79, label %55

55:                                               ; preds = %43
  %56 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 2
  %57 = load i32, i32* %56, align 4
  %58 = add i32 %57, -2
  %59 = icmp ult i32 %58, 15
  br i1 %59, label %60, label %79

60:                                               ; preds = %55
  %61 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %61) #10
  %62 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 14, i32 0, i32 0
  %63 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %62, align 8
  %64 = icmp eq %"class.WTF::StringImpl"* %63, null
  br i1 %64, label %65, label %69

65:                                               ; preds = %60
  %66 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  store i8* null, i8** %66, align 8
  %67 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %68 = bitcast %"class.WTF::StringView"* %5 to i64*
  store i64 %67, i64* %68, align 8
  br label %76

69:                                               ; preds = %60
  %70 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %63, %"class.WTF::StringImpl"** %70, align 8
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %63, i64 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %63, i64 1
  %74 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %75 = bitcast i8** %74 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %73, %"class.WTF::StringImpl"** %75, align 8
  br label %76

76:                                               ; preds = %65, %69
  %77 = phi i32 [ %72, %69 ], [ 0, %65 ]
  %78 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %77, i32* %78, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %4, %"class.WTF::StringView"* nonnull dereferenceable(24) %5)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %61) #10
  br label %79

79:                                               ; preds = %55, %43, %76
  %80 = icmp eq i32 %46, 0
  br i1 %80, label %89, label %81

81:                                               ; preds = %79
  %82 = bitcast %"class.WTF::StringView"* %6 to i8*
  %83 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 16, i32 0, i32 0
  %84 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  %85 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %86 = bitcast i8** %85 to %"class.WTF::StringImpl"**
  %87 = bitcast %"class.WTF::StringView"* %6 to i64*
  %88 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  br label %112

89:                                               ; preds = %122, %79
  %90 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %90) #10
  %91 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %92 = icmp eq %"class.WTF::StringImpl"* %91, null
  br i1 %92, label %93, label %97

93:                                               ; preds = %89
  %94 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  store i8* null, i8** %94, align 8
  %95 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %96 = bitcast %"class.WTF::StringView"* %7 to i64*
  store i64 %95, i64* %96, align 8
  br label %104

97:                                               ; preds = %89
  %98 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %91, %"class.WTF::StringImpl"** %98, align 8
  %99 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 1
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 1
  %102 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %103 = bitcast i8** %102 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %101, %"class.WTF::StringImpl"** %103, align 8
  br label %104

104:                                              ; preds = %93, %97
  %105 = phi i32 [ %100, %97 ], [ 0, %93 ]
  %106 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %105, i32* %106, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %4, %"class.WTF::StringView"* nonnull dereferenceable(24) %7)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %90) #10
  br i1 %54, label %145, label %107

107:                                              ; preds = %104
  %108 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 2
  %109 = load i32, i32* %108, align 4
  %110 = add i32 %109, -2
  %111 = icmp ult i32 %110, 15
  br i1 %111, label %126, label %145

112:                                              ; preds = %122, %81
  %113 = phi i32 [ 0, %81 ], [ %124, %122 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %82) #10
  %114 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %115 = icmp eq %"class.WTF::StringImpl"* %114, null
  br i1 %115, label %116, label %118

116:                                              ; preds = %112
  store i8* null, i8** %85, align 8
  %117 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %117, i64* %87, align 8
  br label %122

118:                                              ; preds = %112
  store %"class.WTF::StringImpl"* %114, %"class.WTF::StringImpl"** %84, align 8
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %114, i64 0, i32 1
  %120 = load i32, i32* %119, align 4
  %121 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %114, i64 1
  store %"class.WTF::StringImpl"* %121, %"class.WTF::StringImpl"** %86, align 8
  br label %122

122:                                              ; preds = %116, %118
  %123 = phi i32 [ %120, %118 ], [ 0, %116 ]
  store i32 %123, i32* %88, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %4, %"class.WTF::StringView"* nonnull dereferenceable(24) %6)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %82) #10
  %124 = add nuw i32 %113, 1
  %125 = icmp eq i32 %124, %46
  br i1 %125, label %89, label %112

126:                                              ; preds = %107
  %127 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %127) #10
  %128 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 15, i32 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %131, label %135

131:                                              ; preds = %126
  %132 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  store i8* null, i8** %132, align 8
  %133 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %134 = bitcast %"class.WTF::StringView"* %8 to i64*
  store i64 %133, i64* %134, align 8
  br label %142

135:                                              ; preds = %126
  %136 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %129, %"class.WTF::StringImpl"** %136, align 8
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 1
  %138 = load i32, i32* %137, align 4
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 1
  %140 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %141 = bitcast i8** %140 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %139, %"class.WTF::StringImpl"** %141, align 8
  br label %142

142:                                              ; preds = %131, %135
  %143 = phi i32 [ %138, %135 ], [ 0, %131 ]
  %144 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %143, i32* %144, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %4, %"class.WTF::StringView"* nonnull dereferenceable(24) %8)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %127) #10
  br label %145

145:                                              ; preds = %107, %104, %142
  %146 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %4) #10
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %4) #10
  %147 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %48, align 8
  %148 = icmp eq %"class.WTF::StringImpl"* %147, null
  br i1 %148, label %162, label %149

149:                                              ; preds = %145
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %151 = load atomic i32, i32* %150 monotonic, align 4
  %152 = and i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 0, i32 0
  %155 = load i32, i32* %154, align 4
  br i1 %153, label %156, label %158

156:                                              ; preds = %149
  %157 = add i32 %155, -1
  store i32 %157, i32* %154, align 4
  br label %158

158:                                              ; preds = %156, %149
  %159 = phi i32 [ %157, %156 ], [ %155, %149 ]
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %162

161:                                              ; preds = %158
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %147) #10
  br label %162

162:                                              ; preds = %161, %158, %145
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %47) #10
  %163 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %164 = icmp eq %"class.WTF::StringImpl"* %163, null
  br i1 %164, label %178, label %165

165:                                              ; preds = %162
  %166 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %163, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %167 = load atomic i32, i32* %166 monotonic, align 4
  %168 = and i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %163, i64 0, i32 0
  %171 = load i32, i32* %170, align 4
  br i1 %169, label %172, label %174

172:                                              ; preds = %165
  %173 = add i32 %171, -1
  store i32 %173, i32* %170, align 4
  br label %174

174:                                              ; preds = %172, %165
  %175 = phi i32 [ %173, %172 ], [ %171, %165 ]
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %178

177:                                              ; preds = %174
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %163) #10
  br label %178

178:                                              ; preds = %37, %42, %34, %162, %174, %177
  %179 = phi %"class.WTF::StringImpl"* [ %146, %162 ], [ %146, %174 ], [ %146, %177 ], [ %40, %37 ], [ %40, %42 ], [ %36, %34 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #10
  br label %180

180:                                              ; preds = %16, %24, %19, %178
  %181 = phi %"class.WTF::StringImpl"* [ %179, %178 ], [ %18, %16 ], [ %22, %24 ], [ %22, %19 ]
  ret %"class.WTF::StringImpl"* %181
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle29GenerateInitialRepresentationEi(%"class.blink::CounterStyle"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::Vector.9", align 8
  %4 = alloca %"class.WTF::Vector.9", align 8
  %5 = alloca i32, align 4
  %6 = alloca %"class.WTF::Vector.9", align 8
  %7 = alloca i32, align 4
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca %"class.WTF::Vector.234", align 8
  %10 = alloca %"class.WTF::Vector.9", align 8
  %11 = alloca %"class.WTF::Vector.9", align 8
  %12 = alloca %"class.WTF::Vector.9", align 8
  %13 = alloca %"class.WTF::Vector.9", align 8
  %14 = alloca %"class.WTF::Vector.9", align 8
  %15 = alloca %"class.WTF::Vector.9", align 8
  %16 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 11, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %36, label %19

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %21 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %20, align 8
  %22 = zext i32 %17 to i64
  %23 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %21, i64 %22
  br label %24

24:                                               ; preds = %33, %19
  %25 = phi %"struct.std::__1::pair"* [ %34, %33 ], [ %21, %19 ]
  %26 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp sgt i32 %27, %1
  br i1 %28, label %33, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, %1
  br i1 %32, label %33, label %48

33:                                               ; preds = %29, %24
  %34 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 1
  %35 = icmp eq %"struct.std::__1::pair"* %34, %23
  br i1 %35, label %819, label %24

36:                                               ; preds = %2
  %37 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  switch i32 %38, label %45 [
    i32 0, label %48
    i32 4, label %48
    i32 1, label %48
    i32 7, label %48
    i32 8, label %48
    i32 9, label %48
    i32 10, label %48
    i32 11, label %48
    i32 12, label %48
    i32 13, label %48
    i32 2, label %46
    i32 3, label %46
    i32 16, label %46
    i32 5, label %39
    i32 6, label %41
    i32 14, label %43
    i32 15, label %43
    i32 17, label %819
  ]

39:                                               ; preds = %36
  %40 = icmp sgt i32 %1, -1
  br i1 %40, label %50, label %819

41:                                               ; preds = %36
  %42 = icmp ult i32 %1, 1000000
  br i1 %42, label %50, label %819

43:                                               ; preds = %36, %36
  %44 = icmp ult i32 %1, 100000000
  br i1 %44, label %50, label %819

45:                                               ; preds = %36
  unreachable

46:                                               ; preds = %36, %36, %36
  %47 = icmp sgt i32 %1, 0
  br i1 %47, label %50, label %819

48:                                               ; preds = %29, %36, %36, %36, %36, %36, %36, %36, %36, %36, %36
  %49 = icmp eq i32 %1, -2147483648
  br i1 %49, label %54, label %50

50:                                               ; preds = %46, %43, %41, %39, %48
  %51 = icmp slt i32 %1, 0
  %52 = sub nsw i32 0, %1
  %53 = select i1 %51, i32 %52, i32 %1
  br label %54

54:                                               ; preds = %48, %50
  %55 = phi i1 [ false, %50 ], [ true, %48 ]
  %56 = phi i32 [ %53, %50 ], [ -2147483648, %48 ]
  %57 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 2
  %58 = load i32, i32* %57, align 4
  switch i32 %58, label %818 [
    i32 0, label %59
    i32 1, label %86
    i32 4, label %124
    i32 2, label %212
    i32 3, label %345
    i32 5, label %422
    i32 6, label %610
    i32 7, label %615
    i32 8, label %624
    i32 9, label %633
    i32 10, label %642
    i32 11, label %651
    i32 12, label %660
    i32 13, label %669
    i32 14, label %678
    i32 15, label %683
    i32 16, label %688
    i32 17, label %819
  ]

59:                                               ; preds = %54
  %60 = bitcast %"class.WTF::Vector.9"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %60) #10
  %61 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 9, i32 0, i32 0, i32 2
  %62 = load i32, i32* %61, align 4
  %63 = srem i32 %1, %62
  %64 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %10, i64 0, i32 0, i32 0, i32 1
  %65 = tail call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 4) #10, !noalias !6
  %66 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %65, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #10, !noalias !6
  %67 = ptrtoint i8* %66 to i64
  %68 = bitcast %"class.WTF::Vector.9"* %10 to i64*
  store atomic i64 %67, i64* %68 monotonic, align 8, !alias.scope !6
  %69 = lshr i64 %65, 2
  %70 = trunc i64 %69 to i32
  store i32 %70, i32* %64, align 8, !alias.scope !6
  %71 = icmp eq i8* %66, null
  %72 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %10, i64 0, i32 0, i32 0, i32 2
  store i32 1, i32* %72, align 4, !alias.scope !6
  br i1 %71, label %79, label %73, !prof !3

73:                                               ; preds = %59
  %74 = icmp slt i32 %63, 1
  %75 = add nsw i32 %63, -1
  %76 = select i1 %74, i32 %62, i32 0
  %77 = add i32 %75, %76
  %78 = bitcast i8* %66 to i32*
  store i32 %77, i32* %78, align 4, !noalias !6
  br label %79

79:                                               ; preds = %59, %73
  %80 = call %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle15IndexesToStringERKN3WTF6VectorIjLj0ENS1_18PartitionAllocatorEEE(%"class.blink::CounterStyle"* %0, %"class.WTF::Vector.9"* nonnull dereferenceable(16) %10)
  %81 = ptrtoint %"class.WTF::StringImpl"* %80 to i64
  %82 = icmp eq i8* %66, null
  br i1 %82, label %85, label %83, !prof !4

83:                                               ; preds = %79
  %84 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %10, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %72, align 4
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %66) #10
  store i32* null, i32** %84, align 8
  br label %85

85:                                               ; preds = %79, %83
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %60) #10
  br label %819

86:                                               ; preds = %54
  %87 = bitcast %"class.WTF::Vector.9"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %87) #10
  %88 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 18
  %89 = load i32, i32* %88, align 4
  %90 = icmp sgt i32 %89, %1
  br i1 %90, label %96, label %91

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 9, i32 0, i32 0, i32 2
  %93 = load i32, i32* %92, align 4
  %94 = sub nsw i32 %1, %89
  %95 = icmp ult i32 %94, %93
  br i1 %95, label %97, label %96

96:                                               ; preds = %91, %86
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %87, i8 0, i64 16, i1 false) #10, !alias.scope !9
  br label %110

97:                                               ; preds = %91
  %98 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %11, i64 0, i32 0, i32 0, i32 1
  %99 = tail call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 4) #10, !noalias !9
  %100 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %99, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #10, !noalias !9
  %101 = ptrtoint i8* %100 to i64
  %102 = bitcast %"class.WTF::Vector.9"* %11 to i64*
  store atomic i64 %101, i64* %102 monotonic, align 8, !alias.scope !9
  %103 = lshr i64 %99, 2
  %104 = trunc i64 %103 to i32
  store i32 %104, i32* %98, align 8, !alias.scope !9
  %105 = icmp eq i8* %100, null
  %106 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %11, i64 0, i32 0, i32 0, i32 2
  store i32 1, i32* %106, align 4, !alias.scope !9
  %107 = bitcast i8* %100 to i32*
  br i1 %105, label %110, label %108, !prof !3

108:                                              ; preds = %97
  %109 = bitcast i8* %100 to i32*
  store i32 %94, i32* %109, align 4, !noalias !9
  br label %110

110:                                              ; preds = %96, %97, %108
  %111 = phi i32 [ 0, %96 ], [ 1, %97 ], [ 1, %108 ]
  %112 = phi i8* [ null, %96 ], [ null, %97 ], [ %100, %108 ]
  %113 = phi i32* [ null, %96 ], [ %107, %97 ], [ %107, %108 ]
  %114 = call %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle15IndexesToStringERKN3WTF6VectorIjLj0ENS1_18PartitionAllocatorEEE(%"class.blink::CounterStyle"* %0, %"class.WTF::Vector.9"* nonnull dereferenceable(16) %11)
  %115 = ptrtoint %"class.WTF::StringImpl"* %114 to i64
  %116 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %11, i64 0, i32 0, i32 0, i32 0
  %117 = icmp eq i32* %113, null
  br i1 %117, label %123, label %118, !prof !4

118:                                              ; preds = %110
  %119 = icmp eq i32 %111, 0
  br i1 %119, label %122, label %120, !prof !3

120:                                              ; preds = %118
  %121 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %11, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %121, align 4
  br label %122

122:                                              ; preds = %120, %118
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %112) #10
  store i32* null, i32** %116, align 8
  br label %123

123:                                              ; preds = %110, %122
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %87) #10
  br label %819

124:                                              ; preds = %54
  %125 = bitcast %"class.WTF::Vector.9"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %125) #10
  %126 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 9, i32 0, i32 0, i32 2
  %127 = load i32, i32* %126, align 4
  %128 = icmp eq i32 %56, 0
  br i1 %128, label %129, label %142

129:                                              ; preds = %124
  %130 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %12, i64 0, i32 0, i32 0, i32 1
  %131 = tail call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 4) #10, !noalias !12
  %132 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %131, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #10, !noalias !12
  %133 = ptrtoint i8* %132 to i64
  %134 = bitcast %"class.WTF::Vector.9"* %12 to i64*
  store atomic i64 %133, i64* %134 monotonic, align 8, !alias.scope !12
  %135 = lshr i64 %131, 2
  %136 = trunc i64 %135 to i32
  store i32 %136, i32* %130, align 8, !alias.scope !12
  %137 = icmp eq i8* %132, null
  %138 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %12, i64 0, i32 0, i32 0, i32 2
  store i32 1, i32* %138, align 4, !alias.scope !12
  %139 = bitcast i8* %132 to i32*
  br i1 %137, label %198, label %140, !prof !3

140:                                              ; preds = %129
  %141 = bitcast i8* %132 to i32*
  store i32 0, i32* %141, align 4, !noalias !12
  br label %198

142:                                              ; preds = %124
  %143 = bitcast %"class.WTF::Vector.9"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %143) #10, !noalias !12
  %144 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %6, i64 0, i32 0, i32 0, i32 0
  %145 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %6, i64 0, i32 0, i32 0, i32 1
  %146 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %6, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %143, i8 0, i64 16, i1 false) #10, !noalias !12
  %147 = bitcast i32* %7 to i8*
  br label %148

148:                                              ; preds = %164, %142
  %149 = phi i32 [ 0, %142 ], [ %166, %164 ]
  %150 = phi i32 [ 0, %142 ], [ %165, %164 ]
  %151 = phi i32 [ %56, %142 ], [ %153, %164 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %147) #10, !noalias !12
  %152 = urem i32 %151, %127
  %153 = udiv i32 %151, %127
  store i32 %152, i32* %7, align 4, !noalias !12
  %154 = icmp eq i32 %150, %149
  br i1 %154, label %161, label %155, !prof !3

155:                                              ; preds = %148
  %156 = load i32*, i32** %144, align 8, !noalias !12
  %157 = zext i32 %150 to i64
  %158 = getelementptr inbounds i32, i32* %156, i64 %157
  store i32 %152, i32* %158, align 4, !noalias !12
  %159 = load i32, i32* %146, align 4, !noalias !12
  %160 = add i32 %159, 1
  store i32 %160, i32* %146, align 4, !noalias !12
  br label %162

161:                                              ; preds = %148
  call void @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIjEEvOT_(%"class.WTF::Vector.9"* nonnull %6, i32* nonnull dereferenceable(4) %7) #10, !noalias !12
  br label %162

162:                                              ; preds = %161, %155
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %147) #10, !noalias !12
  %163 = icmp ult i32 %151, %127
  br i1 %163, label %167, label %164

164:                                              ; preds = %162
  %165 = load i32, i32* %146, align 4, !noalias !12
  %166 = load i32, i32* %145, align 8, !noalias !12
  br label %148

167:                                              ; preds = %162
  %168 = load i32*, i32** %144, align 8, !noalias !12
  %169 = load i32, i32* %146, align 4, !noalias !12
  %170 = icmp eq i32 %169, 0
  %171 = ptrtoint i32* %168 to i64
  br i1 %170, label %189, label %172

172:                                              ; preds = %167
  %173 = zext i32 %169 to i64
  %174 = getelementptr inbounds i32, i32* %168, i64 %173
  %175 = getelementptr inbounds i32, i32* %174, i64 -1
  %176 = icmp ugt i32* %175, %168
  br i1 %176, label %177, label %189

177:                                              ; preds = %172, %177
  %178 = phi i32* [ %183, %177 ], [ %175, %172 ]
  %179 = phi i32* [ %182, %177 ], [ %168, %172 ]
  %180 = load i32, i32* %179, align 4, !noalias !12
  %181 = load i32, i32* %178, align 4, !noalias !12
  store i32 %181, i32* %179, align 4, !noalias !12
  store i32 %180, i32* %178, align 4, !noalias !12
  %182 = getelementptr inbounds i32, i32* %179, i64 1
  %183 = getelementptr inbounds i32, i32* %178, i64 -1
  %184 = icmp ult i32* %182, %183
  br i1 %184, label %177, label %185

185:                                              ; preds = %177
  %186 = bitcast %"class.WTF::Vector.9"* %6 to i64*
  %187 = load i64, i64* %186, align 8, !noalias !12
  %188 = load i32, i32* %146, align 4, !noalias !12
  br label %189

189:                                              ; preds = %185, %172, %167
  %190 = phi i32 [ %188, %185 ], [ 0, %167 ], [ %169, %172 ]
  %191 = phi i64 [ %187, %185 ], [ %171, %167 ], [ %171, %172 ]
  %192 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %12, i64 0, i32 0, i32 0, i32 1
  %193 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %12, i64 0, i32 0, i32 0, i32 2
  %194 = bitcast %"class.WTF::Vector.9"* %6 to i64*
  %195 = bitcast %"class.WTF::Vector.9"* %12 to i64*
  store i64 0, i64* %195, align 8, !alias.scope !12
  store atomic i64 0, i64* %194 monotonic, align 8, !noalias !12
  store atomic i64 %191, i64* %195 monotonic, align 8, !alias.scope !12
  %196 = load i32, i32* %145, align 8, !noalias !12
  store i32 %196, i32* %192, align 8, !alias.scope !12
  store i32 %190, i32* %193, align 4, !alias.scope !12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %143) #10, !noalias !12
  %197 = inttoptr i64 %191 to i32*
  br label %198

198:                                              ; preds = %129, %140, %189
  %199 = phi i32 [ 1, %129 ], [ 1, %140 ], [ %190, %189 ]
  %200 = phi i32* [ %139, %129 ], [ %139, %140 ], [ %197, %189 ]
  %201 = call %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle15IndexesToStringERKN3WTF6VectorIjLj0ENS1_18PartitionAllocatorEEE(%"class.blink::CounterStyle"* %0, %"class.WTF::Vector.9"* nonnull dereferenceable(16) %12)
  %202 = ptrtoint %"class.WTF::StringImpl"* %201 to i64
  %203 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %12, i64 0, i32 0, i32 0, i32 0
  %204 = icmp eq i32* %200, null
  %205 = bitcast i32* %200 to i8*
  br i1 %204, label %211, label %206, !prof !4

206:                                              ; preds = %198
  %207 = icmp eq i32 %199, 0
  br i1 %207, label %210, label %208, !prof !3

208:                                              ; preds = %206
  %209 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %12, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %209, align 4
  br label %210

210:                                              ; preds = %208, %206
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %205) #10
  store i32* null, i32** %203, align 8
  br label %211

211:                                              ; preds = %198, %210
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %125) #10
  br label %819

212:                                              ; preds = %54
  %213 = bitcast %"class.WTF::Vector.9"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %213) #10
  %214 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 9, i32 0, i32 0, i32 2
  %215 = load i32, i32* %214, align 4
  %216 = icmp eq i32 %56, 0
  br i1 %216, label %217, label %218

217:                                              ; preds = %212
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %213, i8 0, i64 16, i1 false) #10, !alias.scope !15
  br label %327

218:                                              ; preds = %212
  %219 = add i32 %56, -1
  %220 = urem i32 %219, %215
  %221 = add i32 %215, %219
  %222 = udiv i32 %221, %215
  %223 = icmp ugt i32 %222, 120
  br i1 %223, label %224, label %225

224:                                              ; preds = %218
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %213, i8 0, i64 16, i1 false) #10, !alias.scope !15
  br label %327

225:                                              ; preds = %218
  %226 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %13, i64 0, i32 0, i32 0, i32 0
  store i32* null, i32** %226, align 8, !alias.scope !15
  %227 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %13, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %227, align 8, !alias.scope !15
  %228 = icmp ult i32 %221, %215
  br i1 %228, label %229, label %231

229:                                              ; preds = %225
  %230 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %13, i64 0, i32 0, i32 0, i32 2
  store i32 %222, i32* %230, align 4, !alias.scope !15
  br label %327

231:                                              ; preds = %225
  %232 = zext i32 %222 to i64
  %233 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64 %232) #10, !noalias !15
  %234 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %233, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #10, !noalias !15
  %235 = ptrtoint i8* %234 to i64
  %236 = bitcast %"class.WTF::Vector.9"* %13 to i64*
  store atomic i64 %235, i64* %236 monotonic, align 8, !alias.scope !15
  %237 = lshr i64 %233, 2
  %238 = trunc i64 %237 to i32
  store i32 %238, i32* %227, align 8, !alias.scope !15
  %239 = bitcast i8* %234 to i32*
  %240 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %13, i64 0, i32 0, i32 0, i32 2
  store i32 %222, i32* %240, align 4, !alias.scope !15
  %241 = getelementptr inbounds i32, i32* %239, i64 %232
  %242 = shl nuw nsw i64 %232, 2
  %243 = add nsw i64 %242, -4
  %244 = lshr exact i64 %243, 2
  %245 = add nuw nsw i64 %244, 1
  %246 = icmp ult i64 %245, 8
  br i1 %246, label %321, label %247

247:                                              ; preds = %231
  %248 = and i64 %245, 9223372036854775800
  %249 = getelementptr i32, i32* %239, i64 %248
  %250 = insertelement <4 x i32> undef, i32 %220, i32 0
  %251 = shufflevector <4 x i32> %250, <4 x i32> undef, <4 x i32> zeroinitializer
  %252 = insertelement <4 x i32> undef, i32 %220, i32 0
  %253 = shufflevector <4 x i32> %252, <4 x i32> undef, <4 x i32> zeroinitializer
  %254 = add nsw i64 %248, -8
  %255 = lshr exact i64 %254, 3
  %256 = add nuw nsw i64 %255, 1
  %257 = and i64 %256, 7
  %258 = icmp ult i64 %254, 56
  br i1 %258, label %306, label %259

259:                                              ; preds = %247
  %260 = sub nsw i64 %256, %257
  br label %261

261:                                              ; preds = %261, %259
  %262 = phi i64 [ 0, %259 ], [ %303, %261 ]
  %263 = phi i64 [ %260, %259 ], [ %304, %261 ]
  %264 = getelementptr i32, i32* %239, i64 %262
  %265 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> %251, <4 x i32>* %265, align 4, !noalias !15
  %266 = getelementptr i32, i32* %264, i64 4
  %267 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %267, align 4, !noalias !15
  %268 = or i64 %262, 8
  %269 = getelementptr i32, i32* %239, i64 %268
  %270 = bitcast i32* %269 to <4 x i32>*
  store <4 x i32> %251, <4 x i32>* %270, align 4, !noalias !15
  %271 = getelementptr i32, i32* %269, i64 4
  %272 = bitcast i32* %271 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %272, align 4, !noalias !15
  %273 = or i64 %262, 16
  %274 = getelementptr i32, i32* %239, i64 %273
  %275 = bitcast i32* %274 to <4 x i32>*
  store <4 x i32> %251, <4 x i32>* %275, align 4, !noalias !15
  %276 = getelementptr i32, i32* %274, i64 4
  %277 = bitcast i32* %276 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %277, align 4, !noalias !15
  %278 = or i64 %262, 24
  %279 = getelementptr i32, i32* %239, i64 %278
  %280 = bitcast i32* %279 to <4 x i32>*
  store <4 x i32> %251, <4 x i32>* %280, align 4, !noalias !15
  %281 = getelementptr i32, i32* %279, i64 4
  %282 = bitcast i32* %281 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %282, align 4, !noalias !15
  %283 = or i64 %262, 32
  %284 = getelementptr i32, i32* %239, i64 %283
  %285 = bitcast i32* %284 to <4 x i32>*
  store <4 x i32> %251, <4 x i32>* %285, align 4, !noalias !15
  %286 = getelementptr i32, i32* %284, i64 4
  %287 = bitcast i32* %286 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %287, align 4, !noalias !15
  %288 = or i64 %262, 40
  %289 = getelementptr i32, i32* %239, i64 %288
  %290 = bitcast i32* %289 to <4 x i32>*
  store <4 x i32> %251, <4 x i32>* %290, align 4, !noalias !15
  %291 = getelementptr i32, i32* %289, i64 4
  %292 = bitcast i32* %291 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %292, align 4, !noalias !15
  %293 = or i64 %262, 48
  %294 = getelementptr i32, i32* %239, i64 %293
  %295 = bitcast i32* %294 to <4 x i32>*
  store <4 x i32> %251, <4 x i32>* %295, align 4, !noalias !15
  %296 = getelementptr i32, i32* %294, i64 4
  %297 = bitcast i32* %296 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %297, align 4, !noalias !15
  %298 = or i64 %262, 56
  %299 = getelementptr i32, i32* %239, i64 %298
  %300 = bitcast i32* %299 to <4 x i32>*
  store <4 x i32> %251, <4 x i32>* %300, align 4, !noalias !15
  %301 = getelementptr i32, i32* %299, i64 4
  %302 = bitcast i32* %301 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %302, align 4, !noalias !15
  %303 = add i64 %262, 64
  %304 = add i64 %263, -8
  %305 = icmp eq i64 %304, 0
  br i1 %305, label %306, label %261, !llvm.loop !18

306:                                              ; preds = %261, %247
  %307 = phi i64 [ 0, %247 ], [ %303, %261 ]
  %308 = icmp eq i64 %257, 0
  br i1 %308, label %319, label %309

309:                                              ; preds = %306, %309
  %310 = phi i64 [ %316, %309 ], [ %307, %306 ]
  %311 = phi i64 [ %317, %309 ], [ %257, %306 ]
  %312 = getelementptr i32, i32* %239, i64 %310
  %313 = bitcast i32* %312 to <4 x i32>*
  store <4 x i32> %251, <4 x i32>* %313, align 4, !noalias !15
  %314 = getelementptr i32, i32* %312, i64 4
  %315 = bitcast i32* %314 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %315, align 4, !noalias !15
  %316 = add i64 %310, 8
  %317 = add i64 %311, -1
  %318 = icmp eq i64 %317, 0
  br i1 %318, label %319, label %309, !llvm.loop !20

319:                                              ; preds = %309, %306
  %320 = icmp eq i64 %245, %248
  br i1 %320, label %330, label %321

321:                                              ; preds = %319, %231
  %322 = phi i32* [ %239, %231 ], [ %249, %319 ]
  br label %323

323:                                              ; preds = %321, %323
  %324 = phi i32* [ %325, %323 ], [ %322, %321 ]
  store i32 %220, i32* %324, align 4, !noalias !15
  %325 = getelementptr inbounds i32, i32* %324, i64 1
  %326 = icmp eq i32* %325, %241
  br i1 %326, label %330, label %323, !llvm.loop !22

327:                                              ; preds = %217, %224, %229
  %328 = call %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle15IndexesToStringERKN3WTF6VectorIjLj0ENS1_18PartitionAllocatorEEE(%"class.blink::CounterStyle"* %0, %"class.WTF::Vector.9"* nonnull dereferenceable(16) %13)
  %329 = ptrtoint %"class.WTF::StringImpl"* %328 to i64
  br label %343

330:                                              ; preds = %323, %319
  %331 = load i32*, i32** %226, align 8
  %332 = bitcast i32* %331 to i8*
  %333 = icmp eq i32* %331, null
  %334 = call %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle15IndexesToStringERKN3WTF6VectorIjLj0ENS1_18PartitionAllocatorEEE(%"class.blink::CounterStyle"* %0, %"class.WTF::Vector.9"* nonnull dereferenceable(16) %13)
  %335 = ptrtoint %"class.WTF::StringImpl"* %334 to i64
  %336 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %13, i64 0, i32 0, i32 0, i32 0
  br i1 %333, label %343, label %337, !prof !4

337:                                              ; preds = %330
  %338 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %13, i64 0, i32 0, i32 0, i32 2
  %339 = load i32, i32* %338, align 4
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %342, label %341, !prof !3

341:                                              ; preds = %337
  store i32 0, i32* %338, align 4
  br label %342

342:                                              ; preds = %341, %337
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %332) #10
  store i32* null, i32** %336, align 8
  br label %343

343:                                              ; preds = %327, %330, %342
  %344 = phi i64 [ %329, %327 ], [ %335, %330 ], [ %335, %342 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %213) #10
  br label %819

345:                                              ; preds = %54
  %346 = bitcast %"class.WTF::Vector.9"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %346) #10
  %347 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 9, i32 0, i32 0, i32 2
  %348 = load i32, i32* %347, align 4
  %349 = icmp eq i32 %56, 0
  br i1 %349, label %350, label %351

350:                                              ; preds = %345
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %346, i8 0, i64 16, i1 false) #10, !alias.scope !24
  br label %408

351:                                              ; preds = %345
  %352 = bitcast %"class.WTF::Vector.9"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %352) #10, !noalias !24
  %353 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %4, i64 0, i32 0, i32 0, i32 0
  %354 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %4, i64 0, i32 0, i32 0, i32 1
  %355 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %4, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %352, i8 0, i64 16, i1 false) #10, !noalias !24
  %356 = bitcast i32* %5 to i8*
  br label %357

357:                                              ; preds = %374, %351
  %358 = phi i32 [ 0, %351 ], [ %376, %374 ]
  %359 = phi i32 [ 0, %351 ], [ %375, %374 ]
  %360 = phi i32 [ %56, %351 ], [ %363, %374 ]
  %361 = add i32 %360, -1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %356) #10, !noalias !24
  %362 = urem i32 %361, %348
  %363 = udiv i32 %361, %348
  store i32 %362, i32* %5, align 4, !noalias !24
  %364 = icmp eq i32 %359, %358
  br i1 %364, label %371, label %365, !prof !3

365:                                              ; preds = %357
  %366 = load i32*, i32** %353, align 8, !noalias !24
  %367 = zext i32 %359 to i64
  %368 = getelementptr inbounds i32, i32* %366, i64 %367
  store i32 %362, i32* %368, align 4, !noalias !24
  %369 = load i32, i32* %355, align 4, !noalias !24
  %370 = add i32 %369, 1
  store i32 %370, i32* %355, align 4, !noalias !24
  br label %372

371:                                              ; preds = %357
  call void @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIjEEvOT_(%"class.WTF::Vector.9"* nonnull %4, i32* nonnull dereferenceable(4) %5) #10, !noalias !24
  br label %372

372:                                              ; preds = %371, %365
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %356) #10, !noalias !24
  %373 = icmp ult i32 %361, %348
  br i1 %373, label %377, label %374

374:                                              ; preds = %372
  %375 = load i32, i32* %355, align 4, !noalias !24
  %376 = load i32, i32* %354, align 8, !noalias !24
  br label %357

377:                                              ; preds = %372
  %378 = load i32*, i32** %353, align 8, !noalias !24
  %379 = load i32, i32* %355, align 4, !noalias !24
  %380 = icmp eq i32 %379, 0
  %381 = ptrtoint i32* %378 to i64
  br i1 %380, label %399, label %382

382:                                              ; preds = %377
  %383 = zext i32 %379 to i64
  %384 = getelementptr inbounds i32, i32* %378, i64 %383
  %385 = getelementptr inbounds i32, i32* %384, i64 -1
  %386 = icmp ugt i32* %385, %378
  br i1 %386, label %387, label %399

387:                                              ; preds = %382, %387
  %388 = phi i32* [ %393, %387 ], [ %385, %382 ]
  %389 = phi i32* [ %392, %387 ], [ %378, %382 ]
  %390 = load i32, i32* %389, align 4, !noalias !24
  %391 = load i32, i32* %388, align 4, !noalias !24
  store i32 %391, i32* %389, align 4, !noalias !24
  store i32 %390, i32* %388, align 4, !noalias !24
  %392 = getelementptr inbounds i32, i32* %389, i64 1
  %393 = getelementptr inbounds i32, i32* %388, i64 -1
  %394 = icmp ult i32* %392, %393
  br i1 %394, label %387, label %395

395:                                              ; preds = %387
  %396 = bitcast %"class.WTF::Vector.9"* %4 to i64*
  %397 = load i64, i64* %396, align 8, !noalias !24
  %398 = load i32, i32* %355, align 4, !noalias !24
  br label %399

399:                                              ; preds = %395, %382, %377
  %400 = phi i32 [ %398, %395 ], [ 0, %377 ], [ %379, %382 ]
  %401 = phi i64 [ %397, %395 ], [ %381, %377 ], [ %381, %382 ]
  %402 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %14, i64 0, i32 0, i32 0, i32 1
  %403 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %14, i64 0, i32 0, i32 0, i32 2
  %404 = bitcast %"class.WTF::Vector.9"* %4 to i64*
  %405 = bitcast %"class.WTF::Vector.9"* %14 to i64*
  store i64 0, i64* %405, align 8, !alias.scope !24
  store atomic i64 0, i64* %404 monotonic, align 8, !noalias !24
  store atomic i64 %401, i64* %405 monotonic, align 8, !alias.scope !24
  %406 = load i32, i32* %354, align 8, !noalias !24
  store i32 %406, i32* %402, align 8, !alias.scope !24
  store i32 %400, i32* %403, align 4, !alias.scope !24
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %352) #10, !noalias !24
  %407 = inttoptr i64 %401 to i32*
  br label %408

408:                                              ; preds = %350, %399
  %409 = phi i32 [ 0, %350 ], [ %400, %399 ]
  %410 = phi i32* [ null, %350 ], [ %407, %399 ]
  %411 = call %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle15IndexesToStringERKN3WTF6VectorIjLj0ENS1_18PartitionAllocatorEEE(%"class.blink::CounterStyle"* %0, %"class.WTF::Vector.9"* nonnull dereferenceable(16) %14)
  %412 = ptrtoint %"class.WTF::StringImpl"* %411 to i64
  %413 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %14, i64 0, i32 0, i32 0, i32 0
  %414 = icmp eq i32* %410, null
  %415 = bitcast i32* %410 to i8*
  br i1 %414, label %421, label %416, !prof !4

416:                                              ; preds = %408
  %417 = icmp eq i32 %409, 0
  br i1 %417, label %420, label %418, !prof !3

418:                                              ; preds = %416
  %419 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %14, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %419, align 4
  br label %420

420:                                              ; preds = %418, %416
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %415) #10
  store i32* null, i32** %413, align 8
  br label %421

421:                                              ; preds = %408, %420
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %346) #10
  br label %819

422:                                              ; preds = %54
  %423 = bitcast %"class.WTF::Vector.9"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %423) #10
  %424 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 10
  %425 = icmp eq i32 %56, 0
  br i1 %425, label %426, label %449

426:                                              ; preds = %422
  %427 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 10, i32 0, i32 0, i32 2
  %428 = load i32, i32* %427, align 4, !noalias !27
  %429 = add i32 %428, -1
  %430 = tail call dereferenceable(4) i32* @_ZNK3WTF6VectorIjLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.9"* %424, i32 %429) #10, !noalias !27
  %431 = load i32, i32* %430, align 4, !noalias !27
  %432 = icmp eq i32 %431, 0
  br i1 %432, label %433, label %448

433:                                              ; preds = %426
  %434 = load i32, i32* %427, align 4, !noalias !27
  %435 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %15, i64 0, i32 0, i32 0, i32 1
  %436 = tail call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 4) #10, !noalias !27
  %437 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %436, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #10, !noalias !27
  %438 = ptrtoint i8* %437 to i64
  %439 = bitcast %"class.WTF::Vector.9"* %15 to i64*
  store atomic i64 %438, i64* %439 monotonic, align 8, !alias.scope !27
  %440 = lshr i64 %436, 2
  %441 = trunc i64 %440 to i32
  store i32 %441, i32* %435, align 8, !alias.scope !27
  %442 = icmp eq i8* %437, null
  %443 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %15, i64 0, i32 0, i32 0, i32 2
  store i32 1, i32* %443, align 4, !alias.scope !27
  %444 = bitcast i8* %437 to i32*
  br i1 %442, label %596, label %445, !prof !3

445:                                              ; preds = %433
  %446 = add i32 %434, -1
  %447 = bitcast i8* %437 to i32*
  store i32 %446, i32* %447, align 4, !noalias !27
  br label %596

448:                                              ; preds = %426
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %423, i8 0, i64 16, i1 false) #10, !alias.scope !27
  br label %596

449:                                              ; preds = %422
  %450 = bitcast %"class.WTF::Vector.9"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %450) #10, !noalias !27
  %451 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %3, i64 0, i32 0, i32 0, i32 0
  %452 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %3, i64 0, i32 0, i32 0, i32 1
  %453 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %3, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %450, i8 0, i64 16, i1 false) #10, !noalias !27
  %454 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 10, i32 0, i32 0, i32 2
  br label %455

455:                                              ; preds = %567, %449
  %456 = phi i32 [ %56, %449 ], [ %570, %567 ]
  %457 = phi i32 [ 0, %449 ], [ %571, %567 ]
  %458 = load i32, i32* %454, align 4, !noalias !27
  %459 = icmp ult i32 %457, %458
  br i1 %459, label %460, label %574

460:                                              ; preds = %455
  %461 = call dereferenceable(4) i32* @_ZNK3WTF6VectorIjLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.9"* %424, i32 %457) #10, !noalias !27
  %462 = load i32, i32* %461, align 4, !noalias !27
  %463 = icmp eq i32 %462, 0
  br i1 %463, label %574, label %464

464:                                              ; preds = %460
  %465 = call dereferenceable(4) i32* @_ZNK3WTF6VectorIjLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.9"* %424, i32 %457) #10, !noalias !27
  %466 = load i32, i32* %465, align 4, !noalias !27
  %467 = udiv i32 %456, %466
  %468 = icmp ugt i32 %466, %456
  br i1 %468, label %567, label %469

469:                                              ; preds = %464
  %470 = load i32, i32* %453, align 4, !noalias !27
  %471 = add i32 %470, %467
  %472 = icmp ugt i32 %471, 120
  br i1 %472, label %573, label %473

473:                                              ; preds = %469
  %474 = zext i32 %467 to i64
  %475 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64 %474) #10, !noalias !27
  %476 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %475, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #10, !noalias !27
  %477 = bitcast i8* %476 to i32*
  %478 = getelementptr inbounds i32, i32* %477, i64 %474
  %479 = shl nuw nsw i64 %474, 2
  %480 = add nsw i64 %479, -4
  %481 = lshr exact i64 %480, 2
  %482 = add nuw nsw i64 %481, 1
  %483 = icmp ult i64 %482, 8
  br i1 %483, label %558, label %484

484:                                              ; preds = %473
  %485 = and i64 %482, 9223372036854775800
  %486 = getelementptr i32, i32* %477, i64 %485
  %487 = insertelement <4 x i32> undef, i32 %457, i32 0
  %488 = shufflevector <4 x i32> %487, <4 x i32> undef, <4 x i32> zeroinitializer
  %489 = insertelement <4 x i32> undef, i32 %457, i32 0
  %490 = shufflevector <4 x i32> %489, <4 x i32> undef, <4 x i32> zeroinitializer
  %491 = add nsw i64 %485, -8
  %492 = lshr exact i64 %491, 3
  %493 = add nuw nsw i64 %492, 1
  %494 = and i64 %493, 7
  %495 = icmp ult i64 %491, 56
  br i1 %495, label %543, label %496

496:                                              ; preds = %484
  %497 = sub nsw i64 %493, %494
  br label %498

498:                                              ; preds = %498, %496
  %499 = phi i64 [ 0, %496 ], [ %540, %498 ]
  %500 = phi i64 [ %497, %496 ], [ %541, %498 ]
  %501 = getelementptr i32, i32* %477, i64 %499
  %502 = bitcast i32* %501 to <4 x i32>*
  store <4 x i32> %488, <4 x i32>* %502, align 4, !noalias !27
  %503 = getelementptr i32, i32* %501, i64 4
  %504 = bitcast i32* %503 to <4 x i32>*
  store <4 x i32> %490, <4 x i32>* %504, align 4, !noalias !27
  %505 = or i64 %499, 8
  %506 = getelementptr i32, i32* %477, i64 %505
  %507 = bitcast i32* %506 to <4 x i32>*
  store <4 x i32> %488, <4 x i32>* %507, align 4, !noalias !27
  %508 = getelementptr i32, i32* %506, i64 4
  %509 = bitcast i32* %508 to <4 x i32>*
  store <4 x i32> %490, <4 x i32>* %509, align 4, !noalias !27
  %510 = or i64 %499, 16
  %511 = getelementptr i32, i32* %477, i64 %510
  %512 = bitcast i32* %511 to <4 x i32>*
  store <4 x i32> %488, <4 x i32>* %512, align 4, !noalias !27
  %513 = getelementptr i32, i32* %511, i64 4
  %514 = bitcast i32* %513 to <4 x i32>*
  store <4 x i32> %490, <4 x i32>* %514, align 4, !noalias !27
  %515 = or i64 %499, 24
  %516 = getelementptr i32, i32* %477, i64 %515
  %517 = bitcast i32* %516 to <4 x i32>*
  store <4 x i32> %488, <4 x i32>* %517, align 4, !noalias !27
  %518 = getelementptr i32, i32* %516, i64 4
  %519 = bitcast i32* %518 to <4 x i32>*
  store <4 x i32> %490, <4 x i32>* %519, align 4, !noalias !27
  %520 = or i64 %499, 32
  %521 = getelementptr i32, i32* %477, i64 %520
  %522 = bitcast i32* %521 to <4 x i32>*
  store <4 x i32> %488, <4 x i32>* %522, align 4, !noalias !27
  %523 = getelementptr i32, i32* %521, i64 4
  %524 = bitcast i32* %523 to <4 x i32>*
  store <4 x i32> %490, <4 x i32>* %524, align 4, !noalias !27
  %525 = or i64 %499, 40
  %526 = getelementptr i32, i32* %477, i64 %525
  %527 = bitcast i32* %526 to <4 x i32>*
  store <4 x i32> %488, <4 x i32>* %527, align 4, !noalias !27
  %528 = getelementptr i32, i32* %526, i64 4
  %529 = bitcast i32* %528 to <4 x i32>*
  store <4 x i32> %490, <4 x i32>* %529, align 4, !noalias !27
  %530 = or i64 %499, 48
  %531 = getelementptr i32, i32* %477, i64 %530
  %532 = bitcast i32* %531 to <4 x i32>*
  store <4 x i32> %488, <4 x i32>* %532, align 4, !noalias !27
  %533 = getelementptr i32, i32* %531, i64 4
  %534 = bitcast i32* %533 to <4 x i32>*
  store <4 x i32> %490, <4 x i32>* %534, align 4, !noalias !27
  %535 = or i64 %499, 56
  %536 = getelementptr i32, i32* %477, i64 %535
  %537 = bitcast i32* %536 to <4 x i32>*
  store <4 x i32> %488, <4 x i32>* %537, align 4, !noalias !27
  %538 = getelementptr i32, i32* %536, i64 4
  %539 = bitcast i32* %538 to <4 x i32>*
  store <4 x i32> %490, <4 x i32>* %539, align 4, !noalias !27
  %540 = add i64 %499, 64
  %541 = add i64 %500, -8
  %542 = icmp eq i64 %541, 0
  br i1 %542, label %543, label %498, !llvm.loop !30

543:                                              ; preds = %498, %484
  %544 = phi i64 [ 0, %484 ], [ %540, %498 ]
  %545 = icmp eq i64 %494, 0
  br i1 %545, label %556, label %546

546:                                              ; preds = %543, %546
  %547 = phi i64 [ %553, %546 ], [ %544, %543 ]
  %548 = phi i64 [ %554, %546 ], [ %494, %543 ]
  %549 = getelementptr i32, i32* %477, i64 %547
  %550 = bitcast i32* %549 to <4 x i32>*
  store <4 x i32> %488, <4 x i32>* %550, align 4, !noalias !27
  %551 = getelementptr i32, i32* %549, i64 4
  %552 = bitcast i32* %551 to <4 x i32>*
  store <4 x i32> %490, <4 x i32>* %552, align 4, !noalias !27
  %553 = add i64 %547, 8
  %554 = add i64 %548, -1
  %555 = icmp eq i64 %554, 0
  br i1 %555, label %556, label %546, !llvm.loop !31

556:                                              ; preds = %546, %543
  %557 = icmp eq i64 %482, %485
  br i1 %557, label %564, label %558

558:                                              ; preds = %556, %473
  %559 = phi i32* [ %477, %473 ], [ %486, %556 ]
  br label %560

560:                                              ; preds = %558, %560
  %561 = phi i32* [ %562, %560 ], [ %559, %558 ]
  store i32 %457, i32* %561, align 4, !noalias !27
  %562 = getelementptr inbounds i32, i32* %561, i64 1
  %563 = icmp eq i32* %562, %478
  br i1 %563, label %564, label %560, !llvm.loop !32

564:                                              ; preds = %560, %556
  call void @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE6AppendIjEEvPKT_j(%"class.WTF::Vector.9"* nonnull %3, i32* %477, i32 %467) #10, !noalias !27
  %565 = icmp eq i8* %476, null
  br i1 %565, label %567, label %566, !prof !4

566:                                              ; preds = %564
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %476) #10, !noalias !27
  br label %567

567:                                              ; preds = %566, %564, %464
  %568 = call dereferenceable(4) i32* @_ZNK3WTF6VectorIjLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.9"* %424, i32 %457) #10, !noalias !27
  %569 = load i32, i32* %568, align 4, !noalias !27
  %570 = urem i32 %456, %569
  %571 = add i32 %457, 1
  %572 = icmp eq i32 %570, 0
  br i1 %572, label %575, label %455

573:                                              ; preds = %469
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %423, i8 0, i64 16, i1 false) #10, !alias.scope !27
  br label %584

574:                                              ; preds = %460, %455
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %423, i8 0, i64 16, i1 false) #10, !alias.scope !27
  br label %584

575:                                              ; preds = %567
  %576 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %15, i64 0, i32 0, i32 0, i32 1
  %577 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %15, i64 0, i32 0, i32 0, i32 2
  %578 = bitcast %"class.WTF::Vector.9"* %3 to i64*
  %579 = bitcast %"class.WTF::Vector.9"* %15 to i64*
  store i64 0, i64* %579, align 8, !alias.scope !27
  %580 = load i64, i64* %578, align 8, !noalias !27
  store atomic i64 0, i64* %578 monotonic, align 8, !noalias !27
  store atomic i64 %580, i64* %579 monotonic, align 8, !alias.scope !27
  %581 = load i32, i32* %452, align 8, !noalias !27
  store i32 %581, i32* %576, align 8, !alias.scope !27
  store i32 0, i32* %452, align 8, !noalias !27
  %582 = load i32, i32* %453, align 4, !noalias !27
  store i32 %582, i32* %577, align 4, !alias.scope !27
  store i32 0, i32* %453, align 4, !noalias !27
  %583 = inttoptr i64 %580 to i32*
  br label %584

584:                                              ; preds = %575, %574, %573
  %585 = phi i32 [ %582, %575 ], [ 0, %574 ], [ 0, %573 ]
  %586 = phi i32* [ %583, %575 ], [ null, %574 ], [ null, %573 ]
  %587 = load i32*, i32** %451, align 8, !noalias !27
  %588 = icmp eq i32* %587, null
  %589 = bitcast i32* %587 to i8*
  br i1 %588, label %595, label %590, !prof !4

590:                                              ; preds = %584
  %591 = load i32, i32* %453, align 4, !noalias !27
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %594, label %593, !prof !3

593:                                              ; preds = %590
  store i32 0, i32* %453, align 4, !noalias !27
  br label %594

594:                                              ; preds = %593, %590
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %589) #10, !noalias !27
  store i32* null, i32** %451, align 8, !noalias !27
  br label %595

595:                                              ; preds = %594, %584
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %450) #10, !noalias !27
  br label %596

596:                                              ; preds = %433, %445, %448, %595
  %597 = phi i32 [ 1, %433 ], [ 1, %445 ], [ 0, %448 ], [ %585, %595 ]
  %598 = phi i32* [ %444, %433 ], [ %444, %445 ], [ null, %448 ], [ %586, %595 ]
  %599 = call %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle15IndexesToStringERKN3WTF6VectorIjLj0ENS1_18PartitionAllocatorEEE(%"class.blink::CounterStyle"* %0, %"class.WTF::Vector.9"* nonnull dereferenceable(16) %15)
  %600 = ptrtoint %"class.WTF::StringImpl"* %599 to i64
  %601 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %15, i64 0, i32 0, i32 0, i32 0
  %602 = icmp eq i32* %598, null
  %603 = bitcast i32* %598 to i8*
  br i1 %602, label %609, label %604, !prof !4

604:                                              ; preds = %596
  %605 = icmp eq i32 %597, 0
  br i1 %605, label %608, label %606, !prof !3

606:                                              ; preds = %604
  %607 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %15, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %607, align 4
  br label %608

608:                                              ; preds = %606, %604
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %603) #10
  store i32* null, i32** %601, align 8
  br label %609

609:                                              ; preds = %596, %608
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %423) #10
  br label %819

610:                                              ; preds = %54
  %611 = icmp ugt i32 %56, 999999
  br i1 %611, label %819, label %612

612:                                              ; preds = %610
  %613 = tail call %"class.WTF::StringImpl"* @_ZN5blink16list_marker_text7GetTextENS_14EListStyleTypeEi(i32 43, i32 %56) #10
  %614 = ptrtoint %"class.WTF::StringImpl"* %613 to i64
  br label %819

615:                                              ; preds = %54
  br i1 %55, label %620, label %616, !prof !3

616:                                              ; preds = %615
  %617 = icmp slt i32 %1, 0
  %618 = sub nsw i32 0, %1
  %619 = select i1 %617, i32 %618, i32 %1
  br label %620

620:                                              ; preds = %615, %616
  %621 = phi i32 [ %619, %616 ], [ 2147483647, %615 ]
  %622 = tail call %"class.WTF::StringImpl"* @_ZN5blink16list_marker_text7GetTextENS_14EListStyleTypeEi(i32 50, i32 %621) #10
  %623 = ptrtoint %"class.WTF::StringImpl"* %622 to i64
  br label %819

624:                                              ; preds = %54
  br i1 %55, label %629, label %625, !prof !3

625:                                              ; preds = %624
  %626 = icmp slt i32 %1, 0
  %627 = sub nsw i32 0, %1
  %628 = select i1 %626, i32 %627, i32 %1
  br label %629

629:                                              ; preds = %624, %625
  %630 = phi i32 [ %628, %625 ], [ 2147483647, %624 ]
  %631 = tail call %"class.WTF::StringImpl"* @_ZN5blink16list_marker_text7GetTextENS_14EListStyleTypeEi(i32 49, i32 %630) #10
  %632 = ptrtoint %"class.WTF::StringImpl"* %631 to i64
  br label %819

633:                                              ; preds = %54
  br i1 %55, label %638, label %634, !prof !3

634:                                              ; preds = %633
  %635 = icmp slt i32 %1, 0
  %636 = sub nsw i32 0, %1
  %637 = select i1 %635, i32 %636, i32 %1
  br label %638

638:                                              ; preds = %633, %634
  %639 = phi i32 [ %637, %634 ], [ 2147483647, %633 ]
  %640 = tail call %"class.WTF::StringImpl"* @_ZN5blink16list_marker_text7GetTextENS_14EListStyleTypeEi(i32 52, i32 %639) #10
  %641 = ptrtoint %"class.WTF::StringImpl"* %640 to i64
  br label %819

642:                                              ; preds = %54
  br i1 %55, label %647, label %643, !prof !3

643:                                              ; preds = %642
  %644 = icmp slt i32 %1, 0
  %645 = sub nsw i32 0, %1
  %646 = select i1 %644, i32 %645, i32 %1
  br label %647

647:                                              ; preds = %642, %643
  %648 = phi i32 [ %646, %643 ], [ 2147483647, %642 ]
  %649 = tail call %"class.WTF::StringImpl"* @_ZN5blink16list_marker_text7GetTextENS_14EListStyleTypeEi(i32 51, i32 %648) #10
  %650 = ptrtoint %"class.WTF::StringImpl"* %649 to i64
  br label %819

651:                                              ; preds = %54
  br i1 %55, label %656, label %652, !prof !3

652:                                              ; preds = %651
  %653 = icmp slt i32 %1, 0
  %654 = sub nsw i32 0, %1
  %655 = select i1 %653, i32 %654, i32 %1
  br label %656

656:                                              ; preds = %651, %652
  %657 = phi i32 [ %655, %652 ], [ 2147483647, %651 ]
  %658 = tail call %"class.WTF::StringImpl"* @_ZN5blink16list_marker_text7GetTextENS_14EListStyleTypeEi(i32 40, i32 %657) #10
  %659 = ptrtoint %"class.WTF::StringImpl"* %658 to i64
  br label %819

660:                                              ; preds = %54
  br i1 %55, label %665, label %661, !prof !3

661:                                              ; preds = %660
  %662 = icmp slt i32 %1, 0
  %663 = sub nsw i32 0, %1
  %664 = select i1 %662, i32 %663, i32 %1
  br label %665

665:                                              ; preds = %660, %661
  %666 = phi i32 [ %664, %661 ], [ 2147483647, %660 ]
  %667 = tail call %"class.WTF::StringImpl"* @_ZN5blink16list_marker_text7GetTextENS_14EListStyleTypeEi(i32 42, i32 %666) #10
  %668 = ptrtoint %"class.WTF::StringImpl"* %667 to i64
  br label %819

669:                                              ; preds = %54
  br i1 %55, label %674, label %670, !prof !3

670:                                              ; preds = %669
  %671 = icmp slt i32 %1, 0
  %672 = sub nsw i32 0, %1
  %673 = select i1 %671, i32 %672, i32 %1
  br label %674

674:                                              ; preds = %669, %670
  %675 = phi i32 [ %673, %670 ], [ 2147483647, %669 ]
  %676 = tail call %"class.WTF::StringImpl"* @_ZN5blink16list_marker_text7GetTextENS_14EListStyleTypeEi(i32 41, i32 %675) #10
  %677 = ptrtoint %"class.WTF::StringImpl"* %676 to i64
  br label %819

678:                                              ; preds = %54
  %679 = icmp ugt i32 %56, 99999999
  br i1 %679, label %819, label %680

680:                                              ; preds = %678
  %681 = tail call %"class.WTF::StringImpl"* @_ZN5blink16list_marker_text7GetTextENS_14EListStyleTypeEi(i32 45, i32 %56) #10
  %682 = ptrtoint %"class.WTF::StringImpl"* %681 to i64
  br label %819

683:                                              ; preds = %54
  %684 = icmp ugt i32 %56, 99999999
  br i1 %684, label %819, label %685

685:                                              ; preds = %683
  %686 = tail call %"class.WTF::StringImpl"* @_ZN5blink16list_marker_text7GetTextENS_14EListStyleTypeEi(i32 46, i32 %56) #10
  %687 = ptrtoint %"class.WTF::StringImpl"* %686 to i64
  br label %819

688:                                              ; preds = %54
  %689 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %689)
  %690 = icmp eq i32 %56, 0
  br i1 %690, label %691, label %693

691:                                              ; preds = %688
  %692 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %692, align 8
  br label %815

693:                                              ; preds = %688
  %694 = icmp ult i32 %56, 10
  br i1 %694, label %695, label %699

695:                                              ; preds = %693
  %696 = add nsw i32 %56, -1
  %697 = zext i32 %696 to i64
  %698 = getelementptr inbounds [9 x i16], [9 x i16]* @_ZZN5blink12_GLOBAL__N_124EthiopicNumericAlgorithmEjE5units, i64 0, i64 %697
  call void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"* nonnull %8, i16* %698, i32 1) #10
  br label %815

699:                                              ; preds = %693
  %700 = bitcast %"class.WTF::Vector.234"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %700) #10
  %701 = getelementptr inbounds %"class.WTF::Vector.234", %"class.WTF::Vector.234"* %9, i64 0, i32 0, i32 0, i32 0
  %702 = getelementptr inbounds %"class.WTF::Vector.234", %"class.WTF::Vector.234"* %9, i64 0, i32 0, i32 0, i32 1
  %703 = getelementptr inbounds %"class.WTF::Vector.234", %"class.WTF::Vector.234"* %9, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %700, i8 0, i64 16, i1 false) #10
  br label %737

704:                                              ; preds = %812
  %705 = load i16*, i16** %701, align 8
  %706 = load i32, i32* %703, align 4
  %707 = icmp eq i32 %706, 0
  br i1 %707, label %724, label %708

708:                                              ; preds = %704
  %709 = zext i32 %706 to i64
  %710 = getelementptr inbounds i16, i16* %705, i64 %709
  %711 = getelementptr inbounds i16, i16* %710, i64 -1
  %712 = icmp ugt i16* %711, %705
  br i1 %712, label %713, label %724

713:                                              ; preds = %708, %713
  %714 = phi i16* [ %719, %713 ], [ %711, %708 ]
  %715 = phi i16* [ %718, %713 ], [ %705, %708 ]
  %716 = load i16, i16* %715, align 2
  %717 = load i16, i16* %714, align 2
  store i16 %717, i16* %715, align 2
  store i16 %716, i16* %714, align 2
  %718 = getelementptr inbounds i16, i16* %715, i64 1
  %719 = getelementptr inbounds i16, i16* %714, i64 -1
  %720 = icmp ult i16* %718, %719
  br i1 %720, label %713, label %721

721:                                              ; preds = %713
  %722 = load i32, i32* %703, align 4
  %723 = load i16*, i16** %701, align 8
  br label %724

724:                                              ; preds = %721, %708, %704
  %725 = phi i16* [ %723, %721 ], [ %705, %704 ], [ %705, %708 ]
  %726 = phi i32 [ %722, %721 ], [ 0, %704 ], [ %706, %708 ]
  %727 = add i32 %726, -1
  store i32 %727, i32* %703, align 4
  call void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"* nonnull %8, i16* %725, i32 %727) #10
  %728 = load i16*, i16** %701, align 8
  %729 = icmp eq i16* %728, null
  %730 = bitcast i16* %728 to i8*
  br i1 %729, label %736, label %731, !prof !4

731:                                              ; preds = %724
  %732 = load i32, i32* %703, align 4
  %733 = icmp eq i32 %732, 0
  br i1 %733, label %735, label %734, !prof !3

734:                                              ; preds = %731
  store i32 0, i32* %703, align 4
  br label %735

735:                                              ; preds = %734, %731
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %730) #10
  store i16* null, i16** %701, align 8
  br label %736

736:                                              ; preds = %735, %724
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %700) #10
  br label %815

737:                                              ; preds = %812, %699
  %738 = phi i1 [ false, %699 ], [ %813, %812 ]
  %739 = phi i32 [ %56, %699 ], [ %741, %812 ]
  %740 = urem i32 %739, 100
  %741 = udiv i32 %739, 100
  br i1 %738, label %753, label %742

742:                                              ; preds = %737
  %743 = load i32, i32* %703, align 4
  %744 = load i32, i32* %702, align 8
  %745 = icmp eq i32 %743, %744
  br i1 %745, label %752, label %746, !prof !3

746:                                              ; preds = %742
  %747 = load i16*, i16** %701, align 8
  %748 = zext i32 %743 to i64
  %749 = getelementptr inbounds i16, i16* %747, i64 %748
  store i16 4988, i16* %749, align 2
  %750 = load i32, i32* %703, align 4
  %751 = add i32 %750, 1
  store i32 %751, i32* %703, align 4
  br label %766

752:                                              ; preds = %742
  call void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKDsEEvOT_(%"class.WTF::Vector.234"* nonnull %9, i16* nonnull dereferenceable(2) @_ZN3WTF7unicodeL35kEthiopicNumberTenThousandCharacterE) #10
  br label %766

753:                                              ; preds = %737
  %754 = icmp eq i32 %740, 0
  br i1 %754, label %812, label %755

755:                                              ; preds = %753
  %756 = load i32, i32* %703, align 4
  %757 = load i32, i32* %702, align 8
  %758 = icmp eq i32 %756, %757
  br i1 %758, label %765, label %759, !prof !3

759:                                              ; preds = %755
  %760 = load i16*, i16** %701, align 8
  %761 = zext i32 %756 to i64
  %762 = getelementptr inbounds i16, i16* %760, i64 %761
  store i16 4987, i16* %762, align 2
  %763 = load i32, i32* %703, align 4
  %764 = add i32 %763, 1
  store i32 %764, i32* %703, align 4
  br label %768

765:                                              ; preds = %755
  call void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKDsEEvOT_(%"class.WTF::Vector.234"* nonnull %9, i16* nonnull dereferenceable(2) @_ZN3WTF7unicodeL31kEthiopicNumberHundredCharacterE) #10
  br label %768

766:                                              ; preds = %752, %746
  %767 = icmp eq i32 %740, 0
  br i1 %767, label %812, label %768

768:                                              ; preds = %766, %765, %759
  %769 = icmp ult i32 %739, 100
  %770 = icmp eq i32 %740, 1
  %771 = or i1 %738, %769
  %772 = and i1 %770, %771
  br i1 %772, label %812, label %773

773:                                              ; preds = %768
  %774 = trunc i32 %740 to i8
  %775 = urem i8 %774, 10
  %776 = udiv i8 %774, 10
  %777 = icmp eq i8 %775, 0
  br i1 %777, label %794, label %778

778:                                              ; preds = %773
  %779 = zext i8 %775 to i64
  %780 = add nuw nsw i64 %779, 4294967295
  %781 = and i64 %780, 4294967295
  %782 = getelementptr inbounds [9 x i16], [9 x i16]* @_ZZN5blink12_GLOBAL__N_124EthiopicNumericAlgorithmEjE5units, i64 0, i64 %781
  %783 = load i32, i32* %703, align 4
  %784 = load i32, i32* %702, align 8
  %785 = icmp eq i32 %783, %784
  br i1 %785, label %793, label %786, !prof !3

786:                                              ; preds = %778
  %787 = load i16*, i16** %701, align 8
  %788 = zext i32 %783 to i64
  %789 = getelementptr inbounds i16, i16* %787, i64 %788
  %790 = load i16, i16* %782, align 2
  store i16 %790, i16* %789, align 2
  %791 = load i32, i32* %703, align 4
  %792 = add i32 %791, 1
  store i32 %792, i32* %703, align 4
  br label %794

793:                                              ; preds = %778
  call void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKDsEEvOT_(%"class.WTF::Vector.234"* nonnull %9, i16* dereferenceable(2) %782) #10
  br label %794

794:                                              ; preds = %793, %786, %773
  %795 = icmp ugt i32 %740, 9
  br i1 %795, label %796, label %812

796:                                              ; preds = %794
  %797 = zext i8 %776 to i64
  %798 = add nuw nsw i64 %797, 4294967295
  %799 = and i64 %798, 4294967295
  %800 = getelementptr inbounds [9 x i16], [9 x i16]* @_ZZN5blink12_GLOBAL__N_124EthiopicNumericAlgorithmEjE4tens, i64 0, i64 %799
  %801 = load i32, i32* %703, align 4
  %802 = load i32, i32* %702, align 8
  %803 = icmp eq i32 %801, %802
  br i1 %803, label %811, label %804, !prof !3

804:                                              ; preds = %796
  %805 = load i16*, i16** %701, align 8
  %806 = zext i32 %801 to i64
  %807 = getelementptr inbounds i16, i16* %805, i64 %806
  %808 = load i16, i16* %800, align 2
  store i16 %808, i16* %807, align 2
  %809 = load i32, i32* %703, align 4
  %810 = add i32 %809, 1
  store i32 %810, i32* %703, align 4
  br label %812

811:                                              ; preds = %796
  call void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKDsEEvOT_(%"class.WTF::Vector.234"* nonnull %9, i16* dereferenceable(2) %800) #10
  br label %812

812:                                              ; preds = %811, %804, %794, %768, %766, %753
  %813 = xor i1 %738, true
  %814 = icmp ult i32 %739, 100
  br i1 %814, label %704, label %737

815:                                              ; preds = %691, %695, %736
  %816 = bitcast %"class.WTF::String"* %8 to i64*
  %817 = load i64, i64* %816, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %689)
  br label %819

818:                                              ; preds = %54
  unreachable

819:                                              ; preds = %33, %685, %683, %680, %678, %612, %610, %36, %54, %46, %43, %41, %39, %85, %123, %211, %343, %421, %609, %620, %629, %638, %647, %656, %665, %674, %815
  %820 = phi i64 [ %817, %815 ], [ %677, %674 ], [ %668, %665 ], [ %659, %656 ], [ %650, %647 ], [ %641, %638 ], [ %632, %629 ], [ %623, %620 ], [ %600, %609 ], [ %412, %421 ], [ %344, %343 ], [ %202, %211 ], [ %115, %123 ], [ %81, %85 ], [ 0, %39 ], [ 0, %41 ], [ 0, %43 ], [ 0, %46 ], [ 0, %54 ], [ 0, %36 ], [ %614, %612 ], [ 0, %610 ], [ %682, %680 ], [ 0, %678 ], [ %687, %685 ], [ 0, %683 ], [ 0, %33 ]
  %821 = inttoptr i64 %820 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %821
}

declare i32 @_ZN5blink19NumGraphemeClustersERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %81, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  %10 = bitcast %"class.WTF::StringImpl"* %9 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, %10
  %14 = bitcast i8* %12 to i16*
  br i1 %13, label %15, label %20

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %4, %17
  %19 = select i1 %18, %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"* null
  br label %20

20:                                               ; preds = %6, %15
  %21 = phi %"class.WTF::StringImpl"* [ %19, %15 ], [ null, %6 ]
  %22 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %74

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %27 = load i8, i8* %26, align 1, !range !5
  %28 = icmp eq i8 %27, 0
  %29 = icmp ne %"class.WTF::StringImpl"* %21, null
  %30 = and i1 %29, %28
  br i1 %30, label %31, label %74

31:                                               ; preds = %25
  %32 = ptrtoint %"class.WTF::StringImpl"* %21 to i64
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %49

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i33
  %41 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %40, i33 1) #10
  %42 = extractvalue { i33, i1 } %41, 1
  %43 = extractvalue { i33, i1 } %41, 0
  %44 = icmp slt i33 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %46, label %47, !prof !3

46:                                               ; preds = %37
  tail call void @llvm.trap() #10
  unreachable

47:                                               ; preds = %37
  %48 = trunc i33 %43 to i32
  store i32 %48, i32* %38, align 4
  br label %49

49:                                               ; preds = %31, %47
  %50 = bitcast %"class.WTF::StringBuilder"* %0 to i64*
  %51 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 0, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  store i64 %32, i64* %50, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %67, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %52) #10
  br label %67

67:                                               ; preds = %66, %63, %49
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  store i32 %69, i32* %22, align 8
  %70 = load atomic i32, i32* %33 monotonic, align 4
  %71 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %72 = trunc i32 %70 to i8
  %73 = and i8 %72, 1
  store i8 %73, i8* %71, align 4
  br label %81

74:                                               ; preds = %20, %25
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %80, label %79

79:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* %0, i8* %12, i32 %4) #10
  br label %81

80:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"* %0, i16* %14, i32 %4) #10
  br label %81

81:                                               ; preds = %67, %80, %79, %2
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink12CounterStyle15IndexesToStringERKN3WTF6VectorIjLj0ENS1_18PartitionAllocatorEEE(%"class.blink::CounterStyle"*, %"class.WTF::Vector.9"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::StringBuilder", align 8
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %1, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %62, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.WTF::StringBuilder"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %9) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 48, i1 false)
  %10 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %10, align 8
  %11 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  store i8 0, i8* %12, align 8
  %13 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 2
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 3
  store i8 1, i8* %14, align 4
  %15 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 4
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = zext i32 %6 to i64
  %19 = getelementptr inbounds i32, i32* %17, i64 %18
  %20 = bitcast %"class.WTF::StringView"* %4 to i8*
  %21 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 9
  %22 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 0
  %23 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %24 = bitcast i8** %23 to %"class.WTF::StringImpl"**
  %25 = bitcast %"class.WTF::StringView"* %4 to i64*
  %26 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  br label %45

27:                                               ; preds = %58
  %28 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %3) #10
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %3) #10
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %30 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %30, label %44, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  br i1 %35, label %38, label %40

38:                                               ; preds = %31
  %39 = add i32 %37, -1
  store i32 %39, i32* %36, align 4
  br label %40

40:                                               ; preds = %38, %31
  %41 = phi i32 [ %39, %38 ], [ %37, %31 ]
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %29) #10
  br label %44

44:                                               ; preds = %27, %40, %43
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %9) #10
  br label %62

45:                                               ; preds = %8, %58
  %46 = phi i32* [ %17, %8 ], [ %60, %58 ]
  %47 = load i32, i32* %46, align 4
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #10
  %48 = call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %21, i32 %47) #10
  %49 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %48, i64 0, i32 0, i32 0
  %50 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %49, align 8
  %51 = icmp eq %"class.WTF::StringImpl"* %50, null
  br i1 %51, label %52, label %54

52:                                               ; preds = %45
  store i8* null, i8** %23, align 8
  %53 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %53, i64* %25, align 8
  br label %58

54:                                               ; preds = %45
  store %"class.WTF::StringImpl"* %50, %"class.WTF::StringImpl"** %22, align 8
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %50, i64 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %50, i64 1
  store %"class.WTF::StringImpl"* %57, %"class.WTF::StringImpl"** %24, align 8
  br label %58

58:                                               ; preds = %52, %54
  %59 = phi i32 [ %56, %54 ], [ 0, %52 ]
  store i32 %59, i32* %26, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #10
  %60 = getelementptr inbounds i32, i32* %46, i64 1
  %61 = icmp eq i32* %60, %19
  br i1 %61, label %27, label %45

62:                                               ; preds = %2, %44
  %63 = phi %"class.WTF::StringImpl"* [ %28, %44 ], [ null, %2 ]
  ret %"class.WTF::StringImpl"* %63
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CounterStyle28TraverseAndMarkDirtyIfNeededERNS_11HeapHashSetINS_6MemberIS0_EEN3WTF10MemberHashIS0_EENS4_10HashTraitsIS3_EEEE(%"class.blink::CounterStyle"*, %"class.blink::HeapHashSet"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::CounterStyle"*, align 8
  %4 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 19
  %5 = load i8, i8* %4, align 8, !range !5
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %112

7:                                                ; preds = %2
  %8 = ptrtoint %"class.blink::CounterStyle"* %0 to i64
  %9 = getelementptr inbounds %"class.blink::HeapHashSet", %"class.blink::HeapHashSet"* %1, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %9, align 8
  %11 = icmp eq %"class.blink::Member.7"* %10, null
  br i1 %11, label %73, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.blink::HeapHashSet", %"class.blink::HeapHashSet"* %1, i64 0, i32 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = add i32 %14, -1
  %16 = zext i32 %15 to i64
  %17 = shl i64 %8, 32
  %18 = xor i64 %17, -1
  %19 = add i64 %18, %8
  %20 = lshr i64 %19, 22
  %21 = xor i64 %20, %19
  %22 = shl i64 %21, 13
  %23 = xor i64 %22, -1
  %24 = add i64 %21, %23
  %25 = lshr i64 %24, 8
  %26 = xor i64 %25, %24
  %27 = mul i64 %26, 9
  %28 = lshr i64 %27, 15
  %29 = xor i64 %28, %27
  %30 = shl i64 %29, 27
  %31 = xor i64 %30, -1
  %32 = add i64 %29, %31
  %33 = lshr i64 %32, 31
  %34 = xor i64 %33, %32
  %35 = trunc i64 %34 to i32
  %36 = and i32 %15, %35
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %10, i64 %37
  %39 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** %39, align 8
  %41 = icmp eq %"class.blink::CounterStyle"* %40, %0
  br i1 %41, label %70, label %42

42:                                               ; preds = %12
  %43 = xor i32 %35, -1
  %44 = lshr i32 %35, 23
  %45 = add i32 %44, %43
  %46 = shl i32 %45, 12
  %47 = xor i32 %46, %45
  %48 = lshr i32 %47, 7
  %49 = xor i32 %48, %47
  %50 = shl i32 %49, 2
  %51 = xor i32 %50, %49
  %52 = lshr i32 %51, 20
  %53 = xor i32 %52, %51
  %54 = or i32 %53, 1
  %55 = zext i32 %54 to i64
  br label %56

56:                                               ; preds = %61, %42
  %57 = phi %"class.blink::CounterStyle"* [ %40, %42 ], [ %68, %61 ]
  %58 = phi i64 [ %37, %42 ], [ %65, %61 ]
  %59 = phi i64 [ 0, %42 ], [ %63, %61 ]
  %60 = icmp eq %"class.blink::CounterStyle"* %57, null
  br i1 %60, label %73, label %61

61:                                               ; preds = %56
  %62 = icmp eq i64 %59, 0
  %63 = select i1 %62, i64 %55, i64 %59
  %64 = add i64 %63, %58
  %65 = and i64 %64, %16
  %66 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %10, i64 %65
  %67 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %66, i64 0, i32 0, i32 0
  %68 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** %67, align 8
  %69 = icmp eq %"class.blink::CounterStyle"* %68, %0
  br i1 %69, label %70, label %56

70:                                               ; preds = %61, %12
  %71 = phi %"class.blink::Member.7"* [ %38, %12 ], [ %66, %61 ]
  %72 = icmp eq %"class.blink::Member.7"* %71, null
  br i1 %72, label %73, label %112

73:                                               ; preds = %56, %70, %7
  %74 = bitcast %"class.blink::CounterStyle"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #10
  store %"class.blink::CounterStyle"* %0, %"class.blink::CounterStyle"** %3, align 8
  %75 = getelementptr inbounds %"class.blink::HeapHashSet", %"class.blink::HeapHashSet"* %1, i64 0, i32 0, i32 0
  %76 = call { %"class.blink::Member.7"*, i8 } @_ZN3WTF9HashTableIN5blink6MemberINS1_12CounterStyleEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE6insertINS_22IdentityHashTranslatorIS7_S9_SA_EERKPS3_SF_EENS_18HashTableAddResultISB_S4_EEOT0_OT1_(%"class.WTF::HashTable"* %75, %"class.blink::CounterStyle"** nonnull dereferenceable(8) %3, %"class.blink::CounterStyle"** nonnull dereferenceable(8) %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #10
  %77 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 21
  %78 = load i8, i8* %77, align 2, !range !5
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %80, label %88

80:                                               ; preds = %73
  %81 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 1
  %82 = load i32, i32* %81, align 8
  %83 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 0, i32 0, i32 0
  %84 = load %"class.blink::StyleRuleCounterStyle"*, %"class.blink::StyleRuleCounterStyle"** %83, align 8
  %85 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %84, i64 0, i32 13
  %86 = load i32, i32* %85, align 8
  %87 = icmp eq i32 %82, %86
  br i1 %87, label %90, label %88

88:                                               ; preds = %80, %73
  %89 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 22
  store i8 1, i8* %89, align 1
  br label %112

90:                                               ; preds = %80
  %91 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 4, i32 0, i32 0
  %92 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** %91, align 8
  %93 = icmp eq %"class.blink::CounterStyle"* %92, null
  br i1 %93, label %101, label %94

94:                                               ; preds = %90
  call void @_ZN5blink12CounterStyle28TraverseAndMarkDirtyIfNeededERNS_11HeapHashSetINS_6MemberIS0_EEN3WTF10MemberHashIS0_EENS4_10HashTraitsIS3_EEEE(%"class.blink::CounterStyle"* nonnull %92, %"class.blink::HeapHashSet"* dereferenceable(24) %1)
  %95 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** %91, align 8
  %96 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %95, i64 0, i32 22
  %97 = load i8, i8* %96, align 1, !range !5
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %101, label %99

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 22
  store i8 1, i8* %100, align 1
  br label %112

101:                                              ; preds = %94, %90
  %102 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 6, i32 0, i32 0
  %103 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** %102, align 8
  %104 = icmp eq %"class.blink::CounterStyle"* %103, null
  br i1 %104, label %112, label %105

105:                                              ; preds = %101
  call void @_ZN5blink12CounterStyle28TraverseAndMarkDirtyIfNeededERNS_11HeapHashSetINS_6MemberIS0_EEN3WTF10MemberHashIS0_EENS4_10HashTraitsIS3_EEEE(%"class.blink::CounterStyle"* nonnull %103, %"class.blink::HeapHashSet"* dereferenceable(24) %1)
  %106 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** %102, align 8
  %107 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %106, i64 0, i32 22
  %108 = load i8, i8* %107, align 1, !range !5
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %112, label %110

110:                                              ; preds = %105
  %111 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 22
  store i8 1, i8* %111, align 1
  br label %112

112:                                              ; preds = %105, %101, %70, %2, %88, %99, %110
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink12CounterStyle5TraceEPNS_7VisitorE(%"class.blink::CounterStyle"* nocapture readonly, %"class.blink::Visitor"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::CounterStyle"* %0 to i64*
  %4 = load atomic i64, i64* %3 monotonic, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = inttoptr i64 %4 to %"class.blink::StyleRuleCounterStyle"*
  %8 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %7, i64 0, i32 0, i32 0
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* %8, i8* %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_21StyleRuleCounterStyleEE5TraceEPNS_7VisitorEPKv) #10
  br label %13

13:                                               ; preds = %2, %6
  %14 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 4
  %15 = bitcast %"class.blink::Member.7"* %14 to i64*
  %16 = load atomic i64, i64* %15 monotonic, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %13
  %19 = inttoptr i64 %16 to i8*
  %20 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %21 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %21, i64 5
  %23 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %22, align 8
  tail call void %23(%"class.blink::Visitor"* %1, i8* nonnull %19, i8* nonnull %19, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_12CounterStyleEE5TraceEPNS_7VisitorEPKv) #10
  br label %24

24:                                               ; preds = %13, %18
  %25 = getelementptr inbounds %"class.blink::CounterStyle", %"class.blink::CounterStyle"* %0, i64 0, i32 6
  %26 = bitcast %"class.blink::Member.7"* %25 to i64*
  %27 = load atomic i64, i64* %26 monotonic, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %35, label %29

29:                                               ; preds = %24
  %30 = inttoptr i64 %27 to i8*
  %31 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %32 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %32, i64 5
  %34 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %33, align 8
  tail call void %34(%"class.blink::Visitor"* %1, i8* nonnull %30, i8* nonnull %30, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_12CounterStyleEE5TraceEPNS_7VisitorEPKv) #10
  br label %35

35:                                               ; preds = %24, %29
  ret void
}

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"*, i8*, i64) unnamed_addr #4

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #4

declare double @_ZNK5blink17CSSPrimitiveValue14GetDoubleValueEv(%"class.blink::CSSPrimitiveValue"*) local_unnamed_addr #4

declare void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"*, i8*, i32) local_unnamed_addr #4

declare void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"*, i16*, i32) local_unnamed_addr #4

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 536346624
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536346624) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 2
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIjEEvOT_(%"class.WTF::Vector.9"*, i32* dereferenceable(4)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = tail call i32* @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE14ExpandCapacityEjPj(%"class.WTF::Vector.9"* %0, i32 %5, i32* %1)
  %7 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = load i32*, i32** %7, align 8
  %9 = load i32, i32* %3, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i32, i32* %8, i64 %10
  %12 = load i32, i32* %6, align 4
  store i32 %12, i32* %11, align 4
  %13 = load i32, i32* %3, align 4
  %14 = add i32 %13, 1
  store i32 %14, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE14ExpandCapacityEjPj(%"class.WTF::Vector.9"*, i32, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8
  %6 = icmp ugt i32* %5, %2
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i32, i32* %5, i64 %10
  %12 = icmp ugt i32* %11, %2
  br i1 %12, label %53, label %13

13:                                               ; preds = %7, %3
  %14 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %1
  %22 = select i1 %21, i32 %20, i32 %1
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %98, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq i32* %5, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64 %26) #10
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #10
  br i1 %25, label %29, label %34

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 2
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  br label %98

34:                                               ; preds = %24
  %35 = lshr i64 %27, 2
  %36 = ptrtoint i8* %28 to i64
  %37 = load i32*, i32** %4, align 8
  %38 = icmp ne i8* %28, null
  %39 = icmp ne i32* %37, null
  %40 = and i1 %38, %39
  %41 = bitcast i32* %37 to i8*
  br i1 %40, label %42, label %49, !prof !4

42:                                               ; preds = %34
  %43 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %28, i8* nonnull align 4 %41, i64 %46, i1 false) #10
  %47 = bitcast %"class.WTF::Vector.9"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %42, %34
  %50 = phi i8* [ %48, %42 ], [ %41, %34 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #10
  %51 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 %36, i64* %51 monotonic, align 8
  %52 = trunc i64 %35 to i32
  store i32 %52, i32* %14, align 8
  br label %98

53:                                               ; preds = %7
  %54 = ptrtoint i32* %2 to i64
  %55 = ptrtoint i32* %5 to i64
  %56 = sub i64 %54, %55
  %57 = ashr exact i64 %56, 2
  %58 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 1
  %59 = load i32, i32* %58, align 8
  %60 = lshr i32 %59, 2
  %61 = add i32 %59, 1
  %62 = add i32 %61, %60
  %63 = icmp ugt i32 %62, 4
  %64 = select i1 %63, i32 %62, i32 4
  %65 = icmp ugt i32 %64, %1
  %66 = select i1 %65, i32 %64, i32 %1
  %67 = icmp ult i32 %59, %66
  br i1 %67, label %68, label %95, !prof !4

68:                                               ; preds = %53
  %69 = icmp eq i32* %5, null
  %70 = zext i32 %66 to i64
  %71 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64 %70) #10
  %72 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %71, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #10
  %73 = ptrtoint i8* %72 to i64
  br i1 %69, label %74, label %76

74:                                               ; preds = %68
  %75 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 %73, i64* %75 monotonic, align 8
  br label %91

76:                                               ; preds = %68
  %77 = load i32*, i32** %4, align 8
  %78 = icmp ne i8* %72, null
  %79 = icmp ne i32* %77, null
  %80 = and i1 %78, %79
  %81 = bitcast i32* %77 to i8*
  br i1 %80, label %82, label %88, !prof !4

82:                                               ; preds = %76
  %83 = load i32, i32* %8, align 4
  %84 = zext i32 %83 to i64
  %85 = shl nuw nsw i64 %84, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %72, i8* nonnull align 4 %81, i64 %85, i1 false) #10
  %86 = bitcast %"class.WTF::Vector.9"* %0 to i8**
  %87 = load i8*, i8** %86, align 8
  br label %88

88:                                               ; preds = %82, %76
  %89 = phi i8* [ %87, %82 ], [ %81, %76 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %89) #10
  %90 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 %73, i64* %90 monotonic, align 8
  br label %91

91:                                               ; preds = %88, %74
  %92 = lshr i64 %71, 2
  %93 = trunc i64 %92 to i32
  store i32 %93, i32* %58, align 8
  %94 = bitcast i8* %72 to i32*
  br label %95

95:                                               ; preds = %91, %53
  %96 = phi i32* [ %5, %53 ], [ %94, %91 ]
  %97 = getelementptr inbounds i32, i32* %96, i64 %57
  br label %98

98:                                               ; preds = %49, %29, %13, %95
  %99 = phi i32* [ %97, %95 ], [ %2, %13 ], [ %2, %29 ], [ %2, %49 ]
  ret i32* %99
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZNK3WTF6VectorIjLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.9"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #10
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i8* %14, i8* %15) #10
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %23 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  ret i32* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE6AppendIjEEvPKT_j(%"class.WTF::Vector.9"*, i32*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, %2
  %10 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %13, label %16

13:                                               ; preds = %3
  %14 = tail call i32* @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE14ExpandCapacityEjPj(%"class.WTF::Vector.9"* %0, i32 %9, i32* %1) #10
  %15 = load i32, i32* %7, align 4
  br label %16

16:                                               ; preds = %13, %3
  %17 = phi i32 [ %15, %13 ], [ %8, %3 ]
  %18 = phi i32* [ %14, %13 ], [ %1, %3 ]
  %19 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #10
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %9, %17
  br i1 %22, label %24, label %23

23:                                               ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %20, align 8
  br label %33

24:                                               ; preds = %16
  %25 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i64 0, i64 0), i8* %25, i8* %26) #10
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %20, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1907, %"class.logging::CheckOpResult"* nonnull %5) #10
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #10
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #10
  %34 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  %35 = load i32*, i32** %34, align 8
  %36 = load i32, i32* %7, align 4
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i32, i32* %35, i64 %37
  %39 = icmp ne i32* %38, null
  %40 = icmp ne i32* %18, null
  %41 = and i1 %40, %39
  br i1 %41, label %42, label %47, !prof !4

42:                                               ; preds = %33
  %43 = zext i32 %2 to i64
  %44 = bitcast i32* %38 to i8*
  %45 = bitcast i32* %18 to i8*
  %46 = shl nuw nsw i64 %43, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %44, i8* nonnull align 4 %45, i64 %46, i1 false) #10
  br label %47

47:                                               ; preds = %33, %42
  store i32 %9, i32* %7, align 4
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN5blink16list_marker_text7GetTextENS_14EListStyleTypeEi(i32, i32) local_unnamed_addr #4

declare void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"*, i16*, i32) unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKDsEEvOT_(%"class.WTF::Vector.234"*, i16* dereferenceable(2)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.234", %"class.WTF::Vector.234"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.234", %"class.WTF::Vector.234"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = icmp ugt i16* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i16, i16* %7, i64 %10
  %12 = icmp ugt i16* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.234", %"class.WTF::Vector.234"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq i16* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %26) #10
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #10
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.234"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 1
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to i16*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 1
  %37 = ptrtoint i8* %28 to i64
  %38 = load i16*, i16** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne i16* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast i16* %38 to i8*
  br i1 %41, label %43, label %49, !prof !4

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %28, i8* nonnull align 2 %42, i64 %46, i1 false) #10
  %47 = bitcast %"class.WTF::Vector.234"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #10
  %51 = bitcast %"class.WTF::Vector.234"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to i16*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint i16* %1 to i64
  %56 = ptrtoint i16* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 1
  %59 = getelementptr inbounds %"class.WTF::Vector.234", %"class.WTF::Vector.234"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !4

69:                                               ; preds = %54
  %70 = icmp eq i16* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %71) #10
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #10
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.234"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load i16*, i16** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne i16* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast i16* %78 to i8*
  br i1 %81, label %83, label %89, !prof !4

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %73, i8* nonnull align 2 %82, i64 %86, i1 false) #10
  %87 = bitcast %"class.WTF::Vector.234"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #10
  %91 = bitcast %"class.WTF::Vector.234"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 1
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to i16*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi i16* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds i16, i16* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi i16* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi i16* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds i16, i16* %100, i64 %103
  %105 = load i16, i16* %101, align 2
  store i16 %105, i16* %104, align 2
  %106 = load i32, i32* %3, align 4
  %107 = add i32 %106, 1
  store i32 %107, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

declare %"class.blink::CounterStyleMap"* @_ZN5blink15CounterStyleMap20GetUACounterStyleMapEv() local_unnamed_addr #4

declare %"class.blink::CounterStyle"* @_ZNK5blink15CounterStyleMap28FindCounterStyleAcrossScopesERKN3WTF12AtomicStringE(%"class.blink::CounterStyleMap"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_12CounterStyleELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = alloca %"class.base::Location", align 8
  %4 = bitcast i8* %1 to %"class.blink::CounterStyle"**
  %5 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** %4, align 8
  %6 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #10
  call void @_ZN4base8LocationC1Ev(%"class.base::Location"* nonnull %3) #10
  %7 = icmp eq %"class.blink::CounterStyle"* %5, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.blink::CounterStyle"* %5 to i8*
  %10 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)***
  %11 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)** %11, i64 8
  %13 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)** %12, align 8
  call void %13(%"class.blink::Visitor"* %0, i8* nonnull %9, i8* nonnull %9, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_12CounterStyleEE5TraceEPNS_7VisitorEPKv, %"class.base::Location"* nonnull dereferenceable(32) %3) #10
  br label %14

14:                                               ; preds = %2, %8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10
  ret void
}

declare void @_ZN4base8LocationC1Ev(%"class.base::Location"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_12CounterStyleEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to i64*
  %4 = load atomic i64, i64* %3 monotonic, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = inttoptr i64 %4 to %"class.blink::StyleRuleCounterStyle"*
  %8 = getelementptr inbounds %"class.blink::StyleRuleCounterStyle", %"class.blink::StyleRuleCounterStyle"* %7, i64 0, i32 0, i32 0
  %9 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %0, i8* %8, i8* %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_21StyleRuleCounterStyleEE5TraceEPNS_7VisitorEPKv) #10
  br label %13

13:                                               ; preds = %6, %2
  %14 = getelementptr inbounds i8, i8* %1, i64 24
  %15 = bitcast i8* %14 to i64*
  %16 = load atomic i64, i64* %15 monotonic, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %13
  %19 = inttoptr i64 %16 to i8*
  %20 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %21 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %21, i64 5
  %23 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %22, align 8
  tail call void %23(%"class.blink::Visitor"* %0, i8* nonnull %19, i8* nonnull %19, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_12CounterStyleEE5TraceEPNS_7VisitorEPKv) #10
  br label %24

24:                                               ; preds = %18, %13
  %25 = getelementptr inbounds i8, i8* %1, i64 40
  %26 = bitcast i8* %25 to i64*
  %27 = load atomic i64, i64* %26 monotonic, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %35, label %29

29:                                               ; preds = %24
  %30 = inttoptr i64 %27 to i8*
  %31 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %32 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %32, i64 5
  %34 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %33, align 8
  tail call void %34(%"class.blink::Visitor"* %0, i8* nonnull %30, i8* nonnull %30, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_12CounterStyleEE5TraceEPNS_7VisitorEPKv) #10
  br label %35

35:                                               ; preds = %24, %29
  ret void
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #4

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #4

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #4

declare void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_12CounterStyleEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #10
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !3

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #10
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_12CounterStyleEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_12CounterStyleEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_12CounterStyleEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink12CounterStyleEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"*, %"class.blink::ThreadState"*, i64, i32, i32, i8*) local_unnamed_addr #9 comdat align 2 {
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = sext i32 %3 to i64
  %11 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %0, i64 0, i32 19, i64 %10
  %12 = bitcast %"class.blink::BaseArena"** %11 to %"class.blink::NormalPageArena"**
  %13 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %12, align 8
  %14 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #10
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %15, align 8
  %16 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = icmp ult i64 %2, -8
  br i1 %17, label %18, label %19

18:                                               ; preds = %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  store i8* null, i8** %15, align 8
  br label %29

19:                                               ; preds = %6
  %20 = add nsw i64 %2, 8
  %21 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %20) #10
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %7, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* %21, i8* %22) #10
  %23 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  store i8* %24, i8** %15, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %19
  %27 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.10, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %8) #10
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #10
  br label %29

29:                                               ; preds = %18, %19, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #10
  %30 = add i64 %2, 15
  %31 = and i64 %30, -8
  %32 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %33, %31
  br i1 %34, label %67, label %35, !prof !3

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %31
  store i8* %38, i8** %36, align 8
  %39 = sub i64 %33, %31
  store i64 %39, i64* %32, align 8
  %40 = bitcast i8* %37 to i32*
  store i32 0, i32* %40, align 4
  %41 = getelementptr inbounds i8, i8* %37, i64 4
  %42 = bitcast i8* %41 to i16*
  %43 = trunc i32 %4 to i16
  %44 = shl i16 %43, 2
  store atomic i16 %44, i16* %42 monotonic, align 2
  %45 = lshr exact i64 %31, 1
  %46 = trunc i64 %45 to i16
  %47 = getelementptr inbounds i8, i8* %37, i64 6
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = ptrtoint i8* %37 to i64
  %50 = and i64 %49, -131072
  %51 = inttoptr i64 %50 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 4400
  %53 = bitcast i8* %52 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %54 = bitcast i8* %52 to i64*
  %55 = load i64, i64* %54, align 16
  %56 = sub i64 %49, %55
  %57 = lshr i64 %56, 3
  %58 = lshr i64 %56, 6
  %59 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %53, i64 0, i32 0, i32 1, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = trunc i64 %57 to i32
  %62 = and i32 %61, 7
  %63 = shl i32 1, %62
  %64 = trunc i32 %63 to i8
  %65 = or i8 %60, %64
  store atomic i8 %65, i8* %59 release, align 1
  %66 = getelementptr inbounds i8, i8* %37, i64 8
  br label %70

67:                                               ; preds = %29
  %68 = zext i32 %4 to i64
  %69 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %13, i64 %31, i64 %68) #10
  br label %70

70:                                               ; preds = %35, %67
  %71 = phi i8* [ %66, %35 ], [ %69, %67 ]
  ret i8* %71
}

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_12CounterStyleEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::CounterStyle"*
  tail call void @_ZN5blink12CounterStyleD2Ev(%"class.blink::CounterStyle"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_12CounterStyleEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIiEEvOT_(%"class.WTF::Vector.9"*, i32* dereferenceable(4)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = lshr i32 %7, 2
  %9 = add i32 %7, 1
  %10 = add i32 %9, %8
  %11 = icmp ugt i32 %10, 4
  %12 = select i1 %11, i32 %10, i32 4
  %13 = icmp ugt i32 %12, %5
  %14 = select i1 %13, i32 %12, i32 %5
  %15 = icmp ult i32 %7, %14
  %16 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  %17 = load i32*, i32** %16, align 8
  br i1 %15, label %18, label %45, !prof !4

18:                                               ; preds = %2
  %19 = icmp eq i32* %17, null
  %20 = zext i32 %14 to i64
  %21 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64 %20) #10
  %22 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %21, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #10
  %23 = ptrtoint i8* %22 to i64
  br i1 %19, label %24, label %26

24:                                               ; preds = %18
  %25 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 %23, i64* %25 monotonic, align 8
  br label %41

26:                                               ; preds = %18
  %27 = load i32*, i32** %16, align 8
  %28 = icmp ne i8* %22, null
  %29 = icmp ne i32* %27, null
  %30 = and i1 %28, %29
  %31 = bitcast i32* %27 to i8*
  br i1 %30, label %32, label %38, !prof !4

32:                                               ; preds = %26
  %33 = load i32, i32* %3, align 4
  %34 = zext i32 %33 to i64
  %35 = shl nuw nsw i64 %34, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %22, i8* nonnull align 4 %31, i64 %35, i1 false) #10
  %36 = bitcast %"class.WTF::Vector.9"* %0 to i8**
  %37 = load i8*, i8** %36, align 8
  br label %38

38:                                               ; preds = %32, %26
  %39 = phi i8* [ %37, %32 ], [ %31, %26 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %39) #10
  %40 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 %23, i64* %40 monotonic, align 8
  br label %41

41:                                               ; preds = %38, %24
  %42 = lshr i64 %21, 2
  %43 = trunc i64 %42 to i32
  store i32 %43, i32* %6, align 8
  %44 = bitcast i8* %22 to i32*
  br label %45

45:                                               ; preds = %41, %2
  %46 = phi i32* [ %17, %2 ], [ %44, %41 ]
  %47 = load i32, i32* %3, align 4
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i32, i32* %46, i64 %48
  %50 = load i32, i32* %1, align 4
  store i32 %50, i32* %49, align 4
  %51 = load i32, i32* %3, align 4
  %52 = add i32 %51, 1
  store i32 %52, i32* %3, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_(%"class.WTF::Vector"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %8 = icmp ugt %"class.WTF::String"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::String"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::String"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %26) #10
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #10
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.WTF::String"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.WTF::String"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !4

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #10
  %47 = bitcast %"class.WTF::Vector"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #10
  %51 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.WTF::String"* %1 to i64
  %56 = ptrtoint %"class.WTF::String"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !4

69:                                               ; preds = %54
  %70 = icmp eq %"class.WTF::String"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %71) #10
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #10
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.WTF::String"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.WTF::String"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !4

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #10
  %87 = bitcast %"class.WTF::Vector"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #10
  %91 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.WTF::String"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.WTF::String"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.WTF::String"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.WTF::String"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 %103
  %105 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %101, i64 0, i32 0, i32 0
  %106 = bitcast %"class.WTF::String"* %101 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %"class.WTF::String"* %104 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %105, align 8
  %109 = load i32, i32* %3, align 4
  %110 = add i32 %109, 1
  store i32 %110, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINSt3__14pairIiiEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector.14"*, %"struct.std::__1::pair"* dereferenceable(8)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.14", %"class.WTF::Vector.14"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.14", %"class.WTF::Vector.14"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %6, align 8
  %8 = icmp ugt %"struct.std::__1::pair"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %7, i64 %10
  %12 = icmp ugt %"struct.std::__1::pair"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.14", %"class.WTF::Vector.14"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq %"struct.std::__1::pair"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairIiiEEEEmm(i64 %26) #10
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__14pairIiiEEEEPKcv, i64 0, i64 0)) #10
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.14"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"struct.std::__1::pair"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"struct.std::__1::pair"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"struct.std::__1::pair"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !4

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %28, i8* nonnull align 4 %42, i64 %46, i1 false) #10
  %47 = bitcast %"class.WTF::Vector.14"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #10
  %51 = bitcast %"class.WTF::Vector.14"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"struct.std::__1::pair"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"struct.std::__1::pair"* %1 to i64
  %56 = ptrtoint %"struct.std::__1::pair"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector.14", %"class.WTF::Vector.14"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !4

69:                                               ; preds = %54
  %70 = icmp eq %"struct.std::__1::pair"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairIiiEEEEmm(i64 %71) #10
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__14pairIiiEEEEPKcv, i64 0, i64 0)) #10
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.14"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"struct.std::__1::pair"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"struct.std::__1::pair"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !4

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %73, i8* nonnull align 4 %82, i64 %86, i1 false) #10
  %87 = bitcast %"class.WTF::Vector.14"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #10
  %91 = bitcast %"class.WTF::Vector.14"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"struct.std::__1::pair"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"struct.std::__1::pair"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"struct.std::__1::pair"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"struct.std::__1::pair"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %100, i64 %103
  %105 = bitcast %"struct.std::__1::pair"* %101 to i64*
  %106 = bitcast %"struct.std::__1::pair"* %104 to i64*
  %107 = load i64, i64* %105, align 4
  store i64 %107, i64* %106, align 4
  %108 = load i32, i32* %3, align 4
  %109 = add i32 %108, 1
  store i32 %109, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairIiiEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #10
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i8* %14, i8* %15) #10
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::String"*, %"class.WTF::String"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %24, i64 %25
  ret %"class.WTF::String"* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.blink::Member.7"*, i8 } @_ZN3WTF9HashTableIN5blink6MemberINS1_12CounterStyleEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE6insertINS_22IdentityHashTranslatorIS7_S9_SA_EERKPS3_SF_EENS_18HashTableAddResultISB_S4_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.blink::CounterStyle"** dereferenceable(8), %"class.blink::CounterStyle"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %4, align 8
  %6 = icmp eq %"class.blink::Member.7"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.blink::Member.7"* @_ZN3WTF9HashTableIN5blink6MemberINS1_12CounterStyleEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"* %0, %"class.blink::Member.7"* null)
  %9 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.blink::Member.7"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = bitcast %"class.blink::CounterStyle"** %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = shl i64 %17, 32
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 22
  %22 = xor i64 %21, %20
  %23 = shl i64 %22, 13
  %24 = xor i64 %23, -1
  %25 = add i64 %22, %24
  %26 = lshr i64 %25, 8
  %27 = xor i64 %26, %25
  %28 = mul i64 %27, 9
  %29 = lshr i64 %28, 15
  %30 = xor i64 %29, %28
  %31 = shl i64 %30, 27
  %32 = xor i64 %31, -1
  %33 = add i64 %30, %32
  %34 = lshr i64 %33, 31
  %35 = xor i64 %34, %33
  %36 = trunc i64 %35 to i32
  %37 = and i32 %14, %36
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %11, i64 %38
  %40 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** %40, align 8
  %42 = icmp eq %"class.blink::CounterStyle"* %41, null
  %43 = inttoptr i64 %17 to %"class.blink::CounterStyle"*
  br i1 %42, label %86, label %44

44:                                               ; preds = %10
  %45 = xor i32 %36, -1
  %46 = lshr i32 %36, 23
  %47 = add i32 %46, %45
  %48 = shl i32 %47, 12
  %49 = xor i32 %48, %47
  %50 = lshr i32 %49, 7
  %51 = xor i32 %50, %49
  %52 = shl i32 %51, 2
  %53 = xor i32 %52, %51
  %54 = lshr i32 %53, 20
  %55 = xor i32 %54, %53
  %56 = or i32 %55, 1
  %57 = zext i32 %56 to i64
  br label %58

58:                                               ; preds = %44, %65
  %59 = phi %"class.blink::CounterStyle"* [ %41, %44 ], [ %74, %65 ]
  %60 = phi %"class.blink::Member.7"* [ %39, %44 ], [ %72, %65 ]
  %61 = phi %"class.blink::Member.7"* [ null, %44 ], [ %67, %65 ]
  %62 = phi i64 [ %38, %44 ], [ %71, %65 ]
  %63 = phi i64 [ 0, %44 ], [ %69, %65 ]
  %64 = icmp eq %"class.blink::CounterStyle"* %59, %43
  br i1 %64, label %115, label %65

65:                                               ; preds = %58
  %66 = icmp eq %"class.blink::CounterStyle"* %59, inttoptr (i64 -1 to %"class.blink::CounterStyle"*)
  %67 = select i1 %66, %"class.blink::Member.7"* %60, %"class.blink::Member.7"* %61
  %68 = icmp eq i64 %63, 0
  %69 = select i1 %68, i64 %57, i64 %63
  %70 = add i64 %69, %62
  %71 = and i64 %70, %15
  %72 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %11, i64 %71
  %73 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %72, i64 0, i32 0, i32 0
  %74 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** %73, align 8
  %75 = icmp eq %"class.blink::CounterStyle"* %74, null
  br i1 %75, label %76, label %58

76:                                               ; preds = %65
  %77 = icmp eq %"class.blink::Member.7"* %67, null
  br i1 %77, label %86, label %78

78:                                               ; preds = %76
  %79 = bitcast %"class.blink::Member.7"* %67 to i8*
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* nonnull %79, i64 8) #10
  %80 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %81 = load i32, i32* %80, align 8
  %82 = add i32 %81, 2147483647
  %83 = and i32 %82, 2147483647
  %84 = and i32 %81, -2147483648
  %85 = or i32 %83, %84
  store i32 %85, i32* %80, align 8
  br label %86

86:                                               ; preds = %10, %76, %78
  %87 = phi %"class.blink::Member.7"* [ %67, %78 ], [ %72, %76 ], [ %39, %10 ]
  %88 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** %2, align 8
  %89 = ptrtoint %"class.blink::CounterStyle"* %88 to i64
  %90 = bitcast %"class.blink::Member.7"* %87 to i64*
  store atomic i64 %89, i64* %90 monotonic, align 8
  %91 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %96, label %93

93:                                               ; preds = %86
  %94 = bitcast %"class.blink::CounterStyle"* %88 to i8*
  %95 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %94) #10
  br label %96

96:                                               ; preds = %86, %93
  %97 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %103, label %99

99:                                               ; preds = %96
  %100 = bitcast %"class.blink::Member.7"* %87 to i8**
  %101 = load i8*, i8** %100, align 8
  %102 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %101) #10
  br label %103

103:                                              ; preds = %96, %99
  %104 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %105 = load i32, i32* %104, align 4
  %106 = add i32 %105, 1
  store i32 %106, i32* %104, align 4
  %107 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %108 = load i32, i32* %107, align 8
  %109 = add i32 %108, %106
  %110 = shl i32 %109, 1
  %111 = load i32, i32* %12, align 8
  %112 = icmp ult i32 %110, %111
  br i1 %112, label %115, label %113

113:                                              ; preds = %103
  %114 = tail call %"class.blink::Member.7"* @_ZN3WTF9HashTableIN5blink6MemberINS1_12CounterStyleEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"* %0, %"class.blink::Member.7"* %87)
  br label %115

115:                                              ; preds = %58, %103, %113
  %116 = phi i8 [ 1, %103 ], [ 1, %113 ], [ 0, %58 ]
  %117 = phi %"class.blink::Member.7"* [ %87, %103 ], [ %114, %113 ], [ %60, %58 ]
  %118 = insertvalue { %"class.blink::Member.7"*, i8 } undef, %"class.blink::Member.7"* %117, 0
  %119 = insertvalue { %"class.blink::Member.7"*, i8 } %118, i8 %116, 1
  ret { %"class.blink::Member.7"*, i8 } %119
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::Member.7"* @_ZN3WTF9HashTableIN5blink6MemberINS1_12CounterStyleEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"*, %"class.blink::Member.7"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca i8, align 1
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %34, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = mul i32 %12, 6
  %14 = shl i32 %8, 1
  %15 = icmp ult i32 %13, %14
  br i1 %15, label %39, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %18, align 8
  %19 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19)
  %20 = icmp ugt i32 %14, %8
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  store i8* null, i8** %18, align 8
  br label %31

22:                                               ; preds = %16
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %14) #10
  %24 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8* %23, i8* %24) #10
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  store i8* %26, i8** %18, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %22
  %29 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.13, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %5) #10
  %30 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #10
  br label %31

31:                                               ; preds = %28, %22, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %32 = load i32, i32* %7, align 8
  %33 = icmp ult i32 %32, %14
  br i1 %33, label %34, label %39

34:                                               ; preds = %2, %31
  %35 = phi i32 [ %14, %31 ], [ 8, %2 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #10
  store i8 -86, i8* %4, align 1
  %36 = call %"class.blink::Member.7"* @_ZN3WTF9HashTableIN5blink6MemberINS1_12CounterStyleEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE12ExpandBufferEjPS4_Rb(%"class.WTF::HashTable"* %0, i32 %35, %"class.blink::Member.7"* %1, i8* nonnull dereferenceable(1) %4) #10
  %37 = load i8, i8* %4, align 1, !range !5
  %38 = icmp eq i8 %37, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #10
  br i1 %38, label %39, label %45

39:                                               ; preds = %10, %34, %31
  %40 = phi i32 [ %35, %34 ], [ %14, %31 ], [ %8, %10 ]
  %41 = zext i32 %40 to i64
  %42 = call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE4CallEm(i64 %41) #10
  %43 = bitcast %"class.blink::HeapHashTableBacking"* %42 to %"class.blink::Member.7"*
  %44 = call %"class.blink::Member.7"* @_ZN3WTF9HashTableIN5blink6MemberINS1_12CounterStyleEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE8RehashToEPS4_jSC_(%"class.WTF::HashTable"* %0, %"class.blink::Member.7"* %43, i32 %40, %"class.blink::Member.7"* %1) #10
  br label %45

45:                                               ; preds = %34, %39
  %46 = phi %"class.blink::Member.7"* [ %44, %39 ], [ %36, %34 ]
  ret %"class.blink::Member.7"* %46
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::Member.7"* @_ZN3WTF9HashTableIN5blink6MemberINS1_12CounterStyleEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE12ExpandBufferEjPS4_Rb(%"class.WTF::HashTable"*, i32, %"class.blink::Member.7"*, i8* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  store i8 0, i8* %3, align 1
  %6 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %7 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %6, i64 0, i32 1
  %8 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %7) #10
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %12, !prof !3

10:                                               ; preds = %4
  %11 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %7, i8* %11) #10
  br label %12

12:                                               ; preds = %10, %4
  %13 = phi i8* [ %11, %10 ], [ %8, %4 ]
  %14 = bitcast i8* %13 to %"class.blink::ThreadState"**
  %15 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 6
  %17 = load i8, i8* %16, align 8, !range !5
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 16
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %27, label %23

23:                                               ; preds = %12, %19
  %24 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 13
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %19, %23
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.13, i64 0, i64 0), i32 1801, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0)) #10
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #10
  br label %30

30:                                               ; preds = %23, %27
  %31 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %32 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %31, align 8
  %33 = icmp eq %"class.blink::Member.7"* %32, null
  br i1 %33, label %103, label %34

34:                                               ; preds = %30
  %35 = zext i32 %1 to i64
  %36 = shl nuw nsw i64 %35, 3
  %37 = bitcast %"class.blink::Member.7"* %32 to i8*
  %38 = call zeroext i1 @_ZN5blink13HeapAllocator13BackingExpandEPvm(i8* nonnull %37, i64 %36) #10
  br i1 %38, label %39, label %103

39:                                               ; preds = %34
  store i8 1, i8* %3, align 1
  %40 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %31, align 8
  %43 = zext i32 %41 to i64
  %44 = call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE4CallEm(i64 %43) #10
  %45 = bitcast %"class.blink::HeapHashTableBacking"* %44 to %"class.blink::Member.7"*
  %46 = icmp eq i32 %41, 0
  br i1 %46, label %69, label %47

47:                                               ; preds = %39
  %48 = and i64 %43, 1
  %49 = icmp eq i32 %41, 1
  br i1 %49, label %52, label %50

50:                                               ; preds = %47
  %51 = sub nsw i64 %43, %48
  br label %80

52:                                               ; preds = %106, %47
  %53 = phi %"class.blink::Member.7"* [ undef, %47 ], [ %100, %106 ]
  %54 = phi i64 [ 0, %47 ], [ %109, %106 ]
  %55 = phi %"class.blink::Member.7"* [ null, %47 ], [ %100, %106 ]
  %56 = icmp eq i64 %48, 0
  br i1 %56, label %69, label %57

57:                                               ; preds = %52
  %58 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %31, align 8
  %59 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %58, i64 %54
  %60 = icmp eq %"class.blink::Member.7"* %59, %2
  %61 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %45, i64 %54
  %62 = select i1 %60, %"class.blink::Member.7"* %61, %"class.blink::Member.7"* %55
  %63 = bitcast %"class.blink::Member.7"* %59 to i64*
  %64 = load i64, i64* %63, align 8
  switch i64 %64, label %65 [
    i64 -1, label %66
    i64 0, label %66
  ]

65:                                               ; preds = %57
  br label %66

66:                                               ; preds = %65, %57, %57
  %67 = phi i64 [ %64, %65 ], [ 0, %57 ], [ 0, %57 ]
  %68 = bitcast %"class.blink::Member.7"* %61 to i64*
  store i64 %67, i64* %68, align 8
  br label %69

69:                                               ; preds = %66, %52, %39
  %70 = phi %"class.blink::Member.7"* [ null, %39 ], [ %53, %52 ], [ %62, %66 ]
  %71 = bitcast %"class.WTF::HashTable"* %0 to %"class.blink::HeapHashTableBacking"**
  store %"class.blink::HeapHashTableBacking"* %44, %"class.blink::HeapHashTableBacking"** %71, align 8
  %72 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %77, label %74

74:                                               ; preds = %69
  %75 = getelementptr inbounds %"class.blink::HeapHashTableBacking", %"class.blink::HeapHashTableBacking"* %44, i64 0, i32 0
  %76 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %75) #10
  br label %77

77:                                               ; preds = %69, %74
  %78 = bitcast %"class.blink::Member.7"* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 %36, i1 false)
  %79 = call %"class.blink::Member.7"* @_ZN3WTF9HashTableIN5blink6MemberINS1_12CounterStyleEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE8RehashToEPS4_jSC_(%"class.WTF::HashTable"* %0, %"class.blink::Member.7"* %42, i32 %1, %"class.blink::Member.7"* %70)
  br label %103

80:                                               ; preds = %106, %50
  %81 = phi i64 [ 0, %50 ], [ %109, %106 ]
  %82 = phi %"class.blink::Member.7"* [ null, %50 ], [ %100, %106 ]
  %83 = phi i64 [ %51, %50 ], [ %110, %106 ]
  %84 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %31, align 8
  %85 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %84, i64 %81
  %86 = icmp eq %"class.blink::Member.7"* %85, %2
  %87 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %45, i64 %81
  %88 = select i1 %86, %"class.blink::Member.7"* %87, %"class.blink::Member.7"* %82
  %89 = bitcast %"class.blink::Member.7"* %85 to i64*
  %90 = load i64, i64* %89, align 8
  switch i64 %90, label %91 [
    i64 -1, label %92
    i64 0, label %92
  ]

91:                                               ; preds = %80
  br label %92

92:                                               ; preds = %80, %80, %91
  %93 = phi i64 [ %90, %91 ], [ 0, %80 ], [ 0, %80 ]
  %94 = bitcast %"class.blink::Member.7"* %87 to i64*
  store i64 %93, i64* %94, align 8
  %95 = or i64 %81, 1
  %96 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %31, align 8
  %97 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %96, i64 %95
  %98 = icmp eq %"class.blink::Member.7"* %97, %2
  %99 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %45, i64 %95
  %100 = select i1 %98, %"class.blink::Member.7"* %99, %"class.blink::Member.7"* %88
  %101 = bitcast %"class.blink::Member.7"* %97 to i64*
  %102 = load i64, i64* %101, align 8
  switch i64 %102, label %105 [
    i64 -1, label %106
    i64 0, label %106
  ]

103:                                              ; preds = %34, %30, %77
  %104 = phi %"class.blink::Member.7"* [ %79, %77 ], [ null, %30 ], [ null, %34 ]
  ret %"class.blink::Member.7"* %104

105:                                              ; preds = %92
  br label %106

106:                                              ; preds = %105, %92, %92
  %107 = phi i64 [ %102, %105 ], [ 0, %92 ], [ 0, %92 ]
  %108 = bitcast %"class.blink::Member.7"* %99 to i64*
  store i64 %107, i64* %108, align 8
  %109 = add nuw nsw i64 %81, 2
  %110 = add i64 %83, -2
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %52, label %80
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::Member.7"* @_ZN3WTF9HashTableIN5blink6MemberINS1_12CounterStyleEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE8RehashToEPS4_jSC_(%"class.WTF::HashTable"*, %"class.blink::Member.7"*, i32, %"class.blink::Member.7"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"class.blink::Member.7"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %10, align 8
  br label %37

14:                                               ; preds = %125, %4
  %15 = phi %"class.blink::Member.7"* [ null, %4 ], [ %128, %125 ]
  %16 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %14
  %19 = bitcast %"class.blink::Member.7"* %1 to i8*
  tail call void @_ZN5blink14MarkingVisitor17RetraceObjectSlowEPKv(i8* %19) #10
  br label %20

20:                                               ; preds = %14, %18
  %21 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %22 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %21, align 8
  %23 = bitcast %"class.WTF::HashTable"* %0 to i64*
  store atomic i64 %5, i64* %23 monotonic, align 8
  %24 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %20
  %27 = bitcast %"class.blink::Member.7"* %1 to i8*
  %28 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %27) #10
  br label %29

29:                                               ; preds = %20, %26
  store i32 %2, i32* %6, align 8
  %30 = icmp eq %"class.blink::Member.7"* %22, null
  br i1 %30, label %33, label %31

31:                                               ; preds = %29
  %32 = bitcast %"class.blink::Member.7"* %22 to i8*
  tail call void @_ZN5blink13HeapAllocator11BackingFreeEPv(i8* nonnull %32) #10
  br label %33

33:                                               ; preds = %29, %31
  %34 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %35 = load i32, i32* %34, align 8
  %36 = and i32 %35, -2147483648
  store i32 %36, i32* %34, align 8
  ret %"class.blink::Member.7"* %15

37:                                               ; preds = %9, %125
  %38 = phi i32 [ %7, %9 ], [ %126, %125 ]
  %39 = phi %"class.blink::Member.7"* [ %13, %9 ], [ %127, %125 ]
  %40 = phi %"class.blink::Member.7"* [ null, %9 ], [ %128, %125 ]
  %41 = phi i32 [ 0, %9 ], [ %129, %125 ]
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %39, i64 %42
  %44 = bitcast %"class.blink::Member.7"* %43 to i64*
  %45 = load i64, i64* %44, align 8
  switch i64 %45, label %46 [
    i64 -1, label %125
    i64 0, label %125
  ]

46:                                               ; preds = %37
  %47 = shl i64 %45, 32
  %48 = xor i64 %47, -1
  %49 = add i64 %45, %48
  %50 = lshr i64 %49, 22
  %51 = xor i64 %50, %49
  %52 = shl i64 %51, 13
  %53 = xor i64 %52, -1
  %54 = add i64 %51, %53
  %55 = lshr i64 %54, 8
  %56 = xor i64 %55, %54
  %57 = mul i64 %56, 9
  %58 = lshr i64 %57, 15
  %59 = xor i64 %58, %57
  %60 = shl i64 %59, 27
  %61 = xor i64 %60, -1
  %62 = add i64 %59, %61
  %63 = lshr i64 %62, 31
  %64 = xor i64 %63, %62
  %65 = trunc i64 %64 to i32
  %66 = and i32 %11, %65
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %1, i64 %67
  %69 = ptrtoint %"class.blink::Member.7"* %68 to i64
  %70 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %68, i64 0, i32 0, i32 0
  %71 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** %70, align 8
  %72 = icmp eq %"class.blink::CounterStyle"* %71, null
  %73 = inttoptr i64 %45 to %"class.blink::CounterStyle"*
  br i1 %72, label %91, label %74

74:                                               ; preds = %46
  %75 = xor i32 %65, -1
  %76 = lshr i32 %65, 23
  %77 = add i32 %76, %75
  %78 = shl i32 %77, 12
  %79 = xor i32 %78, %77
  %80 = lshr i32 %79, 7
  %81 = xor i32 %80, %79
  %82 = shl i32 %81, 2
  %83 = xor i32 %82, %81
  %84 = lshr i32 %83, 20
  %85 = xor i32 %84, %83
  %86 = or i32 %85, 1
  %87 = zext i32 %86 to i64
  br label %97

88:                                               ; preds = %104
  %89 = ptrtoint %"class.blink::Member.7"* %111 to i64
  %90 = inttoptr i64 %106 to %"class.blink::Member.7"*
  br label %91

91:                                               ; preds = %88, %46
  %92 = phi i64 [ %89, %88 ], [ %69, %46 ]
  %93 = phi %"class.blink::Member.7"* [ %90, %88 ], [ null, %46 ]
  %94 = icmp eq %"class.blink::Member.7"* %93, null
  %95 = ptrtoint %"class.blink::Member.7"* %93 to i64
  %96 = select i1 %94, i64 %92, i64 %95
  br label %116

97:                                               ; preds = %104, %74
  %98 = phi i64 [ 0, %74 ], [ %106, %104 ]
  %99 = phi %"class.blink::CounterStyle"* [ %71, %74 ], [ %114, %104 ]
  %100 = phi i64 [ %69, %74 ], [ %112, %104 ]
  %101 = phi i64 [ %67, %74 ], [ %110, %104 ]
  %102 = phi i64 [ 0, %74 ], [ %108, %104 ]
  %103 = icmp eq %"class.blink::CounterStyle"* %99, %73
  br i1 %103, label %116, label %104

104:                                              ; preds = %97
  %105 = icmp eq %"class.blink::CounterStyle"* %99, inttoptr (i64 -1 to %"class.blink::CounterStyle"*)
  %106 = select i1 %105, i64 %100, i64 %98
  %107 = icmp eq i64 %102, 0
  %108 = select i1 %107, i64 %87, i64 %102
  %109 = add i64 %108, %101
  %110 = and i64 %109, %12
  %111 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %1, i64 %110
  %112 = ptrtoint %"class.blink::Member.7"* %111 to i64
  %113 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %111, i64 0, i32 0, i32 0
  %114 = load %"class.blink::CounterStyle"*, %"class.blink::CounterStyle"** %113, align 8
  %115 = icmp eq %"class.blink::CounterStyle"* %114, null
  br i1 %115, label %88, label %97

116:                                              ; preds = %97, %91
  %117 = phi i64 [ %96, %91 ], [ %100, %97 ]
  %118 = inttoptr i64 %117 to %"class.blink::Member.7"*
  %119 = inttoptr i64 %117 to i64*
  store i64 %45, i64* %119, align 8
  %120 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %10, align 8
  %121 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %120, i64 %42
  %122 = icmp eq %"class.blink::Member.7"* %121, %3
  %123 = select i1 %122, %"class.blink::Member.7"* %118, %"class.blink::Member.7"* %40
  %124 = load i32, i32* %6, align 8
  br label %125

125:                                              ; preds = %37, %37, %116
  %126 = phi i32 [ %38, %37 ], [ %124, %116 ], [ %38, %37 ]
  %127 = phi %"class.blink::Member.7"* [ %39, %37 ], [ %120, %116 ], [ %39, %37 ]
  %128 = phi %"class.blink::Member.7"* [ %40, %37 ], [ %123, %116 ], [ %40, %37 ]
  %129 = add i32 %41, 1
  %130 = icmp eq i32 %129, %126
  br i1 %130, label %14, label %37
}

declare zeroext i1 @_ZN5blink13HeapAllocator13BackingExpandEPvm(i8*, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE4CallEm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.15, i64 0, i64 0), i32 77, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 3
  %21 = call i8* @_ZN5blink20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES5_NS1_17IdentityExtractorENS1_10MemberHashIS4_EENS1_10HashTraitsIS5_EESA_NS_13HeapAllocatorEEEE14AllocateObjectISD_EEPvm(i64 %20)
  %22 = bitcast i8* %21 to %"class.blink::HeapHashTableBacking"*
  %23 = getelementptr inbounds i8, i8* %21, i64 -4
  %24 = bitcast i8* %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = or i16 %25, 1
  store atomic i16 %26, i16* %24 release, align 2
  ret %"class.blink::HeapHashTableBacking"* %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES5_NS1_17IdentityExtractorENS1_10MemberHashIS4_EENS1_10HashTraitsIS5_EESA_NS_13HeapAllocatorEEEE14AllocateObjectISD_EEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #10
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !3

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #10
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %18 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %17, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %19

19:                                               ; preds = %8, %16
  %20 = phi i32 [ %14, %8 ], [ %18, %16 ]
  %21 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 5, i32 %20, i8* getelementptr inbounds ([356 x i8], [356 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink20HeapHashTableBackingINS_9HashTableINS1_6MemberINS1_12CounterStyleEEES6_NS_17IdentityExtractorENS_10MemberHashIS5_EENS_10HashTraitsIS6_EESB_NS1_13HeapAllocatorEEEEEEEPKcv, i64 0, i64 0))
  ret i8* %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Member.7"*
  %4 = getelementptr inbounds i8, i8* %1, i64 -2
  %5 = bitcast i8* %4 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = lshr i16 %6, 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %17, !prof !3

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %20

17:                                               ; preds = %2
  %18 = zext i16 %7 to i64
  %19 = shl nuw nsw i64 %18, 3
  br label %20

20:                                               ; preds = %17, %9
  %21 = phi i64 [ %16, %9 ], [ %19, %17 ]
  %22 = add i64 %21, -8
  %23 = lshr i64 %22, 3
  %24 = bitcast %"class.blink::Visitor"* %0 to i1 (%"class.blink::Visitor"*)***
  %25 = load i1 (%"class.blink::Visitor"*)**, i1 (%"class.blink::Visitor"*)*** %24, align 8
  %26 = getelementptr inbounds i1 (%"class.blink::Visitor"*)*, i1 (%"class.blink::Visitor"*)** %25, i64 3
  %27 = load i1 (%"class.blink::Visitor"*)*, i1 (%"class.blink::Visitor"*)** %26, align 8
  %28 = tail call zeroext i1 %27(%"class.blink::Visitor"* %0) #10
  %29 = icmp eq i64 %23, 0
  br i1 %29, label %56, label %30

30:                                               ; preds = %20
  %31 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  br label %32

32:                                               ; preds = %53, %30
  %33 = phi i64 [ 0, %30 ], [ %54, %53 ]
  %34 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %3, i64 %33
  %35 = bitcast %"class.blink::Member.7"* %34 to i64*
  br i1 %28, label %36, label %43

36:                                               ; preds = %32
  %37 = load atomic i64, i64* %35 monotonic, align 8
  switch i64 %37, label %38 [
    i64 -1, label %53
    i64 0, label %53
  ]

38:                                               ; preds = %36
  %39 = inttoptr i64 %37 to i8*
  %40 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %41 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %40, i64 5
  %42 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %41, align 8
  tail call void %42(%"class.blink::Visitor"* %0, i8* nonnull %39, i8* nonnull %39, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_12CounterStyleEE5TraceEPNS_7VisitorEPKv) #10
  br label %53

43:                                               ; preds = %32
  %44 = load i64, i64* %35, align 8
  switch i64 %44, label %45 [
    i64 -1, label %53
    i64 0, label %53
  ]

45:                                               ; preds = %43
  %46 = load atomic i64, i64* %35 monotonic, align 8
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %45
  %49 = inttoptr i64 %46 to i8*
  %50 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %51 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %50, i64 5
  %52 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %51, align 8
  tail call void %52(%"class.blink::Visitor"* %0, i8* nonnull %49, i8* nonnull %49, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_12CounterStyleEE5TraceEPNS_7VisitorEPKv) #10
  br label %53

53:                                               ; preds = %48, %45, %43, %43, %38, %36, %36
  %54 = add nuw nsw i64 %33, 1
  %55 = icmp eq i64 %54, %23
  br i1 %55, label %56, label %32

56:                                               ; preds = %53, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_12CounterStyleEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), i8 1 }
}

declare void @_ZN5blink14MarkingVisitor17RetraceObjectSlowEPKv(i8*) local_unnamed_addr #4

declare void @_ZN5blink13HeapAllocator11BackingFreeEPv(i8*) local_unnamed_addr #4

declare void @_ZN3WTF13AtomicMemzeroEPvm(i8*, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_21StyleRuleCounterStyleEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::StyleRuleBase"*
  tail call void @_ZNK5blink13StyleRuleBase5TraceEPNS_7VisitorE(%"class.blink::StyleRuleBase"* %3, %"class.blink::Visitor"* %0) #10
  ret void
}

declare void @_ZNK5blink13StyleRuleBase5TraceEPNS_7VisitorE(%"class.blink::StyleRuleBase"*, %"class.blink::Visitor"*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.usub.sat.i32(i32, i32) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{i8 0, i8 2}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN5blink12_GLOBAL__N_115CyclicAlgorithmEij: argument 0"}
!8 = distinct !{!8, !"_ZN5blink12_GLOBAL__N_115CyclicAlgorithmEij"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN5blink12_GLOBAL__N_114FixedAlgorithmEiij: argument 0"}
!11 = distinct !{!11, !"_ZN5blink12_GLOBAL__N_114FixedAlgorithmEiij"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN5blink12_GLOBAL__N_116NumericAlgorithmEjj: argument 0"}
!14 = distinct !{!14, !"_ZN5blink12_GLOBAL__N_116NumericAlgorithmEjj"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN5blink12_GLOBAL__N_117SymbolicAlgorithmEjj: argument 0"}
!17 = distinct !{!17, !"_ZN5blink12_GLOBAL__N_117SymbolicAlgorithmEjj"}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.isvectorized", i32 1}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.unroll.disable"}
!22 = distinct !{!22, !23, !19}
!23 = !{!"llvm.loop.unroll.runtime.disable"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZN5blink12_GLOBAL__N_119AlphabeticAlgorithmEjj: argument 0"}
!26 = distinct !{!26, !"_ZN5blink12_GLOBAL__N_119AlphabeticAlgorithmEjj"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN5blink12_GLOBAL__N_117AdditiveAlgorithmEjRKN3WTF6VectorIjLj0ENS1_18PartitionAllocatorEEE: argument 0"}
!29 = distinct !{!29, !"_ZN5blink12_GLOBAL__N_117AdditiveAlgorithmEjRKN3WTF6VectorIjLj0ENS1_18PartitionAllocatorEEE"}
!30 = distinct !{!30, !19}
!31 = distinct !{!31, !21}
!32 = distinct !{!32, !23, !19}
