; ModuleID = '../../third_party/blink/renderer/platform/wtf/text/string_concatenate.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/text/string_concatenate.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringTypeAdapter" = type <{ i8*, i32, [4 x i8] }>
%"class.WTF::StringTypeAdapter.0" = type <{ i8*, i32, [4 x i8] }>
%"class.WTF::StringTypeAdapter.2" = type <{ i16*, i32, [4 x i8] }>
%"class.WTF::StringTypeAdapter.4" = type <{ i8*, i32, [4 x i8] }>
%"class.WTF::StringTypeAdapter.6" = type <{ i8*, i32, [4 x i8] }>
%"class.WTF::StringTypeAdapter.8" = type { %"class.WTF::StringView" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@_ZN3WTF17StringTypeAdapterIPcEC1ES1_m = hidden unnamed_addr alias void (%"class.WTF::StringTypeAdapter"*, i8*, i64), void (%"class.WTF::StringTypeAdapter"*, i8*, i64)* @_ZN3WTF17StringTypeAdapterIPcEC2ES1_m
@_ZN3WTF17StringTypeAdapterIPhEC1ES1_ = hidden unnamed_addr alias void (%"class.WTF::StringTypeAdapter.0"*, i8*), void (%"class.WTF::StringTypeAdapter.0"*, i8*)* @_ZN3WTF17StringTypeAdapterIPhEC2ES1_
@_ZN3WTF17StringTypeAdapterIPKDsEC1ES2_ = hidden unnamed_addr alias void (%"class.WTF::StringTypeAdapter.2"*, i16*), void (%"class.WTF::StringTypeAdapter.2"*, i16*)* @_ZN3WTF17StringTypeAdapterIPKDsEC2ES2_
@_ZN3WTF17StringTypeAdapterIPKcEC1ES2_ = hidden unnamed_addr alias void (%"class.WTF::StringTypeAdapter.4"*, i8*), void (%"class.WTF::StringTypeAdapter.4"*, i8*)* @_ZN3WTF17StringTypeAdapterIPKcEC2ES2_
@_ZN3WTF17StringTypeAdapterIPKhEC1ES2_ = hidden unnamed_addr alias void (%"class.WTF::StringTypeAdapter.6"*, i8*), void (%"class.WTF::StringTypeAdapter.6"*, i8*)* @_ZN3WTF17StringTypeAdapterIPKhEC2ES2_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF17StringTypeAdapterIPcEC2ES1_m(%"class.WTF::StringTypeAdapter"* nocapture, i8*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %0, i64 0, i32 0
  store i8* %1, i8** %4, align 8
  %5 = icmp ult i64 %2, 4294967296
  br i1 %5, label %7, label %6, !prof !2

6:                                                ; preds = %3
  tail call void @llvm.trap() #5
  unreachable

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %0, i64 0, i32 1
  %9 = trunc i64 %2 to i32
  store i32 %9, i32* %8, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK3WTF17StringTypeAdapterIPcE7WriteToEPh(%"class.WTF::StringTypeAdapter"* nocapture readonly, i8* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %0, i64 0, i32 0
  br label %9

8:                                                ; preds = %9, %2
  ret void

9:                                                ; preds = %6, %9
  %10 = phi i64 [ 0, %6 ], [ %15, %9 ]
  %11 = load i8*, i8** %7, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %10
  %13 = load i8, i8* %12, align 1
  %14 = getelementptr inbounds i8, i8* %1, i64 %10
  store i8 %13, i8* %14, align 1
  %15 = add nuw nsw i64 %10, 1
  %16 = load i32, i32* %3, align 8
  %17 = zext i32 %16 to i64
  %18 = icmp ult i64 %15, %17
  br i1 %18, label %9, label %8
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK3WTF17StringTypeAdapterIPcE7WriteToEPDs(%"class.WTF::StringTypeAdapter"* nocapture readonly, i16* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %0, i64 0, i32 0
  br label %9

8:                                                ; preds = %9, %2
  ret void

9:                                                ; preds = %6, %9
  %10 = phi i64 [ 0, %6 ], [ %16, %9 ]
  %11 = load i8*, i8** %7, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %10
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i16
  %15 = getelementptr inbounds i16, i16* %1, i64 %10
  store i16 %14, i16* %15, align 2
  %16 = add nuw nsw i64 %10, 1
  %17 = load i32, i32* %3, align 8
  %18 = zext i32 %17 to i64
  %19 = icmp ult i64 %16, %18
  br i1 %19, label %9, label %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF17StringTypeAdapterIPhEC2ES1_(%"class.WTF::StringTypeAdapter.0"* nocapture, i8*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringTypeAdapter.0", %"class.WTF::StringTypeAdapter.0"* %0, i64 0, i32 0
  store i8* %1, i8** %3, align 8
  %4 = tail call i64 @strlen(i8* %1) #6
  %5 = icmp ult i64 %4, 4294967296
  br i1 %5, label %7, label %6, !prof !2

6:                                                ; preds = %2
  tail call void @llvm.trap() #5
  unreachable

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.0", %"class.WTF::StringTypeAdapter.0"* %0, i64 0, i32 1
  %9 = trunc i64 %4 to i32
  store i32 %9, i32* %8, align 8
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3WTF17StringTypeAdapterIPhE7WriteToES1_(%"class.WTF::StringTypeAdapter.0"* nocapture readonly, i8* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringTypeAdapter.0", %"class.WTF::StringTypeAdapter.0"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::StringTypeAdapter.0", %"class.WTF::StringTypeAdapter.0"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %4, i64 %7, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK3WTF17StringTypeAdapterIPhE7WriteToEPDs(%"class.WTF::StringTypeAdapter.0"* nocapture readonly, i16* nocapture) local_unnamed_addr #1 align 2 {
  %3 = bitcast i16* %1 to i8*
  %4 = getelementptr inbounds %"class.WTF::StringTypeAdapter.0", %"class.WTF::StringTypeAdapter.0"* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.WTF::StringTypeAdapter.0", %"class.WTF::StringTypeAdapter.0"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %119, label %9

9:                                                ; preds = %2
  %10 = zext i32 %7 to i64
  %11 = icmp ult i32 %7, 16
  br i1 %11, label %77, label %12

12:                                               ; preds = %9
  %13 = getelementptr i16, i16* %1, i64 %10
  %14 = bitcast i16* %13 to i8*
  %15 = getelementptr i8, i8* %5, i64 %10
  %16 = icmp ugt i8* %15, %3
  %17 = icmp ult i8* %5, %14
  %18 = and i1 %16, %17
  br i1 %18, label %77, label %19

19:                                               ; preds = %12
  %20 = and i64 %10, 4294967280
  %21 = add nsw i64 %20, -16
  %22 = lshr exact i64 %21, 4
  %23 = add nuw nsw i64 %22, 1
  %24 = and i64 %23, 1
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %59, label %26

26:                                               ; preds = %19
  %27 = sub nuw nsw i64 %23, %24
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i64 [ 0, %26 ], [ %56, %28 ]
  %30 = phi i64 [ %27, %26 ], [ %57, %28 ]
  %31 = getelementptr inbounds i8, i8* %5, i64 %29
  %32 = bitcast i8* %31 to <8 x i8>*
  %33 = load <8 x i8>, <8 x i8>* %32, align 1, !alias.scope !3
  %34 = getelementptr inbounds i8, i8* %31, i64 8
  %35 = bitcast i8* %34 to <8 x i8>*
  %36 = load <8 x i8>, <8 x i8>* %35, align 1, !alias.scope !3
  %37 = zext <8 x i8> %33 to <8 x i16>
  %38 = zext <8 x i8> %36 to <8 x i16>
  %39 = getelementptr inbounds i16, i16* %1, i64 %29
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %40, align 2, !alias.scope !6, !noalias !3
  %41 = getelementptr inbounds i16, i16* %39, i64 8
  %42 = bitcast i16* %41 to <8 x i16>*
  store <8 x i16> %38, <8 x i16>* %42, align 2, !alias.scope !6, !noalias !3
  %43 = or i64 %29, 16
  %44 = getelementptr inbounds i8, i8* %5, i64 %43
  %45 = bitcast i8* %44 to <8 x i8>*
  %46 = load <8 x i8>, <8 x i8>* %45, align 1, !alias.scope !3
  %47 = getelementptr inbounds i8, i8* %44, i64 8
  %48 = bitcast i8* %47 to <8 x i8>*
  %49 = load <8 x i8>, <8 x i8>* %48, align 1, !alias.scope !3
  %50 = zext <8 x i8> %46 to <8 x i16>
  %51 = zext <8 x i8> %49 to <8 x i16>
  %52 = getelementptr inbounds i16, i16* %1, i64 %43
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %53, align 2, !alias.scope !6, !noalias !3
  %54 = getelementptr inbounds i16, i16* %52, i64 8
  %55 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %55, align 2, !alias.scope !6, !noalias !3
  %56 = add i64 %29, 32
  %57 = add i64 %30, -2
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %28, !llvm.loop !8

59:                                               ; preds = %28, %19
  %60 = phi i64 [ 0, %19 ], [ %56, %28 ]
  %61 = icmp eq i64 %24, 0
  br i1 %61, label %75, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds i8, i8* %5, i64 %60
  %64 = bitcast i8* %63 to <8 x i8>*
  %65 = load <8 x i8>, <8 x i8>* %64, align 1, !alias.scope !3
  %66 = getelementptr inbounds i8, i8* %63, i64 8
  %67 = bitcast i8* %66 to <8 x i8>*
  %68 = load <8 x i8>, <8 x i8>* %67, align 1, !alias.scope !3
  %69 = zext <8 x i8> %65 to <8 x i16>
  %70 = zext <8 x i8> %68 to <8 x i16>
  %71 = getelementptr inbounds i16, i16* %1, i64 %60
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %72, align 2, !alias.scope !6, !noalias !3
  %73 = getelementptr inbounds i16, i16* %71, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %74, align 2, !alias.scope !6, !noalias !3
  br label %75

75:                                               ; preds = %59, %62
  %76 = icmp eq i64 %20, %10
  br i1 %76, label %119, label %77

77:                                               ; preds = %75, %12, %9
  %78 = phi i64 [ 0, %12 ], [ 0, %9 ], [ %20, %75 ]
  %79 = xor i64 %78, -1
  %80 = add nsw i64 %79, %10
  %81 = and i64 %10, 3
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %93, label %83

83:                                               ; preds = %77, %83
  %84 = phi i64 [ %90, %83 ], [ %78, %77 ]
  %85 = phi i64 [ %91, %83 ], [ %81, %77 ]
  %86 = getelementptr inbounds i8, i8* %5, i64 %84
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i16
  %89 = getelementptr inbounds i16, i16* %1, i64 %84
  store i16 %88, i16* %89, align 2
  %90 = add nuw nsw i64 %84, 1
  %91 = add i64 %85, -1
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %83, !llvm.loop !10

93:                                               ; preds = %83, %77
  %94 = phi i64 [ %78, %77 ], [ %90, %83 ]
  %95 = icmp ult i64 %80, 3
  br i1 %95, label %119, label %96

96:                                               ; preds = %93, %96
  %97 = phi i64 [ %117, %96 ], [ %94, %93 ]
  %98 = getelementptr inbounds i8, i8* %5, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i16
  %101 = getelementptr inbounds i16, i16* %1, i64 %97
  store i16 %100, i16* %101, align 2
  %102 = add nuw nsw i64 %97, 1
  %103 = getelementptr inbounds i8, i8* %5, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  %106 = getelementptr inbounds i16, i16* %1, i64 %102
  store i16 %105, i16* %106, align 2
  %107 = add nuw nsw i64 %97, 2
  %108 = getelementptr inbounds i8, i8* %5, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i16
  %111 = getelementptr inbounds i16, i16* %1, i64 %107
  store i16 %110, i16* %111, align 2
  %112 = add nuw nsw i64 %97, 3
  %113 = getelementptr inbounds i8, i8* %5, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i16
  %116 = getelementptr inbounds i16, i16* %1, i64 %112
  store i16 %115, i16* %116, align 2
  %117 = add nuw nsw i64 %97, 4
  %118 = icmp eq i64 %117, %10
  br i1 %118, label %119, label %96, !llvm.loop !12

119:                                              ; preds = %93, %96, %75, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF17StringTypeAdapterIPKDsEC2ES2_(%"class.WTF::StringTypeAdapter.2"* nocapture, i16*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringTypeAdapter.2", %"class.WTF::StringTypeAdapter.2"* %0, i64 0, i32 0
  store i16* %1, i16** %3, align 8
  br label %4

4:                                                ; preds = %4, %2
  %5 = phi i64 [ 0, %2 ], [ %9, %4 ]
  %6 = getelementptr inbounds i16, i16* %1, i64 %5
  %7 = load i16, i16* %6, align 2
  %8 = icmp eq i16 %7, 0
  %9 = add i64 %5, 1
  br i1 %8, label %10, label %4

10:                                               ; preds = %4
  %11 = icmp ult i64 %5, 4294967296
  br i1 %11, label %13, label %12, !prof !2

12:                                               ; preds = %10
  tail call void @llvm.trap() #5
  unreachable

13:                                               ; preds = %10
  %14 = getelementptr inbounds %"class.WTF::StringTypeAdapter.2", %"class.WTF::StringTypeAdapter.2"* %0, i64 0, i32 1
  %15 = trunc i64 %5 to i32
  store i32 %15, i32* %14, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3WTF17StringTypeAdapterIPKDsE7WriteToEPDs(%"class.WTF::StringTypeAdapter.2"* nocapture readonly, i16* nocapture) local_unnamed_addr #0 align 2 {
  %3 = bitcast i16* %1 to i8*
  %4 = bitcast %"class.WTF::StringTypeAdapter.2"* %0 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.WTF::StringTypeAdapter.2", %"class.WTF::StringTypeAdapter.2"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = shl nuw nsw i64 %8, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %3, i8* align 2 %5, i64 %9, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF17StringTypeAdapterIPKcEC2ES2_(%"class.WTF::StringTypeAdapter.4"* nocapture, i8*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringTypeAdapter.4", %"class.WTF::StringTypeAdapter.4"* %0, i64 0, i32 0
  store i8* %1, i8** %3, align 8
  %4 = tail call i64 @strlen(i8* %1) #6
  %5 = icmp ult i64 %4, 4294967296
  br i1 %5, label %7, label %6, !prof !2

6:                                                ; preds = %2
  tail call void @llvm.trap() #5
  unreachable

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.4", %"class.WTF::StringTypeAdapter.4"* %0, i64 0, i32 1
  %9 = trunc i64 %4 to i32
  store i32 %9, i32* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.4"* nocapture readonly, i8* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringTypeAdapter.4", %"class.WTF::StringTypeAdapter.4"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::StringTypeAdapter.4", %"class.WTF::StringTypeAdapter.4"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %4, i64 %7, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.4"* nocapture readonly, i16* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringTypeAdapter.4", %"class.WTF::StringTypeAdapter.4"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringTypeAdapter.4", %"class.WTF::StringTypeAdapter.4"* %0, i64 0, i32 0
  br label %9

8:                                                ; preds = %9, %2
  ret void

9:                                                ; preds = %6, %9
  %10 = phi i64 [ 0, %6 ], [ %16, %9 ]
  %11 = load i8*, i8** %7, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %10
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i16
  %15 = getelementptr inbounds i16, i16* %1, i64 %10
  store i16 %14, i16* %15, align 2
  %16 = add nuw nsw i64 %10, 1
  %17 = load i32, i32* %3, align 8
  %18 = zext i32 %17 to i64
  %19 = icmp ult i64 %16, %18
  br i1 %19, label %9, label %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF17StringTypeAdapterIPKhEC2ES2_(%"class.WTF::StringTypeAdapter.6"* nocapture, i8*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringTypeAdapter.6", %"class.WTF::StringTypeAdapter.6"* %0, i64 0, i32 0
  store i8* %1, i8** %3, align 8
  %4 = tail call i64 @strlen(i8* %1) #6
  %5 = icmp ult i64 %4, 4294967296
  br i1 %5, label %7, label %6, !prof !2

6:                                                ; preds = %2
  tail call void @llvm.trap() #5
  unreachable

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.6", %"class.WTF::StringTypeAdapter.6"* %0, i64 0, i32 1
  %9 = trunc i64 %4 to i32
  store i32 %9, i32* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3WTF17StringTypeAdapterIPKhE7WriteToEPh(%"class.WTF::StringTypeAdapter.6"* nocapture readonly, i8* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringTypeAdapter.6", %"class.WTF::StringTypeAdapter.6"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::StringTypeAdapter.6", %"class.WTF::StringTypeAdapter.6"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %4, i64 %7, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK3WTF17StringTypeAdapterIPKhE7WriteToEPDs(%"class.WTF::StringTypeAdapter.6"* nocapture readonly, i16* nocapture) local_unnamed_addr #1 align 2 {
  %3 = bitcast i16* %1 to i8*
  %4 = getelementptr inbounds %"class.WTF::StringTypeAdapter.6", %"class.WTF::StringTypeAdapter.6"* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.WTF::StringTypeAdapter.6", %"class.WTF::StringTypeAdapter.6"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %119, label %9

9:                                                ; preds = %2
  %10 = zext i32 %7 to i64
  %11 = icmp ult i32 %7, 16
  br i1 %11, label %77, label %12

12:                                               ; preds = %9
  %13 = getelementptr i16, i16* %1, i64 %10
  %14 = bitcast i16* %13 to i8*
  %15 = getelementptr i8, i8* %5, i64 %10
  %16 = icmp ugt i8* %15, %3
  %17 = icmp ult i8* %5, %14
  %18 = and i1 %16, %17
  br i1 %18, label %77, label %19

19:                                               ; preds = %12
  %20 = and i64 %10, 4294967280
  %21 = add nsw i64 %20, -16
  %22 = lshr exact i64 %21, 4
  %23 = add nuw nsw i64 %22, 1
  %24 = and i64 %23, 1
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %59, label %26

26:                                               ; preds = %19
  %27 = sub nuw nsw i64 %23, %24
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i64 [ 0, %26 ], [ %56, %28 ]
  %30 = phi i64 [ %27, %26 ], [ %57, %28 ]
  %31 = getelementptr inbounds i8, i8* %5, i64 %29
  %32 = bitcast i8* %31 to <8 x i8>*
  %33 = load <8 x i8>, <8 x i8>* %32, align 1, !alias.scope !13
  %34 = getelementptr inbounds i8, i8* %31, i64 8
  %35 = bitcast i8* %34 to <8 x i8>*
  %36 = load <8 x i8>, <8 x i8>* %35, align 1, !alias.scope !13
  %37 = zext <8 x i8> %33 to <8 x i16>
  %38 = zext <8 x i8> %36 to <8 x i16>
  %39 = getelementptr inbounds i16, i16* %1, i64 %29
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %40, align 2, !alias.scope !16, !noalias !13
  %41 = getelementptr inbounds i16, i16* %39, i64 8
  %42 = bitcast i16* %41 to <8 x i16>*
  store <8 x i16> %38, <8 x i16>* %42, align 2, !alias.scope !16, !noalias !13
  %43 = or i64 %29, 16
  %44 = getelementptr inbounds i8, i8* %5, i64 %43
  %45 = bitcast i8* %44 to <8 x i8>*
  %46 = load <8 x i8>, <8 x i8>* %45, align 1, !alias.scope !13
  %47 = getelementptr inbounds i8, i8* %44, i64 8
  %48 = bitcast i8* %47 to <8 x i8>*
  %49 = load <8 x i8>, <8 x i8>* %48, align 1, !alias.scope !13
  %50 = zext <8 x i8> %46 to <8 x i16>
  %51 = zext <8 x i8> %49 to <8 x i16>
  %52 = getelementptr inbounds i16, i16* %1, i64 %43
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %53, align 2, !alias.scope !16, !noalias !13
  %54 = getelementptr inbounds i16, i16* %52, i64 8
  %55 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %55, align 2, !alias.scope !16, !noalias !13
  %56 = add i64 %29, 32
  %57 = add i64 %30, -2
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %28, !llvm.loop !18

59:                                               ; preds = %28, %19
  %60 = phi i64 [ 0, %19 ], [ %56, %28 ]
  %61 = icmp eq i64 %24, 0
  br i1 %61, label %75, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds i8, i8* %5, i64 %60
  %64 = bitcast i8* %63 to <8 x i8>*
  %65 = load <8 x i8>, <8 x i8>* %64, align 1, !alias.scope !13
  %66 = getelementptr inbounds i8, i8* %63, i64 8
  %67 = bitcast i8* %66 to <8 x i8>*
  %68 = load <8 x i8>, <8 x i8>* %67, align 1, !alias.scope !13
  %69 = zext <8 x i8> %65 to <8 x i16>
  %70 = zext <8 x i8> %68 to <8 x i16>
  %71 = getelementptr inbounds i16, i16* %1, i64 %60
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %72, align 2, !alias.scope !16, !noalias !13
  %73 = getelementptr inbounds i16, i16* %71, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %74, align 2, !alias.scope !16, !noalias !13
  br label %75

75:                                               ; preds = %59, %62
  %76 = icmp eq i64 %20, %10
  br i1 %76, label %119, label %77

77:                                               ; preds = %75, %12, %9
  %78 = phi i64 [ 0, %12 ], [ 0, %9 ], [ %20, %75 ]
  %79 = xor i64 %78, -1
  %80 = add nsw i64 %79, %10
  %81 = and i64 %10, 3
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %93, label %83

83:                                               ; preds = %77, %83
  %84 = phi i64 [ %90, %83 ], [ %78, %77 ]
  %85 = phi i64 [ %91, %83 ], [ %81, %77 ]
  %86 = getelementptr inbounds i8, i8* %5, i64 %84
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i16
  %89 = getelementptr inbounds i16, i16* %1, i64 %84
  store i16 %88, i16* %89, align 2
  %90 = add nuw nsw i64 %84, 1
  %91 = add i64 %85, -1
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %83, !llvm.loop !19

93:                                               ; preds = %83, %77
  %94 = phi i64 [ %78, %77 ], [ %90, %83 ]
  %95 = icmp ult i64 %80, 3
  br i1 %95, label %119, label %96

96:                                               ; preds = %93, %96
  %97 = phi i64 [ %117, %96 ], [ %94, %93 ]
  %98 = getelementptr inbounds i8, i8* %5, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i16
  %101 = getelementptr inbounds i16, i16* %1, i64 %97
  store i16 %100, i16* %101, align 2
  %102 = add nuw nsw i64 %97, 1
  %103 = getelementptr inbounds i8, i8* %5, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  %106 = getelementptr inbounds i16, i16* %1, i64 %102
  store i16 %105, i16* %106, align 2
  %107 = add nuw nsw i64 %97, 2
  %108 = getelementptr inbounds i8, i8* %5, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i16
  %111 = getelementptr inbounds i16, i16* %1, i64 %107
  store i16 %110, i16* %111, align 2
  %112 = add nuw nsw i64 %97, 3
  %113 = getelementptr inbounds i8, i8* %5, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i16
  %116 = getelementptr inbounds i16, i16* %1, i64 %112
  store i16 %115, i16* %116, align 2
  %117 = add nuw nsw i64 %97, 4
  %118 = icmp eq i64 %117, %10
  br i1 %118, label %119, label %96, !llvm.loop !20

119:                                              ; preds = %93, %96, %75, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.8"* nocapture readonly, i8* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringTypeAdapter.8", %"class.WTF::StringTypeAdapter.8"* %0, i64 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::StringTypeAdapter.8", %"class.WTF::StringTypeAdapter.8"* %0, i64 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %4, i64 %7, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.8"* nocapture readonly, i16* nocapture) local_unnamed_addr #0 align 2 {
  %3 = bitcast i16* %1 to i8*
  %4 = getelementptr inbounds %"class.WTF::StringTypeAdapter.8", %"class.WTF::StringTypeAdapter.8"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  %10 = getelementptr inbounds %"class.WTF::StringTypeAdapter.8", %"class.WTF::StringTypeAdapter.8"* %0, i64 0, i32 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.8", %"class.WTF::StringTypeAdapter.8"* %0, i64 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 8
  br i1 %9, label %126, label %14

14:                                               ; preds = %2
  %15 = icmp eq i32 %13, 0
  br i1 %15, label %129, label %16

16:                                               ; preds = %14
  %17 = zext i32 %13 to i64
  %18 = icmp ult i32 %13, 16
  br i1 %18, label %84, label %19

19:                                               ; preds = %16
  %20 = getelementptr i16, i16* %1, i64 %17
  %21 = bitcast i16* %20 to i8*
  %22 = getelementptr i8, i8* %11, i64 %17
  %23 = icmp ugt i8* %22, %3
  %24 = icmp ult i8* %11, %21
  %25 = and i1 %23, %24
  br i1 %25, label %84, label %26

26:                                               ; preds = %19
  %27 = and i64 %17, 4294967280
  %28 = add nsw i64 %27, -16
  %29 = lshr exact i64 %28, 4
  %30 = add nuw nsw i64 %29, 1
  %31 = and i64 %30, 1
  %32 = icmp eq i64 %28, 0
  br i1 %32, label %66, label %33

33:                                               ; preds = %26
  %34 = sub nuw nsw i64 %30, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %63, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %64, %35 ]
  %38 = getelementptr inbounds i8, i8* %11, i64 %36
  %39 = bitcast i8* %38 to <8 x i8>*
  %40 = load <8 x i8>, <8 x i8>* %39, align 1, !alias.scope !21
  %41 = getelementptr inbounds i8, i8* %38, i64 8
  %42 = bitcast i8* %41 to <8 x i8>*
  %43 = load <8 x i8>, <8 x i8>* %42, align 1, !alias.scope !21
  %44 = zext <8 x i8> %40 to <8 x i16>
  %45 = zext <8 x i8> %43 to <8 x i16>
  %46 = getelementptr inbounds i16, i16* %1, i64 %36
  %47 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> %44, <8 x i16>* %47, align 2, !alias.scope !24, !noalias !21
  %48 = getelementptr inbounds i16, i16* %46, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> %45, <8 x i16>* %49, align 2, !alias.scope !24, !noalias !21
  %50 = or i64 %36, 16
  %51 = getelementptr inbounds i8, i8* %11, i64 %50
  %52 = bitcast i8* %51 to <8 x i8>*
  %53 = load <8 x i8>, <8 x i8>* %52, align 1, !alias.scope !21
  %54 = getelementptr inbounds i8, i8* %51, i64 8
  %55 = bitcast i8* %54 to <8 x i8>*
  %56 = load <8 x i8>, <8 x i8>* %55, align 1, !alias.scope !21
  %57 = zext <8 x i8> %53 to <8 x i16>
  %58 = zext <8 x i8> %56 to <8 x i16>
  %59 = getelementptr inbounds i16, i16* %1, i64 %50
  %60 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> %57, <8 x i16>* %60, align 2, !alias.scope !24, !noalias !21
  %61 = getelementptr inbounds i16, i16* %59, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %62, align 2, !alias.scope !24, !noalias !21
  %63 = add i64 %36, 32
  %64 = add i64 %37, -2
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %66, label %35, !llvm.loop !26

66:                                               ; preds = %35, %26
  %67 = phi i64 [ 0, %26 ], [ %63, %35 ]
  %68 = icmp eq i64 %31, 0
  br i1 %68, label %82, label %69

69:                                               ; preds = %66
  %70 = getelementptr inbounds i8, i8* %11, i64 %67
  %71 = bitcast i8* %70 to <8 x i8>*
  %72 = load <8 x i8>, <8 x i8>* %71, align 1, !alias.scope !21
  %73 = getelementptr inbounds i8, i8* %70, i64 8
  %74 = bitcast i8* %73 to <8 x i8>*
  %75 = load <8 x i8>, <8 x i8>* %74, align 1, !alias.scope !21
  %76 = zext <8 x i8> %72 to <8 x i16>
  %77 = zext <8 x i8> %75 to <8 x i16>
  %78 = getelementptr inbounds i16, i16* %1, i64 %67
  %79 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %79, align 2, !alias.scope !24, !noalias !21
  %80 = getelementptr inbounds i16, i16* %78, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %81, align 2, !alias.scope !24, !noalias !21
  br label %82

82:                                               ; preds = %66, %69
  %83 = icmp eq i64 %27, %17
  br i1 %83, label %129, label %84

84:                                               ; preds = %82, %19, %16
  %85 = phi i64 [ 0, %19 ], [ 0, %16 ], [ %27, %82 ]
  %86 = xor i64 %85, -1
  %87 = add nsw i64 %86, %17
  %88 = and i64 %17, 3
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %100, label %90

90:                                               ; preds = %84, %90
  %91 = phi i64 [ %97, %90 ], [ %85, %84 ]
  %92 = phi i64 [ %98, %90 ], [ %88, %84 ]
  %93 = getelementptr inbounds i8, i8* %11, i64 %91
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i16
  %96 = getelementptr inbounds i16, i16* %1, i64 %91
  store i16 %95, i16* %96, align 2
  %97 = add nuw nsw i64 %91, 1
  %98 = add i64 %92, -1
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %90, !llvm.loop !27

100:                                              ; preds = %90, %84
  %101 = phi i64 [ %85, %84 ], [ %97, %90 ]
  %102 = icmp ult i64 %87, 3
  br i1 %102, label %129, label %103

103:                                              ; preds = %100, %103
  %104 = phi i64 [ %124, %103 ], [ %101, %100 ]
  %105 = getelementptr inbounds i8, i8* %11, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i16
  %108 = getelementptr inbounds i16, i16* %1, i64 %104
  store i16 %107, i16* %108, align 2
  %109 = add nuw nsw i64 %104, 1
  %110 = getelementptr inbounds i8, i8* %11, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i16
  %113 = getelementptr inbounds i16, i16* %1, i64 %109
  store i16 %112, i16* %113, align 2
  %114 = add nuw nsw i64 %104, 2
  %115 = getelementptr inbounds i8, i8* %11, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i16
  %118 = getelementptr inbounds i16, i16* %1, i64 %114
  store i16 %117, i16* %118, align 2
  %119 = add nuw nsw i64 %104, 3
  %120 = getelementptr inbounds i8, i8* %11, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i16
  %123 = getelementptr inbounds i16, i16* %1, i64 %119
  store i16 %122, i16* %123, align 2
  %124 = add nuw nsw i64 %104, 4
  %125 = icmp eq i64 %124, %17
  br i1 %125, label %129, label %103, !llvm.loop !28

126:                                              ; preds = %2
  %127 = zext i32 %13 to i64
  %128 = shl nuw nsw i64 %127, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %3, i8* align 2 %11, i64 %128, i1 false) #5
  br label %129

129:                                              ; preds = %100, %103, %82, %14, %126
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !9}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !9}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !9}
!27 = distinct !{!27, !11}
!28 = distinct !{!28, !9}
