; ModuleID = '../../third_party/ffmpeg/libavcodec/mpegaudio_parser.c'
source_filename = "../../third_party/ffmpeg/libavcodec/mpegaudio_parser.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVCodecHWConfigInternal = type opaque
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVRational = type { i32, i32 }
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVCodecParser = type { [5 x i32], i32, {}*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.MpegAudioParseContext = type { %struct.ParseContext, i32, i32, i32, i32 }
%struct.ParseContext = type { i8*, i32, i32, i32, i32, i32, i32, i32, i64 }

@ff_mpegaudio_parser = hidden local_unnamed_addr global { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* } { [5 x i32] [i32 86058, i32 86016, i32 86017, i32 86029, i32 0], i32 64, i32 (%struct.AVCodecParserContext*)* null, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)* @mpegaudio_parse, void (%struct.AVCodecParserContext*)* @ff_parse_close, i32 (%struct.AVCodecContext*, i8*, i32)* null, %struct.AVCodecParser* null }, align 8
@.str = private unnamed_addr constant [19 x i8] c"MP3ADU full parser\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"Discarding invalid trailing data from mpeg audio stream.\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal i32 @mpegaudio_parse(%struct.AVCodecParserContext* nocapture, %struct.AVCodecContext*, i8** nocapture, i32* nocapture, i8*, i32) #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i8* %4, i8** %7, align 8
  store i32 %5, i32* %8, align 4
  %14 = bitcast %struct.AVCodecParserContext* %0 to %struct.MpegAudioParseContext**
  %15 = load %struct.MpegAudioParseContext*, %struct.MpegAudioParseContext** %14, align 8
  %16 = getelementptr inbounds %struct.MpegAudioParseContext, %struct.MpegAudioParseContext* %15, i64 0, i32 0
  %17 = getelementptr inbounds %struct.MpegAudioParseContext, %struct.MpegAudioParseContext* %15, i64 0, i32 0, i32 4
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %5, 0
  %20 = icmp sgt i32 %5, 0
  br i1 %20, label %21, label %139

21:                                               ; preds = %6
  %22 = getelementptr inbounds %struct.MpegAudioParseContext, %struct.MpegAudioParseContext* %15, i64 0, i32 1
  %23 = bitcast i32* %9 to i8*
  %24 = bitcast i32* %10 to i8*
  %25 = bitcast i32* %11 to i8*
  %26 = bitcast i32* %12 to i8*
  %27 = bitcast i32* %13 to i8*
  %28 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1, i64 0, i32 4
  %29 = getelementptr inbounds %struct.MpegAudioParseContext, %struct.MpegAudioParseContext* %15, i64 0, i32 3
  %30 = getelementptr inbounds %struct.MpegAudioParseContext, %struct.MpegAudioParseContext* %15, i64 0, i32 2
  %31 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1, i64 0, i32 82
  %32 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1, i64 0, i32 83
  %33 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 27
  %34 = getelementptr inbounds %struct.MpegAudioParseContext, %struct.MpegAudioParseContext* %15, i64 0, i32 4
  %35 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1, i64 0, i32 9
  %36 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 16
  br label %37

37:                                               ; preds = %21, %133
  %38 = phi i32 [ %5, %21 ], [ %134, %133 ]
  %39 = phi i32 [ -100, %21 ], [ %137, %133 ]
  %40 = phi i32 [ 0, %21 ], [ %136, %133 ]
  %41 = phi i32 [ %18, %21 ], [ %135, %133 ]
  %42 = load i32, i32* %22, align 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %48

44:                                               ; preds = %37
  %45 = icmp sgt i32 %38, %40
  br i1 %45, label %46, label %133

46:                                               ; preds = %44
  %47 = sext i32 %40 to i64
  br label %55

48:                                               ; preds = %37
  %49 = sub nsw i32 %38, %40
  %50 = icmp sgt i32 %49, %42
  %51 = select i1 %50, i32 %42, i32 %49
  %52 = add nsw i32 %51, %40
  %53 = sub nsw i32 %42, %51
  store i32 %53, i32* %22, align 8
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %139, label %133

55:                                               ; preds = %46, %127
  %56 = phi i64 [ %47, %46 ], [ %61, %127 ]
  %57 = phi i32 [ %41, %46 ], [ %65, %127 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #3
  store i32 -1431655766, i32* %9, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #3
  store i32 -1431655766, i32* %10, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #3
  store i32 -1431655766, i32* %11, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26) #3
  store i32 -1431655766, i32* %12, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #3
  %58 = load i32, i32* %28, align 8
  store i32 %58, i32* %13, align 4
  %59 = shl i32 %57, 8
  %60 = load i8*, i8** %7, align 8
  %61 = add nsw i64 %56, 1
  %62 = getelementptr inbounds i8, i8* %60, i64 %56
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = or i32 %59, %64
  %66 = call i32 @ff_mpa_decode_header(i32 %65, i32* nonnull %9, i32* nonnull %10, i32* nonnull %12, i32* nonnull %11, i32* nonnull %13) #3
  %67 = icmp slt i32 %66, 4
  br i1 %67, label %68, label %71

68:                                               ; preds = %55
  %69 = icmp sgt i64 %56, 3
  br i1 %69, label %70, label %127

70:                                               ; preds = %68
  store i32 -2, i32* %29, align 8
  br label %127

71:                                               ; preds = %55
  %72 = trunc i64 %61 to i32
  %73 = load i32, i32* %28, align 8
  %74 = icmp ne i32 %73, 0
  %75 = load i32, i32* %13, align 4
  %76 = icmp ne i32 %73, %75
  %77 = and i1 %74, %76
  %78 = zext i1 %77 to i32
  %79 = load i32, i32* %30, align 4
  %80 = xor i32 %79, %59
  %81 = and i32 %80, -128000
  %82 = icmp eq i32 %81, 0
  %83 = icmp eq i32 %79, 0
  %84 = or i1 %83, %82
  br i1 %84, label %87, label %85

85:                                               ; preds = %71
  store i32 %65, i32* %30, align 4
  store i32 -2, i32* %29, align 8
  %86 = add nsw i32 %66, -4
  store i32 %86, i32* %22, align 8
  br label %111

87:                                               ; preds = %71
  %88 = load i32, i32* %29, align 8
  store i32 %65, i32* %30, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %29, align 8
  %90 = add nsw i32 %66, -4
  store i32 %90, i32* %22, align 8
  %91 = icmp slt i32 %88, %78
  br i1 %91, label %111, label %92

92:                                               ; preds = %87
  %93 = load i32, i32* %9, align 4
  store i32 %93, i32* %31, align 8
  %94 = load i32, i32* %10, align 4
  store i32 %94, i32* %32, align 4
  %95 = load i32, i32* %12, align 4
  store i32 %95, i32* %33, align 8
  store i32 %75, i32* %28, align 8
  %96 = load i32, i32* %34, align 4
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %101

98:                                               ; preds = %92
  %99 = load i64, i64* %35, align 8
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %111

101:                                              ; preds = %98, %92
  store i32 1, i32* %34, align 4
  %102 = load i32, i32* %11, align 4
  %103 = sext i32 %102 to i64
  %104 = load i64, i64* %35, align 8
  %105 = sub nsw i64 %103, %104
  %106 = load i32, i32* %29, align 8
  %107 = sub nsw i32 %106, %78
  %108 = sext i32 %107 to i64
  %109 = sdiv i64 %105, %108
  %110 = add nsw i64 %109, %104
  store i64 %110, i64* %35, align 8
  br label %111

111:                                              ; preds = %85, %98, %87, %101
  %112 = load i32, i32* %36, align 8
  %113 = and i32 %112, 1
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %117, label %115

115:                                              ; preds = %111
  store i32 0, i32* %22, align 8
  %116 = load i32, i32* %8, align 4
  br label %124

117:                                              ; preds = %111
  %118 = icmp eq i32 %75, 86029
  br i1 %118, label %121, label %119

119:                                              ; preds = %117
  %120 = load i32, i32* %8, align 4
  br label %124

121:                                              ; preds = %117
  %122 = bitcast %struct.AVCodecContext* %1 to i8*
  call void (i8*, i8*, ...) @avpriv_report_missing_feature(i8* %122, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0)) #3
  store i8* null, i8** %2, align 8
  store i32 0, i32* %3, align 4
  %123 = load i32, i32* %8, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #3
  br label %160

124:                                              ; preds = %119, %115
  %125 = phi i32 [ %120, %119 ], [ %116, %115 ]
  %126 = phi i32 [ %39, %119 ], [ %116, %115 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #3
  br label %133

127:                                              ; preds = %70, %68
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #3
  %128 = load i32, i32* %8, align 4
  %129 = sext i32 %128 to i64
  %130 = icmp slt i64 %61, %129
  br i1 %130, label %55, label %131

131:                                              ; preds = %127
  %132 = trunc i64 %61 to i32
  br label %133

133:                                              ; preds = %131, %44, %48, %124
  %134 = phi i32 [ %38, %48 ], [ %125, %124 ], [ %38, %44 ], [ %128, %131 ]
  %135 = phi i32 [ 0, %48 ], [ %65, %124 ], [ %41, %44 ], [ %65, %131 ]
  %136 = phi i32 [ %52, %48 ], [ %72, %124 ], [ %40, %44 ], [ %132, %131 ]
  %137 = phi i32 [ %39, %48 ], [ %126, %124 ], [ %39, %44 ], [ %39, %131 ]
  %138 = icmp sgt i32 %134, %136
  br i1 %138, label %37, label %139

139:                                              ; preds = %133, %48, %6
  %140 = phi i32 [ %18, %6 ], [ 0, %48 ], [ %135, %133 ]
  %141 = phi i32 [ -100, %6 ], [ %52, %48 ], [ %137, %133 ]
  store i32 %140, i32* %17, align 4
  %142 = call i32 @ff_combine_frame(%struct.ParseContext* %16, i32 %141, i8** nonnull %7, i32* nonnull %8) #3
  %143 = icmp slt i32 %142, 0
  br i1 %143, label %144, label %146

144:                                              ; preds = %139
  store i8* null, i8** %2, align 8
  store i32 0, i32* %3, align 4
  %145 = load i32, i32* %8, align 4
  br label %160

146:                                              ; preds = %139
  %147 = load i32, i32* %8, align 4
  %148 = icmp ne i32 %147, 0
  %149 = and i1 %19, %148
  br i1 %149, label %150, label %156

150:                                              ; preds = %146
  %151 = getelementptr inbounds %struct.MpegAudioParseContext, %struct.MpegAudioParseContext* %15, i64 0, i32 1
  %152 = load i32, i32* %151, align 8
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %156

154:                                              ; preds = %150
  %155 = bitcast %struct.AVCodecContext* %1 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %155, i32 24, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0)) #3
  store i8* null, i8** %2, align 8
  store i32 0, i32* %3, align 4
  br label %160

156:                                              ; preds = %150, %146
  %157 = bitcast i8** %7 to i64*
  %158 = load i64, i64* %157, align 8
  %159 = bitcast i8** %2 to i64*
  store i64 %158, i64* %159, align 8
  store i32 %147, i32* %3, align 4
  br label %160

160:                                              ; preds = %121, %156, %154, %144
  %161 = phi i32 [ %145, %144 ], [ %141, %156 ], [ %141, %154 ], [ %123, %121 ]
  ret i32 %161
}

declare void @ff_parse_close(%struct.AVCodecParserContext*) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @ff_mpa_decode_header(i32, i32*, i32*, i32*, i32*, i32*) local_unnamed_addr #1

declare void @avpriv_report_missing_feature(i8*, i8*, ...) local_unnamed_addr #1

declare i32 @ff_combine_frame(%struct.ParseContext*, i32, i8**, i32*) local_unnamed_addr #1

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
