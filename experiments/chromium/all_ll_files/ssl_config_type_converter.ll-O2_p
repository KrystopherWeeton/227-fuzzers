; ModuleID = '../../services/network/ssl_config_type_converter.cc'
source_filename = "../../services/network/ssl_config_type_converter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.net::SSLContextConfig" = type <{ i16, i16, i16, [2 x i8], %"class.std::__1::vector", i8, i8, [6 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i16*, i16*, %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { i16* }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.network::mojom::SSLConfig"* }
%"class.network::mojom::SSLConfig" = type <{ i8, i8, i8, i8, i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.3", i8, i8, [6 x i8] }>
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::basic_string"* }
%"struct.net::CertVerifier::Config" = type { i8, i8, i8, i8, %class.scoped_refptr, %"class.std::__1::vector.16", %"class.std::__1::vector.16" }
%class.scoped_refptr = type { %"class.net::CRLSet"* }
%"class.net::CRLSet" = type opaque
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %class.scoped_refptr.18*, %class.scoped_refptr.18*, %"class.std::__1::__compressed_pair.31" }
%class.scoped_refptr.18 = type { %"class.net::X509Certificate"* }
%"class.net::X509Certificate" = type { %"class.base::RefCountedThreadSafe", %"struct.net::CertPrincipal", %"struct.net::CertPrincipal", %"class.base::Time", %"class.base::Time", %"class.std::__1::basic_string", %"class.std::__1::unique_ptr.20", %"class.std::__1::vector.24" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.19" }
%"struct.std::__1::__atomic_base.19" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.net::CertPrincipal" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.3", %"class.std::__1::vector.3", %"class.std::__1::vector.3", %"class.std::__1::vector.3" }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %struct.crypto_buffer_st* }
%struct.crypto_buffer_st = type opaque
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"class.std::__1::unique_ptr.20"*, %"class.std::__1::unique_ptr.20"*, %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.std::__1::unique_ptr.20"* }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %class.scoped_refptr.18* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorItNS_9allocatorItEEE6assignIPtEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN4mojo29MojoSSLVersionToNetSSLVersionEN7network5mojom10SSLVersionE(i32) local_unnamed_addr #0 {
  %2 = icmp ult i32 %0, 4
  br i1 %2, label %3, label %5

3:                                                ; preds = %1
  %4 = add i32 %0, 769
  ret i32 %4

5:                                                ; preds = %1
  ret i32 772
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4mojo31MojoSSLConfigToSSLContextConfigERKNS_9StructPtrIN7network5mojom9SSLConfigEEE(%"struct.net::SSLContextConfig"* noalias sret, %"class.mojo::StructPtr"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 {
  %3 = bitcast %"struct.net::SSLContextConfig"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 -86, i64 40, i1 false)
  tail call void @_ZN3net16SSLContextConfigC1Ev(%"struct.net::SSLContextConfig"* %0) #7
  %4 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.network::mojom::SSLConfig"*, %"class.network::mojom::SSLConfig"** %4, align 8
  %6 = getelementptr inbounds %"class.network::mojom::SSLConfig", %"class.network::mojom::SSLConfig"* %5, i64 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %7, 4
  %9 = trunc i32 %7 to i16
  %10 = add i16 %9, 769
  %11 = select i1 %8, i16 %10, i16 772
  %12 = getelementptr inbounds %"struct.net::SSLContextConfig", %"struct.net::SSLContextConfig"* %0, i64 0, i32 0
  store i16 %11, i16* %12, align 8
  %13 = getelementptr inbounds %"class.network::mojom::SSLConfig", %"class.network::mojom::SSLConfig"* %5, i64 0, i32 5
  %14 = load i32, i32* %13, align 8
  %15 = icmp ult i32 %14, 4
  %16 = trunc i32 %14 to i16
  %17 = add i16 %16, 769
  %18 = select i1 %15, i16 %17, i16 772
  %19 = getelementptr inbounds %"struct.net::SSLContextConfig", %"struct.net::SSLContextConfig"* %0, i64 0, i32 1
  store i16 %18, i16* %19, align 2
  %20 = getelementptr inbounds %"class.network::mojom::SSLConfig", %"class.network::mojom::SSLConfig"* %5, i64 0, i32 6
  %21 = load i32, i32* %20, align 4
  %22 = icmp ult i32 %21, 4
  %23 = trunc i32 %21 to i16
  %24 = add i16 %23, 769
  %25 = select i1 %22, i16 %24, i16 772
  %26 = getelementptr inbounds %"struct.net::SSLContextConfig", %"struct.net::SSLContextConfig"* %0, i64 0, i32 2
  store i16 %25, i16* %26, align 4
  %27 = getelementptr inbounds %"class.network::mojom::SSLConfig", %"class.network::mojom::SSLConfig"* %5, i64 0, i32 7
  %28 = getelementptr inbounds %"struct.net::SSLContextConfig", %"struct.net::SSLContextConfig"* %0, i64 0, i32 4
  %29 = icmp eq %"class.std::__1::vector"* %28, %27
  br i1 %29, label %36, label %30

30:                                               ; preds = %2
  %31 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %27, i64 0, i32 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = getelementptr inbounds %"class.network::mojom::SSLConfig", %"class.network::mojom::SSLConfig"* %5, i64 0, i32 7, i32 0, i32 1
  %34 = load i16*, i16** %33, align 8
  tail call void @_ZNSt3__16vectorItNS_9allocatorItEEE6assignIPtEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %28, i16* %32, i16* %34) #7
  %35 = load %"class.network::mojom::SSLConfig"*, %"class.network::mojom::SSLConfig"** %4, align 8
  br label %36

36:                                               ; preds = %2, %30
  %37 = phi %"class.network::mojom::SSLConfig"* [ %5, %2 ], [ %35, %30 ]
  %38 = getelementptr inbounds %"class.network::mojom::SSLConfig", %"class.network::mojom::SSLConfig"* %37, i64 0, i32 9
  %39 = load i8, i8* %38, align 8, !range !2
  %40 = getelementptr inbounds %"struct.net::SSLContextConfig", %"struct.net::SSLContextConfig"* %0, i64 0, i32 5
  store i8 %39, i8* %40, align 8
  %41 = getelementptr inbounds %"class.network::mojom::SSLConfig", %"class.network::mojom::SSLConfig"* %37, i64 0, i32 10
  %42 = load i8, i8* %41, align 1, !range !2
  %43 = getelementptr inbounds %"struct.net::SSLContextConfig", %"struct.net::SSLContextConfig"* %0, i64 0, i32 6
  store i8 %42, i8* %43, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN3net16SSLContextConfigC1Ev(%"struct.net::SSLContextConfig"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4mojo33MojoSSLConfigToCertVerifierConfigERKNS_9StructPtrIN7network5mojom9SSLConfigEEE(%"struct.net::CertVerifier::Config"* noalias sret, %"class.mojo::StructPtr"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %"struct.net::CertVerifier::Config", %"struct.net::CertVerifier::Config"* %0, i64 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 -86, i64 64, i1 false)
  tail call void @_ZN3net12CertVerifier6ConfigC1Ev(%"struct.net::CertVerifier::Config"* %0) #7
  %4 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.network::mojom::SSLConfig"*, %"class.network::mojom::SSLConfig"** %4, align 8
  %6 = getelementptr inbounds %"class.network::mojom::SSLConfig", %"class.network::mojom::SSLConfig"* %5, i64 0, i32 0
  %7 = load i8, i8* %6, align 8, !range !2
  store i8 %7, i8* %3, align 8
  %8 = getelementptr inbounds %"class.network::mojom::SSLConfig", %"class.network::mojom::SSLConfig"* %5, i64 0, i32 1
  %9 = load i8, i8* %8, align 1, !range !2
  %10 = getelementptr inbounds %"struct.net::CertVerifier::Config", %"struct.net::CertVerifier::Config"* %0, i64 0, i32 1
  store i8 %9, i8* %10, align 1
  %11 = getelementptr inbounds %"class.network::mojom::SSLConfig", %"class.network::mojom::SSLConfig"* %5, i64 0, i32 2
  %12 = load i8, i8* %11, align 2, !range !2
  %13 = getelementptr inbounds %"struct.net::CertVerifier::Config", %"struct.net::CertVerifier::Config"* %0, i64 0, i32 2
  store i8 %12, i8* %13, align 2
  %14 = getelementptr inbounds %"class.network::mojom::SSLConfig", %"class.network::mojom::SSLConfig"* %5, i64 0, i32 3
  %15 = load i8, i8* %14, align 1, !range !2
  %16 = getelementptr inbounds %"struct.net::CertVerifier::Config", %"struct.net::CertVerifier::Config"* %0, i64 0, i32 3
  store i8 %15, i8* %16, align 1
  ret void
}

declare void @_ZN3net12CertVerifier6ConfigC1Ev(%"struct.net::CertVerifier::Config"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorItNS_9allocatorItEEE6assignIPtEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"*, i16*, i16*) local_unnamed_addr #1 comdat align 2 {
  %4 = ptrtoint i16* %2 to i64
  %5 = ptrtoint i16* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 1
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i16** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 1
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i16*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i16** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 1
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i16, i16* %1, i64 %22
  %25 = select i1 %23, i16* %24, i16* %2
  %26 = ptrtoint i16* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 1
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i16* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %31, i8* align 2 %32, i64 %27, i1 false) #7
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 1
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i16* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %40, i8* align 2 %41, i64 %36, i1 false) #7
  %42 = inttoptr i64 %35 to i16*
  %43 = getelementptr inbounds i16, i16* %42, i64 %39
  %44 = ptrtoint i16* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %88

47:                                               ; preds = %33
  %48 = getelementptr inbounds i16, i16* %16, i64 %28
  store i16* %48, i16** %18, align 8
  br label %88

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i16** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #8
  %55 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #7
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp slt i64 %6, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #9
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 1
  %63 = icmp ult i64 %62, 4611686018427387903
  %64 = icmp ult i64 %57, %7
  %65 = select i1 %64, i64 %7, i64 %57
  %66 = select i1 %63, i64 %65, i64 9223372036854775807
  %67 = icmp slt i64 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %61
  %69 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %69) #9
  unreachable

70:                                               ; preds = %61
  %71 = shl i64 %66, 1
  %72 = tail call i8* @_Znwm(i64 %71) #8
  %73 = bitcast i8* %72 to i16*
  %74 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %75 = bitcast i16** %74 to i8**
  store i8* %72, i8** %75, align 8
  %76 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %72, i8** %76, align 8
  %77 = getelementptr inbounds i16, i16* %73, i64 %66
  store i16* %77, i16** %8, align 8
  %78 = bitcast i16** %74 to i64*
  %79 = ptrtoint i8* %72 to i64
  %80 = icmp sgt i64 %6, 0
  br i1 %80, label %81, label %86

81:                                               ; preds = %70
  %82 = lshr exact i64 %6, 1
  %83 = bitcast i16* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %72, i8* align 2 %83, i64 %6, i1 false) #7
  %84 = getelementptr inbounds i16, i16* %73, i64 %82
  %85 = ptrtoint i16* %84 to i64
  br label %86

86:                                               ; preds = %70, %81
  %87 = phi i64 [ %85, %81 ], [ %79, %70 ]
  store i64 %87, i64* %78, align 8
  br label %88

88:                                               ; preds = %45, %47, %86
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
