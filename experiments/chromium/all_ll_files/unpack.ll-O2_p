; ModuleID = '../../third_party/unrar/src/unpack.cpp'
source_filename = "../../third_party/unrar/src/unpack.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%class.ErrorHandler = type <{ i32, i32, i8, i8, i8, i8, i8, i8, [2 x i8] }>
%class.SubAllocator = type { i64, [38 x i8], [128 x i8], i8, i8*, i8*, i8*, [38 x %"struct.SubAllocator::RAR_NODE"], i8*, i8*, i8*, i8* }
%"struct.SubAllocator::RAR_NODE" = type { %"struct.SubAllocator::RAR_NODE"* }
%class.ModelPPM = type <{ i8, [25 x [16 x %struct.RARPPM_SEE2_CONTEXT]], %struct.RARPPM_SEE2_CONTEXT, [3 x i8], %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT*, %struct.RARPPM_STATE*, i32, i32, i32, i32, i32, i32, [256 x i8], [256 x i8], [256 x i8], [256 x i8], i8, i8, i8, i8, [128 x [64 x i16]], [4 x i8], %class.RangeCoder, %class.SubAllocator }>
%struct.RARPPM_SEE2_CONTEXT = type { i16, i8, i8 }
%struct.RARPPM_CONTEXT = type <{ i16, %union.anon.7, %struct.RARPPM_CONTEXT* }>
%union.anon.7 = type { %"struct.RARPPM_CONTEXT::FreqData" }
%"struct.RARPPM_CONTEXT::FreqData" = type <{ i16, %struct.RARPPM_STATE* }>
%struct.RARPPM_STATE = type <{ i8, i8, %struct.RARPPM_CONTEXT* }>
%class.RangeCoder = type { i32, i32, i32, %"struct.RangeCoder::SUBRANGE", %class.Unpack* }
%"struct.RangeCoder::SUBRANGE" = type { i32, i32, i32 }
%class.Unpack = type { %class.ComprDataIO*, %class.BitInput, %class.ThreadPool*, %struct.UnpackThreadData*, i32, i8*, %class.Array, %class.Array, %class.Array.5, [4 x i32], i32, i32, i32, i64, i64, i32, i32, %struct.UnpackBlockHeader, %struct.UnpackBlockTables, i64, i8*, %class.FragmentedWindow, i8, i64, i8, i8, i8, i64, i8, [256 x i16], [256 x i16], [256 x i16], [256 x i16], [256 x i8], [256 x i8], [256 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.DecodeTable], [1028 x i8], i8, i32, i32, i32, [4 x %struct.AudioVariables], i32, i32, %class.ModelPPM, i32, [404 x i8], i32, i8, i8, i8, %class.RarVM, %class.BitInput, %class.Array.8, %class.Array.8, %class.Array.10, i32, i64, i64 }
%class.ComprDataIO = type <{ i8, [7 x i8], i64, i8*, i8, [7 x i8], i64, i8*, i64, i8*, i64, i8, i8, i8, i8, [4 x i8], %class.File*, %class.File*, %class.CmdAdd*, %struct.FileHeader*, i64*, %class.CryptData*, %class.CryptData*, i32, i32, i8, i8, i8, [5 x i8], i64, i64, i64, i64, i64, i64, i64, %class.DataHash, %class.DataHash, %class.DataHash, i8, i8, [6 x i8] }>
%class.File = type { i32 (...)**, i64, i8, i32, i8, i32, i8, i8, i8, i8, i8, i8, [2048 x i32], i32, i64 }
%class.CmdAdd = type opaque
%struct.FileHeader = type { %struct.BlockHeader, i8, i32, i8, %union.anon, [2048 x i32], %class.Array, %class.RarTime, %class.RarTime, %class.RarTime, i64, i64, i64, %struct.HashValue, i32, i8, i8, i8, i8, i32, i8, [16 x i8], [16 x i8], i8, [8 x i8], i8, [32 x i8], i32, i8, i8, i8, i8, i64, i8, i8, i8, i32, i32, [2048 x i32], i8, i8, i8, i8, [256 x i8], [256 x i8], i32, i32 }
%struct.BlockHeader = type { %struct.BaseBlock, i32 }
%struct.BaseBlock = type { i32, i32, i32, i32, i8 }
%union.anon = type { i32 }
%class.RarTime = type { i64 }
%struct.HashValue = type { i32, %union.anon.0 }
%union.anon.0 = type { i32, [28 x i8] }
%class.CryptData = type { [4 x %"struct.CryptData::KDF3CacheItem"], i32, [4 x %"struct.CryptData::KDF5CacheItem"], i32, i32, %class.Rijndael, [256 x i32], [256 x i8], [4 x i32], [3 x i8], [4 x i16] }
%"struct.CryptData::KDF3CacheItem" = type { %class.SecPassword, [8 x i8], [16 x i8], [16 x i8], i8, [3 x i8] }
%class.SecPassword = type <{ [128 x i32], i8, i8, [2 x i8] }>
%"struct.CryptData::KDF5CacheItem" = type { %class.SecPassword, [16 x i8], [32 x i8], i32, [32 x i8], [32 x i8] }
%class.Rijndael = type { i8, i32, [16 x i8], [15 x [4 x [4 x i8]]] }
%class.DataHash = type <{ i32, i32, %struct.blake2sp_state*, %class.ThreadPool*, i32, [4 x i8] }>
%struct.blake2sp_state = type <{ [8 x %struct.blake2s_state], %struct.blake2s_state, [512 x i8], i64, %class.ThreadPool*, i32, [4 x i8] }>
%struct.blake2s_state = type <{ [240 x i8], i8*, i32*, i32*, i32*, i64, i8, [7 x i8] }>
%class.ThreadPool = type { i32, [64 x i64], i32, i32, [64 x %"struct.ThreadPool::QueueEntry"], i32, i32, i8, i32, %union.pthread_cond_t, %union.pthread_mutex_t, i8, %union.pthread_cond_t, %union.pthread_mutex_t, %union.pthread_mutex_t }
%"struct.ThreadPool::QueueEntry" = type { void (i8*)*, i8* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1, %union.anon.2, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1 = type { i64 }
%union.anon.2 = type { i64 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.UnpackThreadData = type <{ %class.Unpack*, %class.BitInput, i8, [3 x i8], %struct.UnpackBlockHeader, i8, [3 x i8], %struct.UnpackBlockTables, i32, i8, i8, i8, i8, %struct.UnpackDecodedItem*, i32, i32, i32, [4 x i8] }>
%struct.UnpackDecodedItem = type { i32, i16, %union.anon.4 }
%union.anon.4 = type { i32 }
%class.Array = type <{ i8*, i64, i64, i64, i8, [7 x i8] }>
%class.Array.5 = type <{ %struct.UnpackFilter*, i64, i64, i64, i8, [7 x i8] }>
%struct.UnpackFilter = type { i8, i32, i32, i8, i8 }
%struct.UnpackBlockHeader = type { i32, i32, i32, i32, i8, i8 }
%struct.UnpackBlockTables = type { %struct.DecodeTable, %struct.DecodeTable, %struct.DecodeTable, %struct.DecodeTable, %struct.DecodeTable }
%struct.DecodeTable = type { i32, [16 x i32], [16 x i32], i32, [1024 x i8], [1024 x i16], [306 x i16] }
%class.FragmentedWindow = type { [32 x i8*], [32 x i64] }
%struct.AudioVariables = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [11 x i32], i32, i32 }
%class.RarVM = type { i8*, [8 x i32] }
%class.BitInput = type { i32, i32, i8, i8* }
%class.Array.8 = type <{ %struct.UnpackFilter30**, i64, i64, i64, i8, [7 x i8] }>
%struct.UnpackFilter30 = type { i32, i32, i8, i32, %struct.VM_PreparedProgram }
%struct.VM_PreparedProgram = type <{ i32, [7 x i32], i8*, i32, [4 x i8] }>
%class.Array.10 = type <{ i32*, i64, i64, i64, i8, [7 x i8] }>
%struct.RARPPM_MEM_BLK = type <{ i16, i16, %struct.RARPPM_MEM_BLK*, %struct.RARPPM_MEM_BLK* }>
%struct.UnpackThreadDataList = type { %struct.UnpackThreadData*, i32 }

$_ZN12SubAllocator14GlueFreeBlocksEv = comdat any

$_ZN14RARPPM_CONTEXT13decodeSymbol1EP8ModelPPM = comdat any

$_ZN14RARPPM_CONTEXT13decodeSymbol2EP8ModelPPM = comdat any

$_ZN8ModelPPM11UpdateModelEv = comdat any

$_ZN6Unpack10CopyStringEjj = comdat any

$_ZN5ArrayIP14UnpackFilter30E3AddEm = comdat any

$_ZN8ModelPPM16CreateSuccessorsEbP12RARPPM_STATE = comdat any

$_ZN5ArrayIhE3AddEm = comdat any

$_ZN5ArrayIiE3AddEm = comdat any

$_ZN5ArrayI12UnpackFilterE3AddEm = comdat any

@ErrHandler = external global %class.ErrorHandler, align 4
@_ZZN8ModelPPM16RestartModelRareEvE10InitBinEsc = internal unnamed_addr constant [8 x i16] [i16 15581, i16 7999, i16 22975, i16 18675, i16 25761, i16 23228, i16 26162, i16 24657], align 16
@_ZZN6Unpack7ShortLZEvE9ShortLen1 = internal unnamed_addr constant [16 x i32] [i32 1, i32 3, i32 4, i32 4, i32 5, i32 6, i32 7, i32 8, i32 8, i32 4, i32 4, i32 5, i32 6, i32 6, i32 4, i32 0], align 16
@_ZZN6Unpack7ShortLZEvE9ShortXor1 = internal unnamed_addr constant [15 x i32] [i32 0, i32 160, i32 208, i32 224, i32 240, i32 248, i32 252, i32 254, i32 255, i32 192, i32 128, i32 144, i32 152, i32 156, i32 176], align 16
@_ZZN6Unpack7ShortLZEvE9ShortLen2 = internal unnamed_addr constant [16 x i32] [i32 2, i32 3, i32 3, i32 3, i32 4, i32 4, i32 5, i32 6, i32 6, i32 4, i32 4, i32 5, i32 6, i32 6, i32 4, i32 0], align 16
@_ZZN6Unpack7ShortLZEvE9ShortXor2 = internal unnamed_addr constant [15 x i32] [i32 0, i32 64, i32 96, i32 160, i32 208, i32 224, i32 240, i32 248, i32 252, i32 192, i32 128, i32 144, i32 152, i32 156, i32 176], align 16
@_ZL5DecL2 = internal unnamed_addr constant [10 x i32] [i32 40960, i32 49152, i32 53248, i32 57344, i32 59904, i32 60928, i32 61440, i32 61952, i32 62016, i32 65535], align 16
@_ZL5PosL2 = internal unnamed_addr constant [13 x i32] [i32 0, i32 0, i32 0, i32 0, i32 5, i32 7, i32 9, i32 13, i32 18, i32 22, i32 26, i32 34, i32 36], align 16
@_ZL5DecL1 = internal unnamed_addr constant [11 x i32] [i32 32768, i32 40960, i32 49152, i32 53248, i32 57344, i32 59904, i32 60928, i32 61440, i32 61952, i32 61952, i32 65535], align 16
@_ZL5PosL1 = internal unnamed_addr constant [13 x i32] [i32 0, i32 0, i32 0, i32 2, i32 3, i32 5, i32 7, i32 11, i32 16, i32 20, i32 24, i32 32, i32 32], align 16
@_ZL6DecHf2 = internal unnamed_addr constant [8 x i32] [i32 4096, i32 9216, i32 32768, i32 49152, i32 64000, i32 65535, i32 65535, i32 65535], align 16
@_ZL6PosHf2 = internal unnamed_addr constant [13 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 7, i32 53, i32 117, i32 233, i32 0, i32 0], align 16
@_ZL6DecHf1 = internal unnamed_addr constant [8 x i32] [i32 8192, i32 49152, i32 57344, i32 61440, i32 61952, i32 61952, i32 63456, i32 65535], align 16
@_ZL6PosHf1 = internal unnamed_addr constant [13 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i32 44, i32 60, i32 76, i32 80, i32 80, i32 127], align 16
@_ZL6DecHf0 = internal unnamed_addr constant [9 x i32] [i32 32768, i32 49152, i32 57344, i32 61952, i32 61952, i32 61952, i32 61952, i32 61952, i32 65535], align 16
@_ZL6PosHf0 = internal unnamed_addr constant [13 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, i32 16, i32 24, i32 33, i32 33, i32 33, i32 33, i32 33], align 16
@_ZL6DecHf4 = internal unnamed_addr constant [6 x i32] [i32 65280, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535], align 16
@_ZL6PosHf4 = internal unnamed_addr constant [13 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 255, i32 0, i32 0, i32 0], align 16
@_ZL6DecHf3 = internal unnamed_addr constant [7 x i32] [i32 2048, i32 9216, i32 60928, i32 65152, i32 65535, i32 65535, i32 65535], align 16
@_ZL6PosHf3 = internal unnamed_addr constant [13 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 16, i32 218, i32 251, i32 0, i32 0], align 16
@_ZZN6Unpack8Unpack20EbE7DDecode = internal unnamed_addr constant [48 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 6, i32 8, i32 12, i32 16, i32 24, i32 32, i32 48, i32 64, i32 96, i32 128, i32 192, i32 256, i32 384, i32 512, i32 768, i32 1024, i32 1536, i32 2048, i32 3072, i32 4096, i32 6144, i32 8192, i32 12288, i32 16384, i32 24576, i32 32768, i32 49152, i32 65536, i32 98304, i32 131072, i32 196608, i32 262144, i32 327680, i32 393216, i32 458752, i32 524288, i32 589824, i32 655360, i32 720896, i32 786432, i32 851968, i32 917504, i32 983040], align 16
@_ZZN6Unpack8Unpack20EbE5DBits = internal unnamed_addr constant [48 x i8] c"\00\00\00\00\01\01\02\02\03\03\04\04\05\05\06\06\07\07\08\08\09\09\0A\0A\0B\0B\0C\0C\0D\0D\0E\0E\0F\0F\10\10\10\10\10\10\10\10\10\10\10\10\10\10", align 16
@_ZZN6Unpack8Unpack29EbE7LDecode = internal unnamed_addr constant [28 x i8] c"\00\01\02\03\04\05\06\07\08\0A\0C\0E\10\14\18\1C (08@P`p\80\A0\C0\E0", align 16
@_ZZN6Unpack8Unpack29EbE5LBits = internal unnamed_addr constant [28 x i8] c"\00\00\00\00\00\00\00\00\01\01\01\01\02\02\02\02\03\03\03\03\04\04\04\04\05\05\05\05", align 16
@_ZZN6Unpack8Unpack29EbE7DDecode = internal unnamed_addr global [64 x i32] zeroinitializer, align 16
@_ZZN6Unpack8Unpack29EbE5DBits = internal unnamed_addr global [64 x i8] zeroinitializer, align 16
@_ZZN6Unpack8Unpack29EbE16DBitLengthCounts = internal unnamed_addr constant [19 x i32] [i32 4, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 14, i32 0, i32 12], align 16
@_ZZN6Unpack8Unpack29EbE8SDDecode = internal unnamed_addr constant [8 x i8] c"\00\04\08\10 @\80\C0", align 1
@_ZZN6Unpack8Unpack29EbE6SDBits = internal unnamed_addr constant [8 x i8] c"\02\02\03\04\05\06\06\06", align 1
@_ZL9ExpEscape = internal unnamed_addr constant [16 x i8] c"\19\0E\09\07\05\05\04\04\04\03\03\03\02\02\02\02", align 16
@.str = private unnamed_addr constant [44 x i32] [i32 77, i32 97, i32 120, i32 105, i32 109, i32 117, i32 109, i32 32, i32 97, i32 108, i32 108, i32 111, i32 119, i32 101, i32 100, i32 32, i32 97, i32 114, i32 114, i32 97, i32 121, i32 32, i32 115, i32 105, i32 122, i32 101, i32 32, i32 40, i32 37, i32 117, i32 41, i32 32, i32 105, i32 115, i32 32, i32 101, i32 120, i32 99, i32 101, i32 101, i32 100, i32 101, i32 100, i32 0], align 4

@_ZN12SubAllocatorC1Ev = hidden unnamed_addr alias void (%class.SubAllocator*), void (%class.SubAllocator*)* @_ZN12SubAllocatorC2Ev
@_ZN8ModelPPMC1Ev = hidden unnamed_addr alias void (%class.ModelPPM*), void (%class.ModelPPM*)* @_ZN8ModelPPMC2Ev
@_ZN16FragmentedWindowC1Ev = hidden unnamed_addr alias void (%class.FragmentedWindow*), void (%class.FragmentedWindow*)* @_ZN16FragmentedWindowC2Ev
@_ZN16FragmentedWindowD1Ev = hidden unnamed_addr alias void (%class.FragmentedWindow*), void (%class.FragmentedWindow*)* @_ZN16FragmentedWindowD2Ev
@_ZN6UnpackC1EP11ComprDataIO = hidden unnamed_addr alias void (%class.Unpack*, %class.ComprDataIO*), void (%class.Unpack*, %class.ComprDataIO*)* @_ZN6UnpackC2EP11ComprDataIO
@_ZN6UnpackD1Ev = hidden unnamed_addr alias void (%class.Unpack*), void (%class.Unpack*)* @_ZN6UnpackD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10RangeCoder11InitDecoderEP6Unpack(%class.RangeCoder* nocapture, %class.Unpack*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.RangeCoder, %class.RangeCoder* %0, i64 0, i32 4
  store %class.Unpack* %1, %class.Unpack** %3, align 8
  %4 = getelementptr inbounds %class.RangeCoder, %class.RangeCoder* %0, i64 0, i32 1
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %class.RangeCoder, %class.RangeCoder* %0, i64 0, i32 0
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %class.RangeCoder, %class.RangeCoder* %0, i64 0, i32 2
  store i32 -1, i32* %6, align 8
  %7 = getelementptr inbounds %class.Unpack, %class.Unpack* %1, i64 0, i32 1, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp sgt i32 %8, 32738
  br i1 %9, label %10, label %14

10:                                               ; preds = %2
  %11 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %1) #11
  %12 = load i32, i32* %7, align 8
  %13 = icmp sgt i32 %12, 32767
  br i1 %13, label %23, label %14

14:                                               ; preds = %10, %2
  %15 = phi i32 [ %12, %10 ], [ %8, %2 ]
  %16 = getelementptr inbounds %class.Unpack, %class.Unpack* %1, i64 0, i32 1, i32 3
  %17 = load i8*, i8** %16, align 8
  %18 = add nsw i32 %15, 1
  store i32 %18, i32* %7, align 8
  %19 = sext i32 %15 to i64
  %20 = getelementptr inbounds i8, i8* %17, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  br label %23

23:                                               ; preds = %10, %14
  %24 = phi i32 [ %22, %14 ], [ 0, %10 ]
  store i32 %24, i32* %4, align 4
  %25 = shl nuw nsw i32 %24, 8
  %26 = load %class.Unpack*, %class.Unpack** %3, align 8
  %27 = getelementptr inbounds %class.Unpack, %class.Unpack* %26, i64 0, i32 1, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = icmp sgt i32 %28, 32738
  br i1 %29, label %30, label %34

30:                                               ; preds = %23
  %31 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %26) #11
  %32 = load i32, i32* %27, align 8
  %33 = icmp sgt i32 %32, 32767
  br i1 %33, label %43, label %34

34:                                               ; preds = %30, %23
  %35 = phi i32 [ %32, %30 ], [ %28, %23 ]
  %36 = getelementptr inbounds %class.Unpack, %class.Unpack* %26, i64 0, i32 1, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = add nsw i32 %35, 1
  store i32 %38, i32* %27, align 8
  %39 = sext i32 %35 to i64
  %40 = getelementptr inbounds i8, i8* %37, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  br label %43

43:                                               ; preds = %34, %30
  %44 = phi i32 [ %42, %34 ], [ 0, %30 ]
  %45 = or i32 %44, %25
  store i32 %45, i32* %4, align 4
  %46 = shl nuw nsw i32 %45, 8
  %47 = load %class.Unpack*, %class.Unpack** %3, align 8
  %48 = getelementptr inbounds %class.Unpack, %class.Unpack* %47, i64 0, i32 1, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = icmp sgt i32 %49, 32738
  br i1 %50, label %51, label %55

51:                                               ; preds = %43
  %52 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %47) #11
  %53 = load i32, i32* %48, align 8
  %54 = icmp sgt i32 %53, 32767
  br i1 %54, label %64, label %55

55:                                               ; preds = %51, %43
  %56 = phi i32 [ %53, %51 ], [ %49, %43 ]
  %57 = getelementptr inbounds %class.Unpack, %class.Unpack* %47, i64 0, i32 1, i32 3
  %58 = load i8*, i8** %57, align 8
  %59 = add nsw i32 %56, 1
  store i32 %59, i32* %48, align 8
  %60 = sext i32 %56 to i64
  %61 = getelementptr inbounds i8, i8* %58, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  br label %64

64:                                               ; preds = %55, %51
  %65 = phi i32 [ %63, %55 ], [ 0, %51 ]
  %66 = or i32 %65, %46
  store i32 %66, i32* %4, align 4
  %67 = shl nuw i32 %66, 8
  %68 = load %class.Unpack*, %class.Unpack** %3, align 8
  %69 = getelementptr inbounds %class.Unpack, %class.Unpack* %68, i64 0, i32 1, i32 0
  %70 = load i32, i32* %69, align 8
  %71 = icmp sgt i32 %70, 32738
  br i1 %71, label %72, label %76

72:                                               ; preds = %64
  %73 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %68) #11
  %74 = load i32, i32* %69, align 8
  %75 = icmp sgt i32 %74, 32767
  br i1 %75, label %85, label %76

76:                                               ; preds = %72, %64
  %77 = phi i32 [ %74, %72 ], [ %70, %64 ]
  %78 = getelementptr inbounds %class.Unpack, %class.Unpack* %68, i64 0, i32 1, i32 3
  %79 = load i8*, i8** %78, align 8
  %80 = add nsw i32 %77, 1
  store i32 %80, i32* %69, align 8
  %81 = sext i32 %77 to i64
  %82 = getelementptr inbounds i8, i8* %79, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  br label %85

85:                                               ; preds = %76, %72
  %86 = phi i32 [ %84, %76 ], [ 0, %72 ]
  %87 = or i32 %86, %67
  store i32 %87, i32* %4, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN12SubAllocatorC2Ev(%class.SubAllocator* nocapture) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 0
  store i64 0, i64* %2, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN12SubAllocator5CleanEv(%class.SubAllocator* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 0
  store i64 0, i64* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SubAllocator16StopSubAllocatorEv(%class.SubAllocator* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  store i64 0, i64* %2, align 8
  %6 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 4
  %7 = load i8*, i8** %6, align 8
  tail call void @free(i8* %7) #11
  br label %8

8:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12SubAllocator17StartSubAllocatorEi(%class.SubAllocator* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = shl i32 %1, 20
  %4 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = zext i32 %3 to i64
  %7 = icmp eq i64 %5, %6
  br i1 %7, label %26, label %8

8:                                                ; preds = %2
  %9 = icmp eq i64 %5, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %8
  store i64 0, i64* %4, align 8
  %11 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 4
  %12 = load i8*, i8** %11, align 8
  tail call void @free(i8* %12) #11
  br label %13

13:                                               ; preds = %8, %10
  %14 = udiv i32 %3, 12
  %15 = mul i32 %14, 20
  %16 = add i32 %15, 40
  %17 = zext i32 %16 to i64
  %18 = tail call noalias i8* @malloc(i64 %17) #11
  %19 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 4
  store i8* %18, i8** %19, align 8
  %20 = icmp eq i8* %18, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %13
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  br label %26

22:                                               ; preds = %13
  %23 = getelementptr inbounds i8, i8* %18, i64 %17
  %24 = getelementptr inbounds i8, i8* %23, i64 -20
  %25 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 10
  store i8* %24, i8** %25, align 8
  store i64 %6, i64* %4, align 8
  br label %26

26:                                               ; preds = %21, %22, %2
  %27 = phi i1 [ true, %2 ], [ false, %21 ], [ true, %22 ]
  ret i1 %27
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

declare void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SubAllocator16InitSubAllocatorEv(%class.SubAllocator* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 7, i64 0
  %3 = bitcast %"struct.SubAllocator::RAR_NODE"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 304, i1 false)
  %4 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 4
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 8
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = sdiv i64 %10, 96
  %12 = trunc i64 %11 to i32
  %13 = mul i32 %12, 84
  %14 = udiv i32 %13, 12
  %15 = mul i32 %14, 20
  %16 = trunc i64 %10 to i32
  %17 = sub i32 %16, %13
  %18 = udiv i32 %17, 12
  %19 = mul i32 %18, 20
  %20 = add i32 %19, 20
  %21 = inttoptr i64 %6 to i8*
  %22 = zext i32 %20 to i64
  %23 = getelementptr inbounds i8, i8* %21, i64 %22
  %24 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 9
  store i8* %23, i8** %24, align 8
  %25 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 5
  store i8* %23, i8** %25, align 8
  %26 = zext i32 %17 to i64
  %27 = getelementptr inbounds i8, i8* %21, i64 %26
  %28 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 11
  store i8* %27, i8** %28, align 8
  %29 = zext i32 %15 to i64
  %30 = getelementptr inbounds i8, i8* %23, i64 %29
  %31 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 6
  store i8* %30, i8** %31, align 8
  %32 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 0
  store i8 1, i8* %32, align 1
  %33 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 1
  store i8 2, i8* %33, align 1
  %34 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 2
  store i8 3, i8* %34, align 1
  %35 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 3
  store i8 4, i8* %35, align 1
  %36 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 4
  store i8 6, i8* %36, align 1
  %37 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 5
  store i8 8, i8* %37, align 1
  %38 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 6
  store i8 10, i8* %38, align 1
  %39 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 7
  store i8 12, i8* %39, align 1
  %40 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 8
  %41 = bitcast i8* %40 to <4 x i8>*
  store <4 x i8> <i8 15, i8 18, i8 21, i8 24>, <4 x i8>* %41, align 1
  %42 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 12
  %43 = bitcast i8* %42 to <16 x i8>*
  store <16 x i8> <i8 28, i8 32, i8 36, i8 40, i8 44, i8 48, i8 52, i8 56, i8 60, i8 64, i8 68, i8 72, i8 76, i8 80, i8 84, i8 88>, <16 x i8>* %43, align 1
  %44 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 28
  store i8 92, i8* %44, align 1
  %45 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 29
  store i8 96, i8* %45, align 1
  %46 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 30
  store i8 100, i8* %46, align 1
  %47 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 31
  store i8 104, i8* %47, align 1
  %48 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 32
  store i8 108, i8* %48, align 1
  %49 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 33
  store i8 112, i8* %49, align 1
  %50 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 34
  store i8 116, i8* %50, align 1
  %51 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 35
  store i8 120, i8* %51, align 1
  %52 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 36
  store i8 124, i8* %52, align 1
  %53 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 37
  store i8 -128, i8* %53, align 1
  %54 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 3
  store i8 0, i8* %54, align 2
  br label %55

55:                                               ; preds = %55, %1
  %56 = phi i64 [ 0, %1 ], [ %71, %55 ]
  %57 = phi i32 [ 0, %1 ], [ %75, %55 ]
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = or i64 %56, 1
  %62 = zext i8 %60 to i64
  %63 = icmp uge i64 %56, %62
  %64 = zext i1 %63 to i32
  %65 = add nuw nsw i32 %57, %64
  %66 = trunc i32 %65 to i8
  %67 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 2, i64 %56
  store i8 %66, i8* %67, align 1
  %68 = zext i32 %65 to i64
  %69 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = add nuw nsw i64 %56, 2
  %72 = zext i8 %70 to i64
  %73 = icmp uge i64 %61, %72
  %74 = zext i1 %73 to i32
  %75 = add nuw nsw i32 %65, %74
  %76 = trunc i32 %75 to i8
  %77 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 2, i64 %61
  store i8 %76, i8* %77, align 1
  %78 = icmp eq i64 %71, 128
  br i1 %78, label %79, label %55

79:                                               ; preds = %55
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN12SubAllocator14AllocUnitsRareEi(%class.SubAllocator*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 3
  %4 = load i8, i8* %3, align 2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = sext i32 %1 to i64
  br label %18

8:                                                ; preds = %2
  store i8 -1, i8* %3, align 2
  tail call void @_ZN12SubAllocator14GlueFreeBlocksEv(%class.SubAllocator* %0)
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 7, i64 %9, i32 0
  %11 = load %"struct.SubAllocator::RAR_NODE"*, %"struct.SubAllocator::RAR_NODE"** %10, align 8
  %12 = icmp eq %"struct.SubAllocator::RAR_NODE"* %11, null
  br i1 %12, label %18, label %13

13:                                               ; preds = %8
  %14 = bitcast %"struct.SubAllocator::RAR_NODE"* %11 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"struct.SubAllocator::RAR_NODE"** %10 to i64*
  store i64 %15, i64* %16, align 8
  %17 = bitcast %"struct.SubAllocator::RAR_NODE"* %11 to i8*
  br label %103

18:                                               ; preds = %6, %8
  %19 = phi i64 [ %7, %6 ], [ %9, %8 ]
  br label %20

20:                                               ; preds = %47, %18
  %21 = phi i64 [ %22, %47 ], [ %19, %18 ]
  %22 = add nsw i64 %21, 1
  %23 = trunc i64 %22 to i32
  %24 = icmp eq i32 %23, 38
  br i1 %24, label %25, label %47

25:                                               ; preds = %20
  %26 = load i8, i8* %3, align 2
  %27 = add i8 %26, -1
  store i8 %27, i8* %3, align 2
  %28 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 %19
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i64
  %31 = mul nuw nsw i64 %30, 12
  %32 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 11
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 8
  %35 = bitcast i8** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = ptrtoint i8* %33 to i64
  %38 = sub i64 %37, %36
  %39 = icmp sgt i64 %38, %31
  br i1 %39, label %40, label %103

40:                                               ; preds = %25
  %41 = sub nsw i64 0, %31
  %42 = getelementptr inbounds i8, i8* %33, i64 %41
  store i8* %42, i8** %32, align 8
  %43 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 9
  %44 = load i8*, i8** %43, align 8
  %45 = mul nsw i64 %30, -20
  %46 = getelementptr inbounds i8, i8* %44, i64 %45
  store i8* %46, i8** %43, align 8
  br label %103

47:                                               ; preds = %20
  %48 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 7, i64 %22, i32 0
  %49 = load %"struct.SubAllocator::RAR_NODE"*, %"struct.SubAllocator::RAR_NODE"** %48, align 8
  %50 = icmp eq %"struct.SubAllocator::RAR_NODE"* %49, null
  br i1 %50, label %20, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 7, i64 %22, i32 0
  %53 = bitcast %"struct.SubAllocator::RAR_NODE"* %49 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = bitcast %"struct.SubAllocator::RAR_NODE"** %52 to i64*
  store i64 %54, i64* %55, align 8
  %56 = bitcast %"struct.SubAllocator::RAR_NODE"* %49 to i8*
  %57 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 %22
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 %19
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = sub nsw i32 %59, %62
  %64 = mul nuw nsw i32 %62, 20
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %56, i64 %65
  %67 = add nsw i32 %63, -1
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 2, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i64
  %72 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = icmp eq i32 %63, %74
  br i1 %75, label %95, label %76

76:                                               ; preds = %51
  %77 = add nsw i64 %71, -1
  %78 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 7, i64 %77, i32 0
  %79 = bitcast %"struct.SubAllocator::RAR_NODE"** %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = bitcast i8* %66 to i64*
  store i64 %80, i64* %81, align 8
  %82 = bitcast %"struct.SubAllocator::RAR_NODE"** %78 to i8**
  store i8* %66, i8** %82, align 8
  %83 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 %77
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = mul nuw nsw i32 %85, 20
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %66, i64 %87
  %89 = xor i32 %85, -1
  %90 = add nsw i32 %63, %89
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 2, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i64
  br label %95

95:                                               ; preds = %51, %76
  %96 = phi i64 [ %71, %51 ], [ %94, %76 ]
  %97 = phi i8* [ %66, %51 ], [ %88, %76 ]
  %98 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 7, i64 %96, i32 0
  %99 = bitcast %"struct.SubAllocator::RAR_NODE"** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast i8* %97 to i64*
  store i64 %100, i64* %101, align 8
  %102 = bitcast %"struct.SubAllocator::RAR_NODE"** %98 to i8**
  store i8* %97, i8** %102, align 8
  br label %103

103:                                              ; preds = %95, %25, %40, %13
  %104 = phi i8* [ %17, %13 ], [ %56, %95 ], [ %46, %40 ], [ null, %25 ]
  ret i8* %104
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SubAllocator14GlueFreeBlocksEv(%class.SubAllocator*) local_unnamed_addr #6 comdat align 2 {
  %2 = alloca %struct.RARPPM_MEM_BLK, align 2
  %3 = bitcast %struct.RARPPM_MEM_BLK* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %3) #11
  %4 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %2, i64 0, i32 2
  %5 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %2, i64 0, i32 3
  %6 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 5
  %7 = bitcast %struct.RARPPM_MEM_BLK* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %7, i8 -86, i64 20, i1 false)
  %8 = load i8*, i8** %6, align 8
  %9 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 6
  %10 = load i8*, i8** %9, align 8
  %11 = icmp eq i8* %8, %10
  br i1 %11, label %13, label %12

12:                                               ; preds = %1
  store i8 0, i8* %8, align 1
  br label %13

13:                                               ; preds = %1, %12
  store %struct.RARPPM_MEM_BLK* %2, %struct.RARPPM_MEM_BLK** %5, align 2
  store %struct.RARPPM_MEM_BLK* %2, %struct.RARPPM_MEM_BLK** %4, align 2
  %14 = bitcast %struct.RARPPM_MEM_BLK** %4 to %"struct.SubAllocator::RAR_NODE"**
  br label %15

15:                                               ; preds = %41, %13
  %16 = phi i64 [ 0, %13 ], [ %42, %41 ]
  %17 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 7, i64 %16, i32 0
  %18 = load %"struct.SubAllocator::RAR_NODE"*, %"struct.SubAllocator::RAR_NODE"** %17, align 8
  %19 = icmp eq %"struct.SubAllocator::RAR_NODE"* %18, null
  br i1 %19, label %41, label %20

20:                                               ; preds = %15
  %21 = bitcast %"struct.SubAllocator::RAR_NODE"** %17 to i64*
  %22 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 %16
  br label %23

23:                                               ; preds = %20, %23
  %24 = phi %"struct.SubAllocator::RAR_NODE"* [ %18, %20 ], [ %39, %23 ]
  %25 = bitcast %"struct.SubAllocator::RAR_NODE"* %24 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %21, align 8
  %27 = bitcast %"struct.SubAllocator::RAR_NODE"* %24 to i8*
  %28 = bitcast %"struct.SubAllocator::RAR_NODE"* %24 to %struct.RARPPM_MEM_BLK*
  %29 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %28, i64 0, i32 3
  store %struct.RARPPM_MEM_BLK* %2, %struct.RARPPM_MEM_BLK** %29, align 1
  %30 = load %struct.RARPPM_MEM_BLK*, %struct.RARPPM_MEM_BLK** %4, align 2
  %31 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %28, i64 0, i32 2
  store %struct.RARPPM_MEM_BLK* %30, %struct.RARPPM_MEM_BLK** %31, align 1
  %32 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %30, i64 0, i32 3
  %33 = bitcast %struct.RARPPM_MEM_BLK** %32 to %"struct.SubAllocator::RAR_NODE"**
  store %"struct.SubAllocator::RAR_NODE"* %24, %"struct.SubAllocator::RAR_NODE"** %33, align 1
  store %"struct.SubAllocator::RAR_NODE"* %24, %"struct.SubAllocator::RAR_NODE"** %14, align 2
  %34 = bitcast %"struct.SubAllocator::RAR_NODE"* %24 to i16*
  store i16 -1, i16* %34, align 1
  %35 = load i8, i8* %22, align 1
  %36 = zext i8 %35 to i16
  %37 = getelementptr inbounds i8, i8* %27, i64 2
  %38 = bitcast i8* %37 to i16*
  store i16 %36, i16* %38, align 1
  %39 = load %"struct.SubAllocator::RAR_NODE"*, %"struct.SubAllocator::RAR_NODE"** %17, align 8
  %40 = icmp eq %"struct.SubAllocator::RAR_NODE"* %39, null
  br i1 %40, label %41, label %23

41:                                               ; preds = %23, %15
  %42 = add nuw nsw i64 %16, 1
  %43 = icmp eq i64 %42, 38
  br i1 %43, label %44, label %15

44:                                               ; preds = %41
  %45 = load %struct.RARPPM_MEM_BLK*, %struct.RARPPM_MEM_BLK** %4, align 2
  %46 = icmp eq %struct.RARPPM_MEM_BLK* %45, %2
  br i1 %46, label %223, label %47

47:                                               ; preds = %44, %100
  %48 = phi %struct.RARPPM_MEM_BLK* [ %102, %100 ], [ %45, %44 ]
  %49 = bitcast %struct.RARPPM_MEM_BLK* %48 to i8*
  %50 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %48, i64 0, i32 1
  %51 = load i16, i16* %50, align 1
  %52 = zext i16 %51 to i32
  %53 = mul nuw nsw i32 %52, 20
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %49, i64 %54
  %56 = bitcast i8* %55 to i16*
  %57 = load i16, i16* %56, align 1
  %58 = icmp eq i16 %57, -1
  br i1 %58, label %66, label %100

59:                                               ; preds = %100
  %60 = load %struct.RARPPM_MEM_BLK*, %struct.RARPPM_MEM_BLK** %4, align 2
  %61 = icmp eq %struct.RARPPM_MEM_BLK* %60, %2
  br i1 %61, label %223, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 7, i64 37, i32 0
  %64 = bitcast %"struct.SubAllocator::RAR_NODE"** %63 to i64*
  %65 = bitcast %"struct.SubAllocator::RAR_NODE"** %63 to %struct.RARPPM_MEM_BLK**
  br label %104

66:                                               ; preds = %47, %75
  %67 = phi i8* [ %96, %75 ], [ %55, %47 ]
  %68 = phi i32 [ %93, %75 ], [ %52, %47 ]
  %69 = getelementptr inbounds i8, i8* %67, i64 2
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 1
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = icmp ult i32 %73, 65536
  br i1 %74, label %75, label %100

75:                                               ; preds = %66
  %76 = getelementptr inbounds i8, i8* %67, i64 4
  %77 = bitcast i8* %76 to %struct.RARPPM_MEM_BLK**
  %78 = bitcast i8* %76 to i64*
  %79 = load i64, i64* %78, align 1
  %80 = getelementptr inbounds i8, i8* %67, i64 12
  %81 = bitcast i8* %80 to %struct.RARPPM_MEM_BLK**
  %82 = load %struct.RARPPM_MEM_BLK*, %struct.RARPPM_MEM_BLK** %81, align 1
  %83 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %82, i64 0, i32 2
  %84 = bitcast %struct.RARPPM_MEM_BLK** %83 to i64*
  store i64 %79, i64* %84, align 1
  %85 = bitcast i8* %80 to i64*
  %86 = load i64, i64* %85, align 1
  %87 = load %struct.RARPPM_MEM_BLK*, %struct.RARPPM_MEM_BLK** %77, align 1
  %88 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %87, i64 0, i32 3
  %89 = bitcast %struct.RARPPM_MEM_BLK** %88 to i64*
  store i64 %86, i64* %89, align 1
  %90 = load i16, i16* %70, align 1
  %91 = load i16, i16* %50, align 1
  %92 = add i16 %91, %90
  store i16 %92, i16* %50, align 1
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %93, 20
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %49, i64 %95
  %97 = bitcast i8* %96 to i16*
  %98 = load i16, i16* %97, align 1
  %99 = icmp eq i16 %98, -1
  br i1 %99, label %66, label %100

100:                                              ; preds = %75, %66, %47
  %101 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %48, i64 0, i32 2
  %102 = load %struct.RARPPM_MEM_BLK*, %struct.RARPPM_MEM_BLK** %101, align 1
  %103 = icmp eq %struct.RARPPM_MEM_BLK* %102, %2
  br i1 %103, label %59, label %47

104:                                              ; preds = %62, %214
  %105 = phi %struct.RARPPM_MEM_BLK* [ %60, %62 ], [ %221, %214 ]
  %106 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %105, i64 0, i32 2
  %107 = bitcast %struct.RARPPM_MEM_BLK** %106 to i64*
  %108 = load i64, i64* %107, align 1
  %109 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %105, i64 0, i32 3
  %110 = load %struct.RARPPM_MEM_BLK*, %struct.RARPPM_MEM_BLK** %109, align 1
  %111 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %110, i64 0, i32 2
  %112 = bitcast %struct.RARPPM_MEM_BLK** %111 to i64*
  store i64 %108, i64* %112, align 1
  %113 = bitcast %struct.RARPPM_MEM_BLK** %109 to i64*
  %114 = load i64, i64* %113, align 1
  %115 = load %struct.RARPPM_MEM_BLK*, %struct.RARPPM_MEM_BLK** %106, align 1
  %116 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %115, i64 0, i32 3
  %117 = bitcast %struct.RARPPM_MEM_BLK** %116 to i64*
  store i64 %114, i64* %117, align 1
  %118 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %105, i64 0, i32 1
  %119 = load i16, i16* %118, align 1
  %120 = zext i16 %119 to i32
  %121 = icmp ugt i16 %119, 128
  br i1 %121, label %122, label %184

122:                                              ; preds = %104
  %123 = add nsw i32 %120, -129
  %124 = and i32 %123, -128
  %125 = load i64, i64* %64, align 8
  %126 = add nsw i32 %120, -129
  %127 = lshr i32 %126, 7
  %128 = add nuw nsw i32 %127, 1
  %129 = and i32 %128, 7
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %144, label %131

131:                                              ; preds = %122, %131
  %132 = phi i64 [ %139, %131 ], [ %125, %122 ]
  %133 = phi i32 [ %137, %131 ], [ %120, %122 ]
  %134 = phi %struct.RARPPM_MEM_BLK* [ %138, %131 ], [ %105, %122 ]
  %135 = phi i32 [ %140, %131 ], [ %129, %122 ]
  %136 = bitcast %struct.RARPPM_MEM_BLK* %134 to i64*
  store i64 %132, i64* %136, align 8
  store %struct.RARPPM_MEM_BLK* %134, %struct.RARPPM_MEM_BLK** %65, align 8
  %137 = add nsw i32 %133, -128
  %138 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %134, i64 128
  %139 = ptrtoint %struct.RARPPM_MEM_BLK* %134 to i64
  %140 = add i32 %135, -1
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %131, !llvm.loop !2

142:                                              ; preds = %131
  %143 = ptrtoint %struct.RARPPM_MEM_BLK* %134 to i64
  br label %144

144:                                              ; preds = %122, %142
  %145 = phi i64 [ %125, %122 ], [ %143, %142 ]
  %146 = phi i32 [ %120, %122 ], [ %137, %142 ]
  %147 = phi %struct.RARPPM_MEM_BLK* [ %105, %122 ], [ %138, %142 ]
  %148 = phi %struct.RARPPM_MEM_BLK* [ undef, %122 ], [ %138, %142 ]
  %149 = icmp ult i32 %126, 896
  br i1 %149, label %180, label %150

150:                                              ; preds = %144, %150
  %151 = phi i64 [ %179, %150 ], [ %145, %144 ]
  %152 = phi i32 [ %176, %150 ], [ %146, %144 ]
  %153 = phi %struct.RARPPM_MEM_BLK* [ %177, %150 ], [ %147, %144 ]
  %154 = bitcast %struct.RARPPM_MEM_BLK* %153 to i64*
  store i64 %151, i64* %154, align 8
  store %struct.RARPPM_MEM_BLK* %153, %struct.RARPPM_MEM_BLK** %65, align 8
  %155 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %153, i64 128
  %156 = ptrtoint %struct.RARPPM_MEM_BLK* %153 to i64
  %157 = bitcast %struct.RARPPM_MEM_BLK* %155 to i64*
  store i64 %156, i64* %157, align 8
  store %struct.RARPPM_MEM_BLK* %155, %struct.RARPPM_MEM_BLK** %65, align 8
  %158 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %153, i64 256
  %159 = ptrtoint %struct.RARPPM_MEM_BLK* %155 to i64
  %160 = bitcast %struct.RARPPM_MEM_BLK* %158 to i64*
  store i64 %159, i64* %160, align 8
  store %struct.RARPPM_MEM_BLK* %158, %struct.RARPPM_MEM_BLK** %65, align 8
  %161 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %153, i64 384
  %162 = ptrtoint %struct.RARPPM_MEM_BLK* %158 to i64
  %163 = bitcast %struct.RARPPM_MEM_BLK* %161 to i64*
  store i64 %162, i64* %163, align 8
  store %struct.RARPPM_MEM_BLK* %161, %struct.RARPPM_MEM_BLK** %65, align 8
  %164 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %153, i64 512
  %165 = ptrtoint %struct.RARPPM_MEM_BLK* %161 to i64
  %166 = bitcast %struct.RARPPM_MEM_BLK* %164 to i64*
  store i64 %165, i64* %166, align 8
  store %struct.RARPPM_MEM_BLK* %164, %struct.RARPPM_MEM_BLK** %65, align 8
  %167 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %153, i64 640
  %168 = ptrtoint %struct.RARPPM_MEM_BLK* %164 to i64
  %169 = bitcast %struct.RARPPM_MEM_BLK* %167 to i64*
  store i64 %168, i64* %169, align 8
  store %struct.RARPPM_MEM_BLK* %167, %struct.RARPPM_MEM_BLK** %65, align 8
  %170 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %153, i64 768
  %171 = ptrtoint %struct.RARPPM_MEM_BLK* %167 to i64
  %172 = bitcast %struct.RARPPM_MEM_BLK* %170 to i64*
  store i64 %171, i64* %172, align 8
  store %struct.RARPPM_MEM_BLK* %170, %struct.RARPPM_MEM_BLK** %65, align 8
  %173 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %153, i64 896
  %174 = ptrtoint %struct.RARPPM_MEM_BLK* %170 to i64
  %175 = bitcast %struct.RARPPM_MEM_BLK* %173 to i64*
  store i64 %174, i64* %175, align 8
  store %struct.RARPPM_MEM_BLK* %173, %struct.RARPPM_MEM_BLK** %65, align 8
  %176 = add nsw i32 %152, -1024
  %177 = getelementptr inbounds %struct.RARPPM_MEM_BLK, %struct.RARPPM_MEM_BLK* %153, i64 1024
  %178 = icmp sgt i32 %176, 128
  %179 = ptrtoint %struct.RARPPM_MEM_BLK* %173 to i64
  br i1 %178, label %150, label %180

180:                                              ; preds = %150, %144
  %181 = phi %struct.RARPPM_MEM_BLK* [ %148, %144 ], [ %177, %150 ]
  %182 = add nsw i32 %120, -128
  %183 = sub nsw i32 %182, %124
  br label %184

184:                                              ; preds = %180, %104
  %185 = phi %struct.RARPPM_MEM_BLK* [ %105, %104 ], [ %181, %180 ]
  %186 = phi i32 [ %120, %104 ], [ %183, %180 ]
  %187 = add nsw i32 %186, -1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 2, i64 %188
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i64
  %192 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 %191
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i32
  %195 = icmp eq i32 %186, %194
  %196 = zext i8 %190 to i64
  br i1 %195, label %214, label %197

197:                                              ; preds = %184
  %198 = add nsw i64 %196, -1
  %199 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 1, i64 %198
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i32
  %202 = bitcast %struct.RARPPM_MEM_BLK* %185 to i8*
  %203 = mul nuw nsw i32 %201, 20
  %204 = zext i32 %203 to i64
  %205 = getelementptr inbounds i8, i8* %202, i64 %204
  %206 = xor i32 %201, -1
  %207 = add nsw i32 %186, %206
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 7, i64 %208, i32 0
  %210 = bitcast %"struct.SubAllocator::RAR_NODE"** %209 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = bitcast i8* %205 to i64*
  store i64 %211, i64* %212, align 8
  %213 = bitcast %"struct.SubAllocator::RAR_NODE"** %209 to i8**
  store i8* %205, i8** %213, align 8
  br label %214

214:                                              ; preds = %184, %197
  %215 = phi i64 [ %198, %197 ], [ %196, %184 ]
  %216 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %0, i64 0, i32 7, i64 %215, i32 0
  %217 = bitcast %"struct.SubAllocator::RAR_NODE"** %216 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = bitcast %struct.RARPPM_MEM_BLK* %185 to i64*
  store i64 %218, i64* %219, align 8
  %220 = bitcast %"struct.SubAllocator::RAR_NODE"** %216 to %struct.RARPPM_MEM_BLK**
  store %struct.RARPPM_MEM_BLK* %185, %struct.RARPPM_MEM_BLK** %220, align 8
  %221 = load %struct.RARPPM_MEM_BLK*, %struct.RARPPM_MEM_BLK** %4, align 2
  %222 = icmp eq %struct.RARPPM_MEM_BLK* %221, %2
  br i1 %222, label %223, label %104

223:                                              ; preds = %214, %44, %59
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %3) #11
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN8ModelPPMC2Ev(%class.ModelPPM* nocapture) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 0
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 4
  %4 = bitcast %struct.RARPPM_CONTEXT** %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8ModelPPM16RestartModelRareEv(%class.ModelPPM*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 14, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 256, i1 false)
  %3 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25
  %4 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 7, i64 0
  %5 = bitcast %"struct.SubAllocator::RAR_NODE"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 304, i1 false) #11
  %6 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 4
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 8
  %10 = bitcast i8** %9 to i64*
  store i64 %8, i64* %10, align 8
  %11 = getelementptr inbounds %class.SubAllocator, %class.SubAllocator* %3, i64 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = sdiv i64 %12, 96
  %14 = trunc i64 %13 to i32
  %15 = mul i32 %14, 84
  %16 = udiv i32 %15, 12
  %17 = mul i32 %16, 20
  %18 = trunc i64 %12 to i32
  %19 = sub i32 %18, %15
  %20 = udiv i32 %19, 12
  %21 = mul i32 %20, 20
  %22 = add i32 %21, 20
  %23 = inttoptr i64 %8 to i8*
  %24 = zext i32 %22 to i64
  %25 = getelementptr inbounds i8, i8* %23, i64 %24
  %26 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 9
  store i8* %25, i8** %26, align 8
  %27 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 5
  store i8* %25, i8** %27, align 8
  %28 = zext i32 %19 to i64
  %29 = getelementptr inbounds i8, i8* %23, i64 %28
  %30 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 11
  store i8* %29, i8** %30, align 8
  %31 = zext i32 %17 to i64
  %32 = getelementptr inbounds i8, i8* %25, i64 %31
  %33 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 6
  store i8* %32, i8** %33, align 8
  %34 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 0
  store i8 1, i8* %34, align 1
  %35 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 1
  store i8 2, i8* %35, align 1
  %36 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 2
  store i8 3, i8* %36, align 1
  %37 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 3
  store i8 4, i8* %37, align 1
  %38 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 4
  store i8 6, i8* %38, align 1
  %39 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 5
  store i8 8, i8* %39, align 1
  %40 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 6
  store i8 10, i8* %40, align 1
  %41 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 7
  store i8 12, i8* %41, align 1
  %42 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 8
  store i8 15, i8* %42, align 1
  %43 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 9
  store i8 18, i8* %43, align 1
  %44 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 10
  store i8 21, i8* %44, align 1
  %45 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 11
  %46 = bitcast i8* %45 to <16 x i8>*
  store <16 x i8> <i8 24, i8 28, i8 32, i8 36, i8 40, i8 44, i8 48, i8 52, i8 56, i8 60, i8 64, i8 68, i8 72, i8 76, i8 80, i8 84>, <16 x i8>* %46, align 1
  %47 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 27
  store i8 88, i8* %47, align 1
  %48 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 28
  store i8 92, i8* %48, align 1
  %49 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 29
  store i8 96, i8* %49, align 1
  %50 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 30
  store i8 100, i8* %50, align 1
  %51 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 31
  store i8 104, i8* %51, align 1
  %52 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 32
  store i8 108, i8* %52, align 1
  %53 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 33
  store i8 112, i8* %53, align 1
  %54 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 34
  store i8 116, i8* %54, align 1
  %55 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 35
  store i8 120, i8* %55, align 1
  %56 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 36
  store i8 124, i8* %56, align 1
  %57 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 37
  store i8 -128, i8* %57, align 1
  %58 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 3
  store i8 0, i8* %58, align 2
  %59 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 2, i64 0
  store i8 0, i8* %59, align 1
  br label %60

60:                                               ; preds = %229, %1
  %61 = phi i32 [ 0, %1 ], [ %237, %229 ]
  %62 = phi i64 [ 1, %1 ], [ %233, %229 ]
  %63 = zext i32 %61 to i64
  %64 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = add nuw nsw i64 %62, 1
  %67 = zext i8 %65 to i64
  %68 = icmp uge i64 %62, %67
  %69 = zext i1 %68 to i32
  %70 = add nuw nsw i32 %61, %69
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 2, i64 %62
  store i8 %71, i8* %72, align 1
  %73 = icmp eq i64 %66, 128
  br i1 %73, label %74, label %229

74:                                               ; preds = %60
  %75 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 11
  %76 = load i32, i32* %75, align 4
  %77 = icmp slt i32 %76, 12
  %78 = select i1 %77, i32 %76, i32 12
  %79 = xor i32 %78, -1
  %80 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 13
  store i32 %79, i32* %80, align 4
  %81 = load i8*, i8** %33, align 8
  %82 = load i8*, i8** %27, align 8
  %83 = icmp eq i8* %81, %82
  br i1 %83, label %86, label %84

84:                                               ; preds = %74
  %85 = getelementptr inbounds i8, i8* %81, i64 -20
  store i8* %85, i8** %33, align 8
  br label %97

86:                                               ; preds = %74
  %87 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 7, i64 0, i32 0
  %88 = load %"struct.SubAllocator::RAR_NODE"*, %"struct.SubAllocator::RAR_NODE"** %87, align 8
  %89 = icmp eq %"struct.SubAllocator::RAR_NODE"* %88, null
  br i1 %89, label %95, label %90

90:                                               ; preds = %86
  %91 = bitcast %"struct.SubAllocator::RAR_NODE"* %88 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = bitcast %"struct.SubAllocator::RAR_NODE"** %87 to i64*
  store i64 %92, i64* %93, align 8
  %94 = bitcast %"struct.SubAllocator::RAR_NODE"* %88 to i8*
  br label %97

95:                                               ; preds = %86
  %96 = tail call i8* @_ZN12SubAllocator14AllocUnitsRareEi(%class.SubAllocator* %3, i32 0) #11
  br label %97

97:                                               ; preds = %84, %90, %95
  %98 = phi i8* [ %85, %84 ], [ %94, %90 ], [ %96, %95 ]
  %99 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 6
  %100 = bitcast %struct.RARPPM_CONTEXT** %99 to i8**
  store i8* %98, i8** %100, align 8
  %101 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 4
  %102 = bitcast %struct.RARPPM_CONTEXT** %101 to i8**
  store i8* %98, i8** %102, align 8
  %103 = icmp eq i8* %98, null
  %104 = bitcast i8* %98 to %struct.RARPPM_CONTEXT*
  br i1 %103, label %105, label %107

105:                                              ; preds = %97
  tail call void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64 0) #11
  %106 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %101, align 8
  br label %107

107:                                              ; preds = %105, %97
  %108 = phi %struct.RARPPM_CONTEXT* [ %106, %105 ], [ %104, %97 ]
  %109 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %108, i64 0, i32 2
  store %struct.RARPPM_CONTEXT* null, %struct.RARPPM_CONTEXT** %109, align 1
  %110 = load i32, i32* %75, align 4
  %111 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 10
  store i32 %110, i32* %111, align 8
  %112 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %101, align 8
  %113 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %112, i64 0, i32 0
  store i16 256, i16* %113, align 1
  %114 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %101, align 8
  %115 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %114, i64 0, i32 1, i32 0, i32 0
  store i16 257, i16* %115, align 1
  %116 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 2, i64 127
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = zext i8 %117 to i64
  %120 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 7, i64 %119, i32 0
  %121 = load %"struct.SubAllocator::RAR_NODE"*, %"struct.SubAllocator::RAR_NODE"** %120, align 8
  %122 = icmp eq %"struct.SubAllocator::RAR_NODE"* %121, null
  br i1 %122, label %128, label %123

123:                                              ; preds = %107
  %124 = bitcast %"struct.SubAllocator::RAR_NODE"* %121 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = bitcast %"struct.SubAllocator::RAR_NODE"** %120 to i64*
  store i64 %125, i64* %126, align 8
  %127 = bitcast %"struct.SubAllocator::RAR_NODE"* %121 to i8*
  br label %143

128:                                              ; preds = %107
  %129 = load i8*, i8** %27, align 8
  %130 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 %119
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i64
  %133 = mul nuw nsw i64 %132, 20
  %134 = getelementptr inbounds i8, i8* %129, i64 %133
  store i8* %134, i8** %27, align 8
  %135 = load i8*, i8** %33, align 8
  %136 = icmp ugt i8* %134, %135
  br i1 %136, label %137, label %143

137:                                              ; preds = %128
  %138 = load i8, i8* %130, align 1
  %139 = zext i8 %138 to i64
  %140 = mul nsw i64 %139, -20
  %141 = getelementptr inbounds i8, i8* %134, i64 %140
  store i8* %141, i8** %27, align 8
  %142 = tail call i8* @_ZN12SubAllocator14AllocUnitsRareEi(%class.SubAllocator* %3, i32 %118) #11
  br label %143

143:                                              ; preds = %123, %128, %137
  %144 = phi i8* [ %127, %123 ], [ %142, %137 ], [ %129, %128 ]
  %145 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %101, align 8
  %146 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %145, i64 0, i32 1, i32 0, i32 1
  %147 = bitcast %struct.RARPPM_STATE** %146 to i8**
  store i8* %144, i8** %147, align 1
  %148 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 7
  %149 = bitcast %struct.RARPPM_STATE** %148 to i8**
  store i8* %144, i8** %149, align 8
  %150 = icmp eq i8* %144, null
  br i1 %150, label %151, label %152

151:                                              ; preds = %143
  tail call void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64 0) #11
  br label %152

152:                                              ; preds = %151, %143
  %153 = load i32, i32* %80, align 4
  %154 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 12
  store i32 %153, i32* %154, align 8
  %155 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 19
  store i8 0, i8* %155, align 1
  br label %156

156:                                              ; preds = %156, %152
  %157 = phi i64 [ 0, %152 ], [ %172, %156 ]
  %158 = phi i32 [ 0, %152 ], [ %173, %156 ]
  %159 = trunc i32 %158 to i8
  %160 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %101, align 8
  %161 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %160, i64 0, i32 1, i32 0, i32 1
  %162 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %161, align 1
  %163 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %162, i64 %157, i32 0
  store i8 %159, i8* %163, align 1
  %164 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %101, align 8
  %165 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %164, i64 0, i32 1, i32 0, i32 1
  %166 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %165, align 1
  %167 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %166, i64 %157, i32 1
  store i8 1, i8* %167, align 1
  %168 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %101, align 8
  %169 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %168, i64 0, i32 1, i32 0, i32 1
  %170 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %169, align 1
  %171 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %170, i64 %157, i32 2
  store %struct.RARPPM_CONTEXT* null, %struct.RARPPM_CONTEXT** %171, align 1
  %172 = add nuw nsw i64 %157, 1
  %173 = add nuw nsw i32 %158, 1
  %174 = icmp eq i64 %172, 256
  br i1 %174, label %175, label %156

175:                                              ; preds = %156, %204
  %176 = phi i64 [ %205, %204 ], [ 0, %156 ]
  %177 = trunc i64 %176 to i32
  %178 = add i32 %177, 2
  br label %179

179:                                              ; preds = %179, %175
  %180 = phi i64 [ 0, %175 ], [ %202, %179 ]
  %181 = getelementptr inbounds [8 x i16], [8 x i16]* @_ZZN8ModelPPM16RestartModelRareEvE10InitBinEsc, i64 0, i64 %180
  %182 = load i16, i16* %181, align 2
  %183 = zext i16 %182 to i32
  %184 = udiv i32 %183, %178
  %185 = trunc i32 %184 to i16
  %186 = sub i16 16384, %185
  %187 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 22, i64 %176, i64 %180
  store i16 %186, i16* %187, align 2
  %188 = add nuw nsw i64 %180, 8
  %189 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 22, i64 %176, i64 %188
  store i16 %186, i16* %189, align 2
  %190 = add nuw nsw i64 %180, 16
  %191 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 22, i64 %176, i64 %190
  store i16 %186, i16* %191, align 2
  %192 = add nuw nsw i64 %180, 24
  %193 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 22, i64 %176, i64 %192
  store i16 %186, i16* %193, align 2
  %194 = add nuw nsw i64 %180, 32
  %195 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 22, i64 %176, i64 %194
  store i16 %186, i16* %195, align 2
  %196 = add nuw nsw i64 %180, 40
  %197 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 22, i64 %176, i64 %196
  store i16 %186, i16* %197, align 2
  %198 = add nuw nsw i64 %180, 48
  %199 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 22, i64 %176, i64 %198
  store i16 %186, i16* %199, align 2
  %200 = add nuw nsw i64 %180, 56
  %201 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 22, i64 %176, i64 %200
  store i16 %186, i16* %201, align 2
  %202 = add nuw nsw i64 %180, 1
  %203 = icmp eq i64 %202, 8
  br i1 %203, label %204, label %179

204:                                              ; preds = %179
  %205 = add nuw nsw i64 %176, 1
  %206 = icmp eq i64 %205, 128
  br i1 %206, label %207, label %175

207:                                              ; preds = %204, %224
  %208 = phi i64 [ %225, %224 ], [ 0, %204 ]
  %209 = phi i32 [ %226, %224 ], [ 0, %204 ]
  %210 = trunc i32 %209 to i16
  %211 = mul i16 %210, 40
  %212 = add i16 %211, 80
  br label %213

213:                                              ; preds = %213, %207
  %214 = phi i64 [ 0, %207 ], [ %222, %213 ]
  %215 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 1, i64 %208, i64 %214, i32 1
  store i8 3, i8* %215, align 1
  %216 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 1, i64 %208, i64 %214, i32 0
  store i16 %212, i16* %216, align 1
  %217 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 1, i64 %208, i64 %214, i32 2
  store i8 4, i8* %217, align 1
  %218 = or i64 %214, 1
  %219 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 1, i64 %208, i64 %218, i32 1
  store i8 3, i8* %219, align 1
  %220 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 1, i64 %208, i64 %218, i32 0
  store i16 %212, i16* %220, align 1
  %221 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 1, i64 %208, i64 %218, i32 2
  store i8 4, i8* %221, align 1
  %222 = add nuw nsw i64 %214, 2
  %223 = icmp eq i64 %222, 16
  br i1 %223, label %224, label %213

224:                                              ; preds = %213
  %225 = add nuw nsw i64 %208, 1
  %226 = add nuw nsw i32 %209, 1
  %227 = icmp eq i64 %225, 25
  br i1 %227, label %228, label %207

228:                                              ; preds = %224
  ret void

229:                                              ; preds = %60
  %230 = zext i32 %70 to i64
  %231 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 %230
  %232 = load i8, i8* %231, align 1
  %233 = add nuw nsw i64 %62, 2
  %234 = zext i8 %232 to i64
  %235 = icmp uge i64 %66, %234
  %236 = zext i1 %235 to i32
  %237 = add nuw nsw i32 %70, %236
  %238 = trunc i32 %237 to i8
  %239 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 2, i64 %66
  store i8 %238, i8* %239, align 1
  br label %60
}

declare void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8ModelPPM14StartModelRareEi(%class.ModelPPM*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 18
  store i8 1, i8* %3, align 8
  %4 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 11
  store i32 %1, i32* %4, align 4
  tail call void @_ZN8ModelPPM16RestartModelRareEv(%class.ModelPPM* %0)
  %5 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 16, i64 0
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 16, i64 1
  store i8 2, i8* %6, align 1
  %7 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 16, i64 2
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 4, i64 9, i1 false)
  %8 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 16, i64 11
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 6, i64 245, i1 false)
  %9 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 15, i64 0
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 15, i64 1
  store i8 1, i8* %10, align 1
  %11 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 15, i64 2
  store i8 2, i8* %11, align 1
  br label %12

12:                                               ; preds = %31, %2
  %13 = phi i64 [ 3, %2 ], [ %42, %31 ]
  %14 = phi i32 [ 1, %2 ], [ %41, %31 ]
  %15 = phi i32 [ 3, %2 ], [ %40, %31 ]
  %16 = phi i32 [ 1, %2 ], [ %38, %31 ]
  %17 = trunc i32 %15 to i8
  %18 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 15, i64 %13
  store i8 %17, i8* %18, align 1
  %19 = add nsw i32 %16, -1
  %20 = icmp eq i32 %19, 0
  %21 = add nsw i32 %14, 1
  %22 = zext i1 %20 to i32
  %23 = add nuw nsw i32 %15, %22
  %24 = select i1 %20, i32 %21, i32 %14
  %25 = add nuw nsw i64 %13, 1
  %26 = icmp eq i64 %25, 256
  br i1 %26, label %27, label %31

27:                                               ; preds = %12
  %28 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 17, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 64, i1 false)
  %29 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 17, i64 64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 8, i64 192, i1 false)
  %30 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 2, i32 1
  store i8 7, i8* %30, align 1
  ret void

31:                                               ; preds = %12
  %32 = select i1 %20, i32 %21, i32 %19
  %33 = trunc i32 %23 to i8
  %34 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 15, i64 %25
  store i8 %33, i8* %34, align 1
  %35 = add nsw i32 %32, -1
  %36 = icmp eq i32 %35, 0
  %37 = add nsw i32 %24, 1
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = zext i1 %36 to i32
  %40 = add nuw nsw i32 %23, %39
  %41 = select i1 %36, i32 %37, i32 %24
  %42 = add nuw nsw i64 %13, 2
  br label %12
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14RARPPM_CONTEXT7rescaleEP8ModelPPM(%struct.RARPPM_CONTEXT*, %class.ModelPPM* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %0, i64 0, i32 0
  %4 = load i16, i16* %3, align 1
  %5 = zext i16 %4 to i32
  %6 = add nsw i32 %5, -1
  %7 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 7
  %8 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %7, align 8
  %9 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %0, i64 0, i32 1, i32 0, i32 1
  %11 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %10, align 1
  %12 = icmp eq %struct.RARPPM_STATE* %8, %11
  br i1 %12, label %31, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %8, i64 0, i32 0
  %15 = load i8, i8* %14, align 1
  br label %16

16:                                               ; preds = %13, %16
  %17 = phi %struct.RARPPM_STATE* [ %18, %16 ], [ %8, %13 ]
  %18 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %17, i64 -1
  %19 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %17, i64 0, i32 0
  %20 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %17, i64 0, i32 1
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %17, i64 0, i32 2
  %23 = bitcast %struct.RARPPM_CONTEXT** %22 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %18, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 %25, i64 10, i1 false) #11
  store i8 %15, i8* %25, align 1
  %26 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %17, i64 -1, i32 1
  store i8 %21, i8* %26, align 1
  %27 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %17, i64 -1, i32 2
  %28 = bitcast %struct.RARPPM_CONTEXT** %27 to i64*
  store i64 %24, i64* %28, align 1
  %29 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %10, align 1
  %30 = icmp eq %struct.RARPPM_STATE* %18, %29
  br i1 %30, label %31, label %16

31:                                               ; preds = %16, %2
  %32 = phi %struct.RARPPM_STATE* [ %8, %2 ], [ %18, %16 ]
  %33 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %32, i64 0, i32 1
  %34 = load i8, i8* %33, align 1
  %35 = add i8 %34, 4
  store i8 %35, i8* %33, align 1
  %36 = getelementptr inbounds %union.anon.7, %union.anon.7* %9, i64 0, i32 0, i32 0
  %37 = load i16, i16* %36, align 1
  %38 = add i16 %37, 4
  store i16 %38, i16* %36, align 1
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %32, i64 0, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 10
  %45 = load i32, i32* %44, align 8
  %46 = icmp ne i32 %45, 0
  %47 = zext i1 %46 to i32
  %48 = add nuw nsw i32 %47, %42
  %49 = lshr i32 %48, 1
  %50 = trunc i32 %49 to i8
  store i8 %50, i8* %40, align 1
  %51 = trunc i32 %49 to i16
  store i16 %51, i16* %36, align 1
  br label %52

52:                                               ; preds = %93, %31
  %53 = phi i32 [ %6, %31 ], [ %94, %93 ]
  %54 = phi i32 [ %43, %31 ], [ %60, %93 ]
  %55 = phi %struct.RARPPM_STATE* [ %32, %31 ], [ %56, %93 ]
  %56 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %55, i64 1
  %57 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %55, i64 1, i32 1
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = sub nsw i32 %54, %59
  %61 = add nuw nsw i32 %59, %47
  %62 = lshr i32 %61, 1
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %57, align 1
  %64 = load i16, i16* %36, align 1
  %65 = trunc i32 %62 to i16
  %66 = add i16 %64, %65
  store i16 %66, i16* %36, align 1
  %67 = load i8, i8* %57, align 1
  %68 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %55, i64 0, i32 1
  %69 = load i8, i8* %68, align 1
  %70 = icmp ugt i8 %67, %69
  br i1 %70, label %71, label %93

71:                                               ; preds = %52
  %72 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %56, i64 0, i32 0
  %73 = load i8, i8* %72, align 1
  %74 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %55, i64 1, i32 2
  %75 = bitcast %struct.RARPPM_CONTEXT** %74 to i64*
  %76 = load i64, i64* %75, align 1
  br label %77

77:                                               ; preds = %84, %71
  %78 = phi %struct.RARPPM_STATE* [ %56, %71 ], [ %81, %84 ]
  %79 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %78, i64 0, i32 0
  %80 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %78, i64 -1, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %79, i8* align 1 %80, i64 10, i1 false)
  %81 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %78, i64 -1
  %82 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %10, align 1
  %83 = icmp eq %struct.RARPPM_STATE* %81, %82
  br i1 %83, label %88, label %84

84:                                               ; preds = %77
  %85 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %78, i64 -2, i32 1
  %86 = load i8, i8* %85, align 1
  %87 = icmp ugt i8 %67, %86
  br i1 %87, label %77, label %88

88:                                               ; preds = %77, %84
  %89 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %81, i64 0, i32 0
  store i8 %73, i8* %89, align 1
  %90 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %78, i64 -1, i32 1
  store i8 %67, i8* %90, align 1
  %91 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %78, i64 -1, i32 2
  %92 = bitcast %struct.RARPPM_CONTEXT** %91 to i64*
  store i64 %76, i64* %92, align 1
  br label %93

93:                                               ; preds = %52, %88
  %94 = add nsw i32 %53, -1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %52

96:                                               ; preds = %93
  %97 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %55, i64 1, i32 1
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %102, label %100

100:                                              ; preds = %96
  %101 = load i16, i16* %3, align 1
  br label %151

102:                                              ; preds = %96, %102
  %103 = phi i32 [ %105, %102 ], [ 0, %96 ]
  %104 = phi %struct.RARPPM_STATE* [ %106, %102 ], [ %56, %96 ]
  %105 = add nuw nsw i32 %103, 1
  %106 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %104, i64 -1
  %107 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %104, i64 -1, i32 1
  %108 = load i8, i8* %107, align 1
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %102, label %110

110:                                              ; preds = %102
  %111 = add nsw i32 %105, %60
  %112 = load i16, i16* %3, align 1
  %113 = trunc i32 %105 to i16
  %114 = sub i16 %112, %113
  store i16 %114, i16* %3, align 1
  %115 = icmp eq i16 %114, 1
  br i1 %115, label %116, label %151

116:                                              ; preds = %110
  %117 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %10, align 1
  %118 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %117, i64 0, i32 0
  %119 = load i8, i8* %118, align 1
  %120 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %117, i64 0, i32 1
  %121 = load i8, i8* %120, align 1
  %122 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %117, i64 0, i32 2
  %123 = bitcast %struct.RARPPM_CONTEXT** %122 to i64*
  %124 = load i64, i64* %123, align 1
  %125 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %117, i64 0, i32 0
  br label %126

126:                                              ; preds = %126, %116
  %127 = phi i32 [ %111, %116 ], [ %131, %126 ]
  %128 = phi i8 [ %121, %116 ], [ %130, %126 ]
  %129 = lshr i8 %128, 1
  %130 = sub i8 %128, %129
  %131 = ashr i32 %127, 1
  %132 = icmp sgt i32 %127, 3
  br i1 %132, label %126, label %133

133:                                              ; preds = %126
  %134 = add nuw nsw i32 %5, 1
  %135 = lshr i32 %134, 1
  %136 = add nsw i32 %135, -1
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 25, i32 2, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i64
  %141 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 25, i32 7, i64 %140, i32 0
  %142 = bitcast %"struct.SubAllocator::RAR_NODE"** %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = bitcast %struct.RARPPM_STATE* %117 to i64*
  store i64 %143, i64* %144, align 8
  %145 = bitcast %"struct.SubAllocator::RAR_NODE"** %141 to i8**
  store i8* %125, i8** %145, align 8
  %146 = bitcast %union.anon.7* %9 to %struct.RARPPM_STATE*
  %147 = bitcast %struct.RARPPM_STATE** %7 to %union.anon.7**
  store %union.anon.7* %9, %union.anon.7** %147, align 8
  %148 = bitcast %union.anon.7* %9 to i8*
  store i8 %119, i8* %148, align 1
  %149 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %146, i64 0, i32 1
  store i8 %130, i8* %149, align 1
  %150 = bitcast %struct.RARPPM_STATE** %10 to i64*
  store i64 %124, i64* %150, align 1
  br label %248

151:                                              ; preds = %100, %110
  %152 = phi i16 [ %114, %110 ], [ %101, %100 ]
  %153 = phi i32 [ %111, %110 ], [ %60, %100 ]
  %154 = lshr i32 %153, 1
  %155 = sub i32 %153, %154
  %156 = load i16, i16* %36, align 1
  %157 = trunc i32 %155 to i16
  %158 = add i16 %156, %157
  store i16 %158, i16* %36, align 1
  %159 = add nuw nsw i32 %5, 1
  %160 = lshr i32 %159, 1
  %161 = zext i16 %152 to i32
  %162 = add nuw nsw i32 %161, 1
  %163 = lshr i32 %162, 1
  %164 = icmp eq i32 %160, %163
  br i1 %164, label %165, label %168

165:                                              ; preds = %151
  %166 = bitcast %struct.RARPPM_STATE** %10 to i64*
  %167 = load i64, i64* %166, align 1
  br label %245

168:                                              ; preds = %151
  %169 = bitcast %struct.RARPPM_STATE** %10 to i8**
  %170 = load i8*, i8** %169, align 1
  %171 = add nsw i32 %160, -1
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 25, i32 2, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = add nsw i32 %163, -1
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 25, i32 2, i64 %176
  %178 = load i8, i8* %177, align 1
  %179 = icmp eq i8 %174, %178
  br i1 %179, label %242, label %180

180:                                              ; preds = %168
  %181 = zext i8 %178 to i64
  %182 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 25, i32 7, i64 %181, i32 0
  %183 = load %"struct.SubAllocator::RAR_NODE"*, %"struct.SubAllocator::RAR_NODE"** %182, align 8
  %184 = icmp eq %"struct.SubAllocator::RAR_NODE"* %183, null
  br i1 %184, label %193, label %185

185:                                              ; preds = %180
  %186 = bitcast %"struct.SubAllocator::RAR_NODE"* %183 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = bitcast %"struct.SubAllocator::RAR_NODE"** %182 to i64*
  store i64 %187, i64* %188, align 8
  %189 = bitcast %"struct.SubAllocator::RAR_NODE"* %183 to i8*
  %190 = mul nuw nsw i32 %163, 20
  %191 = zext i32 %190 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %189, i8* align 1 %170, i64 %191, i1 false) #11
  %192 = zext i8 %174 to i64
  br label %233

193:                                              ; preds = %180
  %194 = zext i8 %174 to i64
  %195 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 25, i32 1, i64 %194
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i32
  %198 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 25, i32 1, i64 %181
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = sub nsw i32 %197, %200
  %202 = mul nuw nsw i32 %200, 20
  %203 = zext i32 %202 to i64
  %204 = getelementptr inbounds i8, i8* %170, i64 %203
  %205 = add nsw i32 %201, -1
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 25, i32 2, i64 %206
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i64
  %210 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 25, i32 1, i64 %209
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i32
  %213 = icmp eq i32 %201, %212
  br i1 %213, label %233, label %214

214:                                              ; preds = %193
  %215 = add nsw i64 %209, -1
  %216 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 25, i32 7, i64 %215, i32 0
  %217 = bitcast %"struct.SubAllocator::RAR_NODE"** %216 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = bitcast i8* %204 to i64*
  store i64 %218, i64* %219, align 8
  %220 = bitcast %"struct.SubAllocator::RAR_NODE"** %216 to i8**
  store i8* %204, i8** %220, align 8
  %221 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 25, i32 1, i64 %215
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = mul nuw nsw i32 %223, 20
  %225 = zext i32 %224 to i64
  %226 = getelementptr inbounds i8, i8* %204, i64 %225
  %227 = xor i32 %223, -1
  %228 = add nsw i32 %201, %227
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 25, i32 2, i64 %229
  %231 = load i8, i8* %230, align 1
  %232 = zext i8 %231 to i64
  br label %233

233:                                              ; preds = %193, %214, %185
  %234 = phi i64 [ %192, %185 ], [ %209, %193 ], [ %232, %214 ]
  %235 = phi i8* [ %170, %185 ], [ %204, %193 ], [ %226, %214 ]
  %236 = phi i8* [ %189, %185 ], [ %170, %193 ], [ %170, %214 ]
  %237 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 25, i32 7, i64 %234, i32 0
  %238 = bitcast %"struct.SubAllocator::RAR_NODE"** %237 to i64*
  %239 = load i64, i64* %238, align 8
  %240 = bitcast i8* %235 to i64*
  store i64 %239, i64* %240, align 8
  %241 = bitcast %"struct.SubAllocator::RAR_NODE"** %237 to i8**
  store i8* %235, i8** %241, align 8
  br label %242

242:                                              ; preds = %233, %168
  %243 = phi i8* [ %170, %168 ], [ %236, %233 ]
  store i8* %243, i8** %169, align 1
  %244 = ptrtoint i8* %243 to i64
  br label %245

245:                                              ; preds = %165, %242
  %246 = phi i64 [ %167, %165 ], [ %244, %242 ]
  %247 = bitcast %struct.RARPPM_STATE** %7 to i64*
  store i64 %246, i64* %247, align 8
  br label %248

248:                                              ; preds = %245, %133
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8ModelPPM7CleanUpEv(%class.ModelPPM*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  store i64 0, i64* %2, align 8
  %6 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 4
  %7 = load i8*, i8** %6, align 8
  tail call void @free(i8* %7) #11
  %8 = load i64, i64* %2, align 8
  switch i64 %8, label %9 [
    i64 1048576, label %19
    i64 0, label %11
  ]

9:                                                ; preds = %5
  store i64 0, i64* %2, align 8
  %10 = load i8*, i8** %6, align 8
  tail call void @free(i8* %10) #11
  br label %11

11:                                               ; preds = %5, %1, %9
  %12 = tail call noalias i8* @malloc(i64 1747660) #11
  %13 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 4
  store i8* %12, i8** %13, align 8
  %14 = icmp eq i8* %12, null
  br i1 %14, label %15, label %16

15:                                               ; preds = %11
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  br label %19

16:                                               ; preds = %11
  %17 = getelementptr inbounds i8, i8* %12, i64 1747640
  %18 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 10
  store i8* %17, i8** %18, align 8
  store i64 1048576, i64* %2, align 8
  br label %19

19:                                               ; preds = %5, %15, %16
  %20 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 18
  store i8 1, i8* %20, align 8
  %21 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 11
  store i32 2, i32* %21, align 4
  tail call void @_ZN8ModelPPM16RestartModelRareEv(%class.ModelPPM* %0) #11
  %22 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 16, i64 0
  store i8 0, i8* %22, align 8
  %23 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 16, i64 1
  store i8 2, i8* %23, align 1
  %24 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 16, i64 2
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 4, i64 9, i1 false) #11
  %25 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 16, i64 11
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 6, i64 245, i1 false) #11
  %26 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 15, i64 0
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 15, i64 1
  store i8 1, i8* %27, align 1
  %28 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 15, i64 2
  store i8 2, i8* %28, align 1
  br label %29

29:                                               ; preds = %48, %19
  %30 = phi i64 [ 3, %19 ], [ %59, %48 ]
  %31 = phi i32 [ 1, %19 ], [ %58, %48 ]
  %32 = phi i32 [ 3, %19 ], [ %57, %48 ]
  %33 = phi i32 [ 1, %19 ], [ %55, %48 ]
  %34 = trunc i32 %32 to i8
  %35 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 15, i64 %30
  store i8 %34, i8* %35, align 1
  %36 = add nsw i32 %33, -1
  %37 = icmp eq i32 %36, 0
  %38 = add nsw i32 %31, 1
  %39 = zext i1 %37 to i32
  %40 = add nuw nsw i32 %32, %39
  %41 = select i1 %37, i32 %38, i32 %31
  %42 = add nuw nsw i64 %30, 1
  %43 = icmp eq i64 %42, 256
  br i1 %43, label %44, label %48

44:                                               ; preds = %29
  %45 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 17, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 64, i1 false) #11
  %46 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 17, i64 64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 8, i64 192, i1 false) #11
  %47 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 2, i32 1
  store i8 7, i8* %47, align 1
  ret void

48:                                               ; preds = %29
  %49 = select i1 %37, i32 %38, i32 %36
  %50 = trunc i32 %40 to i8
  %51 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 15, i64 %42
  store i8 %50, i8* %51, align 1
  %52 = add nsw i32 %49, -1
  %53 = icmp eq i32 %52, 0
  %54 = add nsw i32 %41, 1
  %55 = select i1 %53, i32 %54, i32 %52
  %56 = zext i1 %53 to i32
  %57 = add nuw nsw i32 %40, %56
  %58 = select i1 %53, i32 %54, i32 %41
  %59 = add nuw nsw i64 %30, 2
  br label %29
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8ModelPPM10DecodeInitEP6UnpackRi(%class.ModelPPM*, %class.Unpack*, i32* nocapture dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %1, i64 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, 32738
  br i1 %6, label %7, label %11

7:                                                ; preds = %3
  %8 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %1) #11
  %9 = load i32, i32* %4, align 8
  %10 = icmp sgt i32 %9, 32767
  br i1 %10, label %40, label %11

11:                                               ; preds = %3, %7
  %12 = phi i32 [ %9, %7 ], [ %5, %3 ]
  %13 = getelementptr inbounds %class.Unpack, %class.Unpack* %1, i64 0, i32 1, i32 3
  %14 = load i8*, i8** %13, align 8
  %15 = add nsw i32 %12, 1
  store i32 %15, i32* %4, align 8
  %16 = sext i32 %12 to i64
  %17 = getelementptr inbounds i8, i8* %14, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = and i32 %19, 32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %40, label %22

22:                                               ; preds = %11
  %23 = icmp sgt i32 %12, 32737
  br i1 %23, label %24, label %30

24:                                               ; preds = %22
  %25 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %1) #11
  %26 = load i32, i32* %4, align 8
  %27 = icmp sgt i32 %26, 32767
  br i1 %27, label %46, label %28

28:                                               ; preds = %24
  %29 = load i8*, i8** %13, align 8
  br label %30

30:                                               ; preds = %28, %22
  %31 = phi i8* [ %29, %28 ], [ %14, %22 ]
  %32 = phi i32 [ %26, %28 ], [ %15, %22 ]
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %4, align 8
  %34 = sext i32 %32 to i64
  %35 = getelementptr inbounds i8, i8* %31, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = shl nuw nsw i32 %37, 20
  %39 = add nuw nsw i32 %38, 1048576
  br label %46

40:                                               ; preds = %11, %7
  %41 = phi i32 [ %15, %11 ], [ %9, %7 ]
  %42 = phi i32 [ %19, %11 ], [ 0, %7 ]
  %43 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 0
  %44 = load i64, i64* %43, align 8
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %141, label %46

46:                                               ; preds = %30, %24, %40
  %47 = phi i32 [ %41, %40 ], [ %26, %24 ], [ %33, %30 ]
  %48 = phi i1 [ false, %40 ], [ true, %24 ], [ true, %30 ]
  %49 = phi i32 [ %42, %40 ], [ %19, %24 ], [ %19, %30 ]
  %50 = phi i32 [ -1431306240, %40 ], [ 1048576, %24 ], [ %39, %30 ]
  %51 = and i32 %49, 64
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %70, label %53

53:                                               ; preds = %46
  %54 = icmp sgt i32 %47, 32738
  br i1 %54, label %55, label %59

55:                                               ; preds = %53
  %56 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %1) #11
  %57 = load i32, i32* %4, align 8
  %58 = icmp sgt i32 %57, 32767
  br i1 %58, label %68, label %59

59:                                               ; preds = %55, %53
  %60 = phi i32 [ %57, %55 ], [ %47, %53 ]
  %61 = getelementptr inbounds %class.Unpack, %class.Unpack* %1, i64 0, i32 1, i32 3
  %62 = load i8*, i8** %61, align 8
  %63 = add nsw i32 %60, 1
  store i32 %63, i32* %4, align 8
  %64 = sext i32 %60 to i64
  %65 = getelementptr inbounds i8, i8* %62, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  br label %68

68:                                               ; preds = %55, %59
  %69 = phi i32 [ %67, %59 ], [ 0, %55 ]
  store i32 %69, i32* %2, align 4
  br label %70

70:                                               ; preds = %46, %68
  %71 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24
  tail call void @_ZN10RangeCoder11InitDecoderEP6Unpack(%class.RangeCoder* %71, %class.Unpack* %1)
  br i1 %48, label %72, label %137

72:                                               ; preds = %70
  %73 = and i32 %49, 31
  %74 = add nuw nsw i32 %73, 1
  %75 = icmp ugt i32 %73, 15
  %76 = mul nuw nsw i32 %73, 3
  %77 = add nsw i32 %76, -29
  %78 = select i1 %75, i32 %77, i32 %74
  %79 = icmp eq i32 %78, 1
  %80 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 0
  %81 = load i64, i64* %80, align 8
  br i1 %79, label %82, label %87

82:                                               ; preds = %72
  %83 = icmp eq i64 %81, 0
  br i1 %83, label %141, label %84

84:                                               ; preds = %82
  store i64 0, i64* %80, align 8
  %85 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 4
  %86 = load i8*, i8** %85, align 8
  tail call void @free(i8* %86) #11
  br label %141

87:                                               ; preds = %72
  %88 = zext i32 %50 to i64
  %89 = icmp eq i64 %81, %88
  br i1 %89, label %108, label %90

90:                                               ; preds = %87
  %91 = icmp eq i64 %81, 0
  br i1 %91, label %95, label %92

92:                                               ; preds = %90
  store i64 0, i64* %80, align 8
  %93 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 4
  %94 = load i8*, i8** %93, align 8
  tail call void @free(i8* %94) #11
  br label %95

95:                                               ; preds = %92, %90
  %96 = udiv i32 %50, 12
  %97 = mul i32 %96, 20
  %98 = add i32 %97, 40
  %99 = zext i32 %98 to i64
  %100 = tail call noalias i8* @malloc(i64 %99) #11
  %101 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 4
  store i8* %100, i8** %101, align 8
  %102 = icmp eq i8* %100, null
  br i1 %102, label %103, label %104

103:                                              ; preds = %95
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  br label %108

104:                                              ; preds = %95
  %105 = getelementptr inbounds i8, i8* %100, i64 %99
  %106 = getelementptr inbounds i8, i8* %105, i64 -20
  %107 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 10
  store i8* %106, i8** %107, align 8
  store i64 %88, i64* %80, align 8
  br label %108

108:                                              ; preds = %87, %103, %104
  %109 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 18
  store i8 1, i8* %109, align 8
  %110 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 11
  store i32 %78, i32* %110, align 4
  tail call void @_ZN8ModelPPM16RestartModelRareEv(%class.ModelPPM* %0) #11
  %111 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 16, i64 0
  store i8 0, i8* %111, align 8
  %112 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 16, i64 1
  store i8 2, i8* %112, align 1
  %113 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 16, i64 2
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %113, i8 4, i64 9, i1 false) #11
  %114 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 16, i64 11
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %114, i8 6, i64 245, i1 false) #11
  %115 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 15, i64 0
  store i8 0, i8* %115, align 1
  %116 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 15, i64 1
  store i8 1, i8* %116, align 1
  %117 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 15, i64 2
  store i8 2, i8* %117, align 1
  br label %118

118:                                              ; preds = %143, %108
  %119 = phi i64 [ 3, %108 ], [ %154, %143 ]
  %120 = phi i32 [ 1, %108 ], [ %153, %143 ]
  %121 = phi i32 [ 3, %108 ], [ %152, %143 ]
  %122 = phi i32 [ 1, %108 ], [ %150, %143 ]
  %123 = trunc i32 %121 to i8
  %124 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 15, i64 %119
  store i8 %123, i8* %124, align 1
  %125 = add nsw i32 %122, -1
  %126 = icmp eq i32 %125, 0
  %127 = add nsw i32 %120, 1
  %128 = zext i1 %126 to i32
  %129 = add nuw nsw i32 %121, %128
  %130 = select i1 %126, i32 %127, i32 %120
  %131 = add nuw nsw i64 %119, 1
  %132 = icmp eq i64 %131, 256
  br i1 %132, label %133, label %143

133:                                              ; preds = %118
  %134 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 17, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %134, i8 0, i64 64, i1 false) #11
  %135 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 17, i64 64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %135, i8 8, i64 192, i1 false) #11
  %136 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 2, i32 1
  store i8 7, i8* %136, align 1
  br label %137

137:                                              ; preds = %133, %70
  %138 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 4
  %139 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %138, align 8
  %140 = icmp ne %struct.RARPPM_CONTEXT* %139, null
  br label %141

141:                                              ; preds = %84, %82, %40, %137
  %142 = phi i1 [ %140, %137 ], [ false, %40 ], [ false, %82 ], [ false, %84 ]
  ret i1 %142

143:                                              ; preds = %118
  %144 = select i1 %126, i32 %127, i32 %125
  %145 = trunc i32 %129 to i8
  %146 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 15, i64 %131
  store i8 %145, i8* %146, align 1
  %147 = add nsw i32 %144, -1
  %148 = icmp eq i32 %147, 0
  %149 = add nsw i32 %130, 1
  %150 = select i1 %148, i32 %149, i32 %147
  %151 = zext i1 %148 to i32
  %152 = add nuw nsw i32 %129, %151
  %153 = select i1 %148, i32 %149, i32 %130
  %154 = add nuw nsw i64 %119, 2
  br label %118
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN8ModelPPM10DecodeCharEv(%class.ModelPPM*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 4
  %3 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %2, align 8
  %4 = bitcast %struct.RARPPM_CONTEXT* %3 to i8*
  %5 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 8
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %6, %4
  br i1 %7, label %8, label %284

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 10
  %10 = load i8*, i8** %9, align 8
  %11 = icmp ult i8* %10, %4
  br i1 %11, label %284, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %3, i64 0, i32 0
  %14 = load i16, i16* %13, align 1
  %15 = icmp eq i16 %14, 1
  br i1 %15, label %25, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %3, i64 0, i32 1, i32 0, i32 1
  %18 = bitcast %struct.RARPPM_STATE** %17 to i8**
  %19 = load i8*, i8** %18, align 1
  %20 = icmp ule i8* %19, %6
  %21 = icmp ugt i8* %19, %10
  %22 = or i1 %20, %21
  br i1 %22, label %284, label %23

23:                                               ; preds = %16
  %24 = tail call zeroext i1 @_ZN14RARPPM_CONTEXT13decodeSymbol1EP8ModelPPM(%struct.RARPPM_CONTEXT* %3, %class.ModelPPM* %0)
  br i1 %24, label %123, label %284

25:                                               ; preds = %12
  %26 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %3, i64 0, i32 1
  %27 = bitcast %union.anon.7* %26 to %struct.RARPPM_STATE*
  %28 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 7
  %29 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %28, align 8
  %30 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %29, i64 0, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i64
  %33 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 17, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 20
  store i8 %34, i8* %35, align 2
  %36 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %27, i64 0, i32 1
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i64
  %39 = add nsw i64 %38, -1
  %40 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 19
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %3, i64 0, i32 2
  %44 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %43, align 1
  %45 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %44, i64 0, i32 0
  %46 = load i16, i16* %45, align 1
  %47 = zext i16 %46 to i64
  %48 = add nsw i64 %47, -1
  %49 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 16, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = zext i8 %34 to i32
  %53 = bitcast %union.anon.7* %26 to i8*
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 17, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = shl nuw nsw i32 %58, 1
  %60 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 12
  %61 = load i32, i32* %60, align 8
  %62 = lshr i32 %61, 26
  %63 = and i32 %62, 32
  %64 = add nuw nsw i32 %42, %52
  %65 = add nuw nsw i32 %64, %51
  %66 = add nuw nsw i32 %65, %59
  %67 = add nuw nsw i32 %66, %63
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 22, i64 %39, i64 %68
  %70 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24, i32 1
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24, i32 0
  %73 = load i32, i32* %72, align 8
  %74 = sub i32 %71, %73
  %75 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24, i32 2
  %76 = load i32, i32* %75, align 8
  %77 = lshr i32 %76, 14
  store i32 %77, i32* %75, align 8
  %78 = udiv i32 %74, %77
  %79 = load i16, i16* %69, align 2
  %80 = zext i16 %79 to i32
  %81 = icmp ult i32 %78, %80
  br i1 %81, label %82, label %101

82:                                               ; preds = %25
  %83 = bitcast %struct.RARPPM_STATE** %28 to %union.anon.7**
  store %union.anon.7* %26, %union.anon.7** %83, align 8
  %84 = load i8, i8* %36, align 1
  %85 = lshr i8 %84, 7
  %86 = xor i8 %85, 1
  %87 = add i8 %86, %84
  store i8 %87, i8* %36, align 1
  %88 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24, i32 3, i32 0
  store i32 0, i32* %88, align 4
  %89 = load i16, i16* %69, align 2
  %90 = zext i16 %89 to i32
  %91 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24, i32 3, i32 1
  store i32 %90, i32* %91, align 4
  %92 = load i16, i16* %69, align 2
  %93 = zext i16 %92 to i32
  %94 = add nuw nsw i32 %93, 128
  %95 = add nuw nsw i32 %93, 32
  %96 = lshr i32 %95, 7
  %97 = sub nsw i32 %94, %96
  %98 = trunc i32 %97 to i16
  store i16 %98, i16* %69, align 2
  store i8 1, i8* %40, align 1
  %99 = load i32, i32* %60, align 8
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %60, align 8
  br label %123

101:                                              ; preds = %25
  %102 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24, i32 3, i32 0
  store i32 %80, i32* %102, align 4
  %103 = load i16, i16* %69, align 2
  %104 = zext i16 %103 to i32
  %105 = add nuw nsw i32 %104, 32
  %106 = lshr i32 %105, 7
  %107 = trunc i32 %106 to i16
  %108 = sub i16 %103, %107
  store i16 %108, i16* %69, align 2
  %109 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24, i32 3, i32 1
  store i32 16384, i32* %109, align 4
  %110 = load i16, i16* %69, align 2
  %111 = lshr i16 %110, 10
  %112 = zext i16 %111 to i64
  %113 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZL9ExpEscape, i64 0, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 9
  store i32 %115, i32* %116, align 4
  %117 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 8
  store i32 1, i32* %117, align 8
  %118 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 18
  %119 = load i8, i8* %118, align 8
  %120 = load i8, i8* %53, align 1
  %121 = zext i8 %120 to i64
  %122 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 14, i64 %121
  store i8 %119, i8* %122, align 1
  store i8 0, i8* %40, align 1
  store %struct.RARPPM_STATE* null, %struct.RARPPM_STATE** %28, align 8
  br label %123

123:                                              ; preds = %101, %82, %23
  %124 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24, i32 2
  %125 = load i32, i32* %124, align 8
  %126 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24, i32 3, i32 0
  %127 = load i32, i32* %126, align 4
  %128 = mul i32 %127, %125
  %129 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24, i32 0
  %130 = load i32, i32* %129, align 8
  %131 = add i32 %130, %128
  store i32 %131, i32* %129, align 8
  %132 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24, i32 3, i32 1
  %133 = load i32, i32* %132, align 4
  %134 = sub i32 %133, %127
  %135 = mul i32 %134, %125
  store i32 %135, i32* %124, align 8
  %136 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 7
  %137 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %136, align 8
  %138 = icmp eq %struct.RARPPM_STATE* %137, null
  br i1 %138, label %139, label %219

139:                                              ; preds = %123
  %140 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24, i32 1
  %141 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24, i32 4
  %142 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 10
  %143 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 8
  br label %144

144:                                              ; preds = %186, %139
  %145 = phi i32 [ %135, %139 ], [ %187, %186 ]
  %146 = phi i32 [ %131, %139 ], [ %188, %186 ]
  %147 = add i32 %145, %146
  %148 = xor i32 %147, %146
  %149 = icmp ult i32 %148, 16777216
  br i1 %149, label %159, label %150

150:                                              ; preds = %144
  %151 = icmp ult i32 %145, 32768
  br i1 %151, label %156, label %152

152:                                              ; preds = %150
  %153 = load i32, i32* %142, align 8
  %154 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %2, align 8
  %155 = load i8*, i8** %5, align 8
  br label %189

156:                                              ; preds = %150
  %157 = sub nsw i32 0, %146
  %158 = and i32 %157, 32767
  store i32 %158, i32* %124, align 8
  br label %159

159:                                              ; preds = %144, %156
  %160 = load i32, i32* %140, align 4
  %161 = shl i32 %160, 8
  %162 = load %class.Unpack*, %class.Unpack** %141, align 8
  %163 = getelementptr inbounds %class.Unpack, %class.Unpack* %162, i64 0, i32 1, i32 0
  %164 = load i32, i32* %163, align 8
  %165 = icmp sgt i32 %164, 32738
  br i1 %165, label %166, label %170

166:                                              ; preds = %159
  %167 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %162) #11
  %168 = load i32, i32* %163, align 8
  %169 = icmp sgt i32 %168, 32767
  br i1 %169, label %179, label %170

170:                                              ; preds = %166, %159
  %171 = phi i32 [ %168, %166 ], [ %164, %159 ]
  %172 = getelementptr inbounds %class.Unpack, %class.Unpack* %162, i64 0, i32 1, i32 3
  %173 = load i8*, i8** %172, align 8
  %174 = add nsw i32 %171, 1
  store i32 %174, i32* %163, align 8
  %175 = sext i32 %171 to i64
  %176 = getelementptr inbounds i8, i8* %173, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  br label %179

179:                                              ; preds = %166, %170
  %180 = phi i32 [ %178, %170 ], [ 0, %166 ]
  %181 = or i32 %180, %161
  store i32 %181, i32* %140, align 4
  %182 = load i32, i32* %124, align 8
  %183 = shl i32 %182, 8
  store i32 %183, i32* %124, align 8
  %184 = load i32, i32* %129, align 8
  %185 = shl i32 %184, 8
  store i32 %185, i32* %129, align 8
  br label %186

186:                                              ; preds = %179, %208
  %187 = phi i32 [ %183, %179 ], [ %216, %208 ]
  %188 = phi i32 [ %185, %179 ], [ %213, %208 ]
  br label %144

189:                                              ; preds = %152, %200
  %190 = phi %struct.RARPPM_CONTEXT* [ %154, %152 ], [ %194, %200 ]
  %191 = phi i32 [ %153, %152 ], [ %192, %200 ]
  %192 = add nsw i32 %191, 1
  store i32 %192, i32* %142, align 8
  %193 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %190, i64 0, i32 2
  %194 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %193, align 1
  store %struct.RARPPM_CONTEXT* %194, %struct.RARPPM_CONTEXT** %2, align 8
  %195 = bitcast %struct.RARPPM_CONTEXT* %194 to i8*
  %196 = icmp ult i8* %155, %195
  br i1 %196, label %197, label %284

197:                                              ; preds = %189
  %198 = load i8*, i8** %9, align 8
  %199 = icmp ult i8* %198, %195
  br i1 %199, label %284, label %200

200:                                              ; preds = %197
  %201 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %194, i64 0, i32 0
  %202 = load i16, i16* %201, align 1
  %203 = zext i16 %202 to i32
  %204 = load i32, i32* %143, align 8
  %205 = icmp eq i32 %204, %203
  br i1 %205, label %189, label %206

206:                                              ; preds = %200
  %207 = tail call zeroext i1 @_ZN14RARPPM_CONTEXT13decodeSymbol2EP8ModelPPM(%struct.RARPPM_CONTEXT* %194, %class.ModelPPM* %0)
  br i1 %207, label %208, label %284

208:                                              ; preds = %206
  %209 = load i32, i32* %124, align 8
  %210 = load i32, i32* %126, align 4
  %211 = mul i32 %210, %209
  %212 = load i32, i32* %129, align 8
  %213 = add i32 %212, %211
  store i32 %213, i32* %129, align 8
  %214 = load i32, i32* %132, align 4
  %215 = sub i32 %214, %210
  %216 = mul i32 %215, %209
  store i32 %216, i32* %124, align 8
  %217 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %136, align 8
  %218 = icmp eq %struct.RARPPM_STATE* %217, null
  br i1 %218, label %186, label %219

219:                                              ; preds = %208, %123
  %220 = phi %struct.RARPPM_STATE* [ %137, %123 ], [ %217, %208 ]
  %221 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %220, i64 0, i32 0
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 10
  %225 = load i32, i32* %224, align 8
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %235

227:                                              ; preds = %219
  %228 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %220, i64 0, i32 2
  %229 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %228, align 1
  %230 = bitcast %struct.RARPPM_CONTEXT* %229 to i8*
  %231 = load i8*, i8** %5, align 8
  %232 = icmp ult i8* %231, %230
  br i1 %232, label %233, label %235

233:                                              ; preds = %227
  %234 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 6
  store %struct.RARPPM_CONTEXT* %229, %struct.RARPPM_CONTEXT** %234, align 8
  store %struct.RARPPM_CONTEXT* %229, %struct.RARPPM_CONTEXT** %2, align 8
  br label %241

235:                                              ; preds = %219, %227
  tail call void @_ZN8ModelPPM11UpdateModelEv(%class.ModelPPM* %0)
  %236 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 18
  %237 = load i8, i8* %236, align 8
  %238 = icmp eq i8 %237, 0
  br i1 %238, label %239, label %241

239:                                              ; preds = %235
  store i8 1, i8* %236, align 8
  %240 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 14, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %240, i8 0, i64 256, i1 false) #11
  br label %241

241:                                              ; preds = %235, %239, %233
  %242 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24, i32 1
  %243 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 24, i32 4
  %244 = load i32, i32* %129, align 8
  %245 = load i32, i32* %124, align 8
  br label %246

246:                                              ; preds = %277, %241
  %247 = phi i32 [ %281, %277 ], [ %245, %241 ]
  %248 = phi i32 [ %283, %277 ], [ %244, %241 ]
  %249 = add i32 %247, %248
  %250 = xor i32 %249, %248
  %251 = icmp ult i32 %250, 16777216
  br i1 %251, label %257, label %252

252:                                              ; preds = %246
  %253 = icmp ult i32 %247, 32768
  br i1 %253, label %254, label %284

254:                                              ; preds = %252
  %255 = sub nsw i32 0, %248
  %256 = and i32 %255, 32767
  store i32 %256, i32* %124, align 8
  br label %257

257:                                              ; preds = %246, %254
  %258 = load i32, i32* %242, align 4
  %259 = shl i32 %258, 8
  %260 = load %class.Unpack*, %class.Unpack** %243, align 8
  %261 = getelementptr inbounds %class.Unpack, %class.Unpack* %260, i64 0, i32 1, i32 0
  %262 = load i32, i32* %261, align 8
  %263 = icmp sgt i32 %262, 32738
  br i1 %263, label %264, label %268

264:                                              ; preds = %257
  %265 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %260) #11
  %266 = load i32, i32* %261, align 8
  %267 = icmp sgt i32 %266, 32767
  br i1 %267, label %277, label %268

268:                                              ; preds = %264, %257
  %269 = phi i32 [ %266, %264 ], [ %262, %257 ]
  %270 = getelementptr inbounds %class.Unpack, %class.Unpack* %260, i64 0, i32 1, i32 3
  %271 = load i8*, i8** %270, align 8
  %272 = add nsw i32 %269, 1
  store i32 %272, i32* %261, align 8
  %273 = sext i32 %269 to i64
  %274 = getelementptr inbounds i8, i8* %271, i64 %273
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i32
  br label %277

277:                                              ; preds = %264, %268
  %278 = phi i32 [ %276, %268 ], [ 0, %264 ]
  %279 = or i32 %278, %259
  store i32 %279, i32* %242, align 4
  %280 = load i32, i32* %124, align 8
  %281 = shl i32 %280, 8
  store i32 %281, i32* %124, align 8
  %282 = load i32, i32* %129, align 8
  %283 = shl i32 %282, 8
  store i32 %283, i32* %129, align 8
  br label %246

284:                                              ; preds = %206, %197, %189, %252, %23, %16, %8, %1
  %285 = phi i32 [ -1, %1 ], [ -1, %8 ], [ -1, %16 ], [ -1, %23 ], [ %223, %252 ], [ -1, %189 ], [ -1, %197 ], [ -1, %206 ]
  ret i32 %285
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN14RARPPM_CONTEXT13decodeSymbol1EP8ModelPPM(%struct.RARPPM_CONTEXT*, %class.ModelPPM*) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load i16, i16* %3, align 1
  %5 = zext i16 %4 to i32
  %6 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 24, i32 3
  %7 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 24, i32 3, i32 2
  store i32 %5, i32* %7, align 4
  %8 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %0, i64 0, i32 1, i32 0, i32 1
  %9 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %8, align 1
  %10 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 24, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 24, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = sub i32 %11, %13
  %15 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 24, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = udiv i32 %16, %5
  store i32 %17, i32* %15, align 8
  %18 = udiv i32 %14, %17
  %19 = icmp slt i32 %18, %5
  br i1 %19, label %20, label %161

20:                                               ; preds = %2
  %21 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %9, i64 0, i32 1
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = icmp slt i32 %18, %23
  br i1 %24, label %25, label %44

25:                                               ; preds = %20
  %26 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 24, i32 3, i32 1
  store i32 %23, i32* %26, align 4
  %27 = shl nuw nsw i32 %23, 1
  %28 = icmp ugt i32 %27, %5
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 19
  store i8 %29, i8* %30, align 1
  %31 = zext i1 %28 to i32
  %32 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 12
  %33 = load i32, i32* %32, align 8
  %34 = add nsw i32 %33, %31
  store i32 %34, i32* %32, align 8
  %35 = add nuw nsw i32 %23, 4
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 7
  store %struct.RARPPM_STATE* %9, %struct.RARPPM_STATE** %37, align 8
  store i8 %36, i8* %21, align 1
  %38 = load i16, i16* %3, align 1
  %39 = add i16 %38, 4
  store i16 %39, i16* %3, align 1
  %40 = icmp ugt i32 %35, 124
  br i1 %40, label %41, label %42

41:                                               ; preds = %25
  tail call void @_ZN14RARPPM_CONTEXT7rescaleEP8ModelPPM(%struct.RARPPM_CONTEXT* %0, %class.ModelPPM* %1)
  br label %42

42:                                               ; preds = %41, %25
  %43 = getelementptr inbounds %"struct.RangeCoder::SUBRANGE", %"struct.RangeCoder::SUBRANGE"* %6, i64 0, i32 0
  store i32 0, i32* %43, align 4
  br label %161

44:                                               ; preds = %20
  %45 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 7
  %46 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %45, align 8
  %47 = icmp eq %struct.RARPPM_STATE* %46, null
  br i1 %47, label %161, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 19
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %0, i64 0, i32 0
  %51 = load i16, i16* %50, align 1
  %52 = zext i16 %51 to i32
  %53 = add nsw i32 %52, -1
  br label %54

54:                                               ; preds = %64, %48
  %55 = phi %struct.RARPPM_STATE* [ %9, %48 ], [ %58, %64 ]
  %56 = phi i32 [ %53, %48 ], [ %65, %64 ]
  %57 = phi i32 [ %23, %48 ], [ %62, %64 ]
  %58 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %55, i64 1
  %59 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %55, i64 1, i32 1
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = add nuw nsw i32 %57, %61
  %63 = icmp sgt i32 %62, %18
  br i1 %63, label %134, label %64

64:                                               ; preds = %54
  %65 = add nsw i32 %56, -1
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %54

67:                                               ; preds = %64
  %68 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %46, i64 0, i32 0
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 17, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 20
  store i8 %72, i8* %73, align 2
  %74 = getelementptr inbounds %"struct.RangeCoder::SUBRANGE", %"struct.RangeCoder::SUBRANGE"* %6, i64 0, i32 0
  store i32 %62, i32* %74, align 4
  %75 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 18
  %76 = load i8, i8* %75, align 8
  %77 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %58, i64 0, i32 0
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i64
  %80 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 14, i64 %79
  store i8 %76, i8* %80, align 1
  %81 = load i16, i16* %50, align 1
  %82 = zext i16 %81 to i32
  %83 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 8
  store i32 %82, i32* %83, align 8
  %84 = add nsw i32 %82, -1
  store %struct.RARPPM_STATE* null, %struct.RARPPM_STATE** %45, align 8
  %85 = add nsw i32 %82, -2
  %86 = and i32 %84, 3
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %101, label %88

88:                                               ; preds = %67, %88
  %89 = phi %struct.RARPPM_STATE* [ %93, %88 ], [ %58, %67 ]
  %90 = phi i32 [ %98, %88 ], [ %84, %67 ]
  %91 = phi i32 [ %99, %88 ], [ %86, %67 ]
  %92 = load i8, i8* %75, align 8
  %93 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %89, i64 -1
  %94 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %93, i64 0, i32 0
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i64
  %97 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 14, i64 %96
  store i8 %92, i8* %97, align 1
  %98 = add nsw i32 %90, -1
  %99 = add i32 %91, -1
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %88, !llvm.loop !4

101:                                              ; preds = %88, %67
  %102 = phi %struct.RARPPM_STATE* [ %58, %67 ], [ %93, %88 ]
  %103 = phi i32 [ %84, %67 ], [ %98, %88 ]
  %104 = icmp ult i32 %85, 3
  br i1 %104, label %131, label %105

105:                                              ; preds = %101, %105
  %106 = phi %struct.RARPPM_STATE* [ %124, %105 ], [ %102, %101 ]
  %107 = phi i32 [ %129, %105 ], [ %103, %101 ]
  %108 = load i8, i8* %75, align 8
  %109 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %106, i64 -1, i32 0
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i64
  %112 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 14, i64 %111
  store i8 %108, i8* %112, align 1
  %113 = load i8, i8* %75, align 8
  %114 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %106, i64 -2, i32 0
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i64
  %117 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 14, i64 %116
  store i8 %113, i8* %117, align 1
  %118 = load i8, i8* %75, align 8
  %119 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %106, i64 -3, i32 0
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i64
  %122 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 14, i64 %121
  store i8 %118, i8* %122, align 1
  %123 = load i8, i8* %75, align 8
  %124 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %106, i64 -4
  %125 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %124, i64 0, i32 0
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 14, i64 %127
  store i8 %123, i8* %128, align 1
  %129 = add nsw i32 %107, -4
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %105

131:                                              ; preds = %105, %101
  %132 = load i32, i32* %7, align 4
  %133 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 24, i32 3, i32 1
  store i32 %132, i32* %133, align 4
  br label %161

134:                                              ; preds = %54
  %135 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %55, i64 1, i32 1
  %136 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 24, i32 3, i32 1
  store i32 %62, i32* %136, align 4
  %137 = load i8, i8* %135, align 1
  %138 = zext i8 %137 to i32
  %139 = sub nsw i32 %62, %138
  %140 = getelementptr inbounds %"struct.RangeCoder::SUBRANGE", %"struct.RangeCoder::SUBRANGE"* %6, i64 0, i32 0
  store i32 %139, i32* %140, align 4
  store %struct.RARPPM_STATE* %58, %struct.RARPPM_STATE** %45, align 8
  %141 = load i8, i8* %135, align 1
  %142 = add i8 %141, 4
  store i8 %142, i8* %135, align 1
  %143 = load i16, i16* %3, align 1
  %144 = add i16 %143, 4
  store i16 %144, i16* %3, align 1
  %145 = load i8, i8* %135, align 1
  %146 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %55, i64 0, i32 1
  %147 = load i8, i8* %146, align 1
  %148 = icmp ugt i8 %145, %147
  br i1 %148, label %149, label %161

149:                                              ; preds = %134
  %150 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %58, i64 0, i32 0
  %151 = load i8, i8* %150, align 1
  %152 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %55, i64 1, i32 2
  %153 = bitcast %struct.RARPPM_CONTEXT** %152 to i64*
  %154 = load i64, i64* %153, align 1
  %155 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %55, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %150, i8* align 1 %155, i64 10, i1 false) #11
  store i8 %151, i8* %155, align 1
  store i8 %145, i8* %146, align 1
  %156 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %55, i64 0, i32 2
  %157 = bitcast %struct.RARPPM_CONTEXT** %156 to i64*
  store i64 %154, i64* %157, align 1
  store %struct.RARPPM_STATE* %55, %struct.RARPPM_STATE** %45, align 8
  %158 = load i8, i8* %146, align 1
  %159 = icmp ugt i8 %158, 124
  br i1 %159, label %160, label %161

160:                                              ; preds = %149
  tail call void @_ZN14RARPPM_CONTEXT7rescaleEP8ModelPPM(%struct.RARPPM_CONTEXT* %0, %class.ModelPPM* %1) #11
  br label %161

161:                                              ; preds = %160, %149, %134, %44, %2, %131, %42
  %162 = phi i1 [ true, %42 ], [ true, %131 ], [ false, %2 ], [ false, %44 ], [ true, %134 ], [ true, %149 ], [ true, %160 ]
  ret i1 %162
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN14RARPPM_CONTEXT13decodeSymbol2EP8ModelPPM(%struct.RARPPM_CONTEXT*, %class.ModelPPM*) local_unnamed_addr #6 comdat align 2 {
  %3 = alloca [256 x %struct.RARPPM_STATE*], align 16
  %4 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %0, i64 0, i32 0
  %5 = load i16, i16* %4, align 1
  %6 = zext i16 %5 to i32
  %7 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 8
  %8 = load i32, i32* %7, align 8
  %9 = sub nsw i32 %6, %8
  %10 = icmp eq i16 %5, 256
  br i1 %10, label %54, label %11

11:                                               ; preds = %2
  %12 = add nsw i32 %9, -1
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 15, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i64
  %17 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %0, i64 0, i32 2
  %18 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %17, align 1
  %19 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %18, i64 0, i32 0
  %20 = load i16, i16* %19, align 1
  %21 = zext i16 %20 to i32
  %22 = sub nsw i32 %21, %6
  %23 = icmp sgt i32 %22, %9
  %24 = zext i1 %23 to i64
  %25 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 1, i64 %16, i64 %24
  %26 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %0, i64 0, i32 1, i32 0, i32 0
  %27 = load i16, i16* %26, align 1
  %28 = zext i16 %27 to i32
  %29 = mul nuw nsw i32 %6, 11
  %30 = icmp ugt i32 %29, %28
  %31 = zext i1 %30 to i64
  %32 = shl nuw nsw i64 %31, 1
  %33 = getelementptr inbounds %struct.RARPPM_SEE2_CONTEXT, %struct.RARPPM_SEE2_CONTEXT* %25, i64 %32
  %34 = icmp sgt i32 %8, %9
  %35 = zext i1 %34 to i64
  %36 = shl nuw nsw i64 %35, 2
  %37 = getelementptr inbounds %struct.RARPPM_SEE2_CONTEXT, %struct.RARPPM_SEE2_CONTEXT* %33, i64 %36
  %38 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 20
  %39 = load i8, i8* %38, align 2
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds %struct.RARPPM_SEE2_CONTEXT, %struct.RARPPM_SEE2_CONTEXT* %37, i64 %40
  %42 = getelementptr inbounds %struct.RARPPM_SEE2_CONTEXT, %struct.RARPPM_SEE2_CONTEXT* %41, i64 0, i32 0
  %43 = load i16, i16* %42, align 1
  %44 = zext i16 %43 to i32
  %45 = getelementptr inbounds %struct.RARPPM_SEE2_CONTEXT, %struct.RARPPM_SEE2_CONTEXT* %41, i64 0, i32 1
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = lshr i32 %44, %47
  %49 = trunc i32 %48 to i16
  %50 = sub i16 %43, %49
  store i16 %50, i16* %42, align 1
  %51 = icmp eq i32 %48, 0
  %52 = zext i1 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  br label %56

54:                                               ; preds = %2
  %55 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 2
  br label %56

56:                                               ; preds = %11, %54
  %57 = phi i32 [ 1, %54 ], [ %53, %11 ]
  %58 = phi %struct.RARPPM_SEE2_CONTEXT* [ %55, %54 ], [ %41, %11 ]
  %59 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 24, i32 3, i32 2
  store i32 %57, i32* %59, align 4
  %60 = bitcast [256 x %struct.RARPPM_STATE*]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %60) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %60, i8 -86, i64 2048, i1 false)
  %61 = getelementptr inbounds [256 x %struct.RARPPM_STATE*], [256 x %struct.RARPPM_STATE*]* %3, i64 0, i64 0
  %62 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %0, i64 0, i32 1, i32 0, i32 1
  %63 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %62, align 1
  %64 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %63, i64 -1
  %65 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 18
  %66 = getelementptr inbounds [256 x %struct.RARPPM_STATE*], [256 x %struct.RARPPM_STATE*]* %3, i64 0, i64 256
  br label %67

67:                                               ; preds = %88, %56
  %68 = phi i32 [ 0, %56 ], [ %86, %88 ]
  %69 = phi i32 [ %9, %56 ], [ %90, %88 ]
  %70 = phi %struct.RARPPM_STATE** [ %61, %56 ], [ %89, %88 ]
  %71 = phi %struct.RARPPM_STATE* [ %64, %56 ], [ %75, %88 ]
  %72 = load i8, i8* %65, align 8
  br label %73

73:                                               ; preds = %73, %67
  %74 = phi %struct.RARPPM_STATE* [ %71, %67 ], [ %75, %73 ]
  %75 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %74, i64 1
  %76 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %75, i64 0, i32 0
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i64
  %79 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 14, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %80, %72
  br i1 %81, label %73, label %82

82:                                               ; preds = %73
  %83 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %74, i64 1, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = add nuw nsw i32 %68, %85
  %87 = icmp ult %struct.RARPPM_STATE** %70, %66
  br i1 %87, label %88, label %199

88:                                               ; preds = %82
  %89 = getelementptr inbounds %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %70, i64 1
  store %struct.RARPPM_STATE* %75, %struct.RARPPM_STATE** %70, align 8
  %90 = add nsw i32 %69, -1
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %67

92:                                               ; preds = %88
  %93 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 24, i32 3
  %94 = load i32, i32* %59, align 4
  %95 = add i32 %94, %86
  store i32 %95, i32* %59, align 4
  %96 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 24, i32 1
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 24, i32 0
  %99 = load i32, i32* %98, align 8
  %100 = sub i32 %97, %99
  %101 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 24, i32 2
  %102 = load i32, i32* %101, align 8
  %103 = udiv i32 %102, %95
  store i32 %103, i32* %101, align 8
  %104 = udiv i32 %100, %103
  %105 = icmp slt i32 %104, %95
  br i1 %105, label %106, label %199

106:                                              ; preds = %92
  %107 = icmp slt i32 %104, %86
  br i1 %107, label %108, label %169

108:                                              ; preds = %106
  %109 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %61, align 16
  %110 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %109, i64 0, i32 1
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = icmp slt i32 %104, %112
  br i1 %113, label %128, label %114

114:                                              ; preds = %108, %119
  %115 = phi i32 [ %124, %119 ], [ %112, %108 ]
  %116 = phi %struct.RARPPM_STATE** [ %117, %119 ], [ %61, %108 ]
  %117 = getelementptr inbounds %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %116, i64 1
  %118 = icmp ult %struct.RARPPM_STATE** %117, %66
  br i1 %118, label %119, label %199

119:                                              ; preds = %114
  %120 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %117, align 8
  %121 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %120, i64 0, i32 1
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = add nuw nsw i32 %115, %123
  %125 = icmp sgt i32 %124, %104
  br i1 %125, label %126, label %114

126:                                              ; preds = %119
  %127 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %120, i64 0, i32 1
  br label %128

128:                                              ; preds = %126, %108
  %129 = phi %struct.RARPPM_STATE* [ %109, %108 ], [ %120, %126 ]
  %130 = phi i8* [ %110, %108 ], [ %127, %126 ]
  %131 = phi i32 [ %112, %108 ], [ %124, %126 ]
  %132 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 24, i32 3, i32 1
  store i32 %131, i32* %132, align 4
  %133 = load i8, i8* %130, align 1
  %134 = zext i8 %133 to i32
  %135 = sub nsw i32 %131, %134
  %136 = getelementptr inbounds %"struct.RangeCoder::SUBRANGE", %"struct.RangeCoder::SUBRANGE"* %93, i64 0, i32 0
  store i32 %135, i32* %136, align 4
  %137 = getelementptr inbounds %struct.RARPPM_SEE2_CONTEXT, %struct.RARPPM_SEE2_CONTEXT* %58, i64 0, i32 1
  %138 = load i8, i8* %137, align 1
  %139 = icmp ult i8 %138, 7
  br i1 %139, label %140, label %153

140:                                              ; preds = %128
  %141 = getelementptr inbounds %struct.RARPPM_SEE2_CONTEXT, %struct.RARPPM_SEE2_CONTEXT* %58, i64 0, i32 2
  %142 = load i8, i8* %141, align 1
  %143 = add i8 %142, -1
  store i8 %143, i8* %141, align 1
  %144 = icmp eq i8 %143, 0
  br i1 %144, label %145, label %153

145:                                              ; preds = %140
  %146 = getelementptr inbounds %struct.RARPPM_SEE2_CONTEXT, %struct.RARPPM_SEE2_CONTEXT* %58, i64 0, i32 0
  %147 = load i16, i16* %146, align 1
  %148 = shl i16 %147, 1
  store i16 %148, i16* %146, align 1
  %149 = add nuw nsw i8 %138, 1
  store i8 %149, i8* %137, align 1
  %150 = zext i8 %138 to i32
  %151 = shl i32 3, %150
  %152 = trunc i32 %151 to i8
  store i8 %152, i8* %141, align 1
  br label %153

153:                                              ; preds = %128, %140, %145
  %154 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 7
  store %struct.RARPPM_STATE* %129, %struct.RARPPM_STATE** %154, align 8
  %155 = load i8, i8* %130, align 1
  %156 = add i8 %155, 4
  store i8 %156, i8* %130, align 1
  %157 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %0, i64 0, i32 1, i32 0, i32 0
  %158 = load i16, i16* %157, align 1
  %159 = add i16 %158, 4
  store i16 %159, i16* %157, align 1
  %160 = load i8, i8* %130, align 1
  %161 = icmp ugt i8 %160, 124
  br i1 %161, label %162, label %163

162:                                              ; preds = %153
  call void @_ZN14RARPPM_CONTEXT7rescaleEP8ModelPPM(%struct.RARPPM_CONTEXT* %0, %class.ModelPPM* %1) #11
  br label %163

163:                                              ; preds = %153, %162
  %164 = load i8, i8* %65, align 8
  %165 = add i8 %164, 1
  store i8 %165, i8* %65, align 8
  %166 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 13
  %167 = load i32, i32* %166, align 4
  %168 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 12
  store i32 %167, i32* %168, align 8
  br label %199

169:                                              ; preds = %106
  %170 = getelementptr inbounds %"struct.RangeCoder::SUBRANGE", %"struct.RangeCoder::SUBRANGE"* %93, i64 0, i32 0
  store i32 %86, i32* %170, align 4
  %171 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 24, i32 3, i32 1
  store i32 %95, i32* %171, align 4
  %172 = load i16, i16* %4, align 1
  %173 = zext i16 %172 to i32
  %174 = load i32, i32* %7, align 8
  %175 = sub nsw i32 %173, %174
  %176 = getelementptr inbounds [256 x %struct.RARPPM_STATE*], [256 x %struct.RARPPM_STATE*]* %3, i64 0, i64 -1
  br label %177

177:                                              ; preds = %182, %169
  %178 = phi i32 [ %175, %169 ], [ %189, %182 ]
  %179 = phi %struct.RARPPM_STATE** [ %176, %169 ], [ %180, %182 ]
  %180 = getelementptr inbounds %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %179, i64 1
  %181 = icmp ult %struct.RARPPM_STATE** %180, %66
  br i1 %181, label %182, label %199

182:                                              ; preds = %177
  %183 = load i8, i8* %65, align 8
  %184 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %180, align 8
  %185 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %184, i64 0, i32 0
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i64
  %188 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %1, i64 0, i32 14, i64 %187
  store i8 %183, i8* %188, align 1
  %189 = add nsw i32 %178, -1
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %191, label %177

191:                                              ; preds = %182
  %192 = load i32, i32* %59, align 4
  %193 = getelementptr inbounds %struct.RARPPM_SEE2_CONTEXT, %struct.RARPPM_SEE2_CONTEXT* %58, i64 0, i32 0
  %194 = load i16, i16* %193, align 1
  %195 = trunc i32 %192 to i16
  %196 = add i16 %194, %195
  store i16 %196, i16* %193, align 1
  %197 = load i16, i16* %4, align 1
  %198 = zext i16 %197 to i32
  store i32 %198, i32* %7, align 8
  br label %199

199:                                              ; preds = %82, %177, %114, %163, %191, %92
  %200 = phi i1 [ false, %92 ], [ true, %191 ], [ true, %163 ], [ false, %114 ], [ false, %177 ], [ false, %82 ]
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %60) #11
  ret i1 %200
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8ModelPPM11UpdateModelEv(%class.ModelPPM*) local_unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 7
  %3 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %2, align 8
  %4 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %3, i64 0, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %3, i64 0, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %3, i64 0, i32 2
  %9 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %8, align 1
  %10 = zext i8 %7 to i32
  %11 = icmp ult i8 %7, 31
  br i1 %11, label %12, label %66

12:                                               ; preds = %1
  %13 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 4
  %14 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %13, align 8
  %15 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %14, i64 0, i32 2
  %16 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %15, align 1
  %17 = icmp eq %struct.RARPPM_CONTEXT* %16, null
  br i1 %17, label %66, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %16, i64 0, i32 0
  %20 = load i16, i16* %19, align 1
  %21 = icmp eq i16 %20, 1
  %22 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %16, i64 0, i32 1
  br i1 %21, label %59, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %16, i64 0, i32 1, i32 0, i32 1
  %25 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %24, align 1
  %26 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %25, i64 0, i32 0
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, %5
  br i1 %28, label %49, label %29

29:                                               ; preds = %23, %29
  %30 = phi %struct.RARPPM_STATE* [ %31, %29 ], [ %25, %23 ]
  %31 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %30, i64 1
  %32 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %31, i64 0, i32 0
  %33 = load i8, i8* %32, align 1
  %34 = icmp eq i8 %33, %5
  br i1 %34, label %35, label %29

35:                                               ; preds = %29
  %36 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %30, i64 1, i32 1
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %30, i64 0, i32 1
  %39 = load i8, i8* %38, align 1
  %40 = icmp ult i8 %37, %39
  br i1 %40, label %49, label %41

41:                                               ; preds = %35
  %42 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %31, i64 0, i32 0
  %43 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %30, i64 1, i32 2
  %44 = bitcast %struct.RARPPM_CONTEXT** %43 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %30, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %46, i64 10, i1 false) #11
  store i8 %5, i8* %46, align 1
  store i8 %37, i8* %38, align 1
  %47 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %30, i64 0, i32 2
  %48 = bitcast %struct.RARPPM_CONTEXT** %47 to i64*
  store i64 %45, i64* %48, align 1
  br label %49

49:                                               ; preds = %35, %23, %41
  %50 = phi %struct.RARPPM_STATE* [ %30, %41 ], [ %31, %35 ], [ %25, %23 ]
  %51 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %50, i64 0, i32 1
  %52 = load i8, i8* %51, align 1
  %53 = icmp ult i8 %52, 115
  br i1 %53, label %54, label %66

54:                                               ; preds = %49
  %55 = add nuw nsw i8 %52, 2
  store i8 %55, i8* %51, align 1
  %56 = getelementptr inbounds %union.anon.7, %union.anon.7* %22, i64 0, i32 0, i32 0
  %57 = load i16, i16* %56, align 1
  %58 = add i16 %57, 2
  store i16 %58, i16* %56, align 1
  br label %66

59:                                               ; preds = %18
  %60 = bitcast %union.anon.7* %22 to %struct.RARPPM_STATE*
  %61 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %60, i64 0, i32 1
  %62 = load i8, i8* %61, align 1
  %63 = icmp ult i8 %62, 32
  %64 = zext i1 %63 to i8
  %65 = add i8 %62, %64
  store i8 %65, i8* %61, align 1
  br label %66

66:                                               ; preds = %12, %59, %54, %49, %1
  %67 = phi %struct.RARPPM_STATE* [ %50, %54 ], [ %50, %49 ], [ %60, %59 ], [ null, %12 ], [ null, %1 ]
  %68 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 10
  %69 = load i32, i32* %68, align 8
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %78

71:                                               ; preds = %66
  %72 = tail call %struct.RARPPM_CONTEXT* @_ZN8ModelPPM16CreateSuccessorsEbP12RARPPM_STATE(%class.ModelPPM* %0, i1 zeroext true, %struct.RARPPM_STATE* %67)
  %73 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %2, align 8
  %74 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %73, i64 0, i32 2
  store %struct.RARPPM_CONTEXT* %72, %struct.RARPPM_CONTEXT** %74, align 1
  %75 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 6
  store %struct.RARPPM_CONTEXT* %72, %struct.RARPPM_CONTEXT** %75, align 8
  %76 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 4
  store %struct.RARPPM_CONTEXT* %72, %struct.RARPPM_CONTEXT** %76, align 8
  %77 = icmp eq %struct.RARPPM_CONTEXT* %72, null
  br i1 %77, label %316, label %318

78:                                               ; preds = %66
  %79 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25
  %80 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 8
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds i8, i8* %81, i64 1
  store i8* %82, i8** %80, align 8
  store i8 %5, i8* %81, align 1
  %83 = load i8*, i8** %80, align 8
  %84 = bitcast i8* %83 to %struct.RARPPM_CONTEXT*
  %85 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 11
  %86 = load i8*, i8** %85, align 8
  %87 = icmp ult i8* %83, %86
  br i1 %87, label %88, label %316

88:                                               ; preds = %78
  %89 = icmp eq %struct.RARPPM_CONTEXT* %9, null
  br i1 %89, label %113, label %90

90:                                               ; preds = %88
  %91 = bitcast %struct.RARPPM_CONTEXT* %9 to i8*
  %92 = icmp ult i8* %83, %91
  br i1 %92, label %96, label %93

93:                                               ; preds = %90
  %94 = tail call %struct.RARPPM_CONTEXT* @_ZN8ModelPPM16CreateSuccessorsEbP12RARPPM_STATE(%class.ModelPPM* %0, i1 zeroext false, %struct.RARPPM_STATE* %67)
  %95 = icmp eq %struct.RARPPM_CONTEXT* %94, null
  br i1 %95, label %316, label %96

96:                                               ; preds = %90, %93
  %97 = phi %struct.RARPPM_CONTEXT* [ %94, %93 ], [ %9, %90 ]
  %98 = load i32, i32* %68, align 8
  %99 = add nsw i32 %98, -1
  store i32 %99, i32* %68, align 8
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %104, label %101

101:                                              ; preds = %96
  %102 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 4
  %103 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %102, align 8
  br label %119

104:                                              ; preds = %96
  %105 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 6
  %106 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %105, align 8
  %107 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 4
  %108 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %107, align 8
  %109 = icmp ne %struct.RARPPM_CONTEXT* %106, %108
  %110 = load i8*, i8** %80, align 8
  %111 = sext i1 %109 to i64
  %112 = getelementptr inbounds i8, i8* %110, i64 %111
  store i8* %112, i8** %80, align 8
  br label %119

113:                                              ; preds = %88
  %114 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %2, align 8
  %115 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %114, i64 0, i32 2
  %116 = bitcast %struct.RARPPM_CONTEXT** %115 to i8**
  store i8* %83, i8** %116, align 1
  %117 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 4
  %118 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %117, align 8
  br label %119

119:                                              ; preds = %101, %104, %113
  %120 = phi %struct.RARPPM_CONTEXT* [ %103, %101 ], [ %108, %104 ], [ %118, %113 ]
  %121 = phi %struct.RARPPM_CONTEXT* [ %97, %101 ], [ %97, %104 ], [ %118, %113 ]
  %122 = phi %struct.RARPPM_CONTEXT* [ %84, %101 ], [ %97, %104 ], [ %84, %113 ]
  %123 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 4
  %124 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %120, i64 0, i32 0
  %125 = load i16, i16* %124, align 1
  %126 = zext i16 %125 to i32
  %127 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 6
  %128 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %127, align 1
  %129 = icmp eq %struct.RARPPM_CONTEXT* %128, %120
  br i1 %129, label %315, label %130

130:                                              ; preds = %119
  %131 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %120, i64 0, i32 1, i32 0, i32 0
  %132 = load i16, i16* %131, align 1
  %133 = zext i16 %132 to i32
  %134 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 5
  %135 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 6
  %136 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 2, i64 0
  %137 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 9
  %138 = icmp ugt i16 %125, 3
  %139 = zext i1 %138 to i32
  %140 = shl nuw nsw i32 %10, 1
  %141 = sub nsw i32 1, %10
  %142 = add nsw i32 %141, %133
  %143 = sub nsw i32 %142, %126
  br label %144

144:                                              ; preds = %130, %299
  %145 = phi %struct.RARPPM_CONTEXT* [ %128, %130 ], [ %312, %299 ]
  %146 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %145, i64 0, i32 0
  %147 = load i16, i16* %146, align 1
  %148 = zext i16 %147 to i32
  %149 = icmp eq i16 %147, 1
  br i1 %149, label %224, label %150

150:                                              ; preds = %144
  %151 = and i32 %148, 1
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %208

153:                                              ; preds = %150
  %154 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %145, i64 0, i32 1, i32 0, i32 1
  %155 = bitcast %struct.RARPPM_STATE** %154 to i8**
  %156 = load i8*, i8** %155, align 1
  %157 = lshr i32 %148, 1
  %158 = add nsw i32 %157, -1
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 2, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = zext i32 %157 to i64
  %163 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 2, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = icmp eq i8 %161, %164
  br i1 %165, label %206, label %166

166:                                              ; preds = %153
  %167 = zext i8 %164 to i32
  %168 = zext i8 %164 to i64
  %169 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 7, i64 %168, i32 0
  %170 = load %"struct.SubAllocator::RAR_NODE"*, %"struct.SubAllocator::RAR_NODE"** %169, align 8
  %171 = icmp eq %"struct.SubAllocator::RAR_NODE"* %170, null
  br i1 %171, label %177, label %172

172:                                              ; preds = %166
  %173 = bitcast %"struct.SubAllocator::RAR_NODE"* %170 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"struct.SubAllocator::RAR_NODE"** %169 to i64*
  store i64 %174, i64* %175, align 8
  %176 = bitcast %"struct.SubAllocator::RAR_NODE"* %170 to i8*
  br label %192

177:                                              ; preds = %166
  %178 = load i8*, i8** %134, align 8
  %179 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 %168
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i64
  %182 = mul nuw nsw i64 %181, 20
  %183 = getelementptr inbounds i8, i8* %178, i64 %182
  store i8* %183, i8** %134, align 8
  %184 = load i8*, i8** %135, align 8
  %185 = icmp ugt i8* %183, %184
  br i1 %185, label %186, label %192

186:                                              ; preds = %177
  %187 = load i8, i8* %179, align 1
  %188 = zext i8 %187 to i64
  %189 = mul nsw i64 %188, -20
  %190 = getelementptr inbounds i8, i8* %183, i64 %189
  store i8* %190, i8** %134, align 8
  %191 = tail call i8* @_ZN12SubAllocator14AllocUnitsRareEi(%class.SubAllocator* %79, i32 %167) #11
  br label %192

192:                                              ; preds = %186, %177, %172
  %193 = phi i8* [ %176, %172 ], [ %191, %186 ], [ %178, %177 ]
  %194 = icmp eq i8* %193, null
  br i1 %194, label %195, label %197

195:                                              ; preds = %192
  %196 = bitcast %struct.RARPPM_STATE** %154 to i8**
  store i8* null, i8** %196, align 1
  br label %316

197:                                              ; preds = %192
  %198 = mul nuw nsw i32 %157, 20
  %199 = zext i32 %198 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %193, i8* align 1 %156, i64 %199, i1 false) #11
  %200 = zext i8 %161 to i64
  %201 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 7, i64 %200, i32 0
  %202 = bitcast %"struct.SubAllocator::RAR_NODE"** %201 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = bitcast i8* %156 to i64*
  store i64 %203, i64* %204, align 8
  %205 = bitcast %"struct.SubAllocator::RAR_NODE"** %201 to i8**
  store i8* %156, i8** %205, align 8
  store i8* %193, i8** %155, align 1
  br label %208

206:                                              ; preds = %153
  %207 = icmp eq i8* %156, null
  br i1 %207, label %316, label %208

208:                                              ; preds = %197, %206, %150
  %209 = shl nuw nsw i32 %148, 1
  %210 = icmp ult i32 %209, %126
  %211 = zext i1 %210 to i16
  %212 = shl nuw nsw i32 %148, 2
  %213 = icmp ule i32 %212, %126
  %214 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %145, i64 0, i32 1, i32 0, i32 0
  %215 = load i16, i16* %214, align 1
  %216 = zext i16 %215 to i32
  %217 = shl nuw nsw i32 %148, 3
  %218 = icmp uge i32 %217, %216
  %219 = and i1 %213, %218
  %220 = zext i1 %219 to i16
  %221 = shl nuw nsw i16 %220, 1
  %222 = or i16 %221, %211
  %223 = add i16 %222, %215
  store i16 %223, i16* %214, align 1
  br label %270

224:                                              ; preds = %144
  %225 = load i8, i8* %136, align 1
  %226 = zext i8 %225 to i32
  %227 = zext i8 %225 to i64
  %228 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 7, i64 %227, i32 0
  %229 = load %"struct.SubAllocator::RAR_NODE"*, %"struct.SubAllocator::RAR_NODE"** %228, align 8
  %230 = icmp eq %"struct.SubAllocator::RAR_NODE"* %229, null
  br i1 %230, label %236, label %231

231:                                              ; preds = %224
  %232 = bitcast %"struct.SubAllocator::RAR_NODE"* %229 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = bitcast %"struct.SubAllocator::RAR_NODE"** %228 to i64*
  store i64 %233, i64* %234, align 8
  %235 = bitcast %"struct.SubAllocator::RAR_NODE"* %229 to i8*
  br label %251

236:                                              ; preds = %224
  %237 = load i8*, i8** %134, align 8
  %238 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 1, i64 %227
  %239 = load i8, i8* %238, align 1
  %240 = zext i8 %239 to i64
  %241 = mul nuw nsw i64 %240, 20
  %242 = getelementptr inbounds i8, i8* %237, i64 %241
  store i8* %242, i8** %134, align 8
  %243 = load i8*, i8** %135, align 8
  %244 = icmp ugt i8* %242, %243
  br i1 %244, label %245, label %251

245:                                              ; preds = %236
  %246 = load i8, i8* %238, align 1
  %247 = zext i8 %246 to i64
  %248 = mul nsw i64 %247, -20
  %249 = getelementptr inbounds i8, i8* %242, i64 %248
  store i8* %249, i8** %134, align 8
  %250 = tail call i8* @_ZN12SubAllocator14AllocUnitsRareEi(%class.SubAllocator* %79, i32 %226) #11
  br label %251

251:                                              ; preds = %231, %236, %245
  %252 = phi i8* [ %235, %231 ], [ %250, %245 ], [ %237, %236 ]
  %253 = icmp eq i8* %252, null
  br i1 %253, label %316, label %254

254:                                              ; preds = %251
  %255 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %145, i64 0, i32 1
  %256 = bitcast %union.anon.7* %255 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %252, i8* align 1 %256, i64 10, i1 false)
  %257 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %145, i64 0, i32 1, i32 0, i32 1
  %258 = bitcast %struct.RARPPM_STATE** %257 to i8**
  store i8* %252, i8** %258, align 1
  %259 = getelementptr inbounds i8, i8* %252, i64 1
  %260 = load i8, i8* %259, align 1
  %261 = icmp ult i8 %260, 30
  %262 = shl i8 %260, 1
  %263 = select i1 %261, i8 %262, i8 120
  store i8 %263, i8* %259, align 1
  %264 = zext i8 %263 to i32
  %265 = load i32, i32* %137, align 4
  %266 = add i32 %265, %139
  %267 = add i32 %266, %264
  %268 = trunc i32 %267 to i16
  %269 = getelementptr inbounds %union.anon.7, %union.anon.7* %255, i64 0, i32 0, i32 0
  store i16 %268, i16* %269, align 1
  br label %270

270:                                              ; preds = %254, %208
  %271 = phi i16 [ %268, %254 ], [ %223, %208 ]
  %272 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %145, i64 0, i32 1, i32 0, i32 0
  %273 = zext i16 %271 to i32
  %274 = add nuw nsw i32 %273, 6
  %275 = mul nuw nsw i32 %274, %140
  %276 = add nsw i32 %143, %273
  %277 = mul nsw i32 %276, 6
  %278 = icmp ult i32 %275, %277
  br i1 %278, label %279, label %286

279:                                              ; preds = %270
  %280 = icmp ugt i32 %275, %276
  %281 = select i1 %280, i32 2, i32 1
  %282 = shl nsw i32 %276, 2
  %283 = icmp uge i32 %275, %282
  %284 = zext i1 %283 to i32
  %285 = add nuw nsw i32 %281, %284
  br label %299

286:                                              ; preds = %270
  %287 = mul nsw i32 %276, 9
  %288 = icmp ult i32 %275, %287
  %289 = select i1 %288, i32 4, i32 5
  %290 = mul nsw i32 %276, 12
  %291 = icmp uge i32 %275, %290
  %292 = zext i1 %291 to i32
  %293 = add nuw nsw i32 %289, %292
  %294 = mul nsw i32 %276, 15
  %295 = icmp uge i32 %275, %294
  %296 = zext i1 %295 to i32
  %297 = add nuw nsw i32 %293, %296
  %298 = trunc i32 %297 to i16
  br label %299

299:                                              ; preds = %286, %279
  %300 = phi i16 [ %298, %286 ], [ 3, %279 ]
  %301 = phi i32 [ %297, %286 ], [ %285, %279 ]
  %302 = add i16 %300, %271
  store i16 %302, i16* %272, align 1
  %303 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %145, i64 0, i32 1, i32 0, i32 1
  %304 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %303, align 1
  %305 = zext i16 %147 to i64
  %306 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %304, i64 %305, i32 2
  store %struct.RARPPM_CONTEXT* %122, %struct.RARPPM_CONTEXT** %306, align 1
  %307 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %304, i64 %305, i32 0
  store i8 %5, i8* %307, align 1
  %308 = trunc i32 %301 to i8
  %309 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %304, i64 %305, i32 1
  store i8 %308, i8* %309, align 1
  %310 = add i16 %147, 1
  store i16 %310, i16* %146, align 1
  %311 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %145, i64 0, i32 2
  %312 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %311, align 1
  %313 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %123, align 8
  %314 = icmp eq %struct.RARPPM_CONTEXT* %312, %313
  br i1 %314, label %315, label %144

315:                                              ; preds = %299, %119
  store %struct.RARPPM_CONTEXT* %121, %struct.RARPPM_CONTEXT** %123, align 8
  store %struct.RARPPM_CONTEXT* %121, %struct.RARPPM_CONTEXT** %127, align 8
  br label %318

316:                                              ; preds = %206, %251, %195, %78, %71, %93
  tail call void @_ZN8ModelPPM16RestartModelRareEv(%class.ModelPPM* %0)
  %317 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 18
  store i8 0, i8* %317, align 8
  br label %318

318:                                              ; preds = %71, %316, %315
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z18UnpackDecodeThreadPv(i8* nocapture readonly) #0 {
  %2 = getelementptr inbounds i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast i8* %0 to %struct.UnpackThreadData**
  br label %9

8:                                                ; preds = %9, %1
  ret void

9:                                                ; preds = %6, %9
  %10 = phi i64 [ 0, %6 ], [ %15, %9 ]
  %11 = load %struct.UnpackThreadData*, %struct.UnpackThreadData** %7, align 8
  %12 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %11, i64 0, i32 0
  %13 = load %class.Unpack*, %class.Unpack** %12, align 8
  %14 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %11, i64 %10
  tail call void @_ZN6Unpack12UnpackDecodeER16UnpackThreadData(%class.Unpack* %13, %struct.UnpackThreadData* dereferenceable(19192) %14)
  %15 = add nuw nsw i64 %10, 1
  %16 = load i32, i32* %3, align 8
  %17 = zext i32 %16 to i64
  %18 = icmp ult i64 %15, %17
  br i1 %18, label %9, label %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack12UnpackDecodeER16UnpackThreadData(%class.Unpack* nocapture, %struct.UnpackThreadData* dereferenceable(19192)) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.UnpackFilter, align 4
  %4 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 5
  %5 = load i8, i8* %4, align 8, !range !5
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %14

7:                                                ; preds = %2
  store i8 1, i8* %4, align 8
  %8 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 1
  %9 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 4
  %10 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7
  %11 = tail call zeroext i1 @_ZN6Unpack10ReadTablesER8BitInputR17UnpackBlockHeaderR17UnpackBlockTables(%class.Unpack* %0, %class.BitInput* dereferenceable(24) %8, %struct.UnpackBlockHeader* dereferenceable(20) %9, %struct.UnpackBlockTables* dereferenceable(19100) %10)
  br i1 %11, label %14, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 9
  store i8 1, i8* %13, align 4
  br label %675

14:                                               ; preds = %2, %7
  %15 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 1
  %16 = getelementptr inbounds %class.BitInput, %class.BitInput* %15, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 4, i32 3
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 4, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, %19
  %23 = icmp sgt i32 %17, %22
  br i1 %23, label %24, label %26

24:                                               ; preds = %14
  %25 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 9
  store i8 1, i8* %25, align 4
  br label %675

26:                                               ; preds = %14
  %27 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 14
  store i32 0, i32* %27, align 8
  %28 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 4, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = add nsw i32 %29, %21
  %31 = add nsw i32 %30, -1
  %32 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 8
  %33 = load i32, i32* %32, align 8
  %34 = add nsw i32 %33, -16
  %35 = icmp slt i32 %31, %34
  %36 = select i1 %35, i32 %31, i32 %34
  %37 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 1, i32 1
  %38 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 4, i32 1
  %39 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 11
  %40 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 15
  %41 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 13
  %42 = bitcast %struct.UnpackDecodedItem** %41 to i8**
  %43 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 1, i32 3
  %44 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 3
  %45 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 0
  %46 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %3, i64 0, i32 0
  %47 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %3, i64 0, i32 1
  %48 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %3, i64 0, i32 3
  %49 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %3, i64 0, i32 2
  %50 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 3
  %51 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 0
  %52 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 3
  %53 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 0
  %54 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 3
  %55 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 0
  br label %56

56:                                               ; preds = %673, %26
  %57 = phi i32 [ %674, %673 ], [ %17, %26 ]
  %58 = icmp slt i32 %57, %36
  br i1 %58, label %77, label %59

59:                                               ; preds = %56
  %60 = icmp slt i32 %57, %30
  br i1 %60, label %61, label %675

61:                                               ; preds = %59
  %62 = icmp eq i32 %57, %31
  br i1 %62, label %63, label %67

63:                                               ; preds = %61
  %64 = load i32, i32* %37, align 4
  %65 = load i32, i32* %38, align 4
  %66 = icmp slt i32 %64, %65
  br i1 %66, label %67, label %675

67:                                               ; preds = %63, %61
  %68 = icmp slt i32 %57, %34
  br i1 %68, label %72, label %69

69:                                               ; preds = %67
  %70 = load i8, i8* %39, align 2, !range !5
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %75, label %72

72:                                               ; preds = %69, %67
  %73 = load i32, i32* %32, align 8
  %74 = icmp slt i32 %57, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %69, %72
  %76 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 12
  store i8 1, i8* %76, align 1
  br label %675

77:                                               ; preds = %72, %56
  %78 = load i32, i32* %27, align 8
  %79 = load i32, i32* %40, align 4
  %80 = add i32 %79, -8
  %81 = icmp ugt i32 %78, %80
  br i1 %81, label %84, label %82

82:                                               ; preds = %77
  %83 = load %struct.UnpackDecodedItem*, %struct.UnpackDecodedItem** %41, align 8
  br label %96

84:                                               ; preds = %77
  %85 = shl i32 %79, 1
  store i32 %85, i32* %40, align 4
  %86 = load i8*, i8** %42, align 8
  %87 = zext i32 %85 to i64
  %88 = mul nuw nsw i64 %87, 12
  %89 = tail call i8* @realloc(i8* %86, i64 %88) #11
  %90 = icmp eq i8* %89, null
  br i1 %90, label %91, label %92

91:                                               ; preds = %84
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  br label %92

92:                                               ; preds = %91, %84
  store i8* %89, i8** %42, align 8
  %93 = bitcast i8* %89 to %struct.UnpackDecodedItem*
  %94 = load i32, i32* %27, align 8
  %95 = load i32, i32* %16, align 8
  br label %96

96:                                               ; preds = %82, %92
  %97 = phi i32 [ %57, %82 ], [ %95, %92 ]
  %98 = phi i32 [ %78, %82 ], [ %94, %92 ]
  %99 = phi %struct.UnpackDecodedItem* [ %83, %82 ], [ %93, %92 ]
  %100 = add i32 %98, 1
  store i32 %100, i32* %27, align 8
  %101 = zext i32 %98 to i64
  %102 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %99, i64 %101
  %103 = load i8*, i8** %43, align 8
  %104 = sext i32 %97 to i64
  %105 = getelementptr inbounds i8, i8* %103, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = shl nuw nsw i32 %107, 16
  %109 = add nsw i32 %97, 1
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %103, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = shl nuw nsw i32 %113, 8
  %115 = or i32 %114, %108
  %116 = add nsw i32 %97, 2
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %103, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = or i32 %115, %120
  %122 = load i32, i32* %37, align 4
  %123 = sub nsw i32 8, %122
  %124 = lshr i32 %121, %123
  %125 = and i32 %124, 65534
  %126 = load i32, i32* %44, align 4
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 1, i64 %127
  %129 = load i32, i32* %128, align 4
  %130 = icmp ult i32 %125, %129
  br i1 %130, label %131, label %143

131:                                              ; preds = %96
  %132 = sub i32 16, %126
  %133 = lshr i32 %125, %132
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 4, i64 %134
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = add i32 %122, %137
  %139 = lshr i32 %138, 3
  %140 = add i32 %139, %97
  store i32 %140, i32* %16, align 8
  %141 = and i32 %138, 7
  store i32 %141, i32* %37, align 4
  %142 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 5, i64 %134
  br label %174

143:                                              ; preds = %96, %147
  %144 = phi i32 [ %145, %147 ], [ %126, %96 ]
  %145 = add i32 %144, 1
  %146 = icmp ult i32 %145, 15
  br i1 %146, label %147, label %152

147:                                              ; preds = %143
  %148 = zext i32 %145 to i64
  %149 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 1, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = icmp ult i32 %125, %150
  br i1 %151, label %152, label %143

152:                                              ; preds = %143, %147
  %153 = phi i32 [ %145, %147 ], [ 15, %143 ]
  %154 = add i32 %153, %122
  %155 = lshr i32 %154, 3
  %156 = add i32 %155, %97
  store i32 %156, i32* %16, align 8
  %157 = and i32 %154, 7
  store i32 %157, i32* %37, align 4
  %158 = add nsw i32 %153, -1
  %159 = zext i32 %158 to i64
  %160 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 1, i64 %159
  %161 = load i32, i32* %160, align 4
  %162 = sub i32 %125, %161
  %163 = sub nuw nsw i32 16, %153
  %164 = lshr i32 %162, %163
  %165 = zext i32 %153 to i64
  %166 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 2, i64 %165
  %167 = load i32, i32* %166, align 4
  %168 = add i32 %164, %167
  %169 = load i32, i32* %45, align 4
  %170 = icmp ult i32 %168, %169
  %171 = select i1 %170, i32 %168, i32 0
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 6, i64 %172
  br label %174

174:                                              ; preds = %131, %152
  %175 = phi i32 [ %141, %131 ], [ %157, %152 ]
  %176 = phi i32 [ %140, %131 ], [ %156, %152 ]
  %177 = phi i16* [ %142, %131 ], [ %173, %152 ]
  %178 = load i16, i16* %177, align 2
  %179 = zext i16 %178 to i32
  %180 = icmp ult i16 %178, 256
  br i1 %180, label %181, label %207

181:                                              ; preds = %174
  %182 = icmp ugt i32 %100, 1
  br i1 %182, label %183, label %201

183:                                              ; preds = %181
  %184 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %102, i64 -1
  %185 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %184, i64 0, i32 0
  %186 = load i32, i32* %185, align 4
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %201

188:                                              ; preds = %183
  %189 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %184, i64 0, i32 1
  %190 = load i16, i16* %189, align 4
  %191 = icmp ult i16 %190, 3
  br i1 %191, label %192, label %201

192:                                              ; preds = %188
  %193 = add nuw nsw i16 %190, 1
  store i16 %193, i16* %189, align 4
  %194 = trunc i16 %178 to i8
  %195 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %184, i64 0, i32 2
  %196 = bitcast %union.anon.4* %195 to [4 x i8]*
  %197 = zext i16 %193 to i64
  %198 = getelementptr inbounds [4 x i8], [4 x i8]* %196, i64 0, i64 %197
  store i8 %194, i8* %198, align 1
  %199 = load i32, i32* %27, align 8
  %200 = add i32 %199, -1
  store i32 %200, i32* %27, align 8
  br label %673

201:                                              ; preds = %188, %183, %181
  %202 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %102, i64 0, i32 0
  store i32 0, i32* %202, align 4
  %203 = trunc i16 %178 to i8
  %204 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %99, i64 %101, i32 2
  %205 = bitcast %union.anon.4* %204 to i8*
  store i8 %203, i8* %205, align 4
  %206 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %99, i64 %101, i32 1
  store i16 0, i16* %206, align 4
  br label %673

207:                                              ; preds = %174
  %208 = icmp ugt i16 %178, 261
  br i1 %208, label %209, label %526

209:                                              ; preds = %207
  %210 = add nsw i32 %179, -262
  %211 = icmp ult i32 %210, 8
  br i1 %211, label %212, label %214

212:                                              ; preds = %209
  %213 = add nsw i32 %179, -260
  br label %251

214:                                              ; preds = %209
  %215 = lshr i32 %210, 2
  %216 = add nsw i32 %215, -1
  %217 = and i32 %210, 3
  %218 = or i32 %217, 4
  %219 = shl i32 %218, %216
  %220 = add i32 %219, 2
  %221 = icmp eq i32 %216, 0
  br i1 %221, label %251, label %222

222:                                              ; preds = %214
  %223 = sext i32 %176 to i64
  %224 = getelementptr inbounds i8, i8* %103, i64 %223
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  %227 = shl nuw nsw i32 %226, 16
  %228 = add nsw i32 %176, 1
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds i8, i8* %103, i64 %229
  %231 = load i8, i8* %230, align 1
  %232 = zext i8 %231 to i32
  %233 = shl nuw nsw i32 %232, 8
  %234 = or i32 %233, %227
  %235 = add nsw i32 %176, 2
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds i8, i8* %103, i64 %236
  %238 = load i8, i8* %237, align 1
  %239 = zext i8 %238 to i32
  %240 = or i32 %234, %239
  %241 = sub nuw nsw i32 8, %175
  %242 = lshr i32 %240, %241
  %243 = and i32 %242, 65535
  %244 = sub nsw i32 17, %215
  %245 = lshr i32 %243, %244
  %246 = add i32 %245, %220
  %247 = add nsw i32 %175, %216
  %248 = lshr i32 %247, 3
  %249 = add i32 %248, %176
  store i32 %249, i32* %16, align 8
  %250 = and i32 %247, 7
  store i32 %250, i32* %37, align 4
  br label %251

251:                                              ; preds = %212, %214, %222
  %252 = phi i32 [ %250, %222 ], [ %175, %214 ], [ %175, %212 ]
  %253 = phi i32 [ %249, %222 ], [ %176, %214 ], [ %176, %212 ]
  %254 = phi i32 [ %246, %222 ], [ %220, %214 ], [ %213, %212 ]
  %255 = sext i32 %253 to i64
  %256 = getelementptr inbounds i8, i8* %103, i64 %255
  %257 = load i8, i8* %256, align 1
  %258 = zext i8 %257 to i32
  %259 = shl nuw nsw i32 %258, 16
  %260 = add nsw i32 %253, 1
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds i8, i8* %103, i64 %261
  %263 = load i8, i8* %262, align 1
  %264 = zext i8 %263 to i32
  %265 = shl nuw nsw i32 %264, 8
  %266 = or i32 %265, %259
  %267 = add nsw i32 %253, 2
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds i8, i8* %103, i64 %268
  %270 = load i8, i8* %269, align 1
  %271 = zext i8 %270 to i32
  %272 = or i32 %266, %271
  %273 = sub nuw nsw i32 8, %252
  %274 = lshr i32 %272, %273
  %275 = and i32 %274, 65534
  %276 = load i32, i32* %52, align 4
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 1, i64 %277
  %279 = load i32, i32* %278, align 4
  %280 = icmp ult i32 %275, %279
  br i1 %280, label %281, label %293

281:                                              ; preds = %251
  %282 = sub i32 16, %276
  %283 = lshr i32 %275, %282
  %284 = zext i32 %283 to i64
  %285 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 4, i64 %284
  %286 = load i8, i8* %285, align 1
  %287 = zext i8 %286 to i32
  %288 = add nuw nsw i32 %252, %287
  %289 = lshr i32 %288, 3
  %290 = add i32 %289, %253
  store i32 %290, i32* %16, align 8
  %291 = and i32 %288, 7
  store i32 %291, i32* %37, align 4
  %292 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 5, i64 %284
  br label %324

293:                                              ; preds = %251, %297
  %294 = phi i32 [ %295, %297 ], [ %276, %251 ]
  %295 = add i32 %294, 1
  %296 = icmp ult i32 %295, 15
  br i1 %296, label %297, label %302

297:                                              ; preds = %293
  %298 = zext i32 %295 to i64
  %299 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 1, i64 %298
  %300 = load i32, i32* %299, align 4
  %301 = icmp ult i32 %275, %300
  br i1 %301, label %302, label %293

302:                                              ; preds = %293, %297
  %303 = phi i32 [ %295, %297 ], [ 15, %293 ]
  %304 = add i32 %303, %252
  %305 = lshr i32 %304, 3
  %306 = add i32 %305, %253
  store i32 %306, i32* %16, align 8
  %307 = and i32 %304, 7
  store i32 %307, i32* %37, align 4
  %308 = add nsw i32 %303, -1
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 1, i64 %309
  %311 = load i32, i32* %310, align 4
  %312 = sub i32 %275, %311
  %313 = sub nuw nsw i32 16, %303
  %314 = lshr i32 %312, %313
  %315 = zext i32 %303 to i64
  %316 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 2, i64 %315
  %317 = load i32, i32* %316, align 4
  %318 = add i32 %314, %317
  %319 = load i32, i32* %53, align 4
  %320 = icmp ult i32 %318, %319
  %321 = select i1 %320, i32 %318, i32 0
  %322 = zext i32 %321 to i64
  %323 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 6, i64 %322
  br label %324

324:                                              ; preds = %281, %302
  %325 = phi i32 [ %291, %281 ], [ %307, %302 ]
  %326 = phi i32 [ %290, %281 ], [ %306, %302 ]
  %327 = phi i16* [ %292, %281 ], [ %323, %302 ]
  %328 = load i16, i16* %327, align 2
  %329 = zext i16 %328 to i32
  %330 = icmp ult i16 %328, 4
  br i1 %330, label %331, label %333

331:                                              ; preds = %324
  %332 = add nuw nsw i32 %329, 1
  br label %519

333:                                              ; preds = %324
  %334 = lshr i32 %329, 1
  %335 = add nsw i32 %334, -1
  %336 = and i32 %329, 1
  %337 = or i32 %336, 2
  %338 = shl i32 %337, %335
  %339 = add i32 %338, 1
  %340 = icmp eq i32 %335, 0
  br i1 %340, label %509, label %341

341:                                              ; preds = %333
  %342 = icmp ugt i32 %335, 3
  br i1 %342, label %343, label %467

343:                                              ; preds = %341
  %344 = icmp eq i32 %335, 4
  br i1 %344, label %389, label %345

345:                                              ; preds = %343
  %346 = sext i32 %326 to i64
  %347 = getelementptr inbounds i8, i8* %103, i64 %346
  %348 = load i8, i8* %347, align 1
  %349 = zext i8 %348 to i32
  %350 = shl nuw i32 %349, 24
  %351 = add nsw i32 %326, 1
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds i8, i8* %103, i64 %352
  %354 = load i8, i8* %353, align 1
  %355 = zext i8 %354 to i32
  %356 = shl nuw nsw i32 %355, 16
  %357 = or i32 %356, %350
  %358 = add nsw i32 %326, 2
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds i8, i8* %103, i64 %359
  %361 = load i8, i8* %360, align 1
  %362 = zext i8 %361 to i32
  %363 = shl nuw nsw i32 %362, 8
  %364 = or i32 %357, %363
  %365 = add nsw i32 %326, 3
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds i8, i8* %103, i64 %366
  %368 = load i8, i8* %367, align 1
  %369 = zext i8 %368 to i32
  %370 = or i32 %364, %369
  %371 = shl i32 %370, %325
  %372 = add nsw i32 %326, 4
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds i8, i8* %103, i64 %373
  %375 = load i8, i8* %374, align 1
  %376 = zext i8 %375 to i32
  %377 = sub nuw nsw i32 8, %325
  %378 = lshr i32 %376, %377
  %379 = or i32 %371, %378
  %380 = sub nsw i32 37, %334
  %381 = lshr i32 %379, %380
  %382 = shl i32 %381, 4
  %383 = add i32 %382, %339
  %384 = add nsw i32 %334, -5
  %385 = add nsw i32 %384, %325
  %386 = lshr i32 %385, 3
  %387 = add i32 %386, %326
  store i32 %387, i32* %16, align 8
  %388 = and i32 %385, 7
  store i32 %388, i32* %37, align 4
  br label %389

389:                                              ; preds = %343, %345
  %390 = phi i32 [ %388, %345 ], [ %325, %343 ]
  %391 = phi i32 [ %387, %345 ], [ %326, %343 ]
  %392 = phi i32 [ %383, %345 ], [ %339, %343 ]
  %393 = sext i32 %391 to i64
  %394 = getelementptr inbounds i8, i8* %103, i64 %393
  %395 = load i8, i8* %394, align 1
  %396 = zext i8 %395 to i32
  %397 = shl nuw nsw i32 %396, 16
  %398 = add nsw i32 %391, 1
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds i8, i8* %103, i64 %399
  %401 = load i8, i8* %400, align 1
  %402 = zext i8 %401 to i32
  %403 = shl nuw nsw i32 %402, 8
  %404 = or i32 %403, %397
  %405 = add nsw i32 %391, 2
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds i8, i8* %103, i64 %406
  %408 = load i8, i8* %407, align 1
  %409 = zext i8 %408 to i32
  %410 = or i32 %404, %409
  %411 = sub nuw nsw i32 8, %390
  %412 = lshr i32 %410, %411
  %413 = and i32 %412, 65534
  %414 = load i32, i32* %54, align 4
  %415 = zext i32 %414 to i64
  %416 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 1, i64 %415
  %417 = load i32, i32* %416, align 4
  %418 = icmp ult i32 %413, %417
  br i1 %418, label %419, label %431

419:                                              ; preds = %389
  %420 = sub i32 16, %414
  %421 = lshr i32 %413, %420
  %422 = zext i32 %421 to i64
  %423 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 4, i64 %422
  %424 = load i8, i8* %423, align 1
  %425 = zext i8 %424 to i32
  %426 = add nuw nsw i32 %390, %425
  %427 = lshr i32 %426, 3
  %428 = add i32 %427, %391
  store i32 %428, i32* %16, align 8
  %429 = and i32 %426, 7
  store i32 %429, i32* %37, align 4
  %430 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 5, i64 %422
  br label %462

431:                                              ; preds = %389, %435
  %432 = phi i32 [ %433, %435 ], [ %414, %389 ]
  %433 = add i32 %432, 1
  %434 = icmp ult i32 %433, 15
  br i1 %434, label %435, label %440

435:                                              ; preds = %431
  %436 = zext i32 %433 to i64
  %437 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 1, i64 %436
  %438 = load i32, i32* %437, align 4
  %439 = icmp ult i32 %413, %438
  br i1 %439, label %440, label %431

440:                                              ; preds = %431, %435
  %441 = phi i32 [ %433, %435 ], [ 15, %431 ]
  %442 = add i32 %441, %390
  %443 = lshr i32 %442, 3
  %444 = add i32 %443, %391
  store i32 %444, i32* %16, align 8
  %445 = and i32 %442, 7
  store i32 %445, i32* %37, align 4
  %446 = add nsw i32 %441, -1
  %447 = zext i32 %446 to i64
  %448 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 1, i64 %447
  %449 = load i32, i32* %448, align 4
  %450 = sub i32 %413, %449
  %451 = sub nuw nsw i32 16, %441
  %452 = lshr i32 %450, %451
  %453 = zext i32 %441 to i64
  %454 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 2, i64 %453
  %455 = load i32, i32* %454, align 4
  %456 = add i32 %452, %455
  %457 = load i32, i32* %55, align 4
  %458 = icmp ult i32 %456, %457
  %459 = select i1 %458, i32 %456, i32 0
  %460 = zext i32 %459 to i64
  %461 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 6, i64 %460
  br label %462

462:                                              ; preds = %419, %440
  %463 = phi i16* [ %430, %419 ], [ %461, %440 ]
  %464 = load i16, i16* %463, align 2
  %465 = zext i16 %464 to i32
  %466 = add i32 %392, %465
  br label %509

467:                                              ; preds = %341
  %468 = sext i32 %326 to i64
  %469 = getelementptr inbounds i8, i8* %103, i64 %468
  %470 = load i8, i8* %469, align 1
  %471 = zext i8 %470 to i32
  %472 = shl nuw i32 %471, 24
  %473 = add nsw i32 %326, 1
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds i8, i8* %103, i64 %474
  %476 = load i8, i8* %475, align 1
  %477 = zext i8 %476 to i32
  %478 = shl nuw nsw i32 %477, 16
  %479 = or i32 %478, %472
  %480 = add nsw i32 %326, 2
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds i8, i8* %103, i64 %481
  %483 = load i8, i8* %482, align 1
  %484 = zext i8 %483 to i32
  %485 = shl nuw nsw i32 %484, 8
  %486 = or i32 %479, %485
  %487 = add nsw i32 %326, 3
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds i8, i8* %103, i64 %488
  %490 = load i8, i8* %489, align 1
  %491 = zext i8 %490 to i32
  %492 = or i32 %486, %491
  %493 = shl i32 %492, %325
  %494 = add nsw i32 %326, 4
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds i8, i8* %103, i64 %495
  %497 = load i8, i8* %496, align 1
  %498 = zext i8 %497 to i32
  %499 = sub nuw nsw i32 8, %325
  %500 = lshr i32 %498, %499
  %501 = or i32 %493, %500
  %502 = sub nuw nsw i32 33, %334
  %503 = lshr i32 %501, %502
  %504 = add i32 %503, %339
  %505 = add nuw nsw i32 %325, %335
  %506 = lshr i32 %505, 3
  %507 = add i32 %506, %326
  store i32 %507, i32* %16, align 8
  %508 = and i32 %505, 7
  store i32 %508, i32* %37, align 4
  br label %509

509:                                              ; preds = %333, %462, %467
  %510 = phi i32 [ %466, %462 ], [ %504, %467 ], [ %339, %333 ]
  %511 = icmp ugt i32 %510, 256
  br i1 %511, label %512, label %519

512:                                              ; preds = %509
  %513 = add i32 %254, 1
  %514 = icmp ugt i32 %510, 8192
  br i1 %514, label %515, label %519

515:                                              ; preds = %512
  %516 = icmp ugt i32 %510, 262144
  %517 = select i1 %516, i32 3, i32 2
  %518 = add i32 %517, %254
  br label %519

519:                                              ; preds = %331, %515, %512, %509
  %520 = phi i32 [ %510, %512 ], [ %510, %509 ], [ %510, %515 ], [ %332, %331 ]
  %521 = phi i32 [ %513, %512 ], [ %254, %509 ], [ %518, %515 ], [ %254, %331 ]
  %522 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %102, i64 0, i32 0
  store i32 1, i32* %522, align 4
  %523 = trunc i32 %521 to i16
  %524 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %99, i64 %101, i32 1
  store i16 %523, i16* %524, align 4
  %525 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %99, i64 %101, i32 2, i32 0
  store i32 %520, i32* %525, align 4
  br label %673

526:                                              ; preds = %207
  switch i16 %178, label %547 [
    i16 256, label %527
    i16 257, label %545
  ]

527:                                              ; preds = %526
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %46, i8 -86, i64 16, i1 false)
  %528 = call zeroext i1 @_ZN6Unpack10ReadFilterER8BitInputR12UnpackFilter(%class.Unpack* %0, %class.BitInput* dereferenceable(24) %15, %struct.UnpackFilter* nonnull dereferenceable(16) %3)
  %529 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %102, i64 0, i32 0
  store i32 4, i32* %529, align 4
  %530 = load i8, i8* %46, align 4
  %531 = zext i8 %530 to i16
  %532 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %99, i64 %101, i32 1
  store i16 %531, i16* %532, align 4
  %533 = load i32, i32* %47, align 4
  %534 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %99, i64 %101, i32 2, i32 0
  store i32 %533, i32* %534, align 4
  %535 = load %struct.UnpackDecodedItem*, %struct.UnpackDecodedItem** %41, align 8
  %536 = load i32, i32* %27, align 8
  %537 = add i32 %536, 1
  store i32 %537, i32* %27, align 8
  %538 = zext i32 %536 to i64
  %539 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %535, i64 %538, i32 0
  store i32 4, i32* %539, align 4
  %540 = load i8, i8* %48, align 4
  %541 = zext i8 %540 to i16
  %542 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %535, i64 %538, i32 1
  store i16 %541, i16* %542, align 4
  %543 = load i32, i32* %49, align 4
  %544 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %535, i64 %538, i32 2, i32 0
  store i32 %543, i32* %544, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #11
  br label %673

545:                                              ; preds = %526
  %546 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %102, i64 0, i32 0
  store i32 2, i32* %546, align 4
  br label %673

547:                                              ; preds = %526
  %548 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %102, i64 0, i32 0
  store i32 3, i32* %548, align 4
  %549 = add nsw i32 %179, -258
  %550 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %99, i64 %101, i32 2, i32 0
  store i32 %549, i32* %550, align 4
  %551 = load i8*, i8** %43, align 8
  %552 = load i32, i32* %16, align 8
  %553 = sext i32 %552 to i64
  %554 = getelementptr inbounds i8, i8* %551, i64 %553
  %555 = load i8, i8* %554, align 1
  %556 = zext i8 %555 to i32
  %557 = shl nuw nsw i32 %556, 16
  %558 = add nsw i32 %552, 1
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds i8, i8* %551, i64 %559
  %561 = load i8, i8* %560, align 1
  %562 = zext i8 %561 to i32
  %563 = shl nuw nsw i32 %562, 8
  %564 = or i32 %563, %557
  %565 = add nsw i32 %552, 2
  %566 = sext i32 %565 to i64
  %567 = getelementptr inbounds i8, i8* %551, i64 %566
  %568 = load i8, i8* %567, align 1
  %569 = zext i8 %568 to i32
  %570 = or i32 %564, %569
  %571 = load i32, i32* %37, align 4
  %572 = sub nsw i32 8, %571
  %573 = lshr i32 %570, %572
  %574 = and i32 %573, 65534
  %575 = load i32, i32* %50, align 4
  %576 = zext i32 %575 to i64
  %577 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 1, i64 %576
  %578 = load i32, i32* %577, align 4
  %579 = icmp ult i32 %574, %578
  br i1 %579, label %580, label %592

580:                                              ; preds = %547
  %581 = sub i32 16, %575
  %582 = lshr i32 %574, %581
  %583 = zext i32 %582 to i64
  %584 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 4, i64 %583
  %585 = load i8, i8* %584, align 1
  %586 = zext i8 %585 to i32
  %587 = add i32 %571, %586
  %588 = lshr i32 %587, 3
  %589 = add i32 %588, %552
  store i32 %589, i32* %16, align 8
  %590 = and i32 %587, 7
  store i32 %590, i32* %37, align 4
  %591 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 5, i64 %583
  br label %623

592:                                              ; preds = %547, %596
  %593 = phi i32 [ %594, %596 ], [ %575, %547 ]
  %594 = add i32 %593, 1
  %595 = icmp ult i32 %594, 15
  br i1 %595, label %596, label %601

596:                                              ; preds = %592
  %597 = zext i32 %594 to i64
  %598 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 1, i64 %597
  %599 = load i32, i32* %598, align 4
  %600 = icmp ult i32 %574, %599
  br i1 %600, label %601, label %592

601:                                              ; preds = %592, %596
  %602 = phi i32 [ %594, %596 ], [ 15, %592 ]
  %603 = add i32 %602, %571
  %604 = lshr i32 %603, 3
  %605 = add i32 %604, %552
  store i32 %605, i32* %16, align 8
  %606 = and i32 %603, 7
  store i32 %606, i32* %37, align 4
  %607 = add nsw i32 %602, -1
  %608 = zext i32 %607 to i64
  %609 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 1, i64 %608
  %610 = load i32, i32* %609, align 4
  %611 = sub i32 %574, %610
  %612 = sub nuw nsw i32 16, %602
  %613 = lshr i32 %611, %612
  %614 = zext i32 %602 to i64
  %615 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 2, i64 %614
  %616 = load i32, i32* %615, align 4
  %617 = add i32 %613, %616
  %618 = load i32, i32* %51, align 4
  %619 = icmp ult i32 %617, %618
  %620 = select i1 %619, i32 %617, i32 0
  %621 = zext i32 %620 to i64
  %622 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 6, i64 %621
  br label %623

623:                                              ; preds = %580, %601
  %624 = phi i32 [ %590, %580 ], [ %606, %601 ]
  %625 = phi i32 [ %589, %580 ], [ %605, %601 ]
  %626 = phi i16* [ %591, %580 ], [ %622, %601 ]
  %627 = load i16, i16* %626, align 2
  %628 = zext i16 %627 to i32
  %629 = icmp ult i16 %627, 8
  br i1 %629, label %630, label %632

630:                                              ; preds = %623
  %631 = add nuw nsw i32 %628, 2
  br label %669

632:                                              ; preds = %623
  %633 = lshr i32 %628, 2
  %634 = add nsw i32 %633, -1
  %635 = and i32 %628, 3
  %636 = or i32 %635, 4
  %637 = shl i32 %636, %634
  %638 = add i32 %637, 2
  %639 = icmp eq i32 %634, 0
  br i1 %639, label %669, label %640

640:                                              ; preds = %632
  %641 = sext i32 %625 to i64
  %642 = getelementptr inbounds i8, i8* %551, i64 %641
  %643 = load i8, i8* %642, align 1
  %644 = zext i8 %643 to i32
  %645 = shl nuw nsw i32 %644, 16
  %646 = add nsw i32 %625, 1
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds i8, i8* %551, i64 %647
  %649 = load i8, i8* %648, align 1
  %650 = zext i8 %649 to i32
  %651 = shl nuw nsw i32 %650, 8
  %652 = or i32 %651, %645
  %653 = add nsw i32 %625, 2
  %654 = sext i32 %653 to i64
  %655 = getelementptr inbounds i8, i8* %551, i64 %654
  %656 = load i8, i8* %655, align 1
  %657 = zext i8 %656 to i32
  %658 = or i32 %652, %657
  %659 = sub nuw nsw i32 8, %624
  %660 = lshr i32 %658, %659
  %661 = and i32 %660, 65535
  %662 = sub nsw i32 17, %633
  %663 = lshr i32 %661, %662
  %664 = add i32 %663, %638
  %665 = add nsw i32 %624, %634
  %666 = lshr i32 %665, 3
  %667 = add i32 %666, %625
  store i32 %667, i32* %16, align 8
  %668 = and i32 %665, 7
  store i32 %668, i32* %37, align 4
  br label %669

669:                                              ; preds = %630, %632, %640
  %670 = phi i32 [ %664, %640 ], [ %638, %632 ], [ %631, %630 ]
  %671 = trunc i32 %670 to i16
  %672 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %99, i64 %101, i32 1
  store i16 %671, i16* %672, align 4
  br label %673

673:                                              ; preds = %192, %669, %545, %527, %519, %201
  %674 = load i32, i32* %16, align 8
  br label %56

675:                                              ; preds = %59, %63, %75, %24, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack6InitMTEv(%class.Unpack* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 5
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = tail call i8* @_Znam(i64 4195328) #12
  store i8* %6, i8** %2, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %6, i8 0, i64 4195328, i1 false)
  br label %7

7:                                                ; preds = %5, %1
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 3
  %9 = load %struct.UnpackThreadData*, %struct.UnpackThreadData** %8, align 8
  %10 = icmp eq %struct.UnpackThreadData* %9, null
  br i1 %10, label %11, label %52

11:                                               ; preds = %7
  %12 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = shl i32 %13, 1
  %15 = zext i32 %14 to i64
  %16 = mul nuw nsw i64 %15, 19192
  %17 = or i64 %16, 8
  %18 = tail call i8* @_Znam(i64 %17) #12
  %19 = bitcast i8* %18 to i64*
  store i64 %15, i64* %19, align 16
  %20 = getelementptr inbounds i8, i8* %18, i64 8
  %21 = bitcast i8* %20 to %struct.UnpackThreadData*
  %22 = icmp eq i32 %14, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %11
  %24 = bitcast %struct.UnpackThreadData** %8 to i8**
  store i8* %20, i8** %24, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 %16, i1 false)
  br label %52

25:                                               ; preds = %11
  %26 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %21, i64 %15
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi %struct.UnpackThreadData* [ %21, %25 ], [ %31, %27 ]
  %29 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %28, i64 0, i32 1
  tail call void @_ZN8BitInputC1Eb(%class.BitInput* %29, i1 zeroext false) #11
  %30 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %28, i64 0, i32 13
  store %struct.UnpackDecodedItem* null, %struct.UnpackDecodedItem** %30, align 8
  %31 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %28, i64 1
  %32 = icmp eq %struct.UnpackThreadData* %31, %26
  br i1 %32, label %33, label %27

33:                                               ; preds = %27
  %34 = bitcast %struct.UnpackThreadData** %8 to i8**
  store i8* %20, i8** %34, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 %16, i1 false)
  br i1 %22, label %52, label %35

35:                                               ; preds = %33, %50
  %36 = phi %struct.UnpackThreadData* [ %51, %50 ], [ %21, %33 ]
  %37 = phi i64 [ %48, %50 ], [ 0, %33 ]
  %38 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %36, i64 %37, i32 13
  %39 = load %struct.UnpackDecodedItem*, %struct.UnpackDecodedItem** %38, align 8
  %40 = icmp eq %struct.UnpackDecodedItem* %39, null
  br i1 %40, label %41, label %47

41:                                               ; preds = %35
  %42 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %36, i64 %37, i32 15
  store i32 16640, i32* %42, align 4
  %43 = tail call noalias i8* @malloc(i64 199680) #11
  %44 = bitcast %struct.UnpackDecodedItem** %38 to i8**
  store i8* %43, i8** %44, align 8
  %45 = icmp eq i8* %43, null
  br i1 %45, label %46, label %47

46:                                               ; preds = %41
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  br label %47

47:                                               ; preds = %41, %46, %35
  %48 = add nuw nsw i64 %37, 1
  %49 = icmp eq i64 %48, %15
  br i1 %49, label %52, label %50

50:                                               ; preds = %47
  %51 = load %struct.UnpackThreadData*, %struct.UnpackThreadData** %8, align 8
  br label %35

52:                                               ; preds = %47, %23, %33, %7
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack9Unpack5MTEb(%class.Unpack*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca [64 x %struct.UnpackThreadDataList], align 16
  tail call void @_ZN6Unpack6InitMTEv(%class.Unpack* %0)
  tail call void @_ZN6Unpack11UnpInitDataEb(%class.Unpack* %0, i1 zeroext %1)
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 4
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 2147483647
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 3
  br label %28

10:                                               ; preds = %28, %2
  %11 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 17
  %12 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 3
  %13 = load %struct.UnpackThreadData*, %struct.UnpackThreadData** %12, align 8
  %14 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %13, i64 0, i32 4
  %15 = bitcast %struct.UnpackBlockHeader* %14 to i8*
  %16 = bitcast %struct.UnpackBlockHeader* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %15, i8* align 4 %16, i64 20, i1 false)
  %17 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18
  %18 = load %struct.UnpackThreadData*, %struct.UnpackThreadData** %12, align 8
  %19 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %18, i64 0, i32 7
  %20 = bitcast %struct.UnpackBlockTables* %19 to i8*
  %21 = bitcast %struct.UnpackBlockTables* %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %20, i8* align 4 %21, i64 19100, i1 false)
  %22 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %23 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 5
  %24 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 65
  %25 = bitcast [64 x %struct.UnpackThreadDataList]* %3 to i8*
  %26 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 2
  %27 = bitcast i8** %23 to i64*
  br label %38

28:                                               ; preds = %8, %28
  %29 = phi i64 [ 0, %8 ], [ %33, %28 ]
  %30 = load %struct.UnpackThreadData*, %struct.UnpackThreadData** %9, align 8
  %31 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %30, i64 %29, i32 10
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %30, i64 %29, i32 12
  store i8 0, i8* %32, align 1
  %33 = add nuw nsw i64 %29, 1
  %34 = load i32, i32* %4, align 8
  %35 = shl i32 %34, 1
  %36 = zext i32 %35 to i64
  %37 = icmp ult i64 %33, %36
  br i1 %37, label %28, label %10

38:                                               ; preds = %10, %320
  %39 = phi i32 [ 0, %10 ], [ %325, %320 ]
  %40 = phi i32 [ 0, %10 ], [ %324, %320 ]
  %41 = phi i32 [ 0, %10 ], [ %323, %320 ]
  %42 = phi i8 [ 0, %10 ], [ %322, %320 ]
  %43 = phi i8 [ 0, %10 ], [ %321, %320 ]
  %44 = load %class.ComprDataIO*, %class.ComprDataIO** %22, align 8
  %45 = load i8*, i8** %23, align 8
  %46 = sext i32 %40 to i64
  %47 = getelementptr inbounds i8, i8* %45, i64 %46
  %48 = sub nsw i32 4194304, %40
  %49 = and i32 %48, -16
  %50 = sext i32 %49 to i64
  %51 = call i32 @_ZN11ComprDataIO7UnpReadEPhm(%class.ComprDataIO* %44, i8* %47, i64 %50) #11
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %328, label %53

53:                                               ; preds = %38
  %54 = add nsw i32 %51, %40
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %328, label %56

56:                                               ; preds = %53
  %57 = icmp sgt i32 %51, 0
  %58 = icmp slt i32 %54, 1024
  %59 = and i1 %57, %58
  br i1 %59, label %320, label %60

60:                                               ; preds = %56
  %61 = icmp slt i32 %41, %54
  %62 = and i8 %42, 1
  %63 = icmp eq i8 %62, 0
  %64 = and i1 %61, %63
  br i1 %64, label %65, label %320

65:                                               ; preds = %60
  %66 = icmp eq i32 %51, 0
  %67 = zext i1 %66 to i8
  br label %68

68:                                               ; preds = %65, %318
  %69 = phi i32 [ %39, %65 ], [ %184, %318 ]
  %70 = phi i32 [ %41, %65 ], [ %181, %318 ]
  %71 = phi i8 [ %42, %65 ], [ %295, %318 ]
  %72 = phi i8 [ %43, %65 ], [ %179, %318 ]
  %73 = load i32, i32* %4, align 8
  %74 = and i32 %73, 2147483647
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %177, label %81

76:                                               ; preds = %151
  %77 = load i32, i32* %4, align 8
  %78 = shl i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = icmp ult i64 %147, %79
  br i1 %80, label %81, label %167

81:                                               ; preds = %68, %76
  %82 = phi i64 [ %147, %76 ], [ 0, %68 ]
  %83 = phi i32 [ %142, %76 ], [ 0, %68 ]
  %84 = phi i32 [ %148, %76 ], [ 0, %68 ]
  %85 = phi i32 [ %146, %76 ], [ %70, %68 ]
  %86 = phi i8 [ %141, %76 ], [ %72, %68 ]
  %87 = load %struct.UnpackThreadData*, %struct.UnpackThreadData** %12, align 8
  %88 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 0
  store %class.Unpack* %0, %class.Unpack** %88, align 8
  %89 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 12
  %90 = load i8, i8* %89, align 1, !range !5
  %91 = icmp eq i8 %90, 0
  %92 = trunc i64 %82 to i32
  br i1 %91, label %93, label %109

93:                                               ; preds = %81
  %94 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 1
  %95 = load i8*, i8** %23, align 8
  %96 = sext i32 %85 to i64
  %97 = getelementptr inbounds i8, i8* %95, i64 %96
  call void @_ZN8BitInput17SetExternalBufferEPh(%class.BitInput* %94, i8* %97) #11
  %98 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 1, i32 1
  store i32 0, i32* %98, align 4
  %99 = getelementptr inbounds %class.BitInput, %class.BitInput* %94, i64 0, i32 0
  store i32 0, i32* %99, align 8
  %100 = sub nsw i32 %54, %85
  %101 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 8
  store i32 %100, i32* %101, align 8
  %102 = icmp eq i32 %100, 0
  br i1 %102, label %165, label %103

103:                                              ; preds = %93
  %104 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 9
  store i8 0, i8* %104, align 4
  %105 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 2
  store i8 0, i8* %105, align 8
  %106 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 5
  store i8 0, i8* %106, align 8
  %107 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 11
  store i8 %67, i8* %107, align 2
  store i8 0, i8* %89, align 1
  %108 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 16
  store i32 %92, i32* %108, align 8
  br label %116

109:                                              ; preds = %81
  %110 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 8
  store i32 %54, i32* %110, align 8
  %111 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 2
  %112 = load i8, i8* %111, align 8, !range !5
  %113 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 11
  store i8 %67, i8* %113, align 2
  store i8 0, i8* %89, align 1
  %114 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 16
  store i32 %92, i32* %114, align 8
  %115 = icmp eq i8 %112, 0
  br i1 %115, label %116, label %129

116:                                              ; preds = %103, %109
  %117 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 2
  store i8 1, i8* %117, align 8
  %118 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 1
  %119 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 4
  %120 = call zeroext i1 @_ZN6Unpack15ReadBlockHeaderER8BitInputR17UnpackBlockHeader(%class.Unpack* %0, %class.BitInput* dereferenceable(24) %118, %struct.UnpackBlockHeader* dereferenceable(20) %119)
  br i1 %120, label %121, label %161

121:                                              ; preds = %116
  %122 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 4, i32 5
  %123 = load i8, i8* %122, align 1, !range !5
  %124 = icmp eq i8 %123, 0
  br i1 %124, label %125, label %128

125:                                              ; preds = %121
  %126 = load i8, i8* %24, align 2, !range !5
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %163, label %128

128:                                              ; preds = %125, %121
  store i8 1, i8* %24, align 2
  br label %129

129:                                              ; preds = %109, %128
  %130 = and i8 %86, 1
  %131 = icmp ne i8 %130, 0
  %132 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 4, i32 0
  %133 = load i32, i32* %132, align 4
  %134 = icmp sgt i32 %133, 131072
  %135 = or i1 %131, %134
  br i1 %135, label %136, label %138

136:                                              ; preds = %129
  %137 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 10
  store i8 1, i8* %137, align 1
  br label %140

138:                                              ; preds = %129
  %139 = add i32 %83, 1
  br label %140

140:                                              ; preds = %138, %136
  %141 = phi i8 [ 1, %136 ], [ %86, %138 ]
  %142 = phi i32 [ %83, %136 ], [ %139, %138 ]
  %143 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 4, i32 3
  %144 = load i32, i32* %143, align 4
  %145 = add i32 %144, %85
  %146 = add i32 %145, %133
  %147 = add nuw nsw i64 %82, 1
  %148 = add nuw i32 %84, 1
  %149 = sub nsw i32 %54, %146
  %150 = icmp sgt i32 %149, -1
  br i1 %150, label %151, label %159

151:                                              ; preds = %140
  %152 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %87, i64 %82, i32 4, i32 4
  %153 = load i8, i8* %152, align 4, !range !5
  %154 = icmp ne i8 %153, 0
  %155 = icmp slt i32 %149, 1024
  %156 = or i1 %155, %154
  br i1 %156, label %157, label %76

157:                                              ; preds = %151
  %158 = trunc i64 %82 to i32
  br label %169

159:                                              ; preds = %140
  %160 = trunc i64 %82 to i32
  br label %169

161:                                              ; preds = %116
  %162 = trunc i64 %82 to i32
  br label %169

163:                                              ; preds = %125
  %164 = trunc i64 %82 to i32
  br label %169

165:                                              ; preds = %93
  %166 = trunc i64 %82 to i32
  br label %169

167:                                              ; preds = %76
  %168 = trunc i64 %82 to i32
  br label %169

169:                                              ; preds = %167, %165, %163, %161, %159, %157
  %170 = phi i32 [ %158, %157 ], [ %160, %159 ], [ %162, %161 ], [ %164, %163 ], [ %166, %165 ], [ %168, %167 ]
  %171 = phi i8 [ %141, %157 ], [ %141, %159 ], [ %86, %161 ], [ %86, %163 ], [ %86, %165 ], [ %141, %167 ]
  %172 = phi i8 [ %71, %157 ], [ %71, %159 ], [ 1, %161 ], [ 1, %163 ], [ %71, %165 ], [ %71, %167 ]
  %173 = phi i32 [ %146, %157 ], [ %146, %159 ], [ %85, %161 ], [ %85, %163 ], [ %85, %165 ], [ %146, %167 ]
  %174 = phi i32 [ %148, %157 ], [ %148, %159 ], [ %162, %161 ], [ %164, %163 ], [ %166, %165 ], [ %148, %167 ]
  %175 = phi i32 [ %142, %157 ], [ %142, %159 ], [ %83, %161 ], [ %83, %163 ], [ %83, %165 ], [ %142, %167 ]
  %176 = load i32, i32* %4, align 8
  br label %177

177:                                              ; preds = %169, %68
  %178 = phi i32 [ %73, %68 ], [ %176, %169 ]
  %179 = phi i8 [ %72, %68 ], [ %171, %169 ]
  %180 = phi i8 [ %71, %68 ], [ %172, %169 ]
  %181 = phi i32 [ %70, %68 ], [ %173, %169 ]
  %182 = phi i32 [ 0, %68 ], [ %174, %169 ]
  %183 = phi i32 [ 0, %68 ], [ %175, %169 ]
  %184 = phi i32 [ %69, %68 ], [ %170, %169 ]
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %25) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 1024, i1 false)
  %185 = udiv i32 %183, %178
  %186 = urem i32 %183, %178
  %187 = icmp ne i32 %186, 0
  %188 = zext i1 %187 to i32
  %189 = add i32 %185, %188
  %190 = icmp eq i32 %183, 0
  br i1 %190, label %193, label %191

191:                                              ; preds = %177
  %192 = icmp eq i32 %182, 1
  br label %195

193:                                              ; preds = %213, %177
  %194 = icmp eq i32 %182, 0
  br i1 %194, label %310, label %216

195:                                              ; preds = %191, %213
  %196 = phi i32 [ 0, %191 ], [ %214, %213 ]
  %197 = phi i32 [ 0, %191 ], [ %198, %213 ]
  %198 = add i32 %197, 1
  %199 = zext i32 %197 to i64
  %200 = getelementptr inbounds [64 x %struct.UnpackThreadDataList], [64 x %struct.UnpackThreadDataList]* %3, i64 0, i64 %199
  %201 = load %struct.UnpackThreadData*, %struct.UnpackThreadData** %12, align 8
  %202 = zext i32 %196 to i64
  %203 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %201, i64 %202
  %204 = getelementptr inbounds %struct.UnpackThreadDataList, %struct.UnpackThreadDataList* %200, i64 0, i32 0
  store %struct.UnpackThreadData* %203, %struct.UnpackThreadData** %204, align 16
  %205 = sub i32 %183, %196
  %206 = icmp ult i32 %189, %205
  %207 = select i1 %206, i32 %189, i32 %205
  %208 = getelementptr inbounds [64 x %struct.UnpackThreadDataList], [64 x %struct.UnpackThreadDataList]* %3, i64 0, i64 %199, i32 1
  store i32 %207, i32* %208, align 8
  br i1 %192, label %209, label %210

209:                                              ; preds = %195
  call void @_ZN6Unpack12UnpackDecodeER16UnpackThreadData(%class.Unpack* %0, %struct.UnpackThreadData* dereferenceable(19192) %203)
  br label %213

210:                                              ; preds = %195
  %211 = load %class.ThreadPool*, %class.ThreadPool** %26, align 8
  %212 = bitcast %struct.UnpackThreadDataList* %200 to i8*
  call void @_ZN10ThreadPool7AddTaskEPFvPvES0_(%class.ThreadPool* %211, void (i8*)* nonnull @_Z18UnpackDecodeThreadPv, i8* %212) #11
  br label %213

213:                                              ; preds = %210, %209
  %214 = add i32 %196, %189
  %215 = icmp ugt i32 %183, %214
  br i1 %215, label %195, label %193

216:                                              ; preds = %193
  %217 = load %class.ThreadPool*, %class.ThreadPool** %26, align 8
  call void @_ZN10ThreadPool8WaitDoneEv(%class.ThreadPool* %217) #11
  %218 = zext i32 %182 to i64
  br label %219

219:                                              ; preds = %291, %216
  %220 = phi i64 [ 0, %216 ], [ %292, %291 ]
  %221 = load %struct.UnpackThreadData*, %struct.UnpackThreadData** %12, align 8
  %222 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %221, i64 %220
  %223 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %221, i64 %220, i32 10
  %224 = load i8, i8* %223, align 1, !range !5
  %225 = icmp eq i8 %224, 0
  br i1 %225, label %226, label %231

226:                                              ; preds = %219
  %227 = call zeroext i1 @_ZN6Unpack14ProcessDecodedER16UnpackThreadData(%class.Unpack* %0, %struct.UnpackThreadData* dereferenceable(19192) %222)
  br i1 %227, label %228, label %310

228:                                              ; preds = %226
  %229 = load i8, i8* %223, align 1
  %230 = icmp eq i8 %229, 0
  br i1 %230, label %233, label %231

231:                                              ; preds = %219, %228
  %232 = call zeroext i1 @_ZN6Unpack16UnpackLargeBlockER16UnpackThreadData(%class.Unpack* %0, %struct.UnpackThreadData* dereferenceable(19192) %222)
  br i1 %232, label %233, label %310

233:                                              ; preds = %228, %231
  %234 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %221, i64 %220, i32 9
  %235 = load i8, i8* %234, align 4, !range !5
  %236 = icmp eq i8 %235, 0
  br i1 %236, label %237, label %310

237:                                              ; preds = %233
  %238 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %221, i64 %220, i32 12
  %239 = load i8, i8* %238, align 1, !range !5
  %240 = icmp eq i8 %239, 0
  br i1 %240, label %287, label %241

241:                                              ; preds = %237
  %242 = and i64 %220, 4294967295
  %243 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %221, i64 %242, i32 1, i32 3
  %244 = load i8*, i8** %243, align 8
  %245 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %221, i64 %242, i32 1, i32 0
  %246 = load i32, i32* %245, align 8
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds i8, i8* %244, i64 %247
  %249 = load i8*, i8** %23, align 8
  %250 = ptrtoint i8* %248 to i64
  %251 = ptrtoint i8* %249 to i64
  %252 = sub i64 %250, %251
  %253 = trunc i64 %252 to i32
  %254 = icmp sgt i32 %54, %253
  br i1 %254, label %255, label %310

255:                                              ; preds = %241
  %256 = trunc i64 %220 to i32
  %257 = shl i64 %252, 32
  %258 = ashr exact i64 %257, 32
  %259 = getelementptr inbounds i8, i8* %249, i64 %258
  %260 = sub nsw i32 %54, %253
  %261 = sext i32 %260 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %249, i8* align 1 %259, i64 %261, i1 false)
  %262 = load i32, i32* %245, align 8
  %263 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %221, i64 %242, i32 4, i32 2
  %264 = load i32, i32* %263, align 4
  %265 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %221, i64 %242, i32 4, i32 0
  %266 = load i32, i32* %265, align 4
  %267 = sub i32 %264, %262
  %268 = add i32 %267, %266
  store i32 %268, i32* %265, align 4
  %269 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %221, i64 %242, i32 4, i32 3
  store i32 0, i32* %269, align 4
  store i32 0, i32* %263, align 4
  %270 = load i64, i64* %27, align 8
  %271 = bitcast i8** %243 to i64*
  store i64 %270, i64* %271, align 8
  store i32 0, i32* %245, align 8
  %272 = icmp eq i32 %256, 0
  br i1 %272, label %310, label %273

273:                                              ; preds = %255
  %274 = load %struct.UnpackThreadData*, %struct.UnpackThreadData** %12, align 8
  %275 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %274, i64 0, i32 13
  %276 = bitcast %struct.UnpackDecodedItem** %275 to i64*
  %277 = load i64, i64* %276, align 8
  %278 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %274, i64 0, i32 15
  %279 = load i32, i32* %278, align 4
  %280 = bitcast %struct.UnpackThreadData* %274 to i8*
  %281 = bitcast %struct.UnpackThreadData* %222 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %280, i8* align 8 %281, i64 19188, i1 false)
  %282 = load %struct.UnpackThreadData*, %struct.UnpackThreadData** %12, align 8
  %283 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %282, i64 0, i32 13
  %284 = bitcast %struct.UnpackDecodedItem** %283 to i64*
  store i64 %277, i64* %284, align 8
  %285 = load %struct.UnpackThreadData*, %struct.UnpackThreadData** %12, align 8
  %286 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %285, i64 0, i32 15
  store i32 %279, i32* %286, align 4
  store i8 0, i8* %238, align 1
  br label %310

287:                                              ; preds = %237
  %288 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %221, i64 %220, i32 4, i32 4
  %289 = load i8, i8* %288, align 4, !range !5
  %290 = icmp eq i8 %289, 0
  br i1 %290, label %291, label %294

291:                                              ; preds = %287
  %292 = add nuw nsw i64 %220, 1
  %293 = icmp eq i64 %292, %218
  br i1 %293, label %294, label %219

294:                                              ; preds = %287, %291
  %295 = select i1 %290, i8 %180, i8 1
  %296 = and i8 %295, 1
  %297 = icmp eq i8 %296, 0
  br i1 %297, label %298, label %310

298:                                              ; preds = %294
  %299 = sub nsw i32 %54, %181
  %300 = icmp slt i32 %299, 1024
  br i1 %300, label %301, label %318

301:                                              ; preds = %298
  %302 = icmp slt i32 %299, 0
  br i1 %302, label %314, label %303

303:                                              ; preds = %301
  %304 = icmp eq i32 %299, 0
  br i1 %304, label %314, label %305

305:                                              ; preds = %303
  %306 = load i8*, i8** %23, align 8
  %307 = sext i32 %181 to i64
  %308 = getelementptr inbounds i8, i8* %306, i64 %307
  %309 = sext i32 %299 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %306, i8* align 1 %308, i64 %309, i1 false)
  br label %314

310:                                              ; preds = %193, %294, %233, %231, %226, %241, %255, %273
  %311 = phi i8 [ 1, %241 ], [ %180, %255 ], [ %180, %273 ], [ 1, %226 ], [ 1, %231 ], [ 1, %233 ], [ %295, %294 ], [ %180, %193 ]
  %312 = phi i32 [ %181, %241 ], [ 0, %255 ], [ 0, %273 ], [ %181, %226 ], [ %181, %231 ], [ %181, %233 ], [ %181, %294 ], [ %181, %193 ]
  %313 = phi i32 [ %54, %241 ], [ %260, %255 ], [ %260, %273 ], [ %54, %226 ], [ %54, %231 ], [ %54, %233 ], [ %54, %294 ], [ %54, %193 ]
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %25) #11
  br label %320

314:                                              ; preds = %301, %303, %305
  %315 = phi i8 [ %295, %305 ], [ %295, %303 ], [ 1, %301 ]
  %316 = phi i32 [ 0, %305 ], [ 0, %303 ], [ %181, %301 ]
  %317 = phi i32 [ %299, %305 ], [ 0, %303 ], [ %54, %301 ]
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %25) #11
  br label %320

318:                                              ; preds = %298
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %25) #11
  %319 = icmp sgt i32 %54, %181
  br i1 %319, label %68, label %320

320:                                              ; preds = %318, %60, %314, %310, %56
  %321 = phi i8 [ %43, %56 ], [ %179, %310 ], [ %179, %314 ], [ %43, %60 ], [ %179, %318 ]
  %322 = phi i8 [ %42, %56 ], [ %311, %310 ], [ %315, %314 ], [ %42, %60 ], [ %295, %318 ]
  %323 = phi i32 [ %41, %56 ], [ %312, %310 ], [ %316, %314 ], [ %41, %60 ], [ %181, %318 ]
  %324 = phi i32 [ %54, %56 ], [ %313, %310 ], [ %317, %314 ], [ %54, %60 ], [ %54, %318 ]
  %325 = phi i32 [ %39, %56 ], [ %184, %310 ], [ %184, %314 ], [ %39, %60 ], [ %184, %318 ]
  %326 = and i8 %322, 1
  %327 = icmp eq i8 %326, 0
  br i1 %327, label %38, label %328

328:                                              ; preds = %53, %38, %320
  %329 = phi i32 [ %39, %53 ], [ %39, %38 ], [ %325, %320 ]
  %330 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %331 = load i64, i64* %330, align 8
  %332 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %333 = load i64, i64* %332, align 8
  %334 = and i64 %333, %331
  store i64 %334, i64* %332, align 8
  call void @_ZN6Unpack11UnpWriteBufEv(%class.Unpack* %0)
  %335 = load %struct.UnpackThreadData*, %struct.UnpackThreadData** %12, align 8
  %336 = zext i32 %329 to i64
  %337 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %335, i64 %336, i32 4
  %338 = bitcast %struct.UnpackBlockHeader* %337 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 4 %338, i64 20, i1 false)
  %339 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %335, i64 %336, i32 7
  %340 = bitcast %struct.UnpackBlockTables* %339 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 %340, i64 19100, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack11UnpInitDataEb(%class.Unpack*, i1 zeroext) local_unnamed_addr #0 align 2 {
  br i1 %1, label %18, label %3

3:                                                ; preds = %2
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 0
  %5 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18
  %6 = bitcast %struct.UnpackBlockTables* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 19100, i1 false)
  %7 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 72
  %9 = bitcast i32* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 28, i1 false)
  %10 = bitcast i64* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false)
  %11 = load i64, i64* %8, align 8
  %12 = icmp ult i64 %11, 4194304
  %13 = select i1 %12, i64 %11, i64 4194304
  %14 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %15 = load i64, i64* %14, align 8
  %16 = and i64 %13, %15
  %17 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 19
  store i64 %16, i64* %17, align 8
  br label %18

18:                                               ; preds = %3, %2
  %19 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8, i32 1
  store i64 0, i64* %19, align 8
  %20 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 1
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 0
  store i32 0, i32* %21, align 8
  %22 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 27
  store i64 0, i64* %22, align 8
  %23 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  %24 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 17, i32 0
  %25 = bitcast i32* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 28, i1 false)
  store i32 -1, i32* %24, align 8
  br i1 %1, label %62, label %26

26:                                               ; preds = %18
  %27 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 63
  store i8 0, i8* %27, align 4
  %28 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 52
  store i8 0, i8* %28, align 8
  %29 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 55
  store i32 0, i32* %29, align 4
  %30 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 54
  store i32 0, i32* %30, align 8
  %31 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 53
  store i32 1, i32* %31, align 4
  %32 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 0
  %33 = bitcast %struct.AudioVariables* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 368, i1 false) #11
  %34 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 0
  %35 = bitcast %struct.DecodeTable* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 16308, i1 false) #11
  %36 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 64
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 61, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %37, i8 0, i64 404, i1 false) #11
  %38 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 60
  store i32 2, i32* %38, align 8
  %39 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 62
  store i32 0, i32* %39, align 8
  %40 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 70, i32 1
  store i64 0, i64* %40, align 8
  %41 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 71
  store i32 0, i32* %41, align 8
  %42 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %47, label %45

45:                                               ; preds = %26
  %46 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68, i32 0
  br label %48

47:                                               ; preds = %58, %26
  store i64 0, i64* %42, align 8
  br label %62

48:                                               ; preds = %58, %45
  %49 = phi i64 [ %43, %45 ], [ %59, %58 ]
  %50 = phi i64 [ 0, %45 ], [ %60, %58 ]
  %51 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %46, align 8
  %52 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %51, i64 %50
  %53 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %52, align 8
  %54 = icmp eq %struct.UnpackFilter30* %53, null
  br i1 %54, label %58, label %55

55:                                               ; preds = %48
  %56 = bitcast %struct.UnpackFilter30* %53 to i8*
  tail call void @_ZdlPv(i8* %56) #12
  %57 = load i64, i64* %42, align 8
  br label %58

58:                                               ; preds = %55, %48
  %59 = phi i64 [ %49, %48 ], [ %57, %55 ]
  %60 = add nuw i64 %50, 1
  %61 = icmp ult i64 %60, %59
  br i1 %61, label %48, label %47

62:                                               ; preds = %18, %47
  %63 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %82, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69, i32 0
  br label %68

68:                                               ; preds = %78, %66
  %69 = phi i64 [ %64, %66 ], [ %79, %78 ]
  %70 = phi i64 [ 0, %66 ], [ %80, %78 ]
  %71 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %67, align 8
  %72 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %71, i64 %70
  %73 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %72, align 8
  %74 = icmp eq %struct.UnpackFilter30* %73, null
  br i1 %74, label %78, label %75

75:                                               ; preds = %68
  %76 = bitcast %struct.UnpackFilter30* %73 to i8*
  tail call void @_ZdlPv(i8* %76) #12
  %77 = load i64, i64* %63, align 8
  br label %78

78:                                               ; preds = %75, %68
  %79 = phi i64 [ %69, %68 ], [ %77, %75 ]
  %80 = add nuw i64 %70, 1
  %81 = icmp ult i64 %80, %79
  br i1 %81, label %68, label %82

82:                                               ; preds = %78, %62
  store i64 0, i64* %63, align 8
  br i1 %1, label %85, label %83

83:                                               ; preds = %82
  %84 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 65
  store i8 0, i8* %84, align 2
  br label %85

85:                                               ; preds = %82, %83
  ret void
}

declare i32 @_ZN11ComprDataIO7UnpReadEPhm(%class.ComprDataIO*, i8*, i64) local_unnamed_addr #5

declare void @_ZN8BitInput17SetExternalBufferEPh(%class.BitInput*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6Unpack15ReadBlockHeaderER8BitInputR17UnpackBlockHeader(%class.Unpack* nocapture, %class.BitInput* dereferenceable(24), %struct.UnpackBlockHeader* nocapture dereferenceable(20)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.UnpackBlockHeader, %struct.UnpackBlockHeader* %2, i64 0, i32 3
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %class.BitInput, %class.BitInput* %1, i64 0, i32 2
  %6 = load i8, i8* %5, align 8, !range !5
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %17

8:                                                ; preds = %3
  %9 = getelementptr inbounds %class.BitInput, %class.BitInput* %1, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  %12 = load i32, i32* %11, align 8
  %13 = add nsw i32 %12, -7
  %14 = icmp sgt i32 %10, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %8
  %16 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %0)
  br i1 %16, label %17, label %79

17:                                               ; preds = %3, %15, %8
  %18 = getelementptr inbounds %class.BitInput, %class.BitInput* %1, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = sub i32 0, %19
  %21 = and i32 %20, 7
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %1, i32 %21) #11
  %22 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %1) #11
  %23 = lshr i32 %22, 8
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %1, i32 8) #11
  %24 = lshr i32 %22, 11
  %25 = and i32 %24, 3
  %26 = icmp eq i32 %25, 3
  br i1 %26, label %79, label %27

27:                                               ; preds = %17
  %28 = add nuw nsw i32 %25, 3
  store i32 %28, i32* %4, align 4
  %29 = and i32 %23, 7
  %30 = add nuw nsw i32 %29, 1
  %31 = getelementptr inbounds %struct.UnpackBlockHeader, %struct.UnpackBlockHeader* %2, i64 0, i32 1
  store i32 %30, i32* %31, align 4
  %32 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %1) #11
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %1, i32 8) #11
  %33 = getelementptr inbounds %class.BitInput, %class.BitInput* %1, i64 0, i32 0
  br label %46

34:                                               ; preds = %46
  %35 = lshr i32 %32, 8
  %36 = getelementptr inbounds %struct.UnpackBlockHeader, %struct.UnpackBlockHeader* %2, i64 0, i32 0
  store i32 %53, i32* %36, align 4
  %37 = xor i32 %23, 90
  %38 = lshr i32 %53, 8
  %39 = lshr i32 %53, 16
  %40 = xor i32 %37, %35
  %41 = xor i32 %40, %53
  %42 = xor i32 %41, %38
  %43 = xor i32 %42, %39
  %44 = and i32 %43, 255
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %62, label %79

46:                                               ; preds = %27, %46
  %47 = phi i32 [ 0, %27 ], [ %60, %46 ]
  %48 = phi i32 [ 0, %27 ], [ %53, %46 ]
  %49 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %1) #11
  %50 = lshr i32 %49, 8
  %51 = shl i32 %47, 3
  %52 = shl i32 %50, %51
  %53 = add i32 %52, %48
  %54 = load i32, i32* %18, align 4
  %55 = add i32 %54, 8
  %56 = lshr i32 %55, 3
  %57 = load i32, i32* %33, align 8
  %58 = add i32 %56, %57
  store i32 %58, i32* %33, align 8
  %59 = and i32 %55, 7
  store i32 %59, i32* %18, align 4
  %60 = add nuw nsw i32 %47, 1
  %61 = icmp eq i32 %47, %25
  br i1 %61, label %34, label %46

62:                                               ; preds = %34
  %63 = load i32, i32* %33, align 8
  %64 = getelementptr inbounds %struct.UnpackBlockHeader, %struct.UnpackBlockHeader* %2, i64 0, i32 2
  store i32 %63, i32* %64, align 4
  %65 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 16
  %66 = load i32, i32* %65, align 4
  %67 = add i32 %53, -1
  %68 = add i32 %67, %63
  %69 = icmp slt i32 %66, %68
  %70 = select i1 %69, i32 %66, i32 %68
  store i32 %70, i32* %65, align 4
  %71 = getelementptr inbounds %struct.UnpackBlockHeader, %struct.UnpackBlockHeader* %2, i64 0, i32 4
  %72 = lshr i32 %22, 14
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  store i8 %74, i8* %71, align 4
  %75 = trunc i32 %22 to i16
  %76 = getelementptr inbounds %struct.UnpackBlockHeader, %struct.UnpackBlockHeader* %2, i64 0, i32 5
  %77 = lshr i16 %75, 15
  %78 = trunc i16 %77 to i8
  store i8 %78, i8* %76, align 1
  br label %79

79:                                               ; preds = %17, %34, %62, %15
  %80 = phi i1 [ false, %15 ], [ false, %17 ], [ true, %62 ], [ false, %34 ]
  ret i1 %80
}

declare void @_ZN10ThreadPool7AddTaskEPFvPvES0_(%class.ThreadPool*, void (i8*)*, i8*) local_unnamed_addr #5

declare void @_ZN10ThreadPool8WaitDoneEv(%class.ThreadPool*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6Unpack14ProcessDecodedER16UnpackThreadData(%class.Unpack*, %struct.UnpackThreadData* nocapture readonly dereferenceable(19192)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 13
  %4 = load %struct.UnpackDecodedItem*, %struct.UnpackDecodedItem** %3, align 8
  %5 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 14
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %4, i64 %7
  %9 = icmp eq i32 %6, 0
  br i1 %9, label %323, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %12 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %13 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 19
  %14 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 27
  %15 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %16 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8
  %17 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8, i32 1
  %18 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 14
  %19 = getelementptr inbounds %class.Array.5, %class.Array.5* %16, i64 0, i32 0
  %20 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 11
  %21 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 0
  %22 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 2
  %23 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 3
  %24 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 1
  %25 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 72
  %26 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %27 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 1
  %28 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 0
  %29 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 1
  br label %30

30:                                               ; preds = %10, %319
  %31 = phi %struct.UnpackDecodedItem* [ %4, %10 ], [ %321, %319 ]
  %32 = load i64, i64* %11, align 8
  %33 = load i64, i64* %12, align 8
  %34 = and i64 %33, %32
  store i64 %34, i64* %12, align 8
  %35 = load i64, i64* %13, align 8
  %36 = sub i64 %35, %34
  %37 = and i64 %36, %32
  %38 = icmp ugt i64 %37, 4099
  %39 = icmp eq i64 %35, %34
  %40 = or i1 %39, %38
  br i1 %40, label %45, label %41

41:                                               ; preds = %30
  tail call void @_ZN6Unpack11UnpWriteBufEv(%class.Unpack* %0)
  %42 = load i64, i64* %14, align 8
  %43 = load i64, i64* %15, align 8
  %44 = icmp sgt i64 %42, %43
  br i1 %44, label %323, label %45

45:                                               ; preds = %30, %41
  %46 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %31, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  switch i32 %47, label %319 [
    i32 0, label %48
    i32 1, label %82
    i32 3, label %94
    i32 2, label %258
    i32 4, label %263
  ]

48:                                               ; preds = %45
  %49 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %31, i64 0, i32 1
  %50 = load i16, i16* %49, align 4
  %51 = icmp eq i16 %50, 3
  br i1 %51, label %52, label %65

52:                                               ; preds = %48
  %53 = load i64, i64* %12, align 8
  %54 = load i64, i64* %25, align 8
  %55 = add i64 %54, -4
  %56 = icmp ult i64 %53, %55
  br i1 %56, label %57, label %65

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %31, i64 0, i32 2, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = load i8*, i8** %26, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 %53
  %62 = bitcast i8* %61 to i32*
  store i32 %59, i32* %62, align 4
  %63 = load i64, i64* %12, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %12, align 8
  br label %319

65:                                               ; preds = %52, %48
  %66 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %31, i64 0, i32 2
  %67 = bitcast %union.anon.4* %66 to [4 x i8]*
  br label %68

68:                                               ; preds = %68, %65
  %69 = phi i64 [ 0, %65 ], [ %78, %68 ]
  %70 = getelementptr inbounds [4 x i8], [4 x i8]* %67, i64 0, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = load i8*, i8** %26, align 8
  %73 = load i64, i64* %12, align 8
  %74 = add i64 %73, 1
  store i64 %74, i64* %12, align 8
  %75 = load i64, i64* %11, align 8
  %76 = and i64 %75, %73
  %77 = getelementptr inbounds i8, i8* %72, i64 %76
  store i8 %71, i8* %77, align 1
  %78 = add nuw nsw i64 %69, 1
  %79 = load i16, i16* %49, align 4
  %80 = zext i16 %79 to i64
  %81 = icmp ult i64 %69, %80
  br i1 %81, label %68, label %319

82:                                               ; preds = %45
  %83 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %31, i64 0, i32 2, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = load i32, i32* %22, align 8
  store i32 %85, i32* %23, align 4
  %86 = load i32, i32* %24, align 4
  store i32 %86, i32* %22, align 8
  %87 = load i32, i32* %21, align 8
  store i32 %87, i32* %24, align 4
  store i32 %84, i32* %21, align 8
  %88 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %31, i64 0, i32 1
  %89 = load i16, i16* %88, align 4
  %90 = zext i16 %89 to i32
  store i32 %90, i32* %20, align 4
  %91 = load i16, i16* %88, align 4
  %92 = zext i16 %91 to i32
  %93 = load i32, i32* %83, align 4
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %92, i32 %93)
  br label %319

94:                                               ; preds = %45
  %95 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %31, i64 0, i32 2, i32 0
  %96 = load i32, i32* %95, align 4
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %97
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %96, 0
  br i1 %100, label %224, label %101

101:                                              ; preds = %94
  %102 = add i32 %96, -1
  %103 = zext i32 %102 to i64
  %104 = add nuw nsw i64 %103, 1
  %105 = icmp ult i64 %104, 8
  br i1 %105, label %106, label %126

106:                                              ; preds = %222, %140, %126, %101
  %107 = phi i64 [ %97, %140 ], [ %97, %126 ], [ %97, %101 ], [ %152, %222 ]
  %108 = trunc i64 %107 to i32
  %109 = add i32 %108, -1
  %110 = and i32 %108, 3
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %123, label %112

112:                                              ; preds = %106, %112
  %113 = phi i64 [ %120, %112 ], [ %107, %106 ]
  %114 = phi i32 [ %121, %112 ], [ %110, %106 ]
  %115 = add i64 %113, 4294967295
  %116 = and i64 %115, 4294967295
  %117 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %113
  store i32 %118, i32* %119, align 4
  %120 = add nsw i64 %113, -1
  %121 = add i32 %114, -1
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %112, !llvm.loop !6

123:                                              ; preds = %112, %106
  %124 = phi i64 [ %107, %106 ], [ %120, %112 ]
  %125 = icmp ult i32 %109, 3
  br i1 %125, label %224, label %230

126:                                              ; preds = %101
  %127 = add i32 %96, -1
  %128 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %97
  %129 = ptrtoint i32* %128 to i64
  %130 = zext i32 %127 to i64
  %131 = shl nuw nsw i64 %130, 2
  %132 = icmp ugt i64 %131, %129
  %133 = zext i32 %127 to i64
  %134 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %133
  %135 = ptrtoint i32* %134 to i64
  %136 = zext i32 %127 to i64
  %137 = shl nuw nsw i64 %136, 2
  %138 = icmp ugt i64 %137, %135
  %139 = or i1 %132, %138
  br i1 %139, label %106, label %140

140:                                              ; preds = %126
  %141 = add i32 %96, -1
  %142 = zext i32 %141 to i64
  %143 = sub nsw i64 %97, %142
  %144 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %143
  %145 = getelementptr i32, i32* %27, i64 %97
  %146 = getelementptr i32, i32* %29, i64 %142
  %147 = icmp ult i32* %144, %146
  %148 = icmp ult i32* %28, %145
  %149 = and i1 %147, %148
  br i1 %149, label %106, label %150

150:                                              ; preds = %140
  %151 = and i64 %104, 8589934584
  %152 = sub nsw i64 %97, %151
  %153 = add nsw i64 %151, -8
  %154 = lshr exact i64 %153, 3
  %155 = add nuw nsw i64 %154, 1
  %156 = and i64 %155, 1
  %157 = icmp eq i64 %153, 0
  br i1 %157, label %201, label %158

158:                                              ; preds = %150
  %159 = sub nuw nsw i64 %155, %156
  br label %160

160:                                              ; preds = %160, %158
  %161 = phi i64 [ 0, %158 ], [ %198, %160 ]
  %162 = phi i64 [ %159, %158 ], [ %199, %160 ]
  %163 = sub i64 %97, %161
  %164 = trunc i64 %161 to i32
  %165 = xor i32 %164, -1
  %166 = add i32 %96, %165
  %167 = zext i32 %166 to i64
  %168 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %167
  %169 = getelementptr inbounds i32, i32* %168, i64 -3
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4, !alias.scope !7
  %172 = getelementptr inbounds i32, i32* %168, i64 -7
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4, !alias.scope !7
  %175 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %163
  %176 = getelementptr inbounds i32, i32* %175, i64 -3
  %177 = bitcast i32* %176 to <4 x i32>*
  store <4 x i32> %171, <4 x i32>* %177, align 4, !alias.scope !10, !noalias !7
  %178 = getelementptr inbounds i32, i32* %175, i64 -7
  %179 = bitcast i32* %178 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %179, align 4, !alias.scope !10, !noalias !7
  %180 = or i64 %161, 8
  %181 = sub i64 %97, %180
  %182 = trunc i64 %180 to i32
  %183 = xor i32 %182, -1
  %184 = add i32 %96, %183
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %185
  %187 = getelementptr inbounds i32, i32* %186, i64 -3
  %188 = bitcast i32* %187 to <4 x i32>*
  %189 = load <4 x i32>, <4 x i32>* %188, align 4, !alias.scope !7
  %190 = getelementptr inbounds i32, i32* %186, i64 -7
  %191 = bitcast i32* %190 to <4 x i32>*
  %192 = load <4 x i32>, <4 x i32>* %191, align 4, !alias.scope !7
  %193 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %181
  %194 = getelementptr inbounds i32, i32* %193, i64 -3
  %195 = bitcast i32* %194 to <4 x i32>*
  store <4 x i32> %189, <4 x i32>* %195, align 4, !alias.scope !10, !noalias !7
  %196 = getelementptr inbounds i32, i32* %193, i64 -7
  %197 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> %192, <4 x i32>* %197, align 4, !alias.scope !10, !noalias !7
  %198 = add i64 %161, 16
  %199 = add i64 %162, -2
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %160, !llvm.loop !12

201:                                              ; preds = %160, %150
  %202 = phi i64 [ 0, %150 ], [ %198, %160 ]
  %203 = icmp eq i64 %156, 0
  br i1 %203, label %222, label %204

204:                                              ; preds = %201
  %205 = sub i64 %97, %202
  %206 = trunc i64 %202 to i32
  %207 = xor i32 %206, -1
  %208 = add i32 %96, %207
  %209 = zext i32 %208 to i64
  %210 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %209
  %211 = getelementptr inbounds i32, i32* %210, i64 -3
  %212 = bitcast i32* %211 to <4 x i32>*
  %213 = load <4 x i32>, <4 x i32>* %212, align 4, !alias.scope !7
  %214 = getelementptr inbounds i32, i32* %210, i64 -7
  %215 = bitcast i32* %214 to <4 x i32>*
  %216 = load <4 x i32>, <4 x i32>* %215, align 4, !alias.scope !7
  %217 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %205
  %218 = getelementptr inbounds i32, i32* %217, i64 -3
  %219 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %213, <4 x i32>* %219, align 4, !alias.scope !10, !noalias !7
  %220 = getelementptr inbounds i32, i32* %217, i64 -7
  %221 = bitcast i32* %220 to <4 x i32>*
  store <4 x i32> %216, <4 x i32>* %221, align 4, !alias.scope !10, !noalias !7
  br label %222

222:                                              ; preds = %201, %204
  %223 = icmp eq i64 %104, %151
  br i1 %223, label %224, label %106

224:                                              ; preds = %123, %230, %222, %94
  store i32 %99, i32* %21, align 8
  %225 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %31, i64 0, i32 1
  %226 = load i16, i16* %225, align 4
  %227 = zext i16 %226 to i32
  store i32 %227, i32* %20, align 4
  %228 = load i16, i16* %225, align 4
  %229 = zext i16 %228 to i32
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %229, i32 %99)
  br label %319

230:                                              ; preds = %123, %230
  %231 = phi i64 [ %257, %230 ], [ %124, %123 ]
  %232 = add i64 %231, 4294967295
  %233 = and i64 %232, 4294967295
  %234 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %233
  %235 = load i32, i32* %234, align 4
  %236 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %231
  store i32 %235, i32* %236, align 4
  %237 = add nsw i64 %231, -1
  %238 = add i64 %231, 4294967294
  %239 = and i64 %238, 4294967295
  %240 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %239
  %241 = load i32, i32* %240, align 4
  %242 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %237
  store i32 %241, i32* %242, align 4
  %243 = add nsw i64 %231, -2
  %244 = add i64 %231, 4294967293
  %245 = and i64 %244, 4294967295
  %246 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %245
  %247 = load i32, i32* %246, align 4
  %248 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %243
  store i32 %247, i32* %248, align 4
  %249 = add nsw i64 %231, -3
  %250 = trunc i64 %249 to i32
  %251 = add i32 %250, -1
  %252 = zext i32 %251 to i64
  %253 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %252
  %254 = load i32, i32* %253, align 4
  %255 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %249
  store i32 %254, i32* %255, align 4
  %256 = icmp eq i32 %251, 0
  %257 = add nsw i64 %231, -4
  br i1 %256, label %224, label %230, !llvm.loop !14

258:                                              ; preds = %45
  %259 = load i32, i32* %20, align 4
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %319, label %261

261:                                              ; preds = %258
  %262 = load i32, i32* %21, align 8
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %259, i32 %262)
  br label %319

263:                                              ; preds = %45
  %264 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %31, i64 0, i32 1
  %265 = load i16, i16* %264, align 4
  %266 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %31, i64 0, i32 2, i32 0
  %267 = load i32, i32* %266, align 4
  %268 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %31, i64 1
  %269 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %31, i64 1, i32 1
  %270 = load i16, i16* %269, align 4
  %271 = zext i16 %270 to i64
  %272 = shl nuw nsw i64 %271, 32
  %273 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %31, i64 1, i32 2, i32 0
  %274 = load i32, i32* %273, align 4
  %275 = zext i32 %274 to i64
  %276 = load i64, i64* %17, align 8
  %277 = icmp ugt i64 %276, 8191
  br i1 %277, label %278, label %282

278:                                              ; preds = %263
  tail call void @_ZN6Unpack11UnpWriteBufEv(%class.Unpack* %0) #11
  %279 = load i64, i64* %17, align 8
  %280 = icmp ugt i64 %279, 8191
  br i1 %280, label %281, label %282

281:                                              ; preds = %278
  store i64 0, i64* %17, align 8
  br label %282

282:                                              ; preds = %281, %278, %263
  %283 = load i64, i64* %18, align 8
  %284 = load i64, i64* %12, align 8
  %285 = icmp eq i64 %283, %284
  br i1 %285, label %286, label %289

286:                                              ; preds = %282
  %287 = zext i32 %267 to i64
  %288 = load i64, i64* %11, align 8
  br label %296

289:                                              ; preds = %282
  %290 = sub i64 %283, %284
  %291 = load i64, i64* %11, align 8
  %292 = and i64 %291, %290
  %293 = zext i32 %267 to i64
  %294 = icmp ule i64 %292, %293
  %295 = zext i1 %294 to i64
  br label %296

296:                                              ; preds = %286, %289
  %297 = phi i64 [ %288, %286 ], [ %291, %289 ]
  %298 = phi i64 [ %287, %286 ], [ %293, %289 ]
  %299 = phi i64 [ 0, %286 ], [ %295, %289 ]
  %300 = shl nuw nsw i64 %299, 40
  %301 = and i64 %272, 1095216660480
  %302 = or i64 %301, %275
  %303 = or i64 %302, %300
  %304 = or i64 %303, -6149102341220990976
  %305 = add i64 %298, %284
  %306 = and i64 %297, %305
  %307 = shl i64 %306, 32
  %308 = and i16 %265, 255
  %309 = zext i16 %308 to i64
  %310 = or i64 %307, %309
  %311 = or i64 %310, 2863311360
  tail call void @_ZN5ArrayI12UnpackFilterE3AddEm(%class.Array.5* %16, i64 1) #11
  %312 = load i64, i64* %17, align 8
  %313 = add i64 %312, -1
  %314 = load %struct.UnpackFilter*, %struct.UnpackFilter** %19, align 8
  %315 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %314, i64 %313
  %316 = bitcast %struct.UnpackFilter* %315 to i64*
  store i64 %311, i64* %316, align 4
  %317 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %314, i64 %313, i32 2
  %318 = bitcast i32* %317 to i64*
  store i64 %304, i64* %318, align 4
  br label %319

319:                                              ; preds = %68, %45, %258, %82, %261, %296, %224, %57
  %320 = phi %struct.UnpackDecodedItem* [ %31, %57 ], [ %31, %82 ], [ %31, %224 ], [ %31, %261 ], [ %31, %258 ], [ %268, %296 ], [ %31, %45 ], [ %31, %68 ]
  %321 = getelementptr inbounds %struct.UnpackDecodedItem, %struct.UnpackDecodedItem* %320, i64 1
  %322 = icmp ult %struct.UnpackDecodedItem* %321, %8
  br i1 %322, label %30, label %323

323:                                              ; preds = %41, %319, %2
  %324 = phi i1 [ true, %2 ], [ true, %319 ], [ false, %41 ]
  ret i1 %324
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6Unpack16UnpackLargeBlockER16UnpackThreadData(%class.Unpack*, %struct.UnpackThreadData* dereferenceable(19192)) local_unnamed_addr #0 align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to %struct.UnpackFilter*
  %5 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 5
  %6 = load i8, i8* %5, align 8, !range !5
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %15

8:                                                ; preds = %2
  store i8 1, i8* %5, align 8
  %9 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 1
  %10 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 4
  %11 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7
  %12 = tail call zeroext i1 @_ZN6Unpack10ReadTablesER8BitInputR17UnpackBlockHeaderR17UnpackBlockTables(%class.Unpack* %0, %class.BitInput* dereferenceable(24) %9, %struct.UnpackBlockHeader* dereferenceable(20) %10, %struct.UnpackBlockTables* dereferenceable(19100) %11)
  br i1 %12, label %15, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 9
  store i8 1, i8* %14, align 4
  br label %838

15:                                               ; preds = %2, %8
  %16 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 1
  %17 = getelementptr inbounds %class.BitInput, %class.BitInput* %16, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 4, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 4, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = add nsw i32 %22, %20
  %24 = icmp sgt i32 %18, %23
  br i1 %24, label %25, label %27

25:                                               ; preds = %15
  %26 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 9
  store i8 1, i8* %26, align 4
  br label %838

27:                                               ; preds = %15
  %28 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 4, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = add nsw i32 %29, %22
  %31 = add nsw i32 %30, -1
  %32 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 8
  %33 = load i32, i32* %32, align 8
  %34 = add nsw i32 %33, -16
  %35 = icmp slt i32 %31, %34
  %36 = select i1 %35, i32 %31, i32 %34
  %37 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %38 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %39 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 1, i32 1
  %40 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 4, i32 1
  %41 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 11
  %42 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 19
  %43 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 27
  %44 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %45 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 1, i32 3
  %46 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 3
  %47 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 0
  %48 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 11
  %49 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 0
  %50 = bitcast <2 x i64>* %3 to i8*
  %51 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8
  %52 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8, i32 1
  %53 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 14
  %54 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %4, i64 0, i32 1
  %55 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %4, i64 0, i32 4
  %56 = getelementptr inbounds %class.Array.5, %class.Array.5* %51, i64 0, i32 0
  %57 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 3
  %58 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 0
  %59 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 3
  %60 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 0
  %61 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 3
  %62 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 0
  %63 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 2
  %64 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 3
  %65 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 1
  %66 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %67 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 1
  %68 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 0
  %69 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 1
  br label %70

70:                                               ; preds = %835, %27
  %71 = load i64, i64* %37, align 8
  %72 = load i64, i64* %38, align 8
  %73 = and i64 %72, %71
  store i64 %73, i64* %38, align 8
  %74 = load i32, i32* %17, align 8
  %75 = icmp slt i32 %74, %36
  br i1 %75, label %94, label %76

76:                                               ; preds = %70
  %77 = icmp slt i32 %74, %30
  br i1 %77, label %78, label %838

78:                                               ; preds = %76
  %79 = icmp eq i32 %74, %31
  br i1 %79, label %80, label %84

80:                                               ; preds = %78
  %81 = load i32, i32* %39, align 4
  %82 = load i32, i32* %40, align 4
  %83 = icmp slt i32 %81, %82
  br i1 %83, label %84, label %838

84:                                               ; preds = %80, %78
  %85 = icmp slt i32 %74, %34
  br i1 %85, label %89, label %86

86:                                               ; preds = %84
  %87 = load i8, i8* %41, align 2, !range !5
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %92, label %89

89:                                               ; preds = %86, %84
  %90 = load i32, i32* %32, align 8
  %91 = icmp slt i32 %74, %90
  br i1 %91, label %94, label %92

92:                                               ; preds = %86, %89
  %93 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 12
  store i8 1, i8* %93, align 1
  br label %838

94:                                               ; preds = %89, %70
  %95 = load i64, i64* %42, align 8
  %96 = sub i64 %95, %73
  %97 = and i64 %96, %71
  %98 = icmp ugt i64 %97, 4099
  %99 = icmp eq i64 %95, %73
  %100 = or i1 %99, %98
  br i1 %100, label %107, label %101

101:                                              ; preds = %94
  tail call void @_ZN6Unpack11UnpWriteBufEv(%class.Unpack* %0)
  %102 = load i64, i64* %43, align 8
  %103 = load i64, i64* %44, align 8
  %104 = icmp sgt i64 %102, %103
  br i1 %104, label %838, label %105

105:                                              ; preds = %101
  %106 = load i32, i32* %17, align 8
  br label %107

107:                                              ; preds = %105, %94
  %108 = phi i32 [ %106, %105 ], [ %74, %94 ]
  %109 = load i8*, i8** %45, align 8
  %110 = sext i32 %108 to i64
  %111 = getelementptr inbounds i8, i8* %109, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = shl nuw nsw i32 %113, 16
  %115 = add nsw i32 %108, 1
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i8, i8* %109, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = shl nuw nsw i32 %119, 8
  %121 = or i32 %120, %114
  %122 = add nsw i32 %108, 2
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %109, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = or i32 %121, %126
  %128 = load i32, i32* %39, align 4
  %129 = sub nsw i32 8, %128
  %130 = lshr i32 %127, %129
  %131 = and i32 %130, 65534
  %132 = load i32, i32* %46, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 1, i64 %133
  %135 = load i32, i32* %134, align 4
  %136 = icmp ult i32 %131, %135
  br i1 %136, label %137, label %149

137:                                              ; preds = %107
  %138 = sub i32 16, %132
  %139 = lshr i32 %131, %138
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 4, i64 %140
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = add i32 %128, %143
  %145 = lshr i32 %144, 3
  %146 = add i32 %145, %108
  store i32 %146, i32* %17, align 8
  %147 = and i32 %144, 7
  store i32 %147, i32* %39, align 4
  %148 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 5, i64 %140
  br label %180

149:                                              ; preds = %107, %153
  %150 = phi i32 [ %151, %153 ], [ %132, %107 ]
  %151 = add i32 %150, 1
  %152 = icmp ult i32 %151, 15
  br i1 %152, label %153, label %158

153:                                              ; preds = %149
  %154 = zext i32 %151 to i64
  %155 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 1, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = icmp ult i32 %131, %156
  br i1 %157, label %158, label %149

158:                                              ; preds = %149, %153
  %159 = phi i32 [ %151, %153 ], [ 15, %149 ]
  %160 = add i32 %159, %128
  %161 = lshr i32 %160, 3
  %162 = add i32 %161, %108
  store i32 %162, i32* %17, align 8
  %163 = and i32 %160, 7
  store i32 %163, i32* %39, align 4
  %164 = add nsw i32 %159, -1
  %165 = zext i32 %164 to i64
  %166 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 1, i64 %165
  %167 = load i32, i32* %166, align 4
  %168 = sub i32 %131, %167
  %169 = sub nuw nsw i32 16, %159
  %170 = lshr i32 %168, %169
  %171 = zext i32 %159 to i64
  %172 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 2, i64 %171
  %173 = load i32, i32* %172, align 4
  %174 = add i32 %170, %173
  %175 = load i32, i32* %47, align 4
  %176 = icmp ult i32 %174, %175
  %177 = select i1 %176, i32 %174, i32 0
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 0, i32 6, i64 %178
  br label %180

180:                                              ; preds = %137, %158
  %181 = phi i32 [ %147, %137 ], [ %163, %158 ]
  %182 = phi i32 [ %146, %137 ], [ %162, %158 ]
  %183 = phi i16* [ %148, %137 ], [ %179, %158 ]
  %184 = load i16, i16* %183, align 2
  %185 = zext i16 %184 to i32
  %186 = icmp ult i16 %184, 256
  br i1 %186, label %187, label %193

187:                                              ; preds = %180
  %188 = trunc i16 %184 to i8
  %189 = load i8*, i8** %66, align 8
  %190 = load i64, i64* %38, align 8
  %191 = add i64 %190, 1
  store i64 %191, i64* %38, align 8
  %192 = getelementptr inbounds i8, i8* %189, i64 %190
  store i8 %188, i8* %192, align 1
  br label %835

193:                                              ; preds = %180
  %194 = icmp ugt i16 %184, 261
  br i1 %194, label %195, label %511

195:                                              ; preds = %193
  %196 = add nsw i32 %185, -262
  %197 = icmp ult i32 %196, 8
  br i1 %197, label %198, label %200

198:                                              ; preds = %195
  %199 = add nsw i32 %185, -260
  br label %237

200:                                              ; preds = %195
  %201 = lshr i32 %196, 2
  %202 = add nsw i32 %201, -1
  %203 = and i32 %196, 3
  %204 = or i32 %203, 4
  %205 = shl i32 %204, %202
  %206 = add i32 %205, 2
  %207 = icmp eq i32 %202, 0
  br i1 %207, label %237, label %208

208:                                              ; preds = %200
  %209 = sext i32 %182 to i64
  %210 = getelementptr inbounds i8, i8* %109, i64 %209
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i32
  %213 = shl nuw nsw i32 %212, 16
  %214 = add nsw i32 %182, 1
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds i8, i8* %109, i64 %215
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i32
  %219 = shl nuw nsw i32 %218, 8
  %220 = or i32 %219, %213
  %221 = add nsw i32 %182, 2
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds i8, i8* %109, i64 %222
  %224 = load i8, i8* %223, align 1
  %225 = zext i8 %224 to i32
  %226 = or i32 %220, %225
  %227 = sub nuw nsw i32 8, %181
  %228 = lshr i32 %226, %227
  %229 = and i32 %228, 65535
  %230 = sub nsw i32 17, %201
  %231 = lshr i32 %229, %230
  %232 = add i32 %231, %206
  %233 = add nsw i32 %181, %202
  %234 = lshr i32 %233, 3
  %235 = add i32 %234, %182
  store i32 %235, i32* %17, align 8
  %236 = and i32 %233, 7
  store i32 %236, i32* %39, align 4
  br label %237

237:                                              ; preds = %198, %200, %208
  %238 = phi i32 [ %236, %208 ], [ %181, %200 ], [ %181, %198 ]
  %239 = phi i32 [ %235, %208 ], [ %182, %200 ], [ %182, %198 ]
  %240 = phi i32 [ %232, %208 ], [ %206, %200 ], [ %199, %198 ]
  %241 = sext i32 %239 to i64
  %242 = getelementptr inbounds i8, i8* %109, i64 %241
  %243 = load i8, i8* %242, align 1
  %244 = zext i8 %243 to i32
  %245 = shl nuw nsw i32 %244, 16
  %246 = add nsw i32 %239, 1
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds i8, i8* %109, i64 %247
  %249 = load i8, i8* %248, align 1
  %250 = zext i8 %249 to i32
  %251 = shl nuw nsw i32 %250, 8
  %252 = or i32 %251, %245
  %253 = add nsw i32 %239, 2
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds i8, i8* %109, i64 %254
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i32
  %258 = or i32 %252, %257
  %259 = sub nuw nsw i32 8, %238
  %260 = lshr i32 %258, %259
  %261 = and i32 %260, 65534
  %262 = load i32, i32* %59, align 4
  %263 = zext i32 %262 to i64
  %264 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 1, i64 %263
  %265 = load i32, i32* %264, align 4
  %266 = icmp ult i32 %261, %265
  br i1 %266, label %267, label %279

267:                                              ; preds = %237
  %268 = sub i32 16, %262
  %269 = lshr i32 %261, %268
  %270 = zext i32 %269 to i64
  %271 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 4, i64 %270
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i32
  %274 = add nuw nsw i32 %238, %273
  %275 = lshr i32 %274, 3
  %276 = add i32 %275, %239
  store i32 %276, i32* %17, align 8
  %277 = and i32 %274, 7
  store i32 %277, i32* %39, align 4
  %278 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 5, i64 %270
  br label %310

279:                                              ; preds = %237, %283
  %280 = phi i32 [ %281, %283 ], [ %262, %237 ]
  %281 = add i32 %280, 1
  %282 = icmp ult i32 %281, 15
  br i1 %282, label %283, label %288

283:                                              ; preds = %279
  %284 = zext i32 %281 to i64
  %285 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 1, i64 %284
  %286 = load i32, i32* %285, align 4
  %287 = icmp ult i32 %261, %286
  br i1 %287, label %288, label %279

288:                                              ; preds = %279, %283
  %289 = phi i32 [ %281, %283 ], [ 15, %279 ]
  %290 = add i32 %289, %238
  %291 = lshr i32 %290, 3
  %292 = add i32 %291, %239
  store i32 %292, i32* %17, align 8
  %293 = and i32 %290, 7
  store i32 %293, i32* %39, align 4
  %294 = add nsw i32 %289, -1
  %295 = zext i32 %294 to i64
  %296 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 1, i64 %295
  %297 = load i32, i32* %296, align 4
  %298 = sub i32 %261, %297
  %299 = sub nuw nsw i32 16, %289
  %300 = lshr i32 %298, %299
  %301 = zext i32 %289 to i64
  %302 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 2, i64 %301
  %303 = load i32, i32* %302, align 4
  %304 = add i32 %300, %303
  %305 = load i32, i32* %60, align 4
  %306 = icmp ult i32 %304, %305
  %307 = select i1 %306, i32 %304, i32 0
  %308 = zext i32 %307 to i64
  %309 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 1, i32 6, i64 %308
  br label %310

310:                                              ; preds = %267, %288
  %311 = phi i32 [ %277, %267 ], [ %293, %288 ]
  %312 = phi i32 [ %276, %267 ], [ %292, %288 ]
  %313 = phi i16* [ %278, %267 ], [ %309, %288 ]
  %314 = load i16, i16* %313, align 2
  %315 = zext i16 %314 to i32
  %316 = icmp ult i16 %314, 4
  br i1 %316, label %317, label %319

317:                                              ; preds = %310
  %318 = add nuw nsw i32 %315, 1
  br label %505

319:                                              ; preds = %310
  %320 = lshr i32 %315, 1
  %321 = add nsw i32 %320, -1
  %322 = and i32 %315, 1
  %323 = or i32 %322, 2
  %324 = shl i32 %323, %321
  %325 = add i32 %324, 1
  %326 = icmp eq i32 %321, 0
  br i1 %326, label %495, label %327

327:                                              ; preds = %319
  %328 = icmp ugt i32 %321, 3
  br i1 %328, label %329, label %453

329:                                              ; preds = %327
  %330 = icmp eq i32 %321, 4
  br i1 %330, label %375, label %331

331:                                              ; preds = %329
  %332 = sext i32 %312 to i64
  %333 = getelementptr inbounds i8, i8* %109, i64 %332
  %334 = load i8, i8* %333, align 1
  %335 = zext i8 %334 to i32
  %336 = shl nuw i32 %335, 24
  %337 = add nsw i32 %312, 1
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds i8, i8* %109, i64 %338
  %340 = load i8, i8* %339, align 1
  %341 = zext i8 %340 to i32
  %342 = shl nuw nsw i32 %341, 16
  %343 = or i32 %342, %336
  %344 = add nsw i32 %312, 2
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds i8, i8* %109, i64 %345
  %347 = load i8, i8* %346, align 1
  %348 = zext i8 %347 to i32
  %349 = shl nuw nsw i32 %348, 8
  %350 = or i32 %343, %349
  %351 = add nsw i32 %312, 3
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds i8, i8* %109, i64 %352
  %354 = load i8, i8* %353, align 1
  %355 = zext i8 %354 to i32
  %356 = or i32 %350, %355
  %357 = shl i32 %356, %311
  %358 = add nsw i32 %312, 4
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds i8, i8* %109, i64 %359
  %361 = load i8, i8* %360, align 1
  %362 = zext i8 %361 to i32
  %363 = sub nuw nsw i32 8, %311
  %364 = lshr i32 %362, %363
  %365 = or i32 %357, %364
  %366 = sub nsw i32 37, %320
  %367 = lshr i32 %365, %366
  %368 = shl i32 %367, 4
  %369 = add i32 %368, %325
  %370 = add nsw i32 %320, -5
  %371 = add nsw i32 %370, %311
  %372 = lshr i32 %371, 3
  %373 = add i32 %372, %312
  store i32 %373, i32* %17, align 8
  %374 = and i32 %371, 7
  store i32 %374, i32* %39, align 4
  br label %375

375:                                              ; preds = %329, %331
  %376 = phi i32 [ %374, %331 ], [ %311, %329 ]
  %377 = phi i32 [ %373, %331 ], [ %312, %329 ]
  %378 = phi i32 [ %369, %331 ], [ %325, %329 ]
  %379 = sext i32 %377 to i64
  %380 = getelementptr inbounds i8, i8* %109, i64 %379
  %381 = load i8, i8* %380, align 1
  %382 = zext i8 %381 to i32
  %383 = shl nuw nsw i32 %382, 16
  %384 = add nsw i32 %377, 1
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds i8, i8* %109, i64 %385
  %387 = load i8, i8* %386, align 1
  %388 = zext i8 %387 to i32
  %389 = shl nuw nsw i32 %388, 8
  %390 = or i32 %389, %383
  %391 = add nsw i32 %377, 2
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds i8, i8* %109, i64 %392
  %394 = load i8, i8* %393, align 1
  %395 = zext i8 %394 to i32
  %396 = or i32 %390, %395
  %397 = sub nuw nsw i32 8, %376
  %398 = lshr i32 %396, %397
  %399 = and i32 %398, 65534
  %400 = load i32, i32* %61, align 4
  %401 = zext i32 %400 to i64
  %402 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 1, i64 %401
  %403 = load i32, i32* %402, align 4
  %404 = icmp ult i32 %399, %403
  br i1 %404, label %405, label %417

405:                                              ; preds = %375
  %406 = sub i32 16, %400
  %407 = lshr i32 %399, %406
  %408 = zext i32 %407 to i64
  %409 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 4, i64 %408
  %410 = load i8, i8* %409, align 1
  %411 = zext i8 %410 to i32
  %412 = add nuw nsw i32 %376, %411
  %413 = lshr i32 %412, 3
  %414 = add i32 %413, %377
  store i32 %414, i32* %17, align 8
  %415 = and i32 %412, 7
  store i32 %415, i32* %39, align 4
  %416 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 5, i64 %408
  br label %448

417:                                              ; preds = %375, %421
  %418 = phi i32 [ %419, %421 ], [ %400, %375 ]
  %419 = add i32 %418, 1
  %420 = icmp ult i32 %419, 15
  br i1 %420, label %421, label %426

421:                                              ; preds = %417
  %422 = zext i32 %419 to i64
  %423 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 1, i64 %422
  %424 = load i32, i32* %423, align 4
  %425 = icmp ult i32 %399, %424
  br i1 %425, label %426, label %417

426:                                              ; preds = %417, %421
  %427 = phi i32 [ %419, %421 ], [ 15, %417 ]
  %428 = add i32 %427, %376
  %429 = lshr i32 %428, 3
  %430 = add i32 %429, %377
  store i32 %430, i32* %17, align 8
  %431 = and i32 %428, 7
  store i32 %431, i32* %39, align 4
  %432 = add nsw i32 %427, -1
  %433 = zext i32 %432 to i64
  %434 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 1, i64 %433
  %435 = load i32, i32* %434, align 4
  %436 = sub i32 %399, %435
  %437 = sub nuw nsw i32 16, %427
  %438 = lshr i32 %436, %437
  %439 = zext i32 %427 to i64
  %440 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 2, i64 %439
  %441 = load i32, i32* %440, align 4
  %442 = add i32 %438, %441
  %443 = load i32, i32* %62, align 4
  %444 = icmp ult i32 %442, %443
  %445 = select i1 %444, i32 %442, i32 0
  %446 = zext i32 %445 to i64
  %447 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 2, i32 6, i64 %446
  br label %448

448:                                              ; preds = %405, %426
  %449 = phi i16* [ %416, %405 ], [ %447, %426 ]
  %450 = load i16, i16* %449, align 2
  %451 = zext i16 %450 to i32
  %452 = add i32 %378, %451
  br label %495

453:                                              ; preds = %327
  %454 = sext i32 %312 to i64
  %455 = getelementptr inbounds i8, i8* %109, i64 %454
  %456 = load i8, i8* %455, align 1
  %457 = zext i8 %456 to i32
  %458 = shl nuw i32 %457, 24
  %459 = add nsw i32 %312, 1
  %460 = sext i32 %459 to i64
  %461 = getelementptr inbounds i8, i8* %109, i64 %460
  %462 = load i8, i8* %461, align 1
  %463 = zext i8 %462 to i32
  %464 = shl nuw nsw i32 %463, 16
  %465 = or i32 %464, %458
  %466 = add nsw i32 %312, 2
  %467 = sext i32 %466 to i64
  %468 = getelementptr inbounds i8, i8* %109, i64 %467
  %469 = load i8, i8* %468, align 1
  %470 = zext i8 %469 to i32
  %471 = shl nuw nsw i32 %470, 8
  %472 = or i32 %465, %471
  %473 = add nsw i32 %312, 3
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds i8, i8* %109, i64 %474
  %476 = load i8, i8* %475, align 1
  %477 = zext i8 %476 to i32
  %478 = or i32 %472, %477
  %479 = shl i32 %478, %311
  %480 = add nsw i32 %312, 4
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds i8, i8* %109, i64 %481
  %483 = load i8, i8* %482, align 1
  %484 = zext i8 %483 to i32
  %485 = sub nuw nsw i32 8, %311
  %486 = lshr i32 %484, %485
  %487 = or i32 %479, %486
  %488 = sub nuw nsw i32 33, %320
  %489 = lshr i32 %487, %488
  %490 = add i32 %489, %325
  %491 = add nuw nsw i32 %311, %321
  %492 = lshr i32 %491, 3
  %493 = add i32 %492, %312
  store i32 %493, i32* %17, align 8
  %494 = and i32 %491, 7
  store i32 %494, i32* %39, align 4
  br label %495

495:                                              ; preds = %319, %448, %453
  %496 = phi i32 [ %452, %448 ], [ %490, %453 ], [ %325, %319 ]
  %497 = icmp ugt i32 %496, 256
  br i1 %497, label %498, label %505

498:                                              ; preds = %495
  %499 = add i32 %240, 1
  %500 = icmp ugt i32 %496, 8192
  br i1 %500, label %501, label %505

501:                                              ; preds = %498
  %502 = icmp ugt i32 %496, 262144
  %503 = select i1 %502, i32 3, i32 2
  %504 = add i32 %503, %240
  br label %505

505:                                              ; preds = %317, %501, %498, %495
  %506 = phi i32 [ %496, %498 ], [ %496, %495 ], [ %496, %501 ], [ %318, %317 ]
  %507 = phi i32 [ %499, %498 ], [ %240, %495 ], [ %504, %501 ], [ %240, %317 ]
  %508 = load i32, i32* %63, align 8
  store i32 %508, i32* %64, align 4
  %509 = load i32, i32* %65, align 4
  store i32 %509, i32* %63, align 8
  %510 = load i32, i32* %49, align 8
  store i32 %510, i32* %65, align 4
  store i32 %506, i32* %49, align 8
  store i32 %507, i32* %48, align 4
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %507, i32 %506)
  br label %835

511:                                              ; preds = %193
  switch i16 %184, label %557 [
    i16 256, label %512
    i16 257, label %552
  ]

512:                                              ; preds = %511
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %50) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %50, i8 -86, i64 16, i1 false)
  %513 = call zeroext i1 @_ZN6Unpack10ReadFilterER8BitInputR12UnpackFilter(%class.Unpack* %0, %class.BitInput* dereferenceable(24) %16, %struct.UnpackFilter* nonnull dereferenceable(16) %4)
  br i1 %513, label %514, label %550

514:                                              ; preds = %512
  %515 = load i64, i64* %52, align 8
  %516 = icmp ugt i64 %515, 8191
  br i1 %516, label %517, label %521

517:                                              ; preds = %514
  tail call void @_ZN6Unpack11UnpWriteBufEv(%class.Unpack* %0) #11
  %518 = load i64, i64* %52, align 8
  %519 = icmp ugt i64 %518, 8191
  br i1 %519, label %520, label %521

520:                                              ; preds = %517
  store i64 0, i64* %52, align 8
  br label %521

521:                                              ; preds = %520, %517, %514
  %522 = load i64, i64* %53, align 8
  %523 = load i64, i64* %38, align 8
  %524 = icmp eq i64 %522, %523
  br i1 %524, label %525, label %529

525:                                              ; preds = %521
  %526 = load i32, i32* %54, align 4
  %527 = zext i32 %526 to i64
  %528 = load i64, i64* %37, align 8
  br label %537

529:                                              ; preds = %521
  %530 = sub i64 %522, %523
  %531 = load i64, i64* %37, align 8
  %532 = and i64 %531, %530
  %533 = load i32, i32* %54, align 4
  %534 = zext i32 %533 to i64
  %535 = icmp ule i64 %532, %534
  %536 = zext i1 %535 to i8
  br label %537

537:                                              ; preds = %525, %529
  %538 = phi i64 [ %528, %525 ], [ %531, %529 ]
  %539 = phi i64 [ %527, %525 ], [ %534, %529 ]
  %540 = phi i8 [ 0, %525 ], [ %536, %529 ]
  store i8 %540, i8* %55, align 1
  %541 = add i64 %539, %523
  %542 = and i64 %538, %541
  %543 = trunc i64 %542 to i32
  store i32 %543, i32* %54, align 4
  %544 = load <2 x i64>, <2 x i64>* %3, align 16
  tail call void @_ZN5ArrayI12UnpackFilterE3AddEm(%class.Array.5* %51, i64 1) #11
  %545 = load i64, i64* %52, align 8
  %546 = add i64 %545, -1
  %547 = load %struct.UnpackFilter*, %struct.UnpackFilter** %56, align 8
  %548 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %547, i64 %546
  %549 = bitcast %struct.UnpackFilter* %548 to <2 x i64>*
  store <2 x i64> %544, <2 x i64>* %549, align 4
  br label %550

550:                                              ; preds = %512, %537
  %551 = phi i32 [ 2, %537 ], [ 3, %512 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %50) #11
  br label %835

552:                                              ; preds = %511
  %553 = load i32, i32* %48, align 4
  %554 = icmp eq i32 %553, 0
  br i1 %554, label %835, label %555

555:                                              ; preds = %552
  %556 = load i32, i32* %49, align 8
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %553, i32 %556)
  br label %835

557:                                              ; preds = %511
  %558 = add nsw i32 %185, -258
  %559 = zext i32 %558 to i64
  %560 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %559
  %561 = load i32, i32* %560, align 4
  %562 = icmp eq i32 %558, 0
  br i1 %562, label %686, label %563

563:                                              ; preds = %557
  %564 = add nsw i32 %185, -259
  %565 = zext i32 %564 to i64
  %566 = add nuw nsw i64 %565, 1
  %567 = icmp ult i64 %566, 8
  br i1 %567, label %568, label %588

568:                                              ; preds = %684, %602, %588, %563
  %569 = phi i64 [ %559, %602 ], [ %559, %588 ], [ %559, %563 ], [ %614, %684 ]
  %570 = trunc i64 %569 to i32
  %571 = add i32 %570, -1
  %572 = and i32 %570, 3
  %573 = icmp eq i32 %572, 0
  br i1 %573, label %585, label %574

574:                                              ; preds = %568, %574
  %575 = phi i64 [ %582, %574 ], [ %569, %568 ]
  %576 = phi i32 [ %583, %574 ], [ %572, %568 ]
  %577 = add i64 %575, 4294967295
  %578 = and i64 %577, 4294967295
  %579 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %578
  %580 = load i32, i32* %579, align 4
  %581 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %575
  store i32 %580, i32* %581, align 4
  %582 = add nsw i64 %575, -1
  %583 = add i32 %576, -1
  %584 = icmp eq i32 %583, 0
  br i1 %584, label %585, label %574, !llvm.loop !15

585:                                              ; preds = %574, %568
  %586 = phi i64 [ %569, %568 ], [ %582, %574 ]
  %587 = icmp ult i32 %571, 3
  br i1 %587, label %686, label %807

588:                                              ; preds = %563
  %589 = add nsw i32 %185, -259
  %590 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %559
  %591 = ptrtoint i32* %590 to i64
  %592 = zext i32 %589 to i64
  %593 = shl nuw nsw i64 %592, 2
  %594 = icmp ugt i64 %593, %591
  %595 = zext i32 %589 to i64
  %596 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %595
  %597 = ptrtoint i32* %596 to i64
  %598 = zext i32 %589 to i64
  %599 = shl nuw nsw i64 %598, 2
  %600 = icmp ugt i64 %599, %597
  %601 = or i1 %594, %600
  br i1 %601, label %568, label %602

602:                                              ; preds = %588
  %603 = add nsw i32 %185, -259
  %604 = zext i32 %603 to i64
  %605 = sub nsw i64 %559, %604
  %606 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %605
  %607 = getelementptr i32, i32* %67, i64 %559
  %608 = getelementptr i32, i32* %69, i64 %604
  %609 = icmp ult i32* %606, %608
  %610 = icmp ult i32* %68, %607
  %611 = and i1 %609, %610
  br i1 %611, label %568, label %612

612:                                              ; preds = %602
  %613 = and i64 %566, 8589934584
  %614 = sub nsw i64 %559, %613
  %615 = add nsw i64 %613, -8
  %616 = lshr exact i64 %615, 3
  %617 = add nuw nsw i64 %616, 1
  %618 = and i64 %617, 1
  %619 = icmp eq i64 %615, 0
  br i1 %619, label %663, label %620

620:                                              ; preds = %612
  %621 = sub nuw nsw i64 %617, %618
  br label %622

622:                                              ; preds = %622, %620
  %623 = phi i64 [ 0, %620 ], [ %660, %622 ]
  %624 = phi i64 [ %621, %620 ], [ %661, %622 ]
  %625 = sub i64 %559, %623
  %626 = trunc i64 %623 to i32
  %627 = xor i32 %626, -1
  %628 = add i32 %558, %627
  %629 = zext i32 %628 to i64
  %630 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %629
  %631 = getelementptr inbounds i32, i32* %630, i64 -3
  %632 = bitcast i32* %631 to <4 x i32>*
  %633 = load <4 x i32>, <4 x i32>* %632, align 4, !alias.scope !16
  %634 = getelementptr inbounds i32, i32* %630, i64 -7
  %635 = bitcast i32* %634 to <4 x i32>*
  %636 = load <4 x i32>, <4 x i32>* %635, align 4, !alias.scope !16
  %637 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %625
  %638 = getelementptr inbounds i32, i32* %637, i64 -3
  %639 = bitcast i32* %638 to <4 x i32>*
  store <4 x i32> %633, <4 x i32>* %639, align 4, !alias.scope !19, !noalias !16
  %640 = getelementptr inbounds i32, i32* %637, i64 -7
  %641 = bitcast i32* %640 to <4 x i32>*
  store <4 x i32> %636, <4 x i32>* %641, align 4, !alias.scope !19, !noalias !16
  %642 = or i64 %623, 8
  %643 = sub i64 %559, %642
  %644 = trunc i64 %642 to i32
  %645 = xor i32 %644, -1
  %646 = add i32 %558, %645
  %647 = zext i32 %646 to i64
  %648 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %647
  %649 = getelementptr inbounds i32, i32* %648, i64 -3
  %650 = bitcast i32* %649 to <4 x i32>*
  %651 = load <4 x i32>, <4 x i32>* %650, align 4, !alias.scope !16
  %652 = getelementptr inbounds i32, i32* %648, i64 -7
  %653 = bitcast i32* %652 to <4 x i32>*
  %654 = load <4 x i32>, <4 x i32>* %653, align 4, !alias.scope !16
  %655 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %643
  %656 = getelementptr inbounds i32, i32* %655, i64 -3
  %657 = bitcast i32* %656 to <4 x i32>*
  store <4 x i32> %651, <4 x i32>* %657, align 4, !alias.scope !19, !noalias !16
  %658 = getelementptr inbounds i32, i32* %655, i64 -7
  %659 = bitcast i32* %658 to <4 x i32>*
  store <4 x i32> %654, <4 x i32>* %659, align 4, !alias.scope !19, !noalias !16
  %660 = add i64 %623, 16
  %661 = add i64 %624, -2
  %662 = icmp eq i64 %661, 0
  br i1 %662, label %663, label %622, !llvm.loop !21

663:                                              ; preds = %622, %612
  %664 = phi i64 [ 0, %612 ], [ %660, %622 ]
  %665 = icmp eq i64 %618, 0
  br i1 %665, label %684, label %666

666:                                              ; preds = %663
  %667 = sub i64 %559, %664
  %668 = trunc i64 %664 to i32
  %669 = xor i32 %668, -1
  %670 = add i32 %558, %669
  %671 = zext i32 %670 to i64
  %672 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %671
  %673 = getelementptr inbounds i32, i32* %672, i64 -3
  %674 = bitcast i32* %673 to <4 x i32>*
  %675 = load <4 x i32>, <4 x i32>* %674, align 4, !alias.scope !16
  %676 = getelementptr inbounds i32, i32* %672, i64 -7
  %677 = bitcast i32* %676 to <4 x i32>*
  %678 = load <4 x i32>, <4 x i32>* %677, align 4, !alias.scope !16
  %679 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %667
  %680 = getelementptr inbounds i32, i32* %679, i64 -3
  %681 = bitcast i32* %680 to <4 x i32>*
  store <4 x i32> %675, <4 x i32>* %681, align 4, !alias.scope !19, !noalias !16
  %682 = getelementptr inbounds i32, i32* %679, i64 -7
  %683 = bitcast i32* %682 to <4 x i32>*
  store <4 x i32> %678, <4 x i32>* %683, align 4, !alias.scope !19, !noalias !16
  br label %684

684:                                              ; preds = %663, %666
  %685 = icmp eq i64 %566, %613
  br i1 %685, label %686, label %568

686:                                              ; preds = %585, %807, %684, %557
  store i32 %561, i32* %49, align 8
  %687 = load i8*, i8** %45, align 8
  %688 = load i32, i32* %17, align 8
  %689 = sext i32 %688 to i64
  %690 = getelementptr inbounds i8, i8* %687, i64 %689
  %691 = load i8, i8* %690, align 1
  %692 = zext i8 %691 to i32
  %693 = shl nuw nsw i32 %692, 16
  %694 = add nsw i32 %688, 1
  %695 = sext i32 %694 to i64
  %696 = getelementptr inbounds i8, i8* %687, i64 %695
  %697 = load i8, i8* %696, align 1
  %698 = zext i8 %697 to i32
  %699 = shl nuw nsw i32 %698, 8
  %700 = or i32 %699, %693
  %701 = add nsw i32 %688, 2
  %702 = sext i32 %701 to i64
  %703 = getelementptr inbounds i8, i8* %687, i64 %702
  %704 = load i8, i8* %703, align 1
  %705 = zext i8 %704 to i32
  %706 = or i32 %700, %705
  %707 = load i32, i32* %39, align 4
  %708 = sub nsw i32 8, %707
  %709 = lshr i32 %706, %708
  %710 = and i32 %709, 65534
  %711 = load i32, i32* %57, align 4
  %712 = zext i32 %711 to i64
  %713 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 1, i64 %712
  %714 = load i32, i32* %713, align 4
  %715 = icmp ult i32 %710, %714
  br i1 %715, label %716, label %728

716:                                              ; preds = %686
  %717 = sub i32 16, %711
  %718 = lshr i32 %710, %717
  %719 = zext i32 %718 to i64
  %720 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 4, i64 %719
  %721 = load i8, i8* %720, align 1
  %722 = zext i8 %721 to i32
  %723 = add i32 %707, %722
  %724 = lshr i32 %723, 3
  %725 = add i32 %724, %688
  store i32 %725, i32* %17, align 8
  %726 = and i32 %723, 7
  store i32 %726, i32* %39, align 4
  %727 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 5, i64 %719
  br label %759

728:                                              ; preds = %686, %732
  %729 = phi i32 [ %730, %732 ], [ %711, %686 ]
  %730 = add i32 %729, 1
  %731 = icmp ult i32 %730, 15
  br i1 %731, label %732, label %737

732:                                              ; preds = %728
  %733 = zext i32 %730 to i64
  %734 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 1, i64 %733
  %735 = load i32, i32* %734, align 4
  %736 = icmp ult i32 %710, %735
  br i1 %736, label %737, label %728

737:                                              ; preds = %728, %732
  %738 = phi i32 [ %730, %732 ], [ 15, %728 ]
  %739 = add i32 %738, %707
  %740 = lshr i32 %739, 3
  %741 = add i32 %740, %688
  store i32 %741, i32* %17, align 8
  %742 = and i32 %739, 7
  store i32 %742, i32* %39, align 4
  %743 = add nsw i32 %738, -1
  %744 = zext i32 %743 to i64
  %745 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 1, i64 %744
  %746 = load i32, i32* %745, align 4
  %747 = sub i32 %710, %746
  %748 = sub nuw nsw i32 16, %738
  %749 = lshr i32 %747, %748
  %750 = zext i32 %738 to i64
  %751 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 2, i64 %750
  %752 = load i32, i32* %751, align 4
  %753 = add i32 %749, %752
  %754 = load i32, i32* %58, align 4
  %755 = icmp ult i32 %753, %754
  %756 = select i1 %755, i32 %753, i32 0
  %757 = zext i32 %756 to i64
  %758 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %1, i64 0, i32 7, i32 3, i32 6, i64 %757
  br label %759

759:                                              ; preds = %716, %737
  %760 = phi i32 [ %726, %716 ], [ %742, %737 ]
  %761 = phi i32 [ %725, %716 ], [ %741, %737 ]
  %762 = phi i16* [ %727, %716 ], [ %758, %737 ]
  %763 = load i16, i16* %762, align 2
  %764 = zext i16 %763 to i32
  %765 = icmp ult i16 %763, 8
  br i1 %765, label %766, label %768

766:                                              ; preds = %759
  %767 = add nuw nsw i32 %764, 2
  br label %805

768:                                              ; preds = %759
  %769 = lshr i32 %764, 2
  %770 = add nsw i32 %769, -1
  %771 = and i32 %764, 3
  %772 = or i32 %771, 4
  %773 = shl i32 %772, %770
  %774 = add i32 %773, 2
  %775 = icmp eq i32 %770, 0
  br i1 %775, label %805, label %776

776:                                              ; preds = %768
  %777 = sext i32 %761 to i64
  %778 = getelementptr inbounds i8, i8* %687, i64 %777
  %779 = load i8, i8* %778, align 1
  %780 = zext i8 %779 to i32
  %781 = shl nuw nsw i32 %780, 16
  %782 = add nsw i32 %761, 1
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds i8, i8* %687, i64 %783
  %785 = load i8, i8* %784, align 1
  %786 = zext i8 %785 to i32
  %787 = shl nuw nsw i32 %786, 8
  %788 = or i32 %787, %781
  %789 = add nsw i32 %761, 2
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds i8, i8* %687, i64 %790
  %792 = load i8, i8* %791, align 1
  %793 = zext i8 %792 to i32
  %794 = or i32 %788, %793
  %795 = sub nuw nsw i32 8, %760
  %796 = lshr i32 %794, %795
  %797 = and i32 %796, 65535
  %798 = sub nsw i32 17, %769
  %799 = lshr i32 %797, %798
  %800 = add i32 %799, %774
  %801 = add nsw i32 %760, %770
  %802 = lshr i32 %801, 3
  %803 = add i32 %802, %761
  store i32 %803, i32* %17, align 8
  %804 = and i32 %801, 7
  store i32 %804, i32* %39, align 4
  br label %805

805:                                              ; preds = %766, %768, %776
  %806 = phi i32 [ %800, %776 ], [ %774, %768 ], [ %767, %766 ]
  store i32 %806, i32* %48, align 4
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %806, i32 %561)
  br label %835

807:                                              ; preds = %585, %807
  %808 = phi i64 [ %834, %807 ], [ %586, %585 ]
  %809 = add i64 %808, 4294967295
  %810 = and i64 %809, 4294967295
  %811 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %810
  %812 = load i32, i32* %811, align 4
  %813 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %808
  store i32 %812, i32* %813, align 4
  %814 = add nsw i64 %808, -1
  %815 = add i64 %808, 4294967294
  %816 = and i64 %815, 4294967295
  %817 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %816
  %818 = load i32, i32* %817, align 4
  %819 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %814
  store i32 %818, i32* %819, align 4
  %820 = add nsw i64 %808, -2
  %821 = add i64 %808, 4294967293
  %822 = and i64 %821, 4294967295
  %823 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %822
  %824 = load i32, i32* %823, align 4
  %825 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %820
  store i32 %824, i32* %825, align 4
  %826 = add nsw i64 %808, -3
  %827 = trunc i64 %826 to i32
  %828 = add i32 %827, -1
  %829 = zext i32 %828 to i64
  %830 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %829
  %831 = load i32, i32* %830, align 4
  %832 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %826
  store i32 %831, i32* %832, align 4
  %833 = icmp eq i32 %828, 0
  %834 = add nsw i64 %808, -4
  br i1 %833, label %686, label %807, !llvm.loop !22

835:                                              ; preds = %555, %552, %805, %550, %505, %187
  %836 = phi i32 [ 2, %187 ], [ 2, %505 ], [ %551, %550 ], [ 2, %805 ], [ 2, %552 ], [ 2, %555 ]
  %837 = icmp eq i32 %836, 3
  br i1 %837, label %838, label %70

838:                                              ; preds = %101, %80, %76, %835, %92, %25, %13
  %839 = phi i1 [ false, %25 ], [ false, %13 ], [ true, %92 ], [ true, %835 ], [ true, %76 ], [ true, %80 ], [ false, %101 ]
  ret i1 %839
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack11UnpWriteBufEv(%class.Unpack*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 14
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %5 = load i64, i64* %4, align 8
  %6 = sub i64 %5, %3
  %7 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %8 = load i64, i64* %7, align 8
  %9 = and i64 %6, %8
  %10 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8
  %11 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %212, label %14

14:                                               ; preds = %1
  %15 = getelementptr inbounds %class.Array.5, %class.Array.5* %10, i64 0, i32 0
  %16 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 6
  %17 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 6, i32 2
  %18 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 6, i32 1
  %19 = getelementptr inbounds %class.Array, %class.Array* %16, i64 0, i32 0
  %20 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 22
  %21 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 21
  %22 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %23 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 72
  %24 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %25 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 26
  %26 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 27
  br label %27

27:                                               ; preds = %14, %166
  %28 = phi i64 [ 0, %14 ], [ %169, %166 ]
  %29 = phi i64 [ %9, %14 ], [ %168, %166 ]
  %30 = phi i64 [ %3, %14 ], [ %167, %166 ]
  %31 = load %struct.UnpackFilter*, %struct.UnpackFilter** %15, align 8
  %32 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %31, i64 %28
  %33 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %32, i64 0, i32 0
  %34 = load i8, i8* %33, align 4
  %35 = icmp eq i8 %34, 8
  br i1 %35, label %166, label %36

36:                                               ; preds = %27
  %37 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %31, i64 %28, i32 4
  %38 = load i8, i8* %37, align 1, !range !5
  %39 = icmp eq i8 %38, 0
  %40 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %31, i64 %28, i32 1
  %41 = load i32, i32* %40, align 4
  br i1 %39, label %50, label %42

42:                                               ; preds = %36
  %43 = zext i32 %41 to i64
  %44 = load i64, i64* %2, align 8
  %45 = sub i64 %43, %44
  %46 = load i64, i64* %7, align 8
  %47 = and i64 %45, %46
  %48 = icmp ugt i64 %47, %9
  br i1 %48, label %166, label %49

49:                                               ; preds = %42
  store i8 0, i8* %37, align 1
  br label %166

50:                                               ; preds = %36
  %51 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %31, i64 %28, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %41 to i64
  %54 = sub i64 %53, %30
  %55 = load i64, i64* %7, align 8
  %56 = and i64 %55, %54
  %57 = icmp ult i64 %56, %29
  br i1 %57, label %58, label %166

58:                                               ; preds = %50
  %59 = icmp eq i64 %30, %53
  br i1 %59, label %65, label %60

60:                                               ; preds = %58
  tail call void @_ZN6Unpack12UnpWriteAreaEmm(%class.Unpack* %0, i64 %30, i64 %53)
  %61 = load i64, i64* %4, align 8
  %62 = sub i64 %61, %53
  %63 = load i64, i64* %7, align 8
  %64 = and i64 %62, %63
  br label %65

65:                                               ; preds = %58, %60
  %66 = phi i64 [ %63, %60 ], [ %55, %58 ]
  %67 = phi i64 [ %53, %60 ], [ %30, %58 ]
  %68 = phi i64 [ %64, %60 ], [ %29, %58 ]
  %69 = zext i32 %52 to i64
  %70 = icmp ult i64 %68, %69
  br i1 %70, label %149, label %71

71:                                               ; preds = %65
  %72 = icmp eq i32 %52, 0
  br i1 %72, label %166, label %73

73:                                               ; preds = %71
  %74 = add i32 %52, %41
  %75 = trunc i64 %66 to i32
  %76 = and i32 %74, %75
  %77 = load i64, i64* %17, align 8
  %78 = icmp ult i64 %77, %69
  br i1 %78, label %79, label %82

79:                                               ; preds = %73
  %80 = load i64, i64* %18, align 8
  %81 = sub i64 %69, %80
  tail call void @_ZN5ArrayIhE3AddEm(%class.Array* %16, i64 %81) #11
  br label %83

82:                                               ; preds = %73
  store i64 %69, i64* %18, align 8
  br label %83

83:                                               ; preds = %79, %82
  %84 = load i8*, i8** %19, align 8
  %85 = add i32 %76, -1
  %86 = icmp ult i32 %85, %41
  br i1 %86, label %101, label %87

87:                                               ; preds = %83
  %88 = load i8, i8* %20, align 8, !range !5
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %98, label %90

90:                                               ; preds = %87, %90
  %91 = phi i64 [ %96, %90 ], [ 0, %87 ]
  %92 = add nuw nsw i64 %91, %53
  %93 = tail call dereferenceable(1) i8* @_ZN16FragmentedWindowixEm(%class.FragmentedWindow* %21, i64 %92) #11
  %94 = load i8, i8* %93, align 1
  %95 = getelementptr inbounds i8, i8* %84, i64 %91
  store i8 %94, i8* %95, align 1
  %96 = add nuw nsw i64 %91, 1
  %97 = icmp eq i64 %96, %69
  br i1 %97, label %134, label %90

98:                                               ; preds = %87
  %99 = load i8*, i8** %22, align 8
  %100 = getelementptr inbounds i8, i8* %99, i64 %53
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 %100, i64 %69, i1 false)
  br label %134

101:                                              ; preds = %83
  %102 = load i64, i64* %23, align 8
  %103 = sub i64 %102, %53
  %104 = load i8, i8* %20, align 8, !range !5
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %128, label %106

106:                                              ; preds = %101
  %107 = icmp eq i64 %103, 0
  br i1 %107, label %118, label %108

108:                                              ; preds = %106, %108
  %109 = phi i64 [ %114, %108 ], [ 0, %106 ]
  %110 = add i64 %109, %53
  %111 = tail call dereferenceable(1) i8* @_ZN16FragmentedWindowixEm(%class.FragmentedWindow* %21, i64 %110) #11
  %112 = load i8, i8* %111, align 1
  %113 = getelementptr inbounds i8, i8* %84, i64 %109
  store i8 %112, i8* %113, align 1
  %114 = add nuw i64 %109, 1
  %115 = icmp eq i64 %114, %103
  br i1 %115, label %116, label %108

116:                                              ; preds = %108
  %117 = icmp eq i32 %76, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %106, %116
  %119 = getelementptr inbounds i8, i8* %84, i64 %103
  %120 = zext i32 %76 to i64
  br label %121

121:                                              ; preds = %118, %121
  %122 = phi i64 [ %126, %121 ], [ 0, %118 ]
  %123 = tail call dereferenceable(1) i8* @_ZN16FragmentedWindowixEm(%class.FragmentedWindow* %21, i64 %122) #11
  %124 = load i8, i8* %123, align 1
  %125 = getelementptr inbounds i8, i8* %119, i64 %122
  store i8 %124, i8* %125, align 1
  %126 = add nuw nsw i64 %122, 1
  %127 = icmp eq i64 %126, %120
  br i1 %127, label %134, label %121

128:                                              ; preds = %101
  %129 = load i8*, i8** %22, align 8
  %130 = getelementptr inbounds i8, i8* %129, i64 %53
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 %130, i64 %103, i1 false)
  %131 = getelementptr inbounds i8, i8* %84, i64 %103
  %132 = load i8*, i8** %22, align 8
  %133 = zext i32 %76 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %131, i8* align 1 %132, i64 %133, i1 false)
  br label %134

134:                                              ; preds = %90, %121, %116, %128, %98
  %135 = tail call i8* @_ZN6Unpack11ApplyFilterEPhjP12UnpackFilter(%class.Unpack* %0, i8* %84, i32 %52, %struct.UnpackFilter* %32)
  %136 = load %struct.UnpackFilter*, %struct.UnpackFilter** %15, align 8
  %137 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %136, i64 %28, i32 0
  store i8 8, i8* %137, align 4
  %138 = icmp eq i8* %135, null
  br i1 %138, label %141, label %139

139:                                              ; preds = %134
  %140 = load %class.ComprDataIO*, %class.ComprDataIO** %24, align 8
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %140, i8* nonnull %135, i64 %69) #11
  br label %141

141:                                              ; preds = %134, %139
  store i8 1, i8* %25, align 2
  %142 = load i64, i64* %26, align 8
  %143 = add nsw i64 %142, %69
  store i64 %143, i64* %26, align 8
  %144 = zext i32 %76 to i64
  %145 = load i64, i64* %4, align 8
  %146 = sub i64 %145, %144
  %147 = load i64, i64* %7, align 8
  %148 = and i64 %146, %147
  br label %166

149:                                              ; preds = %65
  store i64 %67, i64* %2, align 8
  %150 = load i64, i64* %11, align 8
  %151 = icmp ult i64 %28, %150
  br i1 %151, label %152, label %172

152:                                              ; preds = %149, %162
  %153 = phi i64 [ %163, %162 ], [ %150, %149 ]
  %154 = phi i64 [ %164, %162 ], [ %28, %149 ]
  %155 = load %struct.UnpackFilter*, %struct.UnpackFilter** %15, align 8
  %156 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %155, i64 %154, i32 0
  %157 = load i8, i8* %156, align 4
  %158 = icmp eq i8 %157, 8
  br i1 %158, label %162, label %159

159:                                              ; preds = %152
  %160 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %155, i64 %154, i32 4
  store i8 0, i8* %160, align 1
  %161 = load i64, i64* %11, align 8
  br label %162

162:                                              ; preds = %152, %159
  %163 = phi i64 [ %153, %152 ], [ %161, %159 ]
  %164 = add nuw i64 %154, 1
  %165 = icmp ult i64 %164, %163
  br i1 %165, label %152, label %172

166:                                              ; preds = %27, %42, %49, %71, %141, %50
  %167 = phi i64 [ %30, %50 ], [ %67, %71 ], [ %144, %141 ], [ %30, %49 ], [ %30, %42 ], [ %30, %27 ]
  %168 = phi i64 [ %29, %50 ], [ %68, %71 ], [ %148, %141 ], [ %29, %49 ], [ %29, %42 ], [ %29, %27 ]
  %169 = add nuw i64 %28, 1
  %170 = load i64, i64* %11, align 8
  %171 = icmp ult i64 %169, %170
  br i1 %171, label %27, label %172

172:                                              ; preds = %166, %162, %149
  %173 = phi i64 [ %150, %149 ], [ %163, %162 ], [ %170, %166 ]
  %174 = phi i64 [ %67, %149 ], [ %67, %162 ], [ %167, %166 ]
  %175 = phi i8 [ 1, %149 ], [ 1, %162 ], [ 0, %166 ]
  %176 = icmp eq i64 %173, 0
  br i1 %176, label %210, label %177

177:                                              ; preds = %172
  %178 = getelementptr inbounds %class.Array.5, %class.Array.5* %10, i64 0, i32 0
  br label %180

179:                                              ; preds = %191
  br i1 %201, label %210, label %202

180:                                              ; preds = %177, %191
  %181 = phi i64 [ %173, %177 ], [ %192, %191 ]
  %182 = phi i1 [ true, %177 ], [ %201, %191 ]
  %183 = phi i64 [ 0, %177 ], [ %199, %191 ]
  %184 = phi i64 [ 0, %177 ], [ %198, %191 ]
  br i1 %182, label %191, label %185

185:                                              ; preds = %180
  %186 = load %struct.UnpackFilter*, %struct.UnpackFilter** %178, align 8
  %187 = sub i64 %183, %184
  %188 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %186, i64 %187, i32 0
  %189 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %186, i64 %183, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %188, i8* align 4 %189, i64 16, i1 false)
  %190 = load i64, i64* %11, align 8
  br label %191

191:                                              ; preds = %180, %185
  %192 = phi i64 [ %181, %180 ], [ %190, %185 ]
  %193 = load %struct.UnpackFilter*, %struct.UnpackFilter** %178, align 8
  %194 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %193, i64 %183, i32 0
  %195 = load i8, i8* %194, align 4
  %196 = icmp eq i8 %195, 8
  %197 = zext i1 %196 to i64
  %198 = add i64 %184, %197
  %199 = add nuw i64 %183, 1
  %200 = icmp ult i64 %199, %192
  %201 = icmp eq i64 %198, 0
  br i1 %200, label %180, label %179

202:                                              ; preds = %179
  %203 = sub i64 %192, %198
  %204 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8, i32 2
  %205 = load i64, i64* %204, align 8
  %206 = icmp ult i64 %205, %203
  br i1 %206, label %207, label %209

207:                                              ; preds = %202
  %208 = sub i64 0, %198
  tail call void @_ZN5ArrayI12UnpackFilterE3AddEm(%class.Array.5* %10, i64 %208) #11
  br label %210

209:                                              ; preds = %202
  store i64 %203, i64* %11, align 8
  br label %210

210:                                              ; preds = %172, %209, %207, %179
  %211 = icmp eq i8 %175, 0
  br i1 %211, label %212, label %216

212:                                              ; preds = %1, %210
  %213 = phi i64 [ %174, %210 ], [ %3, %1 ]
  %214 = load i64, i64* %4, align 8
  tail call void @_ZN6Unpack12UnpWriteAreaEmm(%class.Unpack* %0, i64 %213, i64 %214)
  %215 = load i64, i64* %4, align 8
  store i64 %215, i64* %2, align 8
  br label %216

216:                                              ; preds = %210, %212
  %217 = load i64, i64* %4, align 8
  %218 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 72
  %219 = load i64, i64* %218, align 8
  %220 = icmp ult i64 %219, 4194304
  %221 = select i1 %220, i64 %219, i64 4194304
  %222 = add i64 %221, %217
  %223 = load i64, i64* %7, align 8
  %224 = and i64 %222, %223
  %225 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 19
  store i64 %224, i64* %225, align 8
  %226 = icmp eq i64 %224, %217
  %227 = load i64, i64* %2, align 8
  br i1 %226, label %236, label %228

228:                                              ; preds = %216
  %229 = icmp eq i64 %227, %217
  br i1 %229, label %237, label %230

230:                                              ; preds = %228
  %231 = sub i64 %227, %217
  %232 = and i64 %231, %223
  %233 = sub i64 %224, %217
  %234 = and i64 %233, %223
  %235 = icmp ult i64 %232, %234
  br i1 %235, label %236, label %237

236:                                              ; preds = %216, %230
  store i64 %227, i64* %225, align 8
  br label %237

237:                                              ; preds = %228, %236, %230
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6Unpack10ReadTablesER8BitInputR17UnpackBlockHeaderR17UnpackBlockTables(%class.Unpack* nocapture, %class.BitInput* dereferenceable(24), %struct.UnpackBlockHeader* nocapture readonly dereferenceable(20), %struct.UnpackBlockTables* nocapture dereferenceable(19100)) local_unnamed_addr #0 align 2 {
  %5 = alloca [20 x i8], align 16
  %6 = alloca [430 x i8], align 16
  %7 = getelementptr inbounds %struct.UnpackBlockHeader, %struct.UnpackBlockHeader* %2, i64 0, i32 5
  %8 = load i8, i8* %7, align 1, !range !5
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %354, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %class.BitInput, %class.BitInput* %1, i64 0, i32 2
  %12 = load i8, i8* %11, align 8, !range !5
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %23

14:                                               ; preds = %10
  %15 = getelementptr inbounds %class.BitInput, %class.BitInput* %1, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  %18 = load i32, i32* %17, align 8
  %19 = add nsw i32 %18, -25
  %20 = icmp sgt i32 %16, %19
  br i1 %20, label %21, label %23

21:                                               ; preds = %14
  %22 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %0)
  br i1 %22, label %23, label %354

23:                                               ; preds = %10, %21, %14
  %24 = getelementptr inbounds [20 x i8], [20 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %24) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 20, i1 false)
  br label %36

25:                                               ; preds = %75
  %26 = getelementptr inbounds %struct.UnpackBlockTables, %struct.UnpackBlockTables* %3, i64 0, i32 4
  call void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* undef, i8* nonnull %24, %struct.DecodeTable* %26, i32 20)
  %27 = getelementptr inbounds [430 x i8], [430 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 430, i8* nonnull %27) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -86, i64 430, i1 false)
  %28 = getelementptr inbounds %class.BitInput, %class.BitInput* %1, i64 0, i32 0
  %29 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  %30 = getelementptr inbounds %class.BitInput, %class.BitInput* %1, i64 0, i32 3
  %31 = getelementptr inbounds %class.BitInput, %class.BitInput* %1, i64 0, i32 1
  %32 = getelementptr inbounds %struct.UnpackBlockTables, %struct.UnpackBlockTables* %3, i64 0, i32 4, i32 3
  %33 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %26, i64 0, i32 0
  %34 = getelementptr inbounds [430 x i8], [430 x i8]* %6, i64 0, i64 1
  %35 = getelementptr inbounds [430 x i8], [430 x i8]* %6, i64 0, i64 1
  br label %79

36:                                               ; preds = %23, %75
  %37 = phi i32 [ 0, %23 ], [ %77, %75 ]
  %38 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %1) #11
  %39 = and i32 %38, 1044480
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %1, i32 4) #11
  %40 = icmp eq i32 %39, 61440
  br i1 %40, label %41, label %70

41:                                               ; preds = %36
  %42 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %1) #11
  %43 = lshr i32 %42, 12
  %44 = and i32 %43, 255
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %1, i32 4) #11
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %41
  %47 = zext i32 %37 to i64
  %48 = getelementptr inbounds [20 x i8], [20 x i8]* %5, i64 0, i64 %47
  store i8 15, i8* %48, align 1
  br label %75

49:                                               ; preds = %41
  %50 = add nuw nsw i32 %44, 2
  %51 = zext i32 %37 to i64
  %52 = getelementptr [20 x i8], [20 x i8]* %5, i64 0, i64 %51
  %53 = sub nuw nsw i64 19, %51
  %54 = add nuw nsw i32 %44, 1
  %55 = zext i32 %54 to i64
  %56 = icmp ult i64 %53, %55
  %57 = select i1 %56, i64 %53, i64 %55
  %58 = add nuw nsw i64 %57, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 0, i64 %58, i1 false)
  br label %59

59:                                               ; preds = %49, %59
  %60 = phi i64 [ %51, %49 ], [ %63, %59 ]
  %61 = phi i32 [ %50, %49 ], [ %62, %59 ]
  %62 = add i32 %61, -1
  %63 = add nuw nsw i64 %60, 1
  %64 = icmp ne i32 %62, 0
  %65 = icmp ult i64 %63, 20
  %66 = and i1 %65, %64
  br i1 %66, label %59, label %67

67:                                               ; preds = %59
  %68 = trunc i64 %63 to i32
  %69 = add nsw i32 %68, -1
  br label %75

70:                                               ; preds = %36
  %71 = lshr i32 %38, 12
  %72 = trunc i32 %71 to i8
  %73 = zext i32 %37 to i64
  %74 = getelementptr inbounds [20 x i8], [20 x i8]* %5, i64 0, i64 %73
  store i8 %72, i8* %74, align 1
  br label %75

75:                                               ; preds = %46, %67, %70
  %76 = phi i32 [ %37, %70 ], [ %37, %46 ], [ %69, %67 ]
  %77 = add nsw i32 %76, 1
  %78 = icmp ult i32 %77, 20
  br i1 %78, label %36, label %25

79:                                               ; preds = %25, %333
  %80 = phi i32 [ 0, %25 ], [ %334, %333 ]
  %81 = load i8, i8* %11, align 8, !range !5
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %90

83:                                               ; preds = %79
  %84 = load i32, i32* %28, align 8
  %85 = load i32, i32* %29, align 8
  %86 = add nsw i32 %85, -5
  %87 = icmp sgt i32 %84, %86
  br i1 %87, label %88, label %90

88:                                               ; preds = %83
  %89 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %0)
  br i1 %89, label %90, label %352

90:                                               ; preds = %79, %88, %83
  %91 = load i8*, i8** %30, align 8
  %92 = load i32, i32* %28, align 8
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8, i8* %91, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = shl nuw nsw i32 %96, 16
  %98 = add nsw i32 %92, 1
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %91, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = shl nuw nsw i32 %102, 8
  %104 = or i32 %103, %97
  %105 = add nsw i32 %92, 2
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %91, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = or i32 %104, %109
  %111 = load i32, i32* %31, align 4
  %112 = sub nsw i32 8, %111
  %113 = lshr i32 %110, %112
  %114 = and i32 %113, 65534
  %115 = load i32, i32* %32, align 4
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds %struct.UnpackBlockTables, %struct.UnpackBlockTables* %3, i64 0, i32 4, i32 1, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = icmp ult i32 %114, %118
  br i1 %119, label %120, label %132

120:                                              ; preds = %90
  %121 = sub i32 16, %115
  %122 = lshr i32 %114, %121
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds %struct.UnpackBlockTables, %struct.UnpackBlockTables* %3, i64 0, i32 4, i32 4, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = add i32 %111, %126
  %128 = lshr i32 %127, 3
  %129 = add i32 %128, %92
  store i32 %129, i32* %28, align 8
  %130 = and i32 %127, 7
  store i32 %130, i32* %31, align 4
  %131 = getelementptr inbounds %struct.UnpackBlockTables, %struct.UnpackBlockTables* %3, i64 0, i32 4, i32 5, i64 %123
  br label %163

132:                                              ; preds = %90, %136
  %133 = phi i32 [ %134, %136 ], [ %115, %90 ]
  %134 = add i32 %133, 1
  %135 = icmp ult i32 %134, 15
  br i1 %135, label %136, label %141

136:                                              ; preds = %132
  %137 = zext i32 %134 to i64
  %138 = getelementptr inbounds %struct.UnpackBlockTables, %struct.UnpackBlockTables* %3, i64 0, i32 4, i32 1, i64 %137
  %139 = load i32, i32* %138, align 4
  %140 = icmp ult i32 %114, %139
  br i1 %140, label %141, label %132

141:                                              ; preds = %132, %136
  %142 = phi i32 [ %134, %136 ], [ 15, %132 ]
  %143 = add i32 %142, %111
  %144 = lshr i32 %143, 3
  %145 = add i32 %144, %92
  store i32 %145, i32* %28, align 8
  %146 = and i32 %143, 7
  store i32 %146, i32* %31, align 4
  %147 = add nsw i32 %142, -1
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds %struct.UnpackBlockTables, %struct.UnpackBlockTables* %3, i64 0, i32 4, i32 1, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = sub i32 %114, %150
  %152 = sub nuw nsw i32 16, %142
  %153 = lshr i32 %151, %152
  %154 = zext i32 %142 to i64
  %155 = getelementptr inbounds %struct.UnpackBlockTables, %struct.UnpackBlockTables* %3, i64 0, i32 4, i32 2, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = add i32 %153, %156
  %158 = load i32, i32* %33, align 4
  %159 = icmp ult i32 %157, %158
  %160 = select i1 %159, i32 %157, i32 0
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds %struct.UnpackBlockTables, %struct.UnpackBlockTables* %3, i64 0, i32 4, i32 6, i64 %161
  br label %163

163:                                              ; preds = %120, %141
  %164 = phi i16* [ %131, %120 ], [ %162, %141 ]
  %165 = load i16, i16* %164, align 2
  %166 = icmp ult i16 %165, 16
  br i1 %166, label %167, label %172

167:                                              ; preds = %163
  %168 = trunc i16 %165 to i8
  %169 = zext i32 %80 to i64
  %170 = getelementptr inbounds [430 x i8], [430 x i8]* %6, i64 0, i64 %169
  store i8 %168, i8* %170, align 1
  %171 = add i32 %80, 1
  br label %333

172:                                              ; preds = %163
  %173 = icmp ult i16 %165, 18
  br i1 %173, label %174, label %302

174:                                              ; preds = %172
  %175 = icmp eq i16 %165, 16
  %176 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %1) #11
  %177 = select i1 %175, i32 13, i32 9
  %178 = select i1 %175, i32 3, i32 11
  %179 = select i1 %175, i32 3, i32 7
  %180 = lshr i32 %176, %177
  %181 = add nuw nsw i32 %180, %178
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %1, i32 %179) #11
  %182 = icmp eq i32 %80, 0
  br i1 %182, label %352, label %183

183:                                              ; preds = %174
  %184 = icmp ult i32 %80, 430
  br i1 %184, label %185, label %336

185:                                              ; preds = %183
  %186 = zext i32 %80 to i64
  %187 = sub nsw i64 429, %186
  %188 = add nsw i32 %181, -1
  %189 = zext i32 %188 to i64
  %190 = icmp ult i64 %187, %189
  %191 = select i1 %190, i64 %187, i64 %189
  %192 = add nuw nsw i64 %191, 1
  %193 = icmp ult i64 %192, 32
  br i1 %193, label %286, label %194

194:                                              ; preds = %185
  %195 = sub nsw i64 429, %186
  %196 = add nsw i32 %181, -1
  %197 = zext i32 %196 to i64
  %198 = icmp ult i64 %195, %197
  %199 = select i1 %198, i64 %195, i64 %197
  %200 = trunc i64 %199 to i32
  %201 = sub i32 0, %80
  %202 = icmp ult i32 %201, %200
  %203 = icmp ugt i64 %199, 4294967295
  %204 = or i1 %202, %203
  br i1 %204, label %286, label %205

205:                                              ; preds = %194
  %206 = getelementptr [430 x i8], [430 x i8]* %6, i64 0, i64 %186
  %207 = sub nsw i64 429, %186
  %208 = add nsw i32 %181, -1
  %209 = zext i32 %208 to i64
  %210 = icmp ult i64 %207, %209
  %211 = select i1 %210, i64 %207, i64 %209
  %212 = add nuw nsw i64 %211, %186
  %213 = getelementptr i8, i8* %34, i64 %212
  %214 = add i32 %80, -1
  %215 = zext i32 %214 to i64
  %216 = getelementptr [430 x i8], [430 x i8]* %6, i64 0, i64 %215
  %217 = add nuw nsw i64 %211, %215
  %218 = getelementptr i8, i8* %35, i64 %217
  %219 = icmp ult i8* %206, %218
  %220 = icmp ult i8* %216, %213
  %221 = and i1 %219, %220
  br i1 %221, label %286, label %222

222:                                              ; preds = %205
  %223 = and i64 %192, 8589934560
  %224 = add nuw nsw i64 %223, %186
  %225 = trunc i64 %223 to i32
  %226 = sub i32 %181, %225
  %227 = add nsw i64 %223, -32
  %228 = lshr exact i64 %227, 5
  %229 = add nuw nsw i64 %228, 1
  %230 = and i64 %229, 1
  %231 = icmp eq i64 %227, 0
  br i1 %231, label %267, label %232

232:                                              ; preds = %222
  %233 = sub nuw nsw i64 %229, %230
  br label %234

234:                                              ; preds = %234, %232
  %235 = phi i64 [ 0, %232 ], [ %264, %234 ]
  %236 = phi i64 [ %233, %232 ], [ %265, %234 ]
  %237 = add i64 %235, %186
  %238 = add nuw nsw i64 %237, 4294967295
  %239 = and i64 %238, 4294967295
  %240 = getelementptr inbounds [430 x i8], [430 x i8]* %6, i64 0, i64 %239
  %241 = bitcast i8* %240 to <16 x i8>*
  %242 = load <16 x i8>, <16 x i8>* %241, align 1, !alias.scope !23
  %243 = getelementptr inbounds i8, i8* %240, i64 16
  %244 = bitcast i8* %243 to <16 x i8>*
  %245 = load <16 x i8>, <16 x i8>* %244, align 1, !alias.scope !23
  %246 = getelementptr inbounds [430 x i8], [430 x i8]* %6, i64 0, i64 %237
  %247 = bitcast i8* %246 to <16 x i8>*
  store <16 x i8> %242, <16 x i8>* %247, align 1, !alias.scope !26, !noalias !23
  %248 = getelementptr inbounds i8, i8* %246, i64 16
  %249 = bitcast i8* %248 to <16 x i8>*
  store <16 x i8> %245, <16 x i8>* %249, align 1, !alias.scope !26, !noalias !23
  %250 = or i64 %235, 32
  %251 = add i64 %250, %186
  %252 = add nuw nsw i64 %251, 4294967295
  %253 = and i64 %252, 4294967295
  %254 = getelementptr inbounds [430 x i8], [430 x i8]* %6, i64 0, i64 %253
  %255 = bitcast i8* %254 to <16 x i8>*
  %256 = load <16 x i8>, <16 x i8>* %255, align 1, !alias.scope !23
  %257 = getelementptr inbounds i8, i8* %254, i64 16
  %258 = bitcast i8* %257 to <16 x i8>*
  %259 = load <16 x i8>, <16 x i8>* %258, align 1, !alias.scope !23
  %260 = getelementptr inbounds [430 x i8], [430 x i8]* %6, i64 0, i64 %251
  %261 = bitcast i8* %260 to <16 x i8>*
  store <16 x i8> %256, <16 x i8>* %261, align 1, !alias.scope !26, !noalias !23
  %262 = getelementptr inbounds i8, i8* %260, i64 16
  %263 = bitcast i8* %262 to <16 x i8>*
  store <16 x i8> %259, <16 x i8>* %263, align 1, !alias.scope !26, !noalias !23
  %264 = add i64 %235, 64
  %265 = add i64 %236, -2
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %234, !llvm.loop !28

267:                                              ; preds = %234, %222
  %268 = phi i64 [ 0, %222 ], [ %264, %234 ]
  %269 = icmp eq i64 %230, 0
  br i1 %269, label %284, label %270

270:                                              ; preds = %267
  %271 = add i64 %268, %186
  %272 = add nuw nsw i64 %271, 4294967295
  %273 = and i64 %272, 4294967295
  %274 = getelementptr inbounds [430 x i8], [430 x i8]* %6, i64 0, i64 %273
  %275 = bitcast i8* %274 to <16 x i8>*
  %276 = load <16 x i8>, <16 x i8>* %275, align 1, !alias.scope !23
  %277 = getelementptr inbounds i8, i8* %274, i64 16
  %278 = bitcast i8* %277 to <16 x i8>*
  %279 = load <16 x i8>, <16 x i8>* %278, align 1, !alias.scope !23
  %280 = getelementptr inbounds [430 x i8], [430 x i8]* %6, i64 0, i64 %271
  %281 = bitcast i8* %280 to <16 x i8>*
  store <16 x i8> %276, <16 x i8>* %281, align 1, !alias.scope !26, !noalias !23
  %282 = getelementptr inbounds i8, i8* %280, i64 16
  %283 = bitcast i8* %282 to <16 x i8>*
  store <16 x i8> %279, <16 x i8>* %283, align 1, !alias.scope !26, !noalias !23
  br label %284

284:                                              ; preds = %267, %270
  %285 = icmp eq i64 %192, %223
  br i1 %285, label %328, label %286

286:                                              ; preds = %284, %205, %194, %185
  %287 = phi i64 [ %186, %205 ], [ %186, %194 ], [ %186, %185 ], [ %224, %284 ]
  %288 = phi i32 [ %181, %205 ], [ %181, %194 ], [ %181, %185 ], [ %226, %284 ]
  br label %289

289:                                              ; preds = %286, %289
  %290 = phi i64 [ %298, %289 ], [ %287, %286 ]
  %291 = phi i32 [ %292, %289 ], [ %288, %286 ]
  %292 = add nsw i32 %291, -1
  %293 = add nuw nsw i64 %290, 4294967295
  %294 = and i64 %293, 4294967295
  %295 = getelementptr inbounds [430 x i8], [430 x i8]* %6, i64 0, i64 %294
  %296 = load i8, i8* %295, align 1
  %297 = getelementptr inbounds [430 x i8], [430 x i8]* %6, i64 0, i64 %290
  store i8 %296, i8* %297, align 1
  %298 = add nuw nsw i64 %290, 1
  %299 = icmp ne i32 %292, 0
  %300 = icmp ult i64 %298, 430
  %301 = and i1 %300, %299
  br i1 %301, label %289, label %328, !llvm.loop !29

302:                                              ; preds = %172
  %303 = icmp eq i16 %165, 18
  %304 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %1) #11
  %305 = select i1 %303, i32 13, i32 9
  %306 = select i1 %303, i32 3, i32 11
  %307 = select i1 %303, i32 3, i32 7
  %308 = lshr i32 %304, %305
  %309 = add nuw nsw i32 %308, %306
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %1, i32 %307) #11
  %310 = icmp ult i32 %80, 430
  br i1 %310, label %311, label %336

311:                                              ; preds = %302
  %312 = zext i32 %80 to i64
  %313 = getelementptr [430 x i8], [430 x i8]* %6, i64 0, i64 %312
  %314 = sub nuw nsw i64 429, %312
  %315 = add nsw i32 %309, -1
  %316 = zext i32 %315 to i64
  %317 = icmp ult i64 %314, %316
  %318 = select i1 %317, i64 %314, i64 %316
  %319 = add nuw nsw i64 %318, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %313, i8 0, i64 %319, i1 false)
  br label %320

320:                                              ; preds = %311, %320
  %321 = phi i64 [ %312, %311 ], [ %324, %320 ]
  %322 = phi i32 [ %309, %311 ], [ %323, %320 ]
  %323 = add nsw i32 %322, -1
  %324 = add nuw nsw i64 %321, 1
  %325 = icmp ne i32 %323, 0
  %326 = icmp ult i64 %324, 430
  %327 = and i1 %326, %325
  br i1 %327, label %320, label %331

328:                                              ; preds = %289, %284
  %329 = phi i64 [ %224, %284 ], [ %298, %289 ]
  %330 = trunc i64 %329 to i32
  br label %333

331:                                              ; preds = %320
  %332 = trunc i64 %324 to i32
  br label %333

333:                                              ; preds = %331, %328, %167
  %334 = phi i32 [ %171, %167 ], [ %330, %328 ], [ %332, %331 ]
  %335 = icmp ult i32 %334, 430
  br i1 %335, label %79, label %336

336:                                              ; preds = %302, %183, %333
  %337 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 65
  store i8 1, i8* %337, align 2
  %338 = load i8, i8* %11, align 8, !range !5
  %339 = icmp eq i8 %338, 0
  br i1 %339, label %340, label %344

340:                                              ; preds = %336
  %341 = load i32, i32* %28, align 8
  %342 = load i32, i32* %29, align 8
  %343 = icmp sgt i32 %341, %342
  br i1 %343, label %352, label %344

344:                                              ; preds = %336, %340
  %345 = getelementptr inbounds %struct.UnpackBlockTables, %struct.UnpackBlockTables* %3, i64 0, i32 0
  call void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* undef, i8* nonnull %27, %struct.DecodeTable* %345, i32 306)
  %346 = getelementptr inbounds [430 x i8], [430 x i8]* %6, i64 0, i64 306
  %347 = getelementptr inbounds %struct.UnpackBlockTables, %struct.UnpackBlockTables* %3, i64 0, i32 1
  call void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* undef, i8* %346, %struct.DecodeTable* %347, i32 64)
  %348 = getelementptr inbounds [430 x i8], [430 x i8]* %6, i64 0, i64 370
  %349 = getelementptr inbounds %struct.UnpackBlockTables, %struct.UnpackBlockTables* %3, i64 0, i32 2
  call void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* undef, i8* %348, %struct.DecodeTable* %349, i32 16)
  %350 = getelementptr inbounds [430 x i8], [430 x i8]* %6, i64 0, i64 386
  %351 = getelementptr inbounds %struct.UnpackBlockTables, %struct.UnpackBlockTables* %3, i64 0, i32 3
  call void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* undef, i8* %350, %struct.DecodeTable* %351, i32 44)
  br label %352

352:                                              ; preds = %174, %88, %340, %344
  %353 = phi i1 [ true, %344 ], [ false, %340 ], [ false, %88 ], [ false, %174 ]
  call void @llvm.lifetime.end.p0i8(i64 430, i8* nonnull %27) #11
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %24) #11
  br label %354

354:                                              ; preds = %21, %4, %352
  %355 = phi i1 [ %353, %352 ], [ true, %4 ], [ false, %21 ]
  ret i1 %355
}

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6Unpack10ReadFilterER8BitInputR12UnpackFilter(%class.Unpack* nocapture, %class.BitInput* dereferenceable(24), %struct.UnpackFilter* nocapture dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.BitInput, %class.BitInput* %1, i64 0, i32 2
  %5 = load i8, i8* %4, align 8, !range !5
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %16

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.BitInput, %class.BitInput* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  %11 = load i32, i32* %10, align 8
  %12 = add nsw i32 %11, -16
  %13 = icmp sgt i32 %9, %12
  br i1 %13, label %14, label %16

14:                                               ; preds = %7
  %15 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %0)
  br i1 %15, label %16, label %85

16:                                               ; preds = %3, %14, %7
  %17 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %1) #11
  %18 = lshr i32 %17, 14
  %19 = getelementptr inbounds %class.BitInput, %class.BitInput* %1, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = add i32 %20, 2
  %22 = lshr i32 %21, 3
  %23 = getelementptr inbounds %class.BitInput, %class.BitInput* %1, i64 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = add i32 %22, %24
  store i32 %25, i32* %23, align 8
  %26 = and i32 %21, 7
  store i32 %26, i32* %19, align 4
  br label %27

27:                                               ; preds = %27, %16
  %28 = phi i32 [ 0, %16 ], [ %41, %27 ]
  %29 = phi i32 [ 0, %16 ], [ %34, %27 ]
  %30 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %1) #11
  %31 = lshr i32 %30, 8
  %32 = shl i32 %28, 3
  %33 = shl i32 %31, %32
  %34 = add i32 %33, %29
  %35 = load i32, i32* %19, align 4
  %36 = add i32 %35, 8
  %37 = lshr i32 %36, 3
  %38 = load i32, i32* %23, align 8
  %39 = add i32 %37, %38
  store i32 %39, i32* %23, align 8
  %40 = and i32 %36, 7
  store i32 %40, i32* %19, align 4
  %41 = add nuw nsw i32 %28, 1
  %42 = icmp eq i32 %28, %18
  br i1 %42, label %43, label %27

43:                                               ; preds = %27
  %44 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %2, i64 0, i32 1
  store i32 %34, i32* %44, align 4
  %45 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %1) #11
  %46 = lshr i32 %45, 14
  %47 = load i32, i32* %19, align 4
  %48 = add i32 %47, 2
  %49 = lshr i32 %48, 3
  %50 = load i32, i32* %23, align 8
  %51 = add i32 %49, %50
  store i32 %51, i32* %23, align 8
  %52 = and i32 %48, 7
  store i32 %52, i32* %19, align 4
  br label %53

53:                                               ; preds = %53, %43
  %54 = phi i32 [ 0, %43 ], [ %67, %53 ]
  %55 = phi i32 [ 0, %43 ], [ %60, %53 ]
  %56 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %1) #11
  %57 = lshr i32 %56, 8
  %58 = shl i32 %54, 3
  %59 = shl i32 %57, %58
  %60 = add i32 %59, %55
  %61 = load i32, i32* %19, align 4
  %62 = add i32 %61, 8
  %63 = lshr i32 %62, 3
  %64 = load i32, i32* %23, align 8
  %65 = add i32 %63, %64
  store i32 %65, i32* %23, align 8
  %66 = and i32 %62, 7
  store i32 %66, i32* %19, align 4
  %67 = add nuw nsw i32 %54, 1
  %68 = icmp eq i32 %54, %46
  br i1 %68, label %69, label %53

69:                                               ; preds = %53
  %70 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %2, i64 0, i32 2
  %71 = icmp ugt i32 %60, 4194304
  %72 = select i1 %71, i32 0, i32 %60
  store i32 %72, i32* %70, align 4
  %73 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %1) #11
  %74 = lshr i32 %73, 13
  %75 = trunc i32 %74 to i8
  %76 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %2, i64 0, i32 0
  store i8 %75, i8* %76, align 4
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %1, i32 3) #11
  %77 = load i8, i8* %76, align 4
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %79, label %85

79:                                               ; preds = %69
  %80 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %1) #11
  %81 = lshr i32 %80, 11
  %82 = trunc i32 %81 to i8
  %83 = add i8 %82, 1
  %84 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %2, i64 0, i32 3
  store i8 %83, i8* %84, align 4
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %1, i32 5) #11
  br label %85

85:                                               ; preds = %69, %79, %14
  %86 = phi i1 [ false, %14 ], [ true, %79 ], [ true, %69 ]
  ret i1 %86
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6Unpack10CopyStringEjj(%class.Unpack*, i32, i32) local_unnamed_addr #6 comdat align 2 {
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %5 = load i64, i64* %4, align 8
  %6 = zext i32 %2 to i64
  %7 = sub i64 %5, %6
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 72
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -4100
  %11 = icmp ult i64 %7, %10
  %12 = icmp ult i64 %5, %10
  %13 = and i1 %11, %12
  br i1 %13, label %40, label %14

14:                                               ; preds = %3
  %15 = icmp eq i32 %1, 0
  br i1 %15, label %144, label %16

16:                                               ; preds = %14
  %17 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %18 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %19 = load i64, i64* %18, align 8
  %20 = and i32 %1, 1
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %34, label %22

22:                                               ; preds = %16
  %23 = add i32 %1, -1
  %24 = load i8*, i8** %17, align 8
  %25 = add i64 %7, 1
  %26 = and i64 %19, %7
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds i8, i8* %24, i64 %5
  store i8 %28, i8* %29, align 1
  %30 = load i64, i64* %4, align 8
  %31 = add i64 %30, 1
  %32 = load i64, i64* %18, align 8
  %33 = and i64 %31, %32
  store i64 %33, i64* %4, align 8
  br label %34

34:                                               ; preds = %16, %22
  %35 = phi i64 [ %5, %16 ], [ %33, %22 ]
  %36 = phi i64 [ %19, %16 ], [ %32, %22 ]
  %37 = phi i64 [ %7, %16 ], [ %25, %22 ]
  %38 = phi i32 [ %1, %16 ], [ %23, %22 ]
  %39 = icmp eq i32 %1, 1
  br i1 %39, label %144, label %117

40:                                               ; preds = %3
  %41 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 %7
  %44 = getelementptr inbounds i8, i8* %42, i64 %5
  %45 = zext i32 %1 to i64
  %46 = add i64 %5, %45
  store i64 %46, i64* %4, align 8
  %47 = icmp ugt i32 %1, 7
  br i1 %47, label %48, label %80

48:                                               ; preds = %40, %48
  %49 = phi i8* [ %75, %48 ], [ %44, %40 ]
  %50 = phi i8* [ %74, %48 ], [ %43, %40 ]
  %51 = phi i32 [ %76, %48 ], [ %1, %40 ]
  %52 = load i8, i8* %50, align 1
  store i8 %52, i8* %49, align 1
  %53 = getelementptr inbounds i8, i8* %50, i64 1
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds i8, i8* %49, i64 1
  store i8 %54, i8* %55, align 1
  %56 = getelementptr inbounds i8, i8* %50, i64 2
  %57 = load i8, i8* %56, align 1
  %58 = getelementptr inbounds i8, i8* %49, i64 2
  store i8 %57, i8* %58, align 1
  %59 = getelementptr inbounds i8, i8* %50, i64 3
  %60 = load i8, i8* %59, align 1
  %61 = getelementptr inbounds i8, i8* %49, i64 3
  store i8 %60, i8* %61, align 1
  %62 = getelementptr inbounds i8, i8* %50, i64 4
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds i8, i8* %49, i64 4
  store i8 %63, i8* %64, align 1
  %65 = getelementptr inbounds i8, i8* %50, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = getelementptr inbounds i8, i8* %49, i64 5
  store i8 %66, i8* %67, align 1
  %68 = getelementptr inbounds i8, i8* %50, i64 6
  %69 = load i8, i8* %68, align 1
  %70 = getelementptr inbounds i8, i8* %49, i64 6
  store i8 %69, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %50, i64 7
  %72 = load i8, i8* %71, align 1
  %73 = getelementptr inbounds i8, i8* %49, i64 7
  store i8 %72, i8* %73, align 1
  %74 = getelementptr inbounds i8, i8* %50, i64 8
  %75 = getelementptr inbounds i8, i8* %49, i64 8
  %76 = add i32 %51, -8
  %77 = icmp ugt i32 %76, 7
  br i1 %77, label %48, label %78

78:                                               ; preds = %48
  %79 = and i32 %1, 7
  br label %80

80:                                               ; preds = %78, %40
  %81 = phi i32 [ %1, %40 ], [ %79, %78 ]
  %82 = phi i8* [ %43, %40 ], [ %74, %78 ]
  %83 = phi i8* [ %44, %40 ], [ %75, %78 ]
  %84 = icmp eq i32 %81, 0
  br i1 %84, label %144, label %85

85:                                               ; preds = %80
  %86 = load i8, i8* %82, align 1
  store i8 %86, i8* %83, align 1
  %87 = icmp eq i32 %81, 1
  br i1 %87, label %144, label %88

88:                                               ; preds = %85
  %89 = getelementptr inbounds i8, i8* %82, i64 1
  %90 = load i8, i8* %89, align 1
  %91 = getelementptr inbounds i8, i8* %83, i64 1
  store i8 %90, i8* %91, align 1
  %92 = icmp ugt i32 %81, 2
  br i1 %92, label %93, label %144

93:                                               ; preds = %88
  %94 = getelementptr inbounds i8, i8* %82, i64 2
  %95 = load i8, i8* %94, align 1
  %96 = getelementptr inbounds i8, i8* %83, i64 2
  store i8 %95, i8* %96, align 1
  %97 = icmp eq i32 %81, 3
  br i1 %97, label %144, label %98

98:                                               ; preds = %93
  %99 = getelementptr inbounds i8, i8* %82, i64 3
  %100 = load i8, i8* %99, align 1
  %101 = getelementptr inbounds i8, i8* %83, i64 3
  store i8 %100, i8* %101, align 1
  %102 = icmp ugt i32 %81, 4
  br i1 %102, label %103, label %144

103:                                              ; preds = %98
  %104 = getelementptr inbounds i8, i8* %82, i64 4
  %105 = load i8, i8* %104, align 1
  %106 = getelementptr inbounds i8, i8* %83, i64 4
  store i8 %105, i8* %106, align 1
  %107 = icmp eq i32 %81, 5
  br i1 %107, label %144, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds i8, i8* %82, i64 5
  %110 = load i8, i8* %109, align 1
  %111 = getelementptr inbounds i8, i8* %83, i64 5
  store i8 %110, i8* %111, align 1
  %112 = icmp ugt i32 %81, 6
  br i1 %112, label %113, label %144

113:                                              ; preds = %108
  %114 = getelementptr inbounds i8, i8* %82, i64 6
  %115 = load i8, i8* %114, align 1
  %116 = getelementptr inbounds i8, i8* %83, i64 6
  store i8 %115, i8* %116, align 1
  br label %144

117:                                              ; preds = %34, %117
  %118 = phi i64 [ %142, %117 ], [ %35, %34 ]
  %119 = phi i64 [ %141, %117 ], [ %36, %34 ]
  %120 = phi i64 [ %134, %117 ], [ %37, %34 ]
  %121 = phi i32 [ %132, %117 ], [ %38, %34 ]
  %122 = load i8*, i8** %17, align 8
  %123 = add i64 %120, 1
  %124 = and i64 %119, %120
  %125 = getelementptr inbounds i8, i8* %122, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = getelementptr inbounds i8, i8* %122, i64 %118
  store i8 %126, i8* %127, align 1
  %128 = load i64, i64* %4, align 8
  %129 = add i64 %128, 1
  %130 = load i64, i64* %18, align 8
  %131 = and i64 %129, %130
  store i64 %131, i64* %4, align 8
  %132 = add i32 %121, -2
  %133 = load i8*, i8** %17, align 8
  %134 = add i64 %120, 2
  %135 = and i64 %130, %123
  %136 = getelementptr inbounds i8, i8* %133, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = getelementptr inbounds i8, i8* %133, i64 %131
  store i8 %137, i8* %138, align 1
  %139 = load i64, i64* %4, align 8
  %140 = add i64 %139, 1
  %141 = load i64, i64* %18, align 8
  %142 = and i64 %140, %141
  store i64 %142, i64* %4, align 8
  %143 = icmp eq i32 %132, 0
  br i1 %143, label %144, label %117

144:                                              ; preds = %34, %117, %14, %88, %98, %108, %113, %80, %85, %93, %103
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6Unpack9AddFilterER12UnpackFilter(%class.Unpack*, %struct.UnpackFilter* nocapture dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, 8191
  br i1 %6, label %7, label %11

7:                                                ; preds = %2
  tail call void @_ZN6Unpack11UnpWriteBufEv(%class.Unpack* %0)
  %8 = load i64, i64* %4, align 8
  %9 = icmp ugt i64 %8, 8191
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  store i64 0, i64* %4, align 8
  br label %11

11:                                               ; preds = %7, %10, %2
  %12 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 14
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %13, %15
  br i1 %16, label %17, label %21

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %1, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i64
  br label %31

21:                                               ; preds = %11
  %22 = sub i64 %13, %15
  %23 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %24 = load i64, i64* %23, align 8
  %25 = and i64 %24, %22
  %26 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %1, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = zext i32 %27 to i64
  %29 = icmp ule i64 %25, %28
  %30 = zext i1 %29 to i8
  br label %31

31:                                               ; preds = %17, %21
  %32 = phi i64 [ %20, %17 ], [ %28, %21 ]
  %33 = phi i8 [ 0, %17 ], [ %30, %21 ]
  %34 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %1, i64 0, i32 4
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %1, i64 0, i32 1
  %36 = load i64, i64* %14, align 8
  %37 = add i64 %36, %32
  %38 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %39 = load i64, i64* %38, align 8
  %40 = and i64 %37, %39
  %41 = trunc i64 %40 to i32
  store i32 %41, i32* %35, align 4
  %42 = bitcast %struct.UnpackFilter* %1 to <2 x i64>*
  %43 = load <2 x i64>, <2 x i64>* %42, align 4
  tail call void @_ZN5ArrayI12UnpackFilterE3AddEm(%class.Array.5* %3, i64 1) #11
  %44 = load i64, i64* %4, align 8
  %45 = add i64 %44, -1
  %46 = getelementptr inbounds %class.Array.5, %class.Array.5* %3, i64 0, i32 0
  %47 = load %struct.UnpackFilter*, %struct.UnpackFilter** %46, align 8
  %48 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %47, i64 %45
  %49 = bitcast %struct.UnpackFilter* %48 to <2 x i64>*
  store <2 x i64> %43, <2 x i64>* %49, align 4
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack8Unpack15Eb(%class.Unpack*, i1 zeroext) local_unnamed_addr #0 align 2 {
  tail call void @_ZN6Unpack11UnpInitDataEb(%class.Unpack* %0, i1 zeroext %1)
  br i1 %1, label %10, label %3

3:                                                ; preds = %2
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 38
  %5 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 37
  %6 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 24, i1 false) #11
  store i32 13568, i32* %5, align 8
  %7 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 49
  store i32 8193, i32* %7, align 8
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 48
  store i32 128, i32* %8, align 4
  %9 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 47
  store i32 128, i32* %9, align 8
  br label %10

10:                                               ; preds = %2, %3
  %11 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 46
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 36
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 44
  store i32 0, i32* %13, align 4
  %14 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 45
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  store i32 0, i32* %15, align 8
  %16 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %0)
  br i1 %1, label %49, label %17

17:                                               ; preds = %10, %17
  %18 = phi i64 [ %42, %17 ], [ 0, %10 ]
  %19 = phi <8 x i16> [ %43, %17 ], [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>, %10 ]
  %20 = shl <8 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %21 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 31, i64 %18
  %22 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> %20, <8 x i16>* %22, align 2
  %23 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 29, i64 %18
  %24 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> %20, <8 x i16>* %24, align 2
  %25 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 30, i64 %18
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %26, align 2
  %27 = sub <8 x i16> zeroinitializer, %20
  %28 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 32, i64 %18
  %29 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> %27, <8 x i16>* %29, align 2
  %30 = or i64 %18, 8
  %31 = add <8 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %32 = shl <8 x i16> %31, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %33 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 31, i64 %30
  %34 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %32, <8 x i16>* %34, align 2
  %35 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 29, i64 %30
  %36 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> %32, <8 x i16>* %36, align 2
  %37 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 30, i64 %30
  %38 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %38, align 2
  %39 = sub <8 x i16> zeroinitializer, %32
  %40 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 32, i64 %30
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %41, align 2
  %42 = add nuw nsw i64 %18, 16
  %43 = add <8 x i16> %19, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %44 = icmp eq i64 %42, 256
  br i1 %44, label %45, label %17, !llvm.loop !30

45:                                               ; preds = %17
  %46 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 33, i64 0
  %47 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 34, i64 0
  %48 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 31, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %46, i8 0, i64 768, i1 false) #11
  tail call void @_ZN6Unpack8CorrHuffEPtPh(%class.Unpack* undef, i16* %48, i8* %47) #11
  br label %52

49:                                               ; preds = %10
  %50 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 14
  %51 = load i64, i64* %50, align 8
  br label %52

52:                                               ; preds = %49, %45
  %53 = phi i64 [ %51, %49 ], [ 0, %45 ]
  %54 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  store i64 %53, i64* %54, align 8
  %55 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %56 = load i64, i64* %55, align 8
  %57 = add nsw i64 %56, -1
  store i64 %57, i64* %55, align 8
  %58 = icmp sgt i64 %56, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %52
  tail call void @_ZN6Unpack11GetFlagsBufEv(%class.Unpack* %0)
  store i32 8, i32* %11, align 4
  %60 = load i64, i64* %55, align 8
  br label %61

61:                                               ; preds = %59, %52
  %62 = phi i64 [ %60, %59 ], [ %57, %52 ]
  %63 = icmp sgt i64 %62, -1
  br i1 %63, label %64, label %155

64:                                               ; preds = %61
  %65 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %66 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %67 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 0
  %68 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 14
  %69 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 26
  %70 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %71 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %72 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 25
  %73 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 48
  %74 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 47
  br label %75

75:                                               ; preds = %64, %118
  %76 = load i64, i64* %65, align 8
  %77 = load i64, i64* %66, align 8
  %78 = and i64 %77, %76
  store i64 %78, i64* %66, align 8
  %79 = load i32, i32* %67, align 8
  %80 = load i32, i32* %15, align 8
  %81 = add nsw i32 %80, -30
  %82 = icmp sgt i32 %79, %81
  br i1 %82, label %83, label %88

83:                                               ; preds = %75
  %84 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %0)
  br i1 %84, label %85, label %155

85:                                               ; preds = %83
  %86 = load i64, i64* %66, align 8
  %87 = load i64, i64* %65, align 8
  br label %88

88:                                               ; preds = %85, %75
  %89 = phi i64 [ %87, %85 ], [ %76, %75 ]
  %90 = phi i64 [ %86, %85 ], [ %78, %75 ]
  %91 = load i64, i64* %68, align 8
  %92 = sub i64 %91, %90
  %93 = and i64 %92, %89
  %94 = icmp ugt i64 %93, 269
  %95 = icmp eq i64 %91, %90
  %96 = or i1 %95, %94
  br i1 %96, label %114, label %97

97:                                               ; preds = %88
  store i8 1, i8* %69, align 2
  %98 = icmp ult i64 %90, %91
  %99 = load %class.ComprDataIO*, %class.ComprDataIO** %70, align 8
  %100 = load i8*, i8** %71, align 8
  %101 = getelementptr inbounds i8, i8* %100, i64 %91
  br i1 %98, label %102, label %110

102:                                              ; preds = %97
  %103 = shl i64 %91, 32
  %104 = sub i64 0, %103
  %105 = ashr exact i64 %104, 32
  %106 = and i64 %89, %105
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %99, i8* %101, i64 %106) #11
  %107 = load %class.ComprDataIO*, %class.ComprDataIO** %70, align 8
  %108 = load i8*, i8** %71, align 8
  %109 = load i64, i64* %66, align 8
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %107, i8* %108, i64 %109) #11
  store i8 1, i8* %72, align 1
  br label %112

110:                                              ; preds = %97
  %111 = sub i64 %90, %91
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %99, i8* %101, i64 %111) #11
  br label %112

112:                                              ; preds = %102, %110
  %113 = load i64, i64* %66, align 8
  store i64 %113, i64* %68, align 8
  br label %114

114:                                              ; preds = %88, %112
  %115 = load i32, i32* %13, align 4
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %121, label %117

117:                                              ; preds = %114
  tail call void @_ZN6Unpack10HuffDecodeEv(%class.Unpack* %0)
  br label %118

118:                                              ; preds = %137, %136, %152, %153, %154, %117
  %119 = load i64, i64* %55, align 8
  %120 = icmp sgt i64 %119, -1
  br i1 %120, label %75, label %155

121:                                              ; preds = %114
  %122 = load i32, i32* %11, align 4
  %123 = add nsw i32 %122, -1
  store i32 %123, i32* %11, align 4
  %124 = icmp slt i32 %122, 1
  br i1 %124, label %125, label %126

125:                                              ; preds = %121
  tail call void @_ZN6Unpack11GetFlagsBufEv(%class.Unpack* %0)
  store i32 7, i32* %11, align 4
  br label %126

126:                                              ; preds = %125, %121
  %127 = phi i32 [ 7, %125 ], [ %123, %121 ]
  %128 = load i32, i32* %12, align 4
  %129 = trunc i32 %128 to i8
  %130 = icmp slt i8 %129, 0
  %131 = shl i32 %128, 1
  store i32 %131, i32* %12, align 4
  br i1 %130, label %132, label %138

132:                                              ; preds = %126
  %133 = load i32, i32* %73, align 4
  %134 = load i32, i32* %74, align 8
  %135 = icmp ugt i32 %133, %134
  br i1 %135, label %136, label %137

136:                                              ; preds = %132
  tail call void @_ZN6Unpack6LongLZEv(%class.Unpack* %0)
  br label %118

137:                                              ; preds = %132
  tail call void @_ZN6Unpack10HuffDecodeEv(%class.Unpack* %0)
  br label %118

138:                                              ; preds = %126
  %139 = add nsw i32 %127, -1
  store i32 %139, i32* %11, align 4
  %140 = icmp slt i32 %127, 1
  br i1 %140, label %141, label %143

141:                                              ; preds = %138
  tail call void @_ZN6Unpack11GetFlagsBufEv(%class.Unpack* %0)
  store i32 7, i32* %11, align 4
  %142 = load i32, i32* %12, align 4
  br label %143

143:                                              ; preds = %141, %138
  %144 = phi i32 [ %142, %141 ], [ %131, %138 ]
  %145 = trunc i32 %144 to i8
  %146 = icmp slt i8 %145, 0
  %147 = shl i32 %144, 1
  store i32 %147, i32* %12, align 4
  br i1 %146, label %148, label %154

148:                                              ; preds = %143
  %149 = load i32, i32* %73, align 4
  %150 = load i32, i32* %74, align 8
  %151 = icmp ugt i32 %149, %150
  br i1 %151, label %152, label %153

152:                                              ; preds = %148
  tail call void @_ZN6Unpack10HuffDecodeEv(%class.Unpack* %0)
  br label %118

153:                                              ; preds = %148
  tail call void @_ZN6Unpack6LongLZEv(%class.Unpack* %0)
  br label %118

154:                                              ; preds = %143
  tail call void @_ZN6Unpack7ShortLZEv(%class.Unpack* %0)
  br label %118

155:                                              ; preds = %118, %83, %61
  %156 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %157 = load i64, i64* %156, align 8
  %158 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 14
  %159 = load i64, i64* %158, align 8
  %160 = icmp eq i64 %157, %159
  br i1 %160, label %163, label %161

161:                                              ; preds = %155
  %162 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 26
  store i8 1, i8* %162, align 2
  br label %163

163:                                              ; preds = %161, %155
  %164 = icmp ult i64 %157, %159
  %165 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %166 = load %class.ComprDataIO*, %class.ComprDataIO** %165, align 8
  %167 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %168 = load i8*, i8** %167, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 %159
  br i1 %164, label %170, label %181

170:                                              ; preds = %163
  %171 = shl i64 %159, 32
  %172 = sub i64 0, %171
  %173 = ashr exact i64 %172, 32
  %174 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %175 = load i64, i64* %174, align 8
  %176 = and i64 %175, %173
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %166, i8* %169, i64 %176) #11
  %177 = load %class.ComprDataIO*, %class.ComprDataIO** %165, align 8
  %178 = load i8*, i8** %167, align 8
  %179 = load i64, i64* %156, align 8
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %177, i8* %178, i64 %179) #11
  %180 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 25
  store i8 1, i8* %180, align 1
  br label %183

181:                                              ; preds = %163
  %182 = sub i64 %157, %159
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %166, i8* %169, i64 %182) #11
  br label %183

183:                                              ; preds = %170, %181
  %184 = load i64, i64* %156, align 8
  store i64 %184, i64* %158, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6Unpack13UnpInitData15Ei(%class.Unpack* nocapture, i32) local_unnamed_addr #2 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %11

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 38
  %6 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 37
  %7 = bitcast i32* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 24, i1 false)
  store i32 13568, i32* %6, align 8
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 49
  store i32 8193, i32* %8, align 8
  %9 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 48
  store i32 128, i32* %9, align 4
  %10 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 47
  store i32 128, i32* %10, align 8
  br label %11

11:                                               ; preds = %2, %4
  %12 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 46
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 36
  store i32 0, i32* %13, align 4
  %14 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 44
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 45
  store i32 0, i32* %15, align 8
  %16 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  store i32 0, i32* %16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = sub nsw i32 %3, %5
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %57, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 17, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 17, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = sub i32 %10, %5
  %14 = add i32 %13, %12
  store i32 %14, i32* %11, align 8
  %15 = icmp sgt i32 %5, 16384
  br i1 %15, label %16, label %25

16:                                               ; preds = %8
  %17 = icmp sgt i32 %6, 0
  br i1 %17, label %18, label %24

18:                                               ; preds = %16
  %19 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %20 = load i8*, i8** %19, align 8
  %21 = sext i32 %5 to i64
  %22 = getelementptr inbounds i8, i8* %20, i64 %21
  %23 = sext i32 %6 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %22, i64 %23, i1 false)
  br label %24

24:                                               ; preds = %18, %16
  store i32 0, i32* %4, align 8
  store i32 %6, i32* %2, align 8
  br label %25

25:                                               ; preds = %8, %24
  %26 = phi i32 [ %6, %24 ], [ %3, %8 ]
  %27 = icmp eq i32 %26, 32768
  br i1 %27, label %42, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %30 = load %class.ComprDataIO*, %class.ComprDataIO** %29, align 8
  %31 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %32 = load i8*, i8** %31, align 8
  %33 = sext i32 %26 to i64
  %34 = getelementptr inbounds i8, i8* %32, i64 %33
  %35 = sub nsw i32 32768, %26
  %36 = sext i32 %35 to i64
  %37 = tail call i32 @_ZN11ComprDataIO7UnpReadEPhm(%class.ComprDataIO* %30, i8* %34, i64 %36) #11
  %38 = icmp sgt i32 %37, 0
  %39 = load i32, i32* %2, align 8
  br i1 %38, label %40, label %42

40:                                               ; preds = %28
  %41 = add nsw i32 %39, %37
  store i32 %41, i32* %2, align 8
  br label %42

42:                                               ; preds = %28, %25, %40
  %43 = phi i32 [ %41, %40 ], [ 32768, %25 ], [ %39, %28 ]
  %44 = phi i32 [ %37, %40 ], [ 0, %25 ], [ %37, %28 ]
  %45 = add nsw i32 %43, -30
  %46 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 16
  store i32 %45, i32* %46, align 4
  %47 = load i32, i32* %4, align 8
  store i32 %47, i32* %9, align 8
  %48 = load i32, i32* %11, align 8
  %49 = icmp eq i32 %48, -1
  br i1 %49, label %55, label %50

50:                                               ; preds = %42
  %51 = add i32 %47, -1
  %52 = add i32 %51, %48
  %53 = icmp slt i32 %45, %52
  %54 = select i1 %53, i32 %45, i32 %52
  store i32 %54, i32* %46, align 4
  br label %55

55:                                               ; preds = %42, %50
  %56 = icmp ne i32 %44, -1
  br label %57

57:                                               ; preds = %1, %55
  %58 = phi i1 [ %56, %55 ], [ false, %1 ]
  ret i1 %58
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack8InitHuffEv(%class.Unpack* nocapture) local_unnamed_addr #0 align 2 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi i64 [ 0, %1 ], [ %27, %2 ]
  %4 = phi <8 x i16> [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>, %1 ], [ %28, %2 ]
  %5 = shl <8 x i16> %4, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %6 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 31, i64 %3
  %7 = bitcast i16* %6 to <8 x i16>*
  store <8 x i16> %5, <8 x i16>* %7, align 2
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 29, i64 %3
  %9 = bitcast i16* %8 to <8 x i16>*
  store <8 x i16> %5, <8 x i16>* %9, align 2
  %10 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 30, i64 %3
  %11 = bitcast i16* %10 to <8 x i16>*
  store <8 x i16> %4, <8 x i16>* %11, align 2
  %12 = sub <8 x i16> zeroinitializer, %5
  %13 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 32, i64 %3
  %14 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> %12, <8 x i16>* %14, align 2
  %15 = or i64 %3, 8
  %16 = add <8 x i16> %4, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = shl <8 x i16> %16, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %18 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 31, i64 %15
  %19 = bitcast i16* %18 to <8 x i16>*
  store <8 x i16> %17, <8 x i16>* %19, align 2
  %20 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 29, i64 %15
  %21 = bitcast i16* %20 to <8 x i16>*
  store <8 x i16> %17, <8 x i16>* %21, align 2
  %22 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 30, i64 %15
  %23 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> %16, <8 x i16>* %23, align 2
  %24 = sub <8 x i16> zeroinitializer, %17
  %25 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 32, i64 %15
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %26, align 2
  %27 = add nuw nsw i64 %3, 16
  %28 = add <8 x i16> %4, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %29 = icmp eq i64 %27, 256
  br i1 %29, label %30, label %2, !llvm.loop !31

30:                                               ; preds = %2
  %31 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 33, i64 0
  %32 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 34, i64 0
  %33 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 31, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 2 %31, i8 0, i64 768, i1 false)
  tail call void @_ZN6Unpack8CorrHuffEPtPh(%class.Unpack* undef, i16* %33, i8* %32)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack11GetFlagsBufEv(%class.Unpack*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1
  %3 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %2) #11
  %4 = and i32 %3, 65520
  %5 = icmp ult i32 %4, 4096
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 5) #11
  br label %24

7:                                                ; preds = %1, %7
  %8 = phi i64 [ %11, %7 ], [ 0, %1 ]
  %9 = phi i32 [ %10, %7 ], [ 5, %1 ]
  %10 = add i32 %9, 1
  %11 = add nuw i64 %8, 1
  %12 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZL6DecHf2, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = icmp ugt i32 %13, %4
  br i1 %14, label %15, label %7

15:                                               ; preds = %7
  %16 = trunc i64 %11 to i32
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 %10) #11
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %15
  %19 = shl i64 %11, 32
  %20 = add i64 %19, -4294967296
  %21 = ashr exact i64 %20, 32
  %22 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZL6DecHf2, i64 0, i64 %21
  %23 = load i32, i32* %22, align 4
  br label %24

24:                                               ; preds = %6, %15, %18
  %25 = phi i32 [ %10, %18 ], [ %10, %15 ], [ 5, %6 ]
  %26 = phi i32 [ %23, %18 ], [ 0, %15 ], [ 0, %6 ]
  %27 = sub i32 %4, %26
  %28 = sub i32 16, %25
  %29 = lshr i32 %27, %28
  %30 = zext i32 %25 to i64
  %31 = getelementptr inbounds [13 x i32], [13 x i32]* @_ZL6PosHf2, i64 0, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = add i32 %29, %32
  %34 = icmp ugt i32 %33, 255
  br i1 %34, label %72, label %35

35:                                               ; preds = %24
  %36 = zext i32 %33 to i64
  %37 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 32, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = lshr i32 %39, 8
  %41 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 36
  store i32 %40, i32* %41, align 4
  %42 = add nuw nsw i32 %39, 1
  %43 = and i32 %39, 255
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 35, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = add i8 %46, 1
  store i8 %47, i8* %45, align 1
  %48 = and i32 %42, 255
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %65

50:                                               ; preds = %35
  %51 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 32, i64 0
  %52 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 35, i64 0
  br label %53

53:                                               ; preds = %50, %53
  tail call void @_ZN6Unpack8CorrHuffEPtPh(%class.Unpack* undef, i16* %51, i8* %52)
  %54 = load i16, i16* %37, align 2
  %55 = zext i16 %54 to i32
  %56 = lshr i32 %55, 8
  store i32 %56, i32* %41, align 4
  %57 = add nuw nsw i32 %55, 1
  %58 = and i32 %55, 255
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 35, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = add i8 %61, 1
  store i8 %62, i8* %60, align 1
  %63 = and i32 %57, 255
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %53, label %65

65:                                               ; preds = %53, %35
  %66 = phi i32 [ %42, %35 ], [ %57, %53 ]
  %67 = phi i8 [ %46, %35 ], [ %61, %53 ]
  %68 = zext i8 %67 to i64
  %69 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 32, i64 %68
  %70 = load i16, i16* %69, align 2
  store i16 %70, i16* %37, align 2
  %71 = trunc i32 %66 to i16
  store i16 %71, i16* %69, align 2
  br label %72

72:                                               ; preds = %24, %65
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack13UnpWriteBuf20Ev(%class.Unpack* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 14
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %3, %5
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 26
  store i8 1, i8* %8, align 2
  br label %9

9:                                                ; preds = %1, %7
  %10 = icmp ult i64 %3, %5
  %11 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %12 = load %class.ComprDataIO*, %class.ComprDataIO** %11, align 8
  %13 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %5
  br i1 %10, label %16, label %27

16:                                               ; preds = %9
  %17 = shl i64 %5, 32
  %18 = sub i64 0, %17
  %19 = ashr exact i64 %18, 32
  %20 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %21 = load i64, i64* %20, align 8
  %22 = and i64 %21, %19
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %12, i8* %15, i64 %22) #11
  %23 = load %class.ComprDataIO*, %class.ComprDataIO** %11, align 8
  %24 = load i8*, i8** %13, align 8
  %25 = load i64, i64* %2, align 8
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %23, i8* %24, i64 %25) #11
  %26 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 25
  store i8 1, i8* %26, align 1
  br label %29

27:                                               ; preds = %9
  %28 = sub i64 %3, %5
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %12, i8* %15, i64 %28) #11
  br label %29

29:                                               ; preds = %27, %16
  %30 = load i64, i64* %2, align 8
  store i64 %30, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack10HuffDecodeEv(%class.Unpack*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1
  %3 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %2) #11
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 37
  %5 = load i32, i32* %4, align 8
  %6 = icmp ugt i32 %5, 30207
  br i1 %6, label %7, label %32

7:                                                ; preds = %1
  %8 = and i32 %3, 65520
  %9 = icmp ult i32 %8, 65280
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 8) #11
  br label %28

11:                                               ; preds = %7, %11
  %12 = phi i64 [ %15, %11 ], [ 0, %7 ]
  %13 = phi i32 [ %14, %11 ], [ 8, %7 ]
  %14 = add i32 %13, 1
  %15 = add nuw i64 %12, 1
  %16 = getelementptr inbounds [6 x i32], [6 x i32]* @_ZL6DecHf4, i64 0, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = icmp ugt i32 %17, %8
  br i1 %18, label %19, label %11

19:                                               ; preds = %11
  %20 = trunc i64 %15 to i32
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 %14) #11
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %28, label %22

22:                                               ; preds = %19
  %23 = shl i64 %15, 32
  %24 = add i64 %23, -4294967296
  %25 = ashr exact i64 %24, 32
  %26 = getelementptr inbounds [6 x i32], [6 x i32]* @_ZL6DecHf4, i64 0, i64 %25
  %27 = load i32, i32* %26, align 4
  br label %28

28:                                               ; preds = %10, %19, %22
  %29 = phi i32 [ %14, %22 ], [ %14, %19 ], [ 8, %10 ]
  %30 = phi i32 [ %27, %22 ], [ 0, %19 ], [ 0, %10 ]
  %31 = sub i32 %8, %30
  br label %137

32:                                               ; preds = %1
  %33 = icmp ugt i32 %5, 24063
  br i1 %33, label %34, label %59

34:                                               ; preds = %32
  %35 = and i32 %3, 65520
  %36 = icmp ult i32 %35, 2048
  br i1 %36, label %37, label %38

37:                                               ; preds = %34
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 6) #11
  br label %55

38:                                               ; preds = %34, %38
  %39 = phi i64 [ %42, %38 ], [ 0, %34 ]
  %40 = phi i32 [ %41, %38 ], [ 6, %34 ]
  %41 = add i32 %40, 1
  %42 = add nuw i64 %39, 1
  %43 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL6DecHf3, i64 0, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = icmp ugt i32 %44, %35
  br i1 %45, label %46, label %38

46:                                               ; preds = %38
  %47 = trunc i64 %42 to i32
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 %41) #11
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %55, label %49

49:                                               ; preds = %46
  %50 = shl i64 %42, 32
  %51 = add i64 %50, -4294967296
  %52 = ashr exact i64 %51, 32
  %53 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL6DecHf3, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4
  br label %55

55:                                               ; preds = %37, %46, %49
  %56 = phi i32 [ %41, %49 ], [ %41, %46 ], [ 6, %37 ]
  %57 = phi i32 [ %54, %49 ], [ 0, %46 ], [ 0, %37 ]
  %58 = sub i32 %35, %57
  br label %137

59:                                               ; preds = %32
  %60 = icmp ugt i32 %5, 13823
  br i1 %60, label %61, label %86

61:                                               ; preds = %59
  %62 = and i32 %3, 65520
  %63 = icmp ult i32 %62, 4096
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 5) #11
  br label %82

65:                                               ; preds = %61, %65
  %66 = phi i64 [ %69, %65 ], [ 0, %61 ]
  %67 = phi i32 [ %68, %65 ], [ 5, %61 ]
  %68 = add i32 %67, 1
  %69 = add nuw i64 %66, 1
  %70 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZL6DecHf2, i64 0, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = icmp ugt i32 %71, %62
  br i1 %72, label %73, label %65

73:                                               ; preds = %65
  %74 = trunc i64 %69 to i32
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 %68) #11
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %82, label %76

76:                                               ; preds = %73
  %77 = shl i64 %69, 32
  %78 = add i64 %77, -4294967296
  %79 = ashr exact i64 %78, 32
  %80 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZL6DecHf2, i64 0, i64 %79
  %81 = load i32, i32* %80, align 4
  br label %82

82:                                               ; preds = %64, %73, %76
  %83 = phi i32 [ %68, %76 ], [ %68, %73 ], [ 5, %64 ]
  %84 = phi i32 [ %81, %76 ], [ 0, %73 ], [ 0, %64 ]
  %85 = sub i32 %62, %84
  br label %137

86:                                               ; preds = %59
  %87 = icmp ugt i32 %5, 3583
  %88 = and i32 %3, 65520
  br i1 %87, label %89, label %113

89:                                               ; preds = %86
  %90 = icmp ult i32 %88, 8192
  br i1 %90, label %91, label %92

91:                                               ; preds = %89
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 5) #11
  br label %109

92:                                               ; preds = %89, %92
  %93 = phi i64 [ %96, %92 ], [ 0, %89 ]
  %94 = phi i32 [ %95, %92 ], [ 5, %89 ]
  %95 = add i32 %94, 1
  %96 = add nuw i64 %93, 1
  %97 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZL6DecHf1, i64 0, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = icmp ugt i32 %98, %88
  br i1 %99, label %100, label %92

100:                                              ; preds = %92
  %101 = trunc i64 %96 to i32
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 %95) #11
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %109, label %103

103:                                              ; preds = %100
  %104 = shl i64 %96, 32
  %105 = add i64 %104, -4294967296
  %106 = ashr exact i64 %105, 32
  %107 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZL6DecHf1, i64 0, i64 %106
  %108 = load i32, i32* %107, align 4
  br label %109

109:                                              ; preds = %91, %100, %103
  %110 = phi i32 [ %95, %103 ], [ %95, %100 ], [ 5, %91 ]
  %111 = phi i32 [ %108, %103 ], [ 0, %100 ], [ 0, %91 ]
  %112 = sub i32 %88, %111
  br label %137

113:                                              ; preds = %86
  %114 = icmp ult i32 %88, 32768
  br i1 %114, label %115, label %116

115:                                              ; preds = %113
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 4) #11
  br label %133

116:                                              ; preds = %113, %116
  %117 = phi i64 [ %120, %116 ], [ 0, %113 ]
  %118 = phi i32 [ %119, %116 ], [ 4, %113 ]
  %119 = add i32 %118, 1
  %120 = add nuw i64 %117, 1
  %121 = getelementptr inbounds [9 x i32], [9 x i32]* @_ZL6DecHf0, i64 0, i64 %120
  %122 = load i32, i32* %121, align 4
  %123 = icmp ugt i32 %122, %88
  br i1 %123, label %124, label %116

124:                                              ; preds = %116
  %125 = trunc i64 %120 to i32
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 %119) #11
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %133, label %127

127:                                              ; preds = %124
  %128 = shl i64 %120, 32
  %129 = add i64 %128, -4294967296
  %130 = ashr exact i64 %129, 32
  %131 = getelementptr inbounds [9 x i32], [9 x i32]* @_ZL6DecHf0, i64 0, i64 %130
  %132 = load i32, i32* %131, align 4
  br label %133

133:                                              ; preds = %115, %124, %127
  %134 = phi i32 [ %119, %127 ], [ %119, %124 ], [ 4, %115 ]
  %135 = phi i32 [ %132, %127 ], [ 0, %124 ], [ 0, %115 ]
  %136 = sub i32 %88, %135
  br label %137

137:                                              ; preds = %55, %109, %133, %82, %28
  %138 = phi i32 [ %56, %55 ], [ %110, %109 ], [ %134, %133 ], [ %83, %82 ], [ %29, %28 ]
  %139 = phi i32 [ %58, %55 ], [ %112, %109 ], [ %136, %133 ], [ %85, %82 ], [ %31, %28 ]
  %140 = phi [13 x i32]* [ @_ZL6PosHf3, %55 ], [ @_ZL6PosHf1, %109 ], [ @_ZL6PosHf0, %133 ], [ @_ZL6PosHf2, %82 ], [ @_ZL6PosHf4, %28 ]
  %141 = sub i32 16, %138
  %142 = lshr i32 %139, %141
  %143 = zext i32 %138 to i64
  %144 = getelementptr inbounds [13 x i32], [13 x i32]* %140, i64 0, i64 %143
  %145 = load i32, i32* %144, align 4
  %146 = add i32 %142, %145
  %147 = and i32 %146, 255
  %148 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 44
  %149 = load i32, i32* %148, align 4
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %257, label %151

151:                                              ; preds = %137
  %152 = icmp eq i32 %147, 0
  %153 = icmp ugt i32 %3, 4095
  %154 = and i1 %153, %152
  %155 = select i1 %154, i32 256, i32 %147
  %156 = add nsw i32 %155, -1
  %157 = icmp eq i32 %155, 0
  br i1 %157, label %158, label %267

158:                                              ; preds = %151
  %159 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %2) #11
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 1) #11
  %160 = trunc i32 %159 to i16
  %161 = icmp slt i16 %160, 0
  br i1 %161, label %162, label %164

162:                                              ; preds = %158
  store i32 0, i32* %148, align 4
  %163 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 43
  store i32 0, i32* %163, align 8
  br label %327

164:                                              ; preds = %158
  %165 = and i32 %159, 16384
  %166 = icmp eq i32 %165, 0
  %167 = select i1 %166, i32 3, i32 4
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 1) #11
  %168 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %2) #11
  %169 = and i32 %168, 65520
  %170 = icmp ult i32 %169, 4096
  br i1 %170, label %171, label %172

171:                                              ; preds = %164
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 5) #11
  br label %189

172:                                              ; preds = %164, %172
  %173 = phi i64 [ %176, %172 ], [ 0, %164 ]
  %174 = phi i32 [ %175, %172 ], [ 5, %164 ]
  %175 = add i32 %174, 1
  %176 = add nuw i64 %173, 1
  %177 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZL6DecHf2, i64 0, i64 %176
  %178 = load i32, i32* %177, align 4
  %179 = icmp ugt i32 %178, %169
  br i1 %179, label %180, label %172

180:                                              ; preds = %172
  %181 = trunc i64 %176 to i32
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 %175) #11
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %189, label %183

183:                                              ; preds = %180
  %184 = shl i64 %176, 32
  %185 = add i64 %184, -4294967296
  %186 = ashr exact i64 %185, 32
  %187 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZL6DecHf2, i64 0, i64 %186
  %188 = load i32, i32* %187, align 4
  br label %189

189:                                              ; preds = %171, %180, %183
  %190 = phi i32 [ %175, %183 ], [ %175, %180 ], [ 5, %171 ]
  %191 = phi i32 [ %188, %183 ], [ 0, %180 ], [ 0, %171 ]
  %192 = sub i32 %169, %191
  %193 = sub i32 16, %190
  %194 = lshr i32 %192, %193
  %195 = zext i32 %190 to i64
  %196 = getelementptr inbounds [13 x i32], [13 x i32]* @_ZL6PosHf2, i64 0, i64 %195
  %197 = load i32, i32* %196, align 4
  %198 = add i32 %194, %197
  %199 = shl i32 %198, 5
  %200 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %2) #11
  %201 = lshr i32 %200, 11
  %202 = or i32 %199, %201
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %2, i32 5) #11
  %203 = zext i32 %167 to i64
  %204 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %205 = load i64, i64* %204, align 8
  %206 = sub nsw i64 %205, %203
  store i64 %206, i64* %204, align 8
  %207 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %208 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %209 = zext i32 %202 to i64
  %210 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %211 = load i64, i64* %208, align 8
  %212 = load i64, i64* %210, align 8
  %213 = and i32 %167, 1
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %227, label %215

215:                                              ; preds = %189
  %216 = add nsw i32 %167, -1
  %217 = load i8*, i8** %207, align 8
  %218 = sub i64 %211, %209
  %219 = and i64 %218, %212
  %220 = getelementptr inbounds i8, i8* %217, i64 %219
  %221 = load i8, i8* %220, align 1
  %222 = getelementptr inbounds i8, i8* %217, i64 %211
  store i8 %221, i8* %222, align 1
  %223 = load i64, i64* %208, align 8
  %224 = add i64 %223, 1
  %225 = load i64, i64* %210, align 8
  %226 = and i64 %224, %225
  store i64 %226, i64* %208, align 8
  br label %227

227:                                              ; preds = %215, %189
  %228 = phi i64 [ %212, %189 ], [ %225, %215 ]
  %229 = phi i64 [ %211, %189 ], [ %226, %215 ]
  %230 = phi i32 [ %167, %189 ], [ %216, %215 ]
  br label %231

231:                                              ; preds = %231, %227
  %232 = phi i64 [ %228, %227 ], [ %254, %231 ]
  %233 = phi i64 [ %229, %227 ], [ %255, %231 ]
  %234 = phi i32 [ %230, %227 ], [ %245, %231 ]
  %235 = load i8*, i8** %207, align 8
  %236 = sub i64 %233, %209
  %237 = and i64 %236, %232
  %238 = getelementptr inbounds i8, i8* %235, i64 %237
  %239 = load i8, i8* %238, align 1
  %240 = getelementptr inbounds i8, i8* %235, i64 %233
  store i8 %239, i8* %240, align 1
  %241 = load i64, i64* %208, align 8
  %242 = add i64 %241, 1
  %243 = load i64, i64* %210, align 8
  %244 = and i64 %242, %243
  store i64 %244, i64* %208, align 8
  %245 = add i32 %234, -2
  %246 = load i8*, i8** %207, align 8
  %247 = sub i64 %244, %209
  %248 = and i64 %247, %243
  %249 = getelementptr inbounds i8, i8* %246, i64 %248
  %250 = load i8, i8* %249, align 1
  %251 = getelementptr inbounds i8, i8* %246, i64 %244
  store i8 %250, i8* %251, align 1
  %252 = load i64, i64* %208, align 8
  %253 = add i64 %252, 1
  %254 = load i64, i64* %210, align 8
  %255 = and i64 %253, %254
  store i64 %255, i64* %208, align 8
  %256 = icmp eq i32 %245, 0
  br i1 %256, label %327, label %231

257:                                              ; preds = %137
  %258 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 43
  %259 = load i32, i32* %258, align 8
  %260 = add nsw i32 %259, 1
  store i32 %260, i32* %258, align 8
  %261 = icmp sgt i32 %259, 15
  br i1 %261, label %262, label %267

262:                                              ; preds = %257
  %263 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 46
  %264 = load i32, i32* %263, align 4
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %266, label %267

266:                                              ; preds = %262
  store i32 1, i32* %148, align 4
  br label %267

267:                                              ; preds = %257, %262, %266, %151
  %268 = phi i32 [ %156, %151 ], [ %147, %266 ], [ %147, %262 ], [ %147, %257 ]
  %269 = load i32, i32* %4, align 8
  %270 = add i32 %269, %268
  %271 = lshr i32 %270, 8
  %272 = sub i32 %270, %271
  store i32 %272, i32* %4, align 8
  %273 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 47
  %274 = load i32, i32* %273, align 8
  %275 = add i32 %274, 16
  store i32 %275, i32* %273, align 8
  %276 = icmp ugt i32 %275, 255
  br i1 %276, label %277, label %281

277:                                              ; preds = %267
  store i32 144, i32* %273, align 8
  %278 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 48
  %279 = load i32, i32* %278, align 4
  %280 = lshr i32 %279, 1
  store i32 %280, i32* %278, align 4
  br label %281

281:                                              ; preds = %277, %267
  %282 = sext i32 %268 to i64
  %283 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 29, i64 %282
  %284 = load i16, i16* %283, align 2
  %285 = lshr i16 %284, 8
  %286 = trunc i16 %285 to i8
  %287 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %288 = load i8*, i8** %287, align 8
  %289 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %290 = load i64, i64* %289, align 8
  %291 = add i64 %290, 1
  store i64 %291, i64* %289, align 8
  %292 = getelementptr inbounds i8, i8* %288, i64 %290
  store i8 %286, i8* %292, align 1
  %293 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %294 = load i64, i64* %293, align 8
  %295 = add nsw i64 %294, -1
  store i64 %295, i64* %293, align 8
  %296 = load i16, i16* %283, align 2
  %297 = zext i16 %296 to i32
  %298 = add nuw nsw i32 %297, 1
  %299 = and i32 %297, 255
  %300 = zext i32 %299 to i64
  %301 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 33, i64 %300
  %302 = load i8, i8* %301, align 1
  %303 = add i8 %302, 1
  store i8 %303, i8* %301, align 1
  %304 = and i32 %298, 254
  %305 = icmp ugt i32 %304, 161
  br i1 %305, label %306, label %320

306:                                              ; preds = %281
  %307 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 29, i64 0
  %308 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 33, i64 0
  br label %309

309:                                              ; preds = %306, %309
  tail call void @_ZN6Unpack8CorrHuffEPtPh(%class.Unpack* undef, i16* %307, i8* %308)
  %310 = load i16, i16* %283, align 2
  %311 = zext i16 %310 to i32
  %312 = add nuw nsw i32 %311, 1
  %313 = and i32 %311, 255
  %314 = zext i32 %313 to i64
  %315 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 33, i64 %314
  %316 = load i8, i8* %315, align 1
  %317 = add i8 %316, 1
  store i8 %317, i8* %315, align 1
  %318 = and i32 %312, 254
  %319 = icmp ugt i32 %318, 161
  br i1 %319, label %309, label %320

320:                                              ; preds = %309, %281
  %321 = phi i32 [ %298, %281 ], [ %312, %309 ]
  %322 = phi i8 [ %302, %281 ], [ %316, %309 ]
  %323 = zext i8 %322 to i64
  %324 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 29, i64 %323
  %325 = load i16, i16* %324, align 2
  store i16 %325, i16* %283, align 2
  %326 = trunc i32 %321 to i16
  store i16 %326, i16* %324, align 2
  br label %327

327:                                              ; preds = %231, %320, %162
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack6LongLZEv(%class.Unpack*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 43
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 48
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 16
  store i32 %5, i32* %3, align 4
  %6 = icmp ugt i32 %5, 255
  br i1 %6, label %7, label %11

7:                                                ; preds = %1
  store i32 144, i32* %3, align 4
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 47
  %9 = load i32, i32* %8, align 8
  %10 = lshr i32 %9, 1
  store i32 %10, i32* %8, align 8
  br label %11

11:                                               ; preds = %7, %1
  %12 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 40
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1
  %15 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %14) #11
  %16 = load i32, i32* %12, align 4
  %17 = icmp ugt i32 %16, 121
  br i1 %17, label %18, label %49

18:                                               ; preds = %11
  %19 = and i32 %15, 65520
  %20 = icmp ult i32 %19, 40960
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %14, i32 3) #11
  br label %39

22:                                               ; preds = %18, %22
  %23 = phi i64 [ %26, %22 ], [ 0, %18 ]
  %24 = phi i32 [ %25, %22 ], [ 3, %18 ]
  %25 = add i32 %24, 1
  %26 = add nuw i64 %23, 1
  %27 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZL5DecL2, i64 0, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = icmp ugt i32 %28, %19
  br i1 %29, label %30, label %22

30:                                               ; preds = %22
  %31 = trunc i64 %26 to i32
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %14, i32 %25) #11
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %39, label %33

33:                                               ; preds = %30
  %34 = shl i64 %26, 32
  %35 = add i64 %34, -4294967296
  %36 = ashr exact i64 %35, 32
  %37 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZL5DecL2, i64 0, i64 %36
  %38 = load i32, i32* %37, align 4
  br label %39

39:                                               ; preds = %21, %30, %33
  %40 = phi i32 [ %25, %33 ], [ %25, %30 ], [ 3, %21 ]
  %41 = phi i32 [ %38, %33 ], [ 0, %30 ], [ 0, %21 ]
  %42 = sub i32 %19, %41
  %43 = sub i32 16, %40
  %44 = lshr i32 %42, %43
  %45 = zext i32 %40 to i64
  %46 = getelementptr inbounds [13 x i32], [13 x i32]* @_ZL5PosL2, i64 0, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = add i32 %44, %47
  br label %92

49:                                               ; preds = %11
  %50 = icmp ugt i32 %16, 63
  br i1 %50, label %51, label %82

51:                                               ; preds = %49
  %52 = and i32 %15, 65520
  %53 = icmp ult i32 %52, 32768
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %14, i32 2) #11
  br label %72

55:                                               ; preds = %51, %55
  %56 = phi i64 [ %59, %55 ], [ 0, %51 ]
  %57 = phi i32 [ %58, %55 ], [ 2, %51 ]
  %58 = add i32 %57, 1
  %59 = add nuw i64 %56, 1
  %60 = getelementptr inbounds [11 x i32], [11 x i32]* @_ZL5DecL1, i64 0, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = icmp ugt i32 %61, %52
  br i1 %62, label %63, label %55

63:                                               ; preds = %55
  %64 = trunc i64 %59 to i32
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %14, i32 %58) #11
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %72, label %66

66:                                               ; preds = %63
  %67 = shl i64 %59, 32
  %68 = add i64 %67, -4294967296
  %69 = ashr exact i64 %68, 32
  %70 = getelementptr inbounds [11 x i32], [11 x i32]* @_ZL5DecL1, i64 0, i64 %69
  %71 = load i32, i32* %70, align 4
  br label %72

72:                                               ; preds = %54, %63, %66
  %73 = phi i32 [ %58, %66 ], [ %58, %63 ], [ 2, %54 ]
  %74 = phi i32 [ %71, %66 ], [ 0, %63 ], [ 0, %54 ]
  %75 = sub i32 %52, %74
  %76 = sub i32 16, %73
  %77 = lshr i32 %75, %76
  %78 = zext i32 %73 to i64
  %79 = getelementptr inbounds [13 x i32], [13 x i32]* @_ZL5PosL1, i64 0, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = add i32 %77, %80
  br label %92

82:                                               ; preds = %49
  %83 = icmp ult i32 %15, 256
  br i1 %83, label %84, label %85

84:                                               ; preds = %82
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %14, i32 16) #11
  br label %92

85:                                               ; preds = %82, %85
  %86 = phi i32 [ %90, %85 ], [ 0, %82 ]
  %87 = lshr i32 32768, %86
  %88 = and i32 %87, %15
  %89 = icmp eq i32 %88, 0
  %90 = add i32 %86, 1
  br i1 %89, label %85, label %91

91:                                               ; preds = %85
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %14, i32 %90) #11
  br label %92

92:                                               ; preds = %72, %91, %84, %39
  %93 = phi i32 [ %48, %39 ], [ %81, %72 ], [ %15, %84 ], [ %86, %91 ]
  %94 = load i32, i32* %12, align 4
  %95 = add i32 %94, %93
  %96 = lshr i32 %95, 5
  %97 = sub i32 %95, %96
  store i32 %97, i32* %12, align 4
  %98 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %14) #11
  %99 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 38
  %100 = load i32, i32* %99, align 4
  %101 = icmp ugt i32 %100, 10495
  br i1 %101, label %102, label %127

102:                                              ; preds = %92
  %103 = and i32 %98, 65520
  %104 = icmp ult i32 %103, 4096
  br i1 %104, label %105, label %106

105:                                              ; preds = %102
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %14, i32 5) #11
  br label %123

106:                                              ; preds = %102, %106
  %107 = phi i64 [ %110, %106 ], [ 0, %102 ]
  %108 = phi i32 [ %109, %106 ], [ 5, %102 ]
  %109 = add i32 %108, 1
  %110 = add nuw i64 %107, 1
  %111 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZL6DecHf2, i64 0, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = icmp ugt i32 %112, %103
  br i1 %113, label %114, label %106

114:                                              ; preds = %106
  %115 = trunc i64 %110 to i32
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %14, i32 %109) #11
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %123, label %117

117:                                              ; preds = %114
  %118 = shl i64 %110, 32
  %119 = add i64 %118, -4294967296
  %120 = ashr exact i64 %119, 32
  %121 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZL6DecHf2, i64 0, i64 %120
  %122 = load i32, i32* %121, align 4
  br label %123

123:                                              ; preds = %105, %114, %117
  %124 = phi i32 [ %109, %117 ], [ %109, %114 ], [ 5, %105 ]
  %125 = phi i32 [ %122, %117 ], [ 0, %114 ], [ 0, %105 ]
  %126 = sub i32 %103, %125
  br label %178

127:                                              ; preds = %92
  %128 = icmp ugt i32 %100, 1791
  %129 = and i32 %98, 65520
  br i1 %128, label %130, label %154

130:                                              ; preds = %127
  %131 = icmp ult i32 %129, 8192
  br i1 %131, label %132, label %133

132:                                              ; preds = %130
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %14, i32 5) #11
  br label %150

133:                                              ; preds = %130, %133
  %134 = phi i64 [ %137, %133 ], [ 0, %130 ]
  %135 = phi i32 [ %136, %133 ], [ 5, %130 ]
  %136 = add i32 %135, 1
  %137 = add nuw i64 %134, 1
  %138 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZL6DecHf1, i64 0, i64 %137
  %139 = load i32, i32* %138, align 4
  %140 = icmp ugt i32 %139, %129
  br i1 %140, label %141, label %133

141:                                              ; preds = %133
  %142 = trunc i64 %137 to i32
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %14, i32 %136) #11
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %150, label %144

144:                                              ; preds = %141
  %145 = shl i64 %137, 32
  %146 = add i64 %145, -4294967296
  %147 = ashr exact i64 %146, 32
  %148 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZL6DecHf1, i64 0, i64 %147
  %149 = load i32, i32* %148, align 4
  br label %150

150:                                              ; preds = %132, %141, %144
  %151 = phi i32 [ %136, %144 ], [ %136, %141 ], [ 5, %132 ]
  %152 = phi i32 [ %149, %144 ], [ 0, %141 ], [ 0, %132 ]
  %153 = sub i32 %129, %152
  br label %178

154:                                              ; preds = %127
  %155 = icmp ult i32 %129, 32768
  br i1 %155, label %156, label %157

156:                                              ; preds = %154
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %14, i32 4) #11
  br label %174

157:                                              ; preds = %154, %157
  %158 = phi i64 [ %161, %157 ], [ 0, %154 ]
  %159 = phi i32 [ %160, %157 ], [ 4, %154 ]
  %160 = add i32 %159, 1
  %161 = add nuw i64 %158, 1
  %162 = getelementptr inbounds [9 x i32], [9 x i32]* @_ZL6DecHf0, i64 0, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = icmp ugt i32 %163, %129
  br i1 %164, label %165, label %157

165:                                              ; preds = %157
  %166 = trunc i64 %161 to i32
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %14, i32 %160) #11
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %174, label %168

168:                                              ; preds = %165
  %169 = shl i64 %161, 32
  %170 = add i64 %169, -4294967296
  %171 = ashr exact i64 %170, 32
  %172 = getelementptr inbounds [9 x i32], [9 x i32]* @_ZL6DecHf0, i64 0, i64 %171
  %173 = load i32, i32* %172, align 4
  br label %174

174:                                              ; preds = %156, %165, %168
  %175 = phi i32 [ %160, %168 ], [ %160, %165 ], [ 4, %156 ]
  %176 = phi i32 [ %173, %168 ], [ 0, %165 ], [ 0, %156 ]
  %177 = sub i32 %129, %176
  br label %178

178:                                              ; preds = %150, %174, %123
  %179 = phi i32 [ %151, %150 ], [ %175, %174 ], [ %124, %123 ]
  %180 = phi i32 [ %153, %150 ], [ %177, %174 ], [ %126, %123 ]
  %181 = phi [13 x i32]* [ @_ZL6PosHf1, %150 ], [ @_ZL6PosHf0, %174 ], [ @_ZL6PosHf2, %123 ]
  %182 = sub i32 16, %179
  %183 = lshr i32 %180, %182
  %184 = zext i32 %179 to i64
  %185 = getelementptr inbounds [13 x i32], [13 x i32]* %181, i64 0, i64 %184
  %186 = load i32, i32* %185, align 4
  %187 = add i32 %183, %186
  %188 = load i32, i32* %99, align 4
  %189 = add i32 %188, %187
  %190 = lshr i32 %189, 8
  %191 = sub i32 %189, %190
  store i32 %191, i32* %99, align 4
  %192 = and i32 %187, 255
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 31, i64 %193
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = add nuw nsw i32 %196, 1
  %198 = and i32 %196, 255
  %199 = zext i32 %198 to i64
  %200 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 34, i64 %199
  %201 = load i8, i8* %200, align 1
  %202 = add i8 %201, 1
  store i8 %202, i8* %200, align 1
  %203 = and i32 %197, 255
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %219

205:                                              ; preds = %178
  %206 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 31, i64 0
  %207 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 34, i64 0
  br label %208

208:                                              ; preds = %205, %208
  tail call void @_ZN6Unpack8CorrHuffEPtPh(%class.Unpack* undef, i16* %206, i8* %207)
  %209 = load i16, i16* %194, align 2
  %210 = zext i16 %209 to i32
  %211 = add nuw nsw i32 %210, 1
  %212 = and i32 %210, 255
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 34, i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = add i8 %215, 1
  store i8 %216, i8* %214, align 1
  %217 = and i32 %211, 255
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %208, label %219

219:                                              ; preds = %208, %178
  %220 = phi i32 [ %197, %178 ], [ %211, %208 ]
  %221 = phi i8 [ %201, %178 ], [ %215, %208 ]
  %222 = zext i8 %221 to i64
  %223 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 31, i64 %222
  %224 = load i16, i16* %223, align 2
  store i16 %224, i16* %194, align 2
  %225 = trunc i32 %220 to i16
  store i16 %225, i16* %223, align 2
  %226 = and i32 %220, 65280
  %227 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %14) #11
  %228 = lshr i32 %227, 8
  %229 = or i32 %228, %226
  %230 = lshr i32 %229, 1
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %14, i32 7) #11
  %231 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 41
  %232 = load i32, i32* %231, align 8
  switch i32 %93, label %241 [
    i32 4, label %245
    i32 1, label %245
    i32 0, label %233
  ]

233:                                              ; preds = %219
  %234 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 49
  %235 = load i32, i32* %234, align 8
  %236 = icmp ugt i32 %230, %235
  br i1 %236, label %241, label %237

237:                                              ; preds = %233
  %238 = add i32 %232, 1
  %239 = lshr i32 %238, 8
  %240 = sub i32 %238, %239
  store i32 %240, i32* %231, align 8
  br label %245

241:                                              ; preds = %219, %233
  %242 = icmp eq i32 %232, 0
  br i1 %242, label %245, label %243

243:                                              ; preds = %241
  %244 = add i32 %232, -1
  store i32 %244, i32* %231, align 8
  br label %245

245:                                              ; preds = %219, %219, %241, %237, %243
  %246 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 49
  %247 = load i32, i32* %246, align 8
  %248 = icmp ult i32 %230, %247
  %249 = select i1 %248, i32 3, i32 4
  %250 = add i32 %249, %93
  %251 = icmp ult i32 %229, 514
  %252 = add i32 %250, 8
  %253 = select i1 %251, i32 %252, i32 %250
  %254 = icmp ugt i32 %232, 176
  br i1 %254, label %262, label %255

255:                                              ; preds = %245
  %256 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 37
  %257 = load i32, i32* %256, align 8
  %258 = icmp ugt i32 %257, 10751
  %259 = icmp ult i32 %13, 64
  %260 = and i1 %259, %258
  %261 = select i1 %260, i32 32512, i32 8193
  br label %262

262:                                              ; preds = %255, %245
  %263 = phi i32 [ 32512, %245 ], [ %261, %255 ]
  store i32 %263, i32* %246, align 8
  %264 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 10
  %265 = load i32, i32* %264, align 8
  %266 = add i32 %265, 1
  store i32 %266, i32* %264, align 8
  %267 = zext i32 %265 to i64
  %268 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %267
  store i32 %230, i32* %268, align 4
  %269 = load i32, i32* %264, align 8
  %270 = and i32 %269, 3
  store i32 %270, i32* %264, align 8
  %271 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 11
  store i32 %253, i32* %271, align 4
  %272 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 12
  store i32 %230, i32* %272, align 8
  %273 = zext i32 %253 to i64
  %274 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %275 = load i64, i64* %274, align 8
  %276 = sub nsw i64 %275, %273
  store i64 %276, i64* %274, align 8
  %277 = icmp eq i32 %253, 0
  br i1 %277, label %330, label %278

278:                                              ; preds = %262
  %279 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %280 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %281 = zext i32 %230 to i64
  %282 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %283 = load i64, i64* %280, align 8
  %284 = load i64, i64* %282, align 8
  %285 = and i32 %253, 1
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %299, label %287

287:                                              ; preds = %278
  %288 = add i32 %253, -1
  %289 = load i8*, i8** %279, align 8
  %290 = sub i64 %283, %281
  %291 = and i64 %290, %284
  %292 = getelementptr inbounds i8, i8* %289, i64 %291
  %293 = load i8, i8* %292, align 1
  %294 = getelementptr inbounds i8, i8* %289, i64 %283
  store i8 %293, i8* %294, align 1
  %295 = load i64, i64* %280, align 8
  %296 = add i64 %295, 1
  %297 = load i64, i64* %282, align 8
  %298 = and i64 %296, %297
  store i64 %298, i64* %280, align 8
  br label %299

299:                                              ; preds = %278, %287
  %300 = phi i64 [ %284, %278 ], [ %297, %287 ]
  %301 = phi i64 [ %283, %278 ], [ %298, %287 ]
  %302 = phi i32 [ %253, %278 ], [ %288, %287 ]
  %303 = icmp eq i32 %253, 1
  br i1 %303, label %330, label %304

304:                                              ; preds = %299, %304
  %305 = phi i64 [ %327, %304 ], [ %300, %299 ]
  %306 = phi i64 [ %328, %304 ], [ %301, %299 ]
  %307 = phi i32 [ %318, %304 ], [ %302, %299 ]
  %308 = load i8*, i8** %279, align 8
  %309 = sub i64 %306, %281
  %310 = and i64 %309, %305
  %311 = getelementptr inbounds i8, i8* %308, i64 %310
  %312 = load i8, i8* %311, align 1
  %313 = getelementptr inbounds i8, i8* %308, i64 %306
  store i8 %312, i8* %313, align 1
  %314 = load i64, i64* %280, align 8
  %315 = add i64 %314, 1
  %316 = load i64, i64* %282, align 8
  %317 = and i64 %315, %316
  store i64 %317, i64* %280, align 8
  %318 = add i32 %307, -2
  %319 = load i8*, i8** %279, align 8
  %320 = sub i64 %317, %281
  %321 = and i64 %320, %316
  %322 = getelementptr inbounds i8, i8* %319, i64 %321
  %323 = load i8, i8* %322, align 1
  %324 = getelementptr inbounds i8, i8* %319, i64 %317
  store i8 %323, i8* %324, align 1
  %325 = load i64, i64* %280, align 8
  %326 = add i64 %325, 1
  %327 = load i64, i64* %282, align 8
  %328 = and i64 %326, %327
  store i64 %328, i64* %280, align 8
  %329 = icmp eq i32 %318, 0
  br i1 %329, label %330, label %304

330:                                              ; preds = %299, %304, %262
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack7ShortLZEv(%class.Unpack*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 43
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1
  %4 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %3) #11
  %5 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 45
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 2
  br i1 %7, label %8, label %74

8:                                                ; preds = %1
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %3, i32 1) #11
  %9 = icmp ugt i32 %4, 32767
  br i1 %9, label %10, label %72

10:                                               ; preds = %8
  %11 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 12
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 11
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %17 = load i64, i64* %16, align 8
  %18 = sub nsw i64 %17, %15
  store i64 %18, i64* %16, align 8
  %19 = icmp eq i32 %14, 0
  br i1 %19, label %541, label %20

20:                                               ; preds = %10
  %21 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %22 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %23 = zext i32 %12 to i64
  %24 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %25 = load i64, i64* %22, align 8
  %26 = load i64, i64* %24, align 8
  %27 = and i32 %14, 1
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %41, label %29

29:                                               ; preds = %20
  %30 = add i32 %14, -1
  %31 = load i8*, i8** %21, align 8
  %32 = sub i64 %25, %23
  %33 = and i64 %32, %26
  %34 = getelementptr inbounds i8, i8* %31, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds i8, i8* %31, i64 %25
  store i8 %35, i8* %36, align 1
  %37 = load i64, i64* %22, align 8
  %38 = add i64 %37, 1
  %39 = load i64, i64* %24, align 8
  %40 = and i64 %38, %39
  store i64 %40, i64* %22, align 8
  br label %41

41:                                               ; preds = %20, %29
  %42 = phi i64 [ %26, %20 ], [ %39, %29 ]
  %43 = phi i64 [ %25, %20 ], [ %40, %29 ]
  %44 = phi i32 [ %14, %20 ], [ %30, %29 ]
  %45 = icmp eq i32 %14, 1
  br i1 %45, label %541, label %46

46:                                               ; preds = %41, %46
  %47 = phi i64 [ %69, %46 ], [ %42, %41 ]
  %48 = phi i64 [ %70, %46 ], [ %43, %41 ]
  %49 = phi i32 [ %60, %46 ], [ %44, %41 ]
  %50 = load i8*, i8** %21, align 8
  %51 = sub i64 %48, %23
  %52 = and i64 %51, %47
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds i8, i8* %50, i64 %48
  store i8 %54, i8* %55, align 1
  %56 = load i64, i64* %22, align 8
  %57 = add i64 %56, 1
  %58 = load i64, i64* %24, align 8
  %59 = and i64 %57, %58
  store i64 %59, i64* %22, align 8
  %60 = add i32 %49, -2
  %61 = load i8*, i8** %21, align 8
  %62 = sub i64 %59, %23
  %63 = and i64 %62, %58
  %64 = getelementptr inbounds i8, i8* %61, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = getelementptr inbounds i8, i8* %61, i64 %59
  store i8 %65, i8* %66, align 1
  %67 = load i64, i64* %22, align 8
  %68 = add i64 %67, 1
  %69 = load i64, i64* %24, align 8
  %70 = and i64 %68, %69
  store i64 %70, i64* %22, align 8
  %71 = icmp eq i32 %60, 0
  br i1 %71, label %541, label %46

72:                                               ; preds = %8
  %73 = shl i32 %4, 1
  store i32 0, i32* %5, align 8
  br label %74

74:                                               ; preds = %72, %1
  %75 = phi i32 [ %73, %72 ], [ %4, %1 ]
  %76 = lshr i32 %75, 8
  %77 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 39
  %78 = load i32, i32* %77, align 8
  %79 = icmp ult i32 %78, 37
  %80 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 42
  br i1 %79, label %81, label %108

81:                                               ; preds = %74, %94
  %82 = phi i32 [ %99, %94 ], [ 0, %74 ]
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds [15 x i32], [15 x i32]* @_ZZN6Unpack7ShortLZEvE9ShortXor1, i64 0, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = xor i32 %85, %76
  %87 = icmp eq i32 %82, 1
  br i1 %87, label %88, label %91

88:                                               ; preds = %81
  %89 = load i32, i32* %80, align 4
  %90 = add nsw i32 %89, 3
  br label %94

91:                                               ; preds = %81
  %92 = getelementptr inbounds [16 x i32], [16 x i32]* @_ZZN6Unpack7ShortLZEvE9ShortLen1, i64 0, i64 %83
  %93 = load i32, i32* %92, align 4
  br label %94

94:                                               ; preds = %91, %88
  %95 = phi i32 [ %90, %88 ], [ %93, %91 ]
  %96 = ashr i32 -256, %95
  %97 = and i32 %96, %86
  %98 = icmp eq i32 %97, 0
  %99 = add i32 %82, 1
  br i1 %98, label %100, label %81

100:                                              ; preds = %94
  br i1 %87, label %101, label %104

101:                                              ; preds = %100
  %102 = load i32, i32* %80, align 4
  %103 = add nsw i32 %102, 3
  br label %135

104:                                              ; preds = %100
  %105 = zext i32 %82 to i64
  %106 = getelementptr inbounds [16 x i32], [16 x i32]* @_ZZN6Unpack7ShortLZEvE9ShortLen1, i64 0, i64 %105
  %107 = load i32, i32* %106, align 4
  br label %135

108:                                              ; preds = %74, %121
  %109 = phi i32 [ %126, %121 ], [ 0, %74 ]
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds [15 x i32], [15 x i32]* @_ZZN6Unpack7ShortLZEvE9ShortXor2, i64 0, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = xor i32 %112, %76
  %114 = icmp eq i32 %109, 3
  br i1 %114, label %115, label %118

115:                                              ; preds = %108
  %116 = load i32, i32* %80, align 4
  %117 = add nsw i32 %116, 3
  br label %121

118:                                              ; preds = %108
  %119 = getelementptr inbounds [16 x i32], [16 x i32]* @_ZZN6Unpack7ShortLZEvE9ShortLen2, i64 0, i64 %110
  %120 = load i32, i32* %119, align 4
  br label %121

121:                                              ; preds = %118, %115
  %122 = phi i32 [ %117, %115 ], [ %120, %118 ]
  %123 = ashr i32 -256, %122
  %124 = and i32 %123, %113
  %125 = icmp eq i32 %124, 0
  %126 = add i32 %109, 1
  br i1 %125, label %127, label %108

127:                                              ; preds = %121
  br i1 %114, label %128, label %131

128:                                              ; preds = %127
  %129 = load i32, i32* %80, align 4
  %130 = add nsw i32 %129, 3
  br label %135

131:                                              ; preds = %127
  %132 = zext i32 %109 to i64
  %133 = getelementptr inbounds [16 x i32], [16 x i32]* @_ZZN6Unpack7ShortLZEvE9ShortLen2, i64 0, i64 %132
  %134 = load i32, i32* %133, align 4
  br label %135

135:                                              ; preds = %128, %131, %101, %104
  %136 = phi i32 [ %103, %101 ], [ %107, %104 ], [ %130, %128 ], [ %134, %131 ]
  %137 = phi i32 [ %82, %101 ], [ %82, %104 ], [ %109, %128 ], [ %109, %131 ]
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %3, i32 %136) #11
  %138 = icmp ugt i32 %137, 8
  br i1 %138, label %139, label %425

139:                                              ; preds = %135
  %140 = icmp eq i32 %137, 9
  br i1 %140, label %141, label %205

141:                                              ; preds = %139
  %142 = load i32, i32* %5, align 8
  %143 = add nsw i32 %142, 1
  store i32 %143, i32* %5, align 8
  %144 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 12
  %145 = load i32, i32* %144, align 8
  %146 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 11
  %147 = load i32, i32* %146, align 4
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %150 = load i64, i64* %149, align 8
  %151 = sub nsw i64 %150, %148
  store i64 %151, i64* %149, align 8
  %152 = icmp eq i32 %147, 0
  br i1 %152, label %541, label %153

153:                                              ; preds = %141
  %154 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %155 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %156 = zext i32 %145 to i64
  %157 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %158 = load i64, i64* %155, align 8
  %159 = load i64, i64* %157, align 8
  %160 = and i32 %147, 1
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %174, label %162

162:                                              ; preds = %153
  %163 = add i32 %147, -1
  %164 = load i8*, i8** %154, align 8
  %165 = sub i64 %158, %156
  %166 = and i64 %165, %159
  %167 = getelementptr inbounds i8, i8* %164, i64 %166
  %168 = load i8, i8* %167, align 1
  %169 = getelementptr inbounds i8, i8* %164, i64 %158
  store i8 %168, i8* %169, align 1
  %170 = load i64, i64* %155, align 8
  %171 = add i64 %170, 1
  %172 = load i64, i64* %157, align 8
  %173 = and i64 %171, %172
  store i64 %173, i64* %155, align 8
  br label %174

174:                                              ; preds = %153, %162
  %175 = phi i64 [ %159, %153 ], [ %172, %162 ]
  %176 = phi i64 [ %158, %153 ], [ %173, %162 ]
  %177 = phi i32 [ %147, %153 ], [ %163, %162 ]
  %178 = icmp eq i32 %147, 1
  br i1 %178, label %541, label %179

179:                                              ; preds = %174, %179
  %180 = phi i64 [ %202, %179 ], [ %175, %174 ]
  %181 = phi i64 [ %203, %179 ], [ %176, %174 ]
  %182 = phi i32 [ %193, %179 ], [ %177, %174 ]
  %183 = load i8*, i8** %154, align 8
  %184 = sub i64 %181, %156
  %185 = and i64 %184, %180
  %186 = getelementptr inbounds i8, i8* %183, i64 %185
  %187 = load i8, i8* %186, align 1
  %188 = getelementptr inbounds i8, i8* %183, i64 %181
  store i8 %187, i8* %188, align 1
  %189 = load i64, i64* %155, align 8
  %190 = add i64 %189, 1
  %191 = load i64, i64* %157, align 8
  %192 = and i64 %190, %191
  store i64 %192, i64* %155, align 8
  %193 = add i32 %182, -2
  %194 = load i8*, i8** %154, align 8
  %195 = sub i64 %192, %156
  %196 = and i64 %195, %191
  %197 = getelementptr inbounds i8, i8* %194, i64 %196
  %198 = load i8, i8* %197, align 1
  %199 = getelementptr inbounds i8, i8* %194, i64 %192
  store i8 %198, i8* %199, align 1
  %200 = load i64, i64* %155, align 8
  %201 = add i64 %200, 1
  %202 = load i64, i64* %157, align 8
  %203 = and i64 %201, %202
  store i64 %203, i64* %155, align 8
  %204 = icmp eq i32 %193, 0
  br i1 %204, label %541, label %179

205:                                              ; preds = %139
  %206 = icmp eq i32 %137, 14
  store i32 0, i32* %5, align 8
  br i1 %206, label %207, label %303

207:                                              ; preds = %205
  %208 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %3) #11
  %209 = and i32 %208, 65520
  %210 = icmp ult i32 %209, 40960
  br i1 %210, label %211, label %212

211:                                              ; preds = %207
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %3, i32 3) #11
  br label %229

212:                                              ; preds = %207, %212
  %213 = phi i64 [ %216, %212 ], [ 0, %207 ]
  %214 = phi i32 [ %215, %212 ], [ 3, %207 ]
  %215 = add i32 %214, 1
  %216 = add nuw i64 %213, 1
  %217 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZL5DecL2, i64 0, i64 %216
  %218 = load i32, i32* %217, align 4
  %219 = icmp ugt i32 %218, %209
  br i1 %219, label %220, label %212

220:                                              ; preds = %212
  %221 = trunc i64 %216 to i32
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %3, i32 %215) #11
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %229, label %223

223:                                              ; preds = %220
  %224 = shl i64 %216, 32
  %225 = add i64 %224, -4294967296
  %226 = ashr exact i64 %225, 32
  %227 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZL5DecL2, i64 0, i64 %226
  %228 = load i32, i32* %227, align 4
  br label %229

229:                                              ; preds = %211, %220, %223
  %230 = phi i32 [ %215, %223 ], [ %215, %220 ], [ 3, %211 ]
  %231 = phi i32 [ %228, %223 ], [ 0, %220 ], [ 0, %211 ]
  %232 = sub i32 %209, %231
  %233 = sub i32 16, %230
  %234 = lshr i32 %232, %233
  %235 = zext i32 %230 to i64
  %236 = getelementptr inbounds [13 x i32], [13 x i32]* @_ZL5PosL2, i64 0, i64 %235
  %237 = load i32, i32* %236, align 4
  %238 = add i32 %237, 5
  %239 = add i32 %238, %234
  %240 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %3) #11
  %241 = lshr i32 %240, 1
  %242 = or i32 %241, 32768
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %3, i32 15) #11
  %243 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 11
  store i32 %239, i32* %243, align 4
  %244 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 12
  store i32 %242, i32* %244, align 8
  %245 = zext i32 %239 to i64
  %246 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %247 = load i64, i64* %246, align 8
  %248 = sub nsw i64 %247, %245
  store i64 %248, i64* %246, align 8
  %249 = icmp eq i32 %239, 0
  br i1 %249, label %541, label %250

250:                                              ; preds = %229
  %251 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %252 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %253 = zext i32 %242 to i64
  %254 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %255 = load i64, i64* %252, align 8
  %256 = load i64, i64* %254, align 8
  %257 = add i32 %237, %234
  %258 = and i32 %239, 1
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %272, label %260

260:                                              ; preds = %250
  %261 = add i32 %239, -1
  %262 = load i8*, i8** %251, align 8
  %263 = sub i64 %255, %253
  %264 = and i64 %263, %256
  %265 = getelementptr inbounds i8, i8* %262, i64 %264
  %266 = load i8, i8* %265, align 1
  %267 = getelementptr inbounds i8, i8* %262, i64 %255
  store i8 %266, i8* %267, align 1
  %268 = load i64, i64* %252, align 8
  %269 = add i64 %268, 1
  %270 = load i64, i64* %254, align 8
  %271 = and i64 %269, %270
  store i64 %271, i64* %252, align 8
  br label %272

272:                                              ; preds = %250, %260
  %273 = phi i64 [ %256, %250 ], [ %270, %260 ]
  %274 = phi i64 [ %255, %250 ], [ %271, %260 ]
  %275 = phi i32 [ %239, %250 ], [ %261, %260 ]
  %276 = icmp eq i32 %257, -4
  br i1 %276, label %541, label %277

277:                                              ; preds = %272, %277
  %278 = phi i64 [ %300, %277 ], [ %273, %272 ]
  %279 = phi i64 [ %301, %277 ], [ %274, %272 ]
  %280 = phi i32 [ %291, %277 ], [ %275, %272 ]
  %281 = load i8*, i8** %251, align 8
  %282 = sub i64 %279, %253
  %283 = and i64 %282, %278
  %284 = getelementptr inbounds i8, i8* %281, i64 %283
  %285 = load i8, i8* %284, align 1
  %286 = getelementptr inbounds i8, i8* %281, i64 %279
  store i8 %285, i8* %286, align 1
  %287 = load i64, i64* %252, align 8
  %288 = add i64 %287, 1
  %289 = load i64, i64* %254, align 8
  %290 = and i64 %288, %289
  store i64 %290, i64* %252, align 8
  %291 = add i32 %280, -2
  %292 = load i8*, i8** %251, align 8
  %293 = sub i64 %290, %253
  %294 = and i64 %293, %289
  %295 = getelementptr inbounds i8, i8* %292, i64 %294
  %296 = load i8, i8* %295, align 1
  %297 = getelementptr inbounds i8, i8* %292, i64 %290
  store i8 %296, i8* %297, align 1
  %298 = load i64, i64* %252, align 8
  %299 = add i64 %298, 1
  %300 = load i64, i64* %254, align 8
  %301 = and i64 %299, %300
  store i64 %301, i64* %252, align 8
  %302 = icmp eq i32 %291, 0
  br i1 %302, label %541, label %277

303:                                              ; preds = %205
  %304 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 10
  %305 = load i32, i32* %304, align 8
  %306 = sub i32 1, %137
  %307 = add i32 %306, %305
  %308 = and i32 %307, 3
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %309
  %311 = load i32, i32* %310, align 4
  %312 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %3) #11
  %313 = and i32 %312, 65520
  %314 = icmp ult i32 %313, 32768
  br i1 %314, label %315, label %316

315:                                              ; preds = %303
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %3, i32 2) #11
  br label %333

316:                                              ; preds = %303, %316
  %317 = phi i64 [ %320, %316 ], [ 0, %303 ]
  %318 = phi i32 [ %319, %316 ], [ 2, %303 ]
  %319 = add i32 %318, 1
  %320 = add nuw i64 %317, 1
  %321 = getelementptr inbounds [11 x i32], [11 x i32]* @_ZL5DecL1, i64 0, i64 %320
  %322 = load i32, i32* %321, align 4
  %323 = icmp ugt i32 %322, %313
  br i1 %323, label %324, label %316

324:                                              ; preds = %316
  %325 = trunc i64 %320 to i32
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %3, i32 %319) #11
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %333, label %327

327:                                              ; preds = %324
  %328 = shl i64 %320, 32
  %329 = add i64 %328, -4294967296
  %330 = ashr exact i64 %329, 32
  %331 = getelementptr inbounds [11 x i32], [11 x i32]* @_ZL5DecL1, i64 0, i64 %330
  %332 = load i32, i32* %331, align 4
  br label %333

333:                                              ; preds = %315, %324, %327
  %334 = phi i32 [ %319, %327 ], [ %319, %324 ], [ 2, %315 ]
  %335 = phi i32 [ %332, %327 ], [ 0, %324 ], [ 0, %315 ]
  %336 = sub i32 %313, %335
  %337 = sub i32 16, %334
  %338 = lshr i32 %336, %337
  %339 = zext i32 %334 to i64
  %340 = getelementptr inbounds [13 x i32], [13 x i32]* @_ZL5PosL1, i64 0, i64 %339
  %341 = load i32, i32* %340, align 4
  %342 = add i32 %338, %341
  %343 = add i32 %342, 2
  %344 = icmp eq i32 %343, 257
  %345 = icmp eq i32 %137, 10
  %346 = and i1 %345, %344
  br i1 %346, label %347, label %350

347:                                              ; preds = %333
  %348 = load i32, i32* %80, align 4
  %349 = xor i32 %348, 1
  store i32 %349, i32* %80, align 4
  br label %541

350:                                              ; preds = %333
  %351 = icmp ugt i32 %311, 256
  %352 = add i32 %342, 3
  %353 = select i1 %351, i32 %352, i32 %343
  %354 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 49
  %355 = load i32, i32* %354, align 8
  %356 = icmp uge i32 %311, %355
  %357 = zext i1 %356 to i32
  %358 = add i32 %353, %357
  %359 = load i32, i32* %304, align 8
  %360 = add i32 %359, 1
  store i32 %360, i32* %304, align 8
  %361 = zext i32 %359 to i64
  %362 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %361
  store i32 %311, i32* %362, align 4
  %363 = load i32, i32* %304, align 8
  %364 = and i32 %363, 3
  store i32 %364, i32* %304, align 8
  %365 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 11
  store i32 %358, i32* %365, align 4
  %366 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 12
  store i32 %311, i32* %366, align 8
  %367 = zext i32 %358 to i64
  %368 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %369 = load i64, i64* %368, align 8
  %370 = sub nsw i64 %369, %367
  store i64 %370, i64* %368, align 8
  %371 = icmp eq i32 %358, 0
  br i1 %371, label %541, label %372

372:                                              ; preds = %350
  %373 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %374 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %375 = zext i32 %311 to i64
  %376 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %377 = load i64, i64* %374, align 8
  %378 = load i64, i64* %376, align 8
  %379 = add i32 %353, %357
  %380 = and i32 %358, 1
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %394, label %382

382:                                              ; preds = %372
  %383 = add i32 %358, -1
  %384 = load i8*, i8** %373, align 8
  %385 = sub i64 %377, %375
  %386 = and i64 %385, %378
  %387 = getelementptr inbounds i8, i8* %384, i64 %386
  %388 = load i8, i8* %387, align 1
  %389 = getelementptr inbounds i8, i8* %384, i64 %377
  store i8 %388, i8* %389, align 1
  %390 = load i64, i64* %374, align 8
  %391 = add i64 %390, 1
  %392 = load i64, i64* %376, align 8
  %393 = and i64 %391, %392
  store i64 %393, i64* %374, align 8
  br label %394

394:                                              ; preds = %372, %382
  %395 = phi i64 [ %378, %372 ], [ %392, %382 ]
  %396 = phi i64 [ %377, %372 ], [ %393, %382 ]
  %397 = phi i32 [ %358, %372 ], [ %383, %382 ]
  %398 = icmp eq i32 %379, 1
  br i1 %398, label %541, label %399

399:                                              ; preds = %394, %399
  %400 = phi i64 [ %422, %399 ], [ %395, %394 ]
  %401 = phi i64 [ %423, %399 ], [ %396, %394 ]
  %402 = phi i32 [ %413, %399 ], [ %397, %394 ]
  %403 = load i8*, i8** %373, align 8
  %404 = sub i64 %401, %375
  %405 = and i64 %404, %400
  %406 = getelementptr inbounds i8, i8* %403, i64 %405
  %407 = load i8, i8* %406, align 1
  %408 = getelementptr inbounds i8, i8* %403, i64 %401
  store i8 %407, i8* %408, align 1
  %409 = load i64, i64* %374, align 8
  %410 = add i64 %409, 1
  %411 = load i64, i64* %376, align 8
  %412 = and i64 %410, %411
  store i64 %412, i64* %374, align 8
  %413 = add i32 %402, -2
  %414 = load i8*, i8** %373, align 8
  %415 = sub i64 %412, %375
  %416 = and i64 %415, %411
  %417 = getelementptr inbounds i8, i8* %414, i64 %416
  %418 = load i8, i8* %417, align 1
  %419 = getelementptr inbounds i8, i8* %414, i64 %412
  store i8 %418, i8* %419, align 1
  %420 = load i64, i64* %374, align 8
  %421 = add i64 %420, 1
  %422 = load i64, i64* %376, align 8
  %423 = and i64 %421, %422
  store i64 %423, i64* %374, align 8
  %424 = icmp eq i32 %413, 0
  br i1 %424, label %541, label %399

425:                                              ; preds = %135
  store i32 0, i32* %5, align 8
  %426 = load i32, i32* %77, align 8
  %427 = add i32 %426, %137
  %428 = lshr i32 %427, 4
  %429 = sub i32 %427, %428
  store i32 %429, i32* %77, align 8
  %430 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %3) #11
  %431 = and i32 %430, 65520
  %432 = icmp ult i32 %431, 4096
  br i1 %432, label %433, label %434

433:                                              ; preds = %425
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %3, i32 5) #11
  br label %451

434:                                              ; preds = %425, %434
  %435 = phi i64 [ %438, %434 ], [ 0, %425 ]
  %436 = phi i32 [ %437, %434 ], [ 5, %425 ]
  %437 = add i32 %436, 1
  %438 = add nuw i64 %435, 1
  %439 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZL6DecHf2, i64 0, i64 %438
  %440 = load i32, i32* %439, align 4
  %441 = icmp ugt i32 %440, %431
  br i1 %441, label %442, label %434

442:                                              ; preds = %434
  %443 = trunc i64 %438 to i32
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %3, i32 %437) #11
  %444 = icmp eq i32 %443, 0
  br i1 %444, label %451, label %445

445:                                              ; preds = %442
  %446 = shl i64 %438, 32
  %447 = add i64 %446, -4294967296
  %448 = ashr exact i64 %447, 32
  %449 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZL6DecHf2, i64 0, i64 %448
  %450 = load i32, i32* %449, align 4
  br label %451

451:                                              ; preds = %433, %442, %445
  %452 = phi i32 [ %437, %445 ], [ %437, %442 ], [ 5, %433 ]
  %453 = phi i32 [ %450, %445 ], [ 0, %442 ], [ 0, %433 ]
  %454 = sub i32 %431, %453
  %455 = sub i32 16, %452
  %456 = lshr i32 %454, %455
  %457 = zext i32 %452 to i64
  %458 = getelementptr inbounds [13 x i32], [13 x i32]* @_ZL6PosHf2, i64 0, i64 %457
  %459 = load i32, i32* %458, align 4
  %460 = add i32 %456, %459
  %461 = and i32 %460, 255
  %462 = zext i32 %461 to i64
  %463 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 30, i64 %462
  %464 = load i16, i16* %463, align 2
  %465 = zext i16 %464 to i32
  %466 = icmp eq i32 %461, 0
  br i1 %466, label %472, label %467

467:                                              ; preds = %451
  %468 = add nsw i32 %461, -1
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 30, i64 %469
  %471 = load i16, i16* %470, align 2
  store i16 %471, i16* %463, align 2
  store i16 %464, i16* %470, align 2
  br label %472

472:                                              ; preds = %451, %467
  %473 = add i32 %137, 2
  %474 = add nuw nsw i32 %465, 1
  %475 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 10
  %476 = load i32, i32* %475, align 8
  %477 = add i32 %476, 1
  store i32 %477, i32* %475, align 8
  %478 = zext i32 %476 to i64
  %479 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %478
  store i32 %474, i32* %479, align 4
  %480 = load i32, i32* %475, align 8
  %481 = and i32 %480, 3
  store i32 %481, i32* %475, align 8
  %482 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 11
  store i32 %473, i32* %482, align 4
  %483 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 12
  store i32 %474, i32* %483, align 8
  %484 = zext i32 %473 to i64
  %485 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %486 = load i64, i64* %485, align 8
  %487 = sub nsw i64 %486, %484
  store i64 %487, i64* %485, align 8
  %488 = icmp eq i32 %473, 0
  br i1 %488, label %541, label %489

489:                                              ; preds = %472
  %490 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %491 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %492 = zext i32 %474 to i64
  %493 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %494 = load i64, i64* %491, align 8
  %495 = load i64, i64* %493, align 8
  %496 = and i32 %473, 1
  %497 = icmp eq i32 %496, 0
  br i1 %497, label %510, label %498

498:                                              ; preds = %489
  %499 = add i32 %137, 1
  %500 = load i8*, i8** %490, align 8
  %501 = sub i64 %494, %492
  %502 = and i64 %501, %495
  %503 = getelementptr inbounds i8, i8* %500, i64 %502
  %504 = load i8, i8* %503, align 1
  %505 = getelementptr inbounds i8, i8* %500, i64 %494
  store i8 %504, i8* %505, align 1
  %506 = load i64, i64* %491, align 8
  %507 = add i64 %506, 1
  %508 = load i64, i64* %493, align 8
  %509 = and i64 %507, %508
  store i64 %509, i64* %491, align 8
  br label %510

510:                                              ; preds = %489, %498
  %511 = phi i64 [ %495, %489 ], [ %508, %498 ]
  %512 = phi i64 [ %494, %489 ], [ %509, %498 ]
  %513 = phi i32 [ %473, %489 ], [ %499, %498 ]
  %514 = icmp eq i32 %137, -1
  br i1 %514, label %541, label %515

515:                                              ; preds = %510, %515
  %516 = phi i64 [ %538, %515 ], [ %511, %510 ]
  %517 = phi i64 [ %539, %515 ], [ %512, %510 ]
  %518 = phi i32 [ %529, %515 ], [ %513, %510 ]
  %519 = load i8*, i8** %490, align 8
  %520 = sub i64 %517, %492
  %521 = and i64 %520, %516
  %522 = getelementptr inbounds i8, i8* %519, i64 %521
  %523 = load i8, i8* %522, align 1
  %524 = getelementptr inbounds i8, i8* %519, i64 %517
  store i8 %523, i8* %524, align 1
  %525 = load i64, i64* %491, align 8
  %526 = add i64 %525, 1
  %527 = load i64, i64* %493, align 8
  %528 = and i64 %526, %527
  store i64 %528, i64* %491, align 8
  %529 = add i32 %518, -2
  %530 = load i8*, i8** %490, align 8
  %531 = sub i64 %528, %492
  %532 = and i64 %531, %527
  %533 = getelementptr inbounds i8, i8* %530, i64 %532
  %534 = load i8, i8* %533, align 1
  %535 = getelementptr inbounds i8, i8* %530, i64 %528
  store i8 %534, i8* %535, align 1
  %536 = load i64, i64* %491, align 8
  %537 = add i64 %536, 1
  %538 = load i64, i64* %493, align 8
  %539 = and i64 %537, %538
  store i64 %539, i64* %491, align 8
  %540 = icmp eq i32 %529, 0
  br i1 %540, label %541, label %515

541:                                              ; preds = %510, %515, %394, %399, %272, %277, %174, %179, %41, %46, %472, %350, %229, %141, %10, %347
  ret void
}

declare i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput*) local_unnamed_addr #5

declare void @_ZN8BitInput8faddbitsEj(%class.BitInput*, i32) local_unnamed_addr #5

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6Unpack12CopyString15Ejj(%class.Unpack* nocapture, i32, i32) local_unnamed_addr #8 align 2 {
  %4 = zext i32 %2 to i64
  %5 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %6 = load i64, i64* %5, align 8
  %7 = sub nsw i64 %6, %4
  store i64 %7, i64* %5, align 8
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %61, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %11 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %12 = zext i32 %1 to i64
  %13 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %14 = load i64, i64* %11, align 8
  %15 = load i64, i64* %13, align 8
  %16 = and i32 %2, 1
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %9
  %19 = add i32 %2, -1
  %20 = load i8*, i8** %10, align 8
  %21 = sub i64 %14, %12
  %22 = and i64 %21, %15
  %23 = getelementptr inbounds i8, i8* %20, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds i8, i8* %20, i64 %14
  store i8 %24, i8* %25, align 1
  %26 = load i64, i64* %11, align 8
  %27 = add i64 %26, 1
  %28 = load i64, i64* %13, align 8
  %29 = and i64 %27, %28
  store i64 %29, i64* %11, align 8
  br label %30

30:                                               ; preds = %9, %18
  %31 = phi i64 [ %15, %9 ], [ %28, %18 ]
  %32 = phi i64 [ %14, %9 ], [ %29, %18 ]
  %33 = phi i32 [ %2, %9 ], [ %19, %18 ]
  %34 = icmp eq i32 %2, 1
  br i1 %34, label %61, label %35

35:                                               ; preds = %30, %35
  %36 = phi i64 [ %58, %35 ], [ %31, %30 ]
  %37 = phi i64 [ %59, %35 ], [ %32, %30 ]
  %38 = phi i32 [ %49, %35 ], [ %33, %30 ]
  %39 = load i8*, i8** %10, align 8
  %40 = sub i64 %37, %12
  %41 = and i64 %40, %36
  %42 = getelementptr inbounds i8, i8* %39, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds i8, i8* %39, i64 %37
  store i8 %43, i8* %44, align 1
  %45 = load i64, i64* %11, align 8
  %46 = add i64 %45, 1
  %47 = load i64, i64* %13, align 8
  %48 = and i64 %46, %47
  store i64 %48, i64* %11, align 8
  %49 = add i32 %38, -2
  %50 = load i8*, i8** %10, align 8
  %51 = sub i64 %48, %12
  %52 = and i64 %51, %47
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds i8, i8* %50, i64 %48
  store i8 %54, i8* %55, align 1
  %56 = load i64, i64* %11, align 8
  %57 = add i64 %56, 1
  %58 = load i64, i64* %13, align 8
  %59 = and i64 %57, %58
  store i64 %59, i64* %11, align 8
  %60 = icmp eq i32 %49, 0
  br i1 %60, label %61, label %35

61:                                               ; preds = %30, %35, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6Unpack9DecodeNumEjjPjS0_(%class.Unpack*, i32, i32, i32* nocapture readonly, i32* nocapture readonly) local_unnamed_addr #0 align 2 {
  %6 = and i32 %1, 65520
  %7 = load i32, i32* %3, align 4
  %8 = icmp ugt i32 %7, %6
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %10, i32 %2) #11
  br label %29

11:                                               ; preds = %5, %11
  %12 = phi i64 [ %15, %11 ], [ 0, %5 ]
  %13 = phi i32 [ %14, %11 ], [ %2, %5 ]
  %14 = add i32 %13, 1
  %15 = add nuw i64 %12, 1
  %16 = getelementptr inbounds i32, i32* %3, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = icmp ugt i32 %17, %6
  br i1 %18, label %19, label %11

19:                                               ; preds = %11
  %20 = trunc i64 %15 to i32
  %21 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %21, i32 %14) #11
  %22 = icmp eq i32 %20, 0
  br i1 %22, label %29, label %23

23:                                               ; preds = %19
  %24 = shl i64 %15, 32
  %25 = add i64 %24, -4294967296
  %26 = ashr exact i64 %25, 32
  %27 = getelementptr inbounds i32, i32* %3, i64 %26
  %28 = load i32, i32* %27, align 4
  br label %29

29:                                               ; preds = %9, %19, %23
  %30 = phi i32 [ %14, %23 ], [ %14, %19 ], [ %2, %9 ]
  %31 = phi i32 [ %28, %23 ], [ 0, %19 ], [ 0, %9 ]
  %32 = sub i32 %6, %31
  %33 = sub i32 16, %30
  %34 = lshr i32 %32, %33
  %35 = zext i32 %30 to i64
  %36 = getelementptr inbounds i32, i32* %4, i64 %35
  %37 = load i32, i32* %36, align 4
  %38 = add i32 %34, %37
  ret i32 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack8CorrHuffEPtPh(%class.Unpack* nocapture readnone, i16* nocapture, i8* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr i16, i16* %1, i64 32
  %5 = bitcast i16* %1 to <8 x i16>*
  %6 = load <8 x i16>, <8 x i16>* %5, align 2
  %7 = and <8 x i16> %6, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %8 = or <8 x i16> %7, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %9 = bitcast i16* %1 to <8 x i16>*
  store <8 x i16> %8, <8 x i16>* %9, align 2
  %10 = getelementptr i16, i16* %1, i64 8
  %11 = bitcast i16* %10 to <8 x i16>*
  %12 = load <8 x i16>, <8 x i16>* %11, align 2
  %13 = and <8 x i16> %12, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %14 = or <8 x i16> %13, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %15 = bitcast i16* %10 to <8 x i16>*
  store <8 x i16> %14, <8 x i16>* %15, align 2
  %16 = getelementptr i16, i16* %1, i64 16
  %17 = bitcast i16* %16 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 2
  %19 = and <8 x i16> %18, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %20 = or <8 x i16> %19, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %21 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> %20, <8 x i16>* %21, align 2
  %22 = getelementptr i16, i16* %1, i64 24
  %23 = bitcast i16* %22 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 2
  %25 = and <8 x i16> %24, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %26 = or <8 x i16> %25, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %27 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> %26, <8 x i16>* %27, align 2
  %28 = getelementptr i16, i16* %1, i64 64
  %29 = bitcast i16* %4 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 2
  %31 = and <8 x i16> %30, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %32 = or <8 x i16> %31, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %33 = bitcast i16* %4 to <8 x i16>*
  store <8 x i16> %32, <8 x i16>* %33, align 2
  %34 = getelementptr i16, i16* %1, i64 40
  %35 = bitcast i16* %34 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 2
  %37 = and <8 x i16> %36, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %38 = or <8 x i16> %37, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %39 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> %38, <8 x i16>* %39, align 2
  %40 = getelementptr i16, i16* %1, i64 48
  %41 = bitcast i16* %40 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 2
  %43 = and <8 x i16> %42, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %44 = or <8 x i16> %43, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %45 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> %44, <8 x i16>* %45, align 2
  %46 = getelementptr i16, i16* %1, i64 56
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2
  %49 = and <8 x i16> %48, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %50 = or <8 x i16> %49, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %51 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %51, align 2
  %52 = getelementptr i16, i16* %1, i64 96
  %53 = bitcast i16* %28 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 2
  %55 = and <8 x i16> %54, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %56 = or <8 x i16> %55, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %57 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2
  %58 = getelementptr i16, i16* %1, i64 72
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2
  %61 = and <8 x i16> %60, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %62 = or <8 x i16> %61, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %63 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %63, align 2
  %64 = getelementptr i16, i16* %1, i64 80
  %65 = bitcast i16* %64 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2
  %67 = and <8 x i16> %66, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %68 = or <8 x i16> %67, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %69 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 2
  %70 = getelementptr i16, i16* %1, i64 88
  %71 = bitcast i16* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2
  %73 = and <8 x i16> %72, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %74 = or <8 x i16> %73, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %75 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %75, align 2
  %76 = getelementptr i16, i16* %1, i64 128
  %77 = bitcast i16* %52 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2
  %79 = and <8 x i16> %78, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %80 = or <8 x i16> %79, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %81 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %81, align 2
  %82 = getelementptr i16, i16* %1, i64 104
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2
  %85 = and <8 x i16> %84, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %86 = or <8 x i16> %85, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %87 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %87, align 2
  %88 = getelementptr i16, i16* %1, i64 112
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2
  %91 = and <8 x i16> %90, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %92 = or <8 x i16> %91, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %93 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %93, align 2
  %94 = getelementptr i16, i16* %1, i64 120
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2
  %97 = and <8 x i16> %96, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %98 = or <8 x i16> %97, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %99 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %99, align 2
  %100 = getelementptr i16, i16* %1, i64 160
  %101 = bitcast i16* %76 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2
  %103 = and <8 x i16> %102, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %104 = or <8 x i16> %103, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %105 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %105, align 2
  %106 = getelementptr i16, i16* %1, i64 136
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2
  %109 = and <8 x i16> %108, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %110 = or <8 x i16> %109, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %111 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %111, align 2
  %112 = getelementptr i16, i16* %1, i64 144
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2
  %115 = and <8 x i16> %114, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %116 = or <8 x i16> %115, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %117 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %117, align 2
  %118 = getelementptr i16, i16* %1, i64 152
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2
  %121 = and <8 x i16> %120, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %122 = or <8 x i16> %121, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %123 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %123, align 2
  %124 = getelementptr i16, i16* %1, i64 192
  %125 = bitcast i16* %100 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2
  %127 = and <8 x i16> %126, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %128 = or <8 x i16> %127, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %129 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %129, align 2
  %130 = getelementptr i16, i16* %1, i64 168
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2
  %133 = and <8 x i16> %132, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %134 = or <8 x i16> %133, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %135 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %135, align 2
  %136 = getelementptr i16, i16* %1, i64 176
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2
  %139 = and <8 x i16> %138, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %140 = or <8 x i16> %139, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %141 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %140, <8 x i16>* %141, align 2
  %142 = getelementptr i16, i16* %1, i64 184
  %143 = bitcast i16* %142 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 2
  %145 = and <8 x i16> %144, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %146 = or <8 x i16> %145, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %147 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %147, align 2
  %148 = getelementptr i16, i16* %1, i64 224
  %149 = bitcast i16* %124 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = and <8 x i16> %150, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %152 = or <8 x i16> %151, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %153 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %153, align 2
  %154 = getelementptr i16, i16* %1, i64 200
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2
  %157 = and <8 x i16> %156, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %158 = or <8 x i16> %157, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %159 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %158, <8 x i16>* %159, align 2
  %160 = getelementptr i16, i16* %1, i64 208
  %161 = bitcast i16* %160 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 2
  %163 = and <8 x i16> %162, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %164 = or <8 x i16> %163, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %165 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %164, <8 x i16>* %165, align 2
  %166 = getelementptr i16, i16* %1, i64 216
  %167 = bitcast i16* %166 to <8 x i16>*
  %168 = load <8 x i16>, <8 x i16>* %167, align 2
  %169 = and <8 x i16> %168, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %170 = or <8 x i16> %169, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %171 = bitcast i16* %166 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %171, align 2
  %172 = bitcast i16* %148 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 2
  %174 = and <8 x i16> %173, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %175 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %175, align 2
  %176 = getelementptr i16, i16* %1, i64 232
  %177 = bitcast i16* %176 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 2
  %179 = and <8 x i16> %178, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %180 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %180, align 2
  %181 = getelementptr i16, i16* %1, i64 240
  %182 = bitcast i16* %181 to <8 x i16>*
  %183 = load <8 x i16>, <8 x i16>* %182, align 2
  %184 = and <8 x i16> %183, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %185 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %185, align 2
  %186 = getelementptr i16, i16* %1, i64 248
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 2
  %189 = and <8 x i16> %188, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %190 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %189, <8 x i16>* %190, align 2
  %191 = getelementptr inbounds i8, i8* %2, i64 7
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %191, i8 0, i64 249, i1 false)
  %192 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 32, i8* %192, align 1
  %193 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 64, i8* %193, align 1
  %194 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 96, i8* %194, align 1
  %195 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 -128, i8* %195, align 1
  %196 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 -96, i8* %196, align 1
  %197 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 -64, i8* %197, align 1
  store i8 -32, i8* %2, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack12CopyString20Ejj(%class.Unpack*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 10
  %5 = load i32, i32* %4, align 8
  %6 = add i32 %5, 1
  store i32 %6, i32* %4, align 8
  %7 = zext i32 %5 to i64
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %7
  store i32 %2, i32* %8, align 4
  %9 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 12
  store i32 %2, i32* %9, align 8
  %10 = load i32, i32* %4, align 8
  %11 = and i32 %10, 3
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 11
  store i32 %1, i32* %12, align 4
  %13 = zext i32 %1 to i64
  %14 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %15 = load i64, i64* %14, align 8
  %16 = sub nsw i64 %15, %13
  store i64 %16, i64* %14, align 8
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack8Unpack20Eb(%class.Unpack*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 24
  %4 = load i8, i8* %3, align 8, !range !5
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 14
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %11 = load i64, i64* %10, align 8
  br label %25

12:                                               ; preds = %2
  tail call void @_ZN6Unpack11UnpInitDataEb(%class.Unpack* %0, i1 zeroext %1)
  %13 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %0)
  br i1 %13, label %14, label %736

14:                                               ; preds = %12
  br i1 %1, label %15, label %19

15:                                               ; preds = %14
  %16 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 63
  %17 = load i8, i8* %16, align 4, !range !5
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %15, %14
  %20 = tail call zeroext i1 @_ZN6Unpack12ReadTables20Ev(%class.Unpack* %0)
  br i1 %20, label %21, label %736

21:                                               ; preds = %15, %19
  %22 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %23 = load i64, i64* %22, align 8
  %24 = add nsw i64 %23, -1
  store i64 %24, i64* %22, align 8
  br label %25

25:                                               ; preds = %21, %6
  %26 = phi i64 [ %24, %21 ], [ %11, %6 ]
  %27 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %28 = icmp sgt i64 %26, -1
  br i1 %28, label %29, label %706

29:                                               ; preds = %25
  %30 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %31 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %32 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 0
  %33 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  %34 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 14
  %35 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 26
  %36 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %37 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %38 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 25
  %39 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 52
  %40 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 54
  %41 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %42 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 1
  %43 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 53
  %44 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 3
  %45 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 0
  %46 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 11
  %47 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 12
  %48 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 10
  %49 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 72
  %50 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 3
  %51 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 0
  %52 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 3
  %53 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 0
  br label %54

54:                                               ; preds = %29, %198
  %55 = load i64, i64* %30, align 8
  %56 = load i64, i64* %31, align 8
  %57 = and i64 %56, %55
  store i64 %57, i64* %31, align 8
  %58 = load i32, i32* %32, align 8
  %59 = load i32, i32* %33, align 8
  %60 = add nsw i32 %59, -30
  %61 = icmp sgt i32 %58, %60
  br i1 %61, label %62, label %67

62:                                               ; preds = %54
  %63 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %0)
  br i1 %63, label %64, label %706

64:                                               ; preds = %62
  %65 = load i64, i64* %31, align 8
  %66 = load i64, i64* %30, align 8
  br label %67

67:                                               ; preds = %64, %54
  %68 = phi i64 [ %66, %64 ], [ %55, %54 ]
  %69 = phi i64 [ %65, %64 ], [ %57, %54 ]
  %70 = load i64, i64* %34, align 8
  %71 = sub i64 %70, %69
  %72 = and i64 %71, %68
  %73 = icmp ugt i64 %72, 269
  %74 = icmp eq i64 %70, %69
  %75 = or i1 %74, %73
  br i1 %75, label %95, label %76

76:                                               ; preds = %67
  store i8 1, i8* %35, align 2
  %77 = icmp ult i64 %69, %70
  %78 = load %class.ComprDataIO*, %class.ComprDataIO** %36, align 8
  %79 = load i8*, i8** %37, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 %70
  br i1 %77, label %81, label %89

81:                                               ; preds = %76
  %82 = shl i64 %70, 32
  %83 = sub i64 0, %82
  %84 = ashr exact i64 %83, 32
  %85 = and i64 %68, %84
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %78, i8* %80, i64 %85) #11
  %86 = load %class.ComprDataIO*, %class.ComprDataIO** %36, align 8
  %87 = load i8*, i8** %37, align 8
  %88 = load i64, i64* %31, align 8
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %86, i8* %87, i64 %88) #11
  store i8 1, i8* %38, align 1
  br label %91

89:                                               ; preds = %76
  %90 = sub i64 %69, %70
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %78, i8* %80, i64 %90) #11
  br label %91

91:                                               ; preds = %81, %89
  %92 = load i64, i64* %31, align 8
  store i64 %92, i64* %34, align 8
  %93 = load i8, i8* %3, align 8, !range !5
  %94 = icmp eq i8 %93, 0
  br i1 %94, label %95, label %736

95:                                               ; preds = %67, %91
  %96 = phi i64 [ %69, %67 ], [ %92, %91 ]
  %97 = load i8, i8* %39, align 8, !range !5
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %201, label %99

99:                                               ; preds = %95
  %100 = load i32, i32* %40, align 8
  %101 = zext i32 %100 to i64
  %102 = load i8*, i8** %41, align 8
  %103 = load i32, i32* %32, align 8
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %102, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = shl nuw nsw i32 %107, 16
  %109 = add nsw i32 %103, 1
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %102, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = shl nuw nsw i32 %113, 8
  %115 = or i32 %114, %108
  %116 = add nsw i32 %103, 2
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %102, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = or i32 %115, %120
  %122 = load i32, i32* %42, align 4
  %123 = sub nsw i32 8, %122
  %124 = lshr i32 %121, %123
  %125 = and i32 %124, 65534
  %126 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %101, i32 3
  %127 = load i32, i32* %126, align 4
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %101, i32 1, i64 %128
  %130 = load i32, i32* %129, align 4
  %131 = icmp ult i32 %125, %130
  br i1 %131, label %132, label %144

132:                                              ; preds = %99
  %133 = sub i32 16, %127
  %134 = lshr i32 %125, %133
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %101, i32 4, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = add i32 %122, %138
  %140 = lshr i32 %139, 3
  %141 = add i32 %140, %103
  store i32 %141, i32* %32, align 8
  %142 = and i32 %139, 7
  store i32 %142, i32* %42, align 4
  %143 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %101, i32 5, i64 %135
  br label %176

144:                                              ; preds = %99, %148
  %145 = phi i32 [ %146, %148 ], [ %127, %99 ]
  %146 = add i32 %145, 1
  %147 = icmp ult i32 %146, 15
  br i1 %147, label %148, label %153

148:                                              ; preds = %144
  %149 = zext i32 %146 to i64
  %150 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %101, i32 1, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = icmp ult i32 %125, %151
  br i1 %152, label %153, label %144

153:                                              ; preds = %144, %148
  %154 = phi i32 [ %146, %148 ], [ 15, %144 ]
  %155 = add i32 %154, %122
  %156 = lshr i32 %155, 3
  %157 = add i32 %156, %103
  store i32 %157, i32* %32, align 8
  %158 = and i32 %155, 7
  store i32 %158, i32* %42, align 4
  %159 = add nsw i32 %154, -1
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %101, i32 1, i64 %160
  %162 = load i32, i32* %161, align 4
  %163 = sub i32 %125, %162
  %164 = sub nuw nsw i32 16, %154
  %165 = lshr i32 %163, %164
  %166 = zext i32 %154 to i64
  %167 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %101, i32 2, i64 %166
  %168 = load i32, i32* %167, align 4
  %169 = add i32 %165, %168
  %170 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %101, i32 0
  %171 = load i32, i32* %170, align 4
  %172 = icmp ult i32 %169, %171
  %173 = select i1 %172, i32 %169, i32 0
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %101, i32 6, i64 %174
  br label %176

176:                                              ; preds = %132, %153
  %177 = phi i16* [ %143, %132 ], [ %175, %153 ]
  %178 = load i16, i16* %177, align 2
  %179 = icmp eq i16 %178, 256
  br i1 %179, label %180, label %182

180:                                              ; preds = %176
  %181 = tail call zeroext i1 @_ZN6Unpack12ReadTables20Ev(%class.Unpack* %0)
  br i1 %181, label %196, label %706

182:                                              ; preds = %176
  %183 = zext i16 %178 to i32
  %184 = tail call zeroext i8 @_ZN6Unpack11DecodeAudioEi(%class.Unpack* %0, i32 %183)
  %185 = load i8*, i8** %37, align 8
  %186 = load i64, i64* %31, align 8
  %187 = add i64 %186, 1
  store i64 %187, i64* %31, align 8
  %188 = getelementptr inbounds i8, i8* %185, i64 %186
  store i8 %184, i8* %188, align 1
  %189 = load i32, i32* %40, align 8
  %190 = add i32 %189, 1
  %191 = load i32, i32* %43, align 4
  %192 = icmp eq i32 %190, %191
  %193 = select i1 %192, i32 0, i32 %190
  store i32 %193, i32* %40, align 8
  %194 = load i64, i64* %27, align 8
  %195 = add nsw i64 %194, -1
  store i64 %195, i64* %27, align 8
  br label %198

196:                                              ; preds = %466, %180, %612, %468, %454, %697, %676
  %197 = load i64, i64* %27, align 8
  br label %198

198:                                              ; preds = %196, %182, %281
  %199 = phi i64 [ %197, %196 ], [ %195, %182 ], [ %287, %281 ]
  %200 = icmp sgt i64 %199, -1
  br i1 %200, label %54, label %706

201:                                              ; preds = %95
  %202 = load i8*, i8** %41, align 8
  %203 = load i32, i32* %32, align 8
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds i8, i8* %202, i64 %204
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = shl nuw nsw i32 %207, 16
  %209 = add nsw i32 %203, 1
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %202, i64 %210
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = shl nuw nsw i32 %213, 8
  %215 = or i32 %214, %208
  %216 = add nsw i32 %203, 2
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %202, i64 %217
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i32
  %221 = or i32 %215, %220
  %222 = load i32, i32* %42, align 4
  %223 = sub nsw i32 8, %222
  %224 = lshr i32 %221, %223
  %225 = and i32 %224, 65534
  %226 = load i32, i32* %44, align 4
  %227 = zext i32 %226 to i64
  %228 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 1, i64 %227
  %229 = load i32, i32* %228, align 4
  %230 = icmp ult i32 %225, %229
  br i1 %230, label %231, label %243

231:                                              ; preds = %201
  %232 = sub i32 16, %226
  %233 = lshr i32 %225, %232
  %234 = zext i32 %233 to i64
  %235 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 4, i64 %234
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i32
  %238 = add i32 %222, %237
  %239 = lshr i32 %238, 3
  %240 = add i32 %239, %203
  store i32 %240, i32* %32, align 8
  %241 = and i32 %238, 7
  store i32 %241, i32* %42, align 4
  %242 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 5, i64 %234
  br label %274

243:                                              ; preds = %201, %247
  %244 = phi i32 [ %245, %247 ], [ %226, %201 ]
  %245 = add i32 %244, 1
  %246 = icmp ult i32 %245, 15
  br i1 %246, label %247, label %252

247:                                              ; preds = %243
  %248 = zext i32 %245 to i64
  %249 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 1, i64 %248
  %250 = load i32, i32* %249, align 4
  %251 = icmp ult i32 %225, %250
  br i1 %251, label %252, label %243

252:                                              ; preds = %243, %247
  %253 = phi i32 [ %245, %247 ], [ 15, %243 ]
  %254 = add i32 %253, %222
  %255 = lshr i32 %254, 3
  %256 = add i32 %255, %203
  store i32 %256, i32* %32, align 8
  %257 = and i32 %254, 7
  store i32 %257, i32* %42, align 4
  %258 = add nsw i32 %253, -1
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 1, i64 %259
  %261 = load i32, i32* %260, align 4
  %262 = sub i32 %225, %261
  %263 = sub nuw nsw i32 16, %253
  %264 = lshr i32 %262, %263
  %265 = zext i32 %253 to i64
  %266 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 2, i64 %265
  %267 = load i32, i32* %266, align 4
  %268 = add i32 %264, %267
  %269 = load i32, i32* %45, align 4
  %270 = icmp ult i32 %268, %269
  %271 = select i1 %270, i32 %268, i32 0
  %272 = zext i32 %271 to i64
  %273 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 6, i64 %272
  br label %274

274:                                              ; preds = %231, %252
  %275 = phi i32 [ %241, %231 ], [ %257, %252 ]
  %276 = phi i32 [ %240, %231 ], [ %256, %252 ]
  %277 = phi i16* [ %242, %231 ], [ %273, %252 ]
  %278 = load i16, i16* %277, align 2
  %279 = zext i16 %278 to i32
  %280 = icmp ult i16 %278, 256
  br i1 %280, label %281, label %288

281:                                              ; preds = %274
  %282 = trunc i16 %278 to i8
  %283 = load i8*, i8** %37, align 8
  %284 = add i64 %96, 1
  store i64 %284, i64* %31, align 8
  %285 = getelementptr inbounds i8, i8* %283, i64 %96
  store i8 %282, i8* %285, align 1
  %286 = load i64, i64* %27, align 8
  %287 = add nsw i64 %286, -1
  store i64 %287, i64* %27, align 8
  br label %198

288:                                              ; preds = %274
  %289 = icmp ugt i16 %278, 269
  br i1 %289, label %290, label %465

290:                                              ; preds = %288
  %291 = add nsw i32 %279, -270
  %292 = zext i32 %291 to i64
  %293 = getelementptr inbounds [28 x i8], [28 x i8]* @_ZZN6Unpack8Unpack29EbE7LDecode, i64 0, i64 %292
  %294 = load i8, i8* %293, align 1
  %295 = zext i8 %294 to i32
  %296 = add nuw nsw i32 %295, 3
  %297 = getelementptr inbounds [28 x i8], [28 x i8]* @_ZZN6Unpack8Unpack29EbE5LBits, i64 0, i64 %292
  %298 = load i8, i8* %297, align 1
  %299 = zext i8 %298 to i32
  %300 = add nsw i64 %292, -8
  %301 = icmp ult i64 %300, 20
  br i1 %301, label %302, label %331

302:                                              ; preds = %290
  %303 = sext i32 %276 to i64
  %304 = getelementptr inbounds i8, i8* %202, i64 %303
  %305 = load i8, i8* %304, align 1
  %306 = zext i8 %305 to i32
  %307 = shl nuw nsw i32 %306, 16
  %308 = add nsw i32 %276, 1
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds i8, i8* %202, i64 %309
  %311 = load i8, i8* %310, align 1
  %312 = zext i8 %311 to i32
  %313 = shl nuw nsw i32 %312, 8
  %314 = or i32 %313, %307
  %315 = add nsw i32 %276, 2
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds i8, i8* %202, i64 %316
  %318 = load i8, i8* %317, align 1
  %319 = zext i8 %318 to i32
  %320 = or i32 %314, %319
  %321 = sub nuw nsw i32 8, %275
  %322 = lshr i32 %320, %321
  %323 = and i32 %322, 65535
  %324 = sub nsw i32 16, %299
  %325 = lshr i32 %323, %324
  %326 = add nuw nsw i32 %325, %296
  %327 = add nuw nsw i32 %275, %299
  %328 = lshr i32 %327, 3
  %329 = add i32 %328, %276
  store i32 %329, i32* %32, align 8
  %330 = and i32 %327, 7
  store i32 %330, i32* %42, align 4
  br label %331

331:                                              ; preds = %302, %290
  %332 = phi i32 [ %330, %302 ], [ %275, %290 ]
  %333 = phi i32 [ %329, %302 ], [ %276, %290 ]
  %334 = phi i32 [ %326, %302 ], [ %296, %290 ]
  %335 = sext i32 %333 to i64
  %336 = getelementptr inbounds i8, i8* %202, i64 %335
  %337 = load i8, i8* %336, align 1
  %338 = zext i8 %337 to i32
  %339 = shl nuw nsw i32 %338, 16
  %340 = add nsw i32 %333, 1
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds i8, i8* %202, i64 %341
  %343 = load i8, i8* %342, align 1
  %344 = zext i8 %343 to i32
  %345 = shl nuw nsw i32 %344, 8
  %346 = or i32 %345, %339
  %347 = add nsw i32 %333, 2
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds i8, i8* %202, i64 %348
  %350 = load i8, i8* %349, align 1
  %351 = zext i8 %350 to i32
  %352 = or i32 %346, %351
  %353 = sub nuw nsw i32 8, %332
  %354 = lshr i32 %352, %353
  %355 = and i32 %354, 65534
  %356 = load i32, i32* %52, align 4
  %357 = zext i32 %356 to i64
  %358 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 1, i64 %357
  %359 = load i32, i32* %358, align 4
  %360 = icmp ult i32 %355, %359
  br i1 %360, label %361, label %373

361:                                              ; preds = %331
  %362 = sub i32 16, %356
  %363 = lshr i32 %355, %362
  %364 = zext i32 %363 to i64
  %365 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 4, i64 %364
  %366 = load i8, i8* %365, align 1
  %367 = zext i8 %366 to i32
  %368 = add nuw nsw i32 %332, %367
  %369 = lshr i32 %368, 3
  %370 = add i32 %369, %333
  store i32 %370, i32* %32, align 8
  %371 = and i32 %368, 7
  store i32 %371, i32* %42, align 4
  %372 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 5, i64 %364
  br label %404

373:                                              ; preds = %331, %377
  %374 = phi i32 [ %375, %377 ], [ %356, %331 ]
  %375 = add i32 %374, 1
  %376 = icmp ult i32 %375, 15
  br i1 %376, label %377, label %382

377:                                              ; preds = %373
  %378 = zext i32 %375 to i64
  %379 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 1, i64 %378
  %380 = load i32, i32* %379, align 4
  %381 = icmp ult i32 %355, %380
  br i1 %381, label %382, label %373

382:                                              ; preds = %373, %377
  %383 = phi i32 [ %375, %377 ], [ 15, %373 ]
  %384 = add i32 %383, %332
  %385 = lshr i32 %384, 3
  %386 = add i32 %385, %333
  store i32 %386, i32* %32, align 8
  %387 = and i32 %384, 7
  store i32 %387, i32* %42, align 4
  %388 = add nsw i32 %383, -1
  %389 = zext i32 %388 to i64
  %390 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 1, i64 %389
  %391 = load i32, i32* %390, align 4
  %392 = sub i32 %355, %391
  %393 = sub nuw nsw i32 16, %383
  %394 = lshr i32 %392, %393
  %395 = zext i32 %383 to i64
  %396 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 2, i64 %395
  %397 = load i32, i32* %396, align 4
  %398 = add i32 %394, %397
  %399 = load i32, i32* %53, align 4
  %400 = icmp ult i32 %398, %399
  %401 = select i1 %400, i32 %398, i32 0
  %402 = zext i32 %401 to i64
  %403 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 6, i64 %402
  br label %404

404:                                              ; preds = %361, %382
  %405 = phi i32 [ %371, %361 ], [ %387, %382 ]
  %406 = phi i32 [ %370, %361 ], [ %386, %382 ]
  %407 = phi i16* [ %372, %361 ], [ %403, %382 ]
  %408 = load i16, i16* %407, align 2
  %409 = zext i16 %408 to i64
  %410 = getelementptr inbounds [48 x i32], [48 x i32]* @_ZZN6Unpack8Unpack20EbE7DDecode, i64 0, i64 %409
  %411 = load i32, i32* %410, align 4
  %412 = add i32 %411, 1
  %413 = getelementptr inbounds [48 x i8], [48 x i8]* @_ZZN6Unpack8Unpack20EbE5DBits, i64 0, i64 %409
  %414 = load i8, i8* %413, align 1
  %415 = zext i8 %414 to i32
  %416 = add nsw i64 %409, -4
  %417 = icmp ult i64 %416, 44
  br i1 %417, label %418, label %447

418:                                              ; preds = %404
  %419 = sext i32 %406 to i64
  %420 = getelementptr inbounds i8, i8* %202, i64 %419
  %421 = load i8, i8* %420, align 1
  %422 = zext i8 %421 to i32
  %423 = shl nuw nsw i32 %422, 16
  %424 = add nsw i32 %406, 1
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds i8, i8* %202, i64 %425
  %427 = load i8, i8* %426, align 1
  %428 = zext i8 %427 to i32
  %429 = shl nuw nsw i32 %428, 8
  %430 = or i32 %429, %423
  %431 = add nsw i32 %406, 2
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i8, i8* %202, i64 %432
  %434 = load i8, i8* %433, align 1
  %435 = zext i8 %434 to i32
  %436 = or i32 %430, %435
  %437 = sub nuw nsw i32 8, %405
  %438 = lshr i32 %436, %437
  %439 = and i32 %438, 65535
  %440 = sub nsw i32 16, %415
  %441 = lshr i32 %439, %440
  %442 = add i32 %441, %412
  %443 = add nuw nsw i32 %405, %415
  %444 = lshr i32 %443, 3
  %445 = add i32 %444, %406
  store i32 %445, i32* %32, align 8
  %446 = and i32 %443, 7
  store i32 %446, i32* %42, align 4
  br label %447

447:                                              ; preds = %418, %404
  %448 = phi i32 [ %442, %418 ], [ %412, %404 ]
  %449 = icmp ugt i32 %448, 8191
  br i1 %449, label %450, label %454

450:                                              ; preds = %447
  %451 = icmp ugt i32 %448, 262143
  %452 = select i1 %451, i32 2, i32 1
  %453 = add i32 %452, %334
  br label %454

454:                                              ; preds = %450, %447
  %455 = phi i32 [ %334, %447 ], [ %453, %450 ]
  %456 = load i32, i32* %48, align 8
  %457 = add i32 %456, 1
  store i32 %457, i32* %48, align 8
  %458 = zext i32 %456 to i64
  %459 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %458
  store i32 %448, i32* %459, align 4
  store i32 %448, i32* %47, align 8
  %460 = load i32, i32* %48, align 8
  %461 = and i32 %460, 3
  store i32 %461, i32* %48, align 8
  store i32 %455, i32* %46, align 4
  %462 = zext i32 %455 to i64
  %463 = load i64, i64* %27, align 8
  %464 = sub nsw i64 %463, %462
  store i64 %464, i64* %27, align 8
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %455, i32 %448) #11
  br label %196

465:                                              ; preds = %288
  switch i16 %278, label %480 [
    i16 269, label %466
    i16 256, label %468
  ]

466:                                              ; preds = %465
  %467 = tail call zeroext i1 @_ZN6Unpack12ReadTables20Ev(%class.Unpack* %0)
  br i1 %467, label %196, label %706

468:                                              ; preds = %465
  %469 = load i32, i32* %46, align 4
  %470 = load i32, i32* %47, align 8
  %471 = load i32, i32* %48, align 8
  %472 = add i32 %471, 1
  store i32 %472, i32* %48, align 8
  %473 = zext i32 %471 to i64
  %474 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %473
  store i32 %470, i32* %474, align 4
  store i32 %470, i32* %47, align 8
  %475 = load i32, i32* %48, align 8
  %476 = and i32 %475, 3
  store i32 %476, i32* %48, align 8
  store i32 %469, i32* %46, align 4
  %477 = zext i32 %469 to i64
  %478 = load i64, i64* %27, align 8
  %479 = sub nsw i64 %478, %477
  store i64 %479, i64* %27, align 8
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %469, i32 %470) #11
  br label %196

480:                                              ; preds = %465
  %481 = icmp ult i16 %278, 261
  br i1 %481, label %482, label %622

482:                                              ; preds = %480
  %483 = load i32, i32* %48, align 8
  %484 = sub i32 %483, %279
  %485 = and i32 %484, 3
  %486 = zext i32 %485 to i64
  %487 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %486
  %488 = load i32, i32* %487, align 4
  %489 = sext i32 %276 to i64
  %490 = getelementptr inbounds i8, i8* %202, i64 %489
  %491 = load i8, i8* %490, align 1
  %492 = zext i8 %491 to i32
  %493 = shl nuw nsw i32 %492, 16
  %494 = add nsw i32 %276, 1
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds i8, i8* %202, i64 %495
  %497 = load i8, i8* %496, align 1
  %498 = zext i8 %497 to i32
  %499 = shl nuw nsw i32 %498, 8
  %500 = or i32 %499, %493
  %501 = add nsw i32 %276, 2
  %502 = sext i32 %501 to i64
  %503 = getelementptr inbounds i8, i8* %202, i64 %502
  %504 = load i8, i8* %503, align 1
  %505 = zext i8 %504 to i32
  %506 = or i32 %500, %505
  %507 = sub nuw nsw i32 8, %275
  %508 = lshr i32 %506, %507
  %509 = and i32 %508, 65534
  %510 = load i32, i32* %50, align 4
  %511 = zext i32 %510 to i64
  %512 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 1, i64 %511
  %513 = load i32, i32* %512, align 4
  %514 = icmp ult i32 %509, %513
  br i1 %514, label %515, label %527

515:                                              ; preds = %482
  %516 = sub i32 16, %510
  %517 = lshr i32 %509, %516
  %518 = zext i32 %517 to i64
  %519 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 4, i64 %518
  %520 = load i8, i8* %519, align 1
  %521 = zext i8 %520 to i32
  %522 = add nuw nsw i32 %275, %521
  %523 = lshr i32 %522, 3
  %524 = add i32 %523, %276
  store i32 %524, i32* %32, align 8
  %525 = and i32 %522, 7
  store i32 %525, i32* %42, align 4
  %526 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 5, i64 %518
  br label %558

527:                                              ; preds = %482, %531
  %528 = phi i32 [ %529, %531 ], [ %510, %482 ]
  %529 = add i32 %528, 1
  %530 = icmp ult i32 %529, 15
  br i1 %530, label %531, label %536

531:                                              ; preds = %527
  %532 = zext i32 %529 to i64
  %533 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 1, i64 %532
  %534 = load i32, i32* %533, align 4
  %535 = icmp ult i32 %509, %534
  br i1 %535, label %536, label %527

536:                                              ; preds = %527, %531
  %537 = phi i32 [ %529, %531 ], [ 15, %527 ]
  %538 = add i32 %537, %275
  %539 = lshr i32 %538, 3
  %540 = add i32 %539, %276
  store i32 %540, i32* %32, align 8
  %541 = and i32 %538, 7
  store i32 %541, i32* %42, align 4
  %542 = add nsw i32 %537, -1
  %543 = zext i32 %542 to i64
  %544 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 1, i64 %543
  %545 = load i32, i32* %544, align 4
  %546 = sub i32 %509, %545
  %547 = sub nuw nsw i32 16, %537
  %548 = lshr i32 %546, %547
  %549 = zext i32 %537 to i64
  %550 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 2, i64 %549
  %551 = load i32, i32* %550, align 4
  %552 = add i32 %548, %551
  %553 = load i32, i32* %51, align 4
  %554 = icmp ult i32 %552, %553
  %555 = select i1 %554, i32 %552, i32 0
  %556 = zext i32 %555 to i64
  %557 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 6, i64 %556
  br label %558

558:                                              ; preds = %515, %536
  %559 = phi i32 [ %525, %515 ], [ %541, %536 ]
  %560 = phi i32 [ %524, %515 ], [ %540, %536 ]
  %561 = phi i16* [ %526, %515 ], [ %557, %536 ]
  %562 = load i16, i16* %561, align 2
  %563 = zext i16 %562 to i64
  %564 = getelementptr inbounds [28 x i8], [28 x i8]* @_ZZN6Unpack8Unpack29EbE7LDecode, i64 0, i64 %563
  %565 = load i8, i8* %564, align 1
  %566 = zext i8 %565 to i32
  %567 = add nuw nsw i32 %566, 2
  %568 = getelementptr inbounds [28 x i8], [28 x i8]* @_ZZN6Unpack8Unpack29EbE5LBits, i64 0, i64 %563
  %569 = load i8, i8* %568, align 1
  %570 = zext i8 %569 to i32
  %571 = add nsw i64 %563, -8
  %572 = icmp ult i64 %571, 20
  br i1 %572, label %573, label %602

573:                                              ; preds = %558
  %574 = sext i32 %560 to i64
  %575 = getelementptr inbounds i8, i8* %202, i64 %574
  %576 = load i8, i8* %575, align 1
  %577 = zext i8 %576 to i32
  %578 = shl nuw nsw i32 %577, 16
  %579 = add nsw i32 %560, 1
  %580 = sext i32 %579 to i64
  %581 = getelementptr inbounds i8, i8* %202, i64 %580
  %582 = load i8, i8* %581, align 1
  %583 = zext i8 %582 to i32
  %584 = shl nuw nsw i32 %583, 8
  %585 = or i32 %584, %578
  %586 = add nsw i32 %560, 2
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds i8, i8* %202, i64 %587
  %589 = load i8, i8* %588, align 1
  %590 = zext i8 %589 to i32
  %591 = or i32 %585, %590
  %592 = sub nuw nsw i32 8, %559
  %593 = lshr i32 %591, %592
  %594 = and i32 %593, 65535
  %595 = sub nsw i32 16, %570
  %596 = lshr i32 %594, %595
  %597 = add nuw nsw i32 %596, %567
  %598 = add nuw nsw i32 %559, %570
  %599 = lshr i32 %598, 3
  %600 = add i32 %599, %560
  store i32 %600, i32* %32, align 8
  %601 = and i32 %598, 7
  store i32 %601, i32* %42, align 4
  br label %602

602:                                              ; preds = %573, %558
  %603 = phi i32 [ %597, %573 ], [ %567, %558 ]
  %604 = icmp ugt i32 %488, 256
  br i1 %604, label %605, label %612

605:                                              ; preds = %602
  %606 = add nuw nsw i32 %603, 1
  %607 = icmp ugt i32 %488, 8191
  br i1 %607, label %608, label %612

608:                                              ; preds = %605
  %609 = icmp ugt i32 %488, 262143
  %610 = select i1 %609, i32 3, i32 2
  %611 = add nuw nsw i32 %603, %610
  br label %612

612:                                              ; preds = %608, %605, %602
  %613 = phi i32 [ %606, %605 ], [ %603, %602 ], [ %611, %608 ]
  %614 = add i32 %483, 1
  store i32 %614, i32* %48, align 8
  %615 = zext i32 %483 to i64
  %616 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %615
  store i32 %488, i32* %616, align 4
  store i32 %488, i32* %47, align 8
  %617 = load i32, i32* %48, align 8
  %618 = and i32 %617, 3
  store i32 %618, i32* %48, align 8
  store i32 %613, i32* %46, align 4
  %619 = zext i32 %613 to i64
  %620 = load i64, i64* %27, align 8
  %621 = sub nsw i64 %620, %619
  store i64 %621, i64* %27, align 8
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %613, i32 %488) #11
  br label %196

622:                                              ; preds = %480
  %623 = add nsw i32 %279, -261
  %624 = zext i32 %623 to i64
  %625 = getelementptr inbounds [8 x i8], [8 x i8]* @_ZZN6Unpack8Unpack29EbE8SDDecode, i64 0, i64 %624
  %626 = load i8, i8* %625, align 1
  %627 = zext i8 %626 to i32
  %628 = add nuw nsw i32 %627, 1
  %629 = getelementptr inbounds [8 x i8], [8 x i8]* @_ZZN6Unpack8Unpack29EbE6SDBits, i64 0, i64 %624
  %630 = load i8, i8* %629, align 1
  %631 = zext i8 %630 to i32
  %632 = sext i32 %276 to i64
  %633 = getelementptr inbounds i8, i8* %202, i64 %632
  %634 = load i8, i8* %633, align 1
  %635 = zext i8 %634 to i32
  %636 = shl nuw nsw i32 %635, 16
  %637 = add nsw i32 %276, 1
  %638 = sext i32 %637 to i64
  %639 = getelementptr inbounds i8, i8* %202, i64 %638
  %640 = load i8, i8* %639, align 1
  %641 = zext i8 %640 to i32
  %642 = shl nuw nsw i32 %641, 8
  %643 = or i32 %642, %636
  %644 = add nsw i32 %276, 2
  %645 = sext i32 %644 to i64
  %646 = getelementptr inbounds i8, i8* %202, i64 %645
  %647 = load i8, i8* %646, align 1
  %648 = zext i8 %647 to i32
  %649 = or i32 %643, %648
  %650 = sub nuw nsw i32 8, %275
  %651 = lshr i32 %649, %650
  %652 = and i32 %651, 65535
  %653 = sub nsw i32 16, %631
  %654 = lshr i32 %652, %653
  %655 = add nuw nsw i32 %628, %654
  %656 = add nuw nsw i32 %275, %631
  %657 = lshr i32 %656, 3
  %658 = add i32 %657, %276
  store i32 %658, i32* %32, align 8
  %659 = and i32 %656, 7
  store i32 %659, i32* %42, align 4
  %660 = load i32, i32* %48, align 8
  %661 = add i32 %660, 1
  store i32 %661, i32* %48, align 8
  %662 = zext i32 %660 to i64
  %663 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %662
  store i32 %655, i32* %663, align 4
  store i32 %655, i32* %47, align 8
  %664 = load i32, i32* %48, align 8
  %665 = and i32 %664, 3
  store i32 %665, i32* %48, align 8
  store i32 2, i32* %46, align 4
  %666 = load i64, i64* %27, align 8
  %667 = add nsw i64 %666, -2
  store i64 %667, i64* %27, align 8
  %668 = load i64, i64* %31, align 8
  %669 = zext i32 %655 to i64
  %670 = sub i64 %668, %669
  %671 = load i64, i64* %49, align 8
  %672 = add i64 %671, -4100
  %673 = icmp ult i64 %670, %672
  %674 = icmp ult i64 %668, %672
  %675 = and i1 %673, %674
  br i1 %675, label %697, label %676

676:                                              ; preds = %622
  %677 = load i64, i64* %30, align 8
  %678 = load i8*, i8** %37, align 8
  %679 = add i64 %670, 1
  %680 = and i64 %670, %677
  %681 = getelementptr inbounds i8, i8* %678, i64 %680
  %682 = load i8, i8* %681, align 1
  %683 = getelementptr inbounds i8, i8* %678, i64 %668
  store i8 %682, i8* %683, align 1
  %684 = load i64, i64* %31, align 8
  %685 = add i64 %684, 1
  %686 = load i64, i64* %30, align 8
  %687 = and i64 %685, %686
  store i64 %687, i64* %31, align 8
  %688 = load i8*, i8** %37, align 8
  %689 = and i64 %679, %686
  %690 = getelementptr inbounds i8, i8* %688, i64 %689
  %691 = load i8, i8* %690, align 1
  %692 = getelementptr inbounds i8, i8* %688, i64 %687
  store i8 %691, i8* %692, align 1
  %693 = load i64, i64* %31, align 8
  %694 = add i64 %693, 1
  %695 = load i64, i64* %30, align 8
  %696 = and i64 %694, %695
  store i64 %696, i64* %31, align 8
  br label %196

697:                                              ; preds = %622
  %698 = load i8*, i8** %37, align 8
  %699 = getelementptr inbounds i8, i8* %698, i64 %670
  %700 = getelementptr inbounds i8, i8* %698, i64 %668
  %701 = add i64 %668, 2
  store i64 %701, i64* %31, align 8
  %702 = load i8, i8* %699, align 1
  store i8 %702, i8* %700, align 1
  %703 = getelementptr inbounds i8, i8* %699, i64 1
  %704 = load i8, i8* %703, align 1
  %705 = getelementptr inbounds i8, i8* %700, i64 1
  store i8 %704, i8* %705, align 1
  br label %196

706:                                              ; preds = %198, %62, %180, %466, %25
  tail call void @_ZN6Unpack14ReadLastTablesEv(%class.Unpack* %0)
  %707 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %708 = load i64, i64* %707, align 8
  %709 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 14
  %710 = load i64, i64* %709, align 8
  %711 = icmp eq i64 %708, %710
  br i1 %711, label %714, label %712

712:                                              ; preds = %706
  %713 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 26
  store i8 1, i8* %713, align 2
  br label %714

714:                                              ; preds = %712, %706
  %715 = icmp ult i64 %708, %710
  %716 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %717 = load %class.ComprDataIO*, %class.ComprDataIO** %716, align 8
  %718 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %719 = load i8*, i8** %718, align 8
  %720 = getelementptr inbounds i8, i8* %719, i64 %710
  br i1 %715, label %721, label %732

721:                                              ; preds = %714
  %722 = shl i64 %710, 32
  %723 = sub i64 0, %722
  %724 = ashr exact i64 %723, 32
  %725 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %726 = load i64, i64* %725, align 8
  %727 = and i64 %726, %724
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %717, i8* %720, i64 %727) #11
  %728 = load %class.ComprDataIO*, %class.ComprDataIO** %716, align 8
  %729 = load i8*, i8** %718, align 8
  %730 = load i64, i64* %707, align 8
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %728, i8* %729, i64 %730) #11
  %731 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 25
  store i8 1, i8* %731, align 1
  br label %734

732:                                              ; preds = %714
  %733 = sub i64 %708, %710
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %717, i8* %720, i64 %733) #11
  br label %734

734:                                              ; preds = %721, %732
  %735 = load i64, i64* %707, align 8
  store i64 %735, i64* %709, align 8
  br label %736

736:                                              ; preds = %91, %19, %12, %734
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6Unpack12ReadTables20Ev(%class.Unpack*) local_unnamed_addr #0 align 2 {
  %2 = alloca [19 x i8], align 16
  %3 = alloca [1028 x i8], align 16
  %4 = getelementptr inbounds [19 x i8], [19 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 19, i8* nonnull %4) #11
  %5 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 19, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1028, i8* nonnull %5) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 1028, i1 false)
  %6 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  %9 = load i32, i32* %8, align 8
  %10 = add nsw i32 %9, -25
  %11 = icmp sgt i32 %7, %10
  br i1 %11, label %12, label %16

12:                                               ; preds = %1
  %13 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %0)
  br i1 %13, label %14, label %343

14:                                               ; preds = %12
  %15 = load i32, i32* %6, align 8
  br label %16

16:                                               ; preds = %14, %1
  %17 = phi i32 [ %15, %14 ], [ %7, %1 ]
  %18 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %19 = load i8*, i8** %18, align 8
  %20 = sext i32 %17 to i64
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = shl nuw nsw i32 %23, 16
  %25 = add nsw i32 %17, 1
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %19, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = shl nuw nsw i32 %29, 8
  %31 = or i32 %30, %24
  %32 = add nsw i32 %17, 2
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %19, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = or i32 %31, %36
  %38 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = sub nsw i32 8, %39
  %41 = lshr i32 %37, %40
  %42 = trunc i32 %41 to i16
  %43 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 52
  %44 = lshr i16 %42, 15
  %45 = trunc i16 %44 to i8
  store i8 %45, i8* %43, align 8
  %46 = and i32 %41, 16384
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %16
  %49 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 51, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %49, i8 0, i64 1028, i1 false)
  br label %50

50:                                               ; preds = %16, %48
  %51 = add i32 %39, 2
  %52 = lshr i32 %51, 3
  %53 = add i32 %52, %17
  store i32 %53, i32* %6, align 8
  %54 = and i32 %51, 7
  store i32 %54, i32* %38, align 4
  %55 = icmp eq i8 %45, 0
  br i1 %55, label %71, label %56

56:                                               ; preds = %50
  %57 = lshr i32 %41, 12
  %58 = and i32 %57, 3
  %59 = add nuw nsw i32 %58, 1
  %60 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 53
  store i32 %59, i32* %60, align 4
  %61 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 54
  %62 = load i32, i32* %61, align 8
  %63 = icmp ugt i32 %62, %58
  br i1 %63, label %64, label %65

64:                                               ; preds = %56
  store i32 0, i32* %61, align 8
  br label %65

65:                                               ; preds = %64, %56
  %66 = add nuw nsw i32 %54, 2
  %67 = lshr i32 %66, 3
  %68 = add i32 %67, %53
  store i32 %68, i32* %6, align 8
  %69 = and i32 %66, 7
  store i32 %69, i32* %38, align 4
  %70 = mul nuw nsw i32 %59, 257
  br label %71

71:                                               ; preds = %50, %65
  %72 = phi i32 [ %69, %65 ], [ %54, %50 ]
  %73 = phi i32 [ %68, %65 ], [ %53, %50 ]
  %74 = phi i32 [ %70, %65 ], [ 374, %50 ]
  br label %81

75:                                               ; preds = %81
  %76 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4
  call void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* undef, i8* nonnull %4, %struct.DecodeTable* %76, i32 19)
  %77 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 3
  %78 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %76, i64 0, i32 0
  %79 = zext i32 %74 to i64
  %80 = load i32, i32* %6, align 8
  br label %115

81:                                               ; preds = %81, %71
  %82 = phi i32 [ %72, %71 ], [ %112, %81 ]
  %83 = phi i32 [ %73, %71 ], [ %111, %81 ]
  %84 = phi i64 [ 0, %71 ], [ %113, %81 ]
  %85 = sext i32 %83 to i64
  %86 = getelementptr inbounds i8, i8* %19, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = shl nuw nsw i32 %88, 16
  %90 = add nsw i32 %83, 1
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %19, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = shl nuw nsw i32 %94, 8
  %96 = or i32 %95, %89
  %97 = add nsw i32 %83, 2
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %19, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = or i32 %96, %101
  %103 = sub nsw i32 8, %82
  %104 = lshr i32 %102, %103
  %105 = lshr i32 %104, 12
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 15
  %108 = getelementptr inbounds [19 x i8], [19 x i8]* %2, i64 0, i64 %84
  store i8 %107, i8* %108, align 1
  %109 = add nsw i32 %82, 4
  %110 = lshr i32 %109, 3
  %111 = add i32 %110, %83
  store i32 %111, i32* %6, align 8
  %112 = and i32 %109, 7
  store i32 %112, i32* %38, align 4
  %113 = add nuw nsw i64 %84, 1
  %114 = icmp eq i64 %113, 19
  br i1 %114, label %75, label %81

115:                                              ; preds = %75, %310
  %116 = phi i32 [ %80, %75 ], [ %311, %310 ]
  %117 = phi i32 [ 0, %75 ], [ %312, %310 ]
  %118 = load i32, i32* %8, align 8
  %119 = add nsw i32 %118, -5
  %120 = icmp sgt i32 %116, %119
  br i1 %120, label %121, label %125

121:                                              ; preds = %115
  %122 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %0)
  br i1 %122, label %123, label %343

123:                                              ; preds = %121
  %124 = load i32, i32* %6, align 8
  br label %125

125:                                              ; preds = %123, %115
  %126 = phi i32 [ %124, %123 ], [ %116, %115 ]
  %127 = load i8*, i8** %18, align 8
  %128 = sext i32 %126 to i64
  %129 = getelementptr inbounds i8, i8* %127, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = shl nuw nsw i32 %131, 16
  %133 = add nsw i32 %126, 1
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i8, i8* %127, i64 %134
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = shl nuw nsw i32 %137, 8
  %139 = or i32 %138, %132
  %140 = add nsw i32 %126, 2
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %127, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = or i32 %139, %144
  %146 = load i32, i32* %38, align 4
  %147 = sub nsw i32 8, %146
  %148 = lshr i32 %145, %147
  %149 = and i32 %148, 65534
  %150 = load i32, i32* %77, align 4
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 1, i64 %151
  %153 = load i32, i32* %152, align 4
  %154 = icmp ult i32 %149, %153
  br i1 %154, label %155, label %167

155:                                              ; preds = %125
  %156 = sub i32 16, %150
  %157 = lshr i32 %149, %156
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 4, i64 %158
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = add i32 %146, %161
  %163 = lshr i32 %162, 3
  %164 = add i32 %163, %126
  store i32 %164, i32* %6, align 8
  %165 = and i32 %162, 7
  store i32 %165, i32* %38, align 4
  %166 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 5, i64 %158
  br label %198

167:                                              ; preds = %125, %171
  %168 = phi i32 [ %169, %171 ], [ %150, %125 ]
  %169 = add i32 %168, 1
  %170 = icmp ult i32 %169, 15
  br i1 %170, label %171, label %176

171:                                              ; preds = %167
  %172 = zext i32 %169 to i64
  %173 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 1, i64 %172
  %174 = load i32, i32* %173, align 4
  %175 = icmp ult i32 %149, %174
  br i1 %175, label %176, label %167

176:                                              ; preds = %167, %171
  %177 = phi i32 [ %169, %171 ], [ 15, %167 ]
  %178 = add i32 %177, %146
  %179 = lshr i32 %178, 3
  %180 = add i32 %179, %126
  store i32 %180, i32* %6, align 8
  %181 = and i32 %178, 7
  store i32 %181, i32* %38, align 4
  %182 = add nsw i32 %177, -1
  %183 = zext i32 %182 to i64
  %184 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 1, i64 %183
  %185 = load i32, i32* %184, align 4
  %186 = sub i32 %149, %185
  %187 = sub nuw nsw i32 16, %177
  %188 = lshr i32 %186, %187
  %189 = zext i32 %177 to i64
  %190 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 2, i64 %189
  %191 = load i32, i32* %190, align 4
  %192 = add i32 %188, %191
  %193 = load i32, i32* %78, align 4
  %194 = icmp ult i32 %192, %193
  %195 = select i1 %194, i32 %192, i32 0
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 6, i64 %196
  br label %198

198:                                              ; preds = %155, %176
  %199 = phi i32 [ %165, %155 ], [ %181, %176 ]
  %200 = phi i32 [ %164, %155 ], [ %180, %176 ]
  %201 = phi i16* [ %166, %155 ], [ %197, %176 ]
  %202 = load i16, i16* %201, align 2
  %203 = icmp ult i16 %202, 16
  br i1 %203, label %204, label %213

204:                                              ; preds = %198
  %205 = zext i32 %117 to i64
  %206 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 51, i64 %205
  %207 = load i8, i8* %206, align 1
  %208 = trunc i16 %202 to i8
  %209 = add i8 %207, %208
  %210 = and i8 %209, 15
  %211 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 %205
  store i8 %210, i8* %211, align 1
  %212 = add i32 %117, 1
  br label %310

213:                                              ; preds = %198
  %214 = icmp eq i16 %202, 16
  br i1 %214, label %215, label %254

215:                                              ; preds = %213
  %216 = sext i32 %200 to i64
  %217 = getelementptr inbounds i8, i8* %127, i64 %216
  %218 = load i8, i8* %217, align 1
  %219 = add nsw i32 %200, 1
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds i8, i8* %127, i64 %220
  %222 = load i8, i8* %221, align 1
  %223 = add nsw i32 %200, 2
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds i8, i8* %127, i64 %224
  %226 = load i8, i8* %225, align 1
  %227 = add nuw nsw i32 %199, 2
  %228 = lshr i32 %227, 3
  %229 = add i32 %228, %200
  store i32 %229, i32* %6, align 8
  %230 = and i32 %227, 7
  store i32 %230, i32* %38, align 4
  %231 = icmp eq i32 %117, 0
  br i1 %231, label %343, label %232

232:                                              ; preds = %215
  %233 = icmp ult i32 %117, %74
  br i1 %233, label %234, label %310

234:                                              ; preds = %232
  %235 = zext i8 %222 to i32
  %236 = shl nuw nsw i32 %235, 8
  %237 = zext i8 %218 to i32
  %238 = shl nuw nsw i32 %237, 16
  %239 = or i32 %236, %238
  %240 = zext i8 %226 to i32
  %241 = or i32 %239, %240
  %242 = sub nuw nsw i32 8, %199
  %243 = lshr i32 %241, %242
  %244 = lshr i32 %243, 14
  %245 = and i32 %244, 3
  %246 = zext i32 %117 to i64
  %247 = add nuw nsw i64 %246, 4294967295
  %248 = and i64 %247, 4294967295
  %249 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 %248
  %250 = load i8, i8* %249, align 1
  %251 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 %246
  store i8 %250, i8* %251, align 1
  %252 = add nuw nsw i64 %246, 1
  %253 = icmp ult i64 %252, %79
  br i1 %253, label %345, label %305

254:                                              ; preds = %213
  %255 = icmp eq i16 %202, 17
  %256 = sext i32 %200 to i64
  %257 = getelementptr inbounds i8, i8* %127, i64 %256
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i32
  %260 = shl nuw nsw i32 %259, 16
  %261 = add nsw i32 %200, 1
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds i8, i8* %127, i64 %262
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %264 to i32
  %266 = shl nuw nsw i32 %265, 8
  %267 = or i32 %266, %260
  %268 = add nsw i32 %200, 2
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds i8, i8* %127, i64 %269
  %271 = load i8, i8* %270, align 1
  %272 = zext i8 %271 to i32
  %273 = or i32 %267, %272
  %274 = sub nuw nsw i32 8, %199
  %275 = lshr i32 %273, %274
  %276 = and i32 %275, 65535
  %277 = select i1 %255, i32 13, i32 9
  %278 = select i1 %255, i32 3, i32 11
  %279 = select i1 %255, i32 3, i32 7
  %280 = lshr i32 %276, %277
  %281 = add nuw nsw i32 %280, %278
  %282 = add nuw nsw i32 %199, %279
  %283 = lshr i32 %282, 3
  %284 = add i32 %283, %200
  store i32 %284, i32* %6, align 8
  %285 = and i32 %282, 7
  store i32 %285, i32* %38, align 4
  %286 = icmp ult i32 %117, %74
  br i1 %286, label %287, label %310

287:                                              ; preds = %254
  %288 = zext i32 %117 to i64
  %289 = getelementptr [1028 x i8], [1028 x i8]* %3, i64 0, i64 %288
  %290 = xor i64 %288, -1
  %291 = add nsw i64 %290, %79
  %292 = add nsw i32 %281, -1
  %293 = zext i32 %292 to i64
  %294 = icmp ult i64 %291, %293
  %295 = select i1 %294, i64 %291, i64 %293
  %296 = add nuw nsw i64 %295, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %289, i8 0, i64 %296, i1 false)
  br label %297

297:                                              ; preds = %287, %297
  %298 = phi i64 [ %288, %287 ], [ %301, %297 ]
  %299 = phi i32 [ %281, %287 ], [ %300, %297 ]
  %300 = add nsw i32 %299, -1
  %301 = add nuw nsw i64 %298, 1
  %302 = icmp ne i32 %300, 0
  %303 = icmp ult i64 %301, %79
  %304 = and i1 %303, %302
  br i1 %304, label %297, label %308

305:                                              ; preds = %381, %371, %361, %351, %345, %234
  %306 = phi i64 [ %252, %234 ], [ %349, %345 ], [ %357, %351 ], [ %367, %361 ], [ %377, %371 ], [ %387, %381 ]
  %307 = trunc i64 %306 to i32
  br label %310

308:                                              ; preds = %297
  %309 = trunc i64 %301 to i32
  br label %310

310:                                              ; preds = %308, %305, %254, %232, %204
  %311 = phi i32 [ %200, %204 ], [ %229, %232 ], [ %284, %254 ], [ %229, %305 ], [ %284, %308 ]
  %312 = phi i32 [ %212, %204 ], [ %117, %232 ], [ %117, %254 ], [ %307, %305 ], [ %309, %308 ]
  %313 = icmp ult i32 %312, %74
  br i1 %313, label %115, label %314

314:                                              ; preds = %310
  %315 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 63
  store i8 1, i8* %315, align 4
  %316 = load i32, i32* %8, align 8
  %317 = icmp sgt i32 %311, %316
  br i1 %317, label %343, label %318

318:                                              ; preds = %314
  %319 = load i8, i8* %43, align 8, !range !5
  %320 = icmp eq i8 %319, 0
  br i1 %320, label %335, label %321

321:                                              ; preds = %318
  %322 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 53
  %323 = load i32, i32* %322, align 4
  %324 = icmp eq i32 %323, 0
  br i1 %324, label %341, label %325

325:                                              ; preds = %321, %325
  %326 = phi i64 [ %331, %325 ], [ 0, %321 ]
  %327 = mul i64 %326, 257
  %328 = and i64 %327, 4294967295
  %329 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 %328
  %330 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %326
  call void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* undef, i8* %329, %struct.DecodeTable* %330, i32 257)
  %331 = add nuw nsw i64 %326, 1
  %332 = load i32, i32* %322, align 4
  %333 = zext i32 %332 to i64
  %334 = icmp ult i64 %331, %333
  br i1 %334, label %325, label %341

335:                                              ; preds = %318
  %336 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0
  call void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* undef, i8* nonnull %5, %struct.DecodeTable* %336, i32 298)
  %337 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 298
  %338 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1
  call void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* undef, i8* %337, %struct.DecodeTable* %338, i32 48)
  %339 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 346
  %340 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3
  call void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* undef, i8* %339, %struct.DecodeTable* %340, i32 28)
  br label %341

341:                                              ; preds = %325, %321, %335
  %342 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 51, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %342, i8* nonnull align 16 %5, i64 %79, i1 false)
  br label %343

343:                                              ; preds = %215, %121, %341, %314, %12
  %344 = phi i1 [ false, %12 ], [ true, %341 ], [ true, %314 ], [ false, %121 ], [ false, %215 ]
  call void @llvm.lifetime.end.p0i8(i64 1028, i8* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 19, i8* nonnull %4) #11
  ret i1 %344

345:                                              ; preds = %234
  %346 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 %246
  %347 = load i8, i8* %346, align 1
  %348 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 %252
  store i8 %347, i8* %348, align 1
  %349 = add nuw nsw i64 %246, 2
  %350 = icmp ult i64 %349, %79
  br i1 %350, label %351, label %305

351:                                              ; preds = %345
  %352 = add nuw nsw i64 %246, 1
  %353 = and i64 %352, 4294967295
  %354 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 %353
  %355 = load i8, i8* %354, align 1
  %356 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 %349
  store i8 %355, i8* %356, align 1
  %357 = add nuw nsw i64 %246, 3
  %358 = icmp ne i32 %245, 0
  %359 = icmp ult i64 %357, %79
  %360 = and i1 %359, %358
  br i1 %360, label %361, label %305

361:                                              ; preds = %351
  %362 = add nuw nsw i64 %246, 2
  %363 = and i64 %362, 4294967295
  %364 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 %363
  %365 = load i8, i8* %364, align 1
  %366 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 %357
  store i8 %365, i8* %366, align 1
  %367 = add nuw nsw i64 %246, 4
  %368 = icmp ne i32 %245, 1
  %369 = icmp ult i64 %367, %79
  %370 = and i1 %369, %368
  br i1 %370, label %371, label %305

371:                                              ; preds = %361
  %372 = add nuw nsw i64 %246, 3
  %373 = and i64 %372, 4294967295
  %374 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 %373
  %375 = load i8, i8* %374, align 1
  %376 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 %367
  store i8 %375, i8* %376, align 1
  %377 = add nuw nsw i64 %246, 5
  %378 = icmp ne i32 %245, 2
  %379 = icmp ult i64 %377, %79
  %380 = and i1 %379, %378
  br i1 %380, label %381, label %305

381:                                              ; preds = %371
  %382 = add nuw nsw i64 %246, 4
  %383 = and i64 %382, 4294967295
  %384 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 %383
  %385 = load i8, i8* %384, align 1
  %386 = getelementptr inbounds [1028 x i8], [1028 x i8]* %3, i64 0, i64 %377
  store i8 %385, i8* %386, align 1
  %387 = add nuw nsw i64 %246, 6
  br label %305
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i8 @_ZN6Unpack11DecodeAudioEi(%class.Unpack*, i32) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 54
  %4 = load i32, i32* %3, align 8
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 7
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 8
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 6
  %10 = load i32, i32* %9, align 4
  store i32 %10, i32* %6, align 4
  %11 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 9
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 5
  %14 = load i32, i32* %13, align 4
  %15 = sub nsw i32 %12, %14
  store i32 %15, i32* %9, align 4
  store i32 %12, i32* %13, align 4
  %16 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 12
  %17 = load i32, i32* %16, align 4
  %18 = shl i32 %17, 3
  %19 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = mul nsw i32 %20, %12
  %22 = add nsw i32 %21, %18
  %23 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = mul nsw i32 %24, %15
  %26 = add nsw i32 %22, %25
  %27 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = mul nsw i32 %28, %10
  %30 = add nsw i32 %26, %29
  %31 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = mul nsw i32 %32, %7
  %34 = add nsw i32 %30, %33
  %35 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 4
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 55
  %38 = load i32, i32* %37, align 4
  %39 = mul nsw i32 %38, %36
  %40 = add nsw i32 %34, %39
  %41 = lshr i32 %40, 3
  %42 = and i32 %41, 255
  %43 = sub nsw i32 %42, %1
  %44 = shl i32 %1, 24
  %45 = ashr exact i32 %44, 21
  %46 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 10, i64 0
  %47 = sub nsw i32 %45, %12
  %48 = add nsw i32 %12, %45
  %49 = sub nsw i32 %45, %15
  %50 = insertelement <4 x i32> undef, i32 %45, i32 0
  %51 = insertelement <4 x i32> %50, i32 %47, i32 1
  %52 = insertelement <4 x i32> %51, i32 %48, i32 2
  %53 = insertelement <4 x i32> %52, i32 %49, i32 3
  %54 = icmp slt <4 x i32> %53, zeroinitializer
  %55 = sub nsw <4 x i32> zeroinitializer, %53
  %56 = select <4 x i1> %54, <4 x i32> %55, <4 x i32> %53
  %57 = bitcast i32* %46 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4
  %59 = add <4 x i32> %58, %56
  %60 = bitcast i32* %46 to <4 x i32>*
  store <4 x i32> %59, <4 x i32>* %60, align 4
  %61 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 10, i64 4
  %62 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> zeroinitializer
  %63 = insertelement <4 x i32> undef, i32 %15, i32 0
  %64 = insertelement <4 x i32> %63, i32 %10, i32 1
  %65 = insertelement <4 x i32> %64, i32 %10, i32 2
  %66 = insertelement <4 x i32> %65, i32 %7, i32 3
  %67 = add nsw <4 x i32> %62, %66
  %68 = sub nsw <4 x i32> %62, %66
  %69 = shufflevector <4 x i32> %67, <4 x i32> %68, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %70 = icmp slt <4 x i32> %69, zeroinitializer
  %71 = sub nsw <4 x i32> zeroinitializer, %69
  %72 = select <4 x i1> %70, <4 x i32> %71, <4 x i32> %69
  %73 = bitcast i32* %61 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4
  %75 = add <4 x i32> %74, %72
  %76 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %76, align 4
  %77 = add nsw i32 %7, %45
  %78 = icmp slt i32 %77, 0
  %79 = sub nsw i32 0, %77
  %80 = select i1 %78, i32 %79, i32 %77
  %81 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 10, i64 8
  %82 = sub nsw i32 %45, %38
  %83 = icmp slt i32 %82, 0
  %84 = sub nsw i32 0, %82
  %85 = select i1 %83, i32 %84, i32 %82
  %86 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 10, i64 9
  %87 = add nsw i32 %38, %45
  %88 = icmp slt i32 %87, 0
  %89 = sub nsw i32 0, %87
  %90 = select i1 %88, i32 %89, i32 %87
  %91 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 10, i64 10
  %92 = bitcast i32* %81 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4
  %94 = insertelement <4 x i32> <i32 undef, i32 undef, i32 undef, i32 1>, i32 %80, i32 0
  %95 = insertelement <4 x i32> %94, i32 %85, i32 1
  %96 = insertelement <4 x i32> %95, i32 %90, i32 2
  %97 = add <4 x i32> %93, %96
  %98 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %98, align 4
  %99 = sub i32 %43, %17
  %100 = shl i32 %99, 24
  %101 = ashr exact i32 %100, 24
  store i32 %101, i32* %11, align 4
  store i32 %101, i32* %37, align 4
  store i32 %43, i32* %16, align 4
  %102 = extractelement <4 x i32> %97, i32 3
  %103 = and i32 %102, 31
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %204

105:                                              ; preds = %2
  %106 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 10, i64 7
  %107 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 10, i64 6
  %108 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 10, i64 5
  %109 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 10, i64 3
  %110 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 10, i64 2
  %111 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 %5, i32 10, i64 1
  %112 = load i32, i32* %111, align 4
  %113 = extractelement <4 x i32> %59, i32 0
  %114 = icmp ult i32 %112, %113
  %115 = select i1 %114, i32 %112, i32 %113
  %116 = zext i1 %114 to i32
  %117 = load i32, i32* %110, align 4
  %118 = icmp ult i32 %117, %115
  %119 = select i1 %118, i32 %117, i32 %115
  %120 = select i1 %118, i32 2, i32 %116
  %121 = load i32, i32* %109, align 4
  %122 = icmp ult i32 %121, %119
  %123 = select i1 %122, i32 %121, i32 %119
  %124 = select i1 %122, i32 3, i32 %120
  %125 = bitcast i32* %46 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %125, align 4
  %126 = load i32, i32* %61, align 4
  %127 = icmp ult i32 %126, %123
  %128 = select i1 %127, i32 %126, i32 %123
  %129 = select i1 %127, i32 4, i32 %124
  %130 = load i32, i32* %108, align 4
  %131 = icmp ult i32 %130, %128
  %132 = select i1 %131, i32 %130, i32 %128
  %133 = select i1 %131, i32 5, i32 %129
  %134 = load i32, i32* %107, align 4
  %135 = icmp ult i32 %134, %132
  %136 = select i1 %135, i32 %134, i32 %132
  %137 = select i1 %135, i32 6, i32 %133
  %138 = load i32, i32* %106, align 4
  %139 = icmp ult i32 %138, %136
  %140 = select i1 %139, i32 %138, i32 %136
  %141 = select i1 %139, i32 7, i32 %137
  %142 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %142, align 4
  %143 = load i32, i32* %81, align 4
  %144 = icmp ult i32 %143, %140
  %145 = select i1 %144, i32 %143, i32 %140
  %146 = select i1 %144, i32 8, i32 %141
  store i32 0, i32* %81, align 4
  %147 = load i32, i32* %86, align 4
  %148 = icmp ult i32 %147, %145
  %149 = select i1 %148, i32 %147, i32 %145
  %150 = select i1 %148, i32 9, i32 %146
  store i32 0, i32* %86, align 4
  %151 = load i32, i32* %91, align 4
  %152 = icmp ult i32 %151, %149
  %153 = select i1 %152, i32 10, i32 %150
  store i32 0, i32* %91, align 4
  switch i32 %153, label %204 [
    i32 1, label %154
    i32 2, label %159
    i32 3, label %164
    i32 4, label %169
    i32 5, label %174
    i32 6, label %179
    i32 7, label %184
    i32 8, label %189
    i32 9, label %194
    i32 10, label %199
  ]

154:                                              ; preds = %105
  %155 = load i32, i32* %19, align 4
  %156 = icmp sgt i32 %155, -17
  br i1 %156, label %157, label %204

157:                                              ; preds = %154
  %158 = add nsw i32 %155, -1
  store i32 %158, i32* %19, align 4
  br label %204

159:                                              ; preds = %105
  %160 = load i32, i32* %19, align 4
  %161 = icmp slt i32 %160, 16
  br i1 %161, label %162, label %204

162:                                              ; preds = %159
  %163 = add nsw i32 %160, 1
  store i32 %163, i32* %19, align 4
  br label %204

164:                                              ; preds = %105
  %165 = load i32, i32* %23, align 4
  %166 = icmp sgt i32 %165, -17
  br i1 %166, label %167, label %204

167:                                              ; preds = %164
  %168 = add nsw i32 %165, -1
  store i32 %168, i32* %23, align 4
  br label %204

169:                                              ; preds = %105
  %170 = load i32, i32* %23, align 4
  %171 = icmp slt i32 %170, 16
  br i1 %171, label %172, label %204

172:                                              ; preds = %169
  %173 = add nsw i32 %170, 1
  store i32 %173, i32* %23, align 4
  br label %204

174:                                              ; preds = %105
  %175 = load i32, i32* %27, align 4
  %176 = icmp sgt i32 %175, -17
  br i1 %176, label %177, label %204

177:                                              ; preds = %174
  %178 = add nsw i32 %175, -1
  store i32 %178, i32* %27, align 4
  br label %204

179:                                              ; preds = %105
  %180 = load i32, i32* %27, align 4
  %181 = icmp slt i32 %180, 16
  br i1 %181, label %182, label %204

182:                                              ; preds = %179
  %183 = add nsw i32 %180, 1
  store i32 %183, i32* %27, align 4
  br label %204

184:                                              ; preds = %105
  %185 = load i32, i32* %31, align 4
  %186 = icmp sgt i32 %185, -17
  br i1 %186, label %187, label %204

187:                                              ; preds = %184
  %188 = add nsw i32 %185, -1
  store i32 %188, i32* %31, align 4
  br label %204

189:                                              ; preds = %105
  %190 = load i32, i32* %31, align 4
  %191 = icmp slt i32 %190, 16
  br i1 %191, label %192, label %204

192:                                              ; preds = %189
  %193 = add nsw i32 %190, 1
  store i32 %193, i32* %31, align 4
  br label %204

194:                                              ; preds = %105
  %195 = load i32, i32* %35, align 4
  %196 = icmp sgt i32 %195, -17
  br i1 %196, label %197, label %204

197:                                              ; preds = %194
  %198 = add nsw i32 %195, -1
  store i32 %198, i32* %35, align 4
  br label %204

199:                                              ; preds = %105
  %200 = load i32, i32* %35, align 4
  %201 = icmp slt i32 %200, 16
  br i1 %201, label %202, label %204

202:                                              ; preds = %199
  %203 = add nsw i32 %200, 1
  store i32 %203, i32* %35, align 4
  br label %204

204:                                              ; preds = %105, %157, %154, %162, %159, %167, %164, %172, %169, %177, %174, %182, %179, %187, %184, %192, %189, %197, %194, %202, %199, %2
  %205 = trunc i32 %43 to i8
  ret i8 %205
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack14ReadLastTablesEv(%class.Unpack*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = add nsw i32 %5, 5
  %7 = icmp slt i32 %3, %6
  br i1 %7, label %179, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 52
  %10 = load i8, i8* %9, align 8, !range !5
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %97, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 54
  %14 = load i32, i32* %13, align 8
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %17 = load i8*, i8** %16, align 8
  %18 = sext i32 %5 to i64
  %19 = getelementptr inbounds i8, i8* %17, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = shl nuw nsw i32 %21, 16
  %23 = add nsw i32 %5, 1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %17, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = shl nuw nsw i32 %27, 8
  %29 = or i32 %28, %22
  %30 = add nsw i32 %5, 2
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %17, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %29, %34
  %36 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = sub nsw i32 8, %37
  %39 = lshr i32 %35, %38
  %40 = and i32 %39, 65534
  %41 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %15, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %15, i32 1, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = icmp ult i32 %40, %45
  br i1 %46, label %47, label %59

47:                                               ; preds = %12
  %48 = sub i32 16, %42
  %49 = lshr i32 %40, %48
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %15, i32 4, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = add i32 %37, %53
  %55 = lshr i32 %54, 3
  %56 = add i32 %55, %5
  store i32 %56, i32* %4, align 8
  %57 = and i32 %54, 7
  store i32 %57, i32* %36, align 4
  %58 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %15, i32 5, i64 %50
  br label %91

59:                                               ; preds = %12, %63
  %60 = phi i32 [ %61, %63 ], [ %42, %12 ]
  %61 = add i32 %60, 1
  %62 = icmp ult i32 %61, 15
  br i1 %62, label %63, label %68

63:                                               ; preds = %59
  %64 = zext i32 %61 to i64
  %65 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %15, i32 1, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = icmp ult i32 %40, %66
  br i1 %67, label %68, label %59

68:                                               ; preds = %59, %63
  %69 = phi i32 [ %61, %63 ], [ 15, %59 ]
  %70 = add i32 %69, %37
  %71 = lshr i32 %70, 3
  %72 = add i32 %71, %5
  store i32 %72, i32* %4, align 8
  %73 = and i32 %70, 7
  store i32 %73, i32* %36, align 4
  %74 = add nsw i32 %69, -1
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %15, i32 1, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = sub i32 %40, %77
  %79 = sub nuw nsw i32 16, %69
  %80 = lshr i32 %78, %79
  %81 = zext i32 %69 to i64
  %82 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %15, i32 2, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = add i32 %80, %83
  %85 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %15, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = icmp ult i32 %84, %86
  %88 = select i1 %87, i32 %84, i32 0
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 %15, i32 6, i64 %89
  br label %91

91:                                               ; preds = %47, %68
  %92 = phi i16* [ %58, %47 ], [ %90, %68 ]
  %93 = load i16, i16* %92, align 2
  %94 = icmp eq i16 %93, 256
  br i1 %94, label %95, label %179

95:                                               ; preds = %91
  %96 = tail call zeroext i1 @_ZN6Unpack12ReadTables20Ev(%class.Unpack* %0)
  br label %179

97:                                               ; preds = %8
  %98 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %99 = load i8*, i8** %98, align 8
  %100 = sext i32 %5 to i64
  %101 = getelementptr inbounds i8, i8* %99, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = shl nuw nsw i32 %103, 16
  %105 = add nsw i32 %5, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %99, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = shl nuw nsw i32 %109, 8
  %111 = or i32 %110, %104
  %112 = add nsw i32 %5, 2
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8, i8* %99, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = or i32 %111, %116
  %118 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 1
  %119 = load i32, i32* %118, align 4
  %120 = sub nsw i32 8, %119
  %121 = lshr i32 %117, %120
  %122 = and i32 %121, 65534
  %123 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 3
  %124 = load i32, i32* %123, align 4
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 1, i64 %125
  %127 = load i32, i32* %126, align 4
  %128 = icmp ult i32 %122, %127
  br i1 %128, label %129, label %141

129:                                              ; preds = %97
  %130 = sub i32 16, %124
  %131 = lshr i32 %122, %130
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 4, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = add i32 %119, %135
  %137 = lshr i32 %136, 3
  %138 = add i32 %137, %5
  store i32 %138, i32* %4, align 8
  %139 = and i32 %136, 7
  store i32 %139, i32* %118, align 4
  %140 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 5, i64 %132
  br label %173

141:                                              ; preds = %97, %145
  %142 = phi i32 [ %143, %145 ], [ %124, %97 ]
  %143 = add i32 %142, 1
  %144 = icmp ult i32 %143, 15
  br i1 %144, label %145, label %150

145:                                              ; preds = %141
  %146 = zext i32 %143 to i64
  %147 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 1, i64 %146
  %148 = load i32, i32* %147, align 4
  %149 = icmp ult i32 %122, %148
  br i1 %149, label %150, label %141

150:                                              ; preds = %141, %145
  %151 = phi i32 [ %143, %145 ], [ 15, %141 ]
  %152 = add i32 %151, %119
  %153 = lshr i32 %152, 3
  %154 = add i32 %153, %5
  store i32 %154, i32* %4, align 8
  %155 = and i32 %152, 7
  store i32 %155, i32* %118, align 4
  %156 = add nsw i32 %151, -1
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 1, i64 %157
  %159 = load i32, i32* %158, align 4
  %160 = sub i32 %122, %159
  %161 = sub nuw nsw i32 16, %151
  %162 = lshr i32 %160, %161
  %163 = zext i32 %151 to i64
  %164 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 2, i64 %163
  %165 = load i32, i32* %164, align 4
  %166 = add i32 %162, %165
  %167 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 0
  %168 = load i32, i32* %167, align 4
  %169 = icmp ult i32 %166, %168
  %170 = select i1 %169, i32 %166, i32 0
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 6, i64 %171
  br label %173

173:                                              ; preds = %129, %150
  %174 = phi i16* [ %140, %129 ], [ %172, %150 ]
  %175 = load i16, i16* %174, align 2
  %176 = icmp eq i16 %175, 269
  br i1 %176, label %177, label %179

177:                                              ; preds = %173
  %178 = tail call zeroext i1 @_ZN6Unpack12ReadTables20Ev(%class.Unpack* %0)
  br label %179

179:                                              ; preds = %1, %95, %91, %177, %173
  ret void
}

declare void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO*, i8*, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* nocapture readnone, i8* nocapture readonly, %struct.DecodeTable* nocapture, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca [16 x i32], align 16
  %6 = alloca [16 x i32], align 16
  %7 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 0
  store i32 %3, i32* %7, align 4
  %8 = bitcast [16 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #11
  %9 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 64, i1 false)
  %10 = zext i32 %3 to i64
  %11 = icmp eq i32 %3, 0
  br i1 %11, label %28, label %12

12:                                               ; preds = %4
  %13 = and i64 %10, 1
  %14 = icmp eq i32 %3, 1
  br i1 %14, label %17, label %15

15:                                               ; preds = %12
  %16 = sub nsw i64 %10, %13
  br label %35

17:                                               ; preds = %35, %12
  %18 = phi i64 [ 0, %12 ], [ %53, %35 ]
  %19 = icmp eq i64 %13, 0
  br i1 %19, label %28, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds i8, i8* %1, i64 %18
  %22 = load i8, i8* %21, align 1
  %23 = and i8 %22, 15
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = add i32 %26, 1
  store i32 %27, i32* %25, align 4
  br label %28

28:                                               ; preds = %20, %17, %4
  store i32 0, i32* %9, align 16
  %29 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 6
  %30 = bitcast [306 x i16]* %29 to i8*
  %31 = shl nuw nsw i64 %10, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %30, i8 0, i64 %31, i1 false)
  %32 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 2
  %33 = getelementptr inbounds [16 x i32], [16 x i32]* %32, i64 0, i64 0
  store i32 0, i32* %33, align 4
  %34 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 1, i64 0
  store i32 0, i32* %34, align 4
  br label %64

35:                                               ; preds = %35, %15
  %36 = phi i64 [ 0, %15 ], [ %53, %35 ]
  %37 = phi i64 [ %16, %15 ], [ %54, %35 ]
  %38 = getelementptr inbounds i8, i8* %1, i64 %36
  %39 = load i8, i8* %38, align 1
  %40 = and i8 %39, 15
  %41 = zext i8 %40 to i64
  %42 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = add i32 %43, 1
  store i32 %44, i32* %42, align 4
  %45 = or i64 %36, 1
  %46 = getelementptr inbounds i8, i8* %1, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = and i8 %47, 15
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = add i32 %51, 1
  store i32 %52, i32* %50, align 4
  %53 = add nuw nsw i64 %36, 2
  %54 = add i64 %37, -2
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %17, label %35

56:                                               ; preds = %64
  %57 = bitcast [16 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %57) #11
  %58 = bitcast [16 x i32]* %32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %57, i8* align 4 %58, i64 64, i1 false)
  br i1 %11, label %118, label %59

59:                                               ; preds = %56
  %60 = and i64 %10, 1
  %61 = icmp eq i32 %3, 1
  br i1 %61, label %80, label %62

62:                                               ; preds = %59
  %63 = sub nsw i64 %10, %60
  br label %97

64:                                               ; preds = %185, %28
  %65 = phi i32 [ 0, %28 ], [ %188, %185 ]
  %66 = phi i32 [ 0, %28 ], [ %195, %185 ]
  %67 = phi i32 [ 0, %28 ], [ %193, %185 ]
  %68 = phi i64 [ 1, %28 ], [ %197, %185 ]
  %69 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = add i32 %70, %67
  %72 = trunc i64 %68 to i32
  %73 = sub nuw nsw i32 16, %72
  %74 = shl i32 %71, %73
  %75 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 1, i64 %68
  store i32 %74, i32* %75, align 4
  %76 = add i32 %65, %66
  %77 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 2, i64 %68
  store i32 %76, i32* %77, align 4
  %78 = add nuw nsw i64 %68, 1
  %79 = icmp eq i64 %78, 16
  br i1 %79, label %56, label %185

80:                                               ; preds = %181, %59
  %81 = phi i64 [ 0, %59 ], [ %182, %181 ]
  %82 = icmp eq i64 %60, 0
  br i1 %82, label %96, label %83

83:                                               ; preds = %80
  %84 = getelementptr inbounds i8, i8* %1, i64 %81
  %85 = load i8, i8* %84, align 1
  %86 = and i8 %85, 15
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %96, label %88

88:                                               ; preds = %83
  %89 = zext i8 %86 to i64
  %90 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = trunc i64 %81 to i16
  %93 = zext i32 %91 to i64
  %94 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 6, i64 %93
  store i16 %92, i16* %94, align 2
  %95 = add i32 %91, 1
  store i32 %95, i32* %90, align 4
  br label %96

96:                                               ; preds = %88, %83, %80
  switch i32 %3, label %118 [
    i32 306, label %119
    i32 298, label %119
    i32 299, label %119
  ]

97:                                               ; preds = %181, %62
  %98 = phi i64 [ 0, %62 ], [ %182, %181 ]
  %99 = phi i64 [ %63, %62 ], [ %183, %181 ]
  %100 = getelementptr inbounds i8, i8* %1, i64 %98
  %101 = load i8, i8* %100, align 1
  %102 = and i8 %101, 15
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %112, label %104

104:                                              ; preds = %97
  %105 = zext i8 %102 to i64
  %106 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 %105
  %107 = load i32, i32* %106, align 4
  %108 = trunc i64 %98 to i16
  %109 = zext i32 %107 to i64
  %110 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 6, i64 %109
  store i16 %108, i16* %110, align 2
  %111 = add i32 %107, 1
  store i32 %111, i32* %106, align 4
  br label %112

112:                                              ; preds = %97, %104
  %113 = or i64 %98, 1
  %114 = getelementptr inbounds i8, i8* %1, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = and i8 %115, 15
  %117 = icmp eq i8 %116, 0
  br i1 %117, label %181, label %173

118:                                              ; preds = %56, %96
  br label %119

119:                                              ; preds = %96, %96, %96, %118
  %120 = phi i32 [ 7, %118 ], [ 10, %96 ], [ 10, %96 ], [ 10, %96 ]
  %121 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 3
  store i32 %120, i32* %121, align 4
  %122 = sub nuw nsw i32 16, %120
  br label %124

123:                                              ; preds = %165
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %57) #11
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #11
  ret void

124:                                              ; preds = %119, %165
  %125 = phi i32 [ 0, %119 ], [ %170, %165 ]
  %126 = phi i32 [ 1, %119 ], [ %168, %165 ]
  %127 = shl i32 %125, %122
  %128 = icmp ult i32 %126, 16
  br i1 %128, label %129, label %140

129:                                              ; preds = %124
  %130 = zext i32 %126 to i64
  br label %131

131:                                              ; preds = %136, %129
  %132 = phi i64 [ %130, %129 ], [ %137, %136 ]
  %133 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 1, i64 %132
  %134 = load i32, i32* %133, align 4
  %135 = icmp ult i32 %127, %134
  br i1 %135, label %145, label %136

136:                                              ; preds = %131
  %137 = add nuw nsw i64 %132, 1
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 16
  br i1 %139, label %140, label %131

140:                                              ; preds = %136, %124
  %141 = phi i32 [ %126, %124 ], [ 16, %136 ]
  %142 = trunc i32 %141 to i8
  %143 = zext i32 %125 to i64
  %144 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 4, i64 %143
  store i8 %142, i8* %144, align 1
  br label %165

145:                                              ; preds = %131
  %146 = trunc i64 %132 to i32
  %147 = trunc i64 %132 to i8
  %148 = zext i32 %125 to i64
  %149 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 4, i64 %148
  store i8 %147, i8* %149, align 1
  %150 = add nuw i64 %132, 4294967295
  %151 = and i64 %150, 4294967295
  %152 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 1, i64 %151
  %153 = load i32, i32* %152, align 4
  %154 = sub i32 %127, %153
  %155 = sub nuw nsw i32 16, %146
  %156 = lshr i32 %154, %155
  %157 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 2, i64 %132
  %158 = load i32, i32* %157, align 4
  %159 = add i32 %156, %158
  %160 = icmp ult i32 %159, %3
  br i1 %160, label %161, label %165

161:                                              ; preds = %145
  %162 = zext i32 %159 to i64
  %163 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 6, i64 %162
  %164 = load i16, i16* %163, align 2
  br label %165

165:                                              ; preds = %145, %140, %161
  %166 = phi i64 [ %148, %161 ], [ %148, %145 ], [ %143, %140 ]
  %167 = phi i16 [ %164, %161 ], [ 0, %145 ], [ 0, %140 ]
  %168 = phi i32 [ %146, %161 ], [ %146, %145 ], [ %141, %140 ]
  %169 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 5, i64 %166
  store i16 %167, i16* %169, align 2
  %170 = add i32 %125, 1
  %171 = lshr i32 %170, %120
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %124, label %123

173:                                              ; preds = %112
  %174 = zext i8 %116 to i64
  %175 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 %174
  %176 = load i32, i32* %175, align 4
  %177 = trunc i64 %113 to i16
  %178 = zext i32 %176 to i64
  %179 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 6, i64 %178
  store i16 %177, i16* %179, align 2
  %180 = add i32 %176, 1
  store i32 %180, i32* %175, align 4
  br label %181

181:                                              ; preds = %173, %112
  %182 = add nuw nsw i64 %98, 2
  %183 = add i64 %99, -2
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %80, label %97

185:                                              ; preds = %64
  %186 = shl i32 %71, 1
  %187 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %78
  %188 = load i32, i32* %187, align 4
  %189 = add i32 %188, %186
  %190 = trunc i64 %78 to i32
  %191 = sub nuw nsw i32 16, %190
  %192 = shl i32 %189, %191
  %193 = shl i32 %189, 1
  %194 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 1, i64 %78
  store i32 %192, i32* %194, align 4
  %195 = add i32 %70, %76
  %196 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %2, i64 0, i32 2, i64 %78
  store i32 %195, i32* %196, align 4
  %197 = add nuw nsw i64 %68, 2
  br label %64
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack13UnpInitData20Ei(%class.Unpack* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %14

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 63
  store i8 0, i8* %5, align 4
  %6 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 52
  store i8 0, i8* %6, align 8
  %7 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 55
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 54
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 53
  store i32 1, i32* %9, align 4
  %10 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 56, i64 0
  %11 = bitcast %struct.AudioVariables* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 368, i1 false)
  %12 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 50, i64 0
  %13 = bitcast %struct.DecodeTable* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 0, i64 16308, i1 false)
  br label %14

14:                                               ; preds = %2, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack8Unpack29Eb(%class.Unpack*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @_ZZN6Unpack8Unpack29EbE7DDecode, i64 0, i64 1), align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %108

5:                                                ; preds = %2, %93
  %6 = phi i64 [ %96, %93 ], [ 0, %2 ]
  %7 = phi i32 [ %95, %93 ], [ 0, %2 ]
  %8 = phi i32 [ %97, %93 ], [ 0, %2 ]
  %9 = phi i32 [ %94, %93 ], [ 0, %2 ]
  %10 = icmp eq i64 %6, 17
  br i1 %10, label %93, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds [19 x i32], [19 x i32]* @_ZZN6Unpack8Unpack29EbE16DBitLengthCounts, i64 0, i64 %6
  %13 = trunc i32 %8 to i8
  %14 = shl i32 1, %8
  %15 = load i32, i32* %12, align 4
  %16 = sext i32 %9 to i64
  %17 = getelementptr [64 x i8], [64 x i8]* @_ZZN6Unpack8Unpack29EbE5DBits, i64 0, i64 %16
  %18 = icmp sgt i32 %15, 1
  %19 = select i1 %18, i32 %15, i32 1
  %20 = zext i32 %19 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 %13, i64 %20, i1 false)
  %21 = icmp sgt i32 %15, 1
  %22 = select i1 %21, i32 %15, i32 1
  %23 = add nsw i32 %22, -1
  %24 = zext i32 %23 to i64
  %25 = add nuw nsw i64 %24, 1
  %26 = icmp ult i64 %25, 8
  br i1 %26, label %27, label %31

27:                                               ; preds = %87, %11
  %28 = phi i64 [ %16, %11 ], [ %33, %87 ]
  %29 = phi i32 [ %7, %11 ], [ %36, %87 ]
  %30 = phi i32 [ 0, %11 ], [ %37, %87 ]
  br label %99

31:                                               ; preds = %11
  %32 = and i64 %25, 8589934584
  %33 = add nsw i64 %32, %16
  %34 = trunc i64 %32 to i32
  %35 = shl i32 %34, %8
  %36 = add i32 %7, %35
  %37 = trunc i64 %32 to i32
  %38 = insertelement <4 x i32> undef, i32 %7, i32 0
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> zeroinitializer
  %40 = insertelement <4 x i32> undef, i32 %14, i32 0
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> zeroinitializer
  %42 = mul <4 x i32> %41, <i32 0, i32 1, i32 2, i32 3>
  %43 = add <4 x i32> %39, %42
  %44 = shl i32 %14, 2
  %45 = insertelement <4 x i32> undef, i32 %44, i32 0
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> zeroinitializer
  %47 = add nsw i64 %32, -8
  %48 = lshr exact i64 %47, 3
  %49 = add nuw nsw i64 %48, 1
  %50 = and i64 %49, 1
  %51 = icmp eq i64 %47, 0
  br i1 %51, label %76, label %52

52:                                               ; preds = %31
  %53 = sub nuw nsw i64 %49, %50
  br label %54

54:                                               ; preds = %54, %52
  %55 = phi i64 [ 0, %52 ], [ %72, %54 ]
  %56 = phi <4 x i32> [ %43, %52 ], [ %73, %54 ]
  %57 = phi i64 [ %53, %52 ], [ %74, %54 ]
  %58 = add i64 %55, %16
  %59 = add <4 x i32> %56, %46
  %60 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZZN6Unpack8Unpack29EbE7DDecode, i64 0, i64 %58
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> %56, <4 x i32>* %61, align 4
  %62 = getelementptr inbounds i32, i32* %60, i64 4
  %63 = bitcast i32* %62 to <4 x i32>*
  store <4 x i32> %59, <4 x i32>* %63, align 4
  %64 = or i64 %55, 8
  %65 = add <4 x i32> %59, %46
  %66 = add i64 %64, %16
  %67 = add <4 x i32> %65, %46
  %68 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZZN6Unpack8Unpack29EbE7DDecode, i64 0, i64 %66
  %69 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %69, align 4
  %70 = getelementptr inbounds i32, i32* %68, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> %67, <4 x i32>* %71, align 4
  %72 = add i64 %55, 16
  %73 = add <4 x i32> %67, %46
  %74 = add i64 %57, -2
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %54, !llvm.loop !32

76:                                               ; preds = %54, %31
  %77 = phi i64 [ 0, %31 ], [ %72, %54 ]
  %78 = phi <4 x i32> [ %43, %31 ], [ %73, %54 ]
  %79 = icmp eq i64 %50, 0
  br i1 %79, label %87, label %80

80:                                               ; preds = %76
  %81 = add i64 %77, %16
  %82 = add <4 x i32> %78, %46
  %83 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZZN6Unpack8Unpack29EbE7DDecode, i64 0, i64 %81
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %84, align 4
  %85 = getelementptr inbounds i32, i32* %83, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %86, align 4
  br label %87

87:                                               ; preds = %76, %80
  %88 = icmp eq i64 %25, %32
  br i1 %88, label %89, label %27

89:                                               ; preds = %99, %87
  %90 = phi i64 [ %33, %87 ], [ %105, %99 ]
  %91 = phi i32 [ %36, %87 ], [ %106, %99 ]
  %92 = trunc i64 %90 to i32
  br label %93

93:                                               ; preds = %89, %5
  %94 = phi i32 [ %9, %5 ], [ %92, %89 ]
  %95 = phi i32 [ %7, %5 ], [ %91, %89 ]
  %96 = add nuw nsw i64 %6, 1
  %97 = add nuw nsw i32 %8, 1
  %98 = icmp eq i64 %96, 19
  br i1 %98, label %108, label %5

99:                                               ; preds = %27, %99
  %100 = phi i64 [ %105, %99 ], [ %28, %27 ]
  %101 = phi i32 [ %106, %99 ], [ %29, %27 ]
  %102 = phi i32 [ %104, %99 ], [ %30, %27 ]
  %103 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZZN6Unpack8Unpack29EbE7DDecode, i64 0, i64 %100
  store i32 %101, i32* %103, align 4
  %104 = add nuw nsw i32 %102, 1
  %105 = add nsw i64 %100, 1
  %106 = add nsw i32 %101, %14
  %107 = icmp slt i32 %104, %15
  br i1 %107, label %99, label %89, !llvm.loop !33

108:                                              ; preds = %93, %2
  %109 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 28
  store i8 1, i8* %109, align 8
  %110 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 24
  %111 = load i8, i8* %110, align 8, !range !5
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %113, label %159

113:                                              ; preds = %108
  tail call void @_ZN6Unpack11UnpInitDataEb(%class.Unpack* %0, i1 zeroext %1)
  %114 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  %115 = load i32, i32* %114, align 8
  %116 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = sub nsw i32 %115, %117
  %119 = icmp slt i32 %118, 0
  br i1 %119, label %1076, label %120

120:                                              ; preds = %113
  %121 = icmp sgt i32 %117, 16384
  br i1 %121, label %122, label %131

122:                                              ; preds = %120
  %123 = icmp sgt i32 %118, 0
  br i1 %123, label %124, label %130

124:                                              ; preds = %122
  %125 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %126 = load i8*, i8** %125, align 8
  %127 = sext i32 %117 to i64
  %128 = getelementptr inbounds i8, i8* %126, i64 %127
  %129 = sext i32 %118 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %126, i8* align 1 %128, i64 %129, i1 false) #11
  br label %130

130:                                              ; preds = %124, %122
  store i32 0, i32* %116, align 8
  store i32 %118, i32* %114, align 8
  br label %131

131:                                              ; preds = %130, %120
  %132 = phi i32 [ %118, %130 ], [ %115, %120 ]
  %133 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %134 = load %class.ComprDataIO*, %class.ComprDataIO** %133, align 8
  %135 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %136 = load i8*, i8** %135, align 8
  %137 = sext i32 %132 to i64
  %138 = getelementptr inbounds i8, i8* %136, i64 %137
  %139 = sub nsw i32 32768, %132
  %140 = sext i32 %139 to i64
  %141 = tail call i32 @_ZN11ComprDataIO7UnpReadEPhm(%class.ComprDataIO* %134, i8* %138, i64 %140) #11
  %142 = icmp sgt i32 %141, 0
  %143 = load i32, i32* %114, align 8
  br i1 %142, label %144, label %148

144:                                              ; preds = %131
  %145 = add nsw i32 %143, %141
  store i32 %145, i32* %114, align 8
  %146 = add nsw i32 %145, -30
  %147 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 16
  store i32 %146, i32* %147, align 4
  br label %152

148:                                              ; preds = %131
  %149 = add nsw i32 %143, -30
  %150 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 16
  store i32 %149, i32* %150, align 4
  %151 = icmp eq i32 %141, -1
  br i1 %151, label %1076, label %152

152:                                              ; preds = %148, %144
  br i1 %1, label %153, label %157

153:                                              ; preds = %152
  %154 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 64
  %155 = load i8, i8* %154, align 1, !range !5
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %157, label %159

157:                                              ; preds = %153, %152
  %158 = tail call zeroext i1 @_ZN6Unpack12ReadTables30Ev(%class.Unpack* %0)
  br i1 %158, label %159, label %1076

159:                                              ; preds = %153, %108, %157
  %160 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %161 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %162 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 0
  %163 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 16
  %164 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  %165 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %166 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %167 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 14
  %168 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 27
  %169 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %170 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 62
  %171 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 1
  %172 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 3
  %173 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 0
  %174 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 11
  %175 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 0
  %176 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 64
  %177 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 2
  %178 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 3
  %179 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 1
  %180 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 72
  %181 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %182 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 3
  %183 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 0
  %184 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 3
  %185 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 0
  %186 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 58
  %187 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 3
  %188 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 0
  %189 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 57
  %190 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 59
  %191 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 60
  %192 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 1
  %193 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 0
  %194 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 1
  br label %195

195:                                              ; preds = %1065, %159
  %196 = load i64, i64* %160, align 8
  %197 = load i64, i64* %161, align 8
  %198 = and i64 %197, %196
  store i64 %198, i64* %161, align 8
  %199 = load i32, i32* %162, align 8
  %200 = load i32, i32* %163, align 4
  %201 = icmp sgt i32 %199, %200
  br i1 %201, label %202, label %233

202:                                              ; preds = %195
  %203 = load i32, i32* %164, align 8
  %204 = sub nsw i32 %203, %199
  %205 = icmp slt i32 %204, 0
  br i1 %205, label %1075, label %206

206:                                              ; preds = %202
  %207 = icmp sgt i32 %199, 16384
  br i1 %207, label %208, label %216

208:                                              ; preds = %206
  %209 = icmp sgt i32 %204, 0
  br i1 %209, label %210, label %215

210:                                              ; preds = %208
  %211 = load i8*, i8** %165, align 8
  %212 = sext i32 %199 to i64
  %213 = getelementptr inbounds i8, i8* %211, i64 %212
  %214 = sext i32 %204 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %211, i8* align 1 %213, i64 %214, i1 false) #11
  br label %215

215:                                              ; preds = %210, %208
  store i32 0, i32* %162, align 8
  store i32 %204, i32* %164, align 8
  br label %216

216:                                              ; preds = %215, %206
  %217 = phi i32 [ %204, %215 ], [ %203, %206 ]
  %218 = load %class.ComprDataIO*, %class.ComprDataIO** %166, align 8
  %219 = load i8*, i8** %165, align 8
  %220 = sext i32 %217 to i64
  %221 = getelementptr inbounds i8, i8* %219, i64 %220
  %222 = sub nsw i32 32768, %217
  %223 = sext i32 %222 to i64
  %224 = tail call i32 @_ZN11ComprDataIO7UnpReadEPhm(%class.ComprDataIO* %218, i8* %221, i64 %223) #11
  %225 = icmp sgt i32 %224, 0
  %226 = load i32, i32* %164, align 8
  br i1 %225, label %227, label %230

227:                                              ; preds = %216
  %228 = add nsw i32 %226, %224
  store i32 %228, i32* %164, align 8
  %229 = add nsw i32 %228, -30
  store i32 %229, i32* %163, align 4
  br label %233

230:                                              ; preds = %216
  %231 = add nsw i32 %226, -30
  store i32 %231, i32* %163, align 4
  %232 = icmp eq i32 %224, -1
  br i1 %232, label %1075, label %233

233:                                              ; preds = %230, %227, %195
  %234 = load i64, i64* %167, align 8
  %235 = load i64, i64* %161, align 8
  %236 = sub i64 %234, %235
  %237 = load i64, i64* %160, align 8
  %238 = and i64 %236, %237
  %239 = icmp ugt i64 %238, 259
  %240 = icmp eq i64 %234, %235
  %241 = or i1 %240, %239
  br i1 %241, label %250, label %242

242:                                              ; preds = %233
  tail call void @_ZN6Unpack13UnpWriteBuf30Ev(%class.Unpack* %0)
  %243 = load i64, i64* %168, align 8
  %244 = load i64, i64* %169, align 8
  %245 = icmp sgt i64 %243, %244
  br i1 %245, label %1076, label %246

246:                                              ; preds = %242
  %247 = load i8, i8* %110, align 8, !range !5
  %248 = icmp eq i8 %247, 0
  br i1 %248, label %250, label %249

249:                                              ; preds = %246
  store i8 0, i8* %109, align 8
  br label %1076

250:                                              ; preds = %233, %246
  %251 = load i32, i32* %170, align 8
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %253, label %287

253:                                              ; preds = %250
  %254 = tail call i32 @_ZN8ModelPPM10DecodeCharEv(%class.ModelPPM* %190)
  %255 = icmp eq i32 %254, -1
  br i1 %255, label %256, label %257

256:                                              ; preds = %253
  tail call void @_ZN8ModelPPM7CleanUpEv(%class.ModelPPM* %190)
  store i32 0, i32* %170, align 8
  br label %1075

257:                                              ; preds = %253
  %258 = load i32, i32* %191, align 8
  %259 = icmp eq i32 %254, %258
  br i1 %259, label %260, label %281

260:                                              ; preds = %257
  %261 = tail call i32 @_ZN8ModelPPM10DecodeCharEv(%class.ModelPPM* %190) #11
  switch i32 %261, label %281 [
    i32 -1, label %262
    i32 0, label %263
    i32 5, label %275
    i32 2, label %1075
    i32 3, label %265
    i32 4, label %267
  ]

262:                                              ; preds = %260
  tail call void @_ZN8ModelPPM7CleanUpEv(%class.ModelPPM* %190) #11
  store i32 0, i32* %170, align 8
  br label %1075

263:                                              ; preds = %260
  %264 = tail call zeroext i1 @_ZN6Unpack12ReadTables30Ev(%class.Unpack* %0)
  br i1 %264, label %1065, label %1075

265:                                              ; preds = %260
  %266 = tail call zeroext i1 @_ZN6Unpack13ReadVMCodePPMEv(%class.Unpack* %0)
  br i1 %266, label %1065, label %1075

267:                                              ; preds = %260
  %268 = tail call i32 @_ZN8ModelPPM10DecodeCharEv(%class.ModelPPM* %190) #11
  %269 = icmp eq i32 %268, -1
  br i1 %269, label %270, label %271

270:                                              ; preds = %1083, %1077, %271, %267
  tail call void @_ZN8ModelPPM7CleanUpEv(%class.ModelPPM* %190) #11
  store i32 0, i32* %170, align 8
  br label %1075

271:                                              ; preds = %267
  %272 = and i32 %268, 255
  %273 = tail call i32 @_ZN8ModelPPM10DecodeCharEv(%class.ModelPPM* %190) #11
  %274 = icmp eq i32 %273, -1
  br i1 %274, label %270, label %1077

275:                                              ; preds = %260
  %276 = tail call i32 @_ZN8ModelPPM10DecodeCharEv(%class.ModelPPM* %190) #11
  %277 = icmp eq i32 %276, -1
  br i1 %277, label %278, label %279

278:                                              ; preds = %275
  tail call void @_ZN8ModelPPM7CleanUpEv(%class.ModelPPM* %190) #11
  store i32 0, i32* %170, align 8
  br label %1075

279:                                              ; preds = %275
  %280 = add nsw i32 %276, 4
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %280, i32 1)
  br label %1065

281:                                              ; preds = %260, %257
  %282 = trunc i32 %254 to i8
  %283 = load i8*, i8** %181, align 8
  %284 = load i64, i64* %161, align 8
  %285 = add i64 %284, 1
  store i64 %285, i64* %161, align 8
  %286 = getelementptr inbounds i8, i8* %283, i64 %284
  store i8 %282, i8* %286, align 1
  br label %1065

287:                                              ; preds = %250
  %288 = load i8*, i8** %165, align 8
  %289 = load i32, i32* %162, align 8
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds i8, i8* %288, i64 %290
  %292 = load i8, i8* %291, align 1
  %293 = zext i8 %292 to i32
  %294 = shl nuw nsw i32 %293, 16
  %295 = add nsw i32 %289, 1
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds i8, i8* %288, i64 %296
  %298 = load i8, i8* %297, align 1
  %299 = zext i8 %298 to i32
  %300 = shl nuw nsw i32 %299, 8
  %301 = or i32 %300, %294
  %302 = add nsw i32 %289, 2
  %303 = sext i32 %302 to i64
  %304 = getelementptr inbounds i8, i8* %288, i64 %303
  %305 = load i8, i8* %304, align 1
  %306 = zext i8 %305 to i32
  %307 = or i32 %301, %306
  %308 = load i32, i32* %171, align 4
  %309 = sub nsw i32 8, %308
  %310 = lshr i32 %307, %309
  %311 = and i32 %310, 65534
  %312 = load i32, i32* %172, align 4
  %313 = zext i32 %312 to i64
  %314 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 1, i64 %313
  %315 = load i32, i32* %314, align 4
  %316 = icmp ult i32 %311, %315
  br i1 %316, label %317, label %329

317:                                              ; preds = %287
  %318 = sub i32 16, %312
  %319 = lshr i32 %311, %318
  %320 = zext i32 %319 to i64
  %321 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 4, i64 %320
  %322 = load i8, i8* %321, align 1
  %323 = zext i8 %322 to i32
  %324 = add i32 %308, %323
  %325 = lshr i32 %324, 3
  %326 = add i32 %325, %289
  store i32 %326, i32* %162, align 8
  %327 = and i32 %324, 7
  store i32 %327, i32* %171, align 4
  %328 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 5, i64 %320
  br label %360

329:                                              ; preds = %287, %333
  %330 = phi i32 [ %331, %333 ], [ %312, %287 ]
  %331 = add i32 %330, 1
  %332 = icmp ult i32 %331, 15
  br i1 %332, label %333, label %338

333:                                              ; preds = %329
  %334 = zext i32 %331 to i64
  %335 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 1, i64 %334
  %336 = load i32, i32* %335, align 4
  %337 = icmp ult i32 %311, %336
  br i1 %337, label %338, label %329

338:                                              ; preds = %329, %333
  %339 = phi i32 [ %331, %333 ], [ 15, %329 ]
  %340 = add i32 %339, %308
  %341 = lshr i32 %340, 3
  %342 = add i32 %341, %289
  store i32 %342, i32* %162, align 8
  %343 = and i32 %340, 7
  store i32 %343, i32* %171, align 4
  %344 = add nsw i32 %339, -1
  %345 = zext i32 %344 to i64
  %346 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 1, i64 %345
  %347 = load i32, i32* %346, align 4
  %348 = sub i32 %311, %347
  %349 = sub nuw nsw i32 16, %339
  %350 = lshr i32 %348, %349
  %351 = zext i32 %339 to i64
  %352 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 2, i64 %351
  %353 = load i32, i32* %352, align 4
  %354 = add i32 %350, %353
  %355 = load i32, i32* %173, align 4
  %356 = icmp ult i32 %354, %355
  %357 = select i1 %356, i32 %354, i32 0
  %358 = zext i32 %357 to i64
  %359 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 6, i64 %358
  br label %360

360:                                              ; preds = %317, %338
  %361 = phi i32 [ %327, %317 ], [ %343, %338 ]
  %362 = phi i32 [ %326, %317 ], [ %342, %338 ]
  %363 = phi i16* [ %328, %317 ], [ %359, %338 ]
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = icmp ult i16 %364, 256
  br i1 %366, label %367, label %373

367:                                              ; preds = %360
  %368 = trunc i16 %364 to i8
  %369 = load i8*, i8** %181, align 8
  %370 = load i64, i64* %161, align 8
  %371 = add i64 %370, 1
  store i64 %371, i64* %161, align 8
  %372 = getelementptr inbounds i8, i8* %369, i64 %370
  store i8 %368, i8* %372, align 1
  br label %1065

373:                                              ; preds = %360
  %374 = icmp ugt i16 %364, 270
  br i1 %374, label %375, label %669

375:                                              ; preds = %373
  %376 = add nsw i32 %365, -271
  %377 = zext i32 %376 to i64
  %378 = getelementptr inbounds [28 x i8], [28 x i8]* @_ZZN6Unpack8Unpack29EbE7LDecode, i64 0, i64 %377
  %379 = load i8, i8* %378, align 1
  %380 = zext i8 %379 to i32
  %381 = add nuw nsw i32 %380, 3
  %382 = getelementptr inbounds [28 x i8], [28 x i8]* @_ZZN6Unpack8Unpack29EbE5LBits, i64 0, i64 %377
  %383 = load i8, i8* %382, align 1
  %384 = zext i8 %383 to i32
  %385 = add nsw i64 %377, -8
  %386 = icmp ult i64 %385, 20
  br i1 %386, label %387, label %416

387:                                              ; preds = %375
  %388 = sext i32 %362 to i64
  %389 = getelementptr inbounds i8, i8* %288, i64 %388
  %390 = load i8, i8* %389, align 1
  %391 = zext i8 %390 to i32
  %392 = shl nuw nsw i32 %391, 16
  %393 = add nsw i32 %362, 1
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds i8, i8* %288, i64 %394
  %396 = load i8, i8* %395, align 1
  %397 = zext i8 %396 to i32
  %398 = shl nuw nsw i32 %397, 8
  %399 = or i32 %398, %392
  %400 = add nsw i32 %362, 2
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds i8, i8* %288, i64 %401
  %403 = load i8, i8* %402, align 1
  %404 = zext i8 %403 to i32
  %405 = or i32 %399, %404
  %406 = sub nuw nsw i32 8, %361
  %407 = lshr i32 %405, %406
  %408 = and i32 %407, 65535
  %409 = sub nsw i32 16, %384
  %410 = lshr i32 %408, %409
  %411 = add nuw nsw i32 %410, %381
  %412 = add nuw nsw i32 %361, %384
  %413 = lshr i32 %412, 3
  %414 = add i32 %413, %362
  store i32 %414, i32* %162, align 8
  %415 = and i32 %412, 7
  store i32 %415, i32* %171, align 4
  br label %416

416:                                              ; preds = %387, %375
  %417 = phi i32 [ %415, %387 ], [ %361, %375 ]
  %418 = phi i32 [ %414, %387 ], [ %362, %375 ]
  %419 = phi i32 [ %411, %387 ], [ %381, %375 ]
  %420 = sext i32 %418 to i64
  %421 = getelementptr inbounds i8, i8* %288, i64 %420
  %422 = load i8, i8* %421, align 1
  %423 = zext i8 %422 to i32
  %424 = shl nuw nsw i32 %423, 16
  %425 = add nsw i32 %418, 1
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds i8, i8* %288, i64 %426
  %428 = load i8, i8* %427, align 1
  %429 = zext i8 %428 to i32
  %430 = shl nuw nsw i32 %429, 8
  %431 = or i32 %430, %424
  %432 = add nsw i32 %418, 2
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds i8, i8* %288, i64 %433
  %435 = load i8, i8* %434, align 1
  %436 = zext i8 %435 to i32
  %437 = or i32 %431, %436
  %438 = sub nuw nsw i32 8, %417
  %439 = lshr i32 %437, %438
  %440 = and i32 %439, 65534
  %441 = load i32, i32* %184, align 4
  %442 = zext i32 %441 to i64
  %443 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 1, i64 %442
  %444 = load i32, i32* %443, align 4
  %445 = icmp ult i32 %440, %444
  br i1 %445, label %446, label %458

446:                                              ; preds = %416
  %447 = sub i32 16, %441
  %448 = lshr i32 %440, %447
  %449 = zext i32 %448 to i64
  %450 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 4, i64 %449
  %451 = load i8, i8* %450, align 1
  %452 = zext i8 %451 to i32
  %453 = add nuw nsw i32 %417, %452
  %454 = lshr i32 %453, 3
  %455 = add i32 %454, %418
  store i32 %455, i32* %162, align 8
  %456 = and i32 %453, 7
  store i32 %456, i32* %171, align 4
  %457 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 5, i64 %449
  br label %489

458:                                              ; preds = %416, %462
  %459 = phi i32 [ %460, %462 ], [ %441, %416 ]
  %460 = add i32 %459, 1
  %461 = icmp ult i32 %460, 15
  br i1 %461, label %462, label %467

462:                                              ; preds = %458
  %463 = zext i32 %460 to i64
  %464 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 1, i64 %463
  %465 = load i32, i32* %464, align 4
  %466 = icmp ult i32 %440, %465
  br i1 %466, label %467, label %458

467:                                              ; preds = %458, %462
  %468 = phi i32 [ %460, %462 ], [ 15, %458 ]
  %469 = add i32 %468, %417
  %470 = lshr i32 %469, 3
  %471 = add i32 %470, %418
  store i32 %471, i32* %162, align 8
  %472 = and i32 %469, 7
  store i32 %472, i32* %171, align 4
  %473 = add nsw i32 %468, -1
  %474 = zext i32 %473 to i64
  %475 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 1, i64 %474
  %476 = load i32, i32* %475, align 4
  %477 = sub i32 %440, %476
  %478 = sub nuw nsw i32 16, %468
  %479 = lshr i32 %477, %478
  %480 = zext i32 %468 to i64
  %481 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 2, i64 %480
  %482 = load i32, i32* %481, align 4
  %483 = add i32 %479, %482
  %484 = load i32, i32* %185, align 4
  %485 = icmp ult i32 %483, %484
  %486 = select i1 %485, i32 %483, i32 0
  %487 = zext i32 %486 to i64
  %488 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 6, i64 %487
  br label %489

489:                                              ; preds = %446, %467
  %490 = phi i32 [ %456, %446 ], [ %472, %467 ]
  %491 = phi i32 [ %455, %446 ], [ %471, %467 ]
  %492 = phi i16* [ %457, %446 ], [ %488, %467 ]
  %493 = load i16, i16* %492, align 2
  %494 = zext i16 %493 to i64
  %495 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZZN6Unpack8Unpack29EbE7DDecode, i64 0, i64 %494
  %496 = load i32, i32* %495, align 4
  %497 = add nsw i32 %496, 1
  %498 = getelementptr inbounds [64 x i8], [64 x i8]* @_ZZN6Unpack8Unpack29EbE5DBits, i64 0, i64 %494
  %499 = load i8, i8* %498, align 1
  %500 = zext i8 %499 to i32
  %501 = icmp eq i8 %499, 0
  br i1 %501, label %657, label %502

502:                                              ; preds = %489
  %503 = icmp ugt i16 %493, 9
  br i1 %503, label %504, label %628

504:                                              ; preds = %502
  %505 = icmp ugt i8 %499, 4
  br i1 %505, label %506, label %537

506:                                              ; preds = %504
  %507 = sext i32 %491 to i64
  %508 = getelementptr inbounds i8, i8* %288, i64 %507
  %509 = load i8, i8* %508, align 1
  %510 = zext i8 %509 to i32
  %511 = shl nuw nsw i32 %510, 16
  %512 = add nsw i32 %491, 1
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds i8, i8* %288, i64 %513
  %515 = load i8, i8* %514, align 1
  %516 = zext i8 %515 to i32
  %517 = shl nuw nsw i32 %516, 8
  %518 = or i32 %517, %511
  %519 = add nsw i32 %491, 2
  %520 = sext i32 %519 to i64
  %521 = getelementptr inbounds i8, i8* %288, i64 %520
  %522 = load i8, i8* %521, align 1
  %523 = zext i8 %522 to i32
  %524 = or i32 %518, %523
  %525 = sub nuw nsw i32 8, %490
  %526 = lshr i32 %524, %525
  %527 = and i32 %526, 65535
  %528 = sub nsw i32 20, %500
  %529 = lshr i32 %527, %528
  %530 = shl i32 %529, 4
  %531 = add i32 %530, %497
  %532 = add nsw i32 %500, -4
  %533 = add nsw i32 %532, %490
  %534 = lshr i32 %533, 3
  %535 = add i32 %534, %491
  store i32 %535, i32* %162, align 8
  %536 = and i32 %533, 7
  store i32 %536, i32* %171, align 4
  br label %537

537:                                              ; preds = %506, %504
  %538 = phi i32 [ %536, %506 ], [ %490, %504 ]
  %539 = phi i32 [ %535, %506 ], [ %491, %504 ]
  %540 = phi i32 [ %531, %506 ], [ %497, %504 ]
  %541 = load i32, i32* %186, align 4
  %542 = icmp sgt i32 %541, 0
  br i1 %542, label %543, label %547

543:                                              ; preds = %537
  %544 = add nsw i32 %541, -1
  store i32 %544, i32* %186, align 4
  %545 = load i32, i32* %189, align 8
  %546 = add i32 %545, %540
  br label %657

547:                                              ; preds = %537
  %548 = sext i32 %539 to i64
  %549 = getelementptr inbounds i8, i8* %288, i64 %548
  %550 = load i8, i8* %549, align 1
  %551 = zext i8 %550 to i32
  %552 = shl nuw nsw i32 %551, 16
  %553 = add nsw i32 %539, 1
  %554 = sext i32 %553 to i64
  %555 = getelementptr inbounds i8, i8* %288, i64 %554
  %556 = load i8, i8* %555, align 1
  %557 = zext i8 %556 to i32
  %558 = shl nuw nsw i32 %557, 8
  %559 = or i32 %558, %552
  %560 = add nsw i32 %539, 2
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds i8, i8* %288, i64 %561
  %563 = load i8, i8* %562, align 1
  %564 = zext i8 %563 to i32
  %565 = or i32 %559, %564
  %566 = sub nuw nsw i32 8, %538
  %567 = lshr i32 %565, %566
  %568 = and i32 %567, 65534
  %569 = load i32, i32* %187, align 4
  %570 = zext i32 %569 to i64
  %571 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 1, i64 %570
  %572 = load i32, i32* %571, align 4
  %573 = icmp ult i32 %568, %572
  br i1 %573, label %574, label %586

574:                                              ; preds = %547
  %575 = sub i32 16, %569
  %576 = lshr i32 %568, %575
  %577 = zext i32 %576 to i64
  %578 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 4, i64 %577
  %579 = load i8, i8* %578, align 1
  %580 = zext i8 %579 to i32
  %581 = add nuw nsw i32 %538, %580
  %582 = lshr i32 %581, 3
  %583 = add i32 %582, %539
  store i32 %583, i32* %162, align 8
  %584 = and i32 %581, 7
  store i32 %584, i32* %171, align 4
  %585 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 5, i64 %577
  br label %617

586:                                              ; preds = %547, %590
  %587 = phi i32 [ %588, %590 ], [ %569, %547 ]
  %588 = add i32 %587, 1
  %589 = icmp ult i32 %588, 15
  br i1 %589, label %590, label %595

590:                                              ; preds = %586
  %591 = zext i32 %588 to i64
  %592 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 1, i64 %591
  %593 = load i32, i32* %592, align 4
  %594 = icmp ult i32 %568, %593
  br i1 %594, label %595, label %586

595:                                              ; preds = %586, %590
  %596 = phi i32 [ %588, %590 ], [ 15, %586 ]
  %597 = add i32 %596, %538
  %598 = lshr i32 %597, 3
  %599 = add i32 %598, %539
  store i32 %599, i32* %162, align 8
  %600 = and i32 %597, 7
  store i32 %600, i32* %171, align 4
  %601 = add nsw i32 %596, -1
  %602 = zext i32 %601 to i64
  %603 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 1, i64 %602
  %604 = load i32, i32* %603, align 4
  %605 = sub i32 %568, %604
  %606 = sub nuw nsw i32 16, %596
  %607 = lshr i32 %605, %606
  %608 = zext i32 %596 to i64
  %609 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 2, i64 %608
  %610 = load i32, i32* %609, align 4
  %611 = add i32 %607, %610
  %612 = load i32, i32* %188, align 4
  %613 = icmp ult i32 %611, %612
  %614 = select i1 %613, i32 %611, i32 0
  %615 = zext i32 %614 to i64
  %616 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 6, i64 %615
  br label %617

617:                                              ; preds = %574, %595
  %618 = phi i16* [ %585, %574 ], [ %616, %595 ]
  %619 = load i16, i16* %618, align 2
  %620 = zext i16 %619 to i32
  %621 = icmp eq i16 %619, 16
  br i1 %621, label %622, label %624

622:                                              ; preds = %617
  store i32 15, i32* %186, align 4
  %623 = load i32, i32* %189, align 8
  br label %625

624:                                              ; preds = %617
  store i32 %620, i32* %189, align 8
  br label %625

625:                                              ; preds = %624, %622
  %626 = phi i32 [ %623, %622 ], [ %620, %624 ]
  %627 = add i32 %626, %540
  br label %657

628:                                              ; preds = %502
  %629 = sext i32 %491 to i64
  %630 = getelementptr inbounds i8, i8* %288, i64 %629
  %631 = load i8, i8* %630, align 1
  %632 = zext i8 %631 to i32
  %633 = shl nuw nsw i32 %632, 16
  %634 = add nsw i32 %491, 1
  %635 = sext i32 %634 to i64
  %636 = getelementptr inbounds i8, i8* %288, i64 %635
  %637 = load i8, i8* %636, align 1
  %638 = zext i8 %637 to i32
  %639 = shl nuw nsw i32 %638, 8
  %640 = or i32 %639, %633
  %641 = add nsw i32 %491, 2
  %642 = sext i32 %641 to i64
  %643 = getelementptr inbounds i8, i8* %288, i64 %642
  %644 = load i8, i8* %643, align 1
  %645 = zext i8 %644 to i32
  %646 = or i32 %640, %645
  %647 = sub nuw nsw i32 8, %490
  %648 = lshr i32 %646, %647
  %649 = and i32 %648, 65535
  %650 = sub nsw i32 16, %500
  %651 = lshr i32 %649, %650
  %652 = add i32 %651, %497
  %653 = add nuw nsw i32 %490, %500
  %654 = lshr i32 %653, 3
  %655 = add i32 %654, %491
  store i32 %655, i32* %162, align 8
  %656 = and i32 %653, 7
  store i32 %656, i32* %171, align 4
  br label %657

657:                                              ; preds = %489, %628, %625, %543
  %658 = phi i32 [ %546, %543 ], [ %627, %625 ], [ %652, %628 ], [ %497, %489 ]
  %659 = icmp ugt i32 %658, 8191
  br i1 %659, label %660, label %664

660:                                              ; preds = %657
  %661 = icmp ugt i32 %658, 262143
  %662 = select i1 %661, i32 2, i32 1
  %663 = add i32 %662, %419
  br label %664

664:                                              ; preds = %660, %657
  %665 = phi i32 [ %419, %657 ], [ %663, %660 ]
  %666 = load i32, i32* %177, align 8
  store i32 %666, i32* %178, align 4
  %667 = load i32, i32* %179, align 4
  store i32 %667, i32* %177, align 8
  %668 = load i32, i32* %175, align 8
  store i32 %668, i32* %179, align 4
  store i32 %658, i32* %175, align 8
  store i32 %665, i32* %174, align 4
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %665, i32 %658)
  br label %1065

669:                                              ; preds = %373
  switch i16 %364, label %715 [
    i16 256, label %670
    i16 257, label %708
    i16 258, label %710
  ]

670:                                              ; preds = %669
  %671 = sext i32 %362 to i64
  %672 = getelementptr inbounds i8, i8* %288, i64 %671
  %673 = load i8, i8* %672, align 1
  %674 = zext i8 %673 to i32
  %675 = shl nuw nsw i32 %674, 16
  %676 = add nsw i32 %362, 1
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds i8, i8* %288, i64 %677
  %679 = load i8, i8* %678, align 1
  %680 = zext i8 %679 to i32
  %681 = shl nuw nsw i32 %680, 8
  %682 = or i32 %681, %675
  %683 = add nsw i32 %362, 2
  %684 = sext i32 %683 to i64
  %685 = getelementptr inbounds i8, i8* %288, i64 %684
  %686 = load i8, i8* %685, align 1
  %687 = zext i8 %686 to i32
  %688 = or i32 %682, %687
  %689 = sub nuw nsw i32 8, %361
  %690 = lshr i32 %688, %689
  %691 = trunc i32 %690 to i16
  %692 = icmp slt i16 %691, 0
  br i1 %692, label %702, label %693

693:                                              ; preds = %670
  %694 = add nuw nsw i32 %361, 2
  %695 = lshr i32 %694, 3
  %696 = add i32 %695, %362
  store i32 %696, i32* %162, align 8
  %697 = and i32 %694, 7
  store i32 %697, i32* %171, align 4
  %698 = lshr i32 %690, 14
  %699 = trunc i32 %698 to i8
  %700 = and i8 %699, 1
  %701 = xor i8 %700, 1
  store i8 %701, i8* %176, align 1
  br label %1075

702:                                              ; preds = %670
  %703 = add nuw nsw i32 %361, 1
  %704 = lshr i32 %703, 3
  %705 = add i32 %704, %362
  store i32 %705, i32* %162, align 8
  %706 = and i32 %703, 7
  store i32 %706, i32* %171, align 4
  store i8 0, i8* %176, align 1
  %707 = tail call zeroext i1 @_ZN6Unpack12ReadTables30Ev(%class.Unpack* %0) #11
  br i1 %707, label %1065, label %1075

708:                                              ; preds = %669
  %709 = tail call zeroext i1 @_ZN6Unpack10ReadVMCodeEv(%class.Unpack* %0)
  br i1 %709, label %1065, label %1075

710:                                              ; preds = %669
  %711 = load i32, i32* %174, align 4
  %712 = icmp eq i32 %711, 0
  br i1 %712, label %1065, label %713

713:                                              ; preds = %710
  %714 = load i32, i32* %175, align 8
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %711, i32 %714)
  br label %1065

715:                                              ; preds = %669
  %716 = icmp ult i16 %364, 263
  br i1 %716, label %717, label %995

717:                                              ; preds = %715
  %718 = add nsw i32 %365, -259
  %719 = zext i32 %718 to i64
  %720 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %719
  %721 = load i32, i32* %720, align 4
  %722 = icmp eq i32 %718, 0
  br i1 %722, label %849, label %723

723:                                              ; preds = %717
  %724 = add nsw i32 %365, -260
  %725 = zext i32 %724 to i64
  %726 = add nuw nsw i64 %725, 1
  %727 = icmp ult i64 %726, 8
  br i1 %727, label %728, label %748

728:                                              ; preds = %844, %762, %748, %723
  %729 = phi i64 [ %719, %762 ], [ %719, %748 ], [ %719, %723 ], [ %774, %844 ]
  %730 = trunc i64 %729 to i32
  %731 = add i32 %730, -1
  %732 = and i32 %730, 3
  %733 = icmp eq i32 %732, 0
  br i1 %733, label %745, label %734

734:                                              ; preds = %728, %734
  %735 = phi i64 [ %742, %734 ], [ %729, %728 ]
  %736 = phi i32 [ %743, %734 ], [ %732, %728 ]
  %737 = add i64 %735, 4294967295
  %738 = and i64 %737, 4294967295
  %739 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %738
  %740 = load i32, i32* %739, align 4
  %741 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %735
  store i32 %740, i32* %741, align 4
  %742 = add nsw i64 %735, -1
  %743 = add i32 %736, -1
  %744 = icmp eq i32 %743, 0
  br i1 %744, label %745, label %734, !llvm.loop !35

745:                                              ; preds = %734, %728
  %746 = phi i64 [ %729, %728 ], [ %742, %734 ]
  %747 = icmp ult i32 %731, 3
  br i1 %747, label %846, label %936

748:                                              ; preds = %723
  %749 = add nsw i32 %365, -260
  %750 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %719
  %751 = ptrtoint i32* %750 to i64
  %752 = zext i32 %749 to i64
  %753 = shl nuw nsw i64 %752, 2
  %754 = icmp ugt i64 %753, %751
  %755 = zext i32 %749 to i64
  %756 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %755
  %757 = ptrtoint i32* %756 to i64
  %758 = zext i32 %749 to i64
  %759 = shl nuw nsw i64 %758, 2
  %760 = icmp ugt i64 %759, %757
  %761 = or i1 %754, %760
  br i1 %761, label %728, label %762

762:                                              ; preds = %748
  %763 = add nsw i32 %365, -260
  %764 = zext i32 %763 to i64
  %765 = sub nsw i64 %719, %764
  %766 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %765
  %767 = getelementptr i32, i32* %192, i64 %719
  %768 = getelementptr i32, i32* %194, i64 %764
  %769 = icmp ult i32* %766, %768
  %770 = icmp ult i32* %193, %767
  %771 = and i1 %769, %770
  br i1 %771, label %728, label %772

772:                                              ; preds = %762
  %773 = and i64 %726, 8589934584
  %774 = sub nsw i64 %719, %773
  %775 = add nsw i64 %773, -8
  %776 = lshr exact i64 %775, 3
  %777 = add nuw nsw i64 %776, 1
  %778 = and i64 %777, 1
  %779 = icmp eq i64 %775, 0
  br i1 %779, label %823, label %780

780:                                              ; preds = %772
  %781 = sub nuw nsw i64 %777, %778
  br label %782

782:                                              ; preds = %782, %780
  %783 = phi i64 [ 0, %780 ], [ %820, %782 ]
  %784 = phi i64 [ %781, %780 ], [ %821, %782 ]
  %785 = sub i64 %719, %783
  %786 = trunc i64 %783 to i32
  %787 = xor i32 %786, -1
  %788 = add i32 %718, %787
  %789 = zext i32 %788 to i64
  %790 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %789
  %791 = getelementptr inbounds i32, i32* %790, i64 -3
  %792 = bitcast i32* %791 to <4 x i32>*
  %793 = load <4 x i32>, <4 x i32>* %792, align 4, !alias.scope !36
  %794 = getelementptr inbounds i32, i32* %790, i64 -7
  %795 = bitcast i32* %794 to <4 x i32>*
  %796 = load <4 x i32>, <4 x i32>* %795, align 4, !alias.scope !36
  %797 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %785
  %798 = getelementptr inbounds i32, i32* %797, i64 -3
  %799 = bitcast i32* %798 to <4 x i32>*
  store <4 x i32> %793, <4 x i32>* %799, align 4, !alias.scope !39, !noalias !36
  %800 = getelementptr inbounds i32, i32* %797, i64 -7
  %801 = bitcast i32* %800 to <4 x i32>*
  store <4 x i32> %796, <4 x i32>* %801, align 4, !alias.scope !39, !noalias !36
  %802 = or i64 %783, 8
  %803 = sub i64 %719, %802
  %804 = trunc i64 %802 to i32
  %805 = xor i32 %804, -1
  %806 = add i32 %718, %805
  %807 = zext i32 %806 to i64
  %808 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %807
  %809 = getelementptr inbounds i32, i32* %808, i64 -3
  %810 = bitcast i32* %809 to <4 x i32>*
  %811 = load <4 x i32>, <4 x i32>* %810, align 4, !alias.scope !36
  %812 = getelementptr inbounds i32, i32* %808, i64 -7
  %813 = bitcast i32* %812 to <4 x i32>*
  %814 = load <4 x i32>, <4 x i32>* %813, align 4, !alias.scope !36
  %815 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %803
  %816 = getelementptr inbounds i32, i32* %815, i64 -3
  %817 = bitcast i32* %816 to <4 x i32>*
  store <4 x i32> %811, <4 x i32>* %817, align 4, !alias.scope !39, !noalias !36
  %818 = getelementptr inbounds i32, i32* %815, i64 -7
  %819 = bitcast i32* %818 to <4 x i32>*
  store <4 x i32> %814, <4 x i32>* %819, align 4, !alias.scope !39, !noalias !36
  %820 = add i64 %783, 16
  %821 = add i64 %784, -2
  %822 = icmp eq i64 %821, 0
  br i1 %822, label %823, label %782, !llvm.loop !41

823:                                              ; preds = %782, %772
  %824 = phi i64 [ 0, %772 ], [ %820, %782 ]
  %825 = icmp eq i64 %778, 0
  br i1 %825, label %844, label %826

826:                                              ; preds = %823
  %827 = sub i64 %719, %824
  %828 = trunc i64 %824 to i32
  %829 = xor i32 %828, -1
  %830 = add i32 %718, %829
  %831 = zext i32 %830 to i64
  %832 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %831
  %833 = getelementptr inbounds i32, i32* %832, i64 -3
  %834 = bitcast i32* %833 to <4 x i32>*
  %835 = load <4 x i32>, <4 x i32>* %834, align 4, !alias.scope !36
  %836 = getelementptr inbounds i32, i32* %832, i64 -7
  %837 = bitcast i32* %836 to <4 x i32>*
  %838 = load <4 x i32>, <4 x i32>* %837, align 4, !alias.scope !36
  %839 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %827
  %840 = getelementptr inbounds i32, i32* %839, i64 -3
  %841 = bitcast i32* %840 to <4 x i32>*
  store <4 x i32> %835, <4 x i32>* %841, align 4, !alias.scope !39, !noalias !36
  %842 = getelementptr inbounds i32, i32* %839, i64 -7
  %843 = bitcast i32* %842 to <4 x i32>*
  store <4 x i32> %838, <4 x i32>* %843, align 4, !alias.scope !39, !noalias !36
  br label %844

844:                                              ; preds = %823, %826
  %845 = icmp eq i64 %726, %773
  br i1 %845, label %846, label %728

846:                                              ; preds = %745, %936, %844
  %847 = load i32, i32* %162, align 8
  %848 = load i32, i32* %171, align 4
  br label %849

849:                                              ; preds = %846, %717
  %850 = phi i32 [ %848, %846 ], [ %361, %717 ]
  %851 = phi i32 [ %847, %846 ], [ %362, %717 ]
  store i32 %721, i32* %175, align 8
  %852 = sext i32 %851 to i64
  %853 = getelementptr inbounds i8, i8* %288, i64 %852
  %854 = load i8, i8* %853, align 1
  %855 = zext i8 %854 to i32
  %856 = shl nuw nsw i32 %855, 16
  %857 = add nsw i32 %851, 1
  %858 = sext i32 %857 to i64
  %859 = getelementptr inbounds i8, i8* %288, i64 %858
  %860 = load i8, i8* %859, align 1
  %861 = zext i8 %860 to i32
  %862 = shl nuw nsw i32 %861, 8
  %863 = or i32 %862, %856
  %864 = add nsw i32 %851, 2
  %865 = sext i32 %864 to i64
  %866 = getelementptr inbounds i8, i8* %288, i64 %865
  %867 = load i8, i8* %866, align 1
  %868 = zext i8 %867 to i32
  %869 = or i32 %863, %868
  %870 = sub nsw i32 8, %850
  %871 = lshr i32 %869, %870
  %872 = and i32 %871, 65534
  %873 = load i32, i32* %182, align 4
  %874 = zext i32 %873 to i64
  %875 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 1, i64 %874
  %876 = load i32, i32* %875, align 4
  %877 = icmp ult i32 %872, %876
  br i1 %877, label %878, label %890

878:                                              ; preds = %849
  %879 = sub i32 16, %873
  %880 = lshr i32 %872, %879
  %881 = zext i32 %880 to i64
  %882 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 4, i64 %881
  %883 = load i8, i8* %882, align 1
  %884 = zext i8 %883 to i32
  %885 = add i32 %850, %884
  %886 = lshr i32 %885, 3
  %887 = add i32 %886, %851
  store i32 %887, i32* %162, align 8
  %888 = and i32 %885, 7
  store i32 %888, i32* %171, align 4
  %889 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 5, i64 %881
  br label %921

890:                                              ; preds = %849, %894
  %891 = phi i32 [ %892, %894 ], [ %873, %849 ]
  %892 = add i32 %891, 1
  %893 = icmp ult i32 %892, 15
  br i1 %893, label %894, label %899

894:                                              ; preds = %890
  %895 = zext i32 %892 to i64
  %896 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 1, i64 %895
  %897 = load i32, i32* %896, align 4
  %898 = icmp ult i32 %872, %897
  br i1 %898, label %899, label %890

899:                                              ; preds = %890, %894
  %900 = phi i32 [ %892, %894 ], [ 15, %890 ]
  %901 = add i32 %900, %850
  %902 = lshr i32 %901, 3
  %903 = add i32 %902, %851
  store i32 %903, i32* %162, align 8
  %904 = and i32 %901, 7
  store i32 %904, i32* %171, align 4
  %905 = add nsw i32 %900, -1
  %906 = zext i32 %905 to i64
  %907 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 1, i64 %906
  %908 = load i32, i32* %907, align 4
  %909 = sub i32 %872, %908
  %910 = sub nuw nsw i32 16, %900
  %911 = lshr i32 %909, %910
  %912 = zext i32 %900 to i64
  %913 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 2, i64 %912
  %914 = load i32, i32* %913, align 4
  %915 = add i32 %911, %914
  %916 = load i32, i32* %183, align 4
  %917 = icmp ult i32 %915, %916
  %918 = select i1 %917, i32 %915, i32 0
  %919 = zext i32 %918 to i64
  %920 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 6, i64 %919
  br label %921

921:                                              ; preds = %878, %899
  %922 = phi i32 [ %888, %878 ], [ %904, %899 ]
  %923 = phi i32 [ %887, %878 ], [ %903, %899 ]
  %924 = phi i16* [ %889, %878 ], [ %920, %899 ]
  %925 = load i16, i16* %924, align 2
  %926 = zext i16 %925 to i64
  %927 = getelementptr inbounds [28 x i8], [28 x i8]* @_ZZN6Unpack8Unpack29EbE7LDecode, i64 0, i64 %926
  %928 = load i8, i8* %927, align 1
  %929 = zext i8 %928 to i32
  %930 = add nuw nsw i32 %929, 2
  %931 = getelementptr inbounds [28 x i8], [28 x i8]* @_ZZN6Unpack8Unpack29EbE5LBits, i64 0, i64 %926
  %932 = load i8, i8* %931, align 1
  %933 = zext i8 %932 to i32
  %934 = add nsw i64 %926, -8
  %935 = icmp ult i64 %934, 20
  br i1 %935, label %964, label %993

936:                                              ; preds = %745, %936
  %937 = phi i64 [ %963, %936 ], [ %746, %745 ]
  %938 = add i64 %937, 4294967295
  %939 = and i64 %938, 4294967295
  %940 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %939
  %941 = load i32, i32* %940, align 4
  %942 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %937
  store i32 %941, i32* %942, align 4
  %943 = add nsw i64 %937, -1
  %944 = add i64 %937, 4294967294
  %945 = and i64 %944, 4294967295
  %946 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %945
  %947 = load i32, i32* %946, align 4
  %948 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %943
  store i32 %947, i32* %948, align 4
  %949 = add nsw i64 %937, -2
  %950 = add i64 %937, 4294967293
  %951 = and i64 %950, 4294967295
  %952 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %951
  %953 = load i32, i32* %952, align 4
  %954 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %949
  store i32 %953, i32* %954, align 4
  %955 = add nsw i64 %937, -3
  %956 = trunc i64 %955 to i32
  %957 = add i32 %956, -1
  %958 = zext i32 %957 to i64
  %959 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %958
  %960 = load i32, i32* %959, align 4
  %961 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %955
  store i32 %960, i32* %961, align 4
  %962 = icmp eq i32 %957, 0
  %963 = add nsw i64 %937, -4
  br i1 %962, label %846, label %936, !llvm.loop !42

964:                                              ; preds = %921
  %965 = sext i32 %923 to i64
  %966 = getelementptr inbounds i8, i8* %288, i64 %965
  %967 = load i8, i8* %966, align 1
  %968 = zext i8 %967 to i32
  %969 = shl nuw nsw i32 %968, 16
  %970 = add nsw i32 %923, 1
  %971 = sext i32 %970 to i64
  %972 = getelementptr inbounds i8, i8* %288, i64 %971
  %973 = load i8, i8* %972, align 1
  %974 = zext i8 %973 to i32
  %975 = shl nuw nsw i32 %974, 8
  %976 = or i32 %975, %969
  %977 = add nsw i32 %923, 2
  %978 = sext i32 %977 to i64
  %979 = getelementptr inbounds i8, i8* %288, i64 %978
  %980 = load i8, i8* %979, align 1
  %981 = zext i8 %980 to i32
  %982 = or i32 %976, %981
  %983 = sub nuw nsw i32 8, %922
  %984 = lshr i32 %982, %983
  %985 = and i32 %984, 65535
  %986 = sub nsw i32 16, %933
  %987 = lshr i32 %985, %986
  %988 = add nuw nsw i32 %987, %930
  %989 = add nuw nsw i32 %922, %933
  %990 = lshr i32 %989, 3
  %991 = add i32 %990, %923
  store i32 %991, i32* %162, align 8
  %992 = and i32 %989, 7
  store i32 %992, i32* %171, align 4
  br label %993

993:                                              ; preds = %964, %921
  %994 = phi i32 [ %988, %964 ], [ %930, %921 ]
  store i32 %994, i32* %174, align 4
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %994, i32 %721)
  br label %1065

995:                                              ; preds = %715
  %996 = add nsw i32 %365, -263
  %997 = zext i32 %996 to i64
  %998 = getelementptr inbounds [8 x i8], [8 x i8]* @_ZZN6Unpack8Unpack29EbE8SDDecode, i64 0, i64 %997
  %999 = load i8, i8* %998, align 1
  %1000 = zext i8 %999 to i32
  %1001 = add nuw nsw i32 %1000, 1
  %1002 = getelementptr inbounds [8 x i8], [8 x i8]* @_ZZN6Unpack8Unpack29EbE6SDBits, i64 0, i64 %997
  %1003 = load i8, i8* %1002, align 1
  %1004 = zext i8 %1003 to i32
  %1005 = sext i32 %362 to i64
  %1006 = getelementptr inbounds i8, i8* %288, i64 %1005
  %1007 = load i8, i8* %1006, align 1
  %1008 = zext i8 %1007 to i32
  %1009 = shl nuw nsw i32 %1008, 16
  %1010 = add nsw i32 %362, 1
  %1011 = sext i32 %1010 to i64
  %1012 = getelementptr inbounds i8, i8* %288, i64 %1011
  %1013 = load i8, i8* %1012, align 1
  %1014 = zext i8 %1013 to i32
  %1015 = shl nuw nsw i32 %1014, 8
  %1016 = or i32 %1015, %1009
  %1017 = add nsw i32 %362, 2
  %1018 = sext i32 %1017 to i64
  %1019 = getelementptr inbounds i8, i8* %288, i64 %1018
  %1020 = load i8, i8* %1019, align 1
  %1021 = zext i8 %1020 to i32
  %1022 = or i32 %1016, %1021
  %1023 = sub nuw nsw i32 8, %361
  %1024 = lshr i32 %1022, %1023
  %1025 = and i32 %1024, 65535
  %1026 = sub nsw i32 16, %1004
  %1027 = lshr i32 %1025, %1026
  %1028 = add nuw nsw i32 %1001, %1027
  %1029 = add nuw nsw i32 %361, %1004
  %1030 = lshr i32 %1029, 3
  %1031 = add i32 %1030, %362
  store i32 %1031, i32* %162, align 8
  %1032 = and i32 %1029, 7
  store i32 %1032, i32* %171, align 4
  %1033 = load i32, i32* %177, align 8
  store i32 %1033, i32* %178, align 4
  %1034 = load i32, i32* %179, align 4
  store i32 %1034, i32* %177, align 8
  %1035 = load i32, i32* %175, align 8
  store i32 %1035, i32* %179, align 4
  store i32 %1028, i32* %175, align 8
  store i32 2, i32* %174, align 4
  %1036 = load i64, i64* %161, align 8
  %1037 = zext i32 %1028 to i64
  %1038 = sub i64 %1036, %1037
  %1039 = load i64, i64* %180, align 8
  %1040 = add i64 %1039, -4100
  %1041 = icmp ult i64 %1038, %1040
  %1042 = icmp ult i64 %1036, %1040
  %1043 = and i1 %1041, %1042
  br i1 %1043, label %1066, label %1044

1044:                                             ; preds = %995
  %1045 = load i64, i64* %160, align 8
  %1046 = load i8*, i8** %181, align 8
  %1047 = add i64 %1038, 1
  %1048 = and i64 %1038, %1045
  %1049 = getelementptr inbounds i8, i8* %1046, i64 %1048
  %1050 = load i8, i8* %1049, align 1
  %1051 = getelementptr inbounds i8, i8* %1046, i64 %1036
  store i8 %1050, i8* %1051, align 1
  %1052 = load i64, i64* %161, align 8
  %1053 = add i64 %1052, 1
  %1054 = load i64, i64* %160, align 8
  %1055 = and i64 %1053, %1054
  store i64 %1055, i64* %161, align 8
  %1056 = load i8*, i8** %181, align 8
  %1057 = and i64 %1047, %1054
  %1058 = getelementptr inbounds i8, i8* %1056, i64 %1057
  %1059 = load i8, i8* %1058, align 1
  %1060 = getelementptr inbounds i8, i8* %1056, i64 %1055
  store i8 %1059, i8* %1060, align 1
  %1061 = load i64, i64* %161, align 8
  %1062 = add i64 %1061, 1
  %1063 = load i64, i64* %160, align 8
  %1064 = and i64 %1062, %1063
  store i64 %1064, i64* %161, align 8
  br label %1065

1065:                                             ; preds = %1044, %1066, %281, %1086, %279, %265, %263, %367, %664, %993, %713, %710, %702, %708
  br label %195

1066:                                             ; preds = %995
  %1067 = load i8*, i8** %181, align 8
  %1068 = getelementptr inbounds i8, i8* %1067, i64 %1038
  %1069 = getelementptr inbounds i8, i8* %1067, i64 %1036
  %1070 = add i64 %1036, 2
  store i64 %1070, i64* %161, align 8
  %1071 = load i8, i8* %1068, align 1
  store i8 %1071, i8* %1069, align 1
  %1072 = getelementptr inbounds i8, i8* %1068, i64 1
  %1073 = load i8, i8* %1072, align 1
  %1074 = getelementptr inbounds i8, i8* %1069, i64 1
  store i8 %1073, i8* %1074, align 1
  br label %1065

1075:                                             ; preds = %230, %708, %260, %263, %265, %702, %202, %270, %262, %278, %693, %256
  tail call void @_ZN6Unpack13UnpWriteBuf30Ev(%class.Unpack* %0)
  br label %1076

1076:                                             ; preds = %242, %148, %113, %157, %1075, %249
  ret void

1077:                                             ; preds = %271
  %1078 = shl nuw nsw i32 %272, 8
  %1079 = and i32 %273, 255
  %1080 = or i32 %1079, %1078
  %1081 = tail call i32 @_ZN8ModelPPM10DecodeCharEv(%class.ModelPPM* %190) #11
  %1082 = icmp eq i32 %1081, -1
  br i1 %1082, label %270, label %1083

1083:                                             ; preds = %1077
  %1084 = tail call i32 @_ZN8ModelPPM10DecodeCharEv(%class.ModelPPM* %190) #11
  %1085 = icmp eq i32 %1084, -1
  br i1 %1085, label %270, label %1086

1086:                                             ; preds = %1083
  %1087 = and i32 %1081, 255
  %1088 = shl nuw nsw i32 %1080, 8
  %1089 = or i32 %1087, %1088
  %1090 = and i32 %1084, 255
  %1091 = add nuw nsw i32 %1090, 32
  %1092 = add i32 %1089, 2
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %1091, i32 %1092)
  br label %1065
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6Unpack12UnpReadBuf30Ev(%class.Unpack* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = sub nsw i32 %3, %5
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %39, label %8

8:                                                ; preds = %1
  %9 = icmp sgt i32 %5, 16384
  br i1 %9, label %10, label %19

10:                                               ; preds = %8
  %11 = icmp sgt i32 %6, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %10
  %13 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %14 = load i8*, i8** %13, align 8
  %15 = sext i32 %5 to i64
  %16 = getelementptr inbounds i8, i8* %14, i64 %15
  %17 = sext i32 %6 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %16, i64 %17, i1 false)
  br label %18

18:                                               ; preds = %12, %10
  store i32 0, i32* %4, align 8
  store i32 %6, i32* %2, align 8
  br label %19

19:                                               ; preds = %8, %18
  %20 = phi i32 [ %6, %18 ], [ %3, %8 ]
  %21 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %22 = load %class.ComprDataIO*, %class.ComprDataIO** %21, align 8
  %23 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %24 = load i8*, i8** %23, align 8
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  %27 = sub nsw i32 32768, %20
  %28 = sext i32 %27 to i64
  %29 = tail call i32 @_ZN11ComprDataIO7UnpReadEPhm(%class.ComprDataIO* %22, i8* %26, i64 %28) #11
  %30 = icmp sgt i32 %29, 0
  %31 = load i32, i32* %2, align 8
  br i1 %30, label %32, label %34

32:                                               ; preds = %19
  %33 = add nsw i32 %31, %29
  store i32 %33, i32* %2, align 8
  br label %34

34:                                               ; preds = %19, %32
  %35 = phi i32 [ %33, %32 ], [ %31, %19 ]
  %36 = add nsw i32 %35, -30
  %37 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 16
  store i32 %36, i32* %37, align 4
  %38 = icmp ne i32 %29, -1
  br label %39

39:                                               ; preds = %1, %34
  %40 = phi i1 [ %38, %34 ], [ false, %1 ]
  ret i1 %40
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6Unpack12ReadTables30Ev(%class.Unpack*) local_unnamed_addr #0 align 2 {
  %2 = alloca [20 x i8], align 16
  %3 = alloca [404 x i8], align 16
  %4 = getelementptr inbounds [20 x i8], [20 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %4) #11
  %5 = getelementptr inbounds [404 x i8], [404 x i8]* %3, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 20, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 404, i8* nonnull %5) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 404, i1 false)
  %6 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1
  %7 = getelementptr inbounds %class.BitInput, %class.BitInput* %6, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  %10 = load i32, i32* %9, align 8
  %11 = add nsw i32 %10, -25
  %12 = icmp sgt i32 %8, %11
  br i1 %12, label %13, label %49

13:                                               ; preds = %1
  %14 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 0
  %15 = sub nsw i32 %10, %8
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %423, label %17

17:                                               ; preds = %13
  %18 = icmp sgt i32 %8, 16384
  br i1 %18, label %19, label %28

19:                                               ; preds = %17
  %20 = icmp sgt i32 %15, 0
  br i1 %20, label %21, label %27

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %23 = load i8*, i8** %22, align 8
  %24 = sext i32 %8 to i64
  %25 = getelementptr inbounds i8, i8* %23, i64 %24
  %26 = sext i32 %15 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %25, i64 %26, i1 false) #11
  br label %27

27:                                               ; preds = %21, %19
  store i32 0, i32* %14, align 8
  store i32 %15, i32* %9, align 8
  br label %28

28:                                               ; preds = %27, %17
  %29 = phi i32 [ %15, %27 ], [ %10, %17 ]
  %30 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %31 = load %class.ComprDataIO*, %class.ComprDataIO** %30, align 8
  %32 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %33 = load i8*, i8** %32, align 8
  %34 = sext i32 %29 to i64
  %35 = getelementptr inbounds i8, i8* %33, i64 %34
  %36 = sub nsw i32 32768, %29
  %37 = sext i32 %36 to i64
  %38 = tail call i32 @_ZN11ComprDataIO7UnpReadEPhm(%class.ComprDataIO* %31, i8* %35, i64 %37) #11
  %39 = icmp sgt i32 %38, 0
  %40 = load i32, i32* %9, align 8
  br i1 %39, label %41, label %45

41:                                               ; preds = %28
  %42 = add nsw i32 %40, %38
  store i32 %42, i32* %9, align 8
  %43 = add nsw i32 %42, -30
  %44 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 16
  store i32 %43, i32* %44, align 4
  br label %49

45:                                               ; preds = %28
  %46 = add nsw i32 %40, -30
  %47 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 16
  store i32 %46, i32* %47, align 4
  %48 = icmp eq i32 %38, -1
  br i1 %48, label %423, label %49

49:                                               ; preds = %45, %41, %1
  %50 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = sub i32 0, %51
  %53 = and i32 %52, 7
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %6, i32 %53) #11
  %54 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %6) #11
  %55 = trunc i32 %54 to i16
  %56 = icmp slt i16 %55, 0
  %57 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 62
  br i1 %56, label %58, label %62

58:                                               ; preds = %49
  store i32 1, i32* %57, align 8
  %59 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 59
  %60 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 60
  %61 = tail call zeroext i1 @_ZN8ModelPPM10DecodeInitEP6UnpackRi(%class.ModelPPM* %59, %class.Unpack* %0, i32* dereferenceable(4) %60)
  br label %423

62:                                               ; preds = %49
  store i32 0, i32* %57, align 8
  %63 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 57
  store i32 0, i32* %63, align 8
  %64 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 58
  store i32 0, i32* %64, align 4
  %65 = and i32 %54, 16384
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %62
  %68 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 61, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %68, i8 0, i64 404, i1 false)
  br label %69

69:                                               ; preds = %62, %67
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %6, i32 2) #11
  br label %80

70:                                               ; preds = %119
  %71 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4
  call void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* undef, i8* nonnull %4, %struct.DecodeTable* %71, i32 20)
  %72 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 0
  %73 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %74 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %75 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 16
  %76 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 3
  %77 = getelementptr inbounds %struct.DecodeTable, %struct.DecodeTable* %71, i64 0, i32 0
  %78 = getelementptr inbounds [404 x i8], [404 x i8]* %3, i64 0, i64 1
  %79 = getelementptr inbounds [404 x i8], [404 x i8]* %3, i64 0, i64 1
  br label %123

80:                                               ; preds = %69, %119
  %81 = phi i32 [ 0, %69 ], [ %121, %119 ]
  %82 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %6) #11
  %83 = and i32 %82, 1044480
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %6, i32 4) #11
  %84 = icmp eq i32 %83, 61440
  br i1 %84, label %85, label %114

85:                                               ; preds = %80
  %86 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %6) #11
  %87 = lshr i32 %86, 12
  %88 = and i32 %87, 255
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %6, i32 4) #11
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %93

90:                                               ; preds = %85
  %91 = zext i32 %81 to i64
  %92 = getelementptr inbounds [20 x i8], [20 x i8]* %2, i64 0, i64 %91
  store i8 15, i8* %92, align 1
  br label %119

93:                                               ; preds = %85
  %94 = add nuw nsw i32 %88, 2
  %95 = zext i32 %81 to i64
  %96 = getelementptr [20 x i8], [20 x i8]* %2, i64 0, i64 %95
  %97 = sub nuw nsw i64 19, %95
  %98 = add nuw nsw i32 %88, 1
  %99 = zext i32 %98 to i64
  %100 = icmp ult i64 %97, %99
  %101 = select i1 %100, i64 %97, i64 %99
  %102 = add nuw nsw i64 %101, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %96, i8 0, i64 %102, i1 false)
  br label %103

103:                                              ; preds = %93, %103
  %104 = phi i64 [ %95, %93 ], [ %107, %103 ]
  %105 = phi i32 [ %94, %93 ], [ %106, %103 ]
  %106 = add i32 %105, -1
  %107 = add nuw nsw i64 %104, 1
  %108 = icmp ne i32 %106, 0
  %109 = icmp ult i64 %107, 20
  %110 = and i1 %109, %108
  br i1 %110, label %103, label %111

111:                                              ; preds = %103
  %112 = trunc i64 %107 to i32
  %113 = add nsw i32 %112, -1
  br label %119

114:                                              ; preds = %80
  %115 = lshr i32 %82, 12
  %116 = trunc i32 %115 to i8
  %117 = zext i32 %81 to i64
  %118 = getelementptr inbounds [20 x i8], [20 x i8]* %2, i64 0, i64 %117
  store i8 %116, i8* %118, align 1
  br label %119

119:                                              ; preds = %90, %111, %114
  %120 = phi i32 [ %81, %114 ], [ %81, %90 ], [ %113, %111 ]
  %121 = add nsw i32 %120, 1
  %122 = icmp ult i32 %121, 20
  br i1 %122, label %80, label %70

123:                                              ; preds = %70, %406
  %124 = phi i32 [ 0, %70 ], [ %407, %406 ]
  %125 = load i32, i32* %7, align 8
  %126 = load i32, i32* %9, align 8
  %127 = add nsw i32 %126, -5
  %128 = icmp sgt i32 %125, %127
  br i1 %128, label %129, label %159

129:                                              ; preds = %123
  %130 = sub nsw i32 %126, %125
  %131 = icmp slt i32 %130, 0
  br i1 %131, label %423, label %132

132:                                              ; preds = %129
  %133 = icmp sgt i32 %125, 16384
  br i1 %133, label %134, label %142

134:                                              ; preds = %132
  %135 = icmp sgt i32 %130, 0
  br i1 %135, label %136, label %141

136:                                              ; preds = %134
  %137 = load i8*, i8** %73, align 8
  %138 = sext i32 %125 to i64
  %139 = getelementptr inbounds i8, i8* %137, i64 %138
  %140 = sext i32 %130 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %137, i8* align 1 %139, i64 %140, i1 false) #11
  br label %141

141:                                              ; preds = %136, %134
  store i32 0, i32* %72, align 8
  store i32 %130, i32* %9, align 8
  br label %142

142:                                              ; preds = %141, %132
  %143 = phi i32 [ %130, %141 ], [ %126, %132 ]
  %144 = load %class.ComprDataIO*, %class.ComprDataIO** %74, align 8
  %145 = load i8*, i8** %73, align 8
  %146 = sext i32 %143 to i64
  %147 = getelementptr inbounds i8, i8* %145, i64 %146
  %148 = sub nsw i32 32768, %143
  %149 = sext i32 %148 to i64
  %150 = tail call i32 @_ZN11ComprDataIO7UnpReadEPhm(%class.ComprDataIO* %144, i8* %147, i64 %149) #11
  %151 = icmp sgt i32 %150, 0
  %152 = load i32, i32* %9, align 8
  br i1 %151, label %153, label %156

153:                                              ; preds = %142
  %154 = add nsw i32 %152, %150
  store i32 %154, i32* %9, align 8
  %155 = add nsw i32 %154, -30
  store i32 %155, i32* %75, align 4
  br label %159

156:                                              ; preds = %142
  %157 = add nsw i32 %152, -30
  store i32 %157, i32* %75, align 4
  %158 = icmp eq i32 %150, -1
  br i1 %158, label %423, label %159

159:                                              ; preds = %156, %153, %123
  %160 = load i8*, i8** %73, align 8
  %161 = load i32, i32* %7, align 8
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i8, i8* %160, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = shl nuw nsw i32 %165, 16
  %167 = add nsw i32 %161, 1
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i8, i8* %160, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = shl nuw nsw i32 %171, 8
  %173 = or i32 %172, %166
  %174 = add nsw i32 %161, 2
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %160, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = or i32 %173, %178
  %180 = load i32, i32* %50, align 4
  %181 = sub nsw i32 8, %180
  %182 = lshr i32 %179, %181
  %183 = and i32 %182, 65534
  %184 = load i32, i32* %76, align 4
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 1, i64 %185
  %187 = load i32, i32* %186, align 4
  %188 = icmp ult i32 %183, %187
  br i1 %188, label %189, label %201

189:                                              ; preds = %159
  %190 = sub i32 16, %184
  %191 = lshr i32 %183, %190
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 4, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  %196 = add i32 %180, %195
  %197 = lshr i32 %196, 3
  %198 = add i32 %197, %161
  store i32 %198, i32* %7, align 8
  %199 = and i32 %196, 7
  store i32 %199, i32* %50, align 4
  %200 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 5, i64 %192
  br label %232

201:                                              ; preds = %159, %205
  %202 = phi i32 [ %203, %205 ], [ %184, %159 ]
  %203 = add i32 %202, 1
  %204 = icmp ult i32 %203, 15
  br i1 %204, label %205, label %210

205:                                              ; preds = %201
  %206 = zext i32 %203 to i64
  %207 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 1, i64 %206
  %208 = load i32, i32* %207, align 4
  %209 = icmp ult i32 %183, %208
  br i1 %209, label %210, label %201

210:                                              ; preds = %201, %205
  %211 = phi i32 [ %203, %205 ], [ 15, %201 ]
  %212 = add i32 %211, %180
  %213 = lshr i32 %212, 3
  %214 = add i32 %213, %161
  store i32 %214, i32* %7, align 8
  %215 = and i32 %212, 7
  store i32 %215, i32* %50, align 4
  %216 = add nsw i32 %211, -1
  %217 = zext i32 %216 to i64
  %218 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 1, i64 %217
  %219 = load i32, i32* %218, align 4
  %220 = sub i32 %183, %219
  %221 = sub nuw nsw i32 16, %211
  %222 = lshr i32 %220, %221
  %223 = zext i32 %211 to i64
  %224 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 2, i64 %223
  %225 = load i32, i32* %224, align 4
  %226 = add i32 %222, %225
  %227 = load i32, i32* %77, align 4
  %228 = icmp ult i32 %226, %227
  %229 = select i1 %228, i32 %226, i32 0
  %230 = zext i32 %229 to i64
  %231 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 4, i32 6, i64 %230
  br label %232

232:                                              ; preds = %189, %210
  %233 = phi i16* [ %200, %189 ], [ %231, %210 ]
  %234 = load i16, i16* %233, align 2
  %235 = icmp ult i16 %234, 16
  br i1 %235, label %236, label %245

236:                                              ; preds = %232
  %237 = zext i32 %124 to i64
  %238 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 61, i64 %237
  %239 = load i8, i8* %238, align 1
  %240 = trunc i16 %234 to i8
  %241 = add i8 %239, %240
  %242 = and i8 %241, 15
  %243 = getelementptr inbounds [404 x i8], [404 x i8]* %3, i64 0, i64 %237
  store i8 %242, i8* %243, align 1
  %244 = add i32 %124, 1
  br label %406

245:                                              ; preds = %232
  %246 = icmp ult i16 %234, 18
  br i1 %246, label %247, label %375

247:                                              ; preds = %245
  %248 = icmp eq i16 %234, 16
  %249 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %6) #11
  %250 = select i1 %248, i32 13, i32 9
  %251 = select i1 %248, i32 3, i32 11
  %252 = select i1 %248, i32 3, i32 7
  %253 = lshr i32 %249, %250
  %254 = add nuw nsw i32 %253, %251
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %6, i32 %252) #11
  %255 = icmp eq i32 %124, 0
  br i1 %255, label %423, label %256

256:                                              ; preds = %247
  %257 = icmp ult i32 %124, 404
  br i1 %257, label %258, label %409

258:                                              ; preds = %256
  %259 = zext i32 %124 to i64
  %260 = sub nsw i64 403, %259
  %261 = add nsw i32 %254, -1
  %262 = zext i32 %261 to i64
  %263 = icmp ult i64 %260, %262
  %264 = select i1 %263, i64 %260, i64 %262
  %265 = add nuw nsw i64 %264, 1
  %266 = icmp ult i64 %265, 32
  br i1 %266, label %359, label %267

267:                                              ; preds = %258
  %268 = sub nsw i64 403, %259
  %269 = add nsw i32 %254, -1
  %270 = zext i32 %269 to i64
  %271 = icmp ult i64 %268, %270
  %272 = select i1 %271, i64 %268, i64 %270
  %273 = trunc i64 %272 to i32
  %274 = sub i32 0, %124
  %275 = icmp ult i32 %274, %273
  %276 = icmp ugt i64 %272, 4294967295
  %277 = or i1 %275, %276
  br i1 %277, label %359, label %278

278:                                              ; preds = %267
  %279 = getelementptr [404 x i8], [404 x i8]* %3, i64 0, i64 %259
  %280 = sub nsw i64 403, %259
  %281 = add nsw i32 %254, -1
  %282 = zext i32 %281 to i64
  %283 = icmp ult i64 %280, %282
  %284 = select i1 %283, i64 %280, i64 %282
  %285 = add nuw nsw i64 %284, %259
  %286 = getelementptr i8, i8* %78, i64 %285
  %287 = add i32 %124, -1
  %288 = zext i32 %287 to i64
  %289 = getelementptr [404 x i8], [404 x i8]* %3, i64 0, i64 %288
  %290 = add nuw nsw i64 %284, %288
  %291 = getelementptr i8, i8* %79, i64 %290
  %292 = icmp ult i8* %279, %291
  %293 = icmp ult i8* %289, %286
  %294 = and i1 %292, %293
  br i1 %294, label %359, label %295

295:                                              ; preds = %278
  %296 = and i64 %265, 8589934560
  %297 = add nuw nsw i64 %296, %259
  %298 = trunc i64 %296 to i32
  %299 = sub i32 %254, %298
  %300 = add nsw i64 %296, -32
  %301 = lshr exact i64 %300, 5
  %302 = add nuw nsw i64 %301, 1
  %303 = and i64 %302, 1
  %304 = icmp eq i64 %300, 0
  br i1 %304, label %340, label %305

305:                                              ; preds = %295
  %306 = sub nuw nsw i64 %302, %303
  br label %307

307:                                              ; preds = %307, %305
  %308 = phi i64 [ 0, %305 ], [ %337, %307 ]
  %309 = phi i64 [ %306, %305 ], [ %338, %307 ]
  %310 = add i64 %308, %259
  %311 = add nuw nsw i64 %310, 4294967295
  %312 = and i64 %311, 4294967295
  %313 = getelementptr inbounds [404 x i8], [404 x i8]* %3, i64 0, i64 %312
  %314 = bitcast i8* %313 to <16 x i8>*
  %315 = load <16 x i8>, <16 x i8>* %314, align 1, !alias.scope !43
  %316 = getelementptr inbounds i8, i8* %313, i64 16
  %317 = bitcast i8* %316 to <16 x i8>*
  %318 = load <16 x i8>, <16 x i8>* %317, align 1, !alias.scope !43
  %319 = getelementptr inbounds [404 x i8], [404 x i8]* %3, i64 0, i64 %310
  %320 = bitcast i8* %319 to <16 x i8>*
  store <16 x i8> %315, <16 x i8>* %320, align 1, !alias.scope !46, !noalias !43
  %321 = getelementptr inbounds i8, i8* %319, i64 16
  %322 = bitcast i8* %321 to <16 x i8>*
  store <16 x i8> %318, <16 x i8>* %322, align 1, !alias.scope !46, !noalias !43
  %323 = or i64 %308, 32
  %324 = add i64 %323, %259
  %325 = add nuw nsw i64 %324, 4294967295
  %326 = and i64 %325, 4294967295
  %327 = getelementptr inbounds [404 x i8], [404 x i8]* %3, i64 0, i64 %326
  %328 = bitcast i8* %327 to <16 x i8>*
  %329 = load <16 x i8>, <16 x i8>* %328, align 1, !alias.scope !43
  %330 = getelementptr inbounds i8, i8* %327, i64 16
  %331 = bitcast i8* %330 to <16 x i8>*
  %332 = load <16 x i8>, <16 x i8>* %331, align 1, !alias.scope !43
  %333 = getelementptr inbounds [404 x i8], [404 x i8]* %3, i64 0, i64 %324
  %334 = bitcast i8* %333 to <16 x i8>*
  store <16 x i8> %329, <16 x i8>* %334, align 1, !alias.scope !46, !noalias !43
  %335 = getelementptr inbounds i8, i8* %333, i64 16
  %336 = bitcast i8* %335 to <16 x i8>*
  store <16 x i8> %332, <16 x i8>* %336, align 1, !alias.scope !46, !noalias !43
  %337 = add i64 %308, 64
  %338 = add i64 %309, -2
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %340, label %307, !llvm.loop !48

340:                                              ; preds = %307, %295
  %341 = phi i64 [ 0, %295 ], [ %337, %307 ]
  %342 = icmp eq i64 %303, 0
  br i1 %342, label %357, label %343

343:                                              ; preds = %340
  %344 = add i64 %341, %259
  %345 = add nuw nsw i64 %344, 4294967295
  %346 = and i64 %345, 4294967295
  %347 = getelementptr inbounds [404 x i8], [404 x i8]* %3, i64 0, i64 %346
  %348 = bitcast i8* %347 to <16 x i8>*
  %349 = load <16 x i8>, <16 x i8>* %348, align 1, !alias.scope !43
  %350 = getelementptr inbounds i8, i8* %347, i64 16
  %351 = bitcast i8* %350 to <16 x i8>*
  %352 = load <16 x i8>, <16 x i8>* %351, align 1, !alias.scope !43
  %353 = getelementptr inbounds [404 x i8], [404 x i8]* %3, i64 0, i64 %344
  %354 = bitcast i8* %353 to <16 x i8>*
  store <16 x i8> %349, <16 x i8>* %354, align 1, !alias.scope !46, !noalias !43
  %355 = getelementptr inbounds i8, i8* %353, i64 16
  %356 = bitcast i8* %355 to <16 x i8>*
  store <16 x i8> %352, <16 x i8>* %356, align 1, !alias.scope !46, !noalias !43
  br label %357

357:                                              ; preds = %340, %343
  %358 = icmp eq i64 %265, %296
  br i1 %358, label %401, label %359

359:                                              ; preds = %357, %278, %267, %258
  %360 = phi i64 [ %259, %278 ], [ %259, %267 ], [ %259, %258 ], [ %297, %357 ]
  %361 = phi i32 [ %254, %278 ], [ %254, %267 ], [ %254, %258 ], [ %299, %357 ]
  br label %362

362:                                              ; preds = %359, %362
  %363 = phi i64 [ %371, %362 ], [ %360, %359 ]
  %364 = phi i32 [ %365, %362 ], [ %361, %359 ]
  %365 = add nsw i32 %364, -1
  %366 = add nuw nsw i64 %363, 4294967295
  %367 = and i64 %366, 4294967295
  %368 = getelementptr inbounds [404 x i8], [404 x i8]* %3, i64 0, i64 %367
  %369 = load i8, i8* %368, align 1
  %370 = getelementptr inbounds [404 x i8], [404 x i8]* %3, i64 0, i64 %363
  store i8 %369, i8* %370, align 1
  %371 = add nuw nsw i64 %363, 1
  %372 = icmp ne i32 %365, 0
  %373 = icmp ult i64 %371, 404
  %374 = and i1 %373, %372
  br i1 %374, label %362, label %401, !llvm.loop !49

375:                                              ; preds = %245
  %376 = icmp eq i16 %234, 18
  %377 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %6) #11
  %378 = select i1 %376, i32 13, i32 9
  %379 = select i1 %376, i32 3, i32 11
  %380 = select i1 %376, i32 3, i32 7
  %381 = lshr i32 %377, %378
  %382 = add nuw nsw i32 %381, %379
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %6, i32 %380) #11
  %383 = icmp ult i32 %124, 404
  br i1 %383, label %384, label %409

384:                                              ; preds = %375
  %385 = zext i32 %124 to i64
  %386 = getelementptr [404 x i8], [404 x i8]* %3, i64 0, i64 %385
  %387 = sub nuw nsw i64 403, %385
  %388 = add nsw i32 %382, -1
  %389 = zext i32 %388 to i64
  %390 = icmp ult i64 %387, %389
  %391 = select i1 %390, i64 %387, i64 %389
  %392 = add nuw nsw i64 %391, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %386, i8 0, i64 %392, i1 false)
  br label %393

393:                                              ; preds = %384, %393
  %394 = phi i64 [ %385, %384 ], [ %397, %393 ]
  %395 = phi i32 [ %382, %384 ], [ %396, %393 ]
  %396 = add nsw i32 %395, -1
  %397 = add nuw nsw i64 %394, 1
  %398 = icmp ne i32 %396, 0
  %399 = icmp ult i64 %397, 404
  %400 = and i1 %399, %398
  br i1 %400, label %393, label %404

401:                                              ; preds = %362, %357
  %402 = phi i64 [ %297, %357 ], [ %371, %362 ]
  %403 = trunc i64 %402 to i32
  br label %406

404:                                              ; preds = %393
  %405 = trunc i64 %397 to i32
  br label %406

406:                                              ; preds = %404, %401, %236
  %407 = phi i32 [ %244, %236 ], [ %403, %401 ], [ %405, %404 ]
  %408 = icmp ult i32 %407, 404
  br i1 %408, label %123, label %409

409:                                              ; preds = %375, %256, %406
  %410 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 64
  store i8 1, i8* %410, align 1
  %411 = load i32, i32* %7, align 8
  %412 = load i32, i32* %9, align 8
  %413 = icmp sgt i32 %411, %412
  br i1 %413, label %423, label %414

414:                                              ; preds = %409
  %415 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0
  call void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* undef, i8* nonnull %5, %struct.DecodeTable* %415, i32 299)
  %416 = getelementptr inbounds [404 x i8], [404 x i8]* %3, i64 0, i64 299
  %417 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1
  call void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* undef, i8* %416, %struct.DecodeTable* %417, i32 60)
  %418 = getelementptr inbounds [404 x i8], [404 x i8]* %3, i64 0, i64 359
  %419 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2
  call void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* undef, i8* %418, %struct.DecodeTable* %419, i32 17)
  %420 = getelementptr inbounds [404 x i8], [404 x i8]* %3, i64 0, i64 376
  %421 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3
  call void @_ZN6Unpack16MakeDecodeTablesEPhP11DecodeTablej(%class.Unpack* undef, i8* %420, %struct.DecodeTable* %421, i32 28)
  %422 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 61, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %422, i8* nonnull align 16 %5, i64 404, i1 false)
  br label %423

423:                                              ; preds = %156, %247, %129, %45, %13, %58, %409, %414
  %424 = phi i1 [ false, %45 ], [ %61, %58 ], [ true, %414 ], [ false, %409 ], [ false, %13 ], [ false, %129 ], [ false, %247 ], [ false, %156 ]
  call void @llvm.lifetime.end.p0i8(i64 404, i8* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %4) #11
  ret i1 %424
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack13UnpWriteBuf30Ev(%class.Unpack*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 14
  %3 = load i64, i64* %2, align 8
  %4 = trunc i64 %3 to i32
  %5 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %6 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %7 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %198, label %10

10:                                               ; preds = %1
  %11 = load i64, i64* %5, align 8
  %12 = sub i64 %11, %3
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %12, %13
  %15 = trunc i64 %14 to i32
  %16 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69, i32 0
  %17 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 66
  %18 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %19 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 72
  %20 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 27
  %21 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %22 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 26
  br label %23

23:                                               ; preds = %10, %189
  %24 = phi i32 [ %4, %10 ], [ %192, %189 ]
  %25 = phi i32 [ %15, %10 ], [ %191, %189 ]
  %26 = phi i64 [ 0, %10 ], [ %193, %189 ]
  %27 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %16, align 8
  %28 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %27, i64 %26
  %29 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %28, align 8
  %30 = icmp eq %struct.UnpackFilter30* %29, null
  br i1 %30, label %189, label %31

31:                                               ; preds = %23
  %32 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %29, i64 0, i32 2
  %33 = load i8, i8* %32, align 8, !range !5
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  store i8 0, i8* %32, align 8
  br label %189

36:                                               ; preds = %31
  %37 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %29, i64 0, i32 0
  %38 = load i32, i32* %37, align 8
  %39 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %29, i64 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = sub i32 %38, %24
  %42 = zext i32 %41 to i64
  %43 = load i64, i64* %6, align 8
  %44 = and i64 %43, %42
  %45 = zext i32 %25 to i64
  %46 = icmp ult i64 %44, %45
  br i1 %46, label %47, label %189

47:                                               ; preds = %36
  %48 = icmp eq i32 %38, %24
  br i1 %48, label %57, label %49

49:                                               ; preds = %47
  %50 = zext i32 %24 to i64
  %51 = zext i32 %38 to i64
  tail call void @_ZN6Unpack12UnpWriteAreaEmm(%class.Unpack* %0, i64 %50, i64 %51)
  %52 = load i64, i64* %5, align 8
  %53 = sub i64 %52, %51
  %54 = load i64, i64* %6, align 8
  %55 = and i64 %53, %54
  %56 = trunc i64 %55 to i32
  br label %57

57:                                               ; preds = %47, %49
  %58 = phi i64 [ %54, %49 ], [ %43, %47 ]
  %59 = phi i32 [ %56, %49 ], [ %25, %47 ]
  %60 = phi i32 [ %38, %49 ], [ %24, %47 ]
  %61 = icmp ugt i32 %40, %59
  br i1 %61, label %62, label %65

62:                                               ; preds = %57
  %63 = load i64, i64* %7, align 8
  %64 = icmp ult i64 %26, %63
  br i1 %64, label %172, label %196

65:                                               ; preds = %57
  %66 = add i32 %40, %38
  %67 = trunc i64 %58 to i32
  %68 = and i32 %66, %67
  %69 = add i32 %68, -1
  %70 = icmp ult i32 %69, %38
  br i1 %70, label %76, label %71

71:                                               ; preds = %65
  %72 = load i8*, i8** %18, align 8
  %73 = zext i32 %38 to i64
  %74 = getelementptr inbounds i8, i8* %72, i64 %73
  %75 = zext i32 %40 to i64
  tail call void @_ZN5RarVM9SetMemoryEmPhm(%class.RarVM* %17, i64 0, i8* %74, i64 %75) #11
  br label %86

76:                                               ; preds = %65
  %77 = load i64, i64* %19, align 8
  %78 = zext i32 %38 to i64
  %79 = trunc i64 %77 to i32
  %80 = sub i32 %79, %38
  %81 = load i8*, i8** %18, align 8
  %82 = getelementptr inbounds i8, i8* %81, i64 %78
  %83 = zext i32 %80 to i64
  tail call void @_ZN5RarVM9SetMemoryEmPhm(%class.RarVM* %17, i64 0, i8* %82, i64 %83) #11
  %84 = load i8*, i8** %18, align 8
  %85 = zext i32 %68 to i64
  tail call void @_ZN5RarVM9SetMemoryEmPhm(%class.RarVM* %17, i64 %83, i8* %84, i64 %85) #11
  br label %86

86:                                               ; preds = %76, %71
  %87 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %29, i64 0, i32 4
  %88 = load i64, i64* %20, align 8
  %89 = trunc i64 %88 to i32
  %90 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %29, i64 0, i32 4, i32 1, i64 6
  store i32 %89, i32* %90, align 4
  tail call void @_ZN5RarVM7ExecuteEP18VM_PreparedProgram(%class.RarVM* %17, %struct.VM_PreparedProgram* %87) #11
  %91 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %29, i64 0, i32 4, i32 2
  %92 = load i8*, i8** %91, align 8
  %93 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %29, i64 0, i32 4, i32 3
  %94 = load i32, i32* %93, align 8
  %95 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %16, align 8
  %96 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %95, i64 %26
  %97 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %96, align 8
  %98 = icmp eq %struct.UnpackFilter30* %97, null
  br i1 %98, label %102, label %99

99:                                               ; preds = %86
  %100 = bitcast %struct.UnpackFilter30* %97 to i8*
  tail call void @_ZdlPv(i8* %100) #12
  %101 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %16, align 8
  br label %102

102:                                              ; preds = %99, %86
  %103 = phi %struct.UnpackFilter30** [ %101, %99 ], [ %95, %86 ]
  %104 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %103, i64 %26
  store %struct.UnpackFilter30* null, %struct.UnpackFilter30** %104, align 8
  %105 = add nuw i64 %26, 1
  %106 = load i64, i64* %7, align 8
  %107 = icmp ult i64 %105, %106
  br i1 %107, label %108, label %158

108:                                              ; preds = %102
  %109 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %16, align 8
  %110 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %109, i64 %105
  %111 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %110, align 8
  %112 = icmp eq %struct.UnpackFilter30* %111, null
  br i1 %112, label %158, label %118

113:                                              ; preds = %152
  %114 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %16, align 8
  %115 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %114, i64 %155
  %116 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %115, align 8
  %117 = icmp eq %struct.UnpackFilter30* %116, null
  br i1 %117, label %158, label %118

118:                                              ; preds = %108, %113
  %119 = phi %struct.UnpackFilter30* [ %116, %113 ], [ %111, %108 ]
  %120 = phi i64 [ %123, %113 ], [ %26, %108 ]
  %121 = phi i8* [ %142, %113 ], [ %92, %108 ]
  %122 = phi i32 [ %144, %113 ], [ %94, %108 ]
  %123 = phi i64 [ %155, %113 ], [ %105, %108 ]
  %124 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %119, i64 0, i32 0
  %125 = load i32, i32* %124, align 8
  %126 = icmp eq i32 %125, %38
  br i1 %126, label %127, label %158

127:                                              ; preds = %118
  %128 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %119, i64 0, i32 1
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, %122
  br i1 %130, label %131, label %158

131:                                              ; preds = %127
  %132 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %119, i64 0, i32 2
  %133 = load i8, i8* %132, align 8, !range !5
  %134 = icmp eq i8 %133, 0
  br i1 %134, label %135, label %158

135:                                              ; preds = %131
  %136 = zext i32 %122 to i64
  tail call void @_ZN5RarVM9SetMemoryEmPhm(%class.RarVM* %17, i64 0, i8* %121, i64 %136) #11
  %137 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %119, i64 0, i32 4
  %138 = load i64, i64* %20, align 8
  %139 = trunc i64 %138 to i32
  %140 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %119, i64 0, i32 4, i32 1, i64 6
  store i32 %139, i32* %140, align 4
  tail call void @_ZN5RarVM7ExecuteEP18VM_PreparedProgram(%class.RarVM* %17, %struct.VM_PreparedProgram* %137) #11
  %141 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %119, i64 0, i32 4, i32 2
  %142 = load i8*, i8** %141, align 8
  %143 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %119, i64 0, i32 4, i32 3
  %144 = load i32, i32* %143, align 8
  %145 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %16, align 8
  %146 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %145, i64 %123
  %147 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %146, align 8
  %148 = icmp eq %struct.UnpackFilter30* %147, null
  br i1 %148, label %152, label %149

149:                                              ; preds = %135
  %150 = bitcast %struct.UnpackFilter30* %147 to i8*
  tail call void @_ZdlPv(i8* %150) #12
  %151 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %16, align 8
  br label %152

152:                                              ; preds = %135, %149
  %153 = phi %struct.UnpackFilter30** [ %145, %135 ], [ %151, %149 ]
  %154 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %153, i64 %123
  store %struct.UnpackFilter30* null, %struct.UnpackFilter30** %154, align 8
  %155 = add nuw i64 %123, 1
  %156 = load i64, i64* %7, align 8
  %157 = icmp ult i64 %155, %156
  br i1 %157, label %113, label %158

158:                                              ; preds = %113, %118, %127, %131, %152, %108, %102
  %159 = phi i64 [ %26, %102 ], [ %26, %108 ], [ %123, %152 ], [ %120, %131 ], [ %120, %127 ], [ %120, %118 ], [ %123, %113 ]
  %160 = phi i8* [ %92, %102 ], [ %92, %108 ], [ %142, %152 ], [ %121, %131 ], [ %121, %127 ], [ %121, %118 ], [ %142, %113 ]
  %161 = phi i32 [ %94, %102 ], [ %94, %108 ], [ %144, %152 ], [ %122, %131 ], [ %122, %127 ], [ %122, %118 ], [ %144, %113 ]
  %162 = load %class.ComprDataIO*, %class.ComprDataIO** %21, align 8
  %163 = zext i32 %161 to i64
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %162, i8* %160, i64 %163) #11
  store i8 1, i8* %22, align 2
  %164 = load i64, i64* %20, align 8
  %165 = add nsw i64 %164, %163
  store i64 %165, i64* %20, align 8
  %166 = load i64, i64* %5, align 8
  %167 = zext i32 %68 to i64
  %168 = sub i64 %166, %167
  %169 = load i64, i64* %6, align 8
  %170 = and i64 %168, %169
  %171 = trunc i64 %170 to i32
  br label %189

172:                                              ; preds = %62, %185
  %173 = phi i64 [ %186, %185 ], [ %63, %62 ]
  %174 = phi i64 [ %187, %185 ], [ %26, %62 ]
  %175 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %16, align 8
  %176 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %175, i64 %174
  %177 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %176, align 8
  %178 = icmp eq %struct.UnpackFilter30* %177, null
  br i1 %178, label %185, label %179

179:                                              ; preds = %172
  %180 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %177, i64 0, i32 2
  %181 = load i8, i8* %180, align 8, !range !5
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %185, label %183

183:                                              ; preds = %179
  store i8 0, i8* %180, align 8
  %184 = load i64, i64* %7, align 8
  br label %185

185:                                              ; preds = %179, %172, %183
  %186 = phi i64 [ %173, %179 ], [ %173, %172 ], [ %184, %183 ]
  %187 = add nuw i64 %174, 1
  %188 = icmp ult i64 %187, %186
  br i1 %188, label %172, label %196

189:                                              ; preds = %35, %23, %158, %36
  %190 = phi i64 [ %26, %36 ], [ %159, %158 ], [ %26, %23 ], [ %26, %35 ]
  %191 = phi i32 [ %25, %36 ], [ %171, %158 ], [ %25, %23 ], [ %25, %35 ]
  %192 = phi i32 [ %24, %36 ], [ %68, %158 ], [ %24, %23 ], [ %24, %35 ]
  %193 = add nuw i64 %190, 1
  %194 = load i64, i64* %7, align 8
  %195 = icmp ult i64 %193, %194
  br i1 %195, label %23, label %198

196:                                              ; preds = %185, %62
  %197 = zext i32 %60 to i64
  br label %203

198:                                              ; preds = %189, %1
  %199 = phi i32 [ %4, %1 ], [ %192, %189 ]
  %200 = zext i32 %199 to i64
  %201 = load i64, i64* %5, align 8
  tail call void @_ZN6Unpack12UnpWriteAreaEmm(%class.Unpack* %0, i64 %200, i64 %201)
  %202 = load i64, i64* %5, align 8
  br label %203

203:                                              ; preds = %196, %198
  %204 = phi i64 [ %202, %198 ], [ %197, %196 ]
  store i64 %204, i64* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6Unpack13ReadVMCodePPMEv(%class.Unpack*) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.Array, align 8
  %3 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 59
  %4 = tail call i32 @_ZN8ModelPPM10DecodeCharEv(%class.ModelPPM* %3) #11
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  tail call void @_ZN8ModelPPM7CleanUpEv(%class.ModelPPM* %3) #11
  %7 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 62
  store i32 0, i32* %7, align 8
  br label %71

8:                                                ; preds = %1
  %9 = and i32 %4, 7
  %10 = add nuw nsw i32 %9, 1
  switch i32 %9, label %34 [
    i32 6, label %11
    i32 7, label %18
  ]

11:                                               ; preds = %8
  %12 = tail call i32 @_ZN8ModelPPM10DecodeCharEv(%class.ModelPPM* %3) #11
  %13 = icmp eq i32 %12, -1
  br i1 %13, label %16, label %14

14:                                               ; preds = %11
  %15 = add nsw i32 %12, 7
  br label %31

16:                                               ; preds = %11
  tail call void @_ZN8ModelPPM7CleanUpEv(%class.ModelPPM* %3) #11
  %17 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 62
  store i32 0, i32* %17, align 8
  br label %71

18:                                               ; preds = %8
  %19 = tail call i32 @_ZN8ModelPPM10DecodeCharEv(%class.ModelPPM* %3) #11
  %20 = icmp eq i32 %19, -1
  br i1 %20, label %21, label %23

21:                                               ; preds = %18
  tail call void @_ZN8ModelPPM7CleanUpEv(%class.ModelPPM* %3) #11
  %22 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 62
  store i32 0, i32* %22, align 8
  br label %71

23:                                               ; preds = %18
  %24 = tail call i32 @_ZN8ModelPPM10DecodeCharEv(%class.ModelPPM* %3) #11
  %25 = icmp eq i32 %24, -1
  br i1 %25, label %29, label %26

26:                                               ; preds = %23
  %27 = shl i32 %19, 8
  %28 = add nsw i32 %24, %27
  br label %31

29:                                               ; preds = %23
  tail call void @_ZN8ModelPPM7CleanUpEv(%class.ModelPPM* %3) #11
  %30 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 62
  store i32 0, i32* %30, align 8
  br label %71

31:                                               ; preds = %26, %14
  %32 = phi i32 [ %15, %14 ], [ %28, %26 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %71, label %34

34:                                               ; preds = %31, %8
  %35 = phi i32 [ %32, %31 ], [ %10, %8 ]
  %36 = bitcast %class.Array* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %36) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 -86, i64 40, i1 false)
  %37 = zext i32 %35 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 0, i64 33, i1 false) #11
  call void @_ZN5ArrayIhE3AddEm(%class.Array* nonnull %2, i64 %37) #11
  %38 = getelementptr inbounds %class.Array, %class.Array* %2, i64 0, i32 0
  br label %39

39:                                               ; preds = %43, %34
  %40 = phi i64 [ 0, %34 ], [ %47, %43 ]
  %41 = call i32 @_ZN8ModelPPM10DecodeCharEv(%class.ModelPPM* %3) #11
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %49, label %43

43:                                               ; preds = %39
  %44 = trunc i32 %41 to i8
  %45 = load i8*, i8** %38, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 %40
  store i8 %44, i8* %46, align 1
  %47 = add nuw nsw i64 %40, 1
  %48 = icmp eq i64 %47, %37
  br i1 %48, label %51, label %39

49:                                               ; preds = %39
  call void @_ZN8ModelPPM7CleanUpEv(%class.ModelPPM* %3) #11
  %50 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 62
  store i32 0, i32* %50, align 8
  br label %55

51:                                               ; preds = %43
  %52 = getelementptr inbounds %class.Array, %class.Array* %2, i64 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = call zeroext i1 @_ZN6Unpack9AddVMCodeEjPhj(%class.Unpack* %0, i32 %4, i8* %53, i32 %35)
  br label %55

55:                                               ; preds = %49, %51
  %56 = phi i1 [ %54, %51 ], [ false, %49 ]
  %57 = getelementptr inbounds %class.Array, %class.Array* %2, i64 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %70, label %60

60:                                               ; preds = %55
  %61 = getelementptr inbounds %class.Array, %class.Array* %2, i64 0, i32 4
  %62 = load i8, i8* %61, align 8, !range !5
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %68, label %64

64:                                               ; preds = %60
  %65 = getelementptr inbounds %class.Array, %class.Array* %2, i64 0, i32 2
  %66 = load i64, i64* %65, align 8
  call void @_Z9cleandataPvm(i8* nonnull %58, i64 %66) #11
  %67 = load i8*, i8** %57, align 8
  br label %68

68:                                               ; preds = %64, %60
  %69 = phi i8* [ %58, %60 ], [ %67, %64 ]
  call void @free(i8* %69) #11
  br label %70

70:                                               ; preds = %55, %68
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %36) #11
  br label %71

71:                                               ; preds = %29, %21, %16, %6, %70, %31
  %72 = phi i1 [ %56, %70 ], [ false, %16 ], [ false, %31 ], [ false, %6 ], [ false, %21 ], [ false, %29 ]
  ret i1 %72
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6Unpack14ReadEndOfBlockEv(%class.Unpack*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds i8, i8* %3, i64 %6
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = shl nuw nsw i32 %9, 16
  %11 = add nsw i32 %5, 1
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %3, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = shl nuw nsw i32 %15, 8
  %17 = or i32 %16, %10
  %18 = add nsw i32 %5, 2
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %3, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = or i32 %17, %22
  %24 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = sub nsw i32 8, %25
  %27 = lshr i32 %23, %26
  %28 = trunc i32 %27 to i16
  %29 = icmp slt i16 %28, 0
  br i1 %29, label %30, label %37

30:                                               ; preds = %1
  %31 = add i32 %25, 1
  %32 = lshr i32 %31, 3
  %33 = add i32 %32, %5
  store i32 %33, i32* %4, align 8
  %34 = and i32 %31, 7
  store i32 %34, i32* %24, align 4
  %35 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 64
  store i8 0, i8* %35, align 1
  %36 = tail call zeroext i1 @_ZN6Unpack12ReadTables30Ev(%class.Unpack* %0)
  br label %47

37:                                               ; preds = %1
  %38 = add i32 %25, 2
  %39 = lshr i32 %38, 3
  %40 = add i32 %39, %5
  store i32 %40, i32* %4, align 8
  %41 = and i32 %38, 7
  store i32 %41, i32* %24, align 4
  %42 = lshr i32 %27, 14
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 64
  store i8 %45, i8* %46, align 1
  br label %47

47:                                               ; preds = %30, %37
  %48 = phi i1 [ false, %37 ], [ %36, %30 ]
  ret i1 %48
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6Unpack10ReadVMCodeEv(%class.Unpack*) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.Array, align 8
  %3 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds i8, i8* %4, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = shl nuw nsw i32 %10, 16
  %12 = add nsw i32 %6, 1
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i8, i8* %4, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = shl nuw nsw i32 %16, 8
  %18 = or i32 %17, %11
  %19 = add nsw i32 %6, 2
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %4, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = or i32 %18, %23
  %25 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = sub nsw i32 8, %26
  %28 = lshr i32 %24, %27
  %29 = lshr i32 %28, 8
  %30 = and i32 %29, 255
  %31 = add i32 %26, 8
  %32 = lshr i32 %31, 3
  %33 = add i32 %32, %6
  store i32 %33, i32* %5, align 8
  %34 = and i32 %31, 7
  store i32 %34, i32* %25, align 4
  %35 = and i32 %29, 7
  %36 = add nuw nsw i32 %35, 1
  switch i32 %35, label %84 [
    i32 6, label %37
    i32 7, label %61
  ]

37:                                               ; preds = %1
  %38 = sext i32 %33 to i64
  %39 = getelementptr inbounds i8, i8* %4, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = shl nuw nsw i32 %41, 16
  %43 = add i32 %33, 1
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %4, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = shl nuw nsw i32 %47, 8
  %49 = or i32 %48, %42
  %50 = add nsw i32 %33, 2
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %4, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = or i32 %49, %54
  %56 = sub nuw nsw i32 8, %34
  %57 = lshr i32 %55, %56
  %58 = lshr i32 %57, 8
  %59 = and i32 %58, 255
  %60 = add nuw nsw i32 %59, 7
  store i32 %43, i32* %5, align 8
  store i32 %34, i32* %25, align 4
  br label %84

61:                                               ; preds = %1
  %62 = sext i32 %33 to i64
  %63 = getelementptr inbounds i8, i8* %4, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = shl nuw nsw i32 %65, 16
  %67 = add nsw i32 %33, 1
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %4, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = shl nuw nsw i32 %71, 8
  %73 = or i32 %72, %66
  %74 = add i32 %33, 2
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %4, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = or i32 %73, %78
  %80 = sub nuw nsw i32 8, %34
  %81 = lshr i32 %79, %80
  %82 = and i32 %81, 65535
  store i32 %74, i32* %5, align 8
  store i32 %34, i32* %25, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %194, label %84

84:                                               ; preds = %61, %37, %1
  %85 = phi i32 [ %82, %61 ], [ %36, %1 ], [ %60, %37 ]
  %86 = bitcast %class.Array* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %86) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %86, i8 -86, i64 40, i1 false)
  %87 = zext i32 %85 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %86, i8 0, i64 33, i1 false) #11
  call void @_ZN5ArrayIhE3AddEm(%class.Array* nonnull %2, i64 %87) #11
  %88 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  %89 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %90 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 16
  %91 = add nsw i32 %85, -1
  %92 = getelementptr inbounds %class.Array, %class.Array* %2, i64 0, i32 0
  %93 = zext i32 %91 to i64
  %94 = load i32, i32* %5, align 8
  br label %95

95:                                               ; preds = %138, %84
  %96 = phi i32 [ %94, %84 ], [ %170, %138 ]
  %97 = phi i64 [ 0, %84 ], [ %172, %138 ]
  %98 = load i32, i32* %88, align 8
  %99 = add nsw i32 %98, -1
  %100 = icmp slt i32 %96, %99
  br i1 %100, label %138, label %101

101:                                              ; preds = %95
  %102 = sub nsw i32 %98, %96
  %103 = icmp slt i32 %102, 0
  br i1 %103, label %131, label %104

104:                                              ; preds = %101
  %105 = icmp sgt i32 %96, 16384
  br i1 %105, label %106, label %114

106:                                              ; preds = %104
  %107 = icmp sgt i32 %102, 0
  br i1 %107, label %108, label %113

108:                                              ; preds = %106
  %109 = load i8*, i8** %3, align 8
  %110 = sext i32 %96 to i64
  %111 = getelementptr inbounds i8, i8* %109, i64 %110
  %112 = sext i32 %102 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %109, i8* align 1 %111, i64 %112, i1 false) #11
  br label %113

113:                                              ; preds = %108, %106
  store i32 0, i32* %5, align 8
  store i32 %102, i32* %88, align 8
  br label %114

114:                                              ; preds = %113, %104
  %115 = phi i32 [ %102, %113 ], [ %98, %104 ]
  %116 = load %class.ComprDataIO*, %class.ComprDataIO** %89, align 8
  %117 = load i8*, i8** %3, align 8
  %118 = sext i32 %115 to i64
  %119 = getelementptr inbounds i8, i8* %117, i64 %118
  %120 = sub nsw i32 32768, %115
  %121 = sext i32 %120 to i64
  %122 = call i32 @_ZN11ComprDataIO7UnpReadEPhm(%class.ComprDataIO* %116, i8* %119, i64 %121) #11
  %123 = icmp sgt i32 %122, 0
  %124 = load i32, i32* %88, align 8
  br i1 %123, label %125, label %127

125:                                              ; preds = %114
  %126 = add nsw i32 %124, %122
  store i32 %126, i32* %88, align 8
  br label %127

127:                                              ; preds = %125, %114
  %128 = phi i32 [ %126, %125 ], [ %124, %114 ]
  %129 = add nsw i32 %128, -30
  store i32 %129, i32* %90, align 4
  %130 = icmp ne i32 %122, -1
  br label %131

131:                                              ; preds = %101, %127
  %132 = phi i1 [ %130, %127 ], [ false, %101 ]
  %133 = xor i1 %132, true
  %134 = icmp ult i64 %97, %93
  %135 = and i1 %134, %133
  br i1 %135, label %178, label %136

136:                                              ; preds = %131
  %137 = load i32, i32* %5, align 8
  br label %138

138:                                              ; preds = %136, %95
  %139 = phi i32 [ %137, %136 ], [ %96, %95 ]
  %140 = load i8*, i8** %3, align 8
  %141 = sext i32 %139 to i64
  %142 = getelementptr inbounds i8, i8* %140, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = shl nuw nsw i32 %144, 16
  %146 = add nsw i32 %139, 1
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds i8, i8* %140, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = shl nuw nsw i32 %150, 8
  %152 = or i32 %151, %145
  %153 = add nsw i32 %139, 2
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i8, i8* %140, i64 %154
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = or i32 %152, %157
  %159 = load i32, i32* %25, align 4
  %160 = sub nsw i32 8, %159
  %161 = lshr i32 %158, %160
  %162 = lshr i32 %161, 8
  %163 = trunc i32 %162 to i8
  %164 = load i8*, i8** %92, align 8
  %165 = getelementptr inbounds i8, i8* %164, i64 %97
  store i8 %163, i8* %165, align 1
  %166 = load i32, i32* %25, align 4
  %167 = add i32 %166, 8
  %168 = lshr i32 %167, 3
  %169 = load i32, i32* %5, align 8
  %170 = add i32 %168, %169
  store i32 %170, i32* %5, align 8
  %171 = and i32 %167, 7
  store i32 %171, i32* %25, align 4
  %172 = add nuw nsw i64 %97, 1
  %173 = icmp eq i64 %172, %87
  br i1 %173, label %174, label %95

174:                                              ; preds = %138
  %175 = getelementptr inbounds %class.Array, %class.Array* %2, i64 0, i32 0
  %176 = load i8*, i8** %175, align 8
  %177 = call zeroext i1 @_ZN6Unpack9AddVMCodeEjPhj(%class.Unpack* %0, i32 %30, i8* %176, i32 %85)
  br label %178

178:                                              ; preds = %131, %174
  %179 = phi i1 [ %177, %174 ], [ false, %131 ]
  %180 = getelementptr inbounds %class.Array, %class.Array* %2, i64 0, i32 0
  %181 = load i8*, i8** %180, align 8
  %182 = icmp eq i8* %181, null
  br i1 %182, label %193, label %183

183:                                              ; preds = %178
  %184 = getelementptr inbounds %class.Array, %class.Array* %2, i64 0, i32 4
  %185 = load i8, i8* %184, align 8, !range !5
  %186 = icmp eq i8 %185, 0
  br i1 %186, label %191, label %187

187:                                              ; preds = %183
  %188 = getelementptr inbounds %class.Array, %class.Array* %2, i64 0, i32 2
  %189 = load i64, i64* %188, align 8
  call void @_Z9cleandataPvm(i8* nonnull %181, i64 %189) #11
  %190 = load i8*, i8** %180, align 8
  br label %191

191:                                              ; preds = %187, %183
  %192 = phi i8* [ %181, %183 ], [ %190, %187 ]
  call void @free(i8* %192) #11
  br label %193

193:                                              ; preds = %178, %191
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %86) #11
  br label %194

194:                                              ; preds = %61, %193
  %195 = phi i1 [ %179, %193 ], [ false, %61 ]
  ret i1 %195
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6Unpack9AddVMCodeEjPhj(%class.Unpack*, i32, i8* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %class.Array, align 8
  %6 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 67
  %7 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 67, i32 1
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %class.BitInput, %class.BitInput* %6, i64 0, i32 0
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 67, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = icmp ult i32 %3, 32768
  %12 = select i1 %11, i32 %3, i32 32768
  %13 = zext i32 %12 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 %13, i1 false)
  %14 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 66
  tail call void @_ZN5RarVM4InitEv(%class.RarVM* %14) #11
  %15 = trunc i32 %1 to i8
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %17, label %65

17:                                               ; preds = %4
  %18 = tail call i32 @_ZN5RarVM8ReadDataER8BitInput(%class.BitInput* dereferenceable(24) %6) #11
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %63

20:                                               ; preds = %17
  %21 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 70, i32 1
  store i64 0, i64* %21, align 8
  %22 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 71
  store i32 0, i32* %22, align 8
  %23 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %20
  %27 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68, i32 0
  br label %32

28:                                               ; preds = %42, %20
  store i64 0, i64* %23, align 8
  %29 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %62, label %46

32:                                               ; preds = %42, %26
  %33 = phi i64 [ %24, %26 ], [ %43, %42 ]
  %34 = phi i64 [ 0, %26 ], [ %44, %42 ]
  %35 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %27, align 8
  %36 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %35, i64 %34
  %37 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %36, align 8
  %38 = icmp eq %struct.UnpackFilter30* %37, null
  br i1 %38, label %42, label %39

39:                                               ; preds = %32
  %40 = bitcast %struct.UnpackFilter30* %37 to i8*
  tail call void @_ZdlPv(i8* %40) #12
  %41 = load i64, i64* %23, align 8
  br label %42

42:                                               ; preds = %39, %32
  %43 = phi i64 [ %33, %32 ], [ %41, %39 ]
  %44 = add nuw i64 %34, 1
  %45 = icmp ult i64 %44, %43
  br i1 %45, label %32, label %28

46:                                               ; preds = %28
  %47 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69, i32 0
  br label %48

48:                                               ; preds = %58, %46
  %49 = phi i64 [ %30, %46 ], [ %59, %58 ]
  %50 = phi i64 [ 0, %46 ], [ %60, %58 ]
  %51 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %47, align 8
  %52 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %51, i64 %50
  %53 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %52, align 8
  %54 = icmp eq %struct.UnpackFilter30* %53, null
  br i1 %54, label %58, label %55

55:                                               ; preds = %48
  %56 = bitcast %struct.UnpackFilter30* %53 to i8*
  tail call void @_ZdlPv(i8* %56) #12
  %57 = load i64, i64* %29, align 8
  br label %58

58:                                               ; preds = %55, %48
  %59 = phi i64 [ %49, %48 ], [ %57, %55 ]
  %60 = add nuw i64 %50, 1
  %61 = icmp ult i64 %60, %59
  br i1 %61, label %48, label %62

62:                                               ; preds = %58, %28
  store i64 0, i64* %29, align 8
  br label %68

63:                                               ; preds = %17
  %64 = add i32 %18, -1
  br label %68

65:                                               ; preds = %4
  %66 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 71
  %67 = load i32, i32* %66, align 8
  br label %68

68:                                               ; preds = %62, %63, %65
  %69 = phi i32 [ 0, %62 ], [ %64, %63 ], [ %67, %65 ]
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68
  %72 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = icmp ult i64 %73, %70
  br i1 %74, label %288, label %75

75:                                               ; preds = %68
  %76 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 70
  %77 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 70, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = icmp ult i64 %78, %70
  br i1 %79, label %288, label %80

80:                                               ; preds = %75
  %81 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 71
  store i32 %69, i32* %81, align 8
  %82 = icmp eq i64 %73, %70
  %83 = tail call i8* @_Znwm(i64 64) #12
  %84 = getelementptr inbounds i8, i8* %83, i64 56
  %85 = bitcast i8* %84 to i32*
  store i32 0, i32* %85, align 8
  %86 = getelementptr inbounds i8, i8* %83, i64 16
  %87 = bitcast i8* %86 to i32*
  store i32 0, i32* %87, align 8
  br i1 %82, label %88, label %114

88:                                               ; preds = %80
  %89 = icmp ugt i32 %69, 8192
  br i1 %89, label %90, label %91

90:                                               ; preds = %88
  tail call void @_ZdlPv(i8* nonnull %83) #12
  br label %288

91:                                               ; preds = %88
  tail call void @_ZN5ArrayIP14UnpackFilter30E3AddEm(%class.Array.8* %71, i64 1)
  %92 = tail call i8* @_Znwm(i64 64) #12
  %93 = bitcast i8* %92 to %struct.UnpackFilter30*
  %94 = getelementptr inbounds i8, i8* %92, i64 56
  %95 = bitcast i8* %94 to i32*
  store i32 0, i32* %95, align 8
  %96 = getelementptr inbounds i8, i8* %92, i64 16
  %97 = bitcast i8* %96 to i32*
  store i32 0, i32* %97, align 8
  %98 = load i64, i64* %72, align 8
  %99 = add i64 %98, -1
  %100 = getelementptr inbounds %class.Array.8, %class.Array.8* %71, i64 0, i32 0
  %101 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %100, align 8
  %102 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %101, i64 %99
  %103 = bitcast %struct.UnpackFilter30** %102 to i8**
  store i8* %92, i8** %103, align 8
  %104 = load i64, i64* %72, align 8
  %105 = trunc i64 %104 to i32
  %106 = add i32 %105, -1
  %107 = getelementptr inbounds i8, i8* %83, i64 12
  %108 = bitcast i8* %107 to i32*
  store i32 %106, i32* %108, align 4
  tail call void @_ZN5ArrayIiE3AddEm(%class.Array.10* %76, i64 1) #11
  %109 = load i64, i64* %77, align 8
  %110 = add i64 %109, -1
  %111 = getelementptr inbounds %class.Array.10, %class.Array.10* %76, i64 0, i32 0
  %112 = load i32*, i32** %111, align 8
  %113 = getelementptr inbounds i32, i32* %112, i64 %110
  store i32 0, i32* %113, align 4
  br label %121

114:                                              ; preds = %80
  %115 = getelementptr inbounds %class.Array.8, %class.Array.8* %71, i64 0, i32 0
  %116 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %115, align 8
  %117 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %116, i64 %70
  %118 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %117, align 8
  %119 = getelementptr inbounds i8, i8* %83, i64 12
  %120 = bitcast i8* %119 to i32*
  store i32 %69, i32* %120, align 4
  br label %121

121:                                              ; preds = %114, %91
  %122 = phi %struct.UnpackFilter30* [ %93, %91 ], [ %118, %114 ]
  %123 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69
  %124 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69, i32 1
  %125 = load i64, i64* %124, align 8
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %159, label %127

127:                                              ; preds = %121
  %128 = getelementptr inbounds %class.Array.8, %class.Array.8* %123, i64 0, i32 0
  br label %131

129:                                              ; preds = %151
  %130 = icmp eq i32 %148, 0
  br i1 %130, label %156, label %161

131:                                              ; preds = %127, %151
  %132 = phi i64 [ 0, %127 ], [ %153, %151 ]
  %133 = phi i32 [ 0, %127 ], [ %152, %151 ]
  %134 = phi i32 [ 0, %127 ], [ %148, %151 ]
  %135 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %128, align 8
  %136 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %135, i64 %132
  %137 = bitcast %struct.UnpackFilter30** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = sub i32 %133, %134
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %135, i64 %140
  %142 = bitcast %struct.UnpackFilter30** %141 to i64*
  store i64 %138, i64* %142, align 8
  %143 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %128, align 8
  %144 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %143, i64 %132
  %145 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %144, align 8
  %146 = icmp eq %struct.UnpackFilter30* %145, null
  %147 = zext i1 %146 to i32
  %148 = add i32 %134, %147
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %151, label %150

150:                                              ; preds = %131
  store %struct.UnpackFilter30* null, %struct.UnpackFilter30** %144, align 8
  br label %151

151:                                              ; preds = %131, %150
  %152 = add i32 %133, 1
  %153 = zext i32 %152 to i64
  %154 = load i64, i64* %124, align 8
  %155 = icmp ugt i64 %154, %153
  br i1 %155, label %131, label %129

156:                                              ; preds = %129
  %157 = icmp ugt i64 %154, 8192
  br i1 %157, label %158, label %159

158:                                              ; preds = %156
  tail call void @_ZdlPv(i8* nonnull %83) #12
  br label %288

159:                                              ; preds = %121, %156
  tail call void @_ZN5ArrayIP14UnpackFilter30E3AddEm(%class.Array.8* %123, i64 1)
  %160 = load i64, i64* %124, align 8
  br label %161

161:                                              ; preds = %159, %129
  %162 = phi i64 [ %160, %159 ], [ %154, %129 ]
  %163 = phi i32 [ 1, %159 ], [ %148, %129 ]
  %164 = zext i32 %163 to i64
  %165 = sub i64 %162, %164
  %166 = getelementptr inbounds %class.Array.8, %class.Array.8* %123, i64 0, i32 0
  %167 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %166, align 8
  %168 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %167, i64 %165
  %169 = bitcast %struct.UnpackFilter30** %168 to i8**
  store i8* %83, i8** %169, align 8
  %170 = tail call i32 @_ZN5RarVM8ReadDataER8BitInput(%class.BitInput* dereferenceable(24) %6) #11
  %171 = and i32 %1, 64
  %172 = icmp eq i32 %171, 0
  %173 = add i32 %170, 258
  %174 = select i1 %172, i32 %170, i32 %173
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %177 = load i64, i64* %176, align 8
  %178 = add i64 %177, %175
  %179 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %180 = load i64, i64* %179, align 8
  %181 = and i64 %178, %180
  %182 = trunc i64 %181 to i32
  %183 = bitcast i8* %83 to i32*
  store i32 %182, i32* %183, align 8
  %184 = and i32 %1, 32
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %194, label %186

186:                                              ; preds = %161
  %187 = tail call i32 @_ZN5RarVM8ReadDataER8BitInput(%class.BitInput* dereferenceable(24) %6) #11
  %188 = getelementptr inbounds i8, i8* %83, i64 4
  %189 = bitcast i8* %188 to i32*
  store i32 %187, i32* %189, align 4
  %190 = getelementptr inbounds %class.Array.10, %class.Array.10* %76, i64 0, i32 0
  %191 = load i32*, i32** %190, align 8
  %192 = getelementptr inbounds i32, i32* %191, i64 %70
  store i32 %187, i32* %192, align 4
  %193 = load i64, i64* %176, align 8
  br label %206

194:                                              ; preds = %161
  %195 = load i64, i64* %77, align 8
  %196 = icmp ugt i64 %195, %70
  br i1 %196, label %197, label %202

197:                                              ; preds = %194
  %198 = getelementptr inbounds %class.Array.10, %class.Array.10* %76, i64 0, i32 0
  %199 = load i32*, i32** %198, align 8
  %200 = getelementptr inbounds i32, i32* %199, i64 %70
  %201 = load i32, i32* %200, align 4
  br label %202

202:                                              ; preds = %194, %197
  %203 = phi i32 [ %201, %197 ], [ 0, %194 ]
  %204 = getelementptr inbounds i8, i8* %83, i64 4
  %205 = bitcast i8* %204 to i32*
  store i32 %203, i32* %205, align 4
  br label %206

206:                                              ; preds = %202, %186
  %207 = phi i64 [ %177, %202 ], [ %193, %186 ]
  %208 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 14
  %209 = load i64, i64* %208, align 8
  %210 = icmp eq i64 %209, %207
  br i1 %210, label %217, label %211

211:                                              ; preds = %206
  %212 = sub i64 %209, %207
  %213 = load i64, i64* %179, align 8
  %214 = and i64 %213, %212
  %215 = icmp ule i64 %214, %175
  %216 = zext i1 %215 to i8
  br label %217

217:                                              ; preds = %206, %211
  %218 = phi i8 [ 0, %206 ], [ %216, %211 ]
  %219 = getelementptr inbounds i8, i8* %83, i64 8
  store i8 %218, i8* %219, align 8
  %220 = getelementptr inbounds i8, i8* %83, i64 20
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %220, i8 0, i64 28, i1 false)
  %221 = getelementptr inbounds i8, i8* %83, i64 4
  %222 = bitcast i8* %221 to i32*
  %223 = load i32, i32* %222, align 4
  %224 = getelementptr inbounds i8, i8* %83, i64 36
  %225 = bitcast i8* %224 to i32*
  store i32 %223, i32* %225, align 4
  %226 = and i32 %1, 16
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %238, label %228

228:                                              ; preds = %217
  %229 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %6) #11
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %6, i32 7) #11
  %230 = and i32 %229, 512
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %235, label %232

232:                                              ; preds = %228
  %233 = tail call i32 @_ZN5RarVM8ReadDataER8BitInput(%class.BitInput* dereferenceable(24) %6) #11
  %234 = bitcast i8* %220 to i32*
  store i32 %233, i32* %234, align 4
  br label %235

235:                                              ; preds = %228, %232
  %236 = and i32 %229, 1024
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %294, label %290

238:                                              ; preds = %322, %325, %217
  br i1 %82, label %239, label %285

239:                                              ; preds = %238
  %240 = tail call i32 @_ZN5RarVM8ReadDataER8BitInput(%class.BitInput* dereferenceable(24) %6) #11
  %241 = add i32 %240, -1
  %242 = icmp ugt i32 %241, 65534
  br i1 %242, label %288, label %243

243:                                              ; preds = %239
  %244 = load i32, i32* %8, align 8
  %245 = add i32 %244, %240
  %246 = icmp ugt i32 %245, %3
  br i1 %246, label %288, label %247

247:                                              ; preds = %243
  %248 = bitcast %class.Array* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %248) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %248, i8 -86, i64 40, i1 false)
  %249 = zext i32 %240 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %248, i8 0, i64 33, i1 false) #11
  call void @_ZN5ArrayIhE3AddEm(%class.Array* nonnull %5, i64 %249) #11
  %250 = getelementptr inbounds %class.Array, %class.Array* %5, i64 0, i32 0
  br label %251

251:                                              ; preds = %256, %247
  %252 = phi i64 [ 0, %247 ], [ %262, %256 ]
  %253 = load i32, i32* %8, align 8
  %254 = add i32 %253, 3
  %255 = icmp ugt i32 %254, 32767
  br i1 %255, label %268, label %256

256:                                              ; preds = %251
  %257 = call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %6) #11
  %258 = lshr i32 %257, 8
  %259 = trunc i32 %258 to i8
  %260 = load i8*, i8** %250, align 8
  %261 = getelementptr inbounds i8, i8* %260, i64 %252
  store i8 %259, i8* %261, align 1
  call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %6, i32 8) #11
  %262 = add nuw nsw i64 %252, 1
  %263 = icmp eq i64 %262, %249
  br i1 %263, label %264, label %251

264:                                              ; preds = %256
  %265 = getelementptr inbounds %class.Array, %class.Array* %5, i64 0, i32 0
  %266 = load i8*, i8** %265, align 8
  %267 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %122, i64 0, i32 4
  call void @_ZN5RarVM7PrepareEPhjP18VM_PreparedProgram(%class.RarVM* %14, i8* %266, i32 %240, %struct.VM_PreparedProgram* %267) #11
  br label %268

268:                                              ; preds = %251, %264
  %269 = phi i32 [ 0, %264 ], [ 1, %251 ]
  %270 = getelementptr inbounds %class.Array, %class.Array* %5, i64 0, i32 0
  %271 = load i8*, i8** %270, align 8
  %272 = icmp eq i8* %271, null
  br i1 %272, label %283, label %273

273:                                              ; preds = %268
  %274 = getelementptr inbounds %class.Array, %class.Array* %5, i64 0, i32 4
  %275 = load i8, i8* %274, align 8, !range !5
  %276 = icmp eq i8 %275, 0
  br i1 %276, label %281, label %277

277:                                              ; preds = %273
  %278 = getelementptr inbounds %class.Array, %class.Array* %5, i64 0, i32 2
  %279 = load i64, i64* %278, align 8
  call void @_Z9cleandataPvm(i8* nonnull %271, i64 %279) #11
  %280 = load i8*, i8** %270, align 8
  br label %281

281:                                              ; preds = %277, %273
  %282 = phi i8* [ %271, %273 ], [ %280, %277 ]
  call void @free(i8* %282) #11
  br label %283

283:                                              ; preds = %281, %268
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %248) #11
  %284 = icmp eq i32 %269, 0
  br i1 %284, label %285, label %288

285:                                              ; preds = %283, %238
  %286 = getelementptr inbounds %struct.UnpackFilter30, %struct.UnpackFilter30* %122, i64 0, i32 4, i32 0
  %287 = load i32, i32* %286, align 8
  store i32 %287, i32* %87, align 8
  br label %288

288:                                              ; preds = %239, %243, %90, %285, %283, %158, %68, %75
  %289 = phi i1 [ false, %75 ], [ false, %68 ], [ false, %90 ], [ false, %158 ], [ true, %285 ], [ false, %283 ], [ false, %243 ], [ false, %239 ]
  ret i1 %289

290:                                              ; preds = %235
  %291 = tail call i32 @_ZN5RarVM8ReadDataER8BitInput(%class.BitInput* dereferenceable(24) %6) #11
  %292 = getelementptr inbounds i8, i8* %83, i64 24
  %293 = bitcast i8* %292 to i32*
  store i32 %291, i32* %293, align 4
  br label %294

294:                                              ; preds = %290, %235
  %295 = and i32 %229, 2048
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %301, label %297

297:                                              ; preds = %294
  %298 = tail call i32 @_ZN5RarVM8ReadDataER8BitInput(%class.BitInput* dereferenceable(24) %6) #11
  %299 = getelementptr inbounds i8, i8* %83, i64 28
  %300 = bitcast i8* %299 to i32*
  store i32 %298, i32* %300, align 4
  br label %301

301:                                              ; preds = %297, %294
  %302 = and i32 %229, 4096
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %308, label %304

304:                                              ; preds = %301
  %305 = tail call i32 @_ZN5RarVM8ReadDataER8BitInput(%class.BitInput* dereferenceable(24) %6) #11
  %306 = getelementptr inbounds i8, i8* %83, i64 32
  %307 = bitcast i8* %306 to i32*
  store i32 %305, i32* %307, align 4
  br label %308

308:                                              ; preds = %304, %301
  %309 = and i32 %229, 8192
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %315, label %311

311:                                              ; preds = %308
  %312 = tail call i32 @_ZN5RarVM8ReadDataER8BitInput(%class.BitInput* dereferenceable(24) %6) #11
  %313 = getelementptr inbounds i8, i8* %83, i64 36
  %314 = bitcast i8* %313 to i32*
  store i32 %312, i32* %314, align 4
  br label %315

315:                                              ; preds = %311, %308
  %316 = and i32 %229, 16384
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %322, label %318

318:                                              ; preds = %315
  %319 = tail call i32 @_ZN5RarVM8ReadDataER8BitInput(%class.BitInput* dereferenceable(24) %6) #11
  %320 = getelementptr inbounds i8, i8* %83, i64 40
  %321 = bitcast i8* %320 to i32*
  store i32 %319, i32* %321, align 4
  br label %322

322:                                              ; preds = %318, %315
  %323 = trunc i32 %229 to i16
  %324 = icmp sgt i16 %323, -1
  br i1 %324, label %238, label %325

325:                                              ; preds = %322
  %326 = tail call i32 @_ZN5RarVM8ReadDataER8BitInput(%class.BitInput* dereferenceable(24) %6) #11
  %327 = getelementptr inbounds i8, i8* %83, i64 44
  %328 = bitcast i8* %327 to i32*
  store i32 %326, i32* %328, align 4
  br label %238
}

declare void @_ZN5RarVM4InitEv(%class.RarVM*) local_unnamed_addr #5

declare i32 @_ZN5RarVM8ReadDataER8BitInput(%class.BitInput* dereferenceable(24)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack13InitFilters30Eb(%class.Unpack* nocapture, i1 zeroext) local_unnamed_addr #0 align 2 {
  br i1 %1, label %26, label %3

3:                                                ; preds = %2
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 70, i32 1
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 71
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68, i32 0
  br label %12

11:                                               ; preds = %22, %3
  store i64 0, i64* %6, align 8
  br label %26

12:                                               ; preds = %9, %22
  %13 = phi i64 [ %7, %9 ], [ %23, %22 ]
  %14 = phi i64 [ 0, %9 ], [ %24, %22 ]
  %15 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %10, align 8
  %16 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %15, i64 %14
  %17 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %16, align 8
  %18 = icmp eq %struct.UnpackFilter30* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %12
  %20 = bitcast %struct.UnpackFilter30* %17 to i8*
  tail call void @_ZdlPv(i8* %20) #12
  %21 = load i64, i64* %6, align 8
  br label %22

22:                                               ; preds = %12, %19
  %23 = phi i64 [ %13, %12 ], [ %21, %19 ]
  %24 = add nuw i64 %14, 1
  %25 = icmp ult i64 %24, %23
  br i1 %25, label %12, label %11

26:                                               ; preds = %11, %2
  %27 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69, i32 0
  br label %33

32:                                               ; preds = %43, %26
  store i64 0, i64* %27, align 8
  ret void

33:                                               ; preds = %30, %43
  %34 = phi i64 [ %28, %30 ], [ %44, %43 ]
  %35 = phi i64 [ 0, %30 ], [ %45, %43 ]
  %36 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %31, align 8
  %37 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %36, i64 %35
  %38 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %37, align 8
  %39 = icmp eq %struct.UnpackFilter30* %38, null
  br i1 %39, label %43, label %40

40:                                               ; preds = %33
  %41 = bitcast %struct.UnpackFilter30* %38 to i8*
  tail call void @_ZdlPv(i8* %41) #12
  %42 = load i64, i64* %27, align 8
  br label %43

43:                                               ; preds = %33, %40
  %44 = phi i64 [ %34, %33 ], [ %42, %40 ]
  %45 = add nuw i64 %35, 1
  %46 = icmp ult i64 %45, %44
  br i1 %46, label %33, label %32
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ArrayIP14UnpackFilter30E3AddEm(%class.Array.8*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.Array.8, %class.Array.8* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, %1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %class.Array.8, %class.Array.8* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %5, %7
  br i1 %8, label %9, label %56

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.Array.8, %class.Array.8* %0, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = icmp ne i64 %11, 0
  %13 = icmp ugt i64 %5, %11
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %18

15:                                               ; preds = %9
  tail call void (%class.ErrorHandler*, i32*, ...) @_ZN12ErrorHandler13GeneralErrMsgEPKwz(%class.ErrorHandler* nonnull @ErrHandler, i32* getelementptr inbounds ([44 x i32], [44 x i32]* @.str, i64 0, i64 0), i64 %11) #11
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %3, align 8
  br label %18

18:                                               ; preds = %9, %15
  %19 = phi i64 [ %5, %9 ], [ %17, %15 ]
  %20 = phi i64 [ %7, %9 ], [ %16, %15 ]
  %21 = lshr i64 %20, 2
  %22 = add i64 %20, 32
  %23 = add i64 %22, %21
  %24 = icmp ugt i64 %19, %23
  %25 = select i1 %24, i64 %19, i64 %23
  %26 = getelementptr inbounds %class.Array.8, %class.Array.8* %0, i64 0, i32 4
  %27 = load i8, i8* %26, align 8, !range !5
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %45, label %29

29:                                               ; preds = %18
  %30 = shl i64 %25, 3
  %31 = tail call noalias i8* @malloc(i64 %30) #11
  %32 = bitcast i8* %31 to %struct.UnpackFilter30**
  %33 = icmp eq i8* %31, null
  br i1 %33, label %34, label %35

34:                                               ; preds = %29
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  br label %35

35:                                               ; preds = %34, %29
  %36 = getelementptr inbounds %class.Array.8, %class.Array.8* %0, i64 0, i32 0
  %37 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %36, align 8
  %38 = icmp eq %struct.UnpackFilter30** %37, null
  %39 = bitcast %struct.UnpackFilter30** %37 to i8*
  br i1 %38, label %53, label %40

40:                                               ; preds = %35
  %41 = load i64, i64* %6, align 8
  %42 = shl i64 %41, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* nonnull align 8 %39, i64 %42, i1 false)
  %43 = bitcast %class.Array.8* %0 to i8**
  tail call void @_Z9cleandataPvm(i8* nonnull %39, i64 %42) #11
  %44 = load i8*, i8** %43, align 8
  tail call void @free(i8* %44) #11
  br label %53

45:                                               ; preds = %18
  %46 = bitcast %class.Array.8* %0 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = shl i64 %25, 3
  %49 = tail call i8* @realloc(i8* %47, i64 %48) #11
  %50 = bitcast i8* %49 to %struct.UnpackFilter30**
  %51 = icmp eq i8* %49, null
  br i1 %51, label %52, label %53

52:                                               ; preds = %45
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  br label %53

53:                                               ; preds = %35, %45, %52, %40
  %54 = phi %struct.UnpackFilter30** [ %32, %40 ], [ %32, %35 ], [ null, %52 ], [ %50, %45 ]
  %55 = getelementptr inbounds %class.Array.8, %class.Array.8* %0, i64 0, i32 0
  store %struct.UnpackFilter30** %54, %struct.UnpackFilter30*** %55, align 8
  store i64 %25, i64* %6, align 8
  br label %56

56:                                               ; preds = %53, %2
  ret void
}

declare void @_ZN5RarVM7PrepareEPhjP18VM_PreparedProgram(%class.RarVM*, i8*, i32, %struct.VM_PreparedProgram*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack12UnpWriteAreaEmm(%class.Unpack* nocapture, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i64 %2, %1
  br i1 %4, label %7, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 26
  store i8 1, i8* %6, align 2
  br label %7

7:                                                ; preds = %3, %5
  %8 = icmp ult i64 %2, %1
  br i1 %8, label %9, label %11

9:                                                ; preds = %7
  %10 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 25
  store i8 1, i8* %10, align 1
  br label %11

11:                                               ; preds = %9, %7
  %12 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 22
  %13 = load i8, i8* %12, align 8, !range !5
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %51, label %15

15:                                               ; preds = %11
  %16 = sub i64 %2, %1
  %17 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %18 = load i64, i64* %17, align 8
  %19 = and i64 %18, %16
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %101, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 21
  %23 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 27
  %24 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %25 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %26 = load i64, i64* %23, align 8
  br label %27

27:                                               ; preds = %21, %44
  %28 = phi i64 [ %18, %21 ], [ %45, %44 ]
  %29 = phi i64 [ %26, %21 ], [ %46, %44 ]
  %30 = phi i64 [ %1, %21 ], [ %49, %44 ]
  %31 = phi i64 [ %19, %21 ], [ %47, %44 ]
  %32 = tail call i64 @_ZN16FragmentedWindow12GetBlockSizeEmm(%class.FragmentedWindow* %22, i64 %30, i64 %31)
  %33 = load i64, i64* %24, align 8
  %34 = icmp sgt i64 %33, %29
  br i1 %34, label %35, label %44

35:                                               ; preds = %27
  %36 = tail call dereferenceable(1) i8* @_ZN16FragmentedWindowixEm(%class.FragmentedWindow* %22, i64 %30)
  %37 = sub nsw i64 %33, %29
  %38 = icmp slt i64 %37, %32
  %39 = select i1 %38, i64 %37, i64 %32
  %40 = load %class.ComprDataIO*, %class.ComprDataIO** %25, align 8
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %40, i8* %36, i64 %39) #11
  %41 = load i64, i64* %23, align 8
  %42 = add i64 %41, %32
  store i64 %42, i64* %23, align 8
  %43 = load i64, i64* %17, align 8
  br label %44

44:                                               ; preds = %27, %35
  %45 = phi i64 [ %28, %27 ], [ %43, %35 ]
  %46 = phi i64 [ %29, %27 ], [ %42, %35 ]
  %47 = sub i64 %31, %32
  %48 = add i64 %32, %30
  %49 = and i64 %45, %48
  %50 = icmp eq i64 %47, 0
  br i1 %50, label %101, label %27

51:                                               ; preds = %11
  %52 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 %1
  br i1 %8, label %55, label %86

55:                                               ; preds = %51
  %56 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 72
  %57 = load i64, i64* %56, align 8
  %58 = sub i64 %57, %1
  %59 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 27
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %62 = load i64, i64* %61, align 8
  %63 = icmp sgt i64 %62, %60
  br i1 %63, label %64, label %73

64:                                               ; preds = %55
  %65 = sub nsw i64 %62, %60
  %66 = icmp slt i64 %65, %58
  %67 = select i1 %66, i64 %65, i64 %58
  %68 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %69 = load %class.ComprDataIO*, %class.ComprDataIO** %68, align 8
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %69, i8* %54, i64 %67) #11
  %70 = load i64, i64* %59, align 8
  %71 = add i64 %70, %58
  store i64 %71, i64* %59, align 8
  %72 = load i64, i64* %61, align 8
  br label %73

73:                                               ; preds = %55, %64
  %74 = phi i64 [ %62, %55 ], [ %72, %64 ]
  %75 = phi i64 [ %60, %55 ], [ %71, %64 ]
  %76 = icmp sgt i64 %74, %75
  br i1 %76, label %77, label %101

77:                                               ; preds = %73
  %78 = load i8*, i8** %52, align 8
  %79 = sub nsw i64 %74, %75
  %80 = icmp slt i64 %79, %2
  %81 = select i1 %80, i64 %79, i64 %2
  %82 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %83 = load %class.ComprDataIO*, %class.ComprDataIO** %82, align 8
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %83, i8* %78, i64 %81) #11
  %84 = load i64, i64* %59, align 8
  %85 = add i64 %84, %2
  store i64 %85, i64* %59, align 8
  br label %101

86:                                               ; preds = %51
  %87 = sub i64 %2, %1
  %88 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 27
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %91 = load i64, i64* %90, align 8
  %92 = icmp sgt i64 %91, %89
  br i1 %92, label %93, label %101

93:                                               ; preds = %86
  %94 = sub nsw i64 %91, %89
  %95 = icmp slt i64 %94, %87
  %96 = select i1 %95, i64 %94, i64 %87
  %97 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %98 = load %class.ComprDataIO*, %class.ComprDataIO** %97, align 8
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %98, i8* %54, i64 %96) #11
  %99 = load i64, i64* %88, align 8
  %100 = add i64 %99, %87
  store i64 %100, i64* %88, align 8
  br label %101

101:                                              ; preds = %44, %15, %93, %86, %77, %73
  ret void
}

declare void @_ZN5RarVM9SetMemoryEmPhm(%class.RarVM*, i64, i8*, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack11ExecuteCodeEP18VM_PreparedProgram(%class.Unpack*, %struct.VM_PreparedProgram*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 27
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %struct.VM_PreparedProgram, %struct.VM_PreparedProgram* %1, i64 0, i32 1, i64 6
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 66
  tail call void @_ZN5RarVM7ExecuteEP18VM_PreparedProgram(%class.RarVM* %7, %struct.VM_PreparedProgram* %1) #11
  ret void
}

declare void @_ZN5RarVM7ExecuteEP18VM_PreparedProgram(%class.RarVM*, %struct.VM_PreparedProgram*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack13UnpInitData30Eb(%class.Unpack* nocapture, i1 zeroext) local_unnamed_addr #0 align 2 {
  br i1 %1, label %30, label %3

3:                                                ; preds = %2
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 64
  store i8 0, i8* %4, align 1
  %5 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 61, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 404, i1 false)
  %6 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 60
  store i32 2, i32* %6, align 8
  %7 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 62
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 70, i32 1
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 71
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68, i32 0
  br label %16

15:                                               ; preds = %26, %3
  store i64 0, i64* %10, align 8
  br label %30

16:                                               ; preds = %26, %13
  %17 = phi i64 [ %11, %13 ], [ %27, %26 ]
  %18 = phi i64 [ 0, %13 ], [ %28, %26 ]
  %19 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %14, align 8
  %20 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %19, i64 %18
  %21 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %20, align 8
  %22 = icmp eq %struct.UnpackFilter30* %21, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %16
  %24 = bitcast %struct.UnpackFilter30* %21 to i8*
  tail call void @_ZdlPv(i8* %24) #12
  %25 = load i64, i64* %10, align 8
  br label %26

26:                                               ; preds = %23, %16
  %27 = phi i64 [ %17, %16 ], [ %25, %23 ]
  %28 = add nuw i64 %18, 1
  %29 = icmp ult i64 %28, %27
  br i1 %29, label %16, label %15

30:                                               ; preds = %2, %15
  %31 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %50, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69, i32 0
  br label %36

36:                                               ; preds = %46, %34
  %37 = phi i64 [ %32, %34 ], [ %47, %46 ]
  %38 = phi i64 [ 0, %34 ], [ %48, %46 ]
  %39 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %35, align 8
  %40 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %39, i64 %38
  %41 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %40, align 8
  %42 = icmp eq %struct.UnpackFilter30* %41, null
  br i1 %42, label %46, label %43

43:                                               ; preds = %36
  %44 = bitcast %struct.UnpackFilter30* %41 to i8*
  tail call void @_ZdlPv(i8* %44) #12
  %45 = load i64, i64* %31, align 8
  br label %46

46:                                               ; preds = %43, %36
  %47 = phi i64 [ %37, %36 ], [ %45, %43 ]
  %48 = add nuw i64 %38, 1
  %49 = icmp ult i64 %48, %47
  br i1 %49, label %36, label %50

50:                                               ; preds = %46, %30
  store i64 0, i64* %31, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack7Unpack5Eb(%class.Unpack*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to %struct.UnpackFilter*
  %5 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 28
  store i8 1, i8* %5, align 8
  %6 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 24
  %7 = load i8, i8* %6, align 8, !range !5
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %2
  tail call void @_ZN6Unpack11UnpInitDataEb(%class.Unpack* %0, i1 zeroext %1)
  %10 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %0)
  br i1 %10, label %11, label %927

11:                                               ; preds = %9
  %12 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1
  %13 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 17
  %14 = tail call zeroext i1 @_ZN6Unpack15ReadBlockHeaderER8BitInputR17UnpackBlockHeader(%class.Unpack* %0, %class.BitInput* dereferenceable(24) %12, %struct.UnpackBlockHeader* dereferenceable(20) %13)
  br i1 %14, label %15, label %927

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18
  %17 = tail call zeroext i1 @_ZN6Unpack10ReadTablesER8BitInputR17UnpackBlockHeaderR17UnpackBlockTables(%class.Unpack* %0, %class.BitInput* dereferenceable(24) %12, %struct.UnpackBlockHeader* dereferenceable(20) %13, %struct.UnpackBlockTables* dereferenceable(19100) %16)
  br i1 %17, label %18, label %927

18:                                               ; preds = %15
  %19 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 65
  %20 = load i8, i8* %19, align 2, !range !5
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %927, label %22

22:                                               ; preds = %18, %2
  %23 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  %24 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %25 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1
  %26 = getelementptr inbounds %class.BitInput, %class.BitInput* %25, i64 0, i32 0
  %27 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 16
  %28 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 17
  %29 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 17, i32 2
  %30 = getelementptr inbounds %struct.UnpackBlockHeader, %struct.UnpackBlockHeader* %28, i64 0, i32 0
  %31 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 1
  %32 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 17, i32 1
  %33 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 17, i32 4
  %34 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18
  %35 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 19
  %36 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 27
  %37 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %38 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1, i32 3
  %39 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 3
  %40 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 0
  %41 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 11
  %42 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 22
  %43 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 21
  %44 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 0
  %45 = bitcast <2 x i64>* %3 to i8*
  %46 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8
  %47 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8, i32 1
  %48 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 14
  %49 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %4, i64 0, i32 1
  %50 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %4, i64 0, i32 4
  %51 = getelementptr inbounds %class.Array.5, %class.Array.5* %46, i64 0, i32 0
  %52 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 3
  %53 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 0
  %54 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 3
  %55 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 0
  %56 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 3
  %57 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 0
  %58 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 2
  %59 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 3
  %60 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 1
  %61 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %62 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 1
  %63 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 0
  %64 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 1
  br label %65

65:                                               ; preds = %923, %22
  %66 = load i64, i64* %23, align 8
  %67 = load i64, i64* %24, align 8
  %68 = and i64 %67, %66
  store i64 %68, i64* %24, align 8
  %69 = load i32, i32* %26, align 8
  %70 = load i32, i32* %27, align 4
  %71 = icmp slt i32 %69, %70
  br i1 %71, label %99, label %72

72:                                               ; preds = %65, %92
  %73 = phi i32 [ %93, %92 ], [ %69, %65 ]
  %74 = load i32, i32* %29, align 8
  %75 = load i32, i32* %30, align 8
  %76 = add nsw i32 %75, %74
  %77 = icmp slt i32 %73, %76
  br i1 %77, label %78, label %85

78:                                               ; preds = %72
  %79 = add nsw i32 %76, -1
  %80 = icmp eq i32 %73, %79
  br i1 %80, label %81, label %94

81:                                               ; preds = %78
  %82 = load i32, i32* %31, align 4
  %83 = load i32, i32* %32, align 4
  %84 = icmp slt i32 %82, %83
  br i1 %84, label %94, label %85

85:                                               ; preds = %81, %72
  %86 = load i8, i8* %33, align 8, !range !5
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %88, label %926

88:                                               ; preds = %85
  %89 = tail call zeroext i1 @_ZN6Unpack15ReadBlockHeaderER8BitInputR17UnpackBlockHeader(%class.Unpack* %0, %class.BitInput* dereferenceable(24) %25, %struct.UnpackBlockHeader* dereferenceable(20) %28)
  br i1 %89, label %90, label %927

90:                                               ; preds = %88
  %91 = tail call zeroext i1 @_ZN6Unpack10ReadTablesER8BitInputR17UnpackBlockHeaderR17UnpackBlockTables(%class.Unpack* %0, %class.BitInput* dereferenceable(24) %25, %struct.UnpackBlockHeader* dereferenceable(20) %28, %struct.UnpackBlockTables* dereferenceable(19100) %34)
  br i1 %91, label %92, label %927

92:                                               ; preds = %90
  %93 = load i32, i32* %26, align 8
  br label %72

94:                                               ; preds = %78, %81
  %95 = tail call zeroext i1 @_ZN6Unpack10UnpReadBufEv(%class.Unpack* %0)
  br i1 %95, label %96, label %926

96:                                               ; preds = %94
  %97 = load i64, i64* %24, align 8
  %98 = load i64, i64* %23, align 8
  br label %99

99:                                               ; preds = %96, %65
  %100 = phi i64 [ %98, %96 ], [ %66, %65 ]
  %101 = phi i64 [ %97, %96 ], [ %68, %65 ]
  %102 = load i64, i64* %35, align 8
  %103 = sub i64 %102, %101
  %104 = and i64 %103, %100
  %105 = icmp ugt i64 %104, 4099
  %106 = icmp eq i64 %102, %101
  %107 = or i1 %106, %105
  br i1 %107, label %116, label %108

108:                                              ; preds = %99
  tail call void @_ZN6Unpack11UnpWriteBufEv(%class.Unpack* %0)
  %109 = load i64, i64* %36, align 8
  %110 = load i64, i64* %37, align 8
  %111 = icmp sgt i64 %109, %110
  br i1 %111, label %927, label %112

112:                                              ; preds = %108
  %113 = load i8, i8* %6, align 8, !range !5
  %114 = icmp eq i8 %113, 0
  br i1 %114, label %116, label %115

115:                                              ; preds = %112
  store i8 0, i8* %5, align 8
  br label %927

116:                                              ; preds = %99, %112
  %117 = load i8*, i8** %38, align 8
  %118 = load i32, i32* %26, align 8
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i8, i8* %117, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = shl nuw nsw i32 %122, 16
  %124 = add nsw i32 %118, 1
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i8, i8* %117, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = shl nuw nsw i32 %128, 8
  %130 = or i32 %129, %123
  %131 = add nsw i32 %118, 2
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i8, i8* %117, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = or i32 %130, %135
  %137 = load i32, i32* %31, align 4
  %138 = sub nsw i32 8, %137
  %139 = lshr i32 %136, %138
  %140 = and i32 %139, 65534
  %141 = load i32, i32* %39, align 4
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 1, i64 %142
  %144 = load i32, i32* %143, align 4
  %145 = icmp ult i32 %140, %144
  br i1 %145, label %146, label %158

146:                                              ; preds = %116
  %147 = sub i32 16, %141
  %148 = lshr i32 %140, %147
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 4, i64 %149
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = add i32 %137, %152
  %154 = lshr i32 %153, 3
  %155 = add i32 %154, %118
  store i32 %155, i32* %26, align 8
  %156 = and i32 %153, 7
  store i32 %156, i32* %31, align 4
  %157 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 5, i64 %149
  br label %189

158:                                              ; preds = %116, %162
  %159 = phi i32 [ %160, %162 ], [ %141, %116 ]
  %160 = add i32 %159, 1
  %161 = icmp ult i32 %160, 15
  br i1 %161, label %162, label %167

162:                                              ; preds = %158
  %163 = zext i32 %160 to i64
  %164 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 1, i64 %163
  %165 = load i32, i32* %164, align 4
  %166 = icmp ult i32 %140, %165
  br i1 %166, label %167, label %158

167:                                              ; preds = %158, %162
  %168 = phi i32 [ %160, %162 ], [ 15, %158 ]
  %169 = add i32 %168, %137
  %170 = lshr i32 %169, 3
  %171 = add i32 %170, %118
  store i32 %171, i32* %26, align 8
  %172 = and i32 %169, 7
  store i32 %172, i32* %31, align 4
  %173 = add nsw i32 %168, -1
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 1, i64 %174
  %176 = load i32, i32* %175, align 4
  %177 = sub i32 %140, %176
  %178 = sub nuw nsw i32 16, %168
  %179 = lshr i32 %177, %178
  %180 = zext i32 %168 to i64
  %181 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 2, i64 %180
  %182 = load i32, i32* %181, align 4
  %183 = add i32 %179, %182
  %184 = load i32, i32* %40, align 4
  %185 = icmp ult i32 %183, %184
  %186 = select i1 %185, i32 %183, i32 0
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 0, i32 6, i64 %187
  br label %189

189:                                              ; preds = %146, %167
  %190 = phi i32 [ %156, %146 ], [ %172, %167 ]
  %191 = phi i32 [ %155, %146 ], [ %171, %167 ]
  %192 = phi i16* [ %157, %146 ], [ %188, %167 ]
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = icmp ult i16 %193, 256
  br i1 %195, label %196, label %209

196:                                              ; preds = %189
  %197 = load i8, i8* %42, align 8, !range !5
  %198 = icmp eq i8 %197, 0
  %199 = trunc i16 %193 to i8
  br i1 %198, label %204, label %200

200:                                              ; preds = %196
  %201 = load i64, i64* %24, align 8
  %202 = add i64 %201, 1
  store i64 %202, i64* %24, align 8
  %203 = tail call dereferenceable(1) i8* @_ZN16FragmentedWindowixEm(%class.FragmentedWindow* %43, i64 %201)
  store i8 %199, i8* %203, align 1
  br label %923

204:                                              ; preds = %196
  %205 = load i8*, i8** %61, align 8
  %206 = load i64, i64* %24, align 8
  %207 = add i64 %206, 1
  store i64 %207, i64* %24, align 8
  %208 = getelementptr inbounds i8, i8* %205, i64 %206
  store i8 %199, i8* %208, align 1
  br label %923

209:                                              ; preds = %189
  %210 = icmp ugt i16 %193, 261
  br i1 %210, label %211, label %551

211:                                              ; preds = %209
  %212 = add nsw i32 %194, -262
  %213 = icmp ult i32 %212, 8
  br i1 %213, label %214, label %216

214:                                              ; preds = %211
  %215 = add nsw i32 %194, -260
  br label %253

216:                                              ; preds = %211
  %217 = lshr i32 %212, 2
  %218 = add nsw i32 %217, -1
  %219 = and i32 %212, 3
  %220 = or i32 %219, 4
  %221 = shl i32 %220, %218
  %222 = add i32 %221, 2
  %223 = icmp eq i32 %218, 0
  br i1 %223, label %253, label %224

224:                                              ; preds = %216
  %225 = sext i32 %191 to i64
  %226 = getelementptr inbounds i8, i8* %117, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = shl nuw nsw i32 %228, 16
  %230 = add nsw i32 %191, 1
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds i8, i8* %117, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i32
  %235 = shl nuw nsw i32 %234, 8
  %236 = or i32 %235, %229
  %237 = add nsw i32 %191, 2
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds i8, i8* %117, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i32
  %242 = or i32 %236, %241
  %243 = sub nuw nsw i32 8, %190
  %244 = lshr i32 %242, %243
  %245 = and i32 %244, 65535
  %246 = sub nsw i32 17, %217
  %247 = lshr i32 %245, %246
  %248 = add i32 %247, %222
  %249 = add nsw i32 %190, %218
  %250 = lshr i32 %249, 3
  %251 = add i32 %250, %191
  store i32 %251, i32* %26, align 8
  %252 = and i32 %249, 7
  store i32 %252, i32* %31, align 4
  br label %253

253:                                              ; preds = %214, %216, %224
  %254 = phi i32 [ %252, %224 ], [ %190, %216 ], [ %190, %214 ]
  %255 = phi i32 [ %251, %224 ], [ %191, %216 ], [ %191, %214 ]
  %256 = phi i32 [ %248, %224 ], [ %222, %216 ], [ %215, %214 ]
  %257 = sext i32 %255 to i64
  %258 = getelementptr inbounds i8, i8* %117, i64 %257
  %259 = load i8, i8* %258, align 1
  %260 = zext i8 %259 to i32
  %261 = shl nuw nsw i32 %260, 16
  %262 = add nsw i32 %255, 1
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i8, i8* %117, i64 %263
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i32
  %267 = shl nuw nsw i32 %266, 8
  %268 = or i32 %267, %261
  %269 = add nsw i32 %255, 2
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds i8, i8* %117, i64 %270
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i32
  %274 = or i32 %268, %273
  %275 = sub nuw nsw i32 8, %254
  %276 = lshr i32 %274, %275
  %277 = and i32 %276, 65534
  %278 = load i32, i32* %54, align 4
  %279 = zext i32 %278 to i64
  %280 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 1, i64 %279
  %281 = load i32, i32* %280, align 4
  %282 = icmp ult i32 %277, %281
  br i1 %282, label %283, label %295

283:                                              ; preds = %253
  %284 = sub i32 16, %278
  %285 = lshr i32 %277, %284
  %286 = zext i32 %285 to i64
  %287 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 4, i64 %286
  %288 = load i8, i8* %287, align 1
  %289 = zext i8 %288 to i32
  %290 = add nuw nsw i32 %254, %289
  %291 = lshr i32 %290, 3
  %292 = add i32 %291, %255
  store i32 %292, i32* %26, align 8
  %293 = and i32 %290, 7
  store i32 %293, i32* %31, align 4
  %294 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 5, i64 %286
  br label %326

295:                                              ; preds = %253, %299
  %296 = phi i32 [ %297, %299 ], [ %278, %253 ]
  %297 = add i32 %296, 1
  %298 = icmp ult i32 %297, 15
  br i1 %298, label %299, label %304

299:                                              ; preds = %295
  %300 = zext i32 %297 to i64
  %301 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 1, i64 %300
  %302 = load i32, i32* %301, align 4
  %303 = icmp ult i32 %277, %302
  br i1 %303, label %304, label %295

304:                                              ; preds = %295, %299
  %305 = phi i32 [ %297, %299 ], [ 15, %295 ]
  %306 = add i32 %305, %254
  %307 = lshr i32 %306, 3
  %308 = add i32 %307, %255
  store i32 %308, i32* %26, align 8
  %309 = and i32 %306, 7
  store i32 %309, i32* %31, align 4
  %310 = add nsw i32 %305, -1
  %311 = zext i32 %310 to i64
  %312 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 1, i64 %311
  %313 = load i32, i32* %312, align 4
  %314 = sub i32 %277, %313
  %315 = sub nuw nsw i32 16, %305
  %316 = lshr i32 %314, %315
  %317 = zext i32 %305 to i64
  %318 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 2, i64 %317
  %319 = load i32, i32* %318, align 4
  %320 = add i32 %316, %319
  %321 = load i32, i32* %55, align 4
  %322 = icmp ult i32 %320, %321
  %323 = select i1 %322, i32 %320, i32 0
  %324 = zext i32 %323 to i64
  %325 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 1, i32 6, i64 %324
  br label %326

326:                                              ; preds = %283, %304
  %327 = phi i32 [ %293, %283 ], [ %309, %304 ]
  %328 = phi i32 [ %292, %283 ], [ %308, %304 ]
  %329 = phi i16* [ %294, %283 ], [ %325, %304 ]
  %330 = load i16, i16* %329, align 2
  %331 = zext i16 %330 to i32
  %332 = icmp ult i16 %330, 4
  br i1 %332, label %333, label %335

333:                                              ; preds = %326
  %334 = add nuw nsw i32 %331, 1
  br label %521

335:                                              ; preds = %326
  %336 = lshr i32 %331, 1
  %337 = add nsw i32 %336, -1
  %338 = and i32 %331, 1
  %339 = or i32 %338, 2
  %340 = shl i32 %339, %337
  %341 = add i32 %340, 1
  %342 = icmp eq i32 %337, 0
  br i1 %342, label %511, label %343

343:                                              ; preds = %335
  %344 = icmp ugt i32 %337, 3
  br i1 %344, label %345, label %469

345:                                              ; preds = %343
  %346 = icmp eq i32 %337, 4
  br i1 %346, label %391, label %347

347:                                              ; preds = %345
  %348 = sext i32 %328 to i64
  %349 = getelementptr inbounds i8, i8* %117, i64 %348
  %350 = load i8, i8* %349, align 1
  %351 = zext i8 %350 to i32
  %352 = shl nuw i32 %351, 24
  %353 = add nsw i32 %328, 1
  %354 = sext i32 %353 to i64
  %355 = getelementptr inbounds i8, i8* %117, i64 %354
  %356 = load i8, i8* %355, align 1
  %357 = zext i8 %356 to i32
  %358 = shl nuw nsw i32 %357, 16
  %359 = or i32 %358, %352
  %360 = add nsw i32 %328, 2
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds i8, i8* %117, i64 %361
  %363 = load i8, i8* %362, align 1
  %364 = zext i8 %363 to i32
  %365 = shl nuw nsw i32 %364, 8
  %366 = or i32 %359, %365
  %367 = add nsw i32 %328, 3
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds i8, i8* %117, i64 %368
  %370 = load i8, i8* %369, align 1
  %371 = zext i8 %370 to i32
  %372 = or i32 %366, %371
  %373 = shl i32 %372, %327
  %374 = add nsw i32 %328, 4
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds i8, i8* %117, i64 %375
  %377 = load i8, i8* %376, align 1
  %378 = zext i8 %377 to i32
  %379 = sub nuw nsw i32 8, %327
  %380 = lshr i32 %378, %379
  %381 = or i32 %373, %380
  %382 = sub nsw i32 37, %336
  %383 = lshr i32 %381, %382
  %384 = shl i32 %383, 4
  %385 = add i32 %384, %341
  %386 = add nsw i32 %336, -5
  %387 = add nsw i32 %386, %327
  %388 = lshr i32 %387, 3
  %389 = add i32 %388, %328
  store i32 %389, i32* %26, align 8
  %390 = and i32 %387, 7
  store i32 %390, i32* %31, align 4
  br label %391

391:                                              ; preds = %345, %347
  %392 = phi i32 [ %390, %347 ], [ %327, %345 ]
  %393 = phi i32 [ %389, %347 ], [ %328, %345 ]
  %394 = phi i32 [ %385, %347 ], [ %341, %345 ]
  %395 = sext i32 %393 to i64
  %396 = getelementptr inbounds i8, i8* %117, i64 %395
  %397 = load i8, i8* %396, align 1
  %398 = zext i8 %397 to i32
  %399 = shl nuw nsw i32 %398, 16
  %400 = add nsw i32 %393, 1
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds i8, i8* %117, i64 %401
  %403 = load i8, i8* %402, align 1
  %404 = zext i8 %403 to i32
  %405 = shl nuw nsw i32 %404, 8
  %406 = or i32 %405, %399
  %407 = add nsw i32 %393, 2
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds i8, i8* %117, i64 %408
  %410 = load i8, i8* %409, align 1
  %411 = zext i8 %410 to i32
  %412 = or i32 %406, %411
  %413 = sub nuw nsw i32 8, %392
  %414 = lshr i32 %412, %413
  %415 = and i32 %414, 65534
  %416 = load i32, i32* %56, align 4
  %417 = zext i32 %416 to i64
  %418 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 1, i64 %417
  %419 = load i32, i32* %418, align 4
  %420 = icmp ult i32 %415, %419
  br i1 %420, label %421, label %433

421:                                              ; preds = %391
  %422 = sub i32 16, %416
  %423 = lshr i32 %415, %422
  %424 = zext i32 %423 to i64
  %425 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 4, i64 %424
  %426 = load i8, i8* %425, align 1
  %427 = zext i8 %426 to i32
  %428 = add nuw nsw i32 %392, %427
  %429 = lshr i32 %428, 3
  %430 = add i32 %429, %393
  store i32 %430, i32* %26, align 8
  %431 = and i32 %428, 7
  store i32 %431, i32* %31, align 4
  %432 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 5, i64 %424
  br label %464

433:                                              ; preds = %391, %437
  %434 = phi i32 [ %435, %437 ], [ %416, %391 ]
  %435 = add i32 %434, 1
  %436 = icmp ult i32 %435, 15
  br i1 %436, label %437, label %442

437:                                              ; preds = %433
  %438 = zext i32 %435 to i64
  %439 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 1, i64 %438
  %440 = load i32, i32* %439, align 4
  %441 = icmp ult i32 %415, %440
  br i1 %441, label %442, label %433

442:                                              ; preds = %433, %437
  %443 = phi i32 [ %435, %437 ], [ 15, %433 ]
  %444 = add i32 %443, %392
  %445 = lshr i32 %444, 3
  %446 = add i32 %445, %393
  store i32 %446, i32* %26, align 8
  %447 = and i32 %444, 7
  store i32 %447, i32* %31, align 4
  %448 = add nsw i32 %443, -1
  %449 = zext i32 %448 to i64
  %450 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 1, i64 %449
  %451 = load i32, i32* %450, align 4
  %452 = sub i32 %415, %451
  %453 = sub nuw nsw i32 16, %443
  %454 = lshr i32 %452, %453
  %455 = zext i32 %443 to i64
  %456 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 2, i64 %455
  %457 = load i32, i32* %456, align 4
  %458 = add i32 %454, %457
  %459 = load i32, i32* %57, align 4
  %460 = icmp ult i32 %458, %459
  %461 = select i1 %460, i32 %458, i32 0
  %462 = zext i32 %461 to i64
  %463 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 2, i32 6, i64 %462
  br label %464

464:                                              ; preds = %421, %442
  %465 = phi i16* [ %432, %421 ], [ %463, %442 ]
  %466 = load i16, i16* %465, align 2
  %467 = zext i16 %466 to i32
  %468 = add i32 %394, %467
  br label %511

469:                                              ; preds = %343
  %470 = sext i32 %328 to i64
  %471 = getelementptr inbounds i8, i8* %117, i64 %470
  %472 = load i8, i8* %471, align 1
  %473 = zext i8 %472 to i32
  %474 = shl nuw i32 %473, 24
  %475 = add nsw i32 %328, 1
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds i8, i8* %117, i64 %476
  %478 = load i8, i8* %477, align 1
  %479 = zext i8 %478 to i32
  %480 = shl nuw nsw i32 %479, 16
  %481 = or i32 %480, %474
  %482 = add nsw i32 %328, 2
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds i8, i8* %117, i64 %483
  %485 = load i8, i8* %484, align 1
  %486 = zext i8 %485 to i32
  %487 = shl nuw nsw i32 %486, 8
  %488 = or i32 %481, %487
  %489 = add nsw i32 %328, 3
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds i8, i8* %117, i64 %490
  %492 = load i8, i8* %491, align 1
  %493 = zext i8 %492 to i32
  %494 = or i32 %488, %493
  %495 = shl i32 %494, %327
  %496 = add nsw i32 %328, 4
  %497 = sext i32 %496 to i64
  %498 = getelementptr inbounds i8, i8* %117, i64 %497
  %499 = load i8, i8* %498, align 1
  %500 = zext i8 %499 to i32
  %501 = sub nuw nsw i32 8, %327
  %502 = lshr i32 %500, %501
  %503 = or i32 %495, %502
  %504 = sub nuw nsw i32 33, %336
  %505 = lshr i32 %503, %504
  %506 = add i32 %505, %341
  %507 = add nuw nsw i32 %327, %337
  %508 = lshr i32 %507, 3
  %509 = add i32 %508, %328
  store i32 %509, i32* %26, align 8
  %510 = and i32 %507, 7
  store i32 %510, i32* %31, align 4
  br label %511

511:                                              ; preds = %335, %464, %469
  %512 = phi i32 [ %468, %464 ], [ %506, %469 ], [ %341, %335 ]
  %513 = icmp ugt i32 %512, 256
  br i1 %513, label %514, label %521

514:                                              ; preds = %511
  %515 = add i32 %256, 1
  %516 = icmp ugt i32 %512, 8192
  br i1 %516, label %517, label %521

517:                                              ; preds = %514
  %518 = icmp ugt i32 %512, 262144
  %519 = select i1 %518, i32 3, i32 2
  %520 = add i32 %519, %256
  br label %521

521:                                              ; preds = %333, %517, %514, %511
  %522 = phi i32 [ %512, %514 ], [ %512, %511 ], [ %512, %517 ], [ %334, %333 ]
  %523 = phi i32 [ %515, %514 ], [ %256, %511 ], [ %520, %517 ], [ %256, %333 ]
  %524 = load i32, i32* %58, align 8
  store i32 %524, i32* %59, align 4
  %525 = load i32, i32* %60, align 4
  store i32 %525, i32* %58, align 8
  %526 = load i32, i32* %44, align 8
  store i32 %526, i32* %60, align 4
  store i32 %522, i32* %44, align 8
  store i32 %523, i32* %41, align 4
  %527 = load i8, i8* %42, align 8, !range !5
  %528 = icmp eq i8 %527, 0
  br i1 %528, label %550, label %529

529:                                              ; preds = %521
  %530 = load i64, i64* %23, align 8
  %531 = load i64, i64* %24, align 8
  %532 = icmp eq i32 %523, 0
  br i1 %532, label %923, label %533

533:                                              ; preds = %529
  %534 = zext i32 %522 to i64
  %535 = sub i64 %531, %534
  br label %536

536:                                              ; preds = %536, %533
  %537 = phi i64 [ %548, %536 ], [ %531, %533 ]
  %538 = phi i64 [ %541, %536 ], [ %535, %533 ]
  %539 = phi i32 [ %540, %536 ], [ %523, %533 ]
  %540 = add i32 %539, -1
  %541 = add i64 %538, 1
  %542 = and i64 %538, %530
  %543 = tail call dereferenceable(1) i8* @_ZN16FragmentedWindowixEm(%class.FragmentedWindow* %43, i64 %542) #11
  %544 = load i8, i8* %543, align 1
  %545 = tail call dereferenceable(1) i8* @_ZN16FragmentedWindowixEm(%class.FragmentedWindow* %43, i64 %537) #11
  store i8 %544, i8* %545, align 1
  %546 = load i64, i64* %24, align 8
  %547 = add i64 %546, 1
  %548 = and i64 %547, %530
  store i64 %548, i64* %24, align 8
  %549 = icmp eq i32 %540, 0
  br i1 %549, label %923, label %536

550:                                              ; preds = %521
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %523, i32 %522)
  br label %923

551:                                              ; preds = %209
  switch i16 %193, label %619 [
    i16 256, label %552
    i16 257, label %592
  ]

552:                                              ; preds = %551
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 -86, i64 16, i1 false)
  %553 = call zeroext i1 @_ZN6Unpack10ReadFilterER8BitInputR12UnpackFilter(%class.Unpack* %0, %class.BitInput* dereferenceable(24) %25, %struct.UnpackFilter* nonnull dereferenceable(16) %4)
  br i1 %553, label %554, label %590

554:                                              ; preds = %552
  %555 = load i64, i64* %47, align 8
  %556 = icmp ugt i64 %555, 8191
  br i1 %556, label %557, label %561

557:                                              ; preds = %554
  tail call void @_ZN6Unpack11UnpWriteBufEv(%class.Unpack* %0) #11
  %558 = load i64, i64* %47, align 8
  %559 = icmp ugt i64 %558, 8191
  br i1 %559, label %560, label %561

560:                                              ; preds = %557
  store i64 0, i64* %47, align 8
  br label %561

561:                                              ; preds = %560, %557, %554
  %562 = load i64, i64* %48, align 8
  %563 = load i64, i64* %24, align 8
  %564 = icmp eq i64 %562, %563
  br i1 %564, label %565, label %569

565:                                              ; preds = %561
  %566 = load i32, i32* %49, align 4
  %567 = zext i32 %566 to i64
  %568 = load i64, i64* %23, align 8
  br label %577

569:                                              ; preds = %561
  %570 = sub i64 %562, %563
  %571 = load i64, i64* %23, align 8
  %572 = and i64 %571, %570
  %573 = load i32, i32* %49, align 4
  %574 = zext i32 %573 to i64
  %575 = icmp ule i64 %572, %574
  %576 = zext i1 %575 to i8
  br label %577

577:                                              ; preds = %565, %569
  %578 = phi i64 [ %568, %565 ], [ %571, %569 ]
  %579 = phi i64 [ %567, %565 ], [ %574, %569 ]
  %580 = phi i8 [ 0, %565 ], [ %576, %569 ]
  store i8 %580, i8* %50, align 1
  %581 = add i64 %579, %563
  %582 = and i64 %578, %581
  %583 = trunc i64 %582 to i32
  store i32 %583, i32* %49, align 4
  %584 = load <2 x i64>, <2 x i64>* %3, align 16
  tail call void @_ZN5ArrayI12UnpackFilterE3AddEm(%class.Array.5* %46, i64 1) #11
  %585 = load i64, i64* %47, align 8
  %586 = add i64 %585, -1
  %587 = load %struct.UnpackFilter*, %struct.UnpackFilter** %51, align 8
  %588 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %587, i64 %586
  %589 = bitcast %struct.UnpackFilter* %588 to <2 x i64>*
  store <2 x i64> %584, <2 x i64>* %589, align 4
  br label %590

590:                                              ; preds = %552, %577
  %591 = phi i32 [ 2, %577 ], [ 3, %552 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #11
  br label %923

592:                                              ; preds = %551
  %593 = load i32, i32* %41, align 4
  %594 = icmp eq i32 %593, 0
  br i1 %594, label %923, label %595

595:                                              ; preds = %592
  %596 = load i8, i8* %42, align 8, !range !5
  %597 = icmp eq i8 %596, 0
  %598 = load i32, i32* %44, align 8
  br i1 %597, label %618, label %599

599:                                              ; preds = %595
  %600 = load i64, i64* %23, align 8
  %601 = load i64, i64* %24, align 8
  %602 = zext i32 %598 to i64
  %603 = sub i64 %601, %602
  br label %604

604:                                              ; preds = %604, %599
  %605 = phi i64 [ %616, %604 ], [ %601, %599 ]
  %606 = phi i64 [ %609, %604 ], [ %603, %599 ]
  %607 = phi i32 [ %608, %604 ], [ %593, %599 ]
  %608 = add i32 %607, -1
  %609 = add i64 %606, 1
  %610 = and i64 %606, %600
  %611 = tail call dereferenceable(1) i8* @_ZN16FragmentedWindowixEm(%class.FragmentedWindow* %43, i64 %610) #11
  %612 = load i8, i8* %611, align 1
  %613 = tail call dereferenceable(1) i8* @_ZN16FragmentedWindowixEm(%class.FragmentedWindow* %43, i64 %605) #11
  store i8 %612, i8* %613, align 1
  %614 = load i64, i64* %24, align 8
  %615 = add i64 %614, 1
  %616 = and i64 %615, %600
  store i64 %616, i64* %24, align 8
  %617 = icmp eq i32 %608, 0
  br i1 %617, label %923, label %604

618:                                              ; preds = %595
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %593, i32 %598)
  br label %923

619:                                              ; preds = %551
  %620 = add nsw i32 %194, -258
  %621 = zext i32 %620 to i64
  %622 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %621
  %623 = load i32, i32* %622, align 4
  %624 = icmp eq i32 %620, 0
  br i1 %624, label %751, label %625

625:                                              ; preds = %619
  %626 = add nsw i32 %194, -259
  %627 = zext i32 %626 to i64
  %628 = add nuw nsw i64 %627, 1
  %629 = icmp ult i64 %628, 8
  br i1 %629, label %630, label %650

630:                                              ; preds = %746, %664, %650, %625
  %631 = phi i64 [ %621, %664 ], [ %621, %650 ], [ %621, %625 ], [ %676, %746 ]
  %632 = trunc i64 %631 to i32
  %633 = add i32 %632, -1
  %634 = and i32 %632, 3
  %635 = icmp eq i32 %634, 0
  br i1 %635, label %647, label %636

636:                                              ; preds = %630, %636
  %637 = phi i64 [ %644, %636 ], [ %631, %630 ]
  %638 = phi i32 [ %645, %636 ], [ %634, %630 ]
  %639 = add i64 %637, 4294967295
  %640 = and i64 %639, 4294967295
  %641 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %640
  %642 = load i32, i32* %641, align 4
  %643 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %637
  store i32 %642, i32* %643, align 4
  %644 = add nsw i64 %637, -1
  %645 = add i32 %638, -1
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %647, label %636, !llvm.loop !50

647:                                              ; preds = %636, %630
  %648 = phi i64 [ %631, %630 ], [ %644, %636 ]
  %649 = icmp ult i32 %633, 3
  br i1 %649, label %748, label %873

650:                                              ; preds = %625
  %651 = add nsw i32 %194, -259
  %652 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %621
  %653 = ptrtoint i32* %652 to i64
  %654 = zext i32 %651 to i64
  %655 = shl nuw nsw i64 %654, 2
  %656 = icmp ugt i64 %655, %653
  %657 = zext i32 %651 to i64
  %658 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %657
  %659 = ptrtoint i32* %658 to i64
  %660 = zext i32 %651 to i64
  %661 = shl nuw nsw i64 %660, 2
  %662 = icmp ugt i64 %661, %659
  %663 = or i1 %656, %662
  br i1 %663, label %630, label %664

664:                                              ; preds = %650
  %665 = add nsw i32 %194, -259
  %666 = zext i32 %665 to i64
  %667 = sub nsw i64 %621, %666
  %668 = getelementptr %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %667
  %669 = getelementptr i32, i32* %62, i64 %621
  %670 = getelementptr i32, i32* %64, i64 %666
  %671 = icmp ult i32* %668, %670
  %672 = icmp ult i32* %63, %669
  %673 = and i1 %671, %672
  br i1 %673, label %630, label %674

674:                                              ; preds = %664
  %675 = and i64 %628, 8589934584
  %676 = sub nsw i64 %621, %675
  %677 = add nsw i64 %675, -8
  %678 = lshr exact i64 %677, 3
  %679 = add nuw nsw i64 %678, 1
  %680 = and i64 %679, 1
  %681 = icmp eq i64 %677, 0
  br i1 %681, label %725, label %682

682:                                              ; preds = %674
  %683 = sub nuw nsw i64 %679, %680
  br label %684

684:                                              ; preds = %684, %682
  %685 = phi i64 [ 0, %682 ], [ %722, %684 ]
  %686 = phi i64 [ %683, %682 ], [ %723, %684 ]
  %687 = sub i64 %621, %685
  %688 = trunc i64 %685 to i32
  %689 = xor i32 %688, -1
  %690 = add i32 %620, %689
  %691 = zext i32 %690 to i64
  %692 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %691
  %693 = getelementptr inbounds i32, i32* %692, i64 -3
  %694 = bitcast i32* %693 to <4 x i32>*
  %695 = load <4 x i32>, <4 x i32>* %694, align 4, !alias.scope !51
  %696 = getelementptr inbounds i32, i32* %692, i64 -7
  %697 = bitcast i32* %696 to <4 x i32>*
  %698 = load <4 x i32>, <4 x i32>* %697, align 4, !alias.scope !51
  %699 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %687
  %700 = getelementptr inbounds i32, i32* %699, i64 -3
  %701 = bitcast i32* %700 to <4 x i32>*
  store <4 x i32> %695, <4 x i32>* %701, align 4, !alias.scope !54, !noalias !51
  %702 = getelementptr inbounds i32, i32* %699, i64 -7
  %703 = bitcast i32* %702 to <4 x i32>*
  store <4 x i32> %698, <4 x i32>* %703, align 4, !alias.scope !54, !noalias !51
  %704 = or i64 %685, 8
  %705 = sub i64 %621, %704
  %706 = trunc i64 %704 to i32
  %707 = xor i32 %706, -1
  %708 = add i32 %620, %707
  %709 = zext i32 %708 to i64
  %710 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %709
  %711 = getelementptr inbounds i32, i32* %710, i64 -3
  %712 = bitcast i32* %711 to <4 x i32>*
  %713 = load <4 x i32>, <4 x i32>* %712, align 4, !alias.scope !51
  %714 = getelementptr inbounds i32, i32* %710, i64 -7
  %715 = bitcast i32* %714 to <4 x i32>*
  %716 = load <4 x i32>, <4 x i32>* %715, align 4, !alias.scope !51
  %717 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %705
  %718 = getelementptr inbounds i32, i32* %717, i64 -3
  %719 = bitcast i32* %718 to <4 x i32>*
  store <4 x i32> %713, <4 x i32>* %719, align 4, !alias.scope !54, !noalias !51
  %720 = getelementptr inbounds i32, i32* %717, i64 -7
  %721 = bitcast i32* %720 to <4 x i32>*
  store <4 x i32> %716, <4 x i32>* %721, align 4, !alias.scope !54, !noalias !51
  %722 = add i64 %685, 16
  %723 = add i64 %686, -2
  %724 = icmp eq i64 %723, 0
  br i1 %724, label %725, label %684, !llvm.loop !56

725:                                              ; preds = %684, %674
  %726 = phi i64 [ 0, %674 ], [ %722, %684 ]
  %727 = icmp eq i64 %680, 0
  br i1 %727, label %746, label %728

728:                                              ; preds = %725
  %729 = sub i64 %621, %726
  %730 = trunc i64 %726 to i32
  %731 = xor i32 %730, -1
  %732 = add i32 %620, %731
  %733 = zext i32 %732 to i64
  %734 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %733
  %735 = getelementptr inbounds i32, i32* %734, i64 -3
  %736 = bitcast i32* %735 to <4 x i32>*
  %737 = load <4 x i32>, <4 x i32>* %736, align 4, !alias.scope !51
  %738 = getelementptr inbounds i32, i32* %734, i64 -7
  %739 = bitcast i32* %738 to <4 x i32>*
  %740 = load <4 x i32>, <4 x i32>* %739, align 4, !alias.scope !51
  %741 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %729
  %742 = getelementptr inbounds i32, i32* %741, i64 -3
  %743 = bitcast i32* %742 to <4 x i32>*
  store <4 x i32> %737, <4 x i32>* %743, align 4, !alias.scope !54, !noalias !51
  %744 = getelementptr inbounds i32, i32* %741, i64 -7
  %745 = bitcast i32* %744 to <4 x i32>*
  store <4 x i32> %740, <4 x i32>* %745, align 4, !alias.scope !54, !noalias !51
  br label %746

746:                                              ; preds = %725, %728
  %747 = icmp eq i64 %628, %675
  br i1 %747, label %748, label %630

748:                                              ; preds = %647, %873, %746
  %749 = load i32, i32* %26, align 8
  %750 = load i32, i32* %31, align 4
  br label %751

751:                                              ; preds = %748, %619
  %752 = phi i32 [ %750, %748 ], [ %190, %619 ]
  %753 = phi i32 [ %749, %748 ], [ %191, %619 ]
  store i32 %623, i32* %44, align 8
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds i8, i8* %117, i64 %754
  %756 = load i8, i8* %755, align 1
  %757 = zext i8 %756 to i32
  %758 = shl nuw nsw i32 %757, 16
  %759 = add nsw i32 %753, 1
  %760 = sext i32 %759 to i64
  %761 = getelementptr inbounds i8, i8* %117, i64 %760
  %762 = load i8, i8* %761, align 1
  %763 = zext i8 %762 to i32
  %764 = shl nuw nsw i32 %763, 8
  %765 = or i32 %764, %758
  %766 = add nsw i32 %753, 2
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds i8, i8* %117, i64 %767
  %769 = load i8, i8* %768, align 1
  %770 = zext i8 %769 to i32
  %771 = or i32 %765, %770
  %772 = sub nsw i32 8, %752
  %773 = lshr i32 %771, %772
  %774 = and i32 %773, 65534
  %775 = load i32, i32* %52, align 4
  %776 = zext i32 %775 to i64
  %777 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 1, i64 %776
  %778 = load i32, i32* %777, align 4
  %779 = icmp ult i32 %774, %778
  br i1 %779, label %780, label %792

780:                                              ; preds = %751
  %781 = sub i32 16, %775
  %782 = lshr i32 %774, %781
  %783 = zext i32 %782 to i64
  %784 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 4, i64 %783
  %785 = load i8, i8* %784, align 1
  %786 = zext i8 %785 to i32
  %787 = add i32 %752, %786
  %788 = lshr i32 %787, 3
  %789 = add i32 %788, %753
  store i32 %789, i32* %26, align 8
  %790 = and i32 %787, 7
  store i32 %790, i32* %31, align 4
  %791 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 5, i64 %783
  br label %823

792:                                              ; preds = %751, %796
  %793 = phi i32 [ %794, %796 ], [ %775, %751 ]
  %794 = add i32 %793, 1
  %795 = icmp ult i32 %794, 15
  br i1 %795, label %796, label %801

796:                                              ; preds = %792
  %797 = zext i32 %794 to i64
  %798 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 1, i64 %797
  %799 = load i32, i32* %798, align 4
  %800 = icmp ult i32 %774, %799
  br i1 %800, label %801, label %792

801:                                              ; preds = %792, %796
  %802 = phi i32 [ %794, %796 ], [ 15, %792 ]
  %803 = add i32 %802, %752
  %804 = lshr i32 %803, 3
  %805 = add i32 %804, %753
  store i32 %805, i32* %26, align 8
  %806 = and i32 %803, 7
  store i32 %806, i32* %31, align 4
  %807 = add nsw i32 %802, -1
  %808 = zext i32 %807 to i64
  %809 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 1, i64 %808
  %810 = load i32, i32* %809, align 4
  %811 = sub i32 %774, %810
  %812 = sub nuw nsw i32 16, %802
  %813 = lshr i32 %811, %812
  %814 = zext i32 %802 to i64
  %815 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 2, i64 %814
  %816 = load i32, i32* %815, align 4
  %817 = add i32 %813, %816
  %818 = load i32, i32* %53, align 4
  %819 = icmp ult i32 %817, %818
  %820 = select i1 %819, i32 %817, i32 0
  %821 = zext i32 %820 to i64
  %822 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 18, i32 3, i32 6, i64 %821
  br label %823

823:                                              ; preds = %780, %801
  %824 = phi i32 [ %790, %780 ], [ %806, %801 ]
  %825 = phi i32 [ %789, %780 ], [ %805, %801 ]
  %826 = phi i16* [ %791, %780 ], [ %822, %801 ]
  %827 = load i16, i16* %826, align 2
  %828 = zext i16 %827 to i32
  %829 = icmp ult i16 %827, 8
  br i1 %829, label %830, label %832

830:                                              ; preds = %823
  %831 = add nuw nsw i32 %828, 2
  br label %869

832:                                              ; preds = %823
  %833 = lshr i32 %828, 2
  %834 = add nsw i32 %833, -1
  %835 = and i32 %828, 3
  %836 = or i32 %835, 4
  %837 = shl i32 %836, %834
  %838 = add i32 %837, 2
  %839 = icmp eq i32 %834, 0
  br i1 %839, label %869, label %840

840:                                              ; preds = %832
  %841 = sext i32 %825 to i64
  %842 = getelementptr inbounds i8, i8* %117, i64 %841
  %843 = load i8, i8* %842, align 1
  %844 = zext i8 %843 to i32
  %845 = shl nuw nsw i32 %844, 16
  %846 = add nsw i32 %825, 1
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds i8, i8* %117, i64 %847
  %849 = load i8, i8* %848, align 1
  %850 = zext i8 %849 to i32
  %851 = shl nuw nsw i32 %850, 8
  %852 = or i32 %851, %845
  %853 = add nsw i32 %825, 2
  %854 = sext i32 %853 to i64
  %855 = getelementptr inbounds i8, i8* %117, i64 %854
  %856 = load i8, i8* %855, align 1
  %857 = zext i8 %856 to i32
  %858 = or i32 %852, %857
  %859 = sub nuw nsw i32 8, %824
  %860 = lshr i32 %858, %859
  %861 = and i32 %860, 65535
  %862 = sub nsw i32 17, %833
  %863 = lshr i32 %861, %862
  %864 = add i32 %863, %838
  %865 = add nsw i32 %824, %834
  %866 = lshr i32 %865, 3
  %867 = add i32 %866, %825
  store i32 %867, i32* %26, align 8
  %868 = and i32 %865, 7
  store i32 %868, i32* %31, align 4
  br label %869

869:                                              ; preds = %830, %832, %840
  %870 = phi i32 [ %864, %840 ], [ %838, %832 ], [ %831, %830 ]
  store i32 %870, i32* %41, align 4
  %871 = load i8, i8* %42, align 8, !range !5
  %872 = icmp eq i8 %871, 0
  br i1 %872, label %922, label %901

873:                                              ; preds = %647, %873
  %874 = phi i64 [ %900, %873 ], [ %648, %647 ]
  %875 = add i64 %874, 4294967295
  %876 = and i64 %875, 4294967295
  %877 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %876
  %878 = load i32, i32* %877, align 4
  %879 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %874
  store i32 %878, i32* %879, align 4
  %880 = add nsw i64 %874, -1
  %881 = add i64 %874, 4294967294
  %882 = and i64 %881, 4294967295
  %883 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %882
  %884 = load i32, i32* %883, align 4
  %885 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %880
  store i32 %884, i32* %885, align 4
  %886 = add nsw i64 %874, -2
  %887 = add i64 %874, 4294967293
  %888 = and i64 %887, 4294967295
  %889 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %888
  %890 = load i32, i32* %889, align 4
  %891 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %886
  store i32 %890, i32* %891, align 4
  %892 = add nsw i64 %874, -3
  %893 = trunc i64 %892 to i32
  %894 = add i32 %893, -1
  %895 = zext i32 %894 to i64
  %896 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %895
  %897 = load i32, i32* %896, align 4
  %898 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 9, i64 %892
  store i32 %897, i32* %898, align 4
  %899 = icmp eq i32 %894, 0
  %900 = add nsw i64 %874, -4
  br i1 %899, label %748, label %873, !llvm.loop !57

901:                                              ; preds = %869
  %902 = load i64, i64* %23, align 8
  %903 = load i64, i64* %24, align 8
  %904 = icmp eq i32 %870, 0
  br i1 %904, label %923, label %905

905:                                              ; preds = %901
  %906 = zext i32 %623 to i64
  %907 = sub i64 %903, %906
  br label %908

908:                                              ; preds = %908, %905
  %909 = phi i64 [ %920, %908 ], [ %903, %905 ]
  %910 = phi i64 [ %913, %908 ], [ %907, %905 ]
  %911 = phi i32 [ %912, %908 ], [ %870, %905 ]
  %912 = add i32 %911, -1
  %913 = add i64 %910, 1
  %914 = and i64 %910, %902
  %915 = tail call dereferenceable(1) i8* @_ZN16FragmentedWindowixEm(%class.FragmentedWindow* %43, i64 %914) #11
  %916 = load i8, i8* %915, align 1
  %917 = tail call dereferenceable(1) i8* @_ZN16FragmentedWindowixEm(%class.FragmentedWindow* %43, i64 %909) #11
  store i8 %916, i8* %917, align 1
  %918 = load i64, i64* %24, align 8
  %919 = add i64 %918, 1
  %920 = and i64 %919, %902
  store i64 %920, i64* %24, align 8
  %921 = icmp eq i32 %912, 0
  br i1 %921, label %923, label %908

922:                                              ; preds = %869
  tail call void @_ZN6Unpack10CopyStringEjj(%class.Unpack* %0, i32 %870, i32 %623)
  br label %923

923:                                              ; preds = %604, %908, %536, %901, %529, %922, %618, %592, %550, %200, %204, %590
  %924 = phi i32 [ %591, %590 ], [ 2, %204 ], [ 2, %200 ], [ 2, %550 ], [ 2, %592 ], [ 2, %618 ], [ 2, %922 ], [ 2, %529 ], [ 2, %901 ], [ 2, %536 ], [ 2, %908 ], [ 2, %604 ]
  %925 = icmp eq i32 %924, 3
  br i1 %925, label %926, label %65

926:                                              ; preds = %94, %923, %85
  tail call void @_ZN6Unpack11UnpWriteBufEv(%class.Unpack* %0)
  br label %927

927:                                              ; preds = %108, %88, %90, %18, %11, %15, %9, %926, %115
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(1) i8* @_ZN16FragmentedWindowixEm(%class.FragmentedWindow* nocapture readonly, i64) local_unnamed_addr #10 align 2 {
  %3 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, %1
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ugt i64 %8, %1
  br i1 %9, label %18, label %14

10:                                               ; preds = %2
  %11 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 0, i64 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  br label %27

14:                                               ; preds = %6
  %15 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 2
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %16, %1
  br i1 %17, label %18, label %29

18:                                               ; preds = %141, %137, %133, %129, %125, %121, %117, %113, %109, %105, %101, %97, %93, %89, %85, %81, %77, %73, %69, %65, %61, %57, %53, %49, %45, %41, %37, %33, %29, %14, %6
  %19 = phi i64 [ 1, %6 ], [ 2, %14 ], [ 3, %29 ], [ 4, %33 ], [ 5, %37 ], [ 6, %41 ], [ 7, %45 ], [ 8, %49 ], [ 9, %53 ], [ 10, %57 ], [ 11, %61 ], [ 12, %65 ], [ 13, %69 ], [ 14, %73 ], [ 15, %77 ], [ 16, %81 ], [ 17, %85 ], [ 18, %89 ], [ 19, %93 ], [ 20, %97 ], [ 21, %101 ], [ 22, %105 ], [ 23, %109 ], [ 24, %113 ], [ 25, %117 ], [ 26, %121 ], [ 27, %125 ], [ 28, %129 ], [ 29, %133 ], [ 30, %137 ], [ 31, %141 ]
  %20 = phi i64 [ 0, %6 ], [ 1, %14 ], [ 2, %29 ], [ 3, %33 ], [ 4, %37 ], [ 5, %41 ], [ 6, %45 ], [ 7, %49 ], [ 8, %53 ], [ 9, %57 ], [ 10, %61 ], [ 11, %65 ], [ 12, %69 ], [ 13, %73 ], [ 14, %77 ], [ 15, %81 ], [ 16, %85 ], [ 17, %89 ], [ 18, %93 ], [ 19, %97 ], [ 20, %101 ], [ 21, %105 ], [ 22, %109 ], [ 23, %113 ], [ 24, %117 ], [ 25, %121 ], [ 26, %125 ], [ 27, %129 ], [ 28, %133 ], [ 29, %137 ], [ 30, %141 ]
  %21 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 0, i64 %19
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 %20
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %1, %24
  %26 = getelementptr inbounds i8, i8* %22, i64 %25
  br label %27

27:                                               ; preds = %18, %145, %10
  %28 = phi i8* [ %13, %10 ], [ %147, %145 ], [ %26, %18 ]
  ret i8* %28

29:                                               ; preds = %14
  %30 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 3
  %31 = load i64, i64* %30, align 8
  %32 = icmp ugt i64 %31, %1
  br i1 %32, label %18, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 4
  %35 = load i64, i64* %34, align 8
  %36 = icmp ugt i64 %35, %1
  br i1 %36, label %18, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 5
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  br i1 %40, label %18, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 6
  %43 = load i64, i64* %42, align 8
  %44 = icmp ugt i64 %43, %1
  br i1 %44, label %18, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 7
  %47 = load i64, i64* %46, align 8
  %48 = icmp ugt i64 %47, %1
  br i1 %48, label %18, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 8
  %51 = load i64, i64* %50, align 8
  %52 = icmp ugt i64 %51, %1
  br i1 %52, label %18, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 9
  %55 = load i64, i64* %54, align 8
  %56 = icmp ugt i64 %55, %1
  br i1 %56, label %18, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 10
  %59 = load i64, i64* %58, align 8
  %60 = icmp ugt i64 %59, %1
  br i1 %60, label %18, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 11
  %63 = load i64, i64* %62, align 8
  %64 = icmp ugt i64 %63, %1
  br i1 %64, label %18, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 12
  %67 = load i64, i64* %66, align 8
  %68 = icmp ugt i64 %67, %1
  br i1 %68, label %18, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 13
  %71 = load i64, i64* %70, align 8
  %72 = icmp ugt i64 %71, %1
  br i1 %72, label %18, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 14
  %75 = load i64, i64* %74, align 8
  %76 = icmp ugt i64 %75, %1
  br i1 %76, label %18, label %77

77:                                               ; preds = %73
  %78 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 15
  %79 = load i64, i64* %78, align 8
  %80 = icmp ugt i64 %79, %1
  br i1 %80, label %18, label %81

81:                                               ; preds = %77
  %82 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 16
  %83 = load i64, i64* %82, align 8
  %84 = icmp ugt i64 %83, %1
  br i1 %84, label %18, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 17
  %87 = load i64, i64* %86, align 8
  %88 = icmp ugt i64 %87, %1
  br i1 %88, label %18, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 18
  %91 = load i64, i64* %90, align 8
  %92 = icmp ugt i64 %91, %1
  br i1 %92, label %18, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 19
  %95 = load i64, i64* %94, align 8
  %96 = icmp ugt i64 %95, %1
  br i1 %96, label %18, label %97

97:                                               ; preds = %93
  %98 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 20
  %99 = load i64, i64* %98, align 8
  %100 = icmp ugt i64 %99, %1
  br i1 %100, label %18, label %101

101:                                              ; preds = %97
  %102 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 21
  %103 = load i64, i64* %102, align 8
  %104 = icmp ugt i64 %103, %1
  br i1 %104, label %18, label %105

105:                                              ; preds = %101
  %106 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 22
  %107 = load i64, i64* %106, align 8
  %108 = icmp ugt i64 %107, %1
  br i1 %108, label %18, label %109

109:                                              ; preds = %105
  %110 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 23
  %111 = load i64, i64* %110, align 8
  %112 = icmp ugt i64 %111, %1
  br i1 %112, label %18, label %113

113:                                              ; preds = %109
  %114 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 24
  %115 = load i64, i64* %114, align 8
  %116 = icmp ugt i64 %115, %1
  br i1 %116, label %18, label %117

117:                                              ; preds = %113
  %118 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 25
  %119 = load i64, i64* %118, align 8
  %120 = icmp ugt i64 %119, %1
  br i1 %120, label %18, label %121

121:                                              ; preds = %117
  %122 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 26
  %123 = load i64, i64* %122, align 8
  %124 = icmp ugt i64 %123, %1
  br i1 %124, label %18, label %125

125:                                              ; preds = %121
  %126 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 27
  %127 = load i64, i64* %126, align 8
  %128 = icmp ugt i64 %127, %1
  br i1 %128, label %18, label %129

129:                                              ; preds = %125
  %130 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 28
  %131 = load i64, i64* %130, align 8
  %132 = icmp ugt i64 %131, %1
  br i1 %132, label %18, label %133

133:                                              ; preds = %129
  %134 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 29
  %135 = load i64, i64* %134, align 8
  %136 = icmp ugt i64 %135, %1
  br i1 %136, label %18, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 30
  %139 = load i64, i64* %138, align 8
  %140 = icmp ugt i64 %139, %1
  br i1 %140, label %18, label %141

141:                                              ; preds = %137
  %142 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 31
  %143 = load i64, i64* %142, align 8
  %144 = icmp ugt i64 %143, %1
  br i1 %144, label %18, label %145

145:                                              ; preds = %141
  %146 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 0, i64 0
  %147 = load i8*, i8** %146, align 8
  br label %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN16FragmentedWindow10CopyStringEjjRmm(%class.FragmentedWindow* nocapture readonly, i32, i32, i64* nocapture dereferenceable(8), i64) local_unnamed_addr #8 align 2 {
  %6 = load i64, i64* %3, align 8
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %25, label %8

8:                                                ; preds = %5
  %9 = zext i32 %2 to i64
  %10 = sub i64 %6, %9
  br label %11

11:                                               ; preds = %8, %11
  %12 = phi i64 [ %23, %11 ], [ %6, %8 ]
  %13 = phi i64 [ %16, %11 ], [ %10, %8 ]
  %14 = phi i32 [ %15, %11 ], [ %1, %8 ]
  %15 = add i32 %14, -1
  %16 = add i64 %13, 1
  %17 = and i64 %13, %4
  %18 = tail call dereferenceable(1) i8* @_ZN16FragmentedWindowixEm(%class.FragmentedWindow* %0, i64 %17)
  %19 = load i8, i8* %18, align 1
  %20 = tail call dereferenceable(1) i8* @_ZN16FragmentedWindowixEm(%class.FragmentedWindow* %0, i64 %12)
  store i8 %19, i8* %20, align 1
  %21 = load i64, i64* %3, align 8
  %22 = add i64 %21, 1
  %23 = and i64 %22, %4
  store i64 %23, i64* %3, align 8
  %24 = icmp eq i32 %15, 0
  br i1 %24, label %25, label %11

25:                                               ; preds = %11, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6Unpack14ReadFilterDataER8BitInput(%class.Unpack* nocapture readnone, %class.BitInput* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %1) #11
  %4 = lshr i32 %3, 14
  %5 = getelementptr inbounds %class.BitInput, %class.BitInput* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = add i32 %6, 2
  %8 = lshr i32 %7, 3
  %9 = getelementptr inbounds %class.BitInput, %class.BitInput* %1, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = add i32 %8, %10
  store i32 %11, i32* %9, align 8
  %12 = and i32 %7, 7
  store i32 %12, i32* %5, align 4
  br label %14

13:                                               ; preds = %14
  ret i32 %21

14:                                               ; preds = %2, %14
  %15 = phi i32 [ 0, %2 ], [ %28, %14 ]
  %16 = phi i32 [ 0, %2 ], [ %21, %14 ]
  %17 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %1) #11
  %18 = lshr i32 %17, 8
  %19 = shl i32 %15, 3
  %20 = shl i32 %18, %19
  %21 = add i32 %20, %16
  %22 = load i32, i32* %5, align 4
  %23 = add i32 %22, 8
  %24 = lshr i32 %23, 3
  %25 = load i32, i32* %9, align 8
  %26 = add i32 %24, %25
  store i32 %26, i32* %9, align 8
  %27 = and i32 %23, 7
  store i32 %27, i32* %5, align 4
  %28 = add nuw nsw i32 %15, 1
  %29 = icmp eq i32 %15, %4
  br i1 %29, label %13, label %14
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6Unpack11InitFiltersEv(%class.Unpack* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8, i32 1
  store i64 0, i64* %2, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN16FragmentedWindow8CopyDataEPhmm(%class.FragmentedWindow* nocapture readonly, i8* nocapture, i64, i64) local_unnamed_addr #8 align 2 {
  %5 = icmp eq i64 %3, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %7, %4
  ret void

7:                                                ; preds = %4, %7
  %8 = phi i64 [ %13, %7 ], [ 0, %4 ]
  %9 = add i64 %8, %2
  %10 = tail call dereferenceable(1) i8* @_ZN16FragmentedWindowixEm(%class.FragmentedWindow* %0, i64 %9)
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds i8, i8* %1, i64 %8
  store i8 %11, i8* %12, align 1
  %13 = add nuw i64 %8, 1
  %14 = icmp eq i64 %13, %3
  br i1 %14, label %6, label %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN6Unpack11ApplyFilterEPhjP12UnpackFilter(%class.Unpack*, i8*, i32, %struct.UnpackFilter* nocapture readonly) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %3, i64 0, i32 0
  %6 = load i8, i8* %5, align 4
  switch i8 %6, label %126 [
    i8 1, label %7
    i8 2, label %7
    i8 3, label %47
    i8 0, label %84
  ]

7:                                                ; preds = %4, %4
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 27
  %9 = load i64, i64* %8, align 8
  %10 = trunc i64 %9 to i32
  %11 = icmp eq i8 %6, 2
  %12 = select i1 %11, i32 233, i32 232
  %13 = icmp ugt i32 %2, 4
  br i1 %13, label %14, label %126

14:                                               ; preds = %7, %42
  %15 = phi i32 [ %44, %42 ], [ 0, %7 ]
  %16 = phi i8* [ %43, %42 ], [ %1, %7 ]
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  %18 = load i8, i8* %16, align 1
  %19 = add i32 %15, 1
  %20 = icmp eq i8 %18, -24
  %21 = zext i8 %18 to i32
  %22 = icmp eq i32 %12, %21
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %42

24:                                               ; preds = %14
  %25 = add i32 %19, %10
  %26 = and i32 %25, 16777215
  %27 = bitcast i8* %17 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %35

30:                                               ; preds = %24
  %31 = add nsw i32 %28, %26
  %32 = icmp sgt i32 %31, -1
  br i1 %32, label %33, label %39

33:                                               ; preds = %30
  %34 = add nsw i32 %28, 16777216
  store i32 %34, i32* %27, align 4
  br label %39

35:                                               ; preds = %24
  %36 = icmp slt i32 %28, 16777216
  br i1 %36, label %37, label %39

37:                                               ; preds = %35
  %38 = sub nsw i32 %28, %26
  store i32 %38, i32* %27, align 4
  br label %39

39:                                               ; preds = %35, %37, %30, %33
  %40 = getelementptr inbounds i8, i8* %16, i64 5
  %41 = add i32 %15, 5
  br label %42

42:                                               ; preds = %14, %39
  %43 = phi i8* [ %40, %39 ], [ %17, %14 ]
  %44 = phi i32 [ %41, %39 ], [ %19, %14 ]
  %45 = add i32 %44, 4
  %46 = icmp ult i32 %45, %2
  br i1 %46, label %14, label %126

47:                                               ; preds = %4
  %48 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 27
  %49 = load i64, i64* %48, align 8
  %50 = trunc i64 %49 to i32
  %51 = icmp ugt i32 %2, 3
  br i1 %51, label %52, label %126

52:                                               ; preds = %47, %80
  %53 = phi i32 [ %81, %80 ], [ 0, %47 ]
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %1, i64 %54
  %56 = getelementptr inbounds i8, i8* %55, i64 3
  %57 = load i8, i8* %56, align 1
  %58 = icmp eq i8 %57, -21
  br i1 %58, label %59, label %80

59:                                               ; preds = %52
  %60 = load i8, i8* %55, align 1
  %61 = zext i8 %60 to i32
  %62 = getelementptr inbounds i8, i8* %55, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = shl nuw nsw i32 %64, 8
  %66 = or i32 %65, %61
  %67 = getelementptr inbounds i8, i8* %55, i64 2
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = shl nuw nsw i32 %69, 16
  %71 = or i32 %66, %70
  %72 = add i32 %53, %50
  %73 = lshr i32 %72, 2
  %74 = sub nsw i32 %71, %73
  %75 = trunc i32 %74 to i8
  store i8 %75, i8* %55, align 1
  %76 = lshr i32 %74, 8
  %77 = trunc i32 %76 to i8
  store i8 %77, i8* %62, align 1
  %78 = lshr i32 %74, 16
  %79 = trunc i32 %78 to i8
  store i8 %79, i8* %67, align 1
  br label %80

80:                                               ; preds = %59, %52
  %81 = add i32 %53, 4
  %82 = or i32 %81, 3
  %83 = icmp ult i32 %82, %2
  br i1 %83, label %52, label %126

84:                                               ; preds = %4
  %85 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %3, i64 0, i32 3
  %86 = load i8, i8* %85, align 4
  %87 = zext i8 %86 to i32
  %88 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 7
  %89 = zext i32 %2 to i64
  %90 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 7, i32 2
  %91 = load i64, i64* %90, align 8
  %92 = icmp ult i64 %91, %89
  %93 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 7, i32 1
  br i1 %92, label %94, label %97

94:                                               ; preds = %84
  %95 = load i64, i64* %93, align 8
  %96 = sub i64 %89, %95
  tail call void @_ZN5ArrayIhE3AddEm(%class.Array* %88, i64 %96) #11
  br label %98

97:                                               ; preds = %84
  store i64 %89, i64* %93, align 8
  br label %98

98:                                               ; preds = %94, %97
  %99 = getelementptr inbounds %class.Array, %class.Array* %88, i64 0, i32 0
  %100 = load i8*, i8** %99, align 8
  %101 = icmp eq i8 %86, 0
  br i1 %101, label %126, label %102

102:                                              ; preds = %98, %106
  %103 = phi i32 [ %108, %106 ], [ 0, %98 ]
  %104 = phi i32 [ %107, %106 ], [ 0, %98 ]
  %105 = icmp ult i32 %103, %2
  br i1 %105, label %110, label %106

106:                                              ; preds = %110, %102
  %107 = phi i32 [ %104, %102 ], [ %114, %110 ]
  %108 = add nuw nsw i32 %103, 1
  %109 = icmp eq i32 %108, %87
  br i1 %109, label %126, label %102

110:                                              ; preds = %102, %110
  %111 = phi i32 [ %124, %110 ], [ %103, %102 ]
  %112 = phi i32 [ %120, %110 ], [ 0, %102 ]
  %113 = phi i32 [ %114, %110 ], [ %104, %102 ]
  %114 = add i32 %113, 1
  %115 = zext i32 %113 to i64
  %116 = getelementptr inbounds i8, i8* %1, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = and i32 %112, 255
  %120 = sub nsw i32 %119, %118
  %121 = trunc i32 %120 to i8
  %122 = zext i32 %111 to i64
  %123 = getelementptr inbounds i8, i8* %100, i64 %122
  store i8 %121, i8* %123, align 1
  %124 = add i32 %111, %87
  %125 = icmp ult i32 %124, %2
  br i1 %125, label %110, label %106

126:                                              ; preds = %106, %80, %42, %98, %47, %7, %4
  %127 = phi i8* [ null, %4 ], [ %1, %7 ], [ %1, %47 ], [ %100, %98 ], [ %1, %42 ], [ %1, %80 ], [ %100, %106 ]
  ret i8* %127
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN16FragmentedWindow12GetBlockSizeEmm(%class.FragmentedWindow* nocapture readonly, i64, i64) local_unnamed_addr #10 align 2 {
  %4 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %1
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp ugt i64 %9, %1
  br i1 %10, label %11, label %18

11:                                               ; preds = %134, %130, %126, %122, %118, %114, %110, %106, %102, %98, %94, %90, %86, %82, %78, %74, %70, %66, %62, %58, %54, %50, %46, %42, %38, %34, %30, %26, %22, %18, %7, %3
  %12 = phi i64 [ %5, %3 ], [ %9, %7 ], [ %20, %18 ], [ %24, %22 ], [ %28, %26 ], [ %32, %30 ], [ %36, %34 ], [ %40, %38 ], [ %44, %42 ], [ %48, %46 ], [ %52, %50 ], [ %56, %54 ], [ %60, %58 ], [ %64, %62 ], [ %68, %66 ], [ %72, %70 ], [ %76, %74 ], [ %80, %78 ], [ %84, %82 ], [ %88, %86 ], [ %92, %90 ], [ %96, %94 ], [ %100, %98 ], [ %104, %102 ], [ %108, %106 ], [ %112, %110 ], [ %116, %114 ], [ %120, %118 ], [ %124, %122 ], [ %128, %126 ], [ %132, %130 ], [ %136, %134 ]
  %13 = sub i64 %12, %1
  %14 = icmp ult i64 %13, %2
  %15 = select i1 %14, i64 %13, i64 %2
  br label %16

16:                                               ; preds = %134, %11
  %17 = phi i64 [ %15, %11 ], [ 0, %134 ]
  ret i64 %17

18:                                               ; preds = %7
  %19 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 2
  %20 = load i64, i64* %19, align 8
  %21 = icmp ugt i64 %20, %1
  br i1 %21, label %11, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 3
  %24 = load i64, i64* %23, align 8
  %25 = icmp ugt i64 %24, %1
  br i1 %25, label %11, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 4
  %28 = load i64, i64* %27, align 8
  %29 = icmp ugt i64 %28, %1
  br i1 %29, label %11, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 5
  %32 = load i64, i64* %31, align 8
  %33 = icmp ugt i64 %32, %1
  br i1 %33, label %11, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 6
  %36 = load i64, i64* %35, align 8
  %37 = icmp ugt i64 %36, %1
  br i1 %37, label %11, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 7
  %40 = load i64, i64* %39, align 8
  %41 = icmp ugt i64 %40, %1
  br i1 %41, label %11, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 8
  %44 = load i64, i64* %43, align 8
  %45 = icmp ugt i64 %44, %1
  br i1 %45, label %11, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 9
  %48 = load i64, i64* %47, align 8
  %49 = icmp ugt i64 %48, %1
  br i1 %49, label %11, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 10
  %52 = load i64, i64* %51, align 8
  %53 = icmp ugt i64 %52, %1
  br i1 %53, label %11, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 11
  %56 = load i64, i64* %55, align 8
  %57 = icmp ugt i64 %56, %1
  br i1 %57, label %11, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 12
  %60 = load i64, i64* %59, align 8
  %61 = icmp ugt i64 %60, %1
  br i1 %61, label %11, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 13
  %64 = load i64, i64* %63, align 8
  %65 = icmp ugt i64 %64, %1
  br i1 %65, label %11, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 14
  %68 = load i64, i64* %67, align 8
  %69 = icmp ugt i64 %68, %1
  br i1 %69, label %11, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 15
  %72 = load i64, i64* %71, align 8
  %73 = icmp ugt i64 %72, %1
  br i1 %73, label %11, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 16
  %76 = load i64, i64* %75, align 8
  %77 = icmp ugt i64 %76, %1
  br i1 %77, label %11, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 17
  %80 = load i64, i64* %79, align 8
  %81 = icmp ugt i64 %80, %1
  br i1 %81, label %11, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 18
  %84 = load i64, i64* %83, align 8
  %85 = icmp ugt i64 %84, %1
  br i1 %85, label %11, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 19
  %88 = load i64, i64* %87, align 8
  %89 = icmp ugt i64 %88, %1
  br i1 %89, label %11, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 20
  %92 = load i64, i64* %91, align 8
  %93 = icmp ugt i64 %92, %1
  br i1 %93, label %11, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 21
  %96 = load i64, i64* %95, align 8
  %97 = icmp ugt i64 %96, %1
  br i1 %97, label %11, label %98

98:                                               ; preds = %94
  %99 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 22
  %100 = load i64, i64* %99, align 8
  %101 = icmp ugt i64 %100, %1
  br i1 %101, label %11, label %102

102:                                              ; preds = %98
  %103 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 23
  %104 = load i64, i64* %103, align 8
  %105 = icmp ugt i64 %104, %1
  br i1 %105, label %11, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 24
  %108 = load i64, i64* %107, align 8
  %109 = icmp ugt i64 %108, %1
  br i1 %109, label %11, label %110

110:                                              ; preds = %106
  %111 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 25
  %112 = load i64, i64* %111, align 8
  %113 = icmp ugt i64 %112, %1
  br i1 %113, label %11, label %114

114:                                              ; preds = %110
  %115 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 26
  %116 = load i64, i64* %115, align 8
  %117 = icmp ugt i64 %116, %1
  br i1 %117, label %11, label %118

118:                                              ; preds = %114
  %119 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 27
  %120 = load i64, i64* %119, align 8
  %121 = icmp ugt i64 %120, %1
  br i1 %121, label %11, label %122

122:                                              ; preds = %118
  %123 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 28
  %124 = load i64, i64* %123, align 8
  %125 = icmp ugt i64 %124, %1
  br i1 %125, label %11, label %126

126:                                              ; preds = %122
  %127 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 29
  %128 = load i64, i64* %127, align 8
  %129 = icmp ugt i64 %128, %1
  br i1 %129, label %11, label %130

130:                                              ; preds = %126
  %131 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 30
  %132 = load i64, i64* %131, align 8
  %133 = icmp ugt i64 %132, %1
  br i1 %133, label %11, label %134

134:                                              ; preds = %130
  %135 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 31
  %136 = load i64, i64* %135, align 8
  %137 = icmp ugt i64 %136, %1
  br i1 %137, label %11, label %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack12UnpWriteDataEPhm(%class.Unpack* nocapture, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 27
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 23
  %7 = load i64, i64* %6, align 8
  %8 = icmp sgt i64 %7, %5
  br i1 %8, label %9, label %17

9:                                                ; preds = %3
  %10 = sub nsw i64 %7, %5
  %11 = icmp slt i64 %10, %2
  %12 = select i1 %11, i64 %10, i64 %2
  %13 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  %14 = load %class.ComprDataIO*, %class.ComprDataIO** %13, align 8
  tail call void @_ZN11ComprDataIO8UnpWriteEPhm(%class.ComprDataIO* %14, i8* %1, i64 %12) #11
  %15 = load i64, i64* %4, align 8
  %16 = add i64 %15, %2
  store i64 %16, i64* %4, align 8
  br label %17

17:                                               ; preds = %3, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6Unpack13UnpInitData50Eb(%class.Unpack* nocapture, i1 zeroext) local_unnamed_addr #2 align 2 {
  br i1 %1, label %5, label %3

3:                                                ; preds = %2
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 65
  store i8 0, i8* %4, align 2
  br label %5

5:                                                ; preds = %3, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16FragmentedWindowC2Ev(%class.FragmentedWindow* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %class.FragmentedWindow* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 512, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16FragmentedWindowD2Ev(%class.FragmentedWindow* nocapture) unnamed_addr #0 align 2 {
  br label %2

2:                                                ; preds = %8, %1
  %3 = phi i64 [ 0, %1 ], [ %9, %8 ]
  %4 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 0, i64 %3
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %2
  tail call void @free(i8* nonnull %5) #11
  store i8* null, i8** %4, align 8
  br label %8

8:                                                ; preds = %7, %2
  %9 = add nuw nsw i64 %3, 1
  %10 = icmp eq i64 %9, 32
  br i1 %10, label %11, label %2

11:                                               ; preds = %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16FragmentedWindow5ResetEv(%class.FragmentedWindow* nocapture) local_unnamed_addr #0 align 2 {
  br label %3

2:                                                ; preds = %9
  ret void

3:                                                ; preds = %9, %1
  %4 = phi i64 [ 0, %1 ], [ %10, %9 ]
  %5 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 0, i64 %4
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %3
  tail call void @free(i8* nonnull %6) #11
  store i8* null, i8** %5, align 8
  br label %9

9:                                                ; preds = %3, %8
  %10 = add nuw nsw i64 %4, 1
  %11 = icmp eq i64 %10, 32
  br i1 %11, label %2, label %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16FragmentedWindow4InitEm(%class.FragmentedWindow* nocapture, i64) local_unnamed_addr #0 align 2 {
  br label %3

3:                                                ; preds = %9, %2
  %4 = phi i64 [ 0, %2 ], [ %10, %9 ]
  %5 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 0, i64 %4
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %3
  tail call void @free(i8* nonnull %6) #11
  store i8* null, i8** %5, align 8
  br label %9

9:                                                ; preds = %8, %3
  %10 = add nuw nsw i64 %4, 1
  %11 = icmp eq i64 %10, 32
  br i1 %11, label %12, label %3

12:                                               ; preds = %9
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %45, label %14

14:                                               ; preds = %12, %33
  %15 = phi i64 [ %39, %33 ], [ 0, %12 ]
  %16 = phi i64 [ %37, %33 ], [ 0, %12 ]
  %17 = sub i64 %1, %16
  %18 = sub nuw nsw i64 32, %15
  %19 = udiv i64 %17, %18
  %20 = icmp ugt i64 %19, 4194304
  %21 = select i1 %20, i64 %19, i64 4194304
  %22 = icmp ult i64 %17, %21
  br i1 %22, label %31, label %23

23:                                               ; preds = %14, %27
  %24 = phi i64 [ %29, %27 ], [ %17, %14 ]
  %25 = tail call noalias i8* @malloc(i64 %24) #11
  %26 = icmp eq i8* %25, null
  br i1 %26, label %27, label %33

27:                                               ; preds = %23
  %28 = lshr i64 %24, 5
  %29 = sub i64 %24, %28
  %30 = icmp ult i64 %29, %21
  br i1 %30, label %31, label %23

31:                                               ; preds = %27, %14
  %32 = phi i64 [ %17, %14 ], [ %29, %27 ]
  tail call void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64 %32) #11
  br label %33

33:                                               ; preds = %23, %31
  %34 = phi i64 [ %32, %31 ], [ %24, %23 ]
  %35 = phi i8* [ null, %31 ], [ %25, %23 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false)
  %36 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 0, i64 %15
  store i8* %35, i8** %36, align 8
  %37 = add i64 %34, %16
  %38 = getelementptr inbounds %class.FragmentedWindow, %class.FragmentedWindow* %0, i64 0, i32 1, i64 %15
  store i64 %37, i64* %38, align 8
  %39 = add nuw nsw i64 %15, 1
  %40 = icmp ult i64 %37, %1
  %41 = icmp ult i64 %39, 32
  %42 = and i1 %41, %40
  br i1 %42, label %14, label %43

43:                                               ; preds = %33
  br i1 %40, label %44, label %45

44:                                               ; preds = %43
  tail call void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64 %1) #11
  br label %45

45:                                               ; preds = %12, %44, %43
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6UnpackC2EP11ComprDataIO(%class.Unpack*, %class.ComprDataIO*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1
  tail call void @_ZN8BitInputC1Eb(%class.BitInput* %3, i1 zeroext true) #11
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 6
  %5 = bitcast %class.Array* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 33, i1 false) #11
  %6 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 7
  %7 = bitcast %class.Array* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 33, i1 false) #11
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8
  %9 = bitcast %class.Array.5* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 33, i1 false) #11
  %10 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 21
  %11 = bitcast %class.FragmentedWindow* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 512, i1 false) #11
  %12 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 59, i32 25, i32 0
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 59, i32 4
  %14 = bitcast %struct.RARPPM_CONTEXT** %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #11
  %15 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 66
  tail call void @_ZN5RarVMC1Ev(%class.RarVM* %15) #11
  %16 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 67
  tail call void @_ZN8BitInputC1Eb(%class.BitInput* %16, i1 zeroext true) #11
  %17 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68
  %18 = bitcast %class.Array.8* %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 33, i1 false) #11
  %19 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69
  %20 = bitcast %class.Array.8* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 33, i1 false) #11
  %21 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 70
  %22 = bitcast %class.Array.10* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 33, i1 false) #11
  %23 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 0
  store %class.ComprDataIO* %1, %class.ComprDataIO** %23, align 8
  %24 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  store i8* null, i8** %24, align 8
  %25 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 22
  store i8 0, i8* %25, align 8
  %26 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 24
  store i8 0, i8* %26, align 8
  %27 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 25
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 26
  store i8 0, i8* %28, align 2
  %29 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 4
  store i32 1, i32* %29, align 8
  %30 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 2
  %31 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 5
  store i8* null, i8** %31, align 8
  %32 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 72
  %33 = bitcast %class.ThreadPool** %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 16, i1 false)
  %34 = bitcast i64* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 16, i1 false)
  tail call void @_ZN6Unpack11UnpInitDataEb(%class.Unpack* %0, i1 zeroext false)
  %35 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 38
  %36 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 37
  %37 = bitcast i32* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %37, i8 0, i64 24, i1 false) #11
  store i32 13568, i32* %36, align 8
  %38 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 46
  %39 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> <i32 0, i32 128, i32 128, i32 8193>, <4 x i32>* %39, align 4
  %40 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 36
  store i32 0, i32* %40, align 4
  %41 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 44
  store i32 0, i32* %41, align 4
  %42 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 45
  store i32 0, i32* %42, align 8
  %43 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 15
  store i32 0, i32* %43, align 8
  br label %44

44:                                               ; preds = %44, %2
  %45 = phi i64 [ 0, %2 ], [ %69, %44 ]
  %46 = phi <8 x i16> [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>, %2 ], [ %70, %44 ]
  %47 = shl <8 x i16> %46, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %48 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 31, i64 %45
  %49 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> %47, <8 x i16>* %49, align 2
  %50 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 29, i64 %45
  %51 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> %47, <8 x i16>* %51, align 2
  %52 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 30, i64 %45
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %46, <8 x i16>* %53, align 2
  %54 = sub <8 x i16> zeroinitializer, %47
  %55 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 32, i64 %45
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %56, align 2
  %57 = or i64 %45, 8
  %58 = add <8 x i16> %46, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %59 = shl <8 x i16> %58, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %60 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 31, i64 %57
  %61 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %61, align 2
  %62 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 29, i64 %57
  %63 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %63, align 2
  %64 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 30, i64 %57
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %65, align 2
  %66 = sub <8 x i16> zeroinitializer, %59
  %67 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 32, i64 %57
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %68, align 2
  %69 = add nuw nsw i64 %45, 16
  %70 = add <8 x i16> %46, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %71 = icmp eq i64 %69, 256
  br i1 %71, label %72, label %44, !llvm.loop !58

72:                                               ; preds = %44
  %73 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 33, i64 0
  %74 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 34, i64 0
  %75 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 31, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %73, i8 0, i64 768, i1 false) #11
  tail call void @_ZN6Unpack8CorrHuffEPtPh(%class.Unpack* undef, i16* %75, i8* %74) #11
  ret void
}

declare void @_ZN8BitInputC1Eb(%class.BitInput*, i1 zeroext) unnamed_addr #5

declare void @_ZN5RarVMC1Ev(%class.RarVM*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6UnpackD2Ev(%class.Unpack*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 70, i32 1
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 71
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68, i32 0
  br label %13

9:                                                ; preds = %23, %1
  store i64 0, i64* %4, align 8
  %10 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %43, label %27

13:                                               ; preds = %23, %7
  %14 = phi i64 [ %5, %7 ], [ %24, %23 ]
  %15 = phi i64 [ 0, %7 ], [ %25, %23 ]
  %16 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %8, align 8
  %17 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %16, i64 %15
  %18 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %17, align 8
  %19 = icmp eq %struct.UnpackFilter30* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %13
  %21 = bitcast %struct.UnpackFilter30* %18 to i8*
  tail call void @_ZdlPv(i8* %21) #12
  %22 = load i64, i64* %4, align 8
  br label %23

23:                                               ; preds = %20, %13
  %24 = phi i64 [ %14, %13 ], [ %22, %20 ]
  %25 = add nuw i64 %15, 1
  %26 = icmp ult i64 %25, %24
  br i1 %26, label %13, label %9

27:                                               ; preds = %9
  %28 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69, i32 0
  br label %29

29:                                               ; preds = %39, %27
  %30 = phi i64 [ %11, %27 ], [ %40, %39 ]
  %31 = phi i64 [ 0, %27 ], [ %41, %39 ]
  %32 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %28, align 8
  %33 = getelementptr inbounds %struct.UnpackFilter30*, %struct.UnpackFilter30** %32, i64 %31
  %34 = load %struct.UnpackFilter30*, %struct.UnpackFilter30** %33, align 8
  %35 = icmp eq %struct.UnpackFilter30* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %29
  %37 = bitcast %struct.UnpackFilter30* %34 to i8*
  tail call void @_ZdlPv(i8* %37) #12
  %38 = load i64, i64* %10, align 8
  br label %39

39:                                               ; preds = %36, %29
  %40 = phi i64 [ %30, %29 ], [ %38, %36 ]
  %41 = add nuw i64 %31, 1
  %42 = icmp ult i64 %41, %40
  br i1 %42, label %29, label %43

43:                                               ; preds = %39, %9
  store i64 0, i64* %10, align 8
  %44 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %45 = load i8*, i8** %44, align 8
  %46 = icmp eq i8* %45, null
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  tail call void @free(i8* nonnull %45) #11
  br label %48

48:                                               ; preds = %43, %47
  %49 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 2
  %50 = load %class.ThreadPool*, %class.ThreadPool** %49, align 8
  %51 = icmp eq %class.ThreadPool* %50, null
  br i1 %51, label %54, label %52

52:                                               ; preds = %48
  tail call void @_ZN10ThreadPoolD1Ev(%class.ThreadPool* nonnull %50) #11
  %53 = bitcast %class.ThreadPool* %50 to i8*
  tail call void @_ZdlPv(i8* %53) #12
  br label %54

54:                                               ; preds = %52, %48
  %55 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 5
  %56 = load i8*, i8** %55, align 8
  %57 = icmp eq i8* %56, null
  br i1 %57, label %59, label %58

58:                                               ; preds = %54
  tail call void @_ZdaPv(i8* nonnull %56) #12
  br label %59

59:                                               ; preds = %58, %54
  %60 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 3
  %61 = load %struct.UnpackThreadData*, %struct.UnpackThreadData** %60, align 8
  %62 = icmp eq %struct.UnpackThreadData* %61, null
  br i1 %62, label %83, label %63

63:                                               ; preds = %59
  %64 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %61, i64 -1, i32 16
  %65 = bitcast i32* %64 to i8*
  %66 = bitcast i32* %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %82, label %69

69:                                               ; preds = %63
  %70 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %61, i64 %67
  br label %71

71:                                               ; preds = %69, %79
  %72 = phi %struct.UnpackThreadData* [ %73, %79 ], [ %70, %69 ]
  %73 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %72, i64 -1
  %74 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %72, i64 -1, i32 13
  %75 = load %struct.UnpackDecodedItem*, %struct.UnpackDecodedItem** %74, align 8
  %76 = icmp eq %struct.UnpackDecodedItem* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %71
  %78 = bitcast %struct.UnpackDecodedItem* %75 to i8*
  tail call void @free(i8* %78) #11
  br label %79

79:                                               ; preds = %71, %77
  %80 = getelementptr inbounds %struct.UnpackThreadData, %struct.UnpackThreadData* %72, i64 -1, i32 1
  tail call void @_ZN8BitInputD1Ev(%class.BitInput* %80) #11
  %81 = icmp eq %struct.UnpackThreadData* %73, %61
  br i1 %81, label %82, label %71

82:                                               ; preds = %79, %63
  tail call void @_ZdaPv(i8* %65) #12
  br label %83

83:                                               ; preds = %82, %59
  %84 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 70
  %85 = getelementptr inbounds %class.Array.10, %class.Array.10* %84, i64 0, i32 0
  %86 = load i32*, i32** %85, align 8
  %87 = icmp eq i32* %86, null
  %88 = bitcast i32* %86 to i8*
  br i1 %87, label %101, label %89

89:                                               ; preds = %83
  %90 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 70, i32 4
  %91 = load i8, i8* %90, align 8, !range !5
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %99, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 70, i32 2
  %95 = load i64, i64* %94, align 8
  %96 = shl i64 %95, 2
  tail call void @_Z9cleandataPvm(i8* nonnull %88, i64 %96) #11
  %97 = bitcast %class.Array.10* %84 to i8**
  %98 = load i8*, i8** %97, align 8
  br label %99

99:                                               ; preds = %93, %89
  %100 = phi i8* [ %98, %93 ], [ %88, %89 ]
  tail call void @free(i8* %100) #11
  br label %101

101:                                              ; preds = %83, %99
  %102 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69
  %103 = getelementptr inbounds %class.Array.8, %class.Array.8* %102, i64 0, i32 0
  %104 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %103, align 8
  %105 = icmp eq %struct.UnpackFilter30** %104, null
  %106 = bitcast %struct.UnpackFilter30** %104 to i8*
  br i1 %105, label %119, label %107

107:                                              ; preds = %101
  %108 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69, i32 4
  %109 = load i8, i8* %108, align 8, !range !5
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %117, label %111

111:                                              ; preds = %107
  %112 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 69, i32 2
  %113 = load i64, i64* %112, align 8
  %114 = shl i64 %113, 3
  tail call void @_Z9cleandataPvm(i8* nonnull %106, i64 %114) #11
  %115 = bitcast %class.Array.8* %102 to i8**
  %116 = load i8*, i8** %115, align 8
  br label %117

117:                                              ; preds = %111, %107
  %118 = phi i8* [ %116, %111 ], [ %106, %107 ]
  tail call void @free(i8* %118) #11
  br label %119

119:                                              ; preds = %101, %117
  %120 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68
  %121 = getelementptr inbounds %class.Array.8, %class.Array.8* %120, i64 0, i32 0
  %122 = load %struct.UnpackFilter30**, %struct.UnpackFilter30*** %121, align 8
  %123 = icmp eq %struct.UnpackFilter30** %122, null
  %124 = bitcast %struct.UnpackFilter30** %122 to i8*
  br i1 %123, label %137, label %125

125:                                              ; preds = %119
  %126 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68, i32 4
  %127 = load i8, i8* %126, align 8, !range !5
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %135, label %129

129:                                              ; preds = %125
  %130 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 68, i32 2
  %131 = load i64, i64* %130, align 8
  %132 = shl i64 %131, 3
  tail call void @_Z9cleandataPvm(i8* nonnull %124, i64 %132) #11
  %133 = bitcast %class.Array.8* %120 to i8**
  %134 = load i8*, i8** %133, align 8
  br label %135

135:                                              ; preds = %129, %125
  %136 = phi i8* [ %134, %129 ], [ %124, %125 ]
  tail call void @free(i8* %136) #11
  br label %137

137:                                              ; preds = %119, %135
  %138 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 67
  tail call void @_ZN8BitInputD1Ev(%class.BitInput* %138) #11
  %139 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 66
  tail call void @_ZN5RarVMD1Ev(%class.RarVM* %139) #11
  %140 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 59, i32 25, i32 0
  %141 = load i64, i64* %140, align 8
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %146, label %143

143:                                              ; preds = %137
  store i64 0, i64* %140, align 8
  %144 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 59, i32 25, i32 4
  %145 = load i8*, i8** %144, align 8
  tail call void @free(i8* %145) #11
  br label %146

146:                                              ; preds = %137, %143
  br label %147

147:                                              ; preds = %146, %153
  %148 = phi i64 [ %154, %153 ], [ 0, %146 ]
  %149 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 21, i32 0, i64 %148
  %150 = load i8*, i8** %149, align 8
  %151 = icmp eq i8* %150, null
  br i1 %151, label %153, label %152

152:                                              ; preds = %147
  tail call void @free(i8* nonnull %150) #11
  store i8* null, i8** %149, align 8
  br label %153

153:                                              ; preds = %152, %147
  %154 = add nuw nsw i64 %148, 1
  %155 = icmp eq i64 %154, 32
  br i1 %155, label %156, label %147

156:                                              ; preds = %153
  %157 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8
  %158 = getelementptr inbounds %class.Array.5, %class.Array.5* %157, i64 0, i32 0
  %159 = load %struct.UnpackFilter*, %struct.UnpackFilter** %158, align 8
  %160 = icmp eq %struct.UnpackFilter* %159, null
  br i1 %160, label %174, label %161

161:                                              ; preds = %156
  %162 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %159, i64 0, i32 0
  %163 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8, i32 4
  %164 = load i8, i8* %163, align 8, !range !5
  %165 = icmp eq i8 %164, 0
  br i1 %165, label %172, label %166

166:                                              ; preds = %161
  %167 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 8, i32 2
  %168 = load i64, i64* %167, align 8
  %169 = shl i64 %168, 4
  tail call void @_Z9cleandataPvm(i8* %162, i64 %169) #11
  %170 = bitcast %class.Array.5* %157 to i8**
  %171 = load i8*, i8** %170, align 8
  br label %172

172:                                              ; preds = %166, %161
  %173 = phi i8* [ %171, %166 ], [ %162, %161 ]
  tail call void @free(i8* %173) #11
  br label %174

174:                                              ; preds = %156, %172
  %175 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 7, i32 0
  %176 = load i8*, i8** %175, align 8
  %177 = icmp eq i8* %176, null
  br i1 %177, label %188, label %178

178:                                              ; preds = %174
  %179 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 7, i32 4
  %180 = load i8, i8* %179, align 8, !range !5
  %181 = icmp eq i8 %180, 0
  br i1 %181, label %186, label %182

182:                                              ; preds = %178
  %183 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 7, i32 2
  %184 = load i64, i64* %183, align 8
  tail call void @_Z9cleandataPvm(i8* nonnull %176, i64 %184) #11
  %185 = load i8*, i8** %175, align 8
  br label %186

186:                                              ; preds = %182, %178
  %187 = phi i8* [ %176, %178 ], [ %185, %182 ]
  tail call void @free(i8* %187) #11
  br label %188

188:                                              ; preds = %174, %186
  %189 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 6, i32 0
  %190 = load i8*, i8** %189, align 8
  %191 = icmp eq i8* %190, null
  br i1 %191, label %202, label %192

192:                                              ; preds = %188
  %193 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 6, i32 4
  %194 = load i8, i8* %193, align 8, !range !5
  %195 = icmp eq i8 %194, 0
  br i1 %195, label %200, label %196

196:                                              ; preds = %192
  %197 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 6, i32 2
  %198 = load i64, i64* %197, align 8
  tail call void @_Z9cleandataPvm(i8* nonnull %190, i64 %198) #11
  %199 = load i8*, i8** %189, align 8
  br label %200

200:                                              ; preds = %196, %192
  %201 = phi i8* [ %190, %192 ], [ %199, %196 ]
  tail call void @free(i8* %201) #11
  br label %202

202:                                              ; preds = %188, %200
  %203 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 1
  tail call void @_ZN8BitInputD1Ev(%class.BitInput* %203) #11
  ret void
}

; Function Attrs: nounwind
declare void @_ZN10ThreadPoolD1Ev(%class.ThreadPool*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind
declare void @_ZN8BitInputD1Ev(%class.BitInput*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN5RarVMD1Ev(%class.RarVM*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack10SetThreadsEj(%class.Unpack* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = icmp ult i32 %1, 8
  %4 = select i1 %3, i32 %1, i32 8
  %5 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 4
  store i32 %4, i32* %5, align 8
  %6 = tail call i8* @_Znwm(i64 1792) #12
  %7 = bitcast i8* %6 to %class.ThreadPool*
  tail call void @_ZN10ThreadPoolC1Ej(%class.ThreadPool* nonnull %7, i32 %4) #11
  %8 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 2
  %9 = bitcast %class.ThreadPool** %8 to i8**
  store i8* %6, i8** %9, align 8
  ret void
}

declare void @_ZN10ThreadPoolC1Ej(%class.ThreadPool*, i32) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack4InitEmb(%class.Unpack* nocapture, i64, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %5, label %6

5:                                                ; preds = %3
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  br label %6

6:                                                ; preds = %5, %3
  %7 = icmp ugt i64 %1, 262144
  %8 = select i1 %7, i64 %1, i64 262144
  %9 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 72
  %10 = load i64, i64* %9, align 8
  %11 = icmp ule i64 %8, %10
  %12 = icmp ugt i64 %8, 4295032831
  %13 = or i1 %12, %11
  br i1 %13, label %79, label %14

14:                                               ; preds = %6
  br i1 %2, label %15, label %23

15:                                               ; preds = %14
  %16 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %17 = load i8*, i8** %16, align 8
  %18 = icmp ne i8* %17, null
  %19 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 22
  %20 = load i8, i8* %19, align 8, !range !5
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %23, label %22

22:                                               ; preds = %15
  tail call void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64 0) #11
  br label %23

23:                                               ; preds = %15, %14, %22
  %24 = phi i1 [ true, %22 ], [ false, %14 ], [ %18, %15 ]
  %25 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 22
  %26 = load i8, i8* %25, align 8, !range !5
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %23
  %29 = tail call noalias i8* @malloc(i64 %8) #11
  %30 = icmp eq i8* %29, null
  br i1 %30, label %32, label %31

31:                                               ; preds = %28
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %29, i8 0, i64 %8, i1 false)
  br i1 %24, label %46, label %69

32:                                               ; preds = %23, %28
  %33 = icmp ult i64 %8, 16777216
  %34 = or i1 %33, %24
  br i1 %34, label %42, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %37 = load i8*, i8** %36, align 8
  %38 = icmp eq i8* %37, null
  br i1 %38, label %40, label %39

39:                                               ; preds = %35
  tail call void @free(i8* nonnull %37) #11
  store i8* null, i8** %36, align 8
  br label %40

40:                                               ; preds = %39, %35
  %41 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 21
  tail call void @_ZN16FragmentedWindow4InitEm(%class.FragmentedWindow* %41, i64 %8)
  store i8 1, i8* %25, align 8
  br label %76

42:                                               ; preds = %32
  tail call void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64 %8) #11
  %43 = load i8, i8* %25, align 8
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %76

45:                                               ; preds = %42
  tail call void @llvm.memset.p0i8.i64(i8* align 536870912 null, i8 0, i64 %8, i1 false)
  br i1 %24, label %46, label %69

46:                                               ; preds = %45, %31
  %47 = phi i8* [ %29, %31 ], [ null, %45 ]
  %48 = load i64, i64* %9, align 8
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %69, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %52 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 13
  %53 = add nsw i64 %8, -1
  br label %54

54:                                               ; preds = %50, %54
  %55 = phi i64 [ %48, %50 ], [ %67, %54 ]
  %56 = phi i64 [ 1, %50 ], [ %66, %54 ]
  %57 = load i8*, i8** %51, align 8
  %58 = load i64, i64* %52, align 8
  %59 = sub i64 %58, %56
  %60 = add i64 %55, -1
  %61 = and i64 %59, %60
  %62 = getelementptr inbounds i8, i8* %57, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = and i64 %59, %53
  %65 = getelementptr inbounds i8, i8* %47, i64 %64
  store i8 %63, i8* %65, align 1
  %66 = add i64 %56, 1
  %67 = load i64, i64* %9, align 8
  %68 = icmp ugt i64 %66, %67
  br i1 %68, label %69, label %54

69:                                               ; preds = %54, %46, %31, %45
  %70 = phi i8* [ null, %45 ], [ %29, %31 ], [ %47, %46 ], [ %47, %54 ]
  %71 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 20
  %72 = load i8*, i8** %71, align 8
  %73 = icmp eq i8* %72, null
  br i1 %73, label %75, label %74

74:                                               ; preds = %69
  tail call void @free(i8* nonnull %72) #11
  br label %75

75:                                               ; preds = %69, %74
  store i8* %70, i8** %71, align 8
  br label %76

76:                                               ; preds = %40, %42, %75
  store i64 %8, i64* %9, align 8
  %77 = add i64 %8, -1
  %78 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 73
  store i64 %77, i64* %78, align 8
  br label %79

79:                                               ; preds = %6, %76
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6Unpack8DoUnpackEjb(%class.Unpack*, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  switch i32 %1, label %29 [
    i32 15, label %4
    i32 20, label %9
    i32 26, label %9
    i32 29, label %14
    i32 50, label %19
  ]

4:                                                ; preds = %3
  %5 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 22
  %6 = load i8, i8* %5, align 8, !range !5
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %29

8:                                                ; preds = %4
  tail call void @_ZN6Unpack8Unpack15Eb(%class.Unpack* %0, i1 zeroext %2)
  br label %29

9:                                                ; preds = %3, %3
  %10 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 22
  %11 = load i8, i8* %10, align 8, !range !5
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %29

13:                                               ; preds = %9
  tail call void @_ZN6Unpack8Unpack20Eb(%class.Unpack* %0, i1 zeroext %2)
  br label %29

14:                                               ; preds = %3
  %15 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 22
  %16 = load i8, i8* %15, align 8, !range !5
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %29

18:                                               ; preds = %14
  tail call void @_ZN6Unpack8Unpack29Eb(%class.Unpack* %0, i1 zeroext %2)
  br label %29

19:                                               ; preds = %3
  %20 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 4
  %21 = load i32, i32* %20, align 8
  %22 = icmp ugt i32 %21, 1
  br i1 %22, label %23, label %28

23:                                               ; preds = %19
  %24 = getelementptr inbounds %class.Unpack, %class.Unpack* %0, i64 0, i32 22
  %25 = load i8, i8* %24, align 8, !range !5
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  tail call void @_ZN6Unpack9Unpack5MTEb(%class.Unpack* %0, i1 zeroext %2)
  br label %29

28:                                               ; preds = %23, %19
  tail call void @_ZN6Unpack7Unpack5Eb(%class.Unpack* %0, i1 zeroext %2)
  br label %29

29:                                               ; preds = %4, %9, %14, %18, %13, %8, %3, %28, %27
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %struct.RARPPM_CONTEXT* @_ZN8ModelPPM16CreateSuccessorsEbP12RARPPM_STATE(%class.ModelPPM*, i1 zeroext, %struct.RARPPM_STATE*) local_unnamed_addr #6 comdat align 2 {
  %4 = alloca [64 x %struct.RARPPM_STATE*], align 16
  %5 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 4
  %6 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %5, align 8
  %7 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 7
  %8 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %7, align 8
  %9 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %8, i64 0, i32 2
  %10 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %9, align 1
  %11 = bitcast [64 x %struct.RARPPM_STATE*]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %11) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 512, i1 false)
  %12 = getelementptr inbounds [64 x %struct.RARPPM_STATE*], [64 x %struct.RARPPM_STATE*]* %4, i64 0, i64 0
  br i1 %1, label %20, label %13

13:                                               ; preds = %3
  %14 = ptrtoint %struct.RARPPM_STATE* %8 to i64
  %15 = getelementptr inbounds [64 x %struct.RARPPM_STATE*], [64 x %struct.RARPPM_STATE*]* %4, i64 0, i64 1
  %16 = bitcast [64 x %struct.RARPPM_STATE*]* %4 to i64*
  store i64 %14, i64* %16, align 16
  %17 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %6, i64 0, i32 2
  %18 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %17, align 1
  %19 = icmp eq %struct.RARPPM_CONTEXT* %18, null
  br i1 %19, label %68, label %20

20:                                               ; preds = %13, %3
  %21 = phi %struct.RARPPM_STATE** [ %12, %3 ], [ %15, %13 ]
  %22 = icmp eq %struct.RARPPM_STATE* %2, null
  %23 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %6, i64 0, i32 2
  %24 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %23, align 1
  br i1 %22, label %25, label %49

25:                                               ; preds = %20, %59
  %26 = phi %struct.RARPPM_CONTEXT* [ %62, %59 ], [ %24, %20 ]
  %27 = phi %struct.RARPPM_STATE** [ %60, %59 ], [ %21, %20 ]
  %28 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %26, i64 0, i32 0
  %29 = load i16, i16* %28, align 1
  %30 = icmp eq i16 %29, 1
  br i1 %30, label %46, label %31

31:                                               ; preds = %25
  %32 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %26, i64 0, i32 1, i32 0, i32 1
  %33 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %32, align 1
  %34 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %33, i64 0, i32 0
  %35 = load i8, i8* %34, align 1
  %36 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %7, align 8
  %37 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %36, i64 0, i32 0
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %35, %38
  br i1 %39, label %49, label %40

40:                                               ; preds = %31, %40
  %41 = phi %struct.RARPPM_STATE* [ %42, %40 ], [ %33, %31 ]
  %42 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %41, i64 1
  %43 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %42, i64 0, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, %38
  br i1 %45, label %49, label %40

46:                                               ; preds = %25
  %47 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %26, i64 0, i32 1
  %48 = bitcast %union.anon.7* %47 to %struct.RARPPM_STATE*
  br label %49

49:                                               ; preds = %40, %20, %46, %31
  %50 = phi %struct.RARPPM_CONTEXT* [ %26, %31 ], [ %26, %46 ], [ %24, %20 ], [ %26, %40 ]
  %51 = phi %struct.RARPPM_STATE* [ %33, %31 ], [ %48, %46 ], [ %2, %20 ], [ %42, %40 ]
  %52 = phi %struct.RARPPM_STATE** [ %27, %31 ], [ %27, %46 ], [ %21, %20 ], [ %27, %40 ]
  %53 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %51, i64 0, i32 2
  %54 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %53, align 1
  %55 = icmp eq %struct.RARPPM_CONTEXT* %54, %10
  br i1 %55, label %56, label %64

56:                                               ; preds = %49
  %57 = getelementptr inbounds [64 x %struct.RARPPM_STATE*], [64 x %struct.RARPPM_STATE*]* %4, i64 0, i64 64
  %58 = icmp ult %struct.RARPPM_STATE** %52, %57
  br i1 %58, label %59, label %171

59:                                               ; preds = %56
  %60 = getelementptr inbounds %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %52, i64 1
  store %struct.RARPPM_STATE* %51, %struct.RARPPM_STATE** %52, align 8
  %61 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %50, i64 0, i32 2
  %62 = load %struct.RARPPM_CONTEXT*, %struct.RARPPM_CONTEXT** %61, align 1
  %63 = icmp eq %struct.RARPPM_CONTEXT* %62, null
  br i1 %63, label %64, label %25

64:                                               ; preds = %49, %59
  %65 = phi %struct.RARPPM_CONTEXT* [ %50, %59 ], [ %54, %49 ]
  %66 = phi %struct.RARPPM_STATE** [ %60, %59 ], [ %52, %49 ]
  %67 = icmp eq %struct.RARPPM_STATE** %66, %12
  br i1 %67, label %171, label %68

68:                                               ; preds = %13, %64
  %69 = phi %struct.RARPPM_STATE** [ %66, %64 ], [ %15, %13 ]
  %70 = phi %struct.RARPPM_CONTEXT* [ %65, %64 ], [ %6, %13 ]
  %71 = bitcast %struct.RARPPM_CONTEXT* %10 to i8*
  %72 = load i8, i8* %71, align 1
  %73 = getelementptr inbounds i8, i8* %71, i64 1
  %74 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %70, i64 0, i32 0
  %75 = load i16, i16* %74, align 1
  %76 = icmp eq i16 %75, 1
  br i1 %76, label %123, label %77

77:                                               ; preds = %68
  %78 = bitcast %struct.RARPPM_CONTEXT* %70 to i8*
  %79 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 8
  %80 = load i8*, i8** %79, align 8
  %81 = icmp ult i8* %80, %78
  br i1 %81, label %82, label %171

82:                                               ; preds = %77
  %83 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %70, i64 0, i32 1, i32 0, i32 1
  %84 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %83, align 1
  %85 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %84, i64 0, i32 0
  %86 = load i8, i8* %85, align 1
  %87 = icmp eq i8 %86, %72
  br i1 %87, label %94, label %88

88:                                               ; preds = %82, %88
  %89 = phi %struct.RARPPM_STATE* [ %90, %88 ], [ %84, %82 ]
  %90 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %89, i64 1
  %91 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %90, i64 0, i32 0
  %92 = load i8, i8* %91, align 1
  %93 = icmp eq i8 %92, %72
  br i1 %93, label %94, label %88

94:                                               ; preds = %88, %82
  %95 = phi %struct.RARPPM_STATE* [ %84, %82 ], [ %90, %88 ]
  %96 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %95, i64 0, i32 1
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = add nsw i32 %98, -1
  %100 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %70, i64 0, i32 1, i32 0, i32 0
  %101 = load i16, i16* %100, align 1
  %102 = zext i16 %101 to i32
  %103 = zext i16 %75 to i32
  %104 = sub nsw i32 %102, %103
  %105 = sub nsw i32 1, %98
  %106 = add nsw i32 %104, %105
  %107 = shl nsw i32 %99, 1
  %108 = icmp ugt i32 %107, %106
  br i1 %108, label %113, label %109

109:                                              ; preds = %94
  %110 = mul nsw i32 %99, 5
  %111 = icmp ugt i32 %110, %106
  %112 = zext i1 %111 to i32
  br label %119

113:                                              ; preds = %94
  %114 = mul nsw i32 %106, 3
  %115 = add nsw i32 %107, -1
  %116 = add nsw i32 %115, %114
  %117 = shl nsw i32 %106, 1
  %118 = udiv i32 %116, %117
  br label %119

119:                                              ; preds = %113, %109
  %120 = phi i32 [ %112, %109 ], [ %118, %113 ]
  %121 = trunc i32 %120 to i8
  %122 = add i8 %121, 1
  br label %128

123:                                              ; preds = %68
  %124 = getelementptr inbounds %struct.RARPPM_CONTEXT, %struct.RARPPM_CONTEXT* %70, i64 0, i32 1
  %125 = bitcast %union.anon.7* %124 to %struct.RARPPM_STATE*
  %126 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %125, i64 0, i32 1
  %127 = load i8, i8* %126, align 1
  br label %128

128:                                              ; preds = %123, %119
  %129 = phi i8 [ %127, %123 ], [ %122, %119 ]
  %130 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25
  %131 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 6
  %132 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 5
  %133 = getelementptr inbounds %class.ModelPPM, %class.ModelPPM* %0, i64 0, i32 25, i32 7, i64 0, i32 0
  %134 = bitcast %"struct.SubAllocator::RAR_NODE"** %133 to i64*
  br label %135

135:                                              ; preds = %157, %128
  %136 = phi %struct.RARPPM_CONTEXT* [ %70, %128 ], [ %158, %157 ]
  %137 = phi %struct.RARPPM_STATE** [ %69, %128 ], [ %138, %157 ]
  %138 = getelementptr inbounds %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %137, i64 -1
  %139 = load %struct.RARPPM_STATE*, %struct.RARPPM_STATE** %138, align 8
  %140 = load i8*, i8** %131, align 8
  %141 = load i8*, i8** %132, align 8
  %142 = icmp eq i8* %140, %141
  br i1 %142, label %145, label %143

143:                                              ; preds = %135
  %144 = getelementptr inbounds i8, i8* %140, i64 -20
  store i8* %144, i8** %131, align 8
  br label %154

145:                                              ; preds = %135
  %146 = load %"struct.SubAllocator::RAR_NODE"*, %"struct.SubAllocator::RAR_NODE"** %133, align 8
  %147 = icmp eq %"struct.SubAllocator::RAR_NODE"* %146, null
  br i1 %147, label %152, label %148

148:                                              ; preds = %145
  %149 = bitcast %"struct.SubAllocator::RAR_NODE"* %146 to i64*
  %150 = load i64, i64* %149, align 8
  store i64 %150, i64* %134, align 8
  %151 = bitcast %"struct.SubAllocator::RAR_NODE"* %146 to i8*
  br label %154

152:                                              ; preds = %145
  %153 = call i8* @_ZN12SubAllocator14AllocUnitsRareEi(%class.SubAllocator* %130, i32 0) #11
  br label %154

154:                                              ; preds = %152, %148, %143
  %155 = phi i8* [ %144, %143 ], [ %151, %148 ], [ %153, %152 ]
  %156 = icmp eq i8* %155, null
  br i1 %156, label %171, label %157

157:                                              ; preds = %154
  %158 = bitcast i8* %155 to %struct.RARPPM_CONTEXT*
  %159 = bitcast i8* %155 to i16*
  store i16 1, i16* %159, align 1
  %160 = getelementptr inbounds i8, i8* %155, i64 2
  store i8 %72, i8* %160, align 1
  %161 = getelementptr inbounds i8, i8* %155, i64 3
  store i8 %129, i8* %161, align 1
  %162 = getelementptr inbounds i8, i8* %155, i64 4
  %163 = bitcast i8* %162 to i8**
  store i8* %73, i8** %163, align 1
  %164 = getelementptr inbounds i8, i8* %155, i64 12
  %165 = bitcast i8* %164 to %struct.RARPPM_CONTEXT**
  store %struct.RARPPM_CONTEXT* %136, %struct.RARPPM_CONTEXT** %165, align 1
  %166 = getelementptr inbounds %struct.RARPPM_STATE, %struct.RARPPM_STATE* %139, i64 0, i32 2
  %167 = bitcast %struct.RARPPM_CONTEXT** %166 to i8**
  store i8* %155, i8** %167, align 1
  %168 = icmp eq %struct.RARPPM_STATE** %138, %12
  br i1 %168, label %169, label %135

169:                                              ; preds = %157
  %170 = bitcast i8* %155 to %struct.RARPPM_CONTEXT*
  br label %171

171:                                              ; preds = %154, %169, %77, %64, %56
  %172 = phi %struct.RARPPM_CONTEXT* [ null, %56 ], [ %65, %64 ], [ null, %77 ], [ %170, %169 ], [ null, %154 ]
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %11) #11
  ret %struct.RARPPM_CONTEXT* %172
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ArrayIhE3AddEm(%class.Array*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.Array, %class.Array* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, %1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %class.Array, %class.Array* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %5, %7
  br i1 %8, label %9, label %49

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.Array, %class.Array* %0, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = icmp ne i64 %11, 0
  %13 = icmp ugt i64 %5, %11
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %18

15:                                               ; preds = %9
  tail call void (%class.ErrorHandler*, i32*, ...) @_ZN12ErrorHandler13GeneralErrMsgEPKwz(%class.ErrorHandler* nonnull @ErrHandler, i32* getelementptr inbounds ([44 x i32], [44 x i32]* @.str, i64 0, i64 0), i64 %11) #11
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %3, align 8
  br label %18

18:                                               ; preds = %9, %15
  %19 = phi i64 [ %5, %9 ], [ %17, %15 ]
  %20 = phi i64 [ %7, %9 ], [ %16, %15 ]
  %21 = lshr i64 %20, 2
  %22 = add i64 %20, 32
  %23 = add i64 %22, %21
  %24 = icmp ugt i64 %19, %23
  %25 = select i1 %24, i64 %19, i64 %23
  %26 = getelementptr inbounds %class.Array, %class.Array* %0, i64 0, i32 4
  %27 = load i8, i8* %26, align 8, !range !5
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %40, label %29

29:                                               ; preds = %18
  %30 = tail call noalias i8* @malloc(i64 %25) #11
  %31 = icmp eq i8* %30, null
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  br label %33

33:                                               ; preds = %32, %29
  %34 = getelementptr inbounds %class.Array, %class.Array* %0, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = icmp eq i8* %35, null
  br i1 %36, label %46, label %37

37:                                               ; preds = %33
  %38 = load i64, i64* %6, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* nonnull align 1 %35, i64 %38, i1 false)
  tail call void @_Z9cleandataPvm(i8* nonnull %35, i64 %38) #11
  %39 = load i8*, i8** %34, align 8
  tail call void @free(i8* %39) #11
  br label %46

40:                                               ; preds = %18
  %41 = getelementptr inbounds %class.Array, %class.Array* %0, i64 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i8* @realloc(i8* %42, i64 %25) #11
  %44 = icmp eq i8* %43, null
  br i1 %44, label %45, label %46

45:                                               ; preds = %40
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  br label %46

46:                                               ; preds = %33, %40, %45, %37
  %47 = phi i8* [ %30, %37 ], [ %30, %33 ], [ null, %45 ], [ %43, %40 ]
  %48 = getelementptr inbounds %class.Array, %class.Array* %0, i64 0, i32 0
  store i8* %47, i8** %48, align 8
  store i64 %25, i64* %6, align 8
  br label %49

49:                                               ; preds = %46, %2
  ret void
}

declare void @_ZN12ErrorHandler13GeneralErrMsgEPKwz(%class.ErrorHandler*, i32*, ...) local_unnamed_addr #5

declare void @_Z9cleandataPvm(i8*, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ArrayIiE3AddEm(%class.Array.10*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.Array.10, %class.Array.10* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, %1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %class.Array.10, %class.Array.10* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %5, %7
  br i1 %8, label %9, label %56

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.Array.10, %class.Array.10* %0, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = icmp ne i64 %11, 0
  %13 = icmp ugt i64 %5, %11
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %18

15:                                               ; preds = %9
  tail call void (%class.ErrorHandler*, i32*, ...) @_ZN12ErrorHandler13GeneralErrMsgEPKwz(%class.ErrorHandler* nonnull @ErrHandler, i32* getelementptr inbounds ([44 x i32], [44 x i32]* @.str, i64 0, i64 0), i64 %11) #11
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %3, align 8
  br label %18

18:                                               ; preds = %9, %15
  %19 = phi i64 [ %5, %9 ], [ %17, %15 ]
  %20 = phi i64 [ %7, %9 ], [ %16, %15 ]
  %21 = lshr i64 %20, 2
  %22 = add i64 %20, 32
  %23 = add i64 %22, %21
  %24 = icmp ugt i64 %19, %23
  %25 = select i1 %24, i64 %19, i64 %23
  %26 = getelementptr inbounds %class.Array.10, %class.Array.10* %0, i64 0, i32 4
  %27 = load i8, i8* %26, align 8, !range !5
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %45, label %29

29:                                               ; preds = %18
  %30 = shl i64 %25, 2
  %31 = tail call noalias i8* @malloc(i64 %30) #11
  %32 = bitcast i8* %31 to i32*
  %33 = icmp eq i8* %31, null
  br i1 %33, label %34, label %35

34:                                               ; preds = %29
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  br label %35

35:                                               ; preds = %34, %29
  %36 = getelementptr inbounds %class.Array.10, %class.Array.10* %0, i64 0, i32 0
  %37 = load i32*, i32** %36, align 8
  %38 = icmp eq i32* %37, null
  %39 = bitcast i32* %37 to i8*
  br i1 %38, label %53, label %40

40:                                               ; preds = %35
  %41 = load i64, i64* %6, align 8
  %42 = shl i64 %41, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* nonnull align 4 %39, i64 %42, i1 false)
  %43 = bitcast %class.Array.10* %0 to i8**
  tail call void @_Z9cleandataPvm(i8* nonnull %39, i64 %42) #11
  %44 = load i8*, i8** %43, align 8
  tail call void @free(i8* %44) #11
  br label %53

45:                                               ; preds = %18
  %46 = bitcast %class.Array.10* %0 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = shl i64 %25, 2
  %49 = tail call i8* @realloc(i8* %47, i64 %48) #11
  %50 = bitcast i8* %49 to i32*
  %51 = icmp eq i8* %49, null
  br i1 %51, label %52, label %53

52:                                               ; preds = %45
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  br label %53

53:                                               ; preds = %35, %45, %52, %40
  %54 = phi i32* [ %32, %40 ], [ %32, %35 ], [ null, %52 ], [ %50, %45 ]
  %55 = getelementptr inbounds %class.Array.10, %class.Array.10* %0, i64 0, i32 0
  store i32* %54, i32** %55, align 8
  store i64 %25, i64* %6, align 8
  br label %56

56:                                               ; preds = %53, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5ArrayI12UnpackFilterE3AddEm(%class.Array.5*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.Array.5, %class.Array.5* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, %1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %class.Array.5, %class.Array.5* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %5, %7
  br i1 %8, label %9, label %57

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.Array.5, %class.Array.5* %0, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = icmp ne i64 %11, 0
  %13 = icmp ugt i64 %5, %11
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %18

15:                                               ; preds = %9
  tail call void (%class.ErrorHandler*, i32*, ...) @_ZN12ErrorHandler13GeneralErrMsgEPKwz(%class.ErrorHandler* nonnull @ErrHandler, i32* getelementptr inbounds ([44 x i32], [44 x i32]* @.str, i64 0, i64 0), i64 %11) #11
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %3, align 8
  br label %18

18:                                               ; preds = %9, %15
  %19 = phi i64 [ %5, %9 ], [ %17, %15 ]
  %20 = phi i64 [ %7, %9 ], [ %16, %15 ]
  %21 = lshr i64 %20, 2
  %22 = add i64 %20, 32
  %23 = add i64 %22, %21
  %24 = icmp ugt i64 %19, %23
  %25 = select i1 %24, i64 %19, i64 %23
  %26 = getelementptr inbounds %class.Array.5, %class.Array.5* %0, i64 0, i32 4
  %27 = load i8, i8* %26, align 8, !range !5
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %46, label %29

29:                                               ; preds = %18
  %30 = shl i64 %25, 4
  %31 = tail call noalias i8* @malloc(i64 %30) #11
  %32 = bitcast i8* %31 to %struct.UnpackFilter*
  %33 = icmp eq i8* %31, null
  br i1 %33, label %34, label %35

34:                                               ; preds = %29
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  br label %35

35:                                               ; preds = %34, %29
  %36 = getelementptr inbounds %class.Array.5, %class.Array.5* %0, i64 0, i32 0
  %37 = load %struct.UnpackFilter*, %struct.UnpackFilter** %36, align 8
  %38 = icmp eq %struct.UnpackFilter* %37, null
  br i1 %38, label %54, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %37, i64 0, i32 0
  %41 = getelementptr inbounds %struct.UnpackFilter, %struct.UnpackFilter* %37, i64 0, i32 0
  %42 = load i64, i64* %6, align 8
  %43 = shl i64 %42, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %41, i64 %43, i1 false)
  %44 = bitcast %class.Array.5* %0 to i8**
  tail call void @_Z9cleandataPvm(i8* %40, i64 %43) #11
  %45 = load i8*, i8** %44, align 8
  tail call void @free(i8* %45) #11
  br label %54

46:                                               ; preds = %18
  %47 = bitcast %class.Array.5* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  %49 = shl i64 %25, 4
  %50 = tail call i8* @realloc(i8* %48, i64 %49) #11
  %51 = bitcast i8* %50 to %struct.UnpackFilter*
  %52 = icmp eq i8* %50, null
  br i1 %52, label %53, label %54

53:                                               ; preds = %46
  tail call void @_ZN12ErrorHandler11MemoryErrorEv(%class.ErrorHandler* nonnull @ErrHandler) #11
  br label %54

54:                                               ; preds = %35, %46, %53, %39
  %55 = phi %struct.UnpackFilter* [ %32, %39 ], [ %32, %35 ], [ null, %53 ], [ %51, %46 ]
  %56 = getelementptr inbounds %class.Array.5, %class.Array.5* %0, i64 0, i32 0
  store %struct.UnpackFilter* %55, %struct.UnpackFilter** %56, align 8
  store i64 %25, i64* %6, align 8
  br label %57

57:                                               ; preds = %54, %2
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = !{i8 0, i8 2}
!6 = distinct !{!6, !3}
!7 = !{!8}
!8 = distinct !{!8, !9}
!9 = distinct !{!9, !"LVerDomain"}
!10 = !{!11}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !13}
!15 = distinct !{!15, !3}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !13}
!22 = distinct !{!22, !13}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = distinct !{!28, !13}
!29 = distinct !{!29, !13}
!30 = distinct !{!30, !13}
!31 = distinct !{!31, !13}
!32 = distinct !{!32, !13}
!33 = distinct !{!33, !34, !13}
!34 = !{!"llvm.loop.unroll.runtime.disable"}
!35 = distinct !{!35, !3}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = !{!40}
!40 = distinct !{!40, !38}
!41 = distinct !{!41, !13}
!42 = distinct !{!42, !13}
!43 = !{!44}
!44 = distinct !{!44, !45}
!45 = distinct !{!45, !"LVerDomain"}
!46 = !{!47}
!47 = distinct !{!47, !45}
!48 = distinct !{!48, !13}
!49 = distinct !{!49, !13}
!50 = distinct !{!50, !3}
!51 = !{!52}
!52 = distinct !{!52, !53}
!53 = distinct !{!53, !"LVerDomain"}
!54 = !{!55}
!55 = distinct !{!55, !53}
!56 = distinct !{!56, !13}
!57 = distinct !{!57, !13}
!58 = distinct !{!58, !13}
