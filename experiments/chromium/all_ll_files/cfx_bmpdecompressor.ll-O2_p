; ModuleID = '../../third_party/pdfium/core/fxcodec/bmp/cfx_bmpdecompressor.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/bmp/cfx_bmpdecompressor.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.fxcodec::CFX_BmpDecompressor" = type { %"class.fxcrt::UnownedPtr", %"class.std::__1::vector", %"class.std::__1::vector.1", i32, i32, i32, i32, i32, i64, i64, i8, i16, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %"class.fxcrt::RetainPtr" }
%"class.fxcrt::UnownedPtr" = type { %"class.fxcodec::CFX_BmpContext"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i32*, i32*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i32* }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %class.CFX_CodecMemory* }
%class.CFX_CodecMemory = type { %"class.fxcrt::Retainable", %"class.std::__1::unique_ptr.8", i64, i64 }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.fxcodec::CFX_BmpContext" = type { %"class.fxcodec::ProgressiveDecoderIface::Context", %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcrt::UnownedPtr.12" }
%"class.fxcodec::ProgressiveDecoderIface::Context" = type { i32 (...)** }
%"class.fxcrt::UnownedPtr.12" = type { %"class.fxcodec::BmpDecoder::Delegate"* }
%"class.fxcodec::BmpDecoder::Delegate" = type { i32 (...)** }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.13", i64 }
%"class.fxcrt::UnownedPtr.13" = type { i8* }
%struct.BmpFileHeader = type <{ i16, i32, i16, i16, i32 }>
%struct.BmpCoreHeader = type { i32, i16, i16, i16, i16 }
%struct.BmpInfoHeader = type { i32, i32, i32, i16, i16, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

@_ZN7fxcodec19CFX_BmpDecompressorC1EPKNS_14CFX_BmpContextE = hidden unnamed_addr alias void (%"class.fxcodec::CFX_BmpDecompressor"*, %"class.fxcodec::CFX_BmpContext"*), void (%"class.fxcodec::CFX_BmpDecompressor"*, %"class.fxcodec::CFX_BmpContext"*)* @_ZN7fxcodec19CFX_BmpDecompressorC2EPKNS_14CFX_BmpContextE
@_ZN7fxcodec19CFX_BmpDecompressorD1Ev = hidden unnamed_addr alias void (%"class.fxcodec::CFX_BmpDecompressor"*), void (%"class.fxcodec::CFX_BmpDecompressor"*)* @_ZN7fxcodec19CFX_BmpDecompressorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec19CFX_BmpDecompressorC2EPKNS_14CFX_BmpContextE(%"class.fxcodec::CFX_BmpDecompressor"*, %"class.fxcodec::CFX_BmpContext"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 0, i32 0
  store %"class.fxcodec::CFX_BmpContext"* %1, %"class.fxcodec::CFX_BmpContext"** %3, align 8
  %4 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 8
  %6 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 11
  %7 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 25
  %8 = bitcast %"class.fxcrt::RetainPtr"* %7 to i64*
  store i64 0, i64* %8, align 8
  %9 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 68, i1 false)
  %10 = bitcast i64* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 17, i1 false)
  %11 = bitcast i16* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %11, i8 0, i64 51, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec19CFX_BmpDecompressorD2Ev(%"class.fxcodec::CFX_BmpDecompressor"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 25, i32 0, i32 0, i32 0, i32 0
  %3 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %2, align 8
  store %class.CFX_CodecMemory* null, %class.CFX_CodecMemory** %2, align 8
  %4 = icmp eq %class.CFX_CodecMemory* %3, null
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CFX_CodecMemory, %class.CFX_CodecMemory* %3, i64 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = add nsw i64 %7, -1
  store i64 %8, i64* %6, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.CFX_CodecMemory, %class.CFX_CodecMemory* %3, i64 0, i32 0
  %12 = bitcast %class.CFX_CodecMemory* %3 to void (%"class.fxcrt::Retainable"*)***
  %13 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %13, i64 1
  %15 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, align 8
  tail call void %15(%"class.fxcrt::Retainable"* nonnull %11) #10
  br label %16

16:                                               ; preds = %1, %5, %10
  %17 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 2, i32 0, i32 0
  %18 = load i32*, i32** %17, align 8
  %19 = icmp eq i32* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %16
  %21 = ptrtoint i32* %18 to i64
  %22 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 2, i32 0, i32 1
  %23 = bitcast i32** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = bitcast i32* %18 to i8*
  tail call void @_ZdlPv(i8* %24) #11
  br label %25

25:                                               ; preds = %16, %20
  %26 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %33, label %29

29:                                               ; preds = %25
  %30 = ptrtoint i8* %27 to i64
  %31 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1, i32 0, i32 1
  %32 = bitcast i8** %31 to i64*
  store i64 %30, i64* %32, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %27) #10
  br label %33

33:                                               ; preds = %25, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec19CFX_BmpDecompressor16ReadNextScanlineEv(%"class.fxcodec::CFX_BmpDecompressor"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.pdfium::span", align 8
  %3 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 10
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 17
  %8 = load i32, i32* %7, align 8
  br label %16

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 5
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 17
  %13 = load i32, i32* %12, align 8
  %14 = xor i32 %13, -1
  %15 = add i32 %11, %14
  br label %16

16:                                               ; preds = %9, %6
  %17 = phi i32 [ %8, %6 ], [ %15, %9 ]
  %18 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 0, i32 0
  %19 = load %"class.fxcodec::CFX_BmpContext"*, %"class.fxcodec::CFX_BmpContext"** %18, align 8
  %20 = getelementptr inbounds %"class.fxcodec::CFX_BmpContext", %"class.fxcodec::CFX_BmpContext"* %19, i64 0, i32 2, i32 0
  %21 = load %"class.fxcodec::BmpDecoder::Delegate"*, %"class.fxcodec::BmpDecoder::Delegate"** %20, align 8
  %22 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1
  %23 = bitcast %"class.std::__1::vector"* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1, i32 0, i32 1
  %26 = bitcast i8** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %27, %24
  %29 = bitcast %"class.pdfium::span"* %2 to i64*
  store i64 %24, i64* %29, align 8
  %30 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %2, i64 0, i32 1
  store i64 %28, i64* %30, align 8
  %31 = bitcast %"class.fxcodec::BmpDecoder::Delegate"* %21 to void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)***
  %32 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)**, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %32, i64 1
  %34 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %33, align 8
  call void %34(%"class.fxcodec::BmpDecoder::Delegate"* %21, i32 %17, %"class.pdfium::span"* nonnull %2) #10
  %35 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 17
  %36 = load i32, i32* %35, align 8
  %37 = add i32 %36, 1
  store i32 %37, i32* %35, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7fxcodec19CFX_BmpDecompressor15GetDataPositionEj(%"class.fxcodec::CFX_BmpDecompressor"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.fxcodec::CFX_BmpContext"*, %"class.fxcodec::CFX_BmpContext"** %3, align 8
  %5 = getelementptr inbounds %"class.fxcodec::CFX_BmpContext", %"class.fxcodec::CFX_BmpContext"* %4, i64 0, i32 2, i32 0
  %6 = load %"class.fxcodec::BmpDecoder::Delegate"*, %"class.fxcodec::BmpDecoder::Delegate"** %5, align 8
  %7 = bitcast %"class.fxcodec::BmpDecoder::Delegate"* %6 to i1 (%"class.fxcodec::BmpDecoder::Delegate"*, i32)***
  %8 = load i1 (%"class.fxcodec::BmpDecoder::Delegate"*, i32)**, i1 (%"class.fxcodec::BmpDecoder::Delegate"*, i32)*** %7, align 8
  %9 = load i1 (%"class.fxcodec::BmpDecoder::Delegate"*, i32)*, i1 (%"class.fxcodec::BmpDecoder::Delegate"*, i32)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.fxcodec::BmpDecoder::Delegate"* %6, i32 %1) #10
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor10ReadHeaderEv(%"class.fxcodec::CFX_BmpDecompressor"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 24
  %3 = load i8, i8* %2, align 4
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %10

5:                                                ; preds = %1
  %6 = tail call zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor13ReadBmpHeaderEv(%"class.fxcodec::CFX_BmpDecompressor"* %0)
  %7 = icmp eq i8 %6, 1
  br i1 %7, label %8, label %21

8:                                                ; preds = %5
  %9 = load i8, i8* %2, align 4
  br label %10

10:                                               ; preds = %8, %1
  %11 = phi i8 [ %9, %8 ], [ %3, %1 ]
  %12 = icmp eq i8 %11, 1
  br i1 %12, label %13, label %21

13:                                               ; preds = %10
  %14 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 6
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 3
  br i1 %16, label %17, label %19

17:                                               ; preds = %13
  %18 = tail call zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor16ReadBmpBitfieldsEv(%"class.fxcodec::CFX_BmpDecompressor"* %0)
  br label %21

19:                                               ; preds = %13
  %20 = tail call zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor14ReadBmpPaletteEv(%"class.fxcodec::CFX_BmpDecompressor"* %0)
  br label %21

21:                                               ; preds = %10, %5, %19, %17
  %22 = phi i8 [ %18, %17 ], [ %20, %19 ], [ %6, %5 ], [ 1, %10 ]
  ret i8 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor13ReadBmpHeaderEv(%"class.fxcodec::CFX_BmpDecompressor"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %struct.BmpFileHeader, align 2
  %3 = bitcast %struct.BmpFileHeader* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 14, i8* nonnull %3) #10
  %4 = getelementptr inbounds %struct.BmpFileHeader, %struct.BmpFileHeader* %2, i64 0, i32 0
  %5 = getelementptr inbounds %struct.BmpFileHeader, %struct.BmpFileHeader* %2, i64 0, i32 1
  %6 = getelementptr inbounds %struct.BmpFileHeader, %struct.BmpFileHeader* %2, i64 0, i32 4
  %7 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 25, i32 0, i32 0, i32 0, i32 0
  %8 = bitcast %struct.BmpFileHeader* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %8, i8 -86, i64 14, i1 false)
  %9 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %7, align 8
  %10 = icmp eq %class.CFX_CodecMemory* %9, null
  br i1 %10, label %96, label %11

11:                                               ; preds = %1
  %12 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %9, i8* nonnull %3, i64 14) #10
  %13 = icmp eq i64 %12, 14
  br i1 %13, label %14, label %96

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %3, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i16
  %18 = shl nuw i16 %17, 8
  %19 = load i8, i8* %3, align 2
  %20 = zext i8 %19 to i16
  %21 = or i16 %18, %20
  store i16 %21, i16* %4, align 2
  %22 = bitcast i32* %6 to i8*
  %23 = getelementptr inbounds i8, i8* %22, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = shl nuw i32 %25, 24
  %27 = getelementptr inbounds i8, i8* %22, i64 2
  %28 = load i8, i8* %27, align 2
  %29 = zext i8 %28 to i32
  %30 = shl nuw nsw i32 %29, 16
  %31 = or i32 %30, %26
  %32 = getelementptr inbounds i8, i8* %22, i64 1
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = shl nuw nsw i32 %34, 8
  %36 = or i32 %31, %35
  %37 = load i8, i8* %22, align 2
  %38 = zext i8 %37 to i32
  %39 = or i32 %36, %38
  store i32 %39, i32* %6, align 2
  %40 = bitcast i32* %5 to i8*
  %41 = getelementptr inbounds i8, i8* %40, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl nuw i32 %43, 24
  %45 = getelementptr inbounds i8, i8* %40, i64 2
  %46 = load i8, i8* %45, align 2
  %47 = zext i8 %46 to i32
  %48 = shl nuw nsw i32 %47, 16
  %49 = or i32 %48, %44
  %50 = getelementptr inbounds i8, i8* %40, i64 1
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = shl nuw nsw i32 %52, 8
  %54 = or i32 %49, %53
  %55 = load i8, i8* %40, align 2
  %56 = zext i8 %55 to i32
  %57 = or i32 %54, %56
  %58 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 15
  store i32 %57, i32* %58, align 8
  %59 = icmp eq i16 %21, 19778
  br i1 %59, label %60, label %96

60:                                               ; preds = %14
  %61 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %7, align 8
  %62 = getelementptr inbounds %class.CFX_CodecMemory, %class.CFX_CodecMemory* %61, i64 0, i32 3
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 16
  %65 = bitcast i32* %64 to i8*
  %66 = icmp eq %class.CFX_CodecMemory* %61, null
  br i1 %66, label %96, label %67

67:                                               ; preds = %60
  %68 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %61, i8* %65, i64 4) #10
  %69 = icmp eq i64 %68, 4
  br i1 %69, label %70, label %96

70:                                               ; preds = %67
  %71 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %7, align 8
  %72 = call zeroext i1 @_ZN15CFX_CodecMemory4SeekEm(%class.CFX_CodecMemory* %71, i64 %63) #10
  br i1 %72, label %73, label %96

73:                                               ; preds = %70
  %74 = getelementptr inbounds i8, i8* %65, i64 3
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = shl nuw i32 %76, 24
  %78 = getelementptr inbounds i8, i8* %65, i64 2
  %79 = load i8, i8* %78, align 2
  %80 = zext i8 %79 to i32
  %81 = shl nuw nsw i32 %80, 16
  %82 = or i32 %81, %77
  %83 = getelementptr inbounds i8, i8* %65, i64 1
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = shl nuw nsw i32 %85, 8
  %87 = or i32 %82, %86
  %88 = load i8, i8* %65, align 4
  %89 = zext i8 %88 to i32
  %90 = or i32 %87, %89
  store i32 %90, i32* %64, align 4
  %91 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 14
  store i32 0, i32* %91, align 4
  %92 = call zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor16ReadBmpHeaderIfhEv(%"class.fxcodec::CFX_BmpDecompressor"* %0)
  %93 = icmp eq i8 %92, 1
  br i1 %93, label %94, label %96

94:                                               ; preds = %73
  %95 = call zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor23ReadBmpHeaderDimensionsEv(%"class.fxcodec::CFX_BmpDecompressor"* %0)
  br label %96

96:                                               ; preds = %60, %1, %67, %70, %73, %94, %14, %11
  %97 = phi i8 [ 2, %11 ], [ 0, %14 ], [ 2, %67 ], [ 0, %70 ], [ %95, %94 ], [ %92, %73 ], [ 2, %1 ], [ 2, %60 ]
  call void @llvm.lifetime.end.p0i8(i64 14, i8* nonnull %3) #10
  ret i8 %97
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor16ReadBmpBitfieldsEv(%"class.fxcodec::CFX_BmpDecompressor"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca [3 x i32], align 4
  %3 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 11
  %4 = load i16, i16* %3, align 2
  switch i16 %4, label %89 [
    i16 16, label %5
    i16 32, label %5
  ]

5:                                                ; preds = %1, %1
  %6 = bitcast [3 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %6) #10
  %7 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 0
  store i32 -1431655766, i32* %7, align 4
  %8 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 1
  store i32 -1431655766, i32* %8, align 4
  %9 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 -1431655766, i32* %9, align 4
  %10 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 25, i32 0, i32 0, i32 0, i32 0
  %11 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %10, align 8
  %12 = icmp eq %class.CFX_CodecMemory* %11, null
  br i1 %12, label %87, label %13

13:                                               ; preds = %5
  %14 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %11, i8* nonnull %6, i64 12) #10
  %15 = icmp eq i64 %14, 12
  br i1 %15, label %16, label %87

16:                                               ; preds = %13
  %17 = getelementptr inbounds i8, i8* %6, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = shl nuw i32 %19, 24
  %21 = getelementptr inbounds i8, i8* %6, i64 2
  %22 = load i8, i8* %21, align 2
  %23 = zext i8 %22 to i32
  %24 = shl nuw nsw i32 %23, 16
  %25 = or i32 %24, %20
  %26 = getelementptr inbounds i8, i8* %6, i64 1
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = shl nuw nsw i32 %28, 8
  %30 = or i32 %25, %29
  %31 = load i8, i8* %6, align 4
  %32 = zext i8 %31 to i32
  %33 = or i32 %30, %32
  %34 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 21
  store i32 %33, i32* %34, align 8
  %35 = bitcast i32* %8 to i8*
  %36 = getelementptr inbounds i8, i8* %35, i64 3
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = shl nuw i32 %38, 24
  %40 = getelementptr inbounds i8, i8* %35, i64 2
  %41 = load i8, i8* %40, align 2
  %42 = zext i8 %41 to i32
  %43 = shl nuw nsw i32 %42, 16
  %44 = or i32 %43, %39
  %45 = getelementptr inbounds i8, i8* %35, i64 1
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = shl nuw nsw i32 %47, 8
  %49 = or i32 %44, %48
  %50 = load i8, i8* %35, align 4
  %51 = zext i8 %50 to i32
  %52 = or i32 %49, %51
  %53 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 22
  store i32 %52, i32* %53, align 4
  %54 = bitcast i32* %9 to i8*
  %55 = getelementptr inbounds i8, i8* %54, i64 3
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = shl nuw i32 %57, 24
  %59 = getelementptr inbounds i8, i8* %54, i64 2
  %60 = load i8, i8* %59, align 2
  %61 = zext i8 %60 to i32
  %62 = shl nuw nsw i32 %61, 16
  %63 = or i32 %62, %58
  %64 = getelementptr inbounds i8, i8* %54, i64 1
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = shl nuw nsw i32 %66, 8
  %68 = or i32 %63, %67
  %69 = load i8, i8* %54, align 4
  %70 = zext i8 %69 to i32
  %71 = or i32 %68, %70
  %72 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 23
  store i32 %71, i32* %72, align 8
  %73 = or i32 %71, %52
  %74 = and i32 %73, %33
  %75 = and i32 %71, %52
  %76 = or i32 %74, %75
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %87

78:                                               ; preds = %16
  %79 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 3
  %80 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 16
  %81 = load i32, i32* %80, align 4
  %82 = add i32 %81, 26
  %83 = load i32, i32* %79, align 4
  %84 = icmp ult i32 %83, %82
  %85 = select i1 %84, i32 %82, i32 %83
  store i32 %85, i32* %79, align 8
  %86 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 24
  store i8 2, i8* %86, align 4
  br label %87

87:                                               ; preds = %5, %16, %13, %78
  %88 = phi i8 [ 1, %78 ], [ 2, %13 ], [ 0, %16 ], [ 2, %5 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %6) #10
  br label %89

89:                                               ; preds = %1, %87
  %90 = phi i8 [ %88, %87 ], [ 0, %1 ]
  ret i8 %90
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor14ReadBmpPaletteEv(%"class.fxcodec::CFX_BmpDecompressor"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 11
  %3 = load i16, i16* %2, align 2
  %4 = icmp eq i16 %3, 16
  br i1 %4, label %5, label %10

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 21
  store i32 31744, i32* %6, align 8
  %7 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 22
  store i32 992, i32* %7, align 4
  %8 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 23
  store i32 31, i32* %8, align 8
  %9 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 13
  store i32 0, i32* %9, align 8
  br label %126

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 13
  store i32 0, i32* %11, align 8
  %12 = icmp ult i16 %3, 16
  br i1 %12, label %13, label %126

13:                                               ; preds = %10
  %14 = zext i16 %3 to i32
  %15 = shl i32 1, %14
  %16 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 12
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, i32 %15, i32 %17
  store i32 %19, i32* %11, align 8
  %20 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 14
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, i32 4, i32 3
  %24 = mul nsw i32 %23, %19
  %25 = zext i32 %24 to i64
  %26 = icmp eq i32 %24, 0
  br i1 %26, label %33, label %27

27:                                               ; preds = %13
  %28 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %25, i64 1) #10
  %29 = ptrtoint i8* %28 to i64
  %30 = sub i64 %25, %29
  %31 = getelementptr i8, i8* %28, i64 %30
  %32 = ptrtoint i8* %31 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 0, i64 %32, i1 false) #10
  br label %33

33:                                               ; preds = %13, %27
  %34 = phi i8* [ null, %13 ], [ %28, %27 ]
  %35 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 25, i32 0, i32 0, i32 0, i32 0
  %36 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %35, align 8
  %37 = icmp eq %class.CFX_CodecMemory* %36, null
  br i1 %37, label %142, label %38

38:                                               ; preds = %33
  %39 = tail call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %36, i8* %34, i64 %25) #10
  %40 = icmp eq i64 %39, %25
  br i1 %40, label %41, label %142

41:                                               ; preds = %38
  %42 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 2
  %43 = load i32, i32* %11, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 2, i32 0, i32 1
  %46 = bitcast i32** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"class.std::__1::vector.1"* %42 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %47, %49
  %51 = ashr exact i64 %50, 2
  %52 = icmp ult i64 %51, %44
  %53 = inttoptr i64 %49 to i32*
  br i1 %52, label %54, label %57

54:                                               ; preds = %41
  %55 = sub nsw i64 %44, %51
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.1"* %42, i64 %55) #10
  %56 = load i32, i32* %11, align 8
  br label %61

57:                                               ; preds = %41
  %58 = icmp ugt i64 %51, %44
  br i1 %58, label %59, label %61

59:                                               ; preds = %57
  %60 = getelementptr inbounds i32, i32* %53, i64 %44
  store i32* %60, i32** %45, align 8
  br label %61

61:                                               ; preds = %54, %57, %59
  %62 = phi i32 [ %56, %54 ], [ %43, %57 ], [ %43, %59 ]
  %63 = load i32, i32* %20, align 4
  %64 = icmp eq i32 %63, 1
  %65 = icmp sgt i32 %62, 0
  br i1 %64, label %69, label %66

66:                                               ; preds = %61
  br i1 %65, label %67, label %121

67:                                               ; preds = %66
  %68 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %42, i64 0, i32 0, i32 0
  br label %94

69:                                               ; preds = %61
  br i1 %65, label %70, label %121

70:                                               ; preds = %69
  %71 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %42, i64 0, i32 0, i32 0
  br label %72

72:                                               ; preds = %70, %72
  %73 = phi i64 [ 0, %70 ], [ %87, %72 ]
  %74 = phi i8* [ %34, %70 ], [ %90, %72 ]
  %75 = getelementptr inbounds i8, i8* %74, i64 2
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = shl nuw nsw i32 %77, 16
  %79 = getelementptr inbounds i8, i8* %74, i64 1
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = shl nuw nsw i32 %81, 8
  %83 = or i32 %82, %78
  %84 = load i8, i8* %74, align 1
  %85 = zext i8 %84 to i32
  %86 = or i32 %83, %85
  %87 = add nuw nsw i64 %73, 1
  %88 = load i32*, i32** %71, align 8
  %89 = getelementptr inbounds i32, i32* %88, i64 %73
  store i32 %86, i32* %89, align 4
  %90 = getelementptr inbounds i8, i8* %74, i64 3
  %91 = load i32, i32* %11, align 8
  %92 = sext i32 %91 to i64
  %93 = icmp slt i64 %87, %92
  br i1 %93, label %72, label %121

94:                                               ; preds = %67, %94
  %95 = phi i64 [ 0, %67 ], [ %114, %94 ]
  %96 = phi i8* [ %34, %67 ], [ %117, %94 ]
  %97 = getelementptr inbounds i8, i8* %96, i64 3
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = shl nuw i32 %99, 24
  %101 = getelementptr inbounds i8, i8* %96, i64 2
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = shl nuw nsw i32 %103, 16
  %105 = or i32 %104, %100
  %106 = getelementptr inbounds i8, i8* %96, i64 1
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = shl nuw nsw i32 %108, 8
  %110 = or i32 %105, %109
  %111 = load i8, i8* %96, align 1
  %112 = zext i8 %111 to i32
  %113 = or i32 %110, %112
  %114 = add nuw nsw i64 %95, 1
  %115 = load i32*, i32** %68, align 8
  %116 = getelementptr inbounds i32, i32* %115, i64 %95
  store i32 %113, i32* %116, align 4
  %117 = getelementptr inbounds i8, i8* %96, i64 4
  %118 = load i32, i32* %11, align 8
  %119 = sext i32 %118 to i64
  %120 = icmp slt i64 %114, %119
  br i1 %120, label %94, label %121

121:                                              ; preds = %94, %72, %66, %69
  %122 = phi i32 [ %62, %66 ], [ %62, %69 ], [ %91, %72 ], [ %118, %94 ]
  %123 = icmp eq i8* %34, null
  br i1 %123, label %126, label %124

124:                                              ; preds = %121
  tail call void @_Z7FX_FreePv(i8* nonnull %34) #10
  %125 = load i32, i32* %11, align 8
  br label %126

126:                                              ; preds = %124, %121, %5, %10
  %127 = phi i32 [ 0, %5 ], [ 0, %10 ], [ %122, %121 ], [ %125, %124 ]
  %128 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 3
  %129 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 16
  %130 = load i32, i32* %129, align 4
  %131 = add i32 %130, 14
  %132 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 14
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 0
  %135 = select i1 %134, i32 4, i32 3
  %136 = mul nsw i32 %135, %127
  %137 = add i32 %131, %136
  %138 = load i32, i32* %128, align 4
  %139 = icmp ult i32 %138, %137
  %140 = select i1 %139, i32 %137, i32 %138
  store i32 %140, i32* %128, align 8
  %141 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 24
  store i8 2, i8* %141, align 4
  br label %145

142:                                              ; preds = %33, %38
  %143 = icmp eq i8* %34, null
  br i1 %143, label %145, label %144

144:                                              ; preds = %142
  tail call void @_Z7FX_FreePv(i8* nonnull %34) #10
  br label %145

145:                                              ; preds = %144, %142, %126
  %146 = phi i8 [ 1, %126 ], [ 2, %142 ], [ 2, %144 ]
  ret i8 %146
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7fxcodec19CFX_BmpDecompressor8ReadDataEPhj(%"class.fxcodec::CFX_BmpDecompressor"* nocapture readonly, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 25, i32 0, i32 0, i32 0, i32 0
  %5 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %4, align 8
  %6 = icmp eq %class.CFX_CodecMemory* %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  %9 = tail call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %5, i8* %1, i64 %8) #10
  %10 = icmp eq i64 %9, %8
  br label %11

11:                                               ; preds = %3, %7
  %12 = phi i1 [ false, %3 ], [ %10, %7 ]
  ret i1 %12
}

declare zeroext i1 @_ZN15CFX_CodecMemory4SeekEm(%class.CFX_CodecMemory*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor16ReadBmpHeaderIfhEv(%"class.fxcodec::CFX_BmpDecompressor"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %struct.BmpCoreHeader, align 4
  %3 = alloca %struct.BmpInfoHeader, align 1
  %4 = alloca %struct.BmpInfoHeader, align 1
  %5 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 16
  %6 = load i32, i32* %5, align 4
  switch i32 %6, label %201 [
    i32 12, label %7
    i32 40, label %52
  ]

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 14
  store i32 1, i32* %8, align 4
  %9 = bitcast %struct.BmpCoreHeader* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %9) #10
  %10 = getelementptr inbounds %struct.BmpCoreHeader, %struct.BmpCoreHeader* %2, i64 0, i32 1
  %11 = getelementptr inbounds %struct.BmpCoreHeader, %struct.BmpCoreHeader* %2, i64 0, i32 2
  %12 = getelementptr inbounds %struct.BmpCoreHeader, %struct.BmpCoreHeader* %2, i64 0, i32 4
  %13 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 25, i32 0, i32 0, i32 0, i32 0
  %14 = bitcast %struct.BmpCoreHeader* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %14, i8 -86, i64 12, i1 false)
  %15 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %13, align 8
  %16 = icmp eq %class.CFX_CodecMemory* %15, null
  br i1 %16, label %50, label %17

17:                                               ; preds = %7
  %18 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %15, i8* nonnull %9, i64 12) #10
  %19 = icmp eq i64 %18, 12
  br i1 %19, label %20, label %50

20:                                               ; preds = %17
  %21 = bitcast i16* %10 to i8*
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = shl nuw nsw i32 %24, 8
  %26 = load i8, i8* %21, align 4
  %27 = zext i8 %26 to i32
  %28 = or i32 %25, %27
  %29 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 4
  store i32 %28, i32* %29, align 4
  %30 = bitcast i16* %11 to i8*
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = shl nuw nsw i32 %33, 8
  %35 = load i8, i8* %30, align 2
  %36 = zext i8 %35 to i32
  %37 = or i32 %34, %36
  %38 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 5
  store i32 %37, i32* %38, align 8
  %39 = bitcast i16* %12 to i8*
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i16
  %43 = shl nuw i16 %42, 8
  %44 = load i8, i8* %39, align 2
  %45 = zext i8 %44 to i16
  %46 = or i16 %43, %45
  %47 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 11
  store i16 %46, i16* %47, align 2
  %48 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 6
  store i32 0, i32* %48, align 4
  %49 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 10
  store i8 0, i8* %49, align 8
  br label %50

50:                                               ; preds = %7, %17, %20
  %51 = phi i8 [ 1, %20 ], [ 2, %17 ], [ 2, %7 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %9) #10
  br label %379

52:                                               ; preds = %1
  %53 = bitcast %struct.BmpInfoHeader* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %53) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %53, i8 -86, i64 40, i1 false)
  %54 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 25, i32 0, i32 0, i32 0, i32 0
  %55 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %54, align 8
  %56 = icmp eq %class.CFX_CodecMemory* %55, null
  br i1 %56, label %199, label %57

57:                                               ; preds = %52
  %58 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %55, i8* nonnull %53, i64 40) #10
  %59 = icmp eq i64 %58, 40
  br i1 %59, label %60, label %199

60:                                               ; preds = %57
  %61 = getelementptr inbounds %struct.BmpInfoHeader, %struct.BmpInfoHeader* %3, i64 0, i32 1
  %62 = bitcast i32* %61 to i8*
  %63 = getelementptr inbounds i8, i8* %62, i64 3
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = shl nuw i32 %65, 24
  %67 = getelementptr inbounds i8, i8* %62, i64 2
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = shl nuw nsw i32 %69, 16
  %71 = or i32 %70, %66
  %72 = getelementptr inbounds i8, i8* %62, i64 1
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = shl nuw nsw i32 %74, 8
  %76 = or i32 %71, %75
  %77 = load i8, i8* %62, align 1
  %78 = zext i8 %77 to i32
  %79 = or i32 %76, %78
  %80 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 4
  store i32 %79, i32* %80, align 4
  %81 = getelementptr inbounds %struct.BmpInfoHeader, %struct.BmpInfoHeader* %3, i64 0, i32 2
  %82 = bitcast i32* %81 to i8*
  %83 = getelementptr inbounds i8, i8* %82, i64 3
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = shl nuw i32 %85, 24
  %87 = getelementptr inbounds i8, i8* %82, i64 2
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = shl nuw nsw i32 %89, 16
  %91 = or i32 %90, %86
  %92 = getelementptr inbounds i8, i8* %82, i64 1
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = shl nuw nsw i32 %94, 8
  %96 = or i32 %91, %95
  %97 = load i8, i8* %82, align 1
  %98 = zext i8 %97 to i32
  %99 = or i32 %96, %98
  %100 = getelementptr inbounds %struct.BmpInfoHeader, %struct.BmpInfoHeader* %3, i64 0, i32 4
  %101 = bitcast i16* %100 to i8*
  %102 = getelementptr inbounds i8, i8* %101, i64 1
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i16
  %105 = shl nuw i16 %104, 8
  %106 = load i8, i8* %101, align 1
  %107 = zext i8 %106 to i16
  %108 = or i16 %105, %107
  %109 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 11
  store i16 %108, i16* %109, align 2
  %110 = getelementptr inbounds %struct.BmpInfoHeader, %struct.BmpInfoHeader* %3, i64 0, i32 5
  %111 = bitcast i32* %110 to i8*
  %112 = getelementptr inbounds i8, i8* %111, i64 3
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = shl nuw i32 %114, 24
  %116 = getelementptr inbounds i8, i8* %111, i64 2
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = shl nuw nsw i32 %118, 16
  %120 = or i32 %119, %115
  %121 = getelementptr inbounds i8, i8* %111, i64 1
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = shl nuw nsw i32 %123, 8
  %125 = or i32 %120, %124
  %126 = load i8, i8* %111, align 1
  %127 = zext i8 %126 to i32
  %128 = or i32 %125, %127
  %129 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 6
  store i32 %128, i32* %129, align 4
  %130 = getelementptr inbounds %struct.BmpInfoHeader, %struct.BmpInfoHeader* %3, i64 0, i32 9
  %131 = bitcast i32* %130 to i8*
  %132 = getelementptr inbounds i8, i8* %131, i64 3
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = shl nuw i32 %134, 24
  %136 = getelementptr inbounds i8, i8* %131, i64 2
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = shl nuw nsw i32 %138, 16
  %140 = or i32 %139, %135
  %141 = getelementptr inbounds i8, i8* %131, i64 1
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = shl nuw nsw i32 %143, 8
  %145 = or i32 %140, %144
  %146 = load i8, i8* %131, align 1
  %147 = zext i8 %146 to i32
  %148 = or i32 %145, %147
  %149 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 12
  store i32 %148, i32* %149, align 4
  %150 = getelementptr inbounds %struct.BmpInfoHeader, %struct.BmpInfoHeader* %3, i64 0, i32 7
  %151 = bitcast i32* %150 to i8*
  %152 = getelementptr inbounds i8, i8* %151, i64 3
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = shl nuw i32 %154, 24
  %156 = getelementptr inbounds i8, i8* %151, i64 2
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = shl nuw nsw i32 %158, 16
  %160 = or i32 %159, %155
  %161 = getelementptr inbounds i8, i8* %151, i64 1
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = shl nuw nsw i32 %163, 8
  %165 = or i32 %160, %164
  %166 = load i8, i8* %151, align 1
  %167 = zext i8 %166 to i32
  %168 = or i32 %165, %167
  %169 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 19
  store i32 %168, i32* %169, align 8
  %170 = getelementptr inbounds %struct.BmpInfoHeader, %struct.BmpInfoHeader* %3, i64 0, i32 8
  %171 = bitcast i32* %170 to i8*
  %172 = getelementptr inbounds i8, i8* %171, i64 3
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = shl nuw i32 %174, 24
  %176 = getelementptr inbounds i8, i8* %171, i64 2
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = shl nuw nsw i32 %178, 16
  %180 = or i32 %179, %175
  %181 = getelementptr inbounds i8, i8* %171, i64 1
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = shl nuw nsw i32 %183, 8
  %185 = or i32 %180, %184
  %186 = load i8, i8* %171, align 1
  %187 = zext i8 %186 to i32
  %188 = or i32 %185, %187
  %189 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 20
  store i32 %188, i32* %189, align 4
  %190 = icmp sgt i32 %99, -1
  br i1 %190, label %191, label %193

191:                                              ; preds = %60
  %192 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 5
  store i32 %99, i32* %192, align 8
  br label %199

193:                                              ; preds = %60
  %194 = icmp eq i32 %99, -2147483648
  br i1 %194, label %199, label %195

195:                                              ; preds = %193
  %196 = sub nsw i32 0, %99
  %197 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 5
  store i32 %196, i32* %197, align 8
  %198 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 10
  store i8 1, i8* %198, align 8
  br label %199

199:                                              ; preds = %52, %193, %191, %195, %57
  %200 = phi i8 [ 2, %57 ], [ 0, %193 ], [ 1, %191 ], [ 1, %195 ], [ 2, %52 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %53) #10
  br label %379

201:                                              ; preds = %1
  %202 = icmp ult i32 %6, 41
  br i1 %202, label %379, label %203

203:                                              ; preds = %201
  %204 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 25, i32 0, i32 0, i32 0, i32 0
  %205 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %204, align 8
  %206 = getelementptr inbounds %class.CFX_CodecMemory, %class.CFX_CodecMemory* %205, i64 0, i32 3
  %207 = load i64, i64* %206, align 8
  %208 = bitcast %struct.BmpInfoHeader* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %208) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %208, i8 -86, i64 40, i1 false)
  %209 = icmp eq %class.CFX_CodecMemory* %205, null
  br i1 %209, label %377, label %210

210:                                              ; preds = %203
  %211 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %205, i8* nonnull %208, i64 40) #10
  %212 = icmp eq i64 %211, 40
  br i1 %212, label %213, label %377

213:                                              ; preds = %210
  %214 = load i32, i32* %5, align 4
  %215 = zext i32 %214 to i64
  %216 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %207, i64 %215) #10
  %217 = extractvalue { i64, i1 } %216, 1
  br i1 %217, label %377, label %218

218:                                              ; preds = %213
  %219 = extractvalue { i64, i1 } %216, 0
  %220 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %204, align 8
  %221 = call zeroext i1 @_ZN15CFX_CodecMemory4SeekEm(%class.CFX_CodecMemory* %220, i64 %219) #10
  br i1 %221, label %222, label %377

222:                                              ; preds = %218
  %223 = getelementptr inbounds %struct.BmpInfoHeader, %struct.BmpInfoHeader* %4, i64 0, i32 1
  %224 = bitcast i32* %223 to i8*
  %225 = getelementptr inbounds i8, i8* %224, i64 3
  %226 = load i8, i8* %225, align 1
  %227 = zext i8 %226 to i32
  %228 = shl nuw i32 %227, 24
  %229 = getelementptr inbounds i8, i8* %224, i64 2
  %230 = load i8, i8* %229, align 1
  %231 = zext i8 %230 to i32
  %232 = shl nuw nsw i32 %231, 16
  %233 = or i32 %232, %228
  %234 = getelementptr inbounds i8, i8* %224, i64 1
  %235 = load i8, i8* %234, align 1
  %236 = zext i8 %235 to i32
  %237 = shl nuw nsw i32 %236, 8
  %238 = or i32 %233, %237
  %239 = load i8, i8* %224, align 1
  %240 = zext i8 %239 to i32
  %241 = or i32 %238, %240
  %242 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 4
  store i32 %241, i32* %242, align 4
  %243 = getelementptr inbounds %struct.BmpInfoHeader, %struct.BmpInfoHeader* %4, i64 0, i32 2
  %244 = bitcast i32* %243 to i8*
  %245 = getelementptr inbounds i8, i8* %244, i64 3
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i32
  %248 = shl nuw i32 %247, 24
  %249 = getelementptr inbounds i8, i8* %244, i64 2
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = shl nuw nsw i32 %251, 16
  %253 = or i32 %252, %248
  %254 = getelementptr inbounds i8, i8* %244, i64 1
  %255 = load i8, i8* %254, align 1
  %256 = zext i8 %255 to i32
  %257 = shl nuw nsw i32 %256, 8
  %258 = or i32 %253, %257
  %259 = load i8, i8* %244, align 1
  %260 = zext i8 %259 to i32
  %261 = or i32 %258, %260
  %262 = getelementptr inbounds %struct.BmpInfoHeader, %struct.BmpInfoHeader* %4, i64 0, i32 4
  %263 = bitcast i16* %262 to i8*
  %264 = getelementptr inbounds i8, i8* %263, i64 1
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i16
  %267 = shl nuw i16 %266, 8
  %268 = load i8, i8* %263, align 1
  %269 = zext i8 %268 to i16
  %270 = or i16 %267, %269
  %271 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 11
  store i16 %270, i16* %271, align 2
  %272 = getelementptr inbounds %struct.BmpInfoHeader, %struct.BmpInfoHeader* %4, i64 0, i32 5
  %273 = bitcast i32* %272 to i8*
  %274 = getelementptr inbounds i8, i8* %273, i64 3
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i32
  %277 = shl nuw i32 %276, 24
  %278 = getelementptr inbounds i8, i8* %273, i64 2
  %279 = load i8, i8* %278, align 1
  %280 = zext i8 %279 to i32
  %281 = shl nuw nsw i32 %280, 16
  %282 = or i32 %281, %277
  %283 = getelementptr inbounds i8, i8* %273, i64 1
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i32
  %286 = shl nuw nsw i32 %285, 8
  %287 = or i32 %282, %286
  %288 = load i8, i8* %273, align 1
  %289 = zext i8 %288 to i32
  %290 = or i32 %287, %289
  %291 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 6
  store i32 %290, i32* %291, align 4
  %292 = getelementptr inbounds %struct.BmpInfoHeader, %struct.BmpInfoHeader* %4, i64 0, i32 9
  %293 = bitcast i32* %292 to i8*
  %294 = getelementptr inbounds i8, i8* %293, i64 3
  %295 = load i8, i8* %294, align 1
  %296 = zext i8 %295 to i32
  %297 = shl nuw i32 %296, 24
  %298 = getelementptr inbounds i8, i8* %293, i64 2
  %299 = load i8, i8* %298, align 1
  %300 = zext i8 %299 to i32
  %301 = shl nuw nsw i32 %300, 16
  %302 = or i32 %301, %297
  %303 = getelementptr inbounds i8, i8* %293, i64 1
  %304 = load i8, i8* %303, align 1
  %305 = zext i8 %304 to i32
  %306 = shl nuw nsw i32 %305, 8
  %307 = or i32 %302, %306
  %308 = load i8, i8* %293, align 1
  %309 = zext i8 %308 to i32
  %310 = or i32 %307, %309
  %311 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 12
  store i32 %310, i32* %311, align 4
  %312 = getelementptr inbounds %struct.BmpInfoHeader, %struct.BmpInfoHeader* %4, i64 0, i32 3
  %313 = bitcast i16* %312 to i8*
  %314 = getelementptr inbounds i8, i8* %313, i64 1
  %315 = load i8, i8* %314, align 1
  %316 = zext i8 %315 to i32
  %317 = shl nuw nsw i32 %316, 8
  %318 = load i8, i8* %313, align 1
  %319 = zext i8 %318 to i32
  %320 = or i32 %317, %319
  %321 = getelementptr inbounds %struct.BmpInfoHeader, %struct.BmpInfoHeader* %4, i64 0, i32 7
  %322 = bitcast i32* %321 to i8*
  %323 = getelementptr inbounds i8, i8* %322, i64 3
  %324 = load i8, i8* %323, align 1
  %325 = zext i8 %324 to i32
  %326 = shl nuw i32 %325, 24
  %327 = getelementptr inbounds i8, i8* %322, i64 2
  %328 = load i8, i8* %327, align 1
  %329 = zext i8 %328 to i32
  %330 = shl nuw nsw i32 %329, 16
  %331 = or i32 %330, %326
  %332 = getelementptr inbounds i8, i8* %322, i64 1
  %333 = load i8, i8* %332, align 1
  %334 = zext i8 %333 to i32
  %335 = shl nuw nsw i32 %334, 8
  %336 = or i32 %331, %335
  %337 = load i8, i8* %322, align 1
  %338 = zext i8 %337 to i32
  %339 = or i32 %336, %338
  %340 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 19
  store i32 %339, i32* %340, align 8
  %341 = getelementptr inbounds %struct.BmpInfoHeader, %struct.BmpInfoHeader* %4, i64 0, i32 8
  %342 = bitcast i32* %341 to i8*
  %343 = getelementptr inbounds i8, i8* %342, i64 3
  %344 = load i8, i8* %343, align 1
  %345 = zext i8 %344 to i32
  %346 = shl nuw i32 %345, 24
  %347 = getelementptr inbounds i8, i8* %342, i64 2
  %348 = load i8, i8* %347, align 1
  %349 = zext i8 %348 to i32
  %350 = shl nuw nsw i32 %349, 16
  %351 = or i32 %350, %346
  %352 = getelementptr inbounds i8, i8* %342, i64 1
  %353 = load i8, i8* %352, align 1
  %354 = zext i8 %353 to i32
  %355 = shl nuw nsw i32 %354, 8
  %356 = or i32 %351, %355
  %357 = load i8, i8* %342, align 1
  %358 = zext i8 %357 to i32
  %359 = or i32 %356, %358
  %360 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 20
  store i32 %359, i32* %360, align 4
  %361 = icmp sgt i32 %261, -1
  br i1 %361, label %362, label %364

362:                                              ; preds = %222
  %363 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 5
  store i32 %261, i32* %363, align 8
  br label %370

364:                                              ; preds = %222
  %365 = icmp eq i32 %261, -2147483648
  br i1 %365, label %377, label %366

366:                                              ; preds = %364
  %367 = sub nsw i32 0, %261
  %368 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 5
  store i32 %367, i32* %368, align 8
  %369 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 10
  store i8 1, i8* %369, align 8
  br label %370

370:                                              ; preds = %362, %366
  %371 = icmp eq i32 %290, 0
  %372 = icmp eq i32 %320, 1
  %373 = and i1 %371, %372
  br i1 %373, label %374, label %377

374:                                              ; preds = %370
  %375 = icmp eq i32 %310, 0
  %376 = zext i1 %375 to i8
  br label %377

377:                                              ; preds = %213, %203, %364, %374, %370, %218, %210
  %378 = phi i8 [ 2, %210 ], [ 0, %213 ], [ 2, %218 ], [ 0, %370 ], [ %376, %374 ], [ 0, %364 ], [ 2, %203 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %208) #10
  br label %379

379:                                              ; preds = %201, %377, %199, %50
  %380 = phi i8 [ %51, %50 ], [ %200, %199 ], [ %378, %377 ], [ 0, %201 ]
  ret i8 %380
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor23ReadBmpHeaderDimensionsEv(%"class.fxcodec::CFX_BmpDecompressor"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 4
  %4 = icmp ugt i32 %3, 65535
  br i1 %4, label %65, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 5
  %7 = load i32, i32* %6, align 8
  %8 = icmp ugt i32 %7, 65535
  br i1 %8, label %65, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 6
  %11 = load i32, i32* %10, align 4
  %12 = icmp ugt i32 %11, 3
  br i1 %12, label %65, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 11
  %15 = load i16, i16* %14, align 2
  switch i16 %15, label %65 [
    i16 1, label %16
    i16 4, label %16
    i16 8, label %16
    i16 16, label %16
    i16 24, label %16
    i16 32, label %22
  ]

16:                                               ; preds = %13, %13, %13, %13, %13
  %17 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 12
  %18 = load i32, i32* %17, align 4
  %19 = zext i16 %15 to i32
  %20 = shl i32 1, %19
  %21 = icmp ugt i32 %18, %20
  br i1 %21, label %65, label %22

22:                                               ; preds = %13, %16
  %23 = phi i32 [ %19, %16 ], [ 32, %13 ]
  %24 = tail call i64 @_ZN7fxcodec16CalculatePitch32Eii(i32 %23, i32 %3) #10
  %25 = trunc i64 %24 to i8
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %65, label %27

27:                                               ; preds = %22
  %28 = lshr i64 %24, 32
  %29 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 8
  store i64 %28, i64* %29, align 8
  %30 = load i16, i16* %14, align 2
  switch i16 %30, label %31 [
    i16 1, label %34
    i16 4, label %34
    i16 8, label %34
    i16 16, label %43
    i16 24, label %43
    i16 32, label %52
  ]

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 9
  %33 = load i64, i64* %32, align 8
  br label %55

34:                                               ; preds = %27, %27, %27
  %35 = load i32, i32* %2, align 4
  %36 = tail call i64 @_ZN7fxcodec16CalculatePitch32Eii(i32 8, i32 %35) #10
  %37 = trunc i64 %36 to i8
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %65, label %39

39:                                               ; preds = %34
  %40 = lshr i64 %36, 32
  %41 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 9
  store i64 %40, i64* %41, align 8
  %42 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 7
  store i32 1, i32* %42, align 8
  br label %55

43:                                               ; preds = %27, %27
  %44 = load i32, i32* %2, align 4
  %45 = tail call i64 @_ZN7fxcodec16CalculatePitch32Eii(i32 24, i32 %44) #10
  %46 = trunc i64 %45 to i8
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %65, label %48

48:                                               ; preds = %43
  %49 = lshr i64 %45, 32
  %50 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 9
  store i64 %49, i64* %50, align 8
  %51 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 7
  store i32 3, i32* %51, align 8
  br label %55

52:                                               ; preds = %27
  %53 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 9
  store i64 %28, i64* %53, align 8
  %54 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 7
  store i32 4, i32* %54, align 8
  br label %55

55:                                               ; preds = %31, %52, %48, %39
  %56 = phi i64 [ %33, %31 ], [ %28, %52 ], [ %49, %48 ], [ %40, %39 ]
  %57 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1
  %58 = bitcast %"class.std::__1::vector"* %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1, i32 0, i32 1
  %61 = bitcast i8** %60 to i64*
  store i64 %59, i64* %61, align 8
  %62 = icmp eq i64 %56, 0
  br i1 %62, label %65, label %63

63:                                               ; preds = %55
  tail call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %57, i64 %56) #10
  %64 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 24
  store i8 1, i8* %64, align 4
  br label %65

65:                                               ; preds = %34, %43, %22, %63, %55, %13, %16, %1, %5, %9
  %66 = phi i8 [ 0, %9 ], [ 0, %5 ], [ 0, %1 ], [ 0, %16 ], [ 0, %13 ], [ 1, %63 ], [ 0, %22 ], [ 0, %34 ], [ 0, %43 ], [ 0, %55 ]
  ret i8 %66
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden zeroext i1 @_ZN7fxcodec19CFX_BmpDecompressor9SetHeightEi(%"class.fxcodec::CFX_BmpDecompressor"* nocapture, i32) local_unnamed_addr #3 align 2 {
  %3 = icmp sgt i32 %1, -1
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 5
  store i32 %1, i32* %5, align 8
  br label %12

6:                                                ; preds = %2
  %7 = icmp eq i32 %1, -2147483648
  br i1 %7, label %12, label %8

8:                                                ; preds = %6
  %9 = sub nsw i32 0, %1
  %10 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 5
  store i32 %9, i32* %10, align 8
  %11 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 10
  store i8 1, i8* %11, align 8
  br label %12

12:                                               ; preds = %6, %8, %4
  %13 = phi i1 [ true, %4 ], [ true, %8 ], [ false, %6 ]
  ret i1 %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i64 @_ZN7fxcodec16CalculatePitch32Eii(i32, i32) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN7fxcodec19CFX_BmpDecompressor18SaveDecodingStatusENS0_12DecodeStatusE(%"class.fxcodec::CFX_BmpDecompressor"* nocapture, i8 zeroext) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 24
  store i8 %1, i8* %3, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7fxcodec19CFX_BmpDecompressor12ValidateFlagEv(%"class.fxcodec::CFX_BmpDecompressor"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 6
  %3 = load i32, i32* %2, align 4
  %4 = icmp ult i32 %3, 4
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor11DecodeImageEv(%"class.fxcodec::CFX_BmpDecompressor"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 24
  %3 = load i8, i8* %2, align 4
  switch i8 %3, label %32 [
    i8 2, label %4
    i8 3, label %21
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 25, i32 0, i32 0, i32 0, i32 0
  %6 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %5, align 8
  %7 = tail call zeroext i1 @_ZN15CFX_CodecMemory4SeekEm(%class.CFX_CodecMemory* %6, i64 0) #10
  %8 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 0, i32 0
  %11 = load %"class.fxcodec::CFX_BmpContext"*, %"class.fxcodec::CFX_BmpContext"** %10, align 8
  %12 = getelementptr inbounds %"class.fxcodec::CFX_BmpContext", %"class.fxcodec::CFX_BmpContext"* %11, i64 0, i32 2, i32 0
  %13 = load %"class.fxcodec::BmpDecoder::Delegate"*, %"class.fxcodec::BmpDecoder::Delegate"** %12, align 8
  %14 = bitcast %"class.fxcodec::BmpDecoder::Delegate"* %13 to i1 (%"class.fxcodec::BmpDecoder::Delegate"*, i32)***
  %15 = load i1 (%"class.fxcodec::BmpDecoder::Delegate"*, i32)**, i1 (%"class.fxcodec::BmpDecoder::Delegate"*, i32)*** %14, align 8
  %16 = load i1 (%"class.fxcodec::BmpDecoder::Delegate"*, i32)*, i1 (%"class.fxcodec::BmpDecoder::Delegate"*, i32)** %15, align 8
  %17 = tail call zeroext i1 %16(%"class.fxcodec::BmpDecoder::Delegate"* %13, i32 %9) #10
  br i1 %17, label %19, label %18

18:                                               ; preds = %4
  store i8 4, i8* %2, align 4
  br label %32

19:                                               ; preds = %4
  %20 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 17
  store i32 0, i32* %20, align 8
  store i8 3, i8* %2, align 4
  br label %21

21:                                               ; preds = %1, %19
  %22 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 6
  %23 = load i32, i32* %22, align 4
  %24 = icmp ult i32 %23, 4
  br i1 %24, label %25, label %32

25:                                               ; preds = %21
  switch i32 %23, label %32 [
    i32 0, label %26
    i32 3, label %26
    i32 1, label %28
    i32 2, label %30
  ]

26:                                               ; preds = %25, %25
  %27 = tail call zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor9DecodeRGBEv(%"class.fxcodec::CFX_BmpDecompressor"* %0)
  br label %32

28:                                               ; preds = %25
  %29 = tail call zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor10DecodeRLE8Ev(%"class.fxcodec::CFX_BmpDecompressor"* %0)
  br label %32

30:                                               ; preds = %25
  %31 = tail call zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor10DecodeRLE4Ev(%"class.fxcodec::CFX_BmpDecompressor"* %0)
  br label %32

32:                                               ; preds = %1, %25, %21, %30, %28, %26, %18
  %33 = phi i8 [ %31, %30 ], [ %29, %28 ], [ %27, %26 ], [ 0, %18 ], [ 0, %21 ], [ 0, %25 ], [ 0, %1 ]
  ret i8 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor9DecodeRGBEv(%"class.fxcodec::CFX_BmpDecompressor"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.pdfium::span", align 8
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #10
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 8
  %9 = load i64, i64* %8, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #10
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %1
  %12 = icmp slt i64 %9, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %11
  %14 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %14) #12
  unreachable

15:                                               ; preds = %11
  %16 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %9, i64 1) #10
  store i8* %16, i8** %5, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 %9
  store i8* %17, i8** %7, align 8
  %18 = bitcast i8** %6 to i64*
  %19 = ptrtoint i8* %16 to i64
  %20 = sub i64 %9, %19
  %21 = getelementptr i8, i8* %16, i64 %20
  %22 = ptrtoint i8* %21 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 0, i64 %22, i1 false) #10
  %23 = ptrtoint i8* %17 to i64
  store i64 %23, i64* %18, align 8
  br label %24

24:                                               ; preds = %1, %15
  %25 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 17
  %26 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 5
  %27 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 25, i32 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 24
  %29 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 11
  %30 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1, i32 0, i32 0
  %31 = bitcast %"class.std::__1::vector"* %3 to i16**
  %32 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 23
  %33 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 22
  %34 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 21
  %35 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 4
  %36 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1, i32 0, i32 0
  %37 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1, i32 0, i32 1
  %38 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 13
  %39 = bitcast %"class.pdfium::span"* %2 to i8*
  %40 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 10
  %41 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 0, i32 0
  %42 = bitcast %"class.pdfium::span"* %2 to i64*
  %43 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %2, i64 0, i32 1
  %44 = load i32, i32* %25, align 8
  %45 = load i32, i32* %26, align 8
  %46 = icmp ult i32 %44, %45
  br i1 %46, label %47, label %255

47:                                               ; preds = %24, %241
  %48 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %27, align 8
  %49 = icmp eq %class.CFX_CodecMemory* %48, null
  br i1 %49, label %256, label %50

50:                                               ; preds = %47
  %51 = load i64, i64* %8, align 8
  %52 = load i8*, i8** %5, align 8
  %53 = and i64 %51, 4294967295
  %54 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %48, i8* %52, i64 %53) #10
  %55 = icmp eq i64 %54, %53
  br i1 %55, label %56, label %256

56:                                               ; preds = %50
  store i8 3, i8* %28, align 4
  %57 = load i16, i16* %29, align 2
  switch i16 %57, label %215 [
    i16 1, label %61
    i16 4, label %58
    i16 16, label %103
    i16 8, label %209
    i16 24, label %209
    i16 32, label %209
  ]

58:                                               ; preds = %56
  %59 = load i32, i32* %35, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %215, label %84

61:                                               ; preds = %56
  %62 = load i32, i32* %35, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %215, label %64

64:                                               ; preds = %61, %64
  %65 = phi i64 [ %78, %64 ], [ 0, %61 ]
  %66 = phi i32 [ %81, %64 ], [ 0, %61 ]
  %67 = lshr i32 %66, 3
  %68 = zext i32 %67 to i64
  %69 = load i8*, i8** %5, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 %68
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = and i32 %66, 7
  %74 = lshr i32 128, %73
  %75 = and i32 %74, %72
  %76 = icmp ne i32 %75, 0
  %77 = zext i1 %76 to i8
  %78 = add nuw nsw i64 %65, 1
  %79 = load i8*, i8** %30, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 %65
  store i8 %77, i8* %80, align 1
  %81 = add nuw i32 %66, 1
  %82 = load i32, i32* %35, align 4
  %83 = icmp ult i32 %81, %82
  br i1 %83, label %64, label %215

84:                                               ; preds = %58, %84
  %85 = phi i64 [ %97, %84 ], [ 0, %58 ]
  %86 = phi i32 [ %100, %84 ], [ 0, %58 ]
  %87 = and i32 %86, 1
  %88 = icmp eq i32 %87, 0
  %89 = lshr i32 %86, 1
  %90 = zext i32 %89 to i64
  %91 = load i8*, i8** %5, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 %90
  %93 = load i8, i8* %92, align 1
  %94 = and i8 %93, 15
  %95 = lshr i8 %93, 4
  %96 = select i1 %88, i8 %95, i8 %94
  %97 = add nuw nsw i64 %85, 1
  %98 = load i8*, i8** %30, align 8
  %99 = getelementptr inbounds i8, i8* %98, i64 %85
  store i8 %96, i8* %99, align 1
  %100 = add nuw i32 %86, 1
  %101 = load i32, i32* %35, align 4
  %102 = icmp ult i32 %100, %101
  br i1 %102, label %84, label %215

103:                                              ; preds = %56
  %104 = load i16*, i16** %31, align 8
  %105 = load i32, i32* %34, align 8
  %106 = insertelement <16 x i32> undef, i32 %105, i32 0
  %107 = shufflevector <16 x i32> %106, <16 x i32> undef, <16 x i32> zeroinitializer
  %108 = load i32, i32* %33, align 4
  %109 = insertelement <16 x i32> undef, i32 %108, i32 0
  %110 = shufflevector <16 x i32> %109, <16 x i32> undef, <16 x i32> zeroinitializer
  %111 = load i32, i32* %32, align 8
  %112 = insertelement <16 x i32> undef, i32 %111, i32 0
  %113 = shufflevector <16 x i32> %112, <16 x i32> undef, <16 x i32> zeroinitializer
  %114 = and <16 x i32> %113, <i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 16384, i32 32768>
  %115 = icmp ne <16 x i32> %114, zeroinitializer
  %116 = zext <16 x i1> %115 to <16 x i8>
  %117 = and <16 x i32> %110, <i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 16384, i32 32768>
  %118 = icmp ne <16 x i32> %117, zeroinitializer
  %119 = zext <16 x i1> %118 to <16 x i8>
  %120 = and <16 x i32> %107, <i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 16384, i32 32768>
  %121 = icmp ne <16 x i32> %120, zeroinitializer
  %122 = zext <16 x i1> %121 to <16 x i8>
  %123 = shufflevector <16 x i8> %116, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %124 = add <16 x i8> %123, %116
  %125 = shufflevector <16 x i8> %124, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = add <16 x i8> %124, %125
  %127 = shufflevector <16 x i8> %126, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %128 = add <16 x i8> %126, %127
  %129 = shufflevector <16 x i8> %128, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %130 = add <16 x i8> %128, %129
  %131 = extractelement <16 x i8> %130, i32 0
  %132 = shufflevector <16 x i8> %119, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %133 = add <16 x i8> %132, %119
  %134 = shufflevector <16 x i8> %133, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %135 = add <16 x i8> %133, %134
  %136 = shufflevector <16 x i8> %135, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %137 = add <16 x i8> %135, %136
  %138 = shufflevector <16 x i8> %137, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %139 = add <16 x i8> %137, %138
  %140 = extractelement <16 x i8> %139, i32 0
  %141 = shufflevector <16 x i8> %122, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = add <16 x i8> %141, %122
  %143 = shufflevector <16 x i8> %142, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %144 = add <16 x i8> %142, %143
  %145 = shufflevector <16 x i8> %144, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %146 = add <16 x i8> %144, %145
  %147 = shufflevector <16 x i8> %146, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %148 = add <16 x i8> %146, %147
  %149 = extractelement <16 x i8> %148, i32 0
  %150 = add i8 %140, %131
  %151 = add i8 %149, %150
  %152 = icmp ugt i8 %131, 8
  %153 = icmp ult i8 %150, 8
  %154 = or i1 %152, %153
  %155 = icmp ult i8 %151, 8
  %156 = or i1 %154, %155
  br i1 %156, label %256, label %157

157:                                              ; preds = %103
  %158 = load i32, i32* %35, align 4
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %215, label %160

160:                                              ; preds = %157
  %161 = add i8 %151, -8
  %162 = add i8 %150, -8
  %163 = sub nuw nsw i8 8, %131
  %164 = zext i8 %163 to i32
  %165 = zext i8 %162 to i32
  %166 = zext i8 %161 to i32
  br label %167

167:                                              ; preds = %160, %167
  %168 = phi i64 [ 0, %160 ], [ %203, %167 ]
  %169 = phi i32 [ 0, %160 ], [ %206, %167 ]
  %170 = phi i16* [ %104, %160 ], [ %196, %167 ]
  %171 = bitcast i16* %170 to i8*
  %172 = getelementptr inbounds i8, i8* %171, i64 1
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i16
  %175 = shl nuw i16 %174, 8
  %176 = load i8, i8* %171, align 1
  %177 = zext i8 %176 to i16
  %178 = or i16 %175, %177
  store i16 %178, i16* %170, align 2
  %179 = zext i16 %178 to i32
  %180 = load i32, i32* %32, align 8
  %181 = and i32 %180, %179
  %182 = shl i32 %181, %164
  %183 = trunc i32 %182 to i8
  %184 = add nuw nsw i64 %168, 1
  %185 = load i8*, i8** %30, align 8
  %186 = getelementptr inbounds i8, i8* %185, i64 %168
  store i8 %183, i8* %186, align 1
  %187 = load i16, i16* %170, align 2
  %188 = zext i16 %187 to i32
  %189 = load i32, i32* %33, align 4
  %190 = and i32 %189, %188
  %191 = lshr i32 %190, %165
  %192 = trunc i32 %191 to i8
  %193 = add nuw nsw i64 %168, 2
  %194 = load i8*, i8** %30, align 8
  %195 = getelementptr inbounds i8, i8* %194, i64 %184
  store i8 %192, i8* %195, align 1
  %196 = getelementptr inbounds i16, i16* %170, i64 1
  %197 = load i16, i16* %170, align 2
  %198 = zext i16 %197 to i32
  %199 = load i32, i32* %34, align 8
  %200 = and i32 %199, %198
  %201 = lshr i32 %200, %166
  %202 = trunc i32 %201 to i8
  %203 = add nuw nsw i64 %168, 3
  %204 = load i8*, i8** %30, align 8
  %205 = getelementptr inbounds i8, i8* %204, i64 %193
  store i8 %202, i8* %205, align 1
  %206 = add nuw i32 %169, 1
  %207 = load i32, i32* %35, align 4
  %208 = icmp ult i32 %206, %207
  br i1 %208, label %167, label %215

209:                                              ; preds = %56, %56, %56
  %210 = load i64, i64* %8, align 8
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %215, label %212

212:                                              ; preds = %209
  %213 = load i8*, i8** %5, align 8
  %214 = load i8*, i8** %30, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %214, i8* align 1 %213, i64 %210, i1 false) #10
  br label %215

215:                                              ; preds = %167, %84, %64, %61, %58, %157, %212, %209, %56
  %216 = load i8*, i8** %36, align 8
  %217 = load i8*, i8** %37, align 8
  %218 = icmp eq i8* %216, %217
  %219 = ptrtoint i8* %216 to i64
  %220 = ptrtoint i8* %217 to i64
  br i1 %218, label %231, label %221

221:                                              ; preds = %215
  %222 = load i32, i32* %38, align 8
  br label %225

223:                                              ; preds = %225
  %224 = icmp eq i8* %230, %217
  br i1 %224, label %231, label %225

225:                                              ; preds = %221, %223
  %226 = phi i8* [ %216, %221 ], [ %230, %223 ]
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = icmp sgt i32 %222, %228
  %230 = getelementptr inbounds i8, i8* %226, i64 1
  br i1 %229, label %223, label %256

231:                                              ; preds = %223, %215
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39)
  %232 = load i8, i8* %40, align 8, !range !2
  %233 = icmp eq i8 %232, 0
  br i1 %233, label %236, label %234

234:                                              ; preds = %231
  %235 = load i32, i32* %25, align 8
  br label %241

236:                                              ; preds = %231
  %237 = load i32, i32* %26, align 8
  %238 = load i32, i32* %25, align 8
  %239 = xor i32 %238, -1
  %240 = add i32 %237, %239
  br label %241

241:                                              ; preds = %236, %234
  %242 = phi i32 [ %235, %234 ], [ %240, %236 ]
  %243 = load %"class.fxcodec::CFX_BmpContext"*, %"class.fxcodec::CFX_BmpContext"** %41, align 8
  %244 = getelementptr inbounds %"class.fxcodec::CFX_BmpContext", %"class.fxcodec::CFX_BmpContext"* %243, i64 0, i32 2, i32 0
  %245 = load %"class.fxcodec::BmpDecoder::Delegate"*, %"class.fxcodec::BmpDecoder::Delegate"** %244, align 8
  %246 = sub i64 %220, %219
  store i64 %219, i64* %42, align 8
  store i64 %246, i64* %43, align 8
  %247 = bitcast %"class.fxcodec::BmpDecoder::Delegate"* %245 to void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)***
  %248 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)**, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*** %247, align 8
  %249 = getelementptr inbounds void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %248, i64 1
  %250 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %249, align 8
  call void %250(%"class.fxcodec::BmpDecoder::Delegate"* %245, i32 %242, %"class.pdfium::span"* nonnull %2) #10
  %251 = load i32, i32* %25, align 8
  %252 = add i32 %251, 1
  store i32 %252, i32* %25, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39)
  %253 = load i32, i32* %26, align 8
  %254 = icmp ult i32 %252, %253
  br i1 %254, label %47, label %255

255:                                              ; preds = %241, %24
  store i8 4, i8* %28, align 4
  br label %256

256:                                              ; preds = %47, %103, %50, %225, %255
  %257 = phi i8 [ 1, %255 ], [ 0, %225 ], [ 2, %50 ], [ 2, %103 ], [ 2, %47 ]
  %258 = load i8*, i8** %5, align 8
  %259 = icmp eq i8* %258, null
  br i1 %259, label %263, label %260

260:                                              ; preds = %256
  %261 = ptrtoint i8* %258 to i64
  %262 = bitcast i8** %6 to i64*
  store i64 %261, i64* %262, align 8
  call void @_Z7FX_FreePv(i8* nonnull %258) #10
  br label %263

263:                                              ; preds = %256, %260
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #10
  ret i8 %257
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor10DecodeRLE8Ev(%"class.fxcodec::CFX_BmpDecompressor"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.pdfium::span", align 8
  %3 = alloca %"class.pdfium::span", align 8
  %4 = alloca %"class.pdfium::span", align 8
  %5 = alloca i8, align 1
  %6 = alloca [2 x i8], align 1
  %7 = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #10
  store i8 -86, i8* %5, align 1
  %8 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 18
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 25, i32 0, i32 0, i32 0, i32 0
  %10 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %9, align 8
  %11 = icmp eq %class.CFX_CodecMemory* %10, null
  br i1 %11, label %349, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 17
  %14 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 5
  %15 = bitcast %"class.pdfium::span"* %4 to i8*
  %16 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 10
  %17 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1
  %19 = bitcast %"class.std::__1::vector"* %18 to i64*
  %20 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1, i32 0, i32 1
  %21 = bitcast i8** %20 to i64*
  %22 = bitcast %"class.pdfium::span"* %4 to i64*
  %23 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %4, i64 0, i32 1
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %18, i64 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 24
  %26 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 9
  %27 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1, i32 0, i32 0
  %28 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 13
  %29 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 0
  %30 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 1
  %31 = bitcast %"class.pdfium::span"* %3 to i8*
  %32 = bitcast %"class.pdfium::span"* %3 to i64*
  %33 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %3, i64 0, i32 1
  %34 = getelementptr inbounds i8, i8* %7, i64 1
  br label %35

35:                                               ; preds = %12, %345
  %36 = phi %class.CFX_CodecMemory* [ %10, %12 ], [ %347, %345 ]
  %37 = phi i8 [ undef, %12 ], [ %346, %345 ]
  br label %38

38:                                               ; preds = %35, %82
  %39 = phi %class.CFX_CodecMemory* [ %36, %35 ], [ %83, %82 ]
  %40 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %39, i8* nonnull %5, i64 1) #10
  %41 = icmp eq i64 %40, 1
  br i1 %41, label %42, label %349

42:                                               ; preds = %38
  %43 = load i8, i8* %5, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %234

45:                                               ; preds = %42
  %46 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %9, align 8
  %47 = icmp eq %class.CFX_CodecMemory* %46, null
  br i1 %47, label %349, label %48

48:                                               ; preds = %45
  %49 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %46, i8* nonnull %5, i64 1) #10
  %50 = icmp eq i64 %49, 1
  br i1 %50, label %51, label %349

51:                                               ; preds = %48
  %52 = load i8, i8* %5, align 1
  switch i8 %52, label %169 [
    i8 0, label %53
    i8 1, label %85
    i8 2, label %111
  ]

53:                                               ; preds = %51
  %54 = load i32, i32* %13, align 8
  %55 = load i32, i32* %14, align 8
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %58, label %57

57:                                               ; preds = %53
  store i8 4, i8* %25, align 4
  br label %349

58:                                               ; preds = %53
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15)
  %59 = load i8, i8* %16, align 8, !range !2
  %60 = icmp eq i8 %59, 0
  %61 = xor i32 %54, -1
  %62 = add i32 %55, %61
  %63 = select i1 %60, i32 %62, i32 %54
  %64 = load %"class.fxcodec::CFX_BmpContext"*, %"class.fxcodec::CFX_BmpContext"** %17, align 8
  %65 = getelementptr inbounds %"class.fxcodec::CFX_BmpContext", %"class.fxcodec::CFX_BmpContext"* %64, i64 0, i32 2, i32 0
  %66 = load %"class.fxcodec::BmpDecoder::Delegate"*, %"class.fxcodec::BmpDecoder::Delegate"** %65, align 8
  %67 = load i64, i64* %19, align 8
  %68 = load i64, i64* %21, align 8
  %69 = sub i64 %68, %67
  store i64 %67, i64* %22, align 8
  store i64 %69, i64* %23, align 8
  %70 = bitcast %"class.fxcodec::BmpDecoder::Delegate"* %66 to void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)***
  %71 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)**, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*** %70, align 8
  %72 = getelementptr inbounds void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %71, i64 1
  %73 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %72, align 8
  call void %73(%"class.fxcodec::BmpDecoder::Delegate"* %66, i32 %63, %"class.pdfium::span"* nonnull %4) #10
  %74 = load i32, i32* %13, align 8
  %75 = add i32 %74, 1
  store i32 %75, i32* %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15)
  store i32 0, i32* %8, align 4
  %76 = load i8*, i8** %24, align 8
  %77 = load i64, i64* %21, align 8
  %78 = ptrtoint i8* %76 to i64
  %79 = sub i64 %77, %78
  %80 = icmp sgt i64 %79, 0
  br i1 %80, label %81, label %82

81:                                               ; preds = %58
  call void @llvm.memset.p0i8.i64(i8* align 1 %76, i8 0, i64 %79, i1 false)
  br label %82

82:                                               ; preds = %81, %58
  store i8 3, i8* %25, align 4
  %83 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %9, align 8
  %84 = icmp eq %class.CFX_CodecMemory* %83, null
  br i1 %84, label %349, label %38

85:                                               ; preds = %51
  %86 = load i32, i32* %13, align 8
  %87 = load i32, i32* %14, align 8
  %88 = icmp ult i32 %86, %87
  br i1 %88, label %89, label %110

89:                                               ; preds = %85
  %90 = bitcast %"class.pdfium::span"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %90)
  %91 = load i8, i8* %16, align 8, !range !2
  %92 = icmp eq i8 %91, 0
  %93 = xor i32 %86, -1
  %94 = add i32 %87, %93
  %95 = select i1 %92, i32 %94, i32 %86
  %96 = load %"class.fxcodec::CFX_BmpContext"*, %"class.fxcodec::CFX_BmpContext"** %17, align 8
  %97 = getelementptr inbounds %"class.fxcodec::CFX_BmpContext", %"class.fxcodec::CFX_BmpContext"* %96, i64 0, i32 2, i32 0
  %98 = load %"class.fxcodec::BmpDecoder::Delegate"*, %"class.fxcodec::BmpDecoder::Delegate"** %97, align 8
  %99 = load i64, i64* %19, align 8
  %100 = load i64, i64* %21, align 8
  %101 = sub i64 %100, %99
  %102 = bitcast %"class.pdfium::span"* %2 to i64*
  store i64 %99, i64* %102, align 8
  %103 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %2, i64 0, i32 1
  store i64 %101, i64* %103, align 8
  %104 = bitcast %"class.fxcodec::BmpDecoder::Delegate"* %98 to void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)***
  %105 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)**, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*** %104, align 8
  %106 = getelementptr inbounds void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %105, i64 1
  %107 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %106, align 8
  call void %107(%"class.fxcodec::BmpDecoder::Delegate"* %98, i32 %95, %"class.pdfium::span"* nonnull %2) #10
  %108 = load i32, i32* %13, align 8
  %109 = add i32 %108, 1
  store i32 %109, i32* %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %90)
  br label %110

110:                                              ; preds = %89, %85
  store i8 4, i8* %25, align 4
  br label %349

111:                                              ; preds = %51
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %29) #10
  store i8 -86, i8* %29, align 1
  store i8 -86, i8* %30, align 1
  %112 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %9, align 8
  %113 = icmp eq %class.CFX_CodecMemory* %112, null
  br i1 %113, label %166, label %114

114:                                              ; preds = %111
  %115 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %112, i8* nonnull %29, i64 2) #10
  %116 = icmp eq i64 %115, 2
  br i1 %116, label %117, label %166

117:                                              ; preds = %114
  %118 = load i8, i8* %29, align 1
  %119 = zext i8 %118 to i32
  %120 = load i32, i32* %8, align 4
  %121 = add i32 %120, %119
  store i32 %121, i32* %8, align 4
  %122 = load i32, i32* %13, align 8
  %123 = load i8, i8* %30, align 1
  %124 = zext i8 %123 to i32
  %125 = add i32 %122, %124
  %126 = zext i32 %121 to i64
  %127 = load i64, i64* %26, align 8
  %128 = icmp ugt i64 %127, %126
  br i1 %128, label %129, label %166

129:                                              ; preds = %117
  %130 = load i32, i32* %14, align 8
  %131 = icmp ult i32 %125, %130
  br i1 %131, label %132, label %166

132:                                              ; preds = %129
  %133 = icmp ult i32 %122, %125
  br i1 %133, label %134, label %168

134:                                              ; preds = %132, %151
  %135 = load i8*, i8** %24, align 8
  %136 = load i64, i64* %21, align 8
  %137 = ptrtoint i8* %135 to i64
  %138 = sub i64 %136, %137
  %139 = icmp sgt i64 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %134
  call void @llvm.memset.p0i8.i64(i8* align 1 %135, i8 0, i64 %138, i1 false)
  br label %141

141:                                              ; preds = %140, %134
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31)
  %142 = load i8, i8* %16, align 8, !range !2
  %143 = icmp eq i8 %142, 0
  br i1 %143, label %146, label %144

144:                                              ; preds = %141
  %145 = load i32, i32* %13, align 8
  br label %151

146:                                              ; preds = %141
  %147 = load i32, i32* %14, align 8
  %148 = load i32, i32* %13, align 8
  %149 = xor i32 %148, -1
  %150 = add i32 %147, %149
  br label %151

151:                                              ; preds = %144, %146
  %152 = phi i32 [ %145, %144 ], [ %150, %146 ]
  %153 = load %"class.fxcodec::CFX_BmpContext"*, %"class.fxcodec::CFX_BmpContext"** %17, align 8
  %154 = getelementptr inbounds %"class.fxcodec::CFX_BmpContext", %"class.fxcodec::CFX_BmpContext"* %153, i64 0, i32 2, i32 0
  %155 = load %"class.fxcodec::BmpDecoder::Delegate"*, %"class.fxcodec::BmpDecoder::Delegate"** %154, align 8
  %156 = load i64, i64* %19, align 8
  %157 = load i64, i64* %21, align 8
  %158 = sub i64 %157, %156
  store i64 %156, i64* %32, align 8
  store i64 %158, i64* %33, align 8
  %159 = bitcast %"class.fxcodec::BmpDecoder::Delegate"* %155 to void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)***
  %160 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)**, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*** %159, align 8
  %161 = getelementptr inbounds void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %160, i64 1
  %162 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %161, align 8
  call void %162(%"class.fxcodec::BmpDecoder::Delegate"* %155, i32 %152, %"class.pdfium::span"* nonnull %3) #10
  %163 = load i32, i32* %13, align 8
  %164 = add i32 %163, 1
  store i32 %164, i32* %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31)
  %165 = icmp ult i32 %164, %125
  br i1 %165, label %134, label %168

166:                                              ; preds = %114, %129, %117, %111
  %167 = phi i8 [ 0, %117 ], [ 0, %129 ], [ 2, %114 ], [ 2, %111 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %29) #10
  br label %349

168:                                              ; preds = %151, %132
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %29) #10
  br label %345

169:                                              ; preds = %51
  %170 = zext i8 %52 to i32
  %171 = load i64, i64* %26, align 8
  %172 = load i32, i32* %8, align 4
  %173 = trunc i64 %171 to i32
  %174 = sub i32 %173, %172
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %174, %170
  %177 = or i1 %175, %176
  br i1 %177, label %349, label %178

178:                                              ; preds = %169
  %179 = and i32 %170, 1
  %180 = add nuw nsw i32 %179, %170
  %181 = zext i32 %180 to i64
  %182 = icmp eq i32 %180, 0
  br i1 %182, label %189, label %183

183:                                              ; preds = %178
  %184 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %181, i64 1) #10
  %185 = ptrtoint i8* %184 to i64
  %186 = sub i64 %181, %185
  %187 = getelementptr i8, i8* %184, i64 %186
  %188 = ptrtoint i8* %187 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %184, i8 0, i64 %188, i1 false) #10
  br label %189

189:                                              ; preds = %178, %183
  %190 = phi i8* [ null, %178 ], [ %184, %183 ]
  %191 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %9, align 8
  %192 = icmp eq %class.CFX_CodecMemory* %191, null
  br i1 %192, label %227, label %193

193:                                              ; preds = %189
  %194 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %191, i8* %190, i64 %181) #10
  %195 = icmp eq i64 %194, %181
  br i1 %195, label %196, label %227

196:                                              ; preds = %193
  %197 = load i8, i8* %5, align 1
  %198 = icmp eq i8 %197, 0
  br i1 %198, label %206, label %199

199:                                              ; preds = %196
  %200 = zext i8 %197 to i64
  %201 = load i8*, i8** %27, align 8
  %202 = load i32, i32* %8, align 4
  %203 = zext i32 %202 to i64
  %204 = getelementptr inbounds i8, i8* %201, i64 %203
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %204, i8* align 1 %190, i64 %200, i1 false) #10
  %205 = load i8, i8* %5, align 1
  br label %206

206:                                              ; preds = %196, %199
  %207 = phi i8 [ 0, %196 ], [ %205, %199 ]
  %208 = load i32, i32* %8, align 4
  %209 = zext i8 %207 to i32
  %210 = add i32 %208, %209
  %211 = icmp ult i32 %208, %210
  br i1 %211, label %212, label %226

212:                                              ; preds = %206
  %213 = zext i32 %208 to i64
  %214 = load i8*, i8** %27, align 8
  %215 = load i32, i32* %28, align 8
  %216 = zext i32 %210 to i64
  br label %219

217:                                              ; preds = %219
  %218 = icmp ult i64 %225, %216
  br i1 %218, label %219, label %226

219:                                              ; preds = %212, %217
  %220 = phi i64 [ %213, %212 ], [ %225, %217 ]
  %221 = getelementptr inbounds i8, i8* %214, i64 %220
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = icmp sgt i32 %215, %223
  %225 = add nuw nsw i64 %220, 1
  br i1 %224, label %217, label %227

226:                                              ; preds = %217, %206
  store i32 %210, i32* %8, align 4
  br label %227

227:                                              ; preds = %219, %189, %193, %226
  %228 = phi i32 [ 0, %226 ], [ 1, %193 ], [ 1, %189 ], [ 1, %219 ]
  %229 = phi i8 [ %37, %226 ], [ 2, %193 ], [ 2, %189 ], [ 0, %219 ]
  %230 = icmp eq i8* %190, null
  br i1 %230, label %232, label %231

231:                                              ; preds = %227
  call void @_Z7FX_FreePv(i8* nonnull %190) #10
  br label %232

232:                                              ; preds = %231, %227
  %233 = icmp eq i32 %228, 0
  br i1 %233, label %345, label %349

234:                                              ; preds = %42
  %235 = zext i8 %43 to i32
  %236 = load i64, i64* %26, align 8
  %237 = load i32, i32* %8, align 4
  %238 = trunc i64 %236 to i32
  %239 = sub i32 %238, %237
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %239, %235
  %242 = or i1 %240, %241
  br i1 %242, label %349, label %243

243:                                              ; preds = %234
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #10
  store i8 -86, i8* %7, align 1
  %244 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %9, align 8
  %245 = icmp eq %class.CFX_CodecMemory* %244, null
  br i1 %245, label %339, label %246

246:                                              ; preds = %243
  %247 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %244, i8* nonnull %7, i64 1) #10
  %248 = icmp eq i64 %247, 1
  br i1 %248, label %249, label %339

249:                                              ; preds = %246
  %250 = load i8*, i8** %27, align 8
  %251 = load i32, i32* %8, align 4
  %252 = zext i32 %251 to i64
  %253 = load i8, i8* %5, align 1
  %254 = icmp eq i8 %253, 0
  br i1 %254, label %330, label %255

255:                                              ; preds = %249
  %256 = zext i8 %253 to i64
  %257 = getelementptr inbounds i8, i8* %250, i64 %252
  %258 = icmp ult i8 %253, 32
  br i1 %258, label %316, label %259

259:                                              ; preds = %255
  %260 = add nuw nsw i64 %256, %252
  %261 = getelementptr i8, i8* %250, i64 %260
  %262 = icmp ult i8* %257, %34
  %263 = icmp ult i8* %7, %261
  %264 = and i1 %262, %263
  br i1 %264, label %316, label %265

265:                                              ; preds = %259
  %266 = and i64 %256, 224
  %267 = sub nsw i64 %256, %266
  %268 = getelementptr i8, i8* %257, i64 %266
  %269 = add nsw i64 %266, -32
  %270 = lshr exact i64 %269, 5
  %271 = add nuw nsw i64 %270, 1
  %272 = and i64 %271, 1
  %273 = icmp eq i64 %269, 0
  br i1 %273, label %301, label %274

274:                                              ; preds = %265
  %275 = sub nuw nsw i64 %271, %272
  %276 = load i8, i8* %7, align 1, !alias.scope !3
  %277 = insertelement <16 x i8> undef, i8 %276, i32 0
  %278 = shufflevector <16 x i8> %277, <16 x i8> undef, <16 x i32> zeroinitializer
  %279 = insertelement <16 x i8> undef, i8 %276, i32 0
  %280 = shufflevector <16 x i8> %279, <16 x i8> undef, <16 x i32> zeroinitializer
  %281 = load i8, i8* %7, align 1, !alias.scope !3
  %282 = insertelement <16 x i8> undef, i8 %281, i32 0
  %283 = shufflevector <16 x i8> %282, <16 x i8> undef, <16 x i32> zeroinitializer
  %284 = insertelement <16 x i8> undef, i8 %281, i32 0
  %285 = shufflevector <16 x i8> %284, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %286

286:                                              ; preds = %286, %274
  %287 = phi i64 [ 0, %274 ], [ %298, %286 ]
  %288 = phi i64 [ %275, %274 ], [ %299, %286 ]
  %289 = getelementptr i8, i8* %257, i64 %287
  %290 = bitcast i8* %289 to <16 x i8>*
  store <16 x i8> %278, <16 x i8>* %290, align 1, !alias.scope !6, !noalias !3
  %291 = getelementptr i8, i8* %289, i64 16
  %292 = bitcast i8* %291 to <16 x i8>*
  store <16 x i8> %280, <16 x i8>* %292, align 1, !alias.scope !6, !noalias !3
  %293 = or i64 %287, 32
  %294 = getelementptr i8, i8* %257, i64 %293
  %295 = bitcast i8* %294 to <16 x i8>*
  store <16 x i8> %283, <16 x i8>* %295, align 1, !alias.scope !6, !noalias !3
  %296 = getelementptr i8, i8* %294, i64 16
  %297 = bitcast i8* %296 to <16 x i8>*
  store <16 x i8> %285, <16 x i8>* %297, align 1, !alias.scope !6, !noalias !3
  %298 = add i64 %287, 64
  %299 = add i64 %288, -2
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %301, label %286, !llvm.loop !8

301:                                              ; preds = %286, %265
  %302 = phi i64 [ 0, %265 ], [ %298, %286 ]
  %303 = icmp eq i64 %272, 0
  br i1 %303, label %314, label %304

304:                                              ; preds = %301
  %305 = getelementptr i8, i8* %257, i64 %302
  %306 = load i8, i8* %7, align 1, !alias.scope !3
  %307 = insertelement <16 x i8> undef, i8 %306, i32 0
  %308 = shufflevector <16 x i8> %307, <16 x i8> undef, <16 x i32> zeroinitializer
  %309 = insertelement <16 x i8> undef, i8 %306, i32 0
  %310 = shufflevector <16 x i8> %309, <16 x i8> undef, <16 x i32> zeroinitializer
  %311 = bitcast i8* %305 to <16 x i8>*
  store <16 x i8> %308, <16 x i8>* %311, align 1, !alias.scope !6, !noalias !3
  %312 = getelementptr i8, i8* %305, i64 16
  %313 = bitcast i8* %312 to <16 x i8>*
  store <16 x i8> %310, <16 x i8>* %313, align 1, !alias.scope !6, !noalias !3
  br label %314

314:                                              ; preds = %301, %304
  %315 = icmp eq i64 %266, %256
  br i1 %315, label %326, label %316

316:                                              ; preds = %314, %259, %255
  %317 = phi i64 [ %256, %259 ], [ %256, %255 ], [ %267, %314 ]
  %318 = phi i8* [ %257, %259 ], [ %257, %255 ], [ %268, %314 ]
  br label %319

319:                                              ; preds = %316, %319
  %320 = phi i64 [ %324, %319 ], [ %317, %316 ]
  %321 = phi i8* [ %323, %319 ], [ %318, %316 ]
  %322 = load i8, i8* %7, align 1
  store i8 %322, i8* %321, align 1
  %323 = getelementptr inbounds i8, i8* %321, i64 1
  %324 = add nsw i64 %320, -1
  %325 = icmp sgt i64 %324, 0
  br i1 %325, label %319, label %326, !llvm.loop !10

326:                                              ; preds = %319, %314
  %327 = load i32, i32* %8, align 4
  %328 = load i8*, i8** %27, align 8
  %329 = zext i32 %327 to i64
  br label %330

330:                                              ; preds = %326, %249
  %331 = phi i64 [ %329, %326 ], [ %252, %249 ]
  %332 = phi i8* [ %328, %326 ], [ %250, %249 ]
  %333 = phi i32 [ %327, %326 ], [ %251, %249 ]
  %334 = getelementptr inbounds i8, i8* %332, i64 %331
  %335 = load i8, i8* %334, align 1
  %336 = zext i8 %335 to i32
  %337 = load i32, i32* %28, align 8
  %338 = icmp sgt i32 %337, %336
  br i1 %338, label %341, label %339

339:                                              ; preds = %246, %330, %243
  %340 = phi i8 [ 0, %330 ], [ 2, %246 ], [ 2, %243 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #10
  br label %349

341:                                              ; preds = %330
  %342 = load i8, i8* %5, align 1
  %343 = zext i8 %342 to i32
  %344 = add i32 %333, %343
  store i32 %344, i32* %8, align 4
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #10
  br label %345

345:                                              ; preds = %341, %168, %232
  %346 = phi i8 [ %229, %232 ], [ %37, %168 ], [ %37, %341 ]
  %347 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %9, align 8
  %348 = icmp eq %class.CFX_CodecMemory* %347, null
  br i1 %348, label %349, label %35

349:                                              ; preds = %345, %234, %169, %232, %38, %48, %82, %45, %1, %339, %166, %110, %57
  %350 = phi i8 [ 1, %110 ], [ 0, %57 ], [ %167, %166 ], [ %340, %339 ], [ 2, %1 ], [ 2, %45 ], [ 2, %82 ], [ 2, %48 ], [ 2, %38 ], [ 2, %345 ], [ %229, %232 ], [ 0, %169 ], [ 0, %234 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #10
  ret i8 %350
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN7fxcodec19CFX_BmpDecompressor10DecodeRLE4Ev(%"class.fxcodec::CFX_BmpDecompressor"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.pdfium::span", align 8
  %3 = alloca %"class.pdfium::span", align 8
  %4 = alloca %"class.pdfium::span", align 8
  %5 = alloca i8, align 1
  %6 = alloca [2 x i8], align 1
  %7 = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #10
  store i8 -86, i8* %5, align 1
  %8 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 18
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 25, i32 0, i32 0, i32 0, i32 0
  %10 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %9, align 8
  %11 = icmp eq %class.CFX_CodecMemory* %10, null
  br i1 %11, label %300, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 17
  %14 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 5
  %15 = bitcast %"class.pdfium::span"* %4 to i8*
  %16 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 10
  %17 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1
  %19 = bitcast %"class.std::__1::vector"* %18 to i64*
  %20 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1, i32 0, i32 1
  %21 = bitcast i8** %20 to i64*
  %22 = bitcast %"class.pdfium::span"* %4 to i64*
  %23 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %4, i64 0, i32 1
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %18, i64 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 24
  %26 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 9
  %27 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 8
  %28 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 13
  %29 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 1, i32 0, i32 0
  %30 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 0
  %31 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 1
  %32 = bitcast %"class.pdfium::span"* %3 to i8*
  %33 = bitcast %"class.pdfium::span"* %3 to i64*
  %34 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %3, i64 0, i32 1
  br label %35

35:                                               ; preds = %12, %296
  %36 = phi %class.CFX_CodecMemory* [ %10, %12 ], [ %298, %296 ]
  %37 = phi i8 [ undef, %12 ], [ %297, %296 ]
  br label %38

38:                                               ; preds = %35, %82
  %39 = phi %class.CFX_CodecMemory* [ %36, %35 ], [ %83, %82 ]
  %40 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %39, i8* nonnull %5, i64 1) #10
  %41 = icmp eq i64 %40, 1
  br i1 %41, label %42, label %300

42:                                               ; preds = %38
  %43 = load i8, i8* %5, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %244

45:                                               ; preds = %42
  %46 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %9, align 8
  %47 = icmp eq %class.CFX_CodecMemory* %46, null
  br i1 %47, label %300, label %48

48:                                               ; preds = %45
  %49 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %46, i8* nonnull %5, i64 1) #10
  %50 = icmp eq i64 %49, 1
  br i1 %50, label %51, label %300

51:                                               ; preds = %48
  %52 = load i8, i8* %5, align 1
  switch i8 %52, label %169 [
    i8 0, label %53
    i8 1, label %85
    i8 2, label %111
  ]

53:                                               ; preds = %51
  %54 = load i32, i32* %13, align 8
  %55 = load i32, i32* %14, align 8
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %58, label %57

57:                                               ; preds = %53
  store i8 4, i8* %25, align 4
  br label %300

58:                                               ; preds = %53
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15)
  %59 = load i8, i8* %16, align 8, !range !2
  %60 = icmp eq i8 %59, 0
  %61 = xor i32 %54, -1
  %62 = add i32 %55, %61
  %63 = select i1 %60, i32 %62, i32 %54
  %64 = load %"class.fxcodec::CFX_BmpContext"*, %"class.fxcodec::CFX_BmpContext"** %17, align 8
  %65 = getelementptr inbounds %"class.fxcodec::CFX_BmpContext", %"class.fxcodec::CFX_BmpContext"* %64, i64 0, i32 2, i32 0
  %66 = load %"class.fxcodec::BmpDecoder::Delegate"*, %"class.fxcodec::BmpDecoder::Delegate"** %65, align 8
  %67 = load i64, i64* %19, align 8
  %68 = load i64, i64* %21, align 8
  %69 = sub i64 %68, %67
  store i64 %67, i64* %22, align 8
  store i64 %69, i64* %23, align 8
  %70 = bitcast %"class.fxcodec::BmpDecoder::Delegate"* %66 to void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)***
  %71 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)**, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*** %70, align 8
  %72 = getelementptr inbounds void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %71, i64 1
  %73 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %72, align 8
  call void %73(%"class.fxcodec::BmpDecoder::Delegate"* %66, i32 %63, %"class.pdfium::span"* nonnull %4) #10
  %74 = load i32, i32* %13, align 8
  %75 = add i32 %74, 1
  store i32 %75, i32* %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15)
  store i32 0, i32* %8, align 4
  %76 = load i8*, i8** %24, align 8
  %77 = load i64, i64* %21, align 8
  %78 = ptrtoint i8* %76 to i64
  %79 = sub i64 %77, %78
  %80 = icmp sgt i64 %79, 0
  br i1 %80, label %81, label %82

81:                                               ; preds = %58
  call void @llvm.memset.p0i8.i64(i8* align 1 %76, i8 0, i64 %79, i1 false)
  br label %82

82:                                               ; preds = %81, %58
  store i8 3, i8* %25, align 4
  %83 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %9, align 8
  %84 = icmp eq %class.CFX_CodecMemory* %83, null
  br i1 %84, label %300, label %38

85:                                               ; preds = %51
  %86 = load i32, i32* %13, align 8
  %87 = load i32, i32* %14, align 8
  %88 = icmp ult i32 %86, %87
  br i1 %88, label %89, label %110

89:                                               ; preds = %85
  %90 = bitcast %"class.pdfium::span"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %90)
  %91 = load i8, i8* %16, align 8, !range !2
  %92 = icmp eq i8 %91, 0
  %93 = xor i32 %86, -1
  %94 = add i32 %87, %93
  %95 = select i1 %92, i32 %94, i32 %86
  %96 = load %"class.fxcodec::CFX_BmpContext"*, %"class.fxcodec::CFX_BmpContext"** %17, align 8
  %97 = getelementptr inbounds %"class.fxcodec::CFX_BmpContext", %"class.fxcodec::CFX_BmpContext"* %96, i64 0, i32 2, i32 0
  %98 = load %"class.fxcodec::BmpDecoder::Delegate"*, %"class.fxcodec::BmpDecoder::Delegate"** %97, align 8
  %99 = load i64, i64* %19, align 8
  %100 = load i64, i64* %21, align 8
  %101 = sub i64 %100, %99
  %102 = bitcast %"class.pdfium::span"* %2 to i64*
  store i64 %99, i64* %102, align 8
  %103 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %2, i64 0, i32 1
  store i64 %101, i64* %103, align 8
  %104 = bitcast %"class.fxcodec::BmpDecoder::Delegate"* %98 to void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)***
  %105 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)**, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*** %104, align 8
  %106 = getelementptr inbounds void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %105, i64 1
  %107 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %106, align 8
  call void %107(%"class.fxcodec::BmpDecoder::Delegate"* %98, i32 %95, %"class.pdfium::span"* nonnull %2) #10
  %108 = load i32, i32* %13, align 8
  %109 = add i32 %108, 1
  store i32 %109, i32* %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %90)
  br label %110

110:                                              ; preds = %89, %85
  store i8 4, i8* %25, align 4
  br label %300

111:                                              ; preds = %51
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %30) #10
  store i8 -86, i8* %30, align 1
  store i8 -86, i8* %31, align 1
  %112 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %9, align 8
  %113 = icmp eq %class.CFX_CodecMemory* %112, null
  br i1 %113, label %166, label %114

114:                                              ; preds = %111
  %115 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %112, i8* nonnull %30, i64 2) #10
  %116 = icmp eq i64 %115, 2
  br i1 %116, label %117, label %166

117:                                              ; preds = %114
  %118 = load i8, i8* %30, align 1
  %119 = zext i8 %118 to i32
  %120 = load i32, i32* %8, align 4
  %121 = add i32 %120, %119
  store i32 %121, i32* %8, align 4
  %122 = load i32, i32* %13, align 8
  %123 = load i8, i8* %31, align 1
  %124 = zext i8 %123 to i32
  %125 = add i32 %122, %124
  %126 = zext i32 %121 to i64
  %127 = load i64, i64* %26, align 8
  %128 = icmp ugt i64 %127, %126
  br i1 %128, label %129, label %166

129:                                              ; preds = %117
  %130 = load i32, i32* %14, align 8
  %131 = icmp ult i32 %125, %130
  br i1 %131, label %132, label %166

132:                                              ; preds = %129
  %133 = icmp ult i32 %122, %125
  br i1 %133, label %134, label %168

134:                                              ; preds = %132, %151
  %135 = load i8*, i8** %24, align 8
  %136 = load i64, i64* %21, align 8
  %137 = ptrtoint i8* %135 to i64
  %138 = sub i64 %136, %137
  %139 = icmp sgt i64 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %134
  call void @llvm.memset.p0i8.i64(i8* align 1 %135, i8 0, i64 %138, i1 false)
  br label %141

141:                                              ; preds = %140, %134
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32)
  %142 = load i8, i8* %16, align 8, !range !2
  %143 = icmp eq i8 %142, 0
  br i1 %143, label %146, label %144

144:                                              ; preds = %141
  %145 = load i32, i32* %13, align 8
  br label %151

146:                                              ; preds = %141
  %147 = load i32, i32* %14, align 8
  %148 = load i32, i32* %13, align 8
  %149 = xor i32 %148, -1
  %150 = add i32 %147, %149
  br label %151

151:                                              ; preds = %144, %146
  %152 = phi i32 [ %145, %144 ], [ %150, %146 ]
  %153 = load %"class.fxcodec::CFX_BmpContext"*, %"class.fxcodec::CFX_BmpContext"** %17, align 8
  %154 = getelementptr inbounds %"class.fxcodec::CFX_BmpContext", %"class.fxcodec::CFX_BmpContext"* %153, i64 0, i32 2, i32 0
  %155 = load %"class.fxcodec::BmpDecoder::Delegate"*, %"class.fxcodec::BmpDecoder::Delegate"** %154, align 8
  %156 = load i64, i64* %19, align 8
  %157 = load i64, i64* %21, align 8
  %158 = sub i64 %157, %156
  store i64 %156, i64* %33, align 8
  store i64 %158, i64* %34, align 8
  %159 = bitcast %"class.fxcodec::BmpDecoder::Delegate"* %155 to void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)***
  %160 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)**, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*** %159, align 8
  %161 = getelementptr inbounds void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %160, i64 1
  %162 = load void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)*, void (%"class.fxcodec::BmpDecoder::Delegate"*, i32, %"class.pdfium::span"*)** %161, align 8
  call void %162(%"class.fxcodec::BmpDecoder::Delegate"* %155, i32 %152, %"class.pdfium::span"* nonnull %3) #10
  %163 = load i32, i32* %13, align 8
  %164 = add i32 %163, 1
  store i32 %164, i32* %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32)
  %165 = icmp ult i32 %164, %125
  br i1 %165, label %134, label %168

166:                                              ; preds = %114, %129, %117, %111
  %167 = phi i8 [ 0, %117 ], [ 0, %129 ], [ 2, %114 ], [ 2, %111 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %30) #10
  br label %300

168:                                              ; preds = %151, %132
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %30) #10
  br label %296

169:                                              ; preds = %51
  %170 = load i64, i64* %26, align 8
  %171 = load i32, i32* %8, align 4
  %172 = trunc i64 %170 to i32
  %173 = sub i32 %172, %171
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %300, label %175

175:                                              ; preds = %169
  %176 = zext i8 %52 to i32
  %177 = add nuw nsw i32 %176, 1
  %178 = lshr i32 %177, 1
  %179 = icmp slt i32 %173, %176
  br i1 %179, label %180, label %189

180:                                              ; preds = %175
  %181 = lshr i32 %171, 1
  %182 = add nuw i32 %181, %178
  %183 = zext i32 %182 to i64
  %184 = load i64, i64* %27, align 8
  %185 = icmp ult i64 %184, %183
  br i1 %185, label %300, label %186

186:                                              ; preds = %180
  %187 = trunc i32 %173 to i8
  %188 = add i8 %187, -1
  store i8 %188, i8* %5, align 1
  br label %189

189:                                              ; preds = %186, %175
  %190 = and i32 %178, 1
  %191 = add nuw nsw i32 %190, %178
  %192 = zext i32 %191 to i64
  %193 = icmp eq i32 %191, 0
  br i1 %193, label %200, label %194

194:                                              ; preds = %189
  %195 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %192, i64 1) #10
  %196 = ptrtoint i8* %195 to i64
  %197 = sub i64 %192, %196
  %198 = getelementptr i8, i8* %195, i64 %197
  %199 = ptrtoint i8* %198 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %195, i8 0, i64 %199, i1 false) #10
  br label %200

200:                                              ; preds = %189, %194
  %201 = phi i8* [ null, %189 ], [ %195, %194 ]
  %202 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %9, align 8
  %203 = icmp eq %class.CFX_CodecMemory* %202, null
  br i1 %203, label %237, label %204

204:                                              ; preds = %200
  %205 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %202, i8* %201, i64 %192) #10
  %206 = icmp eq i64 %205, %192
  br i1 %206, label %207, label %237

207:                                              ; preds = %204
  %208 = load i8, i8* %5, align 1
  %209 = icmp eq i8 %208, 0
  br i1 %209, label %237, label %210

210:                                              ; preds = %207, %228
  %211 = phi i8 [ %234, %228 ], [ 0, %207 ]
  %212 = phi i8* [ %223, %228 ], [ %201, %207 ]
  %213 = and i8 %211, 1
  %214 = icmp eq i8 %213, 0
  br i1 %214, label %219, label %215

215:                                              ; preds = %210
  %216 = getelementptr inbounds i8, i8* %212, i64 1
  %217 = load i8, i8* %212, align 1
  %218 = and i8 %217, 15
  br label %222

219:                                              ; preds = %210
  %220 = load i8, i8* %212, align 1
  %221 = lshr i8 %220, 4
  br label %222

222:                                              ; preds = %219, %215
  %223 = phi i8* [ %216, %215 ], [ %212, %219 ]
  %224 = phi i8 [ %218, %215 ], [ %221, %219 ]
  %225 = zext i8 %224 to i32
  %226 = load i32, i32* %28, align 8
  %227 = icmp sgt i32 %226, %225
  br i1 %227, label %228, label %237

228:                                              ; preds = %222
  %229 = load i32, i32* %8, align 4
  %230 = add i32 %229, 1
  store i32 %230, i32* %8, align 4
  %231 = zext i32 %229 to i64
  %232 = load i8*, i8** %29, align 8
  %233 = getelementptr inbounds i8, i8* %232, i64 %231
  store i8 %224, i8* %233, align 1
  %234 = add nuw i8 %211, 1
  %235 = load i8, i8* %5, align 1
  %236 = icmp ult i8 %234, %235
  br i1 %236, label %210, label %237

237:                                              ; preds = %228, %222, %207, %200, %204
  %238 = phi i32 [ 1, %204 ], [ 1, %200 ], [ 0, %207 ], [ 0, %228 ], [ 1, %222 ]
  %239 = phi i8 [ 2, %204 ], [ 2, %200 ], [ %37, %207 ], [ %37, %228 ], [ 0, %222 ]
  %240 = icmp eq i8* %201, null
  br i1 %240, label %242, label %241

241:                                              ; preds = %237
  call void @_Z7FX_FreePv(i8* nonnull %201) #10
  br label %242

242:                                              ; preds = %241, %237
  %243 = icmp eq i32 %238, 0
  br i1 %243, label %296, label %300

244:                                              ; preds = %42
  %245 = zext i8 %43 to i32
  %246 = load i64, i64* %26, align 8
  %247 = load i32, i32* %8, align 4
  %248 = trunc i64 %246 to i32
  %249 = sub i32 %248, %247
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %300, label %251

251:                                              ; preds = %244
  %252 = icmp slt i32 %249, %245
  br i1 %252, label %253, label %264

253:                                              ; preds = %251
  %254 = add nuw nsw i32 %245, 1
  %255 = lshr i32 %254, 1
  %256 = lshr i32 %247, 1
  %257 = add nuw i32 %256, %255
  %258 = zext i32 %257 to i64
  %259 = load i64, i64* %27, align 8
  %260 = icmp ult i64 %259, %258
  br i1 %260, label %300, label %261

261:                                              ; preds = %253
  %262 = trunc i32 %249 to i8
  %263 = add i8 %262, -1
  store i8 %263, i8* %5, align 1
  br label %264

264:                                              ; preds = %261, %251
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #10
  store i8 -86, i8* %7, align 1
  %265 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %9, align 8
  %266 = icmp eq %class.CFX_CodecMemory* %265, null
  br i1 %266, label %293, label %267

267:                                              ; preds = %264
  %268 = call i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory* nonnull %265, i8* nonnull %7, i64 1) #10
  %269 = icmp eq i64 %268, 1
  br i1 %269, label %270, label %293

270:                                              ; preds = %267
  %271 = load i8, i8* %5, align 1
  %272 = icmp eq i8 %271, 0
  br i1 %272, label %295, label %273

273:                                              ; preds = %270, %284
  %274 = phi i8 [ %290, %284 ], [ 0, %270 ]
  %275 = load i8, i8* %7, align 1
  %276 = and i8 %274, 1
  %277 = icmp eq i8 %276, 0
  %278 = and i8 %275, 15
  %279 = lshr i8 %275, 4
  %280 = select i1 %277, i8 %279, i8 %278
  %281 = zext i8 %280 to i32
  %282 = load i32, i32* %28, align 8
  %283 = icmp sgt i32 %282, %281
  br i1 %283, label %284, label %293

284:                                              ; preds = %273
  %285 = load i32, i32* %8, align 4
  %286 = add i32 %285, 1
  store i32 %286, i32* %8, align 4
  %287 = zext i32 %285 to i64
  %288 = load i8*, i8** %29, align 8
  %289 = getelementptr inbounds i8, i8* %288, i64 %287
  store i8 %280, i8* %289, align 1
  %290 = add nuw i8 %274, 1
  %291 = load i8, i8* %5, align 1
  %292 = icmp ult i8 %290, %291
  br i1 %292, label %273, label %295

293:                                              ; preds = %267, %264, %273
  %294 = phi i8 [ 0, %273 ], [ 2, %264 ], [ 2, %267 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #10
  br label %300

295:                                              ; preds = %284, %270
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #10
  br label %296

296:                                              ; preds = %295, %168, %242
  %297 = phi i8 [ %239, %242 ], [ %37, %168 ], [ %37, %295 ]
  %298 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %9, align 8
  %299 = icmp eq %class.CFX_CodecMemory* %298, null
  br i1 %299, label %300, label %35

300:                                              ; preds = %296, %253, %244, %180, %169, %242, %38, %48, %82, %45, %1, %293, %166, %110, %57
  %301 = phi i8 [ 1, %110 ], [ 0, %57 ], [ %167, %166 ], [ %294, %293 ], [ 2, %1 ], [ 2, %45 ], [ 2, %82 ], [ 2, %48 ], [ 2, %38 ], [ 2, %296 ], [ %239, %242 ], [ 0, %169 ], [ 0, %180 ], [ 0, %244 ], [ 0, %253 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #10
  ret i8 %301
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7fxcodec19CFX_BmpDecompressor18ValidateColorIndexEh(%"class.fxcodec::CFX_BmpDecompressor"* nocapture readonly, i8 zeroext) local_unnamed_addr #4 align 2 {
  %3 = zext i8 %1 to i32
  %4 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 13
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, %3
  ret i1 %6
}

declare i64 @_ZN15CFX_CodecMemory9ReadBlockEPvm(%class.CFX_CodecMemory*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec19CFX_BmpDecompressor14SetInputBufferEN5fxcrt9RetainPtrI15CFX_CodecMemoryEE(%"class.fxcodec::CFX_BmpDecompressor"* nocapture, %"class.fxcrt::RetainPtr"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 25
  %4 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = bitcast %"class.fxcrt::RetainPtr"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  store %class.CFX_CodecMemory* null, %class.CFX_CodecMemory** %4, align 8
  %7 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %7, align 8
  %9 = bitcast %"class.fxcrt::RetainPtr"* %3 to i64*
  store i64 %6, i64* %9, align 8
  %10 = icmp eq %class.CFX_CodecMemory* %8, null
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.CFX_CodecMemory, %class.CFX_CodecMemory* %8, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add nsw i64 %13, -1
  store i64 %14, i64* %12, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %22

16:                                               ; preds = %11
  %17 = getelementptr inbounds %class.CFX_CodecMemory, %class.CFX_CodecMemory* %8, i64 0, i32 0
  %18 = bitcast %class.CFX_CodecMemory* %8 to void (%"class.fxcrt::Retainable"*)***
  %19 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %19, i64 1
  %21 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %20, align 8
  tail call void %21(%"class.fxcrt::Retainable"* nonnull %17) #10
  br label %22

22:                                               ; preds = %2, %11, %16
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK7fxcodec19CFX_BmpDecompressor13GetAvailInputEv(%"class.fxcodec::CFX_BmpDecompressor"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::CFX_BmpDecompressor", %"class.fxcodec::CFX_BmpDecompressor"* %0, i64 0, i32 25, i32 0, i32 0, i32 0, i32 0
  %3 = load %class.CFX_CodecMemory*, %class.CFX_CodecMemory** %2, align 8
  %4 = icmp eq %class.CFX_CodecMemory* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CFX_CodecMemory, %class.CFX_CodecMemory* %3, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %class.CFX_CodecMemory, %class.CFX_CodecMemory* %3, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  br label %11

11:                                               ; preds = %1, %5
  %12 = phi i64 [ %10, %5 ], [ 0, %1 ]
  ret i64 %12
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #5

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #10
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %178

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #12
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %39, i64 1) #10
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #10
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = ptrtoint i8* %54 to i64
  %56 = load i8*, i8** %6, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = icmp eq i8* %56, %54
  br i1 %58, label %172, label %59

59:                                               ; preds = %41
  %60 = ptrtoint i8* %56 to i64
  %61 = sub i64 %60, %55
  %62 = icmp ult i64 %61, 16
  br i1 %62, label %158, label %63

63:                                               ; preds = %59
  %64 = sub i64 %8, %57
  %65 = sub i64 %64, %24
  %66 = getelementptr i8, i8* %54, i64 %65
  %67 = ptrtoint i8* %66 to i64
  %68 = getelementptr i8, i8* %43, i64 %67
  %69 = icmp ult i8* %68, %56
  %70 = icmp ult i8* %54, %44
  %71 = and i1 %69, %70
  br i1 %71, label %158, label %72

72:                                               ; preds = %63
  %73 = and i64 %61, -16
  %74 = sub i64 0, %73
  %75 = getelementptr i8, i8* %44, i64 %74
  %76 = sub i64 0, %73
  %77 = getelementptr i8, i8* %56, i64 %76
  %78 = add i64 %73, -16
  %79 = lshr exact i64 %78, 4
  %80 = add nuw nsw i64 %79, 1
  %81 = and i64 %80, 3
  %82 = icmp ult i64 %78, 48
  br i1 %82, label %135, label %83

83:                                               ; preds = %72
  %84 = sub nsw i64 %80, %81
  %85 = getelementptr i8, i8* %44, i64 -1
  %86 = getelementptr inbounds i8, i8* %85, i64 -8
  %87 = getelementptr inbounds i8, i8* %56, i64 -16
  %88 = getelementptr inbounds i8, i8* %86, i64 -7
  %89 = getelementptr i8, i8* %44, i64 -1
  %90 = getelementptr inbounds i8, i8* %89, i64 -8
  %91 = getelementptr inbounds i8, i8* %56, i64 -16
  %92 = getelementptr inbounds i8, i8* %90, i64 -7
  %93 = getelementptr i8, i8* %44, i64 -1
  %94 = getelementptr inbounds i8, i8* %93, i64 -8
  %95 = getelementptr inbounds i8, i8* %56, i64 -16
  %96 = getelementptr inbounds i8, i8* %94, i64 -7
  %97 = getelementptr i8, i8* %44, i64 -1
  %98 = getelementptr inbounds i8, i8* %97, i64 -8
  %99 = getelementptr inbounds i8, i8* %56, i64 -16
  %100 = getelementptr inbounds i8, i8* %98, i64 -7
  br label %101

101:                                              ; preds = %101, %83
  %102 = phi i64 [ 0, %83 ], [ %132, %101 ]
  %103 = phi i64 [ %84, %83 ], [ %133, %101 ]
  %104 = sub i64 0, %102
  %105 = sub i64 0, %102
  %106 = getelementptr inbounds i8, i8* %87, i64 %105
  %107 = bitcast i8* %106 to <2 x i64>*
  %108 = load <2 x i64>, <2 x i64>* %107, align 1, !alias.scope !11
  %109 = getelementptr inbounds i8, i8* %88, i64 %104
  %110 = bitcast i8* %109 to <2 x i64>*
  store <2 x i64> %108, <2 x i64>* %110, align 1, !alias.scope !14, !noalias !11
  %111 = sub nuw nsw i64 -16, %102
  %112 = sub nuw nsw i64 -16, %102
  %113 = getelementptr inbounds i8, i8* %91, i64 %112
  %114 = bitcast i8* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 1, !alias.scope !11
  %116 = getelementptr inbounds i8, i8* %92, i64 %111
  %117 = bitcast i8* %116 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %117, align 1, !alias.scope !14, !noalias !11
  %118 = sub nuw nsw i64 -32, %102
  %119 = sub nuw nsw i64 -32, %102
  %120 = getelementptr inbounds i8, i8* %95, i64 %119
  %121 = bitcast i8* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 1, !alias.scope !11
  %123 = getelementptr inbounds i8, i8* %96, i64 %118
  %124 = bitcast i8* %123 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %124, align 1, !alias.scope !14, !noalias !11
  %125 = sub nuw nsw i64 -48, %102
  %126 = sub nuw nsw i64 -48, %102
  %127 = getelementptr inbounds i8, i8* %99, i64 %126
  %128 = bitcast i8* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 1, !alias.scope !11
  %130 = getelementptr inbounds i8, i8* %100, i64 %125
  %131 = bitcast i8* %130 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %131, align 1, !alias.scope !14, !noalias !11
  %132 = add i64 %102, 64
  %133 = add i64 %103, -4
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %101, !llvm.loop !16

135:                                              ; preds = %101, %72
  %136 = phi i64 [ 0, %72 ], [ %132, %101 ]
  %137 = icmp eq i64 %81, 0
  br i1 %137, label %156, label %138

138:                                              ; preds = %135
  %139 = getelementptr i8, i8* %44, i64 -1
  %140 = getelementptr inbounds i8, i8* %139, i64 -8
  %141 = getelementptr inbounds i8, i8* %56, i64 -16
  %142 = getelementptr inbounds i8, i8* %140, i64 -7
  br label %143

143:                                              ; preds = %143, %138
  %144 = phi i64 [ %136, %138 ], [ %153, %143 ]
  %145 = phi i64 [ %81, %138 ], [ %154, %143 ]
  %146 = sub i64 0, %144
  %147 = sub i64 0, %144
  %148 = getelementptr inbounds i8, i8* %141, i64 %147
  %149 = bitcast i8* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 1, !alias.scope !11
  %151 = getelementptr inbounds i8, i8* %142, i64 %146
  %152 = bitcast i8* %151 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %152, align 1, !alias.scope !14, !noalias !11
  %153 = add i64 %144, 16
  %154 = add i64 %145, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %143, !llvm.loop !17

156:                                              ; preds = %143, %135
  %157 = icmp eq i64 %61, %73
  br i1 %157, label %168, label %158

158:                                              ; preds = %156, %63, %59
  %159 = phi i8* [ %44, %63 ], [ %44, %59 ], [ %75, %156 ]
  %160 = phi i8* [ %56, %63 ], [ %56, %59 ], [ %77, %156 ]
  br label %161

161:                                              ; preds = %158, %161
  %162 = phi i8* [ %164, %161 ], [ %159, %158 ]
  %163 = phi i8* [ %165, %161 ], [ %160, %158 ]
  %164 = getelementptr inbounds i8, i8* %162, i64 -1
  %165 = getelementptr inbounds i8, i8* %163, i64 -1
  %166 = load i8, i8* %165, align 1
  store i8 %166, i8* %164, align 1
  %167 = icmp eq i8* %165, %54
  br i1 %167, label %168, label %161, !llvm.loop !19

168:                                              ; preds = %161, %156
  %169 = phi i8* [ %75, %156 ], [ %164, %161 ]
  %170 = ptrtoint i8* %169 to i64
  %171 = load i64, i64* %23, align 8
  br label %172

172:                                              ; preds = %41, %168
  %173 = phi i64 [ %170, %168 ], [ %45, %41 ]
  %174 = phi i64 [ %171, %168 ], [ %55, %41 ]
  store i64 %173, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %178, label %176

176:                                              ; preds = %172
  %177 = inttoptr i64 %174 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %177) #10
  br label %178

178:                                              ; preds = %176, %172, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.1"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #10
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #12
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #11
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #10
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #10
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #11
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !9}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !9}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = distinct !{!19, !9}
