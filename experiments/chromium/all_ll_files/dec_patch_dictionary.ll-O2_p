; ModuleID = '../../third_party/libjxl/src/lib/jxl/dec_patch_dictionary.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/dec_patch_dictionary.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::PatchDictionary" = type { %"struct.jxl::PassesSharedState"*, %"class.std::__1::vector", %"class.std::__1::vector.8", %"class.std::__1::vector.8" }
%"struct.jxl::PassesSharedState" = type { %"struct.jxl::CodecMetadata"*, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.74", %"class.jxl::Plane", %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ImageFeatures", i64, %"class.std::__1::vector.30", %"class.jxl::Plane", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x %struct.anon.104], i64 }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.18", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { i8* }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.25" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.30", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.37", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameSize" = type { i32, i32 }
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane", i8*, i64 }
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr.44", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector.48" }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46", %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.46" = type { float* }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.69" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon.51, %"struct.jxl::DctQuantWeightParams", %union.anon.68 }>
%union.anon.51 = type { %"struct.std::__1::array.58", [4 x i8] }
%"struct.std::__1::array.58" = type { [3 x %"struct.std::__1::array.59"] }
%"struct.std::__1::array.59" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array", [4 x i8] }>
%"struct.std::__1::array" = type { [3 x %"struct.std::__1::array.50"] }
%"struct.std::__1::array.50" = type { [17 x float] }
%union.anon.68 = type { i8 }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.jxl::QuantEncoding"* }
%"class.jxl::Quantizer" = type { [4 x float], [4 x float], i32, i32, float, float, float, [3 x float], %"class.jxl::DequantMatrices"* }
%"class.jxl::Plane.74" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.75", %"class.jxl::Plane.75", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.75" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ImageFeatures" = type { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", %"class.jxl::Splines" }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.76", %"class.std::__1::vector.90" }
%"class.std::__1::vector.76" = type { %"class.std::__1::__vector_base.77" }
%"class.std::__1::__vector_base.77" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.85" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.78", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.80" }
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.92" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"struct.jxl::Spline::Point"* }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { i32*, i32*, %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { i32* }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane.97"] }
%"class.jxl::Plane.97" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.61"], %"class.std::__1::vector.30", %"class.std::__1::vector.98", i64, i64 }
%"class.std::__1::vector.61" = type { %"class.std::__1::__vector_base.62" }
%"class.std::__1::__vector_base.62" = type { i32*, i32*, %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { i32* }
%"class.std::__1::vector.98" = type { %"class.std::__1::__vector_base.99" }
%"class.std::__1::__vector_base.99" = type { i8*, i8*, %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%struct.anon.104 = type <{ %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, i8, [7 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.105", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.169", i64 }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.108", %"class.std::__1::vector.115", %"class.std::__1::vector.108", %"class.std::__1::vector.122", %"class.std::__1::vector.130", %"class.std::__1::vector.139", %"class.std::__1::vector.153", %"class.std::__1::vector.98", %"class.std::__1::vector.108", %"class.std::__1::vector.98", i32, i8, %"class.std::__1::vector.98" }
%"class.std::__1::vector.115" = type { %"class.std::__1::__vector_base.116" }
%"class.std::__1::__vector_base.116" = type { i32*, i32*, %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { i32* }
%"class.std::__1::vector.122" = type { %"class.std::__1::__vector_base.123" }
%"class.std::__1::__vector_base.123" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.125" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.124", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.124" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.130" = type { %"class.std::__1::__vector_base.131" }
%"class.std::__1::__vector_base.131" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.134" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.132", %"struct.std::__1::array.133", i32, i8, [3 x i8] }>
%"struct.std::__1::array.132" = type { [17 x i32] }
%"struct.std::__1::array.133" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.148" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.141" }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { i16*, i16*, %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { i16* }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.153" = type { %"class.std::__1::__vector_base.154" }
%"class.std::__1::__vector_base.154" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.163" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.155", i32, %"class.std::__1::vector.30", %"class.std::__1::vector.156" }
%"struct.std::__1::array.155" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.158" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.108" = type { %"class.std::__1::__vector_base.109" }
%"class.std::__1::__vector_base.109" = type { %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"*, %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.std::__1::vector.98"* }
%"class.std::__1::vector.169" = type { %"class.std::__1::__vector_base.170" }
%"class.std::__1::__vector_base.170" = type { %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"*, %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.jxl::Plane.97"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"*, %"class.std::__1::__compressed_pair.3" }
%"struct.jxl::PatchPosition" = type { i64, i64, %"class.std::__1::vector.0", %"struct.jxl::PatchReferencePosition" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"*, %"class.std::__1::__compressed_pair" }
%"struct.jxl::PatchBlending" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.jxl::PatchBlending"* }
%"struct.jxl::PatchReferencePosition" = type { i64, i64, i64, i64, i64 }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.jxl::PatchPosition"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i64*, i64*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i64* }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector.177", %"class.std::__1::vector.191", %"class.std::__1::vector.61", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::vector.177" = type { %"class.std::__1::__vector_base.178" }
%"class.std::__1::__vector_base.178" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.186" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.179" }
%"class.std::__1::vector.179" = type { %"class.std::__1::__vector_base.180" }
%"class.std::__1::__vector_base.180" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.181" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::vector.191" = type { %"class.std::__1::__vector_base.192" }
%"class.std::__1::__vector_base.192" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.193" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.jxl::ANSSymbolReader" = type <{ %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::HuffmanDecodingData"*, i8, [3 x i8], i32, %"struct.jxl::HybridUintConfig"*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr", i32*, i32, i32, i32, i32, i32, i32, %"struct.jxl::HybridUintConfig", [120 x i32], i32, [4 x i8] }>
%"struct.jxl::AliasTable::Entry" = type { i8, i8, i16, i16, i16 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::__less.228" = type { i8 }
%"class.std::__1::vector.198" = type { %"class.std::__1::__vector_base.199" }
%"class.std::__1::__vector_base.199" = type { %"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"*, %"class.std::__1::__compressed_pair.201" }
%"struct.std::__1::pair.200" = type { i64, i64 }
%"class.std::__1::__compressed_pair.201" = type { %"struct.std::__1::__compressed_pair_elem.202" }
%"struct.std::__1::__compressed_pair_elem.202" = type { %"struct.std::__1::pair.200"* }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"class.std::__1::vector.206" = type { %"class.std::__1::__vector_base.207" }
%"class.std::__1::__vector_base.207" = type { float**, float**, %"class.std::__1::__compressed_pair.208" }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.209" }
%"struct.std::__1::__compressed_pair_elem.209" = type { float** }
%"class.std::__1::vector.213" = type { %"class.std::__1::__vector_base.214" }
%"class.std::__1::__vector_base.214" = type { float**, float**, %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { float** }

$_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm = comdat any

$_ZNSt3__16vectorIN3jxl13PatchPositionENS_9allocatorIS2_EEE7reserveEm = comdat any

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

$_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE = comdat any

$_ZNSt3__16vectorIN3jxl13PatchPositionENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_ = comdat any

$_ZNSt3__16__sortIRNS_6__lessINS_4pairImmEES3_EEPS3_EEvT0_S7_T_ = comdat any

$_ZNSt3__17__sort3IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_T_ = comdat any

$_ZNSt3__17__sort4IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_S7_T_ = comdat any

$_ZNSt3__17__sort5IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_S7_S7_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessINS_4pairImmEES3_EEPS3_EEbT0_S7_T_ = comdat any

$_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEmRKm = comdat any

$_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm = comdat any

@.str.1 = private unnamed_addr constant [61 x i8] c"../../third_party/libjxl/src/lib/jxl/dec_patch_dictionary.cc\00", align 1
@__const._ZN3jxl15PatchDictionary6DecodeEPNS_9BitReaderEmmPb.info = private unnamed_addr constant { i8, [3 x i8], i32, i8, [3 x i8] } { i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA" }, align 4
@.str.13 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.14 = private unnamed_addr constant [33 x i8] c"SameSize(opsin_rect, image_rect)\00", align 1
@_ZN3jxlL17kSpecialDistancesE = internal unnamed_addr constant [120 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\01\00", [2 x i8] c"\01\01", [2 x i8] c"\FF\01", [2 x i8] c"\00\02", [2 x i8] c"\02\00", [2 x i8] c"\01\02", [2 x i8] c"\FF\02", [2 x i8] c"\02\01", [2 x i8] c"\FE\01", [2 x i8] c"\02\02", [2 x i8] c"\FE\02", [2 x i8] c"\00\03", [2 x i8] c"\03\00", [2 x i8] c"\01\03", [2 x i8] c"\FF\03", [2 x i8] c"\03\01", [2 x i8] c"\FD\01", [2 x i8] c"\02\03", [2 x i8] c"\FE\03", [2 x i8] c"\03\02", [2 x i8] c"\FD\02", [2 x i8] c"\00\04", [2 x i8] c"\04\00", [2 x i8] c"\01\04", [2 x i8] c"\FF\04", [2 x i8] c"\04\01", [2 x i8] c"\FC\01", [2 x i8] c"\03\03", [2 x i8] c"\FD\03", [2 x i8] c"\02\04", [2 x i8] c"\FE\04", [2 x i8] c"\04\02", [2 x i8] c"\FC\02", [2 x i8] c"\00\05", [2 x i8] c"\03\04", [2 x i8] c"\FD\04", [2 x i8] c"\04\03", [2 x i8] c"\FC\03", [2 x i8] c"\05\00", [2 x i8] c"\01\05", [2 x i8] c"\FF\05", [2 x i8] c"\05\01", [2 x i8] c"\FB\01", [2 x i8] c"\02\05", [2 x i8] c"\FE\05", [2 x i8] c"\05\02", [2 x i8] c"\FB\02", [2 x i8] c"\04\04", [2 x i8] c"\FC\04", [2 x i8] c"\03\05", [2 x i8] c"\FD\05", [2 x i8] c"\05\03", [2 x i8] c"\FB\03", [2 x i8] c"\00\06", [2 x i8] c"\06\00", [2 x i8] c"\01\06", [2 x i8] c"\FF\06", [2 x i8] c"\06\01", [2 x i8] c"\FA\01", [2 x i8] c"\02\06", [2 x i8] c"\FE\06", [2 x i8] c"\06\02", [2 x i8] c"\FA\02", [2 x i8] c"\04\05", [2 x i8] c"\FC\05", [2 x i8] c"\05\04", [2 x i8] c"\FB\04", [2 x i8] c"\03\06", [2 x i8] c"\FD\06", [2 x i8] c"\06\03", [2 x i8] c"\FA\03", [2 x i8] c"\00\07", [2 x i8] c"\07\00", [2 x i8] c"\01\07", [2 x i8] c"\FF\07", [2 x i8] c"\05\05", [2 x i8] c"\FB\05", [2 x i8] c"\07\01", [2 x i8] c"\F9\01", [2 x i8] c"\04\06", [2 x i8] c"\FC\06", [2 x i8] c"\06\04", [2 x i8] c"\FA\04", [2 x i8] c"\02\07", [2 x i8] c"\FE\07", [2 x i8] c"\07\02", [2 x i8] c"\F9\02", [2 x i8] c"\03\07", [2 x i8] c"\FD\07", [2 x i8] c"\07\03", [2 x i8] c"\F9\03", [2 x i8] c"\05\06", [2 x i8] c"\FB\06", [2 x i8] c"\06\05", [2 x i8] c"\FA\05", [2 x i8] c"\08\00", [2 x i8] c"\04\07", [2 x i8] c"\FC\07", [2 x i8] c"\07\04", [2 x i8] c"\F9\04", [2 x i8] c"\08\01", [2 x i8] c"\08\02", [2 x i8] c"\06\06", [2 x i8] c"\FA\06", [2 x i8] c"\08\03", [2 x i8] c"\05\07", [2 x i8] c"\FB\07", [2 x i8] c"\07\05", [2 x i8] c"\F9\05", [2 x i8] c"\08\04", [2 x i8] c"\06\07", [2 x i8] c"\FA\07", [2 x i8] c"\07\06", [2 x i8] c"\F9\06", [2 x i8] c"\08\05", [2 x i8] c"\07\07", [2 x i8] c"\F9\07", [2 x i8] c"\08\06", [2 x i8] c"\08\07"], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl15PatchDictionary6DecodeEPNS_9BitReaderEmmPb(%"class.jxl::PatchDictionary"*, %"class.jxl::BitReader"*, i64, i64, i8* nocapture) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.std::__1::vector.98", align 8
  %7 = alloca %"struct.jxl::ANSCode", align 8
  %8 = alloca %"class.jxl::ANSSymbolReader", align 8
  %9 = alloca %"struct.jxl::PatchPosition", align 8
  %10 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 0
  %12 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %11, align 8
  %13 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 1, i32 0, i32 1
  %14 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %13, align 8
  %15 = icmp eq %"struct.jxl::PatchPosition"* %14, %12
  br i1 %15, label %29, label %16

16:                                               ; preds = %5, %27
  %17 = phi %"struct.jxl::PatchPosition"* [ %18, %27 ], [ %14, %5 ]
  %18 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %17, i64 -1
  %19 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %17, i64 -1, i32 2, i32 0, i32 0
  %20 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %19, align 8
  %21 = icmp eq %"struct.jxl::PatchBlending"* %20, null
  br i1 %21, label %27, label %22

22:                                               ; preds = %16
  %23 = ptrtoint %"struct.jxl::PatchBlending"* %20 to i64
  %24 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %17, i64 -1, i32 2, i32 0, i32 1
  %25 = bitcast %"struct.jxl::PatchBlending"** %24 to i64*
  store i64 %23, i64* %25, align 8
  %26 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %20, i64 0, i32 0
  tail call void @_ZdlPv(i8* %26) #11
  br label %27

27:                                               ; preds = %22, %16
  %28 = icmp eq %"struct.jxl::PatchPosition"* %18, %12
  br i1 %28, label %29, label %16

29:                                               ; preds = %27, %5
  store %"struct.jxl::PatchPosition"* %12, %"struct.jxl::PatchPosition"** %13, align 8
  %30 = bitcast %"class.std::__1::vector.98"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #7
  %31 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %6, i64 0, i32 0, i32 0
  %32 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %6, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 0, i64 24, i1 false) #7
  %33 = bitcast %"struct.jxl::ANSCode"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %33) #7
  %34 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %7, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 64, i1 false)
  %35 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %7, i64 0, i32 6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 80, i1 false) #7
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %35) #7
  %36 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %7, i64 0, i32 7
  store i64 0, i64* %36, align 8
  %37 = call i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"* %1, i64 10, %"struct.jxl::ANSCode"* nonnull %7, %"class.std::__1::vector.98"* nonnull %6, i1 zeroext false) #7
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %458

39:                                               ; preds = %29
  %40 = bitcast %"class.jxl::ANSSymbolReader"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 592, i8* nonnull %40) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -86, i64 592, i1 false)
  call void @_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm(%"class.jxl::ANSSymbolReader"* nonnull %8, %"struct.jxl::ANSCode"* nonnull %7, %"class.jxl::BitReader"* %1, i64 0)
  %41 = load i8*, i8** %31, align 8
  %42 = load i8, i8* %41, align 1, !noalias !2
  %43 = zext i8 %42 to i64
  %44 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %8, i64 %43, %"class.jxl::BitReader"* %1) #7
  %45 = icmp ugt i64 %44, 16777216
  br i1 %45, label %451, label %46

46:                                               ; preds = %39
  %47 = icmp eq i64 %44, 0
  br i1 %47, label %441, label %48

48:                                               ; preds = %46
  %49 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 0
  %50 = bitcast %"struct.jxl::PatchPosition"** %13 to i64*
  %51 = bitcast %"class.std::__1::vector"* %10 to i64*
  %52 = bitcast %"struct.jxl::PatchPosition"* %9 to i8*
  %53 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %9, i64 0, i32 2
  %54 = bitcast %"class.std::__1::vector.0"* %53 to i8*
  %55 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %9, i64 0, i32 3, i32 0
  %56 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %9, i64 0, i32 3, i32 1
  %57 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %9, i64 0, i32 3, i32 2
  %58 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %9, i64 0, i32 3, i32 3
  %59 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %9, i64 0, i32 3, i32 4
  %60 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %9, i64 0, i32 0
  %61 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %9, i64 0, i32 1
  %62 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %9, i64 0, i32 2, i32 0, i32 1
  %63 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %9, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %64 = bitcast %"struct.jxl::PatchBlending"** %62 to i64*
  %65 = bitcast %"class.std::__1::vector.0"* %53 to i64*
  %66 = bitcast %"struct.jxl::PatchBlending"** %63 to i64*
  %67 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %68 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %9, i64 0, i32 3
  %69 = bitcast %"struct.jxl::PatchReferencePosition"* %68 to i8*
  %70 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %9, i64 0, i32 2, i32 0, i32 0
  br label %71

71:                                               ; preds = %437, %48
  %72 = phi i64 [ 0, %48 ], [ %439, %437 ]
  %73 = phi i32 [ 0, %48 ], [ %438, %437 ]
  %74 = load i8*, i8** %31, align 8, !noalias !5
  %75 = getelementptr inbounds i8, i8* %74, i64 1
  %76 = load i8, i8* %75, align 1, !noalias !5
  %77 = zext i8 %76 to i64
  %78 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %8, i64 %77, %"class.jxl::BitReader"* %1) #7
  %79 = icmp ugt i64 %78, 3
  br i1 %79, label %451, label %80

80:                                               ; preds = %71
  %81 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %49, align 8
  %82 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %81, i64 0, i32 17, i64 %78, i32 1
  %83 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %82, align 8
  %84 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %83, i64 0, i32 0, i32 0, i32 0, i32 0
  %85 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %84, align 8
  %86 = icmp eq %"struct.jxl::jpeg::JPEGData"* %85, null
  br i1 %86, label %91, label %87

87:                                               ; preds = %80
  %88 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %85, i64 0, i32 1
  %89 = load i32, i32* %88, align 8
  %90 = sext i32 %89 to i64
  br label %106

91:                                               ; preds = %80
  %92 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %83, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %93 = load i32, i32* %92, align 8
  %94 = zext i32 %93 to i64
  %95 = icmp eq i32 %93, 0
  br i1 %95, label %96, label %106

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %83, i64 0, i32 12, i32 0, i32 0
  %98 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %97, align 8
  %99 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %83, i64 0, i32 12, i32 0, i32 1
  %100 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %99, align 8
  %101 = icmp eq %"class.jxl::Plane.97"* %98, %100
  br i1 %101, label %451, label %102

102:                                              ; preds = %96
  %103 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %98, i64 0, i32 0, i32 0
  %104 = load i32, i32* %103, align 8
  %105 = zext i32 %104 to i64
  br label %106

106:                                              ; preds = %87, %91, %102
  %107 = phi i64 [ %90, %87 ], [ %105, %102 ], [ %94, %91 ]
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %451, label %109

109:                                              ; preds = %106
  %110 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %81, i64 0, i32 17, i64 %78, i32 2
  %111 = load i8, i8* %110, align 8, !range !8
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %451, label %113

113:                                              ; preds = %109
  %114 = load i8*, i8** %31, align 8, !noalias !9
  %115 = getelementptr inbounds i8, i8* %114, i64 3
  %116 = load i8, i8* %115, align 1, !noalias !9
  %117 = zext i8 %116 to i64
  %118 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %8, i64 %117, %"class.jxl::BitReader"* %1) #7
  %119 = load i8*, i8** %31, align 8, !noalias !12
  %120 = getelementptr inbounds i8, i8* %119, i64 3
  %121 = load i8, i8* %120, align 1, !noalias !12
  %122 = zext i8 %121 to i64
  %123 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %8, i64 %122, %"class.jxl::BitReader"* %1) #7
  %124 = load i8*, i8** %31, align 8, !noalias !15
  %125 = getelementptr inbounds i8, i8* %124, i64 2
  %126 = load i8, i8* %125, align 1, !noalias !15
  %127 = zext i8 %126 to i64
  %128 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %8, i64 %127, %"class.jxl::BitReader"* %1) #7
  %129 = add i64 %128, 1
  %130 = load i8*, i8** %31, align 8, !noalias !18
  %131 = getelementptr inbounds i8, i8* %130, i64 2
  %132 = load i8, i8* %131, align 1, !noalias !18
  %133 = zext i8 %132 to i64
  %134 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %8, i64 %133, %"class.jxl::BitReader"* %1) #7
  %135 = add i64 %134, 1
  %136 = add i64 %129, %118
  %137 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %84, align 8
  %138 = icmp eq %"struct.jxl::jpeg::JPEGData"* %137, null
  br i1 %138, label %143, label %139

139:                                              ; preds = %113
  %140 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %137, i64 0, i32 1
  %141 = load i32, i32* %140, align 8
  %142 = sext i32 %141 to i64
  br label %158

143:                                              ; preds = %113
  %144 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %83, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %145 = load i32, i32* %144, align 8
  %146 = zext i32 %145 to i64
  %147 = icmp eq i32 %145, 0
  br i1 %147, label %148, label %158

148:                                              ; preds = %143
  %149 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %83, i64 0, i32 12, i32 0, i32 0
  %150 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %149, align 8
  %151 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %83, i64 0, i32 12, i32 0, i32 1
  %152 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %151, align 8
  %153 = icmp eq %"class.jxl::Plane.97"* %150, %152
  br i1 %153, label %158, label %154

154:                                              ; preds = %148
  %155 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %150, i64 0, i32 0, i32 0
  %156 = load i32, i32* %155, align 8
  %157 = zext i32 %156 to i64
  br label %158

158:                                              ; preds = %139, %143, %148, %154
  %159 = phi i64 [ %142, %139 ], [ %157, %154 ], [ 0, %148 ], [ %146, %143 ]
  %160 = icmp ugt i64 %136, %159
  br i1 %160, label %451, label %161

161:                                              ; preds = %158
  %162 = add i64 %135, %123
  br i1 %138, label %167, label %163

163:                                              ; preds = %161
  %164 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %137, i64 0, i32 2
  %165 = load i32, i32* %164, align 4
  %166 = sext i32 %165 to i64
  br label %182

167:                                              ; preds = %161
  %168 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %83, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %169 = load i32, i32* %168, align 4
  %170 = zext i32 %169 to i64
  %171 = icmp eq i32 %169, 0
  br i1 %171, label %172, label %182

172:                                              ; preds = %167
  %173 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %83, i64 0, i32 12, i32 0, i32 0
  %174 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %173, align 8
  %175 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %83, i64 0, i32 12, i32 0, i32 1
  %176 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %175, align 8
  %177 = icmp eq %"class.jxl::Plane.97"* %174, %176
  br i1 %177, label %182, label %178

178:                                              ; preds = %172
  %179 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %174, i64 0, i32 0, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = zext i32 %180 to i64
  br label %182

182:                                              ; preds = %163, %167, %172, %178
  %183 = phi i64 [ %166, %163 ], [ %181, %178 ], [ 0, %172 ], [ %170, %167 ]
  %184 = icmp ugt i64 %162, %183
  br i1 %184, label %451, label %185

185:                                              ; preds = %182
  %186 = load i8*, i8** %31, align 8, !noalias !21
  %187 = getelementptr inbounds i8, i8* %186, i64 7
  %188 = load i8, i8* %187, align 1, !noalias !21
  %189 = zext i8 %188 to i64
  %190 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %8, i64 %189, %"class.jxl::BitReader"* %1) #7
  %191 = add i64 %190, 1
  %192 = icmp ugt i64 %191, 16777216
  br i1 %192, label %451, label %193

193:                                              ; preds = %185
  %194 = load i64, i64* %50, align 8
  %195 = load i64, i64* %51, align 8
  %196 = sub i64 %194, %195
  %197 = sdiv exact i64 %196, 80
  %198 = add nsw i64 %197, %191
  call void @_ZNSt3__16vectorIN3jxl13PatchPositionENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector"* %10, i64 %198)
  %199 = icmp eq i64 %191, 0
  br i1 %199, label %437, label %202

200:                                              ; preds = %434
  %201 = icmp eq i64 %436, %191
  br i1 %201, label %437, label %202

202:                                              ; preds = %193, %200
  %203 = phi i64 [ %436, %200 ], [ 0, %193 ]
  %204 = phi i32 [ %427, %200 ], [ %73, %193 ]
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %52) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %52, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 %54, i8 0, i64 24, i1 false) #7
  store i64 %78, i64* %55, align 8
  store i64 %118, i64* %56, align 8
  store i64 %123, i64* %57, align 8
  store i64 %129, i64* %58, align 8
  store i64 %135, i64* %59, align 8
  %205 = icmp eq i64 %203, 0
  br i1 %205, label %206, label %217

206:                                              ; preds = %202
  %207 = load i8*, i8** %31, align 8, !noalias !24
  %208 = getelementptr inbounds i8, i8* %207, i64 4
  %209 = load i8, i8* %208, align 1, !noalias !24
  %210 = zext i8 %209 to i64
  %211 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %8, i64 %210, %"class.jxl::BitReader"* %1) #7
  store i64 %211, i64* %60, align 8
  %212 = load i8*, i8** %31, align 8, !noalias !27
  %213 = getelementptr inbounds i8, i8* %212, i64 4
  %214 = load i8, i8* %213, align 1, !noalias !27
  %215 = zext i8 %214 to i64
  %216 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %8, i64 %215, %"class.jxl::BitReader"* %1) #7
  br label %244

217:                                              ; preds = %202
  %218 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %13, align 8
  %219 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %218, i64 -1, i32 0
  %220 = load i64, i64* %219, align 8
  %221 = load i8*, i8** %31, align 8, !noalias !30
  %222 = getelementptr inbounds i8, i8* %221, i64 6
  %223 = load i8, i8* %222, align 1, !noalias !30
  %224 = zext i8 %223 to i64
  %225 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %8, i64 %224, %"class.jxl::BitReader"* %1) #7
  %226 = lshr i64 %225, 1
  %227 = shl i64 %225, 63
  %228 = ashr exact i64 %227, 63
  %229 = xor i64 %228, %226
  %230 = add i64 %229, %220
  store i64 %230, i64* %60, align 8
  %231 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %13, align 8
  %232 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %231, i64 -1, i32 1
  %233 = load i64, i64* %232, align 8
  %234 = load i8*, i8** %31, align 8, !noalias !33
  %235 = getelementptr inbounds i8, i8* %234, i64 6
  %236 = load i8, i8* %235, align 1, !noalias !33
  %237 = zext i8 %236 to i64
  %238 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %8, i64 %237, %"class.jxl::BitReader"* %1) #7
  %239 = lshr i64 %238, 1
  %240 = shl i64 %238, 63
  %241 = ashr exact i64 %240, 63
  %242 = xor i64 %241, %239
  %243 = add i64 %242, %233
  br label %244

244:                                              ; preds = %217, %206
  %245 = phi i64 [ %243, %217 ], [ %216, %206 ]
  store i64 %245, i64* %61, align 8
  %246 = load i64, i64* %60, align 8
  %247 = add i64 %246, %129
  %248 = icmp ugt i64 %247, %2
  %249 = add i64 %245, %135
  %250 = icmp ugt i64 %249, %3
  %251 = or i1 %248, %250
  br i1 %251, label %426, label %252

252:                                              ; preds = %244
  %253 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %49, align 8
  %254 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %253, i64 0, i32 0
  %255 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %254, align 8
  %256 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %255, i64 0, i32 0, i32 17
  %257 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %255, i64 0, i32 0, i32 17, i32 0, i32 1
  %258 = bitcast %"struct.jxl::ExtraChannelInfo"** %257 to i64*
  %259 = load i64, i64* %258, align 8
  %260 = bitcast %"class.std::__1::vector.18"* %256 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = sub i64 %259, %261
  %263 = icmp eq i64 %262, -96
  br i1 %263, label %405, label %264

264:                                              ; preds = %252, %390
  %265 = phi i64 [ %391, %390 ], [ 0, %252 ]
  %266 = load i8*, i8** %31, align 8, !noalias !36
  %267 = getelementptr inbounds i8, i8* %266, i64 5
  %268 = load i8, i8* %267, align 1, !noalias !36
  %269 = zext i8 %268 to i64
  %270 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %8, i64 %269, %"class.jxl::BitReader"* %1) #7
  %271 = trunc i64 %270 to i32
  %272 = icmp ugt i32 %271, 7
  br i1 %272, label %426, label %273

273:                                              ; preds = %264
  %274 = trunc i64 %270 to i8
  %275 = and i8 %274, -4
  %276 = icmp eq i8 %275, 4
  %277 = icmp ne i8 %274, 0
  %278 = icmp ne i64 %265, 0
  %279 = and i1 %278, %277
  %280 = or i1 %276, %279
  br i1 %280, label %281, label %282

281:                                              ; preds = %273
  store i8 1, i8* %4, align 1
  br label %282

282:                                              ; preds = %273, %281
  br i1 %276, label %283, label %316

283:                                              ; preds = %282
  %284 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %49, align 8
  %285 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %284, i64 0, i32 0
  %286 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %285, align 8
  %287 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %286, i64 0, i32 0, i32 17
  %288 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %286, i64 0, i32 0, i32 17, i32 0, i32 1
  %289 = bitcast %"struct.jxl::ExtraChannelInfo"** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %"class.std::__1::vector.18"* %287 to i64*
  %292 = load i64, i64* %291, align 8
  %293 = sub i64 %290, %292
  %294 = sdiv exact i64 %293, 96
  %295 = icmp ugt i64 %294, 1
  br i1 %295, label %296, label %318

296:                                              ; preds = %283
  %297 = load i8*, i8** %31, align 8, !noalias !39
  %298 = getelementptr inbounds i8, i8* %297, i64 8
  %299 = load i8, i8* %298, align 1, !noalias !39
  %300 = zext i8 %299 to i64
  %301 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %8, i64 %300, %"class.jxl::BitReader"* %1) #7
  %302 = trunc i64 %301 to i32
  %303 = and i64 %301, 4294967295
  %304 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %49, align 8
  %305 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %304, i64 0, i32 0
  %306 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %305, align 8
  %307 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %306, i64 0, i32 0, i32 17
  %308 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %306, i64 0, i32 0, i32 17, i32 0, i32 1
  %309 = bitcast %"struct.jxl::ExtraChannelInfo"** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast %"class.std::__1::vector.18"* %307 to i64*
  %312 = load i64, i64* %311, align 8
  %313 = sub i64 %310, %312
  %314 = sdiv exact i64 %313, 96
  %315 = icmp ult i64 %303, %314
  br i1 %315, label %318, label %426

316:                                              ; preds = %282
  %317 = icmp eq i8 %274, 3
  br i1 %317, label %318, label %327

318:                                              ; preds = %296, %283, %316
  %319 = phi i32 [ 0, %316 ], [ 0, %283 ], [ %302, %296 ]
  %320 = load i8*, i8** %31, align 8, !noalias !42
  %321 = getelementptr inbounds i8, i8* %320, i64 9
  %322 = load i8, i8* %321, align 1, !noalias !42
  %323 = zext i8 %322 to i64
  %324 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %8, i64 %323, %"class.jxl::BitReader"* %1) #7
  %325 = icmp ne i64 %324, 0
  %326 = zext i1 %325 to i8
  br label %327

327:                                              ; preds = %316, %318
  %328 = phi i32 [ %319, %318 ], [ 0, %316 ]
  %329 = phi i8 [ %326, %318 ], [ 0, %316 ]
  %330 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %62, align 8
  %331 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %63, align 8
  %332 = icmp eq %"struct.jxl::PatchBlending"* %330, %331
  %333 = ptrtoint %"struct.jxl::PatchBlending"* %331 to i64
  br i1 %332, label %342, label %334

334:                                              ; preds = %327
  %335 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %330, i64 0, i32 0
  store i8 %274, i8* %335, align 4
  %336 = getelementptr inbounds i8, i8* %335, i64 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %336, i8* nonnull align 1 getelementptr inbounds ({ i8, [3 x i8], i32, i8, [3 x i8] }, { i8, [3 x i8], i32, i8, [3 x i8] }* @__const._ZN3jxl15PatchDictionary6DecodeEPNS_9BitReaderEmmPb.info, i64 0, i32 1, i64 0), i64 3, i1 false)
  %337 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %330, i64 0, i32 1
  store i32 %328, i32* %337, align 4
  %338 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %330, i64 0, i32 2
  store i8 %329, i8* %338, align 4
  %339 = getelementptr inbounds i8, i8* %335, i64 9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %339, i8* nonnull align 1 getelementptr inbounds ({ i8, [3 x i8], i32, i8, [3 x i8] }, { i8, [3 x i8], i32, i8, [3 x i8] }* @__const._ZN3jxl15PatchDictionary6DecodeEPNS_9BitReaderEmmPb.info, i64 0, i32 4, i64 0), i64 3, i1 false)
  %340 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %330, i64 1
  %341 = ptrtoint %"struct.jxl::PatchBlending"* %340 to i64
  store i64 %341, i64* %64, align 8
  br label %390

342:                                              ; preds = %327
  %343 = ptrtoint %"struct.jxl::PatchBlending"* %330 to i64
  %344 = load i64, i64* %65, align 8
  %345 = sub i64 %343, %344
  %346 = sdiv exact i64 %345, 12
  %347 = add nsw i64 %346, 1
  %348 = icmp ugt i64 %347, 1537228672809129301
  %349 = inttoptr i64 %344 to %"struct.jxl::PatchBlending"*
  br i1 %348, label %350, label %352

350:                                              ; preds = %342
  %351 = bitcast %"class.std::__1::vector.0"* %53 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %351) #12
  unreachable

352:                                              ; preds = %342
  %353 = sub i64 %333, %344
  %354 = sdiv exact i64 %353, 12
  %355 = icmp ult i64 %354, 768614336404564650
  br i1 %355, label %356, label %361

356:                                              ; preds = %352
  %357 = shl nsw i64 %354, 1
  %358 = icmp ult i64 %357, %347
  %359 = select i1 %358, i64 %347, i64 %357
  %360 = icmp eq i64 %359, 0
  br i1 %360, label %366, label %361

361:                                              ; preds = %356, %352
  %362 = phi i64 [ %359, %356 ], [ 1537228672809129301, %352 ]
  %363 = mul i64 %362, 12
  %364 = call i8* @_Znwm(i64 %363) #11
  %365 = bitcast i8* %364 to %"struct.jxl::PatchBlending"*
  br label %366

366:                                              ; preds = %361, %356
  %367 = phi i64 [ %362, %361 ], [ 0, %356 ]
  %368 = phi %"struct.jxl::PatchBlending"* [ %365, %361 ], [ null, %356 ]
  %369 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %368, i64 %346
  %370 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %368, i64 %367
  %371 = ptrtoint %"struct.jxl::PatchBlending"* %370 to i64
  %372 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %369, i64 0, i32 0
  store i8 %274, i8* %372, align 4
  %373 = getelementptr inbounds i8, i8* %372, i64 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %373, i8* nonnull align 1 getelementptr inbounds ({ i8, [3 x i8], i32, i8, [3 x i8] }, { i8, [3 x i8], i32, i8, [3 x i8] }* @__const._ZN3jxl15PatchDictionary6DecodeEPNS_9BitReaderEmmPb.info, i64 0, i32 1, i64 0), i64 3, i1 false)
  %374 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %368, i64 %346, i32 1
  store i32 %328, i32* %374, align 4
  %375 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %368, i64 %346, i32 2
  store i8 %329, i8* %375, align 4
  %376 = getelementptr inbounds i8, i8* %372, i64 9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %376, i8* nonnull align 1 getelementptr inbounds ({ i8, [3 x i8], i32, i8, [3 x i8] }, { i8, [3 x i8], i32, i8, [3 x i8] }* @__const._ZN3jxl15PatchDictionary6DecodeEPNS_9BitReaderEmmPb.info, i64 0, i32 4, i64 0), i64 3, i1 false)
  %377 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %369, i64 1
  %378 = ptrtoint %"struct.jxl::PatchBlending"* %377 to i64
  %379 = sdiv exact i64 %345, -12
  %380 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %369, i64 %379
  %381 = ptrtoint %"struct.jxl::PatchBlending"* %380 to i64
  %382 = icmp sgt i64 %345, 0
  br i1 %382, label %383, label %386

383:                                              ; preds = %366
  %384 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %380, i64 0, i32 0
  %385 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %349, i64 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %384, i8* align 4 %385, i64 %345, i1 false) #7
  br label %386

386:                                              ; preds = %383, %366
  store i64 %381, i64* %65, align 8
  store i64 %378, i64* %64, align 8
  store i64 %371, i64* %66, align 8
  %387 = icmp eq i64 %344, 0
  br i1 %387, label %390, label %388

388:                                              ; preds = %386
  %389 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %349, i64 0, i32 0
  call void @_ZdlPv(i8* %389) #11
  br label %390

390:                                              ; preds = %334, %386, %388
  %391 = add nuw i64 %265, 1
  %392 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %49, align 8
  %393 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %392, i64 0, i32 0
  %394 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %393, align 8
  %395 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %394, i64 0, i32 0, i32 17
  %396 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %394, i64 0, i32 0, i32 17, i32 0, i32 1
  %397 = bitcast %"struct.jxl::ExtraChannelInfo"** %396 to i64*
  %398 = load i64, i64* %397, align 8
  %399 = bitcast %"class.std::__1::vector.18"* %395 to i64*
  %400 = load i64, i64* %399, align 8
  %401 = sub i64 %398, %400
  %402 = sdiv exact i64 %401, 96
  %403 = add nsw i64 %402, 1
  %404 = icmp ult i64 %391, %403
  br i1 %404, label %264, label %405

405:                                              ; preds = %390, %252
  %406 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %13, align 8
  %407 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %67, align 8
  %408 = icmp ult %"struct.jxl::PatchPosition"* %406, %407
  br i1 %408, label %409, label %425

409:                                              ; preds = %405
  %410 = bitcast %"struct.jxl::PatchPosition"* %406 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %410, i8* nonnull align 8 %52, i64 16, i1 false) #7
  %411 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %406, i64 0, i32 2
  %412 = bitcast %"class.std::__1::vector.0"* %411 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %412, i8 0, i64 24, i1 false) #7
  %413 = load i64, i64* %65, align 8
  %414 = bitcast %"class.std::__1::vector.0"* %411 to i64*
  store i64 %413, i64* %414, align 8
  %415 = load i64, i64* %64, align 8
  %416 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %406, i64 0, i32 2, i32 0, i32 1
  %417 = bitcast %"struct.jxl::PatchBlending"** %416 to i64*
  store i64 %415, i64* %417, align 8
  %418 = load i64, i64* %66, align 8
  %419 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %406, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %420 = bitcast %"struct.jxl::PatchBlending"** %419 to i64*
  store i64 %418, i64* %420, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %54, i8 0, i64 24, i1 false) #7
  %421 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %406, i64 0, i32 3
  %422 = bitcast %"struct.jxl::PatchReferencePosition"* %421 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %422, i8* align 8 %69, i64 40, i1 false) #7
  %423 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %406, i64 1
  %424 = ptrtoint %"struct.jxl::PatchPosition"* %423 to i64
  store i64 %424, i64* %50, align 8
  br label %426

425:                                              ; preds = %405
  call void @_ZNSt3__16vectorIN3jxl13PatchPositionENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(%"class.std::__1::vector"* %10, %"struct.jxl::PatchPosition"* nonnull dereferenceable(80) %9) #7
  br label %426

426:                                              ; preds = %296, %264, %425, %409, %244
  %427 = phi i32 [ 1, %244 ], [ %204, %409 ], [ %204, %425 ], [ 1, %264 ], [ 1, %296 ]
  %428 = phi i32 [ 1, %244 ], [ 0, %409 ], [ 0, %425 ], [ 1, %264 ], [ 1, %296 ]
  %429 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %70, align 8
  %430 = icmp eq %"struct.jxl::PatchBlending"* %429, null
  br i1 %430, label %434, label %431

431:                                              ; preds = %426
  %432 = ptrtoint %"struct.jxl::PatchBlending"* %429 to i64
  store i64 %432, i64* %64, align 8
  %433 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %429, i64 0, i32 0
  call void @_ZdlPv(i8* %433) #11
  br label %434

434:                                              ; preds = %426, %431
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %52) #7
  %435 = icmp eq i32 %428, 0
  %436 = add nuw i64 %203, 1
  br i1 %435, label %200, label %451

437:                                              ; preds = %200, %193
  %438 = phi i32 [ %73, %193 ], [ %427, %200 ]
  %439 = add nuw i64 %72, 1
  %440 = icmp eq i64 %439, %44
  br i1 %440, label %441, label %71

441:                                              ; preds = %437, %46
  %442 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %8, i64 0, i32 4
  %443 = load i32, i32* %442, align 4
  %444 = icmp eq i32 %443, 1245184
  br i1 %444, label %445, label %451

445:                                              ; preds = %441
  %446 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 1, i32 0, i32 0
  %447 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %446, align 8
  %448 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %13, align 8
  %449 = icmp eq %"struct.jxl::PatchPosition"* %447, %448
  br i1 %449, label %451, label %450

450:                                              ; preds = %445
  call void @_ZN3jxl15PatchDictionary17ComputePatchCacheEv(%"class.jxl::PatchDictionary"* %0)
  br label %451

451:                                              ; preds = %96, %185, %182, %158, %109, %71, %106, %434, %445, %441, %39, %450
  %452 = phi i32 [ 0, %450 ], [ 1, %39 ], [ 1, %441 ], [ 1, %445 ], [ %427, %434 ], [ 1, %106 ], [ 1, %71 ], [ 1, %109 ], [ 1, %158 ], [ 1, %182 ], [ 1, %185 ], [ 1, %96 ]
  %453 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %8, i64 0, i32 10, i32 0, i32 0, i32 0
  %454 = load i8*, i8** %453, align 8
  store i8* null, i8** %453, align 8
  %455 = icmp eq i8* %454, null
  br i1 %455, label %457, label %456

456:                                              ; preds = %451
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %454) #7
  br label %457

457:                                              ; preds = %451, %456
  call void @llvm.lifetime.end.p0i8(i64 592, i8* nonnull %40) #7
  br label %458

458:                                              ; preds = %29, %457
  %459 = phi i32 [ %452, %457 ], [ %37, %29 ]
  %460 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %7, i64 0, i32 3, i32 0, i32 0
  %461 = load i32*, i32** %460, align 8
  %462 = icmp eq i32* %461, null
  br i1 %462, label %468, label %463

463:                                              ; preds = %458
  %464 = ptrtoint i32* %461 to i64
  %465 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %7, i64 0, i32 3, i32 0, i32 1
  %466 = bitcast i32** %465 to i64*
  store i64 %464, i64* %466, align 8
  %467 = bitcast i32* %461 to i8*
  call void @_ZdlPv(i8* %467) #11
  br label %468

468:                                              ; preds = %463, %458
  %469 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %7, i64 0, i32 2, i32 0, i32 0
  %470 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %469, align 8
  %471 = icmp eq %"struct.jxl::HybridUintConfig"* %470, null
  br i1 %471, label %477, label %472

472:                                              ; preds = %468
  %473 = ptrtoint %"struct.jxl::HybridUintConfig"* %470 to i64
  %474 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %7, i64 0, i32 2, i32 0, i32 1
  %475 = bitcast %"struct.jxl::HybridUintConfig"** %474 to i64*
  store i64 %473, i64* %475, align 8
  %476 = bitcast %"struct.jxl::HybridUintConfig"* %470 to i8*
  call void @_ZdlPv(i8* %476) #11
  br label %477

477:                                              ; preds = %472, %468
  %478 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %7, i64 0, i32 1
  %479 = getelementptr inbounds %"class.std::__1::vector.177", %"class.std::__1::vector.177"* %478, i64 0, i32 0, i32 0
  %480 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %479, align 8
  %481 = icmp eq %"struct.jxl::HuffmanDecodingData"* %480, null
  br i1 %481, label %505, label %482

482:                                              ; preds = %477
  %483 = bitcast %"struct.jxl::HuffmanDecodingData"* %480 to i8*
  %484 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %7, i64 0, i32 1, i32 0, i32 1
  %485 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %484, align 8
  %486 = icmp eq %"struct.jxl::HuffmanDecodingData"* %485, %480
  br i1 %486, label %503, label %487

487:                                              ; preds = %482, %498
  %488 = phi %"struct.jxl::HuffmanDecodingData"* [ %489, %498 ], [ %485, %482 ]
  %489 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %488, i64 -1
  %490 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %489, i64 0, i32 0, i32 0, i32 0
  %491 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %490, align 8
  %492 = icmp eq %"struct.jxl::HuffmanCode"* %491, null
  br i1 %492, label %498, label %493

493:                                              ; preds = %487
  %494 = ptrtoint %"struct.jxl::HuffmanCode"* %491 to i64
  %495 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %488, i64 -1, i32 0, i32 0, i32 1
  %496 = bitcast %"struct.jxl::HuffmanCode"** %495 to i64*
  store i64 %494, i64* %496, align 8
  %497 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %491, i64 0, i32 0
  call void @_ZdlPv(i8* %497) #11
  br label %498

498:                                              ; preds = %493, %487
  %499 = icmp eq %"struct.jxl::HuffmanDecodingData"* %489, %480
  br i1 %499, label %500, label %487

500:                                              ; preds = %498
  %501 = bitcast %"class.std::__1::vector.177"* %478 to i8**
  %502 = load i8*, i8** %501, align 8
  br label %503

503:                                              ; preds = %500, %482
  %504 = phi i8* [ %502, %500 ], [ %483, %482 ]
  store %"struct.jxl::HuffmanDecodingData"* %480, %"struct.jxl::HuffmanDecodingData"** %484, align 8
  call void @_ZdlPv(i8* %504) #11
  br label %505

505:                                              ; preds = %503, %477
  %506 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %507 = load i8*, i8** %506, align 8
  store i8* null, i8** %506, align 8
  %508 = icmp eq i8* %507, null
  br i1 %508, label %510, label %509

509:                                              ; preds = %505
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %507) #7
  br label %510

510:                                              ; preds = %505, %509
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %33) #7
  %511 = load i8*, i8** %31, align 8
  %512 = icmp eq i8* %511, null
  br i1 %512, label %516, label %513

513:                                              ; preds = %510
  %514 = ptrtoint i8* %511 to i64
  %515 = bitcast i8** %32 to i64*
  store i64 %514, i64* %515, align 8
  call void @_ZdlPv(i8* nonnull %511) #11
  br label %516

516:                                              ; preds = %510, %513
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #7
  ret i32 %459
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"*, i64, %"struct.jxl::ANSCode"*, %"class.std::__1::vector.98"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm(%"class.jxl::ANSSymbolReader"*, %"struct.jxl::ANSCode"*, %"class.jxl::BitReader"* noalias, i64) unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"struct.jxl::ANSCode"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.jxl::ANSSymbolReader"* %0 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast %"struct.jxl::HuffmanDecodingData"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"struct.jxl::HuffmanDecodingData"** %8 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 2
  %14 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 4
  %15 = load i8, i8* %14, align 8, !range !8
  store i8 %15, i8* %13, align 8
  %16 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 4
  store i32 1245184, i32* %16, align 4
  %17 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 5
  %18 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 2, i32 0, i32 0
  %19 = bitcast %"struct.jxl::HybridUintConfig"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"struct.jxl::HybridUintConfig"** %17 to i64*
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 10
  %23 = bitcast %"class.std::__1::unique_ptr"* %22 to i64*
  %24 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 11
  %25 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 15
  %26 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 16
  %27 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 17
  %28 = bitcast %"class.std::__1::unique_ptr"* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 36, i1 false)
  %29 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18
  %30 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> <i32 1048576, i32 4, i32 16, i32 2>, <4 x i32>* %30, align 4
  %31 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 3
  store i32 0, i32* %31, align 4
  %32 = icmp eq i8 %15, 0
  br i1 %32, label %33, label %76

33:                                               ; preds = %4
  %34 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = icmp ugt i8* %35, %37
  br i1 %38, label %39, label %44, !prof !45

39:                                               ; preds = %33
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #7
  %40 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %43 = load i64, i64* %42, align 8
  br label %57

44:                                               ; preds = %33
  %45 = bitcast i8* %35 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = shl i64 %46, %48
  %50 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = or i64 %51, %49
  store i64 %52, i64* %50, align 8
  %53 = sub i64 63, %48
  %54 = lshr i64 %53, 3
  %55 = getelementptr inbounds i8, i8* %35, i64 %54
  store i8* %55, i8** %34, align 8
  %56 = or i64 %48, 56
  store i64 %56, i64* %47, align 8
  br label %57

57:                                               ; preds = %39, %44
  %58 = phi i64 [ %43, %39 ], [ %56, %44 ]
  %59 = phi i64 [ %41, %39 ], [ %52, %44 ]
  %60 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %61 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %62 = add i64 %58, -32
  store i64 %62, i64* %61, align 8
  %63 = lshr i64 %59, 32
  store i64 %63, i64* %60, align 8
  %64 = trunc i64 %59 to i32
  store i32 %64, i32* %16, align 4
  %65 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 6
  store i32 %67, i32* %68, align 8
  %69 = load i8, i8* %65, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 12, %70
  %72 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 7
  store i32 %71, i32* %72, align 4
  %73 = shl nsw i32 -1, %71
  %74 = xor i32 %73, -1
  %75 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 8
  store i32 %74, i32* %75, align 8
  br label %77

76:                                               ; preds = %4
  store i32 1245184, i32* %16, align 4
  br label %77

77:                                               ; preds = %76, %57
  %78 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 1
  %79 = load i8, i8* %78, align 8, !range !8
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %125, label %81

81:                                               ; preds = %77
  %82 = tail call i64 @_ZN3jxl12CacheAligned10NextOffsetEv() #7
  %83 = tail call i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64 4194304, i64 %82) #7
  %84 = ptrtoint i8* %83 to i64
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %22, i64 0, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  store i64 %84, i64* %23, align 8
  %87 = icmp eq i8* %86, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %81
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %86) #7
  %89 = load i64, i64* %23, align 8
  br label %90

90:                                               ; preds = %88, %81
  %91 = phi i64 [ %89, %88 ], [ %84, %81 ]
  %92 = bitcast i32** %24 to i64*
  store i64 %91, i64* %92, align 8
  %93 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 5
  %94 = load i64, i64* %93, align 8
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %25, align 4
  %96 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 4
  %97 = bitcast %"struct.jxl::HybridUintConfig"* %29 to i8*
  %98 = bitcast %"struct.jxl::HybridUintConfig"* %96 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* align 4 %98, i64 16, i1 false)
  %99 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 2
  %100 = load i32, i32* %99, align 4
  store i32 %100, i32* %27, align 4
  %101 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 3
  %102 = load i32, i32* %101, align 8
  store i32 %102, i32* %26, align 8
  %103 = icmp eq i64 %3, 0
  %104 = select i1 %103, i32 0, i32 120
  %105 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 20
  store i32 %104, i32* %105, align 8
  br i1 %103, label %125, label %106

106:                                              ; preds = %90
  %107 = trunc i64 %3 to i32
  br label %108

108:                                              ; preds = %106, %108
  %109 = phi i64 [ 0, %106 ], [ %121, %108 ]
  %110 = getelementptr inbounds [120 x [2 x i8]], [120 x [2 x i8]]* @_ZN3jxlL17kSpecialDistancesE, i64 0, i64 %109, i64 0
  %111 = load i8, i8* %110, align 2
  %112 = sext i8 %111 to i32
  %113 = getelementptr inbounds [120 x [2 x i8]], [120 x [2 x i8]]* @_ZN3jxlL17kSpecialDistancesE, i64 0, i64 %109, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = sext i8 %114 to i32
  %116 = mul nsw i32 %115, %107
  %117 = add nsw i32 %116, %112
  %118 = icmp sgt i32 %117, 1
  %119 = select i1 %118, i32 %117, i32 1
  %120 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 19, i64 %109
  store i32 %119, i32* %120, align 4
  %121 = add nuw nsw i64 %109, 1
  %122 = load i32, i32* %105, align 8
  %123 = zext i32 %122 to i64
  %124 = icmp ult i64 %121, %123
  br i1 %124, label %108, label %125

125:                                              ; preds = %108, %90, %77
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13PatchPositionENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::PatchPosition"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 80
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"struct.jxl::PatchPosition"*
  br i1 %10, label %12, label %87

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"struct.jxl::PatchPosition"** %13 to i64*
  %15 = icmp ugt i64 %1, 230584300921369395
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #12
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = sdiv exact i64 %19, 80
  %21 = mul i64 %1, 80
  %22 = tail call i8* @_Znwm(i64 %21) #11
  %23 = bitcast i8* %22 to %"struct.jxl::PatchPosition"*
  %24 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %23, i64 %20
  %25 = ptrtoint %"struct.jxl::PatchPosition"* %24 to i64
  %26 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %23, i64 %1
  %27 = ptrtoint %"struct.jxl::PatchPosition"* %26 to i64
  %28 = inttoptr i64 %18 to %"struct.jxl::PatchPosition"*
  %29 = icmp eq %"struct.jxl::PatchPosition"* %28, %11
  br i1 %29, label %64, label %30

30:                                               ; preds = %17, %30
  %31 = phi %"struct.jxl::PatchPosition"* [ %33, %30 ], [ %24, %17 ]
  %32 = phi %"struct.jxl::PatchPosition"* [ %34, %30 ], [ %28, %17 ]
  %33 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %31, i64 -1
  %34 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %32, i64 -1
  %35 = bitcast %"struct.jxl::PatchPosition"* %33 to i8*
  %36 = bitcast %"struct.jxl::PatchPosition"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 16, i1 false) #7
  %37 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %31, i64 -1, i32 2
  %38 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %32, i64 -1, i32 2
  %39 = bitcast %"class.std::__1::vector.0"* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 24, i1 false) #7
  %40 = bitcast %"class.std::__1::vector.0"* %38 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"class.std::__1::vector.0"* %37 to i64*
  store i64 %41, i64* %42, align 8
  %43 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %32, i64 -1, i32 2, i32 0, i32 1
  %44 = bitcast %"struct.jxl::PatchBlending"** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %31, i64 -1, i32 2, i32 0, i32 1
  %47 = bitcast %"struct.jxl::PatchBlending"** %46 to i64*
  store i64 %45, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %32, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %49 = bitcast %"struct.jxl::PatchBlending"** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %31, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %52 = bitcast %"struct.jxl::PatchBlending"** %51 to i64*
  store i64 %50, i64* %52, align 8
  %53 = bitcast %"class.std::__1::vector.0"* %38 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #7
  %54 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %31, i64 -1, i32 3
  %55 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %32, i64 -1, i32 3
  %56 = bitcast %"struct.jxl::PatchReferencePosition"* %54 to i8*
  %57 = bitcast %"struct.jxl::PatchReferencePosition"* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 40, i1 false) #7
  %58 = icmp eq %"struct.jxl::PatchPosition"* %34, %11
  br i1 %58, label %59, label %30

59:                                               ; preds = %30
  %60 = ptrtoint %"struct.jxl::PatchPosition"* %33 to i64
  %61 = load i64, i64* %6, align 8
  %62 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %13, align 8
  %63 = inttoptr i64 %61 to %"struct.jxl::PatchPosition"*
  br label %64

64:                                               ; preds = %17, %59
  %65 = phi %"struct.jxl::PatchPosition"* [ %63, %59 ], [ %28, %17 ]
  %66 = phi %"struct.jxl::PatchPosition"* [ %62, %59 ], [ %11, %17 ]
  %67 = phi i64 [ %60, %59 ], [ %25, %17 ]
  %68 = phi i64 [ %61, %59 ], [ %18, %17 ]
  store i64 %67, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %69 = icmp eq %"struct.jxl::PatchPosition"* %66, %65
  br i1 %69, label %83, label %70

70:                                               ; preds = %64, %81
  %71 = phi %"struct.jxl::PatchPosition"* [ %72, %81 ], [ %66, %64 ]
  %72 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %71, i64 -1
  %73 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %71, i64 -1, i32 2, i32 0, i32 0
  %74 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %73, align 8
  %75 = icmp eq %"struct.jxl::PatchBlending"* %74, null
  br i1 %75, label %81, label %76

76:                                               ; preds = %70
  %77 = ptrtoint %"struct.jxl::PatchBlending"* %74 to i64
  %78 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %71, i64 -1, i32 2, i32 0, i32 1
  %79 = bitcast %"struct.jxl::PatchBlending"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %74, i64 0, i32 0
  tail call void @_ZdlPv(i8* %80) #11
  br label %81

81:                                               ; preds = %76, %70
  %82 = icmp eq %"struct.jxl::PatchPosition"* %72, %65
  br i1 %82, label %83, label %70

83:                                               ; preds = %81, %64
  %84 = icmp eq i64 %68, 0
  br i1 %84, label %87, label %85

85:                                               ; preds = %83
  %86 = inttoptr i64 %68 to i8*
  tail call void @_ZdlPv(i8* %86) #11
  br label %87

87:                                               ; preds = %85, %83, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl15PatchDictionary17ComputePatchCacheEv(%"class.jxl::PatchDictionary"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"struct.std::__1::__less.228", align 1
  %3 = alloca %"class.std::__1::vector.198", align 8
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 3
  %6 = bitcast %"class.std::__1::vector.8"* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 3, i32 0, i32 1
  %9 = bitcast i64** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 2
  %11 = bitcast %"class.std::__1::vector.8"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 2, i32 0, i32 1
  %14 = bitcast i64** %13 to i64*
  store i64 %12, i64* %14, align 8
  %15 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 1
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 0
  %17 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %16, align 8
  %18 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 1, i32 0, i32 1
  %19 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %18, align 8
  %20 = icmp eq %"struct.jxl::PatchPosition"* %17, %19
  br i1 %20, label %278, label %21

21:                                               ; preds = %1
  %22 = ptrtoint %"struct.jxl::PatchPosition"* %17 to i64
  %23 = ptrtoint %"struct.jxl::PatchPosition"* %19 to i64
  %24 = bitcast %"class.std::__1::vector.198"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #7
  %25 = getelementptr inbounds %"class.std::__1::vector.198", %"class.std::__1::vector.198"* %3, i64 0, i32 0, i32 0
  %26 = getelementptr inbounds %"class.std::__1::vector.198", %"class.std::__1::vector.198"* %3, i64 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.std::__1::vector.198", %"class.std::__1::vector.198"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 0, i64 24, i1 false) #7
  %28 = bitcast %"struct.jxl::PatchPosition"** %18 to i64*
  %29 = bitcast %"class.std::__1::vector"* %15 to i64*
  %30 = bitcast %"struct.std::__1::pair.200"** %26 to i64*
  %31 = bitcast %"class.std::__1::vector.198"* %3 to i64*
  %32 = bitcast %"struct.std::__1::pair.200"** %27 to i64*
  br label %90

33:                                               ; preds = %108
  %34 = getelementptr inbounds %"struct.std::__1::__less.228", %"struct.std::__1::__less.228"* %2, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %34) #7
  call void @_ZNSt3__16__sortIRNS_6__lessINS_4pairImmEES3_EEPS3_EEvT0_S7_T_(%"struct.std::__1::pair.200"* %110, %"struct.std::__1::pair.200"* %109, %"struct.std::__1::__less.228"* nonnull dereferenceable(1) %2) #7
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %34) #7
  %35 = load %"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"** %26, align 8
  %36 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %35, i64 -1, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, 2
  %39 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #7
  %40 = ptrtoint %"struct.std::__1::pair.200"* %35 to i64
  %41 = load i64, i64* %31, align 8
  %42 = sub i64 %40, %41
  %43 = ashr exact i64 %42, 4
  store i64 %43, i64* %4, align 8
  %44 = load i64, i64* %9, align 8
  %45 = load i64, i64* %6, align 8
  %46 = sub i64 %44, %45
  %47 = ashr exact i64 %46, 3
  %48 = icmp ugt i64 %38, %47
  %49 = inttoptr i64 %45 to i64*
  %50 = inttoptr i64 %41 to %"struct.std::__1::pair.200"*
  br i1 %48, label %51, label %58

51:                                               ; preds = %33
  %52 = sub i64 %38, %47
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEmRKm(%"class.std::__1::vector.8"* %5, i64 %52, i64* nonnull dereferenceable(8) %4) #7
  %53 = load i64, i64* %30, align 8
  %54 = load i64, i64* %31, align 8
  %55 = inttoptr i64 %54 to %"struct.std::__1::pair.200"*
  %56 = sub i64 %53, %54
  %57 = ashr exact i64 %56, 4
  br label %62

58:                                               ; preds = %33
  %59 = icmp ult i64 %38, %47
  br i1 %59, label %60, label %62

60:                                               ; preds = %58
  %61 = getelementptr inbounds i64, i64* %49, i64 %38
  store i64* %61, i64** %8, align 8
  br label %62

62:                                               ; preds = %51, %58, %60
  %63 = phi i64 [ %57, %51 ], [ %43, %58 ], [ %43, %60 ]
  %64 = phi %"struct.std::__1::pair.200"* [ %55, %51 ], [ %50, %58 ], [ %50, %60 ]
  %65 = phi i64 [ %53, %51 ], [ %40, %58 ], [ %40, %60 ]
  %66 = phi i64 [ %54, %51 ], [ %41, %58 ], [ %41, %60 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #7
  %67 = load i64, i64* %14, align 8
  %68 = load i64, i64* %11, align 8
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = icmp ugt i64 %63, %70
  %72 = inttoptr i64 %68 to i64*
  br i1 %71, label %73, label %78

73:                                               ; preds = %62
  %74 = sub nsw i64 %63, %70
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector.8"* %10, i64 %74) #7
  %75 = load i64, i64* %30, align 8
  %76 = load i64, i64* %31, align 8
  %77 = inttoptr i64 %76 to %"struct.std::__1::pair.200"*
  br label %82

78:                                               ; preds = %62
  %79 = icmp ult i64 %63, %70
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = getelementptr inbounds i64, i64* %72, i64 %63
  store i64* %81, i64** %13, align 8
  br label %82

82:                                               ; preds = %73, %78, %80
  %83 = phi %"struct.std::__1::pair.200"* [ %77, %73 ], [ %64, %78 ], [ %64, %80 ]
  %84 = phi i64 [ %76, %73 ], [ %66, %78 ], [ %66, %80 ]
  %85 = phi i64 [ %75, %73 ], [ %65, %78 ], [ %65, %80 ]
  %86 = icmp eq i64 %85, %84
  br i1 %86, label %188, label %87

87:                                               ; preds = %82
  %88 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %10, i64 0, i32 0, i32 0
  %89 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %5, i64 0, i32 0, i32 0
  br label %225

90:                                               ; preds = %21, %108
  %91 = phi %"struct.std::__1::pair.200"* [ null, %21 ], [ %109, %108 ]
  %92 = phi %"struct.std::__1::pair.200"* [ null, %21 ], [ %110, %108 ]
  %93 = phi i64 [ %22, %21 ], [ %111, %108 ]
  %94 = phi i64 [ %23, %21 ], [ %112, %108 ]
  %95 = phi i64 [ 0, %21 ], [ %113, %108 ]
  %96 = phi %"struct.std::__1::pair.200"* [ null, %21 ], [ %114, %108 ]
  %97 = phi %"struct.jxl::PatchPosition"* [ %17, %21 ], [ %119, %108 ]
  %98 = phi i64 [ 0, %21 ], [ %115, %108 ]
  %99 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %97, i64 %98, i32 1
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %97, i64 %98, i32 3, i32 4
  %102 = load i64, i64* %101, align 8
  %103 = add i64 %102, %100
  %104 = icmp ult i64 %100, %103
  br i1 %104, label %120, label %108

105:                                              ; preds = %177
  %106 = load i64, i64* %28, align 8
  %107 = load i64, i64* %29, align 8
  br label %108

108:                                              ; preds = %105, %90
  %109 = phi %"struct.std::__1::pair.200"* [ %178, %105 ], [ %91, %90 ]
  %110 = phi %"struct.std::__1::pair.200"* [ %179, %105 ], [ %92, %90 ]
  %111 = phi i64 [ %107, %105 ], [ %93, %90 ]
  %112 = phi i64 [ %106, %105 ], [ %94, %90 ]
  %113 = phi i64 [ %180, %105 ], [ %95, %90 ]
  %114 = phi %"struct.std::__1::pair.200"* [ %178, %105 ], [ %96, %90 ]
  %115 = add nuw i64 %98, 1
  %116 = sub i64 %112, %111
  %117 = sdiv exact i64 %116, 80
  %118 = icmp ult i64 %115, %117
  %119 = inttoptr i64 %111 to %"struct.jxl::PatchPosition"*
  br i1 %118, label %90, label %33

120:                                              ; preds = %90, %177
  %121 = phi %"struct.std::__1::pair.200"* [ %179, %177 ], [ %92, %90 ]
  %122 = phi i64 [ %180, %177 ], [ %95, %90 ]
  %123 = phi %"struct.std::__1::pair.200"* [ %178, %177 ], [ %96, %90 ]
  %124 = phi i64 [ %181, %177 ], [ %100, %90 ]
  %125 = load %"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"** %27, align 8
  %126 = icmp ult %"struct.std::__1::pair.200"* %123, %125
  %127 = ptrtoint %"struct.std::__1::pair.200"* %125 to i64
  br i1 %126, label %128, label %133

128:                                              ; preds = %120
  %129 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %123, i64 0, i32 0
  store i64 %124, i64* %129, align 8
  %130 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %123, i64 0, i32 1
  store i64 %98, i64* %130, align 8
  %131 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %123, i64 1
  %132 = ptrtoint %"struct.std::__1::pair.200"* %131 to i64
  store i64 %132, i64* %30, align 8
  br label %177

133:                                              ; preds = %120
  %134 = load i64, i64* %31, align 8
  %135 = sub i64 %122, %134
  %136 = ashr exact i64 %135, 4
  %137 = add nsw i64 %136, 1
  %138 = icmp ugt i64 %137, 1152921504606846975
  br i1 %138, label %139, label %141

139:                                              ; preds = %133
  %140 = bitcast %"class.std::__1::vector.198"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %140) #12
  unreachable

141:                                              ; preds = %133
  %142 = sub i64 %127, %134
  %143 = ashr exact i64 %142, 4
  %144 = icmp ult i64 %143, 576460752303423487
  br i1 %144, label %145, label %153

145:                                              ; preds = %141
  %146 = ashr exact i64 %142, 3
  %147 = icmp ult i64 %146, %137
  %148 = select i1 %147, i64 %137, i64 %146
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %158, label %150

150:                                              ; preds = %145
  %151 = icmp ugt i64 %148, 1152921504606846975
  br i1 %151, label %152, label %153

152:                                              ; preds = %150
  tail call void @abort() #12
  unreachable

153:                                              ; preds = %150, %141
  %154 = phi i64 [ %148, %150 ], [ 1152921504606846975, %141 ]
  %155 = shl i64 %154, 4
  %156 = tail call i8* @_Znwm(i64 %155) #11
  %157 = bitcast i8* %156 to %"struct.std::__1::pair.200"*
  br label %158

158:                                              ; preds = %153, %145
  %159 = phi i64 [ %154, %153 ], [ 0, %145 ]
  %160 = phi i8* [ %156, %153 ], [ null, %145 ]
  %161 = phi %"struct.std::__1::pair.200"* [ %157, %153 ], [ null, %145 ]
  %162 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %161, i64 %136
  %163 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %161, i64 %159
  %164 = ptrtoint %"struct.std::__1::pair.200"* %163 to i64
  %165 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %162, i64 0, i32 0
  store i64 %124, i64* %165, align 8
  %166 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %161, i64 %136, i32 1
  store i64 %98, i64* %166, align 8
  %167 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %162, i64 1
  %168 = ptrtoint %"struct.std::__1::pair.200"* %167 to i64
  %169 = ptrtoint %"struct.std::__1::pair.200"* %161 to i64
  %170 = icmp sgt i64 %135, 0
  br i1 %170, label %171, label %173

171:                                              ; preds = %158
  %172 = inttoptr i64 %134 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %160, i8* align 8 %172, i64 %135, i1 false) #7
  br label %173

173:                                              ; preds = %171, %158
  store i64 %169, i64* %31, align 8
  store i64 %168, i64* %30, align 8
  store i64 %164, i64* %32, align 8
  %174 = icmp eq i64 %134, 0
  br i1 %174, label %177, label %175

175:                                              ; preds = %173
  %176 = inttoptr i64 %134 to i8*
  tail call void @_ZdlPv(i8* %176) #11
  br label %177

177:                                              ; preds = %175, %173, %128
  %178 = phi %"struct.std::__1::pair.200"* [ %167, %175 ], [ %167, %173 ], [ %131, %128 ]
  %179 = phi %"struct.std::__1::pair.200"* [ %161, %175 ], [ %161, %173 ], [ %121, %128 ]
  %180 = phi i64 [ %168, %175 ], [ %168, %173 ], [ %132, %128 ]
  %181 = add nuw i64 %124, 1
  %182 = load i64, i64* %99, align 8
  %183 = load i64, i64* %101, align 8
  %184 = add i64 %183, %182
  %185 = icmp ult i64 %181, %184
  br i1 %185, label %120, label %105

186:                                              ; preds = %225
  %187 = inttoptr i64 %242 to %"struct.std::__1::pair.200"*
  br label %188

188:                                              ; preds = %186, %82
  %189 = phi %"struct.std::__1::pair.200"* [ %83, %82 ], [ %187, %186 ]
  %190 = load i64, i64* %9, align 8
  %191 = load i64, i64* %6, align 8
  %192 = sub i64 %190, %191
  %193 = ashr exact i64 %192, 3
  %194 = add nsw i64 %193, -1
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %249, label %196

196:                                              ; preds = %188
  %197 = inttoptr i64 %191 to i64*
  %198 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %5, i64 0, i32 0, i32 0
  %199 = getelementptr inbounds i64, i64* %197, i64 %194
  %200 = add nsw i64 %193, -2
  %201 = getelementptr inbounds i64, i64* %197, i64 %200
  %202 = load i64, i64* %201, align 8
  %203 = load i64, i64* %199, align 8
  %204 = icmp ult i64 %202, %203
  %205 = select i1 %204, i64 %202, i64 %203
  store i64 %205, i64* %201, align 8
  %206 = add nsw i64 %193, -2
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %247, label %208

208:                                              ; preds = %196
  %209 = and i64 %206, 1
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %221, label %211

211:                                              ; preds = %208
  %212 = load i64*, i64** %198, align 8
  %213 = getelementptr inbounds i64, i64* %212, i64 %206
  %214 = add nsw i64 %193, -3
  %215 = getelementptr inbounds i64, i64* %212, i64 %214
  %216 = load i64, i64* %215, align 8
  %217 = load i64, i64* %213, align 8
  %218 = icmp ult i64 %216, %217
  %219 = select i1 %218, i64 %216, i64 %217
  store i64 %219, i64* %215, align 8
  %220 = add nsw i64 %193, -3
  br label %221

221:                                              ; preds = %208, %211
  %222 = phi i64 [ %206, %208 ], [ %220, %211 ]
  %223 = phi i64 [ %194, %208 ], [ %206, %211 ]
  %224 = icmp eq i64 %192, 24
  br i1 %224, label %247, label %256

225:                                              ; preds = %87, %225
  %226 = phi %"struct.std::__1::pair.200"* [ %83, %87 ], [ %246, %225 ]
  %227 = phi i64 [ 0, %87 ], [ %240, %225 ]
  %228 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %226, i64 %227, i32 1
  %229 = load i64, i64* %228, align 8
  %230 = load i64*, i64** %88, align 8
  %231 = getelementptr inbounds i64, i64* %230, i64 %227
  store i64 %229, i64* %231, align 8
  %232 = load %"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"** %25, align 8
  %233 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %232, i64 %227, i32 0
  %234 = load i64, i64* %233, align 8
  %235 = load i64*, i64** %89, align 8
  %236 = getelementptr inbounds i64, i64* %235, i64 %234
  %237 = load i64, i64* %236, align 8
  %238 = icmp ult i64 %227, %237
  %239 = select i1 %238, i64 %227, i64 %237
  store i64 %239, i64* %236, align 8
  %240 = add nuw i64 %227, 1
  %241 = load i64, i64* %30, align 8
  %242 = load i64, i64* %31, align 8
  %243 = sub i64 %241, %242
  %244 = ashr exact i64 %243, 4
  %245 = icmp ult i64 %240, %244
  %246 = inttoptr i64 %242 to %"struct.std::__1::pair.200"*
  br i1 %245, label %225, label %186

247:                                              ; preds = %221, %256, %196
  %248 = load %"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"** %25, align 8
  br label %249

249:                                              ; preds = %247, %188
  %250 = phi %"struct.std::__1::pair.200"* [ %248, %247 ], [ %189, %188 ]
  %251 = icmp eq %"struct.std::__1::pair.200"* %250, null
  br i1 %251, label %255, label %252

252:                                              ; preds = %249
  %253 = ptrtoint %"struct.std::__1::pair.200"* %250 to i64
  store i64 %253, i64* %30, align 8
  %254 = bitcast %"struct.std::__1::pair.200"* %250 to i8*
  call void @_ZdlPv(i8* %254) #11
  br label %255

255:                                              ; preds = %249, %252
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #7
  br label %278

256:                                              ; preds = %221, %256
  %257 = phi i64 [ %276, %256 ], [ %222, %221 ]
  %258 = phi i64 [ %267, %256 ], [ %223, %221 ]
  %259 = load i64*, i64** %198, align 8
  %260 = getelementptr inbounds i64, i64* %259, i64 %257
  %261 = add i64 %258, -2
  %262 = getelementptr inbounds i64, i64* %259, i64 %261
  %263 = load i64, i64* %262, align 8
  %264 = load i64, i64* %260, align 8
  %265 = icmp ult i64 %263, %264
  %266 = select i1 %265, i64 %263, i64 %264
  store i64 %266, i64* %262, align 8
  %267 = add i64 %257, -1
  %268 = load i64*, i64** %198, align 8
  %269 = getelementptr inbounds i64, i64* %268, i64 %267
  %270 = add i64 %257, -2
  %271 = getelementptr inbounds i64, i64* %268, i64 %270
  %272 = load i64, i64* %271, align 8
  %273 = load i64, i64* %269, align 8
  %274 = icmp ult i64 %272, %273
  %275 = select i1 %274, i64 %272, i64 %273
  store i64 %275, i64* %271, align 8
  %276 = add i64 %257, -2
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %247, label %256

278:                                              ; preds = %1, %255
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3jxl15PatchDictionary5AddToEPNS_6Image3IfEERKNS_4RectEPKPfS6_(%"class.jxl::PatchDictionary"* nocapture readonly, %"class.jxl::Image3"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), float** nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.std::__1::vector.206", align 8
  %7 = alloca %"class.std::__1::vector.213", align 8
  %8 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %9, %11
  br i1 %12, label %13, label %19

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %15, %17
  br i1 %18, label %22, label %19

19:                                               ; preds = %5, %13
  %20 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i64 0, i64 0), i32 195, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.14, i64 0, i64 0)) #7
  %21 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

22:                                               ; preds = %13
  %23 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 0
  %24 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %23, align 8
  %25 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %24, i64 0, i32 0
  %26 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %25, align 8
  %27 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %26, i64 0, i32 0, i32 15
  %28 = load i32, i32* %27, align 8
  %29 = zext i32 %28 to i64
  %30 = bitcast %"class.std::__1::vector.206"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #7
  %31 = getelementptr inbounds %"class.std::__1::vector.206", %"class.std::__1::vector.206"* %6, i64 0, i32 0, i32 0
  %32 = getelementptr inbounds %"class.std::__1::vector.206", %"class.std::__1::vector.206"* %6, i64 0, i32 0, i32 1
  %33 = getelementptr inbounds %"class.std::__1::vector.206", %"class.std::__1::vector.206"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %34 = add nuw nsw i64 %29, 3
  %35 = shl nuw nsw i64 %34, 3
  %36 = tail call i8* @_Znwm(i64 %35) #11
  %37 = bitcast i8* %36 to float**
  %38 = bitcast %"class.std::__1::vector.206"* %6 to i8**
  store i8* %36, i8** %38, align 8
  %39 = getelementptr inbounds float*, float** %37, i64 %34
  store float** %39, float*** %33, align 8
  %40 = bitcast float*** %32 to i64*
  %41 = ptrtoint i8* %36 to i64
  %42 = add nuw nsw i64 %29, 2
  %43 = getelementptr float*, float** %37, i64 %42
  %44 = ptrtoint float** %43 to i64
  %45 = sub i64 8, %41
  %46 = add i64 %45, %44
  %47 = and i64 %46, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 0, i64 %47, i1 false) #7
  %48 = ptrtoint float** %39 to i64
  store i64 %48, i64* %40, align 8
  %49 = bitcast %"class.std::__1::vector.213"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %49) #7
  %50 = getelementptr inbounds %"class.std::__1::vector.213", %"class.std::__1::vector.213"* %7, i64 0, i32 0, i32 0
  %51 = getelementptr inbounds %"class.std::__1::vector.213", %"class.std::__1::vector.213"* %7, i64 0, i32 0, i32 1
  %52 = getelementptr inbounds %"class.std::__1::vector.213", %"class.std::__1::vector.213"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %53 = tail call i8* @_Znwm(i64 %35) #11
  %54 = bitcast i8* %53 to float**
  %55 = bitcast %"class.std::__1::vector.213"* %7 to i8**
  store i8* %53, i8** %55, align 8
  %56 = getelementptr inbounds float*, float** %54, i64 %34
  store float** %56, float*** %52, align 8
  %57 = bitcast float*** %51 to i64*
  %58 = ptrtoint i8* %53 to i64
  %59 = getelementptr float*, float** %54, i64 %42
  %60 = ptrtoint float** %59 to i64
  %61 = sub i64 8, %58
  %62 = add i64 %61, %60
  %63 = and i64 %62, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %53, i8 0, i64 %63, i1 false) #7
  %64 = ptrtoint float** %56 to i64
  store i64 %64, i64* %57, align 8
  %65 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = add i64 %15, %66
  %68 = icmp ult i64 %66, %67
  br i1 %68, label %69, label %316

69:                                               ; preds = %22
  %70 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 3
  %71 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 3, i32 0, i32 1
  %72 = bitcast i64** %71 to i64*
  %73 = bitcast %"class.std::__1::vector.8"* %70 to i64*
  %74 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %70, i64 0, i32 0, i32 0
  %75 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 2, i32 0, i32 0
  %76 = getelementptr inbounds %"class.jxl::PatchDictionary", %"class.jxl::PatchDictionary"* %0, i64 0, i32 1, i32 0, i32 0
  %77 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  %78 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %79 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %80 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %81 = icmp eq i32 %28, 0
  %82 = load i64, i64* %73, align 8
  %83 = inttoptr i64 %82 to i64*
  %84 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %85 = getelementptr inbounds i8, i8* %36, i64 8
  %86 = bitcast i8* %85 to float**
  %87 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %88 = getelementptr inbounds i8, i8* %53, i64 8
  %89 = bitcast i8* %88 to float**
  %90 = getelementptr inbounds i8, i8* %36, i64 16
  %91 = bitcast i8* %90 to float**
  %92 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %93 = getelementptr inbounds i8, i8* %53, i64 16
  %94 = bitcast i8* %93 to float**
  br label %95

95:                                               ; preds = %69, %308
  %96 = phi i64 [ %15, %69 ], [ %309, %308 ]
  %97 = phi i64 [ %66, %69 ], [ %310, %308 ]
  %98 = phi i64* [ %83, %69 ], [ %311, %308 ]
  %99 = phi i64* [ %83, %69 ], [ %312, %308 ]
  %100 = phi i64 [ %82, %69 ], [ %313, %308 ]
  %101 = phi i64 [ %66, %69 ], [ %102, %308 ]
  %102 = add nuw i64 %101, 1
  %103 = load i64, i64* %72, align 8
  %104 = sub i64 %103, %100
  %105 = ashr exact i64 %104, 3
  %106 = icmp ult i64 %102, %105
  br i1 %106, label %107, label %308

107:                                              ; preds = %95
  %108 = getelementptr inbounds i64, i64* %99, i64 %101
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds i64, i64* %99, i64 %102
  %111 = load i64, i64* %110, align 8
  %112 = icmp ult i64 %109, %111
  %113 = ptrtoint i64* %99 to i64
  br i1 %112, label %114, label %308

114:                                              ; preds = %107, %298
  %115 = phi i64* [ %299, %298 ], [ %98, %107 ]
  %116 = phi i64 [ %300, %298 ], [ %109, %107 ]
  %117 = load i64*, i64** %75, align 8
  %118 = getelementptr inbounds i64, i64* %117, i64 %116
  %119 = load i64, i64* %118, align 8
  %120 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %76, align 8
  %121 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %120, i64 %119, i32 1
  %122 = load i64, i64* %121, align 8
  %123 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %120, i64 %119, i32 0
  %124 = load i64, i64* %123, align 8
  %125 = sub i64 %101, %122
  %126 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %120, i64 %119, i32 3, i32 0
  %127 = load i64, i64* %126, align 8
  %128 = load i64, i64* %77, align 8
  %129 = load i64, i64* %10, align 8
  %130 = add i64 %129, %128
  %131 = icmp ult i64 %124, %130
  br i1 %131, label %132, label %298

132:                                              ; preds = %114
  %133 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %120, i64 %119, i32 3, i32 3
  %134 = load i64, i64* %133, align 8
  %135 = add i64 %134, %124
  %136 = icmp ult i64 %135, %128
  br i1 %136, label %298, label %137

137:                                              ; preds = %132
  %138 = icmp ult i64 %124, %128
  %139 = select i1 %138, i64 %128, i64 %124
  %140 = icmp ult i64 %130, %135
  %141 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %120, i64 %119, i32 3, i32 2
  %142 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %120, i64 %119, i32 3, i32 1
  %143 = sub i64 0, %124
  %144 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %23, align 8
  %145 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %144, i64 0, i32 17, i64 %127, i32 1
  %146 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %145, align 8
  %147 = load i64, i64* %141, align 8
  %148 = add i64 %147, %125
  %149 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %146, i64 0, i32 10, i32 0, i64 0, i32 0, i32 4
  %150 = load i64, i64* %149, align 8
  %151 = mul i64 %150, %148
  %152 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %146, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %153 = load i8*, i8** %152, align 8
  %154 = ptrtoint i8* %153 to i64
  %155 = and i64 %154, 63
  %156 = icmp eq i64 %155, 0
  tail call void @llvm.assume(i1 %156) #7
  %157 = getelementptr inbounds i8, i8* %153, i64 %151
  %158 = ptrtoint i8* %157 to i64
  %159 = and i64 %158, 63
  %160 = icmp eq i64 %159, 0
  tail call void @llvm.assume(i1 %160) #7
  %161 = bitcast i8* %157 to float*
  %162 = load i64, i64* %142, align 8
  %163 = getelementptr inbounds float, float* %161, i64 %139
  %164 = getelementptr inbounds float, float* %163, i64 %143
  %165 = getelementptr inbounds float, float* %164, i64 %162
  store float* %165, float** %37, align 8
  %166 = load i64, i64* %65, align 8
  %167 = sub i64 %101, %166
  %168 = load i64, i64* %78, align 8
  %169 = add i64 %167, %168
  %170 = load i64, i64* %79, align 8
  %171 = mul i64 %170, %169
  %172 = load i8*, i8** %84, align 8
  %173 = ptrtoint i8* %172 to i64
  %174 = and i64 %173, 63
  %175 = icmp eq i64 %174, 0
  tail call void @llvm.assume(i1 %175) #7
  %176 = getelementptr inbounds i8, i8* %172, i64 %171
  %177 = ptrtoint i8* %176 to i64
  %178 = and i64 %177, 63
  %179 = icmp eq i64 %178, 0
  tail call void @llvm.assume(i1 %179) #7
  %180 = bitcast i8* %176 to float*
  %181 = load i64, i64* %80, align 8
  %182 = getelementptr inbounds float, float* %180, i64 %139
  %183 = getelementptr inbounds float, float* %182, i64 %181
  %184 = sub i64 0, %128
  %185 = getelementptr inbounds float, float* %183, i64 %184
  store float* %185, float** %54, align 8
  %186 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %145, align 8
  %187 = load i64, i64* %141, align 8
  %188 = add i64 %187, %125
  %189 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %186, i64 0, i32 10, i32 0, i64 0, i32 0, i32 4
  %190 = load i64, i64* %189, align 8
  %191 = mul i64 %190, %188
  %192 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %186, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %193 = load i8*, i8** %192, align 8
  %194 = ptrtoint i8* %193 to i64
  %195 = and i64 %194, 63
  %196 = icmp eq i64 %195, 0
  tail call void @llvm.assume(i1 %196) #7
  %197 = getelementptr inbounds i8, i8* %193, i64 %191
  %198 = ptrtoint i8* %197 to i64
  %199 = and i64 %198, 63
  %200 = icmp eq i64 %199, 0
  tail call void @llvm.assume(i1 %200) #7
  %201 = bitcast i8* %197 to float*
  %202 = load i64, i64* %142, align 8
  %203 = getelementptr inbounds float, float* %201, i64 %139
  %204 = getelementptr inbounds float, float* %203, i64 %143
  %205 = getelementptr inbounds float, float* %204, i64 %202
  store float* %205, float** %86, align 8
  %206 = load i8*, i8** %87, align 8
  %207 = ptrtoint i8* %206 to i64
  %208 = and i64 %207, 63
  %209 = icmp eq i64 %208, 0
  tail call void @llvm.assume(i1 %209) #7
  %210 = getelementptr inbounds i8, i8* %206, i64 %171
  %211 = ptrtoint i8* %210 to i64
  %212 = and i64 %211, 63
  %213 = icmp eq i64 %212, 0
  tail call void @llvm.assume(i1 %213) #7
  %214 = bitcast i8* %210 to float*
  %215 = getelementptr inbounds float, float* %214, i64 %139
  %216 = getelementptr inbounds float, float* %215, i64 %181
  %217 = getelementptr inbounds float, float* %216, i64 %184
  store float* %217, float** %89, align 8
  %218 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %145, align 8
  %219 = load i64, i64* %141, align 8
  %220 = add i64 %219, %125
  %221 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %218, i64 0, i32 10, i32 0, i64 0, i32 0, i32 4
  %222 = load i64, i64* %221, align 8
  %223 = mul i64 %222, %220
  %224 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %218, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %225 = load i8*, i8** %224, align 8
  %226 = ptrtoint i8* %225 to i64
  %227 = and i64 %226, 63
  %228 = icmp eq i64 %227, 0
  tail call void @llvm.assume(i1 %228) #7
  %229 = getelementptr inbounds i8, i8* %225, i64 %223
  %230 = ptrtoint i8* %229 to i64
  %231 = and i64 %230, 63
  %232 = icmp eq i64 %231, 0
  tail call void @llvm.assume(i1 %232) #7
  %233 = bitcast i8* %229 to float*
  %234 = load i64, i64* %142, align 8
  %235 = getelementptr inbounds float, float* %233, i64 %139
  %236 = getelementptr inbounds float, float* %235, i64 %143
  %237 = getelementptr inbounds float, float* %236, i64 %234
  store float* %237, float** %91, align 8
  %238 = load i8*, i8** %92, align 8
  %239 = ptrtoint i8* %238 to i64
  %240 = and i64 %239, 63
  %241 = icmp eq i64 %240, 0
  tail call void @llvm.assume(i1 %241) #7
  %242 = getelementptr inbounds i8, i8* %238, i64 %171
  %243 = ptrtoint i8* %242 to i64
  %244 = and i64 %243, 63
  %245 = icmp eq i64 %244, 0
  tail call void @llvm.assume(i1 %245) #7
  %246 = bitcast i8* %242 to float*
  %247 = getelementptr inbounds float, float* %246, i64 %139
  %248 = getelementptr inbounds float, float* %247, i64 %181
  %249 = load i64, i64* %77, align 8
  %250 = sub i64 0, %249
  %251 = getelementptr inbounds float, float* %248, i64 %250
  store float* %251, float** %94, align 8
  %252 = select i1 %140, i64 %130, i64 %135
  %253 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %23, align 8
  br i1 %81, label %256, label %254

254:                                              ; preds = %137
  %255 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %253, i64 0, i32 17, i64 %127, i32 1
  br label %268

256:                                              ; preds = %268, %137
  %257 = sub i64 %252, %139
  %258 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %120, i64 %119, i32 2, i32 0, i32 0
  %259 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %258, align 8
  %260 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %259, i64 1
  %261 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %253, i64 0, i32 0
  %262 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %261, align 8
  %263 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %262, i64 0, i32 0, i32 17
  %264 = tail call i32 @_ZN3jxl15PerformBlendingEPKPKfS3_PKPfmRKNS_13PatchBlendingEPS8_RKNSt3__16vectorINS_16ExtraChannelInfoENSB_9allocatorISD_EEEE(float** nonnull %54, float** nonnull %37, float** nonnull %54, i64 %257, %"struct.jxl::PatchBlending"* dereferenceable(12) %259, %"struct.jxl::PatchBlending"* %260, %"class.std::__1::vector.18"* dereferenceable(24) %263) #7
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %266, label %316

266:                                              ; preds = %256
  %267 = load i64*, i64** %74, align 8
  br label %298

268:                                              ; preds = %268, %254
  %269 = phi i64 [ 0, %254 ], [ %296, %268 ]
  %270 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %255, align 8
  %271 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %270, i64 0, i32 12, i32 0, i32 0
  %272 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %271, align 8
  %273 = load i64, i64* %141, align 8
  %274 = add i64 %273, %125
  %275 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %272, i64 %269, i32 0, i32 5, i32 0, i32 0, i32 0
  %276 = load i8*, i8** %275, align 8
  %277 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %272, i64 %269, i32 0, i32 4
  %278 = load i64, i64* %277, align 8
  %279 = mul i64 %278, %274
  %280 = getelementptr inbounds i8, i8* %276, i64 %279
  %281 = ptrtoint i8* %280 to i64
  %282 = and i64 %281, 63
  %283 = icmp eq i64 %282, 0
  tail call void @llvm.assume(i1 %283) #7
  %284 = bitcast i8* %280 to float*
  %285 = load i64, i64* %142, align 8
  %286 = getelementptr inbounds float, float* %284, i64 %139
  %287 = getelementptr inbounds float, float* %286, i64 %143
  %288 = getelementptr inbounds float, float* %287, i64 %285
  %289 = add nuw nsw i64 %269, 3
  %290 = getelementptr inbounds float*, float** %37, i64 %289
  store float* %288, float** %290, align 8
  %291 = getelementptr inbounds float*, float** %3, i64 %269
  %292 = load float*, float** %291, align 8
  %293 = getelementptr inbounds float, float* %292, i64 %139
  %294 = getelementptr inbounds float, float* %293, i64 %250
  %295 = getelementptr inbounds float*, float** %54, i64 %289
  store float* %294, float** %295, align 8
  %296 = add nuw nsw i64 %269, 1
  %297 = icmp eq i64 %296, %29
  br i1 %297, label %256, label %268

298:                                              ; preds = %266, %114, %132
  %299 = phi i64* [ %115, %114 ], [ %267, %266 ], [ %115, %132 ]
  %300 = add nuw i64 %116, 1
  %301 = getelementptr inbounds i64, i64* %299, i64 %102
  %302 = load i64, i64* %301, align 8
  %303 = icmp ult i64 %300, %302
  br i1 %303, label %114, label %304

304:                                              ; preds = %298
  %305 = ptrtoint i64* %299 to i64
  %306 = load i64, i64* %65, align 8
  %307 = load i64, i64* %16, align 8
  br label %308

308:                                              ; preds = %304, %107, %95
  %309 = phi i64 [ %96, %95 ], [ %96, %107 ], [ %307, %304 ]
  %310 = phi i64 [ %97, %95 ], [ %97, %107 ], [ %306, %304 ]
  %311 = phi i64* [ %98, %95 ], [ %98, %107 ], [ %299, %304 ]
  %312 = phi i64* [ %99, %95 ], [ %99, %107 ], [ %299, %304 ]
  %313 = phi i64 [ %100, %95 ], [ %113, %107 ], [ %305, %304 ]
  %314 = add i64 %309, %310
  %315 = icmp ult i64 %102, %314
  br i1 %315, label %95, label %316

316:                                              ; preds = %308, %256, %22
  %317 = phi i32 [ 0, %22 ], [ %264, %256 ], [ 0, %308 ]
  %318 = load float**, float*** %50, align 8
  %319 = icmp eq float** %318, null
  br i1 %319, label %323, label %320

320:                                              ; preds = %316
  %321 = ptrtoint float** %318 to i64
  store i64 %321, i64* %57, align 8
  %322 = bitcast float** %318 to i8*
  tail call void @_ZdlPv(i8* %322) #11
  br label %323

323:                                              ; preds = %316, %320
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %49) #7
  %324 = load float**, float*** %31, align 8
  %325 = icmp eq float** %324, null
  br i1 %325, label %329, label %326

326:                                              ; preds = %323
  %327 = ptrtoint float** %324 to i64
  store i64 %327, i64* %40, align 8
  %328 = bitcast float** %324 to i8*
  tail call void @_ZdlPv(i8* %328) #11
  br label %329

329:                                              ; preds = %323, %326
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #7
  ret i32 %317
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

declare i32 @_ZN3jxl15PerformBlendingEPKPKfS3_PKPfmRKNS_13PatchBlendingEPS8_RKNSt3__16vectorINS_16ExtraChannelInfoENSB_9allocatorISD_EEEE(float**, float**, float**, i64, %"struct.jxl::PatchBlending"* dereferenceable(12), %"struct.jxl::PatchBlending"*, %"class.std::__1::vector.18"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

declare i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64, i64) local_unnamed_addr #2

declare i64 @_ZN3jxl12CacheAligned10NextOffsetEv() local_unnamed_addr #2

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"*, i64, %"class.jxl::BitReader"* noalias) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 13
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %7 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %9 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 4
  %12 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 0
  %13 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 6
  %14 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 7
  %15 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 8
  %16 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 17
  %17 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 1
  %18 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 2
  %19 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 3
  %20 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 0
  %21 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 16
  %22 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 15
  %23 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 5
  %24 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 20
  %25 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 12
  %26 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 14
  %27 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 11
  %28 = bitcast i32** %27 to i8**
  %29 = load i32, i32* %4, align 4
  br label %30

30:                                               ; preds = %333, %3
  %31 = phi i32 [ %334, %333 ], [ %29, %3 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %48, label %33, !prof !46

33:                                               ; preds = %30
  %34 = load i32*, i32** %27, align 8
  %35 = load i32, i32* %26, align 8
  %36 = add i32 %35, 1
  store i32 %36, i32* %26, align 8
  %37 = and i32 %35, 1048575
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i32, i32* %34, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = add i32 %31, -1
  store i32 %42, i32* %4, align 4
  %43 = load i32, i32* %25, align 8
  %44 = add i32 %43, 1
  store i32 %44, i32* %25, align 8
  %45 = and i32 %43, 1048575
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i32, i32* %34, i64 %46
  store i32 %40, i32* %47, align 4
  br label %395

48:                                               ; preds = %30
  %49 = load i8*, i8** %5, align 8
  %50 = load i8*, i8** %6, align 8
  %51 = icmp ugt i8* %49, %50
  br i1 %51, label %52, label %53, !prof !45

52:                                               ; preds = %48
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #7
  br label %64

53:                                               ; preds = %48
  %54 = bitcast i8* %49 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = load i64, i64* %7, align 8
  %57 = shl i64 %55, %56
  %58 = load i64, i64* %8, align 8
  %59 = or i64 %58, %57
  store i64 %59, i64* %8, align 8
  %60 = sub i64 63, %56
  %61 = lshr i64 %60, 3
  %62 = getelementptr inbounds i8, i8* %49, i64 %61
  store i8* %62, i8** %5, align 8
  %63 = or i64 %56, 56
  store i64 %63, i64* %7, align 8
  br label %64

64:                                               ; preds = %52, %53
  %65 = load i8, i8* %9, align 8, !range !8, !noalias !47
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %72, label %67, !prof !46

67:                                               ; preds = %64
  %68 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %10, align 8, !noalias !50
  %69 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %68, i64 %1
  %70 = tail call zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"* %69, %"class.jxl::BitReader"* %2) #7
  %71 = zext i16 %70 to i64
  br label %123

72:                                               ; preds = %64
  %73 = load i32, i32* %11, align 4, !noalias !53
  %74 = and i32 %73, 4095
  %75 = load %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::AliasTable::Entry"** %12, align 8, !noalias !53
  %76 = load i32, i32* %13, align 8, !noalias !53
  %77 = zext i32 %76 to i64
  %78 = shl i64 %1, %77
  %79 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %75, i64 %78
  %80 = zext i32 %74 to i64
  %81 = load i32, i32* %14, align 4, !noalias !53
  %82 = zext i32 %81 to i64
  %83 = load i32, i32* %15, align 8, !noalias !53
  %84 = lshr i64 %80, %82
  %85 = and i32 %83, %74
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %79, i64 %84
  %88 = bitcast %"struct.jxl::AliasTable::Entry"* %87 to i64*
  %89 = load i64, i64* %88, align 1, !alias.scope !56, !noalias !59
  %90 = and i64 %89, 255
  %91 = lshr i64 %89, 8
  %92 = and i64 %91, 255
  %93 = lshr i64 %89, 16
  %94 = and i64 %93, 65535
  %95 = icmp ule i64 %90, %86
  %96 = select i1 %95, i64 %89, i64 0
  %97 = lshr i64 %96, 32
  %98 = and i64 %97, 65535
  %99 = lshr i64 %96, 48
  %100 = select i1 %95, i64 %92, i64 %84
  %101 = add nuw nsw i64 %98, %86
  %102 = xor i64 %99, %94
  %103 = lshr i32 %73, 12
  %104 = zext i32 %103 to i64
  %105 = mul nuw nsw i64 %102, %104
  %106 = add nuw nsw i64 %101, %105
  %107 = trunc i64 %106 to i32
  %108 = load i64, i64* %8, align 8, !alias.scope !53
  %109 = icmp ult i32 %107, 65536
  %110 = shl i32 %107, 16
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 65535
  %113 = or i32 %110, %112
  %114 = select i1 %109, i32 %113, i32 %107
  store i32 %114, i32* %11, align 4, !noalias !53
  %115 = select i1 %109, i64 16, i64 0
  %116 = load i64, i64* %7, align 8, !alias.scope !53
  %117 = sub i64 %116, %115
  store i64 %117, i64* %7, align 8, !alias.scope !53
  %118 = lshr i64 %108, %115
  store i64 %118, i64* %8, align 8, !alias.scope !53
  %119 = and i32 %114, 4095
  %120 = zext i32 %119 to i64
  %121 = lshr i64 %120, %82
  %122 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %79, i64 %121, i32 0
  tail call void @llvm.prefetch(i8* %122, i32 0, i32 3, i32 1) #7, !noalias !61
  br label %123

123:                                              ; preds = %67, %72
  %124 = phi i64 [ %71, %67 ], [ %100, %72 ]
  %125 = load i32, i32* %16, align 4
  %126 = zext i32 %125 to i64
  %127 = icmp ult i64 %124, %126
  br i1 %127, label %337, label %128, !prof !46

128:                                              ; preds = %123
  %129 = sub nsw i64 %124, %126
  %130 = load i32, i32* %17, align 4
  %131 = zext i32 %130 to i64
  %132 = load i32, i32* %18, align 4
  %133 = load i32, i32* %19, align 4
  %134 = zext i32 %133 to i64
  %135 = icmp ult i64 %129, %131
  br i1 %135, label %136, label %138

136:                                              ; preds = %128
  %137 = trunc i64 %129 to i32
  br label %171

138:                                              ; preds = %128
  %139 = load i32, i32* %20, align 4
  %140 = zext i32 %139 to i64
  %141 = zext i32 %132 to i64
  %142 = add nuw nsw i64 %134, %141
  %143 = sub nsw i64 %129, %131
  %144 = lshr i64 %143, %142
  %145 = sub i64 %144, %142
  %146 = add i64 %145, %140
  %147 = and i64 %146, 31
  %148 = shl nsw i32 -1, %133
  %149 = xor i32 %148, -1
  %150 = trunc i64 %129 to i32
  %151 = and i32 %149, %150
  %152 = lshr i64 %129, %134
  %153 = shl nsw i64 -1, %147
  %154 = xor i64 %153, -1
  %155 = load i64, i64* %8, align 8
  %156 = and i64 %155, %154
  %157 = load i64, i64* %7, align 8
  %158 = sub i64 %157, %147
  store i64 %158, i64* %7, align 8
  %159 = lshr i64 %155, %147
  store i64 %159, i64* %8, align 8
  %160 = shl i32 1, %132
  %161 = sext i32 %160 to i64
  %162 = add nsw i32 %160, -1
  %163 = sext i32 %162 to i64
  %164 = and i64 %152, %163
  %165 = or i64 %164, %161
  %166 = shl i64 %165, %147
  %167 = or i64 %156, %166
  %168 = shl i64 %167, %134
  %169 = trunc i64 %168 to i32
  %170 = or i32 %151, %169
  br label %171

171:                                              ; preds = %136, %138
  %172 = phi i32 [ %137, %136 ], [ %170, %138 ]
  %173 = load i32, i32* %21, align 8
  %174 = add i32 %173, %172
  store i32 %174, i32* %4, align 4
  %175 = load i8*, i8** %5, align 8
  %176 = load i8*, i8** %6, align 8
  %177 = icmp ugt i8* %175, %176
  br i1 %177, label %178, label %179, !prof !45

178:                                              ; preds = %171
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #7
  br label %190

179:                                              ; preds = %171
  %180 = bitcast i8* %175 to i64*
  %181 = load i64, i64* %180, align 1
  %182 = load i64, i64* %7, align 8
  %183 = shl i64 %181, %182
  %184 = load i64, i64* %8, align 8
  %185 = or i64 %184, %183
  store i64 %185, i64* %8, align 8
  %186 = sub i64 63, %182
  %187 = lshr i64 %186, 3
  %188 = getelementptr inbounds i8, i8* %175, i64 %187
  store i8* %188, i8** %5, align 8
  %189 = or i64 %182, 56
  store i64 %189, i64* %7, align 8
  br label %190

190:                                              ; preds = %178, %179
  %191 = load i32, i32* %22, align 4
  %192 = zext i32 %191 to i64
  %193 = load i8, i8* %9, align 8, !range !8, !noalias !62
  %194 = icmp eq i8 %193, 0
  br i1 %194, label %202, label %195, !prof !46

195:                                              ; preds = %190
  %196 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %10, align 8, !noalias !65
  %197 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %196, i64 %192
  %198 = tail call zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"* %197, %"class.jxl::BitReader"* %2) #7
  %199 = zext i16 %198 to i64
  %200 = load i32, i32* %22, align 4
  %201 = zext i32 %200 to i64
  br label %253

202:                                              ; preds = %190
  %203 = load i32, i32* %11, align 4, !noalias !68
  %204 = and i32 %203, 4095
  %205 = load %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::AliasTable::Entry"** %12, align 8, !noalias !68
  %206 = load i32, i32* %13, align 8, !noalias !68
  %207 = zext i32 %206 to i64
  %208 = shl i64 %192, %207
  %209 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %205, i64 %208
  %210 = zext i32 %204 to i64
  %211 = load i32, i32* %14, align 4, !noalias !68
  %212 = zext i32 %211 to i64
  %213 = load i32, i32* %15, align 8, !noalias !68
  %214 = lshr i64 %210, %212
  %215 = and i32 %213, %204
  %216 = zext i32 %215 to i64
  %217 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %209, i64 %214
  %218 = bitcast %"struct.jxl::AliasTable::Entry"* %217 to i64*
  %219 = load i64, i64* %218, align 1, !alias.scope !71, !noalias !74
  %220 = and i64 %219, 255
  %221 = lshr i64 %219, 8
  %222 = and i64 %221, 255
  %223 = lshr i64 %219, 16
  %224 = and i64 %223, 65535
  %225 = icmp ule i64 %220, %216
  %226 = select i1 %225, i64 %219, i64 0
  %227 = lshr i64 %226, 32
  %228 = and i64 %227, 65535
  %229 = lshr i64 %226, 48
  %230 = select i1 %225, i64 %222, i64 %214
  %231 = add nuw nsw i64 %228, %216
  %232 = xor i64 %229, %224
  %233 = lshr i32 %203, 12
  %234 = zext i32 %233 to i64
  %235 = mul nuw nsw i64 %232, %234
  %236 = add nuw nsw i64 %231, %235
  %237 = trunc i64 %236 to i32
  %238 = load i64, i64* %8, align 8, !alias.scope !68
  %239 = icmp ult i32 %237, 65536
  %240 = shl i32 %237, 16
  %241 = trunc i64 %238 to i32
  %242 = and i32 %241, 65535
  %243 = or i32 %240, %242
  %244 = select i1 %239, i32 %243, i32 %237
  store i32 %244, i32* %11, align 4, !noalias !68
  %245 = select i1 %239, i64 16, i64 0
  %246 = load i64, i64* %7, align 8, !alias.scope !68
  %247 = sub i64 %246, %245
  store i64 %247, i64* %7, align 8, !alias.scope !68
  %248 = lshr i64 %238, %245
  store i64 %248, i64* %8, align 8, !alias.scope !68
  %249 = and i32 %244, 4095
  %250 = zext i32 %249 to i64
  %251 = lshr i64 %250, %212
  %252 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %209, i64 %251, i32 0
  tail call void @llvm.prefetch(i8* %252, i32 0, i32 3, i32 1) #7, !noalias !76
  br label %253

253:                                              ; preds = %195, %202
  %254 = phi i64 [ %201, %195 ], [ %192, %202 ]
  %255 = phi i64 [ %199, %195 ], [ %230, %202 ]
  %256 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %23, align 8
  %257 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 1
  %258 = load i32, i32* %257, align 4
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 2
  %261 = load i32, i32* %260, align 4
  %262 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 3
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i64
  %265 = icmp ult i64 %255, %259
  br i1 %265, label %266, label %268

266:                                              ; preds = %253
  %267 = trunc i64 %255 to i32
  br label %302

268:                                              ; preds = %253
  %269 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 0
  %270 = load i32, i32* %269, align 4
  %271 = zext i32 %270 to i64
  %272 = zext i32 %261 to i64
  %273 = add nuw nsw i64 %264, %272
  %274 = sub nsw i64 %255, %259
  %275 = lshr i64 %274, %273
  %276 = sub i64 %275, %273
  %277 = add i64 %276, %271
  %278 = and i64 %277, 31
  %279 = shl nsw i32 -1, %263
  %280 = xor i32 %279, -1
  %281 = trunc i64 %255 to i32
  %282 = and i32 %280, %281
  %283 = lshr i64 %255, %264
  %284 = shl nsw i64 -1, %278
  %285 = xor i64 %284, -1
  %286 = load i64, i64* %8, align 8
  %287 = and i64 %286, %285
  %288 = load i64, i64* %7, align 8
  %289 = sub i64 %288, %278
  store i64 %289, i64* %7, align 8
  %290 = lshr i64 %286, %278
  store i64 %290, i64* %8, align 8
  %291 = shl i32 1, %261
  %292 = sext i32 %291 to i64
  %293 = add nsw i32 %291, -1
  %294 = sext i32 %293 to i64
  %295 = and i64 %283, %294
  %296 = or i64 %295, %292
  %297 = shl i64 %296, %278
  %298 = or i64 %287, %297
  %299 = shl i64 %298, %264
  %300 = trunc i64 %299 to i32
  %301 = or i32 %282, %300
  br label %302

302:                                              ; preds = %266, %268
  %303 = phi i32 [ %267, %266 ], [ %301, %268 ]
  %304 = zext i32 %303 to i64
  %305 = load i32, i32* %24, align 8
  %306 = icmp ult i32 %303, %305
  br i1 %306, label %307, label %311, !prof !46

307:                                              ; preds = %302
  %308 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 19, i64 %304
  %309 = load i32, i32* %308, align 4
  %310 = zext i32 %309 to i64
  br label %315

311:                                              ; preds = %302
  %312 = zext i32 %305 to i64
  %313 = add nuw nsw i64 %304, 1
  %314 = sub nsw i64 %313, %312
  br label %315

315:                                              ; preds = %311, %307
  %316 = phi i64 [ %310, %307 ], [ %314, %311 ]
  %317 = load i32, i32* %25, align 8
  %318 = zext i32 %317 to i64
  %319 = icmp ugt i64 %316, %318
  %320 = select i1 %319, i64 %318, i64 %316, !prof !45
  %321 = icmp ult i64 %320, 1048576
  %322 = select i1 %321, i64 %320, i64 1048576, !prof !46
  %323 = trunc i64 %322 to i32
  %324 = sub i32 %317, %323
  store i32 %324, i32* %26, align 8
  %325 = icmp eq i64 %322, 0
  br i1 %325, label %326, label %333, !prof !45

326:                                              ; preds = %315
  %327 = load i32, i32* %4, align 4
  %328 = zext i32 %327 to i64
  %329 = icmp ult i64 %328, 1048576
  %330 = select i1 %329, i64 %328, i64 1048576
  %331 = load i8*, i8** %28, align 8
  %332 = shl nuw nsw i64 %330, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %331, i8 0, i64 %332, i1 false)
  br label %333

333:                                              ; preds = %326, %315
  %334 = load i32, i32* %4, align 4
  %335 = load i32, i32* %21, align 8
  %336 = icmp ult i32 %334, %335
  br i1 %336, label %395, label %30

337:                                              ; preds = %123
  %338 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %23, align 8
  %339 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 1
  %340 = load i32, i32* %339, align 4
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 2
  %343 = load i32, i32* %342, align 4
  %344 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 3
  %345 = load i32, i32* %344, align 4
  %346 = zext i32 %345 to i64
  %347 = icmp ult i64 %124, %341
  br i1 %347, label %348, label %350

348:                                              ; preds = %337
  %349 = trunc i64 %124 to i32
  br label %384

350:                                              ; preds = %337
  %351 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 0
  %352 = load i32, i32* %351, align 4
  %353 = zext i32 %352 to i64
  %354 = zext i32 %343 to i64
  %355 = add nuw nsw i64 %346, %354
  %356 = sub nsw i64 %124, %341
  %357 = lshr i64 %356, %355
  %358 = sub i64 %357, %355
  %359 = add i64 %358, %353
  %360 = and i64 %359, 31
  %361 = shl nsw i32 -1, %345
  %362 = xor i32 %361, -1
  %363 = trunc i64 %124 to i32
  %364 = and i32 %362, %363
  %365 = lshr i64 %124, %346
  %366 = shl nsw i64 -1, %360
  %367 = xor i64 %366, -1
  %368 = load i64, i64* %8, align 8
  %369 = and i64 %368, %367
  %370 = load i64, i64* %7, align 8
  %371 = sub i64 %370, %360
  store i64 %371, i64* %7, align 8
  %372 = lshr i64 %368, %360
  store i64 %372, i64* %8, align 8
  %373 = shl i32 1, %343
  %374 = sext i32 %373 to i64
  %375 = add nsw i32 %373, -1
  %376 = sext i32 %375 to i64
  %377 = and i64 %365, %376
  %378 = or i64 %377, %374
  %379 = shl i64 %378, %360
  %380 = or i64 %369, %379
  %381 = shl i64 %380, %346
  %382 = trunc i64 %381 to i32
  %383 = or i32 %364, %382
  br label %384

384:                                              ; preds = %348, %350
  %385 = phi i32 [ %349, %348 ], [ %383, %350 ]
  %386 = zext i32 %385 to i64
  %387 = load i32*, i32** %27, align 8
  %388 = icmp eq i32* %387, null
  br i1 %388, label %395, label %389

389:                                              ; preds = %384
  %390 = load i32, i32* %25, align 8
  %391 = add i32 %390, 1
  store i32 %391, i32* %25, align 8
  %392 = and i32 %390, 1048575
  %393 = zext i32 %392 to i64
  %394 = getelementptr inbounds i32, i32* %387, i64 %393
  store i32 %385, i32* %394, align 4
  br label %395

395:                                              ; preds = %333, %384, %389, %33
  %396 = phi i64 [ %41, %33 ], [ %386, %384 ], [ %386, %389 ], [ 0, %333 ]
  ret i64 %396
}

declare zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"*, %"class.jxl::BitReader"*) local_unnamed_addr #2

; Function Attrs: inaccessiblemem_or_argmemonly nounwind
declare void @llvm.prefetch(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @llvm.assume(i1) #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13PatchPositionENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(%"class.std::__1::vector"*, %"struct.jxl::PatchPosition"* dereferenceable(80)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.jxl::PatchPosition"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 80
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 230584300921369395
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #12
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.jxl::PatchPosition"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 80
  %20 = icmp ult i64 %19, 115292150460684697
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 230584300921369395, %14 ]
  %28 = mul i64 %27, 80
  %29 = tail call i8* @_Znwm(i64 %28) #11
  %30 = bitcast i8* %29 to %"struct.jxl::PatchPosition"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"struct.jxl::PatchPosition"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %33, i64 %9
  %35 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %33, i64 %32
  %36 = ptrtoint %"struct.jxl::PatchPosition"* %35 to i64
  %37 = bitcast %"struct.jxl::PatchPosition"* %34 to i8*
  %38 = bitcast %"struct.jxl::PatchPosition"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 16, i1 false) #7
  %39 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %33, i64 %9, i32 2
  %40 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %1, i64 0, i32 2
  %41 = bitcast %"class.std::__1::vector.0"* %39 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 24, i1 false) #7
  %42 = bitcast %"class.std::__1::vector.0"* %40 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %"class.std::__1::vector.0"* %39 to i64*
  store i64 %43, i64* %44, align 8
  %45 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %1, i64 0, i32 2, i32 0, i32 1
  %46 = bitcast %"struct.jxl::PatchBlending"** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %33, i64 %9, i32 2, i32 0, i32 1
  %49 = bitcast %"struct.jxl::PatchBlending"** %48 to i64*
  store i64 %47, i64* %49, align 8
  %50 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %1, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %51 = bitcast %"struct.jxl::PatchBlending"** %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %33, i64 %9, i32 2, i32 0, i32 2, i32 0, i32 0
  %54 = bitcast %"struct.jxl::PatchBlending"** %53 to i64*
  store i64 %52, i64* %54, align 8
  %55 = bitcast %"class.std::__1::vector.0"* %40 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #7
  %56 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %33, i64 %9, i32 3
  %57 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %1, i64 0, i32 3
  %58 = bitcast %"struct.jxl::PatchReferencePosition"* %56 to i8*
  %59 = bitcast %"struct.jxl::PatchReferencePosition"* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 40, i1 false) #7
  %60 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %34, i64 1
  %61 = ptrtoint %"struct.jxl::PatchPosition"* %60 to i64
  %62 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %63 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %62, align 8
  %64 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %3, align 8
  %65 = icmp eq %"struct.jxl::PatchPosition"* %64, %63
  br i1 %65, label %66, label %68

66:                                               ; preds = %31
  %67 = ptrtoint %"struct.jxl::PatchPosition"* %63 to i64
  br label %100

68:                                               ; preds = %31, %68
  %69 = phi %"struct.jxl::PatchPosition"* [ %71, %68 ], [ %34, %31 ]
  %70 = phi %"struct.jxl::PatchPosition"* [ %72, %68 ], [ %64, %31 ]
  %71 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %69, i64 -1
  %72 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %70, i64 -1
  %73 = bitcast %"struct.jxl::PatchPosition"* %71 to i8*
  %74 = bitcast %"struct.jxl::PatchPosition"* %72 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %73, i8* align 8 %74, i64 16, i1 false) #7
  %75 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %69, i64 -1, i32 2
  %76 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %70, i64 -1, i32 2
  %77 = bitcast %"class.std::__1::vector.0"* %75 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %77, i8 0, i64 24, i1 false) #7
  %78 = bitcast %"class.std::__1::vector.0"* %76 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %"class.std::__1::vector.0"* %75 to i64*
  store i64 %79, i64* %80, align 8
  %81 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %70, i64 -1, i32 2, i32 0, i32 1
  %82 = bitcast %"struct.jxl::PatchBlending"** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %69, i64 -1, i32 2, i32 0, i32 1
  %85 = bitcast %"struct.jxl::PatchBlending"** %84 to i64*
  store i64 %83, i64* %85, align 8
  %86 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %70, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %87 = bitcast %"struct.jxl::PatchBlending"** %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %69, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %90 = bitcast %"struct.jxl::PatchBlending"** %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = bitcast %"class.std::__1::vector.0"* %76 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %91, i8 0, i64 24, i1 false) #7
  %92 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %69, i64 -1, i32 3
  %93 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %70, i64 -1, i32 3
  %94 = bitcast %"struct.jxl::PatchReferencePosition"* %92 to i8*
  %95 = bitcast %"struct.jxl::PatchReferencePosition"* %93 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 40, i1 false) #7
  %96 = icmp eq %"struct.jxl::PatchPosition"* %72, %63
  br i1 %96, label %97, label %68

97:                                               ; preds = %68
  %98 = load i64, i64* %6, align 8
  %99 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %3, align 8
  br label %100

100:                                              ; preds = %66, %97
  %101 = phi %"struct.jxl::PatchPosition"* [ %63, %66 ], [ %99, %97 ]
  %102 = phi %"struct.jxl::PatchPosition"* [ %34, %66 ], [ %71, %97 ]
  %103 = phi i64 [ %67, %66 ], [ %98, %97 ]
  %104 = ptrtoint %"struct.jxl::PatchPosition"* %102 to i64
  store i64 %104, i64* %6, align 8
  store i64 %61, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %105 = inttoptr i64 %103 to %"struct.jxl::PatchPosition"*
  %106 = icmp eq %"struct.jxl::PatchPosition"* %101, %105
  br i1 %106, label %120, label %107

107:                                              ; preds = %100, %118
  %108 = phi %"struct.jxl::PatchPosition"* [ %109, %118 ], [ %101, %100 ]
  %109 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %108, i64 -1
  %110 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %108, i64 -1, i32 2, i32 0, i32 0
  %111 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %110, align 8
  %112 = icmp eq %"struct.jxl::PatchBlending"* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"struct.jxl::PatchBlending"* %111 to i64
  %115 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %108, i64 -1, i32 2, i32 0, i32 1
  %116 = bitcast %"struct.jxl::PatchBlending"** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %111, i64 0, i32 0
  tail call void @_ZdlPv(i8* %117) #11
  br label %118

118:                                              ; preds = %113, %107
  %119 = icmp eq %"struct.jxl::PatchPosition"* %109, %105
  br i1 %119, label %120, label %107

120:                                              ; preds = %118, %100
  %121 = icmp eq i64 %103, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %123) #11
  br label %124

124:                                              ; preds = %120, %122
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRNS_6__lessINS_4pairImmEES3_EEPS3_EEvT0_S7_T_(%"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"*, %"struct.std::__1::__less.228"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  br label %4

4:                                                ; preds = %362, %3
  %5 = phi %"struct.std::__1::pair.200"* [ %1, %3 ], [ %332, %362 ]
  %6 = phi %"struct.std::__1::pair.200"* [ %0, %3 ], [ %17, %362 ]
  %7 = ptrtoint %"struct.std::__1::pair.200"* %5 to i64
  %8 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %5, i64 -1
  %9 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %5, i64 -2
  %10 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %8, i64 0, i32 0
  %11 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %5, i64 -1, i32 1
  %12 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %5, i64 -1, i32 1
  %13 = ptrtoint %"struct.std::__1::pair.200"* %5 to i64
  br label %14

14:                                               ; preds = %371, %4
  %15 = phi %"struct.std::__1::pair.200"* [ %6, %4 ], [ %372, %371 ]
  br label %16

16:                                               ; preds = %228, %14
  %17 = phi %"struct.std::__1::pair.200"* [ %15, %14 ], [ %198, %228 ]
  %18 = ptrtoint %"struct.std::__1::pair.200"* %17 to i64
  %19 = sub i64 %7, %18
  %20 = ashr exact i64 %19, 4
  switch i64 %20, label %55 [
    i64 0, label %375
    i64 1, label %375
    i64 2, label %21
    i64 3, label %40
    i64 4, label %44
    i64 5, label %49
  ]

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %5, i64 -1, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = icmp ult i64 %23, %25
  br i1 %26, label %35, label %27

27:                                               ; preds = %21
  %28 = icmp ult i64 %25, %23
  br i1 %28, label %375, label %29

29:                                               ; preds = %27
  %30 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %5, i64 -1, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %31, %33
  br i1 %34, label %35, label %375

35:                                               ; preds = %21, %29
  store i64 %23, i64* %24, align 8
  store i64 %25, i64* %22, align 8
  %36 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 0, i32 1
  %37 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %5, i64 -1, i32 1
  %38 = load i64, i64* %36, align 8
  %39 = load i64, i64* %37, align 8
  store i64 %39, i64* %36, align 8
  store i64 %38, i64* %37, align 8
  br label %375

40:                                               ; preds = %16
  %41 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 1
  %42 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %5, i64 -1
  %43 = tail call i32 @_ZNSt3__17__sort3IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_T_(%"struct.std::__1::pair.200"* %17, %"struct.std::__1::pair.200"* %41, %"struct.std::__1::pair.200"* %42, %"struct.std::__1::__less.228"* dereferenceable(1) %2)
  br label %375

44:                                               ; preds = %16
  %45 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 1
  %46 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 2
  %47 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %5, i64 -1
  %48 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_S7_T_(%"struct.std::__1::pair.200"* %17, %"struct.std::__1::pair.200"* %45, %"struct.std::__1::pair.200"* %46, %"struct.std::__1::pair.200"* %47, %"struct.std::__1::__less.228"* dereferenceable(1) %2)
  br label %375

49:                                               ; preds = %16
  %50 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 1
  %51 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 2
  %52 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 3
  %53 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %5, i64 -1
  %54 = tail call i32 @_ZNSt3__17__sort5IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_S7_S7_T_(%"struct.std::__1::pair.200"* %17, %"struct.std::__1::pair.200"* %50, %"struct.std::__1::pair.200"* %51, %"struct.std::__1::pair.200"* %52, %"struct.std::__1::pair.200"* %53, %"struct.std::__1::__less.228"* dereferenceable(1) %2)
  br label %375

55:                                               ; preds = %16
  %56 = icmp slt i64 %19, 112
  br i1 %56, label %57, label %115

57:                                               ; preds = %55
  %58 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 2
  %59 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 1
  %60 = tail call i32 @_ZNSt3__17__sort3IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_T_(%"struct.std::__1::pair.200"* %17, %"struct.std::__1::pair.200"* %59, %"struct.std::__1::pair.200"* %58, %"struct.std::__1::__less.228"* dereferenceable(1) %2) #7
  %61 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 3
  %62 = icmp eq %"struct.std::__1::pair.200"* %61, %5
  br i1 %62, label %375, label %63

63:                                               ; preds = %57, %112
  %64 = phi %"struct.std::__1::pair.200"* [ %113, %112 ], [ %61, %57 ]
  %65 = phi %"struct.std::__1::pair.200"* [ %64, %112 ], [ %58, %57 ]
  %66 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %64, i64 0, i32 0
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %65, i64 0, i32 0
  %69 = load i64, i64* %68, align 8
  %70 = icmp ult i64 %67, %69
  br i1 %70, label %71, label %74

71:                                               ; preds = %63
  %72 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %64, i64 0, i32 1
  %73 = load i64, i64* %72, align 8
  br label %82

74:                                               ; preds = %63
  %75 = icmp ult i64 %69, %67
  br i1 %75, label %112, label %76

76:                                               ; preds = %74
  %77 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %64, i64 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %65, i64 0, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = icmp ult i64 %78, %80
  br i1 %81, label %82, label %112

82:                                               ; preds = %76, %71
  %83 = phi i64 [ %73, %71 ], [ %78, %76 ]
  %84 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %64, i64 0, i32 1
  store i64 %69, i64* %66, align 8
  %85 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %65, i64 0, i32 1
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %84, align 8
  %87 = icmp eq %"struct.std::__1::pair.200"* %65, %17
  br i1 %87, label %109, label %88

88:                                               ; preds = %82, %104
  %89 = phi i64* [ %106, %104 ], [ %85, %82 ]
  %90 = phi i64* [ %91, %104 ], [ %68, %82 ]
  %91 = getelementptr inbounds i64, i64* %90, i64 -2
  %92 = bitcast i64* %91 to %"struct.std::__1::pair.200"*
  %93 = load i64, i64* %91, align 8
  %94 = icmp ult i64 %67, %93
  br i1 %94, label %95, label %98

95:                                               ; preds = %88
  %96 = getelementptr inbounds i64, i64* %90, i64 -1
  %97 = load i64, i64* %96, align 8
  br label %104

98:                                               ; preds = %88
  %99 = icmp ult i64 %93, %67
  br i1 %99, label %109, label %100

100:                                              ; preds = %98
  %101 = getelementptr inbounds i64, i64* %90, i64 -1
  %102 = load i64, i64* %101, align 8
  %103 = icmp ult i64 %83, %102
  br i1 %103, label %104, label %109

104:                                              ; preds = %100, %95
  %105 = phi i64 [ %97, %95 ], [ %102, %100 ]
  store i64 %93, i64* %90, align 8
  %106 = getelementptr inbounds i64, i64* %90, i64 -1
  %107 = getelementptr inbounds i64, i64* %90, i64 1
  store i64 %105, i64* %107, align 8
  %108 = icmp eq %"struct.std::__1::pair.200"* %17, %92
  br i1 %108, label %109, label %88

109:                                              ; preds = %104, %100, %98, %82
  %110 = phi i64* [ %68, %82 ], [ %91, %104 ], [ %90, %100 ], [ %90, %98 ]
  %111 = phi i64* [ %85, %82 ], [ %106, %104 ], [ %89, %100 ], [ %89, %98 ]
  store i64 %67, i64* %110, align 8
  store i64 %83, i64* %111, align 8
  br label %112

112:                                              ; preds = %109, %76, %74
  %113 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %64, i64 1
  %114 = icmp eq %"struct.std::__1::pair.200"* %113, %5
  br i1 %114, label %375, label %63

115:                                              ; preds = %55
  %116 = icmp sgt i64 %19, 15984
  %117 = sdiv i64 %20, 2
  %118 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 %117
  br i1 %116, label %119, label %124

119:                                              ; preds = %115
  %120 = sdiv i64 %20, 4
  %121 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 %120
  %122 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %118, i64 %120
  %123 = tail call i32 @_ZNSt3__17__sort5IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_S7_S7_T_(%"struct.std::__1::pair.200"* %17, %"struct.std::__1::pair.200"* %121, %"struct.std::__1::pair.200"* %118, %"struct.std::__1::pair.200"* %122, %"struct.std::__1::pair.200"* %8, %"struct.std::__1::__less.228"* dereferenceable(1) %2)
  br label %126

124:                                              ; preds = %115
  %125 = tail call i32 @_ZNSt3__17__sort3IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_T_(%"struct.std::__1::pair.200"* %17, %"struct.std::__1::pair.200"* %118, %"struct.std::__1::pair.200"* %8, %"struct.std::__1::__less.228"* dereferenceable(1) %2)
  br label %126

126:                                              ; preds = %124, %119
  %127 = phi i32 [ %123, %119 ], [ %125, %124 ]
  %128 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 0, i32 0
  %129 = load i64, i64* %128, align 8
  %130 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %118, i64 0, i32 0
  %131 = load i64, i64* %130, align 8
  %132 = icmp ult i64 %129, %131
  br i1 %132, label %260, label %133

133:                                              ; preds = %126
  %134 = icmp ult i64 %131, %129
  br i1 %134, label %141, label %135

135:                                              ; preds = %133
  %136 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 0, i32 1
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 %117, i32 1
  %139 = load i64, i64* %138, align 8
  %140 = icmp ult i64 %137, %139
  br i1 %140, label %260, label %141

141:                                              ; preds = %135, %133
  %142 = icmp eq %"struct.std::__1::pair.200"* %17, %9
  br i1 %142, label %145, label %143

143:                                              ; preds = %141
  %144 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 %117, i32 1
  br label %237

145:                                              ; preds = %250, %141
  %146 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 1
  %147 = load i64, i64* %10, align 8
  %148 = icmp ult i64 %129, %147
  br i1 %148, label %181, label %149

149:                                              ; preds = %145
  %150 = icmp ult i64 %147, %129
  br i1 %150, label %156, label %151

151:                                              ; preds = %149
  %152 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 0, i32 1
  %153 = load i64, i64* %152, align 8
  %154 = load i64, i64* %11, align 8
  %155 = icmp ult i64 %153, %154
  br i1 %155, label %181, label %156

156:                                              ; preds = %151, %149
  %157 = icmp eq %"struct.std::__1::pair.200"* %146, %8
  br i1 %157, label %375, label %158

158:                                              ; preds = %156
  %159 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 0, i32 1
  br label %160

160:                                              ; preds = %158, %178
  %161 = phi %"struct.std::__1::pair.200"* [ %146, %158 ], [ %179, %178 ]
  %162 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %161, i64 0, i32 0
  %163 = load i64, i64* %162, align 8
  %164 = icmp ult i64 %129, %163
  br i1 %164, label %172, label %165

165:                                              ; preds = %160
  %166 = icmp ult i64 %163, %129
  br i1 %166, label %178, label %167

167:                                              ; preds = %165
  %168 = load i64, i64* %159, align 8
  %169 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %161, i64 0, i32 1
  %170 = load i64, i64* %169, align 8
  %171 = icmp ult i64 %168, %170
  br i1 %171, label %172, label %178

172:                                              ; preds = %160, %167
  %173 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %161, i64 0, i32 0
  store i64 %147, i64* %173, align 8
  store i64 %163, i64* %10, align 8
  %174 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %161, i64 0, i32 1
  %175 = load i64, i64* %174, align 8
  %176 = load i64, i64* %12, align 8
  store i64 %176, i64* %174, align 8
  store i64 %175, i64* %12, align 8
  %177 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %161, i64 1
  br label %181

178:                                              ; preds = %165, %167
  %179 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %161, i64 1
  %180 = icmp eq %"struct.std::__1::pair.200"* %179, %8
  br i1 %180, label %375, label %160

181:                                              ; preds = %145, %151, %172
  %182 = phi %"struct.std::__1::pair.200"* [ %177, %172 ], [ %146, %151 ], [ %146, %145 ]
  %183 = icmp eq %"struct.std::__1::pair.200"* %182, %8
  br i1 %183, label %375, label %184

184:                                              ; preds = %181
  %185 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 0, i32 1
  br label %186

186:                                              ; preds = %184, %230
  %187 = phi %"struct.std::__1::pair.200"* [ %236, %230 ], [ %182, %184 ]
  %188 = phi %"struct.std::__1::pair.200"* [ %216, %230 ], [ %8, %184 ]
  %189 = load i64, i64* %128, align 8
  %190 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %187, i64 0, i32 0
  %191 = load i64, i64* %190, align 8
  %192 = icmp ult i64 %189, %191
  br i1 %192, label %197, label %201

193:                                              ; preds = %205, %210
  %194 = phi i64* [ %211, %210 ], [ %203, %205 ]
  %195 = phi i64 [ %212, %210 ], [ %202, %205 ]
  %196 = bitcast i64* %194 to %"struct.std::__1::pair.200"*
  br label %197

197:                                              ; preds = %193, %186
  %198 = phi %"struct.std::__1::pair.200"* [ %187, %186 ], [ %196, %193 ]
  %199 = phi i64* [ %190, %186 ], [ %194, %193 ]
  %200 = phi i64 [ %191, %186 ], [ %195, %193 ]
  br label %214

201:                                              ; preds = %186, %210
  %202 = phi i64 [ %212, %210 ], [ %191, %186 ]
  %203 = phi i64* [ %211, %210 ], [ %190, %186 ]
  %204 = icmp ult i64 %202, %189
  br i1 %204, label %210, label %205

205:                                              ; preds = %201
  %206 = load i64, i64* %185, align 8
  %207 = getelementptr inbounds i64, i64* %203, i64 1
  %208 = load i64, i64* %207, align 8
  %209 = icmp ult i64 %206, %208
  br i1 %209, label %193, label %210

210:                                              ; preds = %201, %205
  %211 = getelementptr inbounds i64, i64* %203, i64 2
  %212 = load i64, i64* %211, align 8
  %213 = icmp ult i64 %189, %212
  br i1 %213, label %193, label %201

214:                                              ; preds = %227, %197
  %215 = phi %"struct.std::__1::pair.200"* [ %188, %197 ], [ %216, %227 ]
  %216 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %215, i64 -1
  %217 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %216, i64 0, i32 0
  %218 = load i64, i64* %217, align 8
  %219 = icmp ult i64 %189, %218
  br i1 %219, label %227, label %220

220:                                              ; preds = %214
  %221 = icmp ult i64 %218, %189
  br i1 %221, label %228, label %222

222:                                              ; preds = %220
  %223 = load i64, i64* %185, align 8
  %224 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %215, i64 -1, i32 1
  %225 = load i64, i64* %224, align 8
  %226 = icmp ult i64 %223, %225
  br i1 %226, label %227, label %228

227:                                              ; preds = %222, %214
  br label %214

228:                                              ; preds = %220, %222
  %229 = icmp ult %"struct.std::__1::pair.200"* %198, %216
  br i1 %229, label %230, label %16

230:                                              ; preds = %228
  %231 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %216, i64 0, i32 0
  store i64 %218, i64* %199, align 8
  store i64 %200, i64* %231, align 8
  %232 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %198, i64 0, i32 1
  %233 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %215, i64 -1, i32 1
  %234 = load i64, i64* %232, align 8
  %235 = load i64, i64* %233, align 8
  store i64 %235, i64* %232, align 8
  store i64 %234, i64* %233, align 8
  %236 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %198, i64 1
  br label %186

237:                                              ; preds = %143, %250
  %238 = phi %"struct.std::__1::pair.200"* [ %9, %143 ], [ %251, %250 ]
  %239 = phi %"struct.std::__1::pair.200"* [ %8, %143 ], [ %238, %250 ]
  %240 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %238, i64 0, i32 0
  %241 = load i64, i64* %240, align 8
  %242 = icmp ult i64 %241, %131
  br i1 %242, label %253, label %243

243:                                              ; preds = %237
  %244 = icmp ult i64 %131, %241
  br i1 %244, label %250, label %245

245:                                              ; preds = %243
  %246 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %239, i64 -1, i32 1
  %247 = load i64, i64* %246, align 8
  %248 = load i64, i64* %144, align 8
  %249 = icmp ult i64 %247, %248
  br i1 %249, label %253, label %250

250:                                              ; preds = %245, %243
  %251 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %238, i64 -1
  %252 = icmp eq %"struct.std::__1::pair.200"* %17, %251
  br i1 %252, label %145, label %237

253:                                              ; preds = %237, %245
  %254 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %238, i64 0, i32 0
  store i64 %241, i64* %128, align 8
  store i64 %129, i64* %254, align 8
  %255 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 0, i32 1
  %256 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %239, i64 -1, i32 1
  %257 = load i64, i64* %255, align 8
  %258 = load i64, i64* %256, align 8
  store i64 %258, i64* %255, align 8
  store i64 %257, i64* %256, align 8
  %259 = add i32 %127, 1
  br label %260

260:                                              ; preds = %126, %135, %253
  %261 = phi i32 [ %259, %253 ], [ %127, %135 ], [ %127, %126 ]
  %262 = phi %"struct.std::__1::pair.200"* [ %238, %253 ], [ %8, %135 ], [ %8, %126 ]
  %263 = ptrtoint %"struct.std::__1::pair.200"* %17 to i64
  %264 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %17, i64 1
  %265 = icmp ult %"struct.std::__1::pair.200"* %264, %262
  br i1 %265, label %266, label %329

266:                                              ; preds = %260, %320
  %267 = phi %"struct.std::__1::pair.200"* [ %327, %320 ], [ %118, %260 ]
  %268 = phi i32 [ %325, %320 ], [ %261, %260 ]
  %269 = phi %"struct.std::__1::pair.200"* [ %328, %320 ], [ %264, %260 ]
  %270 = phi %"struct.std::__1::pair.200"* [ %316, %320 ], [ %262, %260 ]
  %271 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %267, i64 0, i32 0
  %272 = load i64, i64* %271, align 8
  %273 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %267, i64 0, i32 1
  br label %274

274:                                              ; preds = %292, %266
  %275 = phi %"struct.std::__1::pair.200"* [ %269, %266 ], [ %293, %292 ]
  %276 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %275, i64 0, i32 0
  %277 = load i64, i64* %276, align 8
  %278 = icmp ult i64 %277, %272
  br i1 %278, label %292, label %279

279:                                              ; preds = %274
  %280 = icmp ult i64 %272, %277
  br i1 %280, label %281, label %287

281:                                              ; preds = %287, %279
  %282 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %275, i64 0, i32 0
  %283 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %270, i64 -1
  %284 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %283, i64 0, i32 0
  %285 = load i64, i64* %284, align 8
  %286 = icmp ult i64 %285, %272
  br i1 %286, label %314, label %294

287:                                              ; preds = %279
  %288 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %275, i64 0, i32 1
  %289 = load i64, i64* %288, align 8
  %290 = load i64, i64* %273, align 8
  %291 = icmp ult i64 %289, %290
  br i1 %291, label %292, label %281

292:                                              ; preds = %274, %287
  %293 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %275, i64 1
  br label %274

294:                                              ; preds = %281, %305
  %295 = phi i64 [ %307, %305 ], [ %285, %281 ]
  %296 = phi i64* [ %306, %305 ], [ %284, %281 ]
  %297 = phi %"struct.std::__1::pair.200"* [ %298, %305 ], [ %270, %281 ]
  %298 = bitcast i64* %296 to %"struct.std::__1::pair.200"*
  %299 = icmp ult i64 %272, %295
  br i1 %299, label %305, label %300

300:                                              ; preds = %294
  %301 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %297, i64 -1, i32 1
  %302 = load i64, i64* %301, align 8
  %303 = load i64, i64* %273, align 8
  %304 = icmp ult i64 %302, %303
  br i1 %304, label %312, label %305

305:                                              ; preds = %300, %294
  %306 = getelementptr inbounds i64, i64* %296, i64 -2
  %307 = load i64, i64* %306, align 8
  %308 = icmp ult i64 %307, %272
  br i1 %308, label %309, label %294

309:                                              ; preds = %305
  %310 = bitcast i64* %296 to %"struct.std::__1::pair.200"*
  %311 = bitcast i64* %306 to %"struct.std::__1::pair.200"*
  br label %314

312:                                              ; preds = %300
  %313 = bitcast i64* %296 to %"struct.std::__1::pair.200"*
  br label %314

314:                                              ; preds = %309, %312, %281
  %315 = phi %"struct.std::__1::pair.200"* [ %270, %281 ], [ %310, %309 ], [ %297, %312 ]
  %316 = phi %"struct.std::__1::pair.200"* [ %283, %281 ], [ %311, %309 ], [ %313, %312 ]
  %317 = phi i64* [ %284, %281 ], [ %306, %309 ], [ %296, %312 ]
  %318 = phi i64 [ %285, %281 ], [ %307, %309 ], [ %295, %312 ]
  %319 = icmp ugt %"struct.std::__1::pair.200"* %275, %316
  br i1 %319, label %329, label %320

320:                                              ; preds = %314
  store i64 %318, i64* %282, align 8
  store i64 %277, i64* %317, align 8
  %321 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %275, i64 0, i32 1
  %322 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %315, i64 -1, i32 1
  %323 = load i64, i64* %321, align 8
  %324 = load i64, i64* %322, align 8
  store i64 %324, i64* %321, align 8
  store i64 %323, i64* %322, align 8
  %325 = add i32 %268, 1
  %326 = icmp eq %"struct.std::__1::pair.200"* %267, %275
  %327 = select i1 %326, %"struct.std::__1::pair.200"* %316, %"struct.std::__1::pair.200"* %267
  %328 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %275, i64 1
  br label %266

329:                                              ; preds = %314, %260
  %330 = phi %"struct.std::__1::pair.200"* [ %118, %260 ], [ %267, %314 ]
  %331 = phi i32 [ %261, %260 ], [ %268, %314 ]
  %332 = phi %"struct.std::__1::pair.200"* [ %264, %260 ], [ %275, %314 ]
  %333 = icmp eq %"struct.std::__1::pair.200"* %332, %330
  br i1 %333, label %354, label %334

334:                                              ; preds = %329
  %335 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %330, i64 0, i32 0
  %336 = load i64, i64* %335, align 8
  %337 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %332, i64 0, i32 0
  %338 = load i64, i64* %337, align 8
  %339 = icmp ult i64 %336, %338
  br i1 %339, label %348, label %340

340:                                              ; preds = %334
  %341 = icmp ult i64 %338, %336
  br i1 %341, label %354, label %342

342:                                              ; preds = %340
  %343 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %330, i64 0, i32 1
  %344 = load i64, i64* %343, align 8
  %345 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %332, i64 0, i32 1
  %346 = load i64, i64* %345, align 8
  %347 = icmp ult i64 %344, %346
  br i1 %347, label %348, label %354

348:                                              ; preds = %334, %342
  store i64 %336, i64* %337, align 8
  store i64 %338, i64* %335, align 8
  %349 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %332, i64 0, i32 1
  %350 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %330, i64 0, i32 1
  %351 = load i64, i64* %349, align 8
  %352 = load i64, i64* %350, align 8
  store i64 %352, i64* %349, align 8
  store i64 %351, i64* %350, align 8
  %353 = add i32 %331, 1
  br label %354

354:                                              ; preds = %340, %329, %348, %342
  %355 = phi i32 [ %353, %348 ], [ %331, %342 ], [ %331, %329 ], [ %331, %340 ]
  %356 = icmp eq i32 %355, 0
  br i1 %356, label %357, label %364

357:                                              ; preds = %354
  %358 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessINS_4pairImmEES3_EEPS3_EEbT0_S7_T_(%"struct.std::__1::pair.200"* %17, %"struct.std::__1::pair.200"* %332, %"struct.std::__1::__less.228"* dereferenceable(1) %2)
  %359 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %332, i64 1
  %360 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessINS_4pairImmEES3_EEPS3_EEbT0_S7_T_(%"struct.std::__1::pair.200"* %359, %"struct.std::__1::pair.200"* %5, %"struct.std::__1::__less.228"* dereferenceable(1) %2)
  br i1 %360, label %361, label %363

361:                                              ; preds = %357
  br i1 %358, label %375, label %362

362:                                              ; preds = %361, %373
  br label %4

363:                                              ; preds = %357
  br i1 %358, label %371, label %364

364:                                              ; preds = %363, %354
  %365 = ptrtoint %"struct.std::__1::pair.200"* %332 to i64
  %366 = sub i64 %365, %263
  %367 = sub i64 %13, %365
  %368 = icmp slt i64 %366, %367
  br i1 %368, label %369, label %373

369:                                              ; preds = %364
  tail call void @_ZNSt3__16__sortIRNS_6__lessINS_4pairImmEES3_EEPS3_EEvT0_S7_T_(%"struct.std::__1::pair.200"* %17, %"struct.std::__1::pair.200"* %332, %"struct.std::__1::__less.228"* dereferenceable(1) %2)
  %370 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %332, i64 1
  br label %371

371:                                              ; preds = %369, %363
  %372 = phi %"struct.std::__1::pair.200"* [ %359, %363 ], [ %370, %369 ]
  br label %14

373:                                              ; preds = %364
  %374 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %332, i64 1
  tail call void @_ZNSt3__16__sortIRNS_6__lessINS_4pairImmEES3_EEPS3_EEvT0_S7_T_(%"struct.std::__1::pair.200"* %374, %"struct.std::__1::pair.200"* %5, %"struct.std::__1::__less.228"* dereferenceable(1) %2)
  br label %362

375:                                              ; preds = %361, %181, %16, %16, %156, %178, %112, %27, %57, %29, %35, %40, %44, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort3IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_T_(%"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"*, %"struct.std::__1::__less.228"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %5 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %6, %8
  br i1 %9, label %18, label %10

10:                                               ; preds = %4
  %11 = icmp ult i64 %8, %6
  br i1 %11, label %18, label %12

12:                                               ; preds = %10
  %13 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %14, %16
  br label %18

18:                                               ; preds = %4, %10, %12
  %19 = phi i1 [ true, %4 ], [ false, %10 ], [ %17, %12 ]
  %20 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %2, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = icmp ult i64 %21, %6
  br i1 %22, label %31, label %23

23:                                               ; preds = %18
  %24 = icmp ult i64 %6, %21
  br i1 %24, label %31, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %2, i64 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = icmp ult i64 %27, %29
  br label %31

31:                                               ; preds = %18, %23, %25
  %32 = phi i1 [ true, %18 ], [ false, %23 ], [ %30, %25 ]
  br i1 %19, label %53, label %33

33:                                               ; preds = %31
  br i1 %32, label %34, label %77

34:                                               ; preds = %33
  store i64 %21, i64* %5, align 8
  store i64 %6, i64* %20, align 8
  %35 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 0, i32 1
  %36 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %2, i64 0, i32 1
  %37 = load i64, i64* %35, align 8
  %38 = load i64, i64* %36, align 8
  store i64 %38, i64* %35, align 8
  store i64 %37, i64* %36, align 8
  %39 = load i64, i64* %5, align 8
  %40 = load i64, i64* %7, align 8
  %41 = icmp ult i64 %39, %40
  br i1 %41, label %49, label %42

42:                                               ; preds = %34
  %43 = icmp ult i64 %40, %39
  br i1 %43, label %77, label %44

44:                                               ; preds = %42
  %45 = load i64, i64* %35, align 8
  %46 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = icmp ult i64 %45, %47
  br i1 %48, label %49, label %77

49:                                               ; preds = %34, %44
  store i64 %39, i64* %7, align 8
  store i64 %40, i64* %5, align 8
  %50 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = load i64, i64* %35, align 8
  store i64 %52, i64* %50, align 8
  store i64 %51, i64* %35, align 8
  br label %77

53:                                               ; preds = %31
  br i1 %32, label %54, label %59

54:                                               ; preds = %53
  store i64 %21, i64* %7, align 8
  store i64 %8, i64* %20, align 8
  %55 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 0, i32 1
  %56 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %2, i64 0, i32 1
  %57 = load i64, i64* %55, align 8
  %58 = load i64, i64* %56, align 8
  store i64 %58, i64* %55, align 8
  store i64 %57, i64* %56, align 8
  br label %77

59:                                               ; preds = %53
  store i64 %6, i64* %7, align 8
  store i64 %8, i64* %5, align 8
  %60 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 0, i32 1
  %61 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 0, i32 1
  %62 = load i64, i64* %60, align 8
  %63 = load i64, i64* %61, align 8
  store i64 %63, i64* %60, align 8
  store i64 %62, i64* %61, align 8
  %64 = load i64, i64* %20, align 8
  %65 = load i64, i64* %5, align 8
  %66 = icmp ult i64 %64, %65
  br i1 %66, label %73, label %67

67:                                               ; preds = %59
  %68 = icmp ult i64 %65, %64
  br i1 %68, label %77, label %69

69:                                               ; preds = %67
  %70 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %2, i64 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = icmp ult i64 %71, %62
  br i1 %72, label %73, label %77

73:                                               ; preds = %59, %69
  store i64 %64, i64* %5, align 8
  store i64 %65, i64* %20, align 8
  %74 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %2, i64 0, i32 1
  %75 = load i64, i64* %61, align 8
  %76 = load i64, i64* %74, align 8
  store i64 %76, i64* %61, align 8
  store i64 %75, i64* %74, align 8
  br label %77

77:                                               ; preds = %67, %42, %69, %73, %44, %49, %33, %54
  %78 = phi i32 [ 1, %54 ], [ 0, %33 ], [ 2, %49 ], [ 1, %44 ], [ 2, %73 ], [ 1, %69 ], [ 1, %42 ], [ 1, %67 ]
  ret i32 %78
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_S7_T_(%"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"*, %"struct.std::__1::__less.228"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %6 = tail call i32 @_ZNSt3__17__sort3IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_T_(%"struct.std::__1::pair.200"* %0, %"struct.std::__1::pair.200"* %1, %"struct.std::__1::pair.200"* %2, %"struct.std::__1::__less.228"* dereferenceable(1) %4)
  %7 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %3, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %2, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp ult i64 %8, %10
  br i1 %11, label %20, label %12

12:                                               ; preds = %5
  %13 = icmp ult i64 %10, %8
  br i1 %13, label %58, label %14

14:                                               ; preds = %12
  %15 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %3, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %2, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %16, %18
  br i1 %19, label %20, label %58

20:                                               ; preds = %5, %14
  store i64 %8, i64* %9, align 8
  store i64 %10, i64* %7, align 8
  %21 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %2, i64 0, i32 1
  %22 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %3, i64 0, i32 1
  %23 = load i64, i64* %21, align 8
  %24 = load i64, i64* %22, align 8
  store i64 %24, i64* %21, align 8
  store i64 %23, i64* %22, align 8
  %25 = add i32 %6, 1
  %26 = load i64, i64* %9, align 8
  %27 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = icmp ult i64 %26, %28
  br i1 %29, label %37, label %30

30:                                               ; preds = %20
  %31 = icmp ult i64 %28, %26
  br i1 %31, label %58, label %32

32:                                               ; preds = %30
  %33 = load i64, i64* %21, align 8
  %34 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = icmp ult i64 %33, %35
  br i1 %36, label %37, label %58

37:                                               ; preds = %20, %32
  store i64 %26, i64* %27, align 8
  store i64 %28, i64* %9, align 8
  %38 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = load i64, i64* %21, align 8
  store i64 %40, i64* %38, align 8
  store i64 %39, i64* %21, align 8
  %41 = add i32 %6, 2
  %42 = load i64, i64* %27, align 8
  %43 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 0, i32 0
  %44 = load i64, i64* %43, align 8
  %45 = icmp ult i64 %42, %44
  br i1 %45, label %53, label %46

46:                                               ; preds = %37
  %47 = icmp ult i64 %44, %42
  br i1 %47, label %58, label %48

48:                                               ; preds = %46
  %49 = load i64, i64* %38, align 8
  %50 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = icmp ult i64 %49, %51
  br i1 %52, label %53, label %58

53:                                               ; preds = %37, %48
  store i64 %42, i64* %43, align 8
  store i64 %44, i64* %27, align 8
  %54 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 0, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = load i64, i64* %38, align 8
  store i64 %56, i64* %54, align 8
  store i64 %55, i64* %38, align 8
  %57 = add i32 %6, 3
  br label %58

58:                                               ; preds = %46, %30, %12, %32, %53, %48, %14
  %59 = phi i32 [ %57, %53 ], [ %41, %48 ], [ %25, %32 ], [ %6, %14 ], [ %6, %12 ], [ %25, %30 ], [ %41, %46 ]
  ret i32 %59
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort5IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_S7_S7_T_(%"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"*, %"struct.std::__1::__less.228"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %7 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_S7_T_(%"struct.std::__1::pair.200"* %0, %"struct.std::__1::pair.200"* %1, %"struct.std::__1::pair.200"* %2, %"struct.std::__1::pair.200"* %3, %"struct.std::__1::__less.228"* dereferenceable(1) %5)
  %8 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %4, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %3, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %9, %11
  br i1 %12, label %21, label %13

13:                                               ; preds = %6
  %14 = icmp ult i64 %11, %9
  br i1 %14, label %75, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %4, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %3, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp ult i64 %17, %19
  br i1 %20, label %21, label %75

21:                                               ; preds = %6, %15
  store i64 %9, i64* %10, align 8
  store i64 %11, i64* %8, align 8
  %22 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %3, i64 0, i32 1
  %23 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %4, i64 0, i32 1
  %24 = load i64, i64* %22, align 8
  %25 = load i64, i64* %23, align 8
  store i64 %25, i64* %22, align 8
  store i64 %24, i64* %23, align 8
  %26 = add i32 %7, 1
  %27 = load i64, i64* %10, align 8
  %28 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %2, i64 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = icmp ult i64 %27, %29
  br i1 %30, label %38, label %31

31:                                               ; preds = %21
  %32 = icmp ult i64 %29, %27
  br i1 %32, label %75, label %33

33:                                               ; preds = %31
  %34 = load i64, i64* %22, align 8
  %35 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %2, i64 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = icmp ult i64 %34, %36
  br i1 %37, label %38, label %75

38:                                               ; preds = %21, %33
  store i64 %27, i64* %28, align 8
  store i64 %29, i64* %10, align 8
  %39 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %2, i64 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = load i64, i64* %22, align 8
  store i64 %41, i64* %39, align 8
  store i64 %40, i64* %22, align 8
  %42 = add i32 %7, 2
  %43 = load i64, i64* %28, align 8
  %44 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 0, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = icmp ult i64 %43, %45
  br i1 %46, label %54, label %47

47:                                               ; preds = %38
  %48 = icmp ult i64 %45, %43
  br i1 %48, label %75, label %49

49:                                               ; preds = %47
  %50 = load i64, i64* %39, align 8
  %51 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %50, %52
  br i1 %53, label %54, label %75

54:                                               ; preds = %38, %49
  store i64 %43, i64* %44, align 8
  store i64 %45, i64* %28, align 8
  %55 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 0, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = load i64, i64* %39, align 8
  store i64 %57, i64* %55, align 8
  store i64 %56, i64* %39, align 8
  %58 = add i32 %7, 3
  %59 = load i64, i64* %44, align 8
  %60 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 0, i32 0
  %61 = load i64, i64* %60, align 8
  %62 = icmp ult i64 %59, %61
  br i1 %62, label %70, label %63

63:                                               ; preds = %54
  %64 = icmp ult i64 %61, %59
  br i1 %64, label %75, label %65

65:                                               ; preds = %63
  %66 = load i64, i64* %55, align 8
  %67 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 0, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = icmp ult i64 %66, %68
  br i1 %69, label %70, label %75

70:                                               ; preds = %54, %65
  store i64 %59, i64* %60, align 8
  store i64 %61, i64* %44, align 8
  %71 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 0, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = load i64, i64* %55, align 8
  store i64 %73, i64* %71, align 8
  store i64 %72, i64* %55, align 8
  %74 = add i32 %7, 4
  br label %75

75:                                               ; preds = %63, %47, %31, %13, %33, %65, %70, %49, %15
  %76 = phi i32 [ %74, %70 ], [ %58, %65 ], [ %42, %49 ], [ %26, %33 ], [ %7, %15 ], [ %7, %13 ], [ %26, %31 ], [ %42, %47 ], [ %58, %63 ]
  ret i32 %76
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessINS_4pairImmEES3_EEPS3_EEbT0_S7_T_(%"struct.std::__1::pair.200"*, %"struct.std::__1::pair.200"*, %"struct.std::__1::__less.228"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %4 = ptrtoint %"struct.std::__1::pair.200"* %1 to i64
  %5 = ptrtoint %"struct.std::__1::pair.200"* %0 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 4
  switch i64 %7, label %42 [
    i64 0, label %107
    i64 1, label %107
    i64 2, label %8
    i64 3, label %27
    i64 4, label %31
    i64 5, label %36
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 -1, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp ult i64 %10, %12
  br i1 %13, label %22, label %14

14:                                               ; preds = %8
  %15 = icmp ult i64 %12, %10
  br i1 %15, label %107, label %16

16:                                               ; preds = %14
  %17 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 -1, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp ult i64 %18, %20
  br i1 %21, label %22, label %107

22:                                               ; preds = %8, %16
  store i64 %10, i64* %11, align 8
  store i64 %12, i64* %9, align 8
  %23 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 0, i32 1
  %24 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 -1, i32 1
  %25 = load i64, i64* %23, align 8
  %26 = load i64, i64* %24, align 8
  store i64 %26, i64* %23, align 8
  store i64 %25, i64* %24, align 8
  br label %107

27:                                               ; preds = %3
  %28 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 1
  %29 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 -1
  %30 = tail call i32 @_ZNSt3__17__sort3IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_T_(%"struct.std::__1::pair.200"* %0, %"struct.std::__1::pair.200"* %28, %"struct.std::__1::pair.200"* %29, %"struct.std::__1::__less.228"* dereferenceable(1) %2)
  br label %107

31:                                               ; preds = %3
  %32 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 1
  %33 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 2
  %34 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 -1
  %35 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_S7_T_(%"struct.std::__1::pair.200"* %0, %"struct.std::__1::pair.200"* %32, %"struct.std::__1::pair.200"* %33, %"struct.std::__1::pair.200"* %34, %"struct.std::__1::__less.228"* dereferenceable(1) %2)
  br label %107

36:                                               ; preds = %3
  %37 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 1
  %38 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 2
  %39 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 3
  %40 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %1, i64 -1
  %41 = tail call i32 @_ZNSt3__17__sort5IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_S7_S7_T_(%"struct.std::__1::pair.200"* %0, %"struct.std::__1::pair.200"* %37, %"struct.std::__1::pair.200"* %38, %"struct.std::__1::pair.200"* %39, %"struct.std::__1::pair.200"* %40, %"struct.std::__1::__less.228"* dereferenceable(1) %2)
  br label %107

42:                                               ; preds = %3
  %43 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 2
  %44 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 1
  %45 = tail call i32 @_ZNSt3__17__sort3IRNS_6__lessINS_4pairImmEES3_EEPS3_EEjT0_S7_S7_T_(%"struct.std::__1::pair.200"* %0, %"struct.std::__1::pair.200"* %44, %"struct.std::__1::pair.200"* %43, %"struct.std::__1::__less.228"* dereferenceable(1) %2)
  %46 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %0, i64 3
  %47 = icmp eq %"struct.std::__1::pair.200"* %46, %1
  br i1 %47, label %107, label %48

48:                                               ; preds = %42, %100
  %49 = phi %"struct.std::__1::pair.200"* [ %102, %100 ], [ %46, %42 ]
  %50 = phi i32 [ %101, %100 ], [ 0, %42 ]
  %51 = phi %"struct.std::__1::pair.200"* [ %49, %100 ], [ %43, %42 ]
  %52 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %49, i64 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %51, i64 0, i32 0
  %55 = load i64, i64* %54, align 8
  %56 = icmp ult i64 %53, %55
  br i1 %56, label %57, label %60

57:                                               ; preds = %48
  %58 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %49, i64 0, i32 1
  %59 = load i64, i64* %58, align 8
  br label %68

60:                                               ; preds = %48
  %61 = icmp ult i64 %55, %53
  br i1 %61, label %100, label %62

62:                                               ; preds = %60
  %63 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %49, i64 0, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %51, i64 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = icmp ult i64 %64, %66
  br i1 %67, label %68, label %100

68:                                               ; preds = %57, %62
  %69 = phi i64 [ %59, %57 ], [ %64, %62 ]
  %70 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %49, i64 0, i32 1
  store i64 %55, i64* %52, align 8
  %71 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %51, i64 0, i32 1
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %70, align 8
  %73 = icmp eq %"struct.std::__1::pair.200"* %51, %0
  br i1 %73, label %95, label %74

74:                                               ; preds = %68, %90
  %75 = phi i64* [ %92, %90 ], [ %71, %68 ]
  %76 = phi i64* [ %77, %90 ], [ %54, %68 ]
  %77 = getelementptr inbounds i64, i64* %76, i64 -2
  %78 = bitcast i64* %77 to %"struct.std::__1::pair.200"*
  %79 = load i64, i64* %77, align 8
  %80 = icmp ult i64 %53, %79
  br i1 %80, label %81, label %84

81:                                               ; preds = %74
  %82 = getelementptr inbounds i64, i64* %76, i64 -1
  %83 = load i64, i64* %82, align 8
  br label %90

84:                                               ; preds = %74
  %85 = icmp ult i64 %79, %53
  br i1 %85, label %95, label %86

86:                                               ; preds = %84
  %87 = getelementptr inbounds i64, i64* %76, i64 -1
  %88 = load i64, i64* %87, align 8
  %89 = icmp ult i64 %69, %88
  br i1 %89, label %90, label %95

90:                                               ; preds = %81, %86
  %91 = phi i64 [ %83, %81 ], [ %88, %86 ]
  store i64 %79, i64* %76, align 8
  %92 = getelementptr inbounds i64, i64* %76, i64 -1
  %93 = getelementptr inbounds i64, i64* %76, i64 1
  store i64 %91, i64* %93, align 8
  %94 = icmp eq %"struct.std::__1::pair.200"* %78, %0
  br i1 %94, label %95, label %74

95:                                               ; preds = %90, %86, %84, %68
  %96 = phi i64* [ %54, %68 ], [ %76, %84 ], [ %76, %86 ], [ %77, %90 ]
  %97 = phi i64* [ %71, %68 ], [ %75, %84 ], [ %75, %86 ], [ %92, %90 ]
  store i64 %53, i64* %96, align 8
  store i64 %69, i64* %97, align 8
  %98 = add i32 %50, 1
  %99 = icmp eq i32 %98, 8
  br i1 %99, label %104, label %100

100:                                              ; preds = %95, %60, %62
  %101 = phi i32 [ %98, %95 ], [ %50, %62 ], [ %50, %60 ]
  %102 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %49, i64 1
  %103 = icmp eq %"struct.std::__1::pair.200"* %102, %1
  br i1 %103, label %107, label %48

104:                                              ; preds = %95
  %105 = getelementptr inbounds %"struct.std::__1::pair.200", %"struct.std::__1::pair.200"* %49, i64 1
  %106 = icmp eq %"struct.std::__1::pair.200"* %105, %1
  br label %107

107:                                              ; preds = %100, %104, %42, %14, %16, %22, %3, %3, %36, %31, %27
  %108 = phi i1 [ true, %36 ], [ true, %31 ], [ true, %27 ], [ true, %3 ], [ true, %3 ], [ true, %22 ], [ true, %16 ], [ true, %14 ], [ true, %42 ], [ %106, %104 ], [ true, %100 ]
  ret i1 %108
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEmRKm(%"class.std::__1::vector.8"*, i64, i64* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i64* %2 to i8*
  %5 = bitcast i64* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i64** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i64** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 3
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i64*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i64, i64* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 3
  %22 = add i64 %21, -8
  %23 = lshr exact i64 %22, 3
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 4
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i64* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i64* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i64, i64* %16, i64 %29
  %31 = ptrtoint i64* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 3
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i64* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i64, i64* %2, align 8
  store i64 %40, i64* %38, align 8
  %41 = getelementptr inbounds i64, i64* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !77

44:                                               ; preds = %37, %26
  %45 = phi i64* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 56
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 3
  %49 = add i64 %48, -8
  %50 = lshr exact i64 %49, 3
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i64, i64* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i64* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 4611686018427387900
  %59 = getelementptr i64, i64* %16, i64 %58
  %60 = add nsw i64 %58, -4
  %61 = lshr exact i64 %60, 2
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i64, i64* %2, align 8, !alias.scope !79
  %68 = insertelement <2 x i64> undef, i64 %67, i32 0
  %69 = shufflevector <2 x i64> %68, <2 x i64> undef, <2 x i32> zeroinitializer
  %70 = insertelement <2 x i64> undef, i64 %67, i32 0
  %71 = shufflevector <2 x i64> %70, <2 x i64> undef, <2 x i32> zeroinitializer
  %72 = load i64, i64* %2, align 8, !alias.scope !79
  %73 = insertelement <2 x i64> undef, i64 %72, i32 0
  %74 = shufflevector <2 x i64> %73, <2 x i64> undef, <2 x i32> zeroinitializer
  %75 = insertelement <2 x i64> undef, i64 %72, i32 0
  %76 = shufflevector <2 x i64> %75, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i64, i64* %16, i64 %78
  %81 = bitcast i64* %80 to <2 x i64>*
  store <2 x i64> %69, <2 x i64>* %81, align 8, !alias.scope !82, !noalias !79
  %82 = getelementptr i64, i64* %80, i64 2
  %83 = bitcast i64* %82 to <2 x i64>*
  store <2 x i64> %71, <2 x i64>* %83, align 8, !alias.scope !82, !noalias !79
  %84 = or i64 %78, 4
  %85 = getelementptr i64, i64* %16, i64 %84
  %86 = bitcast i64* %85 to <2 x i64>*
  store <2 x i64> %74, <2 x i64>* %86, align 8, !alias.scope !82, !noalias !79
  %87 = getelementptr i64, i64* %85, i64 2
  %88 = bitcast i64* %87 to <2 x i64>*
  store <2 x i64> %76, <2 x i64>* %88, align 8, !alias.scope !82, !noalias !79
  %89 = add i64 %78, 8
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !84

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i64, i64* %16, i64 %93
  %97 = load i64, i64* %2, align 8, !alias.scope !79
  %98 = insertelement <2 x i64> undef, i64 %97, i32 0
  %99 = shufflevector <2 x i64> %98, <2 x i64> undef, <2 x i32> zeroinitializer
  %100 = insertelement <2 x i64> undef, i64 %97, i32 0
  %101 = shufflevector <2 x i64> %100, <2 x i64> undef, <2 x i32> zeroinitializer
  %102 = bitcast i64* %96 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %102, align 8, !alias.scope !82, !noalias !79
  %103 = getelementptr i64, i64* %96, i64 2
  %104 = bitcast i64* %103 to <2 x i64>*
  store <2 x i64> %101, <2 x i64>* %104, align 8, !alias.scope !82, !noalias !79
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i64* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i64* [ %126, %109 ], [ %45, %44 ]
  %111 = load i64, i64* %2, align 8
  store i64 %111, i64* %110, align 8
  %112 = getelementptr inbounds i64, i64* %110, i64 1
  %113 = load i64, i64* %2, align 8
  store i64 %113, i64* %112, align 8
  %114 = getelementptr inbounds i64, i64* %110, i64 2
  %115 = load i64, i64* %2, align 8
  store i64 %115, i64* %114, align 8
  %116 = getelementptr inbounds i64, i64* %110, i64 3
  %117 = load i64, i64* %2, align 8
  store i64 %117, i64* %116, align 8
  %118 = getelementptr inbounds i64, i64* %110, i64 4
  %119 = load i64, i64* %2, align 8
  store i64 %119, i64* %118, align 8
  %120 = getelementptr inbounds i64, i64* %110, i64 5
  %121 = load i64, i64* %2, align 8
  store i64 %121, i64* %120, align 8
  %122 = getelementptr inbounds i64, i64* %110, i64 6
  %123 = load i64, i64* %2, align 8
  store i64 %123, i64* %122, align 8
  %124 = getelementptr inbounds i64, i64* %110, i64 7
  %125 = load i64, i64* %2, align 8
  store i64 %125, i64* %124, align 8
  %126 = getelementptr inbounds i64, i64* %110, i64 8
  %127 = icmp eq i64* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !86

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 3
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 2305843009213693951
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #12
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 3
  %142 = icmp ult i64 %141, 1152921504606846975
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 2
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 2305843009213693951
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #12
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 2305843009213693951, %139 ]
  %153 = shl i64 %152, 3
  %154 = tail call i8* @_Znwm(i64 %153) #11
  %155 = bitcast i8* %154 to i64*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i64* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i64, i64* %158, i64 %134
  %160 = getelementptr inbounds i64, i64* %158, i64 %157
  %161 = getelementptr inbounds i64, i64* %159, i64 %1
  %162 = shl nsw i64 %1, 3
  %163 = add i64 %162, -8
  %164 = lshr exact i64 %163, 3
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 4
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i64* %159 to i8*
  %169 = shl nsw i64 %1, 3
  %170 = add i64 %169, -8
  %171 = lshr exact i64 %170, 3
  %172 = add nsw i64 %134, %171
  %173 = add nsw i64 %172, 1
  %174 = getelementptr i64, i64* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i64* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 4611686018427387900
  %181 = getelementptr i64, i64* %159, i64 %180
  %182 = add nsw i64 %180, -4
  %183 = lshr exact i64 %182, 2
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i64, i64* %2, align 8, !alias.scope !87
  %190 = insertelement <2 x i64> undef, i64 %189, i32 0
  %191 = shufflevector <2 x i64> %190, <2 x i64> undef, <2 x i32> zeroinitializer
  %192 = insertelement <2 x i64> undef, i64 %189, i32 0
  %193 = shufflevector <2 x i64> %192, <2 x i64> undef, <2 x i32> zeroinitializer
  %194 = load i64, i64* %2, align 8, !alias.scope !87
  %195 = insertelement <2 x i64> undef, i64 %194, i32 0
  %196 = shufflevector <2 x i64> %195, <2 x i64> undef, <2 x i32> zeroinitializer
  %197 = insertelement <2 x i64> undef, i64 %194, i32 0
  %198 = shufflevector <2 x i64> %197, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i64, i64* %159, i64 %200
  %203 = bitcast i64* %202 to <2 x i64>*
  store <2 x i64> %191, <2 x i64>* %203, align 8, !alias.scope !90, !noalias !87
  %204 = getelementptr i64, i64* %202, i64 2
  %205 = bitcast i64* %204 to <2 x i64>*
  store <2 x i64> %193, <2 x i64>* %205, align 8, !alias.scope !90, !noalias !87
  %206 = or i64 %200, 4
  %207 = getelementptr i64, i64* %159, i64 %206
  %208 = bitcast i64* %207 to <2 x i64>*
  store <2 x i64> %196, <2 x i64>* %208, align 8, !alias.scope !90, !noalias !87
  %209 = getelementptr i64, i64* %207, i64 2
  %210 = bitcast i64* %209 to <2 x i64>*
  store <2 x i64> %198, <2 x i64>* %210, align 8, !alias.scope !90, !noalias !87
  %211 = add i64 %200, 8
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !92

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i64, i64* %159, i64 %215
  %219 = load i64, i64* %2, align 8, !alias.scope !87
  %220 = insertelement <2 x i64> undef, i64 %219, i32 0
  %221 = shufflevector <2 x i64> %220, <2 x i64> undef, <2 x i32> zeroinitializer
  %222 = insertelement <2 x i64> undef, i64 %219, i32 0
  %223 = shufflevector <2 x i64> %222, <2 x i64> undef, <2 x i32> zeroinitializer
  %224 = bitcast i64* %218 to <2 x i64>*
  store <2 x i64> %221, <2 x i64>* %224, align 8, !alias.scope !90, !noalias !87
  %225 = getelementptr i64, i64* %218, i64 2
  %226 = bitcast i64* %225 to <2 x i64>*
  store <2 x i64> %223, <2 x i64>* %226, align 8, !alias.scope !90, !noalias !87
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i64* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i64* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i64, i64* %158, i64 %233
  %235 = ptrtoint i64* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 3
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i64* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i64, i64* %2, align 8
  store i64 %244, i64* %242, align 8
  %245 = getelementptr inbounds i64, i64* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !93

248:                                              ; preds = %241, %229
  %249 = phi i64* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 56
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i64* [ %268, %251 ], [ %249, %248 ]
  %253 = load i64, i64* %2, align 8
  store i64 %253, i64* %252, align 8
  %254 = getelementptr inbounds i64, i64* %252, i64 1
  %255 = load i64, i64* %2, align 8
  store i64 %255, i64* %254, align 8
  %256 = getelementptr inbounds i64, i64* %252, i64 2
  %257 = load i64, i64* %2, align 8
  store i64 %257, i64* %256, align 8
  %258 = getelementptr inbounds i64, i64* %252, i64 3
  %259 = load i64, i64* %2, align 8
  store i64 %259, i64* %258, align 8
  %260 = getelementptr inbounds i64, i64* %252, i64 4
  %261 = load i64, i64* %2, align 8
  store i64 %261, i64* %260, align 8
  %262 = getelementptr inbounds i64, i64* %252, i64 5
  %263 = load i64, i64* %2, align 8
  store i64 %263, i64* %262, align 8
  %264 = getelementptr inbounds i64, i64* %252, i64 6
  %265 = load i64, i64* %2, align 8
  store i64 %265, i64* %264, align 8
  %266 = getelementptr inbounds i64, i64* %252, i64 7
  %267 = load i64, i64* %2, align 8
  store i64 %267, i64* %266, align 8
  %268 = getelementptr inbounds i64, i64* %252, i64 8
  %269 = icmp eq i64* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !94

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i64* %160 to i64
  %272 = ptrtoint i64* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %274 = load i64*, i64** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i64* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 3
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i64, i64* %159, i64 %279
  %281 = ptrtoint i64* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i64* %280 to i8*
  %285 = bitcast i64* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %284, i8* align 8 %285, i64 %277, i1 false) #7
  %286 = load i64*, i64** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i64* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i64* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i64* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #11
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector.8"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i64** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i64** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i64*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i64, i64* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i64, i64* %13, i64 %18
  %20 = bitcast i64* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #7
  %26 = ptrtoint i64* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #12
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #11
  %54 = bitcast i8* %53 to i64*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i64* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i64, i64* %57, i64 %33
  %59 = getelementptr inbounds i64, i64* %57, i64 %56
  %60 = getelementptr inbounds i64, i64* %58, i64 %1
  %61 = bitcast i64* %58 to i8*
  %62 = shl i64 %1, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 %62, i1 false) #7
  %63 = ptrtoint i64* %59 to i64
  %64 = ptrtoint i64* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %66 = load i64*, i64** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i64* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i64, i64* %58, i64 %71
  %73 = ptrtoint i64* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i64* %72 to i8*
  %77 = bitcast i64* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #7
  %78 = load i64*, i64** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i64* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i64* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i64* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #11
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inaccessiblemem_or_argmemonly nounwind }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!4 = distinct !{!4, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!7 = distinct !{!7, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!8 = !{i8 0, i8 2}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!11 = distinct !{!11, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!14 = distinct !{!14, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!17 = distinct !{!17, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!20 = distinct !{!20, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!23 = distinct !{!23, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!26 = distinct !{!26, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!29 = distinct !{!29, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!32 = distinct !{!32, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!35 = distinct !{!35, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!38 = distinct !{!38, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!41 = distinct !{!41, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!44 = distinct !{!44, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!45 = !{!"branch_weights", i32 1, i32 2000}
!46 = !{!"branch_weights", i32 2000, i32 1}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE: argument 0"}
!49 = distinct !{!49, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE"}
!50 = !{!51, !48}
!51 = distinct !{!51, !52, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE: argument 0"}
!52 = distinct !{!52, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE"}
!53 = !{!54, !48}
!54 = distinct !{!54, !55, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE: argument 0"}
!55 = distinct !{!55, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 1"}
!58 = distinct !{!58, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm"}
!59 = !{!60, !54}
!60 = distinct !{!60, !58, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 0"}
!61 = !{!54}
!62 = !{!63}
!63 = distinct !{!63, !64, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE: argument 0"}
!64 = distinct !{!64, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE"}
!65 = !{!66, !63}
!66 = distinct !{!66, !67, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE: argument 0"}
!67 = distinct !{!67, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE"}
!68 = !{!69, !63}
!69 = distinct !{!69, !70, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE: argument 0"}
!70 = distinct !{!70, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE"}
!71 = !{!72}
!72 = distinct !{!72, !73, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 1"}
!73 = distinct !{!73, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm"}
!74 = !{!75, !69}
!75 = distinct !{!75, !73, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 0"}
!76 = !{!69}
!77 = distinct !{!77, !78}
!78 = !{!"llvm.loop.unroll.disable"}
!79 = !{!80}
!80 = distinct !{!80, !81}
!81 = distinct !{!81, !"LVerDomain"}
!82 = !{!83}
!83 = distinct !{!83, !81}
!84 = distinct !{!84, !85}
!85 = !{!"llvm.loop.isvectorized", i32 1}
!86 = distinct !{!86, !85}
!87 = !{!88}
!88 = distinct !{!88, !89}
!89 = distinct !{!89, !"LVerDomain"}
!90 = !{!91}
!91 = distinct !{!91, !89}
!92 = distinct !{!92, !85}
!93 = distinct !{!93, !78}
!94 = distinct !{!94, !85}
