; ModuleID = '../../third_party/boringssl/src/crypto/asn1/a_enum.c'
source_filename = "../../third_party/boringssl/src/crypto/asn1/a_enum.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [53 x i8] c"../../third_party/boringssl/src/crypto/asn1/a_enum.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_ENUMERATED_set(%struct.asn1_string_st* nocapture, i64) local_unnamed_addr #0 {
  %3 = alloca [9 x i8], align 1
  %4 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %4) #4
  %5 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %4, i8 -86, i64 9, i1 false)
  store i32 10, i32* %5, align 4
  %6 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp slt i32 %7, 9
  br i1 %8, label %9, label %18

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %14, label %13

13:                                               ; preds = %9
  tail call void @OPENSSL_free(i8* nonnull %11) #4
  br label %14

14:                                               ; preds = %9, %13
  %15 = tail call i8* @OPENSSL_malloc(i64 9) #4
  store i8* %15, i8** %10, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %14
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %15, i8 0, i64 9, i1 false) #4
  br label %18

18:                                               ; preds = %14, %17, %2
  %19 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 89) #4
  br label %53

23:                                               ; preds = %18
  %24 = icmp slt i64 %1, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = sub nsw i64 0, %1
  store i32 266, i32* %5, align 4
  br label %38

27:                                               ; preds = %23
  %28 = icmp eq i64 %1, 0
  br i1 %28, label %51, label %38

29:                                               ; preds = %126, %121, %116, %111, %106, %101, %96, %38
  %30 = phi i64 [ 1, %38 ], [ 2, %96 ], [ 3, %101 ], [ 4, %106 ], [ 5, %111 ], [ 6, %116 ], [ 7, %121 ], [ 8, %126 ]
  %31 = trunc i64 %30 to i32
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %51, label %33

33:                                               ; preds = %29
  %34 = add nsw i64 %30, -1
  %35 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  store i8 %36, i8* %20, align 1
  %37 = icmp eq i64 %30, 1
  br i1 %37, label %51, label %44

38:                                               ; preds = %27, %25
  %39 = phi i64 [ %1, %27 ], [ %26, %25 ]
  %40 = trunc i64 %39 to i8
  %41 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 0
  store i8 %40, i8* %41, align 1
  %42 = ashr i64 %39, 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %29, label %96

44:                                               ; preds = %33
  %45 = load i8*, i8** %19, align 8
  %46 = add nsw i64 %30, -2
  %47 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds i8, i8* %45, i64 1
  store i8 %48, i8* %49, align 1
  %50 = icmp eq i64 %30, 2
  br i1 %50, label %51, label %55

51:                                               ; preds = %44, %55, %62, %69, %76, %83, %90, %29, %33, %27
  %52 = phi i32 [ 0, %29 ], [ 0, %27 ], [ %31, %33 ], [ %31, %90 ], [ %31, %83 ], [ %31, %76 ], [ %31, %69 ], [ %31, %62 ], [ %31, %55 ], [ %31, %44 ]
  store i32 %52, i32* %6, align 8
  br label %53

53:                                               ; preds = %51, %22
  %54 = phi i32 [ 0, %22 ], [ 1, %51 ]
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %4) #4
  ret i32 %54

55:                                               ; preds = %44
  %56 = load i8*, i8** %19, align 8
  %57 = add nsw i64 %30, -3
  %58 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds i8, i8* %56, i64 2
  store i8 %59, i8* %60, align 1
  %61 = icmp eq i64 %30, 3
  br i1 %61, label %51, label %62

62:                                               ; preds = %55
  %63 = load i8*, i8** %19, align 8
  %64 = add nsw i64 %30, -4
  %65 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = getelementptr inbounds i8, i8* %63, i64 3
  store i8 %66, i8* %67, align 1
  %68 = icmp eq i64 %30, 4
  br i1 %68, label %51, label %69

69:                                               ; preds = %62
  %70 = load i8*, i8** %19, align 8
  %71 = add nsw i64 %30, -5
  %72 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = getelementptr inbounds i8, i8* %70, i64 4
  store i8 %73, i8* %74, align 1
  %75 = icmp eq i64 %30, 5
  br i1 %75, label %51, label %76

76:                                               ; preds = %69
  %77 = load i8*, i8** %19, align 8
  %78 = add nsw i64 %30, -6
  %79 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = getelementptr inbounds i8, i8* %77, i64 5
  store i8 %80, i8* %81, align 1
  %82 = icmp eq i64 %30, 6
  br i1 %82, label %51, label %83

83:                                               ; preds = %76
  %84 = load i8*, i8** %19, align 8
  %85 = add nsw i64 %30, -7
  %86 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = getelementptr inbounds i8, i8* %84, i64 6
  store i8 %87, i8* %88, align 1
  %89 = icmp eq i64 %30, 7
  br i1 %89, label %51, label %90

90:                                               ; preds = %83
  %91 = load i8*, i8** %19, align 8
  %92 = add nsw i64 %30, -8
  %93 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = getelementptr inbounds i8, i8* %91, i64 7
  store i8 %94, i8* %95, align 1
  br label %51

96:                                               ; preds = %38
  %97 = trunc i64 %42 to i8
  %98 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 1
  store i8 %97, i8* %98, align 1
  %99 = ashr i64 %39, 16
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %29, label %101

101:                                              ; preds = %96
  %102 = trunc i64 %99 to i8
  %103 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 2
  store i8 %102, i8* %103, align 1
  %104 = ashr i64 %39, 24
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %29, label %106

106:                                              ; preds = %101
  %107 = trunc i64 %104 to i8
  %108 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 3
  store i8 %107, i8* %108, align 1
  %109 = ashr i64 %39, 32
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %29, label %111

111:                                              ; preds = %106
  %112 = trunc i64 %109 to i8
  %113 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 4
  store i8 %112, i8* %113, align 1
  %114 = ashr i64 %39, 40
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %29, label %116

116:                                              ; preds = %111
  %117 = trunc i64 %114 to i8
  %118 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 5
  store i8 %117, i8* %118, align 1
  %119 = ashr i64 %39, 48
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %29, label %121

121:                                              ; preds = %116
  %122 = trunc i64 %119 to i8
  %123 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 6
  store i8 %122, i8* %123, align 1
  %124 = ashr i64 %39, 56
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %29, label %126

126:                                              ; preds = %121
  %127 = trunc i64 %124 to i8
  %128 = getelementptr inbounds [9 x i8], [9 x i8]* %3, i64 0, i64 7
  store i8 %127, i8* %128, align 1
  br label %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @ASN1_ENUMERATED_get(%struct.asn1_string_st* readonly) local_unnamed_addr #3 {
  %2 = icmp eq %struct.asn1_string_st* %0, null
  br i1 %2, label %80, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %80 [
    i32 266, label %7
    i32 10, label %6
  ]

6:                                                ; preds = %3
  br label %7

7:                                                ; preds = %3, %6
  %8 = phi i32 [ 1, %3 ], [ 0, %6 ]
  %9 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp sgt i32 %10, 8
  br i1 %11, label %80, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = icmp ne i8* %14, null
  %16 = icmp sgt i32 %10, 0
  %17 = and i1 %15, %16
  br i1 %17, label %18, label %75

18:                                               ; preds = %12
  %19 = zext i32 %10 to i64
  %20 = add nsw i64 %19, -1
  %21 = and i64 %19, 3
  %22 = icmp ult i64 %20, 3
  br i1 %22, label %55, label %23

23:                                               ; preds = %18
  %24 = sub nsw i64 %19, %21
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i64 [ 0, %23 ], [ %52, %25 ]
  %27 = phi i64 [ 0, %23 ], [ %51, %25 ]
  %28 = phi i64 [ %24, %23 ], [ %53, %25 ]
  %29 = shl i64 %27, 8
  %30 = getelementptr inbounds i8, i8* %14, i64 %26
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i64
  %33 = or i64 %29, %32
  %34 = or i64 %26, 1
  %35 = shl i64 %33, 8
  %36 = getelementptr inbounds i8, i8* %14, i64 %34
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i64
  %39 = or i64 %35, %38
  %40 = or i64 %26, 2
  %41 = shl i64 %39, 8
  %42 = getelementptr inbounds i8, i8* %14, i64 %40
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i64
  %45 = or i64 %41, %44
  %46 = or i64 %26, 3
  %47 = shl i64 %45, 8
  %48 = getelementptr inbounds i8, i8* %14, i64 %46
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i64
  %51 = or i64 %47, %50
  %52 = add nuw nsw i64 %26, 4
  %53 = add i64 %28, -4
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %25

55:                                               ; preds = %25, %18
  %56 = phi i64 [ undef, %18 ], [ %51, %25 ]
  %57 = phi i64 [ 0, %18 ], [ %52, %25 ]
  %58 = phi i64 [ 0, %18 ], [ %51, %25 ]
  %59 = icmp eq i64 %21, 0
  br i1 %59, label %72, label %60

60:                                               ; preds = %55, %60
  %61 = phi i64 [ %69, %60 ], [ %57, %55 ]
  %62 = phi i64 [ %68, %60 ], [ %58, %55 ]
  %63 = phi i64 [ %70, %60 ], [ %21, %55 ]
  %64 = shl i64 %62, 8
  %65 = getelementptr inbounds i8, i8* %14, i64 %61
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i64
  %68 = or i64 %64, %67
  %69 = add nuw nsw i64 %61, 1
  %70 = add i64 %63, -1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %60, !llvm.loop !2

72:                                               ; preds = %60, %55
  %73 = phi i64 [ %56, %55 ], [ %68, %60 ]
  %74 = icmp slt i64 %73, 0
  br i1 %74, label %80, label %75

75:                                               ; preds = %12, %72
  %76 = phi i64 [ %73, %72 ], [ 0, %12 ]
  %77 = icmp eq i32 %8, 0
  %78 = sub nsw i64 0, %76
  %79 = select i1 %77, i64 %76, i64 %78
  br label %80

80:                                               ; preds = %75, %72, %7, %3, %1
  %81 = phi i64 [ 0, %1 ], [ -1, %3 ], [ -1, %7 ], [ %79, %75 ], [ -1, %72 ]
  ret i64 %81
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @BN_to_ASN1_ENUMERATED(%struct.bignum_st*, %struct.asn1_string_st*) local_unnamed_addr #0 {
  %3 = icmp eq %struct.asn1_string_st* %1, null
  br i1 %3, label %4, label %8

4:                                                ; preds = %2
  %5 = tail call %struct.asn1_string_st* @ASN1_ENUMERATED_new() #4
  %6 = icmp eq %struct.asn1_string_st* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %4
  tail call void @ERR_put_error(i32 12, i32 0, i32 158, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 160) #4
  br label %36

8:                                                ; preds = %2, %4
  %9 = phi %struct.asn1_string_st* [ %5, %4 ], [ %1, %2 ]
  %10 = tail call i32 @BN_is_negative(%struct.bignum_st* %0) #4
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %9, i64 0, i32 1
  %13 = select i1 %11, i32 10, i32 266
  store i32 %13, i32* %12, align 4
  %14 = tail call i32 @BN_num_bits(%struct.bignum_st* %0) #4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %8
  %17 = sdiv i32 %14, 8
  %18 = add nsw i32 %17, 5
  br label %19

19:                                               ; preds = %8, %16
  %20 = phi i32 [ %18, %16 ], [ 4, %8 ]
  %21 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %9, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp slt i32 %22, %20
  %24 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %9, i64 0, i32 2
  %25 = load i8*, i8** %24, align 8
  br i1 %23, label %26, label %32

26:                                               ; preds = %19
  %27 = sext i32 %20 to i64
  %28 = tail call i8* @OPENSSL_realloc(i8* %25, i64 %27) #4
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %26
  store i8* %28, i8** %24, align 8
  br label %32

31:                                               ; preds = %26
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 172) #4
  br label %36

32:                                               ; preds = %19, %30
  %33 = phi i8* [ %28, %30 ], [ %25, %19 ]
  %34 = tail call i64 @BN_bn2bin(%struct.bignum_st* %0, i8* %33) #4
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %21, align 8
  br label %40

36:                                               ; preds = %31, %7
  %37 = phi %struct.asn1_string_st* [ %9, %31 ], [ null, %7 ]
  %38 = icmp eq %struct.asn1_string_st* %37, %1
  br i1 %38, label %40, label %39

39:                                               ; preds = %36
  tail call void @ASN1_ENUMERATED_free(%struct.asn1_string_st* %37) #4
  br label %40

40:                                               ; preds = %39, %36, %32
  %41 = phi %struct.asn1_string_st* [ %9, %32 ], [ null, %36 ], [ null, %39 ]
  ret %struct.asn1_string_st* %41
}

declare %struct.asn1_string_st* @ASN1_ENUMERATED_new() local_unnamed_addr #2

declare i32 @BN_is_negative(%struct.bignum_st*) local_unnamed_addr #2

declare i32 @BN_num_bits(%struct.bignum_st*) local_unnamed_addr #2

declare i8* @OPENSSL_realloc(i8*, i64) local_unnamed_addr #2

declare i64 @BN_bn2bin(%struct.bignum_st*, i8*) local_unnamed_addr #2

declare void @ASN1_ENUMERATED_free(%struct.asn1_string_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.bignum_st* @ASN1_ENUMERATED_to_BN(%struct.asn1_string_st* nocapture readonly, %struct.bignum_st*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = sext i32 %6 to i64
  %8 = tail call %struct.bignum_st* @BN_bin2bn(i8* %4, i64 %7, %struct.bignum_st* %1) #4
  %9 = icmp eq %struct.bignum_st* %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %2
  tail call void @ERR_put_error(i32 12, i32 0, i32 105, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 191) #4
  br label %16

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 266
  br i1 %14, label %15, label %16

15:                                               ; preds = %11
  tail call void @BN_set_negative(%struct.bignum_st* nonnull %8, i32 1) #4
  br label %16

16:                                               ; preds = %11, %15, %10
  ret %struct.bignum_st* %8
}

declare %struct.bignum_st* @BN_bin2bn(i8*, i64, %struct.bignum_st*) local_unnamed_addr #2

declare void @BN_set_negative(%struct.bignum_st*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
