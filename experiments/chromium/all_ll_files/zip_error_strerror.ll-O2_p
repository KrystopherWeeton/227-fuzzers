; ModuleID = '../../third_party/libzip/src/lib/zip_error_strerror.c'
source_filename = "../../third_party/libzip/src/lib/zip_error_strerror.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_error = type { i32, i32, i8* }

@_zip_nerr_str = external local_unnamed_addr constant i32, align 4
@.str = private unnamed_addr constant [17 x i8] c"Unknown error %d\00", align 1
@_zip_err_str = external local_unnamed_addr constant [0 x i8*], align 8
@_zip_err_type = external local_unnamed_addr constant [0 x i32], align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"%s%s%s\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [3 x i8] c": \00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @zip_error_strerror(%struct.zip_error*) local_unnamed_addr #0 {
  %2 = alloca [128 x i8], align 16
  %3 = getelementptr inbounds [128 x i8], [128 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 128, i1 false)
  tail call void @zip_error_fini(%struct.zip_error* %0) #6
  %4 = getelementptr inbounds %struct.zip_error, %struct.zip_error* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, -1
  %7 = load i32, i32* @_zip_nerr_str, align 4
  %8 = icmp slt i32 %5, %7
  %9 = and i1 %6, %8
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 %5) #6
  %12 = call i64 @strlen(i8* nonnull %3) #7
  br label %36

13:                                               ; preds = %1
  %14 = sext i32 %5 to i64
  %15 = getelementptr inbounds [0 x i8*], [0 x i8*]* @_zip_err_str, i64 0, i64 %14
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds [0 x i32], [0 x i32]* @_zip_err_type, i64 0, i64 %14
  %18 = load i32, i32* %17, align 4
  switch i32 %18, label %53 [
    i32 1, label %19
    i32 2, label %23
  ]

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.zip_error, %struct.zip_error* %0, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = tail call i8* @strerror(i32 %21) #6
  br label %27

23:                                               ; preds = %13
  %24 = getelementptr inbounds %struct.zip_error, %struct.zip_error* %0, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = tail call i8* @Cr_z_zError(i32 %25) #6
  br label %27

27:                                               ; preds = %19, %23
  %28 = phi i8* [ %26, %23 ], [ %22, %19 ]
  %29 = icmp eq i8* %28, null
  br i1 %29, label %53, label %30

30:                                               ; preds = %27
  %31 = tail call i64 @strlen(i8* nonnull %28) #7
  %32 = icmp eq i8* %16, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %30
  %34 = tail call i64 @strlen(i8* nonnull %16) #7
  %35 = add i64 %34, 2
  br label %36

36:                                               ; preds = %30, %10, %33
  %37 = phi i1 [ true, %33 ], [ false, %30 ], [ false, %10 ]
  %38 = phi i64 [ %31, %33 ], [ %31, %30 ], [ %12, %10 ]
  %39 = phi i8* [ %16, %33 ], [ null, %30 ], [ null, %10 ]
  %40 = phi i8* [ %28, %33 ], [ %28, %30 ], [ %3, %10 ]
  %41 = phi i64 [ %35, %33 ], [ 0, %30 ], [ 0, %10 ]
  %42 = add i64 %38, 1
  %43 = add i64 %42, %41
  %44 = tail call noalias i8* @malloc(i64 %43) #6
  %45 = icmp eq i8* %44, null
  br i1 %45, label %46, label %48

46:                                               ; preds = %36
  %47 = load i8*, i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @_zip_err_str, i64 0, i64 14), align 8
  br label %53

48:                                               ; preds = %36
  %49 = select i1 %37, i8* %39, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0)
  %50 = select i1 %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0)
  %51 = call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %44, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* %49, i8* %50, i8* nonnull %40) #6
  %52 = getelementptr inbounds %struct.zip_error, %struct.zip_error* %0, i64 0, i32 2
  store i8* %44, i8** %52, align 8
  br label %53

53:                                               ; preds = %13, %27, %48, %46
  %54 = phi i8* [ %47, %46 ], [ %44, %48 ], [ %16, %27 ], [ %16, %13 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #6
  ret i8* %54
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @zip_error_fini(%struct.zip_error*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: nounwind
declare i8* @strerror(i32) local_unnamed_addr #4

declare i8* @Cr_z_zError(i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
