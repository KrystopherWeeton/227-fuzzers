; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_ans.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_ans.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::piecewise_construct_t" = type { i8 }
%"struct.jxl::(anonymous namespace)::HashChain" = type <{ i64, %"class.std::__1::vector.11", i32, i32, i32, [4 x i8], %"class.std::__1::vector.128", %"class.std::__1::vector.11", %"class.std::__1::vector.128", %"class.std::__1::vector.128", %"class.std::__1::vector.11", %"class.std::__1::vector.11", i32, [4 x i8], i64, i64, i64, i64, %"class.std::__1::unordered_map", i64, i32, [4 x i8] }>
%"class.std::__1::vector.128" = type { %"class.std::__1::__vector_base.129" }
%"class.std::__1::__vector_base.129" = type { i32*, i32*, %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { i32* }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { i32*, i32*, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { i32* }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.204", %"class.std::__1::__compressed_pair.213", %"class.std::__1::__compressed_pair.218", %"class.std::__1::__compressed_pair.220", [4 x i8] }>
%"class.std::__1::unique_ptr.204" = type { %"class.std::__1::__compressed_pair.205" }
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.206", %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.206" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.207" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.208" }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.209" }
%"struct.std::__1::__compressed_pair_elem.209" = type { i64 }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.209" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i8* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"struct.jxl::ANSEncSymbolInfo" = type <{ i16, [6 x i8], %"class.std::__1::vector.4", i64, i8, i8, i16, [4 x i8] }>
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { i16*, i16*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i16* }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { i8*, i8*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.jxl::AliasTable::Entry" = type { i8, i8, i16, i16, i16 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.24", %"struct.std::__1::array.24", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.30" }
%"struct.std::__1::array" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.24" = type { [8 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::function.30" = type { %"class.std::__1::__function::__policy_func.34" }
%"class.std::__1::__function::__policy_func.34" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.35", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.35" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.121", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.36" }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.38" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.43", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.43" = type { %"class.std::__1::__vector_base.44" }
%"class.std::__1::__vector_base.44" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.45" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.50", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.114", i64 }
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.53", %"class.std::__1::vector.60", %"class.std::__1::vector.53", %"class.std::__1::vector.67", %"class.std::__1::vector.75", %"class.std::__1::vector.84", %"class.std::__1::vector.98", %"class.std::__1::vector.18", %"class.std::__1::vector.53", %"class.std::__1::vector.18", i32, i8, %"class.std::__1::vector.18" }
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { i32*, i32*, %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { i32* }
%"class.std::__1::vector.67" = type { %"class.std::__1::__vector_base.68" }
%"class.std::__1::__vector_base.68" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.70" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.69", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.69" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.75" = type { %"class.std::__1::__vector_base.76" }
%"class.std::__1::__vector_base.76" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.79" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.77", %"struct.std::__1::array.78", i32, i8, [3 x i8] }>
%"struct.std::__1::array.77" = type { [17 x i32] }
%"struct.std::__1::array.78" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.84" = type { %"class.std::__1::__vector_base.85" }
%"class.std::__1::__vector_base.85" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.93" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.86" }
%"class.std::__1::vector.86" = type { %"class.std::__1::__vector_base.87" }
%"class.std::__1::__vector_base.87" = type { i16*, i16*, %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { i16* }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.98" = type { %"class.std::__1::__vector_base.99" }
%"class.std::__1::__vector_base.99" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.108" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.100", i32, %"class.std::__1::vector.11", %"class.std::__1::vector.101" }
%"struct.std::__1::array.100" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.101" = type { %"class.std::__1::__vector_base.102" }
%"class.std::__1::__vector_base.102" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.103" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.53" = type { %"class.std::__1::__vector_base.54" }
%"class.std::__1::__vector_base.54" = type { %"class.std::__1::vector.18"*, %"class.std::__1::vector.18"*, %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.std::__1::vector.18"* }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::vector.114" = type { %"class.std::__1::__vector_base.115" }
%"class.std::__1::__vector_base.115" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.jxl::Plane"* }
%"class.std::__1::vector.121" = type { %"class.std::__1::__vector_base.122" }
%"class.std::__1::__vector_base.122" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.jxl::ImageBundle"* }
%"class.std::__1::vector.188" = type { %"class.std::__1::__vector_base.189" }
%"class.std::__1::__vector_base.189" = type { float*, float*, %"class.std::__1::__compressed_pair.190" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191" }
%"struct.std::__1::__compressed_pair_elem.191" = type { float* }
%"struct.jxl::HistogramParams" = type <{ i32, i32, i32, i32, %"class.std::__1::vector.135", i64, i8, [7 x i8] }>
%"class.std::__1::vector.135" = type { %"class.std::__1::__vector_base.136" }
%"class.std::__1::__vector_base.136" = type { i64*, i64*, %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { i64* }
%"class.std::__1::vector.142" = type { %"class.std::__1::__vector_base.143" }
%"class.std::__1::__vector_base.143" = type { %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"*, %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::vector.144" = type { %"class.std::__1::__vector_base.145" }
%"class.std::__1::__vector_base.145" = type { %"struct.jxl::Token"*, %"struct.jxl::Token"*, %"class.std::__1::__compressed_pair.146" }
%"struct.jxl::Token" = type { i32, i32 }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"struct.jxl::Token"* }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"class.std::__1::vector.144"* }
%"struct.jxl::EntropyEncodingData" = type { %"class.std::__1::vector.156", i8, %"class.std::__1::vector", %"struct.jxl::LZ77Params" }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"class.std::__1::vector.158"*, %"class.std::__1::vector.158"*, %"class.std::__1::__compressed_pair.165" }
%"class.std::__1::vector.158" = type { %"class.std::__1::__vector_base.159" }
%"class.std::__1::__vector_base.159" = type { %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"*, %"class.std::__1::__compressed_pair.160" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.161" }
%"struct.std::__1::__compressed_pair_elem.161" = type { %"struct.jxl::ANSEncSymbolInfo"* }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"class.std::__1::vector.158"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.std::__1::vector.170" = type { %"class.std::__1::__vector_base.171" }
%"class.std::__1::__vector_base.171" = type { %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"*, %"class.std::__1::__compressed_pair.172" }
%"struct.jxl::Histogram" = type <{ %"class.std::__1::vector.128", i64, float, [4 x i8] }>
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"struct.jxl::Histogram"* }
%"class.jxl::(anonymous namespace)::SymbolCostEstimator" = type { i64, %"class.std::__1::vector.188", %"class.std::__1::vector.188" }
%"class.std::__1::vector.239" = type { %"class.std::__1::__vector_base.240" }
%"class.std::__1::__vector_base.240" = type { %struct.MatchInfo*, %struct.MatchInfo*, %"class.std::__1::__compressed_pair.241" }
%struct.MatchInfo = type { i32, i32, i32, float }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %struct.MatchInfo* }
%"class.jxl::(anonymous namespace)::HistogramBuilder" = type { %"class.std::__1::vector.170" }
%"struct.std::__1::pair.231" = type { i32, i32 }
%"class.std::__1::tuple" = type { %"struct.std::__1::__tuple_impl" }
%"struct.std::__1::__tuple_impl" = type { %"class.std::__1::__tuple_leaf" }
%"class.std::__1::__tuple_leaf" = type { i32* }
%"class.std::__1::tuple.230" = type { i8 }

$_ZN3jxl17EncodeUintConfigsINS_9BitWriterEEEvRKNSt3__16vectorINS_16HybridUintConfigENS2_9allocatorIS4_EEEEPT_m = comdat any

$_ZNSt3__16vectorItNS_9allocatorItEEE8__appendEm = comdat any

$_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIiiEENS_22__unordered_map_hasherIiS2_NS_4hashIiEENS_8equal_toIiEELb1EEENS_21__unordered_map_equalIiS2_S7_S5_Lb1EEENS_9allocatorIS2_EEE25__emplace_unique_key_argsIiJRKNS_21piecewise_construct_tENS_5tupleIJRKiEEENSI_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS2_PvEEEEbEERKT_DpOT0_ = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIiiEENS_22__unordered_map_hasherIiS2_NS_4hashIiEENS_8equal_toIiEELb1EEENS_21__unordered_map_equalIiS2_S7_S5_Lb1EEENS_9allocatorIS2_EEE6rehashEm = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIiiEENS_22__unordered_map_hasherIiS2_NS_4hashIiEENS_8equal_toIiEELb1EEENS_21__unordered_map_equalIiS2_S7_S5_Lb1EEENS_9allocatorIS2_EEE8__rehashEm = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEEC2ERKS5_ = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl16HybridUintConfigENS_9allocatorIS2_EEE8__appendEmRKS2_ = comdat any

$_ZNSt3__16vectorIN3jxl16HybridUintConfigENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl16HybridUintConfigENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_ = comdat any

$_ZNSt3__16vectorINS0_IN3jxl16ANSEncSymbolInfoENS_9allocatorIS2_EEEENS3_IS5_EEE24__emplace_back_slow_pathIJEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN3jxl16ANSEncSymbolInfoENS_9allocatorIS2_EEE8__appendEm = comdat any

@.str = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_ans.cc\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"histogram[i] >= 0\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"alphabet_size <= ANS_TAB_SIZE\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"cost >= 0\00", align 1
@.str.6 = private unnamed_addr constant [105 x i8] c"NormalizeCounts(counts.data(), &omit_pos, alphabet_size, ANS_LOG_TAB_SIZE, shift, &num_symbols, symbols)\00", align 1
@.str.7 = private unnamed_addr constant [51 x i8] c"Bundle::Write(codes->lz77, writer, layer, aux_out)\00", align 1
@.str.8 = private unnamed_addr constant [46 x i8] c"Bundle::CanEncode(codes->lz77, &ebits, &bits)\00", align 1
@.str.9 = private unnamed_addr constant [26 x i8] c"counts[i] <= ANS_TAB_SIZE\00", align 1
@.str.10 = private unnamed_addr constant [15 x i8] c"counts[i] >= 0\00", align 1
@_ZN3jxl12_GLOBAL__N_119kLogCountBitLengthsE = internal unnamed_addr constant [14 x i8] c"\05\04\04\04\04\04\03\03\03\03\03\06\07\07", align 1
@_ZN3jxl12_GLOBAL__N_116kLogCountSymbolsE = internal unnamed_addr constant [14 x i8] c"\11\0B\0F\03\09\07\04\02\05\06\00!\01A", align 1
@.str.11 = private unnamed_addr constant [42 x i8] c"(counts[i] & ((1 << drop_bits) - 1)) == 0\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"counts[i] > 0\00", align 1
@.str.14 = private unnamed_addr constant [29 x i8] c"total_counts == ANS_TAB_SIZE\00", align 1
@.str.15 = private unnamed_addr constant [18 x i8] c"alphabet_size > 0\00", align 1
@.str.18 = private unnamed_addr constant [19 x i8] c"discount_ratio > 0\00", align 1
@.str.19 = private unnamed_addr constant [23 x i8] c"discount_ratio <= 1.0f\00", align 1
@.str.20 = private unnamed_addr constant [20 x i8] c"remainder_pos != -1\00", align 1
@.str.21 = private unnamed_addr constant [35 x i8] c"%s:%d: JXL_ABORT: Not implemented\0A\00", align 1
@.str.22 = private unnamed_addr constant [16 x i8] c"min_length >= 3\00", align 1
@_ZN3jxlL17kSpecialDistancesE = internal unnamed_addr constant [120 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\01\00", [2 x i8] c"\01\01", [2 x i8] c"\FF\01", [2 x i8] c"\00\02", [2 x i8] c"\02\00", [2 x i8] c"\01\02", [2 x i8] c"\FF\02", [2 x i8] c"\02\01", [2 x i8] c"\FE\01", [2 x i8] c"\02\02", [2 x i8] c"\FE\02", [2 x i8] c"\00\03", [2 x i8] c"\03\00", [2 x i8] c"\01\03", [2 x i8] c"\FF\03", [2 x i8] c"\03\01", [2 x i8] c"\FD\01", [2 x i8] c"\02\03", [2 x i8] c"\FE\03", [2 x i8] c"\03\02", [2 x i8] c"\FD\02", [2 x i8] c"\00\04", [2 x i8] c"\04\00", [2 x i8] c"\01\04", [2 x i8] c"\FF\04", [2 x i8] c"\04\01", [2 x i8] c"\FC\01", [2 x i8] c"\03\03", [2 x i8] c"\FD\03", [2 x i8] c"\02\04", [2 x i8] c"\FE\04", [2 x i8] c"\04\02", [2 x i8] c"\FC\02", [2 x i8] c"\00\05", [2 x i8] c"\03\04", [2 x i8] c"\FD\04", [2 x i8] c"\04\03", [2 x i8] c"\FC\03", [2 x i8] c"\05\00", [2 x i8] c"\01\05", [2 x i8] c"\FF\05", [2 x i8] c"\05\01", [2 x i8] c"\FB\01", [2 x i8] c"\02\05", [2 x i8] c"\FE\05", [2 x i8] c"\05\02", [2 x i8] c"\FB\02", [2 x i8] c"\04\04", [2 x i8] c"\FC\04", [2 x i8] c"\03\05", [2 x i8] c"\FD\05", [2 x i8] c"\05\03", [2 x i8] c"\FB\03", [2 x i8] c"\00\06", [2 x i8] c"\06\00", [2 x i8] c"\01\06", [2 x i8] c"\FF\06", [2 x i8] c"\06\01", [2 x i8] c"\FA\01", [2 x i8] c"\02\06", [2 x i8] c"\FE\06", [2 x i8] c"\06\02", [2 x i8] c"\FA\02", [2 x i8] c"\04\05", [2 x i8] c"\FC\05", [2 x i8] c"\05\04", [2 x i8] c"\FB\04", [2 x i8] c"\03\06", [2 x i8] c"\FD\06", [2 x i8] c"\06\03", [2 x i8] c"\FA\03", [2 x i8] c"\00\07", [2 x i8] c"\07\00", [2 x i8] c"\01\07", [2 x i8] c"\FF\07", [2 x i8] c"\05\05", [2 x i8] c"\FB\05", [2 x i8] c"\07\01", [2 x i8] c"\F9\01", [2 x i8] c"\04\06", [2 x i8] c"\FC\06", [2 x i8] c"\06\04", [2 x i8] c"\FA\04", [2 x i8] c"\02\07", [2 x i8] c"\FE\07", [2 x i8] c"\07\02", [2 x i8] c"\F9\02", [2 x i8] c"\03\07", [2 x i8] c"\FD\07", [2 x i8] c"\07\03", [2 x i8] c"\F9\03", [2 x i8] c"\05\06", [2 x i8] c"\FB\06", [2 x i8] c"\06\05", [2 x i8] c"\FA\05", [2 x i8] c"\08\00", [2 x i8] c"\04\07", [2 x i8] c"\FC\07", [2 x i8] c"\07\04", [2 x i8] c"\F9\04", [2 x i8] c"\08\01", [2 x i8] c"\08\02", [2 x i8] c"\06\06", [2 x i8] c"\FA\06", [2 x i8] c"\08\03", [2 x i8] c"\05\07", [2 x i8] c"\FB\07", [2 x i8] c"\07\05", [2 x i8] c"\F9\05", [2 x i8] c"\08\04", [2 x i8] c"\06\07", [2 x i8] c"\FA\07", [2 x i8] c"\07\06", [2 x i8] c"\F9\06", [2 x i8] c"\08\05", [2 x i8] c"\07\07", [2 x i8] c"\F9\07", [2 x i8] c"\08\06", [2 x i8] c"\08\07"], align 16
@_ZNSt3__1L19piecewise_constructE = internal constant %"struct.std::__1::piecewise_construct_t" undef, align 1
@_ZZN3jxl12_GLOBAL__N_17LenCostEmE10kCostTable = internal unnamed_addr constant [17 x float] [float 0x4006619F60000000, float 0x4009B49680000000, float 0x4004909740000000, float 0x4003446340000000, float 0x4006A31F20000000, float 0x400B2372C0000000, float 0x40101DF840000000, float 0x4011A98D00000000, float 0x4012099500000000, float 0x40226DFC40000000, float 0x40240A8AC0000000, float 0x4027B7A3C0000000, float 0x4028EAC4E0000000, float 0x40276D1C40000000, float 0x40291FBE00000000, float 0x402B8D0B60000000, float 0x402A591A20000000], align 16
@_ZZN3jxl12_GLOBAL__N_18DistCostEmE10kCostTable = internal unnamed_addr constant [139 x float] [float 0x4019791F20000000, float 0x4016B921E0000000, float 0x4020B1DF00000000, float 0x401E9104A0000000, float 0x401BA845C0000000, float 0x401FD6D800000000, float 0x40216684C0000000, float 0x40216D7540000000, float 0x4022C21DA0000000, float 0x4022388FE0000000, float 0x4022516C60000000, float 0x4022DCA3C0000000, float 0x401D1CF680000000, float 0x401F4FB840000000, float 0x40240DA3E0000000, float 0x4023F3BCC0000000, float 0x4023497B00000000, float 0x4023207680000000, float 0x402457CB80000000, float 0x4024EB43C0000000, float 0x4023FD5840000000, float 0x4024A52200000000, float 0x4020EE7E80000000, float 0x40218333C0000000, float 0x4024526580000000, float 0x40247EA200000000, float 0x402414F160000000, float 0x4024424080000000, float 0x4022AF4380000000, float 0x402226F400000000, float 0x402435A840000000, float 0x4024C193A0000000, float 0x402454E780000000, float 0x4024ACD940000000, float 0x401FC32180000000, float 0x402526BDA0000000, float 0x40260BF3C0000000, float 0x402578E800000000, float 0x40263C8EC0000000, float 0x401DDFB620000000, float 0x40257A0320000000, float 0x4025D05FC0000000, float 0x402453B220000000, float 0x40245B2A60000000, float 0x402655A640000000, float 0x40264B4A20000000, float 0x4025092D00000000, float 0x40254DB420000000, float 0x4024576BE0000000, float 0x40266F6E20000000, float 0x402685F480000000, float 0x4026CE6880000000, float 0x4025C8F220000000, float 0x40265F3640000000, float 0x402008E1C0000000, float 0x401F94A080000000, float 0x402612BA40000000, float 0x40265753E0000000, float 0x4024A76B20000000, float 0x4024D14400000000, float 0x40266D4FA0000000, float 0x40269C92A0000000, float 0x4025583420000000, float 0x4025894060000000, float 0x40264A5F20000000, float 0x40274B1A00000000, float 0x40252FB220000000, float 0x40266A3D60000000, float 0x402588F820000000, float 0x4025A73C00000000, float 0x402579BC40000000, float 0x40253D7680000000, float 0x402461F420000000, float 0x4020EFD000000000, float 0x4027766C60000000, float 0x4027A634A0000000, float 0x4024D493A0000000, float 0x4024538280000000, float 0x4025142F60000000, float 0x4024FD8280000000, float 0x4024F02F80000000, float 0x402770EF80000000, float 0x4025D21640000000, float 0x4026C20200000000, float 0x4027B20D80000000, float 0x4027D76820000000, float 0x40259F0AA0000000, float 0x4026046760000000, float 0x4027D21640000000, float 0x4027E5FF20000000, float 0x402698E400000000, float 0x4027392420000000, float 0x4024F223E0000000, float 0x4027ABCF20000000, float 0x40270BE9C0000000, float 0x40280567E0000000, float 0x4020D378A0000000, float 0x4027CAA440000000, float 0x4027F827E0000000, float 0x402670F9A0000000, float 0x40276EC060000000, float 0x4025388200000000, float 0x4025CC0820000000, float 0x40246853A0000000, float 0x4025FEC040000000, float 0x4026F7EB60000000, float 0x402795EEA0000000, float 0x40287C7840000000, float 0x4026EE01E0000000, float 0x40286CED20000000, float 0x4026D9E7A0000000, float 0x402724E380000000, float 0x40297BF3C0000000, float 0x4026C38500000000, float 0x4028623CE0000000, float 0x40275DC6C0000000, float 0x40264E0CE0000000, float 0x4027CE5AE0000000, float 0x40274E7C60000000, float 0x4027E09240000000, float 0x4030F87C00000000, float 0x4030DA85A0000000, float 0x4031432D20000000, float 0x4030A50820000000, float 0x403124A2C0000000, float 0x4030E93320000000, float 0x4031817420000000, float 0x403136A7E0000000, float 0x40035470E0000000, float 0x400BF4EA20000000, float 0x400C34F620000000, float 0x400BF7C4C0000000, float 0x4008C98120000000, float 0x400ABF6520000000, float 0x400CB5F5A0000000, float 0x401095A7C0000000, float 0x40149C9EA0000000, float 0x401DBC1B00000000, float 0x40236EC060000000], align 16
@__const._ZN3jxl12_GLOBAL__N_117ApplyLZ77_OptimalERKNS_15HistogramParamsEmRKNSt3__16vectorINS5_INS_5TokenENS4_9allocatorIS6_EEEENS7_IS9_EEEERNS_10LZ77ParamsERSB_.chain = private unnamed_addr constant %"struct.jxl::(anonymous namespace)::HashChain" <{ i64 -6148914691236517206, %"class.std::__1::vector.11" { %"class.std::__1::__vector_base.12" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.13" { %"struct.std::__1::__compressed_pair_elem.14" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::vector.128" { %"class.std::__1::__vector_base.129" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.130" { %"struct.std::__1::__compressed_pair_elem.131" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"class.std::__1::vector.11" { %"class.std::__1::__vector_base.12" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.13" { %"struct.std::__1::__compressed_pair_elem.14" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"class.std::__1::vector.128" { %"class.std::__1::__vector_base.129" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.130" { %"struct.std::__1::__compressed_pair_elem.131" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"class.std::__1::vector.128" { %"class.std::__1::__vector_base.129" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.130" { %"struct.std::__1::__compressed_pair_elem.131" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"class.std::__1::vector.11" { %"class.std::__1::__vector_base.12" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.13" { %"struct.std::__1::__compressed_pair_elem.14" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"class.std::__1::vector.11" { %"class.std::__1::__vector_base.12" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.13" { %"struct.std::__1::__compressed_pair_elem.14" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unordered_map" { %"class.std::__1::__hash_table" <{ %"class.std::__1::unique_ptr.204" { %"class.std::__1::__compressed_pair.205" { %"struct.std::__1::__compressed_pair_elem.206" { %"struct.std::__1::__hash_node_base"** inttoptr (i64 -6148914691236517206 to %"struct.std::__1::__hash_node_base"**) }, %"struct.std::__1::__compressed_pair_elem.207" { %"class.std::__1::__bucket_list_deallocator" { %"class.std::__1::__compressed_pair.208" { %"struct.std::__1::__compressed_pair_elem.209" { i64 -6148914691236517206 } } } } } }, %"class.std::__1::__compressed_pair.213" { %"struct.std::__1::__compressed_pair_elem.214" { %"struct.std::__1::__hash_node_base" { %"struct.std::__1::__hash_node_base"* inttoptr (i64 -6148914691236517206 to %"struct.std::__1::__hash_node_base"*) } } }, %"class.std::__1::__compressed_pair.218" { %"struct.std::__1::__compressed_pair_elem.209" { i64 -6148914691236517206 } }, %"class.std::__1::__compressed_pair.220" { %"struct.std::__1::__compressed_pair_elem.221" { float 0xFFFFFFFFE0000000 } }, [4 x i8] c"\AA\AA\AA\AA" }> }, i64 -6148914691236517206, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, align 8
@.str.23 = private unnamed_addr constant [38 x i8] c"*log_alpha_size <= max_log_alpha_size\00", align 1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN3jxl17EncodeUintConfigsINS_9BitWriterEEEvRKNSt3__16vectorINS_16HybridUintConfigENS2_9allocatorIS4_EEEEPT_m(%"class.std::__1::vector"* dereferenceable(24), %"struct.jxl::BitWriter"*, i64) local_unnamed_addr #0 comdat {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %5 = bitcast %"struct.jxl::HybridUintConfig"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %18, label %10

10:                                               ; preds = %3
  %11 = add i64 %2, 1
  %12 = tail call i64 @llvm.ctlz.i64(i64 %11, i1 true) #12, !range !2
  %13 = xor i64 %12, 63
  %14 = tail call i64 @llvm.ctpop.i64(i64 %11) #12, !range !2
  %15 = icmp ugt i64 %14, 1
  %16 = zext i1 %15 to i64
  %17 = add nuw nsw i64 %13, %16
  br label %19

18:                                               ; preds = %53, %3
  ret void

19:                                               ; preds = %10, %53
  %20 = phi i64 [ %8, %10 ], [ %56, %53 ]
  %21 = phi i64 [ 0, %10 ], [ %54, %53 ]
  %22 = inttoptr i64 %20 to %"struct.jxl::HybridUintConfig"*
  %23 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %22, i64 %21
  %24 = bitcast %"struct.jxl::HybridUintConfig"* %23 to i64*
  %25 = load i64, i64* %24, align 4
  %26 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %22, i64 %21, i32 2
  %27 = bitcast i32* %26 to i64*
  %28 = load i64, i64* %27, align 4
  %29 = trunc i64 %25 to i32
  %30 = and i64 %25, 4294967295
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 %17, i64 %30) #12
  %31 = icmp eq i64 %30, %2
  br i1 %31, label %53, label %32

32:                                               ; preds = %19
  %33 = trunc i64 %28 to i32
  %34 = lshr i64 %28, 32
  %35 = add i32 %29, 1
  %36 = tail call i32 @llvm.ctlz.i32(i32 %35, i1 true) #12, !range !3
  %37 = xor i32 %36, 31
  %38 = zext i32 %37 to i64
  %39 = tail call i32 @llvm.ctpop.i32(i32 %35) #12, !range !3
  %40 = icmp ugt i32 %39, 1
  %41 = zext i1 %40 to i64
  %42 = add nuw nsw i64 %41, %38
  %43 = and i64 %28, 4294967295
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 %42, i64 %43) #12
  %44 = sub i32 %29, %33
  %45 = add i32 %44, 1
  %46 = tail call i32 @llvm.ctlz.i32(i32 %45, i1 true) #12, !range !3
  %47 = xor i32 %46, 31
  %48 = zext i32 %47 to i64
  %49 = tail call i32 @llvm.ctpop.i32(i32 %45) #12, !range !3
  %50 = icmp ugt i32 %49, 1
  %51 = zext i1 %50 to i64
  %52 = add nuw nsw i64 %51, %48
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 %52, i64 %34) #12
  br label %53

53:                                               ; preds = %19, %32
  %54 = add nuw i64 %21, 1
  %55 = load i64, i64* %5, align 8
  %56 = load i64, i64* %7, align 8
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 4
  %59 = icmp ult i64 %54, %58
  br i1 %59, label %19, label %18
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3jxl28BuildAndStoreANSEncodingDataENS_15HistogramParams20ANSHistogramStrategyEPKimmbPNS_16ANSEncSymbolInfoEPNS_9BitWriterE(i32, i32*, i64, i64, i1 zeroext, %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::BitWriter"*) local_unnamed_addr #0 {
  %8 = alloca %"class.std::__1::vector.11", align 8
  %9 = alloca %"class.std::__1::vector.128", align 8
  %10 = alloca %"class.std::__1::vector.11", align 8
  %11 = alloca %"class.std::__1::vector.18", align 8
  %12 = alloca %"struct.jxl::BitWriter", align 8
  %13 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %14 = alloca i32, align 4
  %15 = alloca [4 x i32], align 16
  %16 = alloca %"class.std::__1::vector.128", align 8
  %17 = alloca %"class.std::__1::vector.128", align 8
  %18 = alloca [256 x %"struct.jxl::AliasTable::Entry"], align 16
  %19 = alloca %"class.std::__1::vector.128", align 8
  %20 = alloca i32, align 4
  %21 = alloca [256 x %"struct.jxl::AliasTable::Entry"], align 16
  %22 = alloca %"class.std::__1::vector.128", align 8
  br i1 %4, label %23, label %201

23:                                               ; preds = %7
  %24 = icmp ult i64 %2, 2
  br i1 %24, label %988, label %25

25:                                               ; preds = %23
  %26 = bitcast %"class.std::__1::vector.11"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #12
  %27 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %10, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 0, i64 24, i1 false) #12
  %28 = icmp ugt i64 %2, 4611686018427387903
  br i1 %28, label %29, label %31

29:                                               ; preds = %25
  %30 = bitcast %"class.std::__1::vector.11"* %10 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %30) #13
  unreachable

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %10, i64 0, i32 0, i32 2, i32 0, i32 0
  %33 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %10, i64 0, i32 0, i32 1
  %34 = shl i64 %2, 2
  %35 = tail call i8* @_Znwm(i64 %34) #14
  %36 = bitcast i8* %35 to i32*
  %37 = bitcast %"class.std::__1::vector.11"* %10 to i8**
  store i8* %35, i8** %37, align 8
  %38 = getelementptr inbounds i32, i32* %36, i64 %2
  store i32* %38, i32** %32, align 8
  %39 = bitcast i32** %33 to i64*
  %40 = ptrtoint i8* %35 to i64
  %41 = add nsw i64 %2, -1
  %42 = getelementptr i32, i32* %36, i64 %41
  %43 = ptrtoint i32* %42 to i64
  %44 = sub i64 4, %40
  %45 = add i64 %44, %43
  %46 = and i64 %45, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %35, i8 0, i64 %46, i1 false) #12
  %47 = ptrtoint i32* %38 to i64
  store i64 %47, i64* %39, align 8
  %48 = load i32, i32* %1, align 4
  store i32 %48, i32* %36, align 4
  %49 = icmp sgt i32 %48, -1
  br i1 %49, label %50, label %103

50:                                               ; preds = %31, %53
  %51 = phi i64 [ %60, %53 ], [ 1, %31 ]
  %52 = icmp eq i64 %51, %2
  br i1 %52, label %61, label %53

53:                                               ; preds = %50
  %54 = load i32*, i32** %27, align 8
  %55 = getelementptr inbounds i32, i32* %1, i64 %51
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds i32, i32* %54, i64 %51
  store i32 %56, i32* %57, align 4
  %58 = load i32, i32* %55, align 4
  %59 = icmp sgt i32 %58, -1
  %60 = add nuw i64 %51, 1
  br i1 %59, label %50, label %103

61:                                               ; preds = %50
  %62 = bitcast %"class.std::__1::vector.18"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62) #12
  %63 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %11, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 0, i64 24, i1 false) #12
  %64 = icmp slt i64 %2, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %61
  %66 = bitcast %"class.std::__1::vector.18"* %11 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %66) #13
  unreachable

67:                                               ; preds = %61
  %68 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %11, i64 0, i32 0, i32 2, i32 0, i32 0
  %69 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %11, i64 0, i32 0, i32 1
  %70 = tail call i8* @_Znwm(i64 %2) #14
  store i8* %70, i8** %63, align 8
  %71 = getelementptr inbounds i8, i8* %70, i64 %2
  store i8* %71, i8** %68, align 8
  %72 = bitcast i8** %69 to i64*
  %73 = ptrtoint i8* %70 to i64
  %74 = sub i64 %2, %73
  %75 = getelementptr i8, i8* %70, i64 %74
  %76 = ptrtoint i8* %75 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %70, i8 0, i64 %76, i1 false) #12
  %77 = ptrtoint i8* %71 to i64
  store i64 %77, i64* %72, align 8
  %78 = shl i64 %2, 1
  %79 = tail call i8* @_Znwm(i64 %78) #14
  %80 = bitcast i8* %79 to i16*
  %81 = ptrtoint i8* %79 to i64
  %82 = getelementptr i16, i16* %80, i64 %41
  %83 = ptrtoint i16* %82 to i64
  %84 = sub i64 2, %81
  %85 = add i64 %84, %83
  %86 = and i64 %85, -2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %79, i8 0, i64 %86, i1 false) #12
  %87 = bitcast %"struct.jxl::BitWriter"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %87) #12
  %88 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %12, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %87, i8 0, i64 40, i1 false) #12
  %89 = icmp eq %"struct.jxl::BitWriter"* %6, null
  %90 = select i1 %89, %"struct.jxl::BitWriter"* %12, %"struct.jxl::BitWriter"* %6
  %91 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %90, i64 0, i32 0
  %92 = load i64, i64* %91, align 8
  %93 = bitcast %"class.jxl::BitWriter::Allotment"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %93) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %93, i8 -86, i64 40, i1 false)
  %94 = shl i64 %2, 3
  %95 = add i64 %94, 8
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %13, %"struct.jxl::BitWriter"* %90, i64 %95) #12
  %96 = load i32*, i32** %27, align 8
  %97 = load i8*, i8** %63, align 8
  call void @_ZN3jxl24BuildAndStoreHuffmanTreeEPKjmPhPtPNS_9BitWriterE(i32* %96, i64 %2, i8* %97, i16* nonnull %80, %"struct.jxl::BitWriter"* %90) #12
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %90, %"class.jxl::BitWriter::Allotment"* nonnull %13, i64 0, %"struct.jxl::AuxOut"* null) #12
  %98 = load i8*, i8** %63, align 8
  %99 = and i64 %2, 1
  %100 = icmp eq i64 %2, 1
  br i1 %100, label %106, label %101

101:                                              ; preds = %67
  %102 = sub i64 %2, %99
  br label %137

103:                                              ; preds = %53, %31
  %104 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 436, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0)) #12
  %105 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

106:                                              ; preds = %993, %67
  %107 = phi i64 [ 0, %67 ], [ %998, %993 ]
  %108 = icmp eq i64 %99, 0
  br i1 %108, label %121, label %109

109:                                              ; preds = %106
  %110 = getelementptr inbounds i8, i8* %98, i64 %107
  %111 = load i8, i8* %110, align 1
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %116, label %113

113:                                              ; preds = %109
  %114 = getelementptr inbounds i16, i16* %80, i64 %107
  %115 = load i16, i16* %114, align 2
  br label %116

116:                                              ; preds = %113, %109
  %117 = phi i16 [ %115, %113 ], [ 0, %109 ]
  %118 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %5, i64 %107, i32 6
  store i16 %117, i16* %118, align 2
  %119 = load i8, i8* %110, align 1
  %120 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %5, i64 %107, i32 4
  store i8 %119, i8* %120, align 8
  br label %121

121:                                              ; preds = %106, %116
  %122 = load i64, i64* %91, align 8
  %123 = sub i64 %122, %92
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %13) #12
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %93) #12
  %124 = load i8*, i8** %88, align 8
  store i8* null, i8** %88, align 8
  %125 = icmp eq i8* %124, null
  br i1 %125, label %127, label %126

126:                                              ; preds = %121
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %124) #12
  br label %127

127:                                              ; preds = %121, %126
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %87) #12
  call void @_ZdlPv(i8* nonnull %79) #14
  %128 = load i8*, i8** %63, align 8
  %129 = icmp eq i8* %128, null
  br i1 %129, label %132, label %130

130:                                              ; preds = %127
  %131 = ptrtoint i8* %128 to i64
  store i64 %131, i64* %72, align 8
  call void @_ZdlPv(i8* nonnull %128) #14
  br label %132

132:                                              ; preds = %130, %127
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #12
  %133 = and i64 %2, 1
  %134 = icmp eq i64 %2, 1
  br i1 %134, label %155, label %135

135:                                              ; preds = %132
  %136 = sub i64 %2, %133
  br label %177

137:                                              ; preds = %993, %101
  %138 = phi i64 [ 0, %101 ], [ %998, %993 ]
  %139 = phi i64 [ %102, %101 ], [ %999, %993 ]
  %140 = getelementptr inbounds i8, i8* %98, i64 %138
  %141 = load i8, i8* %140, align 1
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %146, label %143

143:                                              ; preds = %137
  %144 = getelementptr inbounds i16, i16* %80, i64 %138
  %145 = load i16, i16* %144, align 2
  br label %146

146:                                              ; preds = %137, %143
  %147 = phi i16 [ %145, %143 ], [ 0, %137 ]
  %148 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %5, i64 %138, i32 6
  store i16 %147, i16* %148, align 2
  %149 = load i8, i8* %140, align 1
  %150 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %5, i64 %138, i32 4
  store i8 %149, i8* %150, align 8
  %151 = or i64 %138, 1
  %152 = getelementptr inbounds i8, i8* %98, i64 %151
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %993, label %990

155:                                              ; preds = %177, %132
  %156 = phi i64 [ undef, %132 ], [ %197, %177 ]
  %157 = phi i64 [ 0, %132 ], [ %198, %177 ]
  %158 = phi i64 [ %123, %132 ], [ %197, %177 ]
  %159 = icmp eq i64 %133, 0
  br i1 %159, label %169, label %160

160:                                              ; preds = %155
  %161 = getelementptr inbounds i32, i32* %1, i64 %157
  %162 = load i32, i32* %161, align 4
  %163 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %5, i64 %157, i32 4
  %164 = load i8, i8* %163, align 8
  %165 = zext i8 %164 to i32
  %166 = mul nsw i32 %162, %165
  %167 = sext i32 %166 to i64
  %168 = add i64 %158, %167
  br label %169

169:                                              ; preds = %155, %160
  %170 = phi i64 [ %156, %155 ], [ %168, %160 ]
  %171 = load i32*, i32** %27, align 8
  %172 = icmp eq i32* %171, null
  br i1 %172, label %176, label %173

173:                                              ; preds = %169
  %174 = ptrtoint i32* %171 to i64
  store i64 %174, i64* %39, align 8
  %175 = bitcast i32* %171 to i8*
  call void @_ZdlPv(i8* %175) #14
  br label %176

176:                                              ; preds = %169, %173
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #12
  br label %988

177:                                              ; preds = %177, %135
  %178 = phi i64 [ 0, %135 ], [ %198, %177 ]
  %179 = phi i64 [ %123, %135 ], [ %197, %177 ]
  %180 = phi i64 [ %136, %135 ], [ %199, %177 ]
  %181 = getelementptr inbounds i32, i32* %1, i64 %178
  %182 = load i32, i32* %181, align 4
  %183 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %5, i64 %178, i32 4
  %184 = load i8, i8* %183, align 8
  %185 = zext i8 %184 to i32
  %186 = mul nsw i32 %182, %185
  %187 = sext i32 %186 to i64
  %188 = add i64 %179, %187
  %189 = or i64 %178, 1
  %190 = getelementptr inbounds i32, i32* %1, i64 %189
  %191 = load i32, i32* %190, align 4
  %192 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %5, i64 %189, i32 4
  %193 = load i8, i8* %192, align 8
  %194 = zext i8 %193 to i32
  %195 = mul nsw i32 %191, %194
  %196 = sext i32 %195 to i64
  %197 = add i64 %188, %196
  %198 = add nuw i64 %178, 2
  %199 = add i64 %180, -2
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %155, label %177

201:                                              ; preds = %7
  %202 = icmp ult i64 %2, 4097
  br i1 %202, label %206, label %203

203:                                              ; preds = %201
  %204 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 464, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0)) #12
  %205 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

206:                                              ; preds = %201
  %207 = icmp eq i64 %2, 0
  br i1 %207, label %259, label %208

208:                                              ; preds = %206
  %209 = add i64 %2, -1
  %210 = and i64 %2, 3
  %211 = icmp ult i64 %209, 3
  br i1 %211, label %214, label %212

212:                                              ; preds = %208
  %213 = sub i64 %2, %210
  br label %233

214:                                              ; preds = %233, %208
  %215 = phi i64 [ undef, %208 ], [ %255, %233 ]
  %216 = phi i64 [ 0, %208 ], [ %256, %233 ]
  %217 = phi i64 [ 0, %208 ], [ %255, %233 ]
  %218 = icmp eq i64 %210, 0
  br i1 %218, label %230, label %219

219:                                              ; preds = %214, %219
  %220 = phi i64 [ %227, %219 ], [ %216, %214 ]
  %221 = phi i64 [ %226, %219 ], [ %217, %214 ]
  %222 = phi i64 [ %228, %219 ], [ %210, %214 ]
  %223 = getelementptr inbounds i32, i32* %1, i64 %220
  %224 = load i32, i32* %223, align 4
  %225 = icmp eq i32 %224, 0
  %226 = select i1 %225, i64 %221, i64 %220
  %227 = add nuw i64 %220, 1
  %228 = add i64 %222, -1
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %230, label %219, !llvm.loop !4

230:                                              ; preds = %219, %214
  %231 = phi i64 [ %215, %214 ], [ %226, %219 ]
  %232 = add i64 %231, 1
  br label %259

233:                                              ; preds = %233, %212
  %234 = phi i64 [ 0, %212 ], [ %256, %233 ]
  %235 = phi i64 [ 0, %212 ], [ %255, %233 ]
  %236 = phi i64 [ %213, %212 ], [ %257, %233 ]
  %237 = getelementptr inbounds i32, i32* %1, i64 %234
  %238 = load i32, i32* %237, align 4
  %239 = icmp eq i32 %238, 0
  %240 = select i1 %239, i64 %235, i64 %234
  %241 = or i64 %234, 1
  %242 = getelementptr inbounds i32, i32* %1, i64 %241
  %243 = load i32, i32* %242, align 4
  %244 = icmp eq i32 %243, 0
  %245 = select i1 %244, i64 %240, i64 %241
  %246 = or i64 %234, 2
  %247 = getelementptr inbounds i32, i32* %1, i64 %246
  %248 = load i32, i32* %247, align 4
  %249 = icmp eq i32 %248, 0
  %250 = select i1 %249, i64 %245, i64 %246
  %251 = or i64 %234, 3
  %252 = getelementptr inbounds i32, i32* %1, i64 %251
  %253 = load i32, i32* %252, align 4
  %254 = icmp eq i32 %253, 0
  %255 = select i1 %254, i64 %250, i64 %251
  %256 = add nuw i64 %234, 4
  %257 = add i64 %236, -4
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %214, label %233

259:                                              ; preds = %206, %230
  %260 = phi i64 [ %232, %230 ], [ 0, %206 ]
  %261 = uitofp i64 %260 to float
  %262 = bitcast float %261 to i32
  %263 = add i32 %262, -1059760811
  %264 = lshr i32 %263, 23
  %265 = ashr i32 %263, 31
  %266 = shl nsw i32 %265, 8
  %267 = or i32 %266, %264
  %268 = shl i32 %267, 23
  %269 = sub i32 %262, %268
  %270 = bitcast i32 %269 to float
  %271 = sitofp i32 %267 to float
  %272 = fadd float %270, -1.000000e+00
  fence acq_rel
  %273 = insertelement <2 x float> undef, float %272, i32 0
  %274 = shufflevector <2 x float> %273, <2 x float> undef, <2 x i32> zeroinitializer
  %275 = fmul <2 x float> %274, <float 0x3FE7C238E0000000, float 0x3FC648B180000000>
  %276 = fadd <2 x float> %275, <float 0x3FF6DC0560000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %277 = fmul <2 x float> %274, %276
  %278 = fadd <2 x float> %277, <float 0xBEBF0B5600000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %279 = extractelement <2 x float> %278, i32 0
  %280 = extractelement <2 x float> %278, i32 1
  %281 = fdiv float %279, %280
  %282 = fadd float %281, %271
  %283 = fcmp olt float %282, 0.000000e+00
  %284 = select i1 %283, float 0.000000e+00, float %282
  %285 = icmp eq i64 %260, 0
  br i1 %285, label %387, label %286

286:                                              ; preds = %259
  %287 = icmp ult i64 %260, 8
  br i1 %287, label %288, label %291

288:                                              ; preds = %366, %286
  %289 = phi i64 [ 0, %286 ], [ %292, %366 ]
  %290 = phi i32 [ 0, %286 ], [ %374, %366 ]
  br label %379

291:                                              ; preds = %286
  %292 = and i64 %260, -8
  %293 = add i64 %292, -8
  %294 = lshr exact i64 %293, 3
  %295 = add nuw nsw i64 %294, 1
  %296 = and i64 %295, 3
  %297 = icmp ult i64 %293, 24
  br i1 %297, label %343, label %298

298:                                              ; preds = %291
  %299 = sub nsw i64 %295, %296
  br label %300

300:                                              ; preds = %300, %298
  %301 = phi i64 [ 0, %298 ], [ %340, %300 ]
  %302 = phi <4 x i32> [ zeroinitializer, %298 ], [ %338, %300 ]
  %303 = phi <4 x i32> [ zeroinitializer, %298 ], [ %339, %300 ]
  %304 = phi i64 [ %299, %298 ], [ %341, %300 ]
  %305 = getelementptr inbounds i32, i32* %1, i64 %301
  %306 = bitcast i32* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 4
  %308 = getelementptr inbounds i32, i32* %305, i64 4
  %309 = bitcast i32* %308 to <4 x i32>*
  %310 = load <4 x i32>, <4 x i32>* %309, align 4
  %311 = add nsw <4 x i32> %307, %302
  %312 = add nsw <4 x i32> %310, %303
  %313 = or i64 %301, 8
  %314 = getelementptr inbounds i32, i32* %1, i64 %313
  %315 = bitcast i32* %314 to <4 x i32>*
  %316 = load <4 x i32>, <4 x i32>* %315, align 4
  %317 = getelementptr inbounds i32, i32* %314, i64 4
  %318 = bitcast i32* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 4
  %320 = add nsw <4 x i32> %316, %311
  %321 = add nsw <4 x i32> %319, %312
  %322 = or i64 %301, 16
  %323 = getelementptr inbounds i32, i32* %1, i64 %322
  %324 = bitcast i32* %323 to <4 x i32>*
  %325 = load <4 x i32>, <4 x i32>* %324, align 4
  %326 = getelementptr inbounds i32, i32* %323, i64 4
  %327 = bitcast i32* %326 to <4 x i32>*
  %328 = load <4 x i32>, <4 x i32>* %327, align 4
  %329 = add nsw <4 x i32> %325, %320
  %330 = add nsw <4 x i32> %328, %321
  %331 = or i64 %301, 24
  %332 = getelementptr inbounds i32, i32* %1, i64 %331
  %333 = bitcast i32* %332 to <4 x i32>*
  %334 = load <4 x i32>, <4 x i32>* %333, align 4
  %335 = getelementptr inbounds i32, i32* %332, i64 4
  %336 = bitcast i32* %335 to <4 x i32>*
  %337 = load <4 x i32>, <4 x i32>* %336, align 4
  %338 = add nsw <4 x i32> %334, %329
  %339 = add nsw <4 x i32> %337, %330
  %340 = add i64 %301, 32
  %341 = add i64 %304, -4
  %342 = icmp eq i64 %341, 0
  br i1 %342, label %343, label %300, !llvm.loop !6

343:                                              ; preds = %300, %291
  %344 = phi <4 x i32> [ undef, %291 ], [ %338, %300 ]
  %345 = phi <4 x i32> [ undef, %291 ], [ %339, %300 ]
  %346 = phi i64 [ 0, %291 ], [ %340, %300 ]
  %347 = phi <4 x i32> [ zeroinitializer, %291 ], [ %338, %300 ]
  %348 = phi <4 x i32> [ zeroinitializer, %291 ], [ %339, %300 ]
  %349 = icmp eq i64 %296, 0
  br i1 %349, label %366, label %350

350:                                              ; preds = %343, %350
  %351 = phi i64 [ %363, %350 ], [ %346, %343 ]
  %352 = phi <4 x i32> [ %361, %350 ], [ %347, %343 ]
  %353 = phi <4 x i32> [ %362, %350 ], [ %348, %343 ]
  %354 = phi i64 [ %364, %350 ], [ %296, %343 ]
  %355 = getelementptr inbounds i32, i32* %1, i64 %351
  %356 = bitcast i32* %355 to <4 x i32>*
  %357 = load <4 x i32>, <4 x i32>* %356, align 4
  %358 = getelementptr inbounds i32, i32* %355, i64 4
  %359 = bitcast i32* %358 to <4 x i32>*
  %360 = load <4 x i32>, <4 x i32>* %359, align 4
  %361 = add nsw <4 x i32> %357, %352
  %362 = add nsw <4 x i32> %360, %353
  %363 = add i64 %351, 8
  %364 = add i64 %354, -1
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %366, label %350, !llvm.loop !8

366:                                              ; preds = %350, %343
  %367 = phi <4 x i32> [ %344, %343 ], [ %361, %350 ]
  %368 = phi <4 x i32> [ %345, %343 ], [ %362, %350 ]
  %369 = add <4 x i32> %368, %367
  %370 = shufflevector <4 x i32> %369, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %371 = add <4 x i32> %369, %370
  %372 = shufflevector <4 x i32> %371, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %373 = add <4 x i32> %371, %372
  %374 = extractelement <4 x i32> %373, i32 0
  %375 = icmp eq i64 %260, %292
  br i1 %375, label %376, label %288

376:                                              ; preds = %379, %366
  %377 = phi i32 [ %374, %366 ], [ %384, %379 ]
  %378 = sitofp i32 %377 to float
  br label %387

379:                                              ; preds = %288, %379
  %380 = phi i64 [ %385, %379 ], [ %289, %288 ]
  %381 = phi i32 [ %384, %379 ], [ %290, %288 ]
  %382 = getelementptr inbounds i32, i32* %1, i64 %380
  %383 = load i32, i32* %382, align 4
  %384 = add nsw i32 %383, %381
  %385 = add nuw i64 %380, 1
  %386 = icmp eq i64 %385, %260
  br i1 %386, label %376, label %379, !llvm.loop !9

387:                                              ; preds = %259, %376
  %388 = phi float [ 0.000000e+00, %259 ], [ %378, %376 ]
  %389 = fmul float %284, %388
  %390 = fadd float %389, 1.400000e+01
  %391 = icmp eq i32 %0, 0
  %392 = icmp eq i32 %0, 2
  br label %393

393:                                              ; preds = %403, %387
  %394 = phi i32 [ 0, %387 ], [ %407, %403 ]
  %395 = phi float [ %390, %387 ], [ %405, %403 ]
  %396 = phi i64 [ 0, %387 ], [ %404, %403 ]
  %397 = add nuw nsw i32 %394, 1
  %398 = tail call fastcc float @_ZN3jxl12_GLOBAL__N_123ComputeHistoAndDataCostEPKimj(i32* %1, i64 %260, i32 %397) #12
  %399 = fcmp olt float %398, %395
  br i1 %399, label %400, label %402

400:                                              ; preds = %393
  %401 = zext i32 %397 to i64
  br label %403

402:                                              ; preds = %393
  br i1 %391, label %409, label %403

403:                                              ; preds = %402, %400
  %404 = phi i64 [ %401, %400 ], [ %396, %402 ]
  %405 = phi float [ %398, %400 ], [ %395, %402 ]
  %406 = add nuw nsw i32 %394, 2
  %407 = select i1 %392, i32 %397, i32 %406
  %408 = icmp ult i32 %407, 13
  br i1 %408, label %393, label %409

409:                                              ; preds = %402, %403
  %410 = phi i64 [ %396, %402 ], [ %404, %403 ]
  %411 = phi float [ %395, %402 ], [ %405, %403 ]
  %412 = trunc i64 %410 to i32
  %413 = fcmp ult float %411, 0.000000e+00
  br i1 %413, label %414, label %417

414:                                              ; preds = %409
  %415 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 476, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0)) #12
  %416 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

417:                                              ; preds = %409
  %418 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %418) #12
  store i32 -1431655766, i32* %14, align 4
  %419 = bitcast [4 x i32]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %419) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %419, i8 0, i64 16, i1 false)
  %420 = bitcast %"class.std::__1::vector.128"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %420) #12
  %421 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %16, i64 0, i32 0, i32 0
  %422 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %16, i64 0, i32 0, i32 1
  %423 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %16, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %420, i8 0, i64 24, i1 false) #12
  %424 = shl nuw i64 %260, 2
  %425 = ashr exact i64 %424, 2
  br i1 %285, label %535, label %426

426:                                              ; preds = %417
  %427 = icmp ugt i64 %425, 4611686018427387903
  br i1 %427, label %428, label %430

428:                                              ; preds = %426
  %429 = bitcast %"class.std::__1::vector.128"* %16 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %429) #13
  unreachable

430:                                              ; preds = %426
  %431 = tail call i8* @_Znwm(i64 %424) #14
  %432 = bitcast i8* %431 to i32*
  %433 = bitcast i32** %422 to i8**
  store i8* %431, i8** %433, align 8
  %434 = bitcast %"class.std::__1::vector.128"* %16 to i8**
  store i8* %431, i8** %434, align 8
  %435 = getelementptr inbounds i32, i32* %432, i64 %425
  store i32* %435, i32** %423, align 8
  %436 = bitcast i32** %422 to i64*
  %437 = ptrtoint i8* %431 to i64
  %438 = icmp sgt i64 %424, 0
  br i1 %438, label %439, label %443

439:                                              ; preds = %430
  %440 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %431, i8* align 4 %440, i64 %424, i1 false) #12
  %441 = getelementptr inbounds i32, i32* %432, i64 %260
  %442 = ptrtoint i32* %441 to i64
  br label %443

443:                                              ; preds = %430, %439
  %444 = phi i64 [ %442, %439 ], [ %437, %430 ]
  store i64 %444, i64* %436, align 8
  %445 = inttoptr i64 %444 to i32*
  %446 = icmp eq i32* %432, %445
  br i1 %446, label %535, label %447

447:                                              ; preds = %443
  %448 = icmp eq i64 %444, %437
  br i1 %448, label %534, label %449

449:                                              ; preds = %447
  %450 = sub i64 %444, %437
  %451 = ashr exact i64 %450, 2
  %452 = icmp ugt i64 %451, 1
  %453 = select i1 %452, i64 %451, i64 1
  %454 = icmp ult i64 %453, 4
  br i1 %454, label %455, label %458

455:                                              ; preds = %514, %449
  %456 = phi i64 [ 0, %449 ], [ %459, %514 ]
  %457 = phi i64 [ 0, %449 ], [ %520, %514 ]
  br label %525

458:                                              ; preds = %449
  %459 = and i64 %453, -4
  %460 = add nsw i64 %459, -4
  %461 = lshr exact i64 %460, 2
  %462 = add nuw nsw i64 %461, 1
  %463 = and i64 %462, 1
  %464 = icmp eq i64 %460, 0
  br i1 %464, label %496, label %465

465:                                              ; preds = %458
  %466 = sub nuw nsw i64 %462, %463
  br label %467

467:                                              ; preds = %467, %465
  %468 = phi i64 [ 0, %465 ], [ %493, %467 ]
  %469 = phi <2 x i64> [ zeroinitializer, %465 ], [ %491, %467 ]
  %470 = phi <2 x i64> [ zeroinitializer, %465 ], [ %492, %467 ]
  %471 = phi i64 [ %466, %465 ], [ %494, %467 ]
  %472 = getelementptr inbounds i32, i32* %432, i64 %468
  %473 = bitcast i32* %472 to <2 x i32>*
  %474 = load <2 x i32>, <2 x i32>* %473, align 4
  %475 = getelementptr inbounds i32, i32* %472, i64 2
  %476 = bitcast i32* %475 to <2 x i32>*
  %477 = load <2 x i32>, <2 x i32>* %476, align 4
  %478 = sext <2 x i32> %474 to <2 x i64>
  %479 = sext <2 x i32> %477 to <2 x i64>
  %480 = add <2 x i64> %469, %478
  %481 = add <2 x i64> %470, %479
  %482 = or i64 %468, 4
  %483 = getelementptr inbounds i32, i32* %432, i64 %482
  %484 = bitcast i32* %483 to <2 x i32>*
  %485 = load <2 x i32>, <2 x i32>* %484, align 4
  %486 = getelementptr inbounds i32, i32* %483, i64 2
  %487 = bitcast i32* %486 to <2 x i32>*
  %488 = load <2 x i32>, <2 x i32>* %487, align 4
  %489 = sext <2 x i32> %485 to <2 x i64>
  %490 = sext <2 x i32> %488 to <2 x i64>
  %491 = add <2 x i64> %480, %489
  %492 = add <2 x i64> %481, %490
  %493 = add i64 %468, 8
  %494 = add i64 %471, -2
  %495 = icmp eq i64 %494, 0
  br i1 %495, label %496, label %467, !llvm.loop !11

496:                                              ; preds = %467, %458
  %497 = phi <2 x i64> [ undef, %458 ], [ %491, %467 ]
  %498 = phi <2 x i64> [ undef, %458 ], [ %492, %467 ]
  %499 = phi i64 [ 0, %458 ], [ %493, %467 ]
  %500 = phi <2 x i64> [ zeroinitializer, %458 ], [ %491, %467 ]
  %501 = phi <2 x i64> [ zeroinitializer, %458 ], [ %492, %467 ]
  %502 = icmp eq i64 %463, 0
  br i1 %502, label %514, label %503

503:                                              ; preds = %496
  %504 = getelementptr inbounds i32, i32* %432, i64 %499
  %505 = getelementptr inbounds i32, i32* %504, i64 2
  %506 = bitcast i32* %505 to <2 x i32>*
  %507 = load <2 x i32>, <2 x i32>* %506, align 4
  %508 = sext <2 x i32> %507 to <2 x i64>
  %509 = add <2 x i64> %501, %508
  %510 = bitcast i32* %504 to <2 x i32>*
  %511 = load <2 x i32>, <2 x i32>* %510, align 4
  %512 = sext <2 x i32> %511 to <2 x i64>
  %513 = add <2 x i64> %500, %512
  br label %514

514:                                              ; preds = %496, %503
  %515 = phi <2 x i64> [ %497, %496 ], [ %513, %503 ]
  %516 = phi <2 x i64> [ %498, %496 ], [ %509, %503 ]
  %517 = add <2 x i64> %516, %515
  %518 = shufflevector <2 x i64> %517, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %519 = add <2 x i64> %517, %518
  %520 = extractelement <2 x i64> %519, i32 0
  %521 = icmp eq i64 %453, %459
  br i1 %521, label %522, label %455

522:                                              ; preds = %525, %514
  %523 = phi i64 [ %520, %514 ], [ %531, %525 ]
  %524 = icmp eq i64 %523, 0
  br i1 %524, label %534, label %535

525:                                              ; preds = %455, %525
  %526 = phi i64 [ %532, %525 ], [ %456, %455 ]
  %527 = phi i64 [ %531, %525 ], [ %457, %455 ]
  %528 = getelementptr inbounds i32, i32* %432, i64 %526
  %529 = load i32, i32* %528, align 4
  %530 = sext i32 %529 to i64
  %531 = add i64 %527, %530
  %532 = add nuw i64 %526, 1
  %533 = icmp ult i64 %532, %451
  br i1 %533, label %525, label %522, !llvm.loop !12

534:                                              ; preds = %447, %522
  store i32 4096, i32* %432, align 4
  br label %535

535:                                              ; preds = %417, %522, %534, %443
  %536 = phi i32* [ %432, %522 ], [ %432, %534 ], [ %432, %443 ], [ null, %417 ]
  %537 = icmp eq i32 %412, 0
  br i1 %537, label %538, label %617

538:                                              ; preds = %535
  %539 = bitcast %"class.std::__1::vector.128"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %539) #12
  %540 = trunc i64 %260 to i32
  call void @_ZN3jxl19CreateFlatHistogramEii(%"class.std::__1::vector.128"* nonnull sret %17, i32 %540, i32 4096) #12
  %541 = load i32*, i32** %421, align 8
  %542 = icmp eq i32* %541, null
  br i1 %542, label %543, label %545

543:                                              ; preds = %538
  %544 = bitcast i32** %422 to i64*
  br label %549

545:                                              ; preds = %538
  %546 = ptrtoint i32* %541 to i64
  %547 = bitcast i32** %422 to i64*
  store i64 %546, i64* %547, align 8
  %548 = bitcast i32* %541 to i8*
  call void @_ZdlPv(i8* %548) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %420, i8 0, i64 24, i1 false) #12
  br label %549

549:                                              ; preds = %545, %543
  %550 = phi i64* [ %544, %543 ], [ %547, %545 ]
  %551 = bitcast %"class.std::__1::vector.128"* %17 to i64*
  %552 = load i64, i64* %551, align 8
  %553 = bitcast %"class.std::__1::vector.128"* %16 to i64*
  store i64 %552, i64* %553, align 8
  %554 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %17, i64 0, i32 0, i32 1
  %555 = bitcast i32** %554 to i64*
  %556 = load i64, i64* %555, align 8
  store i64 %556, i64* %550, align 8
  %557 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %17, i64 0, i32 0, i32 2, i32 0, i32 0
  %558 = bitcast i32** %557 to i64*
  %559 = load i64, i64* %558, align 8
  %560 = bitcast i32** %423 to i64*
  store i64 %559, i64* %560, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %539) #12
  %561 = getelementptr inbounds [256 x %"struct.jxl::AliasTable::Entry"], [256 x %"struct.jxl::AliasTable::Entry"]* %18, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %561) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %561, i8 -86, i64 2048, i1 false)
  %562 = bitcast %"class.std::__1::vector.128"* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %562, i8 0, i64 24, i1 false) #12
  %563 = sub i64 %556, %552
  %564 = ashr exact i64 %563, 2
  %565 = icmp eq i64 %563, 0
  br i1 %565, label %588, label %566

566:                                              ; preds = %549
  %567 = icmp ugt i64 %564, 4611686018427387903
  br i1 %567, label %568, label %570

568:                                              ; preds = %566
  %569 = bitcast %"class.std::__1::vector.128"* %19 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %569) #13
  unreachable

570:                                              ; preds = %566
  %571 = call i8* @_Znwm(i64 %563) #14
  %572 = bitcast i8* %571 to i32*
  %573 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %19, i64 0, i32 0, i32 1
  %574 = bitcast i32** %573 to i8**
  store i8* %571, i8** %574, align 8
  %575 = bitcast %"class.std::__1::vector.128"* %19 to i8**
  store i8* %571, i8** %575, align 8
  %576 = getelementptr inbounds i32, i32* %572, i64 %564
  %577 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %19, i64 0, i32 0, i32 2, i32 0, i32 0
  store i32* %576, i32** %577, align 8
  %578 = bitcast i32** %573 to i64*
  %579 = ptrtoint i8* %571 to i64
  %580 = icmp sgt i64 %563, 0
  br i1 %580, label %581, label %586

581:                                              ; preds = %570
  %582 = lshr exact i64 %563, 2
  %583 = inttoptr i64 %552 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %571, i8* align 4 %583, i64 %563, i1 false) #12
  %584 = getelementptr inbounds i32, i32* %572, i64 %582
  %585 = ptrtoint i32* %584 to i64
  br label %586

586:                                              ; preds = %581, %570
  %587 = phi i64 [ %585, %581 ], [ %579, %570 ]
  store i64 %587, i64* %578, align 8
  br label %588

588:                                              ; preds = %549, %586
  %589 = getelementptr inbounds [256 x %"struct.jxl::AliasTable::Entry"], [256 x %"struct.jxl::AliasTable::Entry"]* %18, i64 0, i64 0
  call void @_ZN3jxl14InitAliasTableENSt3__16vectorIiNS0_9allocatorIiEEEEjmPNS_10AliasTable5EntryE(%"class.std::__1::vector.128"* nonnull %19, i32 4096, i64 %3, %"struct.jxl::AliasTable::Entry"* nonnull %589) #12
  %590 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %19, i64 0, i32 0, i32 0
  %591 = load i32*, i32** %590, align 8
  %592 = icmp eq i32* %591, null
  br i1 %592, label %598, label %593

593:                                              ; preds = %588
  %594 = ptrtoint i32* %591 to i64
  %595 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %19, i64 0, i32 0, i32 1
  %596 = bitcast i32** %595 to i64*
  store i64 %594, i64* %596, align 8
  %597 = bitcast i32* %591 to i8*
  call void @_ZdlPv(i8* %597) #14
  br label %598

598:                                              ; preds = %588, %593
  %599 = load i32*, i32** %421, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_117ANSBuildInfoTableEPKiPKNS_10AliasTable5EntryEmmPNS_16ANSEncSymbolInfoE(i32* %599, %"struct.jxl::AliasTable::Entry"* nonnull %589, i64 %260, i64 %3, %"struct.jxl::ANSEncSymbolInfo"* %5)
  %600 = icmp eq %"struct.jxl::BitWriter"* %6, null
  br i1 %600, label %616, label %601

601:                                              ; preds = %598
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %6, i64 1, i64 0) #12
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %6, i64 1, i64 1) #12
  %602 = icmp sgt i32 %540, 0
  br i1 %602, label %606, label %603

603:                                              ; preds = %601
  %604 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 372, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.15, i64 0, i64 0)) #12
  %605 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

606:                                              ; preds = %601
  %607 = add nsw i32 %540, -1
  %608 = sext i32 %607 to i64
  %609 = icmp eq i32 %607, 0
  br i1 %609, label %610, label %611

610:                                              ; preds = %606
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %6, i64 1, i64 0) #12
  br label %616

611:                                              ; preds = %606
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %6, i64 1, i64 1) #12
  %612 = call i64 @llvm.ctlz.i64(i64 %608, i1 true) #12, !range !2
  %613 = xor i64 %612, 63
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %6, i64 3, i64 %613) #12
  %614 = shl i64 1, %613
  %615 = sub i64 %608, %614
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %6, i64 %613, i64 %615) #12
  br label %616

616:                                              ; preds = %611, %610, %598
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %561) #12
  br label %979

617:                                              ; preds = %535
  %618 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %618) #12
  store i32 0, i32* %20, align 4
  %619 = add i32 %412, -1
  %620 = trunc i64 %260 to i32
  %621 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 0
  %622 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115NormalizeCountsEPiS1_iijS1_S1_(i32* %536, i32* nonnull %20, i32 %620, i32 %619, i32* nonnull %14, i32* nonnull %621)
  %623 = icmp eq i32 %622, 0
  br i1 %623, label %627, label %624

624:                                              ; preds = %617
  %625 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 502, i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.6, i64 0, i64 0)) #12
  %626 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

627:                                              ; preds = %617
  %628 = getelementptr inbounds [256 x %"struct.jxl::AliasTable::Entry"], [256 x %"struct.jxl::AliasTable::Entry"]* %21, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %628) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %628, i8 -86, i64 2048, i1 false)
  %629 = bitcast %"class.std::__1::vector.128"* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %629, i8 0, i64 24, i1 false) #12
  %630 = bitcast i32** %422 to i64*
  %631 = load i64, i64* %630, align 8
  %632 = bitcast %"class.std::__1::vector.128"* %16 to i64*
  %633 = load i64, i64* %632, align 8
  %634 = sub i64 %631, %633
  %635 = ashr exact i64 %634, 2
  %636 = icmp eq i64 %634, 0
  br i1 %636, label %659, label %637

637:                                              ; preds = %627
  %638 = icmp ugt i64 %635, 4611686018427387903
  br i1 %638, label %639, label %641

639:                                              ; preds = %637
  %640 = bitcast %"class.std::__1::vector.128"* %22 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %640) #13
  unreachable

641:                                              ; preds = %637
  %642 = tail call i8* @_Znwm(i64 %634) #14
  %643 = bitcast i8* %642 to i32*
  %644 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %22, i64 0, i32 0, i32 1
  %645 = bitcast i32** %644 to i8**
  store i8* %642, i8** %645, align 8
  %646 = bitcast %"class.std::__1::vector.128"* %22 to i8**
  store i8* %642, i8** %646, align 8
  %647 = getelementptr inbounds i32, i32* %643, i64 %635
  %648 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %22, i64 0, i32 0, i32 2, i32 0, i32 0
  store i32* %647, i32** %648, align 8
  %649 = bitcast i32** %644 to i64*
  %650 = ptrtoint i8* %642 to i64
  %651 = icmp sgt i64 %634, 0
  br i1 %651, label %652, label %657

652:                                              ; preds = %641
  %653 = lshr exact i64 %634, 2
  %654 = inttoptr i64 %633 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %642, i8* align 4 %654, i64 %634, i1 false) #12
  %655 = getelementptr inbounds i32, i32* %643, i64 %653
  %656 = ptrtoint i32* %655 to i64
  br label %657

657:                                              ; preds = %652, %641
  %658 = phi i64 [ %656, %652 ], [ %650, %641 ]
  store i64 %658, i64* %649, align 8
  br label %659

659:                                              ; preds = %627, %657
  %660 = getelementptr inbounds [256 x %"struct.jxl::AliasTable::Entry"], [256 x %"struct.jxl::AliasTable::Entry"]* %21, i64 0, i64 0
  call void @_ZN3jxl14InitAliasTableENSt3__16vectorIiNS0_9allocatorIiEEEEjmPNS_10AliasTable5EntryE(%"class.std::__1::vector.128"* nonnull %22, i32 4096, i64 %3, %"struct.jxl::AliasTable::Entry"* nonnull %660) #12
  %661 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %22, i64 0, i32 0, i32 0
  %662 = load i32*, i32** %661, align 8
  %663 = icmp eq i32* %662, null
  br i1 %663, label %669, label %664

664:                                              ; preds = %659
  %665 = ptrtoint i32* %662 to i64
  %666 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %22, i64 0, i32 0, i32 1
  %667 = bitcast i32** %666 to i64*
  store i64 %665, i64* %667, align 8
  %668 = bitcast i32* %662 to i8*
  call void @_ZdlPv(i8* %668) #14
  br label %669

669:                                              ; preds = %659, %664
  %670 = load i32*, i32** %421, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_117ANSBuildInfoTableEPKiPKNS_10AliasTable5EntryEmmPNS_16ANSEncSymbolInfoE(i32* %670, %"struct.jxl::AliasTable::Entry"* nonnull %660, i64 %260, i64 %3, %"struct.jxl::ANSEncSymbolInfo"* %5)
  %671 = icmp eq %"struct.jxl::BitWriter"* %6, null
  br i1 %671, label %978, label %672

672:                                              ; preds = %669
  %673 = load i32*, i32** %421, align 8
  %674 = load i32, i32* %20, align 4
  %675 = load i32, i32* %14, align 4
  %676 = icmp slt i32 %675, 3
  br i1 %676, label %677, label %709

677:                                              ; preds = %672
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %6, i64 1, i64 1) #12
  %678 = icmp eq i32 %675, 0
  br i1 %678, label %679, label %680

679:                                              ; preds = %677
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %6, i64 1, i64 0) #12
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %6, i64 1, i64 0) #12
  br label %978

680:                                              ; preds = %677
  %681 = add nsw i32 %675, -1
  %682 = sext i32 %681 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %6, i64 1, i64 %682) #12
  %683 = icmp sgt i32 %675, 0
  br i1 %683, label %684, label %978

684:                                              ; preds = %680
  %685 = zext i32 %675 to i64
  br label %686

686:                                              ; preds = %698, %684
  %687 = phi i64 [ 0, %684 ], [ %699, %698 ]
  %688 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 %687
  %689 = load i32, i32* %688, align 4
  %690 = sext i32 %689 to i64
  %691 = icmp eq i32 %689, 0
  br i1 %691, label %692, label %693

692:                                              ; preds = %686
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 1, i64 0) #12
  br label %698

693:                                              ; preds = %686
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 1, i64 1) #12
  %694 = call i64 @llvm.ctlz.i64(i64 %690, i1 true) #12, !range !2
  %695 = xor i64 %694, 63
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 3, i64 %695) #12
  %696 = shl i64 1, %695
  %697 = sub i64 %690, %696
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 %695, i64 %697) #12
  br label %698

698:                                              ; preds = %693, %692
  %699 = add nuw nsw i64 %687, 1
  %700 = icmp eq i64 %699, %685
  br i1 %700, label %701, label %686

701:                                              ; preds = %698
  %702 = icmp eq i32 %675, 2
  br i1 %702, label %703, label %978

703:                                              ; preds = %701
  %704 = load i32, i32* %621, align 16
  %705 = sext i32 %704 to i64
  %706 = getelementptr inbounds i32, i32* %673, i64 %705
  %707 = load i32, i32* %706, align 4
  %708 = sext i32 %707 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 12, i64 %708) #12
  br label %978

709:                                              ; preds = %672
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %6, i64 1, i64 0) #12
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %6, i64 1, i64 0) #12
  %710 = bitcast %"class.std::__1::vector.11"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %710) #12
  %711 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %8, i64 0, i32 0, i32 0
  %712 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %8, i64 0, i32 0, i32 1
  %713 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %714 = shl i64 %260, 32
  %715 = ashr exact i64 %714, 32
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %710, i8 0, i64 24, i1 false) #12
  %716 = icmp eq i32 %620, 0
  br i1 %716, label %735, label %717

717:                                              ; preds = %709
  %718 = icmp slt i32 %620, 0
  br i1 %718, label %719, label %721

719:                                              ; preds = %717
  %720 = bitcast %"class.std::__1::vector.11"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %720) #13
  unreachable

721:                                              ; preds = %717
  %722 = ashr exact i64 %714, 30
  %723 = call i8* @_Znwm(i64 %722) #14
  %724 = bitcast i8* %723 to i32*
  %725 = bitcast %"class.std::__1::vector.11"* %8 to i8**
  store i8* %723, i8** %725, align 8
  %726 = getelementptr inbounds i32, i32* %724, i64 %715
  store i32* %726, i32** %713, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %723, i8 0, i64 %722, i1 false) #12
  %727 = bitcast i32** %712 to i64*
  %728 = ptrtoint i32* %726 to i64
  store i64 %728, i64* %727, align 8
  %729 = icmp sgt i32 %620, 1
  br i1 %729, label %730, label %735

730:                                              ; preds = %721
  %731 = add nsw i32 %674, 1
  %732 = zext i32 %731 to i64
  %733 = zext i32 %674 to i64
  %734 = and i64 %260, 4294967295
  br label %764

735:                                              ; preds = %788, %721, %709
  %736 = bitcast %"class.std::__1::vector.128"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %736) #12
  %737 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %9, i64 0, i32 0, i32 0
  %738 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %9, i64 0, i32 0, i32 1
  %739 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %736, i8 0, i64 24, i1 false) #12
  br i1 %716, label %744, label %740

740:                                              ; preds = %735
  %741 = icmp slt i32 %620, 0
  br i1 %741, label %742, label %746

742:                                              ; preds = %740
  %743 = bitcast %"class.std::__1::vector.128"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %743) #13
  unreachable

744:                                              ; preds = %735
  %745 = sext i32 %674 to i64
  br label %790

746:                                              ; preds = %740
  %747 = ashr exact i64 %714, 30
  %748 = call i8* @_Znwm(i64 %747) #14
  %749 = bitcast i8* %748 to i32*
  %750 = bitcast %"class.std::__1::vector.128"* %9 to i8**
  store i8* %748, i8** %750, align 8
  %751 = getelementptr inbounds i32, i32* %749, i64 %715
  store i32* %751, i32** %739, align 8
  %752 = bitcast i32** %738 to i64*
  %753 = ptrtoint i8* %748 to i64
  %754 = add nsw i64 %715, -1
  %755 = getelementptr i32, i32* %749, i64 %754
  %756 = ptrtoint i32* %755 to i64
  %757 = sub i64 4, %753
  %758 = add i64 %757, %756
  %759 = and i64 %758, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %748, i8 0, i64 %759, i1 false) #12
  %760 = ptrtoint i32* %751 to i64
  store i64 %760, i64* %752, align 8
  %761 = sext i32 %674 to i64
  %762 = zext i32 %674 to i64
  %763 = and i64 %260, 4294967295
  br label %803

764:                                              ; preds = %788, %730
  %765 = phi i64 [ 1, %730 ], [ %773, %788 ]
  %766 = phi i32 [ 0, %730 ], [ %789, %788 ]
  %767 = getelementptr inbounds i32, i32* %673, i64 %765
  %768 = load i32, i32* %767, align 4
  %769 = sext i32 %766 to i64
  %770 = getelementptr inbounds i32, i32* %673, i64 %769
  %771 = load i32, i32* %770, align 4
  %772 = icmp ne i32 %768, %771
  %773 = add nuw nsw i64 %765, 1
  %774 = icmp eq i64 %773, %734
  %775 = or i1 %774, %772
  %776 = trunc i64 %765 to i32
  %777 = sub nsw i32 %776, %766
  %778 = icmp sgt i32 %777, 254
  %779 = or i1 %778, %775
  %780 = icmp eq i64 %765, %733
  %781 = or i1 %780, %779
  %782 = icmp eq i64 %765, %732
  %783 = or i1 %782, %781
  br i1 %783, label %784, label %788

784:                                              ; preds = %764
  %785 = load i32*, i32** %711, align 8
  %786 = getelementptr inbounds i32, i32* %785, i64 %769
  store i32 %777, i32* %786, align 4
  %787 = trunc i64 %773 to i32
  br label %788

788:                                              ; preds = %784, %764
  %789 = phi i32 [ %787, %784 ], [ %766, %764 ]
  br i1 %774, label %735, label %764

790:                                              ; preds = %844, %744
  %791 = phi i64 [ %745, %744 ], [ %761, %844 ]
  %792 = phi i32* [ null, %744 ], [ %845, %844 ]
  %793 = phi i32 [ 0, %744 ], [ %847, %844 ]
  %794 = phi i32 [ 0, %744 ], [ %848, %844 ]
  %795 = getelementptr inbounds i32, i32* %792, i64 %791
  store i32 %793, i32* %795, align 4
  %796 = call i32 @llvm.ctlz.i32(i32 %412, i1 true) #12, !range !3
  %797 = xor i32 %796, 31
  %798 = zext i32 %797 to i64
  %799 = shl nsw i32 -1, %797
  %800 = xor i32 %799, -1
  %801 = sext i32 %800 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 %798, i64 %801) #12
  %802 = icmp eq i32 %797, 3
  br i1 %802, label %853, label %852

803:                                              ; preds = %844, %746
  %804 = phi i32* [ %749, %746 ], [ %845, %844 ]
  %805 = phi i32* [ %749, %746 ], [ %846, %844 ]
  %806 = phi i64 [ 0, %746 ], [ %849, %844 ]
  %807 = phi i32 [ 0, %746 ], [ %850, %844 ]
  %808 = phi i32 [ 0, %746 ], [ %848, %844 ]
  %809 = phi i32 [ 0, %746 ], [ %847, %844 ]
  %810 = getelementptr inbounds i32, i32* %673, i64 %806
  %811 = load i32, i32* %810, align 4
  %812 = icmp slt i32 %811, 4097
  br i1 %812, label %816, label %813

813:                                              ; preds = %803
  %814 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 301, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0)) #12
  %815 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

816:                                              ; preds = %803
  %817 = icmp sgt i32 %811, -1
  br i1 %817, label %821, label %818

818:                                              ; preds = %816
  %819 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 302, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0)) #12
  %820 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

821:                                              ; preds = %816
  %822 = icmp eq i64 %806, %762
  br i1 %822, label %823, label %825

823:                                              ; preds = %821
  %824 = add nuw nsw i32 %807, 1
  br label %844

825:                                              ; preds = %821
  %826 = icmp sgt i32 %811, 0
  br i1 %826, label %827, label %844

827:                                              ; preds = %825
  %828 = call i32 @llvm.ctlz.i32(i32 %811, i1 true) #12, !range !3
  %829 = sub nuw nsw i32 32, %828
  %830 = getelementptr inbounds i32, i32* %805, i64 %806
  store i32 %829, i32* %830, align 4
  %831 = icmp slt i64 %806, %761
  %832 = load i32*, i32** %737, align 8
  %833 = getelementptr inbounds i32, i32* %832, i64 %806
  %834 = load i32, i32* %833, align 4
  %835 = trunc i64 %806 to i32
  %836 = add i32 %835, 1
  br i1 %831, label %837, label %841

837:                                              ; preds = %827
  %838 = add nsw i32 %834, 1
  %839 = icmp slt i32 %809, %838
  %840 = select i1 %839, i32 %838, i32 %809
  br label %844

841:                                              ; preds = %827
  %842 = icmp slt i32 %809, %834
  %843 = select i1 %842, i32 %834, i32 %809
  br label %844

844:                                              ; preds = %841, %837, %825, %823
  %845 = phi i32* [ %804, %823 ], [ %832, %837 ], [ %832, %841 ], [ %804, %825 ]
  %846 = phi i32* [ %805, %823 ], [ %832, %837 ], [ %832, %841 ], [ %805, %825 ]
  %847 = phi i32 [ %809, %823 ], [ %840, %837 ], [ %843, %841 ], [ %809, %825 ]
  %848 = phi i32 [ %824, %823 ], [ %836, %837 ], [ %836, %841 ], [ %808, %825 ]
  %849 = add nuw nsw i64 %806, 1
  %850 = add nuw nsw i32 %807, 1
  %851 = icmp eq i64 %849, %763
  br i1 %851, label %790, label %803

852:                                              ; preds = %790
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 1, i64 0) #12
  br label %853

853:                                              ; preds = %852, %790
  %854 = and i32 %800, %412
  %855 = zext i32 %854 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 %798, i64 %855) #12
  %856 = add nsw i32 %794, -3
  %857 = icmp sgt i32 %856, 255
  br i1 %857, label %858, label %859

858:                                              ; preds = %853
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 1, i64 1) #12
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 3, i64 7) #12
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 7, i64 127) #12
  br label %868

859:                                              ; preds = %853
  %860 = sext i32 %856 to i64
  %861 = icmp eq i32 %856, 0
  br i1 %861, label %862, label %863

862:                                              ; preds = %859
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 1, i64 0) #12
  br label %870

863:                                              ; preds = %859
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 1, i64 1) #12
  %864 = call i64 @llvm.ctlz.i64(i64 %860, i1 true) #12, !range !2
  %865 = xor i64 %864, 63
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 3, i64 %865) #12
  %866 = shl i64 1, %865
  %867 = sub i64 %860, %866
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 %865, i64 %867) #12
  br label %868

868:                                              ; preds = %863, %858
  %869 = icmp sgt i32 %794, 0
  br i1 %869, label %870, label %912

870:                                              ; preds = %868, %862
  br label %871

871:                                              ; preds = %870, %908
  %872 = phi i32 [ %910, %908 ], [ 0, %870 ]
  %873 = icmp sgt i32 %872, 0
  br i1 %873, label %874, label %896

874:                                              ; preds = %871
  %875 = add nsw i32 %872, -1
  %876 = sext i32 %875 to i64
  %877 = load i32*, i32** %711, align 8
  %878 = getelementptr inbounds i32, i32* %877, i64 %876
  %879 = load i32, i32* %878, align 4
  %880 = icmp ugt i32 %879, 4
  br i1 %880, label %881, label %896

881:                                              ; preds = %874
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 7, i64 65) #12
  %882 = load i32, i32* %878, align 4
  %883 = zext i32 %882 to i64
  %884 = add nsw i64 %883, -5
  %885 = icmp eq i64 %884, 0
  br i1 %885, label %886, label %887

886:                                              ; preds = %881
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 1, i64 0) #12
  br label %892

887:                                              ; preds = %881
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 1, i64 1) #12
  %888 = call i64 @llvm.ctlz.i64(i64 %884, i1 true) #12, !range !2
  %889 = xor i64 %888, 63
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 3, i64 %889) #12
  %890 = shl i64 1, %889
  %891 = sub i64 %884, %890
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 %889, i64 %891) #12
  br label %892

892:                                              ; preds = %887, %886
  %893 = load i32, i32* %878, align 4
  %894 = add nsw i32 %872, -2
  %895 = add i32 %894, %893
  br label %908

896:                                              ; preds = %874, %871
  %897 = sext i32 %872 to i64
  %898 = load i32*, i32** %737, align 8
  %899 = getelementptr inbounds i32, i32* %898, i64 %897
  %900 = load i32, i32* %899, align 4
  %901 = sext i32 %900 to i64
  %902 = getelementptr inbounds [14 x i8], [14 x i8]* @_ZN3jxl12_GLOBAL__N_119kLogCountBitLengthsE, i64 0, i64 %901
  %903 = load i8, i8* %902, align 1
  %904 = zext i8 %903 to i64
  %905 = getelementptr inbounds [14 x i8], [14 x i8]* @_ZN3jxl12_GLOBAL__N_116kLogCountSymbolsE, i64 0, i64 %901
  %906 = load i8, i8* %905, align 1
  %907 = zext i8 %906 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 %904, i64 %907) #12
  br label %908

908:                                              ; preds = %896, %892
  %909 = phi i32 [ %895, %892 ], [ %872, %896 ]
  %910 = add nsw i32 %909, 1
  %911 = icmp slt i32 %910, %794
  br i1 %911, label %871, label %927

912:                                              ; preds = %974, %868
  %913 = load i32*, i32** %737, align 8
  %914 = icmp eq i32* %913, null
  br i1 %914, label %919, label %915

915:                                              ; preds = %912
  %916 = ptrtoint i32* %913 to i64
  %917 = bitcast i32** %738 to i64*
  store i64 %916, i64* %917, align 8
  %918 = bitcast i32* %913 to i8*
  call void @_ZdlPv(i8* %918) #14
  br label %919

919:                                              ; preds = %915, %912
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %736) #12
  %920 = load i32*, i32** %711, align 8
  %921 = icmp eq i32* %920, null
  br i1 %921, label %926, label %922

922:                                              ; preds = %919
  %923 = ptrtoint i32* %920 to i64
  %924 = bitcast i32** %712 to i64*
  store i64 %923, i64* %924, align 8
  %925 = bitcast i32* %920 to i8*
  call void @_ZdlPv(i8* %925) #14
  br label %926

926:                                              ; preds = %922, %919
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %710) #12
  br label %978

927:                                              ; preds = %908, %974
  %928 = phi i32 [ %976, %974 ], [ 0, %908 ]
  %929 = icmp sgt i32 %928, 0
  br i1 %929, label %930, label %940

930:                                              ; preds = %927
  %931 = add nsw i32 %928, -1
  %932 = sext i32 %931 to i64
  %933 = load i32*, i32** %711, align 8
  %934 = getelementptr inbounds i32, i32* %933, i64 %932
  %935 = load i32, i32* %934, align 4
  %936 = icmp ugt i32 %935, 4
  br i1 %936, label %937, label %940

937:                                              ; preds = %930
  %938 = add nsw i32 %928, -2
  %939 = add i32 %938, %935
  br label %974

940:                                              ; preds = %930, %927
  %941 = sext i32 %928 to i64
  %942 = load i32*, i32** %737, align 8
  %943 = getelementptr inbounds i32, i32* %942, i64 %941
  %944 = load i32, i32* %943, align 4
  %945 = icmp slt i32 %944, 2
  %946 = icmp eq i32 %928, %674
  %947 = or i1 %946, %945
  br i1 %947, label %974, label %948

948:                                              ; preds = %940
  %949 = add nsw i32 %944, -1
  %950 = sub nsw i32 13, %944
  %951 = lshr i32 %950, 1
  %952 = sub nsw i32 %619, %951
  %953 = icmp slt i32 %952, %949
  %954 = select i1 %953, i32 %952, i32 %949
  %955 = icmp sgt i32 %954, 0
  %956 = select i1 %955, i32 %954, i32 0
  %957 = xor i32 %956, -1
  %958 = add i32 %944, %957
  %959 = getelementptr inbounds i32, i32* %673, i64 %941
  %960 = load i32, i32* %959, align 4
  %961 = shl nsw i32 -1, %958
  %962 = xor i32 %961, -1
  %963 = and i32 %960, %962
  %964 = icmp eq i32 %963, 0
  br i1 %964, label %968, label %965

965:                                              ; preds = %948
  %966 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 359, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.11, i64 0, i64 0)) #12
  %967 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

968:                                              ; preds = %948
  %969 = zext i32 %956 to i64
  %970 = ashr i32 %960, %958
  %971 = shl i32 1, %956
  %972 = sub nsw i32 %970, %971
  %973 = sext i32 %972 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 %969, i64 %973) #12
  br label %974

974:                                              ; preds = %968, %940, %937
  %975 = phi i32 [ %939, %937 ], [ %928, %968 ], [ %928, %940 ]
  %976 = add nsw i32 %975, 1
  %977 = icmp slt i32 %976, %794
  br i1 %977, label %927, label %912

978:                                              ; preds = %926, %703, %701, %680, %679, %669
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %628) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %618) #12
  br label %979

979:                                              ; preds = %978, %616
  %980 = fptoui float %411 to i64
  %981 = load i32*, i32** %421, align 8
  %982 = icmp eq i32* %981, null
  br i1 %982, label %987, label %983

983:                                              ; preds = %979
  %984 = ptrtoint i32* %981 to i64
  %985 = bitcast i32** %422 to i64*
  store i64 %984, i64* %985, align 8
  %986 = bitcast i32* %981 to i8*
  call void @_ZdlPv(i8* %986) #14
  br label %987

987:                                              ; preds = %979, %983
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %420) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %419) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %418) #12
  br label %988

988:                                              ; preds = %23, %987, %176
  %989 = phi i64 [ %170, %176 ], [ %980, %987 ], [ 0, %23 ]
  ret i64 %989

990:                                              ; preds = %146
  %991 = getelementptr inbounds i16, i16* %80, i64 %151
  %992 = load i16, i16* %991, align 2
  br label %993

993:                                              ; preds = %990, %146
  %994 = phi i16 [ %992, %990 ], [ 0, %146 ]
  %995 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %5, i64 %151, i32 6
  store i16 %994, i16* %995, align 2
  %996 = load i8, i8* %152, align 1
  %997 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %5, i64 %151, i32 4
  store i8 %996, i8* %997, align 8
  %998 = add nuw i64 %138, 2
  %999 = add i64 %139, -2
  %1000 = icmp eq i64 %999, 0
  br i1 %1000, label %106, label %137
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"*, %"struct.jxl::BitWriter"*, i64) unnamed_addr #2

declare void @_ZN3jxl24BuildAndStoreHuffmanTreeEPKjmPhPtPNS_9BitWriterE(i32*, i64, i8*, i16*, %"struct.jxl::BitWriter"*) local_unnamed_addr #2

declare void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"*, %"class.jxl::BitWriter::Allotment"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"*) unnamed_addr #4

declare void @_ZN3jxl19CreateFlatHistogramEii(%"class.std::__1::vector.128"* sret, i32, i32) local_unnamed_addr #2

declare void @_ZN3jxl14InitAliasTableENSt3__16vectorIiNS0_9allocatorIiEEEEjmPNS_10AliasTable5EntryE(%"class.std::__1::vector.128"*, i32, i64, %"struct.jxl::AliasTable::Entry"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_117ANSBuildInfoTableEPKiPKNS_10AliasTable5EntryEmmPNS_16ANSEncSymbolInfoE(i32* nocapture readonly, %"struct.jxl::AliasTable::Entry"* nocapture readonly, i64, i64, %"struct.jxl::ANSEncSymbolInfo"*) unnamed_addr #0 {
  %6 = sub i64 12, %3
  %7 = trunc i64 %6 to i32
  %8 = shl nsw i32 -1, %7
  %9 = icmp ugt i64 %2, 1
  %10 = select i1 %9, i64 %2, i64 1
  %11 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %4, i64 %2, i32 0
  br label %12

12:                                               ; preds = %5, %50
  %13 = phi i64 [ 0, %5 ], [ %51, %50 ]
  %14 = icmp eq i64 %13, %2
  br i1 %14, label %15, label %16

15:                                               ; preds = %12
  store i16 4096, i16* %11, align 8
  br label %22

16:                                               ; preds = %12
  %17 = getelementptr inbounds i32, i32* %0, i64 %13
  %18 = load i32, i32* %17, align 4
  %19 = trunc i32 %18 to i16
  %20 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %4, i64 %13, i32 0
  store i16 %19, i16* %20, align 8
  %21 = icmp eq i32 %18, 0
  br i1 %21, label %29, label %22

22:                                               ; preds = %15, %16
  %23 = phi i32 [ 4096, %15 ], [ %18, %16 ]
  %24 = and i32 %23, 65535
  %25 = zext i32 %24 to i64
  %26 = or i64 %25, 17592186044416
  %27 = add nsw i64 %26, -1
  %28 = udiv i64 %27, %25
  br label %29

29:                                               ; preds = %16, %22
  %30 = phi i64 [ %28, %22 ], [ 1, %16 ]
  %31 = phi i32 [ %23, %22 ], [ 0, %16 ]
  %32 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %4, i64 %13, i32 3
  store i64 %30, i64* %32, align 8
  %33 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %4, i64 %13, i32 2
  %34 = sext i32 %31 to i64
  %35 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %4, i64 %13, i32 2, i32 0, i32 1
  %36 = bitcast i16** %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %"class.std::__1::vector.4"* %33 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = sub i64 %37, %39
  %41 = ashr exact i64 %40, 1
  %42 = icmp ult i64 %41, %34
  %43 = inttoptr i64 %39 to i16*
  br i1 %42, label %44, label %46

44:                                               ; preds = %29
  %45 = sub nsw i64 %34, %41
  tail call void @_ZNSt3__16vectorItNS_9allocatorItEEE8__appendEm(%"class.std::__1::vector.4"* %33, i64 %45) #12
  br label %50

46:                                               ; preds = %29
  %47 = icmp ugt i64 %41, %34
  br i1 %47, label %48, label %50

48:                                               ; preds = %46
  %49 = getelementptr inbounds i16, i16* %43, i64 %34
  store i16* %49, i16** %35, align 8
  br label %50

50:                                               ; preds = %44, %46, %48
  %51 = add nuw i64 %13, 1
  %52 = icmp ult i64 %51, %10
  br i1 %52, label %12, label %53

53:                                               ; preds = %50
  %54 = xor i32 %8, 2147483647
  br label %56

55:                                               ; preds = %56
  ret void

56:                                               ; preds = %56, %53
  %57 = phi i64 [ 0, %53 ], [ %79, %56 ]
  %58 = phi i32 [ 0, %53 ], [ %80, %56 ]
  %59 = lshr i64 %57, %6
  %60 = trunc i64 %57 to i32
  %61 = and i32 %54, %60
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %1, i64 %59
  %64 = bitcast %"struct.jxl::AliasTable::Entry"* %63 to i64*
  %65 = load i64, i64* %64, align 1, !alias.scope !13, !noalias !16
  %66 = and i64 %65, 255
  %67 = lshr i64 %65, 8
  %68 = and i64 %67, 255
  %69 = icmp ule i64 %66, %62
  %70 = lshr i64 %65, 32
  %71 = and i64 %70, 65535
  %72 = select i1 %69, i64 %71, i64 0
  %73 = select i1 %69, i64 %68, i64 %59
  %74 = add nuw nsw i64 %72, %62
  %75 = trunc i32 %58 to i16
  %76 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %4, i64 %73, i32 2, i32 0, i32 0
  %77 = load i16*, i16** %76, align 8
  %78 = getelementptr inbounds i16, i16* %77, i64 %74
  store i16 %75, i16* %78, align 2
  %79 = add nuw nsw i64 %57, 1
  %80 = add nuw nsw i32 %58, 1
  %81 = icmp eq i64 %79, 4096
  br i1 %81, label %55, label %56
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN3jxl12_GLOBAL__N_115NormalizeCountsEPiS1_iijS1_S1_(i32* nocapture, i32* nocapture, i32, i32, i32* nocapture, i32* nocapture) unnamed_addr #0 {
  %7 = alloca %"class.std::__1::vector.188", align 8
  %8 = icmp sgt i32 %2, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %6
  store i32 0, i32* %4, align 4
  br label %396

10:                                               ; preds = %6
  %11 = zext i32 %2 to i64
  br label %13

12:                                               ; preds = %35
  store i32 %38, i32* %4, align 4
  switch i32 %38, label %44 [
    i32 0, label %396
    i32 1, label %40
  ]

13:                                               ; preds = %35, %10
  %14 = phi i64 [ 0, %10 ], [ %36, %35 ]
  %15 = phi i64 [ 0, %10 ], [ %21, %35 ]
  %16 = phi i32 [ 0, %10 ], [ %38, %35 ]
  %17 = phi i32 [ 0, %10 ], [ %37, %35 ]
  %18 = getelementptr inbounds i32, i32* %0, i64 %14
  %19 = load i32, i32* %18, align 4
  %20 = sext i32 %19 to i64
  %21 = add i64 %15, %20
  %22 = icmp sgt i32 %19, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %13
  %24 = add nuw nsw i64 %14, 1
  br label %35

25:                                               ; preds = %13
  %26 = icmp slt i32 %16, 4
  br i1 %26, label %27, label %31

27:                                               ; preds = %25
  %28 = sext i32 %16 to i64
  %29 = getelementptr inbounds i32, i32* %5, i64 %28
  %30 = trunc i64 %14 to i32
  store i32 %30, i32* %29, align 4
  br label %31

31:                                               ; preds = %27, %25
  %32 = add nsw i32 %16, 1
  %33 = add nuw nsw i64 %14, 1
  %34 = trunc i64 %33 to i32
  br label %35

35:                                               ; preds = %23, %31
  %36 = phi i64 [ %24, %23 ], [ %33, %31 ]
  %37 = phi i32 [ %17, %23 ], [ %34, %31 ]
  %38 = phi i32 [ %16, %23 ], [ %32, %31 ]
  %39 = icmp eq i64 %36, %11
  br i1 %39, label %12, label %13

40:                                               ; preds = %12
  %41 = load i32, i32* %5, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i32, i32* %0, i64 %42
  store i32 4096, i32* %43, align 4
  br label %396

44:                                               ; preds = %12
  %45 = icmp sgt i32 %38, 4096
  br i1 %45, label %396, label %46

46:                                               ; preds = %44
  %47 = uitofp i64 %21 to float
  %48 = fdiv float 4.096000e+03, %47
  %49 = bitcast %"class.std::__1::vector.188"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %49) #12
  %50 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %7, i64 0, i32 0, i32 1
  %51 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %52 = sext i32 %37 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 0, i64 24, i1 false) #12
  %53 = icmp eq i32 %37, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %46
  %55 = bitcast float** %50 to i64*
  br label %106

56:                                               ; preds = %46
  %57 = icmp slt i32 %37, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = bitcast %"class.std::__1::vector.188"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %59) #13
  unreachable

60:                                               ; preds = %56
  %61 = shl nsw i64 %52, 2
  %62 = tail call i8* @_Znwm(i64 %61) #14
  %63 = bitcast i8* %62 to float*
  %64 = bitcast %"class.std::__1::vector.188"* %7 to i8**
  store i8* %62, i8** %64, align 8
  %65 = getelementptr inbounds float, float* %63, i64 %52
  store float* %65, float** %51, align 8
  %66 = bitcast float** %50 to i64*
  %67 = ptrtoint i8* %62 to i64
  %68 = add nsw i64 %52, -1
  %69 = getelementptr float, float* %63, i64 %68
  %70 = ptrtoint float* %69 to i64
  %71 = sub i64 4, %67
  %72 = add i64 %71, %70
  %73 = and i64 %72, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %62, i8 0, i64 %73, i1 false) #12
  %74 = ptrtoint float* %65 to i64
  store i64 %74, i64* %66, align 8
  %75 = bitcast %"class.std::__1::vector.188"* %7 to i64*
  %76 = bitcast i8* %62 to float*
  %77 = icmp eq float* %65, %76
  br i1 %77, label %81, label %227

78:                                               ; preds = %227
  %79 = inttoptr i64 %237 to float*
  %80 = icmp sgt i32 %37, 0
  br i1 %80, label %81, label %106

81:                                               ; preds = %60, %78
  %82 = phi float* [ %79, %78 ], [ %63, %60 ]
  %83 = zext i32 %37 to i64
  %84 = and i64 %83, 1
  %85 = icmp eq i32 %37, 1
  br i1 %85, label %88, label %86

86:                                               ; preds = %81
  %87 = sub nsw i64 %83, %84
  br label %118

88:                                               ; preds = %414, %81
  %89 = phi i32 [ undef, %81 ], [ %415, %414 ]
  %90 = phi float [ undef, %81 ], [ %416, %414 ]
  %91 = phi i64 [ 0, %81 ], [ %417, %414 ]
  %92 = phi float [ 0.000000e+00, %81 ], [ %416, %414 ]
  %93 = phi i32 [ 0, %81 ], [ %415, %414 ]
  %94 = icmp eq i64 %84, 0
  br i1 %94, label %106, label %95

95:                                               ; preds = %88
  %96 = getelementptr inbounds float, float* %82, i64 %91
  %97 = load float, float* %96, align 4
  %98 = fcmp ogt float %97, 0.000000e+00
  %99 = fcmp olt float %97, 1.000000e+00
  %100 = and i1 %98, %99
  br i1 %100, label %101, label %106

101:                                              ; preds = %95
  %102 = getelementptr inbounds i32, i32* %0, i64 %91
  store i32 1, i32* %102, align 4
  %103 = load float, float* %96, align 4
  %104 = fadd float %92, %103
  %105 = add nsw i32 %93, 1
  br label %106

106:                                              ; preds = %88, %95, %101, %54, %78
  %107 = phi i1 [ false, %78 ], [ false, %54 ], [ true, %101 ], [ true, %95 ], [ true, %88 ]
  %108 = phi float* [ %79, %78 ], [ null, %54 ], [ %82, %101 ], [ %82, %95 ], [ %82, %88 ]
  %109 = phi i64* [ %66, %78 ], [ %55, %54 ], [ %66, %101 ], [ %66, %95 ], [ %66, %88 ]
  %110 = phi i32 [ %37, %78 ], [ 0, %54 ], [ %37, %101 ], [ %37, %95 ], [ %37, %88 ]
  %111 = phi i32 [ 0, %78 ], [ 0, %54 ], [ %89, %88 ], [ %105, %101 ], [ %93, %95 ]
  %112 = phi float [ 0.000000e+00, %78 ], [ 0.000000e+00, %54 ], [ %90, %88 ], [ %104, %101 ], [ %92, %95 ]
  %113 = sub i32 4096, %111
  %114 = sitofp i32 %113 to float
  %115 = fsub float 4.096000e+03, %112
  %116 = fdiv float %114, %115
  %117 = fcmp ogt float %116, 0.000000e+00
  br i1 %117, label %145, label %142

118:                                              ; preds = %414, %86
  %119 = phi i64 [ 0, %86 ], [ %417, %414 ]
  %120 = phi float [ 0.000000e+00, %86 ], [ %416, %414 ]
  %121 = phi i32 [ 0, %86 ], [ %415, %414 ]
  %122 = phi i64 [ %87, %86 ], [ %418, %414 ]
  %123 = getelementptr inbounds float, float* %82, i64 %119
  %124 = load float, float* %123, align 4
  %125 = fcmp ogt float %124, 0.000000e+00
  %126 = fcmp olt float %124, 1.000000e+00
  %127 = and i1 %125, %126
  br i1 %127, label %128, label %133

128:                                              ; preds = %118
  %129 = getelementptr inbounds i32, i32* %0, i64 %119
  store i32 1, i32* %129, align 4
  %130 = load float, float* %123, align 4
  %131 = fadd float %120, %130
  %132 = add nsw i32 %121, 1
  br label %133

133:                                              ; preds = %128, %118
  %134 = phi i32 [ %132, %128 ], [ %121, %118 ]
  %135 = phi float [ %131, %128 ], [ %120, %118 ]
  %136 = or i64 %119, 1
  %137 = getelementptr inbounds float, float* %82, i64 %136
  %138 = load float, float* %137, align 4
  %139 = fcmp ogt float %138, 0.000000e+00
  %140 = fcmp olt float %138, 1.000000e+00
  %141 = and i1 %139, %140
  br i1 %141, label %409, label %414

142:                                              ; preds = %106
  %143 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 137, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.18, i64 0, i64 0)) #12
  %144 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

145:                                              ; preds = %106
  %146 = fcmp ugt float %116, 1.000000e+00
  br i1 %146, label %150, label %147

147:                                              ; preds = %145
  br i1 %107, label %148, label %218

148:                                              ; preds = %147
  %149 = zext i32 %110 to i64
  br label %157

150:                                              ; preds = %145
  %151 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 138, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19, i64 0, i64 0)) #12
  %152 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

153:                                              ; preds = %209
  %154 = icmp eq i32 %211, -1
  br i1 %154, label %215, label %155

155:                                              ; preds = %153
  %156 = sub i32 4096, %210
  br label %218

157:                                              ; preds = %209, %148
  %158 = phi i64 [ 0, %148 ], [ %213, %209 ]
  %159 = phi i32 [ -1, %148 ], [ %212, %209 ]
  %160 = phi i32 [ 0, %148 ], [ %211, %209 ]
  %161 = phi i32 [ %111, %148 ], [ %210, %209 ]
  %162 = getelementptr inbounds float, float* %108, i64 %158
  %163 = load float, float* %162, align 4
  %164 = fcmp ult float %163, 1.000000e+00
  br i1 %164, label %209, label %165

165:                                              ; preds = %157
  %166 = fmul float %116, %163
  %167 = fptosi float %166 to i32
  %168 = getelementptr inbounds i32, i32* %0, i64 %158
  %169 = icmp eq i32 %167, 0
  %170 = select i1 %169, i32 1, i32 %167
  %171 = icmp eq i32 %170, 4096
  %172 = select i1 %171, i32 4095, i32 %170
  %173 = tail call i32 @llvm.ctlz.i32(i32 %172, i1 true) #12, !range !3
  %174 = xor i32 %173, 31
  %175 = sub nsw i32 12, %174
  %176 = lshr i32 %175, 1
  %177 = sub nsw i32 %3, %176
  %178 = icmp slt i32 %177, %174
  %179 = select i1 %178, i32 %177, i32 %174
  %180 = icmp sgt i32 %179, 0
  %181 = select i1 %180, i32 %179, i32 0
  %182 = sub nsw i32 %174, %181
  %183 = icmp slt i32 %182, 0
  %184 = shl i32 1, %182
  %185 = select i1 %183, i32 1, i32 %184
  %186 = sub i32 0, %185
  %187 = and i32 %172, %186
  store i32 %187, i32* %168, align 4
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %198, label %189

189:                                              ; preds = %165
  %190 = load float, float* %162, align 4
  %191 = sdiv i32 %185, 2
  %192 = add nsw i32 %187, %191
  %193 = sitofp i32 %192 to float
  %194 = fcmp ogt float %190, %193
  %195 = add nsw i32 %187, %185
  %196 = icmp slt i32 %195, 4096
  %197 = and i1 %196, %194
  br i1 %197, label %198, label %200

198:                                              ; preds = %165, %189
  %199 = phi i32 [ %195, %189 ], [ %185, %165 ]
  store i32 %199, i32* %168, align 4
  br label %200

200:                                              ; preds = %198, %189
  %201 = phi i32 [ %199, %198 ], [ %187, %189 ]
  %202 = add nsw i32 %201, %161
  %203 = tail call i32 @llvm.ctlz.i32(i32 %201, i1 true) #12, !range !3
  %204 = xor i32 %203, 31
  %205 = icmp slt i32 %159, %204
  %206 = trunc i64 %158 to i32
  %207 = select i1 %205, i32 %206, i32 %160
  %208 = select i1 %205, i32 %204, i32 %159
  br label %209

209:                                              ; preds = %200, %157
  %210 = phi i32 [ %202, %200 ], [ %161, %157 ]
  %211 = phi i32 [ %207, %200 ], [ %160, %157 ]
  %212 = phi i32 [ %208, %200 ], [ %159, %157 ]
  %213 = add nuw nsw i64 %158, 1
  %214 = icmp eq i64 %213, %149
  br i1 %214, label %153, label %157

215:                                              ; preds = %153
  %216 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 169, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.20, i64 0, i64 0)) #12
  %217 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

218:                                              ; preds = %155, %147
  %219 = phi i32 [ %156, %155 ], [ %113, %147 ]
  %220 = phi i32 [ %211, %155 ], [ 0, %147 ]
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds i32, i32* %0, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = add i32 %219, %223
  store i32 %224, i32* %222, align 4
  store i32 %220, i32* %1, align 4
  %225 = load i32, i32* %222, align 4
  %226 = icmp sgt i32 %225, 0
  br i1 %226, label %388, label %242

227:                                              ; preds = %60, %227
  %228 = phi float* [ %241, %227 ], [ %63, %60 ]
  %229 = phi i64 [ %235, %227 ], [ 0, %60 ]
  %230 = getelementptr inbounds i32, i32* %0, i64 %229
  %231 = load i32, i32* %230, align 4
  %232 = sitofp i32 %231 to float
  %233 = fmul float %48, %232
  %234 = getelementptr inbounds float, float* %228, i64 %229
  store float %233, float* %234, align 4
  %235 = add nuw i64 %229, 1
  %236 = load i64, i64* %66, align 8
  %237 = load i64, i64* %75, align 8
  %238 = sub i64 %236, %237
  %239 = ashr exact i64 %238, 2
  %240 = icmp ult i64 %235, %239
  %241 = inttoptr i64 %237 to float*
  br i1 %240, label %227, label %78

242:                                              ; preds = %218
  br i1 %107, label %243, label %267

243:                                              ; preds = %242
  %244 = zext i32 %110 to i64
  %245 = and i64 %244, 1
  %246 = icmp eq i32 %110, 1
  br i1 %246, label %249, label %247

247:                                              ; preds = %243
  %248 = sub nsw i64 %244, %245
  br label %275

249:                                              ; preds = %403, %243
  %250 = phi i32 [ undef, %243 ], [ %404, %403 ]
  %251 = phi float [ undef, %243 ], [ %405, %403 ]
  %252 = phi i64 [ 0, %243 ], [ %406, %403 ]
  %253 = phi float [ 0.000000e+00, %243 ], [ %405, %403 ]
  %254 = phi i32 [ 0, %243 ], [ %404, %403 ]
  %255 = icmp eq i64 %245, 0
  br i1 %255, label %267, label %256

256:                                              ; preds = %249
  %257 = getelementptr inbounds float, float* %108, i64 %252
  %258 = load float, float* %257, align 4
  %259 = fcmp ogt float %258, 0.000000e+00
  %260 = fcmp olt float %258, 1.000000e+00
  %261 = and i1 %259, %260
  br i1 %261, label %262, label %267

262:                                              ; preds = %256
  %263 = getelementptr inbounds i32, i32* %0, i64 %252
  store i32 1, i32* %263, align 4
  %264 = load float, float* %257, align 4
  %265 = fadd float %253, %264
  %266 = add nsw i32 %254, 1
  br label %267

267:                                              ; preds = %249, %256, %262, %242
  %268 = phi i32 [ 0, %242 ], [ %250, %249 ], [ %266, %262 ], [ %254, %256 ]
  %269 = phi float [ 0.000000e+00, %242 ], [ %251, %249 ], [ %265, %262 ], [ %253, %256 ]
  %270 = sub i32 4096, %268
  %271 = sitofp i32 %270 to float
  %272 = fsub float 4.096000e+03, %269
  %273 = fdiv float %271, %272
  %274 = fcmp ogt float %273, 0.000000e+00
  br i1 %274, label %302, label %299

275:                                              ; preds = %403, %247
  %276 = phi i64 [ 0, %247 ], [ %406, %403 ]
  %277 = phi float [ 0.000000e+00, %247 ], [ %405, %403 ]
  %278 = phi i32 [ 0, %247 ], [ %404, %403 ]
  %279 = phi i64 [ %248, %247 ], [ %407, %403 ]
  %280 = getelementptr inbounds float, float* %108, i64 %276
  %281 = load float, float* %280, align 4
  %282 = fcmp ogt float %281, 0.000000e+00
  %283 = fcmp olt float %281, 1.000000e+00
  %284 = and i1 %282, %283
  br i1 %284, label %285, label %290

285:                                              ; preds = %275
  %286 = getelementptr inbounds i32, i32* %0, i64 %276
  store i32 1, i32* %286, align 4
  %287 = load float, float* %280, align 4
  %288 = fadd float %277, %287
  %289 = add nsw i32 %278, 1
  br label %290

290:                                              ; preds = %285, %275
  %291 = phi i32 [ %289, %285 ], [ %278, %275 ]
  %292 = phi float [ %288, %285 ], [ %277, %275 ]
  %293 = or i64 %276, 1
  %294 = getelementptr inbounds float, float* %108, i64 %293
  %295 = load float, float* %294, align 4
  %296 = fcmp ogt float %295, 0.000000e+00
  %297 = fcmp olt float %295, 1.000000e+00
  %298 = and i1 %296, %297
  br i1 %298, label %398, label %403

299:                                              ; preds = %267
  %300 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 137, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.18, i64 0, i64 0)) #12
  %301 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

302:                                              ; preds = %267
  %303 = fcmp ugt float %273, 1.000000e+00
  br i1 %303, label %307, label %304

304:                                              ; preds = %302
  br i1 %107, label %305, label %379

305:                                              ; preds = %304
  %306 = zext i32 %110 to i64
  br label %314

307:                                              ; preds = %302
  %308 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 138, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19, i64 0, i64 0)) #12
  %309 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

310:                                              ; preds = %369
  %311 = icmp eq i32 %372, -1
  br i1 %311, label %376, label %312

312:                                              ; preds = %310
  %313 = sub i32 4096, %370
  br label %379

314:                                              ; preds = %369, %305
  %315 = phi i64 [ 0, %305 ], [ %374, %369 ]
  %316 = phi i32 [ -1, %305 ], [ %373, %369 ]
  %317 = phi i32 [ 0, %305 ], [ %372, %369 ]
  %318 = phi float [ %269, %305 ], [ %371, %369 ]
  %319 = phi i32 [ %268, %305 ], [ %370, %369 ]
  %320 = getelementptr inbounds float, float* %108, i64 %315
  %321 = load float, float* %320, align 4
  %322 = fcmp ult float %321, 1.000000e+00
  br i1 %322, label %369, label %323

323:                                              ; preds = %314
  %324 = fadd float %318, %321
  %325 = fmul float %273, %321
  %326 = fptosi float %325 to i32
  %327 = getelementptr inbounds i32, i32* %0, i64 %315
  %328 = icmp eq i32 %326, 0
  %329 = select i1 %328, i32 1, i32 %326
  %330 = icmp eq i32 %329, 4096
  %331 = select i1 %330, i32 4095, i32 %329
  %332 = tail call i32 @llvm.ctlz.i32(i32 %331, i1 true) #12, !range !3
  %333 = xor i32 %332, 31
  %334 = sub nsw i32 12, %333
  %335 = lshr i32 %334, 1
  %336 = sub nsw i32 %3, %335
  %337 = icmp slt i32 %336, %333
  %338 = select i1 %337, i32 %336, i32 %333
  %339 = icmp sgt i32 %338, 0
  %340 = select i1 %339, i32 %338, i32 0
  %341 = sub nsw i32 %333, %340
  %342 = icmp slt i32 %341, 0
  %343 = shl i32 1, %341
  %344 = select i1 %342, i32 1, i32 %343
  %345 = sub i32 0, %344
  %346 = and i32 %331, %345
  store i32 %346, i32* %327, align 4
  %347 = icmp eq i32 %346, 0
  br i1 %347, label %358, label %348

348:                                              ; preds = %323
  %349 = sitofp i32 %319 to float
  %350 = fsub float %324, %349
  %351 = sdiv i32 %344, 2
  %352 = add nsw i32 %346, %351
  %353 = sitofp i32 %352 to float
  %354 = fcmp ogt float %350, %353
  %355 = add nsw i32 %346, %344
  %356 = icmp slt i32 %355, 4096
  %357 = and i1 %356, %354
  br i1 %357, label %358, label %360

358:                                              ; preds = %323, %348
  %359 = phi i32 [ %355, %348 ], [ %344, %323 ]
  store i32 %359, i32* %327, align 4
  br label %360

360:                                              ; preds = %358, %348
  %361 = phi i32 [ %359, %358 ], [ %346, %348 ]
  %362 = add nsw i32 %361, %319
  %363 = tail call i32 @llvm.ctlz.i32(i32 %361, i1 true) #12, !range !3
  %364 = xor i32 %363, 31
  %365 = icmp slt i32 %316, %364
  %366 = trunc i64 %315 to i32
  %367 = select i1 %365, i32 %366, i32 %317
  %368 = select i1 %365, i32 %364, i32 %316
  br label %369

369:                                              ; preds = %360, %314
  %370 = phi i32 [ %362, %360 ], [ %319, %314 ]
  %371 = phi float [ %324, %360 ], [ %318, %314 ]
  %372 = phi i32 [ %367, %360 ], [ %317, %314 ]
  %373 = phi i32 [ %368, %360 ], [ %316, %314 ]
  %374 = add nuw nsw i64 %315, 1
  %375 = icmp eq i64 %374, %306
  br i1 %375, label %310, label %314

376:                                              ; preds = %310
  %377 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 169, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.20, i64 0, i64 0)) #12
  %378 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

379:                                              ; preds = %312, %304
  %380 = phi i32 [ %313, %312 ], [ %270, %304 ]
  %381 = phi i32 [ %372, %312 ], [ 0, %304 ]
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds i32, i32* %0, i64 %382
  %384 = load i32, i32* %383, align 4
  %385 = add i32 %380, %384
  store i32 %385, i32* %383, align 4
  store i32 %381, i32* %1, align 4
  %386 = load i32, i32* %383, align 4
  %387 = icmp sgt i32 %386, 0
  br i1 %387, label %388, label %389

388:                                              ; preds = %379, %218
  br label %389

389:                                              ; preds = %379, %388
  %390 = phi i32 [ 0, %388 ], [ 1, %379 ]
  %391 = icmp eq float* %108, null
  br i1 %391, label %395, label %392

392:                                              ; preds = %389
  %393 = ptrtoint float* %108 to i64
  store i64 %393, i64* %109, align 8
  %394 = bitcast float* %108 to i8*
  tail call void @_ZdlPv(i8* %394) #14
  br label %395

395:                                              ; preds = %389, %392
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %49) #12
  br label %396

396:                                              ; preds = %9, %44, %12, %395, %40
  %397 = phi i32 [ %390, %395 ], [ 0, %40 ], [ %38, %12 ], [ 1, %44 ], [ 0, %9 ]
  ret i32 %397

398:                                              ; preds = %290
  %399 = getelementptr inbounds i32, i32* %0, i64 %293
  store i32 1, i32* %399, align 4
  %400 = load float, float* %294, align 4
  %401 = fadd float %292, %400
  %402 = add nsw i32 %291, 1
  br label %403

403:                                              ; preds = %398, %290
  %404 = phi i32 [ %402, %398 ], [ %291, %290 ]
  %405 = phi float [ %401, %398 ], [ %292, %290 ]
  %406 = add nuw nsw i64 %276, 2
  %407 = add i64 %279, -2
  %408 = icmp eq i64 %407, 0
  br i1 %408, label %249, label %275

409:                                              ; preds = %133
  %410 = getelementptr inbounds i32, i32* %0, i64 %136
  store i32 1, i32* %410, align 4
  %411 = load float, float* %137, align 4
  %412 = fadd float %135, %411
  %413 = add nsw i32 %134, 1
  br label %414

414:                                              ; preds = %409, %133
  %415 = phi i32 [ %413, %409 ], [ %134, %133 ]
  %416 = phi float [ %412, %409 ], [ %135, %133 ]
  %417 = add nuw nsw i64 %119, 2
  %418 = add i64 %122, -2
  %419 = icmp eq i64 %418, 0
  br i1 %419, label %88, label %118
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3jxl17ANSPopulationCostEPKim(i32*, i64) local_unnamed_addr #0 {
  %3 = uitofp i64 %1 to float
  %4 = bitcast float %3 to i32
  %5 = add i32 %4, -1059760811
  %6 = lshr i32 %5, 23
  %7 = ashr i32 %5, 31
  %8 = shl nsw i32 %7, 8
  %9 = or i32 %8, %6
  %10 = shl i32 %9, 23
  %11 = sub i32 %4, %10
  %12 = bitcast i32 %11 to float
  %13 = sitofp i32 %9 to float
  %14 = fadd float %12, -1.000000e+00
  fence acq_rel
  %15 = insertelement <2 x float> undef, float %14, i32 0
  %16 = shufflevector <2 x float> %15, <2 x float> undef, <2 x i32> zeroinitializer
  %17 = fmul <2 x float> %16, <float 0x3FE7C238E0000000, float 0x3FC648B180000000>
  %18 = fadd <2 x float> %17, <float 0x3FF6DC0560000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %19 = fmul <2 x float> %16, %18
  %20 = fadd <2 x float> %19, <float 0xBEBF0B5600000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %21 = extractelement <2 x float> %20, i32 0
  %22 = extractelement <2 x float> %20, i32 1
  %23 = fdiv float %21, %22
  %24 = fadd float %23, %13
  %25 = fcmp olt float %24, 0.000000e+00
  %26 = select i1 %25, float 0.000000e+00, float %24
  %27 = icmp eq i64 %1, 0
  br i1 %27, label %129, label %28

28:                                               ; preds = %2
  %29 = icmp ult i64 %1, 8
  br i1 %29, label %30, label %33

30:                                               ; preds = %108, %28
  %31 = phi i64 [ 0, %28 ], [ %34, %108 ]
  %32 = phi i32 [ 0, %28 ], [ %116, %108 ]
  br label %121

33:                                               ; preds = %28
  %34 = and i64 %1, -8
  %35 = add i64 %34, -8
  %36 = lshr exact i64 %35, 3
  %37 = add nuw nsw i64 %36, 1
  %38 = and i64 %37, 3
  %39 = icmp ult i64 %35, 24
  br i1 %39, label %85, label %40

40:                                               ; preds = %33
  %41 = sub nsw i64 %37, %38
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i64 [ 0, %40 ], [ %82, %42 ]
  %44 = phi <4 x i32> [ zeroinitializer, %40 ], [ %80, %42 ]
  %45 = phi <4 x i32> [ zeroinitializer, %40 ], [ %81, %42 ]
  %46 = phi i64 [ %41, %40 ], [ %83, %42 ]
  %47 = getelementptr inbounds i32, i32* %0, i64 %43
  %48 = bitcast i32* %47 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 4
  %50 = getelementptr inbounds i32, i32* %47, i64 4
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 4
  %53 = add nsw <4 x i32> %49, %44
  %54 = add nsw <4 x i32> %52, %45
  %55 = or i64 %43, 8
  %56 = getelementptr inbounds i32, i32* %0, i64 %55
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4
  %59 = getelementptr inbounds i32, i32* %56, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4
  %62 = add nsw <4 x i32> %58, %53
  %63 = add nsw <4 x i32> %61, %54
  %64 = or i64 %43, 16
  %65 = getelementptr inbounds i32, i32* %0, i64 %64
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4
  %68 = getelementptr inbounds i32, i32* %65, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4
  %71 = add nsw <4 x i32> %67, %62
  %72 = add nsw <4 x i32> %70, %63
  %73 = or i64 %43, 24
  %74 = getelementptr inbounds i32, i32* %0, i64 %73
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 4
  %77 = getelementptr inbounds i32, i32* %74, i64 4
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4
  %80 = add nsw <4 x i32> %76, %71
  %81 = add nsw <4 x i32> %79, %72
  %82 = add i64 %43, 32
  %83 = add i64 %46, -4
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %42, !llvm.loop !18

85:                                               ; preds = %42, %33
  %86 = phi <4 x i32> [ undef, %33 ], [ %80, %42 ]
  %87 = phi <4 x i32> [ undef, %33 ], [ %81, %42 ]
  %88 = phi i64 [ 0, %33 ], [ %82, %42 ]
  %89 = phi <4 x i32> [ zeroinitializer, %33 ], [ %80, %42 ]
  %90 = phi <4 x i32> [ zeroinitializer, %33 ], [ %81, %42 ]
  %91 = icmp eq i64 %38, 0
  br i1 %91, label %108, label %92

92:                                               ; preds = %85, %92
  %93 = phi i64 [ %105, %92 ], [ %88, %85 ]
  %94 = phi <4 x i32> [ %103, %92 ], [ %89, %85 ]
  %95 = phi <4 x i32> [ %104, %92 ], [ %90, %85 ]
  %96 = phi i64 [ %106, %92 ], [ %38, %85 ]
  %97 = getelementptr inbounds i32, i32* %0, i64 %93
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 4
  %100 = getelementptr inbounds i32, i32* %97, i64 4
  %101 = bitcast i32* %100 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 4
  %103 = add nsw <4 x i32> %99, %94
  %104 = add nsw <4 x i32> %102, %95
  %105 = add i64 %93, 8
  %106 = add i64 %96, -1
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %92, !llvm.loop !19

108:                                              ; preds = %92, %85
  %109 = phi <4 x i32> [ %86, %85 ], [ %103, %92 ]
  %110 = phi <4 x i32> [ %87, %85 ], [ %104, %92 ]
  %111 = add <4 x i32> %110, %109
  %112 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %113 = add <4 x i32> %111, %112
  %114 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %115 = add <4 x i32> %113, %114
  %116 = extractelement <4 x i32> %115, i32 0
  %117 = icmp eq i64 %34, %1
  br i1 %117, label %118, label %30

118:                                              ; preds = %121, %108
  %119 = phi i32 [ %116, %108 ], [ %126, %121 ]
  %120 = sitofp i32 %119 to float
  br label %129

121:                                              ; preds = %30, %121
  %122 = phi i64 [ %127, %121 ], [ %31, %30 ]
  %123 = phi i32 [ %126, %121 ], [ %32, %30 ]
  %124 = getelementptr inbounds i32, i32* %0, i64 %122
  %125 = load i32, i32* %124, align 4
  %126 = add nsw i32 %125, %123
  %127 = add nuw i64 %122, 1
  %128 = icmp eq i64 %127, %1
  br i1 %128, label %118, label %121, !llvm.loop !20

129:                                              ; preds = %2, %118
  %130 = phi float [ 0.000000e+00, %2 ], [ %120, %118 ]
  %131 = fmul float %26, %130
  %132 = fadd float %131, 1.400000e+01
  %133 = tail call fastcc float @_ZN3jxl12_GLOBAL__N_123ComputeHistoAndDataCostEPKimj(i32* %0, i64 %1, i32 1) #12
  %134 = fcmp olt float %133, %132
  br i1 %134, label %135, label %138

135:                                              ; preds = %129
  %136 = tail call fastcc float @_ZN3jxl12_GLOBAL__N_123ComputeHistoAndDataCostEPKimj(i32* %0, i64 %1, i32 3) #12
  %137 = fcmp olt float %136, %133
  br i1 %137, label %140, label %138

138:                                              ; preds = %155, %152, %149, %146, %143, %140, %135, %129
  %139 = phi float [ %132, %129 ], [ %133, %135 ], [ %136, %140 ], [ %141, %143 ], [ %144, %146 ], [ %147, %149 ], [ %150, %152 ], [ %153, %155 ]
  ret float %139

140:                                              ; preds = %135
  %141 = tail call fastcc float @_ZN3jxl12_GLOBAL__N_123ComputeHistoAndDataCostEPKimj(i32* %0, i64 %1, i32 5) #12
  %142 = fcmp olt float %141, %136
  br i1 %142, label %143, label %138

143:                                              ; preds = %140
  %144 = tail call fastcc float @_ZN3jxl12_GLOBAL__N_123ComputeHistoAndDataCostEPKimj(i32* %0, i64 %1, i32 7) #12
  %145 = fcmp olt float %144, %141
  br i1 %145, label %146, label %138

146:                                              ; preds = %143
  %147 = tail call fastcc float @_ZN3jxl12_GLOBAL__N_123ComputeHistoAndDataCostEPKimj(i32* %0, i64 %1, i32 9) #12
  %148 = fcmp olt float %147, %144
  br i1 %148, label %149, label %138

149:                                              ; preds = %146
  %150 = tail call fastcc float @_ZN3jxl12_GLOBAL__N_123ComputeHistoAndDataCostEPKimj(i32* %0, i64 %1, i32 11) #12
  %151 = fcmp olt float %150, %147
  br i1 %151, label %152, label %138

152:                                              ; preds = %149
  %153 = tail call fastcc float @_ZN3jxl12_GLOBAL__N_123ComputeHistoAndDataCostEPKimj(i32* %0, i64 %1, i32 13) #12
  %154 = fcmp olt float %153, %150
  br i1 %154, label %155, label %138

155:                                              ; preds = %152
  br label %138
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* nocapture readonly dereferenceable(56), i64, %"class.std::__1::vector.142"* dereferenceable(24), %"struct.jxl::EntropyEncodingData"*, %"class.std::__1::vector.18"*, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #0 {
  %9 = alloca <4 x i32>, align 16
  %10 = bitcast <4 x i32>* %9 to %"struct.jxl::HybridUintConfig"*
  %11 = alloca %"class.std::__1::vector", align 8
  %12 = alloca [28 x %"struct.jxl::HybridUintConfig"], align 16
  %13 = alloca [4 x %"struct.jxl::HybridUintConfig"], align 16
  %14 = alloca %"class.std::__1::vector.188", align 8
  %15 = alloca %"class.std::__1::vector.11", align 8
  %16 = alloca %"class.std::__1::vector.170", align 8
  %17 = alloca %"class.std::__1::vector.11", align 8
  %18 = alloca %"struct.jxl::HistogramParams", align 8
  %19 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %20 = alloca %"class.jxl::(anonymous namespace)::SymbolCostEstimator", align 8
  %21 = alloca %"class.std::__1::vector.188", align 8
  %22 = alloca i32, align 4
  %23 = alloca %"class.std::__1::vector.142", align 8
  %24 = alloca %"class.jxl::(anonymous namespace)::SymbolCostEstimator", align 8
  %25 = alloca %"class.std::__1::vector.188", align 8
  %26 = alloca %"class.std::__1::vector.11", align 8
  %27 = alloca %"struct.jxl::(anonymous namespace)::HashChain", align 8
  %28 = alloca %"class.std::__1::vector.239", align 8
  %29 = alloca %"class.std::__1::vector.142", align 16
  %30 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca %"class.jxl::(anonymous namespace)::HistogramBuilder", align 8
  %34 = alloca <4 x i32>, align 16
  %35 = bitcast <4 x i32>* %34 to %"struct.jxl::HybridUintConfig"*
  %36 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3
  %37 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3, i32 5
  store i64 %1, i64* %37, align 8
  %38 = bitcast %"class.std::__1::vector.142"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %38) #12
  %39 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %29, i64 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %29, i64 0, i32 0, i32 1
  %41 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %29, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 0, i64 24, i1 false) #12
  %42 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3, i32 1
  store i8 0, i8* %42, align 8
  %43 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 6
  %44 = load i8, i8* %43, align 8, !range !21
  %45 = icmp eq i8 %44, 0
  %46 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3, i32 2
  %47 = select i1 %45, i32 224, i32 512
  store i32 %47, i32* %46, align 4
  %48 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 2
  %49 = load i32, i32* %48, align 8
  switch i32 %49, label %1687 [
    i32 0, label %1690
    i32 1, label %50
    i32 2, label %646
    i32 3, label %647
  ]

50:                                               ; preds = %8
  %51 = bitcast %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %51) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 56, i1 false) #12
  %52 = load i8, i8* %43, align 8, !range !21
  %53 = icmp ne i8 %52, 0
  call fastcc void @_ZN3jxl12_GLOBAL__N_119SymbolCostEstimatorC2EmbRKNSt3__16vectorINS3_INS_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS_10LZ77ParamsE(%"class.jxl::(anonymous namespace)::SymbolCostEstimator"* nonnull %20, i64 %1, i1 zeroext %53, %"class.std::__1::vector.142"* dereferenceable(24) %2, %"struct.jxl::LZ77Params"* dereferenceable(48) %36) #12
  %54 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %2, i64 0, i32 0, i32 1
  %55 = bitcast %"class.std::__1::vector.144"** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast %"class.std::__1::vector.142"* %2 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %56, %58
  %60 = sdiv exact i64 %59, 24
  %61 = bitcast %"class.std::__1::vector.144"** %40 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = bitcast %"class.std::__1::vector.142"* %29 to i64*
  %64 = load i64, i64* %63, align 16
  %65 = sub i64 %62, %64
  %66 = sdiv exact i64 %65, 24
  %67 = icmp ugt i64 %60, %66
  %68 = inttoptr i64 %64 to %"class.std::__1::vector.144"*
  %69 = inttoptr i64 %62 to %"class.std::__1::vector.144"*
  br i1 %67, label %70, label %72

70:                                               ; preds = %50
  %71 = sub nsw i64 %60, %66
  call void @_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.142"* nonnull %29, i64 %71) #12
  br label %91

72:                                               ; preds = %50
  %73 = icmp ult i64 %60, %66
  br i1 %73, label %74, label %91

74:                                               ; preds = %72
  %75 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %68, i64 %60
  %76 = icmp eq %"class.std::__1::vector.144"* %75, %69
  br i1 %76, label %90, label %77

77:                                               ; preds = %74, %88
  %78 = phi %"class.std::__1::vector.144"* [ %79, %88 ], [ %69, %74 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %78, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %79, i64 0, i32 0, i32 0
  %81 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %80, align 8
  %82 = icmp eq %"struct.jxl::Token"* %81, null
  br i1 %82, label %88, label %83

83:                                               ; preds = %77
  %84 = ptrtoint %"struct.jxl::Token"* %81 to i64
  %85 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast %"struct.jxl::Token"** %85 to i64*
  store i64 %84, i64* %86, align 8
  %87 = bitcast %"struct.jxl::Token"* %81 to i8*
  call void @_ZdlPv(i8* %87) #14
  br label %88

88:                                               ; preds = %83, %77
  %89 = icmp eq %"class.std::__1::vector.144"* %79, %75
  br i1 %89, label %90, label %77

90:                                               ; preds = %88, %74
  store %"class.std::__1::vector.144"* %75, %"class.std::__1::vector.144"** %40, align 8
  br label %91

91:                                               ; preds = %90, %72, %70
  %92 = bitcast %"class.std::__1::vector.188"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %92) #12
  %93 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %21, i64 0, i32 0, i32 0
  %94 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %21, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %92, i8 0, i64 24, i1 false) #12
  %95 = load i64, i64* %55, align 8
  %96 = load i64, i64* %57, align 8
  %97 = icmp eq i64 %95, %96
  br i1 %97, label %112, label %98

98:                                               ; preds = %91
  %99 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 4
  %100 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 4, i32 0, i32 1
  %101 = bitcast i64** %100 to i64*
  %102 = bitcast %"class.std::__1::vector.135"* %99 to i64*
  %103 = bitcast float** %94 to i64*
  %104 = bitcast %"class.std::__1::vector.188"* %21 to i64*
  %105 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %20, i64 0, i32 0
  %106 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %20, i64 0, i32 1, i32 0, i32 0
  %107 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3, i32 3
  br label %117

108:                                              ; preds = %257
  %109 = uitofp i64 %144 to double
  %110 = fmul double %109, 2.000000e-01
  %111 = fadd double %110, 1.600000e+01
  br label %112

112:                                              ; preds = %108, %91
  %113 = phi float [ 0.000000e+00, %91 ], [ %258, %108 ]
  %114 = phi double [ 1.600000e+01, %91 ], [ %111, %108 ]
  %115 = fpext float %113 to double
  %116 = fcmp olt double %114, %115
  br i1 %116, label %619, label %620

117:                                              ; preds = %257, %98
  %118 = phi i64 [ %96, %98 ], [ %261, %257 ]
  %119 = phi i64 [ 0, %98 ], [ %259, %257 ]
  %120 = phi i64 [ 0, %98 ], [ %144, %257 ]
  %121 = phi float [ 0.000000e+00, %98 ], [ %258, %257 ]
  %122 = inttoptr i64 %118 to %"class.std::__1::vector.144"*
  %123 = load i64, i64* %101, align 8
  %124 = load i64, i64* %102, align 8
  %125 = sub i64 %123, %124
  %126 = ashr exact i64 %125, 3
  %127 = icmp ugt i64 %126, %119
  br i1 %127, label %128, label %132

128:                                              ; preds = %117
  %129 = inttoptr i64 %124 to i64*
  %130 = getelementptr inbounds i64, i64* %129, i64 %119
  %131 = load i64, i64* %130, align 8
  br label %132

132:                                              ; preds = %128, %117
  %133 = phi i64 [ %131, %128 ], [ 0, %117 ]
  %134 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %122, i64 %119
  %135 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %39, align 16
  %136 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %135, i64 %119
  %137 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %122, i64 %119, i32 0, i32 1
  %138 = bitcast %"struct.jxl::Token"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = bitcast %"class.std::__1::vector.144"* %134 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = sub i64 %139, %141
  %143 = ashr exact i64 %142, 3
  %144 = add i64 %143, %120
  %145 = add nsw i64 %143, 1
  %146 = load i64, i64* %103, align 8
  %147 = load i64, i64* %104, align 8
  %148 = sub i64 %146, %147
  %149 = ashr exact i64 %148, 2
  %150 = icmp ugt i64 %145, %149
  %151 = inttoptr i64 %147 to float*
  br i1 %150, label %152, label %154

152:                                              ; preds = %132
  %153 = sub nsw i64 %145, %149
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.188"* nonnull %21, i64 %153) #12
  br label %158

154:                                              ; preds = %132
  %155 = icmp ult i64 %145, %149
  br i1 %155, label %156, label %158

156:                                              ; preds = %154
  %157 = getelementptr inbounds float, float* %151, i64 %145
  store float* %157, float** %94, align 8
  br label %158

158:                                              ; preds = %156, %154, %152
  %159 = load i64, i64* %138, align 8
  %160 = load i64, i64* %140, align 8
  %161 = icmp eq i64 %159, %160
  br i1 %161, label %162, label %214

162:                                              ; preds = %158
  %163 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %135, i64 %119, i32 0, i32 2, i32 0, i32 0
  %164 = bitcast %"struct.jxl::Token"** %163 to i64*
  %165 = bitcast %"class.std::__1::vector.144"* %136 to i64*
  br label %198

166:                                              ; preds = %230
  %167 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %135, i64 %119, i32 0, i32 2, i32 0, i32 0
  %168 = bitcast %"struct.jxl::Token"** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = bitcast %"class.std::__1::vector.144"* %136 to i64*
  %171 = load i64, i64* %170, align 8
  %172 = sub i64 %169, %171
  %173 = ashr exact i64 %172, 3
  %174 = icmp ult i64 %173, %255
  br i1 %174, label %175, label %198

175:                                              ; preds = %166
  %176 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %135, i64 %119, i32 0, i32 1
  %177 = bitcast %"struct.jxl::Token"** %176 to i64*
  %178 = icmp ugt i64 %255, 2305843009213693951
  br i1 %178, label %179, label %180

179:                                              ; preds = %175
  call void @abort() #13
  unreachable

180:                                              ; preds = %175
  %181 = load i64, i64* %177, align 8
  %182 = sub i64 %181, %171
  %183 = ashr exact i64 %182, 3
  %184 = call i8* @_Znwm(i64 %254) #14
  %185 = bitcast i8* %184 to %"struct.jxl::Token"*
  %186 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %185, i64 %183
  %187 = ptrtoint %"struct.jxl::Token"* %186 to i64
  %188 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %185, i64 %255
  %189 = ptrtoint %"struct.jxl::Token"* %188 to i64
  %190 = ptrtoint i8* %184 to i64
  %191 = icmp sgt i64 %182, 0
  br i1 %191, label %192, label %194

192:                                              ; preds = %180
  %193 = inttoptr i64 %171 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %184, i8* align 4 %193, i64 %182, i1 false) #12
  br label %194

194:                                              ; preds = %192, %180
  store i64 %190, i64* %170, align 8
  store i64 %187, i64* %177, align 8
  store i64 %189, i64* %168, align 8
  %195 = icmp eq i64 %171, 0
  br i1 %195, label %198, label %196

196:                                              ; preds = %194
  %197 = inttoptr i64 %171 to i8*
  call void @_ZdlPv(i8* %197) #14
  br label %198

198:                                              ; preds = %196, %194, %166, %162
  %199 = phi i64* [ %165, %162 ], [ %170, %196 ], [ %170, %194 ], [ %170, %166 ]
  %200 = phi i64* [ %164, %162 ], [ %168, %196 ], [ %168, %194 ], [ %168, %166 ]
  %201 = phi %"struct.jxl::Token"** [ %163, %162 ], [ %167, %196 ], [ %167, %194 ], [ %167, %166 ]
  %202 = load i64, i64* %138, align 8
  %203 = load i64, i64* %140, align 8
  %204 = sub i64 %202, %203
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %257, label %206

206:                                              ; preds = %198
  %207 = ashr exact i64 %204, 3
  %208 = icmp ne i64 %133, 0
  %209 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %134, i64 0, i32 0, i32 0
  %210 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %135, i64 %119, i32 0, i32 1
  %211 = bitcast %"struct.jxl::Token"** %210 to i64*
  %212 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %136, i64 0, i32 0, i32 0
  %213 = zext i1 %208 to i32
  br label %265

214:                                              ; preds = %158, %230
  %215 = phi i64 [ %253, %230 ], [ %160, %158 ]
  %216 = phi i64 [ %250, %230 ], [ 0, %158 ]
  %217 = inttoptr i64 %215 to %"struct.jxl::Token"*
  %218 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %217, i64 %216, i32 1
  %219 = load i32, i32* %218, align 4
  %220 = icmp ult i32 %219, 16
  br i1 %220, label %230, label %221

221:                                              ; preds = %214
  %222 = call i32 @llvm.ctlz.i32(i32 %219, i1 true) #12, !range !3
  %223 = xor i32 %222, 31
  %224 = shl i32 1, %223
  %225 = sub i32 %219, %224
  %226 = shl nuw nsw i32 %223, 2
  %227 = add nsw i32 %223, -2
  %228 = lshr i32 %225, %227
  %229 = add i32 %228, %226
  br label %230

230:                                              ; preds = %221, %214
  %231 = phi i32 [ %229, %221 ], [ %219, %214 ]
  %232 = phi i32 [ %227, %221 ], [ 0, %214 ]
  %233 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %217, i64 %216, i32 0
  %234 = load i32, i32* %233, align 4
  %235 = lshr i32 %234, 1
  %236 = zext i32 %235 to i64
  %237 = zext i32 %231 to i64
  %238 = load i64, i64* %105, align 8
  %239 = mul i64 %238, %236
  %240 = add i64 %239, %237
  %241 = load float*, float** %106, align 8
  %242 = getelementptr inbounds float, float* %241, i64 %240
  %243 = load float, float* %242, align 4
  %244 = uitofp i32 %232 to float
  %245 = fadd float %243, %244
  %246 = load float*, float** %93, align 8
  %247 = getelementptr inbounds float, float* %246, i64 %216
  %248 = load float, float* %247, align 4
  %249 = fadd float %245, %248
  %250 = add nuw i64 %216, 1
  %251 = getelementptr inbounds float, float* %246, i64 %250
  store float %249, float* %251, align 4
  %252 = load i64, i64* %138, align 8
  %253 = load i64, i64* %140, align 8
  %254 = sub i64 %252, %253
  %255 = ashr exact i64 %254, 3
  %256 = icmp ult i64 %250, %255
  br i1 %256, label %214, label %166

257:                                              ; preds = %610, %198
  %258 = phi float [ %121, %198 ], [ %611, %610 ]
  %259 = add nuw i64 %119, 1
  %260 = load i64, i64* %55, align 8
  %261 = load i64, i64* %57, align 8
  %262 = sub i64 %260, %261
  %263 = sdiv exact i64 %262, 24
  %264 = icmp ult i64 %259, %263
  br i1 %264, label %117, label %108

265:                                              ; preds = %610, %206
  %266 = phi i64 [ %203, %206 ], [ %615, %610 ]
  %267 = phi i64 [ %207, %206 ], [ %617, %610 ]
  %268 = phi i64 [ 0, %206 ], [ %613, %610 ]
  %269 = phi float [ %121, %206 ], [ %611, %610 ]
  %270 = inttoptr i64 %266 to %"struct.jxl::Token"*
  %271 = icmp ne i64 %268, 0
  %272 = icmp ugt i64 %267, %268
  %273 = and i1 %271, %272
  br i1 %273, label %274, label %292

274:                                              ; preds = %265
  %275 = add i64 %268, -1
  %276 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %270, i64 %275, i32 1
  %277 = load i32, i32* %276, align 4
  %278 = sub i64 %267, %268
  br label %279

279:                                              ; preds = %285, %274
  %280 = phi i64 [ %268, %274 ], [ %287, %285 ]
  %281 = phi i64 [ 0, %274 ], [ %286, %285 ]
  %282 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %270, i64 %280, i32 1
  %283 = load i32, i32* %282, align 4
  %284 = icmp eq i32 %283, %277
  br i1 %284, label %285, label %289

285:                                              ; preds = %279
  %286 = add nuw i64 %281, 1
  %287 = add i64 %286, %268
  %288 = icmp eq i64 %286, %278
  br i1 %288, label %289, label %279

289:                                              ; preds = %285, %279
  %290 = phi i64 [ %278, %285 ], [ %281, %279 ]
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %292, label %359

292:                                              ; preds = %289, %265
  %293 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %270, i64 %268
  %294 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %210, align 8
  %295 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %201, align 8
  %296 = icmp eq %"struct.jxl::Token"* %294, %295
  %297 = ptrtoint %"struct.jxl::Token"* %295 to i64
  br i1 %296, label %304, label %298

298:                                              ; preds = %292
  %299 = bitcast %"struct.jxl::Token"* %293 to i64*
  %300 = bitcast %"struct.jxl::Token"* %294 to i64*
  %301 = load i64, i64* %299, align 4
  store i64 %301, i64* %300, align 4
  %302 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %294, i64 1
  %303 = ptrtoint %"struct.jxl::Token"* %302 to i64
  store i64 %303, i64* %211, align 8
  br label %610

304:                                              ; preds = %292
  %305 = ptrtoint %"struct.jxl::Token"* %294 to i64
  %306 = load i64, i64* %199, align 8
  %307 = sub i64 %305, %306
  %308 = ashr exact i64 %307, 3
  %309 = add nsw i64 %308, 1
  %310 = icmp ugt i64 %309, 2305843009213693951
  br i1 %310, label %311, label %313

311:                                              ; preds = %304
  %312 = bitcast %"class.std::__1::vector.144"* %136 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %312) #13
  unreachable

313:                                              ; preds = %304
  %314 = sub i64 %297, %306
  %315 = ashr exact i64 %314, 3
  %316 = icmp ult i64 %315, 1152921504606846975
  br i1 %316, label %317, label %325

317:                                              ; preds = %313
  %318 = ashr exact i64 %314, 2
  %319 = icmp ult i64 %318, %309
  %320 = select i1 %319, i64 %309, i64 %318
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %330, label %322

322:                                              ; preds = %317
  %323 = icmp ugt i64 %320, 2305843009213693951
  br i1 %323, label %324, label %325

324:                                              ; preds = %322
  call void @abort() #13
  unreachable

325:                                              ; preds = %322, %313
  %326 = phi i64 [ %320, %322 ], [ 2305843009213693951, %313 ]
  %327 = shl i64 %326, 3
  %328 = call i8* @_Znwm(i64 %327) #14
  %329 = bitcast i8* %328 to %"struct.jxl::Token"*
  br label %330

330:                                              ; preds = %325, %317
  %331 = phi i64 [ %326, %325 ], [ 0, %317 ]
  %332 = phi %"struct.jxl::Token"* [ %329, %325 ], [ null, %317 ]
  %333 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %332, i64 %308
  %334 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %332, i64 %331
  %335 = ptrtoint %"struct.jxl::Token"* %334 to i64
  %336 = bitcast %"struct.jxl::Token"* %293 to i64*
  %337 = bitcast %"struct.jxl::Token"* %333 to i64*
  %338 = load i64, i64* %336, align 4
  store i64 %338, i64* %337, align 4
  %339 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %333, i64 1
  %340 = ptrtoint %"struct.jxl::Token"* %339 to i64
  %341 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %212, align 8
  %342 = load i64, i64* %211, align 8
  %343 = ptrtoint %"struct.jxl::Token"* %341 to i64
  %344 = sub i64 %342, %343
  %345 = ashr exact i64 %344, 3
  %346 = sub nsw i64 0, %345
  %347 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %333, i64 %346
  %348 = ptrtoint %"struct.jxl::Token"* %347 to i64
  %349 = icmp sgt i64 %344, 0
  br i1 %349, label %350, label %354

350:                                              ; preds = %330
  %351 = bitcast %"struct.jxl::Token"* %347 to i8*
  %352 = bitcast %"struct.jxl::Token"* %341 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %351, i8* align 4 %352, i64 %344, i1 false) #12
  %353 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %212, align 8
  br label %354

354:                                              ; preds = %350, %330
  %355 = phi %"struct.jxl::Token"* [ %341, %330 ], [ %353, %350 ]
  store i64 %348, i64* %199, align 8
  store i64 %340, i64* %211, align 8
  store i64 %335, i64* %200, align 8
  %356 = icmp eq %"struct.jxl::Token"* %355, null
  br i1 %356, label %610, label %357

357:                                              ; preds = %354
  %358 = bitcast %"struct.jxl::Token"* %355 to i8*
  call void @_ZdlPv(i8* %358) #14
  br label %610

359:                                              ; preds = %289
  %360 = add i64 %290, %268
  %361 = load float*, float** %93, align 8
  %362 = getelementptr inbounds float, float* %361, i64 %360
  %363 = load float, float* %362, align 4
  %364 = getelementptr inbounds float, float* %361, i64 %268
  %365 = load float, float* %364, align 4
  %366 = fsub float %363, %365
  %367 = load i32, i32* %107, align 8
  %368 = zext i32 %367 to i64
  %369 = sub i64 %290, %368
  %370 = icmp ult i64 %290, %368
  br i1 %370, label %379, label %371

371:                                              ; preds = %359
  %372 = add i64 %369, 1
  %373 = call i64 @llvm.ctlz.i64(i64 %372, i1 true) #12, !range !2
  %374 = call i64 @llvm.ctpop.i64(i64 %372) #12, !range !2
  %375 = icmp ugt i64 %374, 1
  %376 = zext i1 %375 to i64
  %377 = sub nuw nsw i64 64, %373
  %378 = add nuw nsw i64 %377, %376
  br label %379

379:                                              ; preds = %371, %359
  %380 = phi i64 [ %378, %371 ], [ 0, %359 ]
  %381 = uitofp i64 %380 to float
  %382 = icmp uge i64 %290, %368
  %383 = fcmp ugt float %366, %381
  %384 = and i1 %382, %383
  br i1 %384, label %460, label %385

385:                                              ; preds = %379, %458
  %386 = phi %"struct.jxl::Token"* [ %459, %458 ], [ %270, %379 ]
  %387 = phi i64 [ %456, %458 ], [ 0, %379 ]
  %388 = add i64 %387, %268
  %389 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %386, i64 %388
  %390 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %210, align 8
  %391 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %201, align 8
  %392 = icmp eq %"struct.jxl::Token"* %390, %391
  %393 = ptrtoint %"struct.jxl::Token"* %391 to i64
  br i1 %392, label %400, label %394

394:                                              ; preds = %385
  %395 = bitcast %"struct.jxl::Token"* %389 to i64*
  %396 = bitcast %"struct.jxl::Token"* %390 to i64*
  %397 = load i64, i64* %395, align 4
  store i64 %397, i64* %396, align 4
  %398 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %390, i64 1
  %399 = ptrtoint %"struct.jxl::Token"* %398 to i64
  store i64 %399, i64* %211, align 8
  br label %455

400:                                              ; preds = %385
  %401 = ptrtoint %"struct.jxl::Token"* %390 to i64
  %402 = load i64, i64* %199, align 8
  %403 = sub i64 %401, %402
  %404 = ashr exact i64 %403, 3
  %405 = add nsw i64 %404, 1
  %406 = icmp ugt i64 %405, 2305843009213693951
  br i1 %406, label %407, label %409

407:                                              ; preds = %400
  %408 = bitcast %"class.std::__1::vector.144"* %136 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %408) #13
  unreachable

409:                                              ; preds = %400
  %410 = sub i64 %393, %402
  %411 = ashr exact i64 %410, 3
  %412 = icmp ult i64 %411, 1152921504606846975
  br i1 %412, label %413, label %421

413:                                              ; preds = %409
  %414 = ashr exact i64 %410, 2
  %415 = icmp ult i64 %414, %405
  %416 = select i1 %415, i64 %405, i64 %414
  %417 = icmp eq i64 %416, 0
  br i1 %417, label %426, label %418

418:                                              ; preds = %413
  %419 = icmp ugt i64 %416, 2305843009213693951
  br i1 %419, label %420, label %421

420:                                              ; preds = %418
  call void @abort() #13
  unreachable

421:                                              ; preds = %418, %409
  %422 = phi i64 [ %416, %418 ], [ 2305843009213693951, %409 ]
  %423 = shl i64 %422, 3
  %424 = call i8* @_Znwm(i64 %423) #14
  %425 = bitcast i8* %424 to %"struct.jxl::Token"*
  br label %426

426:                                              ; preds = %421, %413
  %427 = phi i64 [ %422, %421 ], [ 0, %413 ]
  %428 = phi %"struct.jxl::Token"* [ %425, %421 ], [ null, %413 ]
  %429 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %428, i64 %404
  %430 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %428, i64 %427
  %431 = ptrtoint %"struct.jxl::Token"* %430 to i64
  %432 = bitcast %"struct.jxl::Token"* %389 to i64*
  %433 = bitcast %"struct.jxl::Token"* %429 to i64*
  %434 = load i64, i64* %432, align 4
  store i64 %434, i64* %433, align 4
  %435 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %429, i64 1
  %436 = ptrtoint %"struct.jxl::Token"* %435 to i64
  %437 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %212, align 8
  %438 = load i64, i64* %211, align 8
  %439 = ptrtoint %"struct.jxl::Token"* %437 to i64
  %440 = sub i64 %438, %439
  %441 = ashr exact i64 %440, 3
  %442 = sub nsw i64 0, %441
  %443 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %429, i64 %442
  %444 = ptrtoint %"struct.jxl::Token"* %443 to i64
  %445 = icmp sgt i64 %440, 0
  br i1 %445, label %446, label %450

446:                                              ; preds = %426
  %447 = bitcast %"struct.jxl::Token"* %443 to i8*
  %448 = bitcast %"struct.jxl::Token"* %437 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %447, i8* align 4 %448, i64 %440, i1 false) #12
  %449 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %212, align 8
  br label %450

450:                                              ; preds = %446, %426
  %451 = phi %"struct.jxl::Token"* [ %437, %426 ], [ %449, %446 ]
  store i64 %444, i64* %199, align 8
  store i64 %436, i64* %211, align 8
  store i64 %431, i64* %200, align 8
  %452 = icmp eq %"struct.jxl::Token"* %451, null
  br i1 %452, label %455, label %453

453:                                              ; preds = %450
  %454 = bitcast %"struct.jxl::Token"* %451 to i8*
  call void @_ZdlPv(i8* %454) #14
  br label %455

455:                                              ; preds = %453, %450, %394
  %456 = add nuw i64 %387, 1
  %457 = icmp eq i64 %456, %290
  br i1 %457, label %607, label %458

458:                                              ; preds = %455
  %459 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %209, align 8
  br label %385

460:                                              ; preds = %379
  %461 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %270, i64 %268, i32 0
  %462 = load i32, i32* %461, align 4
  %463 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %210, align 8
  %464 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %201, align 8
  %465 = icmp ult %"struct.jxl::Token"* %463, %464
  %466 = ptrtoint %"struct.jxl::Token"* %464 to i64
  br i1 %465, label %467, label %474

467:                                              ; preds = %460
  %468 = and i32 %462, -2
  %469 = trunc i64 %369 to i32
  %470 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %463, i64 0, i32 0
  store i32 %468, i32* %470, align 4
  %471 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %463, i64 0, i32 1
  store i32 %469, i32* %471, align 4
  %472 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %463, i64 1
  %473 = ptrtoint %"struct.jxl::Token"* %472 to i64
  store i64 %473, i64* %211, align 8
  br label %531

474:                                              ; preds = %460
  %475 = ptrtoint %"struct.jxl::Token"* %463 to i64
  %476 = load i64, i64* %199, align 8
  %477 = sub i64 %475, %476
  %478 = ashr exact i64 %477, 3
  %479 = add nsw i64 %478, 1
  %480 = icmp ugt i64 %479, 2305843009213693951
  br i1 %480, label %481, label %483

481:                                              ; preds = %474
  %482 = bitcast %"class.std::__1::vector.144"* %136 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %482) #13
  unreachable

483:                                              ; preds = %474
  %484 = sub i64 %466, %476
  %485 = ashr exact i64 %484, 3
  %486 = icmp ult i64 %485, 1152921504606846975
  br i1 %486, label %487, label %495

487:                                              ; preds = %483
  %488 = ashr exact i64 %484, 2
  %489 = icmp ult i64 %488, %479
  %490 = select i1 %489, i64 %479, i64 %488
  %491 = icmp eq i64 %490, 0
  br i1 %491, label %500, label %492

492:                                              ; preds = %487
  %493 = icmp ugt i64 %490, 2305843009213693951
  br i1 %493, label %494, label %495

494:                                              ; preds = %492
  call void @abort() #13
  unreachable

495:                                              ; preds = %492, %483
  %496 = phi i64 [ %490, %492 ], [ 2305843009213693951, %483 ]
  %497 = shl i64 %496, 3
  %498 = call i8* @_Znwm(i64 %497) #14
  %499 = bitcast i8* %498 to %"struct.jxl::Token"*
  br label %500

500:                                              ; preds = %495, %487
  %501 = phi i64 [ %496, %495 ], [ 0, %487 ]
  %502 = phi %"struct.jxl::Token"* [ %499, %495 ], [ null, %487 ]
  %503 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %502, i64 %478
  %504 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %502, i64 %501
  %505 = ptrtoint %"struct.jxl::Token"* %504 to i64
  %506 = trunc i64 %369 to i32
  %507 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %503, i64 0, i32 0
  %508 = and i32 %462, -2
  store i32 %508, i32* %507, align 4
  %509 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %502, i64 %478, i32 1
  store i32 %506, i32* %509, align 4
  %510 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %503, i64 1
  %511 = ptrtoint %"struct.jxl::Token"* %510 to i64
  %512 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %212, align 8
  %513 = load i64, i64* %211, align 8
  %514 = ptrtoint %"struct.jxl::Token"* %512 to i64
  %515 = sub i64 %513, %514
  %516 = ashr exact i64 %515, 3
  %517 = sub nsw i64 0, %516
  %518 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %503, i64 %517
  %519 = ptrtoint %"struct.jxl::Token"* %518 to i64
  %520 = icmp sgt i64 %515, 0
  br i1 %520, label %521, label %525

521:                                              ; preds = %500
  %522 = bitcast %"struct.jxl::Token"* %518 to i8*
  %523 = bitcast %"struct.jxl::Token"* %512 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %522, i8* align 4 %523, i64 %515, i1 false) #12
  %524 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %212, align 8
  br label %525

525:                                              ; preds = %521, %500
  %526 = phi %"struct.jxl::Token"* [ %512, %500 ], [ %524, %521 ]
  store i64 %519, i64* %199, align 8
  store i64 %511, i64* %211, align 8
  store i64 %505, i64* %200, align 8
  %527 = icmp eq %"struct.jxl::Token"* %526, null
  br i1 %527, label %531, label %528

528:                                              ; preds = %525
  %529 = bitcast %"struct.jxl::Token"* %526 to i8*
  call void @_ZdlPv(i8* %529) #14
  %530 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %210, align 8
  br label %531

531:                                              ; preds = %528, %525, %467
  %532 = phi %"struct.jxl::Token"* [ %530, %528 ], [ %510, %525 ], [ %472, %467 ]
  %533 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %532, i64 -1, i32 0
  %534 = load i32, i32* %533, align 4
  %535 = or i32 %534, 1
  store i32 %535, i32* %533, align 4
  %536 = fsub float %366, %381
  %537 = fadd float %269, %536
  %538 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %210, align 8
  %539 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %201, align 8
  %540 = icmp ult %"struct.jxl::Token"* %538, %539
  %541 = ptrtoint %"struct.jxl::Token"* %539 to i64
  br i1 %540, label %542, label %550

542:                                              ; preds = %531
  %543 = load i64, i64* %37, align 8
  %544 = trunc i64 %543 to i32
  %545 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %538, i64 0, i32 0
  %546 = shl i32 %544, 1
  store i32 %546, i32* %545, align 4
  %547 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %538, i64 0, i32 1
  store i32 %213, i32* %547, align 4
  %548 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %538, i64 1
  %549 = ptrtoint %"struct.jxl::Token"* %548 to i64
  store i64 %549, i64* %211, align 8
  br label %607

550:                                              ; preds = %531
  %551 = ptrtoint %"struct.jxl::Token"* %538 to i64
  %552 = load i64, i64* %199, align 8
  %553 = sub i64 %551, %552
  %554 = ashr exact i64 %553, 3
  %555 = add nsw i64 %554, 1
  %556 = icmp ugt i64 %555, 2305843009213693951
  br i1 %556, label %557, label %559

557:                                              ; preds = %550
  %558 = bitcast %"class.std::__1::vector.144"* %136 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %558) #13
  unreachable

559:                                              ; preds = %550
  %560 = sub i64 %541, %552
  %561 = ashr exact i64 %560, 3
  %562 = icmp ult i64 %561, 1152921504606846975
  br i1 %562, label %563, label %571

563:                                              ; preds = %559
  %564 = ashr exact i64 %560, 2
  %565 = icmp ult i64 %564, %555
  %566 = select i1 %565, i64 %555, i64 %564
  %567 = icmp eq i64 %566, 0
  br i1 %567, label %576, label %568

568:                                              ; preds = %563
  %569 = icmp ugt i64 %566, 2305843009213693951
  br i1 %569, label %570, label %571

570:                                              ; preds = %568
  call void @abort() #13
  unreachable

571:                                              ; preds = %568, %559
  %572 = phi i64 [ %566, %568 ], [ 2305843009213693951, %559 ]
  %573 = shl i64 %572, 3
  %574 = call i8* @_Znwm(i64 %573) #14
  %575 = bitcast i8* %574 to %"struct.jxl::Token"*
  br label %576

576:                                              ; preds = %571, %563
  %577 = phi i64 [ %572, %571 ], [ 0, %563 ]
  %578 = phi %"struct.jxl::Token"* [ %575, %571 ], [ null, %563 ]
  %579 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %578, i64 %554
  %580 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %578, i64 %577
  %581 = ptrtoint %"struct.jxl::Token"* %580 to i64
  %582 = load i64, i64* %37, align 8
  %583 = trunc i64 %582 to i32
  %584 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %579, i64 0, i32 0
  %585 = shl i32 %583, 1
  store i32 %585, i32* %584, align 4
  %586 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %578, i64 %554, i32 1
  store i32 %213, i32* %586, align 4
  %587 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %579, i64 1
  %588 = ptrtoint %"struct.jxl::Token"* %587 to i64
  %589 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %212, align 8
  %590 = load i64, i64* %211, align 8
  %591 = ptrtoint %"struct.jxl::Token"* %589 to i64
  %592 = sub i64 %590, %591
  %593 = ashr exact i64 %592, 3
  %594 = sub nsw i64 0, %593
  %595 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %579, i64 %594
  %596 = ptrtoint %"struct.jxl::Token"* %595 to i64
  %597 = icmp sgt i64 %592, 0
  br i1 %597, label %598, label %602

598:                                              ; preds = %576
  %599 = bitcast %"struct.jxl::Token"* %595 to i8*
  %600 = bitcast %"struct.jxl::Token"* %589 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %599, i8* align 4 %600, i64 %592, i1 false) #12
  %601 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %212, align 8
  br label %602

602:                                              ; preds = %598, %576
  %603 = phi %"struct.jxl::Token"* [ %589, %576 ], [ %601, %598 ]
  store i64 %596, i64* %199, align 8
  store i64 %588, i64* %211, align 8
  store i64 %581, i64* %200, align 8
  %604 = icmp eq %"struct.jxl::Token"* %603, null
  br i1 %604, label %607, label %605

605:                                              ; preds = %602
  %606 = bitcast %"struct.jxl::Token"* %603 to i8*
  call void @_ZdlPv(i8* %606) #14
  br label %607

607:                                              ; preds = %455, %605, %602, %542
  %608 = phi float [ %537, %542 ], [ %537, %602 ], [ %537, %605 ], [ %269, %455 ]
  %609 = add i64 %360, -1
  br label %610

610:                                              ; preds = %607, %357, %354, %298
  %611 = phi float [ %608, %607 ], [ %269, %298 ], [ %269, %354 ], [ %269, %357 ]
  %612 = phi i64 [ %609, %607 ], [ %268, %298 ], [ %268, %354 ], [ %268, %357 ]
  %613 = add i64 %612, 1
  %614 = load i64, i64* %138, align 8
  %615 = load i64, i64* %140, align 8
  %616 = sub i64 %614, %615
  %617 = ashr exact i64 %616, 3
  %618 = icmp ult i64 %613, %617
  br i1 %618, label %265, label %257

619:                                              ; preds = %112
  store i8 1, i8* %42, align 8
  br label %620

620:                                              ; preds = %619, %112
  %621 = load float*, float** %93, align 8
  %622 = icmp eq float* %621, null
  br i1 %622, label %627, label %623

623:                                              ; preds = %620
  %624 = ptrtoint float* %621 to i64
  %625 = bitcast float** %94 to i64*
  store i64 %624, i64* %625, align 8
  %626 = bitcast float* %621 to i8*
  call void @_ZdlPv(i8* %626) #14
  br label %627

627:                                              ; preds = %623, %620
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %92) #12
  %628 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %20, i64 0, i32 2, i32 0, i32 0
  %629 = load float*, float** %628, align 8
  %630 = icmp eq float* %629, null
  br i1 %630, label %636, label %631

631:                                              ; preds = %627
  %632 = ptrtoint float* %629 to i64
  %633 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %20, i64 0, i32 2, i32 0, i32 1
  %634 = bitcast float** %633 to i64*
  store i64 %632, i64* %634, align 8
  %635 = bitcast float* %629 to i8*
  call void @_ZdlPv(i8* %635) #14
  br label %636

636:                                              ; preds = %631, %627
  %637 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %20, i64 0, i32 1, i32 0, i32 0
  %638 = load float*, float** %637, align 8
  %639 = icmp eq float* %638, null
  br i1 %639, label %645, label %640

640:                                              ; preds = %636
  %641 = ptrtoint float* %638 to i64
  %642 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %20, i64 0, i32 1, i32 0, i32 1
  %643 = bitcast float** %642 to i64*
  store i64 %641, i64* %643, align 8
  %644 = bitcast float* %638 to i8*
  call void @_ZdlPv(i8* %644) #14
  br label %645

645:                                              ; preds = %640, %636
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %51) #12
  br label %1690

646:                                              ; preds = %8
  call fastcc void @_ZN3jxl12_GLOBAL__N_114ApplyLZ77_LZ77ERKNS_15HistogramParamsEmRKNSt3__16vectorINS5_INS_5TokenENS4_9allocatorIS6_EEEENS7_IS9_EEEERNS_10LZ77ParamsERSB_(%"struct.jxl::HistogramParams"* dereferenceable(56) %0, i64 %1, %"class.std::__1::vector.142"* dereferenceable(24) %2, %"struct.jxl::LZ77Params"* dereferenceable(48) %36, %"class.std::__1::vector.142"* nonnull dereferenceable(24) %29) #12
  br label %1690

647:                                              ; preds = %8
  %648 = bitcast %"class.std::__1::vector.142"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %648) #12
  %649 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %23, i64 0, i32 0, i32 0
  %650 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %23, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %648, i8 0, i64 24, i1 false) #12
  call fastcc void @_ZN3jxl12_GLOBAL__N_114ApplyLZ77_LZ77ERKNS_15HistogramParamsEmRKNSt3__16vectorINS5_INS_5TokenENS4_9allocatorIS6_EEEENS7_IS9_EEEERNS_10LZ77ParamsERSB_(%"struct.jxl::HistogramParams"* dereferenceable(56) %0, i64 %1, %"class.std::__1::vector.142"* dereferenceable(24) %2, %"struct.jxl::LZ77Params"* dereferenceable(48) %36, %"class.std::__1::vector.142"* nonnull dereferenceable(24) %23) #12
  %651 = load i8, i8* %42, align 8, !range !21
  %652 = icmp eq i8 %651, 0
  br i1 %652, label %1661, label %653

653:                                              ; preds = %647
  %654 = bitcast %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %654) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %654, i8 -86, i64 56, i1 false) #12
  %655 = add i64 %1, 1
  %656 = load i8, i8* %43, align 8, !range !21
  %657 = icmp ne i8 %656, 0
  call fastcc void @_ZN3jxl12_GLOBAL__N_119SymbolCostEstimatorC2EmbRKNSt3__16vectorINS3_INS_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS_10LZ77ParamsE(%"class.jxl::(anonymous namespace)::SymbolCostEstimator"* nonnull %24, i64 %655, i1 zeroext %657, %"class.std::__1::vector.142"* nonnull dereferenceable(24) %23, %"struct.jxl::LZ77Params"* dereferenceable(48) %36) #12
  %658 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %2, i64 0, i32 0, i32 1
  %659 = bitcast %"class.std::__1::vector.144"** %658 to i64*
  %660 = load i64, i64* %659, align 8
  %661 = bitcast %"class.std::__1::vector.142"* %2 to i64*
  %662 = load i64, i64* %661, align 8
  %663 = sub i64 %660, %662
  %664 = sdiv exact i64 %663, 24
  %665 = bitcast %"class.std::__1::vector.144"** %40 to i64*
  %666 = load i64, i64* %665, align 8
  %667 = bitcast %"class.std::__1::vector.142"* %29 to i64*
  %668 = load i64, i64* %667, align 16
  %669 = sub i64 %666, %668
  %670 = sdiv exact i64 %669, 24
  %671 = icmp ugt i64 %664, %670
  %672 = inttoptr i64 %668 to %"class.std::__1::vector.144"*
  %673 = inttoptr i64 %666 to %"class.std::__1::vector.144"*
  br i1 %671, label %674, label %676

674:                                              ; preds = %653
  %675 = sub nsw i64 %664, %670
  call void @_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.142"* nonnull %29, i64 %675) #12
  br label %695

676:                                              ; preds = %653
  %677 = icmp ult i64 %664, %670
  br i1 %677, label %678, label %695

678:                                              ; preds = %676
  %679 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %672, i64 %664
  %680 = icmp eq %"class.std::__1::vector.144"* %679, %673
  br i1 %680, label %694, label %681

681:                                              ; preds = %678, %692
  %682 = phi %"class.std::__1::vector.144"* [ %683, %692 ], [ %673, %678 ]
  %683 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %682, i64 -1
  %684 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %683, i64 0, i32 0, i32 0
  %685 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %684, align 8
  %686 = icmp eq %"struct.jxl::Token"* %685, null
  br i1 %686, label %692, label %687

687:                                              ; preds = %681
  %688 = ptrtoint %"struct.jxl::Token"* %685 to i64
  %689 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %682, i64 -1, i32 0, i32 1
  %690 = bitcast %"struct.jxl::Token"** %689 to i64*
  store i64 %688, i64* %690, align 8
  %691 = bitcast %"struct.jxl::Token"* %685 to i8*
  call void @_ZdlPv(i8* %691) #14
  br label %692

692:                                              ; preds = %687, %681
  %693 = icmp eq %"class.std::__1::vector.144"* %683, %679
  br i1 %693, label %694, label %681

694:                                              ; preds = %692, %678
  store %"class.std::__1::vector.144"* %679, %"class.std::__1::vector.144"** %40, align 8
  br label %695

695:                                              ; preds = %694, %676, %674
  %696 = bitcast %"class.std::__1::vector.188"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %696) #12
  %697 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %25, i64 0, i32 0, i32 0
  %698 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %25, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %696, i8 0, i64 24, i1 false) #12
  %699 = bitcast %"class.std::__1::vector.11"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %699) #12
  %700 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %26, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %699, i8 0, i64 24, i1 false) #12
  %701 = load i64, i64* %659, align 8
  %702 = load i64, i64* %661, align 8
  %703 = icmp eq i64 %701, %702
  br i1 %703, label %752, label %704

704:                                              ; preds = %695
  %705 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %26, i64 0, i32 0, i32 1
  %706 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 4
  %707 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 4, i32 0, i32 1
  %708 = bitcast i64** %707 to i64*
  %709 = bitcast %"class.std::__1::vector.135"* %706 to i64*
  %710 = bitcast float** %698 to i64*
  %711 = bitcast %"class.std::__1::vector.188"* %25 to i64*
  %712 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %24, i64 0, i32 0
  %713 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %24, i64 0, i32 1, i32 0, i32 0
  %714 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3, i32 3
  %715 = bitcast %"struct.jxl::(anonymous namespace)::HashChain"* %27 to i8*
  %716 = bitcast %"class.std::__1::vector.239"* %28 to i8*
  %717 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %28, i64 0, i32 0, i32 0
  %718 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %28, i64 0, i32 0, i32 1
  %719 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %28, i64 0, i32 0, i32 2, i32 0, i32 0
  %720 = bitcast %struct.MatchInfo** %718 to i8**
  %721 = bitcast %"class.std::__1::vector.239"* %28 to i8**
  %722 = bitcast %struct.MatchInfo** %718 to i64*
  %723 = bitcast %"class.std::__1::vector.11"* %26 to i64*
  %724 = bitcast i32** %705 to i64*
  %725 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 15
  %726 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 0
  %727 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 1, i32 0, i32 0
  %728 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 4
  %729 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 3
  %730 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 7, i32 0, i32 0
  %731 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 17
  %732 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 10, i32 0, i32 0
  %733 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 12
  %734 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 11, i32 0, i32 0
  %735 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 16
  %736 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 18, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %737 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 18, i32 0, i32 0, i32 0, i32 0, i32 0
  %738 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 19
  %739 = bitcast i32* %22 to i8*
  %740 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 20
  %741 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %27, i64 0, i32 8, i32 0, i32 0
  %742 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3, i32 4, i32 1
  %743 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3, i32 4, i32 0
  %744 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3, i32 4, i32 2
  %745 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3, i32 4, i32 3
  br label %778

746:                                              ; preds = %1654
  %747 = load i32*, i32** %700, align 8
  %748 = icmp eq i32* %747, null
  br i1 %748, label %752, label %749

749:                                              ; preds = %746
  %750 = bitcast i32* %747 to i8*
  %751 = ptrtoint i32* %747 to i64
  store i64 %751, i64* %724, align 8
  call void @_ZdlPv(i8* %750) #14
  br label %752

752:                                              ; preds = %749, %746, %695
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %699) #12
  %753 = load float*, float** %697, align 8
  %754 = icmp eq float* %753, null
  br i1 %754, label %759, label %755

755:                                              ; preds = %752
  %756 = ptrtoint float* %753 to i64
  %757 = bitcast float** %698 to i64*
  store i64 %756, i64* %757, align 8
  %758 = bitcast float* %753 to i8*
  call void @_ZdlPv(i8* %758) #14
  br label %759

759:                                              ; preds = %755, %752
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %696) #12
  %760 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %24, i64 0, i32 2, i32 0, i32 0
  %761 = load float*, float** %760, align 8
  %762 = icmp eq float* %761, null
  br i1 %762, label %768, label %763

763:                                              ; preds = %759
  %764 = ptrtoint float* %761 to i64
  %765 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %24, i64 0, i32 2, i32 0, i32 1
  %766 = bitcast float** %765 to i64*
  store i64 %764, i64* %766, align 8
  %767 = bitcast float* %761 to i8*
  call void @_ZdlPv(i8* %767) #14
  br label %768

768:                                              ; preds = %763, %759
  %769 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %24, i64 0, i32 1, i32 0, i32 0
  %770 = load float*, float** %769, align 8
  %771 = icmp eq float* %770, null
  br i1 %771, label %777, label %772

772:                                              ; preds = %768
  %773 = ptrtoint float* %770 to i64
  %774 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %24, i64 0, i32 1, i32 0, i32 1
  %775 = bitcast float** %774 to i64*
  store i64 %773, i64* %775, align 8
  %776 = bitcast float* %770 to i8*
  call void @_ZdlPv(i8* %776) #14
  br label %777

777:                                              ; preds = %772, %768
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %654) #12
  br label %1661

778:                                              ; preds = %1654, %704
  %779 = phi i64 [ %702, %704 ], [ %1657, %1654 ]
  %780 = phi i64 [ 0, %704 ], [ %1655, %1654 ]
  %781 = inttoptr i64 %779 to %"class.std::__1::vector.144"*
  %782 = load i64, i64* %708, align 8
  %783 = load i64, i64* %709, align 8
  %784 = sub i64 %782, %783
  %785 = ashr exact i64 %784, 3
  %786 = icmp ugt i64 %785, %780
  br i1 %786, label %787, label %791

787:                                              ; preds = %778
  %788 = inttoptr i64 %783 to i64*
  %789 = getelementptr inbounds i64, i64* %788, i64 %780
  %790 = load i64, i64* %789, align 8
  br label %791

791:                                              ; preds = %787, %778
  %792 = phi i64 [ %790, %787 ], [ 0, %778 ]
  %793 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %781, i64 %780
  %794 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %39, align 16
  %795 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %794, i64 %780
  %796 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %781, i64 %780, i32 0, i32 1
  %797 = bitcast %"struct.jxl::Token"** %796 to i64*
  %798 = load i64, i64* %797, align 8
  %799 = bitcast %"class.std::__1::vector.144"* %793 to i64*
  %800 = load i64, i64* %799, align 8
  %801 = sub i64 %798, %800
  %802 = ashr exact i64 %801, 3
  %803 = add nsw i64 %802, 1
  %804 = load i64, i64* %710, align 8
  %805 = load i64, i64* %711, align 8
  %806 = sub i64 %804, %805
  %807 = ashr exact i64 %806, 2
  %808 = icmp ugt i64 %803, %807
  %809 = inttoptr i64 %805 to float*
  br i1 %808, label %810, label %812

810:                                              ; preds = %791
  %811 = sub nsw i64 %803, %807
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.188"* nonnull %25, i64 %811) #12
  br label %816

812:                                              ; preds = %791
  %813 = icmp ult i64 %803, %807
  br i1 %813, label %814, label %816

814:                                              ; preds = %812
  %815 = getelementptr inbounds float, float* %809, i64 %803
  store float* %815, float** %698, align 8
  br label %816

816:                                              ; preds = %814, %812, %810
  %817 = load i64, i64* %797, align 8
  %818 = load i64, i64* %799, align 8
  %819 = icmp eq i64 %817, %818
  br i1 %819, label %820, label %867

820:                                              ; preds = %816
  %821 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %794, i64 %780, i32 0, i32 2, i32 0, i32 0
  %822 = bitcast %"struct.jxl::Token"** %821 to i64*
  %823 = bitcast %"class.std::__1::vector.144"* %795 to i64*
  br label %856

824:                                              ; preds = %883
  %825 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %794, i64 %780, i32 0, i32 2, i32 0, i32 0
  %826 = bitcast %"struct.jxl::Token"** %825 to i64*
  %827 = load i64, i64* %826, align 8
  %828 = bitcast %"class.std::__1::vector.144"* %795 to i64*
  %829 = load i64, i64* %828, align 8
  %830 = sub i64 %827, %829
  %831 = ashr exact i64 %830, 3
  %832 = icmp ult i64 %831, %908
  br i1 %832, label %833, label %856

833:                                              ; preds = %824
  %834 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %794, i64 %780, i32 0, i32 1
  %835 = bitcast %"struct.jxl::Token"** %834 to i64*
  %836 = icmp ugt i64 %908, 2305843009213693951
  br i1 %836, label %837, label %838

837:                                              ; preds = %833
  call void @abort() #13
  unreachable

838:                                              ; preds = %833
  %839 = load i64, i64* %835, align 8
  %840 = sub i64 %839, %829
  %841 = ashr exact i64 %840, 3
  %842 = call i8* @_Znwm(i64 %907) #14
  %843 = bitcast i8* %842 to %"struct.jxl::Token"*
  %844 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %843, i64 %841
  %845 = ptrtoint %"struct.jxl::Token"* %844 to i64
  %846 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %843, i64 %908
  %847 = ptrtoint %"struct.jxl::Token"* %846 to i64
  %848 = ptrtoint i8* %842 to i64
  %849 = icmp sgt i64 %840, 0
  br i1 %849, label %850, label %852

850:                                              ; preds = %838
  %851 = inttoptr i64 %829 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %842, i8* align 4 %851, i64 %840, i1 false) #12
  br label %852

852:                                              ; preds = %850, %838
  store i64 %848, i64* %828, align 8
  store i64 %845, i64* %835, align 8
  store i64 %847, i64* %826, align 8
  %853 = icmp eq i64 %829, 0
  br i1 %853, label %856, label %854

854:                                              ; preds = %852
  %855 = inttoptr i64 %829 to i8*
  call void @_ZdlPv(i8* %855) #14
  br label %856

856:                                              ; preds = %854, %852, %824, %820
  %857 = phi i64* [ %823, %820 ], [ %828, %854 ], [ %828, %852 ], [ %828, %824 ]
  %858 = phi i64* [ %822, %820 ], [ %826, %854 ], [ %826, %852 ], [ %826, %824 ]
  %859 = phi %"struct.jxl::Token"** [ %821, %820 ], [ %825, %854 ], [ %825, %852 ], [ %825, %824 ]
  %860 = load i64, i64* %797, align 8
  %861 = load i64, i64* %799, align 8
  %862 = sub i64 %860, %861
  %863 = ashr exact i64 %862, 3
  %864 = load i32, i32* %714, align 8
  %865 = zext i32 %864 to i64
  %866 = icmp ugt i32 %864, 2
  br i1 %866, label %913, label %910

867:                                              ; preds = %816, %883
  %868 = phi i64 [ %906, %883 ], [ %818, %816 ]
  %869 = phi i64 [ %903, %883 ], [ 0, %816 ]
  %870 = inttoptr i64 %868 to %"struct.jxl::Token"*
  %871 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %870, i64 %869, i32 1
  %872 = load i32, i32* %871, align 4
  %873 = icmp ult i32 %872, 16
  br i1 %873, label %883, label %874

874:                                              ; preds = %867
  %875 = call i32 @llvm.ctlz.i32(i32 %872, i1 true) #12, !range !3
  %876 = xor i32 %875, 31
  %877 = shl i32 1, %876
  %878 = sub i32 %872, %877
  %879 = shl nuw nsw i32 %876, 2
  %880 = add nsw i32 %876, -2
  %881 = lshr i32 %878, %880
  %882 = add i32 %881, %879
  br label %883

883:                                              ; preds = %874, %867
  %884 = phi i32 [ %882, %874 ], [ %872, %867 ]
  %885 = phi i32 [ %880, %874 ], [ 0, %867 ]
  %886 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %870, i64 %869, i32 0
  %887 = load i32, i32* %886, align 4
  %888 = lshr i32 %887, 1
  %889 = zext i32 %888 to i64
  %890 = zext i32 %884 to i64
  %891 = load i64, i64* %712, align 8
  %892 = mul i64 %891, %889
  %893 = add i64 %892, %890
  %894 = load float*, float** %713, align 8
  %895 = getelementptr inbounds float, float* %894, i64 %893
  %896 = load float, float* %895, align 4
  %897 = uitofp i32 %885 to float
  %898 = fadd float %896, %897
  %899 = load float*, float** %697, align 8
  %900 = getelementptr inbounds float, float* %899, i64 %869
  %901 = load float, float* %900, align 4
  %902 = fadd float %898, %901
  %903 = add nuw i64 %869, 1
  %904 = getelementptr inbounds float, float* %899, i64 %903
  store float %902, float* %904, align 4
  %905 = load i64, i64* %797, align 8
  %906 = load i64, i64* %799, align 8
  %907 = sub i64 %905, %906
  %908 = ashr exact i64 %907, 3
  %909 = icmp ult i64 %903, %908
  br i1 %909, label %867, label %824

910:                                              ; preds = %856
  %911 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 1331, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.22, i64 0, i64 0)) #12
  %912 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

913:                                              ; preds = %856, %913
  %914 = phi i64 [ %918, %913 ], [ 1, %856 ]
  %915 = icmp ult i64 %914, %863
  %916 = icmp ult i64 %914, 1048576
  %917 = and i1 %915, %916
  %918 = shl i64 %914, 1
  br i1 %917, label %913, label %919

919:                                              ; preds = %913
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %715) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %715, i8* align 8 bitcast (%"struct.jxl::(anonymous namespace)::HashChain"* @__const._ZN3jxl12_GLOBAL__N_117ApplyLZ77_OptimalERKNS_15HistogramParamsEmRKNSt3__16vectorINS5_INS_5TokenENS4_9allocatorIS6_EEEENS7_IS9_EEEERNS_10LZ77ParamsERSB_.chain to i8*), i64 288, i1 false) #12
  %920 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %793, i64 0, i32 0, i32 0
  %921 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %920, align 8
  %922 = load i64, i64* %797, align 8
  %923 = ptrtoint %"struct.jxl::Token"* %921 to i64
  %924 = sub i64 %922, %923
  %925 = ashr exact i64 %924, 3
  call fastcc void @_ZN3jxl12_GLOBAL__N_19HashChainC2EPKNS_5TokenEmmmmm(%"struct.jxl::(anonymous namespace)::HashChain"* nonnull %27, %"struct.jxl::Token"* %921, i64 %925, i64 %914, i64 %865, i64 %863, i64 %792) #12
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %716) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %716, i8 -86, i64 24, i1 false) #12
  %926 = load i64, i64* %797, align 8
  %927 = load i64, i64* %799, align 8
  %928 = sub i64 %926, %927
  %929 = ashr exact i64 %928, 3
  %930 = add nsw i64 %929, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %716, i8 0, i64 24, i1 false) #12
  %931 = icmp eq i64 %930, 0
  br i1 %931, label %986, label %932

932:                                              ; preds = %919
  %933 = icmp ugt i64 %930, 1152921504606846975
  br i1 %933, label %934, label %936

934:                                              ; preds = %932
  %935 = bitcast %"class.std::__1::vector.239"* %28 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %935) #13
  unreachable

936:                                              ; preds = %932
  %937 = shl i64 %930, 4
  %938 = call i8* @_Znwm(i64 %937) #14
  %939 = bitcast i8* %938 to %struct.MatchInfo*
  store i8* %938, i8** %720, align 8
  store i8* %938, i8** %721, align 8
  %940 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %939, i64 %930
  store %struct.MatchInfo* %940, %struct.MatchInfo** %719, align 8
  %941 = lshr i64 %928, 3
  %942 = and i64 %928, 9223372036854775800
  %943 = add nuw nsw i64 %941, 1
  %944 = and i64 %943, 7
  %945 = icmp eq i64 %944, 0
  br i1 %945, label %954, label %946

946:                                              ; preds = %936, %946
  %947 = phi %struct.MatchInfo* [ %951, %946 ], [ %939, %936 ]
  %948 = phi i64 [ %952, %946 ], [ %944, %936 ]
  %949 = bitcast %struct.MatchInfo* %947 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %949, i8 0, i64 12, i1 false) #12
  %950 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %947, i64 0, i32 3
  store float 0x47EFFFFFE0000000, float* %950, align 4
  %951 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %947, i64 1
  %952 = add i64 %948, -1
  %953 = icmp eq i64 %952, 0
  br i1 %953, label %954, label %946, !llvm.loop !22

954:                                              ; preds = %946, %936
  %955 = phi %struct.MatchInfo* [ %939, %936 ], [ %951, %946 ]
  %956 = icmp ult i64 %942, 56
  br i1 %956, label %984, label %957

957:                                              ; preds = %954, %957
  %958 = phi %struct.MatchInfo* [ %982, %957 ], [ %955, %954 ]
  %959 = bitcast %struct.MatchInfo* %958 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %959, i8 0, i64 12, i1 false) #12
  %960 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 0, i32 3
  store float 0x47EFFFFFE0000000, float* %960, align 4
  %961 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 1
  %962 = bitcast %struct.MatchInfo* %961 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %962, i8 0, i64 12, i1 false) #12
  %963 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 1, i32 3
  store float 0x47EFFFFFE0000000, float* %963, align 4
  %964 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 2
  %965 = bitcast %struct.MatchInfo* %964 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %965, i8 0, i64 12, i1 false) #12
  %966 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 2, i32 3
  store float 0x47EFFFFFE0000000, float* %966, align 4
  %967 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 3
  %968 = bitcast %struct.MatchInfo* %967 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %968, i8 0, i64 12, i1 false) #12
  %969 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 3, i32 3
  store float 0x47EFFFFFE0000000, float* %969, align 4
  %970 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 4
  %971 = bitcast %struct.MatchInfo* %970 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %971, i8 0, i64 12, i1 false) #12
  %972 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 4, i32 3
  store float 0x47EFFFFFE0000000, float* %972, align 4
  %973 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 5
  %974 = bitcast %struct.MatchInfo* %973 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %974, i8 0, i64 12, i1 false) #12
  %975 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 5, i32 3
  store float 0x47EFFFFFE0000000, float* %975, align 4
  %976 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 6
  %977 = bitcast %struct.MatchInfo* %976 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %977, i8 0, i64 12, i1 false) #12
  %978 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 6, i32 3
  store float 0x47EFFFFFE0000000, float* %978, align 4
  %979 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 7
  %980 = bitcast %struct.MatchInfo* %979 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %980, i8 0, i64 12, i1 false) #12
  %981 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 7, i32 3
  store float 0x47EFFFFFE0000000, float* %981, align 4
  %982 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %958, i64 8
  %983 = icmp eq %struct.MatchInfo* %982, %940
  br i1 %983, label %984, label %957

984:                                              ; preds = %957, %954
  %985 = ptrtoint %struct.MatchInfo* %940 to i64
  store i64 %985, i64* %722, align 8
  br label %986

986:                                              ; preds = %984, %919
  %987 = phi %struct.MatchInfo* [ null, %919 ], [ %939, %984 ]
  %988 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %987, i64 0, i32 3
  store float 0.000000e+00, float* %988, align 4
  %989 = load i64, i64* %797, align 8
  %990 = load i64, i64* %799, align 8
  %991 = icmp eq i64 %989, %990
  br i1 %991, label %1629, label %992

992:                                              ; preds = %986
  %993 = icmp eq i64 %792, 0
  %994 = icmp ne i64 %792, 0
  br label %1002

995:                                              ; preds = %1445
  %996 = icmp eq i64 %1450, 0
  br i1 %996, label %1629, label %997

997:                                              ; preds = %995
  %998 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %794, i64 %780, i32 0, i32 1
  %999 = bitcast %"struct.jxl::Token"** %998 to i64*
  %1000 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %795, i64 0, i32 0, i32 0
  %1001 = load %struct.MatchInfo*, %struct.MatchInfo** %717, align 8
  br label %1453

1002:                                             ; preds = %1445, %992
  %1003 = phi i64 [ 0, %992 ], [ %1009, %1445 ]
  %1004 = phi i64 [ 0, %992 ], [ %1447, %1445 ]
  %1005 = phi i64 [ 0, %992 ], [ %1446, %1445 ]
  call fastcc void @_ZN3jxl12_GLOBAL__N_19HashChain6UpdateEm(%"struct.jxl::(anonymous namespace)::HashChain"* nonnull %27, i64 %1003) #12
  %1006 = load %struct.MatchInfo*, %struct.MatchInfo** %717, align 8
  %1007 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1006, i64 %1003, i32 3
  %1008 = load float, float* %1007, align 4
  %1009 = add nuw i64 %1003, 1
  %1010 = load float*, float** %697, align 8
  %1011 = getelementptr inbounds float, float* %1010, i64 %1009
  %1012 = load float, float* %1011, align 4
  %1013 = fadd float %1008, %1012
  %1014 = getelementptr inbounds float, float* %1010, i64 %1003
  %1015 = load float, float* %1014, align 4
  %1016 = fsub float %1013, %1015
  %1017 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1006, i64 %1009, i32 3
  %1018 = load float, float* %1017, align 4
  %1019 = fcmp ogt float %1018, %1016
  br i1 %1019, label %1020, label %1032

1020:                                             ; preds = %1002
  %1021 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1006, i64 %1009, i32 1
  store i32 0, i32* %1021, align 4
  %1022 = load %struct.MatchInfo*, %struct.MatchInfo** %717, align 8
  %1023 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1022, i64 %1009, i32 0
  store i32 1, i32* %1023, align 4
  %1024 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %920, align 8
  %1025 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1024, i64 %1003, i32 0
  %1026 = load i32, i32* %1025, align 4
  %1027 = lshr i32 %1026, 1
  %1028 = load %struct.MatchInfo*, %struct.MatchInfo** %717, align 8
  %1029 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1028, i64 %1009, i32 2
  store i32 %1027, i32* %1029, align 4
  %1030 = load %struct.MatchInfo*, %struct.MatchInfo** %717, align 8
  %1031 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1030, i64 %1009, i32 3
  store float %1016, float* %1031, align 4
  br label %1032

1032:                                             ; preds = %1020, %1002
  %1033 = icmp eq i64 %1004, 0
  br i1 %1033, label %1036, label %1034

1034:                                             ; preds = %1032
  %1035 = add i64 %1004, -1
  br label %1445

1036:                                             ; preds = %1032
  %1037 = load i64, i64* %723, align 8
  store i64 %1037, i64* %724, align 8
  %1038 = load i64, i64* %725, align 8
  %1039 = and i64 %1038, %1003
  %1040 = trunc i64 %1039 to i32
  %1041 = add i64 %1003, 2
  %1042 = load i64, i64* %726, align 8
  %1043 = icmp ult i64 %1041, %1042
  br i1 %1043, label %1044, label %1060

1044:                                             ; preds = %1036
  %1045 = load i32*, i32** %727, align 8
  %1046 = getelementptr inbounds i32, i32* %1045, i64 %1003
  %1047 = load i32, i32* %1046, align 4
  %1048 = getelementptr inbounds i32, i32* %1045, i64 %1009
  %1049 = load i32, i32* %1048, align 4
  %1050 = load i32, i32* %728, align 8
  %1051 = shl i32 %1049, %1050
  %1052 = xor i32 %1051, %1047
  %1053 = getelementptr inbounds i32, i32* %1045, i64 %1041
  %1054 = load i32, i32* %1053, align 4
  %1055 = shl i32 %1050, 1
  %1056 = shl i32 %1054, %1055
  %1057 = xor i32 %1052, %1056
  %1058 = load i32, i32* %729, align 4
  %1059 = and i32 %1057, %1058
  br label %1060

1060:                                             ; preds = %1044, %1036
  %1061 = phi i32 [ %1059, %1044 ], [ 0, %1036 ]
  %1062 = and i64 %1039, 4294967295
  %1063 = load i32*, i32** %730, align 8
  %1064 = getelementptr inbounds i32, i32* %1063, i64 %1062
  %1065 = load i32, i32* %1064, align 4
  %1066 = load i64, i64* %731, align 8
  %1067 = add i64 %1066, %1003
  %1068 = trunc i64 %1067 to i32
  %1069 = trunc i64 %1042 to i32
  %1070 = icmp slt i32 %1069, %1068
  %1071 = select i1 %1070, i32 %1069, i32 %1068
  %1072 = trunc i64 %1003 to i32
  %1073 = xor i32 %1072, -1
  %1074 = add i32 %1071, %1073
  %1075 = sext i32 %1071 to i64
  br label %1076

1076:                                             ; preds = %1266, %1060
  %1077 = phi i32 [ %1065, %1060 ], [ %1267, %1266 ]
  %1078 = phi i32 [ 0, %1060 ], [ %1090, %1266 ]
  %1079 = phi i32 [ 0, %1060 ], [ %1235, %1266 ]
  %1080 = phi i32 [ 0, %1060 ], [ %1233, %1266 ]
  %1081 = icmp ugt i32 %1077, %1040
  %1082 = sub i32 %1040, %1077
  %1083 = zext i32 %1082 to i64
  br i1 %1081, label %1084, label %1088

1084:                                             ; preds = %1076
  %1085 = load i64, i64* %725, align 8
  %1086 = add nuw nsw i64 %1083, 1
  %1087 = add i64 %1086, %1085
  br label %1088

1088:                                             ; preds = %1084, %1076
  %1089 = phi i64 [ %1087, %1084 ], [ %1083, %1076 ]
  %1090 = trunc i64 %1089 to i32
  %1091 = icmp sgt i32 %1078, %1090
  br i1 %1091, label %1268, label %1092

1092:                                             ; preds = %1088
  %1093 = icmp sgt i32 %1090, 0
  br i1 %1093, label %1094, label %1232

1094:                                             ; preds = %1092
  %1095 = sub i64 %1003, %1089
  %1096 = trunc i64 %1095 to i32
  %1097 = load i32, i32* %733, align 8
  %1098 = icmp ugt i32 %1097, 3
  br i1 %1098, label %1099, label %1112

1099:                                             ; preds = %1094
  %1100 = add i32 %1097, -1
  %1101 = zext i32 %1077 to i64
  %1102 = load i32*, i32** %734, align 8
  %1103 = getelementptr inbounds i32, i32* %1102, i64 %1101
  %1104 = load i32, i32* %1103, align 4
  %1105 = icmp slt i32 %1104, %1100
  %1106 = select i1 %1105, i32 %1104, i32 %1100
  %1107 = add nsw i32 %1106, %1072
  %1108 = icmp slt i32 %1107, %1071
  %1109 = select i1 %1108, i32 %1106, i32 %1074
  %1110 = add nsw i32 %1109, %1072
  %1111 = add nsw i32 %1109, %1096
  br label %1112

1112:                                             ; preds = %1099, %1094
  %1113 = phi i32 [ %1110, %1099 ], [ %1072, %1094 ]
  %1114 = phi i32 [ %1111, %1099 ], [ %1096, %1094 ]
  %1115 = icmp slt i32 %1113, %1071
  br i1 %1115, label %1116, label %1136

1116:                                             ; preds = %1112
  %1117 = load i32*, i32** %727, align 8
  %1118 = sext i32 %1114 to i64
  %1119 = sext i32 %1113 to i64
  br label %1120

1120:                                             ; preds = %1129, %1116
  %1121 = phi i64 [ %1119, %1116 ], [ %1130, %1129 ]
  %1122 = phi i64 [ %1118, %1116 ], [ %1132, %1129 ]
  %1123 = phi i32 [ %1113, %1116 ], [ %1131, %1129 ]
  %1124 = getelementptr inbounds i32, i32* %1117, i64 %1121
  %1125 = load i32, i32* %1124, align 4
  %1126 = getelementptr inbounds i32, i32* %1117, i64 %1122
  %1127 = load i32, i32* %1126, align 4
  %1128 = icmp eq i32 %1125, %1127
  br i1 %1128, label %1129, label %1134

1129:                                             ; preds = %1120
  %1130 = add nsw i64 %1121, 1
  %1131 = add nsw i32 %1123, 1
  %1132 = add nsw i64 %1122, 1
  %1133 = icmp slt i64 %1130, %1075
  br i1 %1133, label %1120, label %1136

1134:                                             ; preds = %1120
  %1135 = trunc i64 %1121 to i32
  br label %1136

1136:                                             ; preds = %1129, %1134, %1112
  %1137 = phi i32 [ %1113, %1112 ], [ %1135, %1134 ], [ %1131, %1129 ]
  %1138 = sub i32 %1137, %1072
  %1139 = zext i32 %1138 to i64
  %1140 = load i64, i64* %735, align 8
  %1141 = icmp ugt i64 %1140, %1139
  %1142 = add i32 %1138, 2
  %1143 = icmp ult i32 %1142, %1080
  %1144 = or i1 %1143, %1141
  br i1 %1144, label %1232, label %1145

1145:                                             ; preds = %1136
  %1146 = shl i64 %1089, 32
  %1147 = ashr exact i64 %1146, 32
  %1148 = load i64, i64* %736, align 8
  %1149 = icmp eq i64 %1148, 0
  br i1 %1149, label %1197, label %1150

1150:                                             ; preds = %1145
  %1151 = call i64 @llvm.ctpop.i64(i64 %1148) #12, !range !2
  %1152 = icmp ugt i64 %1151, 1
  br i1 %1152, label %1156, label %1153

1153:                                             ; preds = %1150
  %1154 = add i64 %1148, -1
  %1155 = and i64 %1154, %1147
  br label %1160

1156:                                             ; preds = %1150
  %1157 = icmp ugt i64 %1148, %1147
  br i1 %1157, label %1160, label %1158

1158:                                             ; preds = %1156
  %1159 = urem i64 %1147, %1148
  br label %1160

1160:                                             ; preds = %1158, %1156, %1153
  %1161 = phi i64 [ %1155, %1153 ], [ %1159, %1158 ], [ %1147, %1156 ]
  %1162 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %737, align 8
  %1163 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %1162, i64 %1161
  %1164 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %1163, align 8
  %1165 = icmp eq %"struct.std::__1::__hash_node_base"* %1164, null
  br i1 %1165, label %1197, label %1166

1166:                                             ; preds = %1160
  %1167 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %1164, i64 0, i32 0
  %1168 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %1167, align 8
  %1169 = icmp eq %"struct.std::__1::__hash_node_base"* %1168, null
  br i1 %1169, label %1197, label %1170

1170:                                             ; preds = %1166
  %1171 = add i64 %1148, -1
  br label %1172

1172:                                             ; preds = %1193, %1170
  %1173 = phi %"struct.std::__1::__hash_node_base"* [ %1168, %1170 ], [ %1195, %1193 ]
  %1174 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %1173, i64 1
  %1175 = bitcast %"struct.std::__1::__hash_node_base"* %1174 to i64*
  %1176 = load i64, i64* %1175, align 8
  %1177 = icmp eq i64 %1176, %1147
  br i1 %1177, label %1188, label %1178

1178:                                             ; preds = %1172
  br i1 %1152, label %1181, label %1179

1179:                                             ; preds = %1178
  %1180 = and i64 %1176, %1171
  br label %1185

1181:                                             ; preds = %1178
  %1182 = icmp ult i64 %1176, %1148
  br i1 %1182, label %1185, label %1183

1183:                                             ; preds = %1181
  %1184 = urem i64 %1176, %1148
  br label %1185

1185:                                             ; preds = %1183, %1181, %1179
  %1186 = phi i64 [ %1180, %1179 ], [ %1184, %1183 ], [ %1176, %1181 ]
  %1187 = icmp eq i64 %1186, %1161
  br i1 %1187, label %1193, label %1197

1188:                                             ; preds = %1172
  %1189 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %1173, i64 2
  %1190 = bitcast %"struct.std::__1::__hash_node_base"* %1189 to i32*
  %1191 = load i32, i32* %1190, align 4
  %1192 = icmp eq i32 %1191, %1090
  br i1 %1192, label %1201, label %1193

1193:                                             ; preds = %1188, %1185
  %1194 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %1173, i64 0, i32 0
  %1195 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %1194, align 8
  %1196 = icmp eq %"struct.std::__1::__hash_node_base"* %1195, null
  br i1 %1196, label %1197, label %1172

1197:                                             ; preds = %1193, %1185, %1166, %1160, %1145
  %1198 = load i64, i64* %738, align 8
  %1199 = add nsw i64 %1147, -1
  %1200 = add i64 %1199, %1198
  br label %1206

1201:                                             ; preds = %1188
  %1202 = bitcast %"struct.std::__1::__hash_node_base"* %1189 to %"struct.std::__1::pair.231"*
  %1203 = getelementptr inbounds %"struct.std::__1::pair.231", %"struct.std::__1::pair.231"* %1202, i64 0, i32 1
  %1204 = load i32, i32* %1203, align 4
  %1205 = sext i32 %1204 to i64
  br label %1206

1206:                                             ; preds = %1201, %1197
  %1207 = phi i64 [ %1200, %1197 ], [ %1205, %1201 ]
  %1208 = shl i64 %1207, 32
  %1209 = ashr exact i64 %1208, 32
  %1210 = load i64, i64* %724, align 8
  %1211 = load i64, i64* %723, align 8
  %1212 = sub i64 %1210, %1211
  %1213 = ashr exact i64 %1212, 2
  %1214 = icmp ugt i64 %1213, %1139
  %1215 = inttoptr i64 %1211 to i32*
  br i1 %1214, label %1221, label %1216

1216:                                             ; preds = %1206
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %739) #12
  %1217 = trunc i64 %1209 to i32
  store i32 %1217, i32* %22, align 4
  %1218 = add nuw nsw i64 %1139, 1
  %1219 = sub nsw i64 %1218, %1213
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.11"* nonnull %26, i64 %1219, i32* nonnull dereferenceable(4) %22) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %739) #12
  %1220 = load i32*, i32** %700, align 8
  br label %1221

1221:                                             ; preds = %1216, %1206
  %1222 = phi i32* [ %1220, %1216 ], [ %1215, %1206 ]
  %1223 = getelementptr inbounds i32, i32* %1222, i64 %1139
  %1224 = load i32, i32* %1223, align 4
  %1225 = zext i32 %1224 to i64
  %1226 = icmp ult i64 %1209, %1225
  br i1 %1226, label %1227, label %1229

1227:                                             ; preds = %1221
  %1228 = trunc i64 %1209 to i32
  store i32 %1228, i32* %1223, align 4
  br label %1229

1229:                                             ; preds = %1227, %1221
  %1230 = icmp ugt i32 %1138, %1080
  %1231 = select i1 %1230, i32 %1138, i32 %1080
  br label %1232

1232:                                             ; preds = %1229, %1136, %1092
  %1233 = phi i32 [ %1080, %1092 ], [ %1231, %1229 ], [ %1080, %1136 ]
  %1234 = phi i32 [ 0, %1092 ], [ %1138, %1229 ], [ %1138, %1136 ]
  %1235 = add nuw i32 %1079, 1
  %1236 = load i32, i32* %740, align 8
  %1237 = icmp ult i32 %1235, %1236
  br i1 %1237, label %1238, label %1268

1238:                                             ; preds = %1232
  %1239 = load i32, i32* %733, align 8
  %1240 = icmp ugt i32 %1239, 2
  %1241 = icmp ugt i32 %1234, %1239
  %1242 = and i1 %1240, %1241
  %1243 = zext i32 %1077 to i64
  br i1 %1242, label %1244, label %1255

1244:                                             ; preds = %1238
  %1245 = load i32*, i32** %732, align 8
  %1246 = getelementptr inbounds i32, i32* %1245, i64 %1243
  %1247 = load i32, i32* %1246, align 4
  %1248 = icmp eq i32 %1077, %1247
  br i1 %1248, label %1268, label %1249

1249:                                             ; preds = %1244
  %1250 = zext i32 %1247 to i64
  %1251 = load i32*, i32** %734, align 8
  %1252 = getelementptr inbounds i32, i32* %1251, i64 %1250
  %1253 = load i32, i32* %1252, align 4
  %1254 = icmp eq i32 %1253, %1239
  br i1 %1254, label %1266, label %1268

1255:                                             ; preds = %1238
  %1256 = load i32*, i32** %730, align 8
  %1257 = getelementptr inbounds i32, i32* %1256, i64 %1243
  %1258 = load i32, i32* %1257, align 4
  %1259 = icmp eq i32 %1077, %1258
  br i1 %1259, label %1268, label %1260

1260:                                             ; preds = %1255
  %1261 = zext i32 %1258 to i64
  %1262 = load i32*, i32** %741, align 8
  %1263 = getelementptr inbounds i32, i32* %1262, i64 %1261
  %1264 = load i32, i32* %1263, align 4
  %1265 = icmp eq i32 %1264, %1061
  br i1 %1265, label %1266, label %1268

1266:                                             ; preds = %1260, %1249
  %1267 = phi i32 [ %1247, %1249 ], [ %1258, %1260 ]
  br label %1076

1268:                                             ; preds = %1260, %1255, %1249, %1244, %1232, %1088
  %1269 = load i64, i64* %724, align 8
  %1270 = load i64, i64* %723, align 8
  %1271 = sub i64 %1269, %1270
  %1272 = ashr exact i64 %1271, 2
  %1273 = icmp ugt i64 %1272, %865
  %1274 = inttoptr i64 %1269 to i32*
  %1275 = inttoptr i64 %1270 to i32*
  br i1 %1273, label %1276, label %1445

1276:                                             ; preds = %1268
  %1277 = add nsw i64 %1272, -1
  %1278 = icmp ult i64 %1277, %865
  br i1 %1278, label %1298, label %1279

1279:                                             ; preds = %1276
  %1280 = getelementptr inbounds i32, i32* %1274, i64 -1
  %1281 = load i32, i32* %1280, align 4
  %1282 = zext i32 %1281 to i64
  %1283 = getelementptr inbounds i32, i32* %1275, i64 %1277
  %1284 = load i32, i32* %1283, align 4
  %1285 = zext i32 %1284 to i64
  %1286 = icmp ugt i64 %1282, %1285
  %1287 = select i1 %1286, i64 %1285, i64 %1282
  %1288 = trunc i64 %1287 to i32
  store i32 %1288, i32* %1283, align 4
  %1289 = add nsw i64 %1272, -2
  %1290 = icmp ult i64 %1289, %865
  br i1 %1290, label %1291, label %1305

1291:                                             ; preds = %1305, %1279
  %1292 = load i64, i64* %724, align 8
  %1293 = load i64, i64* %723, align 8
  %1294 = inttoptr i64 %1293 to i32*
  %1295 = inttoptr i64 %1292 to i32*
  %1296 = sub i64 %1292, %1293
  %1297 = ashr exact i64 %1296, 2
  br label %1298

1298:                                             ; preds = %1291, %1276
  %1299 = phi i64 [ %1297, %1291 ], [ %1272, %1276 ]
  %1300 = phi i32* [ %1295, %1291 ], [ %1274, %1276 ]
  %1301 = phi i32* [ %1294, %1291 ], [ %1275, %1276 ]
  %1302 = phi i64 [ %1293, %1291 ], [ %1270, %1276 ]
  %1303 = phi i64 [ %1292, %1291 ], [ %1269, %1276 ]
  %1304 = icmp ugt i64 %1299, %865
  br i1 %1304, label %1327, label %1317

1305:                                             ; preds = %1279, %1305
  %1306 = phi i64 [ %1315, %1305 ], [ %1289, %1279 ]
  %1307 = phi i64 [ %1313, %1305 ], [ %1287, %1279 ]
  %1308 = load i32*, i32** %700, align 8
  %1309 = getelementptr inbounds i32, i32* %1308, i64 %1306
  %1310 = load i32, i32* %1309, align 4
  %1311 = zext i32 %1310 to i64
  %1312 = icmp ugt i64 %1307, %1311
  %1313 = select i1 %1312, i64 %1311, i64 %1307
  %1314 = trunc i64 %1313 to i32
  store i32 %1314, i32* %1309, align 4
  %1315 = add i64 %1306, -1
  %1316 = icmp ult i64 %1315, %865
  br i1 %1316, label %1291, label %1305

1317:                                             ; preds = %1428, %1298
  %1318 = phi i32* [ %1300, %1298 ], [ %1429, %1428 ]
  %1319 = phi i64 [ %1299, %1298 ], [ %1434, %1428 ]
  %1320 = getelementptr inbounds i32, i32* %1318, i64 -1
  %1321 = load i32, i32* %1320, align 4
  %1322 = icmp eq i32 %1321, 0
  %1323 = and i1 %993, %1322
  %1324 = icmp eq i32 %1321, 1
  %1325 = and i1 %994, %1324
  %1326 = or i1 %1323, %1325
  br i1 %1326, label %1437, label %1445

1327:                                             ; preds = %1298, %1428
  %1328 = phi i32* [ %1429, %1428 ], [ %1300, %1298 ]
  %1329 = phi i64 [ %1430, %1428 ], [ %1302, %1298 ]
  %1330 = phi i64 [ %1431, %1428 ], [ %1303, %1298 ]
  %1331 = phi i32* [ %1436, %1428 ], [ %1301, %1298 ]
  %1332 = phi i64 [ %1432, %1428 ], [ %865, %1298 ]
  %1333 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %920, align 8
  %1334 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1333, i64 %1003, i32 0
  %1335 = load i32, i32* %1334, align 4
  %1336 = lshr i32 %1335, 1
  %1337 = zext i32 %1336 to i64
  %1338 = trunc i64 %1332 to i32
  %1339 = sub i32 %1338, %864
  %1340 = load i32, i32* %742, align 4, !noalias !23
  %1341 = icmp ugt i32 %1340, %1339
  br i1 %1341, label %1364, label %1342

1342:                                             ; preds = %1327
  %1343 = call i32 @llvm.ctlz.i32(i32 %1339, i1 true) #12, !range !3
  %1344 = xor i32 %1343, 31
  %1345 = shl i32 1, %1344
  %1346 = sub i32 %1339, %1345
  %1347 = load i32, i32* %743, align 4, !noalias !23
  %1348 = sub i32 %1344, %1347
  %1349 = load i32, i32* %744, align 4, !noalias !23
  %1350 = load i32, i32* %745, align 4, !noalias !23
  %1351 = add i32 %1350, %1349
  %1352 = shl i32 %1348, %1351
  %1353 = add i32 %1352, %1340
  %1354 = sub i32 %1344, %1349
  %1355 = lshr i32 %1346, %1354
  %1356 = shl i32 %1355, %1350
  %1357 = add i32 %1353, %1356
  %1358 = shl nsw i32 -1, %1350
  %1359 = xor i32 %1358, -1
  %1360 = and i32 %1346, %1359
  %1361 = add i32 %1357, %1360
  %1362 = sub i32 %1354, %1350
  %1363 = uitofp i32 %1362 to float
  br label %1364

1364:                                             ; preds = %1342, %1327
  %1365 = phi float [ %1363, %1342 ], [ 0.000000e+00, %1327 ]
  %1366 = phi i32 [ %1361, %1342 ], [ %1339, %1327 ]
  %1367 = load i32, i32* %46, align 4
  %1368 = add i32 %1367, %1366
  %1369 = zext i32 %1368 to i64
  %1370 = load i64, i64* %712, align 8
  %1371 = mul i64 %1370, %1337
  %1372 = add i64 %1371, %1369
  %1373 = load float*, float** %713, align 8
  %1374 = getelementptr inbounds float, float* %1373, i64 %1372
  %1375 = load float, float* %1374, align 4
  %1376 = fadd float %1365, %1375
  %1377 = getelementptr inbounds i32, i32* %1331, i64 %1332
  %1378 = load i32, i32* %1377, align 4
  %1379 = icmp ult i32 %1378, 16
  br i1 %1379, label %1390, label %1380

1380:                                             ; preds = %1364
  %1381 = call i32 @llvm.ctlz.i32(i32 %1378, i1 true) #12, !range !3
  %1382 = xor i32 %1381, 31
  %1383 = shl i32 1, %1382
  %1384 = sub i32 %1378, %1383
  %1385 = shl nuw nsw i32 %1382, 2
  %1386 = add nsw i32 %1382, -2
  %1387 = lshr i32 %1384, %1386
  %1388 = add i32 %1387, %1385
  %1389 = uitofp i32 %1386 to float
  br label %1390

1390:                                             ; preds = %1380, %1364
  %1391 = phi i32 [ %1388, %1380 ], [ %1378, %1364 ]
  %1392 = phi float [ %1389, %1380 ], [ 0.000000e+00, %1364 ]
  %1393 = load i64, i64* %37, align 8
  %1394 = zext i32 %1391 to i64
  %1395 = mul i64 %1393, %1370
  %1396 = add i64 %1395, %1394
  %1397 = getelementptr inbounds float, float* %1373, i64 %1396
  %1398 = load float, float* %1397, align 4
  %1399 = fadd float %1392, %1398
  %1400 = fadd float %1376, %1399
  %1401 = load %struct.MatchInfo*, %struct.MatchInfo** %717, align 8
  %1402 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1401, i64 %1003, i32 3
  %1403 = load float, float* %1402, align 4
  %1404 = fadd float %1403, %1400
  %1405 = add i64 %1332, %1003
  %1406 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1401, i64 %1405, i32 3
  %1407 = load float, float* %1406, align 4
  %1408 = fcmp ogt float %1407, %1404
  br i1 %1408, label %1409, label %1428

1409:                                             ; preds = %1390
  %1410 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1401, i64 %1405, i32 0
  store i32 %1338, i32* %1410, align 4
  %1411 = load i32*, i32** %700, align 8
  %1412 = getelementptr inbounds i32, i32* %1411, i64 %1332
  %1413 = load i32, i32* %1412, align 4
  %1414 = add i32 %1413, 1
  %1415 = load %struct.MatchInfo*, %struct.MatchInfo** %717, align 8
  %1416 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1415, i64 %1405, i32 1
  store i32 %1414, i32* %1416, align 4
  %1417 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %920, align 8
  %1418 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1417, i64 %1003, i32 0
  %1419 = load i32, i32* %1418, align 4
  %1420 = lshr i32 %1419, 1
  %1421 = load %struct.MatchInfo*, %struct.MatchInfo** %717, align 8
  %1422 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1421, i64 %1405, i32 2
  store i32 %1420, i32* %1422, align 4
  %1423 = load %struct.MatchInfo*, %struct.MatchInfo** %717, align 8
  %1424 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1423, i64 %1405, i32 3
  store float %1404, float* %1424, align 4
  %1425 = load i64, i64* %724, align 8
  %1426 = load i64, i64* %723, align 8
  %1427 = inttoptr i64 %1425 to i32*
  br label %1428

1428:                                             ; preds = %1409, %1390
  %1429 = phi i32* [ %1427, %1409 ], [ %1328, %1390 ]
  %1430 = phi i64 [ %1426, %1409 ], [ %1329, %1390 ]
  %1431 = phi i64 [ %1425, %1409 ], [ %1330, %1390 ]
  %1432 = add nuw i64 %1332, 1
  %1433 = sub i64 %1431, %1430
  %1434 = ashr exact i64 %1433, 2
  %1435 = icmp ult i64 %1432, %1434
  %1436 = inttoptr i64 %1430 to i32*
  br i1 %1435, label %1327, label %1317

1437:                                             ; preds = %1317
  %1438 = add i64 %1005, 1
  %1439 = icmp ugt i64 %1438, 7
  %1440 = icmp ugt i64 %1319, 9
  %1441 = and i1 %1439, %1440
  %1442 = add nsw i64 %1319, -10
  %1443 = select i1 %1441, i64 0, i64 %1438
  %1444 = select i1 %1441, i64 %1442, i64 0
  br label %1445

1445:                                             ; preds = %1437, %1317, %1268, %1034
  %1446 = phi i64 [ %1005, %1034 ], [ %1005, %1268 ], [ %1443, %1437 ], [ 0, %1317 ]
  %1447 = phi i64 [ %1035, %1034 ], [ 0, %1268 ], [ %1444, %1437 ], [ 0, %1317 ]
  %1448 = load i64, i64* %797, align 8
  %1449 = load i64, i64* %799, align 8
  %1450 = sub i64 %1448, %1449
  %1451 = ashr exact i64 %1450, 3
  %1452 = icmp ult i64 %1009, %1451
  br i1 %1452, label %1002, label %995

1453:                                             ; preds = %1616, %997
  %1454 = phi %struct.MatchInfo* [ %1001, %997 ], [ %1623, %1616 ]
  %1455 = phi i64 [ %1451, %997 ], [ %1627, %1616 ]
  %1456 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1454, i64 %1455, i32 1
  %1457 = load i32, i32* %1456, align 4
  %1458 = icmp ne i32 %1457, 0
  br i1 %1458, label %1459, label %1536

1459:                                             ; preds = %1453
  %1460 = add i32 %1457, -1
  %1461 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %998, align 8
  %1462 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %859, align 8
  %1463 = icmp ult %"struct.jxl::Token"* %1461, %1462
  %1464 = ptrtoint %"struct.jxl::Token"* %1462 to i64
  br i1 %1463, label %1465, label %1473

1465:                                             ; preds = %1459
  %1466 = load i64, i64* %37, align 8
  %1467 = trunc i64 %1466 to i32
  %1468 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1461, i64 0, i32 0
  %1469 = shl i32 %1467, 1
  store i32 %1469, i32* %1468, align 4
  %1470 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1461, i64 0, i32 1
  store i32 %1460, i32* %1470, align 4
  %1471 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1461, i64 1
  %1472 = ptrtoint %"struct.jxl::Token"* %1471 to i64
  store i64 %1472, i64* %999, align 8
  br label %1530

1473:                                             ; preds = %1459
  %1474 = ptrtoint %"struct.jxl::Token"* %1461 to i64
  %1475 = load i64, i64* %857, align 8
  %1476 = sub i64 %1474, %1475
  %1477 = ashr exact i64 %1476, 3
  %1478 = add nsw i64 %1477, 1
  %1479 = icmp ugt i64 %1478, 2305843009213693951
  br i1 %1479, label %1480, label %1482

1480:                                             ; preds = %1473
  %1481 = bitcast %"class.std::__1::vector.144"* %795 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1481) #13
  unreachable

1482:                                             ; preds = %1473
  %1483 = sub i64 %1464, %1475
  %1484 = ashr exact i64 %1483, 3
  %1485 = icmp ult i64 %1484, 1152921504606846975
  br i1 %1485, label %1486, label %1494

1486:                                             ; preds = %1482
  %1487 = ashr exact i64 %1483, 2
  %1488 = icmp ult i64 %1487, %1478
  %1489 = select i1 %1488, i64 %1478, i64 %1487
  %1490 = icmp eq i64 %1489, 0
  br i1 %1490, label %1499, label %1491

1491:                                             ; preds = %1486
  %1492 = icmp ugt i64 %1489, 2305843009213693951
  br i1 %1492, label %1493, label %1494

1493:                                             ; preds = %1491
  call void @abort() #13
  unreachable

1494:                                             ; preds = %1491, %1482
  %1495 = phi i64 [ %1489, %1491 ], [ 2305843009213693951, %1482 ]
  %1496 = shl i64 %1495, 3
  %1497 = call i8* @_Znwm(i64 %1496) #14
  %1498 = bitcast i8* %1497 to %"struct.jxl::Token"*
  br label %1499

1499:                                             ; preds = %1494, %1486
  %1500 = phi i64 [ %1495, %1494 ], [ 0, %1486 ]
  %1501 = phi %"struct.jxl::Token"* [ %1498, %1494 ], [ null, %1486 ]
  %1502 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1501, i64 %1477
  %1503 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1501, i64 %1500
  %1504 = ptrtoint %"struct.jxl::Token"* %1503 to i64
  %1505 = load i64, i64* %37, align 8
  %1506 = trunc i64 %1505 to i32
  %1507 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1502, i64 0, i32 0
  %1508 = shl i32 %1506, 1
  store i32 %1508, i32* %1507, align 4
  %1509 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1501, i64 %1477, i32 1
  store i32 %1460, i32* %1509, align 4
  %1510 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1502, i64 1
  %1511 = ptrtoint %"struct.jxl::Token"* %1510 to i64
  %1512 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1000, align 8
  %1513 = load i64, i64* %999, align 8
  %1514 = ptrtoint %"struct.jxl::Token"* %1512 to i64
  %1515 = sub i64 %1513, %1514
  %1516 = ashr exact i64 %1515, 3
  %1517 = sub nsw i64 0, %1516
  %1518 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1502, i64 %1517
  %1519 = ptrtoint %"struct.jxl::Token"* %1518 to i64
  %1520 = icmp sgt i64 %1515, 0
  br i1 %1520, label %1521, label %1525

1521:                                             ; preds = %1499
  %1522 = bitcast %"struct.jxl::Token"* %1518 to i8*
  %1523 = bitcast %"struct.jxl::Token"* %1512 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1522, i8* align 4 %1523, i64 %1515, i1 false) #12
  %1524 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1000, align 8
  br label %1525

1525:                                             ; preds = %1521, %1499
  %1526 = phi %"struct.jxl::Token"* [ %1512, %1499 ], [ %1524, %1521 ]
  store i64 %1519, i64* %857, align 8
  store i64 %1511, i64* %999, align 8
  store i64 %1504, i64* %858, align 8
  %1527 = icmp eq %"struct.jxl::Token"* %1526, null
  br i1 %1527, label %1530, label %1528

1528:                                             ; preds = %1525
  %1529 = bitcast %"struct.jxl::Token"* %1526 to i8*
  call void @_ZdlPv(i8* %1529) #14
  br label %1530

1530:                                             ; preds = %1528, %1525, %1465
  %1531 = load %struct.MatchInfo*, %struct.MatchInfo** %717, align 8
  %1532 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1531, i64 %1455, i32 0
  %1533 = load i32, i32* %1532, align 4
  %1534 = zext i32 %1533 to i64
  %1535 = sub nsw i64 %1534, %865
  br label %1542

1536:                                             ; preds = %1453
  %1537 = add i64 %1455, -1
  %1538 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %920, align 8
  %1539 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1538, i64 %1537, i32 1
  %1540 = load i32, i32* %1539, align 4
  %1541 = zext i32 %1540 to i64
  br label %1542

1542:                                             ; preds = %1536, %1530
  %1543 = phi %struct.MatchInfo* [ %1531, %1530 ], [ %1454, %1536 ]
  %1544 = phi i64 [ %1535, %1530 ], [ %1541, %1536 ]
  %1545 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1543, i64 %1455, i32 2
  %1546 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %998, align 8
  %1547 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %859, align 8
  %1548 = icmp ult %"struct.jxl::Token"* %1546, %1547
  %1549 = ptrtoint %"struct.jxl::Token"* %1547 to i64
  br i1 %1548, label %1550, label %1558

1550:                                             ; preds = %1542
  %1551 = load i32, i32* %1545, align 4
  %1552 = trunc i64 %1544 to i32
  %1553 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1546, i64 0, i32 0
  %1554 = shl i32 %1551, 1
  store i32 %1554, i32* %1553, align 4
  %1555 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1546, i64 0, i32 1
  store i32 %1552, i32* %1555, align 4
  %1556 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1546, i64 1
  %1557 = ptrtoint %"struct.jxl::Token"* %1556 to i64
  store i64 %1557, i64* %999, align 8
  br label %1616

1558:                                             ; preds = %1542
  %1559 = ptrtoint %"struct.jxl::Token"* %1546 to i64
  %1560 = load i64, i64* %857, align 8
  %1561 = sub i64 %1559, %1560
  %1562 = ashr exact i64 %1561, 3
  %1563 = add nsw i64 %1562, 1
  %1564 = icmp ugt i64 %1563, 2305843009213693951
  br i1 %1564, label %1565, label %1567

1565:                                             ; preds = %1558
  %1566 = bitcast %"class.std::__1::vector.144"* %795 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1566) #13
  unreachable

1567:                                             ; preds = %1558
  %1568 = sub i64 %1549, %1560
  %1569 = ashr exact i64 %1568, 3
  %1570 = icmp ult i64 %1569, 1152921504606846975
  br i1 %1570, label %1571, label %1579

1571:                                             ; preds = %1567
  %1572 = ashr exact i64 %1568, 2
  %1573 = icmp ult i64 %1572, %1563
  %1574 = select i1 %1573, i64 %1563, i64 %1572
  %1575 = icmp eq i64 %1574, 0
  br i1 %1575, label %1584, label %1576

1576:                                             ; preds = %1571
  %1577 = icmp ugt i64 %1574, 2305843009213693951
  br i1 %1577, label %1578, label %1579

1578:                                             ; preds = %1576
  call void @abort() #13
  unreachable

1579:                                             ; preds = %1576, %1567
  %1580 = phi i64 [ %1574, %1576 ], [ 2305843009213693951, %1567 ]
  %1581 = shl i64 %1580, 3
  %1582 = call i8* @_Znwm(i64 %1581) #14
  %1583 = bitcast i8* %1582 to %"struct.jxl::Token"*
  br label %1584

1584:                                             ; preds = %1579, %1571
  %1585 = phi i64 [ %1580, %1579 ], [ 0, %1571 ]
  %1586 = phi %"struct.jxl::Token"* [ %1583, %1579 ], [ null, %1571 ]
  %1587 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1586, i64 %1562
  %1588 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1586, i64 %1585
  %1589 = ptrtoint %"struct.jxl::Token"* %1588 to i64
  %1590 = load i32, i32* %1545, align 4
  %1591 = trunc i64 %1544 to i32
  %1592 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1587, i64 0, i32 0
  %1593 = shl i32 %1590, 1
  store i32 %1593, i32* %1592, align 4
  %1594 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1586, i64 %1562, i32 1
  store i32 %1591, i32* %1594, align 4
  %1595 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1587, i64 1
  %1596 = ptrtoint %"struct.jxl::Token"* %1595 to i64
  %1597 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1000, align 8
  %1598 = load i64, i64* %999, align 8
  %1599 = ptrtoint %"struct.jxl::Token"* %1597 to i64
  %1600 = sub i64 %1598, %1599
  %1601 = ashr exact i64 %1600, 3
  %1602 = sub nsw i64 0, %1601
  %1603 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1587, i64 %1602
  %1604 = ptrtoint %"struct.jxl::Token"* %1603 to i64
  %1605 = icmp sgt i64 %1600, 0
  br i1 %1605, label %1606, label %1610

1606:                                             ; preds = %1584
  %1607 = bitcast %"struct.jxl::Token"* %1603 to i8*
  %1608 = bitcast %"struct.jxl::Token"* %1597 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1607, i8* align 4 %1608, i64 %1600, i1 false) #12
  %1609 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1000, align 8
  br label %1610

1610:                                             ; preds = %1606, %1584
  %1611 = phi %"struct.jxl::Token"* [ %1597, %1584 ], [ %1609, %1606 ]
  store i64 %1604, i64* %857, align 8
  store i64 %1596, i64* %999, align 8
  store i64 %1589, i64* %858, align 8
  %1612 = icmp eq %"struct.jxl::Token"* %1611, null
  br i1 %1612, label %1616, label %1613

1613:                                             ; preds = %1610
  %1614 = bitcast %"struct.jxl::Token"* %1611 to i8*
  call void @_ZdlPv(i8* %1614) #14
  %1615 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %998, align 8
  br label %1616

1616:                                             ; preds = %1613, %1610, %1550
  %1617 = phi %"struct.jxl::Token"* [ %1615, %1613 ], [ %1595, %1610 ], [ %1556, %1550 ]
  %1618 = zext i1 %1458 to i32
  %1619 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1617, i64 -1, i32 0
  %1620 = load i32, i32* %1619, align 4
  %1621 = and i32 %1620, -2
  %1622 = or i32 %1621, %1618
  store i32 %1622, i32* %1619, align 4
  %1623 = load %struct.MatchInfo*, %struct.MatchInfo** %717, align 8
  %1624 = getelementptr inbounds %struct.MatchInfo, %struct.MatchInfo* %1623, i64 %1455, i32 0
  %1625 = load i32, i32* %1624, align 4
  %1626 = zext i32 %1625 to i64
  %1627 = sub i64 %1455, %1626
  %1628 = icmp eq i64 %1627, 0
  br i1 %1628, label %1629, label %1453

1629:                                             ; preds = %1616, %995, %986
  %1630 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %795, i64 0, i32 0, i32 0
  %1631 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1630, align 8
  %1632 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %794, i64 %780, i32 0, i32 1
  %1633 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1632, align 8
  %1634 = icmp eq %"struct.jxl::Token"* %1631, %1633
  br i1 %1634, label %1648, label %1635

1635:                                             ; preds = %1629
  %1636 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1633, i64 -1
  %1637 = icmp ugt %"struct.jxl::Token"* %1636, %1631
  br i1 %1637, label %1638, label %1648

1638:                                             ; preds = %1635, %1638
  %1639 = phi %"struct.jxl::Token"* [ %1646, %1638 ], [ %1636, %1635 ]
  %1640 = phi %"struct.jxl::Token"* [ %1645, %1638 ], [ %1631, %1635 ]
  %1641 = bitcast %"struct.jxl::Token"* %1640 to i64*
  %1642 = load i64, i64* %1641, align 4
  %1643 = bitcast %"struct.jxl::Token"* %1639 to i64*
  %1644 = load i64, i64* %1643, align 4
  store i64 %1644, i64* %1641, align 4
  store i64 %1642, i64* %1643, align 4
  %1645 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1640, i64 1
  %1646 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1639, i64 -1
  %1647 = icmp ult %"struct.jxl::Token"* %1645, %1646
  br i1 %1647, label %1638, label %1648

1648:                                             ; preds = %1638, %1635, %1629
  %1649 = load %struct.MatchInfo*, %struct.MatchInfo** %717, align 8
  %1650 = icmp eq %struct.MatchInfo* %1649, null
  br i1 %1650, label %1654, label %1651

1651:                                             ; preds = %1648
  %1652 = ptrtoint %struct.MatchInfo* %1649 to i64
  store i64 %1652, i64* %722, align 8
  %1653 = bitcast %struct.MatchInfo* %1649 to i8*
  call void @_ZdlPv(i8* %1653) #14
  br label %1654

1654:                                             ; preds = %1651, %1648
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %716) #12
  call fastcc void @_ZN3jxl12_GLOBAL__N_19HashChainD2Ev(%"struct.jxl::(anonymous namespace)::HashChain"* nonnull %27) #12
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %715) #12
  %1655 = add nuw i64 %780, 1
  %1656 = load i64, i64* %659, align 8
  %1657 = load i64, i64* %661, align 8
  %1658 = sub i64 %1656, %1657
  %1659 = sdiv exact i64 %1658, 24
  %1660 = icmp ult i64 %1655, %1659
  br i1 %1660, label %778, label %746

1661:                                             ; preds = %777, %647
  %1662 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %649, align 8
  %1663 = icmp eq %"class.std::__1::vector.144"* %1662, null
  br i1 %1663, label %1686, label %1664

1664:                                             ; preds = %1661
  %1665 = bitcast %"class.std::__1::vector.144"* %1662 to i8*
  %1666 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %650, align 8
  %1667 = icmp eq %"class.std::__1::vector.144"* %1666, %1662
  br i1 %1667, label %1684, label %1668

1668:                                             ; preds = %1664, %1679
  %1669 = phi %"class.std::__1::vector.144"* [ %1670, %1679 ], [ %1666, %1664 ]
  %1670 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1669, i64 -1
  %1671 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1670, i64 0, i32 0, i32 0
  %1672 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1671, align 8
  %1673 = icmp eq %"struct.jxl::Token"* %1672, null
  br i1 %1673, label %1679, label %1674

1674:                                             ; preds = %1668
  %1675 = ptrtoint %"struct.jxl::Token"* %1672 to i64
  %1676 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1669, i64 -1, i32 0, i32 1
  %1677 = bitcast %"struct.jxl::Token"** %1676 to i64*
  store i64 %1675, i64* %1677, align 8
  %1678 = bitcast %"struct.jxl::Token"* %1672 to i8*
  call void @_ZdlPv(i8* %1678) #14
  br label %1679

1679:                                             ; preds = %1674, %1668
  %1680 = icmp eq %"class.std::__1::vector.144"* %1670, %1662
  br i1 %1680, label %1681, label %1668

1681:                                             ; preds = %1679
  %1682 = bitcast %"class.std::__1::vector.142"* %23 to i8**
  %1683 = load i8*, i8** %1682, align 8
  br label %1684

1684:                                             ; preds = %1681, %1664
  %1685 = phi i8* [ %1683, %1681 ], [ %1665, %1664 ]
  store %"class.std::__1::vector.144"* %1662, %"class.std::__1::vector.144"** %650, align 8
  call void @_ZdlPv(i8* %1685) #14
  br label %1686

1686:                                             ; preds = %1684, %1661
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %648) #12
  br label %1690

1687:                                             ; preds = %8
  %1688 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 1450) #12
  %1689 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

1690:                                             ; preds = %8, %645, %646, %1686
  %1691 = icmp ult i64 %1, 128
  %1692 = select i1 %1691, i64 %1, i64 128
  %1693 = bitcast %"class.jxl::BitWriter::Allotment"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %1693) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1693, i8 -86, i64 40, i1 false)
  %1694 = mul i64 %1, 40
  %1695 = add i64 %1694, 128
  %1696 = mul nuw nsw i64 %1692, 96
  %1697 = add i64 %1695, %1696
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %30, %"struct.jxl::BitWriter"* %5, i64 %1697) #12
  %1698 = icmp ne %"struct.jxl::BitWriter"* %5, null
  br i1 %1698, label %1699, label %1706

1699:                                             ; preds = %1690
  %1700 = getelementptr inbounds %"struct.jxl::LZ77Params", %"struct.jxl::LZ77Params"* %36, i64 0, i32 0
  %1701 = call i32 @_ZN3jxl6Bundle5WriteERKNS_6FieldsEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Fields"* dereferenceable(8) %1700, %"struct.jxl::BitWriter"* nonnull %5, i64 %6, %"struct.jxl::AuxOut"* %7) #12
  %1702 = icmp eq i32 %1701, 0
  br i1 %1702, label %1717, label %1703

1703:                                             ; preds = %1699
  %1704 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 1475, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.7, i64 0, i64 0)) #12
  %1705 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

1706:                                             ; preds = %1690
  %1707 = bitcast i64* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1707) #12
  store i64 -6148914691236517206, i64* %31, align 8
  %1708 = bitcast i64* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1708) #12
  store i64 -6148914691236517206, i64* %32, align 8
  %1709 = getelementptr inbounds %"struct.jxl::LZ77Params", %"struct.jxl::LZ77Params"* %36, i64 0, i32 0
  %1710 = call i32 @_ZN3jxl6Bundle9CanEncodeERKNS_6FieldsEPmS4_(%"class.jxl::Fields"* dereferenceable(8) %1709, i64* nonnull %31, i64* nonnull %32) #12
  %1711 = icmp eq i32 %1710, 0
  br i1 %1711, label %1715, label %1712

1712:                                             ; preds = %1706
  %1713 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 1478, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.8, i64 0, i64 0)) #12
  %1714 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

1715:                                             ; preds = %1706
  %1716 = load i64, i64* %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1708) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1707) #12
  br label %1717

1717:                                             ; preds = %1699, %1715
  %1718 = phi i64 [ 0, %1699 ], [ %1716, %1715 ]
  %1719 = load i8, i8* %42, align 8, !range !21
  %1720 = icmp eq i8 %1719, 0
  br i1 %1720, label %1827, label %1721

1721:                                             ; preds = %1717
  br i1 %1698, label %1722, label %1758

1722:                                             ; preds = %1721
  %1723 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %5, i64 0, i32 0
  %1724 = load i64, i64* %1723, align 8
  %1725 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3, i32 4
  %1726 = bitcast %"struct.jxl::HybridUintConfig"* %1725 to i64*
  %1727 = load i64, i64* %1726, align 4
  %1728 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3, i32 4, i32 2
  %1729 = bitcast i32* %1728 to i64*
  %1730 = load i64, i64* %1729, align 4
  %1731 = trunc i64 %1727 to i32
  %1732 = and i64 %1727, 4294967295
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %5, i64 4, i64 %1732) #12
  %1733 = icmp eq i64 %1732, 8
  br i1 %1733, label %1755, label %1734

1734:                                             ; preds = %1722
  %1735 = trunc i64 %1730 to i32
  %1736 = lshr i64 %1730, 32
  %1737 = add i32 %1731, 1
  %1738 = call i32 @llvm.ctlz.i32(i32 %1737, i1 true) #12, !range !3
  %1739 = xor i32 %1738, 31
  %1740 = zext i32 %1739 to i64
  %1741 = call i32 @llvm.ctpop.i32(i32 %1737) #12, !range !3
  %1742 = icmp ugt i32 %1741, 1
  %1743 = zext i1 %1742 to i64
  %1744 = add nuw nsw i64 %1743, %1740
  %1745 = and i64 %1730, 4294967295
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %5, i64 %1744, i64 %1745) #12
  %1746 = sub i32 %1731, %1735
  %1747 = add i32 %1746, 1
  %1748 = call i32 @llvm.ctlz.i32(i32 %1747, i1 true) #12, !range !3
  %1749 = xor i32 %1748, 31
  %1750 = zext i32 %1749 to i64
  %1751 = call i32 @llvm.ctpop.i32(i32 %1747) #12, !range !3
  %1752 = icmp ugt i32 %1751, 1
  %1753 = zext i1 %1752 to i64
  %1754 = add nuw nsw i64 %1753, %1750
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %5, i64 %1754, i64 %1736) #12
  br label %1755

1755:                                             ; preds = %1722, %1734
  %1756 = load i64, i64* %1723, align 8
  %1757 = sub i64 %1756, %1724
  br label %1788

1758:                                             ; preds = %1721
  %1759 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3, i32 4
  %1760 = bitcast %"struct.jxl::HybridUintConfig"* %1759 to i64*
  %1761 = load i64, i64* %1760, align 4
  %1762 = trunc i64 %1761 to i32
  %1763 = and i64 %1761, 4294967295
  %1764 = icmp eq i64 %1763, 8
  br i1 %1764, label %1788, label %1765

1765:                                             ; preds = %1758
  %1766 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3, i32 4, i32 2
  %1767 = bitcast i32* %1766 to i64*
  %1768 = load i64, i64* %1767, align 4
  %1769 = trunc i64 %1768 to i32
  %1770 = add i32 %1762, 1
  %1771 = call i32 @llvm.ctlz.i32(i32 %1770, i1 true) #12, !range !3
  %1772 = call i32 @llvm.ctpop.i32(i32 %1770) #12, !range !3
  %1773 = icmp ugt i32 %1772, 1
  %1774 = zext i1 %1773 to i64
  %1775 = sub i32 %1762, %1769
  %1776 = add i32 %1775, 1
  %1777 = call i32 @llvm.ctlz.i32(i32 %1776, i1 true) #12, !range !3
  %1778 = xor i32 %1777, 31
  %1779 = zext i32 %1778 to i64
  %1780 = call i32 @llvm.ctpop.i32(i32 %1776) #12, !range !3
  %1781 = icmp ugt i32 %1780, 1
  %1782 = zext i1 %1781 to i64
  %1783 = sub nuw nsw i32 35, %1771
  %1784 = zext i32 %1783 to i64
  %1785 = add nuw nsw i64 %1784, %1774
  %1786 = add nuw nsw i64 %1785, %1779
  %1787 = add nuw nsw i64 %1786, %1782
  br label %1788

1788:                                             ; preds = %1765, %1758, %1755
  %1789 = phi i64 [ %1757, %1755 ], [ %1787, %1765 ], [ 4, %1758 ]
  %1790 = add i64 %1789, %1718
  %1791 = add i64 %1, 1
  %1792 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %2, i64 0, i32 0, i32 0
  %1793 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %1792, align 8
  %1794 = icmp eq %"class.std::__1::vector.144"* %1793, null
  br i1 %1794, label %1819, label %1795

1795:                                             ; preds = %1788
  %1796 = bitcast %"class.std::__1::vector.144"* %1793 to i8*
  %1797 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %2, i64 0, i32 0, i32 1
  %1798 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %1797, align 8
  %1799 = icmp eq %"class.std::__1::vector.144"* %1798, %1793
  br i1 %1799, label %1816, label %1800

1800:                                             ; preds = %1795, %1811
  %1801 = phi %"class.std::__1::vector.144"* [ %1802, %1811 ], [ %1798, %1795 ]
  %1802 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1801, i64 -1
  %1803 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1802, i64 0, i32 0, i32 0
  %1804 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1803, align 8
  %1805 = icmp eq %"struct.jxl::Token"* %1804, null
  br i1 %1805, label %1811, label %1806

1806:                                             ; preds = %1800
  %1807 = ptrtoint %"struct.jxl::Token"* %1804 to i64
  %1808 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1801, i64 -1, i32 0, i32 1
  %1809 = bitcast %"struct.jxl::Token"** %1808 to i64*
  store i64 %1807, i64* %1809, align 8
  %1810 = bitcast %"struct.jxl::Token"* %1804 to i8*
  call void @_ZdlPv(i8* %1810) #14
  br label %1811

1811:                                             ; preds = %1806, %1800
  %1812 = icmp eq %"class.std::__1::vector.144"* %1802, %1793
  br i1 %1812, label %1813, label %1800

1813:                                             ; preds = %1811
  %1814 = bitcast %"class.std::__1::vector.142"* %2 to i8**
  %1815 = load i8*, i8** %1814, align 8
  br label %1816

1816:                                             ; preds = %1813, %1795
  %1817 = phi i8* [ %1815, %1813 ], [ %1796, %1795 ]
  store %"class.std::__1::vector.144"* %1793, %"class.std::__1::vector.144"** %1797, align 8
  call void @_ZdlPv(i8* %1817) #14
  %1818 = bitcast %"class.std::__1::vector.142"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1818, i8 0, i64 24, i1 false) #12
  br label %1819

1819:                                             ; preds = %1788, %1816
  %1820 = bitcast %"class.std::__1::vector.142"* %29 to <2 x i64>*
  %1821 = load <2 x i64>, <2 x i64>* %1820, align 16
  %1822 = bitcast %"class.std::__1::vector.142"* %2 to <2 x i64>*
  store <2 x i64> %1821, <2 x i64>* %1822, align 8
  %1823 = bitcast %"class.std::__1::vector.144"** %41 to i64*
  %1824 = load i64, i64* %1823, align 16
  %1825 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %1826 = bitcast %"class.std::__1::vector.144"** %1825 to i64*
  store i64 %1824, i64* %1826, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 0, i64 24, i1 false) #12
  br label %1827

1827:                                             ; preds = %1717, %1819
  %1828 = phi i64 [ %1, %1717 ], [ %1791, %1819 ]
  %1829 = phi i64 [ %1718, %1717 ], [ %1790, %1819 ]
  %1830 = bitcast %"class.jxl::(anonymous namespace)::HistogramBuilder"* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1830) #12
  %1831 = getelementptr inbounds %"class.jxl::(anonymous namespace)::HistogramBuilder", %"class.jxl::(anonymous namespace)::HistogramBuilder"* %33, i64 0, i32 0, i32 0, i32 0
  %1832 = getelementptr inbounds %"class.jxl::(anonymous namespace)::HistogramBuilder", %"class.jxl::(anonymous namespace)::HistogramBuilder"* %33, i64 0, i32 0, i32 0, i32 1
  %1833 = getelementptr inbounds %"class.jxl::(anonymous namespace)::HistogramBuilder", %"class.jxl::(anonymous namespace)::HistogramBuilder"* %33, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1830, i8 0, i64 24, i1 false) #12
  %1834 = icmp eq i64 %1828, 0
  br i1 %1834, label %1854, label %1835

1835:                                             ; preds = %1827
  %1836 = icmp ugt i64 %1828, 461168601842738790
  br i1 %1836, label %1837, label %1839

1837:                                             ; preds = %1835
  %1838 = bitcast %"class.jxl::(anonymous namespace)::HistogramBuilder"* %33 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1838) #13
  unreachable

1839:                                             ; preds = %1835
  %1840 = mul i64 %1828, 40
  %1841 = call i8* @_Znwm(i64 %1840) #14
  %1842 = bitcast i8* %1841 to %"struct.jxl::Histogram"*
  %1843 = bitcast %"struct.jxl::Histogram"** %1832 to i8**
  store i8* %1841, i8** %1843, align 8
  %1844 = bitcast %"class.jxl::(anonymous namespace)::HistogramBuilder"* %33 to i8**
  store i8* %1841, i8** %1844, align 8
  %1845 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1842, i64 %1828
  store %"struct.jxl::Histogram"* %1845, %"struct.jxl::Histogram"** %1833, align 8
  br label %1846

1846:                                             ; preds = %1846, %1839
  %1847 = phi %"struct.jxl::Histogram"* [ %1849, %1846 ], [ %1842, %1839 ]
  %1848 = bitcast %"struct.jxl::Histogram"* %1847 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1848, i8 0, i64 32, i1 false) #12
  %1849 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1847, i64 1
  %1850 = icmp eq %"struct.jxl::Histogram"* %1849, %1845
  br i1 %1850, label %1851, label %1846

1851:                                             ; preds = %1846
  %1852 = bitcast %"struct.jxl::Histogram"** %1832 to i64*
  %1853 = ptrtoint %"struct.jxl::Histogram"* %1845 to i64
  store i64 %1853, i64* %1852, align 8
  br label %1854

1854:                                             ; preds = %1827, %1851
  %1855 = bitcast <4 x i32>* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1855) #12
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %34, align 16
  %1856 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 1
  %1857 = load i32, i32* %1856, align 4
  %1858 = icmp eq i32 %1857, 2
  %1859 = select i1 %1858, <4 x i32> <i32 2, i32 4, i32 0, i32 1>, <4 x i32> <i32 4, i32 16, i32 2, i32 0>
  store <4 x i32> %1859, <4 x i32>* %34, align 16
  %1860 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %2, i64 0, i32 0, i32 1
  %1861 = bitcast %"class.std::__1::vector.144"** %1860 to i64*
  %1862 = load i64, i64* %1861, align 8
  %1863 = bitcast %"class.std::__1::vector.142"* %2 to i64*
  %1864 = load i64, i64* %1863, align 8
  %1865 = icmp eq i64 %1862, %1864
  br i1 %1865, label %2011, label %1866

1866:                                             ; preds = %1854
  %1867 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %2, i64 0, i32 0, i32 0
  %1868 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3, i32 4
  br label %1869

1869:                                             ; preds = %1866, %1890
  %1870 = phi i64 [ %1864, %1866 ], [ %1891, %1890 ]
  %1871 = phi i64 [ %1862, %1866 ], [ %1892, %1890 ]
  %1872 = phi i64 [ 0, %1866 ], [ %1894, %1890 ]
  %1873 = phi i64 [ 0, %1866 ], [ %1893, %1890 ]
  %1874 = inttoptr i64 %1870 to %"class.std::__1::vector.144"*
  %1875 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1874, i64 %1872
  %1876 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1874, i64 %1872, i32 0, i32 1
  %1877 = bitcast %"struct.jxl::Token"** %1876 to i64*
  %1878 = load i64, i64* %1877, align 8
  %1879 = bitcast %"class.std::__1::vector.144"* %1875 to i64*
  %1880 = load i64, i64* %1879, align 8
  %1881 = icmp eq i64 %1878, %1880
  br i1 %1881, label %1890, label %1898

1882:                                             ; preds = %1890
  %1883 = load i8, i8* %43, align 8, !range !21
  %1884 = icmp ne i8 %1883, 0
  %1885 = icmp ult i64 %1893, 100
  %1886 = or i1 %1885, %1884
  br i1 %1886, label %2011, label %1991

1887:                                             ; preds = %1972
  %1888 = ptrtoint %"class.std::__1::vector.144"* %1981 to i64
  %1889 = load i64, i64* %1861, align 8
  br label %1890

1890:                                             ; preds = %1887, %1869
  %1891 = phi i64 [ %1870, %1869 ], [ %1888, %1887 ]
  %1892 = phi i64 [ %1871, %1869 ], [ %1889, %1887 ]
  %1893 = phi i64 [ %1873, %1869 ], [ %1908, %1887 ]
  %1894 = add nuw i64 %1872, 1
  %1895 = sub i64 %1892, %1891
  %1896 = sdiv exact i64 %1895, 24
  %1897 = icmp ult i64 %1894, %1896
  br i1 %1897, label %1869, label %1882

1898:                                             ; preds = %1869, %1972
  %1899 = phi %"class.std::__1::vector.144"* [ %1981, %1972 ], [ %1874, %1869 ]
  %1900 = phi i64 [ %1980, %1972 ], [ 0, %1869 ]
  %1901 = phi i64 [ %1908, %1972 ], [ %1873, %1869 ]
  %1902 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1899, i64 %1872, i32 0, i32 0
  %1903 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1902, align 8
  %1904 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1903, i64 %1900, i32 0
  %1905 = load i32, i32* %1904, align 4
  %1906 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1903, i64 %1900, i32 1
  %1907 = load i32, i32* %1906, align 4
  %1908 = add i64 %1901, 1
  %1909 = and i32 %1905, 1
  %1910 = icmp ne i32 %1909, 0
  %1911 = select i1 %1910, %"struct.jxl::HybridUintConfig"* %1868, %"struct.jxl::HybridUintConfig"* %35
  %1912 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %1911, i64 0, i32 1
  %1913 = load i32, i32* %1912, align 4, !noalias !28
  %1914 = icmp ugt i32 %1913, %1907
  br i1 %1914, label %1938, label %1915

1915:                                             ; preds = %1898
  %1916 = call i32 @llvm.ctlz.i32(i32 %1907, i1 true) #12, !range !3
  %1917 = xor i32 %1916, 31
  %1918 = shl i32 1, %1917
  %1919 = sub i32 %1907, %1918
  %1920 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %1911, i64 0, i32 0
  %1921 = load i32, i32* %1920, align 4, !noalias !28
  %1922 = sub i32 %1917, %1921
  %1923 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %1911, i64 0, i32 2
  %1924 = load i32, i32* %1923, align 4, !noalias !28
  %1925 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %1911, i64 0, i32 3
  %1926 = load i32, i32* %1925, align 4, !noalias !28
  %1927 = add i32 %1926, %1924
  %1928 = shl i32 %1922, %1927
  %1929 = add i32 %1928, %1913
  %1930 = sub i32 %1917, %1924
  %1931 = lshr i32 %1919, %1930
  %1932 = shl i32 %1931, %1926
  %1933 = add i32 %1929, %1932
  %1934 = shl nsw i32 -1, %1926
  %1935 = xor i32 %1934, -1
  %1936 = and i32 %1919, %1935
  %1937 = add i32 %1933, %1936
  br label %1938

1938:                                             ; preds = %1898, %1915
  %1939 = phi i32 [ %1937, %1915 ], [ %1907, %1898 ]
  br i1 %1910, label %1940, label %1942

1940:                                             ; preds = %1938
  %1941 = load i32, i32* %46, align 4
  br label %1942

1942:                                             ; preds = %1938, %1940
  %1943 = phi i32 [ %1941, %1940 ], [ 0, %1938 ]
  %1944 = add i32 %1943, %1939
  %1945 = lshr i32 %1905, 1
  %1946 = zext i32 %1945 to i64
  %1947 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %1831, align 8
  %1948 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1947, i64 %1946
  %1949 = sext i32 %1944 to i64
  %1950 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1948, i64 0, i32 0
  %1951 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1947, i64 %1946, i32 0, i32 0, i32 1
  %1952 = bitcast i32** %1951 to i64*
  %1953 = load i64, i64* %1952, align 8
  %1954 = bitcast %"struct.jxl::Histogram"* %1948 to i64*
  %1955 = load i64, i64* %1954, align 8
  %1956 = sub i64 %1953, %1955
  %1957 = ashr exact i64 %1956, 2
  %1958 = icmp ugt i64 %1957, %1949
  %1959 = inttoptr i64 %1955 to i32*
  br i1 %1958, label %1972, label %1960

1960:                                             ; preds = %1942
  %1961 = add nsw i64 %1949, 8
  %1962 = and i64 %1961, -8
  %1963 = icmp ugt i64 %1962, %1957
  br i1 %1963, label %1964, label %1968

1964:                                             ; preds = %1960
  %1965 = sub nsw i64 %1962, %1957
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.128"* %1950, i64 %1965) #12
  %1966 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1948, i64 0, i32 0, i32 0, i32 0
  %1967 = load i32*, i32** %1966, align 8
  br label %1972

1968:                                             ; preds = %1960
  %1969 = icmp ult i64 %1962, %1957
  br i1 %1969, label %1970, label %1972

1970:                                             ; preds = %1968
  %1971 = getelementptr inbounds i32, i32* %1959, i64 %1962
  store i32* %1971, i32** %1951, align 8
  br label %1972

1972:                                             ; preds = %1942, %1964, %1968, %1970
  %1973 = phi i32* [ %1959, %1970 ], [ %1959, %1968 ], [ %1967, %1964 ], [ %1959, %1942 ]
  %1974 = getelementptr inbounds i32, i32* %1973, i64 %1949
  %1975 = load i32, i32* %1974, align 4
  %1976 = add nsw i32 %1975, 1
  store i32 %1976, i32* %1974, align 4
  %1977 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1947, i64 %1946, i32 1
  %1978 = load i64, i64* %1977, align 8
  %1979 = add i64 %1978, 1
  store i64 %1979, i64* %1977, align 8
  %1980 = add nuw i64 %1900, 1
  %1981 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %1867, align 8
  %1982 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1981, i64 %1872
  %1983 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %1981, i64 %1872, i32 0, i32 1
  %1984 = bitcast %"struct.jxl::Token"** %1983 to i64*
  %1985 = load i64, i64* %1984, align 8
  %1986 = bitcast %"class.std::__1::vector.144"* %1982 to i64*
  %1987 = load i64, i64* %1986, align 8
  %1988 = sub i64 %1985, %1987
  %1989 = ashr exact i64 %1988, 3
  %1990 = icmp ult i64 %1980, %1989
  br i1 %1990, label %1898, label %1887

1991:                                             ; preds = %1882
  %1992 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 0
  %1993 = load i32, i32* %1992, align 8
  %1994 = icmp eq i32 %1993, 0
  br i1 %1994, label %2011, label %1995

1995:                                             ; preds = %1991
  br i1 %1834, label %1996, label %2000

1996:                                             ; preds = %2000, %1995
  %1997 = phi i8 [ 1, %1995 ], [ %2008, %2000 ]
  %1998 = and i8 %1997, 1
  %1999 = icmp ne i8 %1998, 0
  br label %2011

2000:                                             ; preds = %1995, %2000
  %2001 = phi i64 [ %2009, %2000 ], [ 0, %1995 ]
  %2002 = phi i8 [ %2008, %2000 ], [ 1, %1995 ]
  %2003 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %1831, align 8
  %2004 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2003, i64 %2001
  %2005 = call float @_ZNK3jxl9Histogram14ShannonEntropyEv(%"struct.jxl::Histogram"* %2004) #12
  %2006 = fpext float %2005 to double
  %2007 = fcmp ult double %2006, 1.000000e-05
  %2008 = select i1 %2007, i8 %2002, i8 0
  %2009 = add nuw i64 %2001, 1
  %2010 = icmp eq i64 %2009, %1828
  br i1 %2010, label %1996, label %2000

2011:                                             ; preds = %1854, %1882, %1996, %1991
  %2012 = phi i1 [ true, %1991 ], [ %1999, %1996 ], [ true, %1882 ], [ true, %1854 ]
  %2013 = bitcast %"struct.jxl::HistogramParams"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %2013)
  %2014 = zext i1 %2012 to i8
  %2015 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 0
  %2016 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 0, i32 0, i32 0
  %2017 = load %"class.std::__1::vector.158"*, %"class.std::__1::vector.158"** %2016, align 8
  %2018 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 0, i32 0, i32 1
  %2019 = load %"class.std::__1::vector.158"*, %"class.std::__1::vector.158"** %2018, align 8
  %2020 = icmp eq %"class.std::__1::vector.158"* %2019, %2017
  br i1 %2020, label %2052, label %2021

2021:                                             ; preds = %2011, %2050
  %2022 = phi %"class.std::__1::vector.158"* [ %2023, %2050 ], [ %2019, %2011 ]
  %2023 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %2022, i64 -1
  %2024 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %2023, i64 0, i32 0, i32 0
  %2025 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %2024, align 8
  %2026 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %2025, null
  br i1 %2026, label %2050, label %2027

2027:                                             ; preds = %2021
  %2028 = bitcast %"struct.jxl::ANSEncSymbolInfo"* %2025 to i8*
  %2029 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %2022, i64 -1, i32 0, i32 1
  %2030 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %2029, align 8
  %2031 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %2030, %2025
  br i1 %2031, label %2048, label %2032

2032:                                             ; preds = %2027, %2043
  %2033 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %2034, %2043 ], [ %2030, %2027 ]
  %2034 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %2033, i64 -1
  %2035 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %2033, i64 -1, i32 2, i32 0, i32 0
  %2036 = load i16*, i16** %2035, align 8
  %2037 = icmp eq i16* %2036, null
  br i1 %2037, label %2043, label %2038

2038:                                             ; preds = %2032
  %2039 = ptrtoint i16* %2036 to i64
  %2040 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %2033, i64 -1, i32 2, i32 0, i32 1
  %2041 = bitcast i16** %2040 to i64*
  store i64 %2039, i64* %2041, align 8
  %2042 = bitcast i16* %2036 to i8*
  call void @_ZdlPv(i8* %2042) #14
  br label %2043

2043:                                             ; preds = %2038, %2032
  %2044 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %2034, %2025
  br i1 %2044, label %2045, label %2032

2045:                                             ; preds = %2043
  %2046 = bitcast %"class.std::__1::vector.158"* %2023 to i8**
  %2047 = load i8*, i8** %2046, align 8
  br label %2048

2048:                                             ; preds = %2045, %2027
  %2049 = phi i8* [ %2047, %2045 ], [ %2028, %2027 ]
  store %"struct.jxl::ANSEncSymbolInfo"* %2025, %"struct.jxl::ANSEncSymbolInfo"** %2029, align 8
  call void @_ZdlPv(i8* %2049) #14
  br label %2050

2050:                                             ; preds = %2048, %2021
  %2051 = icmp eq %"class.std::__1::vector.158"* %2023, %2017
  br i1 %2051, label %2052, label %2021

2052:                                             ; preds = %2050, %2011
  store %"class.std::__1::vector.158"* %2017, %"class.std::__1::vector.158"** %2018, align 8
  %2053 = bitcast %"class.std::__1::vector.170"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2053) #12
  %2054 = getelementptr inbounds %"class.std::__1::vector.170", %"class.std::__1::vector.170"* %16, i64 0, i32 0, i32 0
  %2055 = getelementptr inbounds %"class.std::__1::vector.170", %"class.std::__1::vector.170"* %16, i64 0, i32 0, i32 1
  %2056 = getelementptr inbounds %"class.jxl::(anonymous namespace)::HistogramBuilder", %"class.jxl::(anonymous namespace)::HistogramBuilder"* %33, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2053, i8 -86, i64 24, i1 false) #12
  call void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEEC2ERKS5_(%"class.std::__1::vector.170"* nonnull %16, %"class.std::__1::vector.170"* nonnull dereferenceable(24) %2056) #12
  %2057 = bitcast %"struct.jxl::Histogram"** %1832 to i64*
  %2058 = load i64, i64* %2057, align 8
  %2059 = bitcast %"class.jxl::(anonymous namespace)::HistogramBuilder"* %33 to i64*
  %2060 = load i64, i64* %2059, align 8
  %2061 = sub i64 %2058, %2060
  %2062 = sdiv exact i64 %2061, 40
  %2063 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %4, i64 0, i32 0, i32 1
  %2064 = bitcast i8** %2063 to i64*
  %2065 = load i64, i64* %2064, align 8
  %2066 = bitcast %"class.std::__1::vector.18"* %4 to i64*
  %2067 = load i64, i64* %2066, align 8
  %2068 = sub i64 %2065, %2067
  %2069 = icmp ugt i64 %2062, %2068
  %2070 = inttoptr i64 %2067 to i8*
  br i1 %2069, label %2071, label %2077

2071:                                             ; preds = %2052
  %2072 = sub i64 %2062, %2068
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.18"* %4, i64 %2072) #12
  %2073 = load i64, i64* %2057, align 8
  %2074 = load i64, i64* %2059, align 8
  %2075 = sub i64 %2073, %2074
  %2076 = sdiv exact i64 %2075, 40
  br label %2081

2077:                                             ; preds = %2052
  %2078 = icmp ult i64 %2062, %2068
  br i1 %2078, label %2079, label %2081

2079:                                             ; preds = %2077
  %2080 = getelementptr inbounds i8, i8* %2070, i64 %2062
  store i8* %2080, i8** %2063, align 8
  br label %2081

2081:                                             ; preds = %2079, %2077, %2071
  %2082 = phi i64 [ %2062, %2079 ], [ %2062, %2077 ], [ %2076, %2071 ]
  %2083 = icmp ugt i64 %2082, 1
  br i1 %2083, label %2084, label %2173

2084:                                             ; preds = %2081
  %2085 = bitcast %"class.std::__1::vector.11"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2085) #12
  %2086 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %17, i64 0, i32 0, i32 0
  %2087 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %17, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2085, i8 0, i64 24, i1 false) #12
  %2088 = bitcast %"struct.jxl::HistogramParams"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2013, i8* align 8 %2088, i64 16, i1 false) #12
  %2089 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %18, i64 0, i32 4
  %2090 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 4
  %2091 = bitcast %"class.std::__1::vector.135"* %2089 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2091, i8 0, i64 24, i1 false) #12
  %2092 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 4, i32 0, i32 1
  %2093 = bitcast i64** %2092 to i64*
  %2094 = load i64, i64* %2093, align 8
  %2095 = bitcast %"class.std::__1::vector.135"* %2090 to i64*
  %2096 = load i64, i64* %2095, align 8
  %2097 = sub i64 %2094, %2096
  %2098 = ashr exact i64 %2097, 3
  %2099 = icmp eq i64 %2097, 0
  br i1 %2099, label %2122, label %2100

2100:                                             ; preds = %2084
  %2101 = icmp ugt i64 %2098, 2305843009213693951
  br i1 %2101, label %2102, label %2104

2102:                                             ; preds = %2100
  %2103 = bitcast %"class.std::__1::vector.135"* %2089 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %2103) #13
  unreachable

2104:                                             ; preds = %2100
  %2105 = call i8* @_Znwm(i64 %2097) #14
  %2106 = bitcast i8* %2105 to i64*
  %2107 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %18, i64 0, i32 4, i32 0, i32 1
  %2108 = bitcast i64** %2107 to i8**
  store i8* %2105, i8** %2108, align 8
  %2109 = bitcast %"class.std::__1::vector.135"* %2089 to i8**
  store i8* %2105, i8** %2109, align 8
  %2110 = getelementptr inbounds i64, i64* %2106, i64 %2098
  %2111 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %18, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  store i64* %2110, i64** %2111, align 8
  %2112 = bitcast i64** %2107 to i64*
  %2113 = ptrtoint i8* %2105 to i64
  %2114 = icmp sgt i64 %2097, 0
  br i1 %2114, label %2115, label %2120

2115:                                             ; preds = %2104
  %2116 = lshr exact i64 %2097, 3
  %2117 = inttoptr i64 %2096 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2105, i8* align 8 %2117, i64 %2097, i1 false) #12
  %2118 = getelementptr inbounds i64, i64* %2106, i64 %2116
  %2119 = ptrtoint i64* %2118 to i64
  br label %2120

2120:                                             ; preds = %2115, %2104
  %2121 = phi i64 [ %2119, %2115 ], [ %2113, %2104 ]
  store i64 %2121, i64* %2112, align 8
  br label %2122

2122:                                             ; preds = %2120, %2084
  %2123 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %18, i64 0, i32 5
  %2124 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 5
  %2125 = bitcast i64* %2123 to i8*
  %2126 = bitcast i64* %2124 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2125, i8* align 8 %2126, i64 9, i1 false) #12
  call void @_ZN3jxl17ClusterHistogramsENS_15HistogramParamsERKNSt3__16vectorINS_9HistogramENS1_9allocatorIS3_EEEEmmPS6_PNS2_IjNS4_IjEEEE(%"struct.jxl::HistogramParams"* nonnull %18, %"class.std::__1::vector.170"* nonnull dereferenceable(24) %2056, i64 %2082, i64 128, %"class.std::__1::vector.170"* nonnull %16, %"class.std::__1::vector.11"* nonnull %17) #12
  %2127 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %18, i64 0, i32 4, i32 0, i32 0
  %2128 = load i64*, i64** %2127, align 8
  %2129 = icmp eq i64* %2128, null
  br i1 %2129, label %2135, label %2130

2130:                                             ; preds = %2122
  %2131 = ptrtoint i64* %2128 to i64
  %2132 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %18, i64 0, i32 4, i32 0, i32 1
  %2133 = bitcast i64** %2132 to i64*
  store i64 %2131, i64* %2133, align 8
  %2134 = bitcast i64* %2128 to i8*
  call void @_ZdlPv(i8* %2134) #14
  br label %2135

2135:                                             ; preds = %2130, %2122
  %2136 = load i64, i64* %2057, align 8
  %2137 = load i64, i64* %2059, align 8
  %2138 = icmp eq i64 %2136, %2137
  %2139 = load i32*, i32** %2086, align 8
  br i1 %2138, label %2142, label %2140

2140:                                             ; preds = %2135
  %2141 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %4, i64 0, i32 0, i32 0
  br label %2151

2142:                                             ; preds = %2151, %2135
  %2143 = phi i32* [ %2139, %2135 ], [ %2165, %2151 ]
  %2144 = icmp eq i32* %2143, null
  br i1 %2144, label %2149, label %2145

2145:                                             ; preds = %2142
  %2146 = ptrtoint i32* %2143 to i64
  %2147 = bitcast i32** %2087 to i64*
  store i64 %2146, i64* %2147, align 8
  %2148 = bitcast i32* %2143 to i8*
  call void @_ZdlPv(i8* %2148) #14
  br label %2149

2149:                                             ; preds = %2145, %2142
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2085) #12
  %2150 = icmp eq %"struct.jxl::BitWriter"* %5, null
  br i1 %2150, label %2173, label %2166

2151:                                             ; preds = %2151, %2140
  %2152 = phi i32* [ %2139, %2140 ], [ %2165, %2151 ]
  %2153 = phi i64 [ 0, %2140 ], [ %2159, %2151 ]
  %2154 = getelementptr inbounds i32, i32* %2152, i64 %2153
  %2155 = load i32, i32* %2154, align 4
  %2156 = trunc i32 %2155 to i8
  %2157 = load i8*, i8** %2141, align 8
  %2158 = getelementptr inbounds i8, i8* %2157, i64 %2153
  store i8 %2156, i8* %2158, align 1
  %2159 = add nuw i64 %2153, 1
  %2160 = load i64, i64* %2057, align 8
  %2161 = load i64, i64* %2059, align 8
  %2162 = sub i64 %2160, %2161
  %2163 = sdiv exact i64 %2162, 40
  %2164 = icmp ult i64 %2159, %2163
  %2165 = load i32*, i32** %2086, align 8
  br i1 %2164, label %2151, label %2142

2166:                                             ; preds = %2149
  %2167 = bitcast %"struct.jxl::Histogram"** %2055 to i64*
  %2168 = load i64, i64* %2167, align 8
  %2169 = bitcast %"class.std::__1::vector.170"* %16 to i64*
  %2170 = load i64, i64* %2169, align 8
  %2171 = sub i64 %2168, %2170
  %2172 = sdiv exact i64 %2171, 40
  call void @_ZN3jxl16EncodeContextMapERKNSt3__16vectorIhNS0_9allocatorIhEEEEmPNS_9BitWriterE(%"class.std::__1::vector.18"* dereferenceable(24) %4, i64 %2172, %"struct.jxl::BitWriter"* nonnull %5) #12
  br label %2173

2173:                                             ; preds = %2166, %2149, %2081
  %2174 = icmp eq %"struct.jxl::AuxOut"* %7, null
  %2175 = bitcast %"struct.jxl::Histogram"** %2055 to i64*
  %2176 = load i64, i64* %2175, align 8
  %2177 = bitcast %"class.std::__1::vector.170"* %16 to i64*
  %2178 = load i64, i64* %2177, align 8
  br i1 %2174, label %2198, label %2179

2179:                                             ; preds = %2173
  %2180 = icmp eq i64 %2176, %2178
  br i1 %2180, label %2198, label %2181

2181:                                             ; preds = %2179
  %2182 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %7, i64 0, i32 0, i32 0, i64 %6, i32 4
  br label %2183

2183:                                             ; preds = %2183, %2181
  %2184 = phi i64 [ %2178, %2181 ], [ %2194, %2183 ]
  %2185 = phi i64 [ 0, %2181 ], [ %2192, %2183 ]
  %2186 = inttoptr i64 %2184 to %"struct.jxl::Histogram"*
  %2187 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2186, i64 %2185
  %2188 = call float @_ZNK3jxl9Histogram14ShannonEntropyEv(%"struct.jxl::Histogram"* %2187) #12
  %2189 = fpext float %2188 to double
  %2190 = load double, double* %2182, align 8
  %2191 = fadd double %2190, %2189
  store double %2191, double* %2182, align 8
  %2192 = add nuw i64 %2185, 1
  %2193 = load i64, i64* %2175, align 8
  %2194 = load i64, i64* %2177, align 8
  %2195 = sub i64 %2193, %2194
  %2196 = sdiv exact i64 %2195, 40
  %2197 = icmp ult i64 %2192, %2196
  br i1 %2197, label %2183, label %2198

2198:                                             ; preds = %2183, %2179, %2173
  %2199 = phi i64 [ %2176, %2179 ], [ %2178, %2173 ], [ %2194, %2183 ]
  %2200 = phi i64 [ %2176, %2179 ], [ %2176, %2173 ], [ %2193, %2183 ]
  %2201 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 1
  store i8 %2014, i8* %2201, align 8
  %2202 = load i8, i8* %42, align 8, !range !21
  %2203 = icmp eq i8 %2202, 0
  %2204 = select i1 %2203, i64 7, i64 8
  %2205 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 2
  %2206 = sub i64 %2200, %2199
  %2207 = sdiv exact i64 %2206, 40
  %2208 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 2, i32 0, i32 1
  %2209 = bitcast %"struct.jxl::HybridUintConfig"** %2208 to i64*
  %2210 = load i64, i64* %2209, align 8
  %2211 = bitcast %"class.std::__1::vector"* %2205 to i64*
  %2212 = load i64, i64* %2211, align 8
  %2213 = sub i64 %2210, %2212
  %2214 = ashr exact i64 %2213, 4
  %2215 = icmp ugt i64 %2207, %2214
  %2216 = inttoptr i64 %2212 to %"struct.jxl::HybridUintConfig"*
  br i1 %2215, label %2217, label %2219

2217:                                             ; preds = %2198
  %2218 = sub nsw i64 %2207, %2214
  call void @_ZNSt3__16vectorIN3jxl16HybridUintConfigENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"* %2205, i64 %2218) #12
  br label %2223

2219:                                             ; preds = %2198
  %2220 = icmp ult i64 %2207, %2214
  br i1 %2220, label %2221, label %2223

2221:                                             ; preds = %2219
  %2222 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %2216, i64 %2207
  store %"struct.jxl::HybridUintConfig"* %2222, %"struct.jxl::HybridUintConfig"** %2208, align 8
  br label %2223

2223:                                             ; preds = %2221, %2219, %2217
  %2224 = load i32, i32* %1856, align 4
  switch i32 %2224, label %2235 [
    i32 0, label %2910
    i32 2, label %2225
  ]

2225:                                             ; preds = %2223
  %2226 = load i64, i64* %2211, align 8
  store i64 %2226, i64* %2209, align 8
  %2227 = load i64, i64* %2175, align 8
  %2228 = load i64, i64* %2177, align 8
  %2229 = sub i64 %2227, %2228
  %2230 = bitcast <4 x i32>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2230) #12
  store <4 x i32> <i32 2, i32 4, i32 0, i32 1>, <4 x i32>* %9, align 16
  %2231 = icmp eq i64 %2229, 0
  br i1 %2231, label %2234, label %2232

2232:                                             ; preds = %2225
  %2233 = sdiv exact i64 %2229, 40
  call void @_ZNSt3__16vectorIN3jxl16HybridUintConfigENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector"* %2205, i64 %2233, %"struct.jxl::HybridUintConfig"* nonnull dereferenceable(16) %10) #12
  br label %2234

2234:                                             ; preds = %2232, %2225
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2230) #12
  br label %2910

2235:                                             ; preds = %2223
  %2236 = bitcast %"class.std::__1::vector"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2236) #12
  %2237 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %11, i64 0, i32 0, i32 0
  %2238 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %11, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2236, i8 0, i64 24, i1 false) #12
  switch i32 %2224, label %2309 [
    i32 3, label %2239
    i32 1, label %2298
  ]

2239:                                             ; preds = %2235
  %2240 = bitcast [28 x %"struct.jxl::HybridUintConfig"]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 448, i8* nonnull %2240) #12
  %2241 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 0
  %2242 = bitcast [28 x %"struct.jxl::HybridUintConfig"]* %12 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %2242, align 16
  %2243 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 1, i32 0
  %2244 = bitcast i32* %2243 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 1, i32 0>, <4 x i32>* %2244, align 16
  %2245 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 2, i32 0
  %2246 = bitcast i32* %2245 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 1>, <4 x i32>* %2246, align 16
  %2247 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 3, i32 0
  %2248 = bitcast i32* %2247 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 2>, <4 x i32>* %2248, align 16
  %2249 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 4, i32 0
  %2250 = bitcast i32* %2249 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 1, i32 2>, <4 x i32>* %2250, align 16
  %2251 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 5, i32 0
  %2252 = bitcast i32* %2251 to <4 x i32>*
  store <4 x i32> <i32 5, i32 32, i32 2, i32 0>, <4 x i32>* %2252, align 16
  %2253 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 6, i32 0
  %2254 = bitcast i32* %2253 to <4 x i32>*
  store <4 x i32> <i32 5, i32 32, i32 1, i32 0>, <4 x i32>* %2254, align 16
  %2255 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 7, i32 0
  %2256 = bitcast i32* %2255 to <4 x i32>*
  store <4 x i32> <i32 5, i32 32, i32 2, i32 1>, <4 x i32>* %2256, align 16
  %2257 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 8, i32 0
  %2258 = bitcast i32* %2257 to <4 x i32>*
  store <4 x i32> <i32 5, i32 32, i32 2, i32 2>, <4 x i32>* %2258, align 16
  %2259 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 9, i32 0
  %2260 = bitcast i32* %2259 to <4 x i32>*
  store <4 x i32> <i32 5, i32 32, i32 1, i32 2>, <4 x i32>* %2260, align 16
  %2261 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 10, i32 0
  %2262 = bitcast i32* %2261 to <4 x i32>*
  store <4 x i32> <i32 3, i32 8, i32 2, i32 0>, <4 x i32>* %2262, align 16
  %2263 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 11, i32 0
  %2264 = bitcast i32* %2263 to <4 x i32>*
  store <4 x i32> <i32 3, i32 8, i32 1, i32 0>, <4 x i32>* %2264, align 16
  %2265 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 12, i32 0
  %2266 = bitcast i32* %2265 to <4 x i32>*
  store <4 x i32> <i32 3, i32 8, i32 2, i32 1>, <4 x i32>* %2266, align 16
  %2267 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 13, i32 0
  %2268 = bitcast i32* %2267 to <4 x i32>*
  store <4 x i32> <i32 3, i32 8, i32 1, i32 2>, <4 x i32>* %2268, align 16
  %2269 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 14, i32 0
  %2270 = bitcast i32* %2269 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 1, i32 3>, <4 x i32>* %2270, align 16
  %2271 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 15, i32 0
  %2272 = bitcast i32* %2271 to <4 x i32>*
  store <4 x i32> <i32 5, i32 32, i32 1, i32 4>, <4 x i32>* %2272, align 16
  %2273 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 16, i32 0
  %2274 = bitcast i32* %2273 to <4 x i32>*
  store <4 x i32> <i32 5, i32 32, i32 2, i32 3>, <4 x i32>* %2274, align 16
  %2275 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 17, i32 0
  %2276 = bitcast i32* %2275 to <4 x i32>*
  store <4 x i32> <i32 6, i32 64, i32 1, i32 5>, <4 x i32>* %2276, align 16
  %2277 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 18, i32 0
  %2278 = bitcast i32* %2277 to <4 x i32>*
  store <4 x i32> <i32 6, i32 64, i32 2, i32 4>, <4 x i32>* %2278, align 16
  %2279 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 19, i32 0
  %2280 = bitcast i32* %2279 to <4 x i32>*
  store <4 x i32> <i32 6, i32 64, i32 0, i32 0>, <4 x i32>* %2280, align 16
  %2281 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 20, i32 0
  %2282 = bitcast i32* %2281 to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 0, i32 0>, <4 x i32>* %2282, align 16
  %2283 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 21, i32 0
  %2284 = bitcast i32* %2283 to <4 x i32>*
  store <4 x i32> <i32 2, i32 4, i32 0, i32 1>, <4 x i32>* %2284, align 16
  %2285 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 22, i32 0
  %2286 = bitcast i32* %2285 to <4 x i32>*
  store <4 x i32> <i32 7, i32 128, i32 0, i32 0>, <4 x i32>* %2286, align 16
  %2287 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 23, i32 0
  %2288 = bitcast i32* %2287 to <4 x i32>*
  store <4 x i32> <i32 8, i32 256, i32 0, i32 0>, <4 x i32>* %2288, align 16
  %2289 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 24, i32 0
  %2290 = bitcast i32* %2289 to <4 x i32>*
  store <4 x i32> <i32 9, i32 512, i32 0, i32 0>, <4 x i32>* %2290, align 16
  %2291 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 25, i32 0
  %2292 = bitcast i32* %2291 to <4 x i32>*
  store <4 x i32> <i32 10, i32 1024, i32 0, i32 0>, <4 x i32>* %2292, align 16
  %2293 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 26, i32 0
  %2294 = bitcast i32* %2293 to <4 x i32>*
  store <4 x i32> <i32 11, i32 2048, i32 0, i32 0>, <4 x i32>* %2294, align 16
  %2295 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 27, i32 0
  %2296 = bitcast i32* %2295 to <4 x i32>*
  store <4 x i32> <i32 12, i32 4096, i32 0, i32 0>, <4 x i32>* %2296, align 16
  %2297 = getelementptr inbounds [28 x %"struct.jxl::HybridUintConfig"], [28 x %"struct.jxl::HybridUintConfig"]* %12, i64 0, i64 28
  call void @_ZNSt3__16vectorIN3jxl16HybridUintConfigENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector"* nonnull %11, %"struct.jxl::HybridUintConfig"* nonnull %2241, %"struct.jxl::HybridUintConfig"* %2297) #12
  call void @llvm.lifetime.end.p0i8(i64 448, i8* nonnull %2240) #12
  br label %2309

2298:                                             ; preds = %2235
  %2299 = bitcast [4 x %"struct.jxl::HybridUintConfig"]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %2299) #12
  %2300 = getelementptr inbounds [4 x %"struct.jxl::HybridUintConfig"], [4 x %"struct.jxl::HybridUintConfig"]* %13, i64 0, i64 0
  %2301 = bitcast [4 x %"struct.jxl::HybridUintConfig"]* %13 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %2301, align 16
  %2302 = getelementptr inbounds [4 x %"struct.jxl::HybridUintConfig"], [4 x %"struct.jxl::HybridUintConfig"]* %13, i64 0, i64 1, i32 0
  %2303 = bitcast i32* %2302 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 1, i32 2>, <4 x i32>* %2303, align 16
  %2304 = getelementptr inbounds [4 x %"struct.jxl::HybridUintConfig"], [4 x %"struct.jxl::HybridUintConfig"]* %13, i64 0, i64 2, i32 0
  %2305 = bitcast i32* %2304 to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 0, i32 0>, <4 x i32>* %2305, align 16
  %2306 = getelementptr inbounds [4 x %"struct.jxl::HybridUintConfig"], [4 x %"struct.jxl::HybridUintConfig"]* %13, i64 0, i64 3, i32 0
  %2307 = bitcast i32* %2306 to <4 x i32>*
  store <4 x i32> <i32 2, i32 4, i32 0, i32 1>, <4 x i32>* %2307, align 16
  %2308 = getelementptr inbounds [4 x %"struct.jxl::HybridUintConfig"], [4 x %"struct.jxl::HybridUintConfig"]* %13, i64 0, i64 4
  call void @_ZNSt3__16vectorIN3jxl16HybridUintConfigENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector"* nonnull %11, %"struct.jxl::HybridUintConfig"* nonnull %2300, %"struct.jxl::HybridUintConfig"* %2308) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %2299) #12
  br label %2309

2309:                                             ; preds = %2298, %2239, %2235
  %2310 = bitcast %"class.std::__1::vector.188"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2310) #12
  %2311 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %14, i64 0, i32 0, i32 0
  %2312 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %14, i64 0, i32 0, i32 1
  %2313 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %14, i64 0, i32 0, i32 2, i32 0, i32 0
  %2314 = load i64, i64* %2175, align 8
  %2315 = load i64, i64* %2177, align 8
  %2316 = sub i64 %2314, %2315
  %2317 = sdiv exact i64 %2316, 40
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2310, i8 0, i64 24, i1 false) #12
  %2318 = icmp eq i64 %2316, 0
  br i1 %2318, label %2420, label %2319

2319:                                             ; preds = %2309
  %2320 = icmp ugt i64 %2317, 4611686018427387903
  br i1 %2320, label %2321, label %2323

2321:                                             ; preds = %2319
  %2322 = bitcast %"class.std::__1::vector.188"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %2322) #13
  unreachable

2323:                                             ; preds = %2319
  %2324 = shl nsw i64 %2317, 2
  %2325 = call i8* @_Znwm(i64 %2324) #14
  %2326 = bitcast i8* %2325 to float*
  %2327 = bitcast float** %2312 to i8**
  store i8* %2325, i8** %2327, align 8
  %2328 = bitcast %"class.std::__1::vector.188"* %14 to i8**
  store i8* %2325, i8** %2328, align 8
  %2329 = getelementptr inbounds float, float* %2326, i64 %2317
  store float* %2329, float** %2313, align 8
  %2330 = shl nsw i64 %2317, 2
  %2331 = add nsw i64 %2330, -4
  %2332 = lshr exact i64 %2331, 2
  %2333 = add nuw nsw i64 %2332, 1
  %2334 = icmp ult i64 %2333, 8
  br i1 %2334, label %2405, label %2335

2335:                                             ; preds = %2323
  %2336 = and i64 %2333, 9223372036854775800
  %2337 = getelementptr float, float* %2326, i64 %2336
  %2338 = add nsw i64 %2336, -8
  %2339 = lshr exact i64 %2338, 3
  %2340 = add nuw nsw i64 %2339, 1
  %2341 = and i64 %2340, 7
  %2342 = icmp ult i64 %2338, 56
  br i1 %2342, label %2390, label %2343

2343:                                             ; preds = %2335
  %2344 = sub nsw i64 %2340, %2341
  br label %2345

2345:                                             ; preds = %2345, %2343
  %2346 = phi i64 [ 0, %2343 ], [ %2387, %2345 ]
  %2347 = phi i64 [ %2344, %2343 ], [ %2388, %2345 ]
  %2348 = getelementptr float, float* %2326, i64 %2346
  %2349 = bitcast float* %2348 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2349, align 4
  %2350 = getelementptr float, float* %2348, i64 4
  %2351 = bitcast float* %2350 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2351, align 4
  %2352 = or i64 %2346, 8
  %2353 = getelementptr float, float* %2326, i64 %2352
  %2354 = bitcast float* %2353 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2354, align 4
  %2355 = getelementptr float, float* %2353, i64 4
  %2356 = bitcast float* %2355 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2356, align 4
  %2357 = or i64 %2346, 16
  %2358 = getelementptr float, float* %2326, i64 %2357
  %2359 = bitcast float* %2358 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2359, align 4
  %2360 = getelementptr float, float* %2358, i64 4
  %2361 = bitcast float* %2360 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2361, align 4
  %2362 = or i64 %2346, 24
  %2363 = getelementptr float, float* %2326, i64 %2362
  %2364 = bitcast float* %2363 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2364, align 4
  %2365 = getelementptr float, float* %2363, i64 4
  %2366 = bitcast float* %2365 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2366, align 4
  %2367 = or i64 %2346, 32
  %2368 = getelementptr float, float* %2326, i64 %2367
  %2369 = bitcast float* %2368 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2369, align 4
  %2370 = getelementptr float, float* %2368, i64 4
  %2371 = bitcast float* %2370 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2371, align 4
  %2372 = or i64 %2346, 40
  %2373 = getelementptr float, float* %2326, i64 %2372
  %2374 = bitcast float* %2373 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2374, align 4
  %2375 = getelementptr float, float* %2373, i64 4
  %2376 = bitcast float* %2375 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2376, align 4
  %2377 = or i64 %2346, 48
  %2378 = getelementptr float, float* %2326, i64 %2377
  %2379 = bitcast float* %2378 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2379, align 4
  %2380 = getelementptr float, float* %2378, i64 4
  %2381 = bitcast float* %2380 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2381, align 4
  %2382 = or i64 %2346, 56
  %2383 = getelementptr float, float* %2326, i64 %2382
  %2384 = bitcast float* %2383 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2384, align 4
  %2385 = getelementptr float, float* %2383, i64 4
  %2386 = bitcast float* %2385 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2386, align 4
  %2387 = add i64 %2346, 64
  %2388 = add i64 %2347, -8
  %2389 = icmp eq i64 %2388, 0
  br i1 %2389, label %2390, label %2345, !llvm.loop !33

2390:                                             ; preds = %2345, %2335
  %2391 = phi i64 [ 0, %2335 ], [ %2387, %2345 ]
  %2392 = icmp eq i64 %2341, 0
  br i1 %2392, label %2403, label %2393

2393:                                             ; preds = %2390, %2393
  %2394 = phi i64 [ %2400, %2393 ], [ %2391, %2390 ]
  %2395 = phi i64 [ %2401, %2393 ], [ %2341, %2390 ]
  %2396 = getelementptr float, float* %2326, i64 %2394
  %2397 = bitcast float* %2396 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2397, align 4
  %2398 = getelementptr float, float* %2396, i64 4
  %2399 = bitcast float* %2398 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %2399, align 4
  %2400 = add i64 %2394, 8
  %2401 = add i64 %2395, -1
  %2402 = icmp eq i64 %2401, 0
  br i1 %2402, label %2403, label %2393, !llvm.loop !34

2403:                                             ; preds = %2393, %2390
  %2404 = icmp eq i64 %2333, %2336
  br i1 %2404, label %2412, label %2405

2405:                                             ; preds = %2403, %2323
  %2406 = phi float* [ %2326, %2323 ], [ %2337, %2403 ]
  br label %2407

2407:                                             ; preds = %2405, %2407
  %2408 = phi float* [ %2410, %2407 ], [ %2406, %2405 ]
  %2409 = bitcast float* %2408 to i32*
  store i32 2139095039, i32* %2409, align 4
  %2410 = getelementptr inbounds float, float* %2408, i64 1
  %2411 = icmp eq float* %2410, %2329
  br i1 %2411, label %2412, label %2407, !llvm.loop !35

2412:                                             ; preds = %2407, %2403
  %2413 = bitcast float** %2312 to i64*
  %2414 = ptrtoint float* %2329 to i64
  store i64 %2414, i64* %2413, align 8
  %2415 = load i64, i64* %2175, align 8
  %2416 = load i64, i64* %2177, align 8
  %2417 = sub i64 %2415, %2416
  %2418 = sdiv exact i64 %2417, 40
  %2419 = icmp eq i64 %2417, 0
  br label %2420

2420:                                             ; preds = %2412, %2309
  %2421 = phi i64 [ 0, %2309 ], [ %2418, %2412 ]
  %2422 = phi i1 [ true, %2309 ], [ %2419, %2412 ]
  %2423 = phi i64 [ %2315, %2309 ], [ %2416, %2412 ]
  %2424 = phi i64 [ %2314, %2309 ], [ %2415, %2412 ]
  %2425 = inttoptr i64 %2423 to %"struct.jxl::Histogram"*
  %2426 = bitcast %"class.std::__1::vector.11"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2426) #12
  %2427 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %15, i64 0, i32 0, i32 0
  %2428 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %15, i64 0, i32 0, i32 1
  %2429 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %15, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2426, i8 0, i64 24, i1 false) #12
  br i1 %2422, label %2456, label %2430

2430:                                             ; preds = %2420
  %2431 = icmp ugt i64 %2421, 4611686018427387903
  br i1 %2431, label %2432, label %2434

2432:                                             ; preds = %2430
  %2433 = bitcast %"class.std::__1::vector.11"* %15 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %2433) #13
  unreachable

2434:                                             ; preds = %2430
  %2435 = shl nsw i64 %2421, 2
  %2436 = call i8* @_Znwm(i64 %2435) #14
  %2437 = bitcast i8* %2436 to i32*
  %2438 = bitcast %"class.std::__1::vector.11"* %15 to i8**
  store i8* %2436, i8** %2438, align 8
  %2439 = getelementptr inbounds i32, i32* %2437, i64 %2421
  store i32* %2439, i32** %2429, align 8
  %2440 = bitcast i32** %2428 to i64*
  %2441 = ptrtoint i8* %2436 to i64
  %2442 = add nsw i64 %2421, -1
  %2443 = getelementptr i32, i32* %2437, i64 %2442
  %2444 = ptrtoint i32* %2443 to i64
  %2445 = sub i64 4, %2441
  %2446 = add i64 %2445, %2444
  %2447 = and i64 %2446, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %2436, i8 0, i64 %2447, i1 false) #12
  %2448 = ptrtoint i32* %2439 to i64
  store i64 %2448, i64* %2440, align 8
  %2449 = call i8* @_Znwm(i64 %2421) #14
  %2450 = getelementptr inbounds i8, i8* %2449, i64 %2421
  %2451 = ptrtoint i8* %2449 to i64
  %2452 = sub i64 %2421, %2451
  %2453 = getelementptr i8, i8* %2449, i64 %2452
  %2454 = ptrtoint i8* %2453 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %2449, i8 0, i64 %2454, i1 false) #12
  %2455 = ptrtoint i8* %2450 to i64
  br label %2456

2456:                                             ; preds = %2434, %2420
  %2457 = phi i64 [ %2455, %2434 ], [ 0, %2420 ]
  %2458 = phi i8* [ %2449, %2434 ], [ null, %2420 ]
  %2459 = load i8, i8* %2201, align 8, !range !21
  %2460 = icmp eq i8 %2459, 0
  %2461 = select i1 %2460, i64 256, i64 4096
  %2462 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %2237, align 8
  %2463 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %2238, align 8
  %2464 = icmp eq %"struct.jxl::HybridUintConfig"* %2462, %2463
  br i1 %2464, label %2473, label %2465

2465:                                             ; preds = %2456
  %2466 = bitcast i32** %2428 to i64*
  %2467 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %2, i64 0, i32 0, i32 0
  %2468 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %4, i64 0, i32 0, i32 0
  %2469 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2205, i64 0, i32 0, i32 0
  %2470 = ptrtoint i8* %2458 to i64
  %2471 = sub i64 %2457, %2470
  %2472 = icmp sgt i64 %2471, 0
  br label %2478

2473:                                             ; preds = %2667, %2456
  %2474 = phi %"struct.jxl::Histogram"* [ %2425, %2456 ], [ %2670, %2667 ]
  %2475 = phi i64 [ %2423, %2456 ], [ %2668, %2667 ]
  %2476 = phi i64 [ %2424, %2456 ], [ %2669, %2667 ]
  %2477 = icmp eq i64 %2476, %2475
  br i1 %2477, label %2712, label %2721

2478:                                             ; preds = %2667, %2465
  %2479 = phi i64 [ %2423, %2465 ], [ %2668, %2667 ]
  %2480 = phi i64 [ %2424, %2465 ], [ %2669, %2667 ]
  %2481 = phi %"struct.jxl::HybridUintConfig"* [ %2462, %2465 ], [ %2671, %2667 ]
  %2482 = bitcast %"struct.jxl::HybridUintConfig"* %2481 to <4 x i32>*
  %2483 = load <4 x i32>, <4 x i32>* %2482, align 4
  br i1 %2472, label %2484, label %2485

2484:                                             ; preds = %2478
  call void @llvm.memset.p0i8.i64(i8* align 1 %2458, i8 1, i64 %2471, i1 false) #12
  br label %2485

2485:                                             ; preds = %2484, %2478
  %2486 = load i32*, i32** %2427, align 8
  %2487 = load i64, i64* %2466, align 8
  %2488 = ptrtoint i32* %2486 to i64
  %2489 = sub i64 %2487, %2488
  %2490 = icmp sgt i64 %2489, 0
  br i1 %2490, label %2491, label %2500

2491:                                             ; preds = %2485
  %2492 = bitcast i32* %2486 to i8*
  %2493 = and i64 %2489, -4
  %2494 = icmp ult i64 %2489, 4
  %2495 = sext i1 %2494 to i64
  %2496 = shl nsw i64 %2495, 2
  %2497 = sub i64 %2493, %2496
  call void @llvm.memset.p0i8.i64(i8* align 4 %2492, i8 0, i64 %2497, i1 false) #12
  %2498 = load i64, i64* %2175, align 8
  %2499 = load i64, i64* %2177, align 8
  br label %2500

2500:                                             ; preds = %2491, %2485
  %2501 = phi i64 [ %2499, %2491 ], [ %2479, %2485 ]
  %2502 = phi i64 [ %2498, %2491 ], [ %2480, %2485 ]
  %2503 = icmp eq i64 %2502, %2501
  %2504 = inttoptr i64 %2501 to %"struct.jxl::Histogram"*
  br i1 %2503, label %2507, label %2522

2505:                                             ; preds = %2522
  %2506 = inttoptr i64 %2533 to %"struct.jxl::Histogram"*
  br label %2507

2507:                                             ; preds = %2505, %2500
  %2508 = phi i64 [ %2501, %2500 ], [ %2533, %2505 ]
  %2509 = phi i64 [ %2501, %2500 ], [ %2532, %2505 ]
  %2510 = phi %"struct.jxl::Histogram"* [ %2504, %2500 ], [ %2506, %2505 ]
  %2511 = load i64, i64* %1861, align 8
  %2512 = load i64, i64* %1863, align 8
  %2513 = icmp eq i64 %2511, %2512
  br i1 %2513, label %2542, label %2514

2514:                                             ; preds = %2507
  %2515 = extractelement <4 x i32> %2483, i32 2
  %2516 = extractelement <4 x i32> %2483, i32 3
  %2517 = add i32 %2516, %2515
  %2518 = shl nsw i32 -1, %2516
  %2519 = xor i32 %2518, -1
  %2520 = extractelement <4 x i32> %2483, i32 1
  %2521 = extractelement <4 x i32> %2483, i32 0
  br label %2547

2522:                                             ; preds = %2500, %2522
  %2523 = phi %"struct.jxl::Histogram"* [ %2537, %2522 ], [ %2504, %2500 ]
  %2524 = phi i64 [ %2531, %2522 ], [ 0, %2500 ]
  %2525 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2523, i64 %2524
  %2526 = bitcast %"struct.jxl::Histogram"* %2525 to i64*
  %2527 = load i64, i64* %2526, align 8
  %2528 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2523, i64 %2524, i32 0, i32 0, i32 1
  %2529 = bitcast i32** %2528 to i64*
  store i64 %2527, i64* %2529, align 8
  %2530 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2523, i64 %2524, i32 1
  store i64 0, i64* %2530, align 8
  %2531 = add nuw i64 %2524, 1
  %2532 = load i64, i64* %2175, align 8
  %2533 = load i64, i64* %2177, align 8
  %2534 = sub i64 %2532, %2533
  %2535 = sdiv exact i64 %2534, 40
  %2536 = icmp ult i64 %2531, %2535
  %2537 = inttoptr i64 %2533 to %"struct.jxl::Histogram"*
  br i1 %2536, label %2522, label %2505

2538:                                             ; preds = %2562
  %2539 = load i64, i64* %2175, align 8
  %2540 = load i64, i64* %2177, align 8
  %2541 = inttoptr i64 %2540 to %"struct.jxl::Histogram"*
  br label %2542

2542:                                             ; preds = %2538, %2507
  %2543 = phi i64 [ %2540, %2538 ], [ %2508, %2507 ]
  %2544 = phi i64 [ %2539, %2538 ], [ %2509, %2507 ]
  %2545 = phi %"struct.jxl::Histogram"* [ %2541, %2538 ], [ %2510, %2507 ]
  %2546 = icmp eq i64 %2544, %2543
  br i1 %2546, label %2667, label %2673

2547:                                             ; preds = %2562, %2514
  %2548 = phi i64 [ %2512, %2514 ], [ %2563, %2562 ]
  %2549 = phi i64 [ %2511, %2514 ], [ %2564, %2562 ]
  %2550 = phi i64 [ 0, %2514 ], [ %2565, %2562 ]
  %2551 = inttoptr i64 %2548 to %"class.std::__1::vector.144"*
  %2552 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %2551, i64 %2550
  %2553 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %2551, i64 %2550, i32 0, i32 1
  %2554 = bitcast %"struct.jxl::Token"** %2553 to i64*
  %2555 = load i64, i64* %2554, align 8
  %2556 = bitcast %"class.std::__1::vector.144"* %2552 to i64*
  %2557 = load i64, i64* %2556, align 8
  %2558 = icmp eq i64 %2555, %2557
  br i1 %2558, label %2562, label %2569

2559:                                             ; preds = %2653
  %2560 = ptrtoint %"class.std::__1::vector.144"* %2655 to i64
  %2561 = load i64, i64* %1861, align 8
  br label %2562

2562:                                             ; preds = %2559, %2547
  %2563 = phi i64 [ %2560, %2559 ], [ %2548, %2547 ]
  %2564 = phi i64 [ %2561, %2559 ], [ %2549, %2547 ]
  %2565 = add nuw i64 %2550, 1
  %2566 = sub i64 %2564, %2563
  %2567 = sdiv exact i64 %2566, 24
  %2568 = icmp ult i64 %2565, %2567
  br i1 %2568, label %2547, label %2538

2569:                                             ; preds = %2547, %2653
  %2570 = phi %"class.std::__1::vector.144"* [ %2655, %2653 ], [ %2551, %2547 ]
  %2571 = phi i64 [ %2654, %2653 ], [ 0, %2547 ]
  %2572 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %2570, i64 %2550, i32 0, i32 0
  %2573 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %2572, align 8
  %2574 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %2573, i64 %2571, i32 0
  %2575 = load i32, i32* %2574, align 4
  %2576 = and i32 %2575, 1
  %2577 = icmp eq i32 %2576, 0
  br i1 %2577, label %2578, label %2653

2578:                                             ; preds = %2569
  %2579 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %2573, i64 %2571, i32 1
  %2580 = load i32, i32* %2579, align 4
  %2581 = lshr i32 %2575, 1
  %2582 = zext i32 %2581 to i64
  %2583 = load i8*, i8** %2468, align 8
  %2584 = getelementptr inbounds i8, i8* %2583, i64 %2582
  %2585 = load i8, i8* %2584, align 1
  %2586 = zext i8 %2585 to i64
  %2587 = icmp ugt i32 %2520, %2580
  br i1 %2587, label %2603, label %2588

2588:                                             ; preds = %2578
  %2589 = call i32 @llvm.ctlz.i32(i32 %2580, i1 true) #12, !range !3
  %2590 = xor i32 %2589, 31
  %2591 = shl i32 1, %2590
  %2592 = sub i32 %2580, %2591
  %2593 = sub i32 %2590, %2521
  %2594 = shl i32 %2593, %2517
  %2595 = add i32 %2594, %2520
  %2596 = sub i32 %2590, %2515
  %2597 = lshr i32 %2592, %2596
  %2598 = shl i32 %2597, %2516
  %2599 = and i32 %2592, %2519
  %2600 = add i32 %2595, %2599
  %2601 = add i32 %2600, %2598
  %2602 = sub i32 %2596, %2516
  br label %2603

2603:                                             ; preds = %2588, %2578
  %2604 = phi i32 [ %2601, %2588 ], [ %2580, %2578 ]
  %2605 = phi i32 [ %2602, %2588 ], [ 0, %2578 ]
  %2606 = zext i32 %2604 to i64
  %2607 = icmp ugt i64 %2461, %2606
  br i1 %2607, label %2608, label %2614

2608:                                             ; preds = %2603
  %2609 = load i8, i8* %42, align 8, !range !21
  %2610 = icmp eq i8 %2609, 0
  br i1 %2610, label %2616, label %2611

2611:                                             ; preds = %2608
  %2612 = load i32, i32* %46, align 4
  %2613 = icmp ult i32 %2604, %2612
  br i1 %2613, label %2616, label %2614

2614:                                             ; preds = %2611, %2603
  %2615 = getelementptr inbounds i8, i8* %2458, i64 %2586
  store i8 0, i8* %2615, align 1
  br label %2653

2616:                                             ; preds = %2611, %2608
  %2617 = load i32*, i32** %2427, align 8
  %2618 = getelementptr inbounds i32, i32* %2617, i64 %2586
  %2619 = load i32, i32* %2618, align 4
  %2620 = add i32 %2619, %2605
  store i32 %2620, i32* %2618, align 4
  %2621 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %2054, align 8
  %2622 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2621, i64 %2586
  %2623 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2622, i64 0, i32 0
  %2624 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2621, i64 %2586, i32 0, i32 0, i32 1
  %2625 = bitcast i32** %2624 to i64*
  %2626 = load i64, i64* %2625, align 8
  %2627 = bitcast %"struct.jxl::Histogram"* %2622 to i64*
  %2628 = load i64, i64* %2627, align 8
  %2629 = sub i64 %2626, %2628
  %2630 = ashr exact i64 %2629, 2
  %2631 = icmp ugt i64 %2630, %2606
  %2632 = inttoptr i64 %2628 to i32*
  br i1 %2631, label %2645, label %2633

2633:                                             ; preds = %2616
  %2634 = add nuw nsw i64 %2606, 8
  %2635 = and i64 %2634, 8589934584
  %2636 = icmp ugt i64 %2635, %2630
  br i1 %2636, label %2637, label %2641

2637:                                             ; preds = %2633
  %2638 = sub nsw i64 %2635, %2630
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.128"* %2623, i64 %2638) #12
  %2639 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2622, i64 0, i32 0, i32 0, i32 0
  %2640 = load i32*, i32** %2639, align 8
  br label %2645

2641:                                             ; preds = %2633
  %2642 = icmp ult i64 %2635, %2630
  br i1 %2642, label %2643, label %2645

2643:                                             ; preds = %2641
  %2644 = getelementptr inbounds i32, i32* %2632, i64 %2635
  store i32* %2644, i32** %2624, align 8
  br label %2645

2645:                                             ; preds = %2643, %2641, %2637, %2616
  %2646 = phi i32* [ %2632, %2643 ], [ %2632, %2641 ], [ %2640, %2637 ], [ %2632, %2616 ]
  %2647 = getelementptr inbounds i32, i32* %2646, i64 %2606
  %2648 = load i32, i32* %2647, align 4
  %2649 = add nsw i32 %2648, 1
  store i32 %2649, i32* %2647, align 4
  %2650 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2621, i64 %2586, i32 1
  %2651 = load i64, i64* %2650, align 8
  %2652 = add i64 %2651, 1
  store i64 %2652, i64* %2650, align 8
  br label %2653

2653:                                             ; preds = %2645, %2614, %2569
  %2654 = add nuw i64 %2571, 1
  %2655 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %2467, align 8
  %2656 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %2655, i64 %2550
  %2657 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %2655, i64 %2550, i32 0, i32 1
  %2658 = bitcast %"struct.jxl::Token"** %2657 to i64*
  %2659 = load i64, i64* %2658, align 8
  %2660 = bitcast %"class.std::__1::vector.144"* %2656 to i64*
  %2661 = load i64, i64* %2660, align 8
  %2662 = sub i64 %2659, %2661
  %2663 = ashr exact i64 %2662, 3
  %2664 = icmp ult i64 %2654, %2663
  br i1 %2664, label %2569, label %2559

2665:                                             ; preds = %2704
  %2666 = inttoptr i64 %2707 to %"struct.jxl::Histogram"*
  br label %2667

2667:                                             ; preds = %2665, %2542
  %2668 = phi i64 [ %2543, %2542 ], [ %2707, %2665 ]
  %2669 = phi i64 [ %2543, %2542 ], [ %2706, %2665 ]
  %2670 = phi %"struct.jxl::Histogram"* [ %2545, %2542 ], [ %2666, %2665 ]
  %2671 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %2481, i64 1
  %2672 = icmp eq %"struct.jxl::HybridUintConfig"* %2671, %2463
  br i1 %2672, label %2473, label %2478

2673:                                             ; preds = %2542, %2704
  %2674 = phi %"struct.jxl::Histogram"* [ %2711, %2704 ], [ %2545, %2542 ]
  %2675 = phi i64 [ %2705, %2704 ], [ 0, %2542 ]
  %2676 = getelementptr inbounds i8, i8* %2458, i64 %2675
  %2677 = load i8, i8* %2676, align 1
  %2678 = icmp eq i8 %2677, 0
  br i1 %2678, label %2704, label %2679

2679:                                             ; preds = %2673
  %2680 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2674, i64 %2675, i32 0, i32 0, i32 0
  %2681 = load i32*, i32** %2680, align 8
  %2682 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2674, i64 %2675, i32 0, i32 0, i32 1
  %2683 = bitcast i32** %2682 to i64*
  %2684 = load i64, i64* %2683, align 8
  %2685 = ptrtoint i32* %2681 to i64
  %2686 = sub i64 %2684, %2685
  %2687 = ashr exact i64 %2686, 2
  %2688 = call float @_ZN3jxl17ANSPopulationCostEPKim(i32* %2681, i64 %2687) #12
  %2689 = load i32*, i32** %2427, align 8
  %2690 = getelementptr inbounds i32, i32* %2689, i64 %2675
  %2691 = load i32, i32* %2690, align 4
  %2692 = uitofp i32 %2691 to float
  %2693 = fadd float %2688, %2692
  %2694 = load float*, float** %2311, align 8
  %2695 = getelementptr inbounds float, float* %2694, i64 %2675
  %2696 = load float, float* %2695, align 4
  %2697 = fcmp olt float %2693, %2696
  br i1 %2697, label %2698, label %2704

2698:                                             ; preds = %2679
  %2699 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %2469, align 8
  %2700 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %2699, i64 %2675, i32 0
  %2701 = bitcast i32* %2700 to <4 x i32>*
  store <4 x i32> %2483, <4 x i32>* %2701, align 4
  %2702 = load float*, float** %2311, align 8
  %2703 = getelementptr inbounds float, float* %2702, i64 %2675
  store float %2693, float* %2703, align 4
  br label %2704

2704:                                             ; preds = %2698, %2679, %2673
  %2705 = add nuw i64 %2675, 1
  %2706 = load i64, i64* %2175, align 8
  %2707 = load i64, i64* %2177, align 8
  %2708 = sub i64 %2706, %2707
  %2709 = sdiv exact i64 %2708, 40
  %2710 = icmp ult i64 %2705, %2709
  %2711 = inttoptr i64 %2707 to %"struct.jxl::Histogram"*
  br i1 %2710, label %2673, label %2665

2712:                                             ; preds = %2721, %2473
  %2713 = load i64, i64* %1861, align 8
  %2714 = load i64, i64* %1863, align 8
  %2715 = icmp eq i64 %2713, %2714
  br i1 %2715, label %2882, label %2716

2716:                                             ; preds = %2712
  %2717 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %2, i64 0, i32 0, i32 0
  %2718 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %4, i64 0, i32 0, i32 0
  %2719 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2205, i64 0, i32 0, i32 0
  %2720 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 3, i32 4
  br label %2737

2721:                                             ; preds = %2473, %2721
  %2722 = phi %"struct.jxl::Histogram"* [ %2736, %2721 ], [ %2474, %2473 ]
  %2723 = phi i64 [ %2730, %2721 ], [ 0, %2473 ]
  %2724 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2722, i64 %2723
  %2725 = bitcast %"struct.jxl::Histogram"* %2724 to i64*
  %2726 = load i64, i64* %2725, align 8
  %2727 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2722, i64 %2723, i32 0, i32 0, i32 1
  %2728 = bitcast i32** %2727 to i64*
  store i64 %2726, i64* %2728, align 8
  %2729 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2722, i64 %2723, i32 1
  store i64 0, i64* %2729, align 8
  %2730 = add nuw i64 %2723, 1
  %2731 = load i64, i64* %2175, align 8
  %2732 = load i64, i64* %2177, align 8
  %2733 = sub i64 %2731, %2732
  %2734 = sdiv exact i64 %2733, 40
  %2735 = icmp ult i64 %2730, %2734
  %2736 = inttoptr i64 %2732 to %"struct.jxl::Histogram"*
  br i1 %2735, label %2721, label %2712

2737:                                             ; preds = %2759, %2716
  %2738 = phi i64 [ 4, %2716 ], [ %2760, %2759 ]
  %2739 = phi i64 [ 4, %2716 ], [ %2761, %2759 ]
  %2740 = phi i64 [ %2714, %2716 ], [ %2762, %2759 ]
  %2741 = phi i64 [ %2713, %2716 ], [ %2763, %2759 ]
  %2742 = phi i64 [ 0, %2716 ], [ %2764, %2759 ]
  %2743 = inttoptr i64 %2740 to %"class.std::__1::vector.144"*
  %2744 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %2743, i64 %2742
  %2745 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %2743, i64 %2742, i32 0, i32 1
  %2746 = bitcast %"struct.jxl::Token"** %2745 to i64*
  %2747 = load i64, i64* %2746, align 8
  %2748 = bitcast %"class.std::__1::vector.144"* %2744 to i64*
  %2749 = load i64, i64* %2748, align 8
  %2750 = icmp eq i64 %2747, %2749
  br i1 %2750, label %2759, label %2768

2751:                                             ; preds = %2759
  %2752 = load i8, i8* %2201, align 8, !range !21
  %2753 = icmp eq i8 %2752, 0
  %2754 = select i1 %2753, i64 8, i64 15
  %2755 = icmp ugt i64 %2761, %2754
  br i1 %2755, label %2879, label %2882

2756:                                             ; preds = %2866
  %2757 = ptrtoint %"class.std::__1::vector.144"* %2869 to i64
  %2758 = load i64, i64* %1861, align 8
  br label %2759

2759:                                             ; preds = %2756, %2737
  %2760 = phi i64 [ %2738, %2737 ], [ %2867, %2756 ]
  %2761 = phi i64 [ %2739, %2737 ], [ %2867, %2756 ]
  %2762 = phi i64 [ %2740, %2737 ], [ %2757, %2756 ]
  %2763 = phi i64 [ %2741, %2737 ], [ %2758, %2756 ]
  %2764 = add nuw i64 %2742, 1
  %2765 = sub i64 %2763, %2762
  %2766 = sdiv exact i64 %2765, 24
  %2767 = icmp ult i64 %2764, %2766
  br i1 %2767, label %2737, label %2751

2768:                                             ; preds = %2737, %2866
  %2769 = phi i64 [ %2867, %2866 ], [ %2738, %2737 ]
  %2770 = phi %"class.std::__1::vector.144"* [ %2869, %2866 ], [ %2743, %2737 ]
  %2771 = phi i64 [ %2868, %2866 ], [ 0, %2737 ]
  %2772 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %2770, i64 %2742, i32 0, i32 0
  %2773 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %2772, align 8
  %2774 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %2773, i64 %2771, i32 0
  %2775 = load i32, i32* %2774, align 4
  %2776 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %2773, i64 %2771, i32 1
  %2777 = load i32, i32* %2776, align 4
  %2778 = lshr i32 %2775, 1
  %2779 = zext i32 %2778 to i64
  %2780 = load i8*, i8** %2718, align 8
  %2781 = getelementptr inbounds i8, i8* %2780, i64 %2779
  %2782 = load i8, i8* %2781, align 1
  %2783 = zext i8 %2782 to i64
  %2784 = and i32 %2775, 1
  %2785 = icmp ne i32 %2784, 0
  br i1 %2785, label %2789, label %2786

2786:                                             ; preds = %2768
  %2787 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %2719, align 8
  %2788 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %2787, i64 %2783
  br label %2789

2789:                                             ; preds = %2786, %2768
  %2790 = phi %"struct.jxl::HybridUintConfig"* [ %2788, %2786 ], [ %2720, %2768 ]
  %2791 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %2790, i64 0, i32 1
  %2792 = load i32, i32* %2791, align 4, !noalias !36
  %2793 = icmp ugt i32 %2792, %2777
  br i1 %2793, label %2817, label %2794

2794:                                             ; preds = %2789
  %2795 = call i32 @llvm.ctlz.i32(i32 %2777, i1 true) #12, !range !3
  %2796 = xor i32 %2795, 31
  %2797 = shl i32 1, %2796
  %2798 = sub i32 %2777, %2797
  %2799 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %2790, i64 0, i32 0
  %2800 = load i32, i32* %2799, align 4, !noalias !36
  %2801 = sub i32 %2796, %2800
  %2802 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %2790, i64 0, i32 2
  %2803 = load i32, i32* %2802, align 4, !noalias !36
  %2804 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %2790, i64 0, i32 3
  %2805 = load i32, i32* %2804, align 4, !noalias !36
  %2806 = add i32 %2805, %2803
  %2807 = shl i32 %2801, %2806
  %2808 = add i32 %2807, %2792
  %2809 = sub i32 %2796, %2803
  %2810 = lshr i32 %2798, %2809
  %2811 = shl i32 %2810, %2805
  %2812 = add i32 %2808, %2811
  %2813 = shl nsw i32 -1, %2805
  %2814 = xor i32 %2813, -1
  %2815 = and i32 %2798, %2814
  %2816 = add i32 %2812, %2815
  br label %2817

2817:                                             ; preds = %2794, %2789
  %2818 = phi i32 [ %2816, %2794 ], [ %2777, %2789 ]
  br i1 %2785, label %2819, label %2821

2819:                                             ; preds = %2817
  %2820 = load i32, i32* %46, align 4
  br label %2821

2821:                                             ; preds = %2819, %2817
  %2822 = phi i32 [ %2820, %2819 ], [ 0, %2817 ]
  %2823 = add i32 %2822, %2818
  %2824 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %2054, align 8
  %2825 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2824, i64 %2783
  %2826 = zext i32 %2823 to i64
  %2827 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2825, i64 0, i32 0
  %2828 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2824, i64 %2783, i32 0, i32 0, i32 1
  %2829 = bitcast i32** %2828 to i64*
  %2830 = load i64, i64* %2829, align 8
  %2831 = bitcast %"struct.jxl::Histogram"* %2825 to i64*
  %2832 = load i64, i64* %2831, align 8
  %2833 = sub i64 %2830, %2832
  %2834 = ashr exact i64 %2833, 2
  %2835 = icmp ugt i64 %2834, %2826
  %2836 = inttoptr i64 %2832 to i32*
  br i1 %2835, label %2849, label %2837

2837:                                             ; preds = %2821
  %2838 = add nuw nsw i64 %2826, 8
  %2839 = and i64 %2838, 8589934584
  %2840 = icmp ugt i64 %2839, %2834
  br i1 %2840, label %2841, label %2845

2841:                                             ; preds = %2837
  %2842 = sub nsw i64 %2839, %2834
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.128"* %2827, i64 %2842) #12
  %2843 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2825, i64 0, i32 0, i32 0, i32 0
  %2844 = load i32*, i32** %2843, align 8
  br label %2849

2845:                                             ; preds = %2837
  %2846 = icmp ult i64 %2839, %2834
  br i1 %2846, label %2847, label %2849

2847:                                             ; preds = %2845
  %2848 = getelementptr inbounds i32, i32* %2836, i64 %2839
  store i32* %2848, i32** %2828, align 8
  br label %2849

2849:                                             ; preds = %2847, %2845, %2841, %2821
  %2850 = phi i32* [ %2836, %2847 ], [ %2836, %2845 ], [ %2844, %2841 ], [ %2836, %2821 ]
  %2851 = getelementptr inbounds i32, i32* %2850, i64 %2826
  %2852 = load i32, i32* %2851, align 4
  %2853 = add nsw i32 %2852, 1
  store i32 %2853, i32* %2851, align 4
  %2854 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2824, i64 %2783, i32 1
  %2855 = load i64, i64* %2854, align 8
  %2856 = add i64 %2855, 1
  store i64 %2856, i64* %2854, align 8
  %2857 = trunc i64 %2769 to i32
  %2858 = lshr i32 %2823, %2857
  %2859 = icmp eq i32 %2858, 0
  br i1 %2859, label %2866, label %2860

2860:                                             ; preds = %2849, %2860
  %2861 = phi i64 [ %2862, %2860 ], [ %2769, %2849 ]
  %2862 = add i64 %2861, 1
  %2863 = trunc i64 %2862 to i32
  %2864 = lshr i32 %2823, %2863
  %2865 = icmp eq i32 %2864, 0
  br i1 %2865, label %2866, label %2860

2866:                                             ; preds = %2860, %2849
  %2867 = phi i64 [ %2769, %2849 ], [ %2862, %2860 ]
  %2868 = add nuw i64 %2771, 1
  %2869 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %2717, align 8
  %2870 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %2869, i64 %2742
  %2871 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %2869, i64 %2742, i32 0, i32 1
  %2872 = bitcast %"struct.jxl::Token"** %2871 to i64*
  %2873 = load i64, i64* %2872, align 8
  %2874 = bitcast %"class.std::__1::vector.144"* %2870 to i64*
  %2875 = load i64, i64* %2874, align 8
  %2876 = sub i64 %2873, %2875
  %2877 = ashr exact i64 %2876, 3
  %2878 = icmp ult i64 %2868, %2877
  br i1 %2878, label %2768, label %2756

2879:                                             ; preds = %2751
  %2880 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 663, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.23, i64 0, i64 0)) #12
  %2881 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

2882:                                             ; preds = %2751, %2712
  %2883 = phi i64 [ 4, %2712 ], [ %2760, %2751 ]
  %2884 = icmp eq i8* %2458, null
  br i1 %2884, label %2886, label %2885

2885:                                             ; preds = %2882
  call void @_ZdlPv(i8* nonnull %2458) #14
  br label %2886

2886:                                             ; preds = %2885, %2882
  %2887 = load i32*, i32** %2427, align 8
  %2888 = icmp eq i32* %2887, null
  br i1 %2888, label %2893, label %2889

2889:                                             ; preds = %2886
  %2890 = ptrtoint i32* %2887 to i64
  %2891 = bitcast i32** %2428 to i64*
  store i64 %2890, i64* %2891, align 8
  %2892 = bitcast i32* %2887 to i8*
  call void @_ZdlPv(i8* %2892) #14
  br label %2893

2893:                                             ; preds = %2889, %2886
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2426) #12
  %2894 = load float*, float** %2311, align 8
  %2895 = icmp eq float* %2894, null
  br i1 %2895, label %2900, label %2896

2896:                                             ; preds = %2893
  %2897 = ptrtoint float* %2894 to i64
  %2898 = bitcast float** %2312 to i64*
  store i64 %2897, i64* %2898, align 8
  %2899 = bitcast float* %2894 to i8*
  call void @_ZdlPv(i8* %2899) #14
  br label %2900

2900:                                             ; preds = %2896, %2893
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2310) #12
  %2901 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %2237, align 8
  %2902 = icmp eq %"struct.jxl::HybridUintConfig"* %2901, null
  br i1 %2902, label %2907, label %2903

2903:                                             ; preds = %2900
  %2904 = ptrtoint %"struct.jxl::HybridUintConfig"* %2901 to i64
  %2905 = bitcast %"struct.jxl::HybridUintConfig"** %2238 to i64*
  store i64 %2904, i64* %2905, align 8
  %2906 = bitcast %"struct.jxl::HybridUintConfig"* %2901 to i8*
  call void @_ZdlPv(i8* %2906) #14
  br label %2907

2907:                                             ; preds = %2903, %2900
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2236) #12
  %2908 = icmp ugt i64 %2883, 5
  %2909 = select i1 %2908, i64 %2883, i64 5
  br label %2910

2910:                                             ; preds = %2907, %2234, %2223
  %2911 = phi i64 [ %2204, %2234 ], [ %2204, %2223 ], [ %2909, %2907 ]
  br i1 %1698, label %2967, label %2912

2912:                                             ; preds = %2910
  %2913 = select i1 %2012, i64 15, i64 %2911
  %2914 = select i1 %2012, i64 1, i64 3
  %2915 = load i64, i64* %2209, align 8
  %2916 = load i64, i64* %2211, align 8
  %2917 = icmp eq i64 %2915, %2916
  br i1 %2917, label %2974, label %2918

2918:                                             ; preds = %2912
  %2919 = add i64 %2913, 1
  %2920 = call i64 @llvm.ctlz.i64(i64 %2919, i1 true) #12, !range !2
  %2921 = xor i64 %2920, 63
  %2922 = call i64 @llvm.ctpop.i64(i64 %2919) #12, !range !2
  %2923 = icmp ugt i64 %2922, 1
  %2924 = zext i1 %2923 to i64
  %2925 = add nuw nsw i64 %2921, %2924
  %2926 = inttoptr i64 %2916 to %"struct.jxl::HybridUintConfig"*
  %2927 = sub i64 %2915, %2916
  %2928 = ashr exact i64 %2927, 4
  br label %2929

2929:                                             ; preds = %2963, %2918
  %2930 = phi i64 [ 0, %2918 ], [ %2964, %2963 ]
  %2931 = phi i64 [ 0, %2918 ], [ %2965, %2963 ]
  %2932 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %2926, i64 %2931
  %2933 = bitcast %"struct.jxl::HybridUintConfig"* %2932 to i64*
  %2934 = load i64, i64* %2933, align 4
  %2935 = trunc i64 %2934 to i32
  %2936 = and i64 %2934, 4294967295
  %2937 = add i64 %2925, %2930
  %2938 = icmp eq i64 %2936, %2913
  br i1 %2938, label %2963, label %2939

2939:                                             ; preds = %2929
  %2940 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %2926, i64 %2931, i32 2
  %2941 = bitcast i32* %2940 to i64*
  %2942 = load i64, i64* %2941, align 4
  %2943 = trunc i64 %2942 to i32
  %2944 = add i32 %2935, 1
  %2945 = call i32 @llvm.ctlz.i32(i32 %2944, i1 true) #12, !range !3
  %2946 = xor i32 %2945, 31
  %2947 = zext i32 %2946 to i64
  %2948 = call i32 @llvm.ctpop.i32(i32 %2944) #12, !range !3
  %2949 = icmp ugt i32 %2948, 1
  %2950 = zext i1 %2949 to i64
  %2951 = sub i32 %2935, %2943
  %2952 = add i32 %2951, 1
  %2953 = call i32 @llvm.ctlz.i32(i32 %2952, i1 true) #12, !range !3
  %2954 = xor i32 %2953, 31
  %2955 = zext i32 %2954 to i64
  %2956 = call i32 @llvm.ctpop.i32(i32 %2952) #12, !range !3
  %2957 = icmp ugt i32 %2956, 1
  %2958 = zext i1 %2957 to i64
  %2959 = add i64 %2937, %2947
  %2960 = add i64 %2959, %2950
  %2961 = add i64 %2960, %2955
  %2962 = add i64 %2961, %2958
  br label %2963

2963:                                             ; preds = %2939, %2929
  %2964 = phi i64 [ %2962, %2939 ], [ %2937, %2929 ]
  %2965 = add nuw i64 %2931, 1
  %2966 = icmp ult i64 %2965, %2928
  br i1 %2966, label %2929, label %2974

2967:                                             ; preds = %2910
  %2968 = zext i1 %2012 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %5, i64 1, i64 %2968) #12
  %2969 = select i1 %2012, i64 1, i64 3
  br i1 %2012, label %2972, label %2970

2970:                                             ; preds = %2967
  %2971 = add i64 %2911, -5
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %5, i64 2, i64 %2971) #12
  br label %2972

2972:                                             ; preds = %2970, %2967
  %2973 = phi i64 [ %2911, %2970 ], [ 15, %2967 ]
  call void @_ZN3jxl17EncodeUintConfigsINS_9BitWriterEEEvRKNSt3__16vectorINS_16HybridUintConfigENS2_9allocatorIS4_EEEEPT_m(%"class.std::__1::vector"* dereferenceable(24) %2205, %"struct.jxl::BitWriter"* nonnull %5, i64 %2973) #12
  br label %2974

2974:                                             ; preds = %2963, %2972, %2912
  %2975 = phi i64 [ %2969, %2972 ], [ %2914, %2912 ], [ %2914, %2963 ]
  %2976 = phi i64 [ %2973, %2972 ], [ %2913, %2912 ], [ %2913, %2963 ]
  %2977 = phi i64 [ 0, %2972 ], [ 0, %2912 ], [ %2964, %2963 ]
  %2978 = load i64, i64* %2175, align 8
  %2979 = load i64, i64* %2177, align 8
  br i1 %2012, label %2980, label %3035

2980:                                             ; preds = %2974
  %2981 = icmp eq i64 %2978, %2979
  br i1 %2981, label %2982, label %2985

2982:                                             ; preds = %2980
  %2983 = add i64 %2977, %2975
  %2984 = inttoptr i64 %2978 to %"struct.jxl::Histogram"*
  br label %3065

2985:                                             ; preds = %2980, %3027
  %2986 = phi i64 [ %3031, %3027 ], [ %2979, %2980 ]
  %2987 = phi i64 [ %3029, %3027 ], [ 0, %2980 ]
  %2988 = phi i64 [ %3028, %3027 ], [ %2977, %2980 ]
  %2989 = inttoptr i64 %2986 to %"struct.jxl::Histogram"*
  %2990 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2989, i64 %2987, i32 0
  %2991 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2989, i64 %2987, i32 0, i32 0, i32 1
  %2992 = bitcast i32** %2991 to i64*
  %2993 = load i64, i64* %2992, align 8
  %2994 = bitcast %"class.std::__1::vector.128"* %2990 to i64*
  %2995 = load i64, i64* %2994, align 8
  %2996 = icmp eq i64 %2993, %2995
  %2997 = inttoptr i64 %2995 to i32*
  br i1 %2996, label %3001, label %2998

2998:                                             ; preds = %2985
  %2999 = sub i64 %2993, %2995
  %3000 = ashr exact i64 %2999, 2
  br label %3005

3001:                                             ; preds = %3005, %2985
  %3002 = phi i64 [ 1, %2985 ], [ %3012, %3005 ]
  %3003 = add i64 %3002, -1
  %3004 = icmp eq i64 %3003, 0
  br i1 %1698, label %3014, label %3021

3005:                                             ; preds = %3005, %2998
  %3006 = phi i64 [ 0, %2998 ], [ %3011, %3005 ]
  %3007 = phi i64 [ 1, %2998 ], [ %3012, %3005 ]
  %3008 = getelementptr inbounds i32, i32* %2997, i64 %3006
  %3009 = load i32, i32* %3008, align 4
  %3010 = icmp eq i32 %3009, 0
  %3011 = add nuw i64 %3006, 1
  %3012 = select i1 %3010, i64 %3007, i64 %3011
  %3013 = icmp ult i64 %3011, %3000
  br i1 %3013, label %3005, label %3001

3014:                                             ; preds = %3001
  br i1 %3004, label %3015, label %3016

3015:                                             ; preds = %3014
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %5, i64 1, i64 0) #12
  br label %3027

3016:                                             ; preds = %3014
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %5, i64 1, i64 1) #12
  %3017 = call i64 @llvm.ctlz.i64(i64 %3003, i1 true) #12, !range !2
  %3018 = xor i64 %3017, 63
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %5, i64 4, i64 %3018) #12
  %3019 = shl i64 1, %3018
  %3020 = sub i64 %3003, %3019
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %5, i64 %3018, i64 %3020) #12
  br label %3027

3021:                                             ; preds = %3001
  %3022 = add i64 %2988, 1
  br i1 %3004, label %3027, label %3023

3023:                                             ; preds = %3021
  %3024 = call i64 @llvm.ctlz.i64(i64 %3003, i1 true) #12, !range !2
  %3025 = add i64 %2988, 68
  %3026 = sub i64 %3025, %3024
  br label %3027

3027:                                             ; preds = %3023, %3021, %3016, %3015
  %3028 = phi i64 [ %2988, %3015 ], [ %2988, %3016 ], [ %3026, %3023 ], [ %3022, %3021 ]
  %3029 = add nuw i64 %2987, 1
  %3030 = load i64, i64* %2175, align 8
  %3031 = load i64, i64* %2177, align 8
  %3032 = sub i64 %3030, %3031
  %3033 = sdiv exact i64 %3032, 40
  %3034 = icmp ult i64 %3029, %3033
  br i1 %3034, label %2985, label %3035

3035:                                             ; preds = %3027, %2974
  %3036 = phi i64 [ %2979, %2974 ], [ %3031, %3027 ]
  %3037 = phi i64 [ %2978, %2974 ], [ %3030, %3027 ]
  %3038 = phi i64 [ %2977, %2974 ], [ %3028, %3027 ]
  %3039 = add i64 %3038, %2975
  %3040 = icmp eq i64 %3037, %3036
  %3041 = inttoptr i64 %3036 to %"struct.jxl::Histogram"*
  br i1 %3040, label %3065, label %3042

3042:                                             ; preds = %3035
  %3043 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %3044 = bitcast %"class.std::__1::vector.158"** %2018 to i64*
  %3045 = bitcast %"class.jxl::BitWriter::Allotment"* %19 to i8*
  %3046 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 3
  br label %3047

3047:                                             ; preds = %3138, %3042
  %3048 = phi %"struct.jxl::Histogram"* [ %3041, %3042 ], [ %3156, %3138 ]
  %3049 = phi i64 [ 0, %3042 ], [ %3150, %3138 ]
  %3050 = phi i64 [ %3039, %3042 ], [ %3149, %3138 ]
  %3051 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %3048, i64 %3049, i32 0
  %3052 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %3048, i64 %3049, i32 0, i32 0, i32 1
  %3053 = bitcast i32** %3052 to i64*
  %3054 = load i64, i64* %3053, align 8
  %3055 = bitcast %"class.std::__1::vector.128"* %3051 to i64*
  %3056 = load i64, i64* %3055, align 8
  %3057 = icmp eq i64 %3054, %3056
  %3058 = inttoptr i64 %3056 to i32*
  br i1 %3057, label %3091, label %3059

3059:                                             ; preds = %3047
  %3060 = sub i64 %3054, %3056
  %3061 = ashr exact i64 %3060, 2
  br label %3157

3062:                                             ; preds = %3138
  %3063 = inttoptr i64 %3152 to %"struct.jxl::Histogram"*
  %3064 = inttoptr i64 %3151 to %"struct.jxl::Histogram"*
  br label %3065

3065:                                             ; preds = %2982, %3062, %3035
  %3066 = phi %"struct.jxl::Histogram"* [ %3064, %3062 ], [ %3041, %3035 ], [ %2984, %2982 ]
  %3067 = phi %"struct.jxl::Histogram"* [ %3063, %3062 ], [ %3041, %3035 ], [ %2984, %2982 ]
  %3068 = phi i64 [ %3149, %3062 ], [ %3039, %3035 ], [ %2983, %2982 ]
  %3069 = icmp eq %"struct.jxl::Histogram"* %3067, null
  br i1 %3069, label %3166, label %3070

3070:                                             ; preds = %3065
  %3071 = bitcast %"struct.jxl::Histogram"* %3067 to i8*
  %3072 = icmp eq %"struct.jxl::Histogram"* %3067, %3066
  br i1 %3072, label %3089, label %3073

3073:                                             ; preds = %3070, %3084
  %3074 = phi %"struct.jxl::Histogram"* [ %3075, %3084 ], [ %3066, %3070 ]
  %3075 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %3074, i64 -1
  %3076 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %3075, i64 0, i32 0, i32 0, i32 0
  %3077 = load i32*, i32** %3076, align 8
  %3078 = icmp eq i32* %3077, null
  br i1 %3078, label %3084, label %3079

3079:                                             ; preds = %3073
  %3080 = ptrtoint i32* %3077 to i64
  %3081 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %3074, i64 -1, i32 0, i32 0, i32 1
  %3082 = bitcast i32** %3081 to i64*
  store i64 %3080, i64* %3082, align 8
  %3083 = bitcast i32* %3077 to i8*
  call void @_ZdlPv(i8* %3083) #14
  br label %3084

3084:                                             ; preds = %3079, %3073
  %3085 = icmp eq %"struct.jxl::Histogram"* %3075, %3067
  br i1 %3085, label %3086, label %3073

3086:                                             ; preds = %3084
  %3087 = bitcast %"class.std::__1::vector.170"* %16 to i8**
  %3088 = load i8*, i8** %3087, align 8
  br label %3089

3089:                                             ; preds = %3086, %3070
  %3090 = phi i8* [ %3088, %3086 ], [ %3071, %3070 ]
  store %"struct.jxl::Histogram"* %3067, %"struct.jxl::Histogram"** %2055, align 8
  call void @_ZdlPv(i8* %3090) #14
  br label %3166

3091:                                             ; preds = %3157, %3047
  %3092 = phi i64 [ 1, %3047 ], [ %3164, %3157 ]
  %3093 = load %"class.std::__1::vector.158"*, %"class.std::__1::vector.158"** %2018, align 8
  %3094 = load %"class.std::__1::vector.158"*, %"class.std::__1::vector.158"** %3043, align 8
  %3095 = icmp ult %"class.std::__1::vector.158"* %3093, %3094
  br i1 %3095, label %3096, label %3100

3096:                                             ; preds = %3091
  %3097 = bitcast %"class.std::__1::vector.158"* %3093 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3097, i8 0, i64 24, i1 false) #12
  %3098 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %3093, i64 1
  %3099 = ptrtoint %"class.std::__1::vector.158"* %3098 to i64
  store i64 %3099, i64* %3044, align 8
  br label %3102

3100:                                             ; preds = %3091
  call void @_ZNSt3__16vectorINS0_IN3jxl16ANSEncSymbolInfoENS_9allocatorIS2_EEEENS3_IS5_EEE24__emplace_back_slow_pathIJEEEvDpOT_(%"class.std::__1::vector.156"* %2015) #12
  %3101 = load %"class.std::__1::vector.158"*, %"class.std::__1::vector.158"** %2018, align 8
  br label %3102

3102:                                             ; preds = %3100, %3096
  %3103 = phi %"class.std::__1::vector.158"* [ %3098, %3096 ], [ %3101, %3100 ]
  %3104 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %3103, i64 -1
  %3105 = icmp ugt i64 %3092, 1
  %3106 = select i1 %3105, i64 %3092, i64 1
  %3107 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %3103, i64 -1, i32 0, i32 1
  %3108 = bitcast %"struct.jxl::ANSEncSymbolInfo"** %3107 to i64*
  %3109 = load i64, i64* %3108, align 8
  %3110 = bitcast %"class.std::__1::vector.158"* %3104 to i64*
  %3111 = load i64, i64* %3110, align 8
  %3112 = sub i64 %3109, %3111
  %3113 = sdiv exact i64 %3112, 48
  %3114 = icmp ugt i64 %3106, %3113
  %3115 = inttoptr i64 %3111 to %"struct.jxl::ANSEncSymbolInfo"*
  %3116 = inttoptr i64 %3109 to %"struct.jxl::ANSEncSymbolInfo"*
  br i1 %3114, label %3117, label %3119

3117:                                             ; preds = %3102
  %3118 = sub i64 %3106, %3113
  call void @_ZNSt3__16vectorIN3jxl16ANSEncSymbolInfoENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.158"* %3104, i64 %3118) #12
  br label %3138

3119:                                             ; preds = %3102
  %3120 = icmp ult i64 %3106, %3113
  br i1 %3120, label %3121, label %3138

3121:                                             ; preds = %3119
  %3122 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %3115, i64 %3106
  %3123 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %3122, %3116
  br i1 %3123, label %3137, label %3124

3124:                                             ; preds = %3121, %3135
  %3125 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %3126, %3135 ], [ %3116, %3121 ]
  %3126 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %3125, i64 -1
  %3127 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %3125, i64 -1, i32 2, i32 0, i32 0
  %3128 = load i16*, i16** %3127, align 8
  %3129 = icmp eq i16* %3128, null
  br i1 %3129, label %3135, label %3130

3130:                                             ; preds = %3124
  %3131 = ptrtoint i16* %3128 to i64
  %3132 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %3125, i64 -1, i32 2, i32 0, i32 1
  %3133 = bitcast i16** %3132 to i64*
  store i64 %3131, i64* %3133, align 8
  %3134 = bitcast i16* %3128 to i8*
  call void @_ZdlPv(i8* %3134) #14
  br label %3135

3135:                                             ; preds = %3130, %3124
  %3136 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %3126, %3122
  br i1 %3136, label %3137, label %3124

3137:                                             ; preds = %3135, %3121
  store %"struct.jxl::ANSEncSymbolInfo"* %3122, %"struct.jxl::ANSEncSymbolInfo"** %3107, align 8
  br label %3138

3138:                                             ; preds = %3137, %3119, %3117
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %3045) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3045, i8 -86, i64 40, i1 false) #12
  %3139 = mul i64 %3092, 24
  %3140 = add i64 %3139, 256
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %19, %"struct.jxl::BitWriter"* %5, i64 %3140) #12
  %3141 = load i32, i32* %3046, align 4
  %3142 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %2054, align 8
  %3143 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %3142, i64 %3049, i32 0, i32 0, i32 0
  %3144 = load i32*, i32** %3143, align 8
  %3145 = load %"class.std::__1::vector.158"*, %"class.std::__1::vector.158"** %2018, align 8
  %3146 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %3145, i64 -1, i32 0, i32 0
  %3147 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %3146, align 8
  %3148 = call i64 @_ZN3jxl28BuildAndStoreANSEncodingDataENS_15HistogramParams20ANSHistogramStrategyEPKimmbPNS_16ANSEncSymbolInfoEPNS_9BitWriterE(i32 %3141, i32* %3144, i64 %3092, i64 %2976, i1 zeroext %2012, %"struct.jxl::ANSEncSymbolInfo"* %3147, %"struct.jxl::BitWriter"* %5) #12
  %3149 = add i64 %3148, %3050
  call void @_ZN3jxl9BitWriter9Allotment17FinishedHistogramEPS0_(%"class.jxl::BitWriter::Allotment"* nonnull %19, %"struct.jxl::BitWriter"* %5) #12
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %5, %"class.jxl::BitWriter::Allotment"* nonnull %19, i64 %6, %"struct.jxl::AuxOut"* %7) #12
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %19) #12
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %3045) #12
  %3150 = add nuw i64 %3049, 1
  %3151 = load i64, i64* %2175, align 8
  %3152 = load i64, i64* %2177, align 8
  %3153 = sub i64 %3151, %3152
  %3154 = sdiv exact i64 %3153, 40
  %3155 = icmp ult i64 %3150, %3154
  %3156 = inttoptr i64 %3152 to %"struct.jxl::Histogram"*
  br i1 %3155, label %3047, label %3062

3157:                                             ; preds = %3157, %3059
  %3158 = phi i64 [ 0, %3059 ], [ %3163, %3157 ]
  %3159 = phi i64 [ 1, %3059 ], [ %3164, %3157 ]
  %3160 = getelementptr inbounds i32, i32* %3058, i64 %3158
  %3161 = load i32, i32* %3160, align 4
  %3162 = icmp eq i32 %3161, 0
  %3163 = add nuw i64 %3158, 1
  %3164 = select i1 %3162, i64 %3159, i64 %3163
  %3165 = icmp ult i64 %3163, %3061
  br i1 %3165, label %3157, label %3091

3166:                                             ; preds = %3065, %3089
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2053) #12
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %2013)
  %3167 = add i64 %3068, %1829
  call void @_ZN3jxl9BitWriter9Allotment17FinishedHistogramEPS0_(%"class.jxl::BitWriter::Allotment"* nonnull %30, %"struct.jxl::BitWriter"* %5) #12
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %5, %"class.jxl::BitWriter::Allotment"* nonnull %30, i64 %6, %"struct.jxl::AuxOut"* %7) #12
  br i1 %2174, label %3178, label %3168

3168:                                             ; preds = %3166
  %3169 = bitcast %"class.std::__1::vector.158"** %2018 to i64*
  %3170 = load i64, i64* %3169, align 8
  %3171 = bitcast %"struct.jxl::EntropyEncodingData"* %3 to i64*
  %3172 = load i64, i64* %3171, align 8
  %3173 = sub i64 %3170, %3172
  %3174 = sdiv exact i64 %3173, 24
  %3175 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %7, i64 0, i32 0, i32 0, i64 %6, i32 0
  %3176 = load i64, i64* %3175, align 8
  %3177 = add i64 %3174, %3176
  store i64 %3177, i64* %3175, align 8
  br label %3178

3178:                                             ; preds = %3166, %3168
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1855) #12
  %3179 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %1831, align 8
  %3180 = icmp eq %"struct.jxl::Histogram"* %3179, null
  br i1 %3180, label %3203, label %3181

3181:                                             ; preds = %3178
  %3182 = bitcast %"struct.jxl::Histogram"* %3179 to i8*
  %3183 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %1832, align 8
  %3184 = icmp eq %"struct.jxl::Histogram"* %3183, %3179
  br i1 %3184, label %3201, label %3185

3185:                                             ; preds = %3181, %3196
  %3186 = phi %"struct.jxl::Histogram"* [ %3187, %3196 ], [ %3183, %3181 ]
  %3187 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %3186, i64 -1
  %3188 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %3187, i64 0, i32 0, i32 0, i32 0
  %3189 = load i32*, i32** %3188, align 8
  %3190 = icmp eq i32* %3189, null
  br i1 %3190, label %3196, label %3191

3191:                                             ; preds = %3185
  %3192 = ptrtoint i32* %3189 to i64
  %3193 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %3186, i64 -1, i32 0, i32 0, i32 1
  %3194 = bitcast i32** %3193 to i64*
  store i64 %3192, i64* %3194, align 8
  %3195 = bitcast i32* %3189 to i8*
  call void @_ZdlPv(i8* %3195) #14
  br label %3196

3196:                                             ; preds = %3191, %3185
  %3197 = icmp eq %"struct.jxl::Histogram"* %3187, %3179
  br i1 %3197, label %3198, label %3185

3198:                                             ; preds = %3196
  %3199 = bitcast %"class.jxl::(anonymous namespace)::HistogramBuilder"* %33 to i8**
  %3200 = load i8*, i8** %3199, align 8
  br label %3201

3201:                                             ; preds = %3198, %3181
  %3202 = phi i8* [ %3200, %3198 ], [ %3182, %3181 ]
  store %"struct.jxl::Histogram"* %3179, %"struct.jxl::Histogram"** %1832, align 8
  call void @_ZdlPv(i8* %3202) #14
  br label %3203

3203:                                             ; preds = %3178, %3201
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1830) #12
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %30) #12
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %1693) #12
  %3204 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %39, align 16
  %3205 = icmp eq %"class.std::__1::vector.144"* %3204, null
  br i1 %3205, label %3228, label %3206

3206:                                             ; preds = %3203
  %3207 = bitcast %"class.std::__1::vector.144"* %3204 to i8*
  %3208 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %40, align 8
  %3209 = icmp eq %"class.std::__1::vector.144"* %3208, %3204
  br i1 %3209, label %3226, label %3210

3210:                                             ; preds = %3206, %3221
  %3211 = phi %"class.std::__1::vector.144"* [ %3212, %3221 ], [ %3208, %3206 ]
  %3212 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %3211, i64 -1
  %3213 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %3212, i64 0, i32 0, i32 0
  %3214 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %3213, align 8
  %3215 = icmp eq %"struct.jxl::Token"* %3214, null
  br i1 %3215, label %3221, label %3216

3216:                                             ; preds = %3210
  %3217 = ptrtoint %"struct.jxl::Token"* %3214 to i64
  %3218 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %3211, i64 -1, i32 0, i32 1
  %3219 = bitcast %"struct.jxl::Token"** %3218 to i64*
  store i64 %3217, i64* %3219, align 8
  %3220 = bitcast %"struct.jxl::Token"* %3214 to i8*
  call void @_ZdlPv(i8* %3220) #14
  br label %3221

3221:                                             ; preds = %3216, %3210
  %3222 = icmp eq %"class.std::__1::vector.144"* %3212, %3204
  br i1 %3222, label %3223, label %3210

3223:                                             ; preds = %3221
  %3224 = bitcast %"class.std::__1::vector.142"* %29 to i8**
  %3225 = load i8*, i8** %3224, align 16
  br label %3226

3226:                                             ; preds = %3223, %3206
  %3227 = phi i8* [ %3225, %3223 ], [ %3207, %3206 ]
  store %"class.std::__1::vector.144"* %3204, %"class.std::__1::vector.144"** %40, align 8
  call void @_ZdlPv(i8* %3227) #14
  br label %3228

3228:                                             ; preds = %3203, %3226
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %38) #12
  ret i64 %3167
}

declare i32 @_ZN3jxl6Bundle5WriteERKNS_6FieldsEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Fields"* dereferenceable(8), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

declare i32 @_ZN3jxl6Bundle9CanEncodeERKNS_6FieldsEPmS4_(%"class.jxl::Fields"* dereferenceable(8), i64*, i64*) local_unnamed_addr #2

declare float @_ZNK3jxl9Histogram14ShannonEntropyEv(%"struct.jxl::Histogram"*) local_unnamed_addr #2

declare void @_ZN3jxl9BitWriter9Allotment17FinishedHistogramEPS0_(%"class.jxl::BitWriter::Allotment"*, %"struct.jxl::BitWriter"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterE(%"class.std::__1::vector.144"* nocapture readonly dereferenceable(24), %"struct.jxl::EntropyEncodingData"* nocapture readonly dereferenceable(104), %"class.std::__1::vector.18"* nocapture readonly dereferenceable(24), %"struct.jxl::BitWriter"*) local_unnamed_addr #0 {
  %5 = alloca %"class.std::__1::vector.135", align 8
  %6 = alloca %"class.std::__1::vector.18", align 8
  %7 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %1, i64 0, i32 1
  %8 = load i8, i8* %7, align 8, !range !21
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %106, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %0, i64 0, i32 0, i32 1
  %12 = bitcast %"struct.jxl::Token"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.std::__1::vector.144"* %0 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %13, %15
  br i1 %16, label %542, label %17

17:                                               ; preds = %10
  %18 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %2, i64 0, i32 0, i32 0
  %19 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %1, i64 0, i32 3, i32 4
  %20 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %1, i64 0, i32 2, i32 0, i32 0
  %21 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %1, i64 0, i32 3, i32 2
  %22 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %1, i64 0, i32 0, i32 0, i32 0
  br label %23

23:                                               ; preds = %17, %76
  %24 = phi i64 [ %15, %17 ], [ %102, %76 ]
  %25 = phi i64 [ 0, %17 ], [ %99, %76 ]
  %26 = phi i64 [ 0, %17 ], [ %100, %76 ]
  %27 = inttoptr i64 %24 to %"struct.jxl::Token"*
  %28 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %27, i64 %26, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = lshr i32 %29, 1
  %31 = zext i32 %30 to i64
  %32 = load i8*, i8** %18, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 %31
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i64
  %36 = and i32 %29, 1
  %37 = icmp eq i32 %36, 0
  %38 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %20, align 8
  %39 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %38, i64 %35
  %40 = select i1 %37, %"struct.jxl::HybridUintConfig"* %39, %"struct.jxl::HybridUintConfig"* %19
  %41 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %27, i64 %26, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %40, i64 0, i32 1
  %44 = load i32, i32* %43, align 4, !noalias !41
  %45 = icmp ugt i32 %44, %42
  br i1 %45, label %76, label %46

46:                                               ; preds = %23
  %47 = tail call i32 @llvm.ctlz.i32(i32 %42, i1 true) #12, !range !3
  %48 = xor i32 %47, 31
  %49 = shl i32 1, %48
  %50 = sub i32 %42, %49
  %51 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %40, i64 0, i32 0
  %52 = load i32, i32* %51, align 4, !noalias !41
  %53 = sub i32 %48, %52
  %54 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %40, i64 0, i32 2
  %55 = load i32, i32* %54, align 4, !noalias !41
  %56 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %40, i64 0, i32 3
  %57 = load i32, i32* %56, align 4, !noalias !41
  %58 = add i32 %57, %55
  %59 = shl i32 %53, %58
  %60 = add i32 %59, %44
  %61 = sub i32 %48, %55
  %62 = lshr i32 %50, %61
  %63 = shl i32 %62, %57
  %64 = add i32 %60, %63
  %65 = shl nsw i32 -1, %57
  %66 = xor i32 %65, -1
  %67 = and i32 %50, %66
  %68 = add i32 %64, %67
  %69 = sub i32 %61, %57
  %70 = lshr i32 %42, %57
  %71 = zext i32 %69 to i64
  %72 = shl nsw i64 -1, %71
  %73 = trunc i64 %72 to i32
  %74 = xor i32 %73, -1
  %75 = and i32 %70, %74
  br label %76

76:                                               ; preds = %23, %46
  %77 = phi i32 [ %68, %46 ], [ %42, %23 ]
  %78 = phi i32 [ %69, %46 ], [ 0, %23 ]
  %79 = phi i32 [ %75, %46 ], [ 0, %23 ]
  %80 = load i32, i32* %21, align 4
  %81 = select i1 %37, i32 0, i32 %80
  %82 = add i32 %81, %77
  %83 = load %"class.std::__1::vector.158"*, %"class.std::__1::vector.158"** %22, align 8
  %84 = zext i32 %82 to i64
  %85 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %83, i64 %35, i32 0, i32 0
  %86 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %85, align 8
  %87 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %86, i64 %84, i32 6
  %88 = load i16, i16* %87, align 2
  %89 = zext i16 %88 to i64
  %90 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %86, i64 %84, i32 4
  %91 = load i8, i8* %90, align 8
  %92 = zext i8 %91 to i32
  %93 = shl i32 %79, %92
  %94 = zext i32 %93 to i64
  %95 = or i64 %94, %89
  %96 = add i32 %78, %92
  %97 = zext i32 %96 to i64
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %3, i64 %97, i64 %95) #12
  %98 = zext i32 %78 to i64
  %99 = add i64 %25, %98
  %100 = add nuw i64 %26, 1
  %101 = load i64, i64* %12, align 8
  %102 = load i64, i64* %14, align 8
  %103 = sub i64 %101, %102
  %104 = ashr exact i64 %103, 3
  %105 = icmp ult i64 %100, %104
  br i1 %105, label %23, label %542

106:                                              ; preds = %4
  %107 = bitcast %"class.std::__1::vector.135"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %107) #12
  %108 = getelementptr inbounds %"class.std::__1::vector.135", %"class.std::__1::vector.135"* %5, i64 0, i32 0, i32 1
  %109 = getelementptr inbounds %"class.std::__1::vector.135", %"class.std::__1::vector.135"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %107, i8 0, i64 24, i1 false) #12
  %110 = bitcast %"class.std::__1::vector.18"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %110) #12
  %111 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %6, i64 0, i32 0, i32 0
  %112 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %6, i64 0, i32 0, i32 1
  %113 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %110, i8 0, i64 24, i1 false) #12
  %114 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %0, i64 0, i32 0, i32 1
  %115 = bitcast %"struct.jxl::Token"** %114 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = bitcast %"class.std::__1::vector.144"* %0 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = sub i64 %116, %118
  %120 = ashr exact i64 %119, 3
  %121 = bitcast i64** %109 to i64*
  %122 = bitcast %"class.std::__1::vector.135"* %5 to i64*
  %123 = icmp eq i64 %119, 0
  %124 = inttoptr i64 %118 to %"struct.jxl::Token"*
  br i1 %123, label %128, label %125

125:                                              ; preds = %106
  %126 = icmp ugt i64 %120, 2305843009213693951
  br i1 %126, label %127, label %131

127:                                              ; preds = %125
  tail call void @abort() #13
  unreachable

128:                                              ; preds = %106
  %129 = bitcast i8** %113 to i64*
  %130 = bitcast %"class.std::__1::vector.18"* %6 to i64*
  br label %147

131:                                              ; preds = %125
  %132 = bitcast i64** %108 to i64*
  %133 = tail call i8* @_Znwm(i64 %119) #14
  %134 = bitcast i8* %133 to i64*
  %135 = ptrtoint i8* %133 to i64
  %136 = getelementptr inbounds i64, i64* %134, i64 %120
  %137 = ptrtoint i64* %136 to i64
  %138 = ptrtoint i8* %133 to i64
  store i64 %138, i64* %122, align 8
  store i64 %135, i64* %132, align 8
  store i64 %137, i64* %121, align 8
  %139 = bitcast i8* %133 to i64*
  %140 = bitcast i8** %113 to i64*
  %141 = bitcast %"class.std::__1::vector.18"* %6 to i64*
  %142 = bitcast i8** %112 to i64*
  %143 = tail call i8* @_Znwm(i64 %120) #14
  %144 = ptrtoint i8* %143 to i64
  %145 = getelementptr inbounds i8, i8* %143, i64 %120
  %146 = ptrtoint i8* %145 to i64
  store i64 %144, i64* %141, align 8
  store i64 %144, i64* %142, align 8
  store i64 %146, i64* %140, align 8
  br label %147

147:                                              ; preds = %131, %128
  %148 = phi i64* [ %130, %128 ], [ %141, %131 ]
  %149 = phi i64* [ %129, %128 ], [ %140, %131 ]
  %150 = phi i64 [ 0, %128 ], [ %135, %131 ]
  %151 = phi i64 [ 0, %128 ], [ %138, %131 ]
  %152 = phi i64* [ null, %128 ], [ %139, %131 ]
  %153 = phi i8* [ null, %128 ], [ %143, %131 ]
  %154 = phi i64 [ 0, %128 ], [ %144, %131 ]
  %155 = lshr exact i64 %119, 3
  %156 = trunc i64 %155 to i32
  %157 = icmp sgt i32 %156, 0
  br i1 %157, label %160, label %158

158:                                              ; preds = %147
  %159 = bitcast i64** %108 to i64*
  br label %176

160:                                              ; preds = %147
  %161 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %0, i64 0, i32 0, i32 0
  %162 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %2, i64 0, i32 0, i32 0
  %163 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %1, i64 0, i32 3, i32 4
  %164 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %1, i64 0, i32 2, i32 0, i32 0
  %165 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %1, i64 0, i32 3, i32 2
  %166 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %1, i64 0, i32 0, i32 0, i32 0
  %167 = bitcast i64** %108 to i64*
  %168 = bitcast i8** %112 to i64*
  %169 = shl i64 %119, 29
  %170 = ashr exact i64 %169, 32
  br label %195

171:                                              ; preds = %509
  %172 = load i64, i64* %167, align 8
  %173 = load i64, i64* %122, align 8
  %174 = inttoptr i64 %173 to i64*
  %175 = zext i32 %404 to i64
  br label %176

176:                                              ; preds = %158, %171
  %177 = phi i64* [ %159, %158 ], [ %167, %171 ]
  %178 = phi i64* [ %152, %158 ], [ %174, %171 ]
  %179 = phi i64 [ %151, %158 ], [ %173, %171 ]
  %180 = phi i64 [ %150, %158 ], [ %172, %171 ]
  %181 = phi i64 [ 0, %158 ], [ %517, %171 ]
  %182 = phi i64 [ 0, %158 ], [ %516, %171 ]
  %183 = phi i64 [ 1245184, %158 ], [ %175, %171 ]
  %184 = phi i64 [ 0, %158 ], [ %378, %171 ]
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %3, i64 32, i64 %183) #12
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %3, i64 %181, i64 %182) #12
  %185 = sub i64 %180, %179
  %186 = lshr exact i64 %185, 3
  %187 = trunc i64 %186 to i32
  %188 = icmp sgt i32 %187, 0
  br i1 %188, label %191, label %189

189:                                              ; preds = %176
  %190 = load i8*, i8** %111, align 8
  br label %521

191:                                              ; preds = %176
  %192 = shl i64 %185, 29
  %193 = ashr exact i64 %192, 32
  %194 = load i8*, i8** %111, align 8
  br label %533

195:                                              ; preds = %519, %160
  %196 = phi i8* [ %153, %160 ], [ %510, %519 ]
  %197 = phi i64 [ %154, %160 ], [ %511, %519 ]
  %198 = phi i8* [ %153, %160 ], [ %512, %519 ]
  %199 = phi %"struct.jxl::Token"* [ %124, %160 ], [ %520, %519 ]
  %200 = phi i64 [ %170, %160 ], [ %205, %519 ]
  %201 = phi i64 [ 0, %160 ], [ %378, %519 ]
  %202 = phi i32 [ 1245184, %160 ], [ %404, %519 ]
  %203 = phi i64 [ 0, %160 ], [ %516, %519 ]
  %204 = phi i64 [ 0, %160 ], [ %517, %519 ]
  %205 = add nsw i64 %200, -1
  %206 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %199, i64 %205, i32 0
  %207 = load i32, i32* %206, align 4
  %208 = lshr i32 %207, 1
  %209 = zext i32 %208 to i64
  %210 = load i8*, i8** %162, align 8
  %211 = getelementptr inbounds i8, i8* %210, i64 %209
  %212 = load i8, i8* %211, align 1
  %213 = and i32 %207, 1
  %214 = icmp ne i32 %213, 0
  %215 = zext i8 %212 to i64
  %216 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %164, align 8
  %217 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %216, i64 %215
  %218 = select i1 %214, %"struct.jxl::HybridUintConfig"* %163, %"struct.jxl::HybridUintConfig"* %217
  %219 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %199, i64 %205, i32 1
  %220 = load i32, i32* %219, align 4
  %221 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %218, i64 0, i32 1
  %222 = load i32, i32* %221, align 4, !noalias !46
  %223 = icmp ugt i32 %222, %220
  br i1 %223, label %254, label %224

224:                                              ; preds = %195
  %225 = tail call i32 @llvm.ctlz.i32(i32 %220, i1 true) #12, !range !3
  %226 = xor i32 %225, 31
  %227 = shl i32 1, %226
  %228 = sub i32 %220, %227
  %229 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %218, i64 0, i32 0
  %230 = load i32, i32* %229, align 4, !noalias !46
  %231 = sub i32 %226, %230
  %232 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %218, i64 0, i32 2
  %233 = load i32, i32* %232, align 4, !noalias !46
  %234 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %218, i64 0, i32 3
  %235 = load i32, i32* %234, align 4, !noalias !46
  %236 = add i32 %235, %233
  %237 = shl i32 %231, %236
  %238 = add i32 %237, %222
  %239 = sub i32 %226, %233
  %240 = lshr i32 %228, %239
  %241 = shl i32 %240, %235
  %242 = add i32 %238, %241
  %243 = shl nsw i32 -1, %235
  %244 = xor i32 %243, -1
  %245 = and i32 %228, %244
  %246 = add i32 %242, %245
  %247 = sub i32 %239, %235
  %248 = lshr i32 %220, %235
  %249 = zext i32 %247 to i64
  %250 = shl nsw i64 -1, %249
  %251 = trunc i64 %250 to i32
  %252 = xor i32 %251, -1
  %253 = and i32 %248, %252
  br label %254

254:                                              ; preds = %195, %224
  %255 = phi i32 [ %246, %224 ], [ %220, %195 ]
  %256 = phi i32 [ %247, %224 ], [ 0, %195 ]
  %257 = phi i32 [ %253, %224 ], [ 0, %195 ]
  %258 = load i32, i32* %165, align 4
  %259 = select i1 %214, i32 %258, i32 0
  %260 = add i32 %259, %255
  %261 = load %"class.std::__1::vector.158"*, %"class.std::__1::vector.158"** %166, align 8
  %262 = zext i32 %260 to i64
  %263 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %261, i64 %215, i32 0, i32 0
  %264 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %263, align 8
  %265 = zext i32 %257 to i64
  %266 = zext i32 %256 to i64
  %267 = add i64 %204, %266
  %268 = icmp ugt i64 %267, 56
  br i1 %268, label %269, label %369, !prof !51

269:                                              ; preds = %254
  %270 = load i64*, i64** %108, align 8
  %271 = load i64*, i64** %109, align 8
  %272 = icmp eq i64* %270, %271
  %273 = ptrtoint i64* %271 to i64
  br i1 %272, label %279, label %274

274:                                              ; preds = %269
  store i64 %203, i64* %270, align 8
  %275 = getelementptr inbounds i64, i64* %270, i64 1
  %276 = ptrtoint i64* %275 to i64
  store i64 %276, i64* %167, align 8
  %277 = load i8*, i8** %112, align 8
  %278 = ptrtoint i8* %277 to i64
  br label %322

279:                                              ; preds = %269
  %280 = ptrtoint i64* %270 to i64
  %281 = load i64, i64* %122, align 8
  %282 = sub i64 %280, %281
  %283 = ashr exact i64 %282, 3
  %284 = add nsw i64 %283, 1
  %285 = icmp ugt i64 %284, 2305843009213693951
  br i1 %285, label %286, label %288

286:                                              ; preds = %279
  %287 = bitcast %"class.std::__1::vector.135"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %287) #13
  unreachable

288:                                              ; preds = %279
  %289 = sub i64 %273, %281
  %290 = ashr exact i64 %289, 3
  %291 = icmp ult i64 %290, 1152921504606846975
  br i1 %291, label %292, label %300

292:                                              ; preds = %288
  %293 = ashr exact i64 %289, 2
  %294 = icmp ult i64 %293, %284
  %295 = select i1 %294, i64 %284, i64 %293
  %296 = icmp eq i64 %295, 0
  br i1 %296, label %305, label %297

297:                                              ; preds = %292
  %298 = icmp ugt i64 %295, 2305843009213693951
  br i1 %298, label %299, label %300

299:                                              ; preds = %297
  tail call void @abort() #13
  unreachable

300:                                              ; preds = %297, %288
  %301 = phi i64 [ %295, %297 ], [ 2305843009213693951, %288 ]
  %302 = shl i64 %301, 3
  %303 = tail call i8* @_Znwm(i64 %302) #14
  %304 = bitcast i8* %303 to i64*
  br label %305

305:                                              ; preds = %300, %292
  %306 = phi i64 [ %301, %300 ], [ 0, %292 ]
  %307 = phi i8* [ %303, %300 ], [ null, %292 ]
  %308 = phi i64* [ %304, %300 ], [ null, %292 ]
  %309 = getelementptr inbounds i64, i64* %308, i64 %283
  %310 = getelementptr inbounds i64, i64* %308, i64 %306
  %311 = ptrtoint i64* %310 to i64
  store i64 %203, i64* %309, align 8
  %312 = getelementptr inbounds i64, i64* %309, i64 1
  %313 = ptrtoint i64* %312 to i64
  %314 = ptrtoint i64* %308 to i64
  %315 = icmp sgt i64 %282, 0
  br i1 %315, label %316, label %318

316:                                              ; preds = %305
  %317 = inttoptr i64 %281 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %307, i8* align 8 %317, i64 %282, i1 false) #12
  br label %318

318:                                              ; preds = %316, %305
  store i64 %314, i64* %122, align 8
  store i64 %313, i64* %167, align 8
  store i64 %311, i64* %121, align 8
  %319 = icmp eq i64 %281, 0
  br i1 %319, label %322, label %320

320:                                              ; preds = %318
  %321 = inttoptr i64 %281 to i8*
  tail call void @_ZdlPv(i8* %321) #14
  br label %322

322:                                              ; preds = %274, %318, %320
  %323 = phi i64 [ %278, %274 ], [ %197, %318 ], [ %197, %320 ]
  %324 = phi i8* [ %277, %274 ], [ %198, %318 ], [ %198, %320 ]
  %325 = trunc i64 %204 to i8
  %326 = load i8*, i8** %113, align 8
  %327 = icmp ult i8* %324, %326
  %328 = ptrtoint i8* %326 to i64
  br i1 %327, label %329, label %332

329:                                              ; preds = %322
  store i8 %325, i8* %324, align 1
  %330 = getelementptr inbounds i8, i8* %324, i64 1
  %331 = ptrtoint i8* %330 to i64
  store i64 %331, i64* %168, align 8
  br label %369

332:                                              ; preds = %322
  %333 = ptrtoint i8* %324 to i64
  %334 = load i64, i64* %148, align 8
  %335 = sub i64 %333, %334
  %336 = add i64 %335, 1
  %337 = icmp slt i64 %336, 0
  %338 = inttoptr i64 %334 to i8*
  br i1 %337, label %339, label %341

339:                                              ; preds = %332
  %340 = bitcast %"class.std::__1::vector.18"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %340) #13
  unreachable

341:                                              ; preds = %332
  %342 = sub i64 %328, %334
  %343 = icmp ult i64 %342, 4611686018427387903
  br i1 %343, label %344, label %349

344:                                              ; preds = %341
  %345 = shl i64 %342, 1
  %346 = icmp ult i64 %345, %336
  %347 = select i1 %346, i64 %336, i64 %345
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %352, label %349

349:                                              ; preds = %344, %341
  %350 = phi i64 [ %347, %344 ], [ 9223372036854775807, %341 ]
  %351 = tail call i8* @_Znwm(i64 %350) #14
  br label %352

352:                                              ; preds = %349, %344
  %353 = phi i64 [ %350, %349 ], [ 0, %344 ]
  %354 = phi i8* [ %351, %349 ], [ null, %344 ]
  %355 = getelementptr inbounds i8, i8* %354, i64 %335
  %356 = getelementptr inbounds i8, i8* %354, i64 %353
  %357 = ptrtoint i8* %356 to i64
  store i8 %325, i8* %355, align 1
  %358 = getelementptr inbounds i8, i8* %355, i64 1
  %359 = ptrtoint i8* %358 to i64
  %360 = sub i64 %323, %334
  %361 = sub i64 0, %360
  %362 = getelementptr inbounds i8, i8* %355, i64 %361
  %363 = ptrtoint i8* %362 to i64
  %364 = icmp sgt i64 %360, 0
  br i1 %364, label %365, label %366

365:                                              ; preds = %352
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %362, i8* align 1 %338, i64 %360, i1 false) #12
  br label %366

366:                                              ; preds = %365, %352
  store i64 %363, i64* %148, align 8
  store i64 %359, i64* %168, align 8
  store i64 %357, i64* %149, align 8
  %367 = icmp eq i64 %334, 0
  br i1 %367, label %369, label %368

368:                                              ; preds = %366
  tail call void @_ZdlPv(i8* nonnull %338) #14
  br label %369

369:                                              ; preds = %368, %366, %329, %254
  %370 = phi i8* [ %196, %254 ], [ %330, %329 ], [ %358, %366 ], [ %358, %368 ]
  %371 = phi i64 [ %197, %254 ], [ %331, %329 ], [ %359, %366 ], [ %359, %368 ]
  %372 = phi i8* [ %198, %254 ], [ %330, %329 ], [ %358, %366 ], [ %358, %368 ]
  %373 = phi i64 [ %204, %254 ], [ 0, %329 ], [ 0, %366 ], [ 0, %368 ]
  %374 = phi i64 [ %203, %254 ], [ 0, %329 ], [ 0, %366 ], [ 0, %368 ]
  %375 = shl i64 %374, %266
  %376 = or i64 %375, %265
  %377 = add i64 %373, %266
  %378 = add i64 %201, %266
  %379 = lshr i32 %202, 20
  %380 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %264, i64 %262, i32 0
  %381 = load i16, i16* %380, align 8
  %382 = zext i16 %381 to i32
  %383 = icmp ult i32 %379, %382
  %384 = and i32 %202, 65535
  %385 = lshr i32 %202, 16
  %386 = select i1 %383, i32 %202, i32 %385
  %387 = select i1 %383, i32 0, i32 %384
  %388 = zext i32 %386 to i64
  %389 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %264, i64 %262, i32 3
  %390 = load i64, i64* %389, align 8
  %391 = mul i64 %390, %388
  %392 = lshr i64 %391, 44
  %393 = trunc i64 %392 to i32
  %394 = mul i32 %393, %382
  %395 = sub i32 %386, %394
  %396 = zext i32 %395 to i64
  %397 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %264, i64 %262, i32 2, i32 0, i32 0
  %398 = load i16*, i16** %397, align 8
  %399 = getelementptr inbounds i16, i16* %398, i64 %396
  %400 = load i16, i16* %399, align 2
  %401 = zext i16 %400 to i32
  %402 = shl nuw nsw i64 %392, 12
  %403 = trunc i64 %402 to i32
  %404 = add i32 %403, %401
  %405 = zext i32 %387 to i64
  %406 = select i1 %383, i64 0, i64 16
  %407 = add i64 %406, %377
  %408 = icmp ugt i64 %407, 56
  br i1 %408, label %409, label %509, !prof !51

409:                                              ; preds = %369
  %410 = load i64*, i64** %108, align 8
  %411 = load i64*, i64** %109, align 8
  %412 = icmp eq i64* %410, %411
  %413 = ptrtoint i64* %411 to i64
  br i1 %412, label %419, label %414

414:                                              ; preds = %409
  store i64 %376, i64* %410, align 8
  %415 = getelementptr inbounds i64, i64* %410, i64 1
  %416 = ptrtoint i64* %415 to i64
  store i64 %416, i64* %167, align 8
  %417 = load i8*, i8** %112, align 8
  %418 = ptrtoint i8* %417 to i64
  br label %462

419:                                              ; preds = %409
  %420 = ptrtoint i64* %410 to i64
  %421 = load i64, i64* %122, align 8
  %422 = sub i64 %420, %421
  %423 = ashr exact i64 %422, 3
  %424 = add nsw i64 %423, 1
  %425 = icmp ugt i64 %424, 2305843009213693951
  br i1 %425, label %426, label %428

426:                                              ; preds = %419
  %427 = bitcast %"class.std::__1::vector.135"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %427) #13
  unreachable

428:                                              ; preds = %419
  %429 = sub i64 %413, %421
  %430 = ashr exact i64 %429, 3
  %431 = icmp ult i64 %430, 1152921504606846975
  br i1 %431, label %432, label %440

432:                                              ; preds = %428
  %433 = ashr exact i64 %429, 2
  %434 = icmp ult i64 %433, %424
  %435 = select i1 %434, i64 %424, i64 %433
  %436 = icmp eq i64 %435, 0
  br i1 %436, label %445, label %437

437:                                              ; preds = %432
  %438 = icmp ugt i64 %435, 2305843009213693951
  br i1 %438, label %439, label %440

439:                                              ; preds = %437
  tail call void @abort() #13
  unreachable

440:                                              ; preds = %437, %428
  %441 = phi i64 [ %435, %437 ], [ 2305843009213693951, %428 ]
  %442 = shl i64 %441, 3
  %443 = tail call i8* @_Znwm(i64 %442) #14
  %444 = bitcast i8* %443 to i64*
  br label %445

445:                                              ; preds = %440, %432
  %446 = phi i64 [ %441, %440 ], [ 0, %432 ]
  %447 = phi i8* [ %443, %440 ], [ null, %432 ]
  %448 = phi i64* [ %444, %440 ], [ null, %432 ]
  %449 = getelementptr inbounds i64, i64* %448, i64 %423
  %450 = getelementptr inbounds i64, i64* %448, i64 %446
  %451 = ptrtoint i64* %450 to i64
  store i64 %376, i64* %449, align 8
  %452 = getelementptr inbounds i64, i64* %449, i64 1
  %453 = ptrtoint i64* %452 to i64
  %454 = ptrtoint i64* %448 to i64
  %455 = icmp sgt i64 %422, 0
  br i1 %455, label %456, label %458

456:                                              ; preds = %445
  %457 = inttoptr i64 %421 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %447, i8* align 8 %457, i64 %422, i1 false) #12
  br label %458

458:                                              ; preds = %456, %445
  store i64 %454, i64* %122, align 8
  store i64 %453, i64* %167, align 8
  store i64 %451, i64* %121, align 8
  %459 = icmp eq i64 %421, 0
  br i1 %459, label %462, label %460

460:                                              ; preds = %458
  %461 = inttoptr i64 %421 to i8*
  tail call void @_ZdlPv(i8* %461) #14
  br label %462

462:                                              ; preds = %414, %458, %460
  %463 = phi i64 [ %418, %414 ], [ %371, %458 ], [ %371, %460 ]
  %464 = phi i8* [ %417, %414 ], [ %370, %458 ], [ %370, %460 ]
  %465 = trunc i64 %377 to i8
  %466 = load i8*, i8** %113, align 8
  %467 = icmp ult i8* %464, %466
  %468 = ptrtoint i8* %466 to i64
  br i1 %467, label %469, label %472

469:                                              ; preds = %462
  store i8 %465, i8* %464, align 1
  %470 = getelementptr inbounds i8, i8* %464, i64 1
  %471 = ptrtoint i8* %470 to i64
  store i64 %471, i64* %168, align 8
  br label %509

472:                                              ; preds = %462
  %473 = ptrtoint i8* %464 to i64
  %474 = load i64, i64* %148, align 8
  %475 = sub i64 %473, %474
  %476 = add i64 %475, 1
  %477 = icmp slt i64 %476, 0
  %478 = inttoptr i64 %474 to i8*
  br i1 %477, label %479, label %481

479:                                              ; preds = %472
  %480 = bitcast %"class.std::__1::vector.18"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %480) #13
  unreachable

481:                                              ; preds = %472
  %482 = sub i64 %468, %474
  %483 = icmp ult i64 %482, 4611686018427387903
  br i1 %483, label %484, label %489

484:                                              ; preds = %481
  %485 = shl i64 %482, 1
  %486 = icmp ult i64 %485, %476
  %487 = select i1 %486, i64 %476, i64 %485
  %488 = icmp eq i64 %487, 0
  br i1 %488, label %492, label %489

489:                                              ; preds = %484, %481
  %490 = phi i64 [ %487, %484 ], [ 9223372036854775807, %481 ]
  %491 = tail call i8* @_Znwm(i64 %490) #14
  br label %492

492:                                              ; preds = %489, %484
  %493 = phi i64 [ %490, %489 ], [ 0, %484 ]
  %494 = phi i8* [ %491, %489 ], [ null, %484 ]
  %495 = getelementptr inbounds i8, i8* %494, i64 %475
  %496 = getelementptr inbounds i8, i8* %494, i64 %493
  %497 = ptrtoint i8* %496 to i64
  store i8 %465, i8* %495, align 1
  %498 = getelementptr inbounds i8, i8* %495, i64 1
  %499 = ptrtoint i8* %498 to i64
  %500 = sub i64 %463, %474
  %501 = sub i64 0, %500
  %502 = getelementptr inbounds i8, i8* %495, i64 %501
  %503 = ptrtoint i8* %502 to i64
  %504 = icmp sgt i64 %500, 0
  br i1 %504, label %505, label %506

505:                                              ; preds = %492
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %502, i8* align 1 %478, i64 %500, i1 false) #12
  br label %506

506:                                              ; preds = %505, %492
  store i64 %503, i64* %148, align 8
  store i64 %499, i64* %168, align 8
  store i64 %497, i64* %149, align 8
  %507 = icmp eq i64 %474, 0
  br i1 %507, label %509, label %508

508:                                              ; preds = %506
  tail call void @_ZdlPv(i8* nonnull %478) #14
  br label %509

509:                                              ; preds = %508, %506, %469, %369
  %510 = phi i8* [ %370, %369 ], [ %470, %469 ], [ %498, %506 ], [ %498, %508 ]
  %511 = phi i64 [ %371, %369 ], [ %471, %469 ], [ %499, %506 ], [ %499, %508 ]
  %512 = phi i8* [ %372, %369 ], [ %470, %469 ], [ %498, %506 ], [ %498, %508 ]
  %513 = phi i64 [ %377, %369 ], [ 0, %469 ], [ 0, %506 ], [ 0, %508 ]
  %514 = phi i64 [ %376, %369 ], [ 0, %469 ], [ 0, %506 ], [ 0, %508 ]
  %515 = shl i64 %514, %406
  %516 = or i64 %515, %405
  %517 = add i64 %513, %406
  %518 = icmp sgt i64 %205, 0
  br i1 %518, label %519, label %171

519:                                              ; preds = %509
  %520 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %161, align 8
  br label %195

521:                                              ; preds = %533, %189
  %522 = phi i8* [ %190, %189 ], [ %194, %533 ]
  %523 = icmp eq i8* %522, null
  br i1 %523, label %527, label %524

524:                                              ; preds = %521
  %525 = ptrtoint i8* %522 to i64
  %526 = bitcast i8** %112 to i64*
  store i64 %525, i64* %526, align 8
  tail call void @_ZdlPv(i8* nonnull %522) #14
  br label %527

527:                                              ; preds = %521, %524
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %110) #12
  %528 = icmp eq i64* %178, null
  br i1 %528, label %532, label %529

529:                                              ; preds = %527
  %530 = ptrtoint i64* %178 to i64
  store i64 %530, i64* %177, align 8
  %531 = bitcast i64* %178 to i8*
  tail call void @_ZdlPv(i8* %531) #14
  br label %532

532:                                              ; preds = %527, %529
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %107) #12
  br label %542

533:                                              ; preds = %191, %533
  %534 = phi i64 [ %193, %191 ], [ %535, %533 ]
  %535 = add nsw i64 %534, -1
  %536 = getelementptr inbounds i8, i8* %194, i64 %535
  %537 = load i8, i8* %536, align 1
  %538 = zext i8 %537 to i64
  %539 = getelementptr inbounds i64, i64* %178, i64 %535
  %540 = load i64, i64* %539, align 8
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %3, i64 %538, i64 %540) #12
  %541 = icmp sgt i64 %535, 0
  br i1 %541, label %533, label %521

542:                                              ; preds = %76, %10, %532
  %543 = phi i64 [ %184, %532 ], [ 0, %10 ], [ %99, %76 ]
  ret i64 %543
}

declare void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.144"* nocapture readonly dereferenceable(24), %"struct.jxl::EntropyEncodingData"* nocapture readonly dereferenceable(104), %"class.std::__1::vector.18"* nocapture readonly dereferenceable(24), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #0 {
  %7 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %8 = bitcast %"class.jxl::BitWriter::Allotment"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 40, i1 false)
  %9 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %0, i64 0, i32 0, i32 1
  %10 = bitcast %"struct.jxl::Token"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector.144"* %0 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = shl i64 %14, 2
  %16 = add i64 %15, 131072
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %7, %"struct.jxl::BitWriter"* %3, i64 %16) #12
  %17 = call i64 @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterE(%"class.std::__1::vector.144"* dereferenceable(24) %0, %"struct.jxl::EntropyEncodingData"* dereferenceable(104) %1, %"class.std::__1::vector.18"* dereferenceable(24) %2, %"struct.jxl::BitWriter"* %3)
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %3, %"class.jxl::BitWriter::Allotment"* nonnull %7, i64 %4, %"struct.jxl::AuxOut"* %5) #12
  %18 = icmp eq %"struct.jxl::AuxOut"* %5, null
  br i1 %18, label %23, label %19

19:                                               ; preds = %6
  %20 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %5, i64 0, i32 0, i32 0, i64 %4, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, %17
  store i64 %22, i64* %20, align 8
  br label %23

23:                                               ; preds = %6, %19
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #12
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3jxl20SetANSFuzzerFriendlyEb(i1 zeroext) local_unnamed_addr #5 {
  ret void
}

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc float @_ZN3jxl12_GLOBAL__N_123ComputeHistoAndDataCostEPKimj(i32*, i64, i32) unnamed_addr #0 {
  %4 = alloca %"class.std::__1::vector.11", align 8
  %5 = alloca %"class.std::__1::vector.128", align 8
  %6 = alloca %"class.std::__1::vector.128", align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [4 x i32], align 16
  %10 = icmp eq i32 %2, 0
  br i1 %10, label %11, label %142

11:                                               ; preds = %3
  %12 = uitofp i64 %1 to float
  %13 = bitcast float %12 to i32
  %14 = add i32 %13, -1059760811
  %15 = lshr i32 %14, 23
  %16 = ashr i32 %14, 31
  %17 = shl nsw i32 %16, 8
  %18 = or i32 %17, %15
  %19 = shl i32 %18, 23
  %20 = sub i32 %13, %19
  %21 = bitcast i32 %20 to float
  %22 = sitofp i32 %18 to float
  %23 = fadd float %21, -1.000000e+00
  fence acq_rel
  %24 = insertelement <2 x float> undef, float %23, i32 0
  %25 = shufflevector <2 x float> %24, <2 x float> undef, <2 x i32> zeroinitializer
  %26 = fmul <2 x float> %25, <float 0x3FE7C238E0000000, float 0x3FC648B180000000>
  %27 = fadd <2 x float> %26, <float 0x3FF6DC0560000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %28 = fmul <2 x float> %25, %27
  %29 = fadd <2 x float> %28, <float 0xBEBF0B5600000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %30 = extractelement <2 x float> %29, i32 0
  %31 = extractelement <2 x float> %29, i32 1
  %32 = fdiv float %30, %31
  %33 = fadd float %32, %22
  %34 = fcmp olt float %33, 0.000000e+00
  %35 = select i1 %34, float 0.000000e+00, float %33
  %36 = icmp eq i64 %1, 0
  br i1 %36, label %138, label %37

37:                                               ; preds = %11
  %38 = icmp ult i64 %1, 8
  br i1 %38, label %39, label %42

39:                                               ; preds = %117, %37
  %40 = phi i64 [ 0, %37 ], [ %43, %117 ]
  %41 = phi i32 [ 0, %37 ], [ %125, %117 ]
  br label %130

42:                                               ; preds = %37
  %43 = and i64 %1, -8
  %44 = add i64 %43, -8
  %45 = lshr exact i64 %44, 3
  %46 = add nuw nsw i64 %45, 1
  %47 = and i64 %46, 3
  %48 = icmp ult i64 %44, 24
  br i1 %48, label %94, label %49

49:                                               ; preds = %42
  %50 = sub nsw i64 %46, %47
  br label %51

51:                                               ; preds = %51, %49
  %52 = phi i64 [ 0, %49 ], [ %91, %51 ]
  %53 = phi <4 x i32> [ zeroinitializer, %49 ], [ %89, %51 ]
  %54 = phi <4 x i32> [ zeroinitializer, %49 ], [ %90, %51 ]
  %55 = phi i64 [ %50, %49 ], [ %92, %51 ]
  %56 = getelementptr inbounds i32, i32* %0, i64 %52
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4
  %59 = getelementptr inbounds i32, i32* %56, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4
  %62 = add nsw <4 x i32> %58, %53
  %63 = add nsw <4 x i32> %61, %54
  %64 = or i64 %52, 8
  %65 = getelementptr inbounds i32, i32* %0, i64 %64
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4
  %68 = getelementptr inbounds i32, i32* %65, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4
  %71 = add nsw <4 x i32> %67, %62
  %72 = add nsw <4 x i32> %70, %63
  %73 = or i64 %52, 16
  %74 = getelementptr inbounds i32, i32* %0, i64 %73
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 4
  %77 = getelementptr inbounds i32, i32* %74, i64 4
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4
  %80 = add nsw <4 x i32> %76, %71
  %81 = add nsw <4 x i32> %79, %72
  %82 = or i64 %52, 24
  %83 = getelementptr inbounds i32, i32* %0, i64 %82
  %84 = bitcast i32* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 4
  %86 = getelementptr inbounds i32, i32* %83, i64 4
  %87 = bitcast i32* %86 to <4 x i32>*
  %88 = load <4 x i32>, <4 x i32>* %87, align 4
  %89 = add nsw <4 x i32> %85, %80
  %90 = add nsw <4 x i32> %88, %81
  %91 = add i64 %52, 32
  %92 = add i64 %55, -4
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %51, !llvm.loop !52

94:                                               ; preds = %51, %42
  %95 = phi <4 x i32> [ undef, %42 ], [ %89, %51 ]
  %96 = phi <4 x i32> [ undef, %42 ], [ %90, %51 ]
  %97 = phi i64 [ 0, %42 ], [ %91, %51 ]
  %98 = phi <4 x i32> [ zeroinitializer, %42 ], [ %89, %51 ]
  %99 = phi <4 x i32> [ zeroinitializer, %42 ], [ %90, %51 ]
  %100 = icmp eq i64 %47, 0
  br i1 %100, label %117, label %101

101:                                              ; preds = %94, %101
  %102 = phi i64 [ %114, %101 ], [ %97, %94 ]
  %103 = phi <4 x i32> [ %112, %101 ], [ %98, %94 ]
  %104 = phi <4 x i32> [ %113, %101 ], [ %99, %94 ]
  %105 = phi i64 [ %115, %101 ], [ %47, %94 ]
  %106 = getelementptr inbounds i32, i32* %0, i64 %102
  %107 = bitcast i32* %106 to <4 x i32>*
  %108 = load <4 x i32>, <4 x i32>* %107, align 4
  %109 = getelementptr inbounds i32, i32* %106, i64 4
  %110 = bitcast i32* %109 to <4 x i32>*
  %111 = load <4 x i32>, <4 x i32>* %110, align 4
  %112 = add nsw <4 x i32> %108, %103
  %113 = add nsw <4 x i32> %111, %104
  %114 = add i64 %102, 8
  %115 = add i64 %105, -1
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %101, !llvm.loop !53

117:                                              ; preds = %101, %94
  %118 = phi <4 x i32> [ %95, %94 ], [ %112, %101 ]
  %119 = phi <4 x i32> [ %96, %94 ], [ %113, %101 ]
  %120 = add <4 x i32> %119, %118
  %121 = shufflevector <4 x i32> %120, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %122 = add <4 x i32> %120, %121
  %123 = shufflevector <4 x i32> %122, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %124 = add <4 x i32> %122, %123
  %125 = extractelement <4 x i32> %124, i32 0
  %126 = icmp eq i64 %43, %1
  br i1 %126, label %127, label %39

127:                                              ; preds = %130, %117
  %128 = phi i32 [ %125, %117 ], [ %135, %130 ]
  %129 = sitofp i32 %128 to float
  br label %138

130:                                              ; preds = %39, %130
  %131 = phi i64 [ %136, %130 ], [ %40, %39 ]
  %132 = phi i32 [ %135, %130 ], [ %41, %39 ]
  %133 = getelementptr inbounds i32, i32* %0, i64 %131
  %134 = load i32, i32* %133, align 4
  %135 = add nsw i32 %134, %132
  %136 = add nuw i64 %131, 1
  %137 = icmp eq i64 %136, %1
  br i1 %137, label %127, label %130, !llvm.loop !54

138:                                              ; preds = %11, %127
  %139 = phi float [ 0.000000e+00, %11 ], [ %129, %127 ]
  %140 = fmul float %35, %139
  %141 = fadd float %140, 1.400000e+01
  br label %578

142:                                              ; preds = %3
  %143 = add i32 %2, -1
  %144 = bitcast %"class.std::__1::vector.128"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %144) #12
  %145 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %6, i64 0, i32 0, i32 0
  %146 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %6, i64 0, i32 0, i32 1
  %147 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %144, i8 0, i64 24, i1 false) #12
  %148 = shl nuw i64 %1, 2
  %149 = ashr exact i64 %148, 2
  %150 = icmp eq i64 %1, 0
  br i1 %150, label %170, label %151

151:                                              ; preds = %142
  %152 = icmp ugt i64 %149, 4611686018427387903
  br i1 %152, label %153, label %155

153:                                              ; preds = %151
  %154 = bitcast %"class.std::__1::vector.128"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %154) #13
  unreachable

155:                                              ; preds = %151
  %156 = tail call i8* @_Znwm(i64 %148) #14
  %157 = bitcast i8* %156 to i32*
  %158 = bitcast i32** %146 to i8**
  store i8* %156, i8** %158, align 8
  %159 = bitcast %"class.std::__1::vector.128"* %6 to i8**
  store i8* %156, i8** %159, align 8
  %160 = getelementptr inbounds i32, i32* %157, i64 %149
  store i32* %160, i32** %147, align 8
  %161 = bitcast i32** %146 to i64*
  %162 = ptrtoint i8* %156 to i64
  %163 = icmp sgt i64 %148, 0
  br i1 %163, label %164, label %168

164:                                              ; preds = %155
  %165 = bitcast i32* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %156, i8* align 4 %165, i64 %148, i1 false) #12
  %166 = getelementptr inbounds i32, i32* %157, i64 %1
  %167 = ptrtoint i32* %166 to i64
  br label %168

168:                                              ; preds = %164, %155
  %169 = phi i64 [ %167, %164 ], [ %162, %155 ]
  store i64 %169, i64* %161, align 8
  br label %170

170:                                              ; preds = %142, %168
  %171 = phi i32* [ null, %142 ], [ %157, %168 ]
  %172 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %172) #12
  store i32 0, i32* %7, align 4
  %173 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %173) #12
  store i32 -1431655766, i32* %8, align 4
  %174 = bitcast [4 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %174) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %174, i8 0, i64 16, i1 false)
  %175 = trunc i64 %1 to i32
  %176 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 0
  %177 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115NormalizeCountsEPiS1_iijS1_S1_(i32* %171, i32* nonnull %7, i32 %175, i32 %143, i32* nonnull %8, i32* nonnull %176)
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %182, label %179

179:                                              ; preds = %170
  %180 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 390, i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.6, i64 0, i64 0)) #12
  %181 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

182:                                              ; preds = %170
  %183 = load i32*, i32** %145, align 8
  %184 = load i32, i32* %7, align 4
  %185 = load i32, i32* %8, align 4
  %186 = icmp slt i32 %185, 3
  br i1 %186, label %187, label %237

187:                                              ; preds = %182
  %188 = icmp eq i32 %185, 0
  br i1 %188, label %505, label %189

189:                                              ; preds = %187
  %190 = icmp sgt i32 %185, 0
  br i1 %190, label %191, label %505

191:                                              ; preds = %189
  %192 = zext i32 %185 to i64
  %193 = and i64 %192, 1
  %194 = icmp eq i32 %185, 1
  br i1 %194, label %217, label %195

195:                                              ; preds = %191
  %196 = sub nsw i64 %192, %193
  br label %197

197:                                              ; preds = %585, %195
  %198 = phi i64 [ 2, %195 ], [ %586, %585 ]
  %199 = phi i64 [ 0, %195 ], [ %587, %585 ]
  %200 = phi i64 [ %196, %195 ], [ %588, %585 ]
  %201 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 %199
  %202 = load i32, i32* %201, align 8
  %203 = icmp eq i32 %202, 0
  %204 = add i64 %198, 1
  br i1 %203, label %210, label %205

205:                                              ; preds = %197
  %206 = sext i32 %202 to i64
  %207 = tail call i64 @llvm.ctlz.i64(i64 %206, i1 true) #12, !range !2
  %208 = add i64 %198, 67
  %209 = sub i64 %208, %207
  br label %210

210:                                              ; preds = %205, %197
  %211 = phi i64 [ %209, %205 ], [ %204, %197 ]
  %212 = or i64 %199, 1
  %213 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 %212
  %214 = load i32, i32* %213, align 4
  %215 = icmp eq i32 %214, 0
  %216 = add i64 %211, 1
  br i1 %215, label %585, label %580

217:                                              ; preds = %585, %191
  %218 = phi i64 [ undef, %191 ], [ %586, %585 ]
  %219 = phi i64 [ 2, %191 ], [ %586, %585 ]
  %220 = phi i64 [ 0, %191 ], [ %587, %585 ]
  %221 = icmp eq i64 %193, 0
  br i1 %221, label %232, label %222

222:                                              ; preds = %217
  %223 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 %220
  %224 = load i32, i32* %223, align 4
  %225 = icmp eq i32 %224, 0
  %226 = add i64 %219, 1
  br i1 %225, label %232, label %227

227:                                              ; preds = %222
  %228 = sext i32 %224 to i64
  %229 = tail call i64 @llvm.ctlz.i64(i64 %228, i1 true) #12, !range !2
  %230 = add i64 %219, 67
  %231 = sub i64 %230, %229
  br label %232

232:                                              ; preds = %227, %222, %217
  %233 = phi i64 [ %218, %217 ], [ %231, %227 ], [ %226, %222 ]
  %234 = icmp eq i32 %185, 2
  %235 = add i64 %233, 12
  %236 = select i1 %234, i64 %235, i64 %233
  br label %505

237:                                              ; preds = %182
  %238 = bitcast %"class.std::__1::vector.11"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %238) #12
  %239 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %4, i64 0, i32 0, i32 0
  %240 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %4, i64 0, i32 0, i32 1
  %241 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %242 = shl i64 %1, 32
  %243 = ashr exact i64 %242, 32
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %238, i8 0, i64 24, i1 false) #12
  %244 = icmp eq i32 %175, 0
  br i1 %244, label %263, label %245

245:                                              ; preds = %237
  %246 = icmp slt i32 %175, 0
  br i1 %246, label %247, label %249

247:                                              ; preds = %245
  %248 = bitcast %"class.std::__1::vector.11"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %248) #13
  unreachable

249:                                              ; preds = %245
  %250 = ashr exact i64 %242, 30
  %251 = tail call i8* @_Znwm(i64 %250) #14
  %252 = bitcast i8* %251 to i32*
  %253 = bitcast %"class.std::__1::vector.11"* %4 to i8**
  store i8* %251, i8** %253, align 8
  %254 = getelementptr inbounds i32, i32* %252, i64 %243
  store i32* %254, i32** %241, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %251, i8 0, i64 %250, i1 false) #12
  %255 = bitcast i32** %240 to i64*
  %256 = ptrtoint i32* %254 to i64
  store i64 %256, i64* %255, align 8
  %257 = icmp sgt i32 %175, 1
  br i1 %257, label %258, label %263

258:                                              ; preds = %249
  %259 = add nsw i32 %184, 1
  %260 = zext i32 %259 to i64
  %261 = zext i32 %184 to i64
  %262 = and i64 %1, 4294967295
  br label %292

263:                                              ; preds = %316, %249, %237
  %264 = bitcast %"class.std::__1::vector.128"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %264) #12
  %265 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %5, i64 0, i32 0, i32 0
  %266 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %5, i64 0, i32 0, i32 1
  %267 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %264, i8 0, i64 24, i1 false) #12
  br i1 %244, label %272, label %268

268:                                              ; preds = %263
  %269 = icmp slt i32 %175, 0
  br i1 %269, label %270, label %274

270:                                              ; preds = %268
  %271 = bitcast %"class.std::__1::vector.128"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %271) #13
  unreachable

272:                                              ; preds = %263
  %273 = sext i32 %184 to i64
  br label %318

274:                                              ; preds = %268
  %275 = ashr exact i64 %242, 30
  %276 = tail call i8* @_Znwm(i64 %275) #14
  %277 = bitcast i8* %276 to i32*
  %278 = bitcast %"class.std::__1::vector.128"* %5 to i8**
  store i8* %276, i8** %278, align 8
  %279 = getelementptr inbounds i32, i32* %277, i64 %243
  store i32* %279, i32** %267, align 8
  %280 = bitcast i32** %266 to i64*
  %281 = ptrtoint i8* %276 to i64
  %282 = add nsw i64 %243, -1
  %283 = getelementptr i32, i32* %277, i64 %282
  %284 = ptrtoint i32* %283 to i64
  %285 = sub i64 4, %281
  %286 = add i64 %285, %284
  %287 = and i64 %286, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %276, i8 0, i64 %287, i1 false) #12
  %288 = ptrtoint i32* %279 to i64
  store i64 %288, i64* %280, align 8
  %289 = sext i32 %184 to i64
  %290 = zext i32 %184 to i64
  %291 = and i64 %1, 4294967295
  br label %333

292:                                              ; preds = %316, %258
  %293 = phi i64 [ 1, %258 ], [ %301, %316 ]
  %294 = phi i32 [ 0, %258 ], [ %317, %316 ]
  %295 = getelementptr inbounds i32, i32* %183, i64 %293
  %296 = load i32, i32* %295, align 4
  %297 = sext i32 %294 to i64
  %298 = getelementptr inbounds i32, i32* %183, i64 %297
  %299 = load i32, i32* %298, align 4
  %300 = icmp ne i32 %296, %299
  %301 = add nuw nsw i64 %293, 1
  %302 = icmp eq i64 %301, %262
  %303 = or i1 %302, %300
  %304 = trunc i64 %293 to i32
  %305 = sub nsw i32 %304, %294
  %306 = icmp sgt i32 %305, 254
  %307 = or i1 %306, %303
  %308 = icmp eq i64 %293, %261
  %309 = or i1 %308, %307
  %310 = icmp eq i64 %293, %260
  %311 = or i1 %310, %309
  br i1 %311, label %312, label %316

312:                                              ; preds = %292
  %313 = load i32*, i32** %239, align 8
  %314 = getelementptr inbounds i32, i32* %313, i64 %297
  store i32 %305, i32* %314, align 4
  %315 = trunc i64 %301 to i32
  br label %316

316:                                              ; preds = %312, %292
  %317 = phi i32 [ %315, %312 ], [ %294, %292 ]
  br i1 %302, label %263, label %292

318:                                              ; preds = %374, %272
  %319 = phi i64 [ %273, %272 ], [ %289, %374 ]
  %320 = phi i32* [ null, %272 ], [ %375, %374 ]
  %321 = phi i32 [ 0, %272 ], [ %377, %374 ]
  %322 = phi i32 [ 0, %272 ], [ %378, %374 ]
  %323 = getelementptr inbounds i32, i32* %320, i64 %319
  store i32 %321, i32* %323, align 4
  %324 = tail call i32 @llvm.ctlz.i32(i32 %2, i1 true) #12, !range !3
  %325 = xor i32 %324, 31
  %326 = icmp eq i32 %325, 3
  %327 = shl nuw nsw i32 %325, 1
  %328 = zext i32 %327 to i64
  %329 = select i1 %326, i64 2, i64 3
  %330 = add nuw nsw i64 %329, %328
  %331 = add nsw i32 %322, -3
  %332 = icmp sgt i32 %331, 255
  br i1 %332, label %382, label %384

333:                                              ; preds = %374, %274
  %334 = phi i32* [ %277, %274 ], [ %375, %374 ]
  %335 = phi i32* [ %277, %274 ], [ %376, %374 ]
  %336 = phi i64 [ 0, %274 ], [ %379, %374 ]
  %337 = phi i32 [ 0, %274 ], [ %380, %374 ]
  %338 = phi i32 [ 0, %274 ], [ %378, %374 ]
  %339 = phi i32 [ 0, %274 ], [ %377, %374 ]
  %340 = getelementptr inbounds i32, i32* %183, i64 %336
  %341 = load i32, i32* %340, align 4
  %342 = icmp slt i32 %341, 4097
  br i1 %342, label %346, label %343

343:                                              ; preds = %333
  %344 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 301, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0)) #12
  %345 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

346:                                              ; preds = %333
  %347 = icmp sgt i32 %341, -1
  br i1 %347, label %351, label %348

348:                                              ; preds = %346
  %349 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 302, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0)) #12
  %350 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

351:                                              ; preds = %346
  %352 = icmp eq i64 %336, %290
  br i1 %352, label %353, label %355

353:                                              ; preds = %351
  %354 = add nuw nsw i32 %337, 1
  br label %374

355:                                              ; preds = %351
  %356 = icmp sgt i32 %341, 0
  br i1 %356, label %357, label %374

357:                                              ; preds = %355
  %358 = tail call i32 @llvm.ctlz.i32(i32 %341, i1 true) #12, !range !3
  %359 = sub nuw nsw i32 32, %358
  %360 = getelementptr inbounds i32, i32* %335, i64 %336
  store i32 %359, i32* %360, align 4
  %361 = icmp slt i64 %336, %289
  %362 = load i32*, i32** %265, align 8
  %363 = getelementptr inbounds i32, i32* %362, i64 %336
  %364 = load i32, i32* %363, align 4
  %365 = trunc i64 %336 to i32
  %366 = add i32 %365, 1
  br i1 %361, label %367, label %371

367:                                              ; preds = %357
  %368 = add nsw i32 %364, 1
  %369 = icmp slt i32 %339, %368
  %370 = select i1 %369, i32 %368, i32 %339
  br label %374

371:                                              ; preds = %357
  %372 = icmp slt i32 %339, %364
  %373 = select i1 %372, i32 %364, i32 %339
  br label %374

374:                                              ; preds = %371, %367, %355, %353
  %375 = phi i32* [ %334, %353 ], [ %362, %367 ], [ %362, %371 ], [ %334, %355 ]
  %376 = phi i32* [ %335, %353 ], [ %362, %367 ], [ %362, %371 ], [ %335, %355 ]
  %377 = phi i32 [ %339, %353 ], [ %370, %367 ], [ %373, %371 ], [ %339, %355 ]
  %378 = phi i32 [ %354, %353 ], [ %366, %367 ], [ %366, %371 ], [ %338, %355 ]
  %379 = add nuw nsw i64 %336, 1
  %380 = add nuw nsw i32 %337, 1
  %381 = icmp eq i64 %379, %291
  br i1 %381, label %318, label %333

382:                                              ; preds = %318
  %383 = add nuw nsw i64 %330, 11
  br label %392

384:                                              ; preds = %318
  %385 = icmp eq i32 %331, 0
  %386 = add nuw nsw i64 %330, 1
  br i1 %385, label %397, label %387

387:                                              ; preds = %384
  %388 = sext i32 %331 to i64
  %389 = tail call i64 @llvm.ctlz.i64(i64 %388, i1 true) #12, !range !2
  %390 = add nuw nsw i64 %330, 67
  %391 = sub nuw nsw i64 %390, %389
  br label %392

392:                                              ; preds = %387, %382
  %393 = phi i64 [ %383, %382 ], [ %391, %387 ]
  %394 = icmp sgt i32 %322, 0
  br i1 %394, label %397, label %395

395:                                              ; preds = %392
  %396 = load i32*, i32** %265, align 8
  br label %438

397:                                              ; preds = %384, %392
  %398 = phi i64 [ %393, %392 ], [ %386, %384 ]
  %399 = load i32*, i32** %239, align 8
  %400 = load i32*, i32** %265, align 8
  br label %401

401:                                              ; preds = %433, %397
  %402 = phi i64 [ %434, %433 ], [ %398, %397 ]
  %403 = phi i32 [ %436, %433 ], [ 0, %397 ]
  %404 = icmp sgt i32 %403, 0
  br i1 %404, label %405, label %424

405:                                              ; preds = %401
  %406 = add nsw i32 %403, -1
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds i32, i32* %399, i64 %407
  %409 = load i32, i32* %408, align 4
  %410 = icmp ugt i32 %409, 4
  br i1 %410, label %411, label %424

411:                                              ; preds = %405
  %412 = zext i32 %409 to i64
  %413 = add nsw i64 %412, -5
  %414 = icmp eq i64 %413, 0
  %415 = add i64 %402, 8
  br i1 %414, label %420, label %416

416:                                              ; preds = %411
  %417 = tail call i64 @llvm.ctlz.i64(i64 %413, i1 true) #12, !range !2
  %418 = add i64 %402, 74
  %419 = sub i64 %418, %417
  br label %420

420:                                              ; preds = %416, %411
  %421 = phi i64 [ %419, %416 ], [ %415, %411 ]
  %422 = add nsw i32 %403, -2
  %423 = add i32 %422, %409
  br label %433

424:                                              ; preds = %405, %401
  %425 = sext i32 %403 to i64
  %426 = getelementptr inbounds i32, i32* %400, i64 %425
  %427 = load i32, i32* %426, align 4
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds [14 x i8], [14 x i8]* @_ZN3jxl12_GLOBAL__N_119kLogCountBitLengthsE, i64 0, i64 %428
  %430 = load i8, i8* %429, align 1
  %431 = zext i8 %430 to i64
  %432 = add i64 %402, %431
  br label %433

433:                                              ; preds = %424, %420
  %434 = phi i64 [ %421, %420 ], [ %432, %424 ]
  %435 = phi i32 [ %423, %420 ], [ %403, %424 ]
  %436 = add nsw i32 %435, 1
  %437 = icmp slt i32 %436, %322
  br i1 %437, label %401, label %455

438:                                              ; preds = %499, %395
  %439 = phi i32* [ %396, %395 ], [ %400, %499 ]
  %440 = phi i64 [ %393, %395 ], [ %500, %499 ]
  %441 = icmp eq i32* %439, null
  br i1 %441, label %446, label %442

442:                                              ; preds = %438
  %443 = ptrtoint i32* %439 to i64
  %444 = bitcast i32** %266 to i64*
  store i64 %443, i64* %444, align 8
  %445 = bitcast i32* %439 to i8*
  tail call void @_ZdlPv(i8* %445) #14
  br label %446

446:                                              ; preds = %442, %438
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %264) #12
  %447 = load i32*, i32** %239, align 8
  %448 = icmp eq i32* %447, null
  br i1 %448, label %453, label %449

449:                                              ; preds = %446
  %450 = ptrtoint i32* %447 to i64
  %451 = bitcast i32** %240 to i64*
  store i64 %450, i64* %451, align 8
  %452 = bitcast i32* %447 to i8*
  tail call void @_ZdlPv(i8* %452) #14
  br label %453

453:                                              ; preds = %449, %446
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %238) #12
  %454 = load i32*, i32** %145, align 8
  br label %505

455:                                              ; preds = %433, %499
  %456 = phi i64 [ %500, %499 ], [ %434, %433 ]
  %457 = phi i64 [ %501, %499 ], [ %434, %433 ]
  %458 = phi i32 [ %503, %499 ], [ 0, %433 ]
  %459 = icmp sgt i32 %458, 0
  br i1 %459, label %460, label %469

460:                                              ; preds = %455
  %461 = add nsw i32 %458, -1
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds i32, i32* %399, i64 %462
  %464 = load i32, i32* %463, align 4
  %465 = icmp ugt i32 %464, 4
  br i1 %465, label %466, label %469

466:                                              ; preds = %460
  %467 = add nsw i32 %458, -2
  %468 = add i32 %467, %464
  br label %499

469:                                              ; preds = %460, %455
  %470 = sext i32 %458 to i64
  %471 = getelementptr inbounds i32, i32* %400, i64 %470
  %472 = load i32, i32* %471, align 4
  %473 = icmp slt i32 %472, 2
  %474 = icmp eq i32 %458, %184
  %475 = or i1 %474, %473
  br i1 %475, label %499, label %476

476:                                              ; preds = %469
  %477 = add nsw i32 %472, -1
  %478 = sub nsw i32 13, %472
  %479 = lshr i32 %478, 1
  %480 = sub nsw i32 %143, %479
  %481 = icmp slt i32 %480, %477
  %482 = select i1 %481, i32 %480, i32 %477
  %483 = icmp sgt i32 %482, 0
  %484 = select i1 %483, i32 %482, i32 0
  %485 = xor i32 %484, -1
  %486 = add i32 %472, %485
  %487 = getelementptr inbounds i32, i32* %183, i64 %470
  %488 = load i32, i32* %487, align 4
  %489 = shl nsw i32 -1, %486
  %490 = xor i32 %489, -1
  %491 = and i32 %488, %490
  %492 = icmp eq i32 %491, 0
  br i1 %492, label %496, label %493

493:                                              ; preds = %476
  %494 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 359, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.11, i64 0, i64 0)) #12
  %495 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

496:                                              ; preds = %476
  %497 = zext i32 %484 to i64
  %498 = add i64 %457, %497
  br label %499

499:                                              ; preds = %496, %469, %466
  %500 = phi i64 [ %456, %466 ], [ %456, %469 ], [ %498, %496 ]
  %501 = phi i64 [ %457, %466 ], [ %457, %469 ], [ %498, %496 ]
  %502 = phi i32 [ %468, %466 ], [ %458, %469 ], [ %458, %496 ]
  %503 = add nsw i32 %502, 1
  %504 = icmp slt i32 %503, %322
  br i1 %504, label %455, label %438

505:                                              ; preds = %232, %187, %189, %453
  %506 = phi i32* [ %183, %189 ], [ %454, %453 ], [ %183, %187 ], [ %183, %232 ]
  %507 = phi i64 [ 2, %189 ], [ %440, %453 ], [ 3, %187 ], [ %236, %232 ]
  %508 = uitofp i64 %507 to float
  br i1 %150, label %568, label %513

509:                                              ; preds = %559
  %510 = icmp slt i32 %520, 1
  %511 = icmp eq i32 %523, 4096
  %512 = or i1 %510, %511
  br i1 %512, label %566, label %563

513:                                              ; preds = %505, %559
  %514 = phi i64 [ %561, %559 ], [ 0, %505 ]
  %515 = phi i32 [ %523, %559 ], [ 0, %505 ]
  %516 = phi i32 [ %520, %559 ], [ 0, %505 ]
  %517 = phi float [ %560, %559 ], [ 0.000000e+00, %505 ]
  %518 = getelementptr inbounds i32, i32* %0, i64 %514
  %519 = load i32, i32* %518, align 4
  %520 = add nsw i32 %519, %516
  %521 = getelementptr inbounds i32, i32* %506, i64 %514
  %522 = load i32, i32* %521, align 4
  %523 = add nsw i32 %522, %515
  %524 = icmp sgt i32 %519, 0
  br i1 %524, label %525, label %559

525:                                              ; preds = %513
  %526 = icmp sgt i32 %522, 0
  br i1 %526, label %530, label %527

527:                                              ; preds = %525
  %528 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 83, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0)) #12
  %529 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

530:                                              ; preds = %525
  %531 = sitofp i32 %519 to float
  %532 = sitofp i32 %522 to float
  %533 = bitcast float %532 to i32
  %534 = add i32 %533, -1059760811
  %535 = lshr i32 %534, 23
  %536 = ashr i32 %534, 31
  %537 = shl nsw i32 %536, 8
  %538 = or i32 %537, %535
  %539 = shl i32 %538, 23
  %540 = sub i32 %533, %539
  %541 = bitcast i32 %540 to float
  %542 = sitofp i32 %538 to float
  %543 = fadd float %541, -1.000000e+00
  fence acq_rel
  %544 = insertelement <2 x float> undef, float %543, i32 0
  %545 = shufflevector <2 x float> %544, <2 x float> undef, <2 x i32> zeroinitializer
  %546 = fmul <2 x float> %545, <float 0x3FE7C238E0000000, float 0x3FC648B180000000>
  %547 = fadd <2 x float> %546, <float 0x3FF6DC0560000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %548 = fmul <2 x float> %545, %547
  %549 = fadd <2 x float> %548, <float 0xBEBF0B5600000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %550 = extractelement <2 x float> %549, i32 0
  %551 = extractelement <2 x float> %549, i32 1
  %552 = fdiv float %550, %551
  %553 = fadd float %552, %542
  %554 = fsub float 1.200000e+01, %553
  %555 = fcmp ogt float %554, 0.000000e+00
  %556 = select i1 %555, float %554, float 0.000000e+00
  %557 = fmul float %556, %531
  %558 = fadd float %517, %557
  br label %559

559:                                              ; preds = %530, %513
  %560 = phi float [ %558, %530 ], [ %517, %513 ]
  %561 = add nuw i64 %514, 1
  %562 = icmp eq i64 %561, %1
  br i1 %562, label %509, label %513

563:                                              ; preds = %509
  %564 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 90, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.14, i64 0, i64 0)) #12
  %565 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

566:                                              ; preds = %509
  %567 = load i32*, i32** %145, align 8
  br label %568

568:                                              ; preds = %566, %505
  %569 = phi i32* [ %567, %566 ], [ %506, %505 ]
  %570 = phi float [ %560, %566 ], [ 0.000000e+00, %505 ]
  %571 = fadd float %570, %508
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %174) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %173) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %172) #12
  %572 = icmp eq i32* %569, null
  br i1 %572, label %577, label %573

573:                                              ; preds = %568
  %574 = ptrtoint i32* %569 to i64
  %575 = bitcast i32** %146 to i64*
  store i64 %574, i64* %575, align 8
  %576 = bitcast i32* %569 to i8*
  tail call void @_ZdlPv(i8* %576) #14
  br label %577

577:                                              ; preds = %568, %573
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %144) #12
  br label %578

578:                                              ; preds = %577, %138
  %579 = phi float [ %141, %138 ], [ %571, %577 ]
  ret float %579

580:                                              ; preds = %210
  %581 = sext i32 %214 to i64
  %582 = tail call i64 @llvm.ctlz.i64(i64 %581, i1 true) #12, !range !2
  %583 = add i64 %211, 67
  %584 = sub i64 %583, %582
  br label %585

585:                                              ; preds = %580, %210
  %586 = phi i64 [ %584, %580 ], [ %216, %210 ]
  %587 = add nuw nsw i64 %199, 2
  %588 = add i64 %200, -2
  %589 = icmp eq i64 %588, 0
  br i1 %589, label %217, label %197
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorItNS_9allocatorItEEE8__appendEm(%"class.std::__1::vector.4"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i16** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i16** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 1
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i16*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i16, i16* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i16, i16* %13, i64 %18
  %20 = bitcast i16* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 2
  %25 = and i64 %24, -2
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %17, i8 0, i64 %25, i1 false) #12
  %26 = ptrtoint i16* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %81

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.4"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 1
  %34 = add i64 %33, %1
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.4"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #13
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 1
  %41 = icmp ult i64 %40, 4611686018427387903
  %42 = icmp ult i64 %39, %34
  %43 = select i1 %42, i64 %34, i64 %39
  %44 = select i1 %41, i64 %43, i64 9223372036854775807
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %53, label %46

46:                                               ; preds = %38
  %47 = icmp slt i64 %44, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %46
  tail call void @abort() #13
  unreachable

49:                                               ; preds = %46
  %50 = shl i64 %44, 1
  %51 = tail call i8* @_Znwm(i64 %50) #14
  %52 = bitcast i8* %51 to i16*
  br label %53

53:                                               ; preds = %49, %38
  %54 = phi i16* [ %52, %49 ], [ null, %38 ]
  %55 = getelementptr inbounds i16, i16* %54, i64 %33
  %56 = getelementptr inbounds i16, i16* %54, i64 %44
  %57 = getelementptr inbounds i16, i16* %55, i64 %1
  %58 = bitcast i16* %55 to i8*
  %59 = shl i64 %1, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %58, i8 0, i64 %59, i1 false) #12
  %60 = ptrtoint i16* %56 to i64
  %61 = ptrtoint i16* %57 to i64
  %62 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %63 = load i16*, i16** %62, align 8
  %64 = load i64, i64* %7, align 8
  %65 = ptrtoint i16* %63 to i64
  %66 = sub i64 %64, %65
  %67 = ashr exact i64 %66, 1
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds i16, i16* %55, i64 %68
  %70 = ptrtoint i16* %69 to i64
  %71 = icmp sgt i64 %66, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %53
  %73 = bitcast i16* %69 to i8*
  %74 = bitcast i16* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %74, i64 %66, i1 false) #12
  %75 = load i16*, i16** %62, align 8
  br label %76

76:                                               ; preds = %53, %72
  %77 = phi i16* [ %63, %53 ], [ %75, %72 ]
  store i64 %70, i64* %30, align 8
  store i64 %61, i64* %7, align 8
  store i64 %60, i64* %4, align 8
  %78 = icmp eq i16* %77, null
  br i1 %78, label %81, label %79

79:                                               ; preds = %76
  %80 = bitcast i16* %77 to i8*
  tail call void @_ZdlPv(i8* %80) #14
  br label %81

81:                                               ; preds = %79, %76, %27
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_114ApplyLZ77_LZ77ERKNS_15HistogramParamsEmRKNSt3__16vectorINS5_INS_5TokenENS4_9allocatorIS6_EEEENS7_IS9_EEEERNS_10LZ77ParamsERSB_(%"struct.jxl::HistogramParams"* nocapture readonly dereferenceable(56), i64, %"class.std::__1::vector.142"* nocapture readonly dereferenceable(24), %"struct.jxl::LZ77Params"* nocapture dereferenceable(48), %"class.std::__1::vector.142"* dereferenceable(24)) unnamed_addr #0 {
  %6 = alloca %"class.jxl::(anonymous namespace)::SymbolCostEstimator", align 8
  %7 = alloca %"class.std::__1::vector.188", align 8
  %8 = alloca %"struct.jxl::(anonymous namespace)::HashChain", align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = bitcast %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %13) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 56, i1 false)
  %14 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 6
  %15 = load i8, i8* %14, align 8, !range !21
  %16 = icmp ne i8 %15, 0
  call fastcc void @_ZN3jxl12_GLOBAL__N_119SymbolCostEstimatorC2EmbRKNSt3__16vectorINS3_INS_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS_10LZ77ParamsE(%"class.jxl::(anonymous namespace)::SymbolCostEstimator"* nonnull %6, i64 %1, i1 zeroext %16, %"class.std::__1::vector.142"* dereferenceable(24) %2, %"struct.jxl::LZ77Params"* dereferenceable(48) %3)
  %17 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %2, i64 0, i32 0, i32 1
  %18 = bitcast %"class.std::__1::vector.144"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.std::__1::vector.142"* %2 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = sdiv exact i64 %22, 24
  %24 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %4, i64 0, i32 0, i32 1
  %25 = bitcast %"class.std::__1::vector.144"** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.std::__1::vector.142"* %4 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %26, %28
  %30 = sdiv exact i64 %29, 24
  %31 = icmp ugt i64 %23, %30
  %32 = inttoptr i64 %28 to %"class.std::__1::vector.144"*
  %33 = inttoptr i64 %26 to %"class.std::__1::vector.144"*
  br i1 %31, label %34, label %36

34:                                               ; preds = %5
  %35 = sub nsw i64 %23, %30
  call void @_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.142"* %4, i64 %35) #12
  br label %55

36:                                               ; preds = %5
  %37 = icmp ult i64 %23, %30
  br i1 %37, label %38, label %55

38:                                               ; preds = %36
  %39 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %32, i64 %23
  %40 = icmp eq %"class.std::__1::vector.144"* %39, %33
  br i1 %40, label %54, label %41

41:                                               ; preds = %38, %52
  %42 = phi %"class.std::__1::vector.144"* [ %43, %52 ], [ %33, %38 ]
  %43 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %42, i64 -1
  %44 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %43, i64 0, i32 0, i32 0
  %45 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %44, align 8
  %46 = icmp eq %"struct.jxl::Token"* %45, null
  br i1 %46, label %52, label %47

47:                                               ; preds = %41
  %48 = ptrtoint %"struct.jxl::Token"* %45 to i64
  %49 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %42, i64 -1, i32 0, i32 1
  %50 = bitcast %"struct.jxl::Token"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = bitcast %"struct.jxl::Token"* %45 to i8*
  call void @_ZdlPv(i8* %51) #14
  br label %52

52:                                               ; preds = %47, %41
  %53 = icmp eq %"class.std::__1::vector.144"* %43, %39
  br i1 %53, label %54, label %41

54:                                               ; preds = %52, %38
  store %"class.std::__1::vector.144"* %39, %"class.std::__1::vector.144"** %24, align 8
  br label %55

55:                                               ; preds = %34, %36, %54
  %56 = bitcast %"class.std::__1::vector.188"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56) #12
  %57 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %7, i64 0, i32 0, i32 0
  %58 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %7, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %56, i8 0, i64 24, i1 false) #12
  %59 = load i64, i64* %18, align 8
  %60 = load i64, i64* %20, align 8
  %61 = icmp eq i64 %59, %60
  br i1 %61, label %84, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 4
  %64 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 4, i32 0, i32 1
  %65 = bitcast i64** %64 to i64*
  %66 = bitcast %"class.std::__1::vector.135"* %63 to i64*
  %67 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %4, i64 0, i32 0, i32 0
  %68 = bitcast float** %58 to i64*
  %69 = bitcast %"class.std::__1::vector.188"* %7 to i64*
  %70 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %6, i64 0, i32 0
  %71 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %6, i64 0, i32 1, i32 0, i32 0
  %72 = getelementptr inbounds %"struct.jxl::LZ77Params", %"struct.jxl::LZ77Params"* %3, i64 0, i32 3
  %73 = bitcast %"struct.jxl::(anonymous namespace)::HashChain"* %8 to i8*
  %74 = bitcast i64* %9 to i8*
  %75 = bitcast i64* %10 to i8*
  %76 = bitcast i64* %11 to i8*
  %77 = bitcast i64* %12 to i8*
  %78 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %6, i64 0, i32 2, i32 0, i32 0
  %79 = getelementptr inbounds %"struct.jxl::LZ77Params", %"struct.jxl::LZ77Params"* %3, i64 0, i32 5
  br label %89

80:                                               ; preds = %242
  %81 = uitofp i64 %116 to double
  %82 = fmul double %81, 2.000000e-01
  %83 = fadd double %82, 1.600000e+01
  br label %84

84:                                               ; preds = %80, %55
  %85 = phi double [ 1.600000e+01, %55 ], [ %83, %80 ]
  %86 = phi float [ 0.000000e+00, %55 ], [ %243, %80 ]
  %87 = fpext float %86 to double
  %88 = fcmp olt double %85, %87
  br i1 %88, label %675, label %677

89:                                               ; preds = %62, %242
  %90 = phi i64 [ %60, %62 ], [ %246, %242 ]
  %91 = phi float [ 0.000000e+00, %62 ], [ %243, %242 ]
  %92 = phi i64 [ 0, %62 ], [ %116, %242 ]
  %93 = phi i64 [ 0, %62 ], [ %244, %242 ]
  %94 = inttoptr i64 %90 to %"class.std::__1::vector.144"*
  %95 = load i64, i64* %65, align 8
  %96 = load i64, i64* %66, align 8
  %97 = sub i64 %95, %96
  %98 = ashr exact i64 %97, 3
  %99 = icmp ugt i64 %98, %93
  br i1 %99, label %100, label %104

100:                                              ; preds = %89
  %101 = inttoptr i64 %96 to i64*
  %102 = getelementptr inbounds i64, i64* %101, i64 %93
  %103 = load i64, i64* %102, align 8
  br label %104

104:                                              ; preds = %89, %100
  %105 = phi i64 [ %103, %100 ], [ 0, %89 ]
  %106 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %94, i64 %93
  %107 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %67, align 8
  %108 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %107, i64 %93
  %109 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %94, i64 %93, i32 0, i32 1
  %110 = bitcast %"struct.jxl::Token"** %109 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = bitcast %"class.std::__1::vector.144"* %106 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = sub i64 %111, %113
  %115 = ashr exact i64 %114, 3
  %116 = add i64 %115, %92
  %117 = add nsw i64 %115, 1
  %118 = load i64, i64* %68, align 8
  %119 = load i64, i64* %69, align 8
  %120 = sub i64 %118, %119
  %121 = ashr exact i64 %120, 2
  %122 = icmp ugt i64 %117, %121
  %123 = inttoptr i64 %119 to float*
  br i1 %122, label %124, label %126

124:                                              ; preds = %104
  %125 = sub nsw i64 %117, %121
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.188"* nonnull %7, i64 %125) #12
  br label %130

126:                                              ; preds = %104
  %127 = icmp ult i64 %117, %121
  br i1 %127, label %128, label %130

128:                                              ; preds = %126
  %129 = getelementptr inbounds float, float* %123, i64 %117
  store float* %129, float** %58, align 8
  br label %130

130:                                              ; preds = %124, %126, %128
  %131 = load i64, i64* %110, align 8
  %132 = load i64, i64* %112, align 8
  %133 = icmp eq i64 %131, %132
  br i1 %133, label %134, label %176

134:                                              ; preds = %192, %130
  %135 = phi i64 [ 0, %130 ], [ %216, %192 ]
  %136 = phi i64 [ 0, %130 ], [ %217, %192 ]
  %137 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %107, i64 %93, i32 0, i32 2, i32 0, i32 0
  %138 = bitcast %"struct.jxl::Token"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = bitcast %"class.std::__1::vector.144"* %108 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = sub i64 %139, %141
  %143 = ashr exact i64 %142, 3
  %144 = icmp ult i64 %143, %136
  br i1 %144, label %145, label %168

145:                                              ; preds = %134
  %146 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %107, i64 %93, i32 0, i32 1
  %147 = bitcast %"struct.jxl::Token"** %146 to i64*
  %148 = icmp ugt i64 %136, 2305843009213693951
  br i1 %148, label %149, label %150

149:                                              ; preds = %145
  call void @abort() #13
  unreachable

150:                                              ; preds = %145
  %151 = load i64, i64* %147, align 8
  %152 = sub i64 %151, %141
  %153 = ashr exact i64 %152, 3
  %154 = call i8* @_Znwm(i64 %135) #14
  %155 = bitcast i8* %154 to %"struct.jxl::Token"*
  %156 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %155, i64 %153
  %157 = ptrtoint %"struct.jxl::Token"* %156 to i64
  %158 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %155, i64 %136
  %159 = ptrtoint %"struct.jxl::Token"* %158 to i64
  %160 = ptrtoint i8* %154 to i64
  %161 = icmp sgt i64 %152, 0
  br i1 %161, label %162, label %164

162:                                              ; preds = %150
  %163 = inttoptr i64 %141 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %154, i8* align 4 %163, i64 %152, i1 false) #12
  br label %164

164:                                              ; preds = %162, %150
  store i64 %160, i64* %140, align 8
  store i64 %157, i64* %147, align 8
  store i64 %159, i64* %138, align 8
  %165 = icmp eq i64 %141, 0
  br i1 %165, label %168, label %166

166:                                              ; preds = %164
  %167 = inttoptr i64 %141 to i8*
  call void @_ZdlPv(i8* %167) #14
  br label %168

168:                                              ; preds = %134, %164, %166
  %169 = load i64, i64* %110, align 8
  %170 = load i64, i64* %112, align 8
  %171 = sub i64 %169, %170
  %172 = ashr exact i64 %171, 3
  %173 = load i32, i32* %72, align 8
  %174 = zext i32 %173 to i64
  %175 = icmp ugt i32 %173, 2
  br i1 %175, label %222, label %219

176:                                              ; preds = %130, %192
  %177 = phi i64 [ %215, %192 ], [ %132, %130 ]
  %178 = phi i64 [ %212, %192 ], [ 0, %130 ]
  %179 = inttoptr i64 %177 to %"struct.jxl::Token"*
  %180 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %179, i64 %178, i32 1
  %181 = load i32, i32* %180, align 4
  %182 = icmp ult i32 %181, 16
  br i1 %182, label %192, label %183

183:                                              ; preds = %176
  %184 = call i32 @llvm.ctlz.i32(i32 %181, i1 true) #12, !range !3
  %185 = xor i32 %184, 31
  %186 = shl i32 1, %185
  %187 = sub i32 %181, %186
  %188 = shl nuw nsw i32 %185, 2
  %189 = add nsw i32 %185, -2
  %190 = lshr i32 %187, %189
  %191 = add i32 %190, %188
  br label %192

192:                                              ; preds = %176, %183
  %193 = phi i32 [ %191, %183 ], [ %181, %176 ]
  %194 = phi i32 [ %189, %183 ], [ 0, %176 ]
  %195 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %179, i64 %178, i32 0
  %196 = load i32, i32* %195, align 4
  %197 = lshr i32 %196, 1
  %198 = zext i32 %197 to i64
  %199 = zext i32 %193 to i64
  %200 = load i64, i64* %70, align 8
  %201 = mul i64 %200, %198
  %202 = add i64 %201, %199
  %203 = load float*, float** %71, align 8
  %204 = getelementptr inbounds float, float* %203, i64 %202
  %205 = load float, float* %204, align 4
  %206 = uitofp i32 %194 to float
  %207 = fadd float %205, %206
  %208 = load float*, float** %57, align 8
  %209 = getelementptr inbounds float, float* %208, i64 %178
  %210 = load float, float* %209, align 4
  %211 = fadd float %207, %210
  %212 = add nuw i64 %178, 1
  %213 = getelementptr inbounds float, float* %208, i64 %212
  store float %211, float* %213, align 4
  %214 = load i64, i64* %110, align 8
  %215 = load i64, i64* %112, align 8
  %216 = sub i64 %214, %215
  %217 = ashr exact i64 %216, 3
  %218 = icmp ult i64 %212, %217
  br i1 %218, label %176, label %134

219:                                              ; preds = %168
  %220 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 1222, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.22, i64 0, i64 0)) #12
  %221 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

222:                                              ; preds = %168, %222
  %223 = phi i64 [ %227, %222 ], [ 1, %168 ]
  %224 = icmp ult i64 %223, %172
  %225 = icmp ult i64 %223, 1048576
  %226 = and i1 %224, %225
  %227 = shl i64 %223, 1
  br i1 %226, label %222, label %228

228:                                              ; preds = %222
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %73) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* align 8 bitcast (%"struct.jxl::(anonymous namespace)::HashChain"* @__const._ZN3jxl12_GLOBAL__N_117ApplyLZ77_OptimalERKNS_15HistogramParamsEmRKNSt3__16vectorINS5_INS_5TokenENS4_9allocatorIS6_EEEENS7_IS9_EEEERNS_10LZ77ParamsERSB_.chain to i8*), i64 288, i1 false)
  %229 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %106, i64 0, i32 0, i32 0
  %230 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %229, align 8
  %231 = load i64, i64* %110, align 8
  %232 = ptrtoint %"struct.jxl::Token"* %230 to i64
  %233 = sub i64 %231, %232
  %234 = ashr exact i64 %233, 3
  call fastcc void @_ZN3jxl12_GLOBAL__N_19HashChainC2EPKNS_5TokenEmmmmm(%"struct.jxl::(anonymous namespace)::HashChain"* nonnull %8, %"struct.jxl::Token"* %230, i64 %234, i64 %223, i64 %174, i64 %172, i64 %105)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #12
  store i64 -6148914691236517206, i64* %9, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %75) #12
  store i64 -6148914691236517206, i64* %10, align 8
  %235 = load i64, i64* %110, align 8
  %236 = load i64, i64* %112, align 8
  %237 = icmp eq i64 %235, %236
  br i1 %237, label %242, label %238

238:                                              ; preds = %228
  %239 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %107, i64 %93, i32 0, i32 1
  %240 = bitcast %"struct.jxl::Token"** %239 to i64*
  %241 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %108, i64 0, i32 0, i32 0
  br label %250

242:                                              ; preds = %665, %228
  %243 = phi float [ %91, %228 ], [ %668, %665 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %75) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #12
  call fastcc void @_ZN3jxl12_GLOBAL__N_19HashChainD2Ev(%"struct.jxl::(anonymous namespace)::HashChain"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %73) #12
  %244 = add nuw i64 %93, 1
  %245 = load i64, i64* %18, align 8
  %246 = load i64, i64* %20, align 8
  %247 = sub i64 %245, %246
  %248 = sdiv exact i64 %247, 24
  %249 = icmp ult i64 %244, %248
  br i1 %249, label %89, label %80

250:                                              ; preds = %238, %665
  %251 = phi i64 [ %236, %238 ], [ %671, %665 ]
  %252 = phi float [ %91, %238 ], [ %668, %665 ]
  %253 = phi i64 [ 0, %238 ], [ %669, %665 ]
  %254 = phi i8 [ 0, %238 ], [ %666, %665 ]
  %255 = inttoptr i64 %251 to %"struct.jxl::Token"*
  %256 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %255, i64 %253
  %257 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %239, align 8
  %258 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %137, align 8
  %259 = icmp eq %"struct.jxl::Token"* %257, %258
  %260 = ptrtoint %"struct.jxl::Token"* %258 to i64
  br i1 %259, label %267, label %261

261:                                              ; preds = %250
  %262 = bitcast %"struct.jxl::Token"* %256 to i64*
  %263 = bitcast %"struct.jxl::Token"* %257 to i64*
  %264 = load i64, i64* %262, align 4
  store i64 %264, i64* %263, align 4
  %265 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %257, i64 1
  %266 = ptrtoint %"struct.jxl::Token"* %265 to i64
  store i64 %266, i64* %240, align 8
  br label %322

267:                                              ; preds = %250
  %268 = ptrtoint %"struct.jxl::Token"* %257 to i64
  %269 = load i64, i64* %140, align 8
  %270 = sub i64 %268, %269
  %271 = ashr exact i64 %270, 3
  %272 = add nsw i64 %271, 1
  %273 = icmp ugt i64 %272, 2305843009213693951
  br i1 %273, label %274, label %276

274:                                              ; preds = %267
  %275 = bitcast %"class.std::__1::vector.144"* %108 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %275) #13
  unreachable

276:                                              ; preds = %267
  %277 = sub i64 %260, %269
  %278 = ashr exact i64 %277, 3
  %279 = icmp ult i64 %278, 1152921504606846975
  br i1 %279, label %280, label %288

280:                                              ; preds = %276
  %281 = ashr exact i64 %277, 2
  %282 = icmp ult i64 %281, %272
  %283 = select i1 %282, i64 %272, i64 %281
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %293, label %285

285:                                              ; preds = %280
  %286 = icmp ugt i64 %283, 2305843009213693951
  br i1 %286, label %287, label %288

287:                                              ; preds = %285
  call void @abort() #13
  unreachable

288:                                              ; preds = %285, %276
  %289 = phi i64 [ %283, %285 ], [ 2305843009213693951, %276 ]
  %290 = shl i64 %289, 3
  %291 = call i8* @_Znwm(i64 %290) #14
  %292 = bitcast i8* %291 to %"struct.jxl::Token"*
  br label %293

293:                                              ; preds = %288, %280
  %294 = phi i64 [ %289, %288 ], [ 0, %280 ]
  %295 = phi %"struct.jxl::Token"* [ %292, %288 ], [ null, %280 ]
  %296 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %295, i64 %271
  %297 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %295, i64 %294
  %298 = ptrtoint %"struct.jxl::Token"* %297 to i64
  %299 = bitcast %"struct.jxl::Token"* %256 to i64*
  %300 = bitcast %"struct.jxl::Token"* %296 to i64*
  %301 = load i64, i64* %299, align 4
  store i64 %301, i64* %300, align 4
  %302 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %296, i64 1
  %303 = ptrtoint %"struct.jxl::Token"* %302 to i64
  %304 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %241, align 8
  %305 = load i64, i64* %240, align 8
  %306 = ptrtoint %"struct.jxl::Token"* %304 to i64
  %307 = sub i64 %305, %306
  %308 = ashr exact i64 %307, 3
  %309 = sub nsw i64 0, %308
  %310 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %296, i64 %309
  %311 = ptrtoint %"struct.jxl::Token"* %310 to i64
  %312 = icmp sgt i64 %307, 0
  br i1 %312, label %313, label %317

313:                                              ; preds = %293
  %314 = bitcast %"struct.jxl::Token"* %310 to i8*
  %315 = bitcast %"struct.jxl::Token"* %304 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %314, i8* align 4 %315, i64 %307, i1 false) #12
  %316 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %241, align 8
  br label %317

317:                                              ; preds = %313, %293
  %318 = phi %"struct.jxl::Token"* [ %304, %293 ], [ %316, %313 ]
  store i64 %311, i64* %140, align 8
  store i64 %303, i64* %240, align 8
  store i64 %298, i64* %138, align 8
  %319 = icmp eq %"struct.jxl::Token"* %318, null
  br i1 %319, label %322, label %320

320:                                              ; preds = %317
  %321 = bitcast %"struct.jxl::Token"* %318 to i8*
  call void @_ZdlPv(i8* %321) #14
  br label %322

322:                                              ; preds = %261, %317, %320
  %323 = icmp eq i8 %254, 0
  br i1 %323, label %324, label %325

324:                                              ; preds = %322
  call fastcc void @_ZN3jxl12_GLOBAL__N_19HashChain6UpdateEm(%"struct.jxl::(anonymous namespace)::HashChain"* nonnull %8, i64 %253)
  br label %325

325:                                              ; preds = %322, %324
  call fastcc void @_ZNK3jxl12_GLOBAL__N_19HashChain9FindMatchEmiPmS2_(%"struct.jxl::(anonymous namespace)::HashChain"* nonnull %8, i64 %253, i64* nonnull %10, i64* nonnull %9)
  %326 = load i64, i64* %9, align 8
  %327 = icmp ult i64 %326, %174
  br i1 %327, label %665, label %328

328:                                              ; preds = %325
  %329 = icmp ult i64 %326, 256
  br i1 %329, label %330, label %414

330:                                              ; preds = %328
  %331 = add nuw i64 %253, 1
  %332 = load i64, i64* %110, align 8
  %333 = load i64, i64* %112, align 8
  %334 = sub i64 %332, %333
  %335 = ashr exact i64 %334, 3
  %336 = icmp ult i64 %331, %335
  br i1 %336, label %337, label %414

337:                                              ; preds = %330
  call fastcc void @_ZN3jxl12_GLOBAL__N_19HashChain6UpdateEm(%"struct.jxl::(anonymous namespace)::HashChain"* nonnull %8, i64 %331)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76) #12
  store i64 -6148914691236517206, i64* %11, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %77) #12
  store i64 -6148914691236517206, i64* %12, align 8
  call fastcc void @_ZNK3jxl12_GLOBAL__N_19HashChain9FindMatchEmiPmS2_(%"struct.jxl::(anonymous namespace)::HashChain"* nonnull %8, i64 %331, i64* nonnull %12, i64* nonnull %11)
  %338 = load i64, i64* %11, align 8
  %339 = load i64, i64* %9, align 8
  %340 = icmp ugt i64 %338, %339
  br i1 %340, label %341, label %410

341:                                              ; preds = %337
  store i64 %338, i64* %9, align 8
  %342 = load i64, i64* %12, align 8
  store i64 %342, i64* %10, align 8
  %343 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %229, align 8
  %344 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %343, i64 %331
  %345 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %239, align 8
  %346 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %137, align 8
  %347 = icmp eq %"struct.jxl::Token"* %345, %346
  %348 = ptrtoint %"struct.jxl::Token"* %346 to i64
  br i1 %347, label %355, label %349

349:                                              ; preds = %341
  %350 = bitcast %"struct.jxl::Token"* %344 to i64*
  %351 = bitcast %"struct.jxl::Token"* %345 to i64*
  %352 = load i64, i64* %350, align 4
  store i64 %352, i64* %351, align 4
  %353 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %345, i64 1
  %354 = ptrtoint %"struct.jxl::Token"* %353 to i64
  store i64 %354, i64* %240, align 8
  br label %410

355:                                              ; preds = %341
  %356 = ptrtoint %"struct.jxl::Token"* %345 to i64
  %357 = load i64, i64* %140, align 8
  %358 = sub i64 %356, %357
  %359 = ashr exact i64 %358, 3
  %360 = add nsw i64 %359, 1
  %361 = icmp ugt i64 %360, 2305843009213693951
  br i1 %361, label %362, label %364

362:                                              ; preds = %355
  %363 = bitcast %"class.std::__1::vector.144"* %108 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %363) #13
  unreachable

364:                                              ; preds = %355
  %365 = sub i64 %348, %357
  %366 = ashr exact i64 %365, 3
  %367 = icmp ult i64 %366, 1152921504606846975
  br i1 %367, label %368, label %376

368:                                              ; preds = %364
  %369 = ashr exact i64 %365, 2
  %370 = icmp ult i64 %369, %360
  %371 = select i1 %370, i64 %360, i64 %369
  %372 = icmp eq i64 %371, 0
  br i1 %372, label %381, label %373

373:                                              ; preds = %368
  %374 = icmp ugt i64 %371, 2305843009213693951
  br i1 %374, label %375, label %376

375:                                              ; preds = %373
  call void @abort() #13
  unreachable

376:                                              ; preds = %373, %364
  %377 = phi i64 [ %371, %373 ], [ 2305843009213693951, %364 ]
  %378 = shl i64 %377, 3
  %379 = call i8* @_Znwm(i64 %378) #14
  %380 = bitcast i8* %379 to %"struct.jxl::Token"*
  br label %381

381:                                              ; preds = %376, %368
  %382 = phi i64 [ %377, %376 ], [ 0, %368 ]
  %383 = phi %"struct.jxl::Token"* [ %380, %376 ], [ null, %368 ]
  %384 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %383, i64 %359
  %385 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %383, i64 %382
  %386 = ptrtoint %"struct.jxl::Token"* %385 to i64
  %387 = bitcast %"struct.jxl::Token"* %344 to i64*
  %388 = bitcast %"struct.jxl::Token"* %384 to i64*
  %389 = load i64, i64* %387, align 4
  store i64 %389, i64* %388, align 4
  %390 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %384, i64 1
  %391 = ptrtoint %"struct.jxl::Token"* %390 to i64
  %392 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %241, align 8
  %393 = load i64, i64* %240, align 8
  %394 = ptrtoint %"struct.jxl::Token"* %392 to i64
  %395 = sub i64 %393, %394
  %396 = ashr exact i64 %395, 3
  %397 = sub nsw i64 0, %396
  %398 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %384, i64 %397
  %399 = ptrtoint %"struct.jxl::Token"* %398 to i64
  %400 = icmp sgt i64 %395, 0
  br i1 %400, label %401, label %405

401:                                              ; preds = %381
  %402 = bitcast %"struct.jxl::Token"* %398 to i8*
  %403 = bitcast %"struct.jxl::Token"* %392 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %402, i8* align 4 %403, i64 %395, i1 false) #12
  %404 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %241, align 8
  br label %405

405:                                              ; preds = %401, %381
  %406 = phi %"struct.jxl::Token"* [ %392, %381 ], [ %404, %401 ]
  store i64 %399, i64* %140, align 8
  store i64 %391, i64* %240, align 8
  store i64 %386, i64* %138, align 8
  %407 = icmp eq %"struct.jxl::Token"* %406, null
  br i1 %407, label %410, label %408

408:                                              ; preds = %405
  %409 = bitcast %"struct.jxl::Token"* %406 to i8*
  call void @_ZdlPv(i8* %409) #14
  br label %410

410:                                              ; preds = %408, %405, %349, %337
  %411 = phi i8 [ 1, %337 ], [ 0, %349 ], [ 0, %405 ], [ 0, %408 ]
  %412 = phi i64 [ %253, %337 ], [ %331, %349 ], [ %331, %405 ], [ %331, %408 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %77) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %76) #12
  %413 = load i64, i64* %9, align 8
  br label %414

414:                                              ; preds = %410, %330, %328
  %415 = phi i64 [ %413, %410 ], [ %326, %330 ], [ %326, %328 ]
  %416 = phi i8 [ %411, %410 ], [ 0, %330 ], [ 0, %328 ]
  %417 = phi i64 [ %412, %410 ], [ %253, %330 ], [ %253, %328 ]
  %418 = add i64 %415, %417
  %419 = load float*, float** %57, align 8
  %420 = getelementptr inbounds float, float* %419, i64 %418
  %421 = load float, float* %420, align 4
  %422 = getelementptr inbounds float, float* %419, i64 %417
  %423 = load float, float* %422, align 4
  %424 = fsub float %421, %423
  %425 = load i32, i32* %72, align 8
  %426 = trunc i64 %415 to i32
  %427 = sub i32 %426, %425
  %428 = icmp ult i32 %427, 2
  br i1 %428, label %440, label %429

429:                                              ; preds = %414
  %430 = call i32 @llvm.ctlz.i32(i32 %427, i1 true) #12, !range !3
  %431 = xor i32 %430, 31
  %432 = shl i32 1, %431
  %433 = sub i32 %427, %432
  %434 = add nuw nsw i32 %431, 1
  %435 = lshr i32 %433, %431
  %436 = add i32 %434, %435
  %437 = icmp ult i32 %436, 16
  %438 = select i1 %437, i32 %436, i32 16
  %439 = uitofp i32 %431 to float
  br label %440

440:                                              ; preds = %414, %429
  %441 = phi float [ 0.000000e+00, %414 ], [ %439, %429 ]
  %442 = phi i32 [ %427, %414 ], [ %438, %429 ]
  %443 = zext i32 %442 to i64
  %444 = getelementptr inbounds [17 x float], [17 x float]* @_ZZN3jxl12_GLOBAL__N_17LenCostEmE10kCostTable, i64 0, i64 %443
  %445 = load float, float* %444, align 4
  %446 = fadd float %441, %445
  %447 = load i64, i64* %10, align 8
  %448 = trunc i64 %447 to i32
  %449 = icmp ult i32 %448, 128
  br i1 %449, label %461, label %450

450:                                              ; preds = %440
  %451 = call i32 @llvm.ctlz.i32(i32 %448, i1 true) #12, !range !3
  %452 = xor i32 %451, 31
  %453 = shl i32 1, %452
  %454 = sub i32 %448, %453
  %455 = add nuw nsw i32 %452, 121
  %456 = lshr i32 %454, %452
  %457 = add i32 %455, %456
  %458 = icmp ult i32 %457, 138
  %459 = select i1 %458, i32 %457, i32 138
  %460 = uitofp i32 %452 to float
  br label %461

461:                                              ; preds = %440, %450
  %462 = phi float [ 0.000000e+00, %440 ], [ %460, %450 ]
  %463 = phi i32 [ %448, %440 ], [ %459, %450 ]
  %464 = zext i32 %463 to i64
  %465 = getelementptr inbounds [139 x float], [139 x float]* @_ZZN3jxl12_GLOBAL__N_18DistCostEmE10kCostTable, i64 0, i64 %464
  %466 = load float, float* %465, align 4
  %467 = fadd float %462, %466
  %468 = fadd float %446, %467
  %469 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %239, align 8
  %470 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %469, i64 -1, i32 0
  %471 = load i32, i32* %470, align 4
  %472 = lshr i32 %471, 1
  %473 = zext i32 %472 to i64
  %474 = load float*, float** %78, align 8
  %475 = getelementptr inbounds float, float* %474, i64 %473
  %476 = load float, float* %475, align 4
  %477 = fadd float %468, %476
  %478 = fcmp ugt float %477, %424
  br i1 %478, label %479, label %481

479:                                              ; preds = %461
  %480 = icmp ugt i64 %415, 1
  br i1 %480, label %564, label %637

481:                                              ; preds = %461
  %482 = sub i32 %426, %173
  %483 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %469, i64 -1, i32 1
  store i32 %482, i32* %483, align 4
  %484 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %239, align 8
  %485 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %484, i64 -1, i32 0
  %486 = load i32, i32* %485, align 4
  %487 = or i32 %486, 1
  store i32 %487, i32* %485, align 4
  %488 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %239, align 8
  %489 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %137, align 8
  %490 = icmp ult %"struct.jxl::Token"* %488, %489
  %491 = ptrtoint %"struct.jxl::Token"* %489 to i64
  br i1 %490, label %492, label %502

492:                                              ; preds = %481
  %493 = load i64, i64* %79, align 8
  %494 = trunc i64 %493 to i32
  %495 = load i64, i64* %10, align 8
  %496 = trunc i64 %495 to i32
  %497 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %488, i64 0, i32 0
  %498 = shl i32 %494, 1
  store i32 %498, i32* %497, align 4
  %499 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %488, i64 0, i32 1
  store i32 %496, i32* %499, align 4
  %500 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %488, i64 1
  %501 = ptrtoint %"struct.jxl::Token"* %500 to i64
  store i64 %501, i64* %240, align 8
  br label %561

502:                                              ; preds = %481
  %503 = ptrtoint %"struct.jxl::Token"* %488 to i64
  %504 = load i64, i64* %140, align 8
  %505 = sub i64 %503, %504
  %506 = ashr exact i64 %505, 3
  %507 = add nsw i64 %506, 1
  %508 = icmp ugt i64 %507, 2305843009213693951
  br i1 %508, label %509, label %511

509:                                              ; preds = %502
  %510 = bitcast %"class.std::__1::vector.144"* %108 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %510) #13
  unreachable

511:                                              ; preds = %502
  %512 = sub i64 %491, %504
  %513 = ashr exact i64 %512, 3
  %514 = icmp ult i64 %513, 1152921504606846975
  br i1 %514, label %515, label %523

515:                                              ; preds = %511
  %516 = ashr exact i64 %512, 2
  %517 = icmp ult i64 %516, %507
  %518 = select i1 %517, i64 %507, i64 %516
  %519 = icmp eq i64 %518, 0
  br i1 %519, label %528, label %520

520:                                              ; preds = %515
  %521 = icmp ugt i64 %518, 2305843009213693951
  br i1 %521, label %522, label %523

522:                                              ; preds = %520
  call void @abort() #13
  unreachable

523:                                              ; preds = %520, %511
  %524 = phi i64 [ %518, %520 ], [ 2305843009213693951, %511 ]
  %525 = shl i64 %524, 3
  %526 = call i8* @_Znwm(i64 %525) #14
  %527 = bitcast i8* %526 to %"struct.jxl::Token"*
  br label %528

528:                                              ; preds = %523, %515
  %529 = phi i64 [ %524, %523 ], [ 0, %515 ]
  %530 = phi %"struct.jxl::Token"* [ %527, %523 ], [ null, %515 ]
  %531 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %530, i64 %506
  %532 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %530, i64 %529
  %533 = ptrtoint %"struct.jxl::Token"* %532 to i64
  %534 = load i64, i64* %79, align 8
  %535 = trunc i64 %534 to i32
  %536 = load i64, i64* %10, align 8
  %537 = trunc i64 %536 to i32
  %538 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %531, i64 0, i32 0
  %539 = shl i32 %535, 1
  store i32 %539, i32* %538, align 4
  %540 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %530, i64 %506, i32 1
  store i32 %537, i32* %540, align 4
  %541 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %531, i64 1
  %542 = ptrtoint %"struct.jxl::Token"* %541 to i64
  %543 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %241, align 8
  %544 = load i64, i64* %240, align 8
  %545 = ptrtoint %"struct.jxl::Token"* %543 to i64
  %546 = sub i64 %544, %545
  %547 = ashr exact i64 %546, 3
  %548 = sub nsw i64 0, %547
  %549 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %531, i64 %548
  %550 = ptrtoint %"struct.jxl::Token"* %549 to i64
  %551 = icmp sgt i64 %546, 0
  br i1 %551, label %552, label %556

552:                                              ; preds = %528
  %553 = bitcast %"struct.jxl::Token"* %549 to i8*
  %554 = bitcast %"struct.jxl::Token"* %543 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %553, i8* align 4 %554, i64 %546, i1 false) #12
  %555 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %241, align 8
  br label %556

556:                                              ; preds = %552, %528
  %557 = phi %"struct.jxl::Token"* [ %543, %528 ], [ %555, %552 ]
  store i64 %550, i64* %140, align 8
  store i64 %542, i64* %240, align 8
  store i64 %533, i64* %138, align 8
  %558 = icmp eq %"struct.jxl::Token"* %557, null
  br i1 %558, label %561, label %559

559:                                              ; preds = %556
  %560 = bitcast %"struct.jxl::Token"* %557 to i8*
  call void @_ZdlPv(i8* %560) #14
  br label %561

561:                                              ; preds = %492, %556, %559
  %562 = fsub float %424, %477
  %563 = fadd float %252, %562
  br label %637

564:                                              ; preds = %479, %635
  %565 = phi %"struct.jxl::Token"* [ %636, %635 ], [ %469, %479 ]
  %566 = phi i64 [ %632, %635 ], [ 1, %479 ]
  %567 = add i64 %566, %417
  %568 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %229, align 8
  %569 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %568, i64 %567
  %570 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %137, align 8
  %571 = icmp eq %"struct.jxl::Token"* %565, %570
  br i1 %571, label %578, label %572

572:                                              ; preds = %564
  %573 = bitcast %"struct.jxl::Token"* %569 to i64*
  %574 = bitcast %"struct.jxl::Token"* %565 to i64*
  %575 = load i64, i64* %573, align 4
  store i64 %575, i64* %574, align 4
  %576 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %565, i64 1
  %577 = ptrtoint %"struct.jxl::Token"* %576 to i64
  store i64 %577, i64* %240, align 8
  br label %631

578:                                              ; preds = %564
  %579 = ptrtoint %"struct.jxl::Token"* %570 to i64
  %580 = load i64, i64* %140, align 8
  %581 = sub i64 %579, %580
  %582 = ashr exact i64 %581, 3
  %583 = add nsw i64 %582, 1
  %584 = icmp ugt i64 %583, 2305843009213693951
  br i1 %584, label %585, label %587

585:                                              ; preds = %578
  %586 = bitcast %"class.std::__1::vector.144"* %108 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %586) #13
  unreachable

587:                                              ; preds = %578
  %588 = icmp ult i64 %582, 1152921504606846975
  br i1 %588, label %589, label %597

589:                                              ; preds = %587
  %590 = ashr exact i64 %581, 2
  %591 = icmp ult i64 %590, %583
  %592 = select i1 %591, i64 %583, i64 %590
  %593 = icmp eq i64 %592, 0
  br i1 %593, label %602, label %594

594:                                              ; preds = %589
  %595 = icmp ugt i64 %592, 2305843009213693951
  br i1 %595, label %596, label %597

596:                                              ; preds = %594
  call void @abort() #13
  unreachable

597:                                              ; preds = %594, %587
  %598 = phi i64 [ %592, %594 ], [ 2305843009213693951, %587 ]
  %599 = shl i64 %598, 3
  %600 = call i8* @_Znwm(i64 %599) #14
  %601 = bitcast i8* %600 to %"struct.jxl::Token"*
  br label %602

602:                                              ; preds = %597, %589
  %603 = phi i64 [ %598, %597 ], [ 0, %589 ]
  %604 = phi %"struct.jxl::Token"* [ %601, %597 ], [ null, %589 ]
  %605 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %604, i64 %582
  %606 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %604, i64 %603
  %607 = ptrtoint %"struct.jxl::Token"* %606 to i64
  %608 = bitcast %"struct.jxl::Token"* %569 to i64*
  %609 = bitcast %"struct.jxl::Token"* %605 to i64*
  %610 = load i64, i64* %608, align 4
  store i64 %610, i64* %609, align 4
  %611 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %605, i64 1
  %612 = ptrtoint %"struct.jxl::Token"* %611 to i64
  %613 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %241, align 8
  %614 = load i64, i64* %240, align 8
  %615 = ptrtoint %"struct.jxl::Token"* %613 to i64
  %616 = sub i64 %614, %615
  %617 = ashr exact i64 %616, 3
  %618 = sub nsw i64 0, %617
  %619 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %605, i64 %618
  %620 = ptrtoint %"struct.jxl::Token"* %619 to i64
  %621 = icmp sgt i64 %616, 0
  br i1 %621, label %622, label %626

622:                                              ; preds = %602
  %623 = bitcast %"struct.jxl::Token"* %619 to i8*
  %624 = bitcast %"struct.jxl::Token"* %613 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %623, i8* align 4 %624, i64 %616, i1 false) #12
  %625 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %241, align 8
  br label %626

626:                                              ; preds = %622, %602
  %627 = phi %"struct.jxl::Token"* [ %613, %602 ], [ %625, %622 ]
  store i64 %620, i64* %140, align 8
  store i64 %612, i64* %240, align 8
  store i64 %607, i64* %138, align 8
  %628 = icmp eq %"struct.jxl::Token"* %627, null
  br i1 %628, label %631, label %629

629:                                              ; preds = %626
  %630 = bitcast %"struct.jxl::Token"* %627 to i8*
  call void @_ZdlPv(i8* %630) #14
  br label %631

631:                                              ; preds = %572, %626, %629
  %632 = add nuw i64 %566, 1
  %633 = load i64, i64* %9, align 8
  %634 = icmp ult i64 %632, %633
  br i1 %634, label %635, label %637

635:                                              ; preds = %631
  %636 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %239, align 8
  br label %564

637:                                              ; preds = %631, %479, %561
  %638 = phi float [ %563, %561 ], [ %252, %479 ], [ %252, %631 ]
  %639 = and i8 %416, 1
  %640 = icmp eq i8 %639, 0
  br i1 %640, label %651, label %641

641:                                              ; preds = %637
  %642 = add i64 %417, 2
  %643 = load i64, i64* %9, align 8
  %644 = add i64 %643, -2
  %645 = icmp eq i64 %644, 0
  br i1 %645, label %660, label %646

646:                                              ; preds = %641, %646
  %647 = phi i64 [ %649, %646 ], [ 0, %641 ]
  %648 = add i64 %642, %647
  call fastcc void @_ZN3jxl12_GLOBAL__N_19HashChain6UpdateEm(%"struct.jxl::(anonymous namespace)::HashChain"* nonnull %8, i64 %648) #12
  %649 = add nuw i64 %647, 1
  %650 = icmp eq i64 %649, %644
  br i1 %650, label %660, label %646

651:                                              ; preds = %637
  %652 = load i64, i64* %9, align 8
  %653 = add i64 %652, -1
  %654 = icmp eq i64 %653, 0
  br i1 %654, label %660, label %655

655:                                              ; preds = %651, %655
  %656 = phi i64 [ %657, %655 ], [ 0, %651 ]
  %657 = add nuw i64 %656, 1
  %658 = add i64 %657, %417
  call fastcc void @_ZN3jxl12_GLOBAL__N_19HashChain6UpdateEm(%"struct.jxl::(anonymous namespace)::HashChain"* nonnull %8, i64 %658) #12
  %659 = icmp eq i64 %657, %653
  br i1 %659, label %660, label %655

660:                                              ; preds = %646, %655, %651, %641
  %661 = phi i8 [ 0, %641 ], [ %416, %651 ], [ %416, %655 ], [ 0, %646 ]
  %662 = load i64, i64* %9, align 8
  %663 = add i64 %417, -1
  %664 = add i64 %663, %662
  br label %665

665:                                              ; preds = %325, %660
  %666 = phi i8 [ %661, %660 ], [ 0, %325 ]
  %667 = phi i64 [ %664, %660 ], [ %253, %325 ]
  %668 = phi float [ %638, %660 ], [ %252, %325 ]
  %669 = add i64 %667, 1
  %670 = load i64, i64* %110, align 8
  %671 = load i64, i64* %112, align 8
  %672 = sub i64 %670, %671
  %673 = ashr exact i64 %672, 3
  %674 = icmp ult i64 %669, %673
  br i1 %674, label %250, label %242

675:                                              ; preds = %84
  %676 = getelementptr inbounds %"struct.jxl::LZ77Params", %"struct.jxl::LZ77Params"* %3, i64 0, i32 1
  store i8 1, i8* %676, align 8
  br label %677

677:                                              ; preds = %675, %84
  %678 = load float*, float** %57, align 8
  %679 = icmp eq float* %678, null
  br i1 %679, label %684, label %680

680:                                              ; preds = %677
  %681 = ptrtoint float* %678 to i64
  %682 = bitcast float** %58 to i64*
  store i64 %681, i64* %682, align 8
  %683 = bitcast float* %678 to i8*
  call void @_ZdlPv(i8* %683) #14
  br label %684

684:                                              ; preds = %677, %680
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %56) #12
  %685 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %6, i64 0, i32 2, i32 0, i32 0
  %686 = load float*, float** %685, align 8
  %687 = icmp eq float* %686, null
  br i1 %687, label %693, label %688

688:                                              ; preds = %684
  %689 = ptrtoint float* %686 to i64
  %690 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %6, i64 0, i32 2, i32 0, i32 1
  %691 = bitcast float** %690 to i64*
  store i64 %689, i64* %691, align 8
  %692 = bitcast float* %686 to i8*
  call void @_ZdlPv(i8* %692) #14
  br label %693

693:                                              ; preds = %688, %684
  %694 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %6, i64 0, i32 1, i32 0, i32 0
  %695 = load float*, float** %694, align 8
  %696 = icmp eq float* %695, null
  br i1 %696, label %702, label %697

697:                                              ; preds = %693
  %698 = ptrtoint float* %695 to i64
  %699 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %6, i64 0, i32 1, i32 0, i32 1
  %700 = bitcast float** %699 to i64*
  store i64 %698, i64* %700, align 8
  %701 = bitcast float* %695 to i8*
  call void @_ZdlPv(i8* %701) #14
  br label %702

702:                                              ; preds = %693, %697
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %13) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_119SymbolCostEstimatorC2EmbRKNSt3__16vectorINS3_INS_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS_10LZ77ParamsE(%"class.jxl::(anonymous namespace)::SymbolCostEstimator"*, i64, i1 zeroext, %"class.std::__1::vector.142"* nocapture readonly dereferenceable(24), %"struct.jxl::LZ77Params"* nocapture readonly dereferenceable(48)) unnamed_addr #0 align 2 {
  %6 = alloca %"class.jxl::(anonymous namespace)::HistogramBuilder", align 8
  %7 = alloca <4 x i32>, align 16
  %8 = bitcast <4 x i32>* %7 to %"struct.jxl::HybridUintConfig"*
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %0, i64 0, i32 2
  %13 = bitcast %"class.jxl::(anonymous namespace)::HistogramBuilder"* %6 to i8*
  %14 = bitcast %"class.std::__1::vector.188"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 48, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #12
  %15 = getelementptr inbounds %"class.jxl::(anonymous namespace)::HistogramBuilder", %"class.jxl::(anonymous namespace)::HistogramBuilder"* %6, i64 0, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.jxl::(anonymous namespace)::HistogramBuilder", %"class.jxl::(anonymous namespace)::HistogramBuilder"* %6, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.jxl::(anonymous namespace)::HistogramBuilder", %"class.jxl::(anonymous namespace)::HistogramBuilder"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 24, i1 false) #12
  %18 = icmp eq i64 %1, 0
  br i1 %18, label %38, label %19

19:                                               ; preds = %5
  %20 = icmp ugt i64 %1, 461168601842738790
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = bitcast %"class.jxl::(anonymous namespace)::HistogramBuilder"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %22) #13
  unreachable

23:                                               ; preds = %19
  %24 = mul i64 %1, 40
  %25 = tail call i8* @_Znwm(i64 %24) #14
  %26 = bitcast i8* %25 to %"struct.jxl::Histogram"*
  %27 = bitcast %"struct.jxl::Histogram"** %16 to i8**
  store i8* %25, i8** %27, align 8
  %28 = bitcast %"class.jxl::(anonymous namespace)::HistogramBuilder"* %6 to i8**
  store i8* %25, i8** %28, align 8
  %29 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %26, i64 %1
  store %"struct.jxl::Histogram"* %29, %"struct.jxl::Histogram"** %17, align 8
  br label %30

30:                                               ; preds = %30, %23
  %31 = phi %"struct.jxl::Histogram"* [ %33, %30 ], [ %26, %23 ]
  %32 = bitcast %"struct.jxl::Histogram"* %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 32, i1 false) #12
  %33 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %31, i64 1
  %34 = icmp eq %"struct.jxl::Histogram"* %33, %29
  br i1 %34, label %35, label %30

35:                                               ; preds = %30
  %36 = bitcast %"struct.jxl::Histogram"** %16 to i64*
  %37 = ptrtoint %"struct.jxl::Histogram"* %29 to i64
  store i64 %37, i64* %36, align 8
  br label %38

38:                                               ; preds = %5, %35
  %39 = bitcast <4 x i32>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #12
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %7, align 16
  %40 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %3, i64 0, i32 0, i32 1
  %41 = bitcast %"class.std::__1::vector.144"** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.std::__1::vector.142"* %3 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = icmp eq i64 %42, %44
  br i1 %45, label %62, label %46

46:                                               ; preds = %38
  %47 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %3, i64 0, i32 0, i32 0
  %48 = getelementptr inbounds %"struct.jxl::LZ77Params", %"struct.jxl::LZ77Params"* %4, i64 0, i32 4
  %49 = getelementptr inbounds %"struct.jxl::LZ77Params", %"struct.jxl::LZ77Params"* %4, i64 0, i32 2
  br label %50

50:                                               ; preds = %46, %73
  %51 = phi i64 [ %44, %46 ], [ %74, %73 ]
  %52 = phi i64 [ %42, %46 ], [ %75, %73 ]
  %53 = phi i64 [ 0, %46 ], [ %76, %73 ]
  %54 = inttoptr i64 %51 to %"class.std::__1::vector.144"*
  %55 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %54, i64 %53
  %56 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %54, i64 %53, i32 0, i32 1
  %57 = bitcast %"struct.jxl::Token"** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %"class.std::__1::vector.144"* %55 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = icmp eq i64 %58, %60
  br i1 %61, label %73, label %80

62:                                               ; preds = %73, %38
  %63 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %0, i64 0, i32 0
  store i64 0, i64* %63, align 8
  br i1 %18, label %185, label %64

64:                                               ; preds = %62
  %65 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %15, align 8
  %66 = and i64 %1, 1
  %67 = icmp eq i64 %1, 1
  br i1 %67, label %169, label %68

68:                                               ; preds = %64
  %69 = sub i64 %1, %66
  br label %225

70:                                               ; preds = %150
  %71 = ptrtoint %"class.std::__1::vector.144"* %159 to i64
  %72 = load i64, i64* %41, align 8
  br label %73

73:                                               ; preds = %70, %50
  %74 = phi i64 [ %71, %70 ], [ %51, %50 ]
  %75 = phi i64 [ %72, %70 ], [ %52, %50 ]
  %76 = add nuw i64 %53, 1
  %77 = sub i64 %75, %74
  %78 = sdiv exact i64 %77, 24
  %79 = icmp ult i64 %76, %78
  br i1 %79, label %50, label %62

80:                                               ; preds = %50, %150
  %81 = phi %"class.std::__1::vector.144"* [ %159, %150 ], [ %54, %50 ]
  %82 = phi i64 [ %158, %150 ], [ 0, %50 ]
  %83 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %81, i64 %53, i32 0, i32 0
  %84 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %83, align 8
  %85 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %84, i64 %82, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %84, i64 %82, i32 1
  %88 = load i32, i32* %87, align 4
  %89 = and i32 %86, 1
  %90 = icmp ne i32 %89, 0
  %91 = select i1 %90, %"struct.jxl::HybridUintConfig"* %48, %"struct.jxl::HybridUintConfig"* %8
  %92 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %91, i64 0, i32 1
  %93 = load i32, i32* %92, align 4, !noalias !55
  %94 = icmp ugt i32 %93, %88
  br i1 %94, label %118, label %95

95:                                               ; preds = %80
  %96 = tail call i32 @llvm.ctlz.i32(i32 %88, i1 true) #12, !range !3
  %97 = xor i32 %96, 31
  %98 = shl i32 1, %97
  %99 = sub i32 %88, %98
  %100 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %91, i64 0, i32 0
  %101 = load i32, i32* %100, align 4, !noalias !55
  %102 = sub i32 %97, %101
  %103 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %91, i64 0, i32 2
  %104 = load i32, i32* %103, align 4, !noalias !55
  %105 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %91, i64 0, i32 3
  %106 = load i32, i32* %105, align 4, !noalias !55
  %107 = add i32 %106, %104
  %108 = shl i32 %102, %107
  %109 = add i32 %108, %93
  %110 = sub i32 %97, %104
  %111 = lshr i32 %99, %110
  %112 = shl i32 %111, %106
  %113 = add i32 %109, %112
  %114 = shl nsw i32 -1, %106
  %115 = xor i32 %114, -1
  %116 = and i32 %99, %115
  %117 = add i32 %113, %116
  br label %118

118:                                              ; preds = %80, %95
  %119 = phi i32 [ %117, %95 ], [ %88, %80 ]
  %120 = load i32, i32* %49, align 4
  %121 = select i1 %90, i32 %120, i32 0
  %122 = add i32 %121, %119
  %123 = lshr i32 %86, 1
  %124 = zext i32 %123 to i64
  %125 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %15, align 8
  %126 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %125, i64 %124
  %127 = sext i32 %122 to i64
  %128 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %126, i64 0, i32 0
  %129 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %125, i64 %124, i32 0, i32 0, i32 1
  %130 = bitcast i32** %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = bitcast %"struct.jxl::Histogram"* %126 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = sub i64 %131, %133
  %135 = ashr exact i64 %134, 2
  %136 = icmp ugt i64 %135, %127
  %137 = inttoptr i64 %133 to i32*
  br i1 %136, label %150, label %138

138:                                              ; preds = %118
  %139 = add nsw i64 %127, 8
  %140 = and i64 %139, -8
  %141 = icmp ugt i64 %140, %135
  br i1 %141, label %142, label %146

142:                                              ; preds = %138
  %143 = sub nsw i64 %140, %135
  tail call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.128"* %128, i64 %143) #12
  %144 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %126, i64 0, i32 0, i32 0, i32 0
  %145 = load i32*, i32** %144, align 8
  br label %150

146:                                              ; preds = %138
  %147 = icmp ult i64 %140, %135
  br i1 %147, label %148, label %150

148:                                              ; preds = %146
  %149 = getelementptr inbounds i32, i32* %137, i64 %140
  store i32* %149, i32** %129, align 8
  br label %150

150:                                              ; preds = %118, %142, %146, %148
  %151 = phi i32* [ %137, %148 ], [ %137, %146 ], [ %145, %142 ], [ %137, %118 ]
  %152 = getelementptr inbounds i32, i32* %151, i64 %127
  %153 = load i32, i32* %152, align 4
  %154 = add nsw i32 %153, 1
  store i32 %154, i32* %152, align 4
  %155 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %125, i64 %124, i32 1
  %156 = load i64, i64* %155, align 8
  %157 = add i64 %156, 1
  store i64 %157, i64* %155, align 8
  %158 = add nuw i64 %82, 1
  %159 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %47, align 8
  %160 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %159, i64 %53
  %161 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %159, i64 %53, i32 0, i32 1
  %162 = bitcast %"struct.jxl::Token"** %161 to i64*
  %163 = load i64, i64* %162, align 8
  %164 = bitcast %"class.std::__1::vector.144"* %160 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = sub i64 %163, %165
  %167 = ashr exact i64 %166, 3
  %168 = icmp ult i64 %158, %167
  br i1 %168, label %80, label %70

169:                                              ; preds = %225, %64
  %170 = phi i64 [ undef, %64 ], [ %249, %225 ]
  %171 = phi i64 [ 0, %64 ], [ %249, %225 ]
  %172 = phi i64 [ 0, %64 ], [ %250, %225 ]
  %173 = icmp eq i64 %66, 0
  br i1 %173, label %185, label %174

174:                                              ; preds = %169
  %175 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %65, i64 %172, i32 0
  %176 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %65, i64 %172, i32 0, i32 0, i32 1
  %177 = bitcast i32** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.std::__1::vector.128"* %175 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = sub i64 %178, %180
  %182 = ashr exact i64 %181, 2
  %183 = icmp ult i64 %171, %182
  %184 = select i1 %183, i64 %182, i64 %171
  store i64 %184, i64* %63, align 8
  br label %185

185:                                              ; preds = %174, %169, %62
  %186 = phi i64 [ 0, %62 ], [ %170, %169 ], [ %184, %174 ]
  %187 = mul i64 %186, %1
  %188 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %0, i64 0, i32 1, i32 0, i32 1
  %189 = bitcast float** %188 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = bitcast %"class.std::__1::vector.188"* %11 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = sub i64 %190, %192
  %194 = ashr exact i64 %193, 2
  %195 = icmp ugt i64 %187, %194
  %196 = inttoptr i64 %192 to float*
  br i1 %195, label %197, label %199

197:                                              ; preds = %185
  %198 = sub i64 %187, %194
  tail call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.188"* %11, i64 %198) #12
  br label %203

199:                                              ; preds = %185
  %200 = icmp ult i64 %187, %194
  br i1 %200, label %201, label %203

201:                                              ; preds = %199
  %202 = getelementptr inbounds float, float* %196, i64 %187
  store float* %202, float** %188, align 8
  br label %203

203:                                              ; preds = %197, %199, %201
  %204 = getelementptr inbounds %"class.jxl::(anonymous namespace)::SymbolCostEstimator", %"class.jxl::(anonymous namespace)::SymbolCostEstimator"* %0, i64 0, i32 2, i32 0, i32 1
  %205 = bitcast float** %204 to i64*
  %206 = load i64, i64* %205, align 8
  %207 = bitcast %"class.std::__1::vector.188"* %12 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = sub i64 %206, %208
  %210 = ashr exact i64 %209, 2
  %211 = icmp ult i64 %210, %1
  %212 = inttoptr i64 %208 to float*
  br i1 %211, label %213, label %215

213:                                              ; preds = %203
  %214 = sub i64 %1, %210
  tail call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.188"* %12, i64 %214) #12
  br label %219

215:                                              ; preds = %203
  %216 = icmp ugt i64 %210, %1
  br i1 %216, label %217, label %219

217:                                              ; preds = %215
  %218 = getelementptr inbounds float, float* %212, i64 %1
  store float* %218, float** %204, align 8
  br label %219

219:                                              ; preds = %213, %215, %217
  br i1 %18, label %253, label %220

220:                                              ; preds = %219
  %221 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %11, i64 0, i32 0, i32 0
  %222 = bitcast float* %9 to i8*
  %223 = bitcast float* %10 to i8*
  %224 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %12, i64 0, i32 0, i32 0
  br label %279

225:                                              ; preds = %225, %68
  %226 = phi i64 [ 0, %68 ], [ %249, %225 ]
  %227 = phi i64 [ 0, %68 ], [ %250, %225 ]
  %228 = phi i64 [ %69, %68 ], [ %251, %225 ]
  %229 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %65, i64 %227, i32 0
  %230 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %65, i64 %227, i32 0, i32 0, i32 1
  %231 = bitcast i32** %230 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = bitcast %"class.std::__1::vector.128"* %229 to i64*
  %234 = load i64, i64* %233, align 8
  %235 = sub i64 %232, %234
  %236 = ashr exact i64 %235, 2
  %237 = icmp ult i64 %226, %236
  %238 = select i1 %237, i64 %236, i64 %226
  store i64 %238, i64* %63, align 8
  %239 = or i64 %227, 1
  %240 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %65, i64 %239, i32 0
  %241 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %65, i64 %239, i32 0, i32 0, i32 1
  %242 = bitcast i32** %241 to i64*
  %243 = load i64, i64* %242, align 8
  %244 = bitcast %"class.std::__1::vector.128"* %240 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = sub i64 %243, %245
  %247 = ashr exact i64 %246, 2
  %248 = icmp ult i64 %238, %247
  %249 = select i1 %248, i64 %247, i64 %238
  store i64 %249, i64* %63, align 8
  %250 = add nuw i64 %227, 2
  %251 = add i64 %228, -2
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %169, label %225

253:                                              ; preds = %296, %219
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #12
  %254 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %15, align 8
  %255 = icmp eq %"struct.jxl::Histogram"* %254, null
  br i1 %255, label %278, label %256

256:                                              ; preds = %253
  %257 = bitcast %"struct.jxl::Histogram"* %254 to i8*
  %258 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %16, align 8
  %259 = icmp eq %"struct.jxl::Histogram"* %258, %254
  br i1 %259, label %276, label %260

260:                                              ; preds = %256, %271
  %261 = phi %"struct.jxl::Histogram"* [ %262, %271 ], [ %258, %256 ]
  %262 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %261, i64 -1
  %263 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %262, i64 0, i32 0, i32 0, i32 0
  %264 = load i32*, i32** %263, align 8
  %265 = icmp eq i32* %264, null
  br i1 %265, label %271, label %266

266:                                              ; preds = %260
  %267 = ptrtoint i32* %264 to i64
  %268 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %261, i64 -1, i32 0, i32 0, i32 1
  %269 = bitcast i32** %268 to i64*
  store i64 %267, i64* %269, align 8
  %270 = bitcast i32* %264 to i8*
  tail call void @_ZdlPv(i8* %270) #14
  br label %271

271:                                              ; preds = %266, %260
  %272 = icmp eq %"struct.jxl::Histogram"* %262, %254
  br i1 %272, label %273, label %260

273:                                              ; preds = %271
  %274 = bitcast %"class.jxl::(anonymous namespace)::HistogramBuilder"* %6 to i8**
  %275 = load i8*, i8** %274, align 8
  br label %276

276:                                              ; preds = %273, %256
  %277 = phi i8* [ %275, %273 ], [ %257, %256 ]
  store %"struct.jxl::Histogram"* %254, %"struct.jxl::Histogram"** %16, align 8
  tail call void @_ZdlPv(i8* %277) #14
  br label %278

278:                                              ; preds = %253, %276
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #12
  ret void

279:                                              ; preds = %296, %220
  %280 = phi i64 [ 0, %220 ], [ %307, %296 ]
  %281 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %15, align 8
  %282 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %281, i64 %280, i32 1
  %283 = load i64, i64* %282, align 8
  %284 = uitofp i64 %283 to float
  %285 = fadd float %284, 0x3E45798EE0000000
  %286 = fdiv float 1.000000e+00, %285
  %287 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %281, i64 %280
  %288 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %281, i64 %280, i32 0, i32 0, i32 1
  %289 = bitcast i32** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %"struct.jxl::Histogram"* %287 to i64*
  %292 = load i64, i64* %291, align 8
  %293 = icmp eq i64 %290, %292
  br i1 %293, label %296, label %294

294:                                              ; preds = %279
  %295 = inttoptr i64 %292 to i32*
  br label %309

296:                                              ; preds = %349, %279
  %297 = phi float [ 0.000000e+00, %279 ], [ %363, %349 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %222)
  store float 0.000000e+00, float* %9, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %223)
  %298 = fmul float %286, %297
  %299 = fsub float 6.000000e+00, %298
  store float %299, float* %10, align 4
  %300 = fcmp ogt float %299, 0.000000e+00
  %301 = select i1 %300, float* %10, float* %9
  %302 = bitcast float* %301 to i32*
  %303 = load i32, i32* %302, align 4
  %304 = load float*, float** %224, align 8
  %305 = getelementptr inbounds float, float* %304, i64 %280
  %306 = bitcast float* %305 to i32*
  store i32 %303, i32* %306, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %223)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %222)
  %307 = add nuw i64 %280, 1
  %308 = icmp eq i64 %307, %1
  br i1 %308, label %253, label %279

309:                                              ; preds = %294, %349
  %310 = phi i32* [ %358, %349 ], [ %295, %294 ]
  %311 = phi %"struct.jxl::Histogram"* [ %356, %349 ], [ %281, %294 ]
  %312 = phi i64 [ %364, %349 ], [ 0, %294 ]
  %313 = phi float [ %363, %349 ], [ 0.000000e+00, %294 ]
  %314 = getelementptr inbounds i32, i32* %310, i64 %312
  %315 = load i32, i32* %314, align 4
  %316 = sext i32 %315 to i64
  %317 = icmp eq i32 %315, 0
  br i1 %317, label %349, label %318

318:                                              ; preds = %309
  %319 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %311, i64 %280, i32 1
  %320 = load i64, i64* %319, align 8
  %321 = icmp eq i64 %320, %316
  br i1 %321, label %349, label %322

322:                                              ; preds = %318
  %323 = uitofp i64 %316 to float
  %324 = fmul float %286, %323
  %325 = bitcast float %324 to i32
  %326 = add i32 %325, -1059760811
  %327 = lshr i32 %326, 23
  %328 = ashr i32 %326, 31
  %329 = shl nsw i32 %328, 8
  %330 = or i32 %329, %327
  %331 = shl i32 %330, 23
  %332 = sub i32 %325, %331
  %333 = bitcast i32 %332 to float
  %334 = sitofp i32 %330 to float
  %335 = fadd float %333, -1.000000e+00
  fence acq_rel
  %336 = fmul float %335, 0x3FE7C238E0000000
  %337 = fadd float %336, 0x3FF6DC0560000000
  %338 = fmul float %335, 0x3FC648B180000000
  %339 = fadd float %338, 0x3FF0279DA0000000
  fence acq_rel
  %340 = fmul float %335, %337
  %341 = fadd float %340, 0xBEBF0B5600000000
  %342 = fmul float %335, %339
  %343 = fadd float %342, 0x3FEFB0C4A0000000
  fence acq_rel
  %344 = fdiv float %341, %343
  %345 = fadd float %344, %334
  %346 = fsub float -0.000000e+00, %345
  %347 = tail call float @llvm.ceil.f32(float %346) #12
  %348 = select i1 %2, float %347, float %346
  br label %349

349:                                              ; preds = %322, %309, %318
  %350 = phi float [ 0.000000e+00, %318 ], [ 1.200000e+01, %309 ], [ %348, %322 ]
  %351 = load i64, i64* %63, align 8
  %352 = mul i64 %351, %280
  %353 = add i64 %352, %312
  %354 = load float*, float** %221, align 8
  %355 = getelementptr inbounds float, float* %354, i64 %353
  store float %350, float* %355, align 4
  %356 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %15, align 8
  %357 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %356, i64 %280, i32 0, i32 0, i32 0
  %358 = load i32*, i32** %357, align 8
  %359 = getelementptr inbounds i32, i32* %358, i64 %312
  %360 = load i32, i32* %359, align 4
  %361 = sitofp i32 %360 to float
  %362 = fmul float %350, %361
  %363 = fadd float %313, %362
  %364 = add nuw i64 %312, 1
  %365 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %356, i64 %280, i32 0, i32 0, i32 1
  %366 = bitcast i32** %365 to i64*
  %367 = load i64, i64* %366, align 8
  %368 = ptrtoint i32* %358 to i64
  %369 = sub i64 %367, %368
  %370 = ashr exact i64 %369, 2
  %371 = icmp ult i64 %364, %370
  br i1 %371, label %309, label %296
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.142"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.144"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.144"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.144"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast %"struct.jxl::Token"** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #12
  %27 = ptrtoint %"class.std::__1::vector.144"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %124

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.142"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.142"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #13
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #14
  %52 = bitcast i8* %51 to %"class.std::__1::vector.144"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.144"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.144"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.144"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #12
  %64 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.144"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.144"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.144"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.144"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %70, align 8
  %72 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.144"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.144"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.144"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.144"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.144"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #12
  %82 = bitcast %"class.std::__1::vector.144"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.144"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast %"struct.jxl::Token"** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast %"struct.jxl::Token"** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"struct.jxl::Token"** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"struct.jxl::Token"** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.144"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #12
  %96 = icmp eq %"class.std::__1::vector.144"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.144"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.144"*, %"class.std::__1::vector.144"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.144"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.144"*
  %106 = icmp eq %"class.std::__1::vector.144"* %102, %105
  br i1 %106, label %120, label %107

107:                                              ; preds = %101, %118
  %108 = phi %"class.std::__1::vector.144"* [ %109, %118 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %109, i64 0, i32 0, i32 0
  %111 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %110, align 8
  %112 = icmp eq %"struct.jxl::Token"* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"struct.jxl::Token"* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.144", %"class.std::__1::vector.144"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast %"struct.jxl::Token"** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast %"struct.jxl::Token"* %111 to i8*
  tail call void @_ZdlPv(i8* %117) #14
  br label %118

118:                                              ; preds = %113, %107
  %119 = icmp eq %"class.std::__1::vector.144"* %109, %105
  br i1 %119, label %120, label %107

120:                                              ; preds = %118, %101
  %121 = icmp eq i64 %104, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %123) #14
  br label %124

124:                                              ; preds = %122, %120, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.188"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast float** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %0, i64 0, i32 0, i32 1
  %7 = bitcast float** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to float*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds float, float* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr float, float* %13, i64 %18
  %20 = bitcast float* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #12
  %26 = ptrtoint float* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.188"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.188"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #13
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #13
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #14
  %54 = bitcast i8* %53 to float*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi float* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds float, float* %57, i64 %33
  %59 = getelementptr inbounds float, float* %57, i64 %56
  %60 = getelementptr inbounds float, float* %58, i64 %1
  %61 = bitcast float* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #12
  %63 = ptrtoint float* %59 to i64
  %64 = ptrtoint float* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.188", %"class.std::__1::vector.188"* %0, i64 0, i32 0, i32 0
  %66 = load float*, float** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint float* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds float, float* %58, i64 %71
  %73 = ptrtoint float* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast float* %72 to i8*
  %77 = bitcast float* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #12
  %78 = load float*, float** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi float* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq float* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast float* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #14
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_19HashChainC2EPKNS_5TokenEmmmmm(%"struct.jxl::(anonymous namespace)::HashChain"*, %"struct.jxl::Token"* nocapture readonly, i64, i64, i64, i64, i64) unnamed_addr #0 align 2 {
  %8 = alloca %"class.std::__1::tuple", align 8
  %9 = alloca %"class.std::__1::tuple.230", align 1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 0
  store i64 %2, i64* %14, align 8
  %15 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 1
  %16 = bitcast %"class.std::__1::vector.11"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false) #12
  %17 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 2
  store i32 32768, i32* %17, align 8
  %18 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 3
  store i32 32767, i32* %18, align 4
  %19 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 4
  store i32 5, i32* %19, align 8
  %20 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 6
  %21 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 7
  %22 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 8
  %23 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 9
  %24 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 10
  %25 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 11
  %26 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 14
  %27 = bitcast %"class.std::__1::vector.128"* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 148, i1 false)
  store i64 %3, i64* %26, align 8
  %28 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 15
  %29 = add i64 %3, -1
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 16
  store i64 %4, i64* %30, align 8
  %31 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 17
  store i64 %5, i64* %31, align 8
  %32 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 18
  %33 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 18, i32 0, i32 3
  %34 = bitcast %"class.std::__1::__compressed_pair.220"* %33 to i32*
  %35 = bitcast %"class.std::__1::unordered_map"* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 32, i1 false) #12
  store i32 1065353216, i32* %34, align 4
  %36 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 19
  store i64 0, i64* %36, align 8
  %37 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 20
  store i32 256, i32* %37, align 8
  %38 = icmp eq i64 %2, 0
  br i1 %38, label %59, label %39

39:                                               ; preds = %7
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.11"* %15, i64 %2) #12
  %40 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %15, i64 0, i32 0, i32 0
  %41 = add i64 %2, -1
  %42 = and i64 %2, 3
  %43 = icmp ult i64 %41, 3
  br i1 %43, label %46, label %44

44:                                               ; preds = %39
  %45 = sub i64 %2, %42
  br label %120

46:                                               ; preds = %120, %39
  %47 = phi i64 [ 0, %39 ], [ %142, %120 ]
  %48 = icmp eq i64 %42, 0
  br i1 %48, label %59, label %49

49:                                               ; preds = %46, %49
  %50 = phi i64 [ %56, %49 ], [ %47, %46 ]
  %51 = phi i64 [ %57, %49 ], [ %42, %46 ]
  %52 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1, i64 %50, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = load i32*, i32** %40, align 8
  %55 = getelementptr inbounds i32, i32* %54, i64 %50
  store i32 %53, i32* %55, align 4
  %56 = add nuw i64 %50, 1
  %57 = add i64 %51, -1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %49, !llvm.loop !60

59:                                               ; preds = %46, %49, %7
  %60 = load i32, i32* %17, align 8
  %61 = zext i32 %60 to i64
  %62 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %62) #12
  store i32 -1, i32* %10, align 4
  %63 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 6, i32 0, i32 1
  %64 = bitcast i32** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %"class.std::__1::vector.128"* %20 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = sub i64 %65, %67
  %69 = ashr exact i64 %68, 2
  %70 = icmp ult i64 %69, %61
  %71 = inttoptr i64 %67 to i32*
  br i1 %70, label %72, label %74

72:                                               ; preds = %59
  %73 = sub nsw i64 %61, %69
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi(%"class.std::__1::vector.128"* %20, i64 %73, i32* nonnull dereferenceable(4) %10) #12
  br label %78

74:                                               ; preds = %59
  %75 = icmp ugt i64 %69, %61
  br i1 %75, label %76, label %78

76:                                               ; preds = %74
  %77 = getelementptr inbounds i32, i32* %71, i64 %61
  store i32* %77, i32** %63, align 8
  br label %78

78:                                               ; preds = %72, %74, %76
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %62) #12
  %79 = load i64, i64* %26, align 8
  %80 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %80) #12
  store i32 -1, i32* %11, align 4
  %81 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 8, i32 0, i32 1
  %82 = bitcast i32** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.128"* %22 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = sub i64 %83, %85
  %87 = ashr exact i64 %86, 2
  %88 = icmp ugt i64 %79, %87
  %89 = inttoptr i64 %85 to i32*
  br i1 %88, label %90, label %93

90:                                               ; preds = %78
  %91 = sub i64 %79, %87
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi(%"class.std::__1::vector.128"* %22, i64 %91, i32* nonnull dereferenceable(4) %11) #12
  %92 = load i64, i64* %26, align 8
  br label %97

93:                                               ; preds = %78
  %94 = icmp ult i64 %79, %87
  br i1 %94, label %95, label %97

95:                                               ; preds = %93
  %96 = getelementptr inbounds i32, i32* %89, i64 %79
  store i32* %96, i32** %81, align 8
  br label %97

97:                                               ; preds = %90, %93, %95
  %98 = phi i64 [ %92, %90 ], [ %79, %93 ], [ %79, %95 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %80) #12
  %99 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 7, i32 0, i32 1
  %100 = bitcast i32** %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %"class.std::__1::vector.11"* %21 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = sub i64 %101, %103
  %105 = ashr exact i64 %104, 2
  %106 = icmp ugt i64 %98, %105
  %107 = inttoptr i64 %103 to i32*
  br i1 %106, label %108, label %111

108:                                              ; preds = %97
  %109 = sub i64 %98, %105
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.11"* %21, i64 %109) #12
  %110 = load i64, i64* %26, align 8
  br label %115

111:                                              ; preds = %97
  %112 = icmp ult i64 %98, %105
  br i1 %112, label %113, label %115

113:                                              ; preds = %111
  %114 = getelementptr inbounds i32, i32* %107, i64 %98
  store i32* %114, i32** %99, align 8
  br label %115

115:                                              ; preds = %108, %111, %113
  %116 = phi i64 [ %110, %108 ], [ %98, %111 ], [ %98, %113 ]
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %145, label %118

118:                                              ; preds = %115
  %119 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %21, i64 0, i32 0, i32 0
  br label %206

120:                                              ; preds = %120, %44
  %121 = phi i64 [ 0, %44 ], [ %142, %120 ]
  %122 = phi i64 [ %45, %44 ], [ %143, %120 ]
  %123 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1, i64 %121, i32 1
  %124 = load i32, i32* %123, align 4
  %125 = load i32*, i32** %40, align 8
  %126 = getelementptr inbounds i32, i32* %125, i64 %121
  store i32 %124, i32* %126, align 4
  %127 = or i64 %121, 1
  %128 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1, i64 %127, i32 1
  %129 = load i32, i32* %128, align 4
  %130 = load i32*, i32** %40, align 8
  %131 = getelementptr inbounds i32, i32* %130, i64 %127
  store i32 %129, i32* %131, align 4
  %132 = or i64 %121, 2
  %133 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1, i64 %132, i32 1
  %134 = load i32, i32* %133, align 4
  %135 = load i32*, i32** %40, align 8
  %136 = getelementptr inbounds i32, i32* %135, i64 %132
  store i32 %134, i32* %136, align 4
  %137 = or i64 %121, 3
  %138 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1, i64 %137, i32 1
  %139 = load i32, i32* %138, align 4
  %140 = load i32*, i32** %40, align 8
  %141 = getelementptr inbounds i32, i32* %140, i64 %137
  store i32 %139, i32* %141, align 4
  %142 = add nuw i64 %121, 4
  %143 = add i64 %122, -4
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %46, label %120

145:                                              ; preds = %206, %115
  %146 = phi i64 [ 0, %115 ], [ %213, %206 ]
  %147 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 11, i32 0, i32 1
  %148 = bitcast i32** %147 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = bitcast %"class.std::__1::vector.11"* %25 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = sub i64 %149, %151
  %153 = ashr exact i64 %152, 2
  %154 = icmp ugt i64 %146, %153
  %155 = inttoptr i64 %151 to i32*
  br i1 %154, label %156, label %159

156:                                              ; preds = %145
  %157 = sub i64 %146, %153
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.11"* %25, i64 %157) #12
  %158 = load i64, i64* %26, align 8
  br label %163

159:                                              ; preds = %145
  %160 = icmp ult i64 %146, %153
  br i1 %160, label %161, label %163

161:                                              ; preds = %159
  %162 = getelementptr inbounds i32, i32* %155, i64 %146
  store i32* %162, i32** %147, align 8
  br label %163

163:                                              ; preds = %156, %159, %161
  %164 = phi i64 [ %158, %156 ], [ %146, %159 ], [ %146, %161 ]
  %165 = add i64 %164, 1
  %166 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %166) #12
  store i32 -1, i32* %12, align 4
  %167 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 9, i32 0, i32 1
  %168 = bitcast i32** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = bitcast %"class.std::__1::vector.128"* %23 to i64*
  %171 = load i64, i64* %170, align 8
  %172 = sub i64 %169, %171
  %173 = ashr exact i64 %172, 2
  %174 = icmp ugt i64 %165, %173
  %175 = inttoptr i64 %171 to i32*
  br i1 %174, label %176, label %179

176:                                              ; preds = %163
  %177 = sub i64 %165, %173
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi(%"class.std::__1::vector.128"* %23, i64 %177, i32* nonnull dereferenceable(4) %12) #12
  %178 = load i64, i64* %26, align 8
  br label %183

179:                                              ; preds = %163
  %180 = icmp ult i64 %165, %173
  br i1 %180, label %181, label %183

181:                                              ; preds = %179
  %182 = getelementptr inbounds i32, i32* %175, i64 %165
  store i32* %182, i32** %167, align 8
  br label %183

183:                                              ; preds = %176, %179, %181
  %184 = phi i64 [ %178, %176 ], [ %164, %179 ], [ %164, %181 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %166) #12
  %185 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 10, i32 0, i32 1
  %186 = bitcast i32** %185 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = bitcast %"class.std::__1::vector.11"* %24 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = sub i64 %187, %189
  %191 = ashr exact i64 %190, 2
  %192 = icmp ugt i64 %184, %191
  %193 = inttoptr i64 %189 to i32*
  br i1 %192, label %194, label %197

194:                                              ; preds = %183
  %195 = sub i64 %184, %191
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.11"* %24, i64 %195) #12
  %196 = load i64, i64* %26, align 8
  br label %201

197:                                              ; preds = %183
  %198 = icmp ult i64 %184, %191
  br i1 %198, label %199, label %201

199:                                              ; preds = %197
  %200 = getelementptr inbounds i32, i32* %193, i64 %184
  store i32* %200, i32** %185, align 8
  br label %201

201:                                              ; preds = %194, %197, %199
  %202 = phi i64 [ %196, %194 ], [ %184, %197 ], [ %184, %199 ]
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %215, label %204

204:                                              ; preds = %201
  %205 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %24, i64 0, i32 0, i32 0
  br label %223

206:                                              ; preds = %118, %206
  %207 = phi i64 [ 0, %118 ], [ %212, %206 ]
  %208 = phi i32 [ 0, %118 ], [ %211, %206 ]
  %209 = load i32*, i32** %119, align 8
  %210 = getelementptr inbounds i32, i32* %209, i64 %207
  store i32 %208, i32* %210, align 4
  %211 = add i32 %208, 1
  %212 = zext i32 %211 to i64
  %213 = load i64, i64* %26, align 8
  %214 = icmp ugt i64 %213, %212
  br i1 %214, label %206, label %145

215:                                              ; preds = %223, %201
  %216 = icmp eq i64 %6, 0
  br i1 %216, label %254, label %217

217:                                              ; preds = %215
  %218 = bitcast i32* %13 to i8*
  %219 = getelementptr inbounds %"class.std::__1::unordered_map", %"class.std::__1::unordered_map"* %32, i64 0, i32 0
  %220 = bitcast %"class.std::__1::tuple"* %8 to i8*
  %221 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %8, i64 0, i32 0, i32 0, i32 0
  %222 = getelementptr inbounds %"class.std::__1::tuple.230", %"class.std::__1::tuple.230"* %9, i64 0, i32 0
  br label %233

223:                                              ; preds = %204, %223
  %224 = phi i64 [ 0, %204 ], [ %229, %223 ]
  %225 = phi i32 [ 0, %204 ], [ %228, %223 ]
  %226 = load i32*, i32** %205, align 8
  %227 = getelementptr inbounds i32, i32* %226, i64 %224
  store i32 %225, i32* %227, align 4
  %228 = add i32 %225, 1
  %229 = zext i32 %228 to i64
  %230 = load i64, i64* %26, align 8
  %231 = icmp ugt i64 %230, %229
  br i1 %231, label %223, label %215

232:                                              ; preds = %233
  store i64 120, i64* %36, align 8
  br label %254

233:                                              ; preds = %233, %217
  %234 = phi i64 [ 119, %217 ], [ %252, %233 ]
  %235 = getelementptr inbounds [120 x [2 x i8]], [120 x [2 x i8]]* @_ZN3jxlL17kSpecialDistancesE, i64 0, i64 %234, i64 0
  %236 = load i8, i8* %235, align 2
  %237 = getelementptr inbounds [120 x [2 x i8]], [120 x [2 x i8]]* @_ZN3jxlL17kSpecialDistancesE, i64 0, i64 %234, i64 1
  %238 = load i8, i8* %237, align 1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %218) #12
  %239 = sext i8 %238 to i64
  %240 = mul i64 %239, %6
  %241 = sext i8 %236 to i64
  %242 = add i64 %240, %241
  %243 = trunc i64 %242 to i32
  %244 = icmp sgt i32 %243, 1
  %245 = select i1 %244, i32 %243, i32 1
  store i32 %245, i32* %13, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %220) #12
  store i32* %13, i32** %221, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %222) #12
  %246 = call { %"struct.std::__1::__hash_node_base"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIiiEENS_22__unordered_map_hasherIiS2_NS_4hashIiEENS_8equal_toIiEELb1EEENS_21__unordered_map_equalIiS2_S7_S5_Lb1EEENS_9allocatorIS2_EEE25__emplace_unique_key_argsIiJRKNS_21piecewise_construct_tENS_5tupleIJRKiEEENSI_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS2_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table"* %219, i32* nonnull dereferenceable(4) %13, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple"* nonnull dereferenceable(8) %8, %"class.std::__1::tuple.230"* nonnull dereferenceable(1) %9) #12
  %247 = extractvalue { %"struct.std::__1::__hash_node_base"*, i8 } %246, 0
  %248 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %247, i64 2
  %249 = bitcast %"struct.std::__1::__hash_node_base"* %248 to %"struct.std::__1::pair.231"*
  %250 = getelementptr inbounds %"struct.std::__1::pair.231", %"struct.std::__1::pair.231"* %249, i64 0, i32 1
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %222) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %220) #12
  %251 = trunc i64 %234 to i32
  store i32 %251, i32* %250, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %218) #12
  %252 = add nsw i64 %234, -1
  %253 = icmp eq i64 %234, 0
  br i1 %253, label %232, label %233

254:                                              ; preds = %215, %232
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_19HashChain6UpdateEm(%"struct.jxl::(anonymous namespace)::HashChain"* nocapture, i64) unnamed_addr #10 align 2 {
  %3 = add i64 %1, 2
  %4 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %3, %5
  br i1 %6, label %7, label %27

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 1, i32 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds i32, i32* %9, i64 %1
  %11 = load i32, i32* %10, align 4
  %12 = add i64 %1, 1
  %13 = getelementptr inbounds i32, i32* %9, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = shl i32 %14, %16
  %18 = xor i32 %17, %11
  %19 = getelementptr inbounds i32, i32* %9, i64 %3
  %20 = load i32, i32* %19, align 4
  %21 = shl i32 %16, 1
  %22 = shl i32 %20, %21
  %23 = xor i32 %18, %22
  %24 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = and i32 %23, %25
  br label %27

27:                                               ; preds = %2, %7
  %28 = phi i32 [ %26, %7 ], [ 0, %2 ]
  %29 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 15
  %30 = load i64, i64* %29, align 8
  %31 = and i64 %30, %1
  %32 = trunc i64 %31 to i32
  %33 = and i64 %31, 4294967295
  %34 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 8, i32 0, i32 0
  %35 = load i32*, i32** %34, align 8
  %36 = getelementptr inbounds i32, i32* %35, i64 %33
  store i32 %28, i32* %36, align 4
  %37 = zext i32 %28 to i64
  %38 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 6, i32 0, i32 0
  %39 = load i32*, i32** %38, align 8
  %40 = getelementptr inbounds i32, i32* %39, i64 %37
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %48, label %43

43:                                               ; preds = %27
  %44 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 7, i32 0, i32 0
  %45 = load i32*, i32** %44, align 8
  %46 = getelementptr inbounds i32, i32* %45, i64 %33
  store i32 %41, i32* %46, align 4
  %47 = load i32*, i32** %38, align 8
  br label %48

48:                                               ; preds = %27, %43
  %49 = phi i32* [ %39, %27 ], [ %47, %43 ]
  %50 = getelementptr inbounds i32, i32* %49, i64 %37
  store i32 %32, i32* %50, align 4
  %51 = icmp eq i64 %1, 0
  br i1 %51, label %63, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 1, i32 0, i32 0
  %54 = load i32*, i32** %53, align 8
  %55 = getelementptr inbounds i32, i32* %54, i64 %1
  %56 = load i32, i32* %55, align 4
  %57 = add i64 %1, -1
  %58 = getelementptr inbounds i32, i32* %54, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %56, %59
  br i1 %60, label %63, label %61

61:                                               ; preds = %52
  %62 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 12
  store i32 0, i32* %62, align 8
  br label %63

63:                                               ; preds = %52, %48, %61
  %64 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 12
  %65 = load i32, i32* %64, align 8
  %66 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 14
  %67 = load i64, i64* %66, align 8
  %68 = add i64 %67, %1
  %69 = load i64, i64* %4, align 8
  %70 = icmp ugt i64 %68, %69
  %71 = select i1 %70, i64 %69, i64 %68
  %72 = icmp eq i32 %65, 0
  br i1 %72, label %73, label %78

73:                                               ; preds = %63
  %74 = icmp ugt i64 %71, %1
  br i1 %74, label %75, label %104

75:                                               ; preds = %73
  %76 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 1, i32 0, i32 0
  %77 = load i32*, i32** %76, align 8
  br label %93

78:                                               ; preds = %63
  %79 = zext i32 %65 to i64
  %80 = load i64, i64* %29, align 8
  %81 = icmp ugt i64 %80, %79
  br i1 %81, label %91, label %82

82:                                               ; preds = %78
  %83 = add i64 %71, -1
  %84 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 1, i32 0, i32 0
  %85 = load i32*, i32** %84, align 8
  %86 = getelementptr inbounds i32, i32* %85, i64 %83
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, 0
  %89 = icmp ule i64 %68, %69
  %90 = and i1 %89, %88
  br i1 %90, label %104, label %91

91:                                               ; preds = %82, %78
  %92 = add i32 %65, -1
  br label %104

93:                                               ; preds = %99, %75
  %94 = phi i64 [ %1, %75 ], [ %102, %99 ]
  %95 = phi i32 [ 0, %75 ], [ %100, %99 ]
  %96 = getelementptr inbounds i32, i32* %77, i64 %94
  %97 = load i32, i32* %96, align 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %104

99:                                               ; preds = %93
  %100 = add i32 %95, 1
  %101 = zext i32 %100 to i64
  %102 = add i64 %101, %1
  %103 = icmp ult i64 %102, %71
  br i1 %103, label %93, label %104

104:                                              ; preds = %93, %99, %73, %82, %91
  %105 = phi i32 [ %92, %91 ], [ %65, %82 ], [ 0, %73 ], [ %95, %93 ], [ %100, %99 ]
  store i32 %105, i32* %64, align 8
  %106 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 11, i32 0, i32 0
  %107 = load i32*, i32** %106, align 8
  %108 = getelementptr inbounds i32, i32* %107, i64 %33
  store i32 %105, i32* %108, align 4
  %109 = load i32, i32* %64, align 8
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 9, i32 0, i32 0
  %112 = load i32*, i32** %111, align 8
  %113 = getelementptr inbounds i32, i32* %112, i64 %110
  %114 = load i32, i32* %113, align 4
  %115 = icmp eq i32 %114, -1
  br i1 %115, label %123, label %116

116:                                              ; preds = %104
  %117 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 10, i32 0, i32 0
  %118 = load i32*, i32** %117, align 8
  %119 = getelementptr inbounds i32, i32* %118, i64 %33
  store i32 %114, i32* %119, align 4
  %120 = load i32, i32* %64, align 8
  %121 = load i32*, i32** %111, align 8
  %122 = zext i32 %120 to i64
  br label %123

123:                                              ; preds = %104, %116
  %124 = phi i64 [ %110, %104 ], [ %122, %116 ]
  %125 = phi i32* [ %112, %104 ], [ %121, %116 ]
  %126 = getelementptr inbounds i32, i32* %125, i64 %124
  store i32 %32, i32* %126, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNK3jxl12_GLOBAL__N_19HashChain9FindMatchEmiPmS2_(%"struct.jxl::(anonymous namespace)::HashChain"* nocapture readonly, i64, i64*, i64*) unnamed_addr #0 align 2 {
  store i64 0, i64* %2, align 8
  store i64 1, i64* %3, align 8
  %5 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 15
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, %1
  %8 = trunc i64 %7 to i32
  %9 = add i64 %1, 2
  %10 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %9, %11
  br i1 %12, label %13, label %33

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 1, i32 0, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = getelementptr inbounds i32, i32* %15, i64 %1
  %17 = load i32, i32* %16, align 4
  %18 = add i64 %1, 1
  %19 = getelementptr inbounds i32, i32* %15, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 4
  %22 = load i32, i32* %21, align 8
  %23 = shl i32 %20, %22
  %24 = xor i32 %23, %17
  %25 = getelementptr inbounds i32, i32* %15, i64 %9
  %26 = load i32, i32* %25, align 4
  %27 = shl i32 %22, 1
  %28 = shl i32 %26, %27
  %29 = xor i32 %24, %28
  %30 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 3
  %31 = load i32, i32* %30, align 4
  %32 = and i32 %29, %31
  br label %33

33:                                               ; preds = %13, %4
  %34 = phi i32 [ %32, %13 ], [ 0, %4 ]
  %35 = and i64 %7, 4294967295
  %36 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 7, i32 0, i32 0
  %37 = load i32*, i32** %36, align 8
  %38 = getelementptr inbounds i32, i32* %37, i64 %35
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 17
  %41 = load i64, i64* %40, align 8
  %42 = add i64 %41, %1
  %43 = trunc i64 %42 to i32
  %44 = trunc i64 %11 to i32
  %45 = icmp slt i32 %44, %43
  %46 = select i1 %45, i32 %44, i32 %43
  %47 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 10, i32 0, i32 0
  %48 = trunc i64 %1 to i32
  %49 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 12
  %50 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 11, i32 0, i32 0
  %51 = xor i32 %48, -1
  %52 = add i32 %46, %51
  %53 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 1, i32 0, i32 0
  %54 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 16
  %55 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 18, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %56 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 18, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 19
  %58 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 20
  %59 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 8, i32 0, i32 0
  %60 = sext i32 %46 to i64
  br label %61

61:                                               ; preds = %240, %33
  %62 = phi i32 [ %39, %33 ], [ %241, %240 ]
  %63 = phi i32 [ 0, %33 ], [ %75, %240 ]
  %64 = phi i32 [ 0, %33 ], [ %209, %240 ]
  %65 = phi i32 [ 0, %33 ], [ %207, %240 ]
  %66 = icmp ugt i32 %62, %8
  %67 = sub i32 %8, %62
  %68 = zext i32 %67 to i64
  br i1 %66, label %69, label %73

69:                                               ; preds = %61
  %70 = load i64, i64* %5, align 8
  %71 = add nuw nsw i64 %68, 1
  %72 = add i64 %71, %70
  br label %73

73:                                               ; preds = %69, %61
  %74 = phi i64 [ %72, %69 ], [ %68, %61 ]
  %75 = trunc i64 %74 to i32
  %76 = icmp sgt i32 %63, %75
  br i1 %76, label %242, label %77

77:                                               ; preds = %73
  %78 = icmp sgt i32 %75, 0
  br i1 %78, label %79, label %206

79:                                               ; preds = %77
  %80 = sub i64 %1, %74
  %81 = trunc i64 %80 to i32
  %82 = load i32, i32* %49, align 8
  %83 = icmp ugt i32 %82, 3
  br i1 %83, label %84, label %97

84:                                               ; preds = %79
  %85 = add i32 %82, -1
  %86 = zext i32 %62 to i64
  %87 = load i32*, i32** %50, align 8
  %88 = getelementptr inbounds i32, i32* %87, i64 %86
  %89 = load i32, i32* %88, align 4
  %90 = icmp slt i32 %89, %85
  %91 = select i1 %90, i32 %89, i32 %85
  %92 = add nsw i32 %91, %48
  %93 = icmp slt i32 %92, %46
  %94 = select i1 %93, i32 %91, i32 %52
  %95 = add nsw i32 %94, %48
  %96 = add nsw i32 %94, %81
  br label %97

97:                                               ; preds = %84, %79
  %98 = phi i32 [ %95, %84 ], [ %48, %79 ]
  %99 = phi i32 [ %96, %84 ], [ %81, %79 ]
  %100 = icmp slt i32 %98, %46
  br i1 %100, label %101, label %121

101:                                              ; preds = %97
  %102 = load i32*, i32** %53, align 8
  %103 = sext i32 %99 to i64
  %104 = sext i32 %98 to i64
  br label %105

105:                                              ; preds = %114, %101
  %106 = phi i64 [ %104, %101 ], [ %115, %114 ]
  %107 = phi i64 [ %103, %101 ], [ %117, %114 ]
  %108 = phi i32 [ %98, %101 ], [ %116, %114 ]
  %109 = getelementptr inbounds i32, i32* %102, i64 %106
  %110 = load i32, i32* %109, align 4
  %111 = getelementptr inbounds i32, i32* %102, i64 %107
  %112 = load i32, i32* %111, align 4
  %113 = icmp eq i32 %110, %112
  br i1 %113, label %114, label %119

114:                                              ; preds = %105
  %115 = add nsw i64 %106, 1
  %116 = add nsw i32 %108, 1
  %117 = add nsw i64 %107, 1
  %118 = icmp slt i64 %115, %60
  br i1 %118, label %105, label %121

119:                                              ; preds = %105
  %120 = trunc i64 %106 to i32
  br label %121

121:                                              ; preds = %114, %119, %97
  %122 = phi i32 [ %98, %97 ], [ %120, %119 ], [ %116, %114 ]
  %123 = sub i32 %122, %48
  %124 = zext i32 %123 to i64
  %125 = load i64, i64* %54, align 8
  %126 = icmp ugt i64 %125, %124
  %127 = add i32 %123, 2
  %128 = icmp ult i32 %127, %65
  %129 = or i1 %128, %126
  br i1 %129, label %206, label %130

130:                                              ; preds = %121
  %131 = shl i64 %74, 32
  %132 = ashr exact i64 %131, 32
  %133 = load i64, i64* %55, align 8
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %182, label %135

135:                                              ; preds = %130
  %136 = tail call i64 @llvm.ctpop.i64(i64 %133) #12, !range !2
  %137 = icmp ugt i64 %136, 1
  br i1 %137, label %141, label %138

138:                                              ; preds = %135
  %139 = add i64 %133, -1
  %140 = and i64 %139, %132
  br label %145

141:                                              ; preds = %135
  %142 = icmp ugt i64 %133, %132
  br i1 %142, label %145, label %143

143:                                              ; preds = %141
  %144 = urem i64 %132, %133
  br label %145

145:                                              ; preds = %143, %141, %138
  %146 = phi i64 [ %140, %138 ], [ %144, %143 ], [ %132, %141 ]
  %147 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %56, align 8
  %148 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %147, i64 %146
  %149 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %148, align 8
  %150 = icmp eq %"struct.std::__1::__hash_node_base"* %149, null
  br i1 %150, label %182, label %151

151:                                              ; preds = %145
  %152 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %149, i64 0, i32 0
  %153 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %152, align 8
  %154 = icmp eq %"struct.std::__1::__hash_node_base"* %153, null
  br i1 %154, label %182, label %155

155:                                              ; preds = %151
  %156 = add i64 %133, -1
  br label %157

157:                                              ; preds = %178, %155
  %158 = phi %"struct.std::__1::__hash_node_base"* [ %153, %155 ], [ %180, %178 ]
  %159 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %158, i64 1
  %160 = bitcast %"struct.std::__1::__hash_node_base"* %159 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = icmp eq i64 %161, %132
  br i1 %162, label %173, label %163

163:                                              ; preds = %157
  br i1 %137, label %166, label %164

164:                                              ; preds = %163
  %165 = and i64 %161, %156
  br label %170

166:                                              ; preds = %163
  %167 = icmp ult i64 %161, %133
  br i1 %167, label %170, label %168

168:                                              ; preds = %166
  %169 = urem i64 %161, %133
  br label %170

170:                                              ; preds = %168, %166, %164
  %171 = phi i64 [ %165, %164 ], [ %169, %168 ], [ %161, %166 ]
  %172 = icmp eq i64 %171, %146
  br i1 %172, label %178, label %182

173:                                              ; preds = %157
  %174 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %158, i64 2
  %175 = bitcast %"struct.std::__1::__hash_node_base"* %174 to i32*
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, %75
  br i1 %177, label %186, label %178

178:                                              ; preds = %173, %170
  %179 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %158, i64 0, i32 0
  %180 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %179, align 8
  %181 = icmp eq %"struct.std::__1::__hash_node_base"* %180, null
  br i1 %181, label %182, label %157

182:                                              ; preds = %178, %170, %151, %145, %130
  %183 = load i64, i64* %57, align 8
  %184 = add nsw i64 %132, -1
  %185 = add i64 %184, %183
  br label %191

186:                                              ; preds = %173
  %187 = bitcast %"struct.std::__1::__hash_node_base"* %174 to %"struct.std::__1::pair.231"*
  %188 = getelementptr inbounds %"struct.std::__1::pair.231", %"struct.std::__1::pair.231"* %187, i64 0, i32 1
  %189 = load i32, i32* %188, align 4
  %190 = sext i32 %189 to i64
  br label %191

191:                                              ; preds = %186, %182
  %192 = phi i64 [ %185, %182 ], [ %190, %186 ]
  %193 = shl i64 %192, 32
  %194 = ashr exact i64 %193, 32
  %195 = load i64, i64* %3, align 8
  %196 = icmp ult i64 %195, %124
  br i1 %196, label %202, label %197

197:                                              ; preds = %191
  %198 = icmp eq i64 %195, %124
  br i1 %198, label %199, label %203

199:                                              ; preds = %197
  %200 = load i64, i64* %2, align 8
  %201 = icmp ugt i64 %200, %194
  br i1 %201, label %202, label %203

202:                                              ; preds = %199, %191
  store i64 %124, i64* %3, align 8
  store i64 %194, i64* %2, align 8
  br label %203

203:                                              ; preds = %202, %199, %197
  %204 = icmp ugt i32 %123, %65
  %205 = select i1 %204, i32 %123, i32 %65
  br label %206

206:                                              ; preds = %203, %121, %77
  %207 = phi i32 [ %65, %77 ], [ %205, %203 ], [ %65, %121 ]
  %208 = phi i32 [ 0, %77 ], [ %123, %203 ], [ %123, %121 ]
  %209 = add nuw i32 %64, 1
  %210 = load i32, i32* %58, align 8
  %211 = icmp ult i32 %209, %210
  br i1 %211, label %212, label %242

212:                                              ; preds = %206
  %213 = load i32, i32* %49, align 8
  %214 = icmp ugt i32 %213, 2
  %215 = icmp ugt i32 %208, %213
  %216 = and i1 %214, %215
  %217 = zext i32 %62 to i64
  br i1 %216, label %218, label %229

218:                                              ; preds = %212
  %219 = load i32*, i32** %47, align 8
  %220 = getelementptr inbounds i32, i32* %219, i64 %217
  %221 = load i32, i32* %220, align 4
  %222 = icmp eq i32 %62, %221
  br i1 %222, label %242, label %223

223:                                              ; preds = %218
  %224 = zext i32 %221 to i64
  %225 = load i32*, i32** %50, align 8
  %226 = getelementptr inbounds i32, i32* %225, i64 %224
  %227 = load i32, i32* %226, align 4
  %228 = icmp eq i32 %227, %213
  br i1 %228, label %240, label %242

229:                                              ; preds = %212
  %230 = load i32*, i32** %36, align 8
  %231 = getelementptr inbounds i32, i32* %230, i64 %217
  %232 = load i32, i32* %231, align 4
  %233 = icmp eq i32 %62, %232
  br i1 %233, label %242, label %234

234:                                              ; preds = %229
  %235 = zext i32 %232 to i64
  %236 = load i32*, i32** %59, align 8
  %237 = getelementptr inbounds i32, i32* %236, i64 %235
  %238 = load i32, i32* %237, align 4
  %239 = icmp eq i32 %238, %34
  br i1 %239, label %240, label %242

240:                                              ; preds = %234, %223
  %241 = phi i32 [ %221, %223 ], [ %232, %234 ]
  br label %61

242:                                              ; preds = %73, %206, %218, %223, %229, %234
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_19HashChainD2Ev(%"struct.jxl::(anonymous namespace)::HashChain"* nocapture) unnamed_addr #11 align 2 {
  %2 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 18, i32 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %2, align 8
  %4 = icmp eq %"struct.std::__1::__hash_node_base"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1, %5
  %6 = phi %"struct.std::__1::__hash_node_base"* [ %8, %5 ], [ %3, %1 ]
  %7 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %6, i64 0, i32 0
  %8 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %7, align 8
  %9 = bitcast %"struct.std::__1::__hash_node_base"* %6 to i8*
  tail call void @_ZdlPv(i8* %9) #14
  %10 = icmp eq %"struct.std::__1::__hash_node_base"* %8, null
  br i1 %10, label %11, label %5

11:                                               ; preds = %5, %1
  %12 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 18, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %12, align 8
  store %"struct.std::__1::__hash_node_base"** null, %"struct.std::__1::__hash_node_base"*** %12, align 8
  %14 = icmp eq %"struct.std::__1::__hash_node_base"** %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = bitcast %"struct.std::__1::__hash_node_base"** %13 to i8*
  tail call void @_ZdlPv(i8* %16) #14
  br label %17

17:                                               ; preds = %11, %15
  %18 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 11, i32 0, i32 0
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %17
  %22 = ptrtoint i32* %19 to i64
  %23 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 11, i32 0, i32 1
  %24 = bitcast i32** %23 to i64*
  store i64 %22, i64* %24, align 8
  %25 = bitcast i32* %19 to i8*
  tail call void @_ZdlPv(i8* %25) #14
  br label %26

26:                                               ; preds = %17, %21
  %27 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 10, i32 0, i32 0
  %28 = load i32*, i32** %27, align 8
  %29 = icmp eq i32* %28, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = ptrtoint i32* %28 to i64
  %32 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 10, i32 0, i32 1
  %33 = bitcast i32** %32 to i64*
  store i64 %31, i64* %33, align 8
  %34 = bitcast i32* %28 to i8*
  tail call void @_ZdlPv(i8* %34) #14
  br label %35

35:                                               ; preds = %26, %30
  %36 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 9, i32 0, i32 0
  %37 = load i32*, i32** %36, align 8
  %38 = icmp eq i32* %37, null
  br i1 %38, label %44, label %39

39:                                               ; preds = %35
  %40 = ptrtoint i32* %37 to i64
  %41 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 9, i32 0, i32 1
  %42 = bitcast i32** %41 to i64*
  store i64 %40, i64* %42, align 8
  %43 = bitcast i32* %37 to i8*
  tail call void @_ZdlPv(i8* %43) #14
  br label %44

44:                                               ; preds = %35, %39
  %45 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 8, i32 0, i32 0
  %46 = load i32*, i32** %45, align 8
  %47 = icmp eq i32* %46, null
  br i1 %47, label %53, label %48

48:                                               ; preds = %44
  %49 = ptrtoint i32* %46 to i64
  %50 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 8, i32 0, i32 1
  %51 = bitcast i32** %50 to i64*
  store i64 %49, i64* %51, align 8
  %52 = bitcast i32* %46 to i8*
  tail call void @_ZdlPv(i8* %52) #14
  br label %53

53:                                               ; preds = %44, %48
  %54 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 7, i32 0, i32 0
  %55 = load i32*, i32** %54, align 8
  %56 = icmp eq i32* %55, null
  br i1 %56, label %62, label %57

57:                                               ; preds = %53
  %58 = ptrtoint i32* %55 to i64
  %59 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 7, i32 0, i32 1
  %60 = bitcast i32** %59 to i64*
  store i64 %58, i64* %60, align 8
  %61 = bitcast i32* %55 to i8*
  tail call void @_ZdlPv(i8* %61) #14
  br label %62

62:                                               ; preds = %53, %57
  %63 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 6, i32 0, i32 0
  %64 = load i32*, i32** %63, align 8
  %65 = icmp eq i32* %64, null
  br i1 %65, label %71, label %66

66:                                               ; preds = %62
  %67 = ptrtoint i32* %64 to i64
  %68 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 6, i32 0, i32 1
  %69 = bitcast i32** %68 to i64*
  store i64 %67, i64* %69, align 8
  %70 = bitcast i32* %64 to i8*
  tail call void @_ZdlPv(i8* %70) #14
  br label %71

71:                                               ; preds = %62, %66
  %72 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 1, i32 0, i32 0
  %73 = load i32*, i32** %72, align 8
  %74 = icmp eq i32* %73, null
  br i1 %74, label %80, label %75

75:                                               ; preds = %71
  %76 = ptrtoint i32* %73 to i64
  %77 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::HashChain", %"struct.jxl::(anonymous namespace)::HashChain"* %0, i64 0, i32 1, i32 0, i32 1
  %78 = bitcast i32** %77 to i64*
  store i64 %76, i64* %78, align 8
  %79 = bitcast i32* %73 to i8*
  tail call void @_ZdlPv(i8* %79) #14
  br label %80

80:                                               ; preds = %71, %75
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.11"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #12
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.11"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.11"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #13
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #13
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #14
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #12
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #12
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #14
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi(%"class.std::__1::vector.128"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !61

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !62
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !62
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !65, !noalias !62
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !65, !noalias !62
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !65, !noalias !62
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !65, !noalias !62
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !67

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !62
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !65, !noalias !62
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !65, !noalias !62
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !68

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.128"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.128"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #13
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 4611686018427387903
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #13
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 4611686018427387903, %139 ]
  %153 = shl i64 %152, 2
  %154 = tail call i8* @_Znwm(i64 %153) #14
  %155 = bitcast i8* %154 to i32*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i32* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 %134
  %160 = getelementptr inbounds i32, i32* %158, i64 %157
  %161 = getelementptr inbounds i32, i32* %159, i64 %1
  %162 = shl nsw i64 %1, 2
  %163 = add i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i32* %159 to i8*
  %169 = shl nsw i64 %1, 2
  %170 = add i64 %169, -4
  %171 = lshr exact i64 %170, 2
  %172 = add nsw i64 %134, %171
  %173 = add i64 %172, 1
  %174 = getelementptr i32, i32* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i32* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 9223372036854775800
  %181 = getelementptr i32, i32* %159, i64 %180
  %182 = add nsw i64 %180, -8
  %183 = lshr exact i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i32, i32* %2, align 4, !alias.scope !69
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = load i32, i32* %2, align 4, !alias.scope !69
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x i32> undef, i32 %194, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i32, i32* %159, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !72, !noalias !69
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !72, !noalias !69
  %206 = or i64 %200, 8
  %207 = getelementptr i32, i32* %159, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !72, !noalias !69
  %209 = getelementptr i32, i32* %207, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %210, align 4, !alias.scope !72, !noalias !69
  %211 = add i64 %200, 16
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !74

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i32, i32* %159, i64 %215
  %219 = load i32, i32* %2, align 4, !alias.scope !69
  %220 = insertelement <4 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x i32> undef, i32 %219, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !72, !noalias !69
  %225 = getelementptr i32, i32* %218, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4, !alias.scope !72, !noalias !69
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i32* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i32* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i32, i32* %158, i64 %233
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i32* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i32, i32* %2, align 4
  store i32 %244, i32* %242, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !75

248:                                              ; preds = %241, %229
  %249 = phi i32* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 28
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i32* [ %268, %251 ], [ %249, %248 ]
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %252, i64 1
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %252, i64 2
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %252, i64 3
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 4
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %252, i64 5
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %252, i64 6
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 7
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %252, i64 8
  %269 = icmp eq i32* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !76

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i32* %160 to i64
  %272 = ptrtoint i32* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %0, i64 0, i32 0, i32 0
  %274 = load i32*, i32** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i32* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 2
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = ptrtoint i32* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i32* %280 to i8*
  %285 = bitcast i32* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %277, i1 false) #12
  %286 = load i32*, i32** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i32* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #14
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.std::__1::__hash_node_base"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIiiEENS_22__unordered_map_hasherIiS2_NS_4hashIiEENS_8equal_toIiEELb1EEENS_21__unordered_map_equalIiS2_S7_S5_Lb1EEENS_9allocatorIS2_EEE25__emplace_unique_key_argsIiJRKNS_21piecewise_construct_tENS_5tupleIJRKiEEENSI_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS2_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table"*, i32* dereferenceable(4), %"struct.std::__1::piecewise_construct_t"* dereferenceable(1), %"class.std::__1::tuple"* dereferenceable(8), %"class.std::__1::tuple.230"* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %6 = load i32, i32* %1, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %55, label %11

11:                                               ; preds = %5
  %12 = tail call i64 @llvm.ctpop.i64(i64 %9) #12, !range !2
  %13 = icmp ugt i64 %12, 1
  br i1 %13, label %17, label %14

14:                                               ; preds = %11
  %15 = add i64 %9, -1
  %16 = and i64 %15, %7
  br label %21

17:                                               ; preds = %11
  %18 = icmp ugt i64 %9, %7
  br i1 %18, label %21, label %19

19:                                               ; preds = %17
  %20 = urem i64 %7, %9
  br label %21

21:                                               ; preds = %14, %17, %19
  %22 = phi i64 [ %16, %14 ], [ %20, %19 ], [ %7, %17 ]
  %23 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %24 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %23, align 8
  %25 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %24, i64 %22
  %26 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %25, align 8
  %27 = icmp eq %"struct.std::__1::__hash_node_base"* %26, null
  br i1 %27, label %55, label %28

28:                                               ; preds = %21
  %29 = add i64 %9, -1
  br label %30

30:                                               ; preds = %28, %50
  %31 = phi %"struct.std::__1::__hash_node_base"* [ %33, %50 ], [ %26, %28 ]
  %32 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %31, i64 0, i32 0
  %33 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %32, align 8
  %34 = icmp eq %"struct.std::__1::__hash_node_base"* %33, null
  br i1 %34, label %55, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %33, i64 1
  %37 = bitcast %"struct.std::__1::__hash_node_base"* %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = icmp eq i64 %38, %7
  br i1 %39, label %50, label %40

40:                                               ; preds = %35
  br i1 %13, label %43, label %41

41:                                               ; preds = %40
  %42 = and i64 %38, %29
  br label %47

43:                                               ; preds = %40
  %44 = icmp ult i64 %38, %9
  br i1 %44, label %47, label %45

45:                                               ; preds = %43
  %46 = urem i64 %38, %9
  br label %47

47:                                               ; preds = %41, %43, %45
  %48 = phi i64 [ %42, %41 ], [ %46, %45 ], [ %38, %43 ]
  %49 = icmp eq i64 %48, %22
  br i1 %49, label %50, label %55

50:                                               ; preds = %35, %47
  %51 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %33, i64 2
  %52 = bitcast %"struct.std::__1::__hash_node_base"* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %53, %6
  br i1 %54, label %146, label %30

55:                                               ; preds = %30, %47, %21, %5
  %56 = phi i64 [ %22, %21 ], [ -6148914691236517206, %5 ], [ %22, %47 ], [ %22, %30 ]
  %57 = tail call i8* @_Znwm(i64 24) #14, !noalias !77
  %58 = getelementptr inbounds i8, i8* %57, i64 16
  %59 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %3, i64 0, i32 0, i32 0, i32 0
  %60 = load i32*, i32** %59, align 8, !noalias !77
  %61 = bitcast i8* %58 to i32*
  %62 = load i32, i32* %60, align 4, !noalias !77
  store i32 %62, i32* %61, align 4, !noalias !77
  %63 = getelementptr inbounds i8, i8* %57, i64 20
  %64 = bitcast i8* %63 to i32*
  store i32 0, i32* %64, align 4, !noalias !77
  %65 = getelementptr inbounds i8, i8* %57, i64 8
  %66 = bitcast i8* %65 to i64*
  store i64 %7, i64* %66, align 8, !noalias !77
  %67 = bitcast i8* %57 to %"struct.std::__1::__hash_node_base"**
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %67, align 8, !noalias !77
  %68 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 2, i32 0, i32 0
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, 1
  %71 = uitofp i64 %70 to float
  %72 = uitofp i64 %9 to float
  %73 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 3, i32 0, i32 0
  %74 = load float, float* %73, align 4
  %75 = fmul float %74, %72
  %76 = fcmp olt float %75, %71
  %77 = or i1 %10, %76
  br i1 %77, label %78, label %101

78:                                               ; preds = %55
  %79 = shl i64 %9, 1
  %80 = icmp ult i64 %9, 3
  %81 = tail call i64 @llvm.ctpop.i64(i64 %9) #12, !range !2
  %82 = icmp ugt i64 %81, 1
  %83 = or i1 %80, %82
  %84 = zext i1 %83 to i64
  %85 = or i64 %79, %84
  %86 = fdiv float %71, %74
  %87 = tail call float @llvm.ceil.f32(float %86) #12
  %88 = fptoui float %87 to i64
  %89 = icmp ult i64 %85, %88
  %90 = select i1 %89, i64 %88, i64 %85
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIiiEENS_22__unordered_map_hasherIiS2_NS_4hashIiEENS_8equal_toIiEELb1EEENS_21__unordered_map_equalIiS2_S7_S5_Lb1EEENS_9allocatorIS2_EEE6rehashEm(%"class.std::__1::__hash_table"* %0, i64 %90)
  %91 = load i64, i64* %8, align 8
  %92 = tail call i64 @llvm.ctpop.i64(i64 %91) #12, !range !2
  %93 = icmp ugt i64 %92, 1
  br i1 %93, label %97, label %94

94:                                               ; preds = %78
  %95 = add i64 %91, -1
  %96 = and i64 %95, %7
  br label %101

97:                                               ; preds = %78
  %98 = icmp ugt i64 %91, %7
  br i1 %98, label %101, label %99

99:                                               ; preds = %97
  %100 = urem i64 %7, %91
  br label %101

101:                                              ; preds = %99, %97, %94, %55
  %102 = phi i64 [ %9, %55 ], [ %91, %94 ], [ %91, %97 ], [ %91, %99 ]
  %103 = phi i64 [ %56, %55 ], [ %96, %94 ], [ %7, %97 ], [ %100, %99 ]
  %104 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %105 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %104, align 8
  %106 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %105, i64 %103
  %107 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %106, align 8
  %108 = icmp eq %"struct.std::__1::__hash_node_base"* %107, null
  br i1 %108, label %109, label %135

109:                                              ; preds = %101
  %110 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 0, i32 0
  %111 = bitcast %"struct.std::__1::__hash_node_base"* %110 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = bitcast i8* %57 to i64*
  store i64 %112, i64* %113, align 8
  %114 = bitcast %"struct.std::__1::__hash_node_base"* %110 to i8**
  store i8* %57, i8** %114, align 8
  store %"struct.std::__1::__hash_node_base"* %110, %"struct.std::__1::__hash_node_base"** %106, align 8
  %115 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %67, align 8
  %116 = icmp eq %"struct.std::__1::__hash_node_base"* %115, null
  br i1 %116, label %142, label %117

117:                                              ; preds = %109
  %118 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %115, i64 1
  %119 = bitcast %"struct.std::__1::__hash_node_base"* %118 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = tail call i64 @llvm.ctpop.i64(i64 %102) #12, !range !2
  %122 = icmp ugt i64 %121, 1
  br i1 %122, label %126, label %123

123:                                              ; preds = %117
  %124 = add i64 %102, -1
  %125 = and i64 %120, %124
  br label %130

126:                                              ; preds = %117
  %127 = icmp ult i64 %120, %102
  br i1 %127, label %130, label %128

128:                                              ; preds = %126
  %129 = urem i64 %120, %102
  br label %130

130:                                              ; preds = %123, %126, %128
  %131 = phi i64 [ %125, %123 ], [ %129, %128 ], [ %120, %126 ]
  %132 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %104, align 8
  %133 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %132, i64 %131
  %134 = bitcast %"struct.std::__1::__hash_node_base"** %133 to i8**
  br label %140

135:                                              ; preds = %101
  %136 = bitcast %"struct.std::__1::__hash_node_base"* %107 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = bitcast i8* %57 to i64*
  store i64 %137, i64* %138, align 8
  %139 = bitcast %"struct.std::__1::__hash_node_base"* %107 to i8**
  br label %140

140:                                              ; preds = %130, %135
  %141 = phi i8** [ %139, %135 ], [ %134, %130 ]
  store i8* %57, i8** %141, align 8
  br label %142

142:                                              ; preds = %140, %109
  %143 = bitcast i8* %57 to %"struct.std::__1::__hash_node_base"*
  %144 = load i64, i64* %68, align 8
  %145 = add i64 %144, 1
  store i64 %145, i64* %68, align 8
  br label %146

146:                                              ; preds = %50, %142
  %147 = phi i8 [ 1, %142 ], [ 0, %50 ]
  %148 = phi %"struct.std::__1::__hash_node_base"* [ %143, %142 ], [ %33, %50 ]
  %149 = insertvalue { %"struct.std::__1::__hash_node_base"*, i8 } undef, %"struct.std::__1::__hash_node_base"* %148, 0
  %150 = insertvalue { %"struct.std::__1::__hash_node_base"*, i8 } %149, i8 %147, 1
  ret { %"struct.std::__1::__hash_node_base"*, i8 } %150
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIiiEENS_22__unordered_map_hasherIiS2_NS_4hashIiEENS_8equal_toIiEELb1EEENS_21__unordered_map_equalIiS2_S7_S5_Lb1EEENS_9allocatorIS2_EEE6rehashEm(%"class.std::__1::__hash_table"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 1
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = tail call i64 @llvm.ctpop.i64(i64 %1), !range !2
  %6 = icmp ugt i64 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %1) #12
  br label %9

9:                                                ; preds = %2, %4, %7
  %10 = phi i64 [ %8, %7 ], [ %1, %4 ], [ 2, %2 ]
  %11 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %10, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIiiEENS_22__unordered_map_hasherIiS2_NS_4hashIiEENS_8equal_toIiEELb1EEENS_21__unordered_map_equalIiS2_S7_S5_Lb1EEENS_9allocatorIS2_EEE8__rehashEm(%"class.std::__1::__hash_table"* %0, i64 %10)
  br label %45

15:                                               ; preds = %9
  %16 = icmp ult i64 %10, %12
  br i1 %16, label %17, label %45

17:                                               ; preds = %15
  %18 = icmp ugt i64 %12, 2
  %19 = tail call i64 @llvm.ctpop.i64(i64 %12) #12, !range !2
  %20 = icmp ult i64 %19, 2
  %21 = and i1 %18, %20
  %22 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 2, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = uitofp i64 %23 to float
  %25 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 3, i32 0, i32 0
  %26 = load float, float* %25, align 4
  %27 = fdiv float %24, %26
  %28 = tail call float @llvm.ceil.f32(float %27) #12
  %29 = fptoui float %28 to i64
  br i1 %21, label %30, label %37

30:                                               ; preds = %17
  %31 = icmp ult i64 %29, 2
  br i1 %31, label %39, label %32

32:                                               ; preds = %30
  %33 = add i64 %29, -1
  %34 = tail call i64 @llvm.ctlz.i64(i64 %33, i1 true) #12, !range !2
  %35 = sub nuw nsw i64 64, %34
  %36 = shl i64 1, %35
  br label %39

37:                                               ; preds = %17
  %38 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %29) #12
  br label %39

39:                                               ; preds = %32, %30, %37
  %40 = phi i64 [ %38, %37 ], [ %36, %32 ], [ %29, %30 ]
  %41 = icmp ult i64 %10, %40
  %42 = select i1 %41, i64 %40, i64 %10
  %43 = icmp ult i64 %42, %12
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIiiEENS_22__unordered_map_hasherIiS2_NS_4hashIiEENS_8equal_toIiEELb1EEENS_21__unordered_map_equalIiS2_S7_S5_Lb1EEENS_9allocatorIS2_EEE8__rehashEm(%"class.std::__1::__hash_table"* %0, i64 %42)
  br label %45

45:                                               ; preds = %15, %44, %39, %14
  ret void
}

declare i64 @_ZNSt3__112__next_primeEm(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIiiEENS_22__unordered_map_hasherIiS2_NS_4hashIiEENS_8equal_toIiEELb1EEENS_21__unordered_map_equalIiS2_S7_S5_Lb1EEENS_9allocatorIS2_EEE8__rehashEm(%"class.std::__1::__hash_table"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %134, label %5

5:                                                ; preds = %2
  %6 = icmp ugt i64 %1, 2305843009213693951
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @abort() #13
  unreachable

8:                                                ; preds = %5
  %9 = shl i64 %1, 3
  %10 = tail call i8* @_Znwm(i64 %9) #14
  %11 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %13 = bitcast %"class.std::__1::__hash_table"* %0 to i8**
  store i8* %10, i8** %13, align 8
  %14 = icmp eq %"struct.std::__1::__hash_node_base"** %12, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %8
  %16 = bitcast %"struct.std::__1::__hash_node_base"** %12 to i8*
  tail call void @_ZdlPv(i8* %16) #14
  br label %17

17:                                               ; preds = %15, %8
  %18 = getelementptr inbounds %"class.std::__1::__bucket_list_deallocator", %"class.std::__1::__bucket_list_deallocator"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %18, align 8
  %19 = add i64 %1, -1
  %20 = and i64 %1, 3
  %21 = icmp ult i64 %19, 3
  br i1 %21, label %24, label %22

22:                                               ; preds = %17
  %23 = sub i64 %1, %20
  br label %40

24:                                               ; preds = %40, %17
  %25 = phi i64 [ 0, %17 ], [ %54, %40 ]
  %26 = icmp eq i64 %20, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %24, %27
  %28 = phi i64 [ %32, %27 ], [ %25, %24 ]
  %29 = phi i64 [ %33, %27 ], [ %20, %24 ]
  %30 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %31 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %30, i64 %28
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %31, align 8
  %32 = add nuw i64 %28, 1
  %33 = add i64 %29, -1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %27, !llvm.loop !80

35:                                               ; preds = %27, %24
  %36 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 0, i32 0
  %37 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %36, i64 0, i32 0
  %38 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %37, align 8
  %39 = icmp eq %"struct.std::__1::__hash_node_base"* %38, null
  br i1 %39, label %142, label %57

40:                                               ; preds = %40, %22
  %41 = phi i64 [ 0, %22 ], [ %54, %40 ]
  %42 = phi i64 [ %23, %22 ], [ %55, %40 ]
  %43 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %44 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %43, i64 %41
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %44, align 8
  %45 = or i64 %41, 1
  %46 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %47 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %46, i64 %45
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %47, align 8
  %48 = or i64 %41, 2
  %49 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %50 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %49, i64 %48
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %50, align 8
  %51 = or i64 %41, 3
  %52 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %53 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %52, i64 %51
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %53, align 8
  %54 = add nuw i64 %41, 4
  %55 = add i64 %42, -4
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %24, label %40

57:                                               ; preds = %35
  %58 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %38, i64 1
  %59 = bitcast %"struct.std::__1::__hash_node_base"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = tail call i64 @llvm.ctpop.i64(i64 %1) #12, !range !2
  %62 = icmp ugt i64 %61, 1
  br i1 %62, label %66, label %63

63:                                               ; preds = %57
  %64 = add i64 %1, -1
  %65 = and i64 %60, %64
  br label %70

66:                                               ; preds = %57
  %67 = icmp ult i64 %60, %1
  br i1 %67, label %70, label %68

68:                                               ; preds = %66
  %69 = urem i64 %60, %1
  br label %70

70:                                               ; preds = %63, %66, %68
  %71 = phi i64 [ %65, %63 ], [ %69, %68 ], [ %60, %66 ]
  %72 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %73 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %72, i64 %71
  store %"struct.std::__1::__hash_node_base"* %36, %"struct.std::__1::__hash_node_base"** %73, align 8
  %74 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %38, i64 0, i32 0
  %75 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %74, align 8
  %76 = icmp eq %"struct.std::__1::__hash_node_base"* %75, null
  br i1 %76, label %142, label %77

77:                                               ; preds = %70
  %78 = add i64 %1, -1
  br label %79

79:                                               ; preds = %77, %128
  %80 = phi %"struct.std::__1::__hash_node_base"* [ %75, %77 ], [ %132, %128 ]
  %81 = phi i64 [ %71, %77 ], [ %130, %128 ]
  %82 = phi %"struct.std::__1::__hash_node_base"* [ %38, %77 ], [ %129, %128 ]
  %83 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %80, i64 1
  %84 = bitcast %"struct.std::__1::__hash_node_base"* %83 to i64*
  %85 = load i64, i64* %84, align 8
  br i1 %62, label %88, label %86

86:                                               ; preds = %79
  %87 = and i64 %85, %78
  br label %92

88:                                               ; preds = %79
  %89 = icmp ult i64 %85, %1
  br i1 %89, label %92, label %90

90:                                               ; preds = %88
  %91 = urem i64 %85, %1
  br label %92

92:                                               ; preds = %86, %88, %90
  %93 = phi i64 [ %87, %86 ], [ %91, %90 ], [ %85, %88 ]
  %94 = icmp eq i64 %93, %81
  br i1 %94, label %128, label %95

95:                                               ; preds = %92
  %96 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %97 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %96, i64 %93
  %98 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %97, align 8
  %99 = icmp eq %"struct.std::__1::__hash_node_base"* %98, null
  br i1 %99, label %103, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %80, i64 2
  %102 = bitcast %"struct.std::__1::__hash_node_base"* %101 to i32*
  br label %104

103:                                              ; preds = %95
  store %"struct.std::__1::__hash_node_base"* %82, %"struct.std::__1::__hash_node_base"** %97, align 8
  br label %128

104:                                              ; preds = %100, %109
  %105 = phi %"struct.std::__1::__hash_node_base"* [ %107, %109 ], [ %80, %100 ]
  %106 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %105, i64 0, i32 0
  %107 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %106, align 8
  %108 = icmp eq %"struct.std::__1::__hash_node_base"* %107, null
  br i1 %108, label %115, label %109

109:                                              ; preds = %104
  %110 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %107, i64 2
  %111 = bitcast %"struct.std::__1::__hash_node_base"* %110 to i32*
  %112 = load i32, i32* %102, align 4
  %113 = load i32, i32* %111, align 4
  %114 = icmp eq i32 %112, %113
  br i1 %114, label %104, label %115

115:                                              ; preds = %104, %109
  %116 = ptrtoint %"struct.std::__1::__hash_node_base"* %107 to i64
  %117 = bitcast %"struct.std::__1::__hash_node_base"* %105 to i64*
  %118 = bitcast %"struct.std::__1::__hash_node_base"* %82 to i64*
  store i64 %116, i64* %118, align 8
  %119 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %120 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %119, i64 %93
  %121 = bitcast %"struct.std::__1::__hash_node_base"** %120 to i64**
  %122 = load i64*, i64** %121, align 8
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %117, align 8
  %124 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %125 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %124, i64 %93
  %126 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %125, align 8
  %127 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %126, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base"* %80, %"struct.std::__1::__hash_node_base"** %127, align 8
  br label %128

128:                                              ; preds = %92, %115, %103
  %129 = phi %"struct.std::__1::__hash_node_base"* [ %80, %103 ], [ %82, %115 ], [ %80, %92 ]
  %130 = phi i64 [ %93, %103 ], [ %81, %115 ], [ %81, %92 ]
  %131 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %129, i64 0, i32 0
  %132 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %131, align 8
  %133 = icmp eq %"struct.std::__1::__hash_node_base"* %132, null
  br i1 %133, label %142, label %79

134:                                              ; preds = %2
  %135 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %136 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %135, align 8
  store %"struct.std::__1::__hash_node_base"** null, %"struct.std::__1::__hash_node_base"*** %135, align 8
  %137 = icmp eq %"struct.std::__1::__hash_node_base"** %136, null
  br i1 %137, label %140, label %138

138:                                              ; preds = %134
  %139 = bitcast %"struct.std::__1::__hash_node_base"** %136 to i8*
  tail call void @_ZdlPv(i8* %139) #14
  br label %140

140:                                              ; preds = %134, %138
  %141 = getelementptr inbounds %"class.std::__1::__bucket_list_deallocator", %"class.std::__1::__bucket_list_deallocator"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 0, i64* %141, align 8
  br label %142

142:                                              ; preds = %128, %70, %35, %140
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.11"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !81

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !82
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !82
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !85, !noalias !82
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !85, !noalias !82
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !85, !noalias !82
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !85, !noalias !82
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !87

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !82
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !85, !noalias !82
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !85, !noalias !82
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !88

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.11"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.11"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #13
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 4611686018427387903
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #13
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 4611686018427387903, %139 ]
  %153 = shl i64 %152, 2
  %154 = tail call i8* @_Znwm(i64 %153) #14
  %155 = bitcast i8* %154 to i32*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i32* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 %134
  %160 = getelementptr inbounds i32, i32* %158, i64 %157
  %161 = getelementptr inbounds i32, i32* %159, i64 %1
  %162 = shl nsw i64 %1, 2
  %163 = add i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i32* %159 to i8*
  %169 = shl nsw i64 %1, 2
  %170 = add i64 %169, -4
  %171 = lshr exact i64 %170, 2
  %172 = add nsw i64 %134, %171
  %173 = add i64 %172, 1
  %174 = getelementptr i32, i32* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i32* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 9223372036854775800
  %181 = getelementptr i32, i32* %159, i64 %180
  %182 = add nsw i64 %180, -8
  %183 = lshr exact i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i32, i32* %2, align 4, !alias.scope !89
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = load i32, i32* %2, align 4, !alias.scope !89
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x i32> undef, i32 %194, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i32, i32* %159, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !92, !noalias !89
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !92, !noalias !89
  %206 = or i64 %200, 8
  %207 = getelementptr i32, i32* %159, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !92, !noalias !89
  %209 = getelementptr i32, i32* %207, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %210, align 4, !alias.scope !92, !noalias !89
  %211 = add i64 %200, 16
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !94

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i32, i32* %159, i64 %215
  %219 = load i32, i32* %2, align 4, !alias.scope !89
  %220 = insertelement <4 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x i32> undef, i32 %219, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !92, !noalias !89
  %225 = getelementptr i32, i32* %218, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4, !alias.scope !92, !noalias !89
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i32* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i32* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i32, i32* %158, i64 %233
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i32* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i32, i32* %2, align 4
  store i32 %244, i32* %242, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !95

248:                                              ; preds = %241, %229
  %249 = phi i32* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 28
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i32* [ %268, %251 ], [ %249, %248 ]
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %252, i64 1
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %252, i64 2
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %252, i64 3
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 4
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %252, i64 5
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %252, i64 6
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 7
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %252, i64 8
  %269 = icmp eq i32* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !96

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i32* %160 to i64
  %272 = ptrtoint i32* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 0
  %274 = load i32*, i32** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i32* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 2
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = ptrtoint i32* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i32* %280 to i8*
  %285 = bitcast i32* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %277, i1 false) #12
  %286 = load i32*, i32** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i32* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #14
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.128"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #12
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.128"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.128"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #13
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #13
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #14
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #12
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.128", %"class.std::__1::vector.128"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #12
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #14
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEEC2ERKS5_(%"class.std::__1::vector.170"*, %"class.std::__1::vector.170"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::vector.170"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #12
  %4 = getelementptr inbounds %"class.std::__1::vector.170", %"class.std::__1::vector.170"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"struct.jxl::Histogram"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.170"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 40
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %83, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 461168601842738790
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector.170"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #13
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #14
  %18 = bitcast i8* %17 to %"struct.jxl::Histogram"*
  %19 = getelementptr inbounds %"class.std::__1::vector.170", %"class.std::__1::vector.170"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"struct.jxl::Histogram"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector.170"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %18, i64 %10
  %23 = getelementptr inbounds %"class.std::__1::vector.170", %"class.std::__1::vector.170"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::Histogram"* %22, %"struct.jxl::Histogram"** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.170", %"class.std::__1::vector.170"* %1, i64 0, i32 0, i32 0
  %25 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %24, align 8
  %26 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %4, align 8
  %27 = bitcast %"struct.jxl::Histogram"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %"struct.jxl::Histogram"* %25, %26
  br i1 %29, label %81, label %30

30:                                               ; preds = %16
  %31 = bitcast i8* %17 to %"struct.jxl::Histogram"*
  br label %32

32:                                               ; preds = %71, %30
  %33 = phi %"struct.jxl::Histogram"* [ %77, %71 ], [ %31, %30 ]
  %34 = phi %"struct.jxl::Histogram"* [ %76, %71 ], [ %25, %30 ]
  %35 = bitcast %"struct.jxl::Histogram"* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #12
  %36 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %34, i64 0, i32 0, i32 0, i32 1
  %37 = bitcast i32** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"struct.jxl::Histogram"* %34 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = ashr exact i64 %41, 2
  %43 = icmp eq i64 %41, 0
  br i1 %43, label %71, label %44

44:                                               ; preds = %32
  %45 = icmp ugt i64 %42, 4611686018427387903
  br i1 %45, label %46, label %48

46:                                               ; preds = %44
  %47 = bitcast %"struct.jxl::Histogram"* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %47) #13
  unreachable

48:                                               ; preds = %44
  %49 = tail call i8* @_Znwm(i64 %41) #14
  %50 = bitcast i8* %49 to i32*
  %51 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %33, i64 0, i32 0, i32 0, i32 1
  %52 = bitcast i32** %51 to i8**
  store i8* %49, i8** %52, align 8
  %53 = bitcast %"struct.jxl::Histogram"* %33 to i8**
  store i8* %49, i8** %53, align 8
  %54 = getelementptr inbounds i32, i32* %50, i64 %42
  %55 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %33, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store i32* %54, i32** %55, align 8
  %56 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %34, i64 0, i32 0, i32 0, i32 0
  %57 = load i32*, i32** %56, align 8
  %58 = load i64, i64* %37, align 8
  %59 = bitcast i32** %51 to i64*
  %60 = ptrtoint i8* %49 to i64
  %61 = ptrtoint i32* %57 to i64
  %62 = sub i64 %58, %61
  %63 = icmp sgt i64 %62, 0
  br i1 %63, label %64, label %69

64:                                               ; preds = %48
  %65 = lshr exact i64 %62, 2
  %66 = bitcast i32* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %49, i8* align 4 %66, i64 %62, i1 false) #12
  %67 = getelementptr inbounds i32, i32* %50, i64 %65
  %68 = ptrtoint i32* %67 to i64
  br label %69

69:                                               ; preds = %64, %48
  %70 = phi i64 [ %68, %64 ], [ %60, %48 ]
  store i64 %70, i64* %59, align 8
  br label %71

71:                                               ; preds = %69, %32
  %72 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %33, i64 0, i32 1
  %73 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %34, i64 0, i32 1
  %74 = bitcast i64* %72 to i8*
  %75 = bitcast i64* %73 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 12, i1 false) #12
  %76 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %34, i64 1
  %77 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %33, i64 1
  %78 = icmp eq %"struct.jxl::Histogram"* %76, %26
  br i1 %78, label %79, label %32

79:                                               ; preds = %71
  %80 = ptrtoint %"struct.jxl::Histogram"* %77 to i64
  br label %81

81:                                               ; preds = %16, %79
  %82 = phi i64 [ %28, %16 ], [ %80, %79 ]
  store i64 %82, i64* %27, align 8
  br label %83

83:                                               ; preds = %2, %81
  ret void
}

declare void @_ZN3jxl17ClusterHistogramsENS_15HistogramParamsERKNSt3__16vectorINS_9HistogramENS1_9allocatorIS3_EEEEmmPS6_PNS2_IjNS4_IjEEEE(%"struct.jxl::HistogramParams"*, %"class.std::__1::vector.170"* dereferenceable(24), i64, i64, %"class.std::__1::vector.170"*, %"class.std::__1::vector.11"*) local_unnamed_addr #2

declare void @_ZN3jxl16EncodeContextMapERKNSt3__16vectorIhNS0_9allocatorIhEEEEmPNS_9BitWriterE(%"class.std::__1::vector.18"* dereferenceable(24), i64, %"struct.jxl::BitWriter"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.18"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #12
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.18"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.18"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #13
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #14
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #12
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #12
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #14
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl16HybridUintConfigENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector"*, i64, %"struct.jxl::HybridUintConfig"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"struct.jxl::HybridUintConfig"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"struct.jxl::HybridUintConfig"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = ashr exact i64 %10, 4
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %50, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"struct.jxl::HybridUintConfig"*
  %15 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %48, label %17

17:                                               ; preds = %13
  %18 = bitcast %"struct.jxl::HybridUintConfig"* %2 to i8*
  %19 = shl nsw i64 %1, 4
  %20 = add i64 %19, -16
  %21 = lshr exact i64 %20, 4
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %17, %25
  %26 = phi %"struct.jxl::HybridUintConfig"* [ %29, %25 ], [ %14, %17 ]
  %27 = phi i64 [ %30, %25 ], [ %23, %17 ]
  %28 = bitcast %"struct.jxl::HybridUintConfig"* %26 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %28, i8* align 4 %18, i64 16, i1 false) #12
  %29 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %26, i64 1
  %30 = add i64 %27, -1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %25, !llvm.loop !97

32:                                               ; preds = %25, %17
  %33 = phi %"struct.jxl::HybridUintConfig"* [ %14, %17 ], [ %29, %25 ]
  %34 = icmp ult i64 %20, 48
  br i1 %34, label %35, label %37

35:                                               ; preds = %37, %32
  %36 = ptrtoint %"struct.jxl::HybridUintConfig"* %15 to i64
  br label %48

37:                                               ; preds = %32, %37
  %38 = phi %"struct.jxl::HybridUintConfig"* [ %46, %37 ], [ %33, %32 ]
  %39 = bitcast %"struct.jxl::HybridUintConfig"* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %18, i64 16, i1 false) #12
  %40 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %38, i64 1
  %41 = bitcast %"struct.jxl::HybridUintConfig"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %18, i64 16, i1 false) #12
  %42 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %38, i64 2
  %43 = bitcast %"struct.jxl::HybridUintConfig"* %42 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %43, i8* align 4 %18, i64 16, i1 false) #12
  %44 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %38, i64 3
  %45 = bitcast %"struct.jxl::HybridUintConfig"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %45, i8* align 4 %18, i64 16, i1 false) #12
  %46 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %38, i64 4
  %47 = icmp eq %"struct.jxl::HybridUintConfig"* %46, %15
  br i1 %47, label %35, label %37

48:                                               ; preds = %13, %35
  %49 = phi i64 [ %36, %35 ], [ %9, %13 ]
  store i64 %49, i64* %8, align 8
  br label %132

50:                                               ; preds = %3
  %51 = bitcast %"class.std::__1::vector"* %0 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %9, %52
  %54 = ashr exact i64 %53, 4
  %55 = add i64 %54, %1
  %56 = icmp ugt i64 %55, 1152921504606846975
  br i1 %56, label %57, label %59

57:                                               ; preds = %50
  %58 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %58) #13
  unreachable

59:                                               ; preds = %50
  %60 = sub i64 %6, %52
  %61 = ashr exact i64 %60, 4
  %62 = icmp ult i64 %61, 576460752303423487
  br i1 %62, label %63, label %71

63:                                               ; preds = %59
  %64 = ashr exact i64 %60, 3
  %65 = icmp ult i64 %64, %55
  %66 = select i1 %65, i64 %55, i64 %64
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %76, label %68

68:                                               ; preds = %63
  %69 = icmp ugt i64 %66, 1152921504606846975
  br i1 %69, label %70, label %71

70:                                               ; preds = %68
  tail call void @abort() #13
  unreachable

71:                                               ; preds = %59, %68
  %72 = phi i64 [ %66, %68 ], [ 1152921504606846975, %59 ]
  %73 = shl i64 %72, 4
  %74 = tail call i8* @_Znwm(i64 %73) #14
  %75 = bitcast i8* %74 to %"struct.jxl::HybridUintConfig"*
  br label %76

76:                                               ; preds = %71, %63
  %77 = phi i64 [ %72, %71 ], [ 0, %63 ]
  %78 = phi %"struct.jxl::HybridUintConfig"* [ %75, %71 ], [ null, %63 ]
  %79 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %78, i64 %54
  %80 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %78, i64 %77
  %81 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %79, i64 %1
  %82 = bitcast %"struct.jxl::HybridUintConfig"* %2 to i8*
  %83 = shl nsw i64 %1, 4
  %84 = add i64 %83, -16
  %85 = lshr exact i64 %84, 4
  %86 = add nuw nsw i64 %85, 1
  %87 = and i64 %86, 3
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %96, label %89

89:                                               ; preds = %76, %89
  %90 = phi %"struct.jxl::HybridUintConfig"* [ %93, %89 ], [ %79, %76 ]
  %91 = phi i64 [ %94, %89 ], [ %87, %76 ]
  %92 = bitcast %"struct.jxl::HybridUintConfig"* %90 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %92, i8* align 4 %82, i64 16, i1 false) #12
  %93 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %90, i64 1
  %94 = add i64 %91, -1
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %89, !llvm.loop !98

96:                                               ; preds = %89, %76
  %97 = phi %"struct.jxl::HybridUintConfig"* [ %79, %76 ], [ %93, %89 ]
  %98 = icmp ult i64 %84, 48
  br i1 %98, label %110, label %99

99:                                               ; preds = %96, %99
  %100 = phi %"struct.jxl::HybridUintConfig"* [ %108, %99 ], [ %97, %96 ]
  %101 = bitcast %"struct.jxl::HybridUintConfig"* %100 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %101, i8* align 4 %82, i64 16, i1 false) #12
  %102 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %100, i64 1
  %103 = bitcast %"struct.jxl::HybridUintConfig"* %102 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %103, i8* align 4 %82, i64 16, i1 false) #12
  %104 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %100, i64 2
  %105 = bitcast %"struct.jxl::HybridUintConfig"* %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %105, i8* align 4 %82, i64 16, i1 false) #12
  %106 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %100, i64 3
  %107 = bitcast %"struct.jxl::HybridUintConfig"* %106 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %107, i8* align 4 %82, i64 16, i1 false) #12
  %108 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %100, i64 4
  %109 = icmp eq %"struct.jxl::HybridUintConfig"* %81, %108
  br i1 %109, label %110, label %99

110:                                              ; preds = %99, %96
  %111 = ptrtoint %"struct.jxl::HybridUintConfig"* %80 to i64
  %112 = ptrtoint %"struct.jxl::HybridUintConfig"* %81 to i64
  %113 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %114 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %113, align 8
  %115 = load i64, i64* %8, align 8
  %116 = ptrtoint %"struct.jxl::HybridUintConfig"* %114 to i64
  %117 = sub i64 %115, %116
  %118 = ashr exact i64 %117, 4
  %119 = sub nsw i64 0, %118
  %120 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %79, i64 %119
  %121 = ptrtoint %"struct.jxl::HybridUintConfig"* %120 to i64
  %122 = icmp sgt i64 %117, 0
  br i1 %122, label %123, label %127

123:                                              ; preds = %110
  %124 = bitcast %"struct.jxl::HybridUintConfig"* %120 to i8*
  %125 = bitcast %"struct.jxl::HybridUintConfig"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %124, i8* align 4 %125, i64 %117, i1 false) #12
  %126 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %113, align 8
  br label %127

127:                                              ; preds = %110, %123
  %128 = phi %"struct.jxl::HybridUintConfig"* [ %114, %110 ], [ %126, %123 ]
  store i64 %121, i64* %51, align 8
  store i64 %112, i64* %8, align 8
  store i64 %111, i64* %5, align 8
  %129 = icmp eq %"struct.jxl::HybridUintConfig"* %128, null
  br i1 %129, label %132, label %130

130:                                              ; preds = %127
  %131 = bitcast %"struct.jxl::HybridUintConfig"* %128 to i8*
  tail call void @_ZdlPv(i8* %131) #14
  br label %132

132:                                              ; preds = %130, %127, %48
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl16HybridUintConfigENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::HybridUintConfig"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::HybridUintConfig"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 4
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %56, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::HybridUintConfig"*
  %14 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %54, label %16

16:                                               ; preds = %12
  %17 = shl nsw i64 %1, 4
  %18 = add i64 %17, -16
  %19 = lshr exact i64 %18, 4
  %20 = add nuw nsw i64 %19, 1
  %21 = and i64 %20, 7
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %30, label %23

23:                                               ; preds = %16, %23
  %24 = phi %"struct.jxl::HybridUintConfig"* [ %27, %23 ], [ %13, %16 ]
  %25 = phi i64 [ %28, %23 ], [ %21, %16 ]
  %26 = bitcast %"struct.jxl::HybridUintConfig"* %24 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %26, align 4
  %27 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %24, i64 1
  %28 = add i64 %25, -1
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %23, !llvm.loop !99

30:                                               ; preds = %23, %16
  %31 = phi %"struct.jxl::HybridUintConfig"* [ %13, %16 ], [ %27, %23 ]
  %32 = icmp ult i64 %18, 112
  br i1 %32, label %33, label %35

33:                                               ; preds = %35, %30
  %34 = ptrtoint %"struct.jxl::HybridUintConfig"* %14 to i64
  br label %54

35:                                               ; preds = %30, %35
  %36 = phi %"struct.jxl::HybridUintConfig"* [ %52, %35 ], [ %31, %30 ]
  %37 = bitcast %"struct.jxl::HybridUintConfig"* %36 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %37, align 4
  %38 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 1
  %39 = bitcast %"struct.jxl::HybridUintConfig"* %38 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %39, align 4
  %40 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 2
  %41 = bitcast %"struct.jxl::HybridUintConfig"* %40 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %41, align 4
  %42 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 3
  %43 = bitcast %"struct.jxl::HybridUintConfig"* %42 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %43, align 4
  %44 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 4
  %45 = bitcast %"struct.jxl::HybridUintConfig"* %44 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %45, align 4
  %46 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 5
  %47 = bitcast %"struct.jxl::HybridUintConfig"* %46 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %47, align 4
  %48 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 6
  %49 = bitcast %"struct.jxl::HybridUintConfig"* %48 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %49, align 4
  %50 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 7
  %51 = bitcast %"struct.jxl::HybridUintConfig"* %50 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %51, align 4
  %52 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 8
  %53 = icmp eq %"struct.jxl::HybridUintConfig"* %52, %14
  br i1 %53, label %33, label %35

54:                                               ; preds = %12, %33
  %55 = phi i64 [ %34, %33 ], [ %8, %12 ]
  store i64 %55, i64* %7, align 8
  br label %145

56:                                               ; preds = %2
  %57 = bitcast %"class.std::__1::vector"* %0 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %8, %58
  %60 = ashr exact i64 %59, 4
  %61 = add i64 %60, %1
  %62 = icmp ugt i64 %61, 1152921504606846975
  br i1 %62, label %63, label %65

63:                                               ; preds = %56
  %64 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %64) #13
  unreachable

65:                                               ; preds = %56
  %66 = sub i64 %5, %58
  %67 = ashr exact i64 %66, 4
  %68 = icmp ult i64 %67, 576460752303423487
  br i1 %68, label %69, label %77

69:                                               ; preds = %65
  %70 = ashr exact i64 %66, 3
  %71 = icmp ult i64 %70, %61
  %72 = select i1 %71, i64 %61, i64 %70
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %82, label %74

74:                                               ; preds = %69
  %75 = icmp ugt i64 %72, 1152921504606846975
  br i1 %75, label %76, label %77

76:                                               ; preds = %74
  tail call void @abort() #13
  unreachable

77:                                               ; preds = %65, %74
  %78 = phi i64 [ %72, %74 ], [ 1152921504606846975, %65 ]
  %79 = shl i64 %78, 4
  %80 = tail call i8* @_Znwm(i64 %79) #14
  %81 = bitcast i8* %80 to %"struct.jxl::HybridUintConfig"*
  br label %82

82:                                               ; preds = %69, %77
  %83 = phi i64 [ %78, %77 ], [ 0, %69 ]
  %84 = phi %"struct.jxl::HybridUintConfig"* [ %81, %77 ], [ null, %69 ]
  %85 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %84, i64 %60
  %86 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %84, i64 %83
  %87 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %85, i64 %1
  %88 = shl nsw i64 %1, 4
  %89 = add i64 %88, -16
  %90 = lshr exact i64 %89, 4
  %91 = add nuw nsw i64 %90, 1
  %92 = and i64 %91, 7
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %101, label %94

94:                                               ; preds = %82, %94
  %95 = phi %"struct.jxl::HybridUintConfig"* [ %98, %94 ], [ %85, %82 ]
  %96 = phi i64 [ %99, %94 ], [ %92, %82 ]
  %97 = bitcast %"struct.jxl::HybridUintConfig"* %95 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %97, align 4
  %98 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %95, i64 1
  %99 = add i64 %96, -1
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %94, !llvm.loop !100

101:                                              ; preds = %94, %82
  %102 = phi %"struct.jxl::HybridUintConfig"* [ %85, %82 ], [ %98, %94 ]
  %103 = icmp ult i64 %89, 112
  br i1 %103, label %123, label %104

104:                                              ; preds = %101, %104
  %105 = phi %"struct.jxl::HybridUintConfig"* [ %121, %104 ], [ %102, %101 ]
  %106 = bitcast %"struct.jxl::HybridUintConfig"* %105 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %106, align 4
  %107 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 1
  %108 = bitcast %"struct.jxl::HybridUintConfig"* %107 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %108, align 4
  %109 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 2
  %110 = bitcast %"struct.jxl::HybridUintConfig"* %109 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %110, align 4
  %111 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 3
  %112 = bitcast %"struct.jxl::HybridUintConfig"* %111 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %112, align 4
  %113 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 4
  %114 = bitcast %"struct.jxl::HybridUintConfig"* %113 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %114, align 4
  %115 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 5
  %116 = bitcast %"struct.jxl::HybridUintConfig"* %115 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %116, align 4
  %117 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 6
  %118 = bitcast %"struct.jxl::HybridUintConfig"* %117 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %118, align 4
  %119 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 7
  %120 = bitcast %"struct.jxl::HybridUintConfig"* %119 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %120, align 4
  %121 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 8
  %122 = icmp eq %"struct.jxl::HybridUintConfig"* %87, %121
  br i1 %122, label %123, label %104

123:                                              ; preds = %104, %101
  %124 = ptrtoint %"struct.jxl::HybridUintConfig"* %86 to i64
  %125 = ptrtoint %"struct.jxl::HybridUintConfig"* %87 to i64
  %126 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %127 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %126, align 8
  %128 = load i64, i64* %7, align 8
  %129 = ptrtoint %"struct.jxl::HybridUintConfig"* %127 to i64
  %130 = sub i64 %128, %129
  %131 = ashr exact i64 %130, 4
  %132 = sub nsw i64 0, %131
  %133 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %85, i64 %132
  %134 = ptrtoint %"struct.jxl::HybridUintConfig"* %133 to i64
  %135 = icmp sgt i64 %130, 0
  br i1 %135, label %136, label %140

136:                                              ; preds = %123
  %137 = bitcast %"struct.jxl::HybridUintConfig"* %133 to i8*
  %138 = bitcast %"struct.jxl::HybridUintConfig"* %127 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %137, i8* align 4 %138, i64 %130, i1 false) #12
  %139 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %126, align 8
  br label %140

140:                                              ; preds = %123, %136
  %141 = phi %"struct.jxl::HybridUintConfig"* [ %127, %123 ], [ %139, %136 ]
  store i64 %134, i64* %57, align 8
  store i64 %125, i64* %7, align 8
  store i64 %124, i64* %4, align 8
  %142 = icmp eq %"struct.jxl::HybridUintConfig"* %141, null
  br i1 %142, label %145, label %143

143:                                              ; preds = %140
  %144 = bitcast %"struct.jxl::HybridUintConfig"* %141 to i8*
  tail call void @_ZdlPv(i8* %144) #14
  br label %145

145:                                              ; preds = %143, %140, %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl16HybridUintConfigENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector"*, %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"struct.jxl::HybridUintConfig"* %2 to i64
  %5 = ptrtoint %"struct.jxl::HybridUintConfig"* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 4
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"struct.jxl::HybridUintConfig"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 4
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"struct.jxl::HybridUintConfig"*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"struct.jxl::HybridUintConfig"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 4
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %1, i64 %22
  %25 = select i1 %23, %"struct.jxl::HybridUintConfig"* %24, %"struct.jxl::HybridUintConfig"* %2
  %26 = ptrtoint %"struct.jxl::HybridUintConfig"* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 4
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast %"struct.jxl::HybridUintConfig"* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #12
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 4
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast %"struct.jxl::HybridUintConfig"* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #12
  %42 = inttoptr i64 %35 to %"struct.jxl::HybridUintConfig"*
  %43 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %42, i64 %39
  %44 = ptrtoint %"struct.jxl::HybridUintConfig"* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %16, i64 %28
  store %"struct.jxl::HybridUintConfig"* %48, %"struct.jxl::HybridUintConfig"** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %53 = bitcast %"struct.jxl::HybridUintConfig"** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #14
  %55 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #12
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 1152921504606846975
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #13
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 4
  %63 = icmp ult i64 %62, 576460752303423487
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 3
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 1152921504606846975
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #13
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 1152921504606846975, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 4
  %74 = tail call i8* @_Znwm(i64 %73) #14
  %75 = bitcast i8* %74 to %"struct.jxl::HybridUintConfig"*
  %76 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %77 = bitcast %"struct.jxl::HybridUintConfig"** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %75, i64 %72
  store %"struct.jxl::HybridUintConfig"* %79, %"struct.jxl::HybridUintConfig"** %8, align 8
  %80 = bitcast %"struct.jxl::HybridUintConfig"** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 4
  %85 = bitcast %"struct.jxl::HybridUintConfig"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #12
  %86 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %75, i64 %84
  %87 = ptrtoint %"struct.jxl::HybridUintConfig"* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IN3jxl16ANSEncSymbolInfoENS_9allocatorIS2_EEEENS3_IS5_EEE24__emplace_back_slow_pathIJEEEvDpOT_(%"class.std::__1::vector.156"*) local_unnamed_addr #11 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %0, i64 0, i32 0, i32 1
  %3 = bitcast %"class.std::__1::vector.158"** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.std::__1::vector.156"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = sdiv exact i64 %7, 24
  %9 = add nsw i64 %8, 1
  %10 = icmp ugt i64 %9, 768614336404564650
  br i1 %10, label %11, label %13

11:                                               ; preds = %1
  %12 = bitcast %"class.std::__1::vector.156"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %12) #13
  unreachable

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %"class.std::__1::vector.158"** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %6
  %18 = sdiv exact i64 %17, 24
  %19 = icmp ult i64 %18, 384307168202282325
  br i1 %19, label %20, label %25

20:                                               ; preds = %13
  %21 = shl nsw i64 %18, 1
  %22 = icmp ult i64 %21, %9
  %23 = select i1 %22, i64 %9, i64 %21
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %13, %20
  %26 = phi i64 [ %23, %20 ], [ 768614336404564650, %13 ]
  %27 = mul i64 %26, 24
  %28 = tail call i8* @_Znwm(i64 %27) #14
  %29 = bitcast i8* %28 to %"class.std::__1::vector.158"*
  br label %30

30:                                               ; preds = %20, %25
  %31 = phi i64 [ %26, %25 ], [ 0, %20 ]
  %32 = phi %"class.std::__1::vector.158"* [ %29, %25 ], [ null, %20 ]
  %33 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %32, i64 %8
  %34 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %32, i64 %31
  %35 = ptrtoint %"class.std::__1::vector.158"* %34 to i64
  %36 = bitcast %"class.std::__1::vector.158"* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #12
  %37 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %33, i64 1
  %38 = ptrtoint %"class.std::__1::vector.158"* %37 to i64
  %39 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %0, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::vector.158"*, %"class.std::__1::vector.158"** %39, align 8
  %41 = load %"class.std::__1::vector.158"*, %"class.std::__1::vector.158"** %2, align 8
  %42 = icmp eq %"class.std::__1::vector.158"* %41, %40
  br i1 %42, label %43, label %45

43:                                               ; preds = %30
  %44 = ptrtoint %"class.std::__1::vector.158"* %40 to i64
  br label %69

45:                                               ; preds = %30, %45
  %46 = phi %"class.std::__1::vector.158"* [ %48, %45 ], [ %33, %30 ]
  %47 = phi %"class.std::__1::vector.158"* [ %49, %45 ], [ %41, %30 ]
  %48 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %46, i64 -1
  %49 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %47, i64 -1
  %50 = bitcast %"class.std::__1::vector.158"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 24, i1 false) #12
  %51 = bitcast %"class.std::__1::vector.158"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = bitcast %"class.std::__1::vector.158"* %48 to i64*
  store i64 %52, i64* %53, align 8
  %54 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %47, i64 -1, i32 0, i32 1
  %55 = bitcast %"struct.jxl::ANSEncSymbolInfo"** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %46, i64 -1, i32 0, i32 1
  %58 = bitcast %"struct.jxl::ANSEncSymbolInfo"** %57 to i64*
  store i64 %56, i64* %58, align 8
  %59 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %47, i64 -1, i32 0, i32 2, i32 0, i32 0
  %60 = bitcast %"struct.jxl::ANSEncSymbolInfo"** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %46, i64 -1, i32 0, i32 2, i32 0, i32 0
  %63 = bitcast %"struct.jxl::ANSEncSymbolInfo"** %62 to i64*
  store i64 %61, i64* %63, align 8
  %64 = bitcast %"class.std::__1::vector.158"* %49 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 24, i1 false) #12
  %65 = icmp eq %"class.std::__1::vector.158"* %49, %40
  br i1 %65, label %66, label %45

66:                                               ; preds = %45
  %67 = load i64, i64* %5, align 8
  %68 = load %"class.std::__1::vector.158"*, %"class.std::__1::vector.158"** %2, align 8
  br label %69

69:                                               ; preds = %43, %66
  %70 = phi %"class.std::__1::vector.158"* [ %40, %43 ], [ %68, %66 ]
  %71 = phi %"class.std::__1::vector.158"* [ %33, %43 ], [ %48, %66 ]
  %72 = phi i64 [ %44, %43 ], [ %67, %66 ]
  %73 = ptrtoint %"class.std::__1::vector.158"* %71 to i64
  store i64 %73, i64* %5, align 8
  store i64 %38, i64* %3, align 8
  store i64 %35, i64* %15, align 8
  %74 = inttoptr i64 %72 to %"class.std::__1::vector.158"*
  %75 = icmp eq %"class.std::__1::vector.158"* %70, %74
  br i1 %75, label %107, label %76

76:                                               ; preds = %69, %105
  %77 = phi %"class.std::__1::vector.158"* [ %78, %105 ], [ %70, %69 ]
  %78 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %77, i64 -1
  %79 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %78, i64 0, i32 0, i32 0
  %80 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %79, align 8
  %81 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %80, null
  br i1 %81, label %105, label %82

82:                                               ; preds = %76
  %83 = bitcast %"struct.jxl::ANSEncSymbolInfo"* %80 to i8*
  %84 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %77, i64 -1, i32 0, i32 1
  %85 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %84, align 8
  %86 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %85, %80
  br i1 %86, label %103, label %87

87:                                               ; preds = %82, %98
  %88 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %89, %98 ], [ %85, %82 ]
  %89 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %88, i64 -1
  %90 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %88, i64 -1, i32 2, i32 0, i32 0
  %91 = load i16*, i16** %90, align 8
  %92 = icmp eq i16* %91, null
  br i1 %92, label %98, label %93

93:                                               ; preds = %87
  %94 = ptrtoint i16* %91 to i64
  %95 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %88, i64 -1, i32 2, i32 0, i32 1
  %96 = bitcast i16** %95 to i64*
  store i64 %94, i64* %96, align 8
  %97 = bitcast i16* %91 to i8*
  tail call void @_ZdlPv(i8* %97) #14
  br label %98

98:                                               ; preds = %93, %87
  %99 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %89, %80
  br i1 %99, label %100, label %87

100:                                              ; preds = %98
  %101 = bitcast %"class.std::__1::vector.158"* %78 to i8**
  %102 = load i8*, i8** %101, align 8
  br label %103

103:                                              ; preds = %100, %82
  %104 = phi i8* [ %102, %100 ], [ %83, %82 ]
  store %"struct.jxl::ANSEncSymbolInfo"* %80, %"struct.jxl::ANSEncSymbolInfo"** %84, align 8
  tail call void @_ZdlPv(i8* %104) #14
  br label %105

105:                                              ; preds = %103, %76
  %106 = icmp eq %"class.std::__1::vector.158"* %78, %74
  br i1 %106, label %107, label %76

107:                                              ; preds = %105, %69
  %108 = icmp eq i64 %72, 0
  br i1 %108, label %111, label %109

109:                                              ; preds = %107
  %110 = inttoptr i64 %72 to i8*
  tail call void @_ZdlPv(i8* %110) #14
  br label %111

111:                                              ; preds = %107, %109
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl16ANSEncSymbolInfoENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.158"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::ANSEncSymbolInfo"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::ANSEncSymbolInfo"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 48
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::ANSEncSymbolInfo"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %13, i64 %18, i32 0
  %20 = bitcast i16* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 48
  %25 = add i64 %23, 48
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #12
  %27 = ptrtoint %"struct.jxl::ANSEncSymbolInfo"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %133

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.158"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 48
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 384307168202282325
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.158"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #13
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 48
  %42 = icmp ult i64 %41, 192153584101141162
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 384307168202282325, %39 ]
  %50 = mul i64 %49, 48
  %51 = tail call i8* @_Znwm(i64 %50) #14
  %52 = bitcast i8* %51 to %"struct.jxl::ANSEncSymbolInfo"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %55, i64 %34
  %57 = ptrtoint %"struct.jxl::ANSEncSymbolInfo"* %56 to i64
  %58 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %55, i64 %54
  %59 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 48, i1 false) #12
  %64 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %61, i64 1
  %65 = ptrtoint %"struct.jxl::ANSEncSymbolInfo"* %64 to i64
  %66 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"struct.jxl::ANSEncSymbolInfo"* %58 to i64
  %69 = ptrtoint %"struct.jxl::ANSEncSymbolInfo"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.158", %"class.std::__1::vector.158"* %0, i64 0, i32 0, i32 0
  %71 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %70, align 8
  %72 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %6, align 8
  %73 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"struct.jxl::ANSEncSymbolInfo"* %71 to i64
  br label %110

76:                                               ; preds = %67, %76
  %77 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %104, %76 ], [ %56, %67 ]
  %78 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %79, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %78, i64 -1
  %80 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %77, i64 -1, i32 0
  %81 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %79, i64 0, i32 0
  %82 = load i16, i16* %81, align 8
  store i16 %82, i16* %80, align 8
  %83 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %77, i64 -1, i32 2
  %84 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %78, i64 -1, i32 2
  %85 = bitcast %"class.std::__1::vector.4"* %83 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 24, i1 false) #12
  %86 = bitcast %"class.std::__1::vector.4"* %84 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast %"class.std::__1::vector.4"* %83 to i64*
  store i64 %87, i64* %88, align 8
  %89 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %78, i64 -1, i32 2, i32 0, i32 1
  %90 = bitcast i16** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %77, i64 -1, i32 2, i32 0, i32 1
  %93 = bitcast i16** %92 to i64*
  store i64 %91, i64* %93, align 8
  %94 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %78, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %95 = bitcast i16** %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %77, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %98 = bitcast i16** %97 to i64*
  store i64 %96, i64* %98, align 8
  %99 = bitcast %"class.std::__1::vector.4"* %84 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 24, i1 false) #12
  %100 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %77, i64 -1, i32 3
  %101 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %78, i64 -1, i32 3
  %102 = bitcast i64* %100 to i8*
  %103 = bitcast i64* %101 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* align 8 %103, i64 12, i1 false) #12
  %104 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %77, i64 -1
  %105 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %79, %71
  br i1 %105, label %106, label %76

106:                                              ; preds = %76
  %107 = ptrtoint %"struct.jxl::ANSEncSymbolInfo"* %104 to i64
  %108 = load i64, i64* %31, align 8
  %109 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %6, align 8
  br label %110

110:                                              ; preds = %74, %106
  %111 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %71, %74 ], [ %109, %106 ]
  %112 = phi i64 [ %57, %74 ], [ %107, %106 ]
  %113 = phi i64 [ %75, %74 ], [ %108, %106 ]
  store i64 %112, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %114 = inttoptr i64 %113 to %"struct.jxl::ANSEncSymbolInfo"*
  %115 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %111, %114
  br i1 %115, label %129, label %116

116:                                              ; preds = %110, %127
  %117 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %118, %127 ], [ %111, %110 ]
  %118 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %117, i64 -1
  %119 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %117, i64 -1, i32 2, i32 0, i32 0
  %120 = load i16*, i16** %119, align 8
  %121 = icmp eq i16* %120, null
  br i1 %121, label %127, label %122

122:                                              ; preds = %116
  %123 = ptrtoint i16* %120 to i64
  %124 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %117, i64 -1, i32 2, i32 0, i32 1
  %125 = bitcast i16** %124 to i64*
  store i64 %123, i64* %125, align 8
  %126 = bitcast i16* %120 to i8*
  tail call void @_ZdlPv(i8* %126) #14
  br label %127

127:                                              ; preds = %122, %116
  %128 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %118, %114
  br i1 %128, label %129, label %116

129:                                              ; preds = %127, %110
  %130 = icmp eq i64 %113, 0
  br i1 %130, label %133, label %131

131:                                              ; preds = %129
  %132 = inttoptr i64 %113 to i8*
  tail call void @_ZdlPv(i8* %132) #14
  br label %133

133:                                              ; preds = %131, %129, %28
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #6

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i64 0, i64 65}
!3 = !{i32 0, i32 33}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.isvectorized", i32 1}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !10, !7}
!10 = !{!"llvm.loop.unroll.runtime.disable"}
!11 = distinct !{!11, !7}
!12 = distinct !{!12, !10, !7}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 1"}
!15 = distinct !{!15, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm"}
!16 = !{!17}
!17 = distinct !{!17, !15, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 0"}
!18 = distinct !{!18, !7}
!19 = distinct !{!19, !5}
!20 = distinct !{!20, !10, !7}
!21 = !{i8 0, i8 2}
!22 = distinct !{!22, !5}
!23 = !{!24, !26, !27}
!24 = distinct !{!24, !25, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 0"}
!25 = distinct !{!25, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_"}
!26 = distinct !{!26, !25, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 1"}
!27 = distinct !{!27, !25, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 2"}
!28 = !{!29, !31, !32}
!29 = distinct !{!29, !30, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 0"}
!30 = distinct !{!30, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_"}
!31 = distinct !{!31, !30, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 1"}
!32 = distinct !{!32, !30, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 2"}
!33 = distinct !{!33, !7}
!34 = distinct !{!34, !5}
!35 = distinct !{!35, !10, !7}
!36 = !{!37, !39, !40}
!37 = distinct !{!37, !38, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 0"}
!38 = distinct !{!38, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_"}
!39 = distinct !{!39, !38, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 1"}
!40 = distinct !{!40, !38, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 2"}
!41 = !{!42, !44, !45}
!42 = distinct !{!42, !43, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 0"}
!43 = distinct !{!43, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_"}
!44 = distinct !{!44, !43, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 1"}
!45 = distinct !{!45, !43, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 2"}
!46 = !{!47, !49, !50}
!47 = distinct !{!47, !48, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 0"}
!48 = distinct !{!48, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_"}
!49 = distinct !{!49, !48, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 1"}
!50 = distinct !{!50, !48, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 2"}
!51 = !{!"branch_weights", i32 1, i32 2000}
!52 = distinct !{!52, !7}
!53 = distinct !{!53, !5}
!54 = distinct !{!54, !10, !7}
!55 = !{!56, !58, !59}
!56 = distinct !{!56, !57, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 0"}
!57 = distinct !{!57, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_"}
!58 = distinct !{!58, !57, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 1"}
!59 = distinct !{!59, !57, !"_ZNK3jxl16HybridUintConfig6EncodeEjPjS1_S1_: argument 2"}
!60 = distinct !{!60, !5}
!61 = distinct !{!61, !5}
!62 = !{!63}
!63 = distinct !{!63, !64}
!64 = distinct !{!64, !"LVerDomain"}
!65 = !{!66}
!66 = distinct !{!66, !64}
!67 = distinct !{!67, !7}
!68 = distinct !{!68, !7}
!69 = !{!70}
!70 = distinct !{!70, !71}
!71 = distinct !{!71, !"LVerDomain"}
!72 = !{!73}
!73 = distinct !{!73, !71}
!74 = distinct !{!74, !7}
!75 = distinct !{!75, !5}
!76 = distinct !{!76, !7}
!77 = !{!78}
!78 = distinct !{!78, !79, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeIiiEENS_22__unordered_map_hasherIiS2_NS_4hashIiEENS_8equal_toIiEELb1EEENS_21__unordered_map_equalIiS2_S7_S5_Lb1EEENS_9allocatorIS2_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSI_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS2_PvEENS_22__hash_node_destructorINSB_ISQ_EEEEEEmOT_DpOT0_: argument 0"}
!79 = distinct !{!79, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeIiiEENS_22__unordered_map_hasherIiS2_NS_4hashIiEENS_8equal_toIiEELb1EEENS_21__unordered_map_equalIiS2_S7_S5_Lb1EEENS_9allocatorIS2_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSI_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS2_PvEENS_22__hash_node_destructorINSB_ISQ_EEEEEEmOT_DpOT0_"}
!80 = distinct !{!80, !5}
!81 = distinct !{!81, !5}
!82 = !{!83}
!83 = distinct !{!83, !84}
!84 = distinct !{!84, !"LVerDomain"}
!85 = !{!86}
!86 = distinct !{!86, !84}
!87 = distinct !{!87, !7}
!88 = distinct !{!88, !7}
!89 = !{!90}
!90 = distinct !{!90, !91}
!91 = distinct !{!91, !"LVerDomain"}
!92 = !{!93}
!93 = distinct !{!93, !91}
!94 = distinct !{!94, !7}
!95 = distinct !{!95, !5}
!96 = distinct !{!96, !7}
!97 = distinct !{!97, !5}
!98 = distinct !{!98, !5}
!99 = distinct !{!99, !5}
!100 = distinct !{!100, !5}
