; ModuleID = '../../components/assist_ranker/nn_classifier.cc'
source_filename = "../../components/assist_ranker/nn_classifier.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.assist_ranker::NNLayerDefaultTypeInternal" = type opaque
%"class.assist_ranker::FloatVectorDefaultTypeInternal" = type opaque
%"class.assist_ranker::NNClassifierModel" = type { %"class.google::protobuf::MessageLite", %"class.google::protobuf::internal::HasBits", %"class.google::protobuf::internal::CachedSize", %"class.assist_ranker::NNLayer"*, %"class.assist_ranker::NNLayer"*, %"class.assist_ranker::ExamplePreprocessorConfig"* }
%"class.google::protobuf::MessageLite" = type { i32 (...)**, %"class.google::protobuf::internal::InternalMetadata" }
%"class.google::protobuf::internal::InternalMetadata" = type { i8* }
%"class.google::protobuf::internal::HasBits" = type { [1 x i32] }
%"class.google::protobuf::internal::CachedSize" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.assist_ranker::NNLayer" = type { %"class.google::protobuf::MessageLite", %"class.google::protobuf::internal::HasBits", %"class.google::protobuf::internal::CachedSize", %"class.google::protobuf::RepeatedPtrField", %"class.assist_ranker::FloatVector"* }
%"class.google::protobuf::RepeatedPtrField" = type { %"class.google::protobuf::internal::RepeatedPtrFieldBase" }
%"class.google::protobuf::internal::RepeatedPtrFieldBase" = type { %"class.google::protobuf::Arena"*, i32, i32, %"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep"* }
%"class.google::protobuf::Arena" = type { %"class.google::protobuf::internal::ArenaImpl", void (%"class.std::type_info"*, i64, i8*)*, void (%"class.google::protobuf::Arena"*, i8*, i64)*, void (%"class.google::protobuf::Arena"*, i8*, i64)*, i8* }
%"class.google::protobuf::internal::ArenaImpl" = type { %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.5", %"class.google::protobuf::internal::ArenaImpl::Block"*, i64, %"struct.google::protobuf::internal::ArenaImpl::Options" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl.3" }
%"struct.std::__1::__cxx_atomic_impl.3" = type { %"struct.std::__1::__cxx_atomic_base_impl.4" }
%"struct.std::__1::__cxx_atomic_base_impl.4" = type { %"class.google::protobuf::internal::ArenaImpl::SerialArena"* }
%"class.google::protobuf::internal::ArenaImpl::SerialArena" = type { %"class.google::protobuf::internal::ArenaImpl"*, i8*, %"class.google::protobuf::internal::ArenaImpl::Block"*, %"struct.google::protobuf::internal::ArenaImpl::CleanupChunk"*, %"class.google::protobuf::internal::ArenaImpl::SerialArena"*, i8*, i8*, %"struct.google::protobuf::internal::ArenaImpl::CleanupNode"*, %"struct.google::protobuf::internal::ArenaImpl::CleanupNode"* }
%"struct.google::protobuf::internal::ArenaImpl::CleanupChunk" = type { i64, %"struct.google::protobuf::internal::ArenaImpl::CleanupChunk"*, [1 x %"struct.google::protobuf::internal::ArenaImpl::CleanupNode"] }
%"struct.google::protobuf::internal::ArenaImpl::CleanupNode" = type { i8*, void (i8*)* }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i64 }
%"class.google::protobuf::internal::ArenaImpl::Block" = type { %"class.google::protobuf::internal::ArenaImpl::Block"*, i64, i64 }
%"struct.google::protobuf::internal::ArenaImpl::Options" = type { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep" = type { i32, [268435454 x i8*] }
%"class.assist_ranker::FloatVector" = type <{ %"class.google::protobuf::MessageLite", %"class.google::protobuf::RepeatedField", %"class.google::protobuf::internal::CachedSize", [4 x i8] }>
%"class.google::protobuf::RepeatedField" = type { i32, i32, i8* }
%"class.assist_ranker::ExamplePreprocessorConfig" = type <{ %"class.google::protobuf::MessageLite", %"class.google::protobuf::RepeatedPtrField.10", %"class.google::protobuf::internal::MapFieldLite", %"class.google::protobuf::internal::MapFieldLite.11", %"class.google::protobuf::internal::MapFieldLite.13", %"class.google::protobuf::RepeatedPtrField.10", %"class.google::protobuf::internal::CachedSize", [4 x i8] }>
%"class.google::protobuf::internal::MapFieldLite" = type { %"class.google::protobuf::Map" }
%"class.google::protobuf::Map" = type { %"class.google::protobuf::Map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, assist_ranker::ExamplePreprocessorConfig_Boundaries>::InnerMap" }
%"class.google::protobuf::Map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, assist_ranker::ExamplePreprocessorConfig_Boundaries>::InnerMap" = type { i64, i64, i64, i64, i8**, %"class.google::protobuf::internal::MapAllocator" }
%"class.google::protobuf::internal::MapAllocator" = type { %"class.google::protobuf::Arena"* }
%"class.google::protobuf::internal::MapFieldLite.11" = type { %"class.google::protobuf::Map.12" }
%"class.google::protobuf::Map.12" = type { %"class.google::protobuf::Map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, int>::InnerMap" }
%"class.google::protobuf::Map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, int>::InnerMap" = type { i64, i64, i64, i64, i8**, %"class.google::protobuf::internal::MapAllocator" }
%"class.google::protobuf::internal::MapFieldLite.13" = type { %"class.google::protobuf::Map.14" }
%"class.google::protobuf::Map.14" = type { %"class.google::protobuf::Map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, float>::InnerMap" }
%"class.google::protobuf::Map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, float>::InnerMap" = type { i64, i64, i64, i64, i8**, %"class.google::protobuf::internal::MapAllocator" }
%"class.google::protobuf::RepeatedPtrField.10" = type { %"class.google::protobuf::internal::RepeatedPtrFieldBase" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN13assist_ranker26_NNLayer_default_instance_E = external global %"class.assist_ranker::NNLayerDefaultTypeInternal", align 1
@_ZN13assist_ranker30_FloatVector_default_instance_E = external local_unnamed_addr global %"class.assist_ranker::FloatVectorDefaultTypeInternal", align 1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN13assist_ranker13nn_classifier8ValidateERKNS_17NNClassifierModelE(%"class.assist_ranker::NNClassifierModel"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.assist_ranker::NNClassifierModel", %"class.assist_ranker::NNClassifierModel"* %0, i64 0, i32 3
  %3 = load %"class.assist_ranker::NNLayer"*, %"class.assist_ranker::NNLayer"** %2, align 8
  %4 = icmp eq %"class.assist_ranker::NNLayer"* %3, null
  %5 = select i1 %4, %"class.assist_ranker::NNLayer"* bitcast (%"class.assist_ranker::NNLayerDefaultTypeInternal"* @_ZN13assist_ranker26_NNLayer_default_instance_E to %"class.assist_ranker::NNLayer"*), %"class.assist_ranker::NNLayer"* %3
  %6 = getelementptr inbounds %"class.assist_ranker::NNLayer", %"class.assist_ranker::NNLayer"* %5, i64 0, i32 4
  %7 = load %"class.assist_ranker::FloatVector"*, %"class.assist_ranker::FloatVector"** %6, align 8
  %8 = icmp eq %"class.assist_ranker::FloatVector"* %7, null
  %9 = select i1 %8, %"class.assist_ranker::FloatVector"* bitcast (%"class.assist_ranker::FloatVectorDefaultTypeInternal"* @_ZN13assist_ranker30_FloatVector_default_instance_E to %"class.assist_ranker::FloatVector"*), %"class.assist_ranker::FloatVector"* %7
  %10 = getelementptr inbounds %"class.assist_ranker::FloatVector", %"class.assist_ranker::FloatVector"* %9, i64 0, i32 1, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.assist_ranker::NNClassifierModel", %"class.assist_ranker::NNClassifierModel"* %0, i64 0, i32 4
  %13 = load %"class.assist_ranker::NNLayer"*, %"class.assist_ranker::NNLayer"** %12, align 8
  %14 = icmp eq %"class.assist_ranker::NNLayer"* %13, null
  %15 = select i1 %14, %"class.assist_ranker::NNLayer"* bitcast (%"class.assist_ranker::NNLayerDefaultTypeInternal"* @_ZN13assist_ranker26_NNLayer_default_instance_E to %"class.assist_ranker::NNLayer"*), %"class.assist_ranker::NNLayer"* %13
  %16 = getelementptr inbounds %"class.assist_ranker::NNLayer", %"class.assist_ranker::NNLayer"* %15, i64 0, i32 3, i32 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = icmp ne i32 %11, %17
  %19 = icmp eq i32 %11, 0
  %20 = or i1 %18, %19
  br i1 %20, label %67, label %21

21:                                               ; preds = %1
  %22 = getelementptr inbounds %"class.assist_ranker::NNLayer", %"class.assist_ranker::NNLayer"* %5, i64 0, i32 3, i32 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %67, label %25

25:                                               ; preds = %21
  %26 = icmp sgt i32 %23, 0
  br i1 %26, label %27, label %42

27:                                               ; preds = %25
  %28 = getelementptr inbounds %"class.assist_ranker::NNLayer", %"class.assist_ranker::NNLayer"* %5, i64 0, i32 3, i32 0, i32 3
  %29 = load %"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep"*, %"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep"** %28, align 8
  %30 = zext i32 %23 to i64
  br label %33

31:                                               ; preds = %33
  %32 = icmp eq i64 %41, %30
  br i1 %32, label %42, label %33

33:                                               ; preds = %31, %27
  %34 = phi i64 [ 0, %27 ], [ %41, %31 ]
  %35 = getelementptr inbounds %"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep", %"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep"* %29, i64 0, i32 1, i64 %34
  %36 = bitcast i8** %35 to %"class.assist_ranker::FloatVector"**
  %37 = load %"class.assist_ranker::FloatVector"*, %"class.assist_ranker::FloatVector"** %36, align 8
  %38 = getelementptr inbounds %"class.assist_ranker::FloatVector", %"class.assist_ranker::FloatVector"* %37, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, %11
  %41 = add nuw nsw i64 %34, 1
  br i1 %40, label %31, label %67

42:                                               ; preds = %31, %25
  %43 = getelementptr inbounds %"class.assist_ranker::NNLayer", %"class.assist_ranker::NNLayer"* %15, i64 0, i32 4
  %44 = load %"class.assist_ranker::FloatVector"*, %"class.assist_ranker::FloatVector"** %43, align 8
  %45 = icmp eq %"class.assist_ranker::FloatVector"* %44, null
  %46 = select i1 %45, %"class.assist_ranker::FloatVector"* bitcast (%"class.assist_ranker::FloatVectorDefaultTypeInternal"* @_ZN13assist_ranker30_FloatVector_default_instance_E to %"class.assist_ranker::FloatVector"*), %"class.assist_ranker::FloatVector"* %44
  %47 = getelementptr inbounds %"class.assist_ranker::FloatVector", %"class.assist_ranker::FloatVector"* %46, i64 0, i32 1, i32 0
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %67, label %50

50:                                               ; preds = %42
  %51 = icmp sgt i32 %11, 0
  br i1 %51, label %52, label %67

52:                                               ; preds = %50
  %53 = getelementptr inbounds %"class.assist_ranker::NNLayer", %"class.assist_ranker::NNLayer"* %15, i64 0, i32 3, i32 0, i32 3
  %54 = load %"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep"*, %"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep"** %53, align 8
  %55 = zext i32 %11 to i64
  br label %58

56:                                               ; preds = %58
  %57 = icmp eq i64 %66, %55
  br i1 %57, label %67, label %58

58:                                               ; preds = %56, %52
  %59 = phi i64 [ 0, %52 ], [ %66, %56 ]
  %60 = getelementptr inbounds %"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep", %"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep"* %54, i64 0, i32 1, i64 %59
  %61 = bitcast i8** %60 to %"class.assist_ranker::FloatVector"**
  %62 = load %"class.assist_ranker::FloatVector"*, %"class.assist_ranker::FloatVector"** %61, align 8
  %63 = getelementptr inbounds %"class.assist_ranker::FloatVector", %"class.assist_ranker::FloatVector"* %62, i64 0, i32 1, i32 0
  %64 = load i32, i32* %63, align 8
  %65 = icmp eq i32 %64, %48
  %66 = add nuw nsw i64 %59, 1
  br i1 %65, label %56, label %67

67:                                               ; preds = %33, %58, %56, %1, %21, %50, %42
  %68 = phi i1 [ false, %1 ], [ false, %42 ], [ true, %50 ], [ false, %21 ], [ true, %56 ], [ false, %58 ], [ false, %33 ]
  ret i1 %68
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13assist_ranker13nn_classifier9InferenceERKNS_17NNClassifierModelERKNSt3__16vectorIfNS4_9allocatorIfEEEE(%"class.std::__1::vector"* noalias sret, %"class.assist_ranker::NNClassifierModel"* nocapture readonly dereferenceable(48), %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #1 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.assist_ranker::NNClassifierModel", %"class.assist_ranker::NNClassifierModel"* %1, i64 0, i32 3
  %9 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  %10 = load %"class.assist_ranker::NNLayer"*, %"class.assist_ranker::NNLayer"** %8, align 8
  %11 = icmp eq %"class.assist_ranker::NNLayer"* %10, null
  %12 = select i1 %11, %"class.assist_ranker::NNLayer"* bitcast (%"class.assist_ranker::NNLayerDefaultTypeInternal"* @_ZN13assist_ranker26_NNLayer_default_instance_E to %"class.assist_ranker::NNLayer"*), %"class.assist_ranker::NNLayer"* %10
  call fastcc void @_ZN13assist_ranker13nn_classifier12_GLOBAL__N_111FeedForwardERKNS_7NNLayerERKNSt3__16vectorIfNS5_9allocatorIfEEEE(%"class.std::__1::vector"* nonnull sret %4, %"class.assist_ranker::NNLayer"* dereferenceable(56) %12, %"class.std::__1::vector"* dereferenceable(24) %2)
  %13 = load float*, float** %6, align 8
  %14 = load float*, float** %7, align 8
  %15 = icmp eq float* %13, %14
  br i1 %15, label %89, label %16

16:                                               ; preds = %3
  %17 = ptrtoint float* %13 to i64
  %18 = getelementptr float, float* %14, i64 -1
  %19 = ptrtoint float* %18 to i64
  %20 = sub i64 %19, %17
  %21 = lshr i64 %20, 2
  %22 = add nuw nsw i64 %21, 1
  %23 = icmp ult i64 %22, 8
  br i1 %23, label %79, label %24

24:                                               ; preds = %16
  %25 = and i64 %22, 9223372036854775800
  %26 = getelementptr float, float* %13, i64 %25
  br label %27

27:                                               ; preds = %74, %24
  %28 = phi i64 [ 0, %24 ], [ %75, %74 ]
  %29 = getelementptr float, float* %13, i64 %28
  %30 = bitcast float* %29 to <4 x float>*
  %31 = load <4 x float>, <4 x float>* %30, align 4
  %32 = getelementptr float, float* %29, i64 4
  %33 = bitcast float* %32 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 4
  %35 = fcmp olt <4 x float> %31, zeroinitializer
  %36 = fcmp olt <4 x float> %34, zeroinitializer
  %37 = extractelement <4 x i1> %35, i32 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %27
  store float 0.000000e+00, float* %29, align 4
  br label %39

39:                                               ; preds = %38, %27
  %40 = extractelement <4 x i1> %35, i32 1
  br i1 %40, label %41, label %44

41:                                               ; preds = %39
  %42 = or i64 %28, 1
  %43 = getelementptr float, float* %13, i64 %42
  store float 0.000000e+00, float* %43, align 4
  br label %44

44:                                               ; preds = %41, %39
  %45 = extractelement <4 x i1> %35, i32 2
  br i1 %45, label %46, label %49

46:                                               ; preds = %44
  %47 = or i64 %28, 2
  %48 = getelementptr float, float* %13, i64 %47
  store float 0.000000e+00, float* %48, align 4
  br label %49

49:                                               ; preds = %46, %44
  %50 = extractelement <4 x i1> %35, i32 3
  br i1 %50, label %51, label %54

51:                                               ; preds = %49
  %52 = or i64 %28, 3
  %53 = getelementptr float, float* %13, i64 %52
  store float 0.000000e+00, float* %53, align 4
  br label %54

54:                                               ; preds = %51, %49
  %55 = extractelement <4 x i1> %36, i32 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %54
  %57 = or i64 %28, 4
  %58 = getelementptr float, float* %13, i64 %57
  store float 0.000000e+00, float* %58, align 4
  br label %59

59:                                               ; preds = %56, %54
  %60 = extractelement <4 x i1> %36, i32 1
  br i1 %60, label %61, label %64

61:                                               ; preds = %59
  %62 = or i64 %28, 5
  %63 = getelementptr float, float* %13, i64 %62
  store float 0.000000e+00, float* %63, align 4
  br label %64

64:                                               ; preds = %61, %59
  %65 = extractelement <4 x i1> %36, i32 2
  br i1 %65, label %66, label %69

66:                                               ; preds = %64
  %67 = or i64 %28, 6
  %68 = getelementptr float, float* %13, i64 %67
  store float 0.000000e+00, float* %68, align 4
  br label %69

69:                                               ; preds = %66, %64
  %70 = extractelement <4 x i1> %36, i32 3
  br i1 %70, label %71, label %74

71:                                               ; preds = %69
  %72 = or i64 %28, 7
  %73 = getelementptr float, float* %13, i64 %72
  store float 0.000000e+00, float* %73, align 4
  br label %74

74:                                               ; preds = %71, %69
  %75 = add i64 %28, 8
  %76 = icmp eq i64 %75, %25
  br i1 %76, label %77, label %27, !llvm.loop !2

77:                                               ; preds = %74
  %78 = icmp eq i64 %22, %25
  br i1 %78, label %89, label %79

79:                                               ; preds = %77, %16
  %80 = phi float* [ %13, %16 ], [ %26, %77 ]
  br label %81

81:                                               ; preds = %79, %86
  %82 = phi float* [ %87, %86 ], [ %80, %79 ]
  %83 = load float, float* %82, align 4
  %84 = fcmp olt float %83, 0.000000e+00
  br i1 %84, label %85, label %86

85:                                               ; preds = %81
  store float 0.000000e+00, float* %82, align 4
  br label %86

86:                                               ; preds = %85, %81
  %87 = getelementptr inbounds float, float* %82, i64 1
  %88 = icmp eq float* %87, %14
  br i1 %88, label %89, label %81, !llvm.loop !4

89:                                               ; preds = %86, %77, %3
  %90 = getelementptr inbounds %"class.assist_ranker::NNClassifierModel", %"class.assist_ranker::NNClassifierModel"* %1, i64 0, i32 4
  %91 = load %"class.assist_ranker::NNLayer"*, %"class.assist_ranker::NNLayer"** %90, align 8
  %92 = icmp eq %"class.assist_ranker::NNLayer"* %91, null
  %93 = select i1 %92, %"class.assist_ranker::NNLayer"* bitcast (%"class.assist_ranker::NNLayerDefaultTypeInternal"* @_ZN13assist_ranker26_NNLayer_default_instance_E to %"class.assist_ranker::NNLayer"*), %"class.assist_ranker::NNLayer"* %91
  call fastcc void @_ZN13assist_ranker13nn_classifier12_GLOBAL__N_111FeedForwardERKNS_7NNLayerERKNSt3__16vectorIfNS5_9allocatorIfEEEE(%"class.std::__1::vector"* sret %0, %"class.assist_ranker::NNLayer"* dereferenceable(56) %93, %"class.std::__1::vector"* nonnull dereferenceable(24) %4)
  %94 = load float*, float** %6, align 8
  %95 = icmp eq float* %94, null
  br i1 %95, label %100, label %96

96:                                               ; preds = %89
  %97 = ptrtoint float* %94 to i64
  %98 = bitcast float** %7 to i64*
  store i64 %97, i64* %98, align 8
  %99 = bitcast float* %94 to i8*
  call void @_ZdlPv(i8* %99) #7
  br label %100

100:                                              ; preds = %89, %96
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN13assist_ranker13nn_classifier12_GLOBAL__N_111FeedForwardERKNS_7NNLayerERKNSt3__16vectorIfNS5_9allocatorIfEEEE(%"class.std::__1::vector"* noalias sret, %"class.assist_ranker::NNLayer"* nocapture readonly dereferenceable(56), %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) unnamed_addr #1 {
  %4 = getelementptr inbounds %"class.assist_ranker::NNLayer", %"class.assist_ranker::NNLayer"* %1, i64 0, i32 4
  %5 = load %"class.assist_ranker::FloatVector"*, %"class.assist_ranker::FloatVector"** %4, align 8
  %6 = icmp eq %"class.assist_ranker::FloatVector"* %5, null
  %7 = select i1 %6, %"class.assist_ranker::FloatVector"* bitcast (%"class.assist_ranker::FloatVectorDefaultTypeInternal"* @_ZN13assist_ranker30_FloatVector_default_instance_E to %"class.assist_ranker::FloatVector"*), %"class.assist_ranker::FloatVector"* %5
  %8 = getelementptr inbounds %"class.assist_ranker::FloatVector", %"class.assist_ranker::FloatVector"* %7, i64 0, i32 1, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %11 = bitcast float** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector"* %2 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = lshr exact i64 %15, 2
  %17 = trunc i64 %16 to i32
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %21 = getelementptr inbounds %"class.assist_ranker::FloatVector", %"class.assist_ranker::FloatVector"* %7, i64 0, i32 1, i32 2
  %22 = bitcast %"class.std::__1::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 -86, i64 24, i1 false)
  %23 = load i8*, i8** %21, align 8
  %24 = load i32, i32* %8, align 8
  %25 = sext i32 %24 to i64
  %26 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #6
  %27 = shl nuw nsw i64 %25, 2
  %28 = icmp eq i32 %24, 0
  br i1 %28, label %41, label %29

29:                                               ; preds = %3
  %30 = icmp slt i32 %24, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %29
  %32 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #8
  unreachable

33:                                               ; preds = %29
  %34 = tail call i8* @_Znwm(i64 %27) #7
  %35 = bitcast i8* %34 to float*
  %36 = bitcast float** %19 to i8**
  store i8* %34, i8** %36, align 8
  %37 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %34, i8** %37, align 8
  %38 = getelementptr inbounds float, float* %35, i64 %25
  store float* %38, float** %20, align 8
  %39 = bitcast float** %19 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %34, i8* align 4 %23, i64 %27, i1 false) #6
  %40 = ptrtoint float* %38 to i64
  store i64 %40, i64* %39, align 8
  br label %41

41:                                               ; preds = %3, %33
  %42 = icmp sgt i32 %17, 0
  br i1 %42, label %43, label %108

43:                                               ; preds = %41
  %44 = getelementptr inbounds %"class.assist_ranker::NNLayer", %"class.assist_ranker::NNLayer"* %1, i64 0, i32 3, i32 0, i32 3
  %45 = icmp sgt i32 %9, 0
  %46 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %47 = and i64 %16, 4294967295
  %48 = zext i32 %9 to i64
  %49 = and i64 %48, 1
  %50 = icmp eq i32 %9, 1
  %51 = sub nsw i64 %48, %49
  %52 = icmp eq i64 %49, 0
  br label %53

53:                                               ; preds = %76, %43
  %54 = phi i64 [ 0, %43 ], [ %77, %76 ]
  br i1 %45, label %55, label %76

55:                                               ; preds = %53
  %56 = load %"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep"*, %"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep"** %44, align 8
  %57 = getelementptr inbounds %"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep", %"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep"* %56, i64 0, i32 1, i64 %54
  %58 = bitcast i8** %57 to %"class.assist_ranker::FloatVector"**
  %59 = load %"class.assist_ranker::FloatVector"*, %"class.assist_ranker::FloatVector"** %58, align 8
  %60 = getelementptr inbounds %"class.assist_ranker::FloatVector", %"class.assist_ranker::FloatVector"* %59, i64 0, i32 1, i32 2
  %61 = bitcast i8** %60 to float**
  br i1 %50, label %62, label %79

62:                                               ; preds = %79, %55
  %63 = phi i64 [ 0, %55 ], [ %105, %79 ]
  br i1 %52, label %76, label %64

64:                                               ; preds = %62
  %65 = load float*, float** %61, align 8
  %66 = getelementptr inbounds float, float* %65, i64 %63
  %67 = load float, float* %66, align 4
  %68 = load float*, float** %46, align 8
  %69 = getelementptr inbounds float, float* %68, i64 %54
  %70 = load float, float* %69, align 4
  %71 = fmul float %67, %70
  %72 = load float*, float** %18, align 8
  %73 = getelementptr inbounds float, float* %72, i64 %63
  %74 = load float, float* %73, align 4
  %75 = fadd float %71, %74
  store float %75, float* %73, align 4
  br label %76

76:                                               ; preds = %64, %62, %53
  %77 = add nuw nsw i64 %54, 1
  %78 = icmp eq i64 %77, %47
  br i1 %78, label %108, label %53

79:                                               ; preds = %55, %79
  %80 = phi i64 [ %105, %79 ], [ 0, %55 ]
  %81 = phi i64 [ %106, %79 ], [ %51, %55 ]
  %82 = load float*, float** %61, align 8
  %83 = getelementptr inbounds float, float* %82, i64 %80
  %84 = load float, float* %83, align 4
  %85 = load float*, float** %46, align 8
  %86 = getelementptr inbounds float, float* %85, i64 %54
  %87 = load float, float* %86, align 4
  %88 = fmul float %84, %87
  %89 = load float*, float** %18, align 8
  %90 = getelementptr inbounds float, float* %89, i64 %80
  %91 = load float, float* %90, align 4
  %92 = fadd float %88, %91
  store float %92, float* %90, align 4
  %93 = or i64 %80, 1
  %94 = load float*, float** %61, align 8
  %95 = getelementptr inbounds float, float* %94, i64 %93
  %96 = load float, float* %95, align 4
  %97 = load float*, float** %46, align 8
  %98 = getelementptr inbounds float, float* %97, i64 %54
  %99 = load float, float* %98, align 4
  %100 = fmul float %96, %99
  %101 = load float*, float** %18, align 8
  %102 = getelementptr inbounds float, float* %101, i64 %93
  %103 = load float, float* %102, align 4
  %104 = fadd float %100, %103
  store float %104, float* %102, align 4
  %105 = add nuw nsw i64 %80, 2
  %106 = add i64 %81, -2
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %62, label %79

108:                                              ; preds = %76, %41
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
