; ModuleID = '../../third_party/libyuv/source/rotate_common.cc'
source_filename = "../../third_party/libyuv/source/rotate_common.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @TransposeWx8_C(i8* nocapture readonly, i32, i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %52

7:                                                ; preds = %5
  %8 = sext i32 %1 to i64
  %9 = shl nsw i32 %1, 1
  %10 = sext i32 %9 to i64
  %11 = mul nsw i32 %1, 3
  %12 = sext i32 %11 to i64
  %13 = shl nsw i32 %1, 2
  %14 = sext i32 %13 to i64
  %15 = mul nsw i32 %1, 5
  %16 = sext i32 %15 to i64
  %17 = mul nsw i32 %1, 6
  %18 = sext i32 %17 to i64
  %19 = mul nsw i32 %1, 7
  %20 = sext i32 %19 to i64
  %21 = sext i32 %3 to i64
  br label %22

22:                                               ; preds = %22, %7
  %23 = phi i32 [ 0, %7 ], [ %50, %22 ]
  %24 = phi i8* [ %0, %7 ], [ %48, %22 ]
  %25 = phi i8* [ %2, %7 ], [ %49, %22 ]
  %26 = load i8, i8* %24, align 1
  store i8 %26, i8* %25, align 1
  %27 = getelementptr inbounds i8, i8* %24, i64 %8
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %24, i64 %10
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds i8, i8* %25, i64 2
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds i8, i8* %24, i64 %12
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds i8, i8* %25, i64 3
  store i8 %34, i8* %35, align 1
  %36 = getelementptr inbounds i8, i8* %24, i64 %14
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds i8, i8* %25, i64 4
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds i8, i8* %24, i64 %16
  %40 = load i8, i8* %39, align 1
  %41 = getelementptr inbounds i8, i8* %25, i64 5
  store i8 %40, i8* %41, align 1
  %42 = getelementptr inbounds i8, i8* %24, i64 %18
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds i8, i8* %25, i64 6
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %24, i64 %20
  %46 = load i8, i8* %45, align 1
  %47 = getelementptr inbounds i8, i8* %25, i64 7
  store i8 %46, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %24, i64 1
  %49 = getelementptr inbounds i8, i8* %25, i64 %21
  %50 = add nuw nsw i32 %23, 1
  %51 = icmp eq i32 %50, %4
  br i1 %51, label %52, label %22

52:                                               ; preds = %22, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @TransposeUVWx8_C(i8* nocapture readonly, i32, i8* nocapture, i32, i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %8 = icmp sgt i32 %6, 0
  br i1 %8, label %9, label %94

9:                                                ; preds = %7
  %10 = sext i32 %1 to i64
  %11 = add nsw i32 %1, 1
  %12 = sext i32 %11 to i64
  %13 = shl nsw i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = or i32 %13, 1
  %16 = sext i32 %15 to i64
  %17 = mul nsw i32 %1, 3
  %18 = sext i32 %17 to i64
  %19 = add nsw i32 %17, 1
  %20 = sext i32 %19 to i64
  %21 = shl nsw i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = or i32 %21, 1
  %24 = sext i32 %23 to i64
  %25 = mul nsw i32 %1, 5
  %26 = sext i32 %25 to i64
  %27 = add nsw i32 %25, 1
  %28 = sext i32 %27 to i64
  %29 = mul nsw i32 %1, 6
  %30 = sext i32 %29 to i64
  %31 = or i32 %29, 1
  %32 = sext i32 %31 to i64
  %33 = mul nsw i32 %1, 7
  %34 = sext i32 %33 to i64
  %35 = add nsw i32 %33, 1
  %36 = sext i32 %35 to i64
  %37 = sext i32 %3 to i64
  %38 = sext i32 %5 to i64
  br label %39

39:                                               ; preds = %39, %9
  %40 = phi i32 [ 0, %9 ], [ %92, %39 ]
  %41 = phi i8* [ %0, %9 ], [ %89, %39 ]
  %42 = phi i8* [ %2, %9 ], [ %90, %39 ]
  %43 = phi i8* [ %4, %9 ], [ %91, %39 ]
  %44 = load i8, i8* %41, align 1
  store i8 %44, i8* %42, align 1
  %45 = getelementptr inbounds i8, i8* %41, i64 1
  %46 = load i8, i8* %45, align 1
  store i8 %46, i8* %43, align 1
  %47 = getelementptr inbounds i8, i8* %41, i64 %10
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %48, i8* %49, align 1
  %50 = getelementptr inbounds i8, i8* %41, i64 %12
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr inbounds i8, i8* %43, i64 1
  store i8 %51, i8* %52, align 1
  %53 = getelementptr inbounds i8, i8* %41, i64 %14
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds i8, i8* %42, i64 2
  store i8 %54, i8* %55, align 1
  %56 = getelementptr inbounds i8, i8* %41, i64 %16
  %57 = load i8, i8* %56, align 1
  %58 = getelementptr inbounds i8, i8* %43, i64 2
  store i8 %57, i8* %58, align 1
  %59 = getelementptr inbounds i8, i8* %41, i64 %18
  %60 = load i8, i8* %59, align 1
  %61 = getelementptr inbounds i8, i8* %42, i64 3
  store i8 %60, i8* %61, align 1
  %62 = getelementptr inbounds i8, i8* %41, i64 %20
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds i8, i8* %43, i64 3
  store i8 %63, i8* %64, align 1
  %65 = getelementptr inbounds i8, i8* %41, i64 %22
  %66 = load i8, i8* %65, align 1
  %67 = getelementptr inbounds i8, i8* %42, i64 4
  store i8 %66, i8* %67, align 1
  %68 = getelementptr inbounds i8, i8* %41, i64 %24
  %69 = load i8, i8* %68, align 1
  %70 = getelementptr inbounds i8, i8* %43, i64 4
  store i8 %69, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %41, i64 %26
  %72 = load i8, i8* %71, align 1
  %73 = getelementptr inbounds i8, i8* %42, i64 5
  store i8 %72, i8* %73, align 1
  %74 = getelementptr inbounds i8, i8* %41, i64 %28
  %75 = load i8, i8* %74, align 1
  %76 = getelementptr inbounds i8, i8* %43, i64 5
  store i8 %75, i8* %76, align 1
  %77 = getelementptr inbounds i8, i8* %41, i64 %30
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds i8, i8* %42, i64 6
  store i8 %78, i8* %79, align 1
  %80 = getelementptr inbounds i8, i8* %41, i64 %32
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds i8, i8* %43, i64 6
  store i8 %81, i8* %82, align 1
  %83 = getelementptr inbounds i8, i8* %41, i64 %34
  %84 = load i8, i8* %83, align 1
  %85 = getelementptr inbounds i8, i8* %42, i64 7
  store i8 %84, i8* %85, align 1
  %86 = getelementptr inbounds i8, i8* %41, i64 %36
  %87 = load i8, i8* %86, align 1
  %88 = getelementptr inbounds i8, i8* %43, i64 7
  store i8 %87, i8* %88, align 1
  %89 = getelementptr inbounds i8, i8* %41, i64 2
  %90 = getelementptr inbounds i8, i8* %42, i64 %37
  %91 = getelementptr inbounds i8, i8* %43, i64 %38
  %92 = add nuw nsw i32 %40, 1
  %93 = icmp eq i32 %92, %6
  br i1 %93, label %94, label %39

94:                                               ; preds = %39, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @TransposeWxH_C(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp sgt i32 %4, 0
  br i1 %7, label %8, label %130

8:                                                ; preds = %6
  %9 = icmp sgt i32 %5, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = zext i32 %4 to i64
  %13 = zext i32 %5 to i64
  %14 = and i64 %13, 4294967264
  %15 = add nsw i64 %14, -32
  %16 = lshr exact i64 %15, 5
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ugt i32 %5, 31
  %19 = icmp eq i32 %1, 1
  %20 = and i1 %18, %19
  %21 = and i64 %13, 4294967264
  %22 = and i64 %17, 1
  %23 = icmp eq i64 %15, 0
  %24 = sub nuw nsw i64 %17, %22
  %25 = icmp eq i64 %22, 0
  %26 = icmp eq i64 %21, %13
  %27 = and i64 %13, 1
  %28 = icmp eq i64 %27, 0
  %29 = sub nsw i64 0, %13
  br label %30

30:                                               ; preds = %127, %8
  %31 = phi i64 [ 0, %8 ], [ %128, %127 ]
  %32 = mul i64 %31, %11
  %33 = getelementptr i8, i8* %2, i64 %32
  %34 = add i64 %32, %13
  %35 = getelementptr i8, i8* %2, i64 %34
  %36 = getelementptr i8, i8* %0, i64 %31
  %37 = add nuw i64 %31, %13
  %38 = getelementptr i8, i8* %0, i64 %37
  br i1 %9, label %39, label %127

39:                                               ; preds = %30
  %40 = mul nsw i64 %31, %11
  br i1 %20, label %41, label %96

41:                                               ; preds = %39
  %42 = icmp ult i8* %33, %38
  %43 = icmp ult i8* %36, %35
  %44 = and i1 %42, %43
  br i1 %44, label %96, label %45

45:                                               ; preds = %41
  br i1 %23, label %79, label %46

46:                                               ; preds = %45, %46
  %47 = phi i64 [ %76, %46 ], [ 0, %45 ]
  %48 = phi i64 [ %77, %46 ], [ %24, %45 ]
  %49 = mul nsw i64 %47, %10
  %50 = add nsw i64 %49, %31
  %51 = getelementptr inbounds i8, i8* %0, i64 %50
  %52 = bitcast i8* %51 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 1, !alias.scope !2
  %54 = getelementptr inbounds i8, i8* %51, i64 16
  %55 = bitcast i8* %54 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 1, !alias.scope !2
  %57 = add nsw i64 %47, %40
  %58 = getelementptr inbounds i8, i8* %2, i64 %57
  %59 = bitcast i8* %58 to <16 x i8>*
  store <16 x i8> %53, <16 x i8>* %59, align 1, !alias.scope !5, !noalias !2
  %60 = getelementptr inbounds i8, i8* %58, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> %56, <16 x i8>* %61, align 1, !alias.scope !5, !noalias !2
  %62 = or i64 %47, 32
  %63 = mul nsw i64 %62, %10
  %64 = add nsw i64 %63, %31
  %65 = getelementptr inbounds i8, i8* %0, i64 %64
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1, !alias.scope !2
  %68 = getelementptr inbounds i8, i8* %65, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !2
  %71 = add nsw i64 %62, %40
  %72 = getelementptr inbounds i8, i8* %2, i64 %71
  %73 = bitcast i8* %72 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %73, align 1, !alias.scope !5, !noalias !2
  %74 = getelementptr inbounds i8, i8* %72, i64 16
  %75 = bitcast i8* %74 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %75, align 1, !alias.scope !5, !noalias !2
  %76 = add i64 %47, 64
  %77 = add i64 %48, -2
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %46, !llvm.loop !7

79:                                               ; preds = %46, %45
  %80 = phi i64 [ 0, %45 ], [ %76, %46 ]
  br i1 %25, label %95, label %81

81:                                               ; preds = %79
  %82 = mul nsw i64 %80, %10
  %83 = add nsw i64 %82, %31
  %84 = getelementptr inbounds i8, i8* %0, i64 %83
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1, !alias.scope !2
  %87 = getelementptr inbounds i8, i8* %84, i64 16
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1, !alias.scope !2
  %90 = add nsw i64 %80, %40
  %91 = getelementptr inbounds i8, i8* %2, i64 %90
  %92 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %86, <16 x i8>* %92, align 1, !alias.scope !5, !noalias !2
  %93 = getelementptr inbounds i8, i8* %91, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  store <16 x i8> %89, <16 x i8>* %94, align 1, !alias.scope !5, !noalias !2
  br label %95

95:                                               ; preds = %79, %81
  br i1 %26, label %127, label %96

96:                                               ; preds = %39, %95, %41
  %97 = phi i64 [ 0, %41 ], [ 0, %39 ], [ %21, %95 ]
  %98 = xor i64 %97, -1
  br i1 %28, label %107, label %99

99:                                               ; preds = %96
  %100 = mul nsw i64 %97, %10
  %101 = add nsw i64 %100, %31
  %102 = getelementptr inbounds i8, i8* %0, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = add nsw i64 %97, %40
  %105 = getelementptr inbounds i8, i8* %2, i64 %104
  store i8 %103, i8* %105, align 1
  %106 = or i64 %97, 1
  br label %107

107:                                              ; preds = %99, %96
  %108 = phi i64 [ %106, %99 ], [ %97, %96 ]
  %109 = icmp eq i64 %98, %29
  br i1 %109, label %127, label %110

110:                                              ; preds = %107, %110
  %111 = phi i64 [ %125, %110 ], [ %108, %107 ]
  %112 = mul nsw i64 %111, %10
  %113 = add nsw i64 %112, %31
  %114 = getelementptr inbounds i8, i8* %0, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = add nsw i64 %111, %40
  %117 = getelementptr inbounds i8, i8* %2, i64 %116
  store i8 %115, i8* %117, align 1
  %118 = add nuw nsw i64 %111, 1
  %119 = mul nsw i64 %118, %10
  %120 = add nsw i64 %119, %31
  %121 = getelementptr inbounds i8, i8* %0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = add nsw i64 %118, %40
  %124 = getelementptr inbounds i8, i8* %2, i64 %123
  store i8 %122, i8* %124, align 1
  %125 = add nuw nsw i64 %111, 2
  %126 = icmp eq i64 %125, %13
  br i1 %126, label %127, label %110, !llvm.loop !9

127:                                              ; preds = %107, %110, %95, %30
  %128 = add nuw nsw i64 %31, 1
  %129 = icmp eq i64 %128, %12
  br i1 %129, label %130, label %30

130:                                              ; preds = %127, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @TransposeUVWxH_C(i8* nocapture readonly, i32, i8* nocapture, i32, i8* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  %9 = icmp sgt i32 %6, 0
  br i1 %9, label %10, label %138

10:                                               ; preds = %8
  %11 = shl nsw i32 %6, 1
  %12 = icmp sgt i32 %7, 0
  %13 = sext i32 %1 to i64
  %14 = sext i32 %3 to i64
  %15 = sext i32 %5 to i64
  %16 = sext i32 %11 to i64
  %17 = zext i32 %7 to i64
  %18 = add nuw nsw i64 %17, 1
  %19 = icmp ugt i32 %7, 31
  %20 = icmp eq i32 %1, 1
  %21 = and i1 %19, %20
  %22 = and i64 %17, 4294967264
  %23 = icmp eq i64 %22, %17
  %24 = and i64 %17, 1
  %25 = icmp eq i64 %24, 0
  %26 = sub nsw i64 0, %17
  br label %27

27:                                               ; preds = %10, %134
  %28 = phi i64 [ 0, %10 ], [ %137, %134 ]
  %29 = phi i64 [ 0, %10 ], [ %135, %134 ]
  %30 = mul i64 %28, %14
  %31 = getelementptr i8, i8* %2, i64 %30
  %32 = add i64 %30, %17
  %33 = getelementptr i8, i8* %2, i64 %32
  %34 = mul i64 %28, %15
  %35 = getelementptr i8, i8* %4, i64 %34
  %36 = add i64 %34, %17
  %37 = getelementptr i8, i8* %4, i64 %36
  %38 = shl nuw nsw i64 %28, 1
  %39 = getelementptr i8, i8* %0, i64 %38
  %40 = add i64 %18, %38
  %41 = getelementptr i8, i8* %0, i64 %40
  br i1 %12, label %42, label %134

42:                                               ; preds = %27
  %43 = lshr exact i64 %29, 1
  %44 = mul nsw i64 %43, %14
  %45 = mul nsw i64 %43, %15
  br i1 %21, label %46, label %88

46:                                               ; preds = %42
  %47 = icmp ult i8* %31, %37
  %48 = icmp ult i8* %35, %33
  %49 = and i1 %47, %48
  %50 = icmp ult i8* %31, %41
  %51 = icmp ult i8* %39, %33
  %52 = and i1 %50, %51
  %53 = or i1 %49, %52
  %54 = icmp ult i8* %35, %41
  %55 = icmp ult i8* %39, %37
  %56 = and i1 %54, %55
  %57 = or i1 %53, %56
  br i1 %57, label %88, label %58

58:                                               ; preds = %46, %58
  %59 = phi i64 [ %85, %58 ], [ 0, %46 ]
  %60 = mul nsw i64 %59, %13
  %61 = add nsw i64 %60, %29
  %62 = getelementptr inbounds i8, i8* %0, i64 %61
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1, !alias.scope !10
  %65 = getelementptr inbounds i8, i8* %62, i64 16
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1, !alias.scope !10
  %68 = add nsw i64 %59, %44
  %69 = getelementptr inbounds i8, i8* %2, i64 %68
  %70 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %64, <16 x i8>* %70, align 1, !alias.scope !13, !noalias !15
  %71 = getelementptr inbounds i8, i8* %69, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %72, align 1, !alias.scope !13, !noalias !15
  %73 = or i64 %61, 1
  %74 = getelementptr inbounds i8, i8* %0, i64 %73
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1, !alias.scope !10
  %77 = getelementptr inbounds i8, i8* %74, i64 16
  %78 = bitcast i8* %77 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1, !alias.scope !10
  %80 = add nsw i64 %59, %45
  %81 = getelementptr inbounds i8, i8* %4, i64 %80
  %82 = bitcast i8* %81 to <16 x i8>*
  store <16 x i8> %76, <16 x i8>* %82, align 1, !alias.scope !17, !noalias !10
  %83 = getelementptr inbounds i8, i8* %81, i64 16
  %84 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %79, <16 x i8>* %84, align 1, !alias.scope !17, !noalias !10
  %85 = add i64 %59, 32
  %86 = icmp eq i64 %85, %22
  br i1 %86, label %87, label %58, !llvm.loop !18

87:                                               ; preds = %58
  br i1 %23, label %134, label %88

88:                                               ; preds = %42, %87, %46
  %89 = phi i64 [ 0, %46 ], [ 0, %42 ], [ %22, %87 ]
  %90 = xor i64 %89, -1
  br i1 %25, label %104, label %91

91:                                               ; preds = %88
  %92 = mul nsw i64 %89, %13
  %93 = add nsw i64 %92, %29
  %94 = getelementptr inbounds i8, i8* %0, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = add nsw i64 %89, %44
  %97 = getelementptr inbounds i8, i8* %2, i64 %96
  store i8 %95, i8* %97, align 1
  %98 = or i64 %93, 1
  %99 = getelementptr inbounds i8, i8* %0, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = add nsw i64 %89, %45
  %102 = getelementptr inbounds i8, i8* %4, i64 %101
  store i8 %100, i8* %102, align 1
  %103 = or i64 %89, 1
  br label %104

104:                                              ; preds = %91, %88
  %105 = phi i64 [ %103, %91 ], [ %89, %88 ]
  %106 = icmp eq i64 %90, %26
  br i1 %106, label %134, label %107

107:                                              ; preds = %104, %107
  %108 = phi i64 [ %132, %107 ], [ %105, %104 ]
  %109 = mul nsw i64 %108, %13
  %110 = add nsw i64 %109, %29
  %111 = getelementptr inbounds i8, i8* %0, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = add nsw i64 %108, %44
  %114 = getelementptr inbounds i8, i8* %2, i64 %113
  store i8 %112, i8* %114, align 1
  %115 = add nsw i64 %110, 1
  %116 = getelementptr inbounds i8, i8* %0, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = add nsw i64 %108, %45
  %119 = getelementptr inbounds i8, i8* %4, i64 %118
  store i8 %117, i8* %119, align 1
  %120 = add nuw nsw i64 %108, 1
  %121 = mul nsw i64 %120, %13
  %122 = add nsw i64 %121, %29
  %123 = getelementptr inbounds i8, i8* %0, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = add nsw i64 %120, %44
  %126 = getelementptr inbounds i8, i8* %2, i64 %125
  store i8 %124, i8* %126, align 1
  %127 = add nsw i64 %122, 1
  %128 = getelementptr inbounds i8, i8* %0, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = add nsw i64 %120, %45
  %131 = getelementptr inbounds i8, i8* %4, i64 %130
  store i8 %129, i8* %131, align 1
  %132 = add nuw nsw i64 %108, 2
  %133 = icmp eq i64 %132, %17
  br i1 %133, label %134, label %107, !llvm.loop !19

134:                                              ; preds = %104, %107, %87, %27
  %135 = add nuw nsw i64 %29, 2
  %136 = icmp slt i64 %135, %16
  %137 = add i64 %28, 1
  br i1 %136, label %27, label %138

138:                                              ; preds = %134, %8
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = !{!16, !11}
!16 = distinct !{!16, !12}
!17 = !{!16}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !8}
