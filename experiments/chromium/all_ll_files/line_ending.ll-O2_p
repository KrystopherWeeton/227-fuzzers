; ModuleID = '../../third_party/blink/renderer/platform/wtf/text/line_ending.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/text/line_ending.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm = comdat any

@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF24NormalizeLineEndingsToLFERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERNS_6VectorIcLj0ENS_18PartitionAllocatorEEE(%"class.std::__1::basic_string"* readonly dereferenceable(24), %"class.WTF::Vector"* nocapture dereferenceable(16)) local_unnamed_addr #0 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %10 = select i1 %6, i8* %8, i8* %9
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = zext i8 %5 to i64
  %14 = select i1 %6, i64 %12, i64 %13
  %15 = getelementptr inbounds i8, i8* %10, i64 %14
  %16 = icmp sgt i64 %14, 0
  br i1 %16, label %17, label %36

17:                                               ; preds = %2, %31
  %18 = phi i32 [ %34, %31 ], [ 0, %2 ]
  %19 = phi i8* [ %33, %31 ], [ %10, %2 ]
  %20 = phi i8 [ %32, %31 ], [ 0, %2 ]
  %21 = getelementptr inbounds i8, i8* %19, i64 1
  %22 = load i8, i8* %19, align 1
  %23 = icmp eq i8 %22, 13
  br i1 %23, label %24, label %29

24:                                               ; preds = %17
  %25 = load i8, i8* %21, align 1
  %26 = icmp eq i8 %25, 10
  br i1 %26, label %27, label %29

27:                                               ; preds = %24
  %28 = getelementptr inbounds i8, i8* %19, i64 2
  br label %31

29:                                               ; preds = %24, %17
  %30 = select i1 %23, i8 1, i8 %20
  br label %31

31:                                               ; preds = %29, %27
  %32 = phi i8 [ 1, %27 ], [ %30, %29 ]
  %33 = phi i8* [ %28, %27 ], [ %21, %29 ]
  %34 = add i32 %18, 1
  %35 = icmp ult i8* %33, %15
  br i1 %35, label %17, label %36

36:                                               ; preds = %31, %2
  %37 = phi i8 [ 0, %2 ], [ %32, %31 ]
  %38 = phi i32 [ 0, %2 ], [ %34, %31 ]
  %39 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = add i32 %40, %38
  %42 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = icmp ult i32 %43, %41
  br i1 %44, label %45, label %78

45:                                               ; preds = %36
  %46 = lshr i32 %43, 2
  %47 = add nuw i32 %43, 1
  %48 = add i32 %47, %46
  %49 = icmp ugt i32 %48, 4
  %50 = select i1 %49, i32 %48, i32 4
  %51 = icmp ugt i32 %50, %41
  %52 = select i1 %51, i32 %50, i32 %41
  %53 = icmp ult i32 %43, %52
  br i1 %53, label %54, label %78, !prof !2

54:                                               ; preds = %45
  %55 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = icmp eq i8* %56, null
  %58 = zext i32 %52 to i64
  %59 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %58) #6
  %60 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %59) #6
  %61 = ptrtoint i8* %60 to i64
  br i1 %57, label %62, label %65

62:                                               ; preds = %54
  %63 = bitcast %"class.WTF::Vector"* %1 to i64*
  store atomic i64 %61, i64* %63 monotonic, align 8
  %64 = trunc i64 %59 to i32
  store i32 %64, i32* %42, align 8
  br label %78

65:                                               ; preds = %54
  %66 = load i8*, i8** %55, align 8
  %67 = icmp ne i8* %60, null
  %68 = icmp ne i8* %66, null
  %69 = and i1 %67, %68
  br i1 %69, label %70, label %74, !prof !2

70:                                               ; preds = %65
  %71 = load i32, i32* %39, align 4
  %72 = zext i32 %71 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %60, i8* nonnull align 1 %66, i64 %72, i1 false) #6
  %73 = load i8*, i8** %55, align 8
  br label %74

74:                                               ; preds = %70, %65
  %75 = phi i8* [ %66, %65 ], [ %73, %70 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %75) #6
  %76 = bitcast %"class.WTF::Vector"* %1 to i64*
  store atomic i64 %61, i64* %76 monotonic, align 8
  %77 = trunc i64 %59 to i32
  store i32 %77, i32* %42, align 8
  br label %78

78:                                               ; preds = %74, %62, %45, %36
  %79 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = load i32, i32* %39, align 4
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %80, i64 %82
  %84 = zext i32 %41 to i64
  %85 = getelementptr inbounds i8, i8* %80, i64 %84
  %86 = ptrtoint i8* %85 to i64
  %87 = ptrtoint i8* %83 to i64
  %88 = sub i64 %86, %87
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %83, i8 0, i64 %88, i1 false) #6
  store i32 %41, i32* %39, align 4
  %89 = load i8*, i8** %79, align 8
  %90 = zext i32 %40 to i64
  %91 = getelementptr inbounds i8, i8* %89, i64 %90
  %92 = and i8 %37, 1
  %93 = icmp eq i8 %92, 0
  %94 = load i8, i8* %4, align 1
  %95 = icmp slt i8 %94, 0
  br i1 %93, label %104, label %96

96:                                               ; preds = %78
  %97 = load i8*, i8** %7, align 8
  %98 = load i64, i64* %11, align 8
  %99 = zext i8 %94 to i64
  %100 = select i1 %95, i8* %97, i8* %9
  %101 = select i1 %95, i64 %98, i64 %99
  %102 = getelementptr inbounds i8, i8* %100, i64 %101
  %103 = icmp ult i8* %10, %102
  br i1 %103, label %108, label %132

104:                                              ; preds = %78
  %105 = load i64, i64* %11, align 8
  %106 = zext i8 %94 to i64
  %107 = select i1 %95, i64 %105, i64 %106
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %91, i8* align 1 %10, i64 %107, i1 false)
  br label %132

108:                                              ; preds = %96, %119
  %109 = phi i8* [ %122, %119 ], [ %91, %96 ]
  %110 = phi i8* [ %121, %119 ], [ %10, %96 ]
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  %112 = load i8, i8* %110, align 1
  %113 = icmp eq i8 %112, 13
  br i1 %113, label %114, label %119

114:                                              ; preds = %108
  %115 = load i8, i8* %111, align 1
  %116 = icmp eq i8 %115, 10
  %117 = getelementptr inbounds i8, i8* %110, i64 2
  %118 = select i1 %116, i8* %117, i8* %111
  br label %119

119:                                              ; preds = %114, %108
  %120 = phi i8 [ %112, %108 ], [ 10, %114 ]
  %121 = phi i8* [ %111, %108 ], [ %118, %114 ]
  store i8 %120, i8* %109, align 1
  %122 = getelementptr inbounds i8, i8* %109, i64 1
  %123 = load i8, i8* %4, align 1
  %124 = icmp slt i8 %123, 0
  %125 = load i8*, i8** %7, align 8
  %126 = load i64, i64* %11, align 8
  %127 = zext i8 %123 to i64
  %128 = select i1 %124, i8* %125, i8* %9
  %129 = select i1 %124, i64 %126, i64 %127
  %130 = getelementptr inbounds i8, i8* %128, i64 %129
  %131 = icmp ult i8* %121, %130
  br i1 %131, label %108, label %132

132:                                              ; preds = %119, %96, %104
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF26NormalizeLineEndingsToCRLFERKNS_6StringE(%"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i16*, align 8
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %272, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  br i1 %10, label %13, label %28

13:                                               ; preds = %7
  %14 = and i32 %12, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %272

16:                                               ; preds = %13
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #6
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !3

25:                                               ; preds = %16
  tail call void @llvm.trap() #6
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %272

28:                                               ; preds = %7
  %29 = and i32 %12, 1
  %30 = icmp eq i32 %29, 0
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 1
  br i1 %30, label %152, label %32

32:                                               ; preds = %28
  %33 = bitcast %"class.WTF::StringImpl"* %31 to i8*
  %34 = zext i32 %9 to i64
  %35 = getelementptr inbounds i8, i8* %33, i64 %34
  br label %36

36:                                               ; preds = %32, %52
  %37 = phi i8* [ %39, %52 ], [ %33, %32 ]
  %38 = phi i32 [ %53, %52 ], [ 0, %32 ]
  %39 = getelementptr inbounds i8, i8* %37, i64 1
  %40 = load i8, i8* %37, align 1
  switch i8 %40, label %50 [
    i8 13, label %41
    i8 10, label %48
  ]

41:                                               ; preds = %36
  %42 = icmp ult i8* %39, %35
  br i1 %42, label %43, label %46

43:                                               ; preds = %41
  %44 = load i8, i8* %39, align 1
  %45 = icmp eq i8 %44, 10
  br i1 %45, label %52, label %46

46:                                               ; preds = %43, %41
  %47 = add i32 %38, 2
  br label %52

48:                                               ; preds = %36
  %49 = add i32 %38, 2
  br label %52

50:                                               ; preds = %36
  %51 = add i32 %38, 1
  br label %52

52:                                               ; preds = %50, %48, %46, %43
  %53 = phi i32 [ %47, %46 ], [ %38, %43 ], [ %49, %48 ], [ %51, %50 ]
  %54 = icmp ult i8* %39, %35
  br i1 %54, label %36, label %55

55:                                               ; preds = %52
  %56 = icmp eq i32 %53, %9
  br i1 %56, label %57, label %73

57:                                               ; preds = %55
  %58 = load atomic i32, i32* %11 monotonic, align 4
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %272

61:                                               ; preds = %57
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = zext i32 %63 to i33
  %65 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %64, i33 1) #6
  %66 = extractvalue { i33, i1 } %65, 1
  %67 = extractvalue { i33, i1 } %65, 0
  %68 = icmp slt i33 %67, 0
  %69 = or i1 %66, %68
  br i1 %69, label %70, label %71, !prof !3

70:                                               ; preds = %61
  tail call void @llvm.trap() #6
  unreachable

71:                                               ; preds = %61
  %72 = trunc i33 %67 to i32
  store i32 %72, i32* %62, align 4
  br label %272

73:                                               ; preds = %55
  %74 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %2, align 8
  %75 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %53, i8** nonnull dereferenceable(8) %2) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #6
  %76 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %77 = icmp eq %"class.WTF::StringImpl"* %76, null
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 1
  %79 = bitcast %"class.WTF::StringImpl"* %78 to i8*
  %80 = select i1 %77, i8* null, i8* %79
  %81 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %81, label %89, label %82

82:                                               ; preds = %73
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %89, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 1
  %88 = bitcast %"class.WTF::StringImpl"* %87 to i8*
  br label %89

89:                                               ; preds = %73, %82, %86
  %90 = phi i8* [ %88, %86 ], [ null, %82 ], [ null, %73 ]
  %91 = getelementptr inbounds i8, i8* %80, i64 %34
  br label %92

92:                                               ; preds = %89, %110
  %93 = phi i8* [ %95, %110 ], [ %80, %89 ]
  %94 = phi i8* [ %111, %110 ], [ %90, %89 ]
  %95 = getelementptr inbounds i8, i8* %93, i64 1
  %96 = load i8, i8* %93, align 1
  switch i8 %96, label %108 [
    i8 13, label %97
    i8 10, label %105
  ]

97:                                               ; preds = %92
  %98 = icmp ult i8* %95, %91
  br i1 %98, label %99, label %102

99:                                               ; preds = %97
  %100 = load i8, i8* %95, align 1
  %101 = icmp eq i8 %100, 10
  br i1 %101, label %110, label %102

102:                                              ; preds = %99, %97
  %103 = getelementptr inbounds i8, i8* %94, i64 1
  store i8 13, i8* %94, align 1
  %104 = getelementptr inbounds i8, i8* %94, i64 2
  store i8 10, i8* %103, align 1
  br label %110

105:                                              ; preds = %92
  %106 = getelementptr inbounds i8, i8* %94, i64 1
  store i8 13, i8* %94, align 1
  %107 = getelementptr inbounds i8, i8* %94, i64 2
  store i8 10, i8* %106, align 1
  br label %110

108:                                              ; preds = %92
  %109 = getelementptr inbounds i8, i8* %94, i64 1
  store i8 %96, i8* %94, align 1
  br label %110

110:                                              ; preds = %108, %105, %102, %99
  %111 = phi i8* [ %104, %102 ], [ %94, %99 ], [ %107, %105 ], [ %109, %108 ]
  %112 = icmp ult i8* %95, %91
  br i1 %112, label %92, label %113

113:                                              ; preds = %110
  br i1 %81, label %118, label %114

114:                                              ; preds = %113
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 1
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %272

118:                                              ; preds = %114, %113
  %119 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %120 = icmp eq %"class.WTF::StringImpl"* %119, null
  br i1 %120, label %138, label %121

121:                                              ; preds = %118
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %119, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %123 = load atomic i32, i32* %122 monotonic, align 4
  %124 = and i32 %123, 2
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %138

126:                                              ; preds = %121
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %119, i64 0, i32 0
  %128 = load i32, i32* %127, align 4
  %129 = zext i32 %128 to i33
  %130 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %129, i33 1) #6
  %131 = extractvalue { i33, i1 } %130, 1
  %132 = extractvalue { i33, i1 } %130, 0
  %133 = icmp slt i33 %132, 0
  %134 = or i1 %131, %133
  br i1 %134, label %135, label %136, !prof !3

135:                                              ; preds = %126
  call void @llvm.trap() #6
  unreachable

136:                                              ; preds = %126
  %137 = trunc i33 %132 to i32
  store i32 %137, i32* %127, align 4
  br label %138

138:                                              ; preds = %118, %121, %136
  br i1 %81, label %272, label %139

139:                                              ; preds = %138
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %141 = load atomic i32, i32* %140 monotonic, align 4
  %142 = and i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %145 = load i32, i32* %144, align 4
  br i1 %143, label %146, label %148

146:                                              ; preds = %139
  %147 = add i32 %145, -1
  store i32 %147, i32* %144, align 4
  br label %148

148:                                              ; preds = %146, %139
  %149 = phi i32 [ %147, %146 ], [ %145, %139 ]
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %272

151:                                              ; preds = %148
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %75) #6
  br label %272

152:                                              ; preds = %28
  %153 = bitcast %"class.WTF::StringImpl"* %31 to i16*
  %154 = zext i32 %9 to i64
  %155 = getelementptr inbounds i16, i16* %153, i64 %154
  br label %156

156:                                              ; preds = %152, %172
  %157 = phi i16* [ %159, %172 ], [ %153, %152 ]
  %158 = phi i32 [ %173, %172 ], [ 0, %152 ]
  %159 = getelementptr inbounds i16, i16* %157, i64 1
  %160 = load i16, i16* %157, align 2
  switch i16 %160, label %170 [
    i16 13, label %161
    i16 10, label %168
  ]

161:                                              ; preds = %156
  %162 = icmp ult i16* %159, %155
  br i1 %162, label %163, label %166

163:                                              ; preds = %161
  %164 = load i16, i16* %159, align 2
  %165 = icmp eq i16 %164, 10
  br i1 %165, label %172, label %166

166:                                              ; preds = %163, %161
  %167 = add i32 %158, 2
  br label %172

168:                                              ; preds = %156
  %169 = add i32 %158, 2
  br label %172

170:                                              ; preds = %156
  %171 = add i32 %158, 1
  br label %172

172:                                              ; preds = %170, %168, %166, %163
  %173 = phi i32 [ %167, %166 ], [ %158, %163 ], [ %169, %168 ], [ %171, %170 ]
  %174 = icmp ult i16* %159, %155
  br i1 %174, label %156, label %175

175:                                              ; preds = %172
  %176 = icmp eq i32 %173, %9
  br i1 %176, label %177, label %193

177:                                              ; preds = %175
  %178 = load atomic i32, i32* %11 monotonic, align 4
  %179 = and i32 %178, 2
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %272

181:                                              ; preds = %177
  %182 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %183 = load i32, i32* %182, align 4
  %184 = zext i32 %183 to i33
  %185 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %184, i33 1) #6
  %186 = extractvalue { i33, i1 } %185, 1
  %187 = extractvalue { i33, i1 } %185, 0
  %188 = icmp slt i33 %187, 0
  %189 = or i1 %186, %188
  br i1 %189, label %190, label %191, !prof !3

190:                                              ; preds = %181
  tail call void @llvm.trap() #6
  unreachable

191:                                              ; preds = %181
  %192 = trunc i33 %187 to i32
  store i32 %192, i32* %182, align 4
  br label %272

193:                                              ; preds = %175
  %194 = bitcast i16** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %194) #6
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %3, align 8
  %195 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %173, i16** nonnull dereferenceable(8) %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %194) #6
  %196 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %197 = icmp eq %"class.WTF::StringImpl"* %196, null
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %196, i64 1
  %199 = bitcast %"class.WTF::StringImpl"* %198 to i16*
  %200 = select i1 %197, i16* null, i16* %199
  %201 = icmp eq %"class.WTF::StringImpl"* %195, null
  br i1 %201, label %209, label %202

202:                                              ; preds = %193
  %203 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %195, i64 0, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %209, label %206

206:                                              ; preds = %202
  %207 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %195, i64 1
  %208 = bitcast %"class.WTF::StringImpl"* %207 to i16*
  br label %209

209:                                              ; preds = %193, %202, %206
  %210 = phi i16* [ %208, %206 ], [ null, %202 ], [ null, %193 ]
  %211 = getelementptr inbounds i16, i16* %200, i64 %154
  br label %212

212:                                              ; preds = %209, %230
  %213 = phi i16* [ %215, %230 ], [ %200, %209 ]
  %214 = phi i16* [ %231, %230 ], [ %210, %209 ]
  %215 = getelementptr inbounds i16, i16* %213, i64 1
  %216 = load i16, i16* %213, align 2
  switch i16 %216, label %228 [
    i16 13, label %217
    i16 10, label %225
  ]

217:                                              ; preds = %212
  %218 = icmp ult i16* %215, %211
  br i1 %218, label %219, label %222

219:                                              ; preds = %217
  %220 = load i16, i16* %215, align 2
  %221 = icmp eq i16 %220, 10
  br i1 %221, label %230, label %222

222:                                              ; preds = %219, %217
  %223 = getelementptr inbounds i16, i16* %214, i64 1
  store i16 13, i16* %214, align 2
  %224 = getelementptr inbounds i16, i16* %214, i64 2
  store i16 10, i16* %223, align 2
  br label %230

225:                                              ; preds = %212
  %226 = getelementptr inbounds i16, i16* %214, i64 1
  store i16 13, i16* %214, align 2
  %227 = getelementptr inbounds i16, i16* %214, i64 2
  store i16 10, i16* %226, align 2
  br label %230

228:                                              ; preds = %212
  %229 = getelementptr inbounds i16, i16* %214, i64 1
  store i16 %216, i16* %214, align 2
  br label %230

230:                                              ; preds = %228, %225, %222, %219
  %231 = phi i16* [ %224, %222 ], [ %214, %219 ], [ %227, %225 ], [ %229, %228 ]
  %232 = icmp ult i16* %215, %211
  br i1 %232, label %212, label %233

233:                                              ; preds = %230
  br i1 %201, label %238, label %234

234:                                              ; preds = %233
  %235 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %195, i64 0, i32 1
  %236 = load i32, i32* %235, align 4
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %238, label %272

238:                                              ; preds = %234, %233
  %239 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %240 = icmp eq %"class.WTF::StringImpl"* %239, null
  br i1 %240, label %258, label %241

241:                                              ; preds = %238
  %242 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %239, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %243 = load atomic i32, i32* %242 monotonic, align 4
  %244 = and i32 %243, 2
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %258

246:                                              ; preds = %241
  %247 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %239, i64 0, i32 0
  %248 = load i32, i32* %247, align 4
  %249 = zext i32 %248 to i33
  %250 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %249, i33 1) #6
  %251 = extractvalue { i33, i1 } %250, 1
  %252 = extractvalue { i33, i1 } %250, 0
  %253 = icmp slt i33 %252, 0
  %254 = or i1 %251, %253
  br i1 %254, label %255, label %256, !prof !3

255:                                              ; preds = %246
  call void @llvm.trap() #6
  unreachable

256:                                              ; preds = %246
  %257 = trunc i33 %252 to i32
  store i32 %257, i32* %247, align 4
  br label %258

258:                                              ; preds = %238, %241, %256
  br i1 %201, label %272, label %259

259:                                              ; preds = %258
  %260 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %195, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %261 = load atomic i32, i32* %260 monotonic, align 4
  %262 = and i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %195, i64 0, i32 0
  %265 = load i32, i32* %264, align 4
  br i1 %263, label %266, label %268

266:                                              ; preds = %259
  %267 = add i32 %265, -1
  store i32 %267, i32* %264, align 4
  br label %268

268:                                              ; preds = %266, %259
  %269 = phi i32 [ %267, %266 ], [ %265, %259 ]
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %271, label %272

271:                                              ; preds = %268
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %195) #6
  br label %272

272:                                              ; preds = %234, %114, %1, %271, %268, %258, %191, %177, %151, %148, %138, %71, %57, %26, %13
  %273 = phi %"class.WTF::StringImpl"* [ %5, %13 ], [ %5, %26 ], [ %5, %57 ], [ %5, %71 ], [ %119, %138 ], [ %119, %148 ], [ %119, %151 ], [ %5, %177 ], [ %5, %191 ], [ %239, %258 ], [ %239, %268 ], [ %239, %271 ], [ null, %1 ], [ %75, %114 ], [ %195, %234 ]
  ret %"class.WTF::StringImpl"* %273
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF28NormalizeLineEndingsToNativeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERNS_6VectorIcLj0ENS_18PartitionAllocatorEEE(%"class.std::__1::basic_string"* readonly dereferenceable(24), %"class.WTF::Vector"* nocapture dereferenceable(16)) local_unnamed_addr #0 {
  tail call void @_ZN3WTF24NormalizeLineEndingsToLFERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERNS_6VectorIcLj0ENS_18PartitionAllocatorEEE(%"class.std::__1::basic_string"* dereferenceable(24) %0, %"class.WTF::Vector"* dereferenceable(16) %1)
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

declare i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #6
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #6
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #6
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #6
  ret i64 %20
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #4

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
