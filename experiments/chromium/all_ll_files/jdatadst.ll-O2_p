; ModuleID = '../../third_party/libjpeg_turbo/jdatadst.c'
source_filename = "../../third_party/libjpeg_turbo/jdatadst.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder*, %struct.jpeg_scan_info*, i32 }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, void (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_comp_master = type opaque
%struct.jpeg_c_main_controller = type opaque
%struct.jpeg_c_prep_controller = type opaque
%struct.jpeg_c_coef_controller = type opaque
%struct.jpeg_marker_writer = type opaque
%struct.jpeg_color_converter = type opaque
%struct.jpeg_downsampler = type opaque
%struct.jpeg_forward_dct = type opaque
%struct.jpeg_entropy_encoder = type opaque
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.my_destination_mgr = type { %struct.jpeg_destination_mgr, %struct._IO_FILE*, i8* }
%struct.my_mem_destination_mgr = type { %struct.jpeg_destination_mgr, i8**, i64*, i8*, i8*, i64 }

; Function Attrs: nounwind ssp uwtable
define hidden void @jpeg_stdio_dest(%struct.jpeg_compress_struct*, %struct._IO_FILE*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 6
  %4 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %3, align 8
  %5 = icmp eq %struct.jpeg_destination_mgr* %4, null
  br i1 %5, label %6, label %15

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %8 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %7, align 8
  %9 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %8, i64 0, i32 0
  %10 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %9, align 8
  %11 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %12 = tail call i8* %10(%struct.jpeg_common_struct* %11, i32 0, i64 56) #7
  %13 = bitcast %struct.jpeg_destination_mgr** %3 to i8**
  store i8* %12, i8** %13, align 8
  %14 = bitcast i8* %12 to %struct.my_destination_mgr*
  br label %30

15:                                               ; preds = %2
  %16 = bitcast %struct.jpeg_destination_mgr* %4 to %struct.my_destination_mgr*
  %17 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %4, i64 0, i32 2
  %18 = load void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)** %17, align 8
  %19 = icmp eq void (%struct.jpeg_compress_struct*)* %18, @init_destination
  br i1 %19, label %30, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %22 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %21, align 8
  %23 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %22, i64 0, i32 5
  store i32 23, i32* %23, align 8
  %24 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %21, align 8
  %25 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %24, i64 0, i32 0
  %26 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %25, align 8
  %27 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %26(%struct.jpeg_common_struct* %27) #7
  %28 = bitcast %struct.jpeg_destination_mgr** %3 to %struct.my_destination_mgr**
  %29 = load %struct.my_destination_mgr*, %struct.my_destination_mgr** %28, align 8
  br label %30

30:                                               ; preds = %15, %20, %6
  %31 = phi %struct.my_destination_mgr* [ %16, %15 ], [ %29, %20 ], [ %14, %6 ]
  %32 = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %31, i64 0, i32 0, i32 2
  store void (%struct.jpeg_compress_struct*)* @init_destination, void (%struct.jpeg_compress_struct*)** %32, align 8
  %33 = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %31, i64 0, i32 0, i32 3
  store i32 (%struct.jpeg_compress_struct*)* @empty_output_buffer, i32 (%struct.jpeg_compress_struct*)** %33, align 8
  %34 = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %31, i64 0, i32 0, i32 4
  store void (%struct.jpeg_compress_struct*)* @term_destination, void (%struct.jpeg_compress_struct*)** %34, align 8
  %35 = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %31, i64 0, i32 1
  store %struct._IO_FILE* %1, %struct._IO_FILE** %35, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @init_destination(%struct.jpeg_compress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 6
  %3 = bitcast %struct.jpeg_destination_mgr** %2 to %struct.my_destination_mgr**
  %4 = load %struct.my_destination_mgr*, %struct.my_destination_mgr** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %6 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %5, align 8
  %7 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %6, i64 0, i32 0
  %8 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %7, align 8
  %9 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %10 = tail call i8* %8(%struct.jpeg_common_struct* %9, i32 1, i64 4096) #7
  %11 = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %4, i64 0, i32 2
  store i8* %10, i8** %11, align 8
  %12 = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %4, i64 0, i32 0, i32 0
  store i8* %10, i8** %12, align 8
  %13 = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %4, i64 0, i32 0, i32 1
  store i64 4096, i64* %13, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @empty_output_buffer(%struct.jpeg_compress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 6
  %3 = bitcast %struct.jpeg_destination_mgr** %2 to %struct.my_destination_mgr**
  %4 = load %struct.my_destination_mgr*, %struct.my_destination_mgr** %3, align 8
  %5 = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %4, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %4, i64 0, i32 1
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %9 = tail call i64 @fwrite(i8* %6, i64 1, i64 4096, %struct._IO_FILE* %8)
  %10 = icmp eq i64 %9, 4096
  br i1 %10, label %19, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %13 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %14 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %13, i64 0, i32 5
  store i32 37, i32* %14, align 8
  %15 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %16 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %15, i64 0, i32 0
  %17 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %16, align 8
  %18 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %17(%struct.jpeg_common_struct* %18) #7
  br label %19

19:                                               ; preds = %1, %11
  %20 = bitcast i8** %5 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %struct.my_destination_mgr* %4 to i64*
  store i64 %21, i64* %22, align 8
  %23 = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %4, i64 0, i32 0, i32 1
  store i64 4096, i64* %23, align 8
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal void @term_destination(%struct.jpeg_compress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 6
  %3 = bitcast %struct.jpeg_destination_mgr** %2 to %struct.my_destination_mgr**
  %4 = load %struct.my_destination_mgr*, %struct.my_destination_mgr** %3, align 8
  %5 = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %4, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 4096, %6
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %24, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %4, i64 0, i32 2
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %4, i64 0, i32 1
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %12, align 8
  %14 = tail call i64 @fwrite(i8* %11, i64 1, i64 %7, %struct._IO_FILE* %13)
  %15 = icmp eq i64 %14, %7
  br i1 %15, label %24, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %18 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %17, align 8
  %19 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %18, i64 0, i32 5
  store i32 37, i32* %19, align 8
  %20 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %17, align 8
  %21 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %20, i64 0, i32 0
  %22 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %21, align 8
  %23 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %22(%struct.jpeg_common_struct* %23) #7
  br label %24

24:                                               ; preds = %9, %1, %16
  %25 = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %4, i64 0, i32 1
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %25, align 8
  %27 = tail call i32 @fflush(%struct._IO_FILE* %26)
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %25, align 8
  %29 = tail call i32 @ferror(%struct._IO_FILE* %28) #7
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %39, label %31

31:                                               ; preds = %24
  %32 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %33 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %32, align 8
  %34 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %33, i64 0, i32 5
  store i32 37, i32* %34, align 8
  %35 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %32, align 8
  %36 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %35, i64 0, i32 0
  %37 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %36, align 8
  %38 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %37(%struct.jpeg_common_struct* %38) #7
  br label %39

39:                                               ; preds = %24, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @jpeg_mem_dest(%struct.jpeg_compress_struct*, i8**, i64*) local_unnamed_addr #0 {
  %4 = icmp eq i8** %1, null
  %5 = icmp eq i64* %2, null
  %6 = or i1 %4, %5
  br i1 %6, label %7, label %15

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %9 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 5
  store i32 23, i32* %10, align 8
  %11 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %8, align 8
  %12 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %11, i64 0, i32 0
  %13 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %12, align 8
  %14 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %13(%struct.jpeg_common_struct* %14) #7
  br label %15

15:                                               ; preds = %3, %7
  %16 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 6
  %17 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %16, align 8
  %18 = icmp eq %struct.jpeg_destination_mgr* %17, null
  br i1 %18, label %19, label %28

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %21 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %20, align 8
  %22 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %21, i64 0, i32 0
  %23 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %22, align 8
  %24 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %25 = tail call i8* %23(%struct.jpeg_common_struct* %24, i32 0, i64 80) #7
  %26 = bitcast %struct.jpeg_destination_mgr** %16 to i8**
  store i8* %25, i8** %26, align 8
  %27 = bitcast i8* %25 to %struct.my_mem_destination_mgr*
  br label %43

28:                                               ; preds = %15
  %29 = bitcast %struct.jpeg_destination_mgr* %17 to %struct.my_mem_destination_mgr*
  %30 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %17, i64 0, i32 2
  %31 = load void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)** %30, align 8
  %32 = icmp eq void (%struct.jpeg_compress_struct*)* %31, @init_mem_destination
  br i1 %32, label %43, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %35 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %34, align 8
  %36 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %35, i64 0, i32 5
  store i32 23, i32* %36, align 8
  %37 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %34, align 8
  %38 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %37, i64 0, i32 0
  %39 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %38, align 8
  %40 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %39(%struct.jpeg_common_struct* %40) #7
  %41 = bitcast %struct.jpeg_destination_mgr** %16 to %struct.my_mem_destination_mgr**
  %42 = load %struct.my_mem_destination_mgr*, %struct.my_mem_destination_mgr** %41, align 8
  br label %43

43:                                               ; preds = %28, %33, %19
  %44 = phi %struct.my_mem_destination_mgr* [ %29, %28 ], [ %42, %33 ], [ %27, %19 ]
  %45 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %44, i64 0, i32 0, i32 2
  store void (%struct.jpeg_compress_struct*)* @init_mem_destination, void (%struct.jpeg_compress_struct*)** %45, align 8
  %46 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %44, i64 0, i32 0, i32 3
  store i32 (%struct.jpeg_compress_struct*)* @empty_mem_output_buffer, i32 (%struct.jpeg_compress_struct*)** %46, align 8
  %47 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %44, i64 0, i32 0, i32 4
  store void (%struct.jpeg_compress_struct*)* @term_mem_destination, void (%struct.jpeg_compress_struct*)** %47, align 8
  %48 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %44, i64 0, i32 1
  store i8** %1, i8*** %48, align 8
  %49 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %44, i64 0, i32 2
  store i64* %2, i64** %49, align 8
  %50 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %44, i64 0, i32 3
  store i8* null, i8** %50, align 8
  %51 = load i8*, i8** %1, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %57, label %53

53:                                               ; preds = %43
  %54 = ptrtoint i8* %51 to i64
  %55 = load i64, i64* %2, align 8
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %73

57:                                               ; preds = %53, %43
  %58 = tail call noalias i8* @malloc(i64 4096) #7
  store i8* %58, i8** %1, align 8
  store i8* %58, i8** %50, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %60, label %70

60:                                               ; preds = %57
  %61 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %62 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %61, align 8
  %63 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %62, i64 0, i32 5
  store i32 54, i32* %63, align 8
  %64 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %61, align 8
  %65 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %64, i64 0, i32 6, i32 0, i64 0
  store i32 10, i32* %65, align 4
  %66 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %61, align 8
  %67 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %66, i64 0, i32 0
  %68 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %67, align 8
  %69 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %68(%struct.jpeg_common_struct* %69) #7
  br label %70

70:                                               ; preds = %60, %57
  store i64 4096, i64* %2, align 8
  %71 = bitcast i8** %1 to i64*
  %72 = load i64, i64* %71, align 8
  br label %73

73:                                               ; preds = %53, %70
  %74 = phi i64 [ %72, %70 ], [ %54, %53 ]
  %75 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %44, i64 0, i32 4
  %76 = bitcast i8** %75 to i64*
  store i64 %74, i64* %76, align 8
  %77 = bitcast %struct.my_mem_destination_mgr* %44 to i64*
  store i64 %74, i64* %77, align 8
  %78 = load i64, i64* %2, align 8
  %79 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %44, i64 0, i32 5
  store i64 %78, i64* %79, align 8
  %80 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %44, i64 0, i32 0, i32 1
  store i64 %78, i64* %80, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @init_mem_destination(%struct.jpeg_compress_struct* nocapture) #1 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @empty_mem_output_buffer(%struct.jpeg_compress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 6
  %3 = bitcast %struct.jpeg_destination_mgr** %2 to %struct.my_mem_destination_mgr**
  %4 = load %struct.my_mem_destination_mgr*, %struct.my_mem_destination_mgr** %3, align 8
  %5 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %4, i64 0, i32 5
  %6 = load i64, i64* %5, align 8
  %7 = shl i64 %6, 1
  %8 = tail call noalias i8* @malloc(i64 %7) #7
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %20

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %12 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %11, align 8
  %13 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %12, i64 0, i32 5
  store i32 54, i32* %13, align 8
  %14 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %11, align 8
  %15 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %14, i64 0, i32 6, i32 0, i64 0
  store i32 10, i32* %15, align 4
  %16 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %11, align 8
  %17 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %16, i64 0, i32 0
  %18 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %17, align 8
  %19 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %18(%struct.jpeg_common_struct* %19) #7
  br label %20

20:                                               ; preds = %10, %1
  %21 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %4, i64 0, i32 4
  %22 = load i8*, i8** %21, align 8
  %23 = load i64, i64* %5, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %22, i64 %23, i1 false)
  %24 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %4, i64 0, i32 3
  %25 = load i8*, i8** %24, align 8
  tail call void @free(i8* %25) #7
  store i8* %8, i8** %24, align 8
  %26 = load i64, i64* %5, align 8
  %27 = getelementptr inbounds i8, i8* %8, i64 %26
  %28 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %4, i64 0, i32 0, i32 0
  store i8* %27, i8** %28, align 8
  %29 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %4, i64 0, i32 0, i32 1
  store i64 %26, i64* %29, align 8
  store i8* %8, i8** %21, align 8
  store i64 %7, i64* %5, align 8
  ret i32 1
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @term_mem_destination(%struct.jpeg_compress_struct* nocapture readonly) #2 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 6
  %3 = bitcast %struct.jpeg_destination_mgr** %2 to %struct.my_mem_destination_mgr**
  %4 = load %struct.my_mem_destination_mgr*, %struct.my_mem_destination_mgr** %3, align 8
  %5 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %4, i64 0, i32 4
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %4, i64 0, i32 1
  %9 = bitcast i8*** %8 to i64**
  %10 = load i64*, i64** %9, align 8
  store i64 %7, i64* %10, align 8
  %11 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %4, i64 0, i32 5
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %4, i64 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = getelementptr inbounds %struct.my_mem_destination_mgr, %struct.my_mem_destination_mgr* %4, i64 0, i32 2
  %17 = load i64*, i64** %16, align 8
  store i64 %15, i64* %17, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i32 @fflush(%struct._IO_FILE* nocapture) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @ferror(%struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
