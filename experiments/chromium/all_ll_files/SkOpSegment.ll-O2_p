; ModuleID = '../../third_party/skia/src/pathops/SkOpSegment.cpp'
source_filename = "../../third_party/skia/src/pathops/SkOpSegment.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkDCurveSweep = type <{ %struct.SkDCurve, [2 x %struct.SkDVector], i8, i8, [6 x i8] }>
%struct.SkDCurve = type { %union.anon }
%union.anon = type { %struct.SkDCubic }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }
%struct.SkDVector = type { double, double }
%struct.SkPoint = type { float, float }
%struct.SkDLine = type { [2 x %struct.SkDPoint] }
%class.SkIntersections = type <{ [13 x %struct.SkDPoint], [2 x %struct.SkDPoint], [2 x [13 x double]], [2 x i16], [2 x i8], i8, i8, i8, i8, [6 x i8] }>
%struct.SkDQuad = type { [3 x %struct.SkDPoint] }
%class.SkOpAngle = type <{ %struct.SkDCurve, %class.SkDCurveSweep, double, %class.SkLineParameters, %class.SkOpAngle*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, i32, i8, i8, i8, i8, i8, i8, i8, [5 x i8] }>
%class.SkLineParameters = type { double, double, double }
%class.SkOpSegment = type <{ %class.SkOpSpan, %class.SkOpSpanBase, %class.SkOpContour*, %class.SkOpSegment*, %class.SkOpSegment*, %struct.SkPoint*, %struct.SkPathOpsBounds, float, i32, i32, i32, i8, [7 x i8] }>
%class.SkOpSpan = type <{ %class.SkOpSpanBase.base, [2 x i8], %class.SkOpSpan*, %class.SkOpAngle*, %class.SkOpSpanBase*, i32, i32, i32, i32, i32, i8, i8, [2 x i8] }>
%class.SkOpSpanBase.base = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8 }>
%class.SkOpPtT = type <{ double, %struct.SkPoint, %class.SkOpSpanBase*, %class.SkOpPtT*, i8, i8, i8, [5 x i8] }>
%class.SkOpSpanBase = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8, [2 x i8] }>
%class.SkOpContour = type <{ %class.SkOpGlobalState*, %class.SkOpSegment, %class.SkOpSegment*, %class.SkOpContour*, %struct.SkPathOpsBounds, i32, i32, i32, i8, i8, i8, i8, i8, [7 x i8] }>
%class.SkOpGlobalState = type <{ %class.SkArenaAlloc*, %class.SkOpCoincidence*, %class.SkOpContourHead*, i32, i8, i8, i8, i8 }>
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.SkOpCoincidence = type <{ %class.SkCoincidentSpans*, %class.SkCoincidentSpans*, %class.SkOpGlobalState*, i8, i8, i8, i8, i8, [3 x i8] }>
%class.SkCoincidentSpans = type { %class.SkCoincidentSpans*, %class.SkOpPtT*, %class.SkOpPtT*, %class.SkOpPtT*, %class.SkOpPtT* }
%class.SkOpContourHead = type { %class.SkOpContour.base, [7 x i8] }
%class.SkOpContour.base = type <{ %class.SkOpGlobalState*, %class.SkOpSegment, %class.SkOpSegment*, %class.SkOpContour*, %struct.SkPathOpsBounds, i32, i32, i32, i8, i8, i8, i8, i8 }>
%struct.SkPathOpsBounds = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%class.SkPathWriter = type { %class.SkPath, %class.SkTArray, %class.SkTDArray.13, %class.SkPath*, [2 x %class.SkOpPtT*], %class.SkOpPtT* }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%class.SkTArray = type { %class.SkPath*, i64 }
%class.SkTDArray.13 = type { %class.SkOpPtT**, i32, i32 }
%struct.SkDConic = type { %struct.SkDQuad, float }
%class.SkTDArray.14 = type { %class.SkOpSpanBase**, i32, i32 }

$_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_ = comdat any

$_ZNK8SkDPoint19approximatelyDEqualERKS_ = comdat any

@_ZL11gActiveEdge = internal unnamed_addr constant [4 x [2 x [2 x [2 x [2 x i8]]]]] [[2 x [2 x [2 x [2 x i8]]]] [[2 x [2 x [2 x i8]]] [[2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] [[2 x i8] c"\01\00", [2 x i8] c"\01\00"]], [2 x [2 x [2 x i8]]] [[2 x [2 x i8]] [[2 x i8] c"\01\01", [2 x i8] zeroinitializer], [2 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\01\00"]]], [2 x [2 x [2 x [2 x i8]]]] [[2 x [2 x [2 x i8]]] [[2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\00\01"]], [2 x [2 x [2 x i8]]] [[2 x [2 x i8]] [[2 x i8] zeroinitializer, [2 x i8] c"\01\01"], [2 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\01\00"]]], [2 x [2 x [2 x [2 x i8]]]] [[2 x [2 x [2 x i8]]] [[2 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\01\00"], [2 x [2 x i8]] [[2 x i8] c"\01\01", [2 x i8] zeroinitializer]], [2 x [2 x [2 x i8]]] [[2 x [2 x i8]] [[2 x i8] c"\01\00", [2 x i8] c"\01\00"], [2 x [2 x i8]] zeroinitializer]], [2 x [2 x [2 x [2 x i8]]]] [[2 x [2 x [2 x i8]]] [[2 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\01\00"], [2 x [2 x i8]] [[2 x i8] c"\01\00", [2 x i8] c"\00\01"]], [2 x [2 x [2 x i8]]] [[2 x [2 x i8]] [[2 x i8] c"\01\00", [2 x i8] c"\00\01"], [2 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\01\00"]]]], align 16
@_ZL16gUnaryActiveEdge = internal unnamed_addr constant [2 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\01\00"], align 1
@__const._ZNK11SkOpSegment10addCurveToEPK12SkOpSpanBaseS2_P12SkPathWriter.curvePart = private unnamed_addr constant %class.SkDCurveSweep <{ %struct.SkDCurve { %union.anon { %struct.SkDCubic { [4 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }] } } }, [2 x %struct.SkDVector] [%struct.SkDVector { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDVector { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }], i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA" }>, align 8
@_ZL14CurveDSlopeAtT = internal unnamed_addr constant [5 x { double, double } (%struct.SkPoint*, float, double)*] [{ double, double } (%struct.SkPoint*, float, double)* null, { double, double } (%struct.SkPoint*, float, double)* @_ZL15dline_dxdy_at_tPK7SkPointfd, { double, double } (%struct.SkPoint*, float, double)* @_ZL15dquad_dxdy_at_tPK7SkPointfd, { double, double } (%struct.SkPoint*, float, double)* @_ZL16dconic_dxdy_at_tPK7SkPointfd, { double, double } (%struct.SkPoint*, float, double)* @_ZL16dcubic_dxdy_at_tPK7SkPointfd], align 16
@_ZL17CurveIntersectRay = internal unnamed_addr constant [5 x void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*] [void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)* null, void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)* @_ZL18line_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections, void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)* @_ZL18quad_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections, void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)* @_ZL19conic_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections, void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)* @_ZL19cubic_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections], align 16
@__const._ZNK11SkOpSegment18testForCoincidenceEPK7SkOpPtTS2_PK12SkOpSpanBaseS5_PKS_.i = private unnamed_addr constant %class.SkIntersections <{ [13 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }], [2 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }], [2 x [13 x double]] [[13 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [13 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF]], [2 x i16] [i16 -21846, i16 -21846], [2 x i8] c"\AA\AA", i8 -86, i8 -86, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA" }>, align 8
@_ZL15CurveDDSlopeAtT = internal unnamed_addr constant [5 x { double, double } (%struct.SkDCurve*, double)*] [{ double, double } (%struct.SkDCurve*, double)* null, { double, double } (%struct.SkDCurve*, double)* @_ZL16ddline_dxdy_at_tRK8SkDCurved, { double, double } (%struct.SkDCurve*, double)* @_ZL16ddquad_dxdy_at_tRK8SkDCurved, { double, double } (%struct.SkDCurve*, double)* @_ZL17ddconic_dxdy_at_tRK8SkDCurved, { double, double } (%struct.SkDCurve*, double)* @_ZL17ddcubic_dxdy_at_tRK8SkDCurved], align 16
@_ZL15CurveDDPointAtT = internal unnamed_addr constant [5 x { double, double } (%struct.SkDCurve*, double)*] [{ double, double } (%struct.SkDCurve*, double)* null, { double, double } (%struct.SkDCurve*, double)* @_ZL14ddline_xy_at_tRK8SkDCurved, { double, double } (%struct.SkDCurve*, double)* @_ZL14ddquad_xy_at_tRK8SkDCurved, { double, double } (%struct.SkDCurve*, double)* @_ZL15ddconic_xy_at_tRK8SkDCurved, { double, double } (%struct.SkDCurve*, double)* @_ZL15ddcubic_xy_at_tRK8SkDCurved], align 16
@_ZL18CurveDIntersectRay = internal unnamed_addr constant [5 x void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)*] [void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)* null, void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)* @_ZL19dline_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections, void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)* @_ZL19dquad_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections, void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)* @_ZL20dconic_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections, void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)* @_ZL20dcubic_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections], align 16
@_ZL13CurvePointAtT = internal unnamed_addr constant [5 x <2 x float> (%struct.SkPoint*, float, double)*] [<2 x float> (%struct.SkPoint*, float, double)* null, <2 x float> (%struct.SkPoint*, float, double)* @_ZL13fline_xy_at_tPK7SkPointfd, <2 x float> (%struct.SkPoint*, float, double)* @_ZL13fquad_xy_at_tPK7SkPointfd, <2 x float> (%struct.SkPoint*, float, double)* @_ZL14fconic_xy_at_tPK7SkPointfd, <2 x float> (%struct.SkPoint*, float, double)* @_ZL14fcubic_xy_at_tPK7SkPointfd], align 16
@_ZL14CurveDPointAtT = internal unnamed_addr constant [5 x { double, double } (%struct.SkPoint*, float, double)*] [{ double, double } (%struct.SkPoint*, float, double)* null, { double, double } (%struct.SkPoint*, float, double)* @_ZL13dline_xy_at_tPK7SkPointfd, { double, double } (%struct.SkPoint*, float, double)* @_ZL13dquad_xy_at_tPK7SkPointfd, { double, double } (%struct.SkPoint*, float, double)* @_ZL14dconic_xy_at_tPK7SkPointfd, { double, double } (%struct.SkPoint*, float, double)* @_ZL14dcubic_xy_at_tPK7SkPointfd], align 16
@__const._ZN8SkDConic9SubDivideEPK7SkPointfRK8SkDPointS5_ddPf.conic = private unnamed_addr constant { %struct.SkDQuad, float, [4 x i8] } { %struct.SkDQuad { [3 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }] }, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }, align 8
@.str = private unnamed_addr constant [51 x i8] c"../../third_party/skia/include/private/SkTDArray.h\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"assert(%s)\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"SkTFitsIn<int>(count)\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"SkTFitsIn<int>(reserve)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpAngle* @_ZN11SkOpSegment11activeAngleEP12SkOpSpanBasePS1_S2_Pb(%class.SkOpSegment* nocapture readnone, %class.SkOpSpanBase*, %class.SkOpSpanBase** nocapture, %class.SkOpSpanBase** nocapture, i8* nocapture) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = fcmp oeq double %7, 1.000000e+00
  %9 = bitcast %class.SkOpSpanBase* %1 to %class.SkOpSpan*
  %10 = icmp eq %class.SkOpSpanBase* %1, null
  %11 = or i1 %10, %8
  br i1 %11, label %40, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 4
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %22

17:                                               ; preds = %12
  %18 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 7, i64 1
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %40, label %22

22:                                               ; preds = %17, %12
  %23 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 2
  %24 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %23, align 8
  %25 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %3, align 8
  %26 = icmp eq %class.SkOpSpanBase* %25, null
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  store %class.SkOpSpanBase* %1, %class.SkOpSpanBase** %2, align 8
  store %class.SkOpSpanBase* %24, %class.SkOpSpanBase** %3, align 8
  br label %28

28:                                               ; preds = %27, %22
  %29 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %9, i64 0, i32 10
  %30 = load i8, i8* %29, align 4, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %40

32:                                               ; preds = %28
  %33 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 3
  %34 = bitcast %class.SkOpPtT** %33 to i32*
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, -2147483647
  br i1 %36, label %37, label %38

37:                                               ; preds = %32
  store i8 0, i8* %4, align 1
  br label %40

38:                                               ; preds = %32
  %39 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %24, i64 0, i32 0, i32 0
  br label %68

40:                                               ; preds = %37, %28, %17, %5
  %41 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 4
  %42 = load %class.SkOpSpan*, %class.SkOpSpan** %41, align 8
  %43 = icmp eq %class.SkOpSpan* %42, null
  br i1 %43, label %79, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %42, i64 0, i32 7
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %52

48:                                               ; preds = %44
  %49 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %42, i64 0, i32 8
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %79, label %52

52:                                               ; preds = %48, %44
  %53 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %3, align 8
  %54 = icmp eq %class.SkOpSpanBase* %53, null
  br i1 %54, label %55, label %57

55:                                               ; preds = %52
  store %class.SkOpSpanBase* %1, %class.SkOpSpanBase** %2, align 8
  %56 = bitcast %class.SkOpSpanBase** %3 to %class.SkOpSpan**
  store %class.SkOpSpan* %42, %class.SkOpSpan** %56, align 8
  br label %57

57:                                               ; preds = %55, %52
  %58 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %42, i64 0, i32 10
  %59 = load i8, i8* %58, align 4, !range !2
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %61, label %79

61:                                               ; preds = %57
  %62 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %42, i64 0, i32 5
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, -2147483647
  br i1 %64, label %67, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %42, i64 0, i32 0, i32 0, i32 0
  br label %68

67:                                               ; preds = %61
  store i8 0, i8* %4, align 1
  br label %79

68:                                               ; preds = %38, %65
  %69 = phi double* [ %39, %38 ], [ %66, %65 ]
  %70 = load double, double* %6, align 8
  %71 = load double, double* %69, align 8
  %72 = fcmp olt double %70, %71
  %73 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 1
  %74 = bitcast %struct.SkPoint* %73 to %class.SkOpAngle**
  %75 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 3
  %76 = select i1 %72, %class.SkOpAngle** %74, %class.SkOpAngle** %75
  %77 = load %class.SkOpAngle*, %class.SkOpAngle** %76, align 8
  %78 = icmp eq %class.SkOpAngle* %77, null
  br i1 %78, label %79, label %81

79:                                               ; preds = %57, %67, %40, %48, %68
  %80 = tail call %class.SkOpAngle* @_ZN11SkOpSegment16activeAngleOtherEP12SkOpSpanBasePS1_S2_Pb(%class.SkOpSegment* undef, %class.SkOpSpanBase* %1, %class.SkOpSpanBase** %2, %class.SkOpSpanBase** %3, i8* %4)
  ret %class.SkOpAngle* %80

81:                                               ; preds = %68
  ret %class.SkOpAngle* %77
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %class.SkOpAngle* @_ZN11SkOpSegment16activeAngleInnerEP12SkOpSpanBasePS1_S2_Pb(%class.SkOpSegment* nocapture readnone, %class.SkOpSpanBase*, %class.SkOpSpanBase** nocapture, %class.SkOpSpanBase** nocapture, i8* nocapture) local_unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = fcmp oeq double %7, 1.000000e+00
  %9 = bitcast %class.SkOpSpanBase* %1 to %class.SkOpSpan*
  %10 = icmp eq %class.SkOpSpanBase* %1, null
  %11 = or i1 %10, %8
  br i1 %11, label %48, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 4
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %22

17:                                               ; preds = %12
  %18 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 7, i64 1
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %48, label %22

22:                                               ; preds = %17, %12
  %23 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 2
  %24 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %23, align 8
  %25 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %3, align 8
  %26 = icmp eq %class.SkOpSpanBase* %25, null
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  store %class.SkOpSpanBase* %1, %class.SkOpSpanBase** %2, align 8
  store %class.SkOpSpanBase* %24, %class.SkOpSpanBase** %3, align 8
  br label %28

28:                                               ; preds = %22, %27
  %29 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %9, i64 0, i32 10
  %30 = load i8, i8* %29, align 4, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %48

32:                                               ; preds = %28
  %33 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 3
  %34 = bitcast %class.SkOpPtT** %33 to i32*
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, -2147483647
  br i1 %36, label %37, label %38

37:                                               ; preds = %32
  store i8 0, i8* %4, align 1
  br label %48

38:                                               ; preds = %32
  %39 = load double, double* %6, align 8
  %40 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %24, i64 0, i32 0, i32 0
  %41 = load double, double* %40, align 8
  %42 = fcmp olt double %39, %41
  %43 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 1
  %44 = bitcast %struct.SkPoint* %43 to %class.SkOpAngle**
  %45 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 3
  %46 = select i1 %42, %class.SkOpAngle** %44, %class.SkOpAngle** %45
  %47 = load %class.SkOpAngle*, %class.SkOpAngle** %46, align 8
  br label %84

48:                                               ; preds = %28, %37, %17, %5
  %49 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 4
  %50 = load %class.SkOpSpan*, %class.SkOpSpan** %49, align 8
  %51 = icmp eq %class.SkOpSpan* %50, null
  br i1 %51, label %84, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %50, i64 0, i32 7
  %54 = load i32, i32* %53, align 8
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %60

56:                                               ; preds = %52
  %57 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %50, i64 0, i32 8
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %84, label %60

60:                                               ; preds = %56, %52
  %61 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %3, align 8
  %62 = icmp eq %class.SkOpSpanBase* %61, null
  br i1 %62, label %63, label %65

63:                                               ; preds = %60
  store %class.SkOpSpanBase* %1, %class.SkOpSpanBase** %2, align 8
  %64 = bitcast %class.SkOpSpanBase** %3 to %class.SkOpSpan**
  store %class.SkOpSpan* %50, %class.SkOpSpan** %64, align 8
  br label %65

65:                                               ; preds = %60, %63
  %66 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %50, i64 0, i32 10
  %67 = load i8, i8* %66, align 4, !range !2
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %69, label %84

69:                                               ; preds = %65
  %70 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %50, i64 0, i32 5
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %71, -2147483647
  br i1 %72, label %83, label %73

73:                                               ; preds = %69
  %74 = load double, double* %6, align 8
  %75 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %50, i64 0, i32 0, i32 0, i32 0
  %76 = load double, double* %75, align 8
  %77 = fcmp olt double %74, %76
  %78 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 1
  %79 = bitcast %struct.SkPoint* %78 to %class.SkOpAngle**
  %80 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 3
  %81 = select i1 %77, %class.SkOpAngle** %79, %class.SkOpAngle** %80
  %82 = load %class.SkOpAngle*, %class.SkOpAngle** %81, align 8
  br label %84

83:                                               ; preds = %69
  store i8 0, i8* %4, align 1
  br label %84

84:                                               ; preds = %65, %38, %73, %56, %48, %83
  %85 = phi %class.SkOpAngle* [ %47, %38 ], [ %82, %73 ], [ null, %56 ], [ null, %48 ], [ null, %83 ], [ null, %65 ]
  ret %class.SkOpAngle* %85
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpAngle* @_ZN11SkOpSegment16activeAngleOtherEP12SkOpSpanBasePS1_S2_Pb(%class.SkOpSegment* nocapture readnone, %class.SkOpSpanBase* nocapture readonly, %class.SkOpSpanBase** nocapture, %class.SkOpSpanBase** nocapture, i8* nocapture) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 3
  %7 = load %class.SkOpPtT*, %class.SkOpPtT** %6, align 8
  %8 = tail call %class.SkOpSegment* @_ZN7SkOpPtT7segmentEv(%class.SkOpPtT* %7) #11
  %9 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %7, i64 0, i32 2
  %10 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %9, align 8
  %11 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %10, i64 0, i32 0, i32 0
  %12 = load double, double* %11, align 8
  %13 = fcmp oeq double %12, 1.000000e+00
  %14 = bitcast %class.SkOpSpanBase* %10 to %class.SkOpSpan*
  %15 = icmp eq %class.SkOpSpanBase* %10, null
  %16 = or i1 %15, %13
  br i1 %16, label %53, label %17

17:                                               ; preds = %5
  %18 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %10, i64 1, i32 0, i32 4
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %27

22:                                               ; preds = %17
  %23 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %10, i64 1, i32 0, i32 7, i64 1
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %53, label %27

27:                                               ; preds = %22, %17
  %28 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %10, i64 1, i32 0, i32 2
  %29 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %28, align 8
  %30 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %3, align 8
  %31 = icmp eq %class.SkOpSpanBase* %30, null
  br i1 %31, label %32, label %33

32:                                               ; preds = %27
  store %class.SkOpSpanBase* %10, %class.SkOpSpanBase** %2, align 8
  store %class.SkOpSpanBase* %29, %class.SkOpSpanBase** %3, align 8
  br label %33

33:                                               ; preds = %32, %27
  %34 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %14, i64 0, i32 10
  %35 = load i8, i8* %34, align 4, !range !2
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %53

37:                                               ; preds = %33
  %38 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %10, i64 1, i32 0, i32 3
  %39 = bitcast %class.SkOpPtT** %38 to i32*
  %40 = load i32, i32* %39, align 8
  %41 = icmp eq i32 %40, -2147483647
  br i1 %41, label %42, label %43

42:                                               ; preds = %37
  store i8 0, i8* %4, align 1
  br label %53

43:                                               ; preds = %37
  %44 = load double, double* %11, align 8
  %45 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %29, i64 0, i32 0, i32 0
  %46 = load double, double* %45, align 8
  %47 = fcmp olt double %44, %46
  %48 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %10, i64 1, i32 0, i32 1
  %49 = bitcast %struct.SkPoint* %48 to %class.SkOpAngle**
  %50 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %10, i64 0, i32 3
  %51 = select i1 %47, %class.SkOpAngle** %49, %class.SkOpAngle** %50
  %52 = load %class.SkOpAngle*, %class.SkOpAngle** %51, align 8
  br label %89

53:                                               ; preds = %42, %33, %22, %5
  %54 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %10, i64 0, i32 4
  %55 = load %class.SkOpSpan*, %class.SkOpSpan** %54, align 8
  %56 = icmp eq %class.SkOpSpan* %55, null
  br i1 %56, label %89, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %55, i64 0, i32 7
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %65

61:                                               ; preds = %57
  %62 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %55, i64 0, i32 8
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %89, label %65

65:                                               ; preds = %61, %57
  %66 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %3, align 8
  %67 = icmp eq %class.SkOpSpanBase* %66, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %65
  store %class.SkOpSpanBase* %10, %class.SkOpSpanBase** %2, align 8
  %69 = bitcast %class.SkOpSpanBase** %3 to %class.SkOpSpan**
  store %class.SkOpSpan* %55, %class.SkOpSpan** %69, align 8
  br label %70

70:                                               ; preds = %68, %65
  %71 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %55, i64 0, i32 10
  %72 = load i8, i8* %71, align 4, !range !2
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %74, label %89

74:                                               ; preds = %70
  %75 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %55, i64 0, i32 5
  %76 = load i32, i32* %75, align 8
  %77 = icmp eq i32 %76, -2147483647
  br i1 %77, label %88, label %78

78:                                               ; preds = %74
  %79 = load double, double* %11, align 8
  %80 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %55, i64 0, i32 0, i32 0, i32 0
  %81 = load double, double* %80, align 8
  %82 = fcmp olt double %79, %81
  %83 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %10, i64 1, i32 0, i32 1
  %84 = bitcast %struct.SkPoint* %83 to %class.SkOpAngle**
  %85 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %10, i64 0, i32 3
  %86 = select i1 %82, %class.SkOpAngle** %84, %class.SkOpAngle** %85
  %87 = load %class.SkOpAngle*, %class.SkOpAngle** %86, align 8
  br label %89

88:                                               ; preds = %74
  store i8 0, i8* %4, align 1
  br label %89

89:                                               ; preds = %43, %53, %61, %70, %78, %88
  %90 = phi %class.SkOpAngle* [ %52, %43 ], [ %87, %78 ], [ null, %61 ], [ null, %53 ], [ null, %88 ], [ null, %70 ]
  ret %class.SkOpAngle* %90
}

declare %class.SkOpSegment* @_ZN7SkOpPtT7segmentEv(%class.SkOpPtT*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment8activeOpEP12SkOpSpanBaseS1_ii8SkPathOp(%class.SkOpSegment* nocapture readonly, %class.SkOpSpanBase*, %class.SkOpSpanBase*, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 0
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = fcmp olt double %8, %10
  %12 = select i1 %11, %class.SkOpSpanBase* %2, %class.SkOpSpanBase* %1
  %13 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %12, i64 1, i32 0, i32 3
  %14 = bitcast %class.SkOpPtT** %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, -2147483647
  br i1 %16, label %17, label %23

17:                                               ; preds = %6
  %18 = bitcast %class.SkOpSpanBase* %12 to %class.SkOpSpan*
  %19 = tail call i32 @_ZN8SkOpSpan14computeWindSumEv(%class.SkOpSpan* %18) #11
  %20 = icmp eq i32 %19, -2147483647
  %21 = load double, double* %7, align 8
  %22 = load double, double* %9, align 8
  br i1 %20, label %54, label %23

23:                                               ; preds = %17, %6
  %24 = phi double [ %10, %6 ], [ %22, %17 ]
  %25 = phi double [ %8, %6 ], [ %21, %17 ]
  %26 = phi i32 [ %15, %6 ], [ %19, %17 ]
  %27 = fcmp olt double %25, %24
  br i1 %27, label %28, label %33

28:                                               ; preds = %23
  %29 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 1, i32 0, i32 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 8
  %32 = sub nsw i32 0, %31
  br label %37

33:                                               ; preds = %23
  %34 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 4
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 8
  br label %37

37:                                               ; preds = %33, %28
  %38 = phi i32 [ %32, %28 ], [ %36, %33 ]
  %39 = icmp eq i32 %26, 0
  br i1 %39, label %54, label %40

40:                                               ; preds = %37
  %41 = sub nsw i32 %26, %38
  %42 = icmp slt i32 %41, 0
  %43 = sub nsw i32 0, %41
  %44 = select i1 %42, i32 %43, i32 %41
  %45 = icmp slt i32 %26, 0
  %46 = sub nsw i32 0, %26
  %47 = select i1 %45, i32 %46, i32 %26
  %48 = icmp eq i32 %44, %47
  %49 = icmp slt i32 %44, %47
  %50 = select i1 %48, i1 %42, i1 %49
  %51 = icmp ne i32 %26, 2147483647
  %52 = and i1 %51, %50
  %53 = select i1 %52, i32 %41, i32 %26
  br label %54

54:                                               ; preds = %17, %37, %40
  %55 = phi double [ %24, %40 ], [ %24, %37 ], [ %22, %17 ]
  %56 = phi double [ %25, %40 ], [ %25, %37 ], [ %21, %17 ]
  %57 = phi i32 [ %53, %40 ], [ 0, %37 ], [ -2147483647, %17 ]
  %58 = fcmp olt double %56, %55
  %59 = select i1 %58, %class.SkOpSpanBase* %2, %class.SkOpSpanBase* %1
  %60 = bitcast %class.SkOpSpanBase* %59 to %class.SkOpSpan*
  %61 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %60, i64 0, i32 6
  %62 = load i32, i32* %61, align 4
  br i1 %58, label %63, label %68

63:                                               ; preds = %54
  %64 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 1, i32 0, i32 7, i64 1
  %65 = bitcast i8* %64 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = sub nsw i32 0, %66
  br label %72

68:                                               ; preds = %54
  %69 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 7, i64 1
  %70 = bitcast i8* %69 to i32*
  %71 = load i32, i32* %70, align 4
  br label %72

72:                                               ; preds = %68, %63
  %73 = phi i32 [ %67, %63 ], [ %71, %68 ]
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %89, label %75

75:                                               ; preds = %72
  %76 = sub nsw i32 %62, %73
  %77 = icmp slt i32 %76, 0
  %78 = sub nsw i32 0, %76
  %79 = select i1 %77, i32 %78, i32 %76
  %80 = icmp slt i32 %62, 0
  %81 = sub nsw i32 0, %62
  %82 = select i1 %80, i32 %81, i32 %62
  %83 = icmp eq i32 %79, %82
  %84 = icmp slt i32 %79, %82
  %85 = select i1 %83, i1 %77, i1 %84
  %86 = icmp ne i32 %62, 2147483647
  %87 = and i1 %86, %85
  %88 = select i1 %87, i32 %76, i32 %62
  br label %89

89:                                               ; preds = %72, %75
  %90 = phi i32 [ %88, %75 ], [ %62, %72 ]
  %91 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %92 = load %class.SkOpContour*, %class.SkOpContour** %91, align 8
  %93 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %92, i64 0, i32 9
  %94 = load i8, i8* %93, align 1, !range !2
  %95 = icmp ne i8 %94, 0
  %96 = select i1 %95, i32 %90, i32 %57
  %97 = select i1 %95, i32 %57, i32 %90
  %98 = fcmp olt double %55, %56
  br i1 %98, label %99, label %104

99:                                               ; preds = %89
  %100 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 4
  %101 = bitcast i8* %100 to <2 x i32>*
  %102 = load <2 x i32>, <2 x i32>* %101, align 8
  %103 = sub nsw <2 x i32> zeroinitializer, %102
  br label %108

104:                                              ; preds = %89
  %105 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 1, i32 0, i32 4
  %106 = bitcast i8* %105 to <2 x i32>*
  %107 = load <2 x i32>, <2 x i32>* %106, align 8
  br label %108

108:                                              ; preds = %104, %99
  %109 = phi <2 x i32> [ %103, %99 ], [ %107, %104 ]
  %110 = icmp eq i8 %94, 0
  %111 = select i1 %110, i32 %96, i32 %97
  %112 = select i1 %110, i32 %97, i32 %96
  %113 = extractelement <2 x i32> %109, i32 1
  %114 = sub nsw i32 %112, %113
  %115 = extractelement <2 x i32> %109, i32 0
  %116 = sub nsw i32 %111, %115
  %117 = select i1 %95, i32 %112, i32 %111
  %118 = select i1 %95, i32 %116, i32 %114
  %119 = select i1 %95, i32 %111, i32 %112
  %120 = select i1 %95, i32 %114, i32 %116
  %121 = and i32 %117, %3
  %122 = and i32 %118, %4
  %123 = and i32 %119, %4
  %124 = and i32 %120, %3
  %125 = icmp ne i32 %121, 0
  %126 = icmp ne i32 %122, 0
  %127 = icmp ne i32 %123, 0
  %128 = icmp ne i32 %124, 0
  %129 = zext i32 %5 to i64
  %130 = zext i1 %125 to i64
  %131 = zext i1 %128 to i64
  %132 = zext i1 %127 to i64
  %133 = zext i1 %126 to i64
  %134 = getelementptr inbounds [4 x [2 x [2 x [2 x [2 x i8]]]]], [4 x [2 x [2 x [2 x [2 x i8]]]]]* @_ZL11gActiveEdge, i64 0, i64 %129, i64 %130, i64 %131, i64 %132, i64 %133
  %135 = load i8, i8* %134, align 1, !range !2
  %136 = icmp ne i8 %135, 0
  ret i1 %136
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN11SkOpSegment13updateWindingEP12SkOpSpanBaseS1_(%class.SkOpSegment* nocapture readnone, %class.SkOpSpanBase*, %class.SkOpSpanBase*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = fcmp olt double %5, %7
  %9 = select i1 %8, %class.SkOpSpanBase* %1, %class.SkOpSpanBase* %2
  %10 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %9, i64 1, i32 0, i32 3
  %11 = bitcast %class.SkOpPtT** %10 to i32*
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, -2147483647
  br i1 %13, label %14, label %21

14:                                               ; preds = %3
  %15 = bitcast %class.SkOpSpanBase* %9 to %class.SkOpSpan*
  %16 = tail call i32 @_ZN8SkOpSpan14computeWindSumEv(%class.SkOpSpan* %15) #11
  %17 = icmp eq i32 %16, -2147483647
  br i1 %17, label %52, label %18

18:                                               ; preds = %14
  %19 = load double, double* %4, align 8
  %20 = load double, double* %6, align 8
  br label %21

21:                                               ; preds = %18, %3
  %22 = phi double [ %20, %18 ], [ %7, %3 ]
  %23 = phi double [ %19, %18 ], [ %5, %3 ]
  %24 = phi i32 [ %16, %18 ], [ %12, %3 ]
  %25 = fcmp olt double %23, %22
  br i1 %25, label %26, label %31

26:                                               ; preds = %21
  %27 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 4
  %28 = bitcast i8* %27 to i32*
  %29 = load i32, i32* %28, align 8
  %30 = sub nsw i32 0, %29
  br label %35

31:                                               ; preds = %21
  %32 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 1, i32 0, i32 4
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 8
  br label %35

35:                                               ; preds = %26, %31
  %36 = phi i32 [ %30, %26 ], [ %34, %31 ]
  %37 = icmp eq i32 %24, 0
  br i1 %37, label %52, label %38

38:                                               ; preds = %35
  %39 = sub nsw i32 %24, %36
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp slt i32 %24, 0
  %44 = sub nsw i32 0, %24
  %45 = select i1 %43, i32 %44, i32 %24
  %46 = icmp eq i32 %42, %45
  %47 = icmp slt i32 %42, %45
  %48 = select i1 %46, i1 %40, i1 %47
  %49 = icmp ne i32 %24, 2147483647
  %50 = and i1 %49, %48
  %51 = select i1 %50, i32 %39, i32 %24
  ret i32 %51

52:                                               ; preds = %35, %14
  %53 = phi i32 [ -2147483647, %14 ], [ 0, %35 ]
  ret i32 %53
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK11SkOpSegment16updateOppWindingEPK12SkOpSpanBaseS2_(%class.SkOpSegment* nocapture readnone, %class.SkOpSpanBase* nocapture readonly, %class.SkOpSpanBase* nocapture readonly) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = fcmp olt double %5, %7
  %9 = select i1 %8, %class.SkOpSpanBase* %1, %class.SkOpSpanBase* %2
  %10 = bitcast %class.SkOpSpanBase* %9 to %class.SkOpSpan*
  %11 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %10, i64 0, i32 6
  %12 = load i32, i32* %11, align 4
  br i1 %8, label %13, label %18

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 7, i64 1
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = sub nsw i32 0, %16
  br label %22

18:                                               ; preds = %3
  %19 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 1, i32 0, i32 7, i64 1
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 4
  br label %22

22:                                               ; preds = %13, %18
  %23 = phi i32 [ %17, %13 ], [ %21, %18 ]
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %39, label %25

25:                                               ; preds = %22
  %26 = sub nsw i32 %12, %23
  %27 = icmp slt i32 %26, 0
  %28 = sub nsw i32 0, %26
  %29 = select i1 %27, i32 %28, i32 %26
  %30 = icmp slt i32 %12, 0
  %31 = sub nsw i32 0, %12
  %32 = select i1 %30, i32 %31, i32 %12
  %33 = icmp eq i32 %29, %32
  %34 = icmp slt i32 %29, %32
  %35 = select i1 %33, i1 %27, i1 %34
  %36 = icmp ne i32 %12, 2147483647
  %37 = and i1 %36, %35
  %38 = select i1 %37, i32 %26, i32 %12
  ret i32 %38

39:                                               ; preds = %22
  ret i32 %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK11SkOpSegment7operandEv(%class.SkOpSegment* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %3 = load %class.SkOpContour*, %class.SkOpContour** %2, align 8
  %4 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %3, i64 0, i32 9
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp ne i8 %5, 0
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment8activeOpEiiP12SkOpSpanBaseS1_8SkPathOpPiS3_(%class.SkOpSegment* nocapture readonly, i32, i32, %class.SkOpSpanBase* nocapture readonly, %class.SkOpSpanBase* nocapture readonly, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #0 align 2 {
  %9 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %3, i64 0, i32 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 0, i32 0, i32 0
  %12 = load double, double* %11, align 8
  %13 = fcmp olt double %10, %12
  br i1 %13, label %14, label %19

14:                                               ; preds = %8
  %15 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %3, i64 1, i32 0, i32 4
  %16 = bitcast i8* %15 to <2 x i32>*
  %17 = load <2 x i32>, <2 x i32>* %16, align 8
  %18 = sub nsw <2 x i32> zeroinitializer, %17
  br label %23

19:                                               ; preds = %8
  %20 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 1, i32 0, i32 4
  %21 = bitcast i8* %20 to <2 x i32>*
  %22 = load <2 x i32>, <2 x i32>* %21, align 8
  br label %23

23:                                               ; preds = %19, %14
  %24 = phi <2 x i32> [ %18, %14 ], [ %22, %19 ]
  %25 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %26 = load %class.SkOpContour*, %class.SkOpContour** %25, align 8
  %27 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %26, i64 0, i32 9
  %28 = load i8, i8* %27, align 1, !range !2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %37, label %30

30:                                               ; preds = %23
  %31 = load i32, i32* %7, align 4
  %32 = extractelement <2 x i32> %24, i32 0
  %33 = sub nsw i32 %31, %32
  store i32 %33, i32* %7, align 4
  %34 = load i32, i32* %6, align 4
  %35 = extractelement <2 x i32> %24, i32 1
  %36 = sub nsw i32 %34, %35
  store i32 %36, i32* %6, align 4
  br label %44

37:                                               ; preds = %23
  %38 = load i32, i32* %6, align 4
  %39 = extractelement <2 x i32> %24, i32 0
  %40 = sub nsw i32 %38, %39
  store i32 %40, i32* %6, align 4
  %41 = load i32, i32* %7, align 4
  %42 = extractelement <2 x i32> %24, i32 1
  %43 = sub nsw i32 %41, %42
  store i32 %43, i32* %7, align 4
  br label %44

44:                                               ; preds = %30, %37
  %45 = phi i32 [ %38, %37 ], [ %31, %30 ]
  %46 = phi i32 [ %40, %37 ], [ %33, %30 ]
  %47 = phi i32 [ %41, %37 ], [ %34, %30 ]
  %48 = phi i32 [ %43, %37 ], [ %36, %30 ]
  %49 = load %class.SkOpContour*, %class.SkOpContour** %25, align 8
  %50 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %49, i64 0, i32 9
  %51 = load i8, i8* %50, align 1, !range !2
  %52 = icmp ne i8 %51, 0
  %53 = select i1 %52, i32 %47, i32 %45
  %54 = select i1 %52, i32 %46, i32 %48
  %55 = select i1 %52, i32 %45, i32 %47
  %56 = select i1 %52, i32 %48, i32 %46
  %57 = and i32 %53, %1
  %58 = and i32 %54, %2
  %59 = and i32 %55, %2
  %60 = and i32 %56, %1
  %61 = icmp ne i32 %57, 0
  %62 = icmp ne i32 %58, 0
  %63 = icmp ne i32 %59, 0
  %64 = icmp ne i32 %60, 0
  %65 = zext i32 %5 to i64
  %66 = zext i1 %61 to i64
  %67 = zext i1 %64 to i64
  %68 = zext i1 %63 to i64
  %69 = zext i1 %62 to i64
  %70 = getelementptr inbounds [4 x [2 x [2 x [2 x [2 x i8]]]]], [4 x [2 x [2 x [2 x [2 x i8]]]]]* @_ZL11gActiveEdge, i64 0, i64 %65, i64 %66, i64 %67, i64 %68, i64 %69
  %71 = load i8, i8* %70, align 1, !range !2
  %72 = icmp ne i8 %71, 0
  ret i1 %72
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN11SkOpSegment13setUpWindingsEP12SkOpSpanBaseS1_PiS2_S2_S2_S2_S2_(%class.SkOpSegment* nocapture readonly, %class.SkOpSpanBase* nocapture readonly, %class.SkOpSpanBase* nocapture readonly, i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture) local_unnamed_addr #2 align 2 {
  %10 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 0
  %13 = load double, double* %12, align 8
  %14 = fcmp olt double %11, %13
  br i1 %14, label %15, label %20

15:                                               ; preds = %9
  %16 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 4
  %17 = bitcast i8* %16 to <2 x i32>*
  %18 = load <2 x i32>, <2 x i32>* %17, align 8
  %19 = sub nsw <2 x i32> zeroinitializer, %18
  br label %24

20:                                               ; preds = %9
  %21 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 1, i32 0, i32 4
  %22 = bitcast i8* %21 to <2 x i32>*
  %23 = load <2 x i32>, <2 x i32>* %22, align 8
  br label %24

24:                                               ; preds = %15, %20
  %25 = phi <2 x i32> [ %19, %15 ], [ %23, %20 ]
  %26 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %27 = load %class.SkOpContour*, %class.SkOpContour** %26, align 8
  %28 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %27, i64 0, i32 9
  %29 = load i8, i8* %28, align 1, !range !2
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %40, label %31

31:                                               ; preds = %24
  %32 = load i32, i32* %4, align 4
  store i32 %32, i32* %5, align 4
  %33 = load i32, i32* %4, align 4
  %34 = extractelement <2 x i32> %25, i32 0
  %35 = sub nsw i32 %33, %34
  store i32 %35, i32* %4, align 4
  store i32 %35, i32* %6, align 4
  %36 = load i32, i32* %3, align 4
  store i32 %36, i32* %7, align 4
  %37 = load i32, i32* %3, align 4
  %38 = extractelement <2 x i32> %25, i32 1
  %39 = sub nsw i32 %37, %38
  store i32 %39, i32* %3, align 4
  br label %49

40:                                               ; preds = %24
  %41 = load i32, i32* %3, align 4
  store i32 %41, i32* %5, align 4
  %42 = load i32, i32* %3, align 4
  %43 = extractelement <2 x i32> %25, i32 0
  %44 = sub nsw i32 %42, %43
  store i32 %44, i32* %3, align 4
  store i32 %44, i32* %6, align 4
  %45 = load i32, i32* %4, align 4
  store i32 %45, i32* %7, align 4
  %46 = load i32, i32* %4, align 4
  %47 = extractelement <2 x i32> %25, i32 1
  %48 = sub nsw i32 %46, %47
  store i32 %48, i32* %4, align 4
  br label %49

49:                                               ; preds = %40, %31
  %50 = phi i32 [ %48, %40 ], [ %39, %31 ]
  store i32 %50, i32* %8, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment13activeWindingEP12SkOpSpanBaseS1_(%class.SkOpSegment* nocapture readnone, %class.SkOpSpanBase*, %class.SkOpSpanBase*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = fcmp olt double %5, %7
  %9 = select i1 %8, %class.SkOpSpanBase* %2, %class.SkOpSpanBase* %1
  %10 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %9, i64 1, i32 0, i32 3
  %11 = bitcast %class.SkOpPtT** %10 to i32*
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, -2147483647
  br i1 %13, label %14, label %24

14:                                               ; preds = %3
  %15 = bitcast %class.SkOpSpanBase* %9 to %class.SkOpSpan*
  %16 = tail call i32 @_ZN8SkOpSpan14computeWindSumEv(%class.SkOpSpan* %15) #11
  %17 = icmp eq i32 %16, -2147483647
  br i1 %17, label %18, label %21

18:                                               ; preds = %14
  %19 = load double, double* %6, align 8
  %20 = load double, double* %4, align 8
  br label %55

21:                                               ; preds = %14
  %22 = load double, double* %4, align 8
  %23 = load double, double* %6, align 8
  br label %24

24:                                               ; preds = %21, %3
  %25 = phi double [ %23, %21 ], [ %7, %3 ]
  %26 = phi double [ %22, %21 ], [ %5, %3 ]
  %27 = phi i32 [ %16, %21 ], [ %12, %3 ]
  %28 = fcmp olt double %26, %25
  br i1 %28, label %29, label %34

29:                                               ; preds = %24
  %30 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 1, i32 0, i32 4
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 8
  %33 = sub nsw i32 0, %32
  br label %38

34:                                               ; preds = %24
  %35 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 4
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 8
  br label %38

38:                                               ; preds = %34, %29
  %39 = phi i32 [ %33, %29 ], [ %37, %34 ]
  %40 = icmp eq i32 %27, 0
  br i1 %40, label %55, label %41

41:                                               ; preds = %38
  %42 = sub nsw i32 %27, %39
  %43 = icmp slt i32 %42, 0
  %44 = sub nsw i32 0, %42
  %45 = select i1 %43, i32 %44, i32 %42
  %46 = icmp slt i32 %27, 0
  %47 = sub nsw i32 0, %27
  %48 = select i1 %46, i32 %47, i32 %27
  %49 = icmp eq i32 %45, %48
  %50 = icmp slt i32 %45, %48
  %51 = select i1 %49, i1 %43, i1 %50
  %52 = icmp ne i32 %27, 2147483647
  %53 = and i1 %52, %51
  %54 = select i1 %53, i32 %42, i32 %27
  br label %55

55:                                               ; preds = %18, %38, %41
  %56 = phi double [ %26, %41 ], [ %20, %18 ], [ %26, %38 ]
  %57 = phi double [ %25, %41 ], [ %19, %18 ], [ %25, %38 ]
  %58 = phi i32 [ %54, %41 ], [ -2147483647, %18 ], [ 0, %38 ]
  %59 = fcmp olt double %57, %56
  br i1 %59, label %60, label %65

60:                                               ; preds = %55
  %61 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 4
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 8
  %64 = sub nsw i32 0, %63
  br label %69

65:                                               ; preds = %55
  %66 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 1, i32 0, i32 4
  %67 = bitcast i8* %66 to i32*
  %68 = load i32, i32* %67, align 8
  br label %69

69:                                               ; preds = %65, %60
  %70 = phi i32 [ %64, %60 ], [ %68, %65 ]
  %71 = icmp eq i32 %58, -2147483647
  %72 = icmp ne i32 %58, %70
  %73 = or i1 %71, %72
  %74 = zext i1 %73 to i64
  %75 = icmp ne i32 %58, 0
  %76 = zext i1 %75 to i64
  %77 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @_ZL16gUnaryActiveEdge, i64 0, i64 %76, i64 %74
  %78 = load i8, i8* %77, align 1, !range !2
  %79 = icmp ne i8 %78, 0
  ret i1 %79
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment13activeWindingEP12SkOpSpanBaseS1_Pi(%class.SkOpSegment* nocapture readnone, %class.SkOpSpanBase* nocapture readonly, %class.SkOpSpanBase* nocapture readonly, i32* nocapture) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 0
  %8 = load double, double* %7, align 8
  %9 = fcmp olt double %6, %8
  br i1 %9, label %10, label %15

10:                                               ; preds = %4
  %11 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 4
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = sub nsw i32 0, %13
  br label %19

15:                                               ; preds = %4
  %16 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 1, i32 0, i32 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 8
  br label %19

19:                                               ; preds = %15, %10
  %20 = phi i32 [ %14, %10 ], [ %18, %15 ]
  %21 = load i32, i32* %3, align 4
  %22 = icmp eq i32 %21, -2147483647
  br i1 %22, label %27, label %23

23:                                               ; preds = %19
  %24 = sub nsw i32 %21, %20
  store i32 %24, i32* %3, align 4
  %25 = icmp ne i32 %24, 0
  %26 = zext i1 %25 to i64
  br label %27

27:                                               ; preds = %19, %23
  %28 = phi i64 [ 1, %19 ], [ %26, %23 ]
  %29 = icmp ne i32 %21, 0
  %30 = zext i1 %29 to i64
  %31 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @_ZL16gUnaryActiveEdge, i64 0, i64 %30, i64 %28
  %32 = load i8, i8* %31, align 1, !range !2
  %33 = icmp ne i8 %32, 0
  ret i1 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK11SkOpSegment10addCurveToEPK12SkOpSpanBaseS2_P12SkPathWriter(%class.SkOpSegment* nocapture readonly, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkPathWriter*) local_unnamed_addr #5 align 2 {
  %5 = alloca %class.SkDCurveSweep, align 8
  %6 = alloca <2 x float>, align 8
  %7 = bitcast <2 x float>* %6 to %struct.SkPoint*
  %8 = alloca <2 x float>, align 8
  %9 = bitcast <2 x float>* %8 to %struct.SkPoint*
  %10 = alloca <2 x float>, align 8
  %11 = bitcast <2 x float>* %10 to %struct.SkPoint*
  %12 = alloca <2 x float>, align 8
  %13 = bitcast <2 x float>* %12 to %struct.SkPoint*
  %14 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 0
  %17 = load double, double* %16, align 8
  %18 = fcmp olt double %15, %17
  %19 = select i1 %18, %class.SkOpSpanBase* %1, %class.SkOpSpanBase* %2
  %20 = bitcast %class.SkOpSpanBase* %19 to %class.SkOpSpan*
  %21 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %20, i64 0, i32 11
  %22 = load i8, i8* %21, align 1, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %75

24:                                               ; preds = %4
  store i8 1, i8* %21, align 1
  %25 = bitcast %class.SkDCurveSweep* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %25) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %25, i8* align 8 bitcast (%class.SkDCurveSweep* @__const._ZNK11SkOpSegment10addCurveToEPK12SkOpSpanBaseS2_P12SkPathWriter.curvePart to i8*), i64 104, i1 false)
  %26 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 1
  %27 = load %class.SkOpSegment*, %class.SkOpSegment** %26, align 8
  %28 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %5, i64 0, i32 0
  %29 = call zeroext i1 @_ZNK11SkOpSegment9subDivideEPK12SkOpSpanBaseS2_P8SkDCurve(%class.SkOpSegment* %27, %class.SkOpSpanBase* %1, %class.SkOpSpanBase* %2, %struct.SkDCurve* nonnull %28)
  %30 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 10
  %31 = load i32, i32* %30, align 4
  call void @_ZN13SkDCurveSweep17setCurveHullSweepEN6SkPath4VerbE(%class.SkDCurveSweep* nonnull %5, i32 %31) #11
  %32 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %5, i64 0, i32 2
  %33 = load i8, i8* %32, align 8, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %24
  %36 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0
  call void @_ZN12SkPathWriter12deferredMoveEPK7SkOpPtT(%class.SkPathWriter* %3, %class.SkOpPtT* %36) #11
  br label %40

37:                                               ; preds = %24
  %38 = load i32, i32* %30, align 4
  %39 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0
  call void @_ZN12SkPathWriter12deferredMoveEPK7SkOpPtT(%class.SkPathWriter* %3, %class.SkOpPtT* %39) #11
  switch i32 %38, label %72 [
    i32 1, label %40
    i32 2, label %43
    i32 3, label %50
    i32 4, label %60
  ]

40:                                               ; preds = %35, %37
  %41 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0
  %42 = call zeroext i1 @_ZN12SkPathWriter12deferredLineEPK7SkOpPtT(%class.SkPathWriter* %3, %class.SkOpPtT* %41) #11
  br i1 %42, label %72, label %73

43:                                               ; preds = %37
  %44 = bitcast <2 x float>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #11
  %45 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1, i32 0
  %46 = bitcast double* %45 to <2 x double>*
  %47 = load <2 x double>, <2 x double>* %46, align 8
  %48 = fptrunc <2 x double> %47 to <2 x float>
  store <2 x float> %48, <2 x float>* %6, align 8
  %49 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0
  call void @_ZN12SkPathWriter6quadToERK7SkPointPK7SkOpPtT(%class.SkPathWriter* %3, %struct.SkPoint* nonnull dereferenceable(8) %7, %class.SkOpPtT* %49) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #11
  br label %72

50:                                               ; preds = %37
  %51 = bitcast <2 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #11
  %52 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1, i32 0
  %53 = bitcast double* %52 to <2 x double>*
  %54 = load <2 x double>, <2 x double>* %53, align 8
  %55 = fptrunc <2 x double> %54 to <2 x float>
  store <2 x float> %55, <2 x float>* %8, align 8
  %56 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0
  %57 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %58 = bitcast %struct.SkDPoint* %57 to float*
  %59 = load float, float* %58, align 8
  call void @_ZN12SkPathWriter7conicToERK7SkPointPK7SkOpPtTf(%class.SkPathWriter* %3, %struct.SkPoint* nonnull dereferenceable(8) %9, %class.SkOpPtT* %56, float %59) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #11
  br label %72

60:                                               ; preds = %37
  %61 = bitcast <2 x float>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %61) #11
  %62 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1, i32 0
  %63 = bitcast double* %62 to <2 x double>*
  %64 = load <2 x double>, <2 x double>* %63, align 8
  %65 = fptrunc <2 x double> %64 to <2 x float>
  store <2 x float> %65, <2 x float>* %10, align 8
  %66 = bitcast <2 x float>* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #11
  %67 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2, i32 0
  %68 = bitcast double* %67 to <2 x double>*
  %69 = load <2 x double>, <2 x double>* %68, align 8
  %70 = fptrunc <2 x double> %69 to <2 x float>
  store <2 x float> %70, <2 x float>* %12, align 8
  %71 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0
  call void @_ZN12SkPathWriter7cubicToERK7SkPointS2_PK7SkOpPtT(%class.SkPathWriter* %3, %struct.SkPoint* nonnull dereferenceable(8) %11, %struct.SkPoint* nonnull dereferenceable(8) %13, %class.SkOpPtT* %71) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %61) #11
  br label %72

72:                                               ; preds = %37, %40, %60, %50, %43
  br label %73

73:                                               ; preds = %40, %72
  %74 = phi i1 [ true, %72 ], [ false, %40 ]
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %25) #11
  br label %75

75:                                               ; preds = %4, %73
  %76 = phi i1 [ %74, %73 ], [ false, %4 ]
  ret i1 %76
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK11SkOpSegment9subDivideEPK12SkOpSpanBaseS2_P8SkDCurve(%class.SkOpSegment* nocapture readonly, %class.SkOpSpanBase* nocapture readonly, %class.SkOpSpanBase* nocapture readonly, %struct.SkDCurve*) local_unnamed_addr #0 align 2 {
  %5 = alloca %struct.SkDQuad, align 8
  %6 = alloca %struct.SkDConic, align 8
  %7 = alloca %struct.SkDCubic, align 8
  %8 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %9 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 1, i32 0
  %10 = load float, float* %9, align 4
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 0, i32 0
  store double %11, double* %12, align 8
  %13 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 1, i32 1
  %14 = load float, float* %13, align 4
  %15 = fpext float %14 to double
  %16 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 0, i32 1
  store double %15, double* %16, align 8
  %17 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 10
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 1
  %20 = ashr i32 %19, 2
  %21 = sub nsw i32 %18, %20
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 1, i32 0
  %24 = load float, float* %23, align 4
  %25 = fpext float %24 to double
  %26 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 %22, i32 0
  store double %25, double* %26, align 8
  %27 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 1, i32 1
  %28 = load float, float* %27, align 4
  %29 = fpext float %28 to double
  %30 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 %22, i32 1
  store double %29, double* %30, align 8
  %31 = load i32, i32* %17, align 4
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %227, label %33

33:                                               ; preds = %4
  %34 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %35 = load double, double* %34, align 8
  %36 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 0
  %37 = load double, double* %36, align 8
  %38 = fcmp oeq double %35, 0.000000e+00
  %39 = fcmp oeq double %37, 0.000000e+00
  %40 = or i1 %38, %39
  br i1 %40, label %41, label %113

41:                                               ; preds = %33
  %42 = fcmp oeq double %35, 1.000000e+00
  %43 = fcmp oeq double %37, 1.000000e+00
  %44 = or i1 %42, %43
  br i1 %44, label %45, label %113

45:                                               ; preds = %41
  switch i32 %31, label %73 [
    i32 2, label %46
    i32 3, label %57
  ]

46:                                               ; preds = %45
  %47 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %48 = load %struct.SkPoint*, %struct.SkPoint** %47, align 8
  %49 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %48, i64 1, i32 0
  %50 = load float, float* %49, align 4
  %51 = fpext float %50 to double
  %52 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 1, i32 0
  store double %51, double* %52, align 8
  %53 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %48, i64 1, i32 1
  %54 = load float, float* %53, align 4
  %55 = fpext float %54 to double
  %56 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 1, i32 1
  store double %55, double* %56, align 8
  br label %227

57:                                               ; preds = %45
  %58 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %59 = load %struct.SkPoint*, %struct.SkPoint** %58, align 8
  %60 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %59, i64 1, i32 0
  %61 = load float, float* %60, align 4
  %62 = fpext float %61 to double
  %63 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 1, i32 0
  store double %62, double* %63, align 8
  %64 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %59, i64 1, i32 1
  %65 = load float, float* %64, align 4
  %66 = fpext float %65 to double
  %67 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 1, i32 1
  store double %66, double* %67, align 8
  %68 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 7
  %69 = bitcast float* %68 to i32*
  %70 = load i32, i32* %69, align 8
  %71 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 3
  %72 = bitcast %struct.SkDPoint* %71 to i32*
  store i32 %70, i32* %72, align 8
  br label %227

73:                                               ; preds = %45
  %74 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 1
  %75 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %76 = load %struct.SkPoint*, %struct.SkPoint** %75, align 8
  br i1 %38, label %77, label %95

77:                                               ; preds = %73
  %78 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %76, i64 1, i32 0
  %79 = load float, float* %78, align 4
  %80 = fpext float %79 to double
  %81 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %74, i64 0, i32 0
  store double %80, double* %81, align 8
  %82 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %76, i64 1, i32 1
  %83 = load float, float* %82, align 4
  %84 = fpext float %83 to double
  %85 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 1, i32 1
  store double %84, double* %85, align 8
  %86 = load %struct.SkPoint*, %struct.SkPoint** %75, align 8
  %87 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %86, i64 2, i32 0
  %88 = load float, float* %87, align 4
  %89 = fpext float %88 to double
  %90 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 2, i32 0
  store double %89, double* %90, align 8
  %91 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %86, i64 2, i32 1
  %92 = load float, float* %91, align 4
  %93 = fpext float %92 to double
  %94 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 2, i32 1
  store double %93, double* %94, align 8
  br label %227

95:                                               ; preds = %73
  %96 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %76, i64 2, i32 0
  %97 = load float, float* %96, align 4
  %98 = fpext float %97 to double
  %99 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %74, i64 0, i32 0
  store double %98, double* %99, align 8
  %100 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %76, i64 2, i32 1
  %101 = load float, float* %100, align 4
  %102 = fpext float %101 to double
  %103 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 1, i32 1
  store double %102, double* %103, align 8
  %104 = load %struct.SkPoint*, %struct.SkPoint** %75, align 8
  %105 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %104, i64 1, i32 0
  %106 = load float, float* %105, align 4
  %107 = fpext float %106 to double
  %108 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 2, i32 0
  store double %107, double* %108, align 8
  %109 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %104, i64 1, i32 1
  %110 = load float, float* %109, align 4
  %111 = fpext float %110 to double
  %112 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 2, i32 1
  store double %111, double* %112, align 8
  br label %227

113:                                              ; preds = %41, %33
  switch i32 %31, label %189 [
    i32 2, label %114
    i32 3, label %148
  ]

114:                                              ; preds = %113
  %115 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %116 = load %struct.SkPoint*, %struct.SkPoint** %115, align 8
  %117 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 2
  %118 = bitcast %struct.SkDQuad* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %118) #11
  %119 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %5, i64 0, i32 0, i64 0, i32 0
  %120 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %5, i64 0, i32 0, i64 0, i32 1
  %121 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %5, i64 0, i32 0, i64 1, i32 0
  %122 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %5, i64 0, i32 0, i64 1, i32 1
  %123 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %5, i64 0, i32 0, i64 2, i32 0
  %124 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %5, i64 0, i32 0, i64 2, i32 1
  %125 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %116, i64 0, i32 0
  %126 = load float, float* %125, align 4
  %127 = fpext float %126 to double
  store double %127, double* %119, align 8
  %128 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %116, i64 0, i32 1
  %129 = load float, float* %128, align 4
  %130 = fpext float %129 to double
  store double %130, double* %120, align 8
  %131 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %116, i64 1, i32 0
  %132 = load float, float* %131, align 4
  %133 = fpext float %132 to double
  store double %133, double* %121, align 8
  %134 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %116, i64 1, i32 1
  %135 = load float, float* %134, align 4
  %136 = fpext float %135 to double
  store double %136, double* %122, align 8
  %137 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %116, i64 2, i32 0
  %138 = load float, float* %137, align 4
  %139 = fpext float %138 to double
  store double %139, double* %123, align 8
  %140 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %116, i64 2, i32 1
  %141 = load float, float* %140, align 4
  %142 = fpext float %141 to double
  store double %142, double* %124, align 8
  %143 = call { double, double } @_ZNK7SkDQuad9subDivideERK8SkDPointS2_dd(%struct.SkDQuad* nonnull %5, %struct.SkDPoint* dereferenceable(16) %8, %struct.SkDPoint* dereferenceable(16) %117, double %35, double %37) #11
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %118) #11
  %144 = extractvalue { double, double } %143, 0
  %145 = extractvalue { double, double } %143, 1
  %146 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 1, i32 0
  store double %144, double* %146, align 8
  %147 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 1, i32 1
  store double %145, double* %147, align 8
  br label %227

148:                                              ; preds = %113
  %149 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %150 = load %struct.SkPoint*, %struct.SkPoint** %149, align 8
  %151 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 7
  %152 = bitcast float* %151 to i32*
  %153 = load i32, i32* %152, align 8
  %154 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 2
  %155 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 3
  %156 = bitcast %struct.SkDPoint* %155 to float*
  %157 = bitcast %struct.SkDConic* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %157) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %157, i8* align 8 bitcast ({ %struct.SkDQuad, float, [4 x i8] }* @__const._ZN8SkDConic9SubDivideEPK7SkPointfRK8SkDPointS5_ddPf.conic to i8*), i64 56, i1 false) #11
  %158 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %150, i64 0, i32 0
  %159 = load float, float* %158, align 4
  %160 = fpext float %159 to double
  %161 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %6, i64 0, i32 0, i32 0, i64 0, i32 0
  store double %160, double* %161, align 8
  %162 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %150, i64 0, i32 1
  %163 = load float, float* %162, align 4
  %164 = fpext float %163 to double
  %165 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %6, i64 0, i32 0, i32 0, i64 0, i32 1
  store double %164, double* %165, align 8
  %166 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %150, i64 1, i32 0
  %167 = load float, float* %166, align 4
  %168 = fpext float %167 to double
  %169 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %6, i64 0, i32 0, i32 0, i64 1, i32 0
  store double %168, double* %169, align 8
  %170 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %150, i64 1, i32 1
  %171 = load float, float* %170, align 4
  %172 = fpext float %171 to double
  %173 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %6, i64 0, i32 0, i32 0, i64 1, i32 1
  store double %172, double* %173, align 8
  %174 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %150, i64 2, i32 0
  %175 = load float, float* %174, align 4
  %176 = fpext float %175 to double
  %177 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %6, i64 0, i32 0, i32 0, i64 2, i32 0
  store double %176, double* %177, align 8
  %178 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %150, i64 2, i32 1
  %179 = load float, float* %178, align 4
  %180 = fpext float %179 to double
  %181 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %6, i64 0, i32 0, i32 0, i64 2, i32 1
  store double %180, double* %181, align 8
  %182 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %6, i64 0, i32 1
  %183 = bitcast float* %182 to i32*
  store i32 %153, i32* %183, align 8
  %184 = call { double, double } @_ZNK8SkDConic9subDivideERK8SkDPointS2_ddPf(%struct.SkDConic* nonnull %6, %struct.SkDPoint* dereferenceable(16) %8, %struct.SkDPoint* dereferenceable(16) %154, double %35, double %37, float* %156) #11
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %157) #11
  %185 = extractvalue { double, double } %184, 0
  %186 = extractvalue { double, double } %184, 1
  %187 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 1, i32 0
  store double %185, double* %187, align 8
  %188 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 1, i32 1
  store double %186, double* %188, align 8
  br label %227

189:                                              ; preds = %113
  %190 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %191 = load %struct.SkPoint*, %struct.SkPoint** %190, align 8
  %192 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 3
  %193 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %3, i64 0, i32 0, i32 0, i32 0, i64 1
  %194 = bitcast %struct.SkDCubic* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %194) #11
  %195 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %191, i64 0, i32 0
  %196 = load float, float* %195, align 4
  %197 = fpext float %196 to double
  %198 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %7, i64 0, i32 0, i64 0, i32 0
  store double %197, double* %198, align 8
  %199 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %191, i64 0, i32 1
  %200 = load float, float* %199, align 4
  %201 = fpext float %200 to double
  %202 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %7, i64 0, i32 0, i64 0, i32 1
  store double %201, double* %202, align 8
  %203 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %191, i64 1, i32 0
  %204 = load float, float* %203, align 4
  %205 = fpext float %204 to double
  %206 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %7, i64 0, i32 0, i64 1, i32 0
  store double %205, double* %206, align 8
  %207 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %191, i64 1, i32 1
  %208 = load float, float* %207, align 4
  %209 = fpext float %208 to double
  %210 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %7, i64 0, i32 0, i64 1, i32 1
  store double %209, double* %210, align 8
  %211 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %191, i64 2, i32 0
  %212 = load float, float* %211, align 4
  %213 = fpext float %212 to double
  %214 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %7, i64 0, i32 0, i64 2, i32 0
  store double %213, double* %214, align 8
  %215 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %191, i64 2, i32 1
  %216 = load float, float* %215, align 4
  %217 = fpext float %216 to double
  %218 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %7, i64 0, i32 0, i64 2, i32 1
  store double %217, double* %218, align 8
  %219 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %191, i64 3, i32 0
  %220 = load float, float* %219, align 4
  %221 = fpext float %220 to double
  %222 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %7, i64 0, i32 0, i64 3, i32 0
  store double %221, double* %222, align 8
  %223 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %191, i64 3, i32 1
  %224 = load float, float* %223, align 4
  %225 = fpext float %224 to double
  %226 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %7, i64 0, i32 0, i64 3, i32 1
  store double %225, double* %226, align 8
  call void @_ZNK8SkDCubic9subDivideERK8SkDPointS2_ddPS0_(%struct.SkDCubic* nonnull %7, %struct.SkDPoint* dereferenceable(16) %8, %struct.SkDPoint* dereferenceable(16) %192, double %35, double %37, %struct.SkDPoint* %193) #11
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %194) #11
  br label %227

227:                                              ; preds = %46, %57, %77, %95, %148, %189, %114, %4
  %228 = phi i1 [ false, %4 ], [ false, %46 ], [ false, %57 ], [ false, %77 ], [ false, %95 ], [ true, %148 ], [ true, %189 ], [ true, %114 ]
  ret i1 %228
}

declare void @_ZN13SkDCurveSweep17setCurveHullSweepEN6SkPath4VerbE(%class.SkDCurveSweep*, i32) local_unnamed_addr #3

declare void @_ZN12SkPathWriter12deferredMoveEPK7SkOpPtT(%class.SkPathWriter*, %class.SkOpPtT*) local_unnamed_addr #3

declare zeroext i1 @_ZN12SkPathWriter12deferredLineEPK7SkOpPtT(%class.SkPathWriter*, %class.SkOpPtT*) local_unnamed_addr #3

declare void @_ZN12SkPathWriter6quadToERK7SkPointPK7SkOpPtT(%class.SkPathWriter*, %struct.SkPoint* dereferenceable(8), %class.SkOpPtT*) local_unnamed_addr #3

declare void @_ZN12SkPathWriter7conicToERK7SkPointPK7SkOpPtTf(%class.SkPathWriter*, %struct.SkPoint* dereferenceable(8), %class.SkOpPtT*, float) local_unnamed_addr #3

declare void @_ZN12SkPathWriter7cubicToERK7SkPointS2_PK7SkOpPtT(%class.SkPathWriter*, %struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8), %class.SkOpPtT*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpPtT* @_ZNK11SkOpSegment8existingEdPKS_(%class.SkOpSegment*, double, %class.SkOpSegment*) local_unnamed_addr #5 align 2 {
  %4 = alloca <2 x float>, align 8
  %5 = bitcast <2 x float>* %4 to %struct.SkPoint*
  %6 = bitcast %class.SkOpSegment* %0 to %class.SkOpSpanBase*
  %7 = bitcast <2 x float>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #11
  %8 = getelementptr inbounds <2 x float>, <2 x float>* %4, i64 0, i64 0
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %5, i64 0, i32 1
  %10 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 10
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds [5 x <2 x float> (%struct.SkPoint*, float, double)*], [5 x <2 x float> (%struct.SkPoint*, float, double)*]* @_ZL13CurvePointAtT, i64 0, i64 %12
  %14 = load <2 x float> (%struct.SkPoint*, float, double)*, <2 x float> (%struct.SkPoint*, float, double)** %13, align 8
  %15 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %16 = load %struct.SkPoint*, %struct.SkPoint** %15, align 8
  %17 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 7
  %18 = load float, float* %17, align 8
  %19 = tail call <2 x float> %14(%struct.SkPoint* %16, float %18, double %1) #11
  store <2 x float> %19, <2 x float>* %4, align 8
  br label %20

20:                                               ; preds = %101, %3
  %21 = phi %class.SkOpSpanBase* [ %6, %3 ], [ %103, %101 ]
  %22 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %21, i64 0, i32 0, i32 0
  %23 = load double, double* %22, align 8
  %24 = fcmp oeq double %23, %1
  br i1 %24, label %105, label %25

25:                                               ; preds = %20
  %26 = fsub double %23, %1
  %27 = call double @llvm.fabs.f64(double %26) #11
  %28 = fcmp olt double %27, 0x3CD0000000000000
  br i1 %28, label %72, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %21, i64 0, i32 0, i32 1
  %31 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* nonnull dereferenceable(8) %5, %struct.SkPoint* dereferenceable(8) %30) #11
  br i1 %31, label %32, label %69

32:                                               ; preds = %29
  %33 = load i32, i32* %10, align 4
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %72, label %35

35:                                               ; preds = %32
  %36 = load double, double* %22, align 8
  %37 = fadd double %36, %1
  %38 = fmul double %37, 5.000000e-01
  %39 = zext i32 %33 to i64
  %40 = getelementptr inbounds [5 x <2 x float> (%struct.SkPoint*, float, double)*], [5 x <2 x float> (%struct.SkPoint*, float, double)*]* @_ZL13CurvePointAtT, i64 0, i64 %39
  %41 = load <2 x float> (%struct.SkPoint*, float, double)*, <2 x float> (%struct.SkPoint*, float, double)** %40, align 8
  %42 = load %struct.SkPoint*, %struct.SkPoint** %15, align 8
  %43 = load float, float* %17, align 8
  %44 = call <2 x float> %41(%struct.SkPoint* %42, float %43, double %38) #11
  %45 = load <2 x float>, <2 x float>* %4, align 8
  %46 = bitcast %struct.SkPoint* %30 to <2 x float>*
  %47 = load <2 x float>, <2 x float>* %46, align 4
  %48 = fsub <2 x float> %47, %45
  %49 = fmul <2 x float> %48, %48
  %50 = extractelement <2 x float> %49, i32 0
  %51 = extractelement <2 x float> %49, i32 1
  %52 = fadd float %50, %51
  %53 = fmul float %52, 2.000000e+00
  %54 = fcmp olt float %53, 0x3E90000000000000
  %55 = select i1 %54, float 0x3E90000000000000, float %53
  %56 = fsub <2 x float> %44, %47
  %57 = fmul <2 x float> %56, %56
  %58 = extractelement <2 x float> %57, i32 0
  %59 = extractelement <2 x float> %57, i32 1
  %60 = fadd float %58, %59
  %61 = fcmp ogt float %60, %55
  br i1 %61, label %69, label %62

62:                                               ; preds = %35
  %63 = fsub <2 x float> %44, %45
  %64 = fmul <2 x float> %63, %63
  %65 = extractelement <2 x float> %64, i32 0
  %66 = extractelement <2 x float> %64, i32 1
  %67 = fadd float %65, %66
  %68 = fcmp ule float %67, %55
  br i1 %68, label %72, label %69

69:                                               ; preds = %35, %29, %62
  %70 = load double, double* %22, align 8
  %71 = fcmp ogt double %70, %1
  br i1 %71, label %116, label %101

72:                                               ; preds = %32, %25, %62
  %73 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %21, i64 0, i32 0
  %74 = icmp eq %class.SkOpSegment* %2, null
  br i1 %74, label %116, label %75

75:                                               ; preds = %72
  %76 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %21, i64 0, i32 0, i32 3
  %77 = load %class.SkOpPtT*, %class.SkOpPtT** %76, align 8
  %78 = icmp eq %class.SkOpPtT* %77, %73
  br i1 %78, label %116, label %79

79:                                               ; preds = %75, %97
  %80 = phi %class.SkOpPtT* [ %99, %97 ], [ %77, %75 ]
  %81 = call %class.SkOpSegment* @_ZNK7SkOpPtT7segmentEv(%class.SkOpPtT* %80) #11
  %82 = icmp eq %class.SkOpSegment* %81, %0
  br i1 %82, label %83, label %97

83:                                               ; preds = %79
  %84 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %80, i64 0, i32 0
  %85 = load double, double* %84, align 8
  %86 = fcmp oeq double %85, %1
  br i1 %86, label %87, label %97

87:                                               ; preds = %83
  %88 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %80, i64 0, i32 1, i32 0
  %89 = load float, float* %88, align 4
  %90 = load float, float* %8, align 8
  %91 = fcmp oeq float %89, %90
  br i1 %91, label %92, label %97

92:                                               ; preds = %87
  %93 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %80, i64 0, i32 1, i32 1
  %94 = load float, float* %93, align 4
  %95 = load float, float* %9, align 4
  %96 = fcmp oeq float %94, %95
  br i1 %96, label %108, label %97

97:                                               ; preds = %87, %92, %83, %79
  %98 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %80, i64 0, i32 3
  %99 = load %class.SkOpPtT*, %class.SkOpPtT** %98, align 8
  %100 = icmp eq %class.SkOpPtT* %99, %73
  br i1 %100, label %116, label %79

101:                                              ; preds = %69
  %102 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %21, i64 1, i32 0, i32 2
  %103 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %102, align 8
  %104 = icmp eq %class.SkOpSpanBase* %103, null
  br i1 %104, label %105, label %20

105:                                              ; preds = %20, %101
  %106 = phi %class.SkOpSpanBase* [ null, %101 ], [ %21, %20 ]
  %107 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %21, i64 0, i32 0
  br label %108

108:                                              ; preds = %92, %105
  %109 = phi %class.SkOpPtT* [ %107, %105 ], [ %73, %92 ]
  %110 = phi %class.SkOpSpanBase* [ %106, %105 ], [ %21, %92 ]
  %111 = icmp eq %class.SkOpSegment* %2, null
  br i1 %111, label %115, label %112

112:                                              ; preds = %108
  %113 = call %class.SkOpPtT* @_ZNK12SkOpSpanBase8containsEPK11SkOpSegment(%class.SkOpSpanBase* %110, %class.SkOpSegment* nonnull %2) #11
  %114 = icmp eq %class.SkOpPtT* %113, null
  br i1 %114, label %116, label %115

115:                                              ; preds = %112, %108
  br label %116

116:                                              ; preds = %69, %97, %75, %115, %112, %72
  %117 = phi %class.SkOpPtT* [ %73, %72 ], [ %109, %115 ], [ null, %112 ], [ null, %75 ], [ null, %97 ], [ null, %69 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #11
  ret %class.SkOpPtT* %117
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK11SkOpSegment5matchEPK7SkOpPtTPKS_dRK7SkPoint(%class.SkOpSegment* readonly, %class.SkOpPtT*, %class.SkOpSegment* readnone, double, %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #5 align 2 {
  %6 = icmp eq %class.SkOpSegment* %0, %2
  br i1 %6, label %10, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %1, i64 0, i32 1
  %9 = tail call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %4, %struct.SkPoint* dereferenceable(8) %8)
  br label %62

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %1, i64 0, i32 0
  %12 = load double, double* %11, align 8
  %13 = fsub double %12, %3
  %14 = tail call double @llvm.fabs.f64(double %13) #11
  %15 = fcmp olt double %14, 0x3CD0000000000000
  br i1 %15, label %62, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %1, i64 0, i32 1
  %18 = tail call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %4, %struct.SkPoint* dereferenceable(8) %17)
  %19 = and i1 %6, %18
  br i1 %19, label %20, label %62

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 10
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %62, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %1, i64 0, i32 0
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %3
  %28 = fmul double %27, 5.000000e-01
  %29 = zext i32 %22 to i64
  %30 = getelementptr inbounds [5 x <2 x float> (%struct.SkPoint*, float, double)*], [5 x <2 x float> (%struct.SkPoint*, float, double)*]* @_ZL13CurvePointAtT, i64 0, i64 %29
  %31 = load <2 x float> (%struct.SkPoint*, float, double)*, <2 x float> (%struct.SkPoint*, float, double)** %30, align 8
  %32 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %33 = load %struct.SkPoint*, %struct.SkPoint** %32, align 8
  %34 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 7
  %35 = load float, float* %34, align 8
  %36 = tail call <2 x float> %31(%struct.SkPoint* %33, float %35, double %28) #11
  %37 = bitcast %struct.SkPoint* %4 to <2 x float>*
  %38 = load <2 x float>, <2 x float>* %37, align 4
  %39 = bitcast %struct.SkPoint* %17 to <2 x float>*
  %40 = load <2 x float>, <2 x float>* %39, align 4
  %41 = fsub <2 x float> %40, %38
  %42 = fmul <2 x float> %41, %41
  %43 = extractelement <2 x float> %42, i32 0
  %44 = extractelement <2 x float> %42, i32 1
  %45 = fadd float %43, %44
  %46 = fmul float %45, 2.000000e+00
  %47 = fcmp olt float %46, 0x3E90000000000000
  %48 = select i1 %47, float 0x3E90000000000000, float %46
  %49 = fsub <2 x float> %36, %40
  %50 = fmul <2 x float> %49, %49
  %51 = extractelement <2 x float> %50, i32 0
  %52 = extractelement <2 x float> %50, i32 1
  %53 = fadd float %51, %52
  %54 = fcmp ogt float %53, %48
  br i1 %54, label %62, label %55

55:                                               ; preds = %24
  %56 = fsub <2 x float> %36, %38
  %57 = fmul <2 x float> %56, %56
  %58 = extractelement <2 x float> %57, i32 0
  %59 = extractelement <2 x float> %57, i32 1
  %60 = fadd float %58, %59
  %61 = fcmp ule float %60, %48
  br label %62

62:                                               ; preds = %7, %55, %24, %20, %16, %10
  %63 = phi i1 [ true, %10 ], [ %18, %16 ], [ true, %20 ], [ false, %24 ], [ %61, %55 ], [ %9, %7 ]
  ret i1 %63
}

declare %class.SkOpSegment* @_ZNK7SkOpPtT7segmentEv(%class.SkOpPtT*) local_unnamed_addr #3

declare %class.SkOpPtT* @_ZNK12SkOpSpanBase8containsEPK11SkOpSegment(%class.SkOpSpanBase*, %class.SkOpSegment*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment11addExpandedEdPK12SkOpSpanBasePb(%class.SkOpSegment*, double, %class.SkOpSpanBase*, i8* nocapture) local_unnamed_addr #5 align 2 {
  %5 = alloca <2 x float>, align 8
  %6 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 1
  %7 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0, i32 0, i32 0
  %8 = tail call zeroext i1 @_ZNK7SkOpPtT8containsEPK11SkOpSegmentd(%class.SkOpPtT* %7, %class.SkOpSegment* %0, double %1) #11
  br i1 %8, label %83, label %9

9:                                                ; preds = %4
  %10 = bitcast %class.SkOpSegment* %0 to %class.SkOpSpanBase*
  br label %11

11:                                               ; preds = %14, %9
  %12 = phi %class.SkOpSpanBase* [ %16, %14 ], [ %10, %9 ]
  %13 = icmp eq %class.SkOpSpanBase* %12, %6
  br i1 %13, label %19, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %12, i64 1, i32 0, i32 2
  %16 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %15, align 8
  %17 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %16, i64 0, i32 0
  %18 = tail call zeroext i1 @_ZNK7SkOpPtT8containsEPK11SkOpSegmentd(%class.SkOpPtT* %17, %class.SkOpSegment* %0, double %1) #11
  br i1 %18, label %83, label %11

19:                                               ; preds = %11
  %20 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %21 = load %class.SkOpContour*, %class.SkOpContour** %20, align 8
  %22 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %21, i64 0, i32 0
  %23 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %22, align 8
  %24 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %23, i64 0, i32 4
  store i8 0, i8* %24, align 4
  %25 = fsub double 0.000000e+00, %1
  %26 = fsub double 1.000000e+00, %1
  %27 = fmul double %25, %26
  %28 = fcmp ugt double %27, 0.000000e+00
  br i1 %28, label %83, label %29

29:                                               ; preds = %19
  %30 = bitcast <2 x float>* %5 to %struct.SkPoint*
  %31 = bitcast <2 x float>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #11
  %32 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 10
  %33 = load i32, i32* %32, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds [5 x <2 x float> (%struct.SkPoint*, float, double)*], [5 x <2 x float> (%struct.SkPoint*, float, double)*]* @_ZL13CurvePointAtT, i64 0, i64 %34
  %36 = load <2 x float> (%struct.SkPoint*, float, double)*, <2 x float> (%struct.SkPoint*, float, double)** %35, align 8
  %37 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %38 = load %struct.SkPoint*, %struct.SkPoint** %37, align 8
  %39 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 7
  %40 = load float, float* %39, align 8
  %41 = tail call <2 x float> %36(%struct.SkPoint* %38, float %40, double %1) #11
  store <2 x float> %41, <2 x float>* %5, align 8
  %42 = call %class.SkOpPtT* @_ZN11SkOpSegment4addTEdRK7SkPoint(%class.SkOpSegment* %0, double %1, %struct.SkPoint* nonnull dereferenceable(8) %30) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #11
  %43 = load %class.SkOpContour*, %class.SkOpContour** %20, align 8
  %44 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %43, i64 0, i32 0
  %45 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %44, align 8
  %46 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %45, i64 0, i32 4
  %47 = load i8, i8* %46, align 4, !range !2
  %48 = load i8, i8* %3, align 1, !range !2
  %49 = or i8 %48, %47
  store i8 %49, i8* %3, align 1
  %50 = icmp eq %class.SkOpPtT* %42, null
  br i1 %50, label %83, label %51

51:                                               ; preds = %29
  %52 = load i32, i32* %32, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds [5 x <2 x float> (%struct.SkPoint*, float, double)*], [5 x <2 x float> (%struct.SkPoint*, float, double)*]* @_ZL13CurvePointAtT, i64 0, i64 %53
  %55 = load <2 x float> (%struct.SkPoint*, float, double)*, <2 x float> (%struct.SkPoint*, float, double)** %54, align 8
  %56 = load %struct.SkPoint*, %struct.SkPoint** %37, align 8
  %57 = load float, float* %39, align 8
  %58 = call <2 x float> %55(%struct.SkPoint* %56, float %57, double %1) #11
  %59 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %42, i64 0, i32 1
  %60 = bitcast %struct.SkPoint* %59 to <2 x float>*
  store <2 x float> %58, <2 x float>* %60, align 8
  %61 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0
  %62 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %42, i64 0, i32 3
  %63 = load %class.SkOpPtT*, %class.SkOpPtT** %62, align 8
  %64 = icmp eq %class.SkOpPtT* %63, %61
  br i1 %64, label %83, label %65

65:                                               ; preds = %51, %70
  %66 = phi %class.SkOpPtT* [ %68, %70 ], [ %63, %51 ]
  %67 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %66, i64 0, i32 3
  %68 = load %class.SkOpPtT*, %class.SkOpPtT** %67, align 8
  %69 = icmp eq %class.SkOpPtT* %68, %42
  br i1 %69, label %72, label %70

70:                                               ; preds = %65
  %71 = icmp eq %class.SkOpPtT* %68, %61
  br i1 %71, label %83, label %65

72:                                               ; preds = %65
  %73 = icmp eq %class.SkOpPtT* %66, null
  br i1 %73, label %83, label %74

74:                                               ; preds = %72
  %75 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %66, i64 0, i32 3
  %76 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %42, i64 0, i32 2
  %77 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %76, align 8
  %78 = call zeroext i1 @_ZN12SkOpSpanBase12mergeMatchesEPS_(%class.SkOpSpanBase* %2, %class.SkOpSpanBase* %77) #11
  %79 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 3
  %80 = bitcast %class.SkOpPtT** %79 to i64*
  %81 = load i64, i64* %80, align 8
  store %class.SkOpPtT* %42, %class.SkOpPtT** %79, align 8
  %82 = bitcast %class.SkOpPtT** %75 to i64*
  store i64 %81, i64* %82, align 8
  call void @_ZN12SkOpSpanBase28checkForCollapsedCoincidenceEv(%class.SkOpSpanBase* %2) #11
  br label %83

83:                                               ; preds = %14, %70, %19, %51, %4, %29, %72, %74
  %84 = phi i1 [ false, %19 ], [ false, %29 ], [ true, %72 ], [ true, %74 ], [ true, %4 ], [ true, %51 ], [ true, %70 ], [ true, %14 ]
  ret i1 %84
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK11SkOpSegment8containsEd(%class.SkOpSegment*, double) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0, i32 0, i32 0
  %5 = tail call zeroext i1 @_ZNK7SkOpPtT8containsEPK11SkOpSegmentd(%class.SkOpPtT* %4, %class.SkOpSegment* %0, double %1) #11
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = bitcast %class.SkOpSegment* %0 to %class.SkOpSpanBase*
  br label %8

8:                                                ; preds = %6, %11
  %9 = phi %class.SkOpSpanBase* [ %13, %11 ], [ %7, %6 ]
  %10 = icmp eq %class.SkOpSpanBase* %9, %3
  br i1 %10, label %16, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %9, i64 1, i32 0, i32 2
  %13 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %12, align 8
  %14 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %13, i64 0, i32 0
  %15 = tail call zeroext i1 @_ZNK7SkOpPtT8containsEPK11SkOpSegmentd(%class.SkOpPtT* %14, %class.SkOpSegment* %0, double %1) #11
  br i1 %15, label %16, label %8

16:                                               ; preds = %11, %8, %2
  %17 = phi i1 [ true, %2 ], [ false, %8 ], [ true, %11 ]
  ret i1 %17
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.SkOpGlobalState* @_ZNK11SkOpSegment11globalStateEv(%class.SkOpSegment* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %3 = load %class.SkOpContour*, %class.SkOpContour** %2, align 8
  %4 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %3, i64 0, i32 0
  %5 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %4, align 8
  ret %class.SkOpGlobalState* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpPtT* @_ZN11SkOpSegment4addTEd(%class.SkOpSegment*, double) local_unnamed_addr #5 align 2 {
  %3 = alloca <2 x float>, align 8
  %4 = bitcast <2 x float>* %3 to %struct.SkPoint*
  %5 = bitcast <2 x float>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #11
  %6 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 10
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [5 x <2 x float> (%struct.SkPoint*, float, double)*], [5 x <2 x float> (%struct.SkPoint*, float, double)*]* @_ZL13CurvePointAtT, i64 0, i64 %8
  %10 = load <2 x float> (%struct.SkPoint*, float, double)*, <2 x float> (%struct.SkPoint*, float, double)** %9, align 8
  %11 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %12 = load %struct.SkPoint*, %struct.SkPoint** %11, align 8
  %13 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 7
  %14 = load float, float* %13, align 8
  %15 = tail call <2 x float> %10(%struct.SkPoint* %12, float %14, double %1) #11
  store <2 x float> %15, <2 x float>* %3, align 8
  %16 = call %class.SkOpPtT* @_ZN11SkOpSegment4addTEdRK7SkPoint(%class.SkOpSegment* %0, double %1, %struct.SkPoint* nonnull dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #11
  ret %class.SkOpPtT* %16
}

declare zeroext i1 @_ZN12SkOpSpanBase12mergeMatchesEPS_(%class.SkOpSpanBase*, %class.SkOpSpanBase*) local_unnamed_addr #3

declare void @_ZN12SkOpSpanBase28checkForCollapsedCoincidenceEv(%class.SkOpSpanBase*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpPtT* @_ZN11SkOpSegment4addTEdRK7SkPoint(%class.SkOpSegment*, double, %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #5 align 2 {
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  %4 = bitcast %class.SkOpSegment* %0 to %class.SkOpSpanBase*
  %5 = fcmp oeq double %1, 0.000000e+00
  %6 = fcmp oeq double %1, 1.000000e+00
  %7 = or i1 %5, %6
  %8 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 10
  %9 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %10 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 7
  %11 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 1
  %12 = bitcast %struct.SkPoint* %2 to <2 x float>*
  br label %13

13:                                               ; preds = %126, %3
  %14 = phi %class.SkOpSpanBase* [ %4, %3 ], [ %128, %126 ]
  %15 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %14, i64 0, i32 0, i32 0
  %16 = load double, double* %15, align 8
  %17 = fcmp oeq double %16, %1
  br i1 %17, label %63, label %18

18:                                               ; preds = %13
  br i1 %7, label %68, label %19

19:                                               ; preds = %18
  %20 = fsub double %16, %1
  %21 = tail call double @llvm.fabs.f64(double %20) #11
  %22 = fcmp olt double %21, 0x3CD0000000000000
  br i1 %22, label %63, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %14, i64 0, i32 0, i32 1
  %25 = tail call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %2, %struct.SkPoint* dereferenceable(8) %24) #11
  br i1 %25, label %26, label %68

26:                                               ; preds = %23
  %27 = load i32, i32* %8, align 4
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %63, label %29

29:                                               ; preds = %26
  %30 = load double, double* %15, align 8
  %31 = fadd double %30, %1
  %32 = fmul double %31, 5.000000e-01
  %33 = zext i32 %27 to i64
  %34 = getelementptr inbounds [5 x <2 x float> (%struct.SkPoint*, float, double)*], [5 x <2 x float> (%struct.SkPoint*, float, double)*]* @_ZL13CurvePointAtT, i64 0, i64 %33
  %35 = load <2 x float> (%struct.SkPoint*, float, double)*, <2 x float> (%struct.SkPoint*, float, double)** %34, align 8
  %36 = load %struct.SkPoint*, %struct.SkPoint** %9, align 8
  %37 = load float, float* %10, align 8
  %38 = tail call <2 x float> %35(%struct.SkPoint* %36, float %37, double %32) #11
  %39 = load <2 x float>, <2 x float>* %12, align 4
  %40 = bitcast %struct.SkPoint* %24 to <2 x float>*
  %41 = load <2 x float>, <2 x float>* %40, align 4
  %42 = fsub <2 x float> %41, %39
  %43 = fmul <2 x float> %42, %42
  %44 = extractelement <2 x float> %43, i32 0
  %45 = extractelement <2 x float> %43, i32 1
  %46 = fadd float %44, %45
  %47 = fmul float %46, 2.000000e+00
  %48 = fcmp olt float %47, 0x3E90000000000000
  %49 = select i1 %48, float 0x3E90000000000000, float %47
  %50 = fsub <2 x float> %38, %41
  %51 = fmul <2 x float> %50, %50
  %52 = extractelement <2 x float> %51, i32 0
  %53 = extractelement <2 x float> %51, i32 1
  %54 = fadd float %52, %53
  %55 = fcmp ogt float %54, %49
  br i1 %55, label %68, label %56

56:                                               ; preds = %29
  %57 = fsub <2 x float> %38, %39
  %58 = fmul <2 x float> %57, %57
  %59 = extractelement <2 x float> %58, i32 0
  %60 = extractelement <2 x float> %58, i32 1
  %61 = fadd float %59, %60
  %62 = fcmp ule float %61, %49
  br i1 %62, label %63, label %68

63:                                               ; preds = %26, %19, %56, %13
  %64 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %14, i64 0, i32 0
  %65 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %14, i64 0, i32 5
  %66 = load i32, i32* %65, align 8
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %65, align 8
  br label %130

68:                                               ; preds = %29, %23, %56, %18
  %69 = load double, double* %15, align 8
  %70 = fcmp ogt double %69, %1
  br i1 %70, label %71, label %124

71:                                               ; preds = %68
  %72 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %14, i64 0, i32 0, i32 2
  %73 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %72, align 8
  %74 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %73, i64 0, i32 4
  %75 = load %class.SkOpSpan*, %class.SkOpSpan** %74, align 8
  %76 = icmp eq %class.SkOpSpan* %75, null
  br i1 %76, label %130, label %77

77:                                               ; preds = %71
  %78 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %79 = load %class.SkOpContour*, %class.SkOpContour** %78, align 8
  %80 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %79, i64 0, i32 0
  %81 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %80, align 8
  %82 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %81, i64 0, i32 4
  store i8 1, i8* %82, align 4
  %83 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %81, i64 0, i32 0
  %84 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %83, align 8
  %85 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %84, i64 0, i32 1
  %86 = bitcast i8** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 0, %87
  %89 = and i64 %88, 7
  %90 = or i64 %89, 128
  %91 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %84, i64 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %93, %87
  %95 = icmp ugt i64 %90, %94
  br i1 %95, label %96, label %100

96:                                               ; preds = %77
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %84, i32 128, i32 8) #11
  %97 = load i64, i64* %86, align 8
  %98 = sub i64 0, %97
  %99 = and i64 %98, 7
  br label %100

100:                                              ; preds = %96, %77
  %101 = phi i64 [ %97, %96 ], [ %87, %77 ]
  %102 = phi i64 [ %99, %96 ], [ %89, %77 ]
  %103 = inttoptr i64 %101 to i8*
  %104 = getelementptr inbounds i8, i8* %103, i64 %102
  %105 = getelementptr inbounds i8, i8* %104, i64 128
  store i8* %105, i8** %85, align 8
  %106 = bitcast i8* %104 to %class.SkOpSpan*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 128, i1 false) #11
  %107 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %75, i64 0, i32 4
  %108 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %107, align 8
  %109 = getelementptr inbounds i8, i8* %104, i64 64
  %110 = bitcast i8* %109 to %class.SkOpSpan**
  store %class.SkOpSpan* %75, %class.SkOpSpan** %110, align 8
  %111 = bitcast %class.SkOpSpanBase** %107 to i8**
  store i8* %104, i8** %111, align 8
  %112 = getelementptr inbounds i8, i8* %104, i64 96
  %113 = bitcast i8* %112 to %class.SkOpSpanBase**
  store %class.SkOpSpanBase* %108, %class.SkOpSpanBase** %113, align 8
  %114 = icmp eq %class.SkOpSpanBase* %108, null
  br i1 %114, label %118, label %115

115:                                              ; preds = %100
  %116 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %108, i64 0, i32 4
  %117 = bitcast %class.SkOpSpan** %116 to i8**
  store i8* %104, i8** %117, align 8
  br label %118

118:                                              ; preds = %100, %115
  tail call void @_ZN8SkOpSpan4initEP11SkOpSegmentPS_dRK7SkPoint(%class.SkOpSpan* %106, %class.SkOpSegment* %0, %class.SkOpSpan* nonnull %75, double %1, %struct.SkPoint* dereferenceable(8) %2) #11
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  %119 = getelementptr inbounds i8, i8* %104, i64 72
  %120 = bitcast i8* %119 to i32*
  %121 = load i32, i32* %120, align 8
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %120, align 8
  %123 = bitcast i8* %104 to %class.SkOpPtT*
  br label %130

124:                                              ; preds = %68
  %125 = icmp eq %class.SkOpSpanBase* %14, %11
  br i1 %125, label %130, label %126

126:                                              ; preds = %124
  %127 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %14, i64 1, i32 0, i32 2
  %128 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %127, align 8
  %129 = icmp eq %class.SkOpSpanBase* %128, null
  br i1 %129, label %130, label %13

130:                                              ; preds = %124, %126, %71, %118, %63
  %131 = phi %class.SkOpPtT* [ null, %71 ], [ %123, %118 ], [ %64, %63 ], [ null, %126 ], [ null, %124 ]
  ret %class.SkOpPtT* %131
}

declare void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment*) local_unnamed_addr #3

declare void @_ZN8SkOpSpan4initEP11SkOpSegmentPS_dRK7SkPoint(%class.SkOpSpan*, %class.SkOpSegment*, %class.SkOpSpan*, double, %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkOpSegment10calcAnglesEv(%class.SkOpSegment*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0
  %3 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0, i32 7
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0, i32 8
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %51, label %10

10:                                               ; preds = %1, %6
  %11 = bitcast %class.SkOpSegment* %0 to %class.SkOpSpanBase*
  %12 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK7SkOpPtT13debugValidateEv(%class.SkOpPtT* %12) #11
  %13 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0, i32 0, i32 0, i32 3
  %14 = load %class.SkOpPtT*, %class.SkOpPtT** %13, align 8
  %15 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %14, i64 0, i32 3
  %16 = load %class.SkOpPtT*, %class.SkOpPtT** %15, align 8
  %17 = icmp eq %class.SkOpPtT* %16, %12
  br i1 %17, label %51, label %18

18:                                               ; preds = %10
  %19 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %20 = load %class.SkOpContour*, %class.SkOpContour** %19, align 8
  %21 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %20, i64 0, i32 0
  %22 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %21, align 8
  %23 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %22, i64 0, i32 0
  %24 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %23, align 8
  %25 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %24, i64 0, i32 1
  %26 = bitcast i8** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 0, %27
  %29 = and i64 %28, 7
  %30 = or i64 %29, 256
  %31 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %24, i64 0, i32 2
  %32 = bitcast i8** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %33, %27
  %35 = icmp ugt i64 %30, %34
  br i1 %35, label %36, label %40

36:                                               ; preds = %18
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %24, i32 256, i32 8) #11
  %37 = load i64, i64* %26, align 8
  %38 = sub i64 0, %37
  %39 = and i64 %38, 7
  br label %40

40:                                               ; preds = %18, %36
  %41 = phi i64 [ %37, %36 ], [ %27, %18 ]
  %42 = phi i64 [ %39, %36 ], [ %29, %18 ]
  %43 = inttoptr i64 %41 to i8*
  %44 = getelementptr inbounds i8, i8* %43, i64 %42
  %45 = getelementptr inbounds i8, i8* %44, i64 256
  store i8* %45, i8** %25, align 8
  %46 = bitcast i8* %44 to %class.SkOpAngle*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 256, i1 false) #11
  %47 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0, i32 4
  %48 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %47, align 8
  tail call void @_ZN9SkOpAngle3setEP12SkOpSpanBaseS1_(%class.SkOpAngle* %46, %class.SkOpSpanBase* %11, %class.SkOpSpanBase* %48) #11
  %49 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0, i32 3
  %50 = bitcast %class.SkOpAngle** %49 to i8**
  store i8* %44, i8** %50, align 8
  br label %51

51:                                               ; preds = %6, %40, %10
  %52 = phi i1 [ true, %6 ], [ false, %40 ], [ false, %10 ]
  %53 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0, i32 4
  %54 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %53, align 8
  %55 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 1
  %56 = icmp eq %class.SkOpSpanBase* %54, %55
  br i1 %56, label %145, label %57

57:                                               ; preds = %51
  %58 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  br label %59

59:                                               ; preds = %57, %141
  %60 = phi i1 [ %52, %57 ], [ %143, %141 ]
  %61 = phi %class.SkOpSpan* [ %2, %57 ], [ %95, %141 ]
  %62 = phi %class.SkOpSpanBase* [ %54, %57 ], [ %142, %141 ]
  br i1 %60, label %94, label %63

63:                                               ; preds = %59
  %64 = load %class.SkOpContour*, %class.SkOpContour** %58, align 8
  %65 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %64, i64 0, i32 0
  %66 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %65, align 8
  %67 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %66, i64 0, i32 0
  %68 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %67, align 8
  %69 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %68, i64 0, i32 1
  %70 = bitcast i8** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 0, %71
  %73 = and i64 %72, 7
  %74 = or i64 %73, 256
  %75 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %68, i64 0, i32 2
  %76 = bitcast i8** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = sub i64 %77, %71
  %79 = icmp ugt i64 %74, %78
  br i1 %79, label %80, label %84

80:                                               ; preds = %63
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %68, i32 256, i32 8) #11
  %81 = load i64, i64* %70, align 8
  %82 = sub i64 0, %81
  %83 = and i64 %82, 7
  br label %84

84:                                               ; preds = %63, %80
  %85 = phi i64 [ %81, %80 ], [ %71, %63 ]
  %86 = phi i64 [ %83, %80 ], [ %73, %63 ]
  %87 = inttoptr i64 %85 to i8*
  %88 = getelementptr inbounds i8, i8* %87, i64 %86
  %89 = getelementptr inbounds i8, i8* %88, i64 256
  store i8* %89, i8** %69, align 8
  %90 = bitcast i8* %88 to %class.SkOpAngle*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %88, i8 0, i64 256, i1 false) #11
  %91 = bitcast %class.SkOpSpan* %61 to %class.SkOpSpanBase*
  tail call void @_ZN9SkOpAngle3setEP12SkOpSpanBaseS1_(%class.SkOpAngle* %90, %class.SkOpSpanBase* %62, %class.SkOpSpanBase* %91) #11
  %92 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %62, i64 0, i32 3
  %93 = bitcast %class.SkOpAngle** %92 to i8**
  store i8* %88, i8** %93, align 8
  br label %94

94:                                               ; preds = %59, %84
  %95 = bitcast %class.SkOpSpanBase* %62 to %class.SkOpSpan*
  %96 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %62, i64 1, i32 0, i32 4
  %97 = bitcast i8* %96 to i32*
  %98 = load i32, i32* %97, align 8
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %103, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %62, i64 1, i32 0, i32 2
  %102 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %101, align 8
  br label %110

103:                                              ; preds = %94
  %104 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %62, i64 1, i32 0, i32 7, i64 1
  %105 = bitcast i8* %104 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = icmp eq i32 %106, 0
  %108 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %62, i64 1, i32 0, i32 2
  %109 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %108, align 8
  br i1 %107, label %141, label %110

110:                                              ; preds = %100, %103
  %111 = phi %class.SkOpSpanBase* [ %102, %100 ], [ %109, %103 ]
  %112 = load %class.SkOpContour*, %class.SkOpContour** %58, align 8
  %113 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %112, i64 0, i32 0
  %114 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %113, align 8
  %115 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %114, i64 0, i32 0
  %116 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %115, align 8
  %117 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %116, i64 0, i32 1
  %118 = bitcast i8** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = sub i64 0, %119
  %121 = and i64 %120, 7
  %122 = or i64 %121, 256
  %123 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %116, i64 0, i32 2
  %124 = bitcast i8** %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = sub i64 %125, %119
  %127 = icmp ugt i64 %122, %126
  br i1 %127, label %128, label %132

128:                                              ; preds = %110
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %116, i32 256, i32 8) #11
  %129 = load i64, i64* %118, align 8
  %130 = sub i64 0, %129
  %131 = and i64 %130, 7
  br label %132

132:                                              ; preds = %110, %128
  %133 = phi i64 [ %129, %128 ], [ %119, %110 ]
  %134 = phi i64 [ %131, %128 ], [ %121, %110 ]
  %135 = inttoptr i64 %133 to i8*
  %136 = getelementptr inbounds i8, i8* %135, i64 %134
  %137 = getelementptr inbounds i8, i8* %136, i64 256
  store i8* %137, i8** %117, align 8
  %138 = bitcast i8* %136 to %class.SkOpAngle*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %136, i8 0, i64 256, i1 false) #11
  tail call void @_ZN9SkOpAngle3setEP12SkOpSpanBaseS1_(%class.SkOpAngle* %138, %class.SkOpSpanBase* %62, %class.SkOpSpanBase* %111) #11
  %139 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %62, i64 1, i32 0, i32 1
  %140 = bitcast %struct.SkPoint* %139 to i8**
  store i8* %136, i8** %140, align 8
  br label %141

141:                                              ; preds = %103, %132
  %142 = phi %class.SkOpSpanBase* [ %109, %103 ], [ %111, %132 ]
  %143 = phi i1 [ true, %103 ], [ false, %132 ]
  %144 = icmp eq %class.SkOpSpanBase* %142, %55
  br i1 %144, label %145, label %59

145:                                              ; preds = %141, %51
  %146 = phi i1 [ %52, %51 ], [ %143, %141 ]
  br i1 %146, label %188, label %147

147:                                              ; preds = %145
  %148 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %55, i64 0, i32 0
  tail call void @_ZNK7SkOpPtT13debugValidateEv(%class.SkOpPtT* %148) #11
  %149 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 1, i32 0, i32 3
  %150 = load %class.SkOpPtT*, %class.SkOpPtT** %149, align 8
  %151 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %150, i64 0, i32 3
  %152 = load %class.SkOpPtT*, %class.SkOpPtT** %151, align 8
  %153 = icmp eq %class.SkOpPtT* %152, %148
  br i1 %153, label %188, label %154

154:                                              ; preds = %147
  %155 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %156 = load %class.SkOpContour*, %class.SkOpContour** %155, align 8
  %157 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %156, i64 0, i32 0
  %158 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %157, align 8
  %159 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %158, i64 0, i32 0
  %160 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %159, align 8
  %161 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %160, i64 0, i32 1
  %162 = bitcast i8** %161 to i64*
  %163 = load i64, i64* %162, align 8
  %164 = sub i64 0, %163
  %165 = and i64 %164, 7
  %166 = or i64 %165, 256
  %167 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %160, i64 0, i32 2
  %168 = bitcast i8** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %169, %163
  %171 = icmp ugt i64 %166, %170
  br i1 %171, label %172, label %176

172:                                              ; preds = %154
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %160, i32 256, i32 8) #11
  %173 = load i64, i64* %162, align 8
  %174 = sub i64 0, %173
  %175 = and i64 %174, 7
  br label %176

176:                                              ; preds = %154, %172
  %177 = phi i64 [ %173, %172 ], [ %163, %154 ]
  %178 = phi i64 [ %175, %172 ], [ %165, %154 ]
  %179 = inttoptr i64 %177 to i8*
  %180 = getelementptr inbounds i8, i8* %179, i64 %178
  %181 = getelementptr inbounds i8, i8* %180, i64 256
  store i8* %181, i8** %161, align 8
  %182 = bitcast i8* %180 to %class.SkOpAngle*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %180, i8 0, i64 256, i1 false) #11
  %183 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 1, i32 4
  %184 = bitcast %class.SkOpSpan** %183 to %class.SkOpSpanBase**
  %185 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %184, align 8
  tail call void @_ZN9SkOpAngle3setEP12SkOpSpanBaseS1_(%class.SkOpAngle* %182, %class.SkOpSpanBase* %55, %class.SkOpSpanBase* %185) #11
  %186 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 1, i32 3
  %187 = bitcast %class.SkOpAngle** %186 to i8**
  store i8* %180, i8** %187, align 8
  br label %188

188:                                              ; preds = %145, %176, %147
  ret void
}

declare void @_ZN9SkOpAngle3setEP12SkOpSpanBaseS1_(%class.SkOpAngle*, %class.SkOpSpanBase*, %class.SkOpSpanBase*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkOpSegment8clearAllEv(%class.SkOpSegment*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0
  %3 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  br label %4

4:                                                ; preds = %14, %1
  %5 = phi %class.SkOpSpan* [ %2, %1 ], [ %21, %14 ]
  %6 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %5, i64 0, i32 7
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %5, i64 0, i32 8
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %5, i64 0, i32 10
  %9 = load i8, i8* %8, align 4, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %4
  store i8 1, i8* %8, align 4
  %12 = load i32, i32* %3, align 8
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %14

14:                                               ; preds = %4, %11
  %15 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %5, i64 0, i32 4
  %16 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %15, align 8
  %17 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %16, i64 0, i32 0, i32 0
  %18 = load double, double* %17, align 8
  %19 = fcmp oeq double %18, 1.000000e+00
  %20 = bitcast %class.SkOpSpanBase* %16 to %class.SkOpSpan*
  %21 = select i1 %19, %class.SkOpSpan* null, %class.SkOpSpan* %20
  %22 = icmp eq %class.SkOpSpan* %21, null
  br i1 %22, label %23, label %4

23:                                               ; preds = %14
  %24 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %25 = load %class.SkOpContour*, %class.SkOpContour** %24, align 8
  %26 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %25, i64 0, i32 0
  %27 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %26, align 8
  %28 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %27, i64 0, i32 1
  %29 = load %class.SkOpCoincidence*, %class.SkOpCoincidence** %28, align 8
  tail call void @_ZN15SkOpCoincidence7releaseEPK11SkOpSegment(%class.SkOpCoincidence* %29, %class.SkOpSegment* %0) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkOpSegment8clearOneEP8SkOpSpan(%class.SkOpSegment*, %class.SkOpSpan* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %1, i64 0, i32 7
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %1, i64 0, i32 8
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %1, i64 0, i32 10
  %6 = load i8, i8* %5, align 4, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %2
  store i8 1, i8* %5, align 4
  %9 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  %10 = load i32, i32* %9, align 8
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %9, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %12

12:                                               ; preds = %2, %8
  ret void
}

declare void @_ZN15SkOpCoincidence7releaseEPK11SkOpSegment(%class.SkOpCoincidence*, %class.SkOpSegment*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkOpSegment8markDoneEP8SkOpSpan(%class.SkOpSegment*, %class.SkOpSpan* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %1, i64 0, i32 10
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  store i8 1, i8* %3, align 4
  %7 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  %8 = load i32, i32* %7, align 8
  %9 = add nsw i32 %8, 1
  store i32 %9, i32* %7, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %10

10:                                               ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK11SkOpSegment9collapsedEdd(%class.SkOpSegment*, double, double) local_unnamed_addr #0 align 2 {
  %4 = bitcast %class.SkOpSegment* %0 to %class.SkOpSpanBase*
  br label %5

5:                                                ; preds = %15, %3
  %6 = phi %class.SkOpSpanBase* [ %4, %3 ], [ %17, %15 ]
  %7 = tail call i32 @_ZNK12SkOpSpanBase9collapsedEdd(%class.SkOpSpanBase* %6, double %1, double %2) #11
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %19

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 0, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = fcmp oeq double %11, 1.000000e+00
  %13 = icmp eq %class.SkOpSpanBase* %6, null
  %14 = or i1 %13, %12
  br i1 %14, label %19, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 1, i32 0, i32 2
  %17 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %16, align 8
  %18 = icmp eq %class.SkOpSpanBase* %17, null
  br i1 %18, label %19, label %5

19:                                               ; preds = %9, %15, %5
  %20 = phi i32 [ %7, %5 ], [ 0, %15 ], [ 0, %9 ]
  ret i32 %20
}

declare i32 @_ZNK12SkOpSpanBase9collapsedEdd(%class.SkOpSpanBase*, double, double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment13ComputeOneSumEPK9SkOpAnglePS0_NS0_11IncludeTypeE(%class.SkOpAngle*, %class.SkOpAngle*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkOpSpanBase*, align 8
  %5 = tail call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* %0) #11
  %6 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %7 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %6, align 8
  %8 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 7
  %9 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %8, align 8
  %10 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %7, i64 0, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %9, i64 0, i32 0, i32 0
  %13 = load double, double* %12, align 8
  %14 = fcmp olt double %11, %13
  %15 = select i1 %14, %class.SkOpSpanBase* %7, %class.SkOpSpanBase* %9
  %16 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %15, i64 1, i32 0, i32 3
  %17 = bitcast %class.SkOpPtT** %16 to i32*
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, -2147483647
  br i1 %19, label %20, label %27

20:                                               ; preds = %3
  %21 = bitcast %class.SkOpSpanBase* %15 to %class.SkOpSpan*
  %22 = tail call i32 @_ZN8SkOpSpan14computeWindSumEv(%class.SkOpSpan* %21) #11
  %23 = icmp eq i32 %22, -2147483647
  br i1 %23, label %58, label %24

24:                                               ; preds = %20
  %25 = load double, double* %10, align 8
  %26 = load double, double* %12, align 8
  br label %27

27:                                               ; preds = %24, %3
  %28 = phi double [ %26, %24 ], [ %13, %3 ]
  %29 = phi double [ %25, %24 ], [ %11, %3 ]
  %30 = phi i32 [ %22, %24 ], [ %18, %3 ]
  %31 = fcmp olt double %29, %28
  br i1 %31, label %32, label %37

32:                                               ; preds = %27
  %33 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %7, i64 1, i32 0, i32 4
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 8
  %36 = sub nsw i32 0, %35
  br label %41

37:                                               ; preds = %27
  %38 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %9, i64 1, i32 0, i32 4
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 8
  br label %41

41:                                               ; preds = %37, %32
  %42 = phi i32 [ %36, %32 ], [ %40, %37 ]
  %43 = icmp eq i32 %30, 0
  br i1 %43, label %58, label %44

44:                                               ; preds = %41
  %45 = sub nsw i32 %30, %42
  %46 = icmp slt i32 %45, 0
  %47 = sub nsw i32 0, %45
  %48 = select i1 %46, i32 %47, i32 %45
  %49 = icmp slt i32 %30, 0
  %50 = sub nsw i32 0, %30
  %51 = select i1 %49, i32 %50, i32 %30
  %52 = icmp eq i32 %48, %51
  %53 = icmp slt i32 %48, %51
  %54 = select i1 %52, i1 %46, i1 %53
  %55 = icmp ne i32 %30, 2147483647
  %56 = and i1 %55, %54
  %57 = select i1 %56, i32 %45, i32 %30
  br label %58

58:                                               ; preds = %20, %41, %44
  %59 = phi i32 [ %57, %44 ], [ -2147483647, %20 ], [ 0, %41 ]
  %60 = icmp sgt i32 %2, 1
  br i1 %60, label %61, label %108

61:                                               ; preds = %58
  %62 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %6, align 8
  %63 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %8, align 8
  %64 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %62, i64 0, i32 0, i32 0
  %65 = load double, double* %64, align 8
  %66 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %63, i64 0, i32 0, i32 0
  %67 = load double, double* %66, align 8
  %68 = fcmp olt double %65, %67
  %69 = select i1 %68, %class.SkOpSpanBase* %62, %class.SkOpSpanBase* %63
  %70 = bitcast %class.SkOpSpanBase* %69 to %class.SkOpSpan*
  %71 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %70, i64 0, i32 6
  %72 = load i32, i32* %71, align 4
  br i1 %68, label %73, label %78

73:                                               ; preds = %61
  %74 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %62, i64 1, i32 0, i32 7, i64 1
  %75 = bitcast i8* %74 to i32*
  %76 = load i32, i32* %75, align 4
  %77 = sub nsw i32 0, %76
  br label %82

78:                                               ; preds = %61
  %79 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %63, i64 1, i32 0, i32 7, i64 1
  %80 = bitcast i8* %79 to i32*
  %81 = load i32, i32* %80, align 4
  br label %82

82:                                               ; preds = %78, %73
  %83 = phi i32 [ %77, %73 ], [ %81, %78 ]
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %99, label %85

85:                                               ; preds = %82
  %86 = sub nsw i32 %72, %83
  %87 = icmp slt i32 %86, 0
  %88 = sub nsw i32 0, %86
  %89 = select i1 %87, i32 %88, i32 %86
  %90 = icmp slt i32 %72, 0
  %91 = sub nsw i32 0, %72
  %92 = select i1 %90, i32 %91, i32 %72
  %93 = icmp eq i32 %89, %92
  %94 = icmp slt i32 %89, %92
  %95 = select i1 %93, i1 %87, i1 %94
  %96 = icmp ne i32 %72, 2147483647
  %97 = and i1 %96, %95
  %98 = select i1 %97, i32 %86, i32 %72
  br label %99

99:                                               ; preds = %82, %85
  %100 = phi i32 [ %98, %85 ], [ %72, %82 ]
  %101 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %5, i64 0, i32 2
  %102 = load %class.SkOpContour*, %class.SkOpContour** %101, align 8
  %103 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %102, i64 0, i32 9
  %104 = load i8, i8* %103, align 1, !range !2
  %105 = icmp ne i8 %104, 0
  %106 = select i1 %105, i32 %100, i32 %59
  %107 = select i1 %105, i32 %59, i32 %100
  br label %108

108:                                              ; preds = %99, %58
  %109 = phi i32 [ %59, %58 ], [ %106, %99 ]
  %110 = phi i32 [ -1431655766, %58 ], [ %107, %99 ]
  %111 = tail call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* %1) #11
  %112 = bitcast %class.SkOpSpanBase** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %112) #11
  store %class.SkOpSpanBase* null, %class.SkOpSpanBase** %4, align 8
  %113 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 6
  %114 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %113, align 8
  %115 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 7
  %116 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %115, align 8
  %117 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %114, i64 0, i32 0, i32 0
  %118 = load double, double* %117, align 8
  %119 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %116, i64 0, i32 0, i32 0
  %120 = load double, double* %119, align 8
  %121 = fcmp olt double %118, %120
  br i1 %60, label %122, label %170

122:                                              ; preds = %108
  br i1 %121, label %123, label %128

123:                                              ; preds = %122
  %124 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %114, i64 1, i32 0, i32 4
  %125 = bitcast i8* %124 to <2 x i32>*
  %126 = load <2 x i32>, <2 x i32>* %125, align 8
  %127 = sub nsw <2 x i32> zeroinitializer, %126
  br label %132

128:                                              ; preds = %122
  %129 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %116, i64 1, i32 0, i32 4
  %130 = bitcast i8* %129 to <2 x i32>*
  %131 = load <2 x i32>, <2 x i32>* %130, align 8
  br label %132

132:                                              ; preds = %128, %123
  %133 = phi <2 x i32> [ %127, %123 ], [ %131, %128 ]
  %134 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %111, i64 0, i32 2
  %135 = load %class.SkOpContour*, %class.SkOpContour** %134, align 8
  %136 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %135, i64 0, i32 9
  %137 = load i8, i8* %136, align 1, !range !2
  %138 = icmp eq i8 %137, 0
  %139 = select i1 %138, i32 %109, i32 %110
  %140 = select i1 %138, i32 %110, i32 %109
  %141 = extractelement <2 x i32> %133, i32 1
  %142 = sub nsw i32 %140, %141
  %143 = extractelement <2 x i32> %133, i32 0
  %144 = sub nsw i32 %139, %143
  %145 = icmp slt i32 %139, 0
  %146 = sub nsw i32 0, %139
  %147 = select i1 %145, i32 %146, i32 %139
  %148 = icmp slt i32 %144, 0
  %149 = sub nsw i32 0, %144
  %150 = select i1 %148, i32 %149, i32 %144
  %151 = icmp eq i32 %147, %150
  %152 = icmp slt i32 %147, %150
  %153 = select i1 %151, i1 %145, i1 %152
  %154 = select i1 %153, i32 %144, i32 %139
  %155 = icmp eq i32 %141, 0
  br i1 %155, label %167, label %156

156:                                              ; preds = %132
  %157 = icmp slt i32 %140, 0
  %158 = sub nsw i32 0, %140
  %159 = select i1 %157, i32 %158, i32 %140
  %160 = icmp slt i32 %142, 0
  %161 = sub nsw i32 0, %142
  %162 = select i1 %160, i32 %161, i32 %142
  %163 = icmp eq i32 %159, %162
  %164 = icmp slt i32 %159, %162
  %165 = select i1 %163, i1 %157, i1 %164
  %166 = select i1 %165, i32 %142, i32 %140
  br label %167

167:                                              ; preds = %132, %156
  %168 = phi i32 [ %140, %132 ], [ %166, %156 ]
  %169 = call zeroext i1 @_ZN11SkOpSegment19markAndChaseWindingEP12SkOpSpanBaseS1_iiPS1_(%class.SkOpSegment* %111, %class.SkOpSpanBase* %114, %class.SkOpSpanBase* %116, i32 %154, i32 %168, %class.SkOpSpanBase** nonnull %4) #11
  br i1 %169, label %194, label %199

170:                                              ; preds = %108
  br i1 %121, label %171, label %176

171:                                              ; preds = %170
  %172 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %114, i64 1, i32 0, i32 4
  %173 = bitcast i8* %172 to i32*
  %174 = load i32, i32* %173, align 8
  %175 = sub nsw i32 0, %174
  br label %180

176:                                              ; preds = %170
  %177 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %116, i64 1, i32 0, i32 4
  %178 = bitcast i8* %177 to i32*
  %179 = load i32, i32* %178, align 8
  br label %180

180:                                              ; preds = %171, %176
  %181 = phi i32 [ %175, %171 ], [ %179, %176 ]
  %182 = sub nsw i32 %109, %181
  %183 = icmp slt i32 %109, 0
  %184 = sub nsw i32 0, %109
  %185 = select i1 %183, i32 %184, i32 %109
  %186 = icmp slt i32 %182, 0
  %187 = sub nsw i32 0, %182
  %188 = select i1 %186, i32 %187, i32 %182
  %189 = icmp eq i32 %185, %188
  %190 = icmp slt i32 %185, %188
  %191 = select i1 %189, i1 %183, i1 %190
  %192 = select i1 %191, i32 %182, i32 %109
  %193 = call zeroext i1 @_ZN11SkOpSegment19markAndChaseWindingEP12SkOpSpanBaseS1_iPS1_(%class.SkOpSegment* %111, %class.SkOpSpanBase* %114, %class.SkOpSpanBase* %116, i32 %192, %class.SkOpSpanBase** nonnull %4) #11
  br i1 %193, label %194, label %199

194:                                              ; preds = %180, %167
  %195 = bitcast %class.SkOpSpanBase** %4 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 5
  %198 = bitcast %class.SkOpSpanBase** %197 to i64*
  store i64 %196, i64* %198, align 8
  br label %199

199:                                              ; preds = %180, %167, %194
  %200 = phi i1 [ true, %194 ], [ false, %167 ], [ false, %180 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %112) #11
  ret i1 %200
}

declare %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN11SkOpSegment20updateWindingReverseEPK9SkOpAngle(%class.SkOpSegment* nocapture readnone, %class.SkOpAngle* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 6
  %4 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %3, align 8
  %5 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 7
  %6 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %5, align 8
  %7 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 0, i32 0, i32 0
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 0, i32 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = fcmp olt double %8, %10
  %12 = select i1 %11, %class.SkOpSpanBase* %4, %class.SkOpSpanBase* %6
  %13 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %12, i64 1, i32 0, i32 3
  %14 = bitcast %class.SkOpPtT** %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, -2147483647
  br i1 %16, label %17, label %24

17:                                               ; preds = %2
  %18 = bitcast %class.SkOpSpanBase* %12 to %class.SkOpSpan*
  %19 = tail call i32 @_ZN8SkOpSpan14computeWindSumEv(%class.SkOpSpan* %18) #11
  %20 = icmp eq i32 %19, -2147483647
  br i1 %20, label %55, label %21

21:                                               ; preds = %17
  %22 = load double, double* %7, align 8
  %23 = load double, double* %9, align 8
  br label %24

24:                                               ; preds = %21, %2
  %25 = phi double [ %23, %21 ], [ %10, %2 ]
  %26 = phi double [ %22, %21 ], [ %8, %2 ]
  %27 = phi i32 [ %19, %21 ], [ %15, %2 ]
  %28 = fcmp olt double %26, %25
  br i1 %28, label %29, label %34

29:                                               ; preds = %24
  %30 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 1, i32 0, i32 4
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 8
  %33 = sub nsw i32 0, %32
  br label %38

34:                                               ; preds = %24
  %35 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 1, i32 0, i32 4
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 8
  br label %38

38:                                               ; preds = %34, %29
  %39 = phi i32 [ %33, %29 ], [ %37, %34 ]
  %40 = icmp eq i32 %27, 0
  br i1 %40, label %55, label %41

41:                                               ; preds = %38
  %42 = sub nsw i32 %27, %39
  %43 = icmp slt i32 %42, 0
  %44 = sub nsw i32 0, %42
  %45 = select i1 %43, i32 %44, i32 %42
  %46 = icmp slt i32 %27, 0
  %47 = sub nsw i32 0, %27
  %48 = select i1 %46, i32 %47, i32 %27
  %49 = icmp eq i32 %45, %48
  %50 = icmp slt i32 %45, %48
  %51 = select i1 %49, i1 %43, i1 %50
  %52 = icmp ne i32 %27, 2147483647
  %53 = and i1 %52, %51
  %54 = select i1 %53, i32 %42, i32 %27
  br label %55

55:                                               ; preds = %17, %38, %41
  %56 = phi i32 [ %54, %41 ], [ -2147483647, %17 ], [ 0, %38 ]
  ret i32 %56
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK11SkOpSegment23updateOppWindingReverseEPK9SkOpAngle(%class.SkOpSegment* nocapture readnone, %class.SkOpAngle* nocapture readonly) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 6
  %4 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %3, align 8
  %5 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 7
  %6 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %5, align 8
  %7 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 0, i32 0, i32 0
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 0, i32 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = fcmp olt double %8, %10
  %12 = select i1 %11, %class.SkOpSpanBase* %4, %class.SkOpSpanBase* %6
  %13 = bitcast %class.SkOpSpanBase* %12 to %class.SkOpSpan*
  %14 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %13, i64 0, i32 6
  %15 = load i32, i32* %14, align 4
  br i1 %11, label %16, label %21

16:                                               ; preds = %2
  %17 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 1, i32 0, i32 7, i64 1
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = sub nsw i32 0, %19
  br label %25

21:                                               ; preds = %2
  %22 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 1, i32 0, i32 7, i64 1
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 4
  br label %25

25:                                               ; preds = %21, %16
  %26 = phi i32 [ %20, %16 ], [ %24, %21 ]
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %42, label %28

28:                                               ; preds = %25
  %29 = sub nsw i32 %15, %26
  %30 = icmp slt i32 %29, 0
  %31 = sub nsw i32 0, %29
  %32 = select i1 %30, i32 %31, i32 %29
  %33 = icmp slt i32 %15, 0
  %34 = sub nsw i32 0, %15
  %35 = select i1 %33, i32 %34, i32 %15
  %36 = icmp eq i32 %32, %35
  %37 = icmp slt i32 %32, %35
  %38 = select i1 %36, i1 %30, i1 %37
  %39 = icmp ne i32 %15, 2147483647
  %40 = and i1 %39, %38
  %41 = select i1 %40, i32 %29, i32 %15
  br label %42

42:                                               ; preds = %25, %28
  %43 = phi i32 [ %41, %28 ], [ %15, %25 ]
  ret i32 %43
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment9markAngleEiiiiPK9SkOpAnglePP12SkOpSpanBase(%class.SkOpSegment*, i32, i32, i32, i32, %class.SkOpAngle* nocapture readonly, %class.SkOpSpanBase**) local_unnamed_addr #0 align 2 {
  %8 = icmp slt i32 %1, 0
  %9 = sub nsw i32 0, %1
  %10 = select i1 %8, i32 %9, i32 %1
  %11 = icmp slt i32 %2, 0
  %12 = sub nsw i32 0, %2
  %13 = select i1 %11, i32 %12, i32 %2
  %14 = icmp eq i32 %10, %13
  %15 = icmp slt i32 %10, %13
  %16 = select i1 %14, i1 %8, i1 %15
  %17 = select i1 %16, i32 %2, i32 %1
  %18 = icmp eq i32 %3, %4
  br i1 %18, label %30, label %19

19:                                               ; preds = %7
  %20 = icmp slt i32 %3, 0
  %21 = sub nsw i32 0, %3
  %22 = select i1 %20, i32 %21, i32 %3
  %23 = icmp slt i32 %4, 0
  %24 = sub nsw i32 0, %4
  %25 = select i1 %23, i32 %24, i32 %4
  %26 = icmp eq i32 %22, %25
  %27 = icmp slt i32 %22, %25
  %28 = select i1 %26, i1 %20, i1 %27
  %29 = select i1 %28, i32 %4, i32 %3
  br label %30

30:                                               ; preds = %19, %7
  %31 = phi i32 [ %3, %7 ], [ %29, %19 ]
  %32 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %5, i64 0, i32 6
  %33 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %32, align 8
  %34 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %5, i64 0, i32 7
  %35 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %34, align 8
  %36 = tail call zeroext i1 @_ZN11SkOpSegment19markAndChaseWindingEP12SkOpSpanBaseS1_iiPS1_(%class.SkOpSegment* %0, %class.SkOpSpanBase* %33, %class.SkOpSpanBase* %35, i32 %17, i32 %31, %class.SkOpSpanBase** %6)
  ret i1 %36
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN11SkOpSegment13setUpWindingsEP12SkOpSpanBaseS1_PiS2_S2_(%class.SkOpSegment* nocapture readnone, %class.SkOpSpanBase* nocapture readonly, %class.SkOpSpanBase* nocapture readonly, i32* nocapture, i32* nocapture, i32* nocapture) local_unnamed_addr #2 align 2 {
  %7 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = fcmp olt double %8, %10
  br i1 %11, label %12, label %17

12:                                               ; preds = %6
  %13 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 1, i32 0, i32 4
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = sub nsw i32 0, %15
  br label %21

17:                                               ; preds = %6
  %18 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 1, i32 0, i32 4
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  br label %21

21:                                               ; preds = %12, %17
  %22 = phi i32 [ %16, %12 ], [ %20, %17 ]
  %23 = load i32, i32* %3, align 4
  store i32 %23, i32* %4, align 4
  %24 = load i32, i32* %3, align 4
  %25 = sub nsw i32 %24, %22
  store i32 %25, i32* %3, align 4
  store i32 %25, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment9markAngleEiiPK9SkOpAnglePP12SkOpSpanBase(%class.SkOpSegment*, i32, i32, %class.SkOpAngle* nocapture readonly, %class.SkOpSpanBase**) local_unnamed_addr #0 align 2 {
  %6 = icmp slt i32 %1, 0
  %7 = sub nsw i32 0, %1
  %8 = select i1 %6, i32 %7, i32 %1
  %9 = icmp slt i32 %2, 0
  %10 = sub nsw i32 0, %2
  %11 = select i1 %9, i32 %10, i32 %2
  %12 = icmp eq i32 %8, %11
  %13 = icmp slt i32 %8, %11
  %14 = select i1 %12, i1 %6, i1 %13
  %15 = select i1 %14, i32 %2, i32 %1
  %16 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %3, i64 0, i32 6
  %17 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %16, align 8
  %18 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %3, i64 0, i32 7
  %19 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %18, align 8
  %20 = tail call zeroext i1 @_ZN11SkOpSegment19markAndChaseWindingEP12SkOpSpanBaseS1_iPS1_(%class.SkOpSegment* %0, %class.SkOpSpanBase* %17, %class.SkOpSpanBase* %19, i32 %15, %class.SkOpSpanBase** %4)
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment20ComputeOneSumReverseEP9SkOpAngleS1_NS0_11IncludeTypeE(%class.SkOpAngle*, %class.SkOpAngle*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkOpSpanBase*, align 8
  %5 = tail call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* %0) #11
  %6 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %7 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %6, align 8
  %8 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 7
  %9 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %8, align 8
  %10 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %9, i64 0, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %7, i64 0, i32 0, i32 0
  %13 = load double, double* %12, align 8
  %14 = fcmp olt double %11, %13
  %15 = select i1 %14, %class.SkOpSpanBase* %9, %class.SkOpSpanBase* %7
  %16 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %15, i64 1, i32 0, i32 3
  %17 = bitcast %class.SkOpPtT** %16 to i32*
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, -2147483647
  br i1 %19, label %20, label %27

20:                                               ; preds = %3
  %21 = bitcast %class.SkOpSpanBase* %15 to %class.SkOpSpan*
  %22 = tail call i32 @_ZN8SkOpSpan14computeWindSumEv(%class.SkOpSpan* %21) #11
  %23 = icmp eq i32 %22, -2147483647
  br i1 %23, label %58, label %24

24:                                               ; preds = %20
  %25 = load double, double* %10, align 8
  %26 = load double, double* %12, align 8
  br label %27

27:                                               ; preds = %24, %3
  %28 = phi double [ %26, %24 ], [ %13, %3 ]
  %29 = phi double [ %25, %24 ], [ %11, %3 ]
  %30 = phi i32 [ %22, %24 ], [ %18, %3 ]
  %31 = fcmp olt double %29, %28
  br i1 %31, label %32, label %37

32:                                               ; preds = %27
  %33 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %9, i64 1, i32 0, i32 4
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 8
  %36 = sub nsw i32 0, %35
  br label %41

37:                                               ; preds = %27
  %38 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %7, i64 1, i32 0, i32 4
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 8
  br label %41

41:                                               ; preds = %37, %32
  %42 = phi i32 [ %36, %32 ], [ %40, %37 ]
  %43 = icmp eq i32 %30, 0
  br i1 %43, label %58, label %44

44:                                               ; preds = %41
  %45 = sub nsw i32 %30, %42
  %46 = icmp slt i32 %45, 0
  %47 = sub nsw i32 0, %45
  %48 = select i1 %46, i32 %47, i32 %45
  %49 = icmp slt i32 %30, 0
  %50 = sub nsw i32 0, %30
  %51 = select i1 %49, i32 %50, i32 %30
  %52 = icmp eq i32 %48, %51
  %53 = icmp slt i32 %48, %51
  %54 = select i1 %52, i1 %46, i1 %53
  %55 = icmp ne i32 %30, 2147483647
  %56 = and i1 %55, %54
  %57 = select i1 %56, i32 %45, i32 %30
  br label %58

58:                                               ; preds = %20, %41, %44
  %59 = phi i32 [ %57, %44 ], [ -2147483647, %20 ], [ 0, %41 ]
  %60 = icmp sgt i32 %2, 1
  br i1 %60, label %61, label %108

61:                                               ; preds = %58
  %62 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %6, align 8
  %63 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %8, align 8
  %64 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %63, i64 0, i32 0, i32 0
  %65 = load double, double* %64, align 8
  %66 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %62, i64 0, i32 0, i32 0
  %67 = load double, double* %66, align 8
  %68 = fcmp olt double %65, %67
  %69 = select i1 %68, %class.SkOpSpanBase* %63, %class.SkOpSpanBase* %62
  %70 = bitcast %class.SkOpSpanBase* %69 to %class.SkOpSpan*
  %71 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %70, i64 0, i32 6
  %72 = load i32, i32* %71, align 4
  br i1 %68, label %73, label %78

73:                                               ; preds = %61
  %74 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %63, i64 1, i32 0, i32 7, i64 1
  %75 = bitcast i8* %74 to i32*
  %76 = load i32, i32* %75, align 4
  %77 = sub nsw i32 0, %76
  br label %82

78:                                               ; preds = %61
  %79 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %62, i64 1, i32 0, i32 7, i64 1
  %80 = bitcast i8* %79 to i32*
  %81 = load i32, i32* %80, align 4
  br label %82

82:                                               ; preds = %78, %73
  %83 = phi i32 [ %77, %73 ], [ %81, %78 ]
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %99, label %85

85:                                               ; preds = %82
  %86 = sub nsw i32 %72, %83
  %87 = icmp slt i32 %86, 0
  %88 = sub nsw i32 0, %86
  %89 = select i1 %87, i32 %88, i32 %86
  %90 = icmp slt i32 %72, 0
  %91 = sub nsw i32 0, %72
  %92 = select i1 %90, i32 %91, i32 %72
  %93 = icmp eq i32 %89, %92
  %94 = icmp slt i32 %89, %92
  %95 = select i1 %93, i1 %87, i1 %94
  %96 = icmp ne i32 %72, 2147483647
  %97 = and i1 %96, %95
  %98 = select i1 %97, i32 %86, i32 %72
  br label %99

99:                                               ; preds = %82, %85
  %100 = phi i32 [ %98, %85 ], [ %72, %82 ]
  %101 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %5, i64 0, i32 2
  %102 = load %class.SkOpContour*, %class.SkOpContour** %101, align 8
  %103 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %102, i64 0, i32 9
  %104 = load i8, i8* %103, align 1, !range !2
  %105 = icmp ne i8 %104, 0
  %106 = select i1 %105, i32 %100, i32 %59
  %107 = select i1 %105, i32 %59, i32 %100
  br label %108

108:                                              ; preds = %99, %58
  %109 = phi i32 [ %59, %58 ], [ %106, %99 ]
  %110 = phi i32 [ -1431655766, %58 ], [ %107, %99 ]
  %111 = tail call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* %1) #11
  %112 = bitcast %class.SkOpSpanBase** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %112) #11
  store %class.SkOpSpanBase* null, %class.SkOpSpanBase** %4, align 8
  %113 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 7
  %114 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %113, align 8
  %115 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 6
  %116 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %115, align 8
  %117 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %114, i64 0, i32 0, i32 0
  %118 = load double, double* %117, align 8
  %119 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %116, i64 0, i32 0, i32 0
  %120 = load double, double* %119, align 8
  %121 = fcmp olt double %118, %120
  br i1 %60, label %122, label %170

122:                                              ; preds = %108
  br i1 %121, label %123, label %128

123:                                              ; preds = %122
  %124 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %114, i64 1, i32 0, i32 4
  %125 = bitcast i8* %124 to <2 x i32>*
  %126 = load <2 x i32>, <2 x i32>* %125, align 8
  %127 = sub nsw <2 x i32> zeroinitializer, %126
  br label %132

128:                                              ; preds = %122
  %129 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %116, i64 1, i32 0, i32 4
  %130 = bitcast i8* %129 to <2 x i32>*
  %131 = load <2 x i32>, <2 x i32>* %130, align 8
  br label %132

132:                                              ; preds = %128, %123
  %133 = phi <2 x i32> [ %127, %123 ], [ %131, %128 ]
  %134 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %111, i64 0, i32 2
  %135 = load %class.SkOpContour*, %class.SkOpContour** %134, align 8
  %136 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %135, i64 0, i32 9
  %137 = load i8, i8* %136, align 1, !range !2
  %138 = icmp eq i8 %137, 0
  %139 = select i1 %138, i32 %109, i32 %110
  %140 = select i1 %138, i32 %110, i32 %109
  %141 = extractelement <2 x i32> %133, i32 1
  %142 = sub nsw i32 %140, %141
  %143 = extractelement <2 x i32> %133, i32 0
  %144 = sub nsw i32 %139, %143
  %145 = icmp slt i32 %139, 0
  %146 = sub nsw i32 0, %139
  %147 = select i1 %145, i32 %146, i32 %139
  %148 = icmp slt i32 %144, 0
  %149 = sub nsw i32 0, %144
  %150 = select i1 %148, i32 %149, i32 %144
  %151 = icmp eq i32 %147, %150
  %152 = icmp slt i32 %147, %150
  %153 = select i1 %151, i1 %145, i1 %152
  %154 = select i1 %153, i32 %144, i32 %139
  %155 = icmp eq i32 %141, 0
  br i1 %155, label %167, label %156

156:                                              ; preds = %132
  %157 = icmp slt i32 %140, 0
  %158 = sub nsw i32 0, %140
  %159 = select i1 %157, i32 %158, i32 %140
  %160 = icmp slt i32 %142, 0
  %161 = sub nsw i32 0, %142
  %162 = select i1 %160, i32 %161, i32 %142
  %163 = icmp eq i32 %159, %162
  %164 = icmp slt i32 %159, %162
  %165 = select i1 %163, i1 %157, i1 %164
  %166 = select i1 %165, i32 %142, i32 %140
  br label %167

167:                                              ; preds = %132, %156
  %168 = phi i32 [ %140, %132 ], [ %166, %156 ]
  %169 = call zeroext i1 @_ZN11SkOpSegment19markAndChaseWindingEP12SkOpSpanBaseS1_iiPS1_(%class.SkOpSegment* %111, %class.SkOpSpanBase* %116, %class.SkOpSpanBase* %114, i32 %154, i32 %168, %class.SkOpSpanBase** nonnull %4) #11
  br i1 %169, label %194, label %199

170:                                              ; preds = %108
  br i1 %121, label %171, label %176

171:                                              ; preds = %170
  %172 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %114, i64 1, i32 0, i32 4
  %173 = bitcast i8* %172 to i32*
  %174 = load i32, i32* %173, align 8
  %175 = sub nsw i32 0, %174
  br label %180

176:                                              ; preds = %170
  %177 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %116, i64 1, i32 0, i32 4
  %178 = bitcast i8* %177 to i32*
  %179 = load i32, i32* %178, align 8
  br label %180

180:                                              ; preds = %171, %176
  %181 = phi i32 [ %175, %171 ], [ %179, %176 ]
  %182 = sub nsw i32 %109, %181
  %183 = icmp slt i32 %109, 0
  %184 = sub nsw i32 0, %109
  %185 = select i1 %183, i32 %184, i32 %109
  %186 = icmp slt i32 %182, 0
  %187 = sub nsw i32 0, %182
  %188 = select i1 %186, i32 %187, i32 %182
  %189 = icmp eq i32 %185, %188
  %190 = icmp slt i32 %185, %188
  %191 = select i1 %189, i1 %183, i1 %190
  %192 = select i1 %191, i32 %182, i32 %109
  %193 = call zeroext i1 @_ZN11SkOpSegment19markAndChaseWindingEP12SkOpSpanBaseS1_iPS1_(%class.SkOpSegment* %111, %class.SkOpSpanBase* %116, %class.SkOpSpanBase* %114, i32 %192, %class.SkOpSpanBase** nonnull %4) #11
  br i1 %193, label %194, label %199

194:                                              ; preds = %180, %167
  %195 = bitcast %class.SkOpSpanBase** %4 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 5
  %198 = bitcast %class.SkOpSpanBase** %197 to i64*
  store i64 %196, i64* %198, align 8
  br label %199

199:                                              ; preds = %180, %167, %194
  %200 = phi i1 [ true, %194 ], [ false, %167 ], [ false, %180 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %112) #11
  ret i1 %200
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN11SkOpSegment13updateWindingEP9SkOpAngle(%class.SkOpSegment* nocapture readnone, %class.SkOpAngle* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 6
  %4 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %3, align 8
  %5 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 7
  %6 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %5, align 8
  %7 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 0, i32 0, i32 0
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 0, i32 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = fcmp olt double %8, %10
  %12 = select i1 %11, %class.SkOpSpanBase* %6, %class.SkOpSpanBase* %4
  %13 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %12, i64 1, i32 0, i32 3
  %14 = bitcast %class.SkOpPtT** %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, -2147483647
  br i1 %16, label %17, label %24

17:                                               ; preds = %2
  %18 = bitcast %class.SkOpSpanBase* %12 to %class.SkOpSpan*
  %19 = tail call i32 @_ZN8SkOpSpan14computeWindSumEv(%class.SkOpSpan* %18) #11
  %20 = icmp eq i32 %19, -2147483647
  br i1 %20, label %55, label %21

21:                                               ; preds = %17
  %22 = load double, double* %7, align 8
  %23 = load double, double* %9, align 8
  br label %24

24:                                               ; preds = %21, %2
  %25 = phi double [ %23, %21 ], [ %10, %2 ]
  %26 = phi double [ %22, %21 ], [ %8, %2 ]
  %27 = phi i32 [ %19, %21 ], [ %15, %2 ]
  %28 = fcmp olt double %26, %25
  br i1 %28, label %29, label %34

29:                                               ; preds = %24
  %30 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 1, i32 0, i32 4
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 8
  %33 = sub nsw i32 0, %32
  br label %38

34:                                               ; preds = %24
  %35 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 1, i32 0, i32 4
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 8
  br label %38

38:                                               ; preds = %34, %29
  %39 = phi i32 [ %33, %29 ], [ %37, %34 ]
  %40 = icmp eq i32 %27, 0
  br i1 %40, label %55, label %41

41:                                               ; preds = %38
  %42 = sub nsw i32 %27, %39
  %43 = icmp slt i32 %42, 0
  %44 = sub nsw i32 0, %42
  %45 = select i1 %43, i32 %44, i32 %42
  %46 = icmp slt i32 %27, 0
  %47 = sub nsw i32 0, %27
  %48 = select i1 %46, i32 %47, i32 %27
  %49 = icmp eq i32 %45, %48
  %50 = icmp slt i32 %45, %48
  %51 = select i1 %49, i1 %43, i1 %50
  %52 = icmp ne i32 %27, 2147483647
  %53 = and i1 %52, %51
  %54 = select i1 %53, i32 %42, i32 %27
  br label %55

55:                                               ; preds = %17, %38, %41
  %56 = phi i32 [ %54, %41 ], [ -2147483647, %17 ], [ 0, %38 ]
  ret i32 %56
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK11SkOpSegment16updateOppWindingEPK9SkOpAngle(%class.SkOpSegment* nocapture readnone, %class.SkOpAngle* nocapture readonly) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 6
  %4 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %3, align 8
  %5 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 7
  %6 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %5, align 8
  %7 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 0, i32 0, i32 0
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 0, i32 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = fcmp olt double %8, %10
  %12 = select i1 %11, %class.SkOpSpanBase* %6, %class.SkOpSpanBase* %4
  %13 = bitcast %class.SkOpSpanBase* %12 to %class.SkOpSpan*
  %14 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %13, i64 0, i32 6
  %15 = load i32, i32* %14, align 4
  br i1 %11, label %16, label %21

16:                                               ; preds = %2
  %17 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 1, i32 0, i32 7, i64 1
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = sub nsw i32 0, %19
  br label %25

21:                                               ; preds = %2
  %22 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 1, i32 0, i32 7, i64 1
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 4
  br label %25

25:                                               ; preds = %21, %16
  %26 = phi i32 [ %20, %16 ], [ %24, %21 ]
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %42, label %28

28:                                               ; preds = %25
  %29 = sub nsw i32 %15, %26
  %30 = icmp slt i32 %29, 0
  %31 = sub nsw i32 0, %29
  %32 = select i1 %30, i32 %31, i32 %29
  %33 = icmp slt i32 %15, 0
  %34 = sub nsw i32 0, %15
  %35 = select i1 %33, i32 %34, i32 %15
  %36 = icmp eq i32 %32, %35
  %37 = icmp slt i32 %32, %35
  %38 = select i1 %36, i1 %30, i1 %37
  %39 = icmp ne i32 %15, 2147483647
  %40 = and i1 %39, %38
  %41 = select i1 %40, i32 %29, i32 %15
  br label %42

42:                                               ; preds = %25, %28
  %43 = phi i32 [ %41, %28 ], [ %15, %25 ]
  ret i32 %43
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN11SkOpSegment10computeSumEP12SkOpSpanBaseS1_N9SkOpAngle11IncludeTypeE(%class.SkOpSegment* nocapture readnone, %class.SkOpSpanBase* nocapture readonly, %class.SkOpSpanBase* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %8 = load double, double* %7, align 8
  %9 = fcmp olt double %6, %8
  %10 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 1, i32 0, i32 1
  %11 = bitcast %struct.SkPoint* %10 to %class.SkOpAngle**
  %12 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 3
  %13 = select i1 %9, %class.SkOpAngle** %11, %class.SkOpAngle** %12
  %14 = load %class.SkOpAngle*, %class.SkOpAngle** %13, align 8
  %15 = icmp eq %class.SkOpAngle* %14, null
  br i1 %15, label %116, label %16

16:                                               ; preds = %4
  %17 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %14, i64 0, i32 4
  %18 = load %class.SkOpAngle*, %class.SkOpAngle** %17, align 8
  %19 = icmp eq %class.SkOpAngle* %18, null
  br i1 %19, label %116, label %20

20:                                               ; preds = %16
  %21 = tail call %class.SkOpAngle* @_ZNK9SkOpAngle8previousEv(%class.SkOpAngle* nonnull %14) #11
  %22 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %21, i64 0, i32 4
  %23 = load %class.SkOpAngle*, %class.SkOpAngle** %22, align 8
  br label %24

24:                                               ; preds = %56, %20
  %25 = phi %class.SkOpAngle* [ null, %20 ], [ %57, %56 ]
  %26 = phi i8 [ 0, %20 ], [ %58, %56 ]
  %27 = phi %class.SkOpAngle* [ %21, %20 ], [ %28, %56 ]
  %28 = phi %class.SkOpAngle* [ %23, %20 ], [ %30, %56 ]
  %29 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %28, i64 0, i32 4
  %30 = load %class.SkOpAngle*, %class.SkOpAngle** %29, align 8
  %31 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %27, i64 0, i32 12
  %32 = load i8, i8* %31, align 2, !range !2
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %56

34:                                               ; preds = %24
  %35 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %28, i64 0, i32 12
  %36 = load i8, i8* %35, align 2, !range !2
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %56

38:                                               ; preds = %34
  %39 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %30, i64 0, i32 12
  %40 = load i8, i8* %39, align 2, !range !2
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %56

42:                                               ; preds = %38
  %43 = tail call %class.SkOpSpan* @_ZN9SkOpAngle7starterEv(%class.SkOpAngle* %28) #11
  %44 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %43, i64 0, i32 5
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %45, -2147483647
  br i1 %46, label %47, label %56

47:                                               ; preds = %42
  %48 = icmp eq %class.SkOpAngle* %25, null
  br i1 %48, label %56, label %49

49:                                               ; preds = %47
  %50 = tail call zeroext i1 @_ZN11SkOpSegment13ComputeOneSumEPK9SkOpAnglePS0_NS0_11IncludeTypeE(%class.SkOpAngle* nonnull %25, %class.SkOpAngle* %28, i32 %3)
  %51 = tail call %class.SkOpSpan* @_ZN9SkOpAngle7starterEv(%class.SkOpAngle* %28) #11
  %52 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %51, i64 0, i32 5
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %53, -2147483647
  %55 = select i1 %54, %class.SkOpAngle* null, %class.SkOpAngle* %28
  br label %56

56:                                               ; preds = %38, %34, %24, %42, %47, %49
  %57 = phi %class.SkOpAngle* [ null, %38 ], [ null, %34 ], [ null, %24 ], [ %28, %42 ], [ %55, %49 ], [ null, %47 ]
  %58 = phi i8 [ %26, %38 ], [ %26, %34 ], [ %26, %24 ], [ 1, %42 ], [ %26, %49 ], [ %26, %47 ]
  %59 = icmp eq %class.SkOpAngle* %30, %23
  br i1 %59, label %60, label %24

60:                                               ; preds = %56
  %61 = icmp eq %class.SkOpAngle* %57, null
  br i1 %61, label %69, label %62

62:                                               ; preds = %60
  %63 = tail call %class.SkOpSpan* @_ZN9SkOpAngle7starterEv(%class.SkOpAngle* %23) #11
  %64 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %63, i64 0, i32 5
  %65 = load i32, i32* %64, align 8
  %66 = icmp eq i32 %65, -2147483647
  %67 = select i1 %66, i8 1, i8 %58
  %68 = select i1 %66, %class.SkOpAngle* %57, %class.SkOpAngle* %23
  br label %69

69:                                               ; preds = %62, %60
  %70 = phi i8 [ %58, %60 ], [ %67, %62 ]
  %71 = phi %class.SkOpAngle* [ %23, %60 ], [ %68, %62 ]
  %72 = and i8 %70, 1
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %108, label %74

74:                                               ; preds = %69, %105
  %75 = phi %class.SkOpAngle* [ %106, %105 ], [ null, %69 ]
  %76 = phi %class.SkOpAngle* [ %77, %105 ], [ %71, %69 ]
  %77 = tail call %class.SkOpAngle* @_ZNK9SkOpAngle8previousEv(%class.SkOpAngle* %76) #11
  %78 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %76, i64 0, i32 4
  %79 = load %class.SkOpAngle*, %class.SkOpAngle** %78, align 8
  %80 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %77, i64 0, i32 12
  %81 = load i8, i8* %80, align 2, !range !2
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %105

83:                                               ; preds = %74
  %84 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %76, i64 0, i32 12
  %85 = load i8, i8* %84, align 2, !range !2
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %87, label %105

87:                                               ; preds = %83
  %88 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %79, i64 0, i32 12
  %89 = load i8, i8* %88, align 2, !range !2
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %91, label %105

91:                                               ; preds = %87
  %92 = tail call %class.SkOpSpan* @_ZN9SkOpAngle7starterEv(%class.SkOpAngle* %76) #11
  %93 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %92, i64 0, i32 5
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %94, -2147483647
  br i1 %95, label %96, label %105

96:                                               ; preds = %91
  %97 = icmp eq %class.SkOpAngle* %75, null
  br i1 %97, label %105, label %98

98:                                               ; preds = %96
  %99 = tail call zeroext i1 @_ZN11SkOpSegment20ComputeOneSumReverseEP9SkOpAngleS1_NS0_11IncludeTypeE(%class.SkOpAngle* nonnull %75, %class.SkOpAngle* %76, i32 %3)
  %100 = tail call %class.SkOpSpan* @_ZN9SkOpAngle7starterEv(%class.SkOpAngle* %76) #11
  %101 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %100, i64 0, i32 5
  %102 = load i32, i32* %101, align 8
  %103 = icmp eq i32 %102, -2147483647
  %104 = select i1 %103, %class.SkOpAngle* null, %class.SkOpAngle* %76
  br label %105

105:                                              ; preds = %87, %83, %74, %91, %96, %98
  %106 = phi %class.SkOpAngle* [ null, %87 ], [ null, %83 ], [ null, %74 ], [ %76, %91 ], [ %104, %98 ], [ null, %96 ]
  %107 = icmp eq %class.SkOpAngle* %77, %71
  br i1 %107, label %108, label %74

108:                                              ; preds = %105, %69
  %109 = load double, double* %7, align 8
  %110 = load double, double* %5, align 8
  %111 = fcmp olt double %109, %110
  %112 = select i1 %111, %class.SkOpSpanBase* %1, %class.SkOpSpanBase* %2
  %113 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %112, i64 1, i32 0, i32 3
  %114 = bitcast %class.SkOpPtT** %113 to i32*
  %115 = load i32, i32* %114, align 8
  br label %116

116:                                              ; preds = %4, %16, %108
  %117 = phi i32 [ %115, %108 ], [ -2147483648, %16 ], [ -2147483648, %4 ]
  ret i32 %117
}

declare %class.SkOpAngle* @_ZNK9SkOpAngle8previousEv(%class.SkOpAngle*) local_unnamed_addr #3

declare %class.SkOpSpan* @_ZN9SkOpAngle7starterEv(%class.SkOpAngle*) local_unnamed_addr #3

declare zeroext i1 @_ZNK7SkOpPtT8containsEPK11SkOpSegmentd(%class.SkOpPtT*, %class.SkOpSegment*, double) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN11SkOpSegment7releaseEPK8SkOpSpan(%class.SkOpSegment* nocapture, %class.SkOpSpan* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %1, i64 0, i32 10
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  %8 = load i32, i32* %7, align 8
  %9 = add nsw i32 %8, -1
  store i32 %9, i32* %7, align 8
  br label %10

10:                                               ; preds = %2, %6
  %11 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 8
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, -1
  store i32 %13, i32* %11, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpSegment* @_ZN11SkOpSegment10findNextOpEP9SkTDArrayIP12SkOpSpanBaseEPS2_S5_PbS6_8SkPathOpii(%class.SkOpSegment*, %class.SkTDArray.14* nocapture, %class.SkOpSpanBase** nocapture, %class.SkOpSpanBase** nocapture, i8* nocapture, i8* nocapture, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %10 = alloca i32, align 4
  %11 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  %12 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %3, align 8
  %13 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #11
  %14 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %11, i64 0, i32 0, i32 0
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %12, i64 0, i32 0, i32 0
  %17 = load double, double* %16, align 8
  %18 = fcmp olt double %15, %17
  %19 = select i1 %18, i32 1, i32 -1
  store i32 %19, i32* %10, align 4
  %20 = call %class.SkOpSegment* @_ZNK11SkOpSegment9nextChaseEPP12SkOpSpanBasePiPP8SkOpSpanS2_(%class.SkOpSegment* undef, %class.SkOpSpanBase** %2, i32* nonnull %10, %class.SkOpSpan** null, %class.SkOpSpanBase** null) #11
  %21 = icmp ne %class.SkOpSegment* %20, null
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %5, align 1
  br i1 %21, label %23, label %46

23:                                               ; preds = %9
  %24 = load double, double* %14, align 8
  %25 = load double, double* %16, align 8
  %26 = fcmp olt double %24, %25
  %27 = select i1 %26, %class.SkOpSpanBase* %11, %class.SkOpSpanBase* %12
  %28 = bitcast %class.SkOpSpanBase* %27 to %class.SkOpSpan*
  %29 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %28, i64 0, i32 10
  %30 = load i8, i8* %29, align 4, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %356

32:                                               ; preds = %23
  store i8 1, i8* %29, align 4
  %33 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  %34 = load i32, i32* %33, align 8
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* %33, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  %36 = load i32, i32* %10, align 4
  %37 = icmp sgt i32 %36, 0
  %38 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  %39 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %38, i64 1, i32 0, i32 2
  %40 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %38, i64 0, i32 4
  %41 = bitcast %class.SkOpSpan** %40 to %class.SkOpSpanBase**
  %42 = select i1 %37, %class.SkOpSpanBase** %39, %class.SkOpSpanBase** %41
  %43 = bitcast %class.SkOpSpanBase** %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast %class.SkOpSpanBase** %3 to i64*
  store i64 %44, i64* %45, align 8
  br label %356

46:                                               ; preds = %9
  %47 = load i32, i32* %10, align 4
  %48 = icmp sgt i32 %47, 0
  %49 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  %50 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %49, i64 1, i32 0, i32 2
  %51 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %49, i64 0, i32 4
  %52 = bitcast %class.SkOpSpan** %51 to %class.SkOpSpanBase**
  %53 = select i1 %48, %class.SkOpSpanBase** %50, %class.SkOpSpanBase** %52
  %54 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %53, align 8
  %55 = tail call i32 @_ZN11SkOpSegment10computeSumEP12SkOpSpanBaseS1_N9SkOpAngle11IncludeTypeE(%class.SkOpSegment* %0, %class.SkOpSpanBase* %11, %class.SkOpSpanBase* %54, i32 3)
  %56 = icmp eq i32 %55, -2147483648
  br i1 %56, label %57, label %70

57:                                               ; preds = %46
  store i8 1, i8* %4, align 1
  %58 = load double, double* %14, align 8
  %59 = load double, double* %16, align 8
  %60 = fcmp olt double %58, %59
  %61 = select i1 %60, %class.SkOpSpanBase* %11, %class.SkOpSpanBase* %12
  %62 = bitcast %class.SkOpSpanBase* %61 to %class.SkOpSpan*
  %63 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %62, i64 0, i32 10
  %64 = load i8, i8* %63, align 4, !range !2
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %66, label %356

66:                                               ; preds = %57
  store i8 1, i8* %63, align 4
  %67 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  %68 = load i32, i32* %67, align 8
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %67, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %356

70:                                               ; preds = %46
  %71 = load double, double* %16, align 8
  %72 = load double, double* %14, align 8
  %73 = fcmp olt double %71, %72
  %74 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %12, i64 1, i32 0, i32 1
  %75 = bitcast %struct.SkPoint* %74 to %class.SkOpAngle**
  %76 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %12, i64 0, i32 3
  %77 = select i1 %73, %class.SkOpAngle** %75, %class.SkOpAngle** %76
  %78 = load %class.SkOpAngle*, %class.SkOpAngle** %77, align 8
  %79 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %78, i64 0, i32 12
  %80 = load i8, i8* %79, align 2, !range !2
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %95, label %82

82:                                               ; preds = %70
  store i8 1, i8* %4, align 1
  %83 = load double, double* %14, align 8
  %84 = load double, double* %16, align 8
  %85 = fcmp olt double %83, %84
  %86 = select i1 %85, %class.SkOpSpanBase* %11, %class.SkOpSpanBase* %12
  %87 = bitcast %class.SkOpSpanBase* %86 to %class.SkOpSpan*
  %88 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %87, i64 0, i32 10
  %89 = load i8, i8* %88, align 4, !range !2
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %91, label %356

91:                                               ; preds = %82
  store i8 1, i8* %88, align 4
  %92 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  %93 = load i32, i32* %92, align 8
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %92, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %356

95:                                               ; preds = %70
  %96 = select i1 %73, %class.SkOpSpanBase* %12, %class.SkOpSpanBase* %11
  %97 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %96, i64 1, i32 0, i32 3
  %98 = bitcast %class.SkOpPtT** %97 to i32*
  %99 = load i32, i32* %98, align 8
  %100 = icmp eq i32 %99, -2147483647
  br i1 %100, label %101, label %108

101:                                              ; preds = %95
  %102 = bitcast %class.SkOpSpanBase* %96 to %class.SkOpSpan*
  %103 = tail call i32 @_ZN8SkOpSpan14computeWindSumEv(%class.SkOpSpan* %102) #11
  %104 = icmp eq i32 %103, -2147483647
  br i1 %104, label %140, label %105

105:                                              ; preds = %101
  %106 = load double, double* %16, align 8
  %107 = load double, double* %14, align 8
  br label %108

108:                                              ; preds = %105, %95
  %109 = phi double [ %107, %105 ], [ %72, %95 ]
  %110 = phi double [ %106, %105 ], [ %71, %95 ]
  %111 = phi i32 [ %103, %105 ], [ %99, %95 ]
  %112 = fcmp olt double %110, %109
  br i1 %112, label %113, label %118

113:                                              ; preds = %108
  %114 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %12, i64 1, i32 0, i32 4
  %115 = bitcast i8* %114 to i32*
  %116 = load i32, i32* %115, align 8
  %117 = sub nsw i32 0, %116
  br label %122

118:                                              ; preds = %108
  %119 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %11, i64 1, i32 0, i32 4
  %120 = bitcast i8* %119 to i32*
  %121 = load i32, i32* %120, align 8
  br label %122

122:                                              ; preds = %118, %113
  %123 = phi i32 [ %117, %113 ], [ %121, %118 ]
  %124 = icmp eq i32 %111, 0
  br i1 %124, label %153, label %125

125:                                              ; preds = %122
  %126 = sub nsw i32 %111, %123
  %127 = icmp slt i32 %126, 0
  %128 = sub nsw i32 0, %126
  %129 = select i1 %127, i32 %128, i32 %126
  %130 = icmp slt i32 %111, 0
  %131 = sub nsw i32 0, %111
  %132 = select i1 %130, i32 %131, i32 %111
  %133 = icmp eq i32 %129, %132
  %134 = icmp slt i32 %129, %132
  %135 = select i1 %133, i1 %127, i1 %134
  %136 = icmp ne i32 %111, 2147483647
  %137 = and i1 %136, %135
  br i1 %137, label %138, label %153

138:                                              ; preds = %125
  %139 = icmp eq i32 %126, -2147483647
  br i1 %139, label %140, label %153

140:                                              ; preds = %101, %138
  store i8 1, i8* %4, align 1
  %141 = load double, double* %14, align 8
  %142 = load double, double* %16, align 8
  %143 = fcmp olt double %141, %142
  %144 = select i1 %143, %class.SkOpSpanBase* %11, %class.SkOpSpanBase* %12
  %145 = bitcast %class.SkOpSpanBase* %144 to %class.SkOpSpan*
  %146 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %145, i64 0, i32 10
  %147 = load i8, i8* %146, align 4, !range !2
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %149, label %356

149:                                              ; preds = %140
  store i8 1, i8* %146, align 4
  %150 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  %151 = load i32, i32* %150, align 8
  %152 = add nsw i32 %151, 1
  store i32 %152, i32* %150, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %356

153:                                              ; preds = %122, %125, %138
  %154 = phi i32 [ %126, %138 ], [ 0, %122 ], [ %111, %125 ]
  %155 = select i1 %112, %class.SkOpSpanBase* %12, %class.SkOpSpanBase* %11
  %156 = bitcast %class.SkOpSpanBase* %155 to %class.SkOpSpan*
  %157 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %156, i64 0, i32 6
  %158 = load i32, i32* %157, align 4
  br i1 %112, label %159, label %164

159:                                              ; preds = %153
  %160 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %12, i64 1, i32 0, i32 7, i64 1
  %161 = bitcast i8* %160 to i32*
  %162 = load i32, i32* %161, align 4
  %163 = sub nsw i32 0, %162
  br label %168

164:                                              ; preds = %153
  %165 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %11, i64 1, i32 0, i32 7, i64 1
  %166 = bitcast i8* %165 to i32*
  %167 = load i32, i32* %166, align 4
  br label %168

168:                                              ; preds = %164, %159
  %169 = phi i32 [ %163, %159 ], [ %167, %164 ]
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %185, label %171

171:                                              ; preds = %168
  %172 = sub nsw i32 %158, %169
  %173 = icmp slt i32 %172, 0
  %174 = sub nsw i32 0, %172
  %175 = select i1 %173, i32 %174, i32 %172
  %176 = icmp slt i32 %158, 0
  %177 = sub nsw i32 0, %158
  %178 = select i1 %176, i32 %177, i32 %158
  %179 = icmp eq i32 %175, %178
  %180 = icmp slt i32 %175, %178
  %181 = select i1 %179, i1 %173, i1 %180
  %182 = icmp ne i32 %158, 2147483647
  %183 = and i1 %182, %181
  %184 = select i1 %183, i32 %172, i32 %158
  br label %185

185:                                              ; preds = %168, %171
  %186 = phi i32 [ %184, %171 ], [ %158, %168 ]
  %187 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %188 = load %class.SkOpContour*, %class.SkOpContour** %187, align 8
  %189 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %188, i64 0, i32 9
  %190 = load i8, i8* %189, align 1, !range !2
  %191 = icmp ne i8 %190, 0
  %192 = select i1 %191, i32 %186, i32 %154
  %193 = select i1 %191, i32 %154, i32 %186
  %194 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %78, i64 0, i32 4
  %195 = load %class.SkOpAngle*, %class.SkOpAngle** %194, align 8
  %196 = zext i32 %6 to i64
  %197 = getelementptr inbounds %class.SkTDArray.14, %class.SkTDArray.14* %1, i64 0, i32 2
  %198 = getelementptr inbounds %class.SkTDArray.14, %class.SkTDArray.14* %1, i64 0, i32 1
  %199 = getelementptr inbounds %class.SkTDArray.14, %class.SkTDArray.14* %1, i64 0, i32 0
  %200 = bitcast %class.SkTDArray.14* %1 to i8**
  br label %201

201:                                              ; preds = %325, %185
  %202 = phi i32 [ %192, %185 ], [ %244, %325 ]
  %203 = phi i32 [ %193, %185 ], [ %245, %325 ]
  %204 = phi %class.SkOpAngle* [ %195, %185 ], [ %327, %325 ]
  %205 = phi %class.SkOpAngle* [ null, %185 ], [ %285, %325 ]
  %206 = phi i8 [ 0, %185 ], [ %286, %325 ]
  %207 = phi i32 [ 0, %185 ], [ %287, %325 ]
  %208 = tail call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* %204) #11
  %209 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %204, i64 0, i32 6
  %210 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %209, align 8
  %211 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %204, i64 0, i32 7
  %212 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %211, align 8
  %213 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %210, i64 0, i32 0, i32 0
  %214 = load double, double* %213, align 8
  %215 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %212, i64 0, i32 0, i32 0
  %216 = load double, double* %215, align 8
  %217 = fcmp olt double %214, %216
  br i1 %217, label %218, label %223

218:                                              ; preds = %201
  %219 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %210, i64 1, i32 0, i32 4
  %220 = bitcast i8* %219 to <2 x i32>*
  %221 = load <2 x i32>, <2 x i32>* %220, align 8
  %222 = sub nsw <2 x i32> zeroinitializer, %221
  br label %227

223:                                              ; preds = %201
  %224 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %212, i64 1, i32 0, i32 4
  %225 = bitcast i8* %224 to <2 x i32>*
  %226 = load <2 x i32>, <2 x i32>* %225, align 8
  br label %227

227:                                              ; preds = %223, %218
  %228 = phi <2 x i32> [ %222, %218 ], [ %226, %223 ]
  %229 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %208, i64 0, i32 2
  %230 = load %class.SkOpContour*, %class.SkOpContour** %229, align 8
  %231 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %230, i64 0, i32 9
  %232 = load i8, i8* %231, align 1, !range !2
  %233 = icmp eq i8 %232, 0
  %234 = extractelement <2 x i32> %228, i32 0
  br i1 %233, label %239, label %235

235:                                              ; preds = %227
  %236 = sub nsw i32 %203, %234
  %237 = extractelement <2 x i32> %228, i32 1
  %238 = sub nsw i32 %202, %237
  br label %243

239:                                              ; preds = %227
  %240 = sub nsw i32 %202, %234
  %241 = extractelement <2 x i32> %228, i32 1
  %242 = sub nsw i32 %203, %241
  br label %243

243:                                              ; preds = %235, %239
  %244 = phi i32 [ %240, %239 ], [ %238, %235 ]
  %245 = phi i32 [ %242, %239 ], [ %236, %235 ]
  %246 = phi i32 [ %202, %239 ], [ %203, %235 ]
  %247 = phi i32 [ %240, %239 ], [ %236, %235 ]
  %248 = phi i32 [ %203, %239 ], [ %202, %235 ]
  %249 = phi i32 [ %242, %239 ], [ %238, %235 ]
  %250 = icmp ne i8 %232, 0
  %251 = select i1 %250, i32 %248, i32 %246
  %252 = select i1 %250, i32 %247, i32 %249
  %253 = select i1 %250, i32 %246, i32 %248
  %254 = select i1 %250, i32 %249, i32 %247
  %255 = and i32 %251, %7
  %256 = and i32 %252, %8
  %257 = and i32 %253, %8
  %258 = and i32 %254, %7
  %259 = icmp ne i32 %255, 0
  %260 = icmp ne i32 %256, 0
  %261 = icmp ne i32 %257, 0
  %262 = icmp ne i32 %258, 0
  %263 = zext i1 %259 to i64
  %264 = zext i1 %262 to i64
  %265 = zext i1 %261 to i64
  %266 = zext i1 %260 to i64
  %267 = getelementptr inbounds [4 x [2 x [2 x [2 x [2 x i8]]]]], [4 x [2 x [2 x [2 x [2 x i8]]]]]* @_ZL11gActiveEdge, i64 0, i64 %196, i64 %263, i64 %264, i64 %265, i64 %266
  %268 = load i8, i8* %267, align 1, !range !2
  %269 = icmp ne i8 %268, 0
  br i1 %269, label %270, label %284

270:                                              ; preds = %243
  %271 = add nsw i32 %207, 1
  %272 = icmp eq %class.SkOpAngle* %205, null
  br i1 %272, label %279, label %273

273:                                              ; preds = %270
  %274 = and i8 %206, 1
  %275 = icmp eq i8 %274, 0
  %276 = and i32 %271, 1
  %277 = icmp eq i32 %276, 0
  %278 = or i1 %275, %277
  br i1 %278, label %284, label %279

279:                                              ; preds = %273, %270
  %280 = select i1 %217, %class.SkOpSpanBase* %210, %class.SkOpSpanBase* %212
  %281 = bitcast %class.SkOpSpanBase* %280 to %class.SkOpSpan*
  %282 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %281, i64 0, i32 10
  %283 = load i8, i8* %282, align 4, !range !2
  br label %284

284:                                              ; preds = %273, %279, %243
  %285 = phi %class.SkOpAngle* [ %204, %279 ], [ %205, %273 ], [ %205, %243 ]
  %286 = phi i8 [ %283, %279 ], [ %206, %273 ], [ %206, %243 ]
  %287 = phi i32 [ %271, %279 ], [ %271, %273 ], [ %207, %243 ]
  %288 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %208, i64 0, i32 9
  %289 = load i32, i32* %288, align 8
  %290 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %208, i64 0, i32 8
  %291 = load i32, i32* %290, align 4
  %292 = icmp eq i32 %289, %291
  br i1 %292, label %325, label %293

293:                                              ; preds = %284
  br i1 %269, label %296, label %294

294:                                              ; preds = %293
  %295 = tail call zeroext i1 @_ZN11SkOpSegment16markAndChaseDoneEP12SkOpSpanBaseS1_PS1_(%class.SkOpSegment* %208, %class.SkOpSpanBase* %210, %class.SkOpSpanBase* %212, %class.SkOpSpanBase** null)
  br label %296

296:                                              ; preds = %294, %293
  %297 = tail call %class.SkOpSpanBase* @_ZNK9SkOpAngle10lastMarkedEv(%class.SkOpAngle* %204) #11
  %298 = icmp eq %class.SkOpSpanBase* %297, null
  br i1 %298, label %325, label %299

299:                                              ; preds = %296
  %300 = load i32, i32* %197, align 4
  %301 = add i32 %300, 1
  %302 = icmp sgt i32 %301, -1
  br i1 %302, label %304, label %303

303:                                              ; preds = %299
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

304:                                              ; preds = %299
  %305 = load i32, i32* %198, align 8
  %306 = icmp slt i32 %305, %301
  br i1 %306, label %309, label %307

307:                                              ; preds = %304
  %308 = load %class.SkOpSpanBase**, %class.SkOpSpanBase*** %199, align 8
  br label %321

309:                                              ; preds = %304
  %310 = add i32 %300, 5
  %311 = lshr i32 %310, 2
  %312 = add nuw i32 %311, %310
  %313 = icmp sgt i32 %312, -1
  br i1 %313, label %315, label %314

314:                                              ; preds = %309
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #12
  unreachable

315:                                              ; preds = %309
  store i32 %312, i32* %198, align 8
  %316 = load i8*, i8** %200, align 8
  %317 = sext i32 %312 to i64
  %318 = shl nsw i64 %317, 3
  %319 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %316, i64 %318) #11
  store i8* %319, i8** %200, align 8
  %320 = bitcast i8* %319 to %class.SkOpSpanBase**
  br label %321

321:                                              ; preds = %307, %315
  %322 = phi %class.SkOpSpanBase** [ %308, %307 ], [ %320, %315 ]
  store i32 %301, i32* %197, align 4
  %323 = sext i32 %300 to i64
  %324 = getelementptr inbounds %class.SkOpSpanBase*, %class.SkOpSpanBase** %322, i64 %323
  store %class.SkOpSpanBase* %297, %class.SkOpSpanBase** %324, align 8
  br label %325

325:                                              ; preds = %321, %296, %284
  %326 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %204, i64 0, i32 4
  %327 = load %class.SkOpAngle*, %class.SkOpAngle** %326, align 8
  %328 = icmp eq %class.SkOpAngle* %327, %78
  br i1 %328, label %329, label %201

329:                                              ; preds = %325
  %330 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %11, i64 0, i32 1
  %331 = load %class.SkOpSegment*, %class.SkOpSegment** %330, align 8
  %332 = load double, double* %14, align 8
  %333 = load double, double* %16, align 8
  %334 = fcmp olt double %332, %333
  %335 = select i1 %334, %class.SkOpSpanBase* %11, %class.SkOpSpanBase* %12
  %336 = bitcast %class.SkOpSpanBase* %335 to %class.SkOpSpan*
  %337 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %336, i64 0, i32 10
  %338 = load i8, i8* %337, align 4, !range !2
  %339 = icmp eq i8 %338, 0
  br i1 %339, label %340, label %344

340:                                              ; preds = %329
  store i8 1, i8* %337, align 4
  %341 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %331, i64 0, i32 9
  %342 = load i32, i32* %341, align 8
  %343 = add nsw i32 %342, 1
  store i32 %343, i32* %341, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %331) #11
  br label %344

344:                                              ; preds = %329, %340
  %345 = icmp eq %class.SkOpAngle* %285, null
  br i1 %345, label %356, label %346

346:                                              ; preds = %344
  %347 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %285, i64 0, i32 6
  %348 = bitcast %class.SkOpSpanBase** %347 to i64*
  %349 = load i64, i64* %348, align 8
  %350 = bitcast %class.SkOpSpanBase** %2 to i64*
  store i64 %349, i64* %350, align 8
  %351 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %285, i64 0, i32 7
  %352 = bitcast %class.SkOpSpanBase** %351 to i64*
  %353 = load i64, i64* %352, align 8
  %354 = bitcast %class.SkOpSpanBase** %3 to i64*
  store i64 %353, i64* %354, align 8
  %355 = tail call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* nonnull %285) #11
  br label %356

356:                                              ; preds = %23, %140, %149, %344, %346, %91, %82, %66, %57, %32
  %357 = phi %class.SkOpSegment* [ %20, %32 ], [ null, %23 ], [ null, %57 ], [ null, %66 ], [ null, %82 ], [ null, %91 ], [ null, %140 ], [ null, %149 ], [ %355, %346 ], [ null, %344 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #11
  ret %class.SkOpSegment* %357
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment16markAndChaseDoneEP12SkOpSpanBaseS1_PS1_(%class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase**) local_unnamed_addr #0 align 2 {
  %5 = alloca %class.SkOpSpanBase*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %class.SkOpSpan*, align 8
  %8 = alloca %class.SkOpSpanBase*, align 8
  store %class.SkOpSpanBase* %1, %class.SkOpSpanBase** %5, align 8
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #11
  %10 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 0
  %13 = load double, double* %12, align 8
  %14 = fcmp olt double %11, %13
  %15 = select i1 %14, i32 1, i32 -1
  store i32 %15, i32* %6, align 4
  %16 = bitcast %class.SkOpSpan** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #11
  %17 = select i1 %14, %class.SkOpSpanBase* %1, %class.SkOpSpanBase* %2
  %18 = bitcast %class.SkOpSpanBase* %17 to %class.SkOpSpan*
  %19 = bitcast %class.SkOpSpan** %7 to %class.SkOpSpanBase**
  store %class.SkOpSpanBase* %17, %class.SkOpSpanBase** %19, align 8
  %20 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %18, i64 0, i32 10
  %21 = load i8, i8* %20, align 4, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %4
  store i8 1, i8* %20, align 4
  %24 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  %25 = load i32, i32* %24, align 8
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %24, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %27

27:                                               ; preds = %4, %23
  %28 = bitcast %class.SkOpSpanBase** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #11
  store %class.SkOpSpanBase* null, %class.SkOpSpanBase** %8, align 8
  %29 = call %class.SkOpSegment* @_ZNK11SkOpSegment9nextChaseEPP12SkOpSpanBasePiPP8SkOpSpanS2_(%class.SkOpSegment* undef, %class.SkOpSpanBase** nonnull %5, i32* nonnull %6, %class.SkOpSpan** nonnull %7, %class.SkOpSpanBase** nonnull %8)
  %30 = icmp eq %class.SkOpSegment* %29, null
  br i1 %30, label %64, label %31

31:                                               ; preds = %27, %60
  %32 = phi %class.SkOpSegment* [ %62, %60 ], [ %29, %27 ]
  %33 = phi i32 [ %36, %60 ], [ 100000, %27 ]
  %34 = phi %class.SkOpSpan* [ %61, %60 ], [ null, %27 ]
  %35 = phi %class.SkOpSpan* [ %34, %60 ], [ null, %27 ]
  %36 = add nsw i32 %33, -1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %70, label %38

38:                                               ; preds = %31
  %39 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %32, i64 0, i32 9
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %32, i64 0, i32 8
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %40, %42
  br i1 %43, label %64, label %44

44:                                               ; preds = %38
  %45 = load %class.SkOpSpan*, %class.SkOpSpan** %7, align 8
  %46 = icmp eq %class.SkOpSpan* %34, %45
  %47 = icmp eq %class.SkOpSpan* %35, %45
  %48 = or i1 %46, %47
  br i1 %48, label %49, label %52

49:                                               ; preds = %44
  %50 = icmp eq %class.SkOpSpanBase** %3, null
  br i1 %50, label %70, label %51

51:                                               ; preds = %49
  store %class.SkOpSpanBase* null, %class.SkOpSpanBase** %3, align 8
  br label %70

52:                                               ; preds = %44
  %53 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %45, i64 0, i32 10
  %54 = load i8, i8* %53, align 4, !range !2
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %60

56:                                               ; preds = %52
  store i8 1, i8* %53, align 4
  %57 = load i32, i32* %39, align 8
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* %39, align 8
  call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* nonnull %32) #11
  %59 = load %class.SkOpSpan*, %class.SkOpSpan** %7, align 8
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi %class.SkOpSpan* [ %45, %52 ], [ %59, %56 ]
  %62 = call %class.SkOpSegment* @_ZNK11SkOpSegment9nextChaseEPP12SkOpSpanBasePiPP8SkOpSpanS2_(%class.SkOpSegment* undef, %class.SkOpSpanBase** nonnull %5, i32* nonnull %6, %class.SkOpSpan** nonnull %7, %class.SkOpSpanBase** nonnull %8)
  %63 = icmp eq %class.SkOpSegment* %62, null
  br i1 %63, label %64, label %31

64:                                               ; preds = %38, %60, %27
  %65 = icmp eq %class.SkOpSpanBase** %3, null
  br i1 %65, label %70, label %66

66:                                               ; preds = %64
  %67 = bitcast %class.SkOpSpanBase** %8 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %class.SkOpSpanBase** %3 to i64*
  store i64 %68, i64* %69, align 8
  br label %70

70:                                               ; preds = %31, %66, %64, %51, %49
  %71 = phi i1 [ true, %49 ], [ true, %51 ], [ true, %64 ], [ true, %66 ], [ false, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #11
  ret i1 %71
}

declare %class.SkOpSpanBase* @_ZNK9SkOpAngle10lastMarkedEv(%class.SkOpAngle*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpSegment* @_ZN11SkOpSegment15findNextWindingEP9SkTDArrayIP12SkOpSpanBaseEPS2_S5_Pb(%class.SkOpSegment*, %class.SkTDArray.14* nocapture, %class.SkOpSpanBase** nocapture, %class.SkOpSpanBase** nocapture, i8* nocapture) local_unnamed_addr #0 align 2 {
  %6 = alloca i32, align 4
  %7 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  %8 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %3, align 8
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #11
  %10 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %7, i64 0, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %8, i64 0, i32 0, i32 0
  %13 = load double, double* %12, align 8
  %14 = fcmp olt double %11, %13
  %15 = select i1 %14, i32 1, i32 -1
  store i32 %15, i32* %6, align 4
  %16 = call %class.SkOpSegment* @_ZNK11SkOpSegment9nextChaseEPP12SkOpSpanBasePiPP8SkOpSpanS2_(%class.SkOpSegment* undef, %class.SkOpSpanBase** %2, i32* nonnull %6, %class.SkOpSpan** null, %class.SkOpSpanBase** null) #11
  %17 = icmp eq %class.SkOpSegment* %16, null
  br i1 %17, label %41, label %18

18:                                               ; preds = %5
  %19 = load double, double* %10, align 8
  %20 = load double, double* %12, align 8
  %21 = fcmp olt double %19, %20
  %22 = select i1 %21, %class.SkOpSpanBase* %7, %class.SkOpSpanBase* %8
  %23 = bitcast %class.SkOpSpanBase* %22 to %class.SkOpSpan*
  %24 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %23, i64 0, i32 10
  %25 = load i8, i8* %24, align 4, !range !2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %268

27:                                               ; preds = %18
  store i8 1, i8* %24, align 4
  %28 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  %29 = load i32, i32* %28, align 8
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %28, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  %31 = load i32, i32* %6, align 4
  %32 = icmp sgt i32 %31, 0
  %33 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  %34 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %33, i64 1, i32 0, i32 2
  %35 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %33, i64 0, i32 4
  %36 = bitcast %class.SkOpSpan** %35 to %class.SkOpSpanBase**
  %37 = select i1 %32, %class.SkOpSpanBase** %34, %class.SkOpSpanBase** %36
  %38 = bitcast %class.SkOpSpanBase** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %class.SkOpSpanBase** %3 to i64*
  store i64 %39, i64* %40, align 8
  br label %268

41:                                               ; preds = %5
  %42 = load i32, i32* %6, align 4
  %43 = icmp sgt i32 %42, 0
  %44 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  %45 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %44, i64 1, i32 0, i32 2
  %46 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %44, i64 0, i32 4
  %47 = bitcast %class.SkOpSpan** %46 to %class.SkOpSpanBase**
  %48 = select i1 %43, %class.SkOpSpanBase** %45, %class.SkOpSpanBase** %47
  %49 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %48, align 8
  %50 = tail call i32 @_ZN11SkOpSegment10computeSumEP12SkOpSpanBaseS1_N9SkOpAngle11IncludeTypeE(%class.SkOpSegment* %0, %class.SkOpSpanBase* %7, %class.SkOpSpanBase* %49, i32 0)
  %51 = icmp eq i32 %50, -2147483648
  br i1 %51, label %52, label %65

52:                                               ; preds = %41
  store i8 1, i8* %4, align 1
  %53 = load double, double* %10, align 8
  %54 = load double, double* %12, align 8
  %55 = fcmp olt double %53, %54
  %56 = select i1 %55, %class.SkOpSpanBase* %7, %class.SkOpSpanBase* %8
  %57 = bitcast %class.SkOpSpanBase* %56 to %class.SkOpSpan*
  %58 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %57, i64 0, i32 10
  %59 = load i8, i8* %58, align 4, !range !2
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %61, label %268

61:                                               ; preds = %52
  store i8 1, i8* %58, align 4
  %62 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  %63 = load i32, i32* %62, align 8
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %62, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %268

65:                                               ; preds = %41
  %66 = load double, double* %12, align 8
  %67 = load double, double* %10, align 8
  %68 = fcmp olt double %66, %67
  %69 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %8, i64 1, i32 0, i32 1
  %70 = bitcast %struct.SkPoint* %69 to %class.SkOpAngle**
  %71 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %8, i64 0, i32 3
  %72 = select i1 %68, %class.SkOpAngle** %70, %class.SkOpAngle** %71
  %73 = load %class.SkOpAngle*, %class.SkOpAngle** %72, align 8
  %74 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %73, i64 0, i32 12
  %75 = load i8, i8* %74, align 2, !range !2
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %90, label %77

77:                                               ; preds = %65
  store i8 1, i8* %4, align 1
  %78 = load double, double* %10, align 8
  %79 = load double, double* %12, align 8
  %80 = fcmp olt double %78, %79
  %81 = select i1 %80, %class.SkOpSpanBase* %7, %class.SkOpSpanBase* %8
  %82 = bitcast %class.SkOpSpanBase* %81 to %class.SkOpSpan*
  %83 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %82, i64 0, i32 10
  %84 = load i8, i8* %83, align 4, !range !2
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %86, label %268

86:                                               ; preds = %77
  store i8 1, i8* %83, align 4
  %87 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  %88 = load i32, i32* %87, align 8
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %87, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %268

90:                                               ; preds = %65
  %91 = select i1 %68, %class.SkOpSpanBase* %8, %class.SkOpSpanBase* %7
  %92 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %91, i64 1, i32 0, i32 3
  %93 = bitcast %class.SkOpPtT** %92 to i32*
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %94, -2147483647
  br i1 %95, label %96, label %103

96:                                               ; preds = %90
  %97 = bitcast %class.SkOpSpanBase* %91 to %class.SkOpSpan*
  %98 = tail call i32 @_ZN8SkOpSpan14computeWindSumEv(%class.SkOpSpan* %97) #11
  %99 = icmp eq i32 %98, -2147483647
  br i1 %99, label %134, label %100

100:                                              ; preds = %96
  %101 = load double, double* %12, align 8
  %102 = load double, double* %10, align 8
  br label %103

103:                                              ; preds = %100, %90
  %104 = phi double [ %102, %100 ], [ %67, %90 ]
  %105 = phi double [ %101, %100 ], [ %66, %90 ]
  %106 = phi i32 [ %98, %100 ], [ %94, %90 ]
  %107 = fcmp olt double %105, %104
  br i1 %107, label %108, label %113

108:                                              ; preds = %103
  %109 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %8, i64 1, i32 0, i32 4
  %110 = bitcast i8* %109 to i32*
  %111 = load i32, i32* %110, align 8
  %112 = sub nsw i32 0, %111
  br label %117

113:                                              ; preds = %103
  %114 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %7, i64 1, i32 0, i32 4
  %115 = bitcast i8* %114 to i32*
  %116 = load i32, i32* %115, align 8
  br label %117

117:                                              ; preds = %113, %108
  %118 = phi i32 [ %112, %108 ], [ %116, %113 ]
  %119 = icmp eq i32 %106, 0
  br i1 %119, label %134, label %120

120:                                              ; preds = %117
  %121 = sub nsw i32 %106, %118
  %122 = icmp slt i32 %121, 0
  %123 = sub nsw i32 0, %121
  %124 = select i1 %122, i32 %123, i32 %121
  %125 = icmp slt i32 %106, 0
  %126 = sub nsw i32 0, %106
  %127 = select i1 %125, i32 %126, i32 %106
  %128 = icmp eq i32 %124, %127
  %129 = icmp slt i32 %124, %127
  %130 = select i1 %128, i1 %122, i1 %129
  %131 = icmp ne i32 %106, 2147483647
  %132 = and i1 %131, %130
  %133 = select i1 %132, i32 %121, i32 %106
  br label %134

134:                                              ; preds = %96, %117, %120
  %135 = phi i32 [ %133, %120 ], [ -2147483647, %96 ], [ 0, %117 ]
  %136 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %73, i64 0, i32 4
  %137 = load %class.SkOpAngle*, %class.SkOpAngle** %136, align 8
  %138 = getelementptr inbounds %class.SkTDArray.14, %class.SkTDArray.14* %1, i64 0, i32 2
  %139 = getelementptr inbounds %class.SkTDArray.14, %class.SkTDArray.14* %1, i64 0, i32 1
  %140 = getelementptr inbounds %class.SkTDArray.14, %class.SkTDArray.14* %1, i64 0, i32 0
  %141 = bitcast %class.SkTDArray.14* %1 to i8**
  br label %142

142:                                              ; preds = %237, %134
  %143 = phi i32 [ %135, %134 ], [ %175, %237 ]
  %144 = phi %class.SkOpAngle* [ %137, %134 ], [ %239, %237 ]
  %145 = phi %class.SkOpAngle* [ null, %134 ], [ %197, %237 ]
  %146 = phi i8 [ 0, %134 ], [ %198, %237 ]
  %147 = phi i32 [ 0, %134 ], [ %199, %237 ]
  %148 = tail call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* %144) #11
  %149 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %144, i64 0, i32 6
  %150 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %149, align 8
  %151 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %144, i64 0, i32 7
  %152 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %151, align 8
  %153 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %150, i64 0, i32 0, i32 0
  %154 = load double, double* %153, align 8
  %155 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %152, i64 0, i32 0, i32 0
  %156 = load double, double* %155, align 8
  %157 = fcmp olt double %154, %156
  br i1 %157, label %158, label %163

158:                                              ; preds = %142
  %159 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %150, i64 1, i32 0, i32 4
  %160 = bitcast i8* %159 to i32*
  %161 = load i32, i32* %160, align 8
  %162 = sub nsw i32 0, %161
  br label %167

163:                                              ; preds = %142
  %164 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %152, i64 1, i32 0, i32 4
  %165 = bitcast i8* %164 to i32*
  %166 = load i32, i32* %165, align 8
  br label %167

167:                                              ; preds = %163, %158
  %168 = phi i32 [ %162, %158 ], [ %166, %163 ]
  %169 = icmp eq i32 %143, -2147483647
  br i1 %169, label %174, label %170

170:                                              ; preds = %167
  %171 = sub nsw i32 %143, %168
  %172 = icmp ne i32 %171, 0
  %173 = zext i1 %172 to i64
  br label %174

174:                                              ; preds = %167, %170
  %175 = phi i32 [ -2147483647, %167 ], [ %171, %170 ]
  %176 = phi i64 [ 1, %167 ], [ %173, %170 ]
  %177 = icmp ne i32 %143, 0
  %178 = zext i1 %177 to i64
  %179 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @_ZL16gUnaryActiveEdge, i64 0, i64 %178, i64 %176
  %180 = load i8, i8* %179, align 1, !range !2
  %181 = icmp ne i8 %180, 0
  br i1 %181, label %182, label %196

182:                                              ; preds = %174
  %183 = add nsw i32 %147, 1
  %184 = icmp eq %class.SkOpAngle* %145, null
  br i1 %184, label %191, label %185

185:                                              ; preds = %182
  %186 = and i8 %146, 1
  %187 = icmp eq i8 %186, 0
  %188 = and i32 %183, 1
  %189 = icmp eq i32 %188, 0
  %190 = or i1 %187, %189
  br i1 %190, label %196, label %191

191:                                              ; preds = %185, %182
  %192 = select i1 %157, %class.SkOpSpanBase* %150, %class.SkOpSpanBase* %152
  %193 = bitcast %class.SkOpSpanBase* %192 to %class.SkOpSpan*
  %194 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %193, i64 0, i32 10
  %195 = load i8, i8* %194, align 4, !range !2
  br label %196

196:                                              ; preds = %185, %191, %174
  %197 = phi %class.SkOpAngle* [ %144, %191 ], [ %145, %185 ], [ %145, %174 ]
  %198 = phi i8 [ %195, %191 ], [ %146, %185 ], [ %146, %174 ]
  %199 = phi i32 [ %183, %191 ], [ %183, %185 ], [ %147, %174 ]
  %200 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %148, i64 0, i32 9
  %201 = load i32, i32* %200, align 8
  %202 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %148, i64 0, i32 8
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %201, %203
  br i1 %204, label %237, label %205

205:                                              ; preds = %196
  br i1 %181, label %208, label %206

206:                                              ; preds = %205
  %207 = tail call zeroext i1 @_ZN11SkOpSegment16markAndChaseDoneEP12SkOpSpanBaseS1_PS1_(%class.SkOpSegment* %148, %class.SkOpSpanBase* %150, %class.SkOpSpanBase* %152, %class.SkOpSpanBase** null)
  br label %208

208:                                              ; preds = %206, %205
  %209 = tail call %class.SkOpSpanBase* @_ZNK9SkOpAngle10lastMarkedEv(%class.SkOpAngle* %144) #11
  %210 = icmp eq %class.SkOpSpanBase* %209, null
  br i1 %210, label %237, label %211

211:                                              ; preds = %208
  %212 = load i32, i32* %138, align 4
  %213 = add i32 %212, 1
  %214 = icmp sgt i32 %213, -1
  br i1 %214, label %216, label %215

215:                                              ; preds = %211
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #12
  unreachable

216:                                              ; preds = %211
  %217 = load i32, i32* %139, align 8
  %218 = icmp slt i32 %217, %213
  br i1 %218, label %221, label %219

219:                                              ; preds = %216
  %220 = load %class.SkOpSpanBase**, %class.SkOpSpanBase*** %140, align 8
  br label %233

221:                                              ; preds = %216
  %222 = add i32 %212, 5
  %223 = lshr i32 %222, 2
  %224 = add nuw i32 %223, %222
  %225 = icmp sgt i32 %224, -1
  br i1 %225, label %227, label %226

226:                                              ; preds = %221
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #12
  unreachable

227:                                              ; preds = %221
  store i32 %224, i32* %139, align 8
  %228 = load i8*, i8** %141, align 8
  %229 = sext i32 %224 to i64
  %230 = shl nsw i64 %229, 3
  %231 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %228, i64 %230) #11
  store i8* %231, i8** %141, align 8
  %232 = bitcast i8* %231 to %class.SkOpSpanBase**
  br label %233

233:                                              ; preds = %219, %227
  %234 = phi %class.SkOpSpanBase** [ %220, %219 ], [ %232, %227 ]
  store i32 %213, i32* %138, align 4
  %235 = sext i32 %212 to i64
  %236 = getelementptr inbounds %class.SkOpSpanBase*, %class.SkOpSpanBase** %234, i64 %235
  store %class.SkOpSpanBase* %209, %class.SkOpSpanBase** %236, align 8
  br label %237

237:                                              ; preds = %233, %208, %196
  %238 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %144, i64 0, i32 4
  %239 = load %class.SkOpAngle*, %class.SkOpAngle** %238, align 8
  %240 = icmp eq %class.SkOpAngle* %239, %73
  br i1 %240, label %241, label %142

241:                                              ; preds = %237
  %242 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %7, i64 0, i32 1
  %243 = load %class.SkOpSegment*, %class.SkOpSegment** %242, align 8
  %244 = load double, double* %10, align 8
  %245 = load double, double* %12, align 8
  %246 = fcmp olt double %244, %245
  %247 = select i1 %246, %class.SkOpSpanBase* %7, %class.SkOpSpanBase* %8
  %248 = bitcast %class.SkOpSpanBase* %247 to %class.SkOpSpan*
  %249 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %248, i64 0, i32 10
  %250 = load i8, i8* %249, align 4, !range !2
  %251 = icmp eq i8 %250, 0
  br i1 %251, label %252, label %256

252:                                              ; preds = %241
  store i8 1, i8* %249, align 4
  %253 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %243, i64 0, i32 9
  %254 = load i32, i32* %253, align 8
  %255 = add nsw i32 %254, 1
  store i32 %255, i32* %253, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %243) #11
  br label %256

256:                                              ; preds = %241, %252
  %257 = icmp eq %class.SkOpAngle* %197, null
  br i1 %257, label %268, label %258

258:                                              ; preds = %256
  %259 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %197, i64 0, i32 6
  %260 = bitcast %class.SkOpSpanBase** %259 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = bitcast %class.SkOpSpanBase** %2 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %197, i64 0, i32 7
  %264 = bitcast %class.SkOpSpanBase** %263 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = bitcast %class.SkOpSpanBase** %3 to i64*
  store i64 %265, i64* %266, align 8
  %267 = tail call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* nonnull %197) #11
  br label %268

268:                                              ; preds = %18, %258, %256, %86, %77, %61, %52, %27
  %269 = phi %class.SkOpSegment* [ %16, %27 ], [ null, %18 ], [ null, %52 ], [ null, %61 ], [ null, %77 ], [ null, %86 ], [ %267, %258 ], [ null, %256 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #11
  ret %class.SkOpSegment* %269
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpSegment* @_ZN11SkOpSegment11findNextXorEPP12SkOpSpanBaseS2_Pb(%class.SkOpSegment*, %class.SkOpSpanBase** nocapture, %class.SkOpSpanBase** nocapture, i8* nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca i32, align 4
  %6 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %1, align 8
  %7 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  %8 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #11
  %9 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 0, i32 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %7, i64 0, i32 0, i32 0
  %12 = load double, double* %11, align 8
  %13 = fcmp olt double %10, %12
  %14 = select i1 %13, i32 1, i32 -1
  store i32 %14, i32* %5, align 4
  %15 = call %class.SkOpSegment* @_ZNK11SkOpSegment9nextChaseEPP12SkOpSpanBasePiPP8SkOpSpanS2_(%class.SkOpSegment* undef, %class.SkOpSpanBase** %1, i32* nonnull %5, %class.SkOpSpan** null, %class.SkOpSpanBase** null) #11
  %16 = icmp eq %class.SkOpSegment* %15, null
  br i1 %16, label %40, label %17

17:                                               ; preds = %4
  %18 = load double, double* %9, align 8
  %19 = load double, double* %11, align 8
  %20 = fcmp olt double %18, %19
  %21 = select i1 %20, %class.SkOpSpanBase* %6, %class.SkOpSpanBase* %7
  %22 = bitcast %class.SkOpSpanBase* %21 to %class.SkOpSpan*
  %23 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %22, i64 0, i32 10
  %24 = load i8, i8* %23, align 4, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %133

26:                                               ; preds = %17
  store i8 1, i8* %23, align 4
  %27 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  %28 = load i32, i32* %27, align 8
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %27, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  %30 = load i32, i32* %5, align 4
  %31 = icmp sgt i32 %30, 0
  %32 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %1, align 8
  %33 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %32, i64 1, i32 0, i32 2
  %34 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %32, i64 0, i32 4
  %35 = bitcast %class.SkOpSpan** %34 to %class.SkOpSpanBase**
  %36 = select i1 %31, %class.SkOpSpanBase** %33, %class.SkOpSpanBase** %35
  %37 = bitcast %class.SkOpSpanBase** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %class.SkOpSpanBase** %2 to i64*
  store i64 %38, i64* %39, align 8
  br label %133

40:                                               ; preds = %4
  %41 = load double, double* %11, align 8
  %42 = load double, double* %9, align 8
  %43 = fcmp olt double %41, %42
  %44 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %7, i64 1, i32 0, i32 1
  %45 = bitcast %struct.SkPoint* %44 to %class.SkOpAngle**
  %46 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %7, i64 0, i32 3
  %47 = select i1 %43, %class.SkOpAngle** %45, %class.SkOpAngle** %46
  %48 = load %class.SkOpAngle*, %class.SkOpAngle** %47, align 8
  %49 = icmp eq %class.SkOpAngle* %48, null
  br i1 %49, label %54, label %50

50:                                               ; preds = %40
  %51 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %48, i64 0, i32 12
  %52 = load i8, i8* %51, align 2, !range !2
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %67, label %54

54:                                               ; preds = %50, %40
  store i8 1, i8* %3, align 1
  %55 = load double, double* %9, align 8
  %56 = load double, double* %11, align 8
  %57 = fcmp olt double %55, %56
  %58 = select i1 %57, %class.SkOpSpanBase* %6, %class.SkOpSpanBase* %7
  %59 = bitcast %class.SkOpSpanBase* %58 to %class.SkOpSpan*
  %60 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %59, i64 0, i32 10
  %61 = load i8, i8* %60, align 4, !range !2
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %63, label %133

63:                                               ; preds = %54
  store i8 1, i8* %60, align 4
  %64 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  %65 = load i32, i32* %64, align 8
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %64, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %133

67:                                               ; preds = %50
  %68 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %48, i64 0, i32 4
  %69 = load %class.SkOpAngle*, %class.SkOpAngle** %68, align 8
  br label %70

70:                                               ; preds = %101, %67
  %71 = phi %class.SkOpAngle* [ %69, %67 ], [ %105, %101 ]
  %72 = phi %class.SkOpAngle* [ null, %67 ], [ %102, %101 ]
  %73 = phi i8 [ 0, %67 ], [ %103, %101 ]
  %74 = phi i32 [ 0, %67 ], [ %78, %101 ]
  %75 = icmp eq %class.SkOpAngle* %71, null
  br i1 %75, label %133, label %76

76:                                               ; preds = %70
  %77 = tail call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* nonnull %71) #11
  %78 = add nuw nsw i32 %74, 1
  %79 = icmp eq %class.SkOpAngle* %72, null
  br i1 %79, label %86, label %80

80:                                               ; preds = %76
  %81 = and i8 %73, 1
  %82 = icmp eq i8 %81, 0
  %83 = and i32 %78, 1
  %84 = icmp eq i32 %83, 0
  %85 = or i1 %82, %84
  br i1 %85, label %101, label %86

86:                                               ; preds = %80, %76
  %87 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %71, i64 0, i32 6
  %88 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %87, align 8
  %89 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %71, i64 0, i32 7
  %90 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %89, align 8
  %91 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %88, i64 0, i32 0, i32 0
  %92 = load double, double* %91, align 8
  %93 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %90, i64 0, i32 0, i32 0
  %94 = load double, double* %93, align 8
  %95 = fcmp olt double %92, %94
  %96 = select i1 %95, %class.SkOpSpanBase* %88, %class.SkOpSpanBase* %90
  %97 = bitcast %class.SkOpSpanBase* %96 to %class.SkOpSpan*
  %98 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %97, i64 0, i32 10
  %99 = load i8, i8* %98, align 4, !range !2
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %107, label %101

101:                                              ; preds = %86, %80
  %102 = phi %class.SkOpAngle* [ %71, %86 ], [ %72, %80 ]
  %103 = phi i8 [ 1, %86 ], [ %73, %80 ]
  %104 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %71, i64 0, i32 4
  %105 = load %class.SkOpAngle*, %class.SkOpAngle** %104, align 8
  %106 = icmp eq %class.SkOpAngle* %105, %48
  br i1 %106, label %107, label %70

107:                                              ; preds = %86, %101
  %108 = phi %class.SkOpAngle* [ %102, %101 ], [ %71, %86 ]
  %109 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 0, i32 1
  %110 = load %class.SkOpSegment*, %class.SkOpSegment** %109, align 8
  %111 = load double, double* %9, align 8
  %112 = load double, double* %11, align 8
  %113 = fcmp olt double %111, %112
  %114 = select i1 %113, %class.SkOpSpanBase* %6, %class.SkOpSpanBase* %7
  %115 = bitcast %class.SkOpSpanBase* %114 to %class.SkOpSpan*
  %116 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %115, i64 0, i32 10
  %117 = load i8, i8* %116, align 4, !range !2
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %119, label %123

119:                                              ; preds = %107
  store i8 1, i8* %116, align 4
  %120 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %110, i64 0, i32 9
  %121 = load i32, i32* %120, align 8
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %120, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %110) #11
  br label %123

123:                                              ; preds = %119, %107
  %124 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %108, i64 0, i32 6
  %125 = bitcast %class.SkOpSpanBase** %124 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = bitcast %class.SkOpSpanBase** %1 to i64*
  store i64 %126, i64* %127, align 8
  %128 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %108, i64 0, i32 7
  %129 = bitcast %class.SkOpSpanBase** %128 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = bitcast %class.SkOpSpanBase** %2 to i64*
  store i64 %130, i64* %131, align 8
  %132 = tail call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* nonnull %108) #11
  br label %133

133:                                              ; preds = %70, %17, %63, %54, %123, %26
  %134 = phi %class.SkOpSegment* [ %15, %26 ], [ null, %17 ], [ %132, %123 ], [ null, %54 ], [ null, %63 ], [ null, %70 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #11
  ret %class.SkOpSegment* %134
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkOpSegment4initEP7SkPointfP11SkOpContourN6SkPath4VerbE(%class.SkOpSegment*, %struct.SkPoint*, float, %class.SkOpContour*, i32) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  store %class.SkOpContour* %3, %class.SkOpContour** %6, align 8
  %7 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 3
  store %class.SkOpSegment* null, %class.SkOpSegment** %7, align 8
  %8 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  store %struct.SkPoint* %1, %struct.SkPoint** %8, align 8
  %9 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 7
  store float %2, float* %9, align 8
  %10 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 10
  store i32 %4, i32* %10, align 4
  %11 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 8
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 11
  store i8 0, i8* %13, align 8
  %14 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0
  tail call void @_ZN8SkOpSpan4initEP11SkOpSegmentPS_dRK7SkPoint(%class.SkOpSpan* %14, %class.SkOpSegment* %0, %class.SkOpSpan* null, double 0.000000e+00, %struct.SkPoint* dereferenceable(8) %1) #11
  %15 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 1
  %16 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0, i32 4
  store %class.SkOpSpanBase* %15, %class.SkOpSpanBase** %16, align 8
  %17 = load %struct.SkPoint*, %struct.SkPoint** %8, align 8
  %18 = load i32, i32* %10, align 4
  %19 = add nsw i32 %18, 1
  %20 = ashr i32 %19, 2
  %21 = sub nsw i32 %18, %20
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %17, i64 %22
  tail call void @_ZN12SkOpSpanBase8initBaseEP11SkOpSegmentP8SkOpSpandRK7SkPoint(%class.SkOpSpanBase* %15, %class.SkOpSegment* %0, %class.SkOpSpan* %14, double 1.000000e+00, %struct.SkPoint* dereferenceable(8) %23) #11
  ret void
}

declare void @_ZN12SkOpSpanBase8initBaseEP11SkOpSegmentP8SkOpSpandRK7SkPoint(%class.SkOpSpanBase*, %class.SkOpSegment*, %class.SkOpSpan*, double, %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK11SkOpSegment7isCloseEdPKS_(%class.SkOpSegment* nocapture readonly, double, %class.SkOpSegment* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.SkDLine, align 8
  %5 = alloca %class.SkIntersections, align 8
  %6 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 10
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [5 x { double, double } (%struct.SkPoint*, float, double)*], [5 x { double, double } (%struct.SkPoint*, float, double)*]* @_ZL14CurveDPointAtT, i64 0, i64 %8
  %10 = load { double, double } (%struct.SkPoint*, float, double)*, { double, double } (%struct.SkPoint*, float, double)** %9, align 8
  %11 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %12 = load %struct.SkPoint*, %struct.SkPoint** %11, align 8
  %13 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 7
  %14 = load float, float* %13, align 8
  %15 = tail call { double, double } %10(%struct.SkPoint* %12, float %14, double %1) #11
  %16 = extractvalue { double, double } %15, 0
  %17 = extractvalue { double, double } %15, 1
  %18 = load i32, i32* %6, align 4
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [5 x { double, double } (%struct.SkPoint*, float, double)*], [5 x { double, double } (%struct.SkPoint*, float, double)*]* @_ZL14CurveDSlopeAtT, i64 0, i64 %19
  %21 = load { double, double } (%struct.SkPoint*, float, double)*, { double, double } (%struct.SkPoint*, float, double)** %20, align 8
  %22 = load %struct.SkPoint*, %struct.SkPoint** %11, align 8
  %23 = load float, float* %13, align 8
  %24 = tail call { double, double } %21(%struct.SkPoint* %22, float %23, double %1) #11
  %25 = extractvalue { double, double } %24, 0
  %26 = extractvalue { double, double } %24, 1
  %27 = bitcast %struct.SkDLine* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %27) #11
  %28 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %4, i64 0, i32 0, i64 0, i32 0
  %29 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %4, i64 0, i32 0, i64 0, i32 1
  %30 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %4, i64 0, i32 0, i64 1, i32 0
  %31 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %4, i64 0, i32 0, i64 1, i32 1
  store double %16, double* %28, align 8
  store double %17, double* %29, align 8
  %32 = fadd double %16, %26
  store double %32, double* %30, align 8
  %33 = fsub double %17, %25
  store double %33, double* %31, align 8
  %34 = bitcast %class.SkIntersections* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 464, i8* nonnull %34) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %34, i8* align 8 bitcast (%class.SkIntersections* @__const._ZNK11SkOpSegment18testForCoincidenceEPK7SkOpPtTS2_PK12SkOpSpanBaseS5_PKS_.i to i8*), i64 464, i1 false)
  %35 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 8
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 4, i64 0
  %37 = bitcast i8* %36 to i16*
  store i16 0, i16* %37, align 4
  %38 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 0, i64 448, i1 false) #11
  store i8 1, i8* %38, align 8
  %39 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 5
  store i8 0, i8* %39, align 2
  %40 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 3, i64 0
  %41 = bitcast i16* %40 to i32*
  store i32 0, i32* %41, align 8
  %42 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 6
  store i8 0, i8* %42, align 1
  %43 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %2, i64 0, i32 10
  %44 = load i32, i32* %43, align 4
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds [5 x void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*], [5 x void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*]* @_ZL17CurveIntersectRay, i64 0, i64 %45
  %47 = load void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*, void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)** %46, align 8
  %48 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %2, i64 0, i32 5
  %49 = load %struct.SkPoint*, %struct.SkPoint** %48, align 8
  %50 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %2, i64 0, i32 7
  %51 = load float, float* %50, align 8
  call void %47(%struct.SkPoint* %49, float %51, %struct.SkDLine* nonnull dereferenceable(32) %4, %class.SkIntersections* nonnull %5) #11
  %52 = load i8, i8* %39, align 2
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %100, label %54

54:                                               ; preds = %3
  %55 = zext i8 %52 to i64
  %56 = insertelement <2 x double> undef, double %16, i32 0
  %57 = insertelement <2 x double> %56, double %17, i32 1
  br label %60

58:                                               ; preds = %71
  %59 = icmp eq i64 %99, %55
  br i1 %59, label %100, label %60

60:                                               ; preds = %58, %54
  %61 = phi i64 [ 0, %54 ], [ %99, %58 ]
  %62 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 0, i64 %61, i32 0
  %63 = bitcast double* %62 to <2 x double>*
  %64 = load <2 x double>, <2 x double>* %63, align 8
  %65 = fsub <2 x double> %57, %64
  %66 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %65)
  %67 = fcmp olt <2 x double> %66, <double 0x3EE0000000000000, double 0x3EE0000000000000>
  %68 = extractelement <2 x i1> %67, i32 0
  %69 = extractelement <2 x i1> %67, i32 1
  %70 = and i1 %68, %69
  br i1 %70, label %100, label %71

71:                                               ; preds = %60
  %72 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 0, i64 %61, i32 1
  %73 = fmul <2 x double> %65, %65
  %74 = extractelement <2 x double> %73, i32 0
  %75 = extractelement <2 x double> %73, i32 1
  %76 = fadd double %74, %75
  %77 = call double @sqrt(double %76) #11
  %78 = load double, double* %62, align 8
  %79 = fcmp olt double %78, %16
  %80 = select i1 %79, double %78, double %16
  %81 = fcmp olt double %17, %80
  %82 = load double, double* %72, align 8
  %83 = select i1 %81, double %17, double %80
  %84 = fcmp olt double %82, %83
  %85 = select i1 %84, double %82, double %83
  %86 = fcmp olt double %16, %78
  %87 = select i1 %86, double %78, double %16
  %88 = fcmp olt double %87, %17
  %89 = select i1 %88, double %17, double %87
  %90 = fcmp olt double %89, %82
  %91 = select i1 %90, double %82, double %89
  %92 = fsub double -0.000000e+00, %85
  %93 = fcmp olt double %91, %92
  %94 = select i1 %93, double %92, double %91
  %95 = fadd double %77, %94
  %96 = fptrunc double %94 to float
  %97 = fptrunc double %95 to float
  %98 = call zeroext i1 @_Z16RoughlyEqualUlpsff(float %96, float %97) #11
  %99 = add nuw nsw i64 %61, 1
  br i1 %98, label %100, label %58

100:                                              ; preds = %71, %60, %58, %3
  %101 = phi i1 [ false, %3 ], [ true, %60 ], [ true, %71 ], [ false, %58 ]
  call void @llvm.lifetime.end.p0i8(i64 464, i8* nonnull %34) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %27) #11
  ret i1 %101
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK11SkOpSegment5isXorEv(%class.SkOpSegment* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %3 = load %class.SkOpContour*, %class.SkOpContour** %2, align 8
  %4 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %3, i64 0, i32 11
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp ne i8 %5, 0
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkOpSegment11markAllDoneEv(%class.SkOpSegment*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0
  %3 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  br label %4

4:                                                ; preds = %12, %1
  %5 = phi %class.SkOpSpan* [ %2, %1 ], [ %19, %12 ]
  %6 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %5, i64 0, i32 10
  %7 = load i8, i8* %6, align 4, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %4
  store i8 1, i8* %6, align 4
  %10 = load i32, i32* %3, align 8
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %12

12:                                               ; preds = %4, %9
  %13 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %5, i64 0, i32 4
  %14 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %13, align 8
  %15 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %14, i64 0, i32 0, i32 0
  %16 = load double, double* %15, align 8
  %17 = fcmp oeq double %16, 1.000000e+00
  %18 = bitcast %class.SkOpSpanBase* %14 to %class.SkOpSpan*
  %19 = select i1 %17, %class.SkOpSpan* null, %class.SkOpSpan* %18
  %20 = icmp eq %class.SkOpSpan* %19, null
  br i1 %20, label %21, label %4

21:                                               ; preds = %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpSegment* @_ZNK11SkOpSegment9nextChaseEPP12SkOpSpanBasePiPP8SkOpSpanS2_(%class.SkOpSegment* nocapture readnone, %class.SkOpSpanBase** nocapture, i32* nocapture, %class.SkOpSpan**, %class.SkOpSpanBase**) local_unnamed_addr #0 align 2 {
  %6 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %1, align 8
  %7 = load i32, i32* %2, align 4
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 1, i32 0, i32 2
  %11 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %10, align 8
  %12 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %11, i64 0, i32 3
  br label %19

13:                                               ; preds = %5
  %14 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 0, i32 4
  %15 = bitcast %class.SkOpSpan** %14 to %class.SkOpSpanBase**
  %16 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %15, align 8
  %17 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %16, i64 1, i32 0, i32 1
  %18 = bitcast %struct.SkPoint* %17 to %class.SkOpAngle**
  br label %19

19:                                               ; preds = %13, %9
  %20 = phi %class.SkOpSpanBase* [ %11, %9 ], [ %16, %13 ]
  %21 = phi %class.SkOpAngle** [ %12, %9 ], [ %18, %13 ]
  %22 = load %class.SkOpAngle*, %class.SkOpAngle** %21, align 8
  %23 = icmp eq %class.SkOpAngle* %22, null
  br i1 %23, label %24, label %47

24:                                               ; preds = %19
  %25 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %20, i64 0, i32 0, i32 0
  %26 = load double, double* %25, align 8
  %27 = fcmp une double %26, 0.000000e+00
  %28 = fcmp une double %26, 1.000000e+00
  %29 = and i1 %27, %28
  br i1 %29, label %111, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %20, i64 0, i32 0, i32 3
  %32 = load %class.SkOpPtT*, %class.SkOpPtT** %31, align 8
  %33 = tail call %class.SkOpSegment* @_ZN7SkOpPtT7segmentEv(%class.SkOpPtT* %32) #11
  %34 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %32, i64 0, i32 2
  %35 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %34, align 8
  br i1 %8, label %36, label %44

36:                                               ; preds = %30
  %37 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %35, i64 0, i32 0, i32 0
  %38 = load double, double* %37, align 8
  %39 = fcmp oeq double %38, 1.000000e+00
  %40 = icmp eq %class.SkOpSpanBase* %35, null
  %41 = or i1 %40, %39
  br i1 %41, label %111, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %35, i64 1, i32 0, i32 2
  br label %62

44:                                               ; preds = %30
  %45 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %35, i64 0, i32 4
  %46 = bitcast %class.SkOpSpan** %45 to %class.SkOpSpanBase**
  br label %62

47:                                               ; preds = %19
  %48 = tail call i32 @_ZNK9SkOpAngle9loopCountEv(%class.SkOpAngle* nonnull %22) #11
  %49 = icmp sgt i32 %48, 2
  br i1 %49, label %50, label %53

50:                                               ; preds = %47
  %51 = icmp eq %class.SkOpSpanBase** %4, null
  br i1 %51, label %111, label %52

52:                                               ; preds = %50
  store %class.SkOpSpanBase* %20, %class.SkOpSpanBase** %4, align 8
  br label %111

53:                                               ; preds = %47
  %54 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %22, i64 0, i32 4
  %55 = load %class.SkOpAngle*, %class.SkOpAngle** %54, align 8
  %56 = icmp eq %class.SkOpAngle* %55, null
  br i1 %56, label %111, label %57

57:                                               ; preds = %53
  %58 = tail call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* nonnull %55) #11
  %59 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %55, i64 0, i32 6
  %60 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %59, align 8
  %61 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %55, i64 0, i32 7
  br label %62

62:                                               ; preds = %57, %44, %42
  %63 = phi %class.SkOpSpanBase* [ %60, %57 ], [ %20, %42 ], [ %20, %44 ]
  %64 = phi %class.SkOpSpanBase* [ %60, %57 ], [ %35, %42 ], [ %35, %44 ]
  %65 = phi %class.SkOpSpanBase** [ %61, %57 ], [ %43, %42 ], [ %46, %44 ]
  %66 = phi %class.SkOpSegment* [ %58, %57 ], [ %33, %42 ], [ %33, %44 ]
  %67 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %65, align 8
  %68 = icmp eq %class.SkOpSpanBase* %67, null
  br i1 %68, label %111, label %69

69:                                               ; preds = %62
  %70 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %64, i64 0, i32 0, i32 0
  %71 = load double, double* %70, align 8
  %72 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %67, i64 0, i32 0, i32 0
  %73 = load double, double* %72, align 8
  %74 = fcmp olt double %71, %73
  %75 = select i1 %74, i32 1, i32 -1
  %76 = load i32, i32* %2, align 4
  %77 = icmp eq i32 %76, %75
  br i1 %77, label %81, label %78

78:                                               ; preds = %69
  %79 = icmp eq %class.SkOpSpanBase** %4, null
  br i1 %79, label %111, label %80

80:                                               ; preds = %78
  store %class.SkOpSpanBase* %63, %class.SkOpSpanBase** %4, align 8
  br label %111

81:                                               ; preds = %69
  %82 = icmp slt i32 %7, 0
  br i1 %82, label %83, label %86

83:                                               ; preds = %81
  %84 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 0, i32 4
  %85 = load %class.SkOpSpan*, %class.SkOpSpan** %84, align 8
  br label %88

86:                                               ; preds = %81
  %87 = bitcast %class.SkOpSpanBase* %6 to %class.SkOpSpan*
  br label %88

88:                                               ; preds = %86, %83
  %89 = phi %class.SkOpSpan* [ %85, %83 ], [ %87, %86 ]
  %90 = select i1 %74, %class.SkOpSpanBase* %64, %class.SkOpSpanBase* %67
  %91 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %90, i64 1, i32 0, i32 4
  %92 = bitcast i8* %91 to i32*
  %93 = load i32, i32* %92, align 8
  %94 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %89, i64 0, i32 7
  %95 = load i32, i32* %94, align 8
  %96 = icmp eq i32 %93, %95
  br i1 %96, label %97, label %104

97:                                               ; preds = %88
  %98 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %90, i64 1, i32 0, i32 7, i64 1
  %99 = bitcast i8* %98 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %89, i64 0, i32 8
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %100, %102
  br i1 %103, label %107, label %104

104:                                              ; preds = %97, %88
  %105 = icmp eq %class.SkOpSpanBase** %4, null
  br i1 %105, label %111, label %106

106:                                              ; preds = %104
  store %class.SkOpSpanBase* %63, %class.SkOpSpanBase** %4, align 8
  br label %111

107:                                              ; preds = %97
  store %class.SkOpSpanBase* %64, %class.SkOpSpanBase** %1, align 8
  store i32 %75, i32* %2, align 4
  %108 = icmp eq %class.SkOpSpan** %3, null
  br i1 %108, label %111, label %109

109:                                              ; preds = %107
  %110 = bitcast %class.SkOpSpan** %3 to %class.SkOpSpanBase**
  store %class.SkOpSpanBase* %90, %class.SkOpSpanBase** %110, align 8
  br label %111

111:                                              ; preds = %24, %52, %50, %53, %36, %106, %104, %80, %78, %109, %107, %62
  %112 = phi %class.SkOpSegment* [ null, %62 ], [ %66, %107 ], [ %66, %109 ], [ null, %78 ], [ null, %80 ], [ null, %104 ], [ null, %106 ], [ null, %36 ], [ null, %53 ], [ null, %50 ], [ null, %52 ], [ null, %24 ]
  ret %class.SkOpSegment* %112
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment19markAndChaseWindingEP12SkOpSpanBaseS1_iPS1_(%class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, i32, %class.SkOpSpanBase**) local_unnamed_addr #0 align 2 {
  %6 = alloca %class.SkOpSpanBase*, align 8
  %7 = alloca %class.SkOpSpan*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %class.SkOpSpanBase*, align 8
  store %class.SkOpSpanBase* %1, %class.SkOpSpanBase** %6, align 8
  %10 = bitcast %class.SkOpSpan** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #11
  %11 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 0
  %14 = load double, double* %13, align 8
  %15 = fcmp olt double %12, %14
  %16 = select i1 %15, %class.SkOpSpanBase* %1, %class.SkOpSpanBase* %2
  %17 = bitcast %class.SkOpSpanBase* %16 to %class.SkOpSpan*
  %18 = bitcast %class.SkOpSpan** %7 to %class.SkOpSpanBase**
  store %class.SkOpSpanBase* %16, %class.SkOpSpanBase** %18, align 8
  %19 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #11
  %20 = select i1 %15, i32 1, i32 -1
  store i32 %20, i32* %8, align 4
  %21 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %17, i64 0, i32 10
  %22 = load i8, i8* %21, align 4, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %5
  tail call void @_ZN8SkOpSpan10setWindSumEi(%class.SkOpSpan* %17, i32 %3) #11
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %25

25:                                               ; preds = %5, %24
  %26 = phi i1 [ true, %24 ], [ false, %5 ]
  %27 = bitcast %class.SkOpSpanBase** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #11
  store %class.SkOpSpanBase* null, %class.SkOpSpanBase** %9, align 8
  %28 = call %class.SkOpSegment* @_ZNK11SkOpSegment9nextChaseEPP12SkOpSpanBasePiPP8SkOpSpanS2_(%class.SkOpSegment* undef, %class.SkOpSpanBase** nonnull %6, i32* nonnull %8, %class.SkOpSpan** nonnull %7, %class.SkOpSpanBase** nonnull %9)
  %29 = icmp eq %class.SkOpSegment* %28, null
  br i1 %29, label %48, label %30

30:                                               ; preds = %25, %45
  %31 = phi %class.SkOpSegment* [ %46, %45 ], [ %28, %25 ]
  %32 = phi i32 [ %33, %45 ], [ 100000, %25 ]
  %33 = add nsw i32 %32, -1
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %54, label %35

35:                                               ; preds = %30
  %36 = load %class.SkOpSpan*, %class.SkOpSpan** %7, align 8
  %37 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %36, i64 0, i32 5
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, -2147483647
  br i1 %39, label %40, label %48

40:                                               ; preds = %35
  %41 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %36, i64 0, i32 10
  %42 = load i8, i8* %41, align 4, !range !2
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %40
  call void @_ZN8SkOpSpan10setWindSumEi(%class.SkOpSpan* %36, i32 %3) #11
  call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* nonnull %31) #11
  br label %45

45:                                               ; preds = %40, %44
  %46 = call %class.SkOpSegment* @_ZNK11SkOpSegment9nextChaseEPP12SkOpSpanBasePiPP8SkOpSpanS2_(%class.SkOpSegment* undef, %class.SkOpSpanBase** nonnull %6, i32* nonnull %8, %class.SkOpSpan** nonnull %7, %class.SkOpSpanBase** nonnull %9)
  %47 = icmp eq %class.SkOpSegment* %46, null
  br i1 %47, label %48, label %30

48:                                               ; preds = %45, %35, %25
  %49 = icmp eq %class.SkOpSpanBase** %4, null
  br i1 %49, label %54, label %50

50:                                               ; preds = %48
  %51 = bitcast %class.SkOpSpanBase** %9 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = bitcast %class.SkOpSpanBase** %4 to i64*
  store i64 %52, i64* %53, align 8
  br label %54

54:                                               ; preds = %30, %50, %48
  %55 = phi i1 [ %26, %48 ], [ %26, %50 ], [ false, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #11
  ret i1 %55
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment11markWindingEP8SkOpSpani(%class.SkOpSegment*, %class.SkOpSpan*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %1, i64 0, i32 10
  %5 = load i8, i8* %4, align 4, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @_ZN8SkOpSpan10setWindSumEi(%class.SkOpSpan* %1, i32 %2) #11
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %8

8:                                                ; preds = %3, %7
  %9 = phi i1 [ true, %7 ], [ false, %3 ]
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment19markAndChaseWindingEP12SkOpSpanBaseS1_iiPS1_(%class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, i32, i32, %class.SkOpSpanBase**) local_unnamed_addr #0 align 2 {
  %7 = alloca %class.SkOpSpanBase*, align 8
  %8 = alloca %class.SkOpSpan*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %class.SkOpSpanBase*, align 8
  store %class.SkOpSpanBase* %1, %class.SkOpSpanBase** %7, align 8
  %11 = bitcast %class.SkOpSpan** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #11
  %12 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 0
  %15 = load double, double* %14, align 8
  %16 = fcmp olt double %13, %15
  %17 = select i1 %16, %class.SkOpSpanBase* %1, %class.SkOpSpanBase* %2
  %18 = bitcast %class.SkOpSpanBase* %17 to %class.SkOpSpan*
  %19 = bitcast %class.SkOpSpan** %8 to %class.SkOpSpanBase**
  store %class.SkOpSpanBase* %17, %class.SkOpSpanBase** %19, align 8
  %20 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #11
  %21 = select i1 %16, i32 1, i32 -1
  store i32 %21, i32* %9, align 4
  %22 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %18, i64 0, i32 10
  %23 = load i8, i8* %22, align 4, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %6
  tail call void @_ZN8SkOpSpan10setWindSumEi(%class.SkOpSpan* %18, i32 %3) #11
  tail call void @_ZN8SkOpSpan9setOppSumEi(%class.SkOpSpan* %18, i32 %4) #11
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %26

26:                                               ; preds = %6, %25
  %27 = phi i1 [ true, %25 ], [ false, %6 ]
  %28 = bitcast %class.SkOpSpanBase** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #11
  store %class.SkOpSpanBase* null, %class.SkOpSpanBase** %10, align 8
  %29 = call %class.SkOpSegment* @_ZNK11SkOpSegment9nextChaseEPP12SkOpSpanBasePiPP8SkOpSpanS2_(%class.SkOpSegment* undef, %class.SkOpSpanBase** nonnull %7, i32* nonnull %9, %class.SkOpSpan** nonnull %8, %class.SkOpSpanBase** nonnull %10)
  %30 = icmp eq %class.SkOpSegment* %29, null
  br i1 %30, label %81, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  br label %33

33:                                               ; preds = %31, %78
  %34 = phi %class.SkOpSegment* [ %29, %31 ], [ %79, %78 ]
  %35 = phi i32 [ 100000, %31 ], [ %36, %78 ]
  %36 = add nsw i32 %35, -1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %87, label %38

38:                                               ; preds = %33
  %39 = load %class.SkOpSpan*, %class.SkOpSpan** %8, align 8
  %40 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %39, i64 0, i32 5
  %41 = load i32, i32* %40, align 8
  %42 = icmp eq i32 %41, -2147483647
  %43 = load %class.SkOpContour*, %class.SkOpContour** %32, align 8
  %44 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %43, i64 0, i32 9
  %45 = load i8, i8* %44, align 1, !range !2
  %46 = icmp ne i8 %45, 0
  %47 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %34, i64 0, i32 2
  %48 = load %class.SkOpContour*, %class.SkOpContour** %47, align 8
  %49 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %48, i64 0, i32 9
  %50 = load i8, i8* %49, align 1, !range !2
  %51 = icmp ne i8 %50, 0
  %52 = xor i1 %46, %51
  br i1 %42, label %70, label %53

53:                                               ; preds = %38
  br i1 %52, label %64, label %54

54:                                               ; preds = %53
  %55 = icmp eq i32 %41, %3
  br i1 %55, label %56, label %60

56:                                               ; preds = %54
  %57 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %39, i64 0, i32 6
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, %4
  br i1 %59, label %81, label %60

60:                                               ; preds = %56, %54
  %61 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %43, i64 0, i32 0
  %62 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %61, align 8
  %63 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %62, i64 0, i32 5
  store i8 1, i8* %63, align 1
  br label %87

64:                                               ; preds = %53
  %65 = icmp eq i32 %41, %4
  br i1 %65, label %66, label %87

66:                                               ; preds = %64
  %67 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %39, i64 0, i32 6
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, %3
  br i1 %69, label %81, label %87

70:                                               ; preds = %38
  %71 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %39, i64 0, i32 10
  %72 = load i8, i8* %71, align 4, !range !2
  %73 = icmp eq i8 %72, 0
  br i1 %52, label %76, label %74

74:                                               ; preds = %70
  br i1 %73, label %75, label %78

75:                                               ; preds = %74
  call void @_ZN8SkOpSpan10setWindSumEi(%class.SkOpSpan* %39, i32 %3) #11
  call void @_ZN8SkOpSpan9setOppSumEi(%class.SkOpSpan* %39, i32 %4) #11
  call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* nonnull %34) #11
  br label %78

76:                                               ; preds = %70
  br i1 %73, label %77, label %78

77:                                               ; preds = %76
  call void @_ZN8SkOpSpan10setWindSumEi(%class.SkOpSpan* %39, i32 %4) #11
  call void @_ZN8SkOpSpan9setOppSumEi(%class.SkOpSpan* %39, i32 %3) #11
  call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* nonnull %34) #11
  br label %78

78:                                               ; preds = %77, %76, %75, %74
  %79 = call %class.SkOpSegment* @_ZNK11SkOpSegment9nextChaseEPP12SkOpSpanBasePiPP8SkOpSpanS2_(%class.SkOpSegment* undef, %class.SkOpSpanBase** nonnull %7, i32* nonnull %9, %class.SkOpSpan** nonnull %8, %class.SkOpSpanBase** nonnull %10)
  %80 = icmp eq %class.SkOpSegment* %79, null
  br i1 %80, label %81, label %33

81:                                               ; preds = %78, %26, %56, %66
  %82 = icmp eq %class.SkOpSpanBase** %5, null
  br i1 %82, label %87, label %83

83:                                               ; preds = %81
  %84 = bitcast %class.SkOpSpanBase** %10 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = bitcast %class.SkOpSpanBase** %5 to i64*
  store i64 %85, i64* %86, align 8
  br label %87

87:                                               ; preds = %33, %83, %81, %66, %64, %60
  %88 = phi i1 [ true, %60 ], [ false, %66 ], [ false, %64 ], [ %27, %81 ], [ %27, %83 ], [ false, %33 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #11
  ret i1 %88
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment11markWindingEP8SkOpSpanii(%class.SkOpSegment*, %class.SkOpSpan*, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %1, i64 0, i32 10
  %6 = load i8, i8* %5, align 4, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  tail call void @_ZN8SkOpSpan10setWindSumEi(%class.SkOpSpan* %1, i32 %2) #11
  tail call void @_ZN8SkOpSpan9setOppSumEi(%class.SkOpSpan* %1, i32 %3) #11
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %9

9:                                                ; preds = %4, %8
  %10 = phi i1 [ true, %8 ], [ false, %4 ]
  ret i1 %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment15UseInnerWindingEii(i32, i32) local_unnamed_addr #6 align 2 {
  %3 = icmp slt i32 %0, 0
  %4 = sub nsw i32 0, %0
  %5 = select i1 %3, i32 %4, i32 %0
  %6 = icmp slt i32 %1, 0
  %7 = sub nsw i32 0, %1
  %8 = select i1 %6, i32 %7, i32 %1
  %9 = icmp eq i32 %5, %8
  %10 = icmp slt i32 %5, %8
  %11 = select i1 %9, i1 %3, i1 %10
  ret i1 %11
}

declare void @_ZN8SkOpSpan10setWindSumEi(%class.SkOpSpan*, i32) local_unnamed_addr #3

declare void @_ZN8SkOpSpan9setOppSumEi(%class.SkOpSpan*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = fpext float %7 to double
  %9 = fsub double %5, %8
  %10 = tail call double @llvm.fabs.f64(double %9) #11
  %11 = fcmp olt double %10, 0x3E80000000000000
  br i1 %11, label %12, label %22

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = fpext float %14 to double
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  %19 = fsub double %15, %18
  %20 = tail call double @llvm.fabs.f64(double %19) #11
  %21 = fcmp olt double %20, 0x3E80000000000000
  br i1 %21, label %71, label %22

22:                                               ; preds = %12, %2
  %23 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %4, float %7) #11
  br i1 %23, label %24, label %71

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %28 = load float, float* %27, align 4
  %29 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %26, float %28) #11
  br i1 %29, label %30, label %71

30:                                               ; preds = %24
  %31 = load float, float* %3, align 4
  %32 = fpext float %31 to double
  %33 = load float, float* %25, align 4
  %34 = fpext float %33 to double
  %35 = load float, float* %6, align 4
  %36 = fpext float %35 to double
  %37 = load float, float* %27, align 4
  %38 = fpext float %37 to double
  %39 = fsub double %32, %36
  %40 = fsub double %34, %38
  %41 = fmul double %39, %39
  %42 = fmul double %40, %40
  %43 = fadd double %41, %42
  %44 = tail call double @sqrt(double %43) #11
  %45 = load float, float* %6, align 4
  %46 = load float, float* %3, align 4
  %47 = fcmp olt float %45, %46
  %48 = load float, float* %25, align 4
  %49 = select i1 %47, float %45, float %46
  %50 = fcmp olt float %48, %49
  %51 = load float, float* %27, align 4
  %52 = select i1 %50, float %48, float %49
  %53 = fcmp olt float %51, %52
  %54 = select i1 %53, float %51, float %52
  %55 = fcmp olt float %46, %45
  %56 = load float, float* %6, align 4
  %57 = load float, float* %3, align 4
  %58 = select i1 %55, float %56, float %57
  %59 = fcmp olt float %58, %48
  %60 = load float, float* %25, align 4
  %61 = select i1 %59, float %60, float %58
  %62 = fcmp olt float %61, %51
  %63 = load float, float* %27, align 4
  %64 = select i1 %62, float %63, float %61
  %65 = fsub float -0.000000e+00, %54
  %66 = fcmp olt float %64, %65
  %67 = select i1 %66, float %65, float %64
  %68 = fpext float %67 to double
  %69 = fadd double %44, %68
  %70 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %68, double %69) #11
  br label %71

71:                                               ; preds = %22, %24, %12, %30
  %72 = phi i1 [ %70, %30 ], [ true, %12 ], [ false, %24 ], [ false, %22 ]
  ret i1 %72
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK11SkOpSegment11ptsDisjointEdRK7SkPointdS2_(%class.SkOpSegment* nocapture readonly, double, %struct.SkPoint* nocapture readonly dereferenceable(8), double, %struct.SkPoint* nocapture readonly dereferenceable(8)) local_unnamed_addr #5 align 2 {
  %6 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 10
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %45, label %9

9:                                                ; preds = %5
  %10 = fadd double %1, %3
  %11 = fmul double %10, 5.000000e-01
  %12 = zext i32 %7 to i64
  %13 = getelementptr inbounds [5 x <2 x float> (%struct.SkPoint*, float, double)*], [5 x <2 x float> (%struct.SkPoint*, float, double)*]* @_ZL13CurvePointAtT, i64 0, i64 %12
  %14 = load <2 x float> (%struct.SkPoint*, float, double)*, <2 x float> (%struct.SkPoint*, float, double)** %13, align 8
  %15 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %16 = load %struct.SkPoint*, %struct.SkPoint** %15, align 8
  %17 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 7
  %18 = load float, float* %17, align 8
  %19 = tail call <2 x float> %14(%struct.SkPoint* %16, float %18, double %11) #11
  %20 = bitcast %struct.SkPoint* %4 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 4
  %22 = bitcast %struct.SkPoint* %2 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = fsub <2 x float> %23, %21
  %25 = fmul <2 x float> %24, %24
  %26 = extractelement <2 x float> %25, i32 0
  %27 = extractelement <2 x float> %25, i32 1
  %28 = fadd float %26, %27
  %29 = fmul float %28, 2.000000e+00
  %30 = fcmp olt float %29, 0x3E90000000000000
  %31 = select i1 %30, float 0x3E90000000000000, float %29
  %32 = fsub <2 x float> %19, %23
  %33 = fmul <2 x float> %32, %32
  %34 = extractelement <2 x float> %33, i32 0
  %35 = extractelement <2 x float> %33, i32 1
  %36 = fadd float %34, %35
  %37 = fcmp ogt float %36, %31
  br i1 %37, label %45, label %38

38:                                               ; preds = %9
  %39 = fsub <2 x float> %19, %21
  %40 = fmul <2 x float> %39, %39
  %41 = extractelement <2 x float> %40, i32 0
  %42 = extractelement <2 x float> %40, i32 1
  %43 = fadd float %41, %42
  %44 = fcmp ogt float %43, %31
  br label %45

45:                                               ; preds = %9, %38, %5
  %46 = phi i1 [ false, %5 ], [ true, %9 ], [ %44, %38 ]
  ret i1 %46
}

declare i32 @_ZNK9SkOpAngle9loopCountEv(%class.SkOpAngle*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkOpSegment12ClearVisitedEP12SkOpSpanBase(%class.SkOpSpanBase* readonly) local_unnamed_addr #0 align 2 {
  br label %2

2:                                                ; preds = %19, %1
  %3 = phi %class.SkOpSpanBase* [ %0, %1 ], [ %21, %19 ]
  %4 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %3, i64 0, i32 0
  %5 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %3, i64 0, i32 0, i32 3
  %6 = load %class.SkOpPtT*, %class.SkOpPtT** %5, align 8
  %7 = icmp eq %class.SkOpPtT* %6, %4
  br i1 %7, label %15, label %8

8:                                                ; preds = %2, %8
  %9 = phi %class.SkOpPtT* [ %13, %8 ], [ %6, %2 ]
  %10 = tail call %class.SkOpSegment* @_ZN7SkOpPtT7segmentEv(%class.SkOpPtT* %9) #11
  %11 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %10, i64 0, i32 11
  store i8 0, i8* %11, align 8
  %12 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %9, i64 0, i32 3
  %13 = load %class.SkOpPtT*, %class.SkOpPtT** %12, align 8
  %14 = icmp eq %class.SkOpPtT* %13, %4
  br i1 %14, label %15, label %8

15:                                               ; preds = %8, %2
  %16 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %3, i64 0, i32 0, i32 0
  %17 = load double, double* %16, align 8
  %18 = fcmp oeq double %17, 1.000000e+00
  br i1 %18, label %23, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %3, i64 1, i32 0, i32 2
  %21 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %20, align 8
  %22 = icmp eq %class.SkOpSpanBase* %21, null
  br i1 %22, label %23, label %2

23:                                               ; preds = %19, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment18missingCoincidenceEv(%class.SkOpSegment*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %3, %5
  br i1 %6, label %188, label %7

7:                                                ; preds = %1
  %8 = bitcast %class.SkOpSegment* %0 to %class.SkOpSpanBase*
  %9 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  br label %10

10:                                               ; preds = %159, %7
  %11 = phi %class.SkOpSpan* [ null, %7 ], [ %24, %159 ]
  %12 = phi %class.SkOpSpanBase* [ %8, %7 ], [ %161, %159 ]
  %13 = phi i8 [ 0, %7 ], [ %25, %159 ]
  %14 = phi i32 [ 100000, %7 ], [ %29, %159 ]
  %15 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %12, i64 0, i32 0
  %16 = ptrtoint %class.SkOpSpanBase* %12 to i64
  %17 = icmp eq %class.SkOpSpanBase* %12, %8
  %18 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %12, i64 0, i32 0, i32 0
  %19 = icmp eq %class.SkOpSpanBase* %12, null
  %20 = bitcast %class.SkOpSpanBase* %12 to %class.SkOpSpan*
  %21 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %12, i64 0, i32 4
  br label %22

22:                                               ; preds = %151, %10
  %23 = phi %class.SkOpPtT* [ %155, %151 ], [ %15, %10 ]
  %24 = phi %class.SkOpSpan* [ %153, %151 ], [ %11, %10 ]
  %25 = phi i8 [ %154, %151 ], [ %13, %10 ]
  %26 = phi i32 [ %34, %151 ], [ %14, %10 ]
  br label %27

27:                                               ; preds = %22, %36
  %28 = phi %class.SkOpPtT* [ %31, %36 ], [ %23, %22 ]
  %29 = phi i32 [ %34, %36 ], [ %26, %22 ]
  %30 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %28, i64 0, i32 3
  %31 = load %class.SkOpPtT*, %class.SkOpPtT** %30, align 8
  %32 = icmp eq %class.SkOpPtT* %31, %15
  br i1 %32, label %156, label %33

33:                                               ; preds = %27
  %34 = add nsw i32 %29, -1
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %188, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %31, i64 0, i32 4
  %38 = load i8, i8* %37, align 8, !range !2
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %40, label %27

40:                                               ; preds = %36
  %41 = ptrtoint %class.SkOpPtT* %31 to i64
  %42 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %31, i64 0, i32 2
  %43 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %42, align 8
  %44 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %43, i64 0, i32 1
  %45 = load %class.SkOpSegment*, %class.SkOpSegment** %44, align 8
  %46 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %45, i64 0, i32 9
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %45, i64 0, i32 8
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %47, %49
  br i1 %50, label %151, label %51

51:                                               ; preds = %40
  %52 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %45, i64 0, i32 11
  %53 = load i8, i8* %52, align 8, !range !2
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %51
  store i8 1, i8* %52, align 8
  br label %151

56:                                               ; preds = %51
  br i1 %17, label %151, label %57

57:                                               ; preds = %56
  %58 = tail call %class.SkOpSegment* @_ZN7SkOpPtT7segmentEv(%class.SkOpPtT* %31) #11
  %59 = icmp eq %class.SkOpSegment* %58, %0
  br i1 %59, label %151, label %60

60:                                               ; preds = %57
  %61 = load double, double* %18, align 8
  %62 = fcmp oeq double %61, 1.000000e+00
  %63 = or i1 %19, %62
  br i1 %63, label %66, label %64

64:                                               ; preds = %60
  %65 = tail call zeroext i1 @_ZNK8SkOpSpan19containsCoincidenceEPK11SkOpSegment(%class.SkOpSpan* nonnull %20, %class.SkOpSegment* %45) #11
  br i1 %65, label %151, label %66

66:                                               ; preds = %60, %64
  %67 = tail call zeroext i1 @_ZNK12SkOpSpanBase15containsCoinEndEPK11SkOpSegment(%class.SkOpSpanBase* %12, %class.SkOpSegment* %45) #11
  br i1 %67, label %151, label %68

68:                                               ; preds = %66
  %69 = load %class.SkOpSpan*, %class.SkOpSpan** %21, align 8
  %70 = icmp eq %class.SkOpSpan* %69, null
  br i1 %70, label %151, label %71

71:                                               ; preds = %68, %92
  %72 = phi %class.SkOpSpan* [ %97, %92 ], [ %69, %68 ]
  %73 = phi %class.SkOpSegment* [ %95, %92 ], [ null, %68 ]
  %74 = phi %class.SkOpSpan* [ %94, %92 ], [ %24, %68 ]
  %75 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %72, i64 0, i32 0, i32 0
  br label %76

76:                                               ; preds = %85, %71
  %77 = phi %class.SkOpPtT* [ %75, %71 ], [ %79, %85 ]
  %78 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %77, i64 0, i32 3
  %79 = load %class.SkOpPtT*, %class.SkOpPtT** %78, align 8
  %80 = icmp eq %class.SkOpPtT* %79, %75
  br i1 %80, label %92, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %79, i64 0, i32 4
  %83 = load i8, i8* %82, align 8, !range !2
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %86, label %85

85:                                               ; preds = %81, %86
  br label %76

86:                                               ; preds = %81
  %87 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %79, i64 0, i32 2
  %88 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %87, align 8
  %89 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %88, i64 0, i32 1
  %90 = load %class.SkOpSegment*, %class.SkOpSegment** %89, align 8
  %91 = icmp eq %class.SkOpSegment* %90, %45
  br i1 %91, label %92, label %85

92:                                               ; preds = %86, %76
  %93 = phi %class.SkOpPtT* [ %75, %76 ], [ %79, %86 ]
  %94 = phi %class.SkOpSpan* [ %74, %76 ], [ %72, %86 ]
  %95 = phi %class.SkOpSegment* [ %73, %76 ], [ %45, %86 ]
  %96 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %72, i64 0, i32 0, i32 4
  %97 = load %class.SkOpSpan*, %class.SkOpSpan** %96, align 8
  %98 = icmp ne %class.SkOpSegment* %95, null
  %99 = icmp ne %class.SkOpSpan* %97, null
  %100 = xor i1 %98, true
  %101 = and i1 %99, %100
  br i1 %101, label %71, label %102

102:                                              ; preds = %92
  %103 = ptrtoint %class.SkOpPtT* %93 to i64
  %104 = xor i1 %98, true
  %105 = icmp eq %class.SkOpPtT* %31, %93
  %106 = or i1 %105, %104
  br i1 %106, label %151, label %107

107:                                              ; preds = %102
  %108 = bitcast %class.SkOpSpan* %94 to %class.SkOpSpanBase*
  %109 = ptrtoint %class.SkOpSpan* %94 to i64
  %110 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %93, i64 0, i32 0
  %111 = load double, double* %110, align 8
  %112 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %31, i64 0, i32 0
  %113 = load double, double* %112, align 8
  %114 = fcmp ogt double %111, %113
  br i1 %114, label %115, label %116

115:                                              ; preds = %107
  br label %116

116:                                              ; preds = %107, %115
  %117 = phi %class.SkOpPtT* [ %93, %115 ], [ %31, %107 ]
  %118 = phi %class.SkOpPtT* [ %31, %115 ], [ %93, %107 ]
  %119 = phi i64 [ %103, %115 ], [ %41, %107 ]
  %120 = phi i64 [ %41, %115 ], [ %103, %107 ]
  %121 = phi i64 [ %16, %115 ], [ %109, %107 ]
  %122 = phi i64 [ %109, %115 ], [ %16, %107 ]
  %123 = load %class.SkOpContour*, %class.SkOpContour** %9, align 8
  %124 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %123, i64 0, i32 0
  %125 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %124, align 8
  %126 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %125, i64 0, i32 1
  %127 = load %class.SkOpCoincidence*, %class.SkOpCoincidence** %126, align 8
  %128 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %118, i64 0, i32 2
  %129 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %128, align 8
  %130 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %129, i64 0, i32 0
  %131 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %117, i64 0, i32 2
  %132 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %131, align 8
  %133 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %132, i64 0, i32 0
  %134 = inttoptr i64 %121 to %class.SkOpPtT*
  %135 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %134, i64 0, i32 2
  %136 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %135, align 8
  %137 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %136, i64 0, i32 0
  %138 = inttoptr i64 %122 to %class.SkOpPtT*
  %139 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %138, i64 0, i32 2
  %140 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %139, align 8
  %141 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %140, i64 0, i32 0
  %142 = tail call zeroext i1 @_ZNK15SkOpCoincidence8containsEPK7SkOpPtTS2_S2_S2_(%class.SkOpCoincidence* %127, %class.SkOpPtT* %130, %class.SkOpPtT* %133, %class.SkOpPtT* %137, %class.SkOpPtT* %141) #11
  br i1 %142, label %148, label %143

143:                                              ; preds = %116
  %144 = tail call zeroext i1 @_ZNK11SkOpSegment18testForCoincidenceEPK7SkOpPtTS2_PK12SkOpSpanBaseS5_PKS_(%class.SkOpSegment* %0, %class.SkOpPtT* %130, %class.SkOpPtT* %133, %class.SkOpSpanBase* %108, %class.SkOpSpanBase* %12, %class.SkOpSegment* %45)
  br i1 %144, label %145, label %148

145:                                              ; preds = %143
  %146 = tail call zeroext i1 @_ZN15SkOpCoincidence6extendEPK7SkOpPtTS2_S2_S2_(%class.SkOpCoincidence* %127, %class.SkOpPtT* %130, %class.SkOpPtT* %133, %class.SkOpPtT* %137, %class.SkOpPtT* %141) #11
  br i1 %146, label %148, label %147

147:                                              ; preds = %145
  tail call void @_ZN15SkOpCoincidence3addEP7SkOpPtTS1_S1_S1_(%class.SkOpCoincidence* %127, %class.SkOpPtT* %130, %class.SkOpPtT* %133, %class.SkOpPtT* %137, %class.SkOpPtT* %141) #11
  br label %148

148:                                              ; preds = %145, %147, %143, %116
  %149 = phi i8 [ %25, %116 ], [ %25, %143 ], [ 1, %147 ], [ 1, %145 ]
  br i1 %114, label %150, label %151

150:                                              ; preds = %148
  br label %151

151:                                              ; preds = %102, %68, %150, %148, %55, %56, %64, %66, %57, %40
  %152 = phi i64 [ %41, %40 ], [ %41, %56 ], [ %41, %57 ], [ %41, %66 ], [ %41, %64 ], [ %41, %55 ], [ %41, %102 ], [ %120, %150 ], [ %119, %148 ], [ %41, %68 ]
  %153 = phi %class.SkOpSpan* [ %24, %40 ], [ %24, %56 ], [ %24, %57 ], [ %24, %66 ], [ %24, %64 ], [ %24, %55 ], [ %94, %102 ], [ %94, %150 ], [ %94, %148 ], [ %24, %68 ]
  %154 = phi i8 [ %25, %40 ], [ %25, %56 ], [ %25, %57 ], [ %25, %66 ], [ %25, %64 ], [ %25, %55 ], [ %25, %102 ], [ %149, %150 ], [ %149, %148 ], [ %25, %68 ]
  %155 = inttoptr i64 %152 to %class.SkOpPtT*
  br label %22

156:                                              ; preds = %27
  %157 = load double, double* %18, align 8
  %158 = fcmp oeq double %157, 1.000000e+00
  br i1 %158, label %163, label %159

159:                                              ; preds = %156
  %160 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %12, i64 1, i32 0, i32 2
  %161 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %160, align 8
  %162 = icmp eq %class.SkOpSpanBase* %161, null
  br i1 %162, label %163, label %10

163:                                              ; preds = %156, %159
  br label %164

164:                                              ; preds = %163, %181
  %165 = phi %class.SkOpSpanBase* [ %183, %181 ], [ %8, %163 ]
  %166 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %165, i64 0, i32 0
  %167 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %165, i64 0, i32 0, i32 3
  %168 = load %class.SkOpPtT*, %class.SkOpPtT** %167, align 8
  %169 = icmp eq %class.SkOpPtT* %168, %166
  br i1 %169, label %177, label %170

170:                                              ; preds = %164, %170
  %171 = phi %class.SkOpPtT* [ %175, %170 ], [ %168, %164 ]
  %172 = tail call %class.SkOpSegment* @_ZN7SkOpPtT7segmentEv(%class.SkOpPtT* %171) #11
  %173 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %172, i64 0, i32 11
  store i8 0, i8* %173, align 8
  %174 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %171, i64 0, i32 3
  %175 = load %class.SkOpPtT*, %class.SkOpPtT** %174, align 8
  %176 = icmp eq %class.SkOpPtT* %175, %166
  br i1 %176, label %177, label %170

177:                                              ; preds = %170, %164
  %178 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %165, i64 0, i32 0, i32 0
  %179 = load double, double* %178, align 8
  %180 = fcmp oeq double %179, 1.000000e+00
  br i1 %180, label %185, label %181

181:                                              ; preds = %177
  %182 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %165, i64 1, i32 0, i32 2
  %183 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %182, align 8
  %184 = icmp eq %class.SkOpSpanBase* %183, null
  br i1 %184, label %185, label %164

185:                                              ; preds = %177, %181
  %186 = and i8 %25, 1
  %187 = icmp ne i8 %186, 0
  br label %188

188:                                              ; preds = %33, %185, %1
  %189 = phi i1 [ false, %1 ], [ %187, %185 ], [ false, %33 ]
  ret i1 %189
}

declare zeroext i1 @_ZNK8SkOpSpan19containsCoincidenceEPK11SkOpSegment(%class.SkOpSpan*, %class.SkOpSegment*) local_unnamed_addr #3

declare zeroext i1 @_ZNK12SkOpSpanBase15containsCoinEndEPK11SkOpSegment(%class.SkOpSpanBase*, %class.SkOpSegment*) local_unnamed_addr #3

declare zeroext i1 @_ZNK15SkOpCoincidence8containsEPK7SkOpPtTS2_S2_S2_(%class.SkOpCoincidence*, %class.SkOpPtT*, %class.SkOpPtT*, %class.SkOpPtT*, %class.SkOpPtT*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK11SkOpSegment18testForCoincidenceEPK7SkOpPtTS2_PK12SkOpSpanBaseS5_PKS_(%class.SkOpSegment* nocapture readonly, %class.SkOpPtT*, %class.SkOpPtT*, %class.SkOpSpanBase* nocapture readonly, %class.SkOpSpanBase* nocapture readonly, %class.SkOpSegment* nocapture readonly) local_unnamed_addr #5 align 2 {
  %7 = alloca <2 x double>, align 16
  %8 = bitcast <2 x double>* %7 to %struct.SkDPoint*
  %9 = alloca <2 x float>, align 8
  %10 = bitcast <2 x float>* %9 to %struct.SkPoint*
  %11 = alloca %class.SkIntersections, align 8
  %12 = alloca %struct.SkDCurve, align 8
  %13 = alloca %struct.SkDLine, align 16
  %14 = alloca %struct.SkDCurve, align 8
  %15 = alloca %struct.SkDPoint, align 8
  %16 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %3, i64 0, i32 0, i32 0
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 0, i32 0, i32 0
  %19 = load double, double* %18, align 8
  %20 = fadd double %17, %19
  %21 = fmul double %20, 5.000000e-01
  %22 = bitcast <2 x float>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #11
  %23 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 10
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [5 x <2 x float> (%struct.SkPoint*, float, double)*], [5 x <2 x float> (%struct.SkPoint*, float, double)*]* @_ZL13CurvePointAtT, i64 0, i64 %25
  %27 = load <2 x float> (%struct.SkPoint*, float, double)*, <2 x float> (%struct.SkPoint*, float, double)** %26, align 8
  %28 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %29 = load %struct.SkPoint*, %struct.SkPoint** %28, align 8
  %30 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 7
  %31 = load float, float* %30, align 8
  %32 = tail call <2 x float> %27(%struct.SkPoint* %29, float %31, double %21) #11
  store <2 x float> %32, <2 x float>* %9, align 8
  %33 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %1, i64 0, i32 1
  %34 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %33, %struct.SkPoint* nonnull dereferenceable(8) %10)
  br i1 %34, label %118, label %35

35:                                               ; preds = %6
  %36 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %2, i64 0, i32 1
  %37 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %36, %struct.SkPoint* nonnull dereferenceable(8) %10)
  br i1 %37, label %118, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %1, i64 0, i32 2
  %40 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %39, align 8
  %41 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %2, i64 0, i32 2
  %42 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %41, align 8
  %43 = icmp eq %class.SkOpSpanBase* %40, %42
  br i1 %43, label %122, label %44

44:                                               ; preds = %38
  %45 = bitcast %class.SkIntersections* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 464, i8* nonnull %45) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %45, i8* align 8 bitcast (%class.SkIntersections* @__const._ZNK11SkOpSegment18testForCoincidenceEPK7SkOpPtTS2_PK12SkOpSpanBaseS5_PKS_.i to i8*), i64 464, i1 false)
  %46 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %11, i64 0, i32 8
  store i8 0, i8* %46, align 1
  %47 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %11, i64 0, i32 4, i64 0
  %48 = bitcast i8* %47 to i16*
  store i16 0, i16* %48, align 4
  %49 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %11, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 0, i64 448, i1 false) #11
  store i8 1, i8* %49, align 8
  %50 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %11, i64 0, i32 5
  store i8 0, i8* %50, align 2
  %51 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %11, i64 0, i32 3, i64 0
  %52 = bitcast i16* %51 to i32*
  store i32 0, i32* %52, align 8
  %53 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %11, i64 0, i32 6
  store i8 0, i8* %53, align 1
  %54 = bitcast %struct.SkDCurve* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %54) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 -1, i64 64, i1 false)
  %55 = call zeroext i1 @_ZNK11SkOpSegment9subDivideEPK12SkOpSpanBaseS2_P8SkDCurve(%class.SkOpSegment* %0, %class.SkOpSpanBase* %3, %class.SkOpSpanBase* %4, %struct.SkDCurve* nonnull %12)
  %56 = load i32, i32* %23, align 4
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds [5 x { double, double } (%struct.SkDCurve*, double)*], [5 x { double, double } (%struct.SkDCurve*, double)*]* @_ZL15CurveDDSlopeAtT, i64 0, i64 %57
  %59 = load { double, double } (%struct.SkDCurve*, double)*, { double, double } (%struct.SkDCurve*, double)** %58, align 8
  %60 = call { double, double } %59(%struct.SkDCurve* nonnull dereferenceable(64) %12, double 5.000000e-01) #11
  %61 = extractvalue { double, double } %60, 0
  %62 = extractvalue { double, double } %60, 1
  %63 = load i32, i32* %23, align 4
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds [5 x { double, double } (%struct.SkDCurve*, double)*], [5 x { double, double } (%struct.SkDCurve*, double)*]* @_ZL15CurveDDPointAtT, i64 0, i64 %64
  %66 = load { double, double } (%struct.SkDCurve*, double)*, { double, double } (%struct.SkDCurve*, double)** %65, align 8
  %67 = call { double, double } %66(%struct.SkDCurve* nonnull dereferenceable(64) %12, double 5.000000e-01) #11
  %68 = extractvalue { double, double } %67, 0
  %69 = extractvalue { double, double } %67, 1
  %70 = bitcast %struct.SkDLine* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %70) #11
  %71 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %13, i64 0, i32 0, i64 1, i32 0
  %72 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %13, i64 0, i32 0, i64 1, i32 1
  %73 = load <2 x float>, <2 x float>* %9, align 8
  %74 = fpext <2 x float> %73 to <2 x double>
  %75 = bitcast %struct.SkDLine* %13 to <2 x double>*
  store <2 x double> %74, <2 x double>* %75, align 16
  %76 = fadd double %62, %68
  store double %76, double* %71, align 16
  %77 = fsub double %69, %61
  store double %77, double* %72, align 8
  %78 = bitcast %struct.SkDCurve* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %78) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 -1, i64 64, i1 false)
  %79 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %39, align 8
  %80 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %41, align 8
  %81 = call zeroext i1 @_ZNK11SkOpSegment9subDivideEPK12SkOpSpanBaseS2_P8SkDCurve(%class.SkOpSegment* %5, %class.SkOpSpanBase* %79, %class.SkOpSpanBase* %80, %struct.SkDCurve* nonnull %14)
  %82 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %5, i64 0, i32 10
  %83 = load i32, i32* %82, align 4
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds [5 x void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)*], [5 x void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)*]* @_ZL18CurveDIntersectRay, i64 0, i64 %84
  %86 = load void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)*, void (%struct.SkDCurve*, %struct.SkDLine*, %class.SkIntersections*)** %85, align 8
  call void %86(%struct.SkDCurve* nonnull dereferenceable(64) %14, %struct.SkDLine* nonnull dereferenceable(32) %13, %class.SkIntersections* nonnull %11) #11
  %87 = load i8, i8* %50, align 2
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %92, label %89

89:                                               ; preds = %44
  %90 = bitcast %struct.SkDPoint* %15 to i8*
  %91 = bitcast <2 x double>* %7 to i8*
  br label %94

92:                                               ; preds = %112, %44
  %93 = phi i8 [ 0, %44 ], [ %114, %112 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %78) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %70) #11
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %54) #11
  call void @llvm.lifetime.end.p0i8(i64 464, i8* nonnull %45) #11
  br label %118

94:                                               ; preds = %89, %112
  %95 = phi i8 [ %87, %89 ], [ %113, %112 ]
  %96 = phi i64 [ 0, %89 ], [ %115, %112 ]
  %97 = phi i8 [ 0, %89 ], [ %114, %112 ]
  %98 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %11, i64 0, i32 2, i64 0, i64 %96
  %99 = load double, double* %98, align 8
  %100 = fsub double 0.000000e+00, %99
  %101 = fsub double 1.000000e+00, %99
  %102 = fmul double %100, %101
  %103 = fcmp ugt double %102, 0.000000e+00
  br i1 %103, label %112, label %104

104:                                              ; preds = %94
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %90) #11
  %105 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %11, i64 0, i32 0, i64 %96
  %106 = bitcast %struct.SkDPoint* %105 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %90, i8* align 8 %106, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %91) #11
  %107 = load <2 x float>, <2 x float>* %9, align 8
  %108 = fpext <2 x float> %107 to <2 x double>
  store <2 x double> %108, <2 x double>* %7, align 16
  %109 = call zeroext i1 @_ZNK8SkDPoint19approximatelyDEqualERKS_(%struct.SkDPoint* nonnull %15, %struct.SkDPoint* nonnull dereferenceable(16) %8) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %91) #11
  %110 = select i1 %109, i8 1, i8 %97
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %90) #11
  %111 = load i8, i8* %50, align 2
  br label %112

112:                                              ; preds = %94, %104
  %113 = phi i8 [ %95, %94 ], [ %111, %104 ]
  %114 = phi i8 [ %97, %94 ], [ %110, %104 ]
  %115 = add nuw nsw i64 %96, 1
  %116 = zext i8 %113 to i64
  %117 = icmp ult i64 %115, %116
  br i1 %117, label %94, label %92

118:                                              ; preds = %92, %35, %6
  %119 = phi i8 [ 1, %6 ], [ 1, %35 ], [ %93, %92 ]
  %120 = and i8 %119, 1
  %121 = icmp ne i8 %120, 0
  br label %122

122:                                              ; preds = %38, %118
  %123 = phi i1 [ %121, %118 ], [ false, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #11
  ret i1 %123
}

declare zeroext i1 @_ZN15SkOpCoincidence6extendEPK7SkOpPtTS2_S2_S2_(%class.SkOpCoincidence*, %class.SkOpPtT*, %class.SkOpPtT*, %class.SkOpPtT*, %class.SkOpPtT*) local_unnamed_addr #3

declare void @_ZN15SkOpCoincidence3addEP7SkOpPtTS1_S1_S1_(%class.SkOpCoincidence*, %class.SkOpPtT*, %class.SkOpPtT*, %class.SkOpPtT*, %class.SkOpPtT*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment13moveMultiplesEv(%class.SkOpSegment*) local_unnamed_addr #0 align 2 {
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  %2 = bitcast %class.SkOpSegment* %0 to %class.SkOpSpanBase*
  br label %3

3:                                                ; preds = %126, %1
  %4 = phi %class.SkOpSpanBase* [ %2, %1 ], [ %128, %126 ]
  %5 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 0, i32 5
  %6 = load i32, i32* %5, align 8
  %7 = icmp slt i32 %6, 2
  br i1 %7, label %122, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 0, i32 0
  br label %10

10:                                               ; preds = %118, %8
  %11 = phi %class.SkOpPtT* [ %9, %8 ], [ %120, %118 ]
  %12 = phi i32 [ 1000000, %8 ], [ %13, %118 ]
  %13 = add nsw i32 %12, -1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %131, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %11, i64 0, i32 2
  %17 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %16, align 8
  %18 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %17, i64 0, i32 5
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, %6
  br i1 %20, label %118, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %17, i64 0, i32 0, i32 4
  %23 = load i8, i8* %22, align 8, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %118

25:                                               ; preds = %21
  %26 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %17, i64 0, i32 1
  %27 = load %class.SkOpSegment*, %class.SkOpSegment** %26, align 8
  %28 = icmp eq %class.SkOpSegment* %27, %0
  br i1 %28, label %118, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %17, i64 0, i32 0, i32 0
  br label %31

31:                                               ; preds = %29, %53
  %32 = phi %class.SkOpSpanBase* [ %17, %29 ], [ %54, %53 ]
  %33 = phi %class.SkOpSpanBase* [ %17, %29 ], [ %58, %53 ]
  br label %34

34:                                               ; preds = %31, %49
  %35 = phi %class.SkOpSpanBase* [ %38, %49 ], [ %32, %31 ]
  %36 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %35, i64 0, i32 4
  %37 = load %class.SkOpSpan*, %class.SkOpSpan** %36, align 8
  %38 = bitcast %class.SkOpSpan* %37 to %class.SkOpSpanBase*
  %39 = icmp eq %class.SkOpSpan* %37, null
  br i1 %39, label %40, label %42

40:                                               ; preds = %34
  %41 = load double, double* %30, align 8
  br label %59

42:                                               ; preds = %34
  %43 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %37, i64 0, i32 0, i32 0, i32 0
  %44 = load double, double* %43, align 8
  %45 = load double, double* %30, align 8
  %46 = fsub double %44, %45
  %47 = tail call double @llvm.fabs.f64(double %46) #11
  %48 = fcmp olt double %47, 0x3EE0000000000000
  br i1 %48, label %49, label %59

49:                                               ; preds = %42
  %50 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %37, i64 0, i32 0, i32 5
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, %6
  br i1 %52, label %34, label %53

53:                                               ; preds = %49
  %54 = bitcast %class.SkOpSpan* %37 to %class.SkOpSpanBase*
  %55 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %37, i64 0, i32 0, i32 0, i32 4
  %56 = load i8, i8* %55, align 8, !range !2
  %57 = icmp eq i8 %56, 0
  %58 = select i1 %57, %class.SkOpSpanBase* %54, %class.SkOpSpanBase* %33
  br label %31

59:                                               ; preds = %42, %40
  %60 = phi double [ %41, %40 ], [ %45, %42 ]
  br label %61

61:                                               ; preds = %83, %59
  %62 = phi double [ %75, %83 ], [ %60, %59 ]
  %63 = phi %class.SkOpSpanBase* [ %71, %83 ], [ %17, %59 ]
  %64 = phi %class.SkOpSpanBase* [ %87, %83 ], [ %17, %59 ]
  br label %65

65:                                               ; preds = %61, %79
  %66 = phi double [ %75, %79 ], [ %62, %61 ]
  %67 = phi %class.SkOpSpanBase* [ %71, %79 ], [ %63, %61 ]
  %68 = fcmp oeq double %66, 1.000000e+00
  br i1 %68, label %88, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %67, i64 1, i32 0, i32 2
  %71 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %70, align 8
  %72 = icmp eq %class.SkOpSpanBase* %71, null
  br i1 %72, label %88, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %71, i64 0, i32 0, i32 0
  %75 = load double, double* %74, align 8
  %76 = fsub double %75, %60
  %77 = tail call double @llvm.fabs.f64(double %76) #11
  %78 = fcmp olt double %77, 0x3EE0000000000000
  br i1 %78, label %79, label %88

79:                                               ; preds = %73
  %80 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %71, i64 0, i32 5
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, %6
  br i1 %82, label %65, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %71, i64 0, i32 0, i32 4
  %85 = load i8, i8* %84, align 8, !range !2
  %86 = icmp eq i8 %85, 0
  %87 = select i1 %86, %class.SkOpSpanBase* %71, %class.SkOpSpanBase* %64
  br label %61

88:                                               ; preds = %65, %69, %73
  %89 = icmp eq %class.SkOpSpanBase* %33, %64
  br i1 %89, label %118, label %90

90:                                               ; preds = %88, %111
  %91 = phi %class.SkOpSpanBase* [ %113, %111 ], [ %33, %88 ]
  %92 = icmp eq %class.SkOpSpanBase* %91, %17
  br i1 %92, label %109, label %93

93:                                               ; preds = %90
  %94 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %91, i64 0, i32 0
  %95 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %91, i64 0, i32 0, i32 3
  %96 = load %class.SkOpPtT*, %class.SkOpPtT** %95, align 8
  %97 = icmp eq %class.SkOpPtT* %96, %94
  br i1 %97, label %109, label %98

98:                                               ; preds = %93
  %99 = tail call %class.SkOpSegment* @_ZN7SkOpPtT7segmentEv(%class.SkOpPtT* %96) #11
  %100 = icmp eq %class.SkOpSegment* %99, %0
  br i1 %100, label %109, label %101

101:                                              ; preds = %98, %105
  %102 = phi %class.SkOpPtT* [ %107, %105 ], [ %9, %98 ]
  %103 = tail call %class.SkOpSegment* @_ZN7SkOpPtT7segmentEv(%class.SkOpPtT* %102) #11
  %104 = icmp eq %class.SkOpSegment* %103, %99
  br i1 %104, label %115, label %105

105:                                              ; preds = %101
  %106 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %102, i64 0, i32 3
  %107 = load %class.SkOpPtT*, %class.SkOpPtT** %106, align 8
  %108 = icmp eq %class.SkOpPtT* %107, %9
  br i1 %108, label %109, label %101

109:                                              ; preds = %105, %98, %93, %90
  %110 = icmp eq %class.SkOpSpanBase* %91, %64
  br i1 %110, label %118, label %111

111:                                              ; preds = %109
  %112 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %91, i64 1, i32 0, i32 2
  %113 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %112, align 8
  %114 = icmp eq %class.SkOpSpanBase* %113, null
  br i1 %114, label %118, label %90

115:                                              ; preds = %101
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %27) #11
  %116 = tail call zeroext i1 @_ZN12SkOpSpanBase12mergeMatchesEPS_(%class.SkOpSpanBase* %91, %class.SkOpSpanBase* %17) #11
  %117 = tail call zeroext i1 @_ZN12SkOpSpanBase6addOppEPS_(%class.SkOpSpanBase* %91, %class.SkOpSpanBase* %17) #11
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %27) #11
  br label %122

118:                                              ; preds = %111, %109, %21, %15, %25, %88
  %119 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %11, i64 0, i32 3
  %120 = load %class.SkOpPtT*, %class.SkOpPtT** %119, align 8
  %121 = icmp eq %class.SkOpPtT* %120, %9
  br i1 %121, label %122, label %10

122:                                              ; preds = %118, %3, %115
  %123 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 0, i32 0, i32 0
  %124 = load double, double* %123, align 8
  %125 = fcmp oeq double %124, 1.000000e+00
  br i1 %125, label %130, label %126

126:                                              ; preds = %122
  %127 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 1, i32 0, i32 2
  %128 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %127, align 8
  %129 = icmp eq %class.SkOpSpanBase* %128, null
  br i1 %129, label %130, label %3

130:                                              ; preds = %122, %126
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %131

131:                                              ; preds = %10, %130
  %132 = phi i1 [ true, %130 ], [ false, %10 ]
  ret i1 %132
}

declare zeroext i1 @_ZN12SkOpSpanBase6addOppEPS_(%class.SkOpSpanBase*, %class.SkOpSpanBase*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK11SkOpSegment11spansNearbyEPK12SkOpSpanBaseS2_Pb(%class.SkOpSegment* nocapture readnone, %class.SkOpSpanBase*, %class.SkOpSpanBase*, i8* nocapture) local_unnamed_addr #5 align 2 {
  %5 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0
  %6 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0
  %7 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 1, i32 0
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = extractelement <2 x float> %9, i32 0
  %11 = fcmp olt float %10, 0.000000e+00
  %12 = fsub float -0.000000e+00, %10
  %13 = select i1 %11, float %12, float %10
  %14 = extractelement <2 x float> %9, i32 1
  %15 = fcmp olt float %14, 0.000000e+00
  %16 = fsub float -0.000000e+00, %14
  %17 = select i1 %15, float %16, float %14
  %18 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %2, i64 0, i32 0, i32 1, i32 0
  %19 = bitcast float* %18 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fcmp olt <2 x float> %20, zeroinitializer
  %22 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %20
  %23 = select <2 x i1> %21, <2 x float> %22, <2 x float> %20
  %24 = extractelement <2 x float> %23, i32 0
  %25 = extractelement <2 x float> %23, i32 1
  %26 = fcmp olt float %24, %25
  %27 = select i1 %26, float %25, float %24
  %28 = fcmp olt float %17, %27
  %29 = select i1 %28, float %27, float %17
  %30 = fsub <2 x float> %9, %20
  %31 = extractelement <2 x float> %30, i32 0
  %32 = extractelement <2 x float> %30, i32 1
  %33 = fcmp ogt float %32, %31
  %34 = select i1 %33, float %32, float %31
  %35 = fcmp oeq float %34, 0.000000e+00
  br i1 %35, label %45, label %36

36:                                               ; preds = %4
  %37 = fcmp olt float %13, %29
  %38 = select i1 %37, float %29, float %13
  %39 = fpext float %38 to double
  %40 = tail call float @llvm.fabs.f32(float %34) #11
  %41 = fpext float %40 to double
  %42 = fmul double %39, 0x3EE0000000000000
  %43 = tail call double @llvm.fabs.f64(double %42) #11
  %44 = fcmp ogt double %43, %41
  br i1 %44, label %45, label %175

45:                                               ; preds = %36, %4
  br label %46

46:                                               ; preds = %45, %155
  %47 = phi float [ %156, %155 ], [ 0x47EFFFFFE0000000, %45 ]
  %48 = phi %class.SkOpPtT* [ %157, %155 ], [ null, %45 ]
  %49 = phi %class.SkOpPtT* [ %158, %155 ], [ null, %45 ]
  %50 = phi %class.SkOpPtT* [ %161, %155 ], [ %5, %45 ]
  %51 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %50, i64 0, i32 4
  %52 = load i8, i8* %51, align 8, !range !2
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %54, label %155

54:                                               ; preds = %46, %57
  %55 = phi %class.SkOpPtT* [ %59, %57 ], [ %50, %46 ]
  %56 = tail call zeroext i1 @_ZNK7SkOpPtT13ptAlreadySeenEPKS_(%class.SkOpPtT* %55, %class.SkOpPtT* %5) #11
  br i1 %56, label %57, label %61

57:                                               ; preds = %54
  %58 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %55, i64 0, i32 3
  %59 = load %class.SkOpPtT*, %class.SkOpPtT** %58, align 8
  %60 = icmp eq %class.SkOpPtT* %59, %5
  br i1 %60, label %163, label %54

61:                                               ; preds = %54
  %62 = tail call %class.SkOpSegment* @_ZNK7SkOpPtT7segmentEv(%class.SkOpPtT* %55) #11
  %63 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %55, i64 0, i32 1, i32 0
  %64 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %62, i64 0, i32 10
  %65 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %55, i64 0, i32 0
  %66 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %62, i64 0, i32 5
  %67 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %62, i64 0, i32 7
  %68 = bitcast float* %63 to <2 x float>*
  %69 = bitcast float* %63 to <2 x float>*
  br label %70

70:                                               ; preds = %146, %61
  %71 = phi float [ %47, %61 ], [ %147, %146 ]
  %72 = phi %class.SkOpPtT* [ %48, %61 ], [ %148, %146 ]
  %73 = phi %class.SkOpPtT* [ %49, %61 ], [ %149, %146 ]
  %74 = phi %class.SkOpPtT* [ %6, %61 ], [ %153, %146 ]
  %75 = phi i32 [ 100000, %61 ], [ %151, %146 ]
  %76 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %74, i64 0, i32 4
  %77 = load i8, i8* %76, align 8, !range !2
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %79, label %146

79:                                               ; preds = %70, %82
  %80 = phi %class.SkOpPtT* [ %84, %82 ], [ %74, %70 ]
  %81 = tail call zeroext i1 @_ZNK7SkOpPtT13ptAlreadySeenEPKS_(%class.SkOpPtT* %80, %class.SkOpPtT* %6) #11
  br i1 %81, label %82, label %86

82:                                               ; preds = %79
  %83 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %80, i64 0, i32 3
  %84 = load %class.SkOpPtT*, %class.SkOpPtT** %83, align 8
  %85 = icmp eq %class.SkOpPtT* %84, %6
  br i1 %85, label %155, label %79

86:                                               ; preds = %79
  %87 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %80, i64 0, i32 1, i32 0
  %88 = load <2 x float>, <2 x float>* %68, align 4
  %89 = bitcast float* %87 to <2 x float>*
  %90 = load <2 x float>, <2 x float>* %89, align 4
  %91 = fsub <2 x float> %88, %90
  %92 = fmul <2 x float> %91, %91
  %93 = extractelement <2 x float> %92, i32 0
  %94 = extractelement <2 x float> %92, i32 1
  %95 = fadd float %93, %94
  %96 = fcmp ogt float %71, %95
  br i1 %96, label %97, label %140

97:                                               ; preds = %86
  %98 = tail call %class.SkOpSegment* @_ZNK7SkOpPtT7segmentEv(%class.SkOpPtT* %80) #11
  %99 = icmp eq %class.SkOpSegment* %62, %98
  br i1 %99, label %100, label %139

100:                                              ; preds = %97
  %101 = load i32, i32* %64, align 4
  %102 = icmp eq i32 %101, 1
  br i1 %102, label %139, label %103

103:                                              ; preds = %100
  %104 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %80, i64 0, i32 0
  %105 = load double, double* %104, align 8
  %106 = load double, double* %65, align 8
  %107 = fadd double %105, %106
  %108 = fmul double %107, 5.000000e-01
  %109 = zext i32 %101 to i64
  %110 = getelementptr inbounds [5 x <2 x float> (%struct.SkPoint*, float, double)*], [5 x <2 x float> (%struct.SkPoint*, float, double)*]* @_ZL13CurvePointAtT, i64 0, i64 %109
  %111 = load <2 x float> (%struct.SkPoint*, float, double)*, <2 x float> (%struct.SkPoint*, float, double)** %110, align 8
  %112 = load %struct.SkPoint*, %struct.SkPoint** %66, align 8
  %113 = load float, float* %67, align 8
  %114 = tail call <2 x float> %111(%struct.SkPoint* %112, float %113, double %108) #11
  %115 = bitcast float* %87 to <2 x float>*
  %116 = load <2 x float>, <2 x float>* %115, align 4
  %117 = load <2 x float>, <2 x float>* %69, align 4
  %118 = fsub <2 x float> %117, %116
  %119 = fmul <2 x float> %118, %118
  %120 = extractelement <2 x float> %119, i32 0
  %121 = extractelement <2 x float> %119, i32 1
  %122 = fadd float %120, %121
  %123 = fmul float %122, 2.000000e+00
  %124 = fcmp olt float %123, 0x3E90000000000000
  %125 = select i1 %124, float 0x3E90000000000000, float %123
  %126 = fsub <2 x float> %114, %117
  %127 = fmul <2 x float> %126, %126
  %128 = extractelement <2 x float> %127, i32 0
  %129 = extractelement <2 x float> %127, i32 1
  %130 = fadd float %128, %129
  %131 = fcmp ogt float %130, %125
  br i1 %131, label %140, label %132

132:                                              ; preds = %103
  %133 = fsub <2 x float> %114, %116
  %134 = fmul <2 x float> %133, %133
  %135 = extractelement <2 x float> %134, i32 0
  %136 = extractelement <2 x float> %134, i32 1
  %137 = fadd float %135, %136
  %138 = fcmp ogt float %137, %125
  br i1 %138, label %140, label %139

139:                                              ; preds = %100, %97, %132
  br label %140

140:                                              ; preds = %103, %139, %132, %86
  %141 = phi float [ %95, %139 ], [ %71, %132 ], [ %71, %86 ], [ %71, %103 ]
  %142 = phi %class.SkOpPtT* [ %55, %139 ], [ %72, %132 ], [ %72, %86 ], [ %72, %103 ]
  %143 = phi %class.SkOpPtT* [ %80, %139 ], [ %73, %132 ], [ %73, %86 ], [ %73, %103 ]
  %144 = add nsw i32 %75, -1
  %145 = icmp sgt i32 %75, 1
  br i1 %145, label %146, label %177

146:                                              ; preds = %70, %140
  %147 = phi float [ %71, %70 ], [ %141, %140 ]
  %148 = phi %class.SkOpPtT* [ %72, %70 ], [ %142, %140 ]
  %149 = phi %class.SkOpPtT* [ %73, %70 ], [ %143, %140 ]
  %150 = phi %class.SkOpPtT* [ %74, %70 ], [ %80, %140 ]
  %151 = phi i32 [ %75, %70 ], [ %144, %140 ]
  %152 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %150, i64 0, i32 3
  %153 = load %class.SkOpPtT*, %class.SkOpPtT** %152, align 8
  %154 = icmp eq %class.SkOpPtT* %153, %6
  br i1 %154, label %155, label %70

155:                                              ; preds = %146, %82, %46
  %156 = phi float [ %47, %46 ], [ %71, %82 ], [ %147, %146 ]
  %157 = phi %class.SkOpPtT* [ %48, %46 ], [ %72, %82 ], [ %148, %146 ]
  %158 = phi %class.SkOpPtT* [ %49, %46 ], [ %73, %82 ], [ %149, %146 ]
  %159 = phi %class.SkOpPtT* [ %50, %46 ], [ %55, %82 ], [ %55, %146 ]
  %160 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %159, i64 0, i32 3
  %161 = load %class.SkOpPtT*, %class.SkOpPtT** %160, align 8
  %162 = icmp eq %class.SkOpPtT* %161, %5
  br i1 %162, label %163, label %46

163:                                              ; preds = %155, %57
  %164 = phi %class.SkOpPtT* [ %48, %57 ], [ %157, %155 ]
  %165 = phi %class.SkOpPtT* [ %49, %57 ], [ %158, %155 ]
  %166 = icmp eq %class.SkOpPtT* %165, null
  br i1 %166, label %175, label %167

167:                                              ; preds = %163
  %168 = tail call %class.SkOpSegment* @_ZNK7SkOpPtT7segmentEv(%class.SkOpPtT* %164) #11
  %169 = tail call %class.SkOpSegment* @_ZNK7SkOpPtT7segmentEv(%class.SkOpPtT* nonnull %165) #11
  %170 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %165, i64 0, i32 0
  %171 = load double, double* %170, align 8
  %172 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %165, i64 0, i32 1
  %173 = tail call zeroext i1 @_ZNK11SkOpSegment5matchEPK7SkOpPtTPKS_dRK7SkPoint(%class.SkOpSegment* %168, %class.SkOpPtT* %164, %class.SkOpSegment* %169, double %171, %struct.SkPoint* dereferenceable(8) %172)
  %174 = zext i1 %173 to i8
  br label %175

175:                                              ; preds = %167, %163, %36
  %176 = phi i8 [ 0, %36 ], [ 0, %163 ], [ %174, %167 ]
  store i8 %176, i8* %3, align 1
  br label %177

177:                                              ; preds = %140, %175
  %178 = phi i1 [ true, %175 ], [ false, %140 ]
  ret i1 %178
}

declare zeroext i1 @_ZNK7SkOpPtT13ptAlreadySeenEPKS_(%class.SkOpPtT*, %class.SkOpPtT*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment10moveNearbyEv(%class.SkOpSegment*) local_unnamed_addr #0 align 2 {
  %2 = alloca i8, align 1
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  %3 = bitcast %class.SkOpSegment* %0 to %class.SkOpSpanBase*
  br label %4

4:                                                ; preds = %77, %1
  %5 = phi %class.SkOpSpanBase* [ %3, %1 ], [ %80, %77 ]
  %6 = phi i32 [ 9999, %1 ], [ %78, %77 ]
  %7 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %5, i64 0, i32 0
  %8 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %5, i64 0, i32 0, i32 3
  %9 = load %class.SkOpPtT*, %class.SkOpPtT** %8, align 8
  %10 = icmp eq %class.SkOpPtT* %9, %7
  br i1 %10, label %77, label %11

11:                                               ; preds = %4, %73
  %12 = phi %class.SkOpPtT* [ %75, %73 ], [ %9, %4 ]
  %13 = phi i32 [ %14, %73 ], [ %6, %4 ]
  %14 = add nsw i32 %13, -1
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %140, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %12, i64 0, i32 2
  %18 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %17, align 8
  %19 = tail call %class.SkOpSegment* @_ZN7SkOpPtT7segmentEv(%class.SkOpPtT* %12) #11
  %20 = icmp eq %class.SkOpSegment* %19, %0
  br i1 %20, label %21, label %73

21:                                               ; preds = %16
  %22 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %12, i64 0, i32 4
  %23 = load i8, i8* %22, align 8, !range !2
  %24 = icmp eq i8 %23, 0
  %25 = icmp ne %class.SkOpSpanBase* %18, %5
  %26 = and i1 %25, %24
  %27 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %18, i64 0, i32 0
  %28 = icmp eq %class.SkOpPtT* %27, %12
  %29 = and i1 %28, %26
  br i1 %29, label %30, label %73

30:                                               ; preds = %21
  %31 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %18, i64 0, i32 0, i32 0
  %32 = load double, double* %31, align 8
  %33 = fcmp oeq double %32, 1.000000e+00
  br i1 %33, label %34, label %67

34:                                               ; preds = %30
  %35 = icmp eq %class.SkOpSpanBase* %5, %3
  br i1 %35, label %36, label %65

36:                                               ; preds = %34
  %37 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0
  %38 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  br label %39

39:                                               ; preds = %49, %36
  %40 = phi %class.SkOpSpan* [ %37, %36 ], [ %56, %49 ]
  %41 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %40, i64 0, i32 7
  store i32 0, i32* %41, align 8
  %42 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %40, i64 0, i32 8
  store i32 0, i32* %42, align 4
  %43 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %40, i64 0, i32 10
  %44 = load i8, i8* %43, align 4, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %39
  store i8 1, i8* %43, align 4
  %47 = load i32, i32* %38, align 8
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %38, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %49

49:                                               ; preds = %46, %39
  %50 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %40, i64 0, i32 4
  %51 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %50, align 8
  %52 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %51, i64 0, i32 0, i32 0
  %53 = load double, double* %52, align 8
  %54 = fcmp oeq double %53, 1.000000e+00
  %55 = bitcast %class.SkOpSpanBase* %51 to %class.SkOpSpan*
  %56 = select i1 %54, %class.SkOpSpan* null, %class.SkOpSpan* %55
  %57 = icmp eq %class.SkOpSpan* %56, null
  br i1 %57, label %58, label %39

58:                                               ; preds = %49
  %59 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %60 = load %class.SkOpContour*, %class.SkOpContour** %59, align 8
  %61 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %60, i64 0, i32 0
  %62 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %61, align 8
  %63 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %62, i64 0, i32 1
  %64 = load %class.SkOpCoincidence*, %class.SkOpCoincidence** %63, align 8
  tail call void @_ZN15SkOpCoincidence7releaseEPK11SkOpSegment(%class.SkOpCoincidence* %64, %class.SkOpSegment* %0) #11
  br label %140

65:                                               ; preds = %34
  %66 = bitcast %class.SkOpSpanBase* %5 to %class.SkOpSpan*
  tail call void @_ZN8SkOpSpan7releaseEPK7SkOpPtT(%class.SkOpSpan* %66, %class.SkOpPtT* %12) #11
  br label %77

67:                                               ; preds = %30
  %68 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %18, i64 0, i32 4
  %69 = load %class.SkOpSpan*, %class.SkOpSpan** %68, align 8
  %70 = icmp eq %class.SkOpSpan* %69, null
  br i1 %70, label %77, label %71

71:                                               ; preds = %67
  %72 = bitcast %class.SkOpSpanBase* %18 to %class.SkOpSpan*
  tail call void @_ZN8SkOpSpan7releaseEPK7SkOpPtT(%class.SkOpSpan* %72, %class.SkOpPtT* %7) #11
  br label %77

73:                                               ; preds = %21, %16
  %74 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %12, i64 0, i32 3
  %75 = load %class.SkOpPtT*, %class.SkOpPtT** %74, align 8
  %76 = icmp eq %class.SkOpPtT* %75, %7
  br i1 %76, label %77, label %11

77:                                               ; preds = %73, %4, %65, %71, %67
  %78 = phi i32 [ %14, %67 ], [ %14, %71 ], [ %14, %65 ], [ %6, %4 ], [ %14, %73 ]
  %79 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %5, i64 1, i32 0, i32 2
  %80 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %79, align 8
  %81 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %80, i64 0, i32 0, i32 0
  %82 = load double, double* %81, align 8
  %83 = fcmp oeq double %82, 1.000000e+00
  br i1 %83, label %84, label %4

84:                                               ; preds = %77, %135
  %85 = phi %class.SkOpSpanBase* [ %88, %135 ], [ %3, %77 ]
  %86 = bitcast %class.SkOpSpanBase* %85 to %class.SkOpSpan*
  %87 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %85, i64 1, i32 0, i32 2
  %88 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %87, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %2) #11
  store i8 -86, i8* %2, align 1
  %89 = call zeroext i1 @_ZNK11SkOpSegment11spansNearbyEPK12SkOpSpanBaseS2_Pb(%class.SkOpSegment* undef, %class.SkOpSpanBase* %85, %class.SkOpSpanBase* %88, i8* nonnull %2)
  br i1 %89, label %90, label %133

90:                                               ; preds = %84
  %91 = load i8, i8* %2, align 1, !range !2
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %135, label %93

93:                                               ; preds = %90
  %94 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %88, i64 0, i32 0, i32 0
  %95 = load double, double* %94, align 8
  %96 = fcmp oeq double %95, 1.000000e+00
  br i1 %96, label %97, label %131

97:                                               ; preds = %93
  %98 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %85, i64 0, i32 4
  %99 = load %class.SkOpSpan*, %class.SkOpSpan** %98, align 8
  %100 = icmp eq %class.SkOpSpan* %99, null
  br i1 %100, label %102, label %101

101:                                              ; preds = %97
  tail call void @_ZN12SkOpSpanBase5mergeEP8SkOpSpan(%class.SkOpSpanBase* %88, %class.SkOpSpan* %86) #11
  br label %135

102:                                              ; preds = %97
  %103 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0
  %104 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 9
  br label %105

105:                                              ; preds = %115, %102
  %106 = phi %class.SkOpSpan* [ %103, %102 ], [ %122, %115 ]
  %107 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %106, i64 0, i32 7
  store i32 0, i32* %107, align 8
  %108 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %106, i64 0, i32 8
  store i32 0, i32* %108, align 4
  %109 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %106, i64 0, i32 10
  %110 = load i8, i8* %109, align 4, !range !2
  %111 = icmp eq i8 %110, 0
  br i1 %111, label %112, label %115

112:                                              ; preds = %105
  store i8 1, i8* %109, align 4
  %113 = load i32, i32* %104, align 8
  %114 = add nsw i32 %113, 1
  store i32 %114, i32* %104, align 8
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %115

115:                                              ; preds = %112, %105
  %116 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %106, i64 0, i32 4
  %117 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %116, align 8
  %118 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %117, i64 0, i32 0, i32 0
  %119 = load double, double* %118, align 8
  %120 = fcmp oeq double %119, 1.000000e+00
  %121 = bitcast %class.SkOpSpanBase* %117 to %class.SkOpSpan*
  %122 = select i1 %120, %class.SkOpSpan* null, %class.SkOpSpan* %121
  %123 = icmp eq %class.SkOpSpan* %122, null
  br i1 %123, label %124, label %105

124:                                              ; preds = %115
  %125 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %126 = load %class.SkOpContour*, %class.SkOpContour** %125, align 8
  %127 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %126, i64 0, i32 0
  %128 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %127, align 8
  %129 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %128, i64 0, i32 1
  %130 = load %class.SkOpCoincidence*, %class.SkOpCoincidence** %129, align 8
  tail call void @_ZN15SkOpCoincidence7releaseEPK11SkOpSegment(%class.SkOpCoincidence* %130, %class.SkOpSegment* %0) #11
  br label %133

131:                                              ; preds = %93
  %132 = bitcast %class.SkOpSpanBase* %88 to %class.SkOpSpan*
  tail call void @_ZN12SkOpSpanBase5mergeEP8SkOpSpan(%class.SkOpSpanBase* %85, %class.SkOpSpan* %132) #11
  br label %135

133:                                              ; preds = %84, %124
  %134 = phi i1 [ true, %124 ], [ false, %84 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %2) #11
  br label %140

135:                                              ; preds = %90, %101, %131
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %2) #11
  %136 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %88, i64 0, i32 0, i32 0
  %137 = load double, double* %136, align 8
  %138 = fcmp oeq double %137, 1.000000e+00
  br i1 %138, label %139, label %84

139:                                              ; preds = %135
  tail call void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* %0) #11
  br label %140

140:                                              ; preds = %11, %58, %133, %139
  %141 = phi i1 [ true, %139 ], [ %134, %133 ], [ true, %58 ], [ false, %11 ]
  ret i1 %141
}

declare void @_ZN8SkOpSpan7releaseEPK7SkOpPtT(%class.SkOpSpan*, %class.SkOpPtT*) local_unnamed_addr #3

declare void @_ZN12SkOpSpanBase5mergeEP8SkOpSpan(%class.SkOpSpanBase*, %class.SkOpSpan*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK11SkOpSegment6oppXorEv(%class.SkOpSegment* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %3 = load %class.SkOpContour*, %class.SkOpContour** %2, align 8
  %4 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %3, i64 0, i32 12
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp ne i8 %5, 0
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpSegment10sortAnglesEv(%class.SkOpSegment*) local_unnamed_addr #0 align 2 {
  %2 = bitcast %class.SkOpSegment* %0 to %class.SkOpSpanBase*
  br label %3

3:                                                ; preds = %72, %1
  %4 = phi %class.SkOpSpanBase* [ %2, %1 ], [ %74, %72 ]
  %5 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 0, i32 3
  %6 = load %class.SkOpAngle*, %class.SkOpAngle** %5, align 8
  %7 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 0, i32 0, i32 0
  %8 = load double, double* %7, align 8
  %9 = fcmp oeq double %8, 1.000000e+00
  br i1 %9, label %14, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 1, i32 0, i32 1
  %12 = bitcast %struct.SkPoint* %11 to %class.SkOpAngle**
  %13 = load %class.SkOpAngle*, %class.SkOpAngle** %12, align 8
  br label %14

14:                                               ; preds = %3, %10
  %15 = phi %class.SkOpAngle* [ %13, %10 ], [ null, %3 ]
  %16 = icmp ne %class.SkOpAngle* %6, null
  %17 = icmp ne %class.SkOpAngle* %15, null
  %18 = or i1 %16, %17
  br i1 %18, label %19, label %69

19:                                               ; preds = %14
  %20 = and i1 %16, %17
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = tail call zeroext i1 @_ZN9SkOpAngle6insertEPS_(%class.SkOpAngle* nonnull %6, %class.SkOpAngle* nonnull %15) #11
  br i1 %22, label %25, label %76

23:                                               ; preds = %19
  %24 = select i1 %16, %class.SkOpAngle* %6, %class.SkOpAngle* %15
  br label %25

25:                                               ; preds = %23, %21
  %26 = phi %class.SkOpAngle* [ %6, %21 ], [ %24, %23 ]
  %27 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 0, i32 0
  br label %28

28:                                               ; preds = %58, %25
  %29 = phi %class.SkOpPtT* [ %27, %25 ], [ %60, %58 ]
  %30 = phi i32 [ 1000000, %25 ], [ %31, %58 ]
  %31 = add nsw i32 %30, -1
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %76, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %29, i64 0, i32 2
  %35 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %34, align 8
  %36 = icmp eq %class.SkOpSpanBase* %35, %4
  br i1 %36, label %58, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %35, i64 0, i32 3
  %39 = load %class.SkOpAngle*, %class.SkOpAngle** %38, align 8
  %40 = icmp eq %class.SkOpAngle* %39, null
  br i1 %40, label %45, label %41

41:                                               ; preds = %37
  %42 = tail call zeroext i1 @_ZNK9SkOpAngle12loopContainsEPKS_(%class.SkOpAngle* nonnull %39, %class.SkOpAngle* %26) #11
  br i1 %42, label %45, label %43

43:                                               ; preds = %41
  %44 = tail call zeroext i1 @_ZN9SkOpAngle6insertEPS_(%class.SkOpAngle* %26, %class.SkOpAngle* nonnull %39) #11
  br label %45

45:                                               ; preds = %37, %41, %43
  %46 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %35, i64 0, i32 0, i32 0
  %47 = load double, double* %46, align 8
  %48 = fcmp oeq double %47, 1.000000e+00
  br i1 %48, label %58, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %35, i64 1, i32 0, i32 1
  %51 = bitcast %struct.SkPoint* %50 to %class.SkOpAngle**
  %52 = load %class.SkOpAngle*, %class.SkOpAngle** %51, align 8
  %53 = icmp eq %class.SkOpAngle* %52, null
  br i1 %53, label %58, label %54

54:                                               ; preds = %49
  %55 = tail call zeroext i1 @_ZNK9SkOpAngle12loopContainsEPKS_(%class.SkOpAngle* nonnull %52, %class.SkOpAngle* %26) #11
  br i1 %55, label %58, label %56

56:                                               ; preds = %54
  %57 = tail call zeroext i1 @_ZN9SkOpAngle6insertEPS_(%class.SkOpAngle* %26, %class.SkOpAngle* nonnull %52) #11
  br label %58

58:                                               ; preds = %45, %54, %56, %49, %33
  %59 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %29, i64 0, i32 3
  %60 = load %class.SkOpPtT*, %class.SkOpPtT** %59, align 8
  %61 = icmp eq %class.SkOpPtT* %60, %27
  br i1 %61, label %62, label %28

62:                                               ; preds = %58
  %63 = tail call i32 @_ZNK9SkOpAngle9loopCountEv(%class.SkOpAngle* %26) #11
  %64 = icmp eq i32 %63, 1
  br i1 %64, label %65, label %69

65:                                               ; preds = %62
  store %class.SkOpAngle* null, %class.SkOpAngle** %5, align 8
  br i1 %17, label %66, label %69

66:                                               ; preds = %65
  %67 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 1, i32 0, i32 1
  %68 = bitcast %struct.SkPoint* %67 to %class.SkOpAngle**
  store %class.SkOpAngle* null, %class.SkOpAngle** %68, align 8
  br label %69

69:                                               ; preds = %62, %66, %65, %14
  %70 = load double, double* %7, align 8
  %71 = fcmp oeq double %70, 1.000000e+00
  br i1 %71, label %76, label %72

72:                                               ; preds = %69
  %73 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 1, i32 0, i32 2
  %74 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %73, align 8
  %75 = icmp eq %class.SkOpSpanBase* %74, null
  br i1 %75, label %76, label %3

76:                                               ; preds = %21, %69, %72, %28
  %77 = phi i1 [ false, %28 ], [ false, %21 ], [ true, %69 ], [ true, %72 ]
  ret i1 %77
}

declare zeroext i1 @_ZN9SkOpAngle6insertEPS_(%class.SkOpAngle*, %class.SkOpAngle*) local_unnamed_addr #3

declare zeroext i1 @_ZNK9SkOpAngle12loopContainsEPKS_(%class.SkOpAngle*, %class.SkOpAngle*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.SkOpSpan* @_ZN11SkOpSegment10undoneSpanEv(%class.SkOpSegment* readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0
  br label %3

3:                                                ; preds = %14, %1
  %4 = phi %class.SkOpSpan* [ %2, %1 ], [ %15, %14 ]
  %5 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %4, i64 0, i32 4
  %6 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %5, align 8
  %7 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %4, i64 0, i32 10
  %8 = load i8, i8* %7, align 4, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %17, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 0, i32 0, i32 0
  %12 = load double, double* %11, align 8
  %13 = fcmp oeq double %12, 1.000000e+00
  br i1 %13, label %17, label %14

14:                                               ; preds = %10
  %15 = bitcast %class.SkOpSpanBase* %6 to %class.SkOpSpan*
  %16 = icmp eq %class.SkOpSpanBase* %6, null
  br i1 %16, label %17, label %3

17:                                               ; preds = %3, %10, %14
  %18 = phi %class.SkOpSpan* [ %4, %3 ], [ null, %14 ], [ null, %10 ]
  ret %class.SkOpSpan* %18
}

declare i32 @_ZN8SkOpSpan14computeWindSumEv(%class.SkOpSpan*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK11SkOpSegment7windSumEPK9SkOpAngle(%class.SkOpSegment* nocapture readnone, %class.SkOpAngle* nocapture readonly) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 6
  %4 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %3, align 8
  %5 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 7
  %6 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %5, align 8
  %7 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 0, i32 0, i32 0
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 0, i32 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = fcmp olt double %8, %10
  %12 = select i1 %11, %class.SkOpSpanBase* %4, %class.SkOpSpanBase* %6
  %13 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %12, i64 1, i32 0, i32 3
  %14 = bitcast %class.SkOpPtT** %13 to i32*
  %15 = load i32, i32* %14, align 8
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define internal <2 x float> @_ZL13fline_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #5 {
  %4 = alloca %struct.SkDLine, align 16
  %5 = bitcast %struct.SkDLine* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #11
  %6 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %4, i64 0, i32 0, i64 1, i32 0
  %7 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = bitcast %struct.SkDLine* %4 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 16
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %12 = bitcast float* %11 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %6 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = call { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine* nonnull %4, double %2) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #11
  %17 = extractvalue { double, double } %16, 0
  %18 = extractvalue { double, double } %16, 1
  %19 = fptrunc double %17 to float
  %20 = insertelement <2 x float> undef, float %19, i32 0
  %21 = fptrunc double %18 to float
  %22 = insertelement <2 x float> %20, float %21, i32 1
  ret <2 x float> %22
}

; Function Attrs: nounwind ssp uwtable
define internal <2 x float> @_ZL13fquad_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #5 {
  %4 = alloca %struct.SkDQuad, align 16
  %5 = bitcast %struct.SkDQuad* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #11
  %6 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %4, i64 0, i32 0, i64 1, i32 0
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %4, i64 0, i32 0, i64 2, i32 0
  %8 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = bitcast %struct.SkDQuad* %4 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 16
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %6 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %7 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* nonnull %4, double %2) #11
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #11
  %23 = extractvalue { double, double } %22, 0
  %24 = extractvalue { double, double } %22, 1
  %25 = fptrunc double %23 to float
  %26 = insertelement <2 x float> undef, float %25, i32 0
  %27 = fptrunc double %24 to float
  %28 = insertelement <2 x float> %26, float %27, i32 1
  ret <2 x float> %28
}

; Function Attrs: nounwind ssp uwtable
define internal <2 x float> @_ZL14fconic_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #5 {
  %4 = alloca %struct.SkDConic, align 16
  %5 = bitcast %struct.SkDConic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %5) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 8 bitcast ({ %struct.SkDQuad, float, [4 x i8] }* @__const._ZN8SkDConic9SubDivideEPK7SkPointfRK8SkDPointS5_ddPf.conic to i8*), i64 56, i1 false) #11
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = bitcast %struct.SkDConic* %4 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 16
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 0, i32 0, i64 1, i32 0
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %17 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %16 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %17 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 1
  store float %1, float* %22, align 16
  %23 = call { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic* nonnull %4, double %2) #11
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %5) #11
  %24 = extractvalue { double, double } %23, 0
  %25 = extractvalue { double, double } %23, 1
  %26 = fptrunc double %24 to float
  %27 = insertelement <2 x float> undef, float %26, i32 0
  %28 = fptrunc double %25 to float
  %29 = insertelement <2 x float> %27, float %28, i32 1
  ret <2 x float> %29
}

; Function Attrs: nounwind ssp uwtable
define internal <2 x float> @_ZL14fcubic_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #5 {
  %4 = alloca %struct.SkDCubic, align 16
  %5 = bitcast %struct.SkDCubic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #11
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = bitcast %struct.SkDCubic* %4 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 16
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 1, i32 0
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %17 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %16 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %17 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %23 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 3, i32 0
  %24 = bitcast float* %22 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = fpext <2 x float> %25 to <2 x double>
  %27 = bitcast double* %23 to <2 x double>*
  store <2 x double> %26, <2 x double>* %27, align 16
  %28 = call { double, double } @_ZNK8SkDCubic5ptAtTEd(%struct.SkDCubic* nonnull %4, double %2) #11
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #11
  %29 = extractvalue { double, double } %28, 0
  %30 = extractvalue { double, double } %28, 1
  %31 = fptrunc double %29 to float
  %32 = insertelement <2 x float> undef, float %31, i32 0
  %33 = fptrunc double %30 to float
  %34 = insertelement <2 x float> %32, float %33, i32 1
  ret <2 x float> %34
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL13dline_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDLine, align 16
  %5 = bitcast %struct.SkDLine* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #11
  %6 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %4, i64 0, i32 0, i64 1, i32 0
  %7 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = bitcast %struct.SkDLine* %4 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 16
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %12 = bitcast float* %11 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %6 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = call { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine* nonnull %4, double %2) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #11
  ret { double, double } %16
}

declare { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine*, double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL13dquad_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDQuad, align 16
  %5 = bitcast %struct.SkDQuad* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #11
  %6 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %4, i64 0, i32 0, i64 1, i32 0
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %4, i64 0, i32 0, i64 2, i32 0
  %8 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = bitcast %struct.SkDQuad* %4 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 16
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %6 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %7 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* nonnull %4, double %2) #11
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #11
  ret { double, double } %22
}

declare { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad*, double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL14dconic_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDConic, align 16
  %5 = bitcast %struct.SkDConic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %5) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 8 bitcast ({ %struct.SkDQuad, float, [4 x i8] }* @__const._ZN8SkDConic9SubDivideEPK7SkPointfRK8SkDPointS5_ddPf.conic to i8*), i64 56, i1 false)
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = bitcast %struct.SkDConic* %4 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 16
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 0, i32 0, i64 1, i32 0
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %17 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %16 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %17 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 1
  store float %1, float* %22, align 16
  %23 = call { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic* nonnull %4, double %2) #11
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %5) #11
  ret { double, double } %23
}

declare { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic*, double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL14dcubic_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDCubic, align 16
  %5 = bitcast %struct.SkDCubic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #11
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = bitcast %struct.SkDCubic* %4 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 16
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 1, i32 0
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %17 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %16 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %17 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %23 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 3, i32 0
  %24 = bitcast float* %22 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = fpext <2 x float> %25 to <2 x double>
  %27 = bitcast double* %23 to <2 x double>*
  store <2 x double> %26, <2 x double>* %27, align 16
  %28 = call { double, double } @_ZNK8SkDCubic5ptAtTEd(%struct.SkDCubic* nonnull %4, double %2) #11
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #11
  ret { double, double } %28
}

declare { double, double } @_ZNK8SkDCubic5ptAtTEd(%struct.SkDCubic*, double) local_unnamed_addr #3

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #3

declare void @_ZNK7SkOpPtT13debugValidateEv(%class.SkOpPtT*) local_unnamed_addr #3

; Function Attrs: nounwind readonly ssp uwtable
define internal { double, double } @_ZL15dline_dxdy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #7 {
  %4 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = fpext <2 x float> %5 to <2 x double>
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = fsub <2 x double> %10, %6
  %12 = extractelement <2 x double> %11, i32 0
  %13 = insertvalue { double, double } undef, double %12, 0
  %14 = extractelement <2 x double> %11, i32 1
  %15 = insertvalue { double, double } %13, double %14, 1
  ret { double, double } %15
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL15dquad_dxdy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDQuad, align 16
  %5 = bitcast %struct.SkDQuad* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #11
  %6 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %4, i64 0, i32 0, i64 1, i32 0
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %4, i64 0, i32 0, i64 2, i32 0
  %8 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = bitcast %struct.SkDQuad* %4 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 16
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %6 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %7 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = call { double, double } @_ZNK7SkDQuad7dxdyAtTEd(%struct.SkDQuad* nonnull %4, double %2) #11
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #11
  ret { double, double } %22
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL16dconic_dxdy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDConic, align 16
  %5 = bitcast %struct.SkDConic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %5) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 8 bitcast ({ %struct.SkDQuad, float, [4 x i8] }* @__const._ZN8SkDConic9SubDivideEPK7SkPointfRK8SkDPointS5_ddPf.conic to i8*), i64 56, i1 false)
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = bitcast %struct.SkDConic* %4 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 16
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 0, i32 0, i64 1, i32 0
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %17 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %16 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %17 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 1
  store float %1, float* %22, align 16
  %23 = call { double, double } @_ZNK8SkDConic7dxdyAtTEd(%struct.SkDConic* nonnull %4, double %2) #11
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %5) #11
  ret { double, double } %23
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL16dcubic_dxdy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDCubic, align 16
  %5 = bitcast %struct.SkDCubic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #11
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = bitcast %struct.SkDCubic* %4 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 16
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 1, i32 0
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %17 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %16 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %17 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %23 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 3, i32 0
  %24 = bitcast float* %22 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = fpext <2 x float> %25 to <2 x double>
  %27 = bitcast double* %23 to <2 x double>*
  store <2 x double> %26, <2 x double>* %27, align 16
  %28 = call { double, double } @_ZNK8SkDCubic7dxdyAtTEd(%struct.SkDCubic* nonnull %4, double %2) #11
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #11
  ret { double, double } %28
}

declare { double, double } @_ZNK7SkDQuad7dxdyAtTEd(%struct.SkDQuad*, double) local_unnamed_addr #3

declare { double, double } @_ZNK8SkDConic7dxdyAtTEd(%struct.SkDConic*, double) local_unnamed_addr #3

declare { double, double } @_ZNK8SkDCubic7dxdyAtTEd(%struct.SkDCubic*, double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL18line_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections(%struct.SkPoint* nocapture readonly, float, %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %5 = alloca %struct.SkDLine, align 16
  %6 = bitcast %struct.SkDLine* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #11
  %7 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %5, i64 0, i32 0, i64 1, i32 0
  %8 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = bitcast %struct.SkDLine* %5 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 16
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %7 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = call i32 @_ZN15SkIntersections12intersectRayERK7SkDLineS2_(%class.SkIntersections* %3, %struct.SkDLine* nonnull dereferenceable(32) %5, %struct.SkDLine* dereferenceable(32) %2) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL18quad_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections(%struct.SkPoint* nocapture readonly, float, %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %5 = alloca %struct.SkDQuad, align 16
  %6 = bitcast %struct.SkDQuad* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #11
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %5, i64 0, i32 0, i64 1, i32 0
  %8 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %5, i64 0, i32 0, i64 2, i32 0
  %9 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %11 = fpext <2 x float> %10 to <2 x double>
  %12 = bitcast %struct.SkDQuad* %5 to <2 x double>*
  store <2 x double> %11, <2 x double>* %12, align 16
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %14 = bitcast float* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = fpext <2 x float> %15 to <2 x double>
  %17 = bitcast double* %7 to <2 x double>*
  store <2 x double> %16, <2 x double>* %17, align 16
  %18 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %19 = bitcast float* %18 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fpext <2 x float> %20 to <2 x double>
  %22 = bitcast double* %8 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 16
  %23 = call i32 @_ZN15SkIntersections12intersectRayERK7SkDQuadRK7SkDLine(%class.SkIntersections* %3, %struct.SkDQuad* nonnull dereferenceable(48) %5, %struct.SkDLine* dereferenceable(32) %2) #11
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL19conic_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections(%struct.SkPoint* nocapture readonly, float, %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %5 = alloca %struct.SkDConic, align 16
  %6 = bitcast %struct.SkDConic* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %6) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %6, i8* align 8 bitcast ({ %struct.SkDQuad, float, [4 x i8] }* @__const._ZN8SkDConic9SubDivideEPK7SkPointfRK8SkDPointS5_ddPf.conic to i8*), i64 56, i1 false)
  %7 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = bitcast %struct.SkDConic* %5 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 16
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %12 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %5, i64 0, i32 0, i32 0, i64 1, i32 0
  %13 = bitcast float* %11 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %12 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %5, i64 0, i32 0, i32 0, i64 2, i32 0
  %19 = bitcast float* %17 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fpext <2 x float> %20 to <2 x double>
  %22 = bitcast double* %18 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 16
  %23 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %5, i64 0, i32 1
  store float %1, float* %23, align 16
  %24 = call i32 @_ZN15SkIntersections12intersectRayERK8SkDConicRK7SkDLine(%class.SkIntersections* %3, %struct.SkDConic* nonnull dereferenceable(56) %5, %struct.SkDLine* dereferenceable(32) %2) #11
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %6) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL19cubic_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections(%struct.SkPoint* nocapture readonly, float, %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %5 = alloca %struct.SkDCubic, align 16
  %6 = bitcast %struct.SkDCubic* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #11
  %7 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = bitcast %struct.SkDCubic* %5 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 16
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %12 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %5, i64 0, i32 0, i64 1, i32 0
  %13 = bitcast float* %11 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %12 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %5, i64 0, i32 0, i64 2, i32 0
  %19 = bitcast float* %17 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fpext <2 x float> %20 to <2 x double>
  %22 = bitcast double* %18 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 16
  %23 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %24 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %5, i64 0, i32 0, i64 3, i32 0
  %25 = bitcast float* %23 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 4
  %27 = fpext <2 x float> %26 to <2 x double>
  %28 = bitcast double* %24 to <2 x double>*
  store <2 x double> %27, <2 x double>* %28, align 16
  %29 = call i32 @_ZN15SkIntersections12intersectRayERK8SkDCubicRK7SkDLine(%class.SkIntersections* %3, %struct.SkDCubic* nonnull dereferenceable(64) %5, %struct.SkDLine* dereferenceable(32) %2) #11
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #11
  ret void
}

declare i32 @_ZN15SkIntersections12intersectRayERK7SkDLineS2_(%class.SkIntersections*, %struct.SkDLine* dereferenceable(32), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #3

declare i32 @_ZN15SkIntersections12intersectRayERK7SkDQuadRK7SkDLine(%class.SkIntersections*, %struct.SkDQuad* dereferenceable(48), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #3

declare i32 @_ZN15SkIntersections12intersectRayERK8SkDConicRK7SkDLine(%class.SkIntersections*, %struct.SkDConic* dereferenceable(56), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #3

declare i32 @_ZN15SkIntersections12intersectRayERK8SkDCubicRK7SkDLine(%class.SkIntersections*, %struct.SkDCubic* dereferenceable(64), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #8

declare zeroext i1 @_Z16RoughlyEqualUlpsff(float, float) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #9

declare zeroext i1 @_Z16AlmostDequalUlpsdd(double, double) local_unnamed_addr #3

declare { double, double } @_ZNK7SkDQuad9subDivideERK8SkDPointS2_dd(%struct.SkDQuad*, %struct.SkDPoint* dereferenceable(16), %struct.SkDPoint* dereferenceable(16), double, double) local_unnamed_addr #3

declare { double, double } @_ZNK8SkDConic9subDivideERK8SkDPointS2_ddPf(%struct.SkDConic*, %struct.SkDPoint* dereferenceable(16), %struct.SkDPoint* dereferenceable(16), double, double, float*) local_unnamed_addr #3

declare void @_ZNK8SkDCubic9subDivideERK8SkDPointS2_ddPS0_(%struct.SkDCubic*, %struct.SkDPoint* dereferenceable(16), %struct.SkDPoint* dereferenceable(16), double, double, %struct.SkDPoint*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal { double, double } @_ZL16ddline_dxdy_at_tRK8SkDCurved(%struct.SkDCurve* nocapture readonly dereferenceable(64), double) #4 {
  %3 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0, i32 0, i64 1, i32 0
  %4 = bitcast double* %3 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 8
  %6 = bitcast %struct.SkDCurve* %0 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = fsub <2 x double> %5, %7
  %9 = extractelement <2 x double> %8, i32 0
  %10 = insertvalue { double, double } undef, double %9, 0
  %11 = extractelement <2 x double> %8, i32 1
  %12 = insertvalue { double, double } %10, double %11, 1
  ret { double, double } %12
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL16ddquad_dxdy_at_tRK8SkDCurved(%struct.SkDCurve* dereferenceable(64), double) #0 {
  %3 = bitcast %struct.SkDCurve* %0 to %struct.SkDQuad*
  %4 = tail call { double, double } @_ZNK7SkDQuad7dxdyAtTEd(%struct.SkDQuad* %3, double %1) #11
  ret { double, double } %4
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL17ddconic_dxdy_at_tRK8SkDCurved(%struct.SkDCurve* dereferenceable(64), double) #0 {
  %3 = bitcast %struct.SkDCurve* %0 to %struct.SkDConic*
  %4 = tail call { double, double } @_ZNK8SkDConic7dxdyAtTEd(%struct.SkDConic* %3, double %1) #11
  ret { double, double } %4
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL17ddcubic_dxdy_at_tRK8SkDCurved(%struct.SkDCurve* dereferenceable(64), double) #0 {
  %3 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0
  %4 = tail call { double, double } @_ZNK8SkDCubic7dxdyAtTEd(%struct.SkDCubic* %3, double %1) #11
  ret { double, double } %4
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL14ddline_xy_at_tRK8SkDCurved(%struct.SkDCurve* dereferenceable(64), double) #0 {
  %3 = bitcast %struct.SkDCurve* %0 to %struct.SkDLine*
  %4 = tail call { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine* %3, double %1) #11
  ret { double, double } %4
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL14ddquad_xy_at_tRK8SkDCurved(%struct.SkDCurve* dereferenceable(64), double) #0 {
  %3 = bitcast %struct.SkDCurve* %0 to %struct.SkDQuad*
  %4 = tail call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* %3, double %1) #11
  ret { double, double } %4
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL15ddconic_xy_at_tRK8SkDCurved(%struct.SkDCurve* dereferenceable(64), double) #0 {
  %3 = bitcast %struct.SkDCurve* %0 to %struct.SkDConic*
  %4 = tail call { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic* %3, double %1) #11
  ret { double, double } %4
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL15ddcubic_xy_at_tRK8SkDCurved(%struct.SkDCurve* dereferenceable(64), double) #0 {
  %3 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0
  %4 = tail call { double, double } @_ZNK8SkDCubic5ptAtTEd(%struct.SkDCubic* %3, double %1) #11
  ret { double, double } %4
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL19dline_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections(%struct.SkDCurve* dereferenceable(64), %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %4 = bitcast %struct.SkDCurve* %0 to %struct.SkDLine*
  %5 = tail call i32 @_ZN15SkIntersections12intersectRayERK7SkDLineS2_(%class.SkIntersections* %2, %struct.SkDLine* dereferenceable(32) %4, %struct.SkDLine* dereferenceable(32) %1) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL19dquad_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections(%struct.SkDCurve* dereferenceable(64), %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %4 = bitcast %struct.SkDCurve* %0 to %struct.SkDQuad*
  %5 = tail call i32 @_ZN15SkIntersections12intersectRayERK7SkDQuadRK7SkDLine(%class.SkIntersections* %2, %struct.SkDQuad* dereferenceable(48) %4, %struct.SkDLine* dereferenceable(32) %1) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL20dconic_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections(%struct.SkDCurve* dereferenceable(64), %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %4 = bitcast %struct.SkDCurve* %0 to %struct.SkDConic*
  %5 = tail call i32 @_ZN15SkIntersections12intersectRayERK8SkDConicRK7SkDLine(%class.SkIntersections* %2, %struct.SkDConic* dereferenceable(56) %4, %struct.SkDLine* dereferenceable(32) %1) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL20dcubic_intersect_rayRK8SkDCurveRK7SkDLineP15SkIntersections(%struct.SkDCurve* dereferenceable(64), %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %4 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %0, i64 0, i32 0, i32 0
  %5 = tail call i32 @_ZN15SkIntersections12intersectRayERK8SkDCubicRK7SkDLine(%class.SkIntersections* %2, %struct.SkDCubic* dereferenceable(64) %4, %struct.SkDLine* dereferenceable(32) %1) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkDPoint19approximatelyDEqualERKS_(%struct.SkDPoint*, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = fsub double %4, %6
  %8 = tail call double @llvm.fabs.f64(double %7) #11
  %9 = fcmp olt double %8, 0x3E80000000000000
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %14 = load double, double* %13, align 8
  %15 = fsub double %12, %14
  %16 = tail call double @llvm.fabs.f64(double %15) #11
  %17 = fcmp olt double %16, 0x3E80000000000000
  br i1 %17, label %66, label %18

18:                                               ; preds = %10, %2
  %19 = fptrunc double %4 to float
  %20 = fptrunc double %6 to float
  %21 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %19, float %20) #11
  br i1 %21, label %22, label %66

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %26 = load double, double* %25, align 8
  %27 = fptrunc double %24 to float
  %28 = fptrunc double %26 to float
  %29 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %27, float %28) #11
  br i1 %29, label %30, label %66

30:                                               ; preds = %22
  %31 = load double, double* %3, align 8
  %32 = load double, double* %5, align 8
  %33 = fsub double %31, %32
  %34 = load double, double* %23, align 8
  %35 = load double, double* %25, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %33
  %38 = fmul double %36, %36
  %39 = fadd double %37, %38
  %40 = tail call double @sqrt(double %39) #11
  %41 = load double, double* %5, align 8
  %42 = load double, double* %3, align 8
  %43 = fcmp olt double %41, %42
  %44 = load double, double* %23, align 8
  %45 = select i1 %43, double %41, double %42
  %46 = fcmp olt double %44, %45
  %47 = load double, double* %25, align 8
  %48 = select i1 %46, double %44, double %45
  %49 = fcmp olt double %47, %48
  %50 = select i1 %49, double %47, double %48
  %51 = fcmp olt double %42, %41
  %52 = load double, double* %5, align 8
  %53 = load double, double* %3, align 8
  %54 = select i1 %51, double %52, double %53
  %55 = fcmp olt double %54, %44
  %56 = load double, double* %23, align 8
  %57 = select i1 %55, double %56, double %54
  %58 = fcmp olt double %57, %47
  %59 = load double, double* %25, align 8
  %60 = select i1 %58, double %59, double %57
  %61 = fsub double -0.000000e+00, %50
  %62 = fcmp olt double %60, %61
  %63 = select i1 %62, double %61, double %60
  %64 = fadd double %40, %63
  %65 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %63, double %64) #11
  br label %66

66:                                               ; preds = %18, %22, %10, %30
  %67 = phi i1 [ %65, %30 ], [ true, %10 ], [ false, %22 ], [ false, %18 ]
  ret i1 %67
}

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #10

declare i8* @_Z16sk_realloc_throwPvm(i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
