; ModuleID = '../../v8/src/heap/objects-visiting.cc'
source_filename = "../../v8/src/heap/objects-visiting.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic", i64, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic.20", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.135", %"class.std::__1::unique_ptr.135", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.150", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic", i64, i8, %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.154", %"class.std::__1::vector.154", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.161", %"class.std::__1::unique_ptr.167", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.298", %"class.std::__1::unique_ptr.304", %"class.std::__1::unique_ptr.310", %"class.std::__1::unique_ptr.349", %"class.std::__1::unique_ptr.388", %"class.std::__1::unique_ptr.418", %"class.std::__1::unique_ptr.424", %"class.std::__1::unique_ptr.434", %"class.std::__1::unique_ptr.440", %"class.std::__1::unique_ptr.440", %"class.std::__1::unique_ptr.446", %"class.std::__1::unique_ptr.452", %"class.std::__1::unique_ptr.452", %"class.std::__1::unique_ptr.458", %"class.std::__1::unique_ptr.464", %"class.std::__1::shared_ptr.470", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.493", %"class.std::__1::unique_ptr.519", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.525", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.538", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.320", i8, [7 x i8], %"class.std::__1::unordered_map.544", %"class.std::__1::unordered_map.570", %"class.std::__1::unordered_map.544", %"class.std::__1::unordered_map.594", %"class.std::__1::vector.622", i8, %"class.std::__1::unique_ptr.629", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.4", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.11", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.15", %"struct.std::__1::atomic.15", %"struct.std::__1::atomic.15" }
%"struct.std::__1::atomic.15" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__atomic_base.17" }
%"struct.std::__1::__atomic_base.17" = type { %"struct.std::__1::__cxx_atomic_impl.18" }
%"struct.std::__1::__cxx_atomic_impl.18" = type { %"struct.std::__1::__cxx_atomic_base_impl.19" }
%"struct.std::__1::__cxx_atomic_base_impl.19" = type { i64 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr.683", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.689", %"class.std::__1::unique_ptr.710", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.720", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.840", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.853", void (i32, %"class.v8::SharedArrayBuffer"*, i64, i64, double, %"class.v8::Isolate::AtomicsWaitWakeHandle"*, i8*)*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.863", void (%"class.v8::Context"*, %"class.v8::Module"*, %"class.v8::Object"*)*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.874", %"struct.std::__1::atomic.141", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.949", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.992"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.1004", i32, i8, i8, i32, i32, %"class.std::__1::vector.1010", %"class.std::__1::vector.1010", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.1017", i64, %"class.std::__1::unordered_map.1018", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.531", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.149", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1074", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1088", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, %"class.v8::Value"* (%"class.v8::Context"*, %"class.v8::Value"*, %"class.v8::Array"*)*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1122", %"class.std::__1::vector.1126", %"class.std::__1::vector.1126", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic.678", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic.678" = type { %"struct.std::__1::__atomic_base.679" }
%"struct.std::__1::__atomic_base.679" = type { %"struct.std::__1::__cxx_atomic_impl.680" }
%"struct.std::__1::__cxx_atomic_impl.680" = type { %"struct.std::__1::__cxx_atomic_base_impl.681" }
%"struct.std::__1::__cxx_atomic_base_impl.681" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr.683" = type { %"class.std::__1::__compressed_pair.684" }
%"class.std::__1::__compressed_pair.684" = type { %"struct.std::__1::__compressed_pair_elem.685" }
%"struct.std::__1::__compressed_pair_elem.685" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.531" }
%"class.std::__1::shared_ptr.689" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.128", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.690", %"class.std::__1::unique_ptr.704" }
%"class.std::__1::vector.128" = type { %"class.std::__1::__vector_base.129" }
%"class.std::__1::__vector_base.129" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.130" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.15", %"struct.std::__1::atomic.59", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.59" = type { %"struct.std::__1::__atomic_base.60" }
%"struct.std::__1::__atomic_base.60" = type { %"struct.std::__1::__cxx_atomic_impl.61" }
%"struct.std::__1::__cxx_atomic_impl.61" = type { %"struct.std::__1::__cxx_atomic_base_impl.62" }
%"struct.std::__1::__cxx_atomic_base_impl.62" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic", i64 }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic", i64, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.690" = type { %"class.std::__1::__compressed_pair.691" }
%"class.std::__1::__compressed_pair.691" = type { %"struct.std::__1::__compressed_pair_elem.692" }
%"struct.std::__1::__compressed_pair_elem.692" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.693" }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.128", i64, i64, i8, i64, i64 }
%"class.std::__1::vector.693" = type { %"class.std::__1::__vector_base.694" }
%"class.std::__1::__vector_base.694" = type { %"class.std::__1::unique_ptr.695"*, %"class.std::__1::unique_ptr.695"*, %"class.std::__1::__compressed_pair.696" }
%"class.std::__1::unique_ptr.695" = type { %"class.std::__1::__compressed_pair.1134" }
%"class.std::__1::__compressed_pair.1134" = type { %"struct.std::__1::__compressed_pair_elem.1135" }
%"struct.std::__1::__compressed_pair_elem.1135" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.696" = type { %"struct.std::__1::__compressed_pair_elem.697" }
%"struct.std::__1::__compressed_pair_elem.697" = type { %"class.std::__1::unique_ptr.695"* }
%"class.std::__1::unique_ptr.704" = type { %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.706" }
%"struct.std::__1::__compressed_pair_elem.706" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.710" = type { %"class.std::__1::__compressed_pair.711" }
%"class.std::__1::__compressed_pair.711" = type { %"struct.std::__1::__compressed_pair_elem.712" }
%"struct.std::__1::__compressed_pair_elem.712" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.713", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.713" = type { %"struct.std::__1::__atomic_base.714" }
%"struct.std::__1::__atomic_base.714" = type { %"struct.std::__1::__cxx_atomic_impl.715" }
%"struct.std::__1::__cxx_atomic_impl.715" = type { %"struct.std::__1::__cxx_atomic_base_impl.716" }
%"struct.std::__1::__cxx_atomic_base_impl.716" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.720" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.721", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.721" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.722", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.722" = type { %"class.std::__1::__vector_base.723" }
%"class.std::__1::__vector_base.723" = type { %"class.std::__1::unique_ptr.724"*, %"class.std::__1::unique_ptr.724"*, %"class.std::__1::__compressed_pair.725" }
%"class.std::__1::unique_ptr.724" = type opaque
%"class.std::__1::__compressed_pair.725" = type { %"struct.std::__1::__compressed_pair_elem.726" }
%"struct.std::__1::__compressed_pair_elem.726" = type { %"class.std::__1::unique_ptr.724"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.730", %"class.std::__1::unique_ptr.736", %"struct.std::__1::atomic.141", %"class.std::__1::unique_ptr.742", %"class.std::__1::unique_ptr.748", %"class.std::__1::unique_ptr.754", %"class.std::__1::unique_ptr.760", %"class.std::__1::unique_ptr.766", %"class.std::__1::set.772", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.730" = type { %"class.std::__1::__compressed_pair.731" }
%"class.std::__1::__compressed_pair.731" = type { %"struct.std::__1::__compressed_pair_elem.732" }
%"struct.std::__1::__compressed_pair_elem.732" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.736" = type { %"class.std::__1::__compressed_pair.737" }
%"class.std::__1::__compressed_pair.737" = type { %"struct.std::__1::__compressed_pair_elem.738" }
%"struct.std::__1::__compressed_pair_elem.738" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.742" = type { %"class.std::__1::__compressed_pair.743" }
%"class.std::__1::__compressed_pair.743" = type { %"struct.std::__1::__compressed_pair_elem.744" }
%"struct.std::__1::__compressed_pair_elem.744" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.748" = type { %"class.std::__1::__compressed_pair.749" }
%"class.std::__1::__compressed_pair.749" = type { %"struct.std::__1::__compressed_pair_elem.750" }
%"struct.std::__1::__compressed_pair_elem.750" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.754" = type { %"class.std::__1::__compressed_pair.755" }
%"class.std::__1::__compressed_pair.755" = type { %"struct.std::__1::__compressed_pair_elem.756" }
%"struct.std::__1::__compressed_pair_elem.756" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.760" = type { %"class.std::__1::__compressed_pair.761" }
%"class.std::__1::__compressed_pair.761" = type { %"struct.std::__1::__compressed_pair_elem.762" }
%"struct.std::__1::__compressed_pair_elem.762" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.766" = type { %"class.std::__1::__compressed_pair.767" }
%"class.std::__1::__compressed_pair.767" = type { %"struct.std::__1::__compressed_pair_elem.768" }
%"struct.std::__1::__compressed_pair_elem.768" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.772" = type { %"class.std::__1::__tree.773" }
%"class.std::__1::__tree.773" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.774", %"class.std::__1::__compressed_pair.778" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.774" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.778" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.781" }
%"class.v8::internal::TaggedImpl.781" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.780" }
%"class.v8::internal::TaggedImpl.780" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.648", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.648" = type { %"class.std::__1::__compressed_pair.649" }
%"class.std::__1::__compressed_pair.649" = type { %"struct.std::__1::__compressed_pair_elem.650" }
%"struct.std::__1::__compressed_pair_elem.650" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.782", %"class.v8::internal::DetachableVector.783", %"class.v8::internal::DetachableVector.782", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.783" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.782" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr.642", %"class.std::__1::unique_ptr.471" }
%"class.std::__1::unique_ptr.642" = type { %"class.std::__1::__compressed_pair.643" }
%"class.std::__1::__compressed_pair.643" = type { %"struct.std::__1::__compressed_pair_elem.644" }
%"struct.std::__1::__compressed_pair_elem.644" = type { %"class.v8::internal::VirtualMemory"* }
%"class.std::__1::unique_ptr.471" = type { %"class.std::__1::__compressed_pair.472" }
%"class.std::__1::__compressed_pair.472" = type { %"struct.std::__1::__compressed_pair_elem.473" }
%"struct.std::__1::__compressed_pair_elem.473" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.474", %"class.std::__1::set.482" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.474" = type { %"class.std::__1::__tree.475" }
%"class.std::__1::__tree.475" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.476", %"class.std::__1::__compressed_pair.480" }
%"class.std::__1::__compressed_pair.476" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"class.std::__1::__compressed_pair.480" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::set.482" = type { %"class.std::__1::__tree.483" }
%"class.std::__1::__tree.483" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.476", %"class.std::__1::__compressed_pair.484" }
%"class.std::__1::__compressed_pair.484" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.784", %"class.std::__1::vector.790", %"class.std::__1::unique_ptr.797", %"class.std::__1::vector.804", %"class.std::__1::unique_ptr.811", i64, %"class.std::__1::vector.817", %"class.std::__1::vector.825", %"class.std::__1::vector.833", i8, i8, i32 }
%"class.std::__1::unique_ptr.784" = type { %"class.std::__1::__compressed_pair.785" }
%"class.std::__1::__compressed_pair.785" = type { %"struct.std::__1::__compressed_pair_elem.786" }
%"struct.std::__1::__compressed_pair_elem.786" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.790" = type { %"class.std::__1::__vector_base.791" }
%"class.std::__1::__vector_base.791" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.792" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.792" = type { %"struct.std::__1::__compressed_pair_elem.793" }
%"struct.std::__1::__compressed_pair_elem.793" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.797" = type { %"class.std::__1::__compressed_pair.798" }
%"class.std::__1::__compressed_pair.798" = type { %"struct.std::__1::__compressed_pair_elem.799" }
%"struct.std::__1::__compressed_pair_elem.799" = type { %"class.v8::internal::GlobalHandles::NodeSpace.800"* }
%"class.v8::internal::GlobalHandles::NodeSpace.800" = type opaque
%"class.std::__1::vector.804" = type { %"class.std::__1::__vector_base.805" }
%"class.std::__1::__vector_base.805" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.806" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.806" = type { %"struct.std::__1::__compressed_pair_elem.807" }
%"struct.std::__1::__compressed_pair_elem.807" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.811" = type { %"class.std::__1::__compressed_pair.812" }
%"class.std::__1::__compressed_pair.812" = type { %"struct.std::__1::__compressed_pair_elem.813" }
%"struct.std::__1::__compressed_pair_elem.813" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.817" = type { %"class.std::__1::__vector_base.818" }
%"class.std::__1::__vector_base.818" = type { %"struct.std::__1::pair.819"*, %"struct.std::__1::pair.819"*, %"class.std::__1::__compressed_pair.820" }
%"struct.std::__1::pair.819" = type opaque
%"class.std::__1::__compressed_pair.820" = type { %"struct.std::__1::__compressed_pair_elem.821" }
%"struct.std::__1::__compressed_pair_elem.821" = type { %"struct.std::__1::pair.819"* }
%"class.std::__1::vector.825" = type { %"class.std::__1::__vector_base.826" }
%"class.std::__1::__vector_base.826" = type { %"struct.std::__1::pair.827"*, %"struct.std::__1::pair.827"*, %"class.std::__1::__compressed_pair.828" }
%"struct.std::__1::pair.827" = type opaque
%"class.std::__1::__compressed_pair.828" = type { %"struct.std::__1::__compressed_pair_elem.829" }
%"struct.std::__1::__compressed_pair_elem.829" = type { %"struct.std::__1::pair.827"* }
%"class.std::__1::vector.833" = type { %"class.std::__1::__vector_base.834" }
%"class.std::__1::__vector_base.834" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.835" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.835" = type { %"struct.std::__1::__compressed_pair_elem.836" }
%"struct.std::__1::__compressed_pair_elem.836" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.654", %"class.std::__1::vector.840" }
%"class.std::__1::vector.654" = type { %"class.std::__1::__vector_base.655" }
%"class.std::__1::__vector_base.655" = type { i64**, i64**, %"class.std::__1::__compressed_pair.656" }
%"class.std::__1::__compressed_pair.656" = type { %"struct.std::__1::__compressed_pair_elem.657" }
%"struct.std::__1::__compressed_pair_elem.657" = type { i64** }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.847" }
%"class.std::__1::unique_ptr.847" = type { %"class.std::__1::__compressed_pair.848" }
%"class.std::__1::__compressed_pair.848" = type { %"struct.std::__1::__compressed_pair_elem.849" }
%"struct.std::__1::__compressed_pair_elem.849" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.840" = type { %"class.std::__1::__vector_base.841" }
%"class.std::__1::__vector_base.841" = type { i32*, i32*, %"class.std::__1::__compressed_pair.842" }
%"class.std::__1::__compressed_pair.842" = type { %"struct.std::__1::__compressed_pair_elem.843" }
%"struct.std::__1::__compressed_pair_elem.843" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"struct.std::__1::atomic.853" = type { %"struct.std::__1::__atomic_base.854" }
%"struct.std::__1::__atomic_base.854" = type { %"struct.std::__1::__cxx_atomic_impl.855" }
%"struct.std::__1::__cxx_atomic_impl.855" = type { %"struct.std::__1::__cxx_atomic_base_impl.856" }
%"struct.std::__1::__cxx_atomic_base_impl.856" = type { i32 }
%"class.v8::SharedArrayBuffer" = type { i8 }
%"class.v8::Isolate::AtomicsWaitWakeHandle" = type { i8 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.863" = type { %"struct.std::__1::__atomic_base.864" }
%"struct.std::__1::__atomic_base.864" = type { %"struct.std::__1::__cxx_atomic_impl.865" }
%"struct.std::__1::__cxx_atomic_impl.865" = type { %"struct.std::__1::__cxx_atomic_base_impl.866" }
%"struct.std::__1::__cxx_atomic_base_impl.866" = type { i32 }
%"class.v8::Context" = type { i8 }
%"class.v8::Module" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.868" }
%"class.std::__1::__compressed_pair.868" = type { %"struct.std::__1::__compressed_pair_elem.869" }
%"struct.std::__1::__compressed_pair_elem.869" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.870 }
%union.anon.870 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.874" = type { %"class.std::__1::__hash_table.875" }
%"class.std::__1::__hash_table.875" = type <{ %"class.std::__1::unique_ptr.876", %"class.std::__1::__compressed_pair.886", %"class.std::__1::__compressed_pair.891", %"class.std::__1::__compressed_pair.894", [4 x i8] }>
%"class.std::__1::unique_ptr.876" = type { %"class.std::__1::__compressed_pair.877" }
%"class.std::__1::__compressed_pair.877" = type { %"struct.std::__1::__compressed_pair_elem.878", %"struct.std::__1::__compressed_pair_elem.880" }
%"struct.std::__1::__compressed_pair_elem.878" = type { %"struct.std::__1::__hash_node_base.879"** }
%"struct.std::__1::__hash_node_base.879" = type { %"struct.std::__1::__hash_node_base.879"* }
%"struct.std::__1::__compressed_pair_elem.880" = type { %"class.std::__1::__bucket_list_deallocator.881" }
%"class.std::__1::__bucket_list_deallocator.881" = type { %"class.std::__1::__compressed_pair.882" }
%"class.std::__1::__compressed_pair.882" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.886" = type { %"struct.std::__1::__compressed_pair_elem.887" }
%"struct.std::__1::__compressed_pair_elem.887" = type { %"struct.std::__1::__hash_node_base.879" }
%"class.std::__1::__compressed_pair.891" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.894" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::atomic.141" = type { %"struct.std::__1::__atomic_base.142" }
%"struct.std::__1::__atomic_base.142" = type { %"struct.std::__1::__cxx_atomic_impl.143" }
%"struct.std::__1::__cxx_atomic_impl.143" = type { %"struct.std::__1::__cxx_atomic_base_impl.144" }
%"struct.std::__1::__cxx_atomic_base_impl.144" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.900", %"class.v8::internal::Handle.906", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.907", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.900" = type { %"class.std::__1::__compressed_pair.901" }
%"class.std::__1::__compressed_pair.901" = type { %"struct.std::__1::__compressed_pair_elem.902" }
%"struct.std::__1::__compressed_pair_elem.902" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.906" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.907" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.908", %"class.std::__1::vector.914", %"class.std::__1::unique_ptr.922", %"class.std::__1::unique_ptr.928", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.934", %"class.std::__1::vector.940", %"struct.std::__1::pair.948" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::unique_ptr.908" = type { %"class.std::__1::__compressed_pair.909" }
%"class.std::__1::__compressed_pair.909" = type { %"struct.std::__1::__compressed_pair_elem.910" }
%"struct.std::__1::__compressed_pair_elem.910" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.914" = type { %"class.std::__1::__vector_base.915" }
%"class.std::__1::__vector_base.915" = type { %"class.std::__1::unique_ptr.916"*, %"class.std::__1::unique_ptr.916"*, %"class.std::__1::__compressed_pair.917" }
%"class.std::__1::unique_ptr.916" = type opaque
%"class.std::__1::__compressed_pair.917" = type { %"struct.std::__1::__compressed_pair_elem.918" }
%"struct.std::__1::__compressed_pair_elem.918" = type { %"class.std::__1::unique_ptr.916"* }
%"class.std::__1::unique_ptr.922" = type { %"class.std::__1::__compressed_pair.923" }
%"class.std::__1::__compressed_pair.923" = type { %"struct.std::__1::__compressed_pair_elem.924" }
%"struct.std::__1::__compressed_pair_elem.924" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.928" = type { %"class.std::__1::__compressed_pair.929" }
%"class.std::__1::__compressed_pair.929" = type { %"struct.std::__1::__compressed_pair_elem.930" }
%"struct.std::__1::__compressed_pair_elem.930" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.934" = type { %"class.std::__1::__compressed_pair.935" }
%"class.std::__1::__compressed_pair.935" = type { %"struct.std::__1::__compressed_pair_elem.936" }
%"struct.std::__1::__compressed_pair_elem.936" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.940" = type { %"class.std::__1::__vector_base.941" }
%"class.std::__1::__vector_base.941" = type { %"struct.std::__1::pair.942"*, %"struct.std::__1::pair.942"*, %"class.std::__1::__compressed_pair.943" }
%"struct.std::__1::pair.942" = type opaque
%"class.std::__1::__compressed_pair.943" = type { %"struct.std::__1::__compressed_pair_elem.944" }
%"struct.std::__1::__compressed_pair_elem.944" = type { %"struct.std::__1::pair.942"* }
%"struct.std::__1::pair.948" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.682"*, i16, i8*)*, i8* }
%"class.v8::Local.682" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.949" = type { %"class.std::__1::__compressed_pair.950" }
%"class.std::__1::__compressed_pair.950" = type { %"struct.std::__1::__compressed_pair_elem.951" }
%"struct.std::__1::__compressed_pair_elem.951" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.952", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.952" = type { %"class.std::__1::__hash_table.953" }
%"class.std::__1::__hash_table.953" = type <{ %"class.std::__1::unique_ptr.954", %"class.std::__1::__compressed_pair.964", %"class.std::__1::__compressed_pair.969", %"class.std::__1::__compressed_pair.973", [4 x i8] }>
%"class.std::__1::unique_ptr.954" = type { %"class.std::__1::__compressed_pair.955" }
%"class.std::__1::__compressed_pair.955" = type { %"struct.std::__1::__compressed_pair_elem.956", %"struct.std::__1::__compressed_pair_elem.958" }
%"struct.std::__1::__compressed_pair_elem.956" = type { %"struct.std::__1::__hash_node_base.957"** }
%"struct.std::__1::__hash_node_base.957" = type { %"struct.std::__1::__hash_node_base.957"* }
%"struct.std::__1::__compressed_pair_elem.958" = type { %"class.std::__1::__bucket_list_deallocator.959" }
%"class.std::__1::__bucket_list_deallocator.959" = type { %"class.std::__1::__compressed_pair.960" }
%"class.std::__1::__compressed_pair.960" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.964" = type { %"struct.std::__1::__compressed_pair_elem.965" }
%"struct.std::__1::__compressed_pair_elem.965" = type { %"struct.std::__1::__hash_node_base.957" }
%"class.std::__1::__compressed_pair.969" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.973" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.987" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.981"**, %"struct.std::__1::pair.981"**, %"struct.std::__1::pair.981"**, %"class.std::__1::__compressed_pair.982" }
%"struct.std::__1::pair.981" = type opaque
%"class.std::__1::__compressed_pair.982" = type { %"struct.std::__1::__compressed_pair_elem.983" }
%"struct.std::__1::__compressed_pair_elem.983" = type { %"struct.std::__1::pair.981"** }
%"class.std::__1::__compressed_pair.987" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.v8::String" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.992" = type { %"class.std::__1::__vector_base.993" }
%"class.std::__1::__vector_base.993" = type { %"class.v8::internal::Handle.994"*, %"class.v8::internal::Handle.994"*, %"class.std::__1::__compressed_pair.995" }
%"class.v8::internal::Handle.994" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.995" = type { %"struct.std::__1::__compressed_pair_elem.996" }
%"struct.std::__1::__compressed_pair_elem.996" = type { %"class.v8::internal::Handle.994"* }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type { %"class.v8::MicrotaskQueue", i64, i64, i64, i64*, i64, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::MicrotaskQueue"*, i32, i32, i32, i8, %"class.std::__1::vector.1000" }
%"class.v8::MicrotaskQueue" = type { i32 (...)** }
%"class.std::__1::vector.1000" = type { %"class.std::__1::__vector_base.1001" }
%"class.std::__1::__vector_base.1001" = type { %"struct.std::__1::pair.981"*, %"struct.std::__1::pair.981"*, %"class.std::__1::__compressed_pair.1002" }
%"class.std::__1::__compressed_pair.1002" = type { %"struct.std::__1::__compressed_pair_elem.1003" }
%"struct.std::__1::__compressed_pair_elem.1003" = type { %"struct.std::__1::pair.981"* }
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.858", i32, %"class.v8::Local.682" }
%"class.v8::Local.858" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.1004" = type { %"class.std::__1::__compressed_pair.1005" }
%"class.std::__1::__compressed_pair.1005" = type { %"struct.std::__1::__compressed_pair_elem.1006" }
%"struct.std::__1::__compressed_pair_elem.1006" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.654", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1010" = type { %"class.std::__1::__vector_base.1011" }
%"class.std::__1::__vector_base.1011" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.1012" }
%"class.std::__1::__compressed_pair.1012" = type { %"struct.std::__1::__compressed_pair_elem.1013" }
%"struct.std::__1::__compressed_pair_elem.1013" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.1017" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.1018" = type { %"class.std::__1::__hash_table.1019" }
%"class.std::__1::__hash_table.1019" = type <{ %"class.std::__1::unique_ptr.1020", %"class.std::__1::__compressed_pair.1030", %"class.std::__1::__compressed_pair.1035", %"class.std::__1::__compressed_pair.1038", [4 x i8] }>
%"class.std::__1::unique_ptr.1020" = type { %"class.std::__1::__compressed_pair.1021" }
%"class.std::__1::__compressed_pair.1021" = type { %"struct.std::__1::__compressed_pair_elem.1022", %"struct.std::__1::__compressed_pair_elem.1024" }
%"struct.std::__1::__compressed_pair_elem.1022" = type { %"struct.std::__1::__hash_node_base.1023"** }
%"struct.std::__1::__hash_node_base.1023" = type { %"struct.std::__1::__hash_node_base.1023"* }
%"struct.std::__1::__compressed_pair_elem.1024" = type { %"class.std::__1::__bucket_list_deallocator.1025" }
%"class.std::__1::__bucket_list_deallocator.1025" = type { %"class.std::__1::__compressed_pair.1026" }
%"class.std::__1::__compressed_pair.1026" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.1030" = type { %"struct.std::__1::__compressed_pair_elem.1031" }
%"struct.std::__1::__compressed_pair_elem.1031" = type { %"struct.std::__1::__hash_node_base.1023" }
%"class.std::__1::__compressed_pair.1035" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.1038" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.531" = type { %"class.std::__1::__vector_base.532" }
%"class.std::__1::__vector_base.532" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.533" }
%"class.std::__1::__compressed_pair.533" = type { %"struct.std::__1::__compressed_pair_elem.534" }
%"struct.std::__1::__compressed_pair_elem.534" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.149" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1042", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1071", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1072", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1042" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1067, %union.anon.1069, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1067 = type { i64 }
%union.anon.1069 = type { i64 }
%"class.std::__1::weak_ptr.1071" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.149" }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1072" = type { %"class.v8::PersistentBase.1073" }
%"class.v8::PersistentBase.1073" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1043", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1043" = type { %"class.std::__1::__hash_table.1044" }
%"class.std::__1::__hash_table.1044" = type <{ %"class.std::__1::unique_ptr.1045", %"class.std::__1::__compressed_pair.1055", %"class.std::__1::__compressed_pair.1060", %"class.std::__1::__compressed_pair.1063", [4 x i8] }>
%"class.std::__1::unique_ptr.1045" = type { %"class.std::__1::__compressed_pair.1046" }
%"class.std::__1::__compressed_pair.1046" = type { %"struct.std::__1::__compressed_pair_elem.1047", %"struct.std::__1::__compressed_pair_elem.1049" }
%"struct.std::__1::__compressed_pair_elem.1047" = type { %"struct.std::__1::__hash_node_base.1048"** }
%"struct.std::__1::__hash_node_base.1048" = type { %"struct.std::__1::__hash_node_base.1048"* }
%"struct.std::__1::__compressed_pair_elem.1049" = type { %"class.std::__1::__bucket_list_deallocator.1050" }
%"class.std::__1::__bucket_list_deallocator.1050" = type { %"class.std::__1::__compressed_pair.1051" }
%"class.std::__1::__compressed_pair.1051" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.1055" = type { %"struct.std::__1::__compressed_pair_elem.1056" }
%"struct.std::__1::__compressed_pair_elem.1056" = type { %"struct.std::__1::__hash_node_base.1048" }
%"class.std::__1::__compressed_pair.1060" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.1063" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1074" = type { %"class.std::__1::__compressed_pair.1075" }
%"class.std::__1::__compressed_pair.1075" = type { %"struct.std::__1::__compressed_pair_elem.1076" }
%"struct.std::__1::__compressed_pair_elem.1076" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1079", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.635", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.639", %"class.std::__1::unique_ptr.664", %"class.std::__1::unique_ptr.464", %"class.std::__1::vector.670", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.635" = type { %"struct.std::__1::__atomic_base.636" }
%"struct.std::__1::__atomic_base.636" = type { %"struct.std::__1::__cxx_atomic_impl.637" }
%"struct.std::__1::__cxx_atomic_impl.637" = type { %"struct.std::__1::__cxx_atomic_base_impl.638" }
%"struct.std::__1::__cxx_atomic_base_impl.638" = type { i32 }
%"class.std::__1::unique_ptr.639" = type { %"class.std::__1::__compressed_pair.640" }
%"class.std::__1::__compressed_pair.640" = type { %"struct.std::__1::__compressed_pair_elem.641" }
%"struct.std::__1::__compressed_pair_elem.641" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.654" }
%"class.std::__1::unique_ptr.664" = type { %"class.std::__1::__compressed_pair.665" }
%"class.std::__1::__compressed_pair.665" = type { %"struct.std::__1::__compressed_pair_elem.666" }
%"struct.std::__1::__compressed_pair_elem.666" = type { %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.670" = type { %"class.std::__1::__vector_base.671" }
%"class.std::__1::__vector_base.671" = type { %"struct.std::__1::pair.672"*, %"struct.std::__1::pair.672"*, %"class.std::__1::__compressed_pair.673" }
%"struct.std::__1::pair.672" = type opaque
%"class.std::__1::__compressed_pair.673" = type { %"struct.std::__1::__compressed_pair_elem.674" }
%"struct.std::__1::__compressed_pair_elem.674" = type { %"struct.std::__1::pair.672"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic"*, %"class.std::__1::unique_ptr.88" }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.29", %"class.std::__1::vector.29", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.31" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.36" }
%"class.std::__1::__hash_table.36" = type <{ %"class.std::__1::unique_ptr.37", %"class.std::__1::__compressed_pair.47", %"class.std::__1::__compressed_pair.52", %"class.std::__1::__compressed_pair.54", [4 x i8] }>
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39", %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.std::__1::__hash_node_base.40"** }
%"struct.std::__1::__hash_node_base.40" = type { %"struct.std::__1::__hash_node_base.40"* }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.std::__1::__bucket_list_deallocator.42" }
%"class.std::__1::__bucket_list_deallocator.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.std::__1::__hash_node_base.40" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic", %"struct.std::__1::atomic.15", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.77", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.15", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.63" }
%"class.std::__1::vector.63" = type { %"class.std::__1::__vector_base.64" }
%"class.std::__1::__vector_base.64" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.65" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.70", %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::atomic.77" = type { %"struct.std::__1::__atomic_base.78" }
%"struct.std::__1::__atomic_base.78" = type { %"struct.std::__1::__cxx_atomic_impl.79" }
%"struct.std::__1::__cxx_atomic_impl.79" = type { %"struct.std::__1::__cxx_atomic_base_impl.80" }
%"struct.std::__1::__cxx_atomic_base_impl.80" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.81", i8, [7 x i8] }>
%"class.std::__1::vector.81" = type { %"class.std::__1::__vector_base.82" }
%"class.std::__1::__vector_base.82" = type { i64*, i64*, %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.std::__1::unique_ptr.1079" = type { %"class.std::__1::__compressed_pair.1080" }
%"class.std::__1::__compressed_pair.1080" = type { %"struct.std::__1::__compressed_pair_elem.1081" }
%"struct.std::__1::__compressed_pair_elem.1081" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1088" = type { %"class.std::__1::__compressed_pair.1089" }
%"class.std::__1::__compressed_pair.1089" = type { %"struct.std::__1::__compressed_pair_elem.1090" }
%"struct.std::__1::__compressed_pair_elem.1090" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.859", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.859" = type { %"class.v8::Context"* }
%"class.v8::Array" = type { i8 }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1096" }
%"class.std::__1::unordered_map.1096" = type { %"class.std::__1::__hash_table.1097" }
%"class.std::__1::__hash_table.1097" = type <{ %"class.std::__1::unique_ptr.1098", %"class.std::__1::__compressed_pair.1108", %"class.std::__1::__compressed_pair.1113", %"class.std::__1::__compressed_pair.1116", [4 x i8] }>
%"class.std::__1::unique_ptr.1098" = type { %"class.std::__1::__compressed_pair.1099" }
%"class.std::__1::__compressed_pair.1099" = type { %"struct.std::__1::__compressed_pair_elem.1100", %"struct.std::__1::__compressed_pair_elem.1102" }
%"struct.std::__1::__compressed_pair_elem.1100" = type { %"struct.std::__1::__hash_node_base.1101"** }
%"struct.std::__1::__hash_node_base.1101" = type { %"struct.std::__1::__hash_node_base.1101"* }
%"struct.std::__1::__compressed_pair_elem.1102" = type { %"class.std::__1::__bucket_list_deallocator.1103" }
%"class.std::__1::__bucket_list_deallocator.1103" = type { %"class.std::__1::__compressed_pair.1104" }
%"class.std::__1::__compressed_pair.1104" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.1108" = type { %"struct.std::__1::__compressed_pair_elem.1109" }
%"struct.std::__1::__compressed_pair_elem.1109" = type { %"struct.std::__1::__hash_node_base.1101" }
%"class.std::__1::__compressed_pair.1113" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.1116" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::atomic.1122" = type { %"struct.std::__1::__atomic_base.1123" }
%"struct.std::__1::__atomic_base.1123" = type { %"struct.std::__1::__cxx_atomic_impl.1124" }
%"struct.std::__1::__cxx_atomic_impl.1124" = type { %"struct.std::__1::__cxx_atomic_base_impl.1125" }
%"struct.std::__1::__cxx_atomic_base_impl.1125" = type { %"class.std::__1::vector.1126"* }
%"class.std::__1::vector.1126" = type { %"class.std::__1::__vector_base.1127" }
%"class.std::__1::__vector_base.1127" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1128" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1128" = type { %"struct.std::__1::__compressed_pair_elem.1129" }
%"struct.std::__1::__compressed_pair_elem.1129" = type { %"struct.v8::MemoryRange"* }
%"struct.std::__1::atomic.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl.22" }
%"struct.std::__1::__cxx_atomic_impl.22" = type { %"struct.std::__1::__cxx_atomic_base_impl.23" }
%"struct.std::__1::__cxx_atomic_base_impl.23" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.24" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.92" }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.std::__1::vector.92" = type { %"class.std::__1::__vector_base.93" }
%"class.std::__1::__vector_base.93" = type { %"struct.std::__1::pair.94"*, %"struct.std::__1::pair.94"*, %"class.std::__1::__compressed_pair.95" }
%"struct.std::__1::pair.94" = type { i32, i64 }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"struct.std::__1::pair.94"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic", i32, %"struct.std::__1::atomic", %"class.v8::base::Mutex", %"struct.std::__1::atomic" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.100" }
%"class.std::__1::unordered_map.100" = type { %"class.std::__1::__hash_table.101" }
%"class.std::__1::__hash_table.101" = type <{ %"class.std::__1::unique_ptr.102", %"class.std::__1::__compressed_pair.112", %"class.std::__1::__compressed_pair.117", %"class.std::__1::__compressed_pair.122", [4 x i8] }>
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104", %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"struct.std::__1::__hash_node_base.105"** }
%"struct.std::__1::__hash_node_base.105" = type { %"struct.std::__1::__hash_node_base.105"* }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"class.std::__1::__bucket_list_deallocator.107" }
%"class.std::__1::__bucket_list_deallocator.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"struct.std::__1::__hash_node_base.105" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.135" = type { %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.141", %"struct.std::__1::atomic.145", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic.145" = type { %"struct.std::__1::__atomic_base.146" }
%"struct.std::__1::__atomic_base.146" = type { %"struct.std::__1::__cxx_atomic_impl.147" }
%"struct.std::__1::__cxx_atomic_impl.147" = type { %"struct.std::__1::__cxx_atomic_base_impl.148" }
%"struct.std::__1::__cxx_atomic_base_impl.148" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"struct.std::__1::atomic.150" = type { %"struct.std::__1::__atomic_base.151" }
%"struct.std::__1::__atomic_base.151" = type { %"struct.std::__1::__cxx_atomic_impl.152" }
%"struct.std::__1::__cxx_atomic_impl.152" = type { %"struct.std::__1::__cxx_atomic_base_impl.153" }
%"struct.std::__1::__cxx_atomic_base_impl.153" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.std::__1::vector.154" = type { %"class.std::__1::__vector_base.155" }
%"class.std::__1::__vector_base.155" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.156" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.167" = type { %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.209", %"class.std::__1::unique_ptr.215", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.269", %"class.std::__1::vector.269", %"class.std::__1::vector.269", %"class.std::__1::vector.276", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.170", %"class.std::__1::vector.171", %"class.std::__1::vector.178", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.170" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type { %"class.heap::base::internal::SegmentBase", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, [16 x %"class.v8::internal::HeapObject"] }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.std::__1::vector.171" = type { %"class.std::__1::__vector_base.172" }
%"class.std::__1::__vector_base.172" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.173" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.178" = type { %"class.std::__1::__vector_base.179" }
%"class.std::__1::__vector_base.179" = type { %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"*, %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::unique_ptr.180" = type opaque
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.std::__1::unique_ptr.180"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type { %"class.heap::base::internal::SegmentBase", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, [64 x %"class.v8::internal::HeapObject"] }
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.186", %"class.v8::internal::Worklist.188", %"class.v8::internal::Worklist.188", %"class.v8::internal::Worklist.188", %"class.v8::internal::Worklist.190", %"class.v8::internal::Worklist.192", %"class.v8::internal::Worklist.194", %"class.v8::internal::Worklist.196", %"class.v8::internal::Worklist.198", %"class.v8::internal::Worklist.200" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, i64, [64 x %"class.v8::internal::TransitionArray"] }
%"class.v8::internal::TransitionArray" = type { %"class.v8::internal::WeakFixedArray" }
%"class.v8::internal::WeakFixedArray" = type { %"class.v8::internal::TorqueGeneratedWeakFixedArray" }
%"class.v8::internal::TorqueGeneratedWeakFixedArray" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.186" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.188" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.190" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.192" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.194" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.196" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.198" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.200" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.202", i8, i64 }
%"class.std::__1::vector.202" = type { %"class.std::__1::__vector_base.203" }
%"class.std::__1::__vector_base.203" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.204" }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.205" }
%"struct.std::__1::__compressed_pair_elem.205" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.209" = type { %"class.std::__1::__compressed_pair.210" }
%"class.std::__1::__compressed_pair.210" = type { %"struct.std::__1::__compressed_pair_elem.211" }
%"struct.std::__1::__compressed_pair_elem.211" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.215" = type { %"class.std::__1::__compressed_pair.216" }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.218" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.170"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.218" = type { %"class.std::__1::__hash_table.219" }
%"class.std::__1::__hash_table.219" = type <{ %"class.std::__1::unique_ptr.220", %"class.std::__1::__compressed_pair.230", %"class.std::__1::__compressed_pair.235", %"class.std::__1::__compressed_pair.238", [4 x i8] }>
%"class.std::__1::unique_ptr.220" = type { %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222", %"struct.std::__1::__compressed_pair_elem.224" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"struct.std::__1::__hash_node_base.223"** }
%"struct.std::__1::__hash_node_base.223" = type { %"struct.std::__1::__hash_node_base.223"* }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"class.std::__1::__bucket_list_deallocator.225" }
%"class.std::__1::__bucket_list_deallocator.225" = type { %"class.std::__1::__compressed_pair.226" }
%"class.std::__1::__compressed_pair.226" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"struct.std::__1::__hash_node_base.223" }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.238" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.245" }
%"class.std::__1::unordered_map.245" = type { %"class.std::__1::__hash_table.246" }
%"class.std::__1::__hash_table.246" = type <{ %"class.std::__1::unique_ptr.247", %"class.std::__1::__compressed_pair.257", %"class.std::__1::__compressed_pair.262", %"class.std::__1::__compressed_pair.265", [4 x i8] }>
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249", %"struct.std::__1::__compressed_pair_elem.251" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"struct.std::__1::__hash_node_base.250"** }
%"struct.std::__1::__hash_node_base.250" = type { %"struct.std::__1::__hash_node_base.250"* }
%"struct.std::__1::__compressed_pair_elem.251" = type { %"class.std::__1::__bucket_list_deallocator.252" }
%"class.std::__1::__bucket_list_deallocator.252" = type { %"class.std::__1::__compressed_pair.253" }
%"class.std::__1::__compressed_pair.253" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.257" = type { %"struct.std::__1::__compressed_pair_elem.258" }
%"struct.std::__1::__compressed_pair_elem.258" = type { %"struct.std::__1::__hash_node_base.250" }
%"class.std::__1::__compressed_pair.262" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.265" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::vector.269" = type { %"class.std::__1::__vector_base.270" }
%"class.std::__1::__vector_base.270" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.271" }
%"class.std::__1::__compressed_pair.271" = type { %"struct.std::__1::__compressed_pair_elem.272" }
%"struct.std::__1::__compressed_pair_elem.272" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.276" = type { %"class.std::__1::__vector_base.277" }
%"class.std::__1::__vector_base.277" = type { %"struct.std::__1::pair.278"*, %"struct.std::__1::pair.278"*, %"class.std::__1::__compressed_pair.279" }
%"struct.std::__1::pair.278" = type opaque
%"class.std::__1::__compressed_pair.279" = type { %"struct.std::__1::__compressed_pair_elem.280" }
%"struct.std::__1::__compressed_pair_elem.280" = type { %"struct.std::__1::pair.278"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.284", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.269"], [3 x %"class.std::__1::vector.269"], i8, %"struct.std::__1::atomic.141", [6 x i8], %"class.std::__1::vector.269", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.284" = type { %"class.std::__1::__compressed_pair.285" }
%"class.std::__1::__compressed_pair.285" = type { %"struct.std::__1::__compressed_pair_elem.286" }
%"struct.std::__1::__compressed_pair_elem.286" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.294"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.269", %"class.std::__1::vector.269", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.294" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::HeapObject, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::HeapObject, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::HeapObject, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::HeapObject, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::HeapObject, 64>::Segment" = type { %"class.v8::internal::Worklist<v8::internal::HeapObject, 64>::Segment"*, i64, [64 x %"class.v8::internal::HeapObject"] }
%"class.v8::internal::Worklist<v8::internal::HeapObject, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.298" = type { %"class.std::__1::__compressed_pair.299" }
%"class.std::__1::__compressed_pair.299" = type { %"struct.std::__1::__compressed_pair_elem.300" }
%"struct.std::__1::__compressed_pair_elem.300" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.304" = type { %"class.std::__1::__compressed_pair.305" }
%"class.std::__1::__compressed_pair.305" = type { %"struct.std::__1::__compressed_pair_elem.306" }
%"struct.std::__1::__compressed_pair_elem.306" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.310" = type { %"class.std::__1::__compressed_pair.311" }
%"class.std::__1::__compressed_pair.311" = type { %"struct.std::__1::__compressed_pair_elem.312" }
%"struct.std::__1::__compressed_pair_elem.312" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.320", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.313"], %"class.std::__1::unique_ptr.284" }
%"class.std::__1::vector.313" = type { %"class.std::__1::__vector_base.314" }
%"class.std::__1::__vector_base.314" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.315" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.349" = type { %"class.std::__1::__compressed_pair.350" }
%"class.std::__1::__compressed_pair.350" = type { %"struct.std::__1::__compressed_pair_elem.351" }
%"struct.std::__1::__compressed_pair_elem.351" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.352", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.356", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.361" }
%"struct.std::__1::atomic.352" = type { %"struct.std::__1::__atomic_base.353" }
%"struct.std::__1::__atomic_base.353" = type { %"struct.std::__1::__cxx_atomic_impl.354" }
%"struct.std::__1::__cxx_atomic_impl.354" = type { %"struct.std::__1::__cxx_atomic_base_impl.355" }
%"struct.std::__1::__cxx_atomic_base_impl.355" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.356" = type { %"struct.std::__1::__atomic_base.357" }
%"struct.std::__1::__atomic_base.357" = type { %"struct.std::__1::__cxx_atomic_impl.358" }
%"struct.std::__1::__cxx_atomic_impl.358" = type { %"struct.std::__1::__cxx_atomic_base_impl.359" }
%"struct.std::__1::__cxx_atomic_base_impl.359" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.361" = type { %"class.std::__1::__hash_table.362" }
%"class.std::__1::__hash_table.362" = type <{ %"class.std::__1::unique_ptr.363", %"class.std::__1::__compressed_pair.373", %"class.std::__1::__compressed_pair.378", %"class.std::__1::__compressed_pair.381", [4 x i8] }>
%"class.std::__1::unique_ptr.363" = type { %"class.std::__1::__compressed_pair.364" }
%"class.std::__1::__compressed_pair.364" = type { %"struct.std::__1::__compressed_pair_elem.365", %"struct.std::__1::__compressed_pair_elem.367" }
%"struct.std::__1::__compressed_pair_elem.365" = type { %"struct.std::__1::__hash_node_base.366"** }
%"struct.std::__1::__hash_node_base.366" = type { %"struct.std::__1::__hash_node_base.366"* }
%"struct.std::__1::__compressed_pair_elem.367" = type { %"class.std::__1::__bucket_list_deallocator.368" }
%"class.std::__1::__bucket_list_deallocator.368" = type { %"class.std::__1::__compressed_pair.369" }
%"class.std::__1::__compressed_pair.369" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.373" = type { %"struct.std::__1::__compressed_pair_elem.374" }
%"struct.std::__1::__compressed_pair_elem.374" = type { %"struct.std::__1::__hash_node_base.366" }
%"class.std::__1::__compressed_pair.378" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.381" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::unique_ptr.388" = type { %"class.std::__1::__compressed_pair.389" }
%"class.std::__1::__compressed_pair.389" = type { %"struct.std::__1::__compressed_pair_elem.390" }
%"struct.std::__1::__compressed_pair_elem.390" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.284", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic", %"struct.std::__1::atomic.141", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.391", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.391" = type { %"class.std::__1::__hash_table.392" }
%"class.std::__1::__hash_table.392" = type <{ %"class.std::__1::unique_ptr.393", %"class.std::__1::__compressed_pair.403", %"class.std::__1::__compressed_pair.408", %"class.std::__1::__compressed_pair.411", [4 x i8] }>
%"class.std::__1::unique_ptr.393" = type { %"class.std::__1::__compressed_pair.394" }
%"class.std::__1::__compressed_pair.394" = type { %"struct.std::__1::__compressed_pair_elem.395", %"struct.std::__1::__compressed_pair_elem.397" }
%"struct.std::__1::__compressed_pair_elem.395" = type { %"struct.std::__1::__hash_node_base.396"** }
%"struct.std::__1::__hash_node_base.396" = type { %"struct.std::__1::__hash_node_base.396"* }
%"struct.std::__1::__compressed_pair_elem.397" = type { %"class.std::__1::__bucket_list_deallocator.398" }
%"class.std::__1::__bucket_list_deallocator.398" = type { %"class.std::__1::__compressed_pair.399" }
%"class.std::__1::__compressed_pair.399" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.403" = type { %"struct.std::__1::__compressed_pair_elem.404" }
%"struct.std::__1::__compressed_pair_elem.404" = type { %"struct.std::__1::__hash_node_base.396" }
%"class.std::__1::__compressed_pair.408" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.411" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::unique_ptr.418" = type { %"class.std::__1::__compressed_pair.419" }
%"class.std::__1::__compressed_pair.419" = type { %"struct.std::__1::__compressed_pair_elem.420" }
%"struct.std::__1::__compressed_pair_elem.420" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.424" = type { %"class.std::__1::__compressed_pair.425" }
%"class.std::__1::__compressed_pair.425" = type { %"struct.std::__1::__compressed_pair_elem.426" }
%"struct.std::__1::__compressed_pair_elem.426" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.427" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.427" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::unique_ptr.434" = type { %"class.std::__1::__compressed_pair.435" }
%"class.std::__1::__compressed_pair.435" = type { %"struct.std::__1::__compressed_pair_elem.436" }
%"struct.std::__1::__compressed_pair_elem.436" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.440" = type { %"class.std::__1::__compressed_pair.441" }
%"class.std::__1::__compressed_pair.441" = type { %"struct.std::__1::__compressed_pair_elem.442" }
%"struct.std::__1::__compressed_pair_elem.442" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.446" = type { %"class.std::__1::__compressed_pair.447" }
%"class.std::__1::__compressed_pair.447" = type { %"struct.std::__1::__compressed_pair_elem.448" }
%"struct.std::__1::__compressed_pair_elem.448" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.452" = type { %"class.std::__1::__compressed_pair.453" }
%"class.std::__1::__compressed_pair.453" = type { %"struct.std::__1::__compressed_pair_elem.454" }
%"struct.std::__1::__compressed_pair_elem.454" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.458" = type { %"class.std::__1::__compressed_pair.459" }
%"class.std::__1::__compressed_pair.459" = type { %"struct.std::__1::__compressed_pair_elem.460" }
%"struct.std::__1::__compressed_pair_elem.460" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::EmbedderHeapTracer"*, %"class.v8::internal::DefaultEmbedderRootsHandler", i32, i8, [3 x i8], %"struct.v8::internal::LocalEmbedderHeapTracer::RemoteStatistics", %"struct.v8::WrapperDescriptor", [4 x i8] }>
%"class.v8::EmbedderHeapTracer" = type { i32 (...)**, %"class.v8::Isolate"* }
%"class.v8::internal::DefaultEmbedderRootsHandler" = type { %"class.v8::EmbedderRootsHandler", %"class.v8::EmbedderHeapTracer"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.v8::internal::LocalEmbedderHeapTracer::RemoteStatistics" = type { i64, i64, i64 }
%"struct.v8::WrapperDescriptor" = type <{ i32, i32, i16, [2 x i8] }>
%"class.std::__1::unique_ptr.464" = type { %"class.std::__1::__compressed_pair.465" }
%"class.std::__1::__compressed_pair.465" = type { %"struct.std::__1::__compressed_pair_elem.466" }
%"struct.std::__1::__compressed_pair_elem.466" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.470" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.489", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.471", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.489" = type { %"struct.std::__1::__atomic_base.490" }
%"struct.std::__1::__atomic_base.490" = type { %"struct.std::__1::__cxx_atomic_impl.491" }
%"struct.std::__1::__cxx_atomic_impl.491" = type { %"struct.std::__1::__cxx_atomic_base_impl.492" }
%"struct.std::__1::__cxx_atomic_base_impl.492" = type { i8* }
%"class.v8::CppHeap" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.493" = type { %"class.std::__1::__hash_table.494" }
%"class.std::__1::__hash_table.494" = type <{ %"class.std::__1::unique_ptr.495", %"class.std::__1::__compressed_pair.505", %"class.std::__1::__compressed_pair.510", %"class.std::__1::__compressed_pair.513", [4 x i8] }>
%"class.std::__1::unique_ptr.495" = type { %"class.std::__1::__compressed_pair.496" }
%"class.std::__1::__compressed_pair.496" = type { %"struct.std::__1::__compressed_pair_elem.497", %"struct.std::__1::__compressed_pair_elem.499" }
%"struct.std::__1::__compressed_pair_elem.497" = type { %"struct.std::__1::__hash_node_base.498"** }
%"struct.std::__1::__hash_node_base.498" = type { %"struct.std::__1::__hash_node_base.498"* }
%"struct.std::__1::__compressed_pair_elem.499" = type { %"class.std::__1::__bucket_list_deallocator.500" }
%"class.std::__1::__bucket_list_deallocator.500" = type { %"class.std::__1::__compressed_pair.501" }
%"class.std::__1::__compressed_pair.501" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.505" = type { %"struct.std::__1::__compressed_pair_elem.506" }
%"struct.std::__1::__compressed_pair_elem.506" = type { %"struct.std::__1::__hash_node_base.498" }
%"class.std::__1::__compressed_pair.510" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.513" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::unique_ptr.519" = type { %"class.std::__1::__compressed_pair.520" }
%"class.std::__1::__compressed_pair.520" = type { %"struct.std::__1::__compressed_pair_elem.521" }
%"struct.std::__1::__compressed_pair_elem.521" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.525" = type { %"class.std::__1::__compressed_pair.526" }
%"class.std::__1::__compressed_pair.526" = type { %"struct.std::__1::__compressed_pair_elem.527" }
%"struct.std::__1::__compressed_pair_elem.527" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.531", %"class.std::__1::vector.531" }
%"class.std::__1::unique_ptr.538" = type { %"class.std::__1::__compressed_pair.539" }
%"class.std::__1::__compressed_pair.539" = type { %"struct.std::__1::__compressed_pair_elem.540" }
%"struct.std::__1::__compressed_pair_elem.540" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set.320" = type { %"class.std::__1::__hash_table.321" }
%"class.std::__1::__hash_table.321" = type <{ %"class.std::__1::unique_ptr.322", %"class.std::__1::__compressed_pair.332", %"class.std::__1::__compressed_pair.337", %"class.std::__1::__compressed_pair.341", [4 x i8] }>
%"class.std::__1::unique_ptr.322" = type { %"class.std::__1::__compressed_pair.323" }
%"class.std::__1::__compressed_pair.323" = type { %"struct.std::__1::__compressed_pair_elem.324", %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.324" = type { %"struct.std::__1::__hash_node_base.325"** }
%"struct.std::__1::__hash_node_base.325" = type { %"struct.std::__1::__hash_node_base.325"* }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.std::__1::__bucket_list_deallocator.327" }
%"class.std::__1::__bucket_list_deallocator.327" = type { %"class.std::__1::__compressed_pair.328" }
%"class.std::__1::__compressed_pair.328" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.332" = type { %"struct.std::__1::__compressed_pair_elem.333" }
%"struct.std::__1::__compressed_pair_elem.333" = type { %"struct.std::__1::__hash_node_base.325" }
%"class.std::__1::__compressed_pair.337" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.341" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::unordered_map.570" = type { %"class.std::__1::__hash_table.571" }
%"class.std::__1::__hash_table.571" = type <{ %"class.std::__1::unique_ptr.572", %"class.std::__1::__compressed_pair.582", %"class.std::__1::__compressed_pair.587", %"class.std::__1::__compressed_pair.590", [4 x i8] }>
%"class.std::__1::unique_ptr.572" = type { %"class.std::__1::__compressed_pair.573" }
%"class.std::__1::__compressed_pair.573" = type { %"struct.std::__1::__compressed_pair_elem.574", %"struct.std::__1::__compressed_pair_elem.576" }
%"struct.std::__1::__compressed_pair_elem.574" = type { %"struct.std::__1::__hash_node_base.575"** }
%"struct.std::__1::__hash_node_base.575" = type { %"struct.std::__1::__hash_node_base.575"* }
%"struct.std::__1::__compressed_pair_elem.576" = type { %"class.std::__1::__bucket_list_deallocator.577" }
%"class.std::__1::__bucket_list_deallocator.577" = type { %"class.std::__1::__compressed_pair.578" }
%"class.std::__1::__compressed_pair.578" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.582" = type { %"struct.std::__1::__compressed_pair_elem.583" }
%"struct.std::__1::__compressed_pair_elem.583" = type { %"struct.std::__1::__hash_node_base.575" }
%"class.std::__1::__compressed_pair.587" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.590" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::unordered_map.544" = type { %"class.std::__1::__hash_table.545" }
%"class.std::__1::__hash_table.545" = type <{ %"class.std::__1::unique_ptr.546", %"class.std::__1::__compressed_pair.556", %"class.std::__1::__compressed_pair.561", %"class.std::__1::__compressed_pair.564", [4 x i8] }>
%"class.std::__1::unique_ptr.546" = type { %"class.std::__1::__compressed_pair.547" }
%"class.std::__1::__compressed_pair.547" = type { %"struct.std::__1::__compressed_pair_elem.548", %"struct.std::__1::__compressed_pair_elem.550" }
%"struct.std::__1::__compressed_pair_elem.548" = type { %"struct.std::__1::__hash_node_base.549"** }
%"struct.std::__1::__hash_node_base.549" = type { %"struct.std::__1::__hash_node_base.549"* }
%"struct.std::__1::__compressed_pair_elem.550" = type { %"class.std::__1::__bucket_list_deallocator.551" }
%"class.std::__1::__bucket_list_deallocator.551" = type { %"class.std::__1::__compressed_pair.552" }
%"class.std::__1::__compressed_pair.552" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.556" = type { %"struct.std::__1::__compressed_pair_elem.557" }
%"struct.std::__1::__compressed_pair_elem.557" = type { %"struct.std::__1::__hash_node_base.549" }
%"class.std::__1::__compressed_pair.561" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.564" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::unordered_map.594" = type { %"class.std::__1::__hash_table.595" }
%"class.std::__1::__hash_table.595" = type <{ %"class.std::__1::unique_ptr.596", %"class.std::__1::__compressed_pair.606", %"class.std::__1::__compressed_pair.611", %"class.std::__1::__compressed_pair.616", [4 x i8] }>
%"class.std::__1::unique_ptr.596" = type { %"class.std::__1::__compressed_pair.597" }
%"class.std::__1::__compressed_pair.597" = type { %"struct.std::__1::__compressed_pair_elem.598", %"struct.std::__1::__compressed_pair_elem.600" }
%"struct.std::__1::__compressed_pair_elem.598" = type { %"struct.std::__1::__hash_node_base.599"** }
%"struct.std::__1::__hash_node_base.599" = type { %"struct.std::__1::__hash_node_base.599"* }
%"struct.std::__1::__compressed_pair_elem.600" = type { %"class.std::__1::__bucket_list_deallocator.601" }
%"class.std::__1::__bucket_list_deallocator.601" = type { %"class.std::__1::__compressed_pair.602" }
%"class.std::__1::__compressed_pair.602" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.606" = type { %"struct.std::__1::__compressed_pair_elem.607" }
%"struct.std::__1::__compressed_pair_elem.607" = type { %"struct.std::__1::__hash_node_base.599" }
%"class.std::__1::__compressed_pair.611" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.616" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::vector.622" = type { %"class.std::__1::__vector_base.623" }
%"class.std::__1::__vector_base.623" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.624" }
%"class.std::__1::__compressed_pair.624" = type { %"struct.std::__1::__compressed_pair_elem.625" }
%"struct.std::__1::__compressed_pair_elem.625" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.629" = type { %"class.std::__1::__compressed_pair.630" }
%"class.std::__1::__compressed_pair.630" = type { %"struct.std::__1::__compressed_pair_elem.631" }
%"struct.std::__1::__compressed_pair_elem.631" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"class.v8::internal::WeakObjectRetainer" = type { i32 (...)** }
%"class.v8::internal::SlotSet::Bucket" = type { [32 x i32] }

$_ZN2v88internal13VisitWeakListINS0_7ContextEEENS0_6ObjectEPNS0_4HeapES3_PNS0_18WeakObjectRetainerE = comdat any

$_ZN2v88internal15WeakListVisitorINS0_7ContextEE15VisitLiveObjectEPNS0_4HeapES2_PNS0_18WeakObjectRetainerE = comdat any

$_ZN2v88internal15WeakListVisitorINS0_7ContextEE18VisitPhantomObjectEPNS0_4HeapES2_ = comdat any

$_ZN2v88internal13VisitWeakListINS0_14AllocationSiteEEENS0_6ObjectEPNS0_4HeapES3_PNS0_18WeakObjectRetainerE = comdat any

$_ZN2v88internal13VisitWeakListINS0_22JSFinalizationRegistryEEENS0_6ObjectEPNS0_4HeapES3_PNS0_18WeakObjectRetainerE = comdat any

$_ZN2v88internal15WeakListVisitorINS0_7ContextEE10DoWeakListINS0_4CodeEEEvPNS0_4HeapES2_PNS0_18WeakObjectRetainerEi = comdat any

$_ZN2v88internal13VisitWeakListINS0_4CodeEEENS0_6ObjectEPNS0_4HeapES3_PNS0_18WeakObjectRetainerE = comdat any

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZN2v88internal13VisitWeakListINS0_7ContextEEENS0_6ObjectEPNS0_4HeapES3_PNS0_18WeakObjectRetainerE(%"class.v8::internal::Heap"*, i64, %"class.v8::internal::WeakObjectRetainer"*) local_unnamed_addr #0 comdat {
  %4 = ptrtoint %"class.v8::internal::Heap"* %0 to i64
  %5 = add i64 %4, -41416
  %6 = inttoptr i64 %5 to %"class.v8::internal::Isolate"*
  %7 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %6, i64 0, i32 0, i32 7, i32 0, i64 4
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %0, i64 0, i32 42, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = icmp eq i32 %10, 2
  br i1 %11, label %12, label %18

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %0, i64 0, i32 81, i32 0, i32 0, i32 0
  %14 = load %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::MarkCompactCollector"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::MarkCompactCollector", %"class.v8::internal::MarkCompactCollector"* %14, i64 0, i32 6
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = icmp ne i8 %16, 0
  br label %18

18:                                               ; preds = %3, %12
  %19 = phi i1 [ false, %3 ], [ %17, %12 ]
  %20 = trunc i64 %1 to i32
  %21 = trunc i64 %8 to i32
  %22 = icmp eq i32 %20, %21
  br i1 %22, label %165, label %23

23:                                               ; preds = %18
  %24 = bitcast %"class.v8::internal::WeakObjectRetainer"* %2 to i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)***
  br label %25

25:                                               ; preds = %23, %138
  %26 = phi i64 [ %8, %23 ], [ %140, %138 ]
  %27 = phi i64 [ %1, %23 ], [ %38, %138 ]
  %28 = phi i64 [ 0, %23 ], [ %139, %138 ]
  %29 = load i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)**, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*** %24, align 8
  %30 = getelementptr inbounds i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)** %29, i64 2
  %31 = load i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)** %30, align 8
  %32 = tail call i64 %31(%"class.v8::internal::WeakObjectRetainer"* %2, i64 %27) #4
  %33 = and i64 %27, -4294967296
  %34 = add i64 %27, 1023
  %35 = inttoptr i64 %34 to i32*
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = zext i32 %36 to i64
  %38 = or i64 %33, %37
  %39 = trunc i64 %32 to i32
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %137, label %41

41:                                               ; preds = %25
  %42 = trunc i64 %26 to i32
  %43 = icmp eq i32 %42, %21
  br i1 %43, label %135, label %44

44:                                               ; preds = %41
  %45 = add i64 %28, 1023
  %46 = inttoptr i64 %45 to i32*
  store atomic volatile i32 %39, i32* %46 monotonic, align 4
  %47 = and i64 %32, 1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %64, label %49

49:                                               ; preds = %44
  %50 = and i64 %32, -262144
  %51 = or i64 %50, 8
  %52 = inttoptr i64 %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = and i64 %53, 24
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %64, label %56

56:                                               ; preds = %49
  %57 = and i64 %28, -262144
  %58 = or i64 %57, 8
  %59 = inttoptr i64 %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 24
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %56
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %28, i64 %45, i64 %32) #4
  br label %64

64:                                               ; preds = %44, %49, %56, %63
  br i1 %19, label %65, label %135

65:                                               ; preds = %64
  %66 = and i64 %32, -262144
  %67 = inttoptr i64 %66 to %"class.v8::internal::BasicMemoryChunk"*
  %68 = and i64 %28, -262144
  %69 = inttoptr i64 %68 to %"class.v8::internal::MemoryChunk"*
  %70 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %67, i64 0, i32 1
  %71 = load atomic i64, i64* %70 monotonic, align 8
  %72 = and i64 %71, 64
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %135, label %74

74:                                               ; preds = %65
  %75 = getelementptr inbounds %"class.v8::internal::MemoryChunk", %"class.v8::internal::MemoryChunk"* %69, i64 0, i32 0, i32 1
  %76 = load atomic i64, i64* %75 monotonic, align 8
  %77 = and i64 %76, 88
  %78 = icmp ne i64 %77, 0
  %79 = trunc i64 %76 to i16
  %80 = icmp sgt i16 %79, -1
  %81 = and i1 %80, %78
  br i1 %81, label %135, label %82

82:                                               ; preds = %74
  %83 = getelementptr inbounds %"class.v8::internal::MemoryChunk", %"class.v8::internal::MemoryChunk"* %69, i64 0, i32 1, i64 1
  %84 = bitcast %"class.v8::internal::SlotSet"** %83 to i64*
  %85 = load atomic i64, i64* %84 acquire, align 8
  %86 = inttoptr i64 %85 to %"class.v8::internal::SlotSet"*
  %87 = icmp eq i64 %85, 0
  br i1 %87, label %88, label %90

88:                                               ; preds = %82
  %89 = tail call %"class.v8::internal::SlotSet"* @_ZN2v88internal11MemoryChunk15AllocateSlotSetILNS0_17RememberedSetTypeE1EEEPNS0_7SlotSetEv(%"class.v8::internal::MemoryChunk"* %69) #4
  br label %90

90:                                               ; preds = %88, %82
  %91 = phi %"class.v8::internal::SlotSet"* [ %89, %88 ], [ %86, %82 ]
  %92 = sub i64 %45, %68
  %93 = lshr i64 %92, 2
  %94 = lshr i64 %92, 12
  %95 = lshr i64 %92, 7
  %96 = and i64 %95, 31
  %97 = trunc i64 %93 to i32
  %98 = and i32 %97, 31
  %99 = bitcast %"class.v8::internal::SlotSet"* %91 to %"class.v8::internal::SlotSet::Bucket"**
  %100 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket"*, %"class.v8::internal::SlotSet::Bucket"** %99, i64 %94
  %101 = bitcast %"class.v8::internal::SlotSet::Bucket"** %100 to i64*
  %102 = load atomic i64, i64* %101 acquire, align 8
  %103 = inttoptr i64 %102 to %"class.v8::internal::SlotSet::Bucket"*
  %104 = icmp eq i64 %102, 0
  br i1 %104, label %105, label %117

105:                                              ; preds = %90
  %106 = tail call i8* @_ZN2v88internal8MallocednwEm(i64 128) #4
  %107 = bitcast i8* %106 to %"class.v8::internal::SlotSet::Bucket"*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %106, i8 0, i64 128, i1 false) #4
  %108 = ptrtoint i8* %106 to i64
  %109 = cmpxchg volatile i64* %101, i64 0, i64 %108 release monotonic
  %110 = extractvalue { i64, i1 } %109, 1
  br i1 %110, label %117, label %111

111:                                              ; preds = %105
  %112 = icmp eq i8* %106, null
  br i1 %112, label %114, label %113

113:                                              ; preds = %111
  tail call void @_ZN2v88internal8MalloceddlEPv(i8* nonnull %106) #4
  br label %114

114:                                              ; preds = %113, %111
  %115 = load atomic i64, i64* %101 acquire, align 8
  %116 = inttoptr i64 %115 to %"class.v8::internal::SlotSet::Bucket"*
  br label %117

117:                                              ; preds = %114, %105, %90
  %118 = phi %"class.v8::internal::SlotSet::Bucket"* [ %107, %105 ], [ %116, %114 ], [ %103, %90 ]
  %119 = shl i32 1, %98
  %120 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket", %"class.v8::internal::SlotSet::Bucket"* %118, i64 0, i32 0, i64 %96
  %121 = load atomic i32, i32* %120 acquire, align 4
  %122 = and i32 %121, %119
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %135

124:                                              ; preds = %117
  %125 = load atomic i32, i32* %120 monotonic, align 4
  br label %126

126:                                              ; preds = %130, %124
  %127 = phi i32 [ %125, %124 ], [ %133, %130 ]
  %128 = and i32 %127, %119
  %129 = icmp eq i32 %128, %119
  br i1 %129, label %135, label %130

130:                                              ; preds = %126
  %131 = or i32 %127, %119
  %132 = cmpxchg volatile i32* %120, i32 %127, i32 %131 release monotonic
  %133 = extractvalue { i32, i1 } %132, 0
  %134 = extractvalue { i32, i1 } %132, 1
  br i1 %134, label %135, label %126

135:                                              ; preds = %130, %126, %117, %74, %65, %41, %64
  %136 = phi i64 [ %26, %64 ], [ %32, %41 ], [ %26, %65 ], [ %26, %74 ], [ %26, %117 ], [ %26, %126 ], [ %26, %130 ]
  tail call void @_ZN2v88internal15WeakListVisitorINS0_7ContextEE15VisitLiveObjectEPNS0_4HeapES2_PNS0_18WeakObjectRetainerE(%"class.v8::internal::Heap"* %0, i64 %32, %"class.v8::internal::WeakObjectRetainer"* %2)
  br label %138

137:                                              ; preds = %25
  tail call void @_ZN2v88internal15WeakListVisitorINS0_7ContextEE18VisitPhantomObjectEPNS0_4HeapES2_(%"class.v8::internal::Heap"* %0, i64 %27)
  br label %138

138:                                              ; preds = %137, %135
  %139 = phi i64 [ %32, %135 ], [ %28, %137 ]
  %140 = phi i64 [ %136, %135 ], [ %26, %137 ]
  %141 = icmp eq i32 %36, %21
  br i1 %141, label %142, label %25

142:                                              ; preds = %138
  %143 = trunc i64 %139 to i32
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %165, label %145

145:                                              ; preds = %142
  %146 = add i64 %139, 1023
  %147 = inttoptr i64 %146 to i32*
  store atomic volatile i32 %21, i32* %147 monotonic, align 4
  %148 = and i64 %8, 1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %165, label %150

150:                                              ; preds = %145
  %151 = and i64 %8, -262144
  %152 = or i64 %151, 8
  %153 = inttoptr i64 %152 to i64*
  %154 = load i64, i64* %153, align 8
  %155 = and i64 %154, 24
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %165, label %157

157:                                              ; preds = %150
  %158 = and i64 %139, -262144
  %159 = or i64 %158, 8
  %160 = inttoptr i64 %159 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = and i64 %161, 24
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %157
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %139, i64 %146, i64 %8) #4
  br label %165

165:                                              ; preds = %18, %164, %157, %150, %145, %142
  %166 = phi i64 [ %140, %164 ], [ %140, %157 ], [ %140, %150 ], [ %140, %145 ], [ %140, %142 ], [ %8, %18 ]
  ret i64 %166
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal15WeakListVisitorINS0_7ContextEE15VisitLiveObjectEPNS0_4HeapES2_PNS0_18WeakObjectRetainerE(%"class.v8::internal::Heap"*, i64, %"class.v8::internal::WeakObjectRetainer"*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %0, i64 0, i32 42, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = icmp eq i32 %5, 2
  br i1 %6, label %7, label %96

7:                                                ; preds = %3
  %8 = and i64 %1, -262144
  %9 = inttoptr i64 %8 to %"class.v8::internal::MemoryChunk"*
  %10 = getelementptr inbounds %"class.v8::internal::MemoryChunk", %"class.v8::internal::MemoryChunk"* %9, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.v8::internal::MemoryChunk", %"class.v8::internal::MemoryChunk"* %9, i64 0, i32 1, i64 1
  %12 = bitcast %"class.v8::internal::SlotSet"** %11 to i64*
  %13 = add i64 %1, 1015
  %14 = inttoptr i64 %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = and i64 %13, -4294967296
  %17 = and i32 %15, -262144
  %18 = zext i32 %17 to i64
  %19 = or i64 %16, %18
  %20 = inttoptr i64 %19 to %"class.v8::internal::BasicMemoryChunk"*
  %21 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %20, i64 0, i32 1
  %22 = load atomic i64, i64* %21 monotonic, align 8
  %23 = and i64 %22, 64
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %83, label %25

25:                                               ; preds = %7
  %26 = load atomic i64, i64* %10 monotonic, align 8
  %27 = and i64 %26, 88
  %28 = icmp ne i64 %27, 0
  %29 = trunc i64 %26 to i16
  %30 = icmp sgt i16 %29, -1
  %31 = and i1 %30, %28
  br i1 %31, label %83, label %32

32:                                               ; preds = %25
  %33 = load atomic i64, i64* %12 acquire, align 8
  %34 = inttoptr i64 %33 to %"class.v8::internal::SlotSet"*
  %35 = icmp eq i64 %33, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %32
  %37 = tail call %"class.v8::internal::SlotSet"* @_ZN2v88internal11MemoryChunk15AllocateSlotSetILNS0_17RememberedSetTypeE1EEEPNS0_7SlotSetEv(%"class.v8::internal::MemoryChunk"* %9) #4
  br label %38

38:                                               ; preds = %36, %32
  %39 = phi %"class.v8::internal::SlotSet"* [ %37, %36 ], [ %34, %32 ]
  %40 = sub i64 %13, %8
  %41 = lshr i64 %40, 2
  %42 = lshr i64 %40, 12
  %43 = lshr i64 %40, 7
  %44 = and i64 %43, 31
  %45 = trunc i64 %41 to i32
  %46 = and i32 %45, 31
  %47 = bitcast %"class.v8::internal::SlotSet"* %39 to %"class.v8::internal::SlotSet::Bucket"**
  %48 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket"*, %"class.v8::internal::SlotSet::Bucket"** %47, i64 %42
  %49 = bitcast %"class.v8::internal::SlotSet::Bucket"** %48 to i64*
  %50 = load atomic i64, i64* %49 acquire, align 8
  %51 = inttoptr i64 %50 to %"class.v8::internal::SlotSet::Bucket"*
  %52 = icmp eq i64 %50, 0
  br i1 %52, label %53, label %65

53:                                               ; preds = %38
  %54 = tail call i8* @_ZN2v88internal8MallocednwEm(i64 128) #4
  %55 = bitcast i8* %54 to %"class.v8::internal::SlotSet::Bucket"*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %54, i8 0, i64 128, i1 false) #4
  %56 = ptrtoint i8* %54 to i64
  %57 = cmpxchg volatile i64* %49, i64 0, i64 %56 release monotonic
  %58 = extractvalue { i64, i1 } %57, 1
  br i1 %58, label %65, label %59

59:                                               ; preds = %53
  %60 = icmp eq i8* %54, null
  br i1 %60, label %62, label %61

61:                                               ; preds = %59
  tail call void @_ZN2v88internal8MalloceddlEPv(i8* nonnull %54) #4
  br label %62

62:                                               ; preds = %61, %59
  %63 = load atomic i64, i64* %49 acquire, align 8
  %64 = inttoptr i64 %63 to %"class.v8::internal::SlotSet::Bucket"*
  br label %65

65:                                               ; preds = %62, %53, %38
  %66 = phi %"class.v8::internal::SlotSet::Bucket"* [ %55, %53 ], [ %64, %62 ], [ %51, %38 ]
  %67 = shl i32 1, %46
  %68 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket", %"class.v8::internal::SlotSet::Bucket"* %66, i64 0, i32 0, i64 %44
  %69 = load atomic i32, i32* %68 acquire, align 4
  %70 = and i32 %69, %67
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %83

72:                                               ; preds = %65
  %73 = load atomic i32, i32* %68 monotonic, align 4
  br label %74

74:                                               ; preds = %78, %72
  %75 = phi i32 [ %73, %72 ], [ %81, %78 ]
  %76 = and i32 %75, %67
  %77 = icmp eq i32 %76, %67
  br i1 %77, label %83, label %78

78:                                               ; preds = %74
  %79 = or i32 %75, %67
  %80 = cmpxchg volatile i32* %68, i32 %75, i32 %79 release monotonic
  %81 = extractvalue { i32, i1 } %80, 0
  %82 = extractvalue { i32, i1 } %80, 1
  br i1 %82, label %83, label %74

83:                                               ; preds = %74, %78, %7, %25, %65
  %84 = add i64 %1, 1019
  %85 = inttoptr i64 %84 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = and i64 %84, -4294967296
  %88 = and i32 %86, -262144
  %89 = zext i32 %88 to i64
  %90 = or i64 %87, %89
  %91 = inttoptr i64 %90 to %"class.v8::internal::BasicMemoryChunk"*
  %92 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %91, i64 0, i32 1
  %93 = load atomic i64, i64* %92 monotonic, align 8
  %94 = and i64 %93, 64
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %155, label %97

96:                                               ; preds = %226, %3
  ret void

97:                                               ; preds = %83
  %98 = load atomic i64, i64* %10 monotonic, align 8
  %99 = and i64 %98, 88
  %100 = icmp ne i64 %99, 0
  %101 = trunc i64 %98 to i16
  %102 = icmp sgt i16 %101, -1
  %103 = and i1 %102, %100
  br i1 %103, label %155, label %104

104:                                              ; preds = %97
  %105 = load atomic i64, i64* %12 acquire, align 8
  %106 = inttoptr i64 %105 to %"class.v8::internal::SlotSet"*
  %107 = icmp eq i64 %105, 0
  br i1 %107, label %108, label %110

108:                                              ; preds = %104
  %109 = tail call %"class.v8::internal::SlotSet"* @_ZN2v88internal11MemoryChunk15AllocateSlotSetILNS0_17RememberedSetTypeE1EEEPNS0_7SlotSetEv(%"class.v8::internal::MemoryChunk"* %9) #4
  br label %110

110:                                              ; preds = %108, %104
  %111 = phi %"class.v8::internal::SlotSet"* [ %109, %108 ], [ %106, %104 ]
  %112 = sub i64 %84, %8
  %113 = lshr i64 %112, 2
  %114 = lshr i64 %112, 12
  %115 = lshr i64 %112, 7
  %116 = and i64 %115, 31
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 31
  %119 = bitcast %"class.v8::internal::SlotSet"* %111 to %"class.v8::internal::SlotSet::Bucket"**
  %120 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket"*, %"class.v8::internal::SlotSet::Bucket"** %119, i64 %114
  %121 = bitcast %"class.v8::internal::SlotSet::Bucket"** %120 to i64*
  %122 = load atomic i64, i64* %121 acquire, align 8
  %123 = inttoptr i64 %122 to %"class.v8::internal::SlotSet::Bucket"*
  %124 = icmp eq i64 %122, 0
  br i1 %124, label %125, label %137

125:                                              ; preds = %110
  %126 = tail call i8* @_ZN2v88internal8MallocednwEm(i64 128) #4
  %127 = bitcast i8* %126 to %"class.v8::internal::SlotSet::Bucket"*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %126, i8 0, i64 128, i1 false) #4
  %128 = ptrtoint i8* %126 to i64
  %129 = cmpxchg volatile i64* %121, i64 0, i64 %128 release monotonic
  %130 = extractvalue { i64, i1 } %129, 1
  br i1 %130, label %137, label %131

131:                                              ; preds = %125
  %132 = icmp eq i8* %126, null
  br i1 %132, label %134, label %133

133:                                              ; preds = %131
  tail call void @_ZN2v88internal8MalloceddlEPv(i8* nonnull %126) #4
  br label %134

134:                                              ; preds = %133, %131
  %135 = load atomic i64, i64* %121 acquire, align 8
  %136 = inttoptr i64 %135 to %"class.v8::internal::SlotSet::Bucket"*
  br label %137

137:                                              ; preds = %134, %125, %110
  %138 = phi %"class.v8::internal::SlotSet::Bucket"* [ %127, %125 ], [ %136, %134 ], [ %123, %110 ]
  %139 = shl i32 1, %118
  %140 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket", %"class.v8::internal::SlotSet::Bucket"* %138, i64 0, i32 0, i64 %116
  %141 = load atomic i32, i32* %140 acquire, align 4
  %142 = and i32 %141, %139
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %155

144:                                              ; preds = %137
  %145 = load atomic i32, i32* %140 monotonic, align 4
  br label %146

146:                                              ; preds = %150, %144
  %147 = phi i32 [ %145, %144 ], [ %153, %150 ]
  %148 = and i32 %147, %139
  %149 = icmp eq i32 %148, %139
  br i1 %149, label %155, label %150

150:                                              ; preds = %146
  %151 = or i32 %147, %139
  %152 = cmpxchg volatile i32* %140, i32 %147, i32 %151 release monotonic
  %153 = extractvalue { i32, i1 } %152, 0
  %154 = extractvalue { i32, i1 } %152, 1
  br i1 %154, label %155, label %146

155:                                              ; preds = %146, %150, %137, %97, %83
  %156 = add i64 %1, 1023
  %157 = inttoptr i64 %156 to i32*
  %158 = load i32, i32* %157, align 4
  %159 = and i64 %156, -4294967296
  %160 = and i32 %158, -262144
  %161 = zext i32 %160 to i64
  %162 = or i64 %159, %161
  %163 = inttoptr i64 %162 to %"class.v8::internal::BasicMemoryChunk"*
  %164 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %163, i64 0, i32 1
  %165 = load atomic i64, i64* %164 monotonic, align 8
  %166 = and i64 %165, 64
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %226, label %168

168:                                              ; preds = %155
  %169 = load atomic i64, i64* %10 monotonic, align 8
  %170 = and i64 %169, 88
  %171 = icmp ne i64 %170, 0
  %172 = trunc i64 %169 to i16
  %173 = icmp sgt i16 %172, -1
  %174 = and i1 %173, %171
  br i1 %174, label %226, label %175

175:                                              ; preds = %168
  %176 = load atomic i64, i64* %12 acquire, align 8
  %177 = inttoptr i64 %176 to %"class.v8::internal::SlotSet"*
  %178 = icmp eq i64 %176, 0
  br i1 %178, label %179, label %181

179:                                              ; preds = %175
  %180 = tail call %"class.v8::internal::SlotSet"* @_ZN2v88internal11MemoryChunk15AllocateSlotSetILNS0_17RememberedSetTypeE1EEEPNS0_7SlotSetEv(%"class.v8::internal::MemoryChunk"* %9) #4
  br label %181

181:                                              ; preds = %179, %175
  %182 = phi %"class.v8::internal::SlotSet"* [ %180, %179 ], [ %177, %175 ]
  %183 = sub i64 %156, %8
  %184 = lshr i64 %183, 2
  %185 = lshr i64 %183, 12
  %186 = lshr i64 %183, 7
  %187 = and i64 %186, 31
  %188 = trunc i64 %184 to i32
  %189 = and i32 %188, 31
  %190 = bitcast %"class.v8::internal::SlotSet"* %182 to %"class.v8::internal::SlotSet::Bucket"**
  %191 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket"*, %"class.v8::internal::SlotSet::Bucket"** %190, i64 %185
  %192 = bitcast %"class.v8::internal::SlotSet::Bucket"** %191 to i64*
  %193 = load atomic i64, i64* %192 acquire, align 8
  %194 = inttoptr i64 %193 to %"class.v8::internal::SlotSet::Bucket"*
  %195 = icmp eq i64 %193, 0
  br i1 %195, label %196, label %208

196:                                              ; preds = %181
  %197 = tail call i8* @_ZN2v88internal8MallocednwEm(i64 128) #4
  %198 = bitcast i8* %197 to %"class.v8::internal::SlotSet::Bucket"*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %197, i8 0, i64 128, i1 false) #4
  %199 = ptrtoint i8* %197 to i64
  %200 = cmpxchg volatile i64* %192, i64 0, i64 %199 release monotonic
  %201 = extractvalue { i64, i1 } %200, 1
  br i1 %201, label %208, label %202

202:                                              ; preds = %196
  %203 = icmp eq i8* %197, null
  br i1 %203, label %205, label %204

204:                                              ; preds = %202
  tail call void @_ZN2v88internal8MalloceddlEPv(i8* nonnull %197) #4
  br label %205

205:                                              ; preds = %204, %202
  %206 = load atomic i64, i64* %192 acquire, align 8
  %207 = inttoptr i64 %206 to %"class.v8::internal::SlotSet::Bucket"*
  br label %208

208:                                              ; preds = %205, %196, %181
  %209 = phi %"class.v8::internal::SlotSet::Bucket"* [ %198, %196 ], [ %207, %205 ], [ %194, %181 ]
  %210 = shl i32 1, %189
  %211 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket", %"class.v8::internal::SlotSet::Bucket"* %209, i64 0, i32 0, i64 %187
  %212 = load atomic i32, i32* %211 acquire, align 4
  %213 = and i32 %212, %210
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %226

215:                                              ; preds = %208
  %216 = load atomic i32, i32* %211 monotonic, align 4
  br label %217

217:                                              ; preds = %221, %215
  %218 = phi i32 [ %216, %215 ], [ %224, %221 ]
  %219 = and i32 %218, %210
  %220 = icmp eq i32 %219, %210
  br i1 %220, label %226, label %221

221:                                              ; preds = %217
  %222 = or i32 %218, %210
  %223 = cmpxchg volatile i32* %211, i32 %218, i32 %222 release monotonic
  %224 = extractvalue { i32, i1 } %223, 0
  %225 = extractvalue { i32, i1 } %223, 1
  br i1 %225, label %226, label %217

226:                                              ; preds = %217, %221, %208, %168, %155
  tail call void @_ZN2v88internal15WeakListVisitorINS0_7ContextEE10DoWeakListINS0_4CodeEEEvPNS0_4HeapES2_PNS0_18WeakObjectRetainerEi(%"class.v8::internal::Heap"* %0, i64 %1, %"class.v8::internal::WeakObjectRetainer"* %2, i32 252)
  tail call void @_ZN2v88internal15WeakListVisitorINS0_7ContextEE10DoWeakListINS0_4CodeEEEvPNS0_4HeapES2_PNS0_18WeakObjectRetainerEi(%"class.v8::internal::Heap"* %0, i64 %1, %"class.v8::internal::WeakObjectRetainer"* %2, i32 253)
  br label %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal15WeakListVisitorINS0_7ContextEE18VisitPhantomObjectEPNS0_4HeapES2_(%"class.v8::internal::Heap"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = and i64 %1, -4294967296
  %4 = add i64 %1, 1015
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = zext i32 %6 to i64
  %8 = or i64 %3, %7
  %9 = ptrtoint %"class.v8::internal::Heap"* %0 to i64
  %10 = add i64 %9, -41416
  %11 = inttoptr i64 %10 to %"class.v8::internal::Isolate"*
  %12 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 0, i32 7, i32 0, i64 4
  %13 = load i64, i64* %12, align 8
  %14 = trunc i64 %13 to i32
  %15 = icmp eq i32 %6, %14
  br i1 %15, label %72, label %16

16:                                               ; preds = %2
  %17 = and i64 %13, 1
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %13, -262144
  %20 = or i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  br i1 %18, label %22, label %41

22:                                               ; preds = %16, %22
  %23 = phi i64 [ %34, %22 ], [ %8, %16 ]
  %24 = and i64 %23, -4294967296
  %25 = add i64 %23, 15
  %26 = inttoptr i64 %25 to i32*
  %27 = load atomic i32, i32* %26 acquire, align 4
  %28 = zext i32 %27 to i64
  %29 = or i64 %24, %28
  %30 = add i64 %29, 3
  %31 = inttoptr i64 %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = zext i32 %32 to i64
  %34 = or i64 %24, %33
  %35 = load atomic i32, i32* %26 acquire, align 4
  %36 = zext i32 %35 to i64
  %37 = or i64 %24, %36
  %38 = add i64 %37, 3
  %39 = inttoptr i64 %38 to i32*
  store atomic volatile i32 %14, i32* %39 monotonic, align 4
  %40 = icmp eq i32 %32, %14
  br i1 %40, label %72, label %22

41:                                               ; preds = %16, %70
  %42 = phi i64 [ %53, %70 ], [ %8, %16 ]
  %43 = and i64 %42, -4294967296
  %44 = add i64 %42, 15
  %45 = inttoptr i64 %44 to i32*
  %46 = load atomic i32, i32* %45 acquire, align 4
  %47 = zext i32 %46 to i64
  %48 = or i64 %43, %47
  %49 = add i64 %48, 3
  %50 = inttoptr i64 %49 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i64
  %53 = or i64 %43, %52
  %54 = load atomic i32, i32* %45 acquire, align 4
  %55 = zext i32 %54 to i64
  %56 = or i64 %43, %55
  %57 = add i64 %56, 3
  %58 = inttoptr i64 %57 to i32*
  store atomic volatile i32 %14, i32* %58 monotonic, align 4
  %59 = load i64, i64* %21, align 8
  %60 = and i64 %59, 24
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %70, label %62

62:                                               ; preds = %41
  %63 = and i64 %56, -262144
  %64 = or i64 %63, 8
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = and i64 %66, 24
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %62
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %56, i64 %57, i64 %13) #4
  br label %70

70:                                               ; preds = %69, %62, %41
  %71 = icmp eq i32 %51, %14
  br i1 %71, label %72, label %41

72:                                               ; preds = %70, %22, %2
  %73 = add i64 %1, 1019
  %74 = inttoptr i64 %73 to i32*
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = zext i32 %75 to i64
  %77 = or i64 %3, %76
  %78 = load i64, i64* %12, align 8
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %75, %79
  br i1 %80, label %137, label %81

81:                                               ; preds = %72
  %82 = and i64 %78, 1
  %83 = icmp eq i64 %82, 0
  %84 = and i64 %78, -262144
  %85 = or i64 %84, 8
  %86 = inttoptr i64 %85 to i64*
  br i1 %83, label %87, label %106

87:                                               ; preds = %81, %87
  %88 = phi i64 [ %99, %87 ], [ %77, %81 ]
  %89 = and i64 %88, -4294967296
  %90 = add i64 %88, 15
  %91 = inttoptr i64 %90 to i32*
  %92 = load atomic i32, i32* %91 acquire, align 4
  %93 = zext i32 %92 to i64
  %94 = or i64 %89, %93
  %95 = add i64 %94, 3
  %96 = inttoptr i64 %95 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = zext i32 %97 to i64
  %99 = or i64 %89, %98
  %100 = load atomic i32, i32* %91 acquire, align 4
  %101 = zext i32 %100 to i64
  %102 = or i64 %89, %101
  %103 = add i64 %102, 3
  %104 = inttoptr i64 %103 to i32*
  store atomic volatile i32 %79, i32* %104 monotonic, align 4
  %105 = icmp eq i32 %97, %79
  br i1 %105, label %137, label %87

106:                                              ; preds = %81, %135
  %107 = phi i64 [ %118, %135 ], [ %77, %81 ]
  %108 = and i64 %107, -4294967296
  %109 = add i64 %107, 15
  %110 = inttoptr i64 %109 to i32*
  %111 = load atomic i32, i32* %110 acquire, align 4
  %112 = zext i32 %111 to i64
  %113 = or i64 %108, %112
  %114 = add i64 %113, 3
  %115 = inttoptr i64 %114 to i32*
  %116 = load i32, i32* %115, align 4
  %117 = zext i32 %116 to i64
  %118 = or i64 %108, %117
  %119 = load atomic i32, i32* %110 acquire, align 4
  %120 = zext i32 %119 to i64
  %121 = or i64 %108, %120
  %122 = add i64 %121, 3
  %123 = inttoptr i64 %122 to i32*
  store atomic volatile i32 %79, i32* %123 monotonic, align 4
  %124 = load i64, i64* %86, align 8
  %125 = and i64 %124, 24
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %135, label %127

127:                                              ; preds = %106
  %128 = and i64 %121, -262144
  %129 = or i64 %128, 8
  %130 = inttoptr i64 %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = and i64 %131, 24
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %135

134:                                              ; preds = %127
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %121, i64 %122, i64 %78) #4
  br label %135

135:                                              ; preds = %134, %127, %106
  %136 = icmp eq i32 %116, %79
  br i1 %136, label %137, label %106

137:                                              ; preds = %135, %87, %72
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZN2v88internal13VisitWeakListINS0_14AllocationSiteEEENS0_6ObjectEPNS0_4HeapES3_PNS0_18WeakObjectRetainerE(%"class.v8::internal::Heap"*, i64, %"class.v8::internal::WeakObjectRetainer"*) local_unnamed_addr #0 comdat {
  %4 = ptrtoint %"class.v8::internal::Heap"* %0 to i64
  %5 = add i64 %4, -41416
  %6 = inttoptr i64 %5 to %"class.v8::internal::Isolate"*
  %7 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %6, i64 0, i32 0, i32 7, i32 0, i64 4
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %0, i64 0, i32 42, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = icmp eq i32 %10, 2
  br i1 %11, label %12, label %18

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %0, i64 0, i32 81, i32 0, i32 0, i32 0
  %14 = load %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::MarkCompactCollector"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::MarkCompactCollector", %"class.v8::internal::MarkCompactCollector"* %14, i64 0, i32 6
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = icmp ne i8 %16, 0
  br label %18

18:                                               ; preds = %3, %12
  %19 = phi i1 [ false, %3 ], [ %17, %12 ]
  %20 = trunc i64 %1 to i32
  %21 = trunc i64 %8 to i32
  %22 = icmp eq i32 %20, %21
  br i1 %22, label %205, label %23

23:                                               ; preds = %18
  %24 = bitcast %"class.v8::internal::WeakObjectRetainer"* %2 to i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)***
  br i1 %19, label %25, label %137

25:                                               ; preds = %23, %133
  %26 = phi i64 [ %135, %133 ], [ %8, %23 ]
  %27 = phi i64 [ %38, %133 ], [ %1, %23 ]
  %28 = phi i64 [ %134, %133 ], [ 0, %23 ]
  %29 = load i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)**, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*** %24, align 8
  %30 = getelementptr inbounds i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)** %29, i64 2
  %31 = load i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)** %30, align 8
  %32 = tail call i64 %31(%"class.v8::internal::WeakObjectRetainer"* %2, i64 %27) #4
  %33 = and i64 %27, -4294967296
  %34 = add i64 %27, 23
  %35 = inttoptr i64 %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i64
  %38 = or i64 %33, %37
  %39 = trunc i64 %32 to i32
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %133, label %41

41:                                               ; preds = %25
  %42 = trunc i64 %26 to i32
  %43 = icmp eq i32 %42, %21
  br i1 %43, label %133, label %44

44:                                               ; preds = %41
  %45 = add i64 %28, 23
  %46 = inttoptr i64 %45 to i32*
  store atomic volatile i32 %39, i32* %46 monotonic, align 4
  %47 = and i64 %32, 1
  %48 = icmp eq i64 %47, 0
  %49 = and i64 %32, -262144
  br i1 %48, label %64, label %50

50:                                               ; preds = %44
  %51 = or i64 %49, 8
  %52 = inttoptr i64 %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = and i64 %53, 24
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %64, label %56

56:                                               ; preds = %50
  %57 = and i64 %28, -262144
  %58 = or i64 %57, 8
  %59 = inttoptr i64 %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 24
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %56
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %28, i64 %45, i64 %32) #4
  br label %64

64:                                               ; preds = %44, %50, %56, %63
  %65 = inttoptr i64 %49 to %"class.v8::internal::BasicMemoryChunk"*
  %66 = and i64 %28, -262144
  %67 = inttoptr i64 %66 to %"class.v8::internal::MemoryChunk"*
  %68 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %65, i64 0, i32 1
  %69 = load atomic i64, i64* %68 monotonic, align 8
  %70 = and i64 %69, 64
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %133, label %72

72:                                               ; preds = %64
  %73 = getelementptr inbounds %"class.v8::internal::MemoryChunk", %"class.v8::internal::MemoryChunk"* %67, i64 0, i32 0, i32 1
  %74 = load atomic i64, i64* %73 monotonic, align 8
  %75 = and i64 %74, 88
  %76 = icmp ne i64 %75, 0
  %77 = trunc i64 %74 to i16
  %78 = icmp sgt i16 %77, -1
  %79 = and i1 %78, %76
  br i1 %79, label %133, label %80

80:                                               ; preds = %72
  %81 = getelementptr inbounds %"class.v8::internal::MemoryChunk", %"class.v8::internal::MemoryChunk"* %67, i64 0, i32 1, i64 1
  %82 = bitcast %"class.v8::internal::SlotSet"** %81 to i64*
  %83 = load atomic i64, i64* %82 acquire, align 8
  %84 = inttoptr i64 %83 to %"class.v8::internal::SlotSet"*
  %85 = icmp eq i64 %83, 0
  br i1 %85, label %86, label %88

86:                                               ; preds = %80
  %87 = tail call %"class.v8::internal::SlotSet"* @_ZN2v88internal11MemoryChunk15AllocateSlotSetILNS0_17RememberedSetTypeE1EEEPNS0_7SlotSetEv(%"class.v8::internal::MemoryChunk"* %67) #4
  br label %88

88:                                               ; preds = %86, %80
  %89 = phi %"class.v8::internal::SlotSet"* [ %87, %86 ], [ %84, %80 ]
  %90 = sub i64 %45, %66
  %91 = lshr i64 %90, 2
  %92 = lshr i64 %90, 12
  %93 = lshr i64 %90, 7
  %94 = and i64 %93, 31
  %95 = trunc i64 %91 to i32
  %96 = and i32 %95, 31
  %97 = bitcast %"class.v8::internal::SlotSet"* %89 to %"class.v8::internal::SlotSet::Bucket"**
  %98 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket"*, %"class.v8::internal::SlotSet::Bucket"** %97, i64 %92
  %99 = bitcast %"class.v8::internal::SlotSet::Bucket"** %98 to i64*
  %100 = load atomic i64, i64* %99 acquire, align 8
  %101 = inttoptr i64 %100 to %"class.v8::internal::SlotSet::Bucket"*
  %102 = icmp eq i64 %100, 0
  br i1 %102, label %103, label %115

103:                                              ; preds = %88
  %104 = tail call i8* @_ZN2v88internal8MallocednwEm(i64 128) #4
  %105 = bitcast i8* %104 to %"class.v8::internal::SlotSet::Bucket"*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %104, i8 0, i64 128, i1 false) #4
  %106 = ptrtoint i8* %104 to i64
  %107 = cmpxchg volatile i64* %99, i64 0, i64 %106 release monotonic
  %108 = extractvalue { i64, i1 } %107, 1
  br i1 %108, label %115, label %109

109:                                              ; preds = %103
  %110 = icmp eq i8* %104, null
  br i1 %110, label %112, label %111

111:                                              ; preds = %109
  tail call void @_ZN2v88internal8MalloceddlEPv(i8* nonnull %104) #4
  br label %112

112:                                              ; preds = %111, %109
  %113 = load atomic i64, i64* %99 acquire, align 8
  %114 = inttoptr i64 %113 to %"class.v8::internal::SlotSet::Bucket"*
  br label %115

115:                                              ; preds = %112, %103, %88
  %116 = phi %"class.v8::internal::SlotSet::Bucket"* [ %105, %103 ], [ %114, %112 ], [ %101, %88 ]
  %117 = shl i32 1, %96
  %118 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket", %"class.v8::internal::SlotSet::Bucket"* %116, i64 0, i32 0, i64 %94
  %119 = load atomic i32, i32* %118 acquire, align 4
  %120 = and i32 %119, %117
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %133

122:                                              ; preds = %115
  %123 = load atomic i32, i32* %118 monotonic, align 4
  br label %124

124:                                              ; preds = %128, %122
  %125 = phi i32 [ %123, %122 ], [ %131, %128 ]
  %126 = and i32 %125, %117
  %127 = icmp eq i32 %126, %117
  br i1 %127, label %133, label %128

128:                                              ; preds = %124
  %129 = or i32 %125, %117
  %130 = cmpxchg volatile i32* %118, i32 %125, i32 %129 release monotonic
  %131 = extractvalue { i32, i1 } %130, 0
  %132 = extractvalue { i32, i1 } %130, 1
  br i1 %132, label %133, label %124

133:                                              ; preds = %124, %128, %115, %72, %64, %41, %25
  %134 = phi i64 [ %32, %115 ], [ %32, %72 ], [ %32, %64 ], [ %32, %41 ], [ %28, %25 ], [ %32, %128 ], [ %32, %124 ]
  %135 = phi i64 [ %26, %115 ], [ %26, %72 ], [ %26, %64 ], [ %32, %41 ], [ %26, %25 ], [ %26, %128 ], [ %26, %124 ]
  %136 = icmp eq i32 %36, %21
  br i1 %136, label %180, label %25

137:                                              ; preds = %23, %176
  %138 = phi i64 [ %178, %176 ], [ %8, %23 ]
  %139 = phi i64 [ %150, %176 ], [ %1, %23 ]
  %140 = phi i64 [ %177, %176 ], [ 0, %23 ]
  %141 = load i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)**, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*** %24, align 8
  %142 = getelementptr inbounds i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)** %141, i64 2
  %143 = load i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)** %142, align 8
  %144 = tail call i64 %143(%"class.v8::internal::WeakObjectRetainer"* %2, i64 %139) #4
  %145 = and i64 %139, -4294967296
  %146 = add i64 %139, 23
  %147 = inttoptr i64 %146 to i32*
  %148 = load i32, i32* %147, align 4
  %149 = zext i32 %148 to i64
  %150 = or i64 %145, %149
  %151 = trunc i64 %144 to i32
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %176, label %153

153:                                              ; preds = %137
  %154 = trunc i64 %138 to i32
  %155 = icmp eq i32 %154, %21
  br i1 %155, label %176, label %156

156:                                              ; preds = %153
  %157 = add i64 %140, 23
  %158 = inttoptr i64 %157 to i32*
  store atomic volatile i32 %151, i32* %158 monotonic, align 4
  %159 = and i64 %144, 1
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %176, label %161

161:                                              ; preds = %156
  %162 = and i64 %144, -262144
  %163 = or i64 %162, 8
  %164 = inttoptr i64 %163 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = and i64 %165, 24
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %176, label %168

168:                                              ; preds = %161
  %169 = and i64 %140, -262144
  %170 = or i64 %169, 8
  %171 = inttoptr i64 %170 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = and i64 %172, 24
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %175, label %176

175:                                              ; preds = %168
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %140, i64 %157, i64 %144) #4
  br label %176

176:                                              ; preds = %175, %168, %161, %156, %137, %153
  %177 = phi i64 [ %144, %153 ], [ %140, %137 ], [ %144, %156 ], [ %144, %161 ], [ %144, %168 ], [ %144, %175 ]
  %178 = phi i64 [ %144, %153 ], [ %138, %137 ], [ %138, %156 ], [ %138, %161 ], [ %138, %168 ], [ %138, %175 ]
  %179 = icmp eq i32 %148, %21
  br i1 %179, label %180, label %137

180:                                              ; preds = %176, %133
  %181 = phi i64 [ %134, %133 ], [ %177, %176 ]
  %182 = phi i64 [ %135, %133 ], [ %178, %176 ]
  %183 = trunc i64 %181 to i32
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %205, label %185

185:                                              ; preds = %180
  %186 = add i64 %181, 23
  %187 = inttoptr i64 %186 to i32*
  store atomic volatile i32 %21, i32* %187 monotonic, align 4
  %188 = and i64 %8, 1
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %205, label %190

190:                                              ; preds = %185
  %191 = and i64 %8, -262144
  %192 = or i64 %191, 8
  %193 = inttoptr i64 %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = and i64 %194, 24
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %205, label %197

197:                                              ; preds = %190
  %198 = and i64 %181, -262144
  %199 = or i64 %198, 8
  %200 = inttoptr i64 %199 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = and i64 %201, 24
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %204, label %205

204:                                              ; preds = %197
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %181, i64 %186, i64 %8) #4
  br label %205

205:                                              ; preds = %18, %204, %197, %190, %185, %180
  %206 = phi i64 [ %182, %204 ], [ %182, %197 ], [ %182, %190 ], [ %182, %185 ], [ %182, %180 ], [ %8, %18 ]
  ret i64 %206
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZN2v88internal13VisitWeakListINS0_22JSFinalizationRegistryEEENS0_6ObjectEPNS0_4HeapES3_PNS0_18WeakObjectRetainerE(%"class.v8::internal::Heap"*, i64, %"class.v8::internal::WeakObjectRetainer"*) local_unnamed_addr #0 comdat {
  %4 = ptrtoint %"class.v8::internal::Heap"* %0 to i64
  %5 = add i64 %4, -41416
  %6 = inttoptr i64 %5 to %"class.v8::internal::Isolate"*
  %7 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %6, i64 0, i32 0, i32 7, i32 0, i64 4
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %0, i64 0, i32 42, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = icmp eq i32 %10, 2
  br i1 %11, label %12, label %18

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %0, i64 0, i32 81, i32 0, i32 0, i32 0
  %14 = load %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::MarkCompactCollector"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::MarkCompactCollector", %"class.v8::internal::MarkCompactCollector"* %14, i64 0, i32 6
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = icmp ne i8 %16, 0
  br label %18

18:                                               ; preds = %3, %12
  %19 = phi i1 [ false, %3 ], [ %17, %12 ]
  %20 = trunc i64 %1 to i32
  %21 = trunc i64 %8 to i32
  %22 = icmp eq i32 %20, %21
  br i1 %22, label %210, label %23

23:                                               ; preds = %18
  %24 = bitcast %"class.v8::internal::WeakObjectRetainer"* %2 to i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)***
  %25 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %0, i64 0, i32 62, i32 0, i32 0
  br i1 %19, label %26, label %140

26:                                               ; preds = %23, %136
  %27 = phi i64 [ %138, %136 ], [ %8, %23 ]
  %28 = phi i64 [ %39, %136 ], [ %1, %23 ]
  %29 = phi i64 [ %137, %136 ], [ 0, %23 ]
  %30 = load i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)**, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*** %24, align 8
  %31 = getelementptr inbounds i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)** %30, i64 2
  %32 = load i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)** %31, align 8
  %33 = tail call i64 %32(%"class.v8::internal::WeakObjectRetainer"* %2, i64 %28) #4
  %34 = and i64 %28, -4294967296
  %35 = add i64 %28, 31
  %36 = inttoptr i64 %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i64
  %39 = or i64 %34, %38
  %40 = trunc i64 %33 to i32
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %136, label %42

42:                                               ; preds = %26
  %43 = trunc i64 %27 to i32
  %44 = icmp eq i32 %43, %21
  br i1 %44, label %134, label %45

45:                                               ; preds = %42
  %46 = add i64 %29, 31
  %47 = inttoptr i64 %46 to i32*
  store atomic volatile i32 %40, i32* %47 monotonic, align 4
  %48 = and i64 %33, 1
  %49 = icmp eq i64 %48, 0
  %50 = and i64 %33, -262144
  br i1 %49, label %65, label %51

51:                                               ; preds = %45
  %52 = or i64 %50, 8
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = and i64 %54, 24
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %65, label %57

57:                                               ; preds = %51
  %58 = and i64 %29, -262144
  %59 = or i64 %58, 8
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = and i64 %61, 24
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %57
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %29, i64 %46, i64 %33) #4
  br label %65

65:                                               ; preds = %45, %51, %57, %64
  %66 = inttoptr i64 %50 to %"class.v8::internal::BasicMemoryChunk"*
  %67 = and i64 %29, -262144
  %68 = inttoptr i64 %67 to %"class.v8::internal::MemoryChunk"*
  %69 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %66, i64 0, i32 1
  %70 = load atomic i64, i64* %69 monotonic, align 8
  %71 = and i64 %70, 64
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %134, label %73

73:                                               ; preds = %65
  %74 = getelementptr inbounds %"class.v8::internal::MemoryChunk", %"class.v8::internal::MemoryChunk"* %68, i64 0, i32 0, i32 1
  %75 = load atomic i64, i64* %74 monotonic, align 8
  %76 = and i64 %75, 88
  %77 = icmp ne i64 %76, 0
  %78 = trunc i64 %75 to i16
  %79 = icmp sgt i16 %78, -1
  %80 = and i1 %79, %77
  br i1 %80, label %134, label %81

81:                                               ; preds = %73
  %82 = getelementptr inbounds %"class.v8::internal::MemoryChunk", %"class.v8::internal::MemoryChunk"* %68, i64 0, i32 1, i64 1
  %83 = bitcast %"class.v8::internal::SlotSet"** %82 to i64*
  %84 = load atomic i64, i64* %83 acquire, align 8
  %85 = inttoptr i64 %84 to %"class.v8::internal::SlotSet"*
  %86 = icmp eq i64 %84, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %81
  %88 = tail call %"class.v8::internal::SlotSet"* @_ZN2v88internal11MemoryChunk15AllocateSlotSetILNS0_17RememberedSetTypeE1EEEPNS0_7SlotSetEv(%"class.v8::internal::MemoryChunk"* %68) #4
  br label %89

89:                                               ; preds = %87, %81
  %90 = phi %"class.v8::internal::SlotSet"* [ %88, %87 ], [ %85, %81 ]
  %91 = sub i64 %46, %67
  %92 = lshr i64 %91, 2
  %93 = lshr i64 %91, 12
  %94 = lshr i64 %91, 7
  %95 = and i64 %94, 31
  %96 = trunc i64 %92 to i32
  %97 = and i32 %96, 31
  %98 = bitcast %"class.v8::internal::SlotSet"* %90 to %"class.v8::internal::SlotSet::Bucket"**
  %99 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket"*, %"class.v8::internal::SlotSet::Bucket"** %98, i64 %93
  %100 = bitcast %"class.v8::internal::SlotSet::Bucket"** %99 to i64*
  %101 = load atomic i64, i64* %100 acquire, align 8
  %102 = inttoptr i64 %101 to %"class.v8::internal::SlotSet::Bucket"*
  %103 = icmp eq i64 %101, 0
  br i1 %103, label %104, label %116

104:                                              ; preds = %89
  %105 = tail call i8* @_ZN2v88internal8MallocednwEm(i64 128) #4
  %106 = bitcast i8* %105 to %"class.v8::internal::SlotSet::Bucket"*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %105, i8 0, i64 128, i1 false) #4
  %107 = ptrtoint i8* %105 to i64
  %108 = cmpxchg volatile i64* %100, i64 0, i64 %107 release monotonic
  %109 = extractvalue { i64, i1 } %108, 1
  br i1 %109, label %116, label %110

110:                                              ; preds = %104
  %111 = icmp eq i8* %105, null
  br i1 %111, label %113, label %112

112:                                              ; preds = %110
  tail call void @_ZN2v88internal8MalloceddlEPv(i8* nonnull %105) #4
  br label %113

113:                                              ; preds = %112, %110
  %114 = load atomic i64, i64* %100 acquire, align 8
  %115 = inttoptr i64 %114 to %"class.v8::internal::SlotSet::Bucket"*
  br label %116

116:                                              ; preds = %113, %104, %89
  %117 = phi %"class.v8::internal::SlotSet::Bucket"* [ %106, %104 ], [ %115, %113 ], [ %102, %89 ]
  %118 = shl i32 1, %97
  %119 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket", %"class.v8::internal::SlotSet::Bucket"* %117, i64 0, i32 0, i64 %95
  %120 = load atomic i32, i32* %119 acquire, align 4
  %121 = and i32 %120, %118
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %134

123:                                              ; preds = %116
  %124 = load atomic i32, i32* %119 monotonic, align 4
  br label %125

125:                                              ; preds = %129, %123
  %126 = phi i32 [ %124, %123 ], [ %132, %129 ]
  %127 = and i32 %126, %118
  %128 = icmp eq i32 %127, %118
  br i1 %128, label %134, label %129

129:                                              ; preds = %125
  %130 = or i32 %126, %118
  %131 = cmpxchg volatile i32* %119, i32 %126, i32 %130 release monotonic
  %132 = extractvalue { i32, i1 } %131, 0
  %133 = extractvalue { i32, i1 } %131, 1
  br i1 %133, label %134, label %125

134:                                              ; preds = %125, %129, %116, %73, %65, %42
  %135 = phi i64 [ %33, %42 ], [ %27, %65 ], [ %27, %73 ], [ %27, %116 ], [ %27, %129 ], [ %27, %125 ]
  store i64 %33, i64* %25, align 8
  br label %136

136:                                              ; preds = %134, %26
  %137 = phi i64 [ %33, %134 ], [ %29, %26 ]
  %138 = phi i64 [ %135, %134 ], [ %27, %26 ]
  %139 = icmp eq i32 %37, %21
  br i1 %139, label %185, label %26

140:                                              ; preds = %23, %181
  %141 = phi i64 [ %183, %181 ], [ %8, %23 ]
  %142 = phi i64 [ %153, %181 ], [ %1, %23 ]
  %143 = phi i64 [ %182, %181 ], [ 0, %23 ]
  %144 = load i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)**, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*** %24, align 8
  %145 = getelementptr inbounds i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)** %144, i64 2
  %146 = load i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)** %145, align 8
  %147 = tail call i64 %146(%"class.v8::internal::WeakObjectRetainer"* %2, i64 %142) #4
  %148 = and i64 %142, -4294967296
  %149 = add i64 %142, 31
  %150 = inttoptr i64 %149 to i32*
  %151 = load i32, i32* %150, align 4
  %152 = zext i32 %151 to i64
  %153 = or i64 %148, %152
  %154 = trunc i64 %147 to i32
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %181, label %156

156:                                              ; preds = %140
  %157 = trunc i64 %141 to i32
  %158 = icmp eq i32 %157, %21
  br i1 %158, label %179, label %159

159:                                              ; preds = %156
  %160 = add i64 %143, 31
  %161 = inttoptr i64 %160 to i32*
  store atomic volatile i32 %154, i32* %161 monotonic, align 4
  %162 = and i64 %147, 1
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %179, label %164

164:                                              ; preds = %159
  %165 = and i64 %147, -262144
  %166 = or i64 %165, 8
  %167 = inttoptr i64 %166 to i64*
  %168 = load i64, i64* %167, align 8
  %169 = and i64 %168, 24
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %179, label %171

171:                                              ; preds = %164
  %172 = and i64 %143, -262144
  %173 = or i64 %172, 8
  %174 = inttoptr i64 %173 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = and i64 %175, 24
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %179

178:                                              ; preds = %171
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %143, i64 %160, i64 %147) #4
  br label %179

179:                                              ; preds = %178, %171, %164, %159, %156
  %180 = phi i64 [ %147, %156 ], [ %141, %159 ], [ %141, %164 ], [ %141, %171 ], [ %141, %178 ]
  store i64 %147, i64* %25, align 8
  br label %181

181:                                              ; preds = %140, %179
  %182 = phi i64 [ %147, %179 ], [ %143, %140 ]
  %183 = phi i64 [ %180, %179 ], [ %141, %140 ]
  %184 = icmp eq i32 %151, %21
  br i1 %184, label %185, label %140

185:                                              ; preds = %181, %136
  %186 = phi i64 [ %137, %136 ], [ %182, %181 ]
  %187 = phi i64 [ %138, %136 ], [ %183, %181 ]
  %188 = trunc i64 %186 to i32
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %210, label %190

190:                                              ; preds = %185
  %191 = add i64 %186, 31
  %192 = inttoptr i64 %191 to i32*
  store atomic volatile i32 %21, i32* %192 monotonic, align 4
  %193 = and i64 %8, 1
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %210, label %195

195:                                              ; preds = %190
  %196 = and i64 %8, -262144
  %197 = or i64 %196, 8
  %198 = inttoptr i64 %197 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = and i64 %199, 24
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %210, label %202

202:                                              ; preds = %195
  %203 = and i64 %186, -262144
  %204 = or i64 %203, 8
  %205 = inttoptr i64 %204 to i64*
  %206 = load i64, i64* %205, align 8
  %207 = and i64 %206, 24
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %210

209:                                              ; preds = %202
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %186, i64 %191, i64 %8) #4
  br label %210

210:                                              ; preds = %18, %209, %202, %195, %190, %185
  %211 = phi i64 [ %187, %209 ], [ %187, %202 ], [ %187, %195 ], [ %187, %190 ], [ %187, %185 ], [ %8, %18 ]
  ret i64 %211
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"*, i64, i64, i64) local_unnamed_addr #2

declare void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64, i64, i64) local_unnamed_addr #2

declare %"class.v8::internal::SlotSet"* @_ZN2v88internal11MemoryChunk15AllocateSlotSetILNS0_17RememberedSetTypeE1EEEPNS0_7SlotSetEv(%"class.v8::internal::MemoryChunk"*) local_unnamed_addr #2

declare i8* @_ZN2v88internal8MallocednwEm(i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2v88internal8MalloceddlEPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal15WeakListVisitorINS0_7ContextEE10DoWeakListINS0_4CodeEEEvPNS0_4HeapES2_PNS0_18WeakObjectRetainerEi(%"class.v8::internal::Heap"*, i64, %"class.v8::internal::WeakObjectRetainer"*, i32) local_unnamed_addr #0 comdat align 2 {
  %5 = and i64 %1, -4294967296
  %6 = shl i32 %3, 2
  %7 = sext i32 %6 to i64
  %8 = add i64 %1, 7
  %9 = add i64 %8, %7
  %10 = inttoptr i64 %9 to i32*
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = zext i32 %11 to i64
  %13 = or i64 %5, %12
  %14 = tail call i64 @_ZN2v88internal13VisitWeakListINS0_4CodeEEENS0_6ObjectEPNS0_4HeapES3_PNS0_18WeakObjectRetainerE(%"class.v8::internal::Heap"* %0, i64 %13, %"class.v8::internal::WeakObjectRetainer"* %2)
  %15 = trunc i64 %14 to i32
  store atomic volatile i32 %15, i32* %10 monotonic, align 4
  %16 = and i64 %14, 1
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %41, label %18

18:                                               ; preds = %4
  %19 = and i64 %1, -262144
  %20 = or i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = and i64 %22, 262144
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %18
  %26 = or i64 %19, 16
  %27 = inttoptr i64 %26 to %"class.v8::internal::Heap"**
  %28 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %27, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %28, i64 %1, i64 %9, i64 %14) #4
  br label %29

29:                                               ; preds = %25, %18
  %30 = and i64 %14, -262144
  %31 = or i64 %30, 8
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = and i64 %33, 24
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %41, label %36

36:                                               ; preds = %29
  %37 = load i64, i64* %21, align 8
  %38 = and i64 %37, 24
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %36
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %1, i64 %9, i64 %14) #4
  br label %41

41:                                               ; preds = %4, %29, %36, %40
  %42 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %0, i64 0, i32 42, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = icmp eq i32 %43, 2
  br i1 %44, label %45, label %122

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %0, i64 0, i32 81, i32 0, i32 0, i32 0
  %47 = load %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::MarkCompactCollector"** %46, align 8
  %48 = getelementptr inbounds %"class.v8::internal::MarkCompactCollector", %"class.v8::internal::MarkCompactCollector"* %47, i64 0, i32 6
  %49 = load i8, i8* %48, align 1, !range !2
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %122, label %51

51:                                               ; preds = %45
  %52 = and i64 %14, -262144
  %53 = inttoptr i64 %52 to %"class.v8::internal::BasicMemoryChunk"*
  %54 = and i64 %1, -262144
  %55 = inttoptr i64 %54 to %"class.v8::internal::MemoryChunk"*
  %56 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %53, i64 0, i32 1
  %57 = load atomic i64, i64* %56 monotonic, align 8
  %58 = and i64 %57, 64
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %122, label %60

60:                                               ; preds = %51
  %61 = getelementptr inbounds %"class.v8::internal::MemoryChunk", %"class.v8::internal::MemoryChunk"* %55, i64 0, i32 0, i32 1
  %62 = load atomic i64, i64* %61 monotonic, align 8
  %63 = and i64 %62, 88
  %64 = icmp ne i64 %63, 0
  %65 = trunc i64 %62 to i16
  %66 = icmp sgt i16 %65, -1
  %67 = and i1 %66, %64
  br i1 %67, label %122, label %68

68:                                               ; preds = %60
  %69 = getelementptr inbounds %"class.v8::internal::MemoryChunk", %"class.v8::internal::MemoryChunk"* %55, i64 0, i32 1, i64 1
  %70 = bitcast %"class.v8::internal::SlotSet"** %69 to i64*
  %71 = load atomic i64, i64* %70 acquire, align 8
  %72 = inttoptr i64 %71 to %"class.v8::internal::SlotSet"*
  %73 = icmp eq i64 %71, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %68
  %75 = tail call %"class.v8::internal::SlotSet"* @_ZN2v88internal11MemoryChunk15AllocateSlotSetILNS0_17RememberedSetTypeE1EEEPNS0_7SlotSetEv(%"class.v8::internal::MemoryChunk"* %55) #4
  br label %76

76:                                               ; preds = %74, %68
  %77 = phi %"class.v8::internal::SlotSet"* [ %75, %74 ], [ %72, %68 ]
  %78 = sub i64 %8, %54
  %79 = add i64 %78, %7
  %80 = lshr i64 %79, 2
  %81 = lshr i64 %79, 12
  %82 = lshr i64 %79, 7
  %83 = and i64 %82, 31
  %84 = trunc i64 %80 to i32
  %85 = and i32 %84, 31
  %86 = bitcast %"class.v8::internal::SlotSet"* %77 to %"class.v8::internal::SlotSet::Bucket"**
  %87 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket"*, %"class.v8::internal::SlotSet::Bucket"** %86, i64 %81
  %88 = bitcast %"class.v8::internal::SlotSet::Bucket"** %87 to i64*
  %89 = load atomic i64, i64* %88 acquire, align 8
  %90 = inttoptr i64 %89 to %"class.v8::internal::SlotSet::Bucket"*
  %91 = icmp eq i64 %89, 0
  br i1 %91, label %92, label %104

92:                                               ; preds = %76
  %93 = tail call i8* @_ZN2v88internal8MallocednwEm(i64 128) #4
  %94 = bitcast i8* %93 to %"class.v8::internal::SlotSet::Bucket"*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %93, i8 0, i64 128, i1 false) #4
  %95 = ptrtoint i8* %93 to i64
  %96 = cmpxchg volatile i64* %88, i64 0, i64 %95 release monotonic
  %97 = extractvalue { i64, i1 } %96, 1
  br i1 %97, label %104, label %98

98:                                               ; preds = %92
  %99 = icmp eq i8* %93, null
  br i1 %99, label %101, label %100

100:                                              ; preds = %98
  tail call void @_ZN2v88internal8MalloceddlEPv(i8* nonnull %93) #4
  br label %101

101:                                              ; preds = %100, %98
  %102 = load atomic i64, i64* %88 acquire, align 8
  %103 = inttoptr i64 %102 to %"class.v8::internal::SlotSet::Bucket"*
  br label %104

104:                                              ; preds = %101, %92, %76
  %105 = phi %"class.v8::internal::SlotSet::Bucket"* [ %94, %92 ], [ %103, %101 ], [ %90, %76 ]
  %106 = shl i32 1, %85
  %107 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket", %"class.v8::internal::SlotSet::Bucket"* %105, i64 0, i32 0, i64 %83
  %108 = load atomic i32, i32* %107 acquire, align 4
  %109 = and i32 %108, %106
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %122

111:                                              ; preds = %104
  %112 = load atomic i32, i32* %107 monotonic, align 4
  br label %113

113:                                              ; preds = %117, %111
  %114 = phi i32 [ %112, %111 ], [ %120, %117 ]
  %115 = and i32 %114, %106
  %116 = icmp eq i32 %115, %106
  br i1 %116, label %122, label %117

117:                                              ; preds = %113
  %118 = or i32 %114, %106
  %119 = cmpxchg volatile i32* %107, i32 %114, i32 %118 release monotonic
  %120 = extractvalue { i32, i1 } %119, 0
  %121 = extractvalue { i32, i1 } %119, 1
  br i1 %121, label %122, label %113

122:                                              ; preds = %117, %113, %45, %41, %104, %60, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN2v88internal13VisitWeakListINS0_4CodeEEENS0_6ObjectEPNS0_4HeapES3_PNS0_18WeakObjectRetainerE(%"class.v8::internal::Heap"*, i64, %"class.v8::internal::WeakObjectRetainer"*) local_unnamed_addr #0 comdat {
  %4 = ptrtoint %"class.v8::internal::Heap"* %0 to i64
  %5 = add i64 %4, -41416
  %6 = inttoptr i64 %5 to %"class.v8::internal::Isolate"*
  %7 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %6, i64 0, i32 0, i32 7, i32 0, i64 4
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %0, i64 0, i32 42, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = icmp eq i32 %10, 2
  br i1 %11, label %12, label %18

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %0, i64 0, i32 81, i32 0, i32 0, i32 0
  %14 = load %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::MarkCompactCollector"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::MarkCompactCollector", %"class.v8::internal::MarkCompactCollector"* %14, i64 0, i32 6
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = icmp ne i8 %16, 0
  br label %18

18:                                               ; preds = %3, %12
  %19 = phi i1 [ false, %3 ], [ %17, %12 ]
  %20 = trunc i64 %1 to i32
  %21 = trunc i64 %8 to i32
  %22 = icmp eq i32 %20, %21
  br i1 %22, label %208, label %23

23:                                               ; preds = %18
  %24 = bitcast %"class.v8::internal::WeakObjectRetainer"* %2 to i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)***
  br label %25

25:                                               ; preds = %23, %175
  %26 = phi i64 [ %8, %23 ], [ %177, %175 ]
  %27 = phi i64 [ %1, %23 ], [ %43, %175 ]
  %28 = phi i64 [ 0, %23 ], [ %176, %175 ]
  %29 = load i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)**, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*** %24, align 8
  %30 = getelementptr inbounds i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)** %29, i64 2
  %31 = load i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)*, i64 (%"class.v8::internal::WeakObjectRetainer"*, i64)** %30, align 8
  %32 = tail call i64 %31(%"class.v8::internal::WeakObjectRetainer"* %2, i64 %27) #4
  %33 = and i64 %27, -4294967296
  %34 = add i64 %27, 15
  %35 = inttoptr i64 %34 to i32*
  %36 = load atomic i32, i32* %35 acquire, align 4
  %37 = zext i32 %36 to i64
  %38 = or i64 %33, %37
  %39 = add i64 %38, 3
  %40 = inttoptr i64 %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i64
  %43 = or i64 %33, %42
  %44 = trunc i64 %32 to i32
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %150, label %46

46:                                               ; preds = %25
  %47 = trunc i64 %26 to i32
  %48 = icmp eq i32 %47, %21
  br i1 %48, label %175, label %49

49:                                               ; preds = %46
  %50 = and i64 %28, -4294967296
  %51 = add i64 %28, 15
  %52 = inttoptr i64 %51 to i32*
  %53 = load atomic i32, i32* %52 acquire, align 4
  %54 = zext i32 %53 to i64
  %55 = or i64 %50, %54
  %56 = add i64 %55, 3
  %57 = inttoptr i64 %56 to i32*
  store atomic volatile i32 %44, i32* %57 monotonic, align 4
  %58 = and i64 %32, 1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %75, label %60

60:                                               ; preds = %49
  %61 = and i64 %32, -262144
  %62 = or i64 %61, 8
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = and i64 %64, 24
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %75, label %67

67:                                               ; preds = %60
  %68 = and i64 %55, -262144
  %69 = or i64 %68, 8
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = and i64 %71, 24
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %67
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %55, i64 %56, i64 %32) #4
  br label %75

75:                                               ; preds = %49, %60, %67, %74
  br i1 %19, label %76, label %175

76:                                               ; preds = %75
  %77 = load atomic i32, i32* %52 acquire, align 4
  %78 = zext i32 %77 to i64
  %79 = or i64 %50, %78
  %80 = add i64 %79, 3
  %81 = and i64 %32, -262144
  %82 = inttoptr i64 %81 to %"class.v8::internal::BasicMemoryChunk"*
  %83 = and i64 %79, -262144
  %84 = inttoptr i64 %83 to %"class.v8::internal::MemoryChunk"*
  %85 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %82, i64 0, i32 1
  %86 = load atomic i64, i64* %85 monotonic, align 8
  %87 = and i64 %86, 64
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %175, label %89

89:                                               ; preds = %76
  %90 = getelementptr inbounds %"class.v8::internal::MemoryChunk", %"class.v8::internal::MemoryChunk"* %84, i64 0, i32 0, i32 1
  %91 = load atomic i64, i64* %90 monotonic, align 8
  %92 = and i64 %91, 88
  %93 = icmp ne i64 %92, 0
  %94 = trunc i64 %91 to i16
  %95 = icmp sgt i16 %94, -1
  %96 = and i1 %95, %93
  br i1 %96, label %175, label %97

97:                                               ; preds = %89
  %98 = getelementptr inbounds %"class.v8::internal::MemoryChunk", %"class.v8::internal::MemoryChunk"* %84, i64 0, i32 1, i64 1
  %99 = bitcast %"class.v8::internal::SlotSet"** %98 to i64*
  %100 = load atomic i64, i64* %99 acquire, align 8
  %101 = inttoptr i64 %100 to %"class.v8::internal::SlotSet"*
  %102 = icmp eq i64 %100, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %97
  %104 = tail call %"class.v8::internal::SlotSet"* @_ZN2v88internal11MemoryChunk15AllocateSlotSetILNS0_17RememberedSetTypeE1EEEPNS0_7SlotSetEv(%"class.v8::internal::MemoryChunk"* %84) #4
  br label %105

105:                                              ; preds = %103, %97
  %106 = phi %"class.v8::internal::SlotSet"* [ %104, %103 ], [ %101, %97 ]
  %107 = sub i64 %80, %83
  %108 = lshr i64 %107, 2
  %109 = lshr i64 %107, 12
  %110 = lshr i64 %107, 7
  %111 = and i64 %110, 31
  %112 = trunc i64 %108 to i32
  %113 = and i32 %112, 31
  %114 = bitcast %"class.v8::internal::SlotSet"* %106 to %"class.v8::internal::SlotSet::Bucket"**
  %115 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket"*, %"class.v8::internal::SlotSet::Bucket"** %114, i64 %109
  %116 = bitcast %"class.v8::internal::SlotSet::Bucket"** %115 to i64*
  %117 = load atomic i64, i64* %116 acquire, align 8
  %118 = inttoptr i64 %117 to %"class.v8::internal::SlotSet::Bucket"*
  %119 = icmp eq i64 %117, 0
  br i1 %119, label %120, label %132

120:                                              ; preds = %105
  %121 = tail call i8* @_ZN2v88internal8MallocednwEm(i64 128) #4
  %122 = bitcast i8* %121 to %"class.v8::internal::SlotSet::Bucket"*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %121, i8 0, i64 128, i1 false) #4
  %123 = ptrtoint i8* %121 to i64
  %124 = cmpxchg volatile i64* %116, i64 0, i64 %123 release monotonic
  %125 = extractvalue { i64, i1 } %124, 1
  br i1 %125, label %132, label %126

126:                                              ; preds = %120
  %127 = icmp eq i8* %121, null
  br i1 %127, label %129, label %128

128:                                              ; preds = %126
  tail call void @_ZN2v88internal8MalloceddlEPv(i8* nonnull %121) #4
  br label %129

129:                                              ; preds = %128, %126
  %130 = load atomic i64, i64* %116 acquire, align 8
  %131 = inttoptr i64 %130 to %"class.v8::internal::SlotSet::Bucket"*
  br label %132

132:                                              ; preds = %129, %120, %105
  %133 = phi %"class.v8::internal::SlotSet::Bucket"* [ %122, %120 ], [ %131, %129 ], [ %118, %105 ]
  %134 = shl i32 1, %113
  %135 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket", %"class.v8::internal::SlotSet::Bucket"* %133, i64 0, i32 0, i64 %111
  %136 = load atomic i32, i32* %135 acquire, align 4
  %137 = and i32 %136, %134
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %175

139:                                              ; preds = %132
  %140 = load atomic i32, i32* %135 monotonic, align 4
  br label %141

141:                                              ; preds = %145, %139
  %142 = phi i32 [ %140, %139 ], [ %148, %145 ]
  %143 = and i32 %142, %134
  %144 = icmp eq i32 %143, %134
  br i1 %144, label %175, label %145

145:                                              ; preds = %141
  %146 = or i32 %142, %134
  %147 = cmpxchg volatile i32* %135, i32 %142, i32 %146 release monotonic
  %148 = extractvalue { i32, i1 } %147, 0
  %149 = extractvalue { i32, i1 } %147, 1
  br i1 %149, label %175, label %141

150:                                              ; preds = %25
  %151 = load i64, i64* %7, align 8
  %152 = load atomic i32, i32* %35 acquire, align 4
  %153 = zext i32 %152 to i64
  %154 = or i64 %33, %153
  %155 = add i64 %154, 3
  %156 = inttoptr i64 %155 to i32*
  %157 = trunc i64 %151 to i32
  store atomic volatile i32 %157, i32* %156 monotonic, align 4
  %158 = and i64 %151, 1
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %175, label %160

160:                                              ; preds = %150
  %161 = and i64 %151, -262144
  %162 = or i64 %161, 8
  %163 = inttoptr i64 %162 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = and i64 %164, 24
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %175, label %167

167:                                              ; preds = %160
  %168 = and i64 %154, -262144
  %169 = or i64 %168, 8
  %170 = inttoptr i64 %169 to i64*
  %171 = load i64, i64* %170, align 8
  %172 = and i64 %171, 24
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %175

174:                                              ; preds = %167
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %154, i64 %155, i64 %151) #4
  br label %175

175:                                              ; preds = %141, %145, %174, %167, %160, %150, %75, %46, %76, %89, %132
  %176 = phi i64 [ %32, %132 ], [ %32, %89 ], [ %32, %76 ], [ %32, %46 ], [ %32, %75 ], [ %28, %150 ], [ %28, %160 ], [ %28, %167 ], [ %28, %174 ], [ %32, %145 ], [ %32, %141 ]
  %177 = phi i64 [ %26, %132 ], [ %26, %89 ], [ %26, %76 ], [ %32, %46 ], [ %26, %75 ], [ %26, %150 ], [ %26, %160 ], [ %26, %167 ], [ %26, %174 ], [ %26, %145 ], [ %26, %141 ]
  %178 = icmp eq i32 %41, %21
  br i1 %178, label %179, label %25

179:                                              ; preds = %175
  %180 = trunc i64 %176 to i32
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %208, label %182

182:                                              ; preds = %179
  %183 = and i64 %176, -4294967296
  %184 = add i64 %176, 15
  %185 = inttoptr i64 %184 to i32*
  %186 = load atomic i32, i32* %185 acquire, align 4
  %187 = zext i32 %186 to i64
  %188 = or i64 %183, %187
  %189 = add i64 %188, 3
  %190 = inttoptr i64 %189 to i32*
  store atomic volatile i32 %21, i32* %190 monotonic, align 4
  %191 = and i64 %8, 1
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %208, label %193

193:                                              ; preds = %182
  %194 = and i64 %8, -262144
  %195 = or i64 %194, 8
  %196 = inttoptr i64 %195 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = and i64 %197, 24
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %208, label %200

200:                                              ; preds = %193
  %201 = and i64 %188, -262144
  %202 = or i64 %201, 8
  %203 = inttoptr i64 %202 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = and i64 %204, 24
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %207, label %208

207:                                              ; preds = %200
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %188, i64 %189, i64 %8) #4
  br label %208

208:                                              ; preds = %18, %207, %200, %193, %182, %179
  %209 = phi i64 [ %177, %207 ], [ %177, %200 ], [ %177, %193 ], [ %177, %182 ], [ %177, %179 ], [ %8, %18 ]
  ret i64 %209
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
