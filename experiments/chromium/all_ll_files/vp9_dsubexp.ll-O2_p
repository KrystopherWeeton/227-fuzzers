; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/decoder/vp9_dsubexp.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/decoder/vp9_dsubexp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vpx_reader = type { i64, i32, i32, i8*, i8*, void (i8*, i8*, i8*, i32)*, i8*, [9 x i8] }

@vpx_norm = external local_unnamed_addr constant [256 x i8], align 16
@inv_remap_prob.inv_map_table = internal unnamed_addr constant [255 x i8] c"\07\14!.;HUbo|\89\96\A3\B0\BD\CA\D7\E4\F1\FE\01\02\03\04\05\06\08\09\0A\0B\0C\0D\0E\0F\10\11\12\13\15\16\17\18\19\1A\1B\1C\1D\1E\1F \22#$%&'()*+,-/0123456789:<=>?@ABCDEFGIJKLMNOPQRSTVWXYZ[\5C]^_`acdefghijklmnpqrstuvwxyz{}~\7F\80\81\82\83\84\85\86\87\88\8A\8B\8C\8D\8E\8F\90\91\92\93\94\95\97\98\99\9A\9B\9C\9D\9E\9F\A0\A1\A2\A4\A5\A6\A7\A8\A9\AA\AB\AC\AD\AE\AF\B1\B2\B3\B4\B5\B6\B7\B8\B9\BA\BB\BC\BE\BF\C0\C1\C2\C3\C4\C5\C6\C7\C8\C9\CB\CC\CD\CE\CF\D0\D1\D2\D3\D4\D5\D6\D8\D9\DA\DB\DC\DD\DE\DF\E0\E1\E2\E3\E5\E6\E7\E8\E9\EA\EB\EC\ED\EE\EF\F0\F2\F3\F4\F5\F6\F7\F8\F9\FA\FB\FC\FD\FD", align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_diff_update_prob(%struct.vpx_reader*, i8* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = mul i32 %4, 252
  %6 = add i32 %5, 4
  %7 = lshr i32 %6, 8
  %8 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %2
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %12 = load i32, i32* %8, align 4
  br label %13

13:                                               ; preds = %11, %2
  %14 = phi i32 [ %12, %11 ], [ %9, %2 ]
  %15 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %0, i64 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = zext i32 %7 to i64
  %18 = shl i64 %17, 56
  %19 = icmp ult i64 %16, %18
  br i1 %19, label %24, label %20

20:                                               ; preds = %13
  %21 = load i32, i32* %3, align 8
  %22 = sub i32 %21, %7
  %23 = sub i64 %16, %18
  br label %24

24:                                               ; preds = %13, %20
  %25 = phi i64 [ %23, %20 ], [ %16, %13 ]
  %26 = phi i32 [ %22, %20 ], [ %7, %13 ]
  %27 = phi i1 [ false, %20 ], [ true, %13 ]
  %28 = and i32 %26, 255
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = shl i32 %26, %32
  %34 = zext i8 %31 to i64
  %35 = shl i64 %25, %34
  %36 = sub nsw i32 %14, %32
  store i64 %35, i64* %15, align 8
  store i32 %36, i32* %8, align 4
  store i32 %33, i32* %3, align 8
  br i1 %27, label %650, label %37

37:                                               ; preds = %24
  %38 = shl i32 %33, 7
  %39 = add i32 %38, 128
  %40 = lshr i32 %39, 8
  %41 = icmp slt i32 %36, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %37
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %43 = load i32, i32* %8, align 4
  %44 = load i64, i64* %15, align 8
  br label %45

45:                                               ; preds = %42, %37
  %46 = phi i64 [ %44, %42 ], [ %35, %37 ]
  %47 = phi i32 [ %43, %42 ], [ %36, %37 ]
  %48 = zext i32 %40 to i64
  %49 = shl i64 %48, 56
  %50 = icmp ult i64 %46, %49
  br i1 %50, label %55, label %51

51:                                               ; preds = %45
  %52 = load i32, i32* %3, align 8
  %53 = sub i32 %52, %40
  %54 = sub i64 %46, %49
  br label %55

55:                                               ; preds = %51, %45
  %56 = phi i64 [ %54, %51 ], [ %46, %45 ]
  %57 = phi i32 [ %53, %51 ], [ %40, %45 ]
  %58 = phi i1 [ false, %51 ], [ true, %45 ]
  %59 = and i32 %57, 255
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = shl i32 %57, %63
  %65 = zext i8 %62 to i64
  %66 = shl i64 %56, %65
  %67 = sub nsw i32 %47, %63
  store i64 %66, i64* %15, align 8
  store i32 %67, i32* %8, align 4
  store i32 %64, i32* %3, align 8
  %68 = shl i32 %64, 7
  %69 = add i32 %68, 128
  %70 = lshr i32 %69, 8
  %71 = icmp slt i32 %67, 0
  br i1 %58, label %72, label %103

72:                                               ; preds = %55
  br i1 %71, label %73, label %76

73:                                               ; preds = %72
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %74 = load i32, i32* %8, align 4
  %75 = load i64, i64* %15, align 8
  br label %76

76:                                               ; preds = %73, %72
  %77 = phi i64 [ %75, %73 ], [ %66, %72 ]
  %78 = phi i32 [ %74, %73 ], [ %67, %72 ]
  %79 = zext i32 %70 to i64
  %80 = shl i64 %79, 56
  %81 = icmp ult i64 %77, %80
  br i1 %81, label %86, label %82

82:                                               ; preds = %76
  %83 = load i32, i32* %3, align 8
  %84 = sub i32 %83, %70
  %85 = sub i64 %77, %80
  br label %86

86:                                               ; preds = %82, %76
  %87 = phi i64 [ %85, %82 ], [ %77, %76 ]
  %88 = phi i32 [ %84, %82 ], [ %70, %76 ]
  %89 = phi i32 [ 8, %82 ], [ 0, %76 ]
  %90 = and i32 %88, 255
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = shl i32 %88, %94
  %96 = zext i8 %93 to i64
  %97 = shl i64 %87, %96
  %98 = sub nsw i32 %78, %94
  store i64 %97, i64* %15, align 8
  store i32 %98, i32* %8, align 4
  store i32 %95, i32* %3, align 8
  %99 = shl i32 %95, 7
  %100 = add i32 %99, 128
  %101 = lshr i32 %100, 8
  %102 = icmp slt i32 %98, 0
  br i1 %102, label %306, label %309

103:                                              ; preds = %55
  br i1 %71, label %104, label %107

104:                                              ; preds = %103
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %105 = load i32, i32* %8, align 4
  %106 = load i64, i64* %15, align 8
  br label %107

107:                                              ; preds = %104, %103
  %108 = phi i64 [ %106, %104 ], [ %66, %103 ]
  %109 = phi i32 [ %105, %104 ], [ %67, %103 ]
  %110 = zext i32 %70 to i64
  %111 = shl i64 %110, 56
  %112 = icmp ult i64 %108, %111
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = load i32, i32* %3, align 8
  %115 = sub i32 %114, %70
  %116 = sub i64 %108, %111
  br label %117

117:                                              ; preds = %113, %107
  %118 = phi i64 [ %116, %113 ], [ %108, %107 ]
  %119 = phi i32 [ %115, %113 ], [ %70, %107 ]
  %120 = phi i1 [ false, %113 ], [ true, %107 ]
  %121 = and i32 %119, 255
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = shl i32 %119, %125
  %127 = zext i8 %124 to i64
  %128 = shl i64 %118, %127
  %129 = sub nsw i32 %109, %125
  store i64 %128, i64* %15, align 8
  store i32 %129, i32* %8, align 4
  store i32 %126, i32* %3, align 8
  %130 = shl i32 %126, 7
  %131 = add i32 %130, 128
  %132 = lshr i32 %131, 8
  %133 = icmp slt i32 %129, 0
  br i1 %120, label %134, label %165

134:                                              ; preds = %117
  br i1 %133, label %135, label %138

135:                                              ; preds = %134
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %136 = load i32, i32* %8, align 4
  %137 = load i64, i64* %15, align 8
  br label %138

138:                                              ; preds = %135, %134
  %139 = phi i64 [ %137, %135 ], [ %128, %134 ]
  %140 = phi i32 [ %136, %135 ], [ %129, %134 ]
  %141 = zext i32 %132 to i64
  %142 = shl i64 %141, 56
  %143 = icmp ult i64 %139, %142
  br i1 %143, label %148, label %144

144:                                              ; preds = %138
  %145 = load i32, i32* %3, align 8
  %146 = sub i32 %145, %132
  %147 = sub i64 %139, %142
  br label %148

148:                                              ; preds = %144, %138
  %149 = phi i64 [ %147, %144 ], [ %139, %138 ]
  %150 = phi i32 [ %146, %144 ], [ %132, %138 ]
  %151 = phi i32 [ 24, %144 ], [ 16, %138 ]
  %152 = and i32 %150, 255
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %153
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = shl i32 %150, %156
  %158 = zext i8 %155 to i64
  %159 = shl i64 %149, %158
  %160 = sub nsw i32 %140, %156
  store i64 %159, i64* %15, align 8
  store i32 %160, i32* %8, align 4
  store i32 %157, i32* %3, align 8
  %161 = shl i32 %157, 7
  %162 = add i32 %161, 128
  %163 = lshr i32 %162, 8
  %164 = icmp slt i32 %160, 0
  br i1 %164, label %395, label %398

165:                                              ; preds = %117
  br i1 %133, label %166, label %169

166:                                              ; preds = %165
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %167 = load i32, i32* %8, align 4
  %168 = load i64, i64* %15, align 8
  br label %169

169:                                              ; preds = %166, %165
  %170 = phi i64 [ %168, %166 ], [ %128, %165 ]
  %171 = phi i32 [ %167, %166 ], [ %129, %165 ]
  %172 = zext i32 %132 to i64
  %173 = shl i64 %172, 56
  %174 = icmp ult i64 %170, %173
  br i1 %174, label %179, label %175

175:                                              ; preds = %169
  %176 = load i32, i32* %3, align 8
  %177 = sub i32 %176, %132
  %178 = sub i64 %170, %173
  br label %179

179:                                              ; preds = %175, %169
  %180 = phi i64 [ %178, %175 ], [ %170, %169 ]
  %181 = phi i32 [ %177, %175 ], [ %132, %169 ]
  %182 = phi i1 [ false, %175 ], [ true, %169 ]
  %183 = and i32 %181, 255
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %184
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i32
  %188 = shl i32 %181, %187
  %189 = zext i8 %186 to i64
  %190 = shl i64 %180, %189
  %191 = sub nsw i32 %171, %187
  store i64 %190, i64* %15, align 8
  store i32 %191, i32* %8, align 4
  store i32 %188, i32* %3, align 8
  br i1 %182, label %192, label %227

192:                                              ; preds = %179
  %193 = shl i32 %188, 7
  %194 = add i32 %193, 128
  %195 = lshr i32 %194, 8
  %196 = icmp slt i32 %191, 0
  br i1 %196, label %197, label %200

197:                                              ; preds = %192
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %198 = load i32, i32* %8, align 4
  %199 = load i64, i64* %15, align 8
  br label %200

200:                                              ; preds = %197, %192
  %201 = phi i64 [ %199, %197 ], [ %190, %192 ]
  %202 = phi i32 [ %198, %197 ], [ %191, %192 ]
  %203 = zext i32 %195 to i64
  %204 = shl i64 %203, 56
  %205 = icmp ult i64 %201, %204
  br i1 %205, label %210, label %206

206:                                              ; preds = %200
  %207 = load i32, i32* %3, align 8
  %208 = sub i32 %207, %195
  %209 = sub i64 %201, %204
  br label %210

210:                                              ; preds = %206, %200
  %211 = phi i64 [ %209, %206 ], [ %201, %200 ]
  %212 = phi i32 [ %208, %206 ], [ %195, %200 ]
  %213 = phi i32 [ 48, %206 ], [ 32, %200 ]
  %214 = and i32 %212, 255
  %215 = zext i32 %214 to i64
  %216 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %215
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i32
  %219 = shl i32 %212, %218
  %220 = zext i8 %217 to i64
  %221 = shl i64 %211, %220
  %222 = sub nsw i32 %202, %218
  store i64 %221, i64* %15, align 8
  store i32 %222, i32* %8, align 4
  store i32 %219, i32* %3, align 8
  %223 = shl i32 %219, 7
  %224 = add i32 %223, 128
  %225 = lshr i32 %224, 8
  %226 = icmp slt i32 %222, 0
  br i1 %226, label %484, label %487

227:                                              ; preds = %179, %251
  %228 = phi i64 [ %262, %251 ], [ %190, %179 ]
  %229 = phi i32 [ %263, %251 ], [ %191, %179 ]
  %230 = phi i32 [ %260, %251 ], [ %188, %179 ]
  %231 = phi i32 [ %233, %251 ], [ 7, %179 ]
  %232 = phi i32 [ %265, %251 ], [ 0, %179 ]
  %233 = add nsw i32 %231, -1
  %234 = shl i32 %230, 7
  %235 = add i32 %234, 128
  %236 = lshr i32 %235, 8
  %237 = icmp slt i32 %229, 0
  br i1 %237, label %238, label %241

238:                                              ; preds = %227
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %239 = load i32, i32* %8, align 4
  %240 = load i64, i64* %15, align 8
  br label %241

241:                                              ; preds = %238, %227
  %242 = phi i64 [ %240, %238 ], [ %228, %227 ]
  %243 = phi i32 [ %239, %238 ], [ %229, %227 ]
  %244 = zext i32 %236 to i64
  %245 = shl i64 %244, 56
  %246 = icmp ult i64 %242, %245
  br i1 %246, label %251, label %247

247:                                              ; preds = %241
  %248 = load i32, i32* %3, align 8
  %249 = sub i32 %248, %236
  %250 = sub i64 %242, %245
  br label %251

251:                                              ; preds = %247, %241
  %252 = phi i64 [ %250, %247 ], [ %242, %241 ]
  %253 = phi i32 [ %249, %247 ], [ %236, %241 ]
  %254 = phi i32 [ 1, %247 ], [ 0, %241 ]
  %255 = and i32 %253, 255
  %256 = zext i32 %255 to i64
  %257 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %256
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i32
  %260 = shl i32 %253, %259
  %261 = zext i8 %258 to i64
  %262 = shl i64 %252, %261
  %263 = sub nsw i32 %243, %259
  store i64 %262, i64* %15, align 8
  store i32 %263, i32* %8, align 4
  store i32 %260, i32* %3, align 8
  %264 = shl i32 %254, %233
  %265 = or i32 %264, %232
  %266 = icmp eq i32 %233, 0
  br i1 %266, label %267, label %227

267:                                              ; preds = %251
  %268 = icmp slt i32 %265, 65
  br i1 %268, label %303, label %269

269:                                              ; preds = %267
  %270 = shl i32 %265, 1
  %271 = add nsw i32 %270, -65
  %272 = shl i32 %260, 7
  %273 = add i32 %272, 128
  %274 = lshr i32 %273, 8
  %275 = icmp slt i32 %263, 0
  br i1 %275, label %276, label %279

276:                                              ; preds = %269
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %277 = load i32, i32* %8, align 4
  %278 = load i64, i64* %15, align 8
  br label %279

279:                                              ; preds = %276, %269
  %280 = phi i64 [ %278, %276 ], [ %262, %269 ]
  %281 = phi i32 [ %277, %276 ], [ %263, %269 ]
  %282 = zext i32 %274 to i64
  %283 = shl i64 %282, 56
  %284 = icmp ult i64 %280, %283
  br i1 %284, label %289, label %285

285:                                              ; preds = %279
  %286 = load i32, i32* %3, align 8
  %287 = sub i32 %286, %274
  %288 = sub i64 %280, %283
  br label %289

289:                                              ; preds = %285, %279
  %290 = phi i64 [ %288, %285 ], [ %280, %279 ]
  %291 = phi i32 [ %287, %285 ], [ %274, %279 ]
  %292 = phi i32 [ 1, %285 ], [ 0, %279 ]
  %293 = and i32 %291, 255
  %294 = zext i32 %293 to i64
  %295 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %294
  %296 = load i8, i8* %295, align 1
  %297 = zext i8 %296 to i32
  %298 = shl i32 %291, %297
  %299 = zext i8 %296 to i64
  %300 = shl i64 %290, %299
  %301 = sub nsw i32 %281, %297
  store i64 %300, i64* %15, align 8
  store i32 %301, i32* %8, align 4
  store i32 %298, i32* %3, align 8
  %302 = add nuw nsw i32 %271, %292
  br label %303

303:                                              ; preds = %289, %267
  %304 = phi i32 [ %302, %289 ], [ %265, %267 ]
  %305 = add nsw i32 %304, 64
  br label %604

306:                                              ; preds = %86
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %307 = load i32, i32* %8, align 4
  %308 = load i64, i64* %15, align 8
  br label %309

309:                                              ; preds = %306, %86
  %310 = phi i64 [ %308, %306 ], [ %97, %86 ]
  %311 = phi i32 [ %307, %306 ], [ %98, %86 ]
  %312 = zext i32 %101 to i64
  %313 = shl i64 %312, 56
  %314 = icmp ult i64 %310, %313
  br i1 %314, label %319, label %315

315:                                              ; preds = %309
  %316 = load i32, i32* %3, align 8
  %317 = sub i32 %316, %101
  %318 = sub i64 %310, %313
  br label %319

319:                                              ; preds = %315, %309
  %320 = phi i64 [ %318, %315 ], [ %310, %309 ]
  %321 = phi i32 [ %317, %315 ], [ %101, %309 ]
  %322 = phi i32 [ 4, %315 ], [ 0, %309 ]
  %323 = and i32 %321, 255
  %324 = zext i32 %323 to i64
  %325 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %324
  %326 = load i8, i8* %325, align 1
  %327 = zext i8 %326 to i32
  %328 = shl i32 %321, %327
  %329 = zext i8 %326 to i64
  %330 = shl i64 %320, %329
  %331 = sub nsw i32 %311, %327
  store i64 %330, i64* %15, align 8
  store i32 %331, i32* %8, align 4
  store i32 %328, i32* %3, align 8
  %332 = or i32 %322, %89
  %333 = shl i32 %328, 7
  %334 = add i32 %333, 128
  %335 = lshr i32 %334, 8
  %336 = icmp slt i32 %331, 0
  br i1 %336, label %337, label %340

337:                                              ; preds = %319
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %338 = load i32, i32* %8, align 4
  %339 = load i64, i64* %15, align 8
  br label %340

340:                                              ; preds = %337, %319
  %341 = phi i64 [ %339, %337 ], [ %330, %319 ]
  %342 = phi i32 [ %338, %337 ], [ %331, %319 ]
  %343 = zext i32 %335 to i64
  %344 = shl i64 %343, 56
  %345 = icmp ult i64 %341, %344
  br i1 %345, label %350, label %346

346:                                              ; preds = %340
  %347 = load i32, i32* %3, align 8
  %348 = sub i32 %347, %335
  %349 = sub i64 %341, %344
  br label %350

350:                                              ; preds = %346, %340
  %351 = phi i64 [ %349, %346 ], [ %341, %340 ]
  %352 = phi i32 [ %348, %346 ], [ %335, %340 ]
  %353 = phi i32 [ 2, %346 ], [ 0, %340 ]
  %354 = and i32 %352, 255
  %355 = zext i32 %354 to i64
  %356 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %355
  %357 = load i8, i8* %356, align 1
  %358 = zext i8 %357 to i32
  %359 = shl i32 %352, %358
  %360 = zext i8 %357 to i64
  %361 = shl i64 %351, %360
  %362 = sub nsw i32 %342, %358
  store i64 %361, i64* %15, align 8
  store i32 %362, i32* %8, align 4
  store i32 %359, i32* %3, align 8
  %363 = or i32 %332, %353
  %364 = shl i32 %359, 7
  %365 = add i32 %364, 128
  %366 = lshr i32 %365, 8
  %367 = icmp slt i32 %362, 0
  br i1 %367, label %368, label %371

368:                                              ; preds = %350
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %369 = load i32, i32* %8, align 4
  %370 = load i64, i64* %15, align 8
  br label %371

371:                                              ; preds = %368, %350
  %372 = phi i64 [ %370, %368 ], [ %361, %350 ]
  %373 = phi i32 [ %369, %368 ], [ %362, %350 ]
  %374 = zext i32 %366 to i64
  %375 = shl i64 %374, 56
  %376 = icmp ult i64 %372, %375
  br i1 %376, label %381, label %377

377:                                              ; preds = %371
  %378 = load i32, i32* %3, align 8
  %379 = sub i32 %378, %366
  %380 = sub i64 %372, %375
  br label %381

381:                                              ; preds = %377, %371
  %382 = phi i64 [ %380, %377 ], [ %372, %371 ]
  %383 = phi i32 [ %379, %377 ], [ %366, %371 ]
  %384 = phi i32 [ 1, %377 ], [ 0, %371 ]
  %385 = and i32 %383, 255
  %386 = zext i32 %385 to i64
  %387 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %386
  %388 = load i8, i8* %387, align 1
  %389 = zext i8 %388 to i32
  %390 = shl i32 %383, %389
  %391 = zext i8 %388 to i64
  %392 = shl i64 %382, %391
  %393 = sub nsw i32 %373, %389
  store i64 %392, i64* %15, align 8
  store i32 %393, i32* %8, align 4
  store i32 %390, i32* %3, align 8
  %394 = or i32 %363, %384
  br label %604

395:                                              ; preds = %148
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %396 = load i32, i32* %8, align 4
  %397 = load i64, i64* %15, align 8
  br label %398

398:                                              ; preds = %395, %148
  %399 = phi i64 [ %397, %395 ], [ %159, %148 ]
  %400 = phi i32 [ %396, %395 ], [ %160, %148 ]
  %401 = zext i32 %163 to i64
  %402 = shl i64 %401, 56
  %403 = icmp ult i64 %399, %402
  br i1 %403, label %408, label %404

404:                                              ; preds = %398
  %405 = load i32, i32* %3, align 8
  %406 = sub i32 %405, %163
  %407 = sub i64 %399, %402
  br label %408

408:                                              ; preds = %404, %398
  %409 = phi i64 [ %407, %404 ], [ %399, %398 ]
  %410 = phi i32 [ %406, %404 ], [ %163, %398 ]
  %411 = phi i32 [ 4, %404 ], [ 0, %398 ]
  %412 = and i32 %410, 255
  %413 = zext i32 %412 to i64
  %414 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %413
  %415 = load i8, i8* %414, align 1
  %416 = zext i8 %415 to i32
  %417 = shl i32 %410, %416
  %418 = zext i8 %415 to i64
  %419 = shl i64 %409, %418
  %420 = sub nsw i32 %400, %416
  store i64 %419, i64* %15, align 8
  store i32 %420, i32* %8, align 4
  store i32 %417, i32* %3, align 8
  %421 = shl i32 %417, 7
  %422 = add i32 %421, 128
  %423 = lshr i32 %422, 8
  %424 = icmp slt i32 %420, 0
  br i1 %424, label %425, label %428

425:                                              ; preds = %408
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %426 = load i32, i32* %8, align 4
  %427 = load i64, i64* %15, align 8
  br label %428

428:                                              ; preds = %425, %408
  %429 = phi i64 [ %427, %425 ], [ %419, %408 ]
  %430 = phi i32 [ %426, %425 ], [ %420, %408 ]
  %431 = zext i32 %423 to i64
  %432 = shl i64 %431, 56
  %433 = icmp ult i64 %429, %432
  br i1 %433, label %438, label %434

434:                                              ; preds = %428
  %435 = load i32, i32* %3, align 8
  %436 = sub i32 %435, %423
  %437 = sub i64 %429, %432
  br label %438

438:                                              ; preds = %434, %428
  %439 = phi i64 [ %437, %434 ], [ %429, %428 ]
  %440 = phi i32 [ %436, %434 ], [ %423, %428 ]
  %441 = phi i32 [ 2, %434 ], [ 0, %428 ]
  %442 = and i32 %440, 255
  %443 = zext i32 %442 to i64
  %444 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %443
  %445 = load i8, i8* %444, align 1
  %446 = zext i8 %445 to i32
  %447 = shl i32 %440, %446
  %448 = zext i8 %445 to i64
  %449 = shl i64 %439, %448
  %450 = sub nsw i32 %430, %446
  store i64 %449, i64* %15, align 8
  store i32 %450, i32* %8, align 4
  store i32 %447, i32* %3, align 8
  %451 = shl i32 %447, 7
  %452 = add i32 %451, 128
  %453 = lshr i32 %452, 8
  %454 = icmp slt i32 %450, 0
  br i1 %454, label %455, label %458

455:                                              ; preds = %438
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %456 = load i32, i32* %8, align 4
  %457 = load i64, i64* %15, align 8
  br label %458

458:                                              ; preds = %455, %438
  %459 = phi i64 [ %457, %455 ], [ %449, %438 ]
  %460 = phi i32 [ %456, %455 ], [ %450, %438 ]
  %461 = zext i32 %453 to i64
  %462 = shl i64 %461, 56
  %463 = icmp ult i64 %459, %462
  br i1 %463, label %468, label %464

464:                                              ; preds = %458
  %465 = load i32, i32* %3, align 8
  %466 = sub i32 %465, %453
  %467 = sub i64 %459, %462
  br label %468

468:                                              ; preds = %464, %458
  %469 = phi i64 [ %467, %464 ], [ %459, %458 ]
  %470 = phi i32 [ %466, %464 ], [ %453, %458 ]
  %471 = phi i32 [ 1, %464 ], [ 0, %458 ]
  %472 = and i32 %470, 255
  %473 = zext i32 %472 to i64
  %474 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %473
  %475 = load i8, i8* %474, align 1
  %476 = zext i8 %475 to i32
  %477 = shl i32 %470, %476
  %478 = zext i8 %475 to i64
  %479 = shl i64 %469, %478
  %480 = sub nsw i32 %460, %476
  store i64 %479, i64* %15, align 8
  store i32 %480, i32* %8, align 4
  store i32 %477, i32* %3, align 8
  %481 = or i32 %151, %411
  %482 = or i32 %481, %441
  %483 = or i32 %482, %471
  br label %604

484:                                              ; preds = %210
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %485 = load i32, i32* %8, align 4
  %486 = load i64, i64* %15, align 8
  br label %487

487:                                              ; preds = %484, %210
  %488 = phi i64 [ %486, %484 ], [ %221, %210 ]
  %489 = phi i32 [ %485, %484 ], [ %222, %210 ]
  %490 = zext i32 %225 to i64
  %491 = shl i64 %490, 56
  %492 = icmp ult i64 %488, %491
  br i1 %492, label %497, label %493

493:                                              ; preds = %487
  %494 = load i32, i32* %3, align 8
  %495 = sub i32 %494, %225
  %496 = sub i64 %488, %491
  br label %497

497:                                              ; preds = %493, %487
  %498 = phi i64 [ %496, %493 ], [ %488, %487 ]
  %499 = phi i32 [ %495, %493 ], [ %225, %487 ]
  %500 = phi i32 [ 8, %493 ], [ 0, %487 ]
  %501 = and i32 %499, 255
  %502 = zext i32 %501 to i64
  %503 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %502
  %504 = load i8, i8* %503, align 1
  %505 = zext i8 %504 to i32
  %506 = shl i32 %499, %505
  %507 = zext i8 %504 to i64
  %508 = shl i64 %498, %507
  %509 = sub nsw i32 %489, %505
  store i64 %508, i64* %15, align 8
  store i32 %509, i32* %8, align 4
  store i32 %506, i32* %3, align 8
  %510 = shl i32 %506, 7
  %511 = add i32 %510, 128
  %512 = lshr i32 %511, 8
  %513 = icmp slt i32 %509, 0
  br i1 %513, label %514, label %517

514:                                              ; preds = %497
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %515 = load i32, i32* %8, align 4
  %516 = load i64, i64* %15, align 8
  br label %517

517:                                              ; preds = %514, %497
  %518 = phi i64 [ %516, %514 ], [ %508, %497 ]
  %519 = phi i32 [ %515, %514 ], [ %509, %497 ]
  %520 = zext i32 %512 to i64
  %521 = shl i64 %520, 56
  %522 = icmp ult i64 %518, %521
  br i1 %522, label %527, label %523

523:                                              ; preds = %517
  %524 = load i32, i32* %3, align 8
  %525 = sub i32 %524, %512
  %526 = sub i64 %518, %521
  br label %527

527:                                              ; preds = %523, %517
  %528 = phi i64 [ %526, %523 ], [ %518, %517 ]
  %529 = phi i32 [ %525, %523 ], [ %512, %517 ]
  %530 = phi i32 [ 4, %523 ], [ 0, %517 ]
  %531 = and i32 %529, 255
  %532 = zext i32 %531 to i64
  %533 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %532
  %534 = load i8, i8* %533, align 1
  %535 = zext i8 %534 to i32
  %536 = shl i32 %529, %535
  %537 = zext i8 %534 to i64
  %538 = shl i64 %528, %537
  %539 = sub nsw i32 %519, %535
  store i64 %538, i64* %15, align 8
  store i32 %539, i32* %8, align 4
  store i32 %536, i32* %3, align 8
  %540 = shl i32 %536, 7
  %541 = add i32 %540, 128
  %542 = lshr i32 %541, 8
  %543 = icmp slt i32 %539, 0
  br i1 %543, label %544, label %547

544:                                              ; preds = %527
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %545 = load i32, i32* %8, align 4
  %546 = load i64, i64* %15, align 8
  br label %547

547:                                              ; preds = %544, %527
  %548 = phi i64 [ %546, %544 ], [ %538, %527 ]
  %549 = phi i32 [ %545, %544 ], [ %539, %527 ]
  %550 = zext i32 %542 to i64
  %551 = shl i64 %550, 56
  %552 = icmp ult i64 %548, %551
  br i1 %552, label %557, label %553

553:                                              ; preds = %547
  %554 = load i32, i32* %3, align 8
  %555 = sub i32 %554, %542
  %556 = sub i64 %548, %551
  br label %557

557:                                              ; preds = %553, %547
  %558 = phi i64 [ %556, %553 ], [ %548, %547 ]
  %559 = phi i32 [ %555, %553 ], [ %542, %547 ]
  %560 = phi i32 [ 2, %553 ], [ 0, %547 ]
  %561 = and i32 %559, 255
  %562 = zext i32 %561 to i64
  %563 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %562
  %564 = load i8, i8* %563, align 1
  %565 = zext i8 %564 to i32
  %566 = shl i32 %559, %565
  %567 = zext i8 %564 to i64
  %568 = shl i64 %558, %567
  %569 = sub nsw i32 %549, %565
  store i64 %568, i64* %15, align 8
  store i32 %569, i32* %8, align 4
  store i32 %566, i32* %3, align 8
  %570 = shl i32 %566, 7
  %571 = add i32 %570, 128
  %572 = lshr i32 %571, 8
  %573 = icmp slt i32 %569, 0
  br i1 %573, label %574, label %577

574:                                              ; preds = %557
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #2
  %575 = load i32, i32* %8, align 4
  %576 = load i64, i64* %15, align 8
  br label %577

577:                                              ; preds = %574, %557
  %578 = phi i64 [ %576, %574 ], [ %568, %557 ]
  %579 = phi i32 [ %575, %574 ], [ %569, %557 ]
  %580 = zext i32 %572 to i64
  %581 = shl i64 %580, 56
  %582 = icmp ult i64 %578, %581
  br i1 %582, label %587, label %583

583:                                              ; preds = %577
  %584 = load i32, i32* %3, align 8
  %585 = sub i32 %584, %572
  %586 = sub i64 %578, %581
  br label %587

587:                                              ; preds = %583, %577
  %588 = phi i64 [ %586, %583 ], [ %578, %577 ]
  %589 = phi i32 [ %585, %583 ], [ %572, %577 ]
  %590 = phi i32 [ 1, %583 ], [ 0, %577 ]
  %591 = and i32 %589, 255
  %592 = zext i32 %591 to i64
  %593 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %592
  %594 = load i8, i8* %593, align 1
  %595 = zext i8 %594 to i32
  %596 = shl i32 %589, %595
  %597 = zext i8 %594 to i64
  %598 = shl i64 %588, %597
  %599 = sub nsw i32 %579, %595
  store i64 %598, i64* %15, align 8
  store i32 %599, i32* %8, align 4
  store i32 %596, i32* %3, align 8
  %600 = or i32 %213, %500
  %601 = or i32 %600, %530
  %602 = or i32 %601, %560
  %603 = or i32 %602, %590
  br label %604

604:                                              ; preds = %303, %381, %468, %587
  %605 = phi i32 [ %305, %303 ], [ %603, %587 ], [ %483, %468 ], [ %394, %381 ]
  %606 = load i8, i8* %1, align 1
  %607 = zext i8 %606 to i32
  %608 = sext i32 %605 to i64
  %609 = getelementptr inbounds [255 x i8], [255 x i8]* @inv_remap_prob.inv_map_table, i64 0, i64 %608
  %610 = load i8, i8* %609, align 1
  %611 = zext i8 %610 to i32
  %612 = add nsw i32 %607, -1
  %613 = icmp ult i8 %606, -127
  br i1 %613, label %614, label %630

614:                                              ; preds = %604
  %615 = shl nsw i32 %612, 1
  %616 = icmp slt i32 %615, %611
  br i1 %616, label %627, label %617

617:                                              ; preds = %614
  %618 = and i32 %611, 1
  %619 = icmp eq i32 %618, 0
  br i1 %619, label %624, label %620

620:                                              ; preds = %617
  %621 = add nuw nsw i32 %611, 1
  %622 = lshr i32 %621, 1
  %623 = sub nsw i32 %612, %622
  br label %627

624:                                              ; preds = %617
  %625 = lshr i32 %611, 1
  %626 = add nsw i32 %625, %612
  br label %627

627:                                              ; preds = %624, %620, %614
  %628 = phi i32 [ %611, %614 ], [ %623, %620 ], [ %626, %624 ]
  %629 = add nsw i32 %628, 1
  br label %647

630:                                              ; preds = %604
  %631 = xor i32 %607, 255
  %632 = shl nuw nsw i32 %631, 1
  %633 = icmp ult i32 %632, %611
  br i1 %633, label %644, label %634

634:                                              ; preds = %630
  %635 = and i32 %611, 1
  %636 = icmp eq i32 %635, 0
  br i1 %636, label %641, label %637

637:                                              ; preds = %634
  %638 = add nuw nsw i32 %611, 1
  %639 = lshr i32 %638, 1
  %640 = sub nsw i32 %631, %639
  br label %644

641:                                              ; preds = %634
  %642 = lshr i32 %611, 1
  %643 = add nuw nsw i32 %642, %631
  br label %644

644:                                              ; preds = %641, %637, %630
  %645 = phi i32 [ %611, %630 ], [ %640, %637 ], [ %643, %641 ]
  %646 = sub nsw i32 255, %645
  br label %647

647:                                              ; preds = %627, %644
  %648 = phi i32 [ %629, %627 ], [ %646, %644 ]
  %649 = trunc i32 %648 to i8
  store i8 %649, i8* %1, align 1
  br label %650

650:                                              ; preds = %24, %647
  ret void
}

declare void @vpx_reader_fill(%struct.vpx_reader*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
