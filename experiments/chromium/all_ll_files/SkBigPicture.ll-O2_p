; ModuleID = '../../third_party/skia/src/core/SkBigPicture.cpp'
source_filename = "../../third_party/skia/src/core/SkBigPicture.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkBigPicture = type { %class.SkPicture.base, %struct.SkRect, i64, %class.sk_sp, %"class.std::__1::unique_ptr.6", %class.sk_sp.14 }
%class.SkPicture.base = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.1" }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl.3" }
%"struct.std::__1::__cxx_atomic_impl.3" = type { %"struct.std::__1::__cxx_atomic_base_impl.4" }
%"struct.std::__1::__cxx_atomic_base_impl.4" = type { i8 }
%struct.SkRect = type { float, float, float, float }
%class.sk_sp = type { %class.SkRecord* }
%class.SkRecord = type { %class.SkRefCnt.base, i32, i32, %class.SkAutoTMalloc, %class.SkArenaAlloc, i64 }
%class.SkAutoTMalloc = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkRecord::Record"* }
%"struct.SkRecord::Record" = type { i32, i8* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.SkBigPicture::SnapshotArray"* }
%class.sk_sp.14 = type { %class.SkBBoxHierarchy* }
%class.SkBBoxHierarchy = type { %class.SkRefCnt.base, [4 x i8] }
%class.sk_sp.21 = type { %class.SkRecord* }
%"class.SkBigPicture::SnapshotArray" = type <{ %class.SkAutoTMalloc.9, i32, [4 x i8] }>
%class.SkAutoTMalloc.9 = type { %"class.std::__1::unique_ptr.10" }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %class.SkPicture** }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.1", [7 x i8] }>
%class.sk_sp.22 = type { %class.SkBBoxHierarchy* }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.23 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.24 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr.25" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"class.SkPicture::AbortCallback" = type { i32 (...)** }
%class.SkDrawable = type { %class.SkFlattenable.base, i32 }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkM44 = type { [16 x float] }
%struct.NestedApproxOpCounter = type { i32 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"struct.SkRecords::DrawPicture" = type { %"class.SkRecords::Optional.37", %class.sk_sp.61, %"struct.SkRecords::TypedMatrix" }
%"class.SkRecords::Optional.37" = type { %class.SkPaint* }
%class.SkPaint = type <{ %class.sk_sp.38, %class.sk_sp.39, %class.sk_sp.40, %class.sk_sp.41, %class.sk_sp.42, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.38 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.39 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.40 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type opaque
%class.sk_sp.41 = type { %class.SkColorFilter* }
%class.SkColorFilter = type opaque
%class.sk_sp.42 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.sk_sp.61 = type { %class.SkPicture* }
%"struct.SkRecords::TypedMatrix" = type { %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }

$_ZN12SkBigPictureD2Ev = comdat any

$_ZN12SkBigPictureD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK12SkBigPicture14asSkBigPictureEv = comdat any

$_ZNK8SkRecord6Record5visitIR21NestedApproxOpCounterEEDTclfp_cvN9SkRecords4NoOpE_EEEOT_ = comdat any

@_ZTV12SkBigPicture = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkBigPicture*)* @_ZN12SkBigPictureD2Ev to i8*), i8* bitcast (void (%class.SkBigPicture*)* @_ZN12SkBigPictureD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.SkBigPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)* @_ZNK12SkBigPicture8playbackEP8SkCanvasPN9SkPicture13AbortCallbackE to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%class.SkBigPicture*)* @_ZNK12SkBigPicture8cullRectEv to i8*), i8* bitcast (i32 (%class.SkBigPicture*, i1)* @_ZNK12SkBigPicture18approximateOpCountEb to i8*), i8* bitcast (i64 (%class.SkBigPicture*)* @_ZNK12SkBigPicture20approximateBytesUsedEv to i8*), i8* bitcast (%class.SkBigPicture* (%class.SkBigPicture*)* @_ZNK12SkBigPicture14asSkBigPictureEv to i8*)] }, align 8

@_ZN12SkBigPictureC1ERK6SkRect5sk_spI8SkRecordENSt3__110unique_ptrINS_13SnapshotArrayENS6_14default_deleteIS8_EEEES3_I15SkBBoxHierarchyEm = hidden unnamed_addr alias void (%class.SkBigPicture*, %struct.SkRect*, %class.sk_sp.21*, %"class.SkBigPicture::SnapshotArray"*, %class.sk_sp.22*, i64), void (%class.SkBigPicture*, %struct.SkRect*, %class.sk_sp.21*, %"class.SkBigPicture::SnapshotArray"*, %class.sk_sp.22*, i64)* @_ZN12SkBigPictureC2ERK6SkRect5sk_spI8SkRecordENSt3__110unique_ptrINS_13SnapshotArrayENS6_14default_deleteIS8_EEEES3_I15SkBBoxHierarchyEm

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkBigPictureC2ERK6SkRect5sk_spI8SkRecordENSt3__110unique_ptrINS_13SnapshotArrayENS6_14default_deleteIS8_EEEES3_I15SkBBoxHierarchyEm(%class.SkBigPicture*, %struct.SkRect* nocapture readonly dereferenceable(16), %class.sk_sp.21* nocapture, %"class.SkBigPicture::SnapshotArray"*, %class.sk_sp.22* nocapture, i64) unnamed_addr #0 align 2 {
  %7 = ptrtoint %"class.SkBigPicture::SnapshotArray"* %3 to i64
  %8 = bitcast %class.SkBigPicture* %0 to %class.SkPicture*
  tail call void @_ZN9SkPictureC2Ev(%class.SkPicture* %8) #7
  %9 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV12SkBigPicture, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 1
  %11 = bitcast %struct.SkRect* %10 to i8*
  %12 = bitcast %struct.SkRect* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %11, i8* align 4 %12, i64 16, i1 false)
  %13 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 2
  store i64 %5, i64* %13, align 8
  %14 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 3
  %15 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %2, i64 0, i32 0
  %16 = bitcast %class.sk_sp.21* %2 to i64*
  %17 = load i64, i64* %16, align 8
  store %class.SkRecord* null, %class.SkRecord** %15, align 8
  %18 = bitcast %class.sk_sp* %14 to i64*
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 4
  %20 = bitcast %"class.std::__1::unique_ptr.6"* %19 to i64*
  store i64 %7, i64* %20, align 8
  %21 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 5
  %22 = getelementptr inbounds %class.sk_sp.22, %class.sk_sp.22* %4, i64 0, i32 0
  %23 = bitcast %class.sk_sp.22* %4 to i64*
  %24 = load i64, i64* %23, align 8
  store %class.SkBBoxHierarchy* null, %class.SkBBoxHierarchy** %22, align 8
  %25 = bitcast %class.sk_sp.14* %21 to i64*
  store i64 %24, i64* %25, align 8
  ret void
}

declare void @_ZN9SkPictureC2Ev(%class.SkPicture*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK12SkBigPicture8playbackEP8SkCanvasPN9SkPicture13AbortCallbackE(%class.SkBigPicture* nocapture readonly, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*) unnamed_addr #0 align 2 {
  %4 = tail call { <2 x float>, <2 x float> } @_ZNK8SkCanvas18getLocalClipBoundsEv(%class.SkCanvas* %1) #7
  %5 = extractvalue { <2 x float>, <2 x float> } %4, 0
  %6 = extractvalue { <2 x float>, <2 x float> } %4, 1
  %7 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 1
  %8 = bitcast %struct.SkRect* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 1, i32 2
  %11 = bitcast float* %10 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = extractelement <2 x float> %9, i32 0
  %14 = extractelement <2 x float> %12, i32 0
  %15 = fcmp olt float %13, %14
  br i1 %15, label %16, label %36

16:                                               ; preds = %3
  %17 = extractelement <2 x float> %9, i32 1
  %18 = extractelement <2 x float> %12, i32 1
  %19 = fcmp uge float %17, %18
  br i1 %19, label %36, label %20

20:                                               ; preds = %16
  %21 = extractelement <2 x float> %5, i32 0
  %22 = extractelement <2 x float> %6, i32 0
  %23 = fcmp olt float %21, %22
  br i1 %23, label %24, label %36

24:                                               ; preds = %20
  %25 = extractelement <2 x float> %5, i32 1
  %26 = extractelement <2 x float> %6, i32 1
  %27 = fcmp uge float %25, %26
  %28 = fcmp ugt float %21, %13
  %29 = or i1 %28, %27
  br i1 %29, label %36, label %30

30:                                               ; preds = %24
  %31 = fcmp ole float %25, %17
  %32 = fcmp oge float %22, %14
  %33 = fcmp oge float %26, %18
  %34 = and i1 %31, %32
  %35 = and i1 %33, %34
  br label %36

36:                                               ; preds = %3, %16, %20, %24, %30
  %37 = phi i1 [ %35, %30 ], [ false, %24 ], [ false, %20 ], [ false, %16 ], [ false, %3 ]
  %38 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 3, i32 0
  %39 = load %class.SkRecord*, %class.SkRecord** %38, align 8
  %40 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %41 = load %"class.SkBigPicture::SnapshotArray"*, %"class.SkBigPicture::SnapshotArray"** %40, align 8
  %42 = icmp eq %"class.SkBigPicture::SnapshotArray"* %41, null
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %"class.SkBigPicture::SnapshotArray", %"class.SkBigPicture::SnapshotArray"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load %class.SkPicture**, %class.SkPicture*** %44, align 8
  %46 = getelementptr inbounds %"class.SkBigPicture::SnapshotArray", %"class.SkBigPicture::SnapshotArray"* %41, i64 0, i32 1
  %47 = load i32, i32* %46, align 8
  br label %48

48:                                               ; preds = %36, %43
  %49 = phi %class.SkPicture** [ %45, %43 ], [ null, %36 ]
  %50 = phi i32 [ %47, %43 ], [ 0, %36 ]
  br i1 %37, label %54, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 5, i32 0
  %53 = load %class.SkBBoxHierarchy*, %class.SkBBoxHierarchy** %52, align 8
  br label %54

54:                                               ; preds = %48, %51
  %55 = phi %class.SkBBoxHierarchy* [ %53, %51 ], [ null, %48 ]
  tail call void @_Z12SkRecordDrawRK8SkRecordP8SkCanvasPKPK9SkPicturePKP10SkDrawableiPK15SkBBoxHierarchyPNS4_13AbortCallbackE(%class.SkRecord* dereferenceable(72) %39, %class.SkCanvas* %1, %class.SkPicture** %49, %class.SkDrawable** null, i32 %50, %class.SkBBoxHierarchy* %55, %"class.SkPicture::AbortCallback"* %2) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare { <2 x float>, <2 x float> } @_ZNK8SkCanvas18getLocalClipBoundsEv(%class.SkCanvas*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK12SkBigPicture8cullRectEv(%class.SkBigPicture* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 1
  %3 = bitcast %struct.SkRect* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 1, i32 2
  %6 = bitcast float* %5 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %4, 0
  %9 = insertvalue { <2 x float>, <2 x float> } %8, <2 x float> %7, 1
  ret { <2 x float>, <2 x float> } %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_Z12SkRecordDrawRK8SkRecordP8SkCanvasPKPK9SkPicturePKP10SkDrawableiPK15SkBBoxHierarchyPNS4_13AbortCallbackE(%class.SkRecord* dereferenceable(72), %class.SkCanvas*, %class.SkPicture**, %class.SkDrawable**, i32, %class.SkBBoxHierarchy*, %"class.SkPicture::AbortCallback"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.SkPicture** @_ZNK12SkBigPicture13drawablePictsEv(%class.SkBigPicture* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %3 = load %"class.SkBigPicture::SnapshotArray"*, %"class.SkBigPicture::SnapshotArray"** %2, align 8
  %4 = icmp eq %"class.SkBigPicture::SnapshotArray"* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.SkBigPicture::SnapshotArray", %"class.SkBigPicture::SnapshotArray"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %class.SkPicture**, %class.SkPicture*** %6, align 8
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi %class.SkPicture** [ %7, %5 ], [ null, %1 ]
  ret %class.SkPicture** %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK12SkBigPicture13drawableCountEv(%class.SkBigPicture* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %3 = load %"class.SkBigPicture::SnapshotArray"*, %"class.SkBigPicture::SnapshotArray"** %2, align 8
  %4 = icmp eq %"class.SkBigPicture::SnapshotArray"* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.SkBigPicture::SnapshotArray", %"class.SkBigPicture::SnapshotArray"* %3, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i32 [ %7, %5 ], [ 0, %1 ]
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK12SkBigPicture15partialPlaybackEP8SkCanvasiiRK5SkM44(%class.SkBigPicture* nocapture readonly, %class.SkCanvas*, i32, i32, %class.SkM44* dereferenceable(64)) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 3, i32 0
  %7 = load %class.SkRecord*, %class.SkRecord** %6, align 8
  %8 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %9 = load %"class.SkBigPicture::SnapshotArray"*, %"class.SkBigPicture::SnapshotArray"** %8, align 8
  %10 = icmp eq %"class.SkBigPicture::SnapshotArray"* %9, null
  br i1 %10, label %16, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.SkBigPicture::SnapshotArray", %"class.SkBigPicture::SnapshotArray"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %class.SkPicture**, %class.SkPicture*** %12, align 8
  %14 = getelementptr inbounds %"class.SkBigPicture::SnapshotArray", %"class.SkBigPicture::SnapshotArray"* %9, i64 0, i32 1
  %15 = load i32, i32* %14, align 8
  br label %16

16:                                               ; preds = %5, %11
  %17 = phi %class.SkPicture** [ %13, %11 ], [ null, %5 ]
  %18 = phi i32 [ %15, %11 ], [ 0, %5 ]
  tail call void @_Z19SkRecordPartialDrawRK8SkRecordP8SkCanvasPKPK9SkPictureiiiRK5SkM44(%class.SkRecord* dereferenceable(72) %7, %class.SkCanvas* %1, %class.SkPicture** %17, i32 %18, i32 %2, i32 %3, %class.SkM44* dereferenceable(64) %4) #7
  ret void
}

declare void @_Z19SkRecordPartialDrawRK8SkRecordP8SkCanvasPKPK9SkPictureiiiRK5SkM44(%class.SkRecord* dereferenceable(72), %class.SkCanvas*, %class.SkPicture**, i32, i32, i32, %class.SkM44* dereferenceable(64)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK12SkBigPicture18approximateOpCountEb(%class.SkBigPicture* nocapture readonly, i1 zeroext) unnamed_addr #0 align 2 {
  %3 = alloca %struct.NestedApproxOpCounter, align 4
  br i1 %1, label %4, label %28

4:                                                ; preds = %2
  %5 = bitcast %struct.NestedApproxOpCounter* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #7
  %6 = getelementptr inbounds %struct.NestedApproxOpCounter, %struct.NestedApproxOpCounter* %3, i64 0, i32 0
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 3, i32 0
  %8 = load %class.SkRecord*, %class.SkRecord** %7, align 8
  %9 = getelementptr inbounds %class.SkRecord, %class.SkRecord* %8, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %16, label %14

12:                                               ; preds = %16
  %13 = load i32, i32* %6, align 4
  br label %14

14:                                               ; preds = %12, %4
  %15 = phi i32 [ %13, %12 ], [ 0, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #7
  br label %33

16:                                               ; preds = %4, %16
  %17 = phi i64 [ %22, %16 ], [ 0, %4 ]
  %18 = phi %class.SkRecord* [ %23, %16 ], [ %8, %4 ]
  %19 = getelementptr inbounds %class.SkRecord, %class.SkRecord* %18, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %20 = load %"struct.SkRecord::Record"*, %"struct.SkRecord::Record"** %19, align 8
  %21 = getelementptr inbounds %"struct.SkRecord::Record", %"struct.SkRecord::Record"* %20, i64 %17
  call void @_ZNK8SkRecord6Record5visitIR21NestedApproxOpCounterEEDTclfp_cvN9SkRecords4NoOpE_EEEOT_(%"struct.SkRecord::Record"* %21, %struct.NestedApproxOpCounter* nonnull dereferenceable(4) %3) #7
  %22 = add nuw nsw i64 %17, 1
  %23 = load %class.SkRecord*, %class.SkRecord** %7, align 8
  %24 = getelementptr inbounds %class.SkRecord, %class.SkRecord* %23, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = sext i32 %25 to i64
  %27 = icmp slt i64 %22, %26
  br i1 %27, label %16, label %12

28:                                               ; preds = %2
  %29 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 3, i32 0
  %30 = load %class.SkRecord*, %class.SkRecord** %29, align 8
  %31 = getelementptr inbounds %class.SkRecord, %class.SkRecord* %30, i64 0, i32 1
  %32 = load i32, i32* %31, align 4
  br label %33

33:                                               ; preds = %28, %14
  %34 = phi i32 [ %15, %14 ], [ %32, %28 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK12SkBigPicture20approximateBytesUsedEv(%class.SkBigPicture* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 3, i32 0
  %3 = load %class.SkRecord*, %class.SkRecord** %2, align 8
  %4 = tail call i64 @_ZNK8SkRecord9bytesUsedEv(%class.SkRecord* %3) #7
  %5 = add i64 %4, 72
  %6 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %5, %7
  %9 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 5, i32 0
  %10 = load %class.SkBBoxHierarchy*, %class.SkBBoxHierarchy** %9, align 8
  %11 = icmp eq %class.SkBBoxHierarchy* %10, null
  br i1 %11, label %19, label %12

12:                                               ; preds = %1
  %13 = bitcast %class.SkBBoxHierarchy* %10 to i64 (%class.SkBBoxHierarchy*)***
  %14 = load i64 (%class.SkBBoxHierarchy*)**, i64 (%class.SkBBoxHierarchy*)*** %13, align 8
  %15 = getelementptr inbounds i64 (%class.SkBBoxHierarchy*)*, i64 (%class.SkBBoxHierarchy*)** %14, i64 6
  %16 = load i64 (%class.SkBBoxHierarchy*)*, i64 (%class.SkBBoxHierarchy*)** %15, align 8
  %17 = tail call i64 %16(%class.SkBBoxHierarchy* nonnull %10) #7
  %18 = add i64 %17, %8
  br label %19

19:                                               ; preds = %1, %12
  %20 = phi i64 [ %18, %12 ], [ %8, %1 ]
  ret i64 %20
}

declare i64 @_ZNK8SkRecord9bytesUsedEv(%class.SkRecord*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkBigPictureD2Ev(%class.SkBigPicture*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV12SkBigPicture, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 5, i32 0
  %4 = load %class.SkBBoxHierarchy*, %class.SkBBoxHierarchy** %3, align 8
  %5 = icmp eq %class.SkBBoxHierarchy* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkBBoxHierarchy, %class.SkBBoxHierarchy* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkBBoxHierarchy* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkBBoxHierarchy* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #7
  br label %16

16:                                               ; preds = %1, %6, %10
  %17 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %18 = load %"class.SkBigPicture::SnapshotArray"*, %"class.SkBigPicture::SnapshotArray"** %17, align 8
  store %"class.SkBigPicture::SnapshotArray"* null, %"class.SkBigPicture::SnapshotArray"** %17, align 8
  %19 = icmp eq %"class.SkBigPicture::SnapshotArray"* %18, null
  br i1 %19, label %52, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.SkBigPicture::SnapshotArray", %"class.SkBigPicture::SnapshotArray"* %18, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = icmp sgt i32 %22, 0
  %24 = getelementptr inbounds %"class.SkBigPicture::SnapshotArray", %"class.SkBigPicture::SnapshotArray"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br i1 %23, label %31, label %25

25:                                               ; preds = %45, %20
  %26 = bitcast %"class.SkBigPicture::SnapshotArray"* %18 to i64*
  %27 = load i64, i64* %26, align 8
  store %class.SkPicture** null, %class.SkPicture*** %24, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %50, label %29

29:                                               ; preds = %25
  %30 = inttoptr i64 %27 to i8*
  tail call void @_Z7sk_freePv(i8* %30) #7
  br label %50

31:                                               ; preds = %20, %45
  %32 = phi i64 [ %46, %45 ], [ 0, %20 ]
  %33 = load %class.SkPicture**, %class.SkPicture*** %24, align 8
  %34 = getelementptr inbounds %class.SkPicture*, %class.SkPicture** %33, i64 %32
  %35 = bitcast %class.SkPicture** %34 to %class.SkRefCntBase**
  %36 = load %class.SkRefCntBase*, %class.SkRefCntBase** %35, align 8
  %37 = getelementptr inbounds %class.SkRefCntBase, %class.SkRefCntBase* %36, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = atomicrmw add i32* %37, i32 -1 acq_rel
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %45

40:                                               ; preds = %31
  %41 = bitcast %class.SkRefCntBase* %36 to void (%class.SkRefCntBase*)***
  %42 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %41, align 8
  %43 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %42, i64 2
  %44 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %43, align 8
  tail call void %44(%class.SkRefCntBase* %36) #7
  br label %45

45:                                               ; preds = %40, %31
  %46 = add nuw nsw i64 %32, 1
  %47 = load i32, i32* %21, align 8
  %48 = sext i32 %47 to i64
  %49 = icmp slt i64 %46, %48
  br i1 %49, label %31, label %25

50:                                               ; preds = %29, %25
  %51 = bitcast %"class.SkBigPicture::SnapshotArray"* %18 to i8*
  tail call void @_ZdlPv(i8* %51) #8
  br label %52

52:                                               ; preds = %16, %50
  %53 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 3, i32 0
  %54 = load %class.SkRecord*, %class.SkRecord** %53, align 8
  %55 = icmp eq %class.SkRecord* %54, null
  br i1 %55, label %66, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %class.SkRecord, %class.SkRecord* %54, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = atomicrmw add i32* %57, i32 -1 acq_rel
  %59 = icmp eq i32 %58, 1
  br i1 %59, label %60, label %66

60:                                               ; preds = %56
  %61 = bitcast %class.SkRecord* %54 to %class.SkRefCntBase*
  %62 = bitcast %class.SkRecord* %54 to void (%class.SkRefCntBase*)***
  %63 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %62, align 8
  %64 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %63, i64 2
  %65 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %64, align 8
  tail call void %65(%class.SkRefCntBase* nonnull %61) #7
  br label %66

66:                                               ; preds = %52, %56, %60
  %67 = bitcast %class.SkBigPicture* %0 to %class.SkPicture*
  tail call void @_ZN9SkPictureD2Ev(%class.SkPicture* %67) #7
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkBigPictureD0Ev(%class.SkBigPicture*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV12SkBigPicture, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 5, i32 0
  %4 = load %class.SkBBoxHierarchy*, %class.SkBBoxHierarchy** %3, align 8
  %5 = icmp eq %class.SkBBoxHierarchy* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkBBoxHierarchy, %class.SkBBoxHierarchy* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkBBoxHierarchy* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkBBoxHierarchy* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #7
  br label %16

16:                                               ; preds = %10, %6, %1
  %17 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %18 = load %"class.SkBigPicture::SnapshotArray"*, %"class.SkBigPicture::SnapshotArray"** %17, align 8
  store %"class.SkBigPicture::SnapshotArray"* null, %"class.SkBigPicture::SnapshotArray"** %17, align 8
  %19 = icmp eq %"class.SkBigPicture::SnapshotArray"* %18, null
  br i1 %19, label %52, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.SkBigPicture::SnapshotArray", %"class.SkBigPicture::SnapshotArray"* %18, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = icmp sgt i32 %22, 0
  %24 = getelementptr inbounds %"class.SkBigPicture::SnapshotArray", %"class.SkBigPicture::SnapshotArray"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br i1 %23, label %31, label %25

25:                                               ; preds = %45, %20
  %26 = bitcast %"class.SkBigPicture::SnapshotArray"* %18 to i64*
  %27 = load i64, i64* %26, align 8
  store %class.SkPicture** null, %class.SkPicture*** %24, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %50, label %29

29:                                               ; preds = %25
  %30 = inttoptr i64 %27 to i8*
  tail call void @_Z7sk_freePv(i8* %30) #7
  br label %50

31:                                               ; preds = %20, %45
  %32 = phi i64 [ %46, %45 ], [ 0, %20 ]
  %33 = load %class.SkPicture**, %class.SkPicture*** %24, align 8
  %34 = getelementptr inbounds %class.SkPicture*, %class.SkPicture** %33, i64 %32
  %35 = bitcast %class.SkPicture** %34 to %class.SkRefCntBase**
  %36 = load %class.SkRefCntBase*, %class.SkRefCntBase** %35, align 8
  %37 = getelementptr inbounds %class.SkRefCntBase, %class.SkRefCntBase* %36, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = atomicrmw add i32* %37, i32 -1 acq_rel
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %45

40:                                               ; preds = %31
  %41 = bitcast %class.SkRefCntBase* %36 to void (%class.SkRefCntBase*)***
  %42 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %41, align 8
  %43 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %42, i64 2
  %44 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %43, align 8
  tail call void %44(%class.SkRefCntBase* %36) #7
  br label %45

45:                                               ; preds = %40, %31
  %46 = add nuw nsw i64 %32, 1
  %47 = load i32, i32* %21, align 8
  %48 = sext i32 %47 to i64
  %49 = icmp slt i64 %46, %48
  br i1 %49, label %31, label %25

50:                                               ; preds = %29, %25
  %51 = bitcast %"class.SkBigPicture::SnapshotArray"* %18 to i8*
  tail call void @_ZdlPv(i8* %51) #8
  br label %52

52:                                               ; preds = %50, %16
  %53 = getelementptr inbounds %class.SkBigPicture, %class.SkBigPicture* %0, i64 0, i32 3, i32 0
  %54 = load %class.SkRecord*, %class.SkRecord** %53, align 8
  %55 = icmp eq %class.SkRecord* %54, null
  br i1 %55, label %66, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %class.SkRecord, %class.SkRecord* %54, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = atomicrmw add i32* %57, i32 -1 acq_rel
  %59 = icmp eq i32 %58, 1
  br i1 %59, label %60, label %66

60:                                               ; preds = %56
  %61 = bitcast %class.SkRecord* %54 to %class.SkRefCntBase*
  %62 = bitcast %class.SkRecord* %54 to void (%class.SkRefCntBase*)***
  %63 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %62, align 8
  %64 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %63, i64 2
  %65 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %64, align 8
  tail call void %65(%class.SkRefCntBase* nonnull %61) #7
  br label %66

66:                                               ; preds = %52, %56, %60
  %67 = bitcast %class.SkBigPicture* %0 to %class.SkPicture*
  tail call void @_ZN9SkPictureD2Ev(%class.SkPicture* %67) #7
  %68 = bitcast %class.SkBigPicture* %0 to i8*
  tail call void @_ZdlPv(i8* %68) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #7
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkBigPicture* @_ZNK12SkBigPicture14asSkBigPictureEv(%class.SkBigPicture*) unnamed_addr #0 comdat align 2 {
  ret %class.SkBigPicture* %0
}

; Function Attrs: nounwind
declare void @_ZN9SkPictureD2Ev(%class.SkPicture*) unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK8SkRecord6Record5visitIR21NestedApproxOpCounterEEDTclfp_cvN9SkRecords4NoOpE_EEEOT_(%"struct.SkRecord::Record"*, %struct.NestedApproxOpCounter* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.SkRecord::Record", %"struct.SkRecord::Record"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 29
  br i1 %5, label %6, label %17

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.SkRecord::Record", %"struct.SkRecord::Record"* %0, i64 0, i32 1
  %8 = bitcast i8** %7 to %"struct.SkRecords::DrawPicture"**
  %9 = load %"struct.SkRecords::DrawPicture"*, %"struct.SkRecords::DrawPicture"** %8, align 8
  %10 = getelementptr inbounds %"struct.SkRecords::DrawPicture", %"struct.SkRecords::DrawPicture"* %9, i64 0, i32 1, i32 0
  %11 = load %class.SkPicture*, %class.SkPicture** %10, align 8
  %12 = bitcast %class.SkPicture* %11 to i32 (%class.SkPicture*, i1)***
  %13 = load i32 (%class.SkPicture*, i1)**, i32 (%class.SkPicture*, i1)*** %12, align 8
  %14 = getelementptr inbounds i32 (%class.SkPicture*, i1)*, i32 (%class.SkPicture*, i1)** %13, i64 5
  %15 = load i32 (%class.SkPicture*, i1)*, i32 (%class.SkPicture*, i1)** %14, align 8
  %16 = tail call i32 %15(%class.SkPicture* %11, i1 zeroext true) #7
  br label %17

17:                                               ; preds = %2, %6
  %18 = phi i32 [ %16, %6 ], [ 1, %2 ]
  %19 = getelementptr inbounds %struct.NestedApproxOpCounter, %struct.NestedApproxOpCounter* %1, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, %18
  store i32 %21, i32* %19, align 4
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
