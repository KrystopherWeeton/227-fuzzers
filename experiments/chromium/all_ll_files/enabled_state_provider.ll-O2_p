; ModuleID = '../../components/metrics/enabled_state_provider.cc'
source_filename = "../../components/metrics/enabled_state_provider.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.metrics::EnabledStateProvider" = type { i32 (...)** }
%"class.base::CommandLine" = type { %"class.std::__1::vector", %"class.std::__1::map", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i64 }

$_ZN7metrics20EnabledStateProviderD2Ev = comdat any

$_ZN7metrics20EnabledStateProviderD0Ev = comdat any

@_ZN8switches17kForceFieldTrialsE = external constant [0 x i8], align 1
@_ZTVN7metrics20EnabledStateProviderE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.metrics::EnabledStateProvider"*)* @_ZN7metrics20EnabledStateProviderD2Ev to i8*), i8* bitcast (void (%"class.metrics::EnabledStateProvider"*)* @_ZN7metrics20EnabledStateProviderD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%"class.metrics::EnabledStateProvider"*)* @_ZNK7metrics20EnabledStateProvider18IsReportingEnabledEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7metrics20EnabledStateProvider18IsReportingEnabledEv(%"class.metrics::EnabledStateProvider"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.metrics::EnabledStateProvider"* %0 to i1 (%"class.metrics::EnabledStateProvider"*)***
  %3 = load i1 (%"class.metrics::EnabledStateProvider"*)**, i1 (%"class.metrics::EnabledStateProvider"*)*** %2, align 8
  %4 = getelementptr inbounds i1 (%"class.metrics::EnabledStateProvider"*)*, i1 (%"class.metrics::EnabledStateProvider"*)** %3, i64 2
  %5 = load i1 (%"class.metrics::EnabledStateProvider"*)*, i1 (%"class.metrics::EnabledStateProvider"*)** %4, align 8
  %6 = tail call zeroext i1 %5(%"class.metrics::EnabledStateProvider"* %0) #3
  br i1 %6, label %7, label %11

7:                                                ; preds = %1
  %8 = tail call %"class.base::CommandLine"* @_ZN4base11CommandLine17ForCurrentProcessEv() #3
  %9 = tail call zeroext i1 @_ZNK4base11CommandLine9HasSwitchEPKc(%"class.base::CommandLine"* %8, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN8switches17kForceFieldTrialsE, i64 0, i64 0)) #3
  %10 = xor i1 %9, true
  br label %11

11:                                               ; preds = %7, %1
  %12 = phi i1 [ false, %1 ], [ %10, %7 ]
  ret i1 %12
}

declare %"class.base::CommandLine"* @_ZN4base11CommandLine17ForCurrentProcessEv() local_unnamed_addr #1

declare zeroext i1 @_ZNK4base11CommandLine9HasSwitchEPKc(%"class.base::CommandLine"*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7metrics20EnabledStateProviderD2Ev(%"class.metrics::EnabledStateProvider"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7metrics20EnabledStateProviderD0Ev(%"class.metrics::EnabledStateProvider"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #4
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { nounwind }
attributes #4 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
