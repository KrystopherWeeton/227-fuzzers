; ModuleID = '../../components/viz/common/quads/yuv_video_draw_quad.cc'
source_filename = "../../components/viz/common/quads/yuv_video_draw_quad.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::YUVVideoDrawQuad" = type { %"class.viz::DrawQuad.base", %"class.gfx::RectF", %"class.gfx::RectF", %"class.gfx::Size", %"class.gfx::Size", float, float, i32, %"class.gfx::ColorSpace", i32, %"struct.gfx::HDRMetadata" }
%"class.viz::DrawQuad.base" = type <{ i32 (...)**, i32, %"class.gfx::Rect", %"class.gfx::Rect", i8, [3 x i8], %"class.viz::SharedQuadState"*, %"struct.viz::DrawQuad::Resources" }>
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.viz::SharedQuadState" = type <{ %"class.gfx::Transform", %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::MaskFilterInfo", %"class.absl::optional", i8, [3 x i8], float, i32, i32, i8, [3 x i8], %"class.absl::optional.0", float, i8, [3 x i8] }>
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.gfx::MaskFilterInfo" = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.gfx::Rect" }
%"class.absl::optional.0" = type { %"class.absl::optional_internal::optional_data.1" }
%"class.absl::optional_internal::optional_data.1" = type { %"class.absl::optional_internal::optional_data_base.2" }
%"class.absl::optional_internal::optional_data_base.2" = type { %"class.absl::optional_internal::optional_data_dtor_base.3" }
%"class.absl::optional_internal::optional_data_dtor_base.3" = type { i8, %union.anon.4 }
%union.anon.4 = type { i64 }
%"struct.viz::DrawQuad::Resources" = type { i32, [4 x %"class.util::IdType"] }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i32 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"struct.gfx::HDRMetadata" = type { %"struct.gfx::MasteringMetadata", i32, i32 }
%"struct.gfx::MasteringMetadata" = type { %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", float, float }
%"class.viz::DrawQuad" = type <{ i32 (...)**, i32, %"class.gfx::Rect", %"class.gfx::Rect", i8, [3 x i8], %"class.viz::SharedQuadState"*, %"struct.viz::DrawQuad::Resources", [4 x i8] }>
%"class.base::trace_event::TracedValue" = type { %"class.base::trace_event::ConvertableToTraceFormat", %"class.std::__1::unique_ptr" }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::trace_event::TracedValue::Writer"* }
%"class.base::trace_event::TracedValue::Writer" = type { i32 (...)** }

@_ZTVN3viz16YUVVideoDrawQuadE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::YUVVideoDrawQuad"*)* @_ZN3viz16YUVVideoDrawQuadD2Ev to i8*), i8* bitcast (void (%"class.viz::YUVVideoDrawQuad"*)* @_ZN3viz16YUVVideoDrawQuadD0Ev to i8*), i8* bitcast (void (%"class.viz::YUVVideoDrawQuad"*, %"class.base::trace_event::TracedValue"*)* @_ZNK3viz16YUVVideoDrawQuad11ExtendValueEPN4base11trace_event11TracedValueE to i8*)] }, align 8
@.str = private unnamed_addr constant [18 x i8] c"ya_tex_coord_rect\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"uv_tex_coord_rect\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"ya_tex_size\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"uv_tex_size\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"y_plane_resource_id\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"u_plane_resource_id\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"v_plane_resource_id\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"a_plane_resource_id\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"protected_video_type\00", align 1

@_ZN3viz16YUVVideoDrawQuadC1Ev = hidden unnamed_addr alias void (%"class.viz::YUVVideoDrawQuad"*), void (%"class.viz::YUVVideoDrawQuad"*)* @_ZN3viz16YUVVideoDrawQuadC2Ev
@_ZN3viz16YUVVideoDrawQuadC1ERKS0_ = hidden unnamed_addr alias void (%"class.viz::YUVVideoDrawQuad"*, %"class.viz::YUVVideoDrawQuad"*), void (%"class.viz::YUVVideoDrawQuad"*, %"class.viz::YUVVideoDrawQuad"*)* @_ZN3viz16YUVVideoDrawQuadC2ERKS0_
@_ZN3viz16YUVVideoDrawQuadD1Ev = hidden unnamed_addr alias void (%"class.viz::YUVVideoDrawQuad"*), void (%"class.viz::YUVVideoDrawQuad"*)* @_ZN3viz16YUVVideoDrawQuadD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz16YUVVideoDrawQuadC2Ev(%"class.viz::YUVVideoDrawQuad"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.viz::YUVVideoDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuadC2Ev(%"class.viz::DrawQuad"* %2) #6
  %3 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz16YUVVideoDrawQuadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 6
  %6 = bitcast %"class.gfx::RectF"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 52, i1 false)
  store float 1.000000e+00, float* %5, align 8
  %7 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 7
  store i32 8, i32* %7, align 4
  %8 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 8, i32 0
  %9 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 10
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 72, i1 false)
  tail call void @_ZN3gfx11HDRMetadataC1Ev(%"struct.gfx::HDRMetadata"* %9) #6
  ret void
}

declare void @_ZN3viz8DrawQuadC2Ev(%"class.viz::DrawQuad"*) unnamed_addr #1

declare void @_ZN3gfx11HDRMetadataC1Ev(%"struct.gfx::HDRMetadata"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz16YUVVideoDrawQuadC2ERKS0_(%"class.viz::YUVVideoDrawQuad"*, %"class.viz::YUVVideoDrawQuad"* dereferenceable(256)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.viz::YUVVideoDrawQuad"* %0 to %"class.viz::DrawQuad"*
  %4 = bitcast %"class.viz::YUVVideoDrawQuad"* %1 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuadC2ERKS0_(%"class.viz::DrawQuad"* %3, %"class.viz::DrawQuad"* dereferenceable(80) %4) #6
  %5 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz16YUVVideoDrawQuadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %1, i64 0, i32 1
  %8 = bitcast %"class.gfx::RectF"* %6 to i8*
  %9 = bitcast %"class.gfx::RectF"* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 132, i1 false)
  %10 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 10
  %11 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %1, i64 0, i32 10
  tail call void @_ZN3gfx11HDRMetadataC1ERKS0_(%"struct.gfx::HDRMetadata"* %10, %"struct.gfx::HDRMetadata"* dereferenceable(48) %11) #6
  ret void
}

declare void @_ZN3viz8DrawQuadC2ERKS0_(%"class.viz::DrawQuad"*, %"class.viz::DrawQuad"* dereferenceable(80)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN3gfx11HDRMetadataC1ERKS0_(%"struct.gfx::HDRMetadata"*, %"struct.gfx::HDRMetadata"* dereferenceable(48)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN3viz8DrawQuadD2Ev(%"class.viz::DrawQuad"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz16YUVVideoDrawQuadD2Ev(%"class.viz::YUVVideoDrawQuad"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.viz::YUVVideoDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuadD2Ev(%"class.viz::DrawQuad"* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz16YUVVideoDrawQuadD0Ev(%"class.viz::YUVVideoDrawQuad"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.viz::YUVVideoDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuadD2Ev(%"class.viz::DrawQuad"* %2) #6
  %3 = bitcast %"class.viz::YUVVideoDrawQuad"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz16YUVVideoDrawQuad6SetNewEPKNS_15SharedQuadStateERKN3gfx4RectES7_bRKNS4_5RectFESA_RKNS4_4SizeESD_N4util6IdTypeINS_20ResourceIdTypeMarkerEjLj0ELj1EEESH_SH_SH_RKNS4_10ColorSpaceEffj(%"class.viz::YUVVideoDrawQuad"*, %"class.viz::SharedQuadState"*, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), i1 zeroext, %"class.gfx::RectF"* nocapture readonly dereferenceable(16), %"class.gfx::RectF"* nocapture readonly dereferenceable(16), %"class.gfx::Size"* nocapture readonly dereferenceable(8), %"class.gfx::Size"* nocapture readonly dereferenceable(8), i32, i32, i32, i32, %"class.gfx::ColorSpace"* nocapture readonly dereferenceable(68), float, float, i32) local_unnamed_addr #0 align 2 {
  %18 = bitcast %"class.viz::YUVVideoDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuad6SetAllEPKNS_15SharedQuadStateENS0_8MaterialERKN3gfx4RectES8_b(%"class.viz::DrawQuad"* %18, %"class.viz::SharedQuadState"* %1, i32 10, %"class.gfx::Rect"* dereferenceable(16) %2, %"class.gfx::Rect"* dereferenceable(16) %3, i1 zeroext %4) #6
  %19 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 1
  %20 = bitcast %"class.gfx::RectF"* %19 to i8*
  %21 = bitcast %"class.gfx::RectF"* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %20, i8* align 4 %21, i64 16, i1 false)
  %22 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 2
  %23 = bitcast %"class.gfx::RectF"* %22 to i8*
  %24 = bitcast %"class.gfx::RectF"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* align 4 %24, i64 16, i1 false)
  %25 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 3
  %26 = bitcast %"class.gfx::Size"* %7 to i64*
  %27 = bitcast %"class.gfx::Size"* %25 to i64*
  %28 = load i64, i64* %26, align 4
  store i64 %28, i64* %27, align 4
  %29 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 4
  %30 = bitcast %"class.gfx::Size"* %8 to i64*
  %31 = bitcast %"class.gfx::Size"* %29 to i64*
  %32 = load i64, i64* %30, align 4
  store i64 %32, i64* %31, align 4
  %33 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 7, i32 1, i64 0, i32 0, i32 0
  store i32 %9, i32* %33, align 4
  %34 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 7, i32 1, i64 1, i32 0, i32 0
  store i32 %10, i32* %34, align 4
  %35 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 7, i32 1, i64 2, i32 0, i32 0
  store i32 %11, i32* %35, align 4
  %36 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 7, i32 1, i64 3, i32 0, i32 0
  store i32 %12, i32* %36, align 4
  %37 = icmp eq i32 %12, 0
  %38 = select i1 %37, i32 3, i32 4
  %39 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 7, i32 0
  store i32 %38, i32* %39, align 8
  %40 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 8, i32 0
  %41 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %13, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 4 %41, i64 68, i1 false)
  %42 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 5
  store float %14, float* %42, align 4
  %43 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 6
  store float %15, float* %43, align 8
  %44 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 7
  store i32 %16, i32* %44, align 4
  ret void
}

declare void @_ZN3viz8DrawQuad6SetAllEPKNS_15SharedQuadStateENS0_8MaterialERKN3gfx4RectES8_b(%"class.viz::DrawQuad"*, %"class.viz::SharedQuadState"*, i32, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz16YUVVideoDrawQuad6SetAllEPKNS_15SharedQuadStateERKN3gfx4RectES7_bRKNS4_5RectFESA_RKNS4_4SizeESD_N4util6IdTypeINS_20ResourceIdTypeMarkerEjLj0ELj1EEESH_SH_SH_RKNS4_10ColorSpaceEffjNS4_18ProtectedVideoTypeENS4_11HDRMetadataE(%"class.viz::YUVVideoDrawQuad"*, %"class.viz::SharedQuadState"*, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), i1 zeroext, %"class.gfx::RectF"* nocapture readonly dereferenceable(16), %"class.gfx::RectF"* nocapture readonly dereferenceable(16), %"class.gfx::Size"* nocapture readonly dereferenceable(8), %"class.gfx::Size"* nocapture readonly dereferenceable(8), i32, i32, i32, i32, %"class.gfx::ColorSpace"* nocapture readonly dereferenceable(68), float, float, i32, i32, %"struct.gfx::HDRMetadata"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %20 = bitcast %"class.viz::YUVVideoDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuad6SetAllEPKNS_15SharedQuadStateENS0_8MaterialERKN3gfx4RectES8_b(%"class.viz::DrawQuad"* %20, %"class.viz::SharedQuadState"* %1, i32 10, %"class.gfx::Rect"* dereferenceable(16) %2, %"class.gfx::Rect"* dereferenceable(16) %3, i1 zeroext %4) #6
  %21 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 1
  %22 = bitcast %"class.gfx::RectF"* %21 to i8*
  %23 = bitcast %"class.gfx::RectF"* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %22, i8* align 4 %23, i64 16, i1 false)
  %24 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 2
  %25 = bitcast %"class.gfx::RectF"* %24 to i8*
  %26 = bitcast %"class.gfx::RectF"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* align 4 %26, i64 16, i1 false)
  %27 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 3
  %28 = bitcast %"class.gfx::Size"* %7 to i64*
  %29 = bitcast %"class.gfx::Size"* %27 to i64*
  %30 = load i64, i64* %28, align 4
  store i64 %30, i64* %29, align 4
  %31 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 4
  %32 = bitcast %"class.gfx::Size"* %8 to i64*
  %33 = bitcast %"class.gfx::Size"* %31 to i64*
  %34 = load i64, i64* %32, align 4
  store i64 %34, i64* %33, align 4
  %35 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 7, i32 1, i64 0, i32 0, i32 0
  store i32 %9, i32* %35, align 4
  %36 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 7, i32 1, i64 1, i32 0, i32 0
  store i32 %10, i32* %36, align 4
  %37 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 7, i32 1, i64 2, i32 0, i32 0
  store i32 %11, i32* %37, align 4
  %38 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 7, i32 1, i64 3, i32 0, i32 0
  store i32 %12, i32* %38, align 4
  %39 = icmp eq i32 %12, 0
  %40 = select i1 %39, i32 3, i32 4
  %41 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 7, i32 0
  store i32 %40, i32* %41, align 8
  %42 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 8, i32 0
  %43 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %13, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 4 %43, i64 68, i1 false)
  %44 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 5
  store float %14, float* %44, align 4
  %45 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 6
  store float %15, float* %45, align 8
  %46 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 7
  store i32 %16, i32* %46, align 4
  %47 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 9
  store i32 %17, i32* %47, align 4
  %48 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 10
  %49 = bitcast %"struct.gfx::HDRMetadata"* %48 to i8*
  %50 = bitcast %"struct.gfx::HDRMetadata"* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 4 %50, i64 48, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.viz::YUVVideoDrawQuad"* @_ZN3viz16YUVVideoDrawQuad12MaterialCastEPKNS_8DrawQuadE(%"class.viz::DrawQuad"* readnone) local_unnamed_addr #5 align 2 {
  %2 = bitcast %"class.viz::DrawQuad"* %0 to %"class.viz::YUVVideoDrawQuad"*
  ret %"class.viz::YUVVideoDrawQuad"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz16YUVVideoDrawQuad11ExtendValueEPN4base11trace_event11TracedValueE(%"class.viz::YUVVideoDrawQuad"*, %"class.base::trace_event::TracedValue"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 1
  tail call void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx5RectFEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), %"class.gfx::RectF"* dereferenceable(16) %3, %"class.base::trace_event::TracedValue"* %1) #6
  %4 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 2
  tail call void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx5RectFEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0), %"class.gfx::RectF"* dereferenceable(16) %4, %"class.base::trace_event::TracedValue"* %1) #6
  %5 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 3
  tail call void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx4SizeEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), %"class.gfx::Size"* dereferenceable(8) %5, %"class.base::trace_event::TracedValue"* %1) #6
  %6 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 4
  tail call void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx4SizeEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), %"class.gfx::Size"* dereferenceable(8) %6, %"class.base::trace_event::TracedValue"* %1) #6
  %7 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 7, i32 1, i64 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  tail call void @_ZN4base11trace_event11TracedValue10SetIntegerEPKci(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), i32 %8) #6
  %9 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 7, i32 1, i64 1, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  tail call void @_ZN4base11trace_event11TracedValue10SetIntegerEPKci(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i32 %10) #6
  %11 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 7, i32 1, i64 2, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  tail call void @_ZN4base11trace_event11TracedValue10SetIntegerEPKci(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i32 %12) #6
  %13 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 0, i32 7, i32 1, i64 3, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  tail call void @_ZN4base11trace_event11TracedValue10SetIntegerEPKci(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0), i32 %14) #6
  %15 = getelementptr inbounds %"class.viz::YUVVideoDrawQuad", %"class.viz::YUVVideoDrawQuad"* %0, i64 0, i32 9
  %16 = load i32, i32* %15, align 4
  tail call void @_ZN4base11trace_event11TracedValue10SetIntegerEPKci(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0), i32 %16) #6
  ret void
}

declare void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx5RectFEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::RectF"* dereferenceable(16), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #1

declare void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx4SizeEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::Size"* dereferenceable(8), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #1

declare void @_ZN4base11trace_event11TracedValue10SetIntegerEPKci(%"class.base::trace_event::TracedValue"*, i8*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
