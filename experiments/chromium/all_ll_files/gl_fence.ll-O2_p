; ModuleID = '../../ui/gl/gl_fence.cc'
source_filename = "../../ui/gl/gl_fence.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::ThreadLocalPointer" = type { %"class.base::ThreadLocalStorage::Slot" }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.gl::DriverEGL" = type { %"struct.gl::ProcsEGL", %"struct.gl::ExtensionsEGL" }
%"struct.gl::ProcsEGL" = type { i32 (i32)*, i32 (i8*, i8*, i32)*, i32 (i8*, i32*, i8**, i32, i32*)*, i32 (i8*, i8*, i32, i64)*, i32 (i8*, i8*, i64)*, i8* (i8*, i8*, i8*, i32*)*, i8* (i8*, i8*, i32, i8*, i32*)*, i8* (i8*, i32, i8*, i8*, i32*)*, i8* (i8*, i8*, i32*)*, i8* (i8*, i8*, i64, i32*)*, i8* (i8*, i32*)*, i32 (i8*, i8*, i64*)*, i8* (i8*, i32, i32*)*, i8* (i8*, i8*, i64, i32*)*, i32 (void (i32, i8*, i32, i8*, i8*, i8*)*, i64*)*, i32 (i8*, i8*)*, i32 (i8*, i8*)*, i32 (i8*, i8*)*, i32 (i8*, i8*)*, i32 (i8*, i8*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32*, i32*, i32*)*, i32 (i8*, i8*, i32*, i32*, i64*)*, i32 (i8*, i8*, i32, i32*, i64*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32, i32*)*, i32 (i8*, i8**, i32, i32*)*, i8* ()*, i8* ()*, i8* (i32)*, i8* (i64)*, i32 ()*, i32 (i8*, i8*, i64, i32, i32*, i64*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*, i32*)*, i8* (%struct.AHardwareBuffer*)*, i32 (i8*, i8*, i64*)*, i8* (i32, i8*, i64*)*, void ()* (i8*)*, i32 (i8*, i8*, i32, i32*)*, i32 (i8*, i8*, i64*, i64*, i64*)*, void (i8*)*, i32 (i8*, i8*, i64*)*, i32 (i8*, i32*, i32*)*, i32 (i8*, i32, i8*, i8*)*, i32 (i8*, i8*, i8*, i8*)*, i32 (i8*, i8*, i32, i32, i32, i32)*, i32 ()*, i32 (i8*, i8*, i32, i32*)*, i32 (i32, i64*)*, i32 (i32, i8**, i32*)*, i8* (i8*, i32)*, i32 (i8*, i32, i64*)*, i32 (i8*, i8*, i32, i32*)*, i32 (i8*, i8*, i32, i64*)*, i8* (i8*, i32)*, i8* (i8*, i32, i32)*, i32 (i8*, i8*, i32, i32*)*, i32 (i8*, i8*, i32, i8**)*, void (i8*, i8*)*, void (i8*, i8*)*, i32 (i8*, i8*, i32)*, i32 ()*, void (i8*, void (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)*)*, i32 (i8*, i8*, i32, i32)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i64*)*, i32 (i8*, i8*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i8*, i64*)*, i32 (i8*, i8*, i32, i32)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32*, i32)*, i32 (i8*, i32)*, i32 (i8*)*, i32 ()*, i32 ()*, i32 (i32)*, i32 (i8*, i8*, i32)* }
%struct.AHardwareBuffer = type opaque
%"struct.gl::ExtensionsEGL" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.gl::GLFence" = type { i32 (...)** }
%"struct.gl::DriverGL" = type <{ %"struct.gl::ProcsGL", %"struct.gl::ExtensionsGL", i8 }>
%"struct.gl::ProcsGL" = type { void (i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i8*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32, i8, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i8*)*, void (i32)*, void (i32, i32, i64, i32)*, void ()*, void (float, float, float, float)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, i32 (i32)*, void (i32)*, void (i32, i32, float, i32)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (float, float, float, float)*, void (double)*, void (float)*, void (i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, i32 (%struct.__GLsync*, i32, i64)*, i32 (%struct.__GLsync*, i32, i64)*, void (i8, i8, i8, i8)*, void (i32, i8, i8, i8, i8)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8, i8, i8)*, void (i32)*, void (i32, i32, i8*, i32, i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i8*, i32, i32, i32, float*)*, void (i32, i32)*, void (i32, i32*)*, i32 ()*, i32 (i32)*, i32 (i32, i32, i8**)*, void (i32)*, void (void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*)*, void (i32, i32, i32, i32, i32*, i8)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (%struct.__GLsync*)*, void (%struct.__GLsync*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i8)*, void (double, double)*, void (float, float)*, void (i32, i32)*, void (i32)*, void (i8*)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i64)*, void (i32, i32, i32)*, void (i32, i8*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i8*, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32)*, void (i32)*, void (i32)*, void ()*, %struct.__GLsync* (i32, i32)*, %struct.__GLsync* (i32, i32)*, void ()*, void (i32)*, void (i32)*, void ()*, void (i32, i64, i64)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, i32 (i32)*, i32 (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*, i32, i32*)*, void (i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i8**)*, i32 (i32, i32, i32*, i32*, i32*, i32*, i32*, i8*)*, i32 ()*, void (i32, i32, i32*)*, void (i32, float*)*, void (i32, i32, i32*, float*)*, i32 (i32, i8*)*, i32 (i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, i32 ()*, void (i32, i32, i64*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i64*)*, void (i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i8*, i32, i32*, i8*)*, void (i32, i8**)*, void (i32, i32, i32*, i8**)*, void (i32, i32, i32*, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i32, i32*, i32*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i64*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i64*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, i8* (i32)*, i8* (i32, i32)*, void (%struct.__GLsync*, i32, i32, i32*, i32*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*, i8*)*, i32 (i32, i8*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i8**)*, void (i32, i32, i32, i32*, i8**)*, void (i32, i32)*, void (i32, i64, i32, i32)*, void (i32, i64, i32, i8*)*, void (i32, i64, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32, i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (%struct.__GLsync*)*, i8 (%struct.__GLsync*)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, void (float)*, void (i32)*, i8* (i32, i32)*, i8* (i32, i64, i64, i32)*, void (i32, float*)*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, void (i32, i32, i32*)*, void (float)*, void (i32, i32*, i32*, i32)*, void (i32, i32*, i32*, i32*, i32)*, void (i32, i32*, i32*, i32*, i32*, i32)*, void (i32, i32*, i32, i8**, i32)*, void (i32, i32*, i32, i8**, i32*, i32)*, void (i32, i32*, i32, i8**, i32*, i32*, i32*, i32)*, void (i32, i32, i32, i8*)*, void (i8*, i32, i8*)*, void (i32, i32)*, void (i32, i32, i8*, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, i32)*, void (i32, i32, i32)*, void ()*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (float, float)*, void ()*, void ()*, void (i32)*, void (i32, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, float*)*, void (i32, i32, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, float, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8*)*, void (i32, i8*)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32*, i8*)*, void ()*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i8*)*, void ()*, void (float, i8)*, void (i32, i32)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32*, i32, i8*, i32)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, i8 (i32)*, i8 (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i8**, i32)*, void (i32, float)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, i8 (i32)*, void (i32)*, void (i32, i32, i32)*, void (i32)*, void (i32)*, void (i32, float)*, void (i32, float*)*, void (i32, float, float)*, void (i32, float*)*, void (i32, float, float, float)*, void (i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i8, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (%struct.__GLsync*, i32, i64)*, void (%struct.__GLsync*, i32, i64)*, void (i32, i32, i32*)* }
%struct.__GLsync = type opaque
%"struct.gl::ExtensionsGL" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"struct.gl::GLVersionInfo" = type { i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8, i8, i8, i8, %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.gl::GLFenceEGL" = type { %"class.gl::GLFence", i8*, i8* }
%"class.gl::GLFenceARB" = type { %"class.gl::GLFence", %struct.__GLsync* }
%"class.gl::GLFenceNV" = type <{ %"class.gl::GLFence", i32, [4 x i8] }>
%"class.gfx::GpuFence" = type { %"struct.gfx::GpuFenceHandle" }
%"struct.gfx::GpuFenceHandle" = type { %"class.base::ScopedGeneric" }
%"class.base::ScopedGeneric" = type <{ i32 (...)**, %"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data", i8, [3 x i8] }>
%"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data" = type { i32 }
%"class.gl::GLFenceAndroidNativeFenceSync" = type { %"class.gl::GLFenceEGL" }

@_ZTVN2gl7GLFenceE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.gl::GLFence"*)* @_ZN2gl7GLFenceD2Ev to i8*), i8* bitcast (void (%"class.gl::GLFence"*)* @_ZN2gl7GLFenceD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%"class.gl::GLFence"*)* @_ZN2gl7GLFence14ResetSupportedEv to i8*), i8* bitcast (void (%"class.gl::GLFence"*)* @_ZN2gl7GLFence10ResetStateEv to i8*), i8* bitcast (void (%"class.gl::GLFence"*)* @_ZN2gl7GLFence10InvalidateEv to i8*), i8* bitcast (%"class.gfx::GpuFence"* (%"class.gl::GLFence"*)* @_ZN2gl7GLFence11GetGpuFenceEv to i8*)] }, align 8
@_ZN2gl24g_current_gl_context_tlsE = external local_unnamed_addr global %"class.base::ThreadLocalPointer"*, align 8
@_ZN2gl12g_driver_eglE = external local_unnamed_addr global %"struct.gl::DriverEGL", align 8

@_ZN2gl7GLFenceD1Ev = hidden unnamed_addr alias void (%"class.gl::GLFence"*), void (%"class.gl::GLFence"*)* @_ZN2gl7GLFenceD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2gl7GLFenceC2Ev(%"class.gl::GLFence"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLFence", %"class.gl::GLFence"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN2gl7GLFenceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2gl7GLFenceD2Ev(%"class.gl::GLFence"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN2gl7GLFenceD0Ev(%"class.gl::GLFence"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #7
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2gl7GLFence11IsSupportedEv() local_unnamed_addr #4 align 2 {
  %1 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %2 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %1, i64 0, i32 0
  %3 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %2) #8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = bitcast i8* %4 to %"struct.gl::DriverGL"**
  %6 = load %"struct.gl::DriverGL"*, %"struct.gl::DriverGL"** %5, align 8
  %7 = getelementptr inbounds %"struct.gl::DriverGL", %"struct.gl::DriverGL"* %6, i64 0, i32 1, i32 35
  %8 = load i8, i8* %7, align 1, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %42

10:                                               ; preds = %0
  %11 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %12 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %11, i64 0, i32 0
  %13 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %12) #8
  %14 = getelementptr inbounds i8, i8* %13, i64 16
  %15 = bitcast i8* %14 to %"struct.gl::GLVersionInfo"**
  %16 = load %"struct.gl::GLVersionInfo"*, %"struct.gl::GLVersionInfo"** %15, align 8
  %17 = getelementptr inbounds %"struct.gl::GLVersionInfo", %"struct.gl::GLVersionInfo"* %16, i64 0, i32 11
  %18 = load i8, i8* %17, align 1, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %42

20:                                               ; preds = %10
  %21 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %22 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %21, i64 0, i32 0
  %23 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %22) #8
  %24 = getelementptr inbounds i8, i8* %23, i64 16
  %25 = bitcast i8* %24 to %"struct.gl::GLVersionInfo"**
  %26 = load %"struct.gl::GLVersionInfo"*, %"struct.gl::GLVersionInfo"** %25, align 8
  %27 = getelementptr inbounds %"struct.gl::GLVersionInfo", %"struct.gl::GLVersionInfo"* %26, i64 0, i32 12
  %28 = load i8, i8* %27, align 2, !range !2
  %29 = load i8, i8* getelementptr inbounds (%"struct.gl::DriverEGL", %"struct.gl::DriverEGL"* @_ZN2gl12g_driver_eglE, i64 0, i32 1, i32 17), align 1
  %30 = or i8 %29, %28
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %42

32:                                               ; preds = %20
  %33 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %34 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %33, i64 0, i32 0
  %35 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %34) #8
  %36 = getelementptr inbounds i8, i8* %35, i64 8
  %37 = bitcast i8* %36 to %"struct.gl::DriverGL"**
  %38 = load %"struct.gl::DriverGL"*, %"struct.gl::DriverGL"** %37, align 8
  %39 = getelementptr inbounds %"struct.gl::DriverGL", %"struct.gl::DriverGL"* %38, i64 0, i32 1, i32 89
  %40 = load i8, i8* %39, align 1, !range !2
  %41 = icmp ne i8 %40, 0
  br label %42

42:                                               ; preds = %20, %10, %0, %32
  %43 = phi i1 [ true, %20 ], [ true, %10 ], [ true, %0 ], [ %41, %32 ]
  ret i1 %43
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.gl::GLFence"* @_ZN2gl7GLFence6CreateEv() local_unnamed_addr #4 align 2 {
  %1 = load i8, i8* getelementptr inbounds (%"struct.gl::DriverEGL", %"struct.gl::DriverEGL"* @_ZN2gl12g_driver_eglE, i64 0, i32 1, i32 17), align 1, !range !2
  %2 = icmp eq i8 %1, 0
  %3 = load i8, i8* getelementptr inbounds (%"struct.gl::DriverEGL", %"struct.gl::DriverEGL"* @_ZN2gl12g_driver_eglE, i64 0, i32 1, i32 24), align 8
  %4 = icmp eq i8 %3, 0
  %5 = or i1 %2, %4
  br i1 %5, label %9, label %6

6:                                                ; preds = %0
  %7 = tail call %"class.gl::GLFenceEGL"* @_ZN2gl10GLFenceEGL6CreateEv() #8
  %8 = ptrtoint %"class.gl::GLFenceEGL"* %7 to i64
  br label %63

9:                                                ; preds = %0
  %10 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %11 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %10, i64 0, i32 0
  %12 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %11) #8
  %13 = getelementptr inbounds i8, i8* %12, i64 8
  %14 = bitcast i8* %13 to %"struct.gl::DriverGL"**
  %15 = load %"struct.gl::DriverGL"*, %"struct.gl::DriverGL"** %14, align 8
  %16 = getelementptr inbounds %"struct.gl::DriverGL", %"struct.gl::DriverGL"* %15, i64 0, i32 1, i32 35
  %17 = load i8, i8* %16, align 1, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %39

19:                                               ; preds = %9
  %20 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %21 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %20, i64 0, i32 0
  %22 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %21) #8
  %23 = getelementptr inbounds i8, i8* %22, i64 16
  %24 = bitcast i8* %23 to %"struct.gl::GLVersionInfo"**
  %25 = load %"struct.gl::GLVersionInfo"*, %"struct.gl::GLVersionInfo"** %24, align 8
  %26 = getelementptr inbounds %"struct.gl::GLVersionInfo", %"struct.gl::GLVersionInfo"* %25, i64 0, i32 11
  %27 = load i8, i8* %26, align 1, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %39

29:                                               ; preds = %19
  %30 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %31 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %30, i64 0, i32 0
  %32 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %31) #8
  %33 = getelementptr inbounds i8, i8* %32, i64 16
  %34 = bitcast i8* %33 to %"struct.gl::GLVersionInfo"**
  %35 = load %"struct.gl::GLVersionInfo"*, %"struct.gl::GLVersionInfo"** %34, align 8
  %36 = getelementptr inbounds %"struct.gl::GLVersionInfo", %"struct.gl::GLVersionInfo"* %35, i64 0, i32 12
  %37 = load i8, i8* %36, align 2, !range !2
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %43, label %39

39:                                               ; preds = %29, %19, %9
  %40 = tail call i8* @_Znwm(i64 16) #9
  %41 = bitcast i8* %40 to %"class.gl::GLFenceARB"*
  tail call void @_ZN2gl10GLFenceARBC1Ev(%"class.gl::GLFenceARB"* nonnull %41) #8
  %42 = ptrtoint i8* %40 to i64
  br label %63

43:                                               ; preds = %29
  %44 = load i8, i8* getelementptr inbounds (%"struct.gl::DriverEGL", %"struct.gl::DriverEGL"* @_ZN2gl12g_driver_eglE, i64 0, i32 1, i32 17), align 1, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %49, label %46

46:                                               ; preds = %43
  %47 = tail call %"class.gl::GLFenceEGL"* @_ZN2gl10GLFenceEGL6CreateEv() #8
  %48 = ptrtoint %"class.gl::GLFenceEGL"* %47 to i64
  br label %63

49:                                               ; preds = %43
  %50 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %51 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %50, i64 0, i32 0
  %52 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %51) #8
  %53 = getelementptr inbounds i8, i8* %52, i64 8
  %54 = bitcast i8* %53 to %"struct.gl::DriverGL"**
  %55 = load %"struct.gl::DriverGL"*, %"struct.gl::DriverGL"** %54, align 8
  %56 = getelementptr inbounds %"struct.gl::DriverGL", %"struct.gl::DriverGL"* %55, i64 0, i32 1, i32 89
  %57 = load i8, i8* %56, align 1, !range !2
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %63, label %59

59:                                               ; preds = %49
  %60 = tail call i8* @_Znwm(i64 16) #9
  %61 = bitcast i8* %60 to %"class.gl::GLFenceNV"*
  tail call void @_ZN2gl9GLFenceNVC1Ev(%"class.gl::GLFenceNV"* nonnull %61) #8
  %62 = ptrtoint i8* %60 to i64
  br label %63

63:                                               ; preds = %6, %46, %59, %39, %49
  %64 = phi i64 [ 0, %49 ], [ %62, %59 ], [ %48, %46 ], [ %42, %39 ], [ %8, %6 ]
  %65 = inttoptr i64 %64 to %"class.gl::GLFence"*
  ret %"class.gl::GLFence"* %65
}

declare %"class.gl::GLFenceEGL"* @_ZN2gl10GLFenceEGL6CreateEv() local_unnamed_addr #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2gl7GLFence14ResetSupportedEv(%"class.gl::GLFence"* nocapture readnone) unnamed_addr #1 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2gl7GLFence10ResetStateEv(%"class.gl::GLFence"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2gl7GLFence10InvalidateEv(%"class.gl::GLFence"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2gl7GLFence19IsGpuFenceSupportedEv() local_unnamed_addr #4 align 2 {
  %1 = tail call zeroext i1 @_ZN2gl12GLSurfaceEGL33IsAndroidNativeFenceSyncSupportedEv() #8
  ret i1 %1
}

declare zeroext i1 @_ZN2gl12GLSurfaceEGL33IsAndroidNativeFenceSyncSupportedEv() local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden %"class.gl::GLFence"* @_ZN2gl7GLFence18CreateFromGpuFenceERKN3gfx8GpuFenceE(%"class.gfx::GpuFence"* dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %2 = tail call %"class.gl::GLFenceAndroidNativeFenceSync"* @_ZN2gl29GLFenceAndroidNativeFenceSync18CreateFromGpuFenceERKN3gfx8GpuFenceE(%"class.gfx::GpuFence"* dereferenceable(16) %0) #8
  %3 = getelementptr inbounds %"class.gl::GLFenceAndroidNativeFenceSync", %"class.gl::GLFenceAndroidNativeFenceSync"* %2, i64 0, i32 0, i32 0
  ret %"class.gl::GLFence"* %3
}

declare %"class.gl::GLFenceAndroidNativeFenceSync"* @_ZN2gl29GLFenceAndroidNativeFenceSync18CreateFromGpuFenceERKN3gfx8GpuFenceE(%"class.gfx::GpuFence"* dereferenceable(16)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden %"class.gl::GLFence"* @_ZN2gl7GLFence17CreateForGpuFenceEv() local_unnamed_addr #4 align 2 {
  %1 = tail call %"class.gl::GLFenceAndroidNativeFenceSync"* @_ZN2gl29GLFenceAndroidNativeFenceSync17CreateForGpuFenceEv() #8
  %2 = getelementptr inbounds %"class.gl::GLFenceAndroidNativeFenceSync", %"class.gl::GLFenceAndroidNativeFenceSync"* %1, i64 0, i32 0, i32 0
  ret %"class.gl::GLFence"* %2
}

declare %"class.gl::GLFenceAndroidNativeFenceSync"* @_ZN2gl29GLFenceAndroidNativeFenceSync17CreateForGpuFenceEv() local_unnamed_addr #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.gfx::GpuFence"* @_ZN2gl7GLFence11GetGpuFenceEv(%"class.gl::GLFence"* nocapture readnone) unnamed_addr #1 align 2 {
  ret %"class.gfx::GpuFence"* null
}

declare void @__cxa_pure_virtual() unnamed_addr

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZN2gl10GLFenceARBC1Ev(%"class.gl::GLFenceARB"*) unnamed_addr #5

declare void @_ZN2gl9GLFenceNVC1Ev(%"class.gl::GLFenceNV"*) unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
