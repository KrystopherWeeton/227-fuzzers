; ModuleID = '../../content/renderer/sad_plugin.cc'
source_filename = "../../content/renderer/sad_plugin.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::PaintFlags" = type <{ %class.sk_sp.10, %class.sk_sp.11, %class.sk_sp.26, %class.sk_sp.27, %class.sk_sp.28, %class.sk_sp.29, i32, float, float, i32, %union.anon.30, [4 x i8] }>
%class.sk_sp.10 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.11 = type { %"class.cc::PaintShader"* }
%"class.cc::PaintShader" = type <{ %class.SkRefCnt.base, i8, [3 x i8], i32, float, float, i32, i32, i32, i8, [3 x i8], %"class.absl::optional", %struct.SkPoint, %struct.SkRect, %struct.SkPoint, %struct.SkPoint, float, float, %"class.cc::PaintImage", %class.sk_sp.7, i32, %"class.absl::optional.12", %"class.std::__1::vector", %"class.std::__1::vector.18", %class.sk_sp.25, %class.sk_sp, i32, [4 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.cc::PaintImage" = type { %class.sk_sp, %class.sk_sp.7, %"class.gfx::Rect", i32, %class.sk_sp.8, %class.sk_sp.9, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp, %class.scoped_refptr }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%class.sk_sp.8 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type opaque
%class.sk_sp.9 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type opaque
%class.scoped_refptr = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type opaque
%class.sk_sp.7 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type opaque
%"class.absl::optional.12" = type { %"class.absl::optional_internal::optional_data.13" }
%"class.absl::optional_internal::optional_data.13" = type { %"class.absl::optional_internal::optional_data_base.14" }
%"class.absl::optional_internal::optional_data_base.14" = type { %"class.absl::optional_internal::optional_data_dtor_base.15" }
%"class.absl::optional_internal::optional_data_dtor_base.15" = type { i8, %union.anon.16 }
%union.anon.16 = type { %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { float*, float*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { float* }
%class.sk_sp.25 = type { %class.SkPicture* }
%class.SkPicture = type opaque
%class.sk_sp = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.1, i32, i32 }
%class.sk_sp.1 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.26 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.27 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.28 = type { %class.SkDrawLooper* }
%class.SkDrawLooper = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.29 = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type opaque
%union.anon.30 = type { i32 }
%"class.cc::PaintCanvas" = type { i32 (...)**, %"class.printing::MetafileSkia"*, %"class.paint_preview::PaintPreviewTracker"* }
%"class.printing::MetafileSkia" = type opaque
%"class.paint_preview::PaintPreviewTracker" = type opaque
%struct.SkSamplingOptions = type { i8, %struct.SkCubicResampler, i32, i32 }
%struct.SkCubicResampler = type { float, float }

@__const._ZN7content14PaintSadPluginEPN2cc11PaintCanvasERKN3gfx4RectERKNS0_10PaintImageE.flags = private unnamed_addr constant %"class.cc::PaintFlags" <{ %class.sk_sp.10 { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp.11 { %"class.cc::PaintShader"* inttoptr (i64 -6148914691236517206 to %"class.cc::PaintShader"*) }, %class.sk_sp.26 { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.27 { %class.SkColorFilter* inttoptr (i64 -6148914691236517206 to %class.SkColorFilter*) }, %class.sk_sp.28 { %class.SkDrawLooper* inttoptr (i64 -6148914691236517206 to %class.SkDrawLooper*) }, %class.sk_sp.29 { %"class.cc::PaintFilter"* inttoptr (i64 -6148914691236517206 to %"class.cc::PaintFilter"*) }, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, %union.anon.30 { i32 -1431655766 }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content14PaintSadPluginEPN2cc11PaintCanvasERKN3gfx4RectERKNS0_10PaintImageE(%"class.cc::PaintCanvas"*, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.cc::PaintImage"* dereferenceable(104)) local_unnamed_addr #0 {
  %4 = alloca %struct.SkSamplingOptions, align 4
  %5 = alloca %"class.cc::PaintFlags", align 8
  %6 = alloca { <2 x float>, <2 x float> }, align 8
  %7 = bitcast { <2 x float>, <2 x float> }* %6 to %struct.SkRect*
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq %"class.cc::PaintCanvas"* %0, null
  br i1 %12, label %23, label %13

13:                                               ; preds = %3
  %14 = bitcast %"class.cc::PaintCanvas"* %0 to i32 (%"class.cc::PaintCanvas"*)***
  %15 = load i32 (%"class.cc::PaintCanvas"*)**, i32 (%"class.cc::PaintCanvas"*)*** %14, align 8
  %16 = getelementptr inbounds i32 (%"class.cc::PaintCanvas"*)*, i32 (%"class.cc::PaintCanvas"*)** %15, i64 9
  %17 = load i32 (%"class.cc::PaintCanvas"*)*, i32 (%"class.cc::PaintCanvas"*)** %16, align 8
  %18 = tail call i32 %17(%"class.cc::PaintCanvas"* nonnull %0) #4
  %19 = load i32 (%"class.cc::PaintCanvas"*)**, i32 (%"class.cc::PaintCanvas"*)*** %14, align 8
  %20 = getelementptr inbounds i32 (%"class.cc::PaintCanvas"*)*, i32 (%"class.cc::PaintCanvas"*)** %19, i64 5
  %21 = load i32 (%"class.cc::PaintCanvas"*)*, i32 (%"class.cc::PaintCanvas"*)** %20, align 8
  %22 = tail call i32 %21(%"class.cc::PaintCanvas"* nonnull %0) #4
  br label %23

23:                                               ; preds = %3, %13
  %24 = phi i32 [ 0, %3 ], [ %18, %13 ]
  %25 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = sitofp i32 %26 to float
  %28 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = sitofp i32 %29 to float
  %31 = bitcast %"class.cc::PaintCanvas"* %0 to void (%"class.cc::PaintCanvas"*, float, float)***
  %32 = load void (%"class.cc::PaintCanvas"*, float, float)**, void (%"class.cc::PaintCanvas"*, float, float)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.cc::PaintCanvas"*, float, float)*, void (%"class.cc::PaintCanvas"*, float, float)** %32, i64 11
  %34 = load void (%"class.cc::PaintCanvas"*, float, float)*, void (%"class.cc::PaintCanvas"*, float, float)** %33, align 8
  tail call void %34(%"class.cc::PaintCanvas"* %0, float %27, float %30) #4
  %35 = bitcast %"class.cc::PaintFlags"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %35) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %35, i8* align 8 bitcast (%"class.cc::PaintFlags"* @__const._ZN7content14PaintSadPluginEPN2cc11PaintCanvasERKN3gfx4RectERKNS0_10PaintImageE.flags to i8*), i64 72, i1 false)
  call void @_ZN2cc10PaintFlagsC1Ev(%"class.cc::PaintFlags"* nonnull %5) #4
  %36 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %5, i64 0, i32 10
  %37 = bitcast %union.anon.30* %36 to i16*
  %38 = load i16, i16* %37, align 8
  %39 = and i16 %38, -193
  store i16 %39, i16* %37, align 8
  %40 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %5, i64 0, i32 6
  store i32 -16777216, i32* %40, align 8
  %41 = bitcast { <2 x float>, <2 x float> }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #4
  %42 = sitofp i32 %9 to float
  %43 = insertelement <2 x float> undef, float %42, i32 0
  %44 = sitofp i32 %11 to float
  %45 = insertelement <2 x float> %43, float %44, i32 1
  %46 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0
  store <2 x float> zeroinitializer, <2 x float>* %46, align 8
  %47 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1
  store <2 x float> %45, <2 x float>* %47, align 8
  %48 = bitcast %"class.cc::PaintCanvas"* %0 to void (%"class.cc::PaintCanvas"*, %struct.SkRect*, %"class.cc::PaintFlags"*)***
  %49 = load void (%"class.cc::PaintCanvas"*, %struct.SkRect*, %"class.cc::PaintFlags"*)**, void (%"class.cc::PaintCanvas"*, %struct.SkRect*, %"class.cc::PaintFlags"*)*** %48, align 8
  %50 = getelementptr inbounds void (%"class.cc::PaintCanvas"*, %struct.SkRect*, %"class.cc::PaintFlags"*)*, void (%"class.cc::PaintCanvas"*, %struct.SkRect*, %"class.cc::PaintFlags"*)** %49, i64 28
  %51 = load void (%"class.cc::PaintCanvas"*, %struct.SkRect*, %"class.cc::PaintFlags"*)*, void (%"class.cc::PaintCanvas"*, %struct.SkRect*, %"class.cc::PaintFlags"*)** %50, align 8
  call void %51(%"class.cc::PaintCanvas"* %0, %struct.SkRect* nonnull dereferenceable(16) %7, %"class.cc::PaintFlags"* nonnull dereferenceable(72) %5) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41) #4
  %52 = call i32 @_ZNK2cc10PaintImage5widthEv(%"class.cc::PaintImage"* %2) #4
  %53 = sub nsw i32 %9, %52
  %54 = sdiv i32 %53, 2
  %55 = icmp sgt i32 %54, 0
  %56 = select i1 %55, i32 %54, i32 0
  %57 = sitofp i32 %56 to float
  %58 = call i32 @_ZNK2cc10PaintImage6heightEv(%"class.cc::PaintImage"* %2) #4
  %59 = sub nsw i32 %11, %58
  %60 = sdiv i32 %59, 2
  %61 = icmp sgt i32 %60, 0
  %62 = select i1 %61, i32 %60, i32 0
  %63 = sitofp i32 %62 to float
  %64 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %64) #4
  %65 = bitcast %"class.cc::PaintCanvas"* %0 to void (%"class.cc::PaintCanvas"*, %"class.cc::PaintImage"*, float, float, %struct.SkSamplingOptions*, %"class.cc::PaintFlags"*)***
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %64, i8 0, i64 20, i1 false) #4
  %66 = load void (%"class.cc::PaintCanvas"*, %"class.cc::PaintImage"*, float, float, %struct.SkSamplingOptions*, %"class.cc::PaintFlags"*)**, void (%"class.cc::PaintCanvas"*, %"class.cc::PaintImage"*, float, float, %struct.SkSamplingOptions*, %"class.cc::PaintFlags"*)*** %65, align 8
  %67 = getelementptr inbounds void (%"class.cc::PaintCanvas"*, %"class.cc::PaintImage"*, float, float, %struct.SkSamplingOptions*, %"class.cc::PaintFlags"*)*, void (%"class.cc::PaintCanvas"*, %"class.cc::PaintImage"*, float, float, %struct.SkSamplingOptions*, %"class.cc::PaintFlags"*)** %66, i64 35
  %68 = load void (%"class.cc::PaintCanvas"*, %"class.cc::PaintImage"*, float, float, %struct.SkSamplingOptions*, %"class.cc::PaintFlags"*)*, void (%"class.cc::PaintCanvas"*, %"class.cc::PaintImage"*, float, float, %struct.SkSamplingOptions*, %"class.cc::PaintFlags"*)** %67, align 8
  call void %68(%"class.cc::PaintCanvas"* %0, %"class.cc::PaintImage"* dereferenceable(104) %2, float %57, float %63, %struct.SkSamplingOptions* nonnull dereferenceable(20) %4, %"class.cc::PaintFlags"* null) #4
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %64) #4
  call void @_ZN2cc10PaintFlagsD1Ev(%"class.cc::PaintFlags"* nonnull %5) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %35) #4
  br i1 %12, label %74, label %69

69:                                               ; preds = %23
  %70 = bitcast %"class.cc::PaintCanvas"* %0 to void (%"class.cc::PaintCanvas"*, i32)***
  %71 = load void (%"class.cc::PaintCanvas"*, i32)**, void (%"class.cc::PaintCanvas"*, i32)*** %70, align 8
  %72 = getelementptr inbounds void (%"class.cc::PaintCanvas"*, i32)*, void (%"class.cc::PaintCanvas"*, i32)** %71, i64 10
  %73 = load void (%"class.cc::PaintCanvas"*, i32)*, void (%"class.cc::PaintCanvas"*, i32)** %72, align 8
  call void %73(%"class.cc::PaintCanvas"* nonnull %0, i32 %24) #4
  br label %74

74:                                               ; preds = %23, %69
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN2cc10PaintFlagsC1Ev(%"class.cc::PaintFlags"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZNK2cc10PaintImage5widthEv(%"class.cc::PaintImage"*) local_unnamed_addr #2

declare i32 @_ZNK2cc10PaintImage6heightEv(%"class.cc::PaintImage"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2cc10PaintFlagsD1Ev(%"class.cc::PaintFlags"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
