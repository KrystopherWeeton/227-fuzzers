; ModuleID = '../../v8/src/regexp/regexp-compiler-tonode.cc'
source_filename = "../../v8/src/regexp/regexp-compiler-tonode.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::nothrow_t" = type { i8 }
%"class.v8::internal::UnicodeRangeSplitter" = type { %"class.v8::base::SmallVector", %"class.v8::base::SmallVector", %"class.v8::base::SmallVector", %"class.v8::base::SmallVector" }
%"class.v8::base::SmallVector" = type { %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"*, %"struct.std::__1::aligned_storage<64, 4>::type" }
%"class.v8::internal::CharacterRange" = type { i32, i32 }
%"struct.std::__1::aligned_storage<64, 4>::type" = type { [64 x i8] }
%"class.v8::internal::ZoneList.553" = type { %"class.v8::internal::CharacterRange"*, i32, i32 }
%"class.v8::internal::RegExpLookaround::Builder" = type { i8, %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"*, i32, i32 }
%"class.v8::internal::RegExpNode" = type { i32 (...)**, %"class.v8::internal::RegExpNode"*, %"class.v8::internal::Label", i8, %"struct.v8::internal::NodeInfo", %"struct.v8::internal::EatsAtLeastInfo", i32, [2 x %"class.v8::internal::BoyerMooreLookahead"*], %"class.v8::internal::Zone"* }
%"class.v8::internal::Label" = type { i32, i32 }
%"struct.v8::internal::NodeInfo" = type { i8 }
%"struct.v8::internal::EatsAtLeastInfo" = type { i8, i8 }
%"class.v8::internal::BoyerMooreLookahead" = type { i32, %"class.v8::internal::RegExpCompiler"*, i32, %"class.v8::internal::ZoneList"* }
%"class.v8::internal::RegExpCompiler" = type { %"class.v8::internal::EndNode"*, i32, i32, i32, %"class.v8::internal::ZoneVector"*, i32, %"class.v8::internal::RegExpMacroAssembler"*, i8, i8, i8, i8, i8, i32, %"class.v8::internal::FrequencyCollator", %"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"* }
%"class.v8::internal::EndNode" = type <{ %"class.v8::internal::RegExpNode", i32, [4 x i8] }>
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.v8::internal::RegExpNode"**, %"class.v8::internal::RegExpNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::RegExpNode"** }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::RegExpMacroAssembler" = type { i32 (...)**, i8, i32, i8, i32, %"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"* }
%"class.v8::internal::FrequencyCollator" = type { [128 x %"class.v8::internal::FrequencyCollator::CharacterFrequency"], i32 }
%"class.v8::internal::FrequencyCollator::CharacterFrequency" = type { i32, i32 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr.16", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.337", %"class.std::__1::unique_ptr.338", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.344", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.357", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.364", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.374", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.384", %"struct.std::__1::atomic.61", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.410", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.427"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.428", i32, i8, i8, i32, i32, %"class.std::__1::vector.434", %"class.std::__1::vector.434", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.441", i64, %"class.std::__1::unordered_map.442", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.210", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.69", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.501", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.507", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.541", %"class.std::__1::vector.545", %"class.std::__1::vector.545", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type opaque
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic.11", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic", i64, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic.44", %"class.std::__1::vector.48", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.70", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic", i64, i8, %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.74", %"class.std::__1::vector.74", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.81", %"class.std::__1::unique_ptr.87", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.93", %"class.std::__1::unique_ptr.99", %"class.std::__1::unique_ptr.105", %"class.std::__1::unique_ptr.111", %"class.std::__1::unique_ptr.117", %"class.std::__1::unique_ptr.123", %"class.std::__1::unique_ptr.129", %"class.std::__1::unique_ptr.135", %"class.std::__1::unique_ptr.141", %"class.std::__1::unique_ptr.141", %"class.std::__1::unique_ptr.147", %"class.std::__1::unique_ptr.153", %"class.std::__1::unique_ptr.153", %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.165", %"class.std::__1::shared_ptr.171", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.172", %"class.std::__1::unique_ptr.198", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.204", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.217", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set", i8, [7 x i8], %"class.std::__1::unordered_map.246", %"class.std::__1::unordered_map.272", %"class.std::__1::unordered_map.246", %"class.std::__1::unordered_map.296", %"class.std::__1::vector.324", i8, %"class.std::__1::unique_ptr.331", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.22", %"class.std::__1::__compressed_pair.29", %"class.std::__1::__compressed_pair.34", %"class.std::__1::__compressed_pair.36", [4 x i8] }>
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24", %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { i64 }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.39", %"struct.std::__1::atomic.39", %"struct.std::__1::atomic.39" }
%"struct.std::__1::atomic.39" = type { %"struct.std::__1::__atomic_base.40" }
%"struct.std::__1::__atomic_base.40" = type { %"struct.std::__1::__atomic_base.41" }
%"struct.std::__1::__atomic_base.41" = type { %"struct.std::__1::__cxx_atomic_impl.42" }
%"struct.std::__1::__cxx_atomic_impl.42" = type { %"struct.std::__1::__cxx_atomic_base_impl.43" }
%"struct.std::__1::__cxx_atomic_base_impl.43" = type { i64 }
%"struct.std::__1::atomic.44" = type { %"struct.std::__1::__atomic_base.45" }
%"struct.std::__1::__atomic_base.45" = type { %"struct.std::__1::__cxx_atomic_impl.46" }
%"struct.std::__1::__cxx_atomic_impl.46" = type { %"struct.std::__1::__cxx_atomic_base_impl.47" }
%"struct.std::__1::__cxx_atomic_base_impl.47" = type { i32 }
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.50" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type opaque
%"class.v8::internal::CodeSpace" = type opaque
%"class.v8::internal::OldLargeObjectSpace" = type opaque
%"class.v8::internal::CodeLargeObjectSpace" = type opaque
%"class.v8::internal::NewLargeObjectSpace" = type opaque
%"class.v8::internal::ReadOnlySpace" = type opaque
%"class.v8::internal::OldSpace" = type opaque
%"class.v8::internal::MapSpace" = type opaque
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ConcurrentAllocator" = type opaque
%"class.v8::internal::Space" = type opaque
%"class.v8::internal::LocalHeap" = type opaque
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.61", %"struct.std::__1::atomic.65", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic.65" = type { %"struct.std::__1::__atomic_base.66" }
%"struct.std::__1::__atomic_base.66" = type { %"struct.std::__1::__cxx_atomic_impl.67" }
%"struct.std::__1::__cxx_atomic_impl.67" = type { %"struct.std::__1::__cxx_atomic_base_impl.68" }
%"struct.std::__1::__cxx_atomic_base_impl.68" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.69" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.std::__1::atomic.70" = type { %"struct.std::__1::__atomic_base.71" }
%"struct.std::__1::__atomic_base.71" = type { %"struct.std::__1::__cxx_atomic_impl.72" }
%"struct.std::__1::__cxx_atomic_impl.72" = type { %"struct.std::__1::__cxx_atomic_base_impl.73" }
%"struct.std::__1::__cxx_atomic_base_impl.73" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::vector.74" = type { %"class.std::__1::__vector_base.75" }
%"class.std::__1::__vector_base.75" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.76" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type opaque
%"class.v8::internal::MinorMarkCompactCollector" = type opaque
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type opaque
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type opaque
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type opaque
%"class.std::__1::unique_ptr.123" = type { %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.129" = type { %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type opaque
%"class.std::__1::unique_ptr.135" = type { %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.141" = type { %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.147" = type { %"class.std::__1::__compressed_pair.148" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.153" = type { %"class.std::__1::__compressed_pair.154" }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.155" }
%"struct.std::__1::__compressed_pair_elem.155" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.159" = type { %"class.std::__1::__compressed_pair.160" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.161" }
%"struct.std::__1::__compressed_pair_elem.161" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.165" = type { %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.171" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type opaque
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.172" = type { %"class.std::__1::__hash_table.173" }
%"class.std::__1::__hash_table.173" = type <{ %"class.std::__1::unique_ptr.174", %"class.std::__1::__compressed_pair.184", %"class.std::__1::__compressed_pair.189", %"class.std::__1::__compressed_pair.192", [4 x i8] }>
%"class.std::__1::unique_ptr.174" = type { %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176", %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"struct.std::__1::__hash_node_base.177"** }
%"struct.std::__1::__hash_node_base.177" = type { %"struct.std::__1::__hash_node_base.177"* }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"class.std::__1::__bucket_list_deallocator.179" }
%"class.std::__1::__bucket_list_deallocator.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"struct.std::__1::__hash_node_base.177" }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"class.std::__1::unique_ptr.198" = type { %"class.std::__1::__compressed_pair.199" }
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.200" }
%"struct.std::__1::__compressed_pair_elem.200" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.204" = type { %"class.std::__1::__compressed_pair.205" }
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.206" }
%"struct.std::__1::__compressed_pair_elem.206" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.210", %"class.std::__1::vector.210" }
%"class.std::__1::unique_ptr.217" = type { %"class.std::__1::__compressed_pair.218" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.223" }
%"class.std::__1::__hash_table.223" = type <{ %"class.std::__1::unique_ptr.224", %"class.std::__1::__compressed_pair.234", %"class.std::__1::__compressed_pair.239", %"class.std::__1::__compressed_pair.241", [4 x i8] }>
%"class.std::__1::unique_ptr.224" = type { %"class.std::__1::__compressed_pair.225" }
%"class.std::__1::__compressed_pair.225" = type { %"struct.std::__1::__compressed_pair_elem.226", %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.226" = type { %"struct.std::__1::__hash_node_base.227"** }
%"struct.std::__1::__hash_node_base.227" = type { %"struct.std::__1::__hash_node_base.227"* }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.std::__1::__bucket_list_deallocator.229" }
%"class.std::__1::__bucket_list_deallocator.229" = type { %"class.std::__1::__compressed_pair.230" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.234" = type { %"struct.std::__1::__compressed_pair_elem.235" }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"struct.std::__1::__hash_node_base.227" }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"class.std::__1::unordered_map.272" = type { %"class.std::__1::__hash_table.273" }
%"class.std::__1::__hash_table.273" = type <{ %"class.std::__1::unique_ptr.274", %"class.std::__1::__compressed_pair.284", %"class.std::__1::__compressed_pair.289", %"class.std::__1::__compressed_pair.292", [4 x i8] }>
%"class.std::__1::unique_ptr.274" = type { %"class.std::__1::__compressed_pair.275" }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.276", %"struct.std::__1::__compressed_pair_elem.278" }
%"struct.std::__1::__compressed_pair_elem.276" = type { %"struct.std::__1::__hash_node_base.277"** }
%"struct.std::__1::__hash_node_base.277" = type { %"struct.std::__1::__hash_node_base.277"* }
%"struct.std::__1::__compressed_pair_elem.278" = type { %"class.std::__1::__bucket_list_deallocator.279" }
%"class.std::__1::__bucket_list_deallocator.279" = type { %"class.std::__1::__compressed_pair.280" }
%"class.std::__1::__compressed_pair.280" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.285" }
%"struct.std::__1::__compressed_pair_elem.285" = type { %"struct.std::__1::__hash_node_base.277" }
%"class.std::__1::__compressed_pair.289" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.292" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"class.std::__1::unordered_map.246" = type { %"class.std::__1::__hash_table.247" }
%"class.std::__1::__hash_table.247" = type <{ %"class.std::__1::unique_ptr.248", %"class.std::__1::__compressed_pair.258", %"class.std::__1::__compressed_pair.263", %"class.std::__1::__compressed_pair.266", [4 x i8] }>
%"class.std::__1::unique_ptr.248" = type { %"class.std::__1::__compressed_pair.249" }
%"class.std::__1::__compressed_pair.249" = type { %"struct.std::__1::__compressed_pair_elem.250", %"struct.std::__1::__compressed_pair_elem.252" }
%"struct.std::__1::__compressed_pair_elem.250" = type { %"struct.std::__1::__hash_node_base.251"** }
%"struct.std::__1::__hash_node_base.251" = type { %"struct.std::__1::__hash_node_base.251"* }
%"struct.std::__1::__compressed_pair_elem.252" = type { %"class.std::__1::__bucket_list_deallocator.253" }
%"class.std::__1::__bucket_list_deallocator.253" = type { %"class.std::__1::__compressed_pair.254" }
%"class.std::__1::__compressed_pair.254" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.258" = type { %"struct.std::__1::__compressed_pair_elem.259" }
%"struct.std::__1::__compressed_pair_elem.259" = type { %"struct.std::__1::__hash_node_base.251" }
%"class.std::__1::__compressed_pair.263" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.266" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"class.std::__1::unordered_map.296" = type { %"class.std::__1::__hash_table.297" }
%"class.std::__1::__hash_table.297" = type <{ %"class.std::__1::unique_ptr.298", %"class.std::__1::__compressed_pair.308", %"class.std::__1::__compressed_pair.313", %"class.std::__1::__compressed_pair.318", [4 x i8] }>
%"class.std::__1::unique_ptr.298" = type { %"class.std::__1::__compressed_pair.299" }
%"class.std::__1::__compressed_pair.299" = type { %"struct.std::__1::__compressed_pair_elem.300", %"struct.std::__1::__compressed_pair_elem.302" }
%"struct.std::__1::__compressed_pair_elem.300" = type { %"struct.std::__1::__hash_node_base.301"** }
%"struct.std::__1::__hash_node_base.301" = type { %"struct.std::__1::__hash_node_base.301"* }
%"struct.std::__1::__compressed_pair_elem.302" = type { %"class.std::__1::__bucket_list_deallocator.303" }
%"class.std::__1::__bucket_list_deallocator.303" = type { %"class.std::__1::__compressed_pair.304" }
%"class.std::__1::__compressed_pair.304" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.308" = type { %"struct.std::__1::__compressed_pair_elem.309" }
%"struct.std::__1::__compressed_pair_elem.309" = type { %"struct.std::__1::__hash_node_base.301" }
%"class.std::__1::__compressed_pair.313" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.318" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"class.std::__1::vector.324" = type { %"class.std::__1::__vector_base.325" }
%"class.std::__1::__vector_base.325" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.326" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.326" = type { %"struct.std::__1::__compressed_pair_elem.327" }
%"struct.std::__1::__compressed_pair_elem.327" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.331" = type { %"class.std::__1::__compressed_pair.332" }
%"class.std::__1::__compressed_pair.332" = type { %"struct.std::__1::__compressed_pair_elem.333" }
%"struct.std::__1::__compressed_pair_elem.333" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type opaque
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.210" }
%"class.std::__1::shared_ptr.337" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type opaque
%"class.std::__1::unique_ptr.338" = type { %"class.std::__1::__compressed_pair.339" }
%"class.std::__1::__compressed_pair.339" = type { %"struct.std::__1::__compressed_pair_elem.340" }
%"struct.std::__1::__compressed_pair_elem.340" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type opaque
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.344" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type opaque
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::Logger" = type opaque
%"class.v8::internal::StubCache" = type opaque
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type opaque
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.345", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.345" = type { %"class.std::__1::__compressed_pair.346" }
%"class.std::__1::__compressed_pair.346" = type { %"struct.std::__1::__compressed_pair_elem.347" }
%"struct.std::__1::__compressed_pair_elem.347" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type opaque
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.5" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type opaque
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type opaque
%"class.v8::internal::EternalHandles" = type opaque
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.351" }
%"class.std::__1::unique_ptr.351" = type { %"class.std::__1::__compressed_pair.352" }
%"class.std::__1::__compressed_pair.352" = type { %"struct.std::__1::__compressed_pair_elem.353" }
%"struct.std::__1::__compressed_pair_elem.353" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.357" = type { %"class.std::__1::__vector_base.358" }
%"class.std::__1::__vector_base.358" = type { i32*, i32*, %"class.std::__1::__compressed_pair.359" }
%"class.std::__1::__compressed_pair.359" = type { %"struct.std::__1::__compressed_pair_elem.360" }
%"struct.std::__1::__compressed_pair_elem.360" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"class.v8::base::RandomNumberGenerator" = type opaque
%"struct.std::__1::atomic.364" = type { %"struct.std::__1::__atomic_base.365" }
%"struct.std::__1::__atomic_base.365" = type { %"struct.std::__1::__cxx_atomic_impl.366" }
%"struct.std::__1::__cxx_atomic_impl.366" = type { %"struct.std::__1::__cxx_atomic_base_impl.367" }
%"struct.std::__1::__cxx_atomic_base_impl.367" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.374" = type { %"struct.std::__1::__atomic_base.375" }
%"struct.std::__1::__atomic_base.375" = type { %"struct.std::__1::__cxx_atomic_impl.376" }
%"struct.std::__1::__cxx_atomic_impl.376" = type { %"struct.std::__1::__cxx_atomic_base_impl.377" }
%"struct.std::__1::__cxx_atomic_base_impl.377" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.379" }
%"class.std::__1::__compressed_pair.379" = type { %"struct.std::__1::__compressed_pair_elem.380" }
%"struct.std::__1::__compressed_pair_elem.380" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.384" = type { %"class.std::__1::__hash_table.385" }
%"class.std::__1::__hash_table.385" = type <{ %"class.std::__1::unique_ptr.386", %"class.std::__1::__compressed_pair.396", %"class.std::__1::__compressed_pair.401", %"class.std::__1::__compressed_pair.404", [4 x i8] }>
%"class.std::__1::unique_ptr.386" = type { %"class.std::__1::__compressed_pair.387" }
%"class.std::__1::__compressed_pair.387" = type { %"struct.std::__1::__compressed_pair_elem.388", %"struct.std::__1::__compressed_pair_elem.390" }
%"struct.std::__1::__compressed_pair_elem.388" = type { %"struct.std::__1::__hash_node_base.389"** }
%"struct.std::__1::__hash_node_base.389" = type { %"struct.std::__1::__hash_node_base.389"* }
%"struct.std::__1::__compressed_pair_elem.390" = type { %"class.std::__1::__bucket_list_deallocator.391" }
%"class.std::__1::__bucket_list_deallocator.391" = type { %"class.std::__1::__compressed_pair.392" }
%"class.std::__1::__compressed_pair.392" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.396" = type { %"struct.std::__1::__compressed_pair_elem.397" }
%"struct.std::__1::__compressed_pair_elem.397" = type { %"struct.std::__1::__hash_node_base.389" }
%"class.std::__1::__compressed_pair.401" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.404" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::atomic.61" = type { %"struct.std::__1::__atomic_base.62" }
%"struct.std::__1::__atomic_base.62" = type { %"struct.std::__1::__cxx_atomic_impl.63" }
%"struct.std::__1::__cxx_atomic_impl.63" = type { %"struct.std::__1::__cxx_atomic_base_impl.64" }
%"struct.std::__1::__cxx_atomic_base_impl.64" = type { i8 }
%"class.v8::internal::Debug" = type opaque
%"class.v8::internal::HeapProfiler" = type opaque
%"class.std::__1::unique_ptr.410" = type { %"class.std::__1::__compressed_pair.411" }
%"class.std::__1::__compressed_pair.411" = type { %"struct.std::__1::__compressed_pair_elem.412" }
%"struct.std::__1::__compressed_pair_elem.412" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type opaque
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.422" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.416"**, %"struct.std::__1::pair.416"**, %"struct.std::__1::pair.416"**, %"class.std::__1::__compressed_pair.417" }
%"struct.std::__1::pair.416" = type opaque
%"class.std::__1::__compressed_pair.417" = type { %"struct.std::__1::__compressed_pair_elem.418" }
%"struct.std::__1::__compressed_pair_elem.418" = type { %"struct.std::__1::pair.416"** }
%"class.std::__1::__compressed_pair.422" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.427" = type opaque
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.369", i32, %"class.v8::Local.15" }
%"class.v8::Local.369" = type { %"class.v8::Promise"* }
%"class.v8::Local.15" = type { %"class.v8::Value"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.428" = type { %"class.std::__1::__compressed_pair.429" }
%"class.std::__1::__compressed_pair.429" = type { %"struct.std::__1::__compressed_pair_elem.430" }
%"struct.std::__1::__compressed_pair_elem.430" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type opaque
%"class.std::__1::vector.434" = type { %"class.std::__1::__vector_base.435" }
%"class.std::__1::__vector_base.435" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.436" }
%"class.std::__1::__compressed_pair.436" = type { %"struct.std::__1::__compressed_pair_elem.437" }
%"struct.std::__1::__compressed_pair_elem.437" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.441" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.442" = type { %"class.std::__1::__hash_table.443" }
%"class.std::__1::__hash_table.443" = type <{ %"class.std::__1::unique_ptr.444", %"class.std::__1::__compressed_pair.454", %"class.std::__1::__compressed_pair.459", %"class.std::__1::__compressed_pair.464", [4 x i8] }>
%"class.std::__1::unique_ptr.444" = type { %"class.std::__1::__compressed_pair.445" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.446", %"struct.std::__1::__compressed_pair_elem.448" }
%"struct.std::__1::__compressed_pair_elem.446" = type { %"struct.std::__1::__hash_node_base.447"** }
%"struct.std::__1::__hash_node_base.447" = type { %"struct.std::__1::__hash_node_base.447"* }
%"struct.std::__1::__compressed_pair_elem.448" = type { %"class.std::__1::__bucket_list_deallocator.449" }
%"class.std::__1::__bucket_list_deallocator.449" = type { %"class.std::__1::__compressed_pair.450" }
%"class.std::__1::__compressed_pair.450" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.454" = type { %"struct.std::__1::__compressed_pair_elem.455" }
%"struct.std::__1::__compressed_pair_elem.455" = type { %"struct.std::__1::__hash_node_base.447" }
%"class.std::__1::__compressed_pair.459" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.464" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.210" = type { %"class.std::__1::__vector_base.211" }
%"class.std::__1::__vector_base.211" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.212" }
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.213" }
%"struct.std::__1::__compressed_pair_elem.213" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.69" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.470", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.499", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.470" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.495, %union.anon.497, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.495 = type { i64 }
%union.anon.497 = type { i64 }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.499" = type { %"class.v8::PersistentBase.500" }
%"class.v8::PersistentBase.500" = type { %"class.v8::Context"* }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.471", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.471" = type { %"class.std::__1::__hash_table.472" }
%"class.std::__1::__hash_table.472" = type <{ %"class.std::__1::unique_ptr.473", %"class.std::__1::__compressed_pair.483", %"class.std::__1::__compressed_pair.488", %"class.std::__1::__compressed_pair.491", [4 x i8] }>
%"class.std::__1::unique_ptr.473" = type { %"class.std::__1::__compressed_pair.474" }
%"class.std::__1::__compressed_pair.474" = type { %"struct.std::__1::__compressed_pair_elem.475", %"struct.std::__1::__compressed_pair_elem.477" }
%"struct.std::__1::__compressed_pair_elem.475" = type { %"struct.std::__1::__hash_node_base.476"** }
%"struct.std::__1::__hash_node_base.476" = type { %"struct.std::__1::__hash_node_base.476"* }
%"struct.std::__1::__compressed_pair_elem.477" = type { %"class.std::__1::__bucket_list_deallocator.478" }
%"class.std::__1::__bucket_list_deallocator.478" = type { %"class.std::__1::__compressed_pair.479" }
%"class.std::__1::__compressed_pair.479" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.483" = type { %"struct.std::__1::__compressed_pair_elem.484" }
%"struct.std::__1::__compressed_pair_elem.484" = type { %"struct.std::__1::__hash_node_base.476" }
%"class.std::__1::__compressed_pair.488" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.491" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type opaque
%"class.std::__1::unique_ptr.501" = type { %"class.std::__1::__compressed_pair.502" }
%"class.std::__1::__compressed_pair.502" = type { %"struct.std::__1::__compressed_pair_elem.503" }
%"struct.std::__1::__compressed_pair_elem.503" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type opaque
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.507" = type { %"class.std::__1::__compressed_pair.508" }
%"class.std::__1::__compressed_pair.508" = type { %"struct.std::__1::__compressed_pair_elem.509" }
%"struct.std::__1::__compressed_pair_elem.509" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.370", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.370" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.515" }
%"class.std::__1::unordered_map.515" = type { %"class.std::__1::__hash_table.516" }
%"class.std::__1::__hash_table.516" = type <{ %"class.std::__1::unique_ptr.517", %"class.std::__1::__compressed_pair.527", %"class.std::__1::__compressed_pair.532", %"class.std::__1::__compressed_pair.535", [4 x i8] }>
%"class.std::__1::unique_ptr.517" = type { %"class.std::__1::__compressed_pair.518" }
%"class.std::__1::__compressed_pair.518" = type { %"struct.std::__1::__compressed_pair_elem.519", %"struct.std::__1::__compressed_pair_elem.521" }
%"struct.std::__1::__compressed_pair_elem.519" = type { %"struct.std::__1::__hash_node_base.520"** }
%"struct.std::__1::__hash_node_base.520" = type { %"struct.std::__1::__hash_node_base.520"* }
%"struct.std::__1::__compressed_pair_elem.521" = type { %"class.std::__1::__bucket_list_deallocator.522" }
%"class.std::__1::__bucket_list_deallocator.522" = type { %"class.std::__1::__compressed_pair.523" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.527" = type { %"struct.std::__1::__compressed_pair_elem.528" }
%"struct.std::__1::__compressed_pair_elem.528" = type { %"struct.std::__1::__hash_node_base.520" }
%"class.std::__1::__compressed_pair.532" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.535" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"struct.std::__1::atomic.541" = type { %"struct.std::__1::__atomic_base.542" }
%"struct.std::__1::__atomic_base.542" = type { %"struct.std::__1::__cxx_atomic_impl.543" }
%"struct.std::__1::__cxx_atomic_impl.543" = type { %"struct.std::__1::__cxx_atomic_base_impl.544" }
%"struct.std::__1::__cxx_atomic_base_impl.544" = type { %"class.std::__1::vector.545"* }
%"class.std::__1::vector.545" = type { %"class.std::__1::__vector_base.546" }
%"class.std::__1::__vector_base.546" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.547" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.547" = type { %"struct.std::__1::__compressed_pair_elem.548" }
%"struct.std::__1::__compressed_pair_elem.548" = type { %"struct.v8::MemoryRange"* }
%"class.v8::internal::ZoneList" = type { %"class.v8::internal::BoyerMoorePositionInfo"**, i32, i32 }
%"class.v8::internal::BoyerMoorePositionInfo" = type { %"class.std::__1::bitset", i32, i32 }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { [2 x i64] }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::RegExpAtom" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::Vector", %"class.v8::base::Flags", [4 x i8] }>
%"class.v8::internal::RegExpTree" = type { i32 (...)** }
%"class.v8::internal::Vector" = type { i16*, i64 }
%"class.v8::base::Flags" = type { i32 }
%"class.v8::internal::ZoneList.552" = type { %"class.v8::internal::TextElement"*, i32, i32 }
%"class.v8::internal::TextElement" = type { i32, i32, %"class.v8::internal::RegExpTree"* }
%"class.v8::internal::TextNode" = type <{ %"class.v8::internal::SeqRegExpNode", %"class.v8::internal::ZoneList.552"*, i8, [7 x i8] }>
%"class.v8::internal::SeqRegExpNode" = type { %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* }
%"class.v8::internal::RegExpText" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::ZoneList.552", i32, [4 x i8] }>
%"class.v8::internal::RegExpCharacterClass" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::CharacterSet", %"class.v8::base::Flags", %"class.v8::base::Flags.554" }
%"class.v8::internal::CharacterSet" = type <{ %"class.v8::internal::ZoneList.553"*, i16, [6 x i8] }>
%"class.v8::base::Flags.554" = type { i32 }
%"class.v8::internal::ChoiceNode" = type <{ %"class.v8::internal::RegExpNode", %"class.v8::internal::ZoneList.555"*, i8, i8, [6 x i8] }>
%"class.v8::internal::ZoneList.555" = type { %"class.v8::internal::GuardedAlternative"*, i32, i32 }
%"class.v8::internal::GuardedAlternative" = type { %"class.v8::internal::RegExpNode"*, %"class.v8::internal::ZoneList.556"* }
%"class.v8::internal::ZoneList.556" = type opaque
%"class.icu_69::UnicodeSet" = type <{ %"class.icu_69::UnicodeFilter", i32*, i32, i32, i8, [7 x i8], %"class.icu_69::BMPSet"*, i32*, i32, [4 x i8], i16*, i32, [4 x i8], %"class.icu_69::UVector"*, %"class.icu_69::UnicodeSetStringSpan"*, [25 x i32], [4 x i8] }>
%"class.icu_69::UnicodeFilter" = type { %"class.icu_69::UnicodeFunctor", %"class.icu_69::UnicodeMatcher" }
%"class.icu_69::UnicodeFunctor" = type { %"class.icu_69::UObject" }
%"class.icu_69::UObject" = type { i32 (...)** }
%"class.icu_69::UnicodeMatcher" = type { i32 (...)** }
%"class.icu_69::BMPSet" = type opaque
%"class.icu_69::UVector" = type opaque
%"class.icu_69::UnicodeSetStringSpan" = type opaque
%"class.icu_69::UnicodeString" = type { %"class.icu_69::Replaceable", %"union.icu_69::UnicodeString::StackBufferOrFields" }
%"class.icu_69::Replaceable" = type { %"class.icu_69::UObject" }
%"union.icu_69::UnicodeString::StackBufferOrFields" = type { %struct.anon.558, [32 x i8] }
%struct.anon.558 = type { i16, i32, i32, i16* }
%struct.anon.557 = type { i16, [27 x i16] }
%"class.v8::internal::RegExpDisjunction" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::ZoneList.559"*, i32, i32 }
%"class.v8::internal::ZoneList.559" = type { %"class.v8::internal::RegExpTree"**, i32, i32 }
%class.anon = type { i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)* }
%"class.v8::internal::RegExpAlternative" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::ZoneList.559"*, i32, i32 }
%"class.v8::internal::RegExpEmpty" = type { %"class.v8::internal::RegExpTree" }
%"class.v8::internal::RegExpQuantifier" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"*, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.v8::internal::LoopChoiceNode" = type { %"class.v8::internal::ChoiceNode.base", %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"*, i8, i8, i8, i32 }
%"class.v8::internal::ChoiceNode.base" = type <{ %"class.v8::internal::RegExpNode", %"class.v8::internal::ZoneList.555"*, i8, i8 }>
%"class.v8::internal::ActionNode" = type <{ %"class.v8::internal::SeqRegExpNode", %union.anon.560, i32, [4 x i8] }>
%union.anon.560 = type { %struct.anon.564 }
%struct.anon.564 = type { i32, i32, i32, i32 }
%"class.v8::internal::Guard" = type { i32, i32, i32 }
%"class.v8::internal::RegExpAssertion" = type { %"class.v8::internal::RegExpTree", i32, %"class.v8::base::Flags" }
%"class.v8::internal::AssertionNode" = type <{ %"class.v8::internal::SeqRegExpNode", i32, [4 x i8] }>
%"class.v8::internal::NegativeSubmatchSuccess" = type { %"class.v8::internal::EndNode.base", i32, i32, i32, i32, [4 x i8] }
%"class.v8::internal::EndNode.base" = type <{ %"class.v8::internal::RegExpNode", i32 }>
%"class.v8::internal::NegativeLookaroundChoiceNode" = type { %"class.v8::internal::ChoiceNode.base", [6 x i8] }
%"class.v8::internal::RegExpBackReference" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::ZoneVector.567"*, %"class.v8::base::Flags", [4 x i8] }>
%"class.v8::internal::RegExpCapture" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"*, i32, i32, i32, %"class.v8::internal::ZoneVector.567"* }
%"class.v8::internal::ZoneVector.567" = type opaque
%"class.v8::internal::BackReferenceNode" = type <{ %"class.v8::internal::SeqRegExpNode", i32, i32, %"class.v8::base::Flags", i8, [3 x i8] }>
%"class.v8::internal::RegExpLookaround" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"*, i8, i32, i32, i32 }
%"class.v8::internal::(anonymous namespace)::AssertionSequenceRewriter" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::ZoneList.559"* }

$_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJRPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_ = comdat any

$_ZN2v88internal4Zone3NewINS0_10ChoiceNodeEJiRPS1_EEEPT_DpOT0_ = comdat any

$_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJRPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEERNSC_INS3_4FlagEiEEEEEPT_DpOT0_ = comdat any

$_ZN2v88internal4Zone3NewINS0_14LoopChoiceNodeEJbbRiRPS1_EEEPT_DpOT0_ = comdat any

$_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_ = comdat any

$_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJRPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEENS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_ = comdat any

$_ZN2v84base11SmallVectorINS_8internal14CharacterRangeELm8EE4GrowEv = comdat any

$_ZN2v84base11SmallVectorINS_8internal14CharacterRangeELm8EE4GrowEm = comdat any

$_ZN2v88internal8TextNodeC2EPNS0_20RegExpCharacterClassEbPNS0_10RegExpNodeE = comdat any

$_ZNSt3__113__stable_sortIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SC_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl = comdat any

$_ZNSt3__118__stable_sort_moveIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SC_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeE = comdat any

$_ZNSt3__115__inplace_mergeIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SH_SC_NS_15iterator_traitsISH_E15difference_typeESK_PNSJ_10value_typeEl = comdat any

$_ZN2v88internal28NegativeLookaroundChoiceNodeC2ENS0_18GuardedAlternativeES2_PNS0_4ZoneE = comdat any

@_ZN2v88internal25regexp_compiler_constantsL12kSpaceRangesE = internal unnamed_addr constant [21 x i32] [i32 9, i32 14, i32 32, i32 33, i32 160, i32 161, i32 5760, i32 5761, i32 8192, i32 8203, i32 8232, i32 8234, i32 8239, i32 8240, i32 8287, i32 8288, i32 12288, i32 12289, i32 65279, i32 65280, i32 1114112], align 16
@_ZN2v88internal25regexp_compiler_constantsL11kWordRangesE = internal constant [9 x i32] [i32 48, i32 58, i32 65, i32 91, i32 95, i32 96, i32 97, i32 123, i32 1114112], align 16
@.str = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@_ZTVN2v88internal13AssertionNodeE = external unnamed_addr constant { [13 x i8*] }, align 8
@_ZTVN2v88internal20RegExpCharacterClassE = external unnamed_addr constant { [37 x i8*] }, align 8
@_ZTVN2v88internal8TextNodeE = external unnamed_addr constant { [13 x i8*] }, align 8
@.str.1 = private unnamed_addr constant [53 x i8] c"Fatal process out of memory: base::SmallVector::Grow\00", align 1
@_ZTVN2v88internal10ChoiceNodeE = external unnamed_addr constant { [15 x i8*] }, align 8
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1
@_ZTVN2v88internal10RegExpAtomE = external unnamed_addr constant { [37 x i8*] }, align 8
@_ZTVN2v88internal11RegExpEmptyE = external unnamed_addr constant { [37 x i8*] }, align 8
@_ZTVN2v88internal17BackReferenceNodeE = external unnamed_addr constant { [13 x i8*] }, align 8
@_ZTVN2v88internal23NegativeSubmatchSuccessE = external unnamed_addr constant { [13 x i8*] }, align 8
@_ZTVN2v88internal28NegativeLookaroundChoiceNodeE = external unnamed_addr constant { [15 x i8*] }, align 8
@_ZTVN2v88internal14LoopChoiceNodeE = external unnamed_addr constant { [15 x i8*] }, align 8

@_ZN2v88internal20UnicodeRangeSplitterC1EPNS0_8ZoneListINS0_14CharacterRangeEEE = hidden unnamed_addr alias void (%"class.v8::internal::UnicodeRangeSplitter"*, %"class.v8::internal::ZoneList.553"*), void (%"class.v8::internal::UnicodeRangeSplitter"*, %"class.v8::internal::ZoneList.553"*)* @_ZN2v88internal20UnicodeRangeSplitterC2EPNS0_8ZoneListINS0_14CharacterRangeEEE
@_ZN2v88internal16RegExpLookaround7BuilderC1EbPNS0_10RegExpNodeEiiii = hidden unnamed_addr alias void (%"class.v8::internal::RegExpLookaround::Builder"*, i1, %"class.v8::internal::RegExpNode"*, i32, i32, i32, i32), void (%"class.v8::internal::RegExpLookaround::Builder"*, i1, %"class.v8::internal::RegExpNode"*, i32, i32, i32, i32)* @_ZN2v88internal16RegExpLookaround7BuilderC2EbPNS0_10RegExpNodeEiiii

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal10RegExpAtom6ToNodeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpAtom"*, %"class.v8::internal::RegExpCompiler"* nocapture readonly, %"class.v8::internal::RegExpNode"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 15
  %5 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %9, %7
  %11 = icmp ult i64 %10, 16
  br i1 %11, label %12, label %14, !prof !2

12:                                               ; preds = %3
  %13 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5, i64 16) #12
  br label %16

14:                                               ; preds = %3
  %15 = add i64 %7, 16
  store i64 %15, i64* %6, align 8
  br label %16

16:                                               ; preds = %12, %14
  %17 = phi i64 [ %13, %12 ], [ %7, %14 ]
  %18 = inttoptr i64 %17 to %"class.v8::internal::ZoneList.552"*
  %19 = getelementptr inbounds %"class.v8::internal::ZoneList.552", %"class.v8::internal::ZoneList.552"* %18, i64 0, i32 0
  store %"class.v8::internal::TextElement"* null, %"class.v8::internal::TextElement"** %19, align 8
  %20 = getelementptr inbounds %"class.v8::internal::ZoneList.552", %"class.v8::internal::ZoneList.552"* %18, i64 0, i32 1
  store i32 1, i32* %20, align 8
  %21 = getelementptr inbounds %"class.v8::internal::ZoneList.552", %"class.v8::internal::ZoneList.552"* %18, i64 0, i32 2
  store i32 0, i32* %21, align 4
  %22 = load i64, i64* %6, align 8
  %23 = load i64, i64* %8, align 8
  %24 = sub i64 %23, %22
  %25 = icmp ult i64 %24, 16
  br i1 %25, label %26, label %28, !prof !2

26:                                               ; preds = %16
  %27 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5, i64 16) #12
  br label %30

28:                                               ; preds = %16
  %29 = add i64 %22, 16
  store i64 %29, i64* %6, align 8
  br label %30

30:                                               ; preds = %26, %28
  %31 = phi i64 [ %27, %26 ], [ %22, %28 ]
  %32 = inttoptr i64 %31 to %"class.v8::internal::TextElement"*
  store %"class.v8::internal::TextElement"* %32, %"class.v8::internal::TextElement"** %19, align 8
  %33 = tail call { i64, %"class.v8::internal::RegExpTree"* } @_ZN2v88internal11TextElement4AtomEPNS0_10RegExpAtomE(%"class.v8::internal::RegExpAtom"* %0) #12
  %34 = extractvalue { i64, %"class.v8::internal::RegExpTree"* } %33, 0
  %35 = extractvalue { i64, %"class.v8::internal::RegExpTree"* } %33, 1
  %36 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %37 = load i32, i32* %21, align 4
  %38 = load i32, i32* %20, align 8
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %40, label %47

40:                                               ; preds = %30
  %41 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %19, align 8
  %42 = add nsw i32 %37, 1
  store i32 %42, i32* %21, align 4
  %43 = sext i32 %37 to i64
  %44 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %41, i64 %43
  %45 = bitcast %"class.v8::internal::TextElement"* %44 to i64*
  store i64 %34, i64* %45, align 8
  %46 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %41, i64 %43, i32 2
  br label %82

47:                                               ; preds = %30
  %48 = shl nsw i32 %38, 1
  %49 = or i32 %48, 1
  %50 = sext i32 %49 to i64
  %51 = shl nsw i64 %50, 4
  %52 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %36, i64 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %36, i64 0, i32 3
  %55 = load i64, i64* %54, align 8
  %56 = sub i64 %55, %53
  %57 = icmp ugt i64 %51, %56
  br i1 %57, label %58, label %60, !prof !2

58:                                               ; preds = %47
  %59 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %36, i64 %51) #12
  br label %62

60:                                               ; preds = %47
  %61 = add i64 %53, %51
  store i64 %61, i64* %52, align 8
  br label %62

62:                                               ; preds = %60, %58
  %63 = phi i64 [ %59, %58 ], [ %53, %60 ]
  %64 = inttoptr i64 %63 to %"class.v8::internal::TextElement"*
  %65 = load i32, i32* %21, align 4
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %67, label %75

67:                                               ; preds = %62
  %68 = inttoptr i64 %63 to i8*
  %69 = inttoptr i64 %17 to i8**
  %70 = load i8*, i8** %69, align 8
  %71 = icmp eq i32 %65, 1
  %72 = sext i32 %65 to i64
  %73 = shl nsw i64 %72, 4
  %74 = select i1 %71, i64 16, i64 %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %70, i64 %74, i1 false) #12
  br label %75

75:                                               ; preds = %67, %62
  store %"class.v8::internal::TextElement"* %64, %"class.v8::internal::TextElement"** %19, align 8
  store i32 %49, i32* %20, align 8
  %76 = load i32, i32* %21, align 4
  %77 = add nsw i32 %76, 1
  store i32 %77, i32* %21, align 4
  %78 = sext i32 %76 to i64
  %79 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %64, i64 %78
  %80 = bitcast %"class.v8::internal::TextElement"* %79 to i64*
  store i64 %34, i64* %80, align 8
  %81 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %64, i64 %78, i32 2
  br label %82

82:                                               ; preds = %40, %75
  %83 = phi %"class.v8::internal::RegExpTree"** [ %46, %40 ], [ %81, %75 ]
  store %"class.v8::internal::RegExpTree"* %35, %"class.v8::internal::RegExpTree"** %83, align 8
  %84 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %85 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 11
  %86 = load i8, i8* %85, align 4, !range !3
  %87 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %84, i64 0, i32 2
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %84, i64 0, i32 3
  %90 = load i64, i64* %89, align 8
  %91 = sub i64 %90, %88
  %92 = icmp ult i64 %91, 80
  br i1 %92, label %93, label %95, !prof !2

93:                                               ; preds = %82
  %94 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %84, i64 80) #12
  br label %97

95:                                               ; preds = %82
  %96 = add i64 %88, 80
  store i64 %96, i64* %87, align 8
  br label %97

97:                                               ; preds = %93, %95
  %98 = phi i64 [ %94, %93 ], [ %88, %95 ]
  %99 = inttoptr i64 %98 to %"class.v8::internal::TextNode"*
  %100 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 8
  %101 = bitcast %"class.v8::internal::Zone"** %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %99, i64 0, i32 0, i32 0, i32 0
  %104 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %99, i64 0, i32 0, i32 0, i32 1
  %105 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %99, i64 0, i32 0, i32 0, i32 8
  %106 = bitcast %"class.v8::internal::RegExpNode"** %104 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %106, i8 0, i64 24, i1 false) #12
  %107 = bitcast %"class.v8::internal::Zone"** %105 to i64*
  store i64 %102, i64* %107, align 8
  %108 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %99, i64 0, i32 0, i32 0, i32 7, i64 0
  %109 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %108 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %109, i8 0, i64 16, i1 false) #12
  %110 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %99, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::RegExpNode"** %110, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal8TextNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %103, align 8
  %111 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %99, i64 0, i32 1
  %112 = bitcast %"class.v8::internal::ZoneList.552"** %111 to i64*
  store i64 %17, i64* %112, align 8
  %113 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %99, i64 0, i32 2
  store i8 %86, i8* %113, align 8
  %114 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %99, i64 0, i32 0, i32 0
  ret %"class.v8::internal::RegExpNode"* %114
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare { i64, %"class.v8::internal::RegExpTree"* } @_ZN2v88internal11TextElement4AtomEPNS0_10RegExpAtomE(%"class.v8::internal::RegExpAtom"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal10RegExpText6ToNodeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpText"*, %"class.v8::internal::RegExpCompiler"* nocapture readonly, %"class.v8::internal::RegExpNode"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 15
  %5 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %0, i64 0, i32 1
  %7 = ptrtoint %"class.v8::internal::ZoneList.552"* %6 to i64
  %8 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 11
  %9 = load i8, i8* %8, align 4, !range !3
  %10 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 3
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %13, %11
  %15 = icmp ult i64 %14, 80
  br i1 %15, label %16, label %18, !prof !2

16:                                               ; preds = %3
  %17 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5, i64 80) #12
  br label %20

18:                                               ; preds = %3
  %19 = add i64 %11, 80
  store i64 %19, i64* %10, align 8
  br label %20

20:                                               ; preds = %16, %18
  %21 = phi i64 [ %17, %16 ], [ %11, %18 ]
  %22 = inttoptr i64 %21 to %"class.v8::internal::TextNode"*
  %23 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 8
  %24 = bitcast %"class.v8::internal::Zone"** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %22, i64 0, i32 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %22, i64 0, i32 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %22, i64 0, i32 0, i32 0, i32 8
  %29 = bitcast %"class.v8::internal::RegExpNode"** %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 24, i1 false) #12
  %30 = bitcast %"class.v8::internal::Zone"** %28 to i64*
  store i64 %25, i64* %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %22, i64 0, i32 0, i32 0, i32 7, i64 0
  %32 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 16, i1 false) #12
  %33 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %22, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::RegExpNode"** %33, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal8TextNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %34 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %22, i64 0, i32 1
  %35 = bitcast %"class.v8::internal::ZoneList.552"** %34 to i64*
  store i64 %7, i64* %35, align 8
  %36 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %22, i64 0, i32 2
  store i8 %9, i8* %36, align 8
  %37 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %22, i64 0, i32 0, i32 0
  ret %"class.v8::internal::RegExpNode"* %37
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal20RegExpCharacterClass11is_standardEPNS0_4ZoneE(%"class.v8::internal::RegExpCharacterClass"* nocapture, %"class.v8::internal::Zone"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %0, i64 0, i32 3, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 1
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %315

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %0, i64 0, i32 1, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %11, label %315

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %0, i64 0, i32 1, i32 0
  %13 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %12, align 8
  %14 = icmp eq %"class.v8::internal::ZoneList.553"* %13, null
  br i1 %14, label %15, label %46

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %17
  %21 = icmp ult i64 %20, 16
  br i1 %21, label %22, label %24, !prof !2

22:                                               ; preds = %15
  %23 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #12
  br label %26

24:                                               ; preds = %15
  %25 = add i64 %17, 16
  store i64 %25, i64* %16, align 8
  br label %26

26:                                               ; preds = %24, %22
  %27 = phi i64 [ %23, %22 ], [ %17, %24 ]
  %28 = inttoptr i64 %27 to %"class.v8::internal::ZoneList.553"*
  %29 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %28, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %29, align 8
  %30 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %28, i64 0, i32 1
  store i32 2, i32* %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %28, i64 0, i32 2
  store i32 0, i32* %31, align 4
  %32 = load i64, i64* %16, align 8
  %33 = load i64, i64* %18, align 8
  %34 = sub i64 %33, %32
  %35 = icmp ult i64 %34, 16
  br i1 %35, label %36, label %38, !prof !2

36:                                               ; preds = %26
  %37 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #12
  br label %40

38:                                               ; preds = %26
  %39 = add i64 %32, 16
  store i64 %39, i64* %16, align 8
  br label %40

40:                                               ; preds = %38, %36
  %41 = phi i64 [ %37, %36 ], [ %32, %38 ]
  %42 = inttoptr i64 %41 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %42, %"class.v8::internal::CharacterRange"** %29, align 8
  store %"class.v8::internal::ZoneList.553"* %28, %"class.v8::internal::ZoneList.553"** %12, align 8
  %43 = load i16, i16* %8, align 8
  %44 = trunc i16 %43 to i8
  tail call void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEPNS0_4ZoneE(i8 signext %44, %"class.v8::internal::ZoneList.553"* %28, %"class.v8::internal::Zone"* %1) #12
  %45 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %12, align 8
  br label %46

46:                                               ; preds = %11, %40
  %47 = phi %"class.v8::internal::ZoneList.553"* [ %45, %40 ], [ %13, %11 ]
  %48 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %47, i64 0, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 10
  br i1 %50, label %51, label %62

51:                                               ; preds = %46
  %52 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %47, i64 0, i32 0
  %53 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %52, align 8
  %54 = bitcast %"class.v8::internal::CharacterRange"* %53 to i64*
  %55 = load i64, i64* %54, align 4
  %56 = icmp eq i64 %55, 55834574857
  br i1 %56, label %57, label %62

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %53, i64 1
  %59 = bitcast %"class.v8::internal::CharacterRange"* %58 to i64*
  %60 = load i64, i64* %59, align 4
  %61 = icmp eq i64 %60, 137438953504
  br i1 %61, label %404, label %62

62:                                               ; preds = %51, %57, %404, %409, %414, %419, %424, %429, %434, %439, %46
  %63 = icmp eq %"class.v8::internal::ZoneList.553"* %47, null
  br i1 %63, label %64, label %97

64:                                               ; preds = %62
  %65 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 2
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 3
  %68 = load i64, i64* %67, align 8
  %69 = sub i64 %68, %66
  %70 = icmp ult i64 %69, 16
  br i1 %70, label %71, label %73, !prof !2

71:                                               ; preds = %64
  %72 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #12
  br label %75

73:                                               ; preds = %64
  %74 = add i64 %66, 16
  store i64 %74, i64* %65, align 8
  br label %75

75:                                               ; preds = %73, %71
  %76 = phi i64 [ %72, %71 ], [ %66, %73 ]
  %77 = inttoptr i64 %76 to %"class.v8::internal::ZoneList.553"*
  %78 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %77, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %78, align 8
  %79 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %77, i64 0, i32 1
  store i32 2, i32* %79, align 8
  %80 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %77, i64 0, i32 2
  store i32 0, i32* %80, align 4
  %81 = load i64, i64* %65, align 8
  %82 = load i64, i64* %67, align 8
  %83 = sub i64 %82, %81
  %84 = icmp ult i64 %83, 16
  br i1 %84, label %85, label %87, !prof !2

85:                                               ; preds = %75
  %86 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #12
  br label %89

87:                                               ; preds = %75
  %88 = add i64 %81, 16
  store i64 %88, i64* %65, align 8
  br label %89

89:                                               ; preds = %87, %85
  %90 = phi i64 [ %86, %85 ], [ %81, %87 ]
  %91 = inttoptr i64 %90 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %91, %"class.v8::internal::CharacterRange"** %78, align 8
  store %"class.v8::internal::ZoneList.553"* %77, %"class.v8::internal::ZoneList.553"** %12, align 8
  %92 = load i16, i16* %8, align 8
  %93 = trunc i16 %92 to i8
  tail call void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEPNS0_4ZoneE(i8 signext %93, %"class.v8::internal::ZoneList.553"* %77, %"class.v8::internal::Zone"* %1) #12
  %94 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %12, align 8
  %95 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %94, i64 0, i32 2
  %96 = load i32, i32* %95, align 4
  br label %97

97:                                               ; preds = %62, %89
  %98 = phi i32 [ %96, %89 ], [ %49, %62 ]
  %99 = phi %"class.v8::internal::ZoneList.553"* [ %94, %89 ], [ %47, %62 ]
  %100 = icmp eq i32 %98, 11
  br i1 %100, label %101, label %113

101:                                              ; preds = %97
  %102 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %99, i64 0, i32 0
  %103 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %102, align 8
  %104 = bitcast %"class.v8::internal::CharacterRange"* %103 to i64*
  %105 = load i64, i64* %104, align 4
  %106 = icmp eq i64 %105, 34359738368
  br i1 %106, label %107, label %113

107:                                              ; preds = %101
  %108 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %103, i64 1
  %109 = bitcast %"class.v8::internal::CharacterRange"* %108 to i64*
  %110 = load i64, i64* %109, align 4
  %111 = icmp eq i64 %110, 133143986190
  br i1 %111, label %359, label %113

112:                                              ; preds = %399
  store i16 83, i16* %8, align 8
  br label %315

113:                                              ; preds = %107, %359, %364, %369, %374, %379, %384, %389, %394, %399, %101, %97
  %114 = icmp eq %"class.v8::internal::ZoneList.553"* %99, null
  br i1 %114, label %115, label %148

115:                                              ; preds = %113
  %116 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 2
  %117 = load i64, i64* %116, align 8
  %118 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 3
  %119 = load i64, i64* %118, align 8
  %120 = sub i64 %119, %117
  %121 = icmp ult i64 %120, 16
  br i1 %121, label %122, label %124, !prof !2

122:                                              ; preds = %115
  %123 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #12
  br label %126

124:                                              ; preds = %115
  %125 = add i64 %117, 16
  store i64 %125, i64* %116, align 8
  br label %126

126:                                              ; preds = %124, %122
  %127 = phi i64 [ %123, %122 ], [ %117, %124 ]
  %128 = inttoptr i64 %127 to %"class.v8::internal::ZoneList.553"*
  %129 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %128, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %129, align 8
  %130 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %128, i64 0, i32 1
  store i32 2, i32* %130, align 8
  %131 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %128, i64 0, i32 2
  store i32 0, i32* %131, align 4
  %132 = load i64, i64* %116, align 8
  %133 = load i64, i64* %118, align 8
  %134 = sub i64 %133, %132
  %135 = icmp ult i64 %134, 16
  br i1 %135, label %136, label %138, !prof !2

136:                                              ; preds = %126
  %137 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #12
  br label %140

138:                                              ; preds = %126
  %139 = add i64 %132, 16
  store i64 %139, i64* %116, align 8
  br label %140

140:                                              ; preds = %138, %136
  %141 = phi i64 [ %137, %136 ], [ %132, %138 ]
  %142 = inttoptr i64 %141 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %142, %"class.v8::internal::CharacterRange"** %129, align 8
  store %"class.v8::internal::ZoneList.553"* %128, %"class.v8::internal::ZoneList.553"** %12, align 8
  %143 = load i16, i16* %8, align 8
  %144 = trunc i16 %143 to i8
  tail call void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEPNS0_4ZoneE(i8 signext %144, %"class.v8::internal::ZoneList.553"* %128, %"class.v8::internal::Zone"* %1) #12
  %145 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %12, align 8
  %146 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %145, i64 0, i32 2
  %147 = load i32, i32* %146, align 4
  br label %148

148:                                              ; preds = %113, %140
  %149 = phi i32 [ %147, %140 ], [ %98, %113 ]
  %150 = phi %"class.v8::internal::ZoneList.553"* [ %145, %140 ], [ %99, %113 ]
  %151 = icmp eq i32 %149, 4
  br i1 %151, label %152, label %164

152:                                              ; preds = %148
  %153 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %150, i64 0, i32 0
  %154 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %153, align 8
  %155 = bitcast %"class.v8::internal::CharacterRange"* %154 to i64*
  %156 = load i64, i64* %155, align 4
  %157 = icmp eq i64 %156, 38654705664
  br i1 %157, label %158, label %164

158:                                              ; preds = %152
  %159 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %154, i64 1
  %160 = bitcast %"class.v8::internal::CharacterRange"* %159 to i64*
  %161 = load i64, i64* %160, align 4
  %162 = icmp eq i64 %161, 51539607563
  br i1 %162, label %349, label %164

163:                                              ; preds = %354
  store i16 46, i16* %8, align 8
  br label %315

164:                                              ; preds = %158, %349, %354, %152, %148
  %165 = icmp eq %"class.v8::internal::ZoneList.553"* %150, null
  br i1 %165, label %166, label %199

166:                                              ; preds = %164
  %167 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 2
  %168 = load i64, i64* %167, align 8
  %169 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 3
  %170 = load i64, i64* %169, align 8
  %171 = sub i64 %170, %168
  %172 = icmp ult i64 %171, 16
  br i1 %172, label %173, label %175, !prof !2

173:                                              ; preds = %166
  %174 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #12
  br label %177

175:                                              ; preds = %166
  %176 = add i64 %168, 16
  store i64 %176, i64* %167, align 8
  br label %177

177:                                              ; preds = %175, %173
  %178 = phi i64 [ %174, %173 ], [ %168, %175 ]
  %179 = inttoptr i64 %178 to %"class.v8::internal::ZoneList.553"*
  %180 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %179, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %180, align 8
  %181 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %179, i64 0, i32 1
  store i32 2, i32* %181, align 8
  %182 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %179, i64 0, i32 2
  store i32 0, i32* %182, align 4
  %183 = load i64, i64* %167, align 8
  %184 = load i64, i64* %169, align 8
  %185 = sub i64 %184, %183
  %186 = icmp ult i64 %185, 16
  br i1 %186, label %187, label %189, !prof !2

187:                                              ; preds = %177
  %188 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #12
  br label %191

189:                                              ; preds = %177
  %190 = add i64 %183, 16
  store i64 %190, i64* %167, align 8
  br label %191

191:                                              ; preds = %189, %187
  %192 = phi i64 [ %188, %187 ], [ %183, %189 ]
  %193 = inttoptr i64 %192 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %193, %"class.v8::internal::CharacterRange"** %180, align 8
  store %"class.v8::internal::ZoneList.553"* %179, %"class.v8::internal::ZoneList.553"** %12, align 8
  %194 = load i16, i16* %8, align 8
  %195 = trunc i16 %194 to i8
  tail call void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEPNS0_4ZoneE(i8 signext %195, %"class.v8::internal::ZoneList.553"* %179, %"class.v8::internal::Zone"* %1) #12
  %196 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %12, align 8
  %197 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %196, i64 0, i32 2
  %198 = load i32, i32* %197, align 4
  br label %199

199:                                              ; preds = %164, %191
  %200 = phi i32 [ %198, %191 ], [ %149, %164 ]
  %201 = phi %"class.v8::internal::ZoneList.553"* [ %196, %191 ], [ %150, %164 ]
  %202 = icmp eq i32 %200, 3
  br i1 %202, label %203, label %214

203:                                              ; preds = %199
  %204 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %201, i64 0, i32 0
  %205 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %204, align 8
  %206 = bitcast %"class.v8::internal::CharacterRange"* %205 to i64*
  %207 = load i64, i64* %206, align 4
  %208 = icmp eq i64 %207, 42949672970
  br i1 %208, label %209, label %214

209:                                              ; preds = %203
  %210 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %205, i64 1
  %211 = bitcast %"class.v8::internal::CharacterRange"* %210 to i64*
  %212 = load i64, i64* %211, align 4
  %213 = icmp eq i64 %212, 55834574861
  br i1 %213, label %343, label %214

214:                                              ; preds = %203, %209, %343, %199
  %215 = icmp eq %"class.v8::internal::ZoneList.553"* %201, null
  br i1 %215, label %216, label %249

216:                                              ; preds = %214
  %217 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 2
  %218 = load i64, i64* %217, align 8
  %219 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 3
  %220 = load i64, i64* %219, align 8
  %221 = sub i64 %220, %218
  %222 = icmp ult i64 %221, 16
  br i1 %222, label %223, label %225, !prof !2

223:                                              ; preds = %216
  %224 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #12
  br label %227

225:                                              ; preds = %216
  %226 = add i64 %218, 16
  store i64 %226, i64* %217, align 8
  br label %227

227:                                              ; preds = %225, %223
  %228 = phi i64 [ %224, %223 ], [ %218, %225 ]
  %229 = inttoptr i64 %228 to %"class.v8::internal::ZoneList.553"*
  %230 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %229, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %230, align 8
  %231 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %229, i64 0, i32 1
  store i32 2, i32* %231, align 8
  %232 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %229, i64 0, i32 2
  store i32 0, i32* %232, align 4
  %233 = load i64, i64* %217, align 8
  %234 = load i64, i64* %219, align 8
  %235 = sub i64 %234, %233
  %236 = icmp ult i64 %235, 16
  br i1 %236, label %237, label %239, !prof !2

237:                                              ; preds = %227
  %238 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #12
  br label %241

239:                                              ; preds = %227
  %240 = add i64 %233, 16
  store i64 %240, i64* %217, align 8
  br label %241

241:                                              ; preds = %239, %237
  %242 = phi i64 [ %238, %237 ], [ %233, %239 ]
  %243 = inttoptr i64 %242 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %243, %"class.v8::internal::CharacterRange"** %230, align 8
  store %"class.v8::internal::ZoneList.553"* %229, %"class.v8::internal::ZoneList.553"** %12, align 8
  %244 = load i16, i16* %8, align 8
  %245 = trunc i16 %244 to i8
  tail call void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEPNS0_4ZoneE(i8 signext %245, %"class.v8::internal::ZoneList.553"* %229, %"class.v8::internal::Zone"* %1) #12
  %246 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %12, align 8
  %247 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %246, i64 0, i32 2
  %248 = load i32, i32* %247, align 4
  br label %249

249:                                              ; preds = %214, %241
  %250 = phi i32 [ %248, %241 ], [ %200, %214 ]
  %251 = phi %"class.v8::internal::ZoneList.553"* [ %246, %241 ], [ %201, %214 ]
  %252 = icmp eq i32 %250, 4
  br i1 %252, label %253, label %264

253:                                              ; preds = %249
  %254 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %251, i64 0, i32 0
  %255 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %254, align 8
  %256 = bitcast %"class.v8::internal::CharacterRange"* %255 to i64*
  %257 = load i64, i64* %256, align 4
  %258 = icmp eq i64 %257, 244813135920
  br i1 %258, label %259, label %264

259:                                              ; preds = %253
  %260 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %255, i64 1
  %261 = bitcast %"class.v8::internal::CharacterRange"* %260 to i64*
  %262 = load i64, i64* %261, align 4
  %263 = icmp eq i64 %262, 386547056705
  br i1 %263, label %332, label %264

264:                                              ; preds = %253, %259, %332, %337, %249
  %265 = icmp eq %"class.v8::internal::ZoneList.553"* %251, null
  br i1 %265, label %266, label %299

266:                                              ; preds = %264
  %267 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 2
  %268 = load i64, i64* %267, align 8
  %269 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 3
  %270 = load i64, i64* %269, align 8
  %271 = sub i64 %270, %268
  %272 = icmp ult i64 %271, 16
  br i1 %272, label %273, label %275, !prof !2

273:                                              ; preds = %266
  %274 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #12
  br label %277

275:                                              ; preds = %266
  %276 = add i64 %268, 16
  store i64 %276, i64* %267, align 8
  br label %277

277:                                              ; preds = %275, %273
  %278 = phi i64 [ %274, %273 ], [ %268, %275 ]
  %279 = inttoptr i64 %278 to %"class.v8::internal::ZoneList.553"*
  %280 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %279, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %280, align 8
  %281 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %279, i64 0, i32 1
  store i32 2, i32* %281, align 8
  %282 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %279, i64 0, i32 2
  store i32 0, i32* %282, align 4
  %283 = load i64, i64* %267, align 8
  %284 = load i64, i64* %269, align 8
  %285 = sub i64 %284, %283
  %286 = icmp ult i64 %285, 16
  br i1 %286, label %287, label %289, !prof !2

287:                                              ; preds = %277
  %288 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #12
  br label %291

289:                                              ; preds = %277
  %290 = add i64 %283, 16
  store i64 %290, i64* %267, align 8
  br label %291

291:                                              ; preds = %289, %287
  %292 = phi i64 [ %288, %287 ], [ %283, %289 ]
  %293 = inttoptr i64 %292 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %293, %"class.v8::internal::CharacterRange"** %280, align 8
  store %"class.v8::internal::ZoneList.553"* %279, %"class.v8::internal::ZoneList.553"** %12, align 8
  %294 = load i16, i16* %8, align 8
  %295 = trunc i16 %294 to i8
  tail call void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEPNS0_4ZoneE(i8 signext %295, %"class.v8::internal::ZoneList.553"* %279, %"class.v8::internal::Zone"* %1) #12
  %296 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %12, align 8
  %297 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %296, i64 0, i32 2
  %298 = load i32, i32* %297, align 4
  br label %299

299:                                              ; preds = %264, %291
  %300 = phi i32 [ %298, %291 ], [ %250, %264 ]
  %301 = phi %"class.v8::internal::ZoneList.553"* [ %296, %291 ], [ %251, %264 ]
  %302 = icmp eq i32 %300, 5
  br i1 %302, label %303, label %315

303:                                              ; preds = %299
  %304 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %301, i64 0, i32 0
  %305 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %304, align 8
  %306 = bitcast %"class.v8::internal::CharacterRange"* %305 to i64*
  %307 = load i64, i64* %306, align 4
  %308 = icmp eq i64 %307, 201863462912
  br i1 %308, label %309, label %315

309:                                              ; preds = %303
  %310 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %305, i64 1
  %311 = bitcast %"class.v8::internal::CharacterRange"* %310 to i64*
  %312 = load i64, i64* %311, align 4
  %313 = icmp eq i64 %312, 274877907002
  br i1 %313, label %317, label %315

314:                                              ; preds = %327
  store i16 87, i16* %8, align 8
  br label %315

315:                                              ; preds = %309, %317, %322, %327, %7, %2, %303, %299, %314, %342, %348, %163, %112, %444
  %316 = phi i1 [ true, %444 ], [ true, %112 ], [ true, %163 ], [ true, %348 ], [ true, %342 ], [ true, %314 ], [ false, %2 ], [ true, %7 ], [ false, %299 ], [ false, %303 ], [ false, %327 ], [ false, %322 ], [ false, %317 ], [ false, %309 ]
  ret i1 %316

317:                                              ; preds = %309
  %318 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %305, i64 2
  %319 = bitcast %"class.v8::internal::CharacterRange"* %318 to i64*
  %320 = load i64, i64* %319, align 4
  %321 = icmp eq i64 %320, 403726925915
  br i1 %321, label %322, label %315

322:                                              ; preds = %317
  %323 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %305, i64 3
  %324 = bitcast %"class.v8::internal::CharacterRange"* %323 to i64*
  %325 = load i64, i64* %324, align 4
  %326 = icmp eq i64 %325, 412316860512
  br i1 %326, label %327, label %315

327:                                              ; preds = %322
  %328 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %305, i64 4
  %329 = bitcast %"class.v8::internal::CharacterRange"* %328 to i64*
  %330 = load i64, i64* %329, align 4
  %331 = icmp eq i64 %330, 4785070309113979
  br i1 %331, label %314, label %315

332:                                              ; preds = %259
  %333 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %255, i64 2
  %334 = bitcast %"class.v8::internal::CharacterRange"* %333 to i64*
  %335 = load i64, i64* %334, align 4
  %336 = icmp eq i64 %335, 408021893215
  br i1 %336, label %337, label %264

337:                                              ; preds = %332
  %338 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %255, i64 3
  %339 = bitcast %"class.v8::internal::CharacterRange"* %338 to i64*
  %340 = load i64, i64* %339, align 4
  %341 = icmp eq i64 %340, 523986010209
  br i1 %341, label %342, label %264

342:                                              ; preds = %337
  store i16 119, i16* %8, align 8
  br label %315

343:                                              ; preds = %209
  %344 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %205, i64 2
  %345 = bitcast %"class.v8::internal::CharacterRange"* %344 to i64*
  %346 = load i64, i64* %345, align 4
  %347 = icmp eq i64 %346, 35360465756200
  br i1 %347, label %348, label %214

348:                                              ; preds = %343
  store i16 110, i16* %8, align 8
  br label %315

349:                                              ; preds = %158
  %350 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %154, i64 2
  %351 = bitcast %"class.v8::internal::CharacterRange"* %350 to i64*
  %352 = load i64, i64* %351, align 4
  %353 = icmp eq i64 %352, 35351875813390
  br i1 %353, label %354, label %164

354:                                              ; preds = %349
  %355 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %154, i64 3
  %356 = bitcast %"class.v8::internal::CharacterRange"* %355 to i64*
  %357 = load i64, i64* %356, align 4
  %358 = icmp eq i64 %357, 4785070309122090
  br i1 %358, label %163, label %164

359:                                              ; preds = %107
  %360 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %103, i64 2
  %361 = bitcast %"class.v8::internal::CharacterRange"* %360 to i64*
  %362 = load i64, i64* %361, align 4
  %363 = icmp eq i64 %362, 682899800097
  br i1 %363, label %364, label %113

364:                                              ; preds = %359
  %365 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %103, i64 3
  %366 = bitcast %"class.v8::internal::CharacterRange"* %365 to i64*
  %367 = load i64, i64* %366, align 4
  %368 = icmp eq i64 %367, 24734716657825
  br i1 %368, label %369, label %113

369:                                              ; preds = %364
  %370 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %103, i64 4
  %371 = bitcast %"class.v8::internal::CharacterRange"* %370 to i64*
  %372 = load i64, i64* %371, align 4
  %373 = icmp eq i64 %372, 35180077127297
  br i1 %373, label %374, label %113

374:                                              ; preds = %369
  %375 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %103, i64 5
  %376 = bitcast %"class.v8::internal::CharacterRange"* %375 to i64*
  %377 = load i64, i64* %376, align 4
  %378 = icmp eq i64 %377, 35351875821579
  br i1 %378, label %379, label %113

379:                                              ; preds = %374
  %380 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %103, i64 6
  %381 = bitcast %"class.v8::internal::CharacterRange"* %380 to i64*
  %382 = load i64, i64* %381, align 4
  %383 = icmp eq i64 %382, 35381940592682
  br i1 %383, label %384, label %113

384:                                              ; preds = %379
  %385 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %103, i64 7
  %386 = bitcast %"class.v8::internal::CharacterRange"* %385 to i64*
  %387 = load i64, i64* %386, align 4
  %388 = icmp eq i64 %387, 35588099022896
  br i1 %388, label %389, label %113

389:                                              ; preds = %384
  %390 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %103, i64 8
  %391 = bitcast %"class.v8::internal::CharacterRange"* %390 to i64*
  %392 = load i64, i64* %391, align 4
  %393 = icmp eq i64 %392, 52772263174240
  br i1 %393, label %394, label %113

394:                                              ; preds = %389
  %395 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %103, i64 9
  %396 = bitcast %"class.v8::internal::CharacterRange"* %395 to i64*
  %397 = load i64, i64* %396, align 4
  %398 = icmp eq i64 %397, 280366875160577
  br i1 %398, label %399, label %113

399:                                              ; preds = %394
  %400 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %103, i64 10
  %401 = bitcast %"class.v8::internal::CharacterRange"* %400 to i64*
  %402 = load i64, i64* %401, align 4
  %403 = icmp eq i64 %402, 4785070309179136
  br i1 %403, label %112, label %113

404:                                              ; preds = %57
  %405 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %53, i64 2
  %406 = bitcast %"class.v8::internal::CharacterRange"* %405 to i64*
  %407 = load i64, i64* %406, align 4
  %408 = icmp eq i64 %407, 687194767520
  br i1 %408, label %409, label %62

409:                                              ; preds = %404
  %410 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %53, i64 3
  %411 = bitcast %"class.v8::internal::CharacterRange"* %410 to i64*
  %412 = load i64, i64* %411, align 4
  %413 = icmp eq i64 %412, 24739011630720
  br i1 %413, label %414, label %62

414:                                              ; preds = %409
  %415 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %53, i64 4
  %416 = bitcast %"class.v8::internal::CharacterRange"* %415 to i64*
  %417 = load i64, i64* %416, align 4
  %418 = icmp eq i64 %417, 35227321769984
  br i1 %418, label %419, label %62

419:                                              ; preds = %414
  %420 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %53, i64 5
  %421 = bitcast %"class.v8::internal::CharacterRange"* %420 to i64*
  %422 = load i64, i64* %421, align 4
  %423 = icmp eq i64 %422, 35360465756200
  br i1 %423, label %424, label %62

424:                                              ; preds = %419
  %425 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %53, i64 6
  %426 = bitcast %"class.v8::internal::CharacterRange"* %425 to i64*
  %427 = load i64, i64* %426, align 4
  %428 = icmp eq i64 %427, 35386235559983
  br i1 %428, label %429, label %62

429:                                              ; preds = %424
  %430 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %53, i64 7
  %431 = bitcast %"class.v8::internal::CharacterRange"* %430 to i64*
  %432 = load i64, i64* %431, align 4
  %433 = icmp eq i64 %432, 35592393990239
  br i1 %433, label %434, label %62

434:                                              ; preds = %429
  %435 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %53, i64 8
  %436 = bitcast %"class.v8::internal::CharacterRange"* %435 to i64*
  %437 = load i64, i64* %436, align 4
  %438 = icmp eq i64 %437, 52776558145536
  br i1 %438, label %439, label %62

439:                                              ; preds = %434
  %440 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %53, i64 9
  %441 = bitcast %"class.v8::internal::CharacterRange"* %440 to i64*
  %442 = load i64, i64* %441, align 4
  %443 = icmp eq i64 %442, 280371170180863
  br i1 %443, label %444, label %62

444:                                              ; preds = %439
  store i16 115, i16* %8, align 8
  br label %315
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::ZoneList.553"* @_ZN2v88internal12CharacterSet6rangesEPNS0_4ZoneE(%"class.v8::internal::CharacterSet"* nocapture, %"class.v8::internal::Zone"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::CharacterSet", %"class.v8::internal::CharacterSet"* %0, i64 0, i32 0
  %4 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %3, align 8
  %5 = icmp eq %"class.v8::internal::ZoneList.553"* %4, null
  br i1 %5, label %6, label %38

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %10, %8
  %12 = icmp ult i64 %11, 16
  br i1 %12, label %13, label %15, !prof !2

13:                                               ; preds = %6
  %14 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #12
  br label %17

15:                                               ; preds = %6
  %16 = add i64 %8, 16
  store i64 %16, i64* %7, align 8
  br label %17

17:                                               ; preds = %13, %15
  %18 = phi i64 [ %14, %13 ], [ %8, %15 ]
  %19 = inttoptr i64 %18 to %"class.v8::internal::ZoneList.553"*
  %20 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %19, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %20, align 8
  %21 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %19, i64 0, i32 1
  store i32 2, i32* %21, align 8
  %22 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %19, i64 0, i32 2
  store i32 0, i32* %22, align 4
  %23 = load i64, i64* %7, align 8
  %24 = load i64, i64* %9, align 8
  %25 = sub i64 %24, %23
  %26 = icmp ult i64 %25, 16
  br i1 %26, label %27, label %29, !prof !2

27:                                               ; preds = %17
  %28 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #12
  br label %31

29:                                               ; preds = %17
  %30 = add i64 %23, 16
  store i64 %30, i64* %7, align 8
  br label %31

31:                                               ; preds = %27, %29
  %32 = phi i64 [ %28, %27 ], [ %23, %29 ]
  %33 = inttoptr i64 %32 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %33, %"class.v8::internal::CharacterRange"** %20, align 8
  store %"class.v8::internal::ZoneList.553"* %19, %"class.v8::internal::ZoneList.553"** %3, align 8
  %34 = getelementptr inbounds %"class.v8::internal::CharacterSet", %"class.v8::internal::CharacterSet"* %0, i64 0, i32 1
  %35 = load i16, i16* %34, align 8
  %36 = trunc i16 %35 to i8
  tail call void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEPNS0_4ZoneE(i8 signext %36, %"class.v8::internal::ZoneList.553"* %19, %"class.v8::internal::Zone"* %1) #12
  %37 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %3, align 8
  br label %38

38:                                               ; preds = %31, %2
  %39 = phi %"class.v8::internal::ZoneList.553"* [ %37, %31 ], [ %4, %2 ]
  ret %"class.v8::internal::ZoneList.553"* %39
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal20UnicodeRangeSplitterC2EPNS0_8ZoneListINS0_14CharacterRangeEEE(%"class.v8::internal::UnicodeRangeSplitter"*, %"class.v8::internal::ZoneList.553"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 0, i32 3
  %4 = bitcast %"class.v8::internal::UnicodeRangeSplitter"* %0 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %3, %"struct.std::__1::aligned_storage<64, 4>::type"** %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"class.v8::internal::CharacterRange"** %5 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %3, %"struct.std::__1::aligned_storage<64, 4>::type"** %6, align 8
  %7 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 0, i32 2
  %8 = getelementptr inbounds %"struct.std::__1::aligned_storage<64, 4>::type", %"struct.std::__1::aligned_storage<64, 4>::type"* %3, i64 1
  %9 = bitcast %"class.v8::internal::CharacterRange"** %7 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %8, %"struct.std::__1::aligned_storage<64, 4>::type"** %9, align 8
  %10 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 1, i32 3
  %12 = bitcast %"class.v8::base::SmallVector"* %10 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %11, %"struct.std::__1::aligned_storage<64, 4>::type"** %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 1, i32 1
  %14 = bitcast %"class.v8::internal::CharacterRange"** %13 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %11, %"struct.std::__1::aligned_storage<64, 4>::type"** %14, align 8
  %15 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 1, i32 2
  %16 = getelementptr inbounds %"struct.std::__1::aligned_storage<64, 4>::type", %"struct.std::__1::aligned_storage<64, 4>::type"* %11, i64 1
  %17 = bitcast %"class.v8::internal::CharacterRange"** %15 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %16, %"struct.std::__1::aligned_storage<64, 4>::type"** %17, align 8
  %18 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 2
  %19 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 2, i32 3
  %20 = bitcast %"class.v8::base::SmallVector"* %18 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %19, %"struct.std::__1::aligned_storage<64, 4>::type"** %20, align 8
  %21 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 2, i32 1
  %22 = bitcast %"class.v8::internal::CharacterRange"** %21 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %19, %"struct.std::__1::aligned_storage<64, 4>::type"** %22, align 8
  %23 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 2, i32 2
  %24 = getelementptr inbounds %"struct.std::__1::aligned_storage<64, 4>::type", %"struct.std::__1::aligned_storage<64, 4>::type"* %19, i64 1
  %25 = bitcast %"class.v8::internal::CharacterRange"** %23 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %24, %"struct.std::__1::aligned_storage<64, 4>::type"** %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 3
  %27 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 3, i32 3
  %28 = bitcast %"class.v8::base::SmallVector"* %26 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %27, %"struct.std::__1::aligned_storage<64, 4>::type"** %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 3, i32 1
  %30 = bitcast %"class.v8::internal::CharacterRange"** %29 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %27, %"struct.std::__1::aligned_storage<64, 4>::type"** %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 3, i32 2
  %32 = getelementptr inbounds %"struct.std::__1::aligned_storage<64, 4>::type", %"struct.std::__1::aligned_storage<64, 4>::type"* %27, i64 1
  %33 = bitcast %"class.v8::internal::CharacterRange"** %31 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %32, %"struct.std::__1::aligned_storage<64, 4>::type"** %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %2
  %38 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  br label %40

39:                                               ; preds = %40, %2
  ret void

40:                                               ; preds = %37, %40
  %41 = phi i64 [ 0, %37 ], [ %46, %40 ]
  %42 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %38, align 8
  %43 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %42, i64 %41
  %44 = bitcast %"class.v8::internal::CharacterRange"* %43 to i64*
  %45 = load i64, i64* %44, align 4
  tail call void @_ZN2v88internal20UnicodeRangeSplitter8AddRangeENS0_14CharacterRangeE(%"class.v8::internal::UnicodeRangeSplitter"* %0, i64 %45)
  %46 = add nuw nsw i64 %41, 1
  %47 = load i32, i32* %34, align 4
  %48 = sext i32 %47 to i64
  %49 = icmp slt i64 %46, %48
  br i1 %49, label %40, label %39
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal20UnicodeRangeSplitter8AddRangeENS0_14CharacterRangeE(%"class.v8::internal::UnicodeRangeSplitter"*, i64) local_unnamed_addr #0 align 2 {
  %3 = trunc i64 %1 to i32
  %4 = lshr i64 %1, 32
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 3
  %10 = icmp ult i32 %5, 55295
  %11 = select i1 %10, i32 %5, i32 55295
  %12 = icmp ult i32 %11, %3
  br i1 %12, label %29, label %13

13:                                               ; preds = %2
  %14 = zext i32 %11 to i64
  %15 = shl nuw nsw i64 %14, 32
  %16 = and i64 %1, 4294967295
  %17 = or i64 %15, %16
  %18 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 0, i32 1
  %19 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 0, i32 2
  %21 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %20, align 8
  %22 = icmp eq %"class.v8::internal::CharacterRange"* %19, %21
  br i1 %22, label %23, label %25, !prof !2

23:                                               ; preds = %13
  %24 = tail call %"class.v8::internal::CharacterRange"* @_ZN2v84base11SmallVectorINS_8internal14CharacterRangeELm8EE4GrowEv(%"class.v8::base::SmallVector"* %6) #12
  br label %25

25:                                               ; preds = %13, %23
  %26 = phi %"class.v8::internal::CharacterRange"* [ %24, %23 ], [ %19, %13 ]
  %27 = bitcast %"class.v8::internal::CharacterRange"* %26 to i64*
  store i64 %17, i64* %27, align 4
  %28 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %26, i64 1
  store %"class.v8::internal::CharacterRange"* %28, %"class.v8::internal::CharacterRange"** %18, align 8
  br label %29

29:                                               ; preds = %2, %25
  %30 = icmp ult i32 %5, 55296
  br i1 %30, label %31, label %32

31:                                               ; preds = %104, %122, %102, %78, %54, %29
  ret void

32:                                               ; preds = %29
  %33 = icmp ugt i32 %3, 55296
  %34 = select i1 %33, i32 %3, i32 55296
  %35 = icmp ult i32 %5, 56319
  %36 = select i1 %35, i32 %5, i32 56319
  %37 = icmp ugt i32 %34, %36
  br i1 %37, label %54, label %38

38:                                               ; preds = %32
  %39 = zext i32 %36 to i64
  %40 = shl nuw nsw i64 %39, 32
  %41 = zext i32 %34 to i64
  %42 = or i64 %40, %41
  %43 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 1, i32 1
  %44 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %43, align 8
  %45 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 1, i32 2
  %46 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %45, align 8
  %47 = icmp eq %"class.v8::internal::CharacterRange"* %44, %46
  br i1 %47, label %48, label %50, !prof !2

48:                                               ; preds = %38
  %49 = tail call %"class.v8::internal::CharacterRange"* @_ZN2v84base11SmallVectorINS_8internal14CharacterRangeELm8EE4GrowEv(%"class.v8::base::SmallVector"* %7) #12
  br label %50

50:                                               ; preds = %48, %38
  %51 = phi %"class.v8::internal::CharacterRange"* [ %49, %48 ], [ %44, %38 ]
  %52 = bitcast %"class.v8::internal::CharacterRange"* %51 to i64*
  store i64 %42, i64* %52, align 4
  %53 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %51, i64 1
  store %"class.v8::internal::CharacterRange"* %53, %"class.v8::internal::CharacterRange"** %43, align 8
  br label %54

54:                                               ; preds = %50, %32
  %55 = icmp ult i32 %5, 56320
  br i1 %55, label %31, label %56

56:                                               ; preds = %54
  %57 = icmp ugt i32 %3, 56320
  %58 = select i1 %57, i32 %3, i32 56320
  %59 = icmp ult i32 %5, 57343
  %60 = select i1 %59, i32 %5, i32 57343
  %61 = icmp ugt i32 %58, %60
  br i1 %61, label %78, label %62

62:                                               ; preds = %56
  %63 = zext i32 %60 to i64
  %64 = shl nuw nsw i64 %63, 32
  %65 = zext i32 %58 to i64
  %66 = or i64 %64, %65
  %67 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 2, i32 1
  %68 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %67, align 8
  %69 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 2, i32 2
  %70 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %69, align 8
  %71 = icmp eq %"class.v8::internal::CharacterRange"* %68, %70
  br i1 %71, label %72, label %74, !prof !2

72:                                               ; preds = %62
  %73 = tail call %"class.v8::internal::CharacterRange"* @_ZN2v84base11SmallVectorINS_8internal14CharacterRangeELm8EE4GrowEv(%"class.v8::base::SmallVector"* %8) #12
  br label %74

74:                                               ; preds = %72, %62
  %75 = phi %"class.v8::internal::CharacterRange"* [ %73, %72 ], [ %68, %62 ]
  %76 = bitcast %"class.v8::internal::CharacterRange"* %75 to i64*
  store i64 %66, i64* %76, align 4
  %77 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %75, i64 1
  store %"class.v8::internal::CharacterRange"* %77, %"class.v8::internal::CharacterRange"** %67, align 8
  br label %78

78:                                               ; preds = %74, %56
  %79 = icmp ult i32 %5, 57344
  br i1 %79, label %31, label %80

80:                                               ; preds = %78
  %81 = icmp ugt i32 %3, 57344
  %82 = select i1 %81, i32 %3, i32 57344
  %83 = icmp ult i32 %5, 65535
  %84 = select i1 %83, i32 %5, i32 65535
  %85 = icmp ugt i32 %82, %84
  br i1 %85, label %102, label %86

86:                                               ; preds = %80
  %87 = zext i32 %84 to i64
  %88 = shl nuw nsw i64 %87, 32
  %89 = zext i32 %82 to i64
  %90 = or i64 %88, %89
  %91 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 0, i32 1
  %92 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %91, align 8
  %93 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 0, i32 2
  %94 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %93, align 8
  %95 = icmp eq %"class.v8::internal::CharacterRange"* %92, %94
  br i1 %95, label %96, label %98, !prof !2

96:                                               ; preds = %86
  %97 = tail call %"class.v8::internal::CharacterRange"* @_ZN2v84base11SmallVectorINS_8internal14CharacterRangeELm8EE4GrowEv(%"class.v8::base::SmallVector"* %6) #12
  br label %98

98:                                               ; preds = %96, %86
  %99 = phi %"class.v8::internal::CharacterRange"* [ %97, %96 ], [ %92, %86 ]
  %100 = bitcast %"class.v8::internal::CharacterRange"* %99 to i64*
  store i64 %90, i64* %100, align 4
  %101 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %99, i64 1
  store %"class.v8::internal::CharacterRange"* %101, %"class.v8::internal::CharacterRange"** %91, align 8
  br label %102

102:                                              ; preds = %98, %80
  %103 = icmp ult i32 %5, 65536
  br i1 %103, label %31, label %104

104:                                              ; preds = %102
  %105 = icmp ugt i32 %3, 65536
  %106 = select i1 %105, i32 %3, i32 65536
  %107 = icmp ult i32 %5, 1114111
  %108 = select i1 %107, i32 %5, i32 1114111
  %109 = icmp ugt i32 %106, %108
  br i1 %109, label %31, label %110

110:                                              ; preds = %104
  %111 = zext i32 %108 to i64
  %112 = shl nuw nsw i64 %111, 32
  %113 = zext i32 %106 to i64
  %114 = or i64 %112, %113
  %115 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 3, i32 1
  %116 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %115, align 8
  %117 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %0, i64 0, i32 3, i32 2
  %118 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %117, align 8
  %119 = icmp eq %"class.v8::internal::CharacterRange"* %116, %118
  br i1 %119, label %120, label %122, !prof !2

120:                                              ; preds = %110
  %121 = tail call %"class.v8::internal::CharacterRange"* @_ZN2v84base11SmallVectorINS_8internal14CharacterRangeELm8EE4GrowEv(%"class.v8::base::SmallVector"* %9) #12
  br label %122

122:                                              ; preds = %120, %110
  %123 = phi %"class.v8::internal::CharacterRange"* [ %121, %120 ], [ %116, %110 ]
  %124 = bitcast %"class.v8::internal::CharacterRange"* %123 to i64*
  store i64 %114, i64* %124, align 4
  %125 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %123, i64 1
  store %"class.v8::internal::CharacterRange"* %125, %"class.v8::internal::CharacterRange"** %115, align 8
  br label %31
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal20RegExpCharacterClass6ToNodeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpCharacterClass"*, %"class.v8::internal::RegExpCompiler"* nocapture, %"class.v8::internal::RegExpNode"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::Zone"*, align 8
  %5 = alloca %"class.v8::internal::ZoneList.553"*, align 8
  %6 = alloca %"class.v8::base::Flags", align 4
  %7 = alloca i32, align 4
  %8 = alloca %"class.v8::internal::UnicodeRangeSplitter", align 8
  %9 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %0, i64 0, i32 1, i32 0
  %10 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %9, align 8
  %11 = icmp eq %"class.v8::internal::ZoneList.553"* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %3
  tail call void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.553"* nonnull %10) #12
  %13 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %9, align 8
  br label %14

14:                                               ; preds = %3, %12
  %15 = phi %"class.v8::internal::ZoneList.553"* [ null, %3 ], [ %13, %12 ]
  %16 = bitcast %"class.v8::internal::Zone"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #12
  %17 = getelementptr %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 15
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  store %"class.v8::internal::Zone"* %18, %"class.v8::internal::Zone"** %4, align 8
  %19 = bitcast %"class.v8::internal::ZoneList.553"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #12
  %20 = icmp eq %"class.v8::internal::ZoneList.553"* %15, null
  br i1 %20, label %21, label %53

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %25, %23
  %27 = icmp ult i64 %26, 16
  br i1 %27, label %28, label %30, !prof !2

28:                                               ; preds = %21
  %29 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 16) #12
  br label %32

30:                                               ; preds = %21
  %31 = add i64 %23, 16
  store i64 %31, i64* %22, align 8
  br label %32

32:                                               ; preds = %30, %28
  %33 = phi i64 [ %29, %28 ], [ %23, %30 ]
  %34 = inttoptr i64 %33 to %"class.v8::internal::ZoneList.553"*
  %35 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %34, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %35, align 8
  %36 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %34, i64 0, i32 1
  store i32 2, i32* %36, align 8
  %37 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %34, i64 0, i32 2
  store i32 0, i32* %37, align 4
  %38 = load i64, i64* %22, align 8
  %39 = load i64, i64* %24, align 8
  %40 = sub i64 %39, %38
  %41 = icmp ult i64 %40, 16
  br i1 %41, label %42, label %44, !prof !2

42:                                               ; preds = %32
  %43 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 16) #12
  br label %46

44:                                               ; preds = %32
  %45 = add i64 %38, 16
  store i64 %45, i64* %22, align 8
  br label %46

46:                                               ; preds = %44, %42
  %47 = phi i64 [ %43, %42 ], [ %38, %44 ]
  %48 = inttoptr i64 %47 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %48, %"class.v8::internal::CharacterRange"** %35, align 8
  store %"class.v8::internal::ZoneList.553"* %34, %"class.v8::internal::ZoneList.553"** %9, align 8
  %49 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %0, i64 0, i32 1, i32 1
  %50 = load i16, i16* %49, align 8
  %51 = trunc i16 %50 to i8
  tail call void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEPNS0_4ZoneE(i8 signext %51, %"class.v8::internal::ZoneList.553"* %34, %"class.v8::internal::Zone"* %18) #12
  %52 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %9, align 8
  br label %53

53:                                               ; preds = %14, %46
  %54 = phi %"class.v8::internal::ZoneList.553"* [ %52, %46 ], [ %15, %14 ]
  store %"class.v8::internal::ZoneList.553"* %54, %"class.v8::internal::ZoneList.553"** %5, align 8
  %55 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %0, i64 0, i32 2, i32 0
  %56 = load i32, i32* %55, align 8
  %57 = and i32 %56, 18
  %58 = icmp eq i32 %57, 18
  br i1 %58, label %59, label %62

59:                                               ; preds = %53
  %60 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  tail call fastcc void @_ZN2v88internal12_GLOBAL__N_125AddUnicodeCaseEquivalentsEPNS0_8ZoneListINS0_14CharacterRangeEEEPNS0_4ZoneE(%"class.v8::internal::ZoneList.553"* %54, %"class.v8::internal::Zone"* %60)
  %61 = load i32, i32* %55, align 8
  br label %62

62:                                               ; preds = %59, %53
  %63 = phi i32 [ %61, %59 ], [ %56, %53 ]
  %64 = and i32 %63, 16
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %737, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 7
  %68 = load i8, i8* %67, align 8, !range !3
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %70, label %737

70:                                               ; preds = %66
  %71 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %0, i64 0, i32 3, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = and i32 %72, 2
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %737

75:                                               ; preds = %70
  %76 = and i32 %72, 1
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %109, label %78

78:                                               ; preds = %75
  %79 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %80 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %79, i64 0, i32 2
  %81 = load i64, i64* %80, align 8
  %82 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %79, i64 0, i32 3
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %83, %81
  %85 = icmp ult i64 %84, 16
  br i1 %85, label %86, label %88, !prof !2

86:                                               ; preds = %78
  %87 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %79, i64 16) #12
  br label %90

88:                                               ; preds = %78
  %89 = add i64 %81, 16
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %86, %88
  %91 = phi i64 [ %87, %86 ], [ %81, %88 ]
  %92 = inttoptr i64 %91 to %"class.v8::internal::ZoneList.553"*
  %93 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %92, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %93, align 8
  %94 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %92, i64 0, i32 1
  store i32 2, i32* %94, align 8
  %95 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %92, i64 0, i32 2
  store i32 0, i32* %95, align 4
  %96 = load i64, i64* %80, align 8
  %97 = load i64, i64* %82, align 8
  %98 = sub i64 %97, %96
  %99 = icmp ult i64 %98, 16
  br i1 %99, label %100, label %102, !prof !2

100:                                              ; preds = %90
  %101 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %79, i64 16) #12
  br label %104

102:                                              ; preds = %90
  %103 = add i64 %96, 16
  store i64 %103, i64* %80, align 8
  br label %104

104:                                              ; preds = %100, %102
  %105 = phi i64 [ %101, %100 ], [ %96, %102 ]
  %106 = inttoptr i64 %105 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %106, %"class.v8::internal::CharacterRange"** %93, align 8
  %107 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %5, align 8
  %108 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  tail call void @_ZN2v88internal14CharacterRange6NegateEPNS0_8ZoneListIS1_EES4_PNS0_4ZoneE(%"class.v8::internal::ZoneList.553"* %107, %"class.v8::internal::ZoneList.553"* %92, %"class.v8::internal::Zone"* %108)
  store %"class.v8::internal::ZoneList.553"* %92, %"class.v8::internal::ZoneList.553"** %5, align 8
  br label %109

109:                                              ; preds = %75, %104
  %110 = phi %"class.v8::internal::ZoneList.553"* [ %54, %75 ], [ %92, %104 ]
  %111 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %110, i64 0, i32 2
  %112 = load i32, i32* %111, align 4
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %137

114:                                              ; preds = %109
  %115 = bitcast %"class.v8::base::Flags"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %115) #12
  %116 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %6, i64 0, i32 0
  store i32 0, i32* %116, align 4
  %117 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %118 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJRPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %117, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %4, %"class.v8::internal::ZoneList.553"** nonnull dereferenceable(8) %5, %"class.v8::base::Flags"* nonnull dereferenceable(4) %6)
  %119 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %120 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 11
  %121 = load i8, i8* %120, align 4, !range !3
  %122 = icmp ne i8 %121, 0
  %123 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %119, i64 0, i32 2
  %124 = load i64, i64* %123, align 8
  %125 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %119, i64 0, i32 3
  %126 = load i64, i64* %125, align 8
  %127 = sub i64 %126, %124
  %128 = icmp ult i64 %127, 80
  br i1 %128, label %129, label %131, !prof !2

129:                                              ; preds = %114
  %130 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %119, i64 80) #12
  br label %133

131:                                              ; preds = %114
  %132 = add i64 %124, 80
  store i64 %132, i64* %123, align 8
  br label %133

133:                                              ; preds = %129, %131
  %134 = phi i64 [ %130, %129 ], [ %124, %131 ]
  %135 = inttoptr i64 %134 to %"class.v8::internal::TextNode"*
  call void @_ZN2v88internal8TextNodeC2EPNS0_20RegExpCharacterClassEbPNS0_10RegExpNodeE(%"class.v8::internal::TextNode"* %135, %"class.v8::internal::RegExpCharacterClass"* %118, i1 zeroext %122, %"class.v8::internal::RegExpNode"* %2) #12
  %136 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %135, i64 0, i32 0, i32 0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %115) #12
  br label %756

137:                                              ; preds = %109
  %138 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %0, i64 0, i32 1, i32 1
  %139 = load i16, i16* %138, align 8
  %140 = icmp eq i16 %139, 42
  br i1 %140, label %141, label %146

141:                                              ; preds = %137
  %142 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  %143 = tail call %"class.v8::internal::ZoneList.553"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %142, i64 281470681743360) #12
  %144 = tail call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode24CreateForCharacterRangesEPNS0_4ZoneEPNS0_8ZoneListINS0_14CharacterRangeEEEbPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %142, %"class.v8::internal::ZoneList.553"* %143, i1 zeroext false, %"class.v8::internal::RegExpNode"* %2, i32 0) #12
  %145 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %144, i64 0, i32 0, i32 0
  br label %756

146:                                              ; preds = %137
  %147 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %148 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %148) #12
  store i32 2, i32* %7, align 4
  %149 = call %"class.v8::internal::ChoiceNode"* @_ZN2v88internal4Zone3NewINS0_10ChoiceNodeEJiRPS1_EEEPT_DpOT0_(%"class.v8::internal::Zone"* %147, i32* nonnull dereferenceable(4) %7, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %148) #12
  %150 = bitcast %"class.v8::internal::UnicodeRangeSplitter"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 352, i8* nonnull %150) #12
  %151 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %5, align 8
  %152 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 0, i32 3
  %153 = bitcast %"class.v8::internal::UnicodeRangeSplitter"* %8 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %152, %"struct.std::__1::aligned_storage<64, 4>::type"** %153, align 8
  %154 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 0, i32 1
  %155 = bitcast %"class.v8::internal::CharacterRange"** %154 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %152, %"struct.std::__1::aligned_storage<64, 4>::type"** %155, align 8
  %156 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 0, i32 2
  %157 = getelementptr inbounds %"struct.std::__1::aligned_storage<64, 4>::type", %"struct.std::__1::aligned_storage<64, 4>::type"* %152, i64 1
  %158 = bitcast %"class.v8::internal::CharacterRange"** %156 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %157, %"struct.std::__1::aligned_storage<64, 4>::type"** %158, align 8
  %159 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 1
  %160 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 1, i32 3
  %161 = bitcast %"class.v8::base::SmallVector"* %159 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %160, %"struct.std::__1::aligned_storage<64, 4>::type"** %161, align 8
  %162 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 1, i32 1
  %163 = bitcast %"class.v8::internal::CharacterRange"** %162 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %160, %"struct.std::__1::aligned_storage<64, 4>::type"** %163, align 8
  %164 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 1, i32 2
  %165 = getelementptr inbounds %"struct.std::__1::aligned_storage<64, 4>::type", %"struct.std::__1::aligned_storage<64, 4>::type"* %160, i64 1
  %166 = bitcast %"class.v8::internal::CharacterRange"** %164 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %165, %"struct.std::__1::aligned_storage<64, 4>::type"** %166, align 8
  %167 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 2
  %168 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 2, i32 3
  %169 = bitcast %"class.v8::base::SmallVector"* %167 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %168, %"struct.std::__1::aligned_storage<64, 4>::type"** %169, align 8
  %170 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 2, i32 1
  %171 = bitcast %"class.v8::internal::CharacterRange"** %170 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %168, %"struct.std::__1::aligned_storage<64, 4>::type"** %171, align 8
  %172 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 2, i32 2
  %173 = getelementptr inbounds %"struct.std::__1::aligned_storage<64, 4>::type", %"struct.std::__1::aligned_storage<64, 4>::type"* %168, i64 1
  %174 = bitcast %"class.v8::internal::CharacterRange"** %172 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %173, %"struct.std::__1::aligned_storage<64, 4>::type"** %174, align 8
  %175 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 3
  %176 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 3, i32 3
  %177 = bitcast %"class.v8::base::SmallVector"* %175 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %176, %"struct.std::__1::aligned_storage<64, 4>::type"** %177, align 8
  %178 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 3, i32 1
  %179 = bitcast %"class.v8::internal::CharacterRange"** %178 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %176, %"struct.std::__1::aligned_storage<64, 4>::type"** %179, align 8
  %180 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 3, i32 2
  %181 = getelementptr inbounds %"struct.std::__1::aligned_storage<64, 4>::type", %"struct.std::__1::aligned_storage<64, 4>::type"* %176, i64 1
  %182 = bitcast %"class.v8::internal::CharacterRange"** %180 to %"struct.std::__1::aligned_storage<64, 4>::type"**
  store %"struct.std::__1::aligned_storage<64, 4>::type"* %181, %"struct.std::__1::aligned_storage<64, 4>::type"** %182, align 8
  %183 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %151, i64 0, i32 2
  %184 = load i32, i32* %183, align 4
  %185 = icmp sgt i32 %184, 0
  br i1 %185, label %186, label %198

186:                                              ; preds = %146
  %187 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %151, i64 0, i32 0
  br label %188

188:                                              ; preds = %188, %186
  %189 = phi i64 [ 0, %186 ], [ %194, %188 ]
  %190 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %187, align 8
  %191 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %190, i64 %189
  %192 = bitcast %"class.v8::internal::CharacterRange"* %191 to i64*
  %193 = load i64, i64* %192, align 4
  call void @_ZN2v88internal20UnicodeRangeSplitter8AddRangeENS0_14CharacterRangeE(%"class.v8::internal::UnicodeRangeSplitter"* nonnull %8, i64 %193) #12
  %194 = add nuw nsw i64 %189, 1
  %195 = load i32, i32* %183, align 4
  %196 = sext i32 %195 to i64
  %197 = icmp slt i64 %194, %196
  br i1 %197, label %188, label %198

198:                                              ; preds = %188, %146
  %199 = load i32, i32* %55, align 8
  %200 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 0
  %201 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  %202 = call fastcc %"class.v8::internal::ZoneList.553"* @_ZN2v88internal12_GLOBAL__N_119ToCanonicalZoneListEPKNS_4base11SmallVectorINS0_14CharacterRangeELm8EEEPNS0_4ZoneE(%"class.v8::base::SmallVector"* nonnull %200, %"class.v8::internal::Zone"* %201) #12
  %203 = icmp eq %"class.v8::internal::ZoneList.553"* %202, null
  br i1 %203, label %264, label %204

204:                                              ; preds = %198
  %205 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  %206 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 11
  %207 = load i8, i8* %206, align 4, !range !3
  %208 = icmp ne i8 %207, 0
  %209 = call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode24CreateForCharacterRangesEPNS0_4ZoneEPNS0_8ZoneListINS0_14CharacterRangeEEEbPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %205, %"class.v8::internal::ZoneList.553"* nonnull %202, i1 zeroext %208, %"class.v8::internal::RegExpNode"* %2, i32 %199) #12
  %210 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %209, i64 0, i32 0, i32 0
  %211 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %149, i64 0, i32 1
  %212 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %211, align 8
  %213 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %149, i64 0, i32 0, i32 8
  %214 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %213, align 8
  %215 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %212, i64 0, i32 2
  %216 = load i32, i32* %215, align 4
  %217 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %212, i64 0, i32 1
  %218 = load i32, i32* %217, align 8
  %219 = icmp slt i32 %216, %218
  br i1 %219, label %220, label %227

220:                                              ; preds = %204
  %221 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %212, i64 0, i32 0
  %222 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %221, align 8
  %223 = add nsw i32 %216, 1
  store i32 %223, i32* %215, align 4
  %224 = sext i32 %216 to i64
  %225 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %222, i64 %224, i32 0
  store %"class.v8::internal::RegExpNode"* %210, %"class.v8::internal::RegExpNode"** %225, align 8
  %226 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %222, i64 %224, i32 1
  br label %262

227:                                              ; preds = %204
  %228 = shl nsw i32 %218, 1
  %229 = or i32 %228, 1
  %230 = sext i32 %229 to i64
  %231 = shl nsw i64 %230, 4
  %232 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %214, i64 0, i32 2
  %233 = load i64, i64* %232, align 8
  %234 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %214, i64 0, i32 3
  %235 = load i64, i64* %234, align 8
  %236 = sub i64 %235, %233
  %237 = icmp ugt i64 %231, %236
  br i1 %237, label %238, label %240, !prof !2

238:                                              ; preds = %227
  %239 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %214, i64 %231) #12
  br label %242

240:                                              ; preds = %227
  %241 = add i64 %233, %231
  store i64 %241, i64* %232, align 8
  br label %242

242:                                              ; preds = %240, %238
  %243 = phi i64 [ %239, %238 ], [ %233, %240 ]
  %244 = inttoptr i64 %243 to %"class.v8::internal::GuardedAlternative"*
  %245 = load i32, i32* %215, align 4
  %246 = icmp sgt i32 %245, 0
  br i1 %246, label %247, label %255

247:                                              ; preds = %242
  %248 = inttoptr i64 %243 to i8*
  %249 = bitcast %"class.v8::internal::ZoneList.555"* %212 to i8**
  %250 = load i8*, i8** %249, align 8
  %251 = icmp eq i32 %245, 1
  %252 = sext i32 %245 to i64
  %253 = shl nsw i64 %252, 4
  %254 = select i1 %251, i64 16, i64 %253
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %248, i8* align 1 %250, i64 %254, i1 false) #12
  br label %255

255:                                              ; preds = %247, %242
  %256 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %212, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %244, %"class.v8::internal::GuardedAlternative"** %256, align 8
  store i32 %229, i32* %217, align 8
  %257 = load i32, i32* %215, align 4
  %258 = add nsw i32 %257, 1
  store i32 %258, i32* %215, align 4
  %259 = sext i32 %257 to i64
  %260 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %244, i64 %259, i32 0
  store %"class.v8::internal::RegExpNode"* %210, %"class.v8::internal::RegExpNode"** %260, align 8
  %261 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %244, i64 %259, i32 1
  br label %262

262:                                              ; preds = %255, %220
  %263 = phi %"class.v8::internal::ZoneList.556"** [ %226, %220 ], [ %261, %255 ]
  store %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::ZoneList.556"** %263, align 8
  br label %264

264:                                              ; preds = %262, %198
  %265 = load i32, i32* %55, align 8
  %266 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  %267 = call fastcc %"class.v8::internal::ZoneList.553"* @_ZN2v88internal12_GLOBAL__N_119ToCanonicalZoneListEPKNS_4base11SmallVectorINS0_14CharacterRangeELm8EEEPNS0_4ZoneE(%"class.v8::base::SmallVector"* %175, %"class.v8::internal::Zone"* %266) #12
  %268 = icmp eq %"class.v8::internal::ZoneList.553"* %267, null
  br i1 %268, label %560, label %269

269:                                              ; preds = %264
  %270 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  call void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.553"* nonnull %267) #12
  %271 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %267, i64 0, i32 2
  %272 = load i32, i32* %271, align 4
  %273 = icmp sgt i32 %272, 0
  br i1 %273, label %274, label %560

274:                                              ; preds = %269
  %275 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %267, i64 0, i32 0
  %276 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 11
  %277 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %149, i64 0, i32 1
  %278 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %149, i64 0, i32 0, i32 8
  br label %279

279:                                              ; preds = %555, %274
  %280 = phi i64 [ 0, %274 ], [ %556, %555 ]
  %281 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %275, align 8
  %282 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %281, i64 %280, i32 0
  %283 = bitcast i32* %282 to <2 x i32>*
  %284 = load <2 x i32>, <2 x i32>* %283, align 4
  %285 = extractelement <2 x i32> %284, i32 0
  %286 = trunc i32 %285 to i16
  %287 = and i16 %286, 1023
  %288 = or i16 %287, -9216
  %289 = add <2 x i32> %284, <i32 983040, i32 983040>
  %290 = lshr <2 x i32> %289, <i32 10, i32 10>
  %291 = trunc <2 x i32> %290 to <2 x i16>
  %292 = and <2 x i16> %291, <i16 1023, i16 1023>
  %293 = or <2 x i16> %292, <i16 -10240, i16 -10240>
  %294 = extractelement <2 x i32> %284, i32 1
  %295 = trunc i32 %294 to i16
  %296 = and i16 %295, 1023
  %297 = or i16 %296, -9216
  %298 = extractelement <2 x i16> %293, i32 0
  %299 = extractelement <2 x i16> %293, i32 1
  %300 = icmp eq i16 %298, %299
  br i1 %300, label %301, label %362

301:                                              ; preds = %279
  %302 = zext i16 %298 to i64
  %303 = shl nuw nsw i64 %302, 32
  %304 = or i64 %303, %302
  %305 = zext i16 %297 to i64
  %306 = shl nuw nsw i64 %305, 32
  %307 = zext i16 %288 to i64
  %308 = or i64 %306, %307
  %309 = load i8, i8* %276, align 4, !range !3
  %310 = icmp ne i8 %309, 0
  %311 = call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode22CreateForSurrogatePairEPNS0_4ZoneENS0_14CharacterRangeES4_bPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %270, i64 %304, i64 %308, i1 zeroext %310, %"class.v8::internal::RegExpNode"* %2, i32 %265) #12
  %312 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %311, i64 0, i32 0, i32 0
  %313 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %277, align 8
  %314 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %278, align 8
  %315 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %313, i64 0, i32 2
  %316 = load i32, i32* %315, align 4
  %317 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %313, i64 0, i32 1
  %318 = load i32, i32* %317, align 8
  %319 = icmp slt i32 %316, %318
  br i1 %319, label %320, label %327

320:                                              ; preds = %301
  %321 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %313, i64 0, i32 0
  %322 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %321, align 8
  %323 = add nsw i32 %316, 1
  store i32 %323, i32* %315, align 4
  %324 = sext i32 %316 to i64
  %325 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %322, i64 %324, i32 0
  store %"class.v8::internal::RegExpNode"* %312, %"class.v8::internal::RegExpNode"** %325, align 8
  %326 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %322, i64 %324, i32 1
  br label %553

327:                                              ; preds = %301
  %328 = shl nsw i32 %318, 1
  %329 = or i32 %328, 1
  %330 = sext i32 %329 to i64
  %331 = shl nsw i64 %330, 4
  %332 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %314, i64 0, i32 2
  %333 = load i64, i64* %332, align 8
  %334 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %314, i64 0, i32 3
  %335 = load i64, i64* %334, align 8
  %336 = sub i64 %335, %333
  %337 = icmp ugt i64 %331, %336
  br i1 %337, label %338, label %340, !prof !2

338:                                              ; preds = %327
  %339 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %314, i64 %331) #12
  br label %342

340:                                              ; preds = %327
  %341 = add i64 %333, %331
  store i64 %341, i64* %332, align 8
  br label %342

342:                                              ; preds = %340, %338
  %343 = phi i64 [ %339, %338 ], [ %333, %340 ]
  %344 = inttoptr i64 %343 to %"class.v8::internal::GuardedAlternative"*
  %345 = load i32, i32* %315, align 4
  %346 = icmp sgt i32 %345, 0
  br i1 %346, label %347, label %355

347:                                              ; preds = %342
  %348 = inttoptr i64 %343 to i8*
  %349 = bitcast %"class.v8::internal::ZoneList.555"* %313 to i8**
  %350 = load i8*, i8** %349, align 8
  %351 = icmp eq i32 %345, 1
  %352 = sext i32 %345 to i64
  %353 = shl nsw i64 %352, 4
  %354 = select i1 %351, i64 16, i64 %353
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %348, i8* align 1 %350, i64 %354, i1 false) #12
  br label %355

355:                                              ; preds = %347, %342
  %356 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %313, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %344, %"class.v8::internal::GuardedAlternative"** %356, align 8
  store i32 %329, i32* %317, align 8
  %357 = load i32, i32* %315, align 4
  %358 = add nsw i32 %357, 1
  store i32 %358, i32* %315, align 4
  %359 = sext i32 %357 to i64
  %360 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %344, i64 %359, i32 0
  store %"class.v8::internal::RegExpNode"* %312, %"class.v8::internal::RegExpNode"** %360, align 8
  %361 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %344, i64 %359, i32 1
  br label %553

362:                                              ; preds = %279
  %363 = icmp eq i16 %288, -9216
  br i1 %363, label %426, label %364

364:                                              ; preds = %362
  %365 = zext i16 %298 to i64
  %366 = shl nuw nsw i64 %365, 32
  %367 = or i64 %366, %365
  %368 = zext i16 %288 to i64
  %369 = or i64 %368, 246286309654528
  %370 = load i8, i8* %276, align 4, !range !3
  %371 = icmp ne i8 %370, 0
  %372 = call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode22CreateForSurrogatePairEPNS0_4ZoneENS0_14CharacterRangeES4_bPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %270, i64 %367, i64 %369, i1 zeroext %371, %"class.v8::internal::RegExpNode"* %2, i32 %265) #12
  %373 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %372, i64 0, i32 0, i32 0
  %374 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %277, align 8
  %375 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %278, align 8
  %376 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %374, i64 0, i32 2
  %377 = load i32, i32* %376, align 4
  %378 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %374, i64 0, i32 1
  %379 = load i32, i32* %378, align 8
  %380 = icmp slt i32 %377, %379
  br i1 %380, label %381, label %388

381:                                              ; preds = %364
  %382 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %374, i64 0, i32 0
  %383 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %382, align 8
  %384 = add nsw i32 %377, 1
  store i32 %384, i32* %376, align 4
  %385 = sext i32 %377 to i64
  %386 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %383, i64 %385, i32 0
  store %"class.v8::internal::RegExpNode"* %373, %"class.v8::internal::RegExpNode"** %386, align 8
  %387 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %383, i64 %385, i32 1
  br label %423

388:                                              ; preds = %364
  %389 = shl nsw i32 %379, 1
  %390 = or i32 %389, 1
  %391 = sext i32 %390 to i64
  %392 = shl nsw i64 %391, 4
  %393 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %375, i64 0, i32 2
  %394 = load i64, i64* %393, align 8
  %395 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %375, i64 0, i32 3
  %396 = load i64, i64* %395, align 8
  %397 = sub i64 %396, %394
  %398 = icmp ugt i64 %392, %397
  br i1 %398, label %399, label %401, !prof !2

399:                                              ; preds = %388
  %400 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %375, i64 %392) #12
  br label %403

401:                                              ; preds = %388
  %402 = add i64 %394, %392
  store i64 %402, i64* %393, align 8
  br label %403

403:                                              ; preds = %401, %399
  %404 = phi i64 [ %400, %399 ], [ %394, %401 ]
  %405 = inttoptr i64 %404 to %"class.v8::internal::GuardedAlternative"*
  %406 = load i32, i32* %376, align 4
  %407 = icmp sgt i32 %406, 0
  br i1 %407, label %408, label %416

408:                                              ; preds = %403
  %409 = inttoptr i64 %404 to i8*
  %410 = bitcast %"class.v8::internal::ZoneList.555"* %374 to i8**
  %411 = load i8*, i8** %410, align 8
  %412 = icmp eq i32 %406, 1
  %413 = sext i32 %406 to i64
  %414 = shl nsw i64 %413, 4
  %415 = select i1 %412, i64 16, i64 %414
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %409, i8* align 1 %411, i64 %415, i1 false) #12
  br label %416

416:                                              ; preds = %408, %403
  %417 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %374, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %405, %"class.v8::internal::GuardedAlternative"** %417, align 8
  store i32 %390, i32* %378, align 8
  %418 = load i32, i32* %376, align 4
  %419 = add nsw i32 %418, 1
  store i32 %419, i32* %376, align 4
  %420 = sext i32 %418 to i64
  %421 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %405, i64 %420, i32 0
  store %"class.v8::internal::RegExpNode"* %373, %"class.v8::internal::RegExpNode"** %421, align 8
  %422 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %405, i64 %420, i32 1
  br label %423

423:                                              ; preds = %416, %381
  %424 = phi %"class.v8::internal::ZoneList.556"** [ %422, %416 ], [ %387, %381 ]
  store %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::ZoneList.556"** %424, align 8
  %425 = add nuw nsw i16 %298, 1
  br label %426

426:                                              ; preds = %423, %362
  %427 = phi i16 [ %425, %423 ], [ %298, %362 ]
  %428 = icmp eq i16 %297, -8193
  br i1 %428, label %492, label %429

429:                                              ; preds = %426
  %430 = zext i16 %299 to i64
  %431 = shl nuw nsw i64 %430, 32
  %432 = or i64 %431, %430
  %433 = zext i16 %297 to i64
  %434 = shl nuw nsw i64 %433, 32
  %435 = or i64 %434, 56320
  %436 = load i8, i8* %276, align 4, !range !3
  %437 = icmp ne i8 %436, 0
  %438 = call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode22CreateForSurrogatePairEPNS0_4ZoneENS0_14CharacterRangeES4_bPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %270, i64 %432, i64 %435, i1 zeroext %437, %"class.v8::internal::RegExpNode"* %2, i32 %265) #12
  %439 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %438, i64 0, i32 0, i32 0
  %440 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %277, align 8
  %441 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %278, align 8
  %442 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %440, i64 0, i32 2
  %443 = load i32, i32* %442, align 4
  %444 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %440, i64 0, i32 1
  %445 = load i32, i32* %444, align 8
  %446 = icmp slt i32 %443, %445
  br i1 %446, label %447, label %454

447:                                              ; preds = %429
  %448 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %440, i64 0, i32 0
  %449 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %448, align 8
  %450 = add nsw i32 %443, 1
  store i32 %450, i32* %442, align 4
  %451 = sext i32 %443 to i64
  %452 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %449, i64 %451, i32 0
  store %"class.v8::internal::RegExpNode"* %439, %"class.v8::internal::RegExpNode"** %452, align 8
  %453 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %449, i64 %451, i32 1
  br label %489

454:                                              ; preds = %429
  %455 = shl nsw i32 %445, 1
  %456 = or i32 %455, 1
  %457 = sext i32 %456 to i64
  %458 = shl nsw i64 %457, 4
  %459 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %441, i64 0, i32 2
  %460 = load i64, i64* %459, align 8
  %461 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %441, i64 0, i32 3
  %462 = load i64, i64* %461, align 8
  %463 = sub i64 %462, %460
  %464 = icmp ugt i64 %458, %463
  br i1 %464, label %465, label %467, !prof !2

465:                                              ; preds = %454
  %466 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %441, i64 %458) #12
  br label %469

467:                                              ; preds = %454
  %468 = add i64 %460, %458
  store i64 %468, i64* %459, align 8
  br label %469

469:                                              ; preds = %467, %465
  %470 = phi i64 [ %466, %465 ], [ %460, %467 ]
  %471 = inttoptr i64 %470 to %"class.v8::internal::GuardedAlternative"*
  %472 = load i32, i32* %442, align 4
  %473 = icmp sgt i32 %472, 0
  br i1 %473, label %474, label %482

474:                                              ; preds = %469
  %475 = inttoptr i64 %470 to i8*
  %476 = bitcast %"class.v8::internal::ZoneList.555"* %440 to i8**
  %477 = load i8*, i8** %476, align 8
  %478 = icmp eq i32 %472, 1
  %479 = sext i32 %472 to i64
  %480 = shl nsw i64 %479, 4
  %481 = select i1 %478, i64 16, i64 %480
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %475, i8* align 1 %477, i64 %481, i1 false) #12
  br label %482

482:                                              ; preds = %474, %469
  %483 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %440, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %471, %"class.v8::internal::GuardedAlternative"** %483, align 8
  store i32 %456, i32* %444, align 8
  %484 = load i32, i32* %442, align 4
  %485 = add nsw i32 %484, 1
  store i32 %485, i32* %442, align 4
  %486 = sext i32 %484 to i64
  %487 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %471, i64 %486, i32 0
  store %"class.v8::internal::RegExpNode"* %439, %"class.v8::internal::RegExpNode"** %487, align 8
  %488 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %471, i64 %486, i32 1
  br label %489

489:                                              ; preds = %482, %447
  %490 = phi %"class.v8::internal::ZoneList.556"** [ %488, %482 ], [ %453, %447 ]
  store %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::ZoneList.556"** %490, align 8
  %491 = add nsw i16 %299, -1
  br label %492

492:                                              ; preds = %489, %426
  %493 = phi i16 [ %491, %489 ], [ %299, %426 ]
  %494 = icmp ugt i16 %427, %493
  br i1 %494, label %555, label %495

495:                                              ; preds = %492
  %496 = zext i16 %493 to i64
  %497 = shl nuw nsw i64 %496, 32
  %498 = zext i16 %427 to i64
  %499 = or i64 %497, %498
  %500 = load i8, i8* %276, align 4, !range !3
  %501 = icmp ne i8 %500, 0
  %502 = call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode22CreateForSurrogatePairEPNS0_4ZoneENS0_14CharacterRangeES4_bPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %270, i64 %499, i64 246286309710848, i1 zeroext %501, %"class.v8::internal::RegExpNode"* %2, i32 %265) #12
  %503 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %502, i64 0, i32 0, i32 0
  %504 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %277, align 8
  %505 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %278, align 8
  %506 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %504, i64 0, i32 2
  %507 = load i32, i32* %506, align 4
  %508 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %504, i64 0, i32 1
  %509 = load i32, i32* %508, align 8
  %510 = icmp slt i32 %507, %509
  br i1 %510, label %511, label %518

511:                                              ; preds = %495
  %512 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %504, i64 0, i32 0
  %513 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %512, align 8
  %514 = add nsw i32 %507, 1
  store i32 %514, i32* %506, align 4
  %515 = sext i32 %507 to i64
  %516 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %513, i64 %515, i32 0
  store %"class.v8::internal::RegExpNode"* %503, %"class.v8::internal::RegExpNode"** %516, align 8
  %517 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %513, i64 %515, i32 1
  br label %553

518:                                              ; preds = %495
  %519 = shl nsw i32 %509, 1
  %520 = or i32 %519, 1
  %521 = sext i32 %520 to i64
  %522 = shl nsw i64 %521, 4
  %523 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %505, i64 0, i32 2
  %524 = load i64, i64* %523, align 8
  %525 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %505, i64 0, i32 3
  %526 = load i64, i64* %525, align 8
  %527 = sub i64 %526, %524
  %528 = icmp ugt i64 %522, %527
  br i1 %528, label %529, label %531, !prof !2

529:                                              ; preds = %518
  %530 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %505, i64 %522) #12
  br label %533

531:                                              ; preds = %518
  %532 = add i64 %524, %522
  store i64 %532, i64* %523, align 8
  br label %533

533:                                              ; preds = %531, %529
  %534 = phi i64 [ %530, %529 ], [ %524, %531 ]
  %535 = inttoptr i64 %534 to %"class.v8::internal::GuardedAlternative"*
  %536 = load i32, i32* %506, align 4
  %537 = icmp sgt i32 %536, 0
  br i1 %537, label %538, label %546

538:                                              ; preds = %533
  %539 = inttoptr i64 %534 to i8*
  %540 = bitcast %"class.v8::internal::ZoneList.555"* %504 to i8**
  %541 = load i8*, i8** %540, align 8
  %542 = icmp eq i32 %536, 1
  %543 = sext i32 %536 to i64
  %544 = shl nsw i64 %543, 4
  %545 = select i1 %542, i64 16, i64 %544
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %539, i8* align 1 %541, i64 %545, i1 false) #12
  br label %546

546:                                              ; preds = %538, %533
  %547 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %504, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %535, %"class.v8::internal::GuardedAlternative"** %547, align 8
  store i32 %520, i32* %508, align 8
  %548 = load i32, i32* %506, align 4
  %549 = add nsw i32 %548, 1
  store i32 %549, i32* %506, align 4
  %550 = sext i32 %548 to i64
  %551 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %535, i64 %550, i32 0
  store %"class.v8::internal::RegExpNode"* %503, %"class.v8::internal::RegExpNode"** %551, align 8
  %552 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %535, i64 %550, i32 1
  br label %553

553:                                              ; preds = %320, %355, %511, %546
  %554 = phi %"class.v8::internal::ZoneList.556"** [ %552, %546 ], [ %517, %511 ], [ %361, %355 ], [ %326, %320 ]
  store %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::ZoneList.556"** %554, align 8
  br label %555

555:                                              ; preds = %553, %492
  %556 = add nuw nsw i64 %280, 1
  %557 = load i32, i32* %271, align 4
  %558 = sext i32 %557 to i64
  %559 = icmp slt i64 %556, %558
  br i1 %559, label %279, label %560

560:                                              ; preds = %555, %264, %269
  %561 = load i32, i32* %55, align 8
  %562 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  %563 = call fastcc %"class.v8::internal::ZoneList.553"* @_ZN2v88internal12_GLOBAL__N_119ToCanonicalZoneListEPKNS_4base11SmallVectorINS0_14CharacterRangeELm8EEEPNS0_4ZoneE(%"class.v8::base::SmallVector"* %159, %"class.v8::internal::Zone"* %562) #12
  %564 = icmp eq %"class.v8::internal::ZoneList.553"* %563, null
  br i1 %564, label %630, label %565

565:                                              ; preds = %560
  %566 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  %567 = call %"class.v8::internal::ZoneList.553"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %566, i64 246286309710848) #12
  %568 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 11
  %569 = load i8, i8* %568, align 4, !range !3
  %570 = icmp eq i8 %569, 0
  br i1 %570, label %573, label %571

571:                                              ; preds = %565
  %572 = call fastcc %"class.v8::internal::RegExpNode"* @_ZN2v88internal12_GLOBAL__N_146NegativeLookaroundAgainstReadDirectionAndMatchEPNS0_14RegExpCompilerEPNS0_8ZoneListINS0_14CharacterRangeEEES7_PNS0_10RegExpNodeEbNS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::ZoneList.553"* %567, %"class.v8::internal::ZoneList.553"* nonnull %563, %"class.v8::internal::RegExpNode"* %2, i1 zeroext true, i32 %561) #12
  br label %575

573:                                              ; preds = %565
  %574 = call fastcc %"class.v8::internal::RegExpNode"* @_ZN2v88internal12_GLOBAL__N_141MatchAndNegativeLookaroundInReadDirectionEPNS0_14RegExpCompilerEPNS0_8ZoneListINS0_14CharacterRangeEEES7_PNS0_10RegExpNodeEbNS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::ZoneList.553"* nonnull %563, %"class.v8::internal::ZoneList.553"* %567, %"class.v8::internal::RegExpNode"* %2, i1 zeroext false, i32 %561) #12
  br label %575

575:                                              ; preds = %573, %571
  %576 = phi %"class.v8::internal::RegExpNode"* [ %572, %571 ], [ %574, %573 ]
  %577 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %149, i64 0, i32 1
  %578 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %577, align 8
  %579 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %149, i64 0, i32 0, i32 8
  %580 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %579, align 8
  %581 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %578, i64 0, i32 2
  %582 = load i32, i32* %581, align 4
  %583 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %578, i64 0, i32 1
  %584 = load i32, i32* %583, align 8
  %585 = icmp slt i32 %582, %584
  br i1 %585, label %586, label %593

586:                                              ; preds = %575
  %587 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %578, i64 0, i32 0
  %588 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %587, align 8
  %589 = add nsw i32 %582, 1
  store i32 %589, i32* %581, align 4
  %590 = sext i32 %582 to i64
  %591 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %588, i64 %590, i32 0
  store %"class.v8::internal::RegExpNode"* %576, %"class.v8::internal::RegExpNode"** %591, align 8
  %592 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %588, i64 %590, i32 1
  br label %628

593:                                              ; preds = %575
  %594 = shl nsw i32 %584, 1
  %595 = or i32 %594, 1
  %596 = sext i32 %595 to i64
  %597 = shl nsw i64 %596, 4
  %598 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %580, i64 0, i32 2
  %599 = load i64, i64* %598, align 8
  %600 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %580, i64 0, i32 3
  %601 = load i64, i64* %600, align 8
  %602 = sub i64 %601, %599
  %603 = icmp ugt i64 %597, %602
  br i1 %603, label %604, label %606, !prof !2

604:                                              ; preds = %593
  %605 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %580, i64 %597) #12
  br label %608

606:                                              ; preds = %593
  %607 = add i64 %599, %597
  store i64 %607, i64* %598, align 8
  br label %608

608:                                              ; preds = %606, %604
  %609 = phi i64 [ %605, %604 ], [ %599, %606 ]
  %610 = inttoptr i64 %609 to %"class.v8::internal::GuardedAlternative"*
  %611 = load i32, i32* %581, align 4
  %612 = icmp sgt i32 %611, 0
  br i1 %612, label %613, label %621

613:                                              ; preds = %608
  %614 = inttoptr i64 %609 to i8*
  %615 = bitcast %"class.v8::internal::ZoneList.555"* %578 to i8**
  %616 = load i8*, i8** %615, align 8
  %617 = icmp eq i32 %611, 1
  %618 = sext i32 %611 to i64
  %619 = shl nsw i64 %618, 4
  %620 = select i1 %617, i64 16, i64 %619
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %614, i8* align 1 %616, i64 %620, i1 false) #12
  br label %621

621:                                              ; preds = %613, %608
  %622 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %578, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %610, %"class.v8::internal::GuardedAlternative"** %622, align 8
  store i32 %595, i32* %583, align 8
  %623 = load i32, i32* %581, align 4
  %624 = add nsw i32 %623, 1
  store i32 %624, i32* %581, align 4
  %625 = sext i32 %623 to i64
  %626 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %610, i64 %625, i32 0
  store %"class.v8::internal::RegExpNode"* %576, %"class.v8::internal::RegExpNode"** %626, align 8
  %627 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %610, i64 %625, i32 1
  br label %628

628:                                              ; preds = %621, %586
  %629 = phi %"class.v8::internal::ZoneList.556"** [ %592, %586 ], [ %627, %621 ]
  store %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::ZoneList.556"** %629, align 8
  br label %630

630:                                              ; preds = %628, %560
  %631 = load i32, i32* %55, align 8
  %632 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  %633 = call fastcc %"class.v8::internal::ZoneList.553"* @_ZN2v88internal12_GLOBAL__N_119ToCanonicalZoneListEPKNS_4base11SmallVectorINS0_14CharacterRangeELm8EEEPNS0_4ZoneE(%"class.v8::base::SmallVector"* %167, %"class.v8::internal::Zone"* %632) #12
  %634 = icmp eq %"class.v8::internal::ZoneList.553"* %633, null
  br i1 %634, label %700, label %635

635:                                              ; preds = %630
  %636 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  %637 = call %"class.v8::internal::ZoneList.553"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %636, i64 241888263198720) #12
  %638 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 11
  %639 = load i8, i8* %638, align 4, !range !3
  %640 = icmp eq i8 %639, 0
  br i1 %640, label %643, label %641

641:                                              ; preds = %635
  %642 = call fastcc %"class.v8::internal::RegExpNode"* @_ZN2v88internal12_GLOBAL__N_141MatchAndNegativeLookaroundInReadDirectionEPNS0_14RegExpCompilerEPNS0_8ZoneListINS0_14CharacterRangeEEES7_PNS0_10RegExpNodeEbNS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::ZoneList.553"* nonnull %633, %"class.v8::internal::ZoneList.553"* %637, %"class.v8::internal::RegExpNode"* %2, i1 zeroext true, i32 %631) #12
  br label %645

643:                                              ; preds = %635
  %644 = call fastcc %"class.v8::internal::RegExpNode"* @_ZN2v88internal12_GLOBAL__N_146NegativeLookaroundAgainstReadDirectionAndMatchEPNS0_14RegExpCompilerEPNS0_8ZoneListINS0_14CharacterRangeEEES7_PNS0_10RegExpNodeEbNS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::ZoneList.553"* %637, %"class.v8::internal::ZoneList.553"* nonnull %633, %"class.v8::internal::RegExpNode"* %2, i1 zeroext false, i32 %631) #12
  br label %645

645:                                              ; preds = %643, %641
  %646 = phi %"class.v8::internal::RegExpNode"* [ %642, %641 ], [ %644, %643 ]
  %647 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %149, i64 0, i32 1
  %648 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %647, align 8
  %649 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %149, i64 0, i32 0, i32 8
  %650 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %649, align 8
  %651 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %648, i64 0, i32 2
  %652 = load i32, i32* %651, align 4
  %653 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %648, i64 0, i32 1
  %654 = load i32, i32* %653, align 8
  %655 = icmp slt i32 %652, %654
  br i1 %655, label %656, label %663

656:                                              ; preds = %645
  %657 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %648, i64 0, i32 0
  %658 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %657, align 8
  %659 = add nsw i32 %652, 1
  store i32 %659, i32* %651, align 4
  %660 = sext i32 %652 to i64
  %661 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %658, i64 %660, i32 0
  store %"class.v8::internal::RegExpNode"* %646, %"class.v8::internal::RegExpNode"** %661, align 8
  %662 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %658, i64 %660, i32 1
  br label %698

663:                                              ; preds = %645
  %664 = shl nsw i32 %654, 1
  %665 = or i32 %664, 1
  %666 = sext i32 %665 to i64
  %667 = shl nsw i64 %666, 4
  %668 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %650, i64 0, i32 2
  %669 = load i64, i64* %668, align 8
  %670 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %650, i64 0, i32 3
  %671 = load i64, i64* %670, align 8
  %672 = sub i64 %671, %669
  %673 = icmp ugt i64 %667, %672
  br i1 %673, label %674, label %676, !prof !2

674:                                              ; preds = %663
  %675 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %650, i64 %667) #12
  br label %678

676:                                              ; preds = %663
  %677 = add i64 %669, %667
  store i64 %677, i64* %668, align 8
  br label %678

678:                                              ; preds = %676, %674
  %679 = phi i64 [ %675, %674 ], [ %669, %676 ]
  %680 = inttoptr i64 %679 to %"class.v8::internal::GuardedAlternative"*
  %681 = load i32, i32* %651, align 4
  %682 = icmp sgt i32 %681, 0
  br i1 %682, label %683, label %691

683:                                              ; preds = %678
  %684 = inttoptr i64 %679 to i8*
  %685 = bitcast %"class.v8::internal::ZoneList.555"* %648 to i8**
  %686 = load i8*, i8** %685, align 8
  %687 = icmp eq i32 %681, 1
  %688 = sext i32 %681 to i64
  %689 = shl nsw i64 %688, 4
  %690 = select i1 %687, i64 16, i64 %689
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %684, i8* align 1 %686, i64 %690, i1 false) #12
  br label %691

691:                                              ; preds = %683, %678
  %692 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %648, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %680, %"class.v8::internal::GuardedAlternative"** %692, align 8
  store i32 %665, i32* %653, align 8
  %693 = load i32, i32* %651, align 4
  %694 = add nsw i32 %693, 1
  store i32 %694, i32* %651, align 4
  %695 = sext i32 %693 to i64
  %696 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %680, i64 %695, i32 0
  store %"class.v8::internal::RegExpNode"* %646, %"class.v8::internal::RegExpNode"** %696, align 8
  %697 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %680, i64 %695, i32 1
  br label %698

698:                                              ; preds = %691, %656
  %699 = phi %"class.v8::internal::ZoneList.556"** [ %662, %656 ], [ %697, %691 ]
  store %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::ZoneList.556"** %699, align 8
  br label %700

700:                                              ; preds = %698, %630
  %701 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %5, align 8
  %702 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %701, i64 0, i32 2
  %703 = load i32, i32* %702, align 4
  %704 = icmp sgt i32 %703, 32
  br i1 %704, label %705, label %707

705:                                              ; preds = %700
  %706 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %149, i64 0, i32 0, i32 6
  store i32 10, i32* %706, align 4
  br label %707

707:                                              ; preds = %705, %700
  %708 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %149, i64 0, i32 0
  %709 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 3, i32 0
  %710 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %709, align 8
  %711 = bitcast %"struct.std::__1::aligned_storage<64, 4>::type"* %176 to %"class.v8::internal::CharacterRange"*
  %712 = icmp eq %"class.v8::internal::CharacterRange"* %710, %711
  br i1 %712, label %715, label %713

713:                                              ; preds = %707
  %714 = bitcast %"class.v8::internal::CharacterRange"* %710 to i8*
  call void @free(i8* %714) #12
  br label %715

715:                                              ; preds = %713, %707
  %716 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 2, i32 0
  %717 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %716, align 8
  %718 = bitcast %"struct.std::__1::aligned_storage<64, 4>::type"* %168 to %"class.v8::internal::CharacterRange"*
  %719 = icmp eq %"class.v8::internal::CharacterRange"* %717, %718
  br i1 %719, label %722, label %720

720:                                              ; preds = %715
  %721 = bitcast %"class.v8::internal::CharacterRange"* %717 to i8*
  call void @free(i8* %721) #12
  br label %722

722:                                              ; preds = %720, %715
  %723 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 1, i32 0
  %724 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %723, align 8
  %725 = bitcast %"struct.std::__1::aligned_storage<64, 4>::type"* %160 to %"class.v8::internal::CharacterRange"*
  %726 = icmp eq %"class.v8::internal::CharacterRange"* %724, %725
  br i1 %726, label %729, label %727

727:                                              ; preds = %722
  %728 = bitcast %"class.v8::internal::CharacterRange"* %724 to i8*
  call void @free(i8* %728) #12
  br label %729

729:                                              ; preds = %727, %722
  %730 = getelementptr inbounds %"class.v8::internal::UnicodeRangeSplitter", %"class.v8::internal::UnicodeRangeSplitter"* %8, i64 0, i32 0, i32 0
  %731 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %730, align 8
  %732 = bitcast %"struct.std::__1::aligned_storage<64, 4>::type"* %152 to %"class.v8::internal::CharacterRange"*
  %733 = icmp eq %"class.v8::internal::CharacterRange"* %731, %732
  br i1 %733, label %736, label %734

734:                                              ; preds = %729
  %735 = bitcast %"class.v8::internal::CharacterRange"* %731 to i8*
  call void @free(i8* %735) #12
  br label %736

736:                                              ; preds = %729, %734
  call void @llvm.lifetime.end.p0i8(i64 352, i8* nonnull %150) #12
  br label %756

737:                                              ; preds = %70, %66, %62
  %738 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %739 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 11
  %740 = load i8, i8* %739, align 4, !range !3
  %741 = icmp ne i8 %740, 0
  %742 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %738, i64 0, i32 2
  %743 = load i64, i64* %742, align 8
  %744 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %738, i64 0, i32 3
  %745 = load i64, i64* %744, align 8
  %746 = sub i64 %745, %743
  %747 = icmp ult i64 %746, 80
  br i1 %747, label %748, label %750, !prof !2

748:                                              ; preds = %737
  %749 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %738, i64 80) #12
  br label %752

750:                                              ; preds = %737
  %751 = add i64 %743, 80
  store i64 %751, i64* %742, align 8
  br label %752

752:                                              ; preds = %748, %750
  %753 = phi i64 [ %749, %748 ], [ %743, %750 ]
  %754 = inttoptr i64 %753 to %"class.v8::internal::TextNode"*
  tail call void @_ZN2v88internal8TextNodeC2EPNS0_20RegExpCharacterClassEbPNS0_10RegExpNodeE(%"class.v8::internal::TextNode"* %754, %"class.v8::internal::RegExpCharacterClass"* %0, i1 zeroext %741, %"class.v8::internal::RegExpNode"* %2) #12
  %755 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %754, i64 0, i32 0, i32 0
  br label %756

756:                                              ; preds = %752, %736, %141, %133
  %757 = phi %"class.v8::internal::RegExpNode"* [ %755, %752 ], [ %136, %133 ], [ %145, %141 ], [ %708, %736 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #12
  ret %"class.v8::internal::RegExpNode"* %757
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal12CharacterSet12CanonicalizeEv(%"class.v8::internal::CharacterSet"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::CharacterSet", %"class.v8::internal::CharacterSet"* %0, i64 0, i32 0
  %3 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %2, align 8
  %4 = icmp eq %"class.v8::internal::ZoneList.553"* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.553"* nonnull %3)
  br label %6

6:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2v88internal12_GLOBAL__N_125AddUnicodeCaseEquivalentsEPNS0_8ZoneListINS0_14CharacterRangeEEEPNS0_4ZoneE(%"class.v8::internal::ZoneList.553"* nocapture, %"class.v8::internal::Zone"*) unnamed_addr #0 {
  %3 = alloca %"class.icu_69::UnicodeSet", align 8
  %4 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %7, label %17

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %0, i64 0, i32 0
  %9 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %9, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %9, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp ugt i32 %15, 1114110
  br i1 %16, label %101, label %17

17:                                               ; preds = %7, %13, %2
  %18 = bitcast %"class.icu_69::UnicodeSet"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %18) #12
  call void @_ZN6icu_6910UnicodeSetC1Ev(%"class.icu_69::UnicodeSet"* nonnull %3) #12
  %19 = load i32, i32* %4, align 4
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %0, i64 0, i32 0
  br label %34

23:                                               ; preds = %34, %17
  store i32 0, i32* %4, align 4
  %24 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet9closeOverEi(%"class.icu_69::UnicodeSet"* nonnull %3, i32 2) #12
  %25 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet16removeAllStringsEv(%"class.icu_69::UnicodeSet"* nonnull %3) #12
  %26 = call i32 @_ZNK6icu_6910UnicodeSet13getRangeCountEv(%"class.icu_69::UnicodeSet"* nonnull %3) #12
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %46

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %0, i64 0, i32 1
  %30 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 2
  %31 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 3
  %32 = bitcast %"class.v8::internal::ZoneList.553"* %0 to i8**
  %33 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %0, i64 0, i32 0
  br label %47

34:                                               ; preds = %21, %34
  %35 = phi i64 [ 0, %21 ], [ %42, %34 ]
  %36 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %22, align 8
  %37 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %36, i64 %35, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %36, i64 %35, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet3addEii(%"class.icu_69::UnicodeSet"* nonnull %3, i32 %38, i32 %40) #12
  %42 = add nuw nsw i64 %35, 1
  %43 = load i32, i32* %4, align 4
  %44 = sext i32 %43 to i64
  %45 = icmp slt i64 %42, %44
  br i1 %45, label %34, label %23

46:                                               ; preds = %91, %23
  call void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.553"* %0)
  call void @_ZN6icu_6910UnicodeSetD1Ev(%"class.icu_69::UnicodeSet"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %18) #12
  br label %101

47:                                               ; preds = %28, %91
  %48 = phi i32 [ 0, %28 ], [ %98, %91 ]
  %49 = call i32 @_ZNK6icu_6910UnicodeSet13getRangeStartEi(%"class.icu_69::UnicodeSet"* nonnull %3, i32 %48) #12
  %50 = call i32 @_ZNK6icu_6910UnicodeSet11getRangeEndEi(%"class.icu_69::UnicodeSet"* nonnull %3, i32 %48) #12
  %51 = zext i32 %50 to i64
  %52 = shl nuw i64 %51, 32
  %53 = zext i32 %49 to i64
  %54 = or i64 %52, %53
  %55 = load i32, i32* %4, align 4
  %56 = load i32, i32* %29, align 8
  %57 = icmp slt i32 %55, %56
  br i1 %57, label %58, label %60

58:                                               ; preds = %47
  %59 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %33, align 8
  br label %91

60:                                               ; preds = %47
  %61 = shl nsw i32 %56, 1
  %62 = or i32 %61, 1
  %63 = sext i32 %62 to i64
  %64 = shl nsw i64 %63, 3
  %65 = load i64, i64* %30, align 8
  %66 = load i64, i64* %31, align 8
  %67 = sub i64 %66, %65
  %68 = icmp ugt i64 %64, %67
  br i1 %68, label %69, label %71, !prof !2

69:                                               ; preds = %60
  %70 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 %64) #12
  br label %73

71:                                               ; preds = %60
  %72 = add i64 %65, %64
  store i64 %72, i64* %30, align 8
  br label %73

73:                                               ; preds = %71, %69
  %74 = phi i64 [ %70, %69 ], [ %65, %71 ]
  %75 = inttoptr i64 %74 to %"class.v8::internal::CharacterRange"*
  %76 = load i32, i32* %4, align 4
  %77 = icmp sgt i32 %76, 0
  br i1 %77, label %78, label %89

78:                                               ; preds = %73
  %79 = inttoptr i64 %74 to i8*
  %80 = load i8*, i8** %32, align 8
  %81 = sext i32 %76 to i64
  %82 = shl nsw i64 %81, 3
  switch i64 %82, label %88 [
    i64 16, label %87
    i64 8, label %83
  ]

83:                                               ; preds = %78
  %84 = bitcast i8* %80 to i64*
  %85 = inttoptr i64 %74 to i64*
  %86 = load i64, i64* %84, align 1
  store i64 %86, i64* %85, align 1
  br label %89

87:                                               ; preds = %78
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %79, i8* align 1 %80, i64 16, i1 false) #12
  br label %89

88:                                               ; preds = %78
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %79, i8* align 1 %80, i64 %82, i1 false) #12
  br label %89

89:                                               ; preds = %88, %87, %83, %73
  store %"class.v8::internal::CharacterRange"* %75, %"class.v8::internal::CharacterRange"** %33, align 8
  store i32 %62, i32* %29, align 8
  %90 = load i32, i32* %4, align 4
  br label %91

91:                                               ; preds = %58, %89
  %92 = phi i32 [ %55, %58 ], [ %90, %89 ]
  %93 = phi %"class.v8::internal::CharacterRange"* [ %59, %58 ], [ %75, %89 ]
  %94 = add nsw i32 %92, 1
  store i32 %94, i32* %4, align 4
  %95 = sext i32 %92 to i64
  %96 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %93, i64 %95
  %97 = bitcast %"class.v8::internal::CharacterRange"* %96 to i64*
  store i64 %54, i64* %97, align 4
  %98 = add nuw nsw i32 %48, 1
  %99 = call i32 @_ZNK6icu_6910UnicodeSet13getRangeCountEv(%"class.icu_69::UnicodeSet"* nonnull %3) #12
  %100 = icmp slt i32 %98, %99
  br i1 %100, label %47, label %46

101:                                              ; preds = %13, %46
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal14CharacterRange6NegateEPNS0_8ZoneListIS1_EES4_PNS0_4ZoneE(%"class.v8::internal::ZoneList.553"* nocapture readonly, %"class.v8::internal::ZoneList.553"* nocapture, %"class.v8::internal::Zone"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %17

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %0, i64 0, i32 0
  %9 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %9, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %9, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = add i32 %15, 1
  br label %17

17:                                               ; preds = %13, %7, %3
  %18 = phi i32 [ %16, %13 ], [ 0, %7 ], [ 0, %3 ]
  %19 = phi i32 [ 1, %13 ], [ 0, %7 ], [ 0, %3 ]
  %20 = icmp slt i32 %19, %5
  br i1 %20, label %21, label %90

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %0, i64 0, i32 0
  %23 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 2
  %24 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 1
  %25 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %26 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %27 = bitcast %"class.v8::internal::ZoneList.553"* %1 to i8**
  %28 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  %29 = zext i32 %19 to i64
  %30 = zext i32 %5 to i64
  br label %31

31:                                               ; preds = %80, %21
  %32 = phi i64 [ %29, %21 ], [ %88, %80 ]
  %33 = phi i32 [ %18, %21 ], [ %87, %80 ]
  %34 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %22, align 8
  %35 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %34, i64 %32
  %36 = bitcast %"class.v8::internal::CharacterRange"* %35 to i64*
  %37 = load i64, i64* %36, align 4
  %38 = lshr i64 %37, 32
  %39 = trunc i64 %38 to i32
  %40 = shl i64 %37, 32
  %41 = add i64 %40, -4294967296
  %42 = zext i32 %33 to i64
  %43 = or i64 %41, %42
  %44 = load i32, i32* %23, align 4
  %45 = load i32, i32* %24, align 8
  %46 = icmp slt i32 %44, %45
  br i1 %46, label %47, label %49

47:                                               ; preds = %31
  %48 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %28, align 8
  br label %80

49:                                               ; preds = %31
  %50 = shl nsw i32 %45, 1
  %51 = or i32 %50, 1
  %52 = sext i32 %51 to i64
  %53 = shl nsw i64 %52, 3
  %54 = load i64, i64* %25, align 8
  %55 = load i64, i64* %26, align 8
  %56 = sub i64 %55, %54
  %57 = icmp ugt i64 %53, %56
  br i1 %57, label %58, label %60, !prof !2

58:                                               ; preds = %49
  %59 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %53) #12
  br label %62

60:                                               ; preds = %49
  %61 = add i64 %54, %53
  store i64 %61, i64* %25, align 8
  br label %62

62:                                               ; preds = %60, %58
  %63 = phi i64 [ %59, %58 ], [ %54, %60 ]
  %64 = inttoptr i64 %63 to %"class.v8::internal::CharacterRange"*
  %65 = load i32, i32* %23, align 4
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %67, label %78

67:                                               ; preds = %62
  %68 = inttoptr i64 %63 to i8*
  %69 = load i8*, i8** %27, align 8
  %70 = sext i32 %65 to i64
  %71 = shl nsw i64 %70, 3
  switch i64 %71, label %77 [
    i64 16, label %76
    i64 8, label %72
  ]

72:                                               ; preds = %67
  %73 = bitcast i8* %69 to i64*
  %74 = inttoptr i64 %63 to i64*
  %75 = load i64, i64* %73, align 1
  store i64 %75, i64* %74, align 1
  br label %78

76:                                               ; preds = %67
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %69, i64 16, i1 false) #12
  br label %78

77:                                               ; preds = %67
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %69, i64 %71, i1 false) #12
  br label %78

78:                                               ; preds = %77, %76, %72, %62
  store %"class.v8::internal::CharacterRange"* %64, %"class.v8::internal::CharacterRange"** %28, align 8
  store i32 %51, i32* %24, align 8
  %79 = load i32, i32* %23, align 4
  br label %80

80:                                               ; preds = %47, %78
  %81 = phi i32 [ %44, %47 ], [ %79, %78 ]
  %82 = phi %"class.v8::internal::CharacterRange"* [ %48, %47 ], [ %64, %78 ]
  %83 = add nsw i32 %81, 1
  store i32 %83, i32* %23, align 4
  %84 = sext i32 %81 to i64
  %85 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %82, i64 %84
  %86 = bitcast %"class.v8::internal::CharacterRange"* %85 to i64*
  store i64 %43, i64* %86, align 4
  %87 = add i32 %39, 1
  %88 = add nuw nsw i64 %32, 1
  %89 = icmp eq i64 %88, %30
  br i1 %89, label %90, label %31

90:                                               ; preds = %80, %17
  %91 = phi i32 [ %18, %17 ], [ %87, %80 ]
  %92 = icmp ult i32 %91, 1114111
  br i1 %92, label %93, label %146

93:                                               ; preds = %90
  %94 = zext i32 %91 to i64
  %95 = or i64 %94, 4785070309113856
  %96 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 2
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 1
  %99 = load i32, i32* %98, align 8
  %100 = icmp slt i32 %97, %99
  br i1 %100, label %101, label %104

101:                                              ; preds = %93
  %102 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  %103 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %102, align 8
  br label %139

104:                                              ; preds = %93
  %105 = shl nsw i32 %99, 1
  %106 = or i32 %105, 1
  %107 = sext i32 %106 to i64
  %108 = shl nsw i64 %107, 3
  %109 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %110 = load i64, i64* %109, align 8
  %111 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %112 = load i64, i64* %111, align 8
  %113 = sub i64 %112, %110
  %114 = icmp ugt i64 %108, %113
  br i1 %114, label %115, label %117, !prof !2

115:                                              ; preds = %104
  %116 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %108) #12
  br label %119

117:                                              ; preds = %104
  %118 = add i64 %110, %108
  store i64 %118, i64* %109, align 8
  br label %119

119:                                              ; preds = %117, %115
  %120 = phi i64 [ %116, %115 ], [ %110, %117 ]
  %121 = inttoptr i64 %120 to %"class.v8::internal::CharacterRange"*
  %122 = load i32, i32* %96, align 4
  %123 = icmp sgt i32 %122, 0
  br i1 %123, label %124, label %136

124:                                              ; preds = %119
  %125 = inttoptr i64 %120 to i8*
  %126 = bitcast %"class.v8::internal::ZoneList.553"* %1 to i8**
  %127 = load i8*, i8** %126, align 8
  %128 = sext i32 %122 to i64
  %129 = shl nsw i64 %128, 3
  switch i64 %129, label %135 [
    i64 16, label %134
    i64 8, label %130
  ]

130:                                              ; preds = %124
  %131 = bitcast i8* %127 to i64*
  %132 = inttoptr i64 %120 to i64*
  %133 = load i64, i64* %131, align 1
  store i64 %133, i64* %132, align 1
  br label %136

134:                                              ; preds = %124
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %125, i8* align 1 %127, i64 16, i1 false) #12
  br label %136

135:                                              ; preds = %124
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %125, i8* align 1 %127, i64 %129, i1 false) #12
  br label %136

136:                                              ; preds = %135, %134, %130, %119
  %137 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %121, %"class.v8::internal::CharacterRange"** %137, align 8
  store i32 %106, i32* %98, align 8
  %138 = load i32, i32* %96, align 4
  br label %139

139:                                              ; preds = %101, %136
  %140 = phi i32 [ %138, %136 ], [ %97, %101 ]
  %141 = phi %"class.v8::internal::CharacterRange"* [ %121, %136 ], [ %103, %101 ]
  %142 = add nsw i32 %140, 1
  store i32 %142, i32* %96, align 4
  %143 = sext i32 %140 to i64
  %144 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %141, i64 %143
  %145 = bitcast %"class.v8::internal::CharacterRange"* %144 to i64*
  store i64 %95, i64* %145, align 4
  br label %146

146:                                              ; preds = %139, %90
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJRPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** dereferenceable(8), %"class.v8::internal::ZoneList.553"** dereferenceable(8), %"class.v8::base::Flags"* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %8, %6
  %10 = icmp ult i64 %9, 32
  br i1 %10, label %11, label %13, !prof !2

11:                                               ; preds = %4
  %12 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 32) #12
  br label %15

13:                                               ; preds = %4
  %14 = add i64 %6, 32
  store i64 %14, i64* %5, align 8
  br label %15

15:                                               ; preds = %11, %13
  %16 = phi i64 [ %12, %11 ], [ %6, %13 ]
  %17 = inttoptr i64 %16 to %"class.v8::internal::RegExpCharacterClass"*
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1, align 8
  %19 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %2, align 8
  %20 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %3, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal20RegExpCharacterClassE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %23 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 1, i32 0
  store %"class.v8::internal::ZoneList.553"* %19, %"class.v8::internal::ZoneList.553"** %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 1, i32 1
  store i16 0, i16* %24, align 8
  %25 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 2, i32 0
  store i32 %21, i32* %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 3, i32 0
  store i32 0, i32* %26, align 4
  %27 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %19, i64 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %80

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %19, i64 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %30
  %35 = bitcast %"class.v8::internal::ZoneList.553"* %19 to i64**
  %36 = load i64*, i64** %35, align 8
  store i32 1, i32* %27, align 4
  br label %76

37:                                               ; preds = %30
  %38 = shl nsw i32 %32, 1
  %39 = or i32 %38, 1
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 3
  %42 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %45, %43
  %47 = icmp ugt i64 %41, %46
  br i1 %47, label %48, label %50, !prof !2

48:                                               ; preds = %37
  %49 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 %41) #12
  br label %52

50:                                               ; preds = %37
  %51 = add i64 %43, %41
  store i64 %51, i64* %42, align 8
  br label %52

52:                                               ; preds = %50, %48
  %53 = phi i64 [ %49, %48 ], [ %43, %50 ]
  %54 = inttoptr i64 %53 to %"class.v8::internal::CharacterRange"*
  %55 = load i32, i32* %27, align 4
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %69

57:                                               ; preds = %52
  %58 = inttoptr i64 %53 to i8*
  %59 = bitcast %"class.v8::internal::ZoneList.553"* %19 to i8**
  %60 = load i8*, i8** %59, align 8
  %61 = sext i32 %55 to i64
  %62 = shl nsw i64 %61, 3
  switch i64 %62, label %68 [
    i64 16, label %67
    i64 8, label %63
  ]

63:                                               ; preds = %57
  %64 = bitcast i8* %60 to i64*
  %65 = inttoptr i64 %53 to i64*
  %66 = load i64, i64* %64, align 1
  store i64 %66, i64* %65, align 1
  br label %69

67:                                               ; preds = %57
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %60, i64 16, i1 false) #12
  br label %69

68:                                               ; preds = %57
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %60, i64 %62, i1 false) #12
  br label %69

69:                                               ; preds = %68, %67, %63, %52
  %70 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %19, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %54, %"class.v8::internal::CharacterRange"** %70, align 8
  store i32 %39, i32* %31, align 8
  %71 = load i32, i32* %27, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %27, align 4
  %73 = sext i32 %71 to i64
  %74 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %54, i64 %73
  %75 = bitcast %"class.v8::internal::CharacterRange"* %74 to i64*
  br label %76

76:                                               ; preds = %69, %34
  %77 = phi i64* [ %75, %69 ], [ %36, %34 ]
  store i64 4785070309113856, i64* %77, align 4
  %78 = load i32, i32* %26, align 4
  %79 = xor i32 %78, 1
  store i32 %79, i32* %26, align 4
  br label %80

80:                                               ; preds = %15, %76
  ret %"class.v8::internal::RegExpCharacterClass"* %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::ChoiceNode"* @_ZN2v88internal4Zone3NewINS0_10ChoiceNodeEJiRPS1_EEEPT_DpOT0_(%"class.v8::internal::Zone"*, i32* dereferenceable(4), %"class.v8::internal::Zone"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %7, %5
  %9 = icmp ult i64 %8, 72
  br i1 %9, label %10, label %12, !prof !2

10:                                               ; preds = %3
  %11 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 72) #12
  br label %14

12:                                               ; preds = %3
  %13 = add i64 %5, 72
  store i64 %13, i64* %4, align 8
  br label %14

14:                                               ; preds = %10, %12
  %15 = phi i64 [ %11, %10 ], [ %5, %12 ]
  %16 = inttoptr i64 %15 to %"class.v8::internal::ChoiceNode"*
  %17 = load i32, i32* %1, align 4
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2, align 8
  %19 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %16, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %16, i64 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %16, i64 0, i32 0, i32 8
  %22 = bitcast %"class.v8::internal::RegExpNode"** %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #12
  store %"class.v8::internal::Zone"* %18, %"class.v8::internal::Zone"** %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %16, i64 0, i32 0, i32 7, i64 0
  %24 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 16, i1 false) #12
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2v88internal10ChoiceNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %19, align 8
  %25 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %16, i64 0, i32 1
  %26 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %29, %27
  %31 = icmp ult i64 %30, 16
  br i1 %31, label %32, label %34, !prof !2

32:                                               ; preds = %14
  %33 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 16) #12
  br label %36

34:                                               ; preds = %14
  %35 = add i64 %27, 16
  store i64 %35, i64* %26, align 8
  br label %36

36:                                               ; preds = %34, %32
  %37 = phi i64 [ %33, %32 ], [ %27, %34 ]
  %38 = inttoptr i64 %37 to %"class.v8::internal::ZoneList.555"*
  %39 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %38, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* null, %"class.v8::internal::GuardedAlternative"** %39, align 8
  %40 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %38, i64 0, i32 1
  store i32 %17, i32* %40, align 8
  %41 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %38, i64 0, i32 2
  store i32 0, i32* %41, align 4
  %42 = icmp sgt i32 %17, 0
  br i1 %42, label %43, label %57

43:                                               ; preds = %36
  %44 = sext i32 %17 to i64
  %45 = shl nsw i64 %44, 4
  %46 = load i64, i64* %26, align 8
  %47 = load i64, i64* %28, align 8
  %48 = sub i64 %47, %46
  %49 = icmp ugt i64 %45, %48
  br i1 %49, label %50, label %52, !prof !2

50:                                               ; preds = %43
  %51 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 %45) #12
  br label %54

52:                                               ; preds = %43
  %53 = add i64 %46, %45
  store i64 %53, i64* %26, align 8
  br label %54

54:                                               ; preds = %52, %50
  %55 = phi i64 [ %51, %50 ], [ %46, %52 ]
  %56 = inttoptr i64 %55 to %"class.v8::internal::GuardedAlternative"*
  br label %57

57:                                               ; preds = %36, %54
  %58 = phi %"class.v8::internal::GuardedAlternative"* [ %56, %54 ], [ null, %36 ]
  store %"class.v8::internal::GuardedAlternative"* %58, %"class.v8::internal::GuardedAlternative"** %39, align 8
  store %"class.v8::internal::ZoneList.555"* %38, %"class.v8::internal::ZoneList.555"** %25, align 8
  %59 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %16, i64 0, i32 2
  store i8 0, i8* %59, align 8
  %60 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %16, i64 0, i32 3
  store i8 0, i8* %60, align 1
  ret %"class.v8::internal::ChoiceNode"* %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal16CompareFirstCharEPKPNS0_10RegExpTreeES4_(%"class.v8::internal::RegExpTree"** nocapture readonly, %"class.v8::internal::RegExpTree"** nocapture readonly) #0 {
  %3 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %0, align 8
  %4 = bitcast %"class.v8::internal::RegExpTree"* %3 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %5 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %5, i64 19
  %7 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %6, align 8
  %8 = tail call %"class.v8::internal::RegExpAtom"* %7(%"class.v8::internal::RegExpTree"* %3) #12
  %9 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %1, align 8
  %10 = bitcast %"class.v8::internal::RegExpTree"* %9 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %11 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %11, i64 19
  %13 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %12, align 8
  %14 = tail call %"class.v8::internal::RegExpAtom"* %13(%"class.v8::internal::RegExpTree"* %9) #12
  %15 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %8, i64 0, i32 1, i32 0
  %16 = load i16*, i16** %15, align 8
  %17 = load i16, i16* %16, align 2
  %18 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %14, i64 0, i32 1, i32 0
  %19 = load i16*, i16** %18, align 8
  %20 = load i16, i16* %19, align 2
  %21 = icmp ult i16 %17, %20
  %22 = icmp ugt i16 %17, %20
  %23 = zext i1 %22 to i32
  %24 = select i1 %21, i32 -1, i32 %23
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal30CompareFirstCharCaseInsensitveEPKPNS0_10RegExpTreeES4_(%"class.v8::internal::RegExpTree"** nocapture readonly, %"class.v8::internal::RegExpTree"** nocapture readonly) #0 {
  %3 = alloca %"class.icu_69::UnicodeString", align 8
  %4 = alloca %"class.icu_69::UnicodeString", align 8
  %5 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %0, align 8
  %6 = bitcast %"class.v8::internal::RegExpTree"* %5 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %7 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %7, i64 19
  %9 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %8, align 8
  %10 = tail call %"class.v8::internal::RegExpAtom"* %9(%"class.v8::internal::RegExpTree"* %5) #12
  %11 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %1, align 8
  %12 = bitcast %"class.v8::internal::RegExpTree"* %11 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %13 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %13, i64 19
  %15 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %14, align 8
  %16 = tail call %"class.v8::internal::RegExpAtom"* %15(%"class.v8::internal::RegExpTree"* %11) #12
  %17 = bitcast %"class.icu_69::UnicodeString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %17) #12
  %18 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %10, i64 0, i32 1, i32 0
  %19 = load i16*, i16** %18, align 8
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i32
  call void @_ZN6icu_6913UnicodeStringC1Ei(%"class.icu_69::UnicodeString"* nonnull %3, i32 %21) #12
  %22 = bitcast %"class.icu_69::UnicodeString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %22) #12
  %23 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %16, i64 0, i32 1, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  call void @_ZN6icu_6913UnicodeStringC1Ei(%"class.icu_69::UnicodeString"* nonnull %4, i32 %26) #12
  %27 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %3, i64 0, i32 1, i32 0, i32 0
  %28 = load i16, i16* %27, align 8
  %29 = icmp slt i16 %28, 0
  %30 = lshr i16 %28, 5
  %31 = zext i16 %30 to i32
  %32 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %3, i64 0, i32 1, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = select i1 %29, i32 %33, i32 %31
  %35 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %4, i64 0, i32 1, i32 0, i32 0
  %36 = load i16, i16* %35, align 8
  %37 = icmp slt i16 %36, 0
  %38 = lshr i16 %36, 5
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %4, i64 0, i32 1, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = select i1 %37, i32 %41, i32 %39
  %43 = and i16 %36, 1
  %44 = icmp eq i16 %43, 0
  br i1 %44, label %49, label %45

45:                                               ; preds = %2
  %46 = trunc i16 %28 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  br label %67

49:                                               ; preds = %2
  %50 = icmp slt i32 %42, 0
  %51 = select i1 %50, i32 %42, i32 0
  br i1 %50, label %56, label %52

52:                                               ; preds = %49
  %53 = sub nsw i32 %42, %51
  %54 = icmp slt i32 %53, %42
  %55 = select i1 %54, i32 %53, i32 %42
  br label %56

56:                                               ; preds = %52, %49
  %57 = phi i32 [ 0, %49 ], [ %55, %52 ]
  %58 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %4, i64 0, i32 1
  %59 = and i16 %36, 2
  %60 = icmp eq i16 %59, 0
  %61 = bitcast %"union.icu_69::UnicodeString::StackBufferOrFields"* %58 to %struct.anon.557*
  %62 = getelementptr inbounds %struct.anon.557, %struct.anon.557* %61, i64 0, i32 1, i64 0
  %63 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %4, i64 0, i32 1, i32 0, i32 3
  %64 = load i16*, i16** %63, align 8
  %65 = select i1 %60, i16* %64, i16* %62
  %66 = call signext i8 @_ZNK6icu_6913UnicodeString13doCaseCompareEiiPKDsiij(%"class.icu_69::UnicodeString"* nonnull %3, i32 0, i32 %34, i16* %65, i32 %51, i32 %57, i32 0) #12
  br label %67

67:                                               ; preds = %45, %56
  %68 = phi i8 [ %48, %45 ], [ %66, %56 ]
  %69 = sext i8 %68 to i32
  call void @_ZN6icu_6913UnicodeStringD1Ev(%"class.icu_69::UnicodeString"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %22) #12
  call void @_ZN6icu_6913UnicodeStringD1Ev(%"class.icu_69::UnicodeString"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %17) #12
  ret i32 %69
}

declare void @_ZN6icu_6913UnicodeStringC1Ei(%"class.icu_69::UnicodeString"*, i32) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6icu_6913UnicodeStringD1Ev(%"class.icu_69::UnicodeString"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal17RegExpDisjunction20SortConsecutiveAtomsEPNS0_14RegExpCompilerE(%"class.v8::internal::RegExpDisjunction"* nocapture readonly, %"class.v8::internal::RegExpCompiler"* nocapture readnone) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.anon, align 8
  %4 = alloca %class.anon, align 8
  %5 = getelementptr inbounds %"class.v8::internal::RegExpDisjunction", %"class.v8::internal::RegExpDisjunction"* %0, i64 0, i32 1
  %6 = load %"class.v8::internal::ZoneList.559"*, %"class.v8::internal::ZoneList.559"** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %6, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %129

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %6, i64 0, i32 0
  %12 = bitcast %class.anon* %3 to i8*
  %13 = getelementptr inbounds %class.anon, %class.anon* %3, i64 0, i32 0
  %14 = bitcast %class.anon* %4 to i8*
  %15 = getelementptr inbounds %class.anon, %class.anon* %4, i64 0, i32 0
  %16 = sext i32 %8 to i64
  br label %17

17:                                               ; preds = %10, %123
  %18 = phi i8 [ 0, %10 ], [ %126, %123 ]
  %19 = phi i32 [ 0, %10 ], [ %127, %123 ]
  %20 = sext i32 %19 to i64
  br label %21

21:                                               ; preds = %17, %24
  %22 = phi i64 [ %20, %17 ], [ %33, %24 ]
  %23 = icmp slt i64 %22, %16
  br i1 %23, label %24, label %39

24:                                               ; preds = %21
  %25 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %11, align 8
  %26 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %25, i64 %22
  %27 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %26, align 8
  %28 = bitcast %"class.v8::internal::RegExpTree"* %27 to i1 (%"class.v8::internal::RegExpTree"*)***
  %29 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %28, align 8
  %30 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %29, i64 20
  %31 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %30, align 8
  %32 = call zeroext i1 %31(%"class.v8::internal::RegExpTree"* %27) #12
  %33 = add nsw i64 %22, 1
  br i1 %32, label %34, label %21

34:                                               ; preds = %24
  %35 = trunc i64 %22 to i32
  %36 = xor i1 %32, true
  %37 = zext i1 %36 to i32
  %38 = add nsw i32 %35, %37
  br label %41

39:                                               ; preds = %21
  %40 = trunc i64 %22 to i32
  br label %41

41:                                               ; preds = %39, %34
  %42 = phi i32 [ %38, %34 ], [ %40, %39 ]
  %43 = icmp eq i32 %42, %8
  br i1 %43, label %129, label %44

44:                                               ; preds = %41
  %45 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %11, align 8
  %46 = sext i32 %42 to i64
  %47 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %45, i64 %46
  %48 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %47, align 8
  %49 = bitcast %"class.v8::internal::RegExpTree"* %48 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %50 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %49, align 8
  %51 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %50, i64 19
  %52 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %51, align 8
  %53 = call %"class.v8::internal::RegExpAtom"* %52(%"class.v8::internal::RegExpTree"* %48) #12
  %54 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %53, i64 0, i32 2, i32 0
  %55 = load i32, i32* %54, align 8
  %56 = add i32 %42, 1
  %57 = sext i32 %56 to i64
  br label %58

58:                                               ; preds = %70, %44
  %59 = phi i64 [ %79, %70 ], [ %57, %44 ]
  %60 = icmp slt i64 %59, %16
  br i1 %60, label %61, label %86

61:                                               ; preds = %58
  %62 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %11, align 8
  %63 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %62, i64 %59
  %64 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %63, align 8
  %65 = bitcast %"class.v8::internal::RegExpTree"* %64 to i1 (%"class.v8::internal::RegExpTree"*)***
  %66 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %65, align 8
  %67 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %66, i64 20
  %68 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %67, align 8
  %69 = call zeroext i1 %68(%"class.v8::internal::RegExpTree"* %64) #12
  br i1 %69, label %70, label %80

70:                                               ; preds = %61
  %71 = bitcast %"class.v8::internal::RegExpTree"* %64 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %72 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %71, align 8
  %73 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %72, i64 19
  %74 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %73, align 8
  %75 = call %"class.v8::internal::RegExpAtom"* %74(%"class.v8::internal::RegExpTree"* %64) #12
  %76 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %75, i64 0, i32 2, i32 0
  %77 = load i32, i32* %76, align 8
  %78 = icmp eq i32 %77, %55
  %79 = add nsw i64 %59, 1
  br i1 %78, label %58, label %82

80:                                               ; preds = %61
  %81 = trunc i64 %59 to i32
  br label %88

82:                                               ; preds = %70
  %83 = trunc i64 %59 to i32
  %84 = zext i1 %78 to i32
  %85 = add nsw i32 %83, %84
  br label %88

86:                                               ; preds = %58
  %87 = trunc i64 %59 to i32
  br label %88

88:                                               ; preds = %86, %82, %80
  %89 = phi i32 [ %81, %80 ], [ %85, %82 ], [ %87, %86 ]
  %90 = and i32 %55, 2
  %91 = icmp eq i32 %90, 0
  %92 = sub nsw i32 %89, %42
  %93 = sext i32 %92 to i64
  %94 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %11, align 8
  %95 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %94, i64 %46
  %96 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %95, i64 %93
  br i1 %91, label %110, label %97

97:                                               ; preds = %88
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #12
  store i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)* @_ZN2v88internal30CompareFirstCharCaseInsensitveEPKPNS0_10RegExpTreeES4_, i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)** %13, align 8
  %98 = icmp sgt i32 %92, 128
  br i1 %98, label %99, label %107

99:                                               ; preds = %97, %104
  %100 = phi i64 [ %105, %104 ], [ %93, %97 ]
  %101 = shl i64 %100, 3
  %102 = call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %101, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #12
  %103 = icmp eq i8* %102, null
  br i1 %103, label %104, label %108

104:                                              ; preds = %99
  %105 = lshr i64 %100, 1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %99

107:                                              ; preds = %104, %97
  call void @_ZNSt3__113__stable_sortIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SC_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl(%"class.v8::internal::RegExpTree"** %95, %"class.v8::internal::RegExpTree"** %96, %class.anon* nonnull dereferenceable(8) %3, i64 %93, %"class.v8::internal::RegExpTree"** null, i64 0) #12
  br label %123

108:                                              ; preds = %99
  %109 = bitcast i8* %102 to %"class.v8::internal::RegExpTree"**
  call void @_ZNSt3__113__stable_sortIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SC_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl(%"class.v8::internal::RegExpTree"** %95, %"class.v8::internal::RegExpTree"** %96, %class.anon* nonnull dereferenceable(8) %3, i64 %93, %"class.v8::internal::RegExpTree"** nonnull %109, i64 %100) #12
  call void @_ZdlPv(i8* nonnull %102) #13
  br label %123

110:                                              ; preds = %88
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #12
  store i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)* @_ZN2v88internal16CompareFirstCharEPKPNS0_10RegExpTreeES4_, i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)** %15, align 8
  %111 = icmp sgt i32 %92, 128
  br i1 %111, label %112, label %120

112:                                              ; preds = %110, %117
  %113 = phi i64 [ %118, %117 ], [ %93, %110 ]
  %114 = shl i64 %113, 3
  %115 = call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %114, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #12
  %116 = icmp eq i8* %115, null
  br i1 %116, label %117, label %121

117:                                              ; preds = %112
  %118 = lshr i64 %113, 1
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %112

120:                                              ; preds = %117, %110
  call void @_ZNSt3__113__stable_sortIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SC_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl(%"class.v8::internal::RegExpTree"** %95, %"class.v8::internal::RegExpTree"** %96, %class.anon* nonnull dereferenceable(8) %4, i64 %93, %"class.v8::internal::RegExpTree"** null, i64 0) #12
  br label %123

121:                                              ; preds = %112
  %122 = bitcast i8* %115 to %"class.v8::internal::RegExpTree"**
  call void @_ZNSt3__113__stable_sortIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SC_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl(%"class.v8::internal::RegExpTree"** %95, %"class.v8::internal::RegExpTree"** %96, %class.anon* nonnull dereferenceable(8) %4, i64 %93, %"class.v8::internal::RegExpTree"** nonnull %122, i64 %113) #12
  call void @_ZdlPv(i8* nonnull %115) #13
  br label %123

123:                                              ; preds = %121, %120, %108, %107
  %124 = phi i8* [ %12, %107 ], [ %12, %108 ], [ %14, %120 ], [ %14, %121 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %124) #12
  %125 = icmp sgt i32 %92, 1
  %126 = select i1 %125, i8 1, i8 %18
  %127 = add nsw i32 %89, 1
  %128 = icmp slt i32 %127, %8
  br i1 %128, label %17, label %129

129:                                              ; preds = %123, %41, %2
  %130 = phi i8 [ 0, %2 ], [ %18, %41 ], [ %126, %123 ]
  %131 = and i8 %130, 1
  %132 = icmp ne i8 %131, 0
  ret i1 %132
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal17RegExpDisjunction27RationalizeConsecutiveAtomsEPNS0_14RegExpCompilerE(%"class.v8::internal::RegExpDisjunction"* nocapture readonly, %"class.v8::internal::RegExpCompiler"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.icu_69::UnicodeString", align 8
  %4 = alloca %"class.icu_69::UnicodeString", align 8
  %5 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 15
  %6 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::RegExpDisjunction", %"class.v8::internal::RegExpDisjunction"* %0, i64 0, i32 1
  %8 = load %"class.v8::internal::ZoneList.559"*, %"class.v8::internal::ZoneList.559"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %8, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %628

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %8, i64 0, i32 0
  %14 = bitcast %"class.icu_69::UnicodeString"* %3 to i8*
  %15 = bitcast %"class.icu_69::UnicodeString"* %4 to i8*
  %16 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %4, i64 0, i32 1, i32 0, i32 0
  %17 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %3, i64 0, i32 1, i32 0, i32 0
  %18 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %4, i64 0, i32 1, i32 0, i32 1
  %19 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %3, i64 0, i32 1, i32 0, i32 1
  %20 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %4, i64 0, i32 1
  %21 = bitcast %"union.icu_69::UnicodeString::StackBufferOrFields"* %20 to %struct.anon.557*
  %22 = getelementptr inbounds %struct.anon.557, %struct.anon.557* %21, i64 0, i32 1, i64 0
  %23 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %4, i64 0, i32 1, i32 0, i32 3
  %24 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6, i64 0, i32 2
  %25 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6, i64 0, i32 3
  br label %26

26:                                               ; preds = %12, %624
  %27 = phi i32 [ 0, %12 ], [ %626, %624 ]
  %28 = phi i32 [ 0, %12 ], [ %625, %624 ]
  %29 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %13, align 8
  %30 = sext i32 %28 to i64
  %31 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %29, i64 %30
  %32 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %31, align 8
  %33 = bitcast %"class.v8::internal::RegExpTree"* %32 to i1 (%"class.v8::internal::RegExpTree"*)***
  %34 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %33, align 8
  %35 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %34, i64 20
  %36 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %35, align 8
  %37 = call zeroext i1 %36(%"class.v8::internal::RegExpTree"* %32) #12
  br i1 %37, label %48, label %38

38:                                               ; preds = %26
  %39 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %13, align 8
  %40 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %39, i64 %30
  %41 = bitcast %"class.v8::internal::RegExpTree"** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = add nsw i32 %27, 1
  %44 = sext i32 %27 to i64
  %45 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %39, i64 %44
  %46 = bitcast %"class.v8::internal::RegExpTree"** %45 to i64*
  store i64 %42, i64* %46, align 8
  %47 = add nsw i32 %28, 1
  br label %624

48:                                               ; preds = %26
  %49 = bitcast %"class.v8::internal::RegExpTree"* %32 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %50 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %49, align 8
  %51 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %50, i64 19
  %52 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %51, align 8
  %53 = call %"class.v8::internal::RegExpAtom"* %52(%"class.v8::internal::RegExpTree"* %32) #12
  %54 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %53, i64 0, i32 2, i32 0
  %55 = load i32, i32* %54, align 8
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %14) #12
  %56 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %53, i64 0, i32 1, i32 0
  %57 = load i16*, i16** %56, align 8
  %58 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %53, i64 0, i32 1, i32 1
  %59 = load i16, i16* %57, align 2
  %60 = zext i16 %59 to i32
  call void @_ZN6icu_6913UnicodeStringC1Ei(%"class.icu_69::UnicodeString"* nonnull %3, i32 %60) #12
  %61 = load i64, i64* %58, align 8
  %62 = trunc i64 %61 to i32
  %63 = and i32 %55, 2
  %64 = icmp eq i32 %63, 0
  %65 = add nsw i32 %28, 1
  %66 = icmp slt i32 %65, %10
  br i1 %66, label %67, label %170

67:                                               ; preds = %48, %163
  %68 = phi i32 [ %168, %163 ], [ %65, %48 ]
  %69 = phi i32 [ %68, %163 ], [ %28, %48 ]
  %70 = phi i32 [ %167, %163 ], [ %62, %48 ]
  %71 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %13, align 8
  %72 = sext i32 %68 to i64
  %73 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %71, i64 %72
  %74 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %73, align 8
  %75 = bitcast %"class.v8::internal::RegExpTree"* %74 to i1 (%"class.v8::internal::RegExpTree"*)***
  %76 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %75, align 8
  %77 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %76, i64 20
  %78 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %77, align 8
  %79 = call zeroext i1 %78(%"class.v8::internal::RegExpTree"* %74) #12
  br i1 %79, label %80, label %170

80:                                               ; preds = %67
  %81 = bitcast %"class.v8::internal::RegExpTree"* %74 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %82 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %81, align 8
  %83 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %82, i64 19
  %84 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %83, align 8
  %85 = call %"class.v8::internal::RegExpAtom"* %84(%"class.v8::internal::RegExpTree"* %74) #12
  %86 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %85, i64 0, i32 2, i32 0
  %87 = load i32, i32* %86, align 8
  %88 = icmp eq i32 %87, %55
  br i1 %88, label %89, label %170

89:                                               ; preds = %80
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %15) #12
  %90 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %85, i64 0, i32 1, i32 0
  %91 = load i16*, i16** %90, align 8
  %92 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %85, i64 0, i32 1, i32 1
  %93 = load i16, i16* %91, align 2
  %94 = zext i16 %93 to i32
  call void @_ZN6icu_6913UnicodeStringC1Ei(%"class.icu_69::UnicodeString"* nonnull %4, i32 %94) #12
  %95 = load i16, i16* %16, align 8
  %96 = and i16 %95, 1
  %97 = icmp eq i16 %96, 0
  br i1 %97, label %102, label %98

98:                                               ; preds = %89
  %99 = load i16, i16* %17, align 8
  %100 = trunc i16 %99 to i8
  %101 = and i8 %100, 1
  br label %122

102:                                              ; preds = %89
  %103 = icmp slt i16 %95, 0
  %104 = lshr i16 %95, 5
  %105 = zext i16 %104 to i32
  %106 = load i32, i32* %18, align 4
  %107 = select i1 %103, i32 %106, i32 %105
  %108 = load i16, i16* %17, align 8
  %109 = icmp slt i16 %108, 0
  %110 = lshr i16 %108, 5
  %111 = zext i16 %110 to i32
  %112 = load i32, i32* %19, align 4
  %113 = select i1 %109, i32 %112, i32 %111
  %114 = and i16 %108, 1
  %115 = icmp eq i16 %114, 0
  %116 = icmp eq i32 %107, %113
  %117 = and i1 %115, %116
  br i1 %117, label %118, label %125

118:                                              ; preds = %102
  %119 = call signext i8 @_ZNK6icu_6913UnicodeString8doEqualsERKS0_i(%"class.icu_69::UnicodeString"* nonnull %4, %"class.icu_69::UnicodeString"* nonnull dereferenceable(64) %3, i32 %107) #12
  %120 = icmp ne i8 %119, 0
  %121 = zext i1 %120 to i8
  br label %122

122:                                              ; preds = %98, %118
  %123 = phi i8 [ %101, %98 ], [ %121, %118 ]
  %124 = icmp eq i8 %123, 1
  br i1 %124, label %163, label %125

125:                                              ; preds = %102, %122
  br i1 %64, label %162, label %126

126:                                              ; preds = %125
  %127 = load i16, i16* %17, align 8
  %128 = icmp slt i16 %127, 0
  %129 = lshr i16 %127, 5
  %130 = zext i16 %129 to i32
  %131 = load i32, i32* %19, align 4
  %132 = select i1 %128, i32 %131, i32 %130
  %133 = load i16, i16* %16, align 8
  %134 = icmp slt i16 %133, 0
  %135 = lshr i16 %133, 5
  %136 = zext i16 %135 to i32
  %137 = load i32, i32* %18, align 4
  %138 = select i1 %134, i32 %137, i32 %136
  %139 = and i16 %133, 1
  %140 = icmp eq i16 %139, 0
  br i1 %140, label %145, label %141

141:                                              ; preds = %126
  %142 = trunc i16 %127 to i8
  %143 = and i8 %142, 1
  %144 = xor i8 %143, 1
  br label %159

145:                                              ; preds = %126
  %146 = icmp slt i32 %138, 0
  %147 = select i1 %146, i32 %138, i32 0
  br i1 %146, label %152, label %148

148:                                              ; preds = %145
  %149 = sub nsw i32 %138, %147
  %150 = icmp slt i32 %149, %138
  %151 = select i1 %150, i32 %149, i32 %138
  br label %152

152:                                              ; preds = %148, %145
  %153 = phi i32 [ 0, %145 ], [ %151, %148 ]
  %154 = and i16 %133, 2
  %155 = icmp eq i16 %154, 0
  %156 = load i16*, i16** %23, align 8
  %157 = select i1 %155, i16* %156, i16* %22
  %158 = call signext i8 @_ZNK6icu_6913UnicodeString13doCaseCompareEiiPKDsiij(%"class.icu_69::UnicodeString"* nonnull %3, i32 0, i32 %132, i16* %157, i32 %147, i32 %153, i32 0) #12
  br label %159

159:                                              ; preds = %141, %152
  %160 = phi i8 [ %144, %141 ], [ %158, %152 ]
  %161 = icmp eq i8 %160, 0
  br i1 %161, label %163, label %162

162:                                              ; preds = %159, %125
  call void @_ZN6icu_6913UnicodeStringD1Ev(%"class.icu_69::UnicodeString"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %15) #12
  br label %170

163:                                              ; preds = %122, %159
  %164 = load i64, i64* %92, align 8
  %165 = trunc i64 %164 to i32
  %166 = icmp sgt i32 %70, %165
  %167 = select i1 %166, i32 %165, i32 %70
  call void @_ZN6icu_6913UnicodeStringD1Ev(%"class.icu_69::UnicodeString"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %15) #12
  %168 = add nsw i32 %68, 1
  %169 = icmp slt i32 %168, %10
  br i1 %169, label %67, label %170

170:                                              ; preds = %163, %67, %80, %48, %162
  %171 = phi i32 [ %70, %162 ], [ %62, %48 ], [ %70, %80 ], [ %70, %67 ], [ %167, %163 ]
  %172 = phi i32 [ %69, %162 ], [ %28, %48 ], [ %69, %80 ], [ %69, %67 ], [ %68, %163 ]
  %173 = phi i32 [ %68, %162 ], [ %65, %48 ], [ %68, %80 ], [ %68, %67 ], [ %168, %163 ]
  %174 = add nsw i32 %28, 2
  %175 = icmp slt i32 %172, %174
  br i1 %175, label %176, label %205

176:                                              ; preds = %170
  %177 = icmp slt i32 %172, %28
  br i1 %177, label %622, label %178

178:                                              ; preds = %176
  %179 = sext i32 %27 to i64
  %180 = sext i32 %173 to i64
  %181 = sub nsw i64 %180, %30
  %182 = xor i64 %30, -1
  %183 = add nsw i64 %182, %180
  %184 = and i64 %181, 3
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %200, label %186

186:                                              ; preds = %178, %186
  %187 = phi i64 [ %194, %186 ], [ %179, %178 ]
  %188 = phi i64 [ %197, %186 ], [ %30, %178 ]
  %189 = phi i64 [ %198, %186 ], [ %184, %178 ]
  %190 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %13, align 8
  %191 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %190, i64 %188
  %192 = bitcast %"class.v8::internal::RegExpTree"** %191 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = add nsw i64 %187, 1
  %195 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %190, i64 %187
  %196 = bitcast %"class.v8::internal::RegExpTree"** %195 to i64*
  store i64 %193, i64* %196, align 8
  %197 = add nsw i64 %188, 1
  %198 = add i64 %189, -1
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %186, !llvm.loop !4

200:                                              ; preds = %186, %178
  %201 = phi i64 [ undef, %178 ], [ %194, %186 ]
  %202 = phi i64 [ %179, %178 ], [ %194, %186 ]
  %203 = phi i64 [ %30, %178 ], [ %197, %186 ]
  %204 = icmp ult i64 %183, 3
  br i1 %204, label %619, label %583

205:                                              ; preds = %170
  %206 = sub i32 %173, %28
  %207 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %13, align 8
  %208 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %207, i64 %30
  %209 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %208, align 8
  %210 = bitcast %"class.v8::internal::RegExpTree"* %209 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %211 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %210, align 8
  %212 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %211, i64 19
  %213 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %212, align 8
  %214 = call %"class.v8::internal::RegExpAtom"* %213(%"class.v8::internal::RegExpTree"* %209) #12
  %215 = icmp sgt i32 %206, 1
  %216 = icmp sgt i32 %171, 1
  %217 = and i1 %216, %215
  br i1 %217, label %218, label %221

218:                                              ; preds = %205
  %219 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %214, i64 0, i32 1, i32 0
  %220 = sext i32 %206 to i64
  br label %342

221:                                              ; preds = %370, %205
  %222 = phi i32 [ %171, %205 ], [ %371, %370 ]
  %223 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %214, i64 0, i32 1, i32 0
  %224 = bitcast i16** %223 to i64*
  %225 = load i64, i64* %224, align 8
  %226 = sext i32 %222 to i64
  %227 = load i64, i64* %24, align 8
  %228 = load i64, i64* %25, align 8
  %229 = sub i64 %228, %227
  %230 = icmp ult i64 %229, 32
  br i1 %230, label %231, label %233, !prof !2

231:                                              ; preds = %221
  %232 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 32) #12
  br label %235

233:                                              ; preds = %221
  %234 = add i64 %227, 32
  store i64 %234, i64* %24, align 8
  br label %235

235:                                              ; preds = %231, %233
  %236 = phi i64 [ %232, %231 ], [ %227, %233 ]
  %237 = inttoptr i64 %236 to %"class.v8::internal::RegExpAtom"*
  %238 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %237, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal10RegExpAtomE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %238, align 8
  %239 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %237, i64 0, i32 1, i32 0
  %240 = bitcast i16** %239 to i64*
  store i64 %225, i64* %240, align 8
  %241 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %237, i64 0, i32 1, i32 1
  store i64 %226, i64* %241, align 8
  %242 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %237, i64 0, i32 2, i32 0
  store i32 %55, i32* %242, align 8
  %243 = load i64, i64* %24, align 8
  %244 = load i64, i64* %25, align 8
  %245 = sub i64 %244, %243
  %246 = icmp ult i64 %245, 16
  br i1 %246, label %247, label %249, !prof !2

247:                                              ; preds = %235
  %248 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 16) #12
  br label %251

249:                                              ; preds = %235
  %250 = add i64 %243, 16
  store i64 %250, i64* %24, align 8
  br label %251

251:                                              ; preds = %247, %249
  %252 = phi i64 [ %248, %247 ], [ %243, %249 ]
  %253 = inttoptr i64 %252 to %"class.v8::internal::ZoneList.559"*
  %254 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %253, i64 0, i32 0
  store %"class.v8::internal::RegExpTree"** null, %"class.v8::internal::RegExpTree"*** %254, align 8
  %255 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %253, i64 0, i32 1
  store i32 2, i32* %255, align 8
  %256 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %253, i64 0, i32 2
  store i32 0, i32* %256, align 4
  %257 = load i64, i64* %24, align 8
  %258 = load i64, i64* %25, align 8
  %259 = sub i64 %258, %257
  %260 = icmp ult i64 %259, 16
  br i1 %260, label %261, label %263, !prof !2

261:                                              ; preds = %251
  %262 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 16) #12
  br label %265

263:                                              ; preds = %251
  %264 = add i64 %257, 16
  store i64 %264, i64* %24, align 8
  br label %265

265:                                              ; preds = %261, %263
  %266 = phi i64 [ %262, %261 ], [ %257, %263 ]
  %267 = inttoptr i64 %266 to %"class.v8::internal::RegExpTree"**
  store %"class.v8::internal::RegExpTree"** %267, %"class.v8::internal::RegExpTree"*** %254, align 8
  %268 = load i32, i32* %256, align 4
  %269 = load i32, i32* %255, align 8
  %270 = icmp slt i32 %268, %269
  br i1 %270, label %303, label %271

271:                                              ; preds = %265
  %272 = shl nsw i32 %269, 1
  %273 = or i32 %272, 1
  %274 = sext i32 %273 to i64
  %275 = shl nsw i64 %274, 3
  %276 = load i64, i64* %24, align 8
  %277 = load i64, i64* %25, align 8
  %278 = sub i64 %277, %276
  %279 = icmp ugt i64 %275, %278
  br i1 %279, label %280, label %282, !prof !2

280:                                              ; preds = %271
  %281 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 %275) #12
  br label %284

282:                                              ; preds = %271
  %283 = add i64 %276, %275
  store i64 %283, i64* %24, align 8
  br label %284

284:                                              ; preds = %282, %280
  %285 = phi i64 [ %281, %280 ], [ %276, %282 ]
  %286 = inttoptr i64 %285 to %"class.v8::internal::RegExpTree"**
  %287 = load i32, i32* %256, align 4
  %288 = icmp sgt i32 %287, 0
  br i1 %288, label %289, label %301

289:                                              ; preds = %284
  %290 = inttoptr i64 %285 to i8*
  %291 = inttoptr i64 %252 to i8**
  %292 = load i8*, i8** %291, align 8
  %293 = sext i32 %287 to i64
  %294 = shl nsw i64 %293, 3
  switch i64 %294, label %300 [
    i64 16, label %299
    i64 8, label %295
  ]

295:                                              ; preds = %289
  %296 = bitcast i8* %292 to i64*
  %297 = inttoptr i64 %285 to i64*
  %298 = load i64, i64* %296, align 1
  store i64 %298, i64* %297, align 1
  br label %301

299:                                              ; preds = %289
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %290, i8* align 1 %292, i64 16, i1 false) #12
  br label %301

300:                                              ; preds = %289
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %290, i8* align 1 %292, i64 %294, i1 false) #12
  br label %301

301:                                              ; preds = %300, %299, %295, %284
  store %"class.v8::internal::RegExpTree"** %286, %"class.v8::internal::RegExpTree"*** %254, align 8
  store i32 %273, i32* %255, align 8
  %302 = load i32, i32* %256, align 4
  br label %303

303:                                              ; preds = %265, %301
  %304 = phi i32 [ %302, %301 ], [ %268, %265 ]
  %305 = phi %"class.v8::internal::RegExpTree"** [ %286, %301 ], [ %267, %265 ]
  %306 = add nsw i32 %304, 1
  store i32 %306, i32* %256, align 4
  %307 = sext i32 %304 to i64
  %308 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %305, i64 %307
  %309 = bitcast %"class.v8::internal::RegExpTree"** %308 to i64*
  store i64 %236, i64* %309, align 8
  %310 = load i64, i64* %24, align 8
  %311 = load i64, i64* %25, align 8
  %312 = sub i64 %311, %310
  %313 = icmp ult i64 %312, 16
  br i1 %313, label %314, label %316, !prof !2

314:                                              ; preds = %303
  %315 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 16) #12
  br label %318

316:                                              ; preds = %303
  %317 = add i64 %310, 16
  store i64 %317, i64* %24, align 8
  br label %318

318:                                              ; preds = %316, %314
  %319 = phi i64 [ %315, %314 ], [ %310, %316 ]
  %320 = inttoptr i64 %319 to %"class.v8::internal::ZoneList.559"*
  %321 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %320, i64 0, i32 0
  store %"class.v8::internal::RegExpTree"** null, %"class.v8::internal::RegExpTree"*** %321, align 8
  %322 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %320, i64 0, i32 1
  store i32 %206, i32* %322, align 8
  %323 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %320, i64 0, i32 2
  store i32 0, i32* %323, align 4
  %324 = icmp sgt i32 %206, 0
  br i1 %324, label %325, label %336

325:                                              ; preds = %318
  %326 = sext i32 %206 to i64
  %327 = shl nsw i64 %326, 3
  %328 = load i64, i64* %24, align 8
  %329 = load i64, i64* %25, align 8
  %330 = sub i64 %329, %328
  %331 = icmp ugt i64 %327, %330
  br i1 %331, label %332, label %334, !prof !2

332:                                              ; preds = %325
  %333 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 %327) #12
  br label %337

334:                                              ; preds = %325
  %335 = add i64 %328, %327
  store i64 %335, i64* %24, align 8
  br label %337

336:                                              ; preds = %318
  store %"class.v8::internal::RegExpTree"** null, %"class.v8::internal::RegExpTree"*** %321, align 8
  br label %376

337:                                              ; preds = %332, %334
  %338 = phi i64 [ %333, %332 ], [ %328, %334 ]
  %339 = inttoptr i64 %338 to %"class.v8::internal::RegExpTree"**
  store %"class.v8::internal::RegExpTree"** %339, %"class.v8::internal::RegExpTree"*** %321, align 8
  %340 = inttoptr i64 %319 to i8**
  %341 = zext i32 %206 to i64
  br label %448

342:                                              ; preds = %370, %218
  %343 = phi i64 [ 1, %218 ], [ %372, %370 ]
  %344 = phi i32 [ %171, %218 ], [ %371, %370 ]
  %345 = add nsw i64 %343, %30
  %346 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %13, align 8
  %347 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %346, i64 %345
  %348 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %347, align 8
  %349 = bitcast %"class.v8::internal::RegExpTree"* %348 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %350 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %349, align 8
  %351 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %350, i64 19
  %352 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %351, align 8
  %353 = call %"class.v8::internal::RegExpAtom"* %352(%"class.v8::internal::RegExpTree"* %348) #12
  %354 = load i16*, i16** %219, align 8
  %355 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %353, i64 0, i32 1, i32 0
  %356 = load i16*, i16** %355, align 8
  %357 = zext i32 %344 to i64
  br label %358

358:                                              ; preds = %365, %342
  %359 = phi i64 [ 1, %342 ], [ %366, %365 ]
  %360 = getelementptr inbounds i16, i16* %354, i64 %359
  %361 = load i16, i16* %360, align 2
  %362 = getelementptr inbounds i16, i16* %356, i64 %359
  %363 = load i16, i16* %362, align 2
  %364 = icmp eq i16 %361, %363
  br i1 %364, label %365, label %368

365:                                              ; preds = %358
  %366 = add nuw nsw i64 %359, 1
  %367 = icmp eq i64 %366, %357
  br i1 %367, label %370, label %358

368:                                              ; preds = %358
  %369 = trunc i64 %359 to i32
  br label %370

370:                                              ; preds = %365, %368
  %371 = phi i32 [ %369, %368 ], [ %344, %365 ]
  %372 = add nuw nsw i64 %343, 1
  %373 = icmp slt i64 %372, %220
  %374 = icmp sgt i32 %371, 1
  %375 = and i1 %374, %373
  br i1 %375, label %342, label %221

376:                                              ; preds = %573, %336
  %377 = load i64, i64* %24, align 8
  %378 = load i64, i64* %25, align 8
  %379 = sub i64 %378, %377
  %380 = icmp ult i64 %379, 24
  br i1 %380, label %381, label %383, !prof !2

381:                                              ; preds = %376
  %382 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 24) #12
  br label %385

383:                                              ; preds = %376
  %384 = add i64 %377, 24
  store i64 %384, i64* %24, align 8
  br label %385

385:                                              ; preds = %381, %383
  %386 = phi i64 [ %382, %381 ], [ %377, %383 ]
  %387 = inttoptr i64 %386 to %"class.v8::internal::RegExpDisjunction"*
  call void @_ZN2v88internal17RegExpDisjunctionC1EPNS0_8ZoneListIPNS0_10RegExpTreeEEE(%"class.v8::internal::RegExpDisjunction"* %387, %"class.v8::internal::ZoneList.559"* %320) #12
  %388 = load i32, i32* %256, align 4
  %389 = load i32, i32* %255, align 8
  %390 = icmp slt i32 %388, %389
  br i1 %390, label %391, label %393

391:                                              ; preds = %385
  %392 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %254, align 8
  br label %425

393:                                              ; preds = %385
  %394 = shl nsw i32 %389, 1
  %395 = or i32 %394, 1
  %396 = sext i32 %395 to i64
  %397 = shl nsw i64 %396, 3
  %398 = load i64, i64* %24, align 8
  %399 = load i64, i64* %25, align 8
  %400 = sub i64 %399, %398
  %401 = icmp ugt i64 %397, %400
  br i1 %401, label %402, label %404, !prof !2

402:                                              ; preds = %393
  %403 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 %397) #12
  br label %406

404:                                              ; preds = %393
  %405 = add i64 %398, %397
  store i64 %405, i64* %24, align 8
  br label %406

406:                                              ; preds = %404, %402
  %407 = phi i64 [ %403, %402 ], [ %398, %404 ]
  %408 = inttoptr i64 %407 to %"class.v8::internal::RegExpTree"**
  %409 = load i32, i32* %256, align 4
  %410 = icmp sgt i32 %409, 0
  br i1 %410, label %411, label %423

411:                                              ; preds = %406
  %412 = inttoptr i64 %407 to i8*
  %413 = inttoptr i64 %252 to i8**
  %414 = load i8*, i8** %413, align 8
  %415 = sext i32 %409 to i64
  %416 = shl nsw i64 %415, 3
  switch i64 %416, label %422 [
    i64 16, label %421
    i64 8, label %417
  ]

417:                                              ; preds = %411
  %418 = bitcast i8* %414 to i64*
  %419 = inttoptr i64 %407 to i64*
  %420 = load i64, i64* %418, align 1
  store i64 %420, i64* %419, align 1
  br label %423

421:                                              ; preds = %411
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %412, i8* align 1 %414, i64 16, i1 false) #12
  br label %423

422:                                              ; preds = %411
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %412, i8* align 1 %414, i64 %416, i1 false) #12
  br label %423

423:                                              ; preds = %422, %421, %417, %406
  store %"class.v8::internal::RegExpTree"** %408, %"class.v8::internal::RegExpTree"*** %254, align 8
  store i32 %395, i32* %255, align 8
  %424 = load i32, i32* %256, align 4
  br label %425

425:                                              ; preds = %391, %423
  %426 = phi i32 [ %388, %391 ], [ %424, %423 ]
  %427 = phi %"class.v8::internal::RegExpTree"** [ %392, %391 ], [ %408, %423 ]
  %428 = add nsw i32 %426, 1
  store i32 %428, i32* %256, align 4
  %429 = sext i32 %426 to i64
  %430 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %427, i64 %429
  %431 = bitcast %"class.v8::internal::RegExpTree"** %430 to i64*
  store i64 %386, i64* %431, align 8
  %432 = load i64, i64* %24, align 8
  %433 = load i64, i64* %25, align 8
  %434 = sub i64 %433, %432
  %435 = icmp ult i64 %434, 24
  br i1 %435, label %436, label %438, !prof !2

436:                                              ; preds = %425
  %437 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 24) #12
  br label %440

438:                                              ; preds = %425
  %439 = add i64 %432, 24
  store i64 %439, i64* %24, align 8
  br label %440

440:                                              ; preds = %436, %438
  %441 = phi i64 [ %437, %436 ], [ %432, %438 ]
  %442 = inttoptr i64 %441 to %"class.v8::internal::RegExpAlternative"*
  call void @_ZN2v88internal17RegExpAlternativeC1EPNS0_8ZoneListIPNS0_10RegExpTreeEEE(%"class.v8::internal::RegExpAlternative"* %442, %"class.v8::internal::ZoneList.559"* %253) #12
  %443 = getelementptr inbounds %"class.v8::internal::RegExpAlternative", %"class.v8::internal::RegExpAlternative"* %442, i64 0, i32 0
  %444 = add nsw i32 %27, 1
  %445 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %13, align 8
  %446 = sext i32 %27 to i64
  %447 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %445, i64 %446
  store %"class.v8::internal::RegExpTree"* %443, %"class.v8::internal::RegExpTree"** %447, align 8
  br label %622

448:                                              ; preds = %573, %337
  %449 = phi i64 [ 0, %337 ], [ %581, %573 ]
  %450 = add nsw i64 %449, %30
  %451 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %13, align 8
  %452 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %451, i64 %450
  %453 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %452, align 8
  %454 = bitcast %"class.v8::internal::RegExpTree"* %453 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %455 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %454, align 8
  %456 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %455, i64 19
  %457 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %456, align 8
  %458 = call %"class.v8::internal::RegExpAtom"* %457(%"class.v8::internal::RegExpTree"* %453) #12
  %459 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %458, i64 0, i32 1, i32 1
  %460 = load i64, i64* %459, align 8
  %461 = trunc i64 %460 to i32
  %462 = icmp eq i32 %222, %461
  br i1 %462, label %463, label %513

463:                                              ; preds = %448
  %464 = load i64, i64* %24, align 8
  %465 = load i64, i64* %25, align 8
  %466 = sub i64 %465, %464
  %467 = icmp ult i64 %466, 8
  br i1 %467, label %468, label %470, !prof !2

468:                                              ; preds = %463
  %469 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 8) #12
  br label %472

470:                                              ; preds = %463
  %471 = add i64 %464, 8
  store i64 %471, i64* %24, align 8
  br label %472

472:                                              ; preds = %468, %470
  %473 = phi i64 [ %469, %468 ], [ %464, %470 ]
  %474 = inttoptr i64 %473 to %"class.v8::internal::RegExpEmpty"*
  %475 = inttoptr i64 %473 to i64*
  store i64 0, i64* %475, align 8
  %476 = getelementptr inbounds %"class.v8::internal::RegExpEmpty", %"class.v8::internal::RegExpEmpty"* %474, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal11RegExpEmptyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %476, align 8
  %477 = load i32, i32* %323, align 4
  %478 = load i32, i32* %322, align 8
  %479 = icmp slt i32 %477, %478
  br i1 %479, label %480, label %482

480:                                              ; preds = %472
  %481 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %321, align 8
  br label %573

482:                                              ; preds = %472
  %483 = shl nsw i32 %478, 1
  %484 = or i32 %483, 1
  %485 = sext i32 %484 to i64
  %486 = shl nsw i64 %485, 3
  %487 = load i64, i64* %24, align 8
  %488 = load i64, i64* %25, align 8
  %489 = sub i64 %488, %487
  %490 = icmp ugt i64 %486, %489
  br i1 %490, label %491, label %493, !prof !2

491:                                              ; preds = %482
  %492 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 %486) #12
  br label %495

493:                                              ; preds = %482
  %494 = add i64 %487, %486
  store i64 %494, i64* %24, align 8
  br label %495

495:                                              ; preds = %493, %491
  %496 = phi i64 [ %492, %491 ], [ %487, %493 ]
  %497 = inttoptr i64 %496 to %"class.v8::internal::RegExpTree"**
  %498 = load i32, i32* %323, align 4
  %499 = icmp sgt i32 %498, 0
  br i1 %499, label %500, label %511

500:                                              ; preds = %495
  %501 = inttoptr i64 %496 to i8*
  %502 = load i8*, i8** %340, align 8
  %503 = sext i32 %498 to i64
  %504 = shl nsw i64 %503, 3
  switch i64 %504, label %510 [
    i64 16, label %509
    i64 8, label %505
  ]

505:                                              ; preds = %500
  %506 = bitcast i8* %502 to i64*
  %507 = inttoptr i64 %496 to i64*
  %508 = load i64, i64* %506, align 1
  store i64 %508, i64* %507, align 1
  br label %511

509:                                              ; preds = %500
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %501, i8* align 1 %502, i64 16, i1 false) #12
  br label %511

510:                                              ; preds = %500
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %501, i8* align 1 %502, i64 %504, i1 false) #12
  br label %511

511:                                              ; preds = %510, %509, %505, %495
  store %"class.v8::internal::RegExpTree"** %497, %"class.v8::internal::RegExpTree"*** %321, align 8
  store i32 %484, i32* %322, align 8
  %512 = load i32, i32* %323, align 4
  br label %573

513:                                              ; preds = %448
  %514 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %458, i64 0, i32 1, i32 0
  %515 = load i16*, i16** %514, align 8
  %516 = shl i64 %460, 32
  %517 = ashr exact i64 %516, 32
  %518 = getelementptr inbounds i16, i16* %515, i64 %226
  %519 = sub nsw i64 %517, %226
  %520 = ptrtoint i16* %518 to i64
  %521 = load i64, i64* %24, align 8
  %522 = load i64, i64* %25, align 8
  %523 = sub i64 %522, %521
  %524 = icmp ult i64 %523, 32
  br i1 %524, label %525, label %527, !prof !2

525:                                              ; preds = %513
  %526 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 32) #12
  br label %529

527:                                              ; preds = %513
  %528 = add i64 %521, 32
  store i64 %528, i64* %24, align 8
  br label %529

529:                                              ; preds = %525, %527
  %530 = phi i64 [ %526, %525 ], [ %521, %527 ]
  %531 = inttoptr i64 %530 to %"class.v8::internal::RegExpAtom"*
  %532 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %531, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal10RegExpAtomE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %532, align 8
  %533 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %531, i64 0, i32 1, i32 0
  %534 = bitcast i16** %533 to i64*
  store i64 %520, i64* %534, align 8
  %535 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %531, i64 0, i32 1, i32 1
  store i64 %519, i64* %535, align 8
  %536 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %531, i64 0, i32 2, i32 0
  store i32 %55, i32* %536, align 8
  %537 = load i32, i32* %323, align 4
  %538 = load i32, i32* %322, align 8
  %539 = icmp slt i32 %537, %538
  br i1 %539, label %540, label %542

540:                                              ; preds = %529
  %541 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %321, align 8
  br label %573

542:                                              ; preds = %529
  %543 = shl nsw i32 %538, 1
  %544 = or i32 %543, 1
  %545 = sext i32 %544 to i64
  %546 = shl nsw i64 %545, 3
  %547 = load i64, i64* %24, align 8
  %548 = load i64, i64* %25, align 8
  %549 = sub i64 %548, %547
  %550 = icmp ugt i64 %546, %549
  br i1 %550, label %551, label %553, !prof !2

551:                                              ; preds = %542
  %552 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 %546) #12
  br label %555

553:                                              ; preds = %542
  %554 = add i64 %547, %546
  store i64 %554, i64* %24, align 8
  br label %555

555:                                              ; preds = %553, %551
  %556 = phi i64 [ %552, %551 ], [ %547, %553 ]
  %557 = inttoptr i64 %556 to %"class.v8::internal::RegExpTree"**
  %558 = load i32, i32* %323, align 4
  %559 = icmp sgt i32 %558, 0
  br i1 %559, label %560, label %571

560:                                              ; preds = %555
  %561 = inttoptr i64 %556 to i8*
  %562 = load i8*, i8** %340, align 8
  %563 = sext i32 %558 to i64
  %564 = shl nsw i64 %563, 3
  switch i64 %564, label %570 [
    i64 16, label %569
    i64 8, label %565
  ]

565:                                              ; preds = %560
  %566 = bitcast i8* %562 to i64*
  %567 = inttoptr i64 %556 to i64*
  %568 = load i64, i64* %566, align 1
  store i64 %568, i64* %567, align 1
  br label %571

569:                                              ; preds = %560
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %561, i8* align 1 %562, i64 16, i1 false) #12
  br label %571

570:                                              ; preds = %560
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %561, i8* align 1 %562, i64 %564, i1 false) #12
  br label %571

571:                                              ; preds = %570, %569, %565, %555
  store %"class.v8::internal::RegExpTree"** %557, %"class.v8::internal::RegExpTree"*** %321, align 8
  store i32 %544, i32* %322, align 8
  %572 = load i32, i32* %323, align 4
  br label %573

573:                                              ; preds = %571, %540, %511, %480
  %574 = phi i32 [ %572, %571 ], [ %537, %540 ], [ %512, %511 ], [ %477, %480 ]
  %575 = phi %"class.v8::internal::RegExpTree"** [ %557, %571 ], [ %541, %540 ], [ %497, %511 ], [ %481, %480 ]
  %576 = phi i64 [ %530, %571 ], [ %530, %540 ], [ %473, %511 ], [ %473, %480 ]
  %577 = add nsw i32 %574, 1
  store i32 %577, i32* %323, align 4
  %578 = sext i32 %574 to i64
  %579 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %575, i64 %578
  %580 = bitcast %"class.v8::internal::RegExpTree"** %579 to i64*
  store i64 %576, i64* %580, align 8
  %581 = add nuw nsw i64 %449, 1
  %582 = icmp eq i64 %581, %341
  br i1 %582, label %376, label %448

583:                                              ; preds = %200, %583
  %584 = phi i64 [ %614, %583 ], [ %202, %200 ]
  %585 = phi i64 [ %617, %583 ], [ %203, %200 ]
  %586 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %13, align 8
  %587 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %586, i64 %585
  %588 = bitcast %"class.v8::internal::RegExpTree"** %587 to i64*
  %589 = load i64, i64* %588, align 8
  %590 = add nsw i64 %584, 1
  %591 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %586, i64 %584
  %592 = bitcast %"class.v8::internal::RegExpTree"** %591 to i64*
  store i64 %589, i64* %592, align 8
  %593 = add nsw i64 %585, 1
  %594 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %13, align 8
  %595 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %594, i64 %593
  %596 = bitcast %"class.v8::internal::RegExpTree"** %595 to i64*
  %597 = load i64, i64* %596, align 8
  %598 = add nsw i64 %584, 2
  %599 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %594, i64 %590
  %600 = bitcast %"class.v8::internal::RegExpTree"** %599 to i64*
  store i64 %597, i64* %600, align 8
  %601 = add nsw i64 %585, 2
  %602 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %13, align 8
  %603 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %602, i64 %601
  %604 = bitcast %"class.v8::internal::RegExpTree"** %603 to i64*
  %605 = load i64, i64* %604, align 8
  %606 = add nsw i64 %584, 3
  %607 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %602, i64 %598
  %608 = bitcast %"class.v8::internal::RegExpTree"** %607 to i64*
  store i64 %605, i64* %608, align 8
  %609 = add nsw i64 %585, 3
  %610 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %13, align 8
  %611 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %610, i64 %609
  %612 = bitcast %"class.v8::internal::RegExpTree"** %611 to i64*
  %613 = load i64, i64* %612, align 8
  %614 = add nsw i64 %584, 4
  %615 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %610, i64 %606
  %616 = bitcast %"class.v8::internal::RegExpTree"** %615 to i64*
  store i64 %613, i64* %616, align 8
  %617 = add nsw i64 %585, 4
  %618 = icmp eq i64 %617, %180
  br i1 %618, label %619, label %583

619:                                              ; preds = %583, %200
  %620 = phi i64 [ %201, %200 ], [ %614, %583 ]
  %621 = trunc i64 %620 to i32
  br label %622

622:                                              ; preds = %176, %619, %440
  %623 = phi i32 [ %444, %440 ], [ %27, %176 ], [ %621, %619 ]
  call void @_ZN6icu_6913UnicodeStringD1Ev(%"class.icu_69::UnicodeString"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #12
  br label %624

624:                                              ; preds = %622, %38
  %625 = phi i32 [ %173, %622 ], [ %47, %38 ]
  %626 = phi i32 [ %623, %622 ], [ %43, %38 ]
  %627 = icmp slt i32 %625, %10
  br i1 %627, label %26, label %628

628:                                              ; preds = %624, %2
  %629 = phi i32 [ 0, %2 ], [ %626, %624 ]
  store i32 %629, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal17RegExpDisjunction30FixSingleCharacterDisjunctionsEPNS0_14RegExpCompilerE(%"class.v8::internal::RegExpDisjunction"* nocapture readonly, %"class.v8::internal::RegExpCompiler"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Zone"*, align 8
  %4 = alloca %"class.v8::base::Flags", align 4
  %5 = alloca %"class.v8::internal::ZoneList.553"*, align 8
  %6 = alloca %"class.v8::base::Flags.554", align 4
  %7 = bitcast %"class.v8::internal::Zone"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 15
  %9 = bitcast %"class.v8::internal::Zone"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.v8::internal::Zone"** %3 to i64*
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::RegExpDisjunction", %"class.v8::internal::RegExpDisjunction"* %0, i64 0, i32 1
  %13 = load %"class.v8::internal::ZoneList.559"*, %"class.v8::internal::ZoneList.559"** %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %13, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %327

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %13, i64 0, i32 0
  %19 = bitcast %"class.v8::base::Flags"* %4 to i8*
  %20 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %4, i64 0, i32 0
  %21 = bitcast %"class.v8::internal::ZoneList.553"** %5 to i8*
  %22 = bitcast %"class.v8::base::Flags.554"* %6 to i8*
  %23 = getelementptr inbounds %"class.v8::base::Flags.554", %"class.v8::base::Flags.554"* %6, i64 0, i32 0
  br label %24

24:                                               ; preds = %17, %323
  %25 = phi i32 [ 0, %17 ], [ %325, %323 ]
  %26 = phi i32 [ 0, %17 ], [ %324, %323 ]
  %27 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %18, align 8
  %28 = sext i32 %26 to i64
  %29 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %27, i64 %28
  %30 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %29, align 8
  %31 = bitcast %"class.v8::internal::RegExpTree"* %30 to i1 (%"class.v8::internal::RegExpTree"*)***
  %32 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %31, align 8
  %33 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %32, i64 20
  %34 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %33, align 8
  %35 = call zeroext i1 %34(%"class.v8::internal::RegExpTree"* %30) #12
  br i1 %35, label %46, label %36

36:                                               ; preds = %24
  %37 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %18, align 8
  %38 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %37, i64 %28
  %39 = bitcast %"class.v8::internal::RegExpTree"** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = add nsw i32 %25, 1
  %42 = sext i32 %25 to i64
  %43 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %37, i64 %42
  %44 = bitcast %"class.v8::internal::RegExpTree"** %43 to i64*
  store i64 %40, i64* %44, align 8
  %45 = add nsw i32 %26, 1
  br label %323

46:                                               ; preds = %24
  %47 = bitcast %"class.v8::internal::RegExpTree"* %30 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %48 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %47, align 8
  %49 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %48, i64 19
  %50 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %49, align 8
  %51 = call %"class.v8::internal::RegExpAtom"* %50(%"class.v8::internal::RegExpTree"* %30) #12
  %52 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %51, i64 0, i32 1, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %66, label %56

56:                                               ; preds = %46
  %57 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %18, align 8
  %58 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %57, i64 %28
  %59 = bitcast %"class.v8::internal::RegExpTree"** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = add nsw i32 %25, 1
  %62 = sext i32 %25 to i64
  %63 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %57, i64 %62
  %64 = bitcast %"class.v8::internal::RegExpTree"** %63 to i64*
  store i64 %60, i64* %64, align 8
  %65 = add nsw i32 %26, 1
  br label %323

66:                                               ; preds = %46
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #12
  %67 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %51, i64 0, i32 2, i32 0
  %68 = load i32, i32* %67, align 8
  store i32 %68, i32* %20, align 4
  %69 = add nsw i32 %26, 1
  %70 = icmp slt i32 %69, %15
  br i1 %70, label %71, label %128

71:                                               ; preds = %66
  %72 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %51, i64 0, i32 1, i32 0
  %73 = load i16*, i16** %72, align 8
  %74 = load i16, i16* %73, align 2
  %75 = and i16 %74, -1024
  %76 = icmp eq i16 %75, -9216
  %77 = zext i1 %76 to i8
  %78 = sext i32 %69 to i64
  br label %79

79:                                               ; preds = %106, %71
  %80 = phi i64 [ %78, %71 ], [ %114, %106 ]
  %81 = phi i32 [ %69, %71 ], [ %115, %106 ]
  %82 = phi i8 [ %77, %71 ], [ %113, %106 ]
  %83 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %18, align 8
  %84 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %83, i64 %80
  %85 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %84, align 8
  %86 = bitcast %"class.v8::internal::RegExpTree"* %85 to i1 (%"class.v8::internal::RegExpTree"*)***
  %87 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %86, align 8
  %88 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %87, i64 20
  %89 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %88, align 8
  %90 = call zeroext i1 %89(%"class.v8::internal::RegExpTree"* %85) #12
  br i1 %90, label %91, label %118

91:                                               ; preds = %79
  %92 = bitcast %"class.v8::internal::RegExpTree"* %85 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %93 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %92, align 8
  %94 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %93, i64 19
  %95 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %94, align 8
  %96 = call %"class.v8::internal::RegExpAtom"* %95(%"class.v8::internal::RegExpTree"* %85) #12
  %97 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %96, i64 0, i32 1, i32 1
  %98 = load i64, i64* %97, align 8
  %99 = trunc i64 %98 to i32
  %100 = icmp eq i32 %99, 1
  br i1 %100, label %101, label %120

101:                                              ; preds = %91
  %102 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %96, i64 0, i32 2, i32 0
  %103 = load i32, i32* %102, align 8
  %104 = load i32, i32* %20, align 4
  %105 = icmp eq i32 %103, %104
  br i1 %105, label %106, label %122

106:                                              ; preds = %101
  %107 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %96, i64 0, i32 1, i32 0
  %108 = load i16*, i16** %107, align 8
  %109 = load i16, i16* %108, align 2
  %110 = and i16 %109, -1024
  %111 = icmp eq i16 %110, -9216
  %112 = zext i1 %111 to i8
  %113 = or i8 %82, %112
  %114 = add nsw i64 %80, 1
  %115 = add nsw i32 %81, 1
  %116 = trunc i64 %114 to i32
  %117 = icmp eq i32 %15, %116
  br i1 %117, label %124, label %79

118:                                              ; preds = %79
  %119 = trunc i64 %80 to i32
  br label %124

120:                                              ; preds = %91
  %121 = trunc i64 %80 to i32
  br label %124

122:                                              ; preds = %101
  %123 = trunc i64 %80 to i32
  br label %124

124:                                              ; preds = %106, %122, %120, %118
  %125 = phi i8 [ %82, %118 ], [ %82, %120 ], [ %82, %122 ], [ %113, %106 ]
  %126 = phi i32 [ %119, %118 ], [ %121, %120 ], [ %123, %122 ], [ %115, %106 ]
  %127 = icmp sgt i32 %126, %69
  br i1 %127, label %158, label %128

128:                                              ; preds = %66, %124
  %129 = phi i32 [ %126, %124 ], [ %69, %66 ]
  %130 = icmp sgt i32 %129, %26
  br i1 %130, label %131, label %320

131:                                              ; preds = %128
  %132 = sext i32 %25 to i64
  %133 = sext i32 %129 to i64
  %134 = sub nsw i64 %133, %28
  %135 = xor i64 %28, -1
  %136 = add nsw i64 %135, %133
  %137 = and i64 %134, 3
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %153, label %139

139:                                              ; preds = %131, %139
  %140 = phi i64 [ %147, %139 ], [ %132, %131 ]
  %141 = phi i64 [ %150, %139 ], [ %28, %131 ]
  %142 = phi i64 [ %151, %139 ], [ %137, %131 ]
  %143 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %18, align 8
  %144 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %143, i64 %141
  %145 = bitcast %"class.v8::internal::RegExpTree"** %144 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = add nsw i64 %140, 1
  %148 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %143, i64 %140
  %149 = bitcast %"class.v8::internal::RegExpTree"** %148 to i64*
  store i64 %146, i64* %149, align 8
  %150 = add nsw i64 %141, 1
  %151 = add i64 %142, -1
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %139, !llvm.loop !6

153:                                              ; preds = %139, %131
  %154 = phi i64 [ undef, %131 ], [ %147, %139 ]
  %155 = phi i64 [ %132, %131 ], [ %147, %139 ]
  %156 = phi i64 [ %28, %131 ], [ %150, %139 ]
  %157 = icmp ult i64 %136, 3
  br i1 %157, label %317, label %281

158:                                              ; preds = %124
  %159 = sub i32 %126, %26
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12
  %160 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3, align 8
  %161 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %160, i64 0, i32 2
  %162 = load i64, i64* %161, align 8
  %163 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %160, i64 0, i32 3
  %164 = load i64, i64* %163, align 8
  %165 = sub i64 %164, %162
  %166 = icmp ult i64 %165, 16
  br i1 %166, label %167, label %170, !prof !2

167:                                              ; preds = %158
  %168 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %160, i64 16) #12
  %169 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3, align 8
  br label %172

170:                                              ; preds = %158
  %171 = add i64 %162, 16
  store i64 %171, i64* %161, align 8
  br label %172

172:                                              ; preds = %167, %170
  %173 = phi %"class.v8::internal::Zone"* [ %169, %167 ], [ %160, %170 ]
  %174 = phi i64 [ %168, %167 ], [ %162, %170 ]
  %175 = inttoptr i64 %174 to %"class.v8::internal::ZoneList.553"*
  %176 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %175, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %176, align 8
  %177 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %175, i64 0, i32 1
  store i32 2, i32* %177, align 8
  %178 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %175, i64 0, i32 2
  store i32 0, i32* %178, align 4
  %179 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %173, i64 0, i32 2
  %180 = load i64, i64* %179, align 8
  %181 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %173, i64 0, i32 3
  %182 = load i64, i64* %181, align 8
  %183 = sub i64 %182, %180
  %184 = icmp ult i64 %183, 16
  br i1 %184, label %185, label %187, !prof !2

185:                                              ; preds = %172
  %186 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %173, i64 16) #12
  br label %189

187:                                              ; preds = %172
  %188 = add i64 %180, 16
  store i64 %188, i64* %179, align 8
  br label %189

189:                                              ; preds = %185, %187
  %190 = phi i64 [ %186, %185 ], [ %180, %187 ]
  %191 = inttoptr i64 %190 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %191, %"class.v8::internal::CharacterRange"** %176, align 8
  store %"class.v8::internal::ZoneList.553"* %175, %"class.v8::internal::ZoneList.553"** %5, align 8
  %192 = icmp sgt i32 %159, 0
  br i1 %192, label %193, label %195

193:                                              ; preds = %189
  %194 = zext i32 %159 to i64
  br label %210

195:                                              ; preds = %272, %189
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #12
  %196 = load i32, i32* %20, align 4
  %197 = and i32 %196, 16
  %198 = icmp eq i32 %197, 0
  %199 = and i8 %125, 1
  %200 = icmp eq i8 %199, 0
  %201 = or i1 %200, %198
  %202 = select i1 %201, i32 0, i32 2
  store i32 %202, i32* %23, align 4
  %203 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3, align 8
  %204 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJRPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEERNSC_INS3_4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %203, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %3, %"class.v8::internal::ZoneList.553"** nonnull dereferenceable(8) %5, %"class.v8::base::Flags"* nonnull dereferenceable(4) %4, %"class.v8::base::Flags.554"* nonnull dereferenceable(4) %6)
  %205 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %204, i64 0, i32 0
  %206 = add nsw i32 %25, 1
  %207 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %18, align 8
  %208 = sext i32 %25 to i64
  %209 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %207, i64 %208
  store %"class.v8::internal::RegExpTree"* %205, %"class.v8::internal::RegExpTree"** %209, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12
  br label %320

210:                                              ; preds = %272, %193
  %211 = phi i64 [ 0, %193 ], [ %279, %272 ]
  %212 = add nsw i64 %211, %28
  %213 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %18, align 8
  %214 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %213, i64 %212
  %215 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %214, align 8
  %216 = bitcast %"class.v8::internal::RegExpTree"* %215 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %217 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %216, align 8
  %218 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %217, i64 19
  %219 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %218, align 8
  %220 = call %"class.v8::internal::RegExpAtom"* %219(%"class.v8::internal::RegExpTree"* %215) #12
  %221 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %5, align 8
  %222 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %220, i64 0, i32 1, i32 0
  %223 = load i16*, i16** %222, align 8
  %224 = load i16, i16* %223, align 2
  %225 = zext i16 %224 to i64
  %226 = shl nuw nsw i64 %225, 32
  %227 = or i64 %226, %225
  %228 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3, align 8
  %229 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %221, i64 0, i32 2
  %230 = load i32, i32* %229, align 4
  %231 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %221, i64 0, i32 1
  %232 = load i32, i32* %231, align 8
  %233 = icmp slt i32 %230, %232
  br i1 %233, label %234, label %237

234:                                              ; preds = %210
  %235 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %221, i64 0, i32 0
  %236 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %235, align 8
  br label %272

237:                                              ; preds = %210
  %238 = shl nsw i32 %232, 1
  %239 = or i32 %238, 1
  %240 = sext i32 %239 to i64
  %241 = shl nsw i64 %240, 3
  %242 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %228, i64 0, i32 2
  %243 = load i64, i64* %242, align 8
  %244 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %228, i64 0, i32 3
  %245 = load i64, i64* %244, align 8
  %246 = sub i64 %245, %243
  %247 = icmp ugt i64 %241, %246
  br i1 %247, label %248, label %250, !prof !2

248:                                              ; preds = %237
  %249 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %228, i64 %241) #12
  br label %252

250:                                              ; preds = %237
  %251 = add i64 %243, %241
  store i64 %251, i64* %242, align 8
  br label %252

252:                                              ; preds = %250, %248
  %253 = phi i64 [ %249, %248 ], [ %243, %250 ]
  %254 = inttoptr i64 %253 to %"class.v8::internal::CharacterRange"*
  %255 = load i32, i32* %229, align 4
  %256 = icmp sgt i32 %255, 0
  br i1 %256, label %257, label %269

257:                                              ; preds = %252
  %258 = inttoptr i64 %253 to i8*
  %259 = bitcast %"class.v8::internal::ZoneList.553"* %221 to i8**
  %260 = load i8*, i8** %259, align 8
  %261 = sext i32 %255 to i64
  %262 = shl nsw i64 %261, 3
  switch i64 %262, label %268 [
    i64 16, label %267
    i64 8, label %263
  ]

263:                                              ; preds = %257
  %264 = bitcast i8* %260 to i64*
  %265 = inttoptr i64 %253 to i64*
  %266 = load i64, i64* %264, align 1
  store i64 %266, i64* %265, align 1
  br label %269

267:                                              ; preds = %257
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %258, i8* align 1 %260, i64 16, i1 false) #12
  br label %269

268:                                              ; preds = %257
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %258, i8* align 1 %260, i64 %262, i1 false) #12
  br label %269

269:                                              ; preds = %268, %267, %263, %252
  %270 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %221, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %254, %"class.v8::internal::CharacterRange"** %270, align 8
  store i32 %239, i32* %231, align 8
  %271 = load i32, i32* %229, align 4
  br label %272

272:                                              ; preds = %234, %269
  %273 = phi i32 [ %230, %234 ], [ %271, %269 ]
  %274 = phi %"class.v8::internal::CharacterRange"* [ %236, %234 ], [ %254, %269 ]
  %275 = add nsw i32 %273, 1
  store i32 %275, i32* %229, align 4
  %276 = sext i32 %273 to i64
  %277 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %274, i64 %276
  %278 = bitcast %"class.v8::internal::CharacterRange"* %277 to i64*
  store i64 %227, i64* %278, align 4
  %279 = add nuw nsw i64 %211, 1
  %280 = icmp eq i64 %279, %194
  br i1 %280, label %195, label %210

281:                                              ; preds = %153, %281
  %282 = phi i64 [ %312, %281 ], [ %155, %153 ]
  %283 = phi i64 [ %315, %281 ], [ %156, %153 ]
  %284 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %18, align 8
  %285 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %284, i64 %283
  %286 = bitcast %"class.v8::internal::RegExpTree"** %285 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = add nsw i64 %282, 1
  %289 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %284, i64 %282
  %290 = bitcast %"class.v8::internal::RegExpTree"** %289 to i64*
  store i64 %287, i64* %290, align 8
  %291 = add nsw i64 %283, 1
  %292 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %18, align 8
  %293 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %292, i64 %291
  %294 = bitcast %"class.v8::internal::RegExpTree"** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = add nsw i64 %282, 2
  %297 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %292, i64 %288
  %298 = bitcast %"class.v8::internal::RegExpTree"** %297 to i64*
  store i64 %295, i64* %298, align 8
  %299 = add nsw i64 %283, 2
  %300 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %18, align 8
  %301 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %300, i64 %299
  %302 = bitcast %"class.v8::internal::RegExpTree"** %301 to i64*
  %303 = load i64, i64* %302, align 8
  %304 = add nsw i64 %282, 3
  %305 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %300, i64 %296
  %306 = bitcast %"class.v8::internal::RegExpTree"** %305 to i64*
  store i64 %303, i64* %306, align 8
  %307 = add nsw i64 %283, 3
  %308 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %18, align 8
  %309 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %308, i64 %307
  %310 = bitcast %"class.v8::internal::RegExpTree"** %309 to i64*
  %311 = load i64, i64* %310, align 8
  %312 = add nsw i64 %282, 4
  %313 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %308, i64 %304
  %314 = bitcast %"class.v8::internal::RegExpTree"** %313 to i64*
  store i64 %311, i64* %314, align 8
  %315 = add nsw i64 %283, 4
  %316 = icmp eq i64 %315, %133
  br i1 %316, label %317, label %281

317:                                              ; preds = %281, %153
  %318 = phi i64 [ %154, %153 ], [ %312, %281 ]
  %319 = trunc i64 %318 to i32
  br label %320

320:                                              ; preds = %317, %128, %195
  %321 = phi i32 [ %126, %195 ], [ %129, %128 ], [ %129, %317 ]
  %322 = phi i32 [ %206, %195 ], [ %25, %128 ], [ %319, %317 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #12
  br label %323

323:                                              ; preds = %56, %320, %36
  %324 = phi i32 [ %45, %36 ], [ %65, %56 ], [ %321, %320 ]
  %325 = phi i32 [ %41, %36 ], [ %61, %56 ], [ %322, %320 ]
  %326 = icmp slt i32 %324, %15
  br i1 %326, label %24, label %327

327:                                              ; preds = %323, %2
  %328 = phi i32 [ 0, %2 ], [ %325, %323 ]
  store i32 %328, i32* %14, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJRPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEERNSC_INS3_4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** dereferenceable(8), %"class.v8::internal::ZoneList.553"** dereferenceable(8), %"class.v8::base::Flags"* dereferenceable(4), %"class.v8::base::Flags.554"* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %9, %7
  %11 = icmp ult i64 %10, 32
  br i1 %11, label %12, label %14, !prof !2

12:                                               ; preds = %5
  %13 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 32) #12
  br label %16

14:                                               ; preds = %5
  %15 = add i64 %7, 32
  store i64 %15, i64* %6, align 8
  br label %16

16:                                               ; preds = %12, %14
  %17 = phi i64 [ %13, %12 ], [ %7, %14 ]
  %18 = inttoptr i64 %17 to %"class.v8::internal::RegExpCharacterClass"*
  %19 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1, align 8
  %20 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %2, align 8
  %21 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %3, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.v8::base::Flags.554", %"class.v8::base::Flags.554"* %4, i64 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %18, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal20RegExpCharacterClassE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %18, i64 0, i32 1, i32 0
  store %"class.v8::internal::ZoneList.553"* %20, %"class.v8::internal::ZoneList.553"** %26, align 8
  %27 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %18, i64 0, i32 1, i32 1
  store i16 0, i16* %27, align 8
  %28 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %18, i64 0, i32 2, i32 0
  store i32 %22, i32* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %18, i64 0, i32 3, i32 0
  store i32 %24, i32* %29, align 4
  %30 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %20, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %83

33:                                               ; preds = %16
  %34 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %20, i64 0, i32 1
  %35 = load i32, i32* %34, align 8
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %33
  %38 = bitcast %"class.v8::internal::ZoneList.553"* %20 to i64**
  %39 = load i64*, i64** %38, align 8
  store i32 1, i32* %30, align 4
  br label %79

40:                                               ; preds = %33
  %41 = shl nsw i32 %35, 1
  %42 = or i32 %41, 1
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 3
  %45 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 2
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 3
  %48 = load i64, i64* %47, align 8
  %49 = sub i64 %48, %46
  %50 = icmp ugt i64 %44, %49
  br i1 %50, label %51, label %53, !prof !2

51:                                               ; preds = %40
  %52 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %19, i64 %44) #12
  br label %55

53:                                               ; preds = %40
  %54 = add i64 %46, %44
  store i64 %54, i64* %45, align 8
  br label %55

55:                                               ; preds = %53, %51
  %56 = phi i64 [ %52, %51 ], [ %46, %53 ]
  %57 = inttoptr i64 %56 to %"class.v8::internal::CharacterRange"*
  %58 = load i32, i32* %30, align 4
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %60, label %72

60:                                               ; preds = %55
  %61 = inttoptr i64 %56 to i8*
  %62 = bitcast %"class.v8::internal::ZoneList.553"* %20 to i8**
  %63 = load i8*, i8** %62, align 8
  %64 = sext i32 %58 to i64
  %65 = shl nsw i64 %64, 3
  switch i64 %65, label %71 [
    i64 16, label %70
    i64 8, label %66
  ]

66:                                               ; preds = %60
  %67 = bitcast i8* %63 to i64*
  %68 = inttoptr i64 %56 to i64*
  %69 = load i64, i64* %67, align 1
  store i64 %69, i64* %68, align 1
  br label %72

70:                                               ; preds = %60
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %63, i64 16, i1 false) #12
  br label %72

71:                                               ; preds = %60
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %63, i64 %65, i1 false) #12
  br label %72

72:                                               ; preds = %71, %70, %66, %55
  %73 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %20, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %57, %"class.v8::internal::CharacterRange"** %73, align 8
  store i32 %42, i32* %34, align 8
  %74 = load i32, i32* %30, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %30, align 4
  %76 = sext i32 %74 to i64
  %77 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %57, i64 %76
  %78 = bitcast %"class.v8::internal::CharacterRange"* %77 to i64*
  br label %79

79:                                               ; preds = %72, %37
  %80 = phi i64* [ %78, %72 ], [ %39, %37 ]
  store i64 4785070309113856, i64* %80, align 4
  %81 = load i32, i32* %29, align 4
  %82 = xor i32 %81, 1
  store i32 %82, i32* %29, align 4
  br label %83

83:                                               ; preds = %16, %79
  ret %"class.v8::internal::RegExpCharacterClass"* %18
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal17RegExpDisjunction6ToNodeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpDisjunction"* nocapture readonly, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpDisjunction", %"class.v8::internal::RegExpDisjunction"* %0, i64 0, i32 1
  %5 = load %"class.v8::internal::ZoneList.559"*, %"class.v8::internal::ZoneList.559"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %5, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, 2
  br i1 %8, label %9, label %24

9:                                                ; preds = %3
  %10 = tail call zeroext i1 @_ZN2v88internal17RegExpDisjunction20SortConsecutiveAtomsEPNS0_14RegExpCompilerE(%"class.v8::internal::RegExpDisjunction"* %0, %"class.v8::internal::RegExpCompiler"* undef)
  br i1 %10, label %11, label %12

11:                                               ; preds = %9
  tail call void @_ZN2v88internal17RegExpDisjunction27RationalizeConsecutiveAtomsEPNS0_14RegExpCompilerE(%"class.v8::internal::RegExpDisjunction"* %0, %"class.v8::internal::RegExpCompiler"* %1)
  br label %12

12:                                               ; preds = %11, %9
  tail call void @_ZN2v88internal17RegExpDisjunction30FixSingleCharacterDisjunctionsEPNS0_14RegExpCompilerE(%"class.v8::internal::RegExpDisjunction"* %0, %"class.v8::internal::RegExpCompiler"* %1)
  %13 = load i32, i32* %6, align 4
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %24

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %5, i64 0, i32 0
  %17 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %16, align 8
  %18 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %17, align 8
  %19 = bitcast %"class.v8::internal::RegExpTree"* %18 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)***
  %20 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %20, i64 3
  %22 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %21, align 8
  %23 = tail call %"class.v8::internal::RegExpNode"* %22(%"class.v8::internal::RegExpTree"* %18, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %2) #12
  br label %149

24:                                               ; preds = %12, %3
  %25 = phi i32 [ %7, %3 ], [ %13, %12 ]
  %26 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 15
  %27 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %27, i64 0, i32 2
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %27, i64 0, i32 3
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %31, %29
  %33 = icmp ult i64 %32, 72
  br i1 %33, label %34, label %36, !prof !2

34:                                               ; preds = %24
  %35 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %27, i64 72) #12
  br label %38

36:                                               ; preds = %24
  %37 = add i64 %29, 72
  store i64 %37, i64* %28, align 8
  br label %38

38:                                               ; preds = %34, %36
  %39 = phi i64 [ %35, %34 ], [ %29, %36 ]
  %40 = inttoptr i64 %39 to %"class.v8::internal::ChoiceNode"*
  %41 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %40, i64 0, i32 0, i32 0
  %42 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %40, i64 0, i32 0, i32 1
  %43 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %40, i64 0, i32 0, i32 8
  %44 = bitcast %"class.v8::internal::RegExpNode"** %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 24, i1 false) #12
  store %"class.v8::internal::Zone"* %27, %"class.v8::internal::Zone"** %43, align 8
  %45 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %40, i64 0, i32 0, i32 7, i64 0
  %46 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 16, i1 false) #12
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2v88internal10ChoiceNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %41, align 8
  %47 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %40, i64 0, i32 1
  %48 = load i64, i64* %28, align 8
  %49 = load i64, i64* %30, align 8
  %50 = sub i64 %49, %48
  %51 = icmp ult i64 %50, 16
  br i1 %51, label %52, label %54, !prof !2

52:                                               ; preds = %38
  %53 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %27, i64 16) #12
  br label %56

54:                                               ; preds = %38
  %55 = add i64 %48, 16
  store i64 %55, i64* %28, align 8
  br label %56

56:                                               ; preds = %54, %52
  %57 = phi i64 [ %53, %52 ], [ %48, %54 ]
  %58 = inttoptr i64 %57 to %"class.v8::internal::ZoneList.555"*
  %59 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %58, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* null, %"class.v8::internal::GuardedAlternative"** %59, align 8
  %60 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %58, i64 0, i32 1
  store i32 %25, i32* %60, align 8
  %61 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %58, i64 0, i32 2
  store i32 0, i32* %61, align 4
  %62 = icmp sgt i32 %25, 0
  br i1 %62, label %63, label %74

63:                                               ; preds = %56
  %64 = sext i32 %25 to i64
  %65 = shl nsw i64 %64, 4
  %66 = load i64, i64* %28, align 8
  %67 = load i64, i64* %30, align 8
  %68 = sub i64 %67, %66
  %69 = icmp ugt i64 %65, %68
  br i1 %69, label %70, label %72, !prof !2

70:                                               ; preds = %63
  %71 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %27, i64 %65) #12
  br label %77

72:                                               ; preds = %63
  %73 = add i64 %66, %65
  store i64 %73, i64* %28, align 8
  br label %77

74:                                               ; preds = %56
  store %"class.v8::internal::GuardedAlternative"* null, %"class.v8::internal::GuardedAlternative"** %59, align 8
  store %"class.v8::internal::ZoneList.555"* %58, %"class.v8::internal::ZoneList.555"** %47, align 8
  %75 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %40, i64 0, i32 2
  store i8 0, i8* %75, align 8
  %76 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %40, i64 0, i32 3
  store i8 0, i8* %76, align 1
  br label %84

77:                                               ; preds = %70, %72
  %78 = phi i64 [ %71, %70 ], [ %66, %72 ]
  %79 = inttoptr i64 %78 to %"class.v8::internal::GuardedAlternative"*
  store %"class.v8::internal::GuardedAlternative"* %79, %"class.v8::internal::GuardedAlternative"** %59, align 8
  store %"class.v8::internal::ZoneList.555"* %58, %"class.v8::internal::ZoneList.555"** %47, align 8
  %80 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %40, i64 0, i32 2
  store i8 0, i8* %80, align 8
  %81 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %40, i64 0, i32 3
  store i8 0, i8* %81, align 1
  %82 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %5, i64 0, i32 0
  %83 = zext i32 %25 to i64
  br label %86

84:                                               ; preds = %145, %74
  %85 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %40, i64 0, i32 0
  br label %149

86:                                               ; preds = %145, %77
  %87 = phi i64 [ 0, %77 ], [ %147, %145 ]
  %88 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %82, align 8
  %89 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %88, i64 %87
  %90 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %89, align 8
  %91 = bitcast %"class.v8::internal::RegExpTree"* %90 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)***
  %92 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*** %91, align 8
  %93 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %92, i64 3
  %94 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %93, align 8
  %95 = tail call %"class.v8::internal::RegExpNode"* %94(%"class.v8::internal::RegExpTree"* %90, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %2) #12
  %96 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %47, align 8
  %97 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %43, align 8
  %98 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %96, i64 0, i32 2
  %99 = load i32, i32* %98, align 4
  %100 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %96, i64 0, i32 1
  %101 = load i32, i32* %100, align 8
  %102 = icmp slt i32 %99, %101
  br i1 %102, label %103, label %110

103:                                              ; preds = %86
  %104 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %96, i64 0, i32 0
  %105 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %104, align 8
  %106 = add nsw i32 %99, 1
  store i32 %106, i32* %98, align 4
  %107 = sext i32 %99 to i64
  %108 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %105, i64 %107, i32 0
  store %"class.v8::internal::RegExpNode"* %95, %"class.v8::internal::RegExpNode"** %108, align 8
  %109 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %105, i64 %107, i32 1
  br label %145

110:                                              ; preds = %86
  %111 = shl nsw i32 %101, 1
  %112 = or i32 %111, 1
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %97, i64 0, i32 2
  %116 = load i64, i64* %115, align 8
  %117 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %97, i64 0, i32 3
  %118 = load i64, i64* %117, align 8
  %119 = sub i64 %118, %116
  %120 = icmp ugt i64 %114, %119
  br i1 %120, label %121, label %123, !prof !2

121:                                              ; preds = %110
  %122 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %97, i64 %114) #12
  br label %125

123:                                              ; preds = %110
  %124 = add i64 %116, %114
  store i64 %124, i64* %115, align 8
  br label %125

125:                                              ; preds = %123, %121
  %126 = phi i64 [ %122, %121 ], [ %116, %123 ]
  %127 = inttoptr i64 %126 to %"class.v8::internal::GuardedAlternative"*
  %128 = load i32, i32* %98, align 4
  %129 = icmp sgt i32 %128, 0
  br i1 %129, label %130, label %138

130:                                              ; preds = %125
  %131 = inttoptr i64 %126 to i8*
  %132 = bitcast %"class.v8::internal::ZoneList.555"* %96 to i8**
  %133 = load i8*, i8** %132, align 8
  %134 = icmp eq i32 %128, 1
  %135 = sext i32 %128 to i64
  %136 = shl nsw i64 %135, 4
  %137 = select i1 %134, i64 16, i64 %136
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %131, i8* align 1 %133, i64 %137, i1 false) #12
  br label %138

138:                                              ; preds = %130, %125
  %139 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %96, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %127, %"class.v8::internal::GuardedAlternative"** %139, align 8
  store i32 %112, i32* %100, align 8
  %140 = load i32, i32* %98, align 4
  %141 = add nsw i32 %140, 1
  store i32 %141, i32* %98, align 4
  %142 = sext i32 %140 to i64
  %143 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %127, i64 %142, i32 0
  store %"class.v8::internal::RegExpNode"* %95, %"class.v8::internal::RegExpNode"** %143, align 8
  %144 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %127, i64 %142, i32 1
  br label %145

145:                                              ; preds = %103, %138
  %146 = phi %"class.v8::internal::ZoneList.556"** [ %109, %103 ], [ %144, %138 ]
  store %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::ZoneList.556"** %146, align 8
  %147 = add nuw nsw i64 %87, 1
  %148 = icmp eq i64 %147, %83
  br i1 %148, label %84, label %86

149:                                              ; preds = %15, %84
  %150 = phi %"class.v8::internal::RegExpNode"* [ %85, %84 ], [ %23, %15 ]
  ret %"class.v8::internal::RegExpNode"* %150
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal16RegExpQuantifier6ToNodeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpQuantifier"* nocapture readonly, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %0, i64 0, i32 6
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %0, i64 0, i32 1
  %12 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %11, align 8
  %13 = tail call %"class.v8::internal::RegExpNode"* @_ZN2v88internal16RegExpQuantifier6ToNodeEiibPNS0_10RegExpTreeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeEb(i32 %5, i32 %7, i1 zeroext %10, %"class.v8::internal::RegExpTree"* %12, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %2, i1 zeroext false)
  ret %"class.v8::internal::RegExpNode"* %13
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal16RegExpQuantifier6ToNodeEiibPNS0_10RegExpTreeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeEb(i32, i32, i1 zeroext, %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %8 = alloca i32, align 4
  %9 = alloca %"class.v8::internal::Zone"*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  %13 = alloca %"class.v8::internal::GuardedAlternative", align 8
  %14 = alloca %"class.v8::internal::GuardedAlternative", align 8
  store i32 %0, i32* %8, align 4
  %15 = icmp eq i32 %1, 0
  br i1 %15, label %460, label %16

16:                                               ; preds = %7
  %17 = bitcast %"class.v8::internal::RegExpTree"* %3 to i32 (%"class.v8::internal::RegExpTree"*)***
  %18 = load i32 (%"class.v8::internal::RegExpTree"*)**, i32 (%"class.v8::internal::RegExpTree"*)*** %17, align 8
  %19 = getelementptr inbounds i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %18, i64 7
  %20 = load i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %19, align 8
  %21 = tail call i32 %20(%"class.v8::internal::RegExpTree"* %3) #12
  %22 = icmp eq i32 %21, 0
  %23 = bitcast %"class.v8::internal::RegExpTree"* %3 to i64 (%"class.v8::internal::RegExpTree"*)***
  %24 = load i64 (%"class.v8::internal::RegExpTree"*)**, i64 (%"class.v8::internal::RegExpTree"*)*** %23, align 8
  %25 = getelementptr inbounds i64 (%"class.v8::internal::RegExpTree"*)*, i64 (%"class.v8::internal::RegExpTree"*)** %24, i64 9
  %26 = load i64 (%"class.v8::internal::RegExpTree"*)*, i64 (%"class.v8::internal::RegExpTree"*)** %25, align 8
  %27 = tail call i64 %26(%"class.v8::internal::RegExpTree"* %3) #12
  %28 = trunc i64 %27 to i32
  %29 = icmp eq i32 %28, -1
  %30 = bitcast %"class.v8::internal::Zone"** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #12
  %31 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %4, i64 0, i32 15
  %32 = bitcast %"class.v8::internal::Zone"** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %"class.v8::internal::Zone"** %9 to i64*
  store i64 %33, i64* %34, align 8
  %35 = inttoptr i64 %33 to %"class.v8::internal::Zone"*
  br i1 %22, label %36, label %44

36:                                               ; preds = %16
  %37 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %4, i64 0, i32 1
  %38 = load i32, i32* %37, align 8
  %39 = icmp sgt i32 %38, 65534
  br i1 %39, label %40, label %42

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %4, i64 0, i32 8
  store i8 1, i8* %41, align 1
  br label %331

42:                                               ; preds = %36
  %43 = add nsw i32 %38, 1
  store i32 %43, i32* %37, align 8
  br label %331

44:                                               ; preds = %16
  %45 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %4, i64 0, i32 10
  %46 = load i8, i8* %45, align 1, !range !3
  %47 = icmp eq i8 %46, 0
  %48 = xor i1 %29, true
  %49 = or i1 %47, %48
  br i1 %49, label %331, label %50

50:                                               ; preds = %44
  %51 = icmp ne i32 %1, %0
  %52 = zext i1 %51 to i32
  %53 = add nsw i32 %52, %0
  %54 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %4, i64 0, i32 12
  %55 = load i32, i32* %54, align 8
  %56 = icmp slt i32 %55, 7
  br i1 %56, label %57, label %82

57:                                               ; preds = %50
  %58 = icmp sgt i32 %53, 6
  br i1 %58, label %59, label %60

59:                                               ; preds = %57
  store i32 7, i32* %54, align 8
  br label %82

60:                                               ; preds = %57
  %61 = mul nsw i32 %53, %55
  %62 = icmp slt i32 %61, 7
  store i32 %61, i32* %54, align 8
  %63 = add i32 %0, -1
  %64 = icmp ult i32 %63, 3
  %65 = and i1 %64, %62
  br i1 %65, label %66, label %82

66:                                               ; preds = %60
  %67 = icmp eq i32 %1, 2147483647
  %68 = sub nsw i32 %1, %0
  %69 = select i1 %67, i32 2147483647, i32 %68
  %70 = tail call %"class.v8::internal::RegExpNode"* @_ZN2v88internal16RegExpQuantifier6ToNodeEiibPNS0_10RegExpTreeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeEb(i32 0, i32 %69, i1 zeroext %2, %"class.v8::internal::RegExpTree"* %3, %"class.v8::internal::RegExpCompiler"* %4, %"class.v8::internal::RegExpNode"* %5, i1 zeroext true)
  %71 = bitcast %"class.v8::internal::RegExpTree"* %3 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)***
  br label %72

72:                                               ; preds = %66, %72
  %73 = phi %"class.v8::internal::RegExpNode"* [ %70, %66 ], [ %78, %72 ]
  %74 = phi i32 [ 0, %66 ], [ %79, %72 ]
  %75 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*** %71, align 8
  %76 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %75, i64 3
  %77 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %76, align 8
  %78 = tail call %"class.v8::internal::RegExpNode"* %77(%"class.v8::internal::RegExpTree"* %3, %"class.v8::internal::RegExpCompiler"* %4, %"class.v8::internal::RegExpNode"* %73) #12
  %79 = add nuw nsw i32 %74, 1
  %80 = icmp slt i32 %79, %0
  br i1 %80, label %72, label %81

81:                                               ; preds = %72
  store i32 %55, i32* %54, align 8
  br label %458

82:                                               ; preds = %50, %59, %60
  store i32 %55, i32* %54, align 8
  %83 = icmp slt i32 %1, 4
  %84 = icmp eq i32 %0, 0
  %85 = and i1 %83, %84
  br i1 %85, label %86, label %331

86:                                               ; preds = %82
  br i1 %56, label %87, label %96

87:                                               ; preds = %86
  %88 = mul nsw i32 %55, %1
  %89 = icmp sgt i32 %88, 6
  store i32 %88, i32* %54, align 8
  br i1 %89, label %96, label %90

90:                                               ; preds = %87
  %91 = icmp sgt i32 %1, 0
  br i1 %91, label %92, label %329

92:                                               ; preds = %90
  %93 = bitcast i32* %10 to i8*
  %94 = bitcast %"class.v8::internal::RegExpTree"* %3 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)***
  %95 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %4, i64 0, i32 11
  br label %97

96:                                               ; preds = %86, %87
  store i32 %55, i32* %54, align 8
  br label %336

97:                                               ; preds = %327, %92
  %98 = phi %"class.v8::internal::Zone"* [ %35, %92 ], [ %328, %327 ]
  %99 = phi %"class.v8::internal::RegExpNode"* [ %5, %92 ], [ %318, %327 ]
  %100 = phi i32 [ 0, %92 ], [ %325, %327 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %93) #12
  store i32 2, i32* %10, align 4
  %101 = call %"class.v8::internal::ChoiceNode"* @_ZN2v88internal4Zone3NewINS0_10ChoiceNodeEJiRPS1_EEEPT_DpOT0_(%"class.v8::internal::Zone"* %98, i32* nonnull dereferenceable(4) %10, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %9)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %93) #12
  br i1 %2, label %102, label %209

102:                                              ; preds = %97
  %103 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*** %94, align 8
  %104 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %103, i64 3
  %105 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %104, align 8
  %106 = call %"class.v8::internal::RegExpNode"* %105(%"class.v8::internal::RegExpTree"* %3, %"class.v8::internal::RegExpCompiler"* %4, %"class.v8::internal::RegExpNode"* %99) #12
  %107 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %101, i64 0, i32 1
  %108 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %107, align 8
  %109 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %101, i64 0, i32 0, i32 8
  %110 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %109, align 8
  %111 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %108, i64 0, i32 2
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %108, i64 0, i32 1
  %114 = load i32, i32* %113, align 8
  %115 = icmp slt i32 %112, %114
  br i1 %115, label %116, label %123

116:                                              ; preds = %102
  %117 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %108, i64 0, i32 0
  %118 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %117, align 8
  %119 = add nsw i32 %112, 1
  store i32 %119, i32* %111, align 4
  %120 = sext i32 %112 to i64
  %121 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %118, i64 %120, i32 0
  store %"class.v8::internal::RegExpNode"* %106, %"class.v8::internal::RegExpNode"** %121, align 8
  %122 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %118, i64 %120, i32 1
  br label %158

123:                                              ; preds = %102
  %124 = shl nsw i32 %114, 1
  %125 = or i32 %124, 1
  %126 = sext i32 %125 to i64
  %127 = shl nsw i64 %126, 4
  %128 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %110, i64 0, i32 2
  %129 = load i64, i64* %128, align 8
  %130 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %110, i64 0, i32 3
  %131 = load i64, i64* %130, align 8
  %132 = sub i64 %131, %129
  %133 = icmp ugt i64 %127, %132
  br i1 %133, label %134, label %136, !prof !2

134:                                              ; preds = %123
  %135 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %110, i64 %127) #12
  br label %138

136:                                              ; preds = %123
  %137 = add i64 %129, %127
  store i64 %137, i64* %128, align 8
  br label %138

138:                                              ; preds = %136, %134
  %139 = phi i64 [ %135, %134 ], [ %129, %136 ]
  %140 = inttoptr i64 %139 to %"class.v8::internal::GuardedAlternative"*
  %141 = load i32, i32* %111, align 4
  %142 = icmp sgt i32 %141, 0
  br i1 %142, label %143, label %151

143:                                              ; preds = %138
  %144 = inttoptr i64 %139 to i8*
  %145 = bitcast %"class.v8::internal::ZoneList.555"* %108 to i8**
  %146 = load i8*, i8** %145, align 8
  %147 = icmp eq i32 %141, 1
  %148 = sext i32 %141 to i64
  %149 = shl nsw i64 %148, 4
  %150 = select i1 %147, i64 16, i64 %149
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %144, i8* align 1 %146, i64 %150, i1 false) #12
  br label %151

151:                                              ; preds = %143, %138
  %152 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %108, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %140, %"class.v8::internal::GuardedAlternative"** %152, align 8
  store i32 %125, i32* %113, align 8
  %153 = load i32, i32* %111, align 4
  %154 = add nsw i32 %153, 1
  store i32 %154, i32* %111, align 4
  %155 = sext i32 %153 to i64
  %156 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %140, i64 %155, i32 0
  store %"class.v8::internal::RegExpNode"* %106, %"class.v8::internal::RegExpNode"** %156, align 8
  %157 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %140, i64 %155, i32 1
  br label %158

158:                                              ; preds = %116, %151
  %159 = phi %"class.v8::internal::ZoneList.556"** [ %122, %116 ], [ %157, %151 ]
  store %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::ZoneList.556"** %159, align 8
  %160 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %107, align 8
  %161 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %109, align 8
  %162 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %160, i64 0, i32 2
  %163 = load i32, i32* %162, align 4
  %164 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %160, i64 0, i32 1
  %165 = load i32, i32* %164, align 8
  %166 = icmp slt i32 %163, %165
  br i1 %166, label %167, label %174

167:                                              ; preds = %158
  %168 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %160, i64 0, i32 0
  %169 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %168, align 8
  %170 = add nsw i32 %163, 1
  store i32 %170, i32* %162, align 4
  %171 = sext i32 %163 to i64
  %172 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %169, i64 %171, i32 0
  store %"class.v8::internal::RegExpNode"* %5, %"class.v8::internal::RegExpNode"** %172, align 8
  %173 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %169, i64 %171, i32 1
  br label %316

174:                                              ; preds = %158
  %175 = shl nsw i32 %165, 1
  %176 = or i32 %175, 1
  %177 = sext i32 %176 to i64
  %178 = shl nsw i64 %177, 4
  %179 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %161, i64 0, i32 2
  %180 = load i64, i64* %179, align 8
  %181 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %161, i64 0, i32 3
  %182 = load i64, i64* %181, align 8
  %183 = sub i64 %182, %180
  %184 = icmp ugt i64 %178, %183
  br i1 %184, label %185, label %187, !prof !2

185:                                              ; preds = %174
  %186 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %161, i64 %178) #12
  br label %189

187:                                              ; preds = %174
  %188 = add i64 %180, %178
  store i64 %188, i64* %179, align 8
  br label %189

189:                                              ; preds = %187, %185
  %190 = phi i64 [ %186, %185 ], [ %180, %187 ]
  %191 = inttoptr i64 %190 to %"class.v8::internal::GuardedAlternative"*
  %192 = load i32, i32* %162, align 4
  %193 = icmp sgt i32 %192, 0
  br i1 %193, label %194, label %202

194:                                              ; preds = %189
  %195 = inttoptr i64 %190 to i8*
  %196 = bitcast %"class.v8::internal::ZoneList.555"* %160 to i8**
  %197 = load i8*, i8** %196, align 8
  %198 = icmp eq i32 %192, 1
  %199 = sext i32 %192 to i64
  %200 = shl nsw i64 %199, 4
  %201 = select i1 %198, i64 16, i64 %200
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %195, i8* align 1 %197, i64 %201, i1 false) #12
  br label %202

202:                                              ; preds = %194, %189
  %203 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %160, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %191, %"class.v8::internal::GuardedAlternative"** %203, align 8
  store i32 %176, i32* %164, align 8
  %204 = load i32, i32* %162, align 4
  %205 = add nsw i32 %204, 1
  store i32 %205, i32* %162, align 4
  %206 = sext i32 %204 to i64
  %207 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %191, i64 %206, i32 0
  store %"class.v8::internal::RegExpNode"* %5, %"class.v8::internal::RegExpNode"** %207, align 8
  %208 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %191, i64 %206, i32 1
  br label %316

209:                                              ; preds = %97
  %210 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %101, i64 0, i32 1
  %211 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %210, align 8
  %212 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %101, i64 0, i32 0, i32 8
  %213 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %212, align 8
  %214 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %211, i64 0, i32 2
  %215 = load i32, i32* %214, align 4
  %216 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %211, i64 0, i32 1
  %217 = load i32, i32* %216, align 8
  %218 = icmp slt i32 %215, %217
  br i1 %218, label %219, label %226

219:                                              ; preds = %209
  %220 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %211, i64 0, i32 0
  %221 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %220, align 8
  %222 = add nsw i32 %215, 1
  store i32 %222, i32* %214, align 4
  %223 = sext i32 %215 to i64
  %224 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %221, i64 %223, i32 0
  store %"class.v8::internal::RegExpNode"* %5, %"class.v8::internal::RegExpNode"** %224, align 8
  %225 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %221, i64 %223, i32 1
  br label %261

226:                                              ; preds = %209
  %227 = shl nsw i32 %217, 1
  %228 = or i32 %227, 1
  %229 = sext i32 %228 to i64
  %230 = shl nsw i64 %229, 4
  %231 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %213, i64 0, i32 2
  %232 = load i64, i64* %231, align 8
  %233 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %213, i64 0, i32 3
  %234 = load i64, i64* %233, align 8
  %235 = sub i64 %234, %232
  %236 = icmp ugt i64 %230, %235
  br i1 %236, label %237, label %239, !prof !2

237:                                              ; preds = %226
  %238 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %213, i64 %230) #12
  br label %241

239:                                              ; preds = %226
  %240 = add i64 %232, %230
  store i64 %240, i64* %231, align 8
  br label %241

241:                                              ; preds = %239, %237
  %242 = phi i64 [ %238, %237 ], [ %232, %239 ]
  %243 = inttoptr i64 %242 to %"class.v8::internal::GuardedAlternative"*
  %244 = load i32, i32* %214, align 4
  %245 = icmp sgt i32 %244, 0
  br i1 %245, label %246, label %254

246:                                              ; preds = %241
  %247 = inttoptr i64 %242 to i8*
  %248 = bitcast %"class.v8::internal::ZoneList.555"* %211 to i8**
  %249 = load i8*, i8** %248, align 8
  %250 = icmp eq i32 %244, 1
  %251 = sext i32 %244 to i64
  %252 = shl nsw i64 %251, 4
  %253 = select i1 %250, i64 16, i64 %252
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %247, i8* align 1 %249, i64 %253, i1 false) #12
  br label %254

254:                                              ; preds = %246, %241
  %255 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %211, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %243, %"class.v8::internal::GuardedAlternative"** %255, align 8
  store i32 %228, i32* %216, align 8
  %256 = load i32, i32* %214, align 4
  %257 = add nsw i32 %256, 1
  store i32 %257, i32* %214, align 4
  %258 = sext i32 %256 to i64
  %259 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %243, i64 %258, i32 0
  store %"class.v8::internal::RegExpNode"* %5, %"class.v8::internal::RegExpNode"** %259, align 8
  %260 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %243, i64 %258, i32 1
  br label %261

261:                                              ; preds = %219, %254
  %262 = phi %"class.v8::internal::ZoneList.556"** [ %225, %219 ], [ %260, %254 ]
  store %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::ZoneList.556"** %262, align 8
  %263 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*** %94, align 8
  %264 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %263, i64 3
  %265 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %264, align 8
  %266 = call %"class.v8::internal::RegExpNode"* %265(%"class.v8::internal::RegExpTree"* %3, %"class.v8::internal::RegExpCompiler"* %4, %"class.v8::internal::RegExpNode"* %99) #12
  %267 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %210, align 8
  %268 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %212, align 8
  %269 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %267, i64 0, i32 2
  %270 = load i32, i32* %269, align 4
  %271 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %267, i64 0, i32 1
  %272 = load i32, i32* %271, align 8
  %273 = icmp slt i32 %270, %272
  br i1 %273, label %274, label %281

274:                                              ; preds = %261
  %275 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %267, i64 0, i32 0
  %276 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %275, align 8
  %277 = add nsw i32 %270, 1
  store i32 %277, i32* %269, align 4
  %278 = sext i32 %270 to i64
  %279 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %276, i64 %278, i32 0
  store %"class.v8::internal::RegExpNode"* %266, %"class.v8::internal::RegExpNode"** %279, align 8
  %280 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %276, i64 %278, i32 1
  br label %316

281:                                              ; preds = %261
  %282 = shl nsw i32 %272, 1
  %283 = or i32 %282, 1
  %284 = sext i32 %283 to i64
  %285 = shl nsw i64 %284, 4
  %286 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %268, i64 0, i32 2
  %287 = load i64, i64* %286, align 8
  %288 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %268, i64 0, i32 3
  %289 = load i64, i64* %288, align 8
  %290 = sub i64 %289, %287
  %291 = icmp ugt i64 %285, %290
  br i1 %291, label %292, label %294, !prof !2

292:                                              ; preds = %281
  %293 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %268, i64 %285) #12
  br label %296

294:                                              ; preds = %281
  %295 = add i64 %287, %285
  store i64 %295, i64* %286, align 8
  br label %296

296:                                              ; preds = %294, %292
  %297 = phi i64 [ %293, %292 ], [ %287, %294 ]
  %298 = inttoptr i64 %297 to %"class.v8::internal::GuardedAlternative"*
  %299 = load i32, i32* %269, align 4
  %300 = icmp sgt i32 %299, 0
  br i1 %300, label %301, label %309

301:                                              ; preds = %296
  %302 = inttoptr i64 %297 to i8*
  %303 = bitcast %"class.v8::internal::ZoneList.555"* %267 to i8**
  %304 = load i8*, i8** %303, align 8
  %305 = icmp eq i32 %299, 1
  %306 = sext i32 %299 to i64
  %307 = shl nsw i64 %306, 4
  %308 = select i1 %305, i64 16, i64 %307
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %302, i8* align 1 %304, i64 %308, i1 false) #12
  br label %309

309:                                              ; preds = %301, %296
  %310 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %267, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %298, %"class.v8::internal::GuardedAlternative"** %310, align 8
  store i32 %283, i32* %271, align 8
  %311 = load i32, i32* %269, align 4
  %312 = add nsw i32 %311, 1
  store i32 %312, i32* %269, align 4
  %313 = sext i32 %311 to i64
  %314 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %298, i64 %313, i32 0
  store %"class.v8::internal::RegExpNode"* %266, %"class.v8::internal::RegExpNode"** %314, align 8
  %315 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %298, i64 %313, i32 1
  br label %316

316:                                              ; preds = %309, %274, %202, %167
  %317 = phi %"class.v8::internal::ZoneList.556"** [ %315, %309 ], [ %280, %274 ], [ %208, %202 ], [ %173, %167 ]
  store %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::ZoneList.556"** %317, align 8
  %318 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %101, i64 0, i32 0
  br i1 %6, label %319, label %324

319:                                              ; preds = %316
  %320 = load i8, i8* %95, align 4, !range !3
  %321 = icmp eq i8 %320, 0
  br i1 %321, label %322, label %324

322:                                              ; preds = %319
  %323 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %101, i64 0, i32 2
  store i8 1, i8* %323, align 8
  br label %324

324:                                              ; preds = %319, %322, %316
  %325 = add nuw nsw i32 %100, 1
  %326 = icmp eq i32 %325, %1
  br i1 %326, label %329, label %327

327:                                              ; preds = %324
  %328 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8
  br label %97

329:                                              ; preds = %324, %90
  %330 = phi %"class.v8::internal::RegExpNode"* [ %5, %90 ], [ %318, %324 ]
  store i32 %55, i32* %54, align 8
  br label %458

331:                                              ; preds = %42, %40, %44, %82
  %332 = phi i32 [ -1, %82 ], [ -1, %44 ], [ %38, %40 ], [ %38, %42 ]
  %333 = icmp sgt i32 %0, 0
  %334 = icmp ne i32 %1, 2147483647
  %335 = or i1 %334, %333
  br i1 %335, label %336, label %347

336:                                              ; preds = %96, %331
  %337 = phi i1 [ true, %96 ], [ %334, %331 ]
  %338 = phi i1 [ false, %96 ], [ %333, %331 ]
  %339 = phi i32 [ -1, %96 ], [ %332, %331 ]
  %340 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %4, i64 0, i32 1
  %341 = load i32, i32* %340, align 8
  %342 = icmp sgt i32 %341, 65534
  br i1 %342, label %343, label %345

343:                                              ; preds = %336
  %344 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %4, i64 0, i32 8
  store i8 1, i8* %344, align 1
  br label %347

345:                                              ; preds = %336
  %346 = add nsw i32 %341, 1
  store i32 %346, i32* %340, align 8
  br label %347

347:                                              ; preds = %345, %343, %331
  %348 = phi i1 [ false, %331 ], [ true, %343 ], [ true, %345 ]
  %349 = phi i1 [ false, %331 ], [ %337, %343 ], [ %337, %345 ]
  %350 = phi i1 [ false, %331 ], [ %338, %343 ], [ %338, %345 ]
  %351 = phi i32 [ %332, %331 ], [ %339, %343 ], [ %339, %345 ]
  %352 = phi i32 [ -1, %331 ], [ %341, %343 ], [ %341, %345 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %11) #12
  %353 = load i32 (%"class.v8::internal::RegExpTree"*)**, i32 (%"class.v8::internal::RegExpTree"*)*** %17, align 8
  %354 = getelementptr inbounds i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %353, i64 7
  %355 = load i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %354, align 8
  %356 = tail call i32 %355(%"class.v8::internal::RegExpTree"* %3) #12
  %357 = icmp eq i32 %356, 0
  %358 = zext i1 %357 to i8
  store i8 %358, i8* %11, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %12) #12
  %359 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %4, i64 0, i32 11
  %360 = load i8, i8* %359, align 4, !range !3
  store i8 %360, i8* %12, align 1
  %361 = call %"class.v8::internal::LoopChoiceNode"* @_ZN2v88internal4Zone3NewINS0_14LoopChoiceNodeEJbbRiRPS1_EEEPT_DpOT0_(%"class.v8::internal::Zone"* %35, i8* nonnull dereferenceable(1) %11, i8* nonnull dereferenceable(1) %12, i32* nonnull dereferenceable(4) %8, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %9)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %12) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %11) #12
  br i1 %6, label %362, label %367

362:                                              ; preds = %347
  %363 = load i8, i8* %359, align 4, !range !3
  %364 = icmp eq i8 %363, 0
  br i1 %364, label %365, label %367

365:                                              ; preds = %362
  %366 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %361, i64 0, i32 0, i32 2
  store i8 1, i8* %366, align 8
  br label %367

367:                                              ; preds = %362, %365, %347
  %368 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %361, i64 0, i32 0, i32 0
  br i1 %348, label %369, label %372

369:                                              ; preds = %367
  %370 = call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode17IncrementRegisterEiPNS0_10RegExpNodeE(i32 %352, %"class.v8::internal::RegExpNode"* %368) #12
  %371 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %370, i64 0, i32 0, i32 0
  br label %372

372:                                              ; preds = %367, %369
  %373 = phi %"class.v8::internal::RegExpNode"* [ %371, %369 ], [ %368, %367 ]
  br i1 %22, label %374, label %378

374:                                              ; preds = %372
  %375 = load i32, i32* %8, align 4
  %376 = call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode15EmptyMatchCheckEiiiPNS0_10RegExpNodeE(i32 %351, i32 %352, i32 %375, %"class.v8::internal::RegExpNode"* %373) #12
  %377 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %376, i64 0, i32 0, i32 0
  br label %378

378:                                              ; preds = %374, %372
  %379 = phi %"class.v8::internal::RegExpNode"* [ %377, %374 ], [ %373, %372 ]
  %380 = bitcast %"class.v8::internal::RegExpTree"* %3 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)***
  %381 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*** %380, align 8
  %382 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %381, i64 3
  %383 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %382, align 8
  %384 = call %"class.v8::internal::RegExpNode"* %383(%"class.v8::internal::RegExpTree"* %3, %"class.v8::internal::RegExpCompiler"* %4, %"class.v8::internal::RegExpNode"* %379) #12
  br i1 %22, label %385, label %388

385:                                              ; preds = %378
  %386 = call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13StorePositionEibPNS0_10RegExpNodeE(i32 %351, i1 zeroext false, %"class.v8::internal::RegExpNode"* %384) #12
  %387 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %386, i64 0, i32 0, i32 0
  br label %388

388:                                              ; preds = %385, %378
  %389 = phi %"class.v8::internal::RegExpNode"* [ %387, %385 ], [ %384, %378 ]
  br i1 %29, label %393, label %390

390:                                              ; preds = %388
  %391 = call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13ClearCapturesENS0_8IntervalEPNS0_10RegExpNodeE(i64 %27, %"class.v8::internal::RegExpNode"* %389) #12
  %392 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %391, i64 0, i32 0, i32 0
  br label %393

393:                                              ; preds = %388, %390
  %394 = phi %"class.v8::internal::RegExpNode"* [ %392, %390 ], [ %389, %388 ]
  %395 = bitcast %"class.v8::internal::GuardedAlternative"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %395) #12
  %396 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %13, i64 0, i32 0
  store %"class.v8::internal::RegExpNode"* %394, %"class.v8::internal::RegExpNode"** %396, align 8
  %397 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %13, i64 0, i32 1
  store %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::ZoneList.556"** %397, align 8
  br i1 %349, label %398, label %417

398:                                              ; preds = %393
  %399 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8
  %400 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %399, i64 0, i32 2
  %401 = load i64, i64* %400, align 8
  %402 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %399, i64 0, i32 3
  %403 = load i64, i64* %402, align 8
  %404 = sub i64 %403, %401
  %405 = icmp ult i64 %404, 16
  br i1 %405, label %406, label %408, !prof !2

406:                                              ; preds = %398
  %407 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %399, i64 16) #12
  br label %410

408:                                              ; preds = %398
  %409 = add i64 %401, 16
  store i64 %409, i64* %400, align 8
  br label %410

410:                                              ; preds = %406, %408
  %411 = phi i64 [ %407, %406 ], [ %401, %408 ]
  %412 = inttoptr i64 %411 to %"class.v8::internal::Guard"*
  %413 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %412, i64 0, i32 0
  store i32 %352, i32* %413, align 4
  %414 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %412, i64 0, i32 1
  store i32 0, i32* %414, align 4
  %415 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %412, i64 0, i32 2
  store i32 %1, i32* %415, align 4
  %416 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8
  call void @_ZN2v88internal18GuardedAlternative8AddGuardEPNS0_5GuardEPNS0_4ZoneE(%"class.v8::internal::GuardedAlternative"* nonnull %13, %"class.v8::internal::Guard"* %412, %"class.v8::internal::Zone"* %416) #12
  br label %417

417:                                              ; preds = %410, %393
  %418 = bitcast %"class.v8::internal::GuardedAlternative"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %418) #12
  %419 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %14, i64 0, i32 0
  store %"class.v8::internal::RegExpNode"* %5, %"class.v8::internal::RegExpNode"** %419, align 8
  %420 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %14, i64 0, i32 1
  store %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::ZoneList.556"** %420, align 8
  br i1 %350, label %421, label %441

421:                                              ; preds = %417
  %422 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %31, align 8
  %423 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %422, i64 0, i32 2
  %424 = load i64, i64* %423, align 8
  %425 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %422, i64 0, i32 3
  %426 = load i64, i64* %425, align 8
  %427 = sub i64 %426, %424
  %428 = icmp ult i64 %427, 16
  br i1 %428, label %429, label %431, !prof !2

429:                                              ; preds = %421
  %430 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %422, i64 16) #12
  br label %433

431:                                              ; preds = %421
  %432 = add i64 %424, 16
  store i64 %432, i64* %423, align 8
  br label %433

433:                                              ; preds = %429, %431
  %434 = phi i64 [ %430, %429 ], [ %424, %431 ]
  %435 = inttoptr i64 %434 to %"class.v8::internal::Guard"*
  %436 = load i32, i32* %8, align 4
  %437 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %435, i64 0, i32 0
  store i32 %352, i32* %437, align 4
  %438 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %435, i64 0, i32 1
  store i32 1, i32* %438, align 4
  %439 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %435, i64 0, i32 2
  store i32 %436, i32* %439, align 4
  %440 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8
  call void @_ZN2v88internal18GuardedAlternative8AddGuardEPNS0_5GuardEPNS0_4ZoneE(%"class.v8::internal::GuardedAlternative"* nonnull %14, %"class.v8::internal::Guard"* %435, %"class.v8::internal::Zone"* %440) #12
  br label %441

441:                                              ; preds = %433, %417
  br i1 %2, label %442, label %447

442:                                              ; preds = %441
  %443 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %396, align 8
  %444 = load %"class.v8::internal::ZoneList.556"*, %"class.v8::internal::ZoneList.556"** %397, align 8
  call void @_ZN2v88internal14LoopChoiceNode18AddLoopAlternativeENS0_18GuardedAlternativeE(%"class.v8::internal::LoopChoiceNode"* %361, %"class.v8::internal::RegExpNode"* %443, %"class.v8::internal::ZoneList.556"* %444) #12
  %445 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %419, align 8
  %446 = load %"class.v8::internal::ZoneList.556"*, %"class.v8::internal::ZoneList.556"** %420, align 8
  call void @_ZN2v88internal14LoopChoiceNode22AddContinueAlternativeENS0_18GuardedAlternativeE(%"class.v8::internal::LoopChoiceNode"* %361, %"class.v8::internal::RegExpNode"* %445, %"class.v8::internal::ZoneList.556"* %446) #12
  br label %452

447:                                              ; preds = %441
  %448 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %419, align 8
  %449 = load %"class.v8::internal::ZoneList.556"*, %"class.v8::internal::ZoneList.556"** %420, align 8
  call void @_ZN2v88internal14LoopChoiceNode22AddContinueAlternativeENS0_18GuardedAlternativeE(%"class.v8::internal::LoopChoiceNode"* %361, %"class.v8::internal::RegExpNode"* %448, %"class.v8::internal::ZoneList.556"* %449) #12
  %450 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %396, align 8
  %451 = load %"class.v8::internal::ZoneList.556"*, %"class.v8::internal::ZoneList.556"** %397, align 8
  call void @_ZN2v88internal14LoopChoiceNode18AddLoopAlternativeENS0_18GuardedAlternativeE(%"class.v8::internal::LoopChoiceNode"* %361, %"class.v8::internal::RegExpNode"* %450, %"class.v8::internal::ZoneList.556"* %451) #12
  br label %452

452:                                              ; preds = %447, %442
  br i1 %348, label %453, label %456

453:                                              ; preds = %452
  %454 = call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode18SetRegisterForLoopEiiPNS0_10RegExpNodeE(i32 %352, i32 0, %"class.v8::internal::RegExpNode"* %368) #12
  %455 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %454, i64 0, i32 0, i32 0
  br label %456

456:                                              ; preds = %452, %453
  %457 = phi %"class.v8::internal::RegExpNode"* [ %455, %453 ], [ %368, %452 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %418) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %395) #12
  br label %458

458:                                              ; preds = %329, %81, %456
  %459 = phi %"class.v8::internal::RegExpNode"* [ %457, %456 ], [ %330, %329 ], [ %78, %81 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #12
  br label %460

460:                                              ; preds = %7, %458
  %461 = phi %"class.v8::internal::RegExpNode"* [ %459, %458 ], [ %5, %7 ]
  ret %"class.v8::internal::RegExpNode"* %461
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal15RegExpAssertion6ToNodeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpAssertion"* nocapture readonly, %"class.v8::internal::RegExpCompiler"* nocapture, %"class.v8::internal::RegExpNode"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::Zone"*, align 8
  %5 = alloca i32, align 4
  %6 = bitcast %"class.v8::internal::Zone"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 15
  %8 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7, align 8
  store %"class.v8::internal::Zone"* %8, %"class.v8::internal::Zone"** %4, align 8
  %9 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  switch i32 %10, label %386 [
    i32 0, label %11
    i32 1, label %39
    i32 4, label %67
    i32 5, label %102
    i32 3, label %137
    i32 2, label %165
  ]

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 8
  %13 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %13, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %13, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %15
  %19 = icmp ult i64 %18, 72
  br i1 %19, label %20, label %22, !prof !2

20:                                               ; preds = %11
  %21 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %13, i64 72) #12
  br label %24

22:                                               ; preds = %11
  %23 = add i64 %15, 72
  store i64 %23, i64* %14, align 8
  br label %24

24:                                               ; preds = %20, %22
  %25 = phi i64 [ %21, %20 ], [ %15, %22 ]
  %26 = inttoptr i64 %25 to %"class.v8::internal::AssertionNode"*
  %27 = bitcast %"class.v8::internal::Zone"** %12 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %26, i64 0, i32 0, i32 0, i32 0
  %30 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %26, i64 0, i32 0, i32 0, i32 1
  %31 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %26, i64 0, i32 0, i32 0, i32 8
  %32 = bitcast %"class.v8::internal::RegExpNode"** %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #12
  %33 = bitcast %"class.v8::internal::Zone"** %31 to i64*
  store i64 %28, i64* %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %26, i64 0, i32 0, i32 0, i32 7, i64 0
  %35 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 16, i1 false) #12
  %36 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %26, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::RegExpNode"** %36, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal13AssertionNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %29, align 8
  %37 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %26, i64 0, i32 1
  store i32 4, i32* %37, align 8
  %38 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %26, i64 0, i32 0, i32 0
  br label %387

39:                                               ; preds = %3
  %40 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 8
  %41 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %41, i64 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %41, i64 0, i32 3
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %45, %43
  %47 = icmp ult i64 %46, 72
  br i1 %47, label %48, label %50, !prof !2

48:                                               ; preds = %39
  %49 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %41, i64 72) #12
  br label %52

50:                                               ; preds = %39
  %51 = add i64 %43, 72
  store i64 %51, i64* %42, align 8
  br label %52

52:                                               ; preds = %48, %50
  %53 = phi i64 [ %49, %48 ], [ %43, %50 ]
  %54 = inttoptr i64 %53 to %"class.v8::internal::AssertionNode"*
  %55 = bitcast %"class.v8::internal::Zone"** %40 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %54, i64 0, i32 0, i32 0, i32 0
  %58 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %54, i64 0, i32 0, i32 0, i32 1
  %59 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %54, i64 0, i32 0, i32 0, i32 8
  %60 = bitcast %"class.v8::internal::RegExpNode"** %58 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 24, i1 false) #12
  %61 = bitcast %"class.v8::internal::Zone"** %59 to i64*
  store i64 %56, i64* %61, align 8
  %62 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %54, i64 0, i32 0, i32 0, i32 7, i64 0
  %63 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 16, i1 false) #12
  %64 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %54, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::RegExpNode"** %64, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal13AssertionNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %57, align 8
  %65 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %54, i64 0, i32 1
  store i32 1, i32* %65, align 8
  %66 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %54, i64 0, i32 0, i32 0
  br label %387

67:                                               ; preds = %3
  %68 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %0, i64 0, i32 2, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = and i32 %69, 18
  %71 = icmp eq i32 %70, 18
  br i1 %71, label %72, label %74

72:                                               ; preds = %67
  %73 = tail call fastcc %"class.v8::internal::RegExpNode"* @_ZN2v88internal12_GLOBAL__N_129BoundaryAssertionAsLookaroundEPNS0_14RegExpCompilerEPNS0_10RegExpNodeENS0_15RegExpAssertion13AssertionTypeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %2, i32 4, i32 %69)
  br label %387

74:                                               ; preds = %67
  %75 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 8
  %76 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %75, align 8
  %77 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %76, i64 0, i32 2
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %76, i64 0, i32 3
  %80 = load i64, i64* %79, align 8
  %81 = sub i64 %80, %78
  %82 = icmp ult i64 %81, 72
  br i1 %82, label %83, label %85, !prof !2

83:                                               ; preds = %74
  %84 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %76, i64 72) #12
  br label %87

85:                                               ; preds = %74
  %86 = add i64 %78, 72
  store i64 %86, i64* %77, align 8
  br label %87

87:                                               ; preds = %83, %85
  %88 = phi i64 [ %84, %83 ], [ %78, %85 ]
  %89 = inttoptr i64 %88 to %"class.v8::internal::AssertionNode"*
  %90 = bitcast %"class.v8::internal::Zone"** %75 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %89, i64 0, i32 0, i32 0, i32 0
  %93 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %89, i64 0, i32 0, i32 0, i32 1
  %94 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %89, i64 0, i32 0, i32 0, i32 8
  %95 = bitcast %"class.v8::internal::RegExpNode"** %93 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #12
  %96 = bitcast %"class.v8::internal::Zone"** %94 to i64*
  store i64 %91, i64* %96, align 8
  %97 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %89, i64 0, i32 0, i32 0, i32 7, i64 0
  %98 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %97 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 16, i1 false) #12
  %99 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %89, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::RegExpNode"** %99, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal13AssertionNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %92, align 8
  %100 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %89, i64 0, i32 1
  store i32 2, i32* %100, align 8
  %101 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %89, i64 0, i32 0, i32 0
  br label %387

102:                                              ; preds = %3
  %103 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %0, i64 0, i32 2, i32 0
  %104 = load i32, i32* %103, align 4
  %105 = and i32 %104, 18
  %106 = icmp eq i32 %105, 18
  br i1 %106, label %107, label %109

107:                                              ; preds = %102
  %108 = tail call fastcc %"class.v8::internal::RegExpNode"* @_ZN2v88internal12_GLOBAL__N_129BoundaryAssertionAsLookaroundEPNS0_14RegExpCompilerEPNS0_10RegExpNodeENS0_15RegExpAssertion13AssertionTypeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %2, i32 5, i32 %104)
  br label %387

109:                                              ; preds = %102
  %110 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 8
  %111 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %110, align 8
  %112 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %111, i64 0, i32 2
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %111, i64 0, i32 3
  %115 = load i64, i64* %114, align 8
  %116 = sub i64 %115, %113
  %117 = icmp ult i64 %116, 72
  br i1 %117, label %118, label %120, !prof !2

118:                                              ; preds = %109
  %119 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %111, i64 72) #12
  br label %122

120:                                              ; preds = %109
  %121 = add i64 %113, 72
  store i64 %121, i64* %112, align 8
  br label %122

122:                                              ; preds = %118, %120
  %123 = phi i64 [ %119, %118 ], [ %113, %120 ]
  %124 = inttoptr i64 %123 to %"class.v8::internal::AssertionNode"*
  %125 = bitcast %"class.v8::internal::Zone"** %110 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %124, i64 0, i32 0, i32 0, i32 0
  %128 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %124, i64 0, i32 0, i32 0, i32 1
  %129 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %124, i64 0, i32 0, i32 0, i32 8
  %130 = bitcast %"class.v8::internal::RegExpNode"** %128 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %130, i8 0, i64 24, i1 false) #12
  %131 = bitcast %"class.v8::internal::Zone"** %129 to i64*
  store i64 %126, i64* %131, align 8
  %132 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %124, i64 0, i32 0, i32 0, i32 7, i64 0
  %133 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %132 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %133, i8 0, i64 16, i1 false) #12
  %134 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %124, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::RegExpNode"** %134, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal13AssertionNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %127, align 8
  %135 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %124, i64 0, i32 1
  store i32 3, i32* %135, align 8
  %136 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %124, i64 0, i32 0, i32 0
  br label %387

137:                                              ; preds = %3
  %138 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 8
  %139 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %138, align 8
  %140 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %139, i64 0, i32 2
  %141 = load i64, i64* %140, align 8
  %142 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %139, i64 0, i32 3
  %143 = load i64, i64* %142, align 8
  %144 = sub i64 %143, %141
  %145 = icmp ult i64 %144, 72
  br i1 %145, label %146, label %148, !prof !2

146:                                              ; preds = %137
  %147 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %139, i64 72) #12
  br label %150

148:                                              ; preds = %137
  %149 = add i64 %141, 72
  store i64 %149, i64* %140, align 8
  br label %150

150:                                              ; preds = %146, %148
  %151 = phi i64 [ %147, %146 ], [ %141, %148 ]
  %152 = inttoptr i64 %151 to %"class.v8::internal::AssertionNode"*
  %153 = bitcast %"class.v8::internal::Zone"** %138 to i64*
  %154 = load i64, i64* %153, align 8
  %155 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %152, i64 0, i32 0, i32 0, i32 0
  %156 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %152, i64 0, i32 0, i32 0, i32 1
  %157 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %152, i64 0, i32 0, i32 0, i32 8
  %158 = bitcast %"class.v8::internal::RegExpNode"** %156 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %158, i8 0, i64 24, i1 false) #12
  %159 = bitcast %"class.v8::internal::Zone"** %157 to i64*
  store i64 %154, i64* %159, align 8
  %160 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %152, i64 0, i32 0, i32 0, i32 7, i64 0
  %161 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %160 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %161, i8 0, i64 16, i1 false) #12
  %162 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %152, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::RegExpNode"** %162, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal13AssertionNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %155, align 8
  %163 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %152, i64 0, i32 1
  store i32 0, i32* %163, align 8
  %164 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %152, i64 0, i32 0, i32 0
  br label %387

165:                                              ; preds = %3
  %166 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 1
  %167 = load i32, i32* %166, align 8
  %168 = icmp sgt i32 %167, 65534
  br i1 %168, label %169, label %171

169:                                              ; preds = %165
  %170 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 8
  store i8 1, i8* %170, align 1
  br label %174

171:                                              ; preds = %165
  %172 = add nsw i32 %167, 1
  store i32 %172, i32* %166, align 8
  %173 = icmp eq i32 %167, 65534
  br i1 %173, label %174, label %177

174:                                              ; preds = %169, %171
  %175 = phi i32 [ %167, %169 ], [ 65535, %171 ]
  %176 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 8
  store i8 1, i8* %176, align 1
  br label %179

177:                                              ; preds = %171
  %178 = add nsw i32 %167, 2
  store i32 %178, i32* %166, align 8
  br label %179

179:                                              ; preds = %174, %177
  %180 = phi i32 [ %175, %174 ], [ %172, %177 ]
  %181 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %181) #12
  store i32 2, i32* %5, align 4
  %182 = call %"class.v8::internal::ChoiceNode"* @_ZN2v88internal4Zone3NewINS0_10ChoiceNodeEJiRPS1_EEEPT_DpOT0_(%"class.v8::internal::Zone"* %8, i32* nonnull dereferenceable(4) %5, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %181) #12
  %183 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %184 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %183, i64 0, i32 2
  %185 = load i64, i64* %184, align 8
  %186 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %183, i64 0, i32 3
  %187 = load i64, i64* %186, align 8
  %188 = sub i64 %187, %185
  %189 = icmp ult i64 %188, 16
  br i1 %189, label %190, label %193, !prof !2

190:                                              ; preds = %179
  %191 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %183, i64 16) #12
  %192 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  br label %195

193:                                              ; preds = %179
  %194 = add i64 %185, 16
  store i64 %194, i64* %184, align 8
  br label %195

195:                                              ; preds = %190, %193
  %196 = phi %"class.v8::internal::Zone"* [ %192, %190 ], [ %183, %193 ]
  %197 = phi i64 [ %191, %190 ], [ %185, %193 ]
  %198 = inttoptr i64 %197 to %"class.v8::internal::ZoneList.553"*
  %199 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %198, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %199, align 8
  %200 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %198, i64 0, i32 1
  store i32 3, i32* %200, align 8
  %201 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %198, i64 0, i32 2
  store i32 0, i32* %201, align 4
  %202 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %196, i64 0, i32 2
  %203 = load i64, i64* %202, align 8
  %204 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %196, i64 0, i32 3
  %205 = load i64, i64* %204, align 8
  %206 = sub i64 %205, %203
  %207 = icmp ult i64 %206, 24
  br i1 %207, label %208, label %210, !prof !2

208:                                              ; preds = %195
  %209 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %196, i64 24) #12
  br label %212

210:                                              ; preds = %195
  %211 = add i64 %203, 24
  store i64 %211, i64* %202, align 8
  br label %212

212:                                              ; preds = %208, %210
  %213 = phi i64 [ %209, %208 ], [ %203, %210 ]
  %214 = inttoptr i64 %213 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %214, %"class.v8::internal::CharacterRange"** %199, align 8
  %215 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  call void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEPNS0_4ZoneE(i8 signext 110, %"class.v8::internal::ZoneList.553"* %198, %"class.v8::internal::Zone"* %215) #12
  %216 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %217 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %216, i64 0, i32 2
  %218 = load i64, i64* %217, align 8
  %219 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %216, i64 0, i32 3
  %220 = load i64, i64* %219, align 8
  %221 = sub i64 %220, %218
  %222 = icmp ult i64 %221, 32
  br i1 %222, label %223, label %225, !prof !2

223:                                              ; preds = %212
  %224 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %216, i64 32) #12
  br label %227

225:                                              ; preds = %212
  %226 = add i64 %218, 32
  store i64 %226, i64* %217, align 8
  br label %227

227:                                              ; preds = %223, %225
  %228 = phi i64 [ %224, %223 ], [ %218, %225 ]
  %229 = inttoptr i64 %228 to %"class.v8::internal::RegExpCharacterClass"*
  %230 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %229, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal20RegExpCharacterClassE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %230, align 8
  %231 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %229, i64 0, i32 1, i32 0
  store %"class.v8::internal::ZoneList.553"* null, %"class.v8::internal::ZoneList.553"** %231, align 8
  %232 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %229, i64 0, i32 1, i32 1
  store i16 110, i16* %232, align 8
  %233 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %229, i64 0, i32 2, i32 0
  store i32 0, i32* %233, align 8
  %234 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %229, i64 0, i32 3, i32 0
  store i32 0, i32* %234, align 4
  %235 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %236 = call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode23PositiveSubmatchSuccessEiiiiPNS0_10RegExpNodeE(i32 %167, i32 %180, i32 0, i32 -1, %"class.v8::internal::RegExpNode"* %2) #12
  %237 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %235, i64 0, i32 2
  %238 = load i64, i64* %237, align 8
  %239 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %235, i64 0, i32 3
  %240 = load i64, i64* %239, align 8
  %241 = sub i64 %240, %238
  %242 = icmp ult i64 %241, 80
  br i1 %242, label %243, label %245, !prof !2

243:                                              ; preds = %227
  %244 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %235, i64 80) #12
  br label %247

245:                                              ; preds = %227
  %246 = add i64 %238, 80
  store i64 %246, i64* %237, align 8
  br label %247

247:                                              ; preds = %243, %245
  %248 = phi i64 [ %244, %243 ], [ %238, %245 ]
  %249 = inttoptr i64 %248 to %"class.v8::internal::TextNode"*
  %250 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %236, i64 0, i32 0, i32 0
  call void @_ZN2v88internal8TextNodeC2EPNS0_20RegExpCharacterClassEbPNS0_10RegExpNodeE(%"class.v8::internal::TextNode"* %249, %"class.v8::internal::RegExpCharacterClass"* %229, i1 zeroext false, %"class.v8::internal::RegExpNode"* %250) #12
  %251 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %249, i64 0, i32 0, i32 0
  %252 = call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13BeginSubmatchEiiPNS0_10RegExpNodeE(i32 %167, i32 %180, %"class.v8::internal::RegExpNode"* %251) #12
  %253 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %252, i64 0, i32 0, i32 0
  %254 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %182, i64 0, i32 1
  %255 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %254, align 8
  %256 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %182, i64 0, i32 0, i32 8
  %257 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %256, align 8
  %258 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %255, i64 0, i32 2
  %259 = load i32, i32* %258, align 4
  %260 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %255, i64 0, i32 1
  %261 = load i32, i32* %260, align 8
  %262 = icmp slt i32 %259, %261
  br i1 %262, label %263, label %270

263:                                              ; preds = %247
  %264 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %255, i64 0, i32 0
  %265 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %264, align 8
  %266 = add nsw i32 %259, 1
  store i32 %266, i32* %258, align 4
  %267 = sext i32 %259 to i64
  %268 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %265, i64 %267, i32 0
  store %"class.v8::internal::RegExpNode"* %253, %"class.v8::internal::RegExpNode"** %268, align 8
  %269 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %265, i64 %267, i32 1
  br label %305

270:                                              ; preds = %247
  %271 = shl nsw i32 %261, 1
  %272 = or i32 %271, 1
  %273 = sext i32 %272 to i64
  %274 = shl nsw i64 %273, 4
  %275 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %257, i64 0, i32 2
  %276 = load i64, i64* %275, align 8
  %277 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %257, i64 0, i32 3
  %278 = load i64, i64* %277, align 8
  %279 = sub i64 %278, %276
  %280 = icmp ugt i64 %274, %279
  br i1 %280, label %281, label %283, !prof !2

281:                                              ; preds = %270
  %282 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %257, i64 %274) #12
  br label %285

283:                                              ; preds = %270
  %284 = add i64 %276, %274
  store i64 %284, i64* %275, align 8
  br label %285

285:                                              ; preds = %283, %281
  %286 = phi i64 [ %282, %281 ], [ %276, %283 ]
  %287 = inttoptr i64 %286 to %"class.v8::internal::GuardedAlternative"*
  %288 = load i32, i32* %258, align 4
  %289 = icmp sgt i32 %288, 0
  br i1 %289, label %290, label %298

290:                                              ; preds = %285
  %291 = inttoptr i64 %286 to i8*
  %292 = bitcast %"class.v8::internal::ZoneList.555"* %255 to i8**
  %293 = load i8*, i8** %292, align 8
  %294 = icmp eq i32 %288, 1
  %295 = sext i32 %288 to i64
  %296 = shl nsw i64 %295, 4
  %297 = select i1 %294, i64 16, i64 %296
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %291, i8* align 1 %293, i64 %297, i1 false) #12
  br label %298

298:                                              ; preds = %290, %285
  %299 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %255, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %287, %"class.v8::internal::GuardedAlternative"** %299, align 8
  store i32 %272, i32* %260, align 8
  %300 = load i32, i32* %258, align 4
  %301 = add nsw i32 %300, 1
  store i32 %301, i32* %258, align 4
  %302 = sext i32 %300 to i64
  %303 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %287, i64 %302, i32 0
  store %"class.v8::internal::RegExpNode"* %253, %"class.v8::internal::RegExpNode"** %303, align 8
  %304 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %287, i64 %302, i32 1
  br label %305

305:                                              ; preds = %263, %298
  %306 = phi %"class.v8::internal::ZoneList.556"** [ %269, %263 ], [ %304, %298 ]
  store %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::ZoneList.556"** %306, align 8
  %307 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 8
  %308 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %307, align 8
  %309 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %308, i64 0, i32 2
  %310 = load i64, i64* %309, align 8
  %311 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %308, i64 0, i32 3
  %312 = load i64, i64* %311, align 8
  %313 = sub i64 %312, %310
  %314 = icmp ult i64 %313, 72
  br i1 %314, label %315, label %317, !prof !2

315:                                              ; preds = %305
  %316 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %308, i64 72) #12
  br label %319

317:                                              ; preds = %305
  %318 = add i64 %310, 72
  store i64 %318, i64* %309, align 8
  br label %319

319:                                              ; preds = %315, %317
  %320 = phi i64 [ %316, %315 ], [ %310, %317 ]
  %321 = inttoptr i64 %320 to %"class.v8::internal::AssertionNode"*
  %322 = bitcast %"class.v8::internal::Zone"** %307 to i64*
  %323 = load i64, i64* %322, align 8
  %324 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %321, i64 0, i32 0, i32 0, i32 0
  %325 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %321, i64 0, i32 0, i32 0, i32 1
  %326 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %321, i64 0, i32 0, i32 0, i32 8
  %327 = bitcast %"class.v8::internal::RegExpNode"** %325 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %327, i8 0, i64 24, i1 false) #12
  %328 = bitcast %"class.v8::internal::Zone"** %326 to i64*
  store i64 %323, i64* %328, align 8
  %329 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %321, i64 0, i32 0, i32 0, i32 7, i64 0
  %330 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %329 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %330, i8 0, i64 16, i1 false) #12
  %331 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %321, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::RegExpNode"** %331, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal13AssertionNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %324, align 8
  %332 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %321, i64 0, i32 1
  store i32 0, i32* %332, align 8
  %333 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %321, i64 0, i32 0, i32 0
  %334 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %254, align 8
  %335 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %256, align 8
  %336 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %334, i64 0, i32 2
  %337 = load i32, i32* %336, align 4
  %338 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %334, i64 0, i32 1
  %339 = load i32, i32* %338, align 8
  %340 = icmp slt i32 %337, %339
  br i1 %340, label %341, label %348

341:                                              ; preds = %319
  %342 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %334, i64 0, i32 0
  %343 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %342, align 8
  %344 = add nsw i32 %337, 1
  store i32 %344, i32* %336, align 4
  %345 = sext i32 %337 to i64
  %346 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %343, i64 %345, i32 0
  store %"class.v8::internal::RegExpNode"* %333, %"class.v8::internal::RegExpNode"** %346, align 8
  %347 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %343, i64 %345, i32 1
  br label %383

348:                                              ; preds = %319
  %349 = shl nsw i32 %339, 1
  %350 = or i32 %349, 1
  %351 = sext i32 %350 to i64
  %352 = shl nsw i64 %351, 4
  %353 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %335, i64 0, i32 2
  %354 = load i64, i64* %353, align 8
  %355 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %335, i64 0, i32 3
  %356 = load i64, i64* %355, align 8
  %357 = sub i64 %356, %354
  %358 = icmp ugt i64 %352, %357
  br i1 %358, label %359, label %361, !prof !2

359:                                              ; preds = %348
  %360 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %335, i64 %352) #12
  br label %363

361:                                              ; preds = %348
  %362 = add i64 %354, %352
  store i64 %362, i64* %353, align 8
  br label %363

363:                                              ; preds = %361, %359
  %364 = phi i64 [ %360, %359 ], [ %354, %361 ]
  %365 = inttoptr i64 %364 to %"class.v8::internal::GuardedAlternative"*
  %366 = load i32, i32* %336, align 4
  %367 = icmp sgt i32 %366, 0
  br i1 %367, label %368, label %376

368:                                              ; preds = %363
  %369 = inttoptr i64 %364 to i8*
  %370 = bitcast %"class.v8::internal::ZoneList.555"* %334 to i8**
  %371 = load i8*, i8** %370, align 8
  %372 = icmp eq i32 %366, 1
  %373 = sext i32 %366 to i64
  %374 = shl nsw i64 %373, 4
  %375 = select i1 %372, i64 16, i64 %374
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %369, i8* align 1 %371, i64 %375, i1 false) #12
  br label %376

376:                                              ; preds = %368, %363
  %377 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %334, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %365, %"class.v8::internal::GuardedAlternative"** %377, align 8
  store i32 %350, i32* %338, align 8
  %378 = load i32, i32* %336, align 4
  %379 = add nsw i32 %378, 1
  store i32 %379, i32* %336, align 4
  %380 = sext i32 %378 to i64
  %381 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %365, i64 %380, i32 0
  store %"class.v8::internal::RegExpNode"* %333, %"class.v8::internal::RegExpNode"** %381, align 8
  %382 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %365, i64 %380, i32 1
  br label %383

383:                                              ; preds = %341, %376
  %384 = phi %"class.v8::internal::ZoneList.556"** [ %347, %341 ], [ %382, %376 ]
  store %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::ZoneList.556"** %384, align 8
  %385 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %182, i64 0, i32 0
  br label %387

386:                                              ; preds = %3
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #14
  unreachable

387:                                              ; preds = %107, %122, %72, %87, %383, %150, %52, %24
  %388 = phi %"class.v8::internal::RegExpNode"* [ %385, %383 ], [ %164, %150 ], [ %66, %52 ], [ %38, %24 ], [ %73, %72 ], [ %101, %87 ], [ %108, %107 ], [ %136, %122 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  ret %"class.v8::internal::RegExpNode"* %388
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.v8::internal::RegExpNode"* @_ZN2v88internal12_GLOBAL__N_129BoundaryAssertionAsLookaroundEPNS0_14RegExpCompilerEPNS0_10RegExpNodeENS0_15RegExpAssertion13AssertionTypeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::RegExpCompiler"* nocapture, %"class.v8::internal::RegExpNode"*, i32, i32) unnamed_addr #0 {
  %5 = alloca %"class.v8::internal::Zone"*, align 8
  %6 = alloca i32, align 4
  %7 = bitcast %"class.v8::internal::Zone"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 15
  %9 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %8, align 8
  store %"class.v8::internal::Zone"* %9, %"class.v8::internal::Zone"** %5, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %9, i64 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %9, i64 0, i32 3
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %13, %11
  %15 = icmp ult i64 %14, 16
  br i1 %15, label %16, label %18, !prof !2

16:                                               ; preds = %4
  %17 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %9, i64 16) #12
  br label %20

18:                                               ; preds = %4
  %19 = add i64 %11, 16
  store i64 %19, i64* %10, align 8
  br label %20

20:                                               ; preds = %16, %18
  %21 = phi i64 [ %17, %16 ], [ %11, %18 ]
  %22 = inttoptr i64 %21 to %"class.v8::internal::ZoneList.553"*
  %23 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %22, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %22, i64 0, i32 1
  store i32 2, i32* %24, align 8
  %25 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %22, i64 0, i32 2
  store i32 0, i32* %25, align 4
  %26 = load i64, i64* %10, align 8
  %27 = load i64, i64* %12, align 8
  %28 = sub i64 %27, %26
  %29 = icmp ult i64 %28, 16
  br i1 %29, label %30, label %32, !prof !2

30:                                               ; preds = %20
  %31 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %9, i64 16) #12
  br label %34

32:                                               ; preds = %20
  %33 = add i64 %26, 16
  store i64 %33, i64* %10, align 8
  br label %34

34:                                               ; preds = %30, %32
  %35 = phi i64 [ %31, %30 ], [ %26, %32 ]
  %36 = inttoptr i64 %35 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %36, %"class.v8::internal::CharacterRange"** %23, align 8
  %37 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5, align 8
  tail call void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEbPNS0_4ZoneE(i8 signext 119, %"class.v8::internal::ZoneList.553"* %22, i1 zeroext true, %"class.v8::internal::Zone"* %37)
  %38 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, -1
  br i1 %40, label %41, label %50

41:                                               ; preds = %34
  %42 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = icmp sgt i32 %43, 65534
  br i1 %44, label %45, label %47

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 8
  store i8 1, i8* %46, align 1
  br label %49

47:                                               ; preds = %41
  %48 = add nsw i32 %43, 1
  store i32 %48, i32* %42, align 8
  br label %49

49:                                               ; preds = %47, %45
  store i32 %43, i32* %38, align 4
  br label %50

50:                                               ; preds = %34, %49
  %51 = phi i32 [ %43, %49 ], [ %39, %34 ]
  %52 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 3
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %53, -1
  br i1 %54, label %55, label %64

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 1
  %57 = load i32, i32* %56, align 8
  %58 = icmp sgt i32 %57, 65534
  br i1 %58, label %59, label %61

59:                                               ; preds = %55
  %60 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 8
  store i8 1, i8* %60, align 1
  br label %63

61:                                               ; preds = %55
  %62 = add nsw i32 %57, 1
  store i32 %62, i32* %56, align 8
  br label %63

63:                                               ; preds = %61, %59
  store i32 %57, i32* %52, align 8
  br label %64

64:                                               ; preds = %50, %63
  %65 = phi i32 [ %57, %63 ], [ %53, %50 ]
  %66 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %66) #12
  store i32 2, i32* %6, align 4
  %67 = call %"class.v8::internal::ChoiceNode"* @_ZN2v88internal4Zone3NewINS0_10ChoiceNodeEJiRPS1_EEEPT_DpOT0_(%"class.v8::internal::Zone"* %37, i32* nonnull dereferenceable(4) %6, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %66) #12
  %68 = icmp eq i32 %2, 4
  %69 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %1, i64 0, i32 8
  %70 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %67, i64 0, i32 1
  %71 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %67, i64 0, i32 0, i32 8
  br label %74

72:                                               ; preds = %243
  %73 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %67, i64 0, i32 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  ret %"class.v8::internal::RegExpNode"* %73

74:                                               ; preds = %243, %64
  %75 = phi i32 [ 0, %64 ], [ %245, %243 ]
  %76 = icmp eq i32 %75, 0
  %77 = xor i1 %68, %76
  br i1 %76, label %91, label %78

78:                                               ; preds = %74
  %79 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %69, align 8
  %80 = ptrtoint %"class.v8::internal::Zone"* %79 to i64
  %81 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %79, i64 0, i32 2
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %79, i64 0, i32 3
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %84, %82
  %86 = icmp ult i64 %85, 80
  br i1 %86, label %87, label %89, !prof !2

87:                                               ; preds = %78
  %88 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %79, i64 80) #12
  br label %97

89:                                               ; preds = %78
  %90 = add i64 %82, 80
  store i64 %90, i64* %81, align 8
  br label %97

91:                                               ; preds = %74
  %92 = call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode23PositiveSubmatchSuccessEiiiiPNS0_10RegExpNodeE(i32 %51, i32 %65, i32 0, i32 0, %"class.v8::internal::RegExpNode"* %1) #12
  %93 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %92, i64 0, i32 0, i32 0
  %94 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5, align 8
  %95 = call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode24CreateForCharacterRangesEPNS0_4ZoneEPNS0_8ZoneListINS0_14CharacterRangeEEEbPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %94, %"class.v8::internal::ZoneList.553"* %22, i1 zeroext true, %"class.v8::internal::RegExpNode"* %93, i32 %3) #12
  %96 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %95, i64 0, i32 0, i32 0
  br label %131

97:                                               ; preds = %89, %87
  %98 = phi i64 [ %88, %87 ], [ %82, %89 ]
  %99 = inttoptr i64 %98 to %"class.v8::internal::NegativeSubmatchSuccess"*
  %100 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %99, i64 0, i32 0, i32 0, i32 0
  %101 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %99, i64 0, i32 0, i32 0, i32 1
  %102 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %99, i64 0, i32 0, i32 0, i32 8
  %103 = bitcast %"class.v8::internal::RegExpNode"** %101 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %103, i8 0, i64 24, i1 false) #12
  %104 = bitcast %"class.v8::internal::Zone"** %102 to i64*
  store i64 %80, i64* %104, align 8
  %105 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %99, i64 0, i32 0, i32 0, i32 7, i64 0
  %106 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %105 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %106, i8 0, i64 16, i1 false) #12
  %107 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %99, i64 0, i32 0, i32 1
  store i32 2, i32* %107, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal23NegativeSubmatchSuccessE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %100, align 8
  %108 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %99, i64 0, i32 1
  store i32 %51, i32* %108, align 4
  %109 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %99, i64 0, i32 2
  store i32 %65, i32* %109, align 8
  %110 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %99, i64 0, i32 3
  store i32 0, i32* %110, align 4
  %111 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %99, i64 0, i32 4
  store i32 0, i32* %111, align 8
  %112 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %99, i64 0, i32 0, i32 0
  %113 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5, align 8
  %114 = call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode24CreateForCharacterRangesEPNS0_4ZoneEPNS0_8ZoneListINS0_14CharacterRangeEEEbPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %113, %"class.v8::internal::ZoneList.553"* %22, i1 zeroext true, %"class.v8::internal::RegExpNode"* %112, i32 %3) #12
  %115 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %114, i64 0, i32 0, i32 0
  %116 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %69, align 8
  %117 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %116, i64 0, i32 2
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %116, i64 0, i32 3
  %120 = load i64, i64* %119, align 8
  %121 = sub i64 %120, %118
  %122 = icmp ult i64 %121, 72
  br i1 %122, label %123, label %125, !prof !2

123:                                              ; preds = %97
  %124 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %116, i64 72) #12
  br label %127

125:                                              ; preds = %97
  %126 = add i64 %118, 72
  store i64 %126, i64* %117, align 8
  br label %127

127:                                              ; preds = %125, %123
  %128 = phi i64 [ %124, %123 ], [ %118, %125 ]
  %129 = inttoptr i64 %128 to %"class.v8::internal::NegativeLookaroundChoiceNode"*
  call void @_ZN2v88internal28NegativeLookaroundChoiceNodeC2ENS0_18GuardedAlternativeES2_PNS0_4ZoneE(%"class.v8::internal::NegativeLookaroundChoiceNode"* %129, %"class.v8::internal::RegExpNode"* %115, %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::RegExpNode"* %1, %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::Zone"* %116) #12
  %130 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %129, i64 0, i32 0, i32 0
  br label %131

131:                                              ; preds = %91, %127
  %132 = phi %"class.v8::internal::RegExpNode"* [ %96, %91 ], [ %130, %127 ]
  %133 = call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13BeginSubmatchEiiPNS0_10RegExpNodeE(i32 %51, i32 %65, %"class.v8::internal::RegExpNode"* %132) #12
  %134 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %133, i64 0, i32 0, i32 0
  br i1 %77, label %149, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %133, i64 0, i32 0, i32 0, i32 8
  %137 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %136, align 8
  %138 = ptrtoint %"class.v8::internal::Zone"* %137 to i64
  %139 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %137, i64 0, i32 2
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %137, i64 0, i32 3
  %142 = load i64, i64* %141, align 8
  %143 = sub i64 %142, %140
  %144 = icmp ult i64 %143, 80
  br i1 %144, label %145, label %147, !prof !2

145:                                              ; preds = %135
  %146 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %137, i64 80) #12
  br label %155

147:                                              ; preds = %135
  %148 = add i64 %140, 80
  store i64 %148, i64* %139, align 8
  br label %155

149:                                              ; preds = %131
  %150 = call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode23PositiveSubmatchSuccessEiiiiPNS0_10RegExpNodeE(i32 %51, i32 %65, i32 0, i32 0, %"class.v8::internal::RegExpNode"* %134) #12
  %151 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %150, i64 0, i32 0, i32 0
  %152 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5, align 8
  %153 = call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode24CreateForCharacterRangesEPNS0_4ZoneEPNS0_8ZoneListINS0_14CharacterRangeEEEbPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %152, %"class.v8::internal::ZoneList.553"* %22, i1 zeroext false, %"class.v8::internal::RegExpNode"* %151, i32 %3) #12
  %154 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %153, i64 0, i32 0, i32 0
  br label %190

155:                                              ; preds = %147, %145
  %156 = phi i64 [ %146, %145 ], [ %140, %147 ]
  %157 = inttoptr i64 %156 to %"class.v8::internal::NegativeSubmatchSuccess"*
  %158 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %157, i64 0, i32 0, i32 0, i32 0
  %159 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %157, i64 0, i32 0, i32 0, i32 1
  %160 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %157, i64 0, i32 0, i32 0, i32 8
  %161 = bitcast %"class.v8::internal::RegExpNode"** %159 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %161, i8 0, i64 24, i1 false) #12
  %162 = bitcast %"class.v8::internal::Zone"** %160 to i64*
  store i64 %138, i64* %162, align 8
  %163 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %157, i64 0, i32 0, i32 0, i32 7, i64 0
  %164 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %163 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %164, i8 0, i64 16, i1 false) #12
  %165 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %157, i64 0, i32 0, i32 1
  store i32 2, i32* %165, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal23NegativeSubmatchSuccessE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %158, align 8
  %166 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %157, i64 0, i32 1
  store i32 %51, i32* %166, align 4
  %167 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %157, i64 0, i32 2
  store i32 %65, i32* %167, align 8
  %168 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %157, i64 0, i32 3
  store i32 0, i32* %168, align 4
  %169 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %157, i64 0, i32 4
  store i32 0, i32* %169, align 8
  %170 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %157, i64 0, i32 0, i32 0
  %171 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5, align 8
  %172 = call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode24CreateForCharacterRangesEPNS0_4ZoneEPNS0_8ZoneListINS0_14CharacterRangeEEEbPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %171, %"class.v8::internal::ZoneList.553"* %22, i1 zeroext false, %"class.v8::internal::RegExpNode"* %170, i32 %3) #12
  %173 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %172, i64 0, i32 0, i32 0
  %174 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %133, i64 0, i32 0, i32 0, i32 8
  %175 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %174, align 8
  %176 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %175, i64 0, i32 2
  %177 = load i64, i64* %176, align 8
  %178 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %175, i64 0, i32 3
  %179 = load i64, i64* %178, align 8
  %180 = sub i64 %179, %177
  %181 = icmp ult i64 %180, 72
  br i1 %181, label %182, label %184, !prof !2

182:                                              ; preds = %155
  %183 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %175, i64 72) #12
  br label %186

184:                                              ; preds = %155
  %185 = add i64 %177, 72
  store i64 %185, i64* %176, align 8
  br label %186

186:                                              ; preds = %184, %182
  %187 = phi i64 [ %183, %182 ], [ %177, %184 ]
  %188 = inttoptr i64 %187 to %"class.v8::internal::NegativeLookaroundChoiceNode"*
  call void @_ZN2v88internal28NegativeLookaroundChoiceNodeC2ENS0_18GuardedAlternativeES2_PNS0_4ZoneE(%"class.v8::internal::NegativeLookaroundChoiceNode"* %188, %"class.v8::internal::RegExpNode"* %173, %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::RegExpNode"* %134, %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::Zone"* %175) #12
  %189 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %188, i64 0, i32 0, i32 0
  br label %190

190:                                              ; preds = %149, %186
  %191 = phi %"class.v8::internal::RegExpNode"* [ %154, %149 ], [ %189, %186 ]
  %192 = call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13BeginSubmatchEiiPNS0_10RegExpNodeE(i32 %51, i32 %65, %"class.v8::internal::RegExpNode"* %191) #12
  %193 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %192, i64 0, i32 0, i32 0
  %194 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %70, align 8
  %195 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %71, align 8
  %196 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %194, i64 0, i32 2
  %197 = load i32, i32* %196, align 4
  %198 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %194, i64 0, i32 1
  %199 = load i32, i32* %198, align 8
  %200 = icmp slt i32 %197, %199
  br i1 %200, label %201, label %208

201:                                              ; preds = %190
  %202 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %194, i64 0, i32 0
  %203 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %202, align 8
  %204 = add nsw i32 %197, 1
  store i32 %204, i32* %196, align 4
  %205 = sext i32 %197 to i64
  %206 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %203, i64 %205, i32 0
  store %"class.v8::internal::RegExpNode"* %193, %"class.v8::internal::RegExpNode"** %206, align 8
  %207 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %203, i64 %205, i32 1
  br label %243

208:                                              ; preds = %190
  %209 = shl nsw i32 %199, 1
  %210 = or i32 %209, 1
  %211 = sext i32 %210 to i64
  %212 = shl nsw i64 %211, 4
  %213 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %195, i64 0, i32 2
  %214 = load i64, i64* %213, align 8
  %215 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %195, i64 0, i32 3
  %216 = load i64, i64* %215, align 8
  %217 = sub i64 %216, %214
  %218 = icmp ugt i64 %212, %217
  br i1 %218, label %219, label %221, !prof !2

219:                                              ; preds = %208
  %220 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %195, i64 %212) #12
  br label %223

221:                                              ; preds = %208
  %222 = add i64 %214, %212
  store i64 %222, i64* %213, align 8
  br label %223

223:                                              ; preds = %221, %219
  %224 = phi i64 [ %220, %219 ], [ %214, %221 ]
  %225 = inttoptr i64 %224 to %"class.v8::internal::GuardedAlternative"*
  %226 = load i32, i32* %196, align 4
  %227 = icmp sgt i32 %226, 0
  br i1 %227, label %228, label %236

228:                                              ; preds = %223
  %229 = inttoptr i64 %224 to i8*
  %230 = bitcast %"class.v8::internal::ZoneList.555"* %194 to i8**
  %231 = load i8*, i8** %230, align 8
  %232 = icmp eq i32 %226, 1
  %233 = sext i32 %226 to i64
  %234 = shl nsw i64 %233, 4
  %235 = select i1 %232, i64 16, i64 %234
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %229, i8* align 1 %231, i64 %235, i1 false) #12
  br label %236

236:                                              ; preds = %228, %223
  %237 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %194, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %225, %"class.v8::internal::GuardedAlternative"** %237, align 8
  store i32 %210, i32* %198, align 8
  %238 = load i32, i32* %196, align 4
  %239 = add nsw i32 %238, 1
  store i32 %239, i32* %196, align 4
  %240 = sext i32 %238 to i64
  %241 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %225, i64 %240, i32 0
  store %"class.v8::internal::RegExpNode"* %193, %"class.v8::internal::RegExpNode"** %241, align 8
  %242 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %225, i64 %240, i32 1
  br label %243

243:                                              ; preds = %201, %236
  %244 = phi %"class.v8::internal::ZoneList.556"** [ %207, %201 ], [ %242, %236 ]
  store %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::ZoneList.556"** %244, align 8
  %245 = add nuw nsw i32 %75, 1
  %246 = icmp eq i32 %245, 2
  br i1 %246, label %72, label %74
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEbPNS0_4ZoneE(i8 signext, %"class.v8::internal::ZoneList.553"*, i1 zeroext, %"class.v8::internal::Zone"*) local_unnamed_addr #0 align 2 {
  br i1 %2, label %5, label %162

5:                                                ; preds = %4
  switch i8 %0, label %162 [
    i8 119, label %6
    i8 87, label %6
  ]

6:                                                ; preds = %5, %5
  %7 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %10, %8
  %12 = icmp ult i64 %11, 16
  br i1 %12, label %13, label %15, !prof !2

13:                                               ; preds = %6
  %14 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 16) #12
  br label %17

15:                                               ; preds = %6
  %16 = add i64 %8, 16
  store i64 %16, i64* %7, align 8
  br label %17

17:                                               ; preds = %13, %15
  %18 = phi i64 [ %14, %13 ], [ %8, %15 ]
  %19 = inttoptr i64 %18 to %"class.v8::internal::ZoneList.553"*
  %20 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %19, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %20, align 8
  %21 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %19, i64 0, i32 1
  store i32 2, i32* %21, align 8
  %22 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %19, i64 0, i32 2
  store i32 0, i32* %22, align 4
  %23 = load i64, i64* %7, align 8
  %24 = load i64, i64* %9, align 8
  %25 = sub i64 %24, %23
  %26 = icmp ult i64 %25, 16
  br i1 %26, label %27, label %29, !prof !2

27:                                               ; preds = %17
  %28 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 16) #12
  br label %31

29:                                               ; preds = %17
  %30 = add i64 %23, 16
  store i64 %30, i64* %7, align 8
  br label %31

31:                                               ; preds = %27, %29
  %32 = phi i64 [ %28, %27 ], [ %23, %29 ]
  %33 = inttoptr i64 %32 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %33, %"class.v8::internal::CharacterRange"** %20, align 8
  %34 = inttoptr i64 %18 to i8**
  %35 = load i32, i32* %22, align 4
  %36 = load i32, i32* %21, align 8
  %37 = icmp slt i32 %35, %36
  br i1 %37, label %69, label %38

38:                                               ; preds = %31
  %39 = shl nsw i32 %36, 1
  %40 = or i32 %39, 1
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 3
  %43 = load i64, i64* %7, align 8
  %44 = load i64, i64* %9, align 8
  %45 = sub i64 %44, %43
  %46 = icmp ugt i64 %42, %45
  br i1 %46, label %47, label %49, !prof !2

47:                                               ; preds = %38
  %48 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 %42) #12
  br label %51

49:                                               ; preds = %38
  %50 = add i64 %43, %42
  store i64 %50, i64* %7, align 8
  br label %51

51:                                               ; preds = %49, %47
  %52 = phi i64 [ %48, %47 ], [ %43, %49 ]
  %53 = inttoptr i64 %52 to %"class.v8::internal::CharacterRange"*
  %54 = load i32, i32* %22, align 4
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %56, label %67

56:                                               ; preds = %51
  %57 = inttoptr i64 %52 to i8*
  %58 = load i8*, i8** %34, align 8
  %59 = sext i32 %54 to i64
  %60 = shl nsw i64 %59, 3
  switch i64 %60, label %66 [
    i64 16, label %65
    i64 8, label %61
  ]

61:                                               ; preds = %56
  %62 = bitcast i8* %58 to i64*
  %63 = inttoptr i64 %52 to i64*
  %64 = load i64, i64* %62, align 1
  store i64 %64, i64* %63, align 1
  br label %67

65:                                               ; preds = %56
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %58, i64 16, i1 false) #12
  br label %67

66:                                               ; preds = %56
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %58, i64 %60, i1 false) #12
  br label %67

67:                                               ; preds = %66, %65, %61, %51
  store %"class.v8::internal::CharacterRange"* %53, %"class.v8::internal::CharacterRange"** %20, align 8
  store i32 %40, i32* %21, align 8
  %68 = load i32, i32* %22, align 4
  br label %69

69:                                               ; preds = %31, %67
  %70 = phi i32 [ %68, %67 ], [ %35, %31 ]
  %71 = phi %"class.v8::internal::CharacterRange"* [ %53, %67 ], [ %33, %31 ]
  %72 = add nsw i32 %70, 1
  store i32 %72, i32* %22, align 4
  %73 = sext i32 %70 to i64
  %74 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %71, i64 %73
  %75 = bitcast %"class.v8::internal::CharacterRange"* %74 to i64*
  store i64 244813135920, i64* %75, align 4
  %76 = load i32, i32* %22, align 4
  %77 = load i32, i32* %21, align 8
  %78 = icmp slt i32 %76, %77
  br i1 %78, label %195, label %164

79:                                               ; preds = %283
  %80 = load i64, i64* %7, align 8
  %81 = load i64, i64* %9, align 8
  %82 = sub i64 %81, %80
  %83 = icmp ult i64 %82, 16
  br i1 %83, label %84, label %86, !prof !2

84:                                               ; preds = %79
  %85 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 16) #12
  br label %88

86:                                               ; preds = %79
  %87 = add i64 %80, 16
  store i64 %87, i64* %7, align 8
  br label %88

88:                                               ; preds = %84, %86
  %89 = phi i64 [ %85, %84 ], [ %80, %86 ]
  %90 = inttoptr i64 %89 to %"class.v8::internal::ZoneList.553"*
  %91 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %90, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %91, align 8
  %92 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %90, i64 0, i32 1
  store i32 2, i32* %92, align 8
  %93 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %90, i64 0, i32 2
  store i32 0, i32* %93, align 4
  %94 = load i64, i64* %7, align 8
  %95 = load i64, i64* %9, align 8
  %96 = sub i64 %95, %94
  %97 = icmp ult i64 %96, 16
  br i1 %97, label %98, label %100, !prof !2

98:                                               ; preds = %88
  %99 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 16) #12
  br label %102

100:                                              ; preds = %88
  %101 = add i64 %94, 16
  store i64 %101, i64* %7, align 8
  br label %102

102:                                              ; preds = %98, %100
  %103 = phi i64 [ %99, %98 ], [ %94, %100 ]
  %104 = inttoptr i64 %103 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %104, %"class.v8::internal::CharacterRange"** %91, align 8
  tail call void @_ZN2v88internal14CharacterRange6NegateEPNS0_8ZoneListIS1_EES4_PNS0_4ZoneE(%"class.v8::internal::ZoneList.553"* %19, %"class.v8::internal::ZoneList.553"* %90, %"class.v8::internal::Zone"* %3)
  br label %105

105:                                              ; preds = %102, %283
  %106 = phi %"class.v8::internal::ZoneList.553"* [ %90, %102 ], [ %19, %283 ]
  %107 = bitcast %"class.v8::internal::ZoneList.553"* %106 to i8**
  %108 = load i8*, i8** %107, align 8
  %109 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %106, i64 0, i32 2
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = icmp eq i32 %110, 0
  br i1 %112, label %163, label %113

113:                                              ; preds = %105
  %114 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 2
  %115 = load i32, i32* %114, align 4
  %116 = add nsw i32 %115, %110
  %117 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 1
  %118 = load i32, i32* %117, align 8
  %119 = icmp slt i32 %118, %116
  br i1 %119, label %123, label %120

120:                                              ; preds = %113
  %121 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  %122 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %121, align 8
  br label %154

123:                                              ; preds = %113
  %124 = sext i32 %116 to i64
  %125 = shl nsw i64 %124, 3
  %126 = load i64, i64* %7, align 8
  %127 = load i64, i64* %9, align 8
  %128 = sub i64 %127, %126
  %129 = icmp ugt i64 %125, %128
  br i1 %129, label %130, label %132, !prof !2

130:                                              ; preds = %123
  %131 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 %125) #12
  br label %134

132:                                              ; preds = %123
  %133 = add i64 %126, %125
  store i64 %133, i64* %7, align 8
  br label %134

134:                                              ; preds = %132, %130
  %135 = phi i64 [ %131, %130 ], [ %126, %132 ]
  %136 = inttoptr i64 %135 to %"class.v8::internal::CharacterRange"*
  %137 = load i32, i32* %114, align 4
  %138 = icmp sgt i32 %137, 0
  br i1 %138, label %139, label %151

139:                                              ; preds = %134
  %140 = inttoptr i64 %135 to i8*
  %141 = bitcast %"class.v8::internal::ZoneList.553"* %1 to i8**
  %142 = load i8*, i8** %141, align 8
  %143 = sext i32 %137 to i64
  %144 = shl nsw i64 %143, 3
  switch i64 %144, label %150 [
    i64 16, label %149
    i64 8, label %145
  ]

145:                                              ; preds = %139
  %146 = bitcast i8* %142 to i64*
  %147 = inttoptr i64 %135 to i64*
  %148 = load i64, i64* %146, align 1
  store i64 %148, i64* %147, align 1
  br label %151

149:                                              ; preds = %139
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %140, i8* align 1 %142, i64 16, i1 false) #12
  br label %151

150:                                              ; preds = %139
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %140, i8* align 1 %142, i64 %144, i1 false) #12
  br label %151

151:                                              ; preds = %150, %149, %145, %134
  %152 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %136, %"class.v8::internal::CharacterRange"** %152, align 8
  store i32 %116, i32* %117, align 8
  %153 = load i32, i32* %114, align 4
  br label %154

154:                                              ; preds = %151, %120
  %155 = phi i32 [ %115, %120 ], [ %153, %151 ]
  %156 = phi %"class.v8::internal::CharacterRange"* [ %122, %120 ], [ %136, %151 ]
  %157 = sext i32 %155 to i64
  %158 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %156, i64 %157
  %159 = bitcast %"class.v8::internal::CharacterRange"* %158 to i8*
  %160 = shl nuw i64 %111, 32
  %161 = ashr exact i64 %160, 29
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %159, i8* align 1 %108, i64 %161, i1 false) #12
  store i32 %116, i32* %114, align 4
  br label %163

162:                                              ; preds = %5, %4
  tail call void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEPNS0_4ZoneE(i8 signext %0, %"class.v8::internal::ZoneList.553"* %1, %"class.v8::internal::Zone"* %3)
  br label %163

163:                                              ; preds = %154, %105, %162
  ret void

164:                                              ; preds = %69
  %165 = shl nsw i32 %77, 1
  %166 = or i32 %165, 1
  %167 = sext i32 %166 to i64
  %168 = shl nsw i64 %167, 3
  %169 = load i64, i64* %7, align 8
  %170 = load i64, i64* %9, align 8
  %171 = sub i64 %170, %169
  %172 = icmp ugt i64 %168, %171
  br i1 %172, label %175, label %173, !prof !2

173:                                              ; preds = %164
  %174 = add i64 %169, %168
  store i64 %174, i64* %7, align 8
  br label %177

175:                                              ; preds = %164
  %176 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 %168) #12
  br label %177

177:                                              ; preds = %175, %173
  %178 = phi i64 [ %176, %175 ], [ %169, %173 ]
  %179 = inttoptr i64 %178 to %"class.v8::internal::CharacterRange"*
  %180 = load i32, i32* %22, align 4
  %181 = icmp sgt i32 %180, 0
  br i1 %181, label %182, label %193

182:                                              ; preds = %177
  %183 = inttoptr i64 %178 to i8*
  %184 = load i8*, i8** %34, align 8
  %185 = sext i32 %180 to i64
  %186 = shl nsw i64 %185, 3
  switch i64 %186, label %192 [
    i64 16, label %191
    i64 8, label %187
  ]

187:                                              ; preds = %182
  %188 = bitcast i8* %184 to i64*
  %189 = inttoptr i64 %178 to i64*
  %190 = load i64, i64* %188, align 1
  store i64 %190, i64* %189, align 1
  br label %193

191:                                              ; preds = %182
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %183, i8* align 1 %184, i64 16, i1 false) #12
  br label %193

192:                                              ; preds = %182
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %183, i8* align 1 %184, i64 %186, i1 false) #12
  br label %193

193:                                              ; preds = %192, %191, %187, %177
  store %"class.v8::internal::CharacterRange"* %179, %"class.v8::internal::CharacterRange"** %20, align 8
  store i32 %166, i32* %21, align 8
  %194 = load i32, i32* %22, align 4
  br label %197

195:                                              ; preds = %69
  %196 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %20, align 8
  br label %197

197:                                              ; preds = %195, %193
  %198 = phi i32 [ %76, %195 ], [ %194, %193 ]
  %199 = phi %"class.v8::internal::CharacterRange"* [ %196, %195 ], [ %179, %193 ]
  %200 = add nsw i32 %198, 1
  store i32 %200, i32* %22, align 4
  %201 = sext i32 %198 to i64
  %202 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %199, i64 %201
  %203 = bitcast %"class.v8::internal::CharacterRange"* %202 to i64*
  store i64 386547056705, i64* %203, align 4
  %204 = load i32, i32* %22, align 4
  %205 = load i32, i32* %21, align 8
  %206 = icmp slt i32 %204, %205
  br i1 %206, label %238, label %207

207:                                              ; preds = %197
  %208 = shl nsw i32 %205, 1
  %209 = or i32 %208, 1
  %210 = sext i32 %209 to i64
  %211 = shl nsw i64 %210, 3
  %212 = load i64, i64* %7, align 8
  %213 = load i64, i64* %9, align 8
  %214 = sub i64 %213, %212
  %215 = icmp ugt i64 %211, %214
  br i1 %215, label %218, label %216, !prof !2

216:                                              ; preds = %207
  %217 = add i64 %212, %211
  store i64 %217, i64* %7, align 8
  br label %220

218:                                              ; preds = %207
  %219 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 %211) #12
  br label %220

220:                                              ; preds = %218, %216
  %221 = phi i64 [ %219, %218 ], [ %212, %216 ]
  %222 = inttoptr i64 %221 to %"class.v8::internal::CharacterRange"*
  %223 = load i32, i32* %22, align 4
  %224 = icmp sgt i32 %223, 0
  br i1 %224, label %225, label %236

225:                                              ; preds = %220
  %226 = inttoptr i64 %221 to i8*
  %227 = load i8*, i8** %34, align 8
  %228 = sext i32 %223 to i64
  %229 = shl nsw i64 %228, 3
  switch i64 %229, label %235 [
    i64 16, label %234
    i64 8, label %230
  ]

230:                                              ; preds = %225
  %231 = bitcast i8* %227 to i64*
  %232 = inttoptr i64 %221 to i64*
  %233 = load i64, i64* %231, align 1
  store i64 %233, i64* %232, align 1
  br label %236

234:                                              ; preds = %225
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %226, i8* align 1 %227, i64 16, i1 false) #12
  br label %236

235:                                              ; preds = %225
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %226, i8* align 1 %227, i64 %229, i1 false) #12
  br label %236

236:                                              ; preds = %235, %234, %230, %220
  store %"class.v8::internal::CharacterRange"* %222, %"class.v8::internal::CharacterRange"** %20, align 8
  store i32 %209, i32* %21, align 8
  %237 = load i32, i32* %22, align 4
  br label %240

238:                                              ; preds = %197
  %239 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %20, align 8
  br label %240

240:                                              ; preds = %238, %236
  %241 = phi i32 [ %204, %238 ], [ %237, %236 ]
  %242 = phi %"class.v8::internal::CharacterRange"* [ %239, %238 ], [ %222, %236 ]
  %243 = add nsw i32 %241, 1
  store i32 %243, i32* %22, align 4
  %244 = sext i32 %241 to i64
  %245 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %242, i64 %244
  %246 = bitcast %"class.v8::internal::CharacterRange"* %245 to i64*
  store i64 408021893215, i64* %246, align 4
  %247 = load i32, i32* %22, align 4
  %248 = load i32, i32* %21, align 8
  %249 = icmp slt i32 %247, %248
  br i1 %249, label %281, label %250

250:                                              ; preds = %240
  %251 = shl nsw i32 %248, 1
  %252 = or i32 %251, 1
  %253 = sext i32 %252 to i64
  %254 = shl nsw i64 %253, 3
  %255 = load i64, i64* %7, align 8
  %256 = load i64, i64* %9, align 8
  %257 = sub i64 %256, %255
  %258 = icmp ugt i64 %254, %257
  br i1 %258, label %261, label %259, !prof !2

259:                                              ; preds = %250
  %260 = add i64 %255, %254
  store i64 %260, i64* %7, align 8
  br label %263

261:                                              ; preds = %250
  %262 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 %254) #12
  br label %263

263:                                              ; preds = %261, %259
  %264 = phi i64 [ %262, %261 ], [ %255, %259 ]
  %265 = inttoptr i64 %264 to %"class.v8::internal::CharacterRange"*
  %266 = load i32, i32* %22, align 4
  %267 = icmp sgt i32 %266, 0
  br i1 %267, label %268, label %279

268:                                              ; preds = %263
  %269 = inttoptr i64 %264 to i8*
  %270 = load i8*, i8** %34, align 8
  %271 = sext i32 %266 to i64
  %272 = shl nsw i64 %271, 3
  switch i64 %272, label %278 [
    i64 16, label %277
    i64 8, label %273
  ]

273:                                              ; preds = %268
  %274 = bitcast i8* %270 to i64*
  %275 = inttoptr i64 %264 to i64*
  %276 = load i64, i64* %274, align 1
  store i64 %276, i64* %275, align 1
  br label %279

277:                                              ; preds = %268
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %269, i8* align 1 %270, i64 16, i1 false) #12
  br label %279

278:                                              ; preds = %268
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %269, i8* align 1 %270, i64 %272, i1 false) #12
  br label %279

279:                                              ; preds = %278, %277, %273, %263
  store %"class.v8::internal::CharacterRange"* %265, %"class.v8::internal::CharacterRange"** %20, align 8
  store i32 %252, i32* %21, align 8
  %280 = load i32, i32* %22, align 4
  br label %283

281:                                              ; preds = %240
  %282 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %20, align 8
  br label %283

283:                                              ; preds = %281, %279
  %284 = phi i32 [ %247, %281 ], [ %280, %279 ]
  %285 = phi %"class.v8::internal::CharacterRange"* [ %282, %281 ], [ %265, %279 ]
  %286 = add nsw i32 %284, 1
  store i32 %286, i32* %22, align 4
  %287 = sext i32 %284 to i64
  %288 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %285, i64 %287
  %289 = bitcast %"class.v8::internal::CharacterRange"* %288 to i64*
  store i64 523986010209, i64* %289, align 4
  tail call fastcc void @_ZN2v88internal12_GLOBAL__N_125AddUnicodeCaseEquivalentsEPNS0_8ZoneListINS0_14CharacterRangeEEEPNS0_4ZoneE(%"class.v8::internal::ZoneList.553"* %19, %"class.v8::internal::Zone"* %3)
  %290 = icmp eq i8 %0, 87
  br i1 %290, label %79, label %105
}

declare %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode23PositiveSubmatchSuccessEiiiiPNS0_10RegExpNodeE(i32, i32, i32, i32, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2

declare %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13BeginSubmatchEiiPNS0_10RegExpNodeE(i32, i32, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal19RegExpBackReference6ToNodeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpBackReference"* nocapture readonly, %"class.v8::internal::RegExpCompiler"* nocapture readonly, %"class.v8::internal::RegExpNode"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 15
  %5 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::RegExpBackReference", %"class.v8::internal::RegExpBackReference"* %0, i64 0, i32 1
  %7 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %7, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = shl nsw i32 %9, 1
  %11 = or i32 %10, 1
  %12 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 11
  %13 = load i8, i8* %12, align 4, !range !3
  %14 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %15
  %19 = icmp ult i64 %18, 80
  br i1 %19, label %20, label %22, !prof !2

20:                                               ; preds = %3
  %21 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5, i64 80) #12
  br label %24

22:                                               ; preds = %3
  %23 = add i64 %15, 80
  store i64 %23, i64* %14, align 8
  br label %24

24:                                               ; preds = %20, %22
  %25 = phi i64 [ %21, %20 ], [ %15, %22 ]
  %26 = inttoptr i64 %25 to %"class.v8::internal::BackReferenceNode"*
  %27 = getelementptr inbounds %"class.v8::internal::RegExpBackReference", %"class.v8::internal::RegExpBackReference"* %0, i64 0, i32 3, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 8
  %30 = bitcast %"class.v8::internal::Zone"** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %26, i64 0, i32 0, i32 0, i32 0
  %33 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %26, i64 0, i32 0, i32 0, i32 1
  %34 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %26, i64 0, i32 0, i32 0, i32 8
  %35 = bitcast %"class.v8::internal::RegExpNode"** %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #12
  %36 = bitcast %"class.v8::internal::Zone"** %34 to i64*
  store i64 %31, i64* %36, align 8
  %37 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %26, i64 0, i32 0, i32 0, i32 7, i64 0
  %38 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 16, i1 false) #12
  %39 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %26, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::RegExpNode"** %39, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal17BackReferenceNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %32, align 8
  %40 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %26, i64 0, i32 1
  store i32 %10, i32* %40, align 8
  %41 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %26, i64 0, i32 2
  store i32 %11, i32* %41, align 4
  %42 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %26, i64 0, i32 3, i32 0
  store i32 %28, i32* %42, align 8
  %43 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %26, i64 0, i32 4
  store i8 %13, i8* %43, align 4
  %44 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %26, i64 0, i32 0, i32 0
  ret %"class.v8::internal::RegExpNode"* %44
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal11RegExpEmpty6ToNodeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpEmpty"* nocapture readnone, %"class.v8::internal::RegExpCompiler"* nocapture readnone, %"class.v8::internal::RegExpNode"* readnone returned) unnamed_addr #5 align 2 {
  ret %"class.v8::internal::RegExpNode"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal16RegExpLookaround7BuilderC2EbPNS0_10RegExpNodeEiiii(%"class.v8::internal::RegExpLookaround::Builder"* nocapture, i1 zeroext, %"class.v8::internal::RegExpNode"*, i32, i32, i32, i32) unnamed_addr #0 align 2 {
  %8 = zext i1 %1 to i8
  %9 = getelementptr inbounds %"class.v8::internal::RegExpLookaround::Builder", %"class.v8::internal::RegExpLookaround::Builder"* %0, i64 0, i32 0
  store i8 %8, i8* %9, align 8
  %10 = getelementptr inbounds %"class.v8::internal::RegExpLookaround::Builder", %"class.v8::internal::RegExpLookaround::Builder"* %0, i64 0, i32 2
  store %"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::RegExpNode"** %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::RegExpLookaround::Builder", %"class.v8::internal::RegExpLookaround::Builder"* %0, i64 0, i32 3
  store i32 %3, i32* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::RegExpLookaround::Builder", %"class.v8::internal::RegExpLookaround::Builder"* %0, i64 0, i32 4
  store i32 %4, i32* %12, align 4
  br i1 %1, label %13, label %16

13:                                               ; preds = %7
  %14 = tail call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode23PositiveSubmatchSuccessEiiiiPNS0_10RegExpNodeE(i32 %3, i32 %4, i32 %5, i32 %6, %"class.v8::internal::RegExpNode"* %2) #12
  %15 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %14, i64 0, i32 0, i32 0
  br label %46

16:                                               ; preds = %7
  %17 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 8
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  %19 = ptrtoint %"class.v8::internal::Zone"* %18 to i64
  %20 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %23, %21
  %25 = icmp ult i64 %24, 80
  br i1 %25, label %26, label %28, !prof !2

26:                                               ; preds = %16
  %27 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 80) #12
  br label %30

28:                                               ; preds = %16
  %29 = add i64 %21, 80
  store i64 %29, i64* %20, align 8
  br label %30

30:                                               ; preds = %26, %28
  %31 = phi i64 [ %27, %26 ], [ %21, %28 ]
  %32 = inttoptr i64 %31 to %"class.v8::internal::NegativeSubmatchSuccess"*
  %33 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %32, i64 0, i32 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %32, i64 0, i32 0, i32 0, i32 1
  %35 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %32, i64 0, i32 0, i32 0, i32 8
  %36 = bitcast %"class.v8::internal::RegExpNode"** %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #12
  %37 = bitcast %"class.v8::internal::Zone"** %35 to i64*
  store i64 %19, i64* %37, align 8
  %38 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %32, i64 0, i32 0, i32 0, i32 7, i64 0
  %39 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %38 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 16, i1 false) #12
  %40 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %32, i64 0, i32 0, i32 1
  store i32 2, i32* %40, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal23NegativeSubmatchSuccessE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %33, align 8
  %41 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %32, i64 0, i32 1
  store i32 %3, i32* %41, align 4
  %42 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %32, i64 0, i32 2
  store i32 %4, i32* %42, align 8
  %43 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %32, i64 0, i32 3
  store i32 %5, i32* %43, align 4
  %44 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %32, i64 0, i32 4
  store i32 %6, i32* %44, align 8
  %45 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %32, i64 0, i32 0, i32 0
  br label %46

46:                                               ; preds = %30, %13
  %47 = phi %"class.v8::internal::RegExpNode"* [ %45, %30 ], [ %15, %13 ]
  %48 = getelementptr inbounds %"class.v8::internal::RegExpLookaround::Builder", %"class.v8::internal::RegExpLookaround::Builder"* %0, i64 0, i32 1
  store %"class.v8::internal::RegExpNode"* %47, %"class.v8::internal::RegExpNode"** %48, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal16RegExpLookaround7Builder8ForMatchEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpLookaround::Builder"* nocapture readonly, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::RegExpLookaround::Builder", %"class.v8::internal::RegExpLookaround::Builder"* %0, i64 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !3
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::RegExpLookaround::Builder", %"class.v8::internal::RegExpLookaround::Builder"* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::RegExpLookaround::Builder", %"class.v8::internal::RegExpLookaround::Builder"* %0, i64 0, i32 4
  %10 = load i32, i32* %9, align 4
  %11 = tail call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13BeginSubmatchEiiPNS0_10RegExpNodeE(i32 %8, i32 %10, %"class.v8::internal::RegExpNode"* %1) #12
  br label %36

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.v8::internal::RegExpLookaround::Builder", %"class.v8::internal::RegExpLookaround::Builder"* %0, i64 0, i32 2
  %14 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %14, i64 0, i32 8
  %16 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %16, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %16, i64 0, i32 3
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %18
  %22 = icmp ult i64 %21, 72
  br i1 %22, label %23, label %25, !prof !2

23:                                               ; preds = %12
  %24 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %16, i64 72) #12
  br label %27

25:                                               ; preds = %12
  %26 = add i64 %18, 72
  store i64 %26, i64* %17, align 8
  br label %27

27:                                               ; preds = %23, %25
  %28 = phi i64 [ %24, %23 ], [ %18, %25 ]
  %29 = inttoptr i64 %28 to %"class.v8::internal::NegativeLookaroundChoiceNode"*
  tail call void @_ZN2v88internal28NegativeLookaroundChoiceNodeC2ENS0_18GuardedAlternativeES2_PNS0_4ZoneE(%"class.v8::internal::NegativeLookaroundChoiceNode"* %29, %"class.v8::internal::RegExpNode"* %1, %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::RegExpNode"* %14, %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::Zone"* %16) #12
  %30 = getelementptr inbounds %"class.v8::internal::RegExpLookaround::Builder", %"class.v8::internal::RegExpLookaround::Builder"* %0, i64 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::RegExpLookaround::Builder", %"class.v8::internal::RegExpLookaround::Builder"* %0, i64 0, i32 4
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %29, i64 0, i32 0, i32 0
  %35 = tail call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13BeginSubmatchEiiPNS0_10RegExpNodeE(i32 %31, i32 %33, %"class.v8::internal::RegExpNode"* %34) #12
  br label %36

36:                                               ; preds = %27, %6
  %37 = phi %"class.v8::internal::ActionNode"* [ %11, %6 ], [ %35, %27 ]
  %38 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %37, i64 0, i32 0, i32 0
  ret %"class.v8::internal::RegExpNode"* %38
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal16RegExpLookaround6ToNodeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpLookaround"* nocapture readonly, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, 65534
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 8
  store i8 1, i8* %8, align 1
  br label %12

9:                                                ; preds = %3
  %10 = add nsw i32 %5, 1
  store i32 %10, i32* %4, align 8
  %11 = icmp eq i32 %5, 65534
  br i1 %11, label %12, label %15

12:                                               ; preds = %7, %9
  %13 = phi i32 [ %5, %7 ], [ 65535, %9 ]
  %14 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 8
  store i8 1, i8* %14, align 1
  br label %17

15:                                               ; preds = %9
  %16 = add nsw i32 %5, 2
  store i32 %16, i32* %4, align 8
  br label %17

17:                                               ; preds = %12, %15
  %18 = phi i32 [ %13, %12 ], [ %10, %15 ]
  %19 = getelementptr inbounds %"class.v8::internal::RegExpLookaround", %"class.v8::internal::RegExpLookaround"* %0, i64 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = shl nsw i32 %20, 1
  %22 = getelementptr inbounds %"class.v8::internal::RegExpLookaround", %"class.v8::internal::RegExpLookaround"* %0, i64 0, i32 4
  %23 = load i32, i32* %22, align 8
  %24 = shl nsw i32 %23, 1
  %25 = add nsw i32 %24, 2
  %26 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 11
  %27 = load i8, i8* %26, align 4, !range !3
  %28 = getelementptr inbounds %"class.v8::internal::RegExpLookaround", %"class.v8::internal::RegExpLookaround"* %0, i64 0, i32 5
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 1
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %26, align 4
  %32 = getelementptr inbounds %"class.v8::internal::RegExpLookaround", %"class.v8::internal::RegExpLookaround"* %0, i64 0, i32 2
  %33 = load i8, i8* %32, align 8, !range !3
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %17
  %36 = tail call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode23PositiveSubmatchSuccessEiiiiPNS0_10RegExpNodeE(i32 %5, i32 %18, i32 %21, i32 %25, %"class.v8::internal::RegExpNode"* %2) #12
  %37 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %36, i64 0, i32 0, i32 0
  br label %68

38:                                               ; preds = %17
  %39 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 8
  %40 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %39, align 8
  %41 = ptrtoint %"class.v8::internal::Zone"* %40 to i64
  %42 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %40, i64 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %40, i64 0, i32 3
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %45, %43
  %47 = icmp ult i64 %46, 80
  br i1 %47, label %48, label %50, !prof !2

48:                                               ; preds = %38
  %49 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %40, i64 80) #12
  br label %52

50:                                               ; preds = %38
  %51 = add i64 %43, 80
  store i64 %51, i64* %42, align 8
  br label %52

52:                                               ; preds = %50, %48
  %53 = phi i64 [ %49, %48 ], [ %43, %50 ]
  %54 = inttoptr i64 %53 to %"class.v8::internal::NegativeSubmatchSuccess"*
  %55 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 0, i32 0, i32 0
  %56 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 0, i32 0, i32 1
  %57 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 0, i32 0, i32 8
  %58 = bitcast %"class.v8::internal::RegExpNode"** %56 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 24, i1 false) #12
  %59 = bitcast %"class.v8::internal::Zone"** %57 to i64*
  store i64 %41, i64* %59, align 8
  %60 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 0, i32 0, i32 7, i64 0
  %61 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %60 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 16, i1 false) #12
  %62 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 0, i32 1
  store i32 2, i32* %62, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal23NegativeSubmatchSuccessE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %55, align 8
  %63 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 1
  store i32 %5, i32* %63, align 4
  %64 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 2
  store i32 %18, i32* %64, align 8
  %65 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 3
  store i32 %21, i32* %65, align 4
  %66 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 4
  store i32 %25, i32* %66, align 8
  %67 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 0, i32 0
  br label %68

68:                                               ; preds = %35, %52
  %69 = phi %"class.v8::internal::RegExpNode"* [ %37, %35 ], [ %67, %52 ]
  %70 = getelementptr inbounds %"class.v8::internal::RegExpLookaround", %"class.v8::internal::RegExpLookaround"* %0, i64 0, i32 1
  %71 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %70, align 8
  %72 = bitcast %"class.v8::internal::RegExpTree"* %71 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)***
  %73 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*** %72, align 8
  %74 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %73, i64 3
  %75 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %74, align 8
  %76 = tail call %"class.v8::internal::RegExpNode"* %75(%"class.v8::internal::RegExpTree"* %71, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %69) #12
  br i1 %34, label %77, label %94

77:                                               ; preds = %68
  %78 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 8
  %79 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %78, align 8
  %80 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %79, i64 0, i32 2
  %81 = load i64, i64* %80, align 8
  %82 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %79, i64 0, i32 3
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %83, %81
  %85 = icmp ult i64 %84, 72
  br i1 %85, label %86, label %88, !prof !2

86:                                               ; preds = %77
  %87 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %79, i64 72) #12
  br label %90

88:                                               ; preds = %77
  %89 = add i64 %81, 72
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %88, %86
  %91 = phi i64 [ %87, %86 ], [ %81, %88 ]
  %92 = inttoptr i64 %91 to %"class.v8::internal::NegativeLookaroundChoiceNode"*
  tail call void @_ZN2v88internal28NegativeLookaroundChoiceNodeC2ENS0_18GuardedAlternativeES2_PNS0_4ZoneE(%"class.v8::internal::NegativeLookaroundChoiceNode"* %92, %"class.v8::internal::RegExpNode"* %76, %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::Zone"* %79) #12
  %93 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %92, i64 0, i32 0, i32 0
  br label %94

94:                                               ; preds = %68, %90
  %95 = phi %"class.v8::internal::RegExpNode"* [ %93, %90 ], [ %76, %68 ]
  %96 = tail call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13BeginSubmatchEiiPNS0_10RegExpNodeE(i32 %5, i32 %18, %"class.v8::internal::RegExpNode"* %95) #12
  %97 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %96, i64 0, i32 0, i32 0
  store i8 %27, i8* %26, align 4
  ret %"class.v8::internal::RegExpNode"* %97
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal13RegExpCapture6ToNodeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpCapture"* nocapture readonly, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %0, i64 0, i32 1
  %5 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = shl nsw i32 %7, 1
  %9 = or i32 %8, 1
  %10 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 11
  %11 = load i8, i8* %10, align 4, !range !3
  %12 = icmp ne i8 %11, 0
  %13 = select i1 %12, i32 %9, i32 %8
  %14 = select i1 %12, i32 %8, i32 %9
  %15 = tail call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13StorePositionEibPNS0_10RegExpNodeE(i32 %14, i1 zeroext true, %"class.v8::internal::RegExpNode"* %2) #12
  %16 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %15, i64 0, i32 0, i32 0
  %17 = bitcast %"class.v8::internal::RegExpTree"* %5 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)***
  %18 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %18, i64 3
  %20 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %19, align 8
  %21 = tail call %"class.v8::internal::RegExpNode"* %20(%"class.v8::internal::RegExpTree"* %5, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %16) #12
  %22 = tail call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13StorePositionEibPNS0_10RegExpNodeE(i32 %13, i1 zeroext true, %"class.v8::internal::RegExpNode"* %21) #12
  %23 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %22, i64 0, i32 0, i32 0
  ret %"class.v8::internal::RegExpNode"* %23
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal13RegExpCapture6ToNodeEPNS0_10RegExpTreeEiPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpTree"*, i32, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #0 align 2 {
  %5 = shl nsw i32 %1, 1
  %6 = or i32 %5, 1
  %7 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %2, i64 0, i32 11
  %8 = load i8, i8* %7, align 4, !range !3
  %9 = icmp ne i8 %8, 0
  %10 = select i1 %9, i32 %6, i32 %5
  %11 = select i1 %9, i32 %5, i32 %6
  %12 = tail call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13StorePositionEibPNS0_10RegExpNodeE(i32 %11, i1 zeroext true, %"class.v8::internal::RegExpNode"* %3) #12
  %13 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %12, i64 0, i32 0, i32 0
  %14 = bitcast %"class.v8::internal::RegExpTree"* %0 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)***
  %15 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %15, i64 3
  %17 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %16, align 8
  %18 = tail call %"class.v8::internal::RegExpNode"* %17(%"class.v8::internal::RegExpTree"* %0, %"class.v8::internal::RegExpCompiler"* %2, %"class.v8::internal::RegExpNode"* %13) #12
  %19 = tail call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13StorePositionEibPNS0_10RegExpNodeE(i32 %10, i1 zeroext true, %"class.v8::internal::RegExpNode"* %18) #12
  %20 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 0, i32 0
  ret %"class.v8::internal::RegExpNode"* %20
}

declare %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13StorePositionEibPNS0_10RegExpNodeE(i32, i1 zeroext, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal17RegExpAlternative6ToNodeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpAlternative"* nocapture readonly, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::(anonymous namespace)::AssertionSequenceRewriter", align 8
  %5 = getelementptr inbounds %"class.v8::internal::RegExpAlternative", %"class.v8::internal::RegExpAlternative"* %0, i64 0, i32 1
  %6 = load %"class.v8::internal::ZoneList.559"*, %"class.v8::internal::ZoneList.559"** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 15
  %8 = bitcast %"class.v8::internal::Zone"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.v8::internal::(anonymous namespace)::AssertionSequenceRewriter"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #12
  %11 = bitcast %"class.v8::internal::(anonymous namespace)::AssertionSequenceRewriter"* %4 to i64*
  store i64 %9, i64* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::AssertionSequenceRewriter", %"class.v8::internal::(anonymous namespace)::AssertionSequenceRewriter"* %4, i64 0, i32 1
  store %"class.v8::internal::ZoneList.559"* %6, %"class.v8::internal::ZoneList.559"** %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %6, i64 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %51

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %6, i64 0, i32 0
  br label %23

18:                                               ; preds = %44
  %19 = icmp ne i32 %45, -1
  %20 = sub nsw i32 %47, %45
  %21 = icmp sgt i32 %20, 1
  %22 = and i1 %19, %21
  br i1 %22, label %50, label %51

23:                                               ; preds = %44, %16
  %24 = phi i64 [ 0, %16 ], [ %46, %44 ]
  %25 = phi i32 [ -1, %16 ], [ %45, %44 ]
  %26 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %17, align 8
  %27 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %26, i64 %24
  %28 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %27, align 8
  %29 = icmp eq i32 %25, -1
  %30 = bitcast %"class.v8::internal::RegExpTree"* %28 to i1 (%"class.v8::internal::RegExpTree"*)***
  %31 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %30, align 8
  %32 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %31, i64 16
  %33 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %32, align 8
  %34 = call zeroext i1 %33(%"class.v8::internal::RegExpTree"* %28) #12
  br i1 %29, label %35, label %38

35:                                               ; preds = %23
  %36 = trunc i64 %24 to i32
  %37 = select i1 %34, i32 %36, i32 -1
  br label %44

38:                                               ; preds = %23
  br i1 %34, label %44, label %39

39:                                               ; preds = %38
  %40 = trunc i64 %24 to i32
  %41 = sub nsw i32 %40, %25
  %42 = icmp sgt i32 %41, 1
  br i1 %42, label %43, label %44

43:                                               ; preds = %39
  call fastcc void @_ZN2v88internal12_GLOBAL__N_125AssertionSequenceRewriter7RewriteEii(%"class.v8::internal::(anonymous namespace)::AssertionSequenceRewriter"* nonnull %4, i32 %25, i32 %40) #12
  br label %44

44:                                               ; preds = %43, %39, %38, %35
  %45 = phi i32 [ %25, %38 ], [ -1, %43 ], [ -1, %39 ], [ %37, %35 ]
  %46 = add nuw nsw i64 %24, 1
  %47 = load i32, i32* %13, align 4
  %48 = sext i32 %47 to i64
  %49 = icmp slt i64 %46, %48
  br i1 %49, label %23, label %18

50:                                               ; preds = %18
  call fastcc void @_ZN2v88internal12_GLOBAL__N_125AssertionSequenceRewriter7RewriteEii(%"class.v8::internal::(anonymous namespace)::AssertionSequenceRewriter"* nonnull %4, i32 %45, i32 %47) #12
  br label %51

51:                                               ; preds = %3, %18, %50
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #12
  %52 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 11
  %53 = load i8, i8* %52, align 4, !range !3
  %54 = icmp eq i8 %53, 0
  %55 = load i32, i32* %13, align 4
  %56 = icmp sgt i32 %55, 0
  br i1 %54, label %75, label %57

57:                                               ; preds = %51
  br i1 %56, label %58, label %92

58:                                               ; preds = %57
  %59 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %6, i64 0, i32 0
  br label %60

60:                                               ; preds = %58, %60
  %61 = phi i64 [ 0, %58 ], [ %71, %60 ]
  %62 = phi %"class.v8::internal::RegExpNode"* [ %2, %58 ], [ %70, %60 ]
  %63 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %59, align 8
  %64 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %63, i64 %61
  %65 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %64, align 8
  %66 = bitcast %"class.v8::internal::RegExpTree"* %65 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)***
  %67 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*** %66, align 8
  %68 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %67, i64 3
  %69 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %68, align 8
  %70 = call %"class.v8::internal::RegExpNode"* %69(%"class.v8::internal::RegExpTree"* %65, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %62) #12
  %71 = add nuw nsw i64 %61, 1
  %72 = load i32, i32* %13, align 4
  %73 = sext i32 %72 to i64
  %74 = icmp slt i64 %71, %73
  br i1 %74, label %60, label %92

75:                                               ; preds = %51
  br i1 %56, label %76, label %92

76:                                               ; preds = %75
  %77 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %6, i64 0, i32 0
  %78 = sext i32 %55 to i64
  br label %79

79:                                               ; preds = %76, %79
  %80 = phi i64 [ %78, %76 ], [ %82, %79 ]
  %81 = phi %"class.v8::internal::RegExpNode"* [ %2, %76 ], [ %90, %79 ]
  %82 = add nsw i64 %80, -1
  %83 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %77, align 8
  %84 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %83, i64 %82
  %85 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %84, align 8
  %86 = bitcast %"class.v8::internal::RegExpTree"* %85 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)***
  %87 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*** %86, align 8
  %88 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %87, i64 3
  %89 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*)** %88, align 8
  %90 = call %"class.v8::internal::RegExpNode"* %89(%"class.v8::internal::RegExpTree"* %85, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %81) #12
  %91 = icmp sgt i64 %82, 0
  br i1 %91, label %79, label %92

92:                                               ; preds = %60, %79, %57, %75
  %93 = phi %"class.v8::internal::RegExpNode"* [ %2, %75 ], [ %2, %57 ], [ %90, %79 ], [ %70, %60 ]
  ret %"class.v8::internal::RegExpNode"* %93
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEPNS0_4ZoneE(i8 signext, %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::Zone"*) local_unnamed_addr #0 align 2 {
  %4 = sext i8 %0 to i32
  switch i32 %4, label %623 [
    i32 115, label %42
    i32 83, label %35
    i32 119, label %202
    i32 87, label %25
    i32 100, label %331
    i32 68, label %15
    i32 46, label %5
    i32 42, label %526
    i32 110, label %570
  ]

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 2
  %7 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 1
  %8 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %9 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %10 = bitcast %"class.v8::internal::ZoneList.553"* %1 to i8**
  %11 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  %12 = load i32, i32* %6, align 4
  %13 = load i32, i32* %7, align 8
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %450, label %452

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 2
  %17 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 1
  %18 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %19 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %20 = bitcast %"class.v8::internal::ZoneList.553"* %1 to i8**
  %21 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  %22 = load i32, i32* %16, align 4
  %23 = load i32, i32* %17, align 8
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %374, label %376

25:                                               ; preds = %3
  %26 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 2
  %27 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 1
  %28 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %29 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %30 = bitcast %"class.v8::internal::ZoneList.553"* %1 to i8**
  %31 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  %32 = load i32, i32* %26, align 4
  %33 = load i32, i32* %27, align 8
  %34 = icmp slt i32 %32, %33
  br i1 %34, label %255, label %257

35:                                               ; preds = %3
  %36 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 2
  %37 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 1
  %38 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %39 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %40 = bitcast %"class.v8::internal::ZoneList.553"* %1 to i8**
  %41 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  br label %106

42:                                               ; preds = %3
  %43 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 2
  %44 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 1
  %45 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %46 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %47 = bitcast %"class.v8::internal::ZoneList.553"* %1 to i8**
  %48 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  br label %49

49:                                               ; preds = %97, %42
  %50 = phi i64 [ 0, %42 ], [ %104, %97 ]
  %51 = getelementptr inbounds [21 x i32], [21 x i32]* @_ZN2v88internal25regexp_compiler_constantsL12kSpaceRangesE, i64 0, i64 %50
  %52 = load i32, i32* %51, align 8
  %53 = or i64 %50, 1
  %54 = getelementptr inbounds [21 x i32], [21 x i32]* @_ZN2v88internal25regexp_compiler_constantsL12kSpaceRangesE, i64 0, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = add nsw i32 %55, -1
  %57 = zext i32 %56 to i64
  %58 = shl nuw i64 %57, 32
  %59 = zext i32 %52 to i64
  %60 = or i64 %58, %59
  %61 = load i32, i32* %43, align 4
  %62 = load i32, i32* %44, align 8
  %63 = icmp slt i32 %61, %62
  br i1 %63, label %64, label %66

64:                                               ; preds = %49
  %65 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %48, align 8
  br label %97

66:                                               ; preds = %49
  %67 = shl nsw i32 %62, 1
  %68 = or i32 %67, 1
  %69 = sext i32 %68 to i64
  %70 = shl nsw i64 %69, 3
  %71 = load i64, i64* %45, align 8
  %72 = load i64, i64* %46, align 8
  %73 = sub i64 %72, %71
  %74 = icmp ugt i64 %70, %73
  br i1 %74, label %75, label %77, !prof !2

75:                                               ; preds = %66
  %76 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %70) #12
  br label %79

77:                                               ; preds = %66
  %78 = add i64 %71, %70
  store i64 %78, i64* %45, align 8
  br label %79

79:                                               ; preds = %77, %75
  %80 = phi i64 [ %76, %75 ], [ %71, %77 ]
  %81 = inttoptr i64 %80 to %"class.v8::internal::CharacterRange"*
  %82 = load i32, i32* %43, align 4
  %83 = icmp sgt i32 %82, 0
  br i1 %83, label %84, label %95

84:                                               ; preds = %79
  %85 = inttoptr i64 %80 to i8*
  %86 = load i8*, i8** %47, align 8
  %87 = sext i32 %82 to i64
  %88 = shl nsw i64 %87, 3
  switch i64 %88, label %94 [
    i64 16, label %93
    i64 8, label %89
  ]

89:                                               ; preds = %84
  %90 = bitcast i8* %86 to i64*
  %91 = inttoptr i64 %80 to i64*
  %92 = load i64, i64* %90, align 1
  store i64 %92, i64* %91, align 1
  br label %95

93:                                               ; preds = %84
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %85, i8* align 1 %86, i64 16, i1 false) #12
  br label %95

94:                                               ; preds = %84
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %85, i8* align 1 %86, i64 %88, i1 false) #12
  br label %95

95:                                               ; preds = %94, %93, %89, %79
  store %"class.v8::internal::CharacterRange"* %81, %"class.v8::internal::CharacterRange"** %48, align 8
  store i32 %68, i32* %44, align 8
  %96 = load i32, i32* %43, align 4
  br label %97

97:                                               ; preds = %95, %64
  %98 = phi i32 [ %96, %95 ], [ %61, %64 ]
  %99 = phi %"class.v8::internal::CharacterRange"* [ %81, %95 ], [ %65, %64 ]
  %100 = add nsw i32 %98, 1
  store i32 %100, i32* %43, align 4
  %101 = sext i32 %98 to i64
  %102 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %99, i64 %101
  %103 = bitcast %"class.v8::internal::CharacterRange"* %102 to i64*
  store i64 %60, i64* %103, align 4
  %104 = add nuw nsw i64 %50, 2
  %105 = icmp ult i64 %104, 20
  br i1 %105, label %49, label %633

106:                                              ; preds = %35, %151
  %107 = phi i64 [ %161, %151 ], [ 0, %35 ]
  %108 = phi i64 [ %163, %151 ], [ 0, %35 ]
  %109 = getelementptr inbounds [21 x i32], [21 x i32]* @_ZN2v88internal25regexp_compiler_constantsL12kSpaceRangesE, i64 0, i64 %107
  %110 = load i32, i32* %109, align 8
  %111 = add nsw i32 %110, -1
  %112 = zext i32 %111 to i64
  %113 = shl nuw i64 %112, 32
  %114 = or i64 %113, %108
  %115 = load i32, i32* %36, align 4
  %116 = load i32, i32* %37, align 8
  %117 = icmp slt i32 %115, %116
  br i1 %117, label %118, label %120

118:                                              ; preds = %106
  %119 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %41, align 8
  br label %151

120:                                              ; preds = %106
  %121 = shl nsw i32 %116, 1
  %122 = or i32 %121, 1
  %123 = sext i32 %122 to i64
  %124 = shl nsw i64 %123, 3
  %125 = load i64, i64* %38, align 8
  %126 = load i64, i64* %39, align 8
  %127 = sub i64 %126, %125
  %128 = icmp ugt i64 %124, %127
  br i1 %128, label %129, label %131, !prof !2

129:                                              ; preds = %120
  %130 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %124) #12
  br label %133

131:                                              ; preds = %120
  %132 = add i64 %125, %124
  store i64 %132, i64* %38, align 8
  br label %133

133:                                              ; preds = %131, %129
  %134 = phi i64 [ %130, %129 ], [ %125, %131 ]
  %135 = inttoptr i64 %134 to %"class.v8::internal::CharacterRange"*
  %136 = load i32, i32* %36, align 4
  %137 = icmp sgt i32 %136, 0
  br i1 %137, label %138, label %149

138:                                              ; preds = %133
  %139 = inttoptr i64 %134 to i8*
  %140 = load i8*, i8** %40, align 8
  %141 = sext i32 %136 to i64
  %142 = shl nsw i64 %141, 3
  switch i64 %142, label %148 [
    i64 16, label %147
    i64 8, label %143
  ]

143:                                              ; preds = %138
  %144 = bitcast i8* %140 to i64*
  %145 = inttoptr i64 %134 to i64*
  %146 = load i64, i64* %144, align 1
  store i64 %146, i64* %145, align 1
  br label %149

147:                                              ; preds = %138
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %139, i8* align 1 %140, i64 16, i1 false) #12
  br label %149

148:                                              ; preds = %138
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %139, i8* align 1 %140, i64 %142, i1 false) #12
  br label %149

149:                                              ; preds = %148, %147, %143, %133
  store %"class.v8::internal::CharacterRange"* %135, %"class.v8::internal::CharacterRange"** %41, align 8
  store i32 %122, i32* %37, align 8
  %150 = load i32, i32* %36, align 4
  br label %151

151:                                              ; preds = %118, %149
  %152 = phi i32 [ %115, %118 ], [ %150, %149 ]
  %153 = phi %"class.v8::internal::CharacterRange"* [ %119, %118 ], [ %135, %149 ]
  %154 = add nsw i32 %152, 1
  store i32 %154, i32* %36, align 4
  %155 = sext i32 %152 to i64
  %156 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %153, i64 %155
  %157 = bitcast %"class.v8::internal::CharacterRange"* %156 to i64*
  store i64 %114, i64* %157, align 4
  %158 = or i64 %107, 1
  %159 = getelementptr inbounds [21 x i32], [21 x i32]* @_ZN2v88internal25regexp_compiler_constantsL12kSpaceRangesE, i64 0, i64 %158
  %160 = load i32, i32* %159, align 4
  %161 = add nuw nsw i64 %107, 2
  %162 = and i32 %160, 65535
  %163 = zext i32 %162 to i64
  %164 = icmp ult i64 %161, 20
  br i1 %164, label %106, label %165

165:                                              ; preds = %151
  %166 = load i32, i32* %36, align 4
  %167 = load i32, i32* %37, align 8
  %168 = icmp slt i32 %166, %167
  br i1 %168, label %169, label %171

169:                                              ; preds = %165
  %170 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %41, align 8
  br label %624

171:                                              ; preds = %165
  %172 = shl nsw i32 %167, 1
  %173 = or i32 %172, 1
  %174 = sext i32 %173 to i64
  %175 = shl nsw i64 %174, 3
  %176 = load i64, i64* %38, align 8
  %177 = load i64, i64* %39, align 8
  %178 = sub i64 %177, %176
  %179 = icmp ugt i64 %175, %178
  br i1 %179, label %180, label %182, !prof !2

180:                                              ; preds = %171
  %181 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %175) #12
  br label %184

182:                                              ; preds = %171
  %183 = add i64 %176, %175
  store i64 %183, i64* %38, align 8
  br label %184

184:                                              ; preds = %182, %180
  %185 = phi i64 [ %181, %180 ], [ %176, %182 ]
  %186 = inttoptr i64 %185 to %"class.v8::internal::CharacterRange"*
  %187 = load i32, i32* %36, align 4
  %188 = icmp sgt i32 %187, 0
  br i1 %188, label %189, label %200

189:                                              ; preds = %184
  %190 = inttoptr i64 %185 to i8*
  %191 = load i8*, i8** %40, align 8
  %192 = sext i32 %187 to i64
  %193 = shl nsw i64 %192, 3
  switch i64 %193, label %199 [
    i64 16, label %198
    i64 8, label %194
  ]

194:                                              ; preds = %189
  %195 = bitcast i8* %191 to i64*
  %196 = inttoptr i64 %185 to i64*
  %197 = load i64, i64* %195, align 1
  store i64 %197, i64* %196, align 1
  br label %200

198:                                              ; preds = %189
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %190, i8* align 1 %191, i64 16, i1 false) #12
  br label %200

199:                                              ; preds = %189
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %190, i8* align 1 %191, i64 %193, i1 false) #12
  br label %200

200:                                              ; preds = %199, %198, %194, %184
  store %"class.v8::internal::CharacterRange"* %186, %"class.v8::internal::CharacterRange"** %41, align 8
  store i32 %173, i32* %37, align 8
  %201 = load i32, i32* %36, align 4
  br label %624

202:                                              ; preds = %3
  %203 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 2
  %204 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 1
  %205 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %206 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %207 = bitcast %"class.v8::internal::ZoneList.553"* %1 to i8**
  %208 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  %209 = load i32, i32* %203, align 4
  %210 = load i32, i32* %204, align 8
  %211 = icmp slt i32 %209, %210
  br i1 %211, label %212, label %214

212:                                              ; preds = %202
  %213 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %208, align 8
  br label %245

214:                                              ; preds = %202
  %215 = shl nsw i32 %210, 1
  %216 = or i32 %215, 1
  %217 = sext i32 %216 to i64
  %218 = shl nsw i64 %217, 3
  %219 = load i64, i64* %205, align 8
  %220 = load i64, i64* %206, align 8
  %221 = sub i64 %220, %219
  %222 = icmp ugt i64 %218, %221
  br i1 %222, label %223, label %225, !prof !2

223:                                              ; preds = %214
  %224 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %218) #12
  br label %227

225:                                              ; preds = %214
  %226 = add i64 %219, %218
  store i64 %226, i64* %205, align 8
  br label %227

227:                                              ; preds = %225, %223
  %228 = phi i64 [ %224, %223 ], [ %219, %225 ]
  %229 = inttoptr i64 %228 to %"class.v8::internal::CharacterRange"*
  %230 = load i32, i32* %203, align 4
  %231 = icmp sgt i32 %230, 0
  br i1 %231, label %232, label %243

232:                                              ; preds = %227
  %233 = inttoptr i64 %228 to i8*
  %234 = load i8*, i8** %207, align 8
  %235 = sext i32 %230 to i64
  %236 = shl nsw i64 %235, 3
  switch i64 %236, label %242 [
    i64 16, label %241
    i64 8, label %237
  ]

237:                                              ; preds = %232
  %238 = bitcast i8* %234 to i64*
  %239 = inttoptr i64 %228 to i64*
  %240 = load i64, i64* %238, align 1
  store i64 %240, i64* %239, align 1
  br label %243

241:                                              ; preds = %232
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %233, i8* align 1 %234, i64 16, i1 false) #12
  br label %243

242:                                              ; preds = %232
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %233, i8* align 1 %234, i64 %236, i1 false) #12
  br label %243

243:                                              ; preds = %242, %241, %237, %227
  store %"class.v8::internal::CharacterRange"* %229, %"class.v8::internal::CharacterRange"** %208, align 8
  store i32 %216, i32* %204, align 8
  %244 = load i32, i32* %203, align 4
  br label %245

245:                                              ; preds = %243, %212
  %246 = phi i32 [ %244, %243 ], [ %209, %212 ]
  %247 = phi %"class.v8::internal::CharacterRange"* [ %229, %243 ], [ %213, %212 ]
  %248 = add nsw i32 %246, 1
  store i32 %248, i32* %203, align 4
  %249 = sext i32 %246 to i64
  %250 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %247, i64 %249
  %251 = bitcast %"class.v8::internal::CharacterRange"* %250 to i64*
  store i64 244813135920, i64* %251, align 4
  %252 = load i32, i32* %203, align 4
  %253 = load i32, i32* %204, align 8
  %254 = icmp slt i32 %252, %253
  br i1 %254, label %665, label %634

255:                                              ; preds = %25
  %256 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %31, align 8
  br label %288

257:                                              ; preds = %25
  %258 = shl nsw i32 %33, 1
  %259 = or i32 %258, 1
  %260 = sext i32 %259 to i64
  %261 = shl nsw i64 %260, 3
  %262 = load i64, i64* %28, align 8
  %263 = load i64, i64* %29, align 8
  %264 = sub i64 %263, %262
  %265 = icmp ugt i64 %261, %264
  br i1 %265, label %266, label %268, !prof !2

266:                                              ; preds = %257
  %267 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %261) #12
  br label %270

268:                                              ; preds = %257
  %269 = add i64 %262, %261
  store i64 %269, i64* %28, align 8
  br label %270

270:                                              ; preds = %268, %266
  %271 = phi i64 [ %267, %266 ], [ %262, %268 ]
  %272 = inttoptr i64 %271 to %"class.v8::internal::CharacterRange"*
  %273 = load i32, i32* %26, align 4
  %274 = icmp sgt i32 %273, 0
  br i1 %274, label %275, label %286

275:                                              ; preds = %270
  %276 = inttoptr i64 %271 to i8*
  %277 = load i8*, i8** %30, align 8
  %278 = sext i32 %273 to i64
  %279 = shl nsw i64 %278, 3
  switch i64 %279, label %285 [
    i64 16, label %284
    i64 8, label %280
  ]

280:                                              ; preds = %275
  %281 = bitcast i8* %277 to i64*
  %282 = inttoptr i64 %271 to i64*
  %283 = load i64, i64* %281, align 1
  store i64 %283, i64* %282, align 1
  br label %286

284:                                              ; preds = %275
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %276, i8* align 1 %277, i64 16, i1 false) #12
  br label %286

285:                                              ; preds = %275
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %276, i8* align 1 %277, i64 %279, i1 false) #12
  br label %286

286:                                              ; preds = %285, %284, %280, %270
  store %"class.v8::internal::CharacterRange"* %272, %"class.v8::internal::CharacterRange"** %31, align 8
  store i32 %259, i32* %27, align 8
  %287 = load i32, i32* %26, align 4
  br label %288

288:                                              ; preds = %255, %286
  %289 = phi i32 [ %32, %255 ], [ %287, %286 ]
  %290 = phi %"class.v8::internal::CharacterRange"* [ %256, %255 ], [ %272, %286 ]
  %291 = add nsw i32 %289, 1
  store i32 %291, i32* %26, align 4
  %292 = sext i32 %289 to i64
  %293 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %290, i64 %292
  %294 = bitcast %"class.v8::internal::CharacterRange"* %293 to i64*
  store i64 201863462912, i64* %294, align 4
  %295 = load i32, i32* %26, align 4
  %296 = load i32, i32* %27, align 8
  %297 = icmp slt i32 %295, %296
  br i1 %297, label %784, label %753

298:                                              ; preds = %872
  %299 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %31, align 8
  br label %624

300:                                              ; preds = %872
  %301 = shl nsw i32 %880, 1
  %302 = or i32 %301, 1
  %303 = sext i32 %302 to i64
  %304 = shl nsw i64 %303, 3
  %305 = load i64, i64* %28, align 8
  %306 = load i64, i64* %29, align 8
  %307 = sub i64 %306, %305
  %308 = icmp ugt i64 %304, %307
  br i1 %308, label %309, label %311, !prof !2

309:                                              ; preds = %300
  %310 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %304) #12
  br label %313

311:                                              ; preds = %300
  %312 = add i64 %305, %304
  store i64 %312, i64* %28, align 8
  br label %313

313:                                              ; preds = %311, %309
  %314 = phi i64 [ %310, %309 ], [ %305, %311 ]
  %315 = inttoptr i64 %314 to %"class.v8::internal::CharacterRange"*
  %316 = load i32, i32* %26, align 4
  %317 = icmp sgt i32 %316, 0
  br i1 %317, label %318, label %329

318:                                              ; preds = %313
  %319 = inttoptr i64 %314 to i8*
  %320 = load i8*, i8** %30, align 8
  %321 = sext i32 %316 to i64
  %322 = shl nsw i64 %321, 3
  switch i64 %322, label %328 [
    i64 16, label %327
    i64 8, label %323
  ]

323:                                              ; preds = %318
  %324 = bitcast i8* %320 to i64*
  %325 = inttoptr i64 %314 to i64*
  %326 = load i64, i64* %324, align 1
  store i64 %326, i64* %325, align 1
  br label %329

327:                                              ; preds = %318
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %319, i8* align 1 %320, i64 16, i1 false) #12
  br label %329

328:                                              ; preds = %318
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %319, i8* align 1 %320, i64 %322, i1 false) #12
  br label %329

329:                                              ; preds = %328, %327, %323, %313
  store %"class.v8::internal::CharacterRange"* %315, %"class.v8::internal::CharacterRange"** %31, align 8
  store i32 %302, i32* %27, align 8
  %330 = load i32, i32* %26, align 4
  br label %624

331:                                              ; preds = %3
  %332 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 2
  %333 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 1
  %334 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %335 = bitcast %"class.v8::internal::ZoneList.553"* %1 to i8**
  %336 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  %337 = load i32, i32* %332, align 4
  %338 = load i32, i32* %333, align 8
  %339 = icmp slt i32 %337, %338
  br i1 %339, label %340, label %342

340:                                              ; preds = %331
  %341 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %336, align 8
  br label %624

342:                                              ; preds = %331
  %343 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %344 = shl nsw i32 %338, 1
  %345 = or i32 %344, 1
  %346 = sext i32 %345 to i64
  %347 = shl nsw i64 %346, 3
  %348 = load i64, i64* %334, align 8
  %349 = load i64, i64* %343, align 8
  %350 = sub i64 %349, %348
  %351 = icmp ugt i64 %347, %350
  br i1 %351, label %352, label %354, !prof !2

352:                                              ; preds = %342
  %353 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %347) #12
  br label %356

354:                                              ; preds = %342
  %355 = add i64 %348, %347
  store i64 %355, i64* %334, align 8
  br label %356

356:                                              ; preds = %354, %352
  %357 = phi i64 [ %353, %352 ], [ %348, %354 ]
  %358 = inttoptr i64 %357 to %"class.v8::internal::CharacterRange"*
  %359 = load i32, i32* %332, align 4
  %360 = icmp sgt i32 %359, 0
  br i1 %360, label %361, label %372

361:                                              ; preds = %356
  %362 = inttoptr i64 %357 to i8*
  %363 = load i8*, i8** %335, align 8
  %364 = sext i32 %359 to i64
  %365 = shl nsw i64 %364, 3
  switch i64 %365, label %371 [
    i64 16, label %370
    i64 8, label %366
  ]

366:                                              ; preds = %361
  %367 = bitcast i8* %363 to i64*
  %368 = inttoptr i64 %357 to i64*
  %369 = load i64, i64* %367, align 1
  store i64 %369, i64* %368, align 1
  br label %372

370:                                              ; preds = %361
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %362, i8* align 1 %363, i64 16, i1 false) #12
  br label %372

371:                                              ; preds = %361
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %362, i8* align 1 %363, i64 %365, i1 false) #12
  br label %372

372:                                              ; preds = %371, %370, %366, %356
  store %"class.v8::internal::CharacterRange"* %358, %"class.v8::internal::CharacterRange"** %336, align 8
  store i32 %345, i32* %333, align 8
  %373 = load i32, i32* %332, align 4
  br label %624

374:                                              ; preds = %15
  %375 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %21, align 8
  br label %407

376:                                              ; preds = %15
  %377 = shl nsw i32 %23, 1
  %378 = or i32 %377, 1
  %379 = sext i32 %378 to i64
  %380 = shl nsw i64 %379, 3
  %381 = load i64, i64* %18, align 8
  %382 = load i64, i64* %19, align 8
  %383 = sub i64 %382, %381
  %384 = icmp ugt i64 %380, %383
  br i1 %384, label %385, label %387, !prof !2

385:                                              ; preds = %376
  %386 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %380) #12
  br label %389

387:                                              ; preds = %376
  %388 = add i64 %381, %380
  store i64 %388, i64* %18, align 8
  br label %389

389:                                              ; preds = %387, %385
  %390 = phi i64 [ %386, %385 ], [ %381, %387 ]
  %391 = inttoptr i64 %390 to %"class.v8::internal::CharacterRange"*
  %392 = load i32, i32* %16, align 4
  %393 = icmp sgt i32 %392, 0
  br i1 %393, label %394, label %405

394:                                              ; preds = %389
  %395 = inttoptr i64 %390 to i8*
  %396 = load i8*, i8** %20, align 8
  %397 = sext i32 %392 to i64
  %398 = shl nsw i64 %397, 3
  switch i64 %398, label %404 [
    i64 16, label %403
    i64 8, label %399
  ]

399:                                              ; preds = %394
  %400 = bitcast i8* %396 to i64*
  %401 = inttoptr i64 %390 to i64*
  %402 = load i64, i64* %400, align 1
  store i64 %402, i64* %401, align 1
  br label %405

403:                                              ; preds = %394
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %395, i8* align 1 %396, i64 16, i1 false) #12
  br label %405

404:                                              ; preds = %394
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %395, i8* align 1 %396, i64 %398, i1 false) #12
  br label %405

405:                                              ; preds = %404, %403, %399, %389
  store %"class.v8::internal::CharacterRange"* %391, %"class.v8::internal::CharacterRange"** %21, align 8
  store i32 %378, i32* %17, align 8
  %406 = load i32, i32* %16, align 4
  br label %407

407:                                              ; preds = %374, %405
  %408 = phi i32 [ %22, %374 ], [ %406, %405 ]
  %409 = phi %"class.v8::internal::CharacterRange"* [ %375, %374 ], [ %391, %405 ]
  %410 = add nsw i32 %408, 1
  store i32 %410, i32* %16, align 4
  %411 = sext i32 %408 to i64
  %412 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %409, i64 %411
  %413 = bitcast %"class.v8::internal::CharacterRange"* %412 to i64*
  store i64 201863462912, i64* %413, align 4
  %414 = load i32, i32* %16, align 4
  %415 = load i32, i32* %17, align 8
  %416 = icmp slt i32 %414, %415
  br i1 %416, label %417, label %419

417:                                              ; preds = %407
  %418 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %21, align 8
  br label %624

419:                                              ; preds = %407
  %420 = shl nsw i32 %415, 1
  %421 = or i32 %420, 1
  %422 = sext i32 %421 to i64
  %423 = shl nsw i64 %422, 3
  %424 = load i64, i64* %18, align 8
  %425 = load i64, i64* %19, align 8
  %426 = sub i64 %425, %424
  %427 = icmp ugt i64 %423, %426
  br i1 %427, label %428, label %430, !prof !2

428:                                              ; preds = %419
  %429 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %423) #12
  br label %432

430:                                              ; preds = %419
  %431 = add i64 %424, %423
  store i64 %431, i64* %18, align 8
  br label %432

432:                                              ; preds = %430, %428
  %433 = phi i64 [ %429, %428 ], [ %424, %430 ]
  %434 = inttoptr i64 %433 to %"class.v8::internal::CharacterRange"*
  %435 = load i32, i32* %16, align 4
  %436 = icmp sgt i32 %435, 0
  br i1 %436, label %437, label %448

437:                                              ; preds = %432
  %438 = inttoptr i64 %433 to i8*
  %439 = load i8*, i8** %20, align 8
  %440 = sext i32 %435 to i64
  %441 = shl nsw i64 %440, 3
  switch i64 %441, label %447 [
    i64 16, label %446
    i64 8, label %442
  ]

442:                                              ; preds = %437
  %443 = bitcast i8* %439 to i64*
  %444 = inttoptr i64 %433 to i64*
  %445 = load i64, i64* %443, align 1
  store i64 %445, i64* %444, align 1
  br label %448

446:                                              ; preds = %437
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %438, i8* align 1 %439, i64 16, i1 false) #12
  br label %448

447:                                              ; preds = %437
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %438, i8* align 1 %439, i64 %441, i1 false) #12
  br label %448

448:                                              ; preds = %447, %446, %442, %432
  store %"class.v8::internal::CharacterRange"* %434, %"class.v8::internal::CharacterRange"** %21, align 8
  store i32 %421, i32* %17, align 8
  %449 = load i32, i32* %16, align 4
  br label %624

450:                                              ; preds = %5
  %451 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %11, align 8
  br label %483

452:                                              ; preds = %5
  %453 = shl nsw i32 %13, 1
  %454 = or i32 %453, 1
  %455 = sext i32 %454 to i64
  %456 = shl nsw i64 %455, 3
  %457 = load i64, i64* %8, align 8
  %458 = load i64, i64* %9, align 8
  %459 = sub i64 %458, %457
  %460 = icmp ugt i64 %456, %459
  br i1 %460, label %461, label %463, !prof !2

461:                                              ; preds = %452
  %462 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %456) #12
  br label %465

463:                                              ; preds = %452
  %464 = add i64 %457, %456
  store i64 %464, i64* %8, align 8
  br label %465

465:                                              ; preds = %463, %461
  %466 = phi i64 [ %462, %461 ], [ %457, %463 ]
  %467 = inttoptr i64 %466 to %"class.v8::internal::CharacterRange"*
  %468 = load i32, i32* %6, align 4
  %469 = icmp sgt i32 %468, 0
  br i1 %469, label %470, label %481

470:                                              ; preds = %465
  %471 = inttoptr i64 %466 to i8*
  %472 = load i8*, i8** %10, align 8
  %473 = sext i32 %468 to i64
  %474 = shl nsw i64 %473, 3
  switch i64 %474, label %480 [
    i64 16, label %479
    i64 8, label %475
  ]

475:                                              ; preds = %470
  %476 = bitcast i8* %472 to i64*
  %477 = inttoptr i64 %466 to i64*
  %478 = load i64, i64* %476, align 1
  store i64 %478, i64* %477, align 1
  br label %481

479:                                              ; preds = %470
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %471, i8* align 1 %472, i64 16, i1 false) #12
  br label %481

480:                                              ; preds = %470
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %471, i8* align 1 %472, i64 %474, i1 false) #12
  br label %481

481:                                              ; preds = %480, %479, %475, %465
  store %"class.v8::internal::CharacterRange"* %467, %"class.v8::internal::CharacterRange"** %11, align 8
  store i32 %454, i32* %7, align 8
  %482 = load i32, i32* %6, align 4
  br label %483

483:                                              ; preds = %450, %481
  %484 = phi i32 [ %12, %450 ], [ %482, %481 ]
  %485 = phi %"class.v8::internal::CharacterRange"* [ %451, %450 ], [ %467, %481 ]
  %486 = add nsw i32 %484, 1
  store i32 %486, i32* %6, align 4
  %487 = sext i32 %484 to i64
  %488 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %485, i64 %487
  %489 = bitcast %"class.v8::internal::CharacterRange"* %488 to i64*
  store i64 38654705664, i64* %489, align 4
  %490 = load i32, i32* %6, align 4
  %491 = load i32, i32* %7, align 8
  %492 = icmp slt i32 %490, %491
  br i1 %492, label %913, label %882

493:                                              ; preds = %958
  %494 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %11, align 8
  br label %624

495:                                              ; preds = %958
  %496 = shl nsw i32 %966, 1
  %497 = or i32 %496, 1
  %498 = sext i32 %497 to i64
  %499 = shl nsw i64 %498, 3
  %500 = load i64, i64* %8, align 8
  %501 = load i64, i64* %9, align 8
  %502 = sub i64 %501, %500
  %503 = icmp ugt i64 %499, %502
  br i1 %503, label %504, label %506, !prof !2

504:                                              ; preds = %495
  %505 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %499) #12
  br label %508

506:                                              ; preds = %495
  %507 = add i64 %500, %499
  store i64 %507, i64* %8, align 8
  br label %508

508:                                              ; preds = %506, %504
  %509 = phi i64 [ %505, %504 ], [ %500, %506 ]
  %510 = inttoptr i64 %509 to %"class.v8::internal::CharacterRange"*
  %511 = load i32, i32* %6, align 4
  %512 = icmp sgt i32 %511, 0
  br i1 %512, label %513, label %524

513:                                              ; preds = %508
  %514 = inttoptr i64 %509 to i8*
  %515 = load i8*, i8** %10, align 8
  %516 = sext i32 %511 to i64
  %517 = shl nsw i64 %516, 3
  switch i64 %517, label %523 [
    i64 16, label %522
    i64 8, label %518
  ]

518:                                              ; preds = %513
  %519 = bitcast i8* %515 to i64*
  %520 = inttoptr i64 %509 to i64*
  %521 = load i64, i64* %519, align 1
  store i64 %521, i64* %520, align 1
  br label %524

522:                                              ; preds = %513
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %514, i8* align 1 %515, i64 16, i1 false) #12
  br label %524

523:                                              ; preds = %513
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %514, i8* align 1 %515, i64 %517, i1 false) #12
  br label %524

524:                                              ; preds = %523, %522, %518, %508
  store %"class.v8::internal::CharacterRange"* %510, %"class.v8::internal::CharacterRange"** %11, align 8
  store i32 %497, i32* %7, align 8
  %525 = load i32, i32* %6, align 4
  br label %624

526:                                              ; preds = %3
  %527 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 2
  %528 = load i32, i32* %527, align 4
  %529 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 1
  %530 = load i32, i32* %529, align 8
  %531 = icmp slt i32 %528, %530
  br i1 %531, label %532, label %535

532:                                              ; preds = %526
  %533 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  %534 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %533, align 8
  br label %624

535:                                              ; preds = %526
  %536 = shl nsw i32 %530, 1
  %537 = or i32 %536, 1
  %538 = sext i32 %537 to i64
  %539 = shl nsw i64 %538, 3
  %540 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %541 = load i64, i64* %540, align 8
  %542 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %543 = load i64, i64* %542, align 8
  %544 = sub i64 %543, %541
  %545 = icmp ugt i64 %539, %544
  br i1 %545, label %546, label %548, !prof !2

546:                                              ; preds = %535
  %547 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %539) #12
  br label %550

548:                                              ; preds = %535
  %549 = add i64 %541, %539
  store i64 %549, i64* %540, align 8
  br label %550

550:                                              ; preds = %548, %546
  %551 = phi i64 [ %547, %546 ], [ %541, %548 ]
  %552 = inttoptr i64 %551 to %"class.v8::internal::CharacterRange"*
  %553 = load i32, i32* %527, align 4
  %554 = icmp sgt i32 %553, 0
  br i1 %554, label %555, label %567

555:                                              ; preds = %550
  %556 = inttoptr i64 %551 to i8*
  %557 = bitcast %"class.v8::internal::ZoneList.553"* %1 to i8**
  %558 = load i8*, i8** %557, align 8
  %559 = sext i32 %553 to i64
  %560 = shl nsw i64 %559, 3
  switch i64 %560, label %566 [
    i64 16, label %565
    i64 8, label %561
  ]

561:                                              ; preds = %555
  %562 = bitcast i8* %558 to i64*
  %563 = inttoptr i64 %551 to i64*
  %564 = load i64, i64* %562, align 1
  store i64 %564, i64* %563, align 1
  br label %567

565:                                              ; preds = %555
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %556, i8* align 1 %558, i64 16, i1 false) #12
  br label %567

566:                                              ; preds = %555
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %556, i8* align 1 %558, i64 %560, i1 false) #12
  br label %567

567:                                              ; preds = %566, %565, %561, %550
  %568 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %552, %"class.v8::internal::CharacterRange"** %568, align 8
  store i32 %537, i32* %529, align 8
  %569 = load i32, i32* %527, align 4
  br label %624

570:                                              ; preds = %3
  %571 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 2
  %572 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 1
  %573 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %574 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %575 = bitcast %"class.v8::internal::ZoneList.553"* %1 to i8**
  %576 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %1, i64 0, i32 0
  %577 = load i32, i32* %571, align 4
  %578 = load i32, i32* %572, align 8
  %579 = icmp slt i32 %577, %578
  br i1 %579, label %580, label %582

580:                                              ; preds = %570
  %581 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %576, align 8
  br label %613

582:                                              ; preds = %570
  %583 = shl nsw i32 %578, 1
  %584 = or i32 %583, 1
  %585 = sext i32 %584 to i64
  %586 = shl nsw i64 %585, 3
  %587 = load i64, i64* %573, align 8
  %588 = load i64, i64* %574, align 8
  %589 = sub i64 %588, %587
  %590 = icmp ugt i64 %586, %589
  br i1 %590, label %591, label %593, !prof !2

591:                                              ; preds = %582
  %592 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %586) #12
  br label %595

593:                                              ; preds = %582
  %594 = add i64 %587, %586
  store i64 %594, i64* %573, align 8
  br label %595

595:                                              ; preds = %593, %591
  %596 = phi i64 [ %592, %591 ], [ %587, %593 ]
  %597 = inttoptr i64 %596 to %"class.v8::internal::CharacterRange"*
  %598 = load i32, i32* %571, align 4
  %599 = icmp sgt i32 %598, 0
  br i1 %599, label %600, label %611

600:                                              ; preds = %595
  %601 = inttoptr i64 %596 to i8*
  %602 = load i8*, i8** %575, align 8
  %603 = sext i32 %598 to i64
  %604 = shl nsw i64 %603, 3
  switch i64 %604, label %610 [
    i64 16, label %609
    i64 8, label %605
  ]

605:                                              ; preds = %600
  %606 = bitcast i8* %602 to i64*
  %607 = inttoptr i64 %596 to i64*
  %608 = load i64, i64* %606, align 1
  store i64 %608, i64* %607, align 1
  br label %611

609:                                              ; preds = %600
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %601, i8* align 1 %602, i64 16, i1 false) #12
  br label %611

610:                                              ; preds = %600
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %601, i8* align 1 %602, i64 %604, i1 false) #12
  br label %611

611:                                              ; preds = %610, %609, %605, %595
  store %"class.v8::internal::CharacterRange"* %597, %"class.v8::internal::CharacterRange"** %576, align 8
  store i32 %584, i32* %572, align 8
  %612 = load i32, i32* %571, align 4
  br label %613

613:                                              ; preds = %611, %580
  %614 = phi i32 [ %612, %611 ], [ %577, %580 ]
  %615 = phi %"class.v8::internal::CharacterRange"* [ %597, %611 ], [ %581, %580 ]
  %616 = add nsw i32 %614, 1
  store i32 %616, i32* %571, align 4
  %617 = sext i32 %614 to i64
  %618 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %615, i64 %617
  %619 = bitcast %"class.v8::internal::CharacterRange"* %618 to i64*
  store i64 42949672970, i64* %619, align 4
  %620 = load i32, i32* %571, align 4
  %621 = load i32, i32* %572, align 8
  %622 = icmp slt i32 %620, %621
  br i1 %622, label %999, label %968

623:                                              ; preds = %3
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #14
  unreachable

624:                                              ; preds = %169, %200, %298, %329, %417, %448, %493, %524, %532, %567, %372, %340, %751, %749, %1042, %1040
  %625 = phi i32 [ %1041, %1040 ], [ %1008, %1042 ], [ %750, %749 ], [ %717, %751 ], [ %337, %340 ], [ %373, %372 ], [ %569, %567 ], [ %528, %532 ], [ %525, %524 ], [ %965, %493 ], [ %449, %448 ], [ %414, %417 ], [ %330, %329 ], [ %879, %298 ], [ %201, %200 ], [ %166, %169 ]
  %626 = phi i32* [ %571, %1040 ], [ %571, %1042 ], [ %203, %749 ], [ %203, %751 ], [ %332, %340 ], [ %332, %372 ], [ %527, %567 ], [ %527, %532 ], [ %6, %524 ], [ %6, %493 ], [ %16, %448 ], [ %16, %417 ], [ %26, %329 ], [ %26, %298 ], [ %36, %200 ], [ %36, %169 ]
  %627 = phi %"class.v8::internal::CharacterRange"* [ %1026, %1040 ], [ %1043, %1042 ], [ %735, %749 ], [ %752, %751 ], [ %341, %340 ], [ %358, %372 ], [ %552, %567 ], [ %534, %532 ], [ %510, %524 ], [ %494, %493 ], [ %434, %448 ], [ %418, %417 ], [ %315, %329 ], [ %299, %298 ], [ %186, %200 ], [ %170, %169 ]
  %628 = phi i64 [ 35360465756200, %1040 ], [ 35360465756200, %1042 ], [ 523986010209, %749 ], [ 523986010209, %751 ], [ 244813135920, %340 ], [ 244813135920, %372 ], [ 4785070309113856, %567 ], [ 4785070309113856, %532 ], [ 4785070309122090, %524 ], [ 4785070309122090, %493 ], [ 4785070309113914, %448 ], [ 4785070309113914, %417 ], [ 4785070309113979, %329 ], [ 4785070309113979, %298 ], [ 4785070309179136, %200 ], [ 4785070309179136, %169 ]
  %629 = add nsw i32 %625, 1
  store i32 %629, i32* %626, align 4
  %630 = sext i32 %625 to i64
  %631 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %627, i64 %630
  %632 = bitcast %"class.v8::internal::CharacterRange"* %631 to i64*
  store i64 %628, i64* %632, align 4
  br label %633

633:                                              ; preds = %97, %624
  ret void

634:                                              ; preds = %245
  %635 = shl nsw i32 %253, 1
  %636 = or i32 %635, 1
  %637 = sext i32 %636 to i64
  %638 = shl nsw i64 %637, 3
  %639 = load i64, i64* %205, align 8
  %640 = load i64, i64* %206, align 8
  %641 = sub i64 %640, %639
  %642 = icmp ugt i64 %638, %641
  br i1 %642, label %645, label %643, !prof !2

643:                                              ; preds = %634
  %644 = add i64 %639, %638
  store i64 %644, i64* %205, align 8
  br label %647

645:                                              ; preds = %634
  %646 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %638) #12
  br label %647

647:                                              ; preds = %645, %643
  %648 = phi i64 [ %646, %645 ], [ %639, %643 ]
  %649 = inttoptr i64 %648 to %"class.v8::internal::CharacterRange"*
  %650 = load i32, i32* %203, align 4
  %651 = icmp sgt i32 %650, 0
  br i1 %651, label %652, label %663

652:                                              ; preds = %647
  %653 = inttoptr i64 %648 to i8*
  %654 = load i8*, i8** %207, align 8
  %655 = sext i32 %650 to i64
  %656 = shl nsw i64 %655, 3
  switch i64 %656, label %662 [
    i64 16, label %661
    i64 8, label %657
  ]

657:                                              ; preds = %652
  %658 = bitcast i8* %654 to i64*
  %659 = inttoptr i64 %648 to i64*
  %660 = load i64, i64* %658, align 1
  store i64 %660, i64* %659, align 1
  br label %663

661:                                              ; preds = %652
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %653, i8* align 1 %654, i64 16, i1 false) #12
  br label %663

662:                                              ; preds = %652
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %653, i8* align 1 %654, i64 %656, i1 false) #12
  br label %663

663:                                              ; preds = %662, %661, %657, %647
  store %"class.v8::internal::CharacterRange"* %649, %"class.v8::internal::CharacterRange"** %208, align 8
  store i32 %636, i32* %204, align 8
  %664 = load i32, i32* %203, align 4
  br label %667

665:                                              ; preds = %245
  %666 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %208, align 8
  br label %667

667:                                              ; preds = %665, %663
  %668 = phi i32 [ %252, %665 ], [ %664, %663 ]
  %669 = phi %"class.v8::internal::CharacterRange"* [ %666, %665 ], [ %649, %663 ]
  %670 = add nsw i32 %668, 1
  store i32 %670, i32* %203, align 4
  %671 = sext i32 %668 to i64
  %672 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %669, i64 %671
  %673 = bitcast %"class.v8::internal::CharacterRange"* %672 to i64*
  store i64 386547056705, i64* %673, align 4
  %674 = load i32, i32* %203, align 4
  %675 = load i32, i32* %204, align 8
  %676 = icmp slt i32 %674, %675
  br i1 %676, label %708, label %677

677:                                              ; preds = %667
  %678 = shl nsw i32 %675, 1
  %679 = or i32 %678, 1
  %680 = sext i32 %679 to i64
  %681 = shl nsw i64 %680, 3
  %682 = load i64, i64* %205, align 8
  %683 = load i64, i64* %206, align 8
  %684 = sub i64 %683, %682
  %685 = icmp ugt i64 %681, %684
  br i1 %685, label %688, label %686, !prof !2

686:                                              ; preds = %677
  %687 = add i64 %682, %681
  store i64 %687, i64* %205, align 8
  br label %690

688:                                              ; preds = %677
  %689 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %681) #12
  br label %690

690:                                              ; preds = %688, %686
  %691 = phi i64 [ %689, %688 ], [ %682, %686 ]
  %692 = inttoptr i64 %691 to %"class.v8::internal::CharacterRange"*
  %693 = load i32, i32* %203, align 4
  %694 = icmp sgt i32 %693, 0
  br i1 %694, label %695, label %706

695:                                              ; preds = %690
  %696 = inttoptr i64 %691 to i8*
  %697 = load i8*, i8** %207, align 8
  %698 = sext i32 %693 to i64
  %699 = shl nsw i64 %698, 3
  switch i64 %699, label %705 [
    i64 16, label %704
    i64 8, label %700
  ]

700:                                              ; preds = %695
  %701 = bitcast i8* %697 to i64*
  %702 = inttoptr i64 %691 to i64*
  %703 = load i64, i64* %701, align 1
  store i64 %703, i64* %702, align 1
  br label %706

704:                                              ; preds = %695
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %696, i8* align 1 %697, i64 16, i1 false) #12
  br label %706

705:                                              ; preds = %695
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %696, i8* align 1 %697, i64 %699, i1 false) #12
  br label %706

706:                                              ; preds = %705, %704, %700, %690
  store %"class.v8::internal::CharacterRange"* %692, %"class.v8::internal::CharacterRange"** %208, align 8
  store i32 %679, i32* %204, align 8
  %707 = load i32, i32* %203, align 4
  br label %710

708:                                              ; preds = %667
  %709 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %208, align 8
  br label %710

710:                                              ; preds = %708, %706
  %711 = phi i32 [ %674, %708 ], [ %707, %706 ]
  %712 = phi %"class.v8::internal::CharacterRange"* [ %709, %708 ], [ %692, %706 ]
  %713 = add nsw i32 %711, 1
  store i32 %713, i32* %203, align 4
  %714 = sext i32 %711 to i64
  %715 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %712, i64 %714
  %716 = bitcast %"class.v8::internal::CharacterRange"* %715 to i64*
  store i64 408021893215, i64* %716, align 4
  %717 = load i32, i32* %203, align 4
  %718 = load i32, i32* %204, align 8
  %719 = icmp slt i32 %717, %718
  br i1 %719, label %751, label %720

720:                                              ; preds = %710
  %721 = shl nsw i32 %718, 1
  %722 = or i32 %721, 1
  %723 = sext i32 %722 to i64
  %724 = shl nsw i64 %723, 3
  %725 = load i64, i64* %205, align 8
  %726 = load i64, i64* %206, align 8
  %727 = sub i64 %726, %725
  %728 = icmp ugt i64 %724, %727
  br i1 %728, label %731, label %729, !prof !2

729:                                              ; preds = %720
  %730 = add i64 %725, %724
  store i64 %730, i64* %205, align 8
  br label %733

731:                                              ; preds = %720
  %732 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %724) #12
  br label %733

733:                                              ; preds = %731, %729
  %734 = phi i64 [ %732, %731 ], [ %725, %729 ]
  %735 = inttoptr i64 %734 to %"class.v8::internal::CharacterRange"*
  %736 = load i32, i32* %203, align 4
  %737 = icmp sgt i32 %736, 0
  br i1 %737, label %738, label %749

738:                                              ; preds = %733
  %739 = inttoptr i64 %734 to i8*
  %740 = load i8*, i8** %207, align 8
  %741 = sext i32 %736 to i64
  %742 = shl nsw i64 %741, 3
  switch i64 %742, label %748 [
    i64 16, label %747
    i64 8, label %743
  ]

743:                                              ; preds = %738
  %744 = bitcast i8* %740 to i64*
  %745 = inttoptr i64 %734 to i64*
  %746 = load i64, i64* %744, align 1
  store i64 %746, i64* %745, align 1
  br label %749

747:                                              ; preds = %738
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %739, i8* align 1 %740, i64 16, i1 false) #12
  br label %749

748:                                              ; preds = %738
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %739, i8* align 1 %740, i64 %742, i1 false) #12
  br label %749

749:                                              ; preds = %748, %747, %743, %733
  store %"class.v8::internal::CharacterRange"* %735, %"class.v8::internal::CharacterRange"** %208, align 8
  store i32 %722, i32* %204, align 8
  %750 = load i32, i32* %203, align 4
  br label %624

751:                                              ; preds = %710
  %752 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %208, align 8
  br label %624

753:                                              ; preds = %288
  %754 = shl nsw i32 %296, 1
  %755 = or i32 %754, 1
  %756 = sext i32 %755 to i64
  %757 = shl nsw i64 %756, 3
  %758 = load i64, i64* %28, align 8
  %759 = load i64, i64* %29, align 8
  %760 = sub i64 %759, %758
  %761 = icmp ugt i64 %757, %760
  br i1 %761, label %764, label %762, !prof !2

762:                                              ; preds = %753
  %763 = add i64 %758, %757
  store i64 %763, i64* %28, align 8
  br label %766

764:                                              ; preds = %753
  %765 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %757) #12
  br label %766

766:                                              ; preds = %764, %762
  %767 = phi i64 [ %765, %764 ], [ %758, %762 ]
  %768 = inttoptr i64 %767 to %"class.v8::internal::CharacterRange"*
  %769 = load i32, i32* %26, align 4
  %770 = icmp sgt i32 %769, 0
  br i1 %770, label %771, label %782

771:                                              ; preds = %766
  %772 = inttoptr i64 %767 to i8*
  %773 = load i8*, i8** %30, align 8
  %774 = sext i32 %769 to i64
  %775 = shl nsw i64 %774, 3
  switch i64 %775, label %781 [
    i64 16, label %780
    i64 8, label %776
  ]

776:                                              ; preds = %771
  %777 = bitcast i8* %773 to i64*
  %778 = inttoptr i64 %767 to i64*
  %779 = load i64, i64* %777, align 1
  store i64 %779, i64* %778, align 1
  br label %782

780:                                              ; preds = %771
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %772, i8* align 1 %773, i64 16, i1 false) #12
  br label %782

781:                                              ; preds = %771
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %772, i8* align 1 %773, i64 %775, i1 false) #12
  br label %782

782:                                              ; preds = %781, %780, %776, %766
  store %"class.v8::internal::CharacterRange"* %768, %"class.v8::internal::CharacterRange"** %31, align 8
  store i32 %755, i32* %27, align 8
  %783 = load i32, i32* %26, align 4
  br label %786

784:                                              ; preds = %288
  %785 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %31, align 8
  br label %786

786:                                              ; preds = %784, %782
  %787 = phi i32 [ %295, %784 ], [ %783, %782 ]
  %788 = phi %"class.v8::internal::CharacterRange"* [ %785, %784 ], [ %768, %782 ]
  %789 = add nsw i32 %787, 1
  store i32 %789, i32* %26, align 4
  %790 = sext i32 %787 to i64
  %791 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %788, i64 %790
  %792 = bitcast %"class.v8::internal::CharacterRange"* %791 to i64*
  store i64 274877907002, i64* %792, align 4
  %793 = load i32, i32* %26, align 4
  %794 = load i32, i32* %27, align 8
  %795 = icmp slt i32 %793, %794
  br i1 %795, label %827, label %796

796:                                              ; preds = %786
  %797 = shl nsw i32 %794, 1
  %798 = or i32 %797, 1
  %799 = sext i32 %798 to i64
  %800 = shl nsw i64 %799, 3
  %801 = load i64, i64* %28, align 8
  %802 = load i64, i64* %29, align 8
  %803 = sub i64 %802, %801
  %804 = icmp ugt i64 %800, %803
  br i1 %804, label %807, label %805, !prof !2

805:                                              ; preds = %796
  %806 = add i64 %801, %800
  store i64 %806, i64* %28, align 8
  br label %809

807:                                              ; preds = %796
  %808 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %800) #12
  br label %809

809:                                              ; preds = %807, %805
  %810 = phi i64 [ %808, %807 ], [ %801, %805 ]
  %811 = inttoptr i64 %810 to %"class.v8::internal::CharacterRange"*
  %812 = load i32, i32* %26, align 4
  %813 = icmp sgt i32 %812, 0
  br i1 %813, label %814, label %825

814:                                              ; preds = %809
  %815 = inttoptr i64 %810 to i8*
  %816 = load i8*, i8** %30, align 8
  %817 = sext i32 %812 to i64
  %818 = shl nsw i64 %817, 3
  switch i64 %818, label %824 [
    i64 16, label %823
    i64 8, label %819
  ]

819:                                              ; preds = %814
  %820 = bitcast i8* %816 to i64*
  %821 = inttoptr i64 %810 to i64*
  %822 = load i64, i64* %820, align 1
  store i64 %822, i64* %821, align 1
  br label %825

823:                                              ; preds = %814
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %815, i8* align 1 %816, i64 16, i1 false) #12
  br label %825

824:                                              ; preds = %814
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %815, i8* align 1 %816, i64 %818, i1 false) #12
  br label %825

825:                                              ; preds = %824, %823, %819, %809
  store %"class.v8::internal::CharacterRange"* %811, %"class.v8::internal::CharacterRange"** %31, align 8
  store i32 %798, i32* %27, align 8
  %826 = load i32, i32* %26, align 4
  br label %829

827:                                              ; preds = %786
  %828 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %31, align 8
  br label %829

829:                                              ; preds = %827, %825
  %830 = phi i32 [ %793, %827 ], [ %826, %825 ]
  %831 = phi %"class.v8::internal::CharacterRange"* [ %828, %827 ], [ %811, %825 ]
  %832 = add nsw i32 %830, 1
  store i32 %832, i32* %26, align 4
  %833 = sext i32 %830 to i64
  %834 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %831, i64 %833
  %835 = bitcast %"class.v8::internal::CharacterRange"* %834 to i64*
  store i64 403726925915, i64* %835, align 4
  %836 = load i32, i32* %26, align 4
  %837 = load i32, i32* %27, align 8
  %838 = icmp slt i32 %836, %837
  br i1 %838, label %870, label %839

839:                                              ; preds = %829
  %840 = shl nsw i32 %837, 1
  %841 = or i32 %840, 1
  %842 = sext i32 %841 to i64
  %843 = shl nsw i64 %842, 3
  %844 = load i64, i64* %28, align 8
  %845 = load i64, i64* %29, align 8
  %846 = sub i64 %845, %844
  %847 = icmp ugt i64 %843, %846
  br i1 %847, label %850, label %848, !prof !2

848:                                              ; preds = %839
  %849 = add i64 %844, %843
  store i64 %849, i64* %28, align 8
  br label %852

850:                                              ; preds = %839
  %851 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %843) #12
  br label %852

852:                                              ; preds = %850, %848
  %853 = phi i64 [ %851, %850 ], [ %844, %848 ]
  %854 = inttoptr i64 %853 to %"class.v8::internal::CharacterRange"*
  %855 = load i32, i32* %26, align 4
  %856 = icmp sgt i32 %855, 0
  br i1 %856, label %857, label %868

857:                                              ; preds = %852
  %858 = inttoptr i64 %853 to i8*
  %859 = load i8*, i8** %30, align 8
  %860 = sext i32 %855 to i64
  %861 = shl nsw i64 %860, 3
  switch i64 %861, label %867 [
    i64 16, label %866
    i64 8, label %862
  ]

862:                                              ; preds = %857
  %863 = bitcast i8* %859 to i64*
  %864 = inttoptr i64 %853 to i64*
  %865 = load i64, i64* %863, align 1
  store i64 %865, i64* %864, align 1
  br label %868

866:                                              ; preds = %857
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %858, i8* align 1 %859, i64 16, i1 false) #12
  br label %868

867:                                              ; preds = %857
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %858, i8* align 1 %859, i64 %861, i1 false) #12
  br label %868

868:                                              ; preds = %867, %866, %862, %852
  store %"class.v8::internal::CharacterRange"* %854, %"class.v8::internal::CharacterRange"** %31, align 8
  store i32 %841, i32* %27, align 8
  %869 = load i32, i32* %26, align 4
  br label %872

870:                                              ; preds = %829
  %871 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %31, align 8
  br label %872

872:                                              ; preds = %870, %868
  %873 = phi i32 [ %836, %870 ], [ %869, %868 ]
  %874 = phi %"class.v8::internal::CharacterRange"* [ %871, %870 ], [ %854, %868 ]
  %875 = add nsw i32 %873, 1
  store i32 %875, i32* %26, align 4
  %876 = sext i32 %873 to i64
  %877 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %874, i64 %876
  %878 = bitcast %"class.v8::internal::CharacterRange"* %877 to i64*
  store i64 412316860512, i64* %878, align 4
  %879 = load i32, i32* %26, align 4
  %880 = load i32, i32* %27, align 8
  %881 = icmp slt i32 %879, %880
  br i1 %881, label %298, label %300

882:                                              ; preds = %483
  %883 = shl nsw i32 %491, 1
  %884 = or i32 %883, 1
  %885 = sext i32 %884 to i64
  %886 = shl nsw i64 %885, 3
  %887 = load i64, i64* %8, align 8
  %888 = load i64, i64* %9, align 8
  %889 = sub i64 %888, %887
  %890 = icmp ugt i64 %886, %889
  br i1 %890, label %893, label %891, !prof !2

891:                                              ; preds = %882
  %892 = add i64 %887, %886
  store i64 %892, i64* %8, align 8
  br label %895

893:                                              ; preds = %882
  %894 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %886) #12
  br label %895

895:                                              ; preds = %893, %891
  %896 = phi i64 [ %894, %893 ], [ %887, %891 ]
  %897 = inttoptr i64 %896 to %"class.v8::internal::CharacterRange"*
  %898 = load i32, i32* %6, align 4
  %899 = icmp sgt i32 %898, 0
  br i1 %899, label %900, label %911

900:                                              ; preds = %895
  %901 = inttoptr i64 %896 to i8*
  %902 = load i8*, i8** %10, align 8
  %903 = sext i32 %898 to i64
  %904 = shl nsw i64 %903, 3
  switch i64 %904, label %910 [
    i64 16, label %909
    i64 8, label %905
  ]

905:                                              ; preds = %900
  %906 = bitcast i8* %902 to i64*
  %907 = inttoptr i64 %896 to i64*
  %908 = load i64, i64* %906, align 1
  store i64 %908, i64* %907, align 1
  br label %911

909:                                              ; preds = %900
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %901, i8* align 1 %902, i64 16, i1 false) #12
  br label %911

910:                                              ; preds = %900
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %901, i8* align 1 %902, i64 %904, i1 false) #12
  br label %911

911:                                              ; preds = %910, %909, %905, %895
  store %"class.v8::internal::CharacterRange"* %897, %"class.v8::internal::CharacterRange"** %11, align 8
  store i32 %884, i32* %7, align 8
  %912 = load i32, i32* %6, align 4
  br label %915

913:                                              ; preds = %483
  %914 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %11, align 8
  br label %915

915:                                              ; preds = %913, %911
  %916 = phi i32 [ %490, %913 ], [ %912, %911 ]
  %917 = phi %"class.v8::internal::CharacterRange"* [ %914, %913 ], [ %897, %911 ]
  %918 = add nsw i32 %916, 1
  store i32 %918, i32* %6, align 4
  %919 = sext i32 %916 to i64
  %920 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %917, i64 %919
  %921 = bitcast %"class.v8::internal::CharacterRange"* %920 to i64*
  store i64 51539607563, i64* %921, align 4
  %922 = load i32, i32* %6, align 4
  %923 = load i32, i32* %7, align 8
  %924 = icmp slt i32 %922, %923
  br i1 %924, label %956, label %925

925:                                              ; preds = %915
  %926 = shl nsw i32 %923, 1
  %927 = or i32 %926, 1
  %928 = sext i32 %927 to i64
  %929 = shl nsw i64 %928, 3
  %930 = load i64, i64* %8, align 8
  %931 = load i64, i64* %9, align 8
  %932 = sub i64 %931, %930
  %933 = icmp ugt i64 %929, %932
  br i1 %933, label %936, label %934, !prof !2

934:                                              ; preds = %925
  %935 = add i64 %930, %929
  store i64 %935, i64* %8, align 8
  br label %938

936:                                              ; preds = %925
  %937 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %929) #12
  br label %938

938:                                              ; preds = %936, %934
  %939 = phi i64 [ %937, %936 ], [ %930, %934 ]
  %940 = inttoptr i64 %939 to %"class.v8::internal::CharacterRange"*
  %941 = load i32, i32* %6, align 4
  %942 = icmp sgt i32 %941, 0
  br i1 %942, label %943, label %954

943:                                              ; preds = %938
  %944 = inttoptr i64 %939 to i8*
  %945 = load i8*, i8** %10, align 8
  %946 = sext i32 %941 to i64
  %947 = shl nsw i64 %946, 3
  switch i64 %947, label %953 [
    i64 16, label %952
    i64 8, label %948
  ]

948:                                              ; preds = %943
  %949 = bitcast i8* %945 to i64*
  %950 = inttoptr i64 %939 to i64*
  %951 = load i64, i64* %949, align 1
  store i64 %951, i64* %950, align 1
  br label %954

952:                                              ; preds = %943
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %944, i8* align 1 %945, i64 16, i1 false) #12
  br label %954

953:                                              ; preds = %943
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %944, i8* align 1 %945, i64 %947, i1 false) #12
  br label %954

954:                                              ; preds = %953, %952, %948, %938
  store %"class.v8::internal::CharacterRange"* %940, %"class.v8::internal::CharacterRange"** %11, align 8
  store i32 %927, i32* %7, align 8
  %955 = load i32, i32* %6, align 4
  br label %958

956:                                              ; preds = %915
  %957 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %11, align 8
  br label %958

958:                                              ; preds = %956, %954
  %959 = phi i32 [ %922, %956 ], [ %955, %954 ]
  %960 = phi %"class.v8::internal::CharacterRange"* [ %957, %956 ], [ %940, %954 ]
  %961 = add nsw i32 %959, 1
  store i32 %961, i32* %6, align 4
  %962 = sext i32 %959 to i64
  %963 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %960, i64 %962
  %964 = bitcast %"class.v8::internal::CharacterRange"* %963 to i64*
  store i64 35351875813390, i64* %964, align 4
  %965 = load i32, i32* %6, align 4
  %966 = load i32, i32* %7, align 8
  %967 = icmp slt i32 %965, %966
  br i1 %967, label %493, label %495

968:                                              ; preds = %613
  %969 = shl nsw i32 %621, 1
  %970 = or i32 %969, 1
  %971 = sext i32 %970 to i64
  %972 = shl nsw i64 %971, 3
  %973 = load i64, i64* %573, align 8
  %974 = load i64, i64* %574, align 8
  %975 = sub i64 %974, %973
  %976 = icmp ugt i64 %972, %975
  br i1 %976, label %979, label %977, !prof !2

977:                                              ; preds = %968
  %978 = add i64 %973, %972
  store i64 %978, i64* %573, align 8
  br label %981

979:                                              ; preds = %968
  %980 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %972) #12
  br label %981

981:                                              ; preds = %979, %977
  %982 = phi i64 [ %980, %979 ], [ %973, %977 ]
  %983 = inttoptr i64 %982 to %"class.v8::internal::CharacterRange"*
  %984 = load i32, i32* %571, align 4
  %985 = icmp sgt i32 %984, 0
  br i1 %985, label %986, label %997

986:                                              ; preds = %981
  %987 = inttoptr i64 %982 to i8*
  %988 = load i8*, i8** %575, align 8
  %989 = sext i32 %984 to i64
  %990 = shl nsw i64 %989, 3
  switch i64 %990, label %996 [
    i64 16, label %995
    i64 8, label %991
  ]

991:                                              ; preds = %986
  %992 = bitcast i8* %988 to i64*
  %993 = inttoptr i64 %982 to i64*
  %994 = load i64, i64* %992, align 1
  store i64 %994, i64* %993, align 1
  br label %997

995:                                              ; preds = %986
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %987, i8* align 1 %988, i64 16, i1 false) #12
  br label %997

996:                                              ; preds = %986
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %987, i8* align 1 %988, i64 %990, i1 false) #12
  br label %997

997:                                              ; preds = %996, %995, %991, %981
  store %"class.v8::internal::CharacterRange"* %983, %"class.v8::internal::CharacterRange"** %576, align 8
  store i32 %970, i32* %572, align 8
  %998 = load i32, i32* %571, align 4
  br label %1001

999:                                              ; preds = %613
  %1000 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %576, align 8
  br label %1001

1001:                                             ; preds = %999, %997
  %1002 = phi i32 [ %620, %999 ], [ %998, %997 ]
  %1003 = phi %"class.v8::internal::CharacterRange"* [ %1000, %999 ], [ %983, %997 ]
  %1004 = add nsw i32 %1002, 1
  store i32 %1004, i32* %571, align 4
  %1005 = sext i32 %1002 to i64
  %1006 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %1003, i64 %1005
  %1007 = bitcast %"class.v8::internal::CharacterRange"* %1006 to i64*
  store i64 55834574861, i64* %1007, align 4
  %1008 = load i32, i32* %571, align 4
  %1009 = load i32, i32* %572, align 8
  %1010 = icmp slt i32 %1008, %1009
  br i1 %1010, label %1042, label %1011

1011:                                             ; preds = %1001
  %1012 = shl nsw i32 %1009, 1
  %1013 = or i32 %1012, 1
  %1014 = sext i32 %1013 to i64
  %1015 = shl nsw i64 %1014, 3
  %1016 = load i64, i64* %573, align 8
  %1017 = load i64, i64* %574, align 8
  %1018 = sub i64 %1017, %1016
  %1019 = icmp ugt i64 %1015, %1018
  br i1 %1019, label %1022, label %1020, !prof !2

1020:                                             ; preds = %1011
  %1021 = add i64 %1016, %1015
  store i64 %1021, i64* %573, align 8
  br label %1024

1022:                                             ; preds = %1011
  %1023 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %1015) #12
  br label %1024

1024:                                             ; preds = %1022, %1020
  %1025 = phi i64 [ %1023, %1022 ], [ %1016, %1020 ]
  %1026 = inttoptr i64 %1025 to %"class.v8::internal::CharacterRange"*
  %1027 = load i32, i32* %571, align 4
  %1028 = icmp sgt i32 %1027, 0
  br i1 %1028, label %1029, label %1040

1029:                                             ; preds = %1024
  %1030 = inttoptr i64 %1025 to i8*
  %1031 = load i8*, i8** %575, align 8
  %1032 = sext i32 %1027 to i64
  %1033 = shl nsw i64 %1032, 3
  switch i64 %1033, label %1039 [
    i64 16, label %1038
    i64 8, label %1034
  ]

1034:                                             ; preds = %1029
  %1035 = bitcast i8* %1031 to i64*
  %1036 = inttoptr i64 %1025 to i64*
  %1037 = load i64, i64* %1035, align 1
  store i64 %1037, i64* %1036, align 1
  br label %1040

1038:                                             ; preds = %1029
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1030, i8* align 1 %1031, i64 16, i1 false) #12
  br label %1040

1039:                                             ; preds = %1029
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1030, i8* align 1 %1031, i64 %1033, i1 false) #12
  br label %1040

1040:                                             ; preds = %1039, %1038, %1034, %1024
  store %"class.v8::internal::CharacterRange"* %1026, %"class.v8::internal::CharacterRange"** %576, align 8
  store i32 %1013, i32* %572, align 8
  %1041 = load i32, i32* %571, align 4
  br label %624

1042:                                             ; preds = %1001
  %1043 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %576, align 8
  br label %624
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { i32*, i64 } @_ZN2v88internal14CharacterRange13GetWordBoundsEv() local_unnamed_addr #5 align 2 {
  ret { i32*, i64 } { i32* getelementptr inbounds ([9 x i32], [9 x i32]* @_ZN2v88internal25regexp_compiler_constantsL11kWordRangesE, i64 0, i64 0), i64 8 }
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal14CharacterRange18AddCaseEquivalentsEPNS0_7IsolateEPNS0_4ZoneEPNS0_8ZoneListIS1_EEb(%"class.v8::internal::Isolate"* nocapture readnone, %"class.v8::internal::Zone"*, %"class.v8::internal::ZoneList.553"* nocapture, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.icu_69::UnicodeSet", align 8
  %6 = alloca %"class.icu_69::UnicodeSet", align 8
  tail call void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.553"* %2)
  %7 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %2, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = bitcast %"class.icu_69::UnicodeSet"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %9) #12
  call void @_ZN6icu_6910UnicodeSetC1Ev(%"class.icu_69::UnicodeSet"* nonnull %5) #12
  %10 = icmp sgt i32 %8, 0
  br i1 %10, label %11, label %43

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %2, i64 0, i32 0
  %13 = zext i32 %8 to i64
  br i1 %3, label %14, label %59

14:                                               ; preds = %11, %40
  %15 = phi i64 [ %41, %40 ], [ 0, %11 ]
  %16 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %12, align 8
  %17 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %16, i64 %15
  %18 = bitcast %"class.v8::internal::CharacterRange"* %17 to i64*
  %19 = load i64, i64* %18, align 4
  %20 = trunc i64 %19 to i32
  %21 = icmp ugt i32 %20, 65535
  br i1 %21, label %40, label %22

22:                                               ; preds = %14
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = icmp ult i32 %24, 65535
  %26 = select i1 %25, i32 %24, i32 65535
  %27 = icmp ugt i32 %20, 55295
  %28 = icmp ult i32 %26, 57344
  %29 = and i1 %27, %28
  br i1 %29, label %40, label %30

30:                                               ; preds = %22
  %31 = call zeroext i1 @_ZN2v88internal30RangeContainsLatin1EquivalentsENS0_14CharacterRangeE(i64 %19) #12
  br i1 %31, label %37, label %32

32:                                               ; preds = %30
  %33 = icmp ugt i32 %20, 255
  br i1 %33, label %40, label %34

34:                                               ; preds = %32
  %35 = icmp ult i32 %26, 255
  %36 = select i1 %35, i32 %24, i32 255
  br label %37

37:                                               ; preds = %34, %30
  %38 = phi i32 [ %26, %30 ], [ %36, %34 ]
  %39 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet3addEii(%"class.icu_69::UnicodeSet"* nonnull %5, i32 %20, i32 %38) #12
  br label %40

40:                                               ; preds = %37, %32, %22, %14
  %41 = add nuw nsw i64 %15, 1
  %42 = icmp eq i64 %41, %13
  br i1 %42, label %43, label %14

43:                                               ; preds = %77, %40, %4
  %44 = bitcast %"class.icu_69::UnicodeSet"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %44) #12
  call void @_ZN6icu_6910UnicodeSetC1ERKS0_(%"class.icu_69::UnicodeSet"* nonnull %6, %"class.icu_69::UnicodeSet"* nonnull dereferenceable(200) %5) #12
  %45 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN2v88internal17RegExpCaseFolding9IgnoreSetEv() #12
  %46 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet9removeAllERKS0_(%"class.icu_69::UnicodeSet"* nonnull %5, %"class.icu_69::UnicodeSet"* dereferenceable(200) %45) #12
  %47 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet9closeOverEi(%"class.icu_69::UnicodeSet"* nonnull %5, i32 2) #12
  %48 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN2v88internal17RegExpCaseFolding9IgnoreSetEv() #12
  %49 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet9removeAllERKS0_(%"class.icu_69::UnicodeSet"* nonnull %5, %"class.icu_69::UnicodeSet"* dereferenceable(200) %48) #12
  %50 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet9removeAllERKS0_(%"class.icu_69::UnicodeSet"* nonnull %5, %"class.icu_69::UnicodeSet"* nonnull dereferenceable(200) %6) #12
  %51 = call i32 @_ZNK6icu_6910UnicodeSet13getRangeCountEv(%"class.icu_69::UnicodeSet"* nonnull %5) #12
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %80

53:                                               ; preds = %43
  %54 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %2, i64 0, i32 1
  %55 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 2
  %56 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 3
  %57 = bitcast %"class.v8::internal::ZoneList.553"* %2 to i8**
  %58 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %2, i64 0, i32 0
  br label %81

59:                                               ; preds = %11, %77
  %60 = phi i64 [ %78, %77 ], [ 0, %11 ]
  %61 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %12, align 8
  %62 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %61, i64 %60
  %63 = bitcast %"class.v8::internal::CharacterRange"* %62 to i64*
  %64 = load i64, i64* %63, align 4
  %65 = trunc i64 %64 to i32
  %66 = icmp ugt i32 %65, 65535
  br i1 %66, label %77, label %67

67:                                               ; preds = %59
  %68 = lshr i64 %64, 32
  %69 = trunc i64 %68 to i32
  %70 = icmp ult i32 %69, 65535
  %71 = select i1 %70, i32 %69, i32 65535
  %72 = icmp ugt i32 %65, 55295
  %73 = icmp ult i32 %71, 57344
  %74 = and i1 %72, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %67
  %76 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet3addEii(%"class.icu_69::UnicodeSet"* nonnull %5, i32 %65, i32 %71) #12
  br label %77

77:                                               ; preds = %75, %67, %59
  %78 = add nuw nsw i64 %60, 1
  %79 = icmp eq i64 %78, %13
  br i1 %79, label %43, label %59

80:                                               ; preds = %167, %43
  call void @_ZN6icu_6910UnicodeSetD1Ev(%"class.icu_69::UnicodeSet"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %44) #12
  call void @_ZN6icu_6910UnicodeSetD1Ev(%"class.icu_69::UnicodeSet"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %9) #12
  ret void

81:                                               ; preds = %53, %167
  %82 = phi i32 [ 0, %53 ], [ %175, %167 ]
  %83 = call i32 @_ZNK6icu_6910UnicodeSet13getRangeStartEi(%"class.icu_69::UnicodeSet"* nonnull %5, i32 %82) #12
  %84 = call i32 @_ZNK6icu_6910UnicodeSet11getRangeEndEi(%"class.icu_69::UnicodeSet"* nonnull %5, i32 %82) #12
  %85 = icmp eq i32 %83, %84
  br i1 %85, label %86, label %126

86:                                               ; preds = %81
  %87 = zext i32 %83 to i64
  %88 = shl nuw i64 %87, 32
  %89 = or i64 %88, %87
  %90 = load i32, i32* %7, align 4
  %91 = load i32, i32* %54, align 8
  %92 = icmp slt i32 %90, %91
  br i1 %92, label %93, label %95

93:                                               ; preds = %86
  %94 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %58, align 8
  br label %167

95:                                               ; preds = %86
  %96 = shl nsw i32 %91, 1
  %97 = or i32 %96, 1
  %98 = sext i32 %97 to i64
  %99 = shl nsw i64 %98, 3
  %100 = load i64, i64* %55, align 8
  %101 = load i64, i64* %56, align 8
  %102 = sub i64 %101, %100
  %103 = icmp ugt i64 %99, %102
  br i1 %103, label %104, label %106, !prof !2

104:                                              ; preds = %95
  %105 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 %99) #12
  br label %108

106:                                              ; preds = %95
  %107 = add i64 %100, %99
  store i64 %107, i64* %55, align 8
  br label %108

108:                                              ; preds = %106, %104
  %109 = phi i64 [ %105, %104 ], [ %100, %106 ]
  %110 = inttoptr i64 %109 to %"class.v8::internal::CharacterRange"*
  %111 = load i32, i32* %7, align 4
  %112 = icmp sgt i32 %111, 0
  br i1 %112, label %113, label %124

113:                                              ; preds = %108
  %114 = inttoptr i64 %109 to i8*
  %115 = load i8*, i8** %57, align 8
  %116 = sext i32 %111 to i64
  %117 = shl nsw i64 %116, 3
  switch i64 %117, label %123 [
    i64 16, label %122
    i64 8, label %118
  ]

118:                                              ; preds = %113
  %119 = bitcast i8* %115 to i64*
  %120 = inttoptr i64 %109 to i64*
  %121 = load i64, i64* %119, align 1
  store i64 %121, i64* %120, align 1
  br label %124

122:                                              ; preds = %113
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 %115, i64 16, i1 false) #12
  br label %124

123:                                              ; preds = %113
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 %115, i64 %117, i1 false) #12
  br label %124

124:                                              ; preds = %123, %122, %118, %108
  store %"class.v8::internal::CharacterRange"* %110, %"class.v8::internal::CharacterRange"** %58, align 8
  store i32 %97, i32* %54, align 8
  %125 = load i32, i32* %7, align 4
  br label %167

126:                                              ; preds = %81
  %127 = zext i32 %84 to i64
  %128 = shl nuw i64 %127, 32
  %129 = zext i32 %83 to i64
  %130 = or i64 %128, %129
  %131 = load i32, i32* %7, align 4
  %132 = load i32, i32* %54, align 8
  %133 = icmp slt i32 %131, %132
  br i1 %133, label %134, label %136

134:                                              ; preds = %126
  %135 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %58, align 8
  br label %167

136:                                              ; preds = %126
  %137 = shl nsw i32 %132, 1
  %138 = or i32 %137, 1
  %139 = sext i32 %138 to i64
  %140 = shl nsw i64 %139, 3
  %141 = load i64, i64* %55, align 8
  %142 = load i64, i64* %56, align 8
  %143 = sub i64 %142, %141
  %144 = icmp ugt i64 %140, %143
  br i1 %144, label %145, label %147, !prof !2

145:                                              ; preds = %136
  %146 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 %140) #12
  br label %149

147:                                              ; preds = %136
  %148 = add i64 %141, %140
  store i64 %148, i64* %55, align 8
  br label %149

149:                                              ; preds = %147, %145
  %150 = phi i64 [ %146, %145 ], [ %141, %147 ]
  %151 = inttoptr i64 %150 to %"class.v8::internal::CharacterRange"*
  %152 = load i32, i32* %7, align 4
  %153 = icmp sgt i32 %152, 0
  br i1 %153, label %154, label %165

154:                                              ; preds = %149
  %155 = inttoptr i64 %150 to i8*
  %156 = load i8*, i8** %57, align 8
  %157 = sext i32 %152 to i64
  %158 = shl nsw i64 %157, 3
  switch i64 %158, label %164 [
    i64 16, label %163
    i64 8, label %159
  ]

159:                                              ; preds = %154
  %160 = bitcast i8* %156 to i64*
  %161 = inttoptr i64 %150 to i64*
  %162 = load i64, i64* %160, align 1
  store i64 %162, i64* %161, align 1
  br label %165

163:                                              ; preds = %154
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %155, i8* align 1 %156, i64 16, i1 false) #12
  br label %165

164:                                              ; preds = %154
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %155, i8* align 1 %156, i64 %158, i1 false) #12
  br label %165

165:                                              ; preds = %164, %163, %159, %149
  store %"class.v8::internal::CharacterRange"* %151, %"class.v8::internal::CharacterRange"** %58, align 8
  store i32 %138, i32* %54, align 8
  %166 = load i32, i32* %7, align 4
  br label %167

167:                                              ; preds = %165, %134, %124, %93
  %168 = phi i32 [ %166, %165 ], [ %131, %134 ], [ %125, %124 ], [ %90, %93 ]
  %169 = phi %"class.v8::internal::CharacterRange"* [ %151, %165 ], [ %135, %134 ], [ %110, %124 ], [ %94, %93 ]
  %170 = phi i64 [ %130, %165 ], [ %130, %134 ], [ %89, %124 ], [ %89, %93 ]
  %171 = add nsw i32 %168, 1
  store i32 %171, i32* %7, align 4
  %172 = sext i32 %168 to i64
  %173 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %169, i64 %172
  %174 = bitcast %"class.v8::internal::CharacterRange"* %173 to i64*
  store i64 %170, i64* %174, align 4
  %175 = add nuw nsw i32 %82, 1
  %176 = call i32 @_ZNK6icu_6910UnicodeSet13getRangeCountEv(%"class.icu_69::UnicodeSet"* nonnull %5) #12
  %177 = icmp slt i32 %175, %176
  br i1 %177, label %81, label %80
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.553"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp slt i32 %3, 2
  br i1 %4, label %309, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %0, i64 0, i32 0
  %7 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %7, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %3 to i64
  br label %11

11:                                               ; preds = %21, %5
  %12 = phi i64 [ 1, %5 ], [ %24, %21 ]
  %13 = phi i32 [ %9, %5 ], [ %23, %21 ]
  %14 = phi i32 [ 1, %5 ], [ %25, %21 ]
  %15 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %7, i64 %12
  %16 = bitcast %"class.v8::internal::CharacterRange"* %15 to i64*
  %17 = load i64, i64* %16, align 4
  %18 = trunc i64 %17 to i32
  %19 = add i32 %13, 1
  %20 = icmp ult i32 %19, %18
  br i1 %20, label %21, label %27

21:                                               ; preds = %11
  %22 = lshr i64 %17, 32
  %23 = trunc i64 %22 to i32
  %24 = add nuw nsw i64 %12, 1
  %25 = add nuw nsw i32 %14, 1
  %26 = icmp eq i64 %24, %10
  br i1 %26, label %29, label %11

27:                                               ; preds = %11
  %28 = trunc i64 %12 to i32
  br label %29

29:                                               ; preds = %21, %27
  %30 = phi i32 [ %28, %27 ], [ %25, %21 ]
  %31 = icmp eq i32 %30, %3
  br i1 %31, label %309, label %32

32:                                               ; preds = %29
  %33 = zext i32 %30 to i64
  %34 = sext i32 %3 to i64
  br label %35

35:                                               ; preds = %306, %32
  %36 = phi %"class.v8::internal::CharacterRange"* [ %7, %32 ], [ %307, %306 ]
  %37 = phi i64 [ %33, %32 ], [ %304, %306 ]
  %38 = phi i32 [ %30, %32 ], [ %303, %306 ]
  %39 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %36, i64 %37
  %40 = bitcast %"class.v8::internal::CharacterRange"* %39 to i64*
  %41 = load i64, i64* %40, align 4
  %42 = trunc i64 %41 to i32
  %43 = lshr i64 %41, 32
  %44 = trunc i64 %43 to i32
  %45 = icmp sgt i32 %38, 0
  br i1 %45, label %46, label %69

46:                                               ; preds = %35
  %47 = add i32 %44, 1
  %48 = sext i32 %38 to i64
  br label %49

49:                                               ; preds = %66, %46
  %50 = phi i64 [ %48, %46 ], [ %53, %66 ]
  %51 = phi i32 [ %38, %46 ], [ %54, %66 ]
  %52 = phi i32 [ %38, %46 ], [ %67, %66 ]
  %53 = add nsw i64 %50, -1
  %54 = add nsw i32 %51, -1
  %55 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %36, i64 %53
  %56 = bitcast %"class.v8::internal::CharacterRange"* %55 to i64*
  %57 = load i64, i64* %56, align 4
  %58 = trunc i64 %57 to i32
  %59 = icmp ult i32 %47, %58
  %60 = trunc i64 %53 to i32
  br i1 %59, label %66, label %61

61:                                               ; preds = %49
  %62 = lshr i64 %57, 32
  %63 = trunc i64 %62 to i32
  %64 = add i32 %63, 1
  %65 = icmp ult i32 %64, %42
  br i1 %65, label %69, label %66

66:                                               ; preds = %61, %49
  %67 = phi i32 [ %52, %61 ], [ %60, %49 ]
  %68 = icmp sgt i64 %53, 0
  br i1 %68, label %49, label %69

69:                                               ; preds = %66, %61, %35
  %70 = phi i32 [ %38, %35 ], [ %67, %66 ], [ %52, %61 ]
  %71 = phi i32 [ 0, %35 ], [ 0, %66 ], [ %51, %61 ]
  %72 = icmp eq i32 %71, %70
  br i1 %72, label %73, label %102

73:                                               ; preds = %69
  %74 = icmp sgt i32 %38, %70
  br i1 %74, label %75, label %96

75:                                               ; preds = %73
  %76 = sub nsw i32 %38, %70
  %77 = icmp sgt i32 %76, 0
  br i1 %77, label %78, label %96

78:                                               ; preds = %75
  %79 = add nuw nsw i32 %70, 1
  %80 = sext i32 %76 to i64
  %81 = sext i32 %70 to i64
  %82 = sext i32 %79 to i64
  br label %83

83:                                               ; preds = %83, %78
  %84 = phi %"class.v8::internal::CharacterRange"* [ %36, %78 ], [ %95, %83 ]
  %85 = phi i64 [ %80, %78 ], [ %86, %83 ]
  %86 = add nsw i64 %85, -1
  %87 = add nsw i64 %86, %81
  %88 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %84, i64 %87
  %89 = add nsw i64 %86, %82
  %90 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %84, i64 %89
  %91 = bitcast %"class.v8::internal::CharacterRange"* %88 to i64*
  %92 = bitcast %"class.v8::internal::CharacterRange"* %90 to i64*
  %93 = load i64, i64* %91, align 4
  store i64 %93, i64* %92, align 4
  %94 = icmp sgt i64 %86, 0
  %95 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %6, align 8
  br i1 %94, label %83, label %96

96:                                               ; preds = %83, %75, %73
  %97 = phi %"class.v8::internal::CharacterRange"* [ %36, %75 ], [ %36, %73 ], [ %95, %83 ]
  %98 = sext i32 %70 to i64
  %99 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %97, i64 %98
  %100 = bitcast %"class.v8::internal::CharacterRange"* %99 to i64*
  store i64 %41, i64* %100, align 4
  %101 = add nsw i32 %38, 1
  br label %302

102:                                              ; preds = %69
  %103 = add nuw nsw i32 %71, 1
  %104 = icmp eq i32 %103, %70
  %105 = sext i32 %71 to i64
  %106 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %36, i64 %105
  br i1 %104, label %107, label %120

107:                                              ; preds = %102
  %108 = bitcast %"class.v8::internal::CharacterRange"* %106 to i64*
  %109 = load i64, i64* %108, align 4
  %110 = trunc i64 %109 to i32
  %111 = lshr i64 %109, 32
  %112 = trunc i64 %111 to i32
  %113 = icmp ult i32 %42, %110
  %114 = select i1 %113, i64 %41, i64 %109
  %115 = icmp ult i32 %112, %44
  %116 = select i1 %115, i64 %43, i64 %111
  %117 = shl nuw i64 %116, 32
  %118 = and i64 %114, 4294967295
  %119 = or i64 %117, %118
  store i64 %119, i64* %108, align 4
  br label %302

120:                                              ; preds = %102
  %121 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %106, i64 0, i32 0
  %122 = load i32, i32* %121, align 4
  %123 = icmp ugt i32 %122, %42
  %124 = select i1 %123, i32 %42, i32 %122
  %125 = add nsw i32 %70, -1
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %36, i64 %126, i32 1
  %128 = load i32, i32* %127, align 4
  %129 = icmp ult i32 %128, %44
  %130 = select i1 %129, i32 %44, i32 %128
  %131 = icmp sgt i32 %38, %70
  br i1 %131, label %132, label %291

132:                                              ; preds = %120
  %133 = sub nsw i32 %38, %70
  %134 = icmp slt i32 %71, %70
  %135 = icmp sgt i32 %133, 0
  br i1 %134, label %136, label %154

136:                                              ; preds = %132
  br i1 %135, label %137, label %291

137:                                              ; preds = %136
  %138 = sext i32 %103 to i64
  %139 = sext i32 %70 to i64
  %140 = zext i32 %133 to i64
  %141 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %36, i64 %139
  %142 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %36, i64 %138
  %143 = bitcast %"class.v8::internal::CharacterRange"* %141 to i64*
  %144 = bitcast %"class.v8::internal::CharacterRange"* %142 to i64*
  %145 = load i64, i64* %143, align 4
  store i64 %145, i64* %144, align 4
  %146 = icmp eq i32 %133, 1
  br i1 %146, label %291, label %147

147:                                              ; preds = %137
  %148 = add nsw i64 %140, -1
  %149 = add nsw i64 %140, -2
  %150 = and i64 %148, 3
  %151 = icmp ult i64 %149, 3
  br i1 %151, label %274, label %152

152:                                              ; preds = %147
  %153 = sub nsw i64 %148, %150
  br label %233

154:                                              ; preds = %132
  br i1 %135, label %155, label %291

155:                                              ; preds = %154
  %156 = sext i32 %133 to i64
  %157 = sext i32 %70 to i64
  %158 = sext i32 %103 to i64
  %159 = add nsw i64 %156, -1
  %160 = add nsw i64 %159, %157
  %161 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %36, i64 %160
  %162 = add nsw i64 %159, %158
  %163 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %36, i64 %162
  %164 = bitcast %"class.v8::internal::CharacterRange"* %161 to i64*
  %165 = bitcast %"class.v8::internal::CharacterRange"* %163 to i64*
  %166 = load i64, i64* %164, align 4
  store i64 %166, i64* %165, align 4
  %167 = icmp sgt i64 %159, 0
  br i1 %167, label %168, label %291

168:                                              ; preds = %155
  %169 = sext i32 %38 to i64
  %170 = sext i32 %70 to i64
  %171 = xor i64 %170, 3
  %172 = add nsw i64 %171, %169
  %173 = add nsw i64 %169, -2
  %174 = sub nsw i64 %173, %170
  %175 = and i64 %172, 3
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %191, label %177

177:                                              ; preds = %168, %177
  %178 = phi i64 [ %181, %177 ], [ %159, %168 ]
  %179 = phi i64 [ %189, %177 ], [ %175, %168 ]
  %180 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %6, align 8
  %181 = add nsw i64 %178, -1
  %182 = add nsw i64 %181, %157
  %183 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %180, i64 %182
  %184 = add nsw i64 %181, %158
  %185 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %180, i64 %184
  %186 = bitcast %"class.v8::internal::CharacterRange"* %183 to i64*
  %187 = bitcast %"class.v8::internal::CharacterRange"* %185 to i64*
  %188 = load i64, i64* %186, align 4
  store i64 %188, i64* %187, align 4
  %189 = add i64 %179, -1
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %191, label %177, !llvm.loop !7

191:                                              ; preds = %177, %168
  %192 = phi i64 [ %159, %168 ], [ %181, %177 ]
  %193 = icmp ult i64 %174, 3
  br i1 %193, label %291, label %194

194:                                              ; preds = %191, %194
  %195 = phi i64 [ %224, %194 ], [ %192, %191 ]
  %196 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %6, align 8
  %197 = add nsw i64 %195, -1
  %198 = add nsw i64 %197, %157
  %199 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %196, i64 %198
  %200 = add nsw i64 %197, %158
  %201 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %196, i64 %200
  %202 = bitcast %"class.v8::internal::CharacterRange"* %199 to i64*
  %203 = bitcast %"class.v8::internal::CharacterRange"* %201 to i64*
  %204 = load i64, i64* %202, align 4
  store i64 %204, i64* %203, align 4
  %205 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %6, align 8
  %206 = add nsw i64 %195, -2
  %207 = add nsw i64 %206, %157
  %208 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %205, i64 %207
  %209 = add nsw i64 %206, %158
  %210 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %205, i64 %209
  %211 = bitcast %"class.v8::internal::CharacterRange"* %208 to i64*
  %212 = bitcast %"class.v8::internal::CharacterRange"* %210 to i64*
  %213 = load i64, i64* %211, align 4
  store i64 %213, i64* %212, align 4
  %214 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %6, align 8
  %215 = add nsw i64 %195, -3
  %216 = add nsw i64 %215, %157
  %217 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %214, i64 %216
  %218 = add nsw i64 %215, %158
  %219 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %214, i64 %218
  %220 = bitcast %"class.v8::internal::CharacterRange"* %217 to i64*
  %221 = bitcast %"class.v8::internal::CharacterRange"* %219 to i64*
  %222 = load i64, i64* %220, align 4
  store i64 %222, i64* %221, align 4
  %223 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %6, align 8
  %224 = add nsw i64 %195, -4
  %225 = add nsw i64 %224, %157
  %226 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %223, i64 %225
  %227 = add nsw i64 %224, %158
  %228 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %223, i64 %227
  %229 = bitcast %"class.v8::internal::CharacterRange"* %226 to i64*
  %230 = bitcast %"class.v8::internal::CharacterRange"* %228 to i64*
  %231 = load i64, i64* %229, align 4
  store i64 %231, i64* %230, align 4
  %232 = icmp sgt i64 %224, 0
  br i1 %232, label %194, label %291

233:                                              ; preds = %233, %152
  %234 = phi i64 [ 1, %152 ], [ %271, %233 ]
  %235 = phi i64 [ %153, %152 ], [ %272, %233 ]
  %236 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %6, align 8
  %237 = add nsw i64 %234, %139
  %238 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %236, i64 %237
  %239 = add nsw i64 %234, %138
  %240 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %236, i64 %239
  %241 = bitcast %"class.v8::internal::CharacterRange"* %238 to i64*
  %242 = bitcast %"class.v8::internal::CharacterRange"* %240 to i64*
  %243 = load i64, i64* %241, align 4
  store i64 %243, i64* %242, align 4
  %244 = add nuw nsw i64 %234, 1
  %245 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %6, align 8
  %246 = add nsw i64 %244, %139
  %247 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %245, i64 %246
  %248 = add nsw i64 %244, %138
  %249 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %245, i64 %248
  %250 = bitcast %"class.v8::internal::CharacterRange"* %247 to i64*
  %251 = bitcast %"class.v8::internal::CharacterRange"* %249 to i64*
  %252 = load i64, i64* %250, align 4
  store i64 %252, i64* %251, align 4
  %253 = add nuw nsw i64 %234, 2
  %254 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %6, align 8
  %255 = add nsw i64 %253, %139
  %256 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %254, i64 %255
  %257 = add nsw i64 %253, %138
  %258 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %254, i64 %257
  %259 = bitcast %"class.v8::internal::CharacterRange"* %256 to i64*
  %260 = bitcast %"class.v8::internal::CharacterRange"* %258 to i64*
  %261 = load i64, i64* %259, align 4
  store i64 %261, i64* %260, align 4
  %262 = add nuw nsw i64 %234, 3
  %263 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %6, align 8
  %264 = add nsw i64 %262, %139
  %265 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %263, i64 %264
  %266 = add nsw i64 %262, %138
  %267 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %263, i64 %266
  %268 = bitcast %"class.v8::internal::CharacterRange"* %265 to i64*
  %269 = bitcast %"class.v8::internal::CharacterRange"* %267 to i64*
  %270 = load i64, i64* %268, align 4
  store i64 %270, i64* %269, align 4
  %271 = add nuw nsw i64 %234, 4
  %272 = add i64 %235, -4
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %233

274:                                              ; preds = %233, %147
  %275 = phi i64 [ 1, %147 ], [ %271, %233 ]
  %276 = icmp eq i64 %150, 0
  br i1 %276, label %291, label %277

277:                                              ; preds = %274, %277
  %278 = phi i64 [ %288, %277 ], [ %275, %274 ]
  %279 = phi i64 [ %289, %277 ], [ %150, %274 ]
  %280 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %6, align 8
  %281 = add nsw i64 %278, %139
  %282 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %280, i64 %281
  %283 = add nsw i64 %278, %138
  %284 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %280, i64 %283
  %285 = bitcast %"class.v8::internal::CharacterRange"* %282 to i64*
  %286 = bitcast %"class.v8::internal::CharacterRange"* %284 to i64*
  %287 = load i64, i64* %285, align 4
  store i64 %287, i64* %286, align 4
  %288 = add nuw nsw i64 %278, 1
  %289 = add i64 %279, -1
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %291, label %277, !llvm.loop !8

291:                                              ; preds = %191, %194, %274, %277, %155, %137, %154, %136, %120
  %292 = zext i32 %130 to i64
  %293 = shl nuw i64 %292, 32
  %294 = zext i32 %124 to i64
  %295 = or i64 %293, %294
  %296 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %6, align 8
  %297 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %296, i64 %105
  %298 = bitcast %"class.v8::internal::CharacterRange"* %297 to i64*
  store i64 %295, i64* %298, align 4
  %299 = add i32 %38, 1
  %300 = sub i32 %299, %70
  %301 = add i32 %300, %71
  br label %302

302:                                              ; preds = %96, %107, %291
  %303 = phi i32 [ %101, %96 ], [ %38, %107 ], [ %301, %291 ]
  %304 = add nuw nsw i64 %37, 1
  %305 = icmp slt i64 %304, %34
  br i1 %305, label %306, label %308

306:                                              ; preds = %302
  %307 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %6, align 8
  br label %35

308:                                              ; preds = %302
  store i32 %303, i32* %2, align 4
  br label %309

309:                                              ; preds = %308, %29, %1
  ret void
}

declare void @_ZN6icu_6910UnicodeSetC1Ev(%"class.icu_69::UnicodeSet"*) unnamed_addr #2

declare zeroext i1 @_ZN2v88internal30RangeContainsLatin1EquivalentsENS0_14CharacterRangeE(i64) local_unnamed_addr #2

declare dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet3addEii(%"class.icu_69::UnicodeSet"*, i32, i32) unnamed_addr #2

declare void @_ZN6icu_6910UnicodeSetC1ERKS0_(%"class.icu_69::UnicodeSet"*, %"class.icu_69::UnicodeSet"* dereferenceable(200)) unnamed_addr #2

declare dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet9removeAllERKS0_(%"class.icu_69::UnicodeSet"*, %"class.icu_69::UnicodeSet"* dereferenceable(200)) unnamed_addr #2

declare dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN2v88internal17RegExpCaseFolding9IgnoreSetEv() local_unnamed_addr #2

declare dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet9closeOverEi(%"class.icu_69::UnicodeSet"*, i32) local_unnamed_addr #2

declare i32 @_ZNK6icu_6910UnicodeSet13getRangeCountEv(%"class.icu_69::UnicodeSet"*) unnamed_addr #2

declare i32 @_ZNK6icu_6910UnicodeSet13getRangeStartEi(%"class.icu_69::UnicodeSet"*, i32) unnamed_addr #2

declare i32 @_ZNK6icu_6910UnicodeSet11getRangeEndEi(%"class.icu_69::UnicodeSet"*, i32) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6icu_6910UnicodeSetD1Ev(%"class.icu_69::UnicodeSet"*) unnamed_addr #3

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2v88internal14CharacterRange11IsCanonicalEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.553"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp slt i32 %3, 2
  br i1 %4, label %25, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %0, i64 0, i32 0
  %7 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %7, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %3 to i64
  br label %11

11:                                               ; preds = %20, %5
  %12 = phi i64 [ 1, %5 ], [ %23, %20 ]
  %13 = phi i32 [ %9, %5 ], [ %22, %20 ]
  %14 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %7, i64 %12
  %15 = bitcast %"class.v8::internal::CharacterRange"* %14 to i64*
  %16 = load i64, i64* %15, align 4
  %17 = trunc i64 %16 to i32
  %18 = add i32 %13, 1
  %19 = icmp ult i32 %18, %17
  br i1 %19, label %20, label %25

20:                                               ; preds = %11
  %21 = lshr i64 %16, 32
  %22 = trunc i64 %21 to i32
  %23 = add nuw nsw i64 %12, 1
  %24 = icmp eq i64 %23, %10
  br i1 %24, label %25, label %11

25:                                               ; preds = %11, %20, %1
  %26 = phi i1 [ true, %1 ], [ true, %20 ], [ false, %11 ]
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::LoopChoiceNode"* @_ZN2v88internal4Zone3NewINS0_14LoopChoiceNodeEJbbRiRPS1_EEEPT_DpOT0_(%"class.v8::internal::Zone"*, i8* dereferenceable(1), i8* dereferenceable(1), i32* dereferenceable(4), %"class.v8::internal::Zone"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %9, %7
  %11 = icmp ult i64 %10, 96
  br i1 %11, label %12, label %14, !prof !2

12:                                               ; preds = %5
  %13 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 96) #12
  br label %16

14:                                               ; preds = %5
  %15 = add i64 %7, 96
  store i64 %15, i64* %6, align 8
  br label %16

16:                                               ; preds = %12, %14
  %17 = phi i64 [ %13, %12 ], [ %7, %14 ]
  %18 = inttoptr i64 %17 to %"class.v8::internal::LoopChoiceNode"*
  %19 = load i8, i8* %1, align 1, !range !3
  %20 = load i8, i8* %2, align 1, !range !3
  %21 = load i32, i32* %3, align 4
  %22 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %23 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %18, i64 0, i32 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %18, i64 0, i32 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %18, i64 0, i32 0, i32 0, i32 8
  %26 = bitcast %"class.v8::internal::RegExpNode"** %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #12
  store %"class.v8::internal::Zone"* %22, %"class.v8::internal::Zone"** %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %18, i64 0, i32 0, i32 0, i32 7, i64 0
  %28 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 16, i1 false) #12
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2v88internal10ChoiceNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %23, align 8
  %29 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %18, i64 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %22, i64 0, i32 2
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %22, i64 0, i32 3
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %33, %31
  %35 = icmp ult i64 %34, 16
  br i1 %35, label %36, label %38, !prof !2

36:                                               ; preds = %16
  %37 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %22, i64 16) #12
  br label %40

38:                                               ; preds = %16
  %39 = add i64 %31, 16
  store i64 %39, i64* %30, align 8
  br label %40

40:                                               ; preds = %38, %36
  %41 = phi i64 [ %37, %36 ], [ %31, %38 ]
  %42 = inttoptr i64 %41 to %"class.v8::internal::ZoneList.555"*
  %43 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %42, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* null, %"class.v8::internal::GuardedAlternative"** %43, align 8
  %44 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %42, i64 0, i32 1
  store i32 2, i32* %44, align 8
  %45 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %42, i64 0, i32 2
  store i32 0, i32* %45, align 4
  %46 = load i64, i64* %30, align 8
  %47 = load i64, i64* %32, align 8
  %48 = sub i64 %47, %46
  %49 = icmp ult i64 %48, 32
  br i1 %49, label %50, label %52, !prof !2

50:                                               ; preds = %40
  %51 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %22, i64 32) #12
  br label %54

52:                                               ; preds = %40
  %53 = add i64 %46, 32
  store i64 %53, i64* %30, align 8
  br label %54

54:                                               ; preds = %50, %52
  %55 = phi i64 [ %51, %50 ], [ %46, %52 ]
  %56 = inttoptr i64 %55 to %"class.v8::internal::GuardedAlternative"*
  store %"class.v8::internal::GuardedAlternative"* %56, %"class.v8::internal::GuardedAlternative"** %43, align 8
  store %"class.v8::internal::ZoneList.555"* %42, %"class.v8::internal::ZoneList.555"** %29, align 8
  %57 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %18, i64 0, i32 0, i32 2
  store i8 0, i8* %57, align 8
  %58 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %18, i64 0, i32 0, i32 3
  store i8 0, i8* %58, align 1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2v88internal14LoopChoiceNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %23, align 8
  %59 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %18, i64 0, i32 1
  %60 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %18, i64 0, i32 3
  %61 = bitcast %"class.v8::internal::RegExpNode"** %59 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 16, i1 false) #12
  store i8 %19, i8* %60, align 8
  %62 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %18, i64 0, i32 4
  store i8 %20, i8* %62, align 1
  %63 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %18, i64 0, i32 5
  store i8 0, i8* %63, align 2
  %64 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %18, i64 0, i32 6
  store i32 %21, i32* %64, align 4
  ret %"class.v8::internal::LoopChoiceNode"* %18
}

declare %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode17IncrementRegisterEiPNS0_10RegExpNodeE(i32, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2

declare %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode15EmptyMatchCheckEiiiPNS0_10RegExpNodeE(i32, i32, i32, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2

declare %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13ClearCapturesENS0_8IntervalEPNS0_10RegExpNodeE(i64, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2

declare void @_ZN2v88internal18GuardedAlternative8AddGuardEPNS0_5GuardEPNS0_4ZoneE(%"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::Guard"*, %"class.v8::internal::Zone"*) local_unnamed_addr #2

declare void @_ZN2v88internal14LoopChoiceNode18AddLoopAlternativeENS0_18GuardedAlternativeE(%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::RegExpNode"*, %"class.v8::internal::ZoneList.556"*) local_unnamed_addr #2

declare void @_ZN2v88internal14LoopChoiceNode22AddContinueAlternativeENS0_18GuardedAlternativeE(%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::RegExpNode"*, %"class.v8::internal::ZoneList.556"*) local_unnamed_addr #2

declare %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode18SetRegisterForLoopEiiPNS0_10RegExpNodeE(i32, i32, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2

declare dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet16removeAllStringsEv(%"class.icu_69::UnicodeSet"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::ZoneList.553"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %6, %4
  %8 = icmp ult i64 %7, 16
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %2
  %10 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 16) #12
  br label %13

11:                                               ; preds = %2
  %12 = add i64 %4, 16
  store i64 %12, i64* %3, align 8
  br label %13

13:                                               ; preds = %9, %11
  %14 = phi i64 [ %10, %9 ], [ %4, %11 ]
  %15 = inttoptr i64 %14 to %"class.v8::internal::ZoneList.553"*
  %16 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %15, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %16, align 8
  %17 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %15, i64 0, i32 1
  store i32 1, i32* %17, align 8
  %18 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %15, i64 0, i32 2
  store i32 0, i32* %18, align 4
  %19 = load i64, i64* %3, align 8
  %20 = load i64, i64* %5, align 8
  %21 = sub i64 %20, %19
  %22 = icmp ult i64 %21, 8
  br i1 %22, label %23, label %25, !prof !2

23:                                               ; preds = %13
  %24 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 8) #12
  br label %27

25:                                               ; preds = %13
  %26 = add i64 %19, 8
  store i64 %26, i64* %3, align 8
  br label %27

27:                                               ; preds = %23, %25
  %28 = phi i64 [ %24, %23 ], [ %19, %25 ]
  %29 = inttoptr i64 %28 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %29, %"class.v8::internal::CharacterRange"** %16, align 8
  %30 = load i32, i32* %18, align 4
  %31 = load i32, i32* %17, align 8
  %32 = icmp slt i32 %30, %31
  br i1 %32, label %65, label %33

33:                                               ; preds = %27
  %34 = shl nsw i32 %31, 1
  %35 = or i32 %34, 1
  %36 = sext i32 %35 to i64
  %37 = shl nsw i64 %36, 3
  %38 = load i64, i64* %3, align 8
  %39 = load i64, i64* %5, align 8
  %40 = sub i64 %39, %38
  %41 = icmp ugt i64 %37, %40
  br i1 %41, label %42, label %44, !prof !2

42:                                               ; preds = %33
  %43 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 %37) #12
  br label %46

44:                                               ; preds = %33
  %45 = add i64 %38, %37
  store i64 %45, i64* %3, align 8
  br label %46

46:                                               ; preds = %44, %42
  %47 = phi i64 [ %43, %42 ], [ %38, %44 ]
  %48 = inttoptr i64 %47 to %"class.v8::internal::CharacterRange"*
  %49 = load i32, i32* %18, align 4
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %51, label %63

51:                                               ; preds = %46
  %52 = inttoptr i64 %47 to i8*
  %53 = inttoptr i64 %14 to i8**
  %54 = load i8*, i8** %53, align 8
  %55 = sext i32 %49 to i64
  %56 = shl nsw i64 %55, 3
  switch i64 %56, label %62 [
    i64 16, label %61
    i64 8, label %57
  ]

57:                                               ; preds = %51
  %58 = bitcast i8* %54 to i64*
  %59 = inttoptr i64 %47 to i64*
  %60 = load i64, i64* %58, align 1
  store i64 %60, i64* %59, align 1
  br label %63

61:                                               ; preds = %51
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %54, i64 16, i1 false) #12
  br label %63

62:                                               ; preds = %51
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %54, i64 %56, i1 false) #12
  br label %63

63:                                               ; preds = %62, %61, %57, %46
  store %"class.v8::internal::CharacterRange"* %48, %"class.v8::internal::CharacterRange"** %16, align 8
  store i32 %35, i32* %17, align 8
  %64 = load i32, i32* %18, align 4
  br label %65

65:                                               ; preds = %27, %63
  %66 = phi i32 [ %64, %63 ], [ %30, %27 ]
  %67 = phi %"class.v8::internal::CharacterRange"* [ %48, %63 ], [ %29, %27 ]
  %68 = add nsw i32 %66, 1
  store i32 %68, i32* %18, align 4
  %69 = sext i32 %66 to i64
  %70 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %67, i64 %69
  %71 = bitcast %"class.v8::internal::CharacterRange"* %70 to i64*
  store i64 %1, i64* %71, align 4
  ret %"class.v8::internal::ZoneList.553"* %15
}

declare %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode24CreateForCharacterRangesEPNS0_4ZoneEPNS0_8ZoneListINS0_14CharacterRangeEEEbPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"*, %"class.v8::internal::ZoneList.553"*, i1 zeroext, %"class.v8::internal::RegExpNode"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.v8::internal::ZoneList.553"* @_ZN2v88internal12_GLOBAL__N_119ToCanonicalZoneListEPKNS_4base11SmallVectorINS0_14CharacterRangeELm8EEEPNS0_4ZoneE(%"class.v8::base::SmallVector"* nocapture readonly, %"class.v8::internal::Zone"*) unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.v8::base::SmallVector", %"class.v8::base::SmallVector"* %0, i64 0, i32 1
  %4 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::base::SmallVector", %"class.v8::base::SmallVector"* %0, i64 0, i32 0
  %6 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %5, align 8
  %7 = icmp eq %"class.v8::internal::CharacterRange"* %4, %6
  br i1 %7, label %115, label %8

8:                                                ; preds = %2
  %9 = ptrtoint %"class.v8::internal::CharacterRange"* %6 to i64
  %10 = ptrtoint %"class.v8::internal::CharacterRange"* %4 to i64
  %11 = bitcast %"class.v8::internal::CharacterRange"** %3 to i64*
  %12 = bitcast %"class.v8::base::SmallVector"* %0 to i64*
  %13 = sub i64 %10, %9
  %14 = lshr exact i64 %13, 3
  %15 = trunc i64 %14 to i32
  %16 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %17
  %21 = icmp ult i64 %20, 16
  br i1 %21, label %22, label %24, !prof !2

22:                                               ; preds = %8
  %23 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #12
  br label %26

24:                                               ; preds = %8
  %25 = add i64 %17, 16
  store i64 %25, i64* %16, align 8
  br label %26

26:                                               ; preds = %24, %22
  %27 = phi i64 [ %23, %22 ], [ %17, %24 ]
  %28 = inttoptr i64 %27 to %"class.v8::internal::ZoneList.553"*
  %29 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %28, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %29, align 8
  %30 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %28, i64 0, i32 1
  store i32 %15, i32* %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %28, i64 0, i32 2
  store i32 0, i32* %31, align 4
  %32 = icmp sgt i32 %15, 0
  br i1 %32, label %33, label %47

33:                                               ; preds = %26
  %34 = shl i64 %13, 29
  %35 = ashr exact i64 %34, 29
  %36 = load i64, i64* %16, align 8
  %37 = load i64, i64* %18, align 8
  %38 = sub i64 %37, %36
  %39 = icmp ugt i64 %35, %38
  br i1 %39, label %40, label %42, !prof !2

40:                                               ; preds = %33
  %41 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 %35) #12
  br label %44

42:                                               ; preds = %33
  %43 = add i64 %36, %35
  store i64 %43, i64* %16, align 8
  br label %44

44:                                               ; preds = %42, %40
  %45 = phi i64 [ %41, %40 ], [ %36, %42 ]
  %46 = inttoptr i64 %45 to %"class.v8::internal::CharacterRange"*
  br label %47

47:                                               ; preds = %26, %44
  %48 = phi %"class.v8::internal::CharacterRange"* [ %46, %44 ], [ null, %26 ]
  store %"class.v8::internal::CharacterRange"* %48, %"class.v8::internal::CharacterRange"** %29, align 8
  %49 = load i64, i64* %11, align 8
  %50 = load i64, i64* %12, align 8
  %51 = icmp eq i64 %49, %50
  br i1 %51, label %54, label %52

52:                                               ; preds = %47
  %53 = inttoptr i64 %27 to i8**
  br label %55

54:                                               ; preds = %108, %47
  tail call void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.553"* %28)
  br label %115

55:                                               ; preds = %52, %108
  %56 = phi i64 [ %50, %52 ], [ %111, %108 ]
  %57 = phi i64 [ 0, %52 ], [ %109, %108 ]
  %58 = inttoptr i64 %56 to %"class.v8::internal::CharacterRange"*
  %59 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %58, i64 %57
  %60 = load i32, i32* %31, align 4
  %61 = load i32, i32* %30, align 8
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %63, label %71

63:                                               ; preds = %55
  %64 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %29, align 8
  %65 = add nsw i32 %60, 1
  store i32 %65, i32* %31, align 4
  %66 = sext i32 %60 to i64
  %67 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %64, i64 %66
  %68 = bitcast %"class.v8::internal::CharacterRange"* %59 to i64*
  %69 = bitcast %"class.v8::internal::CharacterRange"* %67 to i64*
  %70 = load i64, i64* %68, align 4
  store i64 %70, i64* %69, align 4
  br label %108

71:                                               ; preds = %55
  %72 = shl nsw i32 %61, 1
  %73 = or i32 %72, 1
  %74 = bitcast %"class.v8::internal::CharacterRange"* %59 to i64*
  %75 = load i64, i64* %74, align 4
  %76 = sext i32 %73 to i64
  %77 = shl nsw i64 %76, 3
  %78 = load i64, i64* %16, align 8
  %79 = load i64, i64* %18, align 8
  %80 = sub i64 %79, %78
  %81 = icmp ugt i64 %77, %80
  br i1 %81, label %82, label %84, !prof !2

82:                                               ; preds = %71
  %83 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 %77) #12
  br label %86

84:                                               ; preds = %71
  %85 = add i64 %78, %77
  store i64 %85, i64* %16, align 8
  br label %86

86:                                               ; preds = %84, %82
  %87 = phi i64 [ %83, %82 ], [ %78, %84 ]
  %88 = inttoptr i64 %87 to %"class.v8::internal::CharacterRange"*
  %89 = load i32, i32* %31, align 4
  %90 = icmp sgt i32 %89, 0
  br i1 %90, label %91, label %102

91:                                               ; preds = %86
  %92 = inttoptr i64 %87 to i8*
  %93 = load i8*, i8** %53, align 8
  %94 = sext i32 %89 to i64
  %95 = shl nsw i64 %94, 3
  switch i64 %95, label %101 [
    i64 16, label %100
    i64 8, label %96
  ]

96:                                               ; preds = %91
  %97 = bitcast i8* %93 to i64*
  %98 = inttoptr i64 %87 to i64*
  %99 = load i64, i64* %97, align 1
  store i64 %99, i64* %98, align 1
  br label %102

100:                                              ; preds = %91
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %92, i8* align 1 %93, i64 16, i1 false) #12
  br label %102

101:                                              ; preds = %91
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %92, i8* align 1 %93, i64 %95, i1 false) #12
  br label %102

102:                                              ; preds = %101, %100, %96, %86
  store %"class.v8::internal::CharacterRange"* %88, %"class.v8::internal::CharacterRange"** %29, align 8
  store i32 %73, i32* %30, align 8
  %103 = load i32, i32* %31, align 4
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %31, align 4
  %105 = sext i32 %103 to i64
  %106 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %88, i64 %105
  %107 = bitcast %"class.v8::internal::CharacterRange"* %106 to i64*
  store i64 %75, i64* %107, align 4
  br label %108

108:                                              ; preds = %63, %102
  %109 = add nuw i64 %57, 1
  %110 = load i64, i64* %11, align 8
  %111 = load i64, i64* %12, align 8
  %112 = sub i64 %110, %111
  %113 = ashr exact i64 %112, 3
  %114 = icmp ult i64 %109, %113
  br i1 %114, label %55, label %54

115:                                              ; preds = %2, %54
  %116 = phi %"class.v8::internal::ZoneList.553"* [ %28, %54 ], [ null, %2 ]
  ret %"class.v8::internal::ZoneList.553"* %116
}

declare %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode22CreateForSurrogatePairEPNS0_4ZoneENS0_14CharacterRangeES4_bPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"*, i64, i64, i1 zeroext, %"class.v8::internal::RegExpNode"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.v8::internal::RegExpNode"* @_ZN2v88internal12_GLOBAL__N_146NegativeLookaroundAgainstReadDirectionAndMatchEPNS0_14RegExpCompilerEPNS0_8ZoneListINS0_14CharacterRangeEEES7_PNS0_10RegExpNodeEbNS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::RegExpCompiler"* nocapture, %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::RegExpNode"*, i1 zeroext, i32) unnamed_addr #0 {
  %7 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 15
  %8 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7, align 8
  %9 = tail call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode24CreateForCharacterRangesEPNS0_4ZoneEPNS0_8ZoneListINS0_14CharacterRangeEEEbPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %8, %"class.v8::internal::ZoneList.553"* %2, i1 zeroext %4, %"class.v8::internal::RegExpNode"* %3, i32 %5) #12
  %10 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %9, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, -1
  br i1 %13, label %14, label %23

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = icmp sgt i32 %16, 65534
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 8
  store i8 1, i8* %19, align 1
  br label %22

20:                                               ; preds = %14
  %21 = add nsw i32 %16, 1
  store i32 %21, i32* %15, align 8
  br label %22

22:                                               ; preds = %20, %18
  store i32 %16, i32* %11, align 4
  br label %23

23:                                               ; preds = %6, %22
  %24 = phi i32 [ %16, %22 ], [ %12, %6 ]
  %25 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 3
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %28, label %37

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = icmp sgt i32 %30, 65534
  br i1 %31, label %32, label %34

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 8
  store i8 1, i8* %33, align 1
  br label %36

34:                                               ; preds = %28
  %35 = add nsw i32 %30, 1
  store i32 %35, i32* %29, align 8
  br label %36

36:                                               ; preds = %34, %32
  store i32 %30, i32* %25, align 8
  br label %37

37:                                               ; preds = %23, %36
  %38 = phi i32 [ %30, %36 ], [ %26, %23 ]
  %39 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %9, i64 0, i32 0, i32 0, i32 8
  %40 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %39, align 8
  %41 = ptrtoint %"class.v8::internal::Zone"* %40 to i64
  %42 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %40, i64 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %40, i64 0, i32 3
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %45, %43
  %47 = icmp ult i64 %46, 80
  br i1 %47, label %48, label %50, !prof !2

48:                                               ; preds = %37
  %49 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %40, i64 80) #12
  br label %52

50:                                               ; preds = %37
  %51 = add i64 %43, 80
  store i64 %51, i64* %42, align 8
  br label %52

52:                                               ; preds = %50, %48
  %53 = phi i64 [ %49, %48 ], [ %43, %50 ]
  %54 = inttoptr i64 %53 to %"class.v8::internal::NegativeSubmatchSuccess"*
  %55 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 0, i32 0, i32 0
  %56 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 0, i32 0, i32 1
  %57 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 0, i32 0, i32 8
  %58 = bitcast %"class.v8::internal::RegExpNode"** %56 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 24, i1 false) #12
  %59 = bitcast %"class.v8::internal::Zone"** %57 to i64*
  store i64 %41, i64* %59, align 8
  %60 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 0, i32 0, i32 7, i64 0
  %61 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %60 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 16, i1 false) #12
  %62 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 0, i32 1
  store i32 2, i32* %62, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal23NegativeSubmatchSuccessE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %55, align 8
  %63 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 1
  store i32 %24, i32* %63, align 4
  %64 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 2
  store i32 %38, i32* %64, align 8
  %65 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 3
  store i32 0, i32* %65, align 4
  %66 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 4
  store i32 0, i32* %66, align 8
  %67 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %54, i64 0, i32 0, i32 0
  %68 = xor i1 %4, true
  %69 = tail call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode24CreateForCharacterRangesEPNS0_4ZoneEPNS0_8ZoneListINS0_14CharacterRangeEEEbPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %8, %"class.v8::internal::ZoneList.553"* %1, i1 zeroext %68, %"class.v8::internal::RegExpNode"* %67, i32 %5) #12
  %70 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %69, i64 0, i32 0, i32 0
  %71 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %39, align 8
  %72 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %71, i64 0, i32 2
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %71, i64 0, i32 3
  %75 = load i64, i64* %74, align 8
  %76 = sub i64 %75, %73
  %77 = icmp ult i64 %76, 72
  br i1 %77, label %78, label %80, !prof !2

78:                                               ; preds = %52
  %79 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %71, i64 72) #12
  br label %82

80:                                               ; preds = %52
  %81 = add i64 %73, 72
  store i64 %81, i64* %72, align 8
  br label %82

82:                                               ; preds = %78, %80
  %83 = phi i64 [ %79, %78 ], [ %73, %80 ]
  %84 = inttoptr i64 %83 to %"class.v8::internal::NegativeLookaroundChoiceNode"*
  tail call void @_ZN2v88internal28NegativeLookaroundChoiceNodeC2ENS0_18GuardedAlternativeES2_PNS0_4ZoneE(%"class.v8::internal::NegativeLookaroundChoiceNode"* %84, %"class.v8::internal::RegExpNode"* %70, %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::RegExpNode"* %10, %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::Zone"* %71) #12
  %85 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %84, i64 0, i32 0, i32 0
  %86 = tail call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13BeginSubmatchEiiPNS0_10RegExpNodeE(i32 %24, i32 %38, %"class.v8::internal::RegExpNode"* %85) #12
  %87 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %86, i64 0, i32 0, i32 0
  ret %"class.v8::internal::RegExpNode"* %87
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.v8::internal::RegExpNode"* @_ZN2v88internal12_GLOBAL__N_141MatchAndNegativeLookaroundInReadDirectionEPNS0_14RegExpCompilerEPNS0_8ZoneListINS0_14CharacterRangeEEES7_PNS0_10RegExpNodeEbNS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::RegExpCompiler"* nocapture, %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::RegExpNode"*, i1 zeroext, i32) unnamed_addr #0 {
  %7 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 15
  %8 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %12, label %21

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp sgt i32 %14, 65534
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 8
  store i8 1, i8* %17, align 1
  br label %20

18:                                               ; preds = %12
  %19 = add nsw i32 %14, 1
  store i32 %19, i32* %13, align 8
  br label %20

20:                                               ; preds = %18, %16
  store i32 %14, i32* %9, align 4
  br label %21

21:                                               ; preds = %6, %20
  %22 = phi i32 [ %14, %20 ], [ %10, %6 ]
  %23 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 3
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, -1
  br i1 %25, label %26, label %35

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = icmp sgt i32 %28, 65534
  br i1 %29, label %30, label %32

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 8
  store i8 1, i8* %31, align 1
  br label %34

32:                                               ; preds = %26
  %33 = add nsw i32 %28, 1
  store i32 %33, i32* %27, align 8
  br label %34

34:                                               ; preds = %32, %30
  store i32 %28, i32* %23, align 8
  br label %35

35:                                               ; preds = %21, %34
  %36 = phi i32 [ %28, %34 ], [ %24, %21 ]
  %37 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %3, i64 0, i32 8
  %38 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %37, align 8
  %39 = ptrtoint %"class.v8::internal::Zone"* %38 to i64
  %40 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %38, i64 0, i32 2
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %38, i64 0, i32 3
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %43, %41
  %45 = icmp ult i64 %44, 80
  br i1 %45, label %46, label %48, !prof !2

46:                                               ; preds = %35
  %47 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %38, i64 80) #12
  br label %50

48:                                               ; preds = %35
  %49 = add i64 %41, 80
  store i64 %49, i64* %40, align 8
  br label %50

50:                                               ; preds = %48, %46
  %51 = phi i64 [ %47, %46 ], [ %41, %48 ]
  %52 = inttoptr i64 %51 to %"class.v8::internal::NegativeSubmatchSuccess"*
  %53 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %52, i64 0, i32 0, i32 0, i32 0
  %54 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %52, i64 0, i32 0, i32 0, i32 1
  %55 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %52, i64 0, i32 0, i32 0, i32 8
  %56 = bitcast %"class.v8::internal::RegExpNode"** %54 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 24, i1 false) #12
  %57 = bitcast %"class.v8::internal::Zone"** %55 to i64*
  store i64 %39, i64* %57, align 8
  %58 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %52, i64 0, i32 0, i32 0, i32 7, i64 0
  %59 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %58 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 16, i1 false) #12
  %60 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %52, i64 0, i32 0, i32 1
  store i32 2, i32* %60, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal23NegativeSubmatchSuccessE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %53, align 8
  %61 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %52, i64 0, i32 1
  store i32 %22, i32* %61, align 4
  %62 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %52, i64 0, i32 2
  store i32 %36, i32* %62, align 8
  %63 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %52, i64 0, i32 3
  store i32 0, i32* %63, align 4
  %64 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %52, i64 0, i32 4
  store i32 0, i32* %64, align 8
  %65 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %52, i64 0, i32 0, i32 0
  %66 = tail call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode24CreateForCharacterRangesEPNS0_4ZoneEPNS0_8ZoneListINS0_14CharacterRangeEEEbPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %8, %"class.v8::internal::ZoneList.553"* %2, i1 zeroext %4, %"class.v8::internal::RegExpNode"* %65, i32 %5) #12
  %67 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %66, i64 0, i32 0, i32 0
  %68 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %37, align 8
  %69 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %68, i64 0, i32 2
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %68, i64 0, i32 3
  %72 = load i64, i64* %71, align 8
  %73 = sub i64 %72, %70
  %74 = icmp ult i64 %73, 72
  br i1 %74, label %75, label %77, !prof !2

75:                                               ; preds = %50
  %76 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %68, i64 72) #12
  br label %79

77:                                               ; preds = %50
  %78 = add i64 %70, 72
  store i64 %78, i64* %69, align 8
  br label %79

79:                                               ; preds = %75, %77
  %80 = phi i64 [ %76, %75 ], [ %70, %77 ]
  %81 = inttoptr i64 %80 to %"class.v8::internal::NegativeLookaroundChoiceNode"*
  tail call void @_ZN2v88internal28NegativeLookaroundChoiceNodeC2ENS0_18GuardedAlternativeES2_PNS0_4ZoneE(%"class.v8::internal::NegativeLookaroundChoiceNode"* %81, %"class.v8::internal::RegExpNode"* %67, %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::RegExpNode"* %3, %"class.v8::internal::ZoneList.556"* null, %"class.v8::internal::Zone"* %68) #12
  %82 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %81, i64 0, i32 0, i32 0
  %83 = tail call %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13BeginSubmatchEiiPNS0_10RegExpNodeE(i32 %22, i32 %36, %"class.v8::internal::RegExpNode"* %82) #12
  %84 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %83, i64 0, i32 0, i32 0
  %85 = tail call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode24CreateForCharacterRangesEPNS0_4ZoneEPNS0_8ZoneListINS0_14CharacterRangeEEEbPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %8, %"class.v8::internal::ZoneList.553"* %1, i1 zeroext %4, %"class.v8::internal::RegExpNode"* %84, i32 %5) #12
  %86 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %85, i64 0, i32 0, i32 0
  ret %"class.v8::internal::RegExpNode"* %86
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

declare signext i8 @_ZNK6icu_6913UnicodeString13doCaseCompareEiiPKDsiij(%"class.icu_69::UnicodeString"*, i32, i32, i16*, i32, i32, i32) local_unnamed_addr #2

declare signext i8 @_ZNK6icu_6913UnicodeString8doEqualsERKS0_i(%"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"* dereferenceable(64), i32) local_unnamed_addr #2

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2v88internal12_GLOBAL__N_125AssertionSequenceRewriter7RewriteEii(%"class.v8::internal::(anonymous namespace)::AssertionSequenceRewriter"*, i32, i32) unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::ZoneList.553"*, align 8
  %5 = alloca %"class.v8::base::Flags", align 4
  %6 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::AssertionSequenceRewriter", %"class.v8::internal::(anonymous namespace)::AssertionSequenceRewriter"* %0, i64 0, i32 1
  %7 = load %"class.v8::internal::ZoneList.559"*, %"class.v8::internal::ZoneList.559"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %7, i64 0, i32 0
  %9 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %8, align 8
  %10 = sext i32 %1 to i64
  %11 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %9, i64 %10
  %12 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %11, align 8
  %13 = bitcast %"class.v8::internal::RegExpTree"* %12 to %"class.v8::internal::RegExpAssertion"* (%"class.v8::internal::RegExpTree"*)***
  %14 = load %"class.v8::internal::RegExpAssertion"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAssertion"* (%"class.v8::internal::RegExpTree"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::RegExpAssertion"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAssertion"* (%"class.v8::internal::RegExpTree"*)** %14, i64 15
  %16 = load %"class.v8::internal::RegExpAssertion"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAssertion"* (%"class.v8::internal::RegExpTree"*)** %15, align 8
  %17 = tail call %"class.v8::internal::RegExpAssertion"* %16(%"class.v8::internal::RegExpTree"* %12) #12
  %18 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %17, i64 0, i32 2, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp slt i32 %1, %2
  br i1 %20, label %21, label %176

21:                                               ; preds = %3
  %22 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::AssertionSequenceRewriter", %"class.v8::internal::(anonymous namespace)::AssertionSequenceRewriter"* %0, i64 0, i32 0
  br label %26

23:                                               ; preds = %74
  %24 = and i32 %75, 48
  %25 = icmp eq i32 %24, 48
  br i1 %25, label %79, label %176

26:                                               ; preds = %74, %21
  %27 = phi i64 [ %10, %21 ], [ %76, %74 ]
  %28 = phi i32 [ 0, %21 ], [ %75, %74 ]
  %29 = phi i8 [ 0, %21 ], [ %43, %74 ]
  %30 = load %"class.v8::internal::ZoneList.559"*, %"class.v8::internal::ZoneList.559"** %6, align 8
  %31 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %30, i64 0, i32 0
  %32 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %32, i64 %27
  %34 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %33, align 8
  %35 = bitcast %"class.v8::internal::RegExpTree"* %34 to %"class.v8::internal::RegExpAssertion"* (%"class.v8::internal::RegExpTree"*)***
  %36 = load %"class.v8::internal::RegExpAssertion"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAssertion"* (%"class.v8::internal::RegExpTree"*)*** %35, align 8
  %37 = getelementptr inbounds %"class.v8::internal::RegExpAssertion"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAssertion"* (%"class.v8::internal::RegExpTree"*)** %36, i64 15
  %38 = load %"class.v8::internal::RegExpAssertion"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAssertion"* (%"class.v8::internal::RegExpTree"*)** %37, align 8
  %39 = tail call %"class.v8::internal::RegExpAssertion"* %38(%"class.v8::internal::RegExpTree"* %34) #12
  %40 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %39, i64 0, i32 2, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, %19
  %43 = select i1 %42, i8 %29, i8 1
  %44 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %39, i64 0, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = shl i32 1, %45
  %47 = and i32 %46, %28
  %48 = icmp ne i32 %47, 0
  %49 = and i8 %43, 1
  %50 = icmp eq i8 %49, 0
  %51 = and i1 %48, %50
  br i1 %51, label %52, label %74

52:                                               ; preds = %26
  %53 = load %"class.v8::internal::ZoneList.559"*, %"class.v8::internal::ZoneList.559"** %6, align 8
  %54 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %55 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %54, i64 0, i32 2
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %54, i64 0, i32 3
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %58, %56
  %60 = icmp ult i64 %59, 8
  br i1 %60, label %61, label %63, !prof !2

61:                                               ; preds = %52
  %62 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %54, i64 8) #12
  br label %65

63:                                               ; preds = %52
  %64 = add i64 %56, 8
  store i64 %64, i64* %55, align 8
  br label %65

65:                                               ; preds = %61, %63
  %66 = phi i64 [ %62, %61 ], [ %56, %63 ]
  %67 = inttoptr i64 %66 to %"class.v8::internal::RegExpEmpty"*
  %68 = inttoptr i64 %66 to i64*
  store i64 0, i64* %68, align 8
  %69 = getelementptr inbounds %"class.v8::internal::RegExpEmpty", %"class.v8::internal::RegExpEmpty"* %67, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal11RegExpEmptyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %69, align 8
  %70 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %53, i64 0, i32 0
  %71 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %70, align 8
  %72 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %71, i64 %27
  %73 = bitcast %"class.v8::internal::RegExpTree"** %72 to i64*
  store i64 %66, i64* %73, align 8
  br label %74

74:                                               ; preds = %26, %65
  %75 = or i32 %46, %28
  %76 = add nsw i64 %27, 1
  %77 = trunc i64 %76 to i32
  %78 = icmp eq i32 %77, %2
  br i1 %78, label %23, label %26

79:                                               ; preds = %23
  %80 = bitcast %"class.v8::internal::ZoneList.553"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %80) #12
  %81 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::AssertionSequenceRewriter", %"class.v8::internal::(anonymous namespace)::AssertionSequenceRewriter"* %0, i64 0, i32 0
  %82 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %81, align 8
  %83 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %82, i64 0, i32 2
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %82, i64 0, i32 3
  %86 = load i64, i64* %85, align 8
  %87 = sub i64 %86, %84
  %88 = icmp ult i64 %87, 16
  br i1 %88, label %89, label %91, !prof !2

89:                                               ; preds = %79
  %90 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %82, i64 16) #12
  br label %93

91:                                               ; preds = %79
  %92 = add i64 %84, 16
  store i64 %92, i64* %83, align 8
  br label %93

93:                                               ; preds = %91, %89
  %94 = phi i64 [ %90, %89 ], [ %84, %91 ]
  %95 = inttoptr i64 %94 to %"class.v8::internal::ZoneList.553"*
  %96 = inttoptr i64 %94 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 16, i1 false) #12
  store %"class.v8::internal::ZoneList.553"* %95, %"class.v8::internal::ZoneList.553"** %4, align 8
  %97 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %81, align 8
  %98 = bitcast %"class.v8::base::Flags"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %98) #12
  %99 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %5, i64 0, i32 0
  store i32 0, i32* %99, align 4
  %100 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJRPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEENS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %97, %"class.v8::internal::Zone"** dereferenceable(8) %81, %"class.v8::internal::ZoneList.553"** nonnull dereferenceable(8) %4, %"class.v8::base::Flags"* nonnull dereferenceable(4) %5) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %98) #12
  %101 = load %"class.v8::internal::ZoneList.559"*, %"class.v8::internal::ZoneList.559"** %6, align 8
  %102 = ptrtoint %"class.v8::internal::RegExpCharacterClass"* %100 to i64
  %103 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %101, i64 0, i32 0
  %104 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %103, align 8
  %105 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %104, i64 %10
  %106 = bitcast %"class.v8::internal::RegExpTree"** %105 to i64*
  store i64 %102, i64* %106, align 8
  %107 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %81, align 8
  %108 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %107, i64 0, i32 2
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %107, i64 0, i32 3
  %111 = load i64, i64* %110, align 8
  %112 = sub i64 %111, %109
  %113 = icmp ult i64 %112, 8
  br i1 %113, label %114, label %116, !prof !2

114:                                              ; preds = %93
  %115 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %107, i64 8) #12
  br label %118

116:                                              ; preds = %93
  %117 = add i64 %109, 8
  store i64 %117, i64* %108, align 8
  br label %118

118:                                              ; preds = %116, %114
  %119 = phi i64 [ %115, %114 ], [ %109, %116 ]
  %120 = inttoptr i64 %119 to %"class.v8::internal::RegExpEmpty"*
  %121 = inttoptr i64 %119 to i64*
  store i64 0, i64* %121, align 8
  %122 = getelementptr inbounds %"class.v8::internal::RegExpEmpty", %"class.v8::internal::RegExpEmpty"* %120, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal11RegExpEmptyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %122, align 8
  %123 = add i32 %1, 1
  %124 = icmp slt i32 %123, %2
  br i1 %124, label %125, label %175

125:                                              ; preds = %118
  %126 = sext i32 %123 to i64
  %127 = xor i32 %1, 3
  %128 = add i32 %127, %2
  %129 = add i32 %2, -2
  %130 = sub i32 %129, %1
  %131 = and i32 %128, 3
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %144, label %133

133:                                              ; preds = %125, %133
  %134 = phi i64 [ %141, %133 ], [ %126, %125 ]
  %135 = phi i32 [ %142, %133 ], [ %131, %125 ]
  %136 = load %"class.v8::internal::ZoneList.559"*, %"class.v8::internal::ZoneList.559"** %6, align 8
  %137 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %136, i64 0, i32 0
  %138 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %137, align 8
  %139 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %138, i64 %134
  %140 = bitcast %"class.v8::internal::RegExpTree"** %139 to i64*
  store i64 %119, i64* %140, align 8
  %141 = add nsw i64 %134, 1
  %142 = add i32 %135, -1
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %133, !llvm.loop !9

144:                                              ; preds = %133, %125
  %145 = phi i64 [ %126, %125 ], [ %141, %133 ]
  %146 = icmp ult i32 %130, 3
  br i1 %146, label %175, label %147

147:                                              ; preds = %144, %147
  %148 = phi i64 [ %172, %147 ], [ %145, %144 ]
  %149 = load %"class.v8::internal::ZoneList.559"*, %"class.v8::internal::ZoneList.559"** %6, align 8
  %150 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %149, i64 0, i32 0
  %151 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %150, align 8
  %152 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %151, i64 %148
  %153 = bitcast %"class.v8::internal::RegExpTree"** %152 to i64*
  store i64 %119, i64* %153, align 8
  %154 = add nsw i64 %148, 1
  %155 = load %"class.v8::internal::ZoneList.559"*, %"class.v8::internal::ZoneList.559"** %6, align 8
  %156 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %155, i64 0, i32 0
  %157 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %156, align 8
  %158 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %157, i64 %154
  %159 = bitcast %"class.v8::internal::RegExpTree"** %158 to i64*
  store i64 %119, i64* %159, align 8
  %160 = add nsw i64 %148, 2
  %161 = load %"class.v8::internal::ZoneList.559"*, %"class.v8::internal::ZoneList.559"** %6, align 8
  %162 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %161, i64 0, i32 0
  %163 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %162, align 8
  %164 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %163, i64 %160
  %165 = bitcast %"class.v8::internal::RegExpTree"** %164 to i64*
  store i64 %119, i64* %165, align 8
  %166 = add nsw i64 %148, 3
  %167 = load %"class.v8::internal::ZoneList.559"*, %"class.v8::internal::ZoneList.559"** %6, align 8
  %168 = getelementptr inbounds %"class.v8::internal::ZoneList.559", %"class.v8::internal::ZoneList.559"* %167, i64 0, i32 0
  %169 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %168, align 8
  %170 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %169, i64 %166
  %171 = bitcast %"class.v8::internal::RegExpTree"** %170 to i64*
  store i64 %119, i64* %171, align 8
  %172 = add nsw i64 %148, 4
  %173 = trunc i64 %172 to i32
  %174 = icmp eq i32 %173, %2
  br i1 %174, label %175, label %147

175:                                              ; preds = %144, %147, %118
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %80) #12
  br label %176

176:                                              ; preds = %3, %175, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJRPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEENS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** dereferenceable(8), %"class.v8::internal::ZoneList.553"** dereferenceable(8), %"class.v8::base::Flags"* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %8, %6
  %10 = icmp ult i64 %9, 32
  br i1 %10, label %11, label %13, !prof !2

11:                                               ; preds = %4
  %12 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 32) #12
  br label %15

13:                                               ; preds = %4
  %14 = add i64 %6, 32
  store i64 %14, i64* %5, align 8
  br label %15

15:                                               ; preds = %11, %13
  %16 = phi i64 [ %12, %11 ], [ %6, %13 ]
  %17 = inttoptr i64 %16 to %"class.v8::internal::RegExpCharacterClass"*
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1, align 8
  %19 = load %"class.v8::internal::ZoneList.553"*, %"class.v8::internal::ZoneList.553"** %2, align 8
  %20 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %3, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal20RegExpCharacterClassE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %23 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 1, i32 0
  store %"class.v8::internal::ZoneList.553"* %19, %"class.v8::internal::ZoneList.553"** %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 1, i32 1
  store i16 0, i16* %24, align 8
  %25 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 2, i32 0
  store i32 %21, i32* %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 3, i32 0
  store i32 0, i32* %26, align 4
  %27 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %19, i64 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %80

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %19, i64 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %30
  %35 = bitcast %"class.v8::internal::ZoneList.553"* %19 to i64**
  %36 = load i64*, i64** %35, align 8
  store i32 1, i32* %27, align 4
  br label %76

37:                                               ; preds = %30
  %38 = shl nsw i32 %32, 1
  %39 = or i32 %38, 1
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 3
  %42 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %45, %43
  %47 = icmp ugt i64 %41, %46
  br i1 %47, label %48, label %50, !prof !2

48:                                               ; preds = %37
  %49 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 %41) #12
  br label %52

50:                                               ; preds = %37
  %51 = add i64 %43, %41
  store i64 %51, i64* %42, align 8
  br label %52

52:                                               ; preds = %50, %48
  %53 = phi i64 [ %49, %48 ], [ %43, %50 ]
  %54 = inttoptr i64 %53 to %"class.v8::internal::CharacterRange"*
  %55 = load i32, i32* %27, align 4
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %69

57:                                               ; preds = %52
  %58 = inttoptr i64 %53 to i8*
  %59 = bitcast %"class.v8::internal::ZoneList.553"* %19 to i8**
  %60 = load i8*, i8** %59, align 8
  %61 = sext i32 %55 to i64
  %62 = shl nsw i64 %61, 3
  switch i64 %62, label %68 [
    i64 16, label %67
    i64 8, label %63
  ]

63:                                               ; preds = %57
  %64 = bitcast i8* %60 to i64*
  %65 = inttoptr i64 %53 to i64*
  %66 = load i64, i64* %64, align 1
  store i64 %66, i64* %65, align 1
  br label %69

67:                                               ; preds = %57
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %60, i64 16, i1 false) #12
  br label %69

68:                                               ; preds = %57
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %60, i64 %62, i1 false) #12
  br label %69

69:                                               ; preds = %68, %67, %63, %52
  %70 = getelementptr inbounds %"class.v8::internal::ZoneList.553", %"class.v8::internal::ZoneList.553"* %19, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %54, %"class.v8::internal::CharacterRange"** %70, align 8
  store i32 %39, i32* %31, align 8
  %71 = load i32, i32* %27, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %27, align 4
  %73 = sext i32 %71 to i64
  %74 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %54, i64 %73
  %75 = bitcast %"class.v8::internal::CharacterRange"* %74 to i64*
  br label %76

76:                                               ; preds = %69, %34
  %77 = phi i64* [ %75, %69 ], [ %36, %34 ]
  store i64 4785070309113856, i64* %77, align 4
  %78 = load i32, i32* %26, align 4
  %79 = xor i32 %78, 1
  store i32 %79, i32* %26, align 4
  br label %80

80:                                               ; preds = %15, %76
  ret %"class.v8::internal::RegExpCharacterClass"* %17
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::CharacterRange"* @_ZN2v84base11SmallVectorINS_8internal14CharacterRangeELm8EE4GrowEv(%"class.v8::base::SmallVector"*) local_unnamed_addr #8 comdat align 2 {
  %2 = tail call %"class.v8::internal::CharacterRange"* @_ZN2v84base11SmallVectorINS_8internal14CharacterRangeELm8EE4GrowEm(%"class.v8::base::SmallVector"* %0, i64 0)
  ret %"class.v8::internal::CharacterRange"* %2
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::CharacterRange"* @_ZN2v84base11SmallVectorINS_8internal14CharacterRangeELm8EE4GrowEm(%"class.v8::base::SmallVector"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::base::SmallVector", %"class.v8::base::SmallVector"* %0, i64 0, i32 1
  %4 = bitcast %"class.v8::internal::CharacterRange"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.v8::base::SmallVector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = getelementptr inbounds %"class.v8::base::SmallVector", %"class.v8::base::SmallVector"* %0, i64 0, i32 2
  %11 = bitcast %"class.v8::internal::CharacterRange"** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %12, %7
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %14, %1
  %16 = select i1 %15, i64 %14, i64 %1
  %17 = tail call i64 @_ZN2v84base4bits21RoundUpToPowerOfTwo64Em(i64 %16) #12
  %18 = shl i64 %17, 3
  %19 = tail call noalias i8* @malloc(i64 %18) #12
  %20 = bitcast i8* %19 to %"class.v8::internal::CharacterRange"*
  %21 = icmp eq i8* %19, null
  br i1 %21, label %22, label %23

22:                                               ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0)) #14
  unreachable

23:                                               ; preds = %2
  %24 = bitcast %"class.v8::base::SmallVector"* %0 to i8**
  %25 = load i8*, i8** %24, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %19, i8* align 1 %25, i64 %8, i1 false) #12
  %26 = getelementptr inbounds %"class.v8::base::SmallVector", %"class.v8::base::SmallVector"* %0, i64 0, i32 3, i32 0, i64 0
  %27 = icmp eq i8* %25, %26
  br i1 %27, label %29, label %28

28:                                               ; preds = %23
  tail call void @free(i8* %25) #12
  br label %29

29:                                               ; preds = %23, %28
  store i8* %19, i8** %24, align 8
  %30 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %20, i64 %9
  store %"class.v8::internal::CharacterRange"* %30, %"class.v8::internal::CharacterRange"** %3, align 8
  %31 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %20, i64 %17
  store %"class.v8::internal::CharacterRange"* %31, %"class.v8::internal::CharacterRange"** %10, align 8
  ret %"class.v8::internal::CharacterRange"* %30
}

declare i64 @_ZN2v84base4bits21RoundUpToPowerOfTwo64Em(i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal8TextNodeC2EPNS0_20RegExpCharacterClassEbPNS0_10RegExpNodeE(%"class.v8::internal::TextNode"*, %"class.v8::internal::RegExpCharacterClass"*, i1 zeroext, %"class.v8::internal::RegExpNode"*) unnamed_addr #0 comdat align 2 {
  %5 = zext i1 %2 to i8
  %6 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %3, i64 0, i32 8
  %7 = bitcast %"class.v8::internal::Zone"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 8
  %12 = bitcast %"class.v8::internal::RegExpNode"** %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #12
  %13 = bitcast %"class.v8::internal::Zone"** %11 to i64*
  store i64 %8, i64* %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 7, i64 0
  %15 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false) #12
  %16 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %3, %"class.v8::internal::RegExpNode"** %16, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal8TextNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %17 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 1
  %18 = inttoptr i64 %8 to %"class.v8::internal::Zone"*
  %19 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %22, %20
  %24 = icmp ult i64 %23, 16
  br i1 %24, label %25, label %27, !prof !2

25:                                               ; preds = %4
  %26 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 16) #12
  br label %29

27:                                               ; preds = %4
  %28 = add i64 %20, 16
  store i64 %28, i64* %19, align 8
  br label %29

29:                                               ; preds = %25, %27
  %30 = phi i64 [ %26, %25 ], [ %20, %27 ]
  %31 = inttoptr i64 %30 to %"class.v8::internal::ZoneList.552"*
  %32 = getelementptr inbounds %"class.v8::internal::ZoneList.552", %"class.v8::internal::ZoneList.552"* %31, i64 0, i32 0
  store %"class.v8::internal::TextElement"* null, %"class.v8::internal::TextElement"** %32, align 8
  %33 = getelementptr inbounds %"class.v8::internal::ZoneList.552", %"class.v8::internal::ZoneList.552"* %31, i64 0, i32 1
  store i32 1, i32* %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::ZoneList.552", %"class.v8::internal::ZoneList.552"* %31, i64 0, i32 2
  store i32 0, i32* %34, align 4
  %35 = load i64, i64* %19, align 8
  %36 = load i64, i64* %21, align 8
  %37 = sub i64 %36, %35
  %38 = icmp ult i64 %37, 16
  br i1 %38, label %39, label %41, !prof !2

39:                                               ; preds = %29
  %40 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 16) #12
  br label %43

41:                                               ; preds = %29
  %42 = add i64 %35, 16
  store i64 %42, i64* %19, align 8
  br label %43

43:                                               ; preds = %39, %41
  %44 = phi i64 [ %40, %39 ], [ %35, %41 ]
  %45 = inttoptr i64 %44 to %"class.v8::internal::TextElement"*
  store %"class.v8::internal::TextElement"* %45, %"class.v8::internal::TextElement"** %32, align 8
  store %"class.v8::internal::ZoneList.552"* %31, %"class.v8::internal::ZoneList.552"** %17, align 8
  %46 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 2
  store i8 %5, i8* %46, align 8
  %47 = tail call { i64, %"class.v8::internal::RegExpTree"* } @_ZN2v88internal11TextElement9CharClassEPNS0_20RegExpCharacterClassE(%"class.v8::internal::RegExpCharacterClass"* %1) #12
  %48 = extractvalue { i64, %"class.v8::internal::RegExpTree"* } %47, 0
  %49 = extractvalue { i64, %"class.v8::internal::RegExpTree"* } %47, 1
  %50 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %11, align 8
  %51 = load i32, i32* %34, align 4
  %52 = load i32, i32* %33, align 8
  %53 = icmp slt i32 %51, %52
  br i1 %53, label %54, label %61

54:                                               ; preds = %43
  %55 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %32, align 8
  %56 = add nsw i32 %51, 1
  store i32 %56, i32* %34, align 4
  %57 = sext i32 %51 to i64
  %58 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %55, i64 %57
  %59 = bitcast %"class.v8::internal::TextElement"* %58 to i64*
  store i64 %48, i64* %59, align 8
  %60 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %55, i64 %57, i32 2
  br label %96

61:                                               ; preds = %43
  %62 = shl nsw i32 %52, 1
  %63 = or i32 %62, 1
  %64 = sext i32 %63 to i64
  %65 = shl nsw i64 %64, 4
  %66 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %50, i64 0, i32 2
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %50, i64 0, i32 3
  %69 = load i64, i64* %68, align 8
  %70 = sub i64 %69, %67
  %71 = icmp ugt i64 %65, %70
  br i1 %71, label %72, label %74, !prof !2

72:                                               ; preds = %61
  %73 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %50, i64 %65) #12
  br label %76

74:                                               ; preds = %61
  %75 = add i64 %67, %65
  store i64 %75, i64* %66, align 8
  br label %76

76:                                               ; preds = %74, %72
  %77 = phi i64 [ %73, %72 ], [ %67, %74 ]
  %78 = inttoptr i64 %77 to %"class.v8::internal::TextElement"*
  %79 = load i32, i32* %34, align 4
  %80 = icmp sgt i32 %79, 0
  br i1 %80, label %81, label %89

81:                                               ; preds = %76
  %82 = inttoptr i64 %77 to i8*
  %83 = inttoptr i64 %30 to i8**
  %84 = load i8*, i8** %83, align 8
  %85 = icmp eq i32 %79, 1
  %86 = sext i32 %79 to i64
  %87 = shl nsw i64 %86, 4
  %88 = select i1 %85, i64 16, i64 %87
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %82, i8* align 1 %84, i64 %88, i1 false) #12
  br label %89

89:                                               ; preds = %81, %76
  store %"class.v8::internal::TextElement"* %78, %"class.v8::internal::TextElement"** %32, align 8
  store i32 %63, i32* %33, align 8
  %90 = load i32, i32* %34, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %34, align 4
  %92 = sext i32 %90 to i64
  %93 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %78, i64 %92
  %94 = bitcast %"class.v8::internal::TextElement"* %93 to i64*
  store i64 %48, i64* %94, align 8
  %95 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %78, i64 %92, i32 2
  br label %96

96:                                               ; preds = %54, %89
  %97 = phi %"class.v8::internal::RegExpTree"** [ %60, %54 ], [ %95, %89 ]
  store %"class.v8::internal::RegExpTree"* %49, %"class.v8::internal::RegExpTree"** %97, align 8
  ret void
}

declare { i64, %"class.v8::internal::RegExpTree"* } @_ZN2v88internal11TextElement9CharClassEPNS0_20RegExpCharacterClassE(%"class.v8::internal::RegExpCharacterClass"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__stable_sortIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SC_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl(%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**, %class.anon* dereferenceable(8), i64, %"class.v8::internal::RegExpTree"**, i64) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.v8::internal::RegExpTree"*, align 8
  switch i64 %3, label %19 [
    i64 0, label %440
    i64 1, label %440
    i64 2, label %8
  ]

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %1, i64 -1
  %10 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  %11 = load i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)*, i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)** %10, align 8
  %12 = tail call i32 %11(%"class.v8::internal::RegExpTree"** %9, %"class.v8::internal::RegExpTree"** %0) #12
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %440

14:                                               ; preds = %8
  %15 = bitcast %"class.v8::internal::RegExpTree"** %0 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.v8::internal::RegExpTree"** %9 to i64*
  %18 = load i64, i64* %17, align 8
  store i64 %18, i64* %15, align 8
  store i64 %16, i64* %17, align 8
  br label %440

19:                                               ; preds = %6
  %20 = icmp slt i64 %3, 129
  br i1 %20, label %21, label %55

21:                                               ; preds = %19
  %22 = icmp eq %"class.v8::internal::RegExpTree"** %0, %1
  br i1 %22, label %440, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %0, i64 1
  %25 = icmp eq %"class.v8::internal::RegExpTree"** %24, %1
  br i1 %25, label %440, label %26

26:                                               ; preds = %23
  %27 = bitcast %"class.v8::internal::RegExpTree"** %7 to i8*
  %28 = bitcast %"class.v8::internal::RegExpTree"** %7 to i64*
  %29 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  br label %30

30:                                               ; preds = %44, %26
  %31 = phi %"class.v8::internal::RegExpTree"** [ %24, %26 ], [ %48, %44 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #12
  %32 = bitcast %"class.v8::internal::RegExpTree"** %31 to i64*
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %28, align 8
  %34 = icmp eq %"class.v8::internal::RegExpTree"** %31, %0
  br i1 %34, label %44, label %35

35:                                               ; preds = %30, %50
  %36 = phi %"class.v8::internal::RegExpTree"** [ %37, %50 ], [ %31, %30 ]
  %37 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %36, i64 -1
  %38 = load i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)*, i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)** %29, align 8
  %39 = call i32 %38(%"class.v8::internal::RegExpTree"** nonnull %7, %"class.v8::internal::RegExpTree"** %37) #12
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %50, label %41

41:                                               ; preds = %50, %35
  %42 = phi %"class.v8::internal::RegExpTree"** [ %36, %35 ], [ %0, %50 ]
  %43 = load i64, i64* %28, align 8
  br label %44

44:                                               ; preds = %41, %30
  %45 = phi i64 [ %33, %30 ], [ %43, %41 ]
  %46 = phi %"class.v8::internal::RegExpTree"** [ %0, %30 ], [ %42, %41 ]
  %47 = bitcast %"class.v8::internal::RegExpTree"** %46 to i64*
  store i64 %45, i64* %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #12
  %48 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %31, i64 1
  %49 = icmp eq %"class.v8::internal::RegExpTree"** %48, %1
  br i1 %49, label %440, label %30

50:                                               ; preds = %35
  %51 = bitcast %"class.v8::internal::RegExpTree"** %37 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = bitcast %"class.v8::internal::RegExpTree"** %36 to i64*
  store i64 %52, i64* %53, align 8
  %54 = icmp eq %"class.v8::internal::RegExpTree"** %37, %0
  br i1 %54, label %41, label %35

55:                                               ; preds = %19
  %56 = lshr i64 %3, 1
  %57 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %0, i64 %56
  %58 = icmp sgt i64 %3, %5
  br i1 %58, label %438, label %59

59:                                               ; preds = %55
  tail call void @_ZNSt3__118__stable_sort_moveIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SC_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeE(%"class.v8::internal::RegExpTree"** %0, %"class.v8::internal::RegExpTree"** %57, %class.anon* dereferenceable(8) %2, i64 %56, %"class.v8::internal::RegExpTree"** %4)
  %60 = sub nsw i64 %3, %56
  %61 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, i64 %56
  tail call void @_ZNSt3__118__stable_sort_moveIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SC_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeE(%"class.v8::internal::RegExpTree"** %57, %"class.v8::internal::RegExpTree"** %1, %class.anon* dereferenceable(8) %2, i64 %60, %"class.v8::internal::RegExpTree"** %61)
  %62 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, i64 %3
  %63 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  br label %195

64:                                               ; preds = %389
  %65 = ptrtoint %"class.v8::internal::RegExpTree"** %390 to i64
  %66 = icmp eq %"class.v8::internal::RegExpTree"** %390, %62
  br i1 %66, label %440, label %67

67:                                               ; preds = %64
  %68 = add i64 %3, -1
  %69 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, i64 %68
  %70 = ptrtoint %"class.v8::internal::RegExpTree"** %69 to i64
  %71 = sub i64 %70, %65
  %72 = lshr i64 %71, 3
  %73 = add nuw nsw i64 %72, 1
  %74 = icmp ult i64 %73, 4
  br i1 %74, label %75, label %102

75:                                               ; preds = %193, %102, %67
  %76 = phi %"class.v8::internal::RegExpTree"** [ %392, %102 ], [ %392, %67 ], [ %116, %193 ]
  %77 = phi %"class.v8::internal::RegExpTree"** [ %390, %102 ], [ %390, %67 ], [ %117, %193 ]
  %78 = ptrtoint %"class.v8::internal::RegExpTree"** %77 to i64
  %79 = add i64 %3, -1
  %80 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, i64 %79
  %81 = ptrtoint %"class.v8::internal::RegExpTree"** %80 to i64
  %82 = sub i64 %81, %78
  %83 = lshr i64 %82, 3
  %84 = add nuw nsw i64 %83, 1
  %85 = and i64 %84, 7
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %98, label %87

87:                                               ; preds = %75, %87
  %88 = phi %"class.v8::internal::RegExpTree"** [ %95, %87 ], [ %76, %75 ]
  %89 = phi %"class.v8::internal::RegExpTree"** [ %94, %87 ], [ %77, %75 ]
  %90 = phi i64 [ %96, %87 ], [ %85, %75 ]
  %91 = bitcast %"class.v8::internal::RegExpTree"** %89 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = bitcast %"class.v8::internal::RegExpTree"** %88 to i64*
  store i64 %92, i64* %93, align 8
  %94 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %89, i64 1
  %95 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %88, i64 1
  %96 = add i64 %90, -1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %87, !llvm.loop !10

98:                                               ; preds = %87, %75
  %99 = phi %"class.v8::internal::RegExpTree"** [ %76, %75 ], [ %95, %87 ]
  %100 = phi %"class.v8::internal::RegExpTree"** [ %77, %75 ], [ %94, %87 ]
  %101 = icmp ult i64 %82, 56
  br i1 %101, label %440, label %394

102:                                              ; preds = %67
  %103 = add i64 %3, -1
  %104 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, i64 %103
  %105 = ptrtoint %"class.v8::internal::RegExpTree"** %104 to i64
  %106 = sub i64 %105, %65
  %107 = lshr i64 %106, 3
  %108 = add nuw nsw i64 %107, 1
  %109 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %392, i64 %108
  %110 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %390, i64 %108
  %111 = icmp ult %"class.v8::internal::RegExpTree"** %392, %110
  %112 = icmp ult %"class.v8::internal::RegExpTree"** %390, %109
  %113 = and i1 %111, %112
  br i1 %113, label %75, label %114

114:                                              ; preds = %102
  %115 = and i64 %73, 4611686018427387900
  %116 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %392, i64 %115
  %117 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %390, i64 %115
  %118 = add nsw i64 %115, -4
  %119 = lshr exact i64 %118, 2
  %120 = add nuw nsw i64 %119, 1
  %121 = and i64 %120, 3
  %122 = icmp ult i64 %118, 12
  br i1 %122, label %174, label %123

123:                                              ; preds = %114
  %124 = sub nsw i64 %120, %121
  br label %125

125:                                              ; preds = %125, %123
  %126 = phi i64 [ 0, %123 ], [ %171, %125 ]
  %127 = phi i64 [ %124, %123 ], [ %172, %125 ]
  %128 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %392, i64 %126
  %129 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %390, i64 %126
  %130 = bitcast %"class.v8::internal::RegExpTree"** %129 to <2 x i64>*
  %131 = load <2 x i64>, <2 x i64>* %130, align 8, !alias.scope !11
  %132 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %129, i64 2
  %133 = bitcast %"class.v8::internal::RegExpTree"** %132 to <2 x i64>*
  %134 = load <2 x i64>, <2 x i64>* %133, align 8, !alias.scope !11
  %135 = bitcast %"class.v8::internal::RegExpTree"** %128 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %135, align 8, !alias.scope !14, !noalias !11
  %136 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %128, i64 2
  %137 = bitcast %"class.v8::internal::RegExpTree"** %136 to <2 x i64>*
  store <2 x i64> %134, <2 x i64>* %137, align 8, !alias.scope !14, !noalias !11
  %138 = or i64 %126, 4
  %139 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %392, i64 %138
  %140 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %390, i64 %138
  %141 = bitcast %"class.v8::internal::RegExpTree"** %140 to <2 x i64>*
  %142 = load <2 x i64>, <2 x i64>* %141, align 8, !alias.scope !11
  %143 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %140, i64 2
  %144 = bitcast %"class.v8::internal::RegExpTree"** %143 to <2 x i64>*
  %145 = load <2 x i64>, <2 x i64>* %144, align 8, !alias.scope !11
  %146 = bitcast %"class.v8::internal::RegExpTree"** %139 to <2 x i64>*
  store <2 x i64> %142, <2 x i64>* %146, align 8, !alias.scope !14, !noalias !11
  %147 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %139, i64 2
  %148 = bitcast %"class.v8::internal::RegExpTree"** %147 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %148, align 8, !alias.scope !14, !noalias !11
  %149 = or i64 %126, 8
  %150 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %392, i64 %149
  %151 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %390, i64 %149
  %152 = bitcast %"class.v8::internal::RegExpTree"** %151 to <2 x i64>*
  %153 = load <2 x i64>, <2 x i64>* %152, align 8, !alias.scope !11
  %154 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %151, i64 2
  %155 = bitcast %"class.v8::internal::RegExpTree"** %154 to <2 x i64>*
  %156 = load <2 x i64>, <2 x i64>* %155, align 8, !alias.scope !11
  %157 = bitcast %"class.v8::internal::RegExpTree"** %150 to <2 x i64>*
  store <2 x i64> %153, <2 x i64>* %157, align 8, !alias.scope !14, !noalias !11
  %158 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %150, i64 2
  %159 = bitcast %"class.v8::internal::RegExpTree"** %158 to <2 x i64>*
  store <2 x i64> %156, <2 x i64>* %159, align 8, !alias.scope !14, !noalias !11
  %160 = or i64 %126, 12
  %161 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %392, i64 %160
  %162 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %390, i64 %160
  %163 = bitcast %"class.v8::internal::RegExpTree"** %162 to <2 x i64>*
  %164 = load <2 x i64>, <2 x i64>* %163, align 8, !alias.scope !11
  %165 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %162, i64 2
  %166 = bitcast %"class.v8::internal::RegExpTree"** %165 to <2 x i64>*
  %167 = load <2 x i64>, <2 x i64>* %166, align 8, !alias.scope !11
  %168 = bitcast %"class.v8::internal::RegExpTree"** %161 to <2 x i64>*
  store <2 x i64> %164, <2 x i64>* %168, align 8, !alias.scope !14, !noalias !11
  %169 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %161, i64 2
  %170 = bitcast %"class.v8::internal::RegExpTree"** %169 to <2 x i64>*
  store <2 x i64> %167, <2 x i64>* %170, align 8, !alias.scope !14, !noalias !11
  %171 = add i64 %126, 16
  %172 = add i64 %127, -4
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %125, !llvm.loop !16

174:                                              ; preds = %125, %114
  %175 = phi i64 [ 0, %114 ], [ %171, %125 ]
  %176 = icmp eq i64 %121, 0
  br i1 %176, label %193, label %177

177:                                              ; preds = %174, %177
  %178 = phi i64 [ %190, %177 ], [ %175, %174 ]
  %179 = phi i64 [ %191, %177 ], [ %121, %174 ]
  %180 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %392, i64 %178
  %181 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %390, i64 %178
  %182 = bitcast %"class.v8::internal::RegExpTree"** %181 to <2 x i64>*
  %183 = load <2 x i64>, <2 x i64>* %182, align 8, !alias.scope !11
  %184 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %181, i64 2
  %185 = bitcast %"class.v8::internal::RegExpTree"** %184 to <2 x i64>*
  %186 = load <2 x i64>, <2 x i64>* %185, align 8, !alias.scope !11
  %187 = bitcast %"class.v8::internal::RegExpTree"** %180 to <2 x i64>*
  store <2 x i64> %183, <2 x i64>* %187, align 8, !alias.scope !14, !noalias !11
  %188 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %180, i64 2
  %189 = bitcast %"class.v8::internal::RegExpTree"** %188 to <2 x i64>*
  store <2 x i64> %186, <2 x i64>* %189, align 8, !alias.scope !14, !noalias !11
  %190 = add i64 %178, 4
  %191 = add i64 %179, -1
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %177, !llvm.loop !18

193:                                              ; preds = %177, %174
  %194 = icmp eq i64 %73, %115
  br i1 %194, label %440, label %75

195:                                              ; preds = %389, %59
  %196 = phi %"class.v8::internal::RegExpTree"** [ %4, %59 ], [ %391, %389 ]
  %197 = phi %"class.v8::internal::RegExpTree"** [ %0, %59 ], [ %392, %389 ]
  %198 = phi %"class.v8::internal::RegExpTree"** [ %61, %59 ], [ %390, %389 ]
  %199 = icmp eq %"class.v8::internal::RegExpTree"** %198, %62
  br i1 %199, label %200, label %375

200:                                              ; preds = %195
  %201 = ptrtoint %"class.v8::internal::RegExpTree"** %196 to i64
  %202 = icmp eq %"class.v8::internal::RegExpTree"** %196, %61
  br i1 %202, label %440, label %203

203:                                              ; preds = %200
  %204 = add nsw i64 %56, -1
  %205 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, i64 %204
  %206 = ptrtoint %"class.v8::internal::RegExpTree"** %205 to i64
  %207 = sub i64 %206, %201
  %208 = lshr i64 %207, 3
  %209 = add nuw nsw i64 %208, 1
  %210 = icmp ult i64 %209, 4
  br i1 %210, label %304, label %211

211:                                              ; preds = %203
  %212 = add nsw i64 %56, -1
  %213 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, i64 %212
  %214 = ptrtoint %"class.v8::internal::RegExpTree"** %213 to i64
  %215 = sub i64 %214, %201
  %216 = lshr i64 %215, 3
  %217 = add nuw nsw i64 %216, 1
  %218 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %197, i64 %217
  %219 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %196, i64 %217
  %220 = icmp ult %"class.v8::internal::RegExpTree"** %197, %219
  %221 = icmp ult %"class.v8::internal::RegExpTree"** %196, %218
  %222 = and i1 %220, %221
  br i1 %222, label %304, label %223

223:                                              ; preds = %211
  %224 = and i64 %209, 4611686018427387900
  %225 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %196, i64 %224
  %226 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %197, i64 %224
  %227 = add nsw i64 %224, -4
  %228 = lshr exact i64 %227, 2
  %229 = add nuw nsw i64 %228, 1
  %230 = and i64 %229, 3
  %231 = icmp ult i64 %227, 12
  br i1 %231, label %283, label %232

232:                                              ; preds = %223
  %233 = sub nsw i64 %229, %230
  br label %234

234:                                              ; preds = %234, %232
  %235 = phi i64 [ 0, %232 ], [ %280, %234 ]
  %236 = phi i64 [ %233, %232 ], [ %281, %234 ]
  %237 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %196, i64 %235
  %238 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %197, i64 %235
  %239 = bitcast %"class.v8::internal::RegExpTree"** %237 to <2 x i64>*
  %240 = load <2 x i64>, <2 x i64>* %239, align 8, !alias.scope !19
  %241 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %237, i64 2
  %242 = bitcast %"class.v8::internal::RegExpTree"** %241 to <2 x i64>*
  %243 = load <2 x i64>, <2 x i64>* %242, align 8, !alias.scope !19
  %244 = bitcast %"class.v8::internal::RegExpTree"** %238 to <2 x i64>*
  store <2 x i64> %240, <2 x i64>* %244, align 8, !alias.scope !22, !noalias !19
  %245 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %238, i64 2
  %246 = bitcast %"class.v8::internal::RegExpTree"** %245 to <2 x i64>*
  store <2 x i64> %243, <2 x i64>* %246, align 8, !alias.scope !22, !noalias !19
  %247 = or i64 %235, 4
  %248 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %196, i64 %247
  %249 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %197, i64 %247
  %250 = bitcast %"class.v8::internal::RegExpTree"** %248 to <2 x i64>*
  %251 = load <2 x i64>, <2 x i64>* %250, align 8, !alias.scope !19
  %252 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %248, i64 2
  %253 = bitcast %"class.v8::internal::RegExpTree"** %252 to <2 x i64>*
  %254 = load <2 x i64>, <2 x i64>* %253, align 8, !alias.scope !19
  %255 = bitcast %"class.v8::internal::RegExpTree"** %249 to <2 x i64>*
  store <2 x i64> %251, <2 x i64>* %255, align 8, !alias.scope !22, !noalias !19
  %256 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %249, i64 2
  %257 = bitcast %"class.v8::internal::RegExpTree"** %256 to <2 x i64>*
  store <2 x i64> %254, <2 x i64>* %257, align 8, !alias.scope !22, !noalias !19
  %258 = or i64 %235, 8
  %259 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %196, i64 %258
  %260 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %197, i64 %258
  %261 = bitcast %"class.v8::internal::RegExpTree"** %259 to <2 x i64>*
  %262 = load <2 x i64>, <2 x i64>* %261, align 8, !alias.scope !19
  %263 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %259, i64 2
  %264 = bitcast %"class.v8::internal::RegExpTree"** %263 to <2 x i64>*
  %265 = load <2 x i64>, <2 x i64>* %264, align 8, !alias.scope !19
  %266 = bitcast %"class.v8::internal::RegExpTree"** %260 to <2 x i64>*
  store <2 x i64> %262, <2 x i64>* %266, align 8, !alias.scope !22, !noalias !19
  %267 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %260, i64 2
  %268 = bitcast %"class.v8::internal::RegExpTree"** %267 to <2 x i64>*
  store <2 x i64> %265, <2 x i64>* %268, align 8, !alias.scope !22, !noalias !19
  %269 = or i64 %235, 12
  %270 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %196, i64 %269
  %271 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %197, i64 %269
  %272 = bitcast %"class.v8::internal::RegExpTree"** %270 to <2 x i64>*
  %273 = load <2 x i64>, <2 x i64>* %272, align 8, !alias.scope !19
  %274 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %270, i64 2
  %275 = bitcast %"class.v8::internal::RegExpTree"** %274 to <2 x i64>*
  %276 = load <2 x i64>, <2 x i64>* %275, align 8, !alias.scope !19
  %277 = bitcast %"class.v8::internal::RegExpTree"** %271 to <2 x i64>*
  store <2 x i64> %273, <2 x i64>* %277, align 8, !alias.scope !22, !noalias !19
  %278 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %271, i64 2
  %279 = bitcast %"class.v8::internal::RegExpTree"** %278 to <2 x i64>*
  store <2 x i64> %276, <2 x i64>* %279, align 8, !alias.scope !22, !noalias !19
  %280 = add i64 %235, 16
  %281 = add i64 %236, -4
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %283, label %234, !llvm.loop !24

283:                                              ; preds = %234, %223
  %284 = phi i64 [ 0, %223 ], [ %280, %234 ]
  %285 = icmp eq i64 %230, 0
  br i1 %285, label %302, label %286

286:                                              ; preds = %283, %286
  %287 = phi i64 [ %299, %286 ], [ %284, %283 ]
  %288 = phi i64 [ %300, %286 ], [ %230, %283 ]
  %289 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %196, i64 %287
  %290 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %197, i64 %287
  %291 = bitcast %"class.v8::internal::RegExpTree"** %289 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 8, !alias.scope !19
  %293 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %289, i64 2
  %294 = bitcast %"class.v8::internal::RegExpTree"** %293 to <2 x i64>*
  %295 = load <2 x i64>, <2 x i64>* %294, align 8, !alias.scope !19
  %296 = bitcast %"class.v8::internal::RegExpTree"** %290 to <2 x i64>*
  store <2 x i64> %292, <2 x i64>* %296, align 8, !alias.scope !22, !noalias !19
  %297 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %290, i64 2
  %298 = bitcast %"class.v8::internal::RegExpTree"** %297 to <2 x i64>*
  store <2 x i64> %295, <2 x i64>* %298, align 8, !alias.scope !22, !noalias !19
  %299 = add i64 %287, 4
  %300 = add i64 %288, -1
  %301 = icmp eq i64 %300, 0
  br i1 %301, label %302, label %286, !llvm.loop !25

302:                                              ; preds = %286, %283
  %303 = icmp eq i64 %209, %224
  br i1 %303, label %440, label %304

304:                                              ; preds = %302, %211, %203
  %305 = phi %"class.v8::internal::RegExpTree"** [ %196, %211 ], [ %196, %203 ], [ %225, %302 ]
  %306 = phi %"class.v8::internal::RegExpTree"** [ %197, %211 ], [ %197, %203 ], [ %226, %302 ]
  %307 = ptrtoint %"class.v8::internal::RegExpTree"** %305 to i64
  %308 = add nsw i64 %56, -1
  %309 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, i64 %308
  %310 = ptrtoint %"class.v8::internal::RegExpTree"** %309 to i64
  %311 = sub i64 %310, %307
  %312 = lshr i64 %311, 3
  %313 = add nuw nsw i64 %312, 1
  %314 = and i64 %313, 7
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %327, label %316

316:                                              ; preds = %304, %316
  %317 = phi %"class.v8::internal::RegExpTree"** [ %323, %316 ], [ %305, %304 ]
  %318 = phi %"class.v8::internal::RegExpTree"** [ %324, %316 ], [ %306, %304 ]
  %319 = phi i64 [ %325, %316 ], [ %314, %304 ]
  %320 = bitcast %"class.v8::internal::RegExpTree"** %317 to i64*
  %321 = load i64, i64* %320, align 8
  %322 = bitcast %"class.v8::internal::RegExpTree"** %318 to i64*
  store i64 %321, i64* %322, align 8
  %323 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %317, i64 1
  %324 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %318, i64 1
  %325 = add i64 %319, -1
  %326 = icmp eq i64 %325, 0
  br i1 %326, label %327, label %316, !llvm.loop !26

327:                                              ; preds = %316, %304
  %328 = phi %"class.v8::internal::RegExpTree"** [ %305, %304 ], [ %323, %316 ]
  %329 = phi %"class.v8::internal::RegExpTree"** [ %306, %304 ], [ %324, %316 ]
  %330 = icmp ult i64 %311, 56
  br i1 %330, label %440, label %331

331:                                              ; preds = %327, %331
  %332 = phi %"class.v8::internal::RegExpTree"** [ %372, %331 ], [ %328, %327 ]
  %333 = phi %"class.v8::internal::RegExpTree"** [ %373, %331 ], [ %329, %327 ]
  %334 = bitcast %"class.v8::internal::RegExpTree"** %332 to i64*
  %335 = load i64, i64* %334, align 8
  %336 = bitcast %"class.v8::internal::RegExpTree"** %333 to i64*
  store i64 %335, i64* %336, align 8
  %337 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %332, i64 1
  %338 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %333, i64 1
  %339 = bitcast %"class.v8::internal::RegExpTree"** %337 to i64*
  %340 = load i64, i64* %339, align 8
  %341 = bitcast %"class.v8::internal::RegExpTree"** %338 to i64*
  store i64 %340, i64* %341, align 8
  %342 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %332, i64 2
  %343 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %333, i64 2
  %344 = bitcast %"class.v8::internal::RegExpTree"** %342 to i64*
  %345 = load i64, i64* %344, align 8
  %346 = bitcast %"class.v8::internal::RegExpTree"** %343 to i64*
  store i64 %345, i64* %346, align 8
  %347 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %332, i64 3
  %348 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %333, i64 3
  %349 = bitcast %"class.v8::internal::RegExpTree"** %347 to i64*
  %350 = load i64, i64* %349, align 8
  %351 = bitcast %"class.v8::internal::RegExpTree"** %348 to i64*
  store i64 %350, i64* %351, align 8
  %352 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %332, i64 4
  %353 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %333, i64 4
  %354 = bitcast %"class.v8::internal::RegExpTree"** %352 to i64*
  %355 = load i64, i64* %354, align 8
  %356 = bitcast %"class.v8::internal::RegExpTree"** %353 to i64*
  store i64 %355, i64* %356, align 8
  %357 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %332, i64 5
  %358 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %333, i64 5
  %359 = bitcast %"class.v8::internal::RegExpTree"** %357 to i64*
  %360 = load i64, i64* %359, align 8
  %361 = bitcast %"class.v8::internal::RegExpTree"** %358 to i64*
  store i64 %360, i64* %361, align 8
  %362 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %332, i64 6
  %363 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %333, i64 6
  %364 = bitcast %"class.v8::internal::RegExpTree"** %362 to i64*
  %365 = load i64, i64* %364, align 8
  %366 = bitcast %"class.v8::internal::RegExpTree"** %363 to i64*
  store i64 %365, i64* %366, align 8
  %367 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %332, i64 7
  %368 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %333, i64 7
  %369 = bitcast %"class.v8::internal::RegExpTree"** %367 to i64*
  %370 = load i64, i64* %369, align 8
  %371 = bitcast %"class.v8::internal::RegExpTree"** %368 to i64*
  store i64 %370, i64* %371, align 8
  %372 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %332, i64 8
  %373 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %333, i64 8
  %374 = icmp eq %"class.v8::internal::RegExpTree"** %372, %61
  br i1 %374, label %440, label %331, !llvm.loop !27

375:                                              ; preds = %195
  %376 = load i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)*, i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)** %63, align 8
  %377 = tail call i32 %376(%"class.v8::internal::RegExpTree"** %198, %"class.v8::internal::RegExpTree"** %196) #12
  %378 = icmp slt i32 %377, 0
  br i1 %378, label %379, label %384

379:                                              ; preds = %375
  %380 = bitcast %"class.v8::internal::RegExpTree"** %198 to i64*
  %381 = load i64, i64* %380, align 8
  %382 = bitcast %"class.v8::internal::RegExpTree"** %197 to i64*
  store i64 %381, i64* %382, align 8
  %383 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %198, i64 1
  br label %389

384:                                              ; preds = %375
  %385 = bitcast %"class.v8::internal::RegExpTree"** %196 to i64*
  %386 = load i64, i64* %385, align 8
  %387 = bitcast %"class.v8::internal::RegExpTree"** %197 to i64*
  store i64 %386, i64* %387, align 8
  %388 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %196, i64 1
  br label %389

389:                                              ; preds = %384, %379
  %390 = phi %"class.v8::internal::RegExpTree"** [ %383, %379 ], [ %198, %384 ]
  %391 = phi %"class.v8::internal::RegExpTree"** [ %196, %379 ], [ %388, %384 ]
  %392 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %197, i64 1
  %393 = icmp eq %"class.v8::internal::RegExpTree"** %391, %61
  br i1 %393, label %64, label %195

394:                                              ; preds = %98, %394
  %395 = phi %"class.v8::internal::RegExpTree"** [ %436, %394 ], [ %99, %98 ]
  %396 = phi %"class.v8::internal::RegExpTree"** [ %435, %394 ], [ %100, %98 ]
  %397 = bitcast %"class.v8::internal::RegExpTree"** %396 to i64*
  %398 = load i64, i64* %397, align 8
  %399 = bitcast %"class.v8::internal::RegExpTree"** %395 to i64*
  store i64 %398, i64* %399, align 8
  %400 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %396, i64 1
  %401 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %395, i64 1
  %402 = bitcast %"class.v8::internal::RegExpTree"** %400 to i64*
  %403 = load i64, i64* %402, align 8
  %404 = bitcast %"class.v8::internal::RegExpTree"** %401 to i64*
  store i64 %403, i64* %404, align 8
  %405 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %396, i64 2
  %406 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %395, i64 2
  %407 = bitcast %"class.v8::internal::RegExpTree"** %405 to i64*
  %408 = load i64, i64* %407, align 8
  %409 = bitcast %"class.v8::internal::RegExpTree"** %406 to i64*
  store i64 %408, i64* %409, align 8
  %410 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %396, i64 3
  %411 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %395, i64 3
  %412 = bitcast %"class.v8::internal::RegExpTree"** %410 to i64*
  %413 = load i64, i64* %412, align 8
  %414 = bitcast %"class.v8::internal::RegExpTree"** %411 to i64*
  store i64 %413, i64* %414, align 8
  %415 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %396, i64 4
  %416 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %395, i64 4
  %417 = bitcast %"class.v8::internal::RegExpTree"** %415 to i64*
  %418 = load i64, i64* %417, align 8
  %419 = bitcast %"class.v8::internal::RegExpTree"** %416 to i64*
  store i64 %418, i64* %419, align 8
  %420 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %396, i64 5
  %421 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %395, i64 5
  %422 = bitcast %"class.v8::internal::RegExpTree"** %420 to i64*
  %423 = load i64, i64* %422, align 8
  %424 = bitcast %"class.v8::internal::RegExpTree"** %421 to i64*
  store i64 %423, i64* %424, align 8
  %425 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %396, i64 6
  %426 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %395, i64 6
  %427 = bitcast %"class.v8::internal::RegExpTree"** %425 to i64*
  %428 = load i64, i64* %427, align 8
  %429 = bitcast %"class.v8::internal::RegExpTree"** %426 to i64*
  store i64 %428, i64* %429, align 8
  %430 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %396, i64 7
  %431 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %395, i64 7
  %432 = bitcast %"class.v8::internal::RegExpTree"** %430 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = bitcast %"class.v8::internal::RegExpTree"** %431 to i64*
  store i64 %433, i64* %434, align 8
  %435 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %396, i64 8
  %436 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %395, i64 8
  %437 = icmp eq %"class.v8::internal::RegExpTree"** %435, %62
  br i1 %437, label %440, label %394, !llvm.loop !28

438:                                              ; preds = %55
  tail call void @_ZNSt3__113__stable_sortIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SC_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl(%"class.v8::internal::RegExpTree"** %0, %"class.v8::internal::RegExpTree"** %57, %class.anon* dereferenceable(8) %2, i64 %56, %"class.v8::internal::RegExpTree"** %4, i64 %5)
  %439 = sub nsw i64 %3, %56
  tail call void @_ZNSt3__113__stable_sortIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SC_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl(%"class.v8::internal::RegExpTree"** %57, %"class.v8::internal::RegExpTree"** %1, %class.anon* dereferenceable(8) %2, i64 %439, %"class.v8::internal::RegExpTree"** %4, i64 %5)
  tail call void @_ZNSt3__115__inplace_mergeIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SH_SC_NS_15iterator_traitsISH_E15difference_typeESK_PNSJ_10value_typeEl(%"class.v8::internal::RegExpTree"** %0, %"class.v8::internal::RegExpTree"** %57, %"class.v8::internal::RegExpTree"** %1, %class.anon* dereferenceable(8) %2, i64 %56, i64 %439, %"class.v8::internal::RegExpTree"** %4, i64 %5)
  br label %440

440:                                              ; preds = %98, %394, %327, %331, %44, %193, %302, %200, %64, %23, %21, %438, %8, %14, %6, %6
  ret void
}

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__stable_sort_moveIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SC_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeE(%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**, %class.anon* dereferenceable(8), i64, %"class.v8::internal::RegExpTree"**) local_unnamed_addr #0 comdat {
  switch i64 %3, label %32 [
    i64 0, label %461
    i64 1, label %6
    i64 2, label %10
  ]

6:                                                ; preds = %5
  %7 = bitcast %"class.v8::internal::RegExpTree"** %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.v8::internal::RegExpTree"** %4 to i64*
  store i64 %8, i64* %9, align 8
  br label %461

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %1, i64 -1
  %12 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  %13 = load i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)*, i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)** %12, align 8
  %14 = tail call i32 %13(%"class.v8::internal::RegExpTree"** %11, %"class.v8::internal::RegExpTree"** %0) #12
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %24

16:                                               ; preds = %10
  %17 = bitcast %"class.v8::internal::RegExpTree"** %11 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.v8::internal::RegExpTree"** %4 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, i64 1
  %21 = bitcast %"class.v8::internal::RegExpTree"** %0 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.v8::internal::RegExpTree"** %20 to i64*
  store i64 %22, i64* %23, align 8
  br label %461

24:                                               ; preds = %10
  %25 = bitcast %"class.v8::internal::RegExpTree"** %0 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.v8::internal::RegExpTree"** %4 to i64*
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, i64 1
  %29 = bitcast %"class.v8::internal::RegExpTree"** %11 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %"class.v8::internal::RegExpTree"** %28 to i64*
  store i64 %30, i64* %31, align 8
  br label %461

32:                                               ; preds = %5
  %33 = icmp slt i64 %3, 9
  br i1 %33, label %34, label %80

34:                                               ; preds = %32
  %35 = icmp eq %"class.v8::internal::RegExpTree"** %0, %1
  br i1 %35, label %461, label %36

36:                                               ; preds = %34
  %37 = bitcast %"class.v8::internal::RegExpTree"** %0 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.v8::internal::RegExpTree"** %4 to i64*
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %0, i64 1
  %41 = icmp eq %"class.v8::internal::RegExpTree"** %40, %1
  br i1 %41, label %461, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  br label %44

44:                                               ; preds = %77, %42
  %45 = phi %"class.v8::internal::RegExpTree"** [ %40, %42 ], [ %78, %77 ]
  %46 = phi %"class.v8::internal::RegExpTree"** [ %4, %42 ], [ %47, %77 ]
  %47 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %46, i64 1
  %48 = load i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)*, i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)** %43, align 8
  %49 = tail call i32 %48(%"class.v8::internal::RegExpTree"** %45, %"class.v8::internal::RegExpTree"** %46) #12
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %73

51:                                               ; preds = %44
  %52 = bitcast %"class.v8::internal::RegExpTree"** %46 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %"class.v8::internal::RegExpTree"** %47 to i64*
  store i64 %53, i64* %54, align 8
  %55 = icmp eq %"class.v8::internal::RegExpTree"** %46, %4
  br i1 %55, label %69, label %56

56:                                               ; preds = %51, %64
  %57 = phi %"class.v8::internal::RegExpTree"** [ %58, %64 ], [ %46, %51 ]
  %58 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %57, i64 -1
  %59 = load i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)*, i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)** %43, align 8
  %60 = tail call i32 %59(%"class.v8::internal::RegExpTree"** %45, %"class.v8::internal::RegExpTree"** %58) #12
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %64, label %62

62:                                               ; preds = %56
  %63 = bitcast %"class.v8::internal::RegExpTree"** %57 to i64*
  br label %69

64:                                               ; preds = %56
  %65 = bitcast %"class.v8::internal::RegExpTree"** %58 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = bitcast %"class.v8::internal::RegExpTree"** %57 to i64*
  store i64 %66, i64* %67, align 8
  %68 = icmp eq %"class.v8::internal::RegExpTree"** %58, %4
  br i1 %68, label %69, label %56

69:                                               ; preds = %64, %62, %51
  %70 = phi i64* [ %39, %51 ], [ %63, %62 ], [ %39, %64 ]
  %71 = bitcast %"class.v8::internal::RegExpTree"** %45 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %70, align 8
  br label %77

73:                                               ; preds = %44
  %74 = bitcast %"class.v8::internal::RegExpTree"** %45 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.v8::internal::RegExpTree"** %47 to i64*
  store i64 %75, i64* %76, align 8
  br label %77

77:                                               ; preds = %73, %69
  %78 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %45, i64 1
  %79 = icmp eq %"class.v8::internal::RegExpTree"** %78, %1
  br i1 %79, label %461, label %44

80:                                               ; preds = %32
  %81 = lshr i64 %3, 1
  %82 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %0, i64 %81
  tail call void @_ZNSt3__113__stable_sortIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SC_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl(%"class.v8::internal::RegExpTree"** %0, %"class.v8::internal::RegExpTree"** %82, %class.anon* dereferenceable(8) %2, i64 %81, %"class.v8::internal::RegExpTree"** %4, i64 %81)
  %83 = sub nsw i64 %3, %81
  %84 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, i64 %81
  tail call void @_ZNSt3__113__stable_sortIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SC_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl(%"class.v8::internal::RegExpTree"** %82, %"class.v8::internal::RegExpTree"** %1, %class.anon* dereferenceable(8) %2, i64 %83, %"class.v8::internal::RegExpTree"** %84, i64 %83)
  %85 = icmp eq i64 %81, 0
  br i1 %85, label %88, label %86

86:                                               ; preds = %80
  %87 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  br label %262

88:                                               ; preds = %456, %80
  %89 = phi %"class.v8::internal::RegExpTree"** [ %82, %80 ], [ %457, %456 ]
  %90 = phi %"class.v8::internal::RegExpTree"** [ %4, %80 ], [ %459, %456 ]
  %91 = ptrtoint %"class.v8::internal::RegExpTree"** %89 to i64
  %92 = icmp eq %"class.v8::internal::RegExpTree"** %89, %1
  br i1 %92, label %461, label %93

93:                                               ; preds = %88
  %94 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %1, i64 -1
  %95 = ptrtoint %"class.v8::internal::RegExpTree"** %94 to i64
  %96 = sub i64 %95, %91
  %97 = lshr i64 %96, 3
  %98 = add nuw nsw i64 %97, 1
  %99 = icmp ult i64 %98, 4
  br i1 %99, label %192, label %100

100:                                              ; preds = %93
  %101 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %1, i64 -1
  %102 = ptrtoint %"class.v8::internal::RegExpTree"** %101 to i64
  %103 = sub i64 %102, %91
  %104 = lshr i64 %103, 3
  %105 = add nuw nsw i64 %104, 1
  %106 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %90, i64 %105
  %107 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %89, i64 %105
  %108 = icmp ult %"class.v8::internal::RegExpTree"** %90, %107
  %109 = icmp ult %"class.v8::internal::RegExpTree"** %89, %106
  %110 = and i1 %108, %109
  br i1 %110, label %192, label %111

111:                                              ; preds = %100
  %112 = and i64 %98, 4611686018427387900
  %113 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %90, i64 %112
  %114 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %89, i64 %112
  %115 = add nsw i64 %112, -4
  %116 = lshr exact i64 %115, 2
  %117 = add nuw nsw i64 %116, 1
  %118 = and i64 %117, 3
  %119 = icmp ult i64 %115, 12
  br i1 %119, label %171, label %120

120:                                              ; preds = %111
  %121 = sub nsw i64 %117, %118
  br label %122

122:                                              ; preds = %122, %120
  %123 = phi i64 [ 0, %120 ], [ %168, %122 ]
  %124 = phi i64 [ %121, %120 ], [ %169, %122 ]
  %125 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %90, i64 %123
  %126 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %89, i64 %123
  %127 = bitcast %"class.v8::internal::RegExpTree"** %126 to <2 x i64>*
  %128 = load <2 x i64>, <2 x i64>* %127, align 8, !alias.scope !29
  %129 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %126, i64 2
  %130 = bitcast %"class.v8::internal::RegExpTree"** %129 to <2 x i64>*
  %131 = load <2 x i64>, <2 x i64>* %130, align 8, !alias.scope !29
  %132 = bitcast %"class.v8::internal::RegExpTree"** %125 to <2 x i64>*
  store <2 x i64> %128, <2 x i64>* %132, align 8, !alias.scope !32, !noalias !29
  %133 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %125, i64 2
  %134 = bitcast %"class.v8::internal::RegExpTree"** %133 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %134, align 8, !alias.scope !32, !noalias !29
  %135 = or i64 %123, 4
  %136 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %90, i64 %135
  %137 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %89, i64 %135
  %138 = bitcast %"class.v8::internal::RegExpTree"** %137 to <2 x i64>*
  %139 = load <2 x i64>, <2 x i64>* %138, align 8, !alias.scope !29
  %140 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %137, i64 2
  %141 = bitcast %"class.v8::internal::RegExpTree"** %140 to <2 x i64>*
  %142 = load <2 x i64>, <2 x i64>* %141, align 8, !alias.scope !29
  %143 = bitcast %"class.v8::internal::RegExpTree"** %136 to <2 x i64>*
  store <2 x i64> %139, <2 x i64>* %143, align 8, !alias.scope !32, !noalias !29
  %144 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %136, i64 2
  %145 = bitcast %"class.v8::internal::RegExpTree"** %144 to <2 x i64>*
  store <2 x i64> %142, <2 x i64>* %145, align 8, !alias.scope !32, !noalias !29
  %146 = or i64 %123, 8
  %147 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %90, i64 %146
  %148 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %89, i64 %146
  %149 = bitcast %"class.v8::internal::RegExpTree"** %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 8, !alias.scope !29
  %151 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %148, i64 2
  %152 = bitcast %"class.v8::internal::RegExpTree"** %151 to <2 x i64>*
  %153 = load <2 x i64>, <2 x i64>* %152, align 8, !alias.scope !29
  %154 = bitcast %"class.v8::internal::RegExpTree"** %147 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %154, align 8, !alias.scope !32, !noalias !29
  %155 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %147, i64 2
  %156 = bitcast %"class.v8::internal::RegExpTree"** %155 to <2 x i64>*
  store <2 x i64> %153, <2 x i64>* %156, align 8, !alias.scope !32, !noalias !29
  %157 = or i64 %123, 12
  %158 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %90, i64 %157
  %159 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %89, i64 %157
  %160 = bitcast %"class.v8::internal::RegExpTree"** %159 to <2 x i64>*
  %161 = load <2 x i64>, <2 x i64>* %160, align 8, !alias.scope !29
  %162 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %159, i64 2
  %163 = bitcast %"class.v8::internal::RegExpTree"** %162 to <2 x i64>*
  %164 = load <2 x i64>, <2 x i64>* %163, align 8, !alias.scope !29
  %165 = bitcast %"class.v8::internal::RegExpTree"** %158 to <2 x i64>*
  store <2 x i64> %161, <2 x i64>* %165, align 8, !alias.scope !32, !noalias !29
  %166 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %158, i64 2
  %167 = bitcast %"class.v8::internal::RegExpTree"** %166 to <2 x i64>*
  store <2 x i64> %164, <2 x i64>* %167, align 8, !alias.scope !32, !noalias !29
  %168 = add i64 %123, 16
  %169 = add i64 %124, -4
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %122, !llvm.loop !34

171:                                              ; preds = %122, %111
  %172 = phi i64 [ 0, %111 ], [ %168, %122 ]
  %173 = icmp eq i64 %118, 0
  br i1 %173, label %190, label %174

174:                                              ; preds = %171, %174
  %175 = phi i64 [ %187, %174 ], [ %172, %171 ]
  %176 = phi i64 [ %188, %174 ], [ %118, %171 ]
  %177 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %90, i64 %175
  %178 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %89, i64 %175
  %179 = bitcast %"class.v8::internal::RegExpTree"** %178 to <2 x i64>*
  %180 = load <2 x i64>, <2 x i64>* %179, align 8, !alias.scope !29
  %181 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %178, i64 2
  %182 = bitcast %"class.v8::internal::RegExpTree"** %181 to <2 x i64>*
  %183 = load <2 x i64>, <2 x i64>* %182, align 8, !alias.scope !29
  %184 = bitcast %"class.v8::internal::RegExpTree"** %177 to <2 x i64>*
  store <2 x i64> %180, <2 x i64>* %184, align 8, !alias.scope !32, !noalias !29
  %185 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %177, i64 2
  %186 = bitcast %"class.v8::internal::RegExpTree"** %185 to <2 x i64>*
  store <2 x i64> %183, <2 x i64>* %186, align 8, !alias.scope !32, !noalias !29
  %187 = add i64 %175, 4
  %188 = add i64 %176, -1
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %190, label %174, !llvm.loop !35

190:                                              ; preds = %174, %171
  %191 = icmp eq i64 %98, %112
  br i1 %191, label %461, label %192

192:                                              ; preds = %190, %100, %93
  %193 = phi %"class.v8::internal::RegExpTree"** [ %90, %100 ], [ %90, %93 ], [ %113, %190 ]
  %194 = phi %"class.v8::internal::RegExpTree"** [ %89, %100 ], [ %89, %93 ], [ %114, %190 ]
  %195 = ptrtoint %"class.v8::internal::RegExpTree"** %194 to i64
  %196 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %1, i64 -1
  %197 = ptrtoint %"class.v8::internal::RegExpTree"** %196 to i64
  %198 = sub i64 %197, %195
  %199 = lshr i64 %198, 3
  %200 = add nuw nsw i64 %199, 1
  %201 = and i64 %200, 7
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %214, label %203

203:                                              ; preds = %192, %203
  %204 = phi %"class.v8::internal::RegExpTree"** [ %211, %203 ], [ %193, %192 ]
  %205 = phi %"class.v8::internal::RegExpTree"** [ %210, %203 ], [ %194, %192 ]
  %206 = phi i64 [ %212, %203 ], [ %201, %192 ]
  %207 = bitcast %"class.v8::internal::RegExpTree"** %205 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = bitcast %"class.v8::internal::RegExpTree"** %204 to i64*
  store i64 %208, i64* %209, align 8
  %210 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %205, i64 1
  %211 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %204, i64 1
  %212 = add i64 %206, -1
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %203, !llvm.loop !36

214:                                              ; preds = %203, %192
  %215 = phi %"class.v8::internal::RegExpTree"** [ %193, %192 ], [ %211, %203 ]
  %216 = phi %"class.v8::internal::RegExpTree"** [ %194, %192 ], [ %210, %203 ]
  %217 = icmp ult i64 %198, 56
  br i1 %217, label %461, label %218

218:                                              ; preds = %214, %218
  %219 = phi %"class.v8::internal::RegExpTree"** [ %260, %218 ], [ %215, %214 ]
  %220 = phi %"class.v8::internal::RegExpTree"** [ %259, %218 ], [ %216, %214 ]
  %221 = bitcast %"class.v8::internal::RegExpTree"** %220 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = bitcast %"class.v8::internal::RegExpTree"** %219 to i64*
  store i64 %222, i64* %223, align 8
  %224 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %220, i64 1
  %225 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %219, i64 1
  %226 = bitcast %"class.v8::internal::RegExpTree"** %224 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = bitcast %"class.v8::internal::RegExpTree"** %225 to i64*
  store i64 %227, i64* %228, align 8
  %229 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %220, i64 2
  %230 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %219, i64 2
  %231 = bitcast %"class.v8::internal::RegExpTree"** %229 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = bitcast %"class.v8::internal::RegExpTree"** %230 to i64*
  store i64 %232, i64* %233, align 8
  %234 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %220, i64 3
  %235 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %219, i64 3
  %236 = bitcast %"class.v8::internal::RegExpTree"** %234 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = bitcast %"class.v8::internal::RegExpTree"** %235 to i64*
  store i64 %237, i64* %238, align 8
  %239 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %220, i64 4
  %240 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %219, i64 4
  %241 = bitcast %"class.v8::internal::RegExpTree"** %239 to i64*
  %242 = load i64, i64* %241, align 8
  %243 = bitcast %"class.v8::internal::RegExpTree"** %240 to i64*
  store i64 %242, i64* %243, align 8
  %244 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %220, i64 5
  %245 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %219, i64 5
  %246 = bitcast %"class.v8::internal::RegExpTree"** %244 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = bitcast %"class.v8::internal::RegExpTree"** %245 to i64*
  store i64 %247, i64* %248, align 8
  %249 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %220, i64 6
  %250 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %219, i64 6
  %251 = bitcast %"class.v8::internal::RegExpTree"** %249 to i64*
  %252 = load i64, i64* %251, align 8
  %253 = bitcast %"class.v8::internal::RegExpTree"** %250 to i64*
  store i64 %252, i64* %253, align 8
  %254 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %220, i64 7
  %255 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %219, i64 7
  %256 = bitcast %"class.v8::internal::RegExpTree"** %254 to i64*
  %257 = load i64, i64* %256, align 8
  %258 = bitcast %"class.v8::internal::RegExpTree"** %255 to i64*
  store i64 %257, i64* %258, align 8
  %259 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %220, i64 8
  %260 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %219, i64 8
  %261 = icmp eq %"class.v8::internal::RegExpTree"** %259, %1
  br i1 %261, label %461, label %218, !llvm.loop !37

262:                                              ; preds = %456, %86
  %263 = phi %"class.v8::internal::RegExpTree"** [ %0, %86 ], [ %458, %456 ]
  %264 = phi %"class.v8::internal::RegExpTree"** [ %4, %86 ], [ %459, %456 ]
  %265 = phi %"class.v8::internal::RegExpTree"** [ %82, %86 ], [ %457, %456 ]
  %266 = icmp eq %"class.v8::internal::RegExpTree"** %265, %1
  br i1 %266, label %267, label %442

267:                                              ; preds = %262
  %268 = ptrtoint %"class.v8::internal::RegExpTree"** %263 to i64
  %269 = icmp eq %"class.v8::internal::RegExpTree"** %263, %82
  br i1 %269, label %461, label %270

270:                                              ; preds = %267
  %271 = add nsw i64 %81, -1
  %272 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %0, i64 %271
  %273 = ptrtoint %"class.v8::internal::RegExpTree"** %272 to i64
  %274 = sub i64 %273, %268
  %275 = lshr i64 %274, 3
  %276 = add nuw nsw i64 %275, 1
  %277 = icmp ult i64 %276, 4
  br i1 %277, label %371, label %278

278:                                              ; preds = %270
  %279 = add nsw i64 %81, -1
  %280 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %0, i64 %279
  %281 = ptrtoint %"class.v8::internal::RegExpTree"** %280 to i64
  %282 = sub i64 %281, %268
  %283 = lshr i64 %282, 3
  %284 = add nuw nsw i64 %283, 1
  %285 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %264, i64 %284
  %286 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %263, i64 %284
  %287 = icmp ult %"class.v8::internal::RegExpTree"** %264, %286
  %288 = icmp ult %"class.v8::internal::RegExpTree"** %263, %285
  %289 = and i1 %287, %288
  br i1 %289, label %371, label %290

290:                                              ; preds = %278
  %291 = and i64 %276, 4611686018427387900
  %292 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %263, i64 %291
  %293 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %264, i64 %291
  %294 = add nsw i64 %291, -4
  %295 = lshr exact i64 %294, 2
  %296 = add nuw nsw i64 %295, 1
  %297 = and i64 %296, 3
  %298 = icmp ult i64 %294, 12
  br i1 %298, label %350, label %299

299:                                              ; preds = %290
  %300 = sub nsw i64 %296, %297
  br label %301

301:                                              ; preds = %301, %299
  %302 = phi i64 [ 0, %299 ], [ %347, %301 ]
  %303 = phi i64 [ %300, %299 ], [ %348, %301 ]
  %304 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %263, i64 %302
  %305 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %264, i64 %302
  %306 = bitcast %"class.v8::internal::RegExpTree"** %304 to <2 x i64>*
  %307 = load <2 x i64>, <2 x i64>* %306, align 8, !alias.scope !38
  %308 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %304, i64 2
  %309 = bitcast %"class.v8::internal::RegExpTree"** %308 to <2 x i64>*
  %310 = load <2 x i64>, <2 x i64>* %309, align 8, !alias.scope !38
  %311 = bitcast %"class.v8::internal::RegExpTree"** %305 to <2 x i64>*
  store <2 x i64> %307, <2 x i64>* %311, align 8, !alias.scope !41, !noalias !38
  %312 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %305, i64 2
  %313 = bitcast %"class.v8::internal::RegExpTree"** %312 to <2 x i64>*
  store <2 x i64> %310, <2 x i64>* %313, align 8, !alias.scope !41, !noalias !38
  %314 = or i64 %302, 4
  %315 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %263, i64 %314
  %316 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %264, i64 %314
  %317 = bitcast %"class.v8::internal::RegExpTree"** %315 to <2 x i64>*
  %318 = load <2 x i64>, <2 x i64>* %317, align 8, !alias.scope !38
  %319 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %315, i64 2
  %320 = bitcast %"class.v8::internal::RegExpTree"** %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 8, !alias.scope !38
  %322 = bitcast %"class.v8::internal::RegExpTree"** %316 to <2 x i64>*
  store <2 x i64> %318, <2 x i64>* %322, align 8, !alias.scope !41, !noalias !38
  %323 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %316, i64 2
  %324 = bitcast %"class.v8::internal::RegExpTree"** %323 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %324, align 8, !alias.scope !41, !noalias !38
  %325 = or i64 %302, 8
  %326 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %263, i64 %325
  %327 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %264, i64 %325
  %328 = bitcast %"class.v8::internal::RegExpTree"** %326 to <2 x i64>*
  %329 = load <2 x i64>, <2 x i64>* %328, align 8, !alias.scope !38
  %330 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %326, i64 2
  %331 = bitcast %"class.v8::internal::RegExpTree"** %330 to <2 x i64>*
  %332 = load <2 x i64>, <2 x i64>* %331, align 8, !alias.scope !38
  %333 = bitcast %"class.v8::internal::RegExpTree"** %327 to <2 x i64>*
  store <2 x i64> %329, <2 x i64>* %333, align 8, !alias.scope !41, !noalias !38
  %334 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %327, i64 2
  %335 = bitcast %"class.v8::internal::RegExpTree"** %334 to <2 x i64>*
  store <2 x i64> %332, <2 x i64>* %335, align 8, !alias.scope !41, !noalias !38
  %336 = or i64 %302, 12
  %337 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %263, i64 %336
  %338 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %264, i64 %336
  %339 = bitcast %"class.v8::internal::RegExpTree"** %337 to <2 x i64>*
  %340 = load <2 x i64>, <2 x i64>* %339, align 8, !alias.scope !38
  %341 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %337, i64 2
  %342 = bitcast %"class.v8::internal::RegExpTree"** %341 to <2 x i64>*
  %343 = load <2 x i64>, <2 x i64>* %342, align 8, !alias.scope !38
  %344 = bitcast %"class.v8::internal::RegExpTree"** %338 to <2 x i64>*
  store <2 x i64> %340, <2 x i64>* %344, align 8, !alias.scope !41, !noalias !38
  %345 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %338, i64 2
  %346 = bitcast %"class.v8::internal::RegExpTree"** %345 to <2 x i64>*
  store <2 x i64> %343, <2 x i64>* %346, align 8, !alias.scope !41, !noalias !38
  %347 = add i64 %302, 16
  %348 = add i64 %303, -4
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %350, label %301, !llvm.loop !43

350:                                              ; preds = %301, %290
  %351 = phi i64 [ 0, %290 ], [ %347, %301 ]
  %352 = icmp eq i64 %297, 0
  br i1 %352, label %369, label %353

353:                                              ; preds = %350, %353
  %354 = phi i64 [ %366, %353 ], [ %351, %350 ]
  %355 = phi i64 [ %367, %353 ], [ %297, %350 ]
  %356 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %263, i64 %354
  %357 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %264, i64 %354
  %358 = bitcast %"class.v8::internal::RegExpTree"** %356 to <2 x i64>*
  %359 = load <2 x i64>, <2 x i64>* %358, align 8, !alias.scope !38
  %360 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %356, i64 2
  %361 = bitcast %"class.v8::internal::RegExpTree"** %360 to <2 x i64>*
  %362 = load <2 x i64>, <2 x i64>* %361, align 8, !alias.scope !38
  %363 = bitcast %"class.v8::internal::RegExpTree"** %357 to <2 x i64>*
  store <2 x i64> %359, <2 x i64>* %363, align 8, !alias.scope !41, !noalias !38
  %364 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %357, i64 2
  %365 = bitcast %"class.v8::internal::RegExpTree"** %364 to <2 x i64>*
  store <2 x i64> %362, <2 x i64>* %365, align 8, !alias.scope !41, !noalias !38
  %366 = add i64 %354, 4
  %367 = add i64 %355, -1
  %368 = icmp eq i64 %367, 0
  br i1 %368, label %369, label %353, !llvm.loop !44

369:                                              ; preds = %353, %350
  %370 = icmp eq i64 %276, %291
  br i1 %370, label %461, label %371

371:                                              ; preds = %369, %278, %270
  %372 = phi %"class.v8::internal::RegExpTree"** [ %263, %278 ], [ %263, %270 ], [ %292, %369 ]
  %373 = phi %"class.v8::internal::RegExpTree"** [ %264, %278 ], [ %264, %270 ], [ %293, %369 ]
  %374 = ptrtoint %"class.v8::internal::RegExpTree"** %372 to i64
  %375 = add nsw i64 %81, -1
  %376 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %0, i64 %375
  %377 = ptrtoint %"class.v8::internal::RegExpTree"** %376 to i64
  %378 = sub i64 %377, %374
  %379 = lshr i64 %378, 3
  %380 = add nuw nsw i64 %379, 1
  %381 = and i64 %380, 7
  %382 = icmp eq i64 %381, 0
  br i1 %382, label %394, label %383

383:                                              ; preds = %371, %383
  %384 = phi %"class.v8::internal::RegExpTree"** [ %390, %383 ], [ %372, %371 ]
  %385 = phi %"class.v8::internal::RegExpTree"** [ %391, %383 ], [ %373, %371 ]
  %386 = phi i64 [ %392, %383 ], [ %381, %371 ]
  %387 = bitcast %"class.v8::internal::RegExpTree"** %384 to i64*
  %388 = load i64, i64* %387, align 8
  %389 = bitcast %"class.v8::internal::RegExpTree"** %385 to i64*
  store i64 %388, i64* %389, align 8
  %390 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %384, i64 1
  %391 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %385, i64 1
  %392 = add i64 %386, -1
  %393 = icmp eq i64 %392, 0
  br i1 %393, label %394, label %383, !llvm.loop !45

394:                                              ; preds = %383, %371
  %395 = phi %"class.v8::internal::RegExpTree"** [ %372, %371 ], [ %390, %383 ]
  %396 = phi %"class.v8::internal::RegExpTree"** [ %373, %371 ], [ %391, %383 ]
  %397 = icmp ult i64 %378, 56
  br i1 %397, label %461, label %398

398:                                              ; preds = %394, %398
  %399 = phi %"class.v8::internal::RegExpTree"** [ %439, %398 ], [ %395, %394 ]
  %400 = phi %"class.v8::internal::RegExpTree"** [ %440, %398 ], [ %396, %394 ]
  %401 = bitcast %"class.v8::internal::RegExpTree"** %399 to i64*
  %402 = load i64, i64* %401, align 8
  %403 = bitcast %"class.v8::internal::RegExpTree"** %400 to i64*
  store i64 %402, i64* %403, align 8
  %404 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %399, i64 1
  %405 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %400, i64 1
  %406 = bitcast %"class.v8::internal::RegExpTree"** %404 to i64*
  %407 = load i64, i64* %406, align 8
  %408 = bitcast %"class.v8::internal::RegExpTree"** %405 to i64*
  store i64 %407, i64* %408, align 8
  %409 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %399, i64 2
  %410 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %400, i64 2
  %411 = bitcast %"class.v8::internal::RegExpTree"** %409 to i64*
  %412 = load i64, i64* %411, align 8
  %413 = bitcast %"class.v8::internal::RegExpTree"** %410 to i64*
  store i64 %412, i64* %413, align 8
  %414 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %399, i64 3
  %415 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %400, i64 3
  %416 = bitcast %"class.v8::internal::RegExpTree"** %414 to i64*
  %417 = load i64, i64* %416, align 8
  %418 = bitcast %"class.v8::internal::RegExpTree"** %415 to i64*
  store i64 %417, i64* %418, align 8
  %419 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %399, i64 4
  %420 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %400, i64 4
  %421 = bitcast %"class.v8::internal::RegExpTree"** %419 to i64*
  %422 = load i64, i64* %421, align 8
  %423 = bitcast %"class.v8::internal::RegExpTree"** %420 to i64*
  store i64 %422, i64* %423, align 8
  %424 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %399, i64 5
  %425 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %400, i64 5
  %426 = bitcast %"class.v8::internal::RegExpTree"** %424 to i64*
  %427 = load i64, i64* %426, align 8
  %428 = bitcast %"class.v8::internal::RegExpTree"** %425 to i64*
  store i64 %427, i64* %428, align 8
  %429 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %399, i64 6
  %430 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %400, i64 6
  %431 = bitcast %"class.v8::internal::RegExpTree"** %429 to i64*
  %432 = load i64, i64* %431, align 8
  %433 = bitcast %"class.v8::internal::RegExpTree"** %430 to i64*
  store i64 %432, i64* %433, align 8
  %434 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %399, i64 7
  %435 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %400, i64 7
  %436 = bitcast %"class.v8::internal::RegExpTree"** %434 to i64*
  %437 = load i64, i64* %436, align 8
  %438 = bitcast %"class.v8::internal::RegExpTree"** %435 to i64*
  store i64 %437, i64* %438, align 8
  %439 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %399, i64 8
  %440 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %400, i64 8
  %441 = icmp eq %"class.v8::internal::RegExpTree"** %439, %82
  br i1 %441, label %461, label %398, !llvm.loop !46

442:                                              ; preds = %262
  %443 = load i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)*, i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)** %87, align 8
  %444 = tail call i32 %443(%"class.v8::internal::RegExpTree"** %265, %"class.v8::internal::RegExpTree"** %263) #12
  %445 = icmp slt i32 %444, 0
  br i1 %445, label %446, label %451

446:                                              ; preds = %442
  %447 = bitcast %"class.v8::internal::RegExpTree"** %265 to i64*
  %448 = load i64, i64* %447, align 8
  %449 = bitcast %"class.v8::internal::RegExpTree"** %264 to i64*
  store i64 %448, i64* %449, align 8
  %450 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %265, i64 1
  br label %456

451:                                              ; preds = %442
  %452 = bitcast %"class.v8::internal::RegExpTree"** %263 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = bitcast %"class.v8::internal::RegExpTree"** %264 to i64*
  store i64 %453, i64* %454, align 8
  %455 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %263, i64 1
  br label %456

456:                                              ; preds = %451, %446
  %457 = phi %"class.v8::internal::RegExpTree"** [ %450, %446 ], [ %265, %451 ]
  %458 = phi %"class.v8::internal::RegExpTree"** [ %263, %446 ], [ %455, %451 ]
  %459 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %264, i64 1
  %460 = icmp eq %"class.v8::internal::RegExpTree"** %458, %82
  br i1 %460, label %88, label %262

461:                                              ; preds = %394, %398, %214, %218, %77, %369, %190, %267, %88, %36, %34, %16, %24, %5, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__115__inplace_mergeIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SH_SC_NS_15iterator_traitsISH_E15difference_typeESK_PNSJ_10value_typeEl(%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**, %class.anon* dereferenceable(8), i64, i64, %"class.v8::internal::RegExpTree"**, i64) local_unnamed_addr #0 comdat {
  %9 = ptrtoint %"class.v8::internal::RegExpTree"** %6 to i64
  %10 = icmp eq i64 %5, 0
  br i1 %10, label %957, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %class.anon, %class.anon* %3, i64 0, i32 0
  br label %13

13:                                               ; preds = %11, %950
  %14 = phi %"class.v8::internal::RegExpTree"** [ %0, %11 ], [ %955, %950 ]
  %15 = phi %"class.v8::internal::RegExpTree"** [ %1, %11 ], [ %954, %950 ]
  %16 = phi %"class.v8::internal::RegExpTree"** [ %2, %11 ], [ %953, %950 ]
  %17 = phi i64 [ %4, %11 ], [ %952, %950 ]
  %18 = phi i64 [ %5, %11 ], [ %951, %950 ]
  %19 = bitcast %"class.v8::internal::RegExpTree"** %15 to i8*
  %20 = icmp sgt i64 %17, %7
  %21 = icmp sgt i64 %18, %7
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %25

23:                                               ; preds = %13
  %24 = icmp eq i64 %17, 0
  br i1 %24, label %957, label %597

25:                                               ; preds = %13
  %26 = ptrtoint %"class.v8::internal::RegExpTree"** %15 to i64
  %27 = ptrtoint %"class.v8::internal::RegExpTree"** %14 to i64
  %28 = icmp sgt i64 %17, %18
  br i1 %28, label %157, label %29

29:                                               ; preds = %25
  %30 = icmp eq %"class.v8::internal::RegExpTree"** %14, %15
  br i1 %30, label %957, label %31

31:                                               ; preds = %29
  %32 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 -1
  %33 = ptrtoint %"class.v8::internal::RegExpTree"** %32 to i64
  %34 = sub i64 %33, %27
  %35 = lshr i64 %34, 3
  %36 = add nuw nsw i64 %35, 1
  %37 = icmp ult i64 %36, 4
  br i1 %37, label %38, label %65

38:                                               ; preds = %155, %65, %31
  %39 = phi %"class.v8::internal::RegExpTree"** [ %14, %65 ], [ %14, %31 ], [ %78, %155 ]
  %40 = phi %"class.v8::internal::RegExpTree"** [ %6, %65 ], [ %6, %31 ], [ %79, %155 ]
  %41 = ptrtoint %"class.v8::internal::RegExpTree"** %39 to i64
  %42 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 -1
  %43 = ptrtoint %"class.v8::internal::RegExpTree"** %42 to i64
  %44 = sub i64 %43, %41
  %45 = lshr i64 %44, 3
  %46 = add nuw nsw i64 %45, 1
  %47 = and i64 %46, 7
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %60, label %49

49:                                               ; preds = %38, %49
  %50 = phi %"class.v8::internal::RegExpTree"** [ %56, %49 ], [ %39, %38 ]
  %51 = phi %"class.v8::internal::RegExpTree"** [ %57, %49 ], [ %40, %38 ]
  %52 = phi i64 [ %58, %49 ], [ %47, %38 ]
  %53 = bitcast %"class.v8::internal::RegExpTree"** %50 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = bitcast %"class.v8::internal::RegExpTree"** %51 to i64*
  store i64 %54, i64* %55, align 8
  %56 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %50, i64 1
  %57 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %51, i64 1
  %58 = add i64 %52, -1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %49, !llvm.loop !47

60:                                               ; preds = %49, %38
  %61 = phi %"class.v8::internal::RegExpTree"** [ undef, %38 ], [ %57, %49 ]
  %62 = phi %"class.v8::internal::RegExpTree"** [ %39, %38 ], [ %56, %49 ]
  %63 = phi %"class.v8::internal::RegExpTree"** [ %40, %38 ], [ %57, %49 ]
  %64 = icmp ult i64 %44, 56
  br i1 %64, label %285, label %320

65:                                               ; preds = %31
  %66 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 -1
  %67 = ptrtoint %"class.v8::internal::RegExpTree"** %66 to i64
  %68 = sub i64 %67, %27
  %69 = lshr i64 %68, 3
  %70 = add nuw nsw i64 %69, 1
  %71 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %6, i64 %70
  %72 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %14, i64 %70
  %73 = icmp ugt %"class.v8::internal::RegExpTree"** %72, %6
  %74 = icmp ult %"class.v8::internal::RegExpTree"** %14, %71
  %75 = and i1 %73, %74
  br i1 %75, label %38, label %76

76:                                               ; preds = %65
  %77 = and i64 %36, 4611686018427387900
  %78 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %14, i64 %77
  %79 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %6, i64 %77
  %80 = add nsw i64 %77, -4
  %81 = lshr exact i64 %80, 2
  %82 = add nuw nsw i64 %81, 1
  %83 = and i64 %82, 3
  %84 = icmp ult i64 %80, 12
  br i1 %84, label %136, label %85

85:                                               ; preds = %76
  %86 = sub nsw i64 %82, %83
  br label %87

87:                                               ; preds = %87, %85
  %88 = phi i64 [ 0, %85 ], [ %133, %87 ]
  %89 = phi i64 [ %86, %85 ], [ %134, %87 ]
  %90 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %14, i64 %88
  %91 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %6, i64 %88
  %92 = bitcast %"class.v8::internal::RegExpTree"** %90 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 8, !alias.scope !48
  %94 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %90, i64 2
  %95 = bitcast %"class.v8::internal::RegExpTree"** %94 to <2 x i64>*
  %96 = load <2 x i64>, <2 x i64>* %95, align 8, !alias.scope !48
  %97 = bitcast %"class.v8::internal::RegExpTree"** %91 to <2 x i64>*
  store <2 x i64> %93, <2 x i64>* %97, align 8, !alias.scope !51, !noalias !48
  %98 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %91, i64 2
  %99 = bitcast %"class.v8::internal::RegExpTree"** %98 to <2 x i64>*
  store <2 x i64> %96, <2 x i64>* %99, align 8, !alias.scope !51, !noalias !48
  %100 = or i64 %88, 4
  %101 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %14, i64 %100
  %102 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %6, i64 %100
  %103 = bitcast %"class.v8::internal::RegExpTree"** %101 to <2 x i64>*
  %104 = load <2 x i64>, <2 x i64>* %103, align 8, !alias.scope !48
  %105 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %101, i64 2
  %106 = bitcast %"class.v8::internal::RegExpTree"** %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 8, !alias.scope !48
  %108 = bitcast %"class.v8::internal::RegExpTree"** %102 to <2 x i64>*
  store <2 x i64> %104, <2 x i64>* %108, align 8, !alias.scope !51, !noalias !48
  %109 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %102, i64 2
  %110 = bitcast %"class.v8::internal::RegExpTree"** %109 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %110, align 8, !alias.scope !51, !noalias !48
  %111 = or i64 %88, 8
  %112 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %14, i64 %111
  %113 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %6, i64 %111
  %114 = bitcast %"class.v8::internal::RegExpTree"** %112 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 8, !alias.scope !48
  %116 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %112, i64 2
  %117 = bitcast %"class.v8::internal::RegExpTree"** %116 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 8, !alias.scope !48
  %119 = bitcast %"class.v8::internal::RegExpTree"** %113 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %119, align 8, !alias.scope !51, !noalias !48
  %120 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %113, i64 2
  %121 = bitcast %"class.v8::internal::RegExpTree"** %120 to <2 x i64>*
  store <2 x i64> %118, <2 x i64>* %121, align 8, !alias.scope !51, !noalias !48
  %122 = or i64 %88, 12
  %123 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %14, i64 %122
  %124 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %6, i64 %122
  %125 = bitcast %"class.v8::internal::RegExpTree"** %123 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 8, !alias.scope !48
  %127 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %123, i64 2
  %128 = bitcast %"class.v8::internal::RegExpTree"** %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !48
  %130 = bitcast %"class.v8::internal::RegExpTree"** %124 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %130, align 8, !alias.scope !51, !noalias !48
  %131 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %124, i64 2
  %132 = bitcast %"class.v8::internal::RegExpTree"** %131 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %132, align 8, !alias.scope !51, !noalias !48
  %133 = add i64 %88, 16
  %134 = add i64 %89, -4
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %136, label %87, !llvm.loop !53

136:                                              ; preds = %87, %76
  %137 = phi i64 [ 0, %76 ], [ %133, %87 ]
  %138 = icmp eq i64 %83, 0
  br i1 %138, label %155, label %139

139:                                              ; preds = %136, %139
  %140 = phi i64 [ %152, %139 ], [ %137, %136 ]
  %141 = phi i64 [ %153, %139 ], [ %83, %136 ]
  %142 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %14, i64 %140
  %143 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %6, i64 %140
  %144 = bitcast %"class.v8::internal::RegExpTree"** %142 to <2 x i64>*
  %145 = load <2 x i64>, <2 x i64>* %144, align 8, !alias.scope !48
  %146 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %142, i64 2
  %147 = bitcast %"class.v8::internal::RegExpTree"** %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 8, !alias.scope !48
  %149 = bitcast %"class.v8::internal::RegExpTree"** %143 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %149, align 8, !alias.scope !51, !noalias !48
  %150 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %143, i64 2
  %151 = bitcast %"class.v8::internal::RegExpTree"** %150 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %151, align 8, !alias.scope !51, !noalias !48
  %152 = add i64 %140, 4
  %153 = add i64 %141, -1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %139, !llvm.loop !54

155:                                              ; preds = %139, %136
  %156 = icmp eq i64 %36, %77
  br i1 %156, label %285, label %38

157:                                              ; preds = %25
  %158 = icmp eq %"class.v8::internal::RegExpTree"** %15, %16
  br i1 %158, label %957, label %159

159:                                              ; preds = %157
  %160 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %16, i64 -1
  %161 = ptrtoint %"class.v8::internal::RegExpTree"** %160 to i64
  %162 = sub i64 %161, %26
  %163 = lshr i64 %162, 3
  %164 = add nuw nsw i64 %163, 1
  %165 = icmp ult i64 %164, 4
  br i1 %165, label %166, label %193

166:                                              ; preds = %283, %193, %159
  %167 = phi %"class.v8::internal::RegExpTree"** [ %15, %193 ], [ %15, %159 ], [ %206, %283 ]
  %168 = phi %"class.v8::internal::RegExpTree"** [ %6, %193 ], [ %6, %159 ], [ %207, %283 ]
  %169 = ptrtoint %"class.v8::internal::RegExpTree"** %167 to i64
  %170 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %16, i64 -1
  %171 = ptrtoint %"class.v8::internal::RegExpTree"** %170 to i64
  %172 = sub i64 %171, %169
  %173 = lshr i64 %172, 3
  %174 = add nuw nsw i64 %173, 1
  %175 = and i64 %174, 7
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %188, label %177

177:                                              ; preds = %166, %177
  %178 = phi %"class.v8::internal::RegExpTree"** [ %184, %177 ], [ %167, %166 ]
  %179 = phi %"class.v8::internal::RegExpTree"** [ %185, %177 ], [ %168, %166 ]
  %180 = phi i64 [ %186, %177 ], [ %175, %166 ]
  %181 = bitcast %"class.v8::internal::RegExpTree"** %178 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = bitcast %"class.v8::internal::RegExpTree"** %179 to i64*
  store i64 %182, i64* %183, align 8
  %184 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %178, i64 1
  %185 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %179, i64 1
  %186 = add i64 %180, -1
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %188, label %177, !llvm.loop !55

188:                                              ; preds = %177, %166
  %189 = phi %"class.v8::internal::RegExpTree"** [ undef, %166 ], [ %185, %177 ]
  %190 = phi %"class.v8::internal::RegExpTree"** [ %167, %166 ], [ %184, %177 ]
  %191 = phi %"class.v8::internal::RegExpTree"** [ %168, %166 ], [ %185, %177 ]
  %192 = icmp ult i64 %172, 56
  br i1 %192, label %364, label %553

193:                                              ; preds = %159
  %194 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %16, i64 -1
  %195 = ptrtoint %"class.v8::internal::RegExpTree"** %194 to i64
  %196 = sub i64 %195, %26
  %197 = lshr i64 %196, 3
  %198 = add nuw nsw i64 %197, 1
  %199 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %6, i64 %198
  %200 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 %198
  %201 = icmp ugt %"class.v8::internal::RegExpTree"** %200, %6
  %202 = icmp ult %"class.v8::internal::RegExpTree"** %15, %199
  %203 = and i1 %201, %202
  br i1 %203, label %166, label %204

204:                                              ; preds = %193
  %205 = and i64 %164, 4611686018427387900
  %206 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 %205
  %207 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %6, i64 %205
  %208 = add nsw i64 %205, -4
  %209 = lshr exact i64 %208, 2
  %210 = add nuw nsw i64 %209, 1
  %211 = and i64 %210, 3
  %212 = icmp ult i64 %208, 12
  br i1 %212, label %264, label %213

213:                                              ; preds = %204
  %214 = sub nsw i64 %210, %211
  br label %215

215:                                              ; preds = %215, %213
  %216 = phi i64 [ 0, %213 ], [ %261, %215 ]
  %217 = phi i64 [ %214, %213 ], [ %262, %215 ]
  %218 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 %216
  %219 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %6, i64 %216
  %220 = bitcast %"class.v8::internal::RegExpTree"** %218 to <2 x i64>*
  %221 = load <2 x i64>, <2 x i64>* %220, align 8, !alias.scope !56
  %222 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %218, i64 2
  %223 = bitcast %"class.v8::internal::RegExpTree"** %222 to <2 x i64>*
  %224 = load <2 x i64>, <2 x i64>* %223, align 8, !alias.scope !56
  %225 = bitcast %"class.v8::internal::RegExpTree"** %219 to <2 x i64>*
  store <2 x i64> %221, <2 x i64>* %225, align 8, !alias.scope !59, !noalias !56
  %226 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %219, i64 2
  %227 = bitcast %"class.v8::internal::RegExpTree"** %226 to <2 x i64>*
  store <2 x i64> %224, <2 x i64>* %227, align 8, !alias.scope !59, !noalias !56
  %228 = or i64 %216, 4
  %229 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 %228
  %230 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %6, i64 %228
  %231 = bitcast %"class.v8::internal::RegExpTree"** %229 to <2 x i64>*
  %232 = load <2 x i64>, <2 x i64>* %231, align 8, !alias.scope !56
  %233 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %229, i64 2
  %234 = bitcast %"class.v8::internal::RegExpTree"** %233 to <2 x i64>*
  %235 = load <2 x i64>, <2 x i64>* %234, align 8, !alias.scope !56
  %236 = bitcast %"class.v8::internal::RegExpTree"** %230 to <2 x i64>*
  store <2 x i64> %232, <2 x i64>* %236, align 8, !alias.scope !59, !noalias !56
  %237 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %230, i64 2
  %238 = bitcast %"class.v8::internal::RegExpTree"** %237 to <2 x i64>*
  store <2 x i64> %235, <2 x i64>* %238, align 8, !alias.scope !59, !noalias !56
  %239 = or i64 %216, 8
  %240 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 %239
  %241 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %6, i64 %239
  %242 = bitcast %"class.v8::internal::RegExpTree"** %240 to <2 x i64>*
  %243 = load <2 x i64>, <2 x i64>* %242, align 8, !alias.scope !56
  %244 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %240, i64 2
  %245 = bitcast %"class.v8::internal::RegExpTree"** %244 to <2 x i64>*
  %246 = load <2 x i64>, <2 x i64>* %245, align 8, !alias.scope !56
  %247 = bitcast %"class.v8::internal::RegExpTree"** %241 to <2 x i64>*
  store <2 x i64> %243, <2 x i64>* %247, align 8, !alias.scope !59, !noalias !56
  %248 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %241, i64 2
  %249 = bitcast %"class.v8::internal::RegExpTree"** %248 to <2 x i64>*
  store <2 x i64> %246, <2 x i64>* %249, align 8, !alias.scope !59, !noalias !56
  %250 = or i64 %216, 12
  %251 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 %250
  %252 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %6, i64 %250
  %253 = bitcast %"class.v8::internal::RegExpTree"** %251 to <2 x i64>*
  %254 = load <2 x i64>, <2 x i64>* %253, align 8, !alias.scope !56
  %255 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %251, i64 2
  %256 = bitcast %"class.v8::internal::RegExpTree"** %255 to <2 x i64>*
  %257 = load <2 x i64>, <2 x i64>* %256, align 8, !alias.scope !56
  %258 = bitcast %"class.v8::internal::RegExpTree"** %252 to <2 x i64>*
  store <2 x i64> %254, <2 x i64>* %258, align 8, !alias.scope !59, !noalias !56
  %259 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %252, i64 2
  %260 = bitcast %"class.v8::internal::RegExpTree"** %259 to <2 x i64>*
  store <2 x i64> %257, <2 x i64>* %260, align 8, !alias.scope !59, !noalias !56
  %261 = add i64 %216, 16
  %262 = add i64 %217, -4
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %215, !llvm.loop !61

264:                                              ; preds = %215, %204
  %265 = phi i64 [ 0, %204 ], [ %261, %215 ]
  %266 = icmp eq i64 %211, 0
  br i1 %266, label %283, label %267

267:                                              ; preds = %264, %267
  %268 = phi i64 [ %280, %267 ], [ %265, %264 ]
  %269 = phi i64 [ %281, %267 ], [ %211, %264 ]
  %270 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 %268
  %271 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %6, i64 %268
  %272 = bitcast %"class.v8::internal::RegExpTree"** %270 to <2 x i64>*
  %273 = load <2 x i64>, <2 x i64>* %272, align 8, !alias.scope !56
  %274 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %270, i64 2
  %275 = bitcast %"class.v8::internal::RegExpTree"** %274 to <2 x i64>*
  %276 = load <2 x i64>, <2 x i64>* %275, align 8, !alias.scope !56
  %277 = bitcast %"class.v8::internal::RegExpTree"** %271 to <2 x i64>*
  store <2 x i64> %273, <2 x i64>* %277, align 8, !alias.scope !59, !noalias !56
  %278 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %271, i64 2
  %279 = bitcast %"class.v8::internal::RegExpTree"** %278 to <2 x i64>*
  store <2 x i64> %276, <2 x i64>* %279, align 8, !alias.scope !59, !noalias !56
  %280 = add i64 %268, 4
  %281 = add i64 %269, -1
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %283, label %267, !llvm.loop !62

283:                                              ; preds = %267, %264
  %284 = icmp eq i64 %164, %205
  br i1 %284, label %364, label %166

285:                                              ; preds = %60, %320, %155
  %286 = phi %"class.v8::internal::RegExpTree"** [ %79, %155 ], [ %61, %60 ], [ %362, %320 ]
  %287 = icmp eq %"class.v8::internal::RegExpTree"** %286, %6
  br i1 %287, label %957, label %288

288:                                              ; preds = %285, %315
  %289 = phi %"class.v8::internal::RegExpTree"** [ %317, %315 ], [ %6, %285 ]
  %290 = phi %"class.v8::internal::RegExpTree"** [ %318, %315 ], [ %14, %285 ]
  %291 = phi %"class.v8::internal::RegExpTree"** [ %316, %315 ], [ %15, %285 ]
  %292 = icmp eq %"class.v8::internal::RegExpTree"** %291, %16
  br i1 %292, label %293, label %301

293:                                              ; preds = %288
  %294 = ptrtoint %"class.v8::internal::RegExpTree"** %286 to i64
  %295 = ptrtoint %"class.v8::internal::RegExpTree"** %289 to i64
  %296 = sub i64 %294, %295
  %297 = icmp eq i64 %296, 0
  br i1 %297, label %957, label %298

298:                                              ; preds = %293
  %299 = bitcast %"class.v8::internal::RegExpTree"** %290 to i8*
  %300 = bitcast %"class.v8::internal::RegExpTree"** %289 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %299, i8* align 8 %300, i64 %296, i1 false) #12
  br label %957

301:                                              ; preds = %288
  %302 = load i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)*, i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)** %12, align 8
  %303 = tail call i32 %302(%"class.v8::internal::RegExpTree"** %291, %"class.v8::internal::RegExpTree"** %289) #12
  %304 = icmp slt i32 %303, 0
  br i1 %304, label %305, label %310

305:                                              ; preds = %301
  %306 = bitcast %"class.v8::internal::RegExpTree"** %291 to i64*
  %307 = load i64, i64* %306, align 8
  %308 = bitcast %"class.v8::internal::RegExpTree"** %290 to i64*
  store i64 %307, i64* %308, align 8
  %309 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %291, i64 1
  br label %315

310:                                              ; preds = %301
  %311 = bitcast %"class.v8::internal::RegExpTree"** %289 to i64*
  %312 = load i64, i64* %311, align 8
  %313 = bitcast %"class.v8::internal::RegExpTree"** %290 to i64*
  store i64 %312, i64* %313, align 8
  %314 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %289, i64 1
  br label %315

315:                                              ; preds = %310, %305
  %316 = phi %"class.v8::internal::RegExpTree"** [ %309, %305 ], [ %291, %310 ]
  %317 = phi %"class.v8::internal::RegExpTree"** [ %289, %305 ], [ %314, %310 ]
  %318 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %290, i64 1
  %319 = icmp eq %"class.v8::internal::RegExpTree"** %317, %286
  br i1 %319, label %957, label %288

320:                                              ; preds = %60, %320
  %321 = phi %"class.v8::internal::RegExpTree"** [ %361, %320 ], [ %62, %60 ]
  %322 = phi %"class.v8::internal::RegExpTree"** [ %362, %320 ], [ %63, %60 ]
  %323 = bitcast %"class.v8::internal::RegExpTree"** %321 to i64*
  %324 = load i64, i64* %323, align 8
  %325 = bitcast %"class.v8::internal::RegExpTree"** %322 to i64*
  store i64 %324, i64* %325, align 8
  %326 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %321, i64 1
  %327 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %322, i64 1
  %328 = bitcast %"class.v8::internal::RegExpTree"** %326 to i64*
  %329 = load i64, i64* %328, align 8
  %330 = bitcast %"class.v8::internal::RegExpTree"** %327 to i64*
  store i64 %329, i64* %330, align 8
  %331 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %321, i64 2
  %332 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %322, i64 2
  %333 = bitcast %"class.v8::internal::RegExpTree"** %331 to i64*
  %334 = load i64, i64* %333, align 8
  %335 = bitcast %"class.v8::internal::RegExpTree"** %332 to i64*
  store i64 %334, i64* %335, align 8
  %336 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %321, i64 3
  %337 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %322, i64 3
  %338 = bitcast %"class.v8::internal::RegExpTree"** %336 to i64*
  %339 = load i64, i64* %338, align 8
  %340 = bitcast %"class.v8::internal::RegExpTree"** %337 to i64*
  store i64 %339, i64* %340, align 8
  %341 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %321, i64 4
  %342 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %322, i64 4
  %343 = bitcast %"class.v8::internal::RegExpTree"** %341 to i64*
  %344 = load i64, i64* %343, align 8
  %345 = bitcast %"class.v8::internal::RegExpTree"** %342 to i64*
  store i64 %344, i64* %345, align 8
  %346 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %321, i64 5
  %347 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %322, i64 5
  %348 = bitcast %"class.v8::internal::RegExpTree"** %346 to i64*
  %349 = load i64, i64* %348, align 8
  %350 = bitcast %"class.v8::internal::RegExpTree"** %347 to i64*
  store i64 %349, i64* %350, align 8
  %351 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %321, i64 6
  %352 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %322, i64 6
  %353 = bitcast %"class.v8::internal::RegExpTree"** %351 to i64*
  %354 = load i64, i64* %353, align 8
  %355 = bitcast %"class.v8::internal::RegExpTree"** %352 to i64*
  store i64 %354, i64* %355, align 8
  %356 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %321, i64 7
  %357 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %322, i64 7
  %358 = bitcast %"class.v8::internal::RegExpTree"** %356 to i64*
  %359 = load i64, i64* %358, align 8
  %360 = bitcast %"class.v8::internal::RegExpTree"** %357 to i64*
  store i64 %359, i64* %360, align 8
  %361 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %321, i64 8
  %362 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %322, i64 8
  %363 = icmp eq %"class.v8::internal::RegExpTree"** %361, %15
  br i1 %363, label %285, label %320, !llvm.loop !63

364:                                              ; preds = %188, %553, %283
  %365 = phi %"class.v8::internal::RegExpTree"** [ %207, %283 ], [ %189, %188 ], [ %595, %553 ]
  %366 = icmp eq %"class.v8::internal::RegExpTree"** %365, %6
  br i1 %366, label %957, label %367

367:                                              ; preds = %364, %538
  %368 = phi %"class.v8::internal::RegExpTree"** [ %551, %538 ], [ %16, %364 ]
  %369 = phi %"class.v8::internal::RegExpTree"** [ %546, %538 ], [ %365, %364 ]
  %370 = phi %"class.v8::internal::RegExpTree"** [ %545, %538 ], [ %15, %364 ]
  %371 = icmp eq %"class.v8::internal::RegExpTree"** %370, %14
  br i1 %371, label %372, label %538

372:                                              ; preds = %367
  %373 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %369, i64 -1
  %374 = ptrtoint %"class.v8::internal::RegExpTree"** %373 to i64
  %375 = sub i64 %374, %9
  %376 = lshr i64 %375, 3
  %377 = add nuw nsw i64 %376, 1
  %378 = icmp ult i64 %377, 4
  br i1 %378, label %469, label %379

379:                                              ; preds = %372
  %380 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %369, i64 -1
  %381 = ptrtoint %"class.v8::internal::RegExpTree"** %380 to i64
  %382 = sub i64 %381, %9
  %383 = lshr i64 %382, 3
  %384 = xor i64 %383, -1
  %385 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %368, i64 %384
  %386 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %369, i64 %384
  %387 = icmp ult %"class.v8::internal::RegExpTree"** %385, %369
  %388 = icmp ult %"class.v8::internal::RegExpTree"** %386, %368
  %389 = and i1 %387, %388
  br i1 %389, label %469, label %390

390:                                              ; preds = %379
  %391 = and i64 %377, 4611686018427387900
  %392 = sub nsw i64 0, %391
  %393 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %369, i64 %392
  %394 = sub nsw i64 0, %391
  %395 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %368, i64 %394
  %396 = add nsw i64 %391, -4
  %397 = lshr exact i64 %396, 2
  %398 = add nuw nsw i64 %397, 1
  %399 = and i64 %398, 1
  %400 = icmp eq i64 %396, 0
  br i1 %400, label %447, label %401

401:                                              ; preds = %390
  %402 = sub nuw nsw i64 %398, %399
  %403 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %369, i64 -1
  %404 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %368, i64 -1
  %405 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %369, i64 -1
  %406 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %368, i64 -1
  br label %407

407:                                              ; preds = %407, %401
  %408 = phi i64 [ 0, %401 ], [ %442, %407 ]
  %409 = phi i64 [ %402, %401 ], [ %443, %407 ]
  %410 = sub i64 0, %408
  %411 = sub i64 0, %408
  %412 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %403, i64 %410
  %413 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %412, i64 -1
  %414 = bitcast %"class.v8::internal::RegExpTree"** %413 to <2 x i64>*
  %415 = load <2 x i64>, <2 x i64>* %414, align 8, !alias.scope !64
  %416 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %412, i64 -2
  %417 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %416, i64 -1
  %418 = bitcast %"class.v8::internal::RegExpTree"** %417 to <2 x i64>*
  %419 = load <2 x i64>, <2 x i64>* %418, align 8, !alias.scope !64
  %420 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %404, i64 %411
  %421 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %420, i64 -1
  %422 = bitcast %"class.v8::internal::RegExpTree"** %421 to <2 x i64>*
  store <2 x i64> %415, <2 x i64>* %422, align 8, !alias.scope !67, !noalias !64
  %423 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %420, i64 -2
  %424 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %423, i64 -1
  %425 = bitcast %"class.v8::internal::RegExpTree"** %424 to <2 x i64>*
  store <2 x i64> %419, <2 x i64>* %425, align 8, !alias.scope !67, !noalias !64
  %426 = sub nuw nsw i64 -4, %408
  %427 = sub nuw nsw i64 -4, %408
  %428 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %405, i64 %426
  %429 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %428, i64 -1
  %430 = bitcast %"class.v8::internal::RegExpTree"** %429 to <2 x i64>*
  %431 = load <2 x i64>, <2 x i64>* %430, align 8, !alias.scope !64
  %432 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %428, i64 -2
  %433 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %432, i64 -1
  %434 = bitcast %"class.v8::internal::RegExpTree"** %433 to <2 x i64>*
  %435 = load <2 x i64>, <2 x i64>* %434, align 8, !alias.scope !64
  %436 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %406, i64 %427
  %437 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %436, i64 -1
  %438 = bitcast %"class.v8::internal::RegExpTree"** %437 to <2 x i64>*
  store <2 x i64> %431, <2 x i64>* %438, align 8, !alias.scope !67, !noalias !64
  %439 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %436, i64 -2
  %440 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %439, i64 -1
  %441 = bitcast %"class.v8::internal::RegExpTree"** %440 to <2 x i64>*
  store <2 x i64> %435, <2 x i64>* %441, align 8, !alias.scope !67, !noalias !64
  %442 = add i64 %408, 8
  %443 = add i64 %409, -2
  %444 = icmp eq i64 %443, 0
  br i1 %444, label %445, label %407, !llvm.loop !69

445:                                              ; preds = %407
  %446 = sub nuw nsw i64 -8, %408
  br label %447

447:                                              ; preds = %445, %390
  %448 = phi i64 [ 0, %390 ], [ %446, %445 ]
  %449 = icmp eq i64 %399, 0
  br i1 %449, label %467, label %450

450:                                              ; preds = %447
  %451 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %369, i64 -1
  %452 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %368, i64 -1
  %453 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %451, i64 %448
  %454 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %453, i64 -1
  %455 = bitcast %"class.v8::internal::RegExpTree"** %454 to <2 x i64>*
  %456 = load <2 x i64>, <2 x i64>* %455, align 8, !alias.scope !64
  %457 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %453, i64 -2
  %458 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %457, i64 -1
  %459 = bitcast %"class.v8::internal::RegExpTree"** %458 to <2 x i64>*
  %460 = load <2 x i64>, <2 x i64>* %459, align 8, !alias.scope !64
  %461 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %452, i64 %448
  %462 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %461, i64 -1
  %463 = bitcast %"class.v8::internal::RegExpTree"** %462 to <2 x i64>*
  store <2 x i64> %456, <2 x i64>* %463, align 8, !alias.scope !67, !noalias !64
  %464 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %461, i64 -2
  %465 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %464, i64 -1
  %466 = bitcast %"class.v8::internal::RegExpTree"** %465 to <2 x i64>*
  store <2 x i64> %460, <2 x i64>* %466, align 8, !alias.scope !67, !noalias !64
  br label %467

467:                                              ; preds = %447, %450
  %468 = icmp eq i64 %377, %391
  br i1 %468, label %957, label %469

469:                                              ; preds = %467, %379, %372
  %470 = phi %"class.v8::internal::RegExpTree"** [ %369, %379 ], [ %369, %372 ], [ %393, %467 ]
  %471 = phi %"class.v8::internal::RegExpTree"** [ %368, %379 ], [ %368, %372 ], [ %395, %467 ]
  %472 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %470, i64 -1
  %473 = ptrtoint %"class.v8::internal::RegExpTree"** %472 to i64
  %474 = sub i64 %473, %9
  %475 = lshr i64 %474, 3
  %476 = add nuw nsw i64 %475, 1
  %477 = and i64 %476, 7
  %478 = icmp eq i64 %477, 0
  br i1 %478, label %490, label %479

479:                                              ; preds = %469, %479
  %480 = phi %"class.v8::internal::RegExpTree"** [ %483, %479 ], [ %470, %469 ]
  %481 = phi %"class.v8::internal::RegExpTree"** [ %486, %479 ], [ %471, %469 ]
  %482 = phi i64 [ %488, %479 ], [ %477, %469 ]
  %483 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %480, i64 -1
  %484 = bitcast %"class.v8::internal::RegExpTree"** %483 to i64*
  %485 = load i64, i64* %484, align 8
  %486 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %481, i64 -1
  %487 = bitcast %"class.v8::internal::RegExpTree"** %486 to i64*
  store i64 %485, i64* %487, align 8
  %488 = add i64 %482, -1
  %489 = icmp eq i64 %488, 0
  br i1 %489, label %490, label %479, !llvm.loop !70

490:                                              ; preds = %479, %469
  %491 = phi %"class.v8::internal::RegExpTree"** [ %470, %469 ], [ %483, %479 ]
  %492 = phi %"class.v8::internal::RegExpTree"** [ %471, %469 ], [ %486, %479 ]
  %493 = icmp ult i64 %474, 56
  br i1 %493, label %957, label %494

494:                                              ; preds = %490, %494
  %495 = phi %"class.v8::internal::RegExpTree"** [ %532, %494 ], [ %491, %490 ]
  %496 = phi %"class.v8::internal::RegExpTree"** [ %535, %494 ], [ %492, %490 ]
  %497 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %495, i64 -1
  %498 = bitcast %"class.v8::internal::RegExpTree"** %497 to i64*
  %499 = load i64, i64* %498, align 8
  %500 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %496, i64 -1
  %501 = bitcast %"class.v8::internal::RegExpTree"** %500 to i64*
  store i64 %499, i64* %501, align 8
  %502 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %495, i64 -2
  %503 = bitcast %"class.v8::internal::RegExpTree"** %502 to i64*
  %504 = load i64, i64* %503, align 8
  %505 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %496, i64 -2
  %506 = bitcast %"class.v8::internal::RegExpTree"** %505 to i64*
  store i64 %504, i64* %506, align 8
  %507 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %495, i64 -3
  %508 = bitcast %"class.v8::internal::RegExpTree"** %507 to i64*
  %509 = load i64, i64* %508, align 8
  %510 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %496, i64 -3
  %511 = bitcast %"class.v8::internal::RegExpTree"** %510 to i64*
  store i64 %509, i64* %511, align 8
  %512 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %495, i64 -4
  %513 = bitcast %"class.v8::internal::RegExpTree"** %512 to i64*
  %514 = load i64, i64* %513, align 8
  %515 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %496, i64 -4
  %516 = bitcast %"class.v8::internal::RegExpTree"** %515 to i64*
  store i64 %514, i64* %516, align 8
  %517 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %495, i64 -5
  %518 = bitcast %"class.v8::internal::RegExpTree"** %517 to i64*
  %519 = load i64, i64* %518, align 8
  %520 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %496, i64 -5
  %521 = bitcast %"class.v8::internal::RegExpTree"** %520 to i64*
  store i64 %519, i64* %521, align 8
  %522 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %495, i64 -6
  %523 = bitcast %"class.v8::internal::RegExpTree"** %522 to i64*
  %524 = load i64, i64* %523, align 8
  %525 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %496, i64 -6
  %526 = bitcast %"class.v8::internal::RegExpTree"** %525 to i64*
  store i64 %524, i64* %526, align 8
  %527 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %495, i64 -7
  %528 = bitcast %"class.v8::internal::RegExpTree"** %527 to i64*
  %529 = load i64, i64* %528, align 8
  %530 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %496, i64 -7
  %531 = bitcast %"class.v8::internal::RegExpTree"** %530 to i64*
  store i64 %529, i64* %531, align 8
  %532 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %495, i64 -8
  %533 = bitcast %"class.v8::internal::RegExpTree"** %532 to i64*
  %534 = load i64, i64* %533, align 8
  %535 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %496, i64 -8
  %536 = bitcast %"class.v8::internal::RegExpTree"** %535 to i64*
  store i64 %534, i64* %536, align 8
  %537 = icmp eq %"class.v8::internal::RegExpTree"** %532, %6
  br i1 %537, label %957, label %494, !llvm.loop !71

538:                                              ; preds = %367
  %539 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %370, i64 -1
  %540 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %369, i64 -1
  %541 = load i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)*, i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)** %12, align 8
  %542 = tail call i32 %541(%"class.v8::internal::RegExpTree"** %540, %"class.v8::internal::RegExpTree"** %539) #12
  %543 = icmp slt i32 %542, 0
  %544 = select i1 %543, %"class.v8::internal::RegExpTree"** %539, %"class.v8::internal::RegExpTree"** %540
  %545 = select i1 %543, %"class.v8::internal::RegExpTree"** %539, %"class.v8::internal::RegExpTree"** %370
  %546 = select i1 %543, %"class.v8::internal::RegExpTree"** %369, %"class.v8::internal::RegExpTree"** %540
  %547 = bitcast %"class.v8::internal::RegExpTree"** %544 to i64*
  %548 = load i64, i64* %547, align 8
  %549 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %368, i64 -1
  %550 = bitcast %"class.v8::internal::RegExpTree"** %549 to i64*
  store i64 %548, i64* %550, align 8
  %551 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %368, i64 -1
  %552 = icmp eq %"class.v8::internal::RegExpTree"** %546, %6
  br i1 %552, label %957, label %367

553:                                              ; preds = %188, %553
  %554 = phi %"class.v8::internal::RegExpTree"** [ %594, %553 ], [ %190, %188 ]
  %555 = phi %"class.v8::internal::RegExpTree"** [ %595, %553 ], [ %191, %188 ]
  %556 = bitcast %"class.v8::internal::RegExpTree"** %554 to i64*
  %557 = load i64, i64* %556, align 8
  %558 = bitcast %"class.v8::internal::RegExpTree"** %555 to i64*
  store i64 %557, i64* %558, align 8
  %559 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %554, i64 1
  %560 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %555, i64 1
  %561 = bitcast %"class.v8::internal::RegExpTree"** %559 to i64*
  %562 = load i64, i64* %561, align 8
  %563 = bitcast %"class.v8::internal::RegExpTree"** %560 to i64*
  store i64 %562, i64* %563, align 8
  %564 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %554, i64 2
  %565 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %555, i64 2
  %566 = bitcast %"class.v8::internal::RegExpTree"** %564 to i64*
  %567 = load i64, i64* %566, align 8
  %568 = bitcast %"class.v8::internal::RegExpTree"** %565 to i64*
  store i64 %567, i64* %568, align 8
  %569 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %554, i64 3
  %570 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %555, i64 3
  %571 = bitcast %"class.v8::internal::RegExpTree"** %569 to i64*
  %572 = load i64, i64* %571, align 8
  %573 = bitcast %"class.v8::internal::RegExpTree"** %570 to i64*
  store i64 %572, i64* %573, align 8
  %574 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %554, i64 4
  %575 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %555, i64 4
  %576 = bitcast %"class.v8::internal::RegExpTree"** %574 to i64*
  %577 = load i64, i64* %576, align 8
  %578 = bitcast %"class.v8::internal::RegExpTree"** %575 to i64*
  store i64 %577, i64* %578, align 8
  %579 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %554, i64 5
  %580 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %555, i64 5
  %581 = bitcast %"class.v8::internal::RegExpTree"** %579 to i64*
  %582 = load i64, i64* %581, align 8
  %583 = bitcast %"class.v8::internal::RegExpTree"** %580 to i64*
  store i64 %582, i64* %583, align 8
  %584 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %554, i64 6
  %585 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %555, i64 6
  %586 = bitcast %"class.v8::internal::RegExpTree"** %584 to i64*
  %587 = load i64, i64* %586, align 8
  %588 = bitcast %"class.v8::internal::RegExpTree"** %585 to i64*
  store i64 %587, i64* %588, align 8
  %589 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %554, i64 7
  %590 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %555, i64 7
  %591 = bitcast %"class.v8::internal::RegExpTree"** %589 to i64*
  %592 = load i64, i64* %591, align 8
  %593 = bitcast %"class.v8::internal::RegExpTree"** %590 to i64*
  store i64 %592, i64* %593, align 8
  %594 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %554, i64 8
  %595 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %555, i64 8
  %596 = icmp eq %"class.v8::internal::RegExpTree"** %594, %16
  br i1 %596, label %364, label %553, !llvm.loop !72

597:                                              ; preds = %23, %603
  %598 = phi %"class.v8::internal::RegExpTree"** [ %604, %603 ], [ %14, %23 ]
  %599 = phi i64 [ %605, %603 ], [ %17, %23 ]
  %600 = load i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)*, i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)** %12, align 8
  %601 = tail call i32 %600(%"class.v8::internal::RegExpTree"** %15, %"class.v8::internal::RegExpTree"** %598) #12
  %602 = icmp slt i32 %601, 0
  br i1 %602, label %607, label %603

603:                                              ; preds = %597
  %604 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %598, i64 1
  %605 = add nsw i64 %599, -1
  %606 = icmp eq i64 %605, 0
  br i1 %606, label %957, label %597

607:                                              ; preds = %597
  %608 = icmp slt i64 %599, %18
  br i1 %608, label %609, label %639

609:                                              ; preds = %607
  %610 = sdiv i64 %18, 2
  %611 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 %610
  %612 = ptrtoint %"class.v8::internal::RegExpTree"** %15 to i64
  %613 = ptrtoint %"class.v8::internal::RegExpTree"** %598 to i64
  %614 = sub i64 %612, %613
  %615 = icmp eq i64 %614, 0
  br i1 %615, label %634, label %616

616:                                              ; preds = %609
  %617 = ashr exact i64 %614, 3
  br label %618

618:                                              ; preds = %618, %616
  %619 = phi %"class.v8::internal::RegExpTree"** [ %598, %616 ], [ %630, %618 ]
  %620 = phi i64 [ %617, %616 ], [ %629, %618 ]
  %621 = lshr i64 %620, 1
  %622 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %619, i64 %621
  %623 = load i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)*, i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)** %12, align 8
  %624 = tail call i32 %623(%"class.v8::internal::RegExpTree"** %611, %"class.v8::internal::RegExpTree"** %622) #12
  %625 = icmp slt i32 %624, 0
  %626 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %622, i64 1
  %627 = xor i64 %621, -1
  %628 = add i64 %620, %627
  %629 = select i1 %625, i64 %621, i64 %628
  %630 = select i1 %625, %"class.v8::internal::RegExpTree"** %619, %"class.v8::internal::RegExpTree"** %626
  %631 = icmp eq i64 %629, 0
  br i1 %631, label %632, label %618

632:                                              ; preds = %618
  %633 = ptrtoint %"class.v8::internal::RegExpTree"** %630 to i64
  br label %634

634:                                              ; preds = %632, %609
  %635 = phi i64 [ %633, %632 ], [ %613, %609 ]
  %636 = phi %"class.v8::internal::RegExpTree"** [ %630, %632 ], [ %598, %609 ]
  %637 = sub i64 %635, %613
  %638 = ashr exact i64 %637, 3
  br label %676

639:                                              ; preds = %607
  %640 = icmp eq i64 %599, 1
  br i1 %640, label %641, label %646

641:                                              ; preds = %639
  %642 = bitcast %"class.v8::internal::RegExpTree"** %598 to i64*
  %643 = load i64, i64* %642, align 8
  %644 = bitcast %"class.v8::internal::RegExpTree"** %15 to i64*
  %645 = load i64, i64* %644, align 8
  store i64 %645, i64* %642, align 8
  store i64 %643, i64* %644, align 8
  br label %957

646:                                              ; preds = %639
  %647 = sdiv i64 %599, 2
  %648 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %598, i64 %647
  %649 = ptrtoint %"class.v8::internal::RegExpTree"** %16 to i64
  %650 = ptrtoint %"class.v8::internal::RegExpTree"** %15 to i64
  %651 = sub i64 %649, %650
  %652 = icmp eq i64 %651, 0
  br i1 %652, label %671, label %653

653:                                              ; preds = %646
  %654 = ashr exact i64 %651, 3
  br label %655

655:                                              ; preds = %655, %653
  %656 = phi %"class.v8::internal::RegExpTree"** [ %15, %653 ], [ %667, %655 ]
  %657 = phi i64 [ %654, %653 ], [ %666, %655 ]
  %658 = lshr i64 %657, 1
  %659 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %656, i64 %658
  %660 = load i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)*, i32 (%"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"**)** %12, align 8
  %661 = tail call i32 %660(%"class.v8::internal::RegExpTree"** %659, %"class.v8::internal::RegExpTree"** %648) #12
  %662 = icmp slt i32 %661, 0
  %663 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %659, i64 1
  %664 = xor i64 %658, -1
  %665 = add i64 %657, %664
  %666 = select i1 %662, i64 %665, i64 %658
  %667 = select i1 %662, %"class.v8::internal::RegExpTree"** %663, %"class.v8::internal::RegExpTree"** %656
  %668 = icmp eq i64 %666, 0
  br i1 %668, label %669, label %655

669:                                              ; preds = %655
  %670 = ptrtoint %"class.v8::internal::RegExpTree"** %667 to i64
  br label %671

671:                                              ; preds = %669, %646
  %672 = phi i64 [ %670, %669 ], [ %650, %646 ]
  %673 = phi %"class.v8::internal::RegExpTree"** [ %667, %669 ], [ %15, %646 ]
  %674 = sub i64 %672, %650
  %675 = ashr exact i64 %674, 3
  br label %676

676:                                              ; preds = %671, %634
  %677 = phi %"class.v8::internal::RegExpTree"** [ %636, %634 ], [ %648, %671 ]
  %678 = phi %"class.v8::internal::RegExpTree"** [ %611, %634 ], [ %673, %671 ]
  %679 = phi i64 [ %638, %634 ], [ %647, %671 ]
  %680 = phi i64 [ %610, %634 ], [ %675, %671 ]
  %681 = ptrtoint %"class.v8::internal::RegExpTree"** %677 to i64
  %682 = bitcast %"class.v8::internal::RegExpTree"** %677 to i8*
  %683 = sub nsw i64 %599, %679
  %684 = sub nsw i64 %18, %680
  %685 = icmp eq %"class.v8::internal::RegExpTree"** %677, %15
  br i1 %685, label %943, label %686

686:                                              ; preds = %676
  %687 = icmp eq %"class.v8::internal::RegExpTree"** %15, %678
  br i1 %687, label %943, label %688

688:                                              ; preds = %686
  %689 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %677, i64 1
  %690 = icmp eq %"class.v8::internal::RegExpTree"** %689, %15
  br i1 %690, label %691, label %703

691:                                              ; preds = %688
  %692 = bitcast %"class.v8::internal::RegExpTree"** %677 to i64*
  %693 = load i64, i64* %692, align 8
  %694 = ptrtoint %"class.v8::internal::RegExpTree"** %678 to i64
  %695 = ptrtoint %"class.v8::internal::RegExpTree"** %15 to i64
  %696 = sub i64 %694, %695
  %697 = ashr exact i64 %696, 3
  %698 = icmp eq i64 %696, 0
  br i1 %698, label %700, label %699

699:                                              ; preds = %691
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %682, i8* align 8 %19, i64 %696, i1 false) #12
  br label %700

700:                                              ; preds = %699, %691
  %701 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %677, i64 %697
  %702 = bitcast %"class.v8::internal::RegExpTree"** %701 to i64*
  store i64 %693, i64* %702, align 8
  br label %943

703:                                              ; preds = %688
  %704 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 1
  %705 = icmp eq %"class.v8::internal::RegExpTree"** %704, %678
  br i1 %705, label %706, label %721

706:                                              ; preds = %703
  %707 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %678, i64 -1
  %708 = bitcast %"class.v8::internal::RegExpTree"** %707 to i64*
  %709 = load i64, i64* %708, align 8
  %710 = ptrtoint %"class.v8::internal::RegExpTree"** %707 to i64
  %711 = sub i64 %710, %681
  %712 = icmp eq i64 %711, 0
  br i1 %712, label %718, label %713

713:                                              ; preds = %706
  %714 = ashr exact i64 %711, 3
  %715 = sub nsw i64 0, %714
  %716 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %678, i64 %715
  %717 = bitcast %"class.v8::internal::RegExpTree"** %716 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %717, i8* align 8 %682, i64 %711, i1 false) #12
  br label %718

718:                                              ; preds = %713, %706
  %719 = phi %"class.v8::internal::RegExpTree"** [ %716, %713 ], [ %678, %706 ]
  %720 = bitcast %"class.v8::internal::RegExpTree"** %677 to i64*
  store i64 %709, i64* %720, align 8
  br label %943

721:                                              ; preds = %703
  %722 = ptrtoint %"class.v8::internal::RegExpTree"** %15 to i64
  %723 = ptrtoint %"class.v8::internal::RegExpTree"** %677 to i64
  %724 = sub i64 %722, %723
  %725 = ashr exact i64 %724, 3
  %726 = ptrtoint %"class.v8::internal::RegExpTree"** %678 to i64
  %727 = sub i64 %726, %722
  %728 = ashr exact i64 %727, 3
  %729 = icmp eq i64 %725, %728
  br i1 %729, label %730, label %876

730:                                              ; preds = %721
  %731 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 -1
  %732 = ptrtoint %"class.v8::internal::RegExpTree"** %731 to i64
  %733 = sub i64 %732, %681
  %734 = lshr i64 %733, 3
  %735 = add nuw nsw i64 %734, 1
  %736 = icmp ult i64 %735, 4
  br i1 %736, label %821, label %737

737:                                              ; preds = %730
  %738 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %677, i64 1
  %739 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 -1
  %740 = ptrtoint %"class.v8::internal::RegExpTree"** %739 to i64
  %741 = sub i64 %740, %681
  %742 = lshr i64 %741, 3
  %743 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %738, i64 %742
  %744 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 1
  %745 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %744, i64 %742
  %746 = icmp ult %"class.v8::internal::RegExpTree"** %677, %745
  %747 = icmp ult %"class.v8::internal::RegExpTree"** %15, %743
  %748 = and i1 %746, %747
  br i1 %748, label %821, label %749

749:                                              ; preds = %737
  %750 = and i64 %735, 4611686018427387900
  %751 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 %750
  %752 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %677, i64 %750
  %753 = add nsw i64 %750, -4
  %754 = lshr exact i64 %753, 2
  %755 = add nuw nsw i64 %754, 1
  %756 = and i64 %755, 1
  %757 = icmp eq i64 %753, 0
  br i1 %757, label %799, label %758

758:                                              ; preds = %749
  %759 = sub nuw nsw i64 %755, %756
  br label %760

760:                                              ; preds = %760, %758
  %761 = phi i64 [ 0, %758 ], [ %796, %760 ]
  %762 = phi i64 [ %759, %758 ], [ %797, %760 ]
  %763 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 %761
  %764 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %677, i64 %761
  %765 = bitcast %"class.v8::internal::RegExpTree"** %764 to <2 x i64>*
  %766 = load <2 x i64>, <2 x i64>* %765, align 8, !alias.scope !73, !noalias !76
  %767 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %764, i64 2
  %768 = bitcast %"class.v8::internal::RegExpTree"** %767 to <2 x i64>*
  %769 = load <2 x i64>, <2 x i64>* %768, align 8, !alias.scope !73, !noalias !76
  %770 = bitcast %"class.v8::internal::RegExpTree"** %763 to <2 x i64>*
  %771 = load <2 x i64>, <2 x i64>* %770, align 8, !alias.scope !76
  %772 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %763, i64 2
  %773 = bitcast %"class.v8::internal::RegExpTree"** %772 to <2 x i64>*
  %774 = load <2 x i64>, <2 x i64>* %773, align 8, !alias.scope !76
  %775 = bitcast %"class.v8::internal::RegExpTree"** %764 to <2 x i64>*
  store <2 x i64> %771, <2 x i64>* %775, align 8, !alias.scope !73, !noalias !76
  %776 = bitcast %"class.v8::internal::RegExpTree"** %767 to <2 x i64>*
  store <2 x i64> %774, <2 x i64>* %776, align 8, !alias.scope !73, !noalias !76
  %777 = bitcast %"class.v8::internal::RegExpTree"** %763 to <2 x i64>*
  store <2 x i64> %766, <2 x i64>* %777, align 8, !alias.scope !76
  %778 = bitcast %"class.v8::internal::RegExpTree"** %772 to <2 x i64>*
  store <2 x i64> %769, <2 x i64>* %778, align 8, !alias.scope !76
  %779 = or i64 %761, 4
  %780 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 %779
  %781 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %677, i64 %779
  %782 = bitcast %"class.v8::internal::RegExpTree"** %781 to <2 x i64>*
  %783 = load <2 x i64>, <2 x i64>* %782, align 8, !alias.scope !73, !noalias !76
  %784 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %781, i64 2
  %785 = bitcast %"class.v8::internal::RegExpTree"** %784 to <2 x i64>*
  %786 = load <2 x i64>, <2 x i64>* %785, align 8, !alias.scope !73, !noalias !76
  %787 = bitcast %"class.v8::internal::RegExpTree"** %780 to <2 x i64>*
  %788 = load <2 x i64>, <2 x i64>* %787, align 8, !alias.scope !76
  %789 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %780, i64 2
  %790 = bitcast %"class.v8::internal::RegExpTree"** %789 to <2 x i64>*
  %791 = load <2 x i64>, <2 x i64>* %790, align 8, !alias.scope !76
  %792 = bitcast %"class.v8::internal::RegExpTree"** %781 to <2 x i64>*
  store <2 x i64> %788, <2 x i64>* %792, align 8, !alias.scope !73, !noalias !76
  %793 = bitcast %"class.v8::internal::RegExpTree"** %784 to <2 x i64>*
  store <2 x i64> %791, <2 x i64>* %793, align 8, !alias.scope !73, !noalias !76
  %794 = bitcast %"class.v8::internal::RegExpTree"** %780 to <2 x i64>*
  store <2 x i64> %783, <2 x i64>* %794, align 8, !alias.scope !76
  %795 = bitcast %"class.v8::internal::RegExpTree"** %789 to <2 x i64>*
  store <2 x i64> %786, <2 x i64>* %795, align 8, !alias.scope !76
  %796 = add i64 %761, 8
  %797 = add i64 %762, -2
  %798 = icmp eq i64 %797, 0
  br i1 %798, label %799, label %760, !llvm.loop !78

799:                                              ; preds = %760, %749
  %800 = phi i64 [ 0, %749 ], [ %796, %760 ]
  %801 = icmp eq i64 %756, 0
  br i1 %801, label %819, label %802

802:                                              ; preds = %799
  %803 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 %800
  %804 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %677, i64 %800
  %805 = bitcast %"class.v8::internal::RegExpTree"** %804 to <2 x i64>*
  %806 = load <2 x i64>, <2 x i64>* %805, align 8, !alias.scope !73, !noalias !76
  %807 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %804, i64 2
  %808 = bitcast %"class.v8::internal::RegExpTree"** %807 to <2 x i64>*
  %809 = load <2 x i64>, <2 x i64>* %808, align 8, !alias.scope !73, !noalias !76
  %810 = bitcast %"class.v8::internal::RegExpTree"** %803 to <2 x i64>*
  %811 = load <2 x i64>, <2 x i64>* %810, align 8, !alias.scope !76
  %812 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %803, i64 2
  %813 = bitcast %"class.v8::internal::RegExpTree"** %812 to <2 x i64>*
  %814 = load <2 x i64>, <2 x i64>* %813, align 8, !alias.scope !76
  %815 = bitcast %"class.v8::internal::RegExpTree"** %804 to <2 x i64>*
  store <2 x i64> %811, <2 x i64>* %815, align 8, !alias.scope !73, !noalias !76
  %816 = bitcast %"class.v8::internal::RegExpTree"** %807 to <2 x i64>*
  store <2 x i64> %814, <2 x i64>* %816, align 8, !alias.scope !73, !noalias !76
  %817 = bitcast %"class.v8::internal::RegExpTree"** %803 to <2 x i64>*
  store <2 x i64> %806, <2 x i64>* %817, align 8, !alias.scope !76
  %818 = bitcast %"class.v8::internal::RegExpTree"** %812 to <2 x i64>*
  store <2 x i64> %809, <2 x i64>* %818, align 8, !alias.scope !76
  br label %819

819:                                              ; preds = %799, %802
  %820 = icmp eq i64 %735, %750
  br i1 %820, label %943, label %821

821:                                              ; preds = %819, %737, %730
  %822 = phi %"class.v8::internal::RegExpTree"** [ %15, %737 ], [ %15, %730 ], [ %751, %819 ]
  %823 = phi %"class.v8::internal::RegExpTree"** [ %677, %737 ], [ %677, %730 ], [ %752, %819 ]
  %824 = ptrtoint %"class.v8::internal::RegExpTree"** %823 to i64
  %825 = getelementptr %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %15, i64 -1
  %826 = ptrtoint %"class.v8::internal::RegExpTree"** %825 to i64
  %827 = sub i64 %826, %824
  %828 = lshr i64 %827, 3
  %829 = add nuw nsw i64 %828, 1
  %830 = and i64 %829, 3
  %831 = icmp eq i64 %830, 0
  br i1 %831, label %844, label %832

832:                                              ; preds = %821, %832
  %833 = phi %"class.v8::internal::RegExpTree"** [ %841, %832 ], [ %822, %821 ]
  %834 = phi %"class.v8::internal::RegExpTree"** [ %840, %832 ], [ %823, %821 ]
  %835 = phi i64 [ %842, %832 ], [ %830, %821 ]
  %836 = bitcast %"class.v8::internal::RegExpTree"** %834 to i64*
  %837 = load i64, i64* %836, align 8
  %838 = bitcast %"class.v8::internal::RegExpTree"** %833 to i64*
  %839 = load i64, i64* %838, align 8
  store i64 %839, i64* %836, align 8
  store i64 %837, i64* %838, align 8
  %840 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %834, i64 1
  %841 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %833, i64 1
  %842 = add i64 %835, -1
  %843 = icmp eq i64 %842, 0
  br i1 %843, label %844, label %832, !llvm.loop !79

844:                                              ; preds = %832, %821
  %845 = phi %"class.v8::internal::RegExpTree"** [ %822, %821 ], [ %841, %832 ]
  %846 = phi %"class.v8::internal::RegExpTree"** [ %823, %821 ], [ %840, %832 ]
  %847 = icmp ult i64 %827, 24
  br i1 %847, label %943, label %848

848:                                              ; preds = %844, %848
  %849 = phi %"class.v8::internal::RegExpTree"** [ %874, %848 ], [ %845, %844 ]
  %850 = phi %"class.v8::internal::RegExpTree"** [ %873, %848 ], [ %846, %844 ]
  %851 = bitcast %"class.v8::internal::RegExpTree"** %850 to i64*
  %852 = load i64, i64* %851, align 8
  %853 = bitcast %"class.v8::internal::RegExpTree"** %849 to i64*
  %854 = load i64, i64* %853, align 8
  store i64 %854, i64* %851, align 8
  store i64 %852, i64* %853, align 8
  %855 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %850, i64 1
  %856 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %849, i64 1
  %857 = bitcast %"class.v8::internal::RegExpTree"** %855 to i64*
  %858 = load i64, i64* %857, align 8
  %859 = bitcast %"class.v8::internal::RegExpTree"** %856 to i64*
  %860 = load i64, i64* %859, align 8
  store i64 %860, i64* %857, align 8
  store i64 %858, i64* %859, align 8
  %861 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %850, i64 2
  %862 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %849, i64 2
  %863 = bitcast %"class.v8::internal::RegExpTree"** %861 to i64*
  %864 = load i64, i64* %863, align 8
  %865 = bitcast %"class.v8::internal::RegExpTree"** %862 to i64*
  %866 = load i64, i64* %865, align 8
  store i64 %866, i64* %863, align 8
  store i64 %864, i64* %865, align 8
  %867 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %850, i64 3
  %868 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %849, i64 3
  %869 = bitcast %"class.v8::internal::RegExpTree"** %867 to i64*
  %870 = load i64, i64* %869, align 8
  %871 = bitcast %"class.v8::internal::RegExpTree"** %868 to i64*
  %872 = load i64, i64* %871, align 8
  store i64 %872, i64* %869, align 8
  store i64 %870, i64* %871, align 8
  %873 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %850, i64 4
  %874 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %849, i64 4
  %875 = icmp eq %"class.v8::internal::RegExpTree"** %873, %15
  br i1 %875, label %943, label %848, !llvm.loop !80

876:                                              ; preds = %721, %876
  %877 = phi i64 [ %879, %876 ], [ %728, %721 ]
  %878 = phi i64 [ %877, %876 ], [ %725, %721 ]
  %879 = srem i64 %878, %877
  %880 = icmp eq i64 %879, 0
  br i1 %880, label %881, label %876

881:                                              ; preds = %876
  %882 = icmp eq i64 %877, 0
  br i1 %882, label %914, label %883

883:                                              ; preds = %881
  %884 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %677, i64 %877
  %885 = shl nsw i64 %877, 3
  %886 = add i64 %885, -8
  %887 = and i64 %886, 8
  %888 = icmp eq i64 %887, 0
  br i1 %888, label %889, label %911

889:                                              ; preds = %883
  %890 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %884, i64 -1
  %891 = bitcast %"class.v8::internal::RegExpTree"** %890 to i64*
  %892 = load i64, i64* %891, align 8
  %893 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %890, i64 %725
  br label %894

894:                                              ; preds = %894, %889
  %895 = phi %"class.v8::internal::RegExpTree"** [ %890, %889 ], [ %896, %894 ]
  %896 = phi %"class.v8::internal::RegExpTree"** [ %893, %889 ], [ %907, %894 ]
  %897 = bitcast %"class.v8::internal::RegExpTree"** %896 to i64*
  %898 = load i64, i64* %897, align 8
  %899 = bitcast %"class.v8::internal::RegExpTree"** %895 to i64*
  store i64 %898, i64* %899, align 8
  %900 = ptrtoint %"class.v8::internal::RegExpTree"** %896 to i64
  %901 = sub i64 %726, %900
  %902 = ashr exact i64 %901, 3
  %903 = icmp slt i64 %725, %902
  %904 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %896, i64 %725
  %905 = sub nsw i64 %725, %902
  %906 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %677, i64 %905
  %907 = select i1 %903, %"class.v8::internal::RegExpTree"** %904, %"class.v8::internal::RegExpTree"** %906
  %908 = icmp eq %"class.v8::internal::RegExpTree"** %907, %890
  br i1 %908, label %909, label %894

909:                                              ; preds = %894
  %910 = bitcast %"class.v8::internal::RegExpTree"** %896 to i64*
  store i64 %892, i64* %910, align 8
  br label %911

911:                                              ; preds = %909, %883
  %912 = phi %"class.v8::internal::RegExpTree"** [ %890, %909 ], [ %884, %883 ]
  %913 = icmp eq i64 %886, 0
  br i1 %913, label %914, label %916

914:                                              ; preds = %911, %973, %881
  %915 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %677, i64 %728
  br label %943

916:                                              ; preds = %911, %973
  %917 = phi %"class.v8::internal::RegExpTree"** [ %939, %973 ], [ %912, %911 ]
  %918 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %917, i64 -1
  %919 = bitcast %"class.v8::internal::RegExpTree"** %918 to i64*
  %920 = load i64, i64* %919, align 8
  %921 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %918, i64 %725
  br label %922

922:                                              ; preds = %922, %916
  %923 = phi %"class.v8::internal::RegExpTree"** [ %918, %916 ], [ %924, %922 ]
  %924 = phi %"class.v8::internal::RegExpTree"** [ %921, %916 ], [ %935, %922 ]
  %925 = bitcast %"class.v8::internal::RegExpTree"** %924 to i64*
  %926 = load i64, i64* %925, align 8
  %927 = bitcast %"class.v8::internal::RegExpTree"** %923 to i64*
  store i64 %926, i64* %927, align 8
  %928 = ptrtoint %"class.v8::internal::RegExpTree"** %924 to i64
  %929 = sub i64 %726, %928
  %930 = ashr exact i64 %929, 3
  %931 = icmp slt i64 %725, %930
  %932 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %924, i64 %725
  %933 = sub nsw i64 %725, %930
  %934 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %677, i64 %933
  %935 = select i1 %931, %"class.v8::internal::RegExpTree"** %932, %"class.v8::internal::RegExpTree"** %934
  %936 = icmp eq %"class.v8::internal::RegExpTree"** %935, %918
  br i1 %936, label %937, label %922

937:                                              ; preds = %922
  %938 = bitcast %"class.v8::internal::RegExpTree"** %924 to i64*
  store i64 %920, i64* %938, align 8
  %939 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %917, i64 -2
  %940 = bitcast %"class.v8::internal::RegExpTree"** %939 to i64*
  %941 = load i64, i64* %940, align 8
  %942 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %939, i64 %725
  br label %958

943:                                              ; preds = %844, %848, %819, %676, %686, %700, %718, %914
  %944 = phi %"class.v8::internal::RegExpTree"** [ %678, %676 ], [ %677, %686 ], [ %701, %700 ], [ %719, %718 ], [ %915, %914 ], [ %15, %819 ], [ %15, %848 ], [ %15, %844 ]
  %945 = add nsw i64 %680, %679
  %946 = add nsw i64 %684, %683
  %947 = icmp slt i64 %945, %946
  br i1 %947, label %948, label %949

948:                                              ; preds = %943
  tail call void @_ZNSt3__115__inplace_mergeIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SH_SC_NS_15iterator_traitsISH_E15difference_typeESK_PNSJ_10value_typeEl(%"class.v8::internal::RegExpTree"** %598, %"class.v8::internal::RegExpTree"** %677, %"class.v8::internal::RegExpTree"** %944, %class.anon* dereferenceable(8) %3, i64 %679, i64 %680, %"class.v8::internal::RegExpTree"** %6, i64 %7)
  br label %950

949:                                              ; preds = %943
  tail call void @_ZNSt3__115__inplace_mergeIRZN2v88internal8ZoneListIPNS2_10RegExpTreeEE10StableSortIPFiPKS5_S9_EEEvT_mmEUlRS8_SD_E_PS5_EEvT0_SH_SH_SC_NS_15iterator_traitsISH_E15difference_typeESK_PNSJ_10value_typeEl(%"class.v8::internal::RegExpTree"** %944, %"class.v8::internal::RegExpTree"** %678, %"class.v8::internal::RegExpTree"** %16, %class.anon* dereferenceable(8) %3, i64 %683, i64 %684, %"class.v8::internal::RegExpTree"** %6, i64 %7)
  br label %950

950:                                              ; preds = %948, %949
  %951 = phi i64 [ %684, %948 ], [ %680, %949 ]
  %952 = phi i64 [ %683, %948 ], [ %679, %949 ]
  %953 = phi %"class.v8::internal::RegExpTree"** [ %16, %948 ], [ %944, %949 ]
  %954 = phi %"class.v8::internal::RegExpTree"** [ %678, %948 ], [ %677, %949 ]
  %955 = phi %"class.v8::internal::RegExpTree"** [ %944, %948 ], [ %598, %949 ]
  %956 = icmp eq i64 %951, 0
  br i1 %956, label %957, label %13

957:                                              ; preds = %950, %23, %603, %315, %538, %490, %494, %467, %8, %641, %364, %298, %293, %285, %157, %29
  ret void

958:                                              ; preds = %958, %937
  %959 = phi %"class.v8::internal::RegExpTree"** [ %939, %937 ], [ %960, %958 ]
  %960 = phi %"class.v8::internal::RegExpTree"** [ %942, %937 ], [ %971, %958 ]
  %961 = bitcast %"class.v8::internal::RegExpTree"** %960 to i64*
  %962 = load i64, i64* %961, align 8
  %963 = bitcast %"class.v8::internal::RegExpTree"** %959 to i64*
  store i64 %962, i64* %963, align 8
  %964 = ptrtoint %"class.v8::internal::RegExpTree"** %960 to i64
  %965 = sub i64 %726, %964
  %966 = ashr exact i64 %965, 3
  %967 = icmp slt i64 %725, %966
  %968 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %960, i64 %725
  %969 = sub nsw i64 %725, %966
  %970 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %677, i64 %969
  %971 = select i1 %967, %"class.v8::internal::RegExpTree"** %968, %"class.v8::internal::RegExpTree"** %970
  %972 = icmp eq %"class.v8::internal::RegExpTree"** %971, %939
  br i1 %972, label %973, label %958

973:                                              ; preds = %958
  %974 = bitcast %"class.v8::internal::RegExpTree"** %960 to i64*
  store i64 %941, i64* %974, align 8
  %975 = icmp eq %"class.v8::internal::RegExpTree"** %939, %677
  br i1 %975, label %914, label %916
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2v88internal17RegExpDisjunctionC1EPNS0_8ZoneListIPNS0_10RegExpTreeEEE(%"class.v8::internal::RegExpDisjunction"*, %"class.v8::internal::ZoneList.559"*) unnamed_addr #2

declare void @_ZN2v88internal17RegExpAlternativeC1EPNS0_8ZoneListIPNS0_10RegExpTreeEEE(%"class.v8::internal::RegExpAlternative"*, %"class.v8::internal::ZoneList.559"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal28NegativeLookaroundChoiceNodeC2ENS0_18GuardedAlternativeES2_PNS0_4ZoneE(%"class.v8::internal::NegativeLookaroundChoiceNode"*, %"class.v8::internal::RegExpNode"*, %"class.v8::internal::ZoneList.556"*, %"class.v8::internal::RegExpNode"*, %"class.v8::internal::ZoneList.556"*, %"class.v8::internal::Zone"*) unnamed_addr #0 comdat align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 0, i32 8
  %10 = bitcast %"class.v8::internal::RegExpNode"** %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #12
  store %"class.v8::internal::Zone"* %5, %"class.v8::internal::Zone"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 0, i32 7, i64 0
  %12 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false) #12
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2v88internal10ChoiceNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %13 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %15
  %19 = icmp ult i64 %18, 16
  br i1 %19, label %20, label %22, !prof !2

20:                                               ; preds = %6
  %21 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5, i64 16) #12
  br label %24

22:                                               ; preds = %6
  %23 = add i64 %15, 16
  store i64 %23, i64* %14, align 8
  br label %24

24:                                               ; preds = %22, %20
  %25 = phi i64 [ %21, %20 ], [ %15, %22 ]
  %26 = inttoptr i64 %25 to %"class.v8::internal::ZoneList.555"*
  %27 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %26, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* null, %"class.v8::internal::GuardedAlternative"** %27, align 8
  %28 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %26, i64 0, i32 1
  store i32 2, i32* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %26, i64 0, i32 2
  store i32 0, i32* %29, align 4
  %30 = load i64, i64* %14, align 8
  %31 = load i64, i64* %16, align 8
  %32 = sub i64 %31, %30
  %33 = icmp ult i64 %32, 32
  br i1 %33, label %34, label %36, !prof !2

34:                                               ; preds = %24
  %35 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5, i64 32) #12
  br label %38

36:                                               ; preds = %24
  %37 = add i64 %30, 32
  store i64 %37, i64* %14, align 8
  br label %38

38:                                               ; preds = %34, %36
  %39 = phi i64 [ %35, %34 ], [ %30, %36 ]
  %40 = inttoptr i64 %39 to %"class.v8::internal::GuardedAlternative"*
  store %"class.v8::internal::GuardedAlternative"* %40, %"class.v8::internal::GuardedAlternative"** %27, align 8
  store %"class.v8::internal::ZoneList.555"* %26, %"class.v8::internal::ZoneList.555"** %13, align 8
  %41 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 2
  store i8 0, i8* %41, align 8
  %42 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 3
  store i8 0, i8* %42, align 1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2v88internal28NegativeLookaroundChoiceNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %43 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8
  %44 = load i32, i32* %29, align 4
  %45 = load i32, i32* %28, align 8
  %46 = icmp slt i32 %44, %45
  br i1 %46, label %47, label %53

47:                                               ; preds = %38
  %48 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %27, align 8
  %49 = add nsw i32 %44, 1
  store i32 %49, i32* %29, align 4
  %50 = sext i32 %44 to i64
  %51 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %48, i64 %50, i32 0
  store %"class.v8::internal::RegExpNode"* %1, %"class.v8::internal::RegExpNode"** %51, align 8
  %52 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %48, i64 %50, i32 1
  br label %87

53:                                               ; preds = %38
  %54 = shl nsw i32 %45, 1
  %55 = or i32 %54, 1
  %56 = sext i32 %55 to i64
  %57 = shl nsw i64 %56, 4
  %58 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %43, i64 0, i32 2
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %43, i64 0, i32 3
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %61, %59
  %63 = icmp ugt i64 %57, %62
  br i1 %63, label %64, label %66, !prof !2

64:                                               ; preds = %53
  %65 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %43, i64 %57) #12
  br label %68

66:                                               ; preds = %53
  %67 = add i64 %59, %57
  store i64 %67, i64* %58, align 8
  br label %68

68:                                               ; preds = %66, %64
  %69 = phi i64 [ %65, %64 ], [ %59, %66 ]
  %70 = inttoptr i64 %69 to %"class.v8::internal::GuardedAlternative"*
  %71 = load i32, i32* %29, align 4
  %72 = icmp sgt i32 %71, 0
  br i1 %72, label %73, label %81

73:                                               ; preds = %68
  %74 = inttoptr i64 %69 to i8*
  %75 = inttoptr i64 %25 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = icmp eq i32 %71, 1
  %78 = sext i32 %71 to i64
  %79 = shl nsw i64 %78, 4
  %80 = select i1 %77, i64 16, i64 %79
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 1 %76, i64 %80, i1 false) #12
  br label %81

81:                                               ; preds = %73, %68
  store %"class.v8::internal::GuardedAlternative"* %70, %"class.v8::internal::GuardedAlternative"** %27, align 8
  store i32 %55, i32* %28, align 8
  %82 = load i32, i32* %29, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %29, align 4
  %84 = sext i32 %82 to i64
  %85 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %70, i64 %84, i32 0
  store %"class.v8::internal::RegExpNode"* %1, %"class.v8::internal::RegExpNode"** %85, align 8
  %86 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %70, i64 %84, i32 1
  br label %87

87:                                               ; preds = %47, %81
  %88 = phi %"class.v8::internal::ZoneList.556"** [ %52, %47 ], [ %86, %81 ]
  store %"class.v8::internal::ZoneList.556"* %2, %"class.v8::internal::ZoneList.556"** %88, align 8
  %89 = load %"class.v8::internal::ZoneList.555"*, %"class.v8::internal::ZoneList.555"** %13, align 8
  %90 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8
  %91 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %89, i64 0, i32 2
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %89, i64 0, i32 1
  %94 = load i32, i32* %93, align 8
  %95 = icmp slt i32 %92, %94
  br i1 %95, label %96, label %103

96:                                               ; preds = %87
  %97 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %89, i64 0, i32 0
  %98 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %97, align 8
  %99 = add nsw i32 %92, 1
  store i32 %99, i32* %91, align 4
  %100 = sext i32 %92 to i64
  %101 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %98, i64 %100, i32 0
  store %"class.v8::internal::RegExpNode"* %3, %"class.v8::internal::RegExpNode"** %101, align 8
  %102 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %98, i64 %100, i32 1
  br label %138

103:                                              ; preds = %87
  %104 = shl nsw i32 %94, 1
  %105 = or i32 %104, 1
  %106 = sext i32 %105 to i64
  %107 = shl nsw i64 %106, 4
  %108 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %90, i64 0, i32 2
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %90, i64 0, i32 3
  %111 = load i64, i64* %110, align 8
  %112 = sub i64 %111, %109
  %113 = icmp ugt i64 %107, %112
  br i1 %113, label %114, label %116, !prof !2

114:                                              ; preds = %103
  %115 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %90, i64 %107) #12
  br label %118

116:                                              ; preds = %103
  %117 = add i64 %109, %107
  store i64 %117, i64* %108, align 8
  br label %118

118:                                              ; preds = %116, %114
  %119 = phi i64 [ %115, %114 ], [ %109, %116 ]
  %120 = inttoptr i64 %119 to %"class.v8::internal::GuardedAlternative"*
  %121 = load i32, i32* %91, align 4
  %122 = icmp sgt i32 %121, 0
  br i1 %122, label %123, label %131

123:                                              ; preds = %118
  %124 = inttoptr i64 %119 to i8*
  %125 = bitcast %"class.v8::internal::ZoneList.555"* %89 to i8**
  %126 = load i8*, i8** %125, align 8
  %127 = icmp eq i32 %121, 1
  %128 = sext i32 %121 to i64
  %129 = shl nsw i64 %128, 4
  %130 = select i1 %127, i64 16, i64 %129
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %124, i8* align 1 %126, i64 %130, i1 false) #12
  br label %131

131:                                              ; preds = %123, %118
  %132 = getelementptr inbounds %"class.v8::internal::ZoneList.555", %"class.v8::internal::ZoneList.555"* %89, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %120, %"class.v8::internal::GuardedAlternative"** %132, align 8
  store i32 %105, i32* %93, align 8
  %133 = load i32, i32* %91, align 4
  %134 = add nsw i32 %133, 1
  store i32 %134, i32* %91, align 4
  %135 = sext i32 %133 to i64
  %136 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %120, i64 %135, i32 0
  store %"class.v8::internal::RegExpNode"* %3, %"class.v8::internal::RegExpNode"** %136, align 8
  %137 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %120, i64 %135, i32 1
  br label %138

138:                                              ; preds = %96, %131
  %139 = phi %"class.v8::internal::ZoneList.556"** [ %102, %96 ], [ %137, %131 ]
  store %"class.v8::internal::ZoneList.556"* %4, %"class.v8::internal::ZoneList.556"** %139, align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !5}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !5}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.isvectorized", i32 1}
!18 = distinct !{!18, !5}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !17}
!25 = distinct !{!25, !5}
!26 = distinct !{!26, !5}
!27 = distinct !{!27, !17}
!28 = distinct !{!28, !17}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !17}
!35 = distinct !{!35, !5}
!36 = distinct !{!36, !5}
!37 = distinct !{!37, !17}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !17}
!44 = distinct !{!44, !5}
!45 = distinct !{!45, !5}
!46 = distinct !{!46, !17}
!47 = distinct !{!47, !5}
!48 = !{!49}
!49 = distinct !{!49, !50}
!50 = distinct !{!50, !"LVerDomain"}
!51 = !{!52}
!52 = distinct !{!52, !50}
!53 = distinct !{!53, !17}
!54 = distinct !{!54, !5}
!55 = distinct !{!55, !5}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !17}
!62 = distinct !{!62, !5}
!63 = distinct !{!63, !17}
!64 = !{!65}
!65 = distinct !{!65, !66}
!66 = distinct !{!66, !"LVerDomain"}
!67 = !{!68}
!68 = distinct !{!68, !66}
!69 = distinct !{!69, !17}
!70 = distinct !{!70, !5}
!71 = distinct !{!71, !17}
!72 = distinct !{!72, !17}
!73 = !{!74}
!74 = distinct !{!74, !75}
!75 = distinct !{!75, !"LVerDomain"}
!76 = !{!77}
!77 = distinct !{!77, !75}
!78 = distinct !{!78, !17}
!79 = distinct !{!79, !5}
!80 = distinct !{!80, !17}
