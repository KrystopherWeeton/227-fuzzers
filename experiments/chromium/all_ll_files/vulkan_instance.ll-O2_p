; ModuleID = '../../gpu/vulkan/vulkan_instance.cc'
source_filename = "../../gpu/vulkan/vulkan_instance.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.crash_reporter::CrashKeyStringCombined" = type { %"class.crash_reporter::internal::CrashKeyStringCombinedImpl", %"class.crash_reporter::CrashKeyStringBreakpad", %"class.crashpad::StringAnnotation" }
%"class.crash_reporter::internal::CrashKeyStringCombinedImpl" = type { %"class.crash_reporter::internal::CrashKeyStringImpl"*, %"class.crashpad::Annotation"* }
%"class.crash_reporter::internal::CrashKeyStringImpl" = type { i8*, i64*, i64 }
%"class.crashpad::Annotation" = type <{ %"struct.std::__1::atomic", i8*, i8*, i32, i16, [2 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.crashpad::Annotation"* }
%"class.crash_reporter::CrashKeyStringBreakpad" = type { %"class.crash_reporter::internal::CrashKeyStringImpl", %"struct.crash_reporter::internal::InitializedArrayImpl" }
%"struct.crash_reporter::internal::InitializedArrayImpl" = type { [1 x i64] }
%"class.crashpad::StringAnnotation" = type { %"class.crashpad::Annotation.base", [16 x i8], [2 x i8] }
%"class.crashpad::Annotation.base" = type <{ %"struct.std::__1::atomic", i8*, i8*, i32, i16 }>
%"struct.std::nothrow_t" = type { i8 }
%"class.gpu::VulkanInstance" = type <{ %"class.gpu::VulkanInfo", %struct.VkInstance_T*, i8, [7 x i8] }>
%"class.gpu::VulkanInfo" = type { i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.15" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %struct.VkExtensionProperties*, %struct.VkExtensionProperties*, %"class.std::__1::__compressed_pair" }
%struct.VkExtensionProperties = type { [256 x i8], i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.VkExtensionProperties* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i8**, i8**, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i8** }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %struct.VkLayerProperties*, %struct.VkLayerProperties*, %"class.std::__1::__compressed_pair.10" }
%struct.VkLayerProperties = type { [256 x i8], i32, i32, [256 x i8] }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %struct.VkLayerProperties* }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { %"class.gpu::VulkanPhysicalDeviceInfo"*, %"class.gpu::VulkanPhysicalDeviceInfo"*, %"class.std::__1::__compressed_pair.24" }
%"class.gpu::VulkanPhysicalDeviceInfo" = type { %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceDriverProperties, %"class.std::__1::vector", %struct.VkPhysicalDeviceFeatures, i8, i8, %"class.std::__1::vector.17" }
%struct.VkPhysicalDevice_T = type opaque
%struct.VkPhysicalDeviceProperties = type { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], %struct.VkPhysicalDeviceLimits, %struct.VkPhysicalDeviceSparseProperties }
%struct.VkPhysicalDeviceLimits = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, i64, i64, i64 }
%struct.VkPhysicalDeviceSparseProperties = type { i32, i32, i32, i32, i32 }
%struct.VkPhysicalDeviceDriverProperties = type { i32, i8*, i32, [256 x i8], [256 x i8], %struct.VkConformanceVersion }
%struct.VkConformanceVersion = type { i8, i8, i8, i8 }
%struct.VkPhysicalDeviceFeatures = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %struct.VkQueueFamilyProperties*, %struct.VkQueueFamilyProperties*, %"class.std::__1::__compressed_pair.19" }
%struct.VkQueueFamilyProperties = type { i32, i32, i32, %struct.VkExtent3D }
%struct.VkExtent3D = type { i32, i32, i32 }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %struct.VkQueueFamilyProperties* }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.gpu::VulkanPhysicalDeviceInfo"* }
%struct.VkInstance_T = type opaque
%"struct.gpu::VulkanFunctionPointers" = type { i8*, %"class.gpu::VulkanFunctionPointers::VulkanFunction", %"class.gpu::VulkanFunctionPointers::VulkanFunction.29", %"class.gpu::VulkanFunctionPointers::VulkanFunction.30", %"class.gpu::VulkanFunctionPointers::VulkanFunction.31", %"class.gpu::VulkanFunctionPointers::VulkanFunction.32", %"class.gpu::VulkanFunctionPointers::VulkanFunction.33", %"class.gpu::VulkanFunctionPointers::VulkanFunction.34", %"class.gpu::VulkanFunctionPointers::VulkanFunction.35", %"class.gpu::VulkanFunctionPointers::VulkanFunction.36", %"class.gpu::VulkanFunctionPointers::VulkanFunction.37", %"class.gpu::VulkanFunctionPointers::VulkanFunction.38", %"class.gpu::VulkanFunctionPointers::VulkanFunction.39", %"class.gpu::VulkanFunctionPointers::VulkanFunction.40", %"class.gpu::VulkanFunctionPointers::VulkanFunction.41", %"class.gpu::VulkanFunctionPointers::VulkanFunction.42", %"class.gpu::VulkanFunctionPointers::VulkanFunction.43", %"class.gpu::VulkanFunctionPointers::VulkanFunction.44", %"class.gpu::VulkanFunctionPointers::VulkanFunction.45", %"class.gpu::VulkanFunctionPointers::VulkanFunction.46", %"class.gpu::VulkanFunctionPointers::VulkanFunction.47", %"class.gpu::VulkanFunctionPointers::VulkanFunction.48", %"class.gpu::VulkanFunctionPointers::VulkanFunction.49", %"class.gpu::VulkanFunctionPointers::VulkanFunction.50", %"class.gpu::VulkanFunctionPointers::VulkanFunction.51", %"class.gpu::VulkanFunctionPointers::VulkanFunction.52", %"class.gpu::VulkanFunctionPointers::VulkanFunction.53", %"class.gpu::VulkanFunctionPointers::VulkanFunction.54", %"class.gpu::VulkanFunctionPointers::VulkanFunction.55", %"class.gpu::VulkanFunctionPointers::VulkanFunction.56", %"class.gpu::VulkanFunctionPointers::VulkanFunction.57", %"class.gpu::VulkanFunctionPointers::VulkanFunction.58", %"class.gpu::VulkanFunctionPointers::VulkanFunction.59", %"class.gpu::VulkanFunctionPointers::VulkanFunction.60", %"class.gpu::VulkanFunctionPointers::VulkanFunction.61", %"class.gpu::VulkanFunctionPointers::VulkanFunction.62", %"class.gpu::VulkanFunctionPointers::VulkanFunction.63", %"class.gpu::VulkanFunctionPointers::VulkanFunction.64", %"class.gpu::VulkanFunctionPointers::VulkanFunction.65", %"class.gpu::VulkanFunctionPointers::VulkanFunction.66", %"class.gpu::VulkanFunctionPointers::VulkanFunction.67", %"class.gpu::VulkanFunctionPointers::VulkanFunction.68", %"class.gpu::VulkanFunctionPointers::VulkanFunction.69", %"class.gpu::VulkanFunctionPointers::VulkanFunction.70", %"class.gpu::VulkanFunctionPointers::VulkanFunction.71", %"class.gpu::VulkanFunctionPointers::VulkanFunction.72", %"class.gpu::VulkanFunctionPointers::VulkanFunction.73", %"class.gpu::VulkanFunctionPointers::VulkanFunction.74", %"class.gpu::VulkanFunctionPointers::VulkanFunction.75", %"class.gpu::VulkanFunctionPointers::VulkanFunction.76", %"class.gpu::VulkanFunctionPointers::VulkanFunction.77", %"class.gpu::VulkanFunctionPointers::VulkanFunction.78", %"class.gpu::VulkanFunctionPointers::VulkanFunction.79", %"class.gpu::VulkanFunctionPointers::VulkanFunction.80", %"class.gpu::VulkanFunctionPointers::VulkanFunction.81", %"class.gpu::VulkanFunctionPointers::VulkanFunction.82", %"class.gpu::VulkanFunctionPointers::VulkanFunction.83", %"class.gpu::VulkanFunctionPointers::VulkanFunction.84", %"class.gpu::VulkanFunctionPointers::VulkanFunction.85", %"class.gpu::VulkanFunctionPointers::VulkanFunction.86", %"class.gpu::VulkanFunctionPointers::VulkanFunction.87", %"class.gpu::VulkanFunctionPointers::VulkanFunction.88", %"class.gpu::VulkanFunctionPointers::VulkanFunction.89", %"class.gpu::VulkanFunctionPointers::VulkanFunction.90", %"class.gpu::VulkanFunctionPointers::VulkanFunction.91", %"class.gpu::VulkanFunctionPointers::VulkanFunction.92", %"class.gpu::VulkanFunctionPointers::VulkanFunction.93", %"class.gpu::VulkanFunctionPointers::VulkanFunction.94", %"class.gpu::VulkanFunctionPointers::VulkanFunction.95", %"class.gpu::VulkanFunctionPointers::VulkanFunction.96", %"class.gpu::VulkanFunctionPointers::VulkanFunction.97", %"class.gpu::VulkanFunctionPointers::VulkanFunction.98", %"class.gpu::VulkanFunctionPointers::VulkanFunction.99", %"class.gpu::VulkanFunctionPointers::VulkanFunction.100", %"class.gpu::VulkanFunctionPointers::VulkanFunction.96", %"class.gpu::VulkanFunctionPointers::VulkanFunction.101", %"class.gpu::VulkanFunctionPointers::VulkanFunction.102", %"class.gpu::VulkanFunctionPointers::VulkanFunction.103", %"class.gpu::VulkanFunctionPointers::VulkanFunction.104", %"class.gpu::VulkanFunctionPointers::VulkanFunction.105", %"class.gpu::VulkanFunctionPointers::VulkanFunction.106", %"class.gpu::VulkanFunctionPointers::VulkanFunction.107", %"class.gpu::VulkanFunctionPointers::VulkanFunction.108", %"class.gpu::VulkanFunctionPointers::VulkanFunction.109", %"class.gpu::VulkanFunctionPointers::VulkanFunction.110", %"class.gpu::VulkanFunctionPointers::VulkanFunction.111", %"class.gpu::VulkanFunctionPointers::VulkanFunction.112", %"class.gpu::VulkanFunctionPointers::VulkanFunction.113", %"class.gpu::VulkanFunctionPointers::VulkanFunction.114", %"class.gpu::VulkanFunctionPointers::VulkanFunction.115", %"class.gpu::VulkanFunctionPointers::VulkanFunction.116", %"class.gpu::VulkanFunctionPointers::VulkanFunction.117", %"class.gpu::VulkanFunctionPointers::VulkanFunction.118", %"class.gpu::VulkanFunctionPointers::VulkanFunction.119", %"class.gpu::VulkanFunctionPointers::VulkanFunction.120", %"class.gpu::VulkanFunctionPointers::VulkanFunction.121", %"class.gpu::VulkanFunctionPointers::VulkanFunction.122", %"class.gpu::VulkanFunctionPointers::VulkanFunction.123", %"class.gpu::VulkanFunctionPointers::VulkanFunction.124", %"class.gpu::VulkanFunctionPointers::VulkanFunction.125", %"class.gpu::VulkanFunctionPointers::VulkanFunction.126" }
%"class.gpu::VulkanFunctionPointers::VulkanFunction" = type { void ()* (%struct.VkInstance_T*, i8*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.29" = type { i32 (i32*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.30" = type { i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)* }
%struct.VkInstanceCreateInfo = type { i32, i8*, i32, %struct.VkApplicationInfo*, i32, i8**, i32, i8** }
%struct.VkApplicationInfo = type { i32, i8*, i8*, i32, i8*, i32, i32 }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.31" = type { i32 (i8*, i32*, %struct.VkExtensionProperties*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.32" = type { i32 (i32*, %struct.VkLayerProperties*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.33" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**)* }
%struct.VkDeviceCreateInfo = type { i32, i8*, i32, i32, %struct.VkDeviceQueueCreateInfo*, i32, i8**, i32, i8**, %struct.VkPhysicalDeviceFeatures* }
%struct.VkDeviceQueueCreateInfo = type { i32, i8*, i32, i32, i32, float* }
%struct.VkDevice_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.34" = type { void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.35" = type { i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.36" = type { i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkLayerProperties*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.37" = type { i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.38" = type { void ()* (%struct.VkDevice_T*, i8*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.39" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)* }
%struct.VkPhysicalDeviceFeatures2 = type { i32, i8*, %struct.VkPhysicalDeviceFeatures }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.40" = type { void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)* }
%struct.VkFormatProperties = type { i32, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.41" = type { void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)* }
%struct.VkFormatProperties2 = type { i32, i8*, %struct.VkFormatProperties }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.42" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)* }
%struct.VkPhysicalDeviceImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkImageFormatProperties2 = type { i32, i8*, %struct.VkImageFormatProperties }
%struct.VkImageFormatProperties = type { %struct.VkExtent3D, i32, i32, i32, i64 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.43" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)* }
%struct.VkPhysicalDeviceMemoryProperties = type { i32, [32 x %struct.VkMemoryType], i32, [16 x %struct.VkMemoryHeap] }
%struct.VkMemoryType = type { i32, i32 }
%struct.VkMemoryHeap = type { i64, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.44" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)* }
%struct.VkPhysicalDeviceMemoryProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceMemoryProperties }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.45" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.46" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)* }
%struct.VkPhysicalDeviceProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceProperties }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.47" = type { void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.48" = type { void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)* }
%struct.VkSurfaceKHR_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.49" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)* }
%struct.VkSurfaceCapabilitiesKHR = type { i32, i32, %struct.VkExtent2D, %struct.VkExtent2D, %struct.VkExtent2D, i32, i32, i32, i32, i32 }
%struct.VkExtent2D = type { i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.50" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)* }
%struct.VkSurfaceFormatKHR = type { i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.51" = type { i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.52" = type { i32 (%struct.VkInstance_T*, %struct.VkXcbSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)* }
%struct.VkXcbSurfaceCreateInfoKHR = type { i32, i8*, i32, %struct.xcb_connection_t*, i32 }
%struct.xcb_connection_t = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.53" = type { i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.54" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)* }
%struct.VkCommandBufferAllocateInfo = type { i32, i8*, %struct.VkCommandPool_T*, i32, i32 }
%struct.VkCommandPool_T = type opaque
%struct.VkCommandBuffer_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.55" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**)* }
%struct.VkDescriptorSetAllocateInfo = type { i32, i8*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSetLayout_T** }
%struct.VkDescriptorPool_T = type opaque
%struct.VkDescriptorSetLayout_T = type opaque
%struct.VkDescriptorSet_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.56" = type { i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)* }
%struct.VkMemoryAllocateInfo = type { i32, i8*, i64, i32 }
%struct.VkDeviceMemory_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.57" = type { i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)* }
%struct.VkCommandBufferBeginInfo = type { i32, i8*, i32, %struct.VkCommandBufferInheritanceInfo* }
%struct.VkCommandBufferInheritanceInfo = type { i32, i8*, %struct.VkRenderPass_T*, i32, %struct.VkFramebuffer_T*, i32, i32, i32 }
%struct.VkRenderPass_T = type opaque
%struct.VkFramebuffer_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.58" = type { i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)* }
%struct.VkBuffer_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.59" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)* }
%struct.VkBindBufferMemoryInfo = type { i32, i8*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.60" = type { i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)* }
%struct.VkImage_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.61" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)* }
%struct.VkBindImageMemoryInfo = type { i32, i8*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.62" = type { void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32)* }
%struct.VkRenderPassBeginInfo = type { i32, i8*, %struct.VkRenderPass_T*, %struct.VkFramebuffer_T*, %struct.VkRect2D, i32, %union.VkClearValue* }
%struct.VkRect2D = type { %struct.VkOffset2D, %struct.VkExtent2D }
%struct.VkOffset2D = type { i32, i32 }
%union.VkClearValue = type { %union.VkClearColorValue }
%union.VkClearColorValue = type { [4 x float] }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.63" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)* }
%struct.VkBufferCopy = type { i64, i64, i64 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.64" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*)* }
%struct.VkBufferImageCopy = type { i64, i32, i32, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkImageSubresourceLayers = type { i32, i32, i32, i32 }
%struct.VkOffset3D = type { i32, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.65" = type { void (%struct.VkCommandBuffer_T*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.66" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.67" = type { void (%struct.VkCommandBuffer_T*, i32)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.68" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)* }
%struct.VkMemoryBarrier = type { i32, i8*, i32, i32 }
%struct.VkBufferMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, %struct.VkBuffer_T*, i64, i64 }
%struct.VkImageMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkImage_T*, %struct.VkImageSubresourceRange }
%struct.VkImageSubresourceRange = type { i32, i32, i32, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.69" = type { i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)* }
%struct.VkBufferCreateInfo = type { i32, i8*, i32, i64, i32, i32, i32, i32* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.70" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)* }
%struct.VkCommandPoolCreateInfo = type { i32, i8*, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.71" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorPool_T**)* }
%struct.VkDescriptorPoolCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkDescriptorPoolSize* }
%struct.VkDescriptorPoolSize = type { i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.72" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)* }
%struct.VkDescriptorSetLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayoutBinding* }
%struct.VkDescriptorSetLayoutBinding = type { i32, i32, i32, i32, %struct.VkSampler_T** }
%struct.VkSampler_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.73" = type { i32 (%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)* }
%struct.VkFenceCreateInfo = type { i32, i8*, i32 }
%struct.VkFence_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.74" = type { i32 (%struct.VkDevice_T*, %struct.VkFramebufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFramebuffer_T**)* }
%struct.VkFramebufferCreateInfo = type { i32, i8*, i32, %struct.VkRenderPass_T*, i32, %struct.VkImageView_T**, i32, i32, i32 }
%struct.VkImageView_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.75" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkGraphicsPipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)* }
%struct.VkPipelineCache_T = type opaque
%struct.VkGraphicsPipelineCreateInfo = type { i32, i8*, i32, i32, %struct.VkPipelineShaderStageCreateInfo*, %struct.VkPipelineVertexInputStateCreateInfo*, %struct.VkPipelineInputAssemblyStateCreateInfo*, %struct.VkPipelineTessellationStateCreateInfo*, %struct.VkPipelineViewportStateCreateInfo*, %struct.VkPipelineRasterizationStateCreateInfo*, %struct.VkPipelineMultisampleStateCreateInfo*, %struct.VkPipelineDepthStencilStateCreateInfo*, %struct.VkPipelineColorBlendStateCreateInfo*, %struct.VkPipelineDynamicStateCreateInfo*, %struct.VkPipelineLayout_T*, %struct.VkRenderPass_T*, i32, %struct.VkPipeline_T*, i32 }
%struct.VkPipelineShaderStageCreateInfo = type { i32, i8*, i32, i32, %struct.VkShaderModule_T*, i8*, %struct.VkSpecializationInfo* }
%struct.VkShaderModule_T = type opaque
%struct.VkSpecializationInfo = type { i32, %struct.VkSpecializationMapEntry*, i64, i8* }
%struct.VkSpecializationMapEntry = type { i32, i32, i64 }
%struct.VkPipelineVertexInputStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkVertexInputBindingDescription*, i32, %struct.VkVertexInputAttributeDescription* }
%struct.VkVertexInputBindingDescription = type { i32, i32, i32 }
%struct.VkVertexInputAttributeDescription = type { i32, i32, i32, i32 }
%struct.VkPipelineInputAssemblyStateCreateInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkPipelineTessellationStateCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkPipelineViewportStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkViewport*, i32, %struct.VkRect2D* }
%struct.VkViewport = type { float, float, float, float, float, float }
%struct.VkPipelineRasterizationStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, float, float, float }
%struct.VkPipelineMultisampleStateCreateInfo = type { i32, i8*, i32, i32, i32, float, i32*, i32, i32 }
%struct.VkPipelineDepthStencilStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkStencilOpState, %struct.VkStencilOpState, float, float }
%struct.VkStencilOpState = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineColorBlendStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, %struct.VkPipelineColorBlendAttachmentState*, [4 x float] }
%struct.VkPipelineColorBlendAttachmentState = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineDynamicStateCreateInfo = type { i32, i8*, i32, i32, i32* }
%struct.VkPipelineLayout_T = type opaque
%struct.VkPipeline_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.76" = type { i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)* }
%struct.VkImageCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkExtent3D, i32, i32, i32, i32, i32, i32, i32, i32*, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.77" = type { i32 (%struct.VkDevice_T*, %struct.VkImageViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImageView_T**)* }
%struct.VkImageViewCreateInfo = type { i32, i8*, i32, %struct.VkImage_T*, i32, i32, %struct.VkComponentMapping, %struct.VkImageSubresourceRange }
%struct.VkComponentMapping = type { i32, i32, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.78" = type { i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)* }
%struct.VkRenderPassCreateInfo = type { i32, i8*, i32, i32, %struct.VkAttachmentDescription*, i32, %struct.VkSubpassDescription*, i32, %struct.VkSubpassDependency* }
%struct.VkAttachmentDescription = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription = type { i32, i32, i32, %struct.VkAttachmentReference*, i32, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, i32, i32* }
%struct.VkAttachmentReference = type { i32, i32 }
%struct.VkSubpassDependency = type { i32, i32, i32, i32, i32, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.79" = type { i32 (%struct.VkDevice_T*, %struct.VkSamplerCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSampler_T**)* }
%struct.VkSamplerCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, i32, float, i32, i32, float, float, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.80" = type { i32 (%struct.VkDevice_T*, %struct.VkSemaphoreCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSemaphore_T**)* }
%struct.VkSemaphoreCreateInfo = type { i32, i8*, i32 }
%struct.VkSemaphore_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.81" = type { i32 (%struct.VkDevice_T*, %struct.VkShaderModuleCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkShaderModule_T**)* }
%struct.VkShaderModuleCreateInfo = type { i32, i8*, i32, i64, i32* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.82" = type { void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.83" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.84" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.85" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.86" = type { void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.87" = type { void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.88" = type { void (%struct.VkDevice_T*, %struct.VkFramebuffer_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.89" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.90" = type { void (%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.91" = type { void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.92" = type { void (%struct.VkDevice_T*, %struct.VkSampler_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.93" = type { void (%struct.VkDevice_T*, %struct.VkSemaphore_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.94" = type { void (%struct.VkDevice_T*, %struct.VkShaderModule_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.95" = type { i32 (%struct.VkDevice_T*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.97" = type { i32 (%struct.VkCommandBuffer_T*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.98" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.99" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSet_T**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.100" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.96" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)* }
%struct.VkMappedMemoryRange = type { i32, i8*, %struct.VkDeviceMemory_T*, i64, i64 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.101" = type { void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)* }
%struct.VkMemoryRequirements = type { i64, i64, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.102" = type { void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* }
%struct.VkBufferMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkBuffer_T* }
%struct.VkMemoryRequirements2 = type { i32, i8*, %struct.VkMemoryRequirements }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.103" = type { void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)* }
%struct.VkQueue_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.104" = type { void (%struct.VkDevice_T*, %struct.VkDeviceQueueInfo2*, %struct.VkQueue_T**)* }
%struct.VkDeviceQueueInfo2 = type { i32, i8*, i32, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.105" = type { i32 (%struct.VkDevice_T*, %struct.VkFence_T*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.106" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.107" = type { void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* }
%struct.VkImageMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.108" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageSubresource*, %struct.VkSubresourceLayout*)* }
%struct.VkImageSubresource = type { i32, i32, i32 }
%struct.VkSubresourceLayout = type { i64, i64, i64, i64, i64 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.109" = type { i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.110" = type { i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)* }
%struct.VkSubmitInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32*, i32, %struct.VkCommandBuffer_T**, i32, %struct.VkSemaphore_T** }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.111" = type { i32 (%struct.VkQueue_T*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.112" = type { i32 (%struct.VkCommandBuffer_T*, i32)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.113" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.114" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.115" = type { void (%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*)* }
%struct.VkWriteDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, i32, i32, %struct.VkDescriptorImageInfo*, %struct.VkDescriptorBufferInfo*, %struct.VkBufferView_T** }
%struct.VkDescriptorImageInfo = type { %struct.VkSampler_T*, %struct.VkImageView_T*, i32 }
%struct.VkDescriptorBufferInfo = type { %struct.VkBuffer_T*, i64, i64 }
%struct.VkBufferView_T = type opaque
%struct.VkCopyDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, %struct.VkDescriptorSet_T*, i32, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.116" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.117" = type { i32 (%struct.VkDevice_T*, %struct.VkSemaphoreGetFdInfoKHR*, i32*)* }
%struct.VkSemaphoreGetFdInfoKHR = type { i32, i8*, %struct.VkSemaphore_T*, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.118" = type { i32 (%struct.VkDevice_T*, %struct.VkImportSemaphoreFdInfoKHR*)* }
%struct.VkImportSemaphoreFdInfoKHR = type { i32, i8*, %struct.VkSemaphore_T*, i32, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.119" = type { i32 (%struct.VkDevice_T*, %struct.VkMemoryGetFdInfoKHR*, i32*)* }
%struct.VkMemoryGetFdInfoKHR = type { i32, i8*, %struct.VkDeviceMemory_T*, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.120" = type { i32 (%struct.VkDevice_T*, i32, i32, %struct.VkMemoryFdPropertiesKHR*)* }
%struct.VkMemoryFdPropertiesKHR = type { i32, i8*, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.121" = type { i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i64, %struct.VkSemaphore_T*, %struct.VkFence_T*, i32*)* }
%struct.VkSwapchainKHR_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.122" = type { i32 (%struct.VkDevice_T*, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)* }
%struct.VkSwapchainCreateInfoKHR = type { i32, i8*, i32, %struct.VkSurfaceKHR_T*, i32, i32, i32, %struct.VkExtent2D, i32, i32, i32, i32, i32*, i32, i32, i32, i32, %struct.VkSwapchainKHR_T* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.123" = type { void (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.124" = type { i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i32*, %struct.VkImage_T**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.125" = type { i32 (%struct.VkQueue_T*, %struct.VkPresentInfoKHR*)* }
%struct.VkPresentInfoKHR = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32, %struct.VkSwapchainKHR_T**, i32*, i32* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.126" = type { i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageDrmFormatModifierPropertiesEXT*)* }
%struct.VkImageDrmFormatModifierPropertiesEXT = type { i32, i8*, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.127" }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.133" }
%"class.std::__1::vector.133" = type { %"class.std::__1::__vector_base.134" }
%"class.std::__1::__vector_base.134" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair.135" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.base::BasicStringPiece"* }
%"struct.std::__1::less" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%struct.VkPhysicalDeviceSamplerYcbcrConversionFeatures = type { i32, i8*, i32 }
%struct.VkPhysicalDeviceProtectedMemoryFeatures = type { i32, i8*, i32 }
%"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare" = type { i8 }

$_ZN4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEEC2INS3_11__wrap_iterIPPKcEEEET_SL_RKS9_ = comdat any

$_ZNSt3__16vectorIN3gpu24VulkanPhysicalDeviceInfoENS_9allocatorIS2_EEE7reserveEm = comdat any

$_ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

$_ZNSt3__16vectorI21VkExtensionPropertiesNS_9allocatorIS1_EEE8__appendEm = comdat any

$_ZNSt3__16vectorI17VkLayerPropertiesNS_9allocatorIS1_EEE8__appendEm = comdat any

$_ZN4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEE15sort_and_uniqueENS3_11__wrap_iterIPS6_EESH_ = comdat any

$_ZNSt3__16uniqueINS_11__wrap_iterIPN4base16BasicStringPieceIcNS_11char_traitsIcEEEEEENS2_8internal9NotFnImplINS9_9flat_treeIS6_NS2_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareEEEEET_SM_SM_T0_ = comdat any

$_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl = comdat any

$_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeE = comdat any

$_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeEl = comdat any

$_ZNSt3__121__insertion_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_PNS_15iterator_traitsISL_E10value_typeET_ = comdat any

$_ZNSt3__124__buffered_inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeE = comdat any

$_ZNSt3__16vectorIN3gpu24VulkanPhysicalDeviceInfoENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJEEEvDpOT_ = comdat any

$_ZNSt3__16vectorI23VkQueueFamilyPropertiesNS_9allocatorIS1_EEE8__appendEm = comdat any

@_ZN3gpu10crash_keys18vulkan_api_versionE = external global %"class.crash_reporter::CrashKeyStringCombined", align 8
@.str = private unnamed_addr constant [9 x i8] c"Chromium\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"VK_EXT_debug_report\00", align 1
@__const._ZN3gpu14VulkanInstance11CollectInfoEv.ycbcr_conversion_features = private unnamed_addr constant { i32, [4 x i8], i8*, i32, [4 x i8] } { i32 1000156004, [4 x i8] zeroinitializer, i8* null, i32 0, [4 x i8] zeroinitializer }, align 8
@__const._ZN3gpu14VulkanInstance11CollectInfoEv.protected_memory_feature = private unnamed_addr constant { i32, [4 x i8], i8*, i32, [4 x i8] } { i32 1000145001, [4 x i8] zeroinitializer, i8* null, i32 0, [4 x i8] zeroinitializer }, align 8
@.str.3 = private unnamed_addr constant [34 x i8] c"../../base/strings/string_piece.h\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1

@_ZN3gpu14VulkanInstanceC1Ev = hidden unnamed_addr alias void (%"class.gpu::VulkanInstance"*), void (%"class.gpu::VulkanInstance"*)* @_ZN3gpu14VulkanInstanceC2Ev
@_ZN3gpu14VulkanInstanceD1Ev = hidden unnamed_addr alias void (%"class.gpu::VulkanInstance"*), void (%"class.gpu::VulkanInstance"*)* @_ZN3gpu14VulkanInstanceD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gpu14VulkanInstanceC2Ev(%"class.gpu::VulkanInstance"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0
  tail call void @_ZN3gpu10VulkanInfoC1Ev(%"class.gpu::VulkanInfo"* %2) #14
  %3 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 1
  store %struct.VkInstance_T* null, %struct.VkInstance_T** %3, align 8
  %4 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 2
  store i8 0, i8* %4, align 8
  ret void
}

declare void @_ZN3gpu10VulkanInfoC1Ev(%"class.gpu::VulkanInfo"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gpu14VulkanInstanceD2Ev(%"class.gpu::VulkanInstance"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 1
  %3 = load %struct.VkInstance_T*, %struct.VkInstance_T** %2, align 8
  %4 = icmp eq %struct.VkInstance_T* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = tail call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %7 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %6, i64 0, i32 7, i32 0
  %8 = load void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)** %7, align 8
  tail call void %8(%struct.VkInstance_T* nonnull %3, %struct.VkAllocationCallbacks* null) #14
  store %struct.VkInstance_T* null, %struct.VkInstance_T** %2, align 8
  br label %9

9:                                                ; preds = %5, %1
  %10 = tail call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %11 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %10, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %9
  tail call void @_ZN4base19UnloadNativeLibraryEPv(i8* nonnull %12) #14
  store i8* null, i8** %11, align 8
  br label %15

15:                                               ; preds = %9, %14
  %16 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0
  tail call void @_ZN3gpu10VulkanInfoD1Ev(%"class.gpu::VulkanInfo"* %16) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gpu14VulkanInstance7DestroyEv(%"class.gpu::VulkanInstance"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 1
  %3 = load %struct.VkInstance_T*, %struct.VkInstance_T** %2, align 8
  %4 = icmp eq %struct.VkInstance_T* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = tail call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %7 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %6, i64 0, i32 7, i32 0
  %8 = load void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)** %7, align 8
  tail call void %8(%struct.VkInstance_T* nonnull %3, %struct.VkAllocationCallbacks* null) #14
  store %struct.VkInstance_T* null, %struct.VkInstance_T** %2, align 8
  br label %9

9:                                                ; preds = %1, %5
  %10 = tail call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %11 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %10, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %9
  tail call void @_ZN4base19UnloadNativeLibraryEPv(i8* nonnull %12) #14
  store i8* null, i8** %11, align 8
  br label %15

15:                                               ; preds = %9, %14
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3gpu10VulkanInfoD1Ev(%"class.gpu::VulkanInfo"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3gpu14VulkanInstance10InitializeERKNSt3__16vectorIPKcNS1_9allocatorIS4_EEEES9_(%"class.gpu::VulkanInstance"*, %"class.std::__1::vector.1"* readonly dereferenceable(24), %"class.std::__1::vector.1"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %struct.VkApplicationInfo, align 8
  %6 = alloca %"class.std::__1::vector.1", align 8
  %7 = alloca i32, align 4
  %8 = alloca %"class.std::__1::vector.1", align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.VkInstanceCreateInfo, align 8
  %11 = alloca %"class.base::internal::flat_tree", align 8
  %12 = alloca %"struct.std::__1::less", align 1
  %13 = tail call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %14 = tail call zeroext i1 @_ZN3gpu22VulkanFunctionPointers32BindUnassociatedFunctionPointersEv(%"struct.gpu::VulkanFunctionPointers"* %13) #14
  br i1 %14, label %15, label %437

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 0
  %17 = tail call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %18 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %17, i64 0, i32 2, i32 0
  %19 = load i32 (i32*)*, i32 (i32*)** %18, align 8
  %20 = tail call i32 %19(i32* %16) #14
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %437

22:                                               ; preds = %15
  %23 = load i32, i32* %16, align 8
  %24 = icmp ult i32 %23, 4198400
  br i1 %24, label %437, label %25

25:                                               ; preds = %22
  %26 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #14
  call void @_ZN3gpu17VkVersionToStringEj(%"class.std::__1::basic_string"* nonnull sret %4, i32 %23) #14
  %27 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %27, i64 0, i32 1, i32 0
  %29 = load i8, i8* %28, align 1
  %30 = icmp slt i8 %29, 0
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = select i1 %30, i8* %32, i8* %26
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = zext i8 %29 to i64
  %37 = select i1 %30, i64 %35, i64 %36
  call void @_ZN14crash_reporter8internal18CrashKeyStringImpl3SetEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.crash_reporter::internal::CrashKeyStringImpl"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys18vulkan_api_versionE, i64 0, i32 1, i32 0), i8* %33, i64 %37) #14
  %38 = call i1 @llvm.is.constant.i64(i64 %37) #14
  %39 = icmp ult i64 %37, 4294967296
  %40 = trunc i64 %37 to i32
  %41 = select i1 %39, i32 %40, i32 -1
  %42 = icmp ult i64 %37, 4294967295
  %43 = select i1 %42, i64 %37, i64 4294967295
  %44 = trunc i64 %43 to i32
  %45 = select i1 %38, i32 %44, i32 %41
  %46 = icmp ult i32 %45, 16
  %47 = select i1 %46, i32 %45, i32 16
  %48 = zext i32 %47 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys18vulkan_api_versionE, i64 0, i32 2, i32 1, i64 0), i8* align 1 %33, i64 %48, i1 false) #14
  call void @_ZN8crashpad10Annotation7SetSizeEj(%"class.crashpad::Annotation"* bitcast (%"class.crashpad::StringAnnotation"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys18vulkan_api_versionE, i64 0, i32 2) to %"class.crashpad::Annotation"*), i32 %47) #14
  %49 = load i8, i8* %28, align 1
  %50 = icmp slt i8 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %25
  %52 = load i8*, i8** %31, align 8
  call void @_ZdlPv(i8* %52) #15
  br label %53

53:                                               ; preds = %25, %51
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #14
  %54 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 1
  store i32 4198400, i32* %54, align 4
  %55 = bitcast %struct.VkApplicationInfo* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %55) #14
  %56 = getelementptr inbounds %struct.VkApplicationInfo, %struct.VkApplicationInfo* %5, i64 0, i32 2
  %57 = bitcast %struct.VkApplicationInfo* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 0, i64 48, i1 false)
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8** %56, align 8
  %58 = getelementptr inbounds %struct.VkApplicationInfo, %struct.VkApplicationInfo* %5, i64 0, i32 6
  store i32 4198400, i32* %58, align 4
  %59 = bitcast %"class.std::__1::vector.1"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %59) #14
  %60 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %6, i64 0, i32 0, i32 0
  %61 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %6, i64 0, i32 0, i32 1
  %62 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 0, i64 24, i1 false) #14
  %63 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %2, i64 0, i32 0, i32 1
  %64 = bitcast i8*** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %"class.std::__1::vector.1"* %2 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = sub i64 %65, %67
  %69 = ashr exact i64 %68, 3
  %70 = icmp eq i64 %68, 0
  br i1 %70, label %99, label %71

71:                                               ; preds = %53
  %72 = icmp ugt i64 %69, 2305843009213693951
  br i1 %72, label %73, label %75

73:                                               ; preds = %71
  %74 = bitcast %"class.std::__1::vector.1"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %74) #16
  unreachable

75:                                               ; preds = %71
  %76 = call i8* @_Znwm(i64 %68) #15
  %77 = bitcast i8* %76 to i8**
  %78 = bitcast i8*** %61 to i8**
  store i8* %76, i8** %78, align 8
  %79 = bitcast %"class.std::__1::vector.1"* %6 to i8**
  store i8* %76, i8** %79, align 8
  %80 = getelementptr inbounds i8*, i8** %77, i64 %69
  store i8** %80, i8*** %62, align 8
  %81 = bitcast i8*** %61 to i64*
  %82 = ptrtoint i8* %76 to i64
  %83 = icmp sgt i64 %68, 0
  br i1 %83, label %84, label %89

84:                                               ; preds = %75
  %85 = lshr exact i64 %68, 3
  %86 = inttoptr i64 %67 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %76, i8* align 8 %86, i64 %68, i1 false) #14
  %87 = getelementptr inbounds i8*, i8** %77, i64 %85
  %88 = ptrtoint i8** %87 to i64
  br label %89

89:                                               ; preds = %75, %84
  %90 = phi i64 [ %88, %84 ], [ %82, %75 ]
  store i64 %90, i64* %81, align 8
  %91 = inttoptr i64 %90 to i8**
  %92 = icmp ugt i8** %80, %91
  %93 = ptrtoint i8** %80 to i64
  br i1 %92, label %94, label %99

94:                                               ; preds = %89
  %95 = inttoptr i64 %90 to i64*
  store i64 0, i64* %95, align 8
  %96 = getelementptr inbounds i8*, i8** %91, i64 1
  %97 = ptrtoint i8** %96 to i64
  %98 = bitcast i8*** %61 to i64*
  store i64 %97, i64* %98, align 8
  br label %155

99:                                               ; preds = %53, %89
  %100 = phi i64 [ %93, %89 ], [ 0, %53 ]
  %101 = phi i8** [ %91, %89 ], [ null, %53 ]
  %102 = phi i64 [ %82, %89 ], [ 0, %53 ]
  %103 = phi i8** [ %77, %89 ], [ null, %53 ]
  %104 = phi i8* [ %76, %89 ], [ null, %53 ]
  %105 = phi i64 [ %90, %89 ], [ 0, %53 ]
  %106 = ptrtoint i8** %101 to i64
  %107 = bitcast i8*** %61 to i64*
  %108 = bitcast %"class.std::__1::vector.1"* %6 to i64*
  %109 = sub i64 %106, %102
  %110 = ashr exact i64 %109, 3
  %111 = add nsw i64 %110, 1
  %112 = icmp ugt i64 %111, 2305843009213693951
  br i1 %112, label %113, label %115

113:                                              ; preds = %99
  %114 = bitcast %"class.std::__1::vector.1"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %114) #16
  unreachable

115:                                              ; preds = %99
  %116 = bitcast i8*** %62 to i64*
  %117 = sub i64 %100, %102
  %118 = ashr exact i64 %117, 3
  %119 = icmp ult i64 %118, 1152921504606846975
  br i1 %119, label %120, label %128

120:                                              ; preds = %115
  %121 = ashr exact i64 %117, 2
  %122 = icmp ult i64 %121, %111
  %123 = select i1 %122, i64 %111, i64 %121
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %133, label %125

125:                                              ; preds = %120
  %126 = icmp ugt i64 %123, 2305843009213693951
  br i1 %126, label %127, label %128

127:                                              ; preds = %125
  call void @abort() #16
  unreachable

128:                                              ; preds = %125, %115
  %129 = phi i64 [ %123, %125 ], [ 2305843009213693951, %115 ]
  %130 = shl i64 %129, 3
  %131 = call i8* @_Znwm(i64 %130) #15
  %132 = bitcast i8* %131 to i8**
  br label %133

133:                                              ; preds = %128, %120
  %134 = phi i64 [ %129, %128 ], [ 0, %120 ]
  %135 = phi i8** [ %132, %128 ], [ null, %120 ]
  %136 = getelementptr inbounds i8*, i8** %135, i64 %110
  %137 = getelementptr inbounds i8*, i8** %135, i64 %134
  %138 = ptrtoint i8** %137 to i64
  %139 = bitcast i8** %136 to i64*
  store i64 0, i64* %139, align 8
  %140 = getelementptr inbounds i8*, i8** %136, i64 1
  %141 = ptrtoint i8** %140 to i64
  %142 = ptrtoint i8** %103 to i64
  %143 = sub i64 %105, %142
  %144 = ashr exact i64 %143, 3
  %145 = sub nsw i64 0, %144
  %146 = getelementptr inbounds i8*, i8** %136, i64 %145
  %147 = ptrtoint i8** %146 to i64
  %148 = icmp sgt i64 %143, 0
  br i1 %148, label %149, label %151

149:                                              ; preds = %133
  %150 = bitcast i8** %146 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %104, i64 %143, i1 false) #14
  br label %151

151:                                              ; preds = %149, %133
  store i64 %147, i64* %108, align 8
  store i64 %141, i64* %107, align 8
  store i64 %138, i64* %116, align 8
  %152 = icmp eq i8** %103, null
  br i1 %152, label %155, label %153

153:                                              ; preds = %151
  call void @_ZdlPv(i8* %104) #15
  %154 = load i8**, i8*** %61, align 8
  br label %155

155:                                              ; preds = %94, %151, %153
  %156 = phi i8** [ %96, %94 ], [ %140, %151 ], [ %154, %153 ]
  %157 = load i8**, i8*** %60, align 8
  %158 = icmp eq i8** %157, %156
  br i1 %158, label %210, label %159

159:                                              ; preds = %155
  %160 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 3
  %161 = icmp eq %"class.std::__1::vector.1"* %160, %1
  %162 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %1, i64 0, i32 0, i32 0
  %163 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %1, i64 0, i32 0, i32 1
  %164 = bitcast i32* %7 to i8*
  %165 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 2
  %166 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 2, i32 0, i32 1
  %167 = bitcast %struct.VkExtensionProperties** %166 to i64*
  %168 = bitcast %"class.std::__1::vector"* %165 to i64*
  %169 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %165, i64 0, i32 0, i32 0
  br label %170

170:                                              ; preds = %159, %206
  %171 = phi i8** [ %157, %159 ], [ %207, %206 ]
  %172 = load i8*, i8** %171, align 8
  br i1 %161, label %176, label %173

173:                                              ; preds = %170
  %174 = load i8**, i8*** %162, align 8
  %175 = load i8**, i8*** %163, align 8
  call void @_ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.1"* %160, i8** %174, i8** %175) #14
  br label %176

176:                                              ; preds = %170, %173
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %164) #14
  store i32 0, i32* %7, align 4
  %177 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %178 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %177, i64 0, i32 4, i32 0
  %179 = load i32 (i8*, i32*, %struct.VkExtensionProperties*)*, i32 (i8*, i32*, %struct.VkExtensionProperties*)** %178, align 8
  %180 = call i32 %179(i8* %172, i32* nonnull %7, %struct.VkExtensionProperties* null) #14
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %209

182:                                              ; preds = %176
  %183 = load i64, i64* %167, align 8
  %184 = load i64, i64* %168, align 8
  %185 = sub i64 %183, %184
  %186 = sdiv exact i64 %185, 260
  %187 = load i32, i32* %7, align 4
  %188 = zext i32 %187 to i64
  %189 = add nsw i64 %186, %188
  %190 = icmp ult i64 %186, %189
  %191 = inttoptr i64 %184 to %struct.VkExtensionProperties*
  br i1 %190, label %192, label %194

192:                                              ; preds = %182
  call void @_ZNSt3__16vectorI21VkExtensionPropertiesNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector"* %165, i64 %188) #14
  %193 = load %struct.VkExtensionProperties*, %struct.VkExtensionProperties** %169, align 8
  br label %198

194:                                              ; preds = %182
  %195 = icmp ugt i64 %186, %189
  br i1 %195, label %196, label %198

196:                                              ; preds = %194
  %197 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %191, i64 %189
  store %struct.VkExtensionProperties* %197, %struct.VkExtensionProperties** %166, align 8
  br label %198

198:                                              ; preds = %192, %194, %196
  %199 = phi %struct.VkExtensionProperties* [ %193, %192 ], [ %191, %194 ], [ %191, %196 ]
  %200 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %199, i64 %186
  %201 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %202 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %201, i64 0, i32 4, i32 0
  %203 = load i32 (i8*, i32*, %struct.VkExtensionProperties*)*, i32 (i8*, i32*, %struct.VkExtensionProperties*)** %202, align 8
  %204 = call i32 %203(i8* %172, i32* nonnull %7, %struct.VkExtensionProperties* %200) #14
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %209

206:                                              ; preds = %198
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %164) #14
  %207 = getelementptr inbounds i8*, i8** %171, i64 1
  %208 = icmp eq i8** %207, %156
  br i1 %208, label %210, label %170

209:                                              ; preds = %198, %176
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %164) #14
  br label %428

210:                                              ; preds = %206, %155
  %211 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %212 = load %struct.VkExtensionProperties*, %struct.VkExtensionProperties** %211, align 8
  %213 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 2, i32 0, i32 1
  %214 = load %struct.VkExtensionProperties*, %struct.VkExtensionProperties** %213, align 8
  %215 = icmp eq %struct.VkExtensionProperties* %212, %214
  br i1 %215, label %225, label %216

216:                                              ; preds = %210
  %217 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 2
  %218 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 3
  %219 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 3, i32 0, i32 1
  %220 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %221 = bitcast i8*** %219 to i64*
  %222 = bitcast %"class.std::__1::vector.1"* %218 to i64*
  %223 = bitcast i8*** %220 to i64*
  %224 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %218, i64 0, i32 0, i32 0
  br label %262

225:                                              ; preds = %329, %210
  %226 = bitcast %"class.std::__1::vector.1"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %226) #14
  %227 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %8, i64 0, i32 0, i32 0
  %228 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %8, i64 0, i32 0, i32 1
  %229 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %226, i8 0, i64 24, i1 false) #14
  %230 = load i64, i64* %64, align 8
  %231 = load i64, i64* %66, align 8
  %232 = sub i64 %230, %231
  %233 = ashr exact i64 %232, 3
  %234 = icmp eq i64 %232, 0
  br i1 %234, label %255, label %235

235:                                              ; preds = %225
  %236 = icmp ugt i64 %233, 2305843009213693951
  br i1 %236, label %237, label %239

237:                                              ; preds = %235
  %238 = bitcast %"class.std::__1::vector.1"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %238) #16
  unreachable

239:                                              ; preds = %235
  %240 = call i8* @_Znwm(i64 %232) #15
  %241 = bitcast i8* %240 to i8**
  %242 = bitcast i8*** %228 to i8**
  store i8* %240, i8** %242, align 8
  %243 = bitcast %"class.std::__1::vector.1"* %8 to i8**
  store i8* %240, i8** %243, align 8
  %244 = getelementptr inbounds i8*, i8** %241, i64 %233
  store i8** %244, i8*** %229, align 8
  %245 = bitcast i8*** %228 to i64*
  %246 = ptrtoint i8* %240 to i64
  %247 = icmp sgt i64 %232, 0
  br i1 %247, label %248, label %253

248:                                              ; preds = %239
  %249 = lshr exact i64 %232, 3
  %250 = inttoptr i64 %231 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %240, i8* align 8 %250, i64 %232, i1 false) #14
  %251 = getelementptr inbounds i8*, i8** %241, i64 %249
  %252 = ptrtoint i8** %251 to i64
  br label %253

253:                                              ; preds = %248, %239
  %254 = phi i64 [ %252, %248 ], [ %246, %239 ]
  store i64 %254, i64* %245, align 8
  br label %255

255:                                              ; preds = %225, %253
  %256 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %256) #14
  store i32 0, i32* %9, align 4
  %257 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %258 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %257, i64 0, i32 5, i32 0
  %259 = load i32 (i32*, %struct.VkLayerProperties*)*, i32 (i32*, %struct.VkLayerProperties*)** %258, align 8
  %260 = call i32 %259(i32* nonnull %9, %struct.VkLayerProperties* null) #14
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %332, label %419

262:                                              ; preds = %216, %329
  %263 = phi %struct.VkExtensionProperties* [ %212, %216 ], [ %330, %329 ]
  %264 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %263, i64 0, i32 0, i64 0
  %265 = call i32 @bcmp(i8* %264, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i64 20)
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %329

267:                                              ; preds = %262
  store i8 1, i8* %217, align 8
  %268 = load i8**, i8*** %219, align 8
  %269 = load i8**, i8*** %220, align 8
  %270 = icmp ult i8** %268, %269
  %271 = ptrtoint i8** %269 to i64
  br i1 %270, label %272, label %276

272:                                              ; preds = %267
  %273 = bitcast i8** %268 to i64*
  store i64 ptrtoint ([20 x i8]* @.str.1 to i64), i64* %273, align 8
  %274 = getelementptr inbounds i8*, i8** %268, i64 1
  %275 = ptrtoint i8** %274 to i64
  store i64 %275, i64* %221, align 8
  br label %329

276:                                              ; preds = %267
  %277 = ptrtoint i8** %268 to i64
  %278 = load i64, i64* %222, align 8
  %279 = sub i64 %277, %278
  %280 = ashr exact i64 %279, 3
  %281 = add nsw i64 %280, 1
  %282 = icmp ugt i64 %281, 2305843009213693951
  br i1 %282, label %283, label %285

283:                                              ; preds = %276
  %284 = bitcast %"class.std::__1::vector.1"* %218 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %284) #16
  unreachable

285:                                              ; preds = %276
  %286 = sub i64 %271, %278
  %287 = ashr exact i64 %286, 3
  %288 = icmp ult i64 %287, 1152921504606846975
  br i1 %288, label %289, label %297

289:                                              ; preds = %285
  %290 = ashr exact i64 %286, 2
  %291 = icmp ult i64 %290, %281
  %292 = select i1 %291, i64 %281, i64 %290
  %293 = icmp eq i64 %292, 0
  br i1 %293, label %302, label %294

294:                                              ; preds = %289
  %295 = icmp ugt i64 %292, 2305843009213693951
  br i1 %295, label %296, label %297

296:                                              ; preds = %294
  call void @abort() #16
  unreachable

297:                                              ; preds = %294, %285
  %298 = phi i64 [ %292, %294 ], [ 2305843009213693951, %285 ]
  %299 = shl i64 %298, 3
  %300 = call i8* @_Znwm(i64 %299) #15
  %301 = bitcast i8* %300 to i8**
  br label %302

302:                                              ; preds = %297, %289
  %303 = phi i64 [ %298, %297 ], [ 0, %289 ]
  %304 = phi i8** [ %301, %297 ], [ null, %289 ]
  %305 = getelementptr inbounds i8*, i8** %304, i64 %280
  %306 = getelementptr inbounds i8*, i8** %304, i64 %303
  %307 = ptrtoint i8** %306 to i64
  %308 = bitcast i8** %305 to i64*
  store i64 ptrtoint ([20 x i8]* @.str.1 to i64), i64* %308, align 8
  %309 = getelementptr inbounds i8*, i8** %305, i64 1
  %310 = ptrtoint i8** %309 to i64
  %311 = load i8**, i8*** %224, align 8
  %312 = load i64, i64* %221, align 8
  %313 = ptrtoint i8** %311 to i64
  %314 = sub i64 %312, %313
  %315 = ashr exact i64 %314, 3
  %316 = sub nsw i64 0, %315
  %317 = getelementptr inbounds i8*, i8** %305, i64 %316
  %318 = ptrtoint i8** %317 to i64
  %319 = icmp sgt i64 %314, 0
  br i1 %319, label %320, label %324

320:                                              ; preds = %302
  %321 = bitcast i8** %317 to i8*
  %322 = bitcast i8** %311 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %321, i8* align 8 %322, i64 %314, i1 false) #14
  %323 = load i8**, i8*** %224, align 8
  br label %324

324:                                              ; preds = %320, %302
  %325 = phi i8** [ %311, %302 ], [ %323, %320 ]
  store i64 %318, i64* %222, align 8
  store i64 %310, i64* %221, align 8
  store i64 %307, i64* %223, align 8
  %326 = icmp eq i8** %325, null
  br i1 %326, label %329, label %327

327:                                              ; preds = %324
  %328 = bitcast i8** %325 to i8*
  call void @_ZdlPv(i8* %328) #15
  br label %329

329:                                              ; preds = %327, %324, %272, %262
  %330 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %263, i64 1
  %331 = icmp eq %struct.VkExtensionProperties* %330, %214
  br i1 %331, label %225, label %262

332:                                              ; preds = %255
  %333 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 4
  %334 = load i32, i32* %9, align 4
  %335 = zext i32 %334 to i64
  %336 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 4, i32 0, i32 1
  %337 = bitcast %struct.VkLayerProperties** %336 to i64*
  %338 = load i64, i64* %337, align 8
  %339 = bitcast %"class.std::__1::vector.8"* %333 to i64*
  %340 = load i64, i64* %339, align 8
  %341 = sub i64 %338, %340
  %342 = sdiv exact i64 %341, 520
  %343 = icmp ult i64 %342, %335
  %344 = inttoptr i64 %340 to %struct.VkLayerProperties*
  br i1 %343, label %345, label %349

345:                                              ; preds = %332
  %346 = sub nsw i64 %335, %342
  call void @_ZNSt3__16vectorI17VkLayerPropertiesNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector.8"* %333, i64 %346) #14
  %347 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %333, i64 0, i32 0, i32 0
  %348 = load %struct.VkLayerProperties*, %struct.VkLayerProperties** %347, align 8
  br label %353

349:                                              ; preds = %332
  %350 = icmp ugt i64 %342, %335
  br i1 %350, label %351, label %353

351:                                              ; preds = %349
  %352 = getelementptr inbounds %struct.VkLayerProperties, %struct.VkLayerProperties* %344, i64 %335
  store %struct.VkLayerProperties* %352, %struct.VkLayerProperties** %336, align 8
  br label %353

353:                                              ; preds = %345, %349, %351
  %354 = phi %struct.VkLayerProperties* [ %348, %345 ], [ %344, %349 ], [ %344, %351 ]
  %355 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %356 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %355, i64 0, i32 5, i32 0
  %357 = load i32 (i32*, %struct.VkLayerProperties*)*, i32 (i32*, %struct.VkLayerProperties*)** %356, align 8
  %358 = call i32 %357(i32* nonnull %9, %struct.VkLayerProperties* %354) #14
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %360, label %419

360:                                              ; preds = %353
  %361 = bitcast %struct.VkInstanceCreateInfo* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %361) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %361, i8 -86, i64 56, i1 false)
  %362 = getelementptr inbounds %struct.VkInstanceCreateInfo, %struct.VkInstanceCreateInfo* %10, i64 0, i32 0
  store i32 1, i32* %362, align 8
  %363 = getelementptr inbounds %struct.VkInstanceCreateInfo, %struct.VkInstanceCreateInfo* %10, i64 0, i32 1
  store i8* null, i8** %363, align 8
  %364 = getelementptr inbounds %struct.VkInstanceCreateInfo, %struct.VkInstanceCreateInfo* %10, i64 0, i32 2
  store i32 0, i32* %364, align 8
  %365 = getelementptr inbounds %struct.VkInstanceCreateInfo, %struct.VkInstanceCreateInfo* %10, i64 0, i32 3
  store %struct.VkApplicationInfo* %5, %struct.VkApplicationInfo** %365, align 8
  %366 = getelementptr inbounds %struct.VkInstanceCreateInfo, %struct.VkInstanceCreateInfo* %10, i64 0, i32 4
  %367 = bitcast i8*** %228 to i64*
  %368 = load i64, i64* %367, align 8
  %369 = bitcast %"class.std::__1::vector.1"* %8 to i64*
  %370 = load i64, i64* %369, align 8
  %371 = sub i64 %368, %370
  %372 = lshr exact i64 %371, 3
  %373 = trunc i64 %372 to i32
  store i32 %373, i32* %366, align 8
  %374 = getelementptr inbounds %struct.VkInstanceCreateInfo, %struct.VkInstanceCreateInfo* %10, i64 0, i32 5
  %375 = bitcast i8*** %374 to i64*
  store i64 %370, i64* %375, align 8
  %376 = getelementptr inbounds %struct.VkInstanceCreateInfo, %struct.VkInstanceCreateInfo* %10, i64 0, i32 6
  %377 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 3
  %378 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 3, i32 0, i32 1
  %379 = bitcast i8*** %378 to i64*
  %380 = load i64, i64* %379, align 8
  %381 = bitcast %"class.std::__1::vector.1"* %377 to i64*
  %382 = load i64, i64* %381, align 8
  %383 = sub i64 %380, %382
  %384 = lshr exact i64 %383, 3
  %385 = trunc i64 %384 to i32
  store i32 %385, i32* %376, align 8
  %386 = getelementptr inbounds %struct.VkInstanceCreateInfo, %struct.VkInstanceCreateInfo* %10, i64 0, i32 7
  %387 = bitcast i8*** %386 to i64*
  store i64 %382, i64* %387, align 8
  %388 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 1
  %389 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %390 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %389, i64 0, i32 3, i32 0
  %391 = load i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)*, i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)** %390, align 8
  %392 = call i32 %391(%struct.VkInstanceCreateInfo* nonnull %10, %struct.VkAllocationCallbacks* null, %struct.VkInstance_T** %388) #14
  %393 = icmp eq i32 %392, 0
  br i1 %393, label %394, label %417

394:                                              ; preds = %360
  %395 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %377, i64 0, i32 0, i32 0
  %396 = bitcast %"class.base::internal::flat_tree"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %396) #14
  %397 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %11, i64 0, i32 0, i32 0, i32 0
  %398 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %11, i64 0, i32 0, i32 0, i32 1
  %399 = bitcast %"class.base::internal::flat_tree"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %399, i8 -86, i64 24, i1 false)
  %400 = load i8**, i8*** %395, align 8
  %401 = load i8**, i8*** %378, align 8
  %402 = getelementptr inbounds %"struct.std::__1::less", %"struct.std::__1::less"* %12, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %402) #14
  call void @_ZN4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEEC2INS3_11__wrap_iterIPPKcEEEET_SL_RKS9_(%"class.base::internal::flat_tree"* nonnull %11, i8** %400, i8** %401, %"struct.std::__1::less"* nonnull dereferenceable(1) %12)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %402) #14
  %403 = load %struct.VkInstance_T*, %struct.VkInstance_T** %388, align 8
  %404 = load i32, i32* %54, align 4
  %405 = call zeroext i1 @_ZN3gpu22VulkanFunctionPointers28BindInstanceFunctionPointersEP12VkInstance_TjRKN4base8internal9flat_treeINS3_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS3_8identityENS7_4lessIvEENS7_6vectorISA_NS7_9allocatorISA_EEEEEE(%"struct.gpu::VulkanFunctionPointers"* %13, %struct.VkInstance_T* %403, i32 %404, %"class.base::internal::flat_tree"* nonnull dereferenceable(24) %11) #14
  br i1 %405, label %406, label %408

406:                                              ; preds = %394
  %407 = call zeroext i1 @_ZN3gpu14VulkanInstance11CollectInfoEv(%"class.gpu::VulkanInstance"* %0)
  br label %408

408:                                              ; preds = %406, %394
  %409 = phi i1 [ false, %394 ], [ %407, %406 ]
  %410 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %397, align 8
  %411 = icmp eq %"class.base::BasicStringPiece"* %410, null
  br i1 %411, label %416, label %412

412:                                              ; preds = %408
  %413 = ptrtoint %"class.base::BasicStringPiece"* %410 to i64
  %414 = bitcast %"class.base::BasicStringPiece"** %398 to i64*
  store i64 %413, i64* %414, align 8
  %415 = bitcast %"class.base::BasicStringPiece"* %410 to i8*
  call void @_ZdlPv(i8* %415) #15
  br label %416

416:                                              ; preds = %408, %412
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %396) #14
  br label %417

417:                                              ; preds = %360, %416
  %418 = phi i1 [ %409, %416 ], [ false, %360 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %361) #14
  br label %419

419:                                              ; preds = %353, %255, %417
  %420 = phi i1 [ %418, %417 ], [ false, %255 ], [ false, %353 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %256) #14
  %421 = load i8**, i8*** %227, align 8
  %422 = icmp eq i8** %421, null
  br i1 %422, label %427, label %423

423:                                              ; preds = %419
  %424 = ptrtoint i8** %421 to i64
  %425 = bitcast i8*** %228 to i64*
  store i64 %424, i64* %425, align 8
  %426 = bitcast i8** %421 to i8*
  call void @_ZdlPv(i8* %426) #15
  br label %427

427:                                              ; preds = %419, %423
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %226) #14
  br label %428

428:                                              ; preds = %209, %427
  %429 = phi i1 [ %420, %427 ], [ false, %209 ]
  %430 = load i8**, i8*** %60, align 8
  %431 = icmp eq i8** %430, null
  br i1 %431, label %436, label %432

432:                                              ; preds = %428
  %433 = ptrtoint i8** %430 to i64
  %434 = bitcast i8*** %61 to i64*
  store i64 %433, i64* %434, align 8
  %435 = bitcast i8** %430 to i8*
  call void @_ZdlPv(i8* %435) #15
  br label %436

436:                                              ; preds = %428, %432
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %59) #14
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %55) #14
  br label %437

437:                                              ; preds = %436, %15, %22, %3
  %438 = phi i1 [ false, %3 ], [ %429, %436 ], [ false, %15 ], [ false, %22 ]
  ret i1 %438
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() local_unnamed_addr #1

declare zeroext i1 @_ZN3gpu22VulkanFunctionPointers32BindUnassociatedFunctionPointersEv(%"struct.gpu::VulkanFunctionPointers"*) local_unnamed_addr #1

declare void @_ZN3gpu17VkVersionToStringEj(%"class.std::__1::basic_string"* sret, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEEC2INS3_11__wrap_iterIPPKcEEEET_SL_RKS9_(%"class.base::internal::flat_tree"*, i8**, i8**, %"struct.std::__1::less"* dereferenceable(1)) unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.base::internal::flat_tree"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #14
  %7 = ptrtoint i8** %1 to i64
  %8 = ptrtoint i8** %2 to i64
  %9 = sub i64 %8, %7
  %10 = ashr exact i64 %9, 3
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %54, label %12

12:                                               ; preds = %4
  %13 = icmp ugt i64 %10, 1152921504606846975
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.base::internal::flat_tree"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #16
  unreachable

16:                                               ; preds = %12
  %17 = shl i64 %9, 1
  %18 = tail call i8* @_Znwm(i64 %17) #15
  %19 = bitcast i8* %18 to %"class.base::BasicStringPiece"*
  %20 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 1
  %21 = bitcast %"class.base::BasicStringPiece"** %20 to i8**
  store i8* %18, i8** %21, align 8
  %22 = bitcast %"class.base::internal::flat_tree"* %0 to i8**
  store i8* %18, i8** %22, align 8
  %23 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %19, i64 %10
  %24 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store %"class.base::BasicStringPiece"* %23, %"class.base::BasicStringPiece"** %24, align 8
  %25 = bitcast %"class.base::BasicStringPiece"** %20 to i64*
  %26 = ptrtoint i8* %18 to i64
  %27 = icmp eq i8** %1, %2
  br i1 %27, label %50, label %28

28:                                               ; preds = %16
  %29 = bitcast %"class.logging::CheckError"* %5 to i8*
  %30 = bitcast i8* %18 to %"class.base::BasicStringPiece"*
  br label %31

31:                                               ; preds = %42, %28
  %32 = phi %"class.base::BasicStringPiece"* [ %30, %28 ], [ %44, %42 ]
  %33 = phi i8** [ %1, %28 ], [ %43, %42 ]
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %32, i64 0, i32 0
  store i8* %34, i8** %35, align 8
  %36 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %32, i64 0, i32 1
  %37 = icmp eq i8* %34, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %31
  %39 = call i64 @strlen(i8* nonnull %34) #14
  store i64 %39, i64* %36, align 8
  br label %42

40:                                               ; preds = %31
  store i64 0, i64* %36, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #14
  %41 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #14
  br label %42

42:                                               ; preds = %40, %38
  %43 = getelementptr inbounds i8*, i8** %33, i64 1
  %44 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %32, i64 1
  %45 = icmp eq i8** %43, %2
  br i1 %45, label %46, label %31

46:                                               ; preds = %42
  %47 = ptrtoint %"class.base::BasicStringPiece"* %44 to i64
  %48 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %48, align 8
  br label %50

50:                                               ; preds = %16, %46
  %51 = phi %"class.base::BasicStringPiece"* [ %19, %16 ], [ %49, %46 ]
  %52 = phi i64 [ %26, %16 ], [ %47, %46 ]
  store i64 %52, i64* %25, align 8
  %53 = inttoptr i64 %52 to %"class.base::BasicStringPiece"*
  br label %54

54:                                               ; preds = %4, %50
  %55 = phi %"class.base::BasicStringPiece"* [ null, %4 ], [ %53, %50 ]
  %56 = phi %"class.base::BasicStringPiece"* [ null, %4 ], [ %51, %50 ]
  call void @_ZN4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEE15sort_and_uniqueENS3_11__wrap_iterIPS6_EESH_(%"class.base::internal::flat_tree"* %0, %"class.base::BasicStringPiece"* %56, %"class.base::BasicStringPiece"* %55) #14
  ret void
}

declare zeroext i1 @_ZN3gpu22VulkanFunctionPointers28BindInstanceFunctionPointersEP12VkInstance_TjRKN4base8internal9flat_treeINS3_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS3_8identityENS7_4lessIvEENS7_6vectorISA_NS7_9allocatorISA_EEEEEE(%"struct.gpu::VulkanFunctionPointers"*, %struct.VkInstance_T*, i32, %"class.base::internal::flat_tree"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3gpu14VulkanInstance11CollectInfoEv(%"class.gpu::VulkanInstance"*) local_unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.VkPhysicalDeviceProperties2, align 8
  %4 = alloca %struct.VkPhysicalDeviceSamplerYcbcrConversionFeatures, align 8
  %5 = alloca %struct.VkPhysicalDeviceProtectedMemoryFeatures, align 8
  %6 = alloca %struct.VkPhysicalDeviceFeatures2, align 8
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #14
  store i32 0, i32* %2, align 4
  %8 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 1
  %9 = load %struct.VkInstance_T*, %struct.VkInstance_T** %8, align 8
  %10 = tail call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %11 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %10, i64 0, i32 10, i32 0
  %12 = load i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)** %11, align 8
  %13 = call i32 %12(%struct.VkInstance_T* %9, i32* nonnull %2, %struct.VkPhysicalDevice_T** null) #14
  %14 = icmp ne i32 %13, 0
  %15 = load i32, i32* %2, align 4
  %16 = icmp eq i32 %15, 0
  %17 = or i1 %14, %16
  br i1 %17, label %171, label %18

18:                                               ; preds = %1
  %19 = zext i32 %15 to i64
  %20 = shl nuw nsw i64 %19, 3
  %21 = call i8* @_Znwm(i64 %20) #15
  %22 = bitcast i8* %21 to %struct.VkPhysicalDevice_T**
  %23 = ptrtoint i8* %21 to i64
  %24 = getelementptr inbounds %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %22, i64 %19
  %25 = add nsw i64 %19, -1
  %26 = getelementptr %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %22, i64 %25
  %27 = ptrtoint %struct.VkPhysicalDevice_T** %26 to i64
  %28 = sub i64 8, %23
  %29 = add i64 %28, %27
  %30 = and i64 %29, -8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 %30, i1 false) #14
  %31 = load %struct.VkInstance_T*, %struct.VkInstance_T** %8, align 8
  %32 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %33 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %32, i64 0, i32 10, i32 0
  %34 = load i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)** %33, align 8
  %35 = call i32 %34(%struct.VkInstance_T* %31, i32* nonnull %2, %struct.VkPhysicalDevice_T** nonnull %22) #14
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %169

37:                                               ; preds = %18
  %38 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 5
  %39 = load i32, i32* %2, align 4
  %40 = zext i32 %39 to i64
  call void @_ZNSt3__16vectorIN3gpu24VulkanPhysicalDeviceInfoENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.15"* %38, i64 %40)
  %41 = icmp eq %struct.VkPhysicalDevice_T** %24, %22
  br i1 %41, label %169, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 5, i32 0, i32 1
  %44 = getelementptr inbounds %"class.gpu::VulkanInstance", %"class.gpu::VulkanInstance"* %0, i64 0, i32 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %45 = bitcast %"class.gpu::VulkanPhysicalDeviceInfo"** %43 to i64*
  %46 = bitcast %struct.VkPhysicalDeviceProperties2* %3 to i8*
  %47 = getelementptr inbounds %struct.VkPhysicalDeviceProperties2, %struct.VkPhysicalDeviceProperties2* %3, i64 0, i32 0
  %48 = getelementptr inbounds %struct.VkPhysicalDeviceProperties2, %struct.VkPhysicalDeviceProperties2* %3, i64 0, i32 1
  %49 = bitcast i8** %48 to %struct.VkPhysicalDeviceDriverProperties**
  %50 = bitcast %struct.VkPhysicalDeviceSamplerYcbcrConversionFeatures* %4 to i8*
  %51 = bitcast %struct.VkPhysicalDeviceProtectedMemoryFeatures* %5 to i8*
  %52 = bitcast %struct.VkPhysicalDeviceFeatures2* %6 to i8*
  %53 = getelementptr inbounds %struct.VkPhysicalDeviceFeatures2, %struct.VkPhysicalDeviceFeatures2* %6, i64 0, i32 0
  %54 = getelementptr inbounds %struct.VkPhysicalDeviceFeatures2, %struct.VkPhysicalDeviceFeatures2* %6, i64 0, i32 1
  %55 = bitcast i8** %54 to %struct.VkPhysicalDeviceSamplerYcbcrConversionFeatures**
  %56 = getelementptr inbounds %struct.VkPhysicalDeviceSamplerYcbcrConversionFeatures, %struct.VkPhysicalDeviceSamplerYcbcrConversionFeatures* %4, i64 0, i32 1
  %57 = bitcast i8** %56 to %struct.VkPhysicalDeviceProtectedMemoryFeatures**
  %58 = getelementptr inbounds %struct.VkPhysicalDeviceFeatures2, %struct.VkPhysicalDeviceFeatures2* %6, i64 0, i32 2
  %59 = bitcast %struct.VkPhysicalDeviceFeatures* %58 to i8*
  %60 = getelementptr inbounds %struct.VkPhysicalDeviceSamplerYcbcrConversionFeatures, %struct.VkPhysicalDeviceSamplerYcbcrConversionFeatures* %4, i64 0, i32 2
  %61 = getelementptr inbounds %struct.VkPhysicalDeviceProtectedMemoryFeatures, %struct.VkPhysicalDeviceProtectedMemoryFeatures* %5, i64 0, i32 2
  br label %62

62:                                               ; preds = %42, %166
  %63 = phi %struct.VkPhysicalDevice_T** [ %22, %42 ], [ %167, %166 ]
  %64 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %63, align 8
  %65 = load %"class.gpu::VulkanPhysicalDeviceInfo"*, %"class.gpu::VulkanPhysicalDeviceInfo"** %43, align 8
  %66 = load %"class.gpu::VulkanPhysicalDeviceInfo"*, %"class.gpu::VulkanPhysicalDeviceInfo"** %44, align 8
  %67 = icmp ult %"class.gpu::VulkanPhysicalDeviceInfo"* %65, %66
  br i1 %67, label %68, label %71

68:                                               ; preds = %62
  call void @_ZN3gpu24VulkanPhysicalDeviceInfoC1Ev(%"class.gpu::VulkanPhysicalDeviceInfo"* %65) #14
  %69 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %65, i64 1
  %70 = ptrtoint %"class.gpu::VulkanPhysicalDeviceInfo"* %69 to i64
  store i64 %70, i64* %45, align 8
  br label %73

71:                                               ; preds = %62
  call void @_ZNSt3__16vectorIN3gpu24VulkanPhysicalDeviceInfoENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJEEEvDpOT_(%"class.std::__1::vector.15"* %38) #14
  %72 = load %"class.gpu::VulkanPhysicalDeviceInfo"*, %"class.gpu::VulkanPhysicalDeviceInfo"** %43, align 8
  br label %73

73:                                               ; preds = %68, %71
  %74 = phi %"class.gpu::VulkanPhysicalDeviceInfo"* [ %69, %68 ], [ %72, %71 ]
  %75 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %74, i64 -1
  %76 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %75, i64 0, i32 0
  store %struct.VkPhysicalDevice_T* %64, %struct.VkPhysicalDevice_T** %76, align 8
  %77 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %74, i64 -1, i32 1
  %78 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %79 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %78, i64 0, i32 18, i32 0
  %80 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)** %79, align 8
  call void %80(%struct.VkPhysicalDevice_T* %64, %struct.VkPhysicalDeviceProperties* %77) #14
  store i32 0, i32* %2, align 4
  %81 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %82 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %81, i64 0, i32 8, i32 0
  %83 = load i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)** %82, align 8
  %84 = call i32 %83(%struct.VkPhysicalDevice_T* %64, i8* null, i32* nonnull %2, %struct.VkExtensionProperties* null) #14
  %85 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %74, i64 -1, i32 3
  %86 = load i32, i32* %2, align 4
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %74, i64 -1, i32 3, i32 0, i32 1
  %89 = bitcast %struct.VkExtensionProperties** %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast %"class.std::__1::vector"* %85 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %90, %92
  %94 = sdiv exact i64 %93, 260
  %95 = icmp ult i64 %94, %87
  %96 = inttoptr i64 %92 to %struct.VkExtensionProperties*
  br i1 %95, label %97, label %101

97:                                               ; preds = %73
  %98 = sub nsw i64 %87, %94
  call void @_ZNSt3__16vectorI21VkExtensionPropertiesNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector"* %85, i64 %98) #14
  %99 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %85, i64 0, i32 0, i32 0
  %100 = load %struct.VkExtensionProperties*, %struct.VkExtensionProperties** %99, align 8
  br label %105

101:                                              ; preds = %73
  %102 = icmp ugt i64 %94, %87
  br i1 %102, label %103, label %105

103:                                              ; preds = %101
  %104 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %96, i64 %87
  store %struct.VkExtensionProperties* %104, %struct.VkExtensionProperties** %88, align 8
  br label %105

105:                                              ; preds = %97, %101, %103
  %106 = phi %struct.VkExtensionProperties* [ %100, %97 ], [ %96, %101 ], [ %96, %103 ]
  %107 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %108 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %107, i64 0, i32 8, i32 0
  %109 = load i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)** %108, align 8
  %110 = call i32 %109(%struct.VkPhysicalDevice_T* %64, i8* null, i32* nonnull %2, %struct.VkExtensionProperties* %106) #14
  %111 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %77, i64 0, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = icmp ugt i32 %112, 4198399
  br i1 %113, label %114, label %135

114:                                              ; preds = %105
  %115 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %74, i64 -1, i32 2, i32 0
  store i32 1000196000, i32* %115, align 8
  %116 = bitcast %"class.gpu::VulkanPhysicalDeviceInfo"* %75 to i8*
  %117 = getelementptr inbounds i8, i8* %116, i64 836
  call void @llvm.memset.p0i8.i64(i8* align 4 %117, i8 0, i64 532, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 840, i8* nonnull %46) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 0, i64 840, i1 false)
  store i32 1000059001, i32* %47, align 8
  %118 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %74, i64 -1, i32 2
  store %struct.VkPhysicalDeviceDriverProperties* %118, %struct.VkPhysicalDeviceDriverProperties** %49, align 8
  %119 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %120 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %119, i64 0, i32 19, i32 0
  %121 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)** %120, align 8
  call void %121(%struct.VkPhysicalDevice_T* %64, %struct.VkPhysicalDeviceProperties2* nonnull %3) #14
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %50) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %50, i8* align 8 bitcast ({ i32, [4 x i8], i8*, i32, [4 x i8] }* @__const._ZN3gpu14VulkanInstance11CollectInfoEv.ycbcr_conversion_features to i8*), i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* align 8 bitcast ({ i32, [4 x i8], i8*, i32, [4 x i8] }* @__const._ZN3gpu14VulkanInstance11CollectInfoEv.protected_memory_feature to i8*), i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %52) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %52, i8 0, i64 240, i1 false)
  store i32 1000059000, i32* %53, align 8
  store %struct.VkPhysicalDeviceSamplerYcbcrConversionFeatures* %4, %struct.VkPhysicalDeviceSamplerYcbcrConversionFeatures** %55, align 8
  store %struct.VkPhysicalDeviceProtectedMemoryFeatures* %5, %struct.VkPhysicalDeviceProtectedMemoryFeatures** %57, align 8
  %122 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %123 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %122, i64 0, i32 12, i32 0
  %124 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)** %123, align 8
  call void %124(%struct.VkPhysicalDevice_T* %64, %struct.VkPhysicalDeviceFeatures2* nonnull %6) #14
  %125 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %74, i64 -1, i32 4
  %126 = bitcast %struct.VkPhysicalDeviceFeatures* %125 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %126, i8* align 8 %59, i64 220, i1 false)
  %127 = load i32, i32* %60, align 8
  %128 = icmp ne i32 %127, 0
  %129 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %74, i64 -1, i32 5
  %130 = zext i1 %128 to i8
  store i8 %130, i8* %129, align 4
  %131 = load i32, i32* %61, align 8
  %132 = icmp ne i32 %131, 0
  %133 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %74, i64 -1, i32 6
  %134 = zext i1 %132 to i8
  store i8 %134, i8* %133, align 1
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %52) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %50) #14
  call void @llvm.lifetime.end.p0i8(i64 840, i8* nonnull %46) #14
  br label %135

135:                                              ; preds = %114, %105
  store i32 0, i32* %2, align 4
  %136 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %137 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %136, i64 0, i32 20, i32 0
  %138 = load void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)** %137, align 8
  call void %138(%struct.VkPhysicalDevice_T* %64, i32* nonnull %2, %struct.VkQueueFamilyProperties* null) #14
  %139 = load i32, i32* %2, align 4
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %166, label %141

141:                                              ; preds = %135
  %142 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %74, i64 -1, i32 7
  %143 = zext i32 %139 to i64
  %144 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %74, i64 -1, i32 7, i32 0, i32 1
  %145 = bitcast %struct.VkQueueFamilyProperties** %144 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = bitcast %"class.std::__1::vector.17"* %142 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = sub i64 %146, %148
  %150 = sdiv exact i64 %149, 24
  %151 = icmp ult i64 %150, %143
  %152 = inttoptr i64 %148 to %struct.VkQueueFamilyProperties*
  br i1 %151, label %153, label %157

153:                                              ; preds = %141
  %154 = sub nsw i64 %143, %150
  call void @_ZNSt3__16vectorI23VkQueueFamilyPropertiesNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector.17"* %142, i64 %154) #14
  %155 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %142, i64 0, i32 0, i32 0
  %156 = load %struct.VkQueueFamilyProperties*, %struct.VkQueueFamilyProperties** %155, align 8
  br label %161

157:                                              ; preds = %141
  %158 = icmp ugt i64 %150, %143
  br i1 %158, label %159, label %161

159:                                              ; preds = %157
  %160 = getelementptr inbounds %struct.VkQueueFamilyProperties, %struct.VkQueueFamilyProperties* %152, i64 %143
  store %struct.VkQueueFamilyProperties* %160, %struct.VkQueueFamilyProperties** %144, align 8
  br label %161

161:                                              ; preds = %153, %157, %159
  %162 = phi %struct.VkQueueFamilyProperties* [ %156, %153 ], [ %152, %157 ], [ %152, %159 ]
  %163 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #14
  %164 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %163, i64 0, i32 20, i32 0
  %165 = load void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)** %164, align 8
  call void %165(%struct.VkPhysicalDevice_T* %64, i32* nonnull %2, %struct.VkQueueFamilyProperties* %162) #14
  br label %166

166:                                              ; preds = %135, %161
  %167 = getelementptr inbounds %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %63, i64 1
  %168 = icmp eq %struct.VkPhysicalDevice_T** %167, %24
  br i1 %168, label %169, label %62

169:                                              ; preds = %166, %18, %37
  %170 = phi i1 [ false, %18 ], [ true, %37 ], [ true, %166 ]
  call void @_ZdlPv(i8* nonnull %21) #15
  br label %171

171:                                              ; preds = %169, %1
  %172 = phi i1 [ false, %1 ], [ %170, %169 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #14
  ret i1 %172
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3gpu24VulkanPhysicalDeviceInfoENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.15"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.gpu::VulkanPhysicalDeviceInfo"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.15"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 1640
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.gpu::VulkanPhysicalDeviceInfo"*
  br i1 %10, label %12, label %55

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.gpu::VulkanPhysicalDeviceInfo"** %13 to i64*
  %15 = icmp ugt i64 %1, 11248014679091190
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #16
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = sdiv exact i64 %19, 1640
  %21 = mul i64 %1, 1640
  %22 = tail call i8* @_Znwm(i64 %21) #15
  %23 = bitcast i8* %22 to %"class.gpu::VulkanPhysicalDeviceInfo"*
  %24 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %23, i64 %20
  %25 = ptrtoint %"class.gpu::VulkanPhysicalDeviceInfo"* %24 to i64
  %26 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %23, i64 %1
  %27 = ptrtoint %"class.gpu::VulkanPhysicalDeviceInfo"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.gpu::VulkanPhysicalDeviceInfo"*
  %29 = icmp eq %"class.gpu::VulkanPhysicalDeviceInfo"* %28, %11
  br i1 %29, label %41, label %30

30:                                               ; preds = %17, %30
  %31 = phi %"class.gpu::VulkanPhysicalDeviceInfo"* [ %33, %30 ], [ %24, %17 ]
  %32 = phi %"class.gpu::VulkanPhysicalDeviceInfo"* [ %34, %30 ], [ %28, %17 ]
  %33 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %31, i64 -1
  %34 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %32, i64 -1
  tail call void @_ZN3gpu24VulkanPhysicalDeviceInfoC1ERKS0_(%"class.gpu::VulkanPhysicalDeviceInfo"* %33, %"class.gpu::VulkanPhysicalDeviceInfo"* dereferenceable(1640) %34) #14
  %35 = icmp eq %"class.gpu::VulkanPhysicalDeviceInfo"* %34, %11
  br i1 %35, label %36, label %30

36:                                               ; preds = %30
  %37 = ptrtoint %"class.gpu::VulkanPhysicalDeviceInfo"* %33 to i64
  %38 = load i64, i64* %6, align 8
  %39 = load %"class.gpu::VulkanPhysicalDeviceInfo"*, %"class.gpu::VulkanPhysicalDeviceInfo"** %13, align 8
  %40 = inttoptr i64 %38 to %"class.gpu::VulkanPhysicalDeviceInfo"*
  br label %41

41:                                               ; preds = %17, %36
  %42 = phi %"class.gpu::VulkanPhysicalDeviceInfo"* [ %40, %36 ], [ %28, %17 ]
  %43 = phi %"class.gpu::VulkanPhysicalDeviceInfo"* [ %39, %36 ], [ %11, %17 ]
  %44 = phi i64 [ %37, %36 ], [ %25, %17 ]
  %45 = phi i64 [ %38, %36 ], [ %18, %17 ]
  store i64 %44, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %46 = icmp eq %"class.gpu::VulkanPhysicalDeviceInfo"* %43, %42
  br i1 %46, label %51, label %47

47:                                               ; preds = %41, %47
  %48 = phi %"class.gpu::VulkanPhysicalDeviceInfo"* [ %49, %47 ], [ %43, %41 ]
  %49 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %48, i64 -1
  tail call void @_ZN3gpu24VulkanPhysicalDeviceInfoD1Ev(%"class.gpu::VulkanPhysicalDeviceInfo"* %49) #14
  %50 = icmp eq %"class.gpu::VulkanPhysicalDeviceInfo"* %49, %42
  br i1 %50, label %51, label %47

51:                                               ; preds = %47, %41
  %52 = icmp eq i64 %45, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %51
  %54 = inttoptr i64 %45 to i8*
  tail call void @_ZdlPv(i8* %54) #15
  br label %55

55:                                               ; preds = %53, %51, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN4base19UnloadNativeLibraryEPv(i8*) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare void @_ZN14crash_reporter8internal18CrashKeyStringImpl3SetEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.crash_reporter::internal::CrashKeyStringImpl"*, i8*, i64) local_unnamed_addr #1

declare void @_ZN8crashpad10Annotation7SetSizeEj(%"class.crashpad::Annotation"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.1"*, i8**, i8**) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i8** %2 to i64
  %5 = ptrtoint i8** %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 3
  %8 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i8*** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 3
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i8**
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i8*** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 3
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i8*, i8** %1, i64 %22
  %25 = select i1 %23, i8** %24, i8** %2
  %26 = ptrtoint i8** %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 3
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i8** %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %27, i1 false) #14
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 3
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i8** %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 %36, i1 false) #14
  %42 = inttoptr i64 %35 to i8**
  %43 = getelementptr inbounds i8*, i8** %42, i64 %39
  %44 = ptrtoint i8** %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i8*, i8** %16, i64 %28
  store i8** %48, i8*** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i8*** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #15
  %55 = bitcast %"class.std::__1::vector.1"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #14
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 2305843009213693951
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #16
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 3
  %63 = icmp ult i64 %62, 1152921504606846975
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 2
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 2305843009213693951
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #16
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 2305843009213693951, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 3
  %74 = tail call i8* @_Znwm(i64 %73) #15
  %75 = bitcast i8* %74 to i8**
  %76 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i8*** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector.1"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i8*, i8** %75, i64 %72
  store i8** %79, i8*** %8, align 8
  %80 = bitcast i8*** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 3
  %85 = bitcast i8** %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %74, i8* align 8 %85, i64 %6, i1 false) #14
  %86 = getelementptr inbounds i8*, i8** %75, i64 %84
  %87 = ptrtoint i8** %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI21VkExtensionPropertiesNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %struct.VkExtensionProperties** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %struct.VkExtensionProperties** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 260
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %28, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %struct.VkExtensionProperties*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %26, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %13, i64 %1
  %17 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %13, i64 0, i32 0, i64 0
  %18 = add i64 %1, -1
  %19 = sub i64 0, %8
  %20 = getelementptr %struct.VkExtensionProperties, %struct.VkExtensionProperties* %13, i64 %18, i32 0, i64 %19
  %21 = ptrtoint i8* %20 to i64
  %22 = urem i64 %21, 260
  %23 = add i64 %21, 260
  %24 = sub i64 %23, %22
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %24, i1 false) #14
  %25 = ptrtoint %struct.VkExtensionProperties* %16 to i64
  br label %26

26:                                               ; preds = %12, %15
  %27 = phi i64 [ %25, %15 ], [ %8, %12 ]
  store i64 %27, i64* %7, align 8
  br label %86

28:                                               ; preds = %2
  %29 = bitcast %"class.std::__1::vector"* %0 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %8, %30
  %32 = sdiv exact i64 %31, 260
  %33 = add i64 %32, %1
  %34 = icmp ugt i64 %33, 70949015668113660
  br i1 %34, label %35, label %37

35:                                               ; preds = %28
  %36 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %36) #16
  unreachable

37:                                               ; preds = %28
  %38 = sub i64 %5, %30
  %39 = sdiv exact i64 %38, 260
  %40 = icmp ult i64 %39, 35474507834056830
  br i1 %40, label %41, label %46

41:                                               ; preds = %37
  %42 = shl nsw i64 %39, 1
  %43 = icmp ult i64 %42, %33
  %44 = select i1 %43, i64 %33, i64 %42
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %51, label %46

46:                                               ; preds = %37, %41
  %47 = phi i64 [ %44, %41 ], [ 70949015668113660, %37 ]
  %48 = mul i64 %47, 260
  %49 = tail call i8* @_Znwm(i64 %48) #15
  %50 = bitcast i8* %49 to %struct.VkExtensionProperties*
  br label %51

51:                                               ; preds = %46, %41
  %52 = phi i64 [ %47, %46 ], [ 0, %41 ]
  %53 = phi %struct.VkExtensionProperties* [ %50, %46 ], [ null, %41 ]
  %54 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %53, i64 %32
  %55 = ptrtoint %struct.VkExtensionProperties* %54 to i64
  %56 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %53, i64 %52
  %57 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %54, i64 %1
  %58 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %54, i64 0, i32 0, i64 0
  %59 = add i64 %1, -1
  %60 = sub i64 0, %55
  %61 = getelementptr %struct.VkExtensionProperties, %struct.VkExtensionProperties* %54, i64 %59, i32 0, i64 %60
  %62 = ptrtoint i8* %61 to i64
  %63 = urem i64 %62, 260
  %64 = add i64 %62, 260
  %65 = sub i64 %64, %63
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %58, i8 0, i64 %65, i1 false) #14
  %66 = ptrtoint %struct.VkExtensionProperties* %56 to i64
  %67 = ptrtoint %struct.VkExtensionProperties* %57 to i64
  %68 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %69 = load %struct.VkExtensionProperties*, %struct.VkExtensionProperties** %68, align 8
  %70 = load i64, i64* %7, align 8
  %71 = ptrtoint %struct.VkExtensionProperties* %69 to i64
  %72 = sub i64 %70, %71
  %73 = sdiv exact i64 %72, -260
  %74 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %54, i64 %73
  %75 = ptrtoint %struct.VkExtensionProperties* %74 to i64
  %76 = icmp sgt i64 %72, 0
  br i1 %76, label %77, label %81

77:                                               ; preds = %51
  %78 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %74, i64 0, i32 0, i64 0
  %79 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %69, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %79, i64 %72, i1 false) #14
  %80 = load %struct.VkExtensionProperties*, %struct.VkExtensionProperties** %68, align 8
  br label %81

81:                                               ; preds = %51, %77
  %82 = phi %struct.VkExtensionProperties* [ %69, %51 ], [ %80, %77 ]
  store i64 %75, i64* %29, align 8
  store i64 %67, i64* %7, align 8
  store i64 %66, i64* %4, align 8
  %83 = icmp eq %struct.VkExtensionProperties* %82, null
  br i1 %83, label %86, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %82, i64 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %85) #15
  br label %86

86:                                               ; preds = %84, %81, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI17VkLayerPropertiesNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector.8"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %struct.VkLayerProperties** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %struct.VkLayerProperties** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 520
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %28, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %struct.VkLayerProperties*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %26, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.VkLayerProperties, %struct.VkLayerProperties* %13, i64 %1
  %17 = getelementptr inbounds %struct.VkLayerProperties, %struct.VkLayerProperties* %13, i64 0, i32 0, i64 0
  %18 = add i64 %1, -1
  %19 = sub i64 0, %8
  %20 = getelementptr %struct.VkLayerProperties, %struct.VkLayerProperties* %13, i64 %18, i32 0, i64 %19
  %21 = ptrtoint i8* %20 to i64
  %22 = urem i64 %21, 520
  %23 = add i64 %21, 520
  %24 = sub i64 %23, %22
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %24, i1 false) #14
  %25 = ptrtoint %struct.VkLayerProperties* %16 to i64
  br label %26

26:                                               ; preds = %12, %15
  %27 = phi i64 [ %25, %15 ], [ %8, %12 ]
  store i64 %27, i64* %7, align 8
  br label %86

28:                                               ; preds = %2
  %29 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %8, %30
  %32 = sdiv exact i64 %31, 520
  %33 = add i64 %32, %1
  %34 = icmp ugt i64 %33, 35474507834056830
  br i1 %34, label %35, label %37

35:                                               ; preds = %28
  %36 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %36) #16
  unreachable

37:                                               ; preds = %28
  %38 = sub i64 %5, %30
  %39 = sdiv exact i64 %38, 520
  %40 = icmp ult i64 %39, 17737253917028415
  br i1 %40, label %41, label %46

41:                                               ; preds = %37
  %42 = shl nsw i64 %39, 1
  %43 = icmp ult i64 %42, %33
  %44 = select i1 %43, i64 %33, i64 %42
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %51, label %46

46:                                               ; preds = %37, %41
  %47 = phi i64 [ %44, %41 ], [ 35474507834056830, %37 ]
  %48 = mul i64 %47, 520
  %49 = tail call i8* @_Znwm(i64 %48) #15
  %50 = bitcast i8* %49 to %struct.VkLayerProperties*
  br label %51

51:                                               ; preds = %46, %41
  %52 = phi i64 [ %47, %46 ], [ 0, %41 ]
  %53 = phi %struct.VkLayerProperties* [ %50, %46 ], [ null, %41 ]
  %54 = getelementptr inbounds %struct.VkLayerProperties, %struct.VkLayerProperties* %53, i64 %32
  %55 = ptrtoint %struct.VkLayerProperties* %54 to i64
  %56 = getelementptr inbounds %struct.VkLayerProperties, %struct.VkLayerProperties* %53, i64 %52
  %57 = getelementptr inbounds %struct.VkLayerProperties, %struct.VkLayerProperties* %54, i64 %1
  %58 = getelementptr inbounds %struct.VkLayerProperties, %struct.VkLayerProperties* %54, i64 0, i32 0, i64 0
  %59 = add i64 %1, -1
  %60 = sub i64 0, %55
  %61 = getelementptr %struct.VkLayerProperties, %struct.VkLayerProperties* %54, i64 %59, i32 0, i64 %60
  %62 = ptrtoint i8* %61 to i64
  %63 = urem i64 %62, 520
  %64 = add i64 %62, 520
  %65 = sub i64 %64, %63
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %58, i8 0, i64 %65, i1 false) #14
  %66 = ptrtoint %struct.VkLayerProperties* %56 to i64
  %67 = ptrtoint %struct.VkLayerProperties* %57 to i64
  %68 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %69 = load %struct.VkLayerProperties*, %struct.VkLayerProperties** %68, align 8
  %70 = load i64, i64* %7, align 8
  %71 = ptrtoint %struct.VkLayerProperties* %69 to i64
  %72 = sub i64 %70, %71
  %73 = sdiv exact i64 %72, -520
  %74 = getelementptr inbounds %struct.VkLayerProperties, %struct.VkLayerProperties* %54, i64 %73
  %75 = ptrtoint %struct.VkLayerProperties* %74 to i64
  %76 = icmp sgt i64 %72, 0
  br i1 %76, label %77, label %81

77:                                               ; preds = %51
  %78 = getelementptr inbounds %struct.VkLayerProperties, %struct.VkLayerProperties* %74, i64 0, i32 0, i64 0
  %79 = getelementptr inbounds %struct.VkLayerProperties, %struct.VkLayerProperties* %69, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %79, i64 %72, i1 false) #14
  %80 = load %struct.VkLayerProperties*, %struct.VkLayerProperties** %68, align 8
  br label %81

81:                                               ; preds = %51, %77
  %82 = phi %struct.VkLayerProperties* [ %69, %51 ], [ %80, %77 ]
  store i64 %75, i64* %29, align 8
  store i64 %67, i64* %7, align 8
  store i64 %66, i64* %4, align 8
  %83 = icmp eq %struct.VkLayerProperties* %82, null
  br i1 %83, label %86, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds %struct.VkLayerProperties, %struct.VkLayerProperties* %82, i64 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %85) #15
  br label %86

86:                                               ; preds = %84, %81, %26
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEE15sort_and_uniqueENS3_11__wrap_iterIPS6_EESH_(%"class.base::internal::flat_tree"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare", align 1
  %5 = ptrtoint %"class.base::BasicStringPiece"* %2 to i64
  %6 = getelementptr inbounds %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare", %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6)
  %7 = ptrtoint %"class.base::BasicStringPiece"* %1 to i64
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 4
  %10 = icmp sgt i64 %8, 2048
  br i1 %10, label %11, label %22

11:                                               ; preds = %3
  %12 = icmp slt i64 %9, 576460752303423487
  %13 = select i1 %12, i64 %9, i64 576460752303423487
  br label %14

14:                                               ; preds = %19, %11
  %15 = phi i64 [ %20, %19 ], [ %13, %11 ]
  %16 = shl i64 %15, 4
  %17 = tail call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %16, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #14
  %18 = icmp eq i8* %17, null
  br i1 %18, label %19, label %23

19:                                               ; preds = %14
  %20 = lshr i64 %15, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %14

22:                                               ; preds = %19, %3
  call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %1, %"class.base::BasicStringPiece"* %2, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* nonnull dereferenceable(1) %4, i64 %9, %"class.base::BasicStringPiece"* null, i64 0) #14
  br label %25

23:                                               ; preds = %14
  %24 = bitcast i8* %17 to %"class.base::BasicStringPiece"*
  call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %1, %"class.base::BasicStringPiece"* %2, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* nonnull dereferenceable(1) %4, i64 %9, %"class.base::BasicStringPiece"* nonnull %24, i64 %15) #14
  call void @_ZdlPv(i8* nonnull %17) #15
  br label %25

25:                                               ; preds = %22, %23
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6)
  %26 = call %"class.base::BasicStringPiece"* @_ZNSt3__16uniqueINS_11__wrap_iterIPN4base16BasicStringPieceIcNS_11char_traitsIcEEEEEENS2_8internal9NotFnImplINS9_9flat_treeIS6_NS2_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareEEEEET_SM_SM_T0_(%"class.base::BasicStringPiece"* %1, %"class.base::BasicStringPiece"* %2)
  %27 = icmp eq %"class.base::BasicStringPiece"* %26, %2
  br i1 %27, label %40, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 1
  %30 = bitcast %"class.base::BasicStringPiece"** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %31, %5
  %33 = ashr exact i64 %32, 4
  %34 = icmp eq i64 %32, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %28
  %36 = bitcast %"class.base::BasicStringPiece"* %26 to i8*
  %37 = bitcast %"class.base::BasicStringPiece"* %2 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 %32, i1 false) #14
  br label %38

38:                                               ; preds = %35, %28
  %39 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %26, i64 %33
  store %"class.base::BasicStringPiece"* %39, %"class.base::BasicStringPiece"** %29, align 8
  br label %40

40:                                               ; preds = %25, %38
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.base::BasicStringPiece"* @_ZNSt3__16uniqueINS_11__wrap_iterIPN4base16BasicStringPieceIcNS_11char_traitsIcEEEEEENS2_8internal9NotFnImplINS9_9flat_treeIS6_NS2_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareEEEEET_SM_SM_T0_(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.base::BasicStringPiece"* %0, %1
  br i1 %3, label %33, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 1
  %6 = icmp eq %"class.base::BasicStringPiece"* %5, %1
  br i1 %6, label %31, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  br label %10

10:                                               ; preds = %28, %7
  %11 = phi i8* [ %17, %28 ], [ %9, %7 ]
  %12 = phi %"class.base::BasicStringPiece"* [ %29, %28 ], [ %5, %7 ]
  %13 = phi %"class.base::BasicStringPiece"* [ %12, %28 ], [ %0, %7 ]
  %14 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %13, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %13, i64 1, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp ugt i64 %15, %19
  %21 = select i1 %20, i64 %19, i64 %15
  %22 = tail call i32 @memcmp(i8* %11, i8* %17, i64 %21) #14
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %10
  %25 = icmp ult i64 %15, %19
  br i1 %25, label %28, label %33

26:                                               ; preds = %10
  %27 = icmp sgt i32 %22, -1
  br i1 %27, label %33, label %28

28:                                               ; preds = %26, %24
  %29 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 1
  %30 = icmp eq %"class.base::BasicStringPiece"* %29, %1
  br i1 %30, label %31, label %10

31:                                               ; preds = %28, %4
  %32 = ptrtoint %"class.base::BasicStringPiece"* %1 to i64
  br label %79

33:                                               ; preds = %24, %26, %2
  %34 = phi %"class.base::BasicStringPiece"* [ %0, %2 ], [ %13, %26 ], [ %13, %24 ]
  %35 = ptrtoint %"class.base::BasicStringPiece"* %34 to i64
  %36 = icmp eq %"class.base::BasicStringPiece"* %34, %1
  br i1 %36, label %79, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %34, i64 2
  %39 = icmp eq %"class.base::BasicStringPiece"* %38, %1
  br i1 %39, label %75, label %40

40:                                               ; preds = %37
  %41 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %34, i64 1
  br label %42

42:                                               ; preds = %40, %68
  %43 = phi %"class.base::BasicStringPiece"* [ %72, %68 ], [ %34, %40 ]
  %44 = phi %"class.base::BasicStringPiece"* [ %70, %68 ], [ %38, %40 ]
  %45 = phi %"class.base::BasicStringPiece"* [ %44, %68 ], [ %41, %40 ]
  %46 = phi i64 [ %69, %68 ], [ %35, %40 ]
  %47 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %43, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %43, i64 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %44, i64 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %45, i64 1, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = icmp ugt i64 %50, %54
  %56 = select i1 %55, i64 %54, i64 %50
  %57 = tail call i32 @memcmp(i8* %48, i8* %52, i64 %56) #14
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %42
  %60 = icmp ult i64 %50, %54
  br i1 %60, label %63, label %68

61:                                               ; preds = %42
  %62 = icmp sgt i32 %57, -1
  br i1 %62, label %68, label %63

63:                                               ; preds = %59, %61
  %64 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %43, i64 1
  %65 = ptrtoint %"class.base::BasicStringPiece"* %64 to i64
  %66 = bitcast %"class.base::BasicStringPiece"* %64 to i8*
  %67 = bitcast %"class.base::BasicStringPiece"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 16, i1 false)
  br label %68

68:                                               ; preds = %59, %63, %61
  %69 = phi i64 [ %46, %61 ], [ %65, %63 ], [ %46, %59 ]
  %70 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %44, i64 1
  %71 = icmp eq %"class.base::BasicStringPiece"* %70, %1
  %72 = inttoptr i64 %69 to %"class.base::BasicStringPiece"*
  br i1 %71, label %73, label %42

73:                                               ; preds = %68
  %74 = inttoptr i64 %69 to %"class.base::BasicStringPiece"*
  br label %75

75:                                               ; preds = %73, %37
  %76 = phi %"class.base::BasicStringPiece"* [ %34, %37 ], [ %74, %73 ]
  %77 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %76, i64 1
  %78 = ptrtoint %"class.base::BasicStringPiece"* %77 to i64
  br label %79

79:                                               ; preds = %33, %31, %75
  %80 = phi i64 [ %78, %75 ], [ %35, %33 ], [ %32, %31 ]
  %81 = inttoptr i64 %80 to %"class.base::BasicStringPiece"*
  ret %"class.base::BasicStringPiece"* %81
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1), i64, %"class.base::BasicStringPiece"*, i64) local_unnamed_addr #0 comdat {
  switch i64 %3, label %30 [
    i64 0, label %207
    i64 1, label %207
    i64 2, label %7
  ]

7:                                                ; preds = %6
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1
  %9 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %8, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %12, %16
  %18 = select i1 %17, i64 %16, i64 %12
  %19 = tail call i32 @memcmp(i8* %10, i8* %14, i64 %18) #14
  %20 = icmp eq i32 %19, 0
  %21 = ptrtoint i8* %14 to i64
  br i1 %20, label %22, label %24

22:                                               ; preds = %7
  %23 = icmp ult i64 %12, %16
  br i1 %23, label %26, label %207

24:                                               ; preds = %7
  %25 = icmp slt i32 %19, 0
  br i1 %25, label %26, label %207

26:                                               ; preds = %22, %24
  %27 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  %28 = bitcast %"class.base::BasicStringPiece"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 16, i1 false) #14
  %29 = bitcast %"class.base::BasicStringPiece"* %8 to i64*
  store i64 %21, i64* %29, align 8
  store i64 %16, i64* %11, align 8
  br label %207

30:                                               ; preds = %6
  %31 = icmp slt i64 %3, 129
  br i1 %31, label %32, label %70

32:                                               ; preds = %30
  %33 = icmp eq %"class.base::BasicStringPiece"* %0, %1
  br i1 %33, label %207, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 1
  %36 = icmp eq %"class.base::BasicStringPiece"* %35, %1
  br i1 %36, label %207, label %37

37:                                               ; preds = %34, %60
  %38 = phi %"class.base::BasicStringPiece"* [ %64, %60 ], [ %35, %34 ]
  %39 = phi %"class.base::BasicStringPiece"* [ %38, %60 ], [ %0, %34 ]
  %40 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %38, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %39, i64 1, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = icmp eq %"class.base::BasicStringPiece"* %38, %0
  br i1 %44, label %60, label %45

45:                                               ; preds = %37, %66
  %46 = phi %"class.base::BasicStringPiece"* [ %47, %66 ], [ %38, %37 ]
  %47 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %46, i64 -1
  %48 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %47, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %46, i64 -1, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = icmp ugt i64 %43, %51
  %53 = select i1 %52, i64 %51, i64 %43
  %54 = tail call i32 @memcmp(i8* %41, i8* %49, i64 %53) #14
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %45
  %57 = icmp ult i64 %43, %51
  br i1 %57, label %66, label %60

58:                                               ; preds = %45
  %59 = icmp slt i32 %54, 0
  br i1 %59, label %66, label %60

60:                                               ; preds = %66, %58, %56, %37
  %61 = phi %"class.base::BasicStringPiece"* [ %0, %37 ], [ %46, %58 ], [ %46, %56 ], [ %0, %66 ]
  %62 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %61, i64 0, i32 0
  store i8* %41, i8** %62, align 8
  %63 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %61, i64 0, i32 1
  store i64 %43, i64* %63, align 8
  %64 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %38, i64 1
  %65 = icmp eq %"class.base::BasicStringPiece"* %64, %1
  br i1 %65, label %207, label %37

66:                                               ; preds = %58, %56
  %67 = bitcast %"class.base::BasicStringPiece"* %46 to i8*
  %68 = bitcast %"class.base::BasicStringPiece"* %47 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false) #14
  %69 = icmp eq %"class.base::BasicStringPiece"* %47, %0
  br i1 %69, label %60, label %45

70:                                               ; preds = %30
  %71 = lshr i64 %3, 1
  %72 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 %71
  %73 = icmp sgt i64 %3, %5
  br i1 %73, label %205, label %74

74:                                               ; preds = %70
  tail call void @_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeE(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %72, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %71, %"class.base::BasicStringPiece"* %4)
  %75 = sub nsw i64 %3, %71
  %76 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 %71
  tail call void @_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeE(%"class.base::BasicStringPiece"* %72, %"class.base::BasicStringPiece"* %1, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %75, %"class.base::BasicStringPiece"* %76)
  %77 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 %3
  br label %104

78:                                               ; preds = %180
  %79 = icmp eq %"class.base::BasicStringPiece"* %181, %77
  br i1 %79, label %207, label %80

80:                                               ; preds = %78
  %81 = ptrtoint %"class.base::BasicStringPiece"* %181 to i64
  %82 = add i64 %3, -1
  %83 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 %82, i32 0
  %84 = ptrtoint i8** %83 to i64
  %85 = sub i64 %84, %81
  %86 = lshr i64 %85, 4
  %87 = add nuw nsw i64 %86, 1
  %88 = and i64 %87, 3
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %100, label %90

90:                                               ; preds = %80, %90
  %91 = phi %"class.base::BasicStringPiece"* [ %96, %90 ], [ %181, %80 ]
  %92 = phi %"class.base::BasicStringPiece"* [ %97, %90 ], [ %183, %80 ]
  %93 = phi i64 [ %98, %90 ], [ %88, %80 ]
  %94 = bitcast %"class.base::BasicStringPiece"* %92 to i8*
  %95 = bitcast %"class.base::BasicStringPiece"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 16, i1 false) #14
  %96 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %91, i64 1
  %97 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %92, i64 1
  %98 = add i64 %93, -1
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %90, !llvm.loop !2

100:                                              ; preds = %90, %80
  %101 = phi %"class.base::BasicStringPiece"* [ %181, %80 ], [ %96, %90 ]
  %102 = phi %"class.base::BasicStringPiece"* [ %183, %80 ], [ %97, %90 ]
  %103 = icmp ult i64 %85, 48
  br i1 %103, label %207, label %185

104:                                              ; preds = %74, %180
  %105 = phi %"class.base::BasicStringPiece"* [ %182, %180 ], [ %4, %74 ]
  %106 = phi %"class.base::BasicStringPiece"* [ %181, %180 ], [ %76, %74 ]
  %107 = phi %"class.base::BasicStringPiece"* [ %183, %180 ], [ %0, %74 ]
  %108 = icmp eq %"class.base::BasicStringPiece"* %106, %77
  br i1 %108, label %109, label %155

109:                                              ; preds = %104
  %110 = icmp eq %"class.base::BasicStringPiece"* %105, %76
  br i1 %110, label %207, label %111

111:                                              ; preds = %109
  %112 = ptrtoint %"class.base::BasicStringPiece"* %105 to i64
  %113 = add nsw i64 %71, -1
  %114 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 %113, i32 0
  %115 = ptrtoint i8** %114 to i64
  %116 = sub i64 %115, %112
  %117 = lshr i64 %116, 4
  %118 = add nuw nsw i64 %117, 1
  %119 = and i64 %118, 3
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %131, label %121

121:                                              ; preds = %111, %121
  %122 = phi %"class.base::BasicStringPiece"* [ %127, %121 ], [ %105, %111 ]
  %123 = phi %"class.base::BasicStringPiece"* [ %128, %121 ], [ %107, %111 ]
  %124 = phi i64 [ %129, %121 ], [ %119, %111 ]
  %125 = bitcast %"class.base::BasicStringPiece"* %123 to i8*
  %126 = bitcast %"class.base::BasicStringPiece"* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 16, i1 false) #14
  %127 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %122, i64 1
  %128 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %123, i64 1
  %129 = add i64 %124, -1
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %121, !llvm.loop !4

131:                                              ; preds = %121, %111
  %132 = phi %"class.base::BasicStringPiece"* [ %105, %111 ], [ %127, %121 ]
  %133 = phi %"class.base::BasicStringPiece"* [ %107, %111 ], [ %128, %121 ]
  %134 = icmp ult i64 %116, 48
  br i1 %134, label %207, label %135

135:                                              ; preds = %131, %135
  %136 = phi %"class.base::BasicStringPiece"* [ %152, %135 ], [ %132, %131 ]
  %137 = phi %"class.base::BasicStringPiece"* [ %153, %135 ], [ %133, %131 ]
  %138 = bitcast %"class.base::BasicStringPiece"* %137 to i8*
  %139 = bitcast %"class.base::BasicStringPiece"* %136 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %138, i8* align 8 %139, i64 16, i1 false) #14
  %140 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %136, i64 1
  %141 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %137, i64 1
  %142 = bitcast %"class.base::BasicStringPiece"* %141 to i8*
  %143 = bitcast %"class.base::BasicStringPiece"* %140 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %142, i8* align 8 %143, i64 16, i1 false) #14
  %144 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %136, i64 2
  %145 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %137, i64 2
  %146 = bitcast %"class.base::BasicStringPiece"* %145 to i8*
  %147 = bitcast %"class.base::BasicStringPiece"* %144 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %146, i8* align 8 %147, i64 16, i1 false) #14
  %148 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %136, i64 3
  %149 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %137, i64 3
  %150 = bitcast %"class.base::BasicStringPiece"* %149 to i8*
  %151 = bitcast %"class.base::BasicStringPiece"* %148 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %151, i64 16, i1 false) #14
  %152 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %136, i64 4
  %153 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %137, i64 4
  %154 = icmp eq %"class.base::BasicStringPiece"* %152, %76
  br i1 %154, label %207, label %135

155:                                              ; preds = %104
  %156 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %106, i64 0, i32 0
  %157 = load i8*, i8** %156, align 8
  %158 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %106, i64 0, i32 1
  %159 = load i64, i64* %158, align 8
  %160 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %105, i64 0, i32 0
  %161 = load i8*, i8** %160, align 8
  %162 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %105, i64 0, i32 1
  %163 = load i64, i64* %162, align 8
  %164 = icmp ugt i64 %159, %163
  %165 = select i1 %164, i64 %163, i64 %159
  %166 = tail call i32 @memcmp(i8* %157, i8* %161, i64 %165) #14
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %170

168:                                              ; preds = %155
  %169 = icmp ult i64 %159, %163
  br i1 %169, label %172, label %176

170:                                              ; preds = %155
  %171 = icmp slt i32 %166, 0
  br i1 %171, label %172, label %176

172:                                              ; preds = %170, %168
  %173 = bitcast %"class.base::BasicStringPiece"* %107 to i8*
  %174 = bitcast %"class.base::BasicStringPiece"* %106 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %173, i8* align 8 %174, i64 16, i1 false) #14
  %175 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %106, i64 1
  br label %180

176:                                              ; preds = %170, %168
  %177 = bitcast %"class.base::BasicStringPiece"* %107 to i8*
  %178 = bitcast %"class.base::BasicStringPiece"* %105 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %177, i8* align 8 %178, i64 16, i1 false) #14
  %179 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %105, i64 1
  br label %180

180:                                              ; preds = %176, %172
  %181 = phi %"class.base::BasicStringPiece"* [ %175, %172 ], [ %106, %176 ]
  %182 = phi %"class.base::BasicStringPiece"* [ %105, %172 ], [ %179, %176 ]
  %183 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %107, i64 1
  %184 = icmp eq %"class.base::BasicStringPiece"* %182, %76
  br i1 %184, label %78, label %104

185:                                              ; preds = %100, %185
  %186 = phi %"class.base::BasicStringPiece"* [ %202, %185 ], [ %101, %100 ]
  %187 = phi %"class.base::BasicStringPiece"* [ %203, %185 ], [ %102, %100 ]
  %188 = bitcast %"class.base::BasicStringPiece"* %187 to i8*
  %189 = bitcast %"class.base::BasicStringPiece"* %186 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %188, i8* align 8 %189, i64 16, i1 false) #14
  %190 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %186, i64 1
  %191 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %187, i64 1
  %192 = bitcast %"class.base::BasicStringPiece"* %191 to i8*
  %193 = bitcast %"class.base::BasicStringPiece"* %190 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %192, i8* align 8 %193, i64 16, i1 false) #14
  %194 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %186, i64 2
  %195 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %187, i64 2
  %196 = bitcast %"class.base::BasicStringPiece"* %195 to i8*
  %197 = bitcast %"class.base::BasicStringPiece"* %194 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %196, i8* align 8 %197, i64 16, i1 false) #14
  %198 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %186, i64 3
  %199 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %187, i64 3
  %200 = bitcast %"class.base::BasicStringPiece"* %199 to i8*
  %201 = bitcast %"class.base::BasicStringPiece"* %198 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %200, i8* align 8 %201, i64 16, i1 false) #14
  %202 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %186, i64 4
  %203 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %187, i64 4
  %204 = icmp eq %"class.base::BasicStringPiece"* %202, %77
  br i1 %204, label %207, label %185

205:                                              ; preds = %70
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %72, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %71, %"class.base::BasicStringPiece"* %4, i64 %5)
  %206 = sub nsw i64 %3, %71
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %72, %"class.base::BasicStringPiece"* %1, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %206, %"class.base::BasicStringPiece"* %4, i64 %5)
  tail call void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeEl(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %72, %"class.base::BasicStringPiece"* %1, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %71, i64 %206, %"class.base::BasicStringPiece"* %4, i64 %5)
  ret void

207:                                              ; preds = %100, %185, %131, %135, %60, %22, %109, %78, %34, %32, %24, %26, %6, %6
  ret void
}

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeE(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1), i64, %"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat {
  switch i64 %3, label %41 [
    i64 0, label %180
    i64 1, label %6
    i64 2, label %9
  ]

6:                                                ; preds = %5
  %7 = bitcast %"class.base::BasicStringPiece"* %4 to i8*
  %8 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false)
  br label %180

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1
  %11 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %10, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp ugt i64 %14, %18
  %20 = select i1 %19, i64 %18, i64 %14
  %21 = tail call i32 @memcmp(i8* %12, i8* %16, i64 %20) #14
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %9
  %24 = icmp ult i64 %14, %18
  %25 = bitcast %"class.base::BasicStringPiece"* %4 to i8*
  br i1 %24, label %29, label %35

26:                                               ; preds = %9
  %27 = icmp slt i32 %21, 0
  %28 = bitcast %"class.base::BasicStringPiece"* %4 to i8*
  br i1 %27, label %29, label %35

29:                                               ; preds = %23, %26
  %30 = phi i8* [ %28, %26 ], [ %25, %23 ]
  %31 = bitcast %"class.base::BasicStringPiece"* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 16, i1 false)
  %32 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 1
  %33 = bitcast %"class.base::BasicStringPiece"* %32 to i8*
  %34 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 16, i1 false)
  br label %180

35:                                               ; preds = %23, %26
  %36 = phi i8* [ %28, %26 ], [ %25, %23 ]
  %37 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 16, i1 false)
  %38 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 1
  %39 = bitcast %"class.base::BasicStringPiece"* %38 to i8*
  %40 = bitcast %"class.base::BasicStringPiece"* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 16, i1 false)
  br label %180

41:                                               ; preds = %5
  %42 = icmp slt i64 %3, 9
  br i1 %42, label %43, label %44

43:                                               ; preds = %41
  tail call void @_ZNSt3__121__insertion_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_PNS_15iterator_traitsISL_E10value_typeET_(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %1, %"class.base::BasicStringPiece"* %4, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2)
  br label %180

44:                                               ; preds = %41
  %45 = lshr i64 %3, 1
  %46 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 %45
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %46, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %45, %"class.base::BasicStringPiece"* %4, i64 %45)
  %47 = sub nsw i64 %3, %45
  %48 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 %45
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %46, %"class.base::BasicStringPiece"* %1, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %47, %"class.base::BasicStringPiece"* %48, i64 %47)
  %49 = icmp eq i64 %45, 0
  br i1 %49, label %50, label %97

50:                                               ; preds = %175, %44
  %51 = phi %"class.base::BasicStringPiece"* [ %46, %44 ], [ %176, %175 ]
  %52 = phi %"class.base::BasicStringPiece"* [ %4, %44 ], [ %178, %175 ]
  %53 = icmp eq %"class.base::BasicStringPiece"* %51, %1
  br i1 %53, label %180, label %54

54:                                               ; preds = %50
  %55 = ptrtoint %"class.base::BasicStringPiece"* %51 to i64
  %56 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1, i32 0
  %57 = ptrtoint i8** %56 to i64
  %58 = sub i64 %57, %55
  %59 = lshr i64 %58, 4
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %54, %63
  %64 = phi %"class.base::BasicStringPiece"* [ %70, %63 ], [ %52, %54 ]
  %65 = phi %"class.base::BasicStringPiece"* [ %69, %63 ], [ %51, %54 ]
  %66 = phi i64 [ %71, %63 ], [ %61, %54 ]
  %67 = bitcast %"class.base::BasicStringPiece"* %64 to i8*
  %68 = bitcast %"class.base::BasicStringPiece"* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false) #14
  %69 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %65, i64 1
  %70 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %64, i64 1
  %71 = add i64 %66, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %63, !llvm.loop !5

73:                                               ; preds = %63, %54
  %74 = phi %"class.base::BasicStringPiece"* [ %52, %54 ], [ %70, %63 ]
  %75 = phi %"class.base::BasicStringPiece"* [ %51, %54 ], [ %69, %63 ]
  %76 = icmp ult i64 %58, 48
  br i1 %76, label %180, label %77

77:                                               ; preds = %73, %77
  %78 = phi %"class.base::BasicStringPiece"* [ %95, %77 ], [ %74, %73 ]
  %79 = phi %"class.base::BasicStringPiece"* [ %94, %77 ], [ %75, %73 ]
  %80 = bitcast %"class.base::BasicStringPiece"* %78 to i8*
  %81 = bitcast %"class.base::BasicStringPiece"* %79 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 16, i1 false) #14
  %82 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %79, i64 1
  %83 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %78, i64 1
  %84 = bitcast %"class.base::BasicStringPiece"* %83 to i8*
  %85 = bitcast %"class.base::BasicStringPiece"* %82 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 16, i1 false) #14
  %86 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %79, i64 2
  %87 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %78, i64 2
  %88 = bitcast %"class.base::BasicStringPiece"* %87 to i8*
  %89 = bitcast %"class.base::BasicStringPiece"* %86 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %89, i64 16, i1 false) #14
  %90 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %79, i64 3
  %91 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %78, i64 3
  %92 = bitcast %"class.base::BasicStringPiece"* %91 to i8*
  %93 = bitcast %"class.base::BasicStringPiece"* %90 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 16, i1 false) #14
  %94 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %79, i64 4
  %95 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %78, i64 4
  %96 = icmp eq %"class.base::BasicStringPiece"* %94, %1
  br i1 %96, label %180, label %77

97:                                               ; preds = %44, %175
  %98 = phi %"class.base::BasicStringPiece"* [ %178, %175 ], [ %4, %44 ]
  %99 = phi %"class.base::BasicStringPiece"* [ %177, %175 ], [ %0, %44 ]
  %100 = phi %"class.base::BasicStringPiece"* [ %176, %175 ], [ %46, %44 ]
  %101 = icmp eq %"class.base::BasicStringPiece"* %100, %1
  br i1 %101, label %102, label %148

102:                                              ; preds = %97
  %103 = icmp eq %"class.base::BasicStringPiece"* %99, %46
  br i1 %103, label %180, label %104

104:                                              ; preds = %102
  %105 = ptrtoint %"class.base::BasicStringPiece"* %99 to i64
  %106 = add nsw i64 %45, -1
  %107 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 %106, i32 0
  %108 = ptrtoint i8** %107 to i64
  %109 = sub i64 %108, %105
  %110 = lshr i64 %109, 4
  %111 = add nuw nsw i64 %110, 1
  %112 = and i64 %111, 3
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %124, label %114

114:                                              ; preds = %104, %114
  %115 = phi %"class.base::BasicStringPiece"* [ %121, %114 ], [ %98, %104 ]
  %116 = phi %"class.base::BasicStringPiece"* [ %120, %114 ], [ %99, %104 ]
  %117 = phi i64 [ %122, %114 ], [ %112, %104 ]
  %118 = bitcast %"class.base::BasicStringPiece"* %115 to i8*
  %119 = bitcast %"class.base::BasicStringPiece"* %116 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %118, i8* align 8 %119, i64 16, i1 false) #14
  %120 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %116, i64 1
  %121 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %115, i64 1
  %122 = add i64 %117, -1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %114, !llvm.loop !6

124:                                              ; preds = %114, %104
  %125 = phi %"class.base::BasicStringPiece"* [ %98, %104 ], [ %121, %114 ]
  %126 = phi %"class.base::BasicStringPiece"* [ %99, %104 ], [ %120, %114 ]
  %127 = icmp ult i64 %109, 48
  br i1 %127, label %180, label %128

128:                                              ; preds = %124, %128
  %129 = phi %"class.base::BasicStringPiece"* [ %146, %128 ], [ %125, %124 ]
  %130 = phi %"class.base::BasicStringPiece"* [ %145, %128 ], [ %126, %124 ]
  %131 = bitcast %"class.base::BasicStringPiece"* %129 to i8*
  %132 = bitcast %"class.base::BasicStringPiece"* %130 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %131, i8* align 8 %132, i64 16, i1 false) #14
  %133 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %130, i64 1
  %134 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %129, i64 1
  %135 = bitcast %"class.base::BasicStringPiece"* %134 to i8*
  %136 = bitcast %"class.base::BasicStringPiece"* %133 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %135, i8* align 8 %136, i64 16, i1 false) #14
  %137 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %130, i64 2
  %138 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %129, i64 2
  %139 = bitcast %"class.base::BasicStringPiece"* %138 to i8*
  %140 = bitcast %"class.base::BasicStringPiece"* %137 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 16, i1 false) #14
  %141 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %130, i64 3
  %142 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %129, i64 3
  %143 = bitcast %"class.base::BasicStringPiece"* %142 to i8*
  %144 = bitcast %"class.base::BasicStringPiece"* %141 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 8 %144, i64 16, i1 false) #14
  %145 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %130, i64 4
  %146 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %129, i64 4
  %147 = icmp eq %"class.base::BasicStringPiece"* %145, %46
  br i1 %147, label %180, label %128

148:                                              ; preds = %97
  %149 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %100, i64 0, i32 0
  %150 = load i8*, i8** %149, align 8
  %151 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %100, i64 0, i32 1
  %152 = load i64, i64* %151, align 8
  %153 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %99, i64 0, i32 0
  %154 = load i8*, i8** %153, align 8
  %155 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %99, i64 0, i32 1
  %156 = load i64, i64* %155, align 8
  %157 = icmp ugt i64 %152, %156
  %158 = select i1 %157, i64 %156, i64 %152
  %159 = tail call i32 @memcmp(i8* %150, i8* %154, i64 %158) #14
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %164

161:                                              ; preds = %148
  %162 = icmp ult i64 %152, %156
  %163 = bitcast %"class.base::BasicStringPiece"* %98 to i8*
  br i1 %162, label %167, label %171

164:                                              ; preds = %148
  %165 = icmp slt i32 %159, 0
  %166 = bitcast %"class.base::BasicStringPiece"* %98 to i8*
  br i1 %165, label %167, label %171

167:                                              ; preds = %164, %161
  %168 = phi i8* [ %166, %164 ], [ %163, %161 ]
  %169 = bitcast %"class.base::BasicStringPiece"* %100 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %168, i8* align 8 %169, i64 16, i1 false) #14
  %170 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %100, i64 1
  br label %175

171:                                              ; preds = %164, %161
  %172 = phi i8* [ %166, %164 ], [ %163, %161 ]
  %173 = bitcast %"class.base::BasicStringPiece"* %99 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %172, i8* align 8 %173, i64 16, i1 false) #14
  %174 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %99, i64 1
  br label %175

175:                                              ; preds = %171, %167
  %176 = phi %"class.base::BasicStringPiece"* [ %170, %167 ], [ %100, %171 ]
  %177 = phi %"class.base::BasicStringPiece"* [ %99, %167 ], [ %174, %171 ]
  %178 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %98, i64 1
  %179 = icmp eq %"class.base::BasicStringPiece"* %177, %46
  br i1 %179, label %50, label %97

180:                                              ; preds = %124, %128, %73, %77, %102, %50, %29, %35, %5, %43, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeEl(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1), i64, i64, %"class.base::BasicStringPiece"*, i64) local_unnamed_addr #0 comdat {
  %9 = icmp eq i64 %5, 0
  br i1 %9, label %319, label %10

10:                                               ; preds = %8
  %11 = ptrtoint %"class.base::BasicStringPiece"* %1 to i64
  %12 = ptrtoint %"class.base::BasicStringPiece"* %0 to i64
  br label %13

13:                                               ; preds = %10, %312
  %14 = phi %"class.base::BasicStringPiece"* [ %317, %312 ], [ %2, %10 ]
  %15 = phi i64 [ %316, %312 ], [ %4, %10 ]
  %16 = phi i64 [ %315, %312 ], [ %5, %10 ]
  %17 = phi i64 [ %314, %312 ], [ %11, %10 ]
  %18 = phi i64 [ %313, %312 ], [ %12, %10 ]
  %19 = icmp sgt i64 %15, %7
  %20 = icmp sgt i64 %16, %7
  %21 = and i1 %20, %19
  br i1 %21, label %22, label %30

22:                                               ; preds = %13
  %23 = icmp eq i64 %15, 0
  br i1 %23, label %319, label %24

24:                                               ; preds = %22
  %25 = inttoptr i64 %17 to %"class.base::BasicStringPiece"*
  %26 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 0, i32 1
  %29 = load i64, i64* %28, align 8
  br label %33

30:                                               ; preds = %13
  %31 = inttoptr i64 %18 to %"class.base::BasicStringPiece"*
  %32 = inttoptr i64 %17 to %"class.base::BasicStringPiece"*
  tail call void @_ZNSt3__124__buffered_inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeE(%"class.base::BasicStringPiece"* %31, %"class.base::BasicStringPiece"* %32, %"class.base::BasicStringPiece"* %14, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %3, i64 %15, i64 %16, %"class.base::BasicStringPiece"* %6)
  br label %319

33:                                               ; preds = %24, %49
  %34 = phi i64 [ %15, %24 ], [ %52, %49 ]
  %35 = phi i64 [ %18, %24 ], [ %51, %49 ]
  %36 = inttoptr i64 %35 to %"class.base::BasicStringPiece"*
  %37 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %36, i64 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %36, i64 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = icmp ugt i64 %29, %40
  %42 = select i1 %41, i64 %40, i64 %29
  %43 = tail call i32 @memcmp(i8* %27, i8* %38, i64 %42) #14
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %33
  %46 = icmp ult i64 %29, %40
  br i1 %46, label %54, label %49

47:                                               ; preds = %33
  %48 = icmp slt i32 %43, 0
  br i1 %48, label %54, label %49

49:                                               ; preds = %45, %47
  %50 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %36, i64 1
  %51 = ptrtoint %"class.base::BasicStringPiece"* %50 to i64
  %52 = add nsw i64 %34, -1
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %319, label %33

54:                                               ; preds = %45, %47
  %55 = inttoptr i64 %35 to %"class.base::BasicStringPiece"*
  %56 = icmp slt i64 %34, %16
  br i1 %56, label %57, label %97

57:                                               ; preds = %54
  %58 = sdiv i64 %16, 2
  %59 = sub i64 %17, %35
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %92, label %61

61:                                               ; preds = %57
  %62 = ashr exact i64 %59, 4
  %63 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %58, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %58, i32 1
  %66 = load i64, i64* %65, align 8
  br label %67

67:                                               ; preds = %88, %61
  %68 = phi %"class.base::BasicStringPiece"* [ %55, %61 ], [ %90, %88 ]
  %69 = phi i64 [ %62, %61 ], [ %89, %88 ]
  %70 = lshr i64 %69, 1
  %71 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 %70
  %72 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %71, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 %70, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = icmp ugt i64 %66, %75
  %77 = select i1 %76, i64 %75, i64 %66
  %78 = tail call i32 @memcmp(i8* %64, i8* %73, i64 %77) #14
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %82

80:                                               ; preds = %67
  %81 = icmp ult i64 %66, %75
  br i1 %81, label %88, label %84

82:                                               ; preds = %67
  %83 = icmp slt i32 %78, 0
  br i1 %83, label %88, label %84

84:                                               ; preds = %82, %80
  %85 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %71, i64 1
  %86 = xor i64 %70, -1
  %87 = add i64 %69, %86
  br label %88

88:                                               ; preds = %84, %82, %80
  %89 = phi i64 [ %87, %84 ], [ %70, %82 ], [ %70, %80 ]
  %90 = phi %"class.base::BasicStringPiece"* [ %85, %84 ], [ %68, %82 ], [ %68, %80 ]
  %91 = icmp eq i64 %89, 0
  br i1 %91, label %92, label %67

92:                                               ; preds = %88, %57
  %93 = phi %"class.base::BasicStringPiece"* [ %55, %57 ], [ %90, %88 ]
  %94 = ptrtoint %"class.base::BasicStringPiece"* %93 to i64
  %95 = sub i64 %94, %35
  %96 = ashr exact i64 %95, 4
  br label %152

97:                                               ; preds = %54
  %98 = icmp eq i64 %34, 1
  br i1 %98, label %99, label %107

99:                                               ; preds = %97
  %100 = inttoptr i64 %17 to %"class.base::BasicStringPiece"*
  %101 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %100, i64 0, i32 1
  %102 = inttoptr i64 %35 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %35 to i8*
  %105 = inttoptr i64 %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 16, i1 false) #14
  %106 = inttoptr i64 %17 to i64*
  store i64 %103, i64* %106, align 8
  store i64 %40, i64* %101, align 8
  br label %319

107:                                              ; preds = %97
  %108 = sdiv i64 %34, 2
  %109 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %55, i64 %108
  %110 = ptrtoint %"class.base::BasicStringPiece"* %109 to i64
  %111 = ptrtoint %"class.base::BasicStringPiece"* %14 to i64
  %112 = sub i64 %111, %17
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %146, label %114

114:                                              ; preds = %107
  %115 = ashr exact i64 %112, 4
  %116 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %109, i64 0, i32 0
  %117 = load i8*, i8** %116, align 8
  %118 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %55, i64 %108, i32 1
  %119 = load i64, i64* %118, align 8
  br label %120

120:                                              ; preds = %142, %114
  %121 = phi i64 [ 0, %114 ], [ %144, %142 ]
  %122 = phi i64 [ %115, %114 ], [ %143, %142 ]
  %123 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %121
  %124 = lshr i64 %122, 1
  %125 = add nsw i64 %124, %121
  %126 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %125, i32 0
  %127 = load i8*, i8** %126, align 8
  %128 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %123, i64 %124, i32 1
  %129 = load i64, i64* %128, align 8
  %130 = icmp ugt i64 %129, %119
  %131 = select i1 %130, i64 %119, i64 %129
  %132 = tail call i32 @memcmp(i8* %127, i8* %117, i64 %131) #14
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %136

134:                                              ; preds = %120
  %135 = icmp ult i64 %129, %119
  br i1 %135, label %138, label %142

136:                                              ; preds = %120
  %137 = icmp slt i32 %132, 0
  br i1 %137, label %138, label %142

138:                                              ; preds = %136, %134
  %139 = add nsw i64 %125, 1
  %140 = xor i64 %124, -1
  %141 = add i64 %122, %140
  br label %142

142:                                              ; preds = %138, %136, %134
  %143 = phi i64 [ %141, %138 ], [ %124, %136 ], [ %124, %134 ]
  %144 = phi i64 [ %139, %138 ], [ %121, %136 ], [ %121, %134 ]
  %145 = icmp eq i64 %143, 0
  br i1 %145, label %146, label %120

146:                                              ; preds = %142, %107
  %147 = phi i64 [ 0, %107 ], [ %144, %142 ]
  %148 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %147
  %149 = ptrtoint %"class.base::BasicStringPiece"* %148 to i64
  %150 = sub i64 %149, %17
  %151 = ashr exact i64 %150, 4
  br label %152

152:                                              ; preds = %146, %92
  %153 = phi i64 [ %94, %92 ], [ %110, %146 ]
  %154 = phi i64 [ %58, %92 ], [ %147, %146 ]
  %155 = phi i64 [ %58, %92 ], [ %151, %146 ]
  %156 = phi i64 [ %96, %92 ], [ %108, %146 ]
  %157 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %154
  %158 = ptrtoint %"class.base::BasicStringPiece"* %157 to i64
  %159 = sub nsw i64 %34, %156
  %160 = sub nsw i64 %16, %155
  %161 = inttoptr i64 %153 to %"class.base::BasicStringPiece"*
  %162 = icmp eq %"class.base::BasicStringPiece"* %161, %25
  br i1 %162, label %304, label %163

163:                                              ; preds = %152
  %164 = icmp eq i64 %154, 0
  br i1 %164, label %304, label %165

165:                                              ; preds = %163
  %166 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 1
  %167 = icmp eq %"class.base::BasicStringPiece"* %166, %25
  br i1 %167, label %168, label %183

168:                                              ; preds = %165
  %169 = inttoptr i64 %153 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 0, i32 1
  %172 = load i64, i64* %171, align 8
  %173 = sub i64 %158, %17
  %174 = ashr exact i64 %173, 4
  %175 = icmp eq i64 %173, 0
  br i1 %175, label %179, label %176

176:                                              ; preds = %168
  %177 = inttoptr i64 %153 to i8*
  %178 = inttoptr i64 %17 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %177, i8* align 8 %178, i64 %173, i1 false) #14
  br label %179

179:                                              ; preds = %176, %168
  %180 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 %174
  %181 = bitcast %"class.base::BasicStringPiece"* %180 to i64*
  store i64 %170, i64* %181, align 8
  %182 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 %174, i32 1
  store i64 %172, i64* %182, align 8
  br label %304

183:                                              ; preds = %165
  %184 = icmp eq i64 %154, 1
  br i1 %184, label %185, label %204

185:                                              ; preds = %183
  %186 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %157, i64 -1
  %187 = bitcast %"class.base::BasicStringPiece"* %186 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %157, i64 -1, i32 1
  %190 = load i64, i64* %189, align 8
  %191 = ptrtoint %"class.base::BasicStringPiece"* %186 to i64
  %192 = sub i64 %191, %153
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %200, label %194

194:                                              ; preds = %185
  %195 = ashr exact i64 %192, 4
  %196 = sub nsw i64 0, %195
  %197 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %157, i64 %196
  %198 = bitcast %"class.base::BasicStringPiece"* %197 to i8*
  %199 = inttoptr i64 %153 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %198, i8* align 8 %199, i64 %192, i1 false) #14
  br label %200

200:                                              ; preds = %194, %185
  %201 = phi %"class.base::BasicStringPiece"* [ %197, %194 ], [ %157, %185 ]
  %202 = inttoptr i64 %153 to i64*
  store i64 %188, i64* %202, align 8
  %203 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 0, i32 1
  store i64 %190, i64* %203, align 8
  br label %304

204:                                              ; preds = %183
  %205 = sub i64 %17, %153
  %206 = ashr exact i64 %205, 4
  %207 = sub i64 %158, %17
  %208 = ashr exact i64 %207, 4
  %209 = icmp eq i64 %206, %208
  br i1 %209, label %210, label %269

210:                                              ; preds = %204
  %211 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 -1
  %212 = bitcast %"class.base::BasicStringPiece"* %211 to i8*
  %213 = sub i64 0, %153
  %214 = getelementptr i8, i8* %212, i64 %213
  %215 = ptrtoint i8* %214 to i64
  %216 = lshr i64 %215, 4
  %217 = add nuw nsw i64 %216, 1
  %218 = and i64 %217, 3
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %233, label %220

220:                                              ; preds = %210, %220
  %221 = phi %"class.base::BasicStringPiece"* [ %230, %220 ], [ %25, %210 ]
  %222 = phi %"class.base::BasicStringPiece"* [ %229, %220 ], [ %161, %210 ]
  %223 = phi i64 [ %231, %220 ], [ %218, %210 ]
  %224 = bitcast %"class.base::BasicStringPiece"* %222 to <2 x i64>*
  %225 = load <2 x i64>, <2 x i64>* %224, align 8
  %226 = bitcast %"class.base::BasicStringPiece"* %222 to i8*
  %227 = bitcast %"class.base::BasicStringPiece"* %221 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %226, i8* align 8 %227, i64 16, i1 false) #14
  %228 = bitcast %"class.base::BasicStringPiece"* %221 to <2 x i64>*
  store <2 x i64> %225, <2 x i64>* %228, align 8
  %229 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %222, i64 1
  %230 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %221, i64 1
  %231 = add i64 %223, -1
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %233, label %220, !llvm.loop !7

233:                                              ; preds = %220, %210
  %234 = phi %"class.base::BasicStringPiece"* [ %25, %210 ], [ %230, %220 ]
  %235 = phi %"class.base::BasicStringPiece"* [ %161, %210 ], [ %229, %220 ]
  %236 = icmp ult i8* %214, inttoptr (i64 48 to i8*)
  br i1 %236, label %304, label %237

237:                                              ; preds = %233, %237
  %238 = phi %"class.base::BasicStringPiece"* [ %267, %237 ], [ %234, %233 ]
  %239 = phi %"class.base::BasicStringPiece"* [ %266, %237 ], [ %235, %233 ]
  %240 = bitcast %"class.base::BasicStringPiece"* %239 to <2 x i64>*
  %241 = load <2 x i64>, <2 x i64>* %240, align 8
  %242 = bitcast %"class.base::BasicStringPiece"* %239 to i8*
  %243 = bitcast %"class.base::BasicStringPiece"* %238 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %242, i8* align 8 %243, i64 16, i1 false) #14
  %244 = bitcast %"class.base::BasicStringPiece"* %238 to <2 x i64>*
  store <2 x i64> %241, <2 x i64>* %244, align 8
  %245 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 1
  %246 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %238, i64 1
  %247 = bitcast %"class.base::BasicStringPiece"* %245 to <2 x i64>*
  %248 = load <2 x i64>, <2 x i64>* %247, align 8
  %249 = bitcast %"class.base::BasicStringPiece"* %245 to i8*
  %250 = bitcast %"class.base::BasicStringPiece"* %246 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %249, i8* align 8 %250, i64 16, i1 false) #14
  %251 = bitcast %"class.base::BasicStringPiece"* %246 to <2 x i64>*
  store <2 x i64> %248, <2 x i64>* %251, align 8
  %252 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 2
  %253 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %238, i64 2
  %254 = bitcast %"class.base::BasicStringPiece"* %252 to <2 x i64>*
  %255 = load <2 x i64>, <2 x i64>* %254, align 8
  %256 = bitcast %"class.base::BasicStringPiece"* %252 to i8*
  %257 = bitcast %"class.base::BasicStringPiece"* %253 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %256, i8* align 8 %257, i64 16, i1 false) #14
  %258 = bitcast %"class.base::BasicStringPiece"* %253 to <2 x i64>*
  store <2 x i64> %255, <2 x i64>* %258, align 8
  %259 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 3
  %260 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %238, i64 3
  %261 = bitcast %"class.base::BasicStringPiece"* %259 to <2 x i64>*
  %262 = load <2 x i64>, <2 x i64>* %261, align 8
  %263 = bitcast %"class.base::BasicStringPiece"* %259 to i8*
  %264 = bitcast %"class.base::BasicStringPiece"* %260 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %263, i8* align 8 %264, i64 16, i1 false) #14
  %265 = bitcast %"class.base::BasicStringPiece"* %260 to <2 x i64>*
  store <2 x i64> %262, <2 x i64>* %265, align 8
  %266 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 4
  %267 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %238, i64 4
  %268 = icmp eq %"class.base::BasicStringPiece"* %266, %25
  br i1 %268, label %304, label %237

269:                                              ; preds = %204, %269
  %270 = phi i64 [ %272, %269 ], [ %208, %204 ]
  %271 = phi i64 [ %270, %269 ], [ %206, %204 ]
  %272 = srem i64 %271, %270
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %269

274:                                              ; preds = %269
  %275 = icmp eq i64 %270, 0
  br i1 %275, label %278, label %276

276:                                              ; preds = %274
  %277 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 %270
  br label %280

278:                                              ; preds = %301, %274
  %279 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 %208
  br label %304

280:                                              ; preds = %301, %276
  %281 = phi %"class.base::BasicStringPiece"* [ %282, %301 ], [ %277, %276 ]
  %282 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %281, i64 -1
  %283 = ptrtoint %"class.base::BasicStringPiece"* %282 to i64
  %284 = bitcast %"class.base::BasicStringPiece"* %282 to <2 x i64>*
  %285 = load <2 x i64>, <2 x i64>* %284, align 8
  %286 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %282, i64 %206
  br label %287

287:                                              ; preds = %287, %280
  %288 = phi i64 [ %283, %280 ], [ %290, %287 ]
  %289 = phi %"class.base::BasicStringPiece"* [ %286, %280 ], [ %299, %287 ]
  %290 = ptrtoint %"class.base::BasicStringPiece"* %289 to i64
  %291 = inttoptr i64 %288 to i8*
  %292 = bitcast %"class.base::BasicStringPiece"* %289 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %291, i8* align 8 %292, i64 16, i1 false) #14
  %293 = sub i64 %158, %290
  %294 = ashr exact i64 %293, 4
  %295 = icmp slt i64 %206, %294
  %296 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %289, i64 %206
  %297 = sub nsw i64 %206, %294
  %298 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 %297
  %299 = select i1 %295, %"class.base::BasicStringPiece"* %296, %"class.base::BasicStringPiece"* %298
  %300 = icmp eq %"class.base::BasicStringPiece"* %299, %282
  br i1 %300, label %301, label %287

301:                                              ; preds = %287
  %302 = bitcast %"class.base::BasicStringPiece"* %289 to <2 x i64>*
  store <2 x i64> %285, <2 x i64>* %302, align 8
  %303 = icmp eq %"class.base::BasicStringPiece"* %282, %161
  br i1 %303, label %278, label %280

304:                                              ; preds = %233, %237, %278, %200, %179, %152, %163
  %305 = phi %"class.base::BasicStringPiece"* [ %161, %163 ], [ %157, %152 ], [ %180, %179 ], [ %201, %200 ], [ %279, %278 ], [ %25, %237 ], [ %25, %233 ]
  %306 = add nsw i64 %156, %155
  %307 = add nsw i64 %159, %160
  %308 = icmp slt i64 %306, %307
  br i1 %308, label %309, label %311

309:                                              ; preds = %304
  %310 = ptrtoint %"class.base::BasicStringPiece"* %305 to i64
  tail call void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeEl(%"class.base::BasicStringPiece"* %55, %"class.base::BasicStringPiece"* %161, %"class.base::BasicStringPiece"* %305, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %3, i64 %156, i64 %155, %"class.base::BasicStringPiece"* %6, i64 %7)
  br label %312

311:                                              ; preds = %304
  tail call void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeEl(%"class.base::BasicStringPiece"* %305, %"class.base::BasicStringPiece"* %157, %"class.base::BasicStringPiece"* %14, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %3, i64 %159, i64 %160, %"class.base::BasicStringPiece"* %6, i64 %7)
  br label %312

312:                                              ; preds = %309, %311
  %313 = phi i64 [ %310, %309 ], [ %35, %311 ]
  %314 = phi i64 [ %158, %309 ], [ %153, %311 ]
  %315 = phi i64 [ %160, %309 ], [ %155, %311 ]
  %316 = phi i64 [ %159, %309 ], [ %156, %311 ]
  %317 = phi %"class.base::BasicStringPiece"* [ %14, %309 ], [ %305, %311 ]
  %318 = icmp eq i64 %315, 0
  br i1 %318, label %319, label %13

319:                                              ; preds = %312, %22, %49, %8, %99, %30
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__121__insertion_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_PNS_15iterator_traitsISL_E10value_typeET_(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %5 = icmp eq %"class.base::BasicStringPiece"* %0, %1
  br i1 %5, label %67, label %6

6:                                                ; preds = %4
  %7 = bitcast %"class.base::BasicStringPiece"* %2 to i8*
  %8 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false)
  %9 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 1
  %10 = icmp eq %"class.base::BasicStringPiece"* %9, %1
  br i1 %10, label %67, label %11

11:                                               ; preds = %6, %62
  %12 = phi %"class.base::BasicStringPiece"* [ %65, %62 ], [ %9, %6 ]
  %13 = phi %"class.base::BasicStringPiece"* [ %15, %62 ], [ %2, %6 ]
  %14 = phi %"class.base::BasicStringPiece"* [ %12, %62 ], [ %0, %6 ]
  %15 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %13, i64 1
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %14, i64 1, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %13, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %13, i64 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp ugt i64 %19, %23
  %25 = select i1 %24, i64 %23, i64 %19
  %26 = tail call i32 @memcmp(i8* %17, i8* %21, i64 %25) #14
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %11
  %29 = icmp ult i64 %19, %23
  %30 = bitcast %"class.base::BasicStringPiece"* %15 to i8*
  br i1 %29, label %34, label %62

31:                                               ; preds = %11
  %32 = icmp slt i32 %26, 0
  %33 = bitcast %"class.base::BasicStringPiece"* %15 to i8*
  br i1 %32, label %34, label %62

34:                                               ; preds = %28, %31
  %35 = phi i8* [ %33, %31 ], [ %30, %28 ]
  %36 = bitcast %"class.base::BasicStringPiece"* %13 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 16, i1 false)
  %37 = icmp eq %"class.base::BasicStringPiece"* %13, %2
  br i1 %37, label %62, label %38

38:                                               ; preds = %34, %55
  %39 = phi %"class.base::BasicStringPiece"* [ %40, %55 ], [ %13, %34 ]
  %40 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %39, i64 -1
  %41 = load i8*, i8** %16, align 8
  %42 = load i64, i64* %18, align 8
  %43 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %40, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %39, i64 -1, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = icmp ugt i64 %42, %46
  %48 = select i1 %47, i64 %46, i64 %42
  %49 = tail call i32 @memcmp(i8* %41, i8* %44, i64 %48) #14
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %38
  %52 = icmp ult i64 %42, %46
  br i1 %52, label %55, label %59

53:                                               ; preds = %38
  %54 = icmp slt i32 %49, 0
  br i1 %54, label %55, label %59

55:                                               ; preds = %51, %53
  %56 = bitcast %"class.base::BasicStringPiece"* %39 to i8*
  %57 = bitcast %"class.base::BasicStringPiece"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 16, i1 false)
  %58 = icmp eq %"class.base::BasicStringPiece"* %40, %2
  br i1 %58, label %59, label %38

59:                                               ; preds = %51, %55, %53
  %60 = phi %"class.base::BasicStringPiece"* [ %39, %53 ], [ %2, %55 ], [ %39, %51 ]
  %61 = bitcast %"class.base::BasicStringPiece"* %60 to i8*
  br label %62

62:                                               ; preds = %31, %28, %34, %59
  %63 = phi i8* [ %61, %59 ], [ %7, %34 ], [ %33, %31 ], [ %30, %28 ]
  %64 = bitcast %"class.base::BasicStringPiece"* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 16, i1 false)
  %65 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 1
  %66 = icmp eq %"class.base::BasicStringPiece"* %65, %1
  br i1 %66, label %67, label %11

67:                                               ; preds = %62, %6, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__124__buffered_inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeE(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1), i64, i64, %"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat {
  %8 = ptrtoint %"class.base::BasicStringPiece"* %0 to i64
  %9 = ptrtoint %"class.base::BasicStringPiece"* %1 to i64
  %10 = ptrtoint %"class.base::BasicStringPiece"* %6 to i64
  %11 = icmp sgt i64 %4, %5
  br i1 %11, label %37, label %12

12:                                               ; preds = %7
  %13 = icmp eq %"class.base::BasicStringPiece"* %0, %1
  br i1 %13, label %227, label %14

14:                                               ; preds = %12
  %15 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1, i32 0
  %16 = ptrtoint i8** %15 to i64
  %17 = sub i64 %16, %8
  %18 = lshr i64 %17, 4
  %19 = add nuw nsw i64 %18, 1
  %20 = and i64 %19, 3
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %14, %22
  %23 = phi %"class.base::BasicStringPiece"* [ %29, %22 ], [ %6, %14 ]
  %24 = phi %"class.base::BasicStringPiece"* [ %28, %22 ], [ %0, %14 ]
  %25 = phi i64 [ %30, %22 ], [ %20, %14 ]
  %26 = bitcast %"class.base::BasicStringPiece"* %23 to i8*
  %27 = bitcast %"class.base::BasicStringPiece"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false)
  %28 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %24, i64 1
  %29 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %23, i64 1
  %30 = add i64 %25, -1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %22, !llvm.loop !8

32:                                               ; preds = %22, %14
  %33 = phi %"class.base::BasicStringPiece"* [ undef, %14 ], [ %29, %22 ]
  %34 = phi %"class.base::BasicStringPiece"* [ %6, %14 ], [ %29, %22 ]
  %35 = phi %"class.base::BasicStringPiece"* [ %0, %14 ], [ %28, %22 ]
  %36 = icmp ult i64 %17, 48
  br i1 %36, label %62, label %108

37:                                               ; preds = %7
  %38 = icmp eq %"class.base::BasicStringPiece"* %1, %2
  br i1 %38, label %227, label %39

39:                                               ; preds = %37
  %40 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %2, i64 -1, i32 0
  %41 = ptrtoint i8** %40 to i64
  %42 = sub i64 %41, %9
  %43 = lshr i64 %42, 4
  %44 = add nuw nsw i64 %43, 1
  %45 = and i64 %44, 3
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %57, label %47

47:                                               ; preds = %39, %47
  %48 = phi %"class.base::BasicStringPiece"* [ %54, %47 ], [ %6, %39 ]
  %49 = phi %"class.base::BasicStringPiece"* [ %53, %47 ], [ %1, %39 ]
  %50 = phi i64 [ %55, %47 ], [ %45, %39 ]
  %51 = bitcast %"class.base::BasicStringPiece"* %48 to i8*
  %52 = bitcast %"class.base::BasicStringPiece"* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 16, i1 false)
  %53 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %49, i64 1
  %54 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %48, i64 1
  %55 = add i64 %50, -1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %47, !llvm.loop !9

57:                                               ; preds = %47, %39
  %58 = phi %"class.base::BasicStringPiece"* [ undef, %39 ], [ %54, %47 ]
  %59 = phi %"class.base::BasicStringPiece"* [ %6, %39 ], [ %54, %47 ]
  %60 = phi %"class.base::BasicStringPiece"* [ %1, %39 ], [ %53, %47 ]
  %61 = icmp ult i64 %42, 48
  br i1 %61, label %128, label %207

62:                                               ; preds = %108, %32
  %63 = phi %"class.base::BasicStringPiece"* [ %33, %32 ], [ %126, %108 ]
  %64 = icmp eq %"class.base::BasicStringPiece"* %63, %6
  br i1 %64, label %227, label %65

65:                                               ; preds = %62, %103
  %66 = phi %"class.base::BasicStringPiece"* [ %105, %103 ], [ %6, %62 ]
  %67 = phi %"class.base::BasicStringPiece"* [ %106, %103 ], [ %0, %62 ]
  %68 = phi %"class.base::BasicStringPiece"* [ %104, %103 ], [ %1, %62 ]
  %69 = icmp eq %"class.base::BasicStringPiece"* %68, %2
  br i1 %69, label %70, label %78

70:                                               ; preds = %65
  %71 = ptrtoint %"class.base::BasicStringPiece"* %63 to i64
  %72 = ptrtoint %"class.base::BasicStringPiece"* %66 to i64
  %73 = sub i64 %71, %72
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %227, label %75

75:                                               ; preds = %70
  %76 = bitcast %"class.base::BasicStringPiece"* %67 to i8*
  %77 = bitcast %"class.base::BasicStringPiece"* %66 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %73, i1 false) #14
  br label %227

78:                                               ; preds = %65
  %79 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 0, i32 1
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %66, i64 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %66, i64 0, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = icmp ugt i64 %82, %86
  %88 = select i1 %87, i64 %86, i64 %82
  %89 = tail call i32 @memcmp(i8* %80, i8* %84, i64 %88) #14
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %93

91:                                               ; preds = %78
  %92 = icmp ult i64 %82, %86
  br i1 %92, label %95, label %99

93:                                               ; preds = %78
  %94 = icmp slt i32 %89, 0
  br i1 %94, label %95, label %99

95:                                               ; preds = %93, %91
  %96 = bitcast %"class.base::BasicStringPiece"* %67 to i8*
  %97 = bitcast %"class.base::BasicStringPiece"* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %97, i64 16, i1 false) #14
  %98 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 1
  br label %103

99:                                               ; preds = %93, %91
  %100 = bitcast %"class.base::BasicStringPiece"* %67 to i8*
  %101 = bitcast %"class.base::BasicStringPiece"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 16, i1 false) #14
  %102 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %66, i64 1
  br label %103

103:                                              ; preds = %99, %95
  %104 = phi %"class.base::BasicStringPiece"* [ %98, %95 ], [ %68, %99 ]
  %105 = phi %"class.base::BasicStringPiece"* [ %66, %95 ], [ %102, %99 ]
  %106 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %67, i64 1
  %107 = icmp eq %"class.base::BasicStringPiece"* %105, %63
  br i1 %107, label %227, label %65

108:                                              ; preds = %32, %108
  %109 = phi %"class.base::BasicStringPiece"* [ %126, %108 ], [ %34, %32 ]
  %110 = phi %"class.base::BasicStringPiece"* [ %125, %108 ], [ %35, %32 ]
  %111 = bitcast %"class.base::BasicStringPiece"* %109 to i8*
  %112 = bitcast %"class.base::BasicStringPiece"* %110 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %111, i8* align 8 %112, i64 16, i1 false)
  %113 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %110, i64 1
  %114 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %109, i64 1
  %115 = bitcast %"class.base::BasicStringPiece"* %114 to i8*
  %116 = bitcast %"class.base::BasicStringPiece"* %113 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %116, i64 16, i1 false)
  %117 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %110, i64 2
  %118 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %109, i64 2
  %119 = bitcast %"class.base::BasicStringPiece"* %118 to i8*
  %120 = bitcast %"class.base::BasicStringPiece"* %117 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %120, i64 16, i1 false)
  %121 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %110, i64 3
  %122 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %109, i64 3
  %123 = bitcast %"class.base::BasicStringPiece"* %122 to i8*
  %124 = bitcast %"class.base::BasicStringPiece"* %121 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %123, i8* align 8 %124, i64 16, i1 false)
  %125 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %110, i64 4
  %126 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %109, i64 4
  %127 = icmp eq %"class.base::BasicStringPiece"* %125, %1
  br i1 %127, label %62, label %108

128:                                              ; preds = %207, %57
  %129 = phi %"class.base::BasicStringPiece"* [ %58, %57 ], [ %225, %207 ]
  %130 = icmp eq %"class.base::BasicStringPiece"* %129, %6
  br i1 %130, label %227, label %131

131:                                              ; preds = %128, %198
  %132 = phi %"class.base::BasicStringPiece"* [ %205, %198 ], [ %2, %128 ]
  %133 = phi %"class.base::BasicStringPiece"* [ %201, %198 ], [ %129, %128 ]
  %134 = phi %"class.base::BasicStringPiece"* [ %200, %198 ], [ %1, %128 ]
  %135 = icmp eq %"class.base::BasicStringPiece"* %134, %0
  br i1 %135, label %136, label %178

136:                                              ; preds = %131
  %137 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %133, i64 -1, i32 0
  %138 = ptrtoint i8** %137 to i64
  %139 = sub i64 %138, %10
  %140 = lshr i64 %139, 4
  %141 = add nuw nsw i64 %140, 1
  %142 = and i64 %141, 3
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %154, label %144

144:                                              ; preds = %136, %144
  %145 = phi %"class.base::BasicStringPiece"* [ %148, %144 ], [ %133, %136 ]
  %146 = phi %"class.base::BasicStringPiece"* [ %149, %144 ], [ %132, %136 ]
  %147 = phi i64 [ %152, %144 ], [ %142, %136 ]
  %148 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %145, i64 -1
  %149 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %146, i64 -1
  %150 = bitcast %"class.base::BasicStringPiece"* %149 to i8*
  %151 = bitcast %"class.base::BasicStringPiece"* %148 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %151, i64 16, i1 false) #14
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %144, !llvm.loop !10

154:                                              ; preds = %144, %136
  %155 = phi %"class.base::BasicStringPiece"* [ %133, %136 ], [ %148, %144 ]
  %156 = phi %"class.base::BasicStringPiece"* [ %132, %136 ], [ %149, %144 ]
  %157 = icmp ult i64 %139, 48
  br i1 %157, label %227, label %158

158:                                              ; preds = %154, %158
  %159 = phi %"class.base::BasicStringPiece"* [ %173, %158 ], [ %155, %154 ]
  %160 = phi %"class.base::BasicStringPiece"* [ %174, %158 ], [ %156, %154 ]
  %161 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %159, i64 -1
  %162 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %160, i64 -1
  %163 = bitcast %"class.base::BasicStringPiece"* %162 to i8*
  %164 = bitcast %"class.base::BasicStringPiece"* %161 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %163, i8* align 8 %164, i64 16, i1 false) #14
  %165 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %159, i64 -2
  %166 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %160, i64 -2
  %167 = bitcast %"class.base::BasicStringPiece"* %166 to i8*
  %168 = bitcast %"class.base::BasicStringPiece"* %165 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %167, i8* align 8 %168, i64 16, i1 false) #14
  %169 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %159, i64 -3
  %170 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %160, i64 -3
  %171 = bitcast %"class.base::BasicStringPiece"* %170 to i8*
  %172 = bitcast %"class.base::BasicStringPiece"* %169 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %171, i8* align 8 %172, i64 16, i1 false) #14
  %173 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %159, i64 -4
  %174 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %160, i64 -4
  %175 = bitcast %"class.base::BasicStringPiece"* %174 to i8*
  %176 = bitcast %"class.base::BasicStringPiece"* %173 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %175, i8* align 8 %176, i64 16, i1 false) #14
  %177 = icmp eq %"class.base::BasicStringPiece"* %173, %6
  br i1 %177, label %227, label %158

178:                                              ; preds = %131
  %179 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %134, i64 -1
  %180 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %133, i64 -1
  %181 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %180, i64 0, i32 0
  %182 = load i8*, i8** %181, align 8
  %183 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %133, i64 -1, i32 1
  %184 = load i64, i64* %183, align 8
  %185 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %179, i64 0, i32 0
  %186 = load i8*, i8** %185, align 8
  %187 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %134, i64 -1, i32 1
  %188 = load i64, i64* %187, align 8
  %189 = icmp ugt i64 %184, %188
  %190 = select i1 %189, i64 %188, i64 %184
  %191 = tail call i32 @memcmp(i8* %182, i8* %186, i64 %190) #14
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %195

193:                                              ; preds = %178
  %194 = icmp ult i64 %184, %188
  br i1 %194, label %198, label %197

195:                                              ; preds = %178
  %196 = icmp slt i32 %191, 0
  br i1 %196, label %198, label %197

197:                                              ; preds = %195, %193
  br label %198

198:                                              ; preds = %193, %195, %197
  %199 = phi %"class.base::BasicStringPiece"* [ %180, %197 ], [ %179, %195 ], [ %179, %193 ]
  %200 = phi %"class.base::BasicStringPiece"* [ %134, %197 ], [ %179, %195 ], [ %179, %193 ]
  %201 = phi %"class.base::BasicStringPiece"* [ %180, %197 ], [ %133, %195 ], [ %133, %193 ]
  %202 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %132, i64 -1
  %203 = bitcast %"class.base::BasicStringPiece"* %202 to i8*
  %204 = bitcast %"class.base::BasicStringPiece"* %199 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %203, i8* align 8 %204, i64 16, i1 false) #14
  %205 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %132, i64 -1
  %206 = icmp eq %"class.base::BasicStringPiece"* %201, %6
  br i1 %206, label %227, label %131

207:                                              ; preds = %57, %207
  %208 = phi %"class.base::BasicStringPiece"* [ %225, %207 ], [ %59, %57 ]
  %209 = phi %"class.base::BasicStringPiece"* [ %224, %207 ], [ %60, %57 ]
  %210 = bitcast %"class.base::BasicStringPiece"* %208 to i8*
  %211 = bitcast %"class.base::BasicStringPiece"* %209 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %210, i8* align 8 %211, i64 16, i1 false)
  %212 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %209, i64 1
  %213 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %208, i64 1
  %214 = bitcast %"class.base::BasicStringPiece"* %213 to i8*
  %215 = bitcast %"class.base::BasicStringPiece"* %212 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %214, i8* align 8 %215, i64 16, i1 false)
  %216 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %209, i64 2
  %217 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %208, i64 2
  %218 = bitcast %"class.base::BasicStringPiece"* %217 to i8*
  %219 = bitcast %"class.base::BasicStringPiece"* %216 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 16, i1 false)
  %220 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %209, i64 3
  %221 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %208, i64 3
  %222 = bitcast %"class.base::BasicStringPiece"* %221 to i8*
  %223 = bitcast %"class.base::BasicStringPiece"* %220 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %222, i8* align 8 %223, i64 16, i1 false)
  %224 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %209, i64 4
  %225 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %208, i64 4
  %226 = icmp eq %"class.base::BasicStringPiece"* %224, %2
  br i1 %226, label %128, label %207

227:                                              ; preds = %103, %198, %154, %158, %37, %12, %128, %75, %70, %62
  ret void
}

declare void @_ZN3gpu24VulkanPhysicalDeviceInfoC1ERKS0_(%"class.gpu::VulkanPhysicalDeviceInfo"*, %"class.gpu::VulkanPhysicalDeviceInfo"* dereferenceable(1640)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN3gpu24VulkanPhysicalDeviceInfoD1Ev(%"class.gpu::VulkanPhysicalDeviceInfo"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3gpu24VulkanPhysicalDeviceInfoENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJEEEvDpOT_(%"class.std::__1::vector.15"*) local_unnamed_addr #12 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 1
  %3 = bitcast %"class.gpu::VulkanPhysicalDeviceInfo"** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.std::__1::vector.15"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = sdiv exact i64 %7, 1640
  %9 = add nsw i64 %8, 1
  %10 = icmp ugt i64 %9, 11248014679091190
  br i1 %10, label %11, label %13

11:                                               ; preds = %1
  %12 = bitcast %"class.std::__1::vector.15"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %12) #16
  unreachable

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %"class.gpu::VulkanPhysicalDeviceInfo"** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %6
  %18 = sdiv exact i64 %17, 1640
  %19 = icmp ult i64 %18, 5624007339545595
  br i1 %19, label %20, label %25

20:                                               ; preds = %13
  %21 = shl nsw i64 %18, 1
  %22 = icmp ult i64 %21, %9
  %23 = select i1 %22, i64 %9, i64 %21
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %13, %20
  %26 = phi i64 [ %23, %20 ], [ 11248014679091190, %13 ]
  %27 = mul i64 %26, 1640
  %28 = tail call i8* @_Znwm(i64 %27) #15
  %29 = bitcast i8* %28 to %"class.gpu::VulkanPhysicalDeviceInfo"*
  br label %30

30:                                               ; preds = %20, %25
  %31 = phi i64 [ %26, %25 ], [ 0, %20 ]
  %32 = phi %"class.gpu::VulkanPhysicalDeviceInfo"* [ %29, %25 ], [ null, %20 ]
  %33 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %32, i64 %8
  %34 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %32, i64 %31
  %35 = ptrtoint %"class.gpu::VulkanPhysicalDeviceInfo"* %34 to i64
  tail call void @_ZN3gpu24VulkanPhysicalDeviceInfoC1Ev(%"class.gpu::VulkanPhysicalDeviceInfo"* %33) #14
  %36 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %33, i64 1
  %37 = ptrtoint %"class.gpu::VulkanPhysicalDeviceInfo"* %36 to i64
  %38 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 0
  %39 = load %"class.gpu::VulkanPhysicalDeviceInfo"*, %"class.gpu::VulkanPhysicalDeviceInfo"** %38, align 8
  %40 = load %"class.gpu::VulkanPhysicalDeviceInfo"*, %"class.gpu::VulkanPhysicalDeviceInfo"** %2, align 8
  %41 = icmp eq %"class.gpu::VulkanPhysicalDeviceInfo"* %40, %39
  br i1 %41, label %42, label %44

42:                                               ; preds = %30
  %43 = ptrtoint %"class.gpu::VulkanPhysicalDeviceInfo"* %39 to i64
  br label %53

44:                                               ; preds = %30, %44
  %45 = phi %"class.gpu::VulkanPhysicalDeviceInfo"* [ %47, %44 ], [ %33, %30 ]
  %46 = phi %"class.gpu::VulkanPhysicalDeviceInfo"* [ %48, %44 ], [ %40, %30 ]
  %47 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %45, i64 -1
  %48 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %46, i64 -1
  tail call void @_ZN3gpu24VulkanPhysicalDeviceInfoC1ERKS0_(%"class.gpu::VulkanPhysicalDeviceInfo"* %47, %"class.gpu::VulkanPhysicalDeviceInfo"* dereferenceable(1640) %48) #14
  %49 = icmp eq %"class.gpu::VulkanPhysicalDeviceInfo"* %48, %39
  br i1 %49, label %50, label %44

50:                                               ; preds = %44
  %51 = load i64, i64* %5, align 8
  %52 = load %"class.gpu::VulkanPhysicalDeviceInfo"*, %"class.gpu::VulkanPhysicalDeviceInfo"** %2, align 8
  br label %53

53:                                               ; preds = %42, %50
  %54 = phi %"class.gpu::VulkanPhysicalDeviceInfo"* [ %39, %42 ], [ %52, %50 ]
  %55 = phi %"class.gpu::VulkanPhysicalDeviceInfo"* [ %33, %42 ], [ %47, %50 ]
  %56 = phi i64 [ %43, %42 ], [ %51, %50 ]
  %57 = ptrtoint %"class.gpu::VulkanPhysicalDeviceInfo"* %55 to i64
  store i64 %57, i64* %5, align 8
  store i64 %37, i64* %3, align 8
  store i64 %35, i64* %15, align 8
  %58 = inttoptr i64 %56 to %"class.gpu::VulkanPhysicalDeviceInfo"*
  %59 = icmp eq %"class.gpu::VulkanPhysicalDeviceInfo"* %54, %58
  br i1 %59, label %64, label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.gpu::VulkanPhysicalDeviceInfo"* [ %62, %60 ], [ %54, %53 ]
  %62 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %61, i64 -1
  tail call void @_ZN3gpu24VulkanPhysicalDeviceInfoD1Ev(%"class.gpu::VulkanPhysicalDeviceInfo"* %62) #14
  %63 = icmp eq %"class.gpu::VulkanPhysicalDeviceInfo"* %62, %58
  br i1 %63, label %64, label %60

64:                                               ; preds = %60, %53
  %65 = icmp eq i64 %56, 0
  br i1 %65, label %68, label %66

66:                                               ; preds = %64
  %67 = inttoptr i64 %56 to i8*
  tail call void @_ZdlPv(i8* %67) #15
  br label %68

68:                                               ; preds = %64, %66
  ret void
}

declare void @_ZN3gpu24VulkanPhysicalDeviceInfoC1Ev(%"class.gpu::VulkanPhysicalDeviceInfo"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI23VkQueueFamilyPropertiesNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector.17"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %struct.VkQueueFamilyProperties** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %struct.VkQueueFamilyProperties** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %struct.VkQueueFamilyProperties*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.VkQueueFamilyProperties, %struct.VkQueueFamilyProperties* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %struct.VkQueueFamilyProperties, %struct.VkQueueFamilyProperties* %13, i64 %18, i32 0
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %26, i1 false) #14
  %27 = ptrtoint %struct.VkQueueFamilyProperties* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %85

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.17"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.17"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #16
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #15
  %52 = bitcast i8* %51 to %struct.VkQueueFamilyProperties*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %struct.VkQueueFamilyProperties* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %struct.VkQueueFamilyProperties, %struct.VkQueueFamilyProperties* %55, i64 %34
  %57 = bitcast %struct.VkQueueFamilyProperties* %56 to i8*
  %58 = getelementptr inbounds %struct.VkQueueFamilyProperties, %struct.VkQueueFamilyProperties* %55, i64 %54
  %59 = getelementptr inbounds %struct.VkQueueFamilyProperties, %struct.VkQueueFamilyProperties* %56, i64 %1
  %60 = mul nsw i64 %1, 24
  %61 = add i64 %60, -24
  %62 = urem i64 %61, 24
  %63 = sub i64 %61, %62
  %64 = add i64 %63, 24
  call void @llvm.memset.p0i8.i64(i8* align 4 %57, i8 0, i64 %64, i1 false)
  %65 = ptrtoint %struct.VkQueueFamilyProperties* %58 to i64
  %66 = ptrtoint %struct.VkQueueFamilyProperties* %59 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %0, i64 0, i32 0, i32 0
  %68 = load %struct.VkQueueFamilyProperties*, %struct.VkQueueFamilyProperties** %67, align 8
  %69 = load i64, i64* %7, align 8
  %70 = ptrtoint %struct.VkQueueFamilyProperties* %68 to i64
  %71 = sub i64 %69, %70
  %72 = sdiv exact i64 %71, -24
  %73 = getelementptr inbounds %struct.VkQueueFamilyProperties, %struct.VkQueueFamilyProperties* %56, i64 %72
  %74 = ptrtoint %struct.VkQueueFamilyProperties* %73 to i64
  %75 = icmp sgt i64 %71, 0
  br i1 %75, label %76, label %80

76:                                               ; preds = %53
  %77 = bitcast %struct.VkQueueFamilyProperties* %73 to i8*
  %78 = bitcast %struct.VkQueueFamilyProperties* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %77, i8* align 4 %78, i64 %71, i1 false) #14
  %79 = load %struct.VkQueueFamilyProperties*, %struct.VkQueueFamilyProperties** %67, align 8
  br label %80

80:                                               ; preds = %53, %76
  %81 = phi %struct.VkQueueFamilyProperties* [ %68, %53 ], [ %79, %76 ]
  store i64 %74, i64* %31, align 8
  store i64 %66, i64* %7, align 8
  store i64 %65, i64* %4, align 8
  %82 = icmp eq %struct.VkQueueFamilyProperties* %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %80
  %84 = bitcast %struct.VkQueueFamilyProperties* %81 to i8*
  tail call void @_ZdlPv(i8* %84) #15
  br label %85

85:                                               ; preds = %83, %80, %28
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #13

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree nounwind readonly }
attributes #14 = { nounwind }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
