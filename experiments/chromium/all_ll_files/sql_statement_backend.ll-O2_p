; ModuleID = '../../third_party/blink/renderer/modules/webdatabase/sql_statement_backend.cc'
source_filename = "../../third_party/blink/renderer/modules/webdatabase/sql_statement_backend.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.25", i32, [4 x i8], %"class.std::__1::unique_ptr.161", %"class.std::__1::unique_ptr.161", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.171", %"class.std::__1::unique_ptr.177", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.189", %"class.std::__1::unique_ptr.195", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.202", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.25" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.40", %"class.std::__1::unique_ptr.46", %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.69", %"class.std::__1::unique_ptr.76", %"class.std::__1::unique_ptr.76", %"class.std::__1::unique_ptr.83", %"class.std::__1::unique_ptr.90", %"class.std::__1::unique_ptr.97", %"class.std::__1::unique_ptr.97", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.111", %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.141", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.61" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.61" = type { %"struct.std::__1::__atomic_base.62" }
%"struct.std::__1::__atomic_base.62" = type { %"struct.std::__1::__atomic_base.63" }
%"struct.std::__1::__atomic_base.63" = type { %"struct.std::__1::__cxx_atomic_impl.64" }
%"struct.std::__1::__cxx_atomic_impl.64" = type { %"struct.std::__1::__cxx_atomic_base_impl.65" }
%"struct.std::__1::__cxx_atomic_base_impl.65" = type { i64 }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.blink::Worklist.72"* }
%"class.blink::Worklist.72" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.61" }
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.blink::Worklist.79"* }
%"class.blink::Worklist.79" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.61" }
%"class.std::__1::unique_ptr.83" = type { %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"class.blink::Worklist.86"* }
%"class.blink::Worklist.86" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.61" }
%"class.std::__1::unique_ptr.90" = type { %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"class.blink::Worklist.93"* }
%"class.blink::Worklist.93" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.61" }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.blink::Worklist.100"* }
%"class.blink::Worklist.100" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.61" }
%"class.std::__1::unique_ptr.104" = type { %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"class.blink::Worklist.107"* }
%"class.blink::Worklist.107" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.61" }
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"class.blink::Worklist.114"* }
%"class.blink::Worklist.114" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.61" }
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.121", %"class.std::__1::__compressed_pair.128", %"class.std::__1::__compressed_pair.133", %"class.std::__1::__compressed_pair.135", [4 x i8] }>
%"class.std::__1::unique_ptr.121" = type { %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123", %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { i64 }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { float }
%"class.std::__1::unique_ptr.141" = type { %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.144", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.153" }
%"class.WTF::Vector.153" = type { %"class.WTF::VectorBuffer.154" }
%"class.WTF::VectorBuffer.154" = type { %"class.WTF::VectorBufferBase.155" }
%"class.WTF::VectorBufferBase.155" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.169" }
%"class.WTF::VectorBuffer.169" = type { %"class.WTF::VectorBufferBase.170" }
%"class.WTF::VectorBufferBase.170" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.171" = type { %"class.std::__1::__compressed_pair.172" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.177" = type { %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.179" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.183" }
%"class.std::__1::unique_ptr.183" = type { %"class.std::__1::__compressed_pair.184" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.72"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.79"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.86"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.93"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.100"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.206" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.189" = type { %"class.std::__1::__compressed_pair.190" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191" }
%"struct.std::__1::__compressed_pair_elem.191" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.195" = type { %"class.std::__1::__compressed_pair.196" }
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.201 }
%class.scoped_refptr.201 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.202" = type { %"struct.std::__1::__atomic_base.203" }
%"struct.std::__1::__atomic_base.203" = type { %"struct.std::__1::__cxx_atomic_impl.204" }
%"struct.std::__1::__cxx_atomic_impl.204" = type { %"struct.std::__1::__cxx_atomic_base_impl.205" }
%"struct.std::__1::__cxx_atomic_base_impl.205" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::SQLStatementBackend" = type <{ %"class.blink::Member", %"class.WTF::String", %"class.WTF::Vector", i8, i8, [6 x i8], %"class.std::__1::unique_ptr", %"class.blink::Member.14", i32, [4 x i8] }>
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::SQLStatement"* }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::SQLValue"*, i32, i32 }
%"class.blink::SQLValue" = type { i32, double, %"class.WTF::String" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::SQLErrorData"* }
%"class.blink::SQLErrorData" = type { i32, %"class.WTF::String" }
%"class.blink::Member.14" = type { %"class.blink::MemberBase.15" }
%"class.blink::MemberBase.15" = type { %"class.blink::SQLResultSet"* }
%"class.blink::SQLResultSet" = type <{ %"class.blink::ScriptWrappable", %"class.blink::Member.18", i64, i32, i8, i8, [2 x i8] }>
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.18" = type { %"class.blink::MemberBase.19" }
%"class.blink::MemberBase.19" = type { %"class.blink::SQLResultSetRowList"* }
%"class.blink::SQLResultSetRowList" = type { %"class.blink::ScriptWrappable", %"class.WTF::Vector.20", %"class.WTF::Vector" }
%"class.WTF::Vector.20" = type { %"class.WTF::VectorBuffer.21" }
%"class.WTF::VectorBuffer.21" = type { %"class.WTF::VectorBufferBase.22" }
%"class.WTF::VectorBufferBase.22" = type { %"class.WTF::String"*, i32, i32 }
%"class.blink::SQLStatement" = type { %"class.blink::Member.2", %"class.blink::Member.4", %"class.blink::Member.8", %"class.blink::probe::AsyncTaskId" }
%"class.blink::Member.2" = type { %"class.blink::MemberBase.3" }
%"class.blink::MemberBase.3" = type { %"class.blink::SQLStatementBackend"* }
%"class.blink::Member.4" = type { %"class.blink::MemberBase.5" }
%"class.blink::MemberBase.5" = type { %"class.blink::SQLStatement::OnSuccessCallback"* }
%"class.blink::SQLStatement::OnSuccessCallback" = type { i32 (...)** }
%"class.blink::Member.8" = type { %"class.blink::MemberBase.9" }
%"class.blink::MemberBase.9" = type { %"class.blink::SQLStatement::OnErrorCallback"* }
%"class.blink::SQLStatement::OnErrorCallback" = type { i32 (...)** }
%"class.blink::probe::AsyncTaskId" = type { i8, %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i64 }
%"class.blink::Database" = type { %"class.blink::ScriptWrappable", %class.scoped_refptr.211, %class.scoped_refptr.211, %"class.blink::Member.212", %class.scoped_refptr.214, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i32, %"struct.std::__1::atomic.202", i8, %"class.blink::DatabaseAuthorizer", %"class.blink::SQLiteDatabase", %"class.WTF::Deque.226", %"class.WTF::Mutex", i8, i8, %"class.blink::FrameOrWorkerScheduler::SchedulingAffectingFeatureHandle" }
%class.scoped_refptr.211 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional.282", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr.211 }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.absl::optional.282" = type { %"class.absl::optional_internal::optional_data.283" }
%"class.absl::optional_internal::optional_data.283" = type { %"class.absl::optional_internal::optional_data_base.284" }
%"class.absl::optional_internal::optional_data_base.284" = type { %"class.absl::optional_internal::optional_data_dtor_base.285" }
%"class.absl::optional_internal::optional_data_dtor_base.285" = type { i8, %union.anon.286 }
%union.anon.286 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::Member.212" = type { %"class.blink::MemberBase.213" }
%"class.blink::MemberBase.213" = type { %"class.blink::DatabaseContext"* }
%"class.blink::DatabaseContext" = type opaque
%class.scoped_refptr.214 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.215" }
%"struct.std::__1::atomic.215" = type { %"struct.std::__1::__atomic_base.216" }
%"struct.std::__1::__atomic_base.216" = type { %"struct.std::__1::__atomic_base.217" }
%"struct.std::__1::__atomic_base.217" = type { %"struct.std::__1::__cxx_atomic_impl.218" }
%"struct.std::__1::__cxx_atomic_impl.218" = type { %"struct.std::__1::__cxx_atomic_base_impl.219" }
%"struct.std::__1::__cxx_atomic_base_impl.219" = type { i32 }
%"class.blink::DatabaseAuthorizer" = type { i32, i8, %"class.WTF::String" }
%"class.blink::SQLiteDatabase" = type <{ %struct.sqlite3*, i32, i8, [3 x i8], %"class.WTF::Mutex", %"class.blink::DatabaseAuthorizer"*, i32, [4 x i8], %"class.WTF::Mutex", i32, [4 x i8], %"class.std::__1::basic_string", i32, [4 x i8] }>
%struct.sqlite3 = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.220" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.222 }
%union.anon.222 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.WTF::Deque.226" = type { %"class.WTF::Deque<blink::CrossThreadPersistent<blink::SQLTransactionBackend>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<blink::CrossThreadPersistent<blink::SQLTransactionBackend>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.229" }
%"class.WTF::VectorBuffer.229" = type { %"class.WTF::VectorBufferBase.230" }
%"class.WTF::VectorBufferBase.230" = type { %"class.blink::CrossThreadPersistent"*, i32, i32 }
%"class.blink::CrossThreadPersistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::SQLTransactionBackend"*, %"class.blink::CrossThreadPersistentNodePtr" }
%"class.blink::SQLTransactionBackend" = type { %"class.blink::SQLTransactionStateMachine", %"class.blink::CrossThreadPersistent.233", %"class.blink::CrossThreadPersistent.256", %"class.blink::CrossThreadPersistent.258", %"class.blink::Member.260", %"class.std::__1::unique_ptr", i8, i8, i8, i8, i8, i8, i8, i8, %"class.WTF::Mutex", %"class.WTF::Deque.264", %"class.std::__1::unique_ptr.269" }
%"class.blink::SQLTransactionStateMachine" = type { i32 (...)**, i32, i32 }
%"class.blink::CrossThreadPersistent.233" = type { %"class.blink::PersistentBase.234" }
%"class.blink::PersistentBase.234" = type { %"class.blink::SQLTransaction"*, %"class.blink::CrossThreadPersistentNodePtr" }
%"class.blink::SQLTransaction" = type <{ %"class.blink::ScriptWrappable", %"class.blink::SQLTransactionStateMachine.235", %"class.blink::Member.236", %"class.blink::Member.238", %"class.blink::Member.240", %"class.blink::Member.244", %"class.blink::Member.248", i8, [7 x i8], %"class.std::__1::unique_ptr", %"class.blink::probe::AsyncTaskId", i8, [7 x i8] }>
%"class.blink::SQLTransactionStateMachine.235" = type { i32 (...)**, i32, i32 }
%"class.blink::Member.236" = type { %"class.blink::MemberBase.237" }
%"class.blink::MemberBase.237" = type { %"class.blink::Database"* }
%"class.blink::Member.238" = type { %"class.blink::MemberBase.239" }
%"class.blink::MemberBase.239" = type { %"class.blink::SQLTransactionBackend"* }
%"class.blink::Member.240" = type { %"class.blink::MemberBase.241" }
%"class.blink::MemberBase.241" = type { %"class.blink::SQLTransaction::OnProcessCallback"* }
%"class.blink::SQLTransaction::OnProcessCallback" = type { i32 (...)** }
%"class.blink::Member.244" = type { %"class.blink::MemberBase.245" }
%"class.blink::MemberBase.245" = type { %"class.blink::SQLTransaction::OnSuccessCallback"* }
%"class.blink::SQLTransaction::OnSuccessCallback" = type { i32 (...)** }
%"class.blink::Member.248" = type { %"class.blink::MemberBase.249" }
%"class.blink::MemberBase.249" = type { %"class.blink::SQLTransaction::OnErrorCallback"* }
%"class.blink::SQLTransaction::OnErrorCallback" = type { i32 (...)** }
%"class.blink::CrossThreadPersistent.256" = type { %"class.blink::PersistentBase.257" }
%"class.blink::PersistentBase.257" = type { %"class.blink::SQLStatementBackend"*, %"class.blink::CrossThreadPersistentNodePtr" }
%"class.blink::CrossThreadPersistent.258" = type { %"class.blink::PersistentBase.259" }
%"class.blink::PersistentBase.259" = type { %"class.blink::Database"*, %"class.blink::CrossThreadPersistentNodePtr" }
%"class.blink::Member.260" = type { %"class.blink::MemberBase.261" }
%"class.blink::MemberBase.261" = type { %"class.blink::SQLTransactionWrapper"* }
%"class.blink::SQLTransactionWrapper" = type { i32 (...)** }
%"class.WTF::Deque.264" = type { %"class.WTF::Deque<blink::CrossThreadPersistent<blink::SQLStatementBackend>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<blink::CrossThreadPersistent<blink::SQLStatementBackend>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.267" }
%"class.WTF::VectorBuffer.267" = type { %"class.WTF::VectorBufferBase.268" }
%"class.WTF::VectorBufferBase.268" = type { %"class.blink::CrossThreadPersistent.256"*, i32, i32 }
%"class.std::__1::unique_ptr.269" = type { %"class.std::__1::__compressed_pair.270" }
%"class.std::__1::__compressed_pair.270" = type { %"struct.std::__1::__compressed_pair_elem.271" }
%"struct.std::__1::__compressed_pair_elem.271" = type { %"class.blink::SQLiteTransaction"* }
%"class.blink::SQLiteTransaction" = type opaque
%"class.blink::CrossThreadPersistentNodePtr" = type { %"struct.std::__1::atomic.252" }
%"struct.std::__1::atomic.252" = type { %"struct.std::__1::__atomic_base.253" }
%"struct.std::__1::__atomic_base.253" = type { %"struct.std::__1::__cxx_atomic_impl.254" }
%"struct.std::__1::__cxx_atomic_impl.254" = type { %"struct.std::__1::__cxx_atomic_base_impl.255" }
%"struct.std::__1::__cxx_atomic_base_impl.255" = type { %"class.blink::PersistentNode"* }
%"class.blink::FrameOrWorkerScheduler::SchedulingAffectingFeatureHandle" = type { i32, %"struct.blink::SchedulingPolicy", %"class.base::WeakPtr" }
%"struct.blink::SchedulingPolicy" = type { i8, i8 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.275 }
%class.scoped_refptr.275 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.276", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.276" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.277" }
%"struct.std::__1::atomic.277" = type { %"struct.std::__1::__atomic_base.278" }
%"struct.std::__1::__atomic_base.278" = type { %"struct.std::__1::__atomic_base.279" }
%"struct.std::__1::__atomic_base.279" = type { %"struct.std::__1::__cxx_atomic_impl.280" }
%"struct.std::__1::__cxx_atomic_impl.280" = type { %"struct.std::__1::__cxx_atomic_base_impl.281" }
%"struct.std::__1::__cxx_atomic_base_impl.281" = type { i8 }
%"class.blink::SQLiteStatement" = type { %"class.blink::SQLiteDatabase"*, %"class.WTF::String", %struct.sqlite3_stmt* }
%struct.sqlite3_stmt = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZN3WTF6VectorIN5blink8SQLValueELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS2_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink8SQLValueELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink8SQLValueEEEmm = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv = comdat any

$_ZN5blink10TraceTraitINS_12SQLStatementEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink10TraceTraitINS_12SQLResultSetEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN3WTF6VectorIN5blink8SQLValueELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = comdat any

@_ZN5blink12kSQLResultOkE = external local_unnamed_addr constant i32, align 4
@_ZN5blink19kSQLResultInterruptE = external local_unnamed_addr constant i32, align 4
@.str = private unnamed_addr constant [28 x i8] c"could not prepare statement\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"interrupted\00", align 1
@.str.2 = private unnamed_addr constant [65 x i8] c"number of '?'s in statement string does not match argument count\00", align 1
@_ZN5blink14kSQLResultFullE = external local_unnamed_addr constant i32, align 4
@.str.3 = private unnamed_addr constant [21 x i8] c"could not bind value\00", align 1
@_ZN5blink13kSQLResultRowE = external local_unnamed_addr constant i32, align 4
@_ZN5blink14kSQLResultDoneE = external local_unnamed_addr constant i32, align 4
@.str.4 = private unnamed_addr constant [26 x i8] c"could not iterate results\00", align 1
@_ZN5blink20kSQLResultConstraintE = external local_unnamed_addr constant i32, align 4
@.str.5 = private unnamed_addr constant [56 x i8] c"could not execute statement due to a constraint failure\00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c"could not execute statement\00", align 1
@.str.7 = private unnamed_addr constant [71 x i8] c"current version of the database and `oldVersion` argument do not match\00", align 1
@.str.8 = private unnamed_addr constant [121 x i8] c"there was not enough remaining storage space, or the storage quota was reached and the user declined to allow more space\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"%s (%d %s)\00", align 1
@.str.10 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.12 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.13 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink8SQLValueEEEPKcv = private unnamed_addr constant [63 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::SQLValue]\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.14 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.15 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@.str.16 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1

@_ZN5blink19SQLStatementBackendC1EPNS_12SQLStatementERKN3WTF6StringERKNS3_6VectorINS_8SQLValueELj0ENS3_18PartitionAllocatorEEEi = hidden unnamed_addr alias void (%"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatement"*, %"class.WTF::String"*, %"class.WTF::Vector"*, i32), void (%"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatement"*, %"class.WTF::String"*, %"class.WTF::Vector"*, i32)* @_ZN5blink19SQLStatementBackendC2EPNS_12SQLStatementERKN3WTF6StringERKNS3_6VectorINS_8SQLValueELj0ENS3_18PartitionAllocatorEEEi

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SQLStatementBackendC2EPNS_12SQLStatementERKN3WTF6StringERKNS3_6VectorINS_8SQLValueELj0ENS3_18PartitionAllocatorEEEi(%"class.blink::SQLStatementBackend"*, %"class.blink::SQLStatement"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::Vector"* nocapture readonly dereferenceable(16), i32) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::SQLStatement"* %1, %"class.blink::SQLStatement"** %6, align 8
  %7 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* %2) #9
  %8 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"** %8, align 8
  %9 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %9, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::SQLValue"* null, %"class.blink::SQLValue"** %12, align 8
  %13 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  store i32 0, i32* %13, align 8
  %14 = icmp eq i32 %11, 0
  br i1 %14, label %24, label %15

15:                                               ; preds = %5
  %16 = zext i32 %11 to i64
  %17 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink8SQLValueEEEmm(i64 %16) #9
  %18 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %17, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink8SQLValueEEEPKcv, i64 0, i64 0)) #9
  %19 = ptrtoint i8* %18 to i64
  %20 = bitcast %"class.WTF::Vector"* %9 to i64*
  store atomic i64 %19, i64* %20 monotonic, align 8
  %21 = udiv i64 %17, 24
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %13, align 8
  %23 = bitcast i8* %18 to %"class.blink::SQLValue"*
  br label %24

24:                                               ; preds = %15, %5
  %25 = phi %"class.blink::SQLValue"* [ null, %5 ], [ %23, %15 ]
  %26 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.blink::SQLValue"*, %"class.blink::SQLValue"** %29, align 8
  %31 = load i32, i32* %26, align 4
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %30, i64 %32
  %34 = icmp eq i32 %31, 0
  br i1 %34, label %41, label %35

35:                                               ; preds = %24, %35
  %36 = phi %"class.blink::SQLValue"* [ %38, %35 ], [ %25, %24 ]
  %37 = phi %"class.blink::SQLValue"* [ %39, %35 ], [ %30, %24 ]
  tail call void @_ZN5blink8SQLValueC1ERKS0_(%"class.blink::SQLValue"* %36, %"class.blink::SQLValue"* dereferenceable(24) %37) #9
  %38 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %36, i64 1
  %39 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %37, i64 1
  %40 = icmp eq %"class.blink::SQLValue"* %39, %33
  br i1 %40, label %41, label %35

41:                                               ; preds = %35, %24
  %42 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 3
  %43 = load %"class.blink::SQLStatement"*, %"class.blink::SQLStatement"** %6, align 8
  %44 = tail call zeroext i1 @_ZN5blink12SQLStatement11HasCallbackEv(%"class.blink::SQLStatement"* %43) #9
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %42, align 8
  %46 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 4
  %47 = load %"class.blink::SQLStatement"*, %"class.blink::SQLStatement"** %6, align 8
  %48 = tail call zeroext i1 @_ZN5blink12SQLStatement16HasErrorCallbackEv(%"class.blink::SQLStatement"* %47) #9
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %46, align 1
  %50 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 6
  %51 = bitcast %"class.std::__1::unique_ptr"* %50 to i64*
  store i64 0, i64* %51, align 8
  %52 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 40) #9
  %53 = bitcast i8* %52 to %"class.blink::SQLResultSet"*
  tail call void @_ZN5blink12SQLResultSetC1Ev(%"class.blink::SQLResultSet"* %53) #9
  %54 = getelementptr inbounds i8, i8* %52, i64 -4
  %55 = bitcast i8* %54 to i16*
  %56 = load atomic i16, i16* %55 monotonic, align 2
  %57 = or i16 %56, 1
  store atomic i16 %57, i16* %55 release, align 2
  %58 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 7, i32 0, i32 0
  %59 = bitcast %"class.blink::SQLResultSet"** %58 to i8**
  store i8* %52, i8** %59, align 8
  %60 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 8
  store i32 %4, i32* %60, align 8
  %61 = load %"class.blink::SQLStatement"*, %"class.blink::SQLStatement"** %6, align 8
  tail call void @_ZN5blink12SQLStatement10SetBackendEPNS_19SQLStatementBackendE(%"class.blink::SQLStatement"* %61, %"class.blink::SQLStatementBackend"* %0) #9
  ret void
}

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"*) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink12SQLStatement11HasCallbackEv(%"class.blink::SQLStatement"*) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink12SQLStatement16HasErrorCallbackEv(%"class.blink::SQLStatement"*) local_unnamed_addr #1

declare void @_ZN5blink12SQLStatement10SetBackendEPNS_19SQLStatementBackendE(%"class.blink::SQLStatement"*, %"class.blink::SQLStatementBackend"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink19SQLStatementBackend5TraceEPNS_7VisitorE(%"class.blink::SQLStatementBackend"* nocapture readonly, %"class.blink::Visitor"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::SQLStatementBackend"* %0 to i64*
  %4 = load atomic i64, i64* %3 monotonic, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = inttoptr i64 %4 to i8*
  %8 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %9 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %9, i64 5
  %11 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, align 8
  tail call void %11(%"class.blink::Visitor"* %1, i8* nonnull %7, i8* nonnull %7, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_12SQLStatementEE5TraceEPNS_7VisitorEPKv) #9
  br label %12

12:                                               ; preds = %2, %6
  %13 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 7
  %14 = bitcast %"class.blink::Member.14"* %13 to i64*
  %15 = load atomic i64, i64* %14 monotonic, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %23, label %17

17:                                               ; preds = %12
  %18 = inttoptr i64 %15 to i8*
  %19 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %20 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %20, i64 5
  %22 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %21, align 8
  tail call void %22(%"class.blink::Visitor"* %1, i8* nonnull %18, i8* nonnull %18, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_12SQLResultSetEE5TraceEPNS_7VisitorEPKv) #9
  br label %23

23:                                               ; preds = %12, %17
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.blink::SQLStatement"* @_ZN5blink19SQLStatementBackend11GetFrontendEv(%"class.blink::SQLStatementBackend"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.blink::SQLStatement"*, %"class.blink::SQLStatement"** %2, align 8
  ret %"class.blink::SQLStatement"* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.blink::SQLErrorData"* @_ZNK5blink19SQLStatementBackend8SqlErrorEv(%"class.blink::SQLStatementBackend"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %3 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %2, align 8
  ret %"class.blink::SQLErrorData"* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.blink::SQLResultSet"* @_ZNK5blink19SQLStatementBackend12SqlResultSetEv(%"class.blink::SQLStatementBackend"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 7, i32 0, i32 0
  %3 = load %"class.blink::SQLResultSet"*, %"class.blink::SQLResultSet"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::SQLResultSet", %"class.blink::SQLResultSet"* %3, i64 0, i32 5
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, %"class.blink::SQLResultSet"* null, %"class.blink::SQLResultSet"* %3
  ret %"class.blink::SQLResultSet"* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink19SQLStatementBackend7ExecuteEPNS_8DatabaseE(%"class.blink::SQLStatementBackend"*, %"class.blink::Database"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.WTF::String", align 8
  %5 = alloca %"class.WTF::String", align 8
  %6 = alloca %"class.WTF::String", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca %"class.WTF::String", align 8
  %10 = alloca %"class.blink::SQLiteStatement", align 8
  %11 = alloca %"class.WTF::String", align 8
  %12 = alloca %"class.blink::SQLValue", align 8
  %13 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %14 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %13, align 8
  %15 = icmp eq %"class.blink::SQLErrorData"* %14, null
  br i1 %15, label %42, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %14, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 4
  br i1 %19, label %20, label %552

20:                                               ; preds = %16
  store %"class.blink::SQLErrorData"* null, %"class.blink::SQLErrorData"** %13, align 8
  %21 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %14, i64 0, i32 1, i32 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %23 = icmp eq %"class.WTF::StringImpl"* %22, null
  br i1 %23, label %37, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %22, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %22, i64 0, i32 0
  %30 = load i32, i32* %29, align 4
  br i1 %28, label %31, label %33

31:                                               ; preds = %24
  %32 = add i32 %30, -1
  store i32 %32, i32* %29, align 4
  br label %33

33:                                               ; preds = %31, %24
  %34 = phi i32 [ %32, %31 ], [ %30, %24 ]
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %33
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %22) #9
  br label %37

37:                                               ; preds = %20, %33, %36
  %38 = bitcast %"class.blink::SQLErrorData"* %14 to i8*
  tail call void @free(i8* %38) #9
  %39 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %40 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %39, align 8
  %41 = icmp eq %"class.blink::SQLErrorData"* %40, null
  br i1 %41, label %42, label %552

42:                                               ; preds = %2, %37
  %43 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 6
  %44 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %45 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 8
  %46 = load i32, i32* %45, align 8
  tail call void @_ZN5blink8Database24SetAuthorizerPermissionsEi(%"class.blink::Database"* %1, i32 %46) #9
  %47 = getelementptr inbounds %"class.blink::Database", %"class.blink::Database"* %1, i64 0, i32 13
  %48 = bitcast %"class.blink::SQLiteStatement"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %48) #9
  %49 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 1
  %50 = bitcast %"class.blink::SQLiteStatement"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 -86, i64 24, i1 false)
  call void @_ZN5blink15SQLiteStatementC1ERNS_14SQLiteDatabaseERKN3WTF6StringE(%"class.blink::SQLiteStatement"* nonnull %10, %"class.blink::SQLiteDatabase"* dereferenceable(152) %47, %"class.WTF::String"* dereferenceable(8) %49) #9
  %51 = call i32 @_ZN5blink15SQLiteStatement7PrepareEv(%"class.blink::SQLiteStatement"* nonnull %10) #9
  %52 = load i32, i32* @_ZN5blink12kSQLResultOkE, align 4
  %53 = icmp eq i32 %51, %52
  br i1 %53, label %155, label %54

54:                                               ; preds = %42
  %55 = load i32, i32* @_ZN5blink19kSQLResultInterruptE, align 4
  %56 = icmp eq i32 %51, %55
  br i1 %56, label %57, label %105

57:                                               ; preds = %54
  %58 = bitcast %"class.WTF::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #9
  %59 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i32 %51, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0)) #9
  %60 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %9, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %59, %"class.WTF::StringImpl"** %60, align 8
  %61 = call noalias i8* @malloc(i64 16) #9
  %62 = bitcast i8* %61 to i32*
  store i32 1, i32* %62, align 8
  %63 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %9) #9
  %64 = getelementptr inbounds i8, i8* %61, i64 8
  %65 = bitcast i8* %64 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %63, %"class.WTF::StringImpl"** %65, align 8
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %81, label %68

68:                                               ; preds = %57
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = and i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  br i1 %72, label %75, label %77

75:                                               ; preds = %68
  %76 = add i32 %74, -1
  store i32 %76, i32* %73, align 4
  br label %77

77:                                               ; preds = %75, %68
  %78 = phi i32 [ %76, %75 ], [ %74, %68 ]
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %77
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %66) #9
  br label %81

81:                                               ; preds = %57, %77, %80
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #9
  %82 = ptrtoint i8* %61 to i64
  %83 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %44, align 8
  %84 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  store i64 %82, i64* %84, align 8
  %85 = icmp eq %"class.blink::SQLErrorData"* %83, null
  br i1 %85, label %154, label %86

86:                                               ; preds = %81
  %87 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %83, i64 0, i32 1, i32 0, i32 0
  %88 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %87, align 8
  %89 = icmp eq %"class.WTF::StringImpl"* %88, null
  br i1 %89, label %103, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load atomic i32, i32* %91 monotonic, align 4
  %93 = and i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 0, i32 0
  %96 = load i32, i32* %95, align 4
  br i1 %94, label %97, label %99

97:                                               ; preds = %90
  %98 = add i32 %96, -1
  store i32 %98, i32* %95, align 4
  br label %99

99:                                               ; preds = %97, %90
  %100 = phi i32 [ %98, %97 ], [ %96, %90 ]
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %103

102:                                              ; preds = %99
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %88) #9
  br label %103

103:                                              ; preds = %102, %99, %86
  %104 = bitcast %"class.blink::SQLErrorData"* %83 to i8*
  call void @free(i8* %104) #9
  br label %154

105:                                              ; preds = %54
  %106 = call i8* @_ZN5blink14SQLiteDatabase12LastErrorMsgEv(%"class.blink::SQLiteDatabase"* %47) #9
  %107 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %107) #9
  %108 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i32 %51, i8* %106) #9
  %109 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %108, %"class.WTF::StringImpl"** %109, align 8
  %110 = call noalias i8* @malloc(i64 16) #9
  %111 = bitcast i8* %110 to i32*
  store i32 5, i32* %111, align 8
  %112 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %8) #9
  %113 = getelementptr inbounds i8, i8* %110, i64 8
  %114 = bitcast i8* %113 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %112, %"class.WTF::StringImpl"** %114, align 8
  %115 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %109, align 8
  %116 = icmp eq %"class.WTF::StringImpl"* %115, null
  br i1 %116, label %130, label %117

117:                                              ; preds = %105
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %119 = load atomic i32, i32* %118 monotonic, align 4
  %120 = and i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 0, i32 0
  %123 = load i32, i32* %122, align 4
  br i1 %121, label %124, label %126

124:                                              ; preds = %117
  %125 = add i32 %123, -1
  store i32 %125, i32* %122, align 4
  br label %126

126:                                              ; preds = %124, %117
  %127 = phi i32 [ %125, %124 ], [ %123, %117 ]
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %130

129:                                              ; preds = %126
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %115) #9
  br label %130

130:                                              ; preds = %105, %126, %129
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %107) #9
  %131 = ptrtoint i8* %110 to i64
  %132 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %44, align 8
  %133 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  store i64 %131, i64* %133, align 8
  %134 = icmp eq %"class.blink::SQLErrorData"* %132, null
  br i1 %134, label %154, label %135

135:                                              ; preds = %130
  %136 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %132, i64 0, i32 1, i32 0, i32 0
  %137 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %136, align 8
  %138 = icmp eq %"class.WTF::StringImpl"* %137, null
  br i1 %138, label %152, label %139

139:                                              ; preds = %135
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %141 = load atomic i32, i32* %140 monotonic, align 4
  %142 = and i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 0
  %145 = load i32, i32* %144, align 4
  br i1 %143, label %146, label %148

146:                                              ; preds = %139
  %147 = add i32 %145, -1
  store i32 %147, i32* %144, align 4
  br label %148

148:                                              ; preds = %146, %139
  %149 = phi i32 [ %147, %146 ], [ %145, %139 ]
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %152

151:                                              ; preds = %148
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %137) #9
  br label %152

152:                                              ; preds = %151, %148, %135
  %153 = bitcast %"class.blink::SQLErrorData"* %132 to i8*
  call void @free(i8* %153) #9
  br label %154

154:                                              ; preds = %130, %152, %81, %103
  call void @_ZN5blink8Database17ReportSqliteErrorEi(%"class.blink::Database"* %1, i32 %51) #9
  br label %550

155:                                              ; preds = %42
  %156 = call i32 @_ZNK5blink15SQLiteStatement18BindParameterCountEv(%"class.blink::SQLiteStatement"* nonnull %10) #9
  %157 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 2
  %158 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %159 = load i32, i32* %158, align 4
  %160 = icmp eq i32 %156, %159
  br i1 %160, label %161, label %164

161:                                              ; preds = %155
  %162 = load i32, i32* @_ZN5blink14kSQLResultFullE, align 4
  %163 = icmp eq i32 %156, 0
  br i1 %163, label %272, label %211

164:                                              ; preds = %155
  %165 = call noalias i8* @malloc(i64 16) #9
  %166 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %166) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %7, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.2, i64 0, i64 0), i64 64) #9
  %167 = bitcast i8* %165 to i32*
  store i32 5, i32* %167, align 8
  %168 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %7) #9
  %169 = getelementptr inbounds i8, i8* %165, i64 8
  %170 = bitcast i8* %169 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %168, %"class.WTF::StringImpl"** %170, align 8
  %171 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  %172 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %171, align 8
  %173 = icmp eq %"class.WTF::StringImpl"* %172, null
  br i1 %173, label %187, label %174

174:                                              ; preds = %164
  %175 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %172, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %176 = load atomic i32, i32* %175 monotonic, align 4
  %177 = and i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %172, i64 0, i32 0
  %180 = load i32, i32* %179, align 4
  br i1 %178, label %181, label %183

181:                                              ; preds = %174
  %182 = add i32 %180, -1
  store i32 %182, i32* %179, align 4
  br label %183

183:                                              ; preds = %181, %174
  %184 = phi i32 [ %182, %181 ], [ %180, %174 ]
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %183
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %172) #9
  br label %187

187:                                              ; preds = %164, %183, %186
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %166) #9
  %188 = ptrtoint i8* %165 to i64
  %189 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %44, align 8
  %190 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  store i64 %188, i64* %190, align 8
  %191 = icmp eq %"class.blink::SQLErrorData"* %189, null
  br i1 %191, label %550, label %192

192:                                              ; preds = %187
  %193 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %189, i64 0, i32 1, i32 0, i32 0
  %194 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %193, align 8
  %195 = icmp eq %"class.WTF::StringImpl"* %194, null
  br i1 %195, label %209, label %196

196:                                              ; preds = %192
  %197 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %194, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %198 = load atomic i32, i32* %197 monotonic, align 4
  %199 = and i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %194, i64 0, i32 0
  %202 = load i32, i32* %201, align 4
  br i1 %200, label %203, label %205

203:                                              ; preds = %196
  %204 = add i32 %202, -1
  store i32 %204, i32* %201, align 4
  br label %205

205:                                              ; preds = %203, %196
  %206 = phi i32 [ %204, %203 ], [ %202, %196 ]
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %208, label %209

208:                                              ; preds = %205
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %194) #9
  br label %209

209:                                              ; preds = %208, %205, %192
  %210 = bitcast %"class.blink::SQLErrorData"* %189 to i8*
  call void @free(i8* %210) #9
  br label %550

211:                                              ; preds = %161, %220
  %212 = phi i32 [ %213, %220 ], [ 0, %161 ]
  %213 = add nuw i32 %212, 1
  %214 = call dereferenceable(24) %"class.blink::SQLValue"* @_ZN3WTF6VectorIN5blink8SQLValueELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %157, i32 %212) #9
  %215 = call i32 @_ZN5blink15SQLiteStatement9BindValueEiRKNS_8SQLValueE(%"class.blink::SQLiteStatement"* nonnull %10, i32 %213, %"class.blink::SQLValue"* dereferenceable(24) %214) #9
  %216 = icmp eq i32 %215, %162
  br i1 %216, label %217, label %218

217:                                              ; preds = %211
  call void @_ZN5blink19SQLStatementBackend20SetFailureDueToQuotaEPNS_8DatabaseE(%"class.blink::SQLStatementBackend"* %0, %"class.blink::Database"* undef)
  br label %550

218:                                              ; preds = %211
  %219 = icmp eq i32 %215, %51
  br i1 %219, label %220, label %223

220:                                              ; preds = %218
  %221 = load i32, i32* %158, align 4
  %222 = icmp ult i32 %213, %221
  br i1 %222, label %211, label %272

223:                                              ; preds = %218
  call void @_ZN5blink8Database17ReportSqliteErrorEi(%"class.blink::Database"* %1, i32 %215) #9
  %224 = call i8* @_ZN5blink14SQLiteDatabase12LastErrorMsgEv(%"class.blink::SQLiteDatabase"* %47) #9
  %225 = bitcast %"class.WTF::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %225) #9
  %226 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0), i32 %215, i8* %224) #9
  %227 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %226, %"class.WTF::StringImpl"** %227, align 8
  %228 = call noalias i8* @malloc(i64 16) #9
  %229 = bitcast i8* %228 to i32*
  store i32 1, i32* %229, align 8
  %230 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %6) #9
  %231 = getelementptr inbounds i8, i8* %228, i64 8
  %232 = bitcast i8* %231 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %230, %"class.WTF::StringImpl"** %232, align 8
  %233 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %227, align 8
  %234 = icmp eq %"class.WTF::StringImpl"* %233, null
  br i1 %234, label %248, label %235

235:                                              ; preds = %223
  %236 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %233, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %237 = load atomic i32, i32* %236 monotonic, align 4
  %238 = and i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %233, i64 0, i32 0
  %241 = load i32, i32* %240, align 4
  br i1 %239, label %242, label %244

242:                                              ; preds = %235
  %243 = add i32 %241, -1
  store i32 %243, i32* %240, align 4
  br label %244

244:                                              ; preds = %242, %235
  %245 = phi i32 [ %243, %242 ], [ %241, %235 ]
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %248

247:                                              ; preds = %244
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %233) #9
  br label %248

248:                                              ; preds = %223, %244, %247
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %225) #9
  %249 = ptrtoint i8* %228 to i64
  %250 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %44, align 8
  %251 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  store i64 %249, i64* %251, align 8
  %252 = icmp eq %"class.blink::SQLErrorData"* %250, null
  br i1 %252, label %550, label %253

253:                                              ; preds = %248
  %254 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %250, i64 0, i32 1, i32 0, i32 0
  %255 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %254, align 8
  %256 = icmp eq %"class.WTF::StringImpl"* %255, null
  br i1 %256, label %270, label %257

257:                                              ; preds = %253
  %258 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %255, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %259 = load atomic i32, i32* %258 monotonic, align 4
  %260 = and i32 %259, 2
  %261 = icmp eq i32 %260, 0
  %262 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %255, i64 0, i32 0
  %263 = load i32, i32* %262, align 4
  br i1 %261, label %264, label %266

264:                                              ; preds = %257
  %265 = add i32 %263, -1
  store i32 %265, i32* %262, align 4
  br label %266

266:                                              ; preds = %264, %257
  %267 = phi i32 [ %265, %264 ], [ %263, %257 ]
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %269, label %270

269:                                              ; preds = %266
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %255) #9
  br label %270

270:                                              ; preds = %269, %266, %253
  %271 = bitcast %"class.blink::SQLErrorData"* %250 to i8*
  call void @free(i8* %271) #9
  br label %550

272:                                              ; preds = %220, %161
  %273 = call i32 @_ZN5blink15SQLiteStatement4StepEv(%"class.blink::SQLiteStatement"* nonnull %10) #9
  %274 = load i32, i32* @_ZN5blink13kSQLResultRowE, align 4
  %275 = icmp eq i32 %273, %274
  br i1 %275, label %276, label %434

276:                                              ; preds = %272
  %277 = call i32 @_ZN5blink15SQLiteStatement11ColumnCountEv(%"class.blink::SQLiteStatement"* nonnull %10) #9
  %278 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 7, i32 0, i32 0
  %279 = load %"class.blink::SQLResultSet"*, %"class.blink::SQLResultSet"** %278, align 8
  %280 = call %"class.blink::SQLResultSetRowList"* @_ZNK5blink12SQLResultSet4rowsEv(%"class.blink::SQLResultSet"* %279) #9
  %281 = icmp sgt i32 %277, 0
  br i1 %281, label %282, label %289

282:                                              ; preds = %276
  %283 = bitcast %"class.WTF::String"* %11 to i8*
  %284 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 0, i32 0, i32 0
  %285 = getelementptr inbounds %"class.blink::SQLResultSetRowList", %"class.blink::SQLResultSetRowList"* %280, i64 0, i32 1
  %286 = getelementptr inbounds %"class.blink::SQLResultSetRowList", %"class.blink::SQLResultSetRowList"* %280, i64 0, i32 1, i32 0, i32 0, i32 2
  %287 = getelementptr inbounds %"class.blink::SQLResultSetRowList", %"class.blink::SQLResultSetRowList"* %280, i64 0, i32 1, i32 0, i32 0, i32 1
  %288 = getelementptr inbounds %"class.WTF::Vector.20", %"class.WTF::Vector.20"* %285, i64 0, i32 0, i32 0, i32 0
  br label %296

289:                                              ; preds = %344, %276
  %290 = bitcast %"class.blink::SQLValue"* %12 to i8*
  %291 = getelementptr inbounds %"class.blink::SQLResultSetRowList", %"class.blink::SQLResultSetRowList"* %280, i64 0, i32 2
  %292 = getelementptr inbounds %"class.blink::SQLResultSetRowList", %"class.blink::SQLResultSetRowList"* %280, i64 0, i32 2, i32 0, i32 0, i32 2
  %293 = getelementptr inbounds %"class.blink::SQLResultSetRowList", %"class.blink::SQLResultSetRowList"* %280, i64 0, i32 2, i32 0, i32 0, i32 1
  %294 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %291, i64 0, i32 0, i32 0, i32 0
  %295 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %12, i64 0, i32 2, i32 0, i32 0
  br label %347

296:                                              ; preds = %344, %282
  %297 = phi i32 [ 0, %282 ], [ %345, %344 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %283) #9
  %298 = call %"class.WTF::StringImpl"* @_ZN5blink15SQLiteStatement13GetColumnNameEi(%"class.blink::SQLiteStatement"* nonnull %10, i32 %297) #9
  store %"class.WTF::StringImpl"* %298, %"class.WTF::StringImpl"** %284, align 8
  %299 = load i32, i32* %286, align 4
  %300 = load i32, i32* %287, align 8
  %301 = icmp eq i32 %299, %300
  br i1 %301, label %327, label %302, !prof !3

302:                                              ; preds = %296
  %303 = load %"class.WTF::String"*, %"class.WTF::String"** %288, align 8
  %304 = zext i32 %299 to i64
  %305 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %303, i64 %304, i32 0, i32 0
  store %"class.WTF::StringImpl"* %298, %"class.WTF::StringImpl"** %305, align 8
  %306 = icmp eq %"class.WTF::StringImpl"* %298, null
  br i1 %306, label %324, label %307

307:                                              ; preds = %302
  %308 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %298, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %309 = load atomic i32, i32* %308 monotonic, align 4
  %310 = and i32 %309, 2
  %311 = icmp eq i32 %310, 0
  br i1 %311, label %312, label %324

312:                                              ; preds = %307
  %313 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %298, i64 0, i32 0
  %314 = load i32, i32* %313, align 4
  %315 = zext i32 %314 to i33
  %316 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %315, i33 1) #9
  %317 = extractvalue { i33, i1 } %316, 1
  %318 = extractvalue { i33, i1 } %316, 0
  %319 = icmp slt i33 %318, 0
  %320 = or i1 %317, %319
  br i1 %320, label %321, label %322, !prof !3

321:                                              ; preds = %312
  call void @llvm.trap() #9
  unreachable

322:                                              ; preds = %312
  %323 = trunc i33 %318 to i32
  store i32 %323, i32* %313, align 4
  br label %324

324:                                              ; preds = %322, %307, %302
  %325 = load i32, i32* %286, align 4
  %326 = add i32 %325, 1
  store i32 %326, i32* %286, align 4
  br label %328

327:                                              ; preds = %296
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.20"* %285, %"class.WTF::String"* nonnull dereferenceable(8) %11) #9
  br label %328

328:                                              ; preds = %324, %327
  %329 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %284, align 8
  %330 = icmp eq %"class.WTF::StringImpl"* %329, null
  br i1 %330, label %344, label %331

331:                                              ; preds = %328
  %332 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %329, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %333 = load atomic i32, i32* %332 monotonic, align 4
  %334 = and i32 %333, 2
  %335 = icmp eq i32 %334, 0
  %336 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %329, i64 0, i32 0
  %337 = load i32, i32* %336, align 4
  br i1 %335, label %338, label %340

338:                                              ; preds = %331
  %339 = add i32 %337, -1
  store i32 %339, i32* %336, align 4
  br label %340

340:                                              ; preds = %338, %331
  %341 = phi i32 [ %339, %338 ], [ %337, %331 ]
  %342 = icmp eq i32 %341, 0
  br i1 %342, label %343, label %344

343:                                              ; preds = %340
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %329) #9
  br label %344

344:                                              ; preds = %328, %340, %343
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %283) #9
  %345 = add nuw nsw i32 %297, 1
  %346 = icmp eq i32 %345, %277
  br i1 %346, label %289, label %296

347:                                              ; preds = %289, %348
  br i1 %281, label %351, label %348

348:                                              ; preds = %379, %347
  %349 = call i32 @_ZN5blink15SQLiteStatement4StepEv(%"class.blink::SQLiteStatement"* nonnull %10) #9
  %350 = icmp eq i32 %349, %273
  br i1 %350, label %347, label %382

351:                                              ; preds = %347, %379
  %352 = phi i32 [ %380, %379 ], [ 0, %347 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %290) #9
  call void @_ZN5blink15SQLiteStatement14GetColumnValueEi(%"class.blink::SQLValue"* nonnull sret %12, %"class.blink::SQLiteStatement"* nonnull %10, i32 %352) #9
  %353 = load i32, i32* %292, align 4
  %354 = load i32, i32* %293, align 8
  %355 = icmp eq i32 %353, %354
  br i1 %355, label %362, label %356, !prof !3

356:                                              ; preds = %351
  %357 = load %"class.blink::SQLValue"*, %"class.blink::SQLValue"** %294, align 8
  %358 = zext i32 %353 to i64
  %359 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %357, i64 %358
  call void @_ZN5blink8SQLValueC1ERKS0_(%"class.blink::SQLValue"* %359, %"class.blink::SQLValue"* nonnull dereferenceable(24) %12) #9
  %360 = load i32, i32* %292, align 4
  %361 = add i32 %360, 1
  store i32 %361, i32* %292, align 4
  br label %363

362:                                              ; preds = %351
  call void @_ZN3WTF6VectorIN5blink8SQLValueELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS2_EEvOT_(%"class.WTF::Vector"* %291, %"class.blink::SQLValue"* nonnull dereferenceable(24) %12) #9
  br label %363

363:                                              ; preds = %356, %362
  %364 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %295, align 8
  %365 = icmp eq %"class.WTF::StringImpl"* %364, null
  br i1 %365, label %379, label %366

366:                                              ; preds = %363
  %367 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %364, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %368 = load atomic i32, i32* %367 monotonic, align 4
  %369 = and i32 %368, 2
  %370 = icmp eq i32 %369, 0
  %371 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %364, i64 0, i32 0
  %372 = load i32, i32* %371, align 4
  br i1 %370, label %373, label %375

373:                                              ; preds = %366
  %374 = add i32 %372, -1
  store i32 %374, i32* %371, align 4
  br label %375

375:                                              ; preds = %373, %366
  %376 = phi i32 [ %374, %373 ], [ %372, %366 ]
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %378, label %379

378:                                              ; preds = %375
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %364) #9
  br label %379

379:                                              ; preds = %363, %375, %378
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %290) #9
  %380 = add nuw nsw i32 %352, 1
  %381 = icmp eq i32 %380, %277
  br i1 %381, label %348, label %351

382:                                              ; preds = %348
  %383 = load i32, i32* @_ZN5blink14kSQLResultDoneE, align 4
  %384 = icmp eq i32 %349, %383
  br i1 %384, label %546, label %385

385:                                              ; preds = %382
  call void @_ZN5blink8Database17ReportSqliteErrorEi(%"class.blink::Database"* %1, i32 %349) #9
  %386 = call i8* @_ZN5blink14SQLiteDatabase12LastErrorMsgEv(%"class.blink::SQLiteDatabase"* %47) #9
  %387 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %387) #9
  %388 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0), i32 %349, i8* %386) #9
  %389 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %388, %"class.WTF::StringImpl"** %389, align 8
  %390 = call noalias i8* @malloc(i64 16) #9
  %391 = bitcast i8* %390 to i32*
  store i32 1, i32* %391, align 8
  %392 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %5) #9
  %393 = getelementptr inbounds i8, i8* %390, i64 8
  %394 = bitcast i8* %393 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %392, %"class.WTF::StringImpl"** %394, align 8
  %395 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %389, align 8
  %396 = icmp eq %"class.WTF::StringImpl"* %395, null
  br i1 %396, label %410, label %397

397:                                              ; preds = %385
  %398 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %395, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %399 = load atomic i32, i32* %398 monotonic, align 4
  %400 = and i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %395, i64 0, i32 0
  %403 = load i32, i32* %402, align 4
  br i1 %401, label %404, label %406

404:                                              ; preds = %397
  %405 = add i32 %403, -1
  store i32 %405, i32* %402, align 4
  br label %406

406:                                              ; preds = %404, %397
  %407 = phi i32 [ %405, %404 ], [ %403, %397 ]
  %408 = icmp eq i32 %407, 0
  br i1 %408, label %409, label %410

409:                                              ; preds = %406
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %395) #9
  br label %410

410:                                              ; preds = %385, %406, %409
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %387) #9
  %411 = ptrtoint i8* %390 to i64
  %412 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %44, align 8
  %413 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  store i64 %411, i64* %413, align 8
  %414 = icmp eq %"class.blink::SQLErrorData"* %412, null
  br i1 %414, label %550, label %415

415:                                              ; preds = %410
  %416 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %412, i64 0, i32 1, i32 0, i32 0
  %417 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %416, align 8
  %418 = icmp eq %"class.WTF::StringImpl"* %417, null
  br i1 %418, label %432, label %419

419:                                              ; preds = %415
  %420 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %417, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %421 = load atomic i32, i32* %420 monotonic, align 4
  %422 = and i32 %421, 2
  %423 = icmp eq i32 %422, 0
  %424 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %417, i64 0, i32 0
  %425 = load i32, i32* %424, align 4
  br i1 %423, label %426, label %428

426:                                              ; preds = %419
  %427 = add i32 %425, -1
  store i32 %427, i32* %424, align 4
  br label %428

428:                                              ; preds = %426, %419
  %429 = phi i32 [ %427, %426 ], [ %425, %419 ]
  %430 = icmp eq i32 %429, 0
  br i1 %430, label %431, label %432

431:                                              ; preds = %428
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %417) #9
  br label %432

432:                                              ; preds = %431, %428, %415
  %433 = bitcast %"class.blink::SQLErrorData"* %412 to i8*
  call void @free(i8* %433) #9
  br label %550

434:                                              ; preds = %272
  %435 = load i32, i32* @_ZN5blink14kSQLResultDoneE, align 4
  %436 = icmp eq i32 %273, %435
  br i1 %436, label %437, label %443

437:                                              ; preds = %434
  %438 = call zeroext i1 @_ZN5blink8Database19LastActionWasInsertEv(%"class.blink::Database"* %1) #9
  br i1 %438, label %439, label %546

439:                                              ; preds = %437
  %440 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 7, i32 0, i32 0
  %441 = load %"class.blink::SQLResultSet"*, %"class.blink::SQLResultSet"** %440, align 8
  %442 = call i64 @_ZN5blink14SQLiteDatabase15LastInsertRowIDEv(%"class.blink::SQLiteDatabase"* %47) #9
  call void @_ZN5blink12SQLResultSet11SetInsertIdEl(%"class.blink::SQLResultSet"* %441, i64 %442) #9
  br label %546

443:                                              ; preds = %434
  %444 = icmp eq i32 %273, %162
  br i1 %444, label %445, label %446

445:                                              ; preds = %443
  call void @_ZN5blink19SQLStatementBackend20SetFailureDueToQuotaEPNS_8DatabaseE(%"class.blink::SQLStatementBackend"* %0, %"class.blink::Database"* undef)
  br label %550

446:                                              ; preds = %443
  %447 = load i32, i32* @_ZN5blink20kSQLResultConstraintE, align 4
  %448 = icmp eq i32 %273, %447
  call void @_ZN5blink8Database17ReportSqliteErrorEi(%"class.blink::Database"* %1, i32 %273) #9
  %449 = call i8* @_ZN5blink14SQLiteDatabase12LastErrorMsgEv(%"class.blink::SQLiteDatabase"* %47) #9
  br i1 %448, label %450, label %498

450:                                              ; preds = %446
  %451 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %451) #9
  %452 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i64 0, i64 0), i32 %273, i8* %449) #9
  %453 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %452, %"class.WTF::StringImpl"** %453, align 8
  %454 = call noalias i8* @malloc(i64 16) #9
  %455 = bitcast i8* %454 to i32*
  store i32 6, i32* %455, align 8
  %456 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %4) #9
  %457 = getelementptr inbounds i8, i8* %454, i64 8
  %458 = bitcast i8* %457 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %456, %"class.WTF::StringImpl"** %458, align 8
  %459 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %453, align 8
  %460 = icmp eq %"class.WTF::StringImpl"* %459, null
  br i1 %460, label %474, label %461

461:                                              ; preds = %450
  %462 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %459, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %463 = load atomic i32, i32* %462 monotonic, align 4
  %464 = and i32 %463, 2
  %465 = icmp eq i32 %464, 0
  %466 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %459, i64 0, i32 0
  %467 = load i32, i32* %466, align 4
  br i1 %465, label %468, label %470

468:                                              ; preds = %461
  %469 = add i32 %467, -1
  store i32 %469, i32* %466, align 4
  br label %470

470:                                              ; preds = %468, %461
  %471 = phi i32 [ %469, %468 ], [ %467, %461 ]
  %472 = icmp eq i32 %471, 0
  br i1 %472, label %473, label %474

473:                                              ; preds = %470
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %459) #9
  br label %474

474:                                              ; preds = %450, %470, %473
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %451) #9
  %475 = ptrtoint i8* %454 to i64
  %476 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %44, align 8
  %477 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  store i64 %475, i64* %477, align 8
  %478 = icmp eq %"class.blink::SQLErrorData"* %476, null
  br i1 %478, label %550, label %479

479:                                              ; preds = %474
  %480 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %476, i64 0, i32 1, i32 0, i32 0
  %481 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %480, align 8
  %482 = icmp eq %"class.WTF::StringImpl"* %481, null
  br i1 %482, label %496, label %483

483:                                              ; preds = %479
  %484 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %481, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %485 = load atomic i32, i32* %484 monotonic, align 4
  %486 = and i32 %485, 2
  %487 = icmp eq i32 %486, 0
  %488 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %481, i64 0, i32 0
  %489 = load i32, i32* %488, align 4
  br i1 %487, label %490, label %492

490:                                              ; preds = %483
  %491 = add i32 %489, -1
  store i32 %491, i32* %488, align 4
  br label %492

492:                                              ; preds = %490, %483
  %493 = phi i32 [ %491, %490 ], [ %489, %483 ]
  %494 = icmp eq i32 %493, 0
  br i1 %494, label %495, label %496

495:                                              ; preds = %492
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %481) #9
  br label %496

496:                                              ; preds = %495, %492, %479
  %497 = bitcast %"class.blink::SQLErrorData"* %476 to i8*
  call void @free(i8* %497) #9
  br label %550

498:                                              ; preds = %446
  %499 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %499) #9
  %500 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0), i32 %273, i8* %449) #9
  %501 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %500, %"class.WTF::StringImpl"** %501, align 8
  %502 = call noalias i8* @malloc(i64 16) #9
  %503 = bitcast i8* %502 to i32*
  store i32 1, i32* %503, align 8
  %504 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %3) #9
  %505 = getelementptr inbounds i8, i8* %502, i64 8
  %506 = bitcast i8* %505 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %504, %"class.WTF::StringImpl"** %506, align 8
  %507 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %501, align 8
  %508 = icmp eq %"class.WTF::StringImpl"* %507, null
  br i1 %508, label %522, label %509

509:                                              ; preds = %498
  %510 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %507, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %511 = load atomic i32, i32* %510 monotonic, align 4
  %512 = and i32 %511, 2
  %513 = icmp eq i32 %512, 0
  %514 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %507, i64 0, i32 0
  %515 = load i32, i32* %514, align 4
  br i1 %513, label %516, label %518

516:                                              ; preds = %509
  %517 = add i32 %515, -1
  store i32 %517, i32* %514, align 4
  br label %518

518:                                              ; preds = %516, %509
  %519 = phi i32 [ %517, %516 ], [ %515, %509 ]
  %520 = icmp eq i32 %519, 0
  br i1 %520, label %521, label %522

521:                                              ; preds = %518
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %507) #9
  br label %522

522:                                              ; preds = %498, %518, %521
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %499) #9
  %523 = ptrtoint i8* %502 to i64
  %524 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %44, align 8
  %525 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  store i64 %523, i64* %525, align 8
  %526 = icmp eq %"class.blink::SQLErrorData"* %524, null
  br i1 %526, label %550, label %527

527:                                              ; preds = %522
  %528 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %524, i64 0, i32 1, i32 0, i32 0
  %529 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %528, align 8
  %530 = icmp eq %"class.WTF::StringImpl"* %529, null
  br i1 %530, label %544, label %531

531:                                              ; preds = %527
  %532 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %529, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %533 = load atomic i32, i32* %532 monotonic, align 4
  %534 = and i32 %533, 2
  %535 = icmp eq i32 %534, 0
  %536 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %529, i64 0, i32 0
  %537 = load i32, i32* %536, align 4
  br i1 %535, label %538, label %540

538:                                              ; preds = %531
  %539 = add i32 %537, -1
  store i32 %539, i32* %536, align 4
  br label %540

540:                                              ; preds = %538, %531
  %541 = phi i32 [ %539, %538 ], [ %537, %531 ]
  %542 = icmp eq i32 %541, 0
  br i1 %542, label %543, label %544

543:                                              ; preds = %540
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %529) #9
  br label %544

544:                                              ; preds = %543, %540, %527
  %545 = bitcast %"class.blink::SQLErrorData"* %524 to i8*
  call void @free(i8* %545) #9
  br label %550

546:                                              ; preds = %382, %439, %437
  %547 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 7, i32 0, i32 0
  %548 = load %"class.blink::SQLResultSet"*, %"class.blink::SQLResultSet"** %547, align 8
  %549 = call i32 @_ZN5blink14SQLiteDatabase11LastChangesEv(%"class.blink::SQLiteDatabase"* %47) #9
  call void @_ZN5blink12SQLResultSet15SetRowsAffectedEi(%"class.blink::SQLResultSet"* %548, i32 %549) #9
  br label %550

550:                                              ; preds = %522, %544, %474, %496, %410, %432, %248, %270, %187, %209, %217, %546, %445, %154
  %551 = phi i1 [ false, %154 ], [ true, %546 ], [ false, %445 ], [ false, %217 ], [ false, %209 ], [ false, %187 ], [ false, %270 ], [ false, %248 ], [ false, %432 ], [ false, %410 ], [ false, %496 ], [ false, %474 ], [ false, %544 ], [ false, %522 ]
  call void @_ZN5blink15SQLiteStatementD1Ev(%"class.blink::SQLiteStatement"* nonnull %10) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %48) #9
  br label %552

552:                                              ; preds = %16, %37, %550
  %553 = phi i1 [ %551, %550 ], [ false, %37 ], [ false, %16 ]
  ret i1 %553
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SQLStatementBackend22ClearFailureDueToQuotaEv(%"class.blink::SQLStatementBackend"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %3 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %2, align 8
  %4 = icmp eq %"class.blink::SQLErrorData"* %3, null
  br i1 %4, label %28, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %3, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 4
  br i1 %8, label %9, label %28

9:                                                ; preds = %5
  store %"class.blink::SQLErrorData"* null, %"class.blink::SQLErrorData"** %2, align 8
  %10 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %3, i64 0, i32 1, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %26, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  br i1 %17, label %20, label %22

20:                                               ; preds = %13
  %21 = add i32 %19, -1
  store i32 %21, i32* %18, align 4
  br label %22

22:                                               ; preds = %20, %13
  %23 = phi i32 [ %21, %20 ], [ %19, %13 ]
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %22
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %11) #9
  br label %26

26:                                               ; preds = %25, %22, %9
  %27 = bitcast %"class.blink::SQLErrorData"* %3 to i8*
  tail call void @free(i8* %27) #9
  br label %28

28:                                               ; preds = %1, %26, %5
  ret void
}

declare void @_ZN5blink8Database24SetAuthorizerPermissionsEi(%"class.blink::Database"*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN5blink15SQLiteStatementC1ERNS_14SQLiteDatabaseERKN3WTF6StringE(%"class.blink::SQLiteStatement"*, %"class.blink::SQLiteDatabase"* dereferenceable(152), %"class.WTF::String"* dereferenceable(8)) unnamed_addr #1

declare i32 @_ZN5blink15SQLiteStatement7PrepareEv(%"class.blink::SQLiteStatement"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare i8* @_ZN5blink14SQLiteDatabase12LastErrorMsgEv(%"class.blink::SQLiteDatabase"*) local_unnamed_addr #1

declare void @_ZN5blink8Database17ReportSqliteErrorEi(%"class.blink::Database"*, i32) local_unnamed_addr #1

declare i32 @_ZNK5blink15SQLiteStatement18BindParameterCountEv(%"class.blink::SQLiteStatement"*) local_unnamed_addr #1

declare i32 @_ZN5blink15SQLiteStatement9BindValueEiRKNS_8SQLValueE(%"class.blink::SQLiteStatement"*, i32, %"class.blink::SQLValue"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SQLStatementBackend20SetFailureDueToQuotaEPNS_8DatabaseE(%"class.blink::SQLStatementBackend"* nocapture, %"class.blink::Database"* nocapture readnone) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = tail call noalias i8* @malloc(i64 16) #9
  %5 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.8, i64 0, i64 0), i64 120) #9
  %6 = bitcast i8* %4 to i32*
  store i32 4, i32* %6, align 8
  %7 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %3) #9
  %8 = getelementptr inbounds i8, i8* %4, i64 8
  %9 = bitcast i8* %8 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"** %9, align 8
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %26, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  br i1 %17, label %20, label %22

20:                                               ; preds = %13
  %21 = add i32 %19, -1
  store i32 %21, i32* %18, align 4
  br label %22

22:                                               ; preds = %20, %13
  %23 = phi i32 [ %21, %20 ], [ %19, %13 ]
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %22
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %11) #9
  br label %26

26:                                               ; preds = %2, %22, %25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %27 = ptrtoint i8* %4 to i64
  %28 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 6
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %29, align 8
  %31 = bitcast %"class.std::__1::unique_ptr"* %28 to i64*
  store i64 %27, i64* %31, align 8
  %32 = icmp eq %"class.blink::SQLErrorData"* %30, null
  br i1 %32, label %52, label %33

33:                                               ; preds = %26
  %34 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %30, i64 0, i32 1, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %36, label %50, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  br i1 %41, label %44, label %46

44:                                               ; preds = %37
  %45 = add i32 %43, -1
  store i32 %45, i32* %42, align 4
  br label %46

46:                                               ; preds = %44, %37
  %47 = phi i32 [ %45, %44 ], [ %43, %37 ]
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %46
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %35) #9
  br label %50

50:                                               ; preds = %49, %46, %33
  %51 = bitcast %"class.blink::SQLErrorData"* %30 to i8*
  call void @free(i8* %51) #9
  br label %52

52:                                               ; preds = %50, %26
  ret void
}

declare i32 @_ZN5blink15SQLiteStatement4StepEv(%"class.blink::SQLiteStatement"*) local_unnamed_addr #1

declare i32 @_ZN5blink15SQLiteStatement11ColumnCountEv(%"class.blink::SQLiteStatement"*) local_unnamed_addr #1

declare %"class.blink::SQLResultSetRowList"* @_ZNK5blink12SQLResultSet4rowsEv(%"class.blink::SQLResultSet"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink15SQLiteStatement13GetColumnNameEi(%"class.blink::SQLiteStatement"*, i32) local_unnamed_addr #1

declare void @_ZN5blink15SQLiteStatement14GetColumnValueEi(%"class.blink::SQLValue"* sret, %"class.blink::SQLiteStatement"*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink8Database19LastActionWasInsertEv(%"class.blink::Database"*) local_unnamed_addr #1

declare void @_ZN5blink12SQLResultSet11SetInsertIdEl(%"class.blink::SQLResultSet"*, i64) local_unnamed_addr #1

declare i64 @_ZN5blink14SQLiteDatabase15LastInsertRowIDEv(%"class.blink::SQLiteDatabase"*) local_unnamed_addr #1

declare void @_ZN5blink12SQLResultSet15SetRowsAffectedEi(%"class.blink::SQLResultSet"*, i32) local_unnamed_addr #1

declare i32 @_ZN5blink14SQLiteDatabase11LastChangesEv(%"class.blink::SQLiteDatabase"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5blink15SQLiteStatementD1Ev(%"class.blink::SQLiteStatement"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SQLStatementBackend25SetVersionMismatchedErrorEPNS_8DatabaseE(%"class.blink::SQLStatementBackend"* nocapture, %"class.blink::Database"* nocapture readnone) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = tail call noalias i8* @malloc(i64 16) #9
  %5 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.7, i64 0, i64 0), i64 70) #9
  %6 = bitcast i8* %4 to i32*
  store i32 2, i32* %6, align 8
  %7 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %3) #9
  %8 = getelementptr inbounds i8, i8* %4, i64 8
  %9 = bitcast i8* %8 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"** %9, align 8
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %26, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  br i1 %17, label %20, label %22

20:                                               ; preds = %13
  %21 = add i32 %19, -1
  store i32 %21, i32* %18, align 4
  br label %22

22:                                               ; preds = %20, %13
  %23 = phi i32 [ %21, %20 ], [ %19, %13 ]
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %22
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %11) #9
  br label %26

26:                                               ; preds = %2, %22, %25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %27 = ptrtoint i8* %4 to i64
  %28 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 6
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %29, align 8
  %31 = bitcast %"class.std::__1::unique_ptr"* %28 to i64*
  store i64 %27, i64* %31, align 8
  %32 = icmp eq %"class.blink::SQLErrorData"* %30, null
  br i1 %32, label %52, label %33

33:                                               ; preds = %26
  %34 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %30, i64 0, i32 1, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %36, label %50, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  br i1 %41, label %44, label %46

44:                                               ; preds = %37
  %45 = add i32 %43, -1
  store i32 %45, i32* %42, align 4
  br label %46

46:                                               ; preds = %44, %37
  %47 = phi i32 [ %45, %44 ], [ %43, %37 ]
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %46
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %35) #9
  br label %50

50:                                               ; preds = %49, %46, %33
  %51 = bitcast %"class.blink::SQLErrorData"* %30 to i8*
  call void @free(i8* %51) #9
  br label %52

52:                                               ; preds = %50, %26
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink19SQLStatementBackend29LastExecutionFailedDueToQuotaEv(%"class.blink::SQLStatementBackend"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::SQLStatementBackend", %"class.blink::SQLStatementBackend"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %3 = load %"class.blink::SQLErrorData"*, %"class.blink::SQLErrorData"** %2, align 8
  %4 = icmp eq %"class.blink::SQLErrorData"* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::SQLErrorData", %"class.blink::SQLErrorData"* %3, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 4
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ false, %1 ], [ %8, %5 ]
  ret i1 %10
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #5

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.20"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.20", %"class.WTF::Vector.20"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.20", %"class.WTF::Vector.20"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %8 = icmp ugt %"class.WTF::String"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::String"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.20", %"class.WTF::Vector.20"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::String"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %26) #9
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.20"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.WTF::String"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.WTF::String"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !4

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #9
  %47 = bitcast %"class.WTF::Vector.20"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #9
  %51 = bitcast %"class.WTF::Vector.20"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.WTF::String"* %1 to i64
  %56 = ptrtoint %"class.WTF::String"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector.20", %"class.WTF::Vector.20"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !4

69:                                               ; preds = %54
  %70 = icmp eq %"class.WTF::String"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %71) #9
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.20"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.WTF::String"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.WTF::String"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !4

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #9
  %87 = bitcast %"class.WTF::Vector.20"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #9
  %91 = bitcast %"class.WTF::Vector.20"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.WTF::String"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.WTF::String"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.WTF::String"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.WTF::String"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %101, i64 0, i32 0, i32 0
  %105 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %104, align 8
  %106 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 %103, i32 0, i32 0
  store %"class.WTF::StringImpl"* %105, %"class.WTF::StringImpl"** %106, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %105, null
  br i1 %107, label %125, label %108

108:                                              ; preds = %99
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %125

113:                                              ; preds = %108
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = zext i32 %115 to i33
  %117 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %116, i33 1) #9
  %118 = extractvalue { i33, i1 } %117, 1
  %119 = extractvalue { i33, i1 } %117, 0
  %120 = icmp slt i33 %119, 0
  %121 = or i1 %118, %120
  br i1 %121, label %122, label %123, !prof !3

122:                                              ; preds = %113
  tail call void @llvm.trap() #9
  unreachable

123:                                              ; preds = %113
  %124 = trunc i33 %119 to i32
  store i32 %124, i32* %114, align 4
  br label %125

125:                                              ; preds = %99, %108, %123
  %126 = load i32, i32* %3, align 4
  %127 = add i32 %126, 1
  store i32 %127, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.13, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink8SQLValueELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS2_EEvOT_(%"class.WTF::Vector"*, %"class.blink::SQLValue"* dereferenceable(24)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::SQLValue"*, %"class.blink::SQLValue"** %6, align 8
  %8 = icmp ugt %"class.blink::SQLValue"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %7, i64 %10
  %12 = icmp ugt %"class.blink::SQLValue"* %11, %1
  br i1 %12, label %37, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %68, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq %"class.blink::SQLValue"* %7, null
  br i1 %25, label %26, label %35

26:                                               ; preds = %24
  %27 = zext i32 %22 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink8SQLValueEEEmm(i64 %27) #9
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink8SQLValueEEEPKcv, i64 0, i64 0)) #9
  %30 = ptrtoint i8* %29 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = udiv i64 %28, 24
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %29 to %"class.blink::SQLValue"*
  br label %68

35:                                               ; preds = %24
  tail call void @_ZN3WTF6VectorIN5blink8SQLValueELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %22) #9
  %36 = load %"class.blink::SQLValue"*, %"class.blink::SQLValue"** %6, align 8
  br label %68

37:                                               ; preds = %9
  %38 = ptrtoint %"class.blink::SQLValue"* %1 to i64
  %39 = ptrtoint %"class.blink::SQLValue"* %7 to i64
  %40 = sub i64 %38, %39
  %41 = sdiv exact i64 %40, 24
  %42 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = lshr i32 %43, 2
  %45 = add i32 %43, 1
  %46 = add i32 %45, %44
  %47 = icmp ugt i32 %46, 4
  %48 = select i1 %47, i32 %46, i32 4
  %49 = icmp ugt i32 %48, %5
  %50 = select i1 %49, i32 %48, i32 %5
  %51 = icmp ult i32 %43, %50
  br i1 %51, label %52, label %65, !prof !4

52:                                               ; preds = %37
  %53 = icmp eq %"class.blink::SQLValue"* %7, null
  br i1 %53, label %54, label %63

54:                                               ; preds = %52
  %55 = zext i32 %50 to i64
  %56 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink8SQLValueEEEmm(i64 %55) #9
  %57 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %56, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink8SQLValueEEEPKcv, i64 0, i64 0)) #9
  %58 = ptrtoint i8* %57 to i64
  %59 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %58, i64* %59 monotonic, align 8
  %60 = udiv i64 %56, 24
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %42, align 8
  %62 = bitcast i8* %57 to %"class.blink::SQLValue"*
  br label %65

63:                                               ; preds = %52
  tail call void @_ZN3WTF6VectorIN5blink8SQLValueELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %50) #9
  %64 = load %"class.blink::SQLValue"*, %"class.blink::SQLValue"** %6, align 8
  br label %65

65:                                               ; preds = %37, %54, %63
  %66 = phi %"class.blink::SQLValue"* [ %7, %37 ], [ %62, %54 ], [ %64, %63 ]
  %67 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %66, i64 %41
  br label %68

68:                                               ; preds = %35, %26, %13, %65
  %69 = phi %"class.blink::SQLValue"* [ %66, %65 ], [ %7, %13 ], [ %34, %26 ], [ %36, %35 ]
  %70 = phi %"class.blink::SQLValue"* [ %67, %65 ], [ %1, %13 ], [ %1, %26 ], [ %1, %35 ]
  %71 = load i32, i32* %3, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %69, i64 %72
  tail call void @_ZN5blink8SQLValueC1ERKS0_(%"class.blink::SQLValue"* %73, %"class.blink::SQLValue"* dereferenceable(24) %70) #9
  %74 = load i32, i32* %3, align 4
  %75 = add i32 %74, 1
  store i32 %75, i32* %3, align 4
  ret void
}

declare void @_ZN5blink8SQLValueC1ERKS0_(%"class.blink::SQLValue"*, %"class.blink::SQLValue"* dereferenceable(24)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink8SQLValueELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %39

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::SQLValue"*, %"class.blink::SQLValue"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %37, label %14

14:                                               ; preds = %4, %33
  %15 = phi %"class.blink::SQLValue"* [ %35, %33 ], [ %6, %4 ]
  %16 = phi %"class.blink::SQLValue"* [ %34, %33 ], [ null, %4 ]
  tail call void @_ZN5blink8SQLValueC1ERKS0_(%"class.blink::SQLValue"* %16, %"class.blink::SQLValue"* dereferenceable(24) %15) #9
  %17 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %15, i64 0, i32 2, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  br i1 %24, label %27, label %29

27:                                               ; preds = %20
  %28 = add i32 %26, -1
  store i32 %28, i32* %25, align 4
  br label %29

29:                                               ; preds = %27, %20
  %30 = phi i32 [ %28, %27 ], [ %26, %20 ]
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #9
  br label %33

33:                                               ; preds = %32, %29, %14
  %34 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %16, i64 1
  %35 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %15, i64 1
  %36 = icmp eq %"class.blink::SQLValue"* %35, %10
  br i1 %36, label %37, label %14

37:                                               ; preds = %33, %4
  %38 = bitcast %"class.blink::SQLValue"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %38) #9
  br label %87

39:                                               ; preds = %2
  %40 = zext i32 %1 to i64
  %41 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink8SQLValueEEEmm(i64 %40) #9
  %42 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %41, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink8SQLValueEEEPKcv, i64 0, i64 0)) #9
  %43 = udiv i64 %41, 24
  %44 = ptrtoint i8* %42 to i64
  %45 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %46 = load %"class.blink::SQLValue"*, %"class.blink::SQLValue"** %45, align 8
  %47 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %46, i64 %49
  %51 = icmp eq i32 %48, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %39
  %53 = bitcast %"class.blink::SQLValue"* %46 to i8*
  br label %82

54:                                               ; preds = %39
  %55 = bitcast i8* %42 to %"class.blink::SQLValue"*
  br label %56

56:                                               ; preds = %54, %75
  %57 = phi %"class.blink::SQLValue"* [ %77, %75 ], [ %46, %54 ]
  %58 = phi %"class.blink::SQLValue"* [ %76, %75 ], [ %55, %54 ]
  tail call void @_ZN5blink8SQLValueC1ERKS0_(%"class.blink::SQLValue"* %58, %"class.blink::SQLValue"* dereferenceable(24) %57) #9
  %59 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %57, i64 0, i32 2, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %75, label %62

62:                                               ; preds = %56
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  br i1 %66, label %69, label %71

69:                                               ; preds = %62
  %70 = add i32 %68, -1
  store i32 %70, i32* %67, align 4
  br label %71

71:                                               ; preds = %69, %62
  %72 = phi i32 [ %70, %69 ], [ %68, %62 ]
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #9
  br label %75

75:                                               ; preds = %74, %71, %56
  %76 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %58, i64 1
  %77 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %57, i64 1
  %78 = icmp eq %"class.blink::SQLValue"* %77, %50
  br i1 %78, label %79, label %56

79:                                               ; preds = %75
  %80 = bitcast %"class.WTF::Vector"* %0 to i8**
  %81 = load i8*, i8** %80, align 8
  br label %82

82:                                               ; preds = %52, %79
  %83 = phi i8* [ %81, %79 ], [ %53, %52 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %83) #9
  %84 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %44, i64* %84 monotonic, align 8
  %85 = trunc i64 %43 to i32
  %86 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %85, i32* %86, align 8
  br label %87

87:                                               ; preds = %82, %37
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink8SQLValueEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 89391104
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 89391104) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.13, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = mul i64 %0, 24
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

declare void @_ZN5blink12SQLResultSetC1Ev(%"class.blink::SQLResultSet"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #9
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !3

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #9
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #9
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #9
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #9
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #9
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #9
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14, i64 0, i64 0), i8* %40, i8* %41) #9
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #9
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.15, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #9
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #9
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #9
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !3

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #9
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ScriptWrappable"*
  %4 = bitcast i8* %1 to void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)**, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::ScriptWrappable"*
  %3 = bitcast i8* %0 to void (%"class.blink::ScriptWrappable"*)***
  %4 = load void (%"class.blink::ScriptWrappable"*)**, void (%"class.blink::ScriptWrappable"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %4, i64 1
  %6 = load void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %5, align 8
  tail call void %6(%"class.blink::ScriptWrappable"* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::NameClient"*
  %3 = bitcast i8* %0 to i8* (%"class.blink::NameClient"*)***
  %4 = load i8* (%"class.blink::NameClient"*)**, i8* (%"class.blink::NameClient"*)*** %3, align 8
  %5 = load i8* (%"class.blink::NameClient"*)*, i8* (%"class.blink::NameClient"*)** %4, align 8
  %6 = tail call i8* %5(%"class.blink::NameClient"* %2) #9
  %7 = insertvalue { i8*, i8 } undef, i8* %6, 0
  %8 = insertvalue { i8*, i8 } %7, i8 0, 1
  ret { i8*, i8 } %8
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_12SQLStatementEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::SQLStatement"*
  tail call void @_ZNK5blink12SQLStatement5TraceEPNS_7VisitorE(%"class.blink::SQLStatement"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

declare void @_ZNK5blink12SQLStatement5TraceEPNS_7VisitorE(%"class.blink::SQLStatement"*, %"class.blink::Visitor"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_12SQLResultSetEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::SQLResultSet"*
  tail call void @_ZNK5blink12SQLResultSet5TraceEPNS_7VisitorE(%"class.blink::SQLResultSet"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

declare void @_ZNK5blink12SQLResultSet5TraceEPNS_7VisitorE(%"class.blink::SQLResultSet"*, %"class.blink::Visitor"*) unnamed_addr #1

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.blink::SQLValue"* @_ZN3WTF6VectorIN5blink8SQLValueELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.10, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::SQLValue"*, %"class.blink::SQLValue"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::SQLValue", %"class.blink::SQLValue"* %24, i64 %25
  ret %"class.blink::SQLValue"* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!"branch_weights", i32 2000, i32 1}
