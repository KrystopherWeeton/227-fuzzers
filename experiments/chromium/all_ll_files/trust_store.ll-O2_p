; ModuleID = '../../net/cert/internal/trust_store.cc'
source_filename = "../../net/cert/internal/trust_store.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.net::CertificateTrust" = type { i32 }
%"class.net::TrustStore" = type { %"class.net::CertIssuerSource" }
%"class.net::CertIssuerSource" = type { i32 (...)** }
%"class.net::ParsedCertificate" = type { %"class.base::RefCountedThreadSafe", %"class.std::__1::unique_ptr", %"class.net::der::Input", %"class.net::der::Input", %"class.net::der::Input", %"class.net::der::BitString", %"struct.net::ParsedTbsCertificate", %"class.std::__1::unique_ptr.2", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, %"struct.net::ParsedBasicConstraints", i8, [3 x i8], %"class.net::der::BitString", i8, %"class.std::__1::vector", %"struct.net::ParsedExtension", %"class.std::__1::unique_ptr.14", %"class.std::__1::unique_ptr.20", i8, [7 x i8], %"struct.net::ParsedExtension", %"class.std::__1::vector.26", %"class.std::__1::vector.26", i8, %"class.std::__1::vector", i8, %"struct.net::ParsedPolicyConstraints", i8, %"class.std::__1::vector.33", i8, i8, %"class.absl::optional", %"class.absl::optional.41", %"class.std::__1::map" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.crypto_buffer_st* }
%struct.crypto_buffer_st = type opaque
%"class.net::der::Input" = type { i8*, i64 }
%"struct.net::ParsedTbsCertificate" = type { i32, %"class.net::der::Input", %"class.net::der::Input", %"class.net::der::Input", %"struct.net::der::GeneralizedTime", %"struct.net::der::GeneralizedTime", %"class.net::der::Input", %"class.net::der::Input", i8, [7 x i8], %"class.net::der::BitString", i8, [7 x i8], %"class.net::der::BitString", i8, %"class.net::der::Input" }
%"struct.net::der::GeneralizedTime" = type { i16, i8, i8, i8, i8, i8 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.net::SignatureAlgorithm"* }
%"class.net::SignatureAlgorithm" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.net::ParsedBasicConstraints" = type { i8, i8, i8 }
%"class.net::der::BitString" = type <{ %"class.net::der::Input", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.net::GeneralNames"* }
%"struct.net::GeneralNames" = type opaque
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.net::NameConstraints"* }
%"class.net::NameConstraints" = type opaque
%"struct.net::ParsedExtension" = type <{ %"class.net::der::Input", %"class.net::der::Input", i8, [7 x i8] }>
%"class.std::__1::vector.26" = type { %"class.std::__1::__vector_base.27" }
%"class.std::__1::__vector_base.27" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair.28" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.base::BasicStringPiece"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.net::der::Input"*, %"class.net::der::Input"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.net::der::Input"* }
%"struct.net::ParsedPolicyConstraints" = type { i8, i8, i8, i8 }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { %"struct.net::ParsedPolicyMapping"*, %"struct.net::ParsedPolicyMapping"*, %"class.std::__1::__compressed_pair.35" }
%"struct.net::ParsedPolicyMapping" = type { %"class.net::der::Input", %"class.net::der::Input" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"struct.net::ParsedPolicyMapping"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.40 }
%union.anon.40 = type { %"struct.net::ParsedAuthorityKeyIdentifier" }
%"struct.net::ParsedAuthorityKeyIdentifier" = type { %"class.absl::optional.41", %"class.absl::optional.41", %"class.absl::optional.41" }
%"class.absl::optional.41" = type { %"class.absl::optional_internal::optional_data.42" }
%"class.absl::optional_internal::optional_data.42" = type { %"class.absl::optional_internal::optional_data_base.43" }
%"class.absl::optional_internal::optional_data_base.43" = type { %"class.absl::optional_internal::optional_data_dtor_base.44" }
%"class.absl::optional_internal::optional_data_dtor_base.44" = type { i8, %union.anon.45 }
%union.anon.45 = type { %"class.net::der::Input" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.50", %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { i64 }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.net::CertIssuerSource::Request"* }
%"class.net::CertIssuerSource::Request" = type { i32 (...)** }

$_ZN3net16CertIssuerSourceD2Ev = comdat any

$_ZN3net10TrustStoreD0Ev = comdat any

@_ZTVN3net10TrustStoreE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::CertIssuerSource"*)* @_ZN3net16CertIssuerSourceD2Ev to i8*), i8* bitcast (void (%"class.net::TrustStore"*)* @_ZN3net10TrustStoreD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.net::TrustStore"*, %"class.net::ParsedCertificate"*, %"class.std::__1::unique_ptr.58"*)* @_ZN3net10TrustStore17AsyncGetIssuersOfEPKNS_17ParsedCertificateEPNSt3__110unique_ptrINS_16CertIssuerSource7RequestENS4_14default_deleteIS7_EEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN3net16CertificateTrust14ForTrustAnchorEv() local_unnamed_addr #0 align 2 {
  ret i32 2
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN3net16CertificateTrust34ForTrustAnchorEnforcingConstraintsEv() local_unnamed_addr #0 align 2 {
  ret i32 3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN3net16CertificateTrust14ForUnspecifiedEv() local_unnamed_addr #0 align 2 {
  ret i32 1
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN3net16CertificateTrust13ForDistrustedEv() local_unnamed_addr #0 align 2 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net16CertificateTrust13IsTrustAnchorEv(%"struct.net::CertificateTrust"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"struct.net::CertificateTrust", %"struct.net::CertificateTrust"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, -2
  %5 = icmp eq i32 %4, 2
  ret i1 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net16CertificateTrust12IsDistrustedEv(%"struct.net::CertificateTrust"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"struct.net::CertificateTrust", %"struct.net::CertificateTrust"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp ult i32 %3, 4
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = trunc i32 %3 to i4
  %7 = icmp eq i4 %6, 0
  ret i1 %7

8:                                                ; preds = %1
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net16CertificateTrust19HasUnspecifiedTrustEv(%"struct.net::CertificateTrust"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"struct.net::CertificateTrust", %"struct.net::CertificateTrust"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp ult i32 %3, 4
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = trunc i32 %3 to i4
  %7 = icmp eq i4 %6, 1
  ret i1 %7

8:                                                ; preds = %1
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net10TrustStoreC2Ev(%"class.net::TrustStore"* nocapture) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.net::TrustStore", %"class.net::TrustStore"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net10TrustStoreE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net10TrustStore17AsyncGetIssuersOfEPKNS_17ParsedCertificateEPNSt3__110unique_ptrINS_16CertIssuerSource7RequestENS4_14default_deleteIS7_EEEE(%"class.net::TrustStore"* nocapture readnone, %"class.net::ParsedCertificate"* nocapture readnone, %"class.std::__1::unique_ptr.58"* nocapture) unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.58"* %2, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.net::CertIssuerSource::Request"*, %"class.net::CertIssuerSource::Request"** %4, align 8
  store %"class.net::CertIssuerSource::Request"* null, %"class.net::CertIssuerSource::Request"** %4, align 8
  %6 = icmp eq %"class.net::CertIssuerSource::Request"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %3
  %8 = bitcast %"class.net::CertIssuerSource::Request"* %5 to void (%"class.net::CertIssuerSource::Request"*)***
  %9 = load void (%"class.net::CertIssuerSource::Request"*)**, void (%"class.net::CertIssuerSource::Request"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.net::CertIssuerSource::Request"*)*, void (%"class.net::CertIssuerSource::Request"*)** %9, i64 1
  %11 = load void (%"class.net::CertIssuerSource::Request"*)*, void (%"class.net::CertIssuerSource::Request"*)** %10, align 8
  tail call void %11(%"class.net::CertIssuerSource::Request"* nonnull %5) #6
  br label %12

12:                                               ; preds = %3, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3net16CertIssuerSourceD2Ev(%"class.net::CertIssuerSource"*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3net10TrustStoreD0Ev(%"class.net::TrustStore"*) unnamed_addr #4 comdat align 2 {
  tail call void @llvm.trap() #7
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
