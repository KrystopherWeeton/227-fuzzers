; ModuleID = '../../third_party/pdfium/core/fpdfapi/font/cpdf_cid2unicodemap.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/font/cpdf_cid2unicodemap.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CPDF_CID2UnicodeMap = type { i8, %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i16* }
%class.CPDF_FontGlobals = type { %class.CPDF_CMapManager, [6 x %"class.pdfium::span.7"], [6 x %"class.pdfium::span"], %"class.std::__1::map.9" }
%class.CPDF_CMapManager = type { %"class.std::__1::map", [6 x %"class.std::__1::unique_ptr"] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %class.CPDF_CID2UnicodeMap* }
%"class.pdfium::span.7" = type { %"class.fxcrt::UnownedPtr.8", i64 }
%"class.fxcrt::UnownedPtr.8" = type { %struct.FXCMAP_CMap* }
%struct.FXCMAP_CMap = type { i8*, i16*, %struct.FXCMAP_DWordCIDMap*, i16, i16, i8, i8 }
%struct.FXCMAP_DWordCIDMap = type { i16, i16, i16, i16 }
%"class.std::__1::map.9" = type { %"class.std::__1::__tree.10" }
%"class.std::__1::__tree.10" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.11", %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.2" }

@_ZN19CPDF_CID2UnicodeMapC1E6CIDSet = hidden unnamed_addr alias void (%class.CPDF_CID2UnicodeMap*, i8), void (%class.CPDF_CID2UnicodeMap*, i8)* @_ZN19CPDF_CID2UnicodeMapC2E6CIDSet
@_ZN19CPDF_CID2UnicodeMapD1Ev = hidden unnamed_addr alias void (%class.CPDF_CID2UnicodeMap*), void (%class.CPDF_CID2UnicodeMap*)* @_ZN19CPDF_CID2UnicodeMapD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CPDF_CID2UnicodeMapC2E6CIDSet(%class.CPDF_CID2UnicodeMap* nocapture, i8 zeroext) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CPDF_CID2UnicodeMap, %class.CPDF_CID2UnicodeMap* %0, i64 0, i32 0
  store i8 %1, i8* %3, align 8
  %4 = getelementptr inbounds %class.CPDF_CID2UnicodeMap, %class.CPDF_CID2UnicodeMap* %0, i64 0, i32 1
  %5 = tail call %class.CPDF_FontGlobals* @_ZN16CPDF_FontGlobals11GetInstanceEv() #5
  %6 = load i8, i8* %3, align 8
  %7 = zext i8 %6 to i64
  %8 = getelementptr inbounds %class.CPDF_FontGlobals, %class.CPDF_FontGlobals* %5, i64 0, i32 2, i64 %7
  %9 = bitcast %"class.pdfium::span"* %4 to i8*
  %10 = bitcast %"class.pdfium::span"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 16, i1 false) #5
  ret void
}

declare %class.CPDF_FontGlobals* @_ZN16CPDF_FontGlobals11GetInstanceEv() local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN19CPDF_CID2UnicodeMapD2Ev(%class.CPDF_CID2UnicodeMap* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK19CPDF_CID2UnicodeMap8IsLoadedEv(%class.CPDF_CID2UnicodeMap* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.CPDF_CID2UnicodeMap, %class.CPDF_CID2UnicodeMap* %0, i64 0, i32 1, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = icmp ne i64 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i32 @_ZNK19CPDF_CID2UnicodeMap14UnicodeFromCIDEt(%class.CPDF_CID2UnicodeMap* nocapture readonly, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CPDF_CID2UnicodeMap, %class.CPDF_CID2UnicodeMap* %0, i64 0, i32 0
  %4 = load i8, i8* %3, align 8
  %5 = icmp eq i8 %4, 5
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = zext i16 %1 to i64
  %8 = getelementptr inbounds %class.CPDF_CID2UnicodeMap, %class.CPDF_CID2UnicodeMap* %0, i64 0, i32 1, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp ugt i64 %9, %7
  br i1 %10, label %11, label %16

11:                                               ; preds = %6
  %12 = getelementptr inbounds %class.CPDF_CID2UnicodeMap, %class.CPDF_CID2UnicodeMap* %0, i64 0, i32 1, i32 0, i32 0
  %13 = load i16*, i16** %12, align 8
  %14 = getelementptr inbounds i16, i16* %13, i64 %7
  %15 = load i16, i16* %14, align 2
  br label %16

16:                                               ; preds = %2, %11, %6
  %17 = phi i16 [ %15, %11 ], [ 0, %6 ], [ %1, %2 ]
  %18 = zext i16 %17 to i32
  ret i32 %18
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
