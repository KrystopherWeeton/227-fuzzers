; ModuleID = '../../skia/ext/image_operations.cc'
source_filename = "../../skia/ext/image_operations.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::trace_event::TraceCategory" = type { i8, i32, i8* }
%class.SkBitmap = type { %class.sk_sp.6, %class.SkPixmap, %class.sk_sp.7 }
%class.sk_sp.6 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.7 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.SkBitmap::Allocator" = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"class.skia::(anonymous namespace)::ResizeFilter" = type { i32, [4 x i8], %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D" }
%"class.skia::ConvolutionFilter1D" = type <{ %"class.std::__1::vector", %"class.std::__1::vector.9", i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"class.std::__1::__compressed_pair" }
%"struct.skia::ConvolutionFilter1D::FilterInstance" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.skia::ConvolutionFilter1D::FilterInstance"* }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { i16*, i16*, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i16* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::HistogramBase" = type <{ i32 (...)**, i8*, %"struct.std::__1::atomic.21", [4 x i8] }>
%"struct.std::__1::atomic.21" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__atomic_base.23" }
%"struct.std::__1::__atomic_base.23" = type { %"struct.std::__1::__cxx_atomic_impl.24" }
%"struct.std::__1::__cxx_atomic_impl.24" = type { %"struct.std::__1::__cxx_atomic_base_impl.25" }
%"struct.std::__1::__cxx_atomic_base_impl.25" = type { i32 }
%"class.base::trace_event::TraceArguments" = type { i8, [2 x i8], [2 x i8*], [2 x %"union.base::trace_event::TraceValue"] }
%"union.base::trace_event::TraceValue" = type { i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.protozero::HeapBuffered" = type { %"class.protozero::ScatteredHeapBuffer", %"class.protozero::ScatteredStreamWriter", %"class.protozero::RootMessage" }
%"class.protozero::ScatteredHeapBuffer" = type { %"class.protozero::ScatteredStreamWriter::Delegate", i64, i64, %"class.protozero::ScatteredStreamWriter"*, %"class.std::__1::vector.50", %"class.protozero::ScatteredHeapBuffer::Slice" }
%"class.protozero::ScatteredStreamWriter::Delegate" = type { i32 (...)** }
%"class.std::__1::vector.50" = type { %"class.std::__1::__vector_base.51" }
%"class.std::__1::__vector_base.51" = type { %"class.protozero::ScatteredHeapBuffer::Slice"*, %"class.protozero::ScatteredHeapBuffer::Slice"*, %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.protozero::ScatteredHeapBuffer::Slice"* }
%"class.protozero::ScatteredHeapBuffer::Slice" = type { %"class.std::__1::unique_ptr", i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { i8* }
%"class.protozero::ScatteredStreamWriter" = type { %"class.protozero::ScatteredStreamWriter::Delegate"*, %"struct.protozero::ContiguousMemoryRange", i8*, i64 }
%"struct.protozero::ContiguousMemoryRange" = type { i8*, i8* }
%"class.protozero::RootMessage" = type { %"class.perfetto::protos::pbzero::DebugAnnotation.base", %"class.protozero::MessageArena" }
%"class.perfetto::protos::pbzero::DebugAnnotation.base" = type { %"class.protozero::Message.base" }
%"class.protozero::Message.base" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8 }>
%"class.protozero::Message" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8, [7 x i8] }>
%"class.protozero::MessageArena" = type { %"class.std::__1::list" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.60" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { i64 }
%"class.base::StackVector" = type { %"class.base::StackContainer" }
%"class.base::StackContainer" = type { %"struct.base::StackAllocator<float, 64>::Source", %"class.base::StackAllocator", %"class.std::__1::vector.28" }
%"struct.base::StackAllocator<float, 64>::Source" = type { [256 x i8], i8, [3 x i8] }
%"class.base::StackAllocator" = type { %"struct.base::StackAllocator<float, 64>::Source"* }
%"class.std::__1::vector.28" = type { %"class.std::__1::__vector_base.29" }
%"class.std::__1::__vector_base.29" = type { float*, float*, %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31", %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.31" = type { float* }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.base::StackAllocator" }
%"class.base::StackVector.33" = type { %"class.base::StackContainer.34" }
%"class.base::StackContainer.34" = type { %"struct.base::StackAllocator<short, 64>::Source", %"class.base::StackAllocator.35", %"class.std::__1::vector.36" }
%"struct.base::StackAllocator<short, 64>::Source" = type { [128 x i8], i8, i8 }
%"class.base::StackAllocator.35" = type { %"struct.base::StackAllocator<short, 64>::Source"* }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { i16*, i16*, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.12", %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.base::StackAllocator.35" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN20trace_event_internal13AddTraceEventIiiEEN4base11trace_event16TraceEventHandleEcPKhPKcS7_yjyS7_OT_S7_OT0_ = comdat any

$_ZNSt3__16vectorIfN4base14StackAllocatorIfLm64EEEE21__push_back_slow_pathIRKfEEvOT_ = comdat any

$_ZNSt3__16vectorIsN4base14StackAllocatorIsLm64EEEE21__push_back_slow_pathIRKsEEvOT_ = comdat any

@_ZN4base11trace_event16CategoryRegistry11categories_E = external global [300 x %"struct.base::trace_event::TraceCategory"], align 16
@.str = private unnamed_addr constant [24 x i8] c"ImageOperations::Resize\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"src_pixels\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"dst_pixels\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"Image.ResampleMS\00", align 1
@_ZZN4skia15ImageOperations6ResizeERK8SkPixmapNS0_12ResizeMethodEiiRK7SkIRectPN8SkBitmap9AllocatorEE24atomic_histogram_pointer.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@switch.table._ZN4skia12_GLOBAL__N_112ResizeFilter14ComputeFiltersEiiifPNS_19ConvolutionFilter1DE = private unnamed_addr constant [3 x float] [float 5.000000e-01, float 1.000000e+00, float 3.000000e+00], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4skia15ImageOperations6ResizeERK8SkPixmapNS0_12ResizeMethodEiiRK7SkIRectPN8SkBitmap9AllocatorE(%class.SkBitmap* noalias sret, %class.SkPixmap* nocapture readonly dereferenceable(40), i32, i32, i32, %struct.SkIRect* nocapture readonly dereferenceable(16), %"class.SkBitmap::Allocator"*) local_unnamed_addr #0 align 2 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %"class.skia::(anonymous namespace)::ResizeFilter", align 8
  %11 = alloca %class.SkBitmap, align 8
  %12 = alloca %struct.SkImageInfo, align 8
  %13 = alloca %"class.base::TimeDelta", align 8
  %14 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 203, i32 0), align 16
  %15 = and i8 %14, 25
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %27, label %17, !prof !2

17:                                               ; preds = %7
  %18 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #11
  %19 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 1, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 1, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = mul nsw i32 %22, %20
  store i32 %23, i32* %8, align 4
  %24 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #11
  %25 = mul nsw i32 %4, %3
  store i32 %25, i32* %9, align 4
  %26 = call i64 @_ZN20trace_event_internal13AddTraceEventIiiEEN4base11trace_event16TraceEventHandleEcPKhPKcS7_yjyS7_OT_S7_OT0_(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 203, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0), i8* null, i64 0, i32 0, i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32* nonnull dereferenceable(4) %8, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32* nonnull dereferenceable(4) %9)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #11
  br label %27

27:                                               ; preds = %7, %17
  %28 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %7 ], [ getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0), %17 ]
  %29 = phi i8* [ null, %7 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 203, i32 0), %17 ]
  %30 = phi i64 [ -6148914691236517206, %7 ], [ %26, %17 ]
  %31 = call i64 @_ZN4base9TimeTicks3NowEv() #11
  %32 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 1, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = icmp slt i32 %33, 1
  br i1 %34, label %43, label %35

35:                                               ; preds = %27
  %36 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 1, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = icmp slt i32 %37, 1
  %39 = icmp slt i32 %3, 1
  %40 = or i1 %39, %38
  %41 = icmp slt i32 %4, 1
  %42 = or i1 %41, %40
  br i1 %42, label %43, label %44

43:                                               ; preds = %35, %27
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* %0) #11
  br label %153

44:                                               ; preds = %35
  %45 = add i32 %2, -3
  %46 = icmp ult i32 %45, 3
  %47 = icmp ult i32 %2, 2
  %48 = select i1 %47, i32 4, i32 5
  %49 = select i1 %46, i32 %2, i32 %48
  %50 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %57, label %53

53:                                               ; preds = %44
  %54 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 0, i32 1
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %55, 6
  br i1 %56, label %58, label %57

57:                                               ; preds = %53, %44
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* %0) #11
  br label %153

58:                                               ; preds = %53
  %59 = bitcast %"class.skia::(anonymous namespace)::ResizeFilter"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %59) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 -86, i64 120, i1 false)
  %60 = getelementptr inbounds %"class.skia::(anonymous namespace)::ResizeFilter", %"class.skia::(anonymous namespace)::ResizeFilter"* %10, i64 0, i32 0
  store i32 %49, i32* %60, align 8
  %61 = getelementptr inbounds %"class.skia::(anonymous namespace)::ResizeFilter", %"class.skia::(anonymous namespace)::ResizeFilter"* %10, i64 0, i32 2
  call void @_ZN4skia19ConvolutionFilter1DC1Ev(%"class.skia::ConvolutionFilter1D"* %61) #11
  %62 = getelementptr inbounds %"class.skia::(anonymous namespace)::ResizeFilter", %"class.skia::(anonymous namespace)::ResizeFilter"* %10, i64 0, i32 3
  call void @_ZN4skia19ConvolutionFilter1DC1Ev(%"class.skia::ConvolutionFilter1D"* %62) #11
  %63 = sitofp i32 %3 to float
  %64 = sitofp i32 %33 to float
  %65 = fdiv float %63, %64
  %66 = sitofp i32 %4 to float
  %67 = sitofp i32 %37 to float
  %68 = fdiv float %66, %67
  %69 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 2
  %72 = load i32, i32* %71, align 4
  %73 = sub i32 %72, %70
  call fastcc void @_ZN4skia12_GLOBAL__N_112ResizeFilter14ComputeFiltersEiiifPNS_19ConvolutionFilter1DE(%"class.skia::(anonymous namespace)::ResizeFilter"* nonnull %10, i32 %33, i32 %70, i32 %73, float %65, %"class.skia::ConvolutionFilter1D"* %61) #11
  %74 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 1
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 3
  %77 = load i32, i32* %76, align 4
  %78 = sub i32 %77, %75
  call fastcc void @_ZN4skia12_GLOBAL__N_112ResizeFilter14ComputeFiltersEiiifPNS_19ConvolutionFilter1DE(%"class.skia::(anonymous namespace)::ResizeFilter"* nonnull %10, i32 %37, i32 %75, i32 %78, float %68, %"class.skia::ConvolutionFilter1D"* %62) #11
  %79 = load i8*, i8** %50, align 8
  %80 = bitcast %class.SkBitmap* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %80) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %80, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %11) #11
  %81 = bitcast %struct.SkImageInfo* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %81) #11
  %82 = load i32, i32* %71, align 4
  %83 = load i32, i32* %69, align 4
  %84 = sub i32 %82, %83
  %85 = load i32, i32* %76, align 4
  %86 = load i32, i32* %74, align 4
  %87 = sub i32 %85, %86
  %88 = zext i32 %87 to i64
  %89 = shl nuw i64 %88, 32
  %90 = zext i32 %84 to i64
  %91 = or i64 %89, %90
  %92 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %12, i64 0, i32 0, i32 0, i32 0
  %93 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %94 = load %class.SkColorSpace*, %class.SkColorSpace** %93, align 8, !noalias !3
  %95 = icmp eq %class.SkColorSpace* %94, null
  br i1 %95, label %99, label %96

96:                                               ; preds = %58
  %97 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %94, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = atomicrmw add i32* %97, i32 1 monotonic, !noalias !3
  br label %99

99:                                               ; preds = %58, %96
  store %class.SkColorSpace* %94, %class.SkColorSpace** %92, align 8, !alias.scope !3
  %100 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %12, i64 0, i32 0, i32 1
  %101 = bitcast i32* %54 to i64*
  %102 = bitcast i32* %100 to i64*
  %103 = load i64, i64* %101, align 8, !noalias !3
  store i64 %103, i64* %102, align 8, !alias.scope !3
  %104 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %12, i64 0, i32 1
  %105 = bitcast %struct.SkISize* %104 to i64*
  store i64 %91, i64* %105, align 8, !alias.scope !3
  %106 = call zeroext i1 @_ZN8SkBitmap7setInfoERK11SkImageInfom(%class.SkBitmap* nonnull %11, %struct.SkImageInfo* nonnull dereferenceable(24) %12, i64 0) #11
  %107 = load %class.SkColorSpace*, %class.SkColorSpace** %92, align 8
  %108 = icmp eq %class.SkColorSpace* %107, null
  br i1 %108, label %115, label %109

109:                                              ; preds = %99
  %110 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %107, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = atomicrmw add i32* %110, i32 -1 acq_rel
  %112 = icmp eq i32 %111, 1
  br i1 %112, label %113, label %115

113:                                              ; preds = %109
  %114 = bitcast %class.SkColorSpace* %107 to i8*
  call void @_ZdlPv(i8* %114) #12
  br label %115

115:                                              ; preds = %99, %109, %113
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %81) #11
  %116 = call zeroext i1 @_ZN8SkBitmap14tryAllocPixelsEPNS_9AllocatorE(%class.SkBitmap* nonnull %11, %"class.SkBitmap::Allocator"* %6) #11
  br i1 %116, label %117, label %121

117:                                              ; preds = %115
  %118 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %11, i64 0, i32 1, i32 0
  %119 = load i8*, i8** %118, align 8
  %120 = icmp eq i8* %119, null
  br i1 %120, label %121, label %122

121:                                              ; preds = %117, %115
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* %0) #11
  br label %152

122:                                              ; preds = %117
  %123 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 1
  %124 = load i64, i64* %123, align 8
  %125 = trunc i64 %124 to i32
  %126 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 0, i32 2
  %127 = load i32, i32* %126, align 4
  %128 = icmp eq i32 %127, 1
  br i1 %128, label %134, label %129

129:                                              ; preds = %122
  %130 = load i32, i32* %54, align 8
  %131 = call zeroext i1 @_Z25SkColorTypeIsAlwaysOpaque11SkColorType(i32 %130) #11
  %132 = xor i1 %131, true
  %133 = load i8*, i8** %118, align 8
  br label %134

134:                                              ; preds = %122, %129
  %135 = phi i8* [ %119, %122 ], [ %133, %129 ]
  %136 = phi i1 [ false, %122 ], [ %132, %129 ]
  %137 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %11, i64 0, i32 1, i32 1
  %138 = load i64, i64* %137, align 8
  %139 = trunc i64 %138 to i32
  call void @_ZN4skia14BGRAConvolve2DEPKhibRKNS_19ConvolutionFilter1DES4_iPhb(i8* %79, i32 %125, i1 zeroext %136, %"class.skia::ConvolutionFilter1D"* dereferenceable(56) %61, %"class.skia::ConvolutionFilter1D"* dereferenceable(56) %62, i32 %139, i8* %135, i1 zeroext true) #11
  %140 = bitcast %"class.base::TimeDelta"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %140) #11
  %141 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %13, i64 0, i32 0
  %142 = call i64 @_ZN4base9TimeTicks3NowEv() #11
  %143 = sub nsw i64 %142, %31
  store i64 %143, i64* %141, align 8
  %144 = load atomic i64, i64* @_ZZN4skia15ImageOperations6ResizeERK8SkPixmapNS0_12ResizeMethodEiiRK7SkIRectPN8SkBitmap9AllocatorEE24atomic_histogram_pointer.0.0.0.0.0 acquire, align 8
  %145 = inttoptr i64 %144 to %"class.base::HistogramBase"*
  %146 = icmp eq i64 %144, 0
  br i1 %146, label %147, label %150

147:                                              ; preds = %134
  %148 = call %"class.base::HistogramBase"* @_ZN4base9Histogram14FactoryTimeGetEPKcNS_9TimeDeltaES3_ji(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i64 1000, i64 10000000, i32 50, i32 1) #11
  %149 = ptrtoint %"class.base::HistogramBase"* %148 to i64
  store atomic i64 %149, i64* @_ZZN4skia15ImageOperations6ResizeERK8SkPixmapNS0_12ResizeMethodEiiRK7SkIRectPN8SkBitmap9AllocatorEE24atomic_histogram_pointer.0.0.0.0.0 release, align 8
  br label %150

150:                                              ; preds = %134, %147
  %151 = phi %"class.base::HistogramBase"* [ %145, %134 ], [ %148, %147 ]
  call void @_ZN4base13HistogramBase30AddTimeMillisecondsGranularityERKNS_9TimeDeltaE(%"class.base::HistogramBase"* %151, %"class.base::TimeDelta"* nonnull dereferenceable(8) %13) #11
  call void @_ZN8SkBitmapC1EOS_(%class.SkBitmap* %0, %class.SkBitmap* nonnull dereferenceable(56) %11) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %140) #11
  br label %152

152:                                              ; preds = %150, %121
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %11) #11
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %80) #11
  call void @_ZN4skia19ConvolutionFilter1DD1Ev(%"class.skia::ConvolutionFilter1D"* %62) #11
  call void @_ZN4skia19ConvolutionFilter1DD1Ev(%"class.skia::ConvolutionFilter1D"* %61) #11
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %59) #11
  br label %153

153:                                              ; preds = %57, %152, %43
  %154 = icmp eq i8* %29, null
  br i1 %154, label %159, label %155

155:                                              ; preds = %153
  %156 = load i8, i8* %29, align 1
  %157 = icmp eq i8 %156, 0
  br i1 %157, label %159, label %158

158:                                              ; preds = %155
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %29, i8* %28, i64 %30) #11
  br label %159

159:                                              ; preds = %153, %155, %158
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN20trace_event_internal13AddTraceEventIiiEEN4base11trace_event16TraceEventHandleEcPKhPKcS7_yjyS7_OT_S7_OT0_(i8 signext, i8*, i8*, i8*, i64, i32, i64, i8*, i32* dereferenceable(4), i8*, i32* dereferenceable(4)) local_unnamed_addr #2 comdat {
  %12 = alloca %"class.base::trace_event::TraceArguments", align 8
  %13 = alloca %"class.base::TimeTicks", align 8
  %14 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #11
  %15 = bitcast %"class.base::TimeTicks"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #11
  %16 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %13, i64 0, i32 0, i32 0
  %17 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #11
  store i64 %17, i64* %16, align 8
  %18 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %18) #11
  %19 = bitcast %"class.base::trace_event::TraceArguments"* %12 to i64*
  store i64 -6148914691247504638, i64* %19, align 8
  %20 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 0
  store i8* %7, i8** %20, align 8
  %21 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 1
  store i8* %9, i8** %21, align 8
  %22 = load i32, i32* %8, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 0, i32 0
  store i64 %23, i64* %24, align 8
  %25 = load i32, i32* %10, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 1, i32 0
  store i64 %26, i64* %27, align 8
  %28 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext %0, i8* %1, i8* %2, i8* %3, i64 %4, i64 %6, i32 %14, %"class.base::TimeTicks"* nonnull dereferenceable(8) %13, %"class.base::trace_event::TraceArguments"* nonnull %12, i32 %5) #11
  %29 = load i8, i8* %18, align 8
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %65, label %31

31:                                               ; preds = %11, %60
  %32 = phi i64 [ %61, %60 ], [ 0, %11 ]
  %33 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 1, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, 8
  br i1 %35, label %36, label %47

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %32
  %38 = bitcast %"union.base::trace_event::TraceValue"* %37 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %39 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %38, align 8
  %40 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %39, null
  br i1 %40, label %60, label %41

41:                                               ; preds = %36
  %42 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %39 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %43 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %42, align 8
  %44 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %43, i64 1
  %45 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %44, align 8
  call void %45(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %39) #11
  %46 = load i8, i8* %33, align 1
  br label %47

47:                                               ; preds = %41, %31
  %48 = phi i8 [ %34, %31 ], [ %46, %41 ]
  %49 = icmp eq i8 %48, 9
  br i1 %49, label %50, label %60

50:                                               ; preds = %47
  %51 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %32
  %52 = bitcast %"union.base::trace_event::TraceValue"* %51 to %"class.protozero::HeapBuffered"**
  %53 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %52, align 8
  %54 = icmp eq %"class.protozero::HeapBuffered"* %53, null
  br i1 %54, label %60, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %53, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %56) #11
  %57 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %53, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %57) #11
  %58 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %53, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %58) #11
  %59 = bitcast %"class.protozero::HeapBuffered"* %53 to i8*
  call void @_ZdlPv(i8* %59) #12
  br label %60

60:                                               ; preds = %55, %50, %47, %36
  %61 = add nuw nsw i64 %32, 1
  %62 = load i8, i8* %18, align 8
  %63 = zext i8 %62 to i64
  %64 = icmp ult i64 %61, %63
  br i1 %64, label %31, label %65

65:                                               ; preds = %60, %11
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %18) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #11
  ret i64 %28
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i64 @_ZN4base9TimeTicks3NowEv() local_unnamed_addr #3

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN8SkBitmap7setInfoERK11SkImageInfom(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i64) local_unnamed_addr #3

declare zeroext i1 @_ZN8SkBitmap14tryAllocPixelsEPNS_9AllocatorE(%class.SkBitmap*, %"class.SkBitmap::Allocator"*) local_unnamed_addr #3

declare void @_ZN4skia14BGRAConvolve2DEPKhibRKNS_19ConvolutionFilter1DES4_iPhb(i8*, i32, i1 zeroext, %"class.skia::ConvolutionFilter1D"* dereferenceable(56), %"class.skia::ConvolutionFilter1D"* dereferenceable(56), i32, i8*, i1 zeroext) local_unnamed_addr #3

declare %"class.base::HistogramBase"* @_ZN4base9Histogram14FactoryTimeGetEPKcNS_9TimeDeltaES3_ji(i8*, i64, i64, i32, i32) local_unnamed_addr #3

declare void @_ZN4base13HistogramBase30AddTimeMillisecondsGranularityERKNS_9TimeDeltaE(%"class.base::HistogramBase"*, %"class.base::TimeDelta"* dereferenceable(8)) local_unnamed_addr #3

declare void @_ZN8SkBitmapC1EOS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4skia15ImageOperations6ResizeERK8SkBitmapNS0_12ResizeMethodEiiRK7SkIRectPNS1_9AllocatorE(%class.SkBitmap* noalias sret, %class.SkBitmap* dereferenceable(56), i32, i32, i32, %struct.SkIRect* nocapture readonly dereferenceable(16), %"class.SkBitmap::Allocator"*) local_unnamed_addr #0 align 2 {
  %8 = alloca %class.SkPixmap, align 8
  %9 = bitcast %class.SkPixmap* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %9) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 40, i1 false) #11
  %10 = call zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap* %1, %class.SkPixmap* nonnull %8) #11
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* %0) #11
  br label %13

12:                                               ; preds = %7
  call void @_ZN4skia15ImageOperations6ResizeERK8SkPixmapNS0_12ResizeMethodEiiRK7SkIRectPN8SkBitmap9AllocatorE(%class.SkBitmap* sret %0, %class.SkPixmap* nonnull dereferenceable(40) %8, i32 %2, i32 %3, i32 %4, %struct.SkIRect* dereferenceable(16) %5, %"class.SkBitmap::Allocator"* %6)
  br label %13

13:                                               ; preds = %12, %11
  %14 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %8, i64 0, i32 2, i32 0, i32 0, i32 0
  %15 = load %class.SkColorSpace*, %class.SkColorSpace** %14, align 8
  %16 = icmp eq %class.SkColorSpace* %15, null
  br i1 %16, label %23, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw add i32* %18, i32 -1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %23

21:                                               ; preds = %17
  %22 = bitcast %class.SkColorSpace* %15 to i8*
  call void @_ZdlPv(i8* %22) #12
  br label %23

23:                                               ; preds = %13, %17, %21
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %9) #11
  ret void
}

declare zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap*, %class.SkPixmap*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4skia15ImageOperations6ResizeERK8SkBitmapNS0_12ResizeMethodEiiPNS1_9AllocatorE(%class.SkBitmap* noalias sret, %class.SkBitmap* dereferenceable(56), i32, i32, i32, %"class.SkBitmap::Allocator"*) local_unnamed_addr #0 align 2 {
  %7 = alloca %class.SkPixmap, align 8
  %8 = alloca %struct.SkIRect, align 4
  %9 = bitcast %struct.SkIRect* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #11
  %10 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 0
  %11 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 1
  %12 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 2
  %13 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 3
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  %14 = bitcast %class.SkPixmap* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %14) #11, !noalias !8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 40, i1 false) #11, !noalias !8
  %15 = call zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap* %1, %class.SkPixmap* nonnull %7) #11, !noalias !8
  br i1 %15, label %17, label %16

16:                                               ; preds = %6
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* %0) #11
  br label %18

17:                                               ; preds = %6
  call void @_ZN4skia15ImageOperations6ResizeERK8SkPixmapNS0_12ResizeMethodEiiRK7SkIRectPN8SkBitmap9AllocatorE(%class.SkBitmap* sret %0, %class.SkPixmap* nonnull dereferenceable(40) %7, i32 %2, i32 %3, i32 %4, %struct.SkIRect* nonnull dereferenceable(16) %8, %"class.SkBitmap::Allocator"* %5) #11
  br label %18

18:                                               ; preds = %17, %16
  %19 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %7, i64 0, i32 2, i32 0, i32 0, i32 0
  %20 = load %class.SkColorSpace*, %class.SkColorSpace** %19, align 8, !noalias !8
  %21 = icmp eq %class.SkColorSpace* %20, null
  br i1 %21, label %28, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %20, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = atomicrmw add i32* %23, i32 -1 acq_rel
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %26, label %28

26:                                               ; preds = %22
  %27 = bitcast %class.SkColorSpace* %20 to i8*
  call void @_ZdlPv(i8* %27) #12
  br label %28

28:                                               ; preds = %18, %22, %26
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %14) #11, !noalias !8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #11
  ret void
}

declare void @_ZN4skia19ConvolutionFilter1DC1Ev(%"class.skia::ConvolutionFilter1D"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4skia12_GLOBAL__N_112ResizeFilter14ComputeFiltersEiiifPNS_19ConvolutionFilter1DE(%"class.skia::(anonymous namespace)::ResizeFilter"* nocapture readonly, i32, i32, i32, float, %"class.skia::ConvolutionFilter1D"*) unnamed_addr #0 align 2 {
  %7 = alloca %"class.base::StackVector", align 8
  %8 = alloca %"class.base::StackVector.33", align 8
  %9 = alloca float, align 4
  %10 = alloca i16, align 2
  %11 = add nsw i32 %3, %2
  %12 = fcmp olt float %4, 1.000000e+00
  %13 = select i1 %12, float %4, float 1.000000e+00
  %14 = getelementptr inbounds %"class.skia::(anonymous namespace)::ResizeFilter", %"class.skia::(anonymous namespace)::ResizeFilter"* %0, i64 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = add i32 %15, -3
  %17 = icmp ult i32 %16, 3
  br i1 %17, label %18, label %22

18:                                               ; preds = %6
  %19 = sext i32 %16 to i64
  %20 = getelementptr inbounds [3 x float], [3 x float]* @switch.table._ZN4skia12_GLOBAL__N_112ResizeFilter14ComputeFiltersEiiifPNS_19ConvolutionFilter1DE, i64 0, i64 %19
  %21 = load float, float* %20, align 4
  br label %22

22:                                               ; preds = %6, %18
  %23 = phi float [ %21, %18 ], [ 1.000000e+00, %6 ]
  %24 = fdiv float %23, %13
  %25 = fdiv float 1.000000e+00, %4
  %26 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %26) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 264, i1 false)
  %27 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %7, i64 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %7, i64 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %7, i64 0, i32 0, i32 1, i32 0
  store %"struct.base::StackAllocator<float, 64>::Source"* %27, %"struct.base::StackAllocator<float, 64>::Source"** %29, align 8
  %30 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %7, i64 0, i32 0, i32 2
  %31 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %7, i64 0, i32 0, i32 2, i32 0, i32 2, i32 1
  %32 = ptrtoint %"class.base::StackVector"* %7 to i64
  %33 = bitcast %"struct.std::__1::__compressed_pair_elem.32"* %31 to i64*
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %7, i64 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %35 = bitcast float** %34 to i64*
  %36 = bitcast %"class.std::__1::vector.28"* %30 to i64*
  %37 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %7, i64 0, i32 0, i32 2, i32 0, i32 1
  %38 = bitcast float** %37 to i64*
  store i8 1, i8* %28, align 8
  %39 = ptrtoint i8* %28 to i64
  store i64 %32, i64* %36, align 8
  store i64 %32, i64* %38, align 8
  store i64 %39, i64* %35, align 8
  %40 = getelementptr inbounds %"class.base::StackVector.33", %"class.base::StackVector.33"* %8, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 176, i8* nonnull %40) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -86, i64 136, i1 false)
  %41 = getelementptr inbounds %"class.base::StackVector.33", %"class.base::StackVector.33"* %8, i64 0, i32 0, i32 0
  %42 = getelementptr inbounds %"class.base::StackVector.33", %"class.base::StackVector.33"* %8, i64 0, i32 0, i32 0, i32 1
  %43 = getelementptr inbounds %"class.base::StackVector.33", %"class.base::StackVector.33"* %8, i64 0, i32 0, i32 1, i32 0
  store %"struct.base::StackAllocator<short, 64>::Source"* %41, %"struct.base::StackAllocator<short, 64>::Source"** %43, align 8
  %44 = getelementptr inbounds %"class.base::StackVector.33", %"class.base::StackVector.33"* %8, i64 0, i32 0, i32 2
  %45 = getelementptr inbounds %"class.base::StackVector.33", %"class.base::StackVector.33"* %8, i64 0, i32 0, i32 2, i32 0, i32 2, i32 1
  %46 = ptrtoint %"class.base::StackVector.33"* %8 to i64
  %47 = bitcast %"struct.std::__1::__compressed_pair_elem.39"* %45 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.base::StackVector.33", %"class.base::StackVector.33"* %8, i64 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %49 = bitcast i16** %48 to i64*
  %50 = bitcast %"class.std::__1::vector.36"* %44 to i64*
  %51 = getelementptr inbounds %"class.base::StackVector.33", %"class.base::StackVector.33"* %8, i64 0, i32 0, i32 2, i32 0, i32 1
  %52 = bitcast i16** %51 to i64*
  store i8 1, i8* %42, align 8
  %53 = ptrtoint i8* %42 to i64
  store i64 %46, i64* %50, align 8
  store i64 %46, i64* %52, align 8
  store i64 %53, i64* %49, align 8
  %54 = icmp sgt i32 %3, 0
  br i1 %54, label %55, label %60

55:                                               ; preds = %22
  %56 = add nsw i32 %1, -1
  %57 = bitcast float* %9 to i8*
  %58 = bitcast i16* %10 to i8*
  %59 = getelementptr inbounds %"class.base::StackVector.33", %"class.base::StackVector.33"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  br label %162

60:                                               ; preds = %243, %22
  %61 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %5, i64 0, i32 1
  %62 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %5, i64 0, i32 1, i32 0, i32 1
  %63 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %5, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %64 = bitcast i16** %62 to i64*
  %65 = bitcast %"class.std::__1::vector.9"* %61 to i64*
  %66 = bitcast i16** %63 to i64*
  %67 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %61, i64 0, i32 0, i32 0
  br label %68

68:                                               ; preds = %126, %60
  %69 = phi i32 [ 0, %60 ], [ %127, %126 ]
  %70 = load i16*, i16** %62, align 8
  %71 = load i16*, i16** %63, align 8
  %72 = icmp ult i16* %70, %71
  %73 = ptrtoint i16* %71 to i64
  br i1 %72, label %74, label %77

74:                                               ; preds = %68
  store i16 0, i16* %70, align 2
  %75 = getelementptr inbounds i16, i16* %70, i64 1
  %76 = ptrtoint i16* %75 to i64
  store i64 %76, i64* %64, align 8
  br label %126

77:                                               ; preds = %68
  %78 = ptrtoint i16* %70 to i64
  %79 = load i64, i64* %65, align 8
  %80 = sub i64 %78, %79
  %81 = ashr exact i64 %80, 1
  %82 = add nsw i64 %81, 1
  %83 = icmp slt i64 %82, 0
  br i1 %83, label %84, label %86

84:                                               ; preds = %77
  %85 = bitcast %"class.std::__1::vector.9"* %61 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %85) #13
  unreachable

86:                                               ; preds = %77
  %87 = sub i64 %73, %79
  %88 = ashr exact i64 %87, 1
  %89 = icmp ult i64 %88, 4611686018427387903
  %90 = icmp ult i64 %87, %82
  %91 = select i1 %90, i64 %82, i64 %87
  %92 = select i1 %89, i64 %91, i64 9223372036854775807
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %101, label %94

94:                                               ; preds = %86
  %95 = icmp slt i64 %92, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %94
  call void @abort() #13
  unreachable

97:                                               ; preds = %94
  %98 = shl i64 %92, 1
  %99 = call i8* @_Znwm(i64 %98) #12
  %100 = bitcast i8* %99 to i16*
  br label %101

101:                                              ; preds = %97, %86
  %102 = phi i16* [ %100, %97 ], [ null, %86 ]
  %103 = getelementptr inbounds i16, i16* %102, i64 %81
  %104 = getelementptr inbounds i16, i16* %102, i64 %92
  %105 = ptrtoint i16* %104 to i64
  store i16 0, i16* %103, align 2
  %106 = getelementptr inbounds i16, i16* %103, i64 1
  %107 = ptrtoint i16* %106 to i64
  %108 = load i16*, i16** %67, align 8
  %109 = load i64, i64* %64, align 8
  %110 = ptrtoint i16* %108 to i64
  %111 = sub i64 %109, %110
  %112 = ashr exact i64 %111, 1
  %113 = sub nsw i64 0, %112
  %114 = getelementptr inbounds i16, i16* %103, i64 %113
  %115 = ptrtoint i16* %114 to i64
  %116 = icmp sgt i64 %111, 0
  br i1 %116, label %117, label %121

117:                                              ; preds = %101
  %118 = bitcast i16* %114 to i8*
  %119 = bitcast i16* %108 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %118, i8* align 2 %119, i64 %111, i1 false) #11
  %120 = load i16*, i16** %67, align 8
  br label %121

121:                                              ; preds = %117, %101
  %122 = phi i16* [ %108, %101 ], [ %120, %117 ]
  store i64 %115, i64* %65, align 8
  store i64 %107, i64* %64, align 8
  store i64 %105, i64* %66, align 8
  %123 = icmp eq i16* %122, null
  br i1 %123, label %126, label %124

124:                                              ; preds = %121
  %125 = bitcast i16* %122 to i8*
  call void @_ZdlPv(i8* %125) #12
  br label %126

126:                                              ; preds = %124, %121, %74
  %127 = add nuw nsw i32 %69, 1
  %128 = icmp eq i32 %127, 8
  br i1 %128, label %129, label %68

129:                                              ; preds = %126
  %130 = getelementptr inbounds %"class.base::StackVector.33", %"class.base::StackVector.33"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %131 = load i16*, i16** %130, align 8
  %132 = icmp eq i16* %131, null
  br i1 %132, label %145, label %133

133:                                              ; preds = %129
  %134 = ptrtoint i16* %131 to i64
  store i64 %134, i64* %52, align 8
  %135 = getelementptr inbounds %"class.base::StackVector.33", %"class.base::StackVector.33"* %8, i64 0, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %136 = load %"struct.base::StackAllocator<short, 64>::Source"*, %"struct.base::StackAllocator<short, 64>::Source"** %135, align 8
  %137 = icmp ne %"struct.base::StackAllocator<short, 64>::Source"* %136, null
  %138 = bitcast %"struct.base::StackAllocator<short, 64>::Source"* %136 to i16*
  %139 = icmp eq i16* %131, %138
  %140 = and i1 %137, %139
  br i1 %140, label %141, label %143

141:                                              ; preds = %133
  %142 = getelementptr inbounds %"struct.base::StackAllocator<short, 64>::Source", %"struct.base::StackAllocator<short, 64>::Source"* %136, i64 0, i32 1
  store i8 0, i8* %142, align 2
  br label %145

143:                                              ; preds = %133
  %144 = bitcast i16* %131 to i8*
  call void @_ZdlPv(i8* %144) #12
  br label %145

145:                                              ; preds = %129, %141, %143
  call void @llvm.lifetime.end.p0i8(i64 176, i8* nonnull %40) #11
  %146 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %147 = load float*, float** %146, align 8
  %148 = icmp eq float* %147, null
  br i1 %148, label %161, label %149

149:                                              ; preds = %145
  %150 = ptrtoint float* %147 to i64
  store i64 %150, i64* %38, align 8
  %151 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %7, i64 0, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %152 = load %"struct.base::StackAllocator<float, 64>::Source"*, %"struct.base::StackAllocator<float, 64>::Source"** %151, align 8
  %153 = icmp ne %"struct.base::StackAllocator<float, 64>::Source"* %152, null
  %154 = bitcast %"struct.base::StackAllocator<float, 64>::Source"* %152 to float*
  %155 = icmp eq float* %147, %154
  %156 = and i1 %153, %155
  br i1 %156, label %157, label %159

157:                                              ; preds = %149
  %158 = getelementptr inbounds %"struct.base::StackAllocator<float, 64>::Source", %"struct.base::StackAllocator<float, 64>::Source"* %152, i64 0, i32 1
  store i8 0, i8* %158, align 4
  br label %161

159:                                              ; preds = %149
  %160 = bitcast float* %147 to i8*
  call void @_ZdlPv(i8* %160) #12
  br label %161

161:                                              ; preds = %145, %157, %159
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %26) #11
  ret void

162:                                              ; preds = %263, %55
  %163 = phi i64 [ %46, %55 ], [ %265, %263 ]
  %164 = phi i64 [ %32, %55 ], [ %264, %263 ]
  %165 = phi i32 [ %2, %55 ], [ %261, %263 ]
  store i64 %164, i64* %38, align 8
  store i64 %163, i64* %52, align 8
  %166 = sitofp i32 %165 to float
  %167 = fadd float %166, 5.000000e-01
  %168 = fmul float %25, %167
  %169 = fsub float %168, %24
  %170 = call float @llvm.floor.f32(float %169) #11
  %171 = fptosi float %170 to i32
  %172 = icmp sgt i32 %171, 0
  %173 = select i1 %172, i32 %171, i32 0
  %174 = fadd float %24, %168
  %175 = call float @llvm.ceil.f32(float %174) #11
  %176 = fptosi float %175 to i32
  %177 = icmp sgt i32 %56, %176
  %178 = select i1 %177, i32 %176, i32 %56
  %179 = icmp sgt i32 %173, %178
  br i1 %179, label %243, label %184

180:                                              ; preds = %238
  %181 = load i64, i64* %38, align 8
  %182 = load i64, i64* %36, align 8
  %183 = icmp eq i64 %181, %182
  br i1 %183, label %243, label %266

184:                                              ; preds = %162, %238
  %185 = phi i32 [ %241, %238 ], [ %173, %162 ]
  %186 = phi float [ %240, %238 ], [ 0.000000e+00, %162 ]
  %187 = sitofp i32 %185 to float
  %188 = fadd float %187, 5.000000e-01
  %189 = fsub float %188, %168
  %190 = fmul float %13, %189
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %57) #11
  store float 0xFFFFFFFFE0000000, float* %9, align 4
  %191 = load i32, i32* %14, align 8
  switch i32 %191, label %229 [
    i32 3, label %192
    i32 4, label %197
    i32 5, label %213
  ]

192:                                              ; preds = %184
  %193 = fcmp oge float %190, -5.000000e-01
  %194 = fcmp olt float %190, 5.000000e-01
  %195 = and i1 %193, %194
  %196 = select i1 %195, float 1.000000e+00, float 0.000000e+00
  br label %229

197:                                              ; preds = %184
  %198 = fcmp ugt float %190, -1.000000e+00
  %199 = fcmp ult float %190, 1.000000e+00
  %200 = and i1 %198, %199
  br i1 %200, label %201, label %229

201:                                              ; preds = %197
  %202 = fcmp ogt float %190, 0xBE80000000000000
  %203 = fcmp olt float %190, 0x3E80000000000000
  %204 = and i1 %202, %203
  br i1 %204, label %229, label %205

205:                                              ; preds = %201
  %206 = fmul float %190, 0x400921FB60000000
  %207 = call float @sinf(float %206) #11
  %208 = fdiv float %207, %206
  %209 = call float @cosf(float %206) #11
  %210 = fmul float %209, 0x3FDD70A3E0000000
  %211 = fadd float %210, 0x3FE147AE20000000
  %212 = fmul float %208, %211
  br label %229

213:                                              ; preds = %184
  %214 = fcmp ugt float %190, -3.000000e+00
  %215 = fcmp ult float %190, 3.000000e+00
  %216 = and i1 %214, %215
  br i1 %216, label %217, label %229

217:                                              ; preds = %213
  %218 = fcmp ogt float %190, 0xBE80000000000000
  %219 = fcmp olt float %190, 0x3E80000000000000
  %220 = and i1 %218, %219
  br i1 %220, label %229, label %221

221:                                              ; preds = %217
  %222 = fmul float %190, 0x400921FB60000000
  %223 = call float @sinf(float %222) #11
  %224 = fdiv float %223, %222
  %225 = fdiv float %222, 3.000000e+00
  %226 = call float @sinf(float %225) #11
  %227 = fmul float %224, %226
  %228 = fdiv float %227, %225
  br label %229

229:                                              ; preds = %184, %192, %197, %201, %205, %213, %217, %221
  %230 = phi float [ %196, %192 ], [ 0.000000e+00, %184 ], [ %212, %205 ], [ 0.000000e+00, %197 ], [ 1.000000e+00, %201 ], [ %228, %221 ], [ 0.000000e+00, %213 ], [ 1.000000e+00, %217 ]
  store float %230, float* %9, align 4
  %231 = load float*, float** %37, align 8
  %232 = load float*, float** %34, align 8
  %233 = icmp eq float* %231, %232
  br i1 %233, label %237, label %234

234:                                              ; preds = %229
  store float %230, float* %231, align 4
  %235 = getelementptr inbounds float, float* %231, i64 1
  %236 = ptrtoint float* %235 to i64
  store i64 %236, i64* %38, align 8
  br label %238

237:                                              ; preds = %229
  call void @_ZNSt3__16vectorIfN4base14StackAllocatorIfLm64EEEE21__push_back_slow_pathIRKfEEvOT_(%"class.std::__1::vector.28"* %30, float* nonnull dereferenceable(4) %9) #11
  br label %238

238:                                              ; preds = %234, %237
  %239 = load float, float* %9, align 4
  %240 = fadd float %186, %239
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %57) #11
  %241 = add nuw nsw i32 %185, 1
  %242 = icmp slt i32 %185, %178
  br i1 %242, label %184, label %180

243:                                              ; preds = %284, %162, %180
  %244 = phi i16 [ 0, %180 ], [ 0, %162 ], [ %276, %284 ]
  %245 = sub i16 16384, %244
  %246 = load i64, i64* %52, align 8
  %247 = load i64, i64* %50, align 8
  %248 = sub i64 %246, %247
  %249 = ashr exact i64 %248, 1
  %250 = lshr i64 %249, 1
  %251 = inttoptr i64 %247 to i16*
  %252 = getelementptr inbounds i16, i16* %251, i64 %250
  %253 = load i16, i16* %252, align 2
  %254 = add i16 %245, %253
  store i16 %254, i16* %252, align 2
  %255 = load i16*, i16** %59, align 8
  %256 = load i64, i64* %52, align 8
  %257 = ptrtoint i16* %255 to i64
  %258 = sub i64 %256, %257
  %259 = lshr exact i64 %258, 1
  %260 = trunc i64 %259 to i32
  call void @_ZN4skia19ConvolutionFilter1D9AddFilterEiPKsi(%"class.skia::ConvolutionFilter1D"* %5, i32 %173, i16* %255, i32 %260) #11
  %261 = add nsw i32 %165, 1
  %262 = icmp slt i32 %261, %11
  br i1 %262, label %263, label %60

263:                                              ; preds = %243
  %264 = load i64, i64* %36, align 8
  %265 = load i64, i64* %50, align 8
  br label %162

266:                                              ; preds = %180, %284
  %267 = phi i64 [ %287, %284 ], [ %182, %180 ]
  %268 = phi i64 [ %285, %284 ], [ 0, %180 ]
  %269 = phi i16 [ %276, %284 ], [ 0, %180 ]
  %270 = inttoptr i64 %267 to float*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %58) #11
  %271 = getelementptr inbounds float, float* %270, i64 %268
  %272 = load float, float* %271, align 4
  %273 = fdiv float %272, %240
  %274 = fmul float %273, 1.638400e+04
  %275 = fptosi float %274 to i16
  store i16 %275, i16* %10, align 2
  %276 = add i16 %269, %275
  %277 = load i16*, i16** %51, align 8
  %278 = load i16*, i16** %48, align 8
  %279 = icmp eq i16* %277, %278
  br i1 %279, label %283, label %280

280:                                              ; preds = %266
  store i16 %275, i16* %277, align 2
  %281 = getelementptr inbounds i16, i16* %277, i64 1
  %282 = ptrtoint i16* %281 to i64
  store i64 %282, i64* %52, align 8
  br label %284

283:                                              ; preds = %266
  call void @_ZNSt3__16vectorIsN4base14StackAllocatorIsLm64EEEE21__push_back_slow_pathIRKsEEvOT_(%"class.std::__1::vector.36"* %44, i16* nonnull dereferenceable(2) %10) #11
  br label %284

284:                                              ; preds = %280, %283
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %58) #11
  %285 = add nuw i64 %268, 1
  %286 = load i64, i64* %38, align 8
  %287 = load i64, i64* %36, align 8
  %288 = sub i64 %286, %287
  %289 = ashr exact i64 %288, 2
  %290 = icmp ult i64 %285, %289
  br i1 %290, label %266, label %243
}

declare void @_ZN4skia19ConvolutionFilter1D9AddFilterEiPKsi(%"class.skia::ConvolutionFilter1D"*, i32, i16*, i32) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #8

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #8

; Function Attrs: nofree nounwind
declare float @sinf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #9

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfN4base14StackAllocatorIfLm64EEEE21__push_back_slow_pathIRKfEEvOT_(%"class.std::__1::vector.28"*, float* dereferenceable(4)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.28", %"class.std::__1::vector.28"* %0, i64 0, i32 0, i32 2, i32 1, i32 0
  %4 = getelementptr inbounds %"class.std::__1::vector.28", %"class.std::__1::vector.28"* %0, i64 0, i32 0, i32 1
  %5 = bitcast float** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.28"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 2
  %11 = add nsw i64 %10, 1
  %12 = icmp ugt i64 %11, 4611686018427387903
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = bitcast %"class.std::__1::vector.28"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %14) #13
  unreachable

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.std::__1::vector.28", %"class.std::__1::vector.28"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast float** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %8
  %20 = ashr exact i64 %19, 2
  %21 = icmp ult i64 %20, 2305843009213693951
  br i1 %21, label %22, label %27

22:                                               ; preds = %15
  %23 = ashr exact i64 %19, 1
  %24 = icmp ult i64 %23, %11
  %25 = select i1 %24, i64 %11, i64 %23
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %48, label %27

27:                                               ; preds = %15, %22
  %28 = phi i64 [ %25, %22 ], [ 4611686018427387903, %15 ]
  %29 = getelementptr inbounds %"class.base::StackAllocator", %"class.base::StackAllocator"* %3, i64 0, i32 0
  %30 = load %"struct.base::StackAllocator<float, 64>::Source"*, %"struct.base::StackAllocator<float, 64>::Source"** %29, align 8
  %31 = icmp eq %"struct.base::StackAllocator<float, 64>::Source"* %30, null
  br i1 %31, label %41, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"struct.base::StackAllocator<float, 64>::Source", %"struct.base::StackAllocator<float, 64>::Source"* %30, i64 0, i32 1
  %34 = load i8, i8* %33, align 4, !range !11
  %35 = icmp eq i8 %34, 0
  %36 = icmp ult i64 %28, 65
  %37 = and i1 %36, %35
  br i1 %37, label %38, label %41

38:                                               ; preds = %32
  store i8 1, i8* %33, align 4
  %39 = bitcast %"class.base::StackAllocator"* %3 to float**
  %40 = load float*, float** %39, align 8
  br label %48

41:                                               ; preds = %32, %27
  %42 = icmp ugt i64 %28, 4611686018427387903
  br i1 %42, label %43, label %44

43:                                               ; preds = %41
  tail call void @abort() #13
  unreachable

44:                                               ; preds = %41
  %45 = shl i64 %28, 2
  %46 = tail call i8* @_Znwm(i64 %45) #12
  %47 = bitcast i8* %46 to float*
  br label %48

48:                                               ; preds = %22, %38, %44
  %49 = phi i64 [ 0, %22 ], [ %28, %38 ], [ %28, %44 ]
  %50 = phi float* [ null, %22 ], [ %40, %38 ], [ %47, %44 ]
  %51 = getelementptr inbounds float, float* %50, i64 %10
  %52 = getelementptr inbounds float, float* %50, i64 %49
  %53 = ptrtoint float* %52 to i64
  %54 = bitcast float* %1 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = bitcast float* %51 to i32*
  store i32 %55, i32* %56, align 4
  %57 = getelementptr inbounds float, float* %51, i64 1
  %58 = ptrtoint float* %57 to i64
  %59 = getelementptr inbounds %"class.std::__1::vector.28", %"class.std::__1::vector.28"* %0, i64 0, i32 0, i32 0
  %60 = load float*, float** %59, align 8
  %61 = ptrtoint float* %60 to i64
  %62 = load float*, float** %4, align 8
  %63 = icmp eq float* %62, %60
  br i1 %63, label %236, label %64

64:                                               ; preds = %48
  %65 = getelementptr float, float* %62, i64 -1
  %66 = ptrtoint float* %65 to i64
  %67 = sub i64 %66, %61
  %68 = lshr i64 %67, 2
  %69 = add nuw nsw i64 %68, 1
  %70 = icmp ult i64 %69, 8
  br i1 %70, label %163, label %71

71:                                               ; preds = %64
  %72 = getelementptr float, float* %62, i64 -1
  %73 = ptrtoint float* %72 to i64
  %74 = sub i64 %73, %61
  %75 = lshr i64 %74, 2
  %76 = xor i64 %75, -1
  %77 = add nsw i64 %10, %76
  %78 = getelementptr float, float* %50, i64 %77
  %79 = xor i64 %75, -1
  %80 = getelementptr float, float* %62, i64 %79
  %81 = icmp ult float* %78, %62
  %82 = icmp ult float* %80, %51
  %83 = and i1 %81, %82
  br i1 %83, label %163, label %84

84:                                               ; preds = %71
  %85 = and i64 %69, 9223372036854775800
  %86 = sub nsw i64 0, %85
  %87 = getelementptr float, float* %51, i64 %86
  %88 = sub nsw i64 0, %85
  %89 = getelementptr float, float* %62, i64 %88
  %90 = add nsw i64 %85, -8
  %91 = lshr exact i64 %90, 3
  %92 = add nuw nsw i64 %91, 1
  %93 = and i64 %92, 1
  %94 = icmp eq i64 %90, 0
  br i1 %94, label %141, label %95

95:                                               ; preds = %84
  %96 = sub nuw nsw i64 %92, %93
  %97 = getelementptr float, float* %51, i64 -1
  %98 = getelementptr float, float* %62, i64 -1
  %99 = getelementptr float, float* %51, i64 -1
  %100 = getelementptr float, float* %62, i64 -1
  br label %101

101:                                              ; preds = %101, %95
  %102 = phi i64 [ 0, %95 ], [ %136, %101 ]
  %103 = phi i64 [ %96, %95 ], [ %137, %101 ]
  %104 = sub i64 0, %102
  %105 = sub i64 0, %102
  %106 = getelementptr inbounds float, float* %97, i64 %104
  %107 = getelementptr inbounds float, float* %98, i64 %105
  %108 = getelementptr inbounds float, float* %107, i64 -3
  %109 = bitcast float* %108 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !12
  %111 = getelementptr inbounds float, float* %107, i64 -4
  %112 = getelementptr inbounds float, float* %111, i64 -3
  %113 = bitcast float* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4, !alias.scope !12
  %115 = getelementptr inbounds float, float* %106, i64 -3
  %116 = bitcast float* %115 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %116, align 4, !alias.scope !15, !noalias !12
  %117 = getelementptr inbounds float, float* %106, i64 -4
  %118 = getelementptr inbounds float, float* %117, i64 -3
  %119 = bitcast float* %118 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %119, align 4, !alias.scope !15, !noalias !12
  %120 = sub nuw nsw i64 -8, %102
  %121 = sub nuw nsw i64 -8, %102
  %122 = getelementptr inbounds float, float* %99, i64 %120
  %123 = getelementptr inbounds float, float* %100, i64 %121
  %124 = getelementptr inbounds float, float* %123, i64 -3
  %125 = bitcast float* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !12
  %127 = getelementptr inbounds float, float* %123, i64 -4
  %128 = getelementptr inbounds float, float* %127, i64 -3
  %129 = bitcast float* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4, !alias.scope !12
  %131 = getelementptr inbounds float, float* %122, i64 -3
  %132 = bitcast float* %131 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %132, align 4, !alias.scope !15, !noalias !12
  %133 = getelementptr inbounds float, float* %122, i64 -4
  %134 = getelementptr inbounds float, float* %133, i64 -3
  %135 = bitcast float* %134 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %135, align 4, !alias.scope !15, !noalias !12
  %136 = add i64 %102, 16
  %137 = add i64 %103, -2
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %101, !llvm.loop !17

139:                                              ; preds = %101
  %140 = sub nuw nsw i64 -16, %102
  br label %141

141:                                              ; preds = %139, %84
  %142 = phi i64 [ 0, %84 ], [ %140, %139 ]
  %143 = icmp eq i64 %93, 0
  br i1 %143, label %161, label %144

144:                                              ; preds = %141
  %145 = getelementptr float, float* %51, i64 -1
  %146 = getelementptr float, float* %62, i64 -1
  %147 = getelementptr inbounds float, float* %145, i64 %142
  %148 = getelementptr inbounds float, float* %146, i64 %142
  %149 = getelementptr inbounds float, float* %148, i64 -3
  %150 = bitcast float* %149 to <4 x i32>*
  %151 = load <4 x i32>, <4 x i32>* %150, align 4, !alias.scope !12
  %152 = getelementptr inbounds float, float* %148, i64 -4
  %153 = getelementptr inbounds float, float* %152, i64 -3
  %154 = bitcast float* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4, !alias.scope !12
  %156 = getelementptr inbounds float, float* %147, i64 -3
  %157 = bitcast float* %156 to <4 x i32>*
  store <4 x i32> %151, <4 x i32>* %157, align 4, !alias.scope !15, !noalias !12
  %158 = getelementptr inbounds float, float* %147, i64 -4
  %159 = getelementptr inbounds float, float* %158, i64 -3
  %160 = bitcast float* %159 to <4 x i32>*
  store <4 x i32> %155, <4 x i32>* %160, align 4, !alias.scope !15, !noalias !12
  br label %161

161:                                              ; preds = %141, %144
  %162 = icmp eq i64 %69, %85
  br i1 %162, label %233, label %163

163:                                              ; preds = %161, %71, %64
  %164 = phi float* [ %51, %71 ], [ %51, %64 ], [ %87, %161 ]
  %165 = phi float* [ %62, %71 ], [ %62, %64 ], [ %89, %161 ]
  %166 = getelementptr float, float* %165, i64 -1
  %167 = ptrtoint float* %166 to i64
  %168 = sub i64 %167, %61
  %169 = lshr i64 %168, 2
  %170 = add nuw nsw i64 %169, 1
  %171 = and i64 %170, 7
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %184, label %173

173:                                              ; preds = %163, %173
  %174 = phi float* [ %177, %173 ], [ %164, %163 ]
  %175 = phi float* [ %178, %173 ], [ %165, %163 ]
  %176 = phi i64 [ %182, %173 ], [ %171, %163 ]
  %177 = getelementptr inbounds float, float* %174, i64 -1
  %178 = getelementptr inbounds float, float* %175, i64 -1
  %179 = bitcast float* %178 to i32*
  %180 = load i32, i32* %179, align 4
  %181 = bitcast float* %177 to i32*
  store i32 %180, i32* %181, align 4
  %182 = add i64 %176, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %173, !llvm.loop !19

184:                                              ; preds = %173, %163
  %185 = phi float* [ undef, %163 ], [ %177, %173 ]
  %186 = phi float* [ %164, %163 ], [ %177, %173 ]
  %187 = phi float* [ %165, %163 ], [ %178, %173 ]
  %188 = icmp ult i64 %168, 28
  br i1 %188, label %233, label %189

189:                                              ; preds = %184, %189
  %190 = phi float* [ %227, %189 ], [ %186, %184 ]
  %191 = phi float* [ %228, %189 ], [ %187, %184 ]
  %192 = getelementptr inbounds float, float* %190, i64 -1
  %193 = getelementptr inbounds float, float* %191, i64 -1
  %194 = bitcast float* %193 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = bitcast float* %192 to i32*
  store i32 %195, i32* %196, align 4
  %197 = getelementptr inbounds float, float* %190, i64 -2
  %198 = getelementptr inbounds float, float* %191, i64 -2
  %199 = bitcast float* %198 to i32*
  %200 = load i32, i32* %199, align 4
  %201 = bitcast float* %197 to i32*
  store i32 %200, i32* %201, align 4
  %202 = getelementptr inbounds float, float* %190, i64 -3
  %203 = getelementptr inbounds float, float* %191, i64 -3
  %204 = bitcast float* %203 to i32*
  %205 = load i32, i32* %204, align 4
  %206 = bitcast float* %202 to i32*
  store i32 %205, i32* %206, align 4
  %207 = getelementptr inbounds float, float* %190, i64 -4
  %208 = getelementptr inbounds float, float* %191, i64 -4
  %209 = bitcast float* %208 to i32*
  %210 = load i32, i32* %209, align 4
  %211 = bitcast float* %207 to i32*
  store i32 %210, i32* %211, align 4
  %212 = getelementptr inbounds float, float* %190, i64 -5
  %213 = getelementptr inbounds float, float* %191, i64 -5
  %214 = bitcast float* %213 to i32*
  %215 = load i32, i32* %214, align 4
  %216 = bitcast float* %212 to i32*
  store i32 %215, i32* %216, align 4
  %217 = getelementptr inbounds float, float* %190, i64 -6
  %218 = getelementptr inbounds float, float* %191, i64 -6
  %219 = bitcast float* %218 to i32*
  %220 = load i32, i32* %219, align 4
  %221 = bitcast float* %217 to i32*
  store i32 %220, i32* %221, align 4
  %222 = getelementptr inbounds float, float* %190, i64 -7
  %223 = getelementptr inbounds float, float* %191, i64 -7
  %224 = bitcast float* %223 to i32*
  %225 = load i32, i32* %224, align 4
  %226 = bitcast float* %222 to i32*
  store i32 %225, i32* %226, align 4
  %227 = getelementptr inbounds float, float* %190, i64 -8
  %228 = getelementptr inbounds float, float* %191, i64 -8
  %229 = bitcast float* %228 to i32*
  %230 = load i32, i32* %229, align 4
  %231 = bitcast float* %227 to i32*
  store i32 %230, i32* %231, align 4
  %232 = icmp eq float* %228, %60
  br i1 %232, label %233, label %189, !llvm.loop !21

233:                                              ; preds = %184, %189, %161
  %234 = phi float* [ %87, %161 ], [ %185, %184 ], [ %227, %189 ]
  %235 = load i64, i64* %7, align 8
  br label %236

236:                                              ; preds = %48, %233
  %237 = phi float* [ %234, %233 ], [ %51, %48 ]
  %238 = phi i64 [ %235, %233 ], [ %61, %48 ]
  %239 = ptrtoint float* %237 to i64
  store i64 %239, i64* %7, align 8
  store i64 %58, i64* %5, align 8
  store i64 %53, i64* %17, align 8
  %240 = icmp eq i64 %238, 0
  br i1 %240, label %253, label %241

241:                                              ; preds = %236
  %242 = inttoptr i64 %238 to float*
  %243 = getelementptr inbounds %"class.base::StackAllocator", %"class.base::StackAllocator"* %3, i64 0, i32 0
  %244 = load %"struct.base::StackAllocator<float, 64>::Source"*, %"struct.base::StackAllocator<float, 64>::Source"** %243, align 8
  %245 = icmp ne %"struct.base::StackAllocator<float, 64>::Source"* %244, null
  %246 = bitcast %"struct.base::StackAllocator<float, 64>::Source"* %244 to float*
  %247 = icmp eq float* %242, %246
  %248 = and i1 %245, %247
  br i1 %248, label %249, label %251

249:                                              ; preds = %241
  %250 = getelementptr inbounds %"struct.base::StackAllocator<float, 64>::Source", %"struct.base::StackAllocator<float, 64>::Source"* %244, i64 0, i32 1
  store i8 0, i8* %250, align 4
  br label %253

251:                                              ; preds = %241
  %252 = inttoptr i64 %238 to i8*
  tail call void @_ZdlPv(i8* %252) #12
  br label %253

253:                                              ; preds = %236, %249, %251
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIsN4base14StackAllocatorIsLm64EEEE21__push_back_slow_pathIRKsEEvOT_(%"class.std::__1::vector.36"*, i16* dereferenceable(2)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %0, i64 0, i32 0, i32 2, i32 1, i32 0
  %4 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %0, i64 0, i32 0, i32 1
  %5 = bitcast i16** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.36"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 1
  %11 = add nsw i64 %10, 1
  %12 = icmp slt i64 %11, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = bitcast %"class.std::__1::vector.36"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %14) #13
  unreachable

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast i16** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %8
  %20 = ashr exact i64 %19, 1
  %21 = icmp ult i64 %20, 4611686018427387903
  %22 = icmp ult i64 %19, %11
  %23 = select i1 %22, i64 %11, i64 %19
  %24 = select i1 %21, i64 %23, i64 9223372036854775807
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %46, label %26

26:                                               ; preds = %15
  %27 = getelementptr inbounds %"class.base::StackAllocator.35", %"class.base::StackAllocator.35"* %3, i64 0, i32 0
  %28 = load %"struct.base::StackAllocator<short, 64>::Source"*, %"struct.base::StackAllocator<short, 64>::Source"** %27, align 8
  %29 = icmp eq %"struct.base::StackAllocator<short, 64>::Source"* %28, null
  br i1 %29, label %39, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"struct.base::StackAllocator<short, 64>::Source", %"struct.base::StackAllocator<short, 64>::Source"* %28, i64 0, i32 1
  %32 = load i8, i8* %31, align 2, !range !11
  %33 = icmp eq i8 %32, 0
  %34 = icmp ult i64 %24, 65
  %35 = and i1 %34, %33
  br i1 %35, label %36, label %39

36:                                               ; preds = %30
  store i8 1, i8* %31, align 2
  %37 = bitcast %"class.base::StackAllocator.35"* %3 to i16**
  %38 = load i16*, i16** %37, align 8
  br label %46

39:                                               ; preds = %30, %26
  %40 = icmp slt i64 %24, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %39
  tail call void @abort() #13
  unreachable

42:                                               ; preds = %39
  %43 = shl i64 %24, 1
  %44 = tail call i8* @_Znwm(i64 %43) #12
  %45 = bitcast i8* %44 to i16*
  br label %46

46:                                               ; preds = %15, %36, %42
  %47 = phi i16* [ null, %15 ], [ %38, %36 ], [ %45, %42 ]
  %48 = getelementptr inbounds i16, i16* %47, i64 %10
  %49 = getelementptr inbounds i16, i16* %47, i64 %24
  %50 = ptrtoint i16* %49 to i64
  %51 = load i16, i16* %1, align 2
  store i16 %51, i16* %48, align 2
  %52 = getelementptr inbounds i16, i16* %48, i64 1
  %53 = ptrtoint i16* %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %0, i64 0, i32 0, i32 0
  %55 = load i16*, i16** %54, align 8
  %56 = ptrtoint i16* %55 to i64
  %57 = load i16*, i16** %4, align 8
  %58 = icmp eq i16* %57, %55
  br i1 %58, label %213, label %59

59:                                               ; preds = %46
  %60 = getelementptr i16, i16* %57, i64 -1
  %61 = ptrtoint i16* %60 to i64
  %62 = sub i64 %61, %56
  %63 = lshr i64 %62, 1
  %64 = add nuw i64 %63, 1
  %65 = icmp ult i64 %64, 16
  br i1 %65, label %158, label %66

66:                                               ; preds = %59
  %67 = getelementptr i16, i16* %57, i64 -1
  %68 = ptrtoint i16* %67 to i64
  %69 = sub i64 %68, %56
  %70 = lshr i64 %69, 1
  %71 = xor i64 %70, -1
  %72 = add i64 %10, %71
  %73 = getelementptr i16, i16* %47, i64 %72
  %74 = xor i64 %70, -1
  %75 = getelementptr i16, i16* %57, i64 %74
  %76 = icmp ult i16* %73, %57
  %77 = icmp ult i16* %75, %48
  %78 = and i1 %76, %77
  br i1 %78, label %158, label %79

79:                                               ; preds = %66
  %80 = and i64 %64, -16
  %81 = sub i64 0, %80
  %82 = getelementptr i16, i16* %48, i64 %81
  %83 = sub i64 0, %80
  %84 = getelementptr i16, i16* %57, i64 %83
  %85 = add i64 %80, -16
  %86 = lshr exact i64 %85, 4
  %87 = add nuw nsw i64 %86, 1
  %88 = and i64 %87, 1
  %89 = icmp eq i64 %85, 0
  br i1 %89, label %136, label %90

90:                                               ; preds = %79
  %91 = sub nuw nsw i64 %87, %88
  %92 = getelementptr i16, i16* %48, i64 -1
  %93 = getelementptr i16, i16* %57, i64 -1
  %94 = getelementptr i16, i16* %48, i64 -1
  %95 = getelementptr i16, i16* %57, i64 -1
  br label %96

96:                                               ; preds = %96, %90
  %97 = phi i64 [ 0, %90 ], [ %131, %96 ]
  %98 = phi i64 [ %91, %90 ], [ %132, %96 ]
  %99 = sub i64 0, %97
  %100 = sub i64 0, %97
  %101 = getelementptr inbounds i16, i16* %92, i64 %99
  %102 = getelementptr inbounds i16, i16* %93, i64 %100
  %103 = getelementptr inbounds i16, i16* %102, i64 -7
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !22
  %106 = getelementptr inbounds i16, i16* %102, i64 -8
  %107 = getelementptr inbounds i16, i16* %106, i64 -7
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2, !alias.scope !22
  %110 = getelementptr inbounds i16, i16* %101, i64 -7
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %111, align 2, !alias.scope !25, !noalias !22
  %112 = getelementptr inbounds i16, i16* %101, i64 -8
  %113 = getelementptr inbounds i16, i16* %112, i64 -7
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %114, align 2, !alias.scope !25, !noalias !22
  %115 = sub nuw nsw i64 -16, %97
  %116 = sub nuw nsw i64 -16, %97
  %117 = getelementptr inbounds i16, i16* %94, i64 %115
  %118 = getelementptr inbounds i16, i16* %95, i64 %116
  %119 = getelementptr inbounds i16, i16* %118, i64 -7
  %120 = bitcast i16* %119 to <8 x i16>*
  %121 = load <8 x i16>, <8 x i16>* %120, align 2, !alias.scope !22
  %122 = getelementptr inbounds i16, i16* %118, i64 -8
  %123 = getelementptr inbounds i16, i16* %122, i64 -7
  %124 = bitcast i16* %123 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 2, !alias.scope !22
  %126 = getelementptr inbounds i16, i16* %117, i64 -7
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %127, align 2, !alias.scope !25, !noalias !22
  %128 = getelementptr inbounds i16, i16* %117, i64 -8
  %129 = getelementptr inbounds i16, i16* %128, i64 -7
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %130, align 2, !alias.scope !25, !noalias !22
  %131 = add i64 %97, 32
  %132 = add i64 %98, -2
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %96, !llvm.loop !27

134:                                              ; preds = %96
  %135 = sub nuw nsw i64 -32, %97
  br label %136

136:                                              ; preds = %134, %79
  %137 = phi i64 [ 0, %79 ], [ %135, %134 ]
  %138 = icmp eq i64 %88, 0
  br i1 %138, label %156, label %139

139:                                              ; preds = %136
  %140 = getelementptr i16, i16* %48, i64 -1
  %141 = getelementptr i16, i16* %57, i64 -1
  %142 = getelementptr inbounds i16, i16* %140, i64 %137
  %143 = getelementptr inbounds i16, i16* %141, i64 %137
  %144 = getelementptr inbounds i16, i16* %143, i64 -7
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 2, !alias.scope !22
  %147 = getelementptr inbounds i16, i16* %143, i64 -8
  %148 = getelementptr inbounds i16, i16* %147, i64 -7
  %149 = bitcast i16* %148 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2, !alias.scope !22
  %151 = getelementptr inbounds i16, i16* %142, i64 -7
  %152 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %152, align 2, !alias.scope !25, !noalias !22
  %153 = getelementptr inbounds i16, i16* %142, i64 -8
  %154 = getelementptr inbounds i16, i16* %153, i64 -7
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %150, <8 x i16>* %155, align 2, !alias.scope !25, !noalias !22
  br label %156

156:                                              ; preds = %136, %139
  %157 = icmp eq i64 %64, %80
  br i1 %157, label %210, label %158

158:                                              ; preds = %156, %66, %59
  %159 = phi i16* [ %48, %66 ], [ %48, %59 ], [ %82, %156 ]
  %160 = phi i16* [ %57, %66 ], [ %57, %59 ], [ %84, %156 ]
  %161 = getelementptr i16, i16* %160, i64 -1
  %162 = ptrtoint i16* %161 to i64
  %163 = sub i64 %162, %56
  %164 = lshr i64 %163, 1
  %165 = add nuw i64 %164, 1
  %166 = and i64 %165, 7
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %177, label %168

168:                                              ; preds = %158, %168
  %169 = phi i16* [ %172, %168 ], [ %159, %158 ]
  %170 = phi i16* [ %173, %168 ], [ %160, %158 ]
  %171 = phi i64 [ %175, %168 ], [ %166, %158 ]
  %172 = getelementptr inbounds i16, i16* %169, i64 -1
  %173 = getelementptr inbounds i16, i16* %170, i64 -1
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = add i64 %171, -1
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %177, label %168, !llvm.loop !28

177:                                              ; preds = %168, %158
  %178 = phi i16* [ undef, %158 ], [ %172, %168 ]
  %179 = phi i16* [ %159, %158 ], [ %172, %168 ]
  %180 = phi i16* [ %160, %158 ], [ %173, %168 ]
  %181 = icmp ult i64 %163, 14
  br i1 %181, label %210, label %182

182:                                              ; preds = %177, %182
  %183 = phi i16* [ %206, %182 ], [ %179, %177 ]
  %184 = phi i16* [ %207, %182 ], [ %180, %177 ]
  %185 = getelementptr inbounds i16, i16* %183, i64 -1
  %186 = getelementptr inbounds i16, i16* %184, i64 -1
  %187 = load i16, i16* %186, align 2
  store i16 %187, i16* %185, align 2
  %188 = getelementptr inbounds i16, i16* %183, i64 -2
  %189 = getelementptr inbounds i16, i16* %184, i64 -2
  %190 = load i16, i16* %189, align 2
  store i16 %190, i16* %188, align 2
  %191 = getelementptr inbounds i16, i16* %183, i64 -3
  %192 = getelementptr inbounds i16, i16* %184, i64 -3
  %193 = load i16, i16* %192, align 2
  store i16 %193, i16* %191, align 2
  %194 = getelementptr inbounds i16, i16* %183, i64 -4
  %195 = getelementptr inbounds i16, i16* %184, i64 -4
  %196 = load i16, i16* %195, align 2
  store i16 %196, i16* %194, align 2
  %197 = getelementptr inbounds i16, i16* %183, i64 -5
  %198 = getelementptr inbounds i16, i16* %184, i64 -5
  %199 = load i16, i16* %198, align 2
  store i16 %199, i16* %197, align 2
  %200 = getelementptr inbounds i16, i16* %183, i64 -6
  %201 = getelementptr inbounds i16, i16* %184, i64 -6
  %202 = load i16, i16* %201, align 2
  store i16 %202, i16* %200, align 2
  %203 = getelementptr inbounds i16, i16* %183, i64 -7
  %204 = getelementptr inbounds i16, i16* %184, i64 -7
  %205 = load i16, i16* %204, align 2
  store i16 %205, i16* %203, align 2
  %206 = getelementptr inbounds i16, i16* %183, i64 -8
  %207 = getelementptr inbounds i16, i16* %184, i64 -8
  %208 = load i16, i16* %207, align 2
  store i16 %208, i16* %206, align 2
  %209 = icmp eq i16* %207, %55
  br i1 %209, label %210, label %182, !llvm.loop !29

210:                                              ; preds = %177, %182, %156
  %211 = phi i16* [ %82, %156 ], [ %178, %177 ], [ %206, %182 ]
  %212 = load i64, i64* %7, align 8
  br label %213

213:                                              ; preds = %46, %210
  %214 = phi i16* [ %211, %210 ], [ %48, %46 ]
  %215 = phi i64 [ %212, %210 ], [ %56, %46 ]
  %216 = ptrtoint i16* %214 to i64
  store i64 %216, i64* %7, align 8
  store i64 %53, i64* %5, align 8
  store i64 %50, i64* %17, align 8
  %217 = icmp eq i64 %215, 0
  br i1 %217, label %230, label %218

218:                                              ; preds = %213
  %219 = inttoptr i64 %215 to i16*
  %220 = getelementptr inbounds %"class.base::StackAllocator.35", %"class.base::StackAllocator.35"* %3, i64 0, i32 0
  %221 = load %"struct.base::StackAllocator<short, 64>::Source"*, %"struct.base::StackAllocator<short, 64>::Source"** %220, align 8
  %222 = icmp ne %"struct.base::StackAllocator<short, 64>::Source"* %221, null
  %223 = bitcast %"struct.base::StackAllocator<short, 64>::Source"* %221 to i16*
  %224 = icmp eq i16* %219, %223
  %225 = and i1 %222, %224
  br i1 %225, label %226, label %228

226:                                              ; preds = %218
  %227 = getelementptr inbounds %"struct.base::StackAllocator<short, 64>::Source", %"struct.base::StackAllocator<short, 64>::Source"* %221, i64 0, i32 1
  store i8 0, i8* %227, align 2
  br label %230

228:                                              ; preds = %218
  %229 = inttoptr i64 %215 to i8*
  tail call void @_ZdlPv(i8* %229) #12
  br label %230

230:                                              ; preds = %213, %226, %228
  ret void
}

declare zeroext i1 @_Z25SkColorTypeIsAlwaysOpaque11SkColorType(i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4skia19ConvolutionFilter1DD1Ev(%"class.skia::ConvolutionFilter1D"*) unnamed_addr #4

declare void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8*, i8*, i64) local_unnamed_addr #3

declare i32 @_ZN4base14PlatformThread9CurrentIdEv() local_unnamed_addr #3

declare i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() local_unnamed_addr #3

declare i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext, i8*, i8*, i8*, i64, i64, i32, %"class.base::TimeTicks"* dereferenceable(8), %"class.base::trace_event::TraceArguments"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"*) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4, !6}
!4 = distinct !{!4, !5, !"_ZN11SkImageInfo4MakeE7SkISizeRK11SkColorInfo: argument 0"}
!5 = distinct !{!5, !"_ZN11SkImageInfo4MakeE7SkISizeRK11SkColorInfo"}
!6 = distinct !{!6, !7, !"_ZNK11SkImageInfo6makeWHEii: argument 0"}
!7 = distinct !{!7, !"_ZNK11SkImageInfo6makeWHEii"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN4skia15ImageOperations6ResizeERK8SkBitmapNS0_12ResizeMethodEiiRK7SkIRectPNS1_9AllocatorE: argument 0"}
!10 = distinct !{!10, !"_ZN4skia15ImageOperations6ResizeERK8SkBitmapNS0_12ResizeMethodEiiRK7SkIRectPNS1_9AllocatorE"}
!11 = !{i8 0, i8 2}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.isvectorized", i32 1}
!19 = distinct !{!19, !20}
!20 = !{!"llvm.loop.unroll.disable"}
!21 = distinct !{!21, !18}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !18}
!28 = distinct !{!28, !20}
!29 = distinct !{!29, !18}
