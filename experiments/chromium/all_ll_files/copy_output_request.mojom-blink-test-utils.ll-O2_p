; ModuleID = 'gen/services/viz/public/mojom/compositing/copy_output_request.mojom-blink-test-utils.cc'
source_filename = "gen/services/viz/public/mojom/compositing/copy_output_request.mojom-blink-test-utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::mojom::blink::CopyOutputResultSenderAsyncWaiter" = type { %"class.viz::mojom::blink::CopyOutputResultSender"* }
%"class.viz::mojom::blink::CopyOutputResultSender" = type { i32 (...)** }
%"class.viz::mojom::blink::CopyOutputResultSenderInterceptorForTesting" = type { %"class.viz::mojom::blink::CopyOutputResultSender" }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.viz::mojom::blink::CopyOutputResult"* }
%"class.viz::mojom::blink::CopyOutputResult" = type { i32, %"class.gfx::Rect", %"class.mojo::StructPtr.0", %"class.absl::optional", %"class.absl::optional.11", %"class.absl::optional.16", %"class.mojo::PendingRemote" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.mojo::StructPtr.0" = type { %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.viz::mojom::blink::BitmapInSharedMemory"* }
%"class.viz::mojom::blink::BitmapInSharedMemory" = type { %struct.SkImageInfo, i64, %"class.base::WritableSharedMemoryRegion" }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.5" }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i8 }
%struct.SkISize = type { i32, i32 }
%"class.base::WritableSharedMemoryRegion" = type { %"class.base::subtle::PlatformSharedMemoryRegion" }
%"class.base::subtle::PlatformSharedMemoryRegion" = type { %"struct.base::subtle::ScopedFDPair", i32, i64, %"class.base::UnguessableToken" }
%"struct.base::subtle::ScopedFDPair" = type { %"class.base::ScopedGeneric", %"class.base::ScopedGeneric" }
%"class.base::ScopedGeneric" = type <{ i32 (...)**, %"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data", i8, [3 x i8] }>
%"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data" = type { i32 }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.gpu::Mailbox" }
%"struct.gpu::Mailbox" = type { [16 x i8] }
%"class.absl::optional.11" = type { %"class.absl::optional_internal::optional_data.12" }
%"class.absl::optional_internal::optional_data.12" = type { %"class.absl::optional_internal::optional_data_base.13" }
%"class.absl::optional_internal::optional_data_base.13" = type { %"class.absl::optional_internal::optional_data_dtor_base.14" }
%"class.absl::optional_internal::optional_data_dtor_base.14" = type { i8, %union.anon.15 }
%union.anon.15 = type { %"struct.gpu::SyncToken" }
%"struct.gpu::SyncToken" = type { i8, i8, %"class.util::IdType", i64 }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i64 }
%"class.absl::optional.16" = type { %"class.absl::optional_internal::optional_data.17" }
%"class.absl::optional_internal::optional_data.17" = type { %"class.absl::optional_internal::optional_data_base.18" }
%"class.absl::optional_internal::optional_data_base.18" = type { %"class.absl::optional_internal::optional_data_dtor_base.19" }
%"class.absl::optional_internal::optional_data_dtor_base.19" = type { i8, %union.anon.20 }
%union.anon.20 = type { %"class.gfx::ColorSpace" }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.mojo::PendingRemote" = type { %"struct.mojo::internal::PendingRemoteState" }
%"struct.mojo::internal::PendingRemoteState" = type { %"class.mojo::ScopedHandleBase", i32 }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }

$_ZN3viz5mojom5blink22CopyOutputResultSenderD2Ev = comdat any

$_ZN3viz5mojom5blink43CopyOutputResultSenderInterceptorForTestingD0Ev = comdat any

@_ZTVN3viz5mojom5blink43CopyOutputResultSenderInterceptorForTestingE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::mojom::blink::CopyOutputResultSender"*)* @_ZN3viz5mojom5blink22CopyOutputResultSenderD2Ev to i8*), i8* bitcast (void (%"class.viz::mojom::blink::CopyOutputResultSenderInterceptorForTesting"*)* @_ZN3viz5mojom5blink43CopyOutputResultSenderInterceptorForTestingD0Ev to i8*), i8* bitcast (void (%"class.viz::mojom::blink::CopyOutputResultSenderInterceptorForTesting"*, %"class.mojo::StructPtr"*)* @_ZN3viz5mojom5blink43CopyOutputResultSenderInterceptorForTesting10SendResultEN4mojo9StructPtrINS1_16CopyOutputResultEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN3viz5mojom5blink33CopyOutputResultSenderAsyncWaiterC1EPNS1_22CopyOutputResultSenderE = hidden unnamed_addr alias void (%"class.viz::mojom::blink::CopyOutputResultSenderAsyncWaiter"*, %"class.viz::mojom::blink::CopyOutputResultSender"*), void (%"class.viz::mojom::blink::CopyOutputResultSenderAsyncWaiter"*, %"class.viz::mojom::blink::CopyOutputResultSender"*)* @_ZN3viz5mojom5blink33CopyOutputResultSenderAsyncWaiterC2EPNS1_22CopyOutputResultSenderE
@_ZN3viz5mojom5blink33CopyOutputResultSenderAsyncWaiterD1Ev = hidden unnamed_addr alias void (%"class.viz::mojom::blink::CopyOutputResultSenderAsyncWaiter"*), void (%"class.viz::mojom::blink::CopyOutputResultSenderAsyncWaiter"*)* @_ZN3viz5mojom5blink33CopyOutputResultSenderAsyncWaiterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz5mojom5blink43CopyOutputResultSenderInterceptorForTesting10SendResultEN4mojo9StructPtrINS1_16CopyOutputResultEEE(%"class.viz::mojom::blink::CopyOutputResultSenderInterceptorForTesting"*, %"class.mojo::StructPtr"* nocapture) unnamed_addr #0 align 2 {
  %3 = alloca %"class.mojo::StructPtr", align 8
  %4 = bitcast %"class.viz::mojom::blink::CopyOutputResultSenderInterceptorForTesting"* %0 to %"class.viz::mojom::blink::CopyOutputResultSender"* (%"class.viz::mojom::blink::CopyOutputResultSenderInterceptorForTesting"*)***
  %5 = load %"class.viz::mojom::blink::CopyOutputResultSender"* (%"class.viz::mojom::blink::CopyOutputResultSenderInterceptorForTesting"*)**, %"class.viz::mojom::blink::CopyOutputResultSender"* (%"class.viz::mojom::blink::CopyOutputResultSenderInterceptorForTesting"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.viz::mojom::blink::CopyOutputResultSender"* (%"class.viz::mojom::blink::CopyOutputResultSenderInterceptorForTesting"*)*, %"class.viz::mojom::blink::CopyOutputResultSender"* (%"class.viz::mojom::blink::CopyOutputResultSenderInterceptorForTesting"*)** %5, i64 3
  %7 = load %"class.viz::mojom::blink::CopyOutputResultSender"* (%"class.viz::mojom::blink::CopyOutputResultSenderInterceptorForTesting"*)*, %"class.viz::mojom::blink::CopyOutputResultSender"* (%"class.viz::mojom::blink::CopyOutputResultSenderInterceptorForTesting"*)** %6, align 8
  %8 = tail call %"class.viz::mojom::blink::CopyOutputResultSender"* %7(%"class.viz::mojom::blink::CopyOutputResultSenderInterceptorForTesting"* %0) #7
  %9 = bitcast %"class.mojo::StructPtr"* %3 to i64*
  %10 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = bitcast %"class.mojo::StructPtr"* %1 to i64*
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %9, align 8
  store i64 0, i64* %11, align 8
  %13 = bitcast %"class.viz::mojom::blink::CopyOutputResultSender"* %8 to void (%"class.viz::mojom::blink::CopyOutputResultSender"*, %"class.mojo::StructPtr"*)***
  %14 = load void (%"class.viz::mojom::blink::CopyOutputResultSender"*, %"class.mojo::StructPtr"*)**, void (%"class.viz::mojom::blink::CopyOutputResultSender"*, %"class.mojo::StructPtr"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.viz::mojom::blink::CopyOutputResultSender"*, %"class.mojo::StructPtr"*)*, void (%"class.viz::mojom::blink::CopyOutputResultSender"*, %"class.mojo::StructPtr"*)** %14, i64 2
  %16 = load void (%"class.viz::mojom::blink::CopyOutputResultSender"*, %"class.mojo::StructPtr"*)*, void (%"class.viz::mojom::blink::CopyOutputResultSender"*, %"class.mojo::StructPtr"*)** %15, align 8
  call void %16(%"class.viz::mojom::blink::CopyOutputResultSender"* %8, %"class.mojo::StructPtr"* nonnull %3) #7
  %17 = load %"class.viz::mojom::blink::CopyOutputResult"*, %"class.viz::mojom::blink::CopyOutputResult"** %10, align 8
  store %"class.viz::mojom::blink::CopyOutputResult"* null, %"class.viz::mojom::blink::CopyOutputResult"** %10, align 8
  %18 = icmp eq %"class.viz::mojom::blink::CopyOutputResult"* %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %2
  call void @_ZN3viz5mojom5blink16CopyOutputResultD1Ev(%"class.viz::mojom::blink::CopyOutputResult"* nonnull %17) #7
  %20 = bitcast %"class.viz::mojom::blink::CopyOutputResult"* %17 to i8*
  call void @_ZdlPv(i8* %20) #8
  br label %21

21:                                               ; preds = %2, %19
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3viz5mojom5blink33CopyOutputResultSenderAsyncWaiterC2EPNS1_22CopyOutputResultSenderE(%"class.viz::mojom::blink::CopyOutputResultSenderAsyncWaiter"* nocapture, %"class.viz::mojom::blink::CopyOutputResultSender"*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.viz::mojom::blink::CopyOutputResultSenderAsyncWaiter", %"class.viz::mojom::blink::CopyOutputResultSenderAsyncWaiter"* %0, i64 0, i32 0
  store %"class.viz::mojom::blink::CopyOutputResultSender"* %1, %"class.viz::mojom::blink::CopyOutputResultSender"** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3viz5mojom5blink33CopyOutputResultSenderAsyncWaiterD2Ev(%"class.viz::mojom::blink::CopyOutputResultSenderAsyncWaiter"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3viz5mojom5blink22CopyOutputResultSenderD2Ev(%"class.viz::mojom::blink::CopyOutputResultSender"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3viz5mojom5blink43CopyOutputResultSenderInterceptorForTestingD0Ev(%"class.viz::mojom::blink::CopyOutputResultSenderInterceptorForTesting"*) unnamed_addr #3 comdat align 2 {
  tail call void @llvm.trap() #9
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind
declare void @_ZN3viz5mojom5blink16CopyOutputResultD1Ev(%"class.viz::mojom::blink::CopyOutputResult"*) unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
