; ModuleID = 'gen/third_party/blink/renderer/modules/webaudio/panner_options.cc'
source_filename = "gen/third_party/blink/renderer/modules/webaudio/panner_options.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::PannerOptions" = type { %"class.blink::AudioNodeOptions", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, double, double, double, %"class.WTF::String", double, float, float, float, %"class.WTF::String", float, float, float, double, double }
%"class.blink::AudioNodeOptions" = type { %"class.blink::IDLDictionaryBase", i8, i32, %"class.WTF::String", %"class.WTF::String" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.127", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.137", %"class.std::__1::unique_ptr.143", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.155", %"class.std::__1::unique_ptr.161", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.168", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.5", %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.17", %"class.std::__1::unique_ptr.23", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.40", %"class.std::__1::unique_ptr.47", %"class.std::__1::unique_ptr.47", %"class.std::__1::unique_ptr.54", %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.82", %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.112", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.32" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.32" = type { %"struct.std::__1::__atomic_base.33" }
%"struct.std::__1::__atomic_base.33" = type { %"struct.std::__1::__atomic_base.34" }
%"struct.std::__1::__atomic_base.34" = type { %"struct.std::__1::__cxx_atomic_impl.35" }
%"struct.std::__1::__cxx_atomic_impl.35" = type { %"struct.std::__1::__cxx_atomic_base_impl.36" }
%"struct.std::__1::__cxx_atomic_base_impl.36" = type { i64 }
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.blink::Worklist.43"* }
%"class.blink::Worklist.43" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.32" }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.blink::Worklist.50"* }
%"class.blink::Worklist.50" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.32" }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.blink::Worklist.57"* }
%"class.blink::Worklist.57" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.32" }
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.blink::Worklist.64"* }
%"class.blink::Worklist.64" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.32" }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.blink::Worklist.71"* }
%"class.blink::Worklist.71" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.32" }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.blink::Worklist.78"* }
%"class.blink::Worklist.78" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.32" }
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.blink::Worklist.85"* }
%"class.blink::Worklist.85" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.32" }
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.92", %"class.std::__1::__compressed_pair.99", %"class.std::__1::__compressed_pair.104", %"class.std::__1::__compressed_pair.106", [4 x i8] }>
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94", %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { i64 }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { float }
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.115", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.115" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.135" }
%"class.WTF::VectorBuffer.135" = type { %"class.WTF::VectorBufferBase.136" }
%"class.WTF::VectorBufferBase.136" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.143" = type { %"class.std::__1::__compressed_pair.144" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.149" }
%"class.std::__1::unique_ptr.149" = type { %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.43"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.50"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.57"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.64"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.71"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.172" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.167 }
%class.scoped_refptr.167 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.168" = type { %"struct.std::__1::__atomic_base.169" }
%"struct.std::__1::__atomic_base.169" = type { %"struct.std::__1::__cxx_atomic_impl.170" }
%"struct.std::__1::__cxx_atomic_impl.170" = type { %"struct.std::__1::__cxx_atomic_base_impl.171" }
%"struct.std::__1::__cxx_atomic_base_impl.171" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.v8::Value" = type { i8 }
%"class.v8::Object" = type { i8 }

@_ZTVN5blink13PannerOptionsE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::PannerOptions"*)* @_ZN5blink13PannerOptionsD2Ev to i8*), i8* bitcast (void (%"class.blink::PannerOptions"*)* @_ZN5blink13PannerOptionsD0Ev to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::PannerOptions"*, %"class.v8::Object"*, %"class.v8::Isolate"*)* @_ZNK5blink13PannerOptions8ToV8ImplEN2v85LocalINS1_6ObjectEEEPNS1_7IsolateE to i8*), i8* bitcast (void (%"class.blink::PannerOptions"*, %"class.blink::Visitor"*)* @_ZNK5blink13PannerOptions5TraceEPNS_7VisitorE to i8*)] }, align 8
@.str = private unnamed_addr constant [8 x i8] c"inverse\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"equalpower\00", align 1

@_ZN5blink13PannerOptionsC1Ev = hidden unnamed_addr alias void (%"class.blink::PannerOptions"*), void (%"class.blink::PannerOptions"*)* @_ZN5blink13PannerOptionsC2Ev
@_ZN5blink13PannerOptionsD1Ev = hidden unnamed_addr alias void (%"class.blink::PannerOptions"*), void (%"class.blink::PannerOptions"*)* @_ZN5blink13PannerOptionsD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13PannerOptionsC2Ev(%"class.blink::PannerOptions"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 0
  tail call void @_ZN5blink16AudioNodeOptionsC2Ev(%"class.blink::AudioNodeOptions"* %4) #6
  %5 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink13PannerOptionsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 2
  %8 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 4
  %10 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 5
  %11 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 6
  %12 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 7
  %13 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 8
  %14 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 9
  %15 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 10
  %16 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 11
  %17 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 12
  %18 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 16
  %19 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %19, align 8
  %20 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 21
  %21 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %20, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %21, align 8
  %22 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 13
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 12, i1 false)
  store i8 1, i8* %6, align 8
  %23 = bitcast double* %22 to <2 x double>*
  store <2 x double> <double 3.600000e+02, double 3.600000e+02>, <2 x double>* %23, align 8
  store i8 1, i8* %7, align 1
  %24 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 15
  store double 0.000000e+00, double* %24, align 8
  store i8 1, i8* %8, align 2
  %25 = bitcast %"class.WTF::String"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #6
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 7) #6
  %26 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %46, label %29

29:                                               ; preds = %1
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %46

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i33
  %38 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %37, i33 1) #6
  %39 = extractvalue { i33, i1 } %38, 1
  %40 = extractvalue { i33, i1 } %38, 0
  %41 = icmp slt i33 %40, 0
  %42 = or i1 %39, %41
  br i1 %42, label %43, label %44, !prof !2

43:                                               ; preds = %34
  call void @llvm.trap() #6
  unreachable

44:                                               ; preds = %34
  %45 = trunc i33 %40 to i32
  store i32 %45, i32* %35, align 4
  br label %46

46:                                               ; preds = %44, %29, %1
  %47 = ptrtoint %"class.WTF::StringImpl"* %27 to i64
  %48 = bitcast %"class.WTF::String"* %18 to i64*
  %49 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  store i64 %47, i64* %48, align 8
  %50 = icmp eq %"class.WTF::StringImpl"* %49, null
  br i1 %50, label %64, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 0
  %57 = load i32, i32* %56, align 4
  br i1 %55, label %58, label %60

58:                                               ; preds = %51
  %59 = add i32 %57, -1
  store i32 %59, i32* %56, align 4
  br label %60

60:                                               ; preds = %58, %51
  %61 = phi i32 [ %59, %58 ], [ %57, %51 ]
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %60
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %49) #6
  br label %64

64:                                               ; preds = %46, %60, %63
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %66, label %80, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %76
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %65) #6
  br label %80

80:                                               ; preds = %64, %76, %79
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #6
  %81 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 17
  store double 1.000000e+04, double* %81, align 8
  store i8 1, i8* %9, align 1
  %82 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 18
  store float 1.000000e+00, float* %82, align 8
  store i8 1, i8* %10, align 4
  %83 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 19
  store float 0.000000e+00, float* %83, align 4
  store i8 1, i8* %11, align 1
  %84 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 20
  store float 0.000000e+00, float* %84, align 8
  store i8 1, i8* %12, align 2
  %85 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %85) #6
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i64 10) #6
  %86 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %87 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %86, align 8
  %88 = icmp eq %"class.WTF::StringImpl"* %87, null
  br i1 %88, label %106, label %89

89:                                               ; preds = %80
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = load atomic i32, i32* %90 monotonic, align 4
  %92 = and i32 %91, 2
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %106

94:                                               ; preds = %89
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 0
  %96 = load i32, i32* %95, align 4
  %97 = zext i32 %96 to i33
  %98 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %97, i33 1) #6
  %99 = extractvalue { i33, i1 } %98, 1
  %100 = extractvalue { i33, i1 } %98, 0
  %101 = icmp slt i33 %100, 0
  %102 = or i1 %99, %101
  br i1 %102, label %103, label %104, !prof !2

103:                                              ; preds = %94
  call void @llvm.trap() #6
  unreachable

104:                                              ; preds = %94
  %105 = trunc i33 %100 to i32
  store i32 %105, i32* %95, align 4
  br label %106

106:                                              ; preds = %104, %89, %80
  %107 = ptrtoint %"class.WTF::StringImpl"* %87 to i64
  %108 = bitcast %"class.WTF::String"* %20 to i64*
  %109 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  store i64 %107, i64* %108, align 8
  %110 = icmp eq %"class.WTF::StringImpl"* %109, null
  br i1 %110, label %124, label %111

111:                                              ; preds = %106
  %112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %109, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = load atomic i32, i32* %112 monotonic, align 4
  %114 = and i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %109, i64 0, i32 0
  %117 = load i32, i32* %116, align 4
  br i1 %115, label %118, label %120

118:                                              ; preds = %111
  %119 = add i32 %117, -1
  store i32 %119, i32* %116, align 4
  br label %120

120:                                              ; preds = %118, %111
  %121 = phi i32 [ %119, %118 ], [ %117, %111 ]
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %124

123:                                              ; preds = %120
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %109) #6
  br label %124

124:                                              ; preds = %106, %120, %123
  %125 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %86, align 8
  %126 = icmp eq %"class.WTF::StringImpl"* %125, null
  br i1 %126, label %140, label %127

127:                                              ; preds = %124
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %129 = load atomic i32, i32* %128 monotonic, align 4
  %130 = and i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 0, i32 0
  %133 = load i32, i32* %132, align 4
  br i1 %131, label %134, label %136

134:                                              ; preds = %127
  %135 = add i32 %133, -1
  store i32 %135, i32* %132, align 4
  br label %136

136:                                              ; preds = %134, %127
  %137 = phi i32 [ %135, %134 ], [ %133, %127 ]
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %136
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %125) #6
  br label %140

140:                                              ; preds = %124, %136, %139
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %85) #6
  %141 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 22
  store float 0.000000e+00, float* %141, align 8
  store i8 1, i8* %13, align 1
  %142 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 23
  store float 0.000000e+00, float* %142, align 4
  store i8 1, i8* %14, align 8
  %143 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 24
  store float 0.000000e+00, float* %143, align 8
  store i8 1, i8* %15, align 1
  %144 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 25
  store i8 1, i8* %16, align 2
  %145 = bitcast double* %144 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %145, align 8
  store i8 1, i8* %17, align 1
  ret void
}

declare void @_ZN5blink16AudioNodeOptionsC2Ev(%"class.blink::AudioNodeOptions"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13PannerOptionsD2Ev(%"class.blink::PannerOptions"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink13PannerOptionsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 21, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  br i1 %10, label %13, label %15

13:                                               ; preds = %6
  %14 = add i32 %12, -1
  store i32 %14, i32* %11, align 4
  br label %15

15:                                               ; preds = %13, %6
  %16 = phi i32 [ %14, %13 ], [ %12, %6 ]
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #6
  br label %19

19:                                               ; preds = %1, %15, %18
  %20 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 16, i32 0, i32 0
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, align 8
  %22 = icmp eq %"class.WTF::StringImpl"* %21, null
  br i1 %22, label %36, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  br i1 %27, label %30, label %32

30:                                               ; preds = %23
  %31 = add i32 %29, -1
  store i32 %31, i32* %28, align 4
  br label %32

32:                                               ; preds = %30, %23
  %33 = phi i32 [ %31, %30 ], [ %29, %23 ]
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %32
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %21) #6
  br label %36

36:                                               ; preds = %19, %32, %35
  %37 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 0
  tail call void @_ZN5blink16AudioNodeOptionsD2Ev(%"class.blink::AudioNodeOptions"* %37) #6
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5blink16AudioNodeOptionsD2Ev(%"class.blink::AudioNodeOptions"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13PannerOptionsD0Ev(%"class.blink::PannerOptions"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink13PannerOptionsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 21, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  br i1 %10, label %13, label %15

13:                                               ; preds = %6
  %14 = add i32 %12, -1
  store i32 %14, i32* %11, align 4
  br label %15

15:                                               ; preds = %13, %6
  %16 = phi i32 [ %14, %13 ], [ %12, %6 ]
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #6
  br label %19

19:                                               ; preds = %18, %15, %1
  %20 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 16, i32 0, i32 0
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, align 8
  %22 = icmp eq %"class.WTF::StringImpl"* %21, null
  br i1 %22, label %36, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  br i1 %27, label %30, label %32

30:                                               ; preds = %23
  %31 = add i32 %29, -1
  store i32 %31, i32* %28, align 4
  br label %32

32:                                               ; preds = %30, %23
  %33 = phi i32 [ %31, %30 ], [ %29, %23 ]
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %32
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %21) #6
  br label %36

36:                                               ; preds = %19, %32, %35
  %37 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 0
  tail call void @_ZN5blink16AudioNodeOptionsD2Ev(%"class.blink::AudioNodeOptions"* %37) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink13PannerOptions5TraceEPNS_7VisitorE(%"class.blink::PannerOptions"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::PannerOptions", %"class.blink::PannerOptions"* %0, i64 0, i32 0
  tail call void @_ZNK5blink16AudioNodeOptions5TraceEPNS_7VisitorE(%"class.blink::AudioNodeOptions"* %3, %"class.blink::Visitor"* %1) #6
  ret void
}

declare void @_ZNK5blink16AudioNodeOptions5TraceEPNS_7VisitorE(%"class.blink::AudioNodeOptions"*, %"class.blink::Visitor"*) unnamed_addr #1

declare %"class.v8::Value"* @_ZNK5blink13PannerOptions8ToV8ImplEN2v85LocalINS1_6ObjectEEEPNS1_7IsolateE(%"class.blink::PannerOptions"*, %"class.v8::Object"*, %"class.v8::Isolate"*) unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
