; ModuleID = '../../net/http/http_byte_range.cc'
source_filename = "../../net/http/http_byte_range.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.net::HttpByteRange" = type <{ i64, i64, i64, i8, [7 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }

@.str = private unnamed_addr constant [11 x i8] c"bytes=-%ld\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"bytes=%ld-\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"bytes=%ld-%ld\00", align 1

@_ZN3net13HttpByteRangeC1Ev = hidden unnamed_addr alias void (%"class.net::HttpByteRange"*), void (%"class.net::HttpByteRange"*)* @_ZN3net13HttpByteRangeC2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net13HttpByteRangeC2Ev(%"class.net::HttpByteRange"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 3
  %3 = bitcast %"class.net::HttpByteRange"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 -1, i64 24, i1 false)
  store i8 0, i8* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net13HttpByteRange7BoundedEll(%"class.net::HttpByteRange"* noalias nocapture sret, i64, i64) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 3
  %7 = bitcast %"class.net::HttpByteRange"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 32, i1 false)
  %8 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 2
  store i64 -1, i64* %8, align 8
  store i8 0, i8* %6, align 8
  store i64 %1, i64* %4, align 8
  store i64 %2, i64* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net13HttpByteRange14RightUnboundedEl(%"class.net::HttpByteRange"* noalias nocapture sret, i64) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 3
  %5 = bitcast %"class.net::HttpByteRange"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 -86, i64 32, i1 false)
  %6 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 1
  %7 = bitcast i64* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -1, i64 16, i1 false) #5
  store i8 0, i8* %4, align 8
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net13HttpByteRange6SuffixEl(%"class.net::HttpByteRange"* noalias nocapture sret, i64) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 3
  %5 = bitcast %"class.net::HttpByteRange"* %0 to i8*
  %6 = bitcast %"class.net::HttpByteRange"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -86, i64 32, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 -1, i64 16, i1 false) #5
  store i8 0, i8* %4, align 8
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net13HttpByteRange17IsSuffixByteRangeEv(%"class.net::HttpByteRange"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp ne i64 %3, -1
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net13HttpByteRange20HasFirstBytePositionEv(%"class.net::HttpByteRange"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp ne i64 %3, -1
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net13HttpByteRange19HasLastBytePositionEv(%"class.net::HttpByteRange"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = icmp ne i64 %3, -1
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net13HttpByteRange7IsValidEv(%"class.net::HttpByteRange"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp sgt i64 %7, -1
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, -1
  %13 = icmp sge i64 %11, %7
  %14 = or i1 %12, %13
  ret i1 %14

15:                                               ; preds = %5, %1
  %16 = phi i1 [ true, %1 ], [ false, %5 ]
  ret i1 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3net13HttpByteRange14GetHeaderValueEv(%"class.std::__1::basic_string"* noalias sret, %"class.net::HttpByteRange"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %1, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, -1
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 %4) #5
  br label %15

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %1, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, -1
  %11 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %1, i64 0, i32 0
  %12 = load i64, i64* %11, align 8
  br i1 %10, label %13, label %14

13:                                               ; preds = %7
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i64 %12) #5
  br label %15

14:                                               ; preds = %7
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i64 %12, i64 %9) #5
  br label %15

15:                                               ; preds = %14, %13, %6
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net13HttpByteRange13ComputeBoundsEl(%"class.net::HttpByteRange"* nocapture, i64) local_unnamed_addr #1 align 2 {
  %3 = icmp slt i64 %1, 0
  br i1 %3, label %50, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %50

8:                                                ; preds = %4
  store i8 1, i8* %5, align 8
  %9 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, -1
  br i1 %11, label %12, label %22

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, -1
  br i1 %15, label %16, label %22

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, -1
  br i1 %19, label %20, label %22

20:                                               ; preds = %16
  store i64 0, i64* %9, align 8
  %21 = add nsw i64 %1, -1
  store i64 %21, i64* %13, align 8
  br label %50

22:                                               ; preds = %16, %12, %8
  %23 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 2
  %24 = load i64, i64* %23, align 8
  %25 = icmp sgt i64 %24, 0
  br i1 %25, label %36, label %26

26:                                               ; preds = %22
  %27 = icmp sgt i64 %10, -1
  br i1 %27, label %28, label %50

28:                                               ; preds = %26
  %29 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = icmp eq i64 %30, -1
  %32 = icmp sge i64 %30, %10
  %33 = or i1 %31, %32
  br i1 %33, label %34, label %50

34:                                               ; preds = %28
  %35 = icmp eq i64 %24, -1
  br i1 %35, label %42, label %36

36:                                               ; preds = %34, %22
  %37 = icmp slt i64 %24, %1
  %38 = select i1 %37, i64 %24, i64 %1
  %39 = sub nsw i64 %1, %38
  store i64 %39, i64* %9, align 8
  %40 = add nsw i64 %1, -1
  %41 = getelementptr inbounds %"class.net::HttpByteRange", %"class.net::HttpByteRange"* %0, i64 0, i32 1
  store i64 %40, i64* %41, align 8
  br label %50

42:                                               ; preds = %34
  %43 = icmp slt i64 %10, %1
  br i1 %43, label %44, label %50

44:                                               ; preds = %42
  %45 = add nsw i64 %1, -1
  br i1 %31, label %49, label %46

46:                                               ; preds = %44
  %47 = icmp slt i64 %30, %45
  %48 = select i1 %47, i64 %30, i64 %45
  store i64 %48, i64* %29, align 8
  br label %50

49:                                               ; preds = %44
  store i64 %45, i64* %29, align 8
  br label %50

50:                                               ; preds = %26, %42, %46, %49, %28, %4, %2, %36, %20
  %51 = phi i1 [ true, %36 ], [ true, %20 ], [ false, %2 ], [ false, %4 ], [ false, %28 ], [ true, %49 ], [ true, %46 ], [ false, %42 ], [ false, %26 ]
  ret i1 %51
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
