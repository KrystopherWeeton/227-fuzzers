; ModuleID = '../../components/viz/common/surfaces/scoped_surface_id_allocator.cc'
source_filename = "../../components/viz/common/surfaces/scoped_surface_id_allocator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::ScopedSurfaceIdAllocator" = type { %"class.viz::ParentLocalSurfaceIdAllocator"*, %"class.base::OnceCallback" }
%"class.viz::ParentLocalSurfaceIdAllocator" = type <{ %"class.viz::LocalSurfaceId", i8, i8, [6 x i8] }>
%"class.viz::LocalSurfaceId" = type { i32, i32, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@_ZN3viz24ScopedSurfaceIdAllocatorC1EN4base12OnceCallbackIFvvEEE = hidden unnamed_addr alias void (%"class.viz::ScopedSurfaceIdAllocator"*, %"class.base::OnceCallback"*), void (%"class.viz::ScopedSurfaceIdAllocator"*, %"class.base::OnceCallback"*)* @_ZN3viz24ScopedSurfaceIdAllocatorC2EN4base12OnceCallbackIFvvEEE
@_ZN3viz24ScopedSurfaceIdAllocatorC1EPNS_29ParentLocalSurfaceIdAllocatorEN4base12OnceCallbackIFvvEEE = hidden unnamed_addr alias void (%"class.viz::ScopedSurfaceIdAllocator"*, %"class.viz::ParentLocalSurfaceIdAllocator"*, %"class.base::OnceCallback"*), void (%"class.viz::ScopedSurfaceIdAllocator"*, %"class.viz::ParentLocalSurfaceIdAllocator"*, %"class.base::OnceCallback"*)* @_ZN3viz24ScopedSurfaceIdAllocatorC2EPNS_29ParentLocalSurfaceIdAllocatorEN4base12OnceCallbackIFvvEEE
@_ZN3viz24ScopedSurfaceIdAllocatorC1EOS0_ = hidden unnamed_addr alias void (%"class.viz::ScopedSurfaceIdAllocator"*, %"class.viz::ScopedSurfaceIdAllocator"*), void (%"class.viz::ScopedSurfaceIdAllocator"*, %"class.viz::ScopedSurfaceIdAllocator"*)* @_ZN3viz24ScopedSurfaceIdAllocatorC2EOS0_
@_ZN3viz24ScopedSurfaceIdAllocatorD1Ev = hidden unnamed_addr alias void (%"class.viz::ScopedSurfaceIdAllocator"*), void (%"class.viz::ScopedSurfaceIdAllocator"*)* @_ZN3viz24ScopedSurfaceIdAllocatorD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3viz24ScopedSurfaceIdAllocatorC2EN4base12OnceCallbackIFvvEEE(%"class.viz::ScopedSurfaceIdAllocator"* nocapture, %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::ScopedSurfaceIdAllocator", %"class.viz::ScopedSurfaceIdAllocator"* %0, i64 0, i32 0
  store %"class.viz::ParentLocalSurfaceIdAllocator"* null, %"class.viz::ParentLocalSurfaceIdAllocator"** %3, align 8
  %4 = getelementptr inbounds %"class.viz::ScopedSurfaceIdAllocator", %"class.viz::ScopedSurfaceIdAllocator"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %7, i64* %8, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %5, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3viz24ScopedSurfaceIdAllocatorC2EPNS_29ParentLocalSurfaceIdAllocatorEN4base12OnceCallbackIFvvEEE(%"class.viz::ScopedSurfaceIdAllocator"* nocapture, %"class.viz::ParentLocalSurfaceIdAllocator"*, %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.viz::ScopedSurfaceIdAllocator", %"class.viz::ScopedSurfaceIdAllocator"* %0, i64 0, i32 0
  store %"class.viz::ParentLocalSurfaceIdAllocator"* %1, %"class.viz::ParentLocalSurfaceIdAllocator"** %4, align 8
  %5 = getelementptr inbounds %"class.viz::ScopedSurfaceIdAllocator", %"class.viz::ScopedSurfaceIdAllocator"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %8, i64* %9, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %6, align 8
  %10 = getelementptr inbounds %"class.viz::ParentLocalSurfaceIdAllocator", %"class.viz::ParentLocalSurfaceIdAllocator"* %1, i64 0, i32 2
  store i8 1, i8* %10, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3viz24ScopedSurfaceIdAllocatorC2EOS0_(%"class.viz::ScopedSurfaceIdAllocator"* nocapture, %"class.viz::ScopedSurfaceIdAllocator"* nocapture dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.viz::ScopedSurfaceIdAllocator"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.viz::ScopedSurfaceIdAllocator"* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"class.viz::ScopedSurfaceIdAllocator", %"class.viz::ScopedSurfaceIdAllocator"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.viz::ScopedSurfaceIdAllocator", %"class.viz::ScopedSurfaceIdAllocator"* %1, i64 0, i32 1
  %8 = bitcast %"class.base::OnceCallback"* %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.base::OnceCallback"* %6 to i64*
  store i64 %9, i64* %10, align 8
  %11 = bitcast %"class.viz::ScopedSurfaceIdAllocator"* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.viz::ScopedSurfaceIdAllocator"* @_ZN3viz24ScopedSurfaceIdAllocatoraSEOS0_(%"class.viz::ScopedSurfaceIdAllocator"* returned, %"class.viz::ScopedSurfaceIdAllocator"* nocapture dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = alloca %"class.viz::ScopedSurfaceIdAllocator", align 8
  %6 = bitcast %"class.viz::ScopedSurfaceIdAllocator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #4
  %7 = getelementptr inbounds %"class.viz::ScopedSurfaceIdAllocator", %"class.viz::ScopedSurfaceIdAllocator"* %5, i64 0, i32 0
  %8 = bitcast %"class.viz::ScopedSurfaceIdAllocator"* %1 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.viz::ScopedSurfaceIdAllocator"* %5 to i64*
  %11 = getelementptr inbounds %"class.viz::ScopedSurfaceIdAllocator", %"class.viz::ScopedSurfaceIdAllocator"* %5, i64 0, i32 1
  %12 = getelementptr inbounds %"class.viz::ScopedSurfaceIdAllocator", %"class.viz::ScopedSurfaceIdAllocator"* %1, i64 0, i32 1
  %13 = bitcast %"class.base::OnceCallback"* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.base::OnceCallback"* %11 to i64*
  store i64 %14, i64* %15, align 8
  %16 = bitcast %"class.viz::ScopedSurfaceIdAllocator"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 16, i1 false) #4
  %17 = bitcast %"class.viz::ScopedSurfaceIdAllocator"* %0 to i64*
  %18 = load i64, i64* %17, align 8
  store i64 %9, i64* %17, align 8
  store i64 %18, i64* %10, align 8
  %19 = getelementptr inbounds %"class.viz::ScopedSurfaceIdAllocator", %"class.viz::ScopedSurfaceIdAllocator"* %0, i64 0, i32 1
  %20 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #4
  %21 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %19, i64 0, i32 0, i32 0, i32 0
  %22 = bitcast %"class.base::OnceCallback"* %19 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %"class.base::OnceCallback"* %3 to i64*
  store i64 %23, i64* %24, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %21, align 8
  %25 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %19, i64 0, i32 0
  %26 = getelementptr inbounds %"class.viz::ScopedSurfaceIdAllocator", %"class.viz::ScopedSurfaceIdAllocator"* %5, i64 0, i32 1, i32 0
  %27 = call dereferenceable(8) %"class.base::internal::CallbackBase"* @_ZN4base8internal12CallbackBaseaSEOS1_(%"class.base::internal::CallbackBase"* %25, %"class.base::internal::CallbackBase"* dereferenceable(8) %26) #4
  %28 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  %29 = call dereferenceable(8) %"class.base::internal::CallbackBase"* @_ZN4base8internal12CallbackBaseaSEOS1_(%"class.base::internal::CallbackBase"* %26, %"class.base::internal::CallbackBase"* nonnull dereferenceable(8) %28) #4
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %28) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #4
  %30 = load %"class.viz::ParentLocalSurfaceIdAllocator"*, %"class.viz::ParentLocalSurfaceIdAllocator"** %7, align 8
  %31 = icmp eq %"class.viz::ParentLocalSurfaceIdAllocator"* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %2
  %33 = getelementptr inbounds %"class.viz::ParentLocalSurfaceIdAllocator", %"class.viz::ParentLocalSurfaceIdAllocator"* %30, i64 0, i32 2
  store i8 0, i8* %33, align 1
  br label %34

34:                                               ; preds = %32, %2
  %35 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %11, i64 0, i32 0
  %36 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %11, i64 0, i32 0, i32 0, i32 0
  %37 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %36, align 8
  %38 = icmp eq %"class.base::internal::BindStateBase"* %37, null
  br i1 %38, label %47, label %39

39:                                               ; preds = %34
  %40 = ptrtoint %"class.base::internal::BindStateBase"* %37 to i64
  %41 = bitcast %"class.base::OnceCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #4
  %42 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %40, i64* %42, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %36, align 8
  %43 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  %44 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %37, i64 0, i32 1
  %45 = bitcast void ()** %44 to void (%"class.base::internal::BindStateBase"*)**
  %46 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %45, align 8
  call void %46(%"class.base::internal::BindStateBase"* nonnull %37) #4
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %43) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #4
  br label %47

47:                                               ; preds = %34, %39
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %35) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #4
  ret %"class.viz::ScopedSurfaceIdAllocator"* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz4swapERNS_24ScopedSurfaceIdAllocatorES1_(%"class.viz::ScopedSurfaceIdAllocator"* dereferenceable(16), %"class.viz::ScopedSurfaceIdAllocator"* dereferenceable(16)) local_unnamed_addr #1 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = bitcast %"class.viz::ScopedSurfaceIdAllocator"* %0 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.viz::ScopedSurfaceIdAllocator"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %4, align 8
  store i64 %5, i64* %6, align 8
  %8 = getelementptr inbounds %"class.viz::ScopedSurfaceIdAllocator", %"class.viz::ScopedSurfaceIdAllocator"* %0, i64 0, i32 1
  %9 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #4
  %10 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %8, i64 0, i32 0, i32 0, i32 0
  %11 = bitcast %"class.base::OnceCallback"* %8 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.base::OnceCallback"* %3 to i64*
  store i64 %12, i64* %13, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %10, align 8
  %14 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %8, i64 0, i32 0
  %15 = getelementptr inbounds %"class.viz::ScopedSurfaceIdAllocator", %"class.viz::ScopedSurfaceIdAllocator"* %1, i64 0, i32 1, i32 0
  %16 = tail call dereferenceable(8) %"class.base::internal::CallbackBase"* @_ZN4base8internal12CallbackBaseaSEOS1_(%"class.base::internal::CallbackBase"* %14, %"class.base::internal::CallbackBase"* dereferenceable(8) %15) #4
  %17 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  %18 = call dereferenceable(8) %"class.base::internal::CallbackBase"* @_ZN4base8internal12CallbackBaseaSEOS1_(%"class.base::internal::CallbackBase"* %15, %"class.base::internal::CallbackBase"* nonnull dereferenceable(8) %17) #4
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %17) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz24ScopedSurfaceIdAllocatorD2Ev(%"class.viz::ScopedSurfaceIdAllocator"*) unnamed_addr #1 align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = getelementptr inbounds %"class.viz::ScopedSurfaceIdAllocator", %"class.viz::ScopedSurfaceIdAllocator"* %0, i64 0, i32 0
  %4 = load %"class.viz::ParentLocalSurfaceIdAllocator"*, %"class.viz::ParentLocalSurfaceIdAllocator"** %3, align 8
  %5 = icmp eq %"class.viz::ParentLocalSurfaceIdAllocator"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.viz::ParentLocalSurfaceIdAllocator", %"class.viz::ParentLocalSurfaceIdAllocator"* %4, i64 0, i32 2
  store i8 0, i8* %7, align 1
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.viz::ScopedSurfaceIdAllocator", %"class.viz::ScopedSurfaceIdAllocator"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %9, i64 0, i32 0
  %11 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %9, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %11, align 8
  %13 = icmp eq %"class.base::internal::BindStateBase"* %12, null
  br i1 %13, label %22, label %14

14:                                               ; preds = %8
  %15 = ptrtoint %"class.base::internal::BindStateBase"* %12 to i64
  %16 = bitcast %"class.base::OnceCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #4
  %17 = bitcast %"class.base::OnceCallback"* %2 to i64*
  store i64 %15, i64* %17, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %11, align 8
  %18 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  %19 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %12, i64 0, i32 1
  %20 = bitcast void ()** %19 to void (%"class.base::internal::BindStateBase"*)**
  %21 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %20, align 8
  tail call void %21(%"class.base::internal::BindStateBase"* nonnull %12) #4
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %18) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #4
  br label %22

22:                                               ; preds = %8, %14
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %10) #4
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #3

; Function Attrs: nounwind
declare dereferenceable(8) %"class.base::internal::CallbackBase"* @_ZN4base8internal12CallbackBaseaSEOS1_(%"class.base::internal::CallbackBase"*, %"class.base::internal::CallbackBase"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
