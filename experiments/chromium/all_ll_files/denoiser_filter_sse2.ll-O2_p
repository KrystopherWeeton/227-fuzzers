; ModuleID = '../../third_party/webrtc/modules/video_processing/util/denoiser_filter_sse2.cc'
source_filename = "../../third_party/webrtc/modules/video_processing/util/denoiser_filter_sse2.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::DenoiserFilterSSE2" = type { %"class.webrtc::DenoiserFilter" }
%"class.webrtc::DenoiserFilter" = type { i32 (...)** }

$_ZN6webrtc14DenoiserFilterD2Ev = comdat any

$_ZN6webrtc18DenoiserFilterSSE2D0Ev = comdat any

@_ZN6webrtc25kMotionMagnitudeThresholdE = external local_unnamed_addr constant i32, align 4
@_ZN6webrtc21kSumDiffThresholdHighE = external local_unnamed_addr constant i32, align 4
@_ZN6webrtc17kSumDiffThresholdE = external local_unnamed_addr constant i32, align 4
@_ZTVN6webrtc18DenoiserFilterSSE2E = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::DenoiserFilter"*)* @_ZN6webrtc14DenoiserFilterD2Ev to i8*), i8* bitcast (void (%"class.webrtc::DenoiserFilterSSE2"*)* @_ZN6webrtc18DenoiserFilterSSE2D0Ev to i8*), i8* bitcast (i32 (%"class.webrtc::DenoiserFilterSSE2"*, i8*, i32, i8*, i32, i32*)* @_ZN6webrtc18DenoiserFilterSSE212Variance16x8EPKhiS2_iPj to i8*), i8* bitcast (i32 (%"class.webrtc::DenoiserFilterSSE2"*, i8*, i32, i8*, i32, i8*, i32, i8, i32)* @_ZN6webrtc18DenoiserFilterSSE29MbDenoiseEPKhiPhiS2_ihi to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc18DenoiserFilterSSE212Variance16x8EPKhiS2_iPj(%"class.webrtc::DenoiserFilterSSE2"* nocapture readnone, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) unnamed_addr #0 align 2 {
  %7 = shl i32 %2, 1
  %8 = shl i32 %4, 1
  store i32 0, i32* %5, align 4
  %9 = sext i32 %8 to i64
  %10 = sext i32 %7 to i64
  %11 = shl nsw i64 %10, 1
  %12 = shl nsw i64 %9, 1
  %13 = mul nsw i64 %10, 3
  %14 = mul nsw i64 %9, 3
  %15 = shl nsw i64 %10, 2
  %16 = shl nsw i64 %9, 2
  %17 = mul nsw i64 %10, 5
  %18 = mul nsw i64 %9, 5
  %19 = mul nsw i64 %10, 6
  %20 = mul nsw i64 %9, 6
  %21 = mul nsw i64 %10, 7
  %22 = mul nsw i64 %9, 7
  br label %23

23:                                               ; preds = %23, %6
  %24 = phi i64 [ 0, %6 ], [ %193, %23 ]
  %25 = phi i64 [ 0, %6 ], [ %194, %23 ]
  %26 = getelementptr inbounds i8, i8* %1, i64 %25
  %27 = getelementptr inbounds i8, i8* %3, i64 %25
  %28 = bitcast i8* %26 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = bitcast <2 x i64> %30 to <16 x i8>
  %32 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = bitcast i8* %27 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = insertelement <2 x i64> undef, i64 %34, i32 0
  %36 = bitcast <2 x i64> %35 to <16 x i8>
  %37 = shufflevector <16 x i8> %36, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %38 = bitcast <16 x i8> %32 to <8 x i16>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = sub <8 x i16> %38, %39
  %41 = getelementptr inbounds i8, i8* %26, i64 %10
  %42 = bitcast i8* %41 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = insertelement <2 x i64> undef, i64 %43, i32 0
  %45 = bitcast <2 x i64> %44 to <16 x i8>
  %46 = shufflevector <16 x i8> %45, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %47 = getelementptr inbounds i8, i8* %27, i64 %9
  %48 = bitcast i8* %47 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <16 x i8>
  %52 = shufflevector <16 x i8> %51, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = bitcast <16 x i8> %46 to <8 x i16>
  %54 = bitcast <16 x i8> %52 to <8 x i16>
  %55 = sub <8 x i16> %53, %54
  %56 = add <8 x i16> %55, %40
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %40, <8 x i16> %40) #7
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %55) #7
  %59 = add <4 x i32> %58, %57
  %60 = getelementptr inbounds i8, i8* %26, i64 %11
  %61 = bitcast i8* %60 to i64*
  %62 = load i64, i64* %61, align 1
  %63 = insertelement <2 x i64> undef, i64 %62, i32 0
  %64 = bitcast <2 x i64> %63 to <16 x i8>
  %65 = shufflevector <16 x i8> %64, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = getelementptr inbounds i8, i8* %27, i64 %12
  %67 = bitcast i8* %66 to i64*
  %68 = load i64, i64* %67, align 1
  %69 = insertelement <2 x i64> undef, i64 %68, i32 0
  %70 = bitcast <2 x i64> %69 to <16 x i8>
  %71 = shufflevector <16 x i8> %70, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = bitcast <16 x i8> %65 to <8 x i16>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = sub <8 x i16> %72, %73
  %75 = getelementptr inbounds i8, i8* %26, i64 %13
  %76 = bitcast i8* %75 to i64*
  %77 = load i64, i64* %76, align 1
  %78 = insertelement <2 x i64> undef, i64 %77, i32 0
  %79 = bitcast <2 x i64> %78 to <16 x i8>
  %80 = shufflevector <16 x i8> %79, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = getelementptr inbounds i8, i8* %27, i64 %14
  %82 = bitcast i8* %81 to i64*
  %83 = load i64, i64* %82, align 1
  %84 = insertelement <2 x i64> undef, i64 %83, i32 0
  %85 = bitcast <2 x i64> %84 to <16 x i8>
  %86 = shufflevector <16 x i8> %85, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %87 = bitcast <16 x i8> %80 to <8 x i16>
  %88 = bitcast <16 x i8> %86 to <8 x i16>
  %89 = sub <8 x i16> %87, %88
  %90 = add <8 x i16> %56, %74
  %91 = add <8 x i16> %90, %89
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %74, <8 x i16> %74) #7
  %93 = add <4 x i32> %59, %92
  %94 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %89, <8 x i16> %89) #7
  %95 = add <4 x i32> %93, %94
  %96 = getelementptr inbounds i8, i8* %26, i64 %15
  %97 = bitcast i8* %96 to i64*
  %98 = load i64, i64* %97, align 1
  %99 = insertelement <2 x i64> undef, i64 %98, i32 0
  %100 = bitcast <2 x i64> %99 to <16 x i8>
  %101 = shufflevector <16 x i8> %100, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %102 = getelementptr inbounds i8, i8* %27, i64 %16
  %103 = bitcast i8* %102 to i64*
  %104 = load i64, i64* %103, align 1
  %105 = insertelement <2 x i64> undef, i64 %104, i32 0
  %106 = bitcast <2 x i64> %105 to <16 x i8>
  %107 = shufflevector <16 x i8> %106, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %108 = bitcast <16 x i8> %101 to <8 x i16>
  %109 = bitcast <16 x i8> %107 to <8 x i16>
  %110 = sub <8 x i16> %108, %109
  %111 = getelementptr inbounds i8, i8* %26, i64 %17
  %112 = bitcast i8* %111 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = getelementptr inbounds i8, i8* %27, i64 %18
  %118 = bitcast i8* %117 to i64*
  %119 = load i64, i64* %118, align 1
  %120 = insertelement <2 x i64> undef, i64 %119, i32 0
  %121 = bitcast <2 x i64> %120 to <16 x i8>
  %122 = shufflevector <16 x i8> %121, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %123 = bitcast <16 x i8> %116 to <8 x i16>
  %124 = bitcast <16 x i8> %122 to <8 x i16>
  %125 = sub <8 x i16> %123, %124
  %126 = add <8 x i16> %91, %110
  %127 = add <8 x i16> %126, %125
  %128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %110, <8 x i16> %110) #7
  %129 = add <4 x i32> %95, %128
  %130 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %125, <8 x i16> %125) #7
  %131 = add <4 x i32> %129, %130
  %132 = getelementptr inbounds i8, i8* %26, i64 %19
  %133 = bitcast i8* %132 to i64*
  %134 = load i64, i64* %133, align 1
  %135 = insertelement <2 x i64> undef, i64 %134, i32 0
  %136 = bitcast <2 x i64> %135 to <16 x i8>
  %137 = shufflevector <16 x i8> %136, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %138 = getelementptr inbounds i8, i8* %27, i64 %20
  %139 = bitcast i8* %138 to i64*
  %140 = load i64, i64* %139, align 1
  %141 = insertelement <2 x i64> undef, i64 %140, i32 0
  %142 = bitcast <2 x i64> %141 to <16 x i8>
  %143 = shufflevector <16 x i8> %142, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %144 = bitcast <16 x i8> %137 to <8 x i16>
  %145 = bitcast <16 x i8> %143 to <8 x i16>
  %146 = sub <8 x i16> %144, %145
  %147 = getelementptr inbounds i8, i8* %26, i64 %21
  %148 = bitcast i8* %147 to i64*
  %149 = load i64, i64* %148, align 1
  %150 = insertelement <2 x i64> undef, i64 %149, i32 0
  %151 = bitcast <2 x i64> %150 to <16 x i8>
  %152 = shufflevector <16 x i8> %151, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %153 = getelementptr inbounds i8, i8* %27, i64 %22
  %154 = bitcast i8* %153 to i64*
  %155 = load i64, i64* %154, align 1
  %156 = insertelement <2 x i64> undef, i64 %155, i32 0
  %157 = bitcast <2 x i64> %156 to <16 x i8>
  %158 = shufflevector <16 x i8> %157, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %159 = bitcast <16 x i8> %152 to <8 x i16>
  %160 = bitcast <16 x i8> %158 to <8 x i16>
  %161 = sub <8 x i16> %159, %160
  %162 = add <8 x i16> %127, %146
  %163 = add <8 x i16> %162, %161
  %164 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %146, <8 x i16> %146) #7
  %165 = add <4 x i32> %131, %164
  %166 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %161, <8 x i16> %161) #7
  %167 = add <4 x i32> %165, %166
  %168 = bitcast <8 x i16> %163 to <16 x i8>
  %169 = bitcast <4 x i32> %167 to <16 x i8>
  %170 = shufflevector <16 x i8> %168, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %171 = bitcast <16 x i8> %170 to <8 x i16>
  %172 = add <8 x i16> %163, %171
  %173 = bitcast <8 x i16> %172 to <16 x i8>
  %174 = shufflevector <16 x i8> %173, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %175 = bitcast <16 x i8> %174 to <8 x i16>
  %176 = add <8 x i16> %172, %175
  %177 = bitcast <8 x i16> %176 to <16 x i8>
  %178 = shufflevector <16 x i8> %177, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %179 = bitcast <16 x i8> %178 to <8 x i16>
  %180 = add <8 x i16> %176, %179
  %181 = extractelement <8 x i16> %180, i64 0
  %182 = shufflevector <16 x i8> %169, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %183 = bitcast <16 x i8> %182 to <4 x i32>
  %184 = add <4 x i32> %167, %183
  %185 = bitcast <4 x i32> %184 to <16 x i8>
  %186 = shufflevector <16 x i8> %185, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %187 = bitcast <16 x i8> %186 to <4 x i32>
  %188 = add <4 x i32> %184, %187
  %189 = extractelement <4 x i32> %188, i32 0
  %190 = load i32, i32* %5, align 4
  %191 = add i32 %189, %190
  store i32 %191, i32* %5, align 4
  %192 = sext i16 %181 to i64
  %193 = add nsw i64 %24, %192
  %194 = add nuw nsw i64 %25, 8
  %195 = icmp ult i64 %194, 16
  br i1 %195, label %23, label %196

196:                                              ; preds = %23
  %197 = mul nsw i64 %193, %193
  %198 = lshr i64 %197, 7
  %199 = trunc i64 %198 to i32
  %200 = sub i32 %191, %199
  ret i32 %200
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @_ZN6webrtc18DenoiserFilterSSE29MbDenoiseEPKhiPhiS2_ihi(%"class.webrtc::DenoiserFilterSSE2"* nocapture readnone, i8* nocapture readonly, i32, i8* nocapture, i32, i8* nocapture readonly, i32, i8 zeroext, i32) unnamed_addr #1 align 2 {
  %10 = icmp ne i32 %8, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %9
  %12 = load i32, i32* @_ZN6webrtc25kMotionMagnitudeThresholdE, align 4
  %13 = zext i8 %7 to i32
  br label %19

14:                                               ; preds = %9
  %15 = zext i8 %7 to i32
  %16 = load i32, i32* @_ZN6webrtc25kMotionMagnitudeThresholdE, align 4
  %17 = icmp sge i32 %16, %15
  %18 = zext i1 %17 to i32
  br label %19

19:                                               ; preds = %11, %14
  %20 = phi i32 [ %13, %11 ], [ %15, %14 ]
  %21 = phi i32 [ %12, %11 ], [ %16, %14 ]
  %22 = phi i32 [ 0, %11 ], [ %18, %14 ]
  %23 = trunc i32 %22 to i8
  %24 = or i8 %23, 4
  %25 = insertelement <16 x i8> undef, i8 %24, i32 0
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> zeroinitializer
  %27 = icmp slt i32 %21, %20
  %28 = add nuw nsw i32 %22, 7
  %29 = select i1 %27, i32 6, i32 %28
  %30 = trunc i32 %29 to i8
  %31 = insertelement <16 x i8> undef, i8 %30, i32 0
  %32 = shufflevector <16 x i8> %31, <16 x i8> undef, <16 x i32> zeroinitializer
  %33 = sext i32 %6 to i64
  %34 = sext i32 %2 to i64
  %35 = sext i32 %4 to i64
  br label %62

36:                                               ; preds = %62
  %37 = shufflevector <16 x i8> %104, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %38 = bitcast <16 x i8> %37 to <8 x i16>
  %39 = ashr <8 x i16> %38, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %40 = shufflevector <16 x i8> %104, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %41 = bitcast <16 x i8> %40 to <8 x i16>
  %42 = ashr <8 x i16> %41, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %43 = add nsw <8 x i16> %42, %39
  %44 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #7
  %45 = bitcast <4 x i32> %44 to <16 x i8>
  %46 = shufflevector <16 x i8> %45, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %47 = bitcast <16 x i8> %46 to <4 x i32>
  %48 = add <4 x i32> %44, %47
  %49 = bitcast <4 x i32> %48 to <16 x i8>
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %51 = bitcast <16 x i8> %50 to <4 x i32>
  %52 = add <4 x i32> %48, %51
  %53 = extractelement <4 x i32> %52, i32 0
  %54 = icmp slt i32 %53, 0
  %55 = sub nsw i32 0, %53
  %56 = select i1 %54, i32 %55, i32 %53
  %57 = load i32, i32* @_ZN6webrtc21kSumDiffThresholdHighE, align 4
  %58 = load i32, i32* @_ZN6webrtc17kSumDiffThresholdE, align 4
  %59 = select i1 %10, i32 %57, i32 %58
  %60 = icmp ule i32 %56, %59
  %61 = zext i1 %60 to i32
  ret i32 %61

62:                                               ; preds = %62, %19
  %63 = phi i8* [ %1, %19 ], [ %106, %62 ]
  %64 = phi i8* [ %3, %19 ], [ %107, %62 ]
  %65 = phi i8* [ %5, %19 ], [ %105, %62 ]
  %66 = phi <16 x i8> [ zeroinitializer, %19 ], [ %104, %62 ]
  %67 = phi i32 [ 0, %19 ], [ %108, %62 ]
  %68 = bitcast i8* %65 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1
  %70 = bitcast i8* %63 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 1
  %72 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %71, <16 x i8> %69) #7
  %73 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %69, <16 x i8> %71) #7
  %74 = icmp eq <16 x i8> %72, zeroinitializer
  %75 = sext <16 x i1> %74 to <16 x i8>
  %76 = bitcast <16 x i8> %75 to <2 x i64>
  %77 = or <16 x i8> %73, %72
  %78 = icmp ult <16 x i8> %77, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %79 = select <16 x i1> %78, <16 x i8> %77, <16 x i8> <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %80 = icmp slt <16 x i8> %79, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %81 = icmp slt <16 x i8> %79, <i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8>
  %82 = zext <16 x i1> %81 to <16 x i8>
  %83 = icmp sgt <16 x i8> %26, %79
  %84 = sext <16 x i1> %83 to <16 x i8>
  %85 = bitcast <16 x i8> %84 to <2 x i64>
  %86 = and <16 x i8> %79, %84
  %87 = bitcast <16 x i8> %86 to <2 x i64>
  %88 = select <16 x i1> %80, <16 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <16 x i8> zeroinitializer
  %89 = or <16 x i8> %88, %82
  %90 = sub <16 x i8> %32, %89
  %91 = bitcast <16 x i8> %90 to <2 x i64>
  %92 = xor <2 x i64> %85, <i64 -1, i64 -1>
  %93 = and <2 x i64> %91, %92
  %94 = or <2 x i64> %93, %87
  %95 = xor <2 x i64> %76, <i64 -1, i64 -1>
  %96 = and <2 x i64> %94, %95
  %97 = and <2 x i64> %94, %76
  %98 = bitcast <2 x i64> %96 to <16 x i8>
  %99 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %69, <16 x i8> %98) #7
  %100 = bitcast <2 x i64> %97 to <16 x i8>
  %101 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %99, <16 x i8> %100) #7
  %102 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %101, <16 x i8>* %102, align 1
  %103 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %66, <16 x i8> %98) #7
  %104 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %103, <16 x i8> %100) #7
  %105 = getelementptr inbounds i8, i8* %65, i64 %33
  %106 = getelementptr inbounds i8, i8* %63, i64 %34
  %107 = getelementptr inbounds i8, i8* %64, i64 %35
  %108 = add nuw nsw i32 %67, 1
  %109 = icmp eq i32 %108, 16
  br i1 %109, label %36, label %62
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc14DenoiserFilterD2Ev(%"class.webrtc::DenoiserFilter"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc18DenoiserFilterSSE2D0Ev(%"class.webrtc::DenoiserFilterSSE2"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.webrtc::DenoiserFilterSSE2"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #8
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.usub.sat.v16i8(<16 x i8>, <16 x i8>) #5

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8>, <16 x i8>) #5

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8>, <16 x i8>) #5

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8>, <16 x i8>) #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
