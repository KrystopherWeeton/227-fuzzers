; ModuleID = '../../third_party/pdfium/core/fpdfapi/parser/cpdf_crypto_handler.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/parser/cpdf_crypto_handler.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CPDF_CryptoHandler = type { i64, i32, %"class.std::__1::unique_ptr.13", [32 x i8] }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %struct.CRYPT_aes_context* }
%struct.CRYPT_aes_context = type { i32, i32, [120 x i32], [120 x i32], [8 x i32] }
%class.CPDF_Dictionary = type { %class.CPDF_Object, i32, %"class.fxcrt::WeakPtr", %"class.std::__1::map" }
%class.CPDF_Object = type { %"class.fxcrt::Retainable", i32, i32 }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::WeakPtr" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle"* }
%"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle" = type { i64, %"class.std::__1::unique_ptr.87" }
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.fxcrt::StringPoolTemplate"* }
%"class.fxcrt::StringPoolTemplate" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.90", %"class.std::__1::__compressed_pair.98", %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.105", [4 x i8] }>
%"class.std::__1::unique_ptr.90" = type { %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92", %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i64 }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { float }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1", %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.7" }
%"class.fxcrt::RetainPtr.7" = type { %"class.std::__1::unique_ptr.8" }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.pdfium::span.17" = type { %"class.fxcrt::UnownedPtr.18", i64 }
%"class.fxcrt::UnownedPtr.18" = type { i8* }
%struct.CRYPT_rc4_context = type { i32, i32, [256 x i32] }
%class.CFX_BinaryBuf = type { i32 (...)**, i64, i64, i64, %"class.std::__1::unique_ptr.19" }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { i8* }
%"class.fxcrt::RetainPtr.22" = type { %"class.std::__1::unique_ptr.23" }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %class.CPDF_Object* }
%"class.std::__1::stack" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.33" }
%"struct.std::__1::__split_buffer" = type { %struct.MayBeSignature**, %struct.MayBeSignature**, %struct.MayBeSignature**, %"class.std::__1::__compressed_pair.28" }
%struct.MayBeSignature = type { %class.CPDF_Dictionary*, %class.CPDF_Object* }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %struct.MayBeSignature** }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%class.CPDF_NonConstObjectWalker = type { %class.CPDF_ObjectWalker }
%class.CPDF_ObjectWalker = type { %"class.fxcrt::RetainPtr.37", %"class.fxcrt::RetainPtr.37", %"class.fxcrt::ByteString", i64, %"class.std::__1::stack.43" }
%"class.fxcrt::RetainPtr.37" = type { %"class.std::__1::unique_ptr.38" }
%"class.std::__1::unique_ptr.38" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %class.CPDF_Object* }
%"class.std::__1::stack.43" = type { %"class.std::__1::deque.44" }
%"class.std::__1::deque.44" = type { %"class.std::__1::__deque_base.45" }
%"class.std::__1::__deque_base.45" = type { %"struct.std::__1::__split_buffer.46", i64, %"class.std::__1::__compressed_pair.53" }
%"struct.std::__1::__split_buffer.46" = type { %"class.std::__1::unique_ptr.47"**, %"class.std::__1::unique_ptr.47"**, %"class.std::__1::unique_ptr.47"**, %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::unique_ptr.47" = type opaque
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.std::__1::unique_ptr.47"** }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%class.CPDF_String = type <{ %class.CPDF_Object, %"class.fxcrt::ByteString", i8, [7 x i8] }>
%class.CPDF_Stream = type { %class.CPDF_Object, i8, i32, %"class.fxcrt::RetainPtr.57", %"class.std::__1::unique_ptr.19", %"class.fxcrt::RetainPtr.63" }
%"class.fxcrt::RetainPtr.57" = type { %"class.std::__1::unique_ptr.58" }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %class.CPDF_Dictionary* }
%"class.fxcrt::RetainPtr.63" = type { %"class.std::__1::unique_ptr.64" }
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %class.IFX_SeekableReadStream* }
%class.IFX_SeekableReadStream = type { %class.IFX_StreamWithSize, %"class.fxcrt::Retainable" }
%class.IFX_StreamWithSize = type { i32 (...)** }
%class.CPDF_StreamAcc = type { %"class.fxcrt::Retainable", %"class.fxcrt::MaybeOwned", i32, %"class.fxcrt::ByteString", %"class.fxcrt::RetainPtr.73", %"class.fxcrt::RetainPtr.79" }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.19", %"class.fxcrt::UnownedPtr.18" }
%"class.fxcrt::RetainPtr.73" = type { %"class.std::__1::unique_ptr.74" }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %class.CPDF_Dictionary* }
%"class.fxcrt::RetainPtr.79" = type { %"class.std::__1::unique_ptr.80" }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %class.CPDF_Stream* }

@_ZN12_GLOBAL__N_18kTypeKeyE = internal constant [5 x i8] c"Type\00", align 1
@_ZN6pdfium11form_fieldsL3kFTE = internal constant [3 x i8] c"FT\00", align 1
@_ZN6pdfium11form_fieldsL4kSigE = internal constant [4 x i8] c"Sig\00", align 1
@_ZN12_GLOBAL__N_112kContentsKeyE = internal constant [9 x i8] c"Contents\00", align 1

@_ZN18CPDF_CryptoHandlerC1ENS_6CipherEPKhm = hidden unnamed_addr alias void (%class.CPDF_CryptoHandler*, i32, i8*, i64), void (%class.CPDF_CryptoHandler*, i32, i8*, i64)* @_ZN18CPDF_CryptoHandlerC2ENS_6CipherEPKhm
@_ZN18CPDF_CryptoHandlerD1Ev = hidden unnamed_addr alias void (%class.CPDF_CryptoHandler*), void (%class.CPDF_CryptoHandler*)* @_ZN18CPDF_CryptoHandlerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18CPDF_CryptoHandler21IsSignatureDictionaryEPK15CPDF_Dictionary(%class.CPDF_Dictionary*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.fxcrt::ByteString", align 8
  %3 = alloca %"class.fxcrt::ByteString", align 8
  %4 = alloca %"class.fxcrt::ByteString", align 8
  %5 = icmp eq %class.CPDF_Dictionary* %0, null
  br i1 %5, label %22, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.fxcrt::ByteString"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #8
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @_ZN12_GLOBAL__N_18kTypeKeyE, i64 0, i64 0)) #8
  %8 = call %class.CPDF_Object* @_ZNK15CPDF_Dictionary18GetDirectObjectForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* nonnull %0, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %2) #8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %2) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #8
  %9 = icmp eq %class.CPDF_Object* %8, null
  br i1 %9, label %10, label %14

10:                                               ; preds = %6
  %11 = bitcast %"class.fxcrt::ByteString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZN6pdfium11form_fieldsL3kFTE, i64 0, i64 0)) #8
  %12 = call %class.CPDF_Object* @_ZNK15CPDF_Dictionary18GetDirectObjectForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* nonnull %0, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %3) #8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  %13 = icmp eq %class.CPDF_Object* %12, null
  br i1 %13, label %22, label %14

14:                                               ; preds = %6, %10
  %15 = phi %class.CPDF_Object* [ %12, %10 ], [ %8, %6 ]
  %16 = bitcast %"class.fxcrt::ByteString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #8
  %17 = bitcast %class.CPDF_Object* %15 to void (%"class.fxcrt::ByteString"*, %class.CPDF_Object*)***
  %18 = load void (%"class.fxcrt::ByteString"*, %class.CPDF_Object*)**, void (%"class.fxcrt::ByteString"*, %class.CPDF_Object*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.fxcrt::ByteString"*, %class.CPDF_Object*)*, void (%"class.fxcrt::ByteString"*, %class.CPDF_Object*)** %18, i64 7
  %20 = load void (%"class.fxcrt::ByteString"*, %class.CPDF_Object*)*, void (%"class.fxcrt::ByteString"*, %class.CPDF_Object*)** %19, align 8
  call void %20(%"class.fxcrt::ByteString"* nonnull sret %4, %class.CPDF_Object* nonnull %15) #8
  %21 = call zeroext i1 @_ZNK5fxcrt10ByteStringeqEPKc(%"class.fxcrt::ByteString"* nonnull %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZN6pdfium11form_fieldsL4kSigE, i64 0, i64 0)) #8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8
  br label %22

22:                                               ; preds = %10, %14, %1
  %23 = phi i1 [ false, %1 ], [ %21, %14 ], [ false, %10 ]
  ret i1 %23
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %class.CPDF_Object* @_ZNK15CPDF_Dictionary18GetDirectObjectForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"*, i8*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZNK5fxcrt10ByteStringeqEPKc(%"class.fxcrt::ByteString"*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK18CPDF_CryptoHandler10CryptBlockEbjjN6pdfium4spanIKhEEPhRj(%class.CPDF_CryptoHandler*, i1 zeroext, i32, i32, %"class.pdfium::span"* nocapture readonly, i8*, i32* nocapture dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %8 = alloca [16 x i8], align 16
  %9 = alloca [32 x i8], align 16
  %10 = alloca %"class.pdfium::span", align 8
  %11 = alloca [16 x i8], align 16
  %12 = alloca [16 x i8], align 16
  %13 = alloca %"class.pdfium::span.17", align 8
  %14 = alloca %"class.pdfium::span", align 8
  %15 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %23

18:                                               ; preds = %7
  %19 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %4, i64 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %4, i64 0, i32 1
  %22 = load i64, i64* %21, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %20, i64 %22, i1 false)
  br label %194

23:                                               ; preds = %7
  %24 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #8
  %25 = icmp eq i32 %16, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 16, i1 false)
  %26 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %27, 32
  %29 = and i1 %25, %28
  br i1 %29, label %30, label %33

30:                                               ; preds = %23
  %31 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %32 = load %struct.CRYPT_aes_context*, %struct.CRYPT_aes_context** %31, align 8
  br label %76

33:                                               ; preds = %23
  %34 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %34) #8
  %35 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 3, i64 0
  %36 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 0
  %37 = icmp ugt i64 %27, 31
  %38 = sub i64 32, %27
  %39 = select i1 %37, i64 0, i64 %38
  %40 = getelementptr [32 x i8], [32 x i8]* %9, i64 0, i64 %27
  call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 -86, i64 %39, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %34, i8* align 8 %35, i64 %27, i1 false) #8
  %41 = trunc i32 %2 to i8
  %42 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i64 0, i64 %27
  store i8 %41, i8* %42, align 1
  %43 = lshr i32 %2, 8
  %44 = trunc i32 %43 to i8
  %45 = add i64 %27, 1
  %46 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i64 0, i64 %45
  store i8 %44, i8* %46, align 1
  %47 = lshr i32 %2, 16
  %48 = trunc i32 %47 to i8
  %49 = add i64 %27, 2
  %50 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i64 0, i64 %49
  store i8 %48, i8* %50, align 1
  %51 = trunc i32 %3 to i8
  %52 = add i64 %27, 3
  %53 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i64 0, i64 %52
  store i8 %51, i8* %53, align 1
  %54 = lshr i32 %3, 8
  %55 = trunc i32 %54 to i8
  %56 = add i64 %27, 4
  %57 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i64 0, i64 %56
  store i8 %55, i8* %57, align 1
  br i1 %25, label %58, label %61

58:                                               ; preds = %33
  %59 = getelementptr inbounds i8, i8* %42, i64 5
  %60 = bitcast i8* %59 to i32*
  store i32 1416380787, i32* %60, align 1
  br label %61

61:                                               ; preds = %33, %58
  %62 = select i1 %25, i64 9, i64 5
  %63 = add i64 %62, %27
  %64 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %10, i64 0, i32 0, i32 0
  store i8* %34, i8** %64, align 8
  %65 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %10, i64 0, i32 1
  store i64 %63, i64* %65, align 8
  call void @_Z17CRYPT_MD5GenerateN6pdfium4spanIKhEEPh(%"class.pdfium::span"* nonnull %10, i8* nonnull %24) #8
  %66 = load i64, i64* %36, align 8
  %67 = add i64 %66, 5
  %68 = icmp ult i64 %67, 16
  %69 = select i1 %68, i64 %67, i64 16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %34) #8
  %70 = load i32, i32* %15, align 8
  %71 = icmp eq i32 %70, 2
  br i1 %71, label %72, label %179

72:                                               ; preds = %61
  %73 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %74 = load %struct.CRYPT_aes_context*, %struct.CRYPT_aes_context** %73, align 8
  %75 = icmp eq i64 %66, 32
  br i1 %75, label %76, label %80

76:                                               ; preds = %30, %72
  %77 = phi %struct.CRYPT_aes_context* [ %32, %30 ], [ %74, %72 ]
  %78 = phi %struct.CRYPT_aes_context** [ %31, %30 ], [ %73, %72 ]
  %79 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 3, i64 0
  br label %80

80:                                               ; preds = %72, %76
  %81 = phi %struct.CRYPT_aes_context* [ %77, %76 ], [ %74, %72 ]
  %82 = phi %struct.CRYPT_aes_context** [ %78, %76 ], [ %73, %72 ]
  %83 = phi i64 [ 32, %76 ], [ %66, %72 ]
  %84 = phi i8* [ %79, %76 ], [ %24, %72 ]
  %85 = trunc i64 %83 to i32
  call void @_Z15CRYPT_AESSetKeyP17CRYPT_aes_contextPKhj(%struct.CRYPT_aes_context* %81, i8* %84, i32 %85) #8
  br i1 %1, label %86, label %159

86:                                               ; preds = %80
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %87) #8
  %88 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 1
  %89 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 2
  %90 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 3
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 4
  %92 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 5
  %93 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 6
  %94 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 7
  %95 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 8
  %96 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 9
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 10
  %98 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 11
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 12
  %100 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 13
  %101 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 14
  %102 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 15
  %103 = call i32 @rand() #8
  %104 = trunc i32 %103 to i8
  store i8 %104, i8* %87, align 16
  %105 = call i32 @rand() #8
  %106 = trunc i32 %105 to i8
  store i8 %106, i8* %88, align 1
  %107 = call i32 @rand() #8
  %108 = trunc i32 %107 to i8
  store i8 %108, i8* %89, align 2
  %109 = call i32 @rand() #8
  %110 = trunc i32 %109 to i8
  store i8 %110, i8* %90, align 1
  %111 = call i32 @rand() #8
  %112 = trunc i32 %111 to i8
  store i8 %112, i8* %91, align 4
  %113 = call i32 @rand() #8
  %114 = trunc i32 %113 to i8
  store i8 %114, i8* %92, align 1
  %115 = call i32 @rand() #8
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %93, align 2
  %117 = call i32 @rand() #8
  %118 = trunc i32 %117 to i8
  store i8 %118, i8* %94, align 1
  %119 = call i32 @rand() #8
  %120 = trunc i32 %119 to i8
  store i8 %120, i8* %95, align 8
  %121 = call i32 @rand() #8
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %96, align 1
  %123 = call i32 @rand() #8
  %124 = trunc i32 %123 to i8
  store i8 %124, i8* %97, align 2
  %125 = call i32 @rand() #8
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %98, align 1
  %127 = call i32 @rand() #8
  %128 = trunc i32 %127 to i8
  store i8 %128, i8* %99, align 4
  %129 = call i32 @rand() #8
  %130 = trunc i32 %129 to i8
  store i8 %130, i8* %100, align 1
  %131 = call i32 @rand() #8
  %132 = trunc i32 %131 to i8
  store i8 %132, i8* %101, align 2
  %133 = call i32 @rand() #8
  %134 = trunc i32 %133 to i8
  store i8 %134, i8* %102, align 1
  %135 = load %struct.CRYPT_aes_context*, %struct.CRYPT_aes_context** %82, align 8
  call void @_Z14CRYPT_AESSetIVP17CRYPT_aes_contextPKh(%struct.CRYPT_aes_context* %135, i8* nonnull %87) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* nonnull align 16 %87, i64 16, i1 false)
  %136 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %4, i64 0, i32 1
  %137 = load i64, i64* %136, align 8
  %138 = load %struct.CRYPT_aes_context*, %struct.CRYPT_aes_context** %82, align 8
  %139 = getelementptr inbounds i8, i8* %5, i64 16
  %140 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %4, i64 0, i32 0, i32 0
  %141 = load i8*, i8** %140, align 8
  %142 = trunc i64 %137 to i32
  %143 = and i32 %142, -16
  call void @_Z16CRYPT_AESEncryptP17CRYPT_aes_contextPhPKhj(%struct.CRYPT_aes_context* %138, i8* %139, i8* %141, i32 %143) #8
  %144 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %144) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %144, i8 -86, i64 16, i1 false)
  %145 = load i8*, i8** %140, align 8
  %146 = sext i32 %143 to i64
  %147 = getelementptr inbounds i8, i8* %145, i64 %146
  %148 = load i64, i64* %136, align 8
  %149 = and i64 %148, 15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %144, i8* align 1 %147, i64 %149, i1 false)
  %150 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %149
  %151 = trunc i64 %148 to i8
  %152 = and i8 %151, 15
  %153 = sub nuw nsw i8 16, %152
  %154 = sub nuw nsw i64 16, %149
  call void @llvm.memset.p0i8.i64(i8* align 1 %150, i8 %153, i64 %154, i1 false)
  %155 = load %struct.CRYPT_aes_context*, %struct.CRYPT_aes_context** %82, align 8
  %156 = getelementptr inbounds i8, i8* %5, i64 %146
  %157 = getelementptr inbounds i8, i8* %156, i64 16
  call void @_Z16CRYPT_AESEncryptP17CRYPT_aes_contextPhPKhj(%struct.CRYPT_aes_context* %155, i8* %157, i8* nonnull %144, i32 16) #8
  %158 = add nsw i32 %143, 32
  store i32 %158, i32* %6, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %144) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %87) #8
  br label %193

159:                                              ; preds = %80
  %160 = load %struct.CRYPT_aes_context*, %struct.CRYPT_aes_context** %82, align 8
  %161 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %4, i64 0, i32 0, i32 0
  %162 = load i8*, i8** %161, align 8
  call void @_Z14CRYPT_AESSetIVP17CRYPT_aes_contextPKh(%struct.CRYPT_aes_context* %160, i8* %162) #8
  %163 = load %struct.CRYPT_aes_context*, %struct.CRYPT_aes_context** %82, align 8
  %164 = load i8*, i8** %161, align 8
  %165 = getelementptr inbounds i8, i8* %164, i64 16
  %166 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %4, i64 0, i32 1
  %167 = load i64, i64* %166, align 8
  %168 = trunc i64 %167 to i32
  %169 = add i32 %168, -16
  call void @_Z16CRYPT_AESDecryptP17CRYPT_aes_contextPhPKhj(%struct.CRYPT_aes_context* %163, i8* %5, i8* %165, i32 %169) #8
  %170 = load i64, i64* %166, align 8
  %171 = trunc i64 %170 to i32
  %172 = add i32 %171, -16
  store i32 %172, i32* %6, align 4
  %173 = add i64 %170, 4294967279
  %174 = and i64 %173, 4294967295
  %175 = getelementptr inbounds i8, i8* %5, i64 %174
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = sub i32 %172, %177
  store i32 %178, i32* %6, align 4
  br label %193

179:                                              ; preds = %61
  %180 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %4, i64 0, i32 0, i32 0
  %181 = load i8*, i8** %180, align 8
  %182 = icmp eq i8* %181, %5
  br i1 %182, label %186, label %183

183:                                              ; preds = %179
  %184 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %4, i64 0, i32 1
  %185 = load i64, i64* %184, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %181, i64 %185, i1 false)
  br label %186

186:                                              ; preds = %179, %183
  %187 = load i32, i32* %6, align 4
  %188 = zext i32 %187 to i64
  %189 = getelementptr inbounds %"class.pdfium::span.17", %"class.pdfium::span.17"* %13, i64 0, i32 0, i32 0
  store i8* %5, i8** %189, align 8
  %190 = getelementptr inbounds %"class.pdfium::span.17", %"class.pdfium::span.17"* %13, i64 0, i32 1
  store i64 %188, i64* %190, align 8
  %191 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %14, i64 0, i32 0, i32 0
  store i8* %24, i8** %191, align 8
  %192 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %14, i64 0, i32 1
  store i64 %69, i64* %192, align 8
  call void @_Z23CRYPT_ArcFourCryptBlockN6pdfium4spanIhEENS0_IKhEE(%"class.pdfium::span.17"* nonnull %13, %"class.pdfium::span"* nonnull %14) #8
  br label %193

193:                                              ; preds = %86, %159, %186
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #8
  br label %194

194:                                              ; preds = %193, %18
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK18CPDF_CryptoHandler11PopulateKeyEjjPh(%class.CPDF_CryptoHandler* nocapture readonly, i32, i32, i8* nocapture) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 3, i64 0
  %6 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 8 %5, i64 %7, i1 false)
  %8 = trunc i32 %1 to i8
  %9 = load i64, i64* %6, align 8
  %10 = getelementptr inbounds i8, i8* %3, i64 %9
  store i8 %8, i8* %10, align 1
  %11 = lshr i32 %1, 8
  %12 = trunc i32 %11 to i8
  %13 = load i64, i64* %6, align 8
  %14 = add i64 %13, 1
  %15 = getelementptr inbounds i8, i8* %3, i64 %14
  store i8 %12, i8* %15, align 1
  %16 = lshr i32 %1, 16
  %17 = trunc i32 %16 to i8
  %18 = load i64, i64* %6, align 8
  %19 = add i64 %18, 2
  %20 = getelementptr inbounds i8, i8* %3, i64 %19
  store i8 %17, i8* %20, align 1
  %21 = trunc i32 %2 to i8
  %22 = load i64, i64* %6, align 8
  %23 = add i64 %22, 3
  %24 = getelementptr inbounds i8, i8* %3, i64 %23
  store i8 %21, i8* %24, align 1
  %25 = lshr i32 %2, 8
  %26 = trunc i32 %25 to i8
  %27 = load i64, i64* %6, align 8
  %28 = add i64 %27, 4
  %29 = getelementptr inbounds i8, i8* %3, i64 %28
  store i8 %26, i8* %29, align 1
  ret void
}

declare void @_Z17CRYPT_MD5GenerateN6pdfium4spanIKhEEPh(%"class.pdfium::span"*, i8*) local_unnamed_addr #2

declare void @_Z15CRYPT_AESSetKeyP17CRYPT_aes_contextPKhj(%struct.CRYPT_aes_context*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @rand() local_unnamed_addr #3

declare void @_Z14CRYPT_AESSetIVP17CRYPT_aes_contextPKh(%struct.CRYPT_aes_context*, i8*) local_unnamed_addr #2

declare void @_Z16CRYPT_AESEncryptP17CRYPT_aes_contextPhPKhj(%struct.CRYPT_aes_context*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_Z16CRYPT_AESDecryptP17CRYPT_aes_contextPhPKhj(%struct.CRYPT_aes_context*, i8*, i8*, i32) local_unnamed_addr #2

declare void @_Z23CRYPT_ArcFourCryptBlockN6pdfium4spanIhEENS0_IKhEE(%"class.pdfium::span.17"*, %"class.pdfium::span"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN18CPDF_CryptoHandler10CryptStartEjjb(%class.CPDF_CryptoHandler*, i32, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca [48 x i8], align 16
  %6 = alloca [16 x i8], align 16
  %7 = alloca %"class.pdfium::span", align 8
  %8 = alloca %"class.pdfium::span", align 8
  %9 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  switch i32 %10, label %11 [
    i32 0, label %14
    i32 2, label %16
  ]

11:                                               ; preds = %4
  %12 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 0
  %13 = load i64, i64* %12, align 8
  br label %76

14:                                               ; preds = %4
  %15 = bitcast %class.CPDF_CryptoHandler* %0 to i8*
  br label %180

16:                                               ; preds = %4
  %17 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, 32
  br i1 %19, label %20, label %76

20:                                               ; preds = %16
  %21 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 1, i64 1024) #8
  store i8 1, i8* %21, align 4
  %22 = getelementptr inbounds i8, i8* %21, i64 4
  %23 = bitcast i8* %22 to i32*
  store i32 0, i32* %23, align 4
  %24 = getelementptr inbounds i8, i8* %21, i64 8
  %25 = bitcast i8* %24 to %struct.CRYPT_aes_context*
  %26 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 3, i64 0
  tail call void @_Z15CRYPT_AESSetKeyP17CRYPT_aes_contextPKhj(%struct.CRYPT_aes_context* %25, i8* %26, i32 32) #8
  br i1 %3, label %27, label %180

27:                                               ; preds = %20
  %28 = getelementptr inbounds i8, i8* %21, i64 1008
  %29 = tail call i32 @rand() #8
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %28, align 1
  %31 = tail call i32 @rand() #8
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds i8, i8* %21, i64 1009
  store i8 %32, i8* %33, align 1
  %34 = tail call i32 @rand() #8
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds i8, i8* %21, i64 1010
  store i8 %35, i8* %36, align 1
  %37 = tail call i32 @rand() #8
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds i8, i8* %21, i64 1011
  store i8 %38, i8* %39, align 1
  %40 = tail call i32 @rand() #8
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds i8, i8* %21, i64 1012
  store i8 %41, i8* %42, align 1
  %43 = tail call i32 @rand() #8
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %21, i64 1013
  store i8 %44, i8* %45, align 1
  %46 = tail call i32 @rand() #8
  %47 = trunc i32 %46 to i8
  %48 = getelementptr inbounds i8, i8* %21, i64 1014
  store i8 %47, i8* %48, align 1
  %49 = tail call i32 @rand() #8
  %50 = trunc i32 %49 to i8
  %51 = getelementptr inbounds i8, i8* %21, i64 1015
  store i8 %50, i8* %51, align 1
  %52 = tail call i32 @rand() #8
  %53 = trunc i32 %52 to i8
  %54 = getelementptr inbounds i8, i8* %21, i64 1016
  store i8 %53, i8* %54, align 1
  %55 = tail call i32 @rand() #8
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds i8, i8* %21, i64 1017
  store i8 %56, i8* %57, align 1
  %58 = tail call i32 @rand() #8
  %59 = trunc i32 %58 to i8
  %60 = getelementptr inbounds i8, i8* %21, i64 1018
  store i8 %59, i8* %60, align 1
  %61 = tail call i32 @rand() #8
  %62 = trunc i32 %61 to i8
  %63 = getelementptr inbounds i8, i8* %21, i64 1019
  store i8 %62, i8* %63, align 1
  %64 = tail call i32 @rand() #8
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds i8, i8* %21, i64 1020
  store i8 %65, i8* %66, align 1
  %67 = tail call i32 @rand() #8
  %68 = trunc i32 %67 to i8
  %69 = getelementptr inbounds i8, i8* %21, i64 1021
  store i8 %68, i8* %69, align 1
  %70 = tail call i32 @rand() #8
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds i8, i8* %21, i64 1022
  store i8 %71, i8* %72, align 1
  %73 = tail call i32 @rand() #8
  %74 = trunc i32 %73 to i8
  %75 = getelementptr inbounds i8, i8* %21, i64 1023
  store i8 %74, i8* %75, align 1
  tail call void @_Z14CRYPT_AESSetIVP17CRYPT_aes_contextPKh(%struct.CRYPT_aes_context* %25, i8* %28) #8
  br label %180

76:                                               ; preds = %11, %16
  %77 = phi i64 [ %13, %11 ], [ %18, %16 ]
  %78 = getelementptr inbounds [48 x i8], [48 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %78) #8
  %79 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 3, i64 0
  %80 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 0
  %81 = icmp ugt i64 %77, 47
  %82 = sub i64 48, %77
  %83 = select i1 %81, i64 0, i64 %82
  %84 = getelementptr [48 x i8], [48 x i8]* %5, i64 0, i64 %77
  call void @llvm.memset.p0i8.i64(i8* align 1 %84, i8 -86, i64 %83, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %78, i8* align 8 %79, i64 %77, i1 false) #8
  %85 = trunc i32 %1 to i8
  %86 = getelementptr inbounds [48 x i8], [48 x i8]* %5, i64 0, i64 %77
  store i8 %85, i8* %86, align 1
  %87 = lshr i32 %1, 8
  %88 = trunc i32 %87 to i8
  %89 = add i64 %77, 1
  %90 = getelementptr inbounds [48 x i8], [48 x i8]* %5, i64 0, i64 %89
  store i8 %88, i8* %90, align 1
  %91 = lshr i32 %1, 16
  %92 = trunc i32 %91 to i8
  %93 = add i64 %77, 2
  %94 = getelementptr inbounds [48 x i8], [48 x i8]* %5, i64 0, i64 %93
  store i8 %92, i8* %94, align 1
  %95 = trunc i32 %2 to i8
  %96 = add i64 %77, 3
  %97 = getelementptr inbounds [48 x i8], [48 x i8]* %5, i64 0, i64 %96
  store i8 %95, i8* %97, align 1
  %98 = lshr i32 %2, 8
  %99 = trunc i32 %98 to i8
  %100 = add i64 %77, 4
  %101 = getelementptr inbounds [48 x i8], [48 x i8]* %5, i64 0, i64 %100
  store i8 %99, i8* %101, align 1
  %102 = icmp eq i32 %10, 2
  br i1 %102, label %103, label %106

103:                                              ; preds = %76
  %104 = getelementptr inbounds i8, i8* %86, i64 5
  %105 = bitcast i8* %104 to i32*
  store i32 1416380787, i32* %105, align 1
  br label %106

106:                                              ; preds = %103, %76
  %107 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %107) #8
  %108 = select i1 %102, i64 9, i64 5
  %109 = add i64 %77, %108
  %110 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %7, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %107, i8 -86, i64 16, i1 false)
  store i8* %78, i8** %110, align 8
  %111 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %7, i64 0, i32 1
  store i64 %109, i64* %111, align 8
  call void @_Z17CRYPT_MD5GenerateN6pdfium4spanIKhEEPh(%"class.pdfium::span"* nonnull %7, i8* nonnull %107) #8
  %112 = load i64, i64* %80, align 8
  %113 = add i64 %112, 5
  %114 = load i32, i32* %9, align 8
  %115 = icmp eq i32 %114, 2
  br i1 %115, label %116, label %171

116:                                              ; preds = %106
  %117 = call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 1, i64 1024) #8
  store i8 1, i8* %117, align 4
  %118 = getelementptr inbounds i8, i8* %117, i64 4
  %119 = bitcast i8* %118 to i32*
  store i32 0, i32* %119, align 4
  %120 = getelementptr inbounds i8, i8* %117, i64 8
  %121 = bitcast i8* %120 to %struct.CRYPT_aes_context*
  call void @_Z15CRYPT_AESSetKeyP17CRYPT_aes_contextPKhj(%struct.CRYPT_aes_context* %121, i8* nonnull %107, i32 16) #8
  br i1 %3, label %122, label %178

122:                                              ; preds = %116
  %123 = getelementptr inbounds i8, i8* %117, i64 1008
  %124 = call i32 @rand() #8
  %125 = trunc i32 %124 to i8
  store i8 %125, i8* %123, align 1
  %126 = call i32 @rand() #8
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds i8, i8* %117, i64 1009
  store i8 %127, i8* %128, align 1
  %129 = call i32 @rand() #8
  %130 = trunc i32 %129 to i8
  %131 = getelementptr inbounds i8, i8* %117, i64 1010
  store i8 %130, i8* %131, align 1
  %132 = call i32 @rand() #8
  %133 = trunc i32 %132 to i8
  %134 = getelementptr inbounds i8, i8* %117, i64 1011
  store i8 %133, i8* %134, align 1
  %135 = call i32 @rand() #8
  %136 = trunc i32 %135 to i8
  %137 = getelementptr inbounds i8, i8* %117, i64 1012
  store i8 %136, i8* %137, align 1
  %138 = call i32 @rand() #8
  %139 = trunc i32 %138 to i8
  %140 = getelementptr inbounds i8, i8* %117, i64 1013
  store i8 %139, i8* %140, align 1
  %141 = call i32 @rand() #8
  %142 = trunc i32 %141 to i8
  %143 = getelementptr inbounds i8, i8* %117, i64 1014
  store i8 %142, i8* %143, align 1
  %144 = call i32 @rand() #8
  %145 = trunc i32 %144 to i8
  %146 = getelementptr inbounds i8, i8* %117, i64 1015
  store i8 %145, i8* %146, align 1
  %147 = call i32 @rand() #8
  %148 = trunc i32 %147 to i8
  %149 = getelementptr inbounds i8, i8* %117, i64 1016
  store i8 %148, i8* %149, align 1
  %150 = call i32 @rand() #8
  %151 = trunc i32 %150 to i8
  %152 = getelementptr inbounds i8, i8* %117, i64 1017
  store i8 %151, i8* %152, align 1
  %153 = call i32 @rand() #8
  %154 = trunc i32 %153 to i8
  %155 = getelementptr inbounds i8, i8* %117, i64 1018
  store i8 %154, i8* %155, align 1
  %156 = call i32 @rand() #8
  %157 = trunc i32 %156 to i8
  %158 = getelementptr inbounds i8, i8* %117, i64 1019
  store i8 %157, i8* %158, align 1
  %159 = call i32 @rand() #8
  %160 = trunc i32 %159 to i8
  %161 = getelementptr inbounds i8, i8* %117, i64 1020
  store i8 %160, i8* %161, align 1
  %162 = call i32 @rand() #8
  %163 = trunc i32 %162 to i8
  %164 = getelementptr inbounds i8, i8* %117, i64 1021
  store i8 %163, i8* %164, align 1
  %165 = call i32 @rand() #8
  %166 = trunc i32 %165 to i8
  %167 = getelementptr inbounds i8, i8* %117, i64 1022
  store i8 %166, i8* %167, align 1
  %168 = call i32 @rand() #8
  %169 = trunc i32 %168 to i8
  %170 = getelementptr inbounds i8, i8* %117, i64 1023
  store i8 %169, i8* %170, align 1
  call void @_Z14CRYPT_AESSetIVP17CRYPT_aes_contextPKh(%struct.CRYPT_aes_context* %121, i8* %123) #8
  br label %178

171:                                              ; preds = %106
  %172 = icmp ult i64 %113, 16
  %173 = select i1 %172, i64 %113, i64 16
  %174 = call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 1, i64 1032) #8
  %175 = bitcast i8* %174 to %struct.CRYPT_rc4_context*
  %176 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %8, i64 0, i32 0, i32 0
  store i8* %107, i8** %176, align 8
  %177 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %8, i64 0, i32 1
  store i64 %173, i64* %177, align 8
  call void @_Z18CRYPT_ArcFourSetupP17CRYPT_rc4_contextN6pdfium4spanIKhEE(%struct.CRYPT_rc4_context* %175, %"class.pdfium::span"* nonnull %8) #8
  br label %178

178:                                              ; preds = %116, %122, %171
  %179 = phi i8* [ %174, %171 ], [ %117, %122 ], [ %117, %116 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %107) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %78) #8
  br label %180

180:                                              ; preds = %20, %27, %178, %14
  %181 = phi i8* [ %15, %14 ], [ %179, %178 ], [ %21, %27 ], [ %21, %20 ]
  ret i8* %181
}

declare i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64, i64) local_unnamed_addr #2

declare void @_Z18CRYPT_ArcFourSetupP17CRYPT_rc4_contextN6pdfium4spanIKhEE(%struct.CRYPT_rc4_context*, %"class.pdfium::span"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18CPDF_CryptoHandler11CryptStreamEPvN6pdfium4spanIKhEER13CFX_BinaryBufb(%class.CPDF_CryptoHandler* nocapture readonly, i8*, %"class.pdfium::span"* nocapture readonly, %class.CFX_BinaryBuf* dereferenceable(40), i1 zeroext) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.pdfium::span.17", align 8
  %7 = alloca %"class.pdfium::span.17", align 8
  %8 = alloca [16 x i8], align 16
  %9 = icmp eq i8* %1, null
  br i1 %9, label %100, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  switch i32 %12, label %48 [
    i32 0, label %13
    i32 1, label %18
  ]

13:                                               ; preds = %10
  %14 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %2, i64 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %2, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  tail call void @_ZN13CFX_BinaryBuf11AppendBlockEPKvm(%class.CFX_BinaryBuf* %3, i8* %15, i64 %17) #8
  br label %100

18:                                               ; preds = %10
  %19 = getelementptr inbounds %class.CFX_BinaryBuf, %class.CFX_BinaryBuf* %3, i64 0, i32 3
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %2, i64 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %2, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  tail call void @_ZN13CFX_BinaryBuf11AppendBlockEPKvm(%class.CFX_BinaryBuf* %3, i8* %22, i64 %24) #8
  %25 = bitcast i8* %1 to %struct.CRYPT_rc4_context*
  %26 = bitcast %"class.pdfium::span.17"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #8
  call void @_ZN13CFX_BinaryBuf7GetSpanEv(%"class.pdfium::span.17"* nonnull sret %7, %class.CFX_BinaryBuf* %3) #8
  %27 = shl i64 %20, 32
  %28 = ashr exact i64 %27, 32
  %29 = load i64, i64* %23, align 8
  %30 = getelementptr inbounds %"class.pdfium::span.17", %"class.pdfium::span.17"* %7, i64 0, i32 1
  %31 = load i64, i64* %30, align 8, !noalias !2
  %32 = icmp ult i64 %31, %28
  br i1 %32, label %33, label %34, !prof !5

33:                                               ; preds = %18
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !noalias !2, !srcloc !6
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !noalias !2, !srcloc !7
  unreachable

34:                                               ; preds = %18
  %35 = icmp eq i64 %29, -1
  %36 = sub i64 %31, %28
  %37 = icmp ult i64 %36, %29
  %38 = xor i1 %35, true
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %41, !prof !5

40:                                               ; preds = %34
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !noalias !2, !srcloc !8
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !noalias !2, !srcloc !9
  unreachable

41:                                               ; preds = %34
  %42 = getelementptr inbounds %"class.pdfium::span.17", %"class.pdfium::span.17"* %7, i64 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8, !noalias !2
  %44 = getelementptr inbounds i8, i8* %43, i64 %28
  %45 = select i1 %35, i64 %36, i64 %29
  %46 = getelementptr inbounds %"class.pdfium::span.17", %"class.pdfium::span.17"* %6, i64 0, i32 0, i32 0
  store i8* %44, i8** %46, align 8, !alias.scope !2
  %47 = getelementptr inbounds %"class.pdfium::span.17", %"class.pdfium::span.17"* %6, i64 0, i32 1
  store i64 %45, i64* %47, align 8, !alias.scope !2
  call void @_Z18CRYPT_ArcFourCryptP17CRYPT_rc4_contextN6pdfium4spanIhEE(%struct.CRYPT_rc4_context* nonnull %25, %"class.pdfium::span.17"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #8
  br label %100

48:                                               ; preds = %10
  %49 = load i8, i8* %1, align 4, !range !10
  %50 = icmp eq i8 %49, 0
  %51 = xor i1 %4, true
  %52 = or i1 %50, %51
  br i1 %52, label %55, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds i8, i8* %1, i64 1008
  tail call void @_ZN13CFX_BinaryBuf11AppendBlockEPKvm(%class.CFX_BinaryBuf* %3, i8* %54, i64 16) #8
  store i8 0, i8* %1, align 4
  br label %55

55:                                               ; preds = %48, %53
  %56 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %2, i64 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = trunc i64 %57 to i32
  %59 = getelementptr inbounds i8, i8* %1, i64 4
  %60 = bitcast i8* %59 to i32*
  %61 = getelementptr inbounds i8, i8* %1, i64 1008
  %62 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %2, i64 0, i32 0, i32 0
  %63 = getelementptr inbounds i8, i8* %1, i64 8
  %64 = bitcast i8* %63 to %struct.CRYPT_aes_context*
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 0
  %66 = load i32, i32* %60, align 4
  br label %67

67:                                               ; preds = %97, %55
  %68 = phi i32 [ %66, %55 ], [ %98, %97 ]
  %69 = phi i32 [ 0, %55 ], [ %80, %97 ]
  %70 = phi i32 [ %58, %55 ], [ %81, %97 ]
  %71 = sub i32 16, %68
  %72 = icmp ugt i32 %71, %70
  %73 = select i1 %72, i32 %70, i32 %71
  %74 = zext i32 %68 to i64
  %75 = getelementptr inbounds i8, i8* %61, i64 %74
  %76 = load i8*, i8** %62, align 8
  %77 = zext i32 %69 to i64
  %78 = getelementptr inbounds i8, i8* %76, i64 %77
  %79 = zext i32 %73 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %75, i8* align 1 %78, i64 %79, i1 false)
  %80 = add i32 %73, %69
  %81 = sub i32 %70, %73
  %82 = add i32 %73, %68
  store i32 %82, i32* %60, align 4
  %83 = icmp eq i32 %82, 16
  br i1 %83, label %84, label %97

84:                                               ; preds = %67
  br i1 %4, label %89, label %85

85:                                               ; preds = %84
  %86 = load i8, i8* %1, align 4, !range !10
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %89, label %88

88:                                               ; preds = %85
  call void @_Z14CRYPT_AESSetIVP17CRYPT_aes_contextPKh(%struct.CRYPT_aes_context* %64, i8* %61) #8
  store i8 0, i8* %1, align 4
  store i32 0, i32* %60, align 4
  br label %97

89:                                               ; preds = %85, %84
  %90 = zext i32 %80 to i64
  %91 = load i64, i64* %56, align 8
  %92 = icmp ugt i64 %91, %90
  br i1 %92, label %93, label %97

93:                                               ; preds = %89
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %65) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %65, i8 -86, i64 16, i1 false)
  br i1 %4, label %94, label %95

94:                                               ; preds = %93
  call void @_Z16CRYPT_AESEncryptP17CRYPT_aes_contextPhPKhj(%struct.CRYPT_aes_context* %64, i8* nonnull %65, i8* %61, i32 16) #8
  br label %96

95:                                               ; preds = %93
  call void @_Z16CRYPT_AESDecryptP17CRYPT_aes_contextPhPKhj(%struct.CRYPT_aes_context* %64, i8* nonnull %65, i8* %61, i32 16) #8
  br label %96

96:                                               ; preds = %95, %94
  call void @_ZN13CFX_BinaryBuf11AppendBlockEPKvm(%class.CFX_BinaryBuf* %3, i8* nonnull %65, i64 16) #8
  store i32 0, i32* %60, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %65) #8
  br label %97

97:                                               ; preds = %88, %96, %89, %67
  %98 = phi i32 [ 0, %88 ], [ 0, %96 ], [ 16, %89 ], [ %82, %67 ]
  %99 = icmp eq i32 %81, 0
  br i1 %99, label %100, label %67

100:                                              ; preds = %97, %5, %41, %13
  %101 = phi i1 [ true, %13 ], [ true, %41 ], [ false, %5 ], [ true, %97 ]
  ret i1 %101
}

declare void @_ZN13CFX_BinaryBuf11AppendBlockEPKvm(%class.CFX_BinaryBuf*, i8*, i64) local_unnamed_addr #2

declare void @_Z18CRYPT_ArcFourCryptP17CRYPT_rc4_contextN6pdfium4spanIhEE(%struct.CRYPT_rc4_context*, %"class.pdfium::span.17"*) local_unnamed_addr #2

declare void @_ZN13CFX_BinaryBuf7GetSpanEv(%"class.pdfium::span.17"* sret, %class.CFX_BinaryBuf*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18CPDF_CryptoHandler11CryptFinishEPvR13CFX_BinaryBufb(%class.CPDF_CryptoHandler* nocapture readonly, i8*, %class.CFX_BinaryBuf* dereferenceable(40), i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca [16 x i8], align 16
  %6 = alloca [16 x i8], align 16
  %7 = icmp eq i8* %1, null
  br i1 %7, label %52, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  switch i32 %10, label %12 [
    i32 0, label %52
    i32 1, label %11
  ]

11:                                               ; preds = %8
  tail call void @_Z7FX_FreePv(i8* nonnull %1) #8
  br label %52

12:                                               ; preds = %8
  br i1 %3, label %13, label %33

13:                                               ; preds = %12
  %14 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #8
  %15 = getelementptr inbounds i8, i8* %1, i64 4
  %16 = bitcast i8* %15 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 16, i1 false)
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 16
  br i1 %18, label %19, label %23

19:                                               ; preds = %13
  %20 = getelementptr inbounds i8, i8* %1, i64 8
  %21 = bitcast i8* %20 to %struct.CRYPT_aes_context*
  %22 = getelementptr inbounds i8, i8* %1, i64 1008
  call void @_Z16CRYPT_AESEncryptP17CRYPT_aes_contextPhPKhj(%struct.CRYPT_aes_context* %21, i8* nonnull %14, i8* %22, i32 16) #8
  call void @_ZN13CFX_BinaryBuf11AppendBlockEPKvm(%class.CFX_BinaryBuf* %2, i8* nonnull %14, i64 16) #8
  store i32 0, i32* %16, align 4
  br label %23

23:                                               ; preds = %13, %19
  %24 = phi i32 [ 0, %19 ], [ %17, %13 ]
  %25 = getelementptr inbounds i8, i8* %1, i64 1008
  %26 = zext i32 %24 to i64
  %27 = getelementptr inbounds i8, i8* %25, i64 %26
  %28 = sub i32 16, %24
  %29 = trunc i32 %28 to i8
  %30 = zext i32 %28 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %29, i64 %30, i1 false)
  %31 = getelementptr inbounds i8, i8* %1, i64 8
  %32 = bitcast i8* %31 to %struct.CRYPT_aes_context*
  call void @_Z16CRYPT_AESEncryptP17CRYPT_aes_contextPhPKhj(%struct.CRYPT_aes_context* %32, i8* nonnull %14, i8* %25, i32 16) #8
  call void @_ZN13CFX_BinaryBuf11AppendBlockEPKvm(%class.CFX_BinaryBuf* %2, i8* nonnull %14, i64 16) #8
  br label %49

33:                                               ; preds = %12
  %34 = getelementptr inbounds i8, i8* %1, i64 4
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 16
  br i1 %37, label %38, label %51

38:                                               ; preds = %33
  %39 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #8
  %40 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %41 = getelementptr inbounds i8, i8* %1, i64 8
  %42 = bitcast i8* %41 to %struct.CRYPT_aes_context*
  %43 = getelementptr inbounds i8, i8* %1, i64 1008
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %39, i8 -86, i64 16, i1 false)
  call void @_Z16CRYPT_AESDecryptP17CRYPT_aes_contextPhPKhj(%struct.CRYPT_aes_context* %42, i8* nonnull %39, i8* %43, i32 16) #8
  %44 = load i8, i8* %40, align 1
  %45 = icmp ult i8 %44, 17
  br i1 %45, label %46, label %49

46:                                               ; preds = %38
  %47 = zext i8 %44 to i64
  %48 = sub nuw nsw i64 16, %47
  call void @_ZN13CFX_BinaryBuf11AppendBlockEPKvm(%class.CFX_BinaryBuf* %2, i8* nonnull %39, i64 %48) #8
  br label %49

49:                                               ; preds = %38, %46, %23
  %50 = phi i8* [ %14, %23 ], [ %39, %46 ], [ %39, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %50) #8
  br label %51

51:                                               ; preds = %49, %33
  call void @_Z7FX_FreePv(i8* nonnull %1) #8
  br label %52

52:                                               ; preds = %8, %4, %51, %11
  %53 = phi i1 [ true, %11 ], [ true, %51 ], [ false, %4 ], [ true, %8 ]
  ret i1 %53
}

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CPDF_CryptoHandler7DecryptEjjRKN5fxcrt10ByteStringE(%"class.fxcrt::ByteString"* noalias sret, %class.CPDF_CryptoHandler*, i32, i32, %"class.fxcrt::ByteString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.pdfium::span", align 8
  %7 = alloca [16 x i8], align 16
  %8 = alloca %class.CFX_BinaryBuf, align 8
  %9 = bitcast %class.CFX_BinaryBuf* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %9) #8
  %10 = getelementptr inbounds %class.CFX_BinaryBuf, %class.CFX_BinaryBuf* %8, i64 0, i32 3
  %11 = getelementptr inbounds %class.CFX_BinaryBuf, %class.CFX_BinaryBuf* %8, i64 0, i32 4, i32 0, i32 0, i32 0
  %12 = bitcast %class.CFX_BinaryBuf* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 40, i1 false)
  call void @_ZN13CFX_BinaryBufC1Ev(%class.CFX_BinaryBuf* nonnull %8) #8
  %13 = call i8* @_ZN18CPDF_CryptoHandler10CryptStartEjjb(%class.CPDF_CryptoHandler* %1, i32 %2, i32 %3, i1 zeroext false) #8
  %14 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %14, align 8, !noalias !11
  %16 = icmp eq %"class.fxcrt::StringDataTemplate"* %15, null
  %17 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %15, i64 0, i32 3, i64 0
  %18 = select i1 %16, i8* null, i8* %17
  br i1 %16, label %22, label %19

19:                                               ; preds = %5
  %20 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %15, i64 0, i32 1
  %21 = load i64, i64* %20, align 8, !noalias !11
  br label %22

22:                                               ; preds = %5, %19
  %23 = phi i64 [ %21, %19 ], [ 0, %5 ]
  %24 = bitcast %"class.pdfium::span"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24)
  %25 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %6, i64 0, i32 0, i32 0
  store i8* %18, i8** %25, align 8
  %26 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %6, i64 0, i32 1
  store i64 %23, i64* %26, align 8
  %27 = call zeroext i1 @_ZN18CPDF_CryptoHandler11CryptStreamEPvN6pdfium4spanIKhEER13CFX_BinaryBufb(%class.CPDF_CryptoHandler* %1, i8* %13, %"class.pdfium::span"* nonnull %6, %class.CFX_BinaryBuf* nonnull dereferenceable(40) %8, i1 zeroext false) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24)
  %28 = icmp eq i8* %13, null
  br i1 %28, label %51, label %29

29:                                               ; preds = %22
  %30 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %1, i64 0, i32 1
  %31 = load i32, i32* %30, align 8
  switch i32 %31, label %33 [
    i32 0, label %51
    i32 1, label %32
  ]

32:                                               ; preds = %29
  call void @_Z7FX_FreePv(i8* nonnull %13) #8
  br label %51

33:                                               ; preds = %29
  %34 = getelementptr inbounds i8, i8* %13, i64 4
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 16
  br i1 %37, label %38, label %50

38:                                               ; preds = %33
  %39 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #8
  %40 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  %41 = getelementptr inbounds i8, i8* %13, i64 8
  %42 = bitcast i8* %41 to %struct.CRYPT_aes_context*
  %43 = getelementptr inbounds i8, i8* %13, i64 1008
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %39, i8 -86, i64 16, i1 false) #8
  call void @_Z16CRYPT_AESDecryptP17CRYPT_aes_contextPhPKhj(%struct.CRYPT_aes_context* %42, i8* nonnull %39, i8* %43, i32 16) #8
  %44 = load i8, i8* %40, align 1
  %45 = icmp ult i8 %44, 17
  br i1 %45, label %46, label %49

46:                                               ; preds = %38
  %47 = zext i8 %44 to i64
  %48 = sub nuw nsw i64 16, %47
  call void @_ZN13CFX_BinaryBuf11AppendBlockEPKvm(%class.CFX_BinaryBuf* nonnull %8, i8* nonnull %39, i64 %48) #8
  br label %49

49:                                               ; preds = %46, %38
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #8
  br label %50

50:                                               ; preds = %49, %33
  call void @_Z7FX_FreePv(i8* nonnull %13) #8
  br label %51

51:                                               ; preds = %22, %29, %32, %50
  %52 = load i8*, i8** %11, align 8
  %53 = load i64, i64* %10, align 8
  call void @_ZN5fxcrt10ByteStringC1EPKhm(%"class.fxcrt::ByteString"* %0, i8* %52, i64 %53) #8
  call void @_ZN13CFX_BinaryBufD1Ev(%class.CFX_BinaryBuf* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %9) #8
  ret void
}

declare void @_ZN13CFX_BinaryBufC1Ev(%class.CFX_BinaryBuf*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN18CPDF_CryptoHandler12DecryptStartEjj(%class.CPDF_CryptoHandler*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN18CPDF_CryptoHandler10CryptStartEjjb(%class.CPDF_CryptoHandler* %0, i32 %1, i32 %2, i1 zeroext false)
  ret i8* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18CPDF_CryptoHandler13DecryptStreamEPvN6pdfium4spanIKhEER13CFX_BinaryBuf(%class.CPDF_CryptoHandler* nocapture readonly, i8*, %"class.pdfium::span"* nocapture readonly, %class.CFX_BinaryBuf* dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.pdfium::span", align 8
  %6 = bitcast %"class.pdfium::span"* %5 to i8*
  %7 = bitcast %"class.pdfium::span"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 %7, i64 16, i1 false)
  %8 = call zeroext i1 @_ZN18CPDF_CryptoHandler11CryptStreamEPvN6pdfium4spanIKhEER13CFX_BinaryBufb(%class.CPDF_CryptoHandler* %0, i8* %1, %"class.pdfium::span"* nonnull %5, %class.CFX_BinaryBuf* dereferenceable(40) %3, i1 zeroext false)
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18CPDF_CryptoHandler13DecryptFinishEPvR13CFX_BinaryBuf(%class.CPDF_CryptoHandler* nocapture readonly, i8*, %class.CFX_BinaryBuf* dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %4 = alloca [16 x i8], align 16
  %5 = icmp eq i8* %1, null
  br i1 %5, label %28, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  switch i32 %8, label %10 [
    i32 0, label %28
    i32 1, label %9
  ]

9:                                                ; preds = %6
  tail call void @_Z7FX_FreePv(i8* nonnull %1) #8
  br label %28

10:                                               ; preds = %6
  %11 = getelementptr inbounds i8, i8* %1, i64 4
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 16
  br i1 %14, label %15, label %27

15:                                               ; preds = %10
  %16 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #8
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 15
  %18 = getelementptr inbounds i8, i8* %1, i64 8
  %19 = bitcast i8* %18 to %struct.CRYPT_aes_context*
  %20 = getelementptr inbounds i8, i8* %1, i64 1008
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 16, i1 false) #8
  call void @_Z16CRYPT_AESDecryptP17CRYPT_aes_contextPhPKhj(%struct.CRYPT_aes_context* %19, i8* nonnull %16, i8* %20, i32 16) #8
  %21 = load i8, i8* %17, align 1
  %22 = icmp ult i8 %21, 17
  br i1 %22, label %23, label %26

23:                                               ; preds = %15
  %24 = zext i8 %21 to i64
  %25 = sub nuw nsw i64 16, %24
  call void @_ZN13CFX_BinaryBuf11AppendBlockEPKvm(%class.CFX_BinaryBuf* %2, i8* nonnull %16, i64 %25) #8
  br label %26

26:                                               ; preds = %23, %15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #8
  br label %27

27:                                               ; preds = %26, %10
  call void @_Z7FX_FreePv(i8* nonnull %1) #8
  br label %28

28:                                               ; preds = %3, %6, %9, %27
  %29 = phi i1 [ true, %9 ], [ true, %27 ], [ false, %3 ], [ true, %6 ]
  ret i1 %29
}

declare void @_ZN5fxcrt10ByteStringC1EPKhm(%"class.fxcrt::ByteString"*, i8*, i64) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN13CFX_BinaryBufD1Ev(%class.CFX_BinaryBuf*) unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN18CPDF_CryptoHandler14DecryptGetSizeEj(%class.CPDF_CryptoHandler* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 2
  %6 = add i32 %1, -16
  %7 = select i1 %5, i32 %6, i32 %1
  ret i32 %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK18CPDF_CryptoHandler11IsCipherAESEv(%class.CPDF_CryptoHandler* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 2
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18CPDF_CryptoHandler17DecryptObjectTreeEN5fxcrt9RetainPtrI11CPDF_ObjectEE(%class.CPDF_CryptoHandler*, %"class.fxcrt::RetainPtr.22"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to %"class.pdfium::span"*
  %5 = alloca [16 x i8], align 16
  %6 = alloca %"class.std::__1::stack", align 8
  %7 = alloca %class.CPDF_NonConstObjectWalker, align 8
  %8 = alloca %"class.fxcrt::ByteString", align 8
  %9 = alloca %"class.fxcrt::ByteString", align 8
  %10 = alloca %"class.fxcrt::ByteString", align 8
  %11 = alloca %"class.fxcrt::ByteString", align 8
  %12 = alloca %"class.pdfium::span", align 8
  %13 = alloca %class.CFX_BinaryBuf, align 8
  %14 = alloca <2 x i64>, align 16
  %15 = bitcast <2 x i64>* %14 to %"class.pdfium::span.17"*
  %16 = alloca %"class.pdfium::span", align 8
  %17 = getelementptr inbounds %"class.fxcrt::RetainPtr.22", %"class.fxcrt::RetainPtr.22"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = load %class.CPDF_Object*, %class.CPDF_Object** %17, align 8
  %19 = icmp eq %class.CPDF_Object* %18, null
  br i1 %19, label %1047, label %20

20:                                               ; preds = %2
  %21 = bitcast %"class.std::__1::stack"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %21) #8
  %22 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0, i32 0, i32 2
  %25 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %26 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 48, i1 false) #8
  %28 = getelementptr inbounds %class.CPDF_Object, %class.CPDF_Object* %18, i64 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds %class.CPDF_Object, %class.CPDF_Object* %18, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = bitcast %class.CPDF_NonConstObjectWalker* %7 to i8*
  %33 = getelementptr inbounds %class.CPDF_NonConstObjectWalker, %class.CPDF_NonConstObjectWalker* %7, i64 0, i32 0
  %34 = getelementptr inbounds %class.CPDF_NonConstObjectWalker, %class.CPDF_NonConstObjectWalker* %7, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %35 = getelementptr inbounds %class.CPDF_NonConstObjectWalker, %class.CPDF_NonConstObjectWalker* %7, i64 0, i32 0, i32 2
  %36 = bitcast %"class.fxcrt::ByteString"* %8 to i8*
  %37 = bitcast %"class.fxcrt::ByteString"* %9 to i8*
  %38 = bitcast %"class.fxcrt::ByteString"* %10 to i8*
  %39 = bitcast %"class.fxcrt::ByteString"* %11 to i8*
  %40 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 1
  %41 = bitcast %class.CFX_BinaryBuf* %13 to i8*
  %42 = getelementptr inbounds %class.CFX_BinaryBuf, %class.CFX_BinaryBuf* %13, i64 0, i32 3
  %43 = bitcast <2 x i64>* %14 to i8*
  %44 = bitcast <2 x i64>* %3 to i8*
  %45 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 0
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 15
  %47 = bitcast %"class.pdfium::span"* %16 to i8*
  %48 = bitcast %"class.pdfium::span"* %12 to i8*
  %49 = bitcast %struct.MayBeSignature*** %24 to i64*
  %50 = bitcast %struct.MayBeSignature*** %23 to i64*
  %51 = bitcast %struct.MayBeSignature*** %25 to i64*
  %52 = bitcast %"class.std::__1::stack"* %6 to i64*
  %53 = bitcast %class.CFX_BinaryBuf* %13 to i8*
  br label %54

54:                                               ; preds = %20, %1033
  %55 = phi %struct.MayBeSignature** [ null, %20 ], [ %1034, %1033 ]
  %56 = phi i64 [ 0, %20 ], [ %981, %1033 ]
  %57 = phi i64 [ 0, %20 ], [ %1035, %1033 ]
  %58 = phi %struct.MayBeSignature** [ null, %20 ], [ %1036, %1033 ]
  %59 = phi i64 [ 0, %20 ], [ %984, %1033 ]
  %60 = phi i64 [ 0, %20 ], [ %1037, %1033 ]
  %61 = phi %struct.MayBeSignature** [ null, %20 ], [ %1038, %1033 ]
  %62 = phi %struct.MayBeSignature** [ null, %20 ], [ %1039, %1033 ]
  %63 = phi i64 [ 0, %20 ], [ %1040, %1033 ]
  %64 = phi i64 [ 0, %20 ], [ %1041, %1033 ]
  %65 = phi i64 [ 0, %20 ], [ %1042, %1033 ]
  %66 = phi %class.CPDF_Object* [ %18, %20 ], [ %1043, %1033 ]
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %32) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 80, i1 false)
  call void @_ZN17CPDF_ObjectWalkerC2EPK11CPDF_Object(%class.CPDF_ObjectWalker* nonnull %33, %class.CPDF_Object* nonnull %66) #8
  %67 = call %class.CPDF_Object* @_ZN17CPDF_ObjectWalker7GetNextEv(%class.CPDF_ObjectWalker* nonnull %33) #8
  %68 = icmp eq %class.CPDF_Object* %67, null
  br i1 %68, label %979, label %69

69:                                               ; preds = %54, %964
  %70 = phi %class.CPDF_Object* [ %977, %964 ], [ %67, %54 ]
  %71 = phi i64 [ %976, %964 ], [ %65, %54 ]
  %72 = phi i64 [ %975, %964 ], [ %64, %54 ]
  %73 = phi i64 [ %974, %964 ], [ %63, %54 ]
  %74 = phi i64 [ %973, %964 ], [ %60, %54 ]
  %75 = phi %struct.MayBeSignature** [ %972, %964 ], [ %62, %54 ]
  %76 = phi %struct.MayBeSignature** [ %971, %964 ], [ %61, %54 ]
  %77 = phi i64 [ %970, %964 ], [ %60, %54 ]
  %78 = phi i64 [ %969, %964 ], [ %59, %54 ]
  %79 = phi %struct.MayBeSignature** [ %968, %964 ], [ %58, %54 ]
  %80 = phi i64 [ %967, %964 ], [ %57, %54 ]
  %81 = phi i64 [ %966, %964 ], [ %56, %54 ]
  %82 = phi %struct.MayBeSignature** [ %965, %964 ], [ %55, %54 ]
  %83 = load %class.CPDF_Object*, %class.CPDF_Object** %34, align 8
  %84 = icmp eq %class.CPDF_Object* %83, null
  br i1 %84, label %91, label %85

85:                                               ; preds = %69
  %86 = bitcast %class.CPDF_Object* %83 to %class.CPDF_Dictionary* (%class.CPDF_Object*)***
  %87 = load %class.CPDF_Dictionary* (%class.CPDF_Object*)**, %class.CPDF_Dictionary* (%class.CPDF_Object*)*** %86, align 8
  %88 = getelementptr inbounds %class.CPDF_Dictionary* (%class.CPDF_Object*)*, %class.CPDF_Dictionary* (%class.CPDF_Object*)** %87, i64 12
  %89 = load %class.CPDF_Dictionary* (%class.CPDF_Object*)*, %class.CPDF_Dictionary* (%class.CPDF_Object*)** %88, align 8
  %90 = call %class.CPDF_Dictionary* %89(%class.CPDF_Object* nonnull %83) #8
  br label %91

91:                                               ; preds = %69, %85
  %92 = phi %class.CPDF_Dictionary* [ %90, %85 ], [ null, %69 ]
  %93 = call zeroext i1 @_ZNK5fxcrt10ByteStringeqEPKc(%"class.fxcrt::ByteString"* %35, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @_ZN12_GLOBAL__N_112kContentsKeyE, i64 0, i64 0)) #8
  br i1 %93, label %94, label %883

94:                                               ; preds = %91
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #8
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @_ZN12_GLOBAL__N_18kTypeKeyE, i64 0, i64 0)) #8
  %95 = call zeroext i1 @_ZNK15CPDF_Dictionary8KeyExistERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %92, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %8) #8
  br i1 %95, label %96, label %97

96:                                               ; preds = %94
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #8
  br label %99

97:                                               ; preds = %94
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #8
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZN6pdfium11form_fieldsL3kFTE, i64 0, i64 0)) #8
  %98 = call zeroext i1 @_ZNK15CPDF_Dictionary8KeyExistERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %92, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %9) #8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #8
  br i1 %98, label %99, label %883

99:                                               ; preds = %96, %97
  %100 = sub i64 %71, %72
  %101 = icmp eq i64 %100, 0
  %102 = shl i64 %100, 5
  %103 = add i64 %102, -1
  %104 = select i1 %101, i64 0, i64 %103
  %105 = add i64 %74, %73
  %106 = icmp eq i64 %104, %105
  %107 = inttoptr i64 %72 to %struct.MayBeSignature**
  %108 = inttoptr i64 %71 to %struct.MayBeSignature**
  br i1 %106, label %109, label %858

109:                                              ; preds = %99
  %110 = icmp ugt i64 %73, 255
  br i1 %110, label %111, label %252

111:                                              ; preds = %109
  %112 = add i64 %73, -256
  store i64 %112, i64* %26, align 8
  %113 = inttoptr i64 %72 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %107, i64 1
  store %struct.MayBeSignature** %115, %struct.MayBeSignature*** %23, align 8
  %116 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %25, align 8
  %117 = icmp eq %struct.MayBeSignature** %116, %108
  %118 = ptrtoint %struct.MayBeSignature** %116 to i64
  %119 = inttoptr i64 %71 to i64*
  br i1 %117, label %120, label %247

120:                                              ; preds = %111
  %121 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %22, align 8
  %122 = icmp ugt %struct.MayBeSignature** %115, %121
  %123 = ptrtoint %struct.MayBeSignature** %121 to i64
  br i1 %122, label %124, label %143

124:                                              ; preds = %120
  %125 = ptrtoint %struct.MayBeSignature** %115 to i64
  %126 = sub i64 %125, %123
  %127 = ashr exact i64 %126, 3
  %128 = add nsw i64 %127, 1
  %129 = sdiv i64 %128, -2
  %130 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %115, i64 %129
  %131 = sub i64 %71, %125
  %132 = ashr exact i64 %131, 3
  %133 = icmp eq i64 %131, 0
  br i1 %133, label %138, label %134

134:                                              ; preds = %124
  %135 = bitcast %struct.MayBeSignature** %130 to i8*
  %136 = bitcast %struct.MayBeSignature** %115 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %135, i8* align 8 %136, i64 %131, i1 false) #8
  %137 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %23, align 8
  br label %138

138:                                              ; preds = %134, %124
  %139 = phi %struct.MayBeSignature** [ %115, %124 ], [ %137, %134 ]
  %140 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %130, i64 %132
  store %struct.MayBeSignature** %140, %struct.MayBeSignature*** %24, align 8
  %141 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %139, i64 %129
  store %struct.MayBeSignature** %141, %struct.MayBeSignature*** %23, align 8
  %142 = bitcast %struct.MayBeSignature** %140 to i64*
  br label %247

143:                                              ; preds = %120
  %144 = sub i64 %118, %123
  %145 = ashr exact i64 %144, 2
  %146 = icmp eq i64 %144, 0
  %147 = select i1 %146, i64 1, i64 %145
  %148 = icmp ugt i64 %147, 2305843009213693951
  br i1 %148, label %149, label %150

149:                                              ; preds = %143
  call void @abort() #9
  unreachable

150:                                              ; preds = %143
  %151 = lshr i64 %147, 2
  %152 = shl i64 %147, 3
  %153 = call i8* @_Znwm(i64 %152) #10
  %154 = bitcast i8* %153 to %struct.MayBeSignature**
  %155 = ptrtoint i8* %153 to i64
  %156 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %154, i64 %151
  %157 = ptrtoint %struct.MayBeSignature** %156 to i64
  %158 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %154, i64 %147
  %159 = ptrtoint %struct.MayBeSignature** %158 to i64
  %160 = ptrtoint %struct.MayBeSignature** %115 to i64
  %161 = sub i64 %71, %160
  %162 = ashr exact i64 %161, 3
  %163 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %156, i64 %162
  %164 = icmp eq i64 %161, 0
  br i1 %164, label %240, label %165

165:                                              ; preds = %150
  %166 = add i64 %161, -8
  %167 = lshr i64 %166, 3
  %168 = add nuw nsw i64 %167, 1
  %169 = and i64 %168, 7
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %186, label %171

171:                                              ; preds = %165, %171
  %172 = phi %struct.MayBeSignature** [ %179, %171 ], [ %156, %165 ]
  %173 = phi i64 [ %180, %171 ], [ %157, %165 ]
  %174 = phi %struct.MayBeSignature** [ %181, %171 ], [ %115, %165 ]
  %175 = phi i64 [ %182, %171 ], [ %169, %165 ]
  %176 = bitcast %struct.MayBeSignature** %174 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = inttoptr i64 %173 to i64*
  store i64 %177, i64* %178, align 8
  %179 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %172, i64 1
  %180 = ptrtoint %struct.MayBeSignature** %179 to i64
  %181 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %174, i64 1
  %182 = add i64 %175, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %171, !llvm.loop !14

184:                                              ; preds = %171
  %185 = ptrtoint %struct.MayBeSignature** %179 to i64
  br label %186

186:                                              ; preds = %165, %184
  %187 = phi %struct.MayBeSignature** [ %156, %165 ], [ %179, %184 ]
  %188 = phi i64 [ %157, %165 ], [ %185, %184 ]
  %189 = phi %struct.MayBeSignature** [ %115, %165 ], [ %181, %184 ]
  %190 = icmp ult i64 %166, 56
  br i1 %190, label %237, label %191

191:                                              ; preds = %186, %191
  %192 = phi %struct.MayBeSignature** [ %233, %191 ], [ %187, %186 ]
  %193 = phi i64 [ %234, %191 ], [ %188, %186 ]
  %194 = phi %struct.MayBeSignature** [ %235, %191 ], [ %189, %186 ]
  %195 = bitcast %struct.MayBeSignature** %194 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = inttoptr i64 %193 to i64*
  store i64 %196, i64* %197, align 8
  %198 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %192, i64 1
  %199 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %194, i64 1
  %200 = bitcast %struct.MayBeSignature** %199 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = bitcast %struct.MayBeSignature** %198 to i64*
  store i64 %201, i64* %202, align 8
  %203 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %192, i64 2
  %204 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %194, i64 2
  %205 = bitcast %struct.MayBeSignature** %204 to i64*
  %206 = load i64, i64* %205, align 8
  %207 = bitcast %struct.MayBeSignature** %203 to i64*
  store i64 %206, i64* %207, align 8
  %208 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %192, i64 3
  %209 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %194, i64 3
  %210 = bitcast %struct.MayBeSignature** %209 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = bitcast %struct.MayBeSignature** %208 to i64*
  store i64 %211, i64* %212, align 8
  %213 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %192, i64 4
  %214 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %194, i64 4
  %215 = bitcast %struct.MayBeSignature** %214 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = bitcast %struct.MayBeSignature** %213 to i64*
  store i64 %216, i64* %217, align 8
  %218 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %192, i64 5
  %219 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %194, i64 5
  %220 = bitcast %struct.MayBeSignature** %219 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = bitcast %struct.MayBeSignature** %218 to i64*
  store i64 %221, i64* %222, align 8
  %223 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %192, i64 6
  %224 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %194, i64 6
  %225 = bitcast %struct.MayBeSignature** %224 to i64*
  %226 = load i64, i64* %225, align 8
  %227 = bitcast %struct.MayBeSignature** %223 to i64*
  store i64 %226, i64* %227, align 8
  %228 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %192, i64 7
  %229 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %194, i64 7
  %230 = bitcast %struct.MayBeSignature** %229 to i64*
  %231 = load i64, i64* %230, align 8
  %232 = bitcast %struct.MayBeSignature** %228 to i64*
  store i64 %231, i64* %232, align 8
  %233 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %192, i64 8
  %234 = ptrtoint %struct.MayBeSignature** %233 to i64
  %235 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %194, i64 8
  %236 = icmp eq %struct.MayBeSignature** %163, %233
  br i1 %236, label %237, label %191

237:                                              ; preds = %191, %186
  %238 = ptrtoint %struct.MayBeSignature** %163 to i64
  %239 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %22, align 8
  br label %240

240:                                              ; preds = %237, %150
  %241 = phi %struct.MayBeSignature** [ %239, %237 ], [ %121, %150 ]
  %242 = phi i64 [ %238, %237 ], [ %157, %150 ]
  store i64 %155, i64* %52, align 8
  store i64 %157, i64* %50, align 8
  store i64 %242, i64* %49, align 8
  store i64 %159, i64* %51, align 8
  %243 = icmp eq %struct.MayBeSignature** %241, null
  %244 = inttoptr i64 %242 to i64*
  br i1 %243, label %247, label %245

245:                                              ; preds = %240
  %246 = bitcast %struct.MayBeSignature** %241 to i8*
  call void @_ZdlPv(i8* %246) #10
  br label %247

247:                                              ; preds = %245, %240, %138, %111
  %248 = phi i64* [ %244, %245 ], [ %244, %240 ], [ %142, %138 ], [ %119, %111 ]
  store i64 %114, i64* %248, align 8
  %249 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %24, align 8
  %250 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %249, i64 1
  store %struct.MayBeSignature** %250, %struct.MayBeSignature*** %24, align 8
  %251 = ptrtoint %struct.MayBeSignature** %250 to i64
  br label %858

252:                                              ; preds = %109
  %253 = ashr exact i64 %100, 3
  %254 = load i64, i64* %51, align 8
  %255 = load i64, i64* %52, align 8
  %256 = sub i64 %254, %255
  %257 = ashr exact i64 %256, 3
  %258 = icmp ult i64 %253, %257
  %259 = inttoptr i64 %254 to %struct.MayBeSignature**
  %260 = inttoptr i64 %255 to %struct.MayBeSignature**
  br i1 %258, label %261, label %646

261:                                              ; preds = %252
  %262 = icmp eq i64 %254, %71
  %263 = call i8* @_Znwm(i64 4096) #10
  %264 = ptrtoint i8* %263 to i64
  br i1 %262, label %389, label %265

265:                                              ; preds = %261
  %266 = icmp eq %struct.MayBeSignature** %108, %259
  %267 = inttoptr i64 %71 to i64*
  br i1 %266, label %268, label %384

268:                                              ; preds = %265
  %269 = icmp ugt %struct.MayBeSignature** %107, %260
  br i1 %269, label %270, label %285

270:                                              ; preds = %268
  %271 = sub i64 %72, %255
  %272 = ashr exact i64 %271, 3
  %273 = add nsw i64 %272, 1
  %274 = sdiv i64 %273, -2
  %275 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %107, i64 %274
  br i1 %101, label %280, label %276

276:                                              ; preds = %270
  %277 = bitcast %struct.MayBeSignature** %275 to i8*
  %278 = inttoptr i64 %72 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %277, i8* align 8 %278, i64 %100, i1 false) #8
  %279 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %23, align 8
  br label %280

280:                                              ; preds = %276, %270
  %281 = phi %struct.MayBeSignature** [ %107, %270 ], [ %279, %276 ]
  %282 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %275, i64 %253
  store %struct.MayBeSignature** %282, %struct.MayBeSignature*** %24, align 8
  %283 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %281, i64 %274
  store %struct.MayBeSignature** %283, %struct.MayBeSignature*** %23, align 8
  %284 = bitcast %struct.MayBeSignature** %282 to i64*
  br label %384

285:                                              ; preds = %268
  %286 = ashr exact i64 %256, 2
  %287 = icmp eq i64 %256, 0
  %288 = select i1 %287, i64 1, i64 %286
  %289 = icmp ugt i64 %288, 2305843009213693951
  br i1 %289, label %290, label %291

290:                                              ; preds = %285
  call void @abort() #9
  unreachable

291:                                              ; preds = %285
  %292 = lshr i64 %288, 2
  %293 = shl i64 %288, 3
  %294 = call i8* @_Znwm(i64 %293) #10
  %295 = bitcast i8* %294 to %struct.MayBeSignature**
  %296 = ptrtoint i8* %294 to i64
  %297 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %295, i64 %292
  %298 = ptrtoint %struct.MayBeSignature** %297 to i64
  %299 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %295, i64 %288
  %300 = ptrtoint %struct.MayBeSignature** %299 to i64
  %301 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %297, i64 %253
  br i1 %101, label %377, label %302

302:                                              ; preds = %291
  %303 = add i64 %100, -8
  %304 = lshr i64 %303, 3
  %305 = add nuw nsw i64 %304, 1
  %306 = and i64 %305, 7
  %307 = icmp eq i64 %306, 0
  br i1 %307, label %323, label %308

308:                                              ; preds = %302, %308
  %309 = phi %struct.MayBeSignature** [ %316, %308 ], [ %297, %302 ]
  %310 = phi i64 [ %317, %308 ], [ %298, %302 ]
  %311 = phi %struct.MayBeSignature** [ %318, %308 ], [ %107, %302 ]
  %312 = phi i64 [ %319, %308 ], [ %306, %302 ]
  %313 = bitcast %struct.MayBeSignature** %311 to i64*
  %314 = load i64, i64* %313, align 8
  %315 = inttoptr i64 %310 to i64*
  store i64 %314, i64* %315, align 8
  %316 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %309, i64 1
  %317 = ptrtoint %struct.MayBeSignature** %316 to i64
  %318 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %311, i64 1
  %319 = add i64 %312, -1
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %321, label %308, !llvm.loop !16

321:                                              ; preds = %308
  %322 = ptrtoint %struct.MayBeSignature** %316 to i64
  br label %323

323:                                              ; preds = %302, %321
  %324 = phi %struct.MayBeSignature** [ %297, %302 ], [ %316, %321 ]
  %325 = phi i64 [ %298, %302 ], [ %322, %321 ]
  %326 = phi %struct.MayBeSignature** [ %107, %302 ], [ %318, %321 ]
  %327 = icmp ult i64 %303, 56
  br i1 %327, label %374, label %328

328:                                              ; preds = %323, %328
  %329 = phi %struct.MayBeSignature** [ %370, %328 ], [ %324, %323 ]
  %330 = phi i64 [ %371, %328 ], [ %325, %323 ]
  %331 = phi %struct.MayBeSignature** [ %372, %328 ], [ %326, %323 ]
  %332 = bitcast %struct.MayBeSignature** %331 to i64*
  %333 = load i64, i64* %332, align 8
  %334 = inttoptr i64 %330 to i64*
  store i64 %333, i64* %334, align 8
  %335 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %329, i64 1
  %336 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %331, i64 1
  %337 = bitcast %struct.MayBeSignature** %336 to i64*
  %338 = load i64, i64* %337, align 8
  %339 = bitcast %struct.MayBeSignature** %335 to i64*
  store i64 %338, i64* %339, align 8
  %340 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %329, i64 2
  %341 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %331, i64 2
  %342 = bitcast %struct.MayBeSignature** %341 to i64*
  %343 = load i64, i64* %342, align 8
  %344 = bitcast %struct.MayBeSignature** %340 to i64*
  store i64 %343, i64* %344, align 8
  %345 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %329, i64 3
  %346 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %331, i64 3
  %347 = bitcast %struct.MayBeSignature** %346 to i64*
  %348 = load i64, i64* %347, align 8
  %349 = bitcast %struct.MayBeSignature** %345 to i64*
  store i64 %348, i64* %349, align 8
  %350 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %329, i64 4
  %351 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %331, i64 4
  %352 = bitcast %struct.MayBeSignature** %351 to i64*
  %353 = load i64, i64* %352, align 8
  %354 = bitcast %struct.MayBeSignature** %350 to i64*
  store i64 %353, i64* %354, align 8
  %355 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %329, i64 5
  %356 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %331, i64 5
  %357 = bitcast %struct.MayBeSignature** %356 to i64*
  %358 = load i64, i64* %357, align 8
  %359 = bitcast %struct.MayBeSignature** %355 to i64*
  store i64 %358, i64* %359, align 8
  %360 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %329, i64 6
  %361 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %331, i64 6
  %362 = bitcast %struct.MayBeSignature** %361 to i64*
  %363 = load i64, i64* %362, align 8
  %364 = bitcast %struct.MayBeSignature** %360 to i64*
  store i64 %363, i64* %364, align 8
  %365 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %329, i64 7
  %366 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %331, i64 7
  %367 = bitcast %struct.MayBeSignature** %366 to i64*
  %368 = load i64, i64* %367, align 8
  %369 = bitcast %struct.MayBeSignature** %365 to i64*
  store i64 %368, i64* %369, align 8
  %370 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %329, i64 8
  %371 = ptrtoint %struct.MayBeSignature** %370 to i64
  %372 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %331, i64 8
  %373 = icmp eq %struct.MayBeSignature** %301, %370
  br i1 %373, label %374, label %328

374:                                              ; preds = %328, %323
  %375 = ptrtoint %struct.MayBeSignature** %301 to i64
  %376 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %22, align 8
  br label %377

377:                                              ; preds = %374, %291
  %378 = phi %struct.MayBeSignature** [ %376, %374 ], [ %260, %291 ]
  %379 = phi i64 [ %375, %374 ], [ %298, %291 ]
  store i64 %296, i64* %52, align 8
  store i64 %298, i64* %50, align 8
  store i64 %379, i64* %49, align 8
  store i64 %300, i64* %51, align 8
  %380 = icmp eq %struct.MayBeSignature** %378, null
  %381 = inttoptr i64 %379 to i64*
  br i1 %380, label %384, label %382

382:                                              ; preds = %377
  %383 = bitcast %struct.MayBeSignature** %378 to i8*
  call void @_ZdlPv(i8* %383) #10
  br label %384

384:                                              ; preds = %382, %377, %280, %265
  %385 = phi i64* [ %381, %382 ], [ %381, %377 ], [ %284, %280 ], [ %267, %265 ]
  store i64 %264, i64* %385, align 8
  %386 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %24, align 8
  %387 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %386, i64 1
  store %struct.MayBeSignature** %387, %struct.MayBeSignature*** %24, align 8
  %388 = ptrtoint %struct.MayBeSignature** %387 to i64
  br label %858

389:                                              ; preds = %261
  %390 = icmp eq %struct.MayBeSignature** %107, %260
  br i1 %390, label %391, label %502

391:                                              ; preds = %389
  %392 = icmp ult %struct.MayBeSignature** %108, %259
  br i1 %392, label %393, label %403

393:                                              ; preds = %391
  br i1 %101, label %400, label %394

394:                                              ; preds = %393
  %395 = sub nsw i64 0, %253
  %396 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %108, i64 %395
  %397 = bitcast %struct.MayBeSignature** %396 to i8*
  %398 = inttoptr i64 %72 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %397, i8* align 8 %398, i64 %100, i1 false) #8
  %399 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %24, align 8
  br label %400

400:                                              ; preds = %394, %393
  %401 = phi %struct.MayBeSignature** [ %399, %394 ], [ %108, %393 ]
  %402 = phi %struct.MayBeSignature** [ %396, %394 ], [ %108, %393 ]
  store %struct.MayBeSignature** %402, %struct.MayBeSignature*** %23, align 8
  store %struct.MayBeSignature** %401, %struct.MayBeSignature*** %24, align 8
  br label %502

403:                                              ; preds = %391
  %404 = ashr exact i64 %256, 2
  %405 = icmp eq i64 %256, 0
  %406 = select i1 %405, i64 1, i64 %404
  %407 = icmp ugt i64 %406, 2305843009213693951
  br i1 %407, label %408, label %409

408:                                              ; preds = %403
  call void @abort() #9
  unreachable

409:                                              ; preds = %403
  %410 = add nuw nsw i64 %406, 3
  %411 = lshr i64 %410, 2
  %412 = shl i64 %406, 3
  %413 = call i8* @_Znwm(i64 %412) #10
  %414 = bitcast i8* %413 to %struct.MayBeSignature**
  %415 = ptrtoint i8* %413 to i64
  %416 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %414, i64 %411
  %417 = ptrtoint %struct.MayBeSignature** %416 to i64
  %418 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %414, i64 %406
  %419 = ptrtoint %struct.MayBeSignature** %418 to i64
  %420 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %416, i64 %253
  br i1 %101, label %496, label %421

421:                                              ; preds = %409
  %422 = add i64 %100, -8
  %423 = lshr i64 %422, 3
  %424 = add nuw nsw i64 %423, 1
  %425 = and i64 %424, 7
  %426 = icmp eq i64 %425, 0
  br i1 %426, label %442, label %427

427:                                              ; preds = %421, %427
  %428 = phi %struct.MayBeSignature** [ %435, %427 ], [ %416, %421 ]
  %429 = phi i64 [ %436, %427 ], [ %417, %421 ]
  %430 = phi %struct.MayBeSignature** [ %437, %427 ], [ %107, %421 ]
  %431 = phi i64 [ %438, %427 ], [ %425, %421 ]
  %432 = bitcast %struct.MayBeSignature** %430 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = inttoptr i64 %429 to i64*
  store i64 %433, i64* %434, align 8
  %435 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %428, i64 1
  %436 = ptrtoint %struct.MayBeSignature** %435 to i64
  %437 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %430, i64 1
  %438 = add i64 %431, -1
  %439 = icmp eq i64 %438, 0
  br i1 %439, label %440, label %427, !llvm.loop !17

440:                                              ; preds = %427
  %441 = ptrtoint %struct.MayBeSignature** %435 to i64
  br label %442

442:                                              ; preds = %421, %440
  %443 = phi %struct.MayBeSignature** [ %416, %421 ], [ %435, %440 ]
  %444 = phi i64 [ %417, %421 ], [ %441, %440 ]
  %445 = phi %struct.MayBeSignature** [ %107, %421 ], [ %437, %440 ]
  %446 = icmp ult i64 %422, 56
  br i1 %446, label %493, label %447

447:                                              ; preds = %442, %447
  %448 = phi %struct.MayBeSignature** [ %489, %447 ], [ %443, %442 ]
  %449 = phi i64 [ %490, %447 ], [ %444, %442 ]
  %450 = phi %struct.MayBeSignature** [ %491, %447 ], [ %445, %442 ]
  %451 = bitcast %struct.MayBeSignature** %450 to i64*
  %452 = load i64, i64* %451, align 8
  %453 = inttoptr i64 %449 to i64*
  store i64 %452, i64* %453, align 8
  %454 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %448, i64 1
  %455 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %450, i64 1
  %456 = bitcast %struct.MayBeSignature** %455 to i64*
  %457 = load i64, i64* %456, align 8
  %458 = bitcast %struct.MayBeSignature** %454 to i64*
  store i64 %457, i64* %458, align 8
  %459 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %448, i64 2
  %460 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %450, i64 2
  %461 = bitcast %struct.MayBeSignature** %460 to i64*
  %462 = load i64, i64* %461, align 8
  %463 = bitcast %struct.MayBeSignature** %459 to i64*
  store i64 %462, i64* %463, align 8
  %464 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %448, i64 3
  %465 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %450, i64 3
  %466 = bitcast %struct.MayBeSignature** %465 to i64*
  %467 = load i64, i64* %466, align 8
  %468 = bitcast %struct.MayBeSignature** %464 to i64*
  store i64 %467, i64* %468, align 8
  %469 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %448, i64 4
  %470 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %450, i64 4
  %471 = bitcast %struct.MayBeSignature** %470 to i64*
  %472 = load i64, i64* %471, align 8
  %473 = bitcast %struct.MayBeSignature** %469 to i64*
  store i64 %472, i64* %473, align 8
  %474 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %448, i64 5
  %475 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %450, i64 5
  %476 = bitcast %struct.MayBeSignature** %475 to i64*
  %477 = load i64, i64* %476, align 8
  %478 = bitcast %struct.MayBeSignature** %474 to i64*
  store i64 %477, i64* %478, align 8
  %479 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %448, i64 6
  %480 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %450, i64 6
  %481 = bitcast %struct.MayBeSignature** %480 to i64*
  %482 = load i64, i64* %481, align 8
  %483 = bitcast %struct.MayBeSignature** %479 to i64*
  store i64 %482, i64* %483, align 8
  %484 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %448, i64 7
  %485 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %450, i64 7
  %486 = bitcast %struct.MayBeSignature** %485 to i64*
  %487 = load i64, i64* %486, align 8
  %488 = bitcast %struct.MayBeSignature** %484 to i64*
  store i64 %487, i64* %488, align 8
  %489 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %448, i64 8
  %490 = ptrtoint %struct.MayBeSignature** %489 to i64
  %491 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %450, i64 8
  %492 = icmp eq %struct.MayBeSignature** %420, %489
  br i1 %492, label %493, label %447

493:                                              ; preds = %447, %442
  %494 = ptrtoint %struct.MayBeSignature** %420 to i64
  %495 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %22, align 8
  br label %496

496:                                              ; preds = %493, %409
  %497 = phi %struct.MayBeSignature** [ %495, %493 ], [ %107, %409 ]
  %498 = phi i64 [ %494, %493 ], [ %417, %409 ]
  store i64 %415, i64* %52, align 8
  store i64 %417, i64* %50, align 8
  store i64 %498, i64* %49, align 8
  store i64 %419, i64* %51, align 8
  %499 = icmp eq %struct.MayBeSignature** %497, null
  br i1 %499, label %502, label %500

500:                                              ; preds = %496
  %501 = bitcast %struct.MayBeSignature** %497 to i8*
  call void @_ZdlPv(i8* %501) #10
  br label %502

502:                                              ; preds = %500, %496, %400, %389
  %503 = phi %struct.MayBeSignature** [ %416, %500 ], [ %416, %496 ], [ %402, %400 ], [ %107, %389 ]
  %504 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %503, i64 -1
  %505 = bitcast %struct.MayBeSignature** %504 to i64*
  store i64 %264, i64* %505, align 8
  %506 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %23, align 8
  %507 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %506, i64 -1
  %508 = bitcast %struct.MayBeSignature** %507 to i64*
  %509 = load i64, i64* %508, align 8
  store %struct.MayBeSignature** %506, %struct.MayBeSignature*** %23, align 8
  %510 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %24, align 8
  %511 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %25, align 8
  %512 = icmp eq %struct.MayBeSignature** %510, %511
  %513 = ptrtoint %struct.MayBeSignature** %511 to i64
  %514 = bitcast %struct.MayBeSignature** %510 to i64*
  br i1 %512, label %515, label %641

515:                                              ; preds = %502
  %516 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %22, align 8
  %517 = icmp ugt %struct.MayBeSignature** %506, %516
  %518 = ptrtoint %struct.MayBeSignature** %516 to i64
  br i1 %517, label %519, label %536

519:                                              ; preds = %515
  %520 = ptrtoint %struct.MayBeSignature** %506 to i64
  %521 = sub i64 %520, %518
  %522 = ashr exact i64 %521, 3
  %523 = add nsw i64 %522, 1
  %524 = sdiv i64 %523, -2
  %525 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %506, i64 %524
  %526 = ptrtoint %struct.MayBeSignature** %510 to i64
  %527 = sub i64 %526, %520
  %528 = ashr exact i64 %527, 3
  %529 = icmp eq i64 %527, 0
  br i1 %529, label %533, label %530

530:                                              ; preds = %519
  %531 = bitcast %struct.MayBeSignature** %525 to i8*
  %532 = bitcast %struct.MayBeSignature** %506 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %531, i8* align 8 %532, i64 %527, i1 false) #8
  br label %533

533:                                              ; preds = %530, %519
  %534 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %525, i64 %528
  store %struct.MayBeSignature** %534, %struct.MayBeSignature*** %24, align 8
  store %struct.MayBeSignature** %525, %struct.MayBeSignature*** %23, align 8
  %535 = bitcast %struct.MayBeSignature** %534 to i64*
  br label %641

536:                                              ; preds = %515
  %537 = sub i64 %513, %518
  %538 = ashr exact i64 %537, 2
  %539 = icmp eq i64 %537, 0
  %540 = select i1 %539, i64 1, i64 %538
  %541 = icmp ugt i64 %540, 2305843009213693951
  br i1 %541, label %542, label %543

542:                                              ; preds = %536
  call void @abort() #9
  unreachable

543:                                              ; preds = %536
  %544 = lshr i64 %540, 2
  %545 = shl i64 %540, 3
  %546 = call i8* @_Znwm(i64 %545) #10
  %547 = bitcast i8* %546 to %struct.MayBeSignature**
  %548 = ptrtoint i8* %546 to i64
  %549 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %547, i64 %544
  %550 = ptrtoint %struct.MayBeSignature** %549 to i64
  %551 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %547, i64 %540
  %552 = ptrtoint %struct.MayBeSignature** %551 to i64
  %553 = ptrtoint %struct.MayBeSignature** %506 to i64
  %554 = ptrtoint %struct.MayBeSignature** %510 to i64
  %555 = sub i64 %554, %553
  %556 = ashr exact i64 %555, 3
  %557 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %549, i64 %556
  %558 = icmp eq i64 %555, 0
  br i1 %558, label %634, label %559

559:                                              ; preds = %543
  %560 = add i64 %555, -8
  %561 = lshr i64 %560, 3
  %562 = add nuw nsw i64 %561, 1
  %563 = and i64 %562, 7
  %564 = icmp eq i64 %563, 0
  br i1 %564, label %580, label %565

565:                                              ; preds = %559, %565
  %566 = phi %struct.MayBeSignature** [ %573, %565 ], [ %549, %559 ]
  %567 = phi i64 [ %574, %565 ], [ %550, %559 ]
  %568 = phi %struct.MayBeSignature** [ %575, %565 ], [ %506, %559 ]
  %569 = phi i64 [ %576, %565 ], [ %563, %559 ]
  %570 = bitcast %struct.MayBeSignature** %568 to i64*
  %571 = load i64, i64* %570, align 8
  %572 = inttoptr i64 %567 to i64*
  store i64 %571, i64* %572, align 8
  %573 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %566, i64 1
  %574 = ptrtoint %struct.MayBeSignature** %573 to i64
  %575 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %568, i64 1
  %576 = add i64 %569, -1
  %577 = icmp eq i64 %576, 0
  br i1 %577, label %578, label %565, !llvm.loop !18

578:                                              ; preds = %565
  %579 = ptrtoint %struct.MayBeSignature** %573 to i64
  br label %580

580:                                              ; preds = %559, %578
  %581 = phi %struct.MayBeSignature** [ %549, %559 ], [ %573, %578 ]
  %582 = phi i64 [ %550, %559 ], [ %579, %578 ]
  %583 = phi %struct.MayBeSignature** [ %506, %559 ], [ %575, %578 ]
  %584 = icmp ult i64 %560, 56
  br i1 %584, label %631, label %585

585:                                              ; preds = %580, %585
  %586 = phi %struct.MayBeSignature** [ %627, %585 ], [ %581, %580 ]
  %587 = phi i64 [ %628, %585 ], [ %582, %580 ]
  %588 = phi %struct.MayBeSignature** [ %629, %585 ], [ %583, %580 ]
  %589 = bitcast %struct.MayBeSignature** %588 to i64*
  %590 = load i64, i64* %589, align 8
  %591 = inttoptr i64 %587 to i64*
  store i64 %590, i64* %591, align 8
  %592 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %586, i64 1
  %593 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %588, i64 1
  %594 = bitcast %struct.MayBeSignature** %593 to i64*
  %595 = load i64, i64* %594, align 8
  %596 = bitcast %struct.MayBeSignature** %592 to i64*
  store i64 %595, i64* %596, align 8
  %597 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %586, i64 2
  %598 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %588, i64 2
  %599 = bitcast %struct.MayBeSignature** %598 to i64*
  %600 = load i64, i64* %599, align 8
  %601 = bitcast %struct.MayBeSignature** %597 to i64*
  store i64 %600, i64* %601, align 8
  %602 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %586, i64 3
  %603 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %588, i64 3
  %604 = bitcast %struct.MayBeSignature** %603 to i64*
  %605 = load i64, i64* %604, align 8
  %606 = bitcast %struct.MayBeSignature** %602 to i64*
  store i64 %605, i64* %606, align 8
  %607 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %586, i64 4
  %608 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %588, i64 4
  %609 = bitcast %struct.MayBeSignature** %608 to i64*
  %610 = load i64, i64* %609, align 8
  %611 = bitcast %struct.MayBeSignature** %607 to i64*
  store i64 %610, i64* %611, align 8
  %612 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %586, i64 5
  %613 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %588, i64 5
  %614 = bitcast %struct.MayBeSignature** %613 to i64*
  %615 = load i64, i64* %614, align 8
  %616 = bitcast %struct.MayBeSignature** %612 to i64*
  store i64 %615, i64* %616, align 8
  %617 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %586, i64 6
  %618 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %588, i64 6
  %619 = bitcast %struct.MayBeSignature** %618 to i64*
  %620 = load i64, i64* %619, align 8
  %621 = bitcast %struct.MayBeSignature** %617 to i64*
  store i64 %620, i64* %621, align 8
  %622 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %586, i64 7
  %623 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %588, i64 7
  %624 = bitcast %struct.MayBeSignature** %623 to i64*
  %625 = load i64, i64* %624, align 8
  %626 = bitcast %struct.MayBeSignature** %622 to i64*
  store i64 %625, i64* %626, align 8
  %627 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %586, i64 8
  %628 = ptrtoint %struct.MayBeSignature** %627 to i64
  %629 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %588, i64 8
  %630 = icmp eq %struct.MayBeSignature** %557, %627
  br i1 %630, label %631, label %585

631:                                              ; preds = %585, %580
  %632 = ptrtoint %struct.MayBeSignature** %557 to i64
  %633 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %22, align 8
  br label %634

634:                                              ; preds = %631, %543
  %635 = phi %struct.MayBeSignature** [ %633, %631 ], [ %516, %543 ]
  %636 = phi i64 [ %632, %631 ], [ %550, %543 ]
  store i64 %548, i64* %52, align 8
  store i64 %550, i64* %50, align 8
  store i64 %636, i64* %49, align 8
  store i64 %552, i64* %51, align 8
  %637 = icmp eq %struct.MayBeSignature** %635, null
  %638 = inttoptr i64 %636 to i64*
  br i1 %637, label %641, label %639

639:                                              ; preds = %634
  %640 = bitcast %struct.MayBeSignature** %635 to i8*
  call void @_ZdlPv(i8* %640) #10
  br label %641

641:                                              ; preds = %639, %634, %533, %502
  %642 = phi i64* [ %638, %639 ], [ %638, %634 ], [ %535, %533 ], [ %514, %502 ]
  store i64 %509, i64* %642, align 8
  %643 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %24, align 8
  %644 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %643, i64 1
  store %struct.MayBeSignature** %644, %struct.MayBeSignature*** %24, align 8
  %645 = ptrtoint %struct.MayBeSignature** %644 to i64
  br label %858

646:                                              ; preds = %252
  %647 = ashr exact i64 %256, 2
  %648 = icmp eq i64 %256, 0
  %649 = select i1 %648, i64 1, i64 %647
  %650 = icmp ugt i64 %649, 2305843009213693951
  br i1 %650, label %651, label %652

651:                                              ; preds = %646
  call void @abort() #9
  unreachable

652:                                              ; preds = %646
  %653 = shl i64 %649, 3
  %654 = call i8* @_Znwm(i64 %653) #10
  %655 = bitcast i8* %654 to %struct.MayBeSignature**
  %656 = ptrtoint i8* %654 to i64
  %657 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %655, i64 %253
  %658 = ptrtoint %struct.MayBeSignature** %657 to i64
  %659 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %655, i64 %649
  %660 = ptrtoint %struct.MayBeSignature** %659 to i64
  %661 = call i8* @_Znwm(i64 4096) #10
  %662 = ptrtoint i8* %661 to i64
  %663 = icmp eq i64 %253, %649
  br i1 %663, label %664, label %690

664:                                              ; preds = %652
  %665 = icmp ugt %struct.MayBeSignature** %657, %655
  br i1 %665, label %666, label %673

666:                                              ; preds = %664
  %667 = sub i64 %658, %656
  %668 = ashr exact i64 %667, 3
  %669 = add nsw i64 %668, 1
  %670 = sdiv i64 %669, -2
  %671 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %657, i64 %670
  %672 = ptrtoint %struct.MayBeSignature** %671 to i64
  br label %690

673:                                              ; preds = %664
  %674 = sub i64 %660, %656
  %675 = ashr exact i64 %674, 2
  %676 = icmp eq i64 %674, 0
  %677 = select i1 %676, i64 1, i64 %675
  %678 = icmp ugt i64 %677, 2305843009213693951
  br i1 %678, label %679, label %680

679:                                              ; preds = %673
  call void @abort() #9
  unreachable

680:                                              ; preds = %673
  %681 = lshr i64 %677, 2
  %682 = shl i64 %677, 3
  %683 = call i8* @_Znwm(i64 %682) #10
  %684 = bitcast i8* %683 to %struct.MayBeSignature**
  %685 = ptrtoint i8* %683 to i64
  %686 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %684, i64 %681
  %687 = ptrtoint %struct.MayBeSignature** %686 to i64
  %688 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %684, i64 %677
  %689 = ptrtoint %struct.MayBeSignature** %688 to i64
  call void @_ZdlPv(i8* nonnull %654) #10
  br label %690

690:                                              ; preds = %680, %666, %652
  %691 = phi %struct.MayBeSignature** [ %107, %666 ], [ %76, %680 ], [ %107, %652 ]
  %692 = phi %struct.MayBeSignature** [ %108, %666 ], [ %75, %680 ], [ %108, %652 ]
  %693 = phi i64 [ %660, %666 ], [ %689, %680 ], [ %660, %652 ]
  %694 = phi %struct.MayBeSignature** [ %671, %666 ], [ %686, %680 ], [ %657, %652 ]
  %695 = phi i64 [ %672, %666 ], [ %687, %680 ], [ %658, %652 ]
  %696 = phi i64 [ %656, %666 ], [ %685, %680 ], [ %656, %652 ]
  %697 = bitcast %struct.MayBeSignature** %694 to i64*
  store i64 %662, i64* %697, align 8
  %698 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %694, i64 1
  %699 = ptrtoint %struct.MayBeSignature** %698 to i64
  %700 = icmp eq %struct.MayBeSignature** %692, %691
  br i1 %700, label %704, label %714

701:                                              ; preds = %846
  %702 = ptrtoint %struct.MayBeSignature** %851 to i64
  %703 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %22, align 8
  br label %704

704:                                              ; preds = %701, %690
  %705 = phi %struct.MayBeSignature** [ %260, %690 ], [ %703, %701 ]
  %706 = phi i64 [ %693, %690 ], [ %847, %701 ]
  %707 = phi i64 [ %699, %690 ], [ %848, %701 ]
  %708 = phi i64 [ %695, %690 ], [ %702, %701 ]
  %709 = phi i64 [ %696, %690 ], [ %849, %701 ]
  store i64 %709, i64* %52, align 8
  store i64 %708, i64* %50, align 8
  store i64 %707, i64* %49, align 8
  store i64 %706, i64* %51, align 8
  %710 = icmp eq %struct.MayBeSignature** %705, null
  %711 = inttoptr i64 %707 to %struct.MayBeSignature**
  br i1 %710, label %858, label %712

712:                                              ; preds = %704
  %713 = bitcast %struct.MayBeSignature** %705 to i8*
  call void @_ZdlPv(i8* %713) #10
  br label %858

714:                                              ; preds = %690, %846
  %715 = phi %struct.MayBeSignature** [ %720, %846 ], [ %692, %690 ]
  %716 = phi i64 [ %849, %846 ], [ %696, %690 ]
  %717 = phi i64 [ %855, %846 ], [ %695, %690 ]
  %718 = phi i64 [ %848, %846 ], [ %699, %690 ]
  %719 = phi i64 [ %847, %846 ], [ %693, %690 ]
  %720 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %715, i64 -1
  %721 = inttoptr i64 %717 to %struct.MayBeSignature**
  %722 = inttoptr i64 %716 to %struct.MayBeSignature**
  %723 = icmp eq %struct.MayBeSignature** %721, %722
  br i1 %723, label %724, label %846

724:                                              ; preds = %714
  %725 = inttoptr i64 %718 to %struct.MayBeSignature**
  %726 = inttoptr i64 %719 to %struct.MayBeSignature**
  %727 = icmp ult %struct.MayBeSignature** %725, %726
  br i1 %727, label %728, label %745

728:                                              ; preds = %724
  %729 = sub i64 %719, %718
  %730 = ashr exact i64 %729, 3
  %731 = add nsw i64 %730, 1
  %732 = sdiv i64 %731, 2
  %733 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %725, i64 %732
  %734 = sub i64 %718, %717
  %735 = icmp eq i64 %734, 0
  br i1 %735, label %742, label %736

736:                                              ; preds = %728
  %737 = ashr exact i64 %734, 3
  %738 = sub nsw i64 0, %737
  %739 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %733, i64 %738
  %740 = bitcast %struct.MayBeSignature** %739 to i8*
  %741 = inttoptr i64 %717 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %740, i8* align 8 %741, i64 %734, i1 false) #8
  br label %742

742:                                              ; preds = %736, %728
  %743 = phi %struct.MayBeSignature** [ %739, %736 ], [ %733, %728 ]
  %744 = ptrtoint %struct.MayBeSignature** %733 to i64
  br label %846

745:                                              ; preds = %724
  %746 = sub i64 %719, %716
  %747 = ashr exact i64 %746, 2
  %748 = icmp eq i64 %746, 0
  %749 = select i1 %748, i64 1, i64 %747
  %750 = icmp ugt i64 %749, 2305843009213693951
  br i1 %750, label %751, label %752

751:                                              ; preds = %745
  call void @abort() #9
  unreachable

752:                                              ; preds = %745
  %753 = add nuw nsw i64 %749, 3
  %754 = lshr i64 %753, 2
  %755 = shl i64 %749, 3
  %756 = call i8* @_Znwm(i64 %755) #10
  %757 = bitcast i8* %756 to %struct.MayBeSignature**
  %758 = ptrtoint i8* %756 to i64
  %759 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %757, i64 %754
  %760 = ptrtoint %struct.MayBeSignature** %759 to i64
  %761 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %757, i64 %749
  %762 = ptrtoint %struct.MayBeSignature** %761 to i64
  %763 = sub i64 %718, %717
  %764 = ashr exact i64 %763, 3
  %765 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %759, i64 %764
  %766 = icmp eq i64 %763, 0
  br i1 %766, label %841, label %767

767:                                              ; preds = %752
  %768 = add i64 %763, -8
  %769 = lshr i64 %768, 3
  %770 = add nuw nsw i64 %769, 1
  %771 = and i64 %770, 7
  %772 = icmp eq i64 %771, 0
  br i1 %772, label %788, label %773

773:                                              ; preds = %767, %773
  %774 = phi %struct.MayBeSignature** [ %781, %773 ], [ %759, %767 ]
  %775 = phi i64 [ %782, %773 ], [ %760, %767 ]
  %776 = phi %struct.MayBeSignature** [ %783, %773 ], [ %721, %767 ]
  %777 = phi i64 [ %784, %773 ], [ %771, %767 ]
  %778 = bitcast %struct.MayBeSignature** %776 to i64*
  %779 = load i64, i64* %778, align 8
  %780 = inttoptr i64 %775 to i64*
  store i64 %779, i64* %780, align 8
  %781 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %774, i64 1
  %782 = ptrtoint %struct.MayBeSignature** %781 to i64
  %783 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %776, i64 1
  %784 = add i64 %777, -1
  %785 = icmp eq i64 %784, 0
  br i1 %785, label %786, label %773, !llvm.loop !19

786:                                              ; preds = %773
  %787 = ptrtoint %struct.MayBeSignature** %781 to i64
  br label %788

788:                                              ; preds = %767, %786
  %789 = phi %struct.MayBeSignature** [ %759, %767 ], [ %781, %786 ]
  %790 = phi i64 [ %760, %767 ], [ %787, %786 ]
  %791 = phi %struct.MayBeSignature** [ %721, %767 ], [ %783, %786 ]
  %792 = icmp ult i64 %768, 56
  br i1 %792, label %839, label %793

793:                                              ; preds = %788, %793
  %794 = phi %struct.MayBeSignature** [ %835, %793 ], [ %789, %788 ]
  %795 = phi i64 [ %836, %793 ], [ %790, %788 ]
  %796 = phi %struct.MayBeSignature** [ %837, %793 ], [ %791, %788 ]
  %797 = bitcast %struct.MayBeSignature** %796 to i64*
  %798 = load i64, i64* %797, align 8
  %799 = inttoptr i64 %795 to i64*
  store i64 %798, i64* %799, align 8
  %800 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %794, i64 1
  %801 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %796, i64 1
  %802 = bitcast %struct.MayBeSignature** %801 to i64*
  %803 = load i64, i64* %802, align 8
  %804 = bitcast %struct.MayBeSignature** %800 to i64*
  store i64 %803, i64* %804, align 8
  %805 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %794, i64 2
  %806 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %796, i64 2
  %807 = bitcast %struct.MayBeSignature** %806 to i64*
  %808 = load i64, i64* %807, align 8
  %809 = bitcast %struct.MayBeSignature** %805 to i64*
  store i64 %808, i64* %809, align 8
  %810 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %794, i64 3
  %811 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %796, i64 3
  %812 = bitcast %struct.MayBeSignature** %811 to i64*
  %813 = load i64, i64* %812, align 8
  %814 = bitcast %struct.MayBeSignature** %810 to i64*
  store i64 %813, i64* %814, align 8
  %815 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %794, i64 4
  %816 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %796, i64 4
  %817 = bitcast %struct.MayBeSignature** %816 to i64*
  %818 = load i64, i64* %817, align 8
  %819 = bitcast %struct.MayBeSignature** %815 to i64*
  store i64 %818, i64* %819, align 8
  %820 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %794, i64 5
  %821 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %796, i64 5
  %822 = bitcast %struct.MayBeSignature** %821 to i64*
  %823 = load i64, i64* %822, align 8
  %824 = bitcast %struct.MayBeSignature** %820 to i64*
  store i64 %823, i64* %824, align 8
  %825 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %794, i64 6
  %826 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %796, i64 6
  %827 = bitcast %struct.MayBeSignature** %826 to i64*
  %828 = load i64, i64* %827, align 8
  %829 = bitcast %struct.MayBeSignature** %825 to i64*
  store i64 %828, i64* %829, align 8
  %830 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %794, i64 7
  %831 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %796, i64 7
  %832 = bitcast %struct.MayBeSignature** %831 to i64*
  %833 = load i64, i64* %832, align 8
  %834 = bitcast %struct.MayBeSignature** %830 to i64*
  store i64 %833, i64* %834, align 8
  %835 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %794, i64 8
  %836 = ptrtoint %struct.MayBeSignature** %835 to i64
  %837 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %796, i64 8
  %838 = icmp eq %struct.MayBeSignature** %765, %835
  br i1 %838, label %839, label %793

839:                                              ; preds = %793, %788
  %840 = ptrtoint %struct.MayBeSignature** %765 to i64
  br label %841

841:                                              ; preds = %839, %752
  %842 = phi i64 [ %840, %839 ], [ %760, %752 ]
  %843 = icmp eq i64 %717, 0
  br i1 %843, label %846, label %844

844:                                              ; preds = %841
  %845 = inttoptr i64 %717 to i8*
  call void @_ZdlPv(i8* %845) #10
  br label %846

846:                                              ; preds = %844, %841, %742, %714
  %847 = phi i64 [ %719, %742 ], [ %762, %841 ], [ %762, %844 ], [ %719, %714 ]
  %848 = phi i64 [ %744, %742 ], [ %842, %841 ], [ %842, %844 ], [ %718, %714 ]
  %849 = phi i64 [ %716, %742 ], [ %758, %841 ], [ %758, %844 ], [ %716, %714 ]
  %850 = phi %struct.MayBeSignature** [ %743, %742 ], [ %759, %841 ], [ %759, %844 ], [ %721, %714 ]
  %851 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %850, i64 -1
  %852 = bitcast %struct.MayBeSignature** %720 to i64*
  %853 = load i64, i64* %852, align 8
  %854 = bitcast %struct.MayBeSignature** %851 to i64*
  store i64 %853, i64* %854, align 8
  %855 = ptrtoint %struct.MayBeSignature** %851 to i64
  %856 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %23, align 8
  %857 = icmp eq %struct.MayBeSignature** %720, %856
  br i1 %857, label %701, label %714

858:                                              ; preds = %712, %704, %641, %384, %247, %99
  %859 = phi %struct.MayBeSignature** [ %711, %712 ], [ %711, %704 ], [ %644, %641 ], [ %387, %384 ], [ %250, %247 ], [ %82, %99 ]
  %860 = phi i64 [ %707, %712 ], [ %707, %704 ], [ %645, %641 ], [ %388, %384 ], [ %251, %247 ], [ %80, %99 ]
  %861 = phi %struct.MayBeSignature** [ %711, %712 ], [ %711, %704 ], [ %644, %641 ], [ %387, %384 ], [ %250, %247 ], [ %75, %99 ]
  %862 = phi i64 [ %707, %712 ], [ %707, %704 ], [ %645, %641 ], [ %388, %384 ], [ %251, %247 ], [ %71, %99 ]
  %863 = phi %struct.MayBeSignature** [ %711, %712 ], [ %711, %704 ], [ %644, %641 ], [ %387, %384 ], [ %250, %247 ], [ %108, %99 ]
  %864 = load i64, i64* %27, align 8
  %865 = load i64, i64* %26, align 8
  %866 = add i64 %865, %864
  %867 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %23, align 8
  %868 = icmp eq %struct.MayBeSignature** %863, %867
  %869 = ptrtoint %struct.MayBeSignature** %867 to i64
  br i1 %868, label %877, label %870

870:                                              ; preds = %858
  %871 = lshr i64 %866, 8
  %872 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %867, i64 %871
  %873 = load %struct.MayBeSignature*, %struct.MayBeSignature** %872, align 8
  %874 = and i64 %866, 255
  %875 = getelementptr inbounds %struct.MayBeSignature, %struct.MayBeSignature* %873, i64 %874
  %876 = bitcast %struct.MayBeSignature* %875 to i8*
  br label %877

877:                                              ; preds = %858, %870
  %878 = phi i8* [ %876, %870 ], [ null, %858 ]
  %879 = bitcast i8* %878 to %class.CPDF_Dictionary**
  store %class.CPDF_Dictionary* %92, %class.CPDF_Dictionary** %879, align 8
  %880 = getelementptr inbounds i8, i8* %878, i64 8
  %881 = bitcast i8* %880 to %class.CPDF_Object**
  store %class.CPDF_Object* %70, %class.CPDF_Object** %881, align 8
  %882 = add i64 %864, 1
  store i64 %882, i64* %27, align 8
  call void @_ZN17CPDF_ObjectWalker25SkipWalkIntoCurrentObjectEv(%class.CPDF_ObjectWalker* nonnull %33) #8
  br label %964

883:                                              ; preds = %91, %97
  %884 = bitcast %class.CPDF_Object* %70 to i1 (%class.CPDF_Object*)***
  %885 = load i1 (%class.CPDF_Object*)**, i1 (%class.CPDF_Object*)*** %884, align 8
  %886 = getelementptr inbounds i1 (%class.CPDF_Object*)*, i1 (%class.CPDF_Object*)** %885, i64 21
  %887 = load i1 (%class.CPDF_Object*)*, i1 (%class.CPDF_Object*)** %886, align 8
  %888 = call zeroext i1 %887(%class.CPDF_Object* nonnull %70) #8
  br i1 %888, label %889, label %895

889:                                              ; preds = %883
  %890 = bitcast %class.CPDF_Object* %70 to %class.CPDF_String* (%class.CPDF_Object*)***
  %891 = load %class.CPDF_String* (%class.CPDF_Object*)**, %class.CPDF_String* (%class.CPDF_Object*)*** %890, align 8
  %892 = getelementptr inbounds %class.CPDF_String* (%class.CPDF_Object*)*, %class.CPDF_String* (%class.CPDF_Object*)** %891, i64 37
  %893 = load %class.CPDF_String* (%class.CPDF_Object*)*, %class.CPDF_String* (%class.CPDF_Object*)** %892, align 8
  %894 = call %class.CPDF_String* %893(%class.CPDF_Object* nonnull %70) #8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #8
  call void @_ZNK11CPDF_String9GetStringEv(%"class.fxcrt::ByteString"* nonnull sret %11, %class.CPDF_String* %894) #8
  call void @_ZN18CPDF_CryptoHandler7DecryptEjjRKN5fxcrt10ByteStringE(%"class.fxcrt::ByteString"* nonnull sret %10, %class.CPDF_CryptoHandler* %0, i32 %29, i32 %31, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %11)
  call void @_ZN11CPDF_String9SetStringERKN5fxcrt10ByteStringE(%class.CPDF_String* %894, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %10) #8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %10) #8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %11) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #8
  br label %895

895:                                              ; preds = %889, %883
  %896 = load i1 (%class.CPDF_Object*)**, i1 (%class.CPDF_Object*)*** %884, align 8
  %897 = getelementptr inbounds i1 (%class.CPDF_Object*)*, i1 (%class.CPDF_Object*)** %896, i64 20
  %898 = load i1 (%class.CPDF_Object*)*, i1 (%class.CPDF_Object*)** %897, align 8
  %899 = call zeroext i1 %898(%class.CPDF_Object* nonnull %70) #8
  br i1 %899, label %900, label %964

900:                                              ; preds = %895
  %901 = bitcast %class.CPDF_Object* %70 to %class.CPDF_Stream* (%class.CPDF_Object*)***
  %902 = load %class.CPDF_Stream* (%class.CPDF_Object*)**, %class.CPDF_Stream* (%class.CPDF_Object*)*** %901, align 8
  %903 = getelementptr inbounds %class.CPDF_Stream* (%class.CPDF_Object*)*, %class.CPDF_Stream* (%class.CPDF_Object*)** %902, i64 35
  %904 = load %class.CPDF_Stream* (%class.CPDF_Object*)*, %class.CPDF_Stream* (%class.CPDF_Object*)** %903, align 8
  %905 = call %class.CPDF_Stream* %904(%class.CPDF_Object* nonnull %70) #8
  %906 = call i8* @_Znwm(i64 64) #10, !noalias !20
  %907 = bitcast i8* %906 to %class.CPDF_StreamAcc*
  call void @_ZN14CPDF_StreamAccC1EPK11CPDF_Stream(%class.CPDF_StreamAcc* nonnull %907, %class.CPDF_Stream* %905) #8, !noalias !20
  %908 = getelementptr inbounds i8, i8* %906, i64 8
  %909 = bitcast i8* %908 to i64*
  %910 = load i64, i64* %909, align 8, !noalias !20
  %911 = add nsw i64 %910, 1
  store i64 %911, i64* %909, align 8, !noalias !20
  call void @_ZN14CPDF_StreamAcc14LoadAllDataRawEv(%class.CPDF_StreamAcc* nonnull %907) #8
  %912 = load i32, i32* %40, align 8
  %913 = icmp eq i32 %912, 2
  br i1 %913, label %914, label %918

914:                                              ; preds = %900
  %915 = call i32 @_ZNK14CPDF_StreamAcc7GetSizeEv(%class.CPDF_StreamAcc* nonnull %907) #8
  %916 = icmp ult i32 %915, 16
  br i1 %916, label %917, label %918

917:                                              ; preds = %914
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 0, i64 16, i1 false) #8
  call void @_ZN11CPDF_Stream7SetDataEN6pdfium4spanIKhEE(%class.CPDF_Stream* %905, %"class.pdfium::span"* nonnull %12) #8
  br label %954

918:                                              ; preds = %914, %900
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %41) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %53, i8 -86, i64 40, i1 false)
  call void @_ZN13CFX_BinaryBufC1Ev(%class.CFX_BinaryBuf* nonnull %13) #8
  %919 = call i32 @_ZNK14CPDF_StreamAcc7GetSizeEv(%class.CPDF_StreamAcc* nonnull %907) #8
  %920 = load i32, i32* %40, align 8
  %921 = icmp eq i32 %920, 2
  %922 = add i32 %919, -16
  %923 = select i1 %921, i32 %922, i32 %919
  %924 = zext i32 %923 to i64
  call void @_ZN13CFX_BinaryBuf12EstimateSizeEm(%class.CFX_BinaryBuf* nonnull %13, i64 %924) #8
  %925 = call i8* @_ZN18CPDF_CryptoHandler10CryptStartEjjb(%class.CPDF_CryptoHandler* %0, i32 %29, i32 %31, i1 zeroext false) #8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #8
  call void @_ZN14CPDF_StreamAcc7GetSpanEv(%"class.pdfium::span.17"* nonnull sret %15, %class.CPDF_StreamAcc* nonnull %907) #8
  %926 = load <2 x i64>, <2 x i64>* %14, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44)
  store <2 x i64> %926, <2 x i64>* %3, align 16
  %927 = call zeroext i1 @_ZN18CPDF_CryptoHandler11CryptStreamEPvN6pdfium4spanIKhEER13CFX_BinaryBufb(%class.CPDF_CryptoHandler* %0, i8* %925, %"class.pdfium::span"* nonnull %4, %class.CFX_BinaryBuf* nonnull dereferenceable(40) %13, i1 zeroext false) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #8
  %928 = icmp eq i8* %925, null
  br i1 %928, label %952, label %929

929:                                              ; preds = %918
  %930 = load i32, i32* %40, align 8
  switch i32 %930, label %931 [
    i32 0, label %947
    i32 1, label %946
  ]

931:                                              ; preds = %929
  %932 = getelementptr inbounds i8, i8* %925, i64 4
  %933 = bitcast i8* %932 to i32*
  %934 = load i32, i32* %933, align 4
  %935 = icmp eq i32 %934, 16
  br i1 %935, label %936, label %946

936:                                              ; preds = %931
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #8
  %937 = getelementptr inbounds i8, i8* %925, i64 8
  %938 = bitcast i8* %937 to %struct.CRYPT_aes_context*
  %939 = getelementptr inbounds i8, i8* %925, i64 1008
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 -86, i64 16, i1 false) #8
  call void @_Z16CRYPT_AESDecryptP17CRYPT_aes_contextPhPKhj(%struct.CRYPT_aes_context* %938, i8* nonnull %45, i8* %939, i32 16) #8
  %940 = load i8, i8* %46, align 1
  %941 = icmp ult i8 %940, 17
  br i1 %941, label %942, label %945

942:                                              ; preds = %936
  %943 = zext i8 %940 to i64
  %944 = sub nuw nsw i64 16, %943
  call void @_ZN13CFX_BinaryBuf11AppendBlockEPKvm(%class.CFX_BinaryBuf* nonnull %13, i8* nonnull %45, i64 %944) #8
  br label %945

945:                                              ; preds = %942, %936
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #8
  br label %946

946:                                              ; preds = %931, %945, %929
  call void @_Z7FX_FreePv(i8* nonnull %925) #8
  br label %947

947:                                              ; preds = %946, %929
  br i1 %927, label %948, label %952

948:                                              ; preds = %947
  %949 = load i64, i64* %42, align 8
  %950 = trunc i64 %949 to i32
  %951 = call i8* @_ZN13CFX_BinaryBuf12DetachBufferEv(%class.CFX_BinaryBuf* nonnull %13) #8
  call void @_ZN11CPDF_Stream8TakeDataENSt3__110unique_ptrIh13FxFreeDeleterEEj(%class.CPDF_Stream* %905, i8* %951, i32 %950) #8
  br label %953

952:                                              ; preds = %918, %947
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 0, i64 16, i1 false) #8
  call void @_ZN11CPDF_Stream7SetDataEN6pdfium4spanIKhEE(%class.CPDF_Stream* %905, %"class.pdfium::span"* nonnull %16) #8
  br label %953

953:                                              ; preds = %952, %948
  call void @_ZN13CFX_BinaryBufD1Ev(%class.CFX_BinaryBuf* nonnull %13) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %41) #8
  br label %954

954:                                              ; preds = %917, %953
  %955 = load i64, i64* %909, align 8
  %956 = add nsw i64 %955, -1
  store i64 %956, i64* %909, align 8
  %957 = icmp eq i64 %956, 0
  br i1 %957, label %958, label %964

958:                                              ; preds = %954
  %959 = bitcast i8* %906 to %"class.fxcrt::Retainable"*
  %960 = bitcast i8* %906 to void (%"class.fxcrt::Retainable"*)***
  %961 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %960, align 8
  %962 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %961, i64 1
  %963 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %962, align 8
  call void %963(%"class.fxcrt::Retainable"* nonnull %959) #8
  br label %964

964:                                              ; preds = %958, %954, %895, %877
  %965 = phi %struct.MayBeSignature** [ %859, %877 ], [ %82, %895 ], [ %82, %954 ], [ %82, %958 ]
  %966 = phi i64 [ %869, %877 ], [ %81, %895 ], [ %81, %954 ], [ %81, %958 ]
  %967 = phi i64 [ %860, %877 ], [ %80, %895 ], [ %80, %954 ], [ %80, %958 ]
  %968 = phi %struct.MayBeSignature** [ %867, %877 ], [ %79, %895 ], [ %79, %954 ], [ %79, %958 ]
  %969 = phi i64 [ %865, %877 ], [ %78, %895 ], [ %78, %954 ], [ %78, %958 ]
  %970 = phi i64 [ %882, %877 ], [ %77, %895 ], [ %77, %954 ], [ %77, %958 ]
  %971 = phi %struct.MayBeSignature** [ %867, %877 ], [ %76, %895 ], [ %76, %954 ], [ %76, %958 ]
  %972 = phi %struct.MayBeSignature** [ %861, %877 ], [ %75, %895 ], [ %75, %954 ], [ %75, %958 ]
  %973 = phi i64 [ %882, %877 ], [ %74, %895 ], [ %74, %954 ], [ %74, %958 ]
  %974 = phi i64 [ %865, %877 ], [ %73, %895 ], [ %73, %954 ], [ %73, %958 ]
  %975 = phi i64 [ %869, %877 ], [ %72, %895 ], [ %72, %954 ], [ %72, %958 ]
  %976 = phi i64 [ %862, %877 ], [ %71, %895 ], [ %71, %954 ], [ %71, %958 ]
  %977 = call %class.CPDF_Object* @_ZN17CPDF_ObjectWalker7GetNextEv(%class.CPDF_ObjectWalker* nonnull %33) #8
  %978 = icmp eq %class.CPDF_Object* %977, null
  br i1 %978, label %979, label %69

979:                                              ; preds = %964, %54
  %980 = phi %struct.MayBeSignature** [ %55, %54 ], [ %965, %964 ]
  %981 = phi i64 [ %56, %54 ], [ %966, %964 ]
  %982 = phi i64 [ %57, %54 ], [ %967, %964 ]
  %983 = phi %struct.MayBeSignature** [ %58, %54 ], [ %968, %964 ]
  %984 = phi i64 [ %59, %54 ], [ %969, %964 ]
  %985 = phi i64 [ %60, %54 ], [ %970, %964 ]
  %986 = phi %struct.MayBeSignature** [ %61, %54 ], [ %971, %964 ]
  %987 = phi %struct.MayBeSignature** [ %62, %54 ], [ %972, %964 ]
  %988 = phi i64 [ %63, %54 ], [ %974, %964 ]
  %989 = phi i64 [ %64, %54 ], [ %975, %964 ]
  %990 = phi i64 [ %65, %54 ], [ %976, %964 ]
  %991 = inttoptr i64 %981 to %struct.MayBeSignature**
  %992 = icmp eq i64 %985, 0
  br i1 %992, label %1033, label %995

993:                                              ; preds = %1026
  %994 = icmp eq i64 %1000, 0
  br i1 %994, label %1033, label %995

995:                                              ; preds = %979, %993
  %996 = phi i64 [ %1000, %993 ], [ %985, %979 ]
  %997 = phi %struct.MayBeSignature** [ %991, %993 ], [ %983, %979 ]
  %998 = phi i64 [ %1028, %993 ], [ %982, %979 ]
  %999 = phi %struct.MayBeSignature** [ %1027, %993 ], [ %980, %979 ]
  %1000 = add i64 %996, -1
  %1001 = add i64 %984, %1000
  %1002 = lshr i64 %1001, 8
  %1003 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %997, i64 %1002
  %1004 = load %struct.MayBeSignature*, %struct.MayBeSignature** %1003, align 8
  %1005 = and i64 %1001, 255
  %1006 = getelementptr inbounds %struct.MayBeSignature, %struct.MayBeSignature* %1004, i64 %1005, i32 0
  %1007 = load %class.CPDF_Dictionary*, %class.CPDF_Dictionary** %1006, align 8
  %1008 = getelementptr inbounds %struct.MayBeSignature, %struct.MayBeSignature* %1004, i64 %1005, i32 1
  %1009 = load %class.CPDF_Object*, %class.CPDF_Object** %1008, align 8
  store i64 %1000, i64* %27, align 8
  %1010 = sub i64 %998, %981
  %1011 = icmp eq i64 %1010, 0
  %1012 = shl i64 %1010, 5
  %1013 = add i64 %1012, -1
  %1014 = select i1 %1011, i64 0, i64 %1013
  %1015 = sub i64 1, %996
  %1016 = sub i64 %1015, %984
  %1017 = add i64 %1016, %1014
  %1018 = icmp ugt i64 %1017, 511
  %1019 = inttoptr i64 %998 to %struct.MayBeSignature**
  br i1 %1018, label %1020, label %1026

1020:                                             ; preds = %995
  %1021 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %1019, i64 -1
  %1022 = bitcast %struct.MayBeSignature** %1021 to i8**
  %1023 = load i8*, i8** %1022, align 8
  call void @_ZdlPv(i8* %1023) #10
  %1024 = getelementptr %struct.MayBeSignature*, %struct.MayBeSignature** %999, i64 -1
  store %struct.MayBeSignature** %1024, %struct.MayBeSignature*** %24, align 8
  %1025 = ptrtoint %struct.MayBeSignature** %1024 to i64
  br label %1026

1026:                                             ; preds = %995, %1020
  %1027 = phi %struct.MayBeSignature** [ %999, %995 ], [ %1024, %1020 ]
  %1028 = phi i64 [ %998, %995 ], [ %1025, %1020 ]
  %1029 = phi %struct.MayBeSignature** [ %1019, %995 ], [ %1024, %1020 ]
  %1030 = call zeroext i1 @_ZN18CPDF_CryptoHandler21IsSignatureDictionaryEPK15CPDF_Dictionary(%class.CPDF_Dictionary* %1007)
  br i1 %1030, label %993, label %1031

1031:                                             ; preds = %1026
  %1032 = inttoptr i64 %981 to %struct.MayBeSignature**
  br label %1033

1033:                                             ; preds = %993, %979, %1031
  %1034 = phi %struct.MayBeSignature** [ %1027, %1031 ], [ %980, %979 ], [ %1027, %993 ]
  %1035 = phi i64 [ %1028, %1031 ], [ %982, %979 ], [ %1028, %993 ]
  %1036 = phi %struct.MayBeSignature** [ %1032, %1031 ], [ %983, %979 ], [ %991, %993 ]
  %1037 = phi i64 [ %1000, %1031 ], [ 0, %979 ], [ 0, %993 ]
  %1038 = phi %struct.MayBeSignature** [ %1032, %1031 ], [ %986, %979 ], [ %991, %993 ]
  %1039 = phi %struct.MayBeSignature** [ %1029, %1031 ], [ %987, %979 ], [ %1029, %993 ]
  %1040 = phi i64 [ %984, %1031 ], [ %988, %979 ], [ %984, %993 ]
  %1041 = phi i64 [ %981, %1031 ], [ %989, %979 ], [ %981, %993 ]
  %1042 = phi i64 [ %1028, %1031 ], [ %990, %979 ], [ %1028, %993 ]
  %1043 = phi %class.CPDF_Object* [ %1009, %1031 ], [ null, %979 ], [ null, %993 ]
  call void @_ZN17CPDF_ObjectWalkerD2Ev(%class.CPDF_ObjectWalker* nonnull %33) #8
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %32) #8
  %1044 = icmp eq %class.CPDF_Object* %1043, null
  br i1 %1044, label %1045, label %54

1045:                                             ; preds = %1033
  %1046 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0
  call fastcc void @_ZNSt3__112__deque_baseIZN18CPDF_CryptoHandler17DecryptObjectTreeEN5fxcrt9RetainPtrI11CPDF_ObjectEEE14MayBeSignatureNS_9allocatorIS6_EEED2Ev(%"class.std::__1::__deque_base"* nonnull %1046) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %21) #8
  br label %1047

1047:                                             ; preds = %2, %1045
  %1048 = phi i1 [ true, %1045 ], [ false, %2 ]
  ret i1 %1048
}

declare zeroext i1 @_ZNK15CPDF_Dictionary8KeyExistERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN17CPDF_ObjectWalker25SkipWalkIntoCurrentObjectEv(%class.CPDF_ObjectWalker*) local_unnamed_addr #2

declare void @_ZN11CPDF_String9SetStringERKN5fxcrt10ByteStringE(%class.CPDF_String*, %"class.fxcrt::ByteString"* dereferenceable(8)) unnamed_addr #2

declare void @_ZNK11CPDF_String9GetStringEv(%"class.fxcrt::ByteString"* sret, %class.CPDF_String*) unnamed_addr #2

declare void @_ZN14CPDF_StreamAcc14LoadAllDataRawEv(%class.CPDF_StreamAcc*) local_unnamed_addr #2

declare i32 @_ZNK14CPDF_StreamAcc7GetSizeEv(%class.CPDF_StreamAcc*) local_unnamed_addr #2

declare void @_ZN11CPDF_Stream7SetDataEN6pdfium4spanIKhEE(%class.CPDF_Stream*, %"class.pdfium::span"*) local_unnamed_addr #2

declare void @_ZN13CFX_BinaryBuf12EstimateSizeEm(%class.CFX_BinaryBuf*, i64) local_unnamed_addr #2

declare void @_ZN14CPDF_StreamAcc7GetSpanEv(%"class.pdfium::span.17"* sret, %class.CPDF_StreamAcc*) local_unnamed_addr #2

declare void @_ZN11CPDF_Stream8TakeDataENSt3__110unique_ptrIh13FxFreeDeleterEEj(%class.CPDF_Stream*, i8*, i32) local_unnamed_addr #2

declare i8* @_ZN13CFX_BinaryBuf12DetachBufferEv(%class.CFX_BinaryBuf*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN17CPDF_ObjectWalkerD2Ev(%class.CPDF_ObjectWalker*) unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK18CPDF_CryptoHandler14EncryptGetSizeEN6pdfium4spanIKhEE(%class.CPDF_CryptoHandler* nocapture readonly, %"class.pdfium::span"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 2
  %6 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, 32
  %9 = select i1 %5, i64 %8, i64 %7
  ret i64 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK18CPDF_CryptoHandler14EncryptContentEjjN6pdfium4spanIKhEEPhRj(%class.CPDF_CryptoHandler*, i32, i32, %"class.pdfium::span"* nocapture readonly, i8*, i32* nocapture dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.pdfium::span", align 8
  %8 = bitcast %"class.pdfium::span"* %7 to i8*
  %9 = bitcast %"class.pdfium::span"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* align 8 %9, i64 16, i1 false)
  call void @_ZNK18CPDF_CryptoHandler10CryptBlockEbjjN6pdfium4spanIKhEEPhRj(%class.CPDF_CryptoHandler* %0, i1 zeroext true, i32 %1, i32 %2, %"class.pdfium::span"* nonnull %7, i8* %4, i32* dereferenceable(4) %5)
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CPDF_CryptoHandlerC2ENS_6CipherEPKhm(%class.CPDF_CryptoHandler* nocapture, i32, i8* nocapture readonly, i64) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 0
  %6 = icmp ult i64 %3, 32
  %7 = select i1 %6, i64 %3, i64 32
  store i64 %7, i64* %5, align 8
  %8 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 1
  store i32 %1, i32* %8, align 8
  %9 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 2
  %10 = bitcast %"class.std::__1::unique_ptr.13"* %9 to i64*
  store i64 0, i64* %10, align 8
  %11 = icmp eq i32 %1, 0
  br i1 %11, label %23, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 3, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 1 %2, i64 %7, i1 false)
  %14 = icmp eq i32 %1, 2
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 1, i64 1000) #8
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13"* %9, i64 0, i32 0, i32 0, i32 0
  %18 = load %struct.CRYPT_aes_context*, %struct.CRYPT_aes_context** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr.13"* %9 to i8**
  store i8* %16, i8** %19, align 8
  %20 = icmp eq %struct.CRYPT_aes_context* %18, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %15
  %22 = bitcast %struct.CRYPT_aes_context* %18 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %22) #8
  br label %23

23:                                               ; preds = %4, %21, %15, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CPDF_CryptoHandlerD2Ev(%class.CPDF_CryptoHandler* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_CryptoHandler, %class.CPDF_CryptoHandler* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %struct.CRYPT_aes_context*, %struct.CRYPT_aes_context** %2, align 8
  store %struct.CRYPT_aes_context* null, %struct.CRYPT_aes_context** %2, align 8
  %4 = icmp eq %struct.CRYPT_aes_context* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast %struct.CRYPT_aes_context* %3 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %6) #8
  br label %7

7:                                                ; preds = %1, %5
  ret void
}

declare void @_ZN17CPDF_ObjectWalkerC2EPK11CPDF_Object(%class.CPDF_ObjectWalker*, %class.CPDF_Object*) unnamed_addr #2

declare %class.CPDF_Object* @_ZN17CPDF_ObjectWalker7GetNextEv(%class.CPDF_ObjectWalker*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__112__deque_baseIZN18CPDF_CryptoHandler17DecryptObjectTreeEN5fxcrt9RetainPtrI11CPDF_ObjectEEE14MayBeSignatureNS_9allocatorIS6_EEED2Ev(%"class.std::__1::__deque_base"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 1
  %3 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 8
  %7 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %3, i64 %6
  %8 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 2
  %9 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %8, align 8
  %10 = icmp eq %struct.MayBeSignature** %9, %3
  %11 = ptrtoint %struct.MayBeSignature** %9 to i64
  %12 = ptrtoint %struct.MayBeSignature** %3 to i64
  br i1 %10, label %13, label %15

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  br label %28

15:                                               ; preds = %1
  %16 = load %struct.MayBeSignature*, %struct.MayBeSignature** %7, align 8
  %17 = and i64 %5, 255
  %18 = getelementptr inbounds %struct.MayBeSignature, %struct.MayBeSignature* %16, i64 %17
  %19 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %5
  %22 = lshr i64 %21, 8
  %23 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %3, i64 %22
  %24 = load %struct.MayBeSignature*, %struct.MayBeSignature** %23, align 8
  %25 = and i64 %21, 255
  %26 = getelementptr inbounds %struct.MayBeSignature, %struct.MayBeSignature* %24, i64 %25
  %27 = icmp eq %struct.MayBeSignature* %26, %18
  br i1 %27, label %28, label %34

28:                                               ; preds = %47, %15, %13
  %29 = phi i64* [ %14, %13 ], [ %19, %15 ], [ %19, %47 ]
  store i64 0, i64* %29, align 8
  %30 = bitcast %struct.MayBeSignature*** %8 to i64*
  %31 = sub i64 %11, %12
  %32 = ashr exact i64 %31, 3
  %33 = icmp ugt i64 %32, 2
  br i1 %33, label %52, label %65

34:                                               ; preds = %15, %47
  %35 = phi %struct.MayBeSignature* [ %50, %47 ], [ %18, %15 ]
  %36 = phi %struct.MayBeSignature** [ %49, %47 ], [ %7, %15 ]
  %37 = getelementptr inbounds %struct.MayBeSignature, %struct.MayBeSignature* %35, i64 1
  %38 = ptrtoint %struct.MayBeSignature* %37 to i64
  %39 = bitcast %struct.MayBeSignature** %36 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = icmp eq i64 %41, 4096
  br i1 %42, label %43, label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %36, i64 1
  %45 = bitcast %struct.MayBeSignature** %44 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %43, %34
  %48 = phi i64 [ %46, %43 ], [ %38, %34 ]
  %49 = phi %struct.MayBeSignature** [ %44, %43 ], [ %36, %34 ]
  %50 = inttoptr i64 %48 to %struct.MayBeSignature*
  %51 = icmp eq %struct.MayBeSignature* %26, %50
  br i1 %51, label %28, label %34

52:                                               ; preds = %28, %52
  %53 = phi %struct.MayBeSignature** [ %57, %52 ], [ %3, %28 ]
  %54 = bitcast %struct.MayBeSignature** %53 to i8**
  %55 = load i8*, i8** %54, align 8
  tail call void @_ZdlPv(i8* %55) #10
  %56 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %2, align 8
  %57 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %56, i64 1
  store %struct.MayBeSignature** %57, %struct.MayBeSignature*** %2, align 8
  %58 = load i64, i64* %30, align 8
  %59 = ptrtoint %struct.MayBeSignature** %57 to i64
  %60 = sub i64 %58, %59
  %61 = ashr exact i64 %60, 3
  %62 = icmp ugt i64 %61, 2
  br i1 %62, label %52, label %63

63:                                               ; preds = %52
  %64 = inttoptr i64 %58 to %struct.MayBeSignature**
  br label %65

65:                                               ; preds = %63, %28
  %66 = phi %struct.MayBeSignature** [ %9, %28 ], [ %64, %63 ]
  %67 = phi %struct.MayBeSignature** [ %3, %28 ], [ %57, %63 ]
  %68 = phi i64 [ %32, %28 ], [ %61, %63 ]
  switch i64 %68, label %72 [
    i64 1, label %70
    i64 2, label %69
  ]

69:                                               ; preds = %65
  br label %70

70:                                               ; preds = %65, %69
  %71 = phi i64 [ 256, %69 ], [ 128, %65 ]
  store i64 %71, i64* %4, align 8
  br label %72

72:                                               ; preds = %70, %65
  %73 = icmp eq %struct.MayBeSignature** %67, %66
  br i1 %73, label %83, label %74

74:                                               ; preds = %72, %74
  %75 = phi %struct.MayBeSignature** [ %78, %74 ], [ %67, %72 ]
  %76 = bitcast %struct.MayBeSignature** %75 to i8**
  %77 = load i8*, i8** %76, align 8
  tail call void @_ZdlPv(i8* %77) #10
  %78 = getelementptr inbounds %struct.MayBeSignature*, %struct.MayBeSignature** %75, i64 1
  %79 = icmp eq %struct.MayBeSignature** %78, %66
  br i1 %79, label %80, label %74

80:                                               ; preds = %74
  %81 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %2, align 8
  %82 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %8, align 8
  br label %83

83:                                               ; preds = %80, %72
  %84 = phi %struct.MayBeSignature** [ %82, %80 ], [ %66, %72 ]
  %85 = phi %struct.MayBeSignature** [ %81, %80 ], [ %66, %72 ]
  %86 = icmp eq %struct.MayBeSignature** %84, %85
  br i1 %86, label %95, label %87

87:                                               ; preds = %83
  %88 = ptrtoint %struct.MayBeSignature** %85 to i64
  %89 = getelementptr %struct.MayBeSignature*, %struct.MayBeSignature** %84, i64 -1
  %90 = ptrtoint %struct.MayBeSignature** %89 to i64
  %91 = sub i64 %90, %88
  %92 = lshr i64 %91, 3
  %93 = xor i64 %92, -1
  %94 = getelementptr %struct.MayBeSignature*, %struct.MayBeSignature** %84, i64 %93
  store %struct.MayBeSignature** %94, %struct.MayBeSignature*** %8, align 8
  br label %95

95:                                               ; preds = %87, %83
  %96 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 0
  %97 = load %struct.MayBeSignature**, %struct.MayBeSignature*** %96, align 8
  %98 = icmp eq %struct.MayBeSignature** %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %95
  %100 = bitcast %struct.MayBeSignature** %97 to i8*
  tail call void @_ZdlPv(i8* %100) #10
  br label %101

101:                                              ; preds = %95, %99
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare void @_ZN14CPDF_StreamAccC1EPK11CPDF_Stream(%class.CPDF_StreamAcc*, %class.CPDF_Stream*) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK6pdfium4spanIhE7subspanEmm: argument 0"}
!4 = distinct !{!4, !"_ZNK6pdfium4spanIhE7subspanEmm"}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{i32 -2144197477}
!7 = !{i32 -2144197456}
!8 = !{i32 -2144196890}
!9 = !{i32 -2144196869}
!10 = !{i8 0, i8 2}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZNK5fxcrt10ByteString8raw_spanEv: argument 0"}
!13 = distinct !{!13, !"_ZNK5fxcrt10ByteString8raw_spanEv"}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !15}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !15}
!19 = distinct !{!19, !15}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN6pdfium10MakeRetainI14CPDF_StreamAccJRP11CPDF_StreamEEEN5fxcrt9RetainPtrIT_EEDpOT0_: argument 0"}
!22 = distinct !{!22, !"_ZN6pdfium10MakeRetainI14CPDF_StreamAccJRP11CPDF_StreamEEEN5fxcrt9RetainPtrIT_EEDpOT0_"}
