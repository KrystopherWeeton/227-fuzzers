; ModuleID = '../../cc/base/spiral_iterator.cc'
source_filename = "../../cc/base/spiral_iterator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.cc::SpiralIterator" = type { %"class.cc::IndexRect", %"class.cc::IndexRect", %"class.cc::IndexRect", i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.cc::IndexRect" = type { i32, i32, i32, i32 }

@_ZN2cc14SpiralIteratorC1Ev = hidden unnamed_addr alias void (%"class.cc::SpiralIterator"*), void (%"class.cc::SpiralIterator"*)* @_ZN2cc14SpiralIteratorC2Ev
@_ZN2cc14SpiralIteratorC1ERKNS_9IndexRectES3_S3_ = hidden unnamed_addr alias void (%"class.cc::SpiralIterator"*, %"class.cc::IndexRect"*, %"class.cc::IndexRect"*, %"class.cc::IndexRect"*), void (%"class.cc::SpiralIterator"*, %"class.cc::IndexRect"*, %"class.cc::IndexRect"*, %"class.cc::IndexRect"*)* @_ZN2cc14SpiralIteratorC2ERKNS_9IndexRectES3_S3_

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2cc14SpiralIteratorC2Ev(%"class.cc::SpiralIterator"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.cc::SpiralIterator"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 -1, i64 56, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc14SpiralIteratorC2ERKNS_9IndexRectES3_S3_(%"class.cc::SpiralIterator"*, %"class.cc::IndexRect"* nocapture readonly dereferenceable(16), %"class.cc::IndexRect"* nocapture readonly dereferenceable(16), %"class.cc::IndexRect"* nocapture readonly dereferenceable(16)) unnamed_addr #1 align 2 {
  %5 = bitcast %"class.cc::SpiralIterator"* %0 to i8*
  %6 = bitcast %"class.cc::IndexRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 16, i1 false)
  %7 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 1
  %8 = bitcast %"class.cc::IndexRect"* %7 to i8*
  %9 = bitcast %"class.cc::IndexRect"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 16, i1 false)
  %10 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 2
  %11 = bitcast %"class.cc::IndexRect"* %10 to i8*
  %12 = bitcast %"class.cc::IndexRect"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %11, i8* align 4 %12, i64 16, i1 false)
  %13 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 3
  %14 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 4
  %15 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 5
  store i32 3, i32* %15, align 4
  %16 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 6
  store i32 1, i32* %16, align 4
  %17 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 7
  %18 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 8
  %19 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 9
  %20 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 10
  %21 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 0, i32 3
  store i32 0, i32* %17, align 4
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = add i32 %22, 1
  %26 = sub i32 %25, %24
  store i32 %26, i32* %20, align 4
  %27 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = add i32 %28, 1
  %32 = sub i32 %31, %30
  store i32 %32, i32* %19, align 4
  %33 = add nsw i32 %32, -1
  store i32 %33, i32* %18, align 4
  store i32 %28, i32* %13, align 4
  store i32 %22, i32* %14, align 4
  %34 = tail call dereferenceable(80) %"class.cc::SpiralIterator"* @_ZN2cc14SpiralIteratorppEv(%"class.cc::SpiralIterator"* %0)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(80) %"class.cc::SpiralIterator"* @_ZN2cc14SpiralIteratorppEv(%"class.cc::SpiralIterator"* returned) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 8
  %3 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 5
  %4 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 10
  %5 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 9
  %6 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 7
  %7 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 6
  %8 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 4
  %10 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 1, i32 2
  %12 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 1, i32 3
  %13 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %10, i64 0, i32 0
  %14 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 1, i32 1
  %15 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 2
  %16 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 2, i32 1
  %17 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 2, i32 3
  %18 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %15, i64 0, i32 0
  %19 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 2, i32 2
  %20 = load i32, i32* %2, align 4
  %21 = load i32, i32* %3, align 4
  br label %22

22:                                               ; preds = %1, %180
  %23 = phi i32 [ %21, %1 ], [ %181, %180 ]
  %24 = phi i32 [ %20, %1 ], [ %182, %180 ]
  %25 = phi i32 [ 0, %1 ], [ %183, %180 ]
  switch i32 %23, label %26 [
    i32 0, label %27
    i32 2, label %27
  ]

26:                                               ; preds = %22
  br label %27

27:                                               ; preds = %22, %22, %26
  %28 = phi i32* [ %5, %26 ], [ %4, %22 ], [ %4, %22 ]
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %24, %29
  br i1 %30, label %31, label %34

31:                                               ; preds = %27
  %32 = load i32, i32* %7, align 4
  %33 = load i32, i32* %6, align 4
  br label %45

34:                                               ; preds = %27
  %35 = load i32, i32* %6, align 4
  %36 = load i32, i32* %7, align 4
  %37 = sub nsw i32 0, %36
  store i32 %37, i32* %6, align 4
  store i32 %35, i32* %7, align 4
  store i32 0, i32* %2, align 4
  %38 = add nsw i32 %23, 1
  %39 = srem i32 %38, 4
  store i32 %39, i32* %3, align 4
  switch i32 %39, label %45 [
    i32 3, label %40
    i32 1, label %40
  ]

40:                                               ; preds = %34, %34
  %41 = load i32, i32* %4, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %4, align 4
  %43 = load i32, i32* %5, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %5, align 4
  br label %45

45:                                               ; preds = %31, %40, %34
  %46 = phi i32 [ %24, %31 ], [ 0, %40 ], [ 0, %34 ]
  %47 = phi i32 [ %33, %31 ], [ %37, %40 ], [ %37, %34 ]
  %48 = phi i32 [ %32, %31 ], [ %35, %40 ], [ %35, %34 ]
  %49 = load i32, i32* %8, align 4
  %50 = add nsw i32 %49, %48
  store i32 %50, i32* %8, align 4
  %51 = load i32, i32* %9, align 4
  %52 = add nsw i32 %51, %47
  store i32 %52, i32* %9, align 4
  %53 = add nsw i32 %46, 1
  store i32 %53, i32* %2, align 4
  %54 = tail call zeroext i1 @_ZNK2cc9IndexRect8ContainsEii(%"class.cc::IndexRect"* %10, i32 %50, i32 %52) #6
  br i1 %54, label %55, label %88

55:                                               ; preds = %45
  %56 = load i32, i32* %8, align 4
  %57 = load i32, i32* %9, align 4
  %58 = tail call zeroext i1 @_ZNK2cc9IndexRect8ContainsEii(%"class.cc::IndexRect"* %15, i32 %56, i32 %57) #6
  br i1 %58, label %59, label %186

59:                                               ; preds = %55
  %60 = load i32, i32* %3, align 4
  switch i32 %60, label %71 [
    i32 0, label %64
    i32 1, label %61
    i32 2, label %62
    i32 3, label %63
  ]

61:                                               ; preds = %59
  br label %64

62:                                               ; preds = %59
  br label %64

63:                                               ; preds = %59
  br label %64

64:                                               ; preds = %59, %62, %61, %63
  %65 = phi i32* [ %16, %63 ], [ %8, %61 ], [ %17, %62 ], [ %9, %59 ]
  %66 = phi i32* [ %8, %63 ], [ %18, %61 ], [ %9, %62 ], [ %19, %59 ]
  %67 = phi i32* [ %5, %63 ], [ %5, %61 ], [ %4, %62 ], [ %4, %59 ]
  %68 = load i32, i32* %65, align 4
  %69 = load i32, i32* %66, align 4
  %70 = sub nsw i32 %68, %69
  br label %71

71:                                               ; preds = %64, %59
  %72 = phi i32 [ 0, %59 ], [ %70, %64 ]
  %73 = phi i32* [ %5, %59 ], [ %67, %64 ]
  %74 = load i32, i32* %73, align 4
  %75 = load i32, i32* %2, align 4
  %76 = sub nsw i32 %74, %75
  %77 = icmp slt i32 %76, %72
  %78 = select i1 %77, i32 %76, i32 %72
  %79 = load i32, i32* %7, align 4
  %80 = mul nsw i32 %78, %79
  %81 = load i32, i32* %8, align 4
  %82 = add nsw i32 %80, %81
  store i32 %82, i32* %8, align 4
  %83 = load i32, i32* %6, align 4
  %84 = mul nsw i32 %83, %78
  %85 = load i32, i32* %9, align 4
  %86 = add nsw i32 %85, %84
  store i32 %86, i32* %9, align 4
  %87 = add nsw i32 %78, %75
  store i32 %87, i32* %2, align 4
  br label %180

88:                                               ; preds = %45
  %89 = load i32, i32* %3, align 4
  switch i32 %89, label %90 [
    i32 0, label %91
    i32 2, label %91
  ]

90:                                               ; preds = %88
  br label %91

91:                                               ; preds = %88, %88, %90
  %92 = phi i32* [ %5, %90 ], [ %4, %88 ], [ %4, %88 ]
  %93 = load i32, i32* %92, align 4
  %94 = load i32, i32* %2, align 4
  %95 = sub nsw i32 %93, %94
  switch i32 %89, label %164 [
    i32 0, label %96
    i32 1, label %113
    i32 2, label %130
    i32 3, label %147
  ]

96:                                               ; preds = %91
  %97 = load i32, i32* %8, align 4
  %98 = load i32, i32* %13, align 4
  %99 = icmp sgt i32 %98, %97
  %100 = load i32, i32* %14, align 4
  %101 = icmp slt i32 %100, %97
  %102 = or i1 %99, %101
  br i1 %102, label %110, label %103

103:                                              ; preds = %96
  %104 = load i32, i32* %12, align 4
  %105 = load i32, i32* %9, align 4
  %106 = icmp slt i32 %104, %105
  br i1 %106, label %107, label %110

107:                                              ; preds = %103
  %108 = xor i32 %104, -1
  %109 = add i32 %105, %108
  br label %110

110:                                              ; preds = %96, %107, %103
  %111 = phi i32 [ %109, %107 ], [ %95, %103 ], [ %95, %96 ]
  %112 = icmp sge i32 %100, %97
  br label %164

113:                                              ; preds = %91
  %114 = load i32, i32* %9, align 4
  %115 = load i32, i32* %11, align 4
  %116 = icmp sgt i32 %115, %114
  br i1 %116, label %127, label %117

117:                                              ; preds = %113
  %118 = load i32, i32* %12, align 4
  %119 = icmp slt i32 %118, %114
  br i1 %119, label %127, label %120

120:                                              ; preds = %117
  %121 = load i32, i32* %14, align 4
  %122 = load i32, i32* %8, align 4
  %123 = icmp slt i32 %121, %122
  br i1 %123, label %124, label %127

124:                                              ; preds = %120
  %125 = xor i32 %121, -1
  %126 = add i32 %122, %125
  br label %127

127:                                              ; preds = %117, %113, %124, %120
  %128 = phi i32 [ %126, %124 ], [ %95, %120 ], [ %95, %117 ], [ %95, %113 ]
  %129 = icmp sle i32 %115, %114
  br label %164

130:                                              ; preds = %91
  %131 = load i32, i32* %8, align 4
  %132 = load i32, i32* %13, align 4
  %133 = icmp sgt i32 %132, %131
  br i1 %133, label %144, label %134

134:                                              ; preds = %130
  %135 = load i32, i32* %14, align 4
  %136 = icmp slt i32 %135, %131
  br i1 %136, label %144, label %137

137:                                              ; preds = %134
  %138 = load i32, i32* %11, align 4
  %139 = load i32, i32* %9, align 4
  %140 = icmp sgt i32 %138, %139
  br i1 %140, label %141, label %144

141:                                              ; preds = %137
  %142 = xor i32 %139, -1
  %143 = add i32 %138, %142
  br label %144

144:                                              ; preds = %134, %130, %141, %137
  %145 = phi i32 [ %143, %141 ], [ %95, %137 ], [ %95, %134 ], [ %95, %130 ]
  %146 = icmp sle i32 %132, %131
  br label %164

147:                                              ; preds = %91
  %148 = load i32, i32* %9, align 4
  %149 = load i32, i32* %11, align 4
  %150 = icmp sgt i32 %149, %148
  %151 = load i32, i32* %12, align 4
  %152 = icmp slt i32 %151, %148
  %153 = or i1 %150, %152
  br i1 %153, label %161, label %154

154:                                              ; preds = %147
  %155 = load i32, i32* %13, align 4
  %156 = load i32, i32* %8, align 4
  %157 = icmp sgt i32 %155, %156
  br i1 %157, label %158, label %161

158:                                              ; preds = %154
  %159 = xor i32 %156, -1
  %160 = add i32 %155, %159
  br label %161

161:                                              ; preds = %147, %158, %154
  %162 = phi i32 [ %160, %158 ], [ %95, %154 ], [ %95, %147 ]
  %163 = icmp sge i32 %151, %148
  br label %164

164:                                              ; preds = %91, %161, %144, %127, %110
  %165 = phi i32 [ %95, %91 ], [ %162, %161 ], [ %145, %144 ], [ %128, %127 ], [ %111, %110 ]
  %166 = phi i1 [ false, %91 ], [ %163, %161 ], [ %146, %144 ], [ %129, %127 ], [ %112, %110 ]
  %167 = icmp slt i32 %95, %165
  %168 = select i1 %167, i32 %95, i32 %165
  %169 = load i32, i32* %7, align 4
  %170 = mul nsw i32 %168, %169
  %171 = load i32, i32* %8, align 4
  %172 = add nsw i32 %171, %170
  store i32 %172, i32* %8, align 4
  %173 = load i32, i32* %6, align 4
  %174 = mul nsw i32 %173, %168
  %175 = load i32, i32* %9, align 4
  %176 = add nsw i32 %175, %174
  store i32 %176, i32* %9, align 4
  %177 = add nsw i32 %168, %94
  store i32 %177, i32* %2, align 4
  %178 = add nsw i32 %25, 1
  %179 = select i1 %166, i32 0, i32 %178
  br label %180

180:                                              ; preds = %164, %71
  %181 = phi i32 [ %60, %71 ], [ %89, %164 ]
  %182 = phi i32 [ %87, %71 ], [ %177, %164 ]
  %183 = phi i32 [ 0, %71 ], [ %179, %164 ]
  %184 = icmp slt i32 %183, 4
  br i1 %184, label %22, label %185

185:                                              ; preds = %180
  store i32 -1, i32* %8, align 4
  store i32 -1, i32* %9, align 4
  br label %186

186:                                              ; preds = %55, %185
  ret %"class.cc::SpiralIterator"* %0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc14SpiralIteratorcvbEv(%"class.cc::SpiralIterator"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = icmp ne i32 %7, -1
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ false, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc14SpiralIterator22needs_direction_switchEv(%"class.cc::SpiralIterator"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 8
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 5
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %8 [
    i32 0, label %6
    i32 2, label %6
  ]

6:                                                ; preds = %1, %1
  %7 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 10
  br label %10

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 9
  br label %10

10:                                               ; preds = %6, %8
  %11 = phi i32* [ %7, %6 ], [ %9, %8 ]
  %12 = load i32, i32* %11, align 4
  %13 = icmp sge i32 %3, %12
  ret i1 %13
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2cc14SpiralIterator16switch_directionEv(%"class.cc::SpiralIterator"* nocapture) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 6
  %5 = load i32, i32* %4, align 4
  %6 = sub nsw i32 0, %5
  store i32 %6, i32* %2, align 4
  store i32 %3, i32* %4, align 4
  %7 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 8
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 5
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 1
  %11 = srem i32 %10, 4
  store i32 %11, i32* %8, align 4
  switch i32 %11, label %19 [
    i32 3, label %12
    i32 1, label %12
  ]

12:                                               ; preds = %1, %1
  %13 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 10
  %14 = load i32, i32* %13, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %13, align 4
  %16 = getelementptr inbounds %"class.cc::SpiralIterator", %"class.cc::SpiralIterator"* %0, i64 0, i32 9
  %17 = load i32, i32* %16, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %16, align 4
  br label %19

19:                                               ; preds = %1, %12
  ret void
}

declare zeroext i1 @_ZNK2cc9IndexRect8ContainsEii(%"class.cc::IndexRect"*, i32, i32) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
