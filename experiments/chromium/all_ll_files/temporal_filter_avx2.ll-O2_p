; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/temporal_filter_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/temporal_filter_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_mv = type { i32 }
%union.int_interpfilters = type { i32 }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }

@block_size_high = internal unnamed_addr constant [22 x i8] c"\04\08\04\08\10\08\10 \10 @ @\80@\80\10\04 \08@\10", align 16
@block_size_wide = internal unnamed_addr constant [22 x i8] c"\04\04\08\08\08\10\10\10   @@@\80\80\04\10\08 \10@", align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_apply_temporal_filter_avx2(%struct.yv12_buffer_config* nocapture readonly, %struct.macroblockd* nocapture readonly, i8 zeroext, i32, i32, i32, double* nocapture readonly, %struct.mv* nocapture readonly, i32* nocapture readonly, i32, i32, i8* nocapture readonly, i32* nocapture, i16* nocapture) local_unnamed_addr #0 {
  %15 = alloca [32 x [32 x i32]], align 16
  %16 = alloca [4 x double], align 16
  %17 = alloca [1088 x i16], align 16
  %18 = alloca [1024 x i32], align 16
  %19 = zext i8 %2 to i64
  %20 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %19
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 3, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 2, i32 0, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = icmp slt i32 %27, %29
  %31 = select i1 %30, i32 %27, i32 %29
  %32 = sitofp i32 %9 to double
  %33 = fdiv double %32, 2.000000e+01
  %34 = fmul double %33, %33
  %35 = fcmp olt double %34, 1.000000e-05
  %36 = fcmp ogt double %34, 1.000000e+00
  %37 = select i1 %36, double 1.000000e+00, double %34
  %38 = select i1 %35, double 1.000000e-05, double %37
  %39 = icmp sgt i32 %9, 127
  br i1 %39, label %40, label %44

40:                                               ; preds = %14
  %41 = fmul double %32, 1.562500e-02
  %42 = fmul double %41, %41
  %43 = fmul double %42, 5.000000e-01
  br label %44

44:                                               ; preds = %40, %14
  %45 = phi double [ %43, %40 ], [ %38, %14 ]
  %46 = sitofp i32 %10 to double
  %47 = fmul double %46, 2.500000e-01
  %48 = fmul double %47, %47
  %49 = fcmp ogt double %48, 1.000000e+00
  %50 = select i1 %49, double 1.000000e+00, double %48
  %51 = bitcast [4 x double]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %51) #4
  %52 = bitcast [1088 x i16]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2176, i8* nonnull %52) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %52, i8 0, i64 2176, i1 false)
  %53 = bitcast [1024 x i32]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %53) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %53, i8 0, i64 4096, i1 false)
  %54 = sitofp i32 %31 to double
  %55 = fmul double %54, 1.000000e-01
  %56 = fcmp ogt double %55, 1.000000e+00
  %57 = select i1 %56, double %55, double 1.000000e+00
  %58 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 0, i32 0
  %59 = load i16, i16* %58, align 2
  %60 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 0, i32 1
  %61 = load i16, i16* %60, align 2
  %62 = sitofp i16 %59 to double
  %63 = fmul double %62, %62
  %64 = sitofp i16 %61 to double
  %65 = fmul double %64, %64
  %66 = fadd double %63, %65
  %67 = tail call double @sqrt(double %66) #4
  %68 = fdiv double %67, %57
  %69 = getelementptr inbounds [4 x double], [4 x double]* %16, i64 0, i64 0
  %70 = fcmp ogt double %68, 1.000000e+00
  %71 = select i1 %70, double %68, double 1.000000e+00
  store double %71, double* %69, align 16
  %72 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 1, i32 0
  %73 = load i16, i16* %72, align 2
  %74 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 1, i32 1
  %75 = load i16, i16* %74, align 2
  %76 = sitofp i16 %73 to double
  %77 = fmul double %76, %76
  %78 = sitofp i16 %75 to double
  %79 = fmul double %78, %78
  %80 = fadd double %77, %79
  %81 = tail call double @sqrt(double %80) #4
  %82 = fdiv double %81, %57
  %83 = getelementptr inbounds [4 x double], [4 x double]* %16, i64 0, i64 1
  %84 = fcmp ogt double %82, 1.000000e+00
  %85 = select i1 %84, double %82, double 1.000000e+00
  store double %85, double* %83, align 8
  %86 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 2, i32 0
  %87 = load i16, i16* %86, align 2
  %88 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 2, i32 1
  %89 = load i16, i16* %88, align 2
  %90 = sitofp i16 %87 to double
  %91 = fmul double %90, %90
  %92 = sitofp i16 %89 to double
  %93 = fmul double %92, %92
  %94 = fadd double %91, %93
  %95 = tail call double @sqrt(double %94) #4
  %96 = fdiv double %95, %57
  %97 = getelementptr inbounds [4 x double], [4 x double]* %16, i64 0, i64 2
  %98 = fcmp ogt double %96, 1.000000e+00
  %99 = select i1 %98, double %96, double 1.000000e+00
  store double %99, double* %97, align 16
  %100 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 3, i32 0
  %101 = load i16, i16* %100, align 2
  %102 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 3, i32 1
  %103 = load i16, i16* %102, align 2
  %104 = sitofp i16 %101 to double
  %105 = fmul double %104, %104
  %106 = sitofp i16 %103 to double
  %107 = fmul double %106, %106
  %108 = fadd double %105, %107
  %109 = tail call double @sqrt(double %108) #4
  %110 = fdiv double %109, %57
  %111 = getelementptr inbounds [4 x double], [4 x double]* %16, i64 0, i64 3
  %112 = fcmp ogt double %110, 1.000000e+00
  %113 = select i1 %112, double %110, double 1.000000e+00
  store double %113, double* %111, align 8
  %114 = fcmp olt double %48, 1.000000e-05
  %115 = select i1 %114, double 1.000000e-05, double %50
  %116 = icmp sgt i32 %5, 0
  br i1 %116, label %117, label %128

117:                                              ; preds = %44
  %118 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %119 = bitcast %union.anon.6* %118 to [2 x i32]*
  %120 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %121 = bitcast %union.anon.8* %120 to [3 x i8*]*
  %122 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i64 0, i32 1
  %123 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i64 0, i32 2
  %124 = getelementptr inbounds [1088 x i16], [1088 x i16]* %17, i64 0, i64 0
  %125 = bitcast [32 x [32 x i32]]* %15 to i8*
  %126 = getelementptr inbounds [1088 x i16], [1088 x i16]* %17, i64 0, i64 -2
  %127 = zext i32 %5 to i64
  br label %129

128:                                              ; preds = %712, %44
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %53) #4
  call void @llvm.lifetime.end.p0i8(i64 2176, i8* nonnull %52) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %51) #4
  ret void

129:                                              ; preds = %712, %117
  %130 = phi i64 [ 0, %117 ], [ %715, %712 ]
  %131 = phi i32 [ 0, %117 ], [ %714, %712 ]
  %132 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i64 %130, i32 2
  %133 = load i32, i32* %132, align 8
  %134 = lshr i32 %22, %133
  %135 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i64 %130, i32 1
  %136 = load i32, i32* %135, align 4
  %137 = lshr i32 %25, %136
  %138 = icmp ne i64 %130, 0
  %139 = zext i1 %138 to i64
  %140 = getelementptr inbounds [2 x i32], [2 x i32]* %119, i64 0, i64 %139
  %141 = load i32, i32* %140, align 4
  %142 = mul i32 %134, %3
  %143 = mul i32 %142, %141
  %144 = mul i32 %137, %4
  %145 = add i32 %143, %144
  %146 = getelementptr inbounds [3 x i8*], [3 x i8*]* %121, i64 0, i64 %130
  %147 = load i8*, i8** %146, align 8
  %148 = sext i32 %145 to i64
  %149 = getelementptr inbounds i8, i8* %147, i64 %148
  %150 = load i32, i32* %122, align 4
  %151 = sub nsw i32 %136, %150
  %152 = load i32, i32* %123, align 8
  %153 = sub nsw i32 %133, %152
  %154 = icmp eq i64 %130, 0
  %155 = add nsw i32 %153, %151
  %156 = shl i32 1, %155
  %157 = add i32 %156, 25
  %158 = sitofp i32 %157 to double
  %159 = fdiv double 1.000000e+00, %158
  %160 = select i1 %154, double 4.000000e-02, double %159
  %161 = getelementptr inbounds double, double* %6, i64 %130
  %162 = load double, double* %161, align 8
  %163 = fmul double %162, 2.000000e+00
  %164 = fadd double %163, 5.000000e+00
  %165 = tail call double @log(double %164) #4
  %166 = fadd double %165, 5.000000e-01
  %167 = fmul double %45, %166
  %168 = fmul double %115, %167
  %169 = fdiv double 1.000000e+00, %168
  %170 = icmp eq i64 %130, 1
  %171 = icmp ne i32 %134, 0
  %172 = and i1 %170, %171
  br i1 %172, label %173, label %361

173:                                              ; preds = %129
  %174 = icmp eq i32 %137, 0
  %175 = shl i32 1, %153
  %176 = icmp eq i32 %153, 31
  %177 = shl i32 1, %151
  %178 = icmp eq i32 %151, 31
  %179 = sext i32 %177 to i64
  %180 = zext i32 %137 to i64
  %181 = icmp sgt i64 %179, 1
  %182 = select i1 %181, i64 %179, i64 1
  %183 = icmp sgt i64 %179, 1
  %184 = select i1 %183, i64 %179, i64 1
  %185 = add nsw i64 %184, -1
  %186 = and i64 %182, 9223372036854775776
  %187 = add nsw i64 %186, -32
  %188 = lshr exact i64 %187, 5
  %189 = add nuw nsw i64 %188, 1
  %190 = icmp ult i64 %182, 32
  %191 = trunc i64 %185 to i32
  %192 = icmp ugt i64 %185, 4294967295
  %193 = and i64 %182, 9223372036854775776
  %194 = and i64 %189, 1
  %195 = icmp eq i64 %187, 0
  %196 = sub nuw nsw i64 %189, %194
  %197 = icmp eq i64 %194, 0
  %198 = icmp eq i64 %182, %193
  br label %199

199:                                              ; preds = %214, %173
  %200 = phi i32 [ 0, %173 ], [ %215, %214 ]
  br i1 %174, label %214, label %201

201:                                              ; preds = %199
  %202 = shl i32 %200, %153
  %203 = shl i32 %200, 5
  %204 = mul i32 %202, 34
  br label %205

205:                                              ; preds = %341, %201
  %206 = phi i64 [ 0, %201 ], [ %342, %341 ]
  br i1 %176, label %341, label %207

207:                                              ; preds = %205
  %208 = trunc i64 %206 to i32
  %209 = shl i32 %208, %151
  %210 = add i32 %203, %208
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds [1024 x i32], [1024 x i32]* %18, i64 0, i64 %211
  %213 = add i32 %204, %209
  br label %217

214:                                              ; preds = %341, %199
  %215 = add nuw i32 %200, 1
  %216 = icmp eq i32 %215, %134
  br i1 %216, label %361, label %199

217:                                              ; preds = %207, %346
  %218 = phi i32 [ 0, %207 ], [ %347, %346 ]
  %219 = mul i32 %218, 34
  %220 = add i32 %213, %219
  br i1 %178, label %346, label %221

221:                                              ; preds = %217
  %222 = add i32 %218, %202
  %223 = mul nsw i32 %222, 34
  %224 = add i32 %223, %209
  %225 = load i32, i32* %212, align 4
  br i1 %190, label %226, label %229

226:                                              ; preds = %326, %229, %221
  %227 = phi i64 [ 0, %229 ], [ 0, %221 ], [ %193, %326 ]
  %228 = phi i32 [ %225, %229 ], [ %225, %221 ], [ %340, %326 ]
  br label %349

229:                                              ; preds = %221
  %230 = add i32 %220, %191
  %231 = icmp slt i32 %230, %220
  %232 = or i1 %231, %192
  br i1 %232, label %226, label %233

233:                                              ; preds = %229
  %234 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %225, i32 0
  br i1 %195, label %292, label %235

235:                                              ; preds = %233, %235
  %236 = phi i64 [ %289, %235 ], [ 0, %233 ]
  %237 = phi <8 x i32> [ %285, %235 ], [ %234, %233 ]
  %238 = phi <8 x i32> [ %286, %235 ], [ zeroinitializer, %233 ]
  %239 = phi <8 x i32> [ %287, %235 ], [ zeroinitializer, %233 ]
  %240 = phi <8 x i32> [ %288, %235 ], [ zeroinitializer, %233 ]
  %241 = phi i64 [ %290, %235 ], [ %196, %233 ]
  %242 = trunc i64 %236 to i32
  %243 = add i32 %224, %242
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds [1088 x i16], [1088 x i16]* %17, i64 0, i64 %244
  %246 = bitcast i16* %245 to <8 x i16>*
  %247 = load <8 x i16>, <8 x i16>* %246, align 2
  %248 = getelementptr inbounds i16, i16* %245, i64 8
  %249 = bitcast i16* %248 to <8 x i16>*
  %250 = load <8 x i16>, <8 x i16>* %249, align 2
  %251 = getelementptr inbounds i16, i16* %245, i64 16
  %252 = bitcast i16* %251 to <8 x i16>*
  %253 = load <8 x i16>, <8 x i16>* %252, align 2
  %254 = getelementptr inbounds i16, i16* %245, i64 24
  %255 = bitcast i16* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 2
  %257 = zext <8 x i16> %247 to <8 x i32>
  %258 = zext <8 x i16> %250 to <8 x i32>
  %259 = zext <8 x i16> %253 to <8 x i32>
  %260 = zext <8 x i16> %256 to <8 x i32>
  %261 = add <8 x i32> %237, %257
  %262 = add <8 x i32> %238, %258
  %263 = add <8 x i32> %239, %259
  %264 = add <8 x i32> %240, %260
  %265 = trunc i64 %236 to i32
  %266 = or i32 %265, 32
  %267 = add i32 %224, %266
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds [1088 x i16], [1088 x i16]* %17, i64 0, i64 %268
  %270 = bitcast i16* %269 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 2
  %272 = getelementptr inbounds i16, i16* %269, i64 8
  %273 = bitcast i16* %272 to <8 x i16>*
  %274 = load <8 x i16>, <8 x i16>* %273, align 2
  %275 = getelementptr inbounds i16, i16* %269, i64 16
  %276 = bitcast i16* %275 to <8 x i16>*
  %277 = load <8 x i16>, <8 x i16>* %276, align 2
  %278 = getelementptr inbounds i16, i16* %269, i64 24
  %279 = bitcast i16* %278 to <8 x i16>*
  %280 = load <8 x i16>, <8 x i16>* %279, align 2
  %281 = zext <8 x i16> %271 to <8 x i32>
  %282 = zext <8 x i16> %274 to <8 x i32>
  %283 = zext <8 x i16> %277 to <8 x i32>
  %284 = zext <8 x i16> %280 to <8 x i32>
  %285 = add <8 x i32> %261, %281
  %286 = add <8 x i32> %262, %282
  %287 = add <8 x i32> %263, %283
  %288 = add <8 x i32> %264, %284
  %289 = add i64 %236, 64
  %290 = add i64 %241, -2
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %292, label %235, !llvm.loop !2

292:                                              ; preds = %235, %233
  %293 = phi <8 x i32> [ undef, %233 ], [ %285, %235 ]
  %294 = phi <8 x i32> [ undef, %233 ], [ %286, %235 ]
  %295 = phi <8 x i32> [ undef, %233 ], [ %287, %235 ]
  %296 = phi <8 x i32> [ undef, %233 ], [ %288, %235 ]
  %297 = phi i64 [ 0, %233 ], [ %289, %235 ]
  %298 = phi <8 x i32> [ %234, %233 ], [ %285, %235 ]
  %299 = phi <8 x i32> [ zeroinitializer, %233 ], [ %286, %235 ]
  %300 = phi <8 x i32> [ zeroinitializer, %233 ], [ %287, %235 ]
  %301 = phi <8 x i32> [ zeroinitializer, %233 ], [ %288, %235 ]
  br i1 %197, label %326, label %302

302:                                              ; preds = %292
  %303 = trunc i64 %297 to i32
  %304 = add i32 %224, %303
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds [1088 x i16], [1088 x i16]* %17, i64 0, i64 %305
  %307 = getelementptr inbounds i16, i16* %306, i64 24
  %308 = bitcast i16* %307 to <8 x i16>*
  %309 = load <8 x i16>, <8 x i16>* %308, align 2
  %310 = zext <8 x i16> %309 to <8 x i32>
  %311 = add <8 x i32> %301, %310
  %312 = getelementptr inbounds i16, i16* %306, i64 16
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 2
  %315 = zext <8 x i16> %314 to <8 x i32>
  %316 = add <8 x i32> %300, %315
  %317 = getelementptr inbounds i16, i16* %306, i64 8
  %318 = bitcast i16* %317 to <8 x i16>*
  %319 = load <8 x i16>, <8 x i16>* %318, align 2
  %320 = zext <8 x i16> %319 to <8 x i32>
  %321 = add <8 x i32> %299, %320
  %322 = bitcast i16* %306 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 2
  %324 = zext <8 x i16> %323 to <8 x i32>
  %325 = add <8 x i32> %298, %324
  br label %326

326:                                              ; preds = %292, %302
  %327 = phi <8 x i32> [ %293, %292 ], [ %325, %302 ]
  %328 = phi <8 x i32> [ %294, %292 ], [ %321, %302 ]
  %329 = phi <8 x i32> [ %295, %292 ], [ %316, %302 ]
  %330 = phi <8 x i32> [ %296, %292 ], [ %311, %302 ]
  %331 = add <8 x i32> %328, %327
  %332 = add <8 x i32> %329, %331
  %333 = add <8 x i32> %330, %332
  %334 = shufflevector <8 x i32> %333, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %335 = add <8 x i32> %333, %334
  %336 = shufflevector <8 x i32> %335, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %337 = add <8 x i32> %335, %336
  %338 = shufflevector <8 x i32> %337, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %339 = add <8 x i32> %337, %338
  %340 = extractelement <8 x i32> %339, i32 0
  br i1 %198, label %344, label %226

341:                                              ; preds = %346, %205
  %342 = add nuw nsw i64 %206, 1
  %343 = icmp eq i64 %342, %180
  br i1 %343, label %214, label %205

344:                                              ; preds = %349, %326
  %345 = phi i32 [ %340, %326 ], [ %358, %349 ]
  store i32 %345, i32* %212, align 4
  br label %346

346:                                              ; preds = %217, %344
  %347 = add nuw nsw i32 %218, 1
  %348 = icmp slt i32 %347, %175
  br i1 %348, label %217, label %341

349:                                              ; preds = %226, %349
  %350 = phi i64 [ %359, %349 ], [ %227, %226 ]
  %351 = phi i32 [ %358, %349 ], [ %228, %226 ]
  %352 = trunc i64 %350 to i32
  %353 = add i32 %224, %352
  %354 = sext i32 %353 to i64
  %355 = getelementptr inbounds [1088 x i16], [1088 x i16]* %17, i64 0, i64 %354
  %356 = load i16, i16* %355, align 2
  %357 = zext i16 %356 to i32
  %358 = add i32 %351, %357
  %359 = add nuw nsw i64 %350, 1
  %360 = icmp slt i64 %359, %179
  br i1 %360, label %349, label %344, !llvm.loop !4

361:                                              ; preds = %214, %129
  %362 = sext i32 %131 to i64
  %363 = getelementptr inbounds i8, i8* %11, i64 %362
  %364 = getelementptr inbounds i32, i32* %12, i64 %362
  %365 = getelementptr inbounds i16, i16* %13, i64 %362
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %125) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %125, i8 -86, i64 4096, i1 false) #4
  %366 = icmp eq i32 %137, 32
  %367 = icmp sgt i32 %134, 0
  br i1 %366, label %368, label %404

368:                                              ; preds = %361
  br i1 %367, label %369, label %466

369:                                              ; preds = %368
  %370 = zext i32 %141 to i64
  br label %371

371:                                              ; preds = %371, %369
  %372 = phi i8* [ %149, %369 ], [ %399, %371 ]
  %373 = phi i8* [ %363, %369 ], [ %400, %371 ]
  %374 = phi i16* [ %124, %369 ], [ %401, %371 ]
  %375 = phi i32 [ 0, %369 ], [ %402, %371 ]
  %376 = bitcast i8* %372 to <32 x i8>*
  %377 = load <32 x i8>, <32 x i8>* %376, align 1
  %378 = bitcast i8* %373 to <32 x i8>*
  %379 = load <32 x i8>, <32 x i8>* %378, align 1
  %380 = icmp ugt <32 x i8> %377, %379
  %381 = select <32 x i1> %380, <32 x i8> %377, <32 x i8> %379
  %382 = icmp ult <32 x i8> %377, %379
  %383 = select <32 x i1> %382, <32 x i8> %377, <32 x i8> %379
  %384 = tail call <32 x i8> @llvm.usub.sat.v32i8(<32 x i8> %381, <32 x i8> %383) #4
  %385 = bitcast <32 x i8> %384 to <4 x i64>
  %386 = shufflevector <4 x i64> %385, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %387 = shufflevector <4 x i64> %385, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %388 = bitcast <2 x i64> %386 to <16 x i8>
  %389 = zext <16 x i8> %388 to <16 x i16>
  %390 = bitcast <2 x i64> %387 to <16 x i8>
  %391 = zext <16 x i8> %390 to <16 x i16>
  %392 = mul nuw <16 x i16> %389, %389
  %393 = mul nuw <16 x i16> %391, %391
  %394 = bitcast i16* %374 to <16 x i16>*
  store <16 x i16> %392, <16 x i16>* %394, align 1
  %395 = getelementptr inbounds i16, i16* %374, i64 16
  %396 = bitcast i16* %395 to <16 x i16>*
  store <16 x i16> %393, <16 x i16>* %396, align 1
  %397 = getelementptr inbounds i16, i16* %374, i64 32
  %398 = bitcast i16* %397 to i32*
  store i32 0, i32* %398, align 4
  %399 = getelementptr inbounds i8, i8* %372, i64 %370
  %400 = getelementptr inbounds i8, i8* %373, i64 32
  %401 = getelementptr inbounds i16, i16* %374, i64 34
  %402 = add nuw nsw i32 %375, 1
  %403 = icmp eq i32 %402, %134
  br i1 %403, label %464, label %371

404:                                              ; preds = %361
  br i1 %367, label %405, label %464

405:                                              ; preds = %404
  %406 = zext i32 %141 to i64
  %407 = zext i32 %137 to i64
  %408 = and i32 %134, 1
  %409 = icmp eq i32 %134, 1
  br i1 %409, label %447, label %410

410:                                              ; preds = %405
  %411 = sub i32 %134, %408
  br label %412

412:                                              ; preds = %412, %410
  %413 = phi i8* [ %149, %410 ], [ %442, %412 ]
  %414 = phi i8* [ %363, %410 ], [ %443, %412 ]
  %415 = phi i16* [ %124, %410 ], [ %444, %412 ]
  %416 = phi i32 [ %411, %410 ], [ %445, %412 ]
  %417 = bitcast i8* %413 to <16 x i8>*
  %418 = load <16 x i8>, <16 x i8>* %417, align 1
  %419 = bitcast i8* %414 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 1
  %421 = zext <16 x i8> %418 to <16 x i16>
  %422 = zext <16 x i8> %420 to <16 x i16>
  %423 = sub nsw <16 x i16> %421, %422
  %424 = mul <16 x i16> %423, %423
  %425 = bitcast i16* %415 to <16 x i16>*
  store <16 x i16> %424, <16 x i16>* %425, align 1
  %426 = getelementptr inbounds i16, i16* %415, i64 16
  %427 = bitcast i16* %426 to i32*
  store i32 0, i32* %427, align 4
  %428 = getelementptr inbounds i8, i8* %413, i64 %406
  %429 = getelementptr inbounds i8, i8* %414, i64 %407
  %430 = getelementptr inbounds i16, i16* %415, i64 34
  %431 = bitcast i8* %428 to <16 x i8>*
  %432 = load <16 x i8>, <16 x i8>* %431, align 1
  %433 = bitcast i8* %429 to <16 x i8>*
  %434 = load <16 x i8>, <16 x i8>* %433, align 1
  %435 = zext <16 x i8> %432 to <16 x i16>
  %436 = zext <16 x i8> %434 to <16 x i16>
  %437 = sub nsw <16 x i16> %435, %436
  %438 = mul <16 x i16> %437, %437
  %439 = bitcast i16* %430 to <16 x i16>*
  store <16 x i16> %438, <16 x i16>* %439, align 1
  %440 = getelementptr inbounds i16, i16* %415, i64 50
  %441 = bitcast i16* %440 to i32*
  store i32 0, i32* %441, align 4
  %442 = getelementptr inbounds i8, i8* %428, i64 %406
  %443 = getelementptr inbounds i8, i8* %429, i64 %407
  %444 = getelementptr inbounds i16, i16* %415, i64 68
  %445 = add i32 %416, -2
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %447, label %412

447:                                              ; preds = %412, %405
  %448 = phi i8* [ %149, %405 ], [ %442, %412 ]
  %449 = phi i8* [ %363, %405 ], [ %443, %412 ]
  %450 = phi i16* [ %124, %405 ], [ %444, %412 ]
  %451 = icmp eq i32 %408, 0
  br i1 %451, label %464, label %452

452:                                              ; preds = %447
  %453 = bitcast i8* %448 to <16 x i8>*
  %454 = load <16 x i8>, <16 x i8>* %453, align 1
  %455 = bitcast i8* %449 to <16 x i8>*
  %456 = load <16 x i8>, <16 x i8>* %455, align 1
  %457 = zext <16 x i8> %454 to <16 x i16>
  %458 = zext <16 x i8> %456 to <16 x i16>
  %459 = sub nsw <16 x i16> %457, %458
  %460 = mul <16 x i16> %459, %459
  %461 = bitcast i16* %450 to <16 x i16>*
  store <16 x i16> %460, <16 x i16>* %461, align 1
  %462 = getelementptr inbounds i16, i16* %450, i64 16
  %463 = bitcast i16* %462 to i32*
  store i32 0, i32* %463, align 4
  br label %464

464:                                              ; preds = %452, %447, %371, %404
  %465 = icmp sgt i32 %137, 0
  br i1 %465, label %466, label %473

466:                                              ; preds = %464, %368
  %467 = add nsw i32 %137, -4
  %468 = add nsw i32 %134, -4
  %469 = sext i32 %468 to i64
  %470 = zext i32 %467 to i64
  %471 = sext i32 %137 to i64
  %472 = zext i32 %134 to i64
  br label %482

473:                                              ; preds = %528, %464
  %474 = phi i1 [ false, %464 ], [ true, %528 ]
  br i1 %367, label %475, label %712

475:                                              ; preds = %473
  %476 = lshr i32 %134, 1
  %477 = sdiv i32 %137, 2
  %478 = sext i32 %477 to i64
  %479 = zext i32 %476 to i64
  %480 = zext i32 %134 to i64
  %481 = zext i32 %137 to i64
  br label %618

482:                                              ; preds = %528, %466
  %483 = phi i64 [ 0, %466 ], [ %529, %528 ]
  %484 = icmp eq i64 %483, 0
  %485 = getelementptr inbounds i16, i16* %126, i64 %483
  %486 = select i1 %484, i16* %124, i16* %485
  %487 = icmp eq i64 %483, %470
  %488 = bitcast i16* %486 to <2 x i64>*
  %489 = load <2 x i64>, <2 x i64>* %488, align 4
  br i1 %484, label %497, label %501

490:                                              ; preds = %710
  %491 = bitcast <2 x i64> %711 to <8 x i16>
  %492 = zext <8 x i16> %491 to <8 x i32>
  %493 = getelementptr inbounds i16, i16* %486, i64 102
  %494 = or i64 %483, 1
  %495 = or i64 %483, 2
  %496 = or i64 %483, 3
  br label %514

497:                                              ; preds = %482
  %498 = bitcast <2 x i64> %489 to <16 x i8>
  %499 = shufflevector <16 x i8> %498, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %500 = bitcast <16 x i8> %499 to <2 x i64>
  br label %501

501:                                              ; preds = %497, %482
  %502 = phi <2 x i64> [ %500, %497 ], [ %489, %482 ]
  br i1 %487, label %503, label %507

503:                                              ; preds = %501
  %504 = bitcast <2 x i64> %502 to <16 x i8>
  %505 = shufflevector <16 x i8> %504, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 10, i32 11>
  %506 = bitcast <16 x i8> %505 to <2 x i64>
  br label %507

507:                                              ; preds = %503, %501
  %508 = phi <2 x i64> [ %506, %503 ], [ %502, %501 ]
  %509 = bitcast <2 x i64> %508 to <8 x i16>
  %510 = zext <8 x i16> %509 to <8 x i32>
  %511 = getelementptr inbounds i16, i16* %486, i64 34
  %512 = bitcast i16* %511 to <2 x i64>*
  %513 = load <2 x i64>, <2 x i64>* %512, align 4
  br i1 %484, label %683, label %687

514:                                              ; preds = %549, %490
  %515 = phi <8 x i32> [ %492, %490 ], [ %550, %549 ]
  %516 = phi <8 x i32> [ %696, %490 ], [ %515, %549 ]
  %517 = phi <8 x i32> [ %510, %490 ], [ %516, %549 ]
  %518 = phi <8 x i32> [ %510, %490 ], [ %517, %549 ]
  %519 = phi <8 x i32> [ %510, %490 ], [ %518, %549 ]
  %520 = phi i64 [ 0, %490 ], [ %616, %549 ]
  %521 = phi i16* [ %493, %490 ], [ %551, %549 ]
  %522 = add <8 x i32> %516, %515
  %523 = add <8 x i32> %522, %517
  %524 = add <8 x i32> %523, %518
  %525 = add <8 x i32> %524, %519
  %526 = bitcast <8 x i32> %525 to <4 x i64>
  %527 = icmp sgt i64 %520, %469
  br i1 %527, label %549, label %531

528:                                              ; preds = %549, %710
  %529 = add nuw nsw i64 %483, 4
  %530 = icmp slt i64 %529, %471
  br i1 %530, label %482, label %473

531:                                              ; preds = %514
  %532 = bitcast i16* %521 to <2 x i64>*
  %533 = load <2 x i64>, <2 x i64>* %532, align 1
  br i1 %484, label %534, label %538

534:                                              ; preds = %531
  %535 = bitcast <2 x i64> %533 to <16 x i8>
  %536 = shufflevector <16 x i8> %535, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %537 = bitcast <16 x i8> %536 to <2 x i64>
  br label %538

538:                                              ; preds = %534, %531
  %539 = phi <2 x i64> [ %537, %534 ], [ %533, %531 ]
  br i1 %487, label %540, label %544

540:                                              ; preds = %538
  %541 = bitcast <2 x i64> %539 to <16 x i8>
  %542 = shufflevector <16 x i8> %541, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 10, i32 11>
  %543 = bitcast <16 x i8> %542 to <2 x i64>
  br label %544

544:                                              ; preds = %540, %538
  %545 = phi <2 x i64> [ %543, %540 ], [ %539, %538 ]
  %546 = bitcast <2 x i64> %545 to <8 x i16>
  %547 = zext <8 x i16> %546 to <8 x i32>
  %548 = getelementptr inbounds i16, i16* %521, i64 34
  br label %549

549:                                              ; preds = %544, %514
  %550 = phi <8 x i32> [ %547, %544 ], [ %515, %514 ]
  %551 = phi i16* [ %548, %544 ], [ %521, %514 ]
  %552 = and <4 x i64> %526, <i64 -1, i64 -1, i64 4294967295, i64 0>
  %553 = shufflevector <4 x i64> %552, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %554 = shufflevector <4 x i64> %552, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %555 = bitcast <2 x i64> %553 to <4 x i32>
  %556 = bitcast <2 x i64> %554 to <4 x i32>
  %557 = add <4 x i32> %556, %555
  %558 = bitcast <4 x i32> %557 to <16 x i8>
  %559 = shufflevector <16 x i8> %558, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %560 = bitcast <16 x i8> %559 to <4 x i32>
  %561 = add <4 x i32> %557, %560
  %562 = bitcast <4 x i32> %561 to <16 x i8>
  %563 = shufflevector <16 x i8> %562, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %564 = bitcast <16 x i8> %563 to <4 x i32>
  %565 = add <4 x i32> %561, %564
  %566 = extractelement <4 x i32> %565, i64 0
  %567 = getelementptr inbounds [32 x [32 x i32]], [32 x [32 x i32]]* %15, i64 0, i64 %520, i64 %483
  store i32 %566, i32* %567, align 16
  %568 = and <4 x i64> %526, <i64 -4294967296, i64 -1, i64 -1, i64 0>
  %569 = shufflevector <4 x i64> %568, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %570 = shufflevector <4 x i64> %568, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %571 = bitcast <2 x i64> %569 to <4 x i32>
  %572 = bitcast <2 x i64> %570 to <4 x i32>
  %573 = add <4 x i32> %572, %571
  %574 = bitcast <4 x i32> %573 to <16 x i8>
  %575 = shufflevector <16 x i8> %574, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %576 = bitcast <16 x i8> %575 to <4 x i32>
  %577 = add <4 x i32> %573, %576
  %578 = bitcast <4 x i32> %577 to <16 x i8>
  %579 = shufflevector <16 x i8> %578, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %580 = bitcast <16 x i8> %579 to <4 x i32>
  %581 = add <4 x i32> %577, %580
  %582 = extractelement <4 x i32> %581, i64 0
  %583 = getelementptr inbounds [32 x [32 x i32]], [32 x [32 x i32]]* %15, i64 0, i64 %520, i64 %494
  store i32 %582, i32* %583, align 4
  %584 = and <4 x i64> %526, <i64 0, i64 -1, i64 -1, i64 4294967295>
  %585 = shufflevector <4 x i64> %584, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %586 = shufflevector <4 x i64> %584, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %587 = bitcast <2 x i64> %585 to <4 x i32>
  %588 = bitcast <2 x i64> %586 to <4 x i32>
  %589 = add <4 x i32> %588, %587
  %590 = bitcast <4 x i32> %589 to <16 x i8>
  %591 = shufflevector <16 x i8> %590, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %592 = bitcast <16 x i8> %591 to <4 x i32>
  %593 = add <4 x i32> %589, %592
  %594 = bitcast <4 x i32> %593 to <16 x i8>
  %595 = shufflevector <16 x i8> %594, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %596 = bitcast <16 x i8> %595 to <4 x i32>
  %597 = add <4 x i32> %593, %596
  %598 = extractelement <4 x i32> %597, i64 0
  %599 = getelementptr inbounds [32 x [32 x i32]], [32 x [32 x i32]]* %15, i64 0, i64 %520, i64 %495
  store i32 %598, i32* %599, align 8
  %600 = and <4 x i64> %526, <i64 0, i64 -4294967296, i64 -1, i64 -1>
  %601 = shufflevector <4 x i64> %600, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %602 = shufflevector <4 x i64> %600, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %603 = bitcast <2 x i64> %601 to <4 x i32>
  %604 = bitcast <2 x i64> %602 to <4 x i32>
  %605 = add <4 x i32> %604, %603
  %606 = bitcast <4 x i32> %605 to <16 x i8>
  %607 = shufflevector <16 x i8> %606, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %608 = bitcast <16 x i8> %607 to <4 x i32>
  %609 = add <4 x i32> %605, %608
  %610 = bitcast <4 x i32> %609 to <16 x i8>
  %611 = shufflevector <16 x i8> %610, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %612 = bitcast <16 x i8> %611 to <4 x i32>
  %613 = add <4 x i32> %609, %612
  %614 = extractelement <4 x i32> %613, i64 0
  %615 = getelementptr inbounds [32 x [32 x i32]], [32 x [32 x i32]]* %15, i64 0, i64 %520, i64 %496
  store i32 %614, i32* %615, align 4
  %616 = add nuw nsw i64 %520, 1
  %617 = icmp eq i64 %616, %472
  br i1 %617, label %528, label %514

618:                                              ; preds = %632, %475
  %619 = phi i64 [ 0, %475 ], [ %634, %632 ]
  %620 = phi i32 [ 0, %475 ], [ %633, %632 ]
  br i1 %474, label %621, label %632

621:                                              ; preds = %618
  %622 = trunc i64 %619 to i32
  %623 = mul i32 %137, %622
  %624 = shl i64 %619, 5
  %625 = icmp uge i64 %619, %479
  %626 = zext i1 %625 to i64
  %627 = shl nuw nsw i64 %626, 1
  %628 = and i64 %624, 4294967264
  %629 = sext i32 %620 to i64
  br label %636

630:                                              ; preds = %636
  %631 = trunc i64 %681 to i32
  br label %632

632:                                              ; preds = %630, %618
  %633 = phi i32 [ %620, %618 ], [ %631, %630 ]
  %634 = add nuw nsw i64 %619, 1
  %635 = icmp eq i64 %634, %480
  br i1 %635, label %712, label %618

636:                                              ; preds = %636, %621
  %637 = phi i64 [ %629, %621 ], [ %681, %636 ]
  %638 = phi i64 [ 0, %621 ], [ %680, %636 ]
  %639 = trunc i64 %638 to i32
  %640 = add i32 %623, %639
  %641 = zext i32 %640 to i64
  %642 = getelementptr inbounds i8, i8* %363, i64 %641
  %643 = load i8, i8* %642, align 1
  %644 = zext i8 %643 to i32
  %645 = getelementptr inbounds [32 x [32 x i32]], [32 x [32 x i32]]* %15, i64 0, i64 %619, i64 %638
  %646 = load i32, i32* %645, align 4
  %647 = add nuw nsw i64 %638, %628
  %648 = getelementptr inbounds [1024 x i32], [1024 x i32]* %18, i64 0, i64 %647
  %649 = load i32, i32* %648, align 4
  %650 = add i32 %649, %646
  %651 = uitofp i32 %650 to double
  %652 = fmul double %160, %651
  %653 = icmp sge i64 %638, %478
  %654 = zext i1 %653 to i64
  %655 = or i64 %627, %654
  %656 = getelementptr inbounds i32, i32* %8, i64 %655
  %657 = load i32, i32* %656, align 4
  %658 = sitofp i32 %657 to double
  %659 = fmul double %652, 0x3FA5555555555555
  %660 = fmul double %658, 0x3F81111111111111
  %661 = fadd double %660, %659
  %662 = getelementptr inbounds [4 x double], [4 x double]* %16, i64 0, i64 %655
  %663 = load double, double* %662, align 8
  %664 = fmul double %663, %661
  %665 = fmul double %169, %664
  %666 = fcmp olt double %665, 7.000000e+00
  %667 = select i1 %666, double %665, double 7.000000e+00
  %668 = fsub double -0.000000e+00, %667
  %669 = tail call double @exp(double %668) #4
  %670 = fmul double %669, 1.000000e+03
  %671 = fptosi double %670 to i32
  %672 = getelementptr inbounds i16, i16* %365, i64 %637
  %673 = load i16, i16* %672, align 2
  %674 = trunc i32 %671 to i16
  %675 = add i16 %673, %674
  store i16 %675, i16* %672, align 2
  %676 = mul nsw i32 %671, %644
  %677 = getelementptr inbounds i32, i32* %364, i64 %637
  %678 = load i32, i32* %677, align 4
  %679 = add i32 %678, %676
  store i32 %679, i32* %677, align 4
  %680 = add nuw nsw i64 %638, 1
  %681 = add nsw i64 %637, 1
  %682 = icmp eq i64 %680, %481
  br i1 %682, label %630, label %636

683:                                              ; preds = %507
  %684 = bitcast <2 x i64> %513 to <16 x i8>
  %685 = shufflevector <16 x i8> %684, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %686 = bitcast <16 x i8> %685 to <2 x i64>
  br label %687

687:                                              ; preds = %683, %507
  %688 = phi <2 x i64> [ %686, %683 ], [ %513, %507 ]
  br i1 %487, label %689, label %693

689:                                              ; preds = %687
  %690 = bitcast <2 x i64> %688 to <16 x i8>
  %691 = shufflevector <16 x i8> %690, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 10, i32 11>
  %692 = bitcast <16 x i8> %691 to <2 x i64>
  br label %693

693:                                              ; preds = %689, %687
  %694 = phi <2 x i64> [ %692, %689 ], [ %688, %687 ]
  %695 = bitcast <2 x i64> %694 to <8 x i16>
  %696 = zext <8 x i16> %695 to <8 x i32>
  %697 = getelementptr inbounds i16, i16* %486, i64 68
  %698 = bitcast i16* %697 to <2 x i64>*
  %699 = load <2 x i64>, <2 x i64>* %698, align 4
  br i1 %484, label %700, label %704

700:                                              ; preds = %693
  %701 = bitcast <2 x i64> %699 to <16 x i8>
  %702 = shufflevector <16 x i8> %701, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %703 = bitcast <16 x i8> %702 to <2 x i64>
  br label %704

704:                                              ; preds = %700, %693
  %705 = phi <2 x i64> [ %703, %700 ], [ %699, %693 ]
  br i1 %487, label %706, label %710

706:                                              ; preds = %704
  %707 = bitcast <2 x i64> %705 to <16 x i8>
  %708 = shufflevector <16 x i8> %707, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 10, i32 11>
  %709 = bitcast <16 x i8> %708 to <2 x i64>
  br label %710

710:                                              ; preds = %706, %704
  %711 = phi <2 x i64> [ %709, %706 ], [ %705, %704 ]
  br i1 %367, label %490, label %528

712:                                              ; preds = %632, %473
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %125) #4
  %713 = mul i32 %137, %134
  %714 = add i32 %713, %131
  %715 = add nuw nsw i64 %130, 1
  %716 = icmp eq i64 %715, %127
  br i1 %716, label %128, label %129
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare <32 x i8> @llvm.usub.sat.v32i8(<32 x i8>, <32 x i8>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
