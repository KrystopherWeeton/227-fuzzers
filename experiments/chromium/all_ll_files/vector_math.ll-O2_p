; ModuleID = '../../media/base/vector_math.cc'
source_filename = "../../media/base/vector_math.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media11vector_math4FMACEPKffiPf(float* nocapture readonly, float, i32, float* nocapture) local_unnamed_addr #0 {
  %5 = srem i32 %2, 4
  %6 = sub i32 %2, %5
  %7 = insertelement <4 x float> undef, float %1, i32 0
  %8 = shufflevector <4 x float> %7, <4 x float> undef, <4 x i32> zeroinitializer
  %9 = icmp sgt i32 %6, 0
  br i1 %9, label %10, label %36

10:                                               ; preds = %4
  %11 = sext i32 %6 to i64
  %12 = add nsw i64 %11, -1
  %13 = lshr i64 %12, 2
  %14 = add nuw nsw i64 %13, 1
  %15 = and i64 %14, 3
  %16 = icmp ult i64 %12, 12
  br i1 %16, label %19, label %17

17:                                               ; preds = %10
  %18 = sub nsw i64 %14, %15
  br label %143

19:                                               ; preds = %143, %10
  %20 = phi i64 [ 0, %10 ], [ %181, %143 ]
  %21 = icmp eq i64 %15, 0
  br i1 %21, label %36, label %22

22:                                               ; preds = %19, %22
  %23 = phi i64 [ %33, %22 ], [ %20, %19 ]
  %24 = phi i64 [ %34, %22 ], [ %15, %19 ]
  %25 = getelementptr inbounds float, float* %3, i64 %23
  %26 = bitcast float* %25 to <4 x float>*
  %27 = load <4 x float>, <4 x float>* %26, align 16
  %28 = getelementptr inbounds float, float* %0, i64 %23
  %29 = bitcast float* %28 to <4 x float>*
  %30 = load <4 x float>, <4 x float>* %29, align 16
  %31 = fmul <4 x float> %8, %30
  %32 = fadd <4 x float> %27, %31
  store <4 x float> %32, <4 x float>* %26, align 16
  %33 = add nuw nsw i64 %23, 4
  %34 = add i64 %24, -1
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %22, !llvm.loop !2

36:                                               ; preds = %19, %22, %4
  %37 = icmp sgt i32 %5, 0
  br i1 %37, label %38, label %194

38:                                               ; preds = %36
  %39 = sext i32 %6 to i64
  %40 = sext i32 %2 to i64
  %41 = add nsw i64 %39, 1
  %42 = icmp sgt i64 %41, %40
  %43 = select i1 %42, i64 %41, i64 %40
  %44 = sub nsw i64 %43, %39
  %45 = icmp ult i64 %44, 8
  br i1 %45, label %46, label %48

46:                                               ; preds = %141, %48, %38
  %47 = phi i64 [ %39, %48 ], [ %39, %38 ], [ %61, %141 ]
  br label %184

48:                                               ; preds = %38
  %49 = getelementptr float, float* %3, i64 %39
  %50 = add nsw i64 %39, 1
  %51 = icmp sgt i64 %50, %40
  %52 = select i1 %51, i64 %50, i64 %40
  %53 = getelementptr float, float* %3, i64 %52
  %54 = getelementptr float, float* %0, i64 %39
  %55 = getelementptr float, float* %0, i64 %52
  %56 = icmp ult float* %49, %55
  %57 = icmp ult float* %54, %53
  %58 = and i1 %56, %57
  br i1 %58, label %46, label %59

59:                                               ; preds = %48
  %60 = and i64 %44, -8
  %61 = add nsw i64 %60, %39
  %62 = insertelement <4 x float> undef, float %1, i32 0
  %63 = shufflevector <4 x float> %62, <4 x float> undef, <4 x i32> zeroinitializer
  %64 = insertelement <4 x float> undef, float %1, i32 0
  %65 = shufflevector <4 x float> %64, <4 x float> undef, <4 x i32> zeroinitializer
  %66 = add nsw i64 %60, -8
  %67 = lshr exact i64 %66, 3
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 1
  %70 = icmp eq i64 %66, 0
  br i1 %70, label %118, label %71

71:                                               ; preds = %59
  %72 = sub nuw nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %115, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %116, %73 ]
  %76 = add i64 %74, %39
  %77 = getelementptr inbounds float, float* %0, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %79 = load <4 x float>, <4 x float>* %78, align 4, !alias.scope !4
  %80 = getelementptr inbounds float, float* %77, i64 4
  %81 = bitcast float* %80 to <4 x float>*
  %82 = load <4 x float>, <4 x float>* %81, align 4, !alias.scope !4
  %83 = fmul <4 x float> %79, %63
  %84 = fmul <4 x float> %82, %65
  %85 = getelementptr inbounds float, float* %3, i64 %76
  %86 = bitcast float* %85 to <4 x float>*
  %87 = load <4 x float>, <4 x float>* %86, align 4, !alias.scope !7, !noalias !4
  %88 = getelementptr inbounds float, float* %85, i64 4
  %89 = bitcast float* %88 to <4 x float>*
  %90 = load <4 x float>, <4 x float>* %89, align 4, !alias.scope !7, !noalias !4
  %91 = fadd <4 x float> %87, %83
  %92 = fadd <4 x float> %90, %84
  %93 = bitcast float* %85 to <4 x float>*
  store <4 x float> %91, <4 x float>* %93, align 4, !alias.scope !7, !noalias !4
  %94 = bitcast float* %88 to <4 x float>*
  store <4 x float> %92, <4 x float>* %94, align 4, !alias.scope !7, !noalias !4
  %95 = or i64 %74, 8
  %96 = add i64 %95, %39
  %97 = getelementptr inbounds float, float* %0, i64 %96
  %98 = bitcast float* %97 to <4 x float>*
  %99 = load <4 x float>, <4 x float>* %98, align 4, !alias.scope !4
  %100 = getelementptr inbounds float, float* %97, i64 4
  %101 = bitcast float* %100 to <4 x float>*
  %102 = load <4 x float>, <4 x float>* %101, align 4, !alias.scope !4
  %103 = fmul <4 x float> %99, %63
  %104 = fmul <4 x float> %102, %65
  %105 = getelementptr inbounds float, float* %3, i64 %96
  %106 = bitcast float* %105 to <4 x float>*
  %107 = load <4 x float>, <4 x float>* %106, align 4, !alias.scope !7, !noalias !4
  %108 = getelementptr inbounds float, float* %105, i64 4
  %109 = bitcast float* %108 to <4 x float>*
  %110 = load <4 x float>, <4 x float>* %109, align 4, !alias.scope !7, !noalias !4
  %111 = fadd <4 x float> %107, %103
  %112 = fadd <4 x float> %110, %104
  %113 = bitcast float* %105 to <4 x float>*
  store <4 x float> %111, <4 x float>* %113, align 4, !alias.scope !7, !noalias !4
  %114 = bitcast float* %108 to <4 x float>*
  store <4 x float> %112, <4 x float>* %114, align 4, !alias.scope !7, !noalias !4
  %115 = add i64 %74, 16
  %116 = add i64 %75, -2
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %73, !llvm.loop !9

118:                                              ; preds = %73, %59
  %119 = phi i64 [ 0, %59 ], [ %115, %73 ]
  %120 = icmp eq i64 %69, 0
  br i1 %120, label %141, label %121

121:                                              ; preds = %118
  %122 = add i64 %119, %39
  %123 = getelementptr inbounds float, float* %0, i64 %122
  %124 = bitcast float* %123 to <4 x float>*
  %125 = load <4 x float>, <4 x float>* %124, align 4, !alias.scope !4
  %126 = getelementptr inbounds float, float* %123, i64 4
  %127 = bitcast float* %126 to <4 x float>*
  %128 = load <4 x float>, <4 x float>* %127, align 4, !alias.scope !4
  %129 = fmul <4 x float> %125, %63
  %130 = fmul <4 x float> %128, %65
  %131 = getelementptr inbounds float, float* %3, i64 %122
  %132 = bitcast float* %131 to <4 x float>*
  %133 = load <4 x float>, <4 x float>* %132, align 4, !alias.scope !7, !noalias !4
  %134 = getelementptr inbounds float, float* %131, i64 4
  %135 = bitcast float* %134 to <4 x float>*
  %136 = load <4 x float>, <4 x float>* %135, align 4, !alias.scope !7, !noalias !4
  %137 = fadd <4 x float> %133, %129
  %138 = fadd <4 x float> %136, %130
  %139 = bitcast float* %131 to <4 x float>*
  store <4 x float> %137, <4 x float>* %139, align 4, !alias.scope !7, !noalias !4
  %140 = bitcast float* %134 to <4 x float>*
  store <4 x float> %138, <4 x float>* %140, align 4, !alias.scope !7, !noalias !4
  br label %141

141:                                              ; preds = %118, %121
  %142 = icmp eq i64 %44, %60
  br i1 %142, label %194, label %46

143:                                              ; preds = %143, %17
  %144 = phi i64 [ 0, %17 ], [ %181, %143 ]
  %145 = phi i64 [ %18, %17 ], [ %182, %143 ]
  %146 = getelementptr inbounds float, float* %3, i64 %144
  %147 = bitcast float* %146 to <4 x float>*
  %148 = load <4 x float>, <4 x float>* %147, align 16
  %149 = getelementptr inbounds float, float* %0, i64 %144
  %150 = bitcast float* %149 to <4 x float>*
  %151 = load <4 x float>, <4 x float>* %150, align 16
  %152 = fmul <4 x float> %8, %151
  %153 = fadd <4 x float> %148, %152
  store <4 x float> %153, <4 x float>* %147, align 16
  %154 = or i64 %144, 4
  %155 = getelementptr inbounds float, float* %3, i64 %154
  %156 = bitcast float* %155 to <4 x float>*
  %157 = load <4 x float>, <4 x float>* %156, align 16
  %158 = getelementptr inbounds float, float* %0, i64 %154
  %159 = bitcast float* %158 to <4 x float>*
  %160 = load <4 x float>, <4 x float>* %159, align 16
  %161 = fmul <4 x float> %8, %160
  %162 = fadd <4 x float> %157, %161
  store <4 x float> %162, <4 x float>* %156, align 16
  %163 = or i64 %144, 8
  %164 = getelementptr inbounds float, float* %3, i64 %163
  %165 = bitcast float* %164 to <4 x float>*
  %166 = load <4 x float>, <4 x float>* %165, align 16
  %167 = getelementptr inbounds float, float* %0, i64 %163
  %168 = bitcast float* %167 to <4 x float>*
  %169 = load <4 x float>, <4 x float>* %168, align 16
  %170 = fmul <4 x float> %8, %169
  %171 = fadd <4 x float> %166, %170
  store <4 x float> %171, <4 x float>* %165, align 16
  %172 = or i64 %144, 12
  %173 = getelementptr inbounds float, float* %3, i64 %172
  %174 = bitcast float* %173 to <4 x float>*
  %175 = load <4 x float>, <4 x float>* %174, align 16
  %176 = getelementptr inbounds float, float* %0, i64 %172
  %177 = bitcast float* %176 to <4 x float>*
  %178 = load <4 x float>, <4 x float>* %177, align 16
  %179 = fmul <4 x float> %8, %178
  %180 = fadd <4 x float> %175, %179
  store <4 x float> %180, <4 x float>* %174, align 16
  %181 = add nuw nsw i64 %144, 16
  %182 = add i64 %145, -4
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %19, label %143

184:                                              ; preds = %46, %184
  %185 = phi i64 [ %192, %184 ], [ %47, %46 ]
  %186 = getelementptr inbounds float, float* %0, i64 %185
  %187 = load float, float* %186, align 4
  %188 = fmul float %187, %1
  %189 = getelementptr inbounds float, float* %3, i64 %185
  %190 = load float, float* %189, align 4
  %191 = fadd float %190, %188
  store float %191, float* %189, align 4
  %192 = add nsw i64 %185, 1
  %193 = icmp slt i64 %192, %40
  br i1 %193, label %184, label %194, !llvm.loop !11

194:                                              ; preds = %184, %141, %36
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media11vector_math8FMAC_SSEEPKffiPf(float* nocapture readonly, float, i32, float* nocapture) local_unnamed_addr #0 {
  %5 = srem i32 %2, 4
  %6 = sub i32 %2, %5
  %7 = insertelement <4 x float> undef, float %1, i32 0
  %8 = shufflevector <4 x float> %7, <4 x float> undef, <4 x i32> zeroinitializer
  %9 = icmp sgt i32 %6, 0
  br i1 %9, label %10, label %36

10:                                               ; preds = %4
  %11 = sext i32 %6 to i64
  %12 = add nsw i64 %11, -1
  %13 = lshr i64 %12, 2
  %14 = add nuw nsw i64 %13, 1
  %15 = and i64 %14, 3
  %16 = icmp ult i64 %12, 12
  br i1 %16, label %19, label %17

17:                                               ; preds = %10
  %18 = sub nsw i64 %14, %15
  br label %143

19:                                               ; preds = %143, %10
  %20 = phi i64 [ 0, %10 ], [ %181, %143 ]
  %21 = icmp eq i64 %15, 0
  br i1 %21, label %36, label %22

22:                                               ; preds = %19, %22
  %23 = phi i64 [ %33, %22 ], [ %20, %19 ]
  %24 = phi i64 [ %34, %22 ], [ %15, %19 ]
  %25 = getelementptr inbounds float, float* %3, i64 %23
  %26 = bitcast float* %25 to <4 x float>*
  %27 = load <4 x float>, <4 x float>* %26, align 16
  %28 = getelementptr inbounds float, float* %0, i64 %23
  %29 = bitcast float* %28 to <4 x float>*
  %30 = load <4 x float>, <4 x float>* %29, align 16
  %31 = fmul <4 x float> %8, %30
  %32 = fadd <4 x float> %27, %31
  store <4 x float> %32, <4 x float>* %26, align 16
  %33 = add nuw nsw i64 %23, 4
  %34 = add i64 %24, -1
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %22, !llvm.loop !12

36:                                               ; preds = %19, %22, %4
  %37 = icmp sgt i32 %5, 0
  br i1 %37, label %38, label %184

38:                                               ; preds = %36
  %39 = sext i32 %6 to i64
  %40 = sext i32 %2 to i64
  %41 = add nsw i64 %39, 1
  %42 = icmp sgt i64 %41, %40
  %43 = select i1 %42, i64 %41, i64 %40
  %44 = sub nsw i64 %43, %39
  %45 = icmp ult i64 %44, 8
  br i1 %45, label %46, label %48

46:                                               ; preds = %141, %48, %38
  %47 = phi i64 [ %39, %48 ], [ %39, %38 ], [ %61, %141 ]
  br label %185

48:                                               ; preds = %38
  %49 = getelementptr float, float* %3, i64 %39
  %50 = add nsw i64 %39, 1
  %51 = icmp sgt i64 %50, %40
  %52 = select i1 %51, i64 %50, i64 %40
  %53 = getelementptr float, float* %3, i64 %52
  %54 = getelementptr float, float* %0, i64 %39
  %55 = getelementptr float, float* %0, i64 %52
  %56 = icmp ult float* %49, %55
  %57 = icmp ult float* %54, %53
  %58 = and i1 %56, %57
  br i1 %58, label %46, label %59

59:                                               ; preds = %48
  %60 = and i64 %44, -8
  %61 = add nsw i64 %60, %39
  %62 = insertelement <4 x float> undef, float %1, i32 0
  %63 = shufflevector <4 x float> %62, <4 x float> undef, <4 x i32> zeroinitializer
  %64 = insertelement <4 x float> undef, float %1, i32 0
  %65 = shufflevector <4 x float> %64, <4 x float> undef, <4 x i32> zeroinitializer
  %66 = add nsw i64 %60, -8
  %67 = lshr exact i64 %66, 3
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 1
  %70 = icmp eq i64 %66, 0
  br i1 %70, label %118, label %71

71:                                               ; preds = %59
  %72 = sub nuw nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %115, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %116, %73 ]
  %76 = add i64 %74, %39
  %77 = getelementptr inbounds float, float* %0, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %79 = load <4 x float>, <4 x float>* %78, align 4, !alias.scope !13
  %80 = getelementptr inbounds float, float* %77, i64 4
  %81 = bitcast float* %80 to <4 x float>*
  %82 = load <4 x float>, <4 x float>* %81, align 4, !alias.scope !13
  %83 = fmul <4 x float> %79, %63
  %84 = fmul <4 x float> %82, %65
  %85 = getelementptr inbounds float, float* %3, i64 %76
  %86 = bitcast float* %85 to <4 x float>*
  %87 = load <4 x float>, <4 x float>* %86, align 4, !alias.scope !16, !noalias !13
  %88 = getelementptr inbounds float, float* %85, i64 4
  %89 = bitcast float* %88 to <4 x float>*
  %90 = load <4 x float>, <4 x float>* %89, align 4, !alias.scope !16, !noalias !13
  %91 = fadd <4 x float> %87, %83
  %92 = fadd <4 x float> %90, %84
  %93 = bitcast float* %85 to <4 x float>*
  store <4 x float> %91, <4 x float>* %93, align 4, !alias.scope !16, !noalias !13
  %94 = bitcast float* %88 to <4 x float>*
  store <4 x float> %92, <4 x float>* %94, align 4, !alias.scope !16, !noalias !13
  %95 = or i64 %74, 8
  %96 = add i64 %95, %39
  %97 = getelementptr inbounds float, float* %0, i64 %96
  %98 = bitcast float* %97 to <4 x float>*
  %99 = load <4 x float>, <4 x float>* %98, align 4, !alias.scope !13
  %100 = getelementptr inbounds float, float* %97, i64 4
  %101 = bitcast float* %100 to <4 x float>*
  %102 = load <4 x float>, <4 x float>* %101, align 4, !alias.scope !13
  %103 = fmul <4 x float> %99, %63
  %104 = fmul <4 x float> %102, %65
  %105 = getelementptr inbounds float, float* %3, i64 %96
  %106 = bitcast float* %105 to <4 x float>*
  %107 = load <4 x float>, <4 x float>* %106, align 4, !alias.scope !16, !noalias !13
  %108 = getelementptr inbounds float, float* %105, i64 4
  %109 = bitcast float* %108 to <4 x float>*
  %110 = load <4 x float>, <4 x float>* %109, align 4, !alias.scope !16, !noalias !13
  %111 = fadd <4 x float> %107, %103
  %112 = fadd <4 x float> %110, %104
  %113 = bitcast float* %105 to <4 x float>*
  store <4 x float> %111, <4 x float>* %113, align 4, !alias.scope !16, !noalias !13
  %114 = bitcast float* %108 to <4 x float>*
  store <4 x float> %112, <4 x float>* %114, align 4, !alias.scope !16, !noalias !13
  %115 = add i64 %74, 16
  %116 = add i64 %75, -2
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %73, !llvm.loop !18

118:                                              ; preds = %73, %59
  %119 = phi i64 [ 0, %59 ], [ %115, %73 ]
  %120 = icmp eq i64 %69, 0
  br i1 %120, label %141, label %121

121:                                              ; preds = %118
  %122 = add i64 %119, %39
  %123 = getelementptr inbounds float, float* %0, i64 %122
  %124 = bitcast float* %123 to <4 x float>*
  %125 = load <4 x float>, <4 x float>* %124, align 4, !alias.scope !13
  %126 = getelementptr inbounds float, float* %123, i64 4
  %127 = bitcast float* %126 to <4 x float>*
  %128 = load <4 x float>, <4 x float>* %127, align 4, !alias.scope !13
  %129 = fmul <4 x float> %125, %63
  %130 = fmul <4 x float> %128, %65
  %131 = getelementptr inbounds float, float* %3, i64 %122
  %132 = bitcast float* %131 to <4 x float>*
  %133 = load <4 x float>, <4 x float>* %132, align 4, !alias.scope !16, !noalias !13
  %134 = getelementptr inbounds float, float* %131, i64 4
  %135 = bitcast float* %134 to <4 x float>*
  %136 = load <4 x float>, <4 x float>* %135, align 4, !alias.scope !16, !noalias !13
  %137 = fadd <4 x float> %133, %129
  %138 = fadd <4 x float> %136, %130
  %139 = bitcast float* %131 to <4 x float>*
  store <4 x float> %137, <4 x float>* %139, align 4, !alias.scope !16, !noalias !13
  %140 = bitcast float* %134 to <4 x float>*
  store <4 x float> %138, <4 x float>* %140, align 4, !alias.scope !16, !noalias !13
  br label %141

141:                                              ; preds = %118, %121
  %142 = icmp eq i64 %44, %60
  br i1 %142, label %184, label %46

143:                                              ; preds = %143, %17
  %144 = phi i64 [ 0, %17 ], [ %181, %143 ]
  %145 = phi i64 [ %18, %17 ], [ %182, %143 ]
  %146 = getelementptr inbounds float, float* %3, i64 %144
  %147 = bitcast float* %146 to <4 x float>*
  %148 = load <4 x float>, <4 x float>* %147, align 16
  %149 = getelementptr inbounds float, float* %0, i64 %144
  %150 = bitcast float* %149 to <4 x float>*
  %151 = load <4 x float>, <4 x float>* %150, align 16
  %152 = fmul <4 x float> %8, %151
  %153 = fadd <4 x float> %148, %152
  store <4 x float> %153, <4 x float>* %147, align 16
  %154 = or i64 %144, 4
  %155 = getelementptr inbounds float, float* %3, i64 %154
  %156 = bitcast float* %155 to <4 x float>*
  %157 = load <4 x float>, <4 x float>* %156, align 16
  %158 = getelementptr inbounds float, float* %0, i64 %154
  %159 = bitcast float* %158 to <4 x float>*
  %160 = load <4 x float>, <4 x float>* %159, align 16
  %161 = fmul <4 x float> %8, %160
  %162 = fadd <4 x float> %157, %161
  store <4 x float> %162, <4 x float>* %156, align 16
  %163 = or i64 %144, 8
  %164 = getelementptr inbounds float, float* %3, i64 %163
  %165 = bitcast float* %164 to <4 x float>*
  %166 = load <4 x float>, <4 x float>* %165, align 16
  %167 = getelementptr inbounds float, float* %0, i64 %163
  %168 = bitcast float* %167 to <4 x float>*
  %169 = load <4 x float>, <4 x float>* %168, align 16
  %170 = fmul <4 x float> %8, %169
  %171 = fadd <4 x float> %166, %170
  store <4 x float> %171, <4 x float>* %165, align 16
  %172 = or i64 %144, 12
  %173 = getelementptr inbounds float, float* %3, i64 %172
  %174 = bitcast float* %173 to <4 x float>*
  %175 = load <4 x float>, <4 x float>* %174, align 16
  %176 = getelementptr inbounds float, float* %0, i64 %172
  %177 = bitcast float* %176 to <4 x float>*
  %178 = load <4 x float>, <4 x float>* %177, align 16
  %179 = fmul <4 x float> %8, %178
  %180 = fadd <4 x float> %175, %179
  store <4 x float> %180, <4 x float>* %174, align 16
  %181 = add nuw nsw i64 %144, 16
  %182 = add i64 %145, -4
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %19, label %143

184:                                              ; preds = %185, %141, %36
  ret void

185:                                              ; preds = %46, %185
  %186 = phi i64 [ %193, %185 ], [ %47, %46 ]
  %187 = getelementptr inbounds float, float* %0, i64 %186
  %188 = load float, float* %187, align 4
  %189 = fmul float %188, %1
  %190 = getelementptr inbounds float, float* %3, i64 %186
  %191 = load float, float* %190, align 4
  %192 = fadd float %191, %189
  store float %192, float* %190, align 4
  %193 = add nsw i64 %186, 1
  %194 = icmp slt i64 %193, %40
  br i1 %194, label %185, label %184, !llvm.loop !19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media11vector_math6FMAC_CEPKffiPf(float* nocapture readonly, float, i32, float* nocapture) local_unnamed_addr #1 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %112

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = icmp ult i32 %2, 8
  br i1 %8, label %9, label %26

9:                                                ; preds = %110, %26, %6
  %10 = phi i64 [ 0, %26 ], [ 0, %6 ], [ %33, %110 ]
  %11 = xor i64 %10, -1
  %12 = and i64 %7, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %22, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds float, float* %0, i64 %10
  %16 = load float, float* %15, align 4
  %17 = fmul float %16, %1
  %18 = getelementptr inbounds float, float* %3, i64 %10
  %19 = load float, float* %18, align 4
  %20 = fadd float %19, %17
  store float %20, float* %18, align 4
  %21 = or i64 %10, 1
  br label %22

22:                                               ; preds = %9, %14
  %23 = phi i64 [ %10, %9 ], [ %21, %14 ]
  %24 = sub nsw i64 0, %7
  %25 = icmp eq i64 %11, %24
  br i1 %25, label %112, label %113

26:                                               ; preds = %6
  %27 = getelementptr float, float* %3, i64 %7
  %28 = getelementptr float, float* %0, i64 %7
  %29 = icmp ugt float* %28, %3
  %30 = icmp ugt float* %27, %0
  %31 = and i1 %29, %30
  br i1 %31, label %9, label %32

32:                                               ; preds = %26
  %33 = and i64 %7, 4294967288
  %34 = insertelement <4 x float> undef, float %1, i32 0
  %35 = shufflevector <4 x float> %34, <4 x float> undef, <4 x i32> zeroinitializer
  %36 = insertelement <4 x float> undef, float %1, i32 0
  %37 = shufflevector <4 x float> %36, <4 x float> undef, <4 x i32> zeroinitializer
  %38 = add nsw i64 %33, -8
  %39 = lshr exact i64 %38, 3
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 1
  %42 = icmp eq i64 %38, 0
  br i1 %42, label %88, label %43

43:                                               ; preds = %32
  %44 = sub nuw nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %85, %45 ]
  %47 = phi i64 [ %44, %43 ], [ %86, %45 ]
  %48 = getelementptr inbounds float, float* %0, i64 %46
  %49 = bitcast float* %48 to <4 x float>*
  %50 = load <4 x float>, <4 x float>* %49, align 4, !alias.scope !20
  %51 = getelementptr inbounds float, float* %48, i64 4
  %52 = bitcast float* %51 to <4 x float>*
  %53 = load <4 x float>, <4 x float>* %52, align 4, !alias.scope !20
  %54 = fmul <4 x float> %50, %35
  %55 = fmul <4 x float> %53, %37
  %56 = getelementptr inbounds float, float* %3, i64 %46
  %57 = bitcast float* %56 to <4 x float>*
  %58 = load <4 x float>, <4 x float>* %57, align 4, !alias.scope !23, !noalias !20
  %59 = getelementptr inbounds float, float* %56, i64 4
  %60 = bitcast float* %59 to <4 x float>*
  %61 = load <4 x float>, <4 x float>* %60, align 4, !alias.scope !23, !noalias !20
  %62 = fadd <4 x float> %58, %54
  %63 = fadd <4 x float> %61, %55
  %64 = bitcast float* %56 to <4 x float>*
  store <4 x float> %62, <4 x float>* %64, align 4, !alias.scope !23, !noalias !20
  %65 = bitcast float* %59 to <4 x float>*
  store <4 x float> %63, <4 x float>* %65, align 4, !alias.scope !23, !noalias !20
  %66 = or i64 %46, 8
  %67 = getelementptr inbounds float, float* %0, i64 %66
  %68 = bitcast float* %67 to <4 x float>*
  %69 = load <4 x float>, <4 x float>* %68, align 4, !alias.scope !20
  %70 = getelementptr inbounds float, float* %67, i64 4
  %71 = bitcast float* %70 to <4 x float>*
  %72 = load <4 x float>, <4 x float>* %71, align 4, !alias.scope !20
  %73 = fmul <4 x float> %69, %35
  %74 = fmul <4 x float> %72, %37
  %75 = getelementptr inbounds float, float* %3, i64 %66
  %76 = bitcast float* %75 to <4 x float>*
  %77 = load <4 x float>, <4 x float>* %76, align 4, !alias.scope !23, !noalias !20
  %78 = getelementptr inbounds float, float* %75, i64 4
  %79 = bitcast float* %78 to <4 x float>*
  %80 = load <4 x float>, <4 x float>* %79, align 4, !alias.scope !23, !noalias !20
  %81 = fadd <4 x float> %77, %73
  %82 = fadd <4 x float> %80, %74
  %83 = bitcast float* %75 to <4 x float>*
  store <4 x float> %81, <4 x float>* %83, align 4, !alias.scope !23, !noalias !20
  %84 = bitcast float* %78 to <4 x float>*
  store <4 x float> %82, <4 x float>* %84, align 4, !alias.scope !23, !noalias !20
  %85 = add i64 %46, 16
  %86 = add i64 %47, -2
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %45, !llvm.loop !25

88:                                               ; preds = %45, %32
  %89 = phi i64 [ 0, %32 ], [ %85, %45 ]
  %90 = icmp eq i64 %41, 0
  br i1 %90, label %110, label %91

91:                                               ; preds = %88
  %92 = getelementptr inbounds float, float* %0, i64 %89
  %93 = bitcast float* %92 to <4 x float>*
  %94 = load <4 x float>, <4 x float>* %93, align 4, !alias.scope !20
  %95 = getelementptr inbounds float, float* %92, i64 4
  %96 = bitcast float* %95 to <4 x float>*
  %97 = load <4 x float>, <4 x float>* %96, align 4, !alias.scope !20
  %98 = fmul <4 x float> %94, %35
  %99 = fmul <4 x float> %97, %37
  %100 = getelementptr inbounds float, float* %3, i64 %89
  %101 = bitcast float* %100 to <4 x float>*
  %102 = load <4 x float>, <4 x float>* %101, align 4, !alias.scope !23, !noalias !20
  %103 = getelementptr inbounds float, float* %100, i64 4
  %104 = bitcast float* %103 to <4 x float>*
  %105 = load <4 x float>, <4 x float>* %104, align 4, !alias.scope !23, !noalias !20
  %106 = fadd <4 x float> %102, %98
  %107 = fadd <4 x float> %105, %99
  %108 = bitcast float* %100 to <4 x float>*
  store <4 x float> %106, <4 x float>* %108, align 4, !alias.scope !23, !noalias !20
  %109 = bitcast float* %103 to <4 x float>*
  store <4 x float> %107, <4 x float>* %109, align 4, !alias.scope !23, !noalias !20
  br label %110

110:                                              ; preds = %88, %91
  %111 = icmp eq i64 %33, %7
  br i1 %111, label %112, label %9

112:                                              ; preds = %22, %113, %110, %4
  ret void

113:                                              ; preds = %22, %113
  %114 = phi i64 [ %128, %113 ], [ %23, %22 ]
  %115 = getelementptr inbounds float, float* %0, i64 %114
  %116 = load float, float* %115, align 4
  %117 = fmul float %116, %1
  %118 = getelementptr inbounds float, float* %3, i64 %114
  %119 = load float, float* %118, align 4
  %120 = fadd float %119, %117
  store float %120, float* %118, align 4
  %121 = add nuw nsw i64 %114, 1
  %122 = getelementptr inbounds float, float* %0, i64 %121
  %123 = load float, float* %122, align 4
  %124 = fmul float %123, %1
  %125 = getelementptr inbounds float, float* %3, i64 %121
  %126 = load float, float* %125, align 4
  %127 = fadd float %126, %124
  store float %127, float* %125, align 4
  %128 = add nuw nsw i64 %114, 2
  %129 = icmp eq i64 %128, %7
  br i1 %129, label %112, label %113, !llvm.loop !26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media11vector_math4FMULEPKffiPf(float* nocapture readonly, float, i32, float* nocapture) local_unnamed_addr #0 {
  %5 = srem i32 %2, 4
  %6 = sub i32 %2, %5
  %7 = insertelement <4 x float> undef, float %1, i32 0
  %8 = shufflevector <4 x float> %7, <4 x float> undef, <4 x i32> zeroinitializer
  %9 = icmp sgt i32 %6, 0
  br i1 %9, label %10, label %34

10:                                               ; preds = %4
  %11 = sext i32 %6 to i64
  %12 = add nsw i64 %11, -1
  %13 = lshr i64 %12, 2
  %14 = add nuw nsw i64 %13, 1
  %15 = and i64 %14, 3
  %16 = icmp ult i64 %12, 12
  br i1 %16, label %19, label %17

17:                                               ; preds = %10
  %18 = sub nsw i64 %14, %15
  br label %123

19:                                               ; preds = %123, %10
  %20 = phi i64 [ 0, %10 ], [ %153, %123 ]
  %21 = icmp eq i64 %15, 0
  br i1 %21, label %34, label %22

22:                                               ; preds = %19, %22
  %23 = phi i64 [ %31, %22 ], [ %20, %19 ]
  %24 = phi i64 [ %32, %22 ], [ %15, %19 ]
  %25 = getelementptr inbounds float, float* %3, i64 %23
  %26 = getelementptr inbounds float, float* %0, i64 %23
  %27 = bitcast float* %26 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 16
  %29 = fmul <4 x float> %8, %28
  %30 = bitcast float* %25 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 16
  %31 = add nuw nsw i64 %23, 4
  %32 = add i64 %24, -1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %22, !llvm.loop !27

34:                                               ; preds = %19, %22, %4
  %35 = icmp sgt i32 %5, 0
  br i1 %35, label %36, label %164

36:                                               ; preds = %34
  %37 = sext i32 %6 to i64
  %38 = sext i32 %2 to i64
  %39 = add nsw i64 %37, 1
  %40 = icmp sgt i64 %39, %38
  %41 = select i1 %40, i64 %39, i64 %38
  %42 = sub nsw i64 %41, %37
  %43 = icmp ult i64 %42, 8
  br i1 %43, label %44, label %46

44:                                               ; preds = %121, %46, %36
  %45 = phi i64 [ %37, %46 ], [ %37, %36 ], [ %59, %121 ]
  br label %156

46:                                               ; preds = %36
  %47 = getelementptr float, float* %3, i64 %37
  %48 = add nsw i64 %37, 1
  %49 = icmp sgt i64 %48, %38
  %50 = select i1 %49, i64 %48, i64 %38
  %51 = getelementptr float, float* %3, i64 %50
  %52 = getelementptr float, float* %0, i64 %37
  %53 = getelementptr float, float* %0, i64 %50
  %54 = icmp ult float* %47, %53
  %55 = icmp ult float* %52, %51
  %56 = and i1 %54, %55
  br i1 %56, label %44, label %57

57:                                               ; preds = %46
  %58 = and i64 %42, -8
  %59 = add nsw i64 %58, %37
  %60 = insertelement <4 x float> undef, float %1, i32 0
  %61 = shufflevector <4 x float> %60, <4 x float> undef, <4 x i32> zeroinitializer
  %62 = insertelement <4 x float> undef, float %1, i32 0
  %63 = shufflevector <4 x float> %62, <4 x float> undef, <4 x i32> zeroinitializer
  %64 = add nsw i64 %58, -8
  %65 = lshr exact i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 1
  %68 = icmp eq i64 %64, 0
  br i1 %68, label %104, label %69

69:                                               ; preds = %57
  %70 = sub nuw nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %101, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %102, %71 ]
  %74 = add i64 %72, %37
  %75 = getelementptr inbounds float, float* %0, i64 %74
  %76 = bitcast float* %75 to <4 x float>*
  %77 = load <4 x float>, <4 x float>* %76, align 4, !alias.scope !28
  %78 = getelementptr inbounds float, float* %75, i64 4
  %79 = bitcast float* %78 to <4 x float>*
  %80 = load <4 x float>, <4 x float>* %79, align 4, !alias.scope !28
  %81 = fmul <4 x float> %77, %61
  %82 = fmul <4 x float> %80, %63
  %83 = getelementptr inbounds float, float* %3, i64 %74
  %84 = bitcast float* %83 to <4 x float>*
  store <4 x float> %81, <4 x float>* %84, align 4, !alias.scope !31, !noalias !28
  %85 = getelementptr inbounds float, float* %83, i64 4
  %86 = bitcast float* %85 to <4 x float>*
  store <4 x float> %82, <4 x float>* %86, align 4, !alias.scope !31, !noalias !28
  %87 = or i64 %72, 8
  %88 = add i64 %87, %37
  %89 = getelementptr inbounds float, float* %0, i64 %88
  %90 = bitcast float* %89 to <4 x float>*
  %91 = load <4 x float>, <4 x float>* %90, align 4, !alias.scope !28
  %92 = getelementptr inbounds float, float* %89, i64 4
  %93 = bitcast float* %92 to <4 x float>*
  %94 = load <4 x float>, <4 x float>* %93, align 4, !alias.scope !28
  %95 = fmul <4 x float> %91, %61
  %96 = fmul <4 x float> %94, %63
  %97 = getelementptr inbounds float, float* %3, i64 %88
  %98 = bitcast float* %97 to <4 x float>*
  store <4 x float> %95, <4 x float>* %98, align 4, !alias.scope !31, !noalias !28
  %99 = getelementptr inbounds float, float* %97, i64 4
  %100 = bitcast float* %99 to <4 x float>*
  store <4 x float> %96, <4 x float>* %100, align 4, !alias.scope !31, !noalias !28
  %101 = add i64 %72, 16
  %102 = add i64 %73, -2
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %71, !llvm.loop !33

104:                                              ; preds = %71, %57
  %105 = phi i64 [ 0, %57 ], [ %101, %71 ]
  %106 = icmp eq i64 %67, 0
  br i1 %106, label %121, label %107

107:                                              ; preds = %104
  %108 = add i64 %105, %37
  %109 = getelementptr inbounds float, float* %0, i64 %108
  %110 = bitcast float* %109 to <4 x float>*
  %111 = load <4 x float>, <4 x float>* %110, align 4, !alias.scope !28
  %112 = getelementptr inbounds float, float* %109, i64 4
  %113 = bitcast float* %112 to <4 x float>*
  %114 = load <4 x float>, <4 x float>* %113, align 4, !alias.scope !28
  %115 = fmul <4 x float> %111, %61
  %116 = fmul <4 x float> %114, %63
  %117 = getelementptr inbounds float, float* %3, i64 %108
  %118 = bitcast float* %117 to <4 x float>*
  store <4 x float> %115, <4 x float>* %118, align 4, !alias.scope !31, !noalias !28
  %119 = getelementptr inbounds float, float* %117, i64 4
  %120 = bitcast float* %119 to <4 x float>*
  store <4 x float> %116, <4 x float>* %120, align 4, !alias.scope !31, !noalias !28
  br label %121

121:                                              ; preds = %104, %107
  %122 = icmp eq i64 %42, %58
  br i1 %122, label %164, label %44

123:                                              ; preds = %123, %17
  %124 = phi i64 [ 0, %17 ], [ %153, %123 ]
  %125 = phi i64 [ %18, %17 ], [ %154, %123 ]
  %126 = getelementptr inbounds float, float* %3, i64 %124
  %127 = getelementptr inbounds float, float* %0, i64 %124
  %128 = bitcast float* %127 to <4 x float>*
  %129 = load <4 x float>, <4 x float>* %128, align 16
  %130 = fmul <4 x float> %8, %129
  %131 = bitcast float* %126 to <4 x float>*
  store <4 x float> %130, <4 x float>* %131, align 16
  %132 = or i64 %124, 4
  %133 = getelementptr inbounds float, float* %3, i64 %132
  %134 = getelementptr inbounds float, float* %0, i64 %132
  %135 = bitcast float* %134 to <4 x float>*
  %136 = load <4 x float>, <4 x float>* %135, align 16
  %137 = fmul <4 x float> %8, %136
  %138 = bitcast float* %133 to <4 x float>*
  store <4 x float> %137, <4 x float>* %138, align 16
  %139 = or i64 %124, 8
  %140 = getelementptr inbounds float, float* %3, i64 %139
  %141 = getelementptr inbounds float, float* %0, i64 %139
  %142 = bitcast float* %141 to <4 x float>*
  %143 = load <4 x float>, <4 x float>* %142, align 16
  %144 = fmul <4 x float> %8, %143
  %145 = bitcast float* %140 to <4 x float>*
  store <4 x float> %144, <4 x float>* %145, align 16
  %146 = or i64 %124, 12
  %147 = getelementptr inbounds float, float* %3, i64 %146
  %148 = getelementptr inbounds float, float* %0, i64 %146
  %149 = bitcast float* %148 to <4 x float>*
  %150 = load <4 x float>, <4 x float>* %149, align 16
  %151 = fmul <4 x float> %8, %150
  %152 = bitcast float* %147 to <4 x float>*
  store <4 x float> %151, <4 x float>* %152, align 16
  %153 = add nuw nsw i64 %124, 16
  %154 = add i64 %125, -4
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %19, label %123

156:                                              ; preds = %44, %156
  %157 = phi i64 [ %162, %156 ], [ %45, %44 ]
  %158 = getelementptr inbounds float, float* %0, i64 %157
  %159 = load float, float* %158, align 4
  %160 = fmul float %159, %1
  %161 = getelementptr inbounds float, float* %3, i64 %157
  store float %160, float* %161, align 4
  %162 = add nsw i64 %157, 1
  %163 = icmp slt i64 %162, %38
  br i1 %163, label %156, label %164, !llvm.loop !34

164:                                              ; preds = %156, %121, %34
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media11vector_math8FMUL_SSEEPKffiPf(float* nocapture readonly, float, i32, float* nocapture) local_unnamed_addr #0 {
  %5 = srem i32 %2, 4
  %6 = sub i32 %2, %5
  %7 = insertelement <4 x float> undef, float %1, i32 0
  %8 = shufflevector <4 x float> %7, <4 x float> undef, <4 x i32> zeroinitializer
  %9 = icmp sgt i32 %6, 0
  br i1 %9, label %10, label %34

10:                                               ; preds = %4
  %11 = sext i32 %6 to i64
  %12 = add nsw i64 %11, -1
  %13 = lshr i64 %12, 2
  %14 = add nuw nsw i64 %13, 1
  %15 = and i64 %14, 3
  %16 = icmp ult i64 %12, 12
  br i1 %16, label %19, label %17

17:                                               ; preds = %10
  %18 = sub nsw i64 %14, %15
  br label %123

19:                                               ; preds = %123, %10
  %20 = phi i64 [ 0, %10 ], [ %153, %123 ]
  %21 = icmp eq i64 %15, 0
  br i1 %21, label %34, label %22

22:                                               ; preds = %19, %22
  %23 = phi i64 [ %31, %22 ], [ %20, %19 ]
  %24 = phi i64 [ %32, %22 ], [ %15, %19 ]
  %25 = getelementptr inbounds float, float* %3, i64 %23
  %26 = getelementptr inbounds float, float* %0, i64 %23
  %27 = bitcast float* %26 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 16
  %29 = fmul <4 x float> %8, %28
  %30 = bitcast float* %25 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 16
  %31 = add nuw nsw i64 %23, 4
  %32 = add i64 %24, -1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %22, !llvm.loop !35

34:                                               ; preds = %19, %22, %4
  %35 = icmp sgt i32 %5, 0
  br i1 %35, label %36, label %156

36:                                               ; preds = %34
  %37 = sext i32 %6 to i64
  %38 = sext i32 %2 to i64
  %39 = add nsw i64 %37, 1
  %40 = icmp sgt i64 %39, %38
  %41 = select i1 %40, i64 %39, i64 %38
  %42 = sub nsw i64 %41, %37
  %43 = icmp ult i64 %42, 8
  br i1 %43, label %44, label %46

44:                                               ; preds = %121, %46, %36
  %45 = phi i64 [ %37, %46 ], [ %37, %36 ], [ %59, %121 ]
  br label %157

46:                                               ; preds = %36
  %47 = getelementptr float, float* %3, i64 %37
  %48 = add nsw i64 %37, 1
  %49 = icmp sgt i64 %48, %38
  %50 = select i1 %49, i64 %48, i64 %38
  %51 = getelementptr float, float* %3, i64 %50
  %52 = getelementptr float, float* %0, i64 %37
  %53 = getelementptr float, float* %0, i64 %50
  %54 = icmp ult float* %47, %53
  %55 = icmp ult float* %52, %51
  %56 = and i1 %54, %55
  br i1 %56, label %44, label %57

57:                                               ; preds = %46
  %58 = and i64 %42, -8
  %59 = add nsw i64 %58, %37
  %60 = insertelement <4 x float> undef, float %1, i32 0
  %61 = shufflevector <4 x float> %60, <4 x float> undef, <4 x i32> zeroinitializer
  %62 = insertelement <4 x float> undef, float %1, i32 0
  %63 = shufflevector <4 x float> %62, <4 x float> undef, <4 x i32> zeroinitializer
  %64 = add nsw i64 %58, -8
  %65 = lshr exact i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 1
  %68 = icmp eq i64 %64, 0
  br i1 %68, label %104, label %69

69:                                               ; preds = %57
  %70 = sub nuw nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %101, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %102, %71 ]
  %74 = add i64 %72, %37
  %75 = getelementptr inbounds float, float* %0, i64 %74
  %76 = bitcast float* %75 to <4 x float>*
  %77 = load <4 x float>, <4 x float>* %76, align 4, !alias.scope !36
  %78 = getelementptr inbounds float, float* %75, i64 4
  %79 = bitcast float* %78 to <4 x float>*
  %80 = load <4 x float>, <4 x float>* %79, align 4, !alias.scope !36
  %81 = fmul <4 x float> %77, %61
  %82 = fmul <4 x float> %80, %63
  %83 = getelementptr inbounds float, float* %3, i64 %74
  %84 = bitcast float* %83 to <4 x float>*
  store <4 x float> %81, <4 x float>* %84, align 4, !alias.scope !39, !noalias !36
  %85 = getelementptr inbounds float, float* %83, i64 4
  %86 = bitcast float* %85 to <4 x float>*
  store <4 x float> %82, <4 x float>* %86, align 4, !alias.scope !39, !noalias !36
  %87 = or i64 %72, 8
  %88 = add i64 %87, %37
  %89 = getelementptr inbounds float, float* %0, i64 %88
  %90 = bitcast float* %89 to <4 x float>*
  %91 = load <4 x float>, <4 x float>* %90, align 4, !alias.scope !36
  %92 = getelementptr inbounds float, float* %89, i64 4
  %93 = bitcast float* %92 to <4 x float>*
  %94 = load <4 x float>, <4 x float>* %93, align 4, !alias.scope !36
  %95 = fmul <4 x float> %91, %61
  %96 = fmul <4 x float> %94, %63
  %97 = getelementptr inbounds float, float* %3, i64 %88
  %98 = bitcast float* %97 to <4 x float>*
  store <4 x float> %95, <4 x float>* %98, align 4, !alias.scope !39, !noalias !36
  %99 = getelementptr inbounds float, float* %97, i64 4
  %100 = bitcast float* %99 to <4 x float>*
  store <4 x float> %96, <4 x float>* %100, align 4, !alias.scope !39, !noalias !36
  %101 = add i64 %72, 16
  %102 = add i64 %73, -2
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %71, !llvm.loop !41

104:                                              ; preds = %71, %57
  %105 = phi i64 [ 0, %57 ], [ %101, %71 ]
  %106 = icmp eq i64 %67, 0
  br i1 %106, label %121, label %107

107:                                              ; preds = %104
  %108 = add i64 %105, %37
  %109 = getelementptr inbounds float, float* %0, i64 %108
  %110 = bitcast float* %109 to <4 x float>*
  %111 = load <4 x float>, <4 x float>* %110, align 4, !alias.scope !36
  %112 = getelementptr inbounds float, float* %109, i64 4
  %113 = bitcast float* %112 to <4 x float>*
  %114 = load <4 x float>, <4 x float>* %113, align 4, !alias.scope !36
  %115 = fmul <4 x float> %111, %61
  %116 = fmul <4 x float> %114, %63
  %117 = getelementptr inbounds float, float* %3, i64 %108
  %118 = bitcast float* %117 to <4 x float>*
  store <4 x float> %115, <4 x float>* %118, align 4, !alias.scope !39, !noalias !36
  %119 = getelementptr inbounds float, float* %117, i64 4
  %120 = bitcast float* %119 to <4 x float>*
  store <4 x float> %116, <4 x float>* %120, align 4, !alias.scope !39, !noalias !36
  br label %121

121:                                              ; preds = %104, %107
  %122 = icmp eq i64 %42, %58
  br i1 %122, label %156, label %44

123:                                              ; preds = %123, %17
  %124 = phi i64 [ 0, %17 ], [ %153, %123 ]
  %125 = phi i64 [ %18, %17 ], [ %154, %123 ]
  %126 = getelementptr inbounds float, float* %3, i64 %124
  %127 = getelementptr inbounds float, float* %0, i64 %124
  %128 = bitcast float* %127 to <4 x float>*
  %129 = load <4 x float>, <4 x float>* %128, align 16
  %130 = fmul <4 x float> %8, %129
  %131 = bitcast float* %126 to <4 x float>*
  store <4 x float> %130, <4 x float>* %131, align 16
  %132 = or i64 %124, 4
  %133 = getelementptr inbounds float, float* %3, i64 %132
  %134 = getelementptr inbounds float, float* %0, i64 %132
  %135 = bitcast float* %134 to <4 x float>*
  %136 = load <4 x float>, <4 x float>* %135, align 16
  %137 = fmul <4 x float> %8, %136
  %138 = bitcast float* %133 to <4 x float>*
  store <4 x float> %137, <4 x float>* %138, align 16
  %139 = or i64 %124, 8
  %140 = getelementptr inbounds float, float* %3, i64 %139
  %141 = getelementptr inbounds float, float* %0, i64 %139
  %142 = bitcast float* %141 to <4 x float>*
  %143 = load <4 x float>, <4 x float>* %142, align 16
  %144 = fmul <4 x float> %8, %143
  %145 = bitcast float* %140 to <4 x float>*
  store <4 x float> %144, <4 x float>* %145, align 16
  %146 = or i64 %124, 12
  %147 = getelementptr inbounds float, float* %3, i64 %146
  %148 = getelementptr inbounds float, float* %0, i64 %146
  %149 = bitcast float* %148 to <4 x float>*
  %150 = load <4 x float>, <4 x float>* %149, align 16
  %151 = fmul <4 x float> %8, %150
  %152 = bitcast float* %147 to <4 x float>*
  store <4 x float> %151, <4 x float>* %152, align 16
  %153 = add nuw nsw i64 %124, 16
  %154 = add i64 %125, -4
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %19, label %123

156:                                              ; preds = %157, %121, %34
  ret void

157:                                              ; preds = %44, %157
  %158 = phi i64 [ %163, %157 ], [ %45, %44 ]
  %159 = getelementptr inbounds float, float* %0, i64 %158
  %160 = load float, float* %159, align 4
  %161 = fmul float %160, %1
  %162 = getelementptr inbounds float, float* %3, i64 %158
  store float %161, float* %162, align 4
  %163 = add nsw i64 %158, 1
  %164 = icmp slt i64 %163, %38
  br i1 %164, label %157, label %156, !llvm.loop !42
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media11vector_math6FMUL_CEPKffiPf(float* nocapture readonly, float, i32, float* nocapture) local_unnamed_addr #1 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %96

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = icmp ult i32 %2, 8
  br i1 %8, label %9, label %28

9:                                                ; preds = %94, %28, %6
  %10 = phi i64 [ 0, %28 ], [ 0, %6 ], [ %35, %94 ]
  %11 = xor i64 %10, -1
  %12 = add nsw i64 %11, %7
  %13 = and i64 %7, 3
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %25, label %15

15:                                               ; preds = %9, %15
  %16 = phi i64 [ %22, %15 ], [ %10, %9 ]
  %17 = phi i64 [ %23, %15 ], [ %13, %9 ]
  %18 = getelementptr inbounds float, float* %0, i64 %16
  %19 = load float, float* %18, align 4
  %20 = fmul float %19, %1
  %21 = getelementptr inbounds float, float* %3, i64 %16
  store float %20, float* %21, align 4
  %22 = add nuw nsw i64 %16, 1
  %23 = add i64 %17, -1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %15, !llvm.loop !43

25:                                               ; preds = %15, %9
  %26 = phi i64 [ %10, %9 ], [ %22, %15 ]
  %27 = icmp ult i64 %12, 3
  br i1 %27, label %96, label %97

28:                                               ; preds = %6
  %29 = getelementptr float, float* %3, i64 %7
  %30 = getelementptr float, float* %0, i64 %7
  %31 = icmp ugt float* %30, %3
  %32 = icmp ugt float* %29, %0
  %33 = and i1 %31, %32
  br i1 %33, label %9, label %34

34:                                               ; preds = %28
  %35 = and i64 %7, 4294967288
  %36 = insertelement <4 x float> undef, float %1, i32 0
  %37 = shufflevector <4 x float> %36, <4 x float> undef, <4 x i32> zeroinitializer
  %38 = insertelement <4 x float> undef, float %1, i32 0
  %39 = shufflevector <4 x float> %38, <4 x float> undef, <4 x i32> zeroinitializer
  %40 = add nsw i64 %35, -8
  %41 = lshr exact i64 %40, 3
  %42 = add nuw nsw i64 %41, 1
  %43 = and i64 %42, 1
  %44 = icmp eq i64 %40, 0
  br i1 %44, label %78, label %45

45:                                               ; preds = %34
  %46 = sub nuw nsw i64 %42, %43
  br label %47

47:                                               ; preds = %47, %45
  %48 = phi i64 [ 0, %45 ], [ %75, %47 ]
  %49 = phi i64 [ %46, %45 ], [ %76, %47 ]
  %50 = getelementptr inbounds float, float* %0, i64 %48
  %51 = bitcast float* %50 to <4 x float>*
  %52 = load <4 x float>, <4 x float>* %51, align 4, !alias.scope !44
  %53 = getelementptr inbounds float, float* %50, i64 4
  %54 = bitcast float* %53 to <4 x float>*
  %55 = load <4 x float>, <4 x float>* %54, align 4, !alias.scope !44
  %56 = fmul <4 x float> %52, %37
  %57 = fmul <4 x float> %55, %39
  %58 = getelementptr inbounds float, float* %3, i64 %48
  %59 = bitcast float* %58 to <4 x float>*
  store <4 x float> %56, <4 x float>* %59, align 4, !alias.scope !47, !noalias !44
  %60 = getelementptr inbounds float, float* %58, i64 4
  %61 = bitcast float* %60 to <4 x float>*
  store <4 x float> %57, <4 x float>* %61, align 4, !alias.scope !47, !noalias !44
  %62 = or i64 %48, 8
  %63 = getelementptr inbounds float, float* %0, i64 %62
  %64 = bitcast float* %63 to <4 x float>*
  %65 = load <4 x float>, <4 x float>* %64, align 4, !alias.scope !44
  %66 = getelementptr inbounds float, float* %63, i64 4
  %67 = bitcast float* %66 to <4 x float>*
  %68 = load <4 x float>, <4 x float>* %67, align 4, !alias.scope !44
  %69 = fmul <4 x float> %65, %37
  %70 = fmul <4 x float> %68, %39
  %71 = getelementptr inbounds float, float* %3, i64 %62
  %72 = bitcast float* %71 to <4 x float>*
  store <4 x float> %69, <4 x float>* %72, align 4, !alias.scope !47, !noalias !44
  %73 = getelementptr inbounds float, float* %71, i64 4
  %74 = bitcast float* %73 to <4 x float>*
  store <4 x float> %70, <4 x float>* %74, align 4, !alias.scope !47, !noalias !44
  %75 = add i64 %48, 16
  %76 = add i64 %49, -2
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %47, !llvm.loop !49

78:                                               ; preds = %47, %34
  %79 = phi i64 [ 0, %34 ], [ %75, %47 ]
  %80 = icmp eq i64 %43, 0
  br i1 %80, label %94, label %81

81:                                               ; preds = %78
  %82 = getelementptr inbounds float, float* %0, i64 %79
  %83 = bitcast float* %82 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 4, !alias.scope !44
  %85 = getelementptr inbounds float, float* %82, i64 4
  %86 = bitcast float* %85 to <4 x float>*
  %87 = load <4 x float>, <4 x float>* %86, align 4, !alias.scope !44
  %88 = fmul <4 x float> %84, %37
  %89 = fmul <4 x float> %87, %39
  %90 = getelementptr inbounds float, float* %3, i64 %79
  %91 = bitcast float* %90 to <4 x float>*
  store <4 x float> %88, <4 x float>* %91, align 4, !alias.scope !47, !noalias !44
  %92 = getelementptr inbounds float, float* %90, i64 4
  %93 = bitcast float* %92 to <4 x float>*
  store <4 x float> %89, <4 x float>* %93, align 4, !alias.scope !47, !noalias !44
  br label %94

94:                                               ; preds = %78, %81
  %95 = icmp eq i64 %35, %7
  br i1 %95, label %96, label %9

96:                                               ; preds = %25, %97, %94, %4
  ret void

97:                                               ; preds = %25, %97
  %98 = phi i64 [ %118, %97 ], [ %26, %25 ]
  %99 = getelementptr inbounds float, float* %0, i64 %98
  %100 = load float, float* %99, align 4
  %101 = fmul float %100, %1
  %102 = getelementptr inbounds float, float* %3, i64 %98
  store float %101, float* %102, align 4
  %103 = add nuw nsw i64 %98, 1
  %104 = getelementptr inbounds float, float* %0, i64 %103
  %105 = load float, float* %104, align 4
  %106 = fmul float %105, %1
  %107 = getelementptr inbounds float, float* %3, i64 %103
  store float %106, float* %107, align 4
  %108 = add nuw nsw i64 %98, 2
  %109 = getelementptr inbounds float, float* %0, i64 %108
  %110 = load float, float* %109, align 4
  %111 = fmul float %110, %1
  %112 = getelementptr inbounds float, float* %3, i64 %108
  store float %111, float* %112, align 4
  %113 = add nuw nsw i64 %98, 3
  %114 = getelementptr inbounds float, float* %0, i64 %113
  %115 = load float, float* %114, align 4
  %116 = fmul float %115, %1
  %117 = getelementptr inbounds float, float* %3, i64 %113
  store float %116, float* %117, align 4
  %118 = add nuw nsw i64 %98, 4
  %119 = icmp eq i64 %118, %7
  br i1 %119, label %96, label %97, !llvm.loop !50
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden <2 x float> @_ZN5media11vector_math15EWMAAndMaxPowerEfPKfif(float, float* nocapture readonly, i32, float) local_unnamed_addr #3 {
  %5 = alloca <2 x float>, align 8
  %6 = alloca float, align 4
  %7 = bitcast <2 x float>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = srem i32 %2, 4
  %9 = sub nsw i32 %2, %8
  %10 = insertelement <4 x float> undef, float %3, i32 0
  %11 = shufflevector <4 x float> %10, <4 x float> undef, <4 x i32> zeroinitializer
  %12 = fsub float 1.000000e+00, %3
  %13 = insertelement <4 x float> undef, float %12, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = fmul <4 x float> %13, %13
  %16 = fmul <4 x float> %15, %15
  %17 = shufflevector <4 x float> %16, <4 x float> undef, <4 x i32> zeroinitializer
  %18 = insertelement <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float undef>, float %0, i32 3
  %19 = icmp sgt i32 %9, 0
  br i1 %19, label %20, label %41

20:                                               ; preds = %4
  %21 = sext i32 %9 to i64
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i64 [ 0, %20 ], [ %34, %22 ]
  %24 = phi <4 x float> [ %18, %20 ], [ %33, %22 ]
  %25 = phi <4 x float> [ zeroinitializer, %20 ], [ %31, %22 ]
  %26 = fmul <4 x float> %17, %24
  %27 = getelementptr inbounds float, float* %1, i64 %23
  %28 = bitcast float* %27 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 16
  %30 = fmul <4 x float> %29, %29
  %31 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %25, <4 x float> %30) #6
  %32 = fmul <4 x float> %11, %30
  %33 = fadd <4 x float> %26, %32
  %34 = add nuw nsw i64 %23, 4
  %35 = icmp slt i64 %34, %21
  br i1 %35, label %22, label %36

36:                                               ; preds = %22
  %37 = xor i32 %8, -1
  %38 = add i32 %2, 4
  %39 = add i32 %38, %37
  %40 = and i32 %39, -4
  br label %41

41:                                               ; preds = %36, %4
  %42 = phi <4 x float> [ zeroinitializer, %4 ], [ %31, %36 ]
  %43 = phi <4 x float> [ %18, %4 ], [ %33, %36 ]
  %44 = phi i32 [ 0, %4 ], [ %40, %36 ]
  %45 = extractelement <4 x float> %43, i32 3
  %46 = fmul <4 x float> %14, %43
  %47 = extractelement <4 x float> %46, i32 2
  %48 = fadd float %45, %47
  %49 = fmul <4 x float> %14, %46
  %50 = extractelement <4 x float> %49, i32 1
  %51 = fadd float %48, %50
  %52 = extractelement <4 x float> %49, i32 0
  %53 = fmul float %12, %52
  %54 = fadd float %51, %53
  %55 = shufflevector <4 x float> %42, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %56 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %42, <4 x float> %55) #6
  %57 = shufflevector <4 x float> %56, <4 x float> undef, <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>
  %58 = tail call <4 x float> @llvm.x86.sse.max.ss(<4 x float> %56, <4 x float> %57) #6
  %59 = bitcast <4 x float> %58 to <4 x i32>
  %60 = extractelement <4 x i32> %59, i32 0
  %61 = getelementptr inbounds <2 x float>, <2 x float>* %5, i64 0, i64 0
  store float %54, float* %61, align 8
  %62 = getelementptr inbounds <2 x float>, <2 x float>* %5, i64 0, i64 1
  %63 = bitcast float* %62 to i32*
  store i32 %60, i32* %63, align 4
  %64 = icmp slt i32 %44, %2
  br i1 %64, label %65, label %123

65:                                               ; preds = %41
  %66 = zext i32 %44 to i64
  %67 = zext i32 %2 to i64
  %68 = bitcast float* %6 to i8*
  %69 = xor i64 %66, -1
  %70 = and i64 %67, 1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %85, label %72

72:                                               ; preds = %65
  %73 = bitcast i32 %60 to float
  %74 = fmul float %12, %54
  %75 = getelementptr inbounds float, float* %1, i64 %66
  %76 = load float, float* %75, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %68)
  %77 = fmul float %76, %76
  store float %77, float* %6, align 4
  %78 = fmul float %77, %3
  %79 = fadd float %74, %78
  %80 = fcmp ogt float %77, %73
  %81 = select i1 %80, float* %6, float* %62
  %82 = bitcast float* %81 to i32*
  %83 = load i32, i32* %82, align 4
  store i32 %83, i32* %63, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %68)
  %84 = or i64 %66, 1
  br label %85

85:                                               ; preds = %65, %72
  %86 = phi float [ undef, %65 ], [ %79, %72 ]
  %87 = phi i32 [ %60, %65 ], [ %83, %72 ]
  %88 = phi i64 [ %66, %65 ], [ %84, %72 ]
  %89 = phi float [ %54, %65 ], [ %79, %72 ]
  %90 = sub nsw i64 0, %67
  %91 = icmp eq i64 %69, %90
  br i1 %91, label %121, label %92

92:                                               ; preds = %85, %92
  %93 = phi i32 [ %118, %92 ], [ %87, %85 ]
  %94 = phi i64 [ %119, %92 ], [ %88, %85 ]
  %95 = phi float [ %114, %92 ], [ %89, %85 ]
  %96 = bitcast i32 %93 to float
  %97 = fmul float %12, %95
  %98 = getelementptr inbounds float, float* %1, i64 %94
  %99 = load float, float* %98, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %68)
  %100 = fmul float %99, %99
  store float %100, float* %6, align 4
  %101 = fmul float %100, %3
  %102 = fadd float %97, %101
  %103 = fcmp ogt float %100, %96
  %104 = select i1 %103, float* %6, float* %62
  %105 = bitcast float* %104 to i32*
  %106 = load i32, i32* %105, align 4
  store i32 %106, i32* %63, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %68)
  %107 = add nuw nsw i64 %94, 1
  %108 = bitcast i32 %106 to float
  %109 = fmul float %12, %102
  %110 = getelementptr inbounds float, float* %1, i64 %107
  %111 = load float, float* %110, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %68)
  %112 = fmul float %111, %111
  store float %112, float* %6, align 4
  %113 = fmul float %112, %3
  %114 = fadd float %109, %113
  %115 = fcmp ogt float %112, %108
  %116 = select i1 %115, float* %6, float* %62
  %117 = bitcast float* %116 to i32*
  %118 = load i32, i32* %117, align 4
  store i32 %118, i32* %63, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %68)
  %119 = add nuw nsw i64 %94, 2
  %120 = icmp eq i64 %119, %67
  br i1 %120, label %121, label %92

121:                                              ; preds = %92, %85
  %122 = phi float [ %86, %85 ], [ %114, %92 ]
  store float %122, float* %61, align 8
  br label %123

123:                                              ; preds = %41, %121
  %124 = load <2 x float>, <2 x float>* %5, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  ret <2 x float> %124
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden <2 x float> @_ZN5media11vector_math19EWMAAndMaxPower_SSEEfPKfif(float, float* nocapture readonly, i32, float) local_unnamed_addr #3 {
  %5 = alloca <2 x float>, align 8
  %6 = alloca float, align 4
  %7 = srem i32 %2, 4
  %8 = sub nsw i32 %2, %7
  %9 = insertelement <4 x float> undef, float %3, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> zeroinitializer
  %11 = fsub float 1.000000e+00, %3
  %12 = insertelement <4 x float> undef, float %11, i32 0
  %13 = shufflevector <4 x float> %12, <4 x float> undef, <4 x i32> zeroinitializer
  %14 = fmul <4 x float> %12, %12
  %15 = fmul <4 x float> %14, %14
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> zeroinitializer
  %17 = insertelement <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float undef>, float %0, i32 3
  %18 = icmp sgt i32 %8, 0
  br i1 %18, label %19, label %40

19:                                               ; preds = %4
  %20 = sext i32 %8 to i64
  %21 = xor i32 %7, -1
  %22 = add i32 %21, %2
  br label %23

23:                                               ; preds = %19, %23
  %24 = phi i64 [ 0, %19 ], [ %35, %23 ]
  %25 = phi <4 x float> [ %17, %19 ], [ %34, %23 ]
  %26 = phi <4 x float> [ zeroinitializer, %19 ], [ %32, %23 ]
  %27 = fmul <4 x float> %16, %25
  %28 = getelementptr inbounds float, float* %1, i64 %24
  %29 = bitcast float* %28 to <4 x float>*
  %30 = load <4 x float>, <4 x float>* %29, align 16
  %31 = fmul <4 x float> %30, %30
  %32 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %26, <4 x float> %31) #6
  %33 = fmul <4 x float> %10, %31
  %34 = fadd <4 x float> %27, %33
  %35 = add nuw nsw i64 %24, 4
  %36 = icmp slt i64 %35, %20
  br i1 %36, label %23, label %37

37:                                               ; preds = %23
  %38 = add i32 %22, 4
  %39 = and i32 %38, -4
  br label %40

40:                                               ; preds = %37, %4
  %41 = phi <4 x float> [ zeroinitializer, %4 ], [ %32, %37 ]
  %42 = phi <4 x float> [ %17, %4 ], [ %34, %37 ]
  %43 = phi i32 [ 0, %4 ], [ %39, %37 ]
  %44 = extractelement <4 x float> %42, i32 3
  %45 = fmul <4 x float> %13, %42
  %46 = extractelement <4 x float> %45, i32 2
  %47 = fadd float %44, %46
  %48 = fmul <4 x float> %13, %45
  %49 = extractelement <4 x float> %48, i32 1
  %50 = fadd float %47, %49
  %51 = extractelement <4 x float> %48, i32 0
  %52 = fmul float %11, %51
  %53 = fadd float %50, %52
  %54 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %55 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %41, <4 x float> %54) #6
  %56 = shufflevector <4 x float> %55, <4 x float> undef, <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>
  %57 = tail call <4 x float> @llvm.x86.sse.max.ss(<4 x float> %55, <4 x float> %56) #6
  %58 = getelementptr inbounds <2 x float>, <2 x float>* %5, i64 0, i64 0
  %59 = getelementptr inbounds <2 x float>, <2 x float>* %5, i64 0, i64 1
  %60 = bitcast <4 x float> %57 to <4 x i32>
  %61 = extractelement <4 x i32> %60, i32 0
  store float %53, float* %58, align 8
  %62 = bitcast float* %59 to i32*
  store i32 %61, i32* %62, align 4
  %63 = icmp slt i32 %43, %2
  br i1 %63, label %64, label %122

64:                                               ; preds = %40
  %65 = bitcast float* %6 to i8*
  %66 = zext i32 %43 to i64
  %67 = zext i32 %2 to i64
  %68 = xor i64 %66, -1
  %69 = and i64 %67, 1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %84, label %71

71:                                               ; preds = %64
  %72 = bitcast i32 %61 to float
  %73 = fmul float %11, %53
  %74 = getelementptr inbounds float, float* %1, i64 %66
  %75 = load float, float* %74, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %65)
  %76 = fmul float %75, %75
  store float %76, float* %6, align 4
  %77 = fmul float %76, %3
  %78 = fadd float %73, %77
  %79 = fcmp ogt float %76, %72
  %80 = select i1 %79, float* %6, float* %59
  %81 = bitcast float* %80 to i32*
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %62, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %65)
  %83 = or i64 %66, 1
  br label %84

84:                                               ; preds = %64, %71
  %85 = phi float [ undef, %64 ], [ %78, %71 ]
  %86 = phi i32 [ %61, %64 ], [ %82, %71 ]
  %87 = phi i64 [ %66, %64 ], [ %83, %71 ]
  %88 = phi float [ %53, %64 ], [ %78, %71 ]
  %89 = sub nsw i64 0, %67
  %90 = icmp eq i64 %68, %89
  br i1 %90, label %120, label %91

91:                                               ; preds = %84, %91
  %92 = phi i32 [ %117, %91 ], [ %86, %84 ]
  %93 = phi i64 [ %118, %91 ], [ %87, %84 ]
  %94 = phi float [ %113, %91 ], [ %88, %84 ]
  %95 = bitcast i32 %92 to float
  %96 = fmul float %11, %94
  %97 = getelementptr inbounds float, float* %1, i64 %93
  %98 = load float, float* %97, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %65)
  %99 = fmul float %98, %98
  store float %99, float* %6, align 4
  %100 = fmul float %99, %3
  %101 = fadd float %96, %100
  %102 = fcmp ogt float %99, %95
  %103 = select i1 %102, float* %6, float* %59
  %104 = bitcast float* %103 to i32*
  %105 = load i32, i32* %104, align 4
  store i32 %105, i32* %62, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %65)
  %106 = add nuw nsw i64 %93, 1
  %107 = bitcast i32 %105 to float
  %108 = fmul float %11, %101
  %109 = getelementptr inbounds float, float* %1, i64 %106
  %110 = load float, float* %109, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %65)
  %111 = fmul float %110, %110
  store float %111, float* %6, align 4
  %112 = fmul float %111, %3
  %113 = fadd float %108, %112
  %114 = fcmp ogt float %111, %107
  %115 = select i1 %114, float* %6, float* %59
  %116 = bitcast float* %115 to i32*
  %117 = load i32, i32* %116, align 4
  store i32 %117, i32* %62, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %65)
  %118 = add nuw nsw i64 %93, 2
  %119 = icmp eq i64 %118, %67
  br i1 %119, label %120, label %91

120:                                              ; preds = %91, %84
  %121 = phi float [ %85, %84 ], [ %113, %91 ]
  store float %121, float* %58, align 8
  br label %122

122:                                              ; preds = %120, %40
  %123 = load <2 x float>, <2 x float>* %5, align 8
  ret <2 x float> %123
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden <2 x float> @_ZN5media11vector_math17EWMAAndMaxPower_CEfPKfif(float, float* nocapture readonly, i32, float) local_unnamed_addr #4 {
  %5 = alloca <2 x float>, align 8
  %6 = alloca float, align 4
  %7 = getelementptr inbounds <2 x float>, <2 x float>* %5, i64 0, i64 0
  %8 = getelementptr inbounds <2 x float>, <2 x float>* %5, i64 0, i64 1
  store float %0, float* %7, align 8
  %9 = bitcast float* %8 to i32*
  store i32 0, i32* %9, align 4
  %10 = fsub float 1.000000e+00, %3
  %11 = icmp sgt i32 %2, 0
  br i1 %11, label %12, label %38

12:                                               ; preds = %4
  %13 = bitcast float* %6 to i8*
  %14 = zext i32 %2 to i64
  %15 = and i64 %14, 1
  %16 = icmp eq i32 %2, 1
  br i1 %16, label %19, label %17

17:                                               ; preds = %12
  %18 = sub nsw i64 %14, %15
  br label %40

19:                                               ; preds = %40, %12
  %20 = phi float [ undef, %12 ], [ %62, %40 ]
  %21 = phi float [ 0.000000e+00, %12 ], [ %68, %40 ]
  %22 = phi i64 [ 0, %12 ], [ %67, %40 ]
  %23 = phi float [ %0, %12 ], [ %62, %40 ]
  %24 = icmp eq i64 %15, 0
  br i1 %24, label %36, label %25

25:                                               ; preds = %19
  %26 = getelementptr inbounds float, float* %1, i64 %22
  %27 = load float, float* %26, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13)
  %28 = fmul float %27, %27
  store float %28, float* %6, align 4
  %29 = fcmp olt float %21, %28
  %30 = select i1 %29, float* %6, float* %8
  %31 = bitcast float* %30 to i32*
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %9, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13)
  %33 = fmul float %10, %23
  %34 = fmul float %28, %3
  %35 = fadd float %33, %34
  br label %36

36:                                               ; preds = %19, %25
  %37 = phi float [ %20, %19 ], [ %35, %25 ]
  store float %37, float* %7, align 8
  br label %38

38:                                               ; preds = %36, %4
  %39 = load <2 x float>, <2 x float>* %5, align 8
  ret <2 x float> %39

40:                                               ; preds = %40, %17
  %41 = phi float [ 0.000000e+00, %17 ], [ %68, %40 ]
  %42 = phi i64 [ 0, %17 ], [ %67, %40 ]
  %43 = phi float [ %0, %17 ], [ %62, %40 ]
  %44 = phi i64 [ %18, %17 ], [ %69, %40 ]
  %45 = fmul float %10, %43
  %46 = getelementptr inbounds float, float* %1, i64 %42
  %47 = load float, float* %46, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13)
  %48 = fmul float %47, %47
  store float %48, float* %6, align 4
  %49 = fmul float %48, %3
  %50 = fadd float %45, %49
  %51 = fcmp olt float %41, %48
  %52 = select i1 %51, float* %6, float* %8
  %53 = bitcast float* %52 to i32*
  %54 = load i32, i32* %53, align 4
  store i32 %54, i32* %9, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13)
  %55 = or i64 %42, 1
  %56 = bitcast i32 %54 to float
  %57 = fmul float %10, %50
  %58 = getelementptr inbounds float, float* %1, i64 %55
  %59 = load float, float* %58, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13)
  %60 = fmul float %59, %59
  store float %60, float* %6, align 4
  %61 = fmul float %60, %3
  %62 = fadd float %57, %61
  %63 = fcmp ogt float %60, %56
  %64 = select i1 %63, float* %6, float* %8
  %65 = bitcast float* %64 to i32*
  %66 = load i32, i32* %65, align 4
  store i32 %66, i32* %9, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13)
  %67 = add nuw nsw i64 %42, 2
  %68 = bitcast i32 %66 to float
  %69 = add i64 %44, -2
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %19, label %40
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.max.ps(<4 x float>, <4 x float>) #5

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.max.ss(<4 x float>, <4 x float>) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !3}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !10}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !10}
!26 = distinct !{!26, !10}
!27 = distinct !{!27, !3}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = distinct !{!33, !10}
!34 = distinct !{!34, !10}
!35 = distinct !{!35, !3}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = !{!40}
!40 = distinct !{!40, !38}
!41 = distinct !{!41, !10}
!42 = distinct !{!42, !10}
!43 = distinct !{!43, !3}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !10}
!50 = distinct !{!50, !10}
