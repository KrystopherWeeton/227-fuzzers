; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/vp8_quantize.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/vp8_quantize.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.macroblock = type { [400 x i16], [400 x i16], [256 x i8], i8*, [25 x %struct.block], %struct.yv12_buffer_config, %struct.macroblockd, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, [4 x i32], %struct.search_site*, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32, i32, [2 x i32*], [2 x i32*], [10 x i32]*, [10 x i32]*, [10 x [10 x i32]]*, i32*, [8 x [3 x [12 x i32]]]*, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.mv_context*, i32, i32, i32, i32, i32, i32, %union.int_mv, i32, i32, i8, i32, [4 x [8 x [3 x [12 x i32]]]], [2 x [2047 x i32]], [5 x i32], [4 x i32], i64, i64, [4 x i32], [20 x i32], [20 x i32], i32, [20 x i32], i32, i32, i32, i32, i32, [1024 x i32], void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (%struct.block*, %struct.blockd*)*, i32, i32, [8 x i8] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.PARTITION_INFO = type { i32, [16 x %struct.anon] }
%struct.anon = type { i32, %union.int_mv }
%struct.search_site = type { %struct.MV, i32 }
%struct.MV = type { i16, i16 }
%struct.mv_context = type { [19 x i8] }
%union.int_mv = type { i32 }
%struct.VP8_COMP = type { [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], %struct.macroblock, %struct.VP8Common, [9 x %struct.BOOL_CODER], %struct.VP8_CONFIG, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.TOKENEXTRA*, i32, i32, i32, i32, i32, i32, [20 x i32], [20 x i32], i32, i32, %struct.CODING_CONTEXT, i64, i64, i32, i32, [2 x i32], double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, [5 x i32], i32, i32, i32, i32, double, i64, i64, i64, i32, i32, i32, i32, i64, i32, double, double, i64, i64, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x [2 x i32]]]]], i32, i32, i32, i32, %struct.vpx_codec_pkt_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [4 x i32], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i8*, i8*, [2 x [4 x i8]], [4 x i32], i8*, i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_atomic_int*, i32, %struct.vpx_atomic_int, i32, i32, i64*, i64, %struct.MB_ROW_COMP*, %struct.ENCODETHREAD_DATA*, %struct.LPFTHREAD_DATA, %union.sem_t*, %union.sem_t*, %union.sem_t, %union.sem_t, %struct.TOKENLIST*, [9 x i32], [9 x i8*], [9 x i8*], i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, [5 x %struct.variance_vtable], i64, i64, i64, i64, [128 x i32], %struct.frame_contexts, %struct.frame_contexts, %struct.frame_contexts, %struct.twopass_rc, i32, i32, i32*, i8*, i32, i32, %union.int_mv*, i32*, i32*, i32, i32, i32, i32, %struct.vp8_denoiser, i32, [5 x %struct.LAYER_CONTEXT], [5 x i64], [5 x i64], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], i32, i8, [4 x i32], i32, %struct.rd_costs_struct, i32, i32, [12 x i8] }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_CODER = type { i32, i32, i32, i32, i8*, i8*, %struct.vpx_internal_error_info* }
%struct.VP8_CONFIG = type { i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_codec_pkt_list*, i32, i32, [16 x i32], [16 x i32], i32, [16 x i32], i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_rational = type { i32, i32 }
%struct.lookahead_ctx = type opaque
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32 }
%struct.TOKENEXTRA = type { i8*, i16, i8, i8 }
%struct.CODING_CONTEXT = type { i32, i32, i32, i32, i32, [4 x i32], [2 x %struct.mv_context], [2 x [2048 x i32]], [4 x i8], [3 x i8], [4 x i8], [3 x i8], [5 x i32], [4 x i32], [4 x i32], i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon }
%union.anon = type { %struct.anon.0, [40 x i8] }
%struct.anon.0 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, i32, i32 }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_COMP = type { %struct.macroblock, [4 x i32], i32, [12 x i8] }
%struct.ENCODETHREAD_DATA = type { i32, i8*, i8* }
%struct.LPFTHREAD_DATA = type { i32, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA* }
%struct.variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32)* }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.twopass_rc = type { i32, double, i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS, i32, i64, i64, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, double }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.vp8_denoiser = type { [4 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, %struct.yv12_buffer_config, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.denoise_params }
%struct.denoise_params = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { double, i32, i64, i64, i64, i64, i64, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, i32, i32, i64, i32, i32, i32, i32, [4 x i32], [2 x i32] }
%struct.rd_costs_struct = type { [2 x [2048 x i32]], [2 x [512 x i32]], [2 x [10 x i32]], [2 x [10 x i32]], [10 x [10 x [10 x i32]]], [14 x i32], [4 x [8 x [3 x [12 x i32]]]] }

@vp8_default_zig_zag1d = external local_unnamed_addr constant [16 x i32], align 16
@__const.vp8cx_init_quantizer.zbin_boost = private unnamed_addr constant [16 x i32] [i32 0, i32 0, i32 8, i32 10, i32 12, i32 14, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 44, i32 44], align 16
@qzbin_factors_y2 = internal unnamed_addr constant [129 x i32] [i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 84, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80, i32 80], align 16
@qrounding_factors_y2 = internal unnamed_addr constant [129 x i32] [i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48, i32 48], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_fast_quantize_b_c(%struct.block* nocapture readonly, %struct.blockd* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 1
  %4 = load i16*, i16** %3, align 8
  %5 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 7
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 3
  %8 = load i16*, i16** %7, align 8
  %9 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 0
  %10 = load i16*, i16** %9, align 8
  %11 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 1
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 3
  %14 = load i16*, i16** %13, align 8
  br label %15

15:                                               ; preds = %15, %2
  %16 = phi i64 [ 0, %2 ], [ %48, %15 ]
  %17 = phi i32 [ -1, %2 ], [ %47, %15 ]
  %18 = getelementptr inbounds [16 x i32], [16 x i32]* @vp8_default_zig_zag1d, i64 0, i64 %16
  %19 = load i32, i32* %18, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i16, i16* %4, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = sext i16 %22 to i32
  %24 = ashr i32 %23, 31
  %25 = xor i32 %24, %23
  %26 = lshr i32 %23, 31
  %27 = getelementptr inbounds i16, i16* %6, i64 %20
  %28 = load i16, i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = add nsw i32 %26, %29
  %31 = add nsw i32 %30, %25
  %32 = getelementptr inbounds i16, i16* %8, i64 %20
  %33 = load i16, i16* %32, align 2
  %34 = sext i16 %33 to i32
  %35 = mul nsw i32 %31, %34
  %36 = ashr i32 %35, 16
  %37 = xor i32 %36, %24
  %38 = sub nsw i32 %37, %24
  %39 = trunc i32 %38 to i16
  %40 = getelementptr inbounds i16, i16* %10, i64 %20
  store i16 %39, i16* %40, align 2
  %41 = getelementptr inbounds i16, i16* %14, i64 %20
  %42 = load i16, i16* %41, align 2
  %43 = mul i16 %42, %39
  %44 = getelementptr inbounds i16, i16* %12, i64 %20
  store i16 %43, i16* %44, align 2
  %45 = icmp eq i32 %36, 0
  %46 = trunc i64 %16 to i32
  %47 = select i1 %45, i32 %17, i32 %46
  %48 = add nuw nsw i64 %16, 1
  %49 = icmp eq i64 %48, 16
  br i1 %49, label %50, label %15

50:                                               ; preds = %15
  %51 = trunc i32 %47 to i8
  %52 = add i8 %51, 1
  %53 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 5
  %54 = load i8*, i8** %53, align 8
  store i8 %52, i8* %54, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_regular_quantize_b_c(%struct.block* nocapture readonly, %struct.blockd* nocapture readonly) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 6
  %4 = load i16*, i16** %3, align 8
  %5 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 1
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 5
  %8 = load i16*, i16** %7, align 8
  %9 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 7
  %10 = load i16*, i16** %9, align 8
  %11 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 2
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 4
  %14 = load i16*, i16** %13, align 8
  %15 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 0
  %16 = load i16*, i16** %15, align 8
  %17 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 1
  %18 = load i16*, i16** %17, align 8
  %19 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 3
  %20 = load i16*, i16** %19, align 8
  %21 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 8
  %22 = load i16, i16* %21, align 8
  %23 = bitcast i16* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %23, i8 0, i64 32, i1 false)
  %24 = bitcast i16* %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %24, i8 0, i64 32, i1 false)
  %25 = sext i16 %22 to i32
  br label %26

26:                                               ; preds = %76, %2
  %27 = phi i64 [ 0, %2 ], [ %79, %76 ]
  %28 = phi i16* [ %4, %2 ], [ %78, %76 ]
  %29 = phi i32 [ -1, %2 ], [ %77, %76 ]
  %30 = getelementptr inbounds [16 x i32], [16 x i32]* @vp8_default_zig_zag1d, i64 0, i64 %27
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i16, i16* %6, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = sext i16 %34 to i32
  %36 = getelementptr inbounds i16, i16* %8, i64 %32
  %37 = load i16, i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = load i16, i16* %28, align 2
  %40 = sext i16 %39 to i32
  %41 = add nsw i32 %38, %25
  %42 = add nsw i32 %41, %40
  %43 = getelementptr inbounds i16, i16* %28, i64 1
  %44 = ashr i32 %35, 31
  %45 = xor i32 %44, %35
  %46 = sub nsw i32 %45, %44
  %47 = icmp slt i32 %46, %42
  br i1 %47, label %76, label %48

48:                                               ; preds = %26
  %49 = getelementptr inbounds i16, i16* %10, i64 %32
  %50 = load i16, i16* %49, align 2
  %51 = sext i16 %50 to i32
  %52 = add nsw i32 %46, %51
  %53 = getelementptr inbounds i16, i16* %12, i64 %32
  %54 = load i16, i16* %53, align 2
  %55 = sext i16 %54 to i32
  %56 = mul nsw i32 %52, %55
  %57 = ashr i32 %56, 16
  %58 = add nsw i32 %57, %52
  %59 = getelementptr inbounds i16, i16* %14, i64 %32
  %60 = load i16, i16* %59, align 2
  %61 = sext i16 %60 to i32
  %62 = mul nsw i32 %58, %61
  %63 = ashr i32 %62, 16
  %64 = xor i32 %63, %44
  %65 = sub nsw i32 %64, %44
  %66 = trunc i32 %65 to i16
  %67 = getelementptr inbounds i16, i16* %16, i64 %32
  store i16 %66, i16* %67, align 2
  %68 = getelementptr inbounds i16, i16* %20, i64 %32
  %69 = load i16, i16* %68, align 2
  %70 = mul i16 %69, %66
  %71 = getelementptr inbounds i16, i16* %18, i64 %32
  store i16 %70, i16* %71, align 2
  %72 = icmp eq i32 %63, 0
  br i1 %72, label %76, label %73

73:                                               ; preds = %48
  %74 = load i16*, i16** %3, align 8
  %75 = trunc i64 %27 to i32
  br label %76

76:                                               ; preds = %48, %26, %73
  %77 = phi i32 [ %75, %73 ], [ %29, %48 ], [ %29, %26 ]
  %78 = phi i16* [ %74, %73 ], [ %43, %48 ], [ %43, %26 ]
  %79 = add nuw nsw i64 %27, 1
  %80 = icmp eq i64 %79, 16
  br i1 %80, label %81, label %26

81:                                               ; preds = %76
  %82 = trunc i32 %77 to i8
  %83 = add i8 %82, 1
  %84 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 5
  %85 = load i8*, i8** %84, align 8
  store i8 %83, i8* %85, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_quantize_mby(%struct.macroblock*) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 13
  %3 = load %struct.modeinfo*, %struct.modeinfo** %2, align 32
  %4 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %3, i64 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 4
  %6 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 70
  %7 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 0
  tail call void %7(%struct.block* %8, %struct.blockd* %9) #4
  %10 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 1
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 1
  tail call void %10(%struct.block* %11, %struct.blockd* %12) #4
  %13 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 2
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 2
  tail call void %13(%struct.block* %14, %struct.blockd* %15) #4
  %16 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 3
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 3
  tail call void %16(%struct.block* %17, %struct.blockd* %18) #4
  %19 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 4
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 4
  tail call void %19(%struct.block* %20, %struct.blockd* %21) #4
  %22 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 5
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 5
  tail call void %22(%struct.block* %23, %struct.blockd* %24) #4
  %25 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 6
  %27 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 6
  tail call void %25(%struct.block* %26, %struct.blockd* %27) #4
  %28 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 7
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 7
  tail call void %28(%struct.block* %29, %struct.blockd* %30) #4
  %31 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 8
  %33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 8
  tail call void %31(%struct.block* %32, %struct.blockd* %33) #4
  %34 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %35 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 9
  %36 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 9
  tail call void %34(%struct.block* %35, %struct.blockd* %36) #4
  %37 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 10
  %39 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 10
  tail call void %37(%struct.block* %38, %struct.blockd* %39) #4
  %40 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 11
  %42 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 11
  tail call void %40(%struct.block* %41, %struct.blockd* %42) #4
  %43 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %44 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 12
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 12
  tail call void %43(%struct.block* %44, %struct.blockd* %45) #4
  %46 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 13
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 13
  tail call void %46(%struct.block* %47, %struct.blockd* %48) #4
  %49 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %50 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 14
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 14
  tail call void %49(%struct.block* %50, %struct.blockd* %51) #4
  %52 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %53 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 15
  %54 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 15
  tail call void %52(%struct.block* %53, %struct.blockd* %54) #4
  switch i8 %5, label %55 [
    i8 9, label %59
    i8 4, label %59
  ]

55:                                               ; preds = %1
  %56 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %6, align 8
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 24
  %58 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 24
  tail call void %56(%struct.block* %57, %struct.blockd* %58) #4
  br label %59

59:                                               ; preds = %1, %1, %55
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_quantize_mb(%struct.macroblock*) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 13
  %3 = load %struct.modeinfo*, %struct.modeinfo** %2, align 32
  %4 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %3, i64 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 4
  %6 = icmp eq i8 %5, 4
  %7 = icmp eq i8 %5, 9
  %8 = or i1 %6, %7
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 70
  %10 = select i1 %8, i64 24, i64 25
  br label %11

11:                                               ; preds = %11, %1
  %12 = phi i64 [ 0, %1 ], [ %16, %11 ]
  %13 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %9, align 8
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 %12
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %12
  tail call void %13(%struct.block* %14, %struct.blockd* %15) #4
  %16 = add nuw nsw i64 %12, 1
  %17 = icmp eq i64 %16, %10
  br i1 %17, label %18, label %11

18:                                               ; preds = %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_quantize_mbuv(%struct.macroblock*) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 70
  %3 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %2, align 8
  %4 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 16
  %5 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 16
  tail call void %3(%struct.block* %4, %struct.blockd* %5) #4
  %6 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %2, align 8
  %7 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 17
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 17
  tail call void %6(%struct.block* %7, %struct.blockd* %8) #4
  %9 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %2, align 8
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 18
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 18
  tail call void %9(%struct.block* %10, %struct.blockd* %11) #4
  %12 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %2, align 8
  %13 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 19
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 19
  tail call void %12(%struct.block* %13, %struct.blockd* %14) #4
  %15 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %2, align 8
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 20
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 20
  tail call void %15(%struct.block* %16, %struct.blockd* %17) #4
  %18 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %2, align 8
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 21
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 21
  tail call void %18(%struct.block* %19, %struct.blockd* %20) #4
  %21 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %2, align 8
  %22 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 22
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 22
  tail call void %21(%struct.block* %22, %struct.blockd* %23) #4
  %24 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %2, align 8
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 23
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 23
  tail call void %24(%struct.block* %25, %struct.blockd* %26) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8cx_init_quantizer(%struct.VP8_COMP*) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 35
  %3 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 2
  %4 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 36
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 38
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 37
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 39
  br label %8

8:                                                ; preds = %354, %1
  %9 = phi i64 [ 0, %1 ], [ %355, %354 ]
  %10 = load i32, i32* %2, align 4
  %11 = trunc i64 %9 to i32
  %12 = tail call i32 @vp8_dc_quant(i32 %11, i32 %10) #4
  %13 = sdiv i32 65536, %12
  %14 = trunc i32 %13 to i16
  %15 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 15, i64 %9, i64 0
  store i16 %14, i16* %15, align 32
  %16 = load i32, i32* %3, align 8
  %17 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 0, i64 %9, i64 0
  %18 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 1, i64 %9, i64 0
  %19 = trunc i32 %12 to i16
  %20 = icmp eq i32 %16, 0
  %21 = shl i32 %12, 16
  %22 = ashr exact i32 %21, 16
  br i1 %20, label %42, label %23

23:                                               ; preds = %8
  %24 = icmp ugt i16 %19, 1
  br i1 %24, label %25, label %31

25:                                               ; preds = %23, %25
  %26 = phi i32 [ %29, %25 ], [ 0, %23 ]
  %27 = phi i32 [ %28, %25 ], [ %22, %23 ]
  %28 = lshr i32 %27, 1
  %29 = add nuw nsw i32 %26, 1
  %30 = icmp ugt i32 %27, 3
  br i1 %30, label %25, label %31

31:                                               ; preds = %25, %23
  %32 = phi i32 [ 0, %23 ], [ %29, %25 ]
  %33 = shl i32 65536, %32
  %34 = sdiv i32 %33, %22
  %35 = trunc i32 %34 to i16
  %36 = add i16 %35, 1
  store i16 %36, i16* %17, align 2
  %37 = shl i32 %32, 16
  %38 = ashr exact i32 %37, 16
  %39 = sub nsw i32 16, %38
  %40 = shl i32 1, %39
  %41 = trunc i32 %40 to i16
  br label %45

42:                                               ; preds = %8
  %43 = sdiv i32 65536, %22
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %17, align 2
  br label %45

45:                                               ; preds = %31, %42
  %46 = phi i16 [ 0, %42 ], [ %41, %31 ]
  store i16 %46, i16* %18, align 2
  %47 = getelementptr inbounds [129 x i32], [129 x i32]* @qzbin_factors_y2, i64 0, i64 %9
  %48 = load i32, i32* %47, align 4
  %49 = mul nsw i32 %48, %12
  %50 = add nsw i32 %49, 64
  %51 = lshr i32 %50, 7
  %52 = trunc i32 %51 to i16
  %53 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 2, i64 %9, i64 0
  store i16 %52, i16* %53, align 32
  %54 = getelementptr inbounds [129 x i32], [129 x i32]* @qrounding_factors_y2, i64 0, i64 %9
  %55 = load i32, i32* %54, align 4
  %56 = mul nsw i32 %55, %12
  %57 = lshr i32 %56, 7
  %58 = trunc i32 %57 to i16
  %59 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 3, i64 %9, i64 0
  store i16 %58, i16* %59, align 32
  %60 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 2, i64 %9, i64 0
  store i16 %19, i16* %60, align 4
  %61 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 12, i64 %9, i64 0
  store i16 0, i16* %61, align 32
  %62 = load i32, i32* %4, align 8
  %63 = tail call i32 @vp8_dc2quant(i32 %11, i32 %62) #4
  %64 = sdiv i32 65536, %63
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 16, i64 %9, i64 0
  store i16 %65, i16* %66, align 32
  %67 = load i32, i32* %3, align 8
  %68 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 4, i64 %9, i64 0
  %69 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 5, i64 %9, i64 0
  %70 = trunc i32 %63 to i16
  %71 = icmp eq i32 %67, 0
  %72 = shl i32 %63, 16
  %73 = ashr exact i32 %72, 16
  br i1 %71, label %93, label %74

74:                                               ; preds = %45
  %75 = icmp ugt i16 %70, 1
  br i1 %75, label %76, label %82

76:                                               ; preds = %74, %76
  %77 = phi i32 [ %80, %76 ], [ 0, %74 ]
  %78 = phi i32 [ %79, %76 ], [ %73, %74 ]
  %79 = lshr i32 %78, 1
  %80 = add nuw nsw i32 %77, 1
  %81 = icmp ugt i32 %78, 3
  br i1 %81, label %76, label %82

82:                                               ; preds = %76, %74
  %83 = phi i32 [ 0, %74 ], [ %80, %76 ]
  %84 = shl i32 65536, %83
  %85 = sdiv i32 %84, %73
  %86 = trunc i32 %85 to i16
  %87 = add i16 %86, 1
  store i16 %87, i16* %68, align 2
  %88 = shl i32 %83, 16
  %89 = ashr exact i32 %88, 16
  %90 = sub nsw i32 16, %89
  %91 = shl i32 1, %90
  %92 = trunc i32 %91 to i16
  br label %96

93:                                               ; preds = %45
  %94 = sdiv i32 65536, %73
  %95 = trunc i32 %94 to i16
  store i16 %95, i16* %68, align 2
  br label %96

96:                                               ; preds = %82, %93
  %97 = phi i16 [ 0, %93 ], [ %92, %82 ]
  store i16 %97, i16* %69, align 2
  %98 = getelementptr inbounds [129 x i32], [129 x i32]* @qzbin_factors_y2, i64 0, i64 %9
  %99 = load i32, i32* %98, align 4
  %100 = mul nsw i32 %99, %63
  %101 = add nsw i32 %100, 64
  %102 = lshr i32 %101, 7
  %103 = trunc i32 %102 to i16
  %104 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 6, i64 %9, i64 0
  store i16 %103, i16* %104, align 32
  %105 = getelementptr inbounds [129 x i32], [129 x i32]* @qrounding_factors_y2, i64 0, i64 %9
  %106 = load i32, i32* %105, align 4
  %107 = mul nsw i32 %106, %63
  %108 = lshr i32 %107, 7
  %109 = trunc i32 %108 to i16
  %110 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 7, i64 %9, i64 0
  store i16 %109, i16* %110, align 32
  %111 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 3, i64 %9, i64 0
  store i16 %70, i16* %111, align 4
  %112 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 13, i64 %9, i64 0
  store i16 0, i16* %112, align 32
  %113 = load i32, i32* %5, align 32
  %114 = tail call i32 @vp8_dc_uv_quant(i32 %11, i32 %113) #4
  %115 = sdiv i32 65536, %114
  %116 = trunc i32 %115 to i16
  %117 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 17, i64 %9, i64 0
  store i16 %116, i16* %117, align 32
  %118 = load i32, i32* %3, align 8
  %119 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 8, i64 %9, i64 0
  %120 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 9, i64 %9, i64 0
  %121 = trunc i32 %114 to i16
  %122 = icmp eq i32 %118, 0
  %123 = shl i32 %114, 16
  %124 = ashr exact i32 %123, 16
  br i1 %122, label %144, label %125

125:                                              ; preds = %96
  %126 = icmp ugt i16 %121, 1
  br i1 %126, label %127, label %133

127:                                              ; preds = %125, %127
  %128 = phi i32 [ %131, %127 ], [ 0, %125 ]
  %129 = phi i32 [ %130, %127 ], [ %124, %125 ]
  %130 = lshr i32 %129, 1
  %131 = add nuw nsw i32 %128, 1
  %132 = icmp ugt i32 %129, 3
  br i1 %132, label %127, label %133

133:                                              ; preds = %127, %125
  %134 = phi i32 [ 0, %125 ], [ %131, %127 ]
  %135 = shl i32 65536, %134
  %136 = sdiv i32 %135, %124
  %137 = trunc i32 %136 to i16
  %138 = add i16 %137, 1
  store i16 %138, i16* %119, align 2
  %139 = shl i32 %134, 16
  %140 = ashr exact i32 %139, 16
  %141 = sub nsw i32 16, %140
  %142 = shl i32 1, %141
  %143 = trunc i32 %142 to i16
  br label %147

144:                                              ; preds = %96
  %145 = sdiv i32 65536, %124
  %146 = trunc i32 %145 to i16
  store i16 %146, i16* %119, align 2
  br label %147

147:                                              ; preds = %133, %144
  %148 = phi i16 [ 0, %144 ], [ %143, %133 ]
  store i16 %148, i16* %120, align 2
  %149 = mul nsw i32 %114, %48
  %150 = add nsw i32 %149, 64
  %151 = lshr i32 %150, 7
  %152 = trunc i32 %151 to i16
  %153 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 10, i64 %9, i64 0
  store i16 %152, i16* %153, align 32
  %154 = mul nsw i32 %114, %55
  %155 = lshr i32 %154, 7
  %156 = trunc i32 %155 to i16
  %157 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 11, i64 %9, i64 0
  store i16 %156, i16* %157, align 32
  %158 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 4, i64 %9, i64 0
  store i16 %121, i16* %158, align 4
  %159 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 14, i64 %9, i64 0
  store i16 0, i16* %159, align 32
  %160 = tail call i32 @vp8_ac_yquant(i32 %11) #4
  %161 = sdiv i32 65536, %160
  %162 = trunc i32 %161 to i16
  %163 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 15, i64 %9, i64 1
  store i16 %162, i16* %163, align 2
  %164 = load i32, i32* %3, align 8
  %165 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 0, i64 %9, i64 1
  %166 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 1, i64 %9, i64 1
  %167 = trunc i32 %160 to i16
  %168 = icmp eq i32 %164, 0
  %169 = shl i32 %160, 16
  %170 = ashr exact i32 %169, 16
  br i1 %168, label %190, label %171

171:                                              ; preds = %147
  %172 = icmp ugt i16 %167, 1
  br i1 %172, label %173, label %179

173:                                              ; preds = %171, %173
  %174 = phi i32 [ %177, %173 ], [ 0, %171 ]
  %175 = phi i32 [ %176, %173 ], [ %170, %171 ]
  %176 = lshr i32 %175, 1
  %177 = add nuw nsw i32 %174, 1
  %178 = icmp ugt i32 %175, 3
  br i1 %178, label %173, label %179

179:                                              ; preds = %173, %171
  %180 = phi i32 [ 0, %171 ], [ %177, %173 ]
  %181 = shl i32 65536, %180
  %182 = sdiv i32 %181, %170
  %183 = trunc i32 %182 to i16
  %184 = add i16 %183, 1
  store i16 %184, i16* %165, align 2
  %185 = shl i32 %180, 16
  %186 = ashr exact i32 %185, 16
  %187 = sub nsw i32 16, %186
  %188 = shl i32 1, %187
  %189 = trunc i32 %188 to i16
  br label %193

190:                                              ; preds = %147
  %191 = sdiv i32 65536, %170
  %192 = trunc i32 %191 to i16
  store i16 %192, i16* %165, align 2
  br label %193

193:                                              ; preds = %179, %190
  %194 = phi i16 [ 0, %190 ], [ %189, %179 ]
  store i16 %194, i16* %166, align 2
  %195 = mul nsw i32 %160, %48
  %196 = add nsw i32 %195, 64
  %197 = lshr i32 %196, 7
  %198 = trunc i32 %197 to i16
  %199 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 2, i64 %9, i64 1
  store i16 %198, i16* %199, align 2
  %200 = mul nsw i32 %160, %55
  %201 = lshr i32 %200, 7
  %202 = trunc i32 %201 to i16
  %203 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 3, i64 %9, i64 1
  store i16 %202, i16* %203, align 2
  %204 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 2, i64 %9, i64 1
  store i16 %167, i16* %204, align 2
  %205 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 12, i64 %9, i64 1
  store i16 0, i16* %205, align 2
  %206 = load i32, i32* %6, align 4
  %207 = tail call i32 @vp8_ac2quant(i32 %11, i32 %206) #4
  %208 = sdiv i32 65536, %207
  %209 = trunc i32 %208 to i16
  %210 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 16, i64 %9, i64 1
  store i16 %209, i16* %210, align 2
  %211 = load i32, i32* %3, align 8
  %212 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 4, i64 %9, i64 1
  %213 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 5, i64 %9, i64 1
  %214 = trunc i32 %207 to i16
  %215 = icmp eq i32 %211, 0
  %216 = shl i32 %207, 16
  %217 = ashr exact i32 %216, 16
  br i1 %215, label %237, label %218

218:                                              ; preds = %193
  %219 = icmp ugt i16 %214, 1
  br i1 %219, label %220, label %226

220:                                              ; preds = %218, %220
  %221 = phi i32 [ %224, %220 ], [ 0, %218 ]
  %222 = phi i32 [ %223, %220 ], [ %217, %218 ]
  %223 = lshr i32 %222, 1
  %224 = add nuw nsw i32 %221, 1
  %225 = icmp ugt i32 %222, 3
  br i1 %225, label %220, label %226

226:                                              ; preds = %220, %218
  %227 = phi i32 [ 0, %218 ], [ %224, %220 ]
  %228 = shl i32 65536, %227
  %229 = sdiv i32 %228, %217
  %230 = trunc i32 %229 to i16
  %231 = add i16 %230, 1
  store i16 %231, i16* %212, align 2
  %232 = shl i32 %227, 16
  %233 = ashr exact i32 %232, 16
  %234 = sub nsw i32 16, %233
  %235 = shl i32 1, %234
  %236 = trunc i32 %235 to i16
  br label %240

237:                                              ; preds = %193
  %238 = sdiv i32 65536, %217
  %239 = trunc i32 %238 to i16
  store i16 %239, i16* %212, align 2
  br label %240

240:                                              ; preds = %226, %237
  %241 = phi i16 [ 0, %237 ], [ %236, %226 ]
  store i16 %241, i16* %213, align 2
  %242 = mul nsw i32 %207, %99
  %243 = add nsw i32 %242, 64
  %244 = lshr i32 %243, 7
  %245 = trunc i32 %244 to i16
  %246 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 6, i64 %9, i64 1
  store i16 %245, i16* %246, align 2
  %247 = mul nsw i32 %207, %106
  %248 = lshr i32 %247, 7
  %249 = trunc i32 %248 to i16
  %250 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 7, i64 %9, i64 1
  store i16 %249, i16* %250, align 2
  %251 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 3, i64 %9, i64 1
  store i16 %214, i16* %251, align 2
  %252 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 13, i64 %9, i64 1
  store i16 0, i16* %252, align 2
  %253 = load i32, i32* %7, align 4
  %254 = tail call i32 @vp8_ac_uv_quant(i32 %11, i32 %253) #4
  %255 = sdiv i32 65536, %254
  %256 = trunc i32 %255 to i16
  %257 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 17, i64 %9, i64 1
  store i16 %256, i16* %257, align 2
  %258 = load i32, i32* %3, align 8
  %259 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 8, i64 %9, i64 1
  %260 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 9, i64 %9, i64 1
  %261 = trunc i32 %254 to i16
  %262 = icmp eq i32 %258, 0
  %263 = shl i32 %254, 16
  %264 = ashr exact i32 %263, 16
  br i1 %262, label %284, label %265

265:                                              ; preds = %240
  %266 = icmp ugt i16 %261, 1
  br i1 %266, label %267, label %273

267:                                              ; preds = %265, %267
  %268 = phi i32 [ %271, %267 ], [ 0, %265 ]
  %269 = phi i32 [ %270, %267 ], [ %264, %265 ]
  %270 = lshr i32 %269, 1
  %271 = add nuw nsw i32 %268, 1
  %272 = icmp ugt i32 %269, 3
  br i1 %272, label %267, label %273

273:                                              ; preds = %267, %265
  %274 = phi i32 [ 0, %265 ], [ %271, %267 ]
  %275 = shl i32 65536, %274
  %276 = sdiv i32 %275, %264
  %277 = trunc i32 %276 to i16
  %278 = add i16 %277, 1
  store i16 %278, i16* %259, align 2
  %279 = shl i32 %274, 16
  %280 = ashr exact i32 %279, 16
  %281 = sub nsw i32 16, %280
  %282 = shl i32 1, %281
  %283 = trunc i32 %282 to i16
  br label %287

284:                                              ; preds = %240
  %285 = sdiv i32 65536, %264
  %286 = trunc i32 %285 to i16
  store i16 %286, i16* %259, align 2
  br label %287

287:                                              ; preds = %273, %284
  %288 = phi i16 [ 0, %284 ], [ %283, %273 ]
  store i16 %288, i16* %260, align 2
  %289 = mul nsw i32 %254, %48
  %290 = add nsw i32 %289, 64
  %291 = lshr i32 %290, 7
  %292 = trunc i32 %291 to i16
  %293 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 10, i64 %9, i64 1
  store i16 %292, i16* %293, align 2
  %294 = mul nsw i32 %254, %55
  %295 = lshr i32 %294, 7
  %296 = trunc i32 %295 to i16
  %297 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 11, i64 %9, i64 1
  store i16 %296, i16* %297, align 2
  %298 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 4, i64 %9, i64 1
  store i16 %261, i16* %298, align 2
  %299 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 14, i64 %9, i64 1
  store i16 0, i16* %299, align 2
  br label %300

300:                                              ; preds = %300, %287
  %301 = phi i64 [ 2, %287 ], [ %352, %300 ]
  %302 = load i16, i16* %163, align 2
  %303 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 15, i64 %9, i64 %301
  store i16 %302, i16* %303, align 2
  %304 = load i16, i16* %165, align 2
  %305 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 0, i64 %9, i64 %301
  store i16 %304, i16* %305, align 2
  %306 = load i16, i16* %166, align 2
  %307 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 1, i64 %9, i64 %301
  store i16 %306, i16* %307, align 2
  %308 = load i16, i16* %199, align 2
  %309 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 2, i64 %9, i64 %301
  store i16 %308, i16* %309, align 2
  %310 = load i16, i16* %203, align 2
  %311 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 3, i64 %9, i64 %301
  store i16 %310, i16* %311, align 2
  %312 = load i16, i16* %204, align 2
  %313 = sext i16 %312 to i32
  %314 = getelementptr inbounds [16 x i32], [16 x i32]* @__const.vp8cx_init_quantizer.zbin_boost, i64 0, i64 %301
  %315 = load i32, i32* %314, align 4
  %316 = mul nsw i32 %315, %313
  %317 = lshr i32 %316, 7
  %318 = trunc i32 %317 to i16
  %319 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 12, i64 %9, i64 %301
  store i16 %318, i16* %319, align 2
  %320 = load i16, i16* %210, align 2
  %321 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 16, i64 %9, i64 %301
  store i16 %320, i16* %321, align 2
  %322 = load i16, i16* %212, align 2
  %323 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 4, i64 %9, i64 %301
  store i16 %322, i16* %323, align 2
  %324 = load i16, i16* %213, align 2
  %325 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 5, i64 %9, i64 %301
  store i16 %324, i16* %325, align 2
  %326 = load i16, i16* %246, align 2
  %327 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 6, i64 %9, i64 %301
  store i16 %326, i16* %327, align 2
  %328 = load i16, i16* %250, align 2
  %329 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 7, i64 %9, i64 %301
  store i16 %328, i16* %329, align 2
  %330 = load i16, i16* %251, align 2
  %331 = sext i16 %330 to i32
  %332 = mul nsw i32 %315, %331
  %333 = lshr i32 %332, 7
  %334 = trunc i32 %333 to i16
  %335 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 13, i64 %9, i64 %301
  store i16 %334, i16* %335, align 2
  %336 = load i16, i16* %257, align 2
  %337 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 17, i64 %9, i64 %301
  store i16 %336, i16* %337, align 2
  %338 = load i16, i16* %259, align 2
  %339 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 8, i64 %9, i64 %301
  store i16 %338, i16* %339, align 2
  %340 = load i16, i16* %260, align 2
  %341 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 9, i64 %9, i64 %301
  store i16 %340, i16* %341, align 2
  %342 = load i16, i16* %293, align 2
  %343 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 10, i64 %9, i64 %301
  store i16 %342, i16* %343, align 2
  %344 = load i16, i16* %297, align 2
  %345 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 11, i64 %9, i64 %301
  store i16 %344, i16* %345, align 2
  %346 = load i16, i16* %298, align 2
  %347 = sext i16 %346 to i32
  %348 = mul nsw i32 %315, %347
  %349 = lshr i32 %348, 7
  %350 = trunc i32 %349 to i16
  %351 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 14, i64 %9, i64 %301
  store i16 %350, i16* %351, align 2
  %352 = add nuw nsw i64 %301, 1
  %353 = icmp eq i64 %352, 16
  br i1 %353, label %354, label %300

354:                                              ; preds = %300
  %355 = add nuw nsw i64 %9, 1
  %356 = icmp eq i64 %355, 128
  br i1 %356, label %357, label %8

357:                                              ; preds = %354
  ret void
}

declare i32 @vp8_dc_quant(i32, i32) local_unnamed_addr #3

declare i32 @vp8_dc2quant(i32, i32) local_unnamed_addr #3

declare i32 @vp8_dc_uv_quant(i32, i32) local_unnamed_addr #3

declare i32 @vp8_ac_yquant(i32) local_unnamed_addr #3

declare i32 @vp8_ac2quant(i32, i32) local_unnamed_addr #3

declare i32 @vp8_ac_uv_quant(i32, i32) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8cx_mb_init_quantizer(%struct.VP8_COMP*, %struct.macroblock*, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 23
  %5 = load i8, i8* %4, align 32
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %36, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 26
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 1
  br i1 %10, label %11, label %20

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 13
  %13 = load %struct.modeinfo*, %struct.modeinfo** %12, align 32
  %14 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %13, i64 0, i32 0, i32 8
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i64
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 28, i64 0, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i32
  br label %39

20:                                               ; preds = %7
  %21 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 34
  %22 = load i32, i32* %21, align 16
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 13
  %24 = load %struct.modeinfo*, %struct.modeinfo** %23, align 32
  %25 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %24, i64 0, i32 0, i32 8
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 28, i64 0, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = add nsw i32 %22, %30
  %32 = icmp sgt i32 %31, -1
  %33 = icmp slt i32 %31, 127
  %34 = select i1 %33, i32 %31, i32 127
  %35 = select i1 %32, i32 %34, i32 0
  br label %39

36:                                               ; preds = %3
  %37 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 34
  %38 = load i32, i32* %37, align 16
  br label %39

39:                                               ; preds = %20, %11, %36
  %40 = phi i32 [ %19, %11 ], [ %38, %36 ], [ %35, %20 ]
  %41 = icmp eq i32 %2, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 40
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %40, %44
  br i1 %45, label %227, label %46

46:                                               ; preds = %42, %39
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 6, i64 0
  store i16 1, i16* %47, align 32
  %48 = sext i32 %40 to i64
  %49 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 2, i64 %48, i64 0
  %50 = load i16, i16* %49, align 4
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 5, i64 0
  store i16 %50, i16* %51, align 32
  %52 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 3, i64 %48, i64 0
  %53 = load i16, i16* %52, align 4
  %54 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 7, i64 0
  store i16 %53, i16* %54, align 32
  %55 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 4, i64 %48, i64 0
  %56 = load i16, i16* %55, align 4
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 8, i64 0
  store i16 %56, i16* %57, align 32
  %58 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 2, i64 %48, i64 1
  %59 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 3, i64 %48, i64 1
  %60 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 4, i64 %48, i64 1
  br label %61

61:                                               ; preds = %307, %46
  %62 = phi i64 [ 1, %46 ], [ %315, %307 ]
  %63 = load i16, i16* %58, align 2
  %64 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 5, i64 %62
  store i16 %63, i16* %64, align 2
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 6, i64 %62
  store i16 %63, i16* %65, align 2
  %66 = load i16, i16* %59, align 2
  %67 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 7, i64 %62
  store i16 %66, i16* %67, align 2
  %68 = load i16, i16* %60, align 2
  %69 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 8, i64 %62
  store i16 %68, i16* %69, align 2
  %70 = add nuw nsw i64 %62, 1
  %71 = icmp eq i64 %70, 16
  br i1 %71, label %72, label %307

72:                                               ; preds = %61
  %73 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 0, i32 3
  store i16* %51, i16** %73, align 8
  %74 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 1, i32 3
  store i16* %51, i16** %74, align 8
  %75 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 2, i32 3
  store i16* %51, i16** %75, align 8
  %76 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 3, i32 3
  store i16* %51, i16** %76, align 8
  %77 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 4, i32 3
  store i16* %51, i16** %77, align 8
  %78 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 5, i32 3
  store i16* %51, i16** %78, align 8
  %79 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 6, i32 3
  store i16* %51, i16** %79, align 8
  %80 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 7, i32 3
  store i16* %51, i16** %80, align 8
  %81 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 8, i32 3
  store i16* %51, i16** %81, align 8
  %82 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 9, i32 3
  store i16* %51, i16** %82, align 8
  %83 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 10, i32 3
  store i16* %51, i16** %83, align 8
  %84 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 11, i32 3
  store i16* %51, i16** %84, align 8
  %85 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 12, i32 3
  store i16* %51, i16** %85, align 8
  %86 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 13, i32 3
  store i16* %51, i16** %86, align 8
  %87 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 14, i32 3
  store i16* %51, i16** %87, align 8
  %88 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 15, i32 3
  store i16* %51, i16** %88, align 8
  %89 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 16, i32 3
  store i16* %57, i16** %89, align 8
  %90 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 17, i32 3
  store i16* %57, i16** %90, align 8
  %91 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 18, i32 3
  store i16* %57, i16** %91, align 8
  %92 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 19, i32 3
  store i16* %57, i16** %92, align 8
  %93 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 20, i32 3
  store i16* %57, i16** %93, align 8
  %94 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 21, i32 3
  store i16* %57, i16** %94, align 8
  %95 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 22, i32 3
  store i16* %57, i16** %95, align 8
  %96 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 23, i32 3
  store i16* %57, i16** %96, align 8
  %97 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 24, i32 3
  store i16* %54, i16** %97, align 8
  %98 = load i16, i16* %58, align 2
  %99 = sext i16 %98 to i32
  %100 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 65
  %101 = load i32, i32* %100, align 4
  %102 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 62
  %103 = load i32, i32* %102, align 32
  %104 = add nsw i32 %103, %101
  %105 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 21
  %106 = load i32, i32* %105, align 32
  %107 = add nsw i32 %104, %106
  %108 = mul nsw i32 %107, %99
  %109 = lshr i32 %108, 7
  %110 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 0, i64 %48, i64 0
  %111 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 15, i64 %48, i64 0
  %112 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 1, i64 %48, i64 0
  %113 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 2, i64 %48, i64 0
  %114 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 3, i64 %48, i64 0
  %115 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 12, i64 %48, i64 0
  %116 = trunc i32 %109 to i16
  br label %117

117:                                              ; preds = %117, %72
  %118 = phi i64 [ 0, %72 ], [ %126, %117 ]
  %119 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %118, i32 2
  store i16* %110, i16** %119, align 8
  %120 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %118, i32 3
  store i16* %111, i16** %120, align 8
  %121 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %118, i32 4
  store i16* %112, i16** %121, align 8
  %122 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %118, i32 5
  store i16* %113, i16** %122, align 8
  %123 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %118, i32 7
  store i16* %114, i16** %123, align 8
  %124 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %118, i32 6
  store i16* %115, i16** %124, align 8
  %125 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %118, i32 8
  store i16 %116, i16* %125, align 8
  %126 = add nuw nsw i64 %118, 1
  %127 = icmp eq i64 %126, 16
  br i1 %127, label %128, label %117

128:                                              ; preds = %117
  %129 = load i16, i16* %60, align 2
  %130 = sext i16 %129 to i32
  %131 = load i32, i32* %100, align 4
  %132 = load i32, i32* %102, align 32
  %133 = add nsw i32 %132, %131
  %134 = load i32, i32* %105, align 32
  %135 = add nsw i32 %133, %134
  %136 = mul nsw i32 %135, %130
  %137 = lshr i32 %136, 7
  %138 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 8, i64 %48, i64 0
  %139 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 17, i64 %48, i64 0
  %140 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 9, i64 %48, i64 0
  %141 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 10, i64 %48, i64 0
  %142 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 11, i64 %48, i64 0
  %143 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 14, i64 %48, i64 0
  %144 = trunc i32 %137 to i16
  %145 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 16, i32 2
  store i16* %138, i16** %145, align 8
  %146 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 16, i32 3
  store i16* %139, i16** %146, align 8
  %147 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 16, i32 4
  store i16* %140, i16** %147, align 8
  %148 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 16, i32 5
  store i16* %141, i16** %148, align 8
  %149 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 16, i32 7
  store i16* %142, i16** %149, align 8
  %150 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 16, i32 6
  store i16* %143, i16** %150, align 8
  %151 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 16, i32 8
  store i16 %144, i16* %151, align 8
  %152 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 17, i32 2
  store i16* %138, i16** %152, align 8
  %153 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 17, i32 3
  store i16* %139, i16** %153, align 8
  %154 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 17, i32 4
  store i16* %140, i16** %154, align 8
  %155 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 17, i32 5
  store i16* %141, i16** %155, align 8
  %156 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 17, i32 7
  store i16* %142, i16** %156, align 8
  %157 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 17, i32 6
  store i16* %143, i16** %157, align 8
  %158 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 17, i32 8
  store i16 %144, i16* %158, align 8
  %159 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 18, i32 2
  store i16* %138, i16** %159, align 8
  %160 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 18, i32 3
  store i16* %139, i16** %160, align 8
  %161 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 18, i32 4
  store i16* %140, i16** %161, align 8
  %162 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 18, i32 5
  store i16* %141, i16** %162, align 8
  %163 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 18, i32 7
  store i16* %142, i16** %163, align 8
  %164 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 18, i32 6
  store i16* %143, i16** %164, align 8
  %165 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 18, i32 8
  store i16 %144, i16* %165, align 8
  %166 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 19, i32 2
  store i16* %138, i16** %166, align 8
  %167 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 19, i32 3
  store i16* %139, i16** %167, align 8
  %168 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 19, i32 4
  store i16* %140, i16** %168, align 8
  %169 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 19, i32 5
  store i16* %141, i16** %169, align 8
  %170 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 19, i32 7
  store i16* %142, i16** %170, align 8
  %171 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 19, i32 6
  store i16* %143, i16** %171, align 8
  %172 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 19, i32 8
  store i16 %144, i16* %172, align 8
  %173 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 20, i32 2
  store i16* %138, i16** %173, align 8
  %174 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 20, i32 3
  store i16* %139, i16** %174, align 8
  %175 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 20, i32 4
  store i16* %140, i16** %175, align 8
  %176 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 20, i32 5
  store i16* %141, i16** %176, align 8
  %177 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 20, i32 7
  store i16* %142, i16** %177, align 8
  %178 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 20, i32 6
  store i16* %143, i16** %178, align 8
  %179 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 20, i32 8
  store i16 %144, i16* %179, align 8
  %180 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 21, i32 2
  store i16* %138, i16** %180, align 8
  %181 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 21, i32 3
  store i16* %139, i16** %181, align 8
  %182 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 21, i32 4
  store i16* %140, i16** %182, align 8
  %183 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 21, i32 5
  store i16* %141, i16** %183, align 8
  %184 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 21, i32 7
  store i16* %142, i16** %184, align 8
  %185 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 21, i32 6
  store i16* %143, i16** %185, align 8
  %186 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 21, i32 8
  store i16 %144, i16* %186, align 8
  %187 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 22, i32 2
  store i16* %138, i16** %187, align 8
  %188 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 22, i32 3
  store i16* %139, i16** %188, align 8
  %189 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 22, i32 4
  store i16* %140, i16** %189, align 8
  %190 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 22, i32 5
  store i16* %141, i16** %190, align 8
  %191 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 22, i32 7
  store i16* %142, i16** %191, align 8
  %192 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 22, i32 6
  store i16* %143, i16** %192, align 8
  %193 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 22, i32 8
  store i16 %144, i16* %193, align 8
  %194 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 23, i32 2
  store i16* %138, i16** %194, align 8
  %195 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 23, i32 3
  store i16* %139, i16** %195, align 8
  %196 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 23, i32 4
  store i16* %140, i16** %196, align 8
  %197 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 23, i32 5
  store i16* %141, i16** %197, align 8
  %198 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 23, i32 7
  store i16* %142, i16** %198, align 8
  %199 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 23, i32 6
  store i16* %143, i16** %199, align 8
  %200 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 23, i32 8
  store i16 %144, i16* %200, align 8
  %201 = load i16, i16* %59, align 2
  %202 = sext i16 %201 to i32
  %203 = load i32, i32* %100, align 4
  %204 = sdiv i32 %203, 2
  %205 = load i32, i32* %102, align 32
  %206 = add nsw i32 %204, %205
  %207 = load i32, i32* %105, align 32
  %208 = add nsw i32 %206, %207
  %209 = mul nsw i32 %208, %202
  %210 = lshr i32 %209, 7
  %211 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 16, i64 %48, i64 0
  %212 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 24, i32 3
  store i16* %211, i16** %212, align 8
  %213 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 4, i64 %48, i64 0
  %214 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 24, i32 2
  store i16* %213, i16** %214, align 8
  %215 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 5, i64 %48, i64 0
  %216 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 24, i32 4
  store i16* %215, i16** %216, align 8
  %217 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 6, i64 %48, i64 0
  %218 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 24, i32 5
  store i16* %217, i16** %218, align 8
  %219 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 7, i64 %48, i64 0
  %220 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 24, i32 7
  store i16* %219, i16** %220, align 8
  %221 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 13, i64 %48, i64 0
  %222 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 24, i32 6
  store i16* %221, i16** %222, align 8
  %223 = trunc i32 %210 to i16
  %224 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 24, i32 8
  store i16 %223, i16* %224, align 8
  %225 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 40
  store i32 %40, i32* %225, align 4
  %226 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 64
  store i32 %203, i32* %226, align 8
  br label %301

227:                                              ; preds = %42
  %228 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 64
  %229 = load i32, i32* %228, align 8
  %230 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 65
  %231 = load i32, i32* %230, align 4
  %232 = icmp eq i32 %229, %231
  br i1 %232, label %236, label %233

233:                                              ; preds = %227
  %234 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 62
  %235 = load i32, i32* %234, align 32
  br label %248

236:                                              ; preds = %227
  %237 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 63
  %238 = load i32, i32* %237, align 4
  %239 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 62
  %240 = load i32, i32* %239, align 32
  %241 = icmp eq i32 %238, %240
  br i1 %241, label %242, label %248

242:                                              ; preds = %236
  %243 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 22
  %244 = load i32, i32* %243, align 4
  %245 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 21
  %246 = load i32, i32* %245, align 32
  %247 = icmp eq i32 %244, %246
  br i1 %247, label %306, label %248

248:                                              ; preds = %233, %242, %236
  %249 = phi i32 [ %235, %233 ], [ %238, %242 ], [ %240, %236 ]
  %250 = sext i32 %40 to i64
  %251 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 2, i64 %250, i64 1
  %252 = load i16, i16* %251, align 2
  %253 = sext i16 %252 to i32
  %254 = add nsw i32 %249, %231
  %255 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 21
  %256 = load i32, i32* %255, align 32
  %257 = add nsw i32 %254, %256
  %258 = mul nsw i32 %257, %253
  %259 = lshr i32 %258, 7
  %260 = trunc i32 %259 to i16
  %261 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 0, i32 8
  store i16 %260, i16* %261, align 8
  %262 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 1, i32 8
  store i16 %260, i16* %262, align 8
  %263 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 2, i32 8
  store i16 %260, i16* %263, align 8
  %264 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 3, i32 8
  store i16 %260, i16* %264, align 8
  %265 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 4, i32 8
  store i16 %260, i16* %265, align 8
  %266 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 5, i32 8
  store i16 %260, i16* %266, align 8
  %267 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 6, i32 8
  store i16 %260, i16* %267, align 8
  %268 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 7, i32 8
  store i16 %260, i16* %268, align 8
  %269 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 8, i32 8
  store i16 %260, i16* %269, align 8
  %270 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 9, i32 8
  store i16 %260, i16* %270, align 8
  %271 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 10, i32 8
  store i16 %260, i16* %271, align 8
  %272 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 11, i32 8
  store i16 %260, i16* %272, align 8
  %273 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 12, i32 8
  store i16 %260, i16* %273, align 8
  %274 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 13, i32 8
  store i16 %260, i16* %274, align 8
  %275 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 14, i32 8
  store i16 %260, i16* %275, align 8
  %276 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 15, i32 8
  store i16 %260, i16* %276, align 8
  %277 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 4, i64 %250, i64 1
  %278 = load i16, i16* %277, align 2
  %279 = sext i16 %278 to i32
  %280 = mul nsw i32 %257, %279
  %281 = lshr i32 %280, 7
  %282 = trunc i32 %281 to i16
  %283 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 16, i32 8
  store i16 %282, i16* %283, align 8
  %284 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 17, i32 8
  store i16 %282, i16* %284, align 8
  %285 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 18, i32 8
  store i16 %282, i16* %285, align 8
  %286 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 19, i32 8
  store i16 %282, i16* %286, align 8
  %287 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 20, i32 8
  store i16 %282, i16* %287, align 8
  %288 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 21, i32 8
  store i16 %282, i16* %288, align 8
  %289 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 22, i32 8
  store i16 %282, i16* %289, align 8
  %290 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 23, i32 8
  store i16 %282, i16* %290, align 8
  %291 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 3, i64 %250, i64 1
  %292 = load i16, i16* %291, align 2
  %293 = sext i16 %292 to i32
  %294 = sdiv i32 %231, 2
  %295 = add nsw i32 %249, %294
  %296 = add nsw i32 %295, %256
  %297 = mul nsw i32 %296, %293
  %298 = lshr i32 %297, 7
  %299 = trunc i32 %298 to i16
  %300 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 24, i32 8
  store i16 %299, i16* %300, align 8
  store i32 %231, i32* %228, align 8
  br label %301

301:                                              ; preds = %128, %248
  %302 = phi i32 [ %249, %248 ], [ %205, %128 ]
  %303 = phi i32 [ %256, %248 ], [ %207, %128 ]
  %304 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 63
  store i32 %302, i32* %304, align 4
  %305 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 22
  store i32 %303, i32* %305, align 4
  br label %306

306:                                              ; preds = %301, %242
  ret void

307:                                              ; preds = %61
  %308 = load i16, i16* %58, align 2
  %309 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 5, i64 %70
  store i16 %308, i16* %309, align 2
  %310 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 6, i64 %70
  store i16 %308, i16* %310, align 2
  %311 = load i16, i16* %59, align 2
  %312 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 7, i64 %70
  store i16 %311, i16* %312, align 2
  %313 = load i16, i16* %60, align 2
  %314 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 8, i64 %70
  store i16 %313, i16* %314, align 2
  %315 = add nuw nsw i64 %62, 2
  br label %61
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_update_zbin_extra(%struct.VP8_COMP* nocapture readonly, %struct.macroblock* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 40
  %4 = load i32, i32* %3, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 2, i64 %5, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = sext i16 %7 to i32
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 65
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 62
  %12 = load i32, i32* %11, align 32
  %13 = add nsw i32 %12, %10
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 21
  %15 = load i32, i32* %14, align 32
  %16 = add nsw i32 %13, %15
  %17 = mul nsw i32 %16, %8
  %18 = lshr i32 %17, 7
  %19 = trunc i32 %18 to i16
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 0, i32 8
  store i16 %19, i16* %20, align 8
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 1, i32 8
  store i16 %19, i16* %21, align 8
  %22 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 2, i32 8
  store i16 %19, i16* %22, align 8
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 3, i32 8
  store i16 %19, i16* %23, align 8
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 4, i32 8
  store i16 %19, i16* %24, align 8
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 5, i32 8
  store i16 %19, i16* %25, align 8
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 6, i32 8
  store i16 %19, i16* %26, align 8
  %27 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 7, i32 8
  store i16 %19, i16* %27, align 8
  %28 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 8, i32 8
  store i16 %19, i16* %28, align 8
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 9, i32 8
  store i16 %19, i16* %29, align 8
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 10, i32 8
  store i16 %19, i16* %30, align 8
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 11, i32 8
  store i16 %19, i16* %31, align 8
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 12, i32 8
  store i16 %19, i16* %32, align 8
  %33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 13, i32 8
  store i16 %19, i16* %33, align 8
  %34 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 14, i32 8
  store i16 %19, i16* %34, align 8
  %35 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 15, i32 8
  store i16 %19, i16* %35, align 8
  %36 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 4, i64 %5, i64 1
  %37 = load i16, i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = mul nsw i32 %16, %38
  %40 = lshr i32 %39, 7
  %41 = trunc i32 %40 to i16
  %42 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 16, i32 8
  store i16 %41, i16* %42, align 8
  %43 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 17, i32 8
  store i16 %41, i16* %43, align 8
  %44 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 18, i32 8
  store i16 %41, i16* %44, align 8
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 19, i32 8
  store i16 %41, i16* %45, align 8
  %46 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 20, i32 8
  store i16 %41, i16* %46, align 8
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 21, i32 8
  store i16 %41, i16* %47, align 8
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 22, i32 8
  store i16 %41, i16* %48, align 8
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 23, i32 8
  store i16 %41, i16* %49, align 8
  %50 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 3, i64 %5, i64 1
  %51 = load i16, i16* %50, align 2
  %52 = sext i16 %51 to i32
  %53 = sdiv i32 %10, 2
  %54 = add nsw i32 %12, %53
  %55 = add nsw i32 %54, %15
  %56 = mul nsw i32 %55, %52
  %57 = lshr i32 %56, 7
  %58 = trunc i32 %57 to i16
  %59 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 24, i32 8
  store i16 %58, i16* %59, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8cx_frame_init_quantizer(%struct.VP8_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18
  %3 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 62
  store i32 0, i32* %3, align 32
  tail call void @vp8cx_mb_init_quantizer(%struct.VP8_COMP* %0, %struct.macroblock* %2, i32 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_set_quantizer(%struct.VP8_COMP*, i32) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 34
  store i32 %1, i32* %3, align 16
  %4 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 35
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 37
  store i32 0, i32* %5, align 4
  %6 = icmp slt i32 %1, 4
  %7 = sub nsw i32 4, %1
  %8 = select i1 %6, i32 %7, i32 0
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 36
  %10 = load i32, i32* %9, align 8
  %11 = icmp ne i32 %10, %8
  store i32 %8, i32* %9, align 8
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 10
  %13 = load i32, i32* %12, align 4
  %14 = icmp ne i32 %13, 0
  %15 = icmp sgt i32 %1, 40
  %16 = and i1 %15, %14
  br i1 %16, label %17, label %24

17:                                               ; preds = %2
  %18 = sitofp i32 %1 to double
  %19 = fmul double %18, 1.500000e-01
  %20 = fptosi double %19 to i32
  %21 = sub nsw i32 0, %20
  %22 = icmp sgt i32 %21, -15
  %23 = select i1 %22, i32 %21, i32 -15
  br label %24

24:                                               ; preds = %17, %2
  %25 = phi i32 [ %23, %17 ], [ 0, %2 ]
  %26 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 38
  %27 = load i32, i32* %26, align 16
  %28 = icmp ne i32 %27, %25
  %29 = or i1 %11, %28
  store i32 %25, i32* %26, align 16
  %30 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 39
  store i32 %25, i32* %30, align 4
  %31 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 135, i64 0, i64 0
  %32 = load i8, i8* %31, align 8
  %33 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 28, i64 0, i64 0
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 135, i64 0, i64 1
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 28, i64 0, i64 1
  store i8 %35, i8* %36, align 1
  %37 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 135, i64 0, i64 2
  %38 = load i8, i8* %37, align 2
  %39 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 28, i64 0, i64 2
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 135, i64 0, i64 3
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 28, i64 0, i64 3
  store i8 %41, i8* %42, align 1
  br i1 %29, label %43, label %44

43:                                               ; preds = %24
  tail call void @vp8cx_init_quantizer(%struct.VP8_COMP* %0)
  br label %44

44:                                               ; preds = %43, %24
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
