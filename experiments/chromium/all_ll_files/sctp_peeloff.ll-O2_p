; ModuleID = '../../third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_peeloff.c'
source_filename = "../../third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_peeloff.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.socket = type { i32, i16, i16, i16, i16, i32, i8*, i32, %struct.socket*, %struct.anon, %struct.anon.0, %struct.anon.1, i16, i16, i16, i16, %union.pthread_cond_t, i16, %struct.sigio*, i64, %struct.anon.5, %struct.sockbuf, %struct.sockbuf, void (%struct.socket*, i8*, i32)*, i8*, %struct.ucred*, %struct.label*, %struct.label*, i32, i8*, %struct.so_accf* }
%struct.anon = type { %struct.socket*, %struct.socket** }
%struct.anon.0 = type { %struct.socket*, %struct.socket** }
%struct.anon.1 = type { %struct.socket*, %struct.socket** }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.3, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.3 = type { i64 }
%struct.sigio = type opaque
%struct.anon.5 = type { %struct.aiocblist*, %struct.aiocblist** }
%struct.aiocblist = type opaque
%struct.sockbuf = type { %union.pthread_cond_t, %union.pthread_mutex_t, i16, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.mbuf = type { %struct.m_hdr, %union.anon.6 }
%struct.m_hdr = type { %struct.mbuf*, %struct.mbuf*, i8*, i32, i32, i16, [6 x i8] }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { %struct.pkthdr, %union.anon.9 }
%struct.pkthdr = type { %struct.ifnet*, i8*, i32, i32, i32, i16, i16, %struct.packet_tags }
%struct.ifnet = type opaque
%struct.packet_tags = type { %struct.m_tag* }
%struct.m_tag = type { %struct.anon.8, i16, i16, i32, void (%struct.m_tag*)* }
%struct.anon.8 = type { %struct.m_tag* }
%union.anon.9 = type { %struct.m_ext, [128 x i8] }
%struct.m_ext = type { i8*, void (i8*, i8*)*, i8*, i32, i32*, i32 }
%struct.ucred = type { i32, i32, i32 }
%struct.label = type opaque
%struct.so_accf = type { %struct.accept_filter*, i8*, i8* }
%struct.accept_filter = type opaque
%struct.sctp_inpcb = type { %union.anon.10, %struct.sctp_readhead, %struct.anon.32, %struct.anon.33, i32, %struct.sctpladdr, %struct.sctp_laddr*, %struct.socket*, i64, i32, i32, %struct.sctp_pcb, %struct.sctpasochead*, i64, %struct.sctpasochead, %struct.sctp_iterator*, i32, i32, i32, i32, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %struct.sctp_nonpad_sndrcvinfo, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, %union.pthread_mutex_t, %union.pthread_mutex_t, %union.pthread_mutex_t, i32, i32, i16, i32, i32, i32, i32, %struct.sctpasochead*, i64, i32, i8*, i32 (%struct.socket*, %union.sctp_sockstore*, i8*, i64, %struct.sctp_rcvinfo*, i32, i8*)*, i32, i32 (%struct.socket*, i32, i8*)* }
%union.anon.10 = type { %struct.inpcb, [24 x i8] }
%struct.inpcb = type { %struct.anon.11, %struct.anon.12, i8*, %struct.inpcbinfo*, %struct.socket*, i32, i32, i8, i8, i8, i8, i32, [2 x i8*], %struct.in_conninfo, %struct.label*, %struct.inpcbpolicy*, %struct.anon.17, %struct.anon.18, %struct.anon.19, %struct.inpcbport*, %struct.mtx }
%struct.anon.11 = type { %struct.inpcb*, %struct.inpcb** }
%struct.anon.12 = type { %struct.inpcb*, %struct.inpcb** }
%struct.inpcbinfo = type { %struct.inpcbhead*, i32, %struct.inpcbhead*, i64, %struct.inpcbporthead*, i64, i16, i16, i16, %struct.uma_zone*, %struct.mtx, [2 x i8*] }
%struct.inpcbhead = type { %struct.inpcb* }
%struct.inpcbporthead = type { %struct.inpcbport* }
%struct.uma_zone = type opaque
%struct.in_conninfo = type { i8, i8, i16, %struct.in_endpoints }
%struct.in_endpoints = type { i16, i16, %union.anon.14, %union.anon.16 }
%union.anon.14 = type { %struct.in_addr_4in6 }
%struct.in_addr_4in6 = type { [3 x i32], %struct.in_addr }
%struct.in_addr = type { i32 }
%union.anon.16 = type { %struct.in_addr_4in6 }
%struct.inpcbpolicy = type opaque
%struct.anon.17 = type { i8, %struct.mbuf*, %struct.ip_moptions* }
%struct.ip_moptions = type opaque
%struct.anon.18 = type { %struct.mbuf*, %struct.ip6_pktopts*, %struct.icmp6_filter*, i32, i16 }
%struct.ip6_pktopts = type opaque
%struct.icmp6_filter = type opaque
%struct.anon.19 = type { %struct.inpcb*, %struct.inpcb** }
%struct.inpcbport = type { %struct.anon.13, %struct.inpcbhead, i16 }
%struct.anon.13 = type { %struct.inpcbport*, %struct.inpcbport** }
%struct.mtx = type { i32 }
%struct.sctp_readhead = type { %struct.sctp_queued_to_read*, %struct.sctp_queued_to_read** }
%struct.sctp_queued_to_read = type { i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.sctp_nets*, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, %struct.sctp_tcb*, %struct.anon.28, %struct.anon.29, %struct.sctpchunk_listhead, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.sctp_nets = type { %struct.anon.20, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_net_route, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, %struct.sctp_timer, %struct.timeval, %union.cc_control_data, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.timeval, i32, i32, i32, i16, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.anon.20 = type { %struct.sctp_nets*, %struct.sctp_nets** }
%struct.sctp_net_route = type { %struct.sctp_rtentry*, %union.sctp_sockstore, %struct.sctp_ifa* }
%struct.sctp_rtentry = type { %struct.ifnet*, %struct.ifaddr*, %struct.sctp_rt_metrics_lite, i64, %struct.mtx }
%struct.ifaddr = type { %struct.sockaddr, %union.anon.22, %struct.iface*, %struct.ifaddr* }
%struct.sockaddr = type { i16, [14 x i8] }
%union.anon.22 = type { %struct.sockaddr }
%struct.iface = type opaque
%struct.sctp_rt_metrics_lite = type { i32 }
%union.sctp_sockstore = type { %struct.sockaddr_conn, [16 x i8] }
%struct.sockaddr_conn = type { i16, i16, i8* }
%struct.sctp_ifa = type { %struct.anon.23, %struct.anon.24, %struct.sctp_ifn*, i8*, %union.sctp_sockstore, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.anon.23 = type { %struct.sctp_ifa*, %struct.sctp_ifa** }
%struct.anon.24 = type { %struct.sctp_ifa*, %struct.sctp_ifa** }
%struct.sctp_ifn = type { %struct.sctp_ifalist, %struct.sctp_vrf*, %struct.anon.26, %struct.anon.27, i8*, i32, i32, i32, i32, i32, i32, i32, i32, [16 x i8] }
%struct.sctp_ifalist = type { %struct.sctp_ifa* }
%struct.sctp_vrf = type { %struct.anon.25, %struct.sctp_ifalist*, %struct.sctp_ifnlist, i32, i32, i32, i32, i64, i32 }
%struct.anon.25 = type { %struct.sctp_vrf*, %struct.sctp_vrf** }
%struct.sctp_ifnlist = type { %struct.sctp_ifn* }
%struct.anon.26 = type { %struct.sctp_ifn*, %struct.sctp_ifn** }
%struct.anon.27 = type { %struct.sctp_ifn*, %struct.sctp_ifn** }
%struct.sctp_timer = type { %struct.sctp_callout, i32, i8*, i8*, i8*, i8*, i32, i32 }
%struct.sctp_callout = type { %struct.anon.21, i32, i8*, void (i8*)*, i32 }
%struct.anon.21 = type { %struct.sctp_callout*, %struct.sctp_callout** }
%union.cc_control_data = type { %struct.rtcc_cc }
%struct.rtcc_cc = type { %struct.timeval, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i8, i8, i8, i8, i8, i8 }
%struct.timeval = type { i64, i64 }
%struct.sctp_tcb = type { %struct.socket*, %struct.sctp_inpcb*, %struct.anon.46, %struct.anon.47, %struct.anon.48, %struct.anon.49, %struct.sctp_block_entry*, %struct.sctp_association, i32, i32, i32, i32, i16, i16, %union.pthread_mutex_t, %union.pthread_mutex_t }
%struct.anon.46 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.anon.47 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.anon.48 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.anon.49 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.sctp_block_entry = type { i32 }
%struct.sctp_association = type { i32, %struct.sctp_asconf_addrhead, %struct.timeval, %struct.timeval, %struct.timeval, %struct.timeval, %struct.sctp_nonpad_sndrcvinfo, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctpladdr, %struct.sctp_ifa*, %struct.sctp_nets*, %struct.sctpnetlisthead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.scheduling_data, %struct.sctp_iterator*, %struct.sctp_asconf_ackhead, %struct.sctp_tmit_chunk*, %struct.sctp_laddr*, %struct.sctp_stream_in*, %struct.sctp_stream_out*, i8*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_resethead, %struct.sctp_readhead, %struct.sctp_cc_functions, i32, %struct.sctp_ss_functions, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i32, i32, i32, %struct.sctp_queued_to_read*, i32, i32, i32, [2 x i32], [2 x i32], [2 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, %struct.sctp_auth_chklist*, %struct.sctp_auth_chklist*, %struct.sctp_hmaclist*, %struct.sctp_hmaclist*, %struct.sctp_keyhead, %struct.sctp_authinformation, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i8, i8, i8, i32, i32, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %struct.sctp_scoping, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], i8, i8, i64, i32, i16, i32, i32, i32, i32, i32, i32, i32, i32, %struct.timeval, %struct.timeval, [4 x i64], [4 x i64] }
%struct.sctp_asconf_addrhead = type { %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** }
%struct.sctp_asconf_addr = type { %struct.anon.37, %struct.sctp_asconf_addr_param, %struct.sctp_ifa*, i8, i8 }
%struct.anon.37 = type { %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** }
%struct.sctp_asconf_addr_param = type { %struct.sctp_asconf_paramhdr, %struct.sctp_ipv6addr_param }
%struct.sctp_asconf_paramhdr = type { %struct.sctp_paramhdr, i32 }
%struct.sctp_paramhdr = type { i16, i16 }
%struct.sctp_ipv6addr_param = type { %struct.sctp_paramhdr, [16 x i8] }
%struct.sctpnetlisthead = type { %struct.sctp_nets*, %struct.sctp_nets** }
%struct.scheduling_data = type { %struct.sctp_stream_out*, %struct.sctp_stream_out*, %union.anon.43 }
%union.anon.43 = type { %struct.sctpwheel_listhead }
%struct.sctpwheel_listhead = type { %struct.sctp_stream_out*, %struct.sctp_stream_out** }
%struct.sctp_asconf_ackhead = type { %struct.sctp_asconf_ack*, %struct.sctp_asconf_ack** }
%struct.sctp_asconf_ack = type { %struct.anon.44, i32, %struct.sctp_nets*, %struct.mbuf*, i16 }
%struct.anon.44 = type { %struct.sctp_asconf_ack*, %struct.sctp_asconf_ack** }
%struct.sctp_tmit_chunk = type { %union.anon.30, %struct.sctp_association*, %struct.timeval, %struct.mbuf*, %struct.mbuf*, %struct.sctp_nets*, %struct.anon.31, i32, i16, i16, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8 }
%union.anon.30 = type { %struct.sctp_data_chunkrec }
%struct.sctp_data_chunkrec = type { i32, i32, i16, i32, i32, i32, i32, %struct.timeval, i32, i8, i8, i8, i8, i8 }
%struct.anon.31 = type { %struct.sctp_tmit_chunk*, %struct.sctp_tmit_chunk** }
%struct.sctp_stream_in = type { %struct.sctp_readhead, %struct.sctp_readhead, i32, i16, i8, i8 }
%struct.sctp_stream_out = type { %struct.sctp_streamhead, %union.scheduling_parameters, i32, [1 x i32], [1 x i32], i32, i32, i16, i8, i8 }
%struct.sctp_streamhead = type { %struct.sctp_stream_queue_pending*, %struct.sctp_stream_queue_pending** }
%struct.sctp_stream_queue_pending = type { %struct.mbuf*, %struct.mbuf*, %struct.timeval, %struct.sctp_nets*, %struct.anon.38, %struct.anon.39, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8 }
%struct.anon.38 = type { %struct.sctp_stream_queue_pending*, %struct.sctp_stream_queue_pending** }
%struct.anon.39 = type { %struct.sctp_stream_queue_pending*, %struct.sctp_stream_queue_pending** }
%union.scheduling_parameters = type { %struct.ss_prio }
%struct.ss_prio = type { %struct.anon.41, i16 }
%struct.anon.41 = type { %struct.sctp_stream_out*, %struct.sctp_stream_out** }
%struct.sctp_resethead = type { %struct.sctp_stream_reset_list*, %struct.sctp_stream_reset_list** }
%struct.sctp_stream_reset_list = type { %struct.anon.45, i32, i32, i32, [0 x i16] }
%struct.anon.45 = type { %struct.sctp_stream_reset_list*, %struct.sctp_stream_reset_list** }
%struct.sctp_cc_functions = type { void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_association*, i32, i32, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_association*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, i32, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_pktdrop_chunk*, i32*, i32*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_nets*, %struct.sctp_tmit_chunk*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, i32 (%struct.sctp_tcb*, i32, %struct.sctp_cc_option*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.timeval*)* }
%struct.sctp_pktdrop_chunk = type { %struct.sctp_chunkhdr, i32, i32, i16, i16, [0 x i8] }
%struct.sctp_chunkhdr = type { i8, i8, i16 }
%struct.sctp_cc_option = type { i32, %struct.sctp_assoc_value }
%struct.sctp_assoc_value = type { i32, i32 }
%struct.sctp_ss_functions = type { void (%struct.sctp_tcb*, %struct.sctp_association*, i32)*, void (%struct.sctp_tcb*, %struct.sctp_association*, i32, i32)*, void (%struct.sctp_tcb*, %struct.sctp_stream_out*, %struct.sctp_stream_out*)*, void (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, %struct.sctp_stream_queue_pending*, i32)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*)*, void (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, %struct.sctp_stream_queue_pending*, i32)*, %struct.sctp_stream_out* (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_association*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_association*, %struct.sctp_stream_out*, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_association*)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, i16*)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, i16)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*)* }
%struct.sctp_auth_chklist = type { [256 x i8], i8 }
%struct.sctp_hmaclist = type { i16, i16, [0 x i16] }
%struct.sctp_keyhead = type { %struct.sctp_shared_key* }
%struct.sctp_shared_key = type { %struct.anon.35, %struct.sctp_key*, i32, i16, i8 }
%struct.anon.35 = type { %struct.sctp_shared_key*, %struct.sctp_shared_key** }
%struct.sctp_key = type { i32, [0 x i8] }
%struct.sctp_authinformation = type { %struct.sctp_key*, i32, %struct.sctp_key*, %struct.sctp_key*, %struct.sctp_key*, i16, i16, i16 }
%struct.sctp_scoping = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.anon.28 = type { %struct.sctp_queued_to_read*, %struct.sctp_queued_to_read** }
%struct.anon.29 = type { %struct.sctp_queued_to_read*, %struct.sctp_queued_to_read** }
%struct.sctpchunk_listhead = type { %struct.sctp_tmit_chunk*, %struct.sctp_tmit_chunk** }
%struct.anon.32 = type { %struct.sctp_inpcb*, %struct.sctp_inpcb** }
%struct.anon.33 = type { %struct.sctp_inpcb*, %struct.sctp_inpcb** }
%struct.sctpladdr = type { %struct.sctp_laddr* }
%struct.sctp_laddr = type { %struct.anon.34, %struct.sctp_ifa*, i32, %struct.timeval }
%struct.anon.34 = type { %struct.sctp_laddr*, %struct.sctp_laddr** }
%struct.sctp_pcb = type { i32, [2 x [8 x i32]], i32, [7 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.sctp_keyhead, %struct.sctp_auth_chklist*, %struct.sctp_hmaclist*, i16, i32, i16, i16, i16, i16, i16, i16, i32, [20 x i8], [20 x i8], %struct.sctp_timer, i32, i32, i32, i32, i8, i32, i32, i32, i8, i8, i8, i16 }
%struct.sctpasochead = type { %struct.sctp_tcb* }
%struct.sctp_iterator = type { %struct.anon.36, %struct.sctp_timer, %struct.sctp_inpcb*, %struct.sctp_tcb*, %struct.sctp_inpcb*, void (%struct.sctp_inpcb*, %struct.sctp_tcb*, i8*, i32)*, i32 (%struct.sctp_inpcb*, i8*, i32)*, i32 (%struct.sctp_inpcb*, i8*, i32)*, void (i8*, i32)*, i8*, i32, i32, i32, i32, i32, i8, i8 }
%struct.anon.36 = type { %struct.sctp_iterator*, %struct.sctp_iterator** }
%struct.sctp_nonpad_sndrcvinfo = type { i16, i16, i16, i32, i32, i32, i32, i32, i32, i16, i16 }
%struct.sctp_rcvinfo = type { i16, i16, i16, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @sctp_can_peel_off(%struct.socket* readonly, i32) local_unnamed_addr #0 {
  %3 = icmp eq %struct.socket* %0, null
  br i1 %3, label %25, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.socket, %struct.socket* %0, i64 0, i32 6
  %6 = bitcast i8** %5 to %struct.sctp_inpcb**
  %7 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %6, align 8
  %8 = icmp eq %struct.sctp_inpcb* %7, null
  br i1 %8, label %25, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %7, i64 0, i32 9
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 4194306
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %25

14:                                               ; preds = %9
  %15 = tail call %struct.sctp_tcb* @sctp_findassociation_ep_asocid(%struct.sctp_inpcb* nonnull %7, i32 %1, i32 1) #3
  %16 = icmp eq %struct.sctp_tcb* %15, null
  br i1 %16, label %25, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %15, i64 0, i32 7, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = and i32 %19, 126
  %21 = icmp eq i32 %20, 0
  %22 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %15, i64 0, i32 14
  %23 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %22) #3
  %24 = select i1 %21, i32 107, i32 0
  br label %25

25:                                               ; preds = %17, %14, %9, %4, %2
  %26 = phi i32 [ 9, %2 ], [ 14, %4 ], [ 95, %9 ], [ 2, %14 ], [ %24, %17 ]
  ret i32 %26
}

declare %struct.sctp_tcb* @sctp_findassociation_ep_asocid(%struct.sctp_inpcb*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @sctp_do_peeloff(%struct.socket* nocapture readonly, %struct.socket*, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.socket, %struct.socket* %0, i64 0, i32 6
  %5 = bitcast i8** %4 to %struct.sctp_inpcb**
  %6 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %5, align 8
  %7 = icmp eq %struct.sctp_inpcb* %6, null
  br i1 %7, label %117, label %8

8:                                                ; preds = %3
  %9 = tail call %struct.sctp_tcb* @sctp_findassociation_ep_asocid(%struct.sctp_inpcb* nonnull %6, i32 %2, i32 1) #3
  %10 = icmp eq %struct.sctp_tcb* %9, null
  br i1 %10, label %117, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %9, i64 0, i32 7, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 126
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %9, i64 0, i32 14
  %18 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %17) #3
  br label %117

19:                                               ; preds = %11
  %20 = getelementptr inbounds %struct.socket, %struct.socket* %1, i64 0, i32 6
  %21 = bitcast i8** %20 to %struct.sctp_inpcb**
  %22 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %21, align 8
  %23 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 9
  %24 = load i32, i32* %23, align 8
  %25 = and i32 %24, -2046820348
  %26 = or i32 %25, 6291457
  %27 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 9
  store i32 %26, i32* %27, align 8
  %28 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 7
  store %struct.socket* %1, %struct.socket** %28, align 8
  %29 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 8
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 8
  store i64 %30, i64* %31, align 8
  %32 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 10
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 10
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 16
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 16
  store i32 %36, i32* %37, align 8
  %38 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 21
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 21
  store i32 %39, i32* %40, align 4
  %41 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 22
  %42 = load i8, i8* %41, align 8
  %43 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 22
  store i8 %42, i8* %43, align 8
  %44 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 23
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 23
  store i8 %45, i8* %46, align 1
  %47 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 24
  %48 = load i8, i8* %47, align 2
  %49 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 24
  store i8 %48, i8* %49, align 2
  %50 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 26
  %51 = load i8, i8* %50, align 4
  %52 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 26
  store i8 %51, i8* %52, align 4
  %53 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 27
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 27
  store i8 %54, i8* %55, align 1
  %56 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 28
  %57 = load i8, i8* %56, align 2
  %58 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 28
  store i8 %57, i8* %58, align 2
  %59 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 29
  %60 = load i8, i8* %59, align 1
  %61 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 29
  store i8 %60, i8* %61, align 1
  %62 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 17
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 17
  store i32 %63, i32* %64, align 4
  %65 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 18
  %66 = load i32, i32* %65, align 8
  %67 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 18
  store i32 %66, i32* %67, align 8
  %68 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 19
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 19
  store i32 %69, i32* %70, align 4
  %71 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 20
  %72 = load i8, i8* %71, align 8
  %73 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 20
  store i8 %72, i8* %73, align 8
  %74 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 15
  store %struct.sctp_iterator* null, %struct.sctp_iterator** %74, align 8
  %75 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 11, i32 15
  %76 = load %struct.sctp_hmaclist*, %struct.sctp_hmaclist** %75, align 8
  %77 = icmp eq %struct.sctp_hmaclist* %76, null
  br i1 %77, label %79, label %78

78:                                               ; preds = %19
  tail call void @sctp_free_hmaclist(%struct.sctp_hmaclist* nonnull %76) #3
  br label %79

79:                                               ; preds = %19, %78
  %80 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 11, i32 15
  %81 = load %struct.sctp_hmaclist*, %struct.sctp_hmaclist** %80, align 8
  %82 = tail call %struct.sctp_hmaclist* @sctp_copy_hmaclist(%struct.sctp_hmaclist* %81) #3
  store %struct.sctp_hmaclist* %82, %struct.sctp_hmaclist** %75, align 8
  %83 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 11, i32 14
  %84 = load %struct.sctp_auth_chklist*, %struct.sctp_auth_chklist** %83, align 8
  %85 = icmp eq %struct.sctp_auth_chklist* %84, null
  br i1 %85, label %87, label %86

86:                                               ; preds = %79
  tail call void @sctp_free_chunklist(%struct.sctp_auth_chklist* nonnull %84) #3
  br label %87

87:                                               ; preds = %79, %86
  %88 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 11, i32 14
  %89 = load %struct.sctp_auth_chklist*, %struct.sctp_auth_chklist** %88, align 8
  %90 = tail call %struct.sctp_auth_chklist* @sctp_copy_chunklist(%struct.sctp_auth_chklist* %89) #3
  store %struct.sctp_auth_chklist* %90, %struct.sctp_auth_chklist** %83, align 8
  %91 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 11, i32 13
  %92 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 11, i32 13
  %93 = tail call i32 @sctp_copy_skeylist(%struct.sctp_keyhead* %91, %struct.sctp_keyhead* %92) #3
  %94 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 47
  %95 = bitcast i8** %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 47
  %98 = bitcast i8** %97 to i64*
  store i64 %96, i64* %98, align 8
  %99 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 48
  %100 = bitcast i32 (%struct.socket*, %union.sctp_sockstore*, i8*, i64, %struct.sctp_rcvinfo*, i32, i8*)** %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 48
  %103 = bitcast i32 (%struct.socket*, %union.sctp_sockstore*, i8*, i64, %struct.sctp_rcvinfo*, i32, i8*)** %102 to i64*
  store i64 %101, i64* %103, align 8
  %104 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 50
  %105 = bitcast i32 (%struct.socket*, i32, i8*)** %104 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 50
  %108 = bitcast i32 (%struct.socket*, i32, i8*)** %107 to i64*
  store i64 %106, i64* %108, align 8
  %109 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %6, i64 0, i32 49
  %110 = load i32, i32* %109, align 8
  %111 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %22, i64 0, i32 49
  store i32 %110, i32* %111, align 8
  tail call void @sctp_move_pcb_and_assoc(%struct.sctp_inpcb* nonnull %6, %struct.sctp_inpcb* %22, %struct.sctp_tcb* nonnull %9) #3
  %112 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %9, i64 0, i32 7, i32 120
  %113 = atomicrmw add i32* %112, i32 1 seq_cst
  %114 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %9, i64 0, i32 14
  %115 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %114) #3
  tail call void @sctp_pull_off_control_to_new_inp(%struct.sctp_inpcb* nonnull %6, %struct.sctp_inpcb* %22, %struct.sctp_tcb* nonnull %9, i32 2) #3
  %116 = atomicrmw sub i32* %112, i32 1 seq_cst
  br label %117

117:                                              ; preds = %8, %3, %87, %16
  %118 = phi i32 [ 107, %16 ], [ 0, %87 ], [ 14, %3 ], [ 107, %8 ]
  ret i32 %118
}

declare void @sctp_free_hmaclist(%struct.sctp_hmaclist*) local_unnamed_addr #1

declare %struct.sctp_hmaclist* @sctp_copy_hmaclist(%struct.sctp_hmaclist*) local_unnamed_addr #1

declare void @sctp_free_chunklist(%struct.sctp_auth_chklist*) local_unnamed_addr #1

declare %struct.sctp_auth_chklist* @sctp_copy_chunklist(%struct.sctp_auth_chklist*) local_unnamed_addr #1

declare i32 @sctp_copy_skeylist(%struct.sctp_keyhead*, %struct.sctp_keyhead*) local_unnamed_addr #1

declare void @sctp_move_pcb_and_assoc(%struct.sctp_inpcb*, %struct.sctp_inpcb*, %struct.sctp_tcb*) local_unnamed_addr #1

declare void @sctp_pull_off_control_to_new_inp(%struct.sctp_inpcb*, %struct.sctp_inpcb*, %struct.sctp_tcb*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
