; ModuleID = '../../third_party/libsrtp/crypto/cipher/aes_icm_ossl.c'
source_filename = "../../third_party/libsrtp/crypto/cipher/aes_icm_ossl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.srtp_debug_module_t = type { i32, i8* }
%struct.srtp_cipher_test_case_t = type { i32, i8*, i8*, i32, i8*, i32, i8*, i32, i8*, i32, %struct.srtp_cipher_test_case_t* }
%struct.srtp_cipher_t = type { %struct.srtp_cipher_type_t*, i8*, i32, i32 }
%struct.srtp_cipher_type_t = type { {}*, i32 (%struct.srtp_cipher_t*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i8*, %struct.srtp_cipher_test_case_t*, i32 }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%union.v128_t = type { [2 x i64] }
%struct.engine_st = type opaque

@.str = private unnamed_addr constant [13 x i8] c"aes icm ossl\00", align 1
@srtp_mod_aes_icm = hidden local_unnamed_addr global %struct.srtp_debug_module_t { i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0) }, align 8
@srtp_aes_icm_128_openssl_description = internal constant [35 x i8] c"AES-128 counter mode using openssl\00", align 16
@srtp_aes_icm_128_test_case_0 = internal constant %struct.srtp_cipher_test_case_t { i32 30, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @srtp_aes_icm_128_test_case_0_key, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @srtp_aes_icm_128_test_case_0_nonce, i32 0, i32 0), i32 32, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @srtp_aes_icm_128_test_case_0_plaintext, i32 0, i32 0), i32 32, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @srtp_aes_icm_128_test_case_0_ciphertext, i32 0, i32 0), i32 0, i8* null, i32 0, %struct.srtp_cipher_test_case_t* null }, align 8
@srtp_aes_icm_128 = hidden constant { i32 (%struct.srtp_cipher_t**, i32, i32)*, i32 (%struct.srtp_cipher_t*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i8*, %struct.srtp_cipher_test_case_t*, i32 } { i32 (%struct.srtp_cipher_t**, i32, i32)* @srtp_aes_icm_openssl_alloc, i32 (%struct.srtp_cipher_t*)* @srtp_aes_icm_openssl_dealloc, i32 (i8*, i8*)* @srtp_aes_icm_openssl_context_init, i32 (i8*, i8*, i32)* null, i32 (i8*, i8*, i32*)* @srtp_aes_icm_openssl_encrypt, i32 (i8*, i8*, i32*)* @srtp_aes_icm_openssl_encrypt, i32 (i8*, i8*, i32)* @srtp_aes_icm_openssl_set_iv, i32 (i8*, i8*, i32*)* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @srtp_aes_icm_128_openssl_description, i32 0, i32 0), %struct.srtp_cipher_test_case_t* @srtp_aes_icm_128_test_case_0, i32 1 }, align 8
@srtp_aes_icm_192_openssl_description = internal constant [35 x i8] c"AES-192 counter mode using openssl\00", align 16
@srtp_aes_icm_192_test_case_0 = internal constant %struct.srtp_cipher_test_case_t { i32 38, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @srtp_aes_icm_192_test_case_0_key, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @srtp_aes_icm_192_test_case_0_nonce, i32 0, i32 0), i32 32, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @srtp_aes_icm_192_test_case_0_plaintext, i32 0, i32 0), i32 32, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @srtp_aes_icm_192_test_case_0_ciphertext, i32 0, i32 0), i32 0, i8* null, i32 0, %struct.srtp_cipher_test_case_t* null }, align 8
@srtp_aes_icm_192 = hidden constant { i32 (%struct.srtp_cipher_t**, i32, i32)*, i32 (%struct.srtp_cipher_t*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i8*, %struct.srtp_cipher_test_case_t*, i32 } { i32 (%struct.srtp_cipher_t**, i32, i32)* @srtp_aes_icm_openssl_alloc, i32 (%struct.srtp_cipher_t*)* @srtp_aes_icm_openssl_dealloc, i32 (i8*, i8*)* @srtp_aes_icm_openssl_context_init, i32 (i8*, i8*, i32)* null, i32 (i8*, i8*, i32*)* @srtp_aes_icm_openssl_encrypt, i32 (i8*, i8*, i32*)* @srtp_aes_icm_openssl_encrypt, i32 (i8*, i8*, i32)* @srtp_aes_icm_openssl_set_iv, i32 (i8*, i8*, i32*)* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @srtp_aes_icm_192_openssl_description, i32 0, i32 0), %struct.srtp_cipher_test_case_t* @srtp_aes_icm_192_test_case_0, i32 4 }, align 8
@srtp_aes_icm_256_openssl_description = internal constant [35 x i8] c"AES-256 counter mode using openssl\00", align 16
@srtp_aes_icm_256_test_case_0 = internal constant %struct.srtp_cipher_test_case_t { i32 46, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @srtp_aes_icm_256_test_case_0_key, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @srtp_aes_icm_256_test_case_0_nonce, i32 0, i32 0), i32 32, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @srtp_aes_icm_256_test_case_0_plaintext, i32 0, i32 0), i32 32, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @srtp_aes_icm_256_test_case_0_ciphertext, i32 0, i32 0), i32 0, i8* null, i32 0, %struct.srtp_cipher_test_case_t* null }, align 8
@srtp_aes_icm_256 = hidden constant { i32 (%struct.srtp_cipher_t**, i32, i32)*, i32 (%struct.srtp_cipher_t*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i8*, %struct.srtp_cipher_test_case_t*, i32 } { i32 (%struct.srtp_cipher_t**, i32, i32)* @srtp_aes_icm_openssl_alloc, i32 (%struct.srtp_cipher_t*)* @srtp_aes_icm_openssl_dealloc, i32 (i8*, i8*)* @srtp_aes_icm_openssl_context_init, i32 (i8*, i8*, i32)* null, i32 (i8*, i8*, i32*)* @srtp_aes_icm_openssl_encrypt, i32 (i8*, i8*, i32*)* @srtp_aes_icm_openssl_encrypt, i32 (i8*, i8*, i32)* @srtp_aes_icm_openssl_set_iv, i32 (i8*, i8*, i32*)* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @srtp_aes_icm_256_openssl_description, i32 0, i32 0), %struct.srtp_cipher_test_case_t* @srtp_aes_icm_256_test_case_0, i32 5 }, align 8
@.str.1 = private unnamed_addr constant [42 x i8] c"%s: allocating cipher with key length %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"%s: key:  %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"%s: offset: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"%s: rs0: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"%s: setting iv: %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"%s: set_counter: %s\0A\00", align 1
@srtp_aes_icm_128_test_case_0_key = internal constant [30 x i8] c"+~\15\16(\AE\D2\A6\AB\F7\15\88\09\CFO<\F0\F1\F2\F3\F4\F5\F6\F7\F8\F9\FA\FB\FC\FD", align 16
@srtp_aes_icm_128_test_case_0_nonce = internal global [16 x i8] zeroinitializer, align 16
@srtp_aes_icm_128_test_case_0_plaintext = internal constant [32 x i8] zeroinitializer, align 16
@srtp_aes_icm_128_test_case_0_ciphertext = internal constant [32 x i8] c"\E0>\AD\095\C9^\80\E1f\B1m\D9+N\B4\D25\13\16+\02\D0\F7*C\A2\FEJ_\97\AB", align 16
@srtp_aes_icm_192_test_case_0_key = internal constant [38 x i8] c"\EA\B24vNQ{-=\16\0DX}\8C\86!\97@\F6_\99\B6\BC\F7\F0\F1\F2\F3\F4\F5\F6\F7\F8\F9\FA\FB\FC\FD", align 16
@srtp_aes_icm_192_test_case_0_nonce = internal global [16 x i8] zeroinitializer, align 16
@srtp_aes_icm_192_test_case_0_plaintext = internal constant [32 x i8] zeroinitializer, align 16
@srtp_aes_icm_192_test_case_0_ciphertext = internal constant [32 x i8] c"5\09l\BAF\10\02\8D\C1\B5u\03\80L\E3|]\E9\86)\1D\CC\E1a\D5\16^\C4V\8F\5C\9A", align 16
@srtp_aes_icm_256_test_case_0_key = internal constant [46 x i8] c"W\F8/\E3a?\D1p\A8^\C9<@\B1\F0\92.\C4\CB\0D\C0%\B5\82r\14|\C48\94J\98\F0\F1\F2\F3\F4\F5\F6\F7\F8\F9\FA\FB\FC\FD", align 16
@srtp_aes_icm_256_test_case_0_nonce = internal global [16 x i8] zeroinitializer, align 16
@srtp_aes_icm_256_test_case_0_plaintext = internal constant [32 x i8] zeroinitializer, align 16
@srtp_aes_icm_256_test_case_0_ciphertext = internal constant [32 x i8] c"\92\BD\D2\8A\93\C3\F5%\11\C6w\D0\8BU\15\A4\9D\A7\1B#x\A8T\F6pPum\ED\16[\AC", align 16

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_aes_icm_openssl_alloc(%struct.srtp_cipher_t** nocapture, i32, i32) #0 {
  %4 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_icm, i64 0, i32 0), align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  %7 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_icm, i64 0, i32 1), align 8
  tail call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i8* %7, i32 %1) #3
  br label %8

8:                                                ; preds = %3, %6
  switch i32 %1, label %43 [
    i32 46, label %9
    i32 38, label %9
    i32 30, label %9
  ]

9:                                                ; preds = %8, %8, %8
  %10 = tail call i8* @srtp_crypto_alloc(i64 24) #3
  %11 = bitcast %struct.srtp_cipher_t** %0 to i8**
  store i8* %10, i8** %11, align 8
  %12 = icmp eq i8* %10, null
  br i1 %12, label %43, label %13

13:                                               ; preds = %9
  %14 = tail call i8* @srtp_crypto_alloc(i64 48) #3
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %18

16:                                               ; preds = %13
  %17 = load i8*, i8** %11, align 8
  tail call void @srtp_crypto_free(i8* %17) #3
  store %struct.srtp_cipher_t* null, %struct.srtp_cipher_t** %0, align 8
  br label %43

18:                                               ; preds = %13
  %19 = tail call %struct.evp_cipher_ctx_st* @EVP_CIPHER_CTX_new() #3
  %20 = getelementptr inbounds i8, i8* %14, i64 40
  %21 = bitcast i8* %20 to %struct.evp_cipher_ctx_st**
  store %struct.evp_cipher_ctx_st* %19, %struct.evp_cipher_ctx_st** %21, align 8
  %22 = icmp eq %struct.evp_cipher_ctx_st* %19, null
  br i1 %22, label %23, label %25

23:                                               ; preds = %18
  tail call void @srtp_crypto_free(i8* nonnull %14) #3
  %24 = load i8*, i8** %11, align 8
  tail call void @srtp_crypto_free(i8* %24) #3
  store %struct.srtp_cipher_t* null, %struct.srtp_cipher_t** %0, align 8
  br label %43

25:                                               ; preds = %18
  %26 = load %struct.srtp_cipher_t*, %struct.srtp_cipher_t** %0, align 8
  %27 = getelementptr inbounds %struct.srtp_cipher_t, %struct.srtp_cipher_t* %26, i64 0, i32 1
  store i8* %14, i8** %27, align 8
  switch i32 %1, label %40 [
    i32 30, label %30
    i32 38, label %28
    i32 46, label %29
  ]

28:                                               ; preds = %25
  br label %30

29:                                               ; preds = %25
  br label %30

30:                                               ; preds = %25, %28, %29
  %31 = phi i32 [ 5, %29 ], [ 4, %28 ], [ 1, %25 ]
  %32 = phi %struct.srtp_cipher_type_t* [ bitcast ({ i32 (%struct.srtp_cipher_t**, i32, i32)*, i32 (%struct.srtp_cipher_t*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i8*, %struct.srtp_cipher_test_case_t*, i32 }* @srtp_aes_icm_256 to %struct.srtp_cipher_type_t*), %29 ], [ bitcast ({ i32 (%struct.srtp_cipher_t**, i32, i32)*, i32 (%struct.srtp_cipher_t*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i8*, %struct.srtp_cipher_test_case_t*, i32 }* @srtp_aes_icm_192 to %struct.srtp_cipher_type_t*), %28 ], [ bitcast ({ i32 (%struct.srtp_cipher_t**, i32, i32)*, i32 (%struct.srtp_cipher_t*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i8*, %struct.srtp_cipher_test_case_t*, i32 }* @srtp_aes_icm_128 to %struct.srtp_cipher_type_t*), %25 ]
  %33 = phi i32 [ 32, %29 ], [ 24, %28 ], [ 16, %25 ]
  %34 = load %struct.srtp_cipher_t*, %struct.srtp_cipher_t** %0, align 8
  %35 = getelementptr inbounds %struct.srtp_cipher_t, %struct.srtp_cipher_t* %34, i64 0, i32 3
  store i32 %31, i32* %35, align 4
  %36 = load %struct.srtp_cipher_t*, %struct.srtp_cipher_t** %0, align 8
  %37 = getelementptr inbounds %struct.srtp_cipher_t, %struct.srtp_cipher_t* %36, i64 0, i32 0
  store %struct.srtp_cipher_type_t* %32, %struct.srtp_cipher_type_t** %37, align 8
  %38 = getelementptr inbounds i8, i8* %14, i64 32
  %39 = bitcast i8* %38 to i32*
  store i32 %33, i32* %39, align 8
  br label %40

40:                                               ; preds = %30, %25
  %41 = load %struct.srtp_cipher_t*, %struct.srtp_cipher_t** %0, align 8
  %42 = getelementptr inbounds %struct.srtp_cipher_t, %struct.srtp_cipher_t* %41, i64 0, i32 2
  store i32 %1, i32* %42, align 8
  br label %43

43:                                               ; preds = %9, %8, %40, %23, %16
  %44 = phi i32 [ 3, %16 ], [ 3, %23 ], [ 0, %40 ], [ 2, %8 ], [ 3, %9 ]
  ret i32 %44
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_aes_icm_openssl_dealloc(%struct.srtp_cipher_t*) #0 {
  %2 = icmp eq %struct.srtp_cipher_t* %0, null
  br i1 %2, label %13, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.srtp_cipher_t, %struct.srtp_cipher_t* %0, i64 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds i8, i8* %5, i64 40
  %9 = bitcast i8* %8 to %struct.evp_cipher_ctx_st**
  %10 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %9, align 8
  tail call void @EVP_CIPHER_CTX_free(%struct.evp_cipher_ctx_st* %10) #3
  tail call void @octet_string_set_to_zero(i8* nonnull %5, i64 48) #3
  tail call void @srtp_crypto_free(i8* nonnull %5) #3
  br label %11

11:                                               ; preds = %3, %7
  %12 = bitcast %struct.srtp_cipher_t* %0 to i8*
  tail call void @srtp_crypto_free(i8* nonnull %12) #3
  br label %13

13:                                               ; preds = %1, %11
  %14 = phi i32 [ 0, %11 ], [ 2, %1 ]
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_aes_icm_openssl_context_init(i8*, i8*) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 16
  %4 = bitcast i8* %3 to %union.v128_t*
  %5 = getelementptr inbounds i8, i8* %0, i64 32
  %6 = bitcast i8* %5 to i32*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 32, i1 false)
  %7 = load i32, i32* %6, align 8
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %1, i64 %8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 1 %9, i64 14, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 1 %9, i64 14, i1 false)
  %10 = getelementptr inbounds i8, i8* %0, i64 31
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds i8, i8* %0, i64 30
  store i8 0, i8* %11, align 2
  %12 = getelementptr inbounds i8, i8* %0, i64 15
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds i8, i8* %0, i64 14
  store i8 0, i8* %13, align 2
  %14 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_icm, i64 0, i32 0), align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %24, label %16

16:                                               ; preds = %2
  %17 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_icm, i64 0, i32 1), align 8
  %18 = tail call i8* @srtp_octet_string_hex_string(i8* %1, i32 %7) #3
  tail call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i8* %17, i8* %18) #3
  %19 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_icm, i64 0, i32 0), align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %16
  %22 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_icm, i64 0, i32 1), align 8
  %23 = tail call i8* @v128_hex_string(%union.v128_t* %4) #3
  tail call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i8* %22, i8* %23) #3
  br label %24

24:                                               ; preds = %2, %16, %21
  %25 = load i32, i32* %6, align 8
  switch i32 %25, label %42 [
    i32 32, label %26
    i32 24, label %28
    i32 16, label %30
  ]

26:                                               ; preds = %24
  %27 = tail call %struct.evp_cipher_st* @EVP_aes_256_ctr() #3
  br label %32

28:                                               ; preds = %24
  %29 = tail call %struct.evp_cipher_st* @EVP_aes_192_ctr() #3
  br label %32

30:                                               ; preds = %24
  %31 = tail call %struct.evp_cipher_st* @EVP_aes_128_ctr() #3
  br label %32

32:                                               ; preds = %30, %28, %26
  %33 = phi %struct.evp_cipher_st* [ %31, %30 ], [ %29, %28 ], [ %27, %26 ]
  %34 = getelementptr inbounds i8, i8* %0, i64 40
  %35 = bitcast i8* %34 to %struct.evp_cipher_ctx_st**
  %36 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %35, align 8
  %37 = tail call i32 @EVP_CIPHER_CTX_cleanup(%struct.evp_cipher_ctx_st* %36) #3
  %38 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %35, align 8
  %39 = tail call i32 @EVP_EncryptInit_ex(%struct.evp_cipher_ctx_st* %38, %struct.evp_cipher_st* %33, %struct.engine_st* null, i8* %1, i8* null) #3
  %40 = icmp eq i32 %39, 0
  %41 = zext i1 %40 to i32
  br label %42

42:                                               ; preds = %32, %24
  %43 = phi i32 [ 2, %24 ], [ %41, %32 ]
  ret i32 %43
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_aes_icm_openssl_encrypt(i8*, i8*, i32* nocapture) #0 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #3
  store i32 0, i32* %4, align 4
  %6 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_icm, i64 0, i32 0), align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %3
  %9 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_icm, i64 0, i32 1), align 8
  %10 = bitcast i8* %0 to %union.v128_t*
  %11 = tail call i8* @v128_hex_string(%union.v128_t* %10) #3
  tail call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0), i8* %9, i8* %11) #3
  br label %12

12:                                               ; preds = %3, %8
  %13 = getelementptr inbounds i8, i8* %0, i64 40
  %14 = bitcast i8* %13 to %struct.evp_cipher_ctx_st**
  %15 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %14, align 8
  %16 = load i32, i32* %2, align 4
  %17 = call i32 @EVP_EncryptUpdate(%struct.evp_cipher_ctx_st* %15, i8* %1, i32* nonnull %4, i8* %1, i32 %16) #3
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %30, label %19

19:                                               ; preds = %12
  %20 = load i32, i32* %4, align 4
  store i32 %20, i32* %2, align 4
  %21 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %14, align 8
  %22 = sext i32 %20 to i64
  %23 = getelementptr inbounds i8, i8* %1, i64 %22
  %24 = call i32 @EVP_EncryptFinal_ex(%struct.evp_cipher_ctx_st* %21, i8* %23, i32* nonnull %4) #3
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %19
  %27 = load i32, i32* %4, align 4
  %28 = load i32, i32* %2, align 4
  %29 = add i32 %28, %27
  store i32 %29, i32* %2, align 4
  br label %30

30:                                               ; preds = %19, %12, %26
  %31 = phi i32 [ 0, %26 ], [ 8, %12 ], [ 8, %19 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #3
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_aes_icm_openssl_set_iv(i8*, i8*, i32) #0 {
  %4 = alloca <4 x i32>, align 16
  %5 = bitcast <4 x i32>* %4 to %union.v128_t*
  %6 = bitcast <4 x i32>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #3
  %7 = bitcast <4 x i32>* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 16, i1 false)
  call void @v128_copy_octet_string(%union.v128_t* nonnull %5, i8* %1) #3
  %8 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_icm, i64 0, i32 0), align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %3
  %11 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_icm, i64 0, i32 1), align 8
  %12 = call i8* @v128_hex_string(%union.v128_t* nonnull %5) #3
  call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i8* %11, i8* %12) #3
  br label %13

13:                                               ; preds = %3, %10
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to <4 x i32>*
  %16 = load <4 x i32>, <4 x i32>* %15, align 8
  %17 = load <4 x i32>, <4 x i32>* %4, align 16
  %18 = xor <4 x i32> %17, %16
  %19 = bitcast i8* %0 to <4 x i32>*
  store <4 x i32> %18, <4 x i32>* %19, align 8
  %20 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_icm, i64 0, i32 0), align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %13
  %23 = bitcast i8* %0 to %union.v128_t*
  %24 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_icm, i64 0, i32 1), align 8
  %25 = call i8* @v128_hex_string(%union.v128_t* %23) #3
  call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i8* %24, i8* %25) #3
  br label %26

26:                                               ; preds = %13, %22
  %27 = getelementptr inbounds i8, i8* %0, i64 40
  %28 = bitcast i8* %27 to %struct.evp_cipher_ctx_st**
  %29 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %28, align 8
  %30 = call i32 @EVP_EncryptInit_ex(%struct.evp_cipher_ctx_st* %29, %struct.evp_cipher_st* null, %struct.engine_st* null, i8* null, i8* %0) #3
  %31 = icmp eq i32 %30, 0
  %32 = zext i1 %31 to i32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #3
  ret i32 %32
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @srtp_err_report(i32, i8*, ...) local_unnamed_addr #2

declare i8* @srtp_crypto_alloc(i64) local_unnamed_addr #2

declare void @srtp_crypto_free(i8*) local_unnamed_addr #2

declare %struct.evp_cipher_ctx_st* @EVP_CIPHER_CTX_new() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @EVP_CIPHER_CTX_free(%struct.evp_cipher_ctx_st*) local_unnamed_addr #2

declare void @octet_string_set_to_zero(i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i8* @srtp_octet_string_hex_string(i8*, i32) local_unnamed_addr #2

declare i8* @v128_hex_string(%union.v128_t*) local_unnamed_addr #2

declare %struct.evp_cipher_st* @EVP_aes_256_ctr() local_unnamed_addr #2

declare %struct.evp_cipher_st* @EVP_aes_192_ctr() local_unnamed_addr #2

declare %struct.evp_cipher_st* @EVP_aes_128_ctr() local_unnamed_addr #2

declare i32 @EVP_CIPHER_CTX_cleanup(%struct.evp_cipher_ctx_st*) local_unnamed_addr #2

declare i32 @EVP_EncryptInit_ex(%struct.evp_cipher_ctx_st*, %struct.evp_cipher_st*, %struct.engine_st*, i8*, i8*) local_unnamed_addr #2

declare i32 @EVP_EncryptUpdate(%struct.evp_cipher_ctx_st*, i8*, i32*, i8*, i32) local_unnamed_addr #2

declare i32 @EVP_EncryptFinal_ex(%struct.evp_cipher_ctx_st*, i8*, i32*) local_unnamed_addr #2

declare void @v128_copy_octet_string(%union.v128_t*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
