; ModuleID = '../../third_party/skia/src/gpu/tessellate/GrStrokeIndirectTessellator.cpp'
source_filename = "../../third_party/skia/src/gpu/tessellate/GrStrokeIndirectTessellator.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.(anonymous namespace)::ResolveLevelCounter" = type <{ %"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue", %"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue.14", %"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue.17", %"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue.17", %struct.anon.20, float, float, i32*, %"struct.std::__1::array", %struct.GrStrokeTolerances, i32, i8, [27 x i8] }>
%"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue" = type <{ %struct.anon, [4 x i8*], i32, [28 x i8] }>
%struct.anon = type { [2 x [8 x float]], [8 x float] }
%"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue.14" = type <{ %struct.anon.15, [4 x i8*], i32, [28 x i8] }>
%struct.anon.15 = type { [3 x [8 x float]], [8 x float] }
%"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue.17" = type <{ %struct.anon.18, [4 x i8*], i32, [28 x i8] }>
%struct.anon.18 = type { [4 x [8 x float]], [8 x float] }
%struct.anon.20 = type { [8 x float] }
%"struct.std::__1::array" = type { [2 x float] }
%struct.GrStrokeTolerances = type { float, float }
%"class.(anonymous namespace)::BinningInstanceWriter" = type <{ i32, [4 x i8], [16 x %struct.GrVertexWriter], [16 x float], %"struct.GrStrokeShader::DynamicStroke", %class.GrVertexColor, [4 x i8] }>
%struct.GrVertexWriter = type { i8* }
%"struct.GrStrokeShader::DynamicStroke" = type { float, float }
%class.GrVertexColor = type <{ [4 x i32], i8, [3 x i8] }>
%class.SkMatrix = type { [9 x float], i32 }
%class.SkStrokeRec = type { float, float, float, i32 }
%"class.SkPath::RangeIter" = type { i8*, %struct.SkPoint*, float* }
%struct.SkPoint = type { float, float }
%"struct.std::__1::array.21" = type { [2 x %struct.SkPoint] }
%class.GrStrokeIndirectTessellator = type { %class.GrStrokeTessellator, [16 x i32], i32, i32, i32, i8*, float*, i32, %class.GrStrokeIndirectTessellator*, %class.GrStrokeIndirectTessellator**, %class.sk_sp.13, %class.sk_sp.13, i64 }
%class.GrStrokeTessellator = type { i32 (...)**, %class.GrStrokeShader, %"struct.GrStrokeTessellator::PathStrokeList"*, %"struct.std::__1::array", %struct.SkRect }
%class.GrStrokeShader = type <{ %class.GrPathShader.base, i32, i32, %class.SkStrokeRec, %struct.SkRGBA4f, [4 x i8], %class.SkSTArray, float, [4 x i8] }>
%class.GrPathShader.base = type { %class.GrGeometryProcessor.base, %class.SkMatrix, i8, i32 }
%class.GrGeometryProcessor.base = type <{ %class.GrProcessor, %class.GrNonAtomicRef, i32, %"class.GrGeometryProcessor::AttributeSet", %"class.GrGeometryProcessor::AttributeSet", i32 }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.GrNonAtomicRef = type { i32 }
%"class.GrGeometryProcessor::AttributeSet" = type { %"class.GrGeometryProcessor::Attribute"*, i32, i32, i64 }
%"class.GrGeometryProcessor::Attribute" = type { i8*, i32, i32 }
%struct.SkRGBA4f = type { float, float, float, float }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [80 x i8] }
%class.SkTArray = type { %"class.GrGeometryProcessor::Attribute"*, i64 }
%struct.SkRect = type { float, float, float, float }
%class.sk_sp.13 = type { %class.GrBuffer* }
%class.GrBuffer = type { i32 (...)** }
%"struct.GrStrokeTessellator::PathStrokeList" = type { %class.SkPath, %class.SkStrokeRec, %struct.SkRGBA4f, %"struct.GrStrokeTessellator::PathStrokeList"* }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.GrStrokeIterator = type { %class.SkMatrix*, %class.SkStrokeRec*, %"class.SkPath::RangeIter", %"class.SkPath::RangeIter", i32, %struct.SkPoint*, float*, %struct.SkPoint*, [8 x i32], [8 x %struct.SkPoint*], [8 x float*], i32, i32, %"struct.std::__1::array.21", %"struct.std::__1::array.21", %"struct.std::__1::array.21" }
%"class.GrMeshDrawOp::Target" = type { i32 (...)** }
%struct.GrDrawIndirectWriter = type { %struct.GrDrawIndirectCommand* }
%struct.GrDrawIndirectCommand = type { i32, i32, i32, i32 }
%struct.SkConic = type { [3 x %struct.SkPoint], float }
%class.GrOpFlushState = type { %class.GrDeferredUploadTarget, %"class.GrMeshDrawOp::Target", %class.SkArenaAllocWithReset, %class.GrVertexBufferAllocPool, %class.GrIndexBufferAllocPool, %class.GrDrawIndirectBufferAllocPool, %class.SkArenaAllocList, %class.SkArenaAllocList.29, %class.SkArenaAllocList.30, %class.GrDeferredUploadToken, %"struct.GrOpFlushState::OpArgs"*, %class.SkTArray.95*, %class.GrGpu*, %class.GrResourceProvider*, %class.GrTokenTracker*, %class.GrOpsRenderPass*, %"class.SkArenaAllocList<GrOpFlushState::Draw>::Iter", %"class.SkArenaAllocList<GrOpFlushState::InlineUpload>::Iter" }
%class.GrDeferredUploadTarget = type { i32 (...)** }
%class.SkArenaAllocWithReset = type { %class.SkArenaAlloc.base, i8*, i32, i32 }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.GrVertexBufferAllocPool = type { %class.GrBufferAllocPool }
%class.GrBufferAllocPool = type { i32 (...)**, i64, %class.SkTArray.22, %class.sk_sp.24, %class.sk_sp.26, %class.GrGpu*, i32, i8* }
%class.SkTArray.22 = type { %"struct.GrBufferAllocPool::BufferBlock"*, i64 }
%"struct.GrBufferAllocPool::BufferBlock" = type { i64, %class.sk_sp.23 }
%class.sk_sp.23 = type { %class.GrBuffer* }
%class.sk_sp.24 = type { %"class.GrBufferAllocPool::CpuBufferCache"* }
%"class.GrBufferAllocPool::CpuBufferCache" = type <{ %class.GrNonAtomicRef.25, [4 x i8], %"class.std::__1::unique_ptr", i32, [4 x i8] }>
%class.GrNonAtomicRef.25 = type { i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.GrBufferAllocPool::CpuBufferCache::Buffer"* }
%"struct.GrBufferAllocPool::CpuBufferCache::Buffer" = type <{ %class.sk_sp.26, i8, [7 x i8] }>
%class.sk_sp.26 = type { %class.GrCpuBuffer* }
%class.GrCpuBuffer = type { %class.GrBuffer, %class.GrNonAtomicRef.27, i8*, i64 }
%class.GrNonAtomicRef.27 = type { i32 }
%class.GrIndexBufferAllocPool = type { %class.GrBufferAllocPool }
%class.GrDrawIndirectBufferAllocPool = type { %class.GrBufferAllocPool }
%class.SkArenaAllocList = type { %"struct.SkArenaAllocList<std::__1::function<void (std::__1::function<bool (GrTextureProxy *, SkIRect, GrColorType, const void *, unsigned long)> &)> >::Node"*, %"struct.SkArenaAllocList<std::__1::function<void (std::__1::function<bool (GrTextureProxy *, SkIRect, GrColorType, const void *, unsigned long)> &)> >::Node"* }
%"struct.SkArenaAllocList<std::__1::function<void (std::__1::function<bool (GrTextureProxy *, SkIRect, GrColorType, const void *, unsigned long)> &)> >::Node" = type opaque
%class.SkArenaAllocList.29 = type { %"struct.SkArenaAllocList<GrOpFlushState::InlineUpload>::Node"*, %"struct.SkArenaAllocList<GrOpFlushState::InlineUpload>::Node"* }
%"struct.SkArenaAllocList<GrOpFlushState::InlineUpload>::Node" = type opaque
%class.SkArenaAllocList.30 = type { %"struct.SkArenaAllocList<GrOpFlushState::Draw>::Node"*, %"struct.SkArenaAllocList<GrOpFlushState::Draw>::Node"* }
%"struct.SkArenaAllocList<GrOpFlushState::Draw>::Node" = type opaque
%class.GrDeferredUploadToken = type { i64 }
%"struct.GrOpFlushState::OpArgs" = type { %class.GrOp*, %class.GrSurfaceProxyView*, %class.GrRenderTargetProxy*, i8, %class.GrAppliedClip*, %"class.GrXferProcessor::DstProxyView", i32, i32 }
%class.GrOp = type { i32 (...)**, %"class.std::__1::unique_ptr.31", %class.GrOp*, i16, i16, i32, %struct.SkRect }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %class.GrOp* }
%class.GrSurfaceProxyView = type <{ %class.sk_sp.37, i32, %class.GrSwizzle, [2 x i8] }>
%class.sk_sp.37 = type { %class.GrSurfaceProxy* }
%class.GrSurfaceProxy = type { i32 (...)**, %class.SkNVRefCnt.38, %class.sk_sp.39, i32, [4 x i8], %class.GrBackendFormat, %struct.SkISize, i32, i8, i32, %"class.GrSurfaceProxy::UniqueID", %"class.std::__1::function", i8, i8, i8, i8, i32, %"struct.std::__1::atomic.76" }
%class.SkNVRefCnt.38 = type { %"struct.std::__1::atomic" }
%class.sk_sp.39 = type { %class.GrSurface* }
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.42 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon, [4 x i8] }>
%union.anon = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.40, i8* }
%class.sk_sp.40 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.41, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.41 = type { %"struct.std::__1::atomic" }
%"class.GrGpuResource::UniqueID" = type { i32 }
%class.sk_sp.42 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.43, void (i8*)*, i8* }
%class.SkNVRefCnt.43 = type { %"struct.std::__1::atomic" }
%class.GrBackendFormat = type { i32, i8, %union.anon.44, i32, [4 x i8] }
%union.anon.44 = type { %struct.anon.45 }
%struct.anon.45 = type { i32, [4 x i8], %struct.GrVkYcbcrConversionInfo }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%struct.SkISize = type { i32, i32 }
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"struct.GrSurfaceProxy::LazyCallbackResult"*, %"union.std::__1::__function::__policy_storage"*, %class.GrResourceProvider*, %"struct.GrSurfaceProxy::LazySurfaceDesc"*)* }
%"struct.GrSurfaceProxy::LazyCallbackResult" = type <{ %class.sk_sp.39, i32, i8, [3 x i8] }>
%"struct.GrSurfaceProxy::LazySurfaceDesc" = type <{ %struct.SkISize, i32, i8, i8, [2 x i8], i32, [4 x i8], %class.GrBackendFormat*, i8, i8, [6 x i8] }>
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.std::__1::atomic.76" = type { %"struct.std::__1::__atomic_base.77" }
%"struct.std::__1::__atomic_base.77" = type { %"struct.std::__1::__atomic_base.78" }
%"struct.std::__1::__atomic_base.78" = type { %"struct.std::__1::__cxx_atomic_impl.79" }
%"struct.std::__1::__cxx_atomic_impl.79" = type { %"struct.std::__1::__cxx_atomic_base_impl.80" }
%"struct.std::__1::__cxx_atomic_base_impl.80" = type { i64 }
%class.GrSwizzle = type { i16 }
%class.GrRenderTargetProxy = type <{ i32 (...)**, i8, i8, i8, i8, %struct.SkIRect, [4 x i8], %class.sk_sp.81, [4 x i8], [4 x i8], %class.GrSurfaceProxy }>
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.sk_sp.81 = type { %class.GrArenas* }
%class.GrArenas = type { %class.SkNVRefCnt.82, [4 x i8], %class.SkArenaAlloc, %class.GrSubRunAllocator }
%class.SkNVRefCnt.82 = type { %"struct.std::__1::atomic" }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.83 }
%class.SkFibBlockSizes.83 = type { i32 }
%class.GrAppliedClip = type { %class.GrAppliedHardClip, %"class.std::__1::unique_ptr.86" }
%class.GrAppliedHardClip = type <{ %class.GrScissorState, %class.GrWindowRectsState, i32, [4 x i8] }>
%class.GrScissorState = type { %struct.SkISize, %struct.SkIRect }
%class.GrWindowRectsState = type { i8, %class.GrWindowRectangles }
%class.GrWindowRectangles = type { i32, %union.anon.84 }
%union.anon.84 = type { %"struct.GrWindowRectangles::Rec"*, [8 x i8] }
%"struct.GrWindowRectangles::Rec" = type { %class.GrNonAtomicRef.85, [8 x %struct.SkIRect] }
%class.GrNonAtomicRef.85 = type { i32 }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %class.GrFragmentProcessor* }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray.89, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.SkSTArray.89 = type { %class.SkAlignedSTStorage.90, %class.SkTArray.91 }
%class.SkAlignedSTStorage.90 = type { [8 x i8] }
%class.SkTArray.91 = type { %"class.std::__1::unique_ptr.86"*, i64 }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%"class.GrXferProcessor::DstProxyView" = type { %class.GrSurfaceProxyView, %struct.SkIPoint, i32, [4 x i8] }
%struct.SkIPoint = type { i32, i32 }
%class.SkTArray.95 = type opaque
%class.GrGpu = type opaque
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp.73, %class.sk_sp.75, %class.sk_sp.75 }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray.47, %class.SkTMultiMap, %class.SkTDynamicHash.54, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrProxyProvider = type opaque
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray.47 }
%class.SkTDArray.47 = type { %class.GrGpuResource**, i32, i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash, i32, [4 x i8] }>
%class.SkTDynamicHash = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.48" }
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.54 = type { %class.SkTHashTable.55 }
%class.SkTHashTable.55 = type { i32, i32, %class.SkAutoTArray.56 }
%class.SkAutoTArray.56 = type { %"class.std::__1::unique_ptr.57" }
%"class.std::__1::unique_ptr.57" = type { %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray.63, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray.63 = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.64, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.64 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.SkTHashMap = type { %class.SkTHashTable.65 }
%class.SkTHashTable.65 = type { i32, i32, %class.SkAutoTArray.66 }
%class.SkAutoTArray.66 = type { %"class.std::__1::unique_ptr.67" }
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%class.GrSingleOwner = type { i8 }
%class.sk_sp.73 = type { %class.GrCaps* }
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.74, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.sk_sp.74 = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%class.sk_sp.75 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%class.GrTokenTracker = type { %class.GrDeferredUploadToken, %class.GrDeferredUploadToken }
%class.GrOpsRenderPass = type { i32 (...)**, i32, %class.GrRenderTarget*, %class.sk_sp.13, %class.sk_sp.13, %class.sk_sp.13, i32, i32 }
%class.GrRenderTarget = type opaque
%"class.SkArenaAllocList<GrOpFlushState::Draw>::Iter" = type { %"struct.SkArenaAllocList<GrOpFlushState::Draw>::Node"* }
%"class.SkArenaAllocList<GrOpFlushState::InlineUpload>::Iter" = type { %"struct.SkArenaAllocList<GrOpFlushState::InlineUpload>::Node"* }
%class.GrGeometryProcessor = type <{ %class.GrProcessor, %class.GrNonAtomicRef, i32, %"class.GrGeometryProcessor::AttributeSet", %"class.GrGeometryProcessor::AttributeSet", i32, [4 x i8] }>
%class.GrPathShader = type { %class.GrGeometryProcessor.base, %class.SkMatrix, i8, i32, [4 x i8] }
%"class.GrGeometryProcessor::TextureSampler" = type <{ %class.GrSamplerState, [4 x i8], %class.GrBackendFormat, %class.GrSwizzle, i8, [5 x i8] }>
%class.GrSamplerState = type { [2 x i8], i32, i32 }

$_ZN16GrStrokeIterator4nextEv = comdat any

$_ZN27GrStrokeIndirectTessellatorD2Ev = comdat any

$_ZN27GrStrokeIndirectTessellatorD0Ev = comdat any

$_ZN14GrStrokeShaderC2ENS_4ModeENS_11ShaderFlagsERK8SkMatrixRK11SkStrokeRec8SkRGBA4fIL11SkAlphaType2EE = comdat any

$_ZN19GrStrokeTessellatorD2Ev = comdat any

$_ZN19GrStrokeTessellatorD0Ev = comdat any

$_ZN11GrProcessorD2Ev = comdat any

$_ZN12GrPathShaderD0Ev = comdat any

$_ZNK19GrGeometryProcessor16onTextureSamplerEi = comdat any

$_ZN8SkTArrayIN19GrGeometryProcessor9AttributeELb0EE12checkReallocEiNS2_11ReallocTypeE = comdat any

$_ZN16GrStrokeIterator17finishOpenContourEv = comdat any

$_ZN16GrStrokeIterator19fillSquareCapPointsEv = comdat any

$_ZTV19GrStrokeTessellator = comdat any

$_ZTV12GrPathShader = comdat any

$_ZZN10SkPathPriv9PtsInIterEjE10gPtsInVerb = comdat any

@_ZTV27GrStrokeIndirectTessellator = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrStrokeIndirectTessellator*, %"class.GrMeshDrawOp::Target"*, i32)* @_ZN27GrStrokeIndirectTessellator7prepareEPN12GrMeshDrawOp6TargetEi to i8*), i8* bitcast (void (%class.GrStrokeIndirectTessellator*, %class.GrOpFlushState*)* @_ZNK27GrStrokeIndirectTessellator4drawEP14GrOpFlushState to i8*), i8* bitcast (void (%class.GrStrokeIndirectTessellator*)* @_ZN27GrStrokeIndirectTessellatorD2Ev to i8*), i8* bitcast (void (%class.GrStrokeIndirectTessellator*)* @_ZN27GrStrokeIndirectTessellatorD0Ev to i8*)] }, align 8
@__const.GrStrokeIndirectTessellator.counter = private unnamed_addr constant %"class.(anonymous namespace)::ResolveLevelCounter" <{ %"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue" <{ %struct.anon { [2 x [8 x float]] [[8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, [4 x i8*] [i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*)], i32 -1431655766, [28 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA" }>, %"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue.14" <{ %struct.anon.15 { [3 x [8 x float]] [[8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, [4 x i8*] [i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*)], i32 -1431655766, [28 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA" }>, %"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue.17" <{ %struct.anon.18 { [4 x [8 x float]] [[8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, [4 x i8*] [i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*)], i32 -1431655766, [28 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA" }>, %"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue.17" <{ %struct.anon.18 { [4 x [8 x float]] [[8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, [4 x i8*] [i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*)], i32 -1431655766, [28 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA" }>, %struct.anon.20 { [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32* inttoptr (i64 -6148914691236517206 to i32*), %"struct.std::__1::array" { [2 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %struct.GrStrokeTolerances { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, i32 -1431655766, i8 -86, [27 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA" }>, align 32
@__const._ZN27GrStrokeIndirectTessellator12writeBuffersEP20GrDrawIndirectWriterP14GrVertexWriterRK8SkMatrixmii.binningWriter = private unnamed_addr constant %"class.(anonymous namespace)::BinningInstanceWriter" <{ i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [16 x %struct.GrVertexWriter] [%struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }], [16 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], %"struct.GrStrokeShader::DynamicStroke" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %class.GrVertexColor <{ [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, [3 x i8] c"\AA\AA\AA" }>, [4 x i8] c"\AA\AA\AA\AA" }>, align 8
@__const._ZN27GrStrokeIndirectTessellator12writeBuffersEP20GrDrawIndirectWriterP14GrVertexWriterRK8SkMatrixmii.iter = private unnamed_addr constant { %class.SkMatrix*, %class.SkStrokeRec*, %"class.SkPath::RangeIter", %"class.SkPath::RangeIter", i32, [4 x i8], %struct.SkPoint*, float*, %struct.SkPoint*, [8 x i32], [8 x %struct.SkPoint*], [8 x float*], i32, i32, %"struct.std::__1::array.21", %"struct.std::__1::array.21", %"struct.std::__1::array.21" } { %class.SkMatrix* inttoptr (i64 -6148914691236517206 to %class.SkMatrix*), %class.SkStrokeRec* inttoptr (i64 -6148914691236517206 to %class.SkStrokeRec*), %"class.SkPath::RangeIter" { i8* inttoptr (i64 -6148914691236517206 to i8*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), float* inttoptr (i64 -6148914691236517206 to float*) }, %"class.SkPath::RangeIter" { i8* inttoptr (i64 -6148914691236517206 to i8*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), float* inttoptr (i64 -6148914691236517206 to float*) }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), float* inttoptr (i64 -6148914691236517206 to float*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), [8 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [8 x %struct.SkPoint*] [%struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*)], [8 x float*] [float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*)], i32 -1431655766, i32 -1431655766, %"struct.std::__1::array.21" { [2 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }] }, %"struct.std::__1::array.21" { [2 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }] }, %"struct.std::__1::array.21" { [2 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }] } }, align 8
@_ZTV19GrStrokeTessellator = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.GrStrokeTessellator*)* @_ZN19GrStrokeTessellatorD2Ev to i8*), i8* bitcast (void (%class.GrStrokeTessellator*)* @_ZN19GrStrokeTessellatorD0Ev to i8*)] }, comdat, align 8
@_ZTV14GrStrokeShader = external unnamed_addr constant { [8 x i8*] }, align 8
@.str = private unnamed_addr constant [15 x i8] c"prevCtrlPtAttr\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"pts01Attr\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"pts23Attr\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"argsAttr\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"dynamicStrokeAttr\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"dynamicColorAttr\00", align 1
@_ZTV12GrPathShader = linkonce_odr hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrProcessor*)* @_ZN11GrProcessorD2Ev to i8*), i8* bitcast (void (%class.GrPathShader*)* @_ZN12GrPathShaderD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.GrGeometryProcessor::TextureSampler"* (%class.GrGeometryProcessor*, i32)* @_ZNK19GrGeometryProcessor16onTextureSamplerEi to i8*)] }, comdat, align 8
@.str.6 = private unnamed_addr constant [53 x i8] c"../../third_party/skia/src/gpu/GrGeometryProcessor.h\00", align 1
@.str.7 = private unnamed_addr constant [30 x i8] c"Illegal texture sampler index\00", align 1
@.str.8 = private unnamed_addr constant [28 x i8] c"Unsupported type conversion\00", align 1
@_ZZN10SkPathPriv9PtsInIterEjE10gPtsInVerb = linkonce_odr hidden local_unnamed_addr constant [7 x i8] c"\01\02\03\03\04\00\00", comdat, align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer
@switch.table._ZN27GrStrokeIndirectTessellatorC2EN14GrStrokeShader11ShaderFlagsERK8SkMatrixPN19GrStrokeTessellator14PathStrokeListENSt3__15arrayIfLm2EEERK6SkRectiP12SkArenaAlloc = private unnamed_addr constant [3 x i32] [i32 4, i32 3, i32 3], align 4
@switch.table._ZN14GrStrokeShaderC2ENS_4ModeENS_11ShaderFlagsERK8SkMatrixRK11SkStrokeRec8SkRGBA4fIL11SkAlphaType2EE.9 = private unnamed_addr constant [26 x i64] [i64 4, i64 8, i64 12, i64 16, i64 4, i64 4, i64 8, i64 8, i64 12, i64 16, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 8, i64 4, i64 4, i64 4, i64 4, i64 4, i64 8], align 8

@_ZN27GrStrokeIndirectTessellatorC1EN14GrStrokeShader11ShaderFlagsERK8SkMatrixPN19GrStrokeTessellator14PathStrokeListENSt3__15arrayIfLm2EEERK6SkRectiP12SkArenaAlloc = hidden unnamed_addr alias void (%class.GrStrokeIndirectTessellator*, i32, %class.SkMatrix*, %"struct.GrStrokeTessellator::PathStrokeList"*, <2 x float>, %struct.SkRect*, i32, %class.SkArenaAlloc*), void (%class.GrStrokeIndirectTessellator*, i32, %class.SkMatrix*, %"struct.GrStrokeTessellator::PathStrokeList"*, <2 x float>, %struct.SkRect*, i32, %class.SkArenaAlloc*)* @_ZN27GrStrokeIndirectTessellatorC2EN14GrStrokeShader11ShaderFlagsERK8SkMatrixPN19GrStrokeTessellator14PathStrokeListENSt3__15arrayIfLm2EEERK6SkRectiP12SkArenaAlloc

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN27GrStrokeIndirectTessellatorC2EN14GrStrokeShader11ShaderFlagsERK8SkMatrixPN19GrStrokeTessellator14PathStrokeListENSt3__15arrayIfLm2EEERK6SkRectiP12SkArenaAlloc(%class.GrStrokeIndirectTessellator*, i32, %class.SkMatrix* dereferenceable(40), %"struct.GrStrokeTessellator::PathStrokeList"*, <2 x float>, %struct.SkRect* nocapture readonly dereferenceable(16), i32, %class.SkArenaAlloc*) unnamed_addr #0 align 2 {
  %9 = alloca %"class.(anonymous namespace)::ResolveLevelCounter", align 32
  %10 = alloca %class.GrStrokeIterator, align 8
  %11 = alloca i8, align 1
  %12 = alloca [10 x %struct.SkPoint], align 16
  %13 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV19GrStrokeTessellator, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  %14 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 0, i32 1
  %15 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %3, i64 0, i32 1
  %16 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %3, i64 0, i32 2
  %17 = bitcast %struct.SkRGBA4f* %16 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 8
  %19 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %3, i64 0, i32 2, i32 2
  %20 = bitcast float* %19 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 8
  tail call void @_ZN14GrStrokeShaderC2ENS_4ModeENS_11ShaderFlagsERK8SkMatrixRK11SkStrokeRec8SkRGBA4fIL11SkAlphaType2EE(%class.GrStrokeShader* %14, i32 1, i32 %1, %class.SkMatrix* dereferenceable(40) %2, %class.SkStrokeRec* dereferenceable(16) %15, <2 x float> %18, <2 x float> %21) #13
  %22 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 0, i32 2
  store %"struct.GrStrokeTessellator::PathStrokeList"* %3, %"struct.GrStrokeTessellator::PathStrokeList"** %22, align 8
  %23 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 0, i32 3
  %24 = bitcast %"struct.std::__1::array"* %23 to <2 x float>*
  store <2 x float> %4, <2 x float>* %24, align 8
  %25 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 0, i32 4
  %26 = bitcast %struct.SkRect* %25 to i8*
  %27 = bitcast %struct.SkRect* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 4 %27, i64 16, i1 false) #13
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV27GrStrokeIndirectTessellator, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  %28 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 0
  %29 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 2
  %30 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 3
  %31 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 4
  %32 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 5
  %33 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 6
  %34 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 7
  %35 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 8
  store %class.GrStrokeIndirectTessellator* null, %class.GrStrokeIndirectTessellator** %35, align 8
  %36 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 9
  %37 = bitcast i32* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %37, i8 0, i64 76, i1 false)
  %38 = bitcast i8** %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 20, i1 false)
  store %class.GrStrokeIndirectTessellator** %35, %class.GrStrokeIndirectTessellator*** %36, align 8
  %39 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 10, i32 0
  %40 = shl nsw i32 %6, 2
  %41 = or i32 %40, 2
  %42 = icmp sgt i32 %41, -1
  %43 = bitcast %class.GrBuffer** %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 16, i1 false)
  br i1 %42, label %45, label %44

44:                                               ; preds = %8
  tail call void @abort() #14
  unreachable

45:                                               ; preds = %8
  %46 = zext i32 %41 to i64
  %47 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %7, i64 0, i32 1
  %48 = bitcast i8** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %7, i64 0, i32 2
  %51 = bitcast i8** %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %52, %49
  %54 = icmp ult i64 %53, %46
  br i1 %54, label %55, label %57

55:                                               ; preds = %45
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %7, i32 %41, i32 1) #13
  %56 = load i64, i64* %48, align 8
  br label %57

57:                                               ; preds = %45, %55
  %58 = phi i64 [ %56, %55 ], [ %49, %45 ]
  %59 = inttoptr i64 %58 to i8*
  %60 = getelementptr inbounds i8, i8* %59, i64 %46
  store i8* %60, i8** %47, align 8
  store i8* %59, i8** %32, align 8
  %61 = shl nsw i32 %6, 1
  %62 = sext i32 %61 to i64
  %63 = icmp sgt i32 %6, -1
  br i1 %63, label %65, label %64

64:                                               ; preds = %57
  tail call void @abort() #14
  unreachable

65:                                               ; preds = %57
  %66 = icmp ult i32 %61, 1073741824
  br i1 %66, label %68, label %67

67:                                               ; preds = %65
  tail call void @abort() #14
  unreachable

68:                                               ; preds = %65
  %69 = shl nsw i64 %62, 2
  %70 = load i64, i64* %48, align 8
  %71 = sub i64 0, %70
  %72 = and i64 %71, 3
  %73 = and i64 %69, 4294967288
  %74 = or i64 %72, %73
  %75 = load i64, i64* %51, align 8
  %76 = sub i64 %75, %70
  %77 = icmp ugt i64 %74, %76
  br i1 %77, label %78, label %83

78:                                               ; preds = %68
  %79 = trunc i64 %69 to i32
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %7, i32 %79, i32 4) #13
  %80 = load i64, i64* %48, align 8
  %81 = sub i64 0, %80
  %82 = and i64 %81, 3
  br label %83

83:                                               ; preds = %68, %78
  %84 = phi i64 [ %80, %78 ], [ %70, %68 ]
  %85 = phi i64 [ %82, %78 ], [ %72, %68 ]
  %86 = inttoptr i64 %84 to i8*
  %87 = getelementptr inbounds i8, i8* %86, i64 %85
  %88 = getelementptr inbounds i8, i8* %87, i64 %73
  store i8* %88, i8** %47, align 8
  %89 = bitcast float** %33 to i8**
  store i8* %87, i8** %89, align 8
  %90 = bitcast %"class.(anonymous namespace)::ResolveLevelCounter"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 896, i8* nonnull %90) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 32 %90, i8* align 32 bitcast (%"class.(anonymous namespace)::ResolveLevelCounter"* @__const.GrStrokeIndirectTessellator.counter to i8*), i64 896, i1 false)
  %91 = bitcast %"struct.std::__1::array"* %23 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 0, i32 2
  store i32 0, i32* %93, align 32
  %94 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 1, i32 2
  store i32 0, i32* %94, align 32
  %95 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 2
  store i32 0, i32* %95, align 32
  %96 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 3, i32 2
  store i32 0, i32* %96, align 32
  %97 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 7
  store i32* %28, i32** %97, align 8
  %98 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 8
  %99 = bitcast %"struct.std::__1::array"* %98 to i64*
  store i64 %92, i64* %99, align 16
  %100 = load %"struct.GrStrokeTessellator::PathStrokeList"*, %"struct.GrStrokeTessellator::PathStrokeList"** %22, align 8
  %101 = icmp eq %"struct.GrStrokeTessellator::PathStrokeList"* %100, null
  br i1 %101, label %172, label %102

102:                                              ; preds = %83
  %103 = bitcast i8* %87 to float*
  %104 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 11
  %105 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 8, i32 0, i64 1
  %106 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 8, i32 0, i64 0
  %107 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 9
  %108 = bitcast %struct.GrStrokeTolerances* %107 to <2 x float>*
  %109 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 10
  %110 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 5
  %111 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 6
  %112 = bitcast %class.GrStrokeIterator* %10 to i8*
  %113 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 0
  %114 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 1
  %115 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 2
  %116 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 3
  %117 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 7
  %118 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 11
  %119 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 12
  %120 = bitcast %"class.SkPath::RangeIter"* %115 to i8*
  %121 = bitcast %"class.SkPath::RangeIter"* %115 to i64*
  %122 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 2, i32 1
  %123 = bitcast %struct.SkPoint** %122 to i64*
  %124 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 2, i32 2
  %125 = bitcast float** %124 to i64*
  %126 = bitcast %"class.SkPath::RangeIter"* %116 to i64*
  %127 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 3, i32 1
  %128 = bitcast %struct.SkPoint** %127 to i8*
  %129 = bitcast [10 x %struct.SkPoint]* %12 to i8*
  %130 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 0
  %131 = bitcast [10 x %struct.SkPoint]* %12 to i32*
  %132 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 0, i32 1
  %133 = bitcast float* %132 to i32*
  %134 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 1
  %135 = bitcast %struct.SkPoint* %134 to i32*
  %136 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 1, i32 1
  %137 = bitcast float* %136 to i32*
  %138 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 2
  %139 = bitcast %struct.SkPoint* %138 to i32*
  %140 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 2, i32 1
  %141 = bitcast float* %140 to i32*
  %142 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 3
  %143 = bitcast %struct.SkPoint* %142 to i32*
  %144 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 3, i32 1
  %145 = bitcast float* %144 to i32*
  %146 = bitcast %struct.SkPoint* %142 to <2 x float>*
  %147 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 4
  %148 = bitcast %struct.SkPoint* %147 to i32*
  %149 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 4, i32 1
  %150 = bitcast float* %149 to i32*
  %151 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 5
  %152 = bitcast %struct.SkPoint* %151 to i32*
  %153 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 5, i32 1
  %154 = bitcast float* %153 to i32*
  %155 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 6
  %156 = bitcast %struct.SkPoint* %155 to i32*
  %157 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 6, i32 1
  %158 = bitcast float* %157 to i32*
  %159 = bitcast %struct.SkPoint* %155 to <2 x float>*
  %160 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 7
  %161 = bitcast %struct.SkPoint* %160 to i32*
  %162 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 7, i32 1
  %163 = bitcast float* %162 to i32*
  %164 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 8
  %165 = bitcast %struct.SkPoint* %164 to i32*
  %166 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 8, i32 1
  %167 = bitcast float* %166 to i32*
  %168 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 9
  %169 = bitcast %struct.SkPoint* %168 to i32*
  %170 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %12, i64 0, i64 9, i32 1
  %171 = bitcast float* %170 to i32*
  br label %177

172:                                              ; preds = %989, %83
  call fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter5flushEv(%"class.(anonymous namespace)::ResolveLevelCounter"* nonnull %9)
  %173 = load i32, i32* %29, align 8
  %174 = load i32, i32* %28, align 4
  %175 = add nsw i32 %173, %174
  store i32 %175, i32* %29, align 8
  %176 = icmp eq i32 %174, 0
  br i1 %176, label %999, label %996

177:                                              ; preds = %102, %989
  %178 = phi %"struct.GrStrokeTessellator::PathStrokeList"* [ %100, %102 ], [ %994, %989 ]
  %179 = phi i8* [ %59, %102 ], [ %992, %989 ]
  %180 = phi float* [ %103, %102 ], [ %991, %989 ]
  %181 = phi float [ -1.000000e+00, %102 ], [ %244, %989 ]
  %182 = phi <2 x float> [ zeroinitializer, %102 ], [ %990, %989 ]
  %183 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %178, i64 0, i32 1
  %184 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %178, i64 0, i32 1, i32 1
  %185 = load float, float* %184, align 4
  %186 = fcmp une float %185, %181
  %187 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %178, i64 0, i32 1, i32 3
  %188 = load i32, i32* %187, align 4
  %189 = lshr i32 %188, 16
  %190 = trunc i32 %189 to i8
  br i1 %186, label %196, label %191

191:                                              ; preds = %177
  %192 = icmp eq i8 %190, 1
  %193 = load i8, i8* %104, align 4, !range !2
  %194 = icmp ne i8 %193, 0
  %195 = xor i1 %194, %192
  br i1 %195, label %196, label %242

196:                                              ; preds = %177, %191
  %197 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %178, i64 0, i32 1, i32 3
  %198 = icmp eq i8 %190, 1
  %199 = zext i1 %198 to i8
  call fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter5flushEv(%"class.(anonymous namespace)::ResolveLevelCounter"* nonnull %9) #13
  %200 = load float, float* %105, align 4
  %201 = fcmp oeq float %185, 0.000000e+00
  br i1 %201, label %202, label %210

202:                                              ; preds = %196
  %203 = load float, float* %106, align 16
  %204 = fmul float %200, 2.500000e-01
  %205 = fcmp olt float %203, %204
  %206 = select i1 %205, float %204, float %203
  %207 = fdiv float 1.000000e+00, %206
  %208 = fcmp oeq float %207, 0.000000e+00
  %209 = select i1 %208, float 0x3F30000000000000, float %207
  br label %210

210:                                              ; preds = %196, %202
  %211 = phi float [ %209, %202 ], [ %185, %196 ]
  %212 = fmul float %200, 4.000000e+00
  %213 = insertelement <2 x float> undef, float %212, i32 0
  %214 = fmul float %212, %211
  %215 = fdiv float 2.000000e+00, %214
  %216 = fsub float 1.000000e+00, %215
  %217 = fcmp olt float %216, -1.000000e+00
  %218 = select i1 %217, float -1.000000e+00, float %216
  %219 = call float @acosf(float %218) #13
  %220 = fdiv float 5.000000e-01, %219
  %221 = insertelement <2 x float> %213, float %220, i32 1
  store <2 x float> %221, <2 x float>* %108, align 8
  %222 = fmul float %220, 0x400921FB60000000
  %223 = bitcast float %222 to i32
  %224 = add i32 %223, 8388607
  %225 = ashr i32 %224, 23
  %226 = add nsw i32 %225, -127
  %227 = ashr i32 %226, 31
  %228 = xor i32 %227, -1
  %229 = and i32 %226, %228
  %230 = sitofp i32 %229 to float
  %231 = fcmp ogt float %230, 1.500000e+01
  %232 = select i1 %231, float 1.500000e+01, float %230
  %233 = fcmp ogt float %232, 1.000000e+00
  %234 = select i1 %233, float %232, float 1.000000e+00
  %235 = fptosi float %234 to i32
  store i32 %235, i32* %109, align 32
  store i8 %199, i8* %104, align 4
  %236 = fmul float %212, 2.500000e-01
  store float %236, float* %110, align 32
  %237 = fmul float %212, 7.500000e-01
  store float %237, float* %111, align 4
  %238 = load float, float* %184, align 4
  %239 = load i32, i32* %197, align 4
  %240 = lshr i32 %239, 16
  %241 = trunc i32 %240 to i8
  br label %242

242:                                              ; preds = %210, %191
  %243 = phi i8 [ %241, %210 ], [ %190, %191 ]
  %244 = phi float [ %238, %210 ], [ %181, %191 ]
  %245 = icmp ult i8 %243, 3
  br i1 %245, label %247, label %246

246:                                              ; preds = %242
  call void @llvm.trap() #13
  unreachable

247:                                              ; preds = %242
  %248 = sext i8 %243 to i64
  %249 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN27GrStrokeIndirectTessellatorC2EN14GrStrokeShader11ShaderFlagsERK8SkMatrixPN19GrStrokeTessellator14PathStrokeListENSt3__15arrayIfLm2EEERK6SkRectiP12SkArenaAlloc, i64 0, i64 %248
  %250 = load i32, i32* %249, align 4
  %251 = load i32, i32* %34, align 4
  %252 = icmp slt i32 %251, %250
  %253 = select i1 %252, i32 %250, i32 %251
  store i32 %253, i32* %34, align 8
  call void @llvm.lifetime.start.p0i8(i64 312, i8* nonnull %112) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %112, i8* align 8 bitcast ({ %class.SkMatrix*, %class.SkStrokeRec*, %"class.SkPath::RangeIter", %"class.SkPath::RangeIter", i32, [4 x i8], %struct.SkPoint*, float*, %struct.SkPoint*, [8 x i32], [8 x %struct.SkPoint*], [8 x float*], i32, i32, %"struct.std::__1::array.21", %"struct.std::__1::array.21", %"struct.std::__1::array.21" }* @__const._ZN27GrStrokeIndirectTessellator12writeBuffersEP20GrDrawIndirectWriterP14GrVertexWriterRK8SkMatrixmii.iter to i8*), i64 312, i1 false)
  store %class.SkMatrix* %2, %class.SkMatrix** %113, align 8
  store %class.SkStrokeRec* %183, %class.SkStrokeRec** %114, align 8
  store %struct.SkPoint* null, %struct.SkPoint** %117, align 8
  store i32 0, i32* %118, align 8
  store i32 0, i32* %119, align 4
  %254 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %178, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %120, i8 0, i64 48, i1 false) #13
  %255 = load %class.SkPathRef*, %class.SkPathRef** %254, align 8
  %256 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %255, i64 0, i32 4, i32 0
  %257 = bitcast i8** %256 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %255, i64 0, i32 9
  %260 = load i8, i8* %259, align 8
  %261 = icmp eq i8 %260, 0
  br i1 %261, label %262, label %266

262:                                              ; preds = %247
  %263 = inttoptr i64 %258 to i8*
  %264 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %255, i64 0, i32 10
  %265 = load i8, i8* %264, align 1, !range !2
  br label %278

266:                                              ; preds = %247
  %267 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %255, i64 0, i32 1
  %268 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %255, i64 0, i32 3, i32 0
  %269 = load %struct.SkPoint*, %struct.SkPoint** %268, align 8
  %270 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %255, i64 0, i32 3, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %267, %struct.SkPoint* %269, i32 %271) #13
  %273 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %255, i64 0, i32 10
  %274 = zext i1 %272 to i8
  store i8 %274, i8* %273, align 1
  store i8 0, i8* %259, align 8
  %275 = load %class.SkPathRef*, %class.SkPathRef** %254, align 8
  %276 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %275, i64 0, i32 4, i32 0
  %277 = load i8*, i8** %276, align 8
  br label %278

278:                                              ; preds = %266, %262
  %279 = phi i8* [ %263, %262 ], [ %277, %266 ]
  %280 = phi %class.SkPathRef* [ %255, %262 ], [ %275, %266 ]
  %281 = phi i8 [ %265, %262 ], [ %274, %266 ]
  %282 = icmp eq i8 %281, 0
  br i1 %282, label %290, label %283

283:                                              ; preds = %278
  %284 = icmp eq i8* %279, null
  br i1 %284, label %290, label %285

285:                                              ; preds = %283
  %286 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %280, i64 0, i32 4, i32 2
  %287 = load i32, i32* %286, align 4
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds i8, i8* %279, i64 %288
  br label %290

290:                                              ; preds = %278, %283, %285
  %291 = phi i8* [ %289, %285 ], [ null, %283 ], [ %279, %278 ]
  %292 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %280, i64 0, i32 3, i32 0
  %293 = bitcast %struct.SkPoint** %292 to i64*
  %294 = load i64, i64* %293, align 8
  %295 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %280, i64 0, i32 5, i32 0
  %296 = bitcast float** %295 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = ptrtoint i8* %291 to i64
  store i64 %258, i64* %121, align 8
  store i64 %294, i64* %123, align 8
  store i64 %297, i64* %125, align 8
  store i64 %298, i64* %126, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %128, i8 0, i64 16, i1 false) #13
  %299 = call zeroext i1 @_ZN16GrStrokeIterator4nextEv(%class.GrStrokeIterator* nonnull %10)
  br i1 %299, label %300, label %989

300:                                              ; preds = %290, %984
  %301 = phi i8* [ %987, %984 ], [ %179, %290 ]
  %302 = phi float* [ %986, %984 ], [ %180, %290 ]
  %303 = phi <2 x float> [ %985, %984 ], [ %182, %290 ]
  %304 = load i32, i32* %118, align 8
  %305 = add nsw i32 %304, 1
  %306 = and i32 %305, 7
  %307 = zext i32 %306 to i64
  %308 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 8, i64 %307
  %309 = load i32, i32* %308, align 4
  %310 = icmp slt i32 %309, 6
  br i1 %310, label %311, label %984

311:                                              ; preds = %300
  %312 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 9, i64 %307
  %313 = load %struct.SkPoint*, %struct.SkPoint** %312, align 8
  %314 = load i8, i8* %104, align 4, !range !2
  %315 = icmp eq i8 %314, 0
  br i1 %315, label %362, label %316

316:                                              ; preds = %311
  %317 = and i32 %304, 7
  %318 = zext i32 %317 to i64
  %319 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 9, i64 %318
  %320 = load %struct.SkPoint*, %struct.SkPoint** %319, align 8
  %321 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 8, i64 %318
  %322 = load i32, i32* %321, align 4
  switch i32 %322, label %362 [
    i32 4, label %323
    i32 2, label %339
    i32 3, label %339
    i32 1, label %355
    i32 6, label %358
    i32 5, label %358
    i32 7, label %361
  ]

323:                                              ; preds = %316
  %324 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %320, i64 2
  %325 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %324, i64 0, i32 0
  %326 = load float, float* %325, align 4
  %327 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %320, i64 3, i32 0
  %328 = load float, float* %327, align 4
  %329 = fcmp une float %326, %328
  br i1 %329, label %336, label %330

330:                                              ; preds = %323
  %331 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %320, i64 2, i32 1
  %332 = load float, float* %331, align 4
  %333 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %320, i64 3, i32 1
  %334 = load float, float* %333, align 4
  %335 = fcmp une float %332, %334
  br i1 %335, label %336, label %339

336:                                              ; preds = %323, %330
  %337 = bitcast %struct.SkPoint* %324 to <2 x float>*
  %338 = load <2 x float>, <2 x float>* %337, align 4
  br label %362

339:                                              ; preds = %330, %316, %316
  %340 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %320, i64 1
  %341 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %340, i64 0, i32 0
  %342 = load float, float* %341, align 4
  %343 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %320, i64 2, i32 0
  %344 = load float, float* %343, align 4
  %345 = fcmp une float %342, %344
  br i1 %345, label %352, label %346

346:                                              ; preds = %339
  %347 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %320, i64 1, i32 1
  %348 = load float, float* %347, align 4
  %349 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %320, i64 2, i32 1
  %350 = load float, float* %349, align 4
  %351 = fcmp une float %348, %350
  br i1 %351, label %352, label %355

352:                                              ; preds = %339, %346
  %353 = bitcast %struct.SkPoint* %340 to <2 x float>*
  %354 = load <2 x float>, <2 x float>* %353, align 4
  br label %362

355:                                              ; preds = %346, %316
  %356 = bitcast %struct.SkPoint* %320 to <2 x float>*
  %357 = load <2 x float>, <2 x float>* %356, align 4
  br label %362

358:                                              ; preds = %316, %316
  %359 = bitcast %struct.SkPoint* %313 to <2 x float>*
  %360 = load <2 x float>, <2 x float>* %359, align 4
  br label %362

361:                                              ; preds = %316
  call void @llvm.trap()
  unreachable

362:                                              ; preds = %311, %336, %352, %355, %358, %316
  %363 = phi <2 x float> [ %303, %311 ], [ %303, %316 ], [ %360, %358 ], [ %357, %355 ], [ %354, %352 ], [ %338, %336 ]
  switch i32 %309, label %984 [
    i32 1, label %364
    i32 3, label %417
    i32 2, label %417
    i32 4, label %569
    i32 5, label %974
  ]

364:                                              ; preds = %362
  br i1 %315, label %411, label %365

365:                                              ; preds = %364
  %366 = bitcast %struct.SkPoint* %313 to i32*
  %367 = load i32, i32* %366, align 4
  %368 = load i32, i32* %93, align 32
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 0, i32 0, i32 0, i64 0, i64 %369
  %371 = bitcast float* %370 to i32*
  store i32 %367, i32* %371, align 4
  %372 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 0, i32 1
  %373 = bitcast float* %372 to i32*
  %374 = load i32, i32* %373, align 4
  %375 = load i32, i32* %93, align 32
  %376 = add nsw i32 %375, 4
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 0, i32 0, i32 0, i64 0, i64 %377
  %379 = bitcast float* %378 to i32*
  store i32 %374, i32* %379, align 4
  %380 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 1
  %381 = bitcast %struct.SkPoint* %380 to i32*
  %382 = load i32, i32* %381, align 4
  %383 = load i32, i32* %93, align 32
  %384 = sext i32 %383 to i64
  %385 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 0, i32 0, i32 0, i64 1, i64 %384
  %386 = bitcast float* %385 to i32*
  store i32 %382, i32* %386, align 4
  %387 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 1, i32 1
  %388 = bitcast float* %387 to i32*
  %389 = load i32, i32* %388, align 4
  %390 = load i32, i32* %93, align 32
  %391 = add nsw i32 %390, 4
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 0, i32 0, i32 0, i64 1, i64 %392
  %394 = bitcast float* %393 to i32*
  store i32 %389, i32* %394, align 4
  %395 = extractelement <2 x float> %363, i32 0
  %396 = load i32, i32* %93, align 32
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 0, i32 0, i32 1, i64 %397
  store float %395, float* %398, align 4
  %399 = extractelement <2 x float> %363, i32 1
  %400 = load i32, i32* %93, align 32
  %401 = add nsw i32 %400, 4
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 0, i32 0, i32 1, i64 %402
  store float %399, float* %403, align 4
  %404 = load i32, i32* %93, align 32
  %405 = sext i32 %404 to i64
  %406 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 0, i32 1, i64 %405
  store i8* %301, i8** %406, align 8
  %407 = load i32, i32* %93, align 32
  %408 = add nsw i32 %407, 1
  store i32 %408, i32* %93, align 32
  %409 = icmp eq i32 %407, 3
  br i1 %409, label %410, label %415

410:                                              ; preds = %365
  call fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter10flushLinesILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"* nonnull %9) #13
  br label %415

411:                                              ; preds = %364
  %412 = load i32*, i32** %97, align 8
  %413 = load i32, i32* %412, align 4
  %414 = add nsw i32 %413, 1
  store i32 %414, i32* %412, align 4
  br label %984

415:                                              ; preds = %410, %365
  %416 = getelementptr inbounds i8, i8* %301, i64 1
  br label %984

417:                                              ; preds = %362, %362
  %418 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 1, i32 0
  %419 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 1, i32 1
  %420 = bitcast float* %418 to <2 x float>*
  %421 = load <2 x float>, <2 x float>* %420, align 4
  %422 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 0, i32 1
  %423 = bitcast %struct.SkPoint* %313 to <2 x float>*
  %424 = load <2 x float>, <2 x float>* %423, align 4
  %425 = fsub <2 x float> %421, %424
  %426 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 2, i32 0
  %427 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 2, i32 1
  %428 = bitcast float* %426 to <2 x float>*
  %429 = load <2 x float>, <2 x float>* %428, align 4
  %430 = fsub <2 x float> %429, %421
  %431 = shufflevector <2 x float> %430, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %432 = fmul <2 x float> %425, %431
  %433 = extractelement <2 x float> %432, i32 0
  %434 = extractelement <2 x float> %432, i32 1
  %435 = fsub float %433, %434
  %436 = fcmp oeq float %435, 0.000000e+00
  br i1 %436, label %437, label %510

437:                                              ; preds = %417
  %438 = fmul <2 x float> %425, %430
  %439 = extractelement <2 x float> %438, i32 0
  %440 = extractelement <2 x float> %438, i32 1
  %441 = fadd float %439, %440
  %442 = fcmp olt float %441, 0.000000e+00
  br i1 %442, label %443, label %510

443:                                              ; preds = %437
  %444 = load i32*, i32** %97, align 8
  %445 = load i32, i32* %109, align 32
  %446 = sext i32 %445 to i64
  %447 = getelementptr inbounds i32, i32* %444, i64 %446
  %448 = load i32, i32* %447, align 4
  %449 = add nsw i32 %448, 1
  store i32 %449, i32* %447, align 4
  %450 = load i32, i32* %109, align 32
  %451 = trunc i32 %450 to i8
  %452 = sub i8 0, %451
  %453 = getelementptr inbounds i8, i8* %301, i64 1
  store i8 %452, i8* %301, align 1
  %454 = load i8, i8* %104, align 4, !range !2
  %455 = icmp eq i8 %454, 0
  br i1 %455, label %500, label %456

456:                                              ; preds = %443
  %457 = bitcast %struct.SkPoint* %313 to i32*
  %458 = load i32, i32* %457, align 4
  %459 = load i32, i32* %93, align 32
  %460 = sext i32 %459 to i64
  %461 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 0, i32 0, i32 0, i64 0, i64 %460
  %462 = bitcast float* %461 to i32*
  store i32 %458, i32* %462, align 4
  %463 = bitcast float* %422 to i32*
  %464 = load i32, i32* %463, align 4
  %465 = load i32, i32* %93, align 32
  %466 = add nsw i32 %465, 4
  %467 = sext i32 %466 to i64
  %468 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 0, i32 0, i32 0, i64 0, i64 %467
  %469 = bitcast float* %468 to i32*
  store i32 %464, i32* %469, align 4
  %470 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 1
  %471 = bitcast %struct.SkPoint* %470 to i32*
  %472 = load i32, i32* %471, align 4
  %473 = load i32, i32* %93, align 32
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 0, i32 0, i32 0, i64 1, i64 %474
  %476 = bitcast float* %475 to i32*
  store i32 %472, i32* %476, align 4
  %477 = bitcast float* %419 to i32*
  %478 = load i32, i32* %477, align 4
  %479 = load i32, i32* %93, align 32
  %480 = add nsw i32 %479, 4
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 0, i32 0, i32 0, i64 1, i64 %481
  %483 = bitcast float* %482 to i32*
  store i32 %478, i32* %483, align 4
  %484 = extractelement <2 x float> %363, i32 0
  %485 = load i32, i32* %93, align 32
  %486 = sext i32 %485 to i64
  %487 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 0, i32 0, i32 1, i64 %486
  store float %484, float* %487, align 4
  %488 = extractelement <2 x float> %363, i32 1
  %489 = load i32, i32* %93, align 32
  %490 = add nsw i32 %489, 4
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 0, i32 0, i32 1, i64 %491
  store float %488, float* %492, align 4
  %493 = load i32, i32* %93, align 32
  %494 = sext i32 %493 to i64
  %495 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 0, i32 1, i64 %494
  store i8* %453, i8** %495, align 8
  %496 = load i32, i32* %93, align 32
  %497 = add nsw i32 %496, 1
  store i32 %497, i32* %93, align 32
  %498 = icmp eq i32 %496, 3
  br i1 %498, label %499, label %504

499:                                              ; preds = %456
  call fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter10flushLinesILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"* nonnull %9) #13
  br label %504

500:                                              ; preds = %443
  %501 = load i32*, i32** %97, align 8
  %502 = load i32, i32* %501, align 4
  %503 = add nsw i32 %502, 1
  store i32 %503, i32* %501, align 4
  br label %506

504:                                              ; preds = %499, %456
  %505 = getelementptr inbounds i8, i8* %301, i64 2
  br label %506

506:                                              ; preds = %500, %504
  %507 = phi i8* [ %505, %504 ], [ %453, %500 ]
  %508 = load i32, i32* %28, align 8
  %509 = add nsw i32 %508, 1
  store i32 %509, i32* %28, align 8
  br label %984

510:                                              ; preds = %417, %437
  %511 = getelementptr inbounds i8, i8* %301, i64 1
  %512 = load i32, i32* %94, align 32
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 1, i32 0, i32 0, i64 0, i64 %513
  %515 = extractelement <2 x float> %424, i32 0
  store float %515, float* %514, align 4
  %516 = bitcast float* %422 to i32*
  %517 = load i32, i32* %516, align 4
  %518 = load i32, i32* %94, align 32
  %519 = add nsw i32 %518, 4
  %520 = sext i32 %519 to i64
  %521 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 1, i32 0, i32 0, i64 0, i64 %520
  %522 = bitcast float* %521 to i32*
  store i32 %517, i32* %522, align 4
  %523 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 1
  %524 = bitcast %struct.SkPoint* %523 to i32*
  %525 = load i32, i32* %524, align 4
  %526 = load i32, i32* %94, align 32
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 1, i32 0, i32 0, i64 1, i64 %527
  %529 = bitcast float* %528 to i32*
  store i32 %525, i32* %529, align 4
  %530 = bitcast float* %419 to i32*
  %531 = load i32, i32* %530, align 4
  %532 = load i32, i32* %94, align 32
  %533 = add nsw i32 %532, 4
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 1, i32 0, i32 0, i64 1, i64 %534
  %536 = bitcast float* %535 to i32*
  store i32 %531, i32* %536, align 4
  %537 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 2
  %538 = bitcast %struct.SkPoint* %537 to i32*
  %539 = load i32, i32* %538, align 4
  %540 = load i32, i32* %94, align 32
  %541 = sext i32 %540 to i64
  %542 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 1, i32 0, i32 0, i64 2, i64 %541
  %543 = bitcast float* %542 to i32*
  store i32 %539, i32* %543, align 4
  %544 = bitcast float* %427 to i32*
  %545 = load i32, i32* %544, align 4
  %546 = load i32, i32* %94, align 32
  %547 = add nsw i32 %546, 4
  %548 = sext i32 %547 to i64
  %549 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 1, i32 0, i32 0, i64 2, i64 %548
  %550 = bitcast float* %549 to i32*
  store i32 %545, i32* %550, align 4
  br i1 %315, label %561, label %551

551:                                              ; preds = %510
  %552 = extractelement <2 x float> %363, i32 0
  %553 = load i32, i32* %94, align 32
  %554 = sext i32 %553 to i64
  %555 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 1, i32 0, i32 1, i64 %554
  store float %552, float* %555, align 4
  %556 = extractelement <2 x float> %363, i32 1
  %557 = load i32, i32* %94, align 32
  %558 = add nsw i32 %557, 4
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 1, i32 0, i32 1, i64 %559
  store float %556, float* %560, align 4
  br label %561

561:                                              ; preds = %551, %510
  %562 = load i32, i32* %94, align 32
  %563 = sext i32 %562 to i64
  %564 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 1, i32 1, i64 %563
  store i8* %301, i8** %564, align 8
  %565 = load i32, i32* %94, align 32
  %566 = add nsw i32 %565, 1
  store i32 %566, i32* %94, align 32
  %567 = icmp eq i32 %565, 3
  br i1 %567, label %568, label %984

568:                                              ; preds = %561
  call fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter10flushQuadsILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"* nonnull %9) #13
  br label %984

569:                                              ; preds = %362
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %11) #13
  store i8 -86, i8* %11, align 1
  %570 = call i32 @_ZN11GrPathUtils23findCubicConvex180ChopsEPK7SkPointPfPb(%struct.SkPoint* %313, float* %302, i8* nonnull %11) #13
  %571 = load i8, i8* %11, align 1, !range !2
  %572 = icmp ne i8 %571, 0
  %573 = icmp sgt i32 %570, 0
  %574 = and i1 %573, %572
  br i1 %574, label %575, label %584

575:                                              ; preds = %569
  %576 = load i32*, i32** %97, align 8
  %577 = load i32, i32* %109, align 32
  %578 = sext i32 %577 to i64
  %579 = getelementptr inbounds i32, i32* %576, i64 %578
  %580 = load i32, i32* %579, align 4
  %581 = add nsw i32 %580, %570
  store i32 %581, i32* %579, align 4
  %582 = load i32, i32* %109, align 32
  %583 = trunc i32 %582 to i8
  br label %584

584:                                              ; preds = %575, %569
  %585 = phi i8 [ %583, %575 ], [ 0, %569 ]
  switch i32 %570, label %758 [
    i32 0, label %586
    i32 1, label %666
  ]

586:                                              ; preds = %584
  %587 = load i8, i8* %104, align 4, !range !2
  %588 = icmp eq i8 %587, 0
  %589 = bitcast %struct.SkPoint* %313 to i32*
  %590 = load i32, i32* %589, align 4
  %591 = load i32, i32* %95, align 32
  %592 = sext i32 %591 to i64
  %593 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 0, i64 %592
  %594 = bitcast float* %593 to i32*
  store i32 %590, i32* %594, align 4
  %595 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 0, i32 1
  %596 = bitcast float* %595 to i32*
  %597 = load i32, i32* %596, align 4
  %598 = load i32, i32* %95, align 32
  %599 = add nsw i32 %598, 4
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 0, i64 %600
  %602 = bitcast float* %601 to i32*
  store i32 %597, i32* %602, align 4
  %603 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 1
  %604 = bitcast %struct.SkPoint* %603 to i32*
  %605 = load i32, i32* %604, align 4
  %606 = load i32, i32* %95, align 32
  %607 = sext i32 %606 to i64
  %608 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 1, i64 %607
  %609 = bitcast float* %608 to i32*
  store i32 %605, i32* %609, align 4
  %610 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 1, i32 1
  %611 = bitcast float* %610 to i32*
  %612 = load i32, i32* %611, align 4
  %613 = load i32, i32* %95, align 32
  %614 = add nsw i32 %613, 4
  %615 = sext i32 %614 to i64
  %616 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 1, i64 %615
  %617 = bitcast float* %616 to i32*
  store i32 %612, i32* %617, align 4
  %618 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 2
  %619 = bitcast %struct.SkPoint* %618 to i32*
  %620 = load i32, i32* %619, align 4
  %621 = load i32, i32* %95, align 32
  %622 = sext i32 %621 to i64
  %623 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 2, i64 %622
  %624 = bitcast float* %623 to i32*
  store i32 %620, i32* %624, align 4
  %625 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 2, i32 1
  %626 = bitcast float* %625 to i32*
  %627 = load i32, i32* %626, align 4
  %628 = load i32, i32* %95, align 32
  %629 = add nsw i32 %628, 4
  %630 = sext i32 %629 to i64
  %631 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 2, i64 %630
  %632 = bitcast float* %631 to i32*
  store i32 %627, i32* %632, align 4
  %633 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 3
  %634 = bitcast %struct.SkPoint* %633 to i32*
  %635 = load i32, i32* %634, align 4
  %636 = load i32, i32* %95, align 32
  %637 = sext i32 %636 to i64
  %638 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 3, i64 %637
  %639 = bitcast float* %638 to i32*
  store i32 %635, i32* %639, align 4
  %640 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 3, i32 1
  %641 = bitcast float* %640 to i32*
  %642 = load i32, i32* %641, align 4
  %643 = load i32, i32* %95, align 32
  %644 = add nsw i32 %643, 4
  %645 = sext i32 %644 to i64
  %646 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 3, i64 %645
  %647 = bitcast float* %646 to i32*
  store i32 %642, i32* %647, align 4
  br i1 %588, label %658, label %648

648:                                              ; preds = %586
  %649 = extractelement <2 x float> %363, i32 0
  %650 = load i32, i32* %95, align 32
  %651 = sext i32 %650 to i64
  %652 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 1, i64 %651
  store float %649, float* %652, align 4
  %653 = extractelement <2 x float> %363, i32 1
  %654 = load i32, i32* %95, align 32
  %655 = add nsw i32 %654, 4
  %656 = sext i32 %655 to i64
  %657 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 1, i64 %656
  store float %653, float* %657, align 4
  br label %658

658:                                              ; preds = %648, %586
  %659 = load i32, i32* %95, align 32
  %660 = sext i32 %659 to i64
  %661 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 1, i64 %660
  store i8* %301, i8** %661, align 8
  %662 = load i32, i32* %95, align 32
  %663 = add nsw i32 %662, 1
  store i32 %663, i32* %95, align 32
  %664 = icmp eq i32 %662, 3
  br i1 %664, label %665, label %967

665:                                              ; preds = %658
  call fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter11flushCubicsILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"* nonnull %9) #13
  br label %967

666:                                              ; preds = %584
  %667 = or i8 %585, 16
  %668 = sub nsw i8 0, %667
  %669 = getelementptr inbounds i8, i8* %301, i64 1
  store i8 %668, i8* %301, align 1
  %670 = bitcast float* %302 to i32*
  %671 = load i32, i32* %670, align 4
  %672 = load i8, i8* %104, align 4, !range !2
  %673 = icmp eq i8 %672, 0
  %674 = bitcast %struct.SkPoint* %313 to i32*
  %675 = load i32, i32* %674, align 4
  %676 = load i32, i32* %96, align 32
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 3, i32 0, i32 0, i64 0, i64 %677
  %679 = bitcast float* %678 to i32*
  store i32 %675, i32* %679, align 4
  %680 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 0, i32 1
  %681 = bitcast float* %680 to i32*
  %682 = load i32, i32* %681, align 4
  %683 = load i32, i32* %96, align 32
  %684 = add nsw i32 %683, 4
  %685 = sext i32 %684 to i64
  %686 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 3, i32 0, i32 0, i64 0, i64 %685
  %687 = bitcast float* %686 to i32*
  store i32 %682, i32* %687, align 4
  %688 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 1
  %689 = bitcast %struct.SkPoint* %688 to i32*
  %690 = load i32, i32* %689, align 4
  %691 = load i32, i32* %96, align 32
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 3, i32 0, i32 0, i64 1, i64 %692
  %694 = bitcast float* %693 to i32*
  store i32 %690, i32* %694, align 4
  %695 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 1, i32 1
  %696 = bitcast float* %695 to i32*
  %697 = load i32, i32* %696, align 4
  %698 = load i32, i32* %96, align 32
  %699 = add nsw i32 %698, 4
  %700 = sext i32 %699 to i64
  %701 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 3, i32 0, i32 0, i64 1, i64 %700
  %702 = bitcast float* %701 to i32*
  store i32 %697, i32* %702, align 4
  %703 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 2
  %704 = bitcast %struct.SkPoint* %703 to i32*
  %705 = load i32, i32* %704, align 4
  %706 = load i32, i32* %96, align 32
  %707 = sext i32 %706 to i64
  %708 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 3, i32 0, i32 0, i64 2, i64 %707
  %709 = bitcast float* %708 to i32*
  store i32 %705, i32* %709, align 4
  %710 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 2, i32 1
  %711 = bitcast float* %710 to i32*
  %712 = load i32, i32* %711, align 4
  %713 = load i32, i32* %96, align 32
  %714 = add nsw i32 %713, 4
  %715 = sext i32 %714 to i64
  %716 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 3, i32 0, i32 0, i64 2, i64 %715
  %717 = bitcast float* %716 to i32*
  store i32 %712, i32* %717, align 4
  %718 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 3
  %719 = bitcast %struct.SkPoint* %718 to i32*
  %720 = load i32, i32* %719, align 4
  %721 = load i32, i32* %96, align 32
  %722 = sext i32 %721 to i64
  %723 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 3, i32 0, i32 0, i64 3, i64 %722
  %724 = bitcast float* %723 to i32*
  store i32 %720, i32* %724, align 4
  %725 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 3, i32 1
  %726 = bitcast float* %725 to i32*
  %727 = load i32, i32* %726, align 4
  %728 = load i32, i32* %96, align 32
  %729 = add nsw i32 %728, 4
  %730 = sext i32 %729 to i64
  %731 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 3, i32 0, i32 0, i64 3, i64 %730
  %732 = bitcast float* %731 to i32*
  store i32 %727, i32* %732, align 4
  br i1 %673, label %743, label %733

733:                                              ; preds = %666
  %734 = extractelement <2 x float> %363, i32 0
  %735 = load i32, i32* %96, align 32
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 3, i32 0, i32 1, i64 %736
  store float %734, float* %737, align 4
  %738 = extractelement <2 x float> %363, i32 1
  %739 = load i32, i32* %96, align 32
  %740 = add nsw i32 %739, 4
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 3, i32 0, i32 1, i64 %741
  store float %738, float* %742, align 4
  br label %743

743:                                              ; preds = %733, %666
  %744 = load i32, i32* %96, align 32
  %745 = sext i32 %744 to i64
  %746 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 3, i32 1, i64 %745
  store i8* %669, i8** %746, align 8
  %747 = load i32, i32* %96, align 32
  %748 = add nsw i32 %747, 1
  store i32 %748, i32* %96, align 32
  %749 = add nsw i32 %747, 4
  %750 = sext i32 %749 to i64
  %751 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 4, i32 0, i64 %750
  %752 = bitcast float* %751 to i32*
  store i32 %671, i32* %752, align 4
  %753 = sext i32 %747 to i64
  %754 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 4, i32 0, i64 %753
  %755 = bitcast float* %754 to i32*
  store i32 %671, i32* %755, align 4
  %756 = icmp eq i32 %747, 3
  br i1 %756, label %757, label %967

757:                                              ; preds = %743
  call fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter18flushChoppedCubicsILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"* nonnull %9) #13
  br label %967

758:                                              ; preds = %584
  %759 = or i8 %585, 32
  %760 = sub nsw i8 0, %759
  %761 = getelementptr inbounds i8, i8* %301, i64 1
  store i8 %760, i8* %301, align 1
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %129) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %129, i8 -1, i64 80, i1 false)
  call void @_Z13SkChopCubicAtPK7SkPointPS_PKfi(%struct.SkPoint* %313, %struct.SkPoint* nonnull %130, float* %302, i32 2) #13
  %762 = load i8, i8* %104, align 4, !range !2
  %763 = icmp eq i8 %762, 0
  %764 = load i32, i32* %131, align 16
  %765 = load i32, i32* %95, align 32
  %766 = sext i32 %765 to i64
  %767 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 0, i64 %766
  %768 = bitcast float* %767 to i32*
  store i32 %764, i32* %768, align 4
  %769 = load i32, i32* %133, align 4
  %770 = load i32, i32* %95, align 32
  %771 = add nsw i32 %770, 4
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 0, i64 %772
  %774 = bitcast float* %773 to i32*
  store i32 %769, i32* %774, align 4
  %775 = load i32, i32* %135, align 8
  %776 = load i32, i32* %95, align 32
  %777 = sext i32 %776 to i64
  %778 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 1, i64 %777
  %779 = bitcast float* %778 to i32*
  store i32 %775, i32* %779, align 4
  %780 = load i32, i32* %137, align 4
  %781 = load i32, i32* %95, align 32
  %782 = add nsw i32 %781, 4
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 1, i64 %783
  %785 = bitcast float* %784 to i32*
  store i32 %780, i32* %785, align 4
  %786 = load i32, i32* %139, align 16
  %787 = load i32, i32* %95, align 32
  %788 = sext i32 %787 to i64
  %789 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 2, i64 %788
  %790 = bitcast float* %789 to i32*
  store i32 %786, i32* %790, align 4
  %791 = load i32, i32* %141, align 4
  %792 = load i32, i32* %95, align 32
  %793 = add nsw i32 %792, 4
  %794 = sext i32 %793 to i64
  %795 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 2, i64 %794
  %796 = bitcast float* %795 to i32*
  store i32 %791, i32* %796, align 4
  %797 = load i32, i32* %143, align 8
  %798 = load i32, i32* %95, align 32
  %799 = sext i32 %798 to i64
  %800 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 3, i64 %799
  %801 = bitcast float* %800 to i32*
  store i32 %797, i32* %801, align 4
  %802 = load i32, i32* %145, align 4
  %803 = load i32, i32* %95, align 32
  %804 = add nsw i32 %803, 4
  %805 = sext i32 %804 to i64
  %806 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 3, i64 %805
  %807 = bitcast float* %806 to i32*
  store i32 %802, i32* %807, align 4
  br i1 %763, label %818, label %808

808:                                              ; preds = %758
  %809 = extractelement <2 x float> %363, i32 0
  %810 = load i32, i32* %95, align 32
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 1, i64 %811
  store float %809, float* %812, align 4
  %813 = extractelement <2 x float> %363, i32 1
  %814 = load i32, i32* %95, align 32
  %815 = add nsw i32 %814, 4
  %816 = sext i32 %815 to i64
  %817 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 1, i64 %816
  store float %813, float* %817, align 4
  br label %818

818:                                              ; preds = %808, %758
  %819 = load i32, i32* %95, align 32
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 1, i64 %820
  store i8* %761, i8** %821, align 8
  %822 = load i32, i32* %95, align 32
  %823 = add nsw i32 %822, 1
  store i32 %823, i32* %95, align 32
  %824 = icmp eq i32 %822, 3
  br i1 %824, label %825, label %828

825:                                              ; preds = %818
  call fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter11flushCubicsILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"* nonnull %9) #13
  %826 = load i32, i32* %95, align 32
  %827 = load i32, i32* %145, align 4
  br label %828

828:                                              ; preds = %818, %825
  %829 = phi i32 [ %802, %818 ], [ %827, %825 ]
  %830 = phi i32 [ %823, %818 ], [ %826, %825 ]
  %831 = load <2 x float>, <2 x float>* %146, align 8
  %832 = getelementptr inbounds i8, i8* %301, i64 2
  %833 = load i8, i8* %104, align 4, !range !2
  %834 = icmp eq i8 %833, 0
  %835 = bitcast <2 x float> %831 to <2 x i32>
  %836 = extractelement <2 x i32> %835, i32 0
  %837 = sext i32 %830 to i64
  %838 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 0, i64 %837
  %839 = bitcast float* %838 to i32*
  store i32 %836, i32* %839, align 4
  %840 = load i32, i32* %95, align 32
  %841 = add nsw i32 %840, 4
  %842 = sext i32 %841 to i64
  %843 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 0, i64 %842
  %844 = bitcast float* %843 to i32*
  store i32 %829, i32* %844, align 4
  %845 = load i32, i32* %148, align 16
  %846 = load i32, i32* %95, align 32
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 1, i64 %847
  %849 = bitcast float* %848 to i32*
  store i32 %845, i32* %849, align 4
  %850 = load i32, i32* %150, align 4
  %851 = load i32, i32* %95, align 32
  %852 = add nsw i32 %851, 4
  %853 = sext i32 %852 to i64
  %854 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 1, i64 %853
  %855 = bitcast float* %854 to i32*
  store i32 %850, i32* %855, align 4
  %856 = load i32, i32* %152, align 8
  %857 = load i32, i32* %95, align 32
  %858 = sext i32 %857 to i64
  %859 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 2, i64 %858
  %860 = bitcast float* %859 to i32*
  store i32 %856, i32* %860, align 4
  %861 = load i32, i32* %154, align 4
  %862 = load i32, i32* %95, align 32
  %863 = add nsw i32 %862, 4
  %864 = sext i32 %863 to i64
  %865 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 2, i64 %864
  %866 = bitcast float* %865 to i32*
  store i32 %861, i32* %866, align 4
  %867 = load i32, i32* %156, align 16
  %868 = load i32, i32* %95, align 32
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 3, i64 %869
  %871 = bitcast float* %870 to i32*
  store i32 %867, i32* %871, align 4
  %872 = load i32, i32* %158, align 4
  %873 = load i32, i32* %95, align 32
  %874 = add nsw i32 %873, 4
  %875 = sext i32 %874 to i64
  %876 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 3, i64 %875
  %877 = bitcast float* %876 to i32*
  store i32 %872, i32* %877, align 4
  br i1 %834, label %888, label %878

878:                                              ; preds = %828
  %879 = extractelement <2 x float> %831, i32 0
  %880 = load i32, i32* %95, align 32
  %881 = sext i32 %880 to i64
  %882 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 1, i64 %881
  store float %879, float* %882, align 4
  %883 = extractelement <2 x float> %831, i32 1
  %884 = load i32, i32* %95, align 32
  %885 = add nsw i32 %884, 4
  %886 = sext i32 %885 to i64
  %887 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 1, i64 %886
  store float %883, float* %887, align 4
  br label %888

888:                                              ; preds = %878, %828
  %889 = load i32, i32* %95, align 32
  %890 = sext i32 %889 to i64
  %891 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 1, i64 %890
  store i8* %832, i8** %891, align 8
  %892 = load i32, i32* %95, align 32
  %893 = add nsw i32 %892, 1
  store i32 %893, i32* %95, align 32
  %894 = icmp eq i32 %892, 3
  br i1 %894, label %895, label %898

895:                                              ; preds = %888
  call fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter11flushCubicsILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"* nonnull %9) #13
  %896 = load i32, i32* %95, align 32
  %897 = load i32, i32* %158, align 4
  br label %898

898:                                              ; preds = %888, %895
  %899 = phi i32 [ %872, %888 ], [ %897, %895 ]
  %900 = phi i32 [ %893, %888 ], [ %896, %895 ]
  %901 = load <2 x float>, <2 x float>* %159, align 16
  %902 = getelementptr inbounds i8, i8* %301, i64 3
  %903 = load i8, i8* %104, align 4, !range !2
  %904 = icmp eq i8 %903, 0
  %905 = bitcast <2 x float> %901 to <2 x i32>
  %906 = extractelement <2 x i32> %905, i32 0
  %907 = sext i32 %900 to i64
  %908 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 0, i64 %907
  %909 = bitcast float* %908 to i32*
  store i32 %906, i32* %909, align 4
  %910 = load i32, i32* %95, align 32
  %911 = add nsw i32 %910, 4
  %912 = sext i32 %911 to i64
  %913 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 0, i64 %912
  %914 = bitcast float* %913 to i32*
  store i32 %899, i32* %914, align 4
  %915 = load i32, i32* %161, align 8
  %916 = load i32, i32* %95, align 32
  %917 = sext i32 %916 to i64
  %918 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 1, i64 %917
  %919 = bitcast float* %918 to i32*
  store i32 %915, i32* %919, align 4
  %920 = load i32, i32* %163, align 4
  %921 = load i32, i32* %95, align 32
  %922 = add nsw i32 %921, 4
  %923 = sext i32 %922 to i64
  %924 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 1, i64 %923
  %925 = bitcast float* %924 to i32*
  store i32 %920, i32* %925, align 4
  %926 = load i32, i32* %165, align 16
  %927 = load i32, i32* %95, align 32
  %928 = sext i32 %927 to i64
  %929 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 2, i64 %928
  %930 = bitcast float* %929 to i32*
  store i32 %926, i32* %930, align 4
  %931 = load i32, i32* %167, align 4
  %932 = load i32, i32* %95, align 32
  %933 = add nsw i32 %932, 4
  %934 = sext i32 %933 to i64
  %935 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 2, i64 %934
  %936 = bitcast float* %935 to i32*
  store i32 %931, i32* %936, align 4
  %937 = load i32, i32* %169, align 8
  %938 = load i32, i32* %95, align 32
  %939 = sext i32 %938 to i64
  %940 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 3, i64 %939
  %941 = bitcast float* %940 to i32*
  store i32 %937, i32* %941, align 4
  %942 = load i32, i32* %171, align 4
  %943 = load i32, i32* %95, align 32
  %944 = add nsw i32 %943, 4
  %945 = sext i32 %944 to i64
  %946 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 0, i64 3, i64 %945
  %947 = bitcast float* %946 to i32*
  store i32 %942, i32* %947, align 4
  br i1 %904, label %958, label %948

948:                                              ; preds = %898
  %949 = extractelement <2 x float> %901, i32 0
  %950 = load i32, i32* %95, align 32
  %951 = sext i32 %950 to i64
  %952 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 1, i64 %951
  store float %949, float* %952, align 4
  %953 = extractelement <2 x float> %901, i32 1
  %954 = load i32, i32* %95, align 32
  %955 = add nsw i32 %954, 4
  %956 = sext i32 %955 to i64
  %957 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 0, i32 1, i64 %956
  store float %953, float* %957, align 4
  br label %958

958:                                              ; preds = %948, %898
  %959 = load i32, i32* %95, align 32
  %960 = sext i32 %959 to i64
  %961 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %9, i64 0, i32 2, i32 1, i64 %960
  store i8* %902, i8** %961, align 8
  %962 = load i32, i32* %95, align 32
  %963 = add nsw i32 %962, 1
  store i32 %963, i32* %95, align 32
  %964 = icmp eq i32 %962, 3
  br i1 %964, label %965, label %966

965:                                              ; preds = %958
  call fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter11flushCubicsILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"* nonnull %9) #13
  br label %966

966:                                              ; preds = %958, %965
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %129) #13
  br label %967

967:                                              ; preds = %757, %743, %665, %658, %966
  %968 = phi i8* [ %761, %966 ], [ %301, %658 ], [ %301, %665 ], [ %669, %743 ], [ %669, %757 ]
  %969 = add nsw i32 %570, 1
  %970 = sext i32 %969 to i64
  %971 = getelementptr inbounds i8, i8* %968, i64 %970
  %972 = sext i32 %570 to i64
  %973 = getelementptr inbounds float, float* %302, i64 %972
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %11) #13
  br label %984

974:                                              ; preds = %362
  %975 = load i32*, i32** %97, align 8
  %976 = load i32, i32* %109, align 32
  %977 = sext i32 %976 to i64
  %978 = getelementptr inbounds i32, i32* %975, i64 %977
  %979 = load i32, i32* %978, align 4
  %980 = add nsw i32 %979, 1
  store i32 %980, i32* %978, align 4
  %981 = load i32, i32* %109, align 32
  %982 = trunc i32 %981 to i8
  %983 = getelementptr inbounds i8, i8* %301, i64 1
  store i8 %982, i8* %301, align 1
  br label %984

984:                                              ; preds = %568, %561, %415, %411, %967, %974, %362, %506, %300
  %985 = phi <2 x float> [ %303, %300 ], [ %363, %506 ], [ %363, %362 ], [ %363, %974 ], [ %363, %967 ], [ %363, %411 ], [ %363, %415 ], [ %363, %561 ], [ %363, %568 ]
  %986 = phi float* [ %302, %300 ], [ %302, %506 ], [ %302, %362 ], [ %302, %974 ], [ %973, %967 ], [ %302, %411 ], [ %302, %415 ], [ %302, %561 ], [ %302, %568 ]
  %987 = phi i8* [ %301, %300 ], [ %507, %506 ], [ %301, %362 ], [ %983, %974 ], [ %971, %967 ], [ %301, %411 ], [ %416, %415 ], [ %511, %561 ], [ %511, %568 ]
  %988 = call zeroext i1 @_ZN16GrStrokeIterator4nextEv(%class.GrStrokeIterator* nonnull %10)
  br i1 %988, label %300, label %989

989:                                              ; preds = %984, %290
  %990 = phi <2 x float> [ %182, %290 ], [ %985, %984 ]
  %991 = phi float* [ %180, %290 ], [ %986, %984 ]
  %992 = phi i8* [ %179, %290 ], [ %987, %984 ]
  call void @llvm.lifetime.end.p0i8(i64 312, i8* nonnull %112) #13
  %993 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %178, i64 0, i32 3
  %994 = load %"struct.GrStrokeTessellator::PathStrokeList"*, %"struct.GrStrokeTessellator::PathStrokeList"** %993, align 8
  %995 = icmp eq %"struct.GrStrokeTessellator::PathStrokeList"* %994, null
  br i1 %995, label %172, label %177

996:                                              ; preds = %172
  %997 = load i32, i32* %30, align 4
  %998 = add nsw i32 %997, 1
  store i32 %998, i32* %30, align 4
  br label %999

999:                                              ; preds = %172, %996
  %1000 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 1
  %1001 = load i32, i32* %1000, align 4
  %1002 = add nsw i32 %175, %1001
  store i32 %1002, i32* %29, align 8
  %1003 = icmp eq i32 %1001, 0
  br i1 %1003, label %1007, label %1004

1004:                                             ; preds = %999
  %1005 = load i32, i32* %30, align 4
  %1006 = add nsw i32 %1005, 1
  store i32 %1006, i32* %30, align 4
  br label %1007

1007:                                             ; preds = %1004, %999
  %1008 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 2
  %1009 = load i32, i32* %1008, align 4
  %1010 = add nsw i32 %1002, %1009
  store i32 %1010, i32* %29, align 8
  %1011 = icmp eq i32 %1009, 0
  br i1 %1011, label %1015, label %1012

1012:                                             ; preds = %1007
  %1013 = load i32, i32* %30, align 4
  %1014 = add nsw i32 %1013, 1
  store i32 %1014, i32* %30, align 4
  br label %1015

1015:                                             ; preds = %1012, %1007
  %1016 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 3
  %1017 = load i32, i32* %1016, align 4
  %1018 = add nsw i32 %1010, %1017
  store i32 %1018, i32* %29, align 8
  %1019 = icmp eq i32 %1017, 0
  br i1 %1019, label %1023, label %1020

1020:                                             ; preds = %1015
  %1021 = load i32, i32* %30, align 4
  %1022 = add nsw i32 %1021, 1
  store i32 %1022, i32* %30, align 4
  br label %1023

1023:                                             ; preds = %1020, %1015
  %1024 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 4
  %1025 = load i32, i32* %1024, align 4
  %1026 = add nsw i32 %1018, %1025
  store i32 %1026, i32* %29, align 8
  %1027 = icmp eq i32 %1025, 0
  br i1 %1027, label %1031, label %1028

1028:                                             ; preds = %1023
  %1029 = load i32, i32* %30, align 4
  %1030 = add nsw i32 %1029, 1
  store i32 %1030, i32* %30, align 4
  br label %1031

1031:                                             ; preds = %1028, %1023
  %1032 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 5
  %1033 = load i32, i32* %1032, align 4
  %1034 = add nsw i32 %1026, %1033
  store i32 %1034, i32* %29, align 8
  %1035 = icmp eq i32 %1033, 0
  br i1 %1035, label %1039, label %1036

1036:                                             ; preds = %1031
  %1037 = load i32, i32* %30, align 4
  %1038 = add nsw i32 %1037, 1
  store i32 %1038, i32* %30, align 4
  br label %1039

1039:                                             ; preds = %1036, %1031
  %1040 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 6
  %1041 = load i32, i32* %1040, align 4
  %1042 = add nsw i32 %1034, %1041
  store i32 %1042, i32* %29, align 8
  %1043 = icmp eq i32 %1041, 0
  br i1 %1043, label %1047, label %1044

1044:                                             ; preds = %1039
  %1045 = load i32, i32* %30, align 4
  %1046 = add nsw i32 %1045, 1
  store i32 %1046, i32* %30, align 4
  br label %1047

1047:                                             ; preds = %1044, %1039
  %1048 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 7
  %1049 = load i32, i32* %1048, align 4
  %1050 = add nsw i32 %1042, %1049
  store i32 %1050, i32* %29, align 8
  %1051 = icmp eq i32 %1049, 0
  br i1 %1051, label %1055, label %1052

1052:                                             ; preds = %1047
  %1053 = load i32, i32* %30, align 4
  %1054 = add nsw i32 %1053, 1
  store i32 %1054, i32* %30, align 4
  br label %1055

1055:                                             ; preds = %1052, %1047
  %1056 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 8
  %1057 = load i32, i32* %1056, align 4
  %1058 = add nsw i32 %1050, %1057
  store i32 %1058, i32* %29, align 8
  %1059 = icmp eq i32 %1057, 0
  br i1 %1059, label %1063, label %1060

1060:                                             ; preds = %1055
  %1061 = load i32, i32* %30, align 4
  %1062 = add nsw i32 %1061, 1
  store i32 %1062, i32* %30, align 4
  br label %1063

1063:                                             ; preds = %1060, %1055
  %1064 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 9
  %1065 = load i32, i32* %1064, align 4
  %1066 = add nsw i32 %1058, %1065
  store i32 %1066, i32* %29, align 8
  %1067 = icmp eq i32 %1065, 0
  br i1 %1067, label %1071, label %1068

1068:                                             ; preds = %1063
  %1069 = load i32, i32* %30, align 4
  %1070 = add nsw i32 %1069, 1
  store i32 %1070, i32* %30, align 4
  br label %1071

1071:                                             ; preds = %1068, %1063
  %1072 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 10
  %1073 = load i32, i32* %1072, align 4
  %1074 = add nsw i32 %1066, %1073
  store i32 %1074, i32* %29, align 8
  %1075 = icmp eq i32 %1073, 0
  br i1 %1075, label %1079, label %1076

1076:                                             ; preds = %1071
  %1077 = load i32, i32* %30, align 4
  %1078 = add nsw i32 %1077, 1
  store i32 %1078, i32* %30, align 4
  br label %1079

1079:                                             ; preds = %1076, %1071
  %1080 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 11
  %1081 = load i32, i32* %1080, align 4
  %1082 = add nsw i32 %1074, %1081
  store i32 %1082, i32* %29, align 8
  %1083 = icmp eq i32 %1081, 0
  br i1 %1083, label %1087, label %1084

1084:                                             ; preds = %1079
  %1085 = load i32, i32* %30, align 4
  %1086 = add nsw i32 %1085, 1
  store i32 %1086, i32* %30, align 4
  br label %1087

1087:                                             ; preds = %1084, %1079
  %1088 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 12
  %1089 = load i32, i32* %1088, align 4
  %1090 = add nsw i32 %1082, %1089
  store i32 %1090, i32* %29, align 8
  %1091 = icmp eq i32 %1089, 0
  br i1 %1091, label %1095, label %1092

1092:                                             ; preds = %1087
  %1093 = load i32, i32* %30, align 4
  %1094 = add nsw i32 %1093, 1
  store i32 %1094, i32* %30, align 4
  br label %1095

1095:                                             ; preds = %1092, %1087
  %1096 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 13
  %1097 = load i32, i32* %1096, align 4
  %1098 = add nsw i32 %1090, %1097
  store i32 %1098, i32* %29, align 8
  %1099 = icmp eq i32 %1097, 0
  br i1 %1099, label %1103, label %1100

1100:                                             ; preds = %1095
  %1101 = load i32, i32* %30, align 4
  %1102 = add nsw i32 %1101, 1
  store i32 %1102, i32* %30, align 4
  br label %1103

1103:                                             ; preds = %1100, %1095
  %1104 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 14
  %1105 = load i32, i32* %1104, align 4
  %1106 = add nsw i32 %1098, %1105
  store i32 %1106, i32* %29, align 8
  %1107 = icmp eq i32 %1105, 0
  br i1 %1107, label %1111, label %1108

1108:                                             ; preds = %1103
  %1109 = load i32, i32* %30, align 4
  %1110 = add nsw i32 %1109, 1
  store i32 %1110, i32* %30, align 4
  br label %1111

1111:                                             ; preds = %1108, %1103
  %1112 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 15
  %1113 = load i32, i32* %1112, align 4
  %1114 = add nsw i32 %1106, %1113
  store i32 %1114, i32* %29, align 8
  %1115 = icmp eq i32 %1113, 0
  br i1 %1115, label %1119, label %1116

1116:                                             ; preds = %1111
  %1117 = load i32, i32* %30, align 4
  %1118 = add nsw i32 %1117, 1
  store i32 %1118, i32* %30, align 4
  br label %1119

1119:                                             ; preds = %1116, %1111
  store i32 %1114, i32* %31, align 8
  call void @llvm.lifetime.end.p0i8(i64 896, i8* nonnull %90) #13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN16GrStrokeIterator4nextEv(%class.GrStrokeIterator*) local_unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 12
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %7 = load i32, i32* %6, align 8
  %8 = add nsw i32 %7, 1
  store i32 %8, i32* %6, align 8
  %9 = add nsw i32 %3, -1
  store i32 %9, i32* %2, align 4
  %10 = icmp sgt i32 %9, 1
  br i1 %10, label %219, label %11

11:                                               ; preds = %5
  %12 = and i32 %8, 7
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 7
  br i1 %16, label %17, label %18

17:                                               ; preds = %11
  store i32 0, i32* %2, align 4
  br label %18

18:                                               ; preds = %1, %11, %17
  %19 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 2, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 3, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %20, %22
  br i1 %23, label %217, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 2, i32 1
  %26 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 2, i32 2
  %27 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 7
  %28 = bitcast float** %26 to i64*
  %29 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %30 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 4
  %31 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 5
  %32 = bitcast %struct.SkPoint** %31 to i64*
  %33 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 6
  %34 = bitcast float** %33 to i64*
  %35 = bitcast %struct.SkPoint** %27 to i64*
  br label %36

36:                                               ; preds = %24, %214
  %37 = phi i8* [ %20, %24 ], [ %199, %214 ]
  %38 = load i8, i8* %37, align 1, !noalias !3
  %39 = zext i8 %38 to i32
  switch i8 %38, label %47 [
    i8 0, label %53
    i8 1, label %40
    i8 2, label %48
    i8 3, label %48
    i8 4, label %56
    i8 5, label %119
  ]

40:                                               ; preds = %36
  %41 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8, !noalias !3
  %42 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %41, i64 -1
  %43 = ptrtoint %struct.SkPoint* %42 to i64
  %44 = load i64, i64* %28, align 8, !noalias !3
  %45 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %41, i64 0, i32 0
  %46 = load float, float* %45, align 4
  br label %87

47:                                               ; preds = %36
  tail call void @llvm.trap() #13, !noalias !3
  unreachable

48:                                               ; preds = %36, %36
  %49 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8, !noalias !3
  %50 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %49, i64 -1
  %51 = ptrtoint %struct.SkPoint* %50 to i64
  %52 = load i64, i64* %28, align 8, !noalias !3
  br label %72

53:                                               ; preds = %36
  %54 = tail call zeroext i1 @_ZN16GrStrokeIterator17finishOpenContourEv(%class.GrStrokeIterator* %0)
  %55 = load i8*, i8** %19, align 8
  br i1 %54, label %180, label %197

56:                                               ; preds = %36
  %57 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8, !noalias !3
  %58 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %57, i64 -1
  %59 = ptrtoint %struct.SkPoint* %58 to i64
  %60 = load i64, i64* %28, align 8, !noalias !3
  %61 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %57, i64 2, i32 0
  %62 = load float, float* %61, align 4
  %63 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %57, i64 1, i32 0
  %64 = load float, float* %63, align 4
  %65 = fcmp oeq float %62, %64
  br i1 %65, label %66, label %102

66:                                               ; preds = %56
  %67 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %57, i64 2, i32 1
  %68 = load float, float* %67, align 4
  %69 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %57, i64 1, i32 1
  %70 = load float, float* %69, align 4
  %71 = fcmp oeq float %68, %70
  br i1 %71, label %72, label %102

72:                                               ; preds = %48, %66
  %73 = phi i64 [ %52, %48 ], [ %60, %66 ]
  %74 = phi i64 [ %51, %48 ], [ %59, %66 ]
  %75 = phi %struct.SkPoint* [ %50, %48 ], [ %58, %66 ]
  %76 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %75, i64 2, i32 0
  %77 = load float, float* %76, align 4
  %78 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %75, i64 1, i32 0
  %79 = load float, float* %78, align 4
  %80 = fcmp oeq float %77, %79
  br i1 %80, label %81, label %102

81:                                               ; preds = %72
  %82 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %75, i64 2, i32 1
  %83 = load float, float* %82, align 4
  %84 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %75, i64 1, i32 1
  %85 = load float, float* %84, align 4
  %86 = fcmp oeq float %83, %85
  br i1 %86, label %87, label %102

87:                                               ; preds = %40, %81
  %88 = phi float [ %79, %81 ], [ %46, %40 ]
  %89 = phi i64 [ %73, %81 ], [ %44, %40 ]
  %90 = phi i64 [ %74, %81 ], [ %43, %40 ]
  %91 = phi %struct.SkPoint* [ %75, %81 ], [ %42, %40 ]
  %92 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %91, i64 0, i32 0
  %93 = load float, float* %92, align 4
  %94 = fcmp oeq float %88, %93
  br i1 %94, label %95, label %102

95:                                               ; preds = %87
  %96 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %91, i64 1, i32 1
  %97 = load float, float* %96, align 4
  %98 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %91, i64 0, i32 1
  %99 = load float, float* %98, align 4
  %100 = fcmp oeq float %97, %99
  br i1 %100, label %101, label %102

101:                                              ; preds = %95
  store i64 %90, i64* %35, align 8
  br label %197

102:                                              ; preds = %87, %72, %56, %81, %95, %66
  %103 = phi i64 [ %73, %81 ], [ %89, %95 ], [ %60, %66 ], [ %60, %56 ], [ %73, %72 ], [ %89, %87 ]
  %104 = phi i64 [ %74, %81 ], [ %90, %95 ], [ %59, %66 ], [ %59, %56 ], [ %74, %72 ], [ %90, %87 ]
  %105 = phi %struct.SkPoint* [ %75, %81 ], [ %91, %95 ], [ %58, %66 ], [ %58, %56 ], [ %75, %72 ], [ %91, %87 ]
  %106 = inttoptr i64 %103 to float*
  %107 = load i32, i32* %29, align 8
  %108 = load i32, i32* %2, align 4
  %109 = add nsw i32 %108, %107
  %110 = and i32 %109, 7
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %111
  store i32 %39, i32* %112, align 4
  %113 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %111
  store %struct.SkPoint* %105, %struct.SkPoint** %113, align 8
  %114 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %111
  store float* %106, float** %114, align 8
  %115 = load i32, i32* %2, align 4
  %116 = add nsw i32 %115, 1
  store i32 %116, i32* %2, align 4
  %117 = icmp eq i32 %115, 0
  br i1 %117, label %118, label %180

118:                                              ; preds = %102
  store i32 %39, i32* %30, align 8
  store i64 %104, i64* %32, align 8
  store i64 %103, i64* %34, align 8
  br label %197

119:                                              ; preds = %36
  %120 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8, !noalias !3
  %121 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %120, i64 -1
  %122 = load i32, i32* %2, align 4
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %119
  store %struct.SkPoint* %121, %struct.SkPoint** %27, align 8
  br label %197

125:                                              ; preds = %119
  %126 = load %struct.SkPoint*, %struct.SkPoint** %31, align 8
  %127 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %121, i64 0, i32 0
  %128 = load float, float* %127, align 4
  %129 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %126, i64 0, i32 0
  %130 = load float, float* %129, align 4
  %131 = fcmp une float %128, %130
  %132 = bitcast %struct.SkPoint* %126 to i64*
  br i1 %131, label %139, label %133

133:                                              ; preds = %125
  %134 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %120, i64 -1, i32 1
  %135 = load float, float* %134, align 4
  %136 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %126, i64 0, i32 1
  %137 = load float, float* %136, align 4
  %138 = fcmp une float %135, %137
  br i1 %138, label %139, label %157

139:                                              ; preds = %125, %133
  %140 = bitcast %struct.SkPoint* %121 to i64*
  %141 = load i64, i64* %140, align 4
  %142 = load i64, i64* %132, align 4
  %143 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 13
  %144 = bitcast %"struct.std::__1::array.21"* %143 to i64*
  store i64 %141, i64* %144, align 8
  %145 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 13, i32 0, i64 1
  %146 = bitcast %struct.SkPoint* %145 to i64*
  store i64 %142, i64* %146, align 8
  %147 = getelementptr inbounds %"struct.std::__1::array.21", %"struct.std::__1::array.21"* %143, i64 0, i32 0, i64 0
  %148 = load i32, i32* %29, align 8
  %149 = add nsw i32 %148, %122
  %150 = and i32 %149, 7
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %151
  store i32 1, i32* %152, align 4
  %153 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %151
  store %struct.SkPoint* %147, %struct.SkPoint** %153, align 8
  %154 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %151
  store float* null, float** %154, align 8
  %155 = load i32, i32* %2, align 4
  %156 = add nsw i32 %155, 1
  store i32 %156, i32* %2, align 4
  br label %157

157:                                              ; preds = %139, %133
  %158 = phi i32 [ %156, %139 ], [ %122, %133 ]
  %159 = load i32, i32* %30, align 8
  %160 = load i64, i64* %34, align 8
  %161 = load i32, i32* %29, align 8
  %162 = add nsw i32 %158, %161
  %163 = and i32 %162, 7
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %164
  store i32 %159, i32* %165, align 4
  %166 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %164
  store %struct.SkPoint* %126, %struct.SkPoint** %166, align 8
  %167 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %164
  %168 = bitcast float** %167 to i64*
  store i64 %160, i64* %168, align 8
  %169 = load i32, i32* %2, align 4
  %170 = add nsw i32 %169, 1
  store i32 %170, i32* %2, align 4
  %171 = load i32, i32* %29, align 8
  %172 = add nsw i32 %171, %170
  %173 = and i32 %172, 7
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %174
  store i32 7, i32* %175, align 4
  %176 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %174
  store %struct.SkPoint* null, %struct.SkPoint** %176, align 8
  %177 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %174
  store float* null, float** %177, align 8
  %178 = load i32, i32* %2, align 4
  %179 = add nsw i32 %178, 1
  store i32 %179, i32* %2, align 4
  store %struct.SkPoint* null, %struct.SkPoint** %27, align 8
  br label %180

180:                                              ; preds = %102, %53, %157
  %181 = phi i8* [ %37, %157 ], [ %55, %53 ], [ %37, %102 ]
  %182 = getelementptr inbounds i8, i8* %181, i64 1
  store i8* %182, i8** %19, align 8
  %183 = load i8, i8* %181, align 1
  switch i8 %183, label %187 [
    i8 0, label %188
    i8 1, label %188
    i8 2, label %184
    i8 3, label %192
    i8 4, label %185
    i8 5, label %186
  ]

184:                                              ; preds = %180
  br label %188

185:                                              ; preds = %180
  br label %188

186:                                              ; preds = %180
  br label %188

187:                                              ; preds = %180
  tail call void @llvm.trap() #13
  unreachable

188:                                              ; preds = %186, %185, %184, %180, %180
  %189 = phi i64 [ 1, %180 ], [ 1, %180 ], [ 2, %184 ], [ 3, %185 ], [ 0, %186 ]
  %190 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8
  %191 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %190, i64 %189
  store %struct.SkPoint* %191, %struct.SkPoint** %25, align 8
  br label %219

192:                                              ; preds = %180
  %193 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8
  %194 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %193, i64 2
  store %struct.SkPoint* %194, %struct.SkPoint** %25, align 8
  %195 = load float*, float** %26, align 8
  %196 = getelementptr inbounds float, float* %195, i64 1
  store float* %196, float** %26, align 8
  br label %219

197:                                              ; preds = %53, %124, %118, %101
  %198 = phi i8* [ %37, %124 ], [ %37, %118 ], [ %37, %101 ], [ %55, %53 ]
  %199 = getelementptr inbounds i8, i8* %198, i64 1
  store i8* %199, i8** %19, align 8
  %200 = load i8, i8* %198, align 1
  switch i8 %200, label %204 [
    i8 0, label %205
    i8 1, label %205
    i8 2, label %201
    i8 3, label %209
    i8 4, label %202
    i8 5, label %203
  ]

201:                                              ; preds = %197
  br label %205

202:                                              ; preds = %197
  br label %205

203:                                              ; preds = %197
  br label %205

204:                                              ; preds = %197
  tail call void @llvm.trap() #13
  unreachable

205:                                              ; preds = %203, %202, %201, %197, %197
  %206 = phi i64 [ 1, %197 ], [ 1, %197 ], [ 2, %201 ], [ 3, %202 ], [ 0, %203 ]
  %207 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8
  %208 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %207, i64 %206
  store %struct.SkPoint* %208, %struct.SkPoint** %25, align 8
  br label %214

209:                                              ; preds = %197
  %210 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8
  %211 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %210, i64 2
  store %struct.SkPoint* %211, %struct.SkPoint** %25, align 8
  %212 = load float*, float** %26, align 8
  %213 = getelementptr inbounds float, float* %212, i64 1
  store float* %213, float** %26, align 8
  br label %214

214:                                              ; preds = %205, %209
  %215 = load i8*, i8** %21, align 8
  %216 = icmp eq i8* %199, %215
  br i1 %216, label %217, label %36

217:                                              ; preds = %214, %18
  %218 = tail call zeroext i1 @_ZN16GrStrokeIterator17finishOpenContourEv(%class.GrStrokeIterator* %0)
  br label %219

219:                                              ; preds = %192, %188, %5, %217
  %220 = phi i1 [ %218, %217 ], [ true, %5 ], [ true, %188 ], [ true, %192 ]
  ret i1 %220
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

declare i32 @_ZN11GrPathUtils23findCubicConvex180ChopsEPK7SkPointPfPb(%struct.SkPoint*, float*, i8*) local_unnamed_addr #4

declare void @_Z13SkChopCubicAtPK7SkPointPS_PKfi(%struct.SkPoint*, %struct.SkPoint*, float*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter5flushEv(%"class.(anonymous namespace)::ResolveLevelCounter"*) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 32
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %212, label %5

5:                                                ; preds = %1
  %6 = icmp slt i32 %3, 3
  br i1 %6, label %7, label %211

7:                                                ; preds = %5
  %8 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 1, i64 0
  %9 = icmp eq i32 %3, 2
  %10 = bitcast float* %8 to i32*
  %11 = load i32, i32* %10, align 4
  br i1 %9, label %12, label %23

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 1, i64 1
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 1, i64 5
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %15 to i64
  %20 = shl nuw i64 %19, 32
  %21 = zext i32 %18 to i64
  %22 = shl nuw i64 %21, 32
  br label %23

23:                                               ; preds = %12, %7
  %24 = phi i64 [ %22, %12 ], [ 0, %7 ]
  %25 = phi i64 [ %20, %12 ], [ 0, %7 ]
  %26 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 1, i64 4
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = zext i32 %11 to i64
  %30 = or i64 %25, %29
  %31 = bitcast i64 %30 to <2 x float>
  %32 = zext i32 %28 to i64
  %33 = or i64 %24, %32
  %34 = bitcast i64 %33 to <2 x float>
  %35 = shufflevector <2 x float> %31, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %36 = shufflevector <2 x float> %34, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %37 = shufflevector <4 x float> %35, <4 x float> %36, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %38 = bitcast %"class.(anonymous namespace)::ResolveLevelCounter"* %0 to i32*
  %39 = load i32, i32* %38, align 4
  br i1 %9, label %40, label %51

40:                                               ; preds = %23
  %41 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 0, i64 1
  %42 = bitcast float* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 0, i64 5
  %45 = bitcast float* %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %43 to i64
  %48 = shl nuw i64 %47, 32
  %49 = zext i32 %46 to i64
  %50 = shl nuw i64 %49, 32
  br label %51

51:                                               ; preds = %40, %23
  %52 = phi i64 [ %50, %40 ], [ 0, %23 ]
  %53 = phi i64 [ %48, %40 ], [ 0, %23 ]
  %54 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 0, i64 4
  %55 = bitcast float* %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = zext i32 %39 to i64
  %58 = or i64 %53, %57
  %59 = bitcast i64 %58 to <2 x float>
  %60 = zext i32 %56 to i64
  %61 = or i64 %52, %60
  %62 = bitcast i64 %61 to <2 x float>
  %63 = shufflevector <2 x float> %59, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %64 = shufflevector <2 x float> %62, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %65 = shufflevector <4 x float> %63, <4 x float> %64, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %66 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 1, i64 0
  %67 = bitcast float* %66 to i32*
  %68 = load i32, i32* %67, align 4
  br i1 %9, label %69, label %80

69:                                               ; preds = %51
  %70 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 1, i64 1
  %71 = bitcast float* %70 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 1, i64 5
  %74 = bitcast float* %73 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = zext i32 %72 to i64
  %77 = shl nuw i64 %76, 32
  %78 = zext i32 %75 to i64
  %79 = shl nuw i64 %78, 32
  br label %80

80:                                               ; preds = %69, %51
  %81 = phi i64 [ %79, %69 ], [ 0, %51 ]
  %82 = phi i64 [ %77, %69 ], [ 0, %51 ]
  %83 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 1, i64 4
  %84 = bitcast float* %83 to i32*
  %85 = load i32, i32* %84, align 4
  %86 = zext i32 %68 to i64
  %87 = or i64 %82, %86
  %88 = bitcast i64 %87 to <2 x float>
  %89 = zext i32 %85 to i64
  %90 = or i64 %81, %89
  %91 = bitcast i64 %90 to <2 x float>
  %92 = shufflevector <2 x float> %88, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %93 = shufflevector <2 x float> %91, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %94 = shufflevector <4 x float> %92, <4 x float> %93, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %95 = fsub <4 x float> %65, %37
  %96 = fsub <4 x float> %94, %65
  %97 = fmul <4 x float> %95, %95
  %98 = shufflevector <4 x float> %97, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %99 = shufflevector <4 x float> %97, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %100 = fmul <4 x float> %96, %96
  %101 = shufflevector <4 x float> %100, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %102 = shufflevector <4 x float> %100, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %103 = fmul <4 x float> %95, %96
  %104 = shufflevector <4 x float> %103, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %105 = shufflevector <4 x float> %103, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %106 = fadd <2 x float> %104, %105
  %107 = fadd <2 x float> %98, %99
  %108 = fadd <2 x float> %101, %102
  %109 = fmul <2 x float> %107, %108
  %110 = extractelement <2 x float> %109, i32 0
  %111 = tail call float @sqrtf(float %110) #13
  %112 = extractelement <2 x float> %109, i32 1
  %113 = tail call float @sqrtf(float %112) #13
  %114 = insertelement <2 x float> undef, float %111, i32 0
  %115 = insertelement <2 x float> %114, float %113, i32 1
  %116 = fdiv <2 x float> %106, %115
  %117 = fcmp uge <2 x float> %116, <float 1.000000e+00, float 1.000000e+00>
  %118 = bitcast <2 x float> %116 to <2 x i32>
  %119 = select <2 x i1> %117, <2 x i32> <i32 1065353216, i32 1065353216>, <2 x i32> %118
  %120 = extractelement <2 x i32> %119, i32 0
  %121 = extractelement <2 x i32> %119, i32 1
  %122 = zext i32 %121 to i64
  %123 = shl nuw i64 %122, 32
  %124 = zext i32 %120 to i64
  %125 = or i64 %123, %124
  %126 = bitcast i64 %125 to <2 x float>
  %127 = fcmp uge <2 x float> %126, <float -1.000000e+00, float -1.000000e+00>
  %128 = bitcast i64 %125 to <2 x i32>
  %129 = select <2 x i1> %127, <2 x i32> %128, <2 x i32> <i32 -1082130432, i32 -1082130432>
  %130 = extractelement <2 x i32> %129, i32 0
  %131 = extractelement <2 x i32> %129, i32 1
  %132 = zext i32 %131 to i64
  %133 = shl nuw i64 %132, 32
  %134 = zext i32 %130 to i64
  %135 = or i64 %133, %134
  %136 = bitcast i64 %135 to <2 x float>
  %137 = fmul <2 x float> %136, %136
  %138 = fmul <2 x float> %137, <float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %139 = fadd <2 x float> %138, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %140 = fmul <2 x float> %137, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %141 = fadd <2 x float> %140, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %142 = fmul <2 x float> %137, %141
  %143 = fadd <2 x float> %142, <float 1.000000e+00, float 1.000000e+00>
  %144 = fdiv <2 x float> %139, %143
  %145 = fmul <2 x float> %144, %136
  %146 = fadd <2 x float> %145, <float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %147 = load i32, i32* %2, align 32
  %148 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 1, i64 0
  %149 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 9, i32 1
  %150 = load float, float* %149, align 4
  %151 = insertelement <2 x float> undef, float %150, i32 0
  %152 = shufflevector <2 x float> %151, <2 x float> undef, <2 x i32> zeroinitializer
  %153 = fmul <2 x float> %152, %146
  %154 = fadd <2 x float> %153, zeroinitializer
  %155 = bitcast <2 x float> %154 to <2 x i32>
  %156 = add <2 x i32> %155, <i32 8388607, i32 8388607>
  %157 = ashr <2 x i32> %156, <i32 23, i32 23>
  %158 = icmp slt <2 x i32> %157, <i32 142, i32 142>
  %159 = select <2 x i1> %158, <2 x i32> %157, <2 x i32> <i32 142, i32 142>
  %160 = icmp sgt <2 x i32> %159, <i32 127, i32 127>
  %161 = select <2 x i1> %160, <2 x i32> %159, <2 x i32> <i32 127, i32 127>
  %162 = add nsw <2 x i32> %161, <i32 -127, i32 -127>
  %163 = extractelement <2 x i32> %162, i32 0
  %164 = extractelement <2 x i32> %162, i32 1
  switch i32 %147, label %171 [
    i32 4, label %172
    i32 3, label %165
    i32 2, label %168
    i32 1, label %202
  ]

165:                                              ; preds = %80
  %166 = trunc i32 %164 to i8
  %167 = sext i8 %166 to i64
  br label %182

168:                                              ; preds = %80
  %169 = trunc i32 %164 to i8
  %170 = sext i8 %169 to i64
  br label %192

171:                                              ; preds = %80
  tail call void @llvm.trap() #13
  unreachable

172:                                              ; preds = %80
  %173 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %174 = load i32*, i32** %173, align 8
  %175 = trunc i32 %164 to i8
  %176 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 1, i64 3
  %177 = load i8*, i8** %176, align 8
  store i8 %175, i8* %177, align 1
  %178 = sext i8 %175 to i64
  %179 = getelementptr inbounds i32, i32* %174, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = add nsw i32 %180, 1
  store i32 %181, i32* %179, align 4
  br label %182

182:                                              ; preds = %172, %165
  %183 = phi i64 [ %167, %165 ], [ %178, %172 ]
  %184 = phi i8 [ %166, %165 ], [ %175, %172 ]
  %185 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %186 = load i32*, i32** %185, align 8
  %187 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 1, i64 2
  %188 = load i8*, i8** %187, align 8
  store i8 %184, i8* %188, align 1
  %189 = getelementptr inbounds i32, i32* %186, i64 %183
  %190 = load i32, i32* %189, align 4
  %191 = add nsw i32 %190, 1
  store i32 %191, i32* %189, align 4
  br label %192

192:                                              ; preds = %182, %168
  %193 = phi i64 [ %170, %168 ], [ %183, %182 ]
  %194 = phi i8 [ %169, %168 ], [ %184, %182 ]
  %195 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %196 = load i32*, i32** %195, align 8
  %197 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 1, i64 1
  %198 = load i8*, i8** %197, align 8
  store i8 %194, i8* %198, align 1
  %199 = getelementptr inbounds i32, i32* %196, i64 %193
  %200 = load i32, i32* %199, align 4
  %201 = add nsw i32 %200, 1
  store i32 %201, i32* %199, align 4
  br label %202

202:                                              ; preds = %80, %192
  %203 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %204 = load i32*, i32** %203, align 8
  %205 = trunc i32 %163 to i8
  %206 = load i8*, i8** %148, align 8
  store i8 %205, i8* %206, align 1
  %207 = sext i8 %205 to i64
  %208 = getelementptr inbounds i32, i32* %204, i64 %207
  %209 = load i32, i32* %208, align 4
  %210 = add nsw i32 %209, 1
  store i32 %210, i32* %208, align 4
  store i32 0, i32* %2, align 32
  br label %212

211:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter10flushLinesILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"* %0)
  br label %212

212:                                              ; preds = %1, %202, %211
  %213 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 2
  %214 = load i32, i32* %213, align 32
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %597, label %216

216:                                              ; preds = %212
  %217 = icmp slt i32 %214, 3
  br i1 %217, label %218, label %596

218:                                              ; preds = %216
  %219 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1
  %220 = icmp eq i32 %214, 2
  %221 = bitcast %"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue.14"* %219 to i32*
  %222 = load i32, i32* %221, align 4
  br i1 %220, label %223, label %234

223:                                              ; preds = %218
  %224 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 0, i64 1
  %225 = bitcast float* %224 to i32*
  %226 = load i32, i32* %225, align 4
  %227 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 0, i64 5
  %228 = bitcast float* %227 to i32*
  %229 = load i32, i32* %228, align 4
  %230 = zext i32 %226 to i64
  %231 = shl nuw i64 %230, 32
  %232 = zext i32 %229 to i64
  %233 = shl nuw i64 %232, 32
  br label %234

234:                                              ; preds = %223, %218
  %235 = phi i64 [ %233, %223 ], [ 0, %218 ]
  %236 = phi i64 [ %231, %223 ], [ 0, %218 ]
  %237 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 0, i64 4
  %238 = bitcast float* %237 to i32*
  %239 = load i32, i32* %238, align 4
  %240 = zext i32 %222 to i64
  %241 = or i64 %236, %240
  %242 = bitcast i64 %241 to <2 x float>
  %243 = zext i32 %239 to i64
  %244 = or i64 %235, %243
  %245 = bitcast i64 %244 to <2 x float>
  %246 = shufflevector <2 x float> %242, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %247 = shufflevector <2 x float> %245, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %248 = shufflevector <4 x float> %246, <4 x float> %247, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %249 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i64 0
  %250 = bitcast float* %249 to i32*
  %251 = load i32, i32* %250, align 4
  br i1 %220, label %252, label %263

252:                                              ; preds = %234
  %253 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i64 1
  %254 = bitcast float* %253 to i32*
  %255 = load i32, i32* %254, align 4
  %256 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i64 5
  %257 = bitcast float* %256 to i32*
  %258 = load i32, i32* %257, align 4
  %259 = zext i32 %255 to i64
  %260 = shl nuw i64 %259, 32
  %261 = zext i32 %258 to i64
  %262 = shl nuw i64 %261, 32
  br label %263

263:                                              ; preds = %252, %234
  %264 = phi i64 [ %262, %252 ], [ 0, %234 ]
  %265 = phi i64 [ %260, %252 ], [ 0, %234 ]
  %266 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i64 4
  %267 = bitcast float* %266 to i32*
  %268 = load i32, i32* %267, align 4
  %269 = zext i32 %251 to i64
  %270 = or i64 %265, %269
  %271 = bitcast i64 %270 to <2 x float>
  %272 = zext i32 %268 to i64
  %273 = or i64 %264, %272
  %274 = bitcast i64 %273 to <2 x float>
  %275 = shufflevector <2 x float> %271, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %276 = shufflevector <2 x float> %274, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %277 = shufflevector <4 x float> %275, <4 x float> %276, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %278 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i64 0
  %279 = bitcast float* %278 to i32*
  %280 = load i32, i32* %279, align 4
  br i1 %220, label %281, label %292

281:                                              ; preds = %263
  %282 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i64 1
  %283 = bitcast float* %282 to i32*
  %284 = load i32, i32* %283, align 4
  %285 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i64 5
  %286 = bitcast float* %285 to i32*
  %287 = load i32, i32* %286, align 4
  %288 = zext i32 %284 to i64
  %289 = shl nuw i64 %288, 32
  %290 = zext i32 %287 to i64
  %291 = shl nuw i64 %290, 32
  br label %292

292:                                              ; preds = %281, %263
  %293 = phi i64 [ %291, %281 ], [ 0, %263 ]
  %294 = phi i64 [ %289, %281 ], [ 0, %263 ]
  %295 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i64 4
  %296 = bitcast float* %295 to i32*
  %297 = load i32, i32* %296, align 4
  %298 = zext i32 %280 to i64
  %299 = or i64 %294, %298
  %300 = bitcast i64 %299 to <2 x float>
  %301 = zext i32 %297 to i64
  %302 = or i64 %293, %301
  %303 = bitcast i64 %302 to <2 x float>
  %304 = shufflevector <2 x float> %300, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %305 = shufflevector <2 x float> %303, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %306 = shufflevector <4 x float> %304, <4 x float> %305, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %307 = fmul <4 x float> %277, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %308 = fadd <4 x float> %307, %306
  %309 = fadd <4 x float> %248, %308
  %310 = fmul <4 x float> %309, %309
  %311 = shufflevector <4 x float> %310, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %312 = shufflevector <4 x float> %310, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %313 = fadd <2 x float> %311, %312
  %314 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 5
  %315 = load float, float* %314, align 32
  %316 = extractelement <2 x float> %313, i32 0
  %317 = tail call float @sqrtf(float %316) #13
  %318 = extractelement <2 x float> %313, i32 1
  %319 = tail call float @sqrtf(float %318) #13
  %320 = insertelement <2 x float> undef, float %317, i32 0
  %321 = insertelement <2 x float> %320, float %319, i32 1
  %322 = insertelement <2 x float> undef, float %315, i32 0
  %323 = shufflevector <2 x float> %322, <2 x float> undef, <2 x i32> zeroinitializer
  %324 = fmul <2 x float> %323, %321
  %325 = extractelement <2 x float> %324, i32 0
  %326 = tail call float @sqrtf(float %325) #13
  %327 = extractelement <2 x float> %324, i32 1
  %328 = tail call float @sqrtf(float %327) #13
  %329 = insertelement <2 x float> undef, float %326, i32 0
  %330 = insertelement <2 x float> %329, float %328, i32 1
  %331 = fsub <4 x float> %277, %248
  %332 = fsub <4 x float> %306, %277
  %333 = shufflevector <4 x float> %332, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %334 = shufflevector <4 x float> %332, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %335 = shufflevector <4 x float> %331, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %336 = shufflevector <4 x float> %331, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %337 = fmul <4 x float> %331, %331
  %338 = shufflevector <4 x float> %337, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %339 = shufflevector <4 x float> %337, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %340 = fmul <4 x float> %332, %332
  %341 = shufflevector <4 x float> %340, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %342 = shufflevector <4 x float> %340, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %343 = fmul <4 x float> %331, %332
  %344 = shufflevector <4 x float> %343, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %345 = shufflevector <4 x float> %343, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %346 = fadd <2 x float> %344, %345
  %347 = fadd <2 x float> %338, %339
  %348 = fadd <2 x float> %341, %342
  %349 = fmul <2 x float> %347, %348
  %350 = extractelement <2 x float> %349, i32 0
  %351 = tail call float @sqrtf(float %350) #13
  %352 = extractelement <2 x float> %349, i32 1
  %353 = tail call float @sqrtf(float %352) #13
  %354 = insertelement <2 x float> undef, float %351, i32 0
  %355 = insertelement <2 x float> %354, float %353, i32 1
  %356 = fdiv <2 x float> %346, %355
  %357 = fcmp uge <2 x float> %356, <float 1.000000e+00, float 1.000000e+00>
  %358 = bitcast <2 x float> %356 to <2 x i32>
  %359 = select <2 x i1> %357, <2 x i32> <i32 1065353216, i32 1065353216>, <2 x i32> %358
  %360 = extractelement <2 x i32> %359, i32 0
  %361 = extractelement <2 x i32> %359, i32 1
  %362 = zext i32 %361 to i64
  %363 = shl nuw i64 %362, 32
  %364 = zext i32 %360 to i64
  %365 = or i64 %363, %364
  %366 = bitcast i64 %365 to <2 x float>
  %367 = fcmp uge <2 x float> %366, <float -1.000000e+00, float -1.000000e+00>
  %368 = bitcast i64 %365 to <2 x i32>
  %369 = select <2 x i1> %367, <2 x i32> %368, <2 x i32> <i32 -1082130432, i32 -1082130432>
  %370 = extractelement <2 x i32> %369, i32 0
  %371 = extractelement <2 x i32> %369, i32 1
  %372 = zext i32 %371 to i64
  %373 = shl nuw i64 %372, 32
  %374 = zext i32 %370 to i64
  %375 = or i64 %373, %374
  %376 = bitcast i64 %375 to <2 x float>
  %377 = fmul <2 x float> %376, %376
  %378 = fmul <2 x float> %377, <float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %379 = fadd <2 x float> %378, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %380 = fmul <2 x float> %377, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %381 = fadd <2 x float> %380, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %382 = fmul <2 x float> %377, %381
  %383 = fadd <2 x float> %382, <float 1.000000e+00, float 1.000000e+00>
  %384 = fdiv <2 x float> %379, %383
  %385 = fmul <2 x float> %384, %376
  %386 = fadd <2 x float> %385, <float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %387 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 11
  %388 = load i8, i8* %387, align 4, !range !2
  %389 = icmp eq i8 %388, 0
  br i1 %389, label %530, label %390

390:                                              ; preds = %292
  %391 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 1, i64 0
  %392 = load i32, i32* %213, align 32
  %393 = icmp eq i32 %392, 2
  %394 = bitcast float* %391 to i32*
  %395 = load i32, i32* %394, align 4
  br i1 %393, label %396, label %407

396:                                              ; preds = %390
  %397 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 1, i64 1
  %398 = bitcast float* %397 to i32*
  %399 = load i32, i32* %398, align 4
  %400 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 1, i64 5
  %401 = bitcast float* %400 to i32*
  %402 = load i32, i32* %401, align 4
  %403 = zext i32 %399 to i64
  %404 = shl nuw i64 %403, 32
  %405 = zext i32 %402 to i64
  %406 = shl nuw i64 %405, 32
  br label %407

407:                                              ; preds = %396, %390
  %408 = phi i64 [ %406, %396 ], [ 0, %390 ]
  %409 = phi i64 [ %404, %396 ], [ 0, %390 ]
  %410 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 1, i64 4
  %411 = bitcast float* %410 to i32*
  %412 = load i32, i32* %411, align 4
  %413 = zext i32 %395 to i64
  %414 = or i64 %409, %413
  %415 = bitcast i64 %414 to <2 x float>
  %416 = zext i32 %412 to i64
  %417 = or i64 %408, %416
  %418 = bitcast i64 %417 to <2 x float>
  %419 = shufflevector <2 x float> %415, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %420 = shufflevector <2 x float> %418, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %421 = shufflevector <4 x float> %419, <4 x float> %420, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %422 = fcmp oeq <4 x float> %331, zeroinitializer
  %423 = sext <4 x i1> %422 to <4 x i32>
  %424 = bitcast <4 x i32> %423 to <2 x i64>
  %425 = extractelement <2 x i64> %424, i32 0
  %426 = extractelement <2 x i64> %424, i32 1
  %427 = bitcast <2 x float> %333 to <2 x i32>
  %428 = bitcast <2 x float> %334 to <2 x i32>
  %429 = bitcast <2 x float> %335 to <2 x i32>
  %430 = bitcast <2 x float> %336 to <2 x i32>
  %431 = and i64 %426, %425
  %432 = bitcast i64 %431 to <2 x i32>
  %433 = shufflevector <2 x i32> %432, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %434 = shufflevector <2 x i32> %432, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %435 = shufflevector <4 x i32> %433, <4 x i32> %434, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %436 = shufflevector <2 x i32> %427, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %437 = shufflevector <2 x i32> %428, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %438 = shufflevector <4 x i32> %436, <4 x i32> %437, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %439 = and <4 x i32> %438, %435
  %440 = bitcast <4 x i32> %439 to <2 x i64>
  %441 = extractelement <2 x i64> %440, i32 0
  %442 = extractelement <2 x i64> %440, i32 1
  %443 = bitcast i64 %441 to <2 x i32>
  %444 = shufflevector <2 x i32> %443, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %445 = bitcast i64 %442 to <2 x i32>
  %446 = shufflevector <2 x i32> %445, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %447 = shufflevector <4 x i32> %444, <4 x i32> %446, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %448 = bitcast <4 x i32> %435 to <2 x i64>
  %449 = xor <2 x i64> %448, <i64 -1, i64 -1>
  %450 = extractelement <2 x i64> %449, i32 0
  %451 = extractelement <2 x i64> %449, i32 1
  %452 = bitcast i64 %450 to <2 x i32>
  %453 = shufflevector <2 x i32> %452, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %454 = bitcast i64 %451 to <2 x i32>
  %455 = shufflevector <2 x i32> %454, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %456 = shufflevector <4 x i32> %453, <4 x i32> %455, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %457 = shufflevector <2 x i32> %429, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %458 = shufflevector <2 x i32> %430, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %459 = shufflevector <4 x i32> %457, <4 x i32> %458, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %460 = and <4 x i32> %456, %459
  %461 = bitcast <4 x i32> %460 to <2 x i64>
  %462 = extractelement <2 x i64> %461, i32 0
  %463 = extractelement <2 x i64> %461, i32 1
  %464 = bitcast i64 %462 to <2 x i32>
  %465 = shufflevector <2 x i32> %464, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %466 = bitcast i64 %463 to <2 x i32>
  %467 = shufflevector <2 x i32> %466, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %468 = shufflevector <4 x i32> %465, <4 x i32> %467, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %469 = or <4 x i32> %447, %468
  %470 = bitcast <4 x i32> %469 to <2 x i64>
  %471 = extractelement <2 x i64> %470, i32 0
  %472 = extractelement <2 x i64> %470, i32 1
  %473 = bitcast i64 %471 to <2 x float>
  %474 = bitcast i64 %472 to <2 x float>
  %475 = fsub <4 x float> %248, %421
  %476 = shufflevector <2 x float> %473, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %477 = shufflevector <2 x float> %474, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %478 = shufflevector <4 x float> %476, <4 x float> %477, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %479 = fmul <4 x float> %475, %475
  %480 = shufflevector <4 x float> %479, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %481 = shufflevector <4 x float> %479, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %482 = fmul <4 x float> %478, %478
  %483 = shufflevector <4 x float> %482, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %484 = shufflevector <4 x float> %482, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %485 = fmul <4 x float> %478, %475
  %486 = shufflevector <4 x float> %485, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %487 = shufflevector <4 x float> %485, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %488 = fadd <2 x float> %486, %487
  %489 = fadd <2 x float> %480, %481
  %490 = fadd <2 x float> %483, %484
  %491 = fmul <2 x float> %490, %489
  %492 = extractelement <2 x float> %491, i32 0
  %493 = tail call float @sqrtf(float %492) #13
  %494 = extractelement <2 x float> %491, i32 1
  %495 = tail call float @sqrtf(float %494) #13
  %496 = insertelement <2 x float> undef, float %493, i32 0
  %497 = insertelement <2 x float> %496, float %495, i32 1
  %498 = fdiv <2 x float> %488, %497
  %499 = fcmp uge <2 x float> %498, <float 1.000000e+00, float 1.000000e+00>
  %500 = bitcast <2 x float> %498 to <2 x i32>
  %501 = select <2 x i1> %499, <2 x i32> <i32 1065353216, i32 1065353216>, <2 x i32> %500
  %502 = extractelement <2 x i32> %501, i32 0
  %503 = extractelement <2 x i32> %501, i32 1
  %504 = zext i32 %503 to i64
  %505 = shl nuw i64 %504, 32
  %506 = zext i32 %502 to i64
  %507 = or i64 %505, %506
  %508 = bitcast i64 %507 to <2 x float>
  %509 = fcmp uge <2 x float> %508, <float -1.000000e+00, float -1.000000e+00>
  %510 = bitcast i64 %507 to <2 x i32>
  %511 = select <2 x i1> %509, <2 x i32> %510, <2 x i32> <i32 -1082130432, i32 -1082130432>
  %512 = extractelement <2 x i32> %511, i32 0
  %513 = extractelement <2 x i32> %511, i32 1
  %514 = zext i32 %513 to i64
  %515 = shl nuw i64 %514, 32
  %516 = zext i32 %512 to i64
  %517 = or i64 %515, %516
  %518 = bitcast i64 %517 to <2 x float>
  %519 = fmul <2 x float> %518, %518
  %520 = fmul <2 x float> %519, <float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %521 = fadd <2 x float> %520, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %522 = fmul <2 x float> %519, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %523 = fadd <2 x float> %522, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %524 = fmul <2 x float> %519, %523
  %525 = fadd <2 x float> %524, <float 1.000000e+00, float 1.000000e+00>
  %526 = fdiv <2 x float> %521, %525
  %527 = fmul <2 x float> %526, %518
  %528 = fadd <2 x float> %527, <float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %529 = fadd <2 x float> %386, %528
  br label %530

530:                                              ; preds = %407, %292
  %531 = phi <2 x float> [ %386, %292 ], [ %529, %407 ]
  %532 = load i32, i32* %213, align 32
  %533 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 1, i64 0
  %534 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 9, i32 1
  %535 = load float, float* %534, align 4
  %536 = insertelement <2 x float> undef, float %535, i32 0
  %537 = shufflevector <2 x float> %536, <2 x float> undef, <2 x i32> zeroinitializer
  %538 = fmul <2 x float> %531, %537
  %539 = fadd <2 x float> %330, %538
  %540 = bitcast <2 x float> %539 to <2 x i32>
  %541 = add <2 x i32> %540, <i32 8388607, i32 8388607>
  %542 = ashr <2 x i32> %541, <i32 23, i32 23>
  %543 = icmp slt <2 x i32> %542, <i32 142, i32 142>
  %544 = select <2 x i1> %543, <2 x i32> %542, <2 x i32> <i32 142, i32 142>
  %545 = icmp sgt <2 x i32> %544, <i32 127, i32 127>
  %546 = select <2 x i1> %545, <2 x i32> %544, <2 x i32> <i32 127, i32 127>
  %547 = add nsw <2 x i32> %546, <i32 -127, i32 -127>
  %548 = extractelement <2 x i32> %547, i32 0
  %549 = extractelement <2 x i32> %547, i32 1
  switch i32 %532, label %556 [
    i32 4, label %557
    i32 3, label %550
    i32 2, label %553
    i32 1, label %587
  ]

550:                                              ; preds = %530
  %551 = trunc i32 %549 to i8
  %552 = sext i8 %551 to i64
  br label %567

553:                                              ; preds = %530
  %554 = trunc i32 %549 to i8
  %555 = sext i8 %554 to i64
  br label %577

556:                                              ; preds = %530
  tail call void @llvm.trap() #13
  unreachable

557:                                              ; preds = %530
  %558 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %559 = load i32*, i32** %558, align 8
  %560 = trunc i32 %549 to i8
  %561 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 1, i64 3
  %562 = load i8*, i8** %561, align 8
  store i8 %560, i8* %562, align 1
  %563 = sext i8 %560 to i64
  %564 = getelementptr inbounds i32, i32* %559, i64 %563
  %565 = load i32, i32* %564, align 4
  %566 = add nsw i32 %565, 1
  store i32 %566, i32* %564, align 4
  br label %567

567:                                              ; preds = %557, %550
  %568 = phi i64 [ %552, %550 ], [ %563, %557 ]
  %569 = phi i8 [ %551, %550 ], [ %560, %557 ]
  %570 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %571 = load i32*, i32** %570, align 8
  %572 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 1, i64 2
  %573 = load i8*, i8** %572, align 8
  store i8 %569, i8* %573, align 1
  %574 = getelementptr inbounds i32, i32* %571, i64 %568
  %575 = load i32, i32* %574, align 4
  %576 = add nsw i32 %575, 1
  store i32 %576, i32* %574, align 4
  br label %577

577:                                              ; preds = %567, %553
  %578 = phi i64 [ %555, %553 ], [ %568, %567 ]
  %579 = phi i8 [ %554, %553 ], [ %569, %567 ]
  %580 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %581 = load i32*, i32** %580, align 8
  %582 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 1, i64 1
  %583 = load i8*, i8** %582, align 8
  store i8 %579, i8* %583, align 1
  %584 = getelementptr inbounds i32, i32* %581, i64 %578
  %585 = load i32, i32* %584, align 4
  %586 = add nsw i32 %585, 1
  store i32 %586, i32* %584, align 4
  br label %587

587:                                              ; preds = %530, %577
  %588 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %589 = load i32*, i32** %588, align 8
  %590 = trunc i32 %548 to i8
  %591 = load i8*, i8** %533, align 8
  store i8 %590, i8* %591, align 1
  %592 = sext i8 %590 to i64
  %593 = getelementptr inbounds i32, i32* %589, i64 %592
  %594 = load i32, i32* %593, align 4
  %595 = add nsw i32 %594, 1
  store i32 %595, i32* %593, align 4
  store i32 0, i32* %213, align 32
  br label %597

596:                                              ; preds = %216
  tail call fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter10flushQuadsILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"* %0)
  br label %597

597:                                              ; preds = %212, %587, %596
  %598 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 2
  %599 = load i32, i32* %598, align 32
  %600 = icmp eq i32 %599, 0
  br i1 %600, label %1146, label %601

601:                                              ; preds = %597
  %602 = icmp slt i32 %599, 3
  br i1 %602, label %603, label %1145

603:                                              ; preds = %601
  %604 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2
  %605 = icmp eq i32 %599, 2
  %606 = bitcast %"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue.17"* %604 to i32*
  %607 = load i32, i32* %606, align 4
  br i1 %605, label %608, label %619

608:                                              ; preds = %603
  %609 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 0, i64 1
  %610 = bitcast float* %609 to i32*
  %611 = load i32, i32* %610, align 4
  %612 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 0, i64 5
  %613 = bitcast float* %612 to i32*
  %614 = load i32, i32* %613, align 4
  %615 = zext i32 %611 to i64
  %616 = shl nuw i64 %615, 32
  %617 = zext i32 %614 to i64
  %618 = shl nuw i64 %617, 32
  br label %619

619:                                              ; preds = %608, %603
  %620 = phi i64 [ %618, %608 ], [ 0, %603 ]
  %621 = phi i64 [ %616, %608 ], [ 0, %603 ]
  %622 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 0, i64 4
  %623 = bitcast float* %622 to i32*
  %624 = load i32, i32* %623, align 4
  %625 = zext i32 %607 to i64
  %626 = or i64 %621, %625
  %627 = bitcast i64 %626 to <2 x float>
  %628 = zext i32 %624 to i64
  %629 = or i64 %620, %628
  %630 = bitcast i64 %629 to <2 x float>
  %631 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 1, i64 0
  %632 = bitcast float* %631 to i32*
  %633 = load i32, i32* %632, align 4
  br i1 %605, label %634, label %645

634:                                              ; preds = %619
  %635 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 1, i64 1
  %636 = bitcast float* %635 to i32*
  %637 = load i32, i32* %636, align 4
  %638 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 1, i64 5
  %639 = bitcast float* %638 to i32*
  %640 = load i32, i32* %639, align 4
  %641 = zext i32 %637 to i64
  %642 = shl nuw i64 %641, 32
  %643 = zext i32 %640 to i64
  %644 = shl nuw i64 %643, 32
  br label %645

645:                                              ; preds = %634, %619
  %646 = phi i64 [ %644, %634 ], [ 0, %619 ]
  %647 = phi i64 [ %642, %634 ], [ 0, %619 ]
  %648 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 1, i64 4
  %649 = bitcast float* %648 to i32*
  %650 = load i32, i32* %649, align 4
  %651 = zext i32 %633 to i64
  %652 = or i64 %647, %651
  %653 = bitcast i64 %652 to <2 x float>
  %654 = zext i32 %650 to i64
  %655 = or i64 %646, %654
  %656 = bitcast i64 %655 to <2 x float>
  %657 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 2, i64 0
  %658 = bitcast float* %657 to i32*
  %659 = load i32, i32* %658, align 4
  br i1 %605, label %660, label %671

660:                                              ; preds = %645
  %661 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 2, i64 1
  %662 = bitcast float* %661 to i32*
  %663 = load i32, i32* %662, align 4
  %664 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 2, i64 5
  %665 = bitcast float* %664 to i32*
  %666 = load i32, i32* %665, align 4
  %667 = zext i32 %663 to i64
  %668 = shl nuw i64 %667, 32
  %669 = zext i32 %666 to i64
  %670 = shl nuw i64 %669, 32
  br label %671

671:                                              ; preds = %660, %645
  %672 = phi i64 [ %670, %660 ], [ 0, %645 ]
  %673 = phi i64 [ %668, %660 ], [ 0, %645 ]
  %674 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 2, i64 4
  %675 = bitcast float* %674 to i32*
  %676 = load i32, i32* %675, align 4
  %677 = zext i32 %659 to i64
  %678 = or i64 %673, %677
  %679 = bitcast i64 %678 to <2 x float>
  %680 = zext i32 %676 to i64
  %681 = or i64 %672, %680
  %682 = bitcast i64 %681 to <2 x float>
  %683 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 3, i64 0
  %684 = bitcast float* %683 to i32*
  %685 = load i32, i32* %684, align 4
  br i1 %605, label %686, label %697

686:                                              ; preds = %671
  %687 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 3, i64 1
  %688 = bitcast float* %687 to i32*
  %689 = load i32, i32* %688, align 4
  %690 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 3, i64 5
  %691 = bitcast float* %690 to i32*
  %692 = load i32, i32* %691, align 4
  %693 = zext i32 %689 to i64
  %694 = shl nuw i64 %693, 32
  %695 = zext i32 %692 to i64
  %696 = shl nuw i64 %695, 32
  br label %697

697:                                              ; preds = %686, %671
  %698 = phi i64 [ %696, %686 ], [ 0, %671 ]
  %699 = phi i64 [ %694, %686 ], [ 0, %671 ]
  %700 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 3, i64 4
  %701 = bitcast float* %700 to i32*
  %702 = load i32, i32* %701, align 4
  %703 = zext i32 %685 to i64
  %704 = or i64 %699, %703
  %705 = bitcast i64 %704 to <2 x float>
  %706 = zext i32 %702 to i64
  %707 = or i64 %698, %706
  %708 = bitcast i64 %707 to <2 x float>
  %709 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 11
  %710 = load i8, i8* %709, align 4, !range !2
  %711 = icmp eq i8 %710, 0
  %712 = shufflevector <2 x float> %627, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %713 = shufflevector <2 x float> %630, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %714 = shufflevector <4 x float> %712, <4 x float> %713, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %715 = shufflevector <2 x float> %653, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %716 = shufflevector <2 x float> %656, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %717 = shufflevector <4 x float> %715, <4 x float> %716, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %718 = shufflevector <2 x float> %679, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %719 = shufflevector <2 x float> %682, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %720 = shufflevector <4 x float> %718, <4 x float> %719, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %721 = shufflevector <2 x float> %705, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %722 = shufflevector <2 x float> %708, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %723 = shufflevector <4 x float> %721, <4 x float> %722, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %724 = fmul <4 x float> %717, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %725 = fadd <4 x float> %724, %720
  %726 = fadd <4 x float> %714, %725
  %727 = fmul <4 x float> %726, %726
  %728 = shufflevector <4 x float> %727, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %729 = shufflevector <4 x float> %727, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %730 = fadd <2 x float> %728, %729
  %731 = fmul <4 x float> %720, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %732 = fadd <4 x float> %731, %723
  %733 = fadd <4 x float> %717, %732
  %734 = fmul <4 x float> %733, %733
  %735 = shufflevector <4 x float> %734, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %736 = shufflevector <4 x float> %734, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %737 = fadd <2 x float> %735, %736
  %738 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 6
  %739 = load float, float* %738, align 4
  %740 = fcmp olt <2 x float> %730, %737
  %741 = select <2 x i1> %740, <2 x float> %737, <2 x float> %730
  %742 = bitcast <2 x float> %741 to <2 x i32>
  %743 = extractelement <2 x i32> %742, i32 0
  %744 = extractelement <2 x i32> %742, i32 1
  %745 = zext i32 %744 to i64
  %746 = shl nuw i64 %745, 32
  %747 = zext i32 %743 to i64
  %748 = or i64 %746, %747
  %749 = bitcast i64 %748 to <2 x float>
  %750 = extractelement <2 x float> %749, i32 0
  %751 = tail call float @sqrtf(float %750) #13
  %752 = extractelement <2 x float> %749, i32 1
  %753 = tail call float @sqrtf(float %752) #13
  %754 = insertelement <2 x float> undef, float %751, i32 0
  %755 = insertelement <2 x float> %754, float %753, i32 1
  %756 = insertelement <2 x float> undef, float %739, i32 0
  %757 = shufflevector <2 x float> %756, <2 x float> undef, <2 x i32> zeroinitializer
  %758 = fmul <2 x float> %757, %755
  %759 = extractelement <2 x float> %758, i32 0
  %760 = tail call float @sqrtf(float %759) #13
  %761 = extractelement <2 x float> %758, i32 1
  %762 = tail call float @sqrtf(float %761) #13
  %763 = insertelement <2 x float> undef, float %760, i32 0
  %764 = insertelement <2 x float> %763, float %762, i32 1
  %765 = fsub <4 x float> %717, %714
  %766 = fcmp oeq <4 x float> %765, zeroinitializer
  %767 = sext <4 x i1> %766 to <4 x i32>
  %768 = bitcast <4 x i32> %767 to <2 x i64>
  %769 = extractelement <2 x i64> %768, i32 0
  %770 = extractelement <2 x i64> %768, i32 1
  %771 = fsub <4 x float> %720, %714
  %772 = shufflevector <4 x float> %771, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %773 = shufflevector <4 x float> %771, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %774 = shufflevector <4 x float> %765, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %775 = shufflevector <4 x float> %765, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %776 = bitcast <2 x float> %772 to <2 x i32>
  %777 = bitcast <2 x float> %773 to <2 x i32>
  %778 = bitcast <2 x float> %774 to <2 x i32>
  %779 = bitcast <2 x float> %775 to <2 x i32>
  %780 = and i64 %770, %769
  %781 = bitcast i64 %780 to <2 x i32>
  %782 = shufflevector <2 x i32> %781, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %783 = shufflevector <2 x i32> %781, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %784 = shufflevector <4 x i32> %782, <4 x i32> %783, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %785 = shufflevector <2 x i32> %776, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %786 = shufflevector <2 x i32> %777, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %787 = shufflevector <4 x i32> %785, <4 x i32> %786, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %788 = and <4 x i32> %787, %784
  %789 = bitcast <4 x i32> %788 to <2 x i64>
  %790 = extractelement <2 x i64> %789, i32 0
  %791 = extractelement <2 x i64> %789, i32 1
  %792 = bitcast i64 %790 to <2 x i32>
  %793 = shufflevector <2 x i32> %792, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %794 = bitcast i64 %791 to <2 x i32>
  %795 = shufflevector <2 x i32> %794, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %796 = shufflevector <4 x i32> %793, <4 x i32> %795, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %797 = bitcast <4 x i32> %784 to <2 x i64>
  %798 = xor <2 x i64> %797, <i64 -1, i64 -1>
  %799 = extractelement <2 x i64> %798, i32 0
  %800 = extractelement <2 x i64> %798, i32 1
  %801 = bitcast i64 %799 to <2 x i32>
  %802 = shufflevector <2 x i32> %801, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %803 = bitcast i64 %800 to <2 x i32>
  %804 = shufflevector <2 x i32> %803, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %805 = shufflevector <4 x i32> %802, <4 x i32> %804, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %806 = shufflevector <2 x i32> %778, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %807 = shufflevector <2 x i32> %779, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %808 = shufflevector <4 x i32> %806, <4 x i32> %807, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %809 = and <4 x i32> %805, %808
  %810 = bitcast <4 x i32> %809 to <2 x i64>
  %811 = extractelement <2 x i64> %810, i32 0
  %812 = extractelement <2 x i64> %810, i32 1
  %813 = bitcast i64 %811 to <2 x i32>
  %814 = shufflevector <2 x i32> %813, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %815 = bitcast i64 %812 to <2 x i32>
  %816 = shufflevector <2 x i32> %815, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %817 = shufflevector <4 x i32> %814, <4 x i32> %816, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %818 = or <4 x i32> %796, %817
  %819 = bitcast <4 x i32> %818 to <2 x i64>
  %820 = extractelement <2 x i64> %819, i32 0
  %821 = extractelement <2 x i64> %819, i32 1
  %822 = bitcast i64 %820 to <2 x float>
  %823 = bitcast i64 %821 to <2 x float>
  %824 = shufflevector <2 x float> %822, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %825 = shufflevector <2 x float> %823, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %826 = shufflevector <4 x float> %824, <4 x float> %825, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %827 = fsub <4 x float> %723, %720
  %828 = fcmp oeq <4 x float> %827, zeroinitializer
  %829 = sext <4 x i1> %828 to <4 x i32>
  %830 = bitcast <4 x i32> %829 to <2 x i64>
  %831 = extractelement <2 x i64> %830, i32 0
  %832 = extractelement <2 x i64> %830, i32 1
  %833 = fsub <4 x float> %723, %717
  %834 = shufflevector <4 x float> %833, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %835 = shufflevector <4 x float> %833, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %836 = shufflevector <4 x float> %827, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %837 = shufflevector <4 x float> %827, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %838 = bitcast <2 x float> %834 to <2 x i32>
  %839 = bitcast <2 x float> %835 to <2 x i32>
  %840 = bitcast <2 x float> %836 to <2 x i32>
  %841 = bitcast <2 x float> %837 to <2 x i32>
  %842 = and i64 %832, %831
  %843 = bitcast i64 %842 to <2 x i32>
  %844 = shufflevector <2 x i32> %843, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %845 = shufflevector <2 x i32> %843, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %846 = shufflevector <4 x i32> %844, <4 x i32> %845, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %847 = shufflevector <2 x i32> %838, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %848 = shufflevector <2 x i32> %839, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %849 = shufflevector <4 x i32> %847, <4 x i32> %848, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %850 = and <4 x i32> %846, %849
  %851 = bitcast <4 x i32> %850 to <2 x i64>
  %852 = extractelement <2 x i64> %851, i32 0
  %853 = extractelement <2 x i64> %851, i32 1
  %854 = bitcast i64 %852 to <2 x i32>
  %855 = shufflevector <2 x i32> %854, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %856 = bitcast i64 %853 to <2 x i32>
  %857 = shufflevector <2 x i32> %856, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %858 = shufflevector <4 x i32> %855, <4 x i32> %857, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %859 = bitcast <4 x i32> %846 to <2 x i64>
  %860 = xor <2 x i64> %859, <i64 -1, i64 -1>
  %861 = extractelement <2 x i64> %860, i32 0
  %862 = extractelement <2 x i64> %860, i32 1
  %863 = bitcast i64 %861 to <2 x i32>
  %864 = shufflevector <2 x i32> %863, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %865 = bitcast i64 %862 to <2 x i32>
  %866 = shufflevector <2 x i32> %865, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %867 = shufflevector <4 x i32> %864, <4 x i32> %866, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %868 = shufflevector <2 x i32> %840, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %869 = shufflevector <2 x i32> %841, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %870 = shufflevector <4 x i32> %868, <4 x i32> %869, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %871 = and <4 x i32> %867, %870
  %872 = bitcast <4 x i32> %871 to <2 x i64>
  %873 = extractelement <2 x i64> %872, i32 0
  %874 = extractelement <2 x i64> %872, i32 1
  %875 = bitcast i64 %873 to <2 x i32>
  %876 = shufflevector <2 x i32> %875, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %877 = bitcast i64 %874 to <2 x i32>
  %878 = shufflevector <2 x i32> %877, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %879 = shufflevector <4 x i32> %876, <4 x i32> %878, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %880 = or <4 x i32> %879, %858
  %881 = bitcast <4 x i32> %880 to <2 x i64>
  %882 = extractelement <2 x i64> %881, i32 0
  %883 = extractelement <2 x i64> %881, i32 1
  %884 = bitcast i64 %882 to <2 x float>
  %885 = bitcast i64 %883 to <2 x float>
  %886 = shufflevector <2 x float> %884, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %887 = shufflevector <2 x float> %885, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %888 = shufflevector <4 x float> %886, <4 x float> %887, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %889 = fmul <4 x float> %826, %826
  %890 = shufflevector <4 x float> %889, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %891 = shufflevector <4 x float> %889, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %892 = fmul <4 x float> %888, %888
  %893 = shufflevector <4 x float> %892, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %894 = shufflevector <4 x float> %892, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %895 = fmul <4 x float> %826, %888
  %896 = shufflevector <4 x float> %895, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %897 = shufflevector <4 x float> %895, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %898 = fadd <2 x float> %896, %897
  %899 = fadd <2 x float> %890, %891
  %900 = fadd <2 x float> %893, %894
  %901 = fmul <2 x float> %899, %900
  %902 = extractelement <2 x float> %901, i32 0
  %903 = tail call float @sqrtf(float %902) #13
  %904 = extractelement <2 x float> %901, i32 1
  %905 = tail call float @sqrtf(float %904) #13
  %906 = insertelement <2 x float> undef, float %903, i32 0
  %907 = insertelement <2 x float> %906, float %905, i32 1
  %908 = fdiv <2 x float> %898, %907
  %909 = fcmp uge <2 x float> %908, <float 1.000000e+00, float 1.000000e+00>
  %910 = bitcast <2 x float> %908 to <2 x i32>
  %911 = select <2 x i1> %909, <2 x i32> <i32 1065353216, i32 1065353216>, <2 x i32> %910
  %912 = extractelement <2 x i32> %911, i32 0
  %913 = extractelement <2 x i32> %911, i32 1
  %914 = zext i32 %913 to i64
  %915 = shl nuw i64 %914, 32
  %916 = zext i32 %912 to i64
  %917 = or i64 %915, %916
  %918 = bitcast i64 %917 to <2 x float>
  %919 = fcmp uge <2 x float> %918, <float -1.000000e+00, float -1.000000e+00>
  %920 = bitcast i64 %917 to <2 x i32>
  %921 = select <2 x i1> %919, <2 x i32> %920, <2 x i32> <i32 -1082130432, i32 -1082130432>
  %922 = extractelement <2 x i32> %921, i32 0
  %923 = extractelement <2 x i32> %921, i32 1
  %924 = zext i32 %923 to i64
  %925 = shl nuw i64 %924, 32
  %926 = zext i32 %922 to i64
  %927 = or i64 %925, %926
  %928 = bitcast i64 %927 to <2 x float>
  %929 = fmul <2 x float> %928, %928
  %930 = fmul <2 x float> %929, <float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %931 = fadd <2 x float> %930, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %932 = fmul <2 x float> %929, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %933 = fadd <2 x float> %932, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %934 = fmul <2 x float> %929, %933
  %935 = fadd <2 x float> %934, <float 1.000000e+00, float 1.000000e+00>
  %936 = fdiv <2 x float> %931, %935
  %937 = fmul <2 x float> %936, %928
  %938 = fadd <2 x float> %937, <float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  br i1 %711, label %1079, label %939

939:                                              ; preds = %697
  %940 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 1, i64 0
  %941 = load i32, i32* %598, align 32
  %942 = icmp eq i32 %941, 2
  %943 = bitcast float* %940 to i32*
  %944 = load i32, i32* %943, align 4
  br i1 %942, label %945, label %956

945:                                              ; preds = %939
  %946 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 1, i64 1
  %947 = bitcast float* %946 to i32*
  %948 = load i32, i32* %947, align 4
  %949 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 1, i64 5
  %950 = bitcast float* %949 to i32*
  %951 = load i32, i32* %950, align 4
  %952 = zext i32 %948 to i64
  %953 = shl nuw i64 %952, 32
  %954 = zext i32 %951 to i64
  %955 = shl nuw i64 %954, 32
  br label %956

956:                                              ; preds = %945, %939
  %957 = phi i64 [ %955, %945 ], [ 0, %939 ]
  %958 = phi i64 [ %953, %945 ], [ 0, %939 ]
  %959 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 1, i64 4
  %960 = bitcast float* %959 to i32*
  %961 = load i32, i32* %960, align 4
  %962 = zext i32 %944 to i64
  %963 = or i64 %958, %962
  %964 = bitcast i64 %963 to <2 x float>
  %965 = zext i32 %961 to i64
  %966 = or i64 %957, %965
  %967 = bitcast i64 %966 to <2 x float>
  %968 = shufflevector <2 x float> %964, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %969 = shufflevector <2 x float> %967, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %970 = shufflevector <4 x float> %968, <4 x float> %969, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %971 = fcmp oeq <4 x float> %826, zeroinitializer
  %972 = sext <4 x i1> %971 to <4 x i32>
  %973 = bitcast <4 x i32> %972 to <2 x i64>
  %974 = extractelement <2 x i64> %973, i32 0
  %975 = extractelement <2 x i64> %973, i32 1
  %976 = bitcast i64 %882 to <2 x i32>
  %977 = bitcast i64 %883 to <2 x i32>
  %978 = bitcast i64 %820 to <2 x i32>
  %979 = bitcast i64 %821 to <2 x i32>
  %980 = and i64 %975, %974
  %981 = bitcast i64 %980 to <2 x i32>
  %982 = shufflevector <2 x i32> %981, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %983 = shufflevector <2 x i32> %981, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %984 = shufflevector <4 x i32> %982, <4 x i32> %983, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %985 = shufflevector <2 x i32> %976, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %986 = shufflevector <2 x i32> %977, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %987 = shufflevector <4 x i32> %985, <4 x i32> %986, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %988 = and <4 x i32> %987, %984
  %989 = bitcast <4 x i32> %988 to <2 x i64>
  %990 = extractelement <2 x i64> %989, i32 0
  %991 = extractelement <2 x i64> %989, i32 1
  %992 = bitcast i64 %990 to <2 x i32>
  %993 = shufflevector <2 x i32> %992, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %994 = bitcast i64 %991 to <2 x i32>
  %995 = shufflevector <2 x i32> %994, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %996 = shufflevector <4 x i32> %993, <4 x i32> %995, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %997 = bitcast <4 x i32> %984 to <2 x i64>
  %998 = xor <2 x i64> %997, <i64 -1, i64 -1>
  %999 = extractelement <2 x i64> %998, i32 0
  %1000 = extractelement <2 x i64> %998, i32 1
  %1001 = bitcast i64 %999 to <2 x i32>
  %1002 = shufflevector <2 x i32> %1001, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1003 = bitcast i64 %1000 to <2 x i32>
  %1004 = shufflevector <2 x i32> %1003, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1005 = shufflevector <4 x i32> %1002, <4 x i32> %1004, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1006 = shufflevector <2 x i32> %978, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1007 = shufflevector <2 x i32> %979, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1008 = shufflevector <4 x i32> %1006, <4 x i32> %1007, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1009 = and <4 x i32> %1005, %1008
  %1010 = bitcast <4 x i32> %1009 to <2 x i64>
  %1011 = extractelement <2 x i64> %1010, i32 0
  %1012 = extractelement <2 x i64> %1010, i32 1
  %1013 = bitcast i64 %1011 to <2 x i32>
  %1014 = shufflevector <2 x i32> %1013, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1015 = bitcast i64 %1012 to <2 x i32>
  %1016 = shufflevector <2 x i32> %1015, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1017 = shufflevector <4 x i32> %1014, <4 x i32> %1016, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1018 = or <4 x i32> %996, %1017
  %1019 = bitcast <4 x i32> %1018 to <2 x i64>
  %1020 = extractelement <2 x i64> %1019, i32 0
  %1021 = extractelement <2 x i64> %1019, i32 1
  %1022 = bitcast i64 %1020 to <2 x float>
  %1023 = bitcast i64 %1021 to <2 x float>
  %1024 = fsub <4 x float> %714, %970
  %1025 = shufflevector <2 x float> %1022, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1026 = shufflevector <2 x float> %1023, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1027 = shufflevector <4 x float> %1025, <4 x float> %1026, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1028 = fmul <4 x float> %1024, %1024
  %1029 = shufflevector <4 x float> %1028, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1030 = shufflevector <4 x float> %1028, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1031 = fmul <4 x float> %1027, %1027
  %1032 = shufflevector <4 x float> %1031, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1033 = shufflevector <4 x float> %1031, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1034 = fmul <4 x float> %1027, %1024
  %1035 = shufflevector <4 x float> %1034, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1036 = shufflevector <4 x float> %1034, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1037 = fadd <2 x float> %1035, %1036
  %1038 = fadd <2 x float> %1029, %1030
  %1039 = fadd <2 x float> %1032, %1033
  %1040 = fmul <2 x float> %1039, %1038
  %1041 = extractelement <2 x float> %1040, i32 0
  %1042 = tail call float @sqrtf(float %1041) #13
  %1043 = extractelement <2 x float> %1040, i32 1
  %1044 = tail call float @sqrtf(float %1043) #13
  %1045 = insertelement <2 x float> undef, float %1042, i32 0
  %1046 = insertelement <2 x float> %1045, float %1044, i32 1
  %1047 = fdiv <2 x float> %1037, %1046
  %1048 = fcmp uge <2 x float> %1047, <float 1.000000e+00, float 1.000000e+00>
  %1049 = bitcast <2 x float> %1047 to <2 x i32>
  %1050 = select <2 x i1> %1048, <2 x i32> <i32 1065353216, i32 1065353216>, <2 x i32> %1049
  %1051 = extractelement <2 x i32> %1050, i32 0
  %1052 = extractelement <2 x i32> %1050, i32 1
  %1053 = zext i32 %1052 to i64
  %1054 = shl nuw i64 %1053, 32
  %1055 = zext i32 %1051 to i64
  %1056 = or i64 %1054, %1055
  %1057 = bitcast i64 %1056 to <2 x float>
  %1058 = fcmp uge <2 x float> %1057, <float -1.000000e+00, float -1.000000e+00>
  %1059 = bitcast i64 %1056 to <2 x i32>
  %1060 = select <2 x i1> %1058, <2 x i32> %1059, <2 x i32> <i32 -1082130432, i32 -1082130432>
  %1061 = extractelement <2 x i32> %1060, i32 0
  %1062 = extractelement <2 x i32> %1060, i32 1
  %1063 = zext i32 %1062 to i64
  %1064 = shl nuw i64 %1063, 32
  %1065 = zext i32 %1061 to i64
  %1066 = or i64 %1064, %1065
  %1067 = bitcast i64 %1066 to <2 x float>
  %1068 = fmul <2 x float> %1067, %1067
  %1069 = fmul <2 x float> %1068, <float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %1070 = fadd <2 x float> %1069, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %1071 = fmul <2 x float> %1068, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %1072 = fadd <2 x float> %1071, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %1073 = fmul <2 x float> %1068, %1072
  %1074 = fadd <2 x float> %1073, <float 1.000000e+00, float 1.000000e+00>
  %1075 = fdiv <2 x float> %1070, %1074
  %1076 = fmul <2 x float> %1075, %1067
  %1077 = fadd <2 x float> %1076, <float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %1078 = fadd <2 x float> %938, %1077
  br label %1079

1079:                                             ; preds = %956, %697
  %1080 = phi <2 x float> [ %1078, %956 ], [ %938, %697 ]
  %1081 = load i32, i32* %598, align 32
  %1082 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 1, i64 0
  %1083 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 9, i32 1
  %1084 = load float, float* %1083, align 4
  %1085 = insertelement <2 x float> undef, float %1084, i32 0
  %1086 = shufflevector <2 x float> %1085, <2 x float> undef, <2 x i32> zeroinitializer
  %1087 = fmul <2 x float> %1080, %1086
  %1088 = fadd <2 x float> %764, %1087
  %1089 = bitcast <2 x float> %1088 to <2 x i32>
  %1090 = add <2 x i32> %1089, <i32 8388607, i32 8388607>
  %1091 = ashr <2 x i32> %1090, <i32 23, i32 23>
  %1092 = icmp slt <2 x i32> %1091, <i32 142, i32 142>
  %1093 = select <2 x i1> %1092, <2 x i32> %1091, <2 x i32> <i32 142, i32 142>
  %1094 = icmp sgt <2 x i32> %1093, <i32 127, i32 127>
  %1095 = select <2 x i1> %1094, <2 x i32> %1093, <2 x i32> <i32 127, i32 127>
  %1096 = add nsw <2 x i32> %1095, <i32 -127, i32 -127>
  %1097 = extractelement <2 x i32> %1096, i32 0
  %1098 = extractelement <2 x i32> %1096, i32 1
  switch i32 %1081, label %1105 [
    i32 4, label %1106
    i32 3, label %1099
    i32 2, label %1102
    i32 1, label %1136
  ]

1099:                                             ; preds = %1079
  %1100 = trunc i32 %1098 to i8
  %1101 = sext i8 %1100 to i64
  br label %1116

1102:                                             ; preds = %1079
  %1103 = trunc i32 %1098 to i8
  %1104 = sext i8 %1103 to i64
  br label %1126

1105:                                             ; preds = %1079
  tail call void @llvm.trap() #13
  unreachable

1106:                                             ; preds = %1079
  %1107 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1108 = load i32*, i32** %1107, align 8
  %1109 = trunc i32 %1098 to i8
  %1110 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 1, i64 3
  %1111 = load i8*, i8** %1110, align 8
  store i8 %1109, i8* %1111, align 1
  %1112 = sext i8 %1109 to i64
  %1113 = getelementptr inbounds i32, i32* %1108, i64 %1112
  %1114 = load i32, i32* %1113, align 4
  %1115 = add nsw i32 %1114, 1
  store i32 %1115, i32* %1113, align 4
  br label %1116

1116:                                             ; preds = %1106, %1099
  %1117 = phi i64 [ %1101, %1099 ], [ %1112, %1106 ]
  %1118 = phi i8 [ %1100, %1099 ], [ %1109, %1106 ]
  %1119 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1120 = load i32*, i32** %1119, align 8
  %1121 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 1, i64 2
  %1122 = load i8*, i8** %1121, align 8
  store i8 %1118, i8* %1122, align 1
  %1123 = getelementptr inbounds i32, i32* %1120, i64 %1117
  %1124 = load i32, i32* %1123, align 4
  %1125 = add nsw i32 %1124, 1
  store i32 %1125, i32* %1123, align 4
  br label %1126

1126:                                             ; preds = %1116, %1102
  %1127 = phi i64 [ %1104, %1102 ], [ %1117, %1116 ]
  %1128 = phi i8 [ %1103, %1102 ], [ %1118, %1116 ]
  %1129 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1130 = load i32*, i32** %1129, align 8
  %1131 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 1, i64 1
  %1132 = load i8*, i8** %1131, align 8
  store i8 %1128, i8* %1132, align 1
  %1133 = getelementptr inbounds i32, i32* %1130, i64 %1127
  %1134 = load i32, i32* %1133, align 4
  %1135 = add nsw i32 %1134, 1
  store i32 %1135, i32* %1133, align 4
  br label %1136

1136:                                             ; preds = %1079, %1126
  %1137 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1138 = load i32*, i32** %1137, align 8
  %1139 = trunc i32 %1097 to i8
  %1140 = load i8*, i8** %1082, align 8
  store i8 %1139, i8* %1140, align 1
  %1141 = sext i8 %1139 to i64
  %1142 = getelementptr inbounds i32, i32* %1138, i64 %1141
  %1143 = load i32, i32* %1142, align 4
  %1144 = add nsw i32 %1143, 1
  store i32 %1144, i32* %1142, align 4
  store i32 0, i32* %598, align 32
  br label %1146

1145:                                             ; preds = %601
  tail call fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter11flushCubicsILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"* %0)
  br label %1146

1146:                                             ; preds = %597, %1136, %1145
  %1147 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 2
  %1148 = load i32, i32* %1147, align 32
  %1149 = icmp eq i32 %1148, 0
  br i1 %1149, label %2018, label %1150

1150:                                             ; preds = %1146
  %1151 = icmp slt i32 %1148, 3
  br i1 %1151, label %1152, label %2017

1152:                                             ; preds = %1150
  %1153 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3
  %1154 = icmp eq i32 %1148, 2
  %1155 = bitcast %"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue.17"* %1153 to i32*
  %1156 = load i32, i32* %1155, align 4
  br i1 %1154, label %1157, label %1168

1157:                                             ; preds = %1152
  %1158 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 0, i64 1
  %1159 = bitcast float* %1158 to i32*
  %1160 = load i32, i32* %1159, align 4
  %1161 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 0, i64 5
  %1162 = bitcast float* %1161 to i32*
  %1163 = load i32, i32* %1162, align 4
  %1164 = zext i32 %1160 to i64
  %1165 = shl nuw i64 %1164, 32
  %1166 = zext i32 %1163 to i64
  %1167 = shl nuw i64 %1166, 32
  br label %1168

1168:                                             ; preds = %1157, %1152
  %1169 = phi i64 [ %1167, %1157 ], [ 0, %1152 ]
  %1170 = phi i64 [ %1165, %1157 ], [ 0, %1152 ]
  %1171 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 0, i64 4
  %1172 = bitcast float* %1171 to i32*
  %1173 = load i32, i32* %1172, align 4
  %1174 = zext i32 %1156 to i64
  %1175 = or i64 %1170, %1174
  %1176 = bitcast i64 %1175 to <2 x float>
  %1177 = zext i32 %1173 to i64
  %1178 = or i64 %1169, %1177
  %1179 = bitcast i64 %1178 to <2 x float>
  %1180 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i64 0
  %1181 = bitcast float* %1180 to i32*
  %1182 = load i32, i32* %1181, align 4
  br i1 %1154, label %1183, label %1194

1183:                                             ; preds = %1168
  %1184 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i64 1
  %1185 = bitcast float* %1184 to i32*
  %1186 = load i32, i32* %1185, align 4
  %1187 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i64 5
  %1188 = bitcast float* %1187 to i32*
  %1189 = load i32, i32* %1188, align 4
  %1190 = zext i32 %1186 to i64
  %1191 = shl nuw i64 %1190, 32
  %1192 = zext i32 %1189 to i64
  %1193 = shl nuw i64 %1192, 32
  br label %1194

1194:                                             ; preds = %1183, %1168
  %1195 = phi i64 [ %1193, %1183 ], [ 0, %1168 ]
  %1196 = phi i64 [ %1191, %1183 ], [ 0, %1168 ]
  %1197 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i64 4
  %1198 = bitcast float* %1197 to i32*
  %1199 = load i32, i32* %1198, align 4
  %1200 = zext i32 %1182 to i64
  %1201 = or i64 %1196, %1200
  %1202 = bitcast i64 %1201 to <2 x float>
  %1203 = zext i32 %1199 to i64
  %1204 = or i64 %1195, %1203
  %1205 = bitcast i64 %1204 to <2 x float>
  %1206 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i64 0
  %1207 = bitcast float* %1206 to i32*
  %1208 = load i32, i32* %1207, align 4
  br i1 %1154, label %1209, label %1220

1209:                                             ; preds = %1194
  %1210 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i64 1
  %1211 = bitcast float* %1210 to i32*
  %1212 = load i32, i32* %1211, align 4
  %1213 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i64 5
  %1214 = bitcast float* %1213 to i32*
  %1215 = load i32, i32* %1214, align 4
  %1216 = zext i32 %1212 to i64
  %1217 = shl nuw i64 %1216, 32
  %1218 = zext i32 %1215 to i64
  %1219 = shl nuw i64 %1218, 32
  br label %1220

1220:                                             ; preds = %1209, %1194
  %1221 = phi i64 [ %1219, %1209 ], [ 0, %1194 ]
  %1222 = phi i64 [ %1217, %1209 ], [ 0, %1194 ]
  %1223 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i64 4
  %1224 = bitcast float* %1223 to i32*
  %1225 = load i32, i32* %1224, align 4
  %1226 = zext i32 %1208 to i64
  %1227 = or i64 %1222, %1226
  %1228 = bitcast i64 %1227 to <2 x float>
  %1229 = zext i32 %1225 to i64
  %1230 = or i64 %1221, %1229
  %1231 = bitcast i64 %1230 to <2 x float>
  %1232 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 3, i64 0
  %1233 = bitcast float* %1232 to i32*
  %1234 = load i32, i32* %1233, align 4
  br i1 %1154, label %1235, label %1246

1235:                                             ; preds = %1220
  %1236 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 3, i64 1
  %1237 = bitcast float* %1236 to i32*
  %1238 = load i32, i32* %1237, align 4
  %1239 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 3, i64 5
  %1240 = bitcast float* %1239 to i32*
  %1241 = load i32, i32* %1240, align 4
  %1242 = zext i32 %1238 to i64
  %1243 = shl nuw i64 %1242, 32
  %1244 = zext i32 %1241 to i64
  %1245 = shl nuw i64 %1244, 32
  br label %1246

1246:                                             ; preds = %1235, %1220
  %1247 = phi i64 [ %1245, %1235 ], [ 0, %1220 ]
  %1248 = phi i64 [ %1243, %1235 ], [ 0, %1220 ]
  %1249 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 3, i64 4
  %1250 = bitcast float* %1249 to i32*
  %1251 = load i32, i32* %1250, align 4
  %1252 = zext i32 %1234 to i64
  %1253 = or i64 %1248, %1252
  %1254 = bitcast i64 %1253 to <2 x float>
  %1255 = zext i32 %1251 to i64
  %1256 = or i64 %1247, %1255
  %1257 = bitcast i64 %1256 to <2 x float>
  %1258 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 4, i32 0, i64 0
  %1259 = bitcast float* %1258 to i32*
  %1260 = load i32, i32* %1259, align 4
  br i1 %1154, label %1261, label %1272

1261:                                             ; preds = %1246
  %1262 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 4, i32 0, i64 1
  %1263 = bitcast float* %1262 to i32*
  %1264 = load i32, i32* %1263, align 4
  %1265 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 4, i32 0, i64 5
  %1266 = bitcast float* %1265 to i32*
  %1267 = load i32, i32* %1266, align 4
  %1268 = zext i32 %1264 to i64
  %1269 = shl nuw i64 %1268, 32
  %1270 = zext i32 %1267 to i64
  %1271 = shl nuw i64 %1270, 32
  br label %1272

1272:                                             ; preds = %1261, %1246
  %1273 = phi i64 [ %1271, %1261 ], [ 0, %1246 ]
  %1274 = phi i64 [ %1269, %1261 ], [ 0, %1246 ]
  %1275 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 4, i32 0, i64 4
  %1276 = bitcast float* %1275 to i32*
  %1277 = load i32, i32* %1276, align 4
  %1278 = zext i32 %1260 to i64
  %1279 = or i64 %1274, %1278
  %1280 = bitcast i64 %1279 to <2 x float>
  %1281 = zext i32 %1277 to i64
  %1282 = or i64 %1273, %1281
  %1283 = bitcast i64 %1282 to <2 x float>
  %1284 = shufflevector <2 x float> %1176, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1285 = shufflevector <2 x float> %1179, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1286 = shufflevector <4 x float> %1284, <4 x float> %1285, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1287 = shufflevector <2 x float> %1202, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1288 = shufflevector <2 x float> %1205, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1289 = shufflevector <4 x float> %1287, <4 x float> %1288, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1290 = fsub <4 x float> %1289, %1286
  %1291 = shufflevector <2 x float> %1280, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1292 = shufflevector <2 x float> %1283, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1293 = shufflevector <4 x float> %1291, <4 x float> %1292, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1294 = fmul <4 x float> %1290, %1293
  %1295 = fadd <4 x float> %1286, %1294
  %1296 = shufflevector <2 x float> %1228, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1297 = shufflevector <2 x float> %1231, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1298 = shufflevector <4 x float> %1296, <4 x float> %1297, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1299 = fsub <4 x float> %1298, %1289
  %1300 = fmul <4 x float> %1299, %1293
  %1301 = fadd <4 x float> %1289, %1300
  %1302 = shufflevector <2 x float> %1254, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1303 = shufflevector <2 x float> %1257, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1304 = shufflevector <4 x float> %1302, <4 x float> %1303, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1305 = fsub <4 x float> %1304, %1298
  %1306 = fmul <4 x float> %1305, %1293
  %1307 = fadd <4 x float> %1298, %1306
  %1308 = fsub <4 x float> %1301, %1295
  %1309 = fmul <4 x float> %1293, %1308
  %1310 = fadd <4 x float> %1295, %1309
  %1311 = fsub <4 x float> %1307, %1301
  %1312 = fmul <4 x float> %1293, %1311
  %1313 = fadd <4 x float> %1301, %1312
  %1314 = fsub <4 x float> %1313, %1310
  %1315 = fmul <4 x float> %1293, %1314
  %1316 = fadd <4 x float> %1310, %1315
  %1317 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 11
  %1318 = load i8, i8* %1317, align 4, !range !2
  %1319 = icmp eq i8 %1318, 0
  %1320 = fmul <4 x float> %1295, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %1321 = fadd <4 x float> %1320, %1310
  %1322 = fadd <4 x float> %1286, %1321
  %1323 = fmul <4 x float> %1322, %1322
  %1324 = shufflevector <4 x float> %1323, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1325 = shufflevector <4 x float> %1323, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1326 = fadd <2 x float> %1324, %1325
  %1327 = fmul <4 x float> %1310, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %1328 = fadd <4 x float> %1327, %1316
  %1329 = fadd <4 x float> %1295, %1328
  %1330 = fmul <4 x float> %1329, %1329
  %1331 = shufflevector <4 x float> %1330, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1332 = shufflevector <4 x float> %1330, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1333 = fadd <2 x float> %1331, %1332
  %1334 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 6
  %1335 = load float, float* %1334, align 4
  %1336 = fcmp olt <2 x float> %1326, %1333
  %1337 = select <2 x i1> %1336, <2 x float> %1333, <2 x float> %1326
  %1338 = bitcast <2 x float> %1337 to <2 x i32>
  %1339 = extractelement <2 x i32> %1338, i32 0
  %1340 = extractelement <2 x i32> %1338, i32 1
  %1341 = zext i32 %1340 to i64
  %1342 = shl nuw i64 %1341, 32
  %1343 = zext i32 %1339 to i64
  %1344 = or i64 %1342, %1343
  %1345 = bitcast i64 %1344 to <2 x float>
  %1346 = extractelement <2 x float> %1345, i32 0
  %1347 = tail call float @sqrtf(float %1346) #13
  %1348 = extractelement <2 x float> %1345, i32 1
  %1349 = tail call float @sqrtf(float %1348) #13
  %1350 = insertelement <2 x float> undef, float %1347, i32 0
  %1351 = insertelement <2 x float> %1350, float %1349, i32 1
  %1352 = insertelement <2 x float> undef, float %1335, i32 0
  %1353 = shufflevector <2 x float> %1352, <2 x float> undef, <2 x i32> zeroinitializer
  %1354 = fmul <2 x float> %1353, %1351
  %1355 = extractelement <2 x float> %1354, i32 0
  %1356 = tail call float @sqrtf(float %1355) #13
  %1357 = extractelement <2 x float> %1354, i32 1
  %1358 = tail call float @sqrtf(float %1357) #13
  %1359 = insertelement <2 x float> undef, float %1356, i32 0
  %1360 = insertelement <2 x float> %1359, float %1358, i32 1
  %1361 = fsub <4 x float> %1295, %1286
  %1362 = fcmp oeq <4 x float> %1361, zeroinitializer
  %1363 = sext <4 x i1> %1362 to <4 x i32>
  %1364 = bitcast <4 x i32> %1363 to <2 x i64>
  %1365 = extractelement <2 x i64> %1364, i32 0
  %1366 = extractelement <2 x i64> %1364, i32 1
  %1367 = fsub <4 x float> %1310, %1286
  %1368 = shufflevector <4 x float> %1367, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1369 = shufflevector <4 x float> %1367, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1370 = shufflevector <4 x float> %1361, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1371 = shufflevector <4 x float> %1361, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1372 = bitcast <2 x float> %1368 to <2 x i32>
  %1373 = bitcast <2 x float> %1369 to <2 x i32>
  %1374 = bitcast <2 x float> %1370 to <2 x i32>
  %1375 = bitcast <2 x float> %1371 to <2 x i32>
  %1376 = and i64 %1366, %1365
  %1377 = bitcast i64 %1376 to <2 x i32>
  %1378 = shufflevector <2 x i32> %1377, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1379 = shufflevector <2 x i32> %1377, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1380 = shufflevector <4 x i32> %1378, <4 x i32> %1379, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1381 = shufflevector <2 x i32> %1372, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1382 = shufflevector <2 x i32> %1373, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1383 = shufflevector <4 x i32> %1381, <4 x i32> %1382, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1384 = and <4 x i32> %1380, %1383
  %1385 = bitcast <4 x i32> %1384 to <2 x i64>
  %1386 = extractelement <2 x i64> %1385, i32 0
  %1387 = extractelement <2 x i64> %1385, i32 1
  %1388 = bitcast i64 %1386 to <2 x i32>
  %1389 = shufflevector <2 x i32> %1388, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1390 = bitcast i64 %1387 to <2 x i32>
  %1391 = shufflevector <2 x i32> %1390, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1392 = shufflevector <4 x i32> %1389, <4 x i32> %1391, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1393 = bitcast <4 x i32> %1380 to <2 x i64>
  %1394 = xor <2 x i64> %1393, <i64 -1, i64 -1>
  %1395 = extractelement <2 x i64> %1394, i32 0
  %1396 = extractelement <2 x i64> %1394, i32 1
  %1397 = bitcast i64 %1395 to <2 x i32>
  %1398 = shufflevector <2 x i32> %1397, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1399 = bitcast i64 %1396 to <2 x i32>
  %1400 = shufflevector <2 x i32> %1399, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1401 = shufflevector <4 x i32> %1398, <4 x i32> %1400, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1402 = shufflevector <2 x i32> %1374, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1403 = shufflevector <2 x i32> %1375, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1404 = shufflevector <4 x i32> %1402, <4 x i32> %1403, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1405 = and <4 x i32> %1401, %1404
  %1406 = bitcast <4 x i32> %1405 to <2 x i64>
  %1407 = extractelement <2 x i64> %1406, i32 0
  %1408 = extractelement <2 x i64> %1406, i32 1
  %1409 = bitcast i64 %1407 to <2 x i32>
  %1410 = shufflevector <2 x i32> %1409, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1411 = bitcast i64 %1408 to <2 x i32>
  %1412 = shufflevector <2 x i32> %1411, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1413 = shufflevector <4 x i32> %1410, <4 x i32> %1412, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1414 = or <4 x i32> %1413, %1392
  %1415 = bitcast <4 x i32> %1414 to <2 x i64>
  %1416 = extractelement <2 x i64> %1415, i32 0
  %1417 = extractelement <2 x i64> %1415, i32 1
  %1418 = bitcast i64 %1416 to <2 x float>
  %1419 = bitcast i64 %1417 to <2 x float>
  %1420 = shufflevector <2 x float> %1418, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1421 = shufflevector <2 x float> %1419, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1422 = shufflevector <4 x float> %1420, <4 x float> %1421, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1423 = fsub <4 x float> %1316, %1310
  %1424 = fcmp oeq <4 x float> %1423, zeroinitializer
  %1425 = sext <4 x i1> %1424 to <4 x i32>
  %1426 = bitcast <4 x i32> %1425 to <2 x i64>
  %1427 = extractelement <2 x i64> %1426, i32 0
  %1428 = extractelement <2 x i64> %1426, i32 1
  %1429 = fsub <4 x float> %1316, %1295
  %1430 = shufflevector <4 x float> %1429, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1431 = shufflevector <4 x float> %1429, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1432 = shufflevector <4 x float> %1423, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1433 = shufflevector <4 x float> %1423, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1434 = bitcast <2 x float> %1430 to <2 x i32>
  %1435 = bitcast <2 x float> %1431 to <2 x i32>
  %1436 = bitcast <2 x float> %1432 to <2 x i32>
  %1437 = bitcast <2 x float> %1433 to <2 x i32>
  %1438 = and i64 %1428, %1427
  %1439 = bitcast i64 %1438 to <2 x i32>
  %1440 = shufflevector <2 x i32> %1439, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1441 = shufflevector <2 x i32> %1439, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1442 = shufflevector <4 x i32> %1440, <4 x i32> %1441, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1443 = shufflevector <2 x i32> %1434, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1444 = shufflevector <2 x i32> %1435, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1445 = shufflevector <4 x i32> %1443, <4 x i32> %1444, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1446 = and <4 x i32> %1442, %1445
  %1447 = bitcast <4 x i32> %1446 to <2 x i64>
  %1448 = extractelement <2 x i64> %1447, i32 0
  %1449 = extractelement <2 x i64> %1447, i32 1
  %1450 = bitcast i64 %1448 to <2 x i32>
  %1451 = shufflevector <2 x i32> %1450, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1452 = bitcast i64 %1449 to <2 x i32>
  %1453 = shufflevector <2 x i32> %1452, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1454 = shufflevector <4 x i32> %1451, <4 x i32> %1453, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1455 = bitcast <4 x i32> %1442 to <2 x i64>
  %1456 = xor <2 x i64> %1455, <i64 -1, i64 -1>
  %1457 = extractelement <2 x i64> %1456, i32 0
  %1458 = extractelement <2 x i64> %1456, i32 1
  %1459 = bitcast i64 %1457 to <2 x i32>
  %1460 = shufflevector <2 x i32> %1459, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1461 = bitcast i64 %1458 to <2 x i32>
  %1462 = shufflevector <2 x i32> %1461, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1463 = shufflevector <4 x i32> %1460, <4 x i32> %1462, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1464 = shufflevector <2 x i32> %1436, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1465 = shufflevector <2 x i32> %1437, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1466 = shufflevector <4 x i32> %1464, <4 x i32> %1465, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1467 = and <4 x i32> %1463, %1466
  %1468 = bitcast <4 x i32> %1467 to <2 x i64>
  %1469 = extractelement <2 x i64> %1468, i32 0
  %1470 = extractelement <2 x i64> %1468, i32 1
  %1471 = bitcast i64 %1469 to <2 x i32>
  %1472 = shufflevector <2 x i32> %1471, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1473 = bitcast i64 %1470 to <2 x i32>
  %1474 = shufflevector <2 x i32> %1473, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1475 = shufflevector <4 x i32> %1472, <4 x i32> %1474, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1476 = or <4 x i32> %1475, %1454
  %1477 = bitcast <4 x i32> %1476 to <2 x i64>
  %1478 = extractelement <2 x i64> %1477, i32 0
  %1479 = extractelement <2 x i64> %1477, i32 1
  %1480 = bitcast i64 %1478 to <2 x float>
  %1481 = bitcast i64 %1479 to <2 x float>
  %1482 = shufflevector <2 x float> %1480, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1483 = shufflevector <2 x float> %1481, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1484 = shufflevector <4 x float> %1482, <4 x float> %1483, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1485 = fmul <4 x float> %1422, %1422
  %1486 = shufflevector <4 x float> %1485, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1487 = shufflevector <4 x float> %1485, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1488 = fmul <4 x float> %1484, %1484
  %1489 = shufflevector <4 x float> %1488, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1490 = shufflevector <4 x float> %1488, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1491 = fmul <4 x float> %1422, %1484
  %1492 = shufflevector <4 x float> %1491, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1493 = shufflevector <4 x float> %1491, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1494 = fadd <2 x float> %1492, %1493
  %1495 = fadd <2 x float> %1486, %1487
  %1496 = fadd <2 x float> %1489, %1490
  %1497 = fmul <2 x float> %1495, %1496
  %1498 = extractelement <2 x float> %1497, i32 0
  %1499 = tail call float @sqrtf(float %1498) #13
  %1500 = extractelement <2 x float> %1497, i32 1
  %1501 = tail call float @sqrtf(float %1500) #13
  %1502 = insertelement <2 x float> undef, float %1499, i32 0
  %1503 = insertelement <2 x float> %1502, float %1501, i32 1
  %1504 = fdiv <2 x float> %1494, %1503
  %1505 = fcmp uge <2 x float> %1504, <float 1.000000e+00, float 1.000000e+00>
  %1506 = bitcast <2 x float> %1504 to <2 x i32>
  %1507 = select <2 x i1> %1505, <2 x i32> <i32 1065353216, i32 1065353216>, <2 x i32> %1506
  %1508 = extractelement <2 x i32> %1507, i32 0
  %1509 = extractelement <2 x i32> %1507, i32 1
  %1510 = zext i32 %1509 to i64
  %1511 = shl nuw i64 %1510, 32
  %1512 = zext i32 %1508 to i64
  %1513 = or i64 %1511, %1512
  %1514 = bitcast i64 %1513 to <2 x float>
  %1515 = fcmp uge <2 x float> %1514, <float -1.000000e+00, float -1.000000e+00>
  %1516 = bitcast i64 %1513 to <2 x i32>
  %1517 = select <2 x i1> %1515, <2 x i32> %1516, <2 x i32> <i32 -1082130432, i32 -1082130432>
  %1518 = extractelement <2 x i32> %1517, i32 0
  %1519 = extractelement <2 x i32> %1517, i32 1
  %1520 = zext i32 %1519 to i64
  %1521 = shl nuw i64 %1520, 32
  %1522 = zext i32 %1518 to i64
  %1523 = or i64 %1521, %1522
  %1524 = bitcast i64 %1523 to <2 x float>
  %1525 = fmul <2 x float> %1524, %1524
  %1526 = fmul <2 x float> %1525, <float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %1527 = fadd <2 x float> %1526, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %1528 = fmul <2 x float> %1525, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %1529 = fadd <2 x float> %1528, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %1530 = fmul <2 x float> %1525, %1529
  %1531 = fadd <2 x float> %1530, <float 1.000000e+00, float 1.000000e+00>
  %1532 = fdiv <2 x float> %1527, %1531
  %1533 = fmul <2 x float> %1532, %1524
  %1534 = fadd <2 x float> %1533, <float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  br i1 %1319, label %1675, label %1535

1535:                                             ; preds = %1272
  %1536 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 1, i64 0
  %1537 = load i32, i32* %1147, align 32
  %1538 = icmp eq i32 %1537, 2
  %1539 = bitcast float* %1536 to i32*
  %1540 = load i32, i32* %1539, align 4
  br i1 %1538, label %1541, label %1552

1541:                                             ; preds = %1535
  %1542 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 1, i64 1
  %1543 = bitcast float* %1542 to i32*
  %1544 = load i32, i32* %1543, align 4
  %1545 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 1, i64 5
  %1546 = bitcast float* %1545 to i32*
  %1547 = load i32, i32* %1546, align 4
  %1548 = zext i32 %1544 to i64
  %1549 = shl nuw i64 %1548, 32
  %1550 = zext i32 %1547 to i64
  %1551 = shl nuw i64 %1550, 32
  br label %1552

1552:                                             ; preds = %1541, %1535
  %1553 = phi i64 [ %1551, %1541 ], [ 0, %1535 ]
  %1554 = phi i64 [ %1549, %1541 ], [ 0, %1535 ]
  %1555 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 1, i64 4
  %1556 = bitcast float* %1555 to i32*
  %1557 = load i32, i32* %1556, align 4
  %1558 = zext i32 %1540 to i64
  %1559 = or i64 %1554, %1558
  %1560 = bitcast i64 %1559 to <2 x float>
  %1561 = zext i32 %1557 to i64
  %1562 = or i64 %1553, %1561
  %1563 = bitcast i64 %1562 to <2 x float>
  %1564 = shufflevector <2 x float> %1560, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1565 = shufflevector <2 x float> %1563, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1566 = shufflevector <4 x float> %1564, <4 x float> %1565, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1567 = fcmp oeq <4 x float> %1422, zeroinitializer
  %1568 = sext <4 x i1> %1567 to <4 x i32>
  %1569 = bitcast <4 x i32> %1568 to <2 x i64>
  %1570 = extractelement <2 x i64> %1569, i32 0
  %1571 = extractelement <2 x i64> %1569, i32 1
  %1572 = bitcast i64 %1478 to <2 x i32>
  %1573 = bitcast i64 %1479 to <2 x i32>
  %1574 = bitcast i64 %1416 to <2 x i32>
  %1575 = bitcast i64 %1417 to <2 x i32>
  %1576 = and i64 %1571, %1570
  %1577 = bitcast i64 %1576 to <2 x i32>
  %1578 = shufflevector <2 x i32> %1577, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1579 = shufflevector <2 x i32> %1577, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1580 = shufflevector <4 x i32> %1578, <4 x i32> %1579, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1581 = shufflevector <2 x i32> %1572, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1582 = shufflevector <2 x i32> %1573, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1583 = shufflevector <4 x i32> %1581, <4 x i32> %1582, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1584 = and <4 x i32> %1580, %1583
  %1585 = bitcast <4 x i32> %1584 to <2 x i64>
  %1586 = extractelement <2 x i64> %1585, i32 0
  %1587 = extractelement <2 x i64> %1585, i32 1
  %1588 = bitcast i64 %1586 to <2 x i32>
  %1589 = shufflevector <2 x i32> %1588, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1590 = bitcast i64 %1587 to <2 x i32>
  %1591 = shufflevector <2 x i32> %1590, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1592 = shufflevector <4 x i32> %1589, <4 x i32> %1591, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1593 = bitcast <4 x i32> %1580 to <2 x i64>
  %1594 = xor <2 x i64> %1593, <i64 -1, i64 -1>
  %1595 = extractelement <2 x i64> %1594, i32 0
  %1596 = extractelement <2 x i64> %1594, i32 1
  %1597 = bitcast i64 %1595 to <2 x i32>
  %1598 = shufflevector <2 x i32> %1597, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1599 = bitcast i64 %1596 to <2 x i32>
  %1600 = shufflevector <2 x i32> %1599, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1601 = shufflevector <4 x i32> %1598, <4 x i32> %1600, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1602 = shufflevector <2 x i32> %1574, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1603 = shufflevector <2 x i32> %1575, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1604 = shufflevector <4 x i32> %1602, <4 x i32> %1603, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1605 = and <4 x i32> %1601, %1604
  %1606 = bitcast <4 x i32> %1605 to <2 x i64>
  %1607 = extractelement <2 x i64> %1606, i32 0
  %1608 = extractelement <2 x i64> %1606, i32 1
  %1609 = bitcast i64 %1607 to <2 x i32>
  %1610 = shufflevector <2 x i32> %1609, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1611 = bitcast i64 %1608 to <2 x i32>
  %1612 = shufflevector <2 x i32> %1611, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1613 = shufflevector <4 x i32> %1610, <4 x i32> %1612, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1614 = or <4 x i32> %1613, %1592
  %1615 = bitcast <4 x i32> %1614 to <2 x i64>
  %1616 = extractelement <2 x i64> %1615, i32 0
  %1617 = extractelement <2 x i64> %1615, i32 1
  %1618 = bitcast i64 %1616 to <2 x float>
  %1619 = bitcast i64 %1617 to <2 x float>
  %1620 = fsub <4 x float> %1286, %1566
  %1621 = shufflevector <2 x float> %1618, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1622 = shufflevector <2 x float> %1619, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1623 = shufflevector <4 x float> %1621, <4 x float> %1622, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1624 = fmul <4 x float> %1620, %1620
  %1625 = shufflevector <4 x float> %1624, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1626 = shufflevector <4 x float> %1624, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1627 = fmul <4 x float> %1623, %1623
  %1628 = shufflevector <4 x float> %1627, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1629 = shufflevector <4 x float> %1627, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1630 = fmul <4 x float> %1623, %1620
  %1631 = shufflevector <4 x float> %1630, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1632 = shufflevector <4 x float> %1630, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1633 = fadd <2 x float> %1631, %1632
  %1634 = fadd <2 x float> %1625, %1626
  %1635 = fadd <2 x float> %1628, %1629
  %1636 = fmul <2 x float> %1635, %1634
  %1637 = extractelement <2 x float> %1636, i32 0
  %1638 = tail call float @sqrtf(float %1637) #13
  %1639 = extractelement <2 x float> %1636, i32 1
  %1640 = tail call float @sqrtf(float %1639) #13
  %1641 = insertelement <2 x float> undef, float %1638, i32 0
  %1642 = insertelement <2 x float> %1641, float %1640, i32 1
  %1643 = fdiv <2 x float> %1633, %1642
  %1644 = fcmp uge <2 x float> %1643, <float 1.000000e+00, float 1.000000e+00>
  %1645 = bitcast <2 x float> %1643 to <2 x i32>
  %1646 = select <2 x i1> %1644, <2 x i32> <i32 1065353216, i32 1065353216>, <2 x i32> %1645
  %1647 = extractelement <2 x i32> %1646, i32 0
  %1648 = extractelement <2 x i32> %1646, i32 1
  %1649 = zext i32 %1648 to i64
  %1650 = shl nuw i64 %1649, 32
  %1651 = zext i32 %1647 to i64
  %1652 = or i64 %1650, %1651
  %1653 = bitcast i64 %1652 to <2 x float>
  %1654 = fcmp uge <2 x float> %1653, <float -1.000000e+00, float -1.000000e+00>
  %1655 = bitcast i64 %1652 to <2 x i32>
  %1656 = select <2 x i1> %1654, <2 x i32> %1655, <2 x i32> <i32 -1082130432, i32 -1082130432>
  %1657 = extractelement <2 x i32> %1656, i32 0
  %1658 = extractelement <2 x i32> %1656, i32 1
  %1659 = zext i32 %1658 to i64
  %1660 = shl nuw i64 %1659, 32
  %1661 = zext i32 %1657 to i64
  %1662 = or i64 %1660, %1661
  %1663 = bitcast i64 %1662 to <2 x float>
  %1664 = fmul <2 x float> %1663, %1663
  %1665 = fmul <2 x float> %1664, <float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %1666 = fadd <2 x float> %1665, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %1667 = fmul <2 x float> %1664, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %1668 = fadd <2 x float> %1667, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %1669 = fmul <2 x float> %1664, %1668
  %1670 = fadd <2 x float> %1669, <float 1.000000e+00, float 1.000000e+00>
  %1671 = fdiv <2 x float> %1666, %1670
  %1672 = fmul <2 x float> %1671, %1663
  %1673 = fadd <2 x float> %1672, <float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %1674 = fadd <2 x float> %1534, %1673
  br label %1675

1675:                                             ; preds = %1552, %1272
  %1676 = phi <2 x float> [ %1674, %1552 ], [ %1534, %1272 ]
  %1677 = load i32, i32* %1147, align 32
  %1678 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 1, i64 0
  %1679 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 9, i32 1
  %1680 = load float, float* %1679, align 4
  %1681 = insertelement <2 x float> undef, float %1680, i32 0
  %1682 = shufflevector <2 x float> %1681, <2 x float> undef, <2 x i32> zeroinitializer
  %1683 = fmul <2 x float> %1676, %1682
  %1684 = fadd <2 x float> %1360, %1683
  %1685 = bitcast <2 x float> %1684 to <2 x i32>
  %1686 = add <2 x i32> %1685, <i32 8388607, i32 8388607>
  %1687 = ashr <2 x i32> %1686, <i32 23, i32 23>
  %1688 = icmp slt <2 x i32> %1687, <i32 142, i32 142>
  %1689 = select <2 x i1> %1688, <2 x i32> %1687, <2 x i32> <i32 142, i32 142>
  %1690 = icmp sgt <2 x i32> %1689, <i32 127, i32 127>
  %1691 = select <2 x i1> %1690, <2 x i32> %1689, <2 x i32> <i32 127, i32 127>
  %1692 = add nsw <2 x i32> %1691, <i32 -127, i32 -127>
  %1693 = extractelement <2 x i32> %1692, i32 0
  %1694 = extractelement <2 x i32> %1692, i32 1
  switch i32 %1677, label %1701 [
    i32 4, label %1702
    i32 3, label %1695
    i32 2, label %1698
    i32 1, label %1732
  ]

1695:                                             ; preds = %1675
  %1696 = trunc i32 %1694 to i8
  %1697 = sext i8 %1696 to i64
  br label %1712

1698:                                             ; preds = %1675
  %1699 = trunc i32 %1694 to i8
  %1700 = sext i8 %1699 to i64
  br label %1722

1701:                                             ; preds = %1675
  tail call void @llvm.trap() #13
  unreachable

1702:                                             ; preds = %1675
  %1703 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1704 = load i32*, i32** %1703, align 8
  %1705 = trunc i32 %1694 to i8
  %1706 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 1, i64 3
  %1707 = load i8*, i8** %1706, align 8
  store i8 %1705, i8* %1707, align 1
  %1708 = sext i8 %1705 to i64
  %1709 = getelementptr inbounds i32, i32* %1704, i64 %1708
  %1710 = load i32, i32* %1709, align 4
  %1711 = add nsw i32 %1710, 1
  store i32 %1711, i32* %1709, align 4
  br label %1712

1712:                                             ; preds = %1702, %1695
  %1713 = phi i64 [ %1697, %1695 ], [ %1708, %1702 ]
  %1714 = phi i8 [ %1696, %1695 ], [ %1705, %1702 ]
  %1715 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1716 = load i32*, i32** %1715, align 8
  %1717 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 1, i64 2
  %1718 = load i8*, i8** %1717, align 8
  store i8 %1714, i8* %1718, align 1
  %1719 = getelementptr inbounds i32, i32* %1716, i64 %1713
  %1720 = load i32, i32* %1719, align 4
  %1721 = add nsw i32 %1720, 1
  store i32 %1721, i32* %1719, align 4
  br label %1722

1722:                                             ; preds = %1712, %1698
  %1723 = phi i64 [ %1700, %1698 ], [ %1713, %1712 ]
  %1724 = phi i8 [ %1699, %1698 ], [ %1714, %1712 ]
  %1725 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1726 = load i32*, i32** %1725, align 8
  %1727 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 1, i64 1
  %1728 = load i8*, i8** %1727, align 8
  store i8 %1724, i8* %1728, align 1
  %1729 = getelementptr inbounds i32, i32* %1726, i64 %1723
  %1730 = load i32, i32* %1729, align 4
  %1731 = add nsw i32 %1730, 1
  store i32 %1731, i32* %1729, align 4
  br label %1732

1732:                                             ; preds = %1722, %1675
  %1733 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1734 = load i32*, i32** %1733, align 8
  %1735 = trunc i32 %1693 to i8
  %1736 = load i8*, i8** %1678, align 8
  store i8 %1735, i8* %1736, align 1
  %1737 = sext i8 %1735 to i64
  %1738 = getelementptr inbounds i32, i32* %1734, i64 %1737
  %1739 = load i32, i32* %1738, align 4
  %1740 = add nsw i32 %1739, 1
  store i32 %1740, i32* %1738, align 4
  %1741 = fmul <4 x float> %1313, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %1742 = fadd <4 x float> %1307, %1741
  %1743 = fadd <4 x float> %1742, %1316
  %1744 = fmul <4 x float> %1743, %1743
  %1745 = shufflevector <4 x float> %1744, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1746 = shufflevector <4 x float> %1744, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1747 = fadd <2 x float> %1745, %1746
  %1748 = fmul <4 x float> %1307, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %1749 = fadd <4 x float> %1304, %1748
  %1750 = fadd <4 x float> %1749, %1313
  %1751 = fmul <4 x float> %1750, %1750
  %1752 = shufflevector <4 x float> %1751, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1753 = shufflevector <4 x float> %1751, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1754 = fadd <2 x float> %1752, %1753
  %1755 = load float, float* %1334, align 4
  %1756 = fcmp olt <2 x float> %1747, %1754
  %1757 = select <2 x i1> %1756, <2 x float> %1754, <2 x float> %1747
  %1758 = bitcast <2 x float> %1757 to <2 x i32>
  %1759 = extractelement <2 x i32> %1758, i32 0
  %1760 = extractelement <2 x i32> %1758, i32 1
  %1761 = zext i32 %1760 to i64
  %1762 = shl nuw i64 %1761, 32
  %1763 = zext i32 %1759 to i64
  %1764 = or i64 %1762, %1763
  %1765 = bitcast i64 %1764 to <2 x float>
  %1766 = extractelement <2 x float> %1765, i32 0
  %1767 = tail call float @sqrtf(float %1766) #13
  %1768 = extractelement <2 x float> %1765, i32 1
  %1769 = tail call float @sqrtf(float %1768) #13
  %1770 = insertelement <2 x float> undef, float %1767, i32 0
  %1771 = insertelement <2 x float> %1770, float %1769, i32 1
  %1772 = insertelement <2 x float> undef, float %1755, i32 0
  %1773 = shufflevector <2 x float> %1772, <2 x float> undef, <2 x i32> zeroinitializer
  %1774 = fmul <2 x float> %1773, %1771
  %1775 = extractelement <2 x float> %1774, i32 0
  %1776 = tail call float @sqrtf(float %1775) #13
  %1777 = extractelement <2 x float> %1774, i32 1
  %1778 = tail call float @sqrtf(float %1777) #13
  %1779 = insertelement <2 x float> undef, float %1776, i32 0
  %1780 = insertelement <2 x float> %1779, float %1778, i32 1
  %1781 = fsub <4 x float> %1313, %1316
  %1782 = fcmp oeq <4 x float> %1781, zeroinitializer
  %1783 = sext <4 x i1> %1782 to <4 x i32>
  %1784 = bitcast <4 x i32> %1783 to <2 x i64>
  %1785 = extractelement <2 x i64> %1784, i32 0
  %1786 = extractelement <2 x i64> %1784, i32 1
  %1787 = fsub <4 x float> %1307, %1316
  %1788 = shufflevector <4 x float> %1787, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1789 = shufflevector <4 x float> %1787, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1790 = shufflevector <4 x float> %1781, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1791 = shufflevector <4 x float> %1781, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1792 = bitcast <2 x float> %1788 to <2 x i32>
  %1793 = bitcast <2 x float> %1789 to <2 x i32>
  %1794 = bitcast <2 x float> %1790 to <2 x i32>
  %1795 = bitcast <2 x float> %1791 to <2 x i32>
  %1796 = and i64 %1786, %1785
  %1797 = bitcast i64 %1796 to <2 x i32>
  %1798 = shufflevector <2 x i32> %1797, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1799 = shufflevector <2 x i32> %1797, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1800 = shufflevector <4 x i32> %1798, <4 x i32> %1799, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1801 = shufflevector <2 x i32> %1792, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1802 = shufflevector <2 x i32> %1793, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1803 = shufflevector <4 x i32> %1801, <4 x i32> %1802, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1804 = and <4 x i32> %1800, %1803
  %1805 = bitcast <4 x i32> %1804 to <2 x i64>
  %1806 = extractelement <2 x i64> %1805, i32 0
  %1807 = extractelement <2 x i64> %1805, i32 1
  %1808 = bitcast i64 %1806 to <2 x i32>
  %1809 = shufflevector <2 x i32> %1808, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1810 = bitcast i64 %1807 to <2 x i32>
  %1811 = shufflevector <2 x i32> %1810, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1812 = shufflevector <4 x i32> %1809, <4 x i32> %1811, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1813 = bitcast <4 x i32> %1800 to <2 x i64>
  %1814 = xor <2 x i64> %1813, <i64 -1, i64 -1>
  %1815 = extractelement <2 x i64> %1814, i32 0
  %1816 = extractelement <2 x i64> %1814, i32 1
  %1817 = bitcast i64 %1815 to <2 x i32>
  %1818 = shufflevector <2 x i32> %1817, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1819 = bitcast i64 %1816 to <2 x i32>
  %1820 = shufflevector <2 x i32> %1819, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1821 = shufflevector <4 x i32> %1818, <4 x i32> %1820, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1822 = shufflevector <2 x i32> %1794, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1823 = shufflevector <2 x i32> %1795, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1824 = shufflevector <4 x i32> %1822, <4 x i32> %1823, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1825 = and <4 x i32> %1821, %1824
  %1826 = bitcast <4 x i32> %1825 to <2 x i64>
  %1827 = extractelement <2 x i64> %1826, i32 0
  %1828 = extractelement <2 x i64> %1826, i32 1
  %1829 = bitcast i64 %1827 to <2 x i32>
  %1830 = shufflevector <2 x i32> %1829, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1831 = bitcast i64 %1828 to <2 x i32>
  %1832 = shufflevector <2 x i32> %1831, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1833 = shufflevector <4 x i32> %1830, <4 x i32> %1832, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1834 = or <4 x i32> %1833, %1812
  %1835 = bitcast <4 x i32> %1834 to <2 x i64>
  %1836 = extractelement <2 x i64> %1835, i32 0
  %1837 = extractelement <2 x i64> %1835, i32 1
  %1838 = bitcast i64 %1836 to <2 x float>
  %1839 = bitcast i64 %1837 to <2 x float>
  %1840 = shufflevector <2 x float> %1838, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1841 = shufflevector <2 x float> %1839, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1842 = shufflevector <4 x float> %1840, <4 x float> %1841, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1843 = fsub <4 x float> %1304, %1307
  %1844 = fcmp oeq <4 x float> %1843, zeroinitializer
  %1845 = sext <4 x i1> %1844 to <4 x i32>
  %1846 = bitcast <4 x i32> %1845 to <2 x i64>
  %1847 = extractelement <2 x i64> %1846, i32 0
  %1848 = extractelement <2 x i64> %1846, i32 1
  %1849 = fsub <4 x float> %1304, %1313
  %1850 = shufflevector <4 x float> %1849, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1851 = shufflevector <4 x float> %1849, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1852 = shufflevector <4 x float> %1843, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1853 = shufflevector <4 x float> %1843, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1854 = bitcast <2 x float> %1850 to <2 x i32>
  %1855 = bitcast <2 x float> %1851 to <2 x i32>
  %1856 = bitcast <2 x float> %1852 to <2 x i32>
  %1857 = bitcast <2 x float> %1853 to <2 x i32>
  %1858 = and i64 %1848, %1847
  %1859 = bitcast i64 %1858 to <2 x i32>
  %1860 = shufflevector <2 x i32> %1859, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1861 = shufflevector <2 x i32> %1859, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1862 = shufflevector <4 x i32> %1860, <4 x i32> %1861, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1863 = shufflevector <2 x i32> %1854, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1864 = shufflevector <2 x i32> %1855, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1865 = shufflevector <4 x i32> %1863, <4 x i32> %1864, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1866 = and <4 x i32> %1862, %1865
  %1867 = bitcast <4 x i32> %1866 to <2 x i64>
  %1868 = extractelement <2 x i64> %1867, i32 0
  %1869 = extractelement <2 x i64> %1867, i32 1
  %1870 = bitcast i64 %1868 to <2 x i32>
  %1871 = shufflevector <2 x i32> %1870, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1872 = bitcast i64 %1869 to <2 x i32>
  %1873 = shufflevector <2 x i32> %1872, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1874 = shufflevector <4 x i32> %1871, <4 x i32> %1873, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1875 = bitcast <4 x i32> %1862 to <2 x i64>
  %1876 = xor <2 x i64> %1875, <i64 -1, i64 -1>
  %1877 = extractelement <2 x i64> %1876, i32 0
  %1878 = extractelement <2 x i64> %1876, i32 1
  %1879 = bitcast i64 %1877 to <2 x i32>
  %1880 = shufflevector <2 x i32> %1879, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1881 = bitcast i64 %1878 to <2 x i32>
  %1882 = shufflevector <2 x i32> %1881, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1883 = shufflevector <4 x i32> %1880, <4 x i32> %1882, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1884 = shufflevector <2 x i32> %1856, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1885 = shufflevector <2 x i32> %1857, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1886 = shufflevector <4 x i32> %1884, <4 x i32> %1885, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1887 = and <4 x i32> %1883, %1886
  %1888 = bitcast <4 x i32> %1887 to <2 x i64>
  %1889 = extractelement <2 x i64> %1888, i32 0
  %1890 = extractelement <2 x i64> %1888, i32 1
  %1891 = bitcast i64 %1889 to <2 x i32>
  %1892 = shufflevector <2 x i32> %1891, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1893 = bitcast i64 %1890 to <2 x i32>
  %1894 = shufflevector <2 x i32> %1893, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1895 = shufflevector <4 x i32> %1892, <4 x i32> %1894, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1896 = or <4 x i32> %1895, %1874
  %1897 = bitcast <4 x i32> %1896 to <2 x i64>
  %1898 = extractelement <2 x i64> %1897, i32 0
  %1899 = extractelement <2 x i64> %1897, i32 1
  %1900 = bitcast i64 %1898 to <2 x float>
  %1901 = bitcast i64 %1899 to <2 x float>
  %1902 = shufflevector <2 x float> %1900, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1903 = shufflevector <2 x float> %1901, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1904 = shufflevector <4 x float> %1902, <4 x float> %1903, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1905 = fmul <4 x float> %1842, %1842
  %1906 = shufflevector <4 x float> %1905, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1907 = shufflevector <4 x float> %1905, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1908 = fmul <4 x float> %1904, %1904
  %1909 = shufflevector <4 x float> %1908, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1910 = shufflevector <4 x float> %1908, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1911 = fmul <4 x float> %1904, %1842
  %1912 = shufflevector <4 x float> %1911, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1913 = shufflevector <4 x float> %1911, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1914 = fadd <2 x float> %1912, %1913
  %1915 = fadd <2 x float> %1906, %1907
  %1916 = fadd <2 x float> %1909, %1910
  %1917 = fmul <2 x float> %1916, %1915
  %1918 = extractelement <2 x float> %1917, i32 0
  %1919 = tail call float @sqrtf(float %1918) #13
  %1920 = extractelement <2 x float> %1917, i32 1
  %1921 = tail call float @sqrtf(float %1920) #13
  %1922 = insertelement <2 x float> undef, float %1919, i32 0
  %1923 = insertelement <2 x float> %1922, float %1921, i32 1
  %1924 = fdiv <2 x float> %1914, %1923
  %1925 = fcmp uge <2 x float> %1924, <float 1.000000e+00, float 1.000000e+00>
  %1926 = bitcast <2 x float> %1924 to <2 x i32>
  %1927 = select <2 x i1> %1925, <2 x i32> <i32 1065353216, i32 1065353216>, <2 x i32> %1926
  %1928 = extractelement <2 x i32> %1927, i32 0
  %1929 = extractelement <2 x i32> %1927, i32 1
  %1930 = zext i32 %1929 to i64
  %1931 = shl nuw i64 %1930, 32
  %1932 = zext i32 %1928 to i64
  %1933 = or i64 %1931, %1932
  %1934 = bitcast i64 %1933 to <2 x float>
  %1935 = fcmp uge <2 x float> %1934, <float -1.000000e+00, float -1.000000e+00>
  %1936 = bitcast i64 %1933 to <2 x i32>
  %1937 = select <2 x i1> %1935, <2 x i32> %1936, <2 x i32> <i32 -1082130432, i32 -1082130432>
  %1938 = extractelement <2 x i32> %1937, i32 0
  %1939 = extractelement <2 x i32> %1937, i32 1
  %1940 = zext i32 %1939 to i64
  %1941 = shl nuw i64 %1940, 32
  %1942 = zext i32 %1938 to i64
  %1943 = or i64 %1941, %1942
  %1944 = bitcast i64 %1943 to <2 x float>
  %1945 = fmul <2 x float> %1944, %1944
  %1946 = fmul <2 x float> %1945, <float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %1947 = fadd <2 x float> %1946, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %1948 = fmul <2 x float> %1945, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %1949 = fadd <2 x float> %1948, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %1950 = fmul <2 x float> %1945, %1949
  %1951 = fadd <2 x float> %1950, <float 1.000000e+00, float 1.000000e+00>
  %1952 = fdiv <2 x float> %1947, %1951
  %1953 = fmul <2 x float> %1952, %1944
  %1954 = fadd <2 x float> %1953, <float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %1955 = load i32, i32* %1147, align 32
  %1956 = load float, float* %1679, align 4
  %1957 = insertelement <2 x float> undef, float %1956, i32 0
  %1958 = shufflevector <2 x float> %1957, <2 x float> undef, <2 x i32> zeroinitializer
  %1959 = fmul <2 x float> %1958, %1954
  %1960 = fadd <2 x float> %1780, %1959
  %1961 = bitcast <2 x float> %1960 to <2 x i32>
  %1962 = add <2 x i32> %1961, <i32 8388607, i32 8388607>
  %1963 = ashr <2 x i32> %1962, <i32 23, i32 23>
  %1964 = icmp slt <2 x i32> %1963, <i32 142, i32 142>
  %1965 = select <2 x i1> %1964, <2 x i32> %1963, <2 x i32> <i32 142, i32 142>
  %1966 = icmp sgt <2 x i32> %1965, <i32 127, i32 127>
  %1967 = select <2 x i1> %1966, <2 x i32> %1965, <2 x i32> <i32 127, i32 127>
  %1968 = add nsw <2 x i32> %1967, <i32 -127, i32 -127>
  %1969 = extractelement <2 x i32> %1968, i32 0
  %1970 = extractelement <2 x i32> %1968, i32 1
  switch i32 %1955, label %1977 [
    i32 4, label %1978
    i32 3, label %1971
    i32 2, label %1974
    i32 1, label %2008
  ]

1971:                                             ; preds = %1732
  %1972 = trunc i32 %1970 to i8
  %1973 = sext i8 %1972 to i64
  br label %1988

1974:                                             ; preds = %1732
  %1975 = trunc i32 %1970 to i8
  %1976 = sext i8 %1975 to i64
  br label %1998

1977:                                             ; preds = %1732
  tail call void @llvm.trap() #13
  unreachable

1978:                                             ; preds = %1732
  %1979 = load i32*, i32** %1733, align 8
  %1980 = trunc i32 %1970 to i8
  %1981 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 1, i64 3
  %1982 = load i8*, i8** %1981, align 8
  %1983 = getelementptr inbounds i8, i8* %1982, i64 1
  store i8 %1980, i8* %1983, align 1
  %1984 = sext i8 %1980 to i64
  %1985 = getelementptr inbounds i32, i32* %1979, i64 %1984
  %1986 = load i32, i32* %1985, align 4
  %1987 = add nsw i32 %1986, 1
  store i32 %1987, i32* %1985, align 4
  br label %1988

1988:                                             ; preds = %1978, %1971
  %1989 = phi i64 [ %1973, %1971 ], [ %1984, %1978 ]
  %1990 = phi i8 [ %1972, %1971 ], [ %1980, %1978 ]
  %1991 = load i32*, i32** %1733, align 8
  %1992 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 1, i64 2
  %1993 = load i8*, i8** %1992, align 8
  %1994 = getelementptr inbounds i8, i8* %1993, i64 1
  store i8 %1990, i8* %1994, align 1
  %1995 = getelementptr inbounds i32, i32* %1991, i64 %1989
  %1996 = load i32, i32* %1995, align 4
  %1997 = add nsw i32 %1996, 1
  store i32 %1997, i32* %1995, align 4
  br label %1998

1998:                                             ; preds = %1988, %1974
  %1999 = phi i64 [ %1976, %1974 ], [ %1989, %1988 ]
  %2000 = phi i8 [ %1975, %1974 ], [ %1990, %1988 ]
  %2001 = load i32*, i32** %1733, align 8
  %2002 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 1, i64 1
  %2003 = load i8*, i8** %2002, align 8
  %2004 = getelementptr inbounds i8, i8* %2003, i64 1
  store i8 %2000, i8* %2004, align 1
  %2005 = getelementptr inbounds i32, i32* %2001, i64 %1999
  %2006 = load i32, i32* %2005, align 4
  %2007 = add nsw i32 %2006, 1
  store i32 %2007, i32* %2005, align 4
  br label %2008

2008:                                             ; preds = %1732, %1998
  %2009 = load i32*, i32** %1733, align 8
  %2010 = trunc i32 %1969 to i8
  %2011 = load i8*, i8** %1678, align 8
  %2012 = getelementptr inbounds i8, i8* %2011, i64 1
  store i8 %2010, i8* %2012, align 1
  %2013 = sext i8 %2010 to i64
  %2014 = getelementptr inbounds i32, i32* %2009, i64 %2013
  %2015 = load i32, i32* %2014, align 4
  %2016 = add nsw i32 %2015, 1
  store i32 %2016, i32* %2014, align 4
  store i32 0, i32* %1147, align 32
  br label %2018

2017:                                             ; preds = %1150
  tail call fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter18flushChoppedCubicsILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"* %0)
  br label %2018

2018:                                             ; preds = %1146, %2008, %2017
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN27GrStrokeIndirectTessellator10addToChainEPS_(%class.GrStrokeIndirectTessellator* nocapture, %class.GrStrokeIndirectTessellator*) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %1, i64 0, i32 4
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = add nsw i32 %6, %4
  store i32 %7, i32* %5, align 8
  store i32 0, i32* %3, align 8
  %8 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %1, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = add nsw i32 %11, %9
  store i32 %12, i32* %10, align 4
  store i32 0, i32* %8, align 4
  %13 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %1, i64 0, i32 7
  %14 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 7
  %15 = load i32, i32* %13, align 4
  %16 = load i32, i32* %14, align 4
  %17 = icmp slt i32 %15, %16
  %18 = select i1 %17, i32 %16, i32 %15
  store i32 %18, i32* %14, align 8
  store i32 0, i32* %13, align 8
  %19 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 9
  %20 = load %class.GrStrokeIndirectTessellator**, %class.GrStrokeIndirectTessellator*** %19, align 8
  store %class.GrStrokeIndirectTessellator* %1, %class.GrStrokeIndirectTessellator** %20, align 8
  %21 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %1, i64 0, i32 9
  %22 = bitcast %class.GrStrokeIndirectTessellator*** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %class.GrStrokeIndirectTessellator*** %19 to i64*
  store i64 %23, i64* %24, align 8
  store %class.GrStrokeIndirectTessellator** null, %class.GrStrokeIndirectTessellator*** %21, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN27GrStrokeIndirectTessellator7prepareEPN12GrMeshDrawOp6TargetEi(%class.GrStrokeIndirectTessellator*, %"class.GrMeshDrawOp::Target"*, i32) unnamed_addr #2 align 2 {
  %4 = alloca %struct.GrDrawIndirectWriter, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.GrVertexWriter, align 8
  %7 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %65, label %10

10:                                               ; preds = %3
  %11 = bitcast %struct.GrDrawIndirectWriter* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #13
  %12 = getelementptr inbounds %struct.GrDrawIndirectWriter, %struct.GrDrawIndirectWriter* %4, i64 0, i32 0
  store %struct.GrDrawIndirectCommand* inttoptr (i64 -6148914691236517206 to %struct.GrDrawIndirectCommand*), %struct.GrDrawIndirectCommand** %12, align 8
  %13 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 10
  %14 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 12
  %15 = bitcast %"class.GrMeshDrawOp::Target"* %1 to void (%struct.GrDrawIndirectWriter*, %"class.GrMeshDrawOp::Target"*, i32, %class.sk_sp.13*, i64*)***
  %16 = load void (%struct.GrDrawIndirectWriter*, %"class.GrMeshDrawOp::Target"*, i32, %class.sk_sp.13*, i64*)**, void (%struct.GrDrawIndirectWriter*, %"class.GrMeshDrawOp::Target"*, i32, %class.sk_sp.13*, i64*)*** %15, align 8
  %17 = getelementptr inbounds void (%struct.GrDrawIndirectWriter*, %"class.GrMeshDrawOp::Target"*, i32, %class.sk_sp.13*, i64*)*, void (%struct.GrDrawIndirectWriter*, %"class.GrMeshDrawOp::Target"*, i32, %class.sk_sp.13*, i64*)** %16, i64 7
  %18 = load void (%struct.GrDrawIndirectWriter*, %"class.GrMeshDrawOp::Target"*, i32, %class.sk_sp.13*, i64*)*, void (%struct.GrDrawIndirectWriter*, %"class.GrMeshDrawOp::Target"*, i32, %class.sk_sp.13*, i64*)** %17, align 8
  call void %18(%struct.GrDrawIndirectWriter* nonnull sret %4, %"class.GrMeshDrawOp::Target"* %1, i32 %8, %class.sk_sp.13* %13, i64* %14) #13
  %19 = load %struct.GrDrawIndirectCommand*, %struct.GrDrawIndirectCommand** %12, align 8
  %20 = icmp eq %struct.GrDrawIndirectCommand* %19, null
  br i1 %20, label %64, label %21

21:                                               ; preds = %10
  %22 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #13
  store i32 -1431655766, i32* %5, align 4
  %23 = bitcast %struct.GrVertexWriter* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #13
  %24 = getelementptr inbounds %struct.GrVertexWriter, %struct.GrVertexWriter* %6, i64 0, i32 0
  %25 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 4, i32 3
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 4
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 11
  %30 = bitcast %"class.GrMeshDrawOp::Target"* %1 to i8* (%"class.GrMeshDrawOp::Target"*, i64, i32, %class.sk_sp.13*, i32*)***
  %31 = load i8* (%"class.GrMeshDrawOp::Target"*, i64, i32, %class.sk_sp.13*, i32*)**, i8* (%"class.GrMeshDrawOp::Target"*, i64, i32, %class.sk_sp.13*, i32*)*** %30, align 8
  %32 = getelementptr inbounds i8* (%"class.GrMeshDrawOp::Target"*, i64, i32, %class.sk_sp.13*, i32*)*, i8* (%"class.GrMeshDrawOp::Target"*, i64, i32, %class.sk_sp.13*, i32*)** %31, i64 3
  %33 = load i8* (%"class.GrMeshDrawOp::Target"*, i64, i32, %class.sk_sp.13*, i32*)*, i8* (%"class.GrMeshDrawOp::Target"*, i64, i32, %class.sk_sp.13*, i32*)** %32, align 8
  %34 = call i8* %33(%"class.GrMeshDrawOp::Target"* %1, i64 %26, i32 %28, %class.sk_sp.13* %29, i32* nonnull %5) #13
  store i8* %34, i8** %24, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %42, label %36

36:                                               ; preds = %21
  %37 = icmp eq %class.GrStrokeIndirectTessellator* %0, null
  br i1 %37, label %63, label %38

38:                                               ; preds = %36
  %39 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %40 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 7
  %41 = load i32, i32* %5, align 4
  br label %51

42:                                               ; preds = %21
  %43 = getelementptr inbounds %class.sk_sp.13, %class.sk_sp.13* %13, i64 0, i32 0
  %44 = load %class.GrBuffer*, %class.GrBuffer** %43, align 8
  store %class.GrBuffer* null, %class.GrBuffer** %43, align 8
  %45 = icmp eq %class.GrBuffer* %44, null
  br i1 %45, label %63, label %46

46:                                               ; preds = %42
  %47 = bitcast %class.GrBuffer* %44 to void (%class.GrBuffer*)***
  %48 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %47, align 8
  %49 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %48, i64 3
  %50 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %49, align 8
  call void %50(%class.GrBuffer* nonnull %44) #13
  br label %63

51:                                               ; preds = %38, %51
  %52 = phi i32 [ %41, %38 ], [ %59, %51 ]
  %53 = phi %class.GrStrokeIndirectTessellator* [ %0, %38 ], [ %61, %51 ]
  %54 = load i64, i64* %25, align 8
  %55 = load i32, i32* %40, align 8
  call void @_ZN27GrStrokeIndirectTessellator12writeBuffersEP20GrDrawIndirectWriterP14GrVertexWriterRK8SkMatrixmii(%class.GrStrokeIndirectTessellator* nonnull %53, %struct.GrDrawIndirectWriter* nonnull %4, %struct.GrVertexWriter* nonnull %6, %class.SkMatrix* dereferenceable(40) %39, i64 %54, i32 %52, i32 %55)
  %56 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %53, i64 0, i32 2
  %57 = load i32, i32* %56, align 8
  %58 = load i32, i32* %5, align 4
  %59 = add nsw i32 %58, %57
  store i32 %59, i32* %5, align 4
  %60 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %53, i64 0, i32 8
  %61 = load %class.GrStrokeIndirectTessellator*, %class.GrStrokeIndirectTessellator** %60, align 8
  %62 = icmp eq %class.GrStrokeIndirectTessellator* %61, null
  br i1 %62, label %63, label %51

63:                                               ; preds = %51, %36, %46, %42
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #13
  br label %64

64:                                               ; preds = %10, %63
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #13
  br label %65

65:                                               ; preds = %3, %64
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN27GrStrokeIndirectTessellator12writeBuffersEP20GrDrawIndirectWriterP14GrVertexWriterRK8SkMatrixmii(%class.GrStrokeIndirectTessellator* nocapture readonly, %struct.GrDrawIndirectWriter* nocapture, %struct.GrVertexWriter* nocapture, %class.SkMatrix* dereferenceable(40), i64, i32, i32) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.(anonymous namespace)::BinningInstanceWriter", align 8
  %9 = alloca [14 x %struct.SkPoint], align 16
  %10 = alloca %class.GrStrokeIterator, align 8
  %11 = alloca i64, align 8
  %12 = alloca %struct.SkConic, align 4
  %13 = bitcast %"class.(anonymous namespace)::BinningInstanceWriter"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %13) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* align 8 bitcast (%"class.(anonymous namespace)::BinningInstanceWriter"* @__const._ZN27GrStrokeIndirectTessellator12writeBuffersEP20GrDrawIndirectWriterP14GrVertexWriterRK8SkMatrixmii.binningWriter to i8*), i64 232, i1 false)
  %14 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 0, i32 1, i32 2
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 0
  store i32 %15, i32* %16, align 8
  %17 = add i32 %6, 1
  %18 = getelementptr inbounds %struct.GrDrawIndirectWriter, %struct.GrDrawIndirectWriter* %1, i64 0, i32 0
  %19 = getelementptr inbounds %struct.GrVertexWriter, %struct.GrVertexWriter* %2, i64 0, i32 0
  br label %20

20:                                               ; preds = %48, %7
  %21 = phi i64 [ 0, %7 ], [ %51, %48 ]
  %22 = phi i32 [ 0, %7 ], [ %50, %48 ]
  %23 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 1, i64 %21
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %48, label %26

26:                                               ; preds = %20
  %27 = trunc i64 %21 to i32
  %28 = shl i32 1, %27
  %29 = add i32 %17, %28
  %30 = add nsw i32 %22, %5
  %31 = shl nsw i32 %29, 1
  %32 = load %struct.GrDrawIndirectCommand*, %struct.GrDrawIndirectCommand** %18, align 8
  %33 = getelementptr inbounds %struct.GrDrawIndirectCommand, %struct.GrDrawIndirectCommand* %32, i64 1
  store %struct.GrDrawIndirectCommand* %33, %struct.GrDrawIndirectCommand** %18, align 8
  %34 = getelementptr inbounds %struct.GrDrawIndirectCommand, %struct.GrDrawIndirectCommand* %32, i64 0, i32 0
  store i32 %31, i32* %34, align 4
  %35 = getelementptr inbounds %struct.GrDrawIndirectCommand, %struct.GrDrawIndirectCommand* %32, i64 0, i32 1
  store i32 %24, i32* %35, align 4
  %36 = getelementptr inbounds %struct.GrDrawIndirectCommand, %struct.GrDrawIndirectCommand* %32, i64 0, i32 2
  store i32 0, i32* %36, align 4
  %37 = getelementptr inbounds %struct.GrDrawIndirectCommand, %struct.GrDrawIndirectCommand* %32, i64 0, i32 3
  store i32 %30, i32* %37, align 4
  %38 = sext i32 %22 to i64
  %39 = mul i64 %38, %4
  %40 = load i8*, i8** %19, align 8, !noalias !6
  %41 = getelementptr inbounds i8, i8* %40, i64 %39
  %42 = ptrtoint i8* %41 to i64
  %43 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 2, i64 %21
  %44 = bitcast %struct.GrVertexWriter* %43 to i64*
  store i64 %42, i64* %44, align 8
  %45 = sitofp i32 %29 to float
  %46 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 3, i64 %21
  store float %45, float* %46, align 4
  %47 = load i32, i32* %23, align 4
  br label %48

48:                                               ; preds = %26, %20
  %49 = phi i32 [ 0, %20 ], [ %47, %26 ]
  %50 = add nsw i32 %49, %22
  %51 = add nuw nsw i64 %21, 1
  %52 = icmp eq i64 %51, 16
  br i1 %52, label %53, label %20

53:                                               ; preds = %48
  %54 = bitcast i64* %11 to %struct.SkPoint*
  %55 = sext i32 %50 to i64
  %56 = mul i64 %55, %4
  %57 = load i8*, i8** %19, align 8, !noalias !9
  %58 = getelementptr inbounds i8, i8* %57, i64 %56
  %59 = ptrtoint i8* %58 to i64
  %60 = bitcast %struct.GrVertexWriter* %2 to i64*
  store i64 %59, i64* %60, align 8
  %61 = bitcast [14 x %struct.SkPoint]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %61) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %61, i8 -1, i64 112, i1 false)
  %62 = getelementptr inbounds [14 x %struct.SkPoint], [14 x %struct.SkPoint]* %9, i64 0, i64 0
  %63 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 0, i32 2
  %64 = load %"struct.GrStrokeTessellator::PathStrokeList"*, %"struct.GrStrokeTessellator::PathStrokeList"** %63, align 8
  %65 = icmp eq %"struct.GrStrokeTessellator::PathStrokeList"* %64, null
  br i1 %65, label %107, label %66

66:                                               ; preds = %53
  %67 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 6
  %68 = load float*, float** %67, align 8
  %69 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 5
  %70 = load i8*, i8** %69, align 8
  %71 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 4, i32 0
  %72 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 4, i32 1
  %73 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 5
  %74 = bitcast %class.GrVertexColor* %73 to i8*
  %75 = getelementptr inbounds %class.GrVertexColor, %class.GrVertexColor* %73, i64 0, i32 0, i64 0
  %76 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 5, i32 1
  %77 = bitcast %class.GrStrokeIterator* %10 to i8*
  %78 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 0
  %79 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 1
  %80 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 2
  %81 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 3
  %82 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 7
  %83 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 11
  %84 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 12
  %85 = bitcast %"class.SkPath::RangeIter"* %80 to i8*
  %86 = bitcast %"class.SkPath::RangeIter"* %80 to i64*
  %87 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 2, i32 1
  %88 = bitcast %struct.SkPoint** %87 to i64*
  %89 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 2, i32 2
  %90 = bitcast float** %89 to i64*
  %91 = bitcast %"class.SkPath::RangeIter"* %81 to i64*
  %92 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 3, i32 1
  %93 = bitcast %struct.SkPoint** %92 to i8*
  %94 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 4
  %95 = bitcast %"struct.GrStrokeShader::DynamicStroke"* %94 to i64*
  %96 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 5, i32 0, i64 0
  %97 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 5, i32 0, i64 1
  %98 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 5, i32 0, i64 2
  %99 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 5, i32 0, i64 3
  %100 = bitcast i64* %11 to i8*
  %101 = bitcast i64* %11 to float*
  %102 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %54, i64 0, i32 1
  %103 = bitcast %struct.SkConic* %12 to i8*
  %104 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %12, i64 0, i32 1
  %105 = bitcast float* %104 to i32*
  %106 = bitcast %struct.SkConic* %12 to i8*
  br label %108

107:                                              ; preds = %808, %53
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %61) #13
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %13) #13
  ret void

108:                                              ; preds = %66, %808
  %109 = phi %"struct.GrStrokeTessellator::PathStrokeList"* [ %64, %66 ], [ %817, %808 ]
  %110 = phi %struct.SkPoint* [ %62, %66 ], [ %815, %808 ]
  %111 = phi i8* [ %70, %66 ], [ %814, %808 ]
  %112 = phi float* [ %68, %66 ], [ %813, %808 ]
  %113 = phi <2 x float> [ zeroinitializer, %66 ], [ %812, %808 ]
  %114 = phi %struct.SkPoint* [ null, %66 ], [ %811, %808 ]
  %115 = phi i8 [ -1, %66 ], [ %810, %808 ]
  %116 = phi i8 [ -86, %66 ], [ %809, %808 ]
  %117 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %109, i64 0, i32 1
  %118 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %109, i64 0, i32 1, i32 3
  %119 = load i32, i32* %118, align 4
  %120 = lshr i32 %119, 16
  %121 = trunc i32 %120 to i8
  %122 = icmp eq i8 %121, 1
  %123 = load i32, i32* %14, align 8
  %124 = and i32 %123, 2
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %140, label %126

126:                                              ; preds = %108
  %127 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %109, i64 0, i32 1, i32 1
  %128 = load float, float* %127, align 4
  %129 = fmul float %128, 5.000000e-01
  store float %129, float* %71, align 8
  %130 = load i32, i32* %118, align 4
  %131 = lshr i32 %130, 16
  %132 = trunc i32 %131 to i8
  switch i8 %132, label %137 [
    i8 1, label %138
    i8 2, label %133
    i8 0, label %134
  ]

133:                                              ; preds = %126
  br label %138

134:                                              ; preds = %126
  %135 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %109, i64 0, i32 1, i32 2
  %136 = load float, float* %135, align 4
  br label %138

137:                                              ; preds = %126
  call void @llvm.trap() #13
  unreachable

138:                                              ; preds = %126, %133, %134
  %139 = phi float [ %136, %134 ], [ 0.000000e+00, %133 ], [ -1.000000e+00, %126 ]
  store float %139, float* %72, align 4
  br label %140

140:                                              ; preds = %108, %138
  %141 = and i32 %123, 4
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %140
  %144 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %109, i64 0, i32 2
  %145 = load i32, i32* %16, align 8
  %146 = and i32 %145, 1
  %147 = icmp eq i32 %146, 0
  %148 = trunc i32 %146 to i8
  br i1 %147, label %151, label %149

149:                                              ; preds = %143
  %150 = bitcast %struct.SkRGBA4f* %144 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 4 %150, i64 16, i1 false) #13
  br label %153

151:                                              ; preds = %143
  %152 = call i32 @_ZNK8SkRGBA4fIL11SkAlphaType2EE12toBytes_RGBAEv(%struct.SkRGBA4f* %144) #13
  store i32 %152, i32* %75, align 8
  br label %153

153:                                              ; preds = %149, %151
  store i8 %148, i8* %76, align 8
  br label %154

154:                                              ; preds = %140, %153
  call void @llvm.lifetime.start.p0i8(i64 312, i8* nonnull %77) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %77, i8* align 8 bitcast ({ %class.SkMatrix*, %class.SkStrokeRec*, %"class.SkPath::RangeIter", %"class.SkPath::RangeIter", i32, [4 x i8], %struct.SkPoint*, float*, %struct.SkPoint*, [8 x i32], [8 x %struct.SkPoint*], [8 x float*], i32, i32, %"struct.std::__1::array.21", %"struct.std::__1::array.21", %"struct.std::__1::array.21" }* @__const._ZN27GrStrokeIndirectTessellator12writeBuffersEP20GrDrawIndirectWriterP14GrVertexWriterRK8SkMatrixmii.iter to i8*), i64 312, i1 false)
  store %class.SkMatrix* %3, %class.SkMatrix** %78, align 8
  store %class.SkStrokeRec* %117, %class.SkStrokeRec** %79, align 8
  store %struct.SkPoint* null, %struct.SkPoint** %82, align 8
  store i32 0, i32* %83, align 8
  store i32 0, i32* %84, align 4
  %155 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %109, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 48, i1 false) #13
  %156 = load %class.SkPathRef*, %class.SkPathRef** %155, align 8
  %157 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %156, i64 0, i32 4, i32 0
  %158 = bitcast i8** %157 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %156, i64 0, i32 9
  %161 = load i8, i8* %160, align 8
  %162 = icmp eq i8 %161, 0
  br i1 %162, label %163, label %167

163:                                              ; preds = %154
  %164 = inttoptr i64 %159 to i8*
  %165 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %156, i64 0, i32 10
  %166 = load i8, i8* %165, align 1, !range !2
  br label %179

167:                                              ; preds = %154
  %168 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %156, i64 0, i32 1
  %169 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %156, i64 0, i32 3, i32 0
  %170 = load %struct.SkPoint*, %struct.SkPoint** %169, align 8
  %171 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %156, i64 0, i32 3, i32 2
  %172 = load i32, i32* %171, align 4
  %173 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %168, %struct.SkPoint* %170, i32 %172) #13
  %174 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %156, i64 0, i32 10
  %175 = zext i1 %173 to i8
  store i8 %175, i8* %174, align 1
  store i8 0, i8* %160, align 8
  %176 = load %class.SkPathRef*, %class.SkPathRef** %155, align 8
  %177 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %176, i64 0, i32 4, i32 0
  %178 = load i8*, i8** %177, align 8
  br label %179

179:                                              ; preds = %167, %163
  %180 = phi i8* [ %164, %163 ], [ %178, %167 ]
  %181 = phi %class.SkPathRef* [ %156, %163 ], [ %176, %167 ]
  %182 = phi i8 [ %166, %163 ], [ %175, %167 ]
  %183 = icmp eq i8 %182, 0
  br i1 %183, label %191, label %184

184:                                              ; preds = %179
  %185 = icmp eq i8* %180, null
  br i1 %185, label %191, label %186

186:                                              ; preds = %184
  %187 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %181, i64 0, i32 4, i32 2
  %188 = load i32, i32* %187, align 4
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i8, i8* %180, i64 %189
  br label %191

191:                                              ; preds = %179, %184, %186
  %192 = phi i8* [ %190, %186 ], [ null, %184 ], [ %180, %179 ]
  %193 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %181, i64 0, i32 3, i32 0
  %194 = bitcast %struct.SkPoint** %193 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %181, i64 0, i32 5, i32 0
  %197 = bitcast float** %196 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = ptrtoint i8* %192 to i64
  store i64 %159, i64* %86, align 8
  store i64 %195, i64* %88, align 8
  store i64 %198, i64* %90, align 8
  store i64 %199, i64* %91, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %93, i8 0, i64 16, i1 false) #13
  %200 = call zeroext i1 @_ZN16GrStrokeIterator4nextEv(%class.GrStrokeIterator* nonnull %10)
  br i1 %200, label %201, label %808

201:                                              ; preds = %191, %798
  %202 = phi %struct.SkPoint* [ %806, %798 ], [ %110, %191 ]
  %203 = phi i8* [ %805, %798 ], [ %111, %191 ]
  %204 = phi float* [ %804, %798 ], [ %112, %191 ]
  %205 = phi <2 x float> [ %803, %798 ], [ %113, %191 ]
  %206 = phi %struct.SkPoint* [ %802, %798 ], [ %114, %191 ]
  %207 = phi i8 [ %801, %798 ], [ %115, %191 ]
  %208 = phi i8 [ %800, %798 ], [ %116, %191 ]
  %209 = phi i1 [ %799, %798 ], [ false, %191 ]
  %210 = load i32, i32* %83, align 8
  %211 = add nsw i32 %210, 1
  %212 = and i32 %211, 7
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 9, i64 %213
  %215 = load %struct.SkPoint*, %struct.SkPoint** %214, align 8
  %216 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 8, i64 %213
  %217 = load i32, i32* %216, align 4
  switch i32 %217, label %666 [
    i32 5, label %218
    i32 6, label %282
    i32 7, label %286
    i32 1, label %338
    i32 2, label %357
    i32 3, label %467
    i32 4, label %575
  ]

218:                                              ; preds = %201
  %219 = getelementptr inbounds i8, i8* %203, i64 1
  %220 = load i8, i8* %203, align 1
  %221 = bitcast %struct.SkPoint* %215 to i64*
  %222 = load i64, i64* %221, align 4
  %223 = sext i8 %220 to i64
  %224 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 2, i64 %223
  %225 = getelementptr inbounds %struct.GrVertexWriter, %struct.GrVertexWriter* %224, i64 0, i32 0
  %226 = bitcast %struct.GrVertexWriter* %224 to i64**
  %227 = load i64*, i64** %226, align 8
  store i64 %222, i64* %227, align 1
  %228 = load i8*, i8** %225, align 8
  %229 = getelementptr inbounds i8, i8* %228, i64 8
  store i8* %229, i8** %225, align 8
  %230 = bitcast i8* %229 to i64*
  store i64 %222, i64* %230, align 1
  %231 = load i8*, i8** %225, align 8
  %232 = getelementptr inbounds i8, i8* %231, i64 8
  store i8* %232, i8** %225, align 8
  %233 = bitcast i8* %232 to i64*
  store i64 %222, i64* %233, align 1
  %234 = load i8*, i8** %225, align 8
  %235 = getelementptr inbounds i8, i8* %234, i64 8
  store i8* %235, i8** %225, align 8
  %236 = bitcast i8* %235 to i64*
  store i64 %222, i64* %236, align 1
  %237 = load i8*, i8** %225, align 8
  %238 = getelementptr inbounds i8, i8* %237, i64 8
  store i8* %238, i8** %225, align 8
  %239 = bitcast i8* %238 to i64*
  store i64 %222, i64* %239, align 1
  %240 = load i8*, i8** %225, align 8
  %241 = getelementptr inbounds i8, i8* %240, i64 8
  store i8* %241, i8** %225, align 8
  %242 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 3, i64 %223
  %243 = load float, float* %242, align 4
  %244 = fsub float -0.000000e+00, %243
  %245 = bitcast i8* %241 to float*
  store float %244, float* %245, align 1
  %246 = load i8*, i8** %225, align 8
  %247 = getelementptr inbounds i8, i8* %246, i64 4
  store i8* %247, i8** %225, align 8
  %248 = load i32, i32* %16, align 8
  %249 = and i32 %248, 2
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %257, label %251

251:                                              ; preds = %218
  %252 = bitcast i8* %247 to i64*
  %253 = load i64, i64* %95, align 8
  store i64 %253, i64* %252, align 1
  %254 = load i8*, i8** %225, align 8
  %255 = getelementptr inbounds i8, i8* %254, i64 8
  store i8* %255, i8** %225, align 8
  %256 = load i32, i32* %16, align 8
  br label %257

257:                                              ; preds = %251, %218
  %258 = phi i8* [ %247, %218 ], [ %255, %251 ]
  %259 = phi i32 [ %248, %218 ], [ %256, %251 ]
  %260 = and i32 %259, 4
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %282, label %262

262:                                              ; preds = %257
  %263 = bitcast i8* %258 to i32*
  %264 = load i32, i32* %96, align 8
  store i32 %264, i32* %263, align 1
  %265 = load i8*, i8** %225, align 8
  %266 = getelementptr inbounds i8, i8* %265, i64 4
  store i8* %266, i8** %225, align 8
  %267 = load i8, i8* %76, align 8, !range !2
  %268 = icmp eq i8 %267, 0
  br i1 %268, label %282, label %269

269:                                              ; preds = %262
  %270 = bitcast i8* %266 to i32*
  %271 = load i32, i32* %97, align 4
  store i32 %271, i32* %270, align 1
  %272 = load i8*, i8** %225, align 8
  %273 = getelementptr inbounds i8, i8* %272, i64 4
  store i8* %273, i8** %225, align 8
  %274 = bitcast i8* %273 to i32*
  %275 = load i32, i32* %98, align 8
  store i32 %275, i32* %274, align 1
  %276 = load i8*, i8** %225, align 8
  %277 = getelementptr inbounds i8, i8* %276, i64 4
  store i8* %277, i8** %225, align 8
  %278 = bitcast i8* %277 to i32*
  %279 = load i32, i32* %99, align 4
  store i32 %279, i32* %278, align 1
  %280 = load i8*, i8** %225, align 8
  %281 = getelementptr inbounds i8, i8* %280, i64 4
  store i8* %281, i8** %225, align 8
  br label %282

282:                                              ; preds = %269, %262, %257, %201
  %283 = phi i8* [ %203, %201 ], [ %219, %257 ], [ %219, %262 ], [ %219, %269 ]
  %284 = bitcast %struct.SkPoint* %215 to <2 x float>*
  %285 = load <2 x float>, <2 x float>* %284, align 4
  br label %798

286:                                              ; preds = %201
  %287 = icmp eq %struct.SkPoint* %206, null
  br i1 %287, label %798, label %288

288:                                              ; preds = %286
  %289 = sext i8 %207 to i64
  %290 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 3, i64 %289
  %291 = bitcast float* %290 to i32*
  %292 = load i32, i32* %291, align 4
  %293 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 2, i64 %289, i32 0
  %294 = load i8*, i8** %293, align 8
  %295 = bitcast %struct.SkPoint* %206 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %294, i8* nonnull align 4 %295, i64 32, i1 false) #13
  %296 = load i8*, i8** %293, align 8
  %297 = getelementptr inbounds i8, i8* %296, i64 32
  store i8* %297, i8** %293, align 8
  %298 = bitcast i8* %297 to <2 x float>*
  store <2 x float> %205, <2 x float>* %298, align 1
  %299 = load i8*, i8** %293, align 8
  %300 = getelementptr inbounds i8, i8* %299, i64 8
  store i8* %300, i8** %293, align 8
  %301 = bitcast i8* %300 to i32*
  store i32 %292, i32* %301, align 1
  %302 = load i8*, i8** %293, align 8
  %303 = getelementptr inbounds i8, i8* %302, i64 4
  store i8* %303, i8** %293, align 8
  %304 = load i32, i32* %16, align 8
  %305 = and i32 %304, 2
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %313, label %307

307:                                              ; preds = %288
  %308 = bitcast i8* %303 to i64*
  %309 = load i64, i64* %95, align 8
  store i64 %309, i64* %308, align 1
  %310 = load i8*, i8** %293, align 8
  %311 = getelementptr inbounds i8, i8* %310, i64 8
  store i8* %311, i8** %293, align 8
  %312 = load i32, i32* %16, align 8
  br label %313

313:                                              ; preds = %307, %288
  %314 = phi i8* [ %303, %288 ], [ %311, %307 ]
  %315 = phi i32 [ %304, %288 ], [ %312, %307 ]
  %316 = and i32 %315, 4
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %798, label %318

318:                                              ; preds = %313
  %319 = bitcast i8* %314 to i32*
  %320 = load i32, i32* %96, align 8
  store i32 %320, i32* %319, align 1
  %321 = load i8*, i8** %293, align 8
  %322 = getelementptr inbounds i8, i8* %321, i64 4
  store i8* %322, i8** %293, align 8
  %323 = load i8, i8* %76, align 8, !range !2
  %324 = icmp eq i8 %323, 0
  br i1 %324, label %798, label %325

325:                                              ; preds = %318
  %326 = bitcast i8* %322 to i32*
  %327 = load i32, i32* %97, align 4
  store i32 %327, i32* %326, align 1
  %328 = load i8*, i8** %293, align 8
  %329 = getelementptr inbounds i8, i8* %328, i64 4
  store i8* %329, i8** %293, align 8
  %330 = bitcast i8* %329 to i32*
  %331 = load i32, i32* %98, align 8
  store i32 %331, i32* %330, align 1
  %332 = load i8*, i8** %293, align 8
  %333 = getelementptr inbounds i8, i8* %332, i64 4
  store i8* %333, i8** %293, align 8
  %334 = bitcast i8* %333 to i32*
  %335 = load i32, i32* %99, align 4
  store i32 %335, i32* %334, align 1
  %336 = load i8*, i8** %293, align 8
  %337 = getelementptr inbounds i8, i8* %336, i64 4
  store i8* %337, i8** %293, align 8
  br label %798

338:                                              ; preds = %201
  br i1 %122, label %339, label %342

339:                                              ; preds = %338
  %340 = getelementptr inbounds i8, i8* %203, i64 1
  %341 = load i8, i8* %203, align 1
  br label %342

342:                                              ; preds = %338, %339
  %343 = phi i8* [ %340, %339 ], [ %203, %338 ]
  %344 = phi i8 [ %341, %339 ], [ 0, %338 ]
  %345 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 1
  %346 = bitcast %struct.SkPoint* %215 to i64*
  %347 = bitcast %struct.SkPoint* %345 to i64*
  %348 = load i64, i64* %346, align 4
  store i64 %348, i64* %347, align 4
  %349 = bitcast %struct.SkPoint* %202 to i64*
  store i64 %348, i64* %349, align 4
  %350 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %215, i64 1
  %351 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 3
  %352 = bitcast %struct.SkPoint* %350 to i64*
  %353 = bitcast %struct.SkPoint* %351 to i64*
  %354 = load i64, i64* %352, align 4
  store i64 %354, i64* %353, align 4
  %355 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 2
  %356 = bitcast %struct.SkPoint* %355 to i64*
  store i64 %354, i64* %356, align 4
  br label %666

357:                                              ; preds = %201
  %358 = getelementptr inbounds i8, i8* %203, i64 1
  %359 = load i8, i8* %203, align 1
  %360 = icmp slt i8 %359, 0
  br i1 %360, label %361, label %446

361:                                              ; preds = %357
  %362 = sub i8 0, %359
  %363 = call float @_Z20SkFindQuadMidTangentPK7SkPoint(%struct.SkPoint* %215) #13
  %364 = call <2 x float> @_Z12SkEvalQuadAtPK7SkPointf(%struct.SkPoint* %215, float %363) #13
  %365 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 1
  %366 = bitcast %struct.SkPoint* %215 to i64*
  %367 = bitcast %struct.SkPoint* %365 to i64*
  %368 = load i64, i64* %366, align 4
  store i64 %368, i64* %367, align 4
  %369 = bitcast %struct.SkPoint* %202 to i64*
  store i64 %368, i64* %369, align 4
  %370 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 4
  %371 = bitcast %struct.SkPoint* %370 to <2 x float>*
  store <2 x float> %364, <2 x float>* %371, align 4
  %372 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 3
  %373 = bitcast %struct.SkPoint* %372 to <2 x float>*
  store <2 x float> %364, <2 x float>* %373, align 4
  %374 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 2
  %375 = bitcast %struct.SkPoint* %374 to <2 x float>*
  store <2 x float> %364, <2 x float>* %375, align 4
  %376 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %215, i64 2
  %377 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 6
  %378 = bitcast %struct.SkPoint* %376 to i64*
  %379 = bitcast %struct.SkPoint* %377 to i64*
  %380 = load i64, i64* %378, align 4
  store i64 %380, i64* %379, align 4
  %381 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 5
  %382 = bitcast %struct.SkPoint* %381 to i64*
  store i64 %380, i64* %382, align 4
  %383 = sext i8 %362 to i64
  %384 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 2, i64 %383
  %385 = getelementptr inbounds %struct.GrVertexWriter, %struct.GrVertexWriter* %384, i64 0, i32 0
  %386 = bitcast %struct.GrVertexWriter* %384 to <2 x float>**
  %387 = load <2 x float>*, <2 x float>** %386, align 8
  store <2 x float> %364, <2 x float>* %387, align 1
  %388 = load i8*, i8** %385, align 8
  %389 = getelementptr inbounds i8, i8* %388, i64 8
  store i8* %389, i8** %385, align 8
  %390 = bitcast i8* %389 to <2 x float>*
  store <2 x float> %364, <2 x float>* %390, align 1
  %391 = load i8*, i8** %385, align 8
  %392 = getelementptr inbounds i8, i8* %391, i64 8
  store i8* %392, i8** %385, align 8
  %393 = bitcast i8* %392 to <2 x float>*
  store <2 x float> %364, <2 x float>* %393, align 1
  %394 = load i8*, i8** %385, align 8
  %395 = getelementptr inbounds i8, i8* %394, i64 8
  store i8* %395, i8** %385, align 8
  %396 = bitcast i8* %395 to <2 x float>*
  store <2 x float> %364, <2 x float>* %396, align 1
  %397 = load i8*, i8** %385, align 8
  %398 = getelementptr inbounds i8, i8* %397, i64 8
  store i8* %398, i8** %385, align 8
  %399 = bitcast i8* %398 to <2 x float>*
  store <2 x float> %364, <2 x float>* %399, align 1
  %400 = load i8*, i8** %385, align 8
  %401 = getelementptr inbounds i8, i8* %400, i64 8
  store i8* %401, i8** %385, align 8
  %402 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 3, i64 %383
  %403 = load float, float* %402, align 4
  %404 = fsub float -0.000000e+00, %403
  %405 = bitcast i8* %401 to float*
  store float %404, float* %405, align 1
  %406 = load i8*, i8** %385, align 8
  %407 = getelementptr inbounds i8, i8* %406, i64 4
  store i8* %407, i8** %385, align 8
  %408 = load i32, i32* %16, align 8
  %409 = and i32 %408, 2
  %410 = icmp eq i32 %409, 0
  br i1 %410, label %417, label %411

411:                                              ; preds = %361
  %412 = bitcast i8* %407 to i64*
  %413 = load i64, i64* %95, align 8
  store i64 %413, i64* %412, align 1
  %414 = load i8*, i8** %385, align 8
  %415 = getelementptr inbounds i8, i8* %414, i64 8
  store i8* %415, i8** %385, align 8
  %416 = load i32, i32* %16, align 8
  br label %417

417:                                              ; preds = %411, %361
  %418 = phi i8* [ %407, %361 ], [ %415, %411 ]
  %419 = phi i32 [ %408, %361 ], [ %416, %411 ]
  %420 = and i32 %419, 4
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %442, label %422

422:                                              ; preds = %417
  %423 = bitcast i8* %418 to i32*
  %424 = load i32, i32* %96, align 8
  store i32 %424, i32* %423, align 1
  %425 = load i8*, i8** %385, align 8
  %426 = getelementptr inbounds i8, i8* %425, i64 4
  store i8* %426, i8** %385, align 8
  %427 = load i8, i8* %76, align 8, !range !2
  %428 = icmp eq i8 %427, 0
  br i1 %428, label %442, label %429

429:                                              ; preds = %422
  %430 = bitcast i8* %426 to i32*
  %431 = load i32, i32* %97, align 4
  store i32 %431, i32* %430, align 1
  %432 = load i8*, i8** %385, align 8
  %433 = getelementptr inbounds i8, i8* %432, i64 4
  store i8* %433, i8** %385, align 8
  %434 = bitcast i8* %433 to i32*
  %435 = load i32, i32* %98, align 8
  store i32 %435, i32* %434, align 1
  %436 = load i8*, i8** %385, align 8
  %437 = getelementptr inbounds i8, i8* %436, i64 4
  store i8* %437, i8** %385, align 8
  %438 = bitcast i8* %437 to i32*
  %439 = load i32, i32* %99, align 4
  store i32 %439, i32* %438, align 1
  %440 = load i8*, i8** %385, align 8
  %441 = getelementptr inbounds i8, i8* %440, i64 4
  store i8* %441, i8** %385, align 8
  br label %442

442:                                              ; preds = %417, %422, %429
  br i1 %122, label %443, label %666

443:                                              ; preds = %442
  %444 = getelementptr inbounds i8, i8* %203, i64 2
  %445 = load i8, i8* %358, align 1
  br label %666

446:                                              ; preds = %357
  %447 = bitcast %struct.SkPoint* %215 to <2 x float>*
  %448 = load <2 x float>, <2 x float>* %447, align 4
  %449 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %215, i64 1
  %450 = bitcast %struct.SkPoint* %449 to <2 x float>*
  %451 = load <2 x float>, <2 x float>* %450, align 4
  %452 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %215, i64 2
  %453 = bitcast %struct.SkPoint* %452 to <2 x float>*
  %454 = load <2 x float>, <2 x float>* %453, align 4
  %455 = fmul <2 x float> %451, <float 0x3FE5555560000000, float 0x3FE5555560000000>
  %456 = fmul <2 x float> %448, <float 0x3FD5555560000000, float 0x3FD5555560000000>
  %457 = fadd <2 x float> %456, %455
  %458 = fmul <2 x float> %454, <float 0x3FD5555560000000, float 0x3FD5555560000000>
  %459 = fadd <2 x float> %455, %458
  %460 = bitcast %struct.SkPoint* %202 to <2 x float>*
  store <2 x float> %448, <2 x float>* %460, align 1
  %461 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 1
  %462 = bitcast %struct.SkPoint* %461 to <2 x float>*
  store <2 x float> %457, <2 x float>* %462, align 1
  %463 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 2
  %464 = bitcast %struct.SkPoint* %463 to <2 x float>*
  store <2 x float> %459, <2 x float>* %464, align 1
  %465 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 3
  %466 = bitcast %struct.SkPoint* %465 to <2 x float>*
  store <2 x float> %454, <2 x float>* %466, align 1
  br label %666

467:                                              ; preds = %201
  %468 = getelementptr inbounds i8, i8* %203, i64 1
  %469 = load i8, i8* %203, align 1
  %470 = icmp slt i8 %469, 0
  br i1 %470, label %471, label %564

471:                                              ; preds = %467
  %472 = sub i8 0, %469
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %100) #13
  store float 0xFFFFFFFFE0000000, float* %101, align 8
  store float 0xFFFFFFFFE0000000, float* %102, align 4
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %103) #13
  %473 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 10, i64 %213
  %474 = bitcast float** %473 to i32**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %106, i8 -1, i64 28, i1 false)
  %475 = load i32*, i32** %474, align 8
  %476 = load i32, i32* %475, align 4
  %477 = bitcast %struct.SkPoint* %215 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %103, i8* align 4 %477, i64 24, i1 false) #13
  store i32 %476, i32* %105, align 4
  %478 = call float @_ZNK7SkConic14findMidTangentEv(%struct.SkConic* nonnull %12) #13
  call void @_ZNK7SkConic6evalAtEfP7SkPointS1_(%struct.SkConic* nonnull %12, float %478, %struct.SkPoint* nonnull %54, %struct.SkPoint* null) #13
  %479 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 1
  %480 = bitcast %struct.SkPoint* %215 to i64*
  %481 = bitcast %struct.SkPoint* %479 to i64*
  %482 = load i64, i64* %480, align 4
  store i64 %482, i64* %481, align 4
  %483 = bitcast %struct.SkPoint* %202 to i64*
  store i64 %482, i64* %483, align 4
  %484 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 4
  %485 = bitcast %struct.SkPoint* %484 to i64*
  %486 = load i64, i64* %11, align 8
  store i64 %486, i64* %485, align 4
  %487 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 3
  %488 = bitcast %struct.SkPoint* %487 to i64*
  store i64 %486, i64* %488, align 4
  %489 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 2
  %490 = bitcast %struct.SkPoint* %489 to i64*
  store i64 %486, i64* %490, align 4
  %491 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %215, i64 2
  %492 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 6
  %493 = bitcast %struct.SkPoint* %491 to i64*
  %494 = bitcast %struct.SkPoint* %492 to i64*
  %495 = load i64, i64* %493, align 4
  store i64 %495, i64* %494, align 4
  %496 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 5
  %497 = bitcast %struct.SkPoint* %496 to i64*
  store i64 %495, i64* %497, align 4
  %498 = sext i8 %472 to i64
  %499 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 2, i64 %498
  %500 = getelementptr inbounds %struct.GrVertexWriter, %struct.GrVertexWriter* %499, i64 0, i32 0
  %501 = bitcast %struct.GrVertexWriter* %499 to i64**
  %502 = load i64*, i64** %501, align 8
  store i64 %486, i64* %502, align 1
  %503 = load i8*, i8** %500, align 8
  %504 = getelementptr inbounds i8, i8* %503, i64 8
  store i8* %504, i8** %500, align 8
  %505 = bitcast i8* %504 to i64*
  store i64 %486, i64* %505, align 1
  %506 = load i8*, i8** %500, align 8
  %507 = getelementptr inbounds i8, i8* %506, i64 8
  store i8* %507, i8** %500, align 8
  %508 = bitcast i8* %507 to i64*
  store i64 %486, i64* %508, align 1
  %509 = load i8*, i8** %500, align 8
  %510 = getelementptr inbounds i8, i8* %509, i64 8
  store i8* %510, i8** %500, align 8
  %511 = bitcast i8* %510 to i64*
  store i64 %486, i64* %511, align 1
  %512 = load i8*, i8** %500, align 8
  %513 = getelementptr inbounds i8, i8* %512, i64 8
  store i8* %513, i8** %500, align 8
  %514 = bitcast i8* %513 to i64*
  store i64 %486, i64* %514, align 1
  %515 = load i8*, i8** %500, align 8
  %516 = getelementptr inbounds i8, i8* %515, i64 8
  store i8* %516, i8** %500, align 8
  %517 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 3, i64 %498
  %518 = load float, float* %517, align 4
  %519 = fsub float -0.000000e+00, %518
  %520 = bitcast i8* %516 to float*
  store float %519, float* %520, align 1
  %521 = load i8*, i8** %500, align 8
  %522 = getelementptr inbounds i8, i8* %521, i64 4
  store i8* %522, i8** %500, align 8
  %523 = load i32, i32* %16, align 8
  %524 = and i32 %523, 2
  %525 = icmp eq i32 %524, 0
  br i1 %525, label %532, label %526

526:                                              ; preds = %471
  %527 = bitcast i8* %522 to i64*
  %528 = load i64, i64* %95, align 8
  store i64 %528, i64* %527, align 1
  %529 = load i8*, i8** %500, align 8
  %530 = getelementptr inbounds i8, i8* %529, i64 8
  store i8* %530, i8** %500, align 8
  %531 = load i32, i32* %16, align 8
  br label %532

532:                                              ; preds = %526, %471
  %533 = phi i8* [ %522, %471 ], [ %530, %526 ]
  %534 = phi i32 [ %523, %471 ], [ %531, %526 ]
  %535 = and i32 %534, 4
  %536 = icmp eq i32 %535, 0
  br i1 %536, label %557, label %537

537:                                              ; preds = %532
  %538 = bitcast i8* %533 to i32*
  %539 = load i32, i32* %96, align 8
  store i32 %539, i32* %538, align 1
  %540 = load i8*, i8** %500, align 8
  %541 = getelementptr inbounds i8, i8* %540, i64 4
  store i8* %541, i8** %500, align 8
  %542 = load i8, i8* %76, align 8, !range !2
  %543 = icmp eq i8 %542, 0
  br i1 %543, label %557, label %544

544:                                              ; preds = %537
  %545 = bitcast i8* %541 to i32*
  %546 = load i32, i32* %97, align 4
  store i32 %546, i32* %545, align 1
  %547 = load i8*, i8** %500, align 8
  %548 = getelementptr inbounds i8, i8* %547, i64 4
  store i8* %548, i8** %500, align 8
  %549 = bitcast i8* %548 to i32*
  %550 = load i32, i32* %98, align 8
  store i32 %550, i32* %549, align 1
  %551 = load i8*, i8** %500, align 8
  %552 = getelementptr inbounds i8, i8* %551, i64 4
  store i8* %552, i8** %500, align 8
  %553 = bitcast i8* %552 to i32*
  %554 = load i32, i32* %99, align 4
  store i32 %554, i32* %553, align 1
  %555 = load i8*, i8** %500, align 8
  %556 = getelementptr inbounds i8, i8* %555, i64 4
  store i8* %556, i8** %500, align 8
  br label %557

557:                                              ; preds = %532, %537, %544
  br i1 %122, label %558, label %561

558:                                              ; preds = %557
  %559 = getelementptr inbounds i8, i8* %203, i64 2
  %560 = load i8, i8* %468, align 1
  br label %561

561:                                              ; preds = %557, %558
  %562 = phi i8* [ %559, %558 ], [ %468, %557 ]
  %563 = phi i8 [ %560, %558 ], [ 0, %557 ]
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %103) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %100) #13
  br label %666

564:                                              ; preds = %467
  %565 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %10, i64 0, i32 10, i64 %213
  %566 = bitcast float** %565 to i32**
  %567 = load i32*, i32** %566, align 8
  %568 = load i32, i32* %567, align 4
  %569 = bitcast %struct.SkPoint* %202 to i8*
  %570 = bitcast %struct.SkPoint* %215 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %569, i8* align 4 %570, i64 24, i1 false) #13
  %571 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 3, i32 0
  %572 = bitcast float* %571 to i32*
  store i32 %568, i32* %572, align 1
  %573 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 3, i32 1
  %574 = bitcast float* %573 to i32*
  store i32 2139095040, i32* %574, align 1
  br label %666

575:                                              ; preds = %201
  %576 = getelementptr inbounds i8, i8* %203, i64 1
  %577 = load i8, i8* %203, align 1
  %578 = icmp slt i8 %577, 0
  br i1 %578, label %579, label %666

579:                                              ; preds = %575
  %580 = sext i8 %577 to i32
  %581 = sub nsw i32 0, %580
  %582 = ashr i32 %581, 4
  call void @_Z13SkChopCubicAtPK7SkPointPS_PKfi(%struct.SkPoint* %215, %struct.SkPoint* %202, float* %204, i32 %582) #13
  %583 = sext i32 %582 to i64
  %584 = getelementptr inbounds float, float* %204, i64 %583
  %585 = trunc i32 %581 to i8
  %586 = and i8 %585, 15
  %587 = icmp eq i8 %586, 0
  %588 = icmp sgt i8 %577, -16
  %589 = or i1 %587, %588
  br i1 %589, label %663, label %590

590:                                              ; preds = %579
  %591 = zext i8 %586 to i64
  %592 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 2, i64 %591
  %593 = getelementptr inbounds %struct.GrVertexWriter, %struct.GrVertexWriter* %592, i64 0, i32 0
  %594 = bitcast %struct.GrVertexWriter* %592 to i64**
  %595 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 3, i64 %591
  %596 = load i64*, i64** %594, align 8
  br label %597

597:                                              ; preds = %659, %590
  %598 = phi i64* [ %660, %659 ], [ %596, %590 ]
  %599 = phi i64 [ %661, %659 ], [ 1, %590 ]
  %600 = mul nuw nsw i64 %599, 3
  %601 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %202, i64 %600
  %602 = bitcast %struct.SkPoint* %601 to i64*
  %603 = load i64, i64* %602, align 4
  store i64 %603, i64* %598, align 1
  %604 = load i8*, i8** %593, align 8
  %605 = getelementptr inbounds i8, i8* %604, i64 8
  store i8* %605, i8** %593, align 8
  %606 = bitcast i8* %605 to i64*
  store i64 %603, i64* %606, align 1
  %607 = load i8*, i8** %593, align 8
  %608 = getelementptr inbounds i8, i8* %607, i64 8
  store i8* %608, i8** %593, align 8
  %609 = bitcast i8* %608 to i64*
  store i64 %603, i64* %609, align 1
  %610 = load i8*, i8** %593, align 8
  %611 = getelementptr inbounds i8, i8* %610, i64 8
  store i8* %611, i8** %593, align 8
  %612 = bitcast i8* %611 to i64*
  store i64 %603, i64* %612, align 1
  %613 = load i8*, i8** %593, align 8
  %614 = getelementptr inbounds i8, i8* %613, i64 8
  store i8* %614, i8** %593, align 8
  %615 = bitcast i8* %614 to i64*
  store i64 %603, i64* %615, align 1
  %616 = load i8*, i8** %593, align 8
  %617 = getelementptr inbounds i8, i8* %616, i64 8
  store i8* %617, i8** %593, align 8
  %618 = load float, float* %595, align 4
  %619 = fsub float -0.000000e+00, %618
  %620 = bitcast i8* %617 to float*
  store float %619, float* %620, align 1
  %621 = load i8*, i8** %593, align 8
  %622 = getelementptr inbounds i8, i8* %621, i64 4
  store i8* %622, i8** %593, align 8
  %623 = load i32, i32* %16, align 8
  %624 = and i32 %623, 2
  %625 = icmp eq i32 %624, 0
  %626 = bitcast i8* %622 to i64*
  br i1 %625, label %632, label %627

627:                                              ; preds = %597
  %628 = load i64, i64* %95, align 8
  store i64 %628, i64* %626, align 1
  %629 = load i8*, i8** %593, align 8
  %630 = getelementptr inbounds i8, i8* %629, i64 8
  store i8* %630, i8** %593, align 8
  %631 = bitcast i8* %630 to i64*
  br label %632

632:                                              ; preds = %627, %597
  %633 = phi i8* [ %622, %597 ], [ %630, %627 ]
  %634 = phi i64* [ %626, %597 ], [ %631, %627 ]
  %635 = and i32 %623, 4
  %636 = icmp eq i32 %635, 0
  br i1 %636, label %659, label %637

637:                                              ; preds = %632
  %638 = bitcast i8* %633 to i32*
  %639 = load i32, i32* %96, align 8
  store i32 %639, i32* %638, align 1
  %640 = load i8*, i8** %593, align 8
  %641 = getelementptr inbounds i8, i8* %640, i64 4
  store i8* %641, i8** %593, align 8
  %642 = load i8, i8* %76, align 8, !range !2
  %643 = icmp eq i8 %642, 0
  %644 = bitcast i8* %641 to i64*
  br i1 %643, label %659, label %645

645:                                              ; preds = %637
  %646 = bitcast i8* %641 to i32*
  %647 = load i32, i32* %97, align 4
  store i32 %647, i32* %646, align 1
  %648 = load i8*, i8** %593, align 8
  %649 = getelementptr inbounds i8, i8* %648, i64 4
  store i8* %649, i8** %593, align 8
  %650 = bitcast i8* %649 to i32*
  %651 = load i32, i32* %98, align 8
  store i32 %651, i32* %650, align 1
  %652 = load i8*, i8** %593, align 8
  %653 = getelementptr inbounds i8, i8* %652, i64 4
  store i8* %653, i8** %593, align 8
  %654 = bitcast i8* %653 to i32*
  %655 = load i32, i32* %99, align 4
  store i32 %655, i32* %654, align 1
  %656 = load i8*, i8** %593, align 8
  %657 = getelementptr inbounds i8, i8* %656, i64 4
  store i8* %657, i8** %593, align 8
  %658 = bitcast i8* %657 to i64*
  br label %659

659:                                              ; preds = %632, %637, %645
  %660 = phi i64* [ %634, %632 ], [ %644, %637 ], [ %658, %645 ]
  %661 = add nuw nsw i64 %599, 1
  %662 = icmp slt i64 %599, %583
  br i1 %662, label %597, label %663

663:                                              ; preds = %659, %579
  %664 = getelementptr inbounds i8, i8* %203, i64 2
  %665 = load i8, i8* %576, align 1
  br label %666

666:                                              ; preds = %561, %564, %446, %442, %443, %575, %663, %201, %342
  %667 = phi i32 [ 0, %201 ], [ %582, %663 ], [ 0, %575 ], [ 0, %342 ], [ 0, %446 ], [ 1, %442 ], [ 1, %443 ], [ 1, %561 ], [ 0, %564 ]
  %668 = phi %struct.SkPoint* [ %215, %201 ], [ %202, %663 ], [ %215, %575 ], [ %202, %342 ], [ %202, %446 ], [ %202, %442 ], [ %202, %443 ], [ %202, %561 ], [ %202, %564 ]
  %669 = phi i8 [ %208, %201 ], [ %665, %663 ], [ %577, %575 ], [ %344, %342 ], [ %359, %446 ], [ 0, %442 ], [ %445, %443 ], [ %563, %561 ], [ %469, %564 ]
  %670 = phi float* [ %204, %201 ], [ %584, %663 ], [ %204, %575 ], [ %204, %342 ], [ %204, %446 ], [ %204, %442 ], [ %204, %443 ], [ %204, %561 ], [ %204, %564 ]
  %671 = phi i8* [ %203, %201 ], [ %664, %663 ], [ %576, %575 ], [ %343, %342 ], [ %358, %446 ], [ %358, %442 ], [ %444, %443 ], [ %562, %561 ], [ %468, %564 ]
  %672 = icmp ne i32 %217, 3
  %673 = icmp eq i32 %217, 4
  br label %674

674:                                              ; preds = %795, %666
  %675 = phi i1 [ true, %795 ], [ %209, %666 ]
  %676 = phi %struct.SkPoint* [ %752, %795 ], [ %668, %666 ]
  %677 = phi i8 [ %797, %795 ], [ %669, %666 ]
  %678 = phi i8 [ %748, %795 ], [ %207, %666 ]
  %679 = phi %struct.SkPoint* [ %749, %795 ], [ %206, %666 ]
  %680 = phi <2 x float> [ %791, %795 ], [ %205, %666 ]
  %681 = phi i8* [ %796, %795 ], [ %671, %666 ]
  %682 = phi i32 [ %792, %795 ], [ 0, %666 ]
  %683 = phi %struct.SkPoint* [ %750, %795 ], [ %202, %666 ]
  br label %684

684:                                              ; preds = %674, %794
  %685 = phi i1 [ true, %794 ], [ %675, %674 ]
  %686 = phi %struct.SkPoint* [ %752, %794 ], [ %676, %674 ]
  %687 = phi i8 [ 0, %794 ], [ %677, %674 ]
  %688 = phi i8 [ %748, %794 ], [ %678, %674 ]
  %689 = phi %struct.SkPoint* [ %749, %794 ], [ %679, %674 ]
  %690 = phi <2 x float> [ %791, %794 ], [ %680, %674 ]
  %691 = phi i32 [ %792, %794 ], [ %682, %674 ]
  %692 = phi %struct.SkPoint* [ %750, %794 ], [ %683, %674 ]
  br i1 %685, label %695, label %693

693:                                              ; preds = %684
  %694 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %692, i64 4
  br label %747

695:                                              ; preds = %684
  %696 = icmp eq i32 %691, 0
  %697 = sext i8 %687 to i64
  %698 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 3, i64 %697
  %699 = load float, float* %698, align 4
  %700 = getelementptr inbounds %"class.(anonymous namespace)::BinningInstanceWriter", %"class.(anonymous namespace)::BinningInstanceWriter"* %8, i64 0, i32 2, i64 %697, i32 0
  %701 = load i8*, i8** %700, align 8
  %702 = bitcast %struct.SkPoint* %686 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %701, i8* align 4 %702, i64 32, i1 false) #13
  %703 = load i8*, i8** %700, align 8
  %704 = getelementptr inbounds i8, i8* %703, i64 32
  store i8* %704, i8** %700, align 8
  %705 = fsub float -0.000000e+00, %699
  %706 = select i1 %696, float %699, float %705
  %707 = bitcast i8* %704 to <2 x float>*
  store <2 x float> %690, <2 x float>* %707, align 1
  %708 = load i8*, i8** %700, align 8
  %709 = getelementptr inbounds i8, i8* %708, i64 8
  store i8* %709, i8** %700, align 8
  %710 = bitcast i8* %709 to float*
  store float %706, float* %710, align 1
  %711 = load i8*, i8** %700, align 8
  %712 = getelementptr inbounds i8, i8* %711, i64 4
  store i8* %712, i8** %700, align 8
  %713 = load i32, i32* %16, align 8
  %714 = and i32 %713, 2
  %715 = icmp eq i32 %714, 0
  br i1 %715, label %722, label %716

716:                                              ; preds = %695
  %717 = bitcast i8* %712 to i64*
  %718 = load i64, i64* %95, align 8
  store i64 %718, i64* %717, align 1
  %719 = load i8*, i8** %700, align 8
  %720 = getelementptr inbounds i8, i8* %719, i64 8
  store i8* %720, i8** %700, align 8
  %721 = load i32, i32* %16, align 8
  br label %722

722:                                              ; preds = %716, %695
  %723 = phi i8* [ %712, %695 ], [ %720, %716 ]
  %724 = phi i32 [ %713, %695 ], [ %721, %716 ]
  %725 = and i32 %724, 4
  %726 = icmp eq i32 %725, 0
  br i1 %726, label %747, label %727

727:                                              ; preds = %722
  %728 = bitcast i8* %723 to i32*
  %729 = load i32, i32* %96, align 8
  store i32 %729, i32* %728, align 1
  %730 = load i8*, i8** %700, align 8
  %731 = getelementptr inbounds i8, i8* %730, i64 4
  store i8* %731, i8** %700, align 8
  %732 = load i8, i8* %76, align 8, !range !2
  %733 = icmp eq i8 %732, 0
  br i1 %733, label %747, label %734

734:                                              ; preds = %727
  %735 = bitcast i8* %731 to i32*
  %736 = load i32, i32* %97, align 4
  store i32 %736, i32* %735, align 1
  %737 = load i8*, i8** %700, align 8
  %738 = getelementptr inbounds i8, i8* %737, i64 4
  store i8* %738, i8** %700, align 8
  %739 = bitcast i8* %738 to i32*
  %740 = load i32, i32* %98, align 8
  store i32 %740, i32* %739, align 1
  %741 = load i8*, i8** %700, align 8
  %742 = getelementptr inbounds i8, i8* %741, i64 4
  store i8* %742, i8** %700, align 8
  %743 = bitcast i8* %742 to i32*
  %744 = load i32, i32* %99, align 4
  store i32 %744, i32* %743, align 1
  %745 = load i8*, i8** %700, align 8
  %746 = getelementptr inbounds i8, i8* %745, i64 4
  store i8* %746, i8** %700, align 8
  br label %747

747:                                              ; preds = %734, %727, %722, %693
  %748 = phi i8 [ %687, %693 ], [ %688, %722 ], [ %688, %727 ], [ %688, %734 ]
  %749 = phi %struct.SkPoint* [ %686, %693 ], [ %689, %722 ], [ %689, %727 ], [ %689, %734 ]
  %750 = phi %struct.SkPoint* [ %694, %693 ], [ %692, %722 ], [ %692, %727 ], [ %692, %734 ]
  %751 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %686, i64 2
  %752 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %686, i64 3
  %753 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %751, i64 0, i32 0
  %754 = load float, float* %753, align 4
  %755 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %752, i64 0, i32 0
  %756 = load float, float* %755, align 4
  %757 = fcmp une float %754, %756
  br i1 %757, label %764, label %758

758:                                              ; preds = %747
  %759 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %686, i64 2, i32 1
  %760 = load float, float* %759, align 4
  %761 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %686, i64 3, i32 1
  %762 = load float, float* %761, align 4
  %763 = fcmp une float %760, %762
  br label %764

764:                                              ; preds = %747, %758
  %765 = phi i1 [ true, %747 ], [ %763, %758 ]
  %766 = and i1 %672, %765
  br i1 %766, label %786, label %767

767:                                              ; preds = %764
  %768 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %686, i64 1
  %769 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %768, i64 0, i32 0
  %770 = load float, float* %769, align 4
  %771 = fcmp une float %770, %754
  br i1 %771, label %786, label %772

772:                                              ; preds = %767
  %773 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %686, i64 1, i32 1
  %774 = load float, float* %773, align 4
  %775 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %686, i64 2, i32 1
  %776 = load float, float* %775, align 4
  %777 = fcmp une float %774, %776
  br i1 %777, label %786, label %778

778:                                              ; preds = %772
  %779 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %686, i64 0, i32 0
  %780 = load float, float* %779, align 4
  %781 = fcmp une float %780, %770
  br i1 %781, label %786, label %782

782:                                              ; preds = %778
  %783 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %686, i64 0, i32 1
  %784 = load float, float* %783, align 4
  %785 = fcmp une float %784, %774
  br i1 %785, label %786, label %790

786:                                              ; preds = %782, %778, %772, %767, %764
  %787 = phi %struct.SkPoint* [ %751, %764 ], [ %768, %767 ], [ %768, %772 ], [ %686, %778 ], [ %686, %782 ]
  %788 = bitcast %struct.SkPoint* %787 to <2 x float>*
  %789 = load <2 x float>, <2 x float>* %788, align 4
  br label %790

790:                                              ; preds = %786, %782
  %791 = phi <2 x float> [ %690, %782 ], [ %789, %786 ]
  %792 = add nuw nsw i32 %691, 1
  %793 = icmp eq i32 %691, %667
  br i1 %793, label %798, label %794

794:                                              ; preds = %790
  br i1 %673, label %795, label %684

795:                                              ; preds = %794
  %796 = getelementptr inbounds i8, i8* %681, i64 1
  %797 = load i8, i8* %681, align 1
  br label %674

798:                                              ; preds = %790, %325, %318, %313, %286, %282
  %799 = phi i1 [ true, %282 ], [ false, %286 ], [ false, %313 ], [ false, %318 ], [ false, %325 ], [ true, %790 ]
  %800 = phi i8 [ %208, %282 ], [ %208, %286 ], [ %208, %313 ], [ %208, %318 ], [ %208, %325 ], [ %687, %790 ]
  %801 = phi i8 [ %207, %282 ], [ %207, %286 ], [ %207, %313 ], [ %207, %318 ], [ %207, %325 ], [ %748, %790 ]
  %802 = phi %struct.SkPoint* [ %206, %282 ], [ null, %286 ], [ null, %313 ], [ null, %318 ], [ null, %325 ], [ %749, %790 ]
  %803 = phi <2 x float> [ %285, %282 ], [ %205, %286 ], [ %205, %313 ], [ %205, %318 ], [ %205, %325 ], [ %791, %790 ]
  %804 = phi float* [ %204, %282 ], [ %204, %286 ], [ %204, %313 ], [ %204, %318 ], [ %204, %325 ], [ %670, %790 ]
  %805 = phi i8* [ %283, %282 ], [ %203, %286 ], [ %203, %313 ], [ %203, %318 ], [ %203, %325 ], [ %681, %790 ]
  %806 = phi %struct.SkPoint* [ %202, %282 ], [ %62, %286 ], [ %62, %313 ], [ %62, %318 ], [ %62, %325 ], [ %750, %790 ]
  %807 = call zeroext i1 @_ZN16GrStrokeIterator4nextEv(%class.GrStrokeIterator* nonnull %10)
  br i1 %807, label %201, label %808

808:                                              ; preds = %798, %191
  %809 = phi i8 [ %116, %191 ], [ %800, %798 ]
  %810 = phi i8 [ %115, %191 ], [ %801, %798 ]
  %811 = phi %struct.SkPoint* [ %114, %191 ], [ %802, %798 ]
  %812 = phi <2 x float> [ %113, %191 ], [ %803, %798 ]
  %813 = phi float* [ %112, %191 ], [ %804, %798 ]
  %814 = phi i8* [ %111, %191 ], [ %805, %798 ]
  %815 = phi %struct.SkPoint* [ %110, %191 ], [ %806, %798 ]
  call void @llvm.lifetime.end.p0i8(i64 312, i8* nonnull %77) #13
  %816 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %109, i64 0, i32 3
  %817 = load %"struct.GrStrokeTessellator::PathStrokeList"*, %"struct.GrStrokeTessellator::PathStrokeList"** %816, align 8
  %818 = icmp eq %"struct.GrStrokeTessellator::PathStrokeList"* %817, null
  br i1 %818, label %107, label %108
}

declare float @_Z20SkFindQuadMidTangentPK7SkPoint(%struct.SkPoint*) local_unnamed_addr #4

declare <2 x float> @_Z12SkEvalQuadAtPK7SkPointf(%struct.SkPoint*, float) local_unnamed_addr #4

declare float @_ZNK7SkConic14findMidTangentEv(%struct.SkConic*) local_unnamed_addr #4

declare void @_ZNK7SkConic6evalAtEfP7SkPointS1_(%struct.SkConic*, float, %struct.SkPoint*, %struct.SkPoint*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK27GrStrokeIndirectTessellator4drawEP14GrOpFlushState(%class.GrStrokeIndirectTessellator* nocapture readonly, %class.GrOpFlushState* nocapture readonly) unnamed_addr #2 align 2 {
  %3 = alloca %class.sk_sp.13, align 8
  %4 = alloca %class.sk_sp.13, align 8
  %5 = alloca %class.sk_sp.13, align 8
  %6 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 10, i32 0
  %7 = load %class.GrBuffer*, %class.GrBuffer** %6, align 8
  %8 = icmp eq %class.GrBuffer* %7, null
  br i1 %8, label %61, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 11, i32 0
  %11 = load %class.GrBuffer*, %class.GrBuffer** %10, align 8
  %12 = icmp eq %class.GrBuffer* %11, null
  br i1 %12, label %18, label %13

13:                                               ; preds = %9
  %14 = bitcast %class.GrBuffer* %11 to void (%class.GrBuffer*)***
  %15 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %14, align 8
  %16 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %15, i64 2
  %17 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %16, align 8
  tail call void %17(%class.GrBuffer* nonnull %11) #13
  br label %18

18:                                               ; preds = %9, %13
  %19 = ptrtoint %class.GrBuffer* %11 to i64
  %20 = bitcast %class.sk_sp.13* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20)
  %21 = bitcast %class.sk_sp.13* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = bitcast %class.sk_sp.13* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = getelementptr inbounds %class.GrOpFlushState, %class.GrOpFlushState* %1, i64 0, i32 15
  %24 = load %class.GrOpsRenderPass*, %class.GrOpsRenderPass** %23, align 8
  %25 = bitcast %class.sk_sp.13* %3 to i64*
  store i64 0, i64* %25, align 8
  %26 = bitcast %class.sk_sp.13* %4 to i64*
  store i64 %19, i64* %26, align 8
  %27 = bitcast %class.sk_sp.13* %5 to i64*
  store i64 0, i64* %27, align 8
  call void @_ZN15GrOpsRenderPass11bindBuffersE5sk_spIK8GrBufferES3_S3_18GrPrimitiveRestart(%class.GrOpsRenderPass* %24, %class.sk_sp.13* nonnull %3, %class.sk_sp.13* nonnull %4, %class.sk_sp.13* nonnull %5, i1 zeroext false) #13
  %28 = getelementptr inbounds %class.sk_sp.13, %class.sk_sp.13* %5, i64 0, i32 0
  %29 = load %class.GrBuffer*, %class.GrBuffer** %28, align 8
  %30 = icmp eq %class.GrBuffer* %29, null
  br i1 %30, label %36, label %31

31:                                               ; preds = %18
  %32 = bitcast %class.GrBuffer* %29 to void (%class.GrBuffer*)***
  %33 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %32, align 8
  %34 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %33, i64 3
  %35 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %34, align 8
  call void %35(%class.GrBuffer* nonnull %29) #13
  br label %36

36:                                               ; preds = %31, %18
  %37 = getelementptr inbounds %class.sk_sp.13, %class.sk_sp.13* %4, i64 0, i32 0
  %38 = load %class.GrBuffer*, %class.GrBuffer** %37, align 8
  %39 = icmp eq %class.GrBuffer* %38, null
  br i1 %39, label %45, label %40

40:                                               ; preds = %36
  %41 = bitcast %class.GrBuffer* %38 to void (%class.GrBuffer*)***
  %42 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %41, align 8
  %43 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %42, i64 3
  %44 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %43, align 8
  call void %44(%class.GrBuffer* nonnull %38) #13
  br label %45

45:                                               ; preds = %40, %36
  %46 = getelementptr inbounds %class.sk_sp.13, %class.sk_sp.13* %3, i64 0, i32 0
  %47 = load %class.GrBuffer*, %class.GrBuffer** %46, align 8
  %48 = icmp eq %class.GrBuffer* %47, null
  br i1 %48, label %54, label %49

49:                                               ; preds = %45
  %50 = bitcast %class.GrBuffer* %47 to void (%class.GrBuffer*)***
  %51 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %50, align 8
  %52 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %51, i64 3
  %53 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %52, align 8
  call void %53(%class.GrBuffer* nonnull %47) #13
  br label %54

54:                                               ; preds = %49, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  %55 = load %class.GrBuffer*, %class.GrBuffer** %6, align 8
  %56 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 12
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = load %class.GrOpsRenderPass*, %class.GrOpsRenderPass** %23, align 8
  call void @_ZN15GrOpsRenderPass12drawIndirectEPK8GrBuffermi(%class.GrOpsRenderPass* %60, %class.GrBuffer* %55, i64 %57, i32 %59) #13
  br label %61

61:                                               ; preds = %2, %54
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN27GrStrokeIndirectTessellatorD2Ev(%class.GrStrokeIndirectTessellator*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV27GrStrokeIndirectTessellator, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 11, i32 0
  %4 = load %class.GrBuffer*, %class.GrBuffer** %3, align 8
  %5 = icmp eq %class.GrBuffer* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %class.GrBuffer* %4 to void (%class.GrBuffer*)***
  %8 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %7, align 8
  %9 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %8, i64 3
  %10 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %9, align 8
  tail call void %10(%class.GrBuffer* nonnull %4) #13
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 10, i32 0
  %13 = load %class.GrBuffer*, %class.GrBuffer** %12, align 8
  %14 = icmp eq %class.GrBuffer* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %class.GrBuffer* %13 to void (%class.GrBuffer*)***
  %17 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %16, align 8
  %18 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %17, i64 3
  %19 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %18, align 8
  tail call void %19(%class.GrBuffer* nonnull %13) #13
  br label %20

20:                                               ; preds = %11, %15
  %21 = bitcast %class.GrStrokeIndirectTessellator* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV19GrStrokeTessellator, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV14GrStrokeShader, i64 0, inrange i32 0, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %21, align 8
  %22 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 0, i32 1, i32 6, i32 0, i32 0, i64 88
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = and i64 %24, 1
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %20
  %28 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 0, i32 1, i32 6, i32 0, i32 0, i64 80
  %29 = bitcast i8* %28 to i8**
  %30 = load i8*, i8** %29, align 8
  tail call void @_Z7sk_freePv(i8* %30) #13
  br label %31

31:                                               ; preds = %20, %27
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN27GrStrokeIndirectTessellatorD0Ev(%class.GrStrokeIndirectTessellator*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV27GrStrokeIndirectTessellator, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 11, i32 0
  %4 = load %class.GrBuffer*, %class.GrBuffer** %3, align 8
  %5 = icmp eq %class.GrBuffer* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %class.GrBuffer* %4 to void (%class.GrBuffer*)***
  %8 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %7, align 8
  %9 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %8, i64 3
  %10 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %9, align 8
  tail call void %10(%class.GrBuffer* nonnull %4) #13
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 10, i32 0
  %13 = load %class.GrBuffer*, %class.GrBuffer** %12, align 8
  %14 = icmp eq %class.GrBuffer* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %class.GrBuffer* %13 to void (%class.GrBuffer*)***
  %17 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %16, align 8
  %18 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %17, i64 3
  %19 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %18, align 8
  tail call void %19(%class.GrBuffer* nonnull %13) #13
  br label %20

20:                                               ; preds = %15, %11
  %21 = bitcast %class.GrStrokeIndirectTessellator* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV19GrStrokeTessellator, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV14GrStrokeShader, i64 0, inrange i32 0, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %21, align 8
  %22 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 0, i32 1, i32 6, i32 0, i32 0, i64 88
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = and i64 %24, 1
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %20
  %28 = getelementptr inbounds %class.GrStrokeIndirectTessellator, %class.GrStrokeIndirectTessellator* %0, i64 0, i32 0, i32 1, i32 6, i32 0, i32 0, i64 80
  %29 = bitcast i8* %28 to i8**
  %30 = load i8*, i8** %29, align 8
  tail call void @_Z7sk_freePv(i8* %30) #13
  br label %31

31:                                               ; preds = %20, %27
  %32 = bitcast %class.GrStrokeIndirectTessellator* %0 to i8*
  tail call void @_ZdlPv(i8* %32) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN14GrStrokeShaderC2ENS_4ModeENS_11ShaderFlagsERK8SkMatrixRK11SkStrokeRec8SkRGBA4fIL11SkAlphaType2EE(%class.GrStrokeShader*, i32, i32, %class.SkMatrix* dereferenceable(40), %class.SkStrokeRec* dereferenceable(16), <2 x float>, <2 x float>) unnamed_addr #0 comdat align 2 {
  %8 = icmp eq i32 %1, 0
  %9 = select i1 %8, i8 5, i8 1
  %10 = zext i1 %8 to i32
  %11 = bitcast %class.GrStrokeShader* %0 to %class.GrGeometryProcessor*
  tail call void @_ZN19GrGeometryProcessorC2EN11GrProcessor7ClassIDE(%class.GrGeometryProcessor* %11, i32 103) #13
  %12 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV12GrPathShader, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 0, i32 1
  %14 = bitcast %class.SkMatrix* %13 to i8*
  %15 = bitcast %class.SkMatrix* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* align 4 %15, i64 40, i1 false) #13
  %16 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 0, i32 2
  store i8 %9, i8* %16, align 4
  %17 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 0, i32 3
  store i32 %10, i32* %17, align 8
  br i1 %8, label %18, label %22

18:                                               ; preds = %7
  %19 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 0, i32 0, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = or i32 %20, 4
  store i32 %21, i32* %19, align 4
  br label %22

22:                                               ; preds = %7, %18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV14GrStrokeShader, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %23 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 1
  store i32 %1, i32* %23, align 4
  %24 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 2
  store i32 %2, i32* %24, align 8
  %25 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 3
  %26 = bitcast %class.SkStrokeRec* %25 to i8*
  %27 = bitcast %class.SkStrokeRec* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %26, i8* align 4 %27, i64 16, i1 false)
  %28 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 4
  %29 = bitcast %struct.SkRGBA4f* %28 to <2 x float>*
  store <2 x float> %5, <2 x float>* %29, align 4
  %30 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 4, i32 2
  %31 = bitcast float* %30 to <2 x float>*
  store <2 x float> %6, <2 x float>* %31, align 4
  %32 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 6, i32 0, i32 0, i64 80
  %33 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 6, i32 0, i32 0, i64 0
  %34 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 6, i32 0, i32 0, i64 88
  %35 = bitcast i8* %34 to i64*
  %36 = bitcast i8* %32 to i8**
  store i8* %33, i8** %36, align 8
  store i64 42949672960, i64* %35, align 8
  %37 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 7
  store float 0.000000e+00, float* %37, align 8
  %38 = bitcast i8* %32 to %class.SkTArray*
  tail call void @_ZN8SkTArrayIN19GrGeometryProcessor9AttributeELb0EE12checkReallocEiNS2_11ReallocTypeE(%class.SkTArray* %38, i32 1, i32 1) #13
  %39 = bitcast i8* %32 to %"class.GrGeometryProcessor::Attribute"**
  %40 = load %"class.GrGeometryProcessor::Attribute"*, %"class.GrGeometryProcessor::Attribute"** %39, align 8
  %41 = load i64, i64* %35, align 8
  %42 = lshr i64 %41, 1
  %43 = and i64 %42, 2147483647
  %44 = add i64 %41, 2
  %45 = and i64 %44, 4294967294
  %46 = and i64 %41, -4294967295
  %47 = or i64 %45, %46
  store i64 %47, i64* %35, align 8
  %48 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %40, i64 %43, i32 0
  br i1 %8, label %49, label %74

49:                                               ; preds = %22
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8** %48, align 8
  %50 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %40, i64 %43, i32 1
  store i32 1, i32* %50, align 8
  %51 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %40, i64 %43, i32 2
  store i32 22, i32* %51, align 4
  tail call void @_ZN8SkTArrayIN19GrGeometryProcessor9AttributeELb0EE12checkReallocEiNS2_11ReallocTypeE(%class.SkTArray* %38, i32 1, i32 1) #13
  %52 = load %"class.GrGeometryProcessor::Attribute"*, %"class.GrGeometryProcessor::Attribute"** %39, align 8
  %53 = load i64, i64* %35, align 8
  %54 = lshr i64 %53, 1
  %55 = and i64 %54, 2147483647
  %56 = add i64 %53, 2
  %57 = and i64 %56, 4294967294
  %58 = and i64 %53, -4294967295
  %59 = or i64 %57, %58
  store i64 %59, i64* %35, align 8
  %60 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %52, i64 %55, i32 0
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8** %60, align 8
  %61 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %52, i64 %55, i32 1
  store i32 3, i32* %61, align 8
  %62 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %52, i64 %55, i32 2
  store i32 24, i32* %62, align 4
  tail call void @_ZN8SkTArrayIN19GrGeometryProcessor9AttributeELb0EE12checkReallocEiNS2_11ReallocTypeE(%class.SkTArray* %38, i32 1, i32 1) #13
  %63 = load %"class.GrGeometryProcessor::Attribute"*, %"class.GrGeometryProcessor::Attribute"** %39, align 8
  %64 = load i64, i64* %35, align 8
  %65 = lshr i64 %64, 1
  %66 = and i64 %65, 2147483647
  %67 = add i64 %64, 2
  %68 = and i64 %67, 4294967294
  %69 = and i64 %64, -4294967295
  %70 = or i64 %68, %69
  store i64 %70, i64* %35, align 8
  %71 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %63, i64 %66, i32 0
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8** %71, align 8
  %72 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %63, i64 %66, i32 1
  store i32 3, i32* %72, align 8
  %73 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %63, i64 %66, i32 2
  br label %104

74:                                               ; preds = %22
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8** %48, align 8
  %75 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %40, i64 %43, i32 1
  store i32 3, i32* %75, align 8
  %76 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %40, i64 %43, i32 2
  store i32 24, i32* %76, align 4
  tail call void @_ZN8SkTArrayIN19GrGeometryProcessor9AttributeELb0EE12checkReallocEiNS2_11ReallocTypeE(%class.SkTArray* %38, i32 1, i32 1) #13
  %77 = load %"class.GrGeometryProcessor::Attribute"*, %"class.GrGeometryProcessor::Attribute"** %39, align 8
  %78 = load i64, i64* %35, align 8
  %79 = lshr i64 %78, 1
  %80 = and i64 %79, 2147483647
  %81 = add i64 %78, 2
  %82 = and i64 %81, 4294967294
  %83 = and i64 %78, -4294967295
  %84 = or i64 %82, %83
  store i64 %84, i64* %35, align 8
  %85 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %77, i64 %80, i32 0
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8** %85, align 8
  %86 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %77, i64 %80, i32 1
  store i32 3, i32* %86, align 8
  %87 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %77, i64 %80, i32 2
  store i32 24, i32* %87, align 4
  %88 = load i32, i32* %23, align 4
  %89 = icmp eq i32 %88, 1
  tail call void @_ZN8SkTArrayIN19GrGeometryProcessor9AttributeELb0EE12checkReallocEiNS2_11ReallocTypeE(%class.SkTArray* %38, i32 1, i32 1) #13
  %90 = load %"class.GrGeometryProcessor::Attribute"*, %"class.GrGeometryProcessor::Attribute"** %39, align 8
  %91 = load i64, i64* %35, align 8
  %92 = lshr i64 %91, 1
  %93 = and i64 %92, 2147483647
  %94 = add i64 %91, 2
  %95 = and i64 %94, 4294967294
  %96 = and i64 %91, -4294967295
  %97 = or i64 %95, %96
  store i64 %97, i64* %35, align 8
  %98 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %90, i64 %93, i32 0
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i8** %98, align 8
  %99 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %90, i64 %93, i32 1
  br i1 %89, label %100, label %102

100:                                              ; preds = %74
  store i32 2, i32* %99, align 8
  %101 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %90, i64 %93, i32 2
  br label %104

102:                                              ; preds = %74
  store i32 1, i32* %99, align 8
  %103 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %90, i64 %93, i32 2
  br label %104

104:                                              ; preds = %100, %102, %49
  %105 = phi i32* [ %101, %100 ], [ %103, %102 ], [ %73, %49 ]
  %106 = phi i32 [ 23, %100 ], [ 22, %102 ], [ 24, %49 ]
  store i32 %106, i32* %105, align 4
  %107 = load i32, i32* %24, align 8
  %108 = and i32 %107, 2
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %123, label %110

110:                                              ; preds = %104
  tail call void @_ZN8SkTArrayIN19GrGeometryProcessor9AttributeELb0EE12checkReallocEiNS2_11ReallocTypeE(%class.SkTArray* %38, i32 1, i32 1) #13
  %111 = load %"class.GrGeometryProcessor::Attribute"*, %"class.GrGeometryProcessor::Attribute"** %39, align 8
  %112 = load i64, i64* %35, align 8
  %113 = lshr i64 %112, 1
  %114 = and i64 %113, 2147483647
  %115 = add i64 %112, 2
  %116 = and i64 %115, 4294967294
  %117 = and i64 %112, -4294967295
  %118 = or i64 %116, %117
  store i64 %118, i64* %35, align 8
  %119 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %111, i64 %114, i32 0
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i8** %119, align 8
  %120 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %111, i64 %114, i32 1
  store i32 1, i32* %120, align 8
  %121 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %111, i64 %114, i32 2
  store i32 22, i32* %121, align 4
  %122 = load i32, i32* %24, align 8
  br label %123

123:                                              ; preds = %104, %110
  %124 = phi i32 [ %107, %104 ], [ %122, %110 ]
  %125 = and i32 %124, 4
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %142, label %127

127:                                              ; preds = %123
  %128 = and i32 %124, 1
  %129 = icmp eq i32 %128, 0
  %130 = select i1 %129, i32 17, i32 3
  tail call void @_ZN8SkTArrayIN19GrGeometryProcessor9AttributeELb0EE12checkReallocEiNS2_11ReallocTypeE(%class.SkTArray* %38, i32 1, i32 1) #13
  %131 = load %"class.GrGeometryProcessor::Attribute"*, %"class.GrGeometryProcessor::Attribute"** %39, align 8
  %132 = load i64, i64* %35, align 8
  %133 = lshr i64 %132, 1
  %134 = and i64 %133, 2147483647
  %135 = add i64 %132, 2
  %136 = and i64 %135, 4294967294
  %137 = and i64 %132, -4294967295
  %138 = or i64 %136, %137
  store i64 %138, i64* %35, align 8
  %139 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %131, i64 %134, i32 0
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i8** %139, align 8
  %140 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %131, i64 %134, i32 1
  store i32 %130, i32* %140, align 8
  %141 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %131, i64 %134, i32 2
  store i32 31, i32* %141, align 4
  br label %142

142:                                              ; preds = %123, %127
  %143 = load i32, i32* %23, align 4
  %144 = icmp eq i32 %143, 0
  %145 = load %"class.GrGeometryProcessor::Attribute"*, %"class.GrGeometryProcessor::Attribute"** %39, align 8
  %146 = load i64, i64* %35, align 8
  %147 = lshr i64 %146, 1
  %148 = trunc i64 %147 to i32
  %149 = and i32 %148, 2147483647
  br i1 %144, label %150, label %181

150:                                              ; preds = %142
  %151 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 0, i32 0, i32 3, i32 0
  store %"class.GrGeometryProcessor::Attribute"* %145, %"class.GrGeometryProcessor::Attribute"** %151, align 8
  %152 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 0, i32 0, i32 3, i32 1
  store i32 %149, i32* %152, align 8
  %153 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 0, i32 0, i32 3, i32 2
  store i32 0, i32* %153, align 4
  %154 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 0, i32 0, i32 3, i32 3
  store i64 0, i64* %154, align 8
  %155 = icmp eq i32 %149, 0
  br i1 %155, label %212, label %156

156:                                              ; preds = %150
  %157 = zext i32 %149 to i64
  br label %158

158:                                              ; preds = %176, %156
  %159 = phi i64 [ 0, %156 ], [ %177, %176 ]
  %160 = phi i32 [ 0, %156 ], [ %178, %176 ]
  %161 = phi i64 [ 0, %156 ], [ %179, %176 ]
  %162 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %145, i64 %161, i32 2
  %163 = load i32, i32* %162, align 4
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %176, label %165

165:                                              ; preds = %158
  %166 = add nsw i32 %160, 1
  store i32 %166, i32* %153, align 4
  %167 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %145, i64 %161, i32 1
  %168 = load i32, i32* %167, align 8
  %169 = icmp ult i32 %168, 26
  br i1 %169, label %171, label %170

170:                                              ; preds = %165
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6, i64 0, i64 0), i32 373, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0)) #14
  unreachable

171:                                              ; preds = %165
  %172 = sext i32 %168 to i64
  %173 = getelementptr inbounds [26 x i64], [26 x i64]* @switch.table._ZN14GrStrokeShaderC2ENS_4ModeENS_11ShaderFlagsERK8SkMatrixRK11SkStrokeRec8SkRGBA4fIL11SkAlphaType2EE.9, i64 0, i64 %172
  %174 = load i64, i64* %173, align 8
  %175 = add i64 %159, %174
  store i64 %175, i64* %154, align 8
  br label %176

176:                                              ; preds = %171, %158
  %177 = phi i64 [ %175, %171 ], [ %159, %158 ]
  %178 = phi i32 [ %166, %171 ], [ %160, %158 ]
  %179 = add nuw nsw i64 %161, 1
  %180 = icmp eq i64 %179, %157
  br i1 %180, label %212, label %158

181:                                              ; preds = %142
  %182 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  store %"class.GrGeometryProcessor::Attribute"* %145, %"class.GrGeometryProcessor::Attribute"** %182, align 8
  %183 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 0, i32 0, i32 4, i32 1
  store i32 %149, i32* %183, align 8
  %184 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 0, i32 0, i32 4, i32 2
  store i32 0, i32* %184, align 4
  %185 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 0, i32 0, i32 4, i32 3
  store i64 0, i64* %185, align 8
  %186 = icmp eq i32 %149, 0
  br i1 %186, label %212, label %187

187:                                              ; preds = %181
  %188 = zext i32 %149 to i64
  br label %189

189:                                              ; preds = %207, %187
  %190 = phi i64 [ 0, %187 ], [ %208, %207 ]
  %191 = phi i32 [ 0, %187 ], [ %209, %207 ]
  %192 = phi i64 [ 0, %187 ], [ %210, %207 ]
  %193 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %145, i64 %192, i32 2
  %194 = load i32, i32* %193, align 4
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %207, label %196

196:                                              ; preds = %189
  %197 = add nsw i32 %191, 1
  store i32 %197, i32* %184, align 4
  %198 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %145, i64 %192, i32 1
  %199 = load i32, i32* %198, align 8
  %200 = icmp ult i32 %199, 26
  br i1 %200, label %202, label %201

201:                                              ; preds = %196
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6, i64 0, i64 0), i32 373, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0)) #14
  unreachable

202:                                              ; preds = %196
  %203 = sext i32 %199 to i64
  %204 = getelementptr inbounds [26 x i64], [26 x i64]* @switch.table._ZN14GrStrokeShaderC2ENS_4ModeENS_11ShaderFlagsERK8SkMatrixRK11SkStrokeRec8SkRGBA4fIL11SkAlphaType2EE.9, i64 0, i64 %203
  %205 = load i64, i64* %204, align 8
  %206 = add i64 %190, %205
  store i64 %206, i64* %185, align 8
  br label %207

207:                                              ; preds = %202, %189
  %208 = phi i64 [ %206, %202 ], [ %190, %189 ]
  %209 = phi i32 [ %197, %202 ], [ %191, %189 ]
  %210 = add nuw nsw i64 %192, 1
  %211 = icmp eq i64 %210, %188
  br i1 %211, label %212, label %189

212:                                              ; preds = %207, %176, %150, %181
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrStrokeTessellatorD2Ev(%class.GrStrokeTessellator*) unnamed_addr #2 comdat align 2 {
  %2 = bitcast %class.GrStrokeTessellator* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV19GrStrokeTessellator, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV14GrStrokeShader, i64 0, inrange i32 0, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %2, align 8
  %3 = getelementptr inbounds %class.GrStrokeTessellator, %class.GrStrokeTessellator* %0, i64 0, i32 1, i32 6, i32 0, i32 0, i64 88
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.GrStrokeTessellator, %class.GrStrokeTessellator* %0, i64 0, i32 1, i32 6, i32 0, i32 0, i64 80
  %10 = bitcast i8* %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_Z7sk_freePv(i8* %11) #13
  br label %12

12:                                               ; preds = %1, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrStrokeTessellatorD0Ev(%class.GrStrokeTessellator*) unnamed_addr #2 comdat align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

declare void @_ZN19GrGeometryProcessorC2EN11GrProcessor7ClassIDE(%class.GrGeometryProcessor*, i32) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11GrProcessorD2Ev(%class.GrProcessor*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12GrPathShaderD0Ev(%class.GrPathShader*) unnamed_addr #7 comdat align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(96) %"class.GrGeometryProcessor::TextureSampler"* @_ZNK19GrGeometryProcessor16onTextureSamplerEi(%class.GrGeometryProcessor*, i32) unnamed_addr #2 comdat align 2 {
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6, i64 0, i64 0), i32 304, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable
}

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #8

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayIN19GrGeometryProcessor9AttributeELb0EE12checkReallocEiNS2_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #2 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %74

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %74, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 16) #13
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %62, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %57, %50 ]
  %52 = shl nuw nsw i64 %51, 4
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %"class.GrGeometryProcessor::Attribute"*, %"class.GrGeometryProcessor::Attribute"** %49, align 8
  %55 = getelementptr inbounds %"class.GrGeometryProcessor::Attribute", %"class.GrGeometryProcessor::Attribute"* %54, i64 %51
  %56 = bitcast %"class.GrGeometryProcessor::Attribute"* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %56, i64 16, i1 false) #13
  %57 = add nuw nsw i64 %51, 1
  %58 = load i64, i64* %4, align 8
  %59 = lshr i64 %58, 1
  %60 = and i64 %59, 2147483647
  %61 = icmp ult i64 %57, %60
  br i1 %61, label %50, label %62

62:                                               ; preds = %50, %35
  %63 = phi i64 [ %45, %35 ], [ %58, %50 ]
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %64, 0
  %66 = bitcast %class.SkTArray* %0 to i8**
  br i1 %65, label %70, label %67

67:                                               ; preds = %62
  %68 = load i8*, i8** %66, align 8
  tail call void @_Z7sk_freePv(i8* %68) #13
  %69 = load i64, i64* %4, align 8
  br label %70

70:                                               ; preds = %62, %67
  %71 = phi i64 [ %69, %67 ], [ %63, %62 ]
  store i8* %44, i8** %66, align 8
  %72 = and i64 %71, -4294967298
  %73 = or i64 %72, 1
  store i64 %73, i64* %4, align 8
  br label %74

74:                                               ; preds = %70, %32, %21
  ret void
}

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare float @acosf(float) local_unnamed_addr #9

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN16GrStrokeIterator17finishOpenContourEv(%class.GrStrokeIterator*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 12
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %103, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 1
  %7 = load %class.SkStrokeRec*, %class.SkStrokeRec** %6, align 8
  %8 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = trunc i32 %9 to i16
  switch i16 %10, label %205 [
    i16 0, label %11
    i16 1, label %30
    i16 2, label %71
  ]

11:                                               ; preds = %5
  %12 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 5
  %13 = bitcast %struct.SkPoint** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 6
  %16 = bitcast float** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %19 = load i32, i32* %18, align 8
  %20 = add nsw i32 %19, %3
  %21 = and i32 %20, 7
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %22
  store i32 6, i32* %23, align 4
  %24 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %22
  %25 = bitcast %struct.SkPoint** %24 to i64*
  store i64 %14, i64* %25, align 8
  %26 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %22
  %27 = bitcast float** %26 to i64*
  store i64 %17, i64* %27, align 8
  %28 = load i32, i32* %2, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %2, align 4
  br label %205

30:                                               ; preds = %5
  %31 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %32 = load i32, i32* %31, align 8
  %33 = add i32 %32, %3
  %34 = add i32 %33, 7
  %35 = and i32 %34, 7
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds [7 x i8], [7 x i8]* @_ZZN10SkPathPriv9PtsInIterEjE10gPtsInVerb, i64 0, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = add nsw i64 %42, -1
  %44 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %36
  %45 = load %struct.SkPoint*, %struct.SkPoint** %44, align 8
  %46 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %45, i64 %43
  %47 = and i32 %33, 7
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %48
  store i32 5, i32* %49, align 4
  %50 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %48
  store %struct.SkPoint* %46, %struct.SkPoint** %50, align 8
  %51 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %48
  store float* null, float** %51, align 8
  %52 = load i32, i32* %2, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %2, align 4
  %54 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 5
  %55 = bitcast %struct.SkPoint** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 6
  %58 = bitcast float** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = load i32, i32* %31, align 8
  %61 = add nsw i32 %60, %53
  %62 = and i32 %61, 7
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %63
  store i32 5, i32* %64, align 4
  %65 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %63
  %66 = bitcast %struct.SkPoint** %65 to i64*
  store i64 %56, i64* %66, align 8
  %67 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %63
  %68 = bitcast float** %67 to i64*
  store i64 %59, i64* %68, align 8
  %69 = load i32, i32* %2, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %2, align 4
  br label %205

71:                                               ; preds = %5
  tail call void @_ZN16GrStrokeIterator19fillSquareCapPointsEv(%class.GrStrokeIterator* %0)
  %72 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 14, i32 0, i64 0
  %73 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %74 = load i32, i32* %73, align 8
  %75 = load i32, i32* %2, align 4
  %76 = add nsw i32 %75, %74
  %77 = and i32 %76, 7
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %78
  store i32 1, i32* %79, align 4
  %80 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %78
  store %struct.SkPoint* %72, %struct.SkPoint** %80, align 8
  %81 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %78
  store float* null, float** %81, align 8
  %82 = load i32, i32* %2, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %2, align 4
  %84 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 15, i32 0, i64 0
  %85 = load i32, i32* %73, align 8
  %86 = add nsw i32 %85, %83
  %87 = and i32 %86, 7
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %88
  store i32 6, i32* %89, align 4
  %90 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %88
  store %struct.SkPoint* %84, %struct.SkPoint** %90, align 8
  %91 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %88
  store float* null, float** %91, align 8
  %92 = load i32, i32* %2, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %2, align 4
  %94 = load i32, i32* %73, align 8
  %95 = add nsw i32 %94, %93
  %96 = and i32 %95, 7
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %97
  store i32 1, i32* %98, align 4
  %99 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %97
  store %struct.SkPoint* %84, %struct.SkPoint** %99, align 8
  %100 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %97
  store float* null, float** %100, align 8
  %101 = load i32, i32* %2, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %2, align 4
  br label %205

103:                                              ; preds = %1
  %104 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 7
  %105 = load %struct.SkPoint*, %struct.SkPoint** %104, align 8
  %106 = icmp eq %struct.SkPoint* %105, null
  %107 = ptrtoint %struct.SkPoint* %105 to i64
  br i1 %106, label %237, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 1
  %110 = load %class.SkStrokeRec*, %class.SkStrokeRec** %109, align 8
  %111 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %110, i64 0, i32 3
  %112 = load i32, i32* %111, align 4
  %113 = trunc i32 %112 to i16
  switch i16 %113, label %205 [
    i16 0, label %237
    i16 1, label %114
    i16 2, label %128
  ]

114:                                              ; preds = %108
  %115 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %116 = load i32, i32* %115, align 8
  %117 = and i32 %116, 7
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %118
  store i32 5, i32* %119, align 4
  %120 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %118
  store %struct.SkPoint* %105, %struct.SkPoint** %120, align 8
  %121 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %118
  store float* null, float** %121, align 8
  %122 = load i32, i32* %2, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %2, align 4
  %124 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 4
  store i32 5, i32* %124, align 8
  %125 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 5
  %126 = bitcast %struct.SkPoint** %125 to i64*
  store i64 %107, i64* %126, align 8
  %127 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 6
  store float* null, float** %127, align 8
  br label %205

128:                                              ; preds = %108
  %129 = tail call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* %110) #13
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %137, label %131

131:                                              ; preds = %128
  %132 = load %class.SkStrokeRec*, %class.SkStrokeRec** %109, align 8
  %133 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %132, i64 0, i32 1
  %134 = load float, float* %133, align 4
  %135 = fmul float %134, 5.000000e-01
  %136 = insertelement <2 x float> <float undef, float 0.000000e+00>, float %135, i32 0
  br label %160

137:                                              ; preds = %128
  %138 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 0
  %139 = load %class.SkMatrix*, %class.SkMatrix** %138, align 8
  %140 = bitcast %class.SkMatrix* %139 to <2 x float>*
  %141 = load <2 x float>, <2 x float>* %140, align 4
  %142 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %139, i64 0, i32 0, i64 3
  %143 = bitcast float* %142 to <2 x float>*
  %144 = load <2 x float>, <2 x float>* %143, align 4
  %145 = shufflevector <2 x float> %144, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %146 = fmul <2 x float> %141, %145
  %147 = extractelement <2 x float> %146, i32 0
  %148 = extractelement <2 x float> %146, i32 1
  %149 = fsub float %147, %148
  %150 = fcmp ogt float %149, 0.000000e+00
  br i1 %150, label %151, label %160

151:                                              ; preds = %137
  %152 = fdiv float 5.000000e-01, %149
  %153 = extractelement <2 x float> %144, i32 1
  %154 = fmul float %153, %152
  %155 = insertelement <2 x float> undef, float %154, i32 0
  %156 = extractelement <2 x float> %144, i32 0
  %157 = fmul float %156, %152
  %158 = fsub float -0.000000e+00, %157
  %159 = insertelement <2 x float> %155, float %158, i32 1
  br label %160

160:                                              ; preds = %137, %151, %131
  %161 = phi <2 x float> [ %159, %151 ], [ %136, %131 ], [ <float 1.000000e+00, float 0.000000e+00>, %137 ]
  %162 = load %struct.SkPoint*, %struct.SkPoint** %104, align 8
  %163 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %162, i64 0, i32 0
  %164 = load float, float* %163, align 4
  %165 = extractelement <2 x float> %161, i32 0
  %166 = fsub float %164, %165
  %167 = insertelement <2 x float> undef, float %166, i32 0
  %168 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %162, i64 0, i32 1
  %169 = load float, float* %168, align 4
  %170 = extractelement <2 x float> %161, i32 1
  %171 = fsub float %169, %170
  %172 = insertelement <2 x float> %167, float %171, i32 1
  %173 = fadd float %165, %164
  %174 = insertelement <2 x float> undef, float %173, i32 0
  %175 = fadd float %170, %169
  %176 = insertelement <2 x float> %174, float %175, i32 1
  %177 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 14
  %178 = bitcast %"struct.std::__1::array.21"* %177 to <2 x float>*
  store <2 x float> %172, <2 x float>* %178, align 8
  %179 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 14, i32 0, i64 1
  %180 = bitcast %struct.SkPoint* %179 to <2 x float>*
  store <2 x float> %176, <2 x float>* %180, align 8
  %181 = getelementptr inbounds %"struct.std::__1::array.21", %"struct.std::__1::array.21"* %177, i64 0, i32 0, i64 0
  %182 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %183 = load i32, i32* %182, align 8
  %184 = load i32, i32* %2, align 4
  %185 = add nsw i32 %184, %183
  %186 = and i32 %185, 7
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %187
  store i32 1, i32* %188, align 4
  %189 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %187
  store %struct.SkPoint* %181, %struct.SkPoint** %189, align 8
  %190 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %187
  store float* null, float** %190, align 8
  %191 = load i32, i32* %2, align 4
  %192 = add nsw i32 %191, 1
  store i32 %192, i32* %2, align 4
  %193 = load i32, i32* %182, align 8
  %194 = add nsw i32 %193, %192
  %195 = and i32 %194, 7
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %196
  store i32 6, i32* %197, align 4
  %198 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %196
  store %struct.SkPoint* %181, %struct.SkPoint** %198, align 8
  %199 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %196
  store float* null, float** %199, align 8
  %200 = load i32, i32* %2, align 4
  %201 = add nsw i32 %200, 1
  store i32 %201, i32* %2, align 4
  %202 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 4
  store i32 1, i32* %202, align 8
  %203 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 5
  store %struct.SkPoint* %181, %struct.SkPoint** %203, align 8
  %204 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 6
  store float* null, float** %204, align 8
  br label %205

205:                                              ; preds = %108, %160, %114, %11, %30, %71, %5
  %206 = phi i32 [ 0, %108 ], [ %201, %160 ], [ %123, %114 ], [ %29, %11 ], [ %70, %30 ], [ %102, %71 ], [ %3, %5 ]
  %207 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 4
  %208 = load i32, i32* %207, align 8
  %209 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 5
  %210 = bitcast %struct.SkPoint** %209 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 6
  %213 = bitcast float** %212 to i64*
  %214 = load i64, i64* %213, align 8
  %215 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %216 = load i32, i32* %215, align 8
  %217 = add nsw i32 %206, %216
  %218 = and i32 %217, 7
  %219 = zext i32 %218 to i64
  %220 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %219
  store i32 %208, i32* %220, align 4
  %221 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %219
  %222 = bitcast %struct.SkPoint** %221 to i64*
  store i64 %211, i64* %222, align 8
  %223 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %219
  %224 = bitcast float** %223 to i64*
  store i64 %214, i64* %224, align 8
  %225 = load i32, i32* %2, align 4
  %226 = add nsw i32 %225, 1
  store i32 %226, i32* %2, align 4
  %227 = load i32, i32* %215, align 8
  %228 = add nsw i32 %227, %226
  %229 = and i32 %228, 7
  %230 = zext i32 %229 to i64
  %231 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %230
  store i32 7, i32* %231, align 4
  %232 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %230
  store %struct.SkPoint* null, %struct.SkPoint** %232, align 8
  %233 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %230
  store float* null, float** %233, align 8
  %234 = load i32, i32* %2, align 4
  %235 = add nsw i32 %234, 1
  store i32 %235, i32* %2, align 4
  %236 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 7
  store %struct.SkPoint* null, %struct.SkPoint** %236, align 8
  br label %237

237:                                              ; preds = %103, %108, %205
  %238 = phi i1 [ true, %205 ], [ false, %108 ], [ false, %103 ]
  ret i1 %238
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16GrStrokeIterator19fillSquareCapPointsEv(%class.GrStrokeIterator*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca <2 x float>, align 8
  %3 = alloca <2 x float>, align 8
  %4 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 12
  %5 = load i32, i32* %4, align 4
  %6 = add i32 %5, 7
  %7 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %6, %8
  %10 = and i32 %9, 7
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %11
  %13 = load %struct.SkPoint*, %struct.SkPoint** %12, align 8
  %14 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %11
  %15 = load i32, i32* %14, align 4
  switch i32 %15, label %49 [
    i32 4, label %20
    i32 3, label %32
    i32 2, label %32
    i32 1, label %16
  ]

16:                                               ; preds = %1
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 1, i32 0
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  br label %44

20:                                               ; preds = %1
  %21 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 3, i32 0
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 2, i32 0
  %23 = bitcast float* %21 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 4
  %25 = bitcast float* %22 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 4
  %27 = fsub <2 x float> %24, %26
  %28 = fcmp oeq <2 x float> %27, zeroinitializer
  %29 = extractelement <2 x i1> %28, i32 0
  %30 = extractelement <2 x i1> %28, i32 1
  %31 = and i1 %29, %30
  br i1 %31, label %32, label %50

32:                                               ; preds = %20, %1, %1
  %33 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 2, i32 0
  %34 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 1, i32 0
  %35 = bitcast float* %34 to <2 x float>*
  %36 = load <2 x float>, <2 x float>* %35, align 4
  %37 = bitcast float* %33 to <2 x float>*
  %38 = load <2 x float>, <2 x float>* %37, align 4
  %39 = fsub <2 x float> %38, %36
  %40 = fcmp oeq <2 x float> %39, zeroinitializer
  %41 = extractelement <2 x i1> %40, i32 0
  %42 = extractelement <2 x i1> %40, i32 1
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %50

44:                                               ; preds = %16, %32
  %45 = phi <2 x float> [ %19, %16 ], [ %36, %32 ]
  %46 = bitcast %struct.SkPoint* %13 to <2 x float>*
  %47 = load <2 x float>, <2 x float>* %46, align 4
  %48 = fsub <2 x float> %45, %47
  br label %50

49:                                               ; preds = %1
  tail call void @llvm.trap()
  unreachable

50:                                               ; preds = %32, %20, %44
  %51 = phi <2 x float> [ %48, %44 ], [ %39, %32 ], [ %27, %20 ]
  %52 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 1
  %53 = load %class.SkStrokeRec*, %class.SkStrokeRec** %52, align 8
  %54 = tail call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* %53) #13
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %68, label %56

56:                                               ; preds = %50
  %57 = load %class.SkStrokeRec*, %class.SkStrokeRec** %52, align 8
  %58 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %57, i64 0, i32 1
  %59 = load float, float* %58, align 4
  %60 = fmul float %59, 5.000000e-01
  %61 = extractelement <2 x float> %51, i32 0
  %62 = extractelement <2 x float> %51, i32 1
  %63 = tail call float @_ZN7SkPoint6LengthEff(float %61, float %62) #13
  %64 = fdiv float %60, %63
  %65 = fmul float %61, %64
  %66 = insertelement <2 x float> undef, float %65, i32 0
  %67 = fmul float %62, %64
  br label %85

68:                                               ; preds = %50
  %69 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 0
  %70 = load %class.SkMatrix*, %class.SkMatrix** %69, align 8
  %71 = extractelement <2 x float> %51, i32 0
  %72 = extractelement <2 x float> %51, i32 1
  %73 = bitcast <2 x float>* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73)
  %74 = bitcast <2 x float>* %2 to %struct.SkPoint*
  %75 = getelementptr inbounds <2 x float>, <2 x float>* %2, i64 0, i64 0
  %76 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %74, i64 0, i32 1
  store float %71, float* %75, align 8
  store float %72, float* %76, align 4
  call void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix* %70, %struct.SkPoint* nonnull %74, %struct.SkPoint* nonnull %74, i32 1) #13
  %77 = load <2 x float>, <2 x float>* %2, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73)
  %78 = extractelement <2 x float> %77, i32 0
  %79 = extractelement <2 x float> %77, i32 1
  %80 = call float @_ZN7SkPoint6LengthEff(float %78, float %79) #13
  %81 = fdiv float 5.000000e-01, %80
  %82 = fmul float %71, %81
  %83 = insertelement <2 x float> undef, float %82, i32 0
  %84 = fmul float %72, %81
  br label %85

85:                                               ; preds = %68, %56
  %86 = phi float [ %84, %68 ], [ %67, %56 ]
  %87 = phi <2 x float> [ %83, %68 ], [ %66, %56 ]
  %88 = insertelement <2 x float> %87, float %86, i32 1
  %89 = zext i32 %15 to i64
  %90 = getelementptr inbounds [7 x i8], [7 x i8]* @_ZZN10SkPathPriv9PtsInIterEjE10gPtsInVerb, i64 0, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i64
  %93 = add nsw i64 %92, -1
  %94 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 %93
  %95 = bitcast %struct.SkPoint* %94 to <2 x float>*
  %96 = load <2 x float>, <2 x float>* %95, align 4
  %97 = fadd <2 x float> %88, %96
  %98 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 14
  %99 = bitcast %"struct.std::__1::array.21"* %98 to <2 x float>*
  store <2 x float> %96, <2 x float>* %99, align 8
  %100 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 14, i32 0, i64 1
  %101 = bitcast %struct.SkPoint* %100 to <2 x float>*
  store <2 x float> %97, <2 x float>* %101, align 8
  %102 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 5
  %103 = load %struct.SkPoint*, %struct.SkPoint** %102, align 8
  %104 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %103, i64 1, i32 0
  %105 = bitcast %struct.SkPoint* %103 to <2 x float>*
  %106 = load <2 x float>, <2 x float>* %105, align 4
  %107 = bitcast float* %104 to <2 x float>*
  %108 = load <2 x float>, <2 x float>* %107, align 4
  %109 = fsub <2 x float> %108, %106
  %110 = fcmp oeq <2 x float> %109, zeroinitializer
  %111 = extractelement <2 x i1> %110, i32 0
  %112 = extractelement <2 x i1> %110, i32 1
  %113 = and i1 %111, %112
  br i1 %113, label %114, label %128

114:                                              ; preds = %85
  %115 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %103, i64 2, i32 0
  %116 = bitcast float* %115 to <2 x float>*
  %117 = load <2 x float>, <2 x float>* %116, align 4
  %118 = fsub <2 x float> %117, %106
  %119 = fcmp oeq <2 x float> %118, zeroinitializer
  %120 = extractelement <2 x i1> %119, i32 0
  %121 = extractelement <2 x i1> %119, i32 1
  %122 = and i1 %120, %121
  br i1 %122, label %123, label %128

123:                                              ; preds = %114
  %124 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %103, i64 3, i32 0
  %125 = bitcast float* %124 to <2 x float>*
  %126 = load <2 x float>, <2 x float>* %125, align 4
  %127 = fsub <2 x float> %126, %106
  br label %128

128:                                              ; preds = %114, %123, %85
  %129 = phi <2 x float> [ %127, %123 ], [ %118, %114 ], [ %109, %85 ]
  %130 = load %class.SkStrokeRec*, %class.SkStrokeRec** %52, align 8
  %131 = call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* %130) #13
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %145, label %133

133:                                              ; preds = %128
  %134 = load %class.SkStrokeRec*, %class.SkStrokeRec** %52, align 8
  %135 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %134, i64 0, i32 1
  %136 = load float, float* %135, align 4
  %137 = fmul float %136, -5.000000e-01
  %138 = extractelement <2 x float> %129, i32 0
  %139 = extractelement <2 x float> %129, i32 1
  %140 = call float @_ZN7SkPoint6LengthEff(float %138, float %139) #13
  %141 = fdiv float %137, %140
  %142 = fmul float %138, %141
  %143 = insertelement <2 x float> undef, float %142, i32 0
  %144 = fmul float %139, %141
  br label %162

145:                                              ; preds = %128
  %146 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 0
  %147 = load %class.SkMatrix*, %class.SkMatrix** %146, align 8
  %148 = extractelement <2 x float> %129, i32 0
  %149 = extractelement <2 x float> %129, i32 1
  %150 = bitcast <2 x float>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %150)
  %151 = bitcast <2 x float>* %3 to %struct.SkPoint*
  %152 = getelementptr inbounds <2 x float>, <2 x float>* %3, i64 0, i64 0
  %153 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %151, i64 0, i32 1
  store float %148, float* %152, align 8
  store float %149, float* %153, align 4
  call void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix* %147, %struct.SkPoint* nonnull %151, %struct.SkPoint* nonnull %151, i32 1) #13
  %154 = load <2 x float>, <2 x float>* %3, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %150)
  %155 = extractelement <2 x float> %154, i32 0
  %156 = extractelement <2 x float> %154, i32 1
  %157 = call float @_ZN7SkPoint6LengthEff(float %155, float %156) #13
  %158 = fdiv float -5.000000e-01, %157
  %159 = fmul float %148, %158
  %160 = insertelement <2 x float> undef, float %159, i32 0
  %161 = fmul float %149, %158
  br label %162

162:                                              ; preds = %145, %133
  %163 = phi float [ %161, %145 ], [ %144, %133 ]
  %164 = phi <2 x float> [ %160, %145 ], [ %143, %133 ]
  %165 = insertelement <2 x float> %164, float %163, i32 1
  %166 = bitcast %struct.SkPoint** %102 to <2 x float>**
  %167 = load <2 x float>*, <2 x float>** %166, align 8
  %168 = load <2 x float>, <2 x float>* %167, align 4
  %169 = fadd <2 x float> %165, %168
  %170 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 15
  %171 = bitcast %"struct.std::__1::array.21"* %170 to <2 x float>*
  store <2 x float> %169, <2 x float>* %171, align 8
  %172 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 15, i32 0, i64 1
  %173 = bitcast %struct.SkPoint* %172 to <2 x float>*
  store <2 x float> %168, <2 x float>* %173, align 8
  ret void
}

declare float @_ZN7SkPoint6LengthEff(float, float) local_unnamed_addr #4

declare void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #4

declare i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter10flushLinesILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"*) unnamed_addr #10 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 32, !noalias !12
  %4 = icmp eq i32 %3, 4
  br i1 %4, label %5, label %14

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast [8 x float]* %6 to <8 x float>*
  %8 = load <8 x float>, <8 x float>* %7, align 1
  %9 = bitcast %"class.(anonymous namespace)::ResolveLevelCounter"* %0 to <8 x float>*
  %10 = load <8 x float>, <8 x float>* %9, align 1
  %11 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast [8 x float]* %11 to <8 x float>*
  %13 = load <8 x float>, <8 x float>* %12, align 1
  br label %113

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 1, i64 0
  %16 = bitcast float* %15 to i32*
  %17 = load i32, i32* %16, align 4, !noalias !12
  %18 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 1, i64 1
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4, !noalias !12
  %21 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 1, i64 2
  %22 = load float, float* %21, align 4, !noalias !12
  %23 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 1, i64 4
  %24 = bitcast float* %23 to i32*
  %25 = load i32, i32* %24, align 4, !noalias !12
  %26 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 1, i64 5
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4, !noalias !12
  %29 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 1, i64 6
  %30 = load float, float* %29, align 4, !noalias !12
  %31 = zext i32 %20 to i64
  %32 = shl nuw i64 %31, 32
  %33 = zext i32 %17 to i64
  %34 = or i64 %32, %33
  %35 = bitcast i64 %34 to <2 x float>
  %36 = shufflevector <2 x float> %35, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %37 = insertelement <8 x float> %36, float 0.000000e+00, i32 3
  %38 = insertelement <8 x float> %37, float %22, i32 2
  %39 = zext i32 %28 to i64
  %40 = shl nuw i64 %39, 32
  %41 = zext i32 %25 to i64
  %42 = or i64 %40, %41
  %43 = bitcast i64 %42 to <2 x float>
  %44 = shufflevector <2 x float> %43, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %45 = shufflevector <8 x float> %38, <8 x float> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %46 = insertelement <8 x float> %45, float 0.000000e+00, i32 7
  %47 = insertelement <8 x float> %46, float %30, i32 6
  %48 = bitcast %"class.(anonymous namespace)::ResolveLevelCounter"* %0 to i32*
  %49 = load i32, i32* %48, align 4, !noalias !17
  %50 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 0, i64 1
  %51 = bitcast float* %50 to i32*
  %52 = load i32, i32* %51, align 4, !noalias !17
  %53 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 0, i64 2
  %54 = load float, float* %53, align 4, !noalias !17
  %55 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 0, i64 4
  %56 = bitcast float* %55 to i32*
  %57 = load i32, i32* %56, align 4, !noalias !17
  %58 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 0, i64 5
  %59 = bitcast float* %58 to i32*
  %60 = load i32, i32* %59, align 4, !noalias !17
  %61 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 0, i64 6
  %62 = load float, float* %61, align 4, !noalias !17
  %63 = zext i32 %52 to i64
  %64 = shl nuw i64 %63, 32
  %65 = zext i32 %49 to i64
  %66 = or i64 %64, %65
  %67 = bitcast i64 %66 to <2 x float>
  %68 = shufflevector <2 x float> %67, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %69 = insertelement <8 x float> %68, float 0.000000e+00, i32 3
  %70 = insertelement <8 x float> %69, float %54, i32 2
  %71 = zext i32 %60 to i64
  %72 = shl nuw i64 %71, 32
  %73 = zext i32 %57 to i64
  %74 = or i64 %72, %73
  %75 = bitcast i64 %74 to <2 x float>
  %76 = shufflevector <2 x float> %75, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %77 = shufflevector <8 x float> %70, <8 x float> %76, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %78 = insertelement <8 x float> %77, float 0.000000e+00, i32 7
  %79 = insertelement <8 x float> %78, float %62, i32 6
  %80 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 1, i64 0
  %81 = bitcast float* %80 to i32*
  %82 = load i32, i32* %81, align 4, !noalias !22
  %83 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 1, i64 1
  %84 = bitcast float* %83 to i32*
  %85 = load i32, i32* %84, align 4, !noalias !22
  %86 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 1, i64 2
  %87 = load float, float* %86, align 4, !noalias !22
  %88 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 1, i64 4
  %89 = bitcast float* %88 to i32*
  %90 = load i32, i32* %89, align 4, !noalias !22
  %91 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 1, i64 5
  %92 = bitcast float* %91 to i32*
  %93 = load i32, i32* %92, align 4, !noalias !22
  %94 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 0, i32 0, i64 1, i64 6
  %95 = load float, float* %94, align 4, !noalias !22
  %96 = zext i32 %85 to i64
  %97 = shl nuw i64 %96, 32
  %98 = zext i32 %82 to i64
  %99 = or i64 %97, %98
  %100 = bitcast i64 %99 to <2 x float>
  %101 = shufflevector <2 x float> %100, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %102 = insertelement <8 x float> %101, float 0.000000e+00, i32 3
  %103 = insertelement <8 x float> %102, float %87, i32 2
  %104 = zext i32 %93 to i64
  %105 = shl nuw i64 %104, 32
  %106 = zext i32 %90 to i64
  %107 = or i64 %105, %106
  %108 = bitcast i64 %107 to <2 x float>
  %109 = shufflevector <2 x float> %108, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %110 = shufflevector <8 x float> %103, <8 x float> %109, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %111 = insertelement <8 x float> %110, float 0.000000e+00, i32 7
  %112 = insertelement <8 x float> %111, float %95, i32 6
  br label %113

113:                                              ; preds = %5, %14
  %114 = phi <8 x float> [ %10, %5 ], [ %79, %14 ]
  %115 = phi <8 x float> [ %8, %5 ], [ %47, %14 ]
  %116 = phi <8 x float> [ %13, %5 ], [ %112, %14 ]
  %117 = fsub <8 x float> %114, %115
  %118 = fsub <8 x float> %116, %114
  %119 = fmul <8 x float> %117, %117
  %120 = fmul <8 x float> %118, %118
  %121 = fmul <8 x float> %117, %118
  %122 = shufflevector <8 x float> %121, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %123 = shufflevector <8 x float> %121, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %124 = fadd <4 x float> %122, %123
  %125 = shufflevector <8 x float> %119, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %126 = shufflevector <8 x float> %119, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %127 = fadd <4 x float> %125, %126
  %128 = shufflevector <8 x float> %120, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %129 = shufflevector <8 x float> %120, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %130 = fadd <4 x float> %128, %129
  %131 = fmul <4 x float> %127, %130
  %132 = extractelement <4 x float> %131, i32 0
  %133 = tail call float @sqrtf(float %132) #13
  %134 = extractelement <4 x float> %131, i32 1
  %135 = tail call float @sqrtf(float %134) #13
  %136 = extractelement <4 x float> %131, i32 2
  %137 = tail call float @sqrtf(float %136) #13
  %138 = extractelement <4 x float> %131, i32 3
  %139 = tail call float @sqrtf(float %138) #13
  %140 = insertelement <4 x float> undef, float %133, i32 0
  %141 = insertelement <4 x float> %140, float %135, i32 1
  %142 = insertelement <4 x float> undef, float %137, i32 2
  %143 = insertelement <4 x float> %142, float %139, i32 3
  %144 = shufflevector <4 x float> %141, <4 x float> %143, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %145 = fdiv <4 x float> %124, %144
  %146 = fcmp olt <4 x float> %145, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %147 = sext <4 x i1> %146 to <4 x i32>
  %148 = bitcast <4 x i32> %147 to <2 x i64>
  %149 = extractelement <2 x i64> %148, i32 0
  %150 = extractelement <2 x i64> %148, i32 1
  %151 = bitcast i64 %149 to <2 x i32>
  %152 = shufflevector <2 x i32> %151, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %153 = bitcast i64 %150 to <2 x i32>
  %154 = shufflevector <2 x i32> %153, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %155 = shufflevector <4 x i32> %152, <4 x i32> %154, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %156 = bitcast <4 x float> %145 to <2 x i64>
  %157 = extractelement <2 x i64> %156, i32 0
  %158 = bitcast i64 %157 to <2 x i32>
  %159 = shufflevector <4 x float> %145, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %160 = bitcast <2 x float> %159 to <2 x i32>
  %161 = shufflevector <2 x i32> %158, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %162 = shufflevector <2 x i32> %160, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %163 = shufflevector <4 x i32> %161, <4 x i32> %162, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %164 = and <4 x i32> %155, %163
  %165 = bitcast <4 x i32> %164 to <2 x i64>
  %166 = extractelement <2 x i64> %165, i32 0
  %167 = extractelement <2 x i64> %165, i32 1
  %168 = bitcast i64 %166 to <2 x i32>
  %169 = shufflevector <2 x i32> %168, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %170 = bitcast i64 %167 to <2 x i32>
  %171 = shufflevector <2 x i32> %170, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %172 = shufflevector <4 x i32> %169, <4 x i32> %171, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %173 = bitcast <4 x i32> %155 to <2 x i64>
  %174 = xor <2 x i64> %173, <i64 -1, i64 -1>
  %175 = extractelement <2 x i64> %174, i32 0
  %176 = extractelement <2 x i64> %174, i32 1
  %177 = bitcast i64 %175 to <2 x i32>
  %178 = shufflevector <2 x i32> %177, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %179 = bitcast i64 %176 to <2 x i32>
  %180 = shufflevector <2 x i32> %179, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %181 = shufflevector <4 x i32> %178, <4 x i32> %180, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %182 = bitcast <4 x i32> %181 to <2 x i64>
  %183 = and <2 x i64> %182, <i64 4575657222473777152, i64 4575657222473777152>
  %184 = extractelement <2 x i64> %183, i32 0
  %185 = extractelement <2 x i64> %183, i32 1
  %186 = bitcast i64 %184 to <2 x i32>
  %187 = shufflevector <2 x i32> %186, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %188 = bitcast i64 %185 to <2 x i32>
  %189 = shufflevector <2 x i32> %188, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %190 = shufflevector <4 x i32> %187, <4 x i32> %189, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %191 = or <4 x i32> %190, %172
  %192 = bitcast <4 x i32> %191 to <2 x i64>
  %193 = extractelement <2 x i64> %192, i32 0
  %194 = extractelement <2 x i64> %192, i32 1
  %195 = bitcast i64 %193 to <2 x float>
  %196 = bitcast i64 %194 to <2 x float>
  %197 = shufflevector <2 x float> %195, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %198 = shufflevector <2 x float> %196, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %199 = shufflevector <4 x float> %197, <4 x float> %198, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %200 = fcmp olt <4 x float> %199, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %201 = sext <4 x i1> %200 to <4 x i32>
  %202 = bitcast <4 x i32> %201 to <2 x i64>
  %203 = extractelement <2 x i64> %202, i32 0
  %204 = extractelement <2 x i64> %202, i32 1
  %205 = bitcast i64 %203 to <2 x i32>
  %206 = shufflevector <2 x i32> %205, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %207 = bitcast i64 %204 to <2 x i32>
  %208 = shufflevector <2 x i32> %207, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %209 = shufflevector <4 x i32> %206, <4 x i32> %208, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %210 = bitcast <4 x i32> %209 to <2 x i64>
  %211 = and <2 x i64> %210, <i64 -4647714812233515008, i64 -4647714812233515008>
  %212 = extractelement <2 x i64> %211, i32 0
  %213 = extractelement <2 x i64> %211, i32 1
  %214 = bitcast i64 %212 to <2 x i32>
  %215 = shufflevector <2 x i32> %214, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %216 = bitcast i64 %213 to <2 x i32>
  %217 = shufflevector <2 x i32> %216, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %218 = shufflevector <4 x i32> %215, <4 x i32> %217, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %219 = xor <2 x i64> %210, <i64 -1, i64 -1>
  %220 = extractelement <2 x i64> %219, i32 0
  %221 = extractelement <2 x i64> %219, i32 1
  %222 = bitcast i64 %220 to <2 x i32>
  %223 = shufflevector <2 x i32> %222, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %224 = bitcast i64 %221 to <2 x i32>
  %225 = shufflevector <2 x i32> %224, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %226 = shufflevector <4 x i32> %223, <4 x i32> %225, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %227 = bitcast <4 x float> %199 to <2 x i64>
  %228 = extractelement <2 x i64> %227, i32 0
  %229 = bitcast i64 %228 to <2 x i32>
  %230 = bitcast i64 %194 to <2 x i32>
  %231 = shufflevector <2 x i32> %229, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %232 = shufflevector <2 x i32> %230, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %233 = shufflevector <4 x i32> %231, <4 x i32> %232, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %234 = and <4 x i32> %226, %233
  %235 = bitcast <4 x i32> %234 to <2 x i64>
  %236 = extractelement <2 x i64> %235, i32 0
  %237 = extractelement <2 x i64> %235, i32 1
  %238 = bitcast i64 %236 to <2 x i32>
  %239 = shufflevector <2 x i32> %238, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %240 = bitcast i64 %237 to <2 x i32>
  %241 = shufflevector <2 x i32> %240, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %242 = shufflevector <4 x i32> %239, <4 x i32> %241, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %243 = or <4 x i32> %242, %218
  %244 = bitcast <4 x i32> %243 to <2 x i64>
  %245 = extractelement <2 x i64> %244, i32 0
  %246 = extractelement <2 x i64> %244, i32 1
  %247 = bitcast i64 %245 to <2 x float>
  %248 = bitcast i64 %246 to <2 x float>
  %249 = shufflevector <2 x float> %247, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %250 = shufflevector <2 x float> %248, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %251 = shufflevector <4 x float> %249, <4 x float> %250, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %252 = fmul <4 x float> %251, %251
  %253 = fmul <4 x float> %252, <float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %254 = fadd <4 x float> %253, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %255 = fmul <4 x float> %252, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %256 = fadd <4 x float> %255, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %257 = fmul <4 x float> %252, %256
  %258 = fadd <4 x float> %257, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %259 = fdiv <4 x float> %254, %258
  %260 = fmul <4 x float> %251, %259
  %261 = fadd <4 x float> %260, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %262 = load i32, i32* %2, align 32
  %263 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 1, i64 0
  %264 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 9, i32 1
  %265 = load float, float* %264, align 4
  %266 = insertelement <2 x float> undef, float %265, i32 0
  %267 = shufflevector <2 x float> %266, <2 x float> undef, <4 x i32> zeroinitializer
  %268 = fmul <4 x float> %267, %261
  %269 = fadd <4 x float> %268, zeroinitializer
  %270 = bitcast <4 x float> %269 to <2 x i64>
  %271 = extractelement <2 x i64> %270, i32 0
  %272 = extractelement <2 x i64> %270, i32 1
  %273 = bitcast i64 %271 to <2 x i32>
  %274 = shufflevector <2 x i32> %273, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %275 = bitcast i64 %272 to <2 x i32>
  %276 = shufflevector <2 x i32> %275, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %277 = shufflevector <4 x i32> %274, <4 x i32> %276, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %278 = add <4 x i32> %277, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %279 = bitcast <4 x i32> %278 to <2 x i64>
  %280 = extractelement <2 x i64> %279, i32 0
  %281 = extractelement <2 x i64> %279, i32 1
  %282 = bitcast i64 %280 to <2 x i32>
  %283 = bitcast i64 %281 to <2 x i32>
  %284 = shufflevector <2 x i32> %282, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %285 = shufflevector <2 x i32> %283, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %286 = shufflevector <4 x i32> %284, <4 x i32> %285, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %287 = ashr <4 x i32> %286, <i32 23, i32 23, i32 23, i32 23>
  %288 = bitcast <4 x i32> %287 to <2 x i64>
  %289 = extractelement <2 x i64> %288, i32 0
  %290 = extractelement <2 x i64> %288, i32 1
  %291 = bitcast i64 %289 to <2 x i32>
  %292 = shufflevector <2 x i32> %291, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %293 = bitcast i64 %290 to <2 x i32>
  %294 = shufflevector <2 x i32> %293, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %295 = shufflevector <4 x i32> %292, <4 x i32> %294, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %296 = add <4 x i32> %295, <i32 -127, i32 -127, i32 -127, i32 -127>
  %297 = bitcast <4 x i32> %296 to <2 x i64>
  %298 = extractelement <2 x i64> %297, i32 0
  %299 = extractelement <2 x i64> %297, i32 1
  %300 = bitcast i64 %298 to <2 x i32>
  %301 = shufflevector <2 x i32> %300, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %302 = bitcast i64 %299 to <2 x i32>
  %303 = shufflevector <2 x i32> %302, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %304 = shufflevector <4 x i32> %301, <4 x i32> %303, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %305 = icmp sgt <4 x i32> %304, <i32 15, i32 15, i32 15, i32 15>
  %306 = sext <4 x i1> %305 to <4 x i32>
  %307 = bitcast <4 x i32> %306 to <2 x i64>
  %308 = extractelement <2 x i64> %307, i32 0
  %309 = extractelement <2 x i64> %307, i32 1
  %310 = bitcast i64 %308 to <2 x i32>
  %311 = shufflevector <2 x i32> %310, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %312 = bitcast i64 %309 to <2 x i32>
  %313 = shufflevector <2 x i32> %312, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %314 = shufflevector <4 x i32> %311, <4 x i32> %313, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %315 = bitcast <4 x i32> %314 to <2 x i64>
  %316 = and <2 x i64> %315, <i64 64424509455, i64 64424509455>
  %317 = extractelement <2 x i64> %316, i32 0
  %318 = extractelement <2 x i64> %316, i32 1
  %319 = bitcast i64 %317 to <2 x i32>
  %320 = shufflevector <2 x i32> %319, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %321 = bitcast i64 %318 to <2 x i32>
  %322 = shufflevector <2 x i32> %321, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %323 = shufflevector <4 x i32> %320, <4 x i32> %322, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %324 = xor <2 x i64> %315, <i64 -1, i64 -1>
  %325 = extractelement <2 x i64> %324, i32 0
  %326 = extractelement <2 x i64> %324, i32 1
  %327 = bitcast i64 %325 to <2 x i32>
  %328 = shufflevector <2 x i32> %327, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %329 = bitcast i64 %326 to <2 x i32>
  %330 = shufflevector <2 x i32> %329, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %331 = shufflevector <4 x i32> %328, <4 x i32> %330, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %332 = bitcast <4 x i32> %304 to <2 x i64>
  %333 = extractelement <2 x i64> %332, i32 0
  %334 = bitcast i64 %333 to <2 x i32>
  %335 = shufflevector <2 x i32> %334, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %336 = shufflevector <4 x i32> %335, <4 x i32> %303, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %337 = and <4 x i32> %331, %336
  %338 = bitcast <4 x i32> %337 to <2 x i64>
  %339 = extractelement <2 x i64> %338, i32 0
  %340 = extractelement <2 x i64> %338, i32 1
  %341 = bitcast i64 %339 to <2 x i32>
  %342 = shufflevector <2 x i32> %341, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %343 = bitcast i64 %340 to <2 x i32>
  %344 = shufflevector <2 x i32> %343, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %345 = shufflevector <4 x i32> %342, <4 x i32> %344, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %346 = or <4 x i32> %345, %323
  %347 = bitcast <4 x i32> %346 to <2 x i64>
  %348 = extractelement <2 x i64> %347, i32 0
  %349 = extractelement <2 x i64> %347, i32 1
  %350 = bitcast i64 %348 to <2 x i32>
  %351 = shufflevector <2 x i32> %350, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %352 = bitcast i64 %349 to <2 x i32>
  %353 = shufflevector <2 x i32> %352, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %354 = shufflevector <4 x i32> %351, <4 x i32> %353, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %355 = icmp sgt <4 x i32> %354, zeroinitializer
  %356 = sext <4 x i1> %355 to <4 x i32>
  %357 = bitcast <4 x i32> %356 to <2 x i64>
  %358 = extractelement <2 x i64> %357, i32 0
  %359 = extractelement <2 x i64> %357, i32 1
  %360 = bitcast i64 %358 to <2 x i32>
  %361 = shufflevector <2 x i32> %360, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %362 = bitcast i64 %359 to <2 x i32>
  %363 = shufflevector <2 x i32> %362, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %364 = shufflevector <4 x i32> %361, <4 x i32> %363, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %365 = bitcast <4 x i32> %354 to <2 x i64>
  %366 = extractelement <2 x i64> %365, i32 0
  %367 = bitcast i64 %366 to <2 x i32>
  %368 = shufflevector <2 x i32> %367, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %369 = shufflevector <4 x i32> %368, <4 x i32> %353, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %370 = and <4 x i32> %364, %369
  %371 = bitcast <4 x i32> %370 to <2 x i64>
  %372 = extractelement <2 x i64> %371, i32 0
  %373 = extractelement <2 x i64> %371, i32 1
  %374 = bitcast i64 %372 to <2 x i32>
  %375 = shufflevector <2 x i32> %374, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %376 = bitcast i64 %373 to <2 x i32>
  %377 = shufflevector <2 x i32> %376, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %378 = shufflevector <4 x i32> %375, <4 x i32> %377, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %379 = bitcast <4 x i32> %378 to <2 x i64>
  %380 = extractelement <2 x i64> %379, i32 0
  %381 = extractelement <2 x i64> %379, i32 1
  %382 = lshr i64 %380, 32
  switch i32 %262, label %383 [
    i32 4, label %384
    i32 3, label %396
    i32 2, label %407
    i32 1, label %418
  ]

383:                                              ; preds = %113
  tail call void @llvm.trap() #13
  unreachable

384:                                              ; preds = %113
  %385 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %386 = load i32*, i32** %385, align 8
  %387 = lshr i64 %381, 32
  %388 = trunc i64 %387 to i8
  %389 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 1, i64 3
  %390 = load i8*, i8** %389, align 8
  store i8 %388, i8* %390, align 1
  %391 = shl i64 %387, 56
  %392 = ashr exact i64 %391, 56
  %393 = getelementptr inbounds i32, i32* %386, i64 %392
  %394 = load i32, i32* %393, align 4
  %395 = add nsw i32 %394, 1
  store i32 %395, i32* %393, align 4
  br label %396

396:                                              ; preds = %113, %384
  %397 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %398 = load i32*, i32** %397, align 8
  %399 = trunc i64 %381 to i8
  %400 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 1, i64 2
  %401 = load i8*, i8** %400, align 8
  store i8 %399, i8* %401, align 1
  %402 = shl i64 %381, 56
  %403 = ashr exact i64 %402, 56
  %404 = getelementptr inbounds i32, i32* %398, i64 %403
  %405 = load i32, i32* %404, align 4
  %406 = add nsw i32 %405, 1
  store i32 %406, i32* %404, align 4
  br label %407

407:                                              ; preds = %113, %396
  %408 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %409 = load i32*, i32** %408, align 8
  %410 = trunc i64 %382 to i8
  %411 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 0, i32 1, i64 1
  %412 = load i8*, i8** %411, align 8
  store i8 %410, i8* %412, align 1
  %413 = shl i64 %382, 56
  %414 = ashr exact i64 %413, 56
  %415 = getelementptr inbounds i32, i32* %409, i64 %414
  %416 = load i32, i32* %415, align 4
  %417 = add nsw i32 %416, 1
  store i32 %417, i32* %415, align 4
  br label %418

418:                                              ; preds = %113, %407
  %419 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %420 = load i32*, i32** %419, align 8
  %421 = trunc i64 %380 to i8
  %422 = load i8*, i8** %263, align 8
  store i8 %421, i8* %422, align 1
  %423 = shl i64 %380, 56
  %424 = ashr exact i64 %423, 56
  %425 = getelementptr inbounds i32, i32* %420, i64 %424
  %426 = load i32, i32* %425, align 4
  %427 = add nsw i32 %426, 1
  store i32 %427, i32* %425, align 4
  store i32 0, i32* %2, align 32
  ret void
}

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter10flushQuadsILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"*) unnamed_addr #10 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 2
  %4 = load i32, i32* %3, align 32, !noalias !27
  %5 = icmp eq i32 %4, 4
  br i1 %5, label %6, label %15

6:                                                ; preds = %1
  %7 = bitcast %"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue.14"* %2 to <8 x float>*
  %8 = load <8 x float>, <8 x float>* %7, align 1
  %9 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %10 = bitcast [8 x float]* %9 to <8 x float>*
  %11 = load <8 x float>, <8 x float>* %10, align 1
  %12 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 2
  %13 = bitcast [8 x float]* %12 to <8 x float>*
  %14 = load <8 x float>, <8 x float>* %13, align 1
  br label %114

15:                                               ; preds = %1
  %16 = bitcast %"struct.(anonymous namespace)::ResolveLevelCounter::SIMDQueue.14"* %2 to i32*
  %17 = load i32, i32* %16, align 4, !noalias !27
  %18 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 0, i64 1
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4, !noalias !27
  %21 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 0, i64 2
  %22 = load float, float* %21, align 4, !noalias !27
  %23 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 0, i64 4
  %24 = bitcast float* %23 to i32*
  %25 = load i32, i32* %24, align 4, !noalias !27
  %26 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 0, i64 5
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4, !noalias !27
  %29 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 0, i64 6
  %30 = load float, float* %29, align 4, !noalias !27
  %31 = zext i32 %20 to i64
  %32 = shl nuw i64 %31, 32
  %33 = zext i32 %17 to i64
  %34 = or i64 %32, %33
  %35 = bitcast i64 %34 to <2 x float>
  %36 = shufflevector <2 x float> %35, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %37 = insertelement <8 x float> %36, float 0.000000e+00, i32 3
  %38 = insertelement <8 x float> %37, float %22, i32 2
  %39 = zext i32 %28 to i64
  %40 = shl nuw i64 %39, 32
  %41 = zext i32 %25 to i64
  %42 = or i64 %40, %41
  %43 = bitcast i64 %42 to <2 x float>
  %44 = shufflevector <2 x float> %43, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %45 = shufflevector <8 x float> %38, <8 x float> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %46 = insertelement <8 x float> %45, float 0.000000e+00, i32 7
  %47 = insertelement <8 x float> %46, float %30, i32 6
  %48 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i64 0
  %49 = bitcast float* %48 to i32*
  %50 = load i32, i32* %49, align 4, !noalias !32
  %51 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i64 1
  %52 = bitcast float* %51 to i32*
  %53 = load i32, i32* %52, align 4, !noalias !32
  %54 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i64 2
  %55 = load float, float* %54, align 4, !noalias !32
  %56 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i64 4
  %57 = bitcast float* %56 to i32*
  %58 = load i32, i32* %57, align 4, !noalias !32
  %59 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i64 5
  %60 = bitcast float* %59 to i32*
  %61 = load i32, i32* %60, align 4, !noalias !32
  %62 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i64 6
  %63 = load float, float* %62, align 4, !noalias !32
  %64 = zext i32 %53 to i64
  %65 = shl nuw i64 %64, 32
  %66 = zext i32 %50 to i64
  %67 = or i64 %65, %66
  %68 = bitcast i64 %67 to <2 x float>
  %69 = shufflevector <2 x float> %68, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = insertelement <8 x float> %69, float 0.000000e+00, i32 3
  %71 = insertelement <8 x float> %70, float %55, i32 2
  %72 = zext i32 %61 to i64
  %73 = shl nuw i64 %72, 32
  %74 = zext i32 %58 to i64
  %75 = or i64 %73, %74
  %76 = bitcast i64 %75 to <2 x float>
  %77 = shufflevector <2 x float> %76, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <8 x float> %71, <8 x float> %77, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %79 = insertelement <8 x float> %78, float 0.000000e+00, i32 7
  %80 = insertelement <8 x float> %79, float %63, i32 6
  %81 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i64 0
  %82 = bitcast float* %81 to i32*
  %83 = load i32, i32* %82, align 4, !noalias !37
  %84 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i64 1
  %85 = bitcast float* %84 to i32*
  %86 = load i32, i32* %85, align 4, !noalias !37
  %87 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i64 2
  %88 = load float, float* %87, align 4, !noalias !37
  %89 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i64 4
  %90 = bitcast float* %89 to i32*
  %91 = load i32, i32* %90, align 4, !noalias !37
  %92 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i64 5
  %93 = bitcast float* %92 to i32*
  %94 = load i32, i32* %93, align 4, !noalias !37
  %95 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i64 6
  %96 = load float, float* %95, align 4, !noalias !37
  %97 = zext i32 %86 to i64
  %98 = shl nuw i64 %97, 32
  %99 = zext i32 %83 to i64
  %100 = or i64 %98, %99
  %101 = bitcast i64 %100 to <2 x float>
  %102 = shufflevector <2 x float> %101, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = insertelement <8 x float> %102, float 0.000000e+00, i32 3
  %104 = insertelement <8 x float> %103, float %88, i32 2
  %105 = zext i32 %94 to i64
  %106 = shl nuw i64 %105, 32
  %107 = zext i32 %91 to i64
  %108 = or i64 %106, %107
  %109 = bitcast i64 %108 to <2 x float>
  %110 = shufflevector <2 x float> %109, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %111 = shufflevector <8 x float> %104, <8 x float> %110, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %112 = insertelement <8 x float> %111, float 0.000000e+00, i32 7
  %113 = insertelement <8 x float> %112, float %96, i32 6
  br label %114

114:                                              ; preds = %6, %15
  %115 = phi <8 x float> [ %11, %6 ], [ %80, %15 ]
  %116 = phi <8 x float> [ %8, %6 ], [ %47, %15 ]
  %117 = phi <8 x float> [ %14, %6 ], [ %113, %15 ]
  %118 = fmul <8 x float> %115, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %119 = fadd <8 x float> %118, %117
  %120 = fadd <8 x float> %116, %119
  %121 = fmul <8 x float> %120, %120
  %122 = shufflevector <8 x float> %121, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %123 = shufflevector <8 x float> %121, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %124 = fadd <4 x float> %122, %123
  %125 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 5
  %126 = load float, float* %125, align 32
  %127 = extractelement <4 x float> %124, i32 0
  %128 = tail call float @sqrtf(float %127) #13
  %129 = extractelement <4 x float> %124, i32 1
  %130 = tail call float @sqrtf(float %129) #13
  %131 = extractelement <4 x float> %124, i32 2
  %132 = tail call float @sqrtf(float %131) #13
  %133 = extractelement <4 x float> %124, i32 3
  %134 = tail call float @sqrtf(float %133) #13
  %135 = insertelement <4 x float> undef, float %128, i32 0
  %136 = insertelement <4 x float> %135, float %130, i32 1
  %137 = insertelement <4 x float> undef, float %132, i32 2
  %138 = insertelement <4 x float> %137, float %134, i32 3
  %139 = shufflevector <4 x float> %136, <4 x float> %138, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %140 = insertelement <4 x float> undef, float %126, i32 0
  %141 = shufflevector <4 x float> %140, <4 x float> undef, <4 x i32> zeroinitializer
  %142 = fmul <4 x float> %141, %139
  %143 = extractelement <4 x float> %142, i32 0
  %144 = tail call float @sqrtf(float %143) #13
  %145 = extractelement <4 x float> %142, i32 1
  %146 = tail call float @sqrtf(float %145) #13
  %147 = extractelement <4 x float> %142, i32 2
  %148 = tail call float @sqrtf(float %147) #13
  %149 = extractelement <4 x float> %142, i32 3
  %150 = tail call float @sqrtf(float %149) #13
  %151 = insertelement <4 x float> undef, float %144, i32 0
  %152 = insertelement <4 x float> %151, float %146, i32 1
  %153 = insertelement <4 x float> undef, float %148, i32 2
  %154 = insertelement <4 x float> %153, float %150, i32 3
  %155 = fsub <8 x float> %115, %116
  %156 = fsub <8 x float> %117, %115
  %157 = fmul <8 x float> %155, %155
  %158 = fmul <8 x float> %156, %156
  %159 = fmul <8 x float> %155, %156
  %160 = shufflevector <8 x float> %159, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %161 = shufflevector <8 x float> %159, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %162 = fadd <4 x float> %160, %161
  %163 = shufflevector <8 x float> %157, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %164 = shufflevector <8 x float> %157, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %165 = fadd <4 x float> %163, %164
  %166 = shufflevector <8 x float> %158, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %167 = shufflevector <8 x float> %158, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %168 = fadd <4 x float> %166, %167
  %169 = fmul <4 x float> %165, %168
  %170 = extractelement <4 x float> %169, i32 0
  %171 = tail call float @sqrtf(float %170) #13
  %172 = extractelement <4 x float> %169, i32 1
  %173 = tail call float @sqrtf(float %172) #13
  %174 = extractelement <4 x float> %169, i32 2
  %175 = tail call float @sqrtf(float %174) #13
  %176 = extractelement <4 x float> %169, i32 3
  %177 = tail call float @sqrtf(float %176) #13
  %178 = insertelement <4 x float> undef, float %171, i32 0
  %179 = insertelement <4 x float> %178, float %173, i32 1
  %180 = insertelement <4 x float> undef, float %175, i32 2
  %181 = insertelement <4 x float> %180, float %177, i32 3
  %182 = shufflevector <4 x float> %179, <4 x float> %181, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %183 = fdiv <4 x float> %162, %182
  %184 = fcmp olt <4 x float> %183, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %185 = sext <4 x i1> %184 to <4 x i32>
  %186 = bitcast <4 x i32> %185 to <2 x i64>
  %187 = extractelement <2 x i64> %186, i32 0
  %188 = extractelement <2 x i64> %186, i32 1
  %189 = bitcast i64 %187 to <2 x i32>
  %190 = shufflevector <2 x i32> %189, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %191 = bitcast i64 %188 to <2 x i32>
  %192 = shufflevector <2 x i32> %191, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %193 = shufflevector <4 x i32> %190, <4 x i32> %192, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %194 = bitcast <4 x float> %183 to <2 x i64>
  %195 = extractelement <2 x i64> %194, i32 0
  %196 = bitcast i64 %195 to <2 x i32>
  %197 = shufflevector <4 x float> %183, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %198 = bitcast <2 x float> %197 to <2 x i32>
  %199 = shufflevector <2 x i32> %196, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %200 = shufflevector <2 x i32> %198, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %201 = shufflevector <4 x i32> %199, <4 x i32> %200, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %202 = and <4 x i32> %193, %201
  %203 = bitcast <4 x i32> %202 to <2 x i64>
  %204 = extractelement <2 x i64> %203, i32 0
  %205 = extractelement <2 x i64> %203, i32 1
  %206 = bitcast i64 %204 to <2 x i32>
  %207 = shufflevector <2 x i32> %206, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %208 = bitcast i64 %205 to <2 x i32>
  %209 = shufflevector <2 x i32> %208, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %210 = shufflevector <4 x i32> %207, <4 x i32> %209, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %211 = bitcast <4 x i32> %193 to <2 x i64>
  %212 = xor <2 x i64> %211, <i64 -1, i64 -1>
  %213 = extractelement <2 x i64> %212, i32 0
  %214 = extractelement <2 x i64> %212, i32 1
  %215 = bitcast i64 %213 to <2 x i32>
  %216 = shufflevector <2 x i32> %215, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %217 = bitcast i64 %214 to <2 x i32>
  %218 = shufflevector <2 x i32> %217, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %219 = shufflevector <4 x i32> %216, <4 x i32> %218, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %220 = bitcast <4 x i32> %219 to <2 x i64>
  %221 = and <2 x i64> %220, <i64 4575657222473777152, i64 4575657222473777152>
  %222 = extractelement <2 x i64> %221, i32 0
  %223 = extractelement <2 x i64> %221, i32 1
  %224 = bitcast i64 %222 to <2 x i32>
  %225 = shufflevector <2 x i32> %224, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %226 = bitcast i64 %223 to <2 x i32>
  %227 = shufflevector <2 x i32> %226, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %228 = shufflevector <4 x i32> %225, <4 x i32> %227, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %229 = or <4 x i32> %228, %210
  %230 = bitcast <4 x i32> %229 to <2 x i64>
  %231 = extractelement <2 x i64> %230, i32 0
  %232 = extractelement <2 x i64> %230, i32 1
  %233 = bitcast i64 %231 to <2 x float>
  %234 = bitcast i64 %232 to <2 x float>
  %235 = shufflevector <2 x float> %233, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %236 = shufflevector <2 x float> %234, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %237 = shufflevector <4 x float> %235, <4 x float> %236, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %238 = fcmp olt <4 x float> %237, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %239 = sext <4 x i1> %238 to <4 x i32>
  %240 = bitcast <4 x i32> %239 to <2 x i64>
  %241 = extractelement <2 x i64> %240, i32 0
  %242 = extractelement <2 x i64> %240, i32 1
  %243 = bitcast i64 %241 to <2 x i32>
  %244 = shufflevector <2 x i32> %243, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %245 = bitcast i64 %242 to <2 x i32>
  %246 = shufflevector <2 x i32> %245, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %247 = shufflevector <4 x i32> %244, <4 x i32> %246, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %248 = bitcast <4 x i32> %247 to <2 x i64>
  %249 = and <2 x i64> %248, <i64 -4647714812233515008, i64 -4647714812233515008>
  %250 = extractelement <2 x i64> %249, i32 0
  %251 = extractelement <2 x i64> %249, i32 1
  %252 = bitcast i64 %250 to <2 x i32>
  %253 = shufflevector <2 x i32> %252, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %254 = bitcast i64 %251 to <2 x i32>
  %255 = shufflevector <2 x i32> %254, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %256 = shufflevector <4 x i32> %253, <4 x i32> %255, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %257 = xor <2 x i64> %248, <i64 -1, i64 -1>
  %258 = extractelement <2 x i64> %257, i32 0
  %259 = extractelement <2 x i64> %257, i32 1
  %260 = bitcast i64 %258 to <2 x i32>
  %261 = shufflevector <2 x i32> %260, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %262 = bitcast i64 %259 to <2 x i32>
  %263 = shufflevector <2 x i32> %262, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %264 = shufflevector <4 x i32> %261, <4 x i32> %263, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %265 = bitcast <4 x float> %237 to <2 x i64>
  %266 = extractelement <2 x i64> %265, i32 0
  %267 = bitcast i64 %266 to <2 x i32>
  %268 = bitcast i64 %232 to <2 x i32>
  %269 = shufflevector <2 x i32> %267, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %270 = shufflevector <2 x i32> %268, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %271 = shufflevector <4 x i32> %269, <4 x i32> %270, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %272 = and <4 x i32> %264, %271
  %273 = bitcast <4 x i32> %272 to <2 x i64>
  %274 = extractelement <2 x i64> %273, i32 0
  %275 = extractelement <2 x i64> %273, i32 1
  %276 = bitcast i64 %274 to <2 x i32>
  %277 = shufflevector <2 x i32> %276, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %278 = bitcast i64 %275 to <2 x i32>
  %279 = shufflevector <2 x i32> %278, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %280 = shufflevector <4 x i32> %277, <4 x i32> %279, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %281 = or <4 x i32> %280, %256
  %282 = bitcast <4 x i32> %281 to <2 x i64>
  %283 = extractelement <2 x i64> %282, i32 0
  %284 = extractelement <2 x i64> %282, i32 1
  %285 = bitcast i64 %283 to <2 x float>
  %286 = bitcast i64 %284 to <2 x float>
  %287 = shufflevector <2 x float> %285, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %288 = shufflevector <2 x float> %286, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %289 = shufflevector <4 x float> %287, <4 x float> %288, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %290 = fmul <4 x float> %289, %289
  %291 = fmul <4 x float> %290, <float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %292 = fadd <4 x float> %291, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %293 = fmul <4 x float> %290, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %294 = fadd <4 x float> %293, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %295 = fmul <4 x float> %290, %294
  %296 = fadd <4 x float> %295, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %297 = fdiv <4 x float> %292, %296
  %298 = fmul <4 x float> %289, %297
  %299 = fadd <4 x float> %298, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %300 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 11
  %301 = load i8, i8* %300, align 4, !range !2
  %302 = icmp eq i8 %301, 0
  br i1 %302, label %613, label %303

303:                                              ; preds = %114
  %304 = load i32, i32* %3, align 32, !noalias !42
  %305 = icmp eq i32 %304, 4
  br i1 %305, label %306, label %310

306:                                              ; preds = %303
  %307 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 1
  %308 = bitcast [8 x float]* %307 to <8 x float>*
  %309 = load <8 x float>, <8 x float>* %308, align 1
  br label %344

310:                                              ; preds = %303
  %311 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 1, i64 0
  %312 = bitcast float* %311 to i32*
  %313 = load i32, i32* %312, align 4, !noalias !42
  %314 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 1, i64 1
  %315 = bitcast float* %314 to i32*
  %316 = load i32, i32* %315, align 4, !noalias !42
  %317 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 1, i64 2
  %318 = load float, float* %317, align 4, !noalias !42
  %319 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 1, i64 4
  %320 = bitcast float* %319 to i32*
  %321 = load i32, i32* %320, align 4, !noalias !42
  %322 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 1, i64 5
  %323 = bitcast float* %322 to i32*
  %324 = load i32, i32* %323, align 4, !noalias !42
  %325 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 0, i32 1, i64 6
  %326 = load float, float* %325, align 4, !noalias !42
  %327 = zext i32 %316 to i64
  %328 = shl nuw i64 %327, 32
  %329 = zext i32 %313 to i64
  %330 = or i64 %328, %329
  %331 = bitcast i64 %330 to <2 x float>
  %332 = shufflevector <2 x float> %331, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %333 = insertelement <8 x float> %332, float 0.000000e+00, i32 3
  %334 = insertelement <8 x float> %333, float %318, i32 2
  %335 = zext i32 %324 to i64
  %336 = shl nuw i64 %335, 32
  %337 = zext i32 %321 to i64
  %338 = or i64 %336, %337
  %339 = bitcast i64 %338 to <2 x float>
  %340 = shufflevector <2 x float> %339, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %341 = shufflevector <8 x float> %334, <8 x float> %340, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %342 = insertelement <8 x float> %341, float 0.000000e+00, i32 7
  %343 = insertelement <8 x float> %342, float %326, i32 6
  br label %344

344:                                              ; preds = %306, %310
  %345 = phi <8 x float> [ %309, %306 ], [ %343, %310 ]
  %346 = fcmp oeq <8 x float> %155, zeroinitializer
  %347 = sext <8 x i1> %346 to <8 x i32>
  %348 = shufflevector <8 x i32> %347, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %349 = shufflevector <8 x i32> %347, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %350 = and <4 x i32> %349, %348
  %351 = bitcast <4 x i32> %350 to <2 x i64>
  %352 = extractelement <2 x i64> %351, i32 0
  %353 = extractelement <2 x i64> %351, i32 1
  %354 = bitcast i64 %352 to <2 x i32>
  %355 = shufflevector <2 x i32> %354, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %356 = bitcast i64 %353 to <2 x i32>
  %357 = shufflevector <2 x i32> %356, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %358 = shufflevector <4 x i32> %355, <4 x i32> %357, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %359 = shufflevector <8 x float> %156, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %360 = bitcast <2 x float> %359 to <2 x i32>
  %361 = shufflevector <8 x float> %156, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %362 = bitcast <2 x float> %361 to <2 x i32>
  %363 = shufflevector <2 x i32> %360, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %364 = shufflevector <2 x i32> %362, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %365 = shufflevector <4 x i32> %363, <4 x i32> %364, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %366 = and <4 x i32> %358, %365
  %367 = bitcast <4 x i32> %366 to <2 x i64>
  %368 = extractelement <2 x i64> %367, i32 0
  %369 = extractelement <2 x i64> %367, i32 1
  %370 = bitcast i64 %368 to <2 x i32>
  %371 = shufflevector <2 x i32> %370, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %372 = bitcast i64 %369 to <2 x i32>
  %373 = shufflevector <2 x i32> %372, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %374 = shufflevector <4 x i32> %371, <4 x i32> %373, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %375 = bitcast <4 x i32> %358 to <2 x i64>
  %376 = xor <2 x i64> %375, <i64 -1, i64 -1>
  %377 = extractelement <2 x i64> %376, i32 0
  %378 = extractelement <2 x i64> %376, i32 1
  %379 = bitcast i64 %377 to <2 x i32>
  %380 = shufflevector <2 x i32> %379, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %381 = bitcast i64 %378 to <2 x i32>
  %382 = shufflevector <2 x i32> %381, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %383 = shufflevector <4 x i32> %380, <4 x i32> %382, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %384 = shufflevector <8 x float> %155, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %385 = bitcast <2 x float> %384 to <2 x i32>
  %386 = shufflevector <8 x float> %155, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %387 = bitcast <2 x float> %386 to <2 x i32>
  %388 = shufflevector <2 x i32> %385, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %389 = shufflevector <2 x i32> %387, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %390 = shufflevector <4 x i32> %388, <4 x i32> %389, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %391 = and <4 x i32> %383, %390
  %392 = bitcast <4 x i32> %391 to <2 x i64>
  %393 = extractelement <2 x i64> %392, i32 0
  %394 = extractelement <2 x i64> %392, i32 1
  %395 = bitcast i64 %393 to <2 x i32>
  %396 = shufflevector <2 x i32> %395, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %397 = bitcast i64 %394 to <2 x i32>
  %398 = shufflevector <2 x i32> %397, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %399 = shufflevector <4 x i32> %396, <4 x i32> %398, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %400 = or <4 x i32> %399, %374
  %401 = bitcast <4 x i32> %400 to <2 x i64>
  %402 = extractelement <2 x i64> %401, i32 0
  %403 = extractelement <2 x i64> %401, i32 1
  %404 = shufflevector <8 x float> %156, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %405 = bitcast <2 x float> %404 to <2 x i32>
  %406 = shufflevector <8 x float> %156, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %407 = bitcast <2 x float> %406 to <2 x i32>
  %408 = shufflevector <2 x i32> %405, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %409 = shufflevector <2 x i32> %407, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %410 = shufflevector <4 x i32> %408, <4 x i32> %409, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %411 = and <4 x i32> %358, %410
  %412 = bitcast <4 x i32> %411 to <2 x i64>
  %413 = extractelement <2 x i64> %412, i32 0
  %414 = extractelement <2 x i64> %412, i32 1
  %415 = bitcast i64 %413 to <2 x i32>
  %416 = shufflevector <2 x i32> %415, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %417 = bitcast i64 %414 to <2 x i32>
  %418 = shufflevector <2 x i32> %417, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %419 = shufflevector <4 x i32> %416, <4 x i32> %418, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %420 = shufflevector <8 x float> %155, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %421 = bitcast <2 x float> %420 to <2 x i32>
  %422 = shufflevector <8 x float> %155, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %423 = bitcast <2 x float> %422 to <2 x i32>
  %424 = shufflevector <2 x i32> %421, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %425 = shufflevector <2 x i32> %423, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %426 = shufflevector <4 x i32> %424, <4 x i32> %425, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %427 = and <4 x i32> %383, %426
  %428 = bitcast <4 x i32> %427 to <2 x i64>
  %429 = extractelement <2 x i64> %428, i32 0
  %430 = extractelement <2 x i64> %428, i32 1
  %431 = bitcast i64 %429 to <2 x i32>
  %432 = shufflevector <2 x i32> %431, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %433 = bitcast i64 %430 to <2 x i32>
  %434 = shufflevector <2 x i32> %433, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %435 = shufflevector <4 x i32> %432, <4 x i32> %434, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %436 = or <4 x i32> %435, %419
  %437 = bitcast <4 x i32> %436 to <2 x i64>
  %438 = extractelement <2 x i64> %437, i32 0
  %439 = extractelement <2 x i64> %437, i32 1
  %440 = trunc i64 %402 to i32
  %441 = lshr i64 %402, 32
  %442 = trunc i64 %441 to i32
  %443 = trunc i64 %403 to i32
  %444 = lshr i64 %403, 32
  %445 = trunc i64 %444 to i32
  %446 = trunc i64 %438 to i32
  %447 = lshr i64 %438, 32
  %448 = trunc i64 %447 to i32
  %449 = trunc i64 %439 to i32
  %450 = lshr i64 %439, 32
  %451 = trunc i64 %450 to i32
  %452 = fsub <8 x float> %116, %345
  %453 = bitcast i32 %440 to float
  %454 = insertelement <8 x float> undef, float %453, i32 0
  %455 = bitcast i32 %442 to float
  %456 = insertelement <8 x float> %454, float %455, i32 1
  %457 = bitcast i32 %443 to float
  %458 = insertelement <8 x float> %456, float %457, i32 2
  %459 = bitcast i32 %445 to float
  %460 = insertelement <8 x float> %458, float %459, i32 3
  %461 = bitcast i32 %446 to float
  %462 = insertelement <8 x float> %460, float %461, i32 4
  %463 = bitcast i32 %448 to float
  %464 = insertelement <8 x float> %462, float %463, i32 5
  %465 = bitcast i32 %449 to float
  %466 = insertelement <8 x float> %464, float %465, i32 6
  %467 = bitcast i32 %451 to float
  %468 = insertelement <8 x float> %466, float %467, i32 7
  %469 = fmul <8 x float> %452, %452
  %470 = fmul <8 x float> %468, %468
  %471 = fmul <8 x float> %468, %452
  %472 = shufflevector <8 x float> %471, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %473 = shufflevector <8 x float> %471, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %474 = fadd <4 x float> %472, %473
  %475 = shufflevector <8 x float> %469, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %476 = shufflevector <8 x float> %469, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %477 = fadd <4 x float> %475, %476
  %478 = shufflevector <8 x float> %470, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %479 = shufflevector <8 x float> %470, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %480 = fadd <4 x float> %478, %479
  %481 = fmul <4 x float> %480, %477
  %482 = extractelement <4 x float> %481, i32 0
  %483 = tail call float @sqrtf(float %482) #13
  %484 = extractelement <4 x float> %481, i32 1
  %485 = tail call float @sqrtf(float %484) #13
  %486 = extractelement <4 x float> %481, i32 2
  %487 = tail call float @sqrtf(float %486) #13
  %488 = extractelement <4 x float> %481, i32 3
  %489 = tail call float @sqrtf(float %488) #13
  %490 = insertelement <4 x float> undef, float %483, i32 0
  %491 = insertelement <4 x float> %490, float %485, i32 1
  %492 = insertelement <4 x float> undef, float %487, i32 2
  %493 = insertelement <4 x float> %492, float %489, i32 3
  %494 = shufflevector <4 x float> %491, <4 x float> %493, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %495 = fdiv <4 x float> %474, %494
  %496 = fcmp olt <4 x float> %495, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %497 = sext <4 x i1> %496 to <4 x i32>
  %498 = bitcast <4 x i32> %497 to <2 x i64>
  %499 = extractelement <2 x i64> %498, i32 0
  %500 = extractelement <2 x i64> %498, i32 1
  %501 = bitcast i64 %499 to <2 x i32>
  %502 = shufflevector <2 x i32> %501, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %503 = bitcast i64 %500 to <2 x i32>
  %504 = shufflevector <2 x i32> %503, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %505 = shufflevector <4 x i32> %502, <4 x i32> %504, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %506 = bitcast <4 x float> %495 to <2 x i64>
  %507 = extractelement <2 x i64> %506, i32 0
  %508 = bitcast i64 %507 to <2 x i32>
  %509 = shufflevector <4 x float> %495, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %510 = bitcast <2 x float> %509 to <2 x i32>
  %511 = shufflevector <2 x i32> %508, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %512 = shufflevector <2 x i32> %510, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %513 = shufflevector <4 x i32> %511, <4 x i32> %512, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %514 = and <4 x i32> %505, %513
  %515 = bitcast <4 x i32> %514 to <2 x i64>
  %516 = extractelement <2 x i64> %515, i32 0
  %517 = extractelement <2 x i64> %515, i32 1
  %518 = bitcast i64 %516 to <2 x i32>
  %519 = shufflevector <2 x i32> %518, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %520 = bitcast i64 %517 to <2 x i32>
  %521 = shufflevector <2 x i32> %520, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %522 = shufflevector <4 x i32> %519, <4 x i32> %521, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %523 = bitcast <4 x i32> %505 to <2 x i64>
  %524 = xor <2 x i64> %523, <i64 -1, i64 -1>
  %525 = extractelement <2 x i64> %524, i32 0
  %526 = extractelement <2 x i64> %524, i32 1
  %527 = bitcast i64 %525 to <2 x i32>
  %528 = shufflevector <2 x i32> %527, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %529 = bitcast i64 %526 to <2 x i32>
  %530 = shufflevector <2 x i32> %529, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %531 = shufflevector <4 x i32> %528, <4 x i32> %530, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %532 = bitcast <4 x i32> %531 to <2 x i64>
  %533 = and <2 x i64> %532, <i64 4575657222473777152, i64 4575657222473777152>
  %534 = extractelement <2 x i64> %533, i32 0
  %535 = extractelement <2 x i64> %533, i32 1
  %536 = bitcast i64 %534 to <2 x i32>
  %537 = shufflevector <2 x i32> %536, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %538 = bitcast i64 %535 to <2 x i32>
  %539 = shufflevector <2 x i32> %538, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %540 = shufflevector <4 x i32> %537, <4 x i32> %539, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %541 = or <4 x i32> %540, %522
  %542 = bitcast <4 x i32> %541 to <2 x i64>
  %543 = extractelement <2 x i64> %542, i32 0
  %544 = extractelement <2 x i64> %542, i32 1
  %545 = bitcast i64 %543 to <2 x float>
  %546 = bitcast i64 %544 to <2 x float>
  %547 = shufflevector <2 x float> %545, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %548 = shufflevector <2 x float> %546, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %549 = shufflevector <4 x float> %547, <4 x float> %548, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %550 = fcmp olt <4 x float> %549, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %551 = sext <4 x i1> %550 to <4 x i32>
  %552 = bitcast <4 x i32> %551 to <2 x i64>
  %553 = extractelement <2 x i64> %552, i32 0
  %554 = extractelement <2 x i64> %552, i32 1
  %555 = bitcast i64 %553 to <2 x i32>
  %556 = shufflevector <2 x i32> %555, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %557 = bitcast i64 %554 to <2 x i32>
  %558 = shufflevector <2 x i32> %557, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %559 = shufflevector <4 x i32> %556, <4 x i32> %558, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %560 = bitcast <4 x i32> %559 to <2 x i64>
  %561 = and <2 x i64> %560, <i64 -4647714812233515008, i64 -4647714812233515008>
  %562 = extractelement <2 x i64> %561, i32 0
  %563 = extractelement <2 x i64> %561, i32 1
  %564 = bitcast i64 %562 to <2 x i32>
  %565 = shufflevector <2 x i32> %564, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %566 = bitcast i64 %563 to <2 x i32>
  %567 = shufflevector <2 x i32> %566, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %568 = shufflevector <4 x i32> %565, <4 x i32> %567, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %569 = xor <2 x i64> %560, <i64 -1, i64 -1>
  %570 = extractelement <2 x i64> %569, i32 0
  %571 = extractelement <2 x i64> %569, i32 1
  %572 = bitcast i64 %570 to <2 x i32>
  %573 = shufflevector <2 x i32> %572, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %574 = bitcast i64 %571 to <2 x i32>
  %575 = shufflevector <2 x i32> %574, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %576 = shufflevector <4 x i32> %573, <4 x i32> %575, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %577 = bitcast <4 x float> %549 to <2 x i64>
  %578 = extractelement <2 x i64> %577, i32 0
  %579 = bitcast i64 %578 to <2 x i32>
  %580 = bitcast i64 %544 to <2 x i32>
  %581 = shufflevector <2 x i32> %579, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %582 = shufflevector <2 x i32> %580, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %583 = shufflevector <4 x i32> %581, <4 x i32> %582, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %584 = and <4 x i32> %576, %583
  %585 = bitcast <4 x i32> %584 to <2 x i64>
  %586 = extractelement <2 x i64> %585, i32 0
  %587 = extractelement <2 x i64> %585, i32 1
  %588 = bitcast i64 %586 to <2 x i32>
  %589 = shufflevector <2 x i32> %588, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %590 = bitcast i64 %587 to <2 x i32>
  %591 = shufflevector <2 x i32> %590, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %592 = shufflevector <4 x i32> %589, <4 x i32> %591, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %593 = or <4 x i32> %592, %568
  %594 = bitcast <4 x i32> %593 to <2 x i64>
  %595 = extractelement <2 x i64> %594, i32 0
  %596 = extractelement <2 x i64> %594, i32 1
  %597 = bitcast i64 %595 to <2 x float>
  %598 = bitcast i64 %596 to <2 x float>
  %599 = shufflevector <2 x float> %597, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %600 = shufflevector <2 x float> %598, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %601 = shufflevector <4 x float> %599, <4 x float> %600, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %602 = fmul <4 x float> %601, %601
  %603 = fmul <4 x float> %602, <float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %604 = fadd <4 x float> %603, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %605 = fmul <4 x float> %602, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %606 = fadd <4 x float> %605, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %607 = fmul <4 x float> %602, %606
  %608 = fadd <4 x float> %607, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %609 = fdiv <4 x float> %604, %608
  %610 = fmul <4 x float> %601, %609
  %611 = fadd <4 x float> %610, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %612 = fadd <4 x float> %299, %611
  br label %613

613:                                              ; preds = %114, %344
  %614 = phi <4 x float> [ %299, %114 ], [ %612, %344 ]
  %615 = load i32, i32* %3, align 32
  %616 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 1, i64 0
  %617 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 9, i32 1
  %618 = load float, float* %617, align 4
  %619 = insertelement <2 x float> undef, float %618, i32 0
  %620 = shufflevector <2 x float> %619, <2 x float> undef, <4 x i32> zeroinitializer
  %621 = shufflevector <4 x float> %152, <4 x float> %154, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %622 = fmul <4 x float> %614, %620
  %623 = fadd <4 x float> %621, %622
  %624 = bitcast <4 x float> %623 to <2 x i64>
  %625 = extractelement <2 x i64> %624, i32 0
  %626 = extractelement <2 x i64> %624, i32 1
  %627 = bitcast i64 %625 to <2 x i32>
  %628 = shufflevector <2 x i32> %627, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %629 = bitcast i64 %626 to <2 x i32>
  %630 = shufflevector <2 x i32> %629, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %631 = shufflevector <4 x i32> %628, <4 x i32> %630, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %632 = add <4 x i32> %631, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %633 = bitcast <4 x i32> %632 to <2 x i64>
  %634 = extractelement <2 x i64> %633, i32 0
  %635 = extractelement <2 x i64> %633, i32 1
  %636 = bitcast i64 %634 to <2 x i32>
  %637 = bitcast i64 %635 to <2 x i32>
  %638 = shufflevector <2 x i32> %636, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %639 = shufflevector <2 x i32> %637, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %640 = shufflevector <4 x i32> %638, <4 x i32> %639, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %641 = ashr <4 x i32> %640, <i32 23, i32 23, i32 23, i32 23>
  %642 = bitcast <4 x i32> %641 to <2 x i64>
  %643 = extractelement <2 x i64> %642, i32 0
  %644 = extractelement <2 x i64> %642, i32 1
  %645 = bitcast i64 %643 to <2 x i32>
  %646 = shufflevector <2 x i32> %645, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %647 = bitcast i64 %644 to <2 x i32>
  %648 = shufflevector <2 x i32> %647, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %649 = shufflevector <4 x i32> %646, <4 x i32> %648, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %650 = add <4 x i32> %649, <i32 -127, i32 -127, i32 -127, i32 -127>
  %651 = bitcast <4 x i32> %650 to <2 x i64>
  %652 = extractelement <2 x i64> %651, i32 0
  %653 = extractelement <2 x i64> %651, i32 1
  %654 = bitcast i64 %652 to <2 x i32>
  %655 = shufflevector <2 x i32> %654, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %656 = bitcast i64 %653 to <2 x i32>
  %657 = shufflevector <2 x i32> %656, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %658 = shufflevector <4 x i32> %655, <4 x i32> %657, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %659 = icmp sgt <4 x i32> %658, <i32 15, i32 15, i32 15, i32 15>
  %660 = sext <4 x i1> %659 to <4 x i32>
  %661 = bitcast <4 x i32> %660 to <2 x i64>
  %662 = extractelement <2 x i64> %661, i32 0
  %663 = extractelement <2 x i64> %661, i32 1
  %664 = bitcast i64 %662 to <2 x i32>
  %665 = shufflevector <2 x i32> %664, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %666 = bitcast i64 %663 to <2 x i32>
  %667 = shufflevector <2 x i32> %666, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %668 = shufflevector <4 x i32> %665, <4 x i32> %667, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %669 = bitcast <4 x i32> %668 to <2 x i64>
  %670 = and <2 x i64> %669, <i64 64424509455, i64 64424509455>
  %671 = extractelement <2 x i64> %670, i32 0
  %672 = extractelement <2 x i64> %670, i32 1
  %673 = bitcast i64 %671 to <2 x i32>
  %674 = shufflevector <2 x i32> %673, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %675 = bitcast i64 %672 to <2 x i32>
  %676 = shufflevector <2 x i32> %675, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %677 = shufflevector <4 x i32> %674, <4 x i32> %676, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %678 = xor <2 x i64> %669, <i64 -1, i64 -1>
  %679 = extractelement <2 x i64> %678, i32 0
  %680 = extractelement <2 x i64> %678, i32 1
  %681 = bitcast i64 %679 to <2 x i32>
  %682 = shufflevector <2 x i32> %681, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %683 = bitcast i64 %680 to <2 x i32>
  %684 = shufflevector <2 x i32> %683, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %685 = shufflevector <4 x i32> %682, <4 x i32> %684, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %686 = bitcast <4 x i32> %658 to <2 x i64>
  %687 = extractelement <2 x i64> %686, i32 0
  %688 = bitcast i64 %687 to <2 x i32>
  %689 = shufflevector <2 x i32> %688, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %690 = shufflevector <4 x i32> %689, <4 x i32> %657, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %691 = and <4 x i32> %685, %690
  %692 = bitcast <4 x i32> %691 to <2 x i64>
  %693 = extractelement <2 x i64> %692, i32 0
  %694 = extractelement <2 x i64> %692, i32 1
  %695 = bitcast i64 %693 to <2 x i32>
  %696 = shufflevector <2 x i32> %695, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %697 = bitcast i64 %694 to <2 x i32>
  %698 = shufflevector <2 x i32> %697, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %699 = shufflevector <4 x i32> %696, <4 x i32> %698, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %700 = or <4 x i32> %699, %677
  %701 = bitcast <4 x i32> %700 to <2 x i64>
  %702 = extractelement <2 x i64> %701, i32 0
  %703 = extractelement <2 x i64> %701, i32 1
  %704 = bitcast i64 %702 to <2 x i32>
  %705 = shufflevector <2 x i32> %704, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %706 = bitcast i64 %703 to <2 x i32>
  %707 = shufflevector <2 x i32> %706, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %708 = shufflevector <4 x i32> %705, <4 x i32> %707, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %709 = icmp sgt <4 x i32> %708, zeroinitializer
  %710 = sext <4 x i1> %709 to <4 x i32>
  %711 = bitcast <4 x i32> %710 to <2 x i64>
  %712 = extractelement <2 x i64> %711, i32 0
  %713 = extractelement <2 x i64> %711, i32 1
  %714 = bitcast i64 %712 to <2 x i32>
  %715 = shufflevector <2 x i32> %714, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %716 = bitcast i64 %713 to <2 x i32>
  %717 = shufflevector <2 x i32> %716, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %718 = shufflevector <4 x i32> %715, <4 x i32> %717, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %719 = bitcast <4 x i32> %708 to <2 x i64>
  %720 = extractelement <2 x i64> %719, i32 0
  %721 = bitcast i64 %720 to <2 x i32>
  %722 = shufflevector <2 x i32> %721, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %723 = shufflevector <4 x i32> %722, <4 x i32> %707, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %724 = and <4 x i32> %718, %723
  %725 = bitcast <4 x i32> %724 to <2 x i64>
  %726 = extractelement <2 x i64> %725, i32 0
  %727 = extractelement <2 x i64> %725, i32 1
  %728 = bitcast i64 %726 to <2 x i32>
  %729 = shufflevector <2 x i32> %728, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %730 = bitcast i64 %727 to <2 x i32>
  %731 = shufflevector <2 x i32> %730, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %732 = shufflevector <4 x i32> %729, <4 x i32> %731, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %733 = bitcast <4 x i32> %732 to <2 x i64>
  %734 = extractelement <2 x i64> %733, i32 0
  %735 = extractelement <2 x i64> %733, i32 1
  %736 = lshr i64 %734, 32
  switch i32 %615, label %737 [
    i32 4, label %738
    i32 3, label %750
    i32 2, label %761
    i32 1, label %772
  ]

737:                                              ; preds = %613
  tail call void @llvm.trap() #13
  unreachable

738:                                              ; preds = %613
  %739 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %740 = load i32*, i32** %739, align 8
  %741 = lshr i64 %735, 32
  %742 = trunc i64 %741 to i8
  %743 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 1, i64 3
  %744 = load i8*, i8** %743, align 8
  store i8 %742, i8* %744, align 1
  %745 = shl i64 %741, 56
  %746 = ashr exact i64 %745, 56
  %747 = getelementptr inbounds i32, i32* %740, i64 %746
  %748 = load i32, i32* %747, align 4
  %749 = add nsw i32 %748, 1
  store i32 %749, i32* %747, align 4
  br label %750

750:                                              ; preds = %613, %738
  %751 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %752 = load i32*, i32** %751, align 8
  %753 = trunc i64 %735 to i8
  %754 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 1, i64 2
  %755 = load i8*, i8** %754, align 8
  store i8 %753, i8* %755, align 1
  %756 = shl i64 %735, 56
  %757 = ashr exact i64 %756, 56
  %758 = getelementptr inbounds i32, i32* %752, i64 %757
  %759 = load i32, i32* %758, align 4
  %760 = add nsw i32 %759, 1
  store i32 %760, i32* %758, align 4
  br label %761

761:                                              ; preds = %613, %750
  %762 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %763 = load i32*, i32** %762, align 8
  %764 = trunc i64 %736 to i8
  %765 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 1, i32 1, i64 1
  %766 = load i8*, i8** %765, align 8
  store i8 %764, i8* %766, align 1
  %767 = shl i64 %736, 56
  %768 = ashr exact i64 %767, 56
  %769 = getelementptr inbounds i32, i32* %763, i64 %768
  %770 = load i32, i32* %769, align 4
  %771 = add nsw i32 %770, 1
  store i32 %771, i32* %769, align 4
  br label %772

772:                                              ; preds = %613, %761
  %773 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %774 = load i32*, i32** %773, align 8
  %775 = trunc i64 %734 to i8
  %776 = load i8*, i8** %616, align 8
  store i8 %775, i8* %776, align 1
  %777 = shl i64 %734, 56
  %778 = ashr exact i64 %777, 56
  %779 = getelementptr inbounds i32, i32* %774, i64 %778
  %780 = load i32, i32* %779, align 4
  %781 = add nsw i32 %780, 1
  store i32 %781, i32* %779, align 4
  store i32 0, i32* %3, align 32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter11flushCubicsILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"*) unnamed_addr #10 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 2
  %3 = load i32, i32* %2, align 32, !noalias !47
  %4 = icmp eq i32 %3, 4
  br i1 %4, label %5, label %28

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 0, i64 3
  %7 = load float, float* %6, align 1
  %8 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 0, i64 7
  %9 = load float, float* %8, align 1
  %10 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 1
  %11 = bitcast [8 x float]* %10 to i32*
  %12 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 1, i64 3
  %13 = load float, float* %12, align 1
  %14 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 1, i64 7
  %15 = load float, float* %14, align 1
  %16 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 2
  %17 = bitcast [8 x float]* %16 to i32*
  %18 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 2, i64 3
  %19 = load float, float* %18, align 1
  %20 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 2, i64 7
  %21 = load float, float* %20, align 1
  %22 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 3
  %23 = bitcast [8 x float]* %22 to i32*
  %24 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 3, i64 3
  %25 = load float, float* %24, align 1
  %26 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 3, i64 7
  %27 = load float, float* %26, align 1
  br label %35

28:                                               ; preds = %1
  %29 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 1, i64 0
  %30 = bitcast float* %29 to i32*
  %31 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 2, i64 0
  %32 = bitcast float* %31 to i32*
  %33 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 3, i64 0
  %34 = bitcast float* %33 to i32*
  br label %35

35:                                               ; preds = %5, %28
  %36 = phi float [ %19, %5 ], [ 0.000000e+00, %28 ]
  %37 = phi float [ %21, %5 ], [ 0.000000e+00, %28 ]
  %38 = phi i32* [ %17, %5 ], [ %32, %28 ]
  %39 = phi float [ %9, %5 ], [ 0.000000e+00, %28 ]
  %40 = phi float [ %7, %5 ], [ 0.000000e+00, %28 ]
  %41 = phi float [ %15, %5 ], [ 0.000000e+00, %28 ]
  %42 = phi float [ %13, %5 ], [ 0.000000e+00, %28 ]
  %43 = phi i32* [ %11, %5 ], [ %30, %28 ]
  %44 = phi i32* [ %23, %5 ], [ %34, %28 ]
  %45 = phi float [ %27, %5 ], [ 0.000000e+00, %28 ]
  %46 = phi float [ %25, %5 ], [ 0.000000e+00, %28 ]
  %47 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 3, i64 2
  %48 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 3, i64 6
  %49 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 3, i64 4
  %50 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 3, i64 5
  %51 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 3, i64 1
  %52 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 1, i64 1
  %53 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 1, i64 5
  %54 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 1, i64 4
  %55 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 1, i64 2
  %56 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 1, i64 6
  %57 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 0, i64 2
  %58 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 0, i64 6
  %59 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 0, i64 4
  %60 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 0, i64 5
  %61 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 2, i64 1
  %62 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 2, i64 5
  %63 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 2, i64 4
  %64 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 2, i64 6
  %65 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 2, i64 2
  %66 = load float, float* %47, align 1
  %67 = load float, float* %48, align 1
  %68 = load float, float* %49, align 1
  %69 = load float, float* %50, align 1
  %70 = bitcast i32* %44 to float*
  %71 = load float, float* %70, align 1
  %72 = load float, float* %51, align 1
  %73 = load float, float* %52, align 1
  %74 = bitcast i32* %43 to float*
  %75 = load float, float* %74, align 1
  %76 = load float, float* %53, align 1
  %77 = load float, float* %54, align 1
  %78 = load float, float* %55, align 1
  %79 = load float, float* %56, align 1
  %80 = load float, float* %57, align 1
  %81 = load float, float* %58, align 1
  %82 = load float, float* %59, align 1
  %83 = load float, float* %60, align 1
  %84 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 0, i64 0, i64 0
  %85 = bitcast float* %84 to <2 x float>*
  %86 = load <2 x float>, <2 x float>* %85, align 1
  %87 = load float, float* %61, align 1
  %88 = bitcast i32* %38 to float*
  %89 = load float, float* %88, align 1
  %90 = load float, float* %62, align 1
  %91 = load float, float* %63, align 1
  %92 = load float, float* %64, align 1
  %93 = load float, float* %65, align 1
  %94 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 11
  %95 = load i8, i8* %94, align 4, !range !2
  %96 = icmp eq i8 %95, 0
  %97 = insertelement <8 x float> undef, float %71, i32 0
  %98 = insertelement <8 x float> %97, float %72, i32 1
  %99 = insertelement <8 x float> %98, float %66, i32 2
  %100 = insertelement <8 x float> %99, float %46, i32 3
  %101 = insertelement <8 x float> %100, float %68, i32 4
  %102 = insertelement <8 x float> %101, float %69, i32 5
  %103 = insertelement <8 x float> %102, float %67, i32 6
  %104 = insertelement <8 x float> %103, float %45, i32 7
  %105 = insertelement <8 x float> undef, float %89, i32 0
  %106 = insertelement <8 x float> %105, float %87, i32 1
  %107 = insertelement <8 x float> %106, float %93, i32 2
  %108 = insertelement <8 x float> %107, float %36, i32 3
  %109 = insertelement <8 x float> %108, float %91, i32 4
  %110 = insertelement <8 x float> %109, float %90, i32 5
  %111 = insertelement <8 x float> %110, float %92, i32 6
  %112 = insertelement <8 x float> %111, float %37, i32 7
  %113 = insertelement <8 x float> undef, float %75, i32 0
  %114 = insertelement <8 x float> %113, float %73, i32 1
  %115 = insertelement <8 x float> %114, float %78, i32 2
  %116 = insertelement <8 x float> %115, float %42, i32 3
  %117 = insertelement <8 x float> %116, float %77, i32 4
  %118 = insertelement <8 x float> %117, float %76, i32 5
  %119 = insertelement <8 x float> %118, float %79, i32 6
  %120 = insertelement <8 x float> %119, float %41, i32 7
  %121 = extractelement <2 x float> %86, i32 0
  %122 = insertelement <8 x float> undef, float %121, i32 0
  %123 = extractelement <2 x float> %86, i32 1
  %124 = insertelement <8 x float> %122, float %123, i32 1
  %125 = insertelement <8 x float> %124, float %80, i32 2
  %126 = insertelement <8 x float> %125, float %40, i32 3
  %127 = insertelement <8 x float> %126, float %82, i32 4
  %128 = insertelement <8 x float> %127, float %83, i32 5
  %129 = insertelement <8 x float> %128, float %81, i32 6
  %130 = insertelement <8 x float> %129, float %39, i32 7
  %131 = fmul <8 x float> %120, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %132 = fadd <8 x float> %131, %112
  %133 = fadd <8 x float> %130, %132
  %134 = fmul <8 x float> %133, %133
  %135 = shufflevector <8 x float> %134, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %136 = shufflevector <8 x float> %134, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %137 = fadd <4 x float> %135, %136
  %138 = fmul <8 x float> %112, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %139 = fadd <8 x float> %104, %138
  %140 = fadd <8 x float> %120, %139
  %141 = fmul <8 x float> %140, %140
  %142 = shufflevector <8 x float> %141, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %143 = shufflevector <8 x float> %141, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %144 = fadd <4 x float> %142, %143
  %145 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 6
  %146 = load float, float* %145, align 4
  %147 = fcmp olt <4 x float> %137, %144
  %148 = sext <4 x i1> %147 to <4 x i32>
  %149 = bitcast <4 x i32> %148 to <2 x i64>
  %150 = extractelement <2 x i64> %149, i32 0
  %151 = extractelement <2 x i64> %149, i32 1
  %152 = bitcast i64 %150 to <2 x i32>
  %153 = shufflevector <2 x i32> %152, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %154 = bitcast i64 %151 to <2 x i32>
  %155 = shufflevector <2 x i32> %154, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %156 = shufflevector <4 x i32> %153, <4 x i32> %155, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %157 = bitcast <4 x float> %144 to <2 x i64>
  %158 = extractelement <2 x i64> %157, i32 0
  %159 = bitcast i64 %158 to <2 x i32>
  %160 = shufflevector <4 x float> %144, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %161 = bitcast <2 x float> %160 to <2 x i32>
  %162 = shufflevector <2 x i32> %159, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %163 = shufflevector <2 x i32> %161, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %164 = shufflevector <4 x i32> %162, <4 x i32> %163, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %165 = and <4 x i32> %156, %164
  %166 = bitcast <4 x i32> %165 to <2 x i64>
  %167 = extractelement <2 x i64> %166, i32 0
  %168 = extractelement <2 x i64> %166, i32 1
  %169 = bitcast i64 %167 to <2 x i32>
  %170 = shufflevector <2 x i32> %169, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %171 = bitcast i64 %168 to <2 x i32>
  %172 = shufflevector <2 x i32> %171, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %173 = shufflevector <4 x i32> %170, <4 x i32> %172, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %174 = bitcast <4 x i32> %156 to <2 x i64>
  %175 = xor <2 x i64> %174, <i64 -1, i64 -1>
  %176 = extractelement <2 x i64> %175, i32 0
  %177 = extractelement <2 x i64> %175, i32 1
  %178 = bitcast i64 %176 to <2 x i32>
  %179 = shufflevector <2 x i32> %178, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %180 = bitcast i64 %177 to <2 x i32>
  %181 = shufflevector <2 x i32> %180, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %182 = shufflevector <4 x i32> %179, <4 x i32> %181, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %183 = bitcast <4 x float> %137 to <2 x i64>
  %184 = extractelement <2 x i64> %183, i32 0
  %185 = bitcast i64 %184 to <2 x i32>
  %186 = shufflevector <4 x float> %137, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %187 = bitcast <2 x float> %186 to <2 x i32>
  %188 = shufflevector <2 x i32> %185, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %189 = shufflevector <2 x i32> %187, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %190 = shufflevector <4 x i32> %188, <4 x i32> %189, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %191 = and <4 x i32> %182, %190
  %192 = bitcast <4 x i32> %191 to <2 x i64>
  %193 = extractelement <2 x i64> %192, i32 0
  %194 = extractelement <2 x i64> %192, i32 1
  %195 = bitcast i64 %193 to <2 x i32>
  %196 = shufflevector <2 x i32> %195, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %197 = bitcast i64 %194 to <2 x i32>
  %198 = shufflevector <2 x i32> %197, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %199 = shufflevector <4 x i32> %196, <4 x i32> %198, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %200 = or <4 x i32> %199, %173
  %201 = bitcast <4 x i32> %200 to <2 x i64>
  %202 = extractelement <2 x i64> %201, i32 0
  %203 = extractelement <2 x i64> %201, i32 1
  %204 = bitcast i64 %202 to <2 x float>
  %205 = bitcast i64 %203 to <2 x float>
  %206 = extractelement <2 x float> %204, i32 0
  %207 = tail call float @sqrtf(float %206) #13
  %208 = extractelement <2 x float> %204, i32 1
  %209 = tail call float @sqrtf(float %208) #13
  %210 = extractelement <2 x float> %205, i32 0
  %211 = tail call float @sqrtf(float %210) #13
  %212 = extractelement <2 x float> %205, i32 1
  %213 = tail call float @sqrtf(float %212) #13
  %214 = insertelement <4 x float> undef, float %207, i32 0
  %215 = insertelement <4 x float> %214, float %209, i32 1
  %216 = insertelement <4 x float> undef, float %211, i32 2
  %217 = insertelement <4 x float> %216, float %213, i32 3
  %218 = shufflevector <4 x float> %215, <4 x float> %217, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %219 = insertelement <4 x float> undef, float %146, i32 0
  %220 = shufflevector <4 x float> %219, <4 x float> undef, <4 x i32> zeroinitializer
  %221 = fmul <4 x float> %220, %218
  %222 = extractelement <4 x float> %221, i32 0
  %223 = tail call float @sqrtf(float %222) #13
  %224 = extractelement <4 x float> %221, i32 1
  %225 = tail call float @sqrtf(float %224) #13
  %226 = extractelement <4 x float> %221, i32 2
  %227 = tail call float @sqrtf(float %226) #13
  %228 = extractelement <4 x float> %221, i32 3
  %229 = tail call float @sqrtf(float %228) #13
  %230 = insertelement <4 x float> undef, float %223, i32 0
  %231 = insertelement <4 x float> %230, float %225, i32 1
  %232 = insertelement <4 x float> undef, float %227, i32 2
  %233 = insertelement <4 x float> %232, float %229, i32 3
  %234 = fsub <8 x float> %120, %130
  %235 = fcmp oeq <8 x float> %234, zeroinitializer
  %236 = sext <8 x i1> %235 to <8 x i32>
  %237 = fsub <8 x float> %112, %130
  %238 = shufflevector <8 x i32> %236, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %239 = shufflevector <8 x i32> %236, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %240 = and <4 x i32> %239, %238
  %241 = bitcast <4 x i32> %240 to <2 x i64>
  %242 = extractelement <2 x i64> %241, i32 0
  %243 = extractelement <2 x i64> %241, i32 1
  %244 = bitcast i64 %242 to <2 x i32>
  %245 = shufflevector <2 x i32> %244, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %246 = bitcast i64 %243 to <2 x i32>
  %247 = shufflevector <2 x i32> %246, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %248 = shufflevector <4 x i32> %245, <4 x i32> %247, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %249 = shufflevector <8 x float> %237, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %250 = bitcast <2 x float> %249 to <2 x i32>
  %251 = shufflevector <8 x float> %237, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %252 = bitcast <2 x float> %251 to <2 x i32>
  %253 = shufflevector <2 x i32> %250, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %254 = shufflevector <2 x i32> %252, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %255 = shufflevector <4 x i32> %253, <4 x i32> %254, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %256 = and <4 x i32> %248, %255
  %257 = bitcast <4 x i32> %256 to <2 x i64>
  %258 = extractelement <2 x i64> %257, i32 0
  %259 = extractelement <2 x i64> %257, i32 1
  %260 = bitcast i64 %258 to <2 x i32>
  %261 = shufflevector <2 x i32> %260, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %262 = bitcast i64 %259 to <2 x i32>
  %263 = shufflevector <2 x i32> %262, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %264 = shufflevector <4 x i32> %261, <4 x i32> %263, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %265 = bitcast <4 x i32> %248 to <2 x i64>
  %266 = xor <2 x i64> %265, <i64 -1, i64 -1>
  %267 = extractelement <2 x i64> %266, i32 0
  %268 = extractelement <2 x i64> %266, i32 1
  %269 = bitcast i64 %267 to <2 x i32>
  %270 = shufflevector <2 x i32> %269, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %271 = bitcast i64 %268 to <2 x i32>
  %272 = shufflevector <2 x i32> %271, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %273 = shufflevector <4 x i32> %270, <4 x i32> %272, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %274 = shufflevector <8 x float> %234, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %275 = bitcast <2 x float> %274 to <2 x i32>
  %276 = shufflevector <8 x float> %234, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %277 = bitcast <2 x float> %276 to <2 x i32>
  %278 = shufflevector <2 x i32> %275, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %279 = shufflevector <2 x i32> %277, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %280 = shufflevector <4 x i32> %278, <4 x i32> %279, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %281 = and <4 x i32> %273, %280
  %282 = bitcast <4 x i32> %281 to <2 x i64>
  %283 = extractelement <2 x i64> %282, i32 0
  %284 = extractelement <2 x i64> %282, i32 1
  %285 = bitcast i64 %283 to <2 x i32>
  %286 = shufflevector <2 x i32> %285, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %287 = bitcast i64 %284 to <2 x i32>
  %288 = shufflevector <2 x i32> %287, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %289 = shufflevector <4 x i32> %286, <4 x i32> %288, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %290 = or <4 x i32> %289, %264
  %291 = bitcast <4 x i32> %290 to <2 x i64>
  %292 = extractelement <2 x i64> %291, i32 0
  %293 = extractelement <2 x i64> %291, i32 1
  %294 = shufflevector <8 x float> %237, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %295 = bitcast <2 x float> %294 to <2 x i32>
  %296 = shufflevector <8 x float> %237, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %297 = bitcast <2 x float> %296 to <2 x i32>
  %298 = shufflevector <2 x i32> %295, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %299 = shufflevector <2 x i32> %297, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %300 = shufflevector <4 x i32> %298, <4 x i32> %299, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %301 = and <4 x i32> %248, %300
  %302 = bitcast <4 x i32> %301 to <2 x i64>
  %303 = extractelement <2 x i64> %302, i32 0
  %304 = extractelement <2 x i64> %302, i32 1
  %305 = bitcast i64 %303 to <2 x i32>
  %306 = shufflevector <2 x i32> %305, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %307 = bitcast i64 %304 to <2 x i32>
  %308 = shufflevector <2 x i32> %307, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %309 = shufflevector <4 x i32> %306, <4 x i32> %308, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %310 = shufflevector <8 x float> %234, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %311 = bitcast <2 x float> %310 to <2 x i32>
  %312 = shufflevector <8 x float> %234, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %313 = bitcast <2 x float> %312 to <2 x i32>
  %314 = shufflevector <2 x i32> %311, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %315 = shufflevector <2 x i32> %313, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %316 = shufflevector <4 x i32> %314, <4 x i32> %315, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %317 = and <4 x i32> %273, %316
  %318 = bitcast <4 x i32> %317 to <2 x i64>
  %319 = extractelement <2 x i64> %318, i32 0
  %320 = extractelement <2 x i64> %318, i32 1
  %321 = bitcast i64 %319 to <2 x i32>
  %322 = shufflevector <2 x i32> %321, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %323 = bitcast i64 %320 to <2 x i32>
  %324 = shufflevector <2 x i32> %323, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %325 = shufflevector <4 x i32> %322, <4 x i32> %324, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %326 = or <4 x i32> %325, %309
  %327 = bitcast <4 x i32> %326 to <2 x i64>
  %328 = extractelement <2 x i64> %327, i32 0
  %329 = extractelement <2 x i64> %327, i32 1
  %330 = bitcast i64 %292 to <2 x float>
  %331 = shufflevector <2 x float> %330, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %332 = bitcast i64 %293 to <2 x float>
  %333 = shufflevector <2 x float> %332, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %334 = shufflevector <8 x float> %331, <8 x float> %333, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %335 = bitcast i64 %328 to <2 x float>
  %336 = shufflevector <2 x float> %335, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %337 = shufflevector <8 x float> %334, <8 x float> %336, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %338 = bitcast i64 %329 to <2 x float>
  %339 = shufflevector <2 x float> %338, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1>
  %340 = shufflevector <8 x float> %337, <8 x float> %339, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 15>
  %341 = fsub <8 x float> %104, %112
  %342 = fcmp oeq <8 x float> %341, zeroinitializer
  %343 = sext <8 x i1> %342 to <8 x i32>
  %344 = fsub <8 x float> %104, %120
  %345 = shufflevector <8 x i32> %343, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %346 = shufflevector <8 x i32> %343, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %347 = and <4 x i32> %346, %345
  %348 = bitcast <4 x i32> %347 to <2 x i64>
  %349 = extractelement <2 x i64> %348, i32 0
  %350 = extractelement <2 x i64> %348, i32 1
  %351 = bitcast i64 %349 to <2 x i32>
  %352 = shufflevector <2 x i32> %351, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %353 = bitcast i64 %350 to <2 x i32>
  %354 = shufflevector <2 x i32> %353, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %355 = shufflevector <4 x i32> %352, <4 x i32> %354, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %356 = shufflevector <8 x float> %344, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %357 = bitcast <2 x float> %356 to <2 x i32>
  %358 = shufflevector <8 x float> %344, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %359 = bitcast <2 x float> %358 to <2 x i32>
  %360 = shufflevector <2 x i32> %357, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %361 = shufflevector <2 x i32> %359, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %362 = shufflevector <4 x i32> %360, <4 x i32> %361, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %363 = and <4 x i32> %355, %362
  %364 = bitcast <4 x i32> %363 to <2 x i64>
  %365 = extractelement <2 x i64> %364, i32 0
  %366 = extractelement <2 x i64> %364, i32 1
  %367 = bitcast i64 %365 to <2 x i32>
  %368 = shufflevector <2 x i32> %367, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %369 = bitcast i64 %366 to <2 x i32>
  %370 = shufflevector <2 x i32> %369, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %371 = shufflevector <4 x i32> %368, <4 x i32> %370, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %372 = bitcast <4 x i32> %355 to <2 x i64>
  %373 = xor <2 x i64> %372, <i64 -1, i64 -1>
  %374 = extractelement <2 x i64> %373, i32 0
  %375 = extractelement <2 x i64> %373, i32 1
  %376 = bitcast i64 %374 to <2 x i32>
  %377 = shufflevector <2 x i32> %376, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %378 = bitcast i64 %375 to <2 x i32>
  %379 = shufflevector <2 x i32> %378, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %380 = shufflevector <4 x i32> %377, <4 x i32> %379, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %381 = shufflevector <8 x float> %341, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %382 = bitcast <2 x float> %381 to <2 x i32>
  %383 = shufflevector <8 x float> %341, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %384 = bitcast <2 x float> %383 to <2 x i32>
  %385 = shufflevector <2 x i32> %382, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %386 = shufflevector <2 x i32> %384, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %387 = shufflevector <4 x i32> %385, <4 x i32> %386, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %388 = and <4 x i32> %380, %387
  %389 = bitcast <4 x i32> %388 to <2 x i64>
  %390 = extractelement <2 x i64> %389, i32 0
  %391 = extractelement <2 x i64> %389, i32 1
  %392 = bitcast i64 %390 to <2 x i32>
  %393 = shufflevector <2 x i32> %392, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %394 = bitcast i64 %391 to <2 x i32>
  %395 = shufflevector <2 x i32> %394, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %396 = shufflevector <4 x i32> %393, <4 x i32> %395, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %397 = or <4 x i32> %396, %371
  %398 = bitcast <4 x i32> %397 to <2 x i64>
  %399 = extractelement <2 x i64> %398, i32 0
  %400 = extractelement <2 x i64> %398, i32 1
  %401 = shufflevector <8 x float> %344, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %402 = bitcast <2 x float> %401 to <2 x i32>
  %403 = shufflevector <8 x float> %344, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %404 = bitcast <2 x float> %403 to <2 x i32>
  %405 = shufflevector <2 x i32> %402, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %406 = shufflevector <2 x i32> %404, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %407 = shufflevector <4 x i32> %405, <4 x i32> %406, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %408 = and <4 x i32> %355, %407
  %409 = bitcast <4 x i32> %408 to <2 x i64>
  %410 = extractelement <2 x i64> %409, i32 0
  %411 = extractelement <2 x i64> %409, i32 1
  %412 = bitcast i64 %410 to <2 x i32>
  %413 = shufflevector <2 x i32> %412, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %414 = bitcast i64 %411 to <2 x i32>
  %415 = shufflevector <2 x i32> %414, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %416 = shufflevector <4 x i32> %413, <4 x i32> %415, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %417 = shufflevector <8 x float> %341, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %418 = bitcast <2 x float> %417 to <2 x i32>
  %419 = shufflevector <8 x float> %341, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %420 = bitcast <2 x float> %419 to <2 x i32>
  %421 = shufflevector <2 x i32> %418, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %422 = shufflevector <2 x i32> %420, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %423 = shufflevector <4 x i32> %421, <4 x i32> %422, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %424 = and <4 x i32> %380, %423
  %425 = bitcast <4 x i32> %424 to <2 x i64>
  %426 = extractelement <2 x i64> %425, i32 0
  %427 = extractelement <2 x i64> %425, i32 1
  %428 = bitcast i64 %426 to <2 x i32>
  %429 = shufflevector <2 x i32> %428, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %430 = bitcast i64 %427 to <2 x i32>
  %431 = shufflevector <2 x i32> %430, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %432 = shufflevector <4 x i32> %429, <4 x i32> %431, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %433 = or <4 x i32> %432, %416
  %434 = bitcast <4 x i32> %433 to <2 x i64>
  %435 = extractelement <2 x i64> %434, i32 0
  %436 = extractelement <2 x i64> %434, i32 1
  %437 = bitcast i64 %399 to <2 x float>
  %438 = shufflevector <2 x float> %437, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %439 = bitcast i64 %400 to <2 x float>
  %440 = shufflevector <2 x float> %439, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %441 = shufflevector <8 x float> %438, <8 x float> %440, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %442 = bitcast i64 %435 to <2 x float>
  %443 = shufflevector <2 x float> %442, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %444 = shufflevector <8 x float> %441, <8 x float> %443, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %445 = bitcast i64 %436 to <2 x float>
  %446 = shufflevector <2 x float> %445, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1>
  %447 = shufflevector <8 x float> %444, <8 x float> %446, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 15>
  %448 = fmul <8 x float> %340, %340
  %449 = fmul <8 x float> %447, %447
  %450 = fmul <8 x float> %340, %447
  %451 = shufflevector <8 x float> %450, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %452 = shufflevector <8 x float> %450, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %453 = fadd <4 x float> %451, %452
  %454 = shufflevector <8 x float> %448, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %455 = shufflevector <8 x float> %448, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %456 = fadd <4 x float> %454, %455
  %457 = shufflevector <8 x float> %449, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %458 = shufflevector <8 x float> %449, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %459 = fadd <4 x float> %457, %458
  %460 = fmul <4 x float> %456, %459
  %461 = extractelement <4 x float> %460, i32 0
  %462 = tail call float @sqrtf(float %461) #13
  %463 = extractelement <4 x float> %460, i32 1
  %464 = tail call float @sqrtf(float %463) #13
  %465 = extractelement <4 x float> %460, i32 2
  %466 = tail call float @sqrtf(float %465) #13
  %467 = extractelement <4 x float> %460, i32 3
  %468 = tail call float @sqrtf(float %467) #13
  %469 = insertelement <4 x float> undef, float %462, i32 0
  %470 = insertelement <4 x float> %469, float %464, i32 1
  %471 = insertelement <4 x float> undef, float %466, i32 2
  %472 = insertelement <4 x float> %471, float %468, i32 3
  %473 = shufflevector <4 x float> %470, <4 x float> %472, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %474 = fdiv <4 x float> %453, %473
  %475 = fcmp olt <4 x float> %474, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %476 = sext <4 x i1> %475 to <4 x i32>
  %477 = bitcast <4 x i32> %476 to <2 x i64>
  %478 = extractelement <2 x i64> %477, i32 0
  %479 = extractelement <2 x i64> %477, i32 1
  %480 = bitcast i64 %478 to <2 x i32>
  %481 = shufflevector <2 x i32> %480, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %482 = bitcast i64 %479 to <2 x i32>
  %483 = shufflevector <2 x i32> %482, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %484 = shufflevector <4 x i32> %481, <4 x i32> %483, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %485 = bitcast <4 x float> %474 to <2 x i64>
  %486 = extractelement <2 x i64> %485, i32 0
  %487 = bitcast i64 %486 to <2 x i32>
  %488 = shufflevector <4 x float> %474, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %489 = bitcast <2 x float> %488 to <2 x i32>
  %490 = shufflevector <2 x i32> %487, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %491 = shufflevector <2 x i32> %489, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %492 = shufflevector <4 x i32> %490, <4 x i32> %491, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %493 = and <4 x i32> %484, %492
  %494 = bitcast <4 x i32> %493 to <2 x i64>
  %495 = extractelement <2 x i64> %494, i32 0
  %496 = extractelement <2 x i64> %494, i32 1
  %497 = bitcast i64 %495 to <2 x i32>
  %498 = shufflevector <2 x i32> %497, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %499 = bitcast i64 %496 to <2 x i32>
  %500 = shufflevector <2 x i32> %499, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %501 = shufflevector <4 x i32> %498, <4 x i32> %500, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %502 = bitcast <4 x i32> %484 to <2 x i64>
  %503 = xor <2 x i64> %502, <i64 -1, i64 -1>
  %504 = extractelement <2 x i64> %503, i32 0
  %505 = extractelement <2 x i64> %503, i32 1
  %506 = bitcast i64 %504 to <2 x i32>
  %507 = shufflevector <2 x i32> %506, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %508 = bitcast i64 %505 to <2 x i32>
  %509 = shufflevector <2 x i32> %508, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %510 = shufflevector <4 x i32> %507, <4 x i32> %509, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %511 = bitcast <4 x i32> %510 to <2 x i64>
  %512 = and <2 x i64> %511, <i64 4575657222473777152, i64 4575657222473777152>
  %513 = extractelement <2 x i64> %512, i32 0
  %514 = extractelement <2 x i64> %512, i32 1
  %515 = bitcast i64 %513 to <2 x i32>
  %516 = shufflevector <2 x i32> %515, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %517 = bitcast i64 %514 to <2 x i32>
  %518 = shufflevector <2 x i32> %517, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %519 = shufflevector <4 x i32> %516, <4 x i32> %518, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %520 = or <4 x i32> %519, %501
  %521 = bitcast <4 x i32> %520 to <2 x i64>
  %522 = extractelement <2 x i64> %521, i32 0
  %523 = extractelement <2 x i64> %521, i32 1
  %524 = bitcast i64 %522 to <2 x float>
  %525 = bitcast i64 %523 to <2 x float>
  %526 = shufflevector <2 x float> %524, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %527 = shufflevector <2 x float> %525, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %528 = shufflevector <4 x float> %526, <4 x float> %527, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %529 = fcmp olt <4 x float> %528, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %530 = sext <4 x i1> %529 to <4 x i32>
  %531 = bitcast <4 x i32> %530 to <2 x i64>
  %532 = extractelement <2 x i64> %531, i32 0
  %533 = extractelement <2 x i64> %531, i32 1
  %534 = bitcast i64 %532 to <2 x i32>
  %535 = shufflevector <2 x i32> %534, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %536 = bitcast i64 %533 to <2 x i32>
  %537 = shufflevector <2 x i32> %536, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %538 = shufflevector <4 x i32> %535, <4 x i32> %537, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %539 = bitcast <4 x i32> %538 to <2 x i64>
  %540 = and <2 x i64> %539, <i64 -4647714812233515008, i64 -4647714812233515008>
  %541 = extractelement <2 x i64> %540, i32 0
  %542 = extractelement <2 x i64> %540, i32 1
  %543 = bitcast i64 %541 to <2 x i32>
  %544 = shufflevector <2 x i32> %543, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %545 = bitcast i64 %542 to <2 x i32>
  %546 = shufflevector <2 x i32> %545, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %547 = shufflevector <4 x i32> %544, <4 x i32> %546, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %548 = xor <2 x i64> %539, <i64 -1, i64 -1>
  %549 = extractelement <2 x i64> %548, i32 0
  %550 = extractelement <2 x i64> %548, i32 1
  %551 = bitcast i64 %549 to <2 x i32>
  %552 = shufflevector <2 x i32> %551, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %553 = bitcast i64 %550 to <2 x i32>
  %554 = shufflevector <2 x i32> %553, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %555 = shufflevector <4 x i32> %552, <4 x i32> %554, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %556 = bitcast <4 x float> %528 to <2 x i64>
  %557 = extractelement <2 x i64> %556, i32 0
  %558 = bitcast i64 %557 to <2 x i32>
  %559 = bitcast i64 %523 to <2 x i32>
  %560 = shufflevector <2 x i32> %558, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %561 = shufflevector <2 x i32> %559, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %562 = shufflevector <4 x i32> %560, <4 x i32> %561, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %563 = and <4 x i32> %555, %562
  %564 = bitcast <4 x i32> %563 to <2 x i64>
  %565 = extractelement <2 x i64> %564, i32 0
  %566 = extractelement <2 x i64> %564, i32 1
  %567 = bitcast i64 %565 to <2 x i32>
  %568 = shufflevector <2 x i32> %567, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %569 = bitcast i64 %566 to <2 x i32>
  %570 = shufflevector <2 x i32> %569, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %571 = shufflevector <4 x i32> %568, <4 x i32> %570, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %572 = or <4 x i32> %571, %547
  %573 = bitcast <4 x i32> %572 to <2 x i64>
  %574 = extractelement <2 x i64> %573, i32 0
  %575 = extractelement <2 x i64> %573, i32 1
  %576 = bitcast i64 %574 to <2 x float>
  %577 = bitcast i64 %575 to <2 x float>
  %578 = shufflevector <2 x float> %576, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %579 = shufflevector <2 x float> %577, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %580 = shufflevector <4 x float> %578, <4 x float> %579, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %581 = fmul <4 x float> %580, %580
  %582 = fmul <4 x float> %581, <float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %583 = fadd <4 x float> %582, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %584 = fmul <4 x float> %581, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %585 = fadd <4 x float> %584, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %586 = fmul <4 x float> %581, %585
  %587 = fadd <4 x float> %586, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %588 = fdiv <4 x float> %583, %587
  %589 = fmul <4 x float> %580, %588
  %590 = fadd <4 x float> %589, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  br i1 %96, label %893, label %591

591:                                              ; preds = %35
  %592 = load i32, i32* %2, align 32, !noalias !52
  %593 = icmp eq i32 %592, 4
  br i1 %593, label %594, label %598

594:                                              ; preds = %591
  %595 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 1
  %596 = bitcast [8 x float]* %595 to <8 x float>*
  %597 = load <8 x float>, <8 x float>* %596, align 1
  br label %632

598:                                              ; preds = %591
  %599 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 1, i64 0
  %600 = bitcast float* %599 to i32*
  %601 = load i32, i32* %600, align 4, !noalias !52
  %602 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 1, i64 1
  %603 = bitcast float* %602 to i32*
  %604 = load i32, i32* %603, align 4, !noalias !52
  %605 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 1, i64 2
  %606 = load float, float* %605, align 4, !noalias !52
  %607 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 1, i64 4
  %608 = bitcast float* %607 to i32*
  %609 = load i32, i32* %608, align 4, !noalias !52
  %610 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 1, i64 5
  %611 = bitcast float* %610 to i32*
  %612 = load i32, i32* %611, align 4, !noalias !52
  %613 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 0, i32 1, i64 6
  %614 = load float, float* %613, align 4, !noalias !52
  %615 = zext i32 %604 to i64
  %616 = shl nuw i64 %615, 32
  %617 = zext i32 %601 to i64
  %618 = or i64 %616, %617
  %619 = bitcast i64 %618 to <2 x float>
  %620 = shufflevector <2 x float> %619, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %621 = insertelement <8 x float> %620, float 0.000000e+00, i32 3
  %622 = insertelement <8 x float> %621, float %606, i32 2
  %623 = zext i32 %612 to i64
  %624 = shl nuw i64 %623, 32
  %625 = zext i32 %609 to i64
  %626 = or i64 %624, %625
  %627 = bitcast i64 %626 to <2 x float>
  %628 = shufflevector <2 x float> %627, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %629 = shufflevector <8 x float> %622, <8 x float> %628, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %630 = insertelement <8 x float> %629, float 0.000000e+00, i32 7
  %631 = insertelement <8 x float> %630, float %614, i32 6
  br label %632

632:                                              ; preds = %598, %594
  %633 = phi <8 x float> [ %597, %594 ], [ %631, %598 ]
  %634 = fcmp oeq <8 x float> %340, zeroinitializer
  %635 = sext <8 x i1> %634 to <8 x i32>
  %636 = shufflevector <8 x i32> %635, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %637 = shufflevector <8 x i32> %635, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %638 = and <4 x i32> %637, %636
  %639 = bitcast <4 x i32> %638 to <2 x i64>
  %640 = extractelement <2 x i64> %639, i32 0
  %641 = extractelement <2 x i64> %639, i32 1
  %642 = bitcast i64 %640 to <2 x i32>
  %643 = shufflevector <2 x i32> %642, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %644 = bitcast i64 %641 to <2 x i32>
  %645 = shufflevector <2 x i32> %644, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %646 = shufflevector <4 x i32> %643, <4 x i32> %645, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %647 = bitcast i64 %399 to <2 x i32>
  %648 = bitcast i64 %400 to <2 x i32>
  %649 = shufflevector <2 x i32> %647, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %650 = shufflevector <2 x i32> %648, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %651 = shufflevector <4 x i32> %649, <4 x i32> %650, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %652 = and <4 x i32> %646, %651
  %653 = bitcast <4 x i32> %652 to <2 x i64>
  %654 = extractelement <2 x i64> %653, i32 0
  %655 = extractelement <2 x i64> %653, i32 1
  %656 = bitcast i64 %654 to <2 x i32>
  %657 = shufflevector <2 x i32> %656, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %658 = bitcast i64 %655 to <2 x i32>
  %659 = shufflevector <2 x i32> %658, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %660 = shufflevector <4 x i32> %657, <4 x i32> %659, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %661 = bitcast <4 x i32> %646 to <2 x i64>
  %662 = xor <2 x i64> %661, <i64 -1, i64 -1>
  %663 = extractelement <2 x i64> %662, i32 0
  %664 = extractelement <2 x i64> %662, i32 1
  %665 = bitcast i64 %663 to <2 x i32>
  %666 = shufflevector <2 x i32> %665, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %667 = bitcast i64 %664 to <2 x i32>
  %668 = shufflevector <2 x i32> %667, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %669 = shufflevector <4 x i32> %666, <4 x i32> %668, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %670 = bitcast i64 %292 to <2 x i32>
  %671 = bitcast i64 %293 to <2 x i32>
  %672 = shufflevector <2 x i32> %670, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %673 = shufflevector <2 x i32> %671, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %674 = shufflevector <4 x i32> %672, <4 x i32> %673, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %675 = and <4 x i32> %669, %674
  %676 = bitcast <4 x i32> %675 to <2 x i64>
  %677 = extractelement <2 x i64> %676, i32 0
  %678 = extractelement <2 x i64> %676, i32 1
  %679 = bitcast i64 %677 to <2 x i32>
  %680 = shufflevector <2 x i32> %679, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %681 = bitcast i64 %678 to <2 x i32>
  %682 = shufflevector <2 x i32> %681, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %683 = shufflevector <4 x i32> %680, <4 x i32> %682, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %684 = or <4 x i32> %683, %660
  %685 = bitcast <4 x i32> %684 to <2 x i64>
  %686 = extractelement <2 x i64> %685, i32 0
  %687 = extractelement <2 x i64> %685, i32 1
  %688 = bitcast i64 %435 to <2 x i32>
  %689 = bitcast i64 %436 to <2 x i32>
  %690 = shufflevector <2 x i32> %688, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %691 = shufflevector <2 x i32> %689, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %692 = shufflevector <4 x i32> %690, <4 x i32> %691, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %693 = and <4 x i32> %646, %692
  %694 = bitcast <4 x i32> %693 to <2 x i64>
  %695 = extractelement <2 x i64> %694, i32 0
  %696 = extractelement <2 x i64> %694, i32 1
  %697 = bitcast i64 %695 to <2 x i32>
  %698 = shufflevector <2 x i32> %697, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %699 = bitcast i64 %696 to <2 x i32>
  %700 = shufflevector <2 x i32> %699, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %701 = shufflevector <4 x i32> %698, <4 x i32> %700, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %702 = bitcast i64 %328 to <2 x i32>
  %703 = bitcast i64 %329 to <2 x i32>
  %704 = shufflevector <2 x i32> %702, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %705 = shufflevector <2 x i32> %703, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %706 = shufflevector <4 x i32> %704, <4 x i32> %705, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %707 = and <4 x i32> %669, %706
  %708 = bitcast <4 x i32> %707 to <2 x i64>
  %709 = extractelement <2 x i64> %708, i32 0
  %710 = extractelement <2 x i64> %708, i32 1
  %711 = bitcast i64 %709 to <2 x i32>
  %712 = shufflevector <2 x i32> %711, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %713 = bitcast i64 %710 to <2 x i32>
  %714 = shufflevector <2 x i32> %713, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %715 = shufflevector <4 x i32> %712, <4 x i32> %714, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %716 = or <4 x i32> %715, %701
  %717 = bitcast <4 x i32> %716 to <2 x i64>
  %718 = extractelement <2 x i64> %717, i32 0
  %719 = extractelement <2 x i64> %717, i32 1
  %720 = trunc i64 %686 to i32
  %721 = lshr i64 %686, 32
  %722 = trunc i64 %721 to i32
  %723 = trunc i64 %687 to i32
  %724 = lshr i64 %687, 32
  %725 = trunc i64 %724 to i32
  %726 = trunc i64 %718 to i32
  %727 = lshr i64 %718, 32
  %728 = trunc i64 %727 to i32
  %729 = trunc i64 %719 to i32
  %730 = lshr i64 %719, 32
  %731 = trunc i64 %730 to i32
  %732 = fsub <8 x float> %130, %633
  %733 = bitcast i32 %720 to float
  %734 = insertelement <8 x float> undef, float %733, i32 0
  %735 = bitcast i32 %722 to float
  %736 = insertelement <8 x float> %734, float %735, i32 1
  %737 = bitcast i32 %723 to float
  %738 = insertelement <8 x float> %736, float %737, i32 2
  %739 = bitcast i32 %725 to float
  %740 = insertelement <8 x float> %738, float %739, i32 3
  %741 = bitcast i32 %726 to float
  %742 = insertelement <8 x float> %740, float %741, i32 4
  %743 = bitcast i32 %728 to float
  %744 = insertelement <8 x float> %742, float %743, i32 5
  %745 = bitcast i32 %729 to float
  %746 = insertelement <8 x float> %744, float %745, i32 6
  %747 = bitcast i32 %731 to float
  %748 = insertelement <8 x float> %746, float %747, i32 7
  %749 = fmul <8 x float> %732, %732
  %750 = fmul <8 x float> %748, %748
  %751 = fmul <8 x float> %748, %732
  %752 = shufflevector <8 x float> %751, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %753 = shufflevector <8 x float> %751, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %754 = fadd <4 x float> %752, %753
  %755 = shufflevector <8 x float> %749, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %756 = shufflevector <8 x float> %749, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %757 = fadd <4 x float> %755, %756
  %758 = shufflevector <8 x float> %750, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %759 = shufflevector <8 x float> %750, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %760 = fadd <4 x float> %758, %759
  %761 = fmul <4 x float> %760, %757
  %762 = extractelement <4 x float> %761, i32 0
  %763 = tail call float @sqrtf(float %762) #13
  %764 = extractelement <4 x float> %761, i32 1
  %765 = tail call float @sqrtf(float %764) #13
  %766 = extractelement <4 x float> %761, i32 2
  %767 = tail call float @sqrtf(float %766) #13
  %768 = extractelement <4 x float> %761, i32 3
  %769 = tail call float @sqrtf(float %768) #13
  %770 = insertelement <4 x float> undef, float %763, i32 0
  %771 = insertelement <4 x float> %770, float %765, i32 1
  %772 = insertelement <4 x float> undef, float %767, i32 2
  %773 = insertelement <4 x float> %772, float %769, i32 3
  %774 = shufflevector <4 x float> %771, <4 x float> %773, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %775 = fdiv <4 x float> %754, %774
  %776 = fcmp olt <4 x float> %775, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %777 = sext <4 x i1> %776 to <4 x i32>
  %778 = bitcast <4 x i32> %777 to <2 x i64>
  %779 = extractelement <2 x i64> %778, i32 0
  %780 = extractelement <2 x i64> %778, i32 1
  %781 = bitcast i64 %779 to <2 x i32>
  %782 = shufflevector <2 x i32> %781, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %783 = bitcast i64 %780 to <2 x i32>
  %784 = shufflevector <2 x i32> %783, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %785 = shufflevector <4 x i32> %782, <4 x i32> %784, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %786 = bitcast <4 x float> %775 to <2 x i64>
  %787 = extractelement <2 x i64> %786, i32 0
  %788 = bitcast i64 %787 to <2 x i32>
  %789 = shufflevector <4 x float> %775, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %790 = bitcast <2 x float> %789 to <2 x i32>
  %791 = shufflevector <2 x i32> %788, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %792 = shufflevector <2 x i32> %790, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %793 = shufflevector <4 x i32> %791, <4 x i32> %792, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %794 = and <4 x i32> %785, %793
  %795 = bitcast <4 x i32> %794 to <2 x i64>
  %796 = extractelement <2 x i64> %795, i32 0
  %797 = extractelement <2 x i64> %795, i32 1
  %798 = bitcast i64 %796 to <2 x i32>
  %799 = shufflevector <2 x i32> %798, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %800 = bitcast i64 %797 to <2 x i32>
  %801 = shufflevector <2 x i32> %800, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %802 = shufflevector <4 x i32> %799, <4 x i32> %801, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %803 = bitcast <4 x i32> %785 to <2 x i64>
  %804 = xor <2 x i64> %803, <i64 -1, i64 -1>
  %805 = extractelement <2 x i64> %804, i32 0
  %806 = extractelement <2 x i64> %804, i32 1
  %807 = bitcast i64 %805 to <2 x i32>
  %808 = shufflevector <2 x i32> %807, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %809 = bitcast i64 %806 to <2 x i32>
  %810 = shufflevector <2 x i32> %809, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %811 = shufflevector <4 x i32> %808, <4 x i32> %810, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %812 = bitcast <4 x i32> %811 to <2 x i64>
  %813 = and <2 x i64> %812, <i64 4575657222473777152, i64 4575657222473777152>
  %814 = extractelement <2 x i64> %813, i32 0
  %815 = extractelement <2 x i64> %813, i32 1
  %816 = bitcast i64 %814 to <2 x i32>
  %817 = shufflevector <2 x i32> %816, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %818 = bitcast i64 %815 to <2 x i32>
  %819 = shufflevector <2 x i32> %818, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %820 = shufflevector <4 x i32> %817, <4 x i32> %819, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %821 = or <4 x i32> %820, %802
  %822 = bitcast <4 x i32> %821 to <2 x i64>
  %823 = extractelement <2 x i64> %822, i32 0
  %824 = extractelement <2 x i64> %822, i32 1
  %825 = bitcast i64 %823 to <2 x float>
  %826 = bitcast i64 %824 to <2 x float>
  %827 = shufflevector <2 x float> %825, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %828 = shufflevector <2 x float> %826, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %829 = shufflevector <4 x float> %827, <4 x float> %828, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %830 = fcmp olt <4 x float> %829, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %831 = sext <4 x i1> %830 to <4 x i32>
  %832 = bitcast <4 x i32> %831 to <2 x i64>
  %833 = extractelement <2 x i64> %832, i32 0
  %834 = extractelement <2 x i64> %832, i32 1
  %835 = bitcast i64 %833 to <2 x i32>
  %836 = shufflevector <2 x i32> %835, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %837 = bitcast i64 %834 to <2 x i32>
  %838 = shufflevector <2 x i32> %837, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %839 = shufflevector <4 x i32> %836, <4 x i32> %838, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %840 = bitcast <4 x i32> %839 to <2 x i64>
  %841 = and <2 x i64> %840, <i64 -4647714812233515008, i64 -4647714812233515008>
  %842 = extractelement <2 x i64> %841, i32 0
  %843 = extractelement <2 x i64> %841, i32 1
  %844 = bitcast i64 %842 to <2 x i32>
  %845 = shufflevector <2 x i32> %844, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %846 = bitcast i64 %843 to <2 x i32>
  %847 = shufflevector <2 x i32> %846, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %848 = shufflevector <4 x i32> %845, <4 x i32> %847, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %849 = xor <2 x i64> %840, <i64 -1, i64 -1>
  %850 = extractelement <2 x i64> %849, i32 0
  %851 = extractelement <2 x i64> %849, i32 1
  %852 = bitcast i64 %850 to <2 x i32>
  %853 = shufflevector <2 x i32> %852, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %854 = bitcast i64 %851 to <2 x i32>
  %855 = shufflevector <2 x i32> %854, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %856 = shufflevector <4 x i32> %853, <4 x i32> %855, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %857 = bitcast <4 x float> %829 to <2 x i64>
  %858 = extractelement <2 x i64> %857, i32 0
  %859 = bitcast i64 %858 to <2 x i32>
  %860 = bitcast i64 %824 to <2 x i32>
  %861 = shufflevector <2 x i32> %859, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %862 = shufflevector <2 x i32> %860, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %863 = shufflevector <4 x i32> %861, <4 x i32> %862, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %864 = and <4 x i32> %856, %863
  %865 = bitcast <4 x i32> %864 to <2 x i64>
  %866 = extractelement <2 x i64> %865, i32 0
  %867 = extractelement <2 x i64> %865, i32 1
  %868 = bitcast i64 %866 to <2 x i32>
  %869 = shufflevector <2 x i32> %868, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %870 = bitcast i64 %867 to <2 x i32>
  %871 = shufflevector <2 x i32> %870, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %872 = shufflevector <4 x i32> %869, <4 x i32> %871, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %873 = or <4 x i32> %872, %848
  %874 = bitcast <4 x i32> %873 to <2 x i64>
  %875 = extractelement <2 x i64> %874, i32 0
  %876 = extractelement <2 x i64> %874, i32 1
  %877 = bitcast i64 %875 to <2 x float>
  %878 = bitcast i64 %876 to <2 x float>
  %879 = shufflevector <2 x float> %877, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %880 = shufflevector <2 x float> %878, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %881 = shufflevector <4 x float> %879, <4 x float> %880, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %882 = fmul <4 x float> %881, %881
  %883 = fmul <4 x float> %882, <float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %884 = fadd <4 x float> %883, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %885 = fmul <4 x float> %882, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %886 = fadd <4 x float> %885, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %887 = fmul <4 x float> %882, %886
  %888 = fadd <4 x float> %887, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %889 = fdiv <4 x float> %884, %888
  %890 = fmul <4 x float> %881, %889
  %891 = fadd <4 x float> %890, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %892 = fadd <4 x float> %590, %891
  br label %893

893:                                              ; preds = %35, %632
  %894 = phi <4 x float> [ %892, %632 ], [ %590, %35 ]
  %895 = load i32, i32* %2, align 32
  %896 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 1, i64 0
  %897 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 9, i32 1
  %898 = load float, float* %897, align 4
  %899 = insertelement <2 x float> undef, float %898, i32 0
  %900 = shufflevector <2 x float> %899, <2 x float> undef, <4 x i32> zeroinitializer
  %901 = shufflevector <4 x float> %231, <4 x float> %233, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %902 = fmul <4 x float> %894, %900
  %903 = fadd <4 x float> %901, %902
  %904 = bitcast <4 x float> %903 to <2 x i64>
  %905 = extractelement <2 x i64> %904, i32 0
  %906 = extractelement <2 x i64> %904, i32 1
  %907 = bitcast i64 %905 to <2 x i32>
  %908 = shufflevector <2 x i32> %907, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %909 = bitcast i64 %906 to <2 x i32>
  %910 = shufflevector <2 x i32> %909, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %911 = shufflevector <4 x i32> %908, <4 x i32> %910, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %912 = add <4 x i32> %911, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %913 = bitcast <4 x i32> %912 to <2 x i64>
  %914 = extractelement <2 x i64> %913, i32 0
  %915 = extractelement <2 x i64> %913, i32 1
  %916 = bitcast i64 %914 to <2 x i32>
  %917 = bitcast i64 %915 to <2 x i32>
  %918 = shufflevector <2 x i32> %916, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %919 = shufflevector <2 x i32> %917, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %920 = shufflevector <4 x i32> %918, <4 x i32> %919, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %921 = ashr <4 x i32> %920, <i32 23, i32 23, i32 23, i32 23>
  %922 = bitcast <4 x i32> %921 to <2 x i64>
  %923 = extractelement <2 x i64> %922, i32 0
  %924 = extractelement <2 x i64> %922, i32 1
  %925 = bitcast i64 %923 to <2 x i32>
  %926 = shufflevector <2 x i32> %925, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %927 = bitcast i64 %924 to <2 x i32>
  %928 = shufflevector <2 x i32> %927, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %929 = shufflevector <4 x i32> %926, <4 x i32> %928, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %930 = add <4 x i32> %929, <i32 -127, i32 -127, i32 -127, i32 -127>
  %931 = bitcast <4 x i32> %930 to <2 x i64>
  %932 = extractelement <2 x i64> %931, i32 0
  %933 = extractelement <2 x i64> %931, i32 1
  %934 = bitcast i64 %932 to <2 x i32>
  %935 = shufflevector <2 x i32> %934, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %936 = bitcast i64 %933 to <2 x i32>
  %937 = shufflevector <2 x i32> %936, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %938 = shufflevector <4 x i32> %935, <4 x i32> %937, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %939 = icmp sgt <4 x i32> %938, <i32 15, i32 15, i32 15, i32 15>
  %940 = sext <4 x i1> %939 to <4 x i32>
  %941 = bitcast <4 x i32> %940 to <2 x i64>
  %942 = extractelement <2 x i64> %941, i32 0
  %943 = extractelement <2 x i64> %941, i32 1
  %944 = bitcast i64 %942 to <2 x i32>
  %945 = shufflevector <2 x i32> %944, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %946 = bitcast i64 %943 to <2 x i32>
  %947 = shufflevector <2 x i32> %946, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %948 = shufflevector <4 x i32> %945, <4 x i32> %947, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %949 = bitcast <4 x i32> %948 to <2 x i64>
  %950 = and <2 x i64> %949, <i64 64424509455, i64 64424509455>
  %951 = extractelement <2 x i64> %950, i32 0
  %952 = extractelement <2 x i64> %950, i32 1
  %953 = bitcast i64 %951 to <2 x i32>
  %954 = shufflevector <2 x i32> %953, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %955 = bitcast i64 %952 to <2 x i32>
  %956 = shufflevector <2 x i32> %955, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %957 = shufflevector <4 x i32> %954, <4 x i32> %956, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %958 = xor <2 x i64> %949, <i64 -1, i64 -1>
  %959 = extractelement <2 x i64> %958, i32 0
  %960 = extractelement <2 x i64> %958, i32 1
  %961 = bitcast i64 %959 to <2 x i32>
  %962 = shufflevector <2 x i32> %961, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %963 = bitcast i64 %960 to <2 x i32>
  %964 = shufflevector <2 x i32> %963, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %965 = shufflevector <4 x i32> %962, <4 x i32> %964, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %966 = bitcast <4 x i32> %938 to <2 x i64>
  %967 = extractelement <2 x i64> %966, i32 0
  %968 = bitcast i64 %967 to <2 x i32>
  %969 = shufflevector <2 x i32> %968, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %970 = shufflevector <4 x i32> %969, <4 x i32> %937, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %971 = and <4 x i32> %965, %970
  %972 = bitcast <4 x i32> %971 to <2 x i64>
  %973 = extractelement <2 x i64> %972, i32 0
  %974 = extractelement <2 x i64> %972, i32 1
  %975 = bitcast i64 %973 to <2 x i32>
  %976 = shufflevector <2 x i32> %975, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %977 = bitcast i64 %974 to <2 x i32>
  %978 = shufflevector <2 x i32> %977, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %979 = shufflevector <4 x i32> %976, <4 x i32> %978, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %980 = or <4 x i32> %979, %957
  %981 = bitcast <4 x i32> %980 to <2 x i64>
  %982 = extractelement <2 x i64> %981, i32 0
  %983 = extractelement <2 x i64> %981, i32 1
  %984 = bitcast i64 %982 to <2 x i32>
  %985 = shufflevector <2 x i32> %984, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %986 = bitcast i64 %983 to <2 x i32>
  %987 = shufflevector <2 x i32> %986, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %988 = shufflevector <4 x i32> %985, <4 x i32> %987, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %989 = icmp sgt <4 x i32> %988, zeroinitializer
  %990 = sext <4 x i1> %989 to <4 x i32>
  %991 = bitcast <4 x i32> %990 to <2 x i64>
  %992 = extractelement <2 x i64> %991, i32 0
  %993 = extractelement <2 x i64> %991, i32 1
  %994 = bitcast i64 %992 to <2 x i32>
  %995 = shufflevector <2 x i32> %994, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %996 = bitcast i64 %993 to <2 x i32>
  %997 = shufflevector <2 x i32> %996, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %998 = shufflevector <4 x i32> %995, <4 x i32> %997, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %999 = bitcast <4 x i32> %988 to <2 x i64>
  %1000 = extractelement <2 x i64> %999, i32 0
  %1001 = bitcast i64 %1000 to <2 x i32>
  %1002 = shufflevector <2 x i32> %1001, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1003 = shufflevector <4 x i32> %1002, <4 x i32> %987, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1004 = and <4 x i32> %998, %1003
  %1005 = bitcast <4 x i32> %1004 to <2 x i64>
  %1006 = extractelement <2 x i64> %1005, i32 0
  %1007 = extractelement <2 x i64> %1005, i32 1
  %1008 = bitcast i64 %1006 to <2 x i32>
  %1009 = shufflevector <2 x i32> %1008, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1010 = bitcast i64 %1007 to <2 x i32>
  %1011 = shufflevector <2 x i32> %1010, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1012 = shufflevector <4 x i32> %1009, <4 x i32> %1011, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1013 = bitcast <4 x i32> %1012 to <2 x i64>
  %1014 = extractelement <2 x i64> %1013, i32 0
  %1015 = extractelement <2 x i64> %1013, i32 1
  %1016 = lshr i64 %1014, 32
  switch i32 %895, label %1017 [
    i32 4, label %1018
    i32 3, label %1030
    i32 2, label %1041
    i32 1, label %1052
  ]

1017:                                             ; preds = %893
  tail call void @llvm.trap() #13
  unreachable

1018:                                             ; preds = %893
  %1019 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1020 = load i32*, i32** %1019, align 8
  %1021 = lshr i64 %1015, 32
  %1022 = trunc i64 %1021 to i8
  %1023 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 1, i64 3
  %1024 = load i8*, i8** %1023, align 8
  store i8 %1022, i8* %1024, align 1
  %1025 = shl i64 %1021, 56
  %1026 = ashr exact i64 %1025, 56
  %1027 = getelementptr inbounds i32, i32* %1020, i64 %1026
  %1028 = load i32, i32* %1027, align 4
  %1029 = add nsw i32 %1028, 1
  store i32 %1029, i32* %1027, align 4
  br label %1030

1030:                                             ; preds = %893, %1018
  %1031 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1032 = load i32*, i32** %1031, align 8
  %1033 = trunc i64 %1015 to i8
  %1034 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 1, i64 2
  %1035 = load i8*, i8** %1034, align 8
  store i8 %1033, i8* %1035, align 1
  %1036 = shl i64 %1015, 56
  %1037 = ashr exact i64 %1036, 56
  %1038 = getelementptr inbounds i32, i32* %1032, i64 %1037
  %1039 = load i32, i32* %1038, align 4
  %1040 = add nsw i32 %1039, 1
  store i32 %1040, i32* %1038, align 4
  br label %1041

1041:                                             ; preds = %893, %1030
  %1042 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1043 = load i32*, i32** %1042, align 8
  %1044 = trunc i64 %1016 to i8
  %1045 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 2, i32 1, i64 1
  %1046 = load i8*, i8** %1045, align 8
  store i8 %1044, i8* %1046, align 1
  %1047 = shl i64 %1016, 56
  %1048 = ashr exact i64 %1047, 56
  %1049 = getelementptr inbounds i32, i32* %1043, i64 %1048
  %1050 = load i32, i32* %1049, align 4
  %1051 = add nsw i32 %1050, 1
  store i32 %1051, i32* %1049, align 4
  br label %1052

1052:                                             ; preds = %893, %1041
  %1053 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1054 = load i32*, i32** %1053, align 8
  %1055 = trunc i64 %1014 to i8
  %1056 = load i8*, i8** %896, align 8
  store i8 %1055, i8* %1056, align 1
  %1057 = shl i64 %1014, 56
  %1058 = ashr exact i64 %1057, 56
  %1059 = getelementptr inbounds i32, i32* %1054, i64 %1058
  %1060 = load i32, i32* %1059, align 4
  %1061 = add nsw i32 %1060, 1
  store i32 %1061, i32* %1059, align 4
  store i32 0, i32* %2, align 32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_119ResolveLevelCounter18flushChoppedCubicsILi4EEEvv(%"class.(anonymous namespace)::ResolveLevelCounter"*) unnamed_addr #10 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 2
  %3 = load i32, i32* %2, align 32, !noalias !57
  %4 = icmp eq i32 %3, 4
  br i1 %4, label %5, label %34

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 0, i64 3
  %7 = load float, float* %6, align 1
  %8 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 0, i64 7
  %9 = load float, float* %8, align 1
  %10 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 1
  %11 = bitcast [8 x float]* %10 to i32*
  %12 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i64 3
  %13 = load float, float* %12, align 1
  %14 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i64 7
  %15 = load float, float* %14, align 1
  %16 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 2
  %17 = bitcast [8 x float]* %16 to i32*
  %18 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i64 3
  %19 = load float, float* %18, align 1
  %20 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i64 7
  %21 = load float, float* %20, align 1
  %22 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 3
  %23 = bitcast [8 x float]* %22 to i32*
  %24 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 3, i64 3
  %25 = load float, float* %24, align 1
  %26 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 3, i64 7
  %27 = load float, float* %26, align 1
  %28 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 4
  %29 = bitcast %struct.anon.20* %28 to i32*
  %30 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 4, i32 0, i64 3
  %31 = load float, float* %30, align 1
  %32 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 4, i32 0, i64 7
  %33 = load float, float* %32, align 1
  br label %43

34:                                               ; preds = %1
  %35 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i64 0
  %36 = bitcast float* %35 to i32*
  %37 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i64 0
  %38 = bitcast float* %37 to i32*
  %39 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 3, i64 0
  %40 = bitcast float* %39 to i32*
  %41 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 4, i32 0, i64 0
  %42 = bitcast float* %41 to i32*
  br label %43

43:                                               ; preds = %5, %34
  %44 = phi i32* [ %23, %5 ], [ %40, %34 ]
  %45 = phi float [ %27, %5 ], [ 0.000000e+00, %34 ]
  %46 = phi float [ %25, %5 ], [ 0.000000e+00, %34 ]
  %47 = phi i32* [ %11, %5 ], [ %36, %34 ]
  %48 = phi float [ %15, %5 ], [ 0.000000e+00, %34 ]
  %49 = phi float [ %13, %5 ], [ 0.000000e+00, %34 ]
  %50 = phi float [ %7, %5 ], [ 0.000000e+00, %34 ]
  %51 = phi float [ %9, %5 ], [ 0.000000e+00, %34 ]
  %52 = phi float [ %19, %5 ], [ 0.000000e+00, %34 ]
  %53 = phi float [ %21, %5 ], [ 0.000000e+00, %34 ]
  %54 = phi i32* [ %17, %5 ], [ %38, %34 ]
  %55 = phi i32* [ %29, %5 ], [ %42, %34 ]
  %56 = phi float [ %33, %5 ], [ 0.000000e+00, %34 ]
  %57 = phi float [ %31, %5 ], [ 0.000000e+00, %34 ]
  %58 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 4, i32 0, i64 2
  %59 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 4, i32 0, i64 6
  %60 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 4, i32 0, i64 4
  %61 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 4, i32 0, i64 5
  %62 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 4, i32 0, i64 1
  %63 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i64 1
  %64 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i64 5
  %65 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i64 4
  %66 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i64 6
  %67 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 2, i64 2
  %68 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 0, i64 5
  %69 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 0, i64 4
  %70 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 0, i64 6
  %71 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 0, i64 2
  %72 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i64 2
  %73 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i64 6
  %74 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i64 4
  %75 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i64 5
  %76 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 1, i64 1
  %77 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 3, i64 2
  %78 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 3, i64 6
  %79 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 3, i64 4
  %80 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 3, i64 5
  %81 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 3, i64 1
  %82 = load float, float* %58, align 1
  %83 = load float, float* %59, align 1
  %84 = load float, float* %60, align 1
  %85 = load float, float* %61, align 1
  %86 = bitcast i32* %55 to float*
  %87 = load float, float* %86, align 1
  %88 = load float, float* %62, align 1
  %89 = load float, float* %63, align 1
  %90 = bitcast i32* %54 to float*
  %91 = load float, float* %90, align 1
  %92 = load float, float* %64, align 1
  %93 = load float, float* %65, align 1
  %94 = load float, float* %66, align 1
  %95 = load float, float* %67, align 1
  %96 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 0, i64 0, i64 0
  %97 = bitcast float* %96 to <2 x float>*
  %98 = load <2 x float>, <2 x float>* %97, align 1
  %99 = load float, float* %68, align 1
  %100 = load float, float* %69, align 1
  %101 = load float, float* %70, align 1
  %102 = load float, float* %71, align 1
  %103 = load float, float* %72, align 1
  %104 = load float, float* %73, align 1
  %105 = load float, float* %74, align 1
  %106 = load float, float* %75, align 1
  %107 = bitcast i32* %47 to float*
  %108 = load float, float* %107, align 1
  %109 = load float, float* %76, align 1
  %110 = load float, float* %77, align 1
  %111 = load float, float* %78, align 1
  %112 = load float, float* %79, align 1
  %113 = load float, float* %80, align 1
  %114 = bitcast i32* %44 to float*
  %115 = load float, float* %114, align 1
  %116 = load float, float* %81, align 1
  %117 = insertelement <8 x float> undef, float %87, i32 0
  %118 = insertelement <8 x float> %117, float %88, i32 1
  %119 = insertelement <8 x float> %118, float %82, i32 2
  %120 = insertelement <8 x float> %119, float %57, i32 3
  %121 = insertelement <8 x float> %120, float %84, i32 4
  %122 = insertelement <8 x float> %121, float %85, i32 5
  %123 = insertelement <8 x float> %122, float %83, i32 6
  %124 = insertelement <8 x float> %123, float %56, i32 7
  %125 = insertelement <8 x float> undef, float %108, i32 0
  %126 = insertelement <8 x float> %125, float %109, i32 1
  %127 = insertelement <8 x float> %126, float %103, i32 2
  %128 = insertelement <8 x float> %127, float %49, i32 3
  %129 = insertelement <8 x float> %128, float %105, i32 4
  %130 = insertelement <8 x float> %129, float %106, i32 5
  %131 = insertelement <8 x float> %130, float %104, i32 6
  %132 = insertelement <8 x float> %131, float %48, i32 7
  %133 = extractelement <2 x float> %98, i32 0
  %134 = insertelement <8 x float> undef, float %133, i32 0
  %135 = extractelement <2 x float> %98, i32 1
  %136 = insertelement <8 x float> %134, float %135, i32 1
  %137 = insertelement <8 x float> %136, float %102, i32 2
  %138 = insertelement <8 x float> %137, float %50, i32 3
  %139 = insertelement <8 x float> %138, float %100, i32 4
  %140 = insertelement <8 x float> %139, float %99, i32 5
  %141 = insertelement <8 x float> %140, float %101, i32 6
  %142 = insertelement <8 x float> %141, float %51, i32 7
  %143 = fsub <8 x float> %132, %142
  %144 = fmul <8 x float> %124, %143
  %145 = fadd <8 x float> %142, %144
  %146 = insertelement <8 x float> undef, float %91, i32 0
  %147 = insertelement <8 x float> %146, float %89, i32 1
  %148 = insertelement <8 x float> %147, float %95, i32 2
  %149 = insertelement <8 x float> %148, float %52, i32 3
  %150 = insertelement <8 x float> %149, float %93, i32 4
  %151 = insertelement <8 x float> %150, float %92, i32 5
  %152 = insertelement <8 x float> %151, float %94, i32 6
  %153 = insertelement <8 x float> %152, float %53, i32 7
  %154 = fsub <8 x float> %153, %132
  %155 = fmul <8 x float> %124, %154
  %156 = fadd <8 x float> %132, %155
  %157 = insertelement <8 x float> undef, float %115, i32 0
  %158 = insertelement <8 x float> %157, float %116, i32 1
  %159 = insertelement <8 x float> %158, float %110, i32 2
  %160 = insertelement <8 x float> %159, float %46, i32 3
  %161 = insertelement <8 x float> %160, float %112, i32 4
  %162 = insertelement <8 x float> %161, float %113, i32 5
  %163 = insertelement <8 x float> %162, float %111, i32 6
  %164 = insertelement <8 x float> %163, float %45, i32 7
  %165 = fsub <8 x float> %164, %153
  %166 = fmul <8 x float> %124, %165
  %167 = fadd <8 x float> %153, %166
  %168 = fsub <8 x float> %156, %145
  %169 = fmul <8 x float> %124, %168
  %170 = fadd <8 x float> %145, %169
  %171 = fsub <8 x float> %167, %156
  %172 = fmul <8 x float> %124, %171
  %173 = fadd <8 x float> %156, %172
  %174 = fsub <8 x float> %173, %170
  %175 = fmul <8 x float> %124, %174
  %176 = fadd <8 x float> %170, %175
  %177 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 11
  %178 = load i8, i8* %177, align 4, !range !2
  %179 = icmp eq i8 %178, 0
  %180 = fmul <8 x float> %145, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %181 = fadd <8 x float> %180, %170
  %182 = fadd <8 x float> %142, %181
  %183 = fmul <8 x float> %182, %182
  %184 = shufflevector <8 x float> %183, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %185 = shufflevector <8 x float> %183, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %186 = fadd <4 x float> %184, %185
  %187 = fmul <8 x float> %170, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %188 = fadd <8 x float> %187, %176
  %189 = fadd <8 x float> %145, %188
  %190 = fmul <8 x float> %189, %189
  %191 = shufflevector <8 x float> %190, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %192 = shufflevector <8 x float> %190, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %193 = fadd <4 x float> %191, %192
  %194 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 6
  %195 = load float, float* %194, align 4
  %196 = fcmp olt <4 x float> %186, %193
  %197 = sext <4 x i1> %196 to <4 x i32>
  %198 = bitcast <4 x i32> %197 to <2 x i64>
  %199 = extractelement <2 x i64> %198, i32 0
  %200 = extractelement <2 x i64> %198, i32 1
  %201 = bitcast i64 %199 to <2 x i32>
  %202 = shufflevector <2 x i32> %201, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %203 = bitcast i64 %200 to <2 x i32>
  %204 = shufflevector <2 x i32> %203, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %205 = shufflevector <4 x i32> %202, <4 x i32> %204, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %206 = bitcast <4 x float> %193 to <2 x i64>
  %207 = extractelement <2 x i64> %206, i32 0
  %208 = bitcast i64 %207 to <2 x i32>
  %209 = shufflevector <4 x float> %193, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %210 = bitcast <2 x float> %209 to <2 x i32>
  %211 = shufflevector <2 x i32> %208, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %212 = shufflevector <2 x i32> %210, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %213 = shufflevector <4 x i32> %211, <4 x i32> %212, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %214 = and <4 x i32> %205, %213
  %215 = bitcast <4 x i32> %214 to <2 x i64>
  %216 = extractelement <2 x i64> %215, i32 0
  %217 = extractelement <2 x i64> %215, i32 1
  %218 = bitcast i64 %216 to <2 x i32>
  %219 = shufflevector <2 x i32> %218, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %220 = bitcast i64 %217 to <2 x i32>
  %221 = shufflevector <2 x i32> %220, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %222 = shufflevector <4 x i32> %219, <4 x i32> %221, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %223 = bitcast <4 x i32> %205 to <2 x i64>
  %224 = xor <2 x i64> %223, <i64 -1, i64 -1>
  %225 = extractelement <2 x i64> %224, i32 0
  %226 = extractelement <2 x i64> %224, i32 1
  %227 = bitcast i64 %225 to <2 x i32>
  %228 = shufflevector <2 x i32> %227, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %229 = bitcast i64 %226 to <2 x i32>
  %230 = shufflevector <2 x i32> %229, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %231 = shufflevector <4 x i32> %228, <4 x i32> %230, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %232 = bitcast <4 x float> %186 to <2 x i64>
  %233 = extractelement <2 x i64> %232, i32 0
  %234 = bitcast i64 %233 to <2 x i32>
  %235 = shufflevector <4 x float> %186, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %236 = bitcast <2 x float> %235 to <2 x i32>
  %237 = shufflevector <2 x i32> %234, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %238 = shufflevector <2 x i32> %236, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %239 = shufflevector <4 x i32> %237, <4 x i32> %238, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %240 = and <4 x i32> %231, %239
  %241 = bitcast <4 x i32> %240 to <2 x i64>
  %242 = extractelement <2 x i64> %241, i32 0
  %243 = extractelement <2 x i64> %241, i32 1
  %244 = bitcast i64 %242 to <2 x i32>
  %245 = shufflevector <2 x i32> %244, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %246 = bitcast i64 %243 to <2 x i32>
  %247 = shufflevector <2 x i32> %246, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %248 = shufflevector <4 x i32> %245, <4 x i32> %247, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %249 = or <4 x i32> %248, %222
  %250 = bitcast <4 x i32> %249 to <2 x i64>
  %251 = extractelement <2 x i64> %250, i32 0
  %252 = extractelement <2 x i64> %250, i32 1
  %253 = bitcast i64 %251 to <2 x float>
  %254 = bitcast i64 %252 to <2 x float>
  %255 = extractelement <2 x float> %253, i32 0
  %256 = tail call float @sqrtf(float %255) #13
  %257 = extractelement <2 x float> %253, i32 1
  %258 = tail call float @sqrtf(float %257) #13
  %259 = extractelement <2 x float> %254, i32 0
  %260 = tail call float @sqrtf(float %259) #13
  %261 = extractelement <2 x float> %254, i32 1
  %262 = tail call float @sqrtf(float %261) #13
  %263 = insertelement <4 x float> undef, float %256, i32 0
  %264 = insertelement <4 x float> %263, float %258, i32 1
  %265 = insertelement <4 x float> undef, float %260, i32 2
  %266 = insertelement <4 x float> %265, float %262, i32 3
  %267 = shufflevector <4 x float> %264, <4 x float> %266, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %268 = insertelement <4 x float> undef, float %195, i32 0
  %269 = shufflevector <4 x float> %268, <4 x float> undef, <4 x i32> zeroinitializer
  %270 = fmul <4 x float> %269, %267
  %271 = extractelement <4 x float> %270, i32 0
  %272 = tail call float @sqrtf(float %271) #13
  %273 = extractelement <4 x float> %270, i32 1
  %274 = tail call float @sqrtf(float %273) #13
  %275 = extractelement <4 x float> %270, i32 2
  %276 = tail call float @sqrtf(float %275) #13
  %277 = extractelement <4 x float> %270, i32 3
  %278 = tail call float @sqrtf(float %277) #13
  %279 = insertelement <4 x float> undef, float %272, i32 0
  %280 = insertelement <4 x float> %279, float %274, i32 1
  %281 = insertelement <4 x float> undef, float %276, i32 2
  %282 = insertelement <4 x float> %281, float %278, i32 3
  %283 = fsub <8 x float> %145, %142
  %284 = fcmp oeq <8 x float> %283, zeroinitializer
  %285 = sext <8 x i1> %284 to <8 x i32>
  %286 = fsub <8 x float> %170, %142
  %287 = shufflevector <8 x i32> %285, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %288 = shufflevector <8 x i32> %285, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %289 = and <4 x i32> %288, %287
  %290 = bitcast <4 x i32> %289 to <2 x i64>
  %291 = extractelement <2 x i64> %290, i32 0
  %292 = extractelement <2 x i64> %290, i32 1
  %293 = bitcast i64 %291 to <2 x i32>
  %294 = shufflevector <2 x i32> %293, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %295 = bitcast i64 %292 to <2 x i32>
  %296 = shufflevector <2 x i32> %295, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %297 = shufflevector <4 x i32> %294, <4 x i32> %296, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %298 = shufflevector <8 x float> %286, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %299 = bitcast <2 x float> %298 to <2 x i32>
  %300 = shufflevector <8 x float> %286, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %301 = bitcast <2 x float> %300 to <2 x i32>
  %302 = shufflevector <2 x i32> %299, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %303 = shufflevector <2 x i32> %301, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %304 = shufflevector <4 x i32> %302, <4 x i32> %303, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %305 = and <4 x i32> %297, %304
  %306 = bitcast <4 x i32> %305 to <2 x i64>
  %307 = extractelement <2 x i64> %306, i32 0
  %308 = extractelement <2 x i64> %306, i32 1
  %309 = bitcast i64 %307 to <2 x i32>
  %310 = shufflevector <2 x i32> %309, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %311 = bitcast i64 %308 to <2 x i32>
  %312 = shufflevector <2 x i32> %311, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %313 = shufflevector <4 x i32> %310, <4 x i32> %312, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %314 = bitcast <4 x i32> %297 to <2 x i64>
  %315 = xor <2 x i64> %314, <i64 -1, i64 -1>
  %316 = extractelement <2 x i64> %315, i32 0
  %317 = extractelement <2 x i64> %315, i32 1
  %318 = bitcast i64 %316 to <2 x i32>
  %319 = shufflevector <2 x i32> %318, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %320 = bitcast i64 %317 to <2 x i32>
  %321 = shufflevector <2 x i32> %320, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %322 = shufflevector <4 x i32> %319, <4 x i32> %321, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %323 = shufflevector <8 x float> %283, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %324 = bitcast <2 x float> %323 to <2 x i32>
  %325 = shufflevector <8 x float> %283, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %326 = bitcast <2 x float> %325 to <2 x i32>
  %327 = shufflevector <2 x i32> %324, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %328 = shufflevector <2 x i32> %326, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %329 = shufflevector <4 x i32> %327, <4 x i32> %328, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %330 = and <4 x i32> %322, %329
  %331 = bitcast <4 x i32> %330 to <2 x i64>
  %332 = extractelement <2 x i64> %331, i32 0
  %333 = extractelement <2 x i64> %331, i32 1
  %334 = bitcast i64 %332 to <2 x i32>
  %335 = shufflevector <2 x i32> %334, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %336 = bitcast i64 %333 to <2 x i32>
  %337 = shufflevector <2 x i32> %336, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %338 = shufflevector <4 x i32> %335, <4 x i32> %337, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %339 = or <4 x i32> %338, %313
  %340 = bitcast <4 x i32> %339 to <2 x i64>
  %341 = extractelement <2 x i64> %340, i32 0
  %342 = extractelement <2 x i64> %340, i32 1
  %343 = shufflevector <8 x float> %286, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %344 = bitcast <2 x float> %343 to <2 x i32>
  %345 = shufflevector <8 x float> %286, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %346 = bitcast <2 x float> %345 to <2 x i32>
  %347 = shufflevector <2 x i32> %344, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %348 = shufflevector <2 x i32> %346, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %349 = shufflevector <4 x i32> %347, <4 x i32> %348, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %350 = and <4 x i32> %297, %349
  %351 = bitcast <4 x i32> %350 to <2 x i64>
  %352 = extractelement <2 x i64> %351, i32 0
  %353 = extractelement <2 x i64> %351, i32 1
  %354 = bitcast i64 %352 to <2 x i32>
  %355 = shufflevector <2 x i32> %354, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %356 = bitcast i64 %353 to <2 x i32>
  %357 = shufflevector <2 x i32> %356, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %358 = shufflevector <4 x i32> %355, <4 x i32> %357, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %359 = shufflevector <8 x float> %283, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %360 = bitcast <2 x float> %359 to <2 x i32>
  %361 = shufflevector <8 x float> %283, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %362 = bitcast <2 x float> %361 to <2 x i32>
  %363 = shufflevector <2 x i32> %360, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %364 = shufflevector <2 x i32> %362, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %365 = shufflevector <4 x i32> %363, <4 x i32> %364, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %366 = and <4 x i32> %322, %365
  %367 = bitcast <4 x i32> %366 to <2 x i64>
  %368 = extractelement <2 x i64> %367, i32 0
  %369 = extractelement <2 x i64> %367, i32 1
  %370 = bitcast i64 %368 to <2 x i32>
  %371 = shufflevector <2 x i32> %370, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %372 = bitcast i64 %369 to <2 x i32>
  %373 = shufflevector <2 x i32> %372, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %374 = shufflevector <4 x i32> %371, <4 x i32> %373, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %375 = or <4 x i32> %374, %358
  %376 = bitcast <4 x i32> %375 to <2 x i64>
  %377 = extractelement <2 x i64> %376, i32 0
  %378 = extractelement <2 x i64> %376, i32 1
  %379 = bitcast i64 %341 to <2 x float>
  %380 = shufflevector <2 x float> %379, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %381 = bitcast i64 %342 to <2 x float>
  %382 = shufflevector <2 x float> %381, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %383 = shufflevector <8 x float> %380, <8 x float> %382, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %384 = bitcast i64 %377 to <2 x float>
  %385 = shufflevector <2 x float> %384, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %386 = shufflevector <8 x float> %383, <8 x float> %385, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %387 = bitcast i64 %378 to <2 x float>
  %388 = shufflevector <2 x float> %387, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1>
  %389 = shufflevector <8 x float> %386, <8 x float> %388, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 15>
  %390 = fsub <8 x float> %176, %170
  %391 = fcmp oeq <8 x float> %390, zeroinitializer
  %392 = sext <8 x i1> %391 to <8 x i32>
  %393 = fsub <8 x float> %176, %145
  %394 = shufflevector <8 x i32> %392, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %395 = shufflevector <8 x i32> %392, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %396 = and <4 x i32> %395, %394
  %397 = bitcast <4 x i32> %396 to <2 x i64>
  %398 = extractelement <2 x i64> %397, i32 0
  %399 = extractelement <2 x i64> %397, i32 1
  %400 = bitcast i64 %398 to <2 x i32>
  %401 = shufflevector <2 x i32> %400, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %402 = bitcast i64 %399 to <2 x i32>
  %403 = shufflevector <2 x i32> %402, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %404 = shufflevector <4 x i32> %401, <4 x i32> %403, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %405 = shufflevector <8 x float> %393, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %406 = bitcast <2 x float> %405 to <2 x i32>
  %407 = shufflevector <8 x float> %393, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %408 = bitcast <2 x float> %407 to <2 x i32>
  %409 = shufflevector <2 x i32> %406, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %410 = shufflevector <2 x i32> %408, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %411 = shufflevector <4 x i32> %409, <4 x i32> %410, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %412 = and <4 x i32> %404, %411
  %413 = bitcast <4 x i32> %412 to <2 x i64>
  %414 = extractelement <2 x i64> %413, i32 0
  %415 = extractelement <2 x i64> %413, i32 1
  %416 = bitcast i64 %414 to <2 x i32>
  %417 = shufflevector <2 x i32> %416, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %418 = bitcast i64 %415 to <2 x i32>
  %419 = shufflevector <2 x i32> %418, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %420 = shufflevector <4 x i32> %417, <4 x i32> %419, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %421 = bitcast <4 x i32> %404 to <2 x i64>
  %422 = xor <2 x i64> %421, <i64 -1, i64 -1>
  %423 = extractelement <2 x i64> %422, i32 0
  %424 = extractelement <2 x i64> %422, i32 1
  %425 = bitcast i64 %423 to <2 x i32>
  %426 = shufflevector <2 x i32> %425, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %427 = bitcast i64 %424 to <2 x i32>
  %428 = shufflevector <2 x i32> %427, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %429 = shufflevector <4 x i32> %426, <4 x i32> %428, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %430 = shufflevector <8 x float> %390, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %431 = bitcast <2 x float> %430 to <2 x i32>
  %432 = shufflevector <8 x float> %390, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %433 = bitcast <2 x float> %432 to <2 x i32>
  %434 = shufflevector <2 x i32> %431, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %435 = shufflevector <2 x i32> %433, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %436 = shufflevector <4 x i32> %434, <4 x i32> %435, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %437 = and <4 x i32> %429, %436
  %438 = bitcast <4 x i32> %437 to <2 x i64>
  %439 = extractelement <2 x i64> %438, i32 0
  %440 = extractelement <2 x i64> %438, i32 1
  %441 = bitcast i64 %439 to <2 x i32>
  %442 = shufflevector <2 x i32> %441, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %443 = bitcast i64 %440 to <2 x i32>
  %444 = shufflevector <2 x i32> %443, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %445 = shufflevector <4 x i32> %442, <4 x i32> %444, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %446 = or <4 x i32> %445, %420
  %447 = bitcast <4 x i32> %446 to <2 x i64>
  %448 = extractelement <2 x i64> %447, i32 0
  %449 = extractelement <2 x i64> %447, i32 1
  %450 = shufflevector <8 x float> %393, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %451 = bitcast <2 x float> %450 to <2 x i32>
  %452 = shufflevector <8 x float> %393, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %453 = bitcast <2 x float> %452 to <2 x i32>
  %454 = shufflevector <2 x i32> %451, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %455 = shufflevector <2 x i32> %453, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %456 = shufflevector <4 x i32> %454, <4 x i32> %455, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %457 = and <4 x i32> %404, %456
  %458 = bitcast <4 x i32> %457 to <2 x i64>
  %459 = extractelement <2 x i64> %458, i32 0
  %460 = extractelement <2 x i64> %458, i32 1
  %461 = bitcast i64 %459 to <2 x i32>
  %462 = shufflevector <2 x i32> %461, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %463 = bitcast i64 %460 to <2 x i32>
  %464 = shufflevector <2 x i32> %463, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %465 = shufflevector <4 x i32> %462, <4 x i32> %464, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %466 = shufflevector <8 x float> %390, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %467 = bitcast <2 x float> %466 to <2 x i32>
  %468 = shufflevector <8 x float> %390, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %469 = bitcast <2 x float> %468 to <2 x i32>
  %470 = shufflevector <2 x i32> %467, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %471 = shufflevector <2 x i32> %469, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %472 = shufflevector <4 x i32> %470, <4 x i32> %471, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %473 = and <4 x i32> %429, %472
  %474 = bitcast <4 x i32> %473 to <2 x i64>
  %475 = extractelement <2 x i64> %474, i32 0
  %476 = extractelement <2 x i64> %474, i32 1
  %477 = bitcast i64 %475 to <2 x i32>
  %478 = shufflevector <2 x i32> %477, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %479 = bitcast i64 %476 to <2 x i32>
  %480 = shufflevector <2 x i32> %479, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %481 = shufflevector <4 x i32> %478, <4 x i32> %480, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %482 = or <4 x i32> %481, %465
  %483 = bitcast <4 x i32> %482 to <2 x i64>
  %484 = extractelement <2 x i64> %483, i32 0
  %485 = extractelement <2 x i64> %483, i32 1
  %486 = bitcast i64 %448 to <2 x float>
  %487 = shufflevector <2 x float> %486, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %488 = bitcast i64 %449 to <2 x float>
  %489 = shufflevector <2 x float> %488, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %490 = shufflevector <8 x float> %487, <8 x float> %489, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %491 = bitcast i64 %484 to <2 x float>
  %492 = shufflevector <2 x float> %491, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %493 = shufflevector <8 x float> %490, <8 x float> %492, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %494 = bitcast i64 %485 to <2 x float>
  %495 = shufflevector <2 x float> %494, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1>
  %496 = shufflevector <8 x float> %493, <8 x float> %495, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 15>
  %497 = fmul <8 x float> %389, %389
  %498 = fmul <8 x float> %496, %496
  %499 = fmul <8 x float> %389, %496
  %500 = shufflevector <8 x float> %499, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %501 = shufflevector <8 x float> %499, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %502 = fadd <4 x float> %500, %501
  %503 = shufflevector <8 x float> %497, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %504 = shufflevector <8 x float> %497, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %505 = fadd <4 x float> %503, %504
  %506 = shufflevector <8 x float> %498, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %507 = shufflevector <8 x float> %498, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %508 = fadd <4 x float> %506, %507
  %509 = fmul <4 x float> %505, %508
  %510 = extractelement <4 x float> %509, i32 0
  %511 = tail call float @sqrtf(float %510) #13
  %512 = extractelement <4 x float> %509, i32 1
  %513 = tail call float @sqrtf(float %512) #13
  %514 = extractelement <4 x float> %509, i32 2
  %515 = tail call float @sqrtf(float %514) #13
  %516 = extractelement <4 x float> %509, i32 3
  %517 = tail call float @sqrtf(float %516) #13
  %518 = insertelement <4 x float> undef, float %511, i32 0
  %519 = insertelement <4 x float> %518, float %513, i32 1
  %520 = insertelement <4 x float> undef, float %515, i32 2
  %521 = insertelement <4 x float> %520, float %517, i32 3
  %522 = shufflevector <4 x float> %519, <4 x float> %521, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %523 = fdiv <4 x float> %502, %522
  %524 = fcmp olt <4 x float> %523, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %525 = sext <4 x i1> %524 to <4 x i32>
  %526 = bitcast <4 x i32> %525 to <2 x i64>
  %527 = extractelement <2 x i64> %526, i32 0
  %528 = extractelement <2 x i64> %526, i32 1
  %529 = bitcast i64 %527 to <2 x i32>
  %530 = shufflevector <2 x i32> %529, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %531 = bitcast i64 %528 to <2 x i32>
  %532 = shufflevector <2 x i32> %531, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %533 = shufflevector <4 x i32> %530, <4 x i32> %532, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %534 = bitcast <4 x float> %523 to <2 x i64>
  %535 = extractelement <2 x i64> %534, i32 0
  %536 = bitcast i64 %535 to <2 x i32>
  %537 = shufflevector <4 x float> %523, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %538 = bitcast <2 x float> %537 to <2 x i32>
  %539 = shufflevector <2 x i32> %536, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %540 = shufflevector <2 x i32> %538, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %541 = shufflevector <4 x i32> %539, <4 x i32> %540, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %542 = and <4 x i32> %533, %541
  %543 = bitcast <4 x i32> %542 to <2 x i64>
  %544 = extractelement <2 x i64> %543, i32 0
  %545 = extractelement <2 x i64> %543, i32 1
  %546 = bitcast i64 %544 to <2 x i32>
  %547 = shufflevector <2 x i32> %546, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %548 = bitcast i64 %545 to <2 x i32>
  %549 = shufflevector <2 x i32> %548, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %550 = shufflevector <4 x i32> %547, <4 x i32> %549, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %551 = bitcast <4 x i32> %533 to <2 x i64>
  %552 = xor <2 x i64> %551, <i64 -1, i64 -1>
  %553 = extractelement <2 x i64> %552, i32 0
  %554 = extractelement <2 x i64> %552, i32 1
  %555 = bitcast i64 %553 to <2 x i32>
  %556 = shufflevector <2 x i32> %555, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %557 = bitcast i64 %554 to <2 x i32>
  %558 = shufflevector <2 x i32> %557, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %559 = shufflevector <4 x i32> %556, <4 x i32> %558, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %560 = bitcast <4 x i32> %559 to <2 x i64>
  %561 = and <2 x i64> %560, <i64 4575657222473777152, i64 4575657222473777152>
  %562 = extractelement <2 x i64> %561, i32 0
  %563 = extractelement <2 x i64> %561, i32 1
  %564 = bitcast i64 %562 to <2 x i32>
  %565 = shufflevector <2 x i32> %564, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %566 = bitcast i64 %563 to <2 x i32>
  %567 = shufflevector <2 x i32> %566, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %568 = shufflevector <4 x i32> %565, <4 x i32> %567, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %569 = or <4 x i32> %568, %550
  %570 = bitcast <4 x i32> %569 to <2 x i64>
  %571 = extractelement <2 x i64> %570, i32 0
  %572 = extractelement <2 x i64> %570, i32 1
  %573 = bitcast i64 %571 to <2 x float>
  %574 = bitcast i64 %572 to <2 x float>
  %575 = shufflevector <2 x float> %573, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %576 = shufflevector <2 x float> %574, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %577 = shufflevector <4 x float> %575, <4 x float> %576, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %578 = fcmp olt <4 x float> %577, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %579 = sext <4 x i1> %578 to <4 x i32>
  %580 = bitcast <4 x i32> %579 to <2 x i64>
  %581 = extractelement <2 x i64> %580, i32 0
  %582 = extractelement <2 x i64> %580, i32 1
  %583 = bitcast i64 %581 to <2 x i32>
  %584 = shufflevector <2 x i32> %583, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %585 = bitcast i64 %582 to <2 x i32>
  %586 = shufflevector <2 x i32> %585, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %587 = shufflevector <4 x i32> %584, <4 x i32> %586, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %588 = bitcast <4 x i32> %587 to <2 x i64>
  %589 = and <2 x i64> %588, <i64 -4647714812233515008, i64 -4647714812233515008>
  %590 = extractelement <2 x i64> %589, i32 0
  %591 = extractelement <2 x i64> %589, i32 1
  %592 = bitcast i64 %590 to <2 x i32>
  %593 = shufflevector <2 x i32> %592, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %594 = bitcast i64 %591 to <2 x i32>
  %595 = shufflevector <2 x i32> %594, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %596 = shufflevector <4 x i32> %593, <4 x i32> %595, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %597 = xor <2 x i64> %588, <i64 -1, i64 -1>
  %598 = extractelement <2 x i64> %597, i32 0
  %599 = extractelement <2 x i64> %597, i32 1
  %600 = bitcast i64 %598 to <2 x i32>
  %601 = shufflevector <2 x i32> %600, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %602 = bitcast i64 %599 to <2 x i32>
  %603 = shufflevector <2 x i32> %602, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %604 = shufflevector <4 x i32> %601, <4 x i32> %603, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %605 = bitcast <4 x float> %577 to <2 x i64>
  %606 = extractelement <2 x i64> %605, i32 0
  %607 = bitcast i64 %606 to <2 x i32>
  %608 = bitcast i64 %572 to <2 x i32>
  %609 = shufflevector <2 x i32> %607, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %610 = shufflevector <2 x i32> %608, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %611 = shufflevector <4 x i32> %609, <4 x i32> %610, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %612 = and <4 x i32> %604, %611
  %613 = bitcast <4 x i32> %612 to <2 x i64>
  %614 = extractelement <2 x i64> %613, i32 0
  %615 = extractelement <2 x i64> %613, i32 1
  %616 = bitcast i64 %614 to <2 x i32>
  %617 = shufflevector <2 x i32> %616, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %618 = bitcast i64 %615 to <2 x i32>
  %619 = shufflevector <2 x i32> %618, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %620 = shufflevector <4 x i32> %617, <4 x i32> %619, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %621 = or <4 x i32> %620, %596
  %622 = bitcast <4 x i32> %621 to <2 x i64>
  %623 = extractelement <2 x i64> %622, i32 0
  %624 = extractelement <2 x i64> %622, i32 1
  %625 = bitcast i64 %623 to <2 x float>
  %626 = bitcast i64 %624 to <2 x float>
  %627 = shufflevector <2 x float> %625, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %628 = shufflevector <2 x float> %626, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %629 = shufflevector <4 x float> %627, <4 x float> %628, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %630 = fmul <4 x float> %629, %629
  %631 = fmul <4 x float> %630, <float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %632 = fadd <4 x float> %631, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %633 = fmul <4 x float> %630, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %634 = fadd <4 x float> %633, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %635 = fmul <4 x float> %630, %634
  %636 = fadd <4 x float> %635, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %637 = fdiv <4 x float> %632, %636
  %638 = fmul <4 x float> %629, %637
  %639 = fadd <4 x float> %638, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  br i1 %179, label %942, label %640

640:                                              ; preds = %43
  %641 = load i32, i32* %2, align 32, !noalias !62
  %642 = icmp eq i32 %641, 4
  br i1 %642, label %643, label %647

643:                                              ; preds = %640
  %644 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 1
  %645 = bitcast [8 x float]* %644 to <8 x float>*
  %646 = load <8 x float>, <8 x float>* %645, align 1
  br label %681

647:                                              ; preds = %640
  %648 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 1, i64 0
  %649 = bitcast float* %648 to i32*
  %650 = load i32, i32* %649, align 4, !noalias !62
  %651 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 1, i64 1
  %652 = bitcast float* %651 to i32*
  %653 = load i32, i32* %652, align 4, !noalias !62
  %654 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 1, i64 2
  %655 = load float, float* %654, align 4, !noalias !62
  %656 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 1, i64 4
  %657 = bitcast float* %656 to i32*
  %658 = load i32, i32* %657, align 4, !noalias !62
  %659 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 1, i64 5
  %660 = bitcast float* %659 to i32*
  %661 = load i32, i32* %660, align 4, !noalias !62
  %662 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 0, i32 1, i64 6
  %663 = load float, float* %662, align 4, !noalias !62
  %664 = zext i32 %653 to i64
  %665 = shl nuw i64 %664, 32
  %666 = zext i32 %650 to i64
  %667 = or i64 %665, %666
  %668 = bitcast i64 %667 to <2 x float>
  %669 = shufflevector <2 x float> %668, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %670 = insertelement <8 x float> %669, float 0.000000e+00, i32 3
  %671 = insertelement <8 x float> %670, float %655, i32 2
  %672 = zext i32 %661 to i64
  %673 = shl nuw i64 %672, 32
  %674 = zext i32 %658 to i64
  %675 = or i64 %673, %674
  %676 = bitcast i64 %675 to <2 x float>
  %677 = shufflevector <2 x float> %676, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %678 = shufflevector <8 x float> %671, <8 x float> %677, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %679 = insertelement <8 x float> %678, float 0.000000e+00, i32 7
  %680 = insertelement <8 x float> %679, float %663, i32 6
  br label %681

681:                                              ; preds = %647, %643
  %682 = phi <8 x float> [ %646, %643 ], [ %680, %647 ]
  %683 = fcmp oeq <8 x float> %389, zeroinitializer
  %684 = sext <8 x i1> %683 to <8 x i32>
  %685 = shufflevector <8 x i32> %684, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %686 = shufflevector <8 x i32> %684, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %687 = and <4 x i32> %686, %685
  %688 = bitcast <4 x i32> %687 to <2 x i64>
  %689 = extractelement <2 x i64> %688, i32 0
  %690 = extractelement <2 x i64> %688, i32 1
  %691 = bitcast i64 %689 to <2 x i32>
  %692 = shufflevector <2 x i32> %691, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %693 = bitcast i64 %690 to <2 x i32>
  %694 = shufflevector <2 x i32> %693, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %695 = shufflevector <4 x i32> %692, <4 x i32> %694, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %696 = bitcast i64 %448 to <2 x i32>
  %697 = bitcast i64 %449 to <2 x i32>
  %698 = shufflevector <2 x i32> %696, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %699 = shufflevector <2 x i32> %697, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %700 = shufflevector <4 x i32> %698, <4 x i32> %699, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %701 = and <4 x i32> %700, %695
  %702 = bitcast <4 x i32> %701 to <2 x i64>
  %703 = extractelement <2 x i64> %702, i32 0
  %704 = extractelement <2 x i64> %702, i32 1
  %705 = bitcast i64 %703 to <2 x i32>
  %706 = shufflevector <2 x i32> %705, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %707 = bitcast i64 %704 to <2 x i32>
  %708 = shufflevector <2 x i32> %707, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %709 = shufflevector <4 x i32> %706, <4 x i32> %708, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %710 = bitcast <4 x i32> %695 to <2 x i64>
  %711 = xor <2 x i64> %710, <i64 -1, i64 -1>
  %712 = extractelement <2 x i64> %711, i32 0
  %713 = extractelement <2 x i64> %711, i32 1
  %714 = bitcast i64 %712 to <2 x i32>
  %715 = shufflevector <2 x i32> %714, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %716 = bitcast i64 %713 to <2 x i32>
  %717 = shufflevector <2 x i32> %716, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %718 = shufflevector <4 x i32> %715, <4 x i32> %717, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %719 = bitcast i64 %341 to <2 x i32>
  %720 = bitcast i64 %342 to <2 x i32>
  %721 = shufflevector <2 x i32> %719, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %722 = shufflevector <2 x i32> %720, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %723 = shufflevector <4 x i32> %721, <4 x i32> %722, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %724 = and <4 x i32> %718, %723
  %725 = bitcast <4 x i32> %724 to <2 x i64>
  %726 = extractelement <2 x i64> %725, i32 0
  %727 = extractelement <2 x i64> %725, i32 1
  %728 = bitcast i64 %726 to <2 x i32>
  %729 = shufflevector <2 x i32> %728, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %730 = bitcast i64 %727 to <2 x i32>
  %731 = shufflevector <2 x i32> %730, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %732 = shufflevector <4 x i32> %729, <4 x i32> %731, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %733 = or <4 x i32> %732, %709
  %734 = bitcast <4 x i32> %733 to <2 x i64>
  %735 = extractelement <2 x i64> %734, i32 0
  %736 = extractelement <2 x i64> %734, i32 1
  %737 = bitcast i64 %484 to <2 x i32>
  %738 = bitcast i64 %485 to <2 x i32>
  %739 = shufflevector <2 x i32> %737, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %740 = shufflevector <2 x i32> %738, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %741 = shufflevector <4 x i32> %739, <4 x i32> %740, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %742 = and <4 x i32> %741, %695
  %743 = bitcast <4 x i32> %742 to <2 x i64>
  %744 = extractelement <2 x i64> %743, i32 0
  %745 = extractelement <2 x i64> %743, i32 1
  %746 = bitcast i64 %744 to <2 x i32>
  %747 = shufflevector <2 x i32> %746, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %748 = bitcast i64 %745 to <2 x i32>
  %749 = shufflevector <2 x i32> %748, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %750 = shufflevector <4 x i32> %747, <4 x i32> %749, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %751 = bitcast i64 %377 to <2 x i32>
  %752 = bitcast i64 %378 to <2 x i32>
  %753 = shufflevector <2 x i32> %751, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %754 = shufflevector <2 x i32> %752, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %755 = shufflevector <4 x i32> %753, <4 x i32> %754, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %756 = and <4 x i32> %718, %755
  %757 = bitcast <4 x i32> %756 to <2 x i64>
  %758 = extractelement <2 x i64> %757, i32 0
  %759 = extractelement <2 x i64> %757, i32 1
  %760 = bitcast i64 %758 to <2 x i32>
  %761 = shufflevector <2 x i32> %760, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %762 = bitcast i64 %759 to <2 x i32>
  %763 = shufflevector <2 x i32> %762, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %764 = shufflevector <4 x i32> %761, <4 x i32> %763, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %765 = or <4 x i32> %764, %750
  %766 = bitcast <4 x i32> %765 to <2 x i64>
  %767 = extractelement <2 x i64> %766, i32 0
  %768 = extractelement <2 x i64> %766, i32 1
  %769 = trunc i64 %735 to i32
  %770 = lshr i64 %735, 32
  %771 = trunc i64 %770 to i32
  %772 = trunc i64 %736 to i32
  %773 = lshr i64 %736, 32
  %774 = trunc i64 %773 to i32
  %775 = trunc i64 %767 to i32
  %776 = lshr i64 %767, 32
  %777 = trunc i64 %776 to i32
  %778 = trunc i64 %768 to i32
  %779 = lshr i64 %768, 32
  %780 = trunc i64 %779 to i32
  %781 = fsub <8 x float> %142, %682
  %782 = bitcast i32 %769 to float
  %783 = insertelement <8 x float> undef, float %782, i32 0
  %784 = bitcast i32 %771 to float
  %785 = insertelement <8 x float> %783, float %784, i32 1
  %786 = bitcast i32 %772 to float
  %787 = insertelement <8 x float> %785, float %786, i32 2
  %788 = bitcast i32 %774 to float
  %789 = insertelement <8 x float> %787, float %788, i32 3
  %790 = bitcast i32 %775 to float
  %791 = insertelement <8 x float> %789, float %790, i32 4
  %792 = bitcast i32 %777 to float
  %793 = insertelement <8 x float> %791, float %792, i32 5
  %794 = bitcast i32 %778 to float
  %795 = insertelement <8 x float> %793, float %794, i32 6
  %796 = bitcast i32 %780 to float
  %797 = insertelement <8 x float> %795, float %796, i32 7
  %798 = fmul <8 x float> %781, %781
  %799 = fmul <8 x float> %797, %797
  %800 = fmul <8 x float> %797, %781
  %801 = shufflevector <8 x float> %800, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %802 = shufflevector <8 x float> %800, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %803 = fadd <4 x float> %801, %802
  %804 = shufflevector <8 x float> %798, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %805 = shufflevector <8 x float> %798, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %806 = fadd <4 x float> %804, %805
  %807 = shufflevector <8 x float> %799, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %808 = shufflevector <8 x float> %799, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %809 = fadd <4 x float> %807, %808
  %810 = fmul <4 x float> %809, %806
  %811 = extractelement <4 x float> %810, i32 0
  %812 = tail call float @sqrtf(float %811) #13
  %813 = extractelement <4 x float> %810, i32 1
  %814 = tail call float @sqrtf(float %813) #13
  %815 = extractelement <4 x float> %810, i32 2
  %816 = tail call float @sqrtf(float %815) #13
  %817 = extractelement <4 x float> %810, i32 3
  %818 = tail call float @sqrtf(float %817) #13
  %819 = insertelement <4 x float> undef, float %812, i32 0
  %820 = insertelement <4 x float> %819, float %814, i32 1
  %821 = insertelement <4 x float> undef, float %816, i32 2
  %822 = insertelement <4 x float> %821, float %818, i32 3
  %823 = shufflevector <4 x float> %820, <4 x float> %822, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %824 = fdiv <4 x float> %803, %823
  %825 = fcmp olt <4 x float> %824, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %826 = sext <4 x i1> %825 to <4 x i32>
  %827 = bitcast <4 x i32> %826 to <2 x i64>
  %828 = extractelement <2 x i64> %827, i32 0
  %829 = extractelement <2 x i64> %827, i32 1
  %830 = bitcast i64 %828 to <2 x i32>
  %831 = shufflevector <2 x i32> %830, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %832 = bitcast i64 %829 to <2 x i32>
  %833 = shufflevector <2 x i32> %832, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %834 = shufflevector <4 x i32> %831, <4 x i32> %833, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %835 = bitcast <4 x float> %824 to <2 x i64>
  %836 = extractelement <2 x i64> %835, i32 0
  %837 = bitcast i64 %836 to <2 x i32>
  %838 = shufflevector <4 x float> %824, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %839 = bitcast <2 x float> %838 to <2 x i32>
  %840 = shufflevector <2 x i32> %837, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %841 = shufflevector <2 x i32> %839, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %842 = shufflevector <4 x i32> %840, <4 x i32> %841, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %843 = and <4 x i32> %834, %842
  %844 = bitcast <4 x i32> %843 to <2 x i64>
  %845 = extractelement <2 x i64> %844, i32 0
  %846 = extractelement <2 x i64> %844, i32 1
  %847 = bitcast i64 %845 to <2 x i32>
  %848 = shufflevector <2 x i32> %847, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %849 = bitcast i64 %846 to <2 x i32>
  %850 = shufflevector <2 x i32> %849, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %851 = shufflevector <4 x i32> %848, <4 x i32> %850, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %852 = bitcast <4 x i32> %834 to <2 x i64>
  %853 = xor <2 x i64> %852, <i64 -1, i64 -1>
  %854 = extractelement <2 x i64> %853, i32 0
  %855 = extractelement <2 x i64> %853, i32 1
  %856 = bitcast i64 %854 to <2 x i32>
  %857 = shufflevector <2 x i32> %856, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %858 = bitcast i64 %855 to <2 x i32>
  %859 = shufflevector <2 x i32> %858, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %860 = shufflevector <4 x i32> %857, <4 x i32> %859, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %861 = bitcast <4 x i32> %860 to <2 x i64>
  %862 = and <2 x i64> %861, <i64 4575657222473777152, i64 4575657222473777152>
  %863 = extractelement <2 x i64> %862, i32 0
  %864 = extractelement <2 x i64> %862, i32 1
  %865 = bitcast i64 %863 to <2 x i32>
  %866 = shufflevector <2 x i32> %865, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %867 = bitcast i64 %864 to <2 x i32>
  %868 = shufflevector <2 x i32> %867, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %869 = shufflevector <4 x i32> %866, <4 x i32> %868, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %870 = or <4 x i32> %869, %851
  %871 = bitcast <4 x i32> %870 to <2 x i64>
  %872 = extractelement <2 x i64> %871, i32 0
  %873 = extractelement <2 x i64> %871, i32 1
  %874 = bitcast i64 %872 to <2 x float>
  %875 = bitcast i64 %873 to <2 x float>
  %876 = shufflevector <2 x float> %874, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %877 = shufflevector <2 x float> %875, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %878 = shufflevector <4 x float> %876, <4 x float> %877, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %879 = fcmp olt <4 x float> %878, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %880 = sext <4 x i1> %879 to <4 x i32>
  %881 = bitcast <4 x i32> %880 to <2 x i64>
  %882 = extractelement <2 x i64> %881, i32 0
  %883 = extractelement <2 x i64> %881, i32 1
  %884 = bitcast i64 %882 to <2 x i32>
  %885 = shufflevector <2 x i32> %884, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %886 = bitcast i64 %883 to <2 x i32>
  %887 = shufflevector <2 x i32> %886, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %888 = shufflevector <4 x i32> %885, <4 x i32> %887, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %889 = bitcast <4 x i32> %888 to <2 x i64>
  %890 = and <2 x i64> %889, <i64 -4647714812233515008, i64 -4647714812233515008>
  %891 = extractelement <2 x i64> %890, i32 0
  %892 = extractelement <2 x i64> %890, i32 1
  %893 = bitcast i64 %891 to <2 x i32>
  %894 = shufflevector <2 x i32> %893, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %895 = bitcast i64 %892 to <2 x i32>
  %896 = shufflevector <2 x i32> %895, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %897 = shufflevector <4 x i32> %894, <4 x i32> %896, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %898 = xor <2 x i64> %889, <i64 -1, i64 -1>
  %899 = extractelement <2 x i64> %898, i32 0
  %900 = extractelement <2 x i64> %898, i32 1
  %901 = bitcast i64 %899 to <2 x i32>
  %902 = shufflevector <2 x i32> %901, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %903 = bitcast i64 %900 to <2 x i32>
  %904 = shufflevector <2 x i32> %903, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %905 = shufflevector <4 x i32> %902, <4 x i32> %904, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %906 = bitcast <4 x float> %878 to <2 x i64>
  %907 = extractelement <2 x i64> %906, i32 0
  %908 = bitcast i64 %907 to <2 x i32>
  %909 = bitcast i64 %873 to <2 x i32>
  %910 = shufflevector <2 x i32> %908, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %911 = shufflevector <2 x i32> %909, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %912 = shufflevector <4 x i32> %910, <4 x i32> %911, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %913 = and <4 x i32> %905, %912
  %914 = bitcast <4 x i32> %913 to <2 x i64>
  %915 = extractelement <2 x i64> %914, i32 0
  %916 = extractelement <2 x i64> %914, i32 1
  %917 = bitcast i64 %915 to <2 x i32>
  %918 = shufflevector <2 x i32> %917, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %919 = bitcast i64 %916 to <2 x i32>
  %920 = shufflevector <2 x i32> %919, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %921 = shufflevector <4 x i32> %918, <4 x i32> %920, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %922 = or <4 x i32> %921, %897
  %923 = bitcast <4 x i32> %922 to <2 x i64>
  %924 = extractelement <2 x i64> %923, i32 0
  %925 = extractelement <2 x i64> %923, i32 1
  %926 = bitcast i64 %924 to <2 x float>
  %927 = bitcast i64 %925 to <2 x float>
  %928 = shufflevector <2 x float> %926, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %929 = shufflevector <2 x float> %927, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %930 = shufflevector <4 x float> %928, <4 x float> %929, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %931 = fmul <4 x float> %930, %930
  %932 = fmul <4 x float> %931, <float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %933 = fadd <4 x float> %932, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %934 = fmul <4 x float> %931, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %935 = fadd <4 x float> %934, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %936 = fmul <4 x float> %931, %935
  %937 = fadd <4 x float> %936, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %938 = fdiv <4 x float> %933, %937
  %939 = fmul <4 x float> %930, %938
  %940 = fadd <4 x float> %939, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %941 = fadd <4 x float> %639, %940
  br label %942

942:                                              ; preds = %43, %681
  %943 = phi <4 x float> [ %941, %681 ], [ %639, %43 ]
  %944 = load i32, i32* %2, align 32
  %945 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 1, i64 0
  %946 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 9, i32 1
  %947 = load float, float* %946, align 4
  %948 = insertelement <2 x float> undef, float %947, i32 0
  %949 = shufflevector <2 x float> %948, <2 x float> undef, <4 x i32> zeroinitializer
  %950 = shufflevector <4 x float> %280, <4 x float> %282, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %951 = fmul <4 x float> %943, %949
  %952 = fadd <4 x float> %950, %951
  %953 = bitcast <4 x float> %952 to <2 x i64>
  %954 = extractelement <2 x i64> %953, i32 0
  %955 = extractelement <2 x i64> %953, i32 1
  %956 = bitcast i64 %954 to <2 x i32>
  %957 = shufflevector <2 x i32> %956, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %958 = bitcast i64 %955 to <2 x i32>
  %959 = shufflevector <2 x i32> %958, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %960 = shufflevector <4 x i32> %957, <4 x i32> %959, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %961 = add <4 x i32> %960, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %962 = bitcast <4 x i32> %961 to <2 x i64>
  %963 = extractelement <2 x i64> %962, i32 0
  %964 = extractelement <2 x i64> %962, i32 1
  %965 = bitcast i64 %963 to <2 x i32>
  %966 = bitcast i64 %964 to <2 x i32>
  %967 = shufflevector <2 x i32> %965, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %968 = shufflevector <2 x i32> %966, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %969 = shufflevector <4 x i32> %967, <4 x i32> %968, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %970 = ashr <4 x i32> %969, <i32 23, i32 23, i32 23, i32 23>
  %971 = bitcast <4 x i32> %970 to <2 x i64>
  %972 = extractelement <2 x i64> %971, i32 0
  %973 = extractelement <2 x i64> %971, i32 1
  %974 = bitcast i64 %972 to <2 x i32>
  %975 = shufflevector <2 x i32> %974, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %976 = bitcast i64 %973 to <2 x i32>
  %977 = shufflevector <2 x i32> %976, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %978 = shufflevector <4 x i32> %975, <4 x i32> %977, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %979 = add <4 x i32> %978, <i32 -127, i32 -127, i32 -127, i32 -127>
  %980 = bitcast <4 x i32> %979 to <2 x i64>
  %981 = extractelement <2 x i64> %980, i32 0
  %982 = extractelement <2 x i64> %980, i32 1
  %983 = bitcast i64 %981 to <2 x i32>
  %984 = shufflevector <2 x i32> %983, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %985 = bitcast i64 %982 to <2 x i32>
  %986 = shufflevector <2 x i32> %985, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %987 = shufflevector <4 x i32> %984, <4 x i32> %986, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %988 = icmp sgt <4 x i32> %987, <i32 15, i32 15, i32 15, i32 15>
  %989 = sext <4 x i1> %988 to <4 x i32>
  %990 = bitcast <4 x i32> %989 to <2 x i64>
  %991 = extractelement <2 x i64> %990, i32 0
  %992 = extractelement <2 x i64> %990, i32 1
  %993 = bitcast i64 %991 to <2 x i32>
  %994 = shufflevector <2 x i32> %993, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %995 = bitcast i64 %992 to <2 x i32>
  %996 = shufflevector <2 x i32> %995, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %997 = shufflevector <4 x i32> %994, <4 x i32> %996, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %998 = bitcast <4 x i32> %997 to <2 x i64>
  %999 = and <2 x i64> %998, <i64 64424509455, i64 64424509455>
  %1000 = extractelement <2 x i64> %999, i32 0
  %1001 = extractelement <2 x i64> %999, i32 1
  %1002 = bitcast i64 %1000 to <2 x i32>
  %1003 = shufflevector <2 x i32> %1002, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1004 = bitcast i64 %1001 to <2 x i32>
  %1005 = shufflevector <2 x i32> %1004, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1006 = shufflevector <4 x i32> %1003, <4 x i32> %1005, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1007 = xor <2 x i64> %998, <i64 -1, i64 -1>
  %1008 = extractelement <2 x i64> %1007, i32 0
  %1009 = extractelement <2 x i64> %1007, i32 1
  %1010 = bitcast i64 %1008 to <2 x i32>
  %1011 = shufflevector <2 x i32> %1010, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1012 = bitcast i64 %1009 to <2 x i32>
  %1013 = shufflevector <2 x i32> %1012, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1014 = shufflevector <4 x i32> %1011, <4 x i32> %1013, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1015 = bitcast <4 x i32> %987 to <2 x i64>
  %1016 = extractelement <2 x i64> %1015, i32 0
  %1017 = bitcast i64 %1016 to <2 x i32>
  %1018 = shufflevector <2 x i32> %1017, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1019 = shufflevector <4 x i32> %1018, <4 x i32> %986, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1020 = and <4 x i32> %1014, %1019
  %1021 = bitcast <4 x i32> %1020 to <2 x i64>
  %1022 = extractelement <2 x i64> %1021, i32 0
  %1023 = extractelement <2 x i64> %1021, i32 1
  %1024 = bitcast i64 %1022 to <2 x i32>
  %1025 = shufflevector <2 x i32> %1024, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1026 = bitcast i64 %1023 to <2 x i32>
  %1027 = shufflevector <2 x i32> %1026, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1028 = shufflevector <4 x i32> %1025, <4 x i32> %1027, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1029 = or <4 x i32> %1028, %1006
  %1030 = bitcast <4 x i32> %1029 to <2 x i64>
  %1031 = extractelement <2 x i64> %1030, i32 0
  %1032 = extractelement <2 x i64> %1030, i32 1
  %1033 = bitcast i64 %1031 to <2 x i32>
  %1034 = shufflevector <2 x i32> %1033, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1035 = bitcast i64 %1032 to <2 x i32>
  %1036 = shufflevector <2 x i32> %1035, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1037 = shufflevector <4 x i32> %1034, <4 x i32> %1036, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1038 = icmp sgt <4 x i32> %1037, zeroinitializer
  %1039 = sext <4 x i1> %1038 to <4 x i32>
  %1040 = bitcast <4 x i32> %1039 to <2 x i64>
  %1041 = extractelement <2 x i64> %1040, i32 0
  %1042 = extractelement <2 x i64> %1040, i32 1
  %1043 = bitcast i64 %1041 to <2 x i32>
  %1044 = shufflevector <2 x i32> %1043, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1045 = bitcast i64 %1042 to <2 x i32>
  %1046 = shufflevector <2 x i32> %1045, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1047 = shufflevector <4 x i32> %1044, <4 x i32> %1046, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1048 = bitcast <4 x i32> %1037 to <2 x i64>
  %1049 = extractelement <2 x i64> %1048, i32 0
  %1050 = bitcast i64 %1049 to <2 x i32>
  %1051 = shufflevector <2 x i32> %1050, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1052 = shufflevector <4 x i32> %1051, <4 x i32> %1036, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1053 = and <4 x i32> %1047, %1052
  %1054 = bitcast <4 x i32> %1053 to <2 x i64>
  %1055 = extractelement <2 x i64> %1054, i32 0
  %1056 = extractelement <2 x i64> %1054, i32 1
  %1057 = bitcast i64 %1055 to <2 x i32>
  %1058 = shufflevector <2 x i32> %1057, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1059 = bitcast i64 %1056 to <2 x i32>
  %1060 = shufflevector <2 x i32> %1059, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1061 = shufflevector <4 x i32> %1058, <4 x i32> %1060, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1062 = bitcast <4 x i32> %1061 to <2 x i64>
  %1063 = extractelement <2 x i64> %1062, i32 0
  %1064 = extractelement <2 x i64> %1062, i32 1
  %1065 = lshr i64 %1063, 32
  switch i32 %944, label %1066 [
    i32 4, label %1067
    i32 3, label %1079
    i32 2, label %1090
    i32 1, label %1101
  ]

1066:                                             ; preds = %942
  tail call void @llvm.trap() #13
  unreachable

1067:                                             ; preds = %942
  %1068 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1069 = load i32*, i32** %1068, align 8
  %1070 = lshr i64 %1064, 32
  %1071 = trunc i64 %1070 to i8
  %1072 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 1, i64 3
  %1073 = load i8*, i8** %1072, align 8
  store i8 %1071, i8* %1073, align 1
  %1074 = shl i64 %1070, 56
  %1075 = ashr exact i64 %1074, 56
  %1076 = getelementptr inbounds i32, i32* %1069, i64 %1075
  %1077 = load i32, i32* %1076, align 4
  %1078 = add nsw i32 %1077, 1
  store i32 %1078, i32* %1076, align 4
  br label %1079

1079:                                             ; preds = %942, %1067
  %1080 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1081 = load i32*, i32** %1080, align 8
  %1082 = trunc i64 %1064 to i8
  %1083 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 1, i64 2
  %1084 = load i8*, i8** %1083, align 8
  store i8 %1082, i8* %1084, align 1
  %1085 = shl i64 %1064, 56
  %1086 = ashr exact i64 %1085, 56
  %1087 = getelementptr inbounds i32, i32* %1081, i64 %1086
  %1088 = load i32, i32* %1087, align 4
  %1089 = add nsw i32 %1088, 1
  store i32 %1089, i32* %1087, align 4
  br label %1090

1090:                                             ; preds = %942, %1079
  %1091 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1092 = load i32*, i32** %1091, align 8
  %1093 = trunc i64 %1065 to i8
  %1094 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 1, i64 1
  %1095 = load i8*, i8** %1094, align 8
  store i8 %1093, i8* %1095, align 1
  %1096 = shl i64 %1065, 56
  %1097 = ashr exact i64 %1096, 56
  %1098 = getelementptr inbounds i32, i32* %1092, i64 %1097
  %1099 = load i32, i32* %1098, align 4
  %1100 = add nsw i32 %1099, 1
  store i32 %1100, i32* %1098, align 4
  br label %1101

1101:                                             ; preds = %942, %1090
  %1102 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 7
  %1103 = load i32*, i32** %1102, align 8
  %1104 = trunc i64 %1063 to i8
  %1105 = load i8*, i8** %945, align 8
  store i8 %1104, i8* %1105, align 1
  %1106 = shl i64 %1063, 56
  %1107 = ashr exact i64 %1106, 56
  %1108 = getelementptr inbounds i32, i32* %1103, i64 %1107
  %1109 = load i32, i32* %1108, align 4
  %1110 = add nsw i32 %1109, 1
  store i32 %1110, i32* %1108, align 4
  %1111 = fmul <8 x float> %173, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %1112 = fadd <8 x float> %167, %1111
  %1113 = fadd <8 x float> %1112, %176
  %1114 = fmul <8 x float> %1113, %1113
  %1115 = shufflevector <8 x float> %1114, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1116 = shufflevector <8 x float> %1114, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1117 = fadd <4 x float> %1115, %1116
  %1118 = fmul <8 x float> %167, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %1119 = fadd <8 x float> %164, %1118
  %1120 = fadd <8 x float> %1119, %173
  %1121 = fmul <8 x float> %1120, %1120
  %1122 = shufflevector <8 x float> %1121, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1123 = shufflevector <8 x float> %1121, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1124 = fadd <4 x float> %1122, %1123
  %1125 = load float, float* %194, align 4
  %1126 = fcmp olt <4 x float> %1117, %1124
  %1127 = sext <4 x i1> %1126 to <4 x i32>
  %1128 = bitcast <4 x i32> %1127 to <2 x i64>
  %1129 = extractelement <2 x i64> %1128, i32 0
  %1130 = extractelement <2 x i64> %1128, i32 1
  %1131 = bitcast i64 %1129 to <2 x i32>
  %1132 = shufflevector <2 x i32> %1131, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1133 = bitcast i64 %1130 to <2 x i32>
  %1134 = shufflevector <2 x i32> %1133, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1135 = shufflevector <4 x i32> %1132, <4 x i32> %1134, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1136 = bitcast <4 x float> %1124 to <2 x i64>
  %1137 = extractelement <2 x i64> %1136, i32 0
  %1138 = bitcast i64 %1137 to <2 x i32>
  %1139 = shufflevector <4 x float> %1124, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1140 = bitcast <2 x float> %1139 to <2 x i32>
  %1141 = shufflevector <2 x i32> %1138, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1142 = shufflevector <2 x i32> %1140, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1143 = shufflevector <4 x i32> %1141, <4 x i32> %1142, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1144 = and <4 x i32> %1135, %1143
  %1145 = bitcast <4 x i32> %1144 to <2 x i64>
  %1146 = extractelement <2 x i64> %1145, i32 0
  %1147 = extractelement <2 x i64> %1145, i32 1
  %1148 = bitcast i64 %1146 to <2 x i32>
  %1149 = shufflevector <2 x i32> %1148, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1150 = bitcast i64 %1147 to <2 x i32>
  %1151 = shufflevector <2 x i32> %1150, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1152 = shufflevector <4 x i32> %1149, <4 x i32> %1151, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1153 = bitcast <4 x i32> %1135 to <2 x i64>
  %1154 = xor <2 x i64> %1153, <i64 -1, i64 -1>
  %1155 = extractelement <2 x i64> %1154, i32 0
  %1156 = extractelement <2 x i64> %1154, i32 1
  %1157 = bitcast i64 %1155 to <2 x i32>
  %1158 = shufflevector <2 x i32> %1157, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1159 = bitcast i64 %1156 to <2 x i32>
  %1160 = shufflevector <2 x i32> %1159, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1161 = shufflevector <4 x i32> %1158, <4 x i32> %1160, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1162 = bitcast <4 x float> %1117 to <2 x i64>
  %1163 = extractelement <2 x i64> %1162, i32 0
  %1164 = bitcast i64 %1163 to <2 x i32>
  %1165 = shufflevector <4 x float> %1117, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1166 = bitcast <2 x float> %1165 to <2 x i32>
  %1167 = shufflevector <2 x i32> %1164, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1168 = shufflevector <2 x i32> %1166, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1169 = shufflevector <4 x i32> %1167, <4 x i32> %1168, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1170 = and <4 x i32> %1161, %1169
  %1171 = bitcast <4 x i32> %1170 to <2 x i64>
  %1172 = extractelement <2 x i64> %1171, i32 0
  %1173 = extractelement <2 x i64> %1171, i32 1
  %1174 = bitcast i64 %1172 to <2 x i32>
  %1175 = shufflevector <2 x i32> %1174, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1176 = bitcast i64 %1173 to <2 x i32>
  %1177 = shufflevector <2 x i32> %1176, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1178 = shufflevector <4 x i32> %1175, <4 x i32> %1177, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1179 = or <4 x i32> %1178, %1152
  %1180 = bitcast <4 x i32> %1179 to <2 x i64>
  %1181 = extractelement <2 x i64> %1180, i32 0
  %1182 = extractelement <2 x i64> %1180, i32 1
  %1183 = bitcast i64 %1181 to <2 x float>
  %1184 = bitcast i64 %1182 to <2 x float>
  %1185 = extractelement <2 x float> %1183, i32 0
  %1186 = tail call float @sqrtf(float %1185) #13
  %1187 = extractelement <2 x float> %1183, i32 1
  %1188 = tail call float @sqrtf(float %1187) #13
  %1189 = extractelement <2 x float> %1184, i32 0
  %1190 = tail call float @sqrtf(float %1189) #13
  %1191 = extractelement <2 x float> %1184, i32 1
  %1192 = tail call float @sqrtf(float %1191) #13
  %1193 = insertelement <4 x float> undef, float %1186, i32 0
  %1194 = insertelement <4 x float> %1193, float %1188, i32 1
  %1195 = insertelement <4 x float> undef, float %1190, i32 2
  %1196 = insertelement <4 x float> %1195, float %1192, i32 3
  %1197 = shufflevector <4 x float> %1194, <4 x float> %1196, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1198 = insertelement <4 x float> undef, float %1125, i32 0
  %1199 = shufflevector <4 x float> %1198, <4 x float> undef, <4 x i32> zeroinitializer
  %1200 = fmul <4 x float> %1199, %1197
  %1201 = extractelement <4 x float> %1200, i32 0
  %1202 = tail call float @sqrtf(float %1201) #13
  %1203 = extractelement <4 x float> %1200, i32 1
  %1204 = tail call float @sqrtf(float %1203) #13
  %1205 = extractelement <4 x float> %1200, i32 2
  %1206 = tail call float @sqrtf(float %1205) #13
  %1207 = extractelement <4 x float> %1200, i32 3
  %1208 = tail call float @sqrtf(float %1207) #13
  %1209 = insertelement <4 x float> undef, float %1202, i32 0
  %1210 = insertelement <4 x float> %1209, float %1204, i32 1
  %1211 = insertelement <4 x float> undef, float %1206, i32 2
  %1212 = insertelement <4 x float> %1211, float %1208, i32 3
  %1213 = fsub <8 x float> %173, %176
  %1214 = fcmp oeq <8 x float> %1213, zeroinitializer
  %1215 = sext <8 x i1> %1214 to <8 x i32>
  %1216 = fsub <8 x float> %167, %176
  %1217 = shufflevector <8 x i32> %1215, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1218 = shufflevector <8 x i32> %1215, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1219 = and <4 x i32> %1218, %1217
  %1220 = bitcast <4 x i32> %1219 to <2 x i64>
  %1221 = extractelement <2 x i64> %1220, i32 0
  %1222 = extractelement <2 x i64> %1220, i32 1
  %1223 = bitcast i64 %1221 to <2 x i32>
  %1224 = shufflevector <2 x i32> %1223, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1225 = bitcast i64 %1222 to <2 x i32>
  %1226 = shufflevector <2 x i32> %1225, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1227 = shufflevector <4 x i32> %1224, <4 x i32> %1226, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1228 = shufflevector <8 x float> %1216, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %1229 = bitcast <2 x float> %1228 to <2 x i32>
  %1230 = shufflevector <8 x float> %1216, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %1231 = bitcast <2 x float> %1230 to <2 x i32>
  %1232 = shufflevector <2 x i32> %1229, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1233 = shufflevector <2 x i32> %1231, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1234 = shufflevector <4 x i32> %1232, <4 x i32> %1233, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1235 = and <4 x i32> %1227, %1234
  %1236 = bitcast <4 x i32> %1235 to <2 x i64>
  %1237 = extractelement <2 x i64> %1236, i32 0
  %1238 = extractelement <2 x i64> %1236, i32 1
  %1239 = bitcast i64 %1237 to <2 x i32>
  %1240 = shufflevector <2 x i32> %1239, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1241 = bitcast i64 %1238 to <2 x i32>
  %1242 = shufflevector <2 x i32> %1241, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1243 = shufflevector <4 x i32> %1240, <4 x i32> %1242, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1244 = bitcast <4 x i32> %1227 to <2 x i64>
  %1245 = xor <2 x i64> %1244, <i64 -1, i64 -1>
  %1246 = extractelement <2 x i64> %1245, i32 0
  %1247 = extractelement <2 x i64> %1245, i32 1
  %1248 = bitcast i64 %1246 to <2 x i32>
  %1249 = shufflevector <2 x i32> %1248, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1250 = bitcast i64 %1247 to <2 x i32>
  %1251 = shufflevector <2 x i32> %1250, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1252 = shufflevector <4 x i32> %1249, <4 x i32> %1251, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1253 = shufflevector <8 x float> %1213, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %1254 = bitcast <2 x float> %1253 to <2 x i32>
  %1255 = shufflevector <8 x float> %1213, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %1256 = bitcast <2 x float> %1255 to <2 x i32>
  %1257 = shufflevector <2 x i32> %1254, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1258 = shufflevector <2 x i32> %1256, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1259 = shufflevector <4 x i32> %1257, <4 x i32> %1258, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1260 = and <4 x i32> %1252, %1259
  %1261 = bitcast <4 x i32> %1260 to <2 x i64>
  %1262 = extractelement <2 x i64> %1261, i32 0
  %1263 = extractelement <2 x i64> %1261, i32 1
  %1264 = bitcast i64 %1262 to <2 x i32>
  %1265 = shufflevector <2 x i32> %1264, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1266 = bitcast i64 %1263 to <2 x i32>
  %1267 = shufflevector <2 x i32> %1266, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1268 = shufflevector <4 x i32> %1265, <4 x i32> %1267, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1269 = or <4 x i32> %1268, %1243
  %1270 = bitcast <4 x i32> %1269 to <2 x i64>
  %1271 = extractelement <2 x i64> %1270, i32 0
  %1272 = extractelement <2 x i64> %1270, i32 1
  %1273 = shufflevector <8 x float> %1216, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %1274 = bitcast <2 x float> %1273 to <2 x i32>
  %1275 = shufflevector <8 x float> %1216, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %1276 = bitcast <2 x float> %1275 to <2 x i32>
  %1277 = shufflevector <2 x i32> %1274, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1278 = shufflevector <2 x i32> %1276, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1279 = shufflevector <4 x i32> %1277, <4 x i32> %1278, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1280 = and <4 x i32> %1227, %1279
  %1281 = bitcast <4 x i32> %1280 to <2 x i64>
  %1282 = extractelement <2 x i64> %1281, i32 0
  %1283 = extractelement <2 x i64> %1281, i32 1
  %1284 = bitcast i64 %1282 to <2 x i32>
  %1285 = shufflevector <2 x i32> %1284, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1286 = bitcast i64 %1283 to <2 x i32>
  %1287 = shufflevector <2 x i32> %1286, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1288 = shufflevector <4 x i32> %1285, <4 x i32> %1287, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1289 = shufflevector <8 x float> %1213, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %1290 = bitcast <2 x float> %1289 to <2 x i32>
  %1291 = shufflevector <8 x float> %1213, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %1292 = bitcast <2 x float> %1291 to <2 x i32>
  %1293 = shufflevector <2 x i32> %1290, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1294 = shufflevector <2 x i32> %1292, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1295 = shufflevector <4 x i32> %1293, <4 x i32> %1294, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1296 = and <4 x i32> %1252, %1295
  %1297 = bitcast <4 x i32> %1296 to <2 x i64>
  %1298 = extractelement <2 x i64> %1297, i32 0
  %1299 = extractelement <2 x i64> %1297, i32 1
  %1300 = bitcast i64 %1298 to <2 x i32>
  %1301 = shufflevector <2 x i32> %1300, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1302 = bitcast i64 %1299 to <2 x i32>
  %1303 = shufflevector <2 x i32> %1302, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1304 = shufflevector <4 x i32> %1301, <4 x i32> %1303, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1305 = or <4 x i32> %1304, %1288
  %1306 = bitcast <4 x i32> %1305 to <2 x i64>
  %1307 = extractelement <2 x i64> %1306, i32 0
  %1308 = extractelement <2 x i64> %1306, i32 1
  %1309 = bitcast i64 %1271 to <2 x float>
  %1310 = shufflevector <2 x float> %1309, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1311 = bitcast i64 %1272 to <2 x float>
  %1312 = shufflevector <2 x float> %1311, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %1313 = shufflevector <8 x float> %1310, <8 x float> %1312, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %1314 = bitcast i64 %1307 to <2 x float>
  %1315 = shufflevector <2 x float> %1314, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %1316 = shufflevector <8 x float> %1313, <8 x float> %1315, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %1317 = bitcast i64 %1308 to <2 x float>
  %1318 = shufflevector <2 x float> %1317, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1>
  %1319 = shufflevector <8 x float> %1316, <8 x float> %1318, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 15>
  %1320 = fsub <8 x float> %164, %167
  %1321 = fcmp oeq <8 x float> %1320, zeroinitializer
  %1322 = sext <8 x i1> %1321 to <8 x i32>
  %1323 = fsub <8 x float> %164, %173
  %1324 = shufflevector <8 x i32> %1322, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1325 = shufflevector <8 x i32> %1322, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1326 = and <4 x i32> %1325, %1324
  %1327 = bitcast <4 x i32> %1326 to <2 x i64>
  %1328 = extractelement <2 x i64> %1327, i32 0
  %1329 = extractelement <2 x i64> %1327, i32 1
  %1330 = bitcast i64 %1328 to <2 x i32>
  %1331 = shufflevector <2 x i32> %1330, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1332 = bitcast i64 %1329 to <2 x i32>
  %1333 = shufflevector <2 x i32> %1332, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1334 = shufflevector <4 x i32> %1331, <4 x i32> %1333, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1335 = shufflevector <8 x float> %1323, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %1336 = bitcast <2 x float> %1335 to <2 x i32>
  %1337 = shufflevector <8 x float> %1323, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %1338 = bitcast <2 x float> %1337 to <2 x i32>
  %1339 = shufflevector <2 x i32> %1336, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1340 = shufflevector <2 x i32> %1338, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1341 = shufflevector <4 x i32> %1339, <4 x i32> %1340, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1342 = and <4 x i32> %1334, %1341
  %1343 = bitcast <4 x i32> %1342 to <2 x i64>
  %1344 = extractelement <2 x i64> %1343, i32 0
  %1345 = extractelement <2 x i64> %1343, i32 1
  %1346 = bitcast i64 %1344 to <2 x i32>
  %1347 = shufflevector <2 x i32> %1346, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1348 = bitcast i64 %1345 to <2 x i32>
  %1349 = shufflevector <2 x i32> %1348, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1350 = shufflevector <4 x i32> %1347, <4 x i32> %1349, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1351 = bitcast <4 x i32> %1334 to <2 x i64>
  %1352 = xor <2 x i64> %1351, <i64 -1, i64 -1>
  %1353 = extractelement <2 x i64> %1352, i32 0
  %1354 = extractelement <2 x i64> %1352, i32 1
  %1355 = bitcast i64 %1353 to <2 x i32>
  %1356 = shufflevector <2 x i32> %1355, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1357 = bitcast i64 %1354 to <2 x i32>
  %1358 = shufflevector <2 x i32> %1357, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1359 = shufflevector <4 x i32> %1356, <4 x i32> %1358, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1360 = shufflevector <8 x float> %1320, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %1361 = bitcast <2 x float> %1360 to <2 x i32>
  %1362 = shufflevector <8 x float> %1320, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %1363 = bitcast <2 x float> %1362 to <2 x i32>
  %1364 = shufflevector <2 x i32> %1361, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1365 = shufflevector <2 x i32> %1363, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1366 = shufflevector <4 x i32> %1364, <4 x i32> %1365, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1367 = and <4 x i32> %1359, %1366
  %1368 = bitcast <4 x i32> %1367 to <2 x i64>
  %1369 = extractelement <2 x i64> %1368, i32 0
  %1370 = extractelement <2 x i64> %1368, i32 1
  %1371 = bitcast i64 %1369 to <2 x i32>
  %1372 = shufflevector <2 x i32> %1371, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1373 = bitcast i64 %1370 to <2 x i32>
  %1374 = shufflevector <2 x i32> %1373, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1375 = shufflevector <4 x i32> %1372, <4 x i32> %1374, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1376 = or <4 x i32> %1375, %1350
  %1377 = bitcast <4 x i32> %1376 to <2 x i64>
  %1378 = extractelement <2 x i64> %1377, i32 0
  %1379 = extractelement <2 x i64> %1377, i32 1
  %1380 = shufflevector <8 x float> %1323, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %1381 = bitcast <2 x float> %1380 to <2 x i32>
  %1382 = shufflevector <8 x float> %1323, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %1383 = bitcast <2 x float> %1382 to <2 x i32>
  %1384 = shufflevector <2 x i32> %1381, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1385 = shufflevector <2 x i32> %1383, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1386 = shufflevector <4 x i32> %1384, <4 x i32> %1385, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1387 = and <4 x i32> %1334, %1386
  %1388 = bitcast <4 x i32> %1387 to <2 x i64>
  %1389 = extractelement <2 x i64> %1388, i32 0
  %1390 = extractelement <2 x i64> %1388, i32 1
  %1391 = bitcast i64 %1389 to <2 x i32>
  %1392 = shufflevector <2 x i32> %1391, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1393 = bitcast i64 %1390 to <2 x i32>
  %1394 = shufflevector <2 x i32> %1393, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1395 = shufflevector <4 x i32> %1392, <4 x i32> %1394, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1396 = shufflevector <8 x float> %1320, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %1397 = bitcast <2 x float> %1396 to <2 x i32>
  %1398 = shufflevector <8 x float> %1320, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %1399 = bitcast <2 x float> %1398 to <2 x i32>
  %1400 = shufflevector <2 x i32> %1397, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1401 = shufflevector <2 x i32> %1399, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1402 = shufflevector <4 x i32> %1400, <4 x i32> %1401, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1403 = and <4 x i32> %1359, %1402
  %1404 = bitcast <4 x i32> %1403 to <2 x i64>
  %1405 = extractelement <2 x i64> %1404, i32 0
  %1406 = extractelement <2 x i64> %1404, i32 1
  %1407 = bitcast i64 %1405 to <2 x i32>
  %1408 = shufflevector <2 x i32> %1407, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1409 = bitcast i64 %1406 to <2 x i32>
  %1410 = shufflevector <2 x i32> %1409, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1411 = shufflevector <4 x i32> %1408, <4 x i32> %1410, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1412 = or <4 x i32> %1411, %1395
  %1413 = bitcast <4 x i32> %1412 to <2 x i64>
  %1414 = extractelement <2 x i64> %1413, i32 0
  %1415 = extractelement <2 x i64> %1413, i32 1
  %1416 = bitcast i64 %1378 to <2 x float>
  %1417 = shufflevector <2 x float> %1416, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1418 = bitcast i64 %1379 to <2 x float>
  %1419 = shufflevector <2 x float> %1418, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %1420 = shufflevector <8 x float> %1417, <8 x float> %1419, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %1421 = bitcast i64 %1414 to <2 x float>
  %1422 = shufflevector <2 x float> %1421, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %1423 = shufflevector <8 x float> %1420, <8 x float> %1422, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %1424 = bitcast i64 %1415 to <2 x float>
  %1425 = shufflevector <2 x float> %1424, <2 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1>
  %1426 = shufflevector <8 x float> %1423, <8 x float> %1425, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 15>
  %1427 = fmul <8 x float> %1319, %1319
  %1428 = fmul <8 x float> %1426, %1426
  %1429 = fmul <8 x float> %1426, %1319
  %1430 = shufflevector <8 x float> %1429, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1431 = shufflevector <8 x float> %1429, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1432 = fadd <4 x float> %1430, %1431
  %1433 = shufflevector <8 x float> %1427, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1434 = shufflevector <8 x float> %1427, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1435 = fadd <4 x float> %1433, %1434
  %1436 = shufflevector <8 x float> %1428, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1437 = shufflevector <8 x float> %1428, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1438 = fadd <4 x float> %1436, %1437
  %1439 = fmul <4 x float> %1438, %1435
  %1440 = extractelement <4 x float> %1439, i32 0
  %1441 = tail call float @sqrtf(float %1440) #13
  %1442 = extractelement <4 x float> %1439, i32 1
  %1443 = tail call float @sqrtf(float %1442) #13
  %1444 = extractelement <4 x float> %1439, i32 2
  %1445 = tail call float @sqrtf(float %1444) #13
  %1446 = extractelement <4 x float> %1439, i32 3
  %1447 = tail call float @sqrtf(float %1446) #13
  %1448 = insertelement <4 x float> undef, float %1441, i32 0
  %1449 = insertelement <4 x float> %1448, float %1443, i32 1
  %1450 = insertelement <4 x float> undef, float %1445, i32 2
  %1451 = insertelement <4 x float> %1450, float %1447, i32 3
  %1452 = shufflevector <4 x float> %1449, <4 x float> %1451, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1453 = fdiv <4 x float> %1432, %1452
  %1454 = fcmp olt <4 x float> %1453, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1455 = sext <4 x i1> %1454 to <4 x i32>
  %1456 = bitcast <4 x i32> %1455 to <2 x i64>
  %1457 = extractelement <2 x i64> %1456, i32 0
  %1458 = extractelement <2 x i64> %1456, i32 1
  %1459 = bitcast i64 %1457 to <2 x i32>
  %1460 = shufflevector <2 x i32> %1459, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1461 = bitcast i64 %1458 to <2 x i32>
  %1462 = shufflevector <2 x i32> %1461, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1463 = shufflevector <4 x i32> %1460, <4 x i32> %1462, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1464 = bitcast <4 x float> %1453 to <2 x i64>
  %1465 = extractelement <2 x i64> %1464, i32 0
  %1466 = bitcast i64 %1465 to <2 x i32>
  %1467 = shufflevector <4 x float> %1453, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1468 = bitcast <2 x float> %1467 to <2 x i32>
  %1469 = shufflevector <2 x i32> %1466, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1470 = shufflevector <2 x i32> %1468, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1471 = shufflevector <4 x i32> %1469, <4 x i32> %1470, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1472 = and <4 x i32> %1463, %1471
  %1473 = bitcast <4 x i32> %1472 to <2 x i64>
  %1474 = extractelement <2 x i64> %1473, i32 0
  %1475 = extractelement <2 x i64> %1473, i32 1
  %1476 = bitcast i64 %1474 to <2 x i32>
  %1477 = shufflevector <2 x i32> %1476, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1478 = bitcast i64 %1475 to <2 x i32>
  %1479 = shufflevector <2 x i32> %1478, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1480 = shufflevector <4 x i32> %1477, <4 x i32> %1479, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1481 = bitcast <4 x i32> %1463 to <2 x i64>
  %1482 = xor <2 x i64> %1481, <i64 -1, i64 -1>
  %1483 = extractelement <2 x i64> %1482, i32 0
  %1484 = extractelement <2 x i64> %1482, i32 1
  %1485 = bitcast i64 %1483 to <2 x i32>
  %1486 = shufflevector <2 x i32> %1485, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1487 = bitcast i64 %1484 to <2 x i32>
  %1488 = shufflevector <2 x i32> %1487, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1489 = shufflevector <4 x i32> %1486, <4 x i32> %1488, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1490 = bitcast <4 x i32> %1489 to <2 x i64>
  %1491 = and <2 x i64> %1490, <i64 4575657222473777152, i64 4575657222473777152>
  %1492 = extractelement <2 x i64> %1491, i32 0
  %1493 = extractelement <2 x i64> %1491, i32 1
  %1494 = bitcast i64 %1492 to <2 x i32>
  %1495 = shufflevector <2 x i32> %1494, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1496 = bitcast i64 %1493 to <2 x i32>
  %1497 = shufflevector <2 x i32> %1496, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1498 = shufflevector <4 x i32> %1495, <4 x i32> %1497, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1499 = or <4 x i32> %1498, %1480
  %1500 = bitcast <4 x i32> %1499 to <2 x i64>
  %1501 = extractelement <2 x i64> %1500, i32 0
  %1502 = extractelement <2 x i64> %1500, i32 1
  %1503 = bitcast i64 %1501 to <2 x float>
  %1504 = bitcast i64 %1502 to <2 x float>
  %1505 = shufflevector <2 x float> %1503, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1506 = shufflevector <2 x float> %1504, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1507 = shufflevector <4 x float> %1505, <4 x float> %1506, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1508 = fcmp olt <4 x float> %1507, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %1509 = sext <4 x i1> %1508 to <4 x i32>
  %1510 = bitcast <4 x i32> %1509 to <2 x i64>
  %1511 = extractelement <2 x i64> %1510, i32 0
  %1512 = extractelement <2 x i64> %1510, i32 1
  %1513 = bitcast i64 %1511 to <2 x i32>
  %1514 = shufflevector <2 x i32> %1513, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1515 = bitcast i64 %1512 to <2 x i32>
  %1516 = shufflevector <2 x i32> %1515, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1517 = shufflevector <4 x i32> %1514, <4 x i32> %1516, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1518 = bitcast <4 x i32> %1517 to <2 x i64>
  %1519 = and <2 x i64> %1518, <i64 -4647714812233515008, i64 -4647714812233515008>
  %1520 = extractelement <2 x i64> %1519, i32 0
  %1521 = extractelement <2 x i64> %1519, i32 1
  %1522 = bitcast i64 %1520 to <2 x i32>
  %1523 = shufflevector <2 x i32> %1522, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1524 = bitcast i64 %1521 to <2 x i32>
  %1525 = shufflevector <2 x i32> %1524, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1526 = shufflevector <4 x i32> %1523, <4 x i32> %1525, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1527 = xor <2 x i64> %1518, <i64 -1, i64 -1>
  %1528 = extractelement <2 x i64> %1527, i32 0
  %1529 = extractelement <2 x i64> %1527, i32 1
  %1530 = bitcast i64 %1528 to <2 x i32>
  %1531 = shufflevector <2 x i32> %1530, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1532 = bitcast i64 %1529 to <2 x i32>
  %1533 = shufflevector <2 x i32> %1532, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1534 = shufflevector <4 x i32> %1531, <4 x i32> %1533, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1535 = bitcast <4 x float> %1507 to <2 x i64>
  %1536 = extractelement <2 x i64> %1535, i32 0
  %1537 = bitcast i64 %1536 to <2 x i32>
  %1538 = bitcast i64 %1502 to <2 x i32>
  %1539 = shufflevector <2 x i32> %1537, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1540 = shufflevector <2 x i32> %1538, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1541 = shufflevector <4 x i32> %1539, <4 x i32> %1540, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1542 = and <4 x i32> %1534, %1541
  %1543 = bitcast <4 x i32> %1542 to <2 x i64>
  %1544 = extractelement <2 x i64> %1543, i32 0
  %1545 = extractelement <2 x i64> %1543, i32 1
  %1546 = bitcast i64 %1544 to <2 x i32>
  %1547 = shufflevector <2 x i32> %1546, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1548 = bitcast i64 %1545 to <2 x i32>
  %1549 = shufflevector <2 x i32> %1548, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1550 = shufflevector <4 x i32> %1547, <4 x i32> %1549, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1551 = or <4 x i32> %1550, %1526
  %1552 = bitcast <4 x i32> %1551 to <2 x i64>
  %1553 = extractelement <2 x i64> %1552, i32 0
  %1554 = extractelement <2 x i64> %1552, i32 1
  %1555 = bitcast i64 %1553 to <2 x float>
  %1556 = bitcast i64 %1554 to <2 x float>
  %1557 = shufflevector <2 x float> %1555, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1558 = shufflevector <2 x float> %1556, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1559 = shufflevector <4 x float> %1557, <4 x float> %1558, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1560 = fmul <4 x float> %1559, %1559
  %1561 = fmul <4 x float> %1560, <float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %1562 = fadd <4 x float> %1561, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %1563 = fmul <4 x float> %1560, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %1564 = fadd <4 x float> %1563, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %1565 = fmul <4 x float> %1560, %1564
  %1566 = fadd <4 x float> %1565, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1567 = fdiv <4 x float> %1562, %1566
  %1568 = fmul <4 x float> %1559, %1567
  %1569 = fadd <4 x float> %1568, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %1570 = load i32, i32* %2, align 32
  %1571 = load float, float* %946, align 4
  %1572 = insertelement <2 x float> undef, float %1571, i32 0
  %1573 = shufflevector <2 x float> %1572, <2 x float> undef, <4 x i32> zeroinitializer
  %1574 = shufflevector <4 x float> %1210, <4 x float> %1212, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1575 = fmul <4 x float> %1573, %1569
  %1576 = fadd <4 x float> %1574, %1575
  %1577 = bitcast <4 x float> %1576 to <2 x i64>
  %1578 = extractelement <2 x i64> %1577, i32 0
  %1579 = extractelement <2 x i64> %1577, i32 1
  %1580 = bitcast i64 %1578 to <2 x i32>
  %1581 = shufflevector <2 x i32> %1580, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1582 = bitcast i64 %1579 to <2 x i32>
  %1583 = shufflevector <2 x i32> %1582, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1584 = shufflevector <4 x i32> %1581, <4 x i32> %1583, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1585 = add <4 x i32> %1584, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1586 = bitcast <4 x i32> %1585 to <2 x i64>
  %1587 = extractelement <2 x i64> %1586, i32 0
  %1588 = extractelement <2 x i64> %1586, i32 1
  %1589 = bitcast i64 %1587 to <2 x i32>
  %1590 = bitcast i64 %1588 to <2 x i32>
  %1591 = shufflevector <2 x i32> %1589, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1592 = shufflevector <2 x i32> %1590, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1593 = shufflevector <4 x i32> %1591, <4 x i32> %1592, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1594 = ashr <4 x i32> %1593, <i32 23, i32 23, i32 23, i32 23>
  %1595 = bitcast <4 x i32> %1594 to <2 x i64>
  %1596 = extractelement <2 x i64> %1595, i32 0
  %1597 = extractelement <2 x i64> %1595, i32 1
  %1598 = bitcast i64 %1596 to <2 x i32>
  %1599 = shufflevector <2 x i32> %1598, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1600 = bitcast i64 %1597 to <2 x i32>
  %1601 = shufflevector <2 x i32> %1600, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1602 = shufflevector <4 x i32> %1599, <4 x i32> %1601, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1603 = add <4 x i32> %1602, <i32 -127, i32 -127, i32 -127, i32 -127>
  %1604 = bitcast <4 x i32> %1603 to <2 x i64>
  %1605 = extractelement <2 x i64> %1604, i32 0
  %1606 = extractelement <2 x i64> %1604, i32 1
  %1607 = bitcast i64 %1605 to <2 x i32>
  %1608 = shufflevector <2 x i32> %1607, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1609 = bitcast i64 %1606 to <2 x i32>
  %1610 = shufflevector <2 x i32> %1609, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1611 = shufflevector <4 x i32> %1608, <4 x i32> %1610, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1612 = icmp sgt <4 x i32> %1611, <i32 15, i32 15, i32 15, i32 15>
  %1613 = sext <4 x i1> %1612 to <4 x i32>
  %1614 = bitcast <4 x i32> %1613 to <2 x i64>
  %1615 = extractelement <2 x i64> %1614, i32 0
  %1616 = extractelement <2 x i64> %1614, i32 1
  %1617 = bitcast i64 %1615 to <2 x i32>
  %1618 = shufflevector <2 x i32> %1617, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1619 = bitcast i64 %1616 to <2 x i32>
  %1620 = shufflevector <2 x i32> %1619, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1621 = shufflevector <4 x i32> %1618, <4 x i32> %1620, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1622 = bitcast <4 x i32> %1621 to <2 x i64>
  %1623 = and <2 x i64> %1622, <i64 64424509455, i64 64424509455>
  %1624 = extractelement <2 x i64> %1623, i32 0
  %1625 = extractelement <2 x i64> %1623, i32 1
  %1626 = bitcast i64 %1624 to <2 x i32>
  %1627 = shufflevector <2 x i32> %1626, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1628 = bitcast i64 %1625 to <2 x i32>
  %1629 = shufflevector <2 x i32> %1628, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1630 = shufflevector <4 x i32> %1627, <4 x i32> %1629, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1631 = xor <2 x i64> %1622, <i64 -1, i64 -1>
  %1632 = extractelement <2 x i64> %1631, i32 0
  %1633 = extractelement <2 x i64> %1631, i32 1
  %1634 = bitcast i64 %1632 to <2 x i32>
  %1635 = shufflevector <2 x i32> %1634, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1636 = bitcast i64 %1633 to <2 x i32>
  %1637 = shufflevector <2 x i32> %1636, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1638 = shufflevector <4 x i32> %1635, <4 x i32> %1637, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1639 = bitcast <4 x i32> %1611 to <2 x i64>
  %1640 = extractelement <2 x i64> %1639, i32 0
  %1641 = bitcast i64 %1640 to <2 x i32>
  %1642 = shufflevector <2 x i32> %1641, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1643 = shufflevector <4 x i32> %1642, <4 x i32> %1610, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1644 = and <4 x i32> %1638, %1643
  %1645 = bitcast <4 x i32> %1644 to <2 x i64>
  %1646 = extractelement <2 x i64> %1645, i32 0
  %1647 = extractelement <2 x i64> %1645, i32 1
  %1648 = bitcast i64 %1646 to <2 x i32>
  %1649 = shufflevector <2 x i32> %1648, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1650 = bitcast i64 %1647 to <2 x i32>
  %1651 = shufflevector <2 x i32> %1650, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1652 = shufflevector <4 x i32> %1649, <4 x i32> %1651, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1653 = or <4 x i32> %1652, %1630
  %1654 = bitcast <4 x i32> %1653 to <2 x i64>
  %1655 = extractelement <2 x i64> %1654, i32 0
  %1656 = extractelement <2 x i64> %1654, i32 1
  %1657 = bitcast i64 %1655 to <2 x i32>
  %1658 = shufflevector <2 x i32> %1657, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1659 = bitcast i64 %1656 to <2 x i32>
  %1660 = shufflevector <2 x i32> %1659, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1661 = shufflevector <4 x i32> %1658, <4 x i32> %1660, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1662 = icmp sgt <4 x i32> %1661, zeroinitializer
  %1663 = sext <4 x i1> %1662 to <4 x i32>
  %1664 = bitcast <4 x i32> %1663 to <2 x i64>
  %1665 = extractelement <2 x i64> %1664, i32 0
  %1666 = extractelement <2 x i64> %1664, i32 1
  %1667 = bitcast i64 %1665 to <2 x i32>
  %1668 = shufflevector <2 x i32> %1667, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1669 = bitcast i64 %1666 to <2 x i32>
  %1670 = shufflevector <2 x i32> %1669, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1671 = shufflevector <4 x i32> %1668, <4 x i32> %1670, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1672 = bitcast <4 x i32> %1661 to <2 x i64>
  %1673 = extractelement <2 x i64> %1672, i32 0
  %1674 = bitcast i64 %1673 to <2 x i32>
  %1675 = shufflevector <2 x i32> %1674, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1676 = shufflevector <4 x i32> %1675, <4 x i32> %1660, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1677 = and <4 x i32> %1671, %1676
  %1678 = bitcast <4 x i32> %1677 to <2 x i64>
  %1679 = extractelement <2 x i64> %1678, i32 0
  %1680 = extractelement <2 x i64> %1678, i32 1
  %1681 = bitcast i64 %1679 to <2 x i32>
  %1682 = shufflevector <2 x i32> %1681, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1683 = bitcast i64 %1680 to <2 x i32>
  %1684 = shufflevector <2 x i32> %1683, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1685 = shufflevector <4 x i32> %1682, <4 x i32> %1684, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1686 = bitcast <4 x i32> %1685 to <2 x i64>
  %1687 = extractelement <2 x i64> %1686, i32 0
  %1688 = extractelement <2 x i64> %1686, i32 1
  %1689 = lshr i64 %1687, 32
  switch i32 %1570, label %1690 [
    i32 4, label %1691
    i32 3, label %1703
    i32 2, label %1714
    i32 1, label %1725
  ]

1690:                                             ; preds = %1101
  tail call void @llvm.trap() #13
  unreachable

1691:                                             ; preds = %1101
  %1692 = load i32*, i32** %1102, align 8
  %1693 = lshr i64 %1688, 32
  %1694 = trunc i64 %1693 to i8
  %1695 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 1, i64 3
  %1696 = load i8*, i8** %1695, align 8
  %1697 = getelementptr inbounds i8, i8* %1696, i64 1
  store i8 %1694, i8* %1697, align 1
  %1698 = shl i64 %1693, 56
  %1699 = ashr exact i64 %1698, 56
  %1700 = getelementptr inbounds i32, i32* %1692, i64 %1699
  %1701 = load i32, i32* %1700, align 4
  %1702 = add nsw i32 %1701, 1
  store i32 %1702, i32* %1700, align 4
  br label %1703

1703:                                             ; preds = %1101, %1691
  %1704 = load i32*, i32** %1102, align 8
  %1705 = trunc i64 %1688 to i8
  %1706 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 1, i64 2
  %1707 = load i8*, i8** %1706, align 8
  %1708 = getelementptr inbounds i8, i8* %1707, i64 1
  store i8 %1705, i8* %1708, align 1
  %1709 = shl i64 %1688, 56
  %1710 = ashr exact i64 %1709, 56
  %1711 = getelementptr inbounds i32, i32* %1704, i64 %1710
  %1712 = load i32, i32* %1711, align 4
  %1713 = add nsw i32 %1712, 1
  store i32 %1713, i32* %1711, align 4
  br label %1714

1714:                                             ; preds = %1101, %1703
  %1715 = load i32*, i32** %1102, align 8
  %1716 = trunc i64 %1689 to i8
  %1717 = getelementptr inbounds %"class.(anonymous namespace)::ResolveLevelCounter", %"class.(anonymous namespace)::ResolveLevelCounter"* %0, i64 0, i32 3, i32 1, i64 1
  %1718 = load i8*, i8** %1717, align 8
  %1719 = getelementptr inbounds i8, i8* %1718, i64 1
  store i8 %1716, i8* %1719, align 1
  %1720 = shl i64 %1689, 56
  %1721 = ashr exact i64 %1720, 56
  %1722 = getelementptr inbounds i32, i32* %1715, i64 %1721
  %1723 = load i32, i32* %1722, align 4
  %1724 = add nsw i32 %1723, 1
  store i32 %1724, i32* %1722, align 4
  br label %1725

1725:                                             ; preds = %1101, %1714
  %1726 = load i32*, i32** %1102, align 8
  %1727 = trunc i64 %1687 to i8
  %1728 = load i8*, i8** %945, align 8
  %1729 = getelementptr inbounds i8, i8* %1728, i64 1
  store i8 %1727, i8* %1729, align 1
  %1730 = shl i64 %1687, 56
  %1731 = ashr exact i64 %1730, 56
  %1732 = getelementptr inbounds i32, i32* %1726, i64 %1731
  %1733 = load i32, i32* %1732, align 4
  %1734 = add nsw i32 %1733, 1
  store i32 %1734, i32* %1732, align 4
  store i32 0, i32* %2, align 32
  ret void
}

declare i32 @_ZNK8SkRGBA4fIL11SkAlphaType2EE12toBytes_RGBAEv(%struct.SkRGBA4f*) local_unnamed_addr #4

declare void @_ZN15GrOpsRenderPass11bindBuffersE5sk_spIK8GrBufferES3_S3_18GrPrimitiveRestart(%class.GrOpsRenderPass*, %class.sk_sp.13*, %class.sk_sp.13*, %class.sk_sp.13*, i1 zeroext) local_unnamed_addr #4

declare void @_ZN15GrOpsRenderPass12drawIndirectEPK8GrBuffermi(%class.GrOpsRenderPass*, %class.GrBuffer*, i64, i32) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #12

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK6SkPath9RangeIterdeEv: argument 0"}
!5 = distinct !{!5, !"_ZNK6SkPath9RangeIterdeEv"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNK14GrVertexWriter10makeOffsetEl: argument 0"}
!8 = distinct !{!8, !"_ZNK14GrVertexWriter10makeOffsetEl"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNK14GrVertexWriter10makeOffsetEl: argument 0"}
!11 = distinct !{!11, !"_ZNK14GrVertexWriter10makeOffsetEl"}
!12 = !{!13, !15}
!13 = distinct !{!13, !14, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi2EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf: argument 0"}
!14 = distinct !{!14, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi2EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf"}
!15 = distinct !{!15, !16, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi2EE20loadLastControlPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEv: argument 0"}
!16 = distinct !{!16, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi2EE20loadLastControlPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEv"}
!17 = !{!18, !20}
!18 = distinct !{!18, !19, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi2EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf: argument 0"}
!19 = distinct !{!19, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi2EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf"}
!20 = distinct !{!20, !21, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi2EE9loadPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEi: argument 0"}
!21 = distinct !{!21, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi2EE9loadPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEi"}
!22 = !{!23, !25}
!23 = distinct !{!23, !24, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi2EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf: argument 0"}
!24 = distinct !{!24, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi2EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf"}
!25 = distinct !{!25, !26, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi2EE9loadPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEi: argument 0"}
!26 = distinct !{!26, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi2EE9loadPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEi"}
!27 = !{!28, !30}
!28 = distinct !{!28, !29, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf: argument 0"}
!29 = distinct !{!29, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf"}
!30 = distinct !{!30, !31, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE9loadPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEi: argument 0"}
!31 = distinct !{!31, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE9loadPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEi"}
!32 = !{!33, !35}
!33 = distinct !{!33, !34, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf: argument 0"}
!34 = distinct !{!34, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf"}
!35 = distinct !{!35, !36, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE9loadPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEi: argument 0"}
!36 = distinct !{!36, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE9loadPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEi"}
!37 = !{!38, !40}
!38 = distinct !{!38, !39, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf: argument 0"}
!39 = distinct !{!39, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf"}
!40 = distinct !{!40, !41, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE9loadPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEi: argument 0"}
!41 = distinct !{!41, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE9loadPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEi"}
!42 = !{!43, !45}
!43 = distinct !{!43, !44, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf: argument 0"}
!44 = distinct !{!44, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf"}
!45 = distinct !{!45, !46, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE20loadLastControlPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEv: argument 0"}
!46 = distinct !{!46, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi3EE20loadLastControlPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEv"}
!47 = !{!48, !50}
!48 = distinct !{!48, !49, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf: argument 0"}
!49 = distinct !{!49, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf"}
!50 = distinct !{!50, !51, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE9loadPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEi: argument 0"}
!51 = distinct !{!51, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE9loadPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEi"}
!52 = !{!53, !55}
!53 = distinct !{!53, !54, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf: argument 0"}
!54 = distinct !{!54, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf"}
!55 = distinct !{!55, !56, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE20loadLastControlPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEv: argument 0"}
!56 = distinct !{!56, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE20loadLastControlPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEv"}
!57 = !{!58, !60}
!58 = distinct !{!58, !59, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf: argument 0"}
!59 = distinct !{!59, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf"}
!60 = distinct !{!60, !61, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE9loadPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEi: argument 0"}
!61 = distinct !{!61, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE9loadPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEi"}
!62 = !{!63, !65}
!63 = distinct !{!63, !64, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf: argument 0"}
!64 = distinct !{!64, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE18loadPointFromArrayILi4EEEN4skvx3VecIXmlT_Li2EEfEEPKf"}
!65 = distinct !{!65, !66, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE20loadLastControlPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEv: argument 0"}
!66 = distinct !{!66, !"_ZNK12_GLOBAL__N_119ResolveLevelCounter9SIMDQueueILi4EE20loadLastControlPointILi4EEEN4skvx3VecIXmlT_Li2EEfEEv"}
