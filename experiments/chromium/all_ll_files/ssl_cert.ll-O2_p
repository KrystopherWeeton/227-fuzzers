; ModuleID = '../../third_party/boringssl/src/ssl/ssl_cert.cc'
source_filename = "../../third_party/boringssl/src/ssl/ssl_cert.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.bssl::CERT" = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.1", %struct.stack_st_X509*, %struct.x509_st*, %struct.x509_st*, %struct.ssl_private_key_method_st*, %"struct.bssl::SSL_X509_METHOD"*, %"class.bssl::Array.36", i32 (%struct.ssl_st*, i8*)*, i8*, %struct.x509_store_st*, %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.86", i8, [32 x i8], %"class.std::__1::unique_ptr.113", %"class.std::__1::unique_ptr", %struct.ssl_private_key_method_st* }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %struct.stack_st_CRYPTO_BUFFER* }
%struct.stack_st_CRYPTO_BUFFER = type opaque
%struct.stack_st_X509 = type opaque
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon.6 }
%union.anon.6 = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%"class.bssl::Array.36" = type { i16*, i64 }
%struct.ssl_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"class.std::__1::unique_ptr.13", i16, i16, [4 x i8], %"class.std::__1::unique_ptr.45", %"class.std::__1::unique_ptr.45", i32 (%"struct.bssl::SSL_HANDSHAKE"*)*, %"struct.bssl::SSL3_STATE"*, %"struct.bssl::DTLS1_STATE"*, void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], %"class.std::__1::unique_ptr.68", void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.108", %struct.crypto_ex_data_st, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.31", %struct.ssl_quic_method_st*, i32, i8, [3 x i8] }>
%"struct.bssl::SSL_PROTOCOL_METHOD" = type { i8, i1 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %"struct.bssl::SSLMessage"*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, %"class.bssl::Span"*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)* }
%"struct.bssl::SSLMessage" = type { i8, i8, %struct.cbs_st, %struct.cbs_st }
%struct.cbs_st = type { i8*, i64 }
%"class.bssl::Span" = type { i8*, i64 }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"class.bssl::Array" = type { i8*, i64 }
%"class.bssl::SSLAEADContext" = type <{ %struct.ssl_cipher_st*, %"class.bssl::internal::StackAllocated", [12 x i8], i8, i8, i16, i8, i8, [6 x i8] }>
%struct.ssl_cipher_st = type { i8*, i8*, i32, i32, i32, i32, i32, i32 }
%"class.bssl::internal::StackAllocated" = type { %struct.evp_aead_ctx_st }
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%struct.evp_aead_st = type opaque
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.bssl::SSL_CONFIG"* }
%"struct.bssl::SSL_CONFIG" = type <{ %struct.ssl_st*, i16, i16, [4 x i8], %struct.X509_VERIFY_PARAM_st*, %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.26", i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.ssl_st*, i8*)*, %"class.std::__1::unique_ptr.31", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, %"class.std::__1::unique_ptr.1", %struct.stack_st_X509_NAME*, %"class.bssl::Array.36", %"class.std::__1::unique_ptr", %"class.bssl::Array", %"class.bssl::GrowableArray", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.36", %"class.std::__1::unique_ptr.38", i8, i16, [5 x i8] }>
%struct.X509_VERIFY_PARAM_st = type { i8*, i64, i64, i64, i32, i32, i32, %struct.stack_st_ASN1_OBJECT*, %struct.X509_VERIFY_PARAM_ID_st* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_VERIFY_PARAM_ID_st = type opaque
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.bssl::SSLCipherPreferenceList"* }
%"struct.bssl::SSLCipherPreferenceList" = type { %"class.std::__1::unique_ptr.19", i8* }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %struct.stack_st_SSL_CIPHER* }
%struct.stack_st_SSL_CIPHER = type opaque
%"class.std::__1::unique_ptr.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.bssl::CERT"* }
%struct.x509_store_ctx_st = type { %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509_CRL*, %struct.X509_VERIFY_PARAM_st*, i8*, i32 (%struct.x509_store_ctx_st*)*, {}*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32, i32, %struct.stack_st_X509*, %struct.X509_POLICY_TREE_st*, i32, i32, i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_crl_st*, i32, i32, %struct.x509_store_ctx_st*, %struct.crypto_ex_data_st }
%struct.stack_st_X509_CRL = type opaque
%struct.X509_POLICY_TREE_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type opaque
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.stack_st_X509_NAME = type opaque
%"class.bssl::GrowableArray" = type { i64, %"class.bssl::Array.37" }
%"class.bssl::Array.37" = type { %"struct.bssl::ALPSConfig"*, i64 }
%"struct.bssl::ALPSConfig" = type { %"class.bssl::Array", %"class.bssl::Array" }
%"class.std::__1::unique_ptr.38" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %struct.stack_st_SRTP_PROTECTION_PROFILE* }
%struct.stack_st_SRTP_PROTECTION_PROFILE = type opaque
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %struct.bio_st* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%"struct.bssl::SSL_HANDSHAKE" = type <{ %struct.ssl_st*, %"struct.bssl::SSL_CONFIG"*, i32, i32, i32, i16, i16, i64, [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], %union.anon.50, i16, [2 x i8], %"class.std::__1::unique_ptr.51", [2 x %"class.std::__1::unique_ptr.56"], %"class.bssl::SSLTranscript", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.36", %"class.bssl::Array.36", %"class.bssl::Array.36", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::internal::StackAllocated.67", %"class.bssl::Array", %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.1", %struct.stack_st_X509_NAME*, %"class.bssl::Array", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.78", %struct.ssl_cipher_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.93", i32, i16, i16, i16, i8, [32 x i8], i8, [6 x i8], [6 x i8] }>
%union.anon.50 = type { i32 }
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %struct.err_save_state_st* }
%struct.err_save_state_st = type opaque
%"class.std::__1::unique_ptr.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"class.bssl::SSLKeyShare"* }
%"class.bssl::SSLKeyShare" = type { i32 (...)** }
%"class.bssl::SSLTranscript" = type { %"class.std::__1::unique_ptr.61", %"class.bssl::internal::StackAllocated.66" }
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %struct.buf_mem_st* }
%"class.bssl::internal::StackAllocated.66" = type { %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.env_md_st = type opaque
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%"class.bssl::internal::StackAllocated.67" = type { %struct.evp_hpke_ctx_st }
%struct.evp_hpke_ctx_st = type { %struct.evp_hpke_aead_st*, %struct.evp_hpke_kdf_st*, %struct.evp_aead_ctx_st, [24 x i8], [64 x i8], i64, i32 }
%struct.evp_hpke_aead_st = type opaque
%struct.evp_hpke_kdf_st = type opaque
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %struct.ssl_ech_server_config_list_st* }
%struct.ssl_ech_server_config_list_st = type <{ %"class.bssl::GrowableArray.81", i32, [4 x i8] }>
%"class.bssl::GrowableArray.81" = type { i64, %"class.bssl::Array.82" }
%"class.bssl::Array.82" = type { %"class.std::__1::unique_ptr.83"*, i64 }
%"class.std::__1::unique_ptr.83" = type opaque
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"struct.bssl::SSL_HANDSHAKE_HINTS"* }
%"struct.bssl::SSL_HANDSHAKE_HINTS" = type <{ %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, [7 x i8] }>
%"struct.bssl::SSL3_STATE" = type <{ [8 x i8], [8 x i8], [32 x i8], [32 x i8], %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer", %"class.bssl::Span", i32, i32, i32, i32, i8*, i32, i32, %"class.std::__1::unique_ptr.51", i32, i32, i32, i32, i16, i8, i8, i8, i16, i8, %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.61", i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.7", %"class.std::__1::unique_ptr.7", %"class.std::__1::unique_ptr.98", [48 x i8], [48 x i8], [48 x i8], i8, i8, i8, [12 x i8], i8, i8, [12 x i8], [2 x i8], i8, %"class.std::__1::unique_ptr.68", %"class.bssl::Array", %"class.bssl::Array", %"class.std::__1::unique_ptr.31", [64 x i8], %"class.bssl::Array", %struct.srtp_protection_profile_st* }>
%"class.bssl::SSLBuffer" = type <{ i8*, i16, i16, i16, [5 x i8], i8, [4 x i8] }>
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.bssl::SSLAEADContext"* }
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"struct.bssl::SSL_HANDSHAKE"* }
%struct.srtp_protection_profile_st = type { i8*, i64 }
%"struct.bssl::DTLS1_STATE" = type <{ i8, [256 x i8], [7 x i8], i64, i16, i16, [4 x i8], %"struct.bssl::DTLS1_BITMAP", i16, i16, [8 x i8], [4 x i8], %"class.std::__1::unique_ptr.7", [7 x %"class.std::__1::unique_ptr.103"], [7 x %"struct.bssl::DTLS_OUTGOING_MESSAGE"], i8, i8, [2 x i8], i32, i32, i32, %"struct.bssl::OPENSSL_timeval", i32, [4 x i8] }>
%"struct.bssl::DTLS1_BITMAP" = type { i64, i64 }
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"struct.bssl::hm_fragment"* }
%"struct.bssl::hm_fragment" = type { i8, i16, i32, i8*, i8* }
%"struct.bssl::DTLS_OUTGOING_MESSAGE" = type <{ i8*, i32, i16, i8, i8 }>
%"struct.bssl::OPENSSL_timeval" = type { i64, i32 }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %struct.ssl_session_st* }
%struct.ssl_session_st = type { i32, i16, i16, i16, i32, [48 x i8], i32, [32 x i8], i8, [32 x i8], %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.1", %"struct.bssl::SSL_X509_METHOD"*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509*, i64, i32, i32, i64, %struct.ssl_cipher_st*, %struct.crypto_ex_data_st, %struct.ssl_session_st*, %struct.ssl_session_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.86", [32 x i8], [64 x i8], i8, i32, i32, i32, %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, %"class.bssl::Array" }
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %struct.ssl_ctx_st* }
%struct.ssl_ctx_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_X509_METHOD"*, %union.crypto_mutex_st, i16, i16, [4 x i8], %struct.ssl_quic_method_st*, %"class.std::__1::unique_ptr.16", %struct.x509_store_st*, %struct.lhash_st_SSL_SESSION*, i64, %struct.ssl_session_st*, %struct.ssl_session_st*, i32, i32, i32, i32, i32 (%struct.ssl_st*, %struct.ssl_session_st*)*, void (%struct.ssl_ctx_st*, %struct.ssl_session_st*)*, %struct.ssl_session_st* (%struct.ssl_st*, i8*, i32, i32*)*, i32, [4 x i8], i32 (%struct.x509_store_ctx_st*, i8*)*, i8*, i32 (%struct.ssl_st*, i8*)*, i32 (i8*, i32, i32, i8*)*, i8*, i32 (%struct.ssl_st*, %struct.x509_st**, %struct.evp_pkey_st**)*, void (%struct.ssl_st*, %struct.evp_pkey_st**)*, %struct.crypto_ex_data_st, void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.1", %struct.stack_st_X509_NAME*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.26", void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], i32 (i32, %struct.x509_store_ctx_st*)*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.ssl_early_callback_ctx*)*, i32 (%struct.ssl_early_callback_ctx*)*, i8, i8, i16, [4 x i8], i32 (%struct.ssl_st*, i32*, i8*)*, i8*, %"class.std::__1::unique_ptr.71", %"class.std::__1::unique_ptr.71", i32 (%struct.ssl_st*, i8*, i8*, %struct.evp_cipher_ctx_st*, %struct.hmac_ctx_st*, i32)*, %"class.std::__1::unique_ptr.31", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*, i8**, i32*, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, %"class.bssl::Array", %"class.std::__1::unique_ptr.38", %"class.bssl::GrowableArray.76", %"class.bssl::Array.36", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.78", void (%struct.ssl_st*, i8*)*, void (%struct.ssl_st*, %struct.timeval*)*, %struct.crypto_buffer_pool_st*, %struct.ssl_ticket_aead_method_st*, i32 (%struct.ssl_st*, i8*)*, i8*, %"class.bssl::Array.36", i16, [6 x i8] }>
%struct.lhash_st_SSL_SESSION = type opaque
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.ssl_early_callback_ctx = type { %struct.ssl_st*, i8*, i64, i16, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64 }
%"class.std::__1::unique_ptr.71" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.bssl::TicketKey"* }
%"struct.bssl::TicketKey" = type { [16 x i8], [16 x i8], [16 x i8], i64 }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%"class.bssl::GrowableArray.76" = type { i64, %"class.bssl::Array.77" }
%"class.bssl::Array.77" = type { %"struct.bssl::CertCompressionAlg"*, i64 }
%"struct.bssl::CertCompressionAlg" = type <{ i32 (%struct.ssl_st*, %struct.cbb_st*, i8*, i64)*, i32 (%struct.ssl_st*, %struct.crypto_buffer_st**, i64, i8*, i64)*, i16, [6 x i8] }>
%struct.timeval = type { i64, i64 }
%struct.crypto_buffer_pool_st = type opaque
%struct.ssl_ticket_aead_method_st = type { i64 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)* }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { i8* }
%struct.ssl_quic_method_st = type { i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, i8*, i64)*, i32 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i32, i8)* }
%struct.x509_store_st = type { i32, %struct.stack_st_X509_OBJECT*, %union.crypto_mutex_st, %struct.stack_st_X509*, %struct.stack_st_X509_LOOKUP*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.x509_store_ctx_st*)*, {}*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 }
%struct.stack_st_X509_OBJECT = type opaque
%struct.stack_st_X509_LOOKUP = type opaque
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %struct.crypto_buffer_st* }
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.bssl::DC"* }
%"struct.bssl::DC" = type { %"class.std::__1::unique_ptr.86", i16, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.evp_pkey_st* }
%struct.ssl_private_key_method_st = type { i32 (%struct.ssl_st*, i8*, i64*, i64, i16, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64)* }
%"struct.bssl::SSL_X509_METHOD" = type { i1 (%struct.stack_st_CRYPTO_BUFFER*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*, %"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, i1 (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %struct.ssl_session_st*)*, void (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %"struct.bssl::SSL_HANDSHAKE"*, i8*)*, void (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)* }
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.ec_key_st = type opaque
%struct.ec_group_st = type opaque

$sk_CRYPTO_BUFFER_call_copy_func = comdat any

$sk_CRYPTO_BUFFER_call_free_func = comdat any

$_ZZN4bssl8internal11DeleterImplI22stack_st_CRYPTO_BUFFERvE4FreeEPS2_ENUlPFvPvES5_E_8__invokeES7_S5_ = comdat any

@.str = private unnamed_addr constant [48 x i8] c"../../third_party/boringssl/src/ssl/ssl_cert.cc\00", align 1
@_ZZN4bssl24ssl_cert_check_key_usageEPK6cbs_stNS_15ssl_key_usage_tEE12kKeyUsageOID = internal constant [3 x i8] c"U\1D\0F", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"../../third_party/boringssl/src/ssl/internal.h\00", align 1

@_ZN4bssl4CERTC1EPKNS_15SSL_X509_METHODE = hidden unnamed_addr alias void (%"struct.bssl::CERT"*, %"struct.bssl::SSL_X509_METHOD"*), void (%"struct.bssl::CERT"*, %"struct.bssl::SSL_X509_METHOD"*)* @_ZN4bssl4CERTC2EPKNS_15SSL_X509_METHODE
@_ZN4bssl4CERTD1Ev = hidden unnamed_addr alias void (%"struct.bssl::CERT"*), void (%"struct.bssl::CERT"*)* @_ZN4bssl4CERTD2Ev
@_ZN4bssl2DCC1Ev = hidden unnamed_addr alias void (%"struct.bssl::DC"*), void (%"struct.bssl::DC"*)* @_ZN4bssl2DCC2Ev
@_ZN4bssl2DCD1Ev = hidden unnamed_addr alias void (%"struct.bssl::DC"*), void (%"struct.bssl::DC"*)* @_ZN4bssl2DCD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl4CERTC2EPKNS_15SSL_X509_METHODE(%"struct.bssl::CERT"*, %"struct.bssl::SSL_X509_METHOD"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 6
  %4 = bitcast %"struct.bssl::CERT"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 48, i1 false)
  store %"struct.bssl::SSL_X509_METHOD"* %1, %"struct.bssl::SSL_X509_METHOD"** %3, align 8
  %5 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 7
  %6 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 15
  %7 = bitcast %"class.bssl::Array.36"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 89, i1 false)
  %8 = bitcast %"class.std::__1::unique_ptr.113"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl4CERTD2Ev(%"struct.bssl::CERT"*) unnamed_addr #0 align 2 {
  tail call void @_ZN4bssl20ssl_cert_clear_certsEPNS_4CERTE(%"struct.bssl::CERT"* %0)
  %2 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 6
  %3 = load %"struct.bssl::SSL_X509_METHOD"*, %"struct.bssl::SSL_X509_METHOD"** %2, align 8
  %4 = getelementptr inbounds %"struct.bssl::SSL_X509_METHOD", %"struct.bssl::SSL_X509_METHOD"* %3, i64 0, i32 2
  %5 = load void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)** %4, align 8
  tail call void %5(%"struct.bssl::CERT"* %0) #8
  %6 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %7 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %6, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %6, align 8
  %8 = icmp eq %struct.evp_pkey_st* %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %7) #8
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 15, i32 0, i32 0, i32 0
  %12 = load %"struct.bssl::DC"*, %"struct.bssl::DC"** %11, align 8
  store %"struct.bssl::DC"* null, %"struct.bssl::DC"** %11, align 8
  %13 = icmp eq %"struct.bssl::DC"* %12, null
  br i1 %13, label %26, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %12, i64 0, i32 2, i32 0, i32 0, i32 0
  %16 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %15, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %15, align 8
  %17 = icmp eq %struct.evp_pkey_st* %16, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %14
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %16) #8
  br label %19

19:                                               ; preds = %18, %14
  %20 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %12, i64 0, i32 0, i32 0, i32 0, i32 0
  %21 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %20, align 8
  store %struct.crypto_buffer_st* null, %struct.crypto_buffer_st** %20, align 8
  %22 = icmp eq %struct.crypto_buffer_st* %21, null
  br i1 %22, label %24, label %23

23:                                               ; preds = %19
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %21) #8
  br label %24

24:                                               ; preds = %23, %19
  %25 = bitcast %"struct.bssl::DC"* %12 to i8*
  tail call void @OPENSSL_free(i8* nonnull %25) #8
  br label %26

26:                                               ; preds = %10, %24
  %27 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %28 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %27, align 8
  store %struct.crypto_buffer_st* null, %struct.crypto_buffer_st** %27, align 8
  %29 = icmp eq %struct.crypto_buffer_st* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %26
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %28) #8
  br label %31

31:                                               ; preds = %26, %30
  %32 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %33 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %32, align 8
  store %struct.crypto_buffer_st* null, %struct.crypto_buffer_st** %32, align 8
  %34 = icmp eq %struct.crypto_buffer_st* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %33) #8
  br label %36

36:                                               ; preds = %31, %35
  %37 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 7
  %38 = bitcast %"class.bssl::Array.36"* %37 to i8**
  %39 = load i8*, i8** %38, align 8
  tail call void @OPENSSL_free(i8* %39) #8
  %40 = bitcast %"class.bssl::Array.36"* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 16, i1 false) #8
  %41 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %42 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %41, align 8
  store %struct.stack_st_CRYPTO_BUFFER* null, %struct.stack_st_CRYPTO_BUFFER** %41, align 8
  %43 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %36
  %45 = bitcast %struct.stack_st_CRYPTO_BUFFER* %42 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %45, void (void (i8*)*, i8*)* nonnull @_ZZN4bssl8internal11DeleterImplI22stack_st_CRYPTO_BUFFERvE4FreeEPS2_ENUlPFvPvES5_E_8__invokeES7_S5_, void (i8*)* null) #8
  br label %46

46:                                               ; preds = %36, %44
  %47 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %48 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %47, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %47, align 8
  %49 = icmp eq %struct.evp_pkey_st* %48, null
  br i1 %49, label %51, label %50

50:                                               ; preds = %46
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %48) #8
  br label %51

51:                                               ; preds = %46, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl20ssl_cert_clear_certsEPNS_4CERTE(%"struct.bssl::CERT"*) local_unnamed_addr #0 {
  %2 = icmp eq %"struct.bssl::CERT"* %0, null
  br i1 %2, label %42, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 6
  %5 = load %"struct.bssl::SSL_X509_METHOD"*, %"struct.bssl::SSL_X509_METHOD"** %4, align 8
  %6 = getelementptr inbounds %"struct.bssl::SSL_X509_METHOD", %"struct.bssl::SSL_X509_METHOD"* %5, i64 0, i32 1
  %7 = load void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)** %6, align 8
  tail call void %7(%"struct.bssl::CERT"* nonnull %0) #8
  %8 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %9 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %8, align 8
  store %struct.stack_st_CRYPTO_BUFFER* null, %struct.stack_st_CRYPTO_BUFFER** %8, align 8
  %10 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %3
  %12 = bitcast %struct.stack_st_CRYPTO_BUFFER* %9 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %12, void (void (i8*)*, i8*)* nonnull @_ZZN4bssl8internal11DeleterImplI22stack_st_CRYPTO_BUFFERvE4FreeEPS2_ENUlPFvPvES5_E_8__invokeES7_S5_, void (i8*)* null) #8
  br label %13

13:                                               ; preds = %3, %11
  %14 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %14, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %14, align 8
  %16 = icmp eq %struct.evp_pkey_st* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %13
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %15) #8
  br label %18

18:                                               ; preds = %13, %17
  %19 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 5
  store %struct.ssl_private_key_method_st* null, %struct.ssl_private_key_method_st** %19, align 8
  %20 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 15, i32 0, i32 0, i32 0
  %21 = load %"struct.bssl::DC"*, %"struct.bssl::DC"** %20, align 8
  store %"struct.bssl::DC"* null, %"struct.bssl::DC"** %20, align 8
  %22 = icmp eq %"struct.bssl::DC"* %21, null
  br i1 %22, label %35, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %21, i64 0, i32 2, i32 0, i32 0, i32 0
  %25 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %24, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %24, align 8
  %26 = icmp eq %struct.evp_pkey_st* %25, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %23
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %25) #8
  br label %28

28:                                               ; preds = %27, %23
  %29 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %21, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %29, align 8
  store %struct.crypto_buffer_st* null, %struct.crypto_buffer_st** %29, align 8
  %31 = icmp eq %struct.crypto_buffer_st* %30, null
  br i1 %31, label %33, label %32

32:                                               ; preds = %28
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %30) #8
  br label %33

33:                                               ; preds = %32, %28
  %34 = bitcast %"struct.bssl::DC"* %21 to i8*
  tail call void @OPENSSL_free(i8* nonnull %34) #8
  br label %35

35:                                               ; preds = %18, %33
  %36 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %37 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %36, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %36, align 8
  %38 = icmp eq %struct.evp_pkey_st* %37, null
  br i1 %38, label %40, label %39

39:                                               ; preds = %35
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %37) #8
  br label %40

40:                                               ; preds = %35, %39
  %41 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 17
  store %struct.ssl_private_key_method_st* null, %struct.ssl_private_key_method_st** %41, align 8
  br label %42

42:                                               ; preds = %1, %40
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.bssl::CERT"* @_ZN4bssl12ssl_cert_dupEPNS_4CERTE(%"struct.bssl::CERT"*) local_unnamed_addr #0 {
  %2 = tail call i8* @OPENSSL_malloc(i64 176) #8
  %3 = icmp eq i8* %2, null
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 196) #8
  br label %165

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 6
  %7 = bitcast i8* %2 to %"struct.bssl::CERT"*
  %8 = bitcast %"struct.bssl::SSL_X509_METHOD"** %6 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds i8, i8* %2, i64 48
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 48, i1 false) #8
  %11 = bitcast i8* %10 to i64*
  store i64 %9, i64* %11, align 8
  %12 = getelementptr inbounds i8, i8* %2, i64 56
  %13 = getelementptr inbounds i8, i8* %2, i64 152
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 89, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 24, i1 false) #8
  %14 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %15 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %14, align 8
  %16 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %15, null
  br i1 %16, label %32, label %17

17:                                               ; preds = %5
  %18 = getelementptr inbounds i8, i8* %2, i64 8
  %19 = bitcast %struct.stack_st_CRYPTO_BUFFER* %15 to %struct.stack_st*
  %20 = tail call %struct.stack_st* @sk_deep_copy(%struct.stack_st* nonnull %19, i8* (i8* (i8*)*, i8*)* nonnull @sk_CRYPTO_BUFFER_call_copy_func, i8* (i8*)* bitcast (%struct.crypto_buffer_st* (%struct.crypto_buffer_st*)* @_ZN4bsslL13buffer_up_refEP16crypto_buffer_st to i8* (i8*)*), void (void (i8*)*, i8*)* nonnull @sk_CRYPTO_BUFFER_call_free_func, void (i8*)* bitcast (void (%struct.crypto_buffer_st*)* @CRYPTO_BUFFER_free to void (i8*)*)) #8
  %21 = bitcast %struct.stack_st* %20 to %struct.stack_st_CRYPTO_BUFFER*
  %22 = bitcast i8* %18 to %struct.stack_st_CRYPTO_BUFFER**
  %23 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %22, align 8
  %24 = bitcast i8* %18 to %struct.stack_st**
  store %struct.stack_st* %20, %struct.stack_st** %24, align 8
  %25 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %23, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %17
  %27 = bitcast %struct.stack_st_CRYPTO_BUFFER* %23 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %27, void (void (i8*)*, i8*)* nonnull @_ZZN4bssl8internal11DeleterImplI22stack_st_CRYPTO_BUFFERvE4FreeEPS2_ENUlPFvPvES5_E_8__invokeES7_S5_, void (i8*)* null) #8
  %28 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %22, align 8
  br label %29

29:                                               ; preds = %17, %26
  %30 = phi %struct.stack_st_CRYPTO_BUFFER* [ %21, %17 ], [ %28, %26 ]
  %31 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %30, null
  br i1 %31, label %164, label %32

32:                                               ; preds = %29, %5
  %33 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %34 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %33, align 8
  %35 = icmp eq %struct.evp_pkey_st* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %32
  %37 = tail call i32 @EVP_PKEY_up_ref(%struct.evp_pkey_st* nonnull %34) #8
  br label %38

38:                                               ; preds = %32, %36
  %39 = ptrtoint %struct.evp_pkey_st* %34 to i64
  %40 = bitcast i8* %2 to %struct.evp_pkey_st**
  %41 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %40, align 8
  %42 = bitcast i8* %2 to i64*
  store i64 %39, i64* %42, align 8
  %43 = icmp eq %struct.evp_pkey_st* %41, null
  br i1 %43, label %45, label %44

44:                                               ; preds = %38
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %41) #8
  br label %45

45:                                               ; preds = %44, %38
  %46 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 5
  %47 = bitcast %struct.ssl_private_key_method_st** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds i8, i8* %2, i64 40
  %50 = bitcast i8* %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 7
  %52 = bitcast %"class.bssl::Array.36"* %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 7, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = bitcast i8* %12 to i8**
  %57 = load i8*, i8** %56, align 8
  tail call void @OPENSSL_free(i8* %57) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false) #8
  %58 = icmp eq i64 %55, 0
  br i1 %58, label %70, label %59

59:                                               ; preds = %45
  %60 = icmp slt i64 %55, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %59
  tail call void @ERR_put_error(i32 16, i32 0, i32 69, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 319) #8
  br label %164

62:                                               ; preds = %59
  %63 = shl i64 %55, 1
  %64 = tail call i8* @OPENSSL_malloc(i64 %63) #8
  store i8* %64, i8** %56, align 8
  %65 = icmp eq i8* %64, null
  br i1 %65, label %66, label %67

66:                                               ; preds = %62
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 324) #8
  br label %164

67:                                               ; preds = %62
  %68 = getelementptr inbounds i8, i8* %2, i64 64
  %69 = bitcast i8* %68 to i64*
  store i64 %55, i64* %69, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %64, i8* align 1 %53, i64 %63, i1 false) #8
  br label %70

70:                                               ; preds = %45, %67
  %71 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 8
  %72 = bitcast i32 (%struct.ssl_st*, i8*)** %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds i8, i8* %2, i64 72
  %75 = bitcast i8* %74 to i64*
  store i64 %73, i64* %75, align 8
  %76 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 9
  %77 = bitcast i8** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds i8, i8* %2, i64 80
  %80 = bitcast i8* %79 to i64*
  store i64 %78, i64* %80, align 8
  %81 = bitcast i8* %10 to %"struct.bssl::SSL_X509_METHOD"**
  %82 = load %"struct.bssl::SSL_X509_METHOD"*, %"struct.bssl::SSL_X509_METHOD"** %81, align 8
  %83 = getelementptr inbounds %"struct.bssl::SSL_X509_METHOD", %"struct.bssl::SSL_X509_METHOD"* %82, i64 0, i32 3
  %84 = load void (%"struct.bssl::CERT"*, %"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*, %"struct.bssl::CERT"*)** %83, align 8
  tail call void %84(%"struct.bssl::CERT"* nonnull %7, %"struct.bssl::CERT"* %0) #8
  %85 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %86 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %85, align 8
  %87 = icmp eq %struct.crypto_buffer_st* %86, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %70
  %89 = tail call i32 @CRYPTO_BUFFER_up_ref(%struct.crypto_buffer_st* nonnull %86) #8
  br label %90

90:                                               ; preds = %70, %88
  %91 = ptrtoint %struct.crypto_buffer_st* %86 to i64
  %92 = getelementptr inbounds i8, i8* %2, i64 96
  %93 = bitcast i8* %92 to %struct.crypto_buffer_st**
  %94 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %93, align 8
  %95 = bitcast i8* %92 to i64*
  store i64 %91, i64* %95, align 8
  %96 = icmp eq %struct.crypto_buffer_st* %94, null
  br i1 %96, label %98, label %97

97:                                               ; preds = %90
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %94) #8
  br label %98

98:                                               ; preds = %97, %90
  %99 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %100 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %99, align 8
  %101 = icmp eq %struct.crypto_buffer_st* %100, null
  br i1 %101, label %104, label %102

102:                                              ; preds = %98
  %103 = tail call i32 @CRYPTO_BUFFER_up_ref(%struct.crypto_buffer_st* nonnull %100) #8
  br label %104

104:                                              ; preds = %98, %102
  %105 = ptrtoint %struct.crypto_buffer_st* %100 to i64
  %106 = getelementptr inbounds i8, i8* %2, i64 104
  %107 = bitcast i8* %106 to %struct.crypto_buffer_st**
  %108 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %107, align 8
  %109 = bitcast i8* %106 to i64*
  store i64 %105, i64* %109, align 8
  %110 = icmp eq %struct.crypto_buffer_st* %108, null
  br i1 %110, label %112, label %111

111:                                              ; preds = %104
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %108) #8
  br label %112

112:                                              ; preds = %111, %104
  %113 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 13
  %114 = load i8, i8* %113, align 8
  %115 = getelementptr inbounds i8, i8* %2, i64 112
  store i8 %114, i8* %115, align 8
  %116 = getelementptr inbounds i8, i8* %2, i64 113
  %117 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 14, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %116, i8* align 1 %117, i64 32, i1 false) #8
  %118 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 15, i32 0, i32 0, i32 0
  %119 = load %"struct.bssl::DC"*, %"struct.bssl::DC"** %118, align 8
  %120 = icmp eq %"struct.bssl::DC"* %119, null
  br i1 %120, label %144, label %121

121:                                              ; preds = %112
  %122 = tail call %"struct.bssl::DC"* @_ZN4bssl2DC3DupEv(%"struct.bssl::DC"* nonnull %119)
  %123 = ptrtoint %"struct.bssl::DC"* %122 to i64
  %124 = bitcast i8* %13 to %"struct.bssl::DC"**
  %125 = load %"struct.bssl::DC"*, %"struct.bssl::DC"** %124, align 8
  %126 = bitcast i8* %13 to i64*
  store i64 %123, i64* %126, align 8
  %127 = icmp eq %"struct.bssl::DC"* %125, null
  br i1 %127, label %141, label %128

128:                                              ; preds = %121
  %129 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %125, i64 0, i32 2, i32 0, i32 0, i32 0
  %130 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %129, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %129, align 8
  %131 = icmp eq %struct.evp_pkey_st* %130, null
  br i1 %131, label %133, label %132

132:                                              ; preds = %128
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %130) #8
  br label %133

133:                                              ; preds = %132, %128
  %134 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %125, i64 0, i32 0, i32 0, i32 0, i32 0
  %135 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %134, align 8
  store %struct.crypto_buffer_st* null, %struct.crypto_buffer_st** %134, align 8
  %136 = icmp eq %struct.crypto_buffer_st* %135, null
  br i1 %136, label %138, label %137

137:                                              ; preds = %133
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %135) #8
  br label %138

138:                                              ; preds = %137, %133
  %139 = bitcast %"struct.bssl::DC"* %125 to i8*
  tail call void @OPENSSL_free(i8* nonnull %139) #8
  %140 = load %"struct.bssl::DC"*, %"struct.bssl::DC"** %124, align 8
  br label %141

141:                                              ; preds = %138, %121
  %142 = phi %"struct.bssl::DC"* [ %140, %138 ], [ %122, %121 ]
  %143 = icmp eq %"struct.bssl::DC"* %142, null
  br i1 %143, label %164, label %144

144:                                              ; preds = %141, %112
  %145 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %146 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %145, align 8
  %147 = icmp eq %struct.evp_pkey_st* %146, null
  br i1 %147, label %150, label %148

148:                                              ; preds = %144
  %149 = tail call i32 @EVP_PKEY_up_ref(%struct.evp_pkey_st* nonnull %146) #8
  br label %150

150:                                              ; preds = %144, %148
  %151 = ptrtoint %struct.evp_pkey_st* %146 to i64
  %152 = getelementptr inbounds i8, i8* %2, i64 160
  %153 = bitcast i8* %152 to %struct.evp_pkey_st**
  %154 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %153, align 8
  %155 = bitcast i8* %152 to i64*
  store i64 %151, i64* %155, align 8
  %156 = icmp eq %struct.evp_pkey_st* %154, null
  br i1 %156, label %158, label %157

157:                                              ; preds = %150
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %154) #8
  br label %158

158:                                              ; preds = %157, %150
  %159 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 17
  %160 = bitcast %struct.ssl_private_key_method_st** %159 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = getelementptr inbounds i8, i8* %2, i64 168
  %163 = bitcast i8* %162 to i64*
  store i64 %161, i64* %163, align 8
  br label %165

164:                                              ; preds = %61, %66, %141, %29
  tail call void @_ZN4bssl4CERTD2Ev(%"struct.bssl::CERT"* nonnull %7) #8
  tail call void @OPENSSL_free(i8* nonnull %2) #8
  br label %165

165:                                              ; preds = %4, %158, %164
  %166 = phi %"struct.bssl::CERT"* [ null, %164 ], [ null, %4 ], [ %7, %158 ]
  ret %"struct.bssl::CERT"* %166
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal %struct.crypto_buffer_st* @_ZN4bsslL13buffer_up_refEP16crypto_buffer_st(%struct.crypto_buffer_st* returned) #0 {
  %2 = tail call i32 @CRYPTO_BUFFER_up_ref(%struct.crypto_buffer_st* %0) #8
  ret %struct.crypto_buffer_st* %0
}

declare void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.bssl::DC"* @_ZN4bssl2DC3DupEv(%"struct.bssl::DC"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @OPENSSL_malloc(i64 24) #8
  %3 = icmp eq i8* %2, null
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 196) #8
  br label %38

5:                                                ; preds = %1
  %6 = bitcast i8* %2 to i64*
  store i64 0, i64* %6, align 8
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to i16*
  store i16 0, i16* %8, align 8
  %9 = getelementptr inbounds i8, i8* %2, i64 16
  %10 = bitcast i8* %9 to i64*
  store i64 0, i64* %10, align 8
  %11 = ptrtoint i8* %2 to i64
  %12 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %12, align 8
  %14 = icmp eq %struct.crypto_buffer_st* %13, null
  br i1 %14, label %15, label %17

15:                                               ; preds = %5
  %16 = ptrtoint %struct.crypto_buffer_st* %13 to i64
  store i64 %16, i64* %6, align 8
  br label %24

17:                                               ; preds = %5
  %18 = tail call i32 @CRYPTO_BUFFER_up_ref(%struct.crypto_buffer_st* nonnull %13) #8
  %19 = bitcast i8* %2 to %struct.crypto_buffer_st**
  %20 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %19, align 8
  %21 = ptrtoint %struct.crypto_buffer_st* %13 to i64
  store i64 %21, i64* %6, align 8
  %22 = icmp eq %struct.crypto_buffer_st* %20, null
  br i1 %22, label %24, label %23

23:                                               ; preds = %17
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %20) #8
  br label %24

24:                                               ; preds = %15, %23, %17
  %25 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %0, i64 0, i32 1
  %26 = load i16, i16* %25, align 8
  store i16 %26, i16* %8, align 8
  %27 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %28 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %27, align 8
  %29 = icmp eq %struct.evp_pkey_st* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %24
  %31 = tail call i32 @EVP_PKEY_up_ref(%struct.evp_pkey_st* nonnull %28) #8
  br label %32

32:                                               ; preds = %24, %30
  %33 = ptrtoint %struct.evp_pkey_st* %28 to i64
  %34 = bitcast i8* %9 to %struct.evp_pkey_st**
  %35 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %34, align 8
  store i64 %33, i64* %10, align 8
  %36 = icmp eq %struct.evp_pkey_st* %35, null
  br i1 %36, label %38, label %37

37:                                               ; preds = %32
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %35) #8
  br label %38

38:                                               ; preds = %32, %37, %4
  %39 = phi i64 [ %11, %32 ], [ %11, %37 ], [ 0, %4 ]
  %40 = inttoptr i64 %39 to %"struct.bssl::DC"*
  ret %"struct.bssl::DC"* %40
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl12ssl_set_certEPNS_4CERTENSt3__110unique_ptrI16crypto_buffer_stNS_8internal7DeleterIS4_EEEE(%"struct.bssl::CERT"*, %struct.crypto_buffer_st*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %3, align 8
  %5 = tail call fastcc i32 @_ZN4bsslL27check_leaf_cert_and_privkeyEP16crypto_buffer_stP11evp_pkey_st(%struct.crypto_buffer_st* %1, %struct.evp_pkey_st* %4)
  switch i32 %5, label %10 [
    i32 0, label %51
    i32 2, label %6
  ]

6:                                                ; preds = %2
  %7 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %3, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %3, align 8
  %8 = icmp eq %struct.evp_pkey_st* %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %6
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %7) #8
  br label %10

10:                                               ; preds = %9, %6, %2
  %11 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 6
  %12 = load %"struct.bssl::SSL_X509_METHOD"*, %"struct.bssl::SSL_X509_METHOD"** %11, align 8
  %13 = getelementptr inbounds %"struct.bssl::SSL_X509_METHOD", %"struct.bssl::SSL_X509_METHOD"* %12, i64 0, i32 5
  %14 = load void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)** %13, align 8
  tail call void %14(%"struct.bssl::CERT"* %0) #8
  %15 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %16 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %15, align 8
  %17 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %16, null
  br i1 %17, label %26, label %18

18:                                               ; preds = %10
  %19 = bitcast %struct.stack_st_CRYPTO_BUFFER* %16 to %struct.stack_st*
  %20 = tail call i8* @sk_value(%struct.stack_st* nonnull %19, i64 0) #8
  %21 = bitcast i8* %20 to %struct.crypto_buffer_st*
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* %21) #8
  %22 = bitcast %struct.stack_st_CRYPTO_BUFFER** %15 to %struct.stack_st**
  %23 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %24 = bitcast %struct.crypto_buffer_st* %1 to i8*
  %25 = tail call i8* @sk_set(%struct.stack_st* %23, i64 0, i8* %24) #8
  br label %54

26:                                               ; preds = %10
  %27 = tail call %struct.stack_st* @sk_new_null() #8
  %28 = bitcast %struct.stack_st* %27 to %struct.stack_st_CRYPTO_BUFFER*
  %29 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %15, align 8
  %30 = bitcast %struct.stack_st_CRYPTO_BUFFER** %15 to %struct.stack_st**
  store %struct.stack_st* %27, %struct.stack_st** %30, align 8
  %31 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %29, null
  br i1 %31, label %35, label %32

32:                                               ; preds = %26
  %33 = bitcast %struct.stack_st_CRYPTO_BUFFER* %29 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %33, void (void (i8*)*, i8*)* nonnull @_ZZN4bssl8internal11DeleterImplI22stack_st_CRYPTO_BUFFERvE4FreeEPS2_ENUlPFvPvES5_E_8__invokeES7_S5_, void (i8*)* null) #8
  %34 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %15, align 8
  br label %35

35:                                               ; preds = %26, %32
  %36 = phi %struct.stack_st_CRYPTO_BUFFER* [ %28, %26 ], [ %34, %32 ]
  %37 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %36, null
  br i1 %37, label %51, label %38

38:                                               ; preds = %35
  %39 = bitcast %struct.stack_st_CRYPTO_BUFFER* %36 to %struct.stack_st*
  %40 = bitcast %struct.crypto_buffer_st* %1 to i8*
  %41 = tail call i64 @sk_push(%struct.stack_st* nonnull %39, i8* %40) #8
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %54

43:                                               ; preds = %38
  %44 = icmp eq %struct.crypto_buffer_st* %1, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %43
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %1) #8
  br label %46

46:                                               ; preds = %43, %45
  %47 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %15, align 8
  store %struct.stack_st_CRYPTO_BUFFER* null, %struct.stack_st_CRYPTO_BUFFER** %15, align 8
  %48 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %47, null
  br i1 %48, label %54, label %49

49:                                               ; preds = %46
  %50 = bitcast %struct.stack_st_CRYPTO_BUFFER* %47 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %50, void (void (i8*)*, i8*)* nonnull @_ZZN4bssl8internal11DeleterImplI22stack_st_CRYPTO_BUFFERvE4FreeEPS2_ENUlPFvPvES5_E_8__invokeES7_S5_, void (i8*)* null) #8
  br label %54

51:                                               ; preds = %35, %2
  %52 = icmp eq %struct.crypto_buffer_st* %1, null
  br i1 %52, label %54, label %53

53:                                               ; preds = %51
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %1) #8
  br label %54

54:                                               ; preds = %49, %46, %38, %18, %51, %53
  %55 = phi i1 [ false, %51 ], [ false, %53 ], [ false, %49 ], [ false, %46 ], [ true, %38 ], [ true, %18 ]
  ret i1 %55
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN4bsslL27check_leaf_cert_and_privkeyEP16crypto_buffer_stP11evp_pkey_st(%struct.crypto_buffer_st*, %struct.evp_pkey_st*) unnamed_addr #0 {
  %3 = alloca %struct.cbs_st, align 8
  %4 = alloca %struct.cbs_st, align 8
  %5 = alloca %struct.cbs_st, align 8
  %6 = bitcast %struct.cbs_st* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8
  %7 = bitcast %struct.cbs_st* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 16, i1 false)
  call void @CRYPTO_BUFFER_init_CBS(%struct.crypto_buffer_st* %0, %struct.cbs_st* nonnull %5) #8
  %8 = bitcast %struct.cbs_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* nonnull align 8 %6, i64 16, i1 false) #8
  %9 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false) #8
  %10 = call fastcc zeroext i1 @_ZN4bsslL21ssl_cert_skip_to_spkiEPK6cbs_stPS0_(%struct.cbs_st* nonnull %3, %struct.cbs_st* nonnull %4) #8
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  call void @ERR_put_error(i32 16, i32 0, i32 272, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 485) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #8
  br label %31

12:                                               ; preds = %2
  %13 = call %struct.evp_pkey_st* @EVP_parse_public_key(%struct.cbs_st* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #8
  %14 = icmp eq %struct.evp_pkey_st* %13, null
  br i1 %14, label %31, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %13, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = call zeroext i1 @_ZN4bssl25ssl_is_key_type_supportedEi(i32 %17) #8
  br i1 %18, label %20, label %19

19:                                               ; preds = %15
  call void @ERR_put_error(i32 16, i32 0, i32 228, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 241) #8
  br label %32

20:                                               ; preds = %15
  %21 = load i32, i32* %16, align 4
  %22 = icmp eq i32 %21, 408
  br i1 %22, label %23, label %26

23:                                               ; preds = %20
  %24 = call zeroext i1 @_ZN4bssl24ssl_cert_check_key_usageEPK6cbs_stNS_15ssl_key_usage_tE(%struct.cbs_st* nonnull %5, i32 0)
  br i1 %24, label %26, label %25

25:                                               ; preds = %23
  call void @ERR_put_error(i32 16, i32 0, i32 228, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 249) #8
  br label %32

26:                                               ; preds = %23, %20
  %27 = icmp eq %struct.evp_pkey_st* %1, null
  br i1 %27, label %32, label %28

28:                                               ; preds = %26
  %29 = call zeroext i1 @_ZN4bssl34ssl_compare_public_and_private_keyEPK11evp_pkey_stS2_(%struct.evp_pkey_st* nonnull %13, %struct.evp_pkey_st* nonnull %1)
  br i1 %29, label %32, label %30

30:                                               ; preds = %28
  call void @ERR_clear_error() #8
  br label %32

31:                                               ; preds = %12, %11
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 236) #8
  br label %34

32:                                               ; preds = %30, %25, %19, %26, %28
  %33 = phi i32 [ 1, %28 ], [ 1, %26 ], [ 0, %19 ], [ 0, %25 ], [ 2, %30 ]
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %13) #8
  br label %34

34:                                               ; preds = %31, %32
  %35 = phi i32 [ 0, %31 ], [ %33, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl19ssl_has_certificateEPKNS_13SSL_HANDSHAKEE(%"struct.bssl::SSL_HANDSHAKE"*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 1
  %3 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %2, align 8
  %4 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %3, i64 0, i32 6, i32 0, i32 0, i32 0
  %5 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %4, align 8
  %6 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %5, i64 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %6, align 8
  %8 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %7, null
  br i1 %8, label %15, label %9

9:                                                ; preds = %1
  %10 = bitcast %struct.stack_st_CRYPTO_BUFFER* %7 to %struct.stack_st*
  %11 = tail call i8* @sk_value(%struct.stack_st* nonnull %10, i64 0) #8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call zeroext i1 @_ZN4bssl19ssl_has_private_keyEPKNS_13SSL_HANDSHAKEE(%"struct.bssl::SSL_HANDSHAKE"* %0) #8
  br label %15

15:                                               ; preds = %1, %9, %13
  %16 = phi i1 [ false, %9 ], [ false, %1 ], [ %14, %13 ]
  ret i1 %16
}

declare zeroext i1 @_ZN4bssl19ssl_has_private_keyEPKNS_13SSL_HANDSHAKEE(%"struct.bssl::SSL_HANDSHAKE"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl20ssl_parse_cert_chainEPhPNSt3__110unique_ptrI22stack_st_CRYPTO_BUFFERNS_8internal7DeleterIS3_EEEEPNS2_I11evp_pkey_stNS5_IS9_EEEES0_P6cbs_stP21crypto_buffer_pool_st(i8* nocapture, %"class.std::__1::unique_ptr.1"* nocapture, %"class.std::__1::unique_ptr"* nocapture, i8*, %struct.cbs_st*, %struct.crypto_buffer_pool_st*) local_unnamed_addr #0 {
  %7 = alloca %struct.cbs_st, align 8
  %8 = alloca %struct.cbs_st, align 8
  %9 = alloca %struct.cbs_st, align 8
  %10 = alloca %struct.cbs_st, align 8
  %11 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %1, i64 0, i32 0, i32 0, i32 0
  %12 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %11, align 8
  store %struct.stack_st_CRYPTO_BUFFER* null, %struct.stack_st_CRYPTO_BUFFER** %11, align 8
  %13 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %12, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %6
  %15 = bitcast %struct.stack_st_CRYPTO_BUFFER* %12 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %15, void (void (i8*)*, i8*)* nonnull @_ZZN4bssl8internal11DeleterImplI22stack_st_CRYPTO_BUFFERvE4FreeEPS2_ENUlPFvPvES5_E_8__invokeES7_S5_, void (i8*)* null) #8
  br label %16

16:                                               ; preds = %6, %14
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %2, i64 0, i32 0, i32 0, i32 0
  %18 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %17, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %17, align 8
  %19 = icmp eq %struct.evp_pkey_st* %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %16
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %18) #8
  br label %21

21:                                               ; preds = %16, %20
  %22 = bitcast %struct.cbs_st* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #8
  %23 = bitcast %struct.cbs_st* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 16, i1 false)
  %24 = call i32 @CBS_get_u24_length_prefixed(%struct.cbs_st* %4, %struct.cbs_st* nonnull %9) #8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %21
  store i8 50, i8* %0, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 357) #8
  br label %106

27:                                               ; preds = %21
  %28 = call i64 @CBS_len(%struct.cbs_st* nonnull %9) #8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %106, label %30

30:                                               ; preds = %27
  %31 = call %struct.stack_st* @sk_new_null() #8
  %32 = ptrtoint %struct.stack_st* %31 to i64
  %33 = icmp eq %struct.stack_st* %31, null
  br i1 %33, label %43, label %34

34:                                               ; preds = %30
  %35 = call i64 @CBS_len(%struct.cbs_st* nonnull %9) #8
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %87, label %37

37:                                               ; preds = %34
  %38 = bitcast %struct.cbs_st* %10 to i8*
  %39 = bitcast %struct.cbs_st* %7 to i8*
  %40 = bitcast %struct.cbs_st* %8 to i8*
  %41 = icmp eq i8* %3, null
  %42 = bitcast %struct.cbs_st* %10 to i8*
  br label %44

43:                                               ; preds = %30
  store i8 80, i8* %0, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 368) #8
  br label %106

44:                                               ; preds = %37, %84
  %45 = phi i64 [ 0, %37 ], [ %75, %84 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 -86, i64 16, i1 false)
  %46 = call i32 @CBS_get_u24_length_prefixed(%struct.cbs_st* nonnull %9, %struct.cbs_st* nonnull %10) #8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %51, label %48

48:                                               ; preds = %44
  %49 = call i64 @CBS_len(%struct.cbs_st* nonnull %10) #8
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %44, %48
  store i8 50, i8* %0, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 127, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 378) #8
  br label %99

52:                                               ; preds = %48
  %53 = call i64 @sk_num(%struct.stack_st* nonnull %31) #8
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %74

55:                                               ; preds = %52
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %39, i8* nonnull align 8 %38, i64 16, i1 false) #8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -86, i64 16, i1 false) #8
  %56 = call fastcc zeroext i1 @_ZN4bsslL21ssl_cert_skip_to_spkiEPK6cbs_stPS0_(%struct.cbs_st* nonnull %7, %struct.cbs_st* nonnull %8) #8
  br i1 %56, label %58, label %57

57:                                               ; preds = %55
  call void @ERR_put_error(i32 16, i32 0, i32 272, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 485) #8
  br label %60

58:                                               ; preds = %55
  %59 = call %struct.evp_pkey_st* @EVP_parse_public_key(%struct.cbs_st* nonnull %8) #8
  br label %60

60:                                               ; preds = %57, %58
  %61 = phi %struct.evp_pkey_st* [ %59, %58 ], [ null, %57 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #8
  %62 = ptrtoint %struct.evp_pkey_st* %61 to i64
  %63 = icmp eq i64 %45, 0
  br i1 %63, label %66, label %64

64:                                               ; preds = %60
  %65 = inttoptr i64 %45 to %struct.evp_pkey_st*
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %65) #8
  br label %66

66:                                               ; preds = %64, %60
  %67 = icmp eq %struct.evp_pkey_st* %61, null
  br i1 %67, label %68, label %69

68:                                               ; preds = %66
  store i8 50, i8* %0, align 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #8
  br label %104

69:                                               ; preds = %66
  br i1 %41, label %74, label %70

70:                                               ; preds = %69
  %71 = call i8* @CBS_data(%struct.cbs_st* nonnull %10) #8
  %72 = call i64 @CBS_len(%struct.cbs_st* nonnull %10) #8
  %73 = call i8* @SHA256(i8* %71, i64 %72, i8* nonnull %3) #8
  br label %74

74:                                               ; preds = %69, %70, %52
  %75 = phi i64 [ %62, %69 ], [ %62, %70 ], [ %45, %52 ]
  %76 = call %struct.crypto_buffer_st* @CRYPTO_BUFFER_new_from_CBS(%struct.cbs_st* nonnull %10, %struct.crypto_buffer_pool_st* %5) #8
  %77 = icmp eq %struct.crypto_buffer_st* %76, null
  br i1 %77, label %83, label %78

78:                                               ; preds = %74
  %79 = bitcast %struct.crypto_buffer_st* %76 to i8*
  %80 = call i64 @sk_push(%struct.stack_st* nonnull %31, i8* nonnull %79) #8
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %78
  call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %76) #8
  br label %83

83:                                               ; preds = %74, %82
  store i8 80, i8* %0, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 400) #8
  br label %99

84:                                               ; preds = %78
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #8
  %85 = call i64 @CBS_len(%struct.cbs_st* nonnull %9) #8
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %44

87:                                               ; preds = %84, %34
  %88 = phi i64 [ 0, %34 ], [ %75, %84 ]
  %89 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %11, align 8
  %90 = bitcast %"class.std::__1::unique_ptr.1"* %1 to i64*
  store i64 %32, i64* %90, align 8
  %91 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %89, null
  br i1 %91, label %94, label %92

92:                                               ; preds = %87
  %93 = bitcast %struct.stack_st_CRYPTO_BUFFER* %89 to %struct.stack_st*
  call void @sk_pop_free_ex(%struct.stack_st* nonnull %93, void (void (i8*)*, i8*)* nonnull @_ZZN4bssl8internal11DeleterImplI22stack_st_CRYPTO_BUFFERvE4FreeEPS2_ENUlPFvPvES5_E_8__invokeES7_S5_, void (i8*)* null) #8
  br label %94

94:                                               ; preds = %87, %92
  %95 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %17, align 8
  %96 = bitcast %"class.std::__1::unique_ptr"* %2 to i64*
  store i64 %88, i64* %96, align 8
  %97 = icmp eq %struct.evp_pkey_st* %95, null
  br i1 %97, label %106, label %98

98:                                               ; preds = %94
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %95) #8
  br label %106

99:                                               ; preds = %83, %51
  %100 = phi i64 [ %75, %83 ], [ %45, %51 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #8
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %104, label %102

102:                                              ; preds = %99
  %103 = inttoptr i64 %100 to %struct.evp_pkey_st*
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %103) #8
  br label %104

104:                                              ; preds = %68, %102, %99
  br i1 %33, label %106, label %105

105:                                              ; preds = %104
  call void @sk_pop_free_ex(%struct.stack_st* nonnull %31, void (void (i8*)*, i8*)* nonnull @_ZZN4bssl8internal11DeleterImplI22stack_st_CRYPTO_BUFFERvE4FreeEPS2_ENUlPFvPvES5_E_8__invokeES7_S5_, void (i8*)* null) #8
  br label %106

106:                                              ; preds = %43, %94, %98, %105, %104, %27, %26
  %107 = phi i1 [ false, %26 ], [ true, %27 ], [ false, %104 ], [ false, %105 ], [ true, %98 ], [ true, %94 ], [ false, %43 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #8
  ret i1 %107
}

declare i32 @CBS_get_u24_length_prefixed(%struct.cbs_st*, %struct.cbs_st*) local_unnamed_addr #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

declare i64 @CBS_len(%struct.cbs_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.evp_pkey_st* @_ZN4bssl21ssl_cert_parse_pubkeyEPK6cbs_st(%struct.cbs_st* nocapture readonly) local_unnamed_addr #0 {
  %2 = alloca %struct.cbs_st, align 8
  %3 = alloca %struct.cbs_st, align 8
  %4 = bitcast %struct.cbs_st* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #8
  %5 = bitcast %struct.cbs_st* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %5, i64 16, i1 false)
  %6 = bitcast %struct.cbs_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8
  %7 = bitcast %struct.cbs_st* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 16, i1 false)
  %8 = call fastcc zeroext i1 @_ZN4bsslL21ssl_cert_skip_to_spkiEPK6cbs_stPS0_(%struct.cbs_st* nonnull %2, %struct.cbs_st* nonnull %3)
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @ERR_put_error(i32 16, i32 0, i32 272, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 485) #8
  br label %12

10:                                               ; preds = %1
  %11 = call %struct.evp_pkey_st* @EVP_parse_public_key(%struct.cbs_st* nonnull %3) #8
  br label %12

12:                                               ; preds = %10, %9
  %13 = phi %struct.evp_pkey_st* [ %11, %10 ], [ null, %9 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #8
  ret %struct.evp_pkey_st* %13
}

declare i8* @SHA256(i8*, i64, i8*) local_unnamed_addr #2

declare i8* @CBS_data(%struct.cbs_st*) local_unnamed_addr #2

declare %struct.crypto_buffer_st* @CRYPTO_BUFFER_new_from_CBS(%struct.cbs_st*, %struct.crypto_buffer_pool_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl18ssl_add_cert_chainEPNS_13SSL_HANDSHAKEEP6cbb_st(%"struct.bssl::SSL_HANDSHAKE"*, %struct.cbb_st*) local_unnamed_addr #0 {
  %3 = alloca %struct.cbb_st, align 8
  %4 = alloca %struct.cbb_st, align 8
  %5 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 1
  %6 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %5, align 8
  %7 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %6, i64 0, i32 6, i32 0, i32 0, i32 0
  %8 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %7, align 8
  %9 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %8, i64 0, i32 1, i32 0, i32 0, i32 0
  %10 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %9, align 8
  %11 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %10, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %2
  %13 = bitcast %struct.stack_st_CRYPTO_BUFFER* %10 to %struct.stack_st*
  %14 = tail call i8* @sk_value(%struct.stack_st* nonnull %13, i64 0) #8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = tail call zeroext i1 @_ZN4bssl19ssl_has_private_keyEPKNS_13SSL_HANDSHAKEE(%"struct.bssl::SSL_HANDSHAKE"* %0) #8
  br i1 %17, label %21, label %18

18:                                               ; preds = %2, %12, %16
  %19 = tail call i32 @CBB_add_u24(%struct.cbb_st* %1, i32 0) #8
  %20 = icmp ne i32 %19, 0
  br label %61

21:                                               ; preds = %16
  %22 = bitcast %struct.cbb_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 32, i1 false)
  %23 = call i32 @CBB_add_u24_length_prefixed(%struct.cbb_st* %1, %struct.cbb_st* nonnull %3) #8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 417) #8
  br label %59

26:                                               ; preds = %21
  %27 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %5, align 8
  %28 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %27, i64 0, i32 6, i32 0, i32 0, i32 0
  %29 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %28, align 8
  %30 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %29, i64 0, i32 1, i32 0, i32 0, i32 0
  %31 = bitcast %struct.stack_st_CRYPTO_BUFFER** %30 to %struct.stack_st**
  %32 = load %struct.stack_st*, %struct.stack_st** %31, align 8
  %33 = call i64 @sk_num(%struct.stack_st* %32) #8
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %56, label %35

35:                                               ; preds = %26
  %36 = bitcast %struct.cbb_st* %4 to i8*
  br label %37

37:                                               ; preds = %35, %51
  %38 = phi i64 [ 0, %35 ], [ %52, %51 ]
  %39 = call i8* @sk_value(%struct.stack_st* %32, i64 %38) #8
  %40 = bitcast i8* %39 to %struct.crypto_buffer_st*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 -86, i64 32, i1 false)
  %41 = call i32 @CBB_add_u24_length_prefixed(%struct.cbb_st* nonnull %3, %struct.cbb_st* nonnull %4) #8
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %55, label %43

43:                                               ; preds = %37
  %44 = call i8* @CRYPTO_BUFFER_data(%struct.crypto_buffer_st* %40) #8
  %45 = call i64 @CRYPTO_BUFFER_len(%struct.crypto_buffer_st* %40) #8
  %46 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %4, i8* %44, i64 %45) #8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %55, label %48

48:                                               ; preds = %43
  %49 = call i32 @CBB_flush(%struct.cbb_st* nonnull %3) #8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %55, label %51

51:                                               ; preds = %48
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #8
  %52 = add nuw i64 %38, 1
  %53 = call i64 @sk_num(%struct.stack_st* %32) #8
  %54 = icmp ult i64 %52, %53
  br i1 %54, label %37, label %56

55:                                               ; preds = %48, %43, %37
  call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 429) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #8
  br label %59

56:                                               ; preds = %51, %26
  %57 = call i32 @CBB_flush(%struct.cbb_st* %1) #8
  %58 = icmp ne i32 %57, 0
  br label %59

59:                                               ; preds = %55, %56, %25
  %60 = phi i1 [ false, %25 ], [ %58, %56 ], [ false, %55 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #8
  br label %61

61:                                               ; preds = %59, %18
  %62 = phi i1 [ %60, %59 ], [ %20, %18 ]
  ret i1 %62
}

declare i32 @CBB_add_u24(%struct.cbb_st*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @CBB_add_u24_length_prefixed(%struct.cbb_st*, %struct.cbb_st*) local_unnamed_addr #2

declare i32 @CBB_add_bytes(%struct.cbb_st*, i8*, i64) local_unnamed_addr #2

declare i8* @CRYPTO_BUFFER_data(%struct.crypto_buffer_st*) local_unnamed_addr #2

declare i64 @CRYPTO_BUFFER_len(%struct.crypto_buffer_st*) local_unnamed_addr #2

declare i32 @CBB_flush(%struct.cbb_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN4bsslL21ssl_cert_skip_to_spkiEPK6cbs_stPS0_(%struct.cbs_st* nocapture readonly, %struct.cbs_st*) unnamed_addr #0 {
  %3 = alloca %struct.cbs_st, align 8
  %4 = alloca %struct.cbs_st, align 8
  %5 = bitcast %struct.cbs_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8
  %6 = bitcast %struct.cbs_st* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* align 8 %6, i64 16, i1 false)
  %7 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #8
  %8 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = call i32 @CBS_get_asn1(%struct.cbs_st* nonnull %3, %struct.cbs_st* nonnull %4, i32 536870928) #8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %35, label %11

11:                                               ; preds = %2
  %12 = call i64 @CBS_len(%struct.cbs_st* nonnull %3) #8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %14, label %35

14:                                               ; preds = %11
  %15 = call i32 @CBS_get_asn1(%struct.cbs_st* nonnull %4, %struct.cbs_st* %1, i32 536870928) #8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %35, label %17

17:                                               ; preds = %14
  %18 = call i32 @CBS_get_optional_asn1(%struct.cbs_st* %1, %struct.cbs_st* null, i32* null, i32 -1610612736) #8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %35, label %20

20:                                               ; preds = %17
  %21 = call i32 @CBS_get_asn1(%struct.cbs_st* %1, %struct.cbs_st* null, i32 2) #8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %35, label %23

23:                                               ; preds = %20
  %24 = call i32 @CBS_get_asn1(%struct.cbs_st* %1, %struct.cbs_st* null, i32 536870928) #8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %35, label %26

26:                                               ; preds = %23
  %27 = call i32 @CBS_get_asn1(%struct.cbs_st* %1, %struct.cbs_st* null, i32 536870928) #8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %35, label %29

29:                                               ; preds = %26
  %30 = call i32 @CBS_get_asn1(%struct.cbs_st* %1, %struct.cbs_st* null, i32 536870928) #8
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %29
  %33 = call i32 @CBS_get_asn1(%struct.cbs_st* %1, %struct.cbs_st* null, i32 536870928) #8
  %34 = icmp ne i32 %33, 0
  br label %35

35:                                               ; preds = %32, %2, %11, %14, %17, %20, %23, %26, %29
  %36 = phi i1 [ false, %29 ], [ false, %26 ], [ false, %23 ], [ false, %20 ], [ false, %17 ], [ false, %14 ], [ false, %11 ], [ false, %2 ], [ %34, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8
  ret i1 %36
}

declare %struct.evp_pkey_st* @EVP_parse_public_key(%struct.cbs_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl34ssl_compare_public_and_private_keyEPK11evp_pkey_stS2_(%struct.evp_pkey_st*, %struct.evp_pkey_st*) local_unnamed_addr #0 {
  %3 = tail call i32 @EVP_PKEY_is_opaque(%struct.evp_pkey_st* %1) #8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %11

5:                                                ; preds = %2
  %6 = tail call i32 @EVP_PKEY_cmp(%struct.evp_pkey_st* %0, %struct.evp_pkey_st* %1) #8
  switch i32 %6, label %10 [
    i32 1, label %11
    i32 0, label %7
    i32 -1, label %8
    i32 -2, label %9
  ]

7:                                                ; preds = %5
  tail call void @ERR_put_error(i32 11, i32 0, i32 116, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 504) #8
  br label %11

8:                                                ; preds = %5
  tail call void @ERR_put_error(i32 11, i32 0, i32 115, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 507) #8
  br label %11

9:                                                ; preds = %5
  tail call void @ERR_put_error(i32 11, i32 0, i32 128, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 510) #8
  br label %11

10:                                               ; preds = %5
  br label %11

11:                                               ; preds = %5, %2, %10, %9, %8, %7
  %12 = phi i1 [ false, %10 ], [ false, %9 ], [ false, %8 ], [ false, %7 ], [ true, %2 ], [ true, %5 ]
  ret i1 %12
}

declare i32 @EVP_PKEY_is_opaque(%struct.evp_pkey_st*) local_unnamed_addr #2

declare i32 @EVP_PKEY_cmp(%struct.evp_pkey_st*, %struct.evp_pkey_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl26ssl_cert_check_private_keyEPKNS_4CERTEPK11evp_pkey_st(%"struct.bssl::CERT"* nocapture readonly, %struct.evp_pkey_st*) local_unnamed_addr #0 {
  %3 = alloca %struct.cbs_st, align 8
  %4 = alloca %struct.cbs_st, align 8
  %5 = alloca %struct.cbs_st, align 8
  %6 = icmp eq %struct.evp_pkey_st* %1, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  tail call void @ERR_put_error(i32 16, i32 0, i32 181, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 520) #8
  br label %36

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %10 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %9, align 8
  %11 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %10, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %8
  %13 = bitcast %struct.stack_st_CRYPTO_BUFFER* %10 to %struct.stack_st*
  %14 = tail call i8* @sk_value(%struct.stack_st* nonnull %13, i64 0) #8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %12, %8
  tail call void @ERR_put_error(i32 16, i32 0, i32 173, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 526) #8
  br label %36

17:                                               ; preds = %12
  %18 = bitcast %struct.cbs_st* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #8
  %19 = bitcast %struct.stack_st_CRYPTO_BUFFER** %9 to %struct.stack_st**
  %20 = bitcast %struct.cbs_st* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 16, i1 false)
  %21 = load %struct.stack_st*, %struct.stack_st** %19, align 8
  %22 = tail call i8* @sk_value(%struct.stack_st* %21, i64 0) #8
  %23 = bitcast i8* %22 to %struct.crypto_buffer_st*
  call void @CRYPTO_BUFFER_init_CBS(%struct.crypto_buffer_st* %23, %struct.cbs_st* nonnull %5) #8
  %24 = bitcast %struct.cbs_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* nonnull align 8 %18, i64 16, i1 false) #8
  %25 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 16, i1 false) #8
  %26 = call fastcc zeroext i1 @_ZN4bsslL21ssl_cert_skip_to_spkiEPK6cbs_stPS0_(%struct.cbs_st* nonnull %3, %struct.cbs_st* nonnull %4) #8
  br i1 %26, label %28, label %27

27:                                               ; preds = %17
  call void @ERR_put_error(i32 16, i32 0, i32 272, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 485) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #8
  br label %31

28:                                               ; preds = %17
  %29 = call %struct.evp_pkey_st* @EVP_parse_public_key(%struct.cbs_st* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #8
  %30 = icmp eq %struct.evp_pkey_st* %29, null
  br i1 %30, label %31, label %32

31:                                               ; preds = %28, %27
  call void @ERR_put_error(i32 11, i32 0, i32 128, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 535) #8
  br label %34

32:                                               ; preds = %28
  %33 = call zeroext i1 @_ZN4bssl34ssl_compare_public_and_private_keyEPK11evp_pkey_stS2_(%struct.evp_pkey_st* nonnull %29, %struct.evp_pkey_st* nonnull %1)
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %29) #8
  br label %34

34:                                               ; preds = %31, %32
  %35 = phi i1 [ false, %31 ], [ %33, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #8
  br label %36

36:                                               ; preds = %34, %16, %7
  %37 = phi i1 [ false, %7 ], [ false, %16 ], [ %35, %34 ]
  ret i1 %37
}

declare void @CRYPTO_BUFFER_init_CBS(%struct.crypto_buffer_st*, %struct.cbs_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl24ssl_cert_check_key_usageEPK6cbs_stNS_15ssl_key_usage_tE(%struct.cbs_st* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = alloca %struct.cbs_st, align 8
  %4 = alloca %struct.cbs_st, align 8
  %5 = alloca %struct.cbs_st, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.cbs_st, align 8
  %8 = alloca %struct.cbs_st, align 8
  %9 = alloca %struct.cbs_st, align 8
  %10 = alloca %struct.cbs_st, align 8
  %11 = alloca %struct.cbs_st, align 8
  %12 = bitcast %struct.cbs_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #8
  %13 = bitcast %struct.cbs_st* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 %13, i64 16, i1 false)
  %14 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #8
  %15 = bitcast %struct.cbs_st* %5 to i8*
  %16 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #8
  %17 = bitcast i32* %6 to i8*
  %18 = bitcast %struct.cbs_st* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #8
  store i32 -1431655766, i32* %6, align 4
  %19 = call fastcc zeroext i1 @_ZN4bsslL21ssl_cert_skip_to_spkiEPK6cbs_stPS0_(%struct.cbs_st* nonnull %3, %struct.cbs_st* nonnull %4)
  br i1 %19, label %20, label %32

20:                                               ; preds = %2
  %21 = call i32 @CBS_get_asn1(%struct.cbs_st* nonnull %4, %struct.cbs_st* null, i32 536870928) #8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %32, label %23

23:                                               ; preds = %20
  %24 = call i32 @CBS_get_optional_asn1(%struct.cbs_st* nonnull %4, %struct.cbs_st* null, i32* null, i32 -2147483647) #8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %23
  %27 = call i32 @CBS_get_optional_asn1(%struct.cbs_st* nonnull %4, %struct.cbs_st* null, i32* null, i32 -2147483646) #8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %32, label %29

29:                                               ; preds = %26
  %30 = call i32 @CBS_get_optional_asn1(%struct.cbs_st* nonnull %4, %struct.cbs_st* nonnull %5, i32* nonnull %6, i32 -1610612733) #8
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29, %26, %23, %20, %2
  call void @ERR_put_error(i32 16, i32 0, i32 272, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 559) #8
  br label %104

33:                                               ; preds = %29
  %34 = load i32, i32* %6, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %104, label %36

36:                                               ; preds = %33
  %37 = bitcast %struct.cbs_st* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #8
  %38 = bitcast %struct.cbs_st* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 -86, i64 16, i1 false)
  %39 = call i32 @CBS_get_asn1(%struct.cbs_st* nonnull %5, %struct.cbs_st* nonnull %7, i32 536870928) #8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %51, label %41

41:                                               ; preds = %36
  %42 = call i64 @CBS_len(%struct.cbs_st* nonnull %7) #8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %102, label %44

44:                                               ; preds = %41
  %45 = bitcast %struct.cbs_st* %8 to i8*
  %46 = bitcast %struct.cbs_st* %9 to i8*
  %47 = bitcast %struct.cbs_st* %10 to i8*
  %48 = bitcast %struct.cbs_st* %8 to i8*
  %49 = bitcast %struct.cbs_st* %9 to i8*
  %50 = bitcast %struct.cbs_st* %10 to i8*
  br label %52

51:                                               ; preds = %36
  call void @ERR_put_error(i32 16, i32 0, i32 272, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 569) #8
  br label %102

52:                                               ; preds = %44, %99
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %47) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 -86, i64 16, i1 false)
  %53 = call i32 @CBS_get_asn1(%struct.cbs_st* nonnull %7, %struct.cbs_st* nonnull %8, i32 536870928) #8
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %70, label %55

55:                                               ; preds = %52
  %56 = call i32 @CBS_get_asn1(%struct.cbs_st* nonnull %8, %struct.cbs_st* nonnull %9, i32 6) #8
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %70, label %58

58:                                               ; preds = %55
  %59 = call i32 @CBS_peek_asn1_tag(%struct.cbs_st* nonnull %8, i32 1) #8
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %64, label %61

61:                                               ; preds = %58
  %62 = call i32 @CBS_get_asn1(%struct.cbs_st* nonnull %8, %struct.cbs_st* null, i32 1) #8
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %70, label %64

64:                                               ; preds = %61, %58
  %65 = call i32 @CBS_get_asn1(%struct.cbs_st* nonnull %8, %struct.cbs_st* nonnull %10, i32 4) #8
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %70, label %67

67:                                               ; preds = %64
  %68 = call i64 @CBS_len(%struct.cbs_st* nonnull %8) #8
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %71, label %70

70:                                               ; preds = %61, %67, %64, %55, %52
  call void @ERR_put_error(i32 16, i32 0, i32 272, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 581) #8
  br label %97

71:                                               ; preds = %67
  %72 = call i64 @CBS_len(%struct.cbs_st* nonnull %9) #8
  %73 = icmp eq i64 %72, 3
  br i1 %73, label %74, label %99

74:                                               ; preds = %71
  %75 = call i8* @CBS_data(%struct.cbs_st* nonnull %9) #8
  %76 = call i32 @bcmp(i8* %75, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZZN4bssl24ssl_cert_check_key_usageEPK6cbs_stNS_15ssl_key_usage_tEE12kKeyUsageOID, i64 0, i64 0), i64 3)
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %99

78:                                               ; preds = %74
  %79 = bitcast %struct.cbs_st* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %79) #8
  %80 = bitcast %struct.cbs_st* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %80, i8 -86, i64 16, i1 false)
  %81 = call i32 @CBS_get_asn1(%struct.cbs_st* nonnull %10, %struct.cbs_st* nonnull %11, i32 3) #8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %78
  %84 = call i64 @CBS_len(%struct.cbs_st* nonnull %10) #8
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %87, label %86

86:                                               ; preds = %83, %78
  call void @ERR_put_error(i32 16, i32 0, i32 272, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 595) #8
  br label %95

87:                                               ; preds = %83
  %88 = call i32 @CBS_is_valid_asn1_bitstring(%struct.cbs_st* nonnull %11) #8
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %87
  call void @ERR_put_error(i32 16, i32 0, i32 272, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 602) #8
  br label %95

91:                                               ; preds = %87
  %92 = call i32 @CBS_asn1_bitstring_has_bit(%struct.cbs_st* nonnull %11, i32 %1) #8
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %95

94:                                               ; preds = %91
  call void @ERR_put_error(i32 16, i32 0, i32 302, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 607) #8
  br label %95

95:                                               ; preds = %91, %94, %90, %86
  %96 = phi i1 [ false, %86 ], [ false, %94 ], [ false, %90 ], [ true, %91 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %79) #8
  br label %97

97:                                               ; preds = %70, %95
  %98 = phi i1 [ %96, %95 ], [ false, %70 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %47) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #8
  br label %102

99:                                               ; preds = %71, %74
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %47) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #8
  %100 = call i64 @CBS_len(%struct.cbs_st* nonnull %7) #8
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %52

102:                                              ; preds = %99, %41, %97, %51
  %103 = phi i1 [ false, %51 ], [ %98, %97 ], [ true, %41 ], [ true, %99 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #8
  br label %104

104:                                              ; preds = %33, %102, %32
  %105 = phi i1 [ %103, %102 ], [ false, %32 ], [ true, %33 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #8
  ret i1 %105
}

declare i32 @CBS_get_asn1(%struct.cbs_st*, %struct.cbs_st*, i32) local_unnamed_addr #2

declare i32 @CBS_get_optional_asn1(%struct.cbs_st*, %struct.cbs_st*, i32*, i32) local_unnamed_addr #2

declare i32 @CBS_peek_asn1_tag(%struct.cbs_st*, i32) local_unnamed_addr #2

declare i32 @CBS_is_valid_asn1_bitstring(%struct.cbs_st*) local_unnamed_addr #2

declare i32 @CBS_asn1_bitstring_has_bit(%struct.cbs_st*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_CRYPTO_BUFFER* @_ZN4bssl24ssl_parse_client_CA_listEP6ssl_stPhP6cbs_st(%struct.ssl_st* nocapture readonly, i8* nocapture, %struct.cbs_st*) local_unnamed_addr #0 {
  %4 = alloca %struct.cbs_st, align 8
  %5 = alloca %struct.cbs_st, align 8
  %6 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %7 = load %struct.ssl_ctx_st*, %struct.ssl_ctx_st** %6, align 8
  %8 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %7, i64 0, i32 72
  %9 = load %struct.crypto_buffer_pool_st*, %struct.crypto_buffer_pool_st** %8, align 8
  %10 = tail call %struct.stack_st* @sk_new_null() #8
  %11 = bitcast %struct.stack_st* %10 to %struct.stack_st_CRYPTO_BUFFER*
  %12 = ptrtoint %struct.stack_st* %10 to i64
  %13 = icmp eq %struct.stack_st* %10, null
  br i1 %13, label %14, label %15

14:                                               ; preds = %3
  store i8 80, i8* %1, align 1
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 626) #8
  br label %55

15:                                               ; preds = %3
  %16 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #8
  %17 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 16, i1 false)
  %18 = call i32 @CBS_get_u16_length_prefixed(%struct.cbs_st* %2, %struct.cbs_st* nonnull %4) #8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %26, label %20

20:                                               ; preds = %15
  %21 = call i64 @CBS_len(%struct.cbs_st* nonnull %4) #8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %44, label %23

23:                                               ; preds = %20
  %24 = bitcast %struct.cbs_st* %5 to i8*
  %25 = bitcast %struct.cbs_st* %5 to i8*
  br label %27

26:                                               ; preds = %15
  store i8 50, i8* %1, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 162, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 633) #8
  br label %52

27:                                               ; preds = %23, %41
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 16, i1 false)
  %28 = call i32 @CBS_get_u16_length_prefixed(%struct.cbs_st* nonnull %4, %struct.cbs_st* nonnull %5) #8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %27
  store i8 50, i8* %1, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 123, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 641) #8
  br label %40

31:                                               ; preds = %27
  %32 = call %struct.crypto_buffer_st* @CRYPTO_BUFFER_new_from_CBS(%struct.cbs_st* nonnull %5, %struct.crypto_buffer_pool_st* %9) #8
  %33 = icmp eq %struct.crypto_buffer_st* %32, null
  br i1 %33, label %39, label %34

34:                                               ; preds = %31
  %35 = bitcast %struct.crypto_buffer_st* %32 to i8*
  %36 = call i64 @sk_push(%struct.stack_st* nonnull %10, i8* nonnull %35) #8
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %34
  call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %32) #8
  br label %39

39:                                               ; preds = %31, %38
  store i8 80, i8* %1, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 650) #8
  br label %40

40:                                               ; preds = %39, %30
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #8
  br label %52

41:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #8
  %42 = call i64 @CBS_len(%struct.cbs_st* nonnull %4) #8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %27

44:                                               ; preds = %41, %20
  %45 = load %struct.ssl_ctx_st*, %struct.ssl_ctx_st** %6, align 8
  %46 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %45, i64 0, i32 1
  %47 = load %"struct.bssl::SSL_X509_METHOD"*, %"struct.bssl::SSL_X509_METHOD"** %46, align 8
  %48 = getelementptr inbounds %"struct.bssl::SSL_X509_METHOD", %"struct.bssl::SSL_X509_METHOD"* %47, i64 0, i32 0
  %49 = load i1 (%struct.stack_st_CRYPTO_BUFFER*)*, i1 (%struct.stack_st_CRYPTO_BUFFER*)** %48, align 8
  %50 = call zeroext i1 %49(%struct.stack_st_CRYPTO_BUFFER* nonnull %11) #8
  br i1 %50, label %52, label %51

51:                                               ; preds = %44
  store i8 50, i8* %1, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 657) #8
  br label %52

52:                                               ; preds = %44, %40, %51, %26
  %53 = phi i64 [ %12, %26 ], [ %12, %51 ], [ %12, %40 ], [ 0, %44 ]
  %54 = phi i64 [ 0, %26 ], [ 0, %51 ], [ 0, %40 ], [ %12, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #8
  br label %55

55:                                               ; preds = %52, %14
  %56 = phi i64 [ %53, %52 ], [ %12, %14 ]
  %57 = phi i64 [ %54, %52 ], [ 0, %14 ]
  %58 = icmp eq i64 %56, 0
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = inttoptr i64 %56 to %struct.stack_st_CRYPTO_BUFFER*
  %61 = bitcast %struct.stack_st_CRYPTO_BUFFER* %60 to %struct.stack_st*
  call void @sk_pop_free_ex(%struct.stack_st* nonnull %61, void (void (i8*)*, i8*)* nonnull @_ZZN4bssl8internal11DeleterImplI22stack_st_CRYPTO_BUFFERvE4FreeEPS2_ENUlPFvPvES5_E_8__invokeES7_S5_, void (i8*)* null) #8
  br label %62

62:                                               ; preds = %55, %59
  %63 = inttoptr i64 %57 to %struct.stack_st_CRYPTO_BUFFER*
  ret %struct.stack_st_CRYPTO_BUFFER* %63
}

declare i32 @CBS_get_u16_length_prefixed(%struct.cbs_st*, %struct.cbs_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl18ssl_has_client_CAsEPKNS_10SSL_CONFIGE(%"struct.bssl::SSL_CONFIG"* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %3 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %2, align 8
  %4 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %3, null
  br i1 %4, label %5, label %13

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %0, i64 0, i32 0
  %7 = load %struct.ssl_st*, %struct.ssl_st** %6, align 8
  %8 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %7, i64 0, i32 16, i32 0, i32 0, i32 0
  %9 = load %struct.ssl_ctx_st*, %struct.ssl_ctx_st** %8, align 8
  %10 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %9, i64 0, i32 31, i32 0, i32 0, i32 0
  %11 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %10, align 8
  %12 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %11, null
  br i1 %12, label %18, label %13

13:                                               ; preds = %1, %5
  %14 = phi %struct.stack_st_CRYPTO_BUFFER* [ %11, %5 ], [ %3, %1 ]
  %15 = bitcast %struct.stack_st_CRYPTO_BUFFER* %14 to %struct.stack_st*
  %16 = tail call i64 @sk_num(%struct.stack_st* %15) #8
  %17 = icmp ne i64 %16, 0
  br label %18

18:                                               ; preds = %5, %13
  %19 = phi i1 [ %17, %13 ], [ false, %5 ]
  ret i1 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl22ssl_add_client_CA_listEPNS_13SSL_HANDSHAKEEP6cbb_st(%"struct.bssl::SSL_HANDSHAKE"* nocapture readonly, %struct.cbb_st*) local_unnamed_addr #0 {
  %3 = alloca %struct.cbb_st, align 8
  %4 = alloca %struct.cbb_st, align 8
  %5 = bitcast %struct.cbb_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 32, i1 false)
  %6 = bitcast %struct.cbb_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false)
  %7 = call i32 @CBB_add_u16_length_prefixed(%struct.cbb_st* %1, %struct.cbb_st* nonnull %3) #8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %48, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 1
  %11 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %10, align 8
  %12 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %11, i64 0, i32 12, i32 0, i32 0, i32 0
  %13 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %12, align 8
  %14 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %13, null
  br i1 %14, label %15, label %26

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 0
  %17 = load %struct.ssl_st*, %struct.ssl_st** %16, align 8
  %18 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %17, i64 0, i32 16, i32 0, i32 0, i32 0
  %19 = load %struct.ssl_ctx_st*, %struct.ssl_ctx_st** %18, align 8
  %20 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %19, i64 0, i32 31, i32 0, i32 0, i32 0
  %21 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %20, align 8
  %22 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %21, null
  br i1 %22, label %23, label %26

23:                                               ; preds = %15
  %24 = call i32 @CBB_flush(%struct.cbb_st* %1) #8
  %25 = icmp ne i32 %24, 0
  br label %48

26:                                               ; preds = %9, %15
  %27 = phi %struct.stack_st_CRYPTO_BUFFER* [ %21, %15 ], [ %13, %9 ]
  %28 = bitcast %struct.stack_st_CRYPTO_BUFFER* %27 to %struct.stack_st*
  %29 = call i64 @sk_num(%struct.stack_st* %28) #8
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %45, label %33

31:                                               ; preds = %39
  %32 = icmp eq i64 %44, %29
  br i1 %32, label %45, label %33

33:                                               ; preds = %26, %31
  %34 = phi i64 [ %44, %31 ], [ 0, %26 ]
  %35 = call i8* @sk_value(%struct.stack_st* %28, i64 %34) #8
  %36 = bitcast i8* %35 to %struct.crypto_buffer_st*
  %37 = call i32 @CBB_add_u16_length_prefixed(%struct.cbb_st* nonnull %3, %struct.cbb_st* nonnull %4) #8
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %48, label %39

39:                                               ; preds = %33
  %40 = call i8* @CRYPTO_BUFFER_data(%struct.crypto_buffer_st* %36) #8
  %41 = call i64 @CRYPTO_BUFFER_len(%struct.crypto_buffer_st* %36) #8
  %42 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %4, i8* %40, i64 %41) #8
  %43 = icmp eq i32 %42, 0
  %44 = add nuw i64 %34, 1
  br i1 %43, label %48, label %31

45:                                               ; preds = %31, %26
  %46 = call i32 @CBB_flush(%struct.cbb_st* %1) #8
  %47 = icmp ne i32 %46, 0
  br label %48

48:                                               ; preds = %39, %33, %23, %45, %2
  %49 = phi i1 [ false, %2 ], [ %25, %23 ], [ %47, %45 ], [ false, %33 ], [ false, %39 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #8
  ret i1 %49
}

declare i32 @CBB_add_u16_length_prefixed(%struct.cbb_st*, %struct.cbb_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl26ssl_check_leaf_certificateEPNS_13SSL_HANDSHAKEEP11evp_pkey_stPK16crypto_buffer_st(%"struct.bssl::SSL_HANDSHAKE"*, %struct.evp_pkey_st*, %struct.crypto_buffer_st* nocapture readnone) local_unnamed_addr #0 {
  %4 = alloca i16, align 2
  %5 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 43
  %6 = load %struct.ssl_cipher_st*, %struct.ssl_cipher_st** %5, align 8
  %7 = getelementptr inbounds %struct.ssl_cipher_st, %struct.ssl_cipher_st* %6, i64 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = tail call i32 @_ZN4bssl28ssl_cipher_auth_mask_for_keyEPK11evp_pkey_st(%struct.evp_pkey_st* %1) #8
  %10 = and i32 %9, %8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %3
  tail call void @ERR_put_error(i32 16, i32 0, i32 241, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 706) #8
  br label %30

13:                                               ; preds = %3
  %14 = tail call i32 @EVP_PKEY_id(%struct.evp_pkey_st* %1) #8
  %15 = icmp eq i32 %14, 408
  br i1 %15, label %16, label %30

16:                                               ; preds = %13
  %17 = tail call %struct.ec_key_st* @EVP_PKEY_get0_EC_KEY(%struct.evp_pkey_st* %1) #8
  %18 = bitcast i16* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %18) #8
  store i16 -21846, i16* %4, align 2
  %19 = tail call %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st* %17) #8
  %20 = tail call i32 @EC_GROUP_get_curve_name(%struct.ec_group_st* %19) #8
  %21 = call zeroext i1 @_ZN4bssl19ssl_nid_to_group_idEPti(i16* nonnull %4, i32 %20) #8
  br i1 %21, label %22, label %28

22:                                               ; preds = %16
  %23 = load i16, i16* %4, align 2
  %24 = call zeroext i1 @_ZN4bssl19tls1_check_group_idEPKNS_13SSL_HANDSHAKEEt(%"struct.bssl::SSL_HANDSHAKE"* %0, i16 zeroext %23) #8
  br i1 %24, label %25, label %28

25:                                               ; preds = %22
  %26 = call i32 @EC_KEY_get_conv_form(%struct.ec_key_st* %17) #8
  %27 = icmp eq i32 %26, 4
  br i1 %27, label %29, label %28

28:                                               ; preds = %25, %22, %16
  call void @ERR_put_error(i32 16, i32 0, i32 107, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 718) #8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %18) #8
  br label %30

29:                                               ; preds = %25
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %18) #8
  br label %30

30:                                               ; preds = %13, %29, %28, %12
  %31 = phi i1 [ false, %12 ], [ false, %28 ], [ true, %29 ], [ true, %13 ]
  ret i1 %31
}

declare i32 @_ZN4bssl28ssl_cipher_auth_mask_for_keyEPK11evp_pkey_st(%struct.evp_pkey_st*) local_unnamed_addr #2

declare i32 @EVP_PKEY_id(%struct.evp_pkey_st*) local_unnamed_addr #2

declare %struct.ec_key_st* @EVP_PKEY_get0_EC_KEY(%struct.evp_pkey_st*) local_unnamed_addr #2

declare zeroext i1 @_ZN4bssl19ssl_nid_to_group_idEPti(i16*, i32) local_unnamed_addr #2

declare i32 @EC_GROUP_get_curve_name(%struct.ec_group_st*) local_unnamed_addr #2

declare %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st*) local_unnamed_addr #2

declare zeroext i1 @_ZN4bssl19tls1_check_group_idEPKNS_13SSL_HANDSHAKEEt(%"struct.bssl::SSL_HANDSHAKE"*, i16 zeroext) local_unnamed_addr #2

declare i32 @EC_KEY_get_conv_form(%struct.ec_key_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl27ssl_on_certificate_selectedEPNS_13SSL_HANDSHAKEE(%"struct.bssl::SSL_HANDSHAKE"*) local_unnamed_addr #0 {
  %2 = alloca %struct.cbs_st, align 8
  %3 = alloca %struct.cbs_st, align 8
  %4 = alloca %struct.cbs_st, align 8
  %5 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 0
  %6 = load %struct.ssl_st*, %struct.ssl_st** %5, align 8
  %7 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 1
  %8 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %7, align 8
  %9 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %8, i64 0, i32 6, i32 0, i32 0, i32 0
  %10 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %9, align 8
  %11 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %10, i64 0, i32 1, i32 0, i32 0, i32 0
  %12 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %11, align 8
  %13 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %12, null
  br i1 %13, label %127, label %14

14:                                               ; preds = %1
  %15 = bitcast %struct.stack_st_CRYPTO_BUFFER* %12 to %struct.stack_st*
  %16 = tail call i8* @sk_value(%struct.stack_st* nonnull %15, i64 0) #8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %127, label %18

18:                                               ; preds = %14
  %19 = tail call zeroext i1 @_ZN4bssl19ssl_has_private_keyEPKNS_13SSL_HANDSHAKEE(%"struct.bssl::SSL_HANDSHAKE"* %0) #8
  br i1 %19, label %20, label %127

20:                                               ; preds = %18
  %21 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %6, i64 0, i32 16, i32 0, i32 0, i32 0
  %22 = load %struct.ssl_ctx_st*, %struct.ssl_ctx_st** %21, align 8
  %23 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %22, i64 0, i32 1
  %24 = load %"struct.bssl::SSL_X509_METHOD"*, %"struct.bssl::SSL_X509_METHOD"** %23, align 8
  %25 = getelementptr inbounds %"struct.bssl::SSL_X509_METHOD", %"struct.bssl::SSL_X509_METHOD"* %24, i64 0, i32 14
  %26 = load i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)** %25, align 8
  %27 = tail call zeroext i1 %26(%"struct.bssl::SSL_HANDSHAKE"* %0) #8
  br i1 %27, label %28, label %127

28:                                               ; preds = %20
  %29 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29) #8
  %30 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -86, i64 16, i1 false)
  %31 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %7, align 8
  %32 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %31, i64 0, i32 6, i32 0, i32 0, i32 0
  %33 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %32, align 8
  %34 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %33, i64 0, i32 1, i32 0, i32 0, i32 0
  %35 = bitcast %struct.stack_st_CRYPTO_BUFFER** %34 to %struct.stack_st**
  %36 = load %struct.stack_st*, %struct.stack_st** %35, align 8
  %37 = tail call i8* @sk_value(%struct.stack_st* %36, i64 0) #8
  %38 = bitcast i8* %37 to %struct.crypto_buffer_st*
  call void @CRYPTO_BUFFER_init_CBS(%struct.crypto_buffer_st* %38, %struct.cbs_st* nonnull %4) #8
  %39 = load %struct.ssl_st*, %struct.ssl_st** %5, align 8
  %40 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %39, i64 0, i32 26
  %41 = load i8, i8* %40, align 4
  %42 = and i8 %41, 1
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %107, label %44

44:                                               ; preds = %28
  %45 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 46
  %46 = load i32, i32* %45, align 8
  %47 = and i32 %46, 1024
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %107, label %49

49:                                               ; preds = %44
  %50 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %7, align 8
  %51 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %50, i64 0, i32 6, i32 0, i32 0, i32 0
  %52 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %51, align 8
  %53 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %52, i64 0, i32 15, i32 0, i32 0, i32 0
  %54 = load %"struct.bssl::DC"*, %"struct.bssl::DC"** %53, align 8
  %55 = icmp eq %"struct.bssl::DC"* %54, null
  br i1 %55, label %107, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %54, i64 0, i32 0, i32 0, i32 0, i32 0
  %58 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %57, align 8
  %59 = icmp eq %struct.crypto_buffer_st* %58, null
  br i1 %59, label %107, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %52, i64 0, i32 16, i32 0, i32 0, i32 0
  %62 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %61, align 8
  %63 = icmp eq %struct.evp_pkey_st* %62, null
  br i1 %63, label %64, label %68

64:                                               ; preds = %60
  %65 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %52, i64 0, i32 17
  %66 = load %struct.ssl_private_key_method_st*, %struct.ssl_private_key_method_st** %65, align 8
  %67 = icmp eq %struct.ssl_private_key_method_st* %66, null
  br i1 %67, label %107, label %68

68:                                               ; preds = %64, %60
  %69 = call zeroext i16 @_ZN4bssl20ssl_protocol_versionEPK6ssl_st(%struct.ssl_st* %39) #8
  %70 = icmp ult i16 %69, 772
  br i1 %70, label %107, label %71

71:                                               ; preds = %68
  %72 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 28, i32 0
  %73 = load i16*, i16** %72, align 8
  %74 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 28, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds i16, i16* %73, i64 %75
  %77 = icmp eq i64 %75, 0
  br i1 %77, label %107, label %78

78:                                               ; preds = %71
  %79 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %54, i64 0, i32 1
  %80 = load i16, i16* %79, align 8
  br label %83

81:                                               ; preds = %83
  %82 = icmp eq i16* %87, %76
  br i1 %82, label %107, label %83

83:                                               ; preds = %81, %78
  %84 = phi i16* [ %73, %78 ], [ %87, %81 ]
  %85 = load i16, i16* %84, align 2
  %86 = icmp eq i16 %80, %85
  %87 = getelementptr inbounds i16, i16* %84, i64 1
  br i1 %86, label %88, label %81

88:                                               ; preds = %83
  %89 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %7, align 8
  %90 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %89, i64 0, i32 6, i32 0, i32 0, i32 0
  %91 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %90, align 8
  %92 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %91, i64 0, i32 15, i32 0, i32 0, i32 0
  %93 = load %"struct.bssl::DC"*, %"struct.bssl::DC"** %92, align 8
  %94 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %93, i64 0, i32 2, i32 0, i32 0, i32 0
  %95 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %94, align 8
  %96 = icmp eq %struct.evp_pkey_st* %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %88
  %98 = call i32 @EVP_PKEY_up_ref(%struct.evp_pkey_st* nonnull %95) #8
  br label %99

99:                                               ; preds = %88, %97
  %100 = ptrtoint %struct.evp_pkey_st* %95 to i64
  %101 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 38
  %102 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %101, i64 0, i32 0, i32 0, i32 0
  %103 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %102, align 8
  %104 = bitcast %"class.std::__1::unique_ptr"* %101 to i64*
  store i64 %100, i64* %104, align 8
  %105 = icmp eq %struct.evp_pkey_st* %103, null
  br i1 %105, label %123, label %106

106:                                              ; preds = %99
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %103) #8
  br label %123

107:                                              ; preds = %81, %44, %28, %64, %56, %49, %68, %71
  %108 = bitcast %struct.cbs_st* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %108) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %108, i8* nonnull align 8 %29, i64 16, i1 false) #8
  %109 = bitcast %struct.cbs_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %109) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %109, i8 -86, i64 16, i1 false) #8
  %110 = call fastcc zeroext i1 @_ZN4bsslL21ssl_cert_skip_to_spkiEPK6cbs_stPS0_(%struct.cbs_st* nonnull %2, %struct.cbs_st* nonnull %3) #8
  br i1 %110, label %112, label %111

111:                                              ; preds = %107
  call void @ERR_put_error(i32 16, i32 0, i32 272, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 485) #8
  br label %115

112:                                              ; preds = %107
  %113 = call %struct.evp_pkey_st* @EVP_parse_public_key(%struct.cbs_st* nonnull %3) #8
  %114 = ptrtoint %struct.evp_pkey_st* %113 to i64
  br label %115

115:                                              ; preds = %111, %112
  %116 = phi i64 [ %114, %112 ], [ 0, %111 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %109) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %108) #8
  %117 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 38
  %118 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %117, i64 0, i32 0, i32 0, i32 0
  %119 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %118, align 8
  %120 = bitcast %"class.std::__1::unique_ptr"* %117 to i64*
  store i64 %116, i64* %120, align 8
  %121 = icmp eq %struct.evp_pkey_st* %119, null
  br i1 %121, label %123, label %122

122:                                              ; preds = %115
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %119) #8
  br label %123

123:                                              ; preds = %115, %122, %99, %106
  %124 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 38, i32 0, i32 0, i32 0
  %125 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %124, align 8
  %126 = icmp ne %struct.evp_pkey_st* %125, null
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29) #8
  br label %127

127:                                              ; preds = %1, %14, %20, %18, %123
  %128 = phi i1 [ %126, %123 ], [ true, %18 ], [ false, %20 ], [ true, %14 ], [ true, %1 ]
  ret i1 %128
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl19ssl_signing_with_dcEPKNS_13SSL_HANDSHAKEE(%"struct.bssl::SSL_HANDSHAKE"* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 0
  %3 = load %struct.ssl_st*, %struct.ssl_st** %2, align 8
  %4 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %3, i64 0, i32 26
  %5 = load i8, i8* %4, align 4
  %6 = and i8 %5, 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %53, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 46
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 1024
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %53, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 1
  %15 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %14, align 8
  %16 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %15, i64 0, i32 6, i32 0, i32 0, i32 0
  %17 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %16, align 8
  %18 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %17, i64 0, i32 15, i32 0, i32 0, i32 0
  %19 = load %"struct.bssl::DC"*, %"struct.bssl::DC"** %18, align 8
  %20 = icmp eq %"struct.bssl::DC"* %19, null
  br i1 %20, label %53, label %21

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %19, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %22, align 8
  %24 = icmp eq %struct.crypto_buffer_st* %23, null
  br i1 %24, label %53, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %17, i64 0, i32 16, i32 0, i32 0, i32 0
  %27 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %26, align 8
  %28 = icmp eq %struct.evp_pkey_st* %27, null
  br i1 %28, label %29, label %33

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %17, i64 0, i32 17
  %31 = load %struct.ssl_private_key_method_st*, %struct.ssl_private_key_method_st** %30, align 8
  %32 = icmp eq %struct.ssl_private_key_method_st* %31, null
  br i1 %32, label %53, label %33

33:                                               ; preds = %29, %25
  %34 = tail call zeroext i16 @_ZN4bssl20ssl_protocol_versionEPK6ssl_st(%struct.ssl_st* %3) #8
  %35 = icmp ult i16 %34, 772
  br i1 %35, label %53, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 28, i32 0
  %38 = load i16*, i16** %37, align 8
  %39 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 28, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds i16, i16* %38, i64 %40
  %42 = icmp eq i64 %40, 0
  br i1 %42, label %53, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %19, i64 0, i32 1
  %45 = load i16, i16* %44, align 8
  br label %48

46:                                               ; preds = %48
  %47 = icmp eq i16* %52, %41
  br i1 %47, label %53, label %48

48:                                               ; preds = %46, %43
  %49 = phi i16* [ %38, %43 ], [ %52, %46 ]
  %50 = load i16, i16* %49, align 2
  %51 = icmp eq i16 %45, %50
  %52 = getelementptr inbounds i16, i16* %49, i64 1
  br i1 %51, label %53, label %46

53:                                               ; preds = %48, %46, %36, %33, %29, %21, %13, %8, %1
  %54 = phi i1 [ false, %8 ], [ false, %1 ], [ false, %29 ], [ false, %21 ], [ false, %13 ], [ false, %33 ], [ false, %36 ], [ true, %48 ], [ false, %46 ]
  ret i1 %54
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4bssl2DCC2Ev(%"struct.bssl::DC"* nocapture) unnamed_addr #3 align 2 {
  %2 = bitcast %"struct.bssl::DC"* %0 to i64*
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %0, i64 0, i32 1
  store i16 0, i16* %3, align 8
  %4 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %0, i64 0, i32 2
  %5 = bitcast %"class.std::__1::unique_ptr"* %4 to i64*
  store i64 0, i64* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl2DCD2Ev(%"struct.bssl::DC"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %2, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %2, align 8
  %4 = icmp eq %struct.evp_pkey_st* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %3) #8
  br label %6

6:                                                ; preds = %1, %5
  %7 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %7, align 8
  store %struct.crypto_buffer_st* null, %struct.crypto_buffer_st** %7, align 8
  %9 = icmp eq %struct.crypto_buffer_st* %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %6
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %8) #8
  br label %11

11:                                               ; preds = %6, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.bssl::DC"* @_ZN4bssl2DC5ParseEP16crypto_buffer_stPh(%struct.crypto_buffer_st*, i8* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.cbs_st, align 8
  %4 = alloca %struct.cbs_st, align 8
  %5 = alloca %struct.cbs_st, align 8
  %6 = alloca i32, align 4
  %7 = alloca i16, align 2
  %8 = tail call i8* @OPENSSL_malloc(i64 24) #8
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %2
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 196) #8
  store i8 80, i8* %1, align 1
  br label %86

11:                                               ; preds = %2
  %12 = bitcast i8* %8 to i64*
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds i8, i8* %8, i64 8
  %14 = bitcast i8* %13 to i16*
  store i16 0, i16* %14, align 8
  %15 = getelementptr inbounds i8, i8* %8, i64 16
  %16 = bitcast i8* %15 to i64*
  store i64 0, i64* %16, align 8
  %17 = ptrtoint i8* %8 to i64
  %18 = icmp eq %struct.crypto_buffer_st* %0, null
  br i1 %18, label %19, label %22

19:                                               ; preds = %11
  %20 = bitcast i8* %8 to %struct.crypto_buffer_st**
  %21 = ptrtoint %struct.crypto_buffer_st* %0 to i64
  store i64 %21, i64* %12, align 8
  br label %29

22:                                               ; preds = %11
  %23 = tail call i32 @CRYPTO_BUFFER_up_ref(%struct.crypto_buffer_st* nonnull %0) #8
  %24 = bitcast i8* %8 to %struct.crypto_buffer_st**
  %25 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %24, align 8
  %26 = ptrtoint %struct.crypto_buffer_st* %0 to i64
  store i64 %26, i64* %12, align 8
  %27 = icmp eq %struct.crypto_buffer_st* %25, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %22
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %25) #8
  br label %29

29:                                               ; preds = %19, %28, %22
  %30 = phi %struct.crypto_buffer_st** [ %20, %19 ], [ %24, %28 ], [ %24, %22 ]
  %31 = bitcast %struct.cbs_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #8
  %32 = bitcast %struct.cbs_st* %4 to i8*
  %33 = bitcast %struct.cbs_st* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #8
  %34 = bitcast %struct.cbs_st* %5 to i8*
  %35 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #8
  %36 = bitcast i32* %6 to i8*
  %37 = bitcast %struct.cbs_st* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %36) #8
  store i32 -1431655766, i32* %6, align 4
  %38 = bitcast i16* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %38) #8
  store i16 -21846, i16* %7, align 2
  %39 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %30, align 8
  call void @CRYPTO_BUFFER_init_CBS(%struct.crypto_buffer_st* %39, %struct.cbs_st* nonnull %4) #8
  %40 = call i32 @CBS_get_u32(%struct.cbs_st* nonnull %4, i32* nonnull %6) #8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %67, label %42

42:                                               ; preds = %29
  %43 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %4, i16* %14) #8
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %67, label %45

45:                                               ; preds = %42
  %46 = call i32 @CBS_get_u24_length_prefixed(%struct.cbs_st* nonnull %4, %struct.cbs_st* nonnull %3) #8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %67, label %48

48:                                               ; preds = %45
  %49 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %4, i16* nonnull %7) #8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %67, label %51

51:                                               ; preds = %48
  %52 = call i32 @CBS_get_u16_length_prefixed(%struct.cbs_st* nonnull %4, %struct.cbs_st* nonnull %5) #8
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %67, label %54

54:                                               ; preds = %51
  %55 = call i64 @CBS_len(%struct.cbs_st* nonnull %4) #8
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %67

57:                                               ; preds = %54
  %58 = call %struct.evp_pkey_st* @EVP_parse_public_key(%struct.cbs_st* nonnull %3) #8
  %59 = bitcast i8* %15 to %struct.evp_pkey_st**
  %60 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %59, align 8
  store %struct.evp_pkey_st* %58, %struct.evp_pkey_st** %59, align 8
  %61 = icmp eq %struct.evp_pkey_st* %60, null
  br i1 %61, label %64, label %62

62:                                               ; preds = %57
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %60) #8
  %63 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %59, align 8
  br label %64

64:                                               ; preds = %57, %62
  %65 = phi %struct.evp_pkey_st* [ %58, %57 ], [ %63, %62 ]
  %66 = icmp eq %struct.evp_pkey_st* %65, null
  br i1 %66, label %67, label %69

67:                                               ; preds = %64, %29, %42, %45, %48, %51, %54
  %68 = phi i32 [ 787, %54 ], [ 787, %51 ], [ 787, %48 ], [ 787, %45 ], [ 787, %42 ], [ 787, %29 ], [ 794, %64 ]
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 %68) #8
  store i8 50, i8* %1, align 1
  br label %69

69:                                               ; preds = %67, %64
  %70 = phi i64 [ %17, %64 ], [ 0, %67 ]
  %71 = phi i64 [ 0, %64 ], [ %17, %67 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %38) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %36) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #8
  %72 = inttoptr i64 %71 to %"struct.bssl::DC"*
  %73 = icmp eq i64 %71, 0
  br i1 %73, label %86, label %74

74:                                               ; preds = %69
  %75 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %72, i64 0, i32 2, i32 0, i32 0, i32 0
  %76 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %75, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %75, align 8
  %77 = icmp eq %struct.evp_pkey_st* %76, null
  br i1 %77, label %79, label %78

78:                                               ; preds = %74
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %76) #8
  br label %79

79:                                               ; preds = %78, %74
  %80 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %72, i64 0, i32 0, i32 0, i32 0, i32 0
  %81 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %80, align 8
  store %struct.crypto_buffer_st* null, %struct.crypto_buffer_st** %80, align 8
  %82 = icmp eq %struct.crypto_buffer_st* %81, null
  br i1 %82, label %84, label %83

83:                                               ; preds = %79
  call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %81) #8
  br label %84

84:                                               ; preds = %83, %79
  %85 = inttoptr i64 %71 to i8*
  call void @OPENSSL_free(i8* nonnull %85) #8
  br label %86

86:                                               ; preds = %10, %69, %84
  %87 = phi i64 [ 0, %10 ], [ %70, %69 ], [ %70, %84 ]
  %88 = inttoptr i64 %87 to %"struct.bssl::DC"*
  ret %"struct.bssl::DC"* %88
}

declare i32 @CBS_get_u32(%struct.cbs_st*, i32*) local_unnamed_addr #2

declare i32 @CBS_get_u16(%struct.cbs_st*, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_set_chain_and_key(%struct.ssl_st* nocapture readonly, %struct.crypto_buffer_st** nocapture readonly, i64, %struct.evp_pkey_st*, %struct.ssl_private_key_method_st*) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %6, align 8
  %8 = icmp eq %"struct.bssl::SSL_CONFIG"* %7, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %7, i64 0, i32 6, i32 0, i32 0, i32 0
  %11 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %10, align 8
  %12 = tail call fastcc i32 @_ZN4bsslL22cert_set_chain_and_keyEPNS_4CERTEPKP16crypto_buffer_stmP11evp_pkey_stPK25ssl_private_key_method_st(%"struct.bssl::CERT"* %11, %struct.crypto_buffer_st** %1, i64 %2, %struct.evp_pkey_st* %3, %struct.ssl_private_key_method_st* %4)
  br label %13

13:                                               ; preds = %5, %9
  %14 = phi i32 [ %12, %9 ], [ 0, %5 ]
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN4bsslL22cert_set_chain_and_keyEPNS_4CERTEPKP16crypto_buffer_stmP11evp_pkey_stPK25ssl_private_key_method_st(%"struct.bssl::CERT"* nocapture, %struct.crypto_buffer_st** nocapture readonly, i64, %struct.evp_pkey_st*, %struct.ssl_private_key_method_st*) unnamed_addr #0 {
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %5
  %8 = icmp eq %struct.evp_pkey_st* %3, null
  %9 = icmp eq %struct.ssl_private_key_method_st* %4, null
  %10 = and i1 %8, %9
  br i1 %10, label %11, label %12

11:                                               ; preds = %7, %5
  tail call void @ERR_put_error(i32 16, i32 0, i32 67, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 268) #8
  br label %61

12:                                               ; preds = %7
  %13 = icmp ne %struct.evp_pkey_st* %3, null
  %14 = icmp ne %struct.ssl_private_key_method_st* %4, null
  %15 = and i1 %13, %14
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @ERR_put_error(i32 16, i32 0, i32 275, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 273) #8
  br label %61

17:                                               ; preds = %12
  %18 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %1, align 8
  %19 = tail call fastcc i32 @_ZN4bsslL27check_leaf_cert_and_privkeyEP16crypto_buffer_stP11evp_pkey_st(%struct.crypto_buffer_st* %18, %struct.evp_pkey_st* %3)
  switch i32 %19, label %21 [
    i32 0, label %61
    i32 2, label %20
  ]

20:                                               ; preds = %17
  tail call void @ERR_put_error(i32 16, i32 0, i32 274, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 281) #8
  br label %61

21:                                               ; preds = %17
  %22 = tail call %struct.stack_st* @sk_new_null() #8
  %23 = ptrtoint %struct.stack_st* %22 to i64
  %24 = icmp eq %struct.stack_st* %22, null
  br i1 %24, label %61, label %27

25:                                               ; preds = %34
  %26 = icmp eq i64 %38, %2
  br i1 %26, label %41, label %27

27:                                               ; preds = %21, %25
  %28 = phi i64 [ %38, %25 ], [ 0, %21 ]
  %29 = getelementptr inbounds %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %1, i64 %28
  %30 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %29, align 8
  %31 = icmp eq %struct.crypto_buffer_st* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %27
  %33 = tail call i32 @CRYPTO_BUFFER_up_ref(%struct.crypto_buffer_st* nonnull %30) #8
  br label %34

34:                                               ; preds = %27, %32
  %35 = bitcast %struct.crypto_buffer_st* %30 to i8*
  %36 = tail call i64 @sk_push(%struct.stack_st* nonnull %22, i8* %35) #8
  %37 = icmp eq i64 %36, 0
  %38 = add nuw i64 %28, 1
  br i1 %37, label %39, label %25

39:                                               ; preds = %34
  br i1 %31, label %60, label %40

40:                                               ; preds = %39
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %30) #8
  br label %60

41:                                               ; preds = %25
  br i1 %8, label %44, label %42

42:                                               ; preds = %41
  %43 = tail call i32 @EVP_PKEY_up_ref(%struct.evp_pkey_st* nonnull %3) #8
  br label %44

44:                                               ; preds = %41, %42
  %45 = ptrtoint %struct.evp_pkey_st* %3 to i64
  %46 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %47 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %46, align 8
  %48 = bitcast %"struct.bssl::CERT"* %0 to i64*
  store i64 %45, i64* %48, align 8
  %49 = icmp eq %struct.evp_pkey_st* %47, null
  br i1 %49, label %51, label %50

50:                                               ; preds = %44
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %47) #8
  br label %51

51:                                               ; preds = %50, %44
  %52 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 5
  store %struct.ssl_private_key_method_st* %4, %struct.ssl_private_key_method_st** %52, align 8
  %53 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 1
  %54 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %53, i64 0, i32 0, i32 0, i32 0
  %55 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %54, align 8
  %56 = bitcast %"class.std::__1::unique_ptr.1"* %53 to i64*
  store i64 %23, i64* %56, align 8
  %57 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %55, null
  br i1 %57, label %61, label %58

58:                                               ; preds = %51
  %59 = bitcast %struct.stack_st_CRYPTO_BUFFER* %55 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %59, void (void (i8*)*, i8*)* nonnull @_ZZN4bssl8internal11DeleterImplI22stack_st_CRYPTO_BUFFERvE4FreeEPS2_ENUlPFvPvES5_E_8__invokeES7_S5_, void (i8*)* null) #8
  br label %61

60:                                               ; preds = %39, %40
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %22, void (void (i8*)*, i8*)* nonnull @_ZZN4bssl8internal11DeleterImplI22stack_st_CRYPTO_BUFFERvE4FreeEPS2_ENUlPFvPvES5_E_8__invokeES7_S5_, void (i8*)* null) #8
  br label %61

61:                                               ; preds = %21, %58, %51, %60, %17, %20, %16, %11
  %62 = phi i32 [ 0, %11 ], [ 0, %16 ], [ 0, %20 ], [ %19, %17 ], [ 0, %60 ], [ 1, %51 ], [ 1, %58 ], [ 0, %21 ]
  ret i32 %62
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_CTX_set_chain_and_key(%struct.ssl_ctx_st* nocapture readonly, %struct.crypto_buffer_st** nocapture readonly, i64, %struct.evp_pkey_st*, %struct.ssl_private_key_method_st*) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 37, i32 0, i32 0, i32 0
  %7 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %6, align 8
  %8 = tail call fastcc i32 @_ZN4bsslL22cert_set_chain_and_keyEPNS_4CERTEPKP16crypto_buffer_stmP11evp_pkey_stPK25ssl_private_key_method_st(%"struct.bssl::CERT"* %7, %struct.crypto_buffer_st** %1, i64 %2, %struct.evp_pkey_st* %3, %struct.ssl_private_key_method_st* %4)
  ret i32 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.stack_st_CRYPTO_BUFFER* @SSL_CTX_get0_chain(%struct.ssl_ctx_st* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 37, i32 0, i32 0, i32 0
  %3 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %2, align 8
  %4 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %3, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %4, align 8
  ret %struct.stack_st_CRYPTO_BUFFER* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_CTX_use_certificate_ASN1(%struct.ssl_ctx_st* nocapture readonly, i64, i8*) local_unnamed_addr #0 {
  %4 = tail call %struct.crypto_buffer_st* @CRYPTO_BUFFER_new(i8* %2, i64 %1, %struct.crypto_buffer_pool_st* null) #8
  %5 = icmp eq %struct.crypto_buffer_st* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 37, i32 0, i32 0, i32 0
  %8 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %7, align 8
  %9 = tail call zeroext i1 @_ZN4bssl12ssl_set_certEPNS_4CERTENSt3__110unique_ptrI16crypto_buffer_stNS_8internal7DeleterIS4_EEEE(%"struct.bssl::CERT"* %8, %struct.crypto_buffer_st* nonnull %4)
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %3, %6
  %12 = phi i32 [ %10, %6 ], [ 0, %3 ]
  ret i32 %12
}

declare %struct.crypto_buffer_st* @CRYPTO_BUFFER_new(i8*, i64, %struct.crypto_buffer_pool_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_use_certificate_ASN1(%struct.ssl_st* nocapture readonly, i8*, i64) local_unnamed_addr #0 {
  %4 = tail call %struct.crypto_buffer_st* @CRYPTO_BUFFER_new(i8* %1, i64 %2, %struct.crypto_buffer_pool_st* null) #8
  %5 = icmp eq %struct.crypto_buffer_st* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %8 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %7, align 8
  %9 = icmp eq %"struct.bssl::SSL_CONFIG"* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %8, i64 0, i32 6, i32 0, i32 0, i32 0
  %12 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %11, align 8
  %13 = tail call zeroext i1 @_ZN4bssl12ssl_set_certEPNS_4CERTENSt3__110unique_ptrI16crypto_buffer_stNS_8internal7DeleterIS4_EEEE(%"struct.bssl::CERT"* %12, %struct.crypto_buffer_st* nonnull %4)
  %14 = zext i1 %13 to i32
  br label %16

15:                                               ; preds = %6
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %4) #8
  br label %16

16:                                               ; preds = %3, %10, %15
  %17 = phi i32 [ %14, %10 ], [ 0, %15 ], [ 0, %3 ]
  ret i32 %17
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @SSL_CTX_set_cert_cb(%struct.ssl_ctx_st* nocapture readonly, i32 (%struct.ssl_st*, i8*)*, i8*) local_unnamed_addr #5 {
  %4 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 37, i32 0, i32 0, i32 0
  %5 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %4, align 8
  %6 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %5, i64 0, i32 8
  store i32 (%struct.ssl_st*, i8*)* %1, i32 (%struct.ssl_st*, i8*)** %6, align 8
  %7 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %5, i64 0, i32 9
  store i8* %2, i8** %7, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @SSL_set_cert_cb(%struct.ssl_st* nocapture readonly, i32 (%struct.ssl_st*, i8*)*, i8*) local_unnamed_addr #5 {
  %4 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %4, align 8
  %6 = icmp eq %"struct.bssl::SSL_CONFIG"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %5, i64 0, i32 6, i32 0, i32 0, i32 0
  %9 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %8, align 8
  %10 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %9, i64 0, i32 8
  store i32 (%struct.ssl_st*, i8*)* %1, i32 (%struct.ssl_st*, i8*)** %10, align 8
  %11 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %9, i64 0, i32 9
  store i8* %2, i8** %11, align 8
  br label %12

12:                                               ; preds = %3, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_CRYPTO_BUFFER* @SSL_get0_peer_certificates(%struct.ssl_st*) local_unnamed_addr #0 {
  %2 = tail call %struct.ssl_session_st* @SSL_get_session(%struct.ssl_st* %0) #8
  %3 = icmp eq %struct.ssl_session_st* %2, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.ssl_session_st, %struct.ssl_session_st* %2, i64 0, i32 11, i32 0, i32 0, i32 0
  %6 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %5, align 8
  br label %7

7:                                                ; preds = %1, %4
  %8 = phi %struct.stack_st_CRYPTO_BUFFER* [ %6, %4 ], [ null, %1 ]
  ret %struct.stack_st_CRYPTO_BUFFER* %8
}

declare %struct.ssl_session_st* @SSL_get_session(%struct.ssl_st*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.stack_st_CRYPTO_BUFFER* @SSL_get0_server_requested_CAs(%struct.ssl_st* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %3 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %2, align 8
  %4 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %3, i64 0, i32 34, i32 0, i32 0, i32 0
  %5 = load %"struct.bssl::SSL_HANDSHAKE"*, %"struct.bssl::SSL_HANDSHAKE"** %4, align 8
  %6 = icmp eq %"struct.bssl::SSL_HANDSHAKE"* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %5, i64 0, i32 35, i32 0, i32 0, i32 0
  %9 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %8, align 8
  br label %10

10:                                               ; preds = %1, %7
  %11 = phi %struct.stack_st_CRYPTO_BUFFER* [ %9, %7 ], [ null, %1 ]
  ret %struct.stack_st_CRYPTO_BUFFER* %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_CTX_set_signed_cert_timestamp_list(%struct.ssl_ctx_st* nocapture readonly, i8*, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 37, i32 0, i32 0, i32 0
  %5 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %4, align 8
  %6 = tail call fastcc i32 @_ZL30set_signed_cert_timestamp_listPN4bssl4CERTEPKhm(%"struct.bssl::CERT"* %5, i8* %1, i64 %2)
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZL30set_signed_cert_timestamp_listPN4bssl4CERTEPKhm(%"struct.bssl::CERT"* nocapture, i8*, i64) unnamed_addr #0 {
  %4 = alloca %struct.cbs_st, align 8
  %5 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8
  %6 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @CBS_init(%struct.cbs_st* nonnull %4, i8* %1, i64 %2) #8
  %7 = call zeroext i1 @_ZN4bssl21ssl_is_sct_list_validEPK6cbs_st(%struct.cbs_st* nonnull %4) #8
  br i1 %7, label %9, label %8

8:                                                ; preds = %3
  call void @ERR_put_error(i32 16, i32 0, i32 269, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 950) #8
  br label %22

9:                                                ; preds = %3
  %10 = call i8* @CBS_data(%struct.cbs_st* nonnull %4) #8
  %11 = call i64 @CBS_len(%struct.cbs_st* nonnull %4) #8
  %12 = call %struct.crypto_buffer_st* @CRYPTO_BUFFER_new(i8* %10, i64 %11, %struct.crypto_buffer_pool_st* null) #8
  %13 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %14 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %13, align 8
  store %struct.crypto_buffer_st* %12, %struct.crypto_buffer_st** %13, align 8
  %15 = icmp eq %struct.crypto_buffer_st* %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %9
  call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %14) #8
  %17 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %13, align 8
  br label %18

18:                                               ; preds = %9, %16
  %19 = phi %struct.crypto_buffer_st* [ %12, %9 ], [ %17, %16 ]
  %20 = icmp ne %struct.crypto_buffer_st* %19, null
  %21 = zext i1 %20 to i32
  br label %22

22:                                               ; preds = %18, %8
  %23 = phi i32 [ %21, %18 ], [ 0, %8 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_set_signed_cert_timestamp_list(%struct.ssl_st* nocapture readonly, i8*, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %4, align 8
  %6 = icmp eq %"struct.bssl::SSL_CONFIG"* %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %5, i64 0, i32 6, i32 0, i32 0, i32 0
  %9 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %8, align 8
  %10 = tail call fastcc i32 @_ZL30set_signed_cert_timestamp_listPN4bssl4CERTEPKhm(%"struct.bssl::CERT"* %9, i8* %1, i64 %2)
  br label %11

11:                                               ; preds = %3, %7
  %12 = phi i32 [ %10, %7 ], [ 0, %3 ]
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_CTX_set_ocsp_response(%struct.ssl_ctx_st* nocapture readonly, i8*, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 37, i32 0, i32 0, i32 0
  %5 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %4, align 8
  %6 = tail call %struct.crypto_buffer_st* @CRYPTO_BUFFER_new(i8* %1, i64 %2, %struct.crypto_buffer_pool_st* null) #8
  %7 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %5, i64 0, i32 12, i32 0, i32 0, i32 0
  %8 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %7, align 8
  store %struct.crypto_buffer_st* %6, %struct.crypto_buffer_st** %7, align 8
  %9 = icmp eq %struct.crypto_buffer_st* %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %3
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %8) #8
  br label %11

11:                                               ; preds = %3, %10
  %12 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %4, align 8
  %13 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %12, i64 0, i32 12, i32 0, i32 0, i32 0
  %14 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %13, align 8
  %15 = icmp ne %struct.crypto_buffer_st* %14, null
  %16 = zext i1 %15 to i32
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_set_ocsp_response(%struct.ssl_st* nocapture readonly, i8*, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %4, align 8
  %6 = icmp eq %"struct.bssl::SSL_CONFIG"* %5, null
  br i1 %6, label %23, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %5, i64 0, i32 6, i32 0, i32 0, i32 0
  %9 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %8, align 8
  %10 = tail call %struct.crypto_buffer_st* @CRYPTO_BUFFER_new(i8* %1, i64 %2, %struct.crypto_buffer_pool_st* null) #8
  %11 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %9, i64 0, i32 12, i32 0, i32 0, i32 0
  %12 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %11, align 8
  store %struct.crypto_buffer_st* %10, %struct.crypto_buffer_st** %11, align 8
  %13 = icmp eq %struct.crypto_buffer_st* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %7
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %12) #8
  br label %15

15:                                               ; preds = %7, %14
  %16 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %4, align 8
  %17 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %16, i64 0, i32 6, i32 0, i32 0, i32 0
  %18 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %17, align 8
  %19 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %18, i64 0, i32 12, i32 0, i32 0, i32 0
  %20 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %19, align 8
  %21 = icmp ne %struct.crypto_buffer_st* %20, null
  %22 = zext i1 %21 to i32
  br label %23

23:                                               ; preds = %3, %15
  %24 = phi i32 [ %22, %15 ], [ 0, %3 ]
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @SSL_CTX_set0_client_CAs(%struct.ssl_ctx_st*, %struct.stack_st_CRYPTO_BUFFER*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 1
  %4 = load %"struct.bssl::SSL_X509_METHOD"*, %"struct.bssl::SSL_X509_METHOD"** %3, align 8
  %5 = getelementptr inbounds %"struct.bssl::SSL_X509_METHOD", %"struct.bssl::SSL_X509_METHOD"* %4, i64 0, i32 17
  %6 = load void (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)** %5, align 8
  tail call void %6(%struct.ssl_ctx_st* %0) #8
  %7 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 31, i32 0, i32 0, i32 0
  %8 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %7, align 8
  store %struct.stack_st_CRYPTO_BUFFER* %1, %struct.stack_st_CRYPTO_BUFFER** %7, align 8
  %9 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %2
  %11 = bitcast %struct.stack_st_CRYPTO_BUFFER* %8 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %11, void (void (i8*)*, i8*)* nonnull @_ZZN4bssl8internal11DeleterImplI22stack_st_CRYPTO_BUFFERvE4FreeEPS2_ENUlPFvPvES5_E_8__invokeES7_S5_, void (i8*)* null) #8
  br label %12

12:                                               ; preds = %2, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @SSL_set0_client_CAs(%struct.ssl_st* nocapture readonly, %struct.stack_st_CRYPTO_BUFFER*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %3, align 8
  %5 = icmp eq %"struct.bssl::SSL_CONFIG"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %8 = load %struct.ssl_ctx_st*, %struct.ssl_ctx_st** %7, align 8
  %9 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %8, i64 0, i32 1
  %10 = load %"struct.bssl::SSL_X509_METHOD"*, %"struct.bssl::SSL_X509_METHOD"** %9, align 8
  %11 = getelementptr inbounds %"struct.bssl::SSL_X509_METHOD", %"struct.bssl::SSL_X509_METHOD"* %10, i64 0, i32 13
  %12 = load void (%"struct.bssl::SSL_CONFIG"*)*, void (%"struct.bssl::SSL_CONFIG"*)** %11, align 8
  tail call void %12(%"struct.bssl::SSL_CONFIG"* nonnull %4) #8
  %13 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %3, align 8
  %14 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %13, i64 0, i32 12, i32 0, i32 0, i32 0
  %15 = load %struct.stack_st_CRYPTO_BUFFER*, %struct.stack_st_CRYPTO_BUFFER** %14, align 8
  store %struct.stack_st_CRYPTO_BUFFER* %1, %struct.stack_st_CRYPTO_BUFFER** %14, align 8
  %16 = icmp eq %struct.stack_st_CRYPTO_BUFFER* %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %6
  %18 = bitcast %struct.stack_st_CRYPTO_BUFFER* %15 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %18, void (void (i8*)*, i8*)* nonnull @_ZZN4bssl8internal11DeleterImplI22stack_st_CRYPTO_BUFFERvE4FreeEPS2_ENUlPFvPvES5_E_8__invokeES7_S5_, void (i8*)* null) #8
  br label %19

19:                                               ; preds = %2, %17, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_set1_delegated_credential(%struct.ssl_st* nocapture readonly, %struct.crypto_buffer_st*, %struct.evp_pkey_st*, %struct.ssl_private_key_method_st*) local_unnamed_addr #0 {
  %5 = alloca i8, align 1
  %6 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %6, align 8
  %8 = icmp eq %"struct.bssl::SSL_CONFIG"* %7, null
  br i1 %8, label %75, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %7, i64 0, i32 6, i32 0, i32 0, i32 0
  %11 = load %"struct.bssl::CERT"*, %"struct.bssl::CERT"** %10, align 8
  %12 = icmp eq %struct.evp_pkey_st* %2, null
  %13 = icmp eq %struct.ssl_private_key_method_st* %3, null
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %16

15:                                               ; preds = %9
  tail call void @ERR_put_error(i32 16, i32 0, i32 67, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 842) #8
  br label %75

16:                                               ; preds = %9
  %17 = icmp ne %struct.evp_pkey_st* %2, null
  %18 = icmp ne %struct.ssl_private_key_method_st* %3, null
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  tail call void @ERR_put_error(i32 16, i32 0, i32 275, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 847) #8
  br label %75

21:                                               ; preds = %16
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #8
  store i8 -86, i8* %5, align 1
  %22 = call %"struct.bssl::DC"* @_ZN4bssl2DC5ParseEP16crypto_buffer_stPh(%struct.crypto_buffer_st* %1, i8* nonnull %5) #8
  %23 = ptrtoint %"struct.bssl::DC"* %22 to i64
  %24 = icmp eq %"struct.bssl::DC"* %22, null
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  tail call void @ERR_put_error(i32 16, i32 0, i32 301, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 854) #8
  br label %73

26:                                               ; preds = %21
  br i1 %17, label %27, label %31

27:                                               ; preds = %26
  %28 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %22, i64 0, i32 2, i32 0, i32 0, i32 0
  %29 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %28, align 8
  %30 = tail call zeroext i1 @_ZN4bssl34ssl_compare_public_and_private_keyEPK11evp_pkey_stS2_(%struct.evp_pkey_st* %29, %struct.evp_pkey_st* nonnull %2) #8
  br i1 %30, label %31, label %62

31:                                               ; preds = %27, %26
  %32 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %11, i64 0, i32 15
  %33 = getelementptr inbounds %"class.std::__1::unique_ptr.113", %"class.std::__1::unique_ptr.113"* %32, i64 0, i32 0, i32 0, i32 0
  %34 = load %"struct.bssl::DC"*, %"struct.bssl::DC"** %33, align 8
  %35 = bitcast %"class.std::__1::unique_ptr.113"* %32 to i64*
  store i64 %23, i64* %35, align 8
  %36 = icmp eq %"struct.bssl::DC"* %34, null
  br i1 %36, label %49, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %34, i64 0, i32 2, i32 0, i32 0, i32 0
  %39 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %38, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %38, align 8
  %40 = icmp eq %struct.evp_pkey_st* %39, null
  br i1 %40, label %42, label %41

41:                                               ; preds = %37
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %39) #8
  br label %42

42:                                               ; preds = %41, %37
  %43 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %34, i64 0, i32 0, i32 0, i32 0, i32 0
  %44 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %43, align 8
  store %struct.crypto_buffer_st* null, %struct.crypto_buffer_st** %43, align 8
  %45 = icmp eq %struct.crypto_buffer_st* %44, null
  br i1 %45, label %47, label %46

46:                                               ; preds = %42
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %44) #8
  br label %47

47:                                               ; preds = %46, %42
  %48 = bitcast %"struct.bssl::DC"* %34 to i8*
  tail call void @OPENSSL_free(i8* nonnull %48) #8
  br label %49

49:                                               ; preds = %47, %31
  br i1 %12, label %52, label %50

50:                                               ; preds = %49
  %51 = tail call i32 @EVP_PKEY_up_ref(%struct.evp_pkey_st* nonnull %2) #8
  br label %52

52:                                               ; preds = %50, %49
  %53 = ptrtoint %struct.evp_pkey_st* %2 to i64
  %54 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %11, i64 0, i32 16
  %55 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %54, i64 0, i32 0, i32 0, i32 0
  %56 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %55, align 8
  %57 = bitcast %"class.std::__1::unique_ptr"* %54 to i64*
  store i64 %53, i64* %57, align 8
  %58 = icmp eq %struct.evp_pkey_st* %56, null
  br i1 %58, label %60, label %59

59:                                               ; preds = %52
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %56) #8
  br label %60

60:                                               ; preds = %59, %52
  %61 = getelementptr inbounds %"struct.bssl::CERT", %"struct.bssl::CERT"* %11, i64 0, i32 17
  store %struct.ssl_private_key_method_st* %3, %struct.ssl_private_key_method_st** %61, align 8
  br label %73

62:                                               ; preds = %27
  tail call void @ERR_put_error(i32 16, i32 0, i32 274, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 861) #8
  %63 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %28, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %28, align 8
  %64 = icmp eq %struct.evp_pkey_st* %63, null
  br i1 %64, label %66, label %65

65:                                               ; preds = %62
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %63) #8
  br label %66

66:                                               ; preds = %65, %62
  %67 = getelementptr inbounds %"struct.bssl::DC", %"struct.bssl::DC"* %22, i64 0, i32 0, i32 0, i32 0, i32 0
  %68 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %67, align 8
  store %struct.crypto_buffer_st* null, %struct.crypto_buffer_st** %67, align 8
  %69 = icmp eq %struct.crypto_buffer_st* %68, null
  br i1 %69, label %71, label %70

70:                                               ; preds = %66
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %68) #8
  br label %71

71:                                               ; preds = %70, %66
  %72 = bitcast %"struct.bssl::DC"* %22 to i8*
  tail call void @OPENSSL_free(i8* nonnull %72) #8
  br label %73

73:                                               ; preds = %71, %60, %25
  %74 = phi i32 [ 1, %60 ], [ 0, %71 ], [ 0, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #8
  br label %75

75:                                               ; preds = %4, %73, %20, %15
  %76 = phi i32 [ 0, %4 ], [ 0, %15 ], [ 0, %20 ], [ %74, %73 ]
  ret i32 %76
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @SSL_delegated_credential_used(%struct.ssl_st* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %3 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %2, align 8
  %4 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %3, i64 0, i32 23
  %5 = load i16, i16* %4, align 1
  %6 = lshr i16 %5, 7
  %7 = and i16 %6, 1
  %8 = zext i16 %7 to i32
  ret i32 %8
}

declare %struct.stack_st* @sk_deep_copy(%struct.stack_st*, i8* (i8* (i8*)*, i8*)*, i8* (i8*)*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @sk_CRYPTO_BUFFER_call_copy_func(i8* (i8*)*, i8*) #6 comdat {
  %3 = bitcast i8* (i8*)* %0 to %struct.crypto_buffer_st* (%struct.crypto_buffer_st*)*
  %4 = bitcast i8* %1 to %struct.crypto_buffer_st*
  %5 = tail call %struct.crypto_buffer_st* %3(%struct.crypto_buffer_st* %4) #8
  %6 = bitcast %struct.crypto_buffer_st* %5 to i8*
  ret i8* %6
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @sk_CRYPTO_BUFFER_call_free_func(void (i8*)*, i8*) #6 comdat {
  %3 = bitcast void (i8*)* %0 to void (%struct.crypto_buffer_st*)*
  %4 = bitcast i8* %1 to %struct.crypto_buffer_st*
  tail call void %3(%struct.crypto_buffer_st* %4) #8
  ret void
}

declare i32 @CRYPTO_BUFFER_up_ref(%struct.crypto_buffer_st*) local_unnamed_addr #2

declare i32 @EVP_PKEY_up_ref(%struct.evp_pkey_st*) local_unnamed_addr #2

declare zeroext i1 @_ZN4bssl25ssl_is_key_type_supportedEi(i32) local_unnamed_addr #2

declare void @ERR_clear_error() local_unnamed_addr #2

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #2

declare i8* @sk_set(%struct.stack_st*, i64, i8*) local_unnamed_addr #2

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #2

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #2

declare zeroext i16 @_ZN4bssl20ssl_protocol_versionEPK6ssl_st(%struct.ssl_st*) local_unnamed_addr #2

declare void @CBS_init(%struct.cbs_st*, i8*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZN4bssl21ssl_is_sct_list_validEPK6cbs_st(%struct.cbs_st*) local_unnamed_addr #2

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #2

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN4bssl8internal11DeleterImplI22stack_st_CRYPTO_BUFFERvE4FreeEPS2_ENUlPFvPvES5_E_8__invokeES7_S5_(void (i8*)*, i8*) #6 comdat align 2 {
  %3 = bitcast i8* %1 to %struct.crypto_buffer_st*
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* %3) #8
  ret void
}

declare void @EVP_PKEY_free(%struct.evp_pkey_st*) local_unnamed_addr #2

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind readonly }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
