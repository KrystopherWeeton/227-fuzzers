; ModuleID = '../../third_party/skia/src/core/SkMath.cpp'
source_filename = "../../third_party/skia/src/core/SkMath.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_Z10SkSqrtBitsii(i32, i32) local_unnamed_addr #0 {
  br label %3

3:                                                ; preds = %3, %2
  %4 = phi i32 [ %1, %2 ], [ %21, %3 ]
  %5 = phi i32 [ 0, %2 ], [ %18, %3 ]
  %6 = phi i32 [ 0, %2 ], [ %20, %3 ]
  %7 = phi i32 [ %0, %2 ], [ %12, %3 ]
  %8 = shl i32 %5, 1
  %9 = shl i32 %6, 2
  %10 = lshr i32 %7, 30
  %11 = or i32 %10, %9
  %12 = shl i32 %7, 2
  %13 = shl i32 %5, 2
  %14 = or i32 %13, 1
  %15 = icmp ult i32 %11, %14
  %16 = xor i1 %15, true
  %17 = zext i1 %16 to i32
  %18 = or i32 %8, %17
  %19 = select i1 %15, i32 0, i32 %14
  %20 = sub i32 %11, %19
  %21 = add nsw i32 %4, -1
  %22 = icmp sgt i32 %4, 0
  br i1 %22, label %3, label %23

23:                                               ; preds = %3
  ret i32 %18
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @_ZN10SkSafeMath3AddEmm(i64, i64) local_unnamed_addr #1 align 2 {
  %3 = add i64 %1, %0
  %4 = icmp ult i64 %3, %0
  %5 = select i1 %4, i64 -1, i64 %3
  ret i64 %5
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @_ZN10SkSafeMath3MulEmm(i64, i64) local_unnamed_addr #1 align 2 {
  %3 = or i64 %1, %0
  %4 = icmp ugt i64 %3, 4294967295
  br i1 %4, label %7, label %5

5:                                                ; preds = %2
  %6 = mul i64 %1, %0
  br label %29

7:                                                ; preds = %2
  %8 = and i64 %0, 4294967295
  %9 = and i64 %1, 4294967295
  %10 = mul nuw i64 %9, %8
  %11 = lshr i64 %0, 32
  %12 = mul nuw i64 %9, %11
  %13 = lshr i64 %1, 32
  %14 = mul nuw i64 %13, %8
  %15 = mul nuw i64 %13, %11
  %16 = shl i64 %12, 32
  %17 = add i64 %16, %10
  %18 = icmp uge i64 %17, %10
  %19 = shl i64 %14, 32
  %20 = add i64 %17, %19
  %21 = icmp uge i64 %20, %17
  %22 = lshr i64 %12, 32
  %23 = add nuw i64 %22, %15
  %24 = lshr i64 %14, 32
  %25 = sub nsw i64 0, %24
  %26 = icmp eq i64 %23, %25
  %27 = and i1 %26, %18
  %28 = and i1 %27, %21
  br i1 %28, label %29, label %31

29:                                               ; preds = %5, %7
  %30 = phi i64 [ %6, %5 ], [ %20, %7 ]
  br label %31

31:                                               ; preds = %7, %29
  %32 = phi i64 [ %30, %29 ], [ -1, %7 ]
  ret i64 %32
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_Z18sk_floats_are_unitPKfm(float* nocapture readonly, i64) local_unnamed_addr #2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %87, label %4

4:                                                ; preds = %2
  %5 = icmp ult i64 %1, 8
  br i1 %5, label %6, label %9

6:                                                ; preds = %77, %4
  %7 = phi i64 [ 0, %4 ], [ %10, %77 ]
  %8 = phi i1 [ true, %4 ], [ %85, %77 ]
  br label %89

9:                                                ; preds = %4
  %10 = and i64 %1, -8
  %11 = add i64 %10, -8
  %12 = lshr exact i64 %11, 3
  %13 = add nuw nsw i64 %12, 1
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %11, 0
  br i1 %15, label %55, label %16

16:                                               ; preds = %9
  %17 = sub nuw nsw i64 %13, %14
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %52, %18 ]
  %20 = phi <4 x i1> [ <i1 true, i1 true, i1 true, i1 true>, %16 ], [ %50, %18 ]
  %21 = phi <4 x i1> [ <i1 true, i1 true, i1 true, i1 true>, %16 ], [ %51, %18 ]
  %22 = phi i64 [ %17, %16 ], [ %53, %18 ]
  %23 = getelementptr inbounds float, float* %0, i64 %19
  %24 = bitcast float* %23 to <4 x float>*
  %25 = load <4 x float>, <4 x float>* %24, align 4
  %26 = getelementptr inbounds float, float* %23, i64 4
  %27 = bitcast float* %26 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 4
  %29 = fcmp oge <4 x float> %25, zeroinitializer
  %30 = fcmp oge <4 x float> %28, zeroinitializer
  %31 = fcmp ole <4 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %32 = fcmp ole <4 x float> %28, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %33 = and <4 x i1> %29, %31
  %34 = and <4 x i1> %30, %32
  %35 = and <4 x i1> %20, %33
  %36 = and <4 x i1> %21, %34
  %37 = or i64 %19, 8
  %38 = getelementptr inbounds float, float* %0, i64 %37
  %39 = bitcast float* %38 to <4 x float>*
  %40 = load <4 x float>, <4 x float>* %39, align 4
  %41 = getelementptr inbounds float, float* %38, i64 4
  %42 = bitcast float* %41 to <4 x float>*
  %43 = load <4 x float>, <4 x float>* %42, align 4
  %44 = fcmp oge <4 x float> %40, zeroinitializer
  %45 = fcmp oge <4 x float> %43, zeroinitializer
  %46 = fcmp ole <4 x float> %40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %47 = fcmp ole <4 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %48 = and <4 x i1> %44, %46
  %49 = and <4 x i1> %45, %47
  %50 = and <4 x i1> %35, %48
  %51 = and <4 x i1> %36, %49
  %52 = add i64 %19, 16
  %53 = add i64 %22, -2
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %18, !llvm.loop !2

55:                                               ; preds = %18, %9
  %56 = phi <4 x i1> [ undef, %9 ], [ %50, %18 ]
  %57 = phi <4 x i1> [ undef, %9 ], [ %51, %18 ]
  %58 = phi i64 [ 0, %9 ], [ %52, %18 ]
  %59 = phi <4 x i1> [ <i1 true, i1 true, i1 true, i1 true>, %9 ], [ %50, %18 ]
  %60 = phi <4 x i1> [ <i1 true, i1 true, i1 true, i1 true>, %9 ], [ %51, %18 ]
  %61 = icmp eq i64 %14, 0
  br i1 %61, label %77, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds float, float* %0, i64 %58
  %64 = bitcast float* %63 to <4 x float>*
  %65 = load <4 x float>, <4 x float>* %64, align 4
  %66 = getelementptr inbounds float, float* %63, i64 4
  %67 = bitcast float* %66 to <4 x float>*
  %68 = load <4 x float>, <4 x float>* %67, align 4
  %69 = fcmp oge <4 x float> %68, zeroinitializer
  %70 = fcmp ole <4 x float> %68, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %71 = and <4 x i1> %69, %70
  %72 = and <4 x i1> %60, %71
  %73 = fcmp oge <4 x float> %65, zeroinitializer
  %74 = fcmp ole <4 x float> %65, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %75 = and <4 x i1> %73, %74
  %76 = and <4 x i1> %59, %75
  br label %77

77:                                               ; preds = %55, %62
  %78 = phi <4 x i1> [ %56, %55 ], [ %76, %62 ]
  %79 = phi <4 x i1> [ %57, %55 ], [ %72, %62 ]
  %80 = and <4 x i1> %79, %78
  %81 = shufflevector <4 x i1> %80, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %82 = and <4 x i1> %80, %81
  %83 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %84 = and <4 x i1> %82, %83
  %85 = extractelement <4 x i1> %84, i32 0
  %86 = icmp eq i64 %10, %1
  br i1 %86, label %87, label %6

87:                                               ; preds = %89, %77, %2
  %88 = phi i1 [ true, %2 ], [ %85, %77 ], [ %97, %89 ]
  ret i1 %88

89:                                               ; preds = %6, %89
  %90 = phi i64 [ %98, %89 ], [ %7, %6 ]
  %91 = phi i1 [ %97, %89 ], [ %8, %6 ]
  %92 = getelementptr inbounds float, float* %0, i64 %90
  %93 = load float, float* %92, align 4
  %94 = fcmp oge float %93, 0.000000e+00
  %95 = fcmp ole float %93, 1.000000e+00
  %96 = and i1 %94, %95
  %97 = and i1 %91, %96
  %98 = add nuw i64 %90, 1
  %99 = icmp eq i64 %98, %1
  br i1 %99, label %87, label %89, !llvm.loop !4
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
