; ModuleID = '../../third_party/libzip/src/lib/zip_source_window.c'
source_filename = "../../third_party/libzip/src/lib/zip_source_window.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_stat = type { i64, i8*, i64, i64, i64, i64, i32, i16, i16, i32 }
%struct.zip_file_attributes = type { i64, i8, i8, i8, i8, i32, i16, i16 }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_window(%struct.zip*, %struct.zip_source*, i64, i64) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %6 = tail call %struct.zip_source* @_zip_source_window_new(%struct.zip_source* %1, i64 %2, i64 %3, %struct.zip_stat* null, %struct.zip_file_attributes* null, %struct.zip* null, i64 0, %struct.zip_error* %5)
  ret %struct.zip_source* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @_zip_source_window_new(%struct.zip_source*, i64, i64, %struct.zip_stat*, %struct.zip_file_attributes* readonly, %struct.zip*, i64, %struct.zip_error*) local_unnamed_addr #0 {
  %9 = icmp eq %struct.zip_source* %0, null
  br i1 %9, label %17, label %10

10:                                               ; preds = %8
  %11 = add i64 %2, %1
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %17, label %13

13:                                               ; preds = %10
  %14 = icmp eq %struct.zip* %5, null
  %15 = icmp ne i64 %6, 0
  %16 = and i1 %14, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %13, %10, %8
  tail call void @zip_error_set(%struct.zip_error* %7, i32 18, i32 0) #6
  br label %58

18:                                               ; preds = %13
  %19 = tail call noalias i8* @malloc(i64 160) #6
  %20 = icmp eq i8* %19, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  tail call void @zip_error_set(%struct.zip_error* %7, i32 14, i32 0) #6
  br label %58

22:                                               ; preds = %18
  %23 = bitcast i8* %19 to i64*
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds i8, i8* %19, i64 8
  %25 = bitcast i8* %24 to i64*
  store i64 %11, i64* %25, align 8
  %26 = getelementptr inbounds i8, i8* %19, i64 40
  %27 = bitcast i8* %26 to %struct.zip_stat*
  tail call void @zip_stat_init(%struct.zip_stat* %27) #6
  %28 = icmp eq %struct.zip_file_attributes* %4, null
  %29 = getelementptr inbounds i8, i8* %19, i64 104
  br i1 %28, label %32, label %30

30:                                               ; preds = %22
  %31 = bitcast %struct.zip_file_attributes* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* nonnull align 8 %31, i64 24, i1 false)
  br label %34

32:                                               ; preds = %22
  %33 = bitcast i8* %29 to %struct.zip_file_attributes*
  tail call void @zip_file_attributes_init(%struct.zip_file_attributes* %33) #6
  br label %34

34:                                               ; preds = %32, %30
  %35 = getelementptr inbounds i8, i8* %19, i64 16
  %36 = bitcast i8* %35 to %struct.zip**
  store %struct.zip* %5, %struct.zip** %36, align 8
  %37 = getelementptr inbounds i8, i8* %19, i64 24
  %38 = bitcast i8* %37 to i64*
  store i64 %6, i64* %38, align 8
  %39 = getelementptr inbounds i8, i8* %19, i64 128
  %40 = bitcast i8* %39 to %struct.zip_error*
  tail call void @zip_error_init(%struct.zip_error* %40) #6
  %41 = tail call i64 @zip_source_supports(%struct.zip_source* nonnull %0) #6
  %42 = and i64 %41, 16639
  %43 = tail call i64 (i32, ...) @zip_source_make_command_bitmap(i32 19, i32 14, i32 7, i32 -1) #6
  %44 = or i64 %42, %43
  %45 = getelementptr inbounds i8, i8* %19, i64 144
  %46 = bitcast i8* %45 to i64*
  store i64 %44, i64* %46, align 8
  %47 = getelementptr inbounds i8, i8* %19, i64 152
  %48 = lshr i64 %44, 6
  %49 = trunc i64 %48 to i8
  %50 = and i8 %49, 1
  store i8 %50, i8* %47, align 8
  %51 = icmp eq %struct.zip_stat* %3, null
  br i1 %51, label %56, label %52

52:                                               ; preds = %34
  %53 = tail call i32 @_zip_stat_merge(%struct.zip_stat* %27, %struct.zip_stat* nonnull %3, %struct.zip_error* %7) #6
  %54 = icmp slt i32 %53, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  tail call void @free(i8* nonnull %19) #6
  br label %58

56:                                               ; preds = %34, %52
  %57 = tail call %struct.zip_source* @zip_source_layered_create(%struct.zip_source* nonnull %0, i64 (%struct.zip_source*, i8*, i8*, i64, i32)* nonnull @window_read, i8* nonnull %19, %struct.zip_error* %7) #6
  br label %58

58:                                               ; preds = %56, %55, %21, %17
  %59 = phi %struct.zip_source* [ null, %17 ], [ null, %21 ], [ null, %55 ], [ %57, %56 ]
  ret %struct.zip_source* %59
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #3

declare void @zip_stat_init(%struct.zip_stat*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @zip_file_attributes_init(%struct.zip_file_attributes*) local_unnamed_addr #2

declare void @zip_error_init(%struct.zip_error*) local_unnamed_addr #2

declare i64 @zip_source_supports(%struct.zip_source*) local_unnamed_addr #2

declare i64 @zip_source_make_command_bitmap(i32, ...) local_unnamed_addr #2

declare i32 @_zip_stat_merge(%struct.zip_stat*, %struct.zip_stat*, %struct.zip_error*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

declare %struct.zip_source* @zip_source_layered_create(%struct.zip_source*, i64 (%struct.zip_source*, i8*, i8*, i64, i32)*, i8*, %struct.zip_error*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i64 @window_read(%struct.zip_source*, i8*, i8*, i64, i32) #0 {
  %6 = alloca [8192 x i8], align 16
  switch i32 %4, label %157 [
    i32 2, label %160
    i32 4, label %7
    i32 5, label %11
    i32 0, label %12
    i32 1, label %75
    i32 6, label %112
    i32 3, label %130
    i32 19, label %139
    i32 14, label %146
    i32 7, label %150
  ]

7:                                                ; preds = %5
  %8 = getelementptr inbounds i8, i8* %1, i64 128
  %9 = bitcast i8* %8 to %struct.zip_error*
  %10 = tail call i64 @zip_error_to_data(%struct.zip_error* %9, i8* %2, i64 %3) #6
  br label %160

11:                                               ; preds = %5
  tail call void @free(i8* %1) #6
  br label %160

12:                                               ; preds = %5
  %13 = getelementptr inbounds i8, i8* %1, i64 16
  %14 = bitcast i8* %13 to %struct.zip**
  %15 = load %struct.zip*, %struct.zip** %14, align 8
  %16 = icmp eq %struct.zip* %15, null
  br i1 %16, label %37, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds i8, i8* %1, i64 24
  %19 = bitcast i8* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds i8, i8* %1, i64 128
  %22 = bitcast i8* %21 to %struct.zip_error*
  %23 = tail call i64 @_zip_file_get_offset(%struct.zip* nonnull %15, i64 %20, %struct.zip_error* %22) #6
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %160, label %25

25:                                               ; preds = %17
  %26 = getelementptr inbounds i8, i8* %1, i64 8
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = xor i64 %28, -1
  %30 = icmp ugt i64 %23, %29
  br i1 %30, label %31, label %32

31:                                               ; preds = %25
  tail call void @zip_error_set(%struct.zip_error* %22, i32 21, i32 0) #6
  br label %160

32:                                               ; preds = %25
  %33 = bitcast i8* %1 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = add i64 %34, %23
  store i64 %35, i64* %33, align 8
  %36 = add i64 %28, %23
  store i64 %36, i64* %27, align 8
  store %struct.zip* null, %struct.zip** %14, align 8
  br label %37

37:                                               ; preds = %32, %12
  %38 = getelementptr inbounds i8, i8* %1, i64 152
  %39 = load i8, i8* %38, align 8, !range !2
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %37
  %42 = bitcast i8* %1 to i64*
  %43 = load i64, i64* %42, align 8
  br label %71

44:                                               ; preds = %37
  %45 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %45) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 -86, i64 8192, i1 false)
  %46 = bitcast i8* %1 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %69, label %52

49:                                               ; preds = %63
  %50 = load i64, i64* %46, align 8
  %51 = icmp ugt i64 %50, %65
  br i1 %51, label %52, label %69

52:                                               ; preds = %44, %49
  %53 = phi i64 [ %50, %49 ], [ %47, %44 ]
  %54 = phi i64 [ %65, %49 ], [ 0, %44 ]
  %55 = sub i64 %53, %54
  %56 = icmp ult i64 %55, 8192
  %57 = select i1 %56, i64 %55, i64 8192
  %58 = call i64 @zip_source_read(%struct.zip_source* %0, i8* nonnull %45, i64 %57) #6
  %59 = icmp slt i64 %58, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %52
  %61 = getelementptr inbounds i8, i8* %1, i64 128
  %62 = bitcast i8* %61 to %struct.zip_error*
  call void @_zip_error_set_from_source(%struct.zip_error* %62, %struct.zip_source* %0) #6
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %45) #6
  br label %160

63:                                               ; preds = %52
  %64 = icmp eq i64 %58, 0
  %65 = add i64 %58, %54
  br i1 %64, label %66, label %49

66:                                               ; preds = %63
  %67 = getelementptr inbounds i8, i8* %1, i64 128
  %68 = bitcast i8* %67 to %struct.zip_error*
  call void @zip_error_set(%struct.zip_error* %68, i32 17, i32 0) #6
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %45) #6
  br label %160

69:                                               ; preds = %49, %44
  %70 = phi i64 [ 0, %44 ], [ %50, %49 ]
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %45) #6
  br label %71

71:                                               ; preds = %41, %69
  %72 = phi i64 [ %43, %41 ], [ %70, %69 ]
  %73 = getelementptr inbounds i8, i8* %1, i64 32
  %74 = bitcast i8* %73 to i64*
  store i64 %72, i64* %74, align 8
  br label %160

75:                                               ; preds = %5
  %76 = getelementptr inbounds i8, i8* %1, i64 8
  %77 = bitcast i8* %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds i8, i8* %1, i64 32
  %80 = bitcast i8* %79 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = sub i64 %78, %81
  %83 = icmp ult i64 %82, %3
  %84 = select i1 %83, i64 %82, i64 %3
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %160, label %86

86:                                               ; preds = %75
  %87 = getelementptr inbounds i8, i8* %1, i64 152
  %88 = load i8, i8* %87, align 8, !range !2
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %96, label %90

90:                                               ; preds = %86
  %91 = tail call i32 @zip_source_seek(%struct.zip_source* %0, i64 %81, i32 0) #6
  %92 = icmp slt i32 %91, 0
  br i1 %92, label %93, label %96

93:                                               ; preds = %90
  %94 = getelementptr inbounds i8, i8* %1, i64 128
  %95 = bitcast i8* %94 to %struct.zip_error*
  tail call void @_zip_error_set_from_source(%struct.zip_error* %95, %struct.zip_source* %0) #6
  br label %160

96:                                               ; preds = %86, %90
  %97 = tail call i64 @zip_source_read(%struct.zip_source* %0, i8* %2, i64 %84) #6
  %98 = icmp slt i64 %97, 0
  br i1 %98, label %99, label %102

99:                                               ; preds = %96
  %100 = getelementptr inbounds i8, i8* %1, i64 128
  %101 = bitcast i8* %100 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %101, i32 17, i32 0) #6
  br label %160

102:                                              ; preds = %96
  %103 = load i64, i64* %80, align 8
  %104 = add i64 %103, %97
  store i64 %104, i64* %80, align 8
  %105 = icmp eq i64 %97, 0
  br i1 %105, label %106, label %160

106:                                              ; preds = %102
  %107 = load i64, i64* %77, align 8
  %108 = icmp ult i64 %104, %107
  br i1 %108, label %109, label %160

109:                                              ; preds = %106
  %110 = getelementptr inbounds i8, i8* %1, i64 128
  %111 = bitcast i8* %110 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %111, i32 17, i32 0) #6
  br label %160

112:                                              ; preds = %5
  %113 = getelementptr inbounds i8, i8* %1, i64 32
  %114 = bitcast i8* %113 to i64*
  %115 = load i64, i64* %114, align 8
  %116 = bitcast i8* %1 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = sub i64 %115, %117
  %119 = getelementptr inbounds i8, i8* %1, i64 8
  %120 = bitcast i8* %119 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = sub i64 %121, %117
  %123 = getelementptr inbounds i8, i8* %1, i64 128
  %124 = bitcast i8* %123 to %struct.zip_error*
  %125 = tail call i64 @zip_source_seek_compute_offset(i64 %118, i64 %122, i8* %2, i64 %3, %struct.zip_error* %124) #6
  %126 = icmp slt i64 %125, 0
  br i1 %126, label %160, label %127

127:                                              ; preds = %112
  %128 = load i64, i64* %116, align 8
  %129 = add i64 %128, %125
  store i64 %129, i64* %114, align 8
  br label %160

130:                                              ; preds = %5
  %131 = bitcast i8* %2 to %struct.zip_stat*
  %132 = getelementptr inbounds i8, i8* %1, i64 40
  %133 = bitcast i8* %132 to %struct.zip_stat*
  %134 = getelementptr inbounds i8, i8* %1, i64 128
  %135 = bitcast i8* %134 to %struct.zip_error*
  %136 = tail call i32 @_zip_stat_merge(%struct.zip_stat* %131, %struct.zip_stat* %133, %struct.zip_error* %135) #6
  %137 = ashr i32 %136, 31
  %138 = sext i32 %137 to i64
  br label %160

139:                                              ; preds = %5
  %140 = icmp ult i64 %3, 24
  br i1 %140, label %141, label %144

141:                                              ; preds = %139
  %142 = getelementptr inbounds i8, i8* %1, i64 128
  %143 = bitcast i8* %142 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %143, i32 18, i32 0) #6
  br label %160

144:                                              ; preds = %139
  %145 = getelementptr inbounds i8, i8* %1, i64 104
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 8 %145, i64 24, i1 false)
  br label %160

146:                                              ; preds = %5
  %147 = getelementptr inbounds i8, i8* %1, i64 144
  %148 = bitcast i8* %147 to i64*
  %149 = load i64, i64* %148, align 8
  br label %160

150:                                              ; preds = %5
  %151 = getelementptr inbounds i8, i8* %1, i64 32
  %152 = bitcast i8* %151 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = bitcast i8* %1 to i64*
  %155 = load i64, i64* %154, align 8
  %156 = sub i64 %153, %155
  br label %160

157:                                              ; preds = %5
  %158 = getelementptr inbounds i8, i8* %1, i64 128
  %159 = bitcast i8* %158 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %159, i32 28, i32 0) #6
  br label %160

160:                                              ; preds = %127, %112, %102, %106, %75, %66, %60, %17, %31, %5, %157, %150, %146, %144, %141, %130, %109, %99, %93, %71, %11, %7
  %161 = phi i64 [ -1, %157 ], [ %156, %150 ], [ %149, %146 ], [ -1, %141 ], [ 24, %144 ], [ %138, %130 ], [ -1, %93 ], [ -1, %99 ], [ -1, %109 ], [ 0, %71 ], [ 0, %11 ], [ %10, %7 ], [ 0, %5 ], [ -1, %31 ], [ -1, %17 ], [ -1, %60 ], [ -1, %66 ], [ 0, %75 ], [ 0, %106 ], [ %97, %102 ], [ 0, %127 ], [ -1, %112 ]
  ret i64 %161
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_zip_source_set_source_archive(%struct.zip_source*, %struct.zip*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 8
  store %struct.zip* %1, %struct.zip** %3, align 8
  %4 = getelementptr inbounds %struct.zip, %struct.zip* %1, i64 0, i32 12
  %5 = load i32, i32* %4, align 8
  %6 = add i32 %5, 1
  %7 = getelementptr inbounds %struct.zip, %struct.zip* %1, i64 0, i32 13
  %8 = load i32, i32* %7, align 4
  %9 = icmp ult i32 %6, %8
  br i1 %9, label %10, label %13

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.zip, %struct.zip* %1, i64 0, i32 14
  %12 = load %struct.zip_source**, %struct.zip_source*** %11, align 8
  br label %28

13:                                               ; preds = %2
  %14 = add i32 %8, 10
  %15 = getelementptr inbounds %struct.zip, %struct.zip* %1, i64 0, i32 14
  %16 = bitcast %struct.zip_source*** %15 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = zext i32 %14 to i64
  %19 = shl nuw nsw i64 %18, 3
  %20 = tail call i8* @realloc(i8* %17, i64 %19) #6
  %21 = icmp eq i8* %20, null
  br i1 %21, label %22, label %24

22:                                               ; preds = %13
  %23 = getelementptr inbounds %struct.zip, %struct.zip* %1, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %23, i32 14, i32 0) #6
  br label %34

24:                                               ; preds = %13
  store i32 %14, i32* %7, align 4
  store i8* %20, i8** %16, align 8
  %25 = bitcast i8* %20 to %struct.zip_source**
  %26 = load i32, i32* %4, align 8
  %27 = add i32 %26, 1
  br label %28

28:                                               ; preds = %24, %10
  %29 = phi i32 [ %6, %10 ], [ %27, %24 ]
  %30 = phi i32 [ %5, %10 ], [ %26, %24 ]
  %31 = phi %struct.zip_source** [ %12, %10 ], [ %25, %24 ]
  store i32 %29, i32* %4, align 8
  %32 = zext i32 %30 to i64
  %33 = getelementptr inbounds %struct.zip_source*, %struct.zip_source** %31, i64 %32
  store %struct.zip_source* %0, %struct.zip_source** %33, align 8
  br label %34

34:                                               ; preds = %22, %28
  %35 = phi i32 [ 0, %28 ], [ -1, %22 ]
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_zip_register_source(%struct.zip*, %struct.zip_source*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 12
  %4 = load i32, i32* %3, align 8
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 13
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %5, %7
  br i1 %8, label %9, label %12

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 14
  %11 = load %struct.zip_source**, %struct.zip_source*** %10, align 8
  br label %27

12:                                               ; preds = %2
  %13 = add i32 %7, 10
  %14 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 14
  %15 = bitcast %struct.zip_source*** %14 to i8**
  %16 = load i8*, i8** %15, align 8
  %17 = zext i32 %13 to i64
  %18 = shl nuw nsw i64 %17, 3
  %19 = tail call i8* @realloc(i8* %16, i64 %18) #6
  %20 = icmp eq i8* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %12
  %22 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %22, i32 14, i32 0) #6
  br label %33

23:                                               ; preds = %12
  store i32 %13, i32* %6, align 4
  store i8* %19, i8** %15, align 8
  %24 = bitcast i8* %19 to %struct.zip_source**
  %25 = load i32, i32* %3, align 8
  %26 = add i32 %25, 1
  br label %27

27:                                               ; preds = %9, %23
  %28 = phi i32 [ %5, %9 ], [ %26, %23 ]
  %29 = phi i32 [ %4, %9 ], [ %25, %23 ]
  %30 = phi %struct.zip_source** [ %11, %9 ], [ %24, %23 ]
  store i32 %28, i32* %3, align 8
  %31 = zext i32 %29 to i64
  %32 = getelementptr inbounds %struct.zip_source*, %struct.zip_source** %30, i64 %31
  store %struct.zip_source* %1, %struct.zip_source** %32, align 8
  br label %33

33:                                               ; preds = %21, %27
  %34 = phi i32 [ 0, %27 ], [ -1, %21 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_zip_source_invalidate(%struct.zip_source*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 7
  store i8 1, i8* %2, align 8
  %3 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 3
  %4 = tail call i32 @zip_error_code_zip(%struct.zip_error* %3) #6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  tail call void @zip_error_set(%struct.zip_error* %3, i32 8, i32 0) #6
  br label %7

7:                                                ; preds = %6, %1
  ret void
}

declare i32 @zip_error_code_zip(%struct.zip_error*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_zip_deregister_source(%struct.zip* nocapture, %struct.zip_source* readnone) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 12
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %29, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 14
  %8 = load %struct.zip_source**, %struct.zip_source*** %7, align 8
  %9 = zext i32 %4 to i64
  br label %12

10:                                               ; preds = %12
  %11 = icmp ult i64 %17, %9
  br i1 %11, label %12, label %29

12:                                               ; preds = %6, %10
  %13 = phi i64 [ 0, %6 ], [ %17, %10 ]
  %14 = getelementptr inbounds %struct.zip_source*, %struct.zip_source** %8, i64 %13
  %15 = load %struct.zip_source*, %struct.zip_source** %14, align 8
  %16 = icmp eq %struct.zip_source* %15, %1
  %17 = add nuw nsw i64 %13, 1
  br i1 %16, label %18, label %10

18:                                               ; preds = %12
  %19 = and i64 %13, 4294967295
  %20 = getelementptr inbounds %struct.zip_source*, %struct.zip_source** %8, i64 %19
  %21 = add i32 %4, -1
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.zip_source*, %struct.zip_source** %8, i64 %22
  %24 = bitcast %struct.zip_source** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %struct.zip_source** %20 to i64*
  store i64 %25, i64* %26, align 8
  %27 = load i32, i32* %3, align 8
  %28 = add i32 %27, -1
  store i32 %28, i32* %3, align 8
  br label %29

29:                                               ; preds = %10, %2, %18
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #4

declare i64 @zip_error_to_data(%struct.zip_error*, i8*, i64) local_unnamed_addr #2

declare i64 @_zip_file_get_offset(%struct.zip*, i64, %struct.zip_error*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i64 @zip_source_read(%struct.zip_source*, i8*, i64) local_unnamed_addr #2

declare void @_zip_error_set_from_source(%struct.zip_error*, %struct.zip_source*) local_unnamed_addr #2

declare i32 @zip_source_seek(%struct.zip_source*, i64, i32) local_unnamed_addr #2

declare i64 @zip_source_seek_compute_offset(i64, i64, i8*, i64, %struct.zip_error*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
