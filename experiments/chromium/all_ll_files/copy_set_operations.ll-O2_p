; ModuleID = '../../third_party/webrtc/common_audio/signal_processing/copy_set_operations.c'
source_filename = "../../third_party/webrtc/common_audio/signal_processing/copy_set_operations.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @WebRtcSpl_MemSetW16(i16* nocapture, i16 signext, i64) local_unnamed_addr #0 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %91, label %5

5:                                                ; preds = %3
  %6 = icmp ult i64 %2, 16
  br i1 %6, label %82, label %7

7:                                                ; preds = %5
  %8 = and i64 %2, -16
  %9 = getelementptr i16, i16* %0, i64 %8
  %10 = sub i64 %2, %8
  %11 = insertelement <8 x i16> undef, i16 %1, i32 0
  %12 = shufflevector <8 x i16> %11, <8 x i16> undef, <8 x i32> zeroinitializer
  %13 = insertelement <8 x i16> undef, i16 %1, i32 0
  %14 = shufflevector <8 x i16> %13, <8 x i16> undef, <8 x i32> zeroinitializer
  %15 = add i64 %8, -16
  %16 = lshr exact i64 %15, 4
  %17 = add nuw nsw i64 %16, 1
  %18 = and i64 %17, 7
  %19 = icmp ult i64 %15, 112
  br i1 %19, label %67, label %20

20:                                               ; preds = %7
  %21 = sub nsw i64 %17, %18
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i64 [ 0, %20 ], [ %64, %22 ]
  %24 = phi i64 [ %21, %20 ], [ %65, %22 ]
  %25 = getelementptr i16, i16* %0, i64 %23
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %12, <8 x i16>* %26, align 2
  %27 = getelementptr i16, i16* %25, i64 8
  %28 = bitcast i16* %27 to <8 x i16>*
  store <8 x i16> %14, <8 x i16>* %28, align 2
  %29 = or i64 %23, 16
  %30 = getelementptr i16, i16* %0, i64 %29
  %31 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> %12, <8 x i16>* %31, align 2
  %32 = getelementptr i16, i16* %30, i64 8
  %33 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> %14, <8 x i16>* %33, align 2
  %34 = or i64 %23, 32
  %35 = getelementptr i16, i16* %0, i64 %34
  %36 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> %12, <8 x i16>* %36, align 2
  %37 = getelementptr i16, i16* %35, i64 8
  %38 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %14, <8 x i16>* %38, align 2
  %39 = or i64 %23, 48
  %40 = getelementptr i16, i16* %0, i64 %39
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> %12, <8 x i16>* %41, align 2
  %42 = getelementptr i16, i16* %40, i64 8
  %43 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> %14, <8 x i16>* %43, align 2
  %44 = or i64 %23, 64
  %45 = getelementptr i16, i16* %0, i64 %44
  %46 = bitcast i16* %45 to <8 x i16>*
  store <8 x i16> %12, <8 x i16>* %46, align 2
  %47 = getelementptr i16, i16* %45, i64 8
  %48 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %14, <8 x i16>* %48, align 2
  %49 = or i64 %23, 80
  %50 = getelementptr i16, i16* %0, i64 %49
  %51 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> %12, <8 x i16>* %51, align 2
  %52 = getelementptr i16, i16* %50, i64 8
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %14, <8 x i16>* %53, align 2
  %54 = or i64 %23, 96
  %55 = getelementptr i16, i16* %0, i64 %54
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %12, <8 x i16>* %56, align 2
  %57 = getelementptr i16, i16* %55, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %14, <8 x i16>* %58, align 2
  %59 = or i64 %23, 112
  %60 = getelementptr i16, i16* %0, i64 %59
  %61 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %12, <8 x i16>* %61, align 2
  %62 = getelementptr i16, i16* %60, i64 8
  %63 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %14, <8 x i16>* %63, align 2
  %64 = add i64 %23, 128
  %65 = add i64 %24, -8
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %22, !llvm.loop !2

67:                                               ; preds = %22, %7
  %68 = phi i64 [ 0, %7 ], [ %64, %22 ]
  %69 = icmp eq i64 %18, 0
  br i1 %69, label %80, label %70

70:                                               ; preds = %67, %70
  %71 = phi i64 [ %77, %70 ], [ %68, %67 ]
  %72 = phi i64 [ %78, %70 ], [ %18, %67 ]
  %73 = getelementptr i16, i16* %0, i64 %71
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %12, <8 x i16>* %74, align 2
  %75 = getelementptr i16, i16* %73, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %14, <8 x i16>* %76, align 2
  %77 = add i64 %71, 16
  %78 = add i64 %72, -1
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %80, label %70, !llvm.loop !4

80:                                               ; preds = %70, %67
  %81 = icmp eq i64 %8, %2
  br i1 %81, label %91, label %82

82:                                               ; preds = %80, %5
  %83 = phi i16* [ %0, %5 ], [ %9, %80 ]
  %84 = phi i64 [ %2, %5 ], [ %10, %80 ]
  br label %85

85:                                               ; preds = %82, %85
  %86 = phi i16* [ %88, %85 ], [ %83, %82 ]
  %87 = phi i64 [ %89, %85 ], [ %84, %82 ]
  %88 = getelementptr inbounds i16, i16* %86, i64 1
  store i16 %1, i16* %86, align 2
  %89 = add i64 %87, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %85, !llvm.loop !6

91:                                               ; preds = %85, %80, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @WebRtcSpl_MemSetW32(i32* nocapture, i32, i64) local_unnamed_addr #0 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %91, label %5

5:                                                ; preds = %3
  %6 = icmp ult i64 %2, 8
  br i1 %6, label %82, label %7

7:                                                ; preds = %5
  %8 = and i64 %2, -8
  %9 = getelementptr i32, i32* %0, i64 %8
  %10 = sub i64 %2, %8
  %11 = insertelement <4 x i32> undef, i32 %1, i32 0
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> zeroinitializer
  %13 = insertelement <4 x i32> undef, i32 %1, i32 0
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> zeroinitializer
  %15 = add i64 %8, -8
  %16 = lshr exact i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = and i64 %17, 7
  %19 = icmp ult i64 %15, 56
  br i1 %19, label %67, label %20

20:                                               ; preds = %7
  %21 = sub nsw i64 %17, %18
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i64 [ 0, %20 ], [ %64, %22 ]
  %24 = phi i64 [ %21, %20 ], [ %65, %22 ]
  %25 = getelementptr i32, i32* %0, i64 %23
  %26 = bitcast i32* %25 to <4 x i32>*
  store <4 x i32> %12, <4 x i32>* %26, align 4
  %27 = getelementptr i32, i32* %25, i64 4
  %28 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> %14, <4 x i32>* %28, align 4
  %29 = or i64 %23, 8
  %30 = getelementptr i32, i32* %0, i64 %29
  %31 = bitcast i32* %30 to <4 x i32>*
  store <4 x i32> %12, <4 x i32>* %31, align 4
  %32 = getelementptr i32, i32* %30, i64 4
  %33 = bitcast i32* %32 to <4 x i32>*
  store <4 x i32> %14, <4 x i32>* %33, align 4
  %34 = or i64 %23, 16
  %35 = getelementptr i32, i32* %0, i64 %34
  %36 = bitcast i32* %35 to <4 x i32>*
  store <4 x i32> %12, <4 x i32>* %36, align 4
  %37 = getelementptr i32, i32* %35, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  store <4 x i32> %14, <4 x i32>* %38, align 4
  %39 = or i64 %23, 24
  %40 = getelementptr i32, i32* %0, i64 %39
  %41 = bitcast i32* %40 to <4 x i32>*
  store <4 x i32> %12, <4 x i32>* %41, align 4
  %42 = getelementptr i32, i32* %40, i64 4
  %43 = bitcast i32* %42 to <4 x i32>*
  store <4 x i32> %14, <4 x i32>* %43, align 4
  %44 = or i64 %23, 32
  %45 = getelementptr i32, i32* %0, i64 %44
  %46 = bitcast i32* %45 to <4 x i32>*
  store <4 x i32> %12, <4 x i32>* %46, align 4
  %47 = getelementptr i32, i32* %45, i64 4
  %48 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> %14, <4 x i32>* %48, align 4
  %49 = or i64 %23, 40
  %50 = getelementptr i32, i32* %0, i64 %49
  %51 = bitcast i32* %50 to <4 x i32>*
  store <4 x i32> %12, <4 x i32>* %51, align 4
  %52 = getelementptr i32, i32* %50, i64 4
  %53 = bitcast i32* %52 to <4 x i32>*
  store <4 x i32> %14, <4 x i32>* %53, align 4
  %54 = or i64 %23, 48
  %55 = getelementptr i32, i32* %0, i64 %54
  %56 = bitcast i32* %55 to <4 x i32>*
  store <4 x i32> %12, <4 x i32>* %56, align 4
  %57 = getelementptr i32, i32* %55, i64 4
  %58 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> %14, <4 x i32>* %58, align 4
  %59 = or i64 %23, 56
  %60 = getelementptr i32, i32* %0, i64 %59
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> %12, <4 x i32>* %61, align 4
  %62 = getelementptr i32, i32* %60, i64 4
  %63 = bitcast i32* %62 to <4 x i32>*
  store <4 x i32> %14, <4 x i32>* %63, align 4
  %64 = add i64 %23, 64
  %65 = add i64 %24, -8
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %22, !llvm.loop !8

67:                                               ; preds = %22, %7
  %68 = phi i64 [ 0, %7 ], [ %64, %22 ]
  %69 = icmp eq i64 %18, 0
  br i1 %69, label %80, label %70

70:                                               ; preds = %67, %70
  %71 = phi i64 [ %77, %70 ], [ %68, %67 ]
  %72 = phi i64 [ %78, %70 ], [ %18, %67 ]
  %73 = getelementptr i32, i32* %0, i64 %71
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> %12, <4 x i32>* %74, align 4
  %75 = getelementptr i32, i32* %73, i64 4
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> %14, <4 x i32>* %76, align 4
  %77 = add i64 %71, 8
  %78 = add i64 %72, -1
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %80, label %70, !llvm.loop !9

80:                                               ; preds = %70, %67
  %81 = icmp eq i64 %8, %2
  br i1 %81, label %91, label %82

82:                                               ; preds = %80, %5
  %83 = phi i32* [ %0, %5 ], [ %9, %80 ]
  %84 = phi i64 [ %2, %5 ], [ %10, %80 ]
  br label %85

85:                                               ; preds = %82, %85
  %86 = phi i32* [ %88, %85 ], [ %83, %82 ]
  %87 = phi i64 [ %89, %85 ], [ %84, %82 ]
  %88 = getelementptr inbounds i32, i32* %86, i64 1
  store i32 %1, i32* %86, align 4
  %89 = add i64 %87, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %85, !llvm.loop !10

91:                                               ; preds = %85, %80, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebRtcSpl_MemCpyReversedOrder(i16* nocapture, i16* nocapture readonly, i64) local_unnamed_addr #1 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %139, label %5

5:                                                ; preds = %3
  %6 = icmp ult i64 %2, 16
  br i1 %6, label %85, label %7

7:                                                ; preds = %5
  %8 = sub i64 1, %2
  %9 = getelementptr i16, i16* %0, i64 %8
  %10 = getelementptr i16, i16* %0, i64 1
  %11 = getelementptr i16, i16* %1, i64 %2
  %12 = icmp ult i16* %9, %11
  %13 = icmp ugt i16* %10, %1
  %14 = and i1 %12, %13
  br i1 %14, label %85, label %15

15:                                               ; preds = %7
  %16 = and i64 %2, -16
  %17 = getelementptr i16, i16* %1, i64 %16
  %18 = sub i64 0, %16
  %19 = getelementptr i16, i16* %0, i64 %18
  %20 = add i64 %16, -16
  %21 = lshr exact i64 %20, 4
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 1
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %64, label %25

25:                                               ; preds = %15
  %26 = sub nuw nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %61, %27 ]
  %29 = phi i64 [ %26, %25 ], [ %62, %27 ]
  %30 = getelementptr i16, i16* %1, i64 %28
  %31 = sub i64 0, %28
  %32 = getelementptr i16, i16* %0, i64 %31
  %33 = bitcast i16* %30 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 2, !alias.scope !11
  %35 = getelementptr i16, i16* %30, i64 8
  %36 = bitcast i16* %35 to <8 x i16>*
  %37 = load <8 x i16>, <8 x i16>* %36, align 2, !alias.scope !11
  %38 = shufflevector <8 x i16> %34, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %39 = getelementptr i16, i16* %32, i64 -7
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %38, <8 x i16>* %40, align 2, !alias.scope !14, !noalias !11
  %41 = shufflevector <8 x i16> %37, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %42 = getelementptr i16, i16* %32, i64 -8
  %43 = getelementptr i16, i16* %42, i64 -7
  %44 = bitcast i16* %43 to <8 x i16>*
  store <8 x i16> %41, <8 x i16>* %44, align 2, !alias.scope !14, !noalias !11
  %45 = or i64 %28, 16
  %46 = getelementptr i16, i16* %1, i64 %45
  %47 = sub nuw nsw i64 -16, %28
  %48 = getelementptr i16, i16* %0, i64 %47
  %49 = bitcast i16* %46 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !11
  %51 = getelementptr i16, i16* %46, i64 8
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !11
  %54 = shufflevector <8 x i16> %50, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %55 = getelementptr i16, i16* %48, i64 -7
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %56, align 2, !alias.scope !14, !noalias !11
  %57 = shufflevector <8 x i16> %53, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %58 = getelementptr i16, i16* %48, i64 -8
  %59 = getelementptr i16, i16* %58, i64 -7
  %60 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> %57, <8 x i16>* %60, align 2, !alias.scope !14, !noalias !11
  %61 = add i64 %28, 32
  %62 = add i64 %29, -2
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %27, !llvm.loop !16

64:                                               ; preds = %27, %15
  %65 = phi i64 [ 0, %15 ], [ %61, %27 ]
  %66 = icmp eq i64 %23, 0
  br i1 %66, label %83, label %67

67:                                               ; preds = %64
  %68 = getelementptr i16, i16* %1, i64 %65
  %69 = sub i64 0, %65
  %70 = getelementptr i16, i16* %0, i64 %69
  %71 = bitcast i16* %68 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !11
  %73 = getelementptr i16, i16* %68, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !11
  %76 = shufflevector <8 x i16> %72, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %77 = getelementptr i16, i16* %70, i64 -7
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %78, align 2, !alias.scope !14, !noalias !11
  %79 = shufflevector <8 x i16> %75, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %80 = getelementptr i16, i16* %70, i64 -8
  %81 = getelementptr i16, i16* %80, i64 -7
  %82 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %82, align 2, !alias.scope !14, !noalias !11
  br label %83

83:                                               ; preds = %64, %67
  %84 = icmp eq i64 %16, %2
  br i1 %84, label %139, label %85

85:                                               ; preds = %83, %7, %5
  %86 = phi i16* [ %1, %7 ], [ %1, %5 ], [ %17, %83 ]
  %87 = phi i16* [ %0, %7 ], [ %0, %5 ], [ %19, %83 ]
  %88 = phi i64 [ 0, %7 ], [ 0, %5 ], [ %16, %83 ]
  %89 = xor i64 %88, -1
  %90 = add i64 %89, %2
  %91 = and i64 %2, 7
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %104, label %93

93:                                               ; preds = %85, %93
  %94 = phi i16* [ %98, %93 ], [ %86, %85 ]
  %95 = phi i16* [ %100, %93 ], [ %87, %85 ]
  %96 = phi i64 [ %101, %93 ], [ %88, %85 ]
  %97 = phi i64 [ %102, %93 ], [ %91, %85 ]
  %98 = getelementptr inbounds i16, i16* %94, i64 1
  %99 = load i16, i16* %94, align 2
  %100 = getelementptr inbounds i16, i16* %95, i64 -1
  store i16 %99, i16* %95, align 2
  %101 = add nuw i64 %96, 1
  %102 = add i64 %97, -1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %93, !llvm.loop !17

104:                                              ; preds = %93, %85
  %105 = phi i16* [ %86, %85 ], [ %98, %93 ]
  %106 = phi i16* [ %87, %85 ], [ %100, %93 ]
  %107 = phi i64 [ %88, %85 ], [ %101, %93 ]
  %108 = icmp ult i64 %90, 7
  br i1 %108, label %139, label %109

109:                                              ; preds = %104, %109
  %110 = phi i16* [ %134, %109 ], [ %105, %104 ]
  %111 = phi i16* [ %136, %109 ], [ %106, %104 ]
  %112 = phi i64 [ %137, %109 ], [ %107, %104 ]
  %113 = getelementptr inbounds i16, i16* %110, i64 1
  %114 = load i16, i16* %110, align 2
  %115 = getelementptr inbounds i16, i16* %111, i64 -1
  store i16 %114, i16* %111, align 2
  %116 = getelementptr inbounds i16, i16* %110, i64 2
  %117 = load i16, i16* %113, align 2
  %118 = getelementptr inbounds i16, i16* %111, i64 -2
  store i16 %117, i16* %115, align 2
  %119 = getelementptr inbounds i16, i16* %110, i64 3
  %120 = load i16, i16* %116, align 2
  %121 = getelementptr inbounds i16, i16* %111, i64 -3
  store i16 %120, i16* %118, align 2
  %122 = getelementptr inbounds i16, i16* %110, i64 4
  %123 = load i16, i16* %119, align 2
  %124 = getelementptr inbounds i16, i16* %111, i64 -4
  store i16 %123, i16* %121, align 2
  %125 = getelementptr inbounds i16, i16* %110, i64 5
  %126 = load i16, i16* %122, align 2
  %127 = getelementptr inbounds i16, i16* %111, i64 -5
  store i16 %126, i16* %124, align 2
  %128 = getelementptr inbounds i16, i16* %110, i64 6
  %129 = load i16, i16* %125, align 2
  %130 = getelementptr inbounds i16, i16* %111, i64 -6
  store i16 %129, i16* %127, align 2
  %131 = getelementptr inbounds i16, i16* %110, i64 7
  %132 = load i16, i16* %128, align 2
  %133 = getelementptr inbounds i16, i16* %111, i64 -7
  store i16 %132, i16* %130, align 2
  %134 = getelementptr inbounds i16, i16* %110, i64 8
  %135 = load i16, i16* %131, align 2
  %136 = getelementptr inbounds i16, i16* %111, i64 -8
  store i16 %135, i16* %133, align 2
  %137 = add nuw i64 %112, 8
  %138 = icmp eq i64 %137, %2
  br i1 %138, label %139, label %109, !llvm.loop !18

139:                                              ; preds = %104, %109, %83, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcSpl_CopyFromEndW16(i16* nocapture readonly, i64, i64, i16* nocapture) local_unnamed_addr #2 {
  %5 = bitcast i16* %3 to i8*
  %6 = sub i64 %1, %2
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = bitcast i16* %7 to i8*
  %9 = shl i64 %2, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %5, i8* align 2 %8, i64 %9, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @WebRtcSpl_ZerosArrayW16(i16* nocapture, i64) local_unnamed_addr #0 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %7, label %4

4:                                                ; preds = %2
  %5 = bitcast i16* %0 to i8*
  %6 = shl nuw i64 %1, 1
  call void @llvm.memset.p0i8.i64(i8* align 2 %5, i8 0, i64 %6, i1 false)
  br label %7

7:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @WebRtcSpl_ZerosArrayW32(i32* nocapture, i64) local_unnamed_addr #0 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %7, label %4

4:                                                ; preds = %2
  %5 = bitcast i32* %0 to i8*
  %6 = shl nuw i64 %1, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 %6, i1 false)
  br label %7

7:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !7, !3}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !5}
!18 = distinct !{!18, !3}
