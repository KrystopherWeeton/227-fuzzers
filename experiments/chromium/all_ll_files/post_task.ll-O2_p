; ModuleID = '../../base/task/post_task.cc'
source_filename = "../../base/task/post_task.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TaskTraits" = type { %"struct.base::TaskTraitsExtensionStorage", i8, i8, i8, i8, i8, i8 }
%"struct.base::TaskTraitsExtensionStorage" = type { i8, %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [8 x i8] }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::ThreadPoolInstance" = type { i32 (...)** }
%"class.base::TaskExecutor" = type { i32 (...)** }
%"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner" = type <{ %"class.base::internal::PostTaskAndReplyImpl", %"class.base::TaskTraits", i8 }>
%"class.base::internal::PostTaskAndReplyImpl" = type { i32 (...)** }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2", [4 x i8] }>
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2" }>
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }

$_ZN4base8internal20PostTaskAndReplyImplD2Ev = comdat any

@_ZTVN4base12_GLOBAL__N_136PostTaskAndReplyWithTraitsTaskRunnerE = internal unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::internal::PostTaskAndReplyImpl"*)* @_ZN4base8internal20PostTaskAndReplyImplD2Ev to i8*), i8* bitcast (void (%"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"*)* @_ZN4base12_GLOBAL__N_136PostTaskAndReplyWithTraitsTaskRunnerD0Ev to i8*), i8* bitcast (i1 (%"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*)* @_ZN4base12_GLOBAL__N_136PostTaskAndReplyWithTraitsTaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base8PostTaskERKNS_8LocationERKNS_10TaskTraitsENS_12OnceCallbackIFvvEEE(%"class.base::Location"* dereferenceable(32), %"class.base::TaskTraits"* dereferenceable(15), %"class.base::OnceCallback"* nocapture) local_unnamed_addr #0 {
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %8, i64* %9, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %6, align 8
  %10 = bitcast %"class.base::OnceCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 6
  %12 = load i8, i8* %11, align 1, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %3
  %15 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #6
  %16 = icmp eq %"class.base::ThreadPoolInstance"* %15, null
  %17 = getelementptr inbounds %"class.base::ThreadPoolInstance", %"class.base::ThreadPoolInstance"* %15, i64 1
  %18 = bitcast %"class.base::ThreadPoolInstance"* %17 to %"class.base::TaskExecutor"*
  %19 = select i1 %16, %"class.base::TaskExecutor"* null, %"class.base::TaskExecutor"* %18
  br label %22

20:                                               ; preds = %3
  %21 = tail call %"class.base::TaskExecutor"* @_ZN4base34GetRegisteredTaskExecutorForTraitsERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15) %1) #6
  br label %22

22:                                               ; preds = %14, %20
  %23 = phi %"class.base::TaskExecutor"* [ %19, %14 ], [ %21, %20 ]
  %24 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0, i32 0, i32 0
  %25 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %8, i64* %25, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %24, align 8
  %26 = bitcast %"class.base::TaskExecutor"* %23 to i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)***
  %27 = load i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*** %26, align 8
  %28 = getelementptr inbounds i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %27, i64 2
  %29 = load i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %28, align 8
  %30 = call zeroext i1 %29(%"class.base::TaskExecutor"* %23, %"class.base::Location"* dereferenceable(32) %0, %"class.base::TaskTraits"* dereferenceable(15) %1, %"class.base::OnceCallback"* nonnull %4, i64 0) #6
  %31 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %31) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  %32 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %32) #6
  ret i1 %30
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base15PostDelayedTaskERKNS_8LocationERKNS_10TaskTraitsENS_12OnceCallbackIFvvEEENS_9TimeDeltaE(%"class.base::Location"* dereferenceable(32), %"class.base::TaskTraits"* dereferenceable(15), %"class.base::OnceCallback"* nocapture, i64) local_unnamed_addr #0 {
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 6
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %15, label %9

9:                                                ; preds = %4
  %10 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #6
  %11 = icmp eq %"class.base::ThreadPoolInstance"* %10, null
  %12 = getelementptr inbounds %"class.base::ThreadPoolInstance", %"class.base::ThreadPoolInstance"* %10, i64 1
  %13 = bitcast %"class.base::ThreadPoolInstance"* %12 to %"class.base::TaskExecutor"*
  %14 = select i1 %11, %"class.base::TaskExecutor"* null, %"class.base::TaskExecutor"* %13
  br label %17

15:                                               ; preds = %4
  %16 = tail call %"class.base::TaskExecutor"* @_ZN4base34GetRegisteredTaskExecutorForTraitsERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15) %1) #6
  br label %17

17:                                               ; preds = %9, %15
  %18 = phi %"class.base::TaskExecutor"* [ %14, %9 ], [ %16, %15 ]
  %19 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %20 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %21, i64* %22, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %19, align 8
  %23 = bitcast %"class.base::TaskExecutor"* %18 to i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)***
  %24 = load i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*** %23, align 8
  %25 = getelementptr inbounds i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %24, i64 2
  %26 = load i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %25, align 8
  %27 = call zeroext i1 %26(%"class.base::TaskExecutor"* %18, %"class.base::Location"* dereferenceable(32) %0, %"class.base::TaskTraits"* dereferenceable(15) %1, %"class.base::OnceCallback"* nonnull %5, i64 %3) #6
  %28 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %28) #6
  ret i1 %27
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base16PostTaskAndReplyERKNS_8LocationERKNS_10TaskTraitsENS_12OnceCallbackIFvvEEES8_(%"class.base::Location"* dereferenceable(32), %"class.base::TaskTraits"* nocapture readonly dereferenceable(15), %"class.base::OnceCallback"* nocapture, %"class.base::OnceCallback"* nocapture) local_unnamed_addr #0 {
  %5 = alloca %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", align 8
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = alloca %"class.base::OnceCallback", align 8
  %8 = bitcast %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #6
  %9 = getelementptr inbounds %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %5, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN4base12_GLOBAL__N_136PostTaskAndReplyWithTraitsTaskRunnerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %5, i64 0, i32 1, i32 0, i32 0
  %11 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 1 %11, i64 9, i1 false) #6
  %12 = getelementptr inbounds %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %5, i64 0, i32 1, i32 1
  %13 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %13, i64 6, i1 false) #6
  %14 = getelementptr inbounds %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %5, i64 0, i32 0
  %15 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %16 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.base::OnceCallback"* %6 to i64*
  store i64 %17, i64* %18, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %15, align 8
  %19 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  %20 = bitcast %"class.base::OnceCallback"* %3 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.base::OnceCallback"* %7 to i64*
  store i64 %21, i64* %22, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %19, align 8
  %23 = call zeroext i1 @_ZN4base8internal20PostTaskAndReplyImpl16PostTaskAndReplyERKNS_8LocationENS_12OnceCallbackIFvvEEES7_(%"class.base::internal::PostTaskAndReplyImpl"* nonnull %14, %"class.base::Location"* dereferenceable(32) %0, %"class.base::OnceCallback"* nonnull %6, %"class.base::OnceCallback"* nonnull %7) #6
  %24 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %7, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %24) #6
  %25 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #6
  ret i1 %23
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZN4base8internal20PostTaskAndReplyImpl16PostTaskAndReplyERKNS_8LocationENS_12OnceCallbackIFvvEEES7_(%"class.base::internal::PostTaskAndReplyImpl"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"*, %"class.base::OnceCallback"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::TaskRunner"* @_ZN4base16CreateTaskRunnerERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %0, i64 0, i32 6
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #6
  %7 = icmp eq %"class.base::ThreadPoolInstance"* %6, null
  %8 = getelementptr inbounds %"class.base::ThreadPoolInstance", %"class.base::ThreadPoolInstance"* %6, i64 1
  %9 = bitcast %"class.base::ThreadPoolInstance"* %8 to %"class.base::TaskExecutor"*
  %10 = select i1 %7, %"class.base::TaskExecutor"* null, %"class.base::TaskExecutor"* %9
  br label %13

11:                                               ; preds = %1
  %12 = tail call %"class.base::TaskExecutor"* @_ZN4base34GetRegisteredTaskExecutorForTraitsERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15) %0) #6
  br label %13

13:                                               ; preds = %5, %11
  %14 = phi %"class.base::TaskExecutor"* [ %10, %5 ], [ %12, %11 ]
  %15 = bitcast %"class.base::TaskExecutor"* %14 to %"class.base::TaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*)***
  %16 = load %"class.base::TaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*)**, %"class.base::TaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*)*** %15, align 8
  %17 = getelementptr inbounds %"class.base::TaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*)*, %"class.base::TaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*)** %16, i64 3
  %18 = load %"class.base::TaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*)*, %"class.base::TaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*)** %17, align 8
  %19 = tail call %"class.base::TaskRunner"* %18(%"class.base::TaskExecutor"* %14, %"class.base::TaskTraits"* dereferenceable(15) %0) #6
  ret %"class.base::TaskRunner"* %19
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::SequencedTaskRunner"* @_ZN4base25CreateSequencedTaskRunnerERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %0, i64 0, i32 6
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #6
  %7 = icmp eq %"class.base::ThreadPoolInstance"* %6, null
  %8 = getelementptr inbounds %"class.base::ThreadPoolInstance", %"class.base::ThreadPoolInstance"* %6, i64 1
  %9 = bitcast %"class.base::ThreadPoolInstance"* %8 to %"class.base::TaskExecutor"*
  %10 = select i1 %7, %"class.base::TaskExecutor"* null, %"class.base::TaskExecutor"* %9
  br label %13

11:                                               ; preds = %1
  %12 = tail call %"class.base::TaskExecutor"* @_ZN4base34GetRegisteredTaskExecutorForTraitsERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15) %0) #6
  br label %13

13:                                               ; preds = %5, %11
  %14 = phi %"class.base::TaskExecutor"* [ %10, %5 ], [ %12, %11 ]
  %15 = bitcast %"class.base::TaskExecutor"* %14 to %"class.base::SequencedTaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*)***
  %16 = load %"class.base::SequencedTaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*)**, %"class.base::SequencedTaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*)*** %15, align 8
  %17 = getelementptr inbounds %"class.base::SequencedTaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*)*, %"class.base::SequencedTaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*)** %16, i64 4
  %18 = load %"class.base::SequencedTaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*)*, %"class.base::SequencedTaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*)** %17, align 8
  %19 = tail call %"class.base::SequencedTaskRunner"* %18(%"class.base::TaskExecutor"* %14, %"class.base::TaskTraits"* dereferenceable(15) %0) #6
  ret %"class.base::SequencedTaskRunner"* %19
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::SingleThreadTaskRunner"* @_ZN4base28CreateSingleThreadTaskRunnerERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE(%"class.base::TaskTraits"* dereferenceable(15), i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %0, i64 0, i32 6
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #6
  %8 = icmp eq %"class.base::ThreadPoolInstance"* %7, null
  %9 = getelementptr inbounds %"class.base::ThreadPoolInstance", %"class.base::ThreadPoolInstance"* %7, i64 1
  %10 = bitcast %"class.base::ThreadPoolInstance"* %9 to %"class.base::TaskExecutor"*
  %11 = select i1 %8, %"class.base::TaskExecutor"* null, %"class.base::TaskExecutor"* %10
  br label %14

12:                                               ; preds = %2
  %13 = tail call %"class.base::TaskExecutor"* @_ZN4base34GetRegisteredTaskExecutorForTraitsERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15) %0) #6
  br label %14

14:                                               ; preds = %6, %12
  %15 = phi %"class.base::TaskExecutor"* [ %11, %6 ], [ %13, %12 ]
  %16 = bitcast %"class.base::TaskExecutor"* %15 to %"class.base::SingleThreadTaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*, i32)***
  %17 = load %"class.base::SingleThreadTaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*, i32)**, %"class.base::SingleThreadTaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*, i32)*** %16, align 8
  %18 = getelementptr inbounds %"class.base::SingleThreadTaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*, i32)*, %"class.base::SingleThreadTaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*, i32)** %17, i64 5
  %19 = load %"class.base::SingleThreadTaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*, i32)*, %"class.base::SingleThreadTaskRunner"* (%"class.base::TaskExecutor"*, %"class.base::TaskTraits"*, i32)** %18, align 8
  %20 = tail call %"class.base::SingleThreadTaskRunner"* %19(%"class.base::TaskExecutor"* %15, %"class.base::TaskTraits"* dereferenceable(15) %0, i32 %1) #6
  ret %"class.base::SingleThreadTaskRunner"* %20
}

declare %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() local_unnamed_addr #3

declare %"class.base::TaskExecutor"* @_ZN4base34GetRegisteredTaskExecutorForTraitsERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15)) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4base12_GLOBAL__N_136PostTaskAndReplyWithTraitsTaskRunnerD0Ev(%"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"*) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4base12_GLOBAL__N_136PostTaskAndReplyWithTraitsTaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = getelementptr inbounds %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %10 = load i64, i64* %9, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %8, align 8
  %11 = bitcast %"class.base::OnceCallback"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0, i32 0, i32 0
  %13 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %10, i64* %13, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %12, align 8
  %14 = bitcast %"class.base::OnceCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #6
  %15 = getelementptr inbounds %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %0, i64 0, i32 1, i32 6
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %3
  %19 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #6
  %20 = icmp eq %"class.base::ThreadPoolInstance"* %19, null
  %21 = getelementptr inbounds %"class.base::ThreadPoolInstance", %"class.base::ThreadPoolInstance"* %19, i64 1
  %22 = bitcast %"class.base::ThreadPoolInstance"* %21 to %"class.base::TaskExecutor"*
  %23 = select i1 %20, %"class.base::TaskExecutor"* null, %"class.base::TaskExecutor"* %22
  br label %26

24:                                               ; preds = %3
  %25 = tail call %"class.base::TaskExecutor"* @_ZN4base34GetRegisteredTaskExecutorForTraitsERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15) %7) #6
  br label %26

26:                                               ; preds = %18, %24
  %27 = phi %"class.base::TaskExecutor"* [ %23, %18 ], [ %25, %24 ]
  %28 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0, i32 0, i32 0
  %29 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %10, i64* %29, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %28, align 8
  %30 = bitcast %"class.base::TaskExecutor"* %27 to i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)***
  %31 = load i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*** %30, align 8
  %32 = getelementptr inbounds i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %31, i64 2
  %33 = load i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::TaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %32, align 8
  %34 = call zeroext i1 %33(%"class.base::TaskExecutor"* %27, %"class.base::Location"* dereferenceable(32) %1, %"class.base::TaskTraits"* dereferenceable(15) %7, %"class.base::OnceCallback"* nonnull %4, i64 0) #6
  %35 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %35) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #6
  %36 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %36) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  %37 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %37) #6
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal20PostTaskAndReplyImplD2Ev(%"class.base::internal::PostTaskAndReplyImpl"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
