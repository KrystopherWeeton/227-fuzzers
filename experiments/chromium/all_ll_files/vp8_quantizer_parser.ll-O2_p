; ModuleID = '../../media/cast/sender/vp8_quantizer_parser.cc'
source_filename = "../../media/cast/sender/vp8_quantizer_parser.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@_ZN5media4cast12_GLOBAL__N_120vp8_quantizer_lookupE = internal unnamed_addr constant [128 x i8] c"\00\01\02\03\04\05\06\06\07\08\09\0A\0A\0B\0C\0C\0D\0D\0E\0F\10\11\12\12\13\14\15\16\17\18\19\1A\1B\1B\1C\1C\1D\1D\1E\1E\1F\1F  !!\22\22##$$%%&&''(())***+++,,,---...///000111222333444555666777888999:::;;;<<<===>>>???", align 16
@_ZN5media4cast12_GLOBAL__N_19vp8_shiftE = internal unnamed_addr constant [128 x i8] c"\00\07\06\06\05\05\05\05\04\04\04\04\04\04\04\04\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01", align 16

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN5media4cast23ParseVp8HeaderQuantizerEPKhm(i8*, i64) local_unnamed_addr #0 {
  %3 = icmp ult i64 %1, 4
  br i1 %3, label %3139, label %4

4:                                                ; preds = %2
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds i8, i8* %0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = shl nuw nsw i32 %11, 8
  %13 = or i32 %12, %6
  %14 = getelementptr inbounds i8, i8* %0, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = shl nuw nsw i32 %16, 16
  %18 = or i32 %13, %17
  %19 = lshr i32 %18, 5
  %20 = getelementptr inbounds i8, i8* %0, i64 3
  %21 = add i64 %1, -3
  br i1 %8, label %22, label %27

22:                                               ; preds = %4
  %23 = icmp ult i64 %21, 8
  br i1 %23, label %3139, label %24

24:                                               ; preds = %22
  %25 = getelementptr inbounds i8, i8* %0, i64 10
  %26 = add i64 %1, -10
  br label %27

27:                                               ; preds = %24, %4
  %28 = phi i8* [ %25, %24 ], [ %20, %4 ]
  %29 = phi i64 [ %26, %24 ], [ %21, %4 ]
  %30 = zext i32 %19 to i64
  %31 = icmp ult i64 %29, %30
  br i1 %31, label %3139, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds i8, i8* %28, i64 %30
  %34 = icmp eq i32 %19, 0
  br i1 %34, label %46, label %35

35:                                               ; preds = %32
  %36 = load i8, i8* %28, align 1
  %37 = zext i8 %36 to i32
  %38 = shl nuw nsw i32 %37, 8
  %39 = getelementptr inbounds i8, i8* %28, i64 1
  %40 = icmp eq i32 %19, 1
  br i1 %40, label %46, label %41

41:                                               ; preds = %35
  %42 = load i8, i8* %39, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %38, %43
  %45 = getelementptr inbounds i8, i8* %28, i64 2
  br label %46

46:                                               ; preds = %32, %35, %41
  %47 = phi i32 [ 0, %35 ], [ 8, %41 ], [ -8, %32 ]
  %48 = phi i32 [ %38, %35 ], [ %44, %41 ], [ 0, %32 ]
  %49 = phi i8* [ %39, %35 ], [ %45, %41 ], [ %28, %32 ]
  br i1 %8, label %50, label %93

50:                                               ; preds = %46
  %51 = icmp slt i32 %47, 0
  %52 = icmp ult i8* %49, %33
  %53 = and i1 %51, %52
  br i1 %53, label %54, label %65

54:                                               ; preds = %50
  %55 = sub nsw i32 0, %47
  %56 = add nsw i32 %47, 8
  %57 = load i8, i8* %49, align 1
  %58 = zext i8 %57 to i32
  %59 = shl i32 %58, %55
  %60 = or i32 %59, %48
  %61 = getelementptr inbounds i8, i8* %49, i64 1
  %62 = icmp slt i32 %47, -7
  %63 = icmp ult i8* %61, %33
  %64 = and i1 %62, %63
  br i1 %64, label %3474, label %65

65:                                               ; preds = %54, %3474, %50
  %66 = phi i32 [ %47, %50 ], [ %56, %54 ], [ %3476, %3474 ]
  %67 = phi i32 [ %48, %50 ], [ %60, %54 ], [ %3480, %3474 ]
  %68 = phi i8* [ %49, %50 ], [ %61, %54 ], [ %3481, %3474 ]
  %69 = ptrtoint i8* %68 to i64
  %70 = icmp ult i32 %67, 32768
  %71 = select i1 %70, i32 0, i32 32768
  %72 = sub i32 %67, %71
  %73 = select i1 %70, i32 128, i32 127
  br i1 %70, label %82, label %74

74:                                               ; preds = %65
  %75 = zext i32 %73 to i64
  %76 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = shl i32 %73, %78
  %80 = shl i32 %72, %78
  %81 = sub nsw i32 %66, %78
  br label %82

82:                                               ; preds = %65, %74
  %83 = phi i32 [ %81, %74 ], [ %66, %65 ]
  %84 = phi i32 [ %80, %74 ], [ %72, %65 ]
  %85 = phi i32 [ %79, %74 ], [ 128, %65 ]
  %86 = shl i32 %85, 7
  %87 = add i32 %86, -128
  %88 = lshr i32 %87, 8
  %89 = add nuw nsw i32 %88, 1
  %90 = icmp slt i32 %83, 0
  %91 = icmp ult i8* %68, %33
  %92 = and i1 %90, %91
  br i1 %92, label %3310, label %3455

93:                                               ; preds = %3455, %3466, %46
  %94 = phi i32 [ %47, %46 ], [ %3473, %3466 ], [ %3456, %3455 ]
  %95 = phi i32 [ %48, %46 ], [ %3472, %3466 ], [ %3463, %3455 ]
  %96 = phi i32 [ 255, %46 ], [ %3471, %3466 ], [ %3464, %3455 ]
  %97 = phi i8* [ %49, %46 ], [ %3458, %3466 ], [ %3458, %3455 ]
  %98 = shl i32 %96, 7
  %99 = add i32 %98, -128
  %100 = lshr i32 %99, 8
  %101 = add nuw nsw i32 %100, 1
  %102 = icmp slt i32 %94, 0
  br i1 %102, label %103, label %120

103:                                              ; preds = %93
  %104 = sub nsw i32 0, %94
  br label %105

105:                                              ; preds = %111, %103
  %106 = phi i32 [ %94, %103 ], [ %112, %111 ]
  %107 = phi i32 [ %95, %103 ], [ %116, %111 ]
  %108 = phi i8* [ %97, %103 ], [ %117, %111 ]
  %109 = phi i32 [ %104, %103 ], [ %118, %111 ]
  %110 = icmp ult i8* %108, %33
  br i1 %110, label %111, label %120

111:                                              ; preds = %105
  %112 = add nsw i32 %106, 8
  %113 = load i8, i8* %108, align 1
  %114 = zext i8 %113 to i32
  %115 = shl i32 %114, %109
  %116 = or i32 %115, %107
  %117 = getelementptr inbounds i8, i8* %108, i64 1
  %118 = add nsw i32 %109, -8
  %119 = icmp sgt i32 %118, -1
  br i1 %119, label %105, label %120

120:                                              ; preds = %111, %105, %93
  %121 = phi i32 [ %94, %93 ], [ %106, %105 ], [ %112, %111 ]
  %122 = phi i32 [ %95, %93 ], [ %107, %105 ], [ %116, %111 ]
  %123 = phi i8* [ %97, %93 ], [ %108, %105 ], [ %117, %111 ]
  %124 = shl i32 %101, 8
  %125 = icmp ult i32 %122, %124
  %126 = sub i32 %96, %101
  %127 = select i1 %125, i32 0, i32 %124
  %128 = sub i32 %122, %127
  %129 = select i1 %125, i32 %101, i32 %126
  %130 = icmp ult i32 %129, 128
  br i1 %130, label %131, label %139

131:                                              ; preds = %120
  %132 = zext i32 %129 to i64
  %133 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = shl i32 %129, %135
  %137 = shl i32 %128, %135
  %138 = sub nsw i32 %121, %135
  br label %139

139:                                              ; preds = %131, %120
  %140 = phi i32 [ %138, %131 ], [ %121, %120 ]
  %141 = phi i32 [ %137, %131 ], [ %128, %120 ]
  %142 = phi i32 [ %136, %131 ], [ %129, %120 ]
  br i1 %125, label %1513, label %143

143:                                              ; preds = %139
  %144 = shl i32 %142, 7
  %145 = add i32 %144, -128
  %146 = lshr i32 %145, 8
  %147 = add nuw nsw i32 %146, 1
  %148 = icmp slt i32 %140, 0
  br i1 %148, label %149, label %166

149:                                              ; preds = %143
  %150 = sub nsw i32 0, %140
  br label %151

151:                                              ; preds = %157, %149
  %152 = phi i32 [ %140, %149 ], [ %158, %157 ]
  %153 = phi i32 [ %141, %149 ], [ %162, %157 ]
  %154 = phi i8* [ %123, %149 ], [ %163, %157 ]
  %155 = phi i32 [ %150, %149 ], [ %164, %157 ]
  %156 = icmp ult i8* %154, %33
  br i1 %156, label %157, label %166

157:                                              ; preds = %151
  %158 = add nsw i32 %152, 8
  %159 = load i8, i8* %154, align 1
  %160 = zext i8 %159 to i32
  %161 = shl i32 %160, %155
  %162 = or i32 %161, %153
  %163 = getelementptr inbounds i8, i8* %154, i64 1
  %164 = add nsw i32 %155, -8
  %165 = icmp sgt i32 %164, -1
  br i1 %165, label %151, label %166

166:                                              ; preds = %157, %151, %143
  %167 = phi i32 [ %140, %143 ], [ %152, %151 ], [ %158, %157 ]
  %168 = phi i32 [ %141, %143 ], [ %153, %151 ], [ %162, %157 ]
  %169 = phi i8* [ %123, %143 ], [ %154, %151 ], [ %163, %157 ]
  %170 = shl i32 %147, 8
  %171 = icmp ult i32 %168, %170
  %172 = sub i32 %142, %147
  %173 = select i1 %171, i32 0, i32 %170
  %174 = sub i32 %168, %173
  %175 = select i1 %171, i32 %147, i32 %172
  %176 = icmp ult i32 %175, 128
  br i1 %176, label %177, label %185

177:                                              ; preds = %166
  %178 = zext i32 %175 to i64
  %179 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = shl i32 %175, %181
  %183 = shl i32 %174, %181
  %184 = sub nsw i32 %167, %181
  br label %185

185:                                              ; preds = %177, %166
  %186 = phi i32 [ %184, %177 ], [ %167, %166 ]
  %187 = phi i32 [ %183, %177 ], [ %174, %166 ]
  %188 = phi i32 [ %182, %177 ], [ %175, %166 ]
  %189 = shl i32 %188, 7
  %190 = add i32 %189, -128
  %191 = lshr i32 %190, 8
  %192 = add nuw nsw i32 %191, 1
  %193 = icmp slt i32 %186, 0
  br i1 %193, label %194, label %211

194:                                              ; preds = %185
  %195 = sub nsw i32 0, %186
  br label %196

196:                                              ; preds = %202, %194
  %197 = phi i32 [ %186, %194 ], [ %203, %202 ]
  %198 = phi i32 [ %187, %194 ], [ %207, %202 ]
  %199 = phi i8* [ %169, %194 ], [ %208, %202 ]
  %200 = phi i32 [ %195, %194 ], [ %209, %202 ]
  %201 = icmp ult i8* %199, %33
  br i1 %201, label %202, label %211

202:                                              ; preds = %196
  %203 = add nsw i32 %197, 8
  %204 = load i8, i8* %199, align 1
  %205 = zext i8 %204 to i32
  %206 = shl i32 %205, %200
  %207 = or i32 %206, %198
  %208 = getelementptr inbounds i8, i8* %199, i64 1
  %209 = add nsw i32 %200, -8
  %210 = icmp sgt i32 %209, -1
  br i1 %210, label %196, label %211

211:                                              ; preds = %202, %196, %185
  %212 = phi i32 [ %186, %185 ], [ %197, %196 ], [ %203, %202 ]
  %213 = phi i32 [ %187, %185 ], [ %198, %196 ], [ %207, %202 ]
  %214 = phi i8* [ %169, %185 ], [ %199, %196 ], [ %208, %202 ]
  %215 = shl i32 %192, 8
  %216 = icmp ult i32 %213, %215
  %217 = sub i32 %188, %192
  %218 = select i1 %216, i32 0, i32 %215
  %219 = sub i32 %213, %218
  %220 = select i1 %216, i32 %192, i32 %217
  %221 = icmp ult i32 %220, 128
  br i1 %221, label %222, label %230

222:                                              ; preds = %211
  %223 = zext i32 %220 to i64
  %224 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %223
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  %227 = shl i32 %220, %226
  %228 = shl i32 %219, %226
  %229 = sub nsw i32 %212, %226
  br label %230

230:                                              ; preds = %222, %211
  %231 = phi i32 [ %229, %222 ], [ %212, %211 ]
  %232 = phi i32 [ %228, %222 ], [ %219, %211 ]
  %233 = phi i32 [ %227, %222 ], [ %220, %211 ]
  br i1 %216, label %1097, label %234

234:                                              ; preds = %230
  %235 = shl i32 %233, 7
  %236 = add i32 %235, -128
  %237 = lshr i32 %236, 8
  %238 = add nuw nsw i32 %237, 1
  %239 = icmp slt i32 %231, 0
  br i1 %239, label %240, label %257

240:                                              ; preds = %234
  %241 = sub nsw i32 0, %231
  br label %242

242:                                              ; preds = %248, %240
  %243 = phi i32 [ %231, %240 ], [ %249, %248 ]
  %244 = phi i32 [ %232, %240 ], [ %253, %248 ]
  %245 = phi i8* [ %214, %240 ], [ %254, %248 ]
  %246 = phi i32 [ %241, %240 ], [ %255, %248 ]
  %247 = icmp ult i8* %245, %33
  br i1 %247, label %248, label %257

248:                                              ; preds = %242
  %249 = add nsw i32 %243, 8
  %250 = load i8, i8* %245, align 1
  %251 = zext i8 %250 to i32
  %252 = shl i32 %251, %246
  %253 = or i32 %252, %244
  %254 = getelementptr inbounds i8, i8* %245, i64 1
  %255 = add nsw i32 %246, -8
  %256 = icmp sgt i32 %255, -1
  br i1 %256, label %242, label %257

257:                                              ; preds = %248, %242, %234
  %258 = phi i32 [ %231, %234 ], [ %243, %242 ], [ %249, %248 ]
  %259 = phi i32 [ %232, %234 ], [ %244, %242 ], [ %253, %248 ]
  %260 = phi i8* [ %214, %234 ], [ %245, %242 ], [ %254, %248 ]
  %261 = shl i32 %238, 8
  %262 = icmp ult i32 %259, %261
  %263 = sub i32 %233, %238
  %264 = select i1 %262, i32 0, i32 %261
  %265 = sub i32 %259, %264
  %266 = select i1 %262, i32 %238, i32 %263
  %267 = icmp ult i32 %266, 128
  br i1 %267, label %268, label %276

268:                                              ; preds = %257
  %269 = zext i32 %266 to i64
  %270 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %269
  %271 = load i8, i8* %270, align 1
  %272 = zext i8 %271 to i32
  %273 = shl i32 %266, %272
  %274 = shl i32 %265, %272
  %275 = sub nsw i32 %258, %272
  br label %276

276:                                              ; preds = %268, %257
  %277 = phi i32 [ %275, %268 ], [ %258, %257 ]
  %278 = phi i32 [ %274, %268 ], [ %265, %257 ]
  %279 = phi i32 [ %273, %268 ], [ %266, %257 ]
  %280 = add nsw i64 %30, -1
  %281 = getelementptr i8, i8* %28, i64 %280
  %282 = add nsw i64 %30, -1
  %283 = getelementptr i8, i8* %28, i64 %282
  br label %284

284:                                              ; preds = %677, %276
  %285 = phi i32 [ %277, %276 ], [ %678, %677 ]
  %286 = phi i32 [ %278, %276 ], [ %679, %677 ]
  %287 = phi i8* [ %260, %276 ], [ %680, %677 ]
  %288 = phi i32 [ %278, %276 ], [ %681, %677 ]
  %289 = phi i32 [ %277, %276 ], [ %682, %677 ]
  %290 = phi i32 [ %278, %276 ], [ %683, %677 ]
  %291 = phi i32 [ %277, %276 ], [ %684, %677 ]
  %292 = phi i32 [ %279, %276 ], [ %685, %677 ]
  %293 = phi i32 [ 0, %276 ], [ %686, %677 ]
  %294 = shl i32 %292, 7
  %295 = add i32 %294, -128
  %296 = lshr i32 %295, 8
  %297 = add nuw nsw i32 %296, 1
  %298 = icmp slt i32 %291, 0
  %299 = icmp ult i8* %287, %33
  %300 = and i1 %298, %299
  br i1 %300, label %301, label %446

301:                                              ; preds = %284
  %302 = ptrtoint i8* %287 to i64
  %303 = sub nsw i32 0, %291
  %304 = xor i32 %291, -1
  %305 = sub i32 -8, %291
  %306 = icmp slt i32 %305, -1
  %307 = select i1 %306, i32 %305, i32 -1
  %308 = sub i32 %304, %307
  %309 = lshr i32 %308, 3
  %310 = zext i32 %309 to i64
  %311 = sub i64 0, %302
  %312 = getelementptr i8, i8* %283, i64 %311
  %313 = ptrtoint i8* %312 to i64
  %314 = icmp ult i64 %310, %313
  %315 = select i1 %314, i64 %310, i64 %313
  %316 = inttoptr i64 %315 to i8*
  %317 = getelementptr i8, i8* %316, i64 1
  %318 = ptrtoint i8* %317 to i64
  %319 = icmp ult i8* %317, inttoptr (i64 8 to i8*)
  br i1 %319, label %426, label %320

320:                                              ; preds = %301
  %321 = and i64 %318, -8
  %322 = trunc i64 %321 to i32
  %323 = mul i32 %322, -8
  %324 = sub i32 %323, %291
  %325 = getelementptr i8, i8* %287, i64 %321
  %326 = insertelement <4 x i32> undef, i32 %303, i32 0
  %327 = shufflevector <4 x i32> %326, <4 x i32> undef, <4 x i32> zeroinitializer
  %328 = add <4 x i32> %327, <i32 0, i32 -8, i32 -16, i32 -24>
  %329 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %291, i32 0
  %330 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %290, i32 0
  %331 = add i64 %321, -8
  %332 = lshr exact i64 %331, 3
  %333 = add nuw nsw i64 %332, 1
  %334 = and i64 %333, 1
  %335 = icmp eq i64 %331, 0
  br i1 %335, label %380, label %336

336:                                              ; preds = %320
  %337 = sub nuw nsw i64 %333, %334
  br label %338

338:                                              ; preds = %338, %336
  %339 = phi i64 [ 0, %336 ], [ %376, %338 ]
  %340 = phi <4 x i32> [ %328, %336 ], [ %377, %338 ]
  %341 = phi <4 x i32> [ %329, %336 ], [ %363, %338 ]
  %342 = phi <4 x i32> [ zeroinitializer, %336 ], [ %364, %338 ]
  %343 = phi <4 x i32> [ %330, %336 ], [ %374, %338 ]
  %344 = phi <4 x i32> [ zeroinitializer, %336 ], [ %375, %338 ]
  %345 = phi i64 [ %337, %336 ], [ %378, %338 ]
  %346 = add <4 x i32> %340, <i32 -32, i32 -32, i32 -32, i32 -32>
  %347 = getelementptr i8, i8* %287, i64 %339
  %348 = bitcast i8* %347 to <4 x i8>*
  %349 = load <4 x i8>, <4 x i8>* %348, align 1
  %350 = getelementptr i8, i8* %347, i64 4
  %351 = bitcast i8* %350 to <4 x i8>*
  %352 = load <4 x i8>, <4 x i8>* %351, align 1
  %353 = zext <4 x i8> %349 to <4 x i32>
  %354 = zext <4 x i8> %352 to <4 x i32>
  %355 = shl <4 x i32> %353, %340
  %356 = shl <4 x i32> %354, %346
  %357 = or <4 x i32> %355, %343
  %358 = or <4 x i32> %356, %344
  %359 = or i64 %339, 8
  %360 = add <4 x i32> %340, <i32 -64, i32 -64, i32 -64, i32 -64>
  %361 = add <4 x i32> %340, <i32 -96, i32 -96, i32 -96, i32 -96>
  %362 = getelementptr i8, i8* %287, i64 %359
  %363 = add nsw <4 x i32> %341, <i32 16, i32 16, i32 16, i32 16>
  %364 = add nuw nsw <4 x i32> %342, <i32 16, i32 16, i32 16, i32 16>
  %365 = bitcast i8* %362 to <4 x i8>*
  %366 = load <4 x i8>, <4 x i8>* %365, align 1
  %367 = getelementptr i8, i8* %362, i64 4
  %368 = bitcast i8* %367 to <4 x i8>*
  %369 = load <4 x i8>, <4 x i8>* %368, align 1
  %370 = zext <4 x i8> %366 to <4 x i32>
  %371 = zext <4 x i8> %369 to <4 x i32>
  %372 = shl <4 x i32> %370, %360
  %373 = shl <4 x i32> %371, %361
  %374 = or <4 x i32> %372, %357
  %375 = or <4 x i32> %373, %358
  %376 = add i64 %339, 16
  %377 = add <4 x i32> %340, <i32 -128, i32 -128, i32 -128, i32 -128>
  %378 = add i64 %345, -2
  %379 = icmp eq i64 %378, 0
  br i1 %379, label %380, label %338, !llvm.loop !2

380:                                              ; preds = %338, %320
  %381 = phi <4 x i32> [ undef, %320 ], [ %363, %338 ]
  %382 = phi <4 x i32> [ undef, %320 ], [ %364, %338 ]
  %383 = phi <4 x i32> [ undef, %320 ], [ %374, %338 ]
  %384 = phi <4 x i32> [ undef, %320 ], [ %375, %338 ]
  %385 = phi i64 [ 0, %320 ], [ %376, %338 ]
  %386 = phi <4 x i32> [ %328, %320 ], [ %377, %338 ]
  %387 = phi <4 x i32> [ %329, %320 ], [ %363, %338 ]
  %388 = phi <4 x i32> [ zeroinitializer, %320 ], [ %364, %338 ]
  %389 = phi <4 x i32> [ %330, %320 ], [ %374, %338 ]
  %390 = phi <4 x i32> [ zeroinitializer, %320 ], [ %375, %338 ]
  %391 = icmp eq i64 %334, 0
  br i1 %391, label %408, label %392

392:                                              ; preds = %380
  %393 = getelementptr i8, i8* %287, i64 %385
  %394 = getelementptr i8, i8* %393, i64 4
  %395 = bitcast i8* %394 to <4 x i8>*
  %396 = load <4 x i8>, <4 x i8>* %395, align 1
  %397 = zext <4 x i8> %396 to <4 x i32>
  %398 = add <4 x i32> %386, <i32 -32, i32 -32, i32 -32, i32 -32>
  %399 = shl <4 x i32> %397, %398
  %400 = or <4 x i32> %399, %390
  %401 = bitcast i8* %393 to <4 x i8>*
  %402 = load <4 x i8>, <4 x i8>* %401, align 1
  %403 = zext <4 x i8> %402 to <4 x i32>
  %404 = shl <4 x i32> %403, %386
  %405 = or <4 x i32> %404, %389
  %406 = add nuw nsw <4 x i32> %388, <i32 8, i32 8, i32 8, i32 8>
  %407 = add nsw <4 x i32> %387, <i32 8, i32 8, i32 8, i32 8>
  br label %408

408:                                              ; preds = %380, %392
  %409 = phi <4 x i32> [ %381, %380 ], [ %407, %392 ]
  %410 = phi <4 x i32> [ %382, %380 ], [ %406, %392 ]
  %411 = phi <4 x i32> [ %383, %380 ], [ %405, %392 ]
  %412 = phi <4 x i32> [ %384, %380 ], [ %400, %392 ]
  %413 = or <4 x i32> %412, %411
  %414 = shufflevector <4 x i32> %413, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %415 = or <4 x i32> %413, %414
  %416 = shufflevector <4 x i32> %415, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %417 = or <4 x i32> %415, %416
  %418 = extractelement <4 x i32> %417, i32 0
  %419 = add <4 x i32> %410, %409
  %420 = shufflevector <4 x i32> %419, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %421 = add <4 x i32> %419, %420
  %422 = shufflevector <4 x i32> %421, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %423 = add <4 x i32> %421, %422
  %424 = extractelement <4 x i32> %423, i32 0
  %425 = icmp eq i64 %321, %318
  br i1 %425, label %446, label %426

426:                                              ; preds = %408, %301
  %427 = phi i32 [ %303, %301 ], [ %324, %408 ]
  %428 = phi i32 [ %291, %301 ], [ %424, %408 ]
  %429 = phi i32 [ %290, %301 ], [ %418, %408 ]
  %430 = phi i8* [ %287, %301 ], [ %325, %408 ]
  br label %431

431:                                              ; preds = %426, %431
  %432 = phi i32 [ %442, %431 ], [ %427, %426 ]
  %433 = phi i32 [ %436, %431 ], [ %428, %426 ]
  %434 = phi i32 [ %440, %431 ], [ %429, %426 ]
  %435 = phi i8* [ %441, %431 ], [ %430, %426 ]
  %436 = add nsw i32 %433, 8
  %437 = load i8, i8* %435, align 1
  %438 = zext i8 %437 to i32
  %439 = shl i32 %438, %432
  %440 = or i32 %439, %434
  %441 = getelementptr inbounds i8, i8* %435, i64 1
  %442 = add nsw i32 %432, -8
  %443 = icmp sgt i32 %442, -1
  %444 = icmp ult i8* %441, %33
  %445 = and i1 %443, %444
  br i1 %445, label %431, label %446, !llvm.loop !4

446:                                              ; preds = %431, %408, %284
  %447 = phi i32 [ %285, %284 ], [ %424, %408 ], [ %436, %431 ]
  %448 = phi i32 [ %286, %284 ], [ %418, %408 ], [ %440, %431 ]
  %449 = phi i8* [ %287, %284 ], [ %325, %408 ], [ %441, %431 ]
  %450 = phi i32 [ %288, %284 ], [ %418, %408 ], [ %440, %431 ]
  %451 = phi i32 [ %289, %284 ], [ %424, %408 ], [ %436, %431 ]
  %452 = phi i32 [ %290, %284 ], [ %418, %408 ], [ %440, %431 ]
  %453 = phi i32 [ %291, %284 ], [ %424, %408 ], [ %436, %431 ]
  %454 = shl i32 %297, 8
  %455 = icmp ult i32 %452, %454
  br i1 %455, label %459, label %456

456:                                              ; preds = %446
  %457 = sub i32 %292, %297
  %458 = sub i32 %452, %454
  br label %459

459:                                              ; preds = %446, %456
  %460 = phi i32 [ %458, %456 ], [ %448, %446 ]
  %461 = phi i32 [ %458, %456 ], [ %450, %446 ]
  %462 = phi i32 [ %458, %456 ], [ %452, %446 ]
  %463 = phi i32 [ %457, %456 ], [ %297, %446 ]
  %464 = phi i32 [ 1, %456 ], [ 0, %446 ]
  %465 = icmp ult i32 %463, 128
  br i1 %465, label %466, label %474

466:                                              ; preds = %459
  %467 = zext i32 %463 to i64
  %468 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %467
  %469 = load i8, i8* %468, align 1
  %470 = zext i8 %469 to i32
  %471 = shl i32 %463, %470
  %472 = shl i32 %462, %470
  %473 = sub nsw i32 %453, %470
  br label %474

474:                                              ; preds = %466, %459
  %475 = phi i32 [ %473, %466 ], [ %447, %459 ]
  %476 = phi i32 [ %472, %466 ], [ %460, %459 ]
  %477 = phi i32 [ %472, %466 ], [ %461, %459 ]
  %478 = phi i32 [ %473, %466 ], [ %451, %459 ]
  %479 = phi i32 [ %472, %466 ], [ %462, %459 ]
  %480 = phi i32 [ %473, %466 ], [ %453, %459 ]
  %481 = phi i32 [ %471, %466 ], [ %463, %459 ]
  %482 = icmp eq i32 %464, 0
  br i1 %482, label %677, label %483

483:                                              ; preds = %474, %669
  %484 = phi i32 [ %670, %669 ], [ %475, %474 ]
  %485 = phi i32 [ %671, %669 ], [ %476, %474 ]
  %486 = phi i8* [ %649, %669 ], [ %449, %474 ]
  %487 = phi i32 [ %672, %669 ], [ %477, %474 ]
  %488 = phi i32 [ %672, %669 ], [ %479, %474 ]
  %489 = phi i32 [ %673, %669 ], [ %478, %474 ]
  %490 = phi i32 [ %674, %669 ], [ %478, %474 ]
  %491 = phi i32 [ %675, %669 ], [ %481, %474 ]
  %492 = phi i32 [ %493, %669 ], [ 8, %474 ]
  %493 = add nsw i32 %492, -1
  %494 = shl i32 %491, 7
  %495 = add i32 %494, -128
  %496 = lshr i32 %495, 8
  %497 = add nuw nsw i32 %496, 1
  %498 = icmp slt i32 %490, 0
  %499 = icmp ult i8* %486, %33
  %500 = and i1 %498, %499
  br i1 %500, label %501, label %646

501:                                              ; preds = %483
  %502 = ptrtoint i8* %486 to i64
  %503 = sub nsw i32 0, %490
  %504 = xor i32 %490, -1
  %505 = sub i32 -8, %490
  %506 = icmp slt i32 %505, -1
  %507 = select i1 %506, i32 %505, i32 -1
  %508 = sub i32 %504, %507
  %509 = lshr i32 %508, 3
  %510 = zext i32 %509 to i64
  %511 = sub i64 0, %502
  %512 = getelementptr i8, i8* %281, i64 %511
  %513 = ptrtoint i8* %512 to i64
  %514 = icmp ult i64 %510, %513
  %515 = select i1 %514, i64 %510, i64 %513
  %516 = inttoptr i64 %515 to i8*
  %517 = getelementptr i8, i8* %516, i64 1
  %518 = ptrtoint i8* %517 to i64
  %519 = icmp ult i8* %517, inttoptr (i64 8 to i8*)
  br i1 %519, label %626, label %520

520:                                              ; preds = %501
  %521 = and i64 %518, -8
  %522 = trunc i64 %521 to i32
  %523 = mul i32 %522, -8
  %524 = sub i32 %523, %490
  %525 = getelementptr i8, i8* %486, i64 %521
  %526 = insertelement <4 x i32> undef, i32 %503, i32 0
  %527 = shufflevector <4 x i32> %526, <4 x i32> undef, <4 x i32> zeroinitializer
  %528 = add <4 x i32> %527, <i32 0, i32 -8, i32 -16, i32 -24>
  %529 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %490, i32 0
  %530 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %488, i32 0
  %531 = add i64 %521, -8
  %532 = lshr exact i64 %531, 3
  %533 = add nuw nsw i64 %532, 1
  %534 = and i64 %533, 1
  %535 = icmp eq i64 %531, 0
  br i1 %535, label %580, label %536

536:                                              ; preds = %520
  %537 = sub nuw nsw i64 %533, %534
  br label %538

538:                                              ; preds = %538, %536
  %539 = phi i64 [ 0, %536 ], [ %576, %538 ]
  %540 = phi <4 x i32> [ %528, %536 ], [ %577, %538 ]
  %541 = phi <4 x i32> [ %529, %536 ], [ %563, %538 ]
  %542 = phi <4 x i32> [ zeroinitializer, %536 ], [ %564, %538 ]
  %543 = phi <4 x i32> [ %530, %536 ], [ %574, %538 ]
  %544 = phi <4 x i32> [ zeroinitializer, %536 ], [ %575, %538 ]
  %545 = phi i64 [ %537, %536 ], [ %578, %538 ]
  %546 = add <4 x i32> %540, <i32 -32, i32 -32, i32 -32, i32 -32>
  %547 = getelementptr i8, i8* %486, i64 %539
  %548 = bitcast i8* %547 to <4 x i8>*
  %549 = load <4 x i8>, <4 x i8>* %548, align 1
  %550 = getelementptr i8, i8* %547, i64 4
  %551 = bitcast i8* %550 to <4 x i8>*
  %552 = load <4 x i8>, <4 x i8>* %551, align 1
  %553 = zext <4 x i8> %549 to <4 x i32>
  %554 = zext <4 x i8> %552 to <4 x i32>
  %555 = shl <4 x i32> %553, %540
  %556 = shl <4 x i32> %554, %546
  %557 = or <4 x i32> %555, %543
  %558 = or <4 x i32> %556, %544
  %559 = or i64 %539, 8
  %560 = add <4 x i32> %540, <i32 -64, i32 -64, i32 -64, i32 -64>
  %561 = add <4 x i32> %540, <i32 -96, i32 -96, i32 -96, i32 -96>
  %562 = getelementptr i8, i8* %486, i64 %559
  %563 = add nsw <4 x i32> %541, <i32 16, i32 16, i32 16, i32 16>
  %564 = add nuw nsw <4 x i32> %542, <i32 16, i32 16, i32 16, i32 16>
  %565 = bitcast i8* %562 to <4 x i8>*
  %566 = load <4 x i8>, <4 x i8>* %565, align 1
  %567 = getelementptr i8, i8* %562, i64 4
  %568 = bitcast i8* %567 to <4 x i8>*
  %569 = load <4 x i8>, <4 x i8>* %568, align 1
  %570 = zext <4 x i8> %566 to <4 x i32>
  %571 = zext <4 x i8> %569 to <4 x i32>
  %572 = shl <4 x i32> %570, %560
  %573 = shl <4 x i32> %571, %561
  %574 = or <4 x i32> %572, %557
  %575 = or <4 x i32> %573, %558
  %576 = add i64 %539, 16
  %577 = add <4 x i32> %540, <i32 -128, i32 -128, i32 -128, i32 -128>
  %578 = add i64 %545, -2
  %579 = icmp eq i64 %578, 0
  br i1 %579, label %580, label %538, !llvm.loop !6

580:                                              ; preds = %538, %520
  %581 = phi <4 x i32> [ undef, %520 ], [ %563, %538 ]
  %582 = phi <4 x i32> [ undef, %520 ], [ %564, %538 ]
  %583 = phi <4 x i32> [ undef, %520 ], [ %574, %538 ]
  %584 = phi <4 x i32> [ undef, %520 ], [ %575, %538 ]
  %585 = phi i64 [ 0, %520 ], [ %576, %538 ]
  %586 = phi <4 x i32> [ %528, %520 ], [ %577, %538 ]
  %587 = phi <4 x i32> [ %529, %520 ], [ %563, %538 ]
  %588 = phi <4 x i32> [ zeroinitializer, %520 ], [ %564, %538 ]
  %589 = phi <4 x i32> [ %530, %520 ], [ %574, %538 ]
  %590 = phi <4 x i32> [ zeroinitializer, %520 ], [ %575, %538 ]
  %591 = icmp eq i64 %534, 0
  br i1 %591, label %608, label %592

592:                                              ; preds = %580
  %593 = getelementptr i8, i8* %486, i64 %585
  %594 = getelementptr i8, i8* %593, i64 4
  %595 = bitcast i8* %594 to <4 x i8>*
  %596 = load <4 x i8>, <4 x i8>* %595, align 1
  %597 = zext <4 x i8> %596 to <4 x i32>
  %598 = add <4 x i32> %586, <i32 -32, i32 -32, i32 -32, i32 -32>
  %599 = shl <4 x i32> %597, %598
  %600 = or <4 x i32> %599, %590
  %601 = bitcast i8* %593 to <4 x i8>*
  %602 = load <4 x i8>, <4 x i8>* %601, align 1
  %603 = zext <4 x i8> %602 to <4 x i32>
  %604 = shl <4 x i32> %603, %586
  %605 = or <4 x i32> %604, %589
  %606 = add nuw nsw <4 x i32> %588, <i32 8, i32 8, i32 8, i32 8>
  %607 = add nsw <4 x i32> %587, <i32 8, i32 8, i32 8, i32 8>
  br label %608

608:                                              ; preds = %580, %592
  %609 = phi <4 x i32> [ %581, %580 ], [ %607, %592 ]
  %610 = phi <4 x i32> [ %582, %580 ], [ %606, %592 ]
  %611 = phi <4 x i32> [ %583, %580 ], [ %605, %592 ]
  %612 = phi <4 x i32> [ %584, %580 ], [ %600, %592 ]
  %613 = or <4 x i32> %612, %611
  %614 = shufflevector <4 x i32> %613, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %615 = or <4 x i32> %613, %614
  %616 = shufflevector <4 x i32> %615, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %617 = or <4 x i32> %615, %616
  %618 = extractelement <4 x i32> %617, i32 0
  %619 = add <4 x i32> %610, %609
  %620 = shufflevector <4 x i32> %619, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %621 = add <4 x i32> %619, %620
  %622 = shufflevector <4 x i32> %621, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %623 = add <4 x i32> %621, %622
  %624 = extractelement <4 x i32> %623, i32 0
  %625 = icmp eq i64 %521, %518
  br i1 %625, label %646, label %626

626:                                              ; preds = %608, %501
  %627 = phi i32 [ %503, %501 ], [ %524, %608 ]
  %628 = phi i32 [ %490, %501 ], [ %624, %608 ]
  %629 = phi i32 [ %488, %501 ], [ %618, %608 ]
  %630 = phi i8* [ %486, %501 ], [ %525, %608 ]
  br label %631

631:                                              ; preds = %626, %631
  %632 = phi i32 [ %642, %631 ], [ %627, %626 ]
  %633 = phi i32 [ %636, %631 ], [ %628, %626 ]
  %634 = phi i32 [ %640, %631 ], [ %629, %626 ]
  %635 = phi i8* [ %641, %631 ], [ %630, %626 ]
  %636 = add nsw i32 %633, 8
  %637 = load i8, i8* %635, align 1
  %638 = zext i8 %637 to i32
  %639 = shl i32 %638, %632
  %640 = or i32 %639, %634
  %641 = getelementptr inbounds i8, i8* %635, i64 1
  %642 = add nsw i32 %632, -8
  %643 = icmp sgt i32 %642, -1
  %644 = icmp ult i8* %641, %33
  %645 = and i1 %643, %644
  br i1 %645, label %631, label %646, !llvm.loop !7

646:                                              ; preds = %631, %608, %483
  %647 = phi i32 [ %484, %483 ], [ %624, %608 ], [ %636, %631 ]
  %648 = phi i32 [ %485, %483 ], [ %618, %608 ], [ %640, %631 ]
  %649 = phi i8* [ %486, %483 ], [ %525, %608 ], [ %641, %631 ]
  %650 = phi i32 [ %487, %483 ], [ %618, %608 ], [ %640, %631 ]
  %651 = phi i32 [ %489, %483 ], [ %624, %608 ], [ %636, %631 ]
  %652 = phi i32 [ %490, %483 ], [ %624, %608 ], [ %636, %631 ]
  %653 = shl i32 %497, 8
  %654 = icmp ult i32 %650, %653
  %655 = sub i32 %491, %497
  %656 = sub i32 %650, %653
  %657 = select i1 %654, i32 %648, i32 %656
  %658 = select i1 %654, i32 %650, i32 %656
  %659 = select i1 %654, i32 %497, i32 %655
  %660 = icmp ult i32 %659, 128
  br i1 %660, label %661, label %669

661:                                              ; preds = %646
  %662 = zext i32 %659 to i64
  %663 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %662
  %664 = load i8, i8* %663, align 1
  %665 = zext i8 %664 to i32
  %666 = shl i32 %659, %665
  %667 = shl i32 %658, %665
  %668 = sub nsw i32 %652, %665
  br label %669

669:                                              ; preds = %661, %646
  %670 = phi i32 [ %668, %661 ], [ %647, %646 ]
  %671 = phi i32 [ %667, %661 ], [ %657, %646 ]
  %672 = phi i32 [ %667, %661 ], [ %658, %646 ]
  %673 = phi i32 [ %668, %661 ], [ %651, %646 ]
  %674 = phi i32 [ %668, %661 ], [ %652, %646 ]
  %675 = phi i32 [ %666, %661 ], [ %659, %646 ]
  %676 = icmp eq i32 %493, 0
  br i1 %676, label %677, label %483

677:                                              ; preds = %669, %474
  %678 = phi i32 [ %475, %474 ], [ %670, %669 ]
  %679 = phi i32 [ %476, %474 ], [ %671, %669 ]
  %680 = phi i8* [ %449, %474 ], [ %649, %669 ]
  %681 = phi i32 [ %477, %474 ], [ %672, %669 ]
  %682 = phi i32 [ %478, %474 ], [ %673, %669 ]
  %683 = phi i32 [ %479, %474 ], [ %672, %669 ]
  %684 = phi i32 [ %480, %474 ], [ %674, %669 ]
  %685 = phi i32 [ %481, %474 ], [ %675, %669 ]
  %686 = add nuw nsw i32 %293, 1
  %687 = icmp eq i32 %686, 4
  br i1 %687, label %688, label %284

688:                                              ; preds = %677
  %689 = add nsw i64 %30, -1
  %690 = getelementptr i8, i8* %28, i64 %689
  %691 = add nsw i64 %30, -1
  %692 = getelementptr i8, i8* %28, i64 %691
  br label %693

693:                                              ; preds = %688, %1086
  %694 = phi i32 [ %1087, %1086 ], [ %678, %688 ]
  %695 = phi i32 [ %1088, %1086 ], [ %679, %688 ]
  %696 = phi i8* [ %1090, %1086 ], [ %680, %688 ]
  %697 = phi i32 [ %1091, %1086 ], [ %681, %688 ]
  %698 = phi i32 [ %1092, %1086 ], [ %682, %688 ]
  %699 = phi i32 [ %1093, %1086 ], [ %681, %688 ]
  %700 = phi i32 [ %1094, %1086 ], [ %682, %688 ]
  %701 = phi i32 [ %1089, %1086 ], [ %685, %688 ]
  %702 = phi i32 [ %1095, %1086 ], [ 0, %688 ]
  %703 = shl i32 %701, 7
  %704 = add i32 %703, -128
  %705 = lshr i32 %704, 8
  %706 = add nuw nsw i32 %705, 1
  %707 = icmp slt i32 %700, 0
  %708 = icmp ult i8* %696, %33
  %709 = and i1 %707, %708
  br i1 %709, label %710, label %855

710:                                              ; preds = %693
  %711 = ptrtoint i8* %696 to i64
  %712 = sub nsw i32 0, %700
  %713 = xor i32 %700, -1
  %714 = sub i32 -8, %700
  %715 = icmp slt i32 %714, -1
  %716 = select i1 %715, i32 %714, i32 -1
  %717 = sub i32 %713, %716
  %718 = lshr i32 %717, 3
  %719 = zext i32 %718 to i64
  %720 = sub i64 0, %711
  %721 = getelementptr i8, i8* %692, i64 %720
  %722 = ptrtoint i8* %721 to i64
  %723 = icmp ult i64 %719, %722
  %724 = select i1 %723, i64 %719, i64 %722
  %725 = inttoptr i64 %724 to i8*
  %726 = getelementptr i8, i8* %725, i64 1
  %727 = ptrtoint i8* %726 to i64
  %728 = icmp ult i8* %726, inttoptr (i64 8 to i8*)
  br i1 %728, label %835, label %729

729:                                              ; preds = %710
  %730 = and i64 %727, -8
  %731 = trunc i64 %730 to i32
  %732 = mul i32 %731, -8
  %733 = sub i32 %732, %700
  %734 = getelementptr i8, i8* %696, i64 %730
  %735 = insertelement <4 x i32> undef, i32 %712, i32 0
  %736 = shufflevector <4 x i32> %735, <4 x i32> undef, <4 x i32> zeroinitializer
  %737 = add <4 x i32> %736, <i32 0, i32 -8, i32 -16, i32 -24>
  %738 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %700, i32 0
  %739 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %699, i32 0
  %740 = add i64 %730, -8
  %741 = lshr exact i64 %740, 3
  %742 = add nuw nsw i64 %741, 1
  %743 = and i64 %742, 1
  %744 = icmp eq i64 %740, 0
  br i1 %744, label %789, label %745

745:                                              ; preds = %729
  %746 = sub nuw nsw i64 %742, %743
  br label %747

747:                                              ; preds = %747, %745
  %748 = phi i64 [ 0, %745 ], [ %785, %747 ]
  %749 = phi <4 x i32> [ %737, %745 ], [ %786, %747 ]
  %750 = phi <4 x i32> [ %738, %745 ], [ %772, %747 ]
  %751 = phi <4 x i32> [ zeroinitializer, %745 ], [ %773, %747 ]
  %752 = phi <4 x i32> [ %739, %745 ], [ %783, %747 ]
  %753 = phi <4 x i32> [ zeroinitializer, %745 ], [ %784, %747 ]
  %754 = phi i64 [ %746, %745 ], [ %787, %747 ]
  %755 = add <4 x i32> %749, <i32 -32, i32 -32, i32 -32, i32 -32>
  %756 = getelementptr i8, i8* %696, i64 %748
  %757 = bitcast i8* %756 to <4 x i8>*
  %758 = load <4 x i8>, <4 x i8>* %757, align 1
  %759 = getelementptr i8, i8* %756, i64 4
  %760 = bitcast i8* %759 to <4 x i8>*
  %761 = load <4 x i8>, <4 x i8>* %760, align 1
  %762 = zext <4 x i8> %758 to <4 x i32>
  %763 = zext <4 x i8> %761 to <4 x i32>
  %764 = shl <4 x i32> %762, %749
  %765 = shl <4 x i32> %763, %755
  %766 = or <4 x i32> %764, %752
  %767 = or <4 x i32> %765, %753
  %768 = or i64 %748, 8
  %769 = add <4 x i32> %749, <i32 -64, i32 -64, i32 -64, i32 -64>
  %770 = add <4 x i32> %749, <i32 -96, i32 -96, i32 -96, i32 -96>
  %771 = getelementptr i8, i8* %696, i64 %768
  %772 = add nsw <4 x i32> %750, <i32 16, i32 16, i32 16, i32 16>
  %773 = add nuw nsw <4 x i32> %751, <i32 16, i32 16, i32 16, i32 16>
  %774 = bitcast i8* %771 to <4 x i8>*
  %775 = load <4 x i8>, <4 x i8>* %774, align 1
  %776 = getelementptr i8, i8* %771, i64 4
  %777 = bitcast i8* %776 to <4 x i8>*
  %778 = load <4 x i8>, <4 x i8>* %777, align 1
  %779 = zext <4 x i8> %775 to <4 x i32>
  %780 = zext <4 x i8> %778 to <4 x i32>
  %781 = shl <4 x i32> %779, %769
  %782 = shl <4 x i32> %780, %770
  %783 = or <4 x i32> %781, %766
  %784 = or <4 x i32> %782, %767
  %785 = add i64 %748, 16
  %786 = add <4 x i32> %749, <i32 -128, i32 -128, i32 -128, i32 -128>
  %787 = add i64 %754, -2
  %788 = icmp eq i64 %787, 0
  br i1 %788, label %789, label %747, !llvm.loop !8

789:                                              ; preds = %747, %729
  %790 = phi <4 x i32> [ undef, %729 ], [ %772, %747 ]
  %791 = phi <4 x i32> [ undef, %729 ], [ %773, %747 ]
  %792 = phi <4 x i32> [ undef, %729 ], [ %783, %747 ]
  %793 = phi <4 x i32> [ undef, %729 ], [ %784, %747 ]
  %794 = phi i64 [ 0, %729 ], [ %785, %747 ]
  %795 = phi <4 x i32> [ %737, %729 ], [ %786, %747 ]
  %796 = phi <4 x i32> [ %738, %729 ], [ %772, %747 ]
  %797 = phi <4 x i32> [ zeroinitializer, %729 ], [ %773, %747 ]
  %798 = phi <4 x i32> [ %739, %729 ], [ %783, %747 ]
  %799 = phi <4 x i32> [ zeroinitializer, %729 ], [ %784, %747 ]
  %800 = icmp eq i64 %743, 0
  br i1 %800, label %817, label %801

801:                                              ; preds = %789
  %802 = getelementptr i8, i8* %696, i64 %794
  %803 = getelementptr i8, i8* %802, i64 4
  %804 = bitcast i8* %803 to <4 x i8>*
  %805 = load <4 x i8>, <4 x i8>* %804, align 1
  %806 = zext <4 x i8> %805 to <4 x i32>
  %807 = add <4 x i32> %795, <i32 -32, i32 -32, i32 -32, i32 -32>
  %808 = shl <4 x i32> %806, %807
  %809 = or <4 x i32> %808, %799
  %810 = bitcast i8* %802 to <4 x i8>*
  %811 = load <4 x i8>, <4 x i8>* %810, align 1
  %812 = zext <4 x i8> %811 to <4 x i32>
  %813 = shl <4 x i32> %812, %795
  %814 = or <4 x i32> %813, %798
  %815 = add nuw nsw <4 x i32> %797, <i32 8, i32 8, i32 8, i32 8>
  %816 = add nsw <4 x i32> %796, <i32 8, i32 8, i32 8, i32 8>
  br label %817

817:                                              ; preds = %789, %801
  %818 = phi <4 x i32> [ %790, %789 ], [ %816, %801 ]
  %819 = phi <4 x i32> [ %791, %789 ], [ %815, %801 ]
  %820 = phi <4 x i32> [ %792, %789 ], [ %814, %801 ]
  %821 = phi <4 x i32> [ %793, %789 ], [ %809, %801 ]
  %822 = or <4 x i32> %821, %820
  %823 = shufflevector <4 x i32> %822, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %824 = or <4 x i32> %822, %823
  %825 = shufflevector <4 x i32> %824, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %826 = or <4 x i32> %824, %825
  %827 = extractelement <4 x i32> %826, i32 0
  %828 = add <4 x i32> %819, %818
  %829 = shufflevector <4 x i32> %828, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %830 = add <4 x i32> %828, %829
  %831 = shufflevector <4 x i32> %830, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %832 = add <4 x i32> %830, %831
  %833 = extractelement <4 x i32> %832, i32 0
  %834 = icmp eq i64 %730, %727
  br i1 %834, label %855, label %835

835:                                              ; preds = %817, %710
  %836 = phi i32 [ %712, %710 ], [ %733, %817 ]
  %837 = phi i32 [ %700, %710 ], [ %833, %817 ]
  %838 = phi i32 [ %699, %710 ], [ %827, %817 ]
  %839 = phi i8* [ %696, %710 ], [ %734, %817 ]
  br label %840

840:                                              ; preds = %835, %840
  %841 = phi i32 [ %851, %840 ], [ %836, %835 ]
  %842 = phi i32 [ %845, %840 ], [ %837, %835 ]
  %843 = phi i32 [ %849, %840 ], [ %838, %835 ]
  %844 = phi i8* [ %850, %840 ], [ %839, %835 ]
  %845 = add nsw i32 %842, 8
  %846 = load i8, i8* %844, align 1
  %847 = zext i8 %846 to i32
  %848 = shl i32 %847, %841
  %849 = or i32 %848, %843
  %850 = getelementptr inbounds i8, i8* %844, i64 1
  %851 = add nsw i32 %841, -8
  %852 = icmp sgt i32 %851, -1
  %853 = icmp ult i8* %850, %33
  %854 = and i1 %852, %853
  br i1 %854, label %840, label %855, !llvm.loop !9

855:                                              ; preds = %840, %817, %693
  %856 = phi i32 [ %694, %693 ], [ %833, %817 ], [ %845, %840 ]
  %857 = phi i32 [ %695, %693 ], [ %827, %817 ], [ %849, %840 ]
  %858 = phi i8* [ %696, %693 ], [ %734, %817 ], [ %850, %840 ]
  %859 = phi i32 [ %697, %693 ], [ %827, %817 ], [ %849, %840 ]
  %860 = phi i32 [ %698, %693 ], [ %833, %817 ], [ %845, %840 ]
  %861 = phi i32 [ %699, %693 ], [ %827, %817 ], [ %849, %840 ]
  %862 = phi i32 [ %700, %693 ], [ %833, %817 ], [ %845, %840 ]
  %863 = shl i32 %706, 8
  %864 = icmp ult i32 %861, %863
  br i1 %864, label %868, label %865

865:                                              ; preds = %855
  %866 = sub i32 %701, %706
  %867 = sub i32 %861, %863
  br label %868

868:                                              ; preds = %855, %865
  %869 = phi i32 [ %867, %865 ], [ %857, %855 ]
  %870 = phi i32 [ %866, %865 ], [ %706, %855 ]
  %871 = phi i32 [ %867, %865 ], [ %859, %855 ]
  %872 = phi i32 [ %867, %865 ], [ %861, %855 ]
  %873 = phi i32 [ 1, %865 ], [ 0, %855 ]
  %874 = icmp ult i32 %870, 128
  br i1 %874, label %875, label %883

875:                                              ; preds = %868
  %876 = zext i32 %870 to i64
  %877 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %876
  %878 = load i8, i8* %877, align 1
  %879 = zext i8 %878 to i32
  %880 = shl i32 %870, %879
  %881 = shl i32 %872, %879
  %882 = sub nsw i32 %862, %879
  br label %883

883:                                              ; preds = %875, %868
  %884 = phi i32 [ %882, %875 ], [ %856, %868 ]
  %885 = phi i32 [ %881, %875 ], [ %869, %868 ]
  %886 = phi i32 [ %880, %875 ], [ %870, %868 ]
  %887 = phi i32 [ %881, %875 ], [ %871, %868 ]
  %888 = phi i32 [ %882, %875 ], [ %860, %868 ]
  %889 = phi i32 [ %881, %875 ], [ %872, %868 ]
  %890 = phi i32 [ %882, %875 ], [ %862, %868 ]
  %891 = icmp eq i32 %873, 0
  br i1 %891, label %1086, label %892

892:                                              ; preds = %883, %1078
  %893 = phi i32 [ %1079, %1078 ], [ %884, %883 ]
  %894 = phi i32 [ %1080, %1078 ], [ %885, %883 ]
  %895 = phi i8* [ %1058, %1078 ], [ %858, %883 ]
  %896 = phi i32 [ %1082, %1078 ], [ %887, %883 ]
  %897 = phi i32 [ %1082, %1078 ], [ %889, %883 ]
  %898 = phi i32 [ %1083, %1078 ], [ %888, %883 ]
  %899 = phi i32 [ %1084, %1078 ], [ %888, %883 ]
  %900 = phi i32 [ %1081, %1078 ], [ %886, %883 ]
  %901 = phi i32 [ %902, %1078 ], [ 7, %883 ]
  %902 = add nsw i32 %901, -1
  %903 = shl i32 %900, 7
  %904 = add i32 %903, -128
  %905 = lshr i32 %904, 8
  %906 = add nuw nsw i32 %905, 1
  %907 = icmp slt i32 %899, 0
  %908 = icmp ult i8* %895, %33
  %909 = and i1 %907, %908
  br i1 %909, label %910, label %1055

910:                                              ; preds = %892
  %911 = ptrtoint i8* %895 to i64
  %912 = sub nsw i32 0, %899
  %913 = xor i32 %899, -1
  %914 = sub i32 -8, %899
  %915 = icmp slt i32 %914, -1
  %916 = select i1 %915, i32 %914, i32 -1
  %917 = sub i32 %913, %916
  %918 = lshr i32 %917, 3
  %919 = zext i32 %918 to i64
  %920 = sub i64 0, %911
  %921 = getelementptr i8, i8* %690, i64 %920
  %922 = ptrtoint i8* %921 to i64
  %923 = icmp ult i64 %919, %922
  %924 = select i1 %923, i64 %919, i64 %922
  %925 = inttoptr i64 %924 to i8*
  %926 = getelementptr i8, i8* %925, i64 1
  %927 = ptrtoint i8* %926 to i64
  %928 = icmp ult i8* %926, inttoptr (i64 8 to i8*)
  br i1 %928, label %1035, label %929

929:                                              ; preds = %910
  %930 = and i64 %927, -8
  %931 = trunc i64 %930 to i32
  %932 = mul i32 %931, -8
  %933 = sub i32 %932, %899
  %934 = getelementptr i8, i8* %895, i64 %930
  %935 = insertelement <4 x i32> undef, i32 %912, i32 0
  %936 = shufflevector <4 x i32> %935, <4 x i32> undef, <4 x i32> zeroinitializer
  %937 = add <4 x i32> %936, <i32 0, i32 -8, i32 -16, i32 -24>
  %938 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %899, i32 0
  %939 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %897, i32 0
  %940 = add i64 %930, -8
  %941 = lshr exact i64 %940, 3
  %942 = add nuw nsw i64 %941, 1
  %943 = and i64 %942, 1
  %944 = icmp eq i64 %940, 0
  br i1 %944, label %989, label %945

945:                                              ; preds = %929
  %946 = sub nuw nsw i64 %942, %943
  br label %947

947:                                              ; preds = %947, %945
  %948 = phi i64 [ 0, %945 ], [ %985, %947 ]
  %949 = phi <4 x i32> [ %937, %945 ], [ %986, %947 ]
  %950 = phi <4 x i32> [ %938, %945 ], [ %972, %947 ]
  %951 = phi <4 x i32> [ zeroinitializer, %945 ], [ %973, %947 ]
  %952 = phi <4 x i32> [ %939, %945 ], [ %983, %947 ]
  %953 = phi <4 x i32> [ zeroinitializer, %945 ], [ %984, %947 ]
  %954 = phi i64 [ %946, %945 ], [ %987, %947 ]
  %955 = add <4 x i32> %949, <i32 -32, i32 -32, i32 -32, i32 -32>
  %956 = getelementptr i8, i8* %895, i64 %948
  %957 = bitcast i8* %956 to <4 x i8>*
  %958 = load <4 x i8>, <4 x i8>* %957, align 1
  %959 = getelementptr i8, i8* %956, i64 4
  %960 = bitcast i8* %959 to <4 x i8>*
  %961 = load <4 x i8>, <4 x i8>* %960, align 1
  %962 = zext <4 x i8> %958 to <4 x i32>
  %963 = zext <4 x i8> %961 to <4 x i32>
  %964 = shl <4 x i32> %962, %949
  %965 = shl <4 x i32> %963, %955
  %966 = or <4 x i32> %964, %952
  %967 = or <4 x i32> %965, %953
  %968 = or i64 %948, 8
  %969 = add <4 x i32> %949, <i32 -64, i32 -64, i32 -64, i32 -64>
  %970 = add <4 x i32> %949, <i32 -96, i32 -96, i32 -96, i32 -96>
  %971 = getelementptr i8, i8* %895, i64 %968
  %972 = add nsw <4 x i32> %950, <i32 16, i32 16, i32 16, i32 16>
  %973 = add nuw nsw <4 x i32> %951, <i32 16, i32 16, i32 16, i32 16>
  %974 = bitcast i8* %971 to <4 x i8>*
  %975 = load <4 x i8>, <4 x i8>* %974, align 1
  %976 = getelementptr i8, i8* %971, i64 4
  %977 = bitcast i8* %976 to <4 x i8>*
  %978 = load <4 x i8>, <4 x i8>* %977, align 1
  %979 = zext <4 x i8> %975 to <4 x i32>
  %980 = zext <4 x i8> %978 to <4 x i32>
  %981 = shl <4 x i32> %979, %969
  %982 = shl <4 x i32> %980, %970
  %983 = or <4 x i32> %981, %966
  %984 = or <4 x i32> %982, %967
  %985 = add i64 %948, 16
  %986 = add <4 x i32> %949, <i32 -128, i32 -128, i32 -128, i32 -128>
  %987 = add i64 %954, -2
  %988 = icmp eq i64 %987, 0
  br i1 %988, label %989, label %947, !llvm.loop !10

989:                                              ; preds = %947, %929
  %990 = phi <4 x i32> [ undef, %929 ], [ %972, %947 ]
  %991 = phi <4 x i32> [ undef, %929 ], [ %973, %947 ]
  %992 = phi <4 x i32> [ undef, %929 ], [ %983, %947 ]
  %993 = phi <4 x i32> [ undef, %929 ], [ %984, %947 ]
  %994 = phi i64 [ 0, %929 ], [ %985, %947 ]
  %995 = phi <4 x i32> [ %937, %929 ], [ %986, %947 ]
  %996 = phi <4 x i32> [ %938, %929 ], [ %972, %947 ]
  %997 = phi <4 x i32> [ zeroinitializer, %929 ], [ %973, %947 ]
  %998 = phi <4 x i32> [ %939, %929 ], [ %983, %947 ]
  %999 = phi <4 x i32> [ zeroinitializer, %929 ], [ %984, %947 ]
  %1000 = icmp eq i64 %943, 0
  br i1 %1000, label %1017, label %1001

1001:                                             ; preds = %989
  %1002 = getelementptr i8, i8* %895, i64 %994
  %1003 = getelementptr i8, i8* %1002, i64 4
  %1004 = bitcast i8* %1003 to <4 x i8>*
  %1005 = load <4 x i8>, <4 x i8>* %1004, align 1
  %1006 = zext <4 x i8> %1005 to <4 x i32>
  %1007 = add <4 x i32> %995, <i32 -32, i32 -32, i32 -32, i32 -32>
  %1008 = shl <4 x i32> %1006, %1007
  %1009 = or <4 x i32> %1008, %999
  %1010 = bitcast i8* %1002 to <4 x i8>*
  %1011 = load <4 x i8>, <4 x i8>* %1010, align 1
  %1012 = zext <4 x i8> %1011 to <4 x i32>
  %1013 = shl <4 x i32> %1012, %995
  %1014 = or <4 x i32> %1013, %998
  %1015 = add nuw nsw <4 x i32> %997, <i32 8, i32 8, i32 8, i32 8>
  %1016 = add nsw <4 x i32> %996, <i32 8, i32 8, i32 8, i32 8>
  br label %1017

1017:                                             ; preds = %989, %1001
  %1018 = phi <4 x i32> [ %990, %989 ], [ %1016, %1001 ]
  %1019 = phi <4 x i32> [ %991, %989 ], [ %1015, %1001 ]
  %1020 = phi <4 x i32> [ %992, %989 ], [ %1014, %1001 ]
  %1021 = phi <4 x i32> [ %993, %989 ], [ %1009, %1001 ]
  %1022 = or <4 x i32> %1021, %1020
  %1023 = shufflevector <4 x i32> %1022, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1024 = or <4 x i32> %1022, %1023
  %1025 = shufflevector <4 x i32> %1024, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1026 = or <4 x i32> %1024, %1025
  %1027 = extractelement <4 x i32> %1026, i32 0
  %1028 = add <4 x i32> %1019, %1018
  %1029 = shufflevector <4 x i32> %1028, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1030 = add <4 x i32> %1028, %1029
  %1031 = shufflevector <4 x i32> %1030, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1032 = add <4 x i32> %1030, %1031
  %1033 = extractelement <4 x i32> %1032, i32 0
  %1034 = icmp eq i64 %930, %927
  br i1 %1034, label %1055, label %1035

1035:                                             ; preds = %1017, %910
  %1036 = phi i32 [ %912, %910 ], [ %933, %1017 ]
  %1037 = phi i32 [ %899, %910 ], [ %1033, %1017 ]
  %1038 = phi i32 [ %897, %910 ], [ %1027, %1017 ]
  %1039 = phi i8* [ %895, %910 ], [ %934, %1017 ]
  br label %1040

1040:                                             ; preds = %1035, %1040
  %1041 = phi i32 [ %1051, %1040 ], [ %1036, %1035 ]
  %1042 = phi i32 [ %1045, %1040 ], [ %1037, %1035 ]
  %1043 = phi i32 [ %1049, %1040 ], [ %1038, %1035 ]
  %1044 = phi i8* [ %1050, %1040 ], [ %1039, %1035 ]
  %1045 = add nsw i32 %1042, 8
  %1046 = load i8, i8* %1044, align 1
  %1047 = zext i8 %1046 to i32
  %1048 = shl i32 %1047, %1041
  %1049 = or i32 %1048, %1043
  %1050 = getelementptr inbounds i8, i8* %1044, i64 1
  %1051 = add nsw i32 %1041, -8
  %1052 = icmp sgt i32 %1051, -1
  %1053 = icmp ult i8* %1050, %33
  %1054 = and i1 %1052, %1053
  br i1 %1054, label %1040, label %1055, !llvm.loop !11

1055:                                             ; preds = %1040, %1017, %892
  %1056 = phi i32 [ %893, %892 ], [ %1033, %1017 ], [ %1045, %1040 ]
  %1057 = phi i32 [ %894, %892 ], [ %1027, %1017 ], [ %1049, %1040 ]
  %1058 = phi i8* [ %895, %892 ], [ %934, %1017 ], [ %1050, %1040 ]
  %1059 = phi i32 [ %896, %892 ], [ %1027, %1017 ], [ %1049, %1040 ]
  %1060 = phi i32 [ %898, %892 ], [ %1033, %1017 ], [ %1045, %1040 ]
  %1061 = phi i32 [ %899, %892 ], [ %1033, %1017 ], [ %1045, %1040 ]
  %1062 = shl i32 %906, 8
  %1063 = icmp ult i32 %1059, %1062
  %1064 = sub i32 %900, %906
  %1065 = sub i32 %1059, %1062
  %1066 = select i1 %1063, i32 %1057, i32 %1065
  %1067 = select i1 %1063, i32 %906, i32 %1064
  %1068 = select i1 %1063, i32 %1059, i32 %1065
  %1069 = icmp ult i32 %1067, 128
  br i1 %1069, label %1070, label %1078

1070:                                             ; preds = %1055
  %1071 = zext i32 %1067 to i64
  %1072 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %1071
  %1073 = load i8, i8* %1072, align 1
  %1074 = zext i8 %1073 to i32
  %1075 = shl i32 %1067, %1074
  %1076 = shl i32 %1068, %1074
  %1077 = sub nsw i32 %1061, %1074
  br label %1078

1078:                                             ; preds = %1070, %1055
  %1079 = phi i32 [ %1077, %1070 ], [ %1056, %1055 ]
  %1080 = phi i32 [ %1076, %1070 ], [ %1066, %1055 ]
  %1081 = phi i32 [ %1075, %1070 ], [ %1067, %1055 ]
  %1082 = phi i32 [ %1076, %1070 ], [ %1068, %1055 ]
  %1083 = phi i32 [ %1077, %1070 ], [ %1060, %1055 ]
  %1084 = phi i32 [ %1077, %1070 ], [ %1061, %1055 ]
  %1085 = icmp eq i32 %902, 0
  br i1 %1085, label %1086, label %892

1086:                                             ; preds = %1078, %883
  %1087 = phi i32 [ %884, %883 ], [ %1079, %1078 ]
  %1088 = phi i32 [ %885, %883 ], [ %1080, %1078 ]
  %1089 = phi i32 [ %886, %883 ], [ %1081, %1078 ]
  %1090 = phi i8* [ %858, %883 ], [ %1058, %1078 ]
  %1091 = phi i32 [ %887, %883 ], [ %1082, %1078 ]
  %1092 = phi i32 [ %888, %883 ], [ %1083, %1078 ]
  %1093 = phi i32 [ %889, %883 ], [ %1082, %1078 ]
  %1094 = phi i32 [ %890, %883 ], [ %1084, %1078 ]
  %1095 = add nuw nsw i32 %702, 1
  %1096 = icmp eq i32 %1095, 4
  br i1 %1096, label %1097, label %693

1097:                                             ; preds = %1086, %230
  %1098 = phi i32 [ %231, %230 ], [ %1087, %1086 ]
  %1099 = phi i32 [ %232, %230 ], [ %1088, %1086 ]
  %1100 = phi i32 [ %233, %230 ], [ %1089, %1086 ]
  %1101 = phi i8* [ %214, %230 ], [ %1090, %1086 ]
  %1102 = phi i32 [ %232, %230 ], [ %1091, %1086 ]
  %1103 = phi i32 [ %231, %230 ], [ %1092, %1086 ]
  br i1 %171, label %1513, label %1104

1104:                                             ; preds = %1097
  %1105 = add nsw i64 %30, -1
  %1106 = getelementptr i8, i8* %28, i64 %1105
  %1107 = add nsw i64 %30, -1
  %1108 = getelementptr i8, i8* %28, i64 %1107
  br label %1109

1109:                                             ; preds = %1104, %1502
  %1110 = phi i32 [ %1503, %1502 ], [ %1098, %1104 ]
  %1111 = phi i32 [ %1504, %1502 ], [ %1099, %1104 ]
  %1112 = phi i8* [ %1506, %1502 ], [ %1101, %1104 ]
  %1113 = phi i32 [ %1507, %1502 ], [ %1102, %1104 ]
  %1114 = phi i32 [ %1508, %1502 ], [ %1103, %1104 ]
  %1115 = phi i32 [ %1509, %1502 ], [ %1102, %1104 ]
  %1116 = phi i32 [ %1510, %1502 ], [ %1103, %1104 ]
  %1117 = phi i32 [ %1505, %1502 ], [ %1100, %1104 ]
  %1118 = phi i32 [ %1511, %1502 ], [ 0, %1104 ]
  %1119 = shl i32 %1117, 7
  %1120 = add i32 %1119, -128
  %1121 = lshr i32 %1120, 8
  %1122 = add nuw nsw i32 %1121, 1
  %1123 = icmp slt i32 %1116, 0
  %1124 = icmp ult i8* %1112, %33
  %1125 = and i1 %1123, %1124
  br i1 %1125, label %1126, label %1271

1126:                                             ; preds = %1109
  %1127 = ptrtoint i8* %1112 to i64
  %1128 = sub nsw i32 0, %1116
  %1129 = xor i32 %1116, -1
  %1130 = sub i32 -8, %1116
  %1131 = icmp slt i32 %1130, -1
  %1132 = select i1 %1131, i32 %1130, i32 -1
  %1133 = sub i32 %1129, %1132
  %1134 = lshr i32 %1133, 3
  %1135 = zext i32 %1134 to i64
  %1136 = sub i64 0, %1127
  %1137 = getelementptr i8, i8* %1108, i64 %1136
  %1138 = ptrtoint i8* %1137 to i64
  %1139 = icmp ult i64 %1135, %1138
  %1140 = select i1 %1139, i64 %1135, i64 %1138
  %1141 = inttoptr i64 %1140 to i8*
  %1142 = getelementptr i8, i8* %1141, i64 1
  %1143 = ptrtoint i8* %1142 to i64
  %1144 = icmp ult i8* %1142, inttoptr (i64 8 to i8*)
  br i1 %1144, label %1251, label %1145

1145:                                             ; preds = %1126
  %1146 = and i64 %1143, -8
  %1147 = trunc i64 %1146 to i32
  %1148 = mul i32 %1147, -8
  %1149 = sub i32 %1148, %1116
  %1150 = getelementptr i8, i8* %1112, i64 %1146
  %1151 = insertelement <4 x i32> undef, i32 %1128, i32 0
  %1152 = shufflevector <4 x i32> %1151, <4 x i32> undef, <4 x i32> zeroinitializer
  %1153 = add <4 x i32> %1152, <i32 0, i32 -8, i32 -16, i32 -24>
  %1154 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1116, i32 0
  %1155 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1115, i32 0
  %1156 = add i64 %1146, -8
  %1157 = lshr exact i64 %1156, 3
  %1158 = add nuw nsw i64 %1157, 1
  %1159 = and i64 %1158, 1
  %1160 = icmp eq i64 %1156, 0
  br i1 %1160, label %1205, label %1161

1161:                                             ; preds = %1145
  %1162 = sub nuw nsw i64 %1158, %1159
  br label %1163

1163:                                             ; preds = %1163, %1161
  %1164 = phi i64 [ 0, %1161 ], [ %1201, %1163 ]
  %1165 = phi <4 x i32> [ %1153, %1161 ], [ %1202, %1163 ]
  %1166 = phi <4 x i32> [ %1154, %1161 ], [ %1188, %1163 ]
  %1167 = phi <4 x i32> [ zeroinitializer, %1161 ], [ %1189, %1163 ]
  %1168 = phi <4 x i32> [ %1155, %1161 ], [ %1199, %1163 ]
  %1169 = phi <4 x i32> [ zeroinitializer, %1161 ], [ %1200, %1163 ]
  %1170 = phi i64 [ %1162, %1161 ], [ %1203, %1163 ]
  %1171 = add <4 x i32> %1165, <i32 -32, i32 -32, i32 -32, i32 -32>
  %1172 = getelementptr i8, i8* %1112, i64 %1164
  %1173 = bitcast i8* %1172 to <4 x i8>*
  %1174 = load <4 x i8>, <4 x i8>* %1173, align 1
  %1175 = getelementptr i8, i8* %1172, i64 4
  %1176 = bitcast i8* %1175 to <4 x i8>*
  %1177 = load <4 x i8>, <4 x i8>* %1176, align 1
  %1178 = zext <4 x i8> %1174 to <4 x i32>
  %1179 = zext <4 x i8> %1177 to <4 x i32>
  %1180 = shl <4 x i32> %1178, %1165
  %1181 = shl <4 x i32> %1179, %1171
  %1182 = or <4 x i32> %1180, %1168
  %1183 = or <4 x i32> %1181, %1169
  %1184 = or i64 %1164, 8
  %1185 = add <4 x i32> %1165, <i32 -64, i32 -64, i32 -64, i32 -64>
  %1186 = add <4 x i32> %1165, <i32 -96, i32 -96, i32 -96, i32 -96>
  %1187 = getelementptr i8, i8* %1112, i64 %1184
  %1188 = add nsw <4 x i32> %1166, <i32 16, i32 16, i32 16, i32 16>
  %1189 = add nuw nsw <4 x i32> %1167, <i32 16, i32 16, i32 16, i32 16>
  %1190 = bitcast i8* %1187 to <4 x i8>*
  %1191 = load <4 x i8>, <4 x i8>* %1190, align 1
  %1192 = getelementptr i8, i8* %1187, i64 4
  %1193 = bitcast i8* %1192 to <4 x i8>*
  %1194 = load <4 x i8>, <4 x i8>* %1193, align 1
  %1195 = zext <4 x i8> %1191 to <4 x i32>
  %1196 = zext <4 x i8> %1194 to <4 x i32>
  %1197 = shl <4 x i32> %1195, %1185
  %1198 = shl <4 x i32> %1196, %1186
  %1199 = or <4 x i32> %1197, %1182
  %1200 = or <4 x i32> %1198, %1183
  %1201 = add i64 %1164, 16
  %1202 = add <4 x i32> %1165, <i32 -128, i32 -128, i32 -128, i32 -128>
  %1203 = add i64 %1170, -2
  %1204 = icmp eq i64 %1203, 0
  br i1 %1204, label %1205, label %1163, !llvm.loop !12

1205:                                             ; preds = %1163, %1145
  %1206 = phi <4 x i32> [ undef, %1145 ], [ %1188, %1163 ]
  %1207 = phi <4 x i32> [ undef, %1145 ], [ %1189, %1163 ]
  %1208 = phi <4 x i32> [ undef, %1145 ], [ %1199, %1163 ]
  %1209 = phi <4 x i32> [ undef, %1145 ], [ %1200, %1163 ]
  %1210 = phi i64 [ 0, %1145 ], [ %1201, %1163 ]
  %1211 = phi <4 x i32> [ %1153, %1145 ], [ %1202, %1163 ]
  %1212 = phi <4 x i32> [ %1154, %1145 ], [ %1188, %1163 ]
  %1213 = phi <4 x i32> [ zeroinitializer, %1145 ], [ %1189, %1163 ]
  %1214 = phi <4 x i32> [ %1155, %1145 ], [ %1199, %1163 ]
  %1215 = phi <4 x i32> [ zeroinitializer, %1145 ], [ %1200, %1163 ]
  %1216 = icmp eq i64 %1159, 0
  br i1 %1216, label %1233, label %1217

1217:                                             ; preds = %1205
  %1218 = getelementptr i8, i8* %1112, i64 %1210
  %1219 = getelementptr i8, i8* %1218, i64 4
  %1220 = bitcast i8* %1219 to <4 x i8>*
  %1221 = load <4 x i8>, <4 x i8>* %1220, align 1
  %1222 = zext <4 x i8> %1221 to <4 x i32>
  %1223 = add <4 x i32> %1211, <i32 -32, i32 -32, i32 -32, i32 -32>
  %1224 = shl <4 x i32> %1222, %1223
  %1225 = or <4 x i32> %1224, %1215
  %1226 = bitcast i8* %1218 to <4 x i8>*
  %1227 = load <4 x i8>, <4 x i8>* %1226, align 1
  %1228 = zext <4 x i8> %1227 to <4 x i32>
  %1229 = shl <4 x i32> %1228, %1211
  %1230 = or <4 x i32> %1229, %1214
  %1231 = add nuw nsw <4 x i32> %1213, <i32 8, i32 8, i32 8, i32 8>
  %1232 = add nsw <4 x i32> %1212, <i32 8, i32 8, i32 8, i32 8>
  br label %1233

1233:                                             ; preds = %1205, %1217
  %1234 = phi <4 x i32> [ %1206, %1205 ], [ %1232, %1217 ]
  %1235 = phi <4 x i32> [ %1207, %1205 ], [ %1231, %1217 ]
  %1236 = phi <4 x i32> [ %1208, %1205 ], [ %1230, %1217 ]
  %1237 = phi <4 x i32> [ %1209, %1205 ], [ %1225, %1217 ]
  %1238 = or <4 x i32> %1237, %1236
  %1239 = shufflevector <4 x i32> %1238, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1240 = or <4 x i32> %1238, %1239
  %1241 = shufflevector <4 x i32> %1240, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1242 = or <4 x i32> %1240, %1241
  %1243 = extractelement <4 x i32> %1242, i32 0
  %1244 = add <4 x i32> %1235, %1234
  %1245 = shufflevector <4 x i32> %1244, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1246 = add <4 x i32> %1244, %1245
  %1247 = shufflevector <4 x i32> %1246, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1248 = add <4 x i32> %1246, %1247
  %1249 = extractelement <4 x i32> %1248, i32 0
  %1250 = icmp eq i64 %1146, %1143
  br i1 %1250, label %1271, label %1251

1251:                                             ; preds = %1233, %1126
  %1252 = phi i32 [ %1128, %1126 ], [ %1149, %1233 ]
  %1253 = phi i32 [ %1116, %1126 ], [ %1249, %1233 ]
  %1254 = phi i32 [ %1115, %1126 ], [ %1243, %1233 ]
  %1255 = phi i8* [ %1112, %1126 ], [ %1150, %1233 ]
  br label %1256

1256:                                             ; preds = %1251, %1256
  %1257 = phi i32 [ %1267, %1256 ], [ %1252, %1251 ]
  %1258 = phi i32 [ %1261, %1256 ], [ %1253, %1251 ]
  %1259 = phi i32 [ %1265, %1256 ], [ %1254, %1251 ]
  %1260 = phi i8* [ %1266, %1256 ], [ %1255, %1251 ]
  %1261 = add nsw i32 %1258, 8
  %1262 = load i8, i8* %1260, align 1
  %1263 = zext i8 %1262 to i32
  %1264 = shl i32 %1263, %1257
  %1265 = or i32 %1264, %1259
  %1266 = getelementptr inbounds i8, i8* %1260, i64 1
  %1267 = add nsw i32 %1257, -8
  %1268 = icmp sgt i32 %1267, -1
  %1269 = icmp ult i8* %1266, %33
  %1270 = and i1 %1268, %1269
  br i1 %1270, label %1256, label %1271, !llvm.loop !13

1271:                                             ; preds = %1256, %1233, %1109
  %1272 = phi i32 [ %1110, %1109 ], [ %1249, %1233 ], [ %1261, %1256 ]
  %1273 = phi i32 [ %1111, %1109 ], [ %1243, %1233 ], [ %1265, %1256 ]
  %1274 = phi i8* [ %1112, %1109 ], [ %1150, %1233 ], [ %1266, %1256 ]
  %1275 = phi i32 [ %1113, %1109 ], [ %1243, %1233 ], [ %1265, %1256 ]
  %1276 = phi i32 [ %1114, %1109 ], [ %1249, %1233 ], [ %1261, %1256 ]
  %1277 = phi i32 [ %1115, %1109 ], [ %1243, %1233 ], [ %1265, %1256 ]
  %1278 = phi i32 [ %1116, %1109 ], [ %1249, %1233 ], [ %1261, %1256 ]
  %1279 = shl i32 %1122, 8
  %1280 = icmp ult i32 %1277, %1279
  br i1 %1280, label %1284, label %1281

1281:                                             ; preds = %1271
  %1282 = sub i32 %1117, %1122
  %1283 = sub i32 %1277, %1279
  br label %1284

1284:                                             ; preds = %1271, %1281
  %1285 = phi i32 [ %1283, %1281 ], [ %1273, %1271 ]
  %1286 = phi i32 [ %1282, %1281 ], [ %1122, %1271 ]
  %1287 = phi i32 [ %1283, %1281 ], [ %1275, %1271 ]
  %1288 = phi i32 [ %1283, %1281 ], [ %1277, %1271 ]
  %1289 = phi i32 [ 1, %1281 ], [ 0, %1271 ]
  %1290 = icmp ult i32 %1286, 128
  br i1 %1290, label %1291, label %1299

1291:                                             ; preds = %1284
  %1292 = zext i32 %1286 to i64
  %1293 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %1292
  %1294 = load i8, i8* %1293, align 1
  %1295 = zext i8 %1294 to i32
  %1296 = shl i32 %1286, %1295
  %1297 = shl i32 %1288, %1295
  %1298 = sub nsw i32 %1278, %1295
  br label %1299

1299:                                             ; preds = %1291, %1284
  %1300 = phi i32 [ %1298, %1291 ], [ %1272, %1284 ]
  %1301 = phi i32 [ %1297, %1291 ], [ %1285, %1284 ]
  %1302 = phi i32 [ %1296, %1291 ], [ %1286, %1284 ]
  %1303 = phi i32 [ %1297, %1291 ], [ %1287, %1284 ]
  %1304 = phi i32 [ %1298, %1291 ], [ %1276, %1284 ]
  %1305 = phi i32 [ %1297, %1291 ], [ %1288, %1284 ]
  %1306 = phi i32 [ %1298, %1291 ], [ %1278, %1284 ]
  %1307 = icmp eq i32 %1289, 0
  br i1 %1307, label %1502, label %1308

1308:                                             ; preds = %1299, %1494
  %1309 = phi i32 [ %1495, %1494 ], [ %1300, %1299 ]
  %1310 = phi i32 [ %1496, %1494 ], [ %1301, %1299 ]
  %1311 = phi i8* [ %1474, %1494 ], [ %1274, %1299 ]
  %1312 = phi i32 [ %1498, %1494 ], [ %1303, %1299 ]
  %1313 = phi i32 [ %1498, %1494 ], [ %1305, %1299 ]
  %1314 = phi i32 [ %1499, %1494 ], [ %1304, %1299 ]
  %1315 = phi i32 [ %1500, %1494 ], [ %1304, %1299 ]
  %1316 = phi i32 [ %1497, %1494 ], [ %1302, %1299 ]
  %1317 = phi i32 [ %1318, %1494 ], [ 8, %1299 ]
  %1318 = add nsw i32 %1317, -1
  %1319 = shl i32 %1316, 7
  %1320 = add i32 %1319, -128
  %1321 = lshr i32 %1320, 8
  %1322 = add nuw nsw i32 %1321, 1
  %1323 = icmp slt i32 %1315, 0
  %1324 = icmp ult i8* %1311, %33
  %1325 = and i1 %1323, %1324
  br i1 %1325, label %1326, label %1471

1326:                                             ; preds = %1308
  %1327 = ptrtoint i8* %1311 to i64
  %1328 = sub nsw i32 0, %1315
  %1329 = xor i32 %1315, -1
  %1330 = sub i32 -8, %1315
  %1331 = icmp slt i32 %1330, -1
  %1332 = select i1 %1331, i32 %1330, i32 -1
  %1333 = sub i32 %1329, %1332
  %1334 = lshr i32 %1333, 3
  %1335 = zext i32 %1334 to i64
  %1336 = sub i64 0, %1327
  %1337 = getelementptr i8, i8* %1106, i64 %1336
  %1338 = ptrtoint i8* %1337 to i64
  %1339 = icmp ult i64 %1335, %1338
  %1340 = select i1 %1339, i64 %1335, i64 %1338
  %1341 = inttoptr i64 %1340 to i8*
  %1342 = getelementptr i8, i8* %1341, i64 1
  %1343 = ptrtoint i8* %1342 to i64
  %1344 = icmp ult i8* %1342, inttoptr (i64 8 to i8*)
  br i1 %1344, label %1451, label %1345

1345:                                             ; preds = %1326
  %1346 = and i64 %1343, -8
  %1347 = trunc i64 %1346 to i32
  %1348 = mul i32 %1347, -8
  %1349 = sub i32 %1348, %1315
  %1350 = getelementptr i8, i8* %1311, i64 %1346
  %1351 = insertelement <4 x i32> undef, i32 %1328, i32 0
  %1352 = shufflevector <4 x i32> %1351, <4 x i32> undef, <4 x i32> zeroinitializer
  %1353 = add <4 x i32> %1352, <i32 0, i32 -8, i32 -16, i32 -24>
  %1354 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1315, i32 0
  %1355 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1313, i32 0
  %1356 = add i64 %1346, -8
  %1357 = lshr exact i64 %1356, 3
  %1358 = add nuw nsw i64 %1357, 1
  %1359 = and i64 %1358, 1
  %1360 = icmp eq i64 %1356, 0
  br i1 %1360, label %1405, label %1361

1361:                                             ; preds = %1345
  %1362 = sub nuw nsw i64 %1358, %1359
  br label %1363

1363:                                             ; preds = %1363, %1361
  %1364 = phi i64 [ 0, %1361 ], [ %1401, %1363 ]
  %1365 = phi <4 x i32> [ %1353, %1361 ], [ %1402, %1363 ]
  %1366 = phi <4 x i32> [ %1354, %1361 ], [ %1388, %1363 ]
  %1367 = phi <4 x i32> [ zeroinitializer, %1361 ], [ %1389, %1363 ]
  %1368 = phi <4 x i32> [ %1355, %1361 ], [ %1399, %1363 ]
  %1369 = phi <4 x i32> [ zeroinitializer, %1361 ], [ %1400, %1363 ]
  %1370 = phi i64 [ %1362, %1361 ], [ %1403, %1363 ]
  %1371 = add <4 x i32> %1365, <i32 -32, i32 -32, i32 -32, i32 -32>
  %1372 = getelementptr i8, i8* %1311, i64 %1364
  %1373 = bitcast i8* %1372 to <4 x i8>*
  %1374 = load <4 x i8>, <4 x i8>* %1373, align 1
  %1375 = getelementptr i8, i8* %1372, i64 4
  %1376 = bitcast i8* %1375 to <4 x i8>*
  %1377 = load <4 x i8>, <4 x i8>* %1376, align 1
  %1378 = zext <4 x i8> %1374 to <4 x i32>
  %1379 = zext <4 x i8> %1377 to <4 x i32>
  %1380 = shl <4 x i32> %1378, %1365
  %1381 = shl <4 x i32> %1379, %1371
  %1382 = or <4 x i32> %1380, %1368
  %1383 = or <4 x i32> %1381, %1369
  %1384 = or i64 %1364, 8
  %1385 = add <4 x i32> %1365, <i32 -64, i32 -64, i32 -64, i32 -64>
  %1386 = add <4 x i32> %1365, <i32 -96, i32 -96, i32 -96, i32 -96>
  %1387 = getelementptr i8, i8* %1311, i64 %1384
  %1388 = add nsw <4 x i32> %1366, <i32 16, i32 16, i32 16, i32 16>
  %1389 = add nuw nsw <4 x i32> %1367, <i32 16, i32 16, i32 16, i32 16>
  %1390 = bitcast i8* %1387 to <4 x i8>*
  %1391 = load <4 x i8>, <4 x i8>* %1390, align 1
  %1392 = getelementptr i8, i8* %1387, i64 4
  %1393 = bitcast i8* %1392 to <4 x i8>*
  %1394 = load <4 x i8>, <4 x i8>* %1393, align 1
  %1395 = zext <4 x i8> %1391 to <4 x i32>
  %1396 = zext <4 x i8> %1394 to <4 x i32>
  %1397 = shl <4 x i32> %1395, %1385
  %1398 = shl <4 x i32> %1396, %1386
  %1399 = or <4 x i32> %1397, %1382
  %1400 = or <4 x i32> %1398, %1383
  %1401 = add i64 %1364, 16
  %1402 = add <4 x i32> %1365, <i32 -128, i32 -128, i32 -128, i32 -128>
  %1403 = add i64 %1370, -2
  %1404 = icmp eq i64 %1403, 0
  br i1 %1404, label %1405, label %1363, !llvm.loop !14

1405:                                             ; preds = %1363, %1345
  %1406 = phi <4 x i32> [ undef, %1345 ], [ %1388, %1363 ]
  %1407 = phi <4 x i32> [ undef, %1345 ], [ %1389, %1363 ]
  %1408 = phi <4 x i32> [ undef, %1345 ], [ %1399, %1363 ]
  %1409 = phi <4 x i32> [ undef, %1345 ], [ %1400, %1363 ]
  %1410 = phi i64 [ 0, %1345 ], [ %1401, %1363 ]
  %1411 = phi <4 x i32> [ %1353, %1345 ], [ %1402, %1363 ]
  %1412 = phi <4 x i32> [ %1354, %1345 ], [ %1388, %1363 ]
  %1413 = phi <4 x i32> [ zeroinitializer, %1345 ], [ %1389, %1363 ]
  %1414 = phi <4 x i32> [ %1355, %1345 ], [ %1399, %1363 ]
  %1415 = phi <4 x i32> [ zeroinitializer, %1345 ], [ %1400, %1363 ]
  %1416 = icmp eq i64 %1359, 0
  br i1 %1416, label %1433, label %1417

1417:                                             ; preds = %1405
  %1418 = getelementptr i8, i8* %1311, i64 %1410
  %1419 = getelementptr i8, i8* %1418, i64 4
  %1420 = bitcast i8* %1419 to <4 x i8>*
  %1421 = load <4 x i8>, <4 x i8>* %1420, align 1
  %1422 = zext <4 x i8> %1421 to <4 x i32>
  %1423 = add <4 x i32> %1411, <i32 -32, i32 -32, i32 -32, i32 -32>
  %1424 = shl <4 x i32> %1422, %1423
  %1425 = or <4 x i32> %1424, %1415
  %1426 = bitcast i8* %1418 to <4 x i8>*
  %1427 = load <4 x i8>, <4 x i8>* %1426, align 1
  %1428 = zext <4 x i8> %1427 to <4 x i32>
  %1429 = shl <4 x i32> %1428, %1411
  %1430 = or <4 x i32> %1429, %1414
  %1431 = add nuw nsw <4 x i32> %1413, <i32 8, i32 8, i32 8, i32 8>
  %1432 = add nsw <4 x i32> %1412, <i32 8, i32 8, i32 8, i32 8>
  br label %1433

1433:                                             ; preds = %1405, %1417
  %1434 = phi <4 x i32> [ %1406, %1405 ], [ %1432, %1417 ]
  %1435 = phi <4 x i32> [ %1407, %1405 ], [ %1431, %1417 ]
  %1436 = phi <4 x i32> [ %1408, %1405 ], [ %1430, %1417 ]
  %1437 = phi <4 x i32> [ %1409, %1405 ], [ %1425, %1417 ]
  %1438 = or <4 x i32> %1437, %1436
  %1439 = shufflevector <4 x i32> %1438, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1440 = or <4 x i32> %1438, %1439
  %1441 = shufflevector <4 x i32> %1440, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1442 = or <4 x i32> %1440, %1441
  %1443 = extractelement <4 x i32> %1442, i32 0
  %1444 = add <4 x i32> %1435, %1434
  %1445 = shufflevector <4 x i32> %1444, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1446 = add <4 x i32> %1444, %1445
  %1447 = shufflevector <4 x i32> %1446, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1448 = add <4 x i32> %1446, %1447
  %1449 = extractelement <4 x i32> %1448, i32 0
  %1450 = icmp eq i64 %1346, %1343
  br i1 %1450, label %1471, label %1451

1451:                                             ; preds = %1433, %1326
  %1452 = phi i32 [ %1328, %1326 ], [ %1349, %1433 ]
  %1453 = phi i32 [ %1315, %1326 ], [ %1449, %1433 ]
  %1454 = phi i32 [ %1313, %1326 ], [ %1443, %1433 ]
  %1455 = phi i8* [ %1311, %1326 ], [ %1350, %1433 ]
  br label %1456

1456:                                             ; preds = %1451, %1456
  %1457 = phi i32 [ %1467, %1456 ], [ %1452, %1451 ]
  %1458 = phi i32 [ %1461, %1456 ], [ %1453, %1451 ]
  %1459 = phi i32 [ %1465, %1456 ], [ %1454, %1451 ]
  %1460 = phi i8* [ %1466, %1456 ], [ %1455, %1451 ]
  %1461 = add nsw i32 %1458, 8
  %1462 = load i8, i8* %1460, align 1
  %1463 = zext i8 %1462 to i32
  %1464 = shl i32 %1463, %1457
  %1465 = or i32 %1464, %1459
  %1466 = getelementptr inbounds i8, i8* %1460, i64 1
  %1467 = add nsw i32 %1457, -8
  %1468 = icmp sgt i32 %1467, -1
  %1469 = icmp ult i8* %1466, %33
  %1470 = and i1 %1468, %1469
  br i1 %1470, label %1456, label %1471, !llvm.loop !15

1471:                                             ; preds = %1456, %1433, %1308
  %1472 = phi i32 [ %1309, %1308 ], [ %1449, %1433 ], [ %1461, %1456 ]
  %1473 = phi i32 [ %1310, %1308 ], [ %1443, %1433 ], [ %1465, %1456 ]
  %1474 = phi i8* [ %1311, %1308 ], [ %1350, %1433 ], [ %1466, %1456 ]
  %1475 = phi i32 [ %1312, %1308 ], [ %1443, %1433 ], [ %1465, %1456 ]
  %1476 = phi i32 [ %1314, %1308 ], [ %1449, %1433 ], [ %1461, %1456 ]
  %1477 = phi i32 [ %1315, %1308 ], [ %1449, %1433 ], [ %1461, %1456 ]
  %1478 = shl i32 %1322, 8
  %1479 = icmp ult i32 %1475, %1478
  %1480 = sub i32 %1316, %1322
  %1481 = sub i32 %1475, %1478
  %1482 = select i1 %1479, i32 %1473, i32 %1481
  %1483 = select i1 %1479, i32 %1322, i32 %1480
  %1484 = select i1 %1479, i32 %1475, i32 %1481
  %1485 = icmp ult i32 %1483, 128
  br i1 %1485, label %1486, label %1494

1486:                                             ; preds = %1471
  %1487 = zext i32 %1483 to i64
  %1488 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %1487
  %1489 = load i8, i8* %1488, align 1
  %1490 = zext i8 %1489 to i32
  %1491 = shl i32 %1483, %1490
  %1492 = shl i32 %1484, %1490
  %1493 = sub nsw i32 %1477, %1490
  br label %1494

1494:                                             ; preds = %1486, %1471
  %1495 = phi i32 [ %1493, %1486 ], [ %1472, %1471 ]
  %1496 = phi i32 [ %1492, %1486 ], [ %1482, %1471 ]
  %1497 = phi i32 [ %1491, %1486 ], [ %1483, %1471 ]
  %1498 = phi i32 [ %1492, %1486 ], [ %1484, %1471 ]
  %1499 = phi i32 [ %1493, %1486 ], [ %1476, %1471 ]
  %1500 = phi i32 [ %1493, %1486 ], [ %1477, %1471 ]
  %1501 = icmp eq i32 %1318, 0
  br i1 %1501, label %1502, label %1308

1502:                                             ; preds = %1494, %1299
  %1503 = phi i32 [ %1300, %1299 ], [ %1495, %1494 ]
  %1504 = phi i32 [ %1301, %1299 ], [ %1496, %1494 ]
  %1505 = phi i32 [ %1302, %1299 ], [ %1497, %1494 ]
  %1506 = phi i8* [ %1274, %1299 ], [ %1474, %1494 ]
  %1507 = phi i32 [ %1303, %1299 ], [ %1498, %1494 ]
  %1508 = phi i32 [ %1304, %1299 ], [ %1499, %1494 ]
  %1509 = phi i32 [ %1305, %1299 ], [ %1498, %1494 ]
  %1510 = phi i32 [ %1306, %1299 ], [ %1500, %1494 ]
  %1511 = add nuw nsw i32 %1118, 1
  %1512 = icmp eq i32 %1511, 3
  br i1 %1512, label %1513, label %1109

1513:                                             ; preds = %1502, %139, %1097
  %1514 = phi i32 [ %140, %139 ], [ %1098, %1097 ], [ %1503, %1502 ]
  %1515 = phi i32 [ %141, %139 ], [ %1099, %1097 ], [ %1504, %1502 ]
  %1516 = phi i32 [ %142, %139 ], [ %1100, %1097 ], [ %1505, %1502 ]
  %1517 = phi i8* [ %123, %139 ], [ %1101, %1097 ], [ %1506, %1502 ]
  %1518 = add nsw i64 %30, -1
  %1519 = getelementptr i8, i8* %28, i64 %1518
  br label %1520

1520:                                             ; preds = %1700, %1513
  %1521 = phi i32 [ %1514, %1513 ], [ %1701, %1700 ]
  %1522 = phi i32 [ %1515, %1513 ], [ %1702, %1700 ]
  %1523 = phi i8* [ %1517, %1513 ], [ %1683, %1700 ]
  %1524 = phi i32 [ %1514, %1513 ], [ %1703, %1700 ]
  %1525 = phi i32 [ %1516, %1513 ], [ %1704, %1700 ]
  %1526 = phi i32 [ 10, %1513 ], [ %1527, %1700 ]
  %1527 = add nsw i32 %1526, -1
  %1528 = shl i32 %1525, 7
  %1529 = add i32 %1528, -128
  %1530 = lshr i32 %1529, 8
  %1531 = add nuw nsw i32 %1530, 1
  %1532 = icmp slt i32 %1524, 0
  %1533 = icmp ult i8* %1523, %33
  %1534 = and i1 %1532, %1533
  br i1 %1534, label %1535, label %1680

1535:                                             ; preds = %1520
  %1536 = ptrtoint i8* %1523 to i64
  %1537 = sub nsw i32 0, %1524
  %1538 = xor i32 %1524, -1
  %1539 = sub i32 -8, %1524
  %1540 = icmp slt i32 %1539, -1
  %1541 = select i1 %1540, i32 %1539, i32 -1
  %1542 = sub i32 %1538, %1541
  %1543 = lshr i32 %1542, 3
  %1544 = zext i32 %1543 to i64
  %1545 = sub i64 0, %1536
  %1546 = getelementptr i8, i8* %1519, i64 %1545
  %1547 = ptrtoint i8* %1546 to i64
  %1548 = icmp ult i64 %1544, %1547
  %1549 = select i1 %1548, i64 %1544, i64 %1547
  %1550 = inttoptr i64 %1549 to i8*
  %1551 = getelementptr i8, i8* %1550, i64 1
  %1552 = ptrtoint i8* %1551 to i64
  %1553 = icmp ult i8* %1551, inttoptr (i64 8 to i8*)
  br i1 %1553, label %1660, label %1554

1554:                                             ; preds = %1535
  %1555 = and i64 %1552, -8
  %1556 = trunc i64 %1555 to i32
  %1557 = mul i32 %1556, -8
  %1558 = sub i32 %1557, %1524
  %1559 = getelementptr i8, i8* %1523, i64 %1555
  %1560 = insertelement <4 x i32> undef, i32 %1537, i32 0
  %1561 = shufflevector <4 x i32> %1560, <4 x i32> undef, <4 x i32> zeroinitializer
  %1562 = add <4 x i32> %1561, <i32 0, i32 -8, i32 -16, i32 -24>
  %1563 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1524, i32 0
  %1564 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1522, i32 0
  %1565 = add i64 %1555, -8
  %1566 = lshr exact i64 %1565, 3
  %1567 = add nuw nsw i64 %1566, 1
  %1568 = and i64 %1567, 1
  %1569 = icmp eq i64 %1565, 0
  br i1 %1569, label %1614, label %1570

1570:                                             ; preds = %1554
  %1571 = sub nuw nsw i64 %1567, %1568
  br label %1572

1572:                                             ; preds = %1572, %1570
  %1573 = phi i64 [ 0, %1570 ], [ %1610, %1572 ]
  %1574 = phi <4 x i32> [ %1562, %1570 ], [ %1611, %1572 ]
  %1575 = phi <4 x i32> [ %1563, %1570 ], [ %1597, %1572 ]
  %1576 = phi <4 x i32> [ zeroinitializer, %1570 ], [ %1598, %1572 ]
  %1577 = phi <4 x i32> [ %1564, %1570 ], [ %1608, %1572 ]
  %1578 = phi <4 x i32> [ zeroinitializer, %1570 ], [ %1609, %1572 ]
  %1579 = phi i64 [ %1571, %1570 ], [ %1612, %1572 ]
  %1580 = add <4 x i32> %1574, <i32 -32, i32 -32, i32 -32, i32 -32>
  %1581 = getelementptr i8, i8* %1523, i64 %1573
  %1582 = bitcast i8* %1581 to <4 x i8>*
  %1583 = load <4 x i8>, <4 x i8>* %1582, align 1
  %1584 = getelementptr i8, i8* %1581, i64 4
  %1585 = bitcast i8* %1584 to <4 x i8>*
  %1586 = load <4 x i8>, <4 x i8>* %1585, align 1
  %1587 = zext <4 x i8> %1583 to <4 x i32>
  %1588 = zext <4 x i8> %1586 to <4 x i32>
  %1589 = shl <4 x i32> %1587, %1574
  %1590 = shl <4 x i32> %1588, %1580
  %1591 = or <4 x i32> %1589, %1577
  %1592 = or <4 x i32> %1590, %1578
  %1593 = or i64 %1573, 8
  %1594 = add <4 x i32> %1574, <i32 -64, i32 -64, i32 -64, i32 -64>
  %1595 = add <4 x i32> %1574, <i32 -96, i32 -96, i32 -96, i32 -96>
  %1596 = getelementptr i8, i8* %1523, i64 %1593
  %1597 = add nsw <4 x i32> %1575, <i32 16, i32 16, i32 16, i32 16>
  %1598 = add nuw nsw <4 x i32> %1576, <i32 16, i32 16, i32 16, i32 16>
  %1599 = bitcast i8* %1596 to <4 x i8>*
  %1600 = load <4 x i8>, <4 x i8>* %1599, align 1
  %1601 = getelementptr i8, i8* %1596, i64 4
  %1602 = bitcast i8* %1601 to <4 x i8>*
  %1603 = load <4 x i8>, <4 x i8>* %1602, align 1
  %1604 = zext <4 x i8> %1600 to <4 x i32>
  %1605 = zext <4 x i8> %1603 to <4 x i32>
  %1606 = shl <4 x i32> %1604, %1594
  %1607 = shl <4 x i32> %1605, %1595
  %1608 = or <4 x i32> %1606, %1591
  %1609 = or <4 x i32> %1607, %1592
  %1610 = add i64 %1573, 16
  %1611 = add <4 x i32> %1574, <i32 -128, i32 -128, i32 -128, i32 -128>
  %1612 = add i64 %1579, -2
  %1613 = icmp eq i64 %1612, 0
  br i1 %1613, label %1614, label %1572, !llvm.loop !16

1614:                                             ; preds = %1572, %1554
  %1615 = phi <4 x i32> [ undef, %1554 ], [ %1597, %1572 ]
  %1616 = phi <4 x i32> [ undef, %1554 ], [ %1598, %1572 ]
  %1617 = phi <4 x i32> [ undef, %1554 ], [ %1608, %1572 ]
  %1618 = phi <4 x i32> [ undef, %1554 ], [ %1609, %1572 ]
  %1619 = phi i64 [ 0, %1554 ], [ %1610, %1572 ]
  %1620 = phi <4 x i32> [ %1562, %1554 ], [ %1611, %1572 ]
  %1621 = phi <4 x i32> [ %1563, %1554 ], [ %1597, %1572 ]
  %1622 = phi <4 x i32> [ zeroinitializer, %1554 ], [ %1598, %1572 ]
  %1623 = phi <4 x i32> [ %1564, %1554 ], [ %1608, %1572 ]
  %1624 = phi <4 x i32> [ zeroinitializer, %1554 ], [ %1609, %1572 ]
  %1625 = icmp eq i64 %1568, 0
  br i1 %1625, label %1642, label %1626

1626:                                             ; preds = %1614
  %1627 = getelementptr i8, i8* %1523, i64 %1619
  %1628 = getelementptr i8, i8* %1627, i64 4
  %1629 = bitcast i8* %1628 to <4 x i8>*
  %1630 = load <4 x i8>, <4 x i8>* %1629, align 1
  %1631 = zext <4 x i8> %1630 to <4 x i32>
  %1632 = add <4 x i32> %1620, <i32 -32, i32 -32, i32 -32, i32 -32>
  %1633 = shl <4 x i32> %1631, %1632
  %1634 = or <4 x i32> %1633, %1624
  %1635 = bitcast i8* %1627 to <4 x i8>*
  %1636 = load <4 x i8>, <4 x i8>* %1635, align 1
  %1637 = zext <4 x i8> %1636 to <4 x i32>
  %1638 = shl <4 x i32> %1637, %1620
  %1639 = or <4 x i32> %1638, %1623
  %1640 = add nuw nsw <4 x i32> %1622, <i32 8, i32 8, i32 8, i32 8>
  %1641 = add nsw <4 x i32> %1621, <i32 8, i32 8, i32 8, i32 8>
  br label %1642

1642:                                             ; preds = %1614, %1626
  %1643 = phi <4 x i32> [ %1615, %1614 ], [ %1641, %1626 ]
  %1644 = phi <4 x i32> [ %1616, %1614 ], [ %1640, %1626 ]
  %1645 = phi <4 x i32> [ %1617, %1614 ], [ %1639, %1626 ]
  %1646 = phi <4 x i32> [ %1618, %1614 ], [ %1634, %1626 ]
  %1647 = or <4 x i32> %1646, %1645
  %1648 = shufflevector <4 x i32> %1647, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1649 = or <4 x i32> %1647, %1648
  %1650 = shufflevector <4 x i32> %1649, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1651 = or <4 x i32> %1649, %1650
  %1652 = extractelement <4 x i32> %1651, i32 0
  %1653 = add <4 x i32> %1644, %1643
  %1654 = shufflevector <4 x i32> %1653, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1655 = add <4 x i32> %1653, %1654
  %1656 = shufflevector <4 x i32> %1655, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1657 = add <4 x i32> %1655, %1656
  %1658 = extractelement <4 x i32> %1657, i32 0
  %1659 = icmp eq i64 %1555, %1552
  br i1 %1659, label %1680, label %1660

1660:                                             ; preds = %1642, %1535
  %1661 = phi i32 [ %1537, %1535 ], [ %1558, %1642 ]
  %1662 = phi i32 [ %1524, %1535 ], [ %1658, %1642 ]
  %1663 = phi i8* [ %1523, %1535 ], [ %1559, %1642 ]
  %1664 = phi i32 [ %1522, %1535 ], [ %1652, %1642 ]
  br label %1665

1665:                                             ; preds = %1660, %1665
  %1666 = phi i32 [ %1676, %1665 ], [ %1661, %1660 ]
  %1667 = phi i32 [ %1670, %1665 ], [ %1662, %1660 ]
  %1668 = phi i8* [ %1675, %1665 ], [ %1663, %1660 ]
  %1669 = phi i32 [ %1674, %1665 ], [ %1664, %1660 ]
  %1670 = add nsw i32 %1667, 8
  %1671 = load i8, i8* %1668, align 1
  %1672 = zext i8 %1671 to i32
  %1673 = shl i32 %1672, %1666
  %1674 = or i32 %1673, %1669
  %1675 = getelementptr inbounds i8, i8* %1668, i64 1
  %1676 = add nsw i32 %1666, -8
  %1677 = icmp sgt i32 %1676, -1
  %1678 = icmp ult i8* %1675, %33
  %1679 = and i1 %1677, %1678
  br i1 %1679, label %1665, label %1680, !llvm.loop !17

1680:                                             ; preds = %1665, %1642, %1520
  %1681 = phi i32 [ %1521, %1520 ], [ %1658, %1642 ], [ %1670, %1665 ]
  %1682 = phi i32 [ %1522, %1520 ], [ %1652, %1642 ], [ %1674, %1665 ]
  %1683 = phi i8* [ %1523, %1520 ], [ %1559, %1642 ], [ %1675, %1665 ]
  %1684 = phi i32 [ %1524, %1520 ], [ %1658, %1642 ], [ %1670, %1665 ]
  %1685 = shl i32 %1531, 8
  %1686 = icmp ult i32 %1682, %1685
  %1687 = sub i32 %1525, %1531
  %1688 = select i1 %1686, i32 0, i32 %1685
  %1689 = sub i32 %1682, %1688
  %1690 = select i1 %1686, i32 %1531, i32 %1687
  %1691 = icmp ult i32 %1690, 128
  br i1 %1691, label %1692, label %1700

1692:                                             ; preds = %1680
  %1693 = zext i32 %1690 to i64
  %1694 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %1693
  %1695 = load i8, i8* %1694, align 1
  %1696 = zext i8 %1695 to i32
  %1697 = shl i32 %1690, %1696
  %1698 = shl i32 %1689, %1696
  %1699 = sub nsw i32 %1684, %1696
  br label %1700

1700:                                             ; preds = %1692, %1680
  %1701 = phi i32 [ %1699, %1692 ], [ %1681, %1680 ]
  %1702 = phi i32 [ %1698, %1692 ], [ %1689, %1680 ]
  %1703 = phi i32 [ %1699, %1692 ], [ %1684, %1680 ]
  %1704 = phi i32 [ %1697, %1692 ], [ %1690, %1680 ]
  %1705 = icmp eq i32 %1527, 0
  br i1 %1705, label %1706, label %1520

1706:                                             ; preds = %1700
  %1707 = shl i32 %1704, 7
  %1708 = add i32 %1707, -128
  %1709 = lshr i32 %1708, 8
  %1710 = add nuw nsw i32 %1709, 1
  %1711 = icmp slt i32 %1703, 0
  %1712 = icmp ult i8* %1683, %33
  %1713 = and i1 %1711, %1712
  br i1 %1713, label %1714, label %1860

1714:                                             ; preds = %1706
  %1715 = ptrtoint i8* %1683 to i64
  %1716 = sub nsw i32 0, %1703
  %1717 = xor i32 %1703, -1
  %1718 = sub i32 -8, %1703
  %1719 = icmp slt i32 %1718, -1
  %1720 = select i1 %1719, i32 %1718, i32 -1
  %1721 = sub i32 %1717, %1720
  %1722 = lshr i32 %1721, 3
  %1723 = zext i32 %1722 to i64
  %1724 = xor i64 %1715, -1
  %1725 = add i64 %1724, %30
  %1726 = getelementptr i8, i8* %28, i64 %1725
  %1727 = ptrtoint i8* %1726 to i64
  %1728 = icmp ult i64 %1723, %1727
  %1729 = select i1 %1728, i64 %1723, i64 %1727
  %1730 = inttoptr i64 %1729 to i8*
  %1731 = getelementptr i8, i8* %1730, i64 1
  %1732 = ptrtoint i8* %1731 to i64
  %1733 = icmp ult i8* %1731, inttoptr (i64 8 to i8*)
  br i1 %1733, label %1840, label %1734

1734:                                             ; preds = %1714
  %1735 = and i64 %1732, -8
  %1736 = trunc i64 %1735 to i32
  %1737 = mul i32 %1736, -8
  %1738 = sub i32 %1737, %1703
  %1739 = getelementptr i8, i8* %1683, i64 %1735
  %1740 = insertelement <4 x i32> undef, i32 %1716, i32 0
  %1741 = shufflevector <4 x i32> %1740, <4 x i32> undef, <4 x i32> zeroinitializer
  %1742 = add <4 x i32> %1741, <i32 0, i32 -8, i32 -16, i32 -24>
  %1743 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1703, i32 0
  %1744 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1702, i32 0
  %1745 = add i64 %1735, -8
  %1746 = lshr exact i64 %1745, 3
  %1747 = add nuw nsw i64 %1746, 1
  %1748 = and i64 %1747, 1
  %1749 = icmp eq i64 %1745, 0
  br i1 %1749, label %1794, label %1750

1750:                                             ; preds = %1734
  %1751 = sub nuw nsw i64 %1747, %1748
  br label %1752

1752:                                             ; preds = %1752, %1750
  %1753 = phi i64 [ 0, %1750 ], [ %1790, %1752 ]
  %1754 = phi <4 x i32> [ %1742, %1750 ], [ %1791, %1752 ]
  %1755 = phi <4 x i32> [ %1743, %1750 ], [ %1777, %1752 ]
  %1756 = phi <4 x i32> [ zeroinitializer, %1750 ], [ %1778, %1752 ]
  %1757 = phi <4 x i32> [ %1744, %1750 ], [ %1788, %1752 ]
  %1758 = phi <4 x i32> [ zeroinitializer, %1750 ], [ %1789, %1752 ]
  %1759 = phi i64 [ %1751, %1750 ], [ %1792, %1752 ]
  %1760 = add <4 x i32> %1754, <i32 -32, i32 -32, i32 -32, i32 -32>
  %1761 = getelementptr i8, i8* %1683, i64 %1753
  %1762 = bitcast i8* %1761 to <4 x i8>*
  %1763 = load <4 x i8>, <4 x i8>* %1762, align 1
  %1764 = getelementptr i8, i8* %1761, i64 4
  %1765 = bitcast i8* %1764 to <4 x i8>*
  %1766 = load <4 x i8>, <4 x i8>* %1765, align 1
  %1767 = zext <4 x i8> %1763 to <4 x i32>
  %1768 = zext <4 x i8> %1766 to <4 x i32>
  %1769 = shl <4 x i32> %1767, %1754
  %1770 = shl <4 x i32> %1768, %1760
  %1771 = or <4 x i32> %1769, %1757
  %1772 = or <4 x i32> %1770, %1758
  %1773 = or i64 %1753, 8
  %1774 = add <4 x i32> %1754, <i32 -64, i32 -64, i32 -64, i32 -64>
  %1775 = add <4 x i32> %1754, <i32 -96, i32 -96, i32 -96, i32 -96>
  %1776 = getelementptr i8, i8* %1683, i64 %1773
  %1777 = add nsw <4 x i32> %1755, <i32 16, i32 16, i32 16, i32 16>
  %1778 = add nuw nsw <4 x i32> %1756, <i32 16, i32 16, i32 16, i32 16>
  %1779 = bitcast i8* %1776 to <4 x i8>*
  %1780 = load <4 x i8>, <4 x i8>* %1779, align 1
  %1781 = getelementptr i8, i8* %1776, i64 4
  %1782 = bitcast i8* %1781 to <4 x i8>*
  %1783 = load <4 x i8>, <4 x i8>* %1782, align 1
  %1784 = zext <4 x i8> %1780 to <4 x i32>
  %1785 = zext <4 x i8> %1783 to <4 x i32>
  %1786 = shl <4 x i32> %1784, %1774
  %1787 = shl <4 x i32> %1785, %1775
  %1788 = or <4 x i32> %1786, %1771
  %1789 = or <4 x i32> %1787, %1772
  %1790 = add i64 %1753, 16
  %1791 = add <4 x i32> %1754, <i32 -128, i32 -128, i32 -128, i32 -128>
  %1792 = add i64 %1759, -2
  %1793 = icmp eq i64 %1792, 0
  br i1 %1793, label %1794, label %1752, !llvm.loop !18

1794:                                             ; preds = %1752, %1734
  %1795 = phi <4 x i32> [ undef, %1734 ], [ %1777, %1752 ]
  %1796 = phi <4 x i32> [ undef, %1734 ], [ %1778, %1752 ]
  %1797 = phi <4 x i32> [ undef, %1734 ], [ %1788, %1752 ]
  %1798 = phi <4 x i32> [ undef, %1734 ], [ %1789, %1752 ]
  %1799 = phi i64 [ 0, %1734 ], [ %1790, %1752 ]
  %1800 = phi <4 x i32> [ %1742, %1734 ], [ %1791, %1752 ]
  %1801 = phi <4 x i32> [ %1743, %1734 ], [ %1777, %1752 ]
  %1802 = phi <4 x i32> [ zeroinitializer, %1734 ], [ %1778, %1752 ]
  %1803 = phi <4 x i32> [ %1744, %1734 ], [ %1788, %1752 ]
  %1804 = phi <4 x i32> [ zeroinitializer, %1734 ], [ %1789, %1752 ]
  %1805 = icmp eq i64 %1748, 0
  br i1 %1805, label %1822, label %1806

1806:                                             ; preds = %1794
  %1807 = getelementptr i8, i8* %1683, i64 %1799
  %1808 = getelementptr i8, i8* %1807, i64 4
  %1809 = bitcast i8* %1808 to <4 x i8>*
  %1810 = load <4 x i8>, <4 x i8>* %1809, align 1
  %1811 = zext <4 x i8> %1810 to <4 x i32>
  %1812 = add <4 x i32> %1800, <i32 -32, i32 -32, i32 -32, i32 -32>
  %1813 = shl <4 x i32> %1811, %1812
  %1814 = or <4 x i32> %1813, %1804
  %1815 = bitcast i8* %1807 to <4 x i8>*
  %1816 = load <4 x i8>, <4 x i8>* %1815, align 1
  %1817 = zext <4 x i8> %1816 to <4 x i32>
  %1818 = shl <4 x i32> %1817, %1800
  %1819 = or <4 x i32> %1818, %1803
  %1820 = add nuw nsw <4 x i32> %1802, <i32 8, i32 8, i32 8, i32 8>
  %1821 = add nsw <4 x i32> %1801, <i32 8, i32 8, i32 8, i32 8>
  br label %1822

1822:                                             ; preds = %1794, %1806
  %1823 = phi <4 x i32> [ %1795, %1794 ], [ %1821, %1806 ]
  %1824 = phi <4 x i32> [ %1796, %1794 ], [ %1820, %1806 ]
  %1825 = phi <4 x i32> [ %1797, %1794 ], [ %1819, %1806 ]
  %1826 = phi <4 x i32> [ %1798, %1794 ], [ %1814, %1806 ]
  %1827 = or <4 x i32> %1826, %1825
  %1828 = shufflevector <4 x i32> %1827, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1829 = or <4 x i32> %1827, %1828
  %1830 = shufflevector <4 x i32> %1829, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1831 = or <4 x i32> %1829, %1830
  %1832 = extractelement <4 x i32> %1831, i32 0
  %1833 = add <4 x i32> %1824, %1823
  %1834 = shufflevector <4 x i32> %1833, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1835 = add <4 x i32> %1833, %1834
  %1836 = shufflevector <4 x i32> %1835, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1837 = add <4 x i32> %1835, %1836
  %1838 = extractelement <4 x i32> %1837, i32 0
  %1839 = icmp eq i64 %1735, %1732
  br i1 %1839, label %1860, label %1840

1840:                                             ; preds = %1822, %1714
  %1841 = phi i32 [ %1716, %1714 ], [ %1738, %1822 ]
  %1842 = phi i32 [ %1703, %1714 ], [ %1838, %1822 ]
  %1843 = phi i8* [ %1683, %1714 ], [ %1739, %1822 ]
  %1844 = phi i32 [ %1702, %1714 ], [ %1832, %1822 ]
  br label %1845

1845:                                             ; preds = %1840, %1845
  %1846 = phi i32 [ %1856, %1845 ], [ %1841, %1840 ]
  %1847 = phi i32 [ %1850, %1845 ], [ %1842, %1840 ]
  %1848 = phi i8* [ %1855, %1845 ], [ %1843, %1840 ]
  %1849 = phi i32 [ %1854, %1845 ], [ %1844, %1840 ]
  %1850 = add nsw i32 %1847, 8
  %1851 = load i8, i8* %1848, align 1
  %1852 = zext i8 %1851 to i32
  %1853 = shl i32 %1852, %1846
  %1854 = or i32 %1853, %1849
  %1855 = getelementptr inbounds i8, i8* %1848, i64 1
  %1856 = add nsw i32 %1846, -8
  %1857 = icmp sgt i32 %1856, -1
  %1858 = icmp ult i8* %1855, %33
  %1859 = and i1 %1857, %1858
  br i1 %1859, label %1845, label %1860, !llvm.loop !19

1860:                                             ; preds = %1845, %1822, %1706
  %1861 = phi i32 [ %1701, %1706 ], [ %1838, %1822 ], [ %1850, %1845 ]
  %1862 = phi i32 [ %1702, %1706 ], [ %1832, %1822 ], [ %1854, %1845 ]
  %1863 = phi i8* [ %1683, %1706 ], [ %1739, %1822 ], [ %1855, %1845 ]
  %1864 = phi i32 [ %1703, %1706 ], [ %1838, %1822 ], [ %1850, %1845 ]
  %1865 = ptrtoint i8* %1863 to i64
  %1866 = shl i32 %1710, 8
  %1867 = icmp ult i32 %1862, %1866
  %1868 = sub i32 %1704, %1710
  %1869 = select i1 %1867, i32 0, i32 %1866
  %1870 = sub i32 %1862, %1869
  %1871 = select i1 %1867, i32 %1710, i32 %1868
  %1872 = icmp ult i32 %1871, 128
  br i1 %1872, label %1873, label %1881

1873:                                             ; preds = %1860
  %1874 = zext i32 %1871 to i64
  %1875 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %1874
  %1876 = load i8, i8* %1875, align 1
  %1877 = zext i8 %1876 to i32
  %1878 = shl i32 %1871, %1877
  %1879 = shl i32 %1870, %1877
  %1880 = sub nsw i32 %1864, %1877
  br label %1881

1881:                                             ; preds = %1873, %1860
  %1882 = phi i32 [ %1880, %1873 ], [ %1861, %1860 ]
  %1883 = phi i32 [ %1879, %1873 ], [ %1870, %1860 ]
  %1884 = phi i32 [ %1878, %1873 ], [ %1871, %1860 ]
  %1885 = phi i32 [ %1880, %1873 ], [ %1864, %1860 ]
  br i1 %1867, label %2882, label %1886

1886:                                             ; preds = %1881
  %1887 = shl i32 %1884, 7
  %1888 = add i32 %1887, -128
  %1889 = lshr i32 %1888, 8
  %1890 = add nuw nsw i32 %1889, 1
  %1891 = icmp slt i32 %1885, 0
  %1892 = icmp ult i8* %1863, %33
  %1893 = and i1 %1891, %1892
  br i1 %1893, label %1894, label %2039

1894:                                             ; preds = %1886
  %1895 = sub nsw i32 0, %1885
  %1896 = xor i32 %1885, -1
  %1897 = sub i32 -8, %1885
  %1898 = icmp slt i32 %1897, -1
  %1899 = select i1 %1898, i32 %1897, i32 -1
  %1900 = sub i32 %1896, %1899
  %1901 = lshr i32 %1900, 3
  %1902 = zext i32 %1901 to i64
  %1903 = xor i64 %1865, -1
  %1904 = add i64 %1903, %30
  %1905 = getelementptr i8, i8* %28, i64 %1904
  %1906 = ptrtoint i8* %1905 to i64
  %1907 = icmp ult i64 %1902, %1906
  %1908 = select i1 %1907, i64 %1902, i64 %1906
  %1909 = inttoptr i64 %1908 to i8*
  %1910 = getelementptr i8, i8* %1909, i64 1
  %1911 = ptrtoint i8* %1910 to i64
  %1912 = icmp ult i8* %1910, inttoptr (i64 8 to i8*)
  br i1 %1912, label %2019, label %1913

1913:                                             ; preds = %1894
  %1914 = and i64 %1911, -8
  %1915 = trunc i64 %1914 to i32
  %1916 = mul i32 %1915, -8
  %1917 = sub i32 %1916, %1885
  %1918 = getelementptr i8, i8* %1863, i64 %1914
  %1919 = insertelement <4 x i32> undef, i32 %1895, i32 0
  %1920 = shufflevector <4 x i32> %1919, <4 x i32> undef, <4 x i32> zeroinitializer
  %1921 = add <4 x i32> %1920, <i32 0, i32 -8, i32 -16, i32 -24>
  %1922 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1885, i32 0
  %1923 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1883, i32 0
  %1924 = add i64 %1914, -8
  %1925 = lshr exact i64 %1924, 3
  %1926 = add nuw nsw i64 %1925, 1
  %1927 = and i64 %1926, 1
  %1928 = icmp eq i64 %1924, 0
  br i1 %1928, label %1973, label %1929

1929:                                             ; preds = %1913
  %1930 = sub nuw nsw i64 %1926, %1927
  br label %1931

1931:                                             ; preds = %1931, %1929
  %1932 = phi i64 [ 0, %1929 ], [ %1969, %1931 ]
  %1933 = phi <4 x i32> [ %1921, %1929 ], [ %1970, %1931 ]
  %1934 = phi <4 x i32> [ %1922, %1929 ], [ %1956, %1931 ]
  %1935 = phi <4 x i32> [ zeroinitializer, %1929 ], [ %1957, %1931 ]
  %1936 = phi <4 x i32> [ %1923, %1929 ], [ %1967, %1931 ]
  %1937 = phi <4 x i32> [ zeroinitializer, %1929 ], [ %1968, %1931 ]
  %1938 = phi i64 [ %1930, %1929 ], [ %1971, %1931 ]
  %1939 = add <4 x i32> %1933, <i32 -32, i32 -32, i32 -32, i32 -32>
  %1940 = getelementptr i8, i8* %1863, i64 %1932
  %1941 = bitcast i8* %1940 to <4 x i8>*
  %1942 = load <4 x i8>, <4 x i8>* %1941, align 1
  %1943 = getelementptr i8, i8* %1940, i64 4
  %1944 = bitcast i8* %1943 to <4 x i8>*
  %1945 = load <4 x i8>, <4 x i8>* %1944, align 1
  %1946 = zext <4 x i8> %1942 to <4 x i32>
  %1947 = zext <4 x i8> %1945 to <4 x i32>
  %1948 = shl <4 x i32> %1946, %1933
  %1949 = shl <4 x i32> %1947, %1939
  %1950 = or <4 x i32> %1948, %1936
  %1951 = or <4 x i32> %1949, %1937
  %1952 = or i64 %1932, 8
  %1953 = add <4 x i32> %1933, <i32 -64, i32 -64, i32 -64, i32 -64>
  %1954 = add <4 x i32> %1933, <i32 -96, i32 -96, i32 -96, i32 -96>
  %1955 = getelementptr i8, i8* %1863, i64 %1952
  %1956 = add nsw <4 x i32> %1934, <i32 16, i32 16, i32 16, i32 16>
  %1957 = add nuw nsw <4 x i32> %1935, <i32 16, i32 16, i32 16, i32 16>
  %1958 = bitcast i8* %1955 to <4 x i8>*
  %1959 = load <4 x i8>, <4 x i8>* %1958, align 1
  %1960 = getelementptr i8, i8* %1955, i64 4
  %1961 = bitcast i8* %1960 to <4 x i8>*
  %1962 = load <4 x i8>, <4 x i8>* %1961, align 1
  %1963 = zext <4 x i8> %1959 to <4 x i32>
  %1964 = zext <4 x i8> %1962 to <4 x i32>
  %1965 = shl <4 x i32> %1963, %1953
  %1966 = shl <4 x i32> %1964, %1954
  %1967 = or <4 x i32> %1965, %1950
  %1968 = or <4 x i32> %1966, %1951
  %1969 = add i64 %1932, 16
  %1970 = add <4 x i32> %1933, <i32 -128, i32 -128, i32 -128, i32 -128>
  %1971 = add i64 %1938, -2
  %1972 = icmp eq i64 %1971, 0
  br i1 %1972, label %1973, label %1931, !llvm.loop !20

1973:                                             ; preds = %1931, %1913
  %1974 = phi <4 x i32> [ undef, %1913 ], [ %1956, %1931 ]
  %1975 = phi <4 x i32> [ undef, %1913 ], [ %1957, %1931 ]
  %1976 = phi <4 x i32> [ undef, %1913 ], [ %1967, %1931 ]
  %1977 = phi <4 x i32> [ undef, %1913 ], [ %1968, %1931 ]
  %1978 = phi i64 [ 0, %1913 ], [ %1969, %1931 ]
  %1979 = phi <4 x i32> [ %1921, %1913 ], [ %1970, %1931 ]
  %1980 = phi <4 x i32> [ %1922, %1913 ], [ %1956, %1931 ]
  %1981 = phi <4 x i32> [ zeroinitializer, %1913 ], [ %1957, %1931 ]
  %1982 = phi <4 x i32> [ %1923, %1913 ], [ %1967, %1931 ]
  %1983 = phi <4 x i32> [ zeroinitializer, %1913 ], [ %1968, %1931 ]
  %1984 = icmp eq i64 %1927, 0
  br i1 %1984, label %2001, label %1985

1985:                                             ; preds = %1973
  %1986 = getelementptr i8, i8* %1863, i64 %1978
  %1987 = getelementptr i8, i8* %1986, i64 4
  %1988 = bitcast i8* %1987 to <4 x i8>*
  %1989 = load <4 x i8>, <4 x i8>* %1988, align 1
  %1990 = zext <4 x i8> %1989 to <4 x i32>
  %1991 = add <4 x i32> %1979, <i32 -32, i32 -32, i32 -32, i32 -32>
  %1992 = shl <4 x i32> %1990, %1991
  %1993 = or <4 x i32> %1992, %1983
  %1994 = bitcast i8* %1986 to <4 x i8>*
  %1995 = load <4 x i8>, <4 x i8>* %1994, align 1
  %1996 = zext <4 x i8> %1995 to <4 x i32>
  %1997 = shl <4 x i32> %1996, %1979
  %1998 = or <4 x i32> %1997, %1982
  %1999 = add nuw nsw <4 x i32> %1981, <i32 8, i32 8, i32 8, i32 8>
  %2000 = add nsw <4 x i32> %1980, <i32 8, i32 8, i32 8, i32 8>
  br label %2001

2001:                                             ; preds = %1973, %1985
  %2002 = phi <4 x i32> [ %1974, %1973 ], [ %2000, %1985 ]
  %2003 = phi <4 x i32> [ %1975, %1973 ], [ %1999, %1985 ]
  %2004 = phi <4 x i32> [ %1976, %1973 ], [ %1998, %1985 ]
  %2005 = phi <4 x i32> [ %1977, %1973 ], [ %1993, %1985 ]
  %2006 = or <4 x i32> %2005, %2004
  %2007 = shufflevector <4 x i32> %2006, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %2008 = or <4 x i32> %2006, %2007
  %2009 = shufflevector <4 x i32> %2008, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %2010 = or <4 x i32> %2008, %2009
  %2011 = extractelement <4 x i32> %2010, i32 0
  %2012 = add <4 x i32> %2003, %2002
  %2013 = shufflevector <4 x i32> %2012, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %2014 = add <4 x i32> %2012, %2013
  %2015 = shufflevector <4 x i32> %2014, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %2016 = add <4 x i32> %2014, %2015
  %2017 = extractelement <4 x i32> %2016, i32 0
  %2018 = icmp eq i64 %1914, %1911
  br i1 %2018, label %2039, label %2019

2019:                                             ; preds = %2001, %1894
  %2020 = phi i32 [ %1895, %1894 ], [ %1917, %2001 ]
  %2021 = phi i32 [ %1885, %1894 ], [ %2017, %2001 ]
  %2022 = phi i8* [ %1863, %1894 ], [ %1918, %2001 ]
  %2023 = phi i32 [ %1883, %1894 ], [ %2011, %2001 ]
  br label %2024

2024:                                             ; preds = %2019, %2024
  %2025 = phi i32 [ %2035, %2024 ], [ %2020, %2019 ]
  %2026 = phi i32 [ %2029, %2024 ], [ %2021, %2019 ]
  %2027 = phi i8* [ %2034, %2024 ], [ %2022, %2019 ]
  %2028 = phi i32 [ %2033, %2024 ], [ %2023, %2019 ]
  %2029 = add nsw i32 %2026, 8
  %2030 = load i8, i8* %2027, align 1
  %2031 = zext i8 %2030 to i32
  %2032 = shl i32 %2031, %2025
  %2033 = or i32 %2032, %2028
  %2034 = getelementptr inbounds i8, i8* %2027, i64 1
  %2035 = add nsw i32 %2025, -8
  %2036 = icmp sgt i32 %2035, -1
  %2037 = icmp ult i8* %2034, %33
  %2038 = and i1 %2036, %2037
  br i1 %2038, label %2024, label %2039, !llvm.loop !21

2039:                                             ; preds = %2024, %2001, %1886
  %2040 = phi i32 [ %1882, %1886 ], [ %2017, %2001 ], [ %2029, %2024 ]
  %2041 = phi i32 [ %1883, %1886 ], [ %2011, %2001 ], [ %2033, %2024 ]
  %2042 = phi i8* [ %1863, %1886 ], [ %1918, %2001 ], [ %2034, %2024 ]
  %2043 = phi i32 [ %1885, %1886 ], [ %2017, %2001 ], [ %2029, %2024 ]
  %2044 = shl i32 %1890, 8
  %2045 = icmp ult i32 %2041, %2044
  %2046 = sub i32 %1884, %1890
  %2047 = select i1 %2045, i32 0, i32 %2044
  %2048 = sub i32 %2041, %2047
  %2049 = select i1 %2045, i32 %1890, i32 %2046
  %2050 = icmp ult i32 %2049, 128
  br i1 %2050, label %2051, label %2059

2051:                                             ; preds = %2039
  %2052 = zext i32 %2049 to i64
  %2053 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %2052
  %2054 = load i8, i8* %2053, align 1
  %2055 = zext i8 %2054 to i32
  %2056 = shl i32 %2049, %2055
  %2057 = shl i32 %2048, %2055
  %2058 = sub nsw i32 %2043, %2055
  br label %2059

2059:                                             ; preds = %2051, %2039
  %2060 = phi i32 [ %2058, %2051 ], [ %2040, %2039 ]
  %2061 = phi i32 [ %2057, %2051 ], [ %2048, %2039 ]
  %2062 = phi i32 [ %2056, %2051 ], [ %2049, %2039 ]
  %2063 = phi i32 [ %2058, %2051 ], [ %2043, %2039 ]
  br i1 %2045, label %2882, label %2064

2064:                                             ; preds = %2059
  %2065 = add nsw i64 %30, -1
  %2066 = getelementptr i8, i8* %28, i64 %2065
  %2067 = add nsw i64 %30, -1
  %2068 = getelementptr i8, i8* %28, i64 %2067
  br label %2069

2069:                                             ; preds = %2064, %2462
  %2070 = phi i32 [ %2463, %2462 ], [ %2060, %2064 ]
  %2071 = phi i32 [ %2464, %2462 ], [ %2061, %2064 ]
  %2072 = phi i8* [ %2465, %2462 ], [ %2042, %2064 ]
  %2073 = phi i32 [ %2466, %2462 ], [ %2061, %2064 ]
  %2074 = phi i32 [ %2467, %2462 ], [ %2063, %2064 ]
  %2075 = phi i32 [ %2468, %2462 ], [ %2061, %2064 ]
  %2076 = phi i32 [ %2469, %2462 ], [ %2063, %2064 ]
  %2077 = phi i32 [ %2470, %2462 ], [ %2062, %2064 ]
  %2078 = phi i32 [ %2471, %2462 ], [ 0, %2064 ]
  %2079 = shl i32 %2077, 7
  %2080 = add i32 %2079, -128
  %2081 = lshr i32 %2080, 8
  %2082 = add nuw nsw i32 %2081, 1
  %2083 = icmp slt i32 %2076, 0
  %2084 = icmp ult i8* %2072, %33
  %2085 = and i1 %2083, %2084
  br i1 %2085, label %2086, label %2231

2086:                                             ; preds = %2069
  %2087 = ptrtoint i8* %2072 to i64
  %2088 = sub nsw i32 0, %2076
  %2089 = xor i32 %2076, -1
  %2090 = sub i32 -8, %2076
  %2091 = icmp slt i32 %2090, -1
  %2092 = select i1 %2091, i32 %2090, i32 -1
  %2093 = sub i32 %2089, %2092
  %2094 = lshr i32 %2093, 3
  %2095 = zext i32 %2094 to i64
  %2096 = sub i64 0, %2087
  %2097 = getelementptr i8, i8* %2068, i64 %2096
  %2098 = ptrtoint i8* %2097 to i64
  %2099 = icmp ult i64 %2095, %2098
  %2100 = select i1 %2099, i64 %2095, i64 %2098
  %2101 = inttoptr i64 %2100 to i8*
  %2102 = getelementptr i8, i8* %2101, i64 1
  %2103 = ptrtoint i8* %2102 to i64
  %2104 = icmp ult i8* %2102, inttoptr (i64 8 to i8*)
  br i1 %2104, label %2211, label %2105

2105:                                             ; preds = %2086
  %2106 = and i64 %2103, -8
  %2107 = trunc i64 %2106 to i32
  %2108 = mul i32 %2107, -8
  %2109 = sub i32 %2108, %2076
  %2110 = getelementptr i8, i8* %2072, i64 %2106
  %2111 = insertelement <4 x i32> undef, i32 %2088, i32 0
  %2112 = shufflevector <4 x i32> %2111, <4 x i32> undef, <4 x i32> zeroinitializer
  %2113 = add <4 x i32> %2112, <i32 0, i32 -8, i32 -16, i32 -24>
  %2114 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %2076, i32 0
  %2115 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %2075, i32 0
  %2116 = add i64 %2106, -8
  %2117 = lshr exact i64 %2116, 3
  %2118 = add nuw nsw i64 %2117, 1
  %2119 = and i64 %2118, 1
  %2120 = icmp eq i64 %2116, 0
  br i1 %2120, label %2165, label %2121

2121:                                             ; preds = %2105
  %2122 = sub nuw nsw i64 %2118, %2119
  br label %2123

2123:                                             ; preds = %2123, %2121
  %2124 = phi i64 [ 0, %2121 ], [ %2161, %2123 ]
  %2125 = phi <4 x i32> [ %2113, %2121 ], [ %2162, %2123 ]
  %2126 = phi <4 x i32> [ %2114, %2121 ], [ %2148, %2123 ]
  %2127 = phi <4 x i32> [ zeroinitializer, %2121 ], [ %2149, %2123 ]
  %2128 = phi <4 x i32> [ %2115, %2121 ], [ %2159, %2123 ]
  %2129 = phi <4 x i32> [ zeroinitializer, %2121 ], [ %2160, %2123 ]
  %2130 = phi i64 [ %2122, %2121 ], [ %2163, %2123 ]
  %2131 = add <4 x i32> %2125, <i32 -32, i32 -32, i32 -32, i32 -32>
  %2132 = getelementptr i8, i8* %2072, i64 %2124
  %2133 = bitcast i8* %2132 to <4 x i8>*
  %2134 = load <4 x i8>, <4 x i8>* %2133, align 1
  %2135 = getelementptr i8, i8* %2132, i64 4
  %2136 = bitcast i8* %2135 to <4 x i8>*
  %2137 = load <4 x i8>, <4 x i8>* %2136, align 1
  %2138 = zext <4 x i8> %2134 to <4 x i32>
  %2139 = zext <4 x i8> %2137 to <4 x i32>
  %2140 = shl <4 x i32> %2138, %2125
  %2141 = shl <4 x i32> %2139, %2131
  %2142 = or <4 x i32> %2140, %2128
  %2143 = or <4 x i32> %2141, %2129
  %2144 = or i64 %2124, 8
  %2145 = add <4 x i32> %2125, <i32 -64, i32 -64, i32 -64, i32 -64>
  %2146 = add <4 x i32> %2125, <i32 -96, i32 -96, i32 -96, i32 -96>
  %2147 = getelementptr i8, i8* %2072, i64 %2144
  %2148 = add nsw <4 x i32> %2126, <i32 16, i32 16, i32 16, i32 16>
  %2149 = add nuw nsw <4 x i32> %2127, <i32 16, i32 16, i32 16, i32 16>
  %2150 = bitcast i8* %2147 to <4 x i8>*
  %2151 = load <4 x i8>, <4 x i8>* %2150, align 1
  %2152 = getelementptr i8, i8* %2147, i64 4
  %2153 = bitcast i8* %2152 to <4 x i8>*
  %2154 = load <4 x i8>, <4 x i8>* %2153, align 1
  %2155 = zext <4 x i8> %2151 to <4 x i32>
  %2156 = zext <4 x i8> %2154 to <4 x i32>
  %2157 = shl <4 x i32> %2155, %2145
  %2158 = shl <4 x i32> %2156, %2146
  %2159 = or <4 x i32> %2157, %2142
  %2160 = or <4 x i32> %2158, %2143
  %2161 = add i64 %2124, 16
  %2162 = add <4 x i32> %2125, <i32 -128, i32 -128, i32 -128, i32 -128>
  %2163 = add i64 %2130, -2
  %2164 = icmp eq i64 %2163, 0
  br i1 %2164, label %2165, label %2123, !llvm.loop !22

2165:                                             ; preds = %2123, %2105
  %2166 = phi <4 x i32> [ undef, %2105 ], [ %2148, %2123 ]
  %2167 = phi <4 x i32> [ undef, %2105 ], [ %2149, %2123 ]
  %2168 = phi <4 x i32> [ undef, %2105 ], [ %2159, %2123 ]
  %2169 = phi <4 x i32> [ undef, %2105 ], [ %2160, %2123 ]
  %2170 = phi i64 [ 0, %2105 ], [ %2161, %2123 ]
  %2171 = phi <4 x i32> [ %2113, %2105 ], [ %2162, %2123 ]
  %2172 = phi <4 x i32> [ %2114, %2105 ], [ %2148, %2123 ]
  %2173 = phi <4 x i32> [ zeroinitializer, %2105 ], [ %2149, %2123 ]
  %2174 = phi <4 x i32> [ %2115, %2105 ], [ %2159, %2123 ]
  %2175 = phi <4 x i32> [ zeroinitializer, %2105 ], [ %2160, %2123 ]
  %2176 = icmp eq i64 %2119, 0
  br i1 %2176, label %2193, label %2177

2177:                                             ; preds = %2165
  %2178 = getelementptr i8, i8* %2072, i64 %2170
  %2179 = getelementptr i8, i8* %2178, i64 4
  %2180 = bitcast i8* %2179 to <4 x i8>*
  %2181 = load <4 x i8>, <4 x i8>* %2180, align 1
  %2182 = zext <4 x i8> %2181 to <4 x i32>
  %2183 = add <4 x i32> %2171, <i32 -32, i32 -32, i32 -32, i32 -32>
  %2184 = shl <4 x i32> %2182, %2183
  %2185 = or <4 x i32> %2184, %2175
  %2186 = bitcast i8* %2178 to <4 x i8>*
  %2187 = load <4 x i8>, <4 x i8>* %2186, align 1
  %2188 = zext <4 x i8> %2187 to <4 x i32>
  %2189 = shl <4 x i32> %2188, %2171
  %2190 = or <4 x i32> %2189, %2174
  %2191 = add nuw nsw <4 x i32> %2173, <i32 8, i32 8, i32 8, i32 8>
  %2192 = add nsw <4 x i32> %2172, <i32 8, i32 8, i32 8, i32 8>
  br label %2193

2193:                                             ; preds = %2165, %2177
  %2194 = phi <4 x i32> [ %2166, %2165 ], [ %2192, %2177 ]
  %2195 = phi <4 x i32> [ %2167, %2165 ], [ %2191, %2177 ]
  %2196 = phi <4 x i32> [ %2168, %2165 ], [ %2190, %2177 ]
  %2197 = phi <4 x i32> [ %2169, %2165 ], [ %2185, %2177 ]
  %2198 = or <4 x i32> %2197, %2196
  %2199 = shufflevector <4 x i32> %2198, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %2200 = or <4 x i32> %2198, %2199
  %2201 = shufflevector <4 x i32> %2200, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %2202 = or <4 x i32> %2200, %2201
  %2203 = extractelement <4 x i32> %2202, i32 0
  %2204 = add <4 x i32> %2195, %2194
  %2205 = shufflevector <4 x i32> %2204, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %2206 = add <4 x i32> %2204, %2205
  %2207 = shufflevector <4 x i32> %2206, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %2208 = add <4 x i32> %2206, %2207
  %2209 = extractelement <4 x i32> %2208, i32 0
  %2210 = icmp eq i64 %2106, %2103
  br i1 %2210, label %2231, label %2211

2211:                                             ; preds = %2193, %2086
  %2212 = phi i32 [ %2088, %2086 ], [ %2109, %2193 ]
  %2213 = phi i32 [ %2076, %2086 ], [ %2209, %2193 ]
  %2214 = phi i32 [ %2075, %2086 ], [ %2203, %2193 ]
  %2215 = phi i8* [ %2072, %2086 ], [ %2110, %2193 ]
  br label %2216

2216:                                             ; preds = %2211, %2216
  %2217 = phi i32 [ %2227, %2216 ], [ %2212, %2211 ]
  %2218 = phi i32 [ %2221, %2216 ], [ %2213, %2211 ]
  %2219 = phi i32 [ %2225, %2216 ], [ %2214, %2211 ]
  %2220 = phi i8* [ %2226, %2216 ], [ %2215, %2211 ]
  %2221 = add nsw i32 %2218, 8
  %2222 = load i8, i8* %2220, align 1
  %2223 = zext i8 %2222 to i32
  %2224 = shl i32 %2223, %2217
  %2225 = or i32 %2224, %2219
  %2226 = getelementptr inbounds i8, i8* %2220, i64 1
  %2227 = add nsw i32 %2217, -8
  %2228 = icmp sgt i32 %2227, -1
  %2229 = icmp ult i8* %2226, %33
  %2230 = and i1 %2228, %2229
  br i1 %2230, label %2216, label %2231, !llvm.loop !23

2231:                                             ; preds = %2216, %2193, %2069
  %2232 = phi i32 [ %2070, %2069 ], [ %2209, %2193 ], [ %2221, %2216 ]
  %2233 = phi i32 [ %2071, %2069 ], [ %2203, %2193 ], [ %2225, %2216 ]
  %2234 = phi i8* [ %2072, %2069 ], [ %2110, %2193 ], [ %2226, %2216 ]
  %2235 = phi i32 [ %2073, %2069 ], [ %2203, %2193 ], [ %2225, %2216 ]
  %2236 = phi i32 [ %2074, %2069 ], [ %2209, %2193 ], [ %2221, %2216 ]
  %2237 = phi i32 [ %2075, %2069 ], [ %2203, %2193 ], [ %2225, %2216 ]
  %2238 = phi i32 [ %2076, %2069 ], [ %2209, %2193 ], [ %2221, %2216 ]
  %2239 = shl i32 %2082, 8
  %2240 = icmp ult i32 %2237, %2239
  br i1 %2240, label %2244, label %2241

2241:                                             ; preds = %2231
  %2242 = sub i32 %2077, %2082
  %2243 = sub i32 %2237, %2239
  br label %2244

2244:                                             ; preds = %2231, %2241
  %2245 = phi i32 [ %2243, %2241 ], [ %2233, %2231 ]
  %2246 = phi i32 [ %2243, %2241 ], [ %2235, %2231 ]
  %2247 = phi i32 [ %2243, %2241 ], [ %2237, %2231 ]
  %2248 = phi i32 [ %2242, %2241 ], [ %2082, %2231 ]
  %2249 = phi i32 [ 1, %2241 ], [ 0, %2231 ]
  %2250 = icmp ult i32 %2248, 128
  br i1 %2250, label %2251, label %2259

2251:                                             ; preds = %2244
  %2252 = zext i32 %2248 to i64
  %2253 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %2252
  %2254 = load i8, i8* %2253, align 1
  %2255 = zext i8 %2254 to i32
  %2256 = shl i32 %2248, %2255
  %2257 = shl i32 %2247, %2255
  %2258 = sub nsw i32 %2238, %2255
  br label %2259

2259:                                             ; preds = %2251, %2244
  %2260 = phi i32 [ %2258, %2251 ], [ %2232, %2244 ]
  %2261 = phi i32 [ %2257, %2251 ], [ %2245, %2244 ]
  %2262 = phi i32 [ %2257, %2251 ], [ %2246, %2244 ]
  %2263 = phi i32 [ %2258, %2251 ], [ %2236, %2244 ]
  %2264 = phi i32 [ %2257, %2251 ], [ %2247, %2244 ]
  %2265 = phi i32 [ %2258, %2251 ], [ %2238, %2244 ]
  %2266 = phi i32 [ %2256, %2251 ], [ %2248, %2244 ]
  %2267 = icmp eq i32 %2249, 0
  br i1 %2267, label %2462, label %2268

2268:                                             ; preds = %2259, %2454
  %2269 = phi i32 [ %2455, %2454 ], [ %2260, %2259 ]
  %2270 = phi i32 [ %2456, %2454 ], [ %2261, %2259 ]
  %2271 = phi i8* [ %2434, %2454 ], [ %2234, %2259 ]
  %2272 = phi i32 [ %2457, %2454 ], [ %2262, %2259 ]
  %2273 = phi i32 [ %2457, %2454 ], [ %2264, %2259 ]
  %2274 = phi i32 [ %2458, %2454 ], [ %2263, %2259 ]
  %2275 = phi i32 [ %2459, %2454 ], [ %2263, %2259 ]
  %2276 = phi i32 [ %2460, %2454 ], [ %2266, %2259 ]
  %2277 = phi i32 [ %2278, %2454 ], [ 7, %2259 ]
  %2278 = add nsw i32 %2277, -1
  %2279 = shl i32 %2276, 7
  %2280 = add i32 %2279, -128
  %2281 = lshr i32 %2280, 8
  %2282 = add nuw nsw i32 %2281, 1
  %2283 = icmp slt i32 %2275, 0
  %2284 = icmp ult i8* %2271, %33
  %2285 = and i1 %2283, %2284
  br i1 %2285, label %2286, label %2431

2286:                                             ; preds = %2268
  %2287 = ptrtoint i8* %2271 to i64
  %2288 = sub nsw i32 0, %2275
  %2289 = xor i32 %2275, -1
  %2290 = sub i32 -8, %2275
  %2291 = icmp slt i32 %2290, -1
  %2292 = select i1 %2291, i32 %2290, i32 -1
  %2293 = sub i32 %2289, %2292
  %2294 = lshr i32 %2293, 3
  %2295 = zext i32 %2294 to i64
  %2296 = sub i64 0, %2287
  %2297 = getelementptr i8, i8* %2066, i64 %2296
  %2298 = ptrtoint i8* %2297 to i64
  %2299 = icmp ult i64 %2295, %2298
  %2300 = select i1 %2299, i64 %2295, i64 %2298
  %2301 = inttoptr i64 %2300 to i8*
  %2302 = getelementptr i8, i8* %2301, i64 1
  %2303 = ptrtoint i8* %2302 to i64
  %2304 = icmp ult i8* %2302, inttoptr (i64 8 to i8*)
  br i1 %2304, label %2411, label %2305

2305:                                             ; preds = %2286
  %2306 = and i64 %2303, -8
  %2307 = trunc i64 %2306 to i32
  %2308 = mul i32 %2307, -8
  %2309 = sub i32 %2308, %2275
  %2310 = getelementptr i8, i8* %2271, i64 %2306
  %2311 = insertelement <4 x i32> undef, i32 %2288, i32 0
  %2312 = shufflevector <4 x i32> %2311, <4 x i32> undef, <4 x i32> zeroinitializer
  %2313 = add <4 x i32> %2312, <i32 0, i32 -8, i32 -16, i32 -24>
  %2314 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %2275, i32 0
  %2315 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %2273, i32 0
  %2316 = add i64 %2306, -8
  %2317 = lshr exact i64 %2316, 3
  %2318 = add nuw nsw i64 %2317, 1
  %2319 = and i64 %2318, 1
  %2320 = icmp eq i64 %2316, 0
  br i1 %2320, label %2365, label %2321

2321:                                             ; preds = %2305
  %2322 = sub nuw nsw i64 %2318, %2319
  br label %2323

2323:                                             ; preds = %2323, %2321
  %2324 = phi i64 [ 0, %2321 ], [ %2361, %2323 ]
  %2325 = phi <4 x i32> [ %2313, %2321 ], [ %2362, %2323 ]
  %2326 = phi <4 x i32> [ %2314, %2321 ], [ %2348, %2323 ]
  %2327 = phi <4 x i32> [ zeroinitializer, %2321 ], [ %2349, %2323 ]
  %2328 = phi <4 x i32> [ %2315, %2321 ], [ %2359, %2323 ]
  %2329 = phi <4 x i32> [ zeroinitializer, %2321 ], [ %2360, %2323 ]
  %2330 = phi i64 [ %2322, %2321 ], [ %2363, %2323 ]
  %2331 = add <4 x i32> %2325, <i32 -32, i32 -32, i32 -32, i32 -32>
  %2332 = getelementptr i8, i8* %2271, i64 %2324
  %2333 = bitcast i8* %2332 to <4 x i8>*
  %2334 = load <4 x i8>, <4 x i8>* %2333, align 1
  %2335 = getelementptr i8, i8* %2332, i64 4
  %2336 = bitcast i8* %2335 to <4 x i8>*
  %2337 = load <4 x i8>, <4 x i8>* %2336, align 1
  %2338 = zext <4 x i8> %2334 to <4 x i32>
  %2339 = zext <4 x i8> %2337 to <4 x i32>
  %2340 = shl <4 x i32> %2338, %2325
  %2341 = shl <4 x i32> %2339, %2331
  %2342 = or <4 x i32> %2340, %2328
  %2343 = or <4 x i32> %2341, %2329
  %2344 = or i64 %2324, 8
  %2345 = add <4 x i32> %2325, <i32 -64, i32 -64, i32 -64, i32 -64>
  %2346 = add <4 x i32> %2325, <i32 -96, i32 -96, i32 -96, i32 -96>
  %2347 = getelementptr i8, i8* %2271, i64 %2344
  %2348 = add nsw <4 x i32> %2326, <i32 16, i32 16, i32 16, i32 16>
  %2349 = add nuw nsw <4 x i32> %2327, <i32 16, i32 16, i32 16, i32 16>
  %2350 = bitcast i8* %2347 to <4 x i8>*
  %2351 = load <4 x i8>, <4 x i8>* %2350, align 1
  %2352 = getelementptr i8, i8* %2347, i64 4
  %2353 = bitcast i8* %2352 to <4 x i8>*
  %2354 = load <4 x i8>, <4 x i8>* %2353, align 1
  %2355 = zext <4 x i8> %2351 to <4 x i32>
  %2356 = zext <4 x i8> %2354 to <4 x i32>
  %2357 = shl <4 x i32> %2355, %2345
  %2358 = shl <4 x i32> %2356, %2346
  %2359 = or <4 x i32> %2357, %2342
  %2360 = or <4 x i32> %2358, %2343
  %2361 = add i64 %2324, 16
  %2362 = add <4 x i32> %2325, <i32 -128, i32 -128, i32 -128, i32 -128>
  %2363 = add i64 %2330, -2
  %2364 = icmp eq i64 %2363, 0
  br i1 %2364, label %2365, label %2323, !llvm.loop !24

2365:                                             ; preds = %2323, %2305
  %2366 = phi <4 x i32> [ undef, %2305 ], [ %2348, %2323 ]
  %2367 = phi <4 x i32> [ undef, %2305 ], [ %2349, %2323 ]
  %2368 = phi <4 x i32> [ undef, %2305 ], [ %2359, %2323 ]
  %2369 = phi <4 x i32> [ undef, %2305 ], [ %2360, %2323 ]
  %2370 = phi i64 [ 0, %2305 ], [ %2361, %2323 ]
  %2371 = phi <4 x i32> [ %2313, %2305 ], [ %2362, %2323 ]
  %2372 = phi <4 x i32> [ %2314, %2305 ], [ %2348, %2323 ]
  %2373 = phi <4 x i32> [ zeroinitializer, %2305 ], [ %2349, %2323 ]
  %2374 = phi <4 x i32> [ %2315, %2305 ], [ %2359, %2323 ]
  %2375 = phi <4 x i32> [ zeroinitializer, %2305 ], [ %2360, %2323 ]
  %2376 = icmp eq i64 %2319, 0
  br i1 %2376, label %2393, label %2377

2377:                                             ; preds = %2365
  %2378 = getelementptr i8, i8* %2271, i64 %2370
  %2379 = getelementptr i8, i8* %2378, i64 4
  %2380 = bitcast i8* %2379 to <4 x i8>*
  %2381 = load <4 x i8>, <4 x i8>* %2380, align 1
  %2382 = zext <4 x i8> %2381 to <4 x i32>
  %2383 = add <4 x i32> %2371, <i32 -32, i32 -32, i32 -32, i32 -32>
  %2384 = shl <4 x i32> %2382, %2383
  %2385 = or <4 x i32> %2384, %2375
  %2386 = bitcast i8* %2378 to <4 x i8>*
  %2387 = load <4 x i8>, <4 x i8>* %2386, align 1
  %2388 = zext <4 x i8> %2387 to <4 x i32>
  %2389 = shl <4 x i32> %2388, %2371
  %2390 = or <4 x i32> %2389, %2374
  %2391 = add nuw nsw <4 x i32> %2373, <i32 8, i32 8, i32 8, i32 8>
  %2392 = add nsw <4 x i32> %2372, <i32 8, i32 8, i32 8, i32 8>
  br label %2393

2393:                                             ; preds = %2365, %2377
  %2394 = phi <4 x i32> [ %2366, %2365 ], [ %2392, %2377 ]
  %2395 = phi <4 x i32> [ %2367, %2365 ], [ %2391, %2377 ]
  %2396 = phi <4 x i32> [ %2368, %2365 ], [ %2390, %2377 ]
  %2397 = phi <4 x i32> [ %2369, %2365 ], [ %2385, %2377 ]
  %2398 = or <4 x i32> %2397, %2396
  %2399 = shufflevector <4 x i32> %2398, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %2400 = or <4 x i32> %2398, %2399
  %2401 = shufflevector <4 x i32> %2400, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %2402 = or <4 x i32> %2400, %2401
  %2403 = extractelement <4 x i32> %2402, i32 0
  %2404 = add <4 x i32> %2395, %2394
  %2405 = shufflevector <4 x i32> %2404, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %2406 = add <4 x i32> %2404, %2405
  %2407 = shufflevector <4 x i32> %2406, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %2408 = add <4 x i32> %2406, %2407
  %2409 = extractelement <4 x i32> %2408, i32 0
  %2410 = icmp eq i64 %2306, %2303
  br i1 %2410, label %2431, label %2411

2411:                                             ; preds = %2393, %2286
  %2412 = phi i32 [ %2288, %2286 ], [ %2309, %2393 ]
  %2413 = phi i32 [ %2275, %2286 ], [ %2409, %2393 ]
  %2414 = phi i32 [ %2273, %2286 ], [ %2403, %2393 ]
  %2415 = phi i8* [ %2271, %2286 ], [ %2310, %2393 ]
  br label %2416

2416:                                             ; preds = %2411, %2416
  %2417 = phi i32 [ %2427, %2416 ], [ %2412, %2411 ]
  %2418 = phi i32 [ %2421, %2416 ], [ %2413, %2411 ]
  %2419 = phi i32 [ %2425, %2416 ], [ %2414, %2411 ]
  %2420 = phi i8* [ %2426, %2416 ], [ %2415, %2411 ]
  %2421 = add nsw i32 %2418, 8
  %2422 = load i8, i8* %2420, align 1
  %2423 = zext i8 %2422 to i32
  %2424 = shl i32 %2423, %2417
  %2425 = or i32 %2424, %2419
  %2426 = getelementptr inbounds i8, i8* %2420, i64 1
  %2427 = add nsw i32 %2417, -8
  %2428 = icmp sgt i32 %2427, -1
  %2429 = icmp ult i8* %2426, %33
  %2430 = and i1 %2428, %2429
  br i1 %2430, label %2416, label %2431, !llvm.loop !25

2431:                                             ; preds = %2416, %2393, %2268
  %2432 = phi i32 [ %2269, %2268 ], [ %2409, %2393 ], [ %2421, %2416 ]
  %2433 = phi i32 [ %2270, %2268 ], [ %2403, %2393 ], [ %2425, %2416 ]
  %2434 = phi i8* [ %2271, %2268 ], [ %2310, %2393 ], [ %2426, %2416 ]
  %2435 = phi i32 [ %2272, %2268 ], [ %2403, %2393 ], [ %2425, %2416 ]
  %2436 = phi i32 [ %2274, %2268 ], [ %2409, %2393 ], [ %2421, %2416 ]
  %2437 = phi i32 [ %2275, %2268 ], [ %2409, %2393 ], [ %2421, %2416 ]
  %2438 = shl i32 %2282, 8
  %2439 = icmp ult i32 %2435, %2438
  %2440 = sub i32 %2276, %2282
  %2441 = sub i32 %2435, %2438
  %2442 = select i1 %2439, i32 %2433, i32 %2441
  %2443 = select i1 %2439, i32 %2435, i32 %2441
  %2444 = select i1 %2439, i32 %2282, i32 %2440
  %2445 = icmp ult i32 %2444, 128
  br i1 %2445, label %2446, label %2454

2446:                                             ; preds = %2431
  %2447 = zext i32 %2444 to i64
  %2448 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %2447
  %2449 = load i8, i8* %2448, align 1
  %2450 = zext i8 %2449 to i32
  %2451 = shl i32 %2444, %2450
  %2452 = shl i32 %2443, %2450
  %2453 = sub nsw i32 %2437, %2450
  br label %2454

2454:                                             ; preds = %2446, %2431
  %2455 = phi i32 [ %2453, %2446 ], [ %2432, %2431 ]
  %2456 = phi i32 [ %2452, %2446 ], [ %2442, %2431 ]
  %2457 = phi i32 [ %2452, %2446 ], [ %2443, %2431 ]
  %2458 = phi i32 [ %2453, %2446 ], [ %2436, %2431 ]
  %2459 = phi i32 [ %2453, %2446 ], [ %2437, %2431 ]
  %2460 = phi i32 [ %2451, %2446 ], [ %2444, %2431 ]
  %2461 = icmp eq i32 %2278, 0
  br i1 %2461, label %2462, label %2268

2462:                                             ; preds = %2454, %2259
  %2463 = phi i32 [ %2260, %2259 ], [ %2455, %2454 ]
  %2464 = phi i32 [ %2261, %2259 ], [ %2456, %2454 ]
  %2465 = phi i8* [ %2234, %2259 ], [ %2434, %2454 ]
  %2466 = phi i32 [ %2262, %2259 ], [ %2457, %2454 ]
  %2467 = phi i32 [ %2263, %2259 ], [ %2458, %2454 ]
  %2468 = phi i32 [ %2264, %2259 ], [ %2457, %2454 ]
  %2469 = phi i32 [ %2265, %2259 ], [ %2459, %2454 ]
  %2470 = phi i32 [ %2266, %2259 ], [ %2460, %2454 ]
  %2471 = add nuw nsw i32 %2078, 1
  %2472 = icmp eq i32 %2471, 4
  br i1 %2472, label %2473, label %2069

2473:                                             ; preds = %2462
  %2474 = add nsw i64 %30, -1
  %2475 = getelementptr i8, i8* %28, i64 %2474
  %2476 = add nsw i64 %30, -1
  %2477 = getelementptr i8, i8* %28, i64 %2476
  br label %2478

2478:                                             ; preds = %2473, %2871
  %2479 = phi i32 [ %2872, %2871 ], [ %2463, %2473 ]
  %2480 = phi i32 [ %2873, %2871 ], [ %2464, %2473 ]
  %2481 = phi i8* [ %2875, %2871 ], [ %2465, %2473 ]
  %2482 = phi i32 [ %2876, %2871 ], [ %2466, %2473 ]
  %2483 = phi i32 [ %2877, %2871 ], [ %2467, %2473 ]
  %2484 = phi i32 [ %2878, %2871 ], [ %2466, %2473 ]
  %2485 = phi i32 [ %2879, %2871 ], [ %2467, %2473 ]
  %2486 = phi i32 [ %2874, %2871 ], [ %2470, %2473 ]
  %2487 = phi i32 [ %2880, %2871 ], [ 0, %2473 ]
  %2488 = shl i32 %2486, 7
  %2489 = add i32 %2488, -128
  %2490 = lshr i32 %2489, 8
  %2491 = add nuw nsw i32 %2490, 1
  %2492 = icmp slt i32 %2485, 0
  %2493 = icmp ult i8* %2481, %33
  %2494 = and i1 %2492, %2493
  br i1 %2494, label %2495, label %2640

2495:                                             ; preds = %2478
  %2496 = ptrtoint i8* %2481 to i64
  %2497 = sub nsw i32 0, %2485
  %2498 = xor i32 %2485, -1
  %2499 = sub i32 -8, %2485
  %2500 = icmp slt i32 %2499, -1
  %2501 = select i1 %2500, i32 %2499, i32 -1
  %2502 = sub i32 %2498, %2501
  %2503 = lshr i32 %2502, 3
  %2504 = zext i32 %2503 to i64
  %2505 = sub i64 0, %2496
  %2506 = getelementptr i8, i8* %2477, i64 %2505
  %2507 = ptrtoint i8* %2506 to i64
  %2508 = icmp ult i64 %2504, %2507
  %2509 = select i1 %2508, i64 %2504, i64 %2507
  %2510 = inttoptr i64 %2509 to i8*
  %2511 = getelementptr i8, i8* %2510, i64 1
  %2512 = ptrtoint i8* %2511 to i64
  %2513 = icmp ult i8* %2511, inttoptr (i64 8 to i8*)
  br i1 %2513, label %2620, label %2514

2514:                                             ; preds = %2495
  %2515 = and i64 %2512, -8
  %2516 = trunc i64 %2515 to i32
  %2517 = mul i32 %2516, -8
  %2518 = sub i32 %2517, %2485
  %2519 = getelementptr i8, i8* %2481, i64 %2515
  %2520 = insertelement <4 x i32> undef, i32 %2497, i32 0
  %2521 = shufflevector <4 x i32> %2520, <4 x i32> undef, <4 x i32> zeroinitializer
  %2522 = add <4 x i32> %2521, <i32 0, i32 -8, i32 -16, i32 -24>
  %2523 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %2485, i32 0
  %2524 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %2484, i32 0
  %2525 = add i64 %2515, -8
  %2526 = lshr exact i64 %2525, 3
  %2527 = add nuw nsw i64 %2526, 1
  %2528 = and i64 %2527, 1
  %2529 = icmp eq i64 %2525, 0
  br i1 %2529, label %2574, label %2530

2530:                                             ; preds = %2514
  %2531 = sub nuw nsw i64 %2527, %2528
  br label %2532

2532:                                             ; preds = %2532, %2530
  %2533 = phi i64 [ 0, %2530 ], [ %2570, %2532 ]
  %2534 = phi <4 x i32> [ %2522, %2530 ], [ %2571, %2532 ]
  %2535 = phi <4 x i32> [ %2523, %2530 ], [ %2557, %2532 ]
  %2536 = phi <4 x i32> [ zeroinitializer, %2530 ], [ %2558, %2532 ]
  %2537 = phi <4 x i32> [ %2524, %2530 ], [ %2568, %2532 ]
  %2538 = phi <4 x i32> [ zeroinitializer, %2530 ], [ %2569, %2532 ]
  %2539 = phi i64 [ %2531, %2530 ], [ %2572, %2532 ]
  %2540 = add <4 x i32> %2534, <i32 -32, i32 -32, i32 -32, i32 -32>
  %2541 = getelementptr i8, i8* %2481, i64 %2533
  %2542 = bitcast i8* %2541 to <4 x i8>*
  %2543 = load <4 x i8>, <4 x i8>* %2542, align 1
  %2544 = getelementptr i8, i8* %2541, i64 4
  %2545 = bitcast i8* %2544 to <4 x i8>*
  %2546 = load <4 x i8>, <4 x i8>* %2545, align 1
  %2547 = zext <4 x i8> %2543 to <4 x i32>
  %2548 = zext <4 x i8> %2546 to <4 x i32>
  %2549 = shl <4 x i32> %2547, %2534
  %2550 = shl <4 x i32> %2548, %2540
  %2551 = or <4 x i32> %2549, %2537
  %2552 = or <4 x i32> %2550, %2538
  %2553 = or i64 %2533, 8
  %2554 = add <4 x i32> %2534, <i32 -64, i32 -64, i32 -64, i32 -64>
  %2555 = add <4 x i32> %2534, <i32 -96, i32 -96, i32 -96, i32 -96>
  %2556 = getelementptr i8, i8* %2481, i64 %2553
  %2557 = add nsw <4 x i32> %2535, <i32 16, i32 16, i32 16, i32 16>
  %2558 = add nuw nsw <4 x i32> %2536, <i32 16, i32 16, i32 16, i32 16>
  %2559 = bitcast i8* %2556 to <4 x i8>*
  %2560 = load <4 x i8>, <4 x i8>* %2559, align 1
  %2561 = getelementptr i8, i8* %2556, i64 4
  %2562 = bitcast i8* %2561 to <4 x i8>*
  %2563 = load <4 x i8>, <4 x i8>* %2562, align 1
  %2564 = zext <4 x i8> %2560 to <4 x i32>
  %2565 = zext <4 x i8> %2563 to <4 x i32>
  %2566 = shl <4 x i32> %2564, %2554
  %2567 = shl <4 x i32> %2565, %2555
  %2568 = or <4 x i32> %2566, %2551
  %2569 = or <4 x i32> %2567, %2552
  %2570 = add i64 %2533, 16
  %2571 = add <4 x i32> %2534, <i32 -128, i32 -128, i32 -128, i32 -128>
  %2572 = add i64 %2539, -2
  %2573 = icmp eq i64 %2572, 0
  br i1 %2573, label %2574, label %2532, !llvm.loop !26

2574:                                             ; preds = %2532, %2514
  %2575 = phi <4 x i32> [ undef, %2514 ], [ %2557, %2532 ]
  %2576 = phi <4 x i32> [ undef, %2514 ], [ %2558, %2532 ]
  %2577 = phi <4 x i32> [ undef, %2514 ], [ %2568, %2532 ]
  %2578 = phi <4 x i32> [ undef, %2514 ], [ %2569, %2532 ]
  %2579 = phi i64 [ 0, %2514 ], [ %2570, %2532 ]
  %2580 = phi <4 x i32> [ %2522, %2514 ], [ %2571, %2532 ]
  %2581 = phi <4 x i32> [ %2523, %2514 ], [ %2557, %2532 ]
  %2582 = phi <4 x i32> [ zeroinitializer, %2514 ], [ %2558, %2532 ]
  %2583 = phi <4 x i32> [ %2524, %2514 ], [ %2568, %2532 ]
  %2584 = phi <4 x i32> [ zeroinitializer, %2514 ], [ %2569, %2532 ]
  %2585 = icmp eq i64 %2528, 0
  br i1 %2585, label %2602, label %2586

2586:                                             ; preds = %2574
  %2587 = getelementptr i8, i8* %2481, i64 %2579
  %2588 = getelementptr i8, i8* %2587, i64 4
  %2589 = bitcast i8* %2588 to <4 x i8>*
  %2590 = load <4 x i8>, <4 x i8>* %2589, align 1
  %2591 = zext <4 x i8> %2590 to <4 x i32>
  %2592 = add <4 x i32> %2580, <i32 -32, i32 -32, i32 -32, i32 -32>
  %2593 = shl <4 x i32> %2591, %2592
  %2594 = or <4 x i32> %2593, %2584
  %2595 = bitcast i8* %2587 to <4 x i8>*
  %2596 = load <4 x i8>, <4 x i8>* %2595, align 1
  %2597 = zext <4 x i8> %2596 to <4 x i32>
  %2598 = shl <4 x i32> %2597, %2580
  %2599 = or <4 x i32> %2598, %2583
  %2600 = add nuw nsw <4 x i32> %2582, <i32 8, i32 8, i32 8, i32 8>
  %2601 = add nsw <4 x i32> %2581, <i32 8, i32 8, i32 8, i32 8>
  br label %2602

2602:                                             ; preds = %2574, %2586
  %2603 = phi <4 x i32> [ %2575, %2574 ], [ %2601, %2586 ]
  %2604 = phi <4 x i32> [ %2576, %2574 ], [ %2600, %2586 ]
  %2605 = phi <4 x i32> [ %2577, %2574 ], [ %2599, %2586 ]
  %2606 = phi <4 x i32> [ %2578, %2574 ], [ %2594, %2586 ]
  %2607 = or <4 x i32> %2606, %2605
  %2608 = shufflevector <4 x i32> %2607, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %2609 = or <4 x i32> %2607, %2608
  %2610 = shufflevector <4 x i32> %2609, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %2611 = or <4 x i32> %2609, %2610
  %2612 = extractelement <4 x i32> %2611, i32 0
  %2613 = add <4 x i32> %2604, %2603
  %2614 = shufflevector <4 x i32> %2613, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %2615 = add <4 x i32> %2613, %2614
  %2616 = shufflevector <4 x i32> %2615, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %2617 = add <4 x i32> %2615, %2616
  %2618 = extractelement <4 x i32> %2617, i32 0
  %2619 = icmp eq i64 %2515, %2512
  br i1 %2619, label %2640, label %2620

2620:                                             ; preds = %2602, %2495
  %2621 = phi i32 [ %2497, %2495 ], [ %2518, %2602 ]
  %2622 = phi i32 [ %2485, %2495 ], [ %2618, %2602 ]
  %2623 = phi i32 [ %2484, %2495 ], [ %2612, %2602 ]
  %2624 = phi i8* [ %2481, %2495 ], [ %2519, %2602 ]
  br label %2625

2625:                                             ; preds = %2620, %2625
  %2626 = phi i32 [ %2636, %2625 ], [ %2621, %2620 ]
  %2627 = phi i32 [ %2630, %2625 ], [ %2622, %2620 ]
  %2628 = phi i32 [ %2634, %2625 ], [ %2623, %2620 ]
  %2629 = phi i8* [ %2635, %2625 ], [ %2624, %2620 ]
  %2630 = add nsw i32 %2627, 8
  %2631 = load i8, i8* %2629, align 1
  %2632 = zext i8 %2631 to i32
  %2633 = shl i32 %2632, %2626
  %2634 = or i32 %2633, %2628
  %2635 = getelementptr inbounds i8, i8* %2629, i64 1
  %2636 = add nsw i32 %2626, -8
  %2637 = icmp sgt i32 %2636, -1
  %2638 = icmp ult i8* %2635, %33
  %2639 = and i1 %2637, %2638
  br i1 %2639, label %2625, label %2640, !llvm.loop !27

2640:                                             ; preds = %2625, %2602, %2478
  %2641 = phi i32 [ %2479, %2478 ], [ %2618, %2602 ], [ %2630, %2625 ]
  %2642 = phi i32 [ %2480, %2478 ], [ %2612, %2602 ], [ %2634, %2625 ]
  %2643 = phi i8* [ %2481, %2478 ], [ %2519, %2602 ], [ %2635, %2625 ]
  %2644 = phi i32 [ %2482, %2478 ], [ %2612, %2602 ], [ %2634, %2625 ]
  %2645 = phi i32 [ %2483, %2478 ], [ %2618, %2602 ], [ %2630, %2625 ]
  %2646 = phi i32 [ %2484, %2478 ], [ %2612, %2602 ], [ %2634, %2625 ]
  %2647 = phi i32 [ %2485, %2478 ], [ %2618, %2602 ], [ %2630, %2625 ]
  %2648 = shl i32 %2491, 8
  %2649 = icmp ult i32 %2646, %2648
  br i1 %2649, label %2653, label %2650

2650:                                             ; preds = %2640
  %2651 = sub i32 %2486, %2491
  %2652 = sub i32 %2646, %2648
  br label %2653

2653:                                             ; preds = %2640, %2650
  %2654 = phi i32 [ %2652, %2650 ], [ %2642, %2640 ]
  %2655 = phi i32 [ %2651, %2650 ], [ %2491, %2640 ]
  %2656 = phi i32 [ %2652, %2650 ], [ %2644, %2640 ]
  %2657 = phi i32 [ %2652, %2650 ], [ %2646, %2640 ]
  %2658 = phi i32 [ 1, %2650 ], [ 0, %2640 ]
  %2659 = icmp ult i32 %2655, 128
  br i1 %2659, label %2660, label %2668

2660:                                             ; preds = %2653
  %2661 = zext i32 %2655 to i64
  %2662 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %2661
  %2663 = load i8, i8* %2662, align 1
  %2664 = zext i8 %2663 to i32
  %2665 = shl i32 %2655, %2664
  %2666 = shl i32 %2657, %2664
  %2667 = sub nsw i32 %2647, %2664
  br label %2668

2668:                                             ; preds = %2660, %2653
  %2669 = phi i32 [ %2667, %2660 ], [ %2641, %2653 ]
  %2670 = phi i32 [ %2666, %2660 ], [ %2654, %2653 ]
  %2671 = phi i32 [ %2665, %2660 ], [ %2655, %2653 ]
  %2672 = phi i32 [ %2666, %2660 ], [ %2656, %2653 ]
  %2673 = phi i32 [ %2667, %2660 ], [ %2645, %2653 ]
  %2674 = phi i32 [ %2666, %2660 ], [ %2657, %2653 ]
  %2675 = phi i32 [ %2667, %2660 ], [ %2647, %2653 ]
  %2676 = icmp eq i32 %2658, 0
  br i1 %2676, label %2871, label %2677

2677:                                             ; preds = %2668, %2863
  %2678 = phi i32 [ %2864, %2863 ], [ %2669, %2668 ]
  %2679 = phi i32 [ %2865, %2863 ], [ %2670, %2668 ]
  %2680 = phi i8* [ %2843, %2863 ], [ %2643, %2668 ]
  %2681 = phi i32 [ %2867, %2863 ], [ %2672, %2668 ]
  %2682 = phi i32 [ %2867, %2863 ], [ %2674, %2668 ]
  %2683 = phi i32 [ %2868, %2863 ], [ %2673, %2668 ]
  %2684 = phi i32 [ %2869, %2863 ], [ %2673, %2668 ]
  %2685 = phi i32 [ %2866, %2863 ], [ %2671, %2668 ]
  %2686 = phi i32 [ %2687, %2863 ], [ 7, %2668 ]
  %2687 = add nsw i32 %2686, -1
  %2688 = shl i32 %2685, 7
  %2689 = add i32 %2688, -128
  %2690 = lshr i32 %2689, 8
  %2691 = add nuw nsw i32 %2690, 1
  %2692 = icmp slt i32 %2684, 0
  %2693 = icmp ult i8* %2680, %33
  %2694 = and i1 %2692, %2693
  br i1 %2694, label %2695, label %2840

2695:                                             ; preds = %2677
  %2696 = ptrtoint i8* %2680 to i64
  %2697 = sub nsw i32 0, %2684
  %2698 = xor i32 %2684, -1
  %2699 = sub i32 -8, %2684
  %2700 = icmp slt i32 %2699, -1
  %2701 = select i1 %2700, i32 %2699, i32 -1
  %2702 = sub i32 %2698, %2701
  %2703 = lshr i32 %2702, 3
  %2704 = zext i32 %2703 to i64
  %2705 = sub i64 0, %2696
  %2706 = getelementptr i8, i8* %2475, i64 %2705
  %2707 = ptrtoint i8* %2706 to i64
  %2708 = icmp ult i64 %2704, %2707
  %2709 = select i1 %2708, i64 %2704, i64 %2707
  %2710 = inttoptr i64 %2709 to i8*
  %2711 = getelementptr i8, i8* %2710, i64 1
  %2712 = ptrtoint i8* %2711 to i64
  %2713 = icmp ult i8* %2711, inttoptr (i64 8 to i8*)
  br i1 %2713, label %2820, label %2714

2714:                                             ; preds = %2695
  %2715 = and i64 %2712, -8
  %2716 = trunc i64 %2715 to i32
  %2717 = mul i32 %2716, -8
  %2718 = sub i32 %2717, %2684
  %2719 = getelementptr i8, i8* %2680, i64 %2715
  %2720 = insertelement <4 x i32> undef, i32 %2697, i32 0
  %2721 = shufflevector <4 x i32> %2720, <4 x i32> undef, <4 x i32> zeroinitializer
  %2722 = add <4 x i32> %2721, <i32 0, i32 -8, i32 -16, i32 -24>
  %2723 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %2684, i32 0
  %2724 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %2682, i32 0
  %2725 = add i64 %2715, -8
  %2726 = lshr exact i64 %2725, 3
  %2727 = add nuw nsw i64 %2726, 1
  %2728 = and i64 %2727, 1
  %2729 = icmp eq i64 %2725, 0
  br i1 %2729, label %2774, label %2730

2730:                                             ; preds = %2714
  %2731 = sub nuw nsw i64 %2727, %2728
  br label %2732

2732:                                             ; preds = %2732, %2730
  %2733 = phi i64 [ 0, %2730 ], [ %2770, %2732 ]
  %2734 = phi <4 x i32> [ %2722, %2730 ], [ %2771, %2732 ]
  %2735 = phi <4 x i32> [ %2723, %2730 ], [ %2757, %2732 ]
  %2736 = phi <4 x i32> [ zeroinitializer, %2730 ], [ %2758, %2732 ]
  %2737 = phi <4 x i32> [ %2724, %2730 ], [ %2768, %2732 ]
  %2738 = phi <4 x i32> [ zeroinitializer, %2730 ], [ %2769, %2732 ]
  %2739 = phi i64 [ %2731, %2730 ], [ %2772, %2732 ]
  %2740 = add <4 x i32> %2734, <i32 -32, i32 -32, i32 -32, i32 -32>
  %2741 = getelementptr i8, i8* %2680, i64 %2733
  %2742 = bitcast i8* %2741 to <4 x i8>*
  %2743 = load <4 x i8>, <4 x i8>* %2742, align 1
  %2744 = getelementptr i8, i8* %2741, i64 4
  %2745 = bitcast i8* %2744 to <4 x i8>*
  %2746 = load <4 x i8>, <4 x i8>* %2745, align 1
  %2747 = zext <4 x i8> %2743 to <4 x i32>
  %2748 = zext <4 x i8> %2746 to <4 x i32>
  %2749 = shl <4 x i32> %2747, %2734
  %2750 = shl <4 x i32> %2748, %2740
  %2751 = or <4 x i32> %2749, %2737
  %2752 = or <4 x i32> %2750, %2738
  %2753 = or i64 %2733, 8
  %2754 = add <4 x i32> %2734, <i32 -64, i32 -64, i32 -64, i32 -64>
  %2755 = add <4 x i32> %2734, <i32 -96, i32 -96, i32 -96, i32 -96>
  %2756 = getelementptr i8, i8* %2680, i64 %2753
  %2757 = add nsw <4 x i32> %2735, <i32 16, i32 16, i32 16, i32 16>
  %2758 = add nuw nsw <4 x i32> %2736, <i32 16, i32 16, i32 16, i32 16>
  %2759 = bitcast i8* %2756 to <4 x i8>*
  %2760 = load <4 x i8>, <4 x i8>* %2759, align 1
  %2761 = getelementptr i8, i8* %2756, i64 4
  %2762 = bitcast i8* %2761 to <4 x i8>*
  %2763 = load <4 x i8>, <4 x i8>* %2762, align 1
  %2764 = zext <4 x i8> %2760 to <4 x i32>
  %2765 = zext <4 x i8> %2763 to <4 x i32>
  %2766 = shl <4 x i32> %2764, %2754
  %2767 = shl <4 x i32> %2765, %2755
  %2768 = or <4 x i32> %2766, %2751
  %2769 = or <4 x i32> %2767, %2752
  %2770 = add i64 %2733, 16
  %2771 = add <4 x i32> %2734, <i32 -128, i32 -128, i32 -128, i32 -128>
  %2772 = add i64 %2739, -2
  %2773 = icmp eq i64 %2772, 0
  br i1 %2773, label %2774, label %2732, !llvm.loop !28

2774:                                             ; preds = %2732, %2714
  %2775 = phi <4 x i32> [ undef, %2714 ], [ %2757, %2732 ]
  %2776 = phi <4 x i32> [ undef, %2714 ], [ %2758, %2732 ]
  %2777 = phi <4 x i32> [ undef, %2714 ], [ %2768, %2732 ]
  %2778 = phi <4 x i32> [ undef, %2714 ], [ %2769, %2732 ]
  %2779 = phi i64 [ 0, %2714 ], [ %2770, %2732 ]
  %2780 = phi <4 x i32> [ %2722, %2714 ], [ %2771, %2732 ]
  %2781 = phi <4 x i32> [ %2723, %2714 ], [ %2757, %2732 ]
  %2782 = phi <4 x i32> [ zeroinitializer, %2714 ], [ %2758, %2732 ]
  %2783 = phi <4 x i32> [ %2724, %2714 ], [ %2768, %2732 ]
  %2784 = phi <4 x i32> [ zeroinitializer, %2714 ], [ %2769, %2732 ]
  %2785 = icmp eq i64 %2728, 0
  br i1 %2785, label %2802, label %2786

2786:                                             ; preds = %2774
  %2787 = getelementptr i8, i8* %2680, i64 %2779
  %2788 = getelementptr i8, i8* %2787, i64 4
  %2789 = bitcast i8* %2788 to <4 x i8>*
  %2790 = load <4 x i8>, <4 x i8>* %2789, align 1
  %2791 = zext <4 x i8> %2790 to <4 x i32>
  %2792 = add <4 x i32> %2780, <i32 -32, i32 -32, i32 -32, i32 -32>
  %2793 = shl <4 x i32> %2791, %2792
  %2794 = or <4 x i32> %2793, %2784
  %2795 = bitcast i8* %2787 to <4 x i8>*
  %2796 = load <4 x i8>, <4 x i8>* %2795, align 1
  %2797 = zext <4 x i8> %2796 to <4 x i32>
  %2798 = shl <4 x i32> %2797, %2780
  %2799 = or <4 x i32> %2798, %2783
  %2800 = add nuw nsw <4 x i32> %2782, <i32 8, i32 8, i32 8, i32 8>
  %2801 = add nsw <4 x i32> %2781, <i32 8, i32 8, i32 8, i32 8>
  br label %2802

2802:                                             ; preds = %2774, %2786
  %2803 = phi <4 x i32> [ %2775, %2774 ], [ %2801, %2786 ]
  %2804 = phi <4 x i32> [ %2776, %2774 ], [ %2800, %2786 ]
  %2805 = phi <4 x i32> [ %2777, %2774 ], [ %2799, %2786 ]
  %2806 = phi <4 x i32> [ %2778, %2774 ], [ %2794, %2786 ]
  %2807 = or <4 x i32> %2806, %2805
  %2808 = shufflevector <4 x i32> %2807, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %2809 = or <4 x i32> %2807, %2808
  %2810 = shufflevector <4 x i32> %2809, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %2811 = or <4 x i32> %2809, %2810
  %2812 = extractelement <4 x i32> %2811, i32 0
  %2813 = add <4 x i32> %2804, %2803
  %2814 = shufflevector <4 x i32> %2813, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %2815 = add <4 x i32> %2813, %2814
  %2816 = shufflevector <4 x i32> %2815, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %2817 = add <4 x i32> %2815, %2816
  %2818 = extractelement <4 x i32> %2817, i32 0
  %2819 = icmp eq i64 %2715, %2712
  br i1 %2819, label %2840, label %2820

2820:                                             ; preds = %2802, %2695
  %2821 = phi i32 [ %2697, %2695 ], [ %2718, %2802 ]
  %2822 = phi i32 [ %2684, %2695 ], [ %2818, %2802 ]
  %2823 = phi i32 [ %2682, %2695 ], [ %2812, %2802 ]
  %2824 = phi i8* [ %2680, %2695 ], [ %2719, %2802 ]
  br label %2825

2825:                                             ; preds = %2820, %2825
  %2826 = phi i32 [ %2836, %2825 ], [ %2821, %2820 ]
  %2827 = phi i32 [ %2830, %2825 ], [ %2822, %2820 ]
  %2828 = phi i32 [ %2834, %2825 ], [ %2823, %2820 ]
  %2829 = phi i8* [ %2835, %2825 ], [ %2824, %2820 ]
  %2830 = add nsw i32 %2827, 8
  %2831 = load i8, i8* %2829, align 1
  %2832 = zext i8 %2831 to i32
  %2833 = shl i32 %2832, %2826
  %2834 = or i32 %2833, %2828
  %2835 = getelementptr inbounds i8, i8* %2829, i64 1
  %2836 = add nsw i32 %2826, -8
  %2837 = icmp sgt i32 %2836, -1
  %2838 = icmp ult i8* %2835, %33
  %2839 = and i1 %2837, %2838
  br i1 %2839, label %2825, label %2840, !llvm.loop !29

2840:                                             ; preds = %2825, %2802, %2677
  %2841 = phi i32 [ %2678, %2677 ], [ %2818, %2802 ], [ %2830, %2825 ]
  %2842 = phi i32 [ %2679, %2677 ], [ %2812, %2802 ], [ %2834, %2825 ]
  %2843 = phi i8* [ %2680, %2677 ], [ %2719, %2802 ], [ %2835, %2825 ]
  %2844 = phi i32 [ %2681, %2677 ], [ %2812, %2802 ], [ %2834, %2825 ]
  %2845 = phi i32 [ %2683, %2677 ], [ %2818, %2802 ], [ %2830, %2825 ]
  %2846 = phi i32 [ %2684, %2677 ], [ %2818, %2802 ], [ %2830, %2825 ]
  %2847 = shl i32 %2691, 8
  %2848 = icmp ult i32 %2844, %2847
  %2849 = sub i32 %2685, %2691
  %2850 = sub i32 %2844, %2847
  %2851 = select i1 %2848, i32 %2842, i32 %2850
  %2852 = select i1 %2848, i32 %2691, i32 %2849
  %2853 = select i1 %2848, i32 %2844, i32 %2850
  %2854 = icmp ult i32 %2852, 128
  br i1 %2854, label %2855, label %2863

2855:                                             ; preds = %2840
  %2856 = zext i32 %2852 to i64
  %2857 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %2856
  %2858 = load i8, i8* %2857, align 1
  %2859 = zext i8 %2858 to i32
  %2860 = shl i32 %2852, %2859
  %2861 = shl i32 %2853, %2859
  %2862 = sub nsw i32 %2846, %2859
  br label %2863

2863:                                             ; preds = %2855, %2840
  %2864 = phi i32 [ %2862, %2855 ], [ %2841, %2840 ]
  %2865 = phi i32 [ %2861, %2855 ], [ %2851, %2840 ]
  %2866 = phi i32 [ %2860, %2855 ], [ %2852, %2840 ]
  %2867 = phi i32 [ %2861, %2855 ], [ %2853, %2840 ]
  %2868 = phi i32 [ %2862, %2855 ], [ %2845, %2840 ]
  %2869 = phi i32 [ %2862, %2855 ], [ %2846, %2840 ]
  %2870 = icmp eq i32 %2687, 0
  br i1 %2870, label %2871, label %2677

2871:                                             ; preds = %2863, %2668
  %2872 = phi i32 [ %2669, %2668 ], [ %2864, %2863 ]
  %2873 = phi i32 [ %2670, %2668 ], [ %2865, %2863 ]
  %2874 = phi i32 [ %2671, %2668 ], [ %2866, %2863 ]
  %2875 = phi i8* [ %2643, %2668 ], [ %2843, %2863 ]
  %2876 = phi i32 [ %2672, %2668 ], [ %2867, %2863 ]
  %2877 = phi i32 [ %2673, %2668 ], [ %2868, %2863 ]
  %2878 = phi i32 [ %2674, %2668 ], [ %2867, %2863 ]
  %2879 = phi i32 [ %2675, %2668 ], [ %2869, %2863 ]
  %2880 = add nuw nsw i32 %2487, 1
  %2881 = icmp eq i32 %2880, 4
  br i1 %2881, label %2882, label %2478

2882:                                             ; preds = %2871, %1881, %2059
  %2883 = phi i32 [ %1882, %1881 ], [ %2060, %2059 ], [ %2872, %2871 ]
  %2884 = phi i32 [ %1883, %1881 ], [ %2061, %2059 ], [ %2873, %2871 ]
  %2885 = phi i32 [ %1884, %1881 ], [ %2062, %2059 ], [ %2874, %2871 ]
  %2886 = phi i8* [ %1863, %1881 ], [ %2042, %2059 ], [ %2875, %2871 ]
  %2887 = shl i32 %2885, 7
  %2888 = add i32 %2887, -128
  %2889 = lshr i32 %2888, 8
  %2890 = add nuw nsw i32 %2889, 1
  %2891 = icmp slt i32 %2883, 0
  %2892 = icmp ult i8* %2886, %33
  %2893 = and i1 %2891, %2892
  br i1 %2893, label %2894, label %3041

2894:                                             ; preds = %2882
  %2895 = ptrtoint i8* %2886 to i64
  %2896 = sub nsw i32 0, %2883
  %2897 = xor i32 %2883, -1
  %2898 = sub i32 -8, %2883
  %2899 = icmp slt i32 %2898, -1
  %2900 = select i1 %2899, i32 %2898, i32 -1
  %2901 = sub i32 %2897, %2900
  %2902 = lshr i32 %2901, 3
  %2903 = zext i32 %2902 to i64
  %2904 = xor i64 %2895, -1
  %2905 = add i64 %2904, %30
  %2906 = getelementptr i8, i8* %28, i64 %2905
  %2907 = ptrtoint i8* %2906 to i64
  %2908 = icmp ult i64 %2903, %2907
  %2909 = select i1 %2908, i64 %2903, i64 %2907
  %2910 = inttoptr i64 %2909 to i8*
  %2911 = getelementptr i8, i8* %2910, i64 1
  %2912 = ptrtoint i8* %2911 to i64
  %2913 = icmp ult i8* %2911, inttoptr (i64 8 to i8*)
  br i1 %2913, label %3021, label %2914

2914:                                             ; preds = %2894
  %2915 = and i64 %2912, -8
  %2916 = trunc i64 %2915 to i32
  %2917 = mul i32 %2916, -8
  %2918 = sub i32 %2917, %2883
  %2919 = getelementptr i8, i8* %2886, i64 %2915
  %2920 = insertelement <4 x i32> undef, i32 %2896, i32 0
  %2921 = shufflevector <4 x i32> %2920, <4 x i32> undef, <4 x i32> zeroinitializer
  %2922 = add <4 x i32> %2921, <i32 0, i32 -8, i32 -16, i32 -24>
  %2923 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %2883, i32 0
  %2924 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %2884, i32 0
  %2925 = add i64 %2915, -8
  %2926 = lshr exact i64 %2925, 3
  %2927 = add nuw nsw i64 %2926, 1
  %2928 = and i64 %2927, 1
  %2929 = icmp eq i64 %2925, 0
  br i1 %2929, label %2976, label %2930

2930:                                             ; preds = %2914
  %2931 = sub nuw nsw i64 %2927, %2928
  br label %2932

2932:                                             ; preds = %2932, %2930
  %2933 = phi i64 [ 0, %2930 ], [ %2970, %2932 ]
  %2934 = phi <4 x i32> [ %2922, %2930 ], [ %2971, %2932 ]
  %2935 = phi <4 x i32> [ %2923, %2930 ], [ %2957, %2932 ]
  %2936 = phi <4 x i32> [ zeroinitializer, %2930 ], [ %2958, %2932 ]
  %2937 = phi <4 x i32> [ %2924, %2930 ], [ %2968, %2932 ]
  %2938 = phi <4 x i32> [ zeroinitializer, %2930 ], [ %2969, %2932 ]
  %2939 = phi i64 [ %2931, %2930 ], [ %2972, %2932 ]
  %2940 = add <4 x i32> %2934, <i32 -32, i32 -32, i32 -32, i32 -32>
  %2941 = getelementptr i8, i8* %2886, i64 %2933
  %2942 = bitcast i8* %2941 to <4 x i8>*
  %2943 = load <4 x i8>, <4 x i8>* %2942, align 1
  %2944 = getelementptr i8, i8* %2941, i64 4
  %2945 = bitcast i8* %2944 to <4 x i8>*
  %2946 = load <4 x i8>, <4 x i8>* %2945, align 1
  %2947 = zext <4 x i8> %2943 to <4 x i32>
  %2948 = zext <4 x i8> %2946 to <4 x i32>
  %2949 = shl <4 x i32> %2947, %2934
  %2950 = shl <4 x i32> %2948, %2940
  %2951 = or <4 x i32> %2949, %2937
  %2952 = or <4 x i32> %2950, %2938
  %2953 = or i64 %2933, 8
  %2954 = add <4 x i32> %2934, <i32 -64, i32 -64, i32 -64, i32 -64>
  %2955 = add <4 x i32> %2934, <i32 -96, i32 -96, i32 -96, i32 -96>
  %2956 = getelementptr i8, i8* %2886, i64 %2953
  %2957 = add nsw <4 x i32> %2935, <i32 16, i32 16, i32 16, i32 16>
  %2958 = add nuw nsw <4 x i32> %2936, <i32 16, i32 16, i32 16, i32 16>
  %2959 = bitcast i8* %2956 to <4 x i8>*
  %2960 = load <4 x i8>, <4 x i8>* %2959, align 1
  %2961 = getelementptr i8, i8* %2956, i64 4
  %2962 = bitcast i8* %2961 to <4 x i8>*
  %2963 = load <4 x i8>, <4 x i8>* %2962, align 1
  %2964 = zext <4 x i8> %2960 to <4 x i32>
  %2965 = zext <4 x i8> %2963 to <4 x i32>
  %2966 = shl <4 x i32> %2964, %2954
  %2967 = shl <4 x i32> %2965, %2955
  %2968 = or <4 x i32> %2966, %2951
  %2969 = or <4 x i32> %2967, %2952
  %2970 = add i64 %2933, 16
  %2971 = add <4 x i32> %2934, <i32 -128, i32 -128, i32 -128, i32 -128>
  %2972 = add i64 %2939, -2
  %2973 = icmp eq i64 %2972, 0
  br i1 %2973, label %2974, label %2932, !llvm.loop !30

2974:                                             ; preds = %2932
  %2975 = add nuw <4 x i32> %2936, <i32 24, i32 24, i32 24, i32 24>
  br label %2976

2976:                                             ; preds = %2974, %2914
  %2977 = phi <4 x i32> [ undef, %2914 ], [ %2957, %2974 ]
  %2978 = phi <4 x i32> [ undef, %2914 ], [ %2958, %2974 ]
  %2979 = phi <4 x i32> [ undef, %2914 ], [ %2968, %2974 ]
  %2980 = phi <4 x i32> [ undef, %2914 ], [ %2969, %2974 ]
  %2981 = phi i64 [ 0, %2914 ], [ %2970, %2974 ]
  %2982 = phi <4 x i32> [ %2922, %2914 ], [ %2971, %2974 ]
  %2983 = phi <4 x i32> [ %2923, %2914 ], [ %2957, %2974 ]
  %2984 = phi <4 x i32> [ <i32 8, i32 8, i32 8, i32 8>, %2914 ], [ %2975, %2974 ]
  %2985 = phi <4 x i32> [ %2924, %2914 ], [ %2968, %2974 ]
  %2986 = phi <4 x i32> [ zeroinitializer, %2914 ], [ %2969, %2974 ]
  %2987 = icmp eq i64 %2928, 0
  br i1 %2987, label %3003, label %2988

2988:                                             ; preds = %2976
  %2989 = getelementptr i8, i8* %2886, i64 %2981
  %2990 = getelementptr i8, i8* %2989, i64 4
  %2991 = bitcast i8* %2990 to <4 x i8>*
  %2992 = load <4 x i8>, <4 x i8>* %2991, align 1
  %2993 = zext <4 x i8> %2992 to <4 x i32>
  %2994 = add <4 x i32> %2982, <i32 -32, i32 -32, i32 -32, i32 -32>
  %2995 = shl <4 x i32> %2993, %2994
  %2996 = or <4 x i32> %2995, %2986
  %2997 = bitcast i8* %2989 to <4 x i8>*
  %2998 = load <4 x i8>, <4 x i8>* %2997, align 1
  %2999 = zext <4 x i8> %2998 to <4 x i32>
  %3000 = shl <4 x i32> %2999, %2982
  %3001 = or <4 x i32> %3000, %2985
  %3002 = add nsw <4 x i32> %2983, <i32 8, i32 8, i32 8, i32 8>
  br label %3003

3003:                                             ; preds = %2976, %2988
  %3004 = phi <4 x i32> [ %2977, %2976 ], [ %3002, %2988 ]
  %3005 = phi <4 x i32> [ %2978, %2976 ], [ %2984, %2988 ]
  %3006 = phi <4 x i32> [ %2979, %2976 ], [ %3001, %2988 ]
  %3007 = phi <4 x i32> [ %2980, %2976 ], [ %2996, %2988 ]
  %3008 = or <4 x i32> %3007, %3006
  %3009 = shufflevector <4 x i32> %3008, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %3010 = or <4 x i32> %3008, %3009
  %3011 = shufflevector <4 x i32> %3010, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %3012 = or <4 x i32> %3010, %3011
  %3013 = extractelement <4 x i32> %3012, i32 0
  %3014 = add <4 x i32> %3005, %3004
  %3015 = shufflevector <4 x i32> %3014, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %3016 = add <4 x i32> %3014, %3015
  %3017 = shufflevector <4 x i32> %3016, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %3018 = add <4 x i32> %3016, %3017
  %3019 = extractelement <4 x i32> %3018, i32 0
  %3020 = icmp eq i64 %2915, %2912
  br i1 %3020, label %3041, label %3021

3021:                                             ; preds = %3003, %2894
  %3022 = phi i32 [ %2896, %2894 ], [ %2918, %3003 ]
  %3023 = phi i32 [ %2883, %2894 ], [ %3019, %3003 ]
  %3024 = phi i8* [ %2886, %2894 ], [ %2919, %3003 ]
  %3025 = phi i32 [ %2884, %2894 ], [ %3013, %3003 ]
  br label %3026

3026:                                             ; preds = %3021, %3026
  %3027 = phi i32 [ %3037, %3026 ], [ %3022, %3021 ]
  %3028 = phi i32 [ %3031, %3026 ], [ %3023, %3021 ]
  %3029 = phi i8* [ %3036, %3026 ], [ %3024, %3021 ]
  %3030 = phi i32 [ %3035, %3026 ], [ %3025, %3021 ]
  %3031 = add nsw i32 %3028, 8
  %3032 = load i8, i8* %3029, align 1
  %3033 = zext i8 %3032 to i32
  %3034 = shl i32 %3033, %3027
  %3035 = or i32 %3034, %3030
  %3036 = getelementptr inbounds i8, i8* %3029, i64 1
  %3037 = add nsw i32 %3027, -8
  %3038 = icmp sgt i32 %3037, -1
  %3039 = icmp ult i8* %3036, %33
  %3040 = and i1 %3038, %3039
  br i1 %3040, label %3026, label %3041, !llvm.loop !31

3041:                                             ; preds = %3026, %3003, %2882
  %3042 = phi i32 [ %2883, %2882 ], [ %3019, %3003 ], [ %3031, %3026 ]
  %3043 = phi i32 [ %2884, %2882 ], [ %3013, %3003 ], [ %3035, %3026 ]
  %3044 = phi i8* [ %2886, %2882 ], [ %2919, %3003 ], [ %3036, %3026 ]
  %3045 = ptrtoint i8* %3044 to i64
  %3046 = shl i32 %2890, 8
  %3047 = icmp ult i32 %3043, %3046
  %3048 = sub i32 %2885, %2890
  %3049 = select i1 %3047, i32 0, i32 %3046
  %3050 = sub i32 %3043, %3049
  %3051 = select i1 %3047, i32 %2890, i32 %3048
  %3052 = icmp ult i32 %3051, 128
  br i1 %3052, label %3053, label %3061

3053:                                             ; preds = %3041
  %3054 = zext i32 %3051 to i64
  %3055 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %3054
  %3056 = load i8, i8* %3055, align 1
  %3057 = zext i8 %3056 to i32
  %3058 = shl i32 %3051, %3057
  %3059 = shl i32 %3050, %3057
  %3060 = sub nsw i32 %3042, %3057
  br label %3061

3061:                                             ; preds = %3053, %3041
  %3062 = phi i32 [ %3060, %3053 ], [ %3042, %3041 ]
  %3063 = phi i32 [ %3059, %3053 ], [ %3050, %3041 ]
  %3064 = phi i32 [ %3058, %3053 ], [ %3051, %3041 ]
  %3065 = shl i32 %3064, 7
  %3066 = add i32 %3065, -128
  %3067 = lshr i32 %3066, 8
  %3068 = add nuw nsw i32 %3067, 1
  %3069 = icmp slt i32 %3062, 0
  %3070 = icmp ult i8* %3044, %33
  %3071 = and i1 %3069, %3070
  br i1 %3071, label %3141, label %3287

3072:                                             ; preds = %3298, %3123
  %3073 = phi i32 [ %3124, %3123 ], [ %3299, %3298 ]
  %3074 = phi i8* [ %3104, %3123 ], [ %3290, %3298 ]
  %3075 = phi i32 [ %3125, %3123 ], [ %3300, %3298 ]
  %3076 = phi i32 [ %3126, %3123 ], [ %3301, %3298 ]
  %3077 = phi i32 [ %3079, %3123 ], [ 7, %3298 ]
  %3078 = phi i32 [ %3128, %3123 ], [ 0, %3298 ]
  %3079 = add nsw i32 %3077, -1
  %3080 = shl i32 %3076, 7
  %3081 = add i32 %3080, -128
  %3082 = lshr i32 %3081, 8
  %3083 = add nuw nsw i32 %3082, 1
  %3084 = icmp slt i32 %3075, 0
  br i1 %3084, label %3085, label %3102

3085:                                             ; preds = %3072
  %3086 = sub nsw i32 0, %3075
  br label %3087

3087:                                             ; preds = %3093, %3085
  %3088 = phi i32 [ %3073, %3085 ], [ %3098, %3093 ]
  %3089 = phi i8* [ %3074, %3085 ], [ %3099, %3093 ]
  %3090 = phi i32 [ %3075, %3085 ], [ %3094, %3093 ]
  %3091 = phi i32 [ %3086, %3085 ], [ %3100, %3093 ]
  %3092 = icmp ult i8* %3089, %33
  br i1 %3092, label %3093, label %3102

3093:                                             ; preds = %3087
  %3094 = add nsw i32 %3090, 8
  %3095 = load i8, i8* %3089, align 1
  %3096 = zext i8 %3095 to i32
  %3097 = shl i32 %3096, %3091
  %3098 = or i32 %3097, %3088
  %3099 = getelementptr inbounds i8, i8* %3089, i64 1
  %3100 = add nsw i32 %3091, -8
  %3101 = icmp sgt i32 %3100, -1
  br i1 %3101, label %3087, label %3102

3102:                                             ; preds = %3093, %3087, %3072
  %3103 = phi i32 [ %3073, %3072 ], [ %3088, %3087 ], [ %3098, %3093 ]
  %3104 = phi i8* [ %3074, %3072 ], [ %3089, %3087 ], [ %3099, %3093 ]
  %3105 = phi i32 [ %3075, %3072 ], [ %3090, %3087 ], [ %3094, %3093 ]
  %3106 = shl i32 %3083, 8
  %3107 = icmp ult i32 %3103, %3106
  %3108 = sub i32 %3076, %3083
  %3109 = select i1 %3107, i32 0, i32 %3106
  %3110 = sub i32 %3103, %3109
  %3111 = select i1 %3107, i32 %3083, i32 %3108
  %3112 = xor i1 %3107, true
  %3113 = zext i1 %3112 to i32
  %3114 = icmp ult i32 %3111, 128
  br i1 %3114, label %3115, label %3123

3115:                                             ; preds = %3102
  %3116 = zext i32 %3111 to i64
  %3117 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %3116
  %3118 = load i8, i8* %3117, align 1
  %3119 = zext i8 %3118 to i32
  %3120 = shl i32 %3111, %3119
  %3121 = shl i32 %3110, %3119
  %3122 = sub nsw i32 %3105, %3119
  br label %3123

3123:                                             ; preds = %3115, %3102
  %3124 = phi i32 [ %3121, %3115 ], [ %3110, %3102 ]
  %3125 = phi i32 [ %3122, %3115 ], [ %3105, %3102 ]
  %3126 = phi i32 [ %3120, %3115 ], [ %3111, %3102 ]
  %3127 = shl i32 %3113, %3079
  %3128 = or i32 %3127, %3078
  %3129 = icmp eq i32 %3079, 0
  br i1 %3129, label %3130, label %3072

3130:                                             ; preds = %3123
  %3131 = trunc i32 %3128 to i8
  %3132 = icmp slt i8 %3131, 0
  br i1 %3132, label %3139, label %3133

3133:                                             ; preds = %3130
  %3134 = and i32 %3128, 255
  %3135 = zext i32 %3134 to i64
  %3136 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_120vp8_quantizer_lookupE, i64 0, i64 %3135
  %3137 = load i8, i8* %3136, align 1
  %3138 = zext i8 %3137 to i32
  br label %3139

3139:                                             ; preds = %3133, %3130, %22, %27, %2
  %3140 = phi i32 [ -1, %2 ], [ -1, %22 ], [ -1, %27 ], [ %3138, %3133 ], [ 63, %3130 ]
  ret i32 %3140

3141:                                             ; preds = %3061
  %3142 = sub nsw i32 0, %3062
  %3143 = xor i32 %3062, -1
  %3144 = sub i32 -8, %3062
  %3145 = icmp slt i32 %3144, -1
  %3146 = select i1 %3145, i32 %3144, i32 -1
  %3147 = sub i32 %3143, %3146
  %3148 = lshr i32 %3147, 3
  %3149 = zext i32 %3148 to i64
  %3150 = xor i64 %3045, -1
  %3151 = add i64 %3150, %30
  %3152 = getelementptr i8, i8* %28, i64 %3151
  %3153 = ptrtoint i8* %3152 to i64
  %3154 = icmp ult i64 %3149, %3153
  %3155 = select i1 %3154, i64 %3149, i64 %3153
  %3156 = inttoptr i64 %3155 to i8*
  %3157 = getelementptr i8, i8* %3156, i64 1
  %3158 = ptrtoint i8* %3157 to i64
  %3159 = icmp ult i8* %3157, inttoptr (i64 8 to i8*)
  br i1 %3159, label %3267, label %3160

3160:                                             ; preds = %3141
  %3161 = and i64 %3158, -8
  %3162 = trunc i64 %3161 to i32
  %3163 = mul i32 %3162, -8
  %3164 = sub i32 %3163, %3062
  %3165 = getelementptr i8, i8* %3044, i64 %3161
  %3166 = insertelement <4 x i32> undef, i32 %3142, i32 0
  %3167 = shufflevector <4 x i32> %3166, <4 x i32> undef, <4 x i32> zeroinitializer
  %3168 = add <4 x i32> %3167, <i32 0, i32 -8, i32 -16, i32 -24>
  %3169 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %3062, i32 0
  %3170 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %3063, i32 0
  %3171 = add i64 %3161, -8
  %3172 = lshr exact i64 %3171, 3
  %3173 = add nuw nsw i64 %3172, 1
  %3174 = and i64 %3173, 1
  %3175 = icmp eq i64 %3171, 0
  br i1 %3175, label %3222, label %3176

3176:                                             ; preds = %3160
  %3177 = sub nuw nsw i64 %3173, %3174
  br label %3178

3178:                                             ; preds = %3178, %3176
  %3179 = phi i64 [ 0, %3176 ], [ %3216, %3178 ]
  %3180 = phi <4 x i32> [ %3168, %3176 ], [ %3217, %3178 ]
  %3181 = phi <4 x i32> [ %3169, %3176 ], [ %3203, %3178 ]
  %3182 = phi <4 x i32> [ zeroinitializer, %3176 ], [ %3204, %3178 ]
  %3183 = phi <4 x i32> [ %3170, %3176 ], [ %3214, %3178 ]
  %3184 = phi <4 x i32> [ zeroinitializer, %3176 ], [ %3215, %3178 ]
  %3185 = phi i64 [ %3177, %3176 ], [ %3218, %3178 ]
  %3186 = add <4 x i32> %3180, <i32 -32, i32 -32, i32 -32, i32 -32>
  %3187 = getelementptr i8, i8* %3044, i64 %3179
  %3188 = bitcast i8* %3187 to <4 x i8>*
  %3189 = load <4 x i8>, <4 x i8>* %3188, align 1
  %3190 = getelementptr i8, i8* %3187, i64 4
  %3191 = bitcast i8* %3190 to <4 x i8>*
  %3192 = load <4 x i8>, <4 x i8>* %3191, align 1
  %3193 = zext <4 x i8> %3189 to <4 x i32>
  %3194 = zext <4 x i8> %3192 to <4 x i32>
  %3195 = shl <4 x i32> %3193, %3180
  %3196 = shl <4 x i32> %3194, %3186
  %3197 = or <4 x i32> %3195, %3183
  %3198 = or <4 x i32> %3196, %3184
  %3199 = or i64 %3179, 8
  %3200 = add <4 x i32> %3180, <i32 -64, i32 -64, i32 -64, i32 -64>
  %3201 = add <4 x i32> %3180, <i32 -96, i32 -96, i32 -96, i32 -96>
  %3202 = getelementptr i8, i8* %3044, i64 %3199
  %3203 = add nsw <4 x i32> %3181, <i32 16, i32 16, i32 16, i32 16>
  %3204 = add nuw nsw <4 x i32> %3182, <i32 16, i32 16, i32 16, i32 16>
  %3205 = bitcast i8* %3202 to <4 x i8>*
  %3206 = load <4 x i8>, <4 x i8>* %3205, align 1
  %3207 = getelementptr i8, i8* %3202, i64 4
  %3208 = bitcast i8* %3207 to <4 x i8>*
  %3209 = load <4 x i8>, <4 x i8>* %3208, align 1
  %3210 = zext <4 x i8> %3206 to <4 x i32>
  %3211 = zext <4 x i8> %3209 to <4 x i32>
  %3212 = shl <4 x i32> %3210, %3200
  %3213 = shl <4 x i32> %3211, %3201
  %3214 = or <4 x i32> %3212, %3197
  %3215 = or <4 x i32> %3213, %3198
  %3216 = add i64 %3179, 16
  %3217 = add <4 x i32> %3180, <i32 -128, i32 -128, i32 -128, i32 -128>
  %3218 = add i64 %3185, -2
  %3219 = icmp eq i64 %3218, 0
  br i1 %3219, label %3220, label %3178, !llvm.loop !32

3220:                                             ; preds = %3178
  %3221 = add nuw <4 x i32> %3182, <i32 24, i32 24, i32 24, i32 24>
  br label %3222

3222:                                             ; preds = %3220, %3160
  %3223 = phi <4 x i32> [ undef, %3160 ], [ %3203, %3220 ]
  %3224 = phi <4 x i32> [ undef, %3160 ], [ %3204, %3220 ]
  %3225 = phi <4 x i32> [ undef, %3160 ], [ %3214, %3220 ]
  %3226 = phi <4 x i32> [ undef, %3160 ], [ %3215, %3220 ]
  %3227 = phi i64 [ 0, %3160 ], [ %3216, %3220 ]
  %3228 = phi <4 x i32> [ %3168, %3160 ], [ %3217, %3220 ]
  %3229 = phi <4 x i32> [ %3169, %3160 ], [ %3203, %3220 ]
  %3230 = phi <4 x i32> [ <i32 8, i32 8, i32 8, i32 8>, %3160 ], [ %3221, %3220 ]
  %3231 = phi <4 x i32> [ %3170, %3160 ], [ %3214, %3220 ]
  %3232 = phi <4 x i32> [ zeroinitializer, %3160 ], [ %3215, %3220 ]
  %3233 = icmp eq i64 %3174, 0
  br i1 %3233, label %3249, label %3234

3234:                                             ; preds = %3222
  %3235 = getelementptr i8, i8* %3044, i64 %3227
  %3236 = getelementptr i8, i8* %3235, i64 4
  %3237 = bitcast i8* %3236 to <4 x i8>*
  %3238 = load <4 x i8>, <4 x i8>* %3237, align 1
  %3239 = zext <4 x i8> %3238 to <4 x i32>
  %3240 = add <4 x i32> %3228, <i32 -32, i32 -32, i32 -32, i32 -32>
  %3241 = shl <4 x i32> %3239, %3240
  %3242 = or <4 x i32> %3241, %3232
  %3243 = bitcast i8* %3235 to <4 x i8>*
  %3244 = load <4 x i8>, <4 x i8>* %3243, align 1
  %3245 = zext <4 x i8> %3244 to <4 x i32>
  %3246 = shl <4 x i32> %3245, %3228
  %3247 = or <4 x i32> %3246, %3231
  %3248 = add nsw <4 x i32> %3229, <i32 8, i32 8, i32 8, i32 8>
  br label %3249

3249:                                             ; preds = %3222, %3234
  %3250 = phi <4 x i32> [ %3223, %3222 ], [ %3248, %3234 ]
  %3251 = phi <4 x i32> [ %3224, %3222 ], [ %3230, %3234 ]
  %3252 = phi <4 x i32> [ %3225, %3222 ], [ %3247, %3234 ]
  %3253 = phi <4 x i32> [ %3226, %3222 ], [ %3242, %3234 ]
  %3254 = or <4 x i32> %3253, %3252
  %3255 = shufflevector <4 x i32> %3254, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %3256 = or <4 x i32> %3254, %3255
  %3257 = shufflevector <4 x i32> %3256, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %3258 = or <4 x i32> %3256, %3257
  %3259 = extractelement <4 x i32> %3258, i32 0
  %3260 = add <4 x i32> %3251, %3250
  %3261 = shufflevector <4 x i32> %3260, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %3262 = add <4 x i32> %3260, %3261
  %3263 = shufflevector <4 x i32> %3262, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %3264 = add <4 x i32> %3262, %3263
  %3265 = extractelement <4 x i32> %3264, i32 0
  %3266 = icmp eq i64 %3161, %3158
  br i1 %3266, label %3287, label %3267

3267:                                             ; preds = %3249, %3141
  %3268 = phi i32 [ %3142, %3141 ], [ %3164, %3249 ]
  %3269 = phi i32 [ %3062, %3141 ], [ %3265, %3249 ]
  %3270 = phi i8* [ %3044, %3141 ], [ %3165, %3249 ]
  %3271 = phi i32 [ %3063, %3141 ], [ %3259, %3249 ]
  br label %3272

3272:                                             ; preds = %3267, %3272
  %3273 = phi i32 [ %3283, %3272 ], [ %3268, %3267 ]
  %3274 = phi i32 [ %3277, %3272 ], [ %3269, %3267 ]
  %3275 = phi i8* [ %3282, %3272 ], [ %3270, %3267 ]
  %3276 = phi i32 [ %3281, %3272 ], [ %3271, %3267 ]
  %3277 = add nsw i32 %3274, 8
  %3278 = load i8, i8* %3275, align 1
  %3279 = zext i8 %3278 to i32
  %3280 = shl i32 %3279, %3273
  %3281 = or i32 %3280, %3276
  %3282 = getelementptr inbounds i8, i8* %3275, i64 1
  %3283 = add nsw i32 %3273, -8
  %3284 = icmp sgt i32 %3283, -1
  %3285 = icmp ult i8* %3282, %33
  %3286 = and i1 %3284, %3285
  br i1 %3286, label %3272, label %3287, !llvm.loop !33

3287:                                             ; preds = %3272, %3249, %3061
  %3288 = phi i32 [ %3062, %3061 ], [ %3265, %3249 ], [ %3277, %3272 ]
  %3289 = phi i32 [ %3063, %3061 ], [ %3259, %3249 ], [ %3281, %3272 ]
  %3290 = phi i8* [ %3044, %3061 ], [ %3165, %3249 ], [ %3282, %3272 ]
  %3291 = shl i32 %3068, 8
  %3292 = icmp ult i32 %3289, %3291
  %3293 = sub i32 %3064, %3068
  %3294 = select i1 %3292, i32 0, i32 %3291
  %3295 = sub i32 %3289, %3294
  %3296 = select i1 %3292, i32 %3068, i32 %3293
  %3297 = icmp ult i32 %3296, 128
  br i1 %3297, label %3302, label %3298

3298:                                             ; preds = %3302, %3287
  %3299 = phi i32 [ %3295, %3287 ], [ %3308, %3302 ]
  %3300 = phi i32 [ %3288, %3287 ], [ %3309, %3302 ]
  %3301 = phi i32 [ %3296, %3287 ], [ %3307, %3302 ]
  br label %3072

3302:                                             ; preds = %3287
  %3303 = zext i32 %3296 to i64
  %3304 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %3303
  %3305 = load i8, i8* %3304, align 1
  %3306 = zext i8 %3305 to i32
  %3307 = shl i32 %3296, %3306
  %3308 = shl i32 %3295, %3306
  %3309 = sub nsw i32 %3288, %3306
  br label %3298

3310:                                             ; preds = %82
  %3311 = sub nsw i32 0, %83
  %3312 = xor i32 %83, -1
  %3313 = sub i32 -8, %83
  %3314 = icmp slt i32 %3313, -1
  %3315 = select i1 %3314, i32 %3313, i32 -1
  %3316 = sub i32 %3312, %3315
  %3317 = lshr i32 %3316, 3
  %3318 = zext i32 %3317 to i64
  %3319 = xor i64 %69, -1
  %3320 = add i64 %3319, %30
  %3321 = getelementptr i8, i8* %28, i64 %3320
  %3322 = ptrtoint i8* %3321 to i64
  %3323 = icmp ult i64 %3318, %3322
  %3324 = select i1 %3323, i64 %3318, i64 %3322
  %3325 = inttoptr i64 %3324 to i8*
  %3326 = getelementptr i8, i8* %3325, i64 1
  %3327 = ptrtoint i8* %3326 to i64
  %3328 = icmp ult i8* %3326, inttoptr (i64 8 to i8*)
  br i1 %3328, label %3435, label %3329

3329:                                             ; preds = %3310
  %3330 = and i64 %3327, -8
  %3331 = trunc i64 %3330 to i32
  %3332 = mul i32 %3331, -8
  %3333 = sub i32 %3332, %83
  %3334 = getelementptr i8, i8* %68, i64 %3330
  %3335 = insertelement <4 x i32> undef, i32 %3311, i32 0
  %3336 = shufflevector <4 x i32> %3335, <4 x i32> undef, <4 x i32> zeroinitializer
  %3337 = add <4 x i32> %3336, <i32 0, i32 -8, i32 -16, i32 -24>
  %3338 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %83, i32 0
  %3339 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %84, i32 0
  %3340 = add i64 %3330, -8
  %3341 = lshr exact i64 %3340, 3
  %3342 = add nuw nsw i64 %3341, 1
  %3343 = and i64 %3342, 1
  %3344 = icmp eq i64 %3340, 0
  br i1 %3344, label %3389, label %3345

3345:                                             ; preds = %3329
  %3346 = sub nuw nsw i64 %3342, %3343
  br label %3347

3347:                                             ; preds = %3347, %3345
  %3348 = phi i64 [ 0, %3345 ], [ %3385, %3347 ]
  %3349 = phi <4 x i32> [ %3337, %3345 ], [ %3386, %3347 ]
  %3350 = phi <4 x i32> [ %3338, %3345 ], [ %3372, %3347 ]
  %3351 = phi <4 x i32> [ zeroinitializer, %3345 ], [ %3373, %3347 ]
  %3352 = phi <4 x i32> [ %3339, %3345 ], [ %3383, %3347 ]
  %3353 = phi <4 x i32> [ zeroinitializer, %3345 ], [ %3384, %3347 ]
  %3354 = phi i64 [ %3346, %3345 ], [ %3387, %3347 ]
  %3355 = add <4 x i32> %3349, <i32 -32, i32 -32, i32 -32, i32 -32>
  %3356 = getelementptr i8, i8* %68, i64 %3348
  %3357 = bitcast i8* %3356 to <4 x i8>*
  %3358 = load <4 x i8>, <4 x i8>* %3357, align 1
  %3359 = getelementptr i8, i8* %3356, i64 4
  %3360 = bitcast i8* %3359 to <4 x i8>*
  %3361 = load <4 x i8>, <4 x i8>* %3360, align 1
  %3362 = zext <4 x i8> %3358 to <4 x i32>
  %3363 = zext <4 x i8> %3361 to <4 x i32>
  %3364 = shl <4 x i32> %3362, %3349
  %3365 = shl <4 x i32> %3363, %3355
  %3366 = or <4 x i32> %3364, %3352
  %3367 = or <4 x i32> %3365, %3353
  %3368 = or i64 %3348, 8
  %3369 = add <4 x i32> %3349, <i32 -64, i32 -64, i32 -64, i32 -64>
  %3370 = add <4 x i32> %3349, <i32 -96, i32 -96, i32 -96, i32 -96>
  %3371 = getelementptr i8, i8* %68, i64 %3368
  %3372 = add nsw <4 x i32> %3350, <i32 16, i32 16, i32 16, i32 16>
  %3373 = add nuw nsw <4 x i32> %3351, <i32 16, i32 16, i32 16, i32 16>
  %3374 = bitcast i8* %3371 to <4 x i8>*
  %3375 = load <4 x i8>, <4 x i8>* %3374, align 1
  %3376 = getelementptr i8, i8* %3371, i64 4
  %3377 = bitcast i8* %3376 to <4 x i8>*
  %3378 = load <4 x i8>, <4 x i8>* %3377, align 1
  %3379 = zext <4 x i8> %3375 to <4 x i32>
  %3380 = zext <4 x i8> %3378 to <4 x i32>
  %3381 = shl <4 x i32> %3379, %3369
  %3382 = shl <4 x i32> %3380, %3370
  %3383 = or <4 x i32> %3381, %3366
  %3384 = or <4 x i32> %3382, %3367
  %3385 = add i64 %3348, 16
  %3386 = add <4 x i32> %3349, <i32 -128, i32 -128, i32 -128, i32 -128>
  %3387 = add i64 %3354, -2
  %3388 = icmp eq i64 %3387, 0
  br i1 %3388, label %3389, label %3347, !llvm.loop !34

3389:                                             ; preds = %3347, %3329
  %3390 = phi <4 x i32> [ undef, %3329 ], [ %3372, %3347 ]
  %3391 = phi <4 x i32> [ undef, %3329 ], [ %3373, %3347 ]
  %3392 = phi <4 x i32> [ undef, %3329 ], [ %3383, %3347 ]
  %3393 = phi <4 x i32> [ undef, %3329 ], [ %3384, %3347 ]
  %3394 = phi i64 [ 0, %3329 ], [ %3385, %3347 ]
  %3395 = phi <4 x i32> [ %3337, %3329 ], [ %3386, %3347 ]
  %3396 = phi <4 x i32> [ %3338, %3329 ], [ %3372, %3347 ]
  %3397 = phi <4 x i32> [ zeroinitializer, %3329 ], [ %3373, %3347 ]
  %3398 = phi <4 x i32> [ %3339, %3329 ], [ %3383, %3347 ]
  %3399 = phi <4 x i32> [ zeroinitializer, %3329 ], [ %3384, %3347 ]
  %3400 = icmp eq i64 %3343, 0
  br i1 %3400, label %3417, label %3401

3401:                                             ; preds = %3389
  %3402 = getelementptr i8, i8* %68, i64 %3394
  %3403 = getelementptr i8, i8* %3402, i64 4
  %3404 = bitcast i8* %3403 to <4 x i8>*
  %3405 = load <4 x i8>, <4 x i8>* %3404, align 1
  %3406 = zext <4 x i8> %3405 to <4 x i32>
  %3407 = add <4 x i32> %3395, <i32 -32, i32 -32, i32 -32, i32 -32>
  %3408 = shl <4 x i32> %3406, %3407
  %3409 = or <4 x i32> %3408, %3399
  %3410 = bitcast i8* %3402 to <4 x i8>*
  %3411 = load <4 x i8>, <4 x i8>* %3410, align 1
  %3412 = zext <4 x i8> %3411 to <4 x i32>
  %3413 = shl <4 x i32> %3412, %3395
  %3414 = or <4 x i32> %3413, %3398
  %3415 = add nuw nsw <4 x i32> %3397, <i32 8, i32 8, i32 8, i32 8>
  %3416 = add nsw <4 x i32> %3396, <i32 8, i32 8, i32 8, i32 8>
  br label %3417

3417:                                             ; preds = %3389, %3401
  %3418 = phi <4 x i32> [ %3390, %3389 ], [ %3416, %3401 ]
  %3419 = phi <4 x i32> [ %3391, %3389 ], [ %3415, %3401 ]
  %3420 = phi <4 x i32> [ %3392, %3389 ], [ %3414, %3401 ]
  %3421 = phi <4 x i32> [ %3393, %3389 ], [ %3409, %3401 ]
  %3422 = or <4 x i32> %3421, %3420
  %3423 = shufflevector <4 x i32> %3422, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %3424 = or <4 x i32> %3422, %3423
  %3425 = shufflevector <4 x i32> %3424, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %3426 = or <4 x i32> %3424, %3425
  %3427 = extractelement <4 x i32> %3426, i32 0
  %3428 = add <4 x i32> %3419, %3418
  %3429 = shufflevector <4 x i32> %3428, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %3430 = add <4 x i32> %3428, %3429
  %3431 = shufflevector <4 x i32> %3430, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %3432 = add <4 x i32> %3430, %3431
  %3433 = extractelement <4 x i32> %3432, i32 0
  %3434 = icmp eq i64 %3330, %3327
  br i1 %3434, label %3455, label %3435

3435:                                             ; preds = %3417, %3310
  %3436 = phi i32 [ %3311, %3310 ], [ %3333, %3417 ]
  %3437 = phi i32 [ %83, %3310 ], [ %3433, %3417 ]
  %3438 = phi i8* [ %68, %3310 ], [ %3334, %3417 ]
  %3439 = phi i32 [ %84, %3310 ], [ %3427, %3417 ]
  br label %3440

3440:                                             ; preds = %3435, %3440
  %3441 = phi i32 [ %3451, %3440 ], [ %3436, %3435 ]
  %3442 = phi i32 [ %3445, %3440 ], [ %3437, %3435 ]
  %3443 = phi i8* [ %3450, %3440 ], [ %3438, %3435 ]
  %3444 = phi i32 [ %3449, %3440 ], [ %3439, %3435 ]
  %3445 = add nsw i32 %3442, 8
  %3446 = load i8, i8* %3443, align 1
  %3447 = zext i8 %3446 to i32
  %3448 = shl i32 %3447, %3441
  %3449 = or i32 %3448, %3444
  %3450 = getelementptr inbounds i8, i8* %3443, i64 1
  %3451 = add nsw i32 %3441, -8
  %3452 = icmp sgt i32 %3451, -1
  %3453 = icmp ult i8* %3450, %33
  %3454 = and i1 %3452, %3453
  br i1 %3454, label %3440, label %3455, !llvm.loop !35

3455:                                             ; preds = %3440, %3417, %82
  %3456 = phi i32 [ %83, %82 ], [ %3433, %3417 ], [ %3445, %3440 ]
  %3457 = phi i32 [ %84, %82 ], [ %3427, %3417 ], [ %3449, %3440 ]
  %3458 = phi i8* [ %68, %82 ], [ %3334, %3417 ], [ %3450, %3440 ]
  %3459 = shl i32 %89, 8
  %3460 = icmp ult i32 %3457, %3459
  %3461 = sub i32 %85, %89
  %3462 = select i1 %3460, i32 0, i32 %3459
  %3463 = sub i32 %3457, %3462
  %3464 = select i1 %3460, i32 %89, i32 %3461
  %3465 = icmp ult i32 %3464, 128
  br i1 %3465, label %3466, label %93

3466:                                             ; preds = %3455
  %3467 = zext i32 %3464 to i64
  %3468 = getelementptr inbounds [128 x i8], [128 x i8]* @_ZN5media4cast12_GLOBAL__N_19vp8_shiftE, i64 0, i64 %3467
  %3469 = load i8, i8* %3468, align 1
  %3470 = zext i8 %3469 to i32
  %3471 = shl i32 %3464, %3470
  %3472 = shl i32 %3463, %3470
  %3473 = sub nsw i32 %3456, %3470
  br label %93

3474:                                             ; preds = %54
  %3475 = sub nuw nsw i32 -8, %47
  %3476 = add nsw i32 %47, 16
  %3477 = load i8, i8* %61, align 1
  %3478 = zext i8 %3477 to i32
  %3479 = shl i32 %3478, %3475
  %3480 = or i32 %3479, %60
  %3481 = getelementptr inbounds i8, i8* %49, i64 2
  br label %65
}

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !5, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !5, !3}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !5, !3}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !5, !3}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !5, !3}
!20 = distinct !{!20, !3}
!21 = distinct !{!21, !5, !3}
!22 = distinct !{!22, !3}
!23 = distinct !{!23, !5, !3}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !5, !3}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !5, !3}
!28 = distinct !{!28, !3}
!29 = distinct !{!29, !5, !3}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !5, !3}
!32 = distinct !{!32, !3}
!33 = distinct !{!33, !5, !3}
!34 = distinct !{!34, !3}
!35 = distinct !{!35, !5, !3}
